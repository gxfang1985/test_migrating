<?php

/**
 * ユーザー実データの削除
 */

require_once('fw/date.csp');
require_once('grn/delete_user_logger.csp');
require_once('grn/cli.csp');


$logger = GRN_DeleteUserLogger::getInstance();
$num_deleted = 0;

cb_cli_start();

// システムプロファイルから終了時刻を取得する
require_once('grn/system_logic.csp');
$system = GRN_System::getInstance();
$schedule = $system->getDeleteUserSchedule();

if (count($schedule) === 0 || ! is_array($schedule) || $schedule['disable']) {
    $msg = $logger->getErrMsg(GRN_UUM_INVALID_DELETE_SCHEDULE, null);
    $logger->log($msg);
    finalize_log($logger, $num_deleted);

    return;
}
$end_time = new CB_Time;
$end_time->hour = $schedule['end'];
$end_time_ex = new CB_TimeEx($end_time);

$end = new CB_DateTimeEx(cb_timestamp_to_datetime(time()));
$end->setTime($end_time_ex);

if ($schedule['start'] == $schedule['end']) {
    // これは登録時にvalidationではじくはずなので、あり得ない
    $msg = $logger->getErrMsg(GRN_UUM_INVALID_DELETE_SCHEDULE, null);
    $logger->log($msg);
    finalize_log($logger, $num_deleted);

    return;
} elseif ($schedule['start'] > $schedule['end']) {
    // 開始時刻と終了時刻で日付をまたぐ場合
    $end->moveDays(1);
}

// 削除対象ユーザーを取得する
// 実データ削除中に削除フラグを立てられたユーザーは次回起動時に削除する
global $G_container_base;
$uum = $G_container_base->getInstance('uum');
$delete_users = $uum->getUsersInfo(null, ['col_foreign_key'], 0, -1,
    'ORDER BY col_deleted, _id', 'col_deleted IS NOT NULL', '_id', true);

if (count($delete_users) === 0) {
    // 削除すべきユーザーがいない
    finalize_log($logger, $num_deleted);

    return;
}

foreach ($delete_users as $user) {
    //GRN2-3129
    $now = new CB_DateTimeEx(cb_timestamp_to_datetime(time(), "UTC"));
    //GRN2-3129

    // 終了時刻を過ぎていたら終了する
    if ($now->compare($end) >= 0) {
        break;
    }

    $login_name = $user['col_foreign_key'];
    $result = $uum->deleteUserFromName($login_name);

    if ($result == GRN_UUM_DELETE_SUCCESS) {
        $num_deleted++;
    } else {
        break;
    }

    $msg = $logger->getErrMsg($result, $login_name);
    $logger->log($msg);
}

finalize_log($logger, $num_deleted);

function finalize_log($logger, $num_deleted)
{
    $logger->release();

    $msg = sprintf("Deleted %d user%s.", $num_deleted,
        $num_deleted > 1 ? 's' : '');
    cb_cli_end($msg);
}



