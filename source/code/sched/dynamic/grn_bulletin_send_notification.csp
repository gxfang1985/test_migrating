<?php

use grn\grn\Validate;

global $G_INPUT;

$article_id = cb_at($G_INPUT, 'aid', null);

if (Validate::isNumber($article_id)) {
    // setup execution data
    $basedir = cb_basedir();
    $php = cb_get_cli_path();
    $ln = PHP_EOL;
    $file_path = [
        $basedir,
        'code',
        'command',
        'bulletin_send_notification.csp'
    ];
    $command = cb_get_fopen_execute_path($php,
            implode($file_path, DIRECTORY_SEPARATOR)) . ' ' . $article_id;

    // start
    $num_of_try = 1;
    $success = false;
    while ($num_of_try <= 10) {
        $output = [];
        $exit_code = null;

        exec($command, $output, $exit_code);
        echo implode($ln, $output) . $ln;

        if ($exit_code === CB_EXIT_SUCCESS) {
            $success = true;
            break;
        } else {
            echo "[Bulletin send notification(Register BackgroundJob), Try {$num_of_try} failed. Sleeping take a while]"
                 . $ln;
            sleep(5);
        }
        $num_of_try++;
    }

    // re-connect DB ( avoiding the connection timeout caused by mysql long sleep )
    $db = cb_get_master_db();
    $db->reconnect();

    if ( ! $success) {
        require_once('bulletin/error_code.csp');
        $error_code = E_GRN_BULLETIN_REGISTER_BACKGROUNDJOB_FAILED;
        echo "[Bulletin send notification(Register BackgroundJob) {$error_code} Failed (aid:{$article_id})]"
             . $ln;

        $msg = sprintf('[%ld] %s [register backgroundjob] Failed (aid:%s)',
            getmypid(), $error_code, $article_id);
        require_once('grn/logger.csp');
        $logger_manager = CB_LoggerManager::getInstance();
        $logger = $logger_manager->getLogger('grn.bulletin');
        $logger->error($msg, $error_code);

        cb_safe_exit(CB_EXIT_ERROR);
    } else {
        echo "[Bulletin send notification(Register BackgroundJob), Try {$num_of_try} success (aid:{$article_id})]"
             . $ln;
    }
}
