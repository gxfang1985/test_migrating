<?php
cb_require_role('CommandLine');

require_once('grn/cli.csp');

function cb_cli_start_option($mandatory = [], $other = [])
{
    _cb_cli_register_error_handler_hook();
    _cb_cli_register_option_classes();
    $other[] = new CB_CLI_HELP_OPTION();
    $opt = _cb_cli_get_options($mandatory, $other);

    return $opt;
}

class CB_CLI_CHARSET_OPTION
{
    function action($g_input_value)
    {

        if ($g_input_value == 'UTF-8' || $g_input_value == 'SJIS-win') {
            return $g_input_value;
        }

        return false;
    }

    function usage()
    {
        return 'SJIS-win/UTF-8';
    }

    function description()
    {
        return "Set charset encoding for export the logging to the csv file.";
    }
}

class CB_CLI_TITLE_OPTION
{
    function action($g_input_value)
    {
        if ($g_input_value == 'YES') {
            return true;
        }

        return false;
    }

    function usage()
    {
        return 'YES/NO';
    }

    function description()
    {
        return "Set the title for export the logging to the csv file.";
    }
}

$opts = cb_cli_start_option(
// Mandatory command-line options
    [],

    // Optional command-line options
    [
        new CB_CLI_BEFORE_OPTION(),
        new CB_CLI_CHARSET_OPTION(),
        new CB_CLI_TITLE_OPTION(),
    ]
);


require_once('grn/logger.csp');
$logic = GRN_LoggingLogic::getInstance();

$charset = array_key_exists(CB_CLI_CHARSET_OPTION, $opts)
    ? $opts[CB_CLI_CHARSET_OPTION] : false;
if ( ! $charset) {
    require_once('fw/i18n.csp');
    global $G_config_common;
    $charset = $G_config_common->get('I18N', 'default_external_encoding');
}

$put_title = array_key_exists(CB_CLI_TITLE_OPTION, $opts)
    ? $opts[CB_CLI_TITLE_OPTION] : null;

require_once('fw/csv.csp');
$csv = new CB_CSVWriter($charset);

if ($put_title) {
    require_once('fw/i18n.csp');
    $line = [];
    $line[] = $logic->getMessage('col_date');
    $line[] = $logic->getMessage('col_time');
    $line[] = $logic->getMessage('col_category');
    $line[] = $logic->getMessage('col_priority');
    $line[] = $logic->getMessage('col_msg');
    $line[] = $logic->getMessage('col_user');
    $line[] = $logic->getMessage('col_account');
    $line[] = $logic->getMessage('col_remote_host');
    $line[] = $logic->getMessage('col_remote_addr');
    $line[] = $logic->getMessage('col_action');
    $line[] = $logic->getMessage('col_object');

    $csv->writeLine($line);
}

$query = CB_LoggerQuery::getInstance();
$query->setForceIndex('idx_cat_ts');
$condition = "col_category <> 'fw.schedule'";

if (array_key_exists(CB_CLI_BEFORE_OPTION, $opts)) {
    $before = cb_date_convert2timestamp($opts[CB_CLI_BEFORE_OPTION]);
    $condition = '(' . $condition . ') AND ( col_timestamp < ' . $before . ')';
    $query->setForceIndex('idx_ts');
}
$query->setCondition($condition);
$query->select();

$ts = new CB_TimeStamp();
while ($row = $query->fetch_assoc()) {
    $line = [];
    $ts->unix_ts = $row['col_timestamp'];
    $datetime = $logic->timestamp_to_datetime($ts);
    $dt = new CB_DateTimeEx($datetime);
    $d = $dt->getDate();
    $line[] = $d->format();
    $t = $dt->getTime();
    $line[] = $t->format();

    $line[] = $logic->getCategoryName($row['col_category']);
    $line[] = $logic->getThresholdName($row['col_priority']);
    $line[] = $row['col_msg'];
    $line[] = $row['col_user'];
    $line[] = $row['col_account'];
    $line[] = $row['col_remote_host'];
    $line[] = $row['col_remote_addr'];
    $line[] = $row['col_action'];
    $line[] = $row['col_object'];
    $csv->writeLine($line);
}

$csv->close();


