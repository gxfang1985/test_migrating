<?php

cb_require_role('CommandLine');

global $G_config_common;
if ($G_config_common->get('BackupMode', 'disable')) {
    echo "Usage: Backupmode is disabled.\n";
    exit(1);
}

require_once('fw/backupmode.csp');
require_once('fw/date.csp');

//format check
$unregister = null;
$register = null;
for ($i = 1; $i < $argc; $i++) {
    if (preg_match("#^--unregister=[']?((\\\'|[^'])*)[']?$#", $argv[$i],
        $regs)
    ) {
        $unregister = $regs[1];
    }
}
for ($i = 1; $i < $argc; $i++) {
    if (preg_match("#^--register=[']?((\\\'|[^'])*)[']?$#", $argv[$i], $regs)) {
        $register = $regs[1];
    }
}

$start = null;
$period = null;
$message = null;
for ($i = 1; $i < $argc; $i++) {
    if ( ! is_null($unregister)) {
        if (preg_match("#^--unregister=[']?((\\\'|[^'])*)[']?$#", $argv[$i],
            $regs)
        ) {
            ;
        } else {
            echo "Usage: ${argv[0]} [--unregister='name'] [--register='name' --start='YYYY-MM-DD hh:mm:ss' --end='YYYY-MM-DD hh:mm:ss' [--message='message']]\n";
            exit(1);
        }
    } elseif ( ! is_null($register)) {
        if (preg_match("#^--register=[']?((\\\'|[^'])*)[']?$#", $argv[$i],
            $regs)
        ) {
            ;
        } elseif (preg_match("#^--start=[']?([0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9] [0-9][0-9]:[0-9][0-9]:[0-9][0-9])[']?$#",
            $argv[$i], $regs)
        ) {
            $start = $regs[1];
        } elseif (preg_match("#^--period=[']?([0-9]*)[']?$#", $argv[$i], $regs)
                  && is_numeric($regs[1])
        ) {
            $period = $regs[1];
        } elseif (preg_match("#^--message=[']?((\\\'|[^'])*)[']?$#", $argv[$i],
            $regs)
        ) {
            $message = $regs[1];
        } else {
            echo "Usage: ${argv[0]} [--unregister='name'] [--register='name' --start='YYYY-MM-DD hh:mm:ss' --period='minutes' [--message='message']]\n";
            exit(1);
        }
    } else {
        echo "Usage: ${argv[0]} [--unregister='name'] [--register='name' --start='YYYY-MM-DD hh:mm:ss' --period='minutes' [--message='message']]\n";
        exit(1);
    }
}

if ( ! is_null($unregister)) {
    cb_unregister_backupmode_event($unregister);
} elseif ( ! is_null($register)) {
    if (is_null($start) || is_null($period)) {
        echo "Usage: ${argv[0]} [--unregister='name'] [--register='name' --start='YYYY-MM-DD hh:mm:ss' --period='minutes' [--message='message']]\n";
        exit(1);
    }

    //validation and conversion
    $start_dt = new CB_DateTime();
    $start_dt->parse($start);
    if ( ! cb_date_validate_date($start_dt)) {
        echo "Invalid datetime: --start='$start'\n";
        exit(1);
    } else {
        $start_ex = new CB_DateTimeEx($start_dt);
    }

    cb_register_backupmode_event($register, $start_ex, $period, $message);
}

$list = cb_backupmode_event_list();

echo "schedule list:\n";
echo "name ; start(YYYY-MM-DD hh:mm:ss) ; period(min)\n";
echo "-----------------------------------------------\n";

foreach ($list as $key => $item) {
    $name = $key;
    $start = $item['start']->format();
    $period = $item['period'];

    echo "$name ; $start ; $period\n";
}


