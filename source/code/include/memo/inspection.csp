<?php

/**
 * Inspection for Memo.
 *
 * @create  2007/06
 * @version 1.0
 * @package grn.memo
 */

class GRN_Memo_Inspection extends CB_ModuleBase
{
    private static $_instance = null;

    /**
     * @return GRN_Memo_Inspection
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    var $_logger = null;

    var $_uum = null;

    function __construct()
    {
        require_once('grn/logger.csp');
        $logger_manager = CB_LoggerManager::getInstance();

        parent::__construct('grn.memo');

        $this->_logger = $logger_manager->getLogger($this->getModuleId());

        global $G_container_base;
        $this->_uum = $G_container_base->getInstance('uum');
    }

    function isEnabled()
    {
        return $this->_logger->isNoticeEnabled();
    }

    function record($action, $target, $params = [])
    {
        $this->_logger->noticeEx($action, $target, $params);
    }

    //Write log for FILE
    function writeLogFile($action, &$memo, &$file)
    {
        $folder_id = 0;
        if ($folder = $memo->get('folder')) {
            $folder_id = $folder->getOId();
        }

        $body = $file->getCurrentBody();

        $logProps = [
            'did'       => $folder_id,
            'fid'       => $file->getOId(),
            'file_name' => $body->get('name'),
            'title'     => is_null($file->getTitle()) ? $body->get('name')
                : $file->getTitle()
        ];

        switch ($action) {
            case "create":
            case "modify":
                $logProps['version_setting'] = $file->getMaxVersion();
                break;
            case "update":
            case "restore":
                $logProps['version'] = $file->getVersion();
                break;
        }

        $target = 'file';
        if (strcmp($action, 'modify') == 0) {
            $target = 'file_information';
        }

        if ($this->isEnabled()) {
            $this->record($action, $target, $logProps);
        }
    }

    //Write log for Folder
    function writeLogFolder($action, &$folder)
    {
        $properties = [
            'did'    => $folder->getOID(),
            'folder' => $folder->get('name'),
            'pdid'   => strlen($folder->getId('parent')) > 0
                ? $folder->getId('parent') : 0
        ];
        if ($this->isEnabled()) {
            $this->record($action, 'folder', $properties);
        }
        if ($action === 'delete') {
            require_once('memo/list.csp');
            $logged_in_user = $this->_uum->getLoginUser();
            $list = new GRN_Memo_ItemList($logged_in_user);
            $list->setFolder($folder);
            while ( ! is_null(($item = $list->iterate()))) {
                if ( ! $item->isFile()) {
                    $this->writeLogMemo('modify', $item);
                } else {
                    $content = $item->getContent();
                    $this->writeLogFile('modify', $item, $content);
                }
            }
            $folders = $folder->getFolders();
            if (count($folders) > 0) {
                foreach ($folders as $fid => $sub_folder) {
                    $this->writeLogFolder($action, $sub_folder);
                }
            }
        }
    }

    // Write log for Memo
    function writeLogMemo($action, $item)
    {
        if ($this->_logger->isNoticeEnabled()) {
            if (is_object($item)) {
                $target = 'memo';
                $folder = $item->get('folder');
                $folder = (is_object($folder) ? $folder->getOID() : 0);
                $params = [
                    'iid'   => $item->getOID(),
                    'title' => $item->get('title'),
                    'did'   => $folder
                ];
                $this->record($action, $target, $params);
            }
        }
    }
}


