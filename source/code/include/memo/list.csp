<?php
/**
 * @brief
 * @author   Yoshiaki Tanaka
 * @date     2005/04/08
 * @par      Copyright (c) 2005 Cybozu,Inc. All rights reserved .
 * @package  grn.memo
 */

require_once('grn/application.csp');
require_once('memo/table.csp');

/**
 * @class    GRN_Memo_FolderList
 * @package  grn.memo
 */
class GRN_Memo_ItemList
{
    /**
     * @access private
     */
    var $_table = null;

    /**
     * @access private
     */
    var $_user = null;

    /**
     * @access private
     */
    var $_rowset = null;


    function __construct(& $user)
    {
        if ( ! $user) {
            require_once('memo/error_code.csp');
            cb_throw_error(E_GRN_MEMO_INTERNAL);
        }

        $this->_user =& $user;
    }

    /**
     * @access private
     */
    var $_order_columns = [];

    function addOrderColumn($column, $order)
    {
        if ($this->_rowset) {
            return false;
        }

        $app_locator = GRN_ApplicationLocator::instance();
        $db = $app_locator->getConnection('memo');

        $column = $db->escape($column);
        $this->_order_columns[$column] = $order;

        return true;
    }

    function getOrderColumn($index)
    {
        $columns = array_keys($this->_order_columns);
        if (count($columns) <= $index) {
            return false;
        }

        return [$columns[$index], $this->_order_columns[$columns[$index]]];
    }

    /**
     * @access private
     */
    var $_folder = null;

    function setFolder(& $folder)
    {
        if ($this->_rowset) {
            return false;
        }

        $this->_folder = $folder;

        if ( ! $this->_folder) {
            $this->_folder = null;
        }

        return true;
    }

    function &getFolder()
    {
        return $this->_folder;
    }

    /**
     * @access private
     */
    var $_offset = 0;

    function setOffset($offset)
    {
        if ($this->_rowset) {
            return false;
        }
        $this->_offset = $offset;

        return true;
    }

    function getOffset()
    {
        return $this->_offset;
    }

    /**
     * @access private
     */
    var $_limit = 20;

    function setLimit($limit)
    {
        if ($this->_rowset) {
            return false;
        }
        $this->_limit = $limit;

        return true;
    }

    function getLimit()
    {
        return $this->_limit;
    }

    function _table2alias($table)
    {
        $map = [
            'grn_memo_folder'              => 'fo',
            'grn_memo_content'             => 'ct',
            'grn_memo_item'                => 'it',
            'grn_memo_itemfilerelation'    => 'ir',
            'grn_memo_contentfilerelation' => 'br',
            'grn_memo_file'                => 'gf',
            'grn_memo_filebody'            => 'gb',
        ];

        if ( ! is_string($table)) {
            require_once('memo/error_code.csp');
            cb_throw_error(E_GRN_MEMO_INTERNAL);
        }

        $table_name = strtolower($table);

        if ( ! array_key_exists($table_name, $map)) {
            require_once('memo/error_code.csp');
            cb_throw_error(E_GRN_MEMO_INTERNAL);
        }

        return $map[$table_name];
    }

    /**
     * @return CB_MultiRowSet
     */
    function createRowSet()
    {
        $app_locator = GRN_ApplicationLocator::instance();
        $tm = $app_locator->getTableManager('memo');

        $tab_item = $tm->getTableInfo('grn_memo_item');
        $tab_item_alias = $this->_table2alias('grn_memo_item');

        $tab_content = $tm->getTableInfo('grn_memo_content');
        $tab_content_alias = $this->_table2alias('grn_memo_content');

        $tab_relation = $tm->getTableInfo('grn_memo_itemfilerelation');
        $tab_relation_alias = $this->_table2alias('grn_memo_itemfilerelation');

        $tab_file = $tm->getTableInfo('grn_memo_file');
        $tab_file_alias = $this->_table2alias('grn_memo_file');

        $tab_filebody = $tm->getTableInfo('grn_memo_filebody');
        $tab_filebody_alias = $this->_table2alias('grn_memo_filebody');

        $rowset = new CB_MultiRowSet($tab_item, $tab_item_alias);
        $rowset->addCondition($rowset->queryf($tab_item_alias
                                              . ".col_user = '@S'",
            $this->_user->getOID()));

        if ( ! is_null($this->_folder)) {
            $rowset->addCondition($rowset->queryf($tab_item_alias
                                                  . ".col_folder = '@S'",
                $this->_folder->getOID()));
        }

        $rowset->addJoin($tab_content,
            $tab_item_alias . '._id = ' . $tab_content_alias . '.col_item',
            CB_DATABASE_LEFT_JOIN, $tab_content_alias);

        $rowset->addJoin($tab_relation,
            $tab_item_alias . '._id = ' . $tab_relation_alias . '.col_item',
            CB_DATABASE_LEFT_JOIN, $tab_relation_alias);

        $rowset->addJoin($tab_file,
            $tab_relation_alias . '.col_file = ' . $tab_file_alias . '._id',
            CB_DATABASE_LEFT_JOIN, $tab_file_alias);

        $conditions = [];
        $conditions[] = $tab_file_alias . '._id = ' . $tab_filebody_alias
                        . '.col_file';
        $conditions[] = $tab_file_alias . '.col_version = '
                        . $tab_filebody_alias . '.col_version';

        $rowset->addJoin($tab_filebody,
            implode(' AND ', $conditions),
            CB_DATABASE_LEFT_JOIN, $tab_filebody_alias);

        return $rowset;
    }

    function setOrderColumns(& $rowset, $inverse = false)
    {
        $keys = array_keys($this->_order_columns);

        foreach ($keys as $column_name) {
            $order = $this->_order_columns[$column_name];

            if ($inverse) {
                $order = $order ? false : true;
            }

            $rowset->addOrderColumn($this->_table2alias('grn_memo_item')
                                    . '.col_' . $column_name, $order);
        }

        $rowset->addOrderColumn($this->_table2alias('grn_memo_item') . '._id',
            $inverse ? false : true);
    }

    function destroy()
    {
        if ($this->_rowset) {
            $this->_rowset->destroy();
            $this->_rowset = null;
        }
        $this->_initialized = false;
    }

    /**
     * @access private
     */
    var $_initialized = 0;

    function _initialize()
    {
        $this->destroy();

        if (is_null(($this->_rowset = $this->createRowSet()))) {
            return false;
        }

        $this->setOrderColumns($this->_rowset, false);

        $this->_rowset->limit($this->_offset, $this->_limit);

        return true;
    }

    function &iterate()
    {
        if ( ! $this->_initialized) {
            if ( ! $this->_initialize()) {
                $___ret = null;

                return $___ret;
            }

            $this->_initialized = 1;
        }

        if (is_null(($row =& $this->_rowset->iterate()))) {
            $this->destroy();
            {
                $___ret = null;

                return $___ret;
            }
        }

        $item =& $row[$this->_table2alias('grn_memo_item')];

        if (is_null($item) || $item === false) {
            $___ret = null;

            return $___ret;
        }

        $result = [
            'item' => & $item,
            'type' => $item->get('type'),
            'data' => null
        ];

        if ($item->isFile()) {
            $file =& $row[$this->_table2alias('grn_memo_file')];
            $file->_current =& $row[$this->_table2alias('grn_memo_filebody')];
            $item->_content =& $file;
        } else {
            $content =& $row[$this->_table2alias('grn_memo_content')];
            $item->_content =& $content;
        }

        return $item;
    }

    function count()
    {
        if ( ! ($rowset =& $this->createRowSet())) {
            return 0;
        }

        $rowset->applyGroupFunctions(['count' => 'COUNT(*)']);
        $result = $rowset->iterate();
        $rowset->destroy();

        return $result['count'];
    }


    function _makeNeighborCondition($previous, & $current)
    {
        $app_locator = GRN_ApplicationLocator::instance();
        $db = $app_locator->getConnection('memo');

        $conditions = [];
        $conditions[] = cb_queryf($db, "col_user = '@S'",
            $this->_user->getOID());

        if ( ! is_null($this->_folder)) {
            $conditions[] = cb_queryf($db, "col_folder = '@S'",
                $this->_folder->getOID());
        }

        $first_order = null;
        $previous_columns = [];
        $order_conditions = [];

        $num_columns = count($this->_order_columns);
        $loop_count = 0;

        foreach ($this->_order_columns as $column => $order) {
            $col_conditions = [];

            foreach ($previous_columns as $col_name => $col_value) {
                if (is_null($col_value)) {
                    $col_conditions[] = $col_name . ' IS NULL';
                } else {
                    $col_conditions[] = cb_queryf($db, $col_name . " = '@S'",
                        $col_value);
                }
            }

            if ($previous) {
                if ($order) {
                    $ope = ' > ';
                } else {
                    $ope = ' < ';
                }
            } else {
                if ($order) {
                    $ope = ' < ';
                } else {
                    $ope = ' > ';
                }
            }

            $col_name = 'col_' . $column;
            $col_value = $current->get($column);

            if (is_object($col_value)) {
                if ( ! is_a($col_value, 'cb_timestamp')) {
                    return null;
                }

                $col_value = $col_value->unix_ts;
            }

            if ( ! is_null($col_value)) {
                $col_conditions[] = cb_queryf($db, $col_name . $ope . "'@S'",
                    $col_value);
                $order_conditions[] = '(' . implode(' AND ', $col_conditions)
                                      . ')';
            } elseif (($loop_count + 1) < count($num_columns)) {
                $col_conditions[] = $col_name . ' IS NULL';
                $order_conditions[] = '(' . implode(' AND ', $col_conditions)
                                      . ')';
            }

            $previous_columns[$col_name] = $col_value;

            if (is_null($first_order)) {
                $first_order = $order;
            }

            $loop_count++;
        }

        $col_conditions = [];

        foreach ($previous_columns as $col_name => $col_value) {
            if (is_null($col_value)) {
                $col_conditions[] = $col_name . ' IS NULL';
            } else {
                $col_conditions[] = cb_queryf($db, $col_name . " = '@S'",
                    $col_value);
            }
        }

        if ($previous) {
            if ($first_order || is_null($first_order)) {
                $col_conditions[] = cb_queryf($db, "_id > '@S'",
                    $current->getOID());
            } else {
                $col_conditions[] = cb_queryf($db, "_id < '@S'",
                    $current->getOID());
            }
        } else {
            if ($first_order || is_null($first_order)) {
                $col_conditions[] = cb_queryf($db, "_id < '@S'",
                    $current->getOID());
            } else {
                $col_conditions[] = cb_queryf($db, "_id > '@S'",
                    $current->getOID());
            }
        }

        $order_conditions[] = '(' . implode(' AND ', $col_conditions) . ')';

        return implode(' AND ', $conditions) . ' AND (' . implode(' OR ',
                $order_conditions) . ')';
    }

    function _getNeighbor($previous, & $item)
    {
        if ( ! ($condition = $this->_makeNeighborCondition($previous, $item))) {
            return false;
        }

        $rowset = new CB_RowSet(cb_class2table('grn_memo_item'));
        $rowset->addCondition($condition);

        $first_order = null;
        foreach ($this->_order_columns as $column => $order) {
            $rowset->addOrderColumn('col_' . $column,
                $previous ? ($order ? false : true) : $order);
            if (is_null($first_order)) {
                $first_order = $order;
            }
        }

        if (is_null($first_order)) {
            $first_order = true;
        }

        $rowset->addOrderColumn(null,
            $previous ? ($first_order ? false : true) : $first_order);
        $rowset->limit(0, 1);
        $row = $rowset->iterate();
        $rowset->destroy();

        return $row;
    }

    function &getPrevious(& $item)
    {
        $ret = $this->_getNeighbor(1, $item);

        return $ret;
    }

    function &getNext($item)
    {
        $ret = $this->_getNeighbor(0, $item);

        return $ret;
    }
}


