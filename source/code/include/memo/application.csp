<?php

/**
 * Memoアプリケーションクラス
 *
 * @author  Tanaka, Yoshiaki        2005/04
 * @package grn.memo
 */

require_once('grn/application.csp');
require_once('grn/ui.csp');


/**
 * @package grn.memo
 */
class GRN_Memo extends GRN_ApplicationBase
{
    function __construct()
    {
        parent::__construct('memo');
    }

    /**
     * @access private
     */
    function _getTableInfo($class_name)
    {
        $app_locator = GRN_ApplicationLocator::instance();
        $tm = $app_locator->getTableManager('memo');

        $table = $tm->getTableInfo($class_name);

        return $table;
    }


    /**
     * システム設定
     */
    function getSystemConfigArray()
    {
        return [
            'memo_config' =>
                [
                    [
                        'page' => 'memo/system/common_set',
                        'icon' => 'general32'
                    ],
                ],
        ];
    }

    /**
     * 個人設定
     */
    /*
    function getPersonalConfigArray()
    {
        return array( 'memo_config' =>
                      array( array('page'=>'memo/personal/common_set',
                                   'icon'=>'general32'),
                             ),
                    );
    }
    */

    /**
     * ポートレット
     *
     * @return array
     */
    function &getPortletList()
    {
        $portlet = [
            'name'             => $this->getName(),
            'type'             => 'grn.memo.portlet',
            //種別
            'version'          => '1.0',
            //バージョン
            'set_template'     => 'memo/portlet/settings.csp',
            //設定用テンプレート名
            'command_template' => 'memo/portlet/command_settings.csp',
            //設定用テンプレート名
            'view_template'    => 'memo/portlet/view.csp'
            //表示用テンプレート名
        ];

        $ret = [$portlet];

        return $ret;
    }

    /**
     * アプリケーションのデータをクリーンアップする
     */
    function cleanup()
    {
        $this->_cleanup_memo_files();
    }

    function _cleanup_memo_files()
    {
        global $G_container_base;
        $logger = $G_container_base->getInstance('cleanup_logger');

        $app_locator = GRN_ApplicationLocator::instance();
        $manager = $app_locator->getTableManager('memo');

        require_once('memo/file.csp');
        $tab_file = $manager->getTableInfo('GRN_Memo_File');

        $rowset = new CB_RowSet($tab_file, 'file');
        $rowset->addCondition('file.col_creator IS NULL');

        while ( ! is_null($file = $rowset->iterate())) {
            $file_id = $file->getOID();
            $logger->log('[delete] memo file(fid:' . $file_id . ')');
            $file->delete();
        }

        $rowset->destroy();
        unset($tab_file, $rowset, $manager, $app_locator, $logger);
    }

}


