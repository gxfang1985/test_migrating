<?php
/**
 * @brief
 * @author   Yoshiaki Tanaka
 * @date     2005/04/08
 * @par      Copyright (c) 2005 Cybozu,Inc. All rights reserved .
 * @package  grn.memo
 */

require_once('fw/database.csp');
require_once('memo/file.csp');
require_once('memo/inspection.csp');

define('GRN_MEMO_ITEM_FILE', 'file');
define('GRN_MEMO_ITEM_CONTENT', 'content');


/**
 * @class    GRN_Memo_ItemFileRelation
 * @package  grn.memo
 */
class GRN_Memo_ItemFileRelation extends CB_PersistentBase
{
    var $_app_id = 'memo';

    //! ファイル
    var $col_file = ['type' => 'relation', 'to' => 'GRN_Memo_File'];

    //! アイテム
    var $col_item
        = [
            'type'   => 'weak_relation',
            'to'     => 'GRN_Memo_Item',
            'unique' => true
        ];

    var $idx_i_f = ['cols' => ['item', 'file'], 'unique' => true];


    function __construct(& $row)
    {
        parent::__construct($row);
    }
}

/**
 * @class    GRN_Memo_BodyFileRelation
 * @package  grn.memo
 */
class GRN_Memo_ContentFileRelation extends CB_PersistentBase
{
    var $_app_id = 'memo';

    //! ファイル
    var $col_file = ['type' => 'relation', 'to' => 'GRN_Memo_File'];

    //! データ
    var $col_content = ['type' => 'weak_relation', 'to' => 'GRN_Memo_Content'];

    var $idx_c_f = ['cols' => ['content', 'file'], 'unique' => true];


    function __construct(& $row)
    {
        parent::__construct($row);
    }
}

/**
 * @class    GRN_Memo_Content
 * @package  grn.memo
 */
class GRN_Memo_Content extends CB_PersistentBase
{
    var $_app_id = 'memo';

    //! アイテム
    var $col_item
        = [
            'type'   => 'relation',
            'to'     => 'GRN_Memo_Item',
            'unique' => true
        ];

    //! タイトル
    var $col_title
        = [
            'type'    => 'char',
            'length'  => CB_DATABASE_MAX_STRINDEX,
            'notnull' => true
        ];

    //! 内容
    var $col_data = ['type' => 'char', 'length' => 1048575];

    //! 内容（HTML）
    var $col_html = ['type' => 'char', 'length' => 1048575, 'lazy' => true];

    //! 作成時刻
    var $col_ctime = ['type' => 'timestamp'];

    //! 更新時刻
    var $col_mtime = ['type' => 'timestamp'];

    var $idx_mtime = ['cols' => 'mtime'];

    // 予備カラム
    var $col_reserve_text1 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text2 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text3 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_int1 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int2 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int3 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_blob1 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob2 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob3 = ['type' => 'blob', 'lazy' => true];


    function __construct(& $row)
    {
        parent::__construct($row);
    }

    function onCreate()
    {
        $ts = new CB_TimeStamp();
        $ts->unix_ts = time();
        $this->set('ctime', $ts);
        $this->set('mtime', $ts);
        $this->updateNow();
    }

    function onUpdate()
    {
        $ts = new CB_TimeStamp();
        $ts->unix_ts = time();
        $this->set('mtime', $ts);
        $this->updateNow();
    }

    function delete()
    {
        $this->deleteAllFiles();
        parent::delete();
    }

    function set($col_name, $col_value)
    {
        if ($col_name == 'title') {
            require_once('fw/string_util.csp');
            $col_value = cb_trim_check($col_value, E_COMMON_MISSING_MANDATORY);
            $item = $this->get('item');
            if ( ! is_null($item) && $item !== false) {
                $item->set('title', $col_value);
            }
        } elseif ($col_name == 'html') {
            require_once('grn/controller.csp');
            $col_value = grn_wash_script_without_style_attribute($col_value);
        }

        return parent::set($col_name, $col_value);
    }


    function deleteAllFiles()
    {
        $rowset = new CB_RowSet(cb_class2table('GRN_Memo_ContentFileRelation'));
        $rowset->addCondition($rowset->queryf("col_content = '@S'",
            $this->getOID()));
        while ( ! is_null(($row = $rowset->iterate()))) {
            $file = $row->get('file');

            //Logging
            $inspection = GRN_Memo_Inspection::getInstance();
            $item_delete = $this->get('item');
            $inspection->writeLogFile('delete', $item_delete, $file);

            $file->delete();
        }
        $rowset->destroy();

        if (($item = $this->get('item'))) {
            $item->set('size', 0);
        }
    }

    function addFile($user, & $file)
    {
        if (is_null($user) || ! is_a($user, 'CB_User')) {
            $___ret = null;

            return $___ret;
        }
        if (is_null($file)) {
            $___ret = null;

            return $___ret;
        }
        if (is_array($file) && $file['error'] != UPLOAD_ERR_OK) {
            $___ret = null;

            return $___ret;
        }

        require_once('memo/file.csp');
        $file_manager = new GRN_Memo_FileManager_Core();

        if (is_a($file, 'GRN_File')) {
            $dbfile = $file_manager->duplicateFile($user, $file, null);
        } else {
            $dbfile = $file_manager->createFile($user, $file, null);
        }

        if (is_null($dbfile) || $dbfile === false) {
            $___ret = null;

            return $___ret;
        }

        $dbfile->updateNow();

        $table = cb_class2table('GRN_Memo_ContentFileRelation');
        $relation = $table->newRow();

        $relation->set('file', $dbfile);
        $relation->set('content', $this);
        $relation->updateNow();

        assert('!is_null($this->get("item"))');

        if (($item = $this->get('item'))) {
            $body = $dbfile->getCurrentBody();
            $size = intval($item->get('size'));
            $size += $dbfile->get('size');
            $item->set('size', $size);

            //Logging
            $inspection = GRN_Memo_Inspection::getInstance();
            $inspection->writeLogFile('create', $item, $dbfile);
        }

        return $dbfile;
    }

    function deleteFile($id)
    {
        $rowset = new CB_RowSet(cb_class2table('GRN_Memo_ContentFileRelation'));
        $rowset->addCondition($rowset->queryf("col_content = '@S'",
            $this->getOID()));
        $rowset->addCondition($rowset->queryf("col_file = '@S'", $id));
        $row = $rowset->iterate();
        $rowset->destroy();

        if (is_null($row) || $row === false) {
            return false;
        }

        $file =& $row->get('file');

        if (is_null($file) || $file === false) {
            return false;
        }

        if (($item =& $this->get('item'))) {
            $body =& $file->getCurrentBody();
            $size = intval($item->get('size'));
            $size -= $file->get('size');
            $item->set('size', $size);

            //Logging
            $inspection = GRN_Memo_Inspection::getInstance();
            $inspection->writeLogFile('delete', $item, $file);
        }

        $file->delete();

        return true;
    }

    function &getFile($file_id)
    {
        $rowset = new CB_RowSet(cb_class2table('GRN_Memo_ContentFileRelation'));
        $rowset->addCondition($rowset->queryf("col_content = '@S'",
            $this->getOID()));
        $rowset->addCondition($rowset->queryf("col_file = '@S'", $file_id));
        $row = $rowset->iterate();
        $rowset->destroy();

        if (is_null($row)) {
            $___ret = null;

            return $___ret;
        }

        $ret =& $row->get('file');

        return $ret;
    }

    function getFiles()
    {
        $rowset = new CB_RowSet(cb_class2table('GRN_Memo_ContentFileRelation'));
        $rowset->addCondition($rowset->queryf("col_content = '@S'",
            $this->getOID()));
        $rowset->addOrderColumn(null);

        $files = [];
        while ( ! is_null(($row = $rowset->iterate()))) {
            $file = $row->get('file');
            $files[$file->getOID()] = $file;
        }
        $rowset->destroy();

        return $files;
    }

    function getNumFiles()
    {
        $rowset = new CB_RowSet(cb_class2table('GRN_Memo_ContentFileRelation'));
        $rowset->addCondition($rowset->queryf("col_content = '@S'",
            $this->getOID()));
        $rowset->applyGroupFunctions(['count' => 'COUNT(*)']);
        $result = $rowset->iterate();
        $rowset->destroy();

        return $result['count'];
    }

    function updateFile($file_id, & $newfile, $comment)
    {
        if ( ! ($file =& $this->getFile($file_id))) {
            return false;
        }

        $item =& $this->get('item');
        assert('!is_null($item)');
        $user =& $item->get('user');
        assert('!is_null($user)');

        $body =& $file->getCurrentBody();
        $size = $body->get('size');

        $file->update($user, $newfile, $comment);
        $file->updateNow();

        $body =& $file->getCurrentBody();
        $this->set('size', $body->get('size'));

        $item_size = $item->get('size');
        $item_size -= $size;
        $item_size += $body->get('size');

        $item->set('size', $item_size);
        $item->updateNow();

        //Logging
        $inspection = GRN_Memo_Inspection::getInstance();
        $inspection->writeLogFile('update', $item, $file);

        return true;
    }

    function restoreFile($file_id, $version, $comment)
    {
        if ( ! ($file =& $this->getFile($file_id))) {
            return false;
        }

        $item =& $this->get('item');
        assert('!is_null($item)');
        $user =& $item->get('user');
        assert('!is_null($user)');

        $body =& $file->getCurrentBody();
        $size = $body->get('size');

        $file->restore($user, $version, $comment);
        $file->updateNow();

        $body =& $file->getCurrentBody();
        $this->set('size', $body->get('size'));

        $item_size = $item->get('size');
        $item_size -= $size;
        $item_size += $body->get('size');

        $item->set('size', $item_size);
        $item->updateNow();

        //Logging
        $inspection = GRN_Memo_Inspection::getInstance();
        $inspection->writeLogFile('restore', $item, $file);

        return true;
    }
}

/**
 * @class    GRN_Memo_Item
 * @package  grn.memo
 */
class GRN_Memo_Item extends CB_PersistentBase
{
    var $_app_id = 'memo';

    //! フォルダ
    var $col_folder = ['type' => 'weak_relation', 'to' => 'GRN_Memo_Folder'];

    //! 種類
    var $col_type = ['type' => 'char', 'length' => CB_DATABASE_MAX_STRINDEX];

    //! 所有者
    var $col_user = ['type' => 'relation', 'to' => 'CB_User'];

    //! タイトル
    var $col_title = ['type' => 'char', 'length' => CB_DATABASE_MAX_STRINDEX];
    var $idx_title = ['cols' => ['title', null]];

    //! サイズ
    var $col_size = ['type' => 'int'];
    var $idx_size = ['cols' => 'size'];

    //! 作成時刻
    var $col_ctime = ['type' => 'timestamp'];

    //! 更新時刻
    var $col_mtime = ['type' => 'timestamp'];
    var $idx_mtime = ['cols' => ['mtime', null]];

    // 予備カラム
    var $col_reserve_text1 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text2 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text3 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_int1 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int2 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int3 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_blob1 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob2 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob3 = ['type' => 'blob', 'lazy' => true];


    function __construct(& $row)
    {
        parent::__construct($row);
    }

    function delete()
    {
        $content = $this->getContent();

        if ( ! is_null($content) && $content !== false) {
            if ($this->isFile()) {
                //Logging
                $inspection = GRN_Memo_Inspection::getInstance();
                $inspection->writeLogFile('delete', $this, $content);
            }

            $content->delete();
        }

        parent::delete();
    }

    function onCreate()
    {
        $ts = new CB_TimeStamp();
        $ts->unix_ts = time();
        $this->set('ctime', $ts);
        $this->set('mtime', $ts);
        $this->updateNow();
    }

    function onUpdate()
    {
        $ts = new CB_TimeStamp();
        $ts->unix_ts = time();
        $this->set('mtime', $ts);
        $this->updateNow();
    }

    function isFile()
    {
        return $this->get('type') == GRN_MEMO_ITEM_FILE;
    }

    /**
     * @access private
     */
    var $_content = null;

    function &getContent()
    {
        if ( ! is_null($this->_content)) {
            return $this->_content;
        }

        if ( ! $this->isFile()) {
            $rowset = new CB_RowSet(cb_class2table('GRN_Memo_Content'));
            $rowset->addCondition($rowset->queryf("col_item = '@S'",
                $this->getOID()));
            $row = $rowset->iterate();
            $rowset->destroy();
            $this->_content = $row;
        } else {
            $rowset
                = new CB_RowSet(cb_class2table('GRN_Memo_ItemFileRelation'));
            $rowset->addCondition($rowset->queryf("col_item = '@S'",
                $this->getOID()));
            $row = $rowset->iterate();
            $rowset->destroy();
            if ($row) {
                $this->_content = $row->get('file');
            } else {
                $this->_content = null;
            }
        }

        return $this->_content;
    }

    function createContent(& $user, $title, $data, $html, $files)
    {
        if ($this->get('ctime')) {
            $___ret = false;

            return $___ret;
        }
        if (is_null($user) || $user === false) {
            $___ret = false;

            return $___ret;
        }

        $app_locator = GRN_ApplicationLocator::instance();
        $tm = $app_locator->getTableManager('memo');
        $table = $tm->getTableInfo('GRN_Memo_Content');

        $content = $table->newRow();
        $content->set('title', $title);
        $content->set('data', $data);
        $content->set('html', $html);
        $content->set('item', $this);
        $content->updateNow();

        if ( ! is_null($files)) {
            $size = 0;

            foreach (array_keys($files) as $key) {
                $file = $content->addFile($user, $files[$key]);

                if ($file) {
                    $body = $file->getCurrentBody();
                    $size += $body->get('size');
                }

            }

            $this->set('size', $size);
        }
        $content->onCreate();

        $this->set('user', $user);
        $this->set('title', $title);
        $this->set('type', GRN_MEMO_ITEM_CONTENT);

        $this->onCreate();

        $this->_content = $content;

        return $content;
    }

    function createFile(& $user, $title, & $file, $comment = null)
    {
        if ($this->get('ctime')) {
            $___ret = false;

            return $___ret;
        }
        if (is_null($user) || $user === false) {
            $___ret = false;

            return $___ret;
        }

        require_once('memo/file.csp');
        $file_manager = new GRN_Memo_FileManager_Core();

        if (is_array($file)) {
            if ($file['error'] != UPLOAD_ERR_OK) {
                $___ret = false;

                return $___ret;
            }

            $dbfile = $file_manager->createFile($user, $file, $comment);
        } elseif (is_a($file, 'CB_ServerFile')) {
            $dbfile = $file_manager->createFile($user, $file, $comment);
        } else {
            $dbfile = $file_manager->duplicateFile($user, $file, $comment);
        }

        if ( ! $dbfile) {
            $___ret = false;

            return $___ret;
        }

        $dbfile->updateNow();

        $table = cb_class2table('GRN_Memo_ItemFileRelation');
        $relation = $table->newRow();
        $relation->set('item', $this);
        $relation->set('file', $dbfile);
        $relation->updateNow();

        $dbfile->setTitle($title);

        $body = $dbfile->getCurrentBody();

        $title = $dbfile->getTitle();
        if (strlen($title) < 1) {
            $title = $body->get('name');
        }

        $this->set('user', $user);
        $this->set('title', $title);
        $this->set('size', $body->get('size'));
        $this->set('type', GRN_MEMO_ITEM_FILE);

        $this->onCreate();

        $this->_content = $dbfile;

        return $dbfile;
    }

    function setTitle($title)
    {
        if (is_null(($content = $this->getContent()))) {
            return false;
        }

        if (is_a($content, 'GRN_File')) {
            $content->setTitle($title);
            if (strlen($title) < 1) {
                $body =& $content->getCurrentBody();
                $title = $body->get('name');
            }
        } else {
            $content->set('title', $title);
        }

        $this->set('title', $title);

        return true;
    }

    function getTitle()
    {
        return $this->get('title');
    }

    function updateFile(& $file, $comment)
    {
        if ( ! $this->isFile()) {
            return false;
        }

        if ( ! ($content = $this->getContent())) {
            return false;
        }

        $user =& $this->get('user');
        $content->update($user, $file, $comment);
        $content->updateNow();

        $body =& $content->getCurrentBody();
        $this->set('size', $body->get('size'));

        $title = $content->getTitle();
        if (strlen($title) < 1) {
            $title = $body->get('name');
        }
        $this->set('title', $title);

        $this->onUpdate();

        //Logging
        $inspection = GRN_Memo_Inspection::getInstance();
        $inspection->writeLogFile('update', $this, $content);

        return true;
    }

    function restoreFile($version, $comment)
    {
        if ( ! $this->isFile()) {
            return false;
        }

        if ( ! ($content = $this->getContent())) {
            return false;
        }

        $user =& $this->get('user');
        $content->restore($user, $version, $comment);
        $content->updateNow();

        $body =& $content->getCurrentBody();
        $this->set('size', $body->get('size'));

        $title = $content->getTitle();
        if (strlen($title) < 1) {
            $title = $body->get('name');
        }
        $this->set('title', $title);

        $this->onUpdate();

        //Logging
        $inspection = GRN_Memo_Inspection::getInstance();
        $inspection->writeLogFile('restore', $this, $content);

        return true;
    }
}


/**
 * @class    GRN_Memo_Folder
 * @package  grn.memo
 */
class GRN_Memo_Folder extends CB_PersistentBase
{
    var $_app_id = 'memo';

    //! フォルダの所有者
    var $col_user = ['type' => 'relation', 'to' => 'CB_User'];

    //! フォルダ名
    var $col_name
        = [
            'type'    => 'char',
            'length'  => CB_DATABASE_MAX_STRINDEX,
            'notnull' => true
        ];

    //! メモ
    var $col_description
        = [
            'type'   => 'char',
            'length' => 65535,
            'lazy'   => true
        ];

    //! 表示順序
    var $col_list_index = ['type' => 'list_index'];

    //! 作成時刻
    var $col_ctime = ['type' => 'timestamp'];

    //! 更新時刻
    var $col_mtime = ['type' => 'timestamp'];

    //! 親フォルダ
    var $col_parent = ['type' => 'relation', 'to' => 'GRN_Memo_Folder'];

    // 予備カラム
    var $col_reserve_text1 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text2 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text3 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_int1 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int2 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int3 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_blob1 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob2 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob3 = ['type' => 'blob', 'lazy' => true];


    function __construct(& $row)
    {
        parent::__construct($row);
    }


    function set($col_name, $col_value)
    {
        if ($col_name == 'name') {
            require_once('fw/string_util.csp');
            $col_value = cb_trim_check($col_value, E_COMMON_MISSING_MANDATORY);
        }

        return parent::set($col_name, $col_value);
    }

    function deleteAllItems()
    {
        $rowset = new CB_RowSet(cb_class2table('GRN_Memo_Item'));
        $rowset->addCondition($rowset->queryf("col_folder = '@S'",
            $this->getOID()));
        while ( ! is_null(($row = $rowset->iterate()))) {
            $row->delete();
        }
        $rowset->destroy();
    }

    function onCreate()
    {
        $ts = new CB_TimeStamp();
        $ts->unix_ts = time();
        $this->set('ctime', $ts);
        $this->set('mtime', $ts);
    }

    function onUpdate()
    {
        $ts = new CB_TimeStamp();
        $ts->unix_ts = time();
        $this->set('mtime', $ts);
    }

    function addItem(& $item)
    {
        $item->set('folder', $this);
        $item->set('user', $this->get('user'));
    }

    function getItem($id)
    {
        $table = cb_class2table('GRN_Memo_Item');
        $item = $table->getRow($id);

        if ( ! $item) {
            $___ret = null;

            return $___ret;
        }

        if ($item->getId('folder') != $this->getOID()) {
            $___ret = null;

            return $___ret;
        }
        if ($item->getId('user') != $this->getId('user')) {
            $___ret = null;

            return $___ret;
        }

        return $item;
    }

    function createItem()
    {
        $table = cb_class2table('GRN_Memo_Item');
        $item = $table->newRow();
        $this->addItem($item);

        return $item;
    }

    function getItems()
    {
        $rowset = new CB_RowSet(cb_class2table('GRN_Memo_Item'));
        $rowset->addCondition($rowset->queryf("col_folder = '@S'",
            $this->getOID()));
        $rowset->addOrderColumn('col_mtime', true);
        $rowset->addOrderColumn(null, true);

        $contents = [];
        while ( ! is_null(($row = $rowset->iterate()))) {
            $contents[$row->getOID()] = $row;
        }
        $rowset->destroy();

        return $contents;
    }

    function getNumItems()
    {
        $rowset = new CB_RowSet(cb_class2table('GRN_Memo_Item'));
        $rowset->addCondition($rowset->queryf("col_folder = '@S'",
            $this->getOID()));
        $rowset->applyGroupFunctions(['count' => 'COUNT(*)']);
        $result = $rowset->iterate();
        $rowset->destroy();

        return $result['count'];
    }


    function isRoot()
    {
        $pid = $this->getId('parent');

        if (is_null($pid) || strlen($pid) < 1) {
            return true;
        }

        return false;
    }


    function addFolder(& $folder_id)
    {
        $id = null;

        if (is_a($folder_id, 'GRN_Memo_Folder')) {
            $id = $folder_id->getOID();
        } else {
            $id = $folder_id;
        }

        if ( ! $id) {
            return false;
        }

        $folders = $this->getFolders();

        $folder_ids = array_keys($folders);
        $folder_ids[] = $id;

        return $this->setFolders($folder_ids);
    }

    function setFolders($folder_ids)
    {
        if ( ! is_array($folder_ids)) {
            return false;
        }

        $current_folders = $this->getFolders();

        $folders = [];

        if (count($folder_ids) > 0) {
            $escape_fids = [];
            $rowset = new CB_RowSet(cb_class2table('GRN_Memo_Folder'));
            foreach (array_keys($folder_ids) as $key) {
                $escape_fids[$key] = $rowset->queryf("'@S'", $folder_ids[$key]);
            }

            $rowset->addCondition('_id IN (' . implode(',', $escape_fids)
                                  . ')');
            foreach ($folder_ids as $id) {
                $folders[$id] = null;
            }
            while ( ! is_null(($row = $rowset->iterate()))) {
                $folders[$row->getOID()] = $row;
            }
            $rowset->destroy();
        }

        $lidx = 1;
        foreach (array_keys($folders) as $folder_id) {
            $folder =& $folders[$folder_id];

            if (is_null($folder)) {
                require_once('memo/error_code.csp');
                cb_throw_error(E_GRN_MEMO_FOLDER_NOT_FOUND);
            }

            if (array_key_exists($folder_id, $current_folders)) {
                unset($current_folders[$folder_id]);
            }

            $folder->set('parent', $this);
            $folder->set('list_index', $lidx);
            ++$lidx;

            $folder->updateNow();
        }

        foreach (array_keys($current_folders) as $folder_id) {
            $folder =& $current_folders[$folder_id];
            $folder->set('parent', null);
            $folder->set('list_index', 0x7FFFFFFF);

            $folder->updateNow();
        }

        return true;
    }

    function getFolders()
    {
        $rowset = new CB_RowSet(cb_class2table('GRN_Memo_Folder'));
        $rowset->addCondition($rowset->queryf("col_parent = '@S'",
            $this->getOID()));
        $rowset->addOrderColumn('col_list_index');
        $rowset->addOrderColumn(null);
        $folders = [];
        while ( ! is_null(($row = $rowset->iterate()))) {
            $folders[$row->getOID()] = $row;
        }
        $rowset->destroy();

        return $folders;
    }

    function getNumFolders()
    {
        $rowset = new CB_RowSet(cb_class2table('GRN_Memo_Folder'));
        $rowset->addCondition($rowset->queryf("col_parent = '@S'",
            $this->getOID()));
        $rowset->applyGroupFunctions(['count' => 'COUNT(*)']);
        $result = $rowset->iterate();
        $rowset->destroy();

        return $result['count'];
    }
}


