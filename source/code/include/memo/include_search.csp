<?php
/**
 * @author  Tanaka, Yoshiaki
 * @date    2005/04/23
 * @package grn.memo
 */

require_once('grn/application.csp');
require_once('memo/table.csp');

class GRN_Memo_Search
{
    /**
     * @access private
     */
    var $_tab_folder = null;
    /**
     * @access private
     */
    var $_user = null;


    function __construct(& $user)
    {
        $this->_user =& $user;
    }

    /**
     * @access private
     */
    var $_search_condition_cache = null;
    /**
     * @access protected
     */
    var $_folder_condition_cache = null;


    /**
     * @access private
     */
    var $_items
        = [
            'title' => 1,
            'data'  => 1,
        ];

    function getAvailableItems()
    {
        return $this->_items;
    }

    function setItems($items)
    {
        if ($this->_rowset) {
            return false;
        }

        if ($this->_items != $items) {
            $available = $this->getAvailableItems();
            foreach (array_keys($items) as $item) {
                if ( ! array_key_exists($item, $available)) {
                    unset($items[$item]);
                }
            }
            $this->_items = $items;
            $this->_search_codition_cache = null;
        }

        return true;
    }

    function getItems()
    {
        return $this->_items;
    }

    /**
     * @access private
     */
    var $_keyword = null;

    function setText($keyword)
    {
        if ($this->_rowset) {
            return false;
        }

        require_once('fw/string_util.csp');
        $this->_keyword = cb_parse_search_text($keyword);

        $this->_search_codition_cache = null;

        return true;
    }

    function getText()
    {
        return $this->_keyword ? implode(' ', $this->_keyword) : null;
    }

    /**
     * @access private
     */
    var $_offset = 0;

    function setOffset($offset)
    {
        if ($this->_rowset) {
            return false;
        }

        $this->_offset = $offset;

        return true;
    }

    function getOffset()
    {
        return $this->_offset;
    }

    /**
     * @access private
     */
    var $_limit = -1;

    function setLimit($limit)
    {
        if ($this->_rowset) {
            return false;
        }

        $this->_limit = $limit;

        return true;
    }

    function getLimit()
    {
        return $this->_limit;
    }

    /**
     * @access private
     */
    var $_folder = null;

    function setFolder(& $folder)
    {
        if ($this->_rowset) {
            return false;
        }

        $this->_folder =& $folder;
        $this->_folder_condition_cache = null;
    }

    function &getFolder()
    {
        return $this->_folder;
    }

    /**
     * @access private
     */
    var $_subfolder = true;

    function setEnableSubfolder($enable)
    {
        if ($this->_rowset) {
            return false;
        }

        if ($this->_subfolder != $enable) {
            $this->_subfolder = $enable;
            $this->_folder_condition_cache = null;
        }
    }

    function getEnableSubfolder()
    {
        return $this->_subfolder;
    }

    /**
     * @access private
     */
    var $_sensitive = false;

    function setSensitive($enable)
    {
        if ($this->_rowset) {
            return false;
        }

        $this->_sensitive = $enable;

        return true;
    }

    function getSensitive()
    {
        return $this->_sensitive;
    }

    /**
     * @access private
     */
    var $_limit_params
        = [
            'column'   => 'mtime',
            'value'    => null,
            'operator' => '>'
        ];

    function setLimitColumn($params)
    {
        if ($this->_rowset) {
            return false;
        }

        if ( ! $params) {
            $this->_limit_params['value'] = null;
        } else {
            if (array_key_exists('column', $params)) {
                $table =& cb_class2table('grn_memo_item');
                $info = $table->getColumnInfo();
                if ( ! array_key_exists($params['column'], $info)) {
                    return false;
                }
            }
            if (array_key_exists('operator', $params)) {
                $opes = ['=', '!=', '<>', '<', '>', '<=', '>='];
                if ( ! in_array($params['operator'], $opes)) {
                    return false;
                }
            }
            if (array_key_exists('value', $params)) {
                if ( ! is_null($params['value'])) {
                    if (is_a($params['value'], 'CB_TimeStamp')) {
                        $params['value'] = $params['value']->unix_ts;
                    } else {
                        $app_locator = GRN_ApplicationLocator::instance();
                        $db =& $app_locator->getConnection('memo');
                        $params['value'] = $db->escape($params['value']);
                    }
                }
            }

            foreach ($params as $k => $v) {
                if (array_key_exists($k, $this->_limit_params)) {
                    $this->_limit_params[$k] = $v;
                }
            }
        }

        return true;
    }

    function getLimitColumn()
    {
        return $this->_limit_params;
    }


    /**
     * @access protected
     */
    var $_rowset = null;

    function _table2alias($table)
    {
        $map = [
            'grn_memo_folder'              => 'fo',
            'grn_memo_content'             => 'ct',
            'grn_memo_item'                => 'it',
            'grn_memo_itemfilerelation'    => 'ir',
            'grn_memo_contentfilerelation' => 'br',
            'grn_memo_file'                => 'gf',
            'grn_memo_filebody'            => 'gb',
        ];

        if ( ! is_string($table)) {
            require_once('memo/error_code.csp');
            cb_throw_error(E_GRN_MEMO_INTERNAL);
        }

        $table_name = strtolower($table);

        if ( ! array_key_exists($table_name, $map)) {
            require_once('memo/error_code.csp');
            cb_throw_error(E_GRN_MEMO_INTERNAL);
        }

        return $map[$table_name];
    }

    function destroy()
    {
        if ($this->_rowset) {
            $this->_rowset->destroy();
            $this->_rowset = null;
        }
    }

    function _initialize()
    {
        $this->destroy();

        if (is_null(($this->_rowset =& $this->createRowSet($this->_user)))) {
            return false;
        }

        $this->_rowset->limit($this->_offset, $this->_limit);

        return true;
    }

    function count()
    {
        if ( ! ($rowset =& $this->createRowSet($this->_user))) {
            return 0;
        }

        $rowset->limit(0, -1);
        $rowset->applyGroupFunctions(['count' => 'COUNT(*)']);
        $result = $rowset->iterate();
        $rowset->destroy();

        return $result ? $result['count'] : 0;
    }


    function iterate()
    {
        if ( ! $this->_rowset) {
            if ( ! $this->_initialize()) {
                $___ret = null;

                return $___ret;
            }
        }

        if (is_null(($row =& $this->_rowset->iterate()))) {
            $this->destroy();
            {
                $___ret = null;

                return $___ret;
            }
        }

        $item = $row[$this->_table2alias('grn_memo_item')];

        if (is_null($item) || $item === false) {
            $___ret = null;

            return $___ret;
        }

        $result = [
            'item' => $item,
            'type' => $item->get('type'),
            'data' => null
        ];

        if ($item->isFile()) {
            $file = $row[$this->_table2alias('grn_memo_file')];
            $file->_current = $row[$this->_table2alias('grn_memo_filebody')];
            $item->_content = $file;
        } else {
            $content = $row[$this->_table2alias('grn_memo_content')];
            $item->_content = $content;
        }

        return $item;
    }

    /**
     * @return CB_MultiRowSet
     */
    function createRowSet(& $user)
    {
        $app_locator = GRN_ApplicationLocator::instance();
        $tm = $app_locator->getTableManager('memo');

        $tab_item =& $tm->getTableInfo('grn_memo_item');
        $tab_item_alias = $this->_table2alias('grn_memo_item');

        $tab_content =& $tm->getTableInfo('grn_memo_content');
        $tab_content_alias = $this->_table2alias('grn_memo_content');

        $tab_relation =& $tm->getTableInfo('grn_memo_itemfilerelation');
        $tab_relation_alias = $this->_table2alias('grn_memo_itemfilerelation');

        $tab_file =& $tm->getTableInfo('grn_memo_file');
        $tab_file_alias = $this->_table2alias('grn_memo_file');

        $tab_filebody =& $tm->getTableInfo('grn_memo_filebody');
        $tab_filebody_alias = $this->_table2alias('grn_memo_filebody');

        $rowset = new CB_MultiRowSet($tab_item, $tab_item_alias);
        $rowset->addCondition($rowset->queryf($tab_item_alias
                                              . ".col_user = '@S'",
            $this->_user->getOID()));

        if ( ! is_null($this->_folder)) {
            if ( ! $this->_subfolder) {
                $rowset->addCondition($rowset->queryf($tab_item_alias
                                                      . ".col_folder = '@S'",
                    $this->_folder->getOID()));
            } else {
                $folders = [$this->_folder->getOID()];
                $this->_getFolders($this->_folder->getOID(), $folders);
                foreach (array_keys($folders) as $key) {
                    $folders[$key] = $rowset->queryf("'@S'", $folders[$key]);
                }
                $rowset->addCondition($tab_item_alias . '.col_folder IN ('
                                      . implode(',', $folders) . ')');
            }
        }

        $rowset->addJoin($tab_content,
            $tab_item_alias . '._id = ' . $tab_content_alias . '.col_item',
            CB_DATABASE_LEFT_JOIN, $tab_content_alias);

        $rowset->addJoin($tab_relation,
            $tab_item_alias . '._id = ' . $tab_relation_alias . '.col_item',
            CB_DATABASE_LEFT_JOIN, $tab_relation_alias);

        $rowset->addJoin($tab_file,
            $tab_relation_alias . '.col_file = ' . $tab_file_alias . '._id',
            CB_DATABASE_LEFT_JOIN, $tab_file_alias);

        $conditions = [];
        $conditions[] = $tab_file_alias . '._id = ' . $tab_filebody_alias
                        . '.col_file';
        $conditions[] = $tab_file_alias . '.col_version = '
                        . $tab_filebody_alias . '.col_version';

        $rowset->addJoin($tab_filebody,
            implode(' AND ', $conditions),
            CB_DATABASE_LEFT_JOIN, $tab_filebody_alias);


        $condition = $this->_makeColumnCondition($this->_items,
            $this->_keyword);

        if (is_null($condition)) {
            unset($rowset);
            {
                $___ret = null;

                return $___ret;
            }
        }

        $rowset->addCondition($condition);
        $rowset->addOrderColumn($tab_item_alias . '.col_mtime', true);
        $rowset->addOrderColumn($tab_item_alias . '._id', true);

        if ( ! is_null($this->_limit_params['value'])) {
            // カラム指定の絞り込み
//            $condition = $tab_item_alias.'.col_'.$this->_limit_params['column'] .' '.$this->_limit_params['operator'] .' '.$this->_limit_params['value'];
            $condition = $tab_item_alias . '.col_'
                         . $this->_limit_params['column'] . ' '
                         . $this->_limit_params['operator'] . ' '
                         . $rowset->queryf("'@S'",
                    $this->_limit_params['value']);
            $rowset->addCondition($condition);
        }

        return $rowset;
    }

    function _getFolders($folder_id, & $folders)
    {
        $rowset = new CB_RowSet(cb_class2table('grn_memo_folder'));
        $rowset->addCondition($rowset->queryf("col_parent = '@S'", $folder_id));
        $rowset->addOrderColumn('col_list_index');
        $rowset->addOrderColumn(null);

        $ids = [];
        while ( ! is_null(($row = $rowset->iterate()))) {
            $ids[] = $row->getOID();
        }
        $rowset->destroy();
        $folders = array_merge($folders, $ids);

        foreach ($ids as $id) {
            $this->_getFolders($id, $folders);
        }
    }

    /**
     * 指定されたカラムの検索条件を生成
     *
     * @access private
     */
    function _makeColumnCondition($items, $words)
    {
        if ($this->_search_condition_cache) {
            return $this->_search_condition_cache;
        }

        if ( ! $items || ! $words) {
            return null;
        }

        $conditions = [];
        $operators = [];

        $operator = 'AND';
        $negation = false;

        $item_alias = $this->_table2alias('grn_memo_item');
        $content_alias = $this->_table2alias('grn_memo_content');
        $file_alias = $this->_table2alias('grn_memo_file');
        $body_alias = $this->_table2alias('grn_memo_filebody');

        $conditions = [];

        foreach ($words as $word) {
            $format = $this->_makeFormatCondition($word);

            $column_conditions = [];

            foreach ($items as $column => $value) {
                if ($column == 'title') {
                    $column_conditions[] = $item_alias . '.col_title '
                                           . $format;
                } else {
                    $c[] = $content_alias . '.col_data '
                           . $format;
                    $c[] = $file_alias . '.col_description '
                           . $format;
                    $c[] = $body_alias . '.col_name ' . $format;
                    $column_conditions[] = '(' . implode(') OR (', $c) . ')';
                }
            }

            $conditions[] = implode(' OR ', $column_conditions);
        }

        if ( ! $conditions) {
            return null;
        }

        $this->_search_condition_cache = implode(' AND ', $conditions);

        return $this->_search_condition_cache;
    }

    /**
     * @access private
     */
    function _makeFormatCondition($word)
    {
        static $db = null;

        if (is_null($db)) {
            $app_locator = GRN_ApplicationLocator::instance();
            $db =& $app_locator->getConnection('memo');
        }

        if ($this->_sensitive) {
            return cb_queryf($db, " LIKE BINARY '%@L%'", $word);
        }

        return cb_queryf($db, " LIKE '%@L%'", $word);
    }
}


