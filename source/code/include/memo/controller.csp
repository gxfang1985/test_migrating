<?php
/**
 * @brief
 * @author   Yoshiaki Tanaka
 * @date     2005/04/08
 * @par      Copyright (c) 2005 Cybozu,Inc. All rights reserved .
 * @package  grn.memo
 */


function grn_memo_folder_simple_view(& $folder)
{
    if ( ! is_a($folder, 'grn_memo_folder')) {
        return null;
    }

    $for_view = [
        'id'   => $folder->getOID(),
        'name' => $folder->get('name'),
        'memo' => $folder->get('description'),
    ];

    return $for_view;
}

function grn_memo_folder_view(& $folder, $use_path = false)
{
    if ( ! is_a($folder, 'grn_memo_folder')) {
        return null;
    }

    $for_view = [
        'id'          => $folder->getOID(),
        'name'        => $folder->get('name'),
        'memo'        => $folder->get('description'),
        'child_count' => $folder->getNumFolders(),
    ];

    if ($use_path) {
        $for_view['path'] = grn_memo_folder_path($folder);
    }

    return $for_view;
}

function __grn_memo_folder_node(& $folder, & $hierarchy, $selected_id)
{
    $folders = $folder->getFolders();

    $node = grn_memo_folder_simple_view($folder);
    $node['child_count'] = count($folders);

    if ($folder->getOID() == $selected_id) {
        $node['selected'] = 1;
    }

    $children = [];

    foreach (array_keys($folders) as $fid) {
        __grn_memo_folder_node($folders[$fid], $children, $selected_id);
    }

    $node['children'] = $children;

    $hierarchy[$node['id']] = $node;
}

function grn_memo_build_hierarchy($root_folders, $selected_id)
{
    $hierarchy = [];
    foreach (array_keys($root_folders) as $fid) {
        __grn_memo_folder_node($root_folders[$fid], $hierarchy, $selected_id);
    }

    return $hierarchy;
}


function __grn_memo_folder_select_menu_node(
    & $folder,
    & $menu,
    $last_child,
    $prefix,
    $selected
) {
    if ( ! $folder) {
        return;
    }
    if ($folder->getOID() == $selected) {
        return;
    }

    $title = $prefix;

    require_once('fw/i18n.csp');

    if ($folder->getId('parent')) {
        if ($last_child) {
            $title .= '　';
        } else {
            $title .= '　';
        }
    }

    $title .= $folder->get('name');

    $menu[$folder->getOID()] = $title;

    $folders = $folder->getFolders();

    if (count($folders) > 0) {
        if ($folder->getId('parent')) {
            if ($last_child) {
                $prefix .= '　';
            } else {
                $prefix .= '　';
            }
        }
        $folders_keys = array_keys($folders);
        $last = array_pop($folders_keys);

        foreach (array_keys($folders) as $id) {
            __grn_memo_folder_select_menu_node($folders[$id], $menu,
                ($id == $last), $prefix, $selected);
        }
    }
}

function grn_memo_folder_select_menu($folders, $selected = null)
{
    $menu = [];

    if (count($folders) > 0) {
        $folders_keys = array_keys($folders);
        $last = array_pop($folders_keys);

        foreach (array_keys($folders) as $id) {
            __grn_memo_folder_select_menu_node($folders[$id], $menu,
                $id == $last, '', $selected);
        }
    }

    return $menu;
}

function grn_memo_folder_path(& $folder)
{
    if (is_null($folder)) {
        return null;
    }

    $folder = $folder->get('parent');

    $path = [];
    while ( ! is_null($folder)) {
        $path = [$folder->getOID() => grn_memo_folder_view($folder)] + $path;
        $folder =& $folder->get('parent');
    }

    return $path;
}


require_once('grn/controller.csp');


class GRN_Memo_ControllerUtil extends GRN_ControllerUtil
{
    function __construct($page = null)
    {
        parent::__construct($page);
    }

    function isCurrentPage()
    {
        return $this->_page == cb_get_pagename();
    }


    /**
     * 一覧開始位置を取得する、自動でセッションへ保存する
     *
     * @return integer
     */
    function getListOffset()
    {
        if ( ! $this->isCurrentPage()) {
            $session =& $this->getSession();
            $sp = $session->get('current_start_position');
            if ($sp == null) {
                $sp = 0;
            }

            return $sp;
        }

        $sp = $this->getNaviStartPosition();
        $this->setNaviStartPosition($sp);

        return $sp;
    }

    /**
     * @access private
     */
    var $_order_param = null;

    /**
     * 一覧ソートパラメータを取得する、自動でセッションへ保存する
     *
     * @param string $default ソートパラメータの初期値
     *
     * @return string
     */
    function getListOrderParam($default = null)
    {
        if ( ! is_null($this->_order_param)) {
            return $this->_order_param;
        }

        global $G_INPUT;

        if ($this->isCurrentPage()) {
            if (array_key_exists('sort', $G_INPUT)) {
                $this->_order_param = $G_INPUT['sort'];
                if ( ! $this->_order_param) {
                    $this->_order_param = $default;
                }

                $session =& $this->getSession();
                $session->set('current_sort', $this->_order_param);

                return $this->_order_param;
            }

            if ( ! array_key_exists('sf', $G_INPUT) || ! $G_INPUT['sf']) {
                $this->_order_param = $default;

                $session = $this->getSession();
                $session->set('current_sort', $this->_order_param);

                return $this->_order_param;
            }
        }

        $session = $this->getSession();
        $current_sort = $session->get('current_sort');
        if ($current_sort == null) {
            $current_sort = $default;
        }

        $this->_order_param = $current_sort;

        return $current_sort;
    }

    /**
     * 一覧ソートのカラム情報を取得する
     *
     * @param string $arg     ソートパラメータ
     * @param string $default ソートパラメータの初期値
     *
     * @return array
     */
    function getListOrderColumn($arg = null, $default = 'mtd')
    {
        $params = [
            // 一覧ソートパラメータ
            'tlu' => ['param' => 'tlu', 'column' => 'title', 'order' => false],
            'tld' => ['param' => 'tld', 'column' => 'title', 'order' => true],
            'mtu' => ['param' => 'mtu', 'column' => 'mtime', 'order' => false],
            'mtd' => ['param' => 'mtd', 'column' => 'mtime', 'order' => true],
            'szu' => ['param' => 'szu', 'column' => 'size', 'order' => false],
            'szd' => ['param' => 'szd', 'column' => 'size', 'order' => true],
            // ファイル履歴一覧ソートパラメータ
            'tu'  => [
                'param'  => 'tu',
                'column' => 'record_time',
                'order'  => false
            ],
            // 履歴時刻昇順
            'td'  => [
                'param'  => 'td',
                'column' => 'record_time',
                'order'  => true
            ],
            // 履歴時刻降順
            'uu'  => [
                'param'  => 'uu',
                'column' => 'recorder_name',
                'order'  => false
            ],
            // 履歴更新者昇順
            'ud'  => [
                'param'  => 'ud',
                'column' => 'recorder_name',
                'order'  => true
            ],
            // 履歴更新者降順
            'nu'  => [
                'param'  => 'nu',
                'column' => 'filename',
                'order'  => false
            ],
            // ファイル名昇順
            'nd'  => ['param' => 'nd', 'column' => 'filename', 'order' => true],
            // ファイル名降順
        ];

        if (is_null($arg)) {
            $arg = $this->getListOrderParam($default);
        }

        if ( ! $arg || ! array_key_exists($arg, $params)) {
            $arg = 'mtd';
        }

        return $params[$arg];
    }


    /**
     * @param GRN_Memo_Content $content
     * @param bool             $specific
     *
     * @return array
     */
    function getContentView(& $content, $specific)
    {
        $for_view = [
            'id'    => $content->getOID(),
            'item'  => $content->getId('item'),
            'title' => $content->get('title'),
            'data'  => $content->get('data'),
            'html'  => $content->get('html'),
            'size'  => $content->get('size'),
            'ctime' => $content->get('ctime'),
            'mtime' => $content->get('mtime'),
        ];

        if ( ! $specific) {
            $for_view['file_count'] = $content->getNumFiles();
        } else {
            $files = $content->getFiles();
            $for_view['file_count'] = count($files);
            $files_for_view = [];
            foreach (array_keys($files) as $id) {
                $file =& $files[$id];
                $files_for_view[$id] = [
                    'id'   => $id,
                    'name' => $file->get('name'),
                    'mime' => $file->get('mime'),
                    'size' => $file->get('size'),
                ];
            }
            $for_view['files'] = $files_for_view;
        }

        return $for_view;
    }

    function makeSitePosition($current_page, $page_path, $resource_args = null)
    {
        $positions = [];
        if ($page_path) {
            foreach ($page_path as $page_name => $args) {
                // サイトポジションで一覧に戻るときは常に一覧状態を復元する
                $base = basename($page_name);
                if ($base == 'index' || strpos($base, 'file_view') !== false
                    || strpos($base, 'list') !== false
                ) {
                    $args['sf'] = 1;
                }

                $positions[] = ([
                                    'page' => $page_name,
                                    'name' => grn_get_page_display_name($page_name,
                                        $resource_args)
                                ] + $args);
            }
        }

        if (is_null($current_page)) {
            $current_page = cb_get_pagename();
        }
        $positions[] = [
            'page' => "",
            'name' => grn_get_page_display_name($current_page, $resource_args)
        ];

        return $positions;
    }

    function setSitePosition(& $smarty, $page_path, $resource_args = null)
    {
        assert('$smarty');

        $page_title = grn_get_current_page_display_name($resource_args);

        $smarty->assign('app_id', 'memo');
        $smarty->assign('page_title', $page_title);

        require_once('grn/application.csp');
        $locator = GRN_ApplicationLocator::instance();
        $app = $locator->getInstance('memo');
        assert('!is_null($app) && $app !== FALSE');
        $smarty->assign('app_name', $app->getName());

        $smarty->assign('site_position',
            $this->makeSitePosition($this->_page, $page_path, $resource_args));
    }


    function &getUserConfig(& $user)
    {
        require_once('grn/ui.csp');
        $ucm = GRN_UIConfigManager::getInstance();
        $ret = $ucm->getUserConfig($user);

        return $ret;
    }

    function getInputConfigValues(& $user)
    {
        require_once('grn/application.csp');
        $locator = GRN_ApplicationLocator::instance();
        $app = $locator->getInstance('memo');
        require_once('grn/ui.csp');
        $ucm = GRN_UIConfigManager::getInstance();
        $uc = $ucm->getUserConfig($user);

        $config['area_width'] = $uc->getAreaWidth();
        $config['area_height'] = $uc->getAreaHeight();

        require_once('memo/config.csp');
        $system_config = GRN_Memo_SystemConfig::getInstance();

        $config['enable_htmleditor'] = $system_config->getEnableHtmlEditor();
        $config['filesize_limit'] = $system_config->getFileSizeLimit();

        return $config;
    }

    function getConfigValues(& $user, $input = false)
    {
        require_once('grn/ui.csp');
        $ucm = GRN_UIConfigManager::getInstance();
        $uc = $ucm->getUserConfig($user);

        $config = [
            'subject_width'  => $uc->getSubjectWidth(),
            'truncate_width' => $uc->getTruncateWidth(),
            'name_width'     => $uc->getNameWidth(),
            'inline'         => $uc->getInlineSetting(),
        ];

        if ($input) {
            $config += $this->getInputConfigValues($user);
        }

        return $config;
    }
}


