<?php
/**
 * Memo Tree View
 *
 * @author: Huy Nguyen - 2009/11
 */

require_once('grn/org_tree.csp');

class GRN_Memo_FolderTree extends GRN_OrgTree
{
    function __construct($params)
    {
        $this->_groups_have_childs = [];
    }

    function _getLoginUser()
    {
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $user = $uum->getLoginUser();

        return $user;
    }

    function _getMemoLogic()
    {
        require_once('memo/logic.csp');
        $logic = GRN_Memo_Logic::getInstance();

        return $logic;
    }

    /**
     * 子組織を取得する。
     *
     * @param   int $oid 親組織ID
     *
     * @return  array 子組織
     */
    function _getChildren($oid)
    {
        $logic = $this->_getMemoLogic();

        $folders = [];
        $user = $this->_getLoginUser();
        if (is_null($oid)) {
            $folders = $logic->getRootFolders($user);
        } else {
            $folder =& $logic->getFolder($user, $oid);
            if ($folder) {
                $folders = $folder->getFolders();
            }
        }
        unset($folder);

        $ret = [];
        foreach ($folders as $fid => $folder) {
            $ret[$fid] = [
                '_id'      => $folder->getOID(),
                'col_name' => $folder->get('name')
            ];
        }

        return $ret;
    }

    /**
     * 子組織数を取得する。
     *
     * @param  int $oid 親組織ID
     *
     * @return int num of child organization
     */
    function _getChildCount($oid)
    {
        $logic = $this->_getMemoLogic();
        $user = $this->_getLoginUser();
        $folder =& $logic->getFolder($user, $oid);

        $count = 0;
        if ($folder) {
            $count = $folder->getNumFolders();
        }

        return $count;
    }

    /**
     * @param int $oid
     *
     * @return  array associated array
     */
    function &_getAncestors($oid)
    {
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $user = $uum->getLoginUser();

        require_once('memo/logic.csp');
        $logic = GRN_Memo_Logic::getInstance();
        $folder = $logic->getFolder($user, $oid);
        $retval = [];
        while ($folder) {
            $retval[$folder->getOID()] = $folder;
            $folder = $folder->get('parent');
        }
        $retval = array_reverse($retval, true);

        return $retval;
    }

    function getSelectedNode()
    {
        $user = $this->_getLoginUser();
        // login as another user
        if ($this->_uid !== $user->getOID()) {
            $this->_selectedNode = null;
            $this->initialize();
        }

        $logic = $this->_getMemoLogic();

        // selected folder is deleted
        if ( ! is_null($this->_selectedNode)
             && $logic->getFolder($user, $this->_selectedNode) == false
        ) {
            $this->_selectedNode = null;
            $this->initialize();
        }

        return $this->_selectedNode;
    }

    /**
     * ツリーの子ノードを構築する。
     *
     * @param int  $parent_oid 親ノードID
     * @param bool $expanded
     * @param bool $force
     *
     * @return array|bool 構築した子ノード
     */
    function buildChild($parent_oid, $expanded = false, $force = true)
    {
        return $this->_buildChild($parent_oid, $expanded, $force);
    }

    public static function _memo_rebuild_folder_tree($expand_oid = null)
    {
        $list_page = 'memo/index';
        $util = GRN_OrgTreeUtil::getInstance();
        $tree =& $util->getTree($list_page, 'GRN_Memo_FolderTree');
        $tree->rebuild();

        // update init time
        $util->updateInitPageList($list_page, $tree);

        if ( ! is_null($expand_oid)) {
            global $G_container_base;
            $uum = $G_container_base->getInstance('uum');
            $user = $uum->getLoginUser();

            require_once('memo/logic.csp');
            $logic = GRN_Memo_Logic::getInstance();
            $folder =& $logic->getFolder($user, $expand_oid);
            $ancestors = [];
            while ($folder) {
                $ancestors[] = $folder->getOID();
                $folder =& $folder->get('parent');
            }

            foreach (array_reverse($ancestors) as $fid) {
                $tree->buildChild($fid);
            }
        }
        $util->setTree($list_page, $tree);
    }
}

