<?php


/**
 * @package grn.memo
 */

class GRN_Memo_Logic
{
    private static $_instance = null;

    /**
     * @return GRN_Memo_Logic
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    function __construct()
    {
    }


    function createFolder(& $user, $title, $description)
    {
        if ( ! is_a($user, 'CB_User')) {
            $___ret = null;

            return $___ret;
        }

        require_once('memo/table.csp');

        $table = cb_class2table('grn_memo_folder');

        $ts = new CB_TimeStamp();
        $ts->unix_ts = time();

        $folder = $table->newRow();
        $folder->set('user', $user);
        $folder->set('name', $title);
        $folder->set('description', $description);
        $folder->onCreate();

        return $folder;
    }

    /**
     * @param CB_User         $user
     * @param GRN_Memo_Folder $folder
     *
     * @return GRN_Memo_Item
     */
    function createItem(& $user, & $folder)
    {
        require_once('memo/table.csp');

        $table = cb_class2table('GRN_Memo_Item');

        $item = $table->newRow();
        $item->set('user', $user);

        if (is_a($folder, 'GRN_Memo_Folder')) {
            $folder->addItem($item);
        }

        return $item;
    }


    function &getFolder(& $user, $id)
    {
        if ( ! is_a($user, 'CB_User')) {
            $___ret = null;

            return $___ret;
        }

        require_once('memo/table.csp');

        $table = cb_class2table('grn_memo_folder');

        $folder = $table->getRow($id);

        if (is_null($folder) || $folder === false) {
            $___ret = null;

            return $___ret;
        }

        if ($folder->getId('user') != $user->getOID()) {
            $___ret = null;

            return $___ret;
        }

        return $folder;
    }

    function addRootFolder($user, $folder)
    {
        if ( ! is_a($user, 'CB_User') || ! is_a($folder, 'GRN_Memo_Folder')) {
            return false;
        }

        $roots = $this->getRootFolders($user);
        $roots[$folder->getOID()] = $folder;

        $folder->set('parent', null);

        $idx = 1;
        foreach (array_keys($roots) as $id) {
            $f = $roots[$id];
            $f->set('list_index', $idx);
            $idx++;

            $f->updateNow();
        }

        return true;
    }

    function getRootFolders(& $user)
    {
        if ( ! is_a($user, 'CB_User')) {
            return null;
        }

        require_once('memo/table.csp');

        $rowset = new CB_RowSet(cb_class2table('grn_memo_folder'));
        $rowset->addCondition($rowset->queryf("col_user = '@S'",
            $user->getOID()));
        $rowset->addCondition('col_parent IS NULL');
        $rowset->addOrderColumn('col_list_index');
        $rowset->addOrderColumn(null);

        $folders = [];
        while ( ! is_null(($row = $rowset->iterate()))) {
            $folders[$row->getOID()] = $row;
        }
        $rowset->destroy();

        return $folders;
    }

    function setRootFolders(& $user, $folder_ids)
    {
        if ( ! is_a($user, 'CB_User')) {
            return null;
        }

        $folders = $this->getRootFolders($user);

        $idx = 1;
        foreach ($folder_ids as $id) {
            if ( ! array_key_exists($id, $folders)) {
                require_once('memo/error_code.csp');
                cb_throw_error(E_GRN_MEMO_FOLDER_NOT_FOUND);
            }
            $folders[$id]->set('list_index', $idx);
            $folders[$id]->updateNow();
            $idx++;
        }
    }

    /**
     * @param CB_User $user
     * @param string  $id
     *
     * @return GRN_Memo_Item|null
     */
    function getItem(& $user, $id)
    {
        if ( ! is_a($user, 'CB_User')) {
            $___ret = null;

            return $___ret;
        }

        require_once('memo/table.csp');

        $rowset = new CB_RowSet(cb_class2table('grn_memo_item'));
        $rowset->addCondition($rowset->queryf("col_user = '@S'",
            $user->getOID()));
        $rowset->addCondition($rowset->queryf("_id = '@S'", $id));
        $item = $rowset->iterate();
        $rowset->destroy();

        return $item;
    }

    function getNumItems(& $user)
    {
        if ( ! is_a($user, 'CB_User')) {
            return 0;
        }

        require_once('memo/table.csp');

        $rowset = new CB_RowSet(cb_class2table('grn_memo_item'));
        $rowset->addCondition($rowset->queryf("col_user = '@S'",
            $user->getOID()));
        $rowset->applyGroupFunctions(['count' => 'COUNT(*)']);
        $result = $rowset->iterate();
        $rowset->destroy();

        return $result['count'];
    }

    function getFileSize($user, $folder_id)
    {
        require_once('memo/table.csp');

        /*
        $rowset = new CB_RowSet( cb_class2table('grn_memo_item'), 'i' );
        $rowset->addCondition( $rowset->queryf("i.col_user = '@S'", $user->getOID()) );

        if( $folder_id )
        {
            $rowset->addCondition( $rowset->queryf( "i.col_folder = '@S'", $folder_id ) );
        }

        $rowset->addJoin( cb_class2table('grn_memo_itemfilerelation'),
                          'i._id = ir.col_item',
                          CB_DATABASE_LEFT_JOIN, 'ir' );

        $rowset->addJoin( cb_class2table('grn_memo_content'),
                          'i._id = c.col_item',
                          CB_DATABASE_LEFT_JOIN, 'c' );

        $rowset->addJoin( cb_class2table('grn_memo_contentfilerelation'),
                          'c._id = cr.col_content',
                          CB_DATABASE_LEFT_JOIN, 'cr' );

        $rowset->addJoin( cb_class2table('grn_memo_file'),
                          'ir.col_file = f._id OR cr.col_file = f._id',
                          CB_DATABASE_LEFT_JOIN, 'f' );

        $rowset->addJoin( cb_class2table('grn_memo_filebody'),
                          'f._id = b.col_file AND f.col_version = b.col_version',
                          CB_DATABASE_LEFT_JOIN, 'b' );

        $rowset->applyGroupFunctions( array('size'=>'SUM(b.col_size)') );
        $result = $rowset->iterate();
        $rowset->destroy();
        return $result['size'];
        */

        $app_locator = GRN_ApplicationLocator::instance();
        $db = $app_locator->getConnection('memo');

        $condition = null;
        $condition = cb_queryf($db, "i.col_user = '@S'", $user->getOID());
        if ($folder_id) {
            $condition .= ' AND ';
            $condition .= cb_queryf($db, "i.col_folder = '@S'", $folder_id);
        }

        $query
            = 'SELECT ((SELECT IF(SUM(b.col_size) IS NULL, 0, SUM(b.col_size)) AS size '
              .
              'FROM ((tab_grn_memo_item AS i ' .
              'LEFT JOIN tab_grn_memo_itemfilerelation AS ir ON i._id = ir.col_item) '
              .
              'LEFT JOIN tab_grn_memo_file AS f ON ir.col_file = f._id ) ' .
              'LEFT JOIN tab_grn_memo_filebody AS b ON f._id = b.col_file AND f.col_version = b.col_version '
              .
              'WHERE ' . $condition . ' LOCK IN SHARE MODE) + (' .
              'SELECT IF(SUM(b.col_size) IS NULL, 0, SUM(b.col_size)) AS size '
              .
              'FROM (((tab_grn_memo_item AS i ' .
              'LEFT JOIN tab_grn_memo_content AS c ON i._id = c.col_item) ' .
              'LEFT JOIN tab_grn_memo_contentfilerelation AS cr ON c._id = cr.col_content) '
              .
              'LEFT JOIN tab_grn_memo_file AS f ON cr.col_file = f._id) ' .
              'LEFT JOIN tab_grn_memo_filebody AS b ON f._id = b.col_file AND f.col_version = b.col_version '
              .
              'WHERE ' . $condition . ' LOCK IN SHARE MODE)) AS size';

        $r = $db->query($query);
        if ($r === false) {
            //Throw Query Error
            $db->throwError(['query' => 'query failed: ' . $query]);
        }
        $row = $db->fetch_assoc($r);
        if ($row === false) {
            return false;
        }

        return $row['size'];
    }

    function checkFileSize($user)
    {
        require_once('memo/config.csp');
        $config = GRN_Memo_SystemConfig::getInstance();
        $max = $config->getFileSizeLimit();
        if ($max >= 0) {
            $size = $this->getFileSize($user, null);
            if ($max < $size) {
                require_once('memo/error_code.csp');
                cb_throw_error(E_GRN_MEMO_FILESIZE_LIMIT);
            }
        }
    }

}


