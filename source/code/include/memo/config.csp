<?php

/**
 * Memo設定クラス
 *
 * @author  Tanaka, Yoshiaki        2005/04
 * @package grn.memo
 */

require_once('fw/module.csp');


/**
 * @package grn.memo
 */
class GRN_Memo_SystemConfig
{
    private static $_instance = null;

    /**
     * @return GRN_Memo_SystemConfig
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * @access private
     */
    var $_profile = null;
    /**
     * @access private
     */
    var $_readonly = true;


    function __construct()
    {
        require_once('fw/profile.csp');
        $this->_profile = cb_get_system_profile('grn.memo');

        global $G_common_set;

        global $G_container_app;
        $uum = $G_container_app->getInstance('uum');

        if (($login = $uum->getLoginUser())) {
            require_once('grn/system_logic.csp');
            $system = GRN_System::getInstance();
            if ($system->isSuperAdmin($login)) {
                $this->_readonly = false;
            } else // check admin application
            {
                global $G_container_base;
                $uum = $G_container_base->getInstance('uum');

                $roles = $uum->getUserRolesInfo($login->getOID());

                $groups = $uum->getUserGroups($login->getOID());

                $isApplicationAdmin = $system->isApplicationAdmin($login,
                    $groups, $roles);
                if ($isApplicationAdmin) {
                    $this->_readonly = false;
                }
            }
        }
    }

    function _set($attr_name, $value)
    {
        if ($this->_readonly) {
            return false;
        }

        if ( ! $this->_profile->updateAttribute($attr_name, $value)) {
            return $this->_profile->createAttribute($attr_name, $value);
        }

        return true;
    }

    // 最大バージョン

    function getMaxVersion()
    {
        $value = 10;
        $this->_profile->getAttribute('max_version', $value);

        return $value;
    }

    function setMaxVersion($value)
    {
        $this->_set('max_version', $value);
    }

    // リッチエディタの使用許可

    function getEnableHtmlEditor()
    {
        $value = true;
        $this->_profile->getAttribute('enable_html_editor', $value);

        return $value;
    }

    function setEnableHtmlEditor($value)
    {
        $this->_set('enable_html_editor', $value);
    }

    // ファイルサイズ制限

    function getFileSizeLimit()
    {
        $value = -1; // デフォルト無制限
        $this->_profile->getAttribute('file_size_limit', $value);

        return $value;
    }

    function setFileSizeLimit($value)
    {
        $this->_set('file_size_limit', $value);
    }

}


