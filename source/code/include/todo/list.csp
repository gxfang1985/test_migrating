<?php
/**
 * @brief
 * @author   Yoshiaki Tanaka
 * @date     2005/02/16
 * @par      Copyright (c) 2005 Cybozu,Inc. All rights reserved .
 * @package  grn.todo
 */


require_once('todo/table.csp');
require_once('grn/application.csp');

/**
 * @class    GRN_ToDo_UserList
 * @package  grn.todo
 */
class GRN_ToDo_UserList
{
    /**
     * @access private
     */
    var $_user = null;

    /**
     * @access private
     */
    var $_rowset = null;


    function __construct(& $user)
    {
        if ( ! $user) {
            cb_throw_error(E_GRN_TODO_INTERNAL);
        }

        $this->_user =& $user;
    }

    /**
     * @access private
     */
    var $_sort_columns = [];

    function addSortColumn($column, $order)
    {
        if ($this->_rowset) {
            return false;
        }

        $app_locator = GRN_ApplicationLocator::instance();
        $db = $app_locator->getConnection('todo');

        $column = $db->escape($column);
        $this->_sort_columns[$column] = $order;

        return true;
    }

    function getSortColumn($index)
    {
        $columns = array_keys($this->_sort_columns);
        if (count($columns) <= $index) {
            return false;
        }

        return [$columns[$index], $this->_sort_columns[$columns[$index]]];
    }

    /**
     * @access private
     */
    var $_finished = false;

    function setFinish($finished)
    {
        if ($this->_rowset) {
            return false;
        }
        $this->_finished = $finished;

        return true;
    }

    function getFinish()
    {
        return $this->_finished;
    }

    /**
     * @access private
     */
    var $_category = null;

    function setCategory(& $category)
    {
        if ($this->_rowset) {
            return false;
        }

        if (is_object($category)) {
            $this->_category = $category->getOID();
        } else {
            $this->_category = $category;
        }

        if ( ! $this->_category) {
            $this->_category = null;
        }

        return true;
    }

    function &getCategory()
    {
        return $this->_category;
    }

    /**
     * @access private
     */
    var $_priority = null;

    function setPriority($priority)
    {
        if ($this->_rowset) {
            return false;
        }
        if ( ! is_numeric($priority)) {
            return false;
        }
        $this->_priority = $priority;

        return true;
    }

    function getPriority()
    {
        return $this->_priority;
    }

    /**
     * @access private
     */
    var $_expired_only = false;

    function setExpiredOnly($value)
    {
        if ($this->_rowset) {
            return false;
        }
        $this->_expired_only = $value;

        return true;
    }

    function getExpiredOnly()
    {
        return $this->_expired_only;
    }

    /**
     * @access private
     */
    var $_offset = 0;

    function setOffset($offset)
    {
        if ($this->_rowset) {
            return false;
        }
        $this->_offset = $offset;

        return true;
    }

    function getOffset()
    {
        return $this->_offset;
    }

    /**
     * @access private
     */
    var $_limit = -1;

    function setLimit($limit)
    {
        if ($this->_rowset) {
            return false;
        }
        $this->_limit = $limit;

        return true;
    }

    function getLimit()
    {
        return $this->_limit;
    }


    /**
     * @access private
     */
    function _makeFinishCondition($finished = null, $alias = 't')
    {
        if (is_null($finished)) {
            $finished = $this->_finished;
        }

        if ( ! is_null($alias)) {
            $alias .= ".";
        }

        if ($finished) {
            $c = $alias . 'col_finish IS NOT NULL';
        } else {
            $c = $alias . 'col_finish IS NULL';
        }

        return $c;
    }

    /**
     * @return CB_RowSet
     */
    function createRowSet()
    {
        $rowset = new CB_RowSet(cb_class2table('GRN_ToDo_Entity'), 't');

        $rowset->addJoin(cb_class2table('GRN_ToDo_CategoryEntity'),
            't.col_category = c._id', CB_DATABASE_LEFT_JOIN, 'c');
        //for escape
        //$conditions = array( 't.col_user = '.$this->_user->getOID() );
        $conditions = [
            $rowset->queryf('t.col_user = \'@S\'', $this->_user->getOID())
        ];
        $conditions[] = $this->_makeFinishCondition();

        if ( ! is_null($this->_category)) {
            $conditions[] = $rowset->queryf('t.col_category = \'@S\'',
                $this->_category);
        }

        if ( ! is_null($this->_priority)) {
            $conditions[] = $rowset->queryf('t.col_priority >= \'@S\'',
                $this->_priority);
        }

        if ($this->_expired_only) {
            $conditions[] = $rowset->queryf('t.col_expiration <= \'@S\'',
                time());
        }

        $rowset->addCondition(implode(' AND ', $conditions));

        $first_order = null;

        foreach ($this->_sort_columns as $column => $order) {
            if ($column == 'category') {
                $rowset->addOrderColumn('c.col_title', $order);
            } else {
                $rowset->addOrderColumn('t.col_' . $column, $order);
            }

            if (is_null($first_order)) {
                $first_order = $order;
            }
        }

        $rowset->addOrderColumn('t._id',
            ($first_order || is_null($first_order)) ? true : false);

        return $rowset;
    }

    /**
     * @access private
     */
    var $_initflag = 0;

    function _init()
    {
        $this->destroy();

        if (is_null(($this->_rowset = $this->createRowSet()))) {
            return false;
        }

        $this->_rowset->limit($this->_offset, $this->_limit);

        return true;
    }

    function iterate()
    {
        if ( ! $this->_initflag) {
            if ( ! $this->_init()) {
                $ret = null;

                return $ret;
            }

            $this->_initflag = 1;
        }

        if (is_null(($row = $this->_rowset->iterate()))) {
            $this->destroy();
            $ret = null;

            return $ret;
        }

        return $row;
    }

    function count()
    {
        $rowset = new CB_RowSet(cb_class2table('GRN_ToDo_Entity'));
        //for escape!
        //$conditions = array( 'col_user = '.$this->_user->getOID() );
        $conditions = [
            $rowset->queryf('col_user = \'@S\'', $this->_user->getOID())
        ];
        $conditions[] = $this->_makeFinishCondition(null, null);

        if ( ! is_null($this->_category)) {
            $conditions[] = $rowset->queryf('col_category = \'@S\'',
                $this->_category);
        }

        if ( ! is_null($this->_priority)) {
            $conditions[] = $rowset->queryf('col_priority >= \'@S\'',
                $this->_priority);
        }

        if ($this->_expired_only) {
            $conditions[] = $rowset->queryf('col_expiration <= \'@S\'', time());
        }

        $rowset->addCondition(implode(' AND ', $conditions));

        $rowset->applyGroupFunctions(['count' => 'COUNT(*)']);
        $result = $rowset->iterate();
        $rowset->destroy();

        return $result['count'];
    }

    function delete()
    {
        $rowset = new CB_RowSet(cb_class2table('GRN_ToDo_Entity'));
        //for escape!
        //$conditions = array( 'col_user = '.$this->_user->getOID() );
        $conditions = [
            $rowset->queryf('col_user = \'@S\'', $this->_user->getOID())
        ];
        $conditions[] = $this->_makeFinishCondition(null, null);

        if ( ! is_null($this->_category)) {
            $conditions[] = $rowset->queryf('col_category = \'@S\'',
                $this->_category);
        }

        if ( ! is_null($this->_priority)) {
            $conditions[] = $rowset->queryf('col_priority >= \'@S\'',
                $this->_priority);
        }

        if ($this->_expired_only) {
            $conditions[] = $rowset->queryf('col_expiration <= \'@S\'', time());
        }

        $rowset->addCondition(implode(' AND ', $conditions));

        //added by TRung, write log delete_all
        $todo_for_log = [];
        while ( ! is_null(($row = $rowset->iterate()))) {
            $id = $row->getOID();
            $todo_for_log[$id]['tid'] = $id;
        }

        $rowset->deleteAllMatched();
        $rowset->destroy();

        //write log delete_all
        $inspection = GRN_ToDo_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            foreach ($todo_for_log as $todo) {
                $inspection->record('delete', 'todo',
                    ['tid' => $todo['tid']]
                );
            }
        }

        return true;
    }

    function destroy()
    {
        if ( ! $this->_rowset) {
            return;
        }

        $this->_rowset->destroy();
        $this->_rowset = null;
        $this->_initflag = 0;
    }


    /**
     * @access private
     */
    function _makeNeighborCondition($previous, $oid)
    {
        $table = cb_class2table('GRN_ToDo_Entity');

        if ( ! ($current = $table->getRow($oid))) {
            return null;
        }

        $db = $table->getDBConnection();
        //escape!
        //$conditions = array( 't.col_user = '.$this->_user->getOID() );
        $conditions = [
            't.col_user = \'' . $db->escape($this->_user->getOID()) . '\''
        ];
        $conditions[] = $this->_makeFinishCondition($current->isFinished());

        if ( ! is_null($this->_category)) {
            $conditions[] = cb_queryf($db, 't.col_category = \'@S\'',
                $this->_category);
        }

        if ( ! is_null($this->_priority)) {
            $conditions[] = cb_queryf($db, 't.col_priority <= \'@S\'',
                $this->_priority);
        }

        $first_order = null;
        $previous_columns = [];
        $order_conditions = [];

        $num_columns = count($this->_sort_columns);
        $loop_count = 0;

        foreach ($this->_sort_columns as $column => $order) {
            $col_conditions = [];

            foreach ($previous_columns as $col_name => $col_value) {
                if (is_null($col_value)) {
                    $col_conditions[] = $col_name . ' IS NULL';
                } else {
                    $col_conditions[] = cb_queryf($db, $col_name . ' = \'@S\'',
                        $col_value);
                }
            }

            if ($previous) {
                if ($order) {
                    $ope = ' > ';
                } else {
                    $ope = ' < ';
                }
            } else {
                if ($order) {
                    $ope = ' < ';
                } else {
                    $ope = ' > ';
                }
            }

            if ($column == 'category') {
                $col_name = 'c.col_title';
                $category =& $current->get($column);
                $col_value = null;
                if ($category) {
                    $col_value = $category->get('title');
                }
            } else {
                $col_name = 't.col_' . $column;
                $col_value = $current->get($column);
            }


            if (is_object($col_value)) {
                if (is_a($col_value, 'cb_persistentbase')) {
                    $col_value = $col_value->getOID();
                } elseif (is_a($col_value, 'cb_timestamp')) {
                    $col_value = $col_value->unix_ts;
                }
            }

            if ( ! is_null($col_value)) {
                if ($ope == ' < ') {
                    $col_conditions[] = cb_queryf($db,
                        "($col_name$ope'@S' OR $col_name IS NULL)", $col_value);
                } else {
                    $col_conditions[] = cb_queryf($db,
                        $col_name . $ope . '\'@S\'', $col_value);
                }
                $order_conditions[] = '(' . implode(' AND ', $col_conditions)
                                      . ')';
            } elseif (($loop_count + 1) < $num_columns) {
                if ($ope == ' > ') {
                    $col_conditions[] = $col_name . ' IS NOT NULL';
                    $order_conditions[] = '(' . implode(' AND ',
                            $col_conditions) . ')';
                }
            }

            $previous_columns[$col_name] = $col_value;

            if (is_null($first_order)) {
                $first_order = $order;
            }

            $loop_count++;
        }

        $col_conditions = [];

        foreach ($previous_columns as $col_name => $col_value) {
            if (is_null($col_value)) {
                $col_conditions[] = $col_name . ' IS NULL';
            } else {
                $col_conditions[] = cb_queryf($db, $col_name . ' = \'@S\'',
                    $col_value);
            }
        }

        if ($previous) {
            //escape!
            if ($first_order
                || is_null($first_order)
            ) //$col_conditions[] = 't._id > '.$current->getOID();
            {
                $col_conditions[] = cb_queryf($db, 't._id > \'@S\'',
                    $current->getOID());
            } else //$col_conditions[] = 't._id < '.$current->getOID();
            {
                $col_conditions[] = cb_queryf($db, 't._id < \'@S\'',
                    $current->getOID());
            }
        } else {
            if ($first_order
                || is_null($first_order)
            ) //$col_conditions[] = 't._id < '.$current->getOID();
            {
                $col_conditions[] = cb_queryf($db, 't._id < \'@S\'',
                    $current->getOID());
            } else //$col_conditions[] = 't._id > '.$current->getOID();
            {
                $col_conditions[] = cb_queryf($db, 't._id > \'@S\'',
                    $current->getOID());
            }
        }

        $order_conditions[] = '(' . implode(' AND ', $col_conditions) . ')';

        if (count($conditions) < 1) {
            return '(' . implode(' OR ', $order_conditions) . ')';
        }

        return implode(' AND ', $conditions) . ' AND (' . implode(' OR ',
                $order_conditions) . ')';
    }

    /**
     * @access private
     */
    function _getNeighborID($previous, $id)
    {
        if ( ! ($condition = $this->_makeNeighborCondition($previous, $id))) {
            return false;
        }

        $table = cb_class2table('GRN_ToDo_Entity');

        $rowset = new CB_RowSet($table, 't');
        $rowset->addCondition($condition);

        $rowset->addJoin(cb_class2table('GRN_ToDo_CategoryEntity'),
            't.col_category = c._id', CB_DATABASE_LEFT_JOIN, 'c');

        $first_order = null;
        foreach ($this->_sort_columns as $column => $order) {
            if ($column == 'category') {
                $rowset->addOrderColumn('c.col_title',
                    $previous ? ($order ? false : true) : $order);
            } else {
                $rowset->addOrderColumn('t.col_' . $column,
                    $previous ? ($order ? false : true) : $order);
            }
            if (is_null($first_order)) {
                $first_order = $order;
            }
        }

        if (is_null($first_order)) {
            $first_order = true;
        }

        $rowset->addOrderColumn('t._id',
            $previous ? ($first_order ? false : true) : $first_order);
        $rowset->limit(0, 1);
        $row = $rowset->iterate();
        $rowset->destroy();

        return $row ? $row->getOID() : false;
    }

    function getPrevious($id)
    {
        return $this->_getNeighborID(1, $id);
    }

    function getNext($id)
    {
        return $this->_getNeighborID(0, $id);
    }

    /*
    function makeQuery( $columns )
    {
        $app_locator = GRN_ApplicationLocator::instance();
        $db =& $app_locator->getConnection( 'todo' );

        $conditions = array( 't.col_user = '.$this->_user->getOID() );
        $conditions[] = $this->_makeFinishCondition();

        if( ! is_null($this->_category) )
            $conditions[] = cb_queryf( $db, 't.col_category = \'@S\'', $this->_category );

        if( ! is_null($this->_priority) )
            $conditions[] = cb_queryf( $db, 't.col_priority >= \'@S\'', $this->_priority );

        if( $this->_expired_only )
            $conditions[] = cb_queryf( $db, 't.col_expiration <= \'@S\'', time() );

        $condition = implode(' AND ', $conditions);

        $orderby = array();

        $first_order = null;

        foreach( $this->_sort_columns as $column => $order )
        {
            if( $order )
                $orderby[] = 't.col_'.$column.' DESC';
            else
                $orderby[] = 't.col_'.$column;

            if( is_null($first_order) )
                $first_order = $order;
        }

        if( $first_order || is_null($first_order) )
            $orderby[] = 't._id DESC';
        else
            $orderby[] = 't._id';

        $order_query = implode(',', $orderby);

        if( $this->_limit < 0 )
            $limit = '18446744073709551615';
        else
            $limit = $this->_limit;

        $offset = $this->_offset;

        $limit_query = "LIMIT $offset, $limit";


        $from = "tab_grn_todo_entity AS t";

        if( array_key_exists("c.col_title", $columns) )
        {
            $from = "(".$from." LEFT JOIN tab_grn_todo_categoryentity AS c ON (t.col_category = c._id))";
        }

        return "SELECT ".implode(',',array_keys($columns))." FROM $from WHERE ($condition) ORDER BY $order_query $limit_query;";
    }

    function listDatas()
    {
        $columns = array(
                         't._id' => 0,
                         't.col_title' => 1,
                         't.col_memo' => 2,
                         't.col_category' => 3,
                         't.col_expiration' => 4,
                         't.col_limited' => 5,
                         't.col_finish' => 6,
                         't.col_priority' => 7,
                         't.col_ctime' => 8,
                         't.col_mtime' => 9,
                         'c.col_title' => 10,
                         );

        $query = $this->makeQuery( $columns );

        $app_locator = GRN_ApplicationLocator::instance();
        $db =& $app_locator->getConnection( 'todo' );

        if( !cb_is_db_result(($result = $db->query($query))) )
            return array();

        $datas = array();
        $ts = new CB_TimeStamp();
        while( ($row = $db->fetch_row($result)) !== FALSE )
        {
            $item['tid'] = $row[$columns['t._id']];
            $item['cid'] = $row[$columns['t.col_category']];
            $item['title'] = $row[$columns['t.col_title']];

            if( ($t = $row[$columns['t.col_expiration']]) )
            {
                require_once('fw/date.csp');
                $ts->unix_ts = $t;
                $fid = cb_date_compact_format($ts);
                if( $fid == 'TimeShort_HM' )
                    $fid = 'DateShort_MDW';

                $item['ldate'] = $ts;
                $item['ldate_format'] = $fid;
            }
            else
            {
                $item['ldate'] = null;
            }

            if( ($t = $row[$columns['t.col_finish']]) )
            {
                require_once('fw/date.csp');
                $ts->unix_ts = $t;
                $fid = cb_date_compact_format($ts);
                if( $fid == 'TimeShort_HM' )
                    $fid = 'DateShort_MDW';

                $item['fdate'] = $ts;
                $item['fdate_format'] = $fid;
            }
            else
            {
                $item['fdate'] = null;
            }

            $item['priority'] = $row[$columns['t.col_priority']];
            $item['memo'] = $row[$columns['t.col_memo']];

            $item['category'] = $row[$columns['c.col_title']];

            $ts->unix_ts = $row[$columns['t.col_ctime']];
            $item['ctime'] = $ts;
            $ts->unix_ts = $row[$columns['t.col_mtime']];
            $item['mtime'] = $ts;

            $datas[$row[$columns['t._id']]] = $item;
        }

        $db->free_result($result);

        return $datas;
    }
    */
}



