<?php
/**
 * @brief
 * @author   Yoshiaki Tanaka
 * @date     2005/02/16
 * @par      Copyright (c) 2005 Cybozu,Inc. All rights reserved .
 * @package  grn.todo
 */


require_once('grn/inspection.csp');
require_once('todo/error_code.csp');

define('GRN_TODO_STATE_FINISHED', 1);


/**
 * @class    GRN_ToDo_Entity
 * @package  grn.todo
 */
class GRN_ToDo_CategoryEntity extends CB_PersistentBase
{
    var $_app_id = 'todo';

    //! カテゴリの所有者
    var $col_user = ['type' => 'relation', 'to' => 'CB_User'];

    //! カテゴリ名
    var $col_title = ['type' => 'char', 'length' => CB_DATABASE_MAX_STRINDEX];

    //! メモ
    var $col_description
        = [
            'type'   => 'char',
            'length' => 65535,
            'lazy'   => true
        ];

    //! 表示順序
    var $col_list_index = ['type' => 'list_index'];

    //! 作成時刻
    var $col_ctime = ['type' => 'timestamp'];

    //! 更新時刻
    var $col_mtime = ['type' => 'timestamp'];

    var $idx_li_id = ['cols' => ['list_index', null]];


    // 予備カラム
    var $col_reserve_text1 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text2 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text3 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_int1 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int2 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int3 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_blob1 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob2 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob3 = ['type' => 'blob', 'lazy' => true];


    function __construct(& $row)
    {
        parent::__construct($row);
    }

    function onCreate()
    {
        $ts = new Cb_TimeStamp();
        $ts->unix_ts = time();
        $this->set('ctime', $ts);
        $this->set('mtime', $ts);
    }

    function onUpdate()
    {
        $ts = new Cb_TimeStamp();
        $ts->unix_ts = time();
        $this->set('mtime', $ts);
    }
}


/**
 * @class    GRN_ToDo_Entity
 * @package  grn.todo
 */
class GRN_ToDo_Entity extends CB_PersistentBase
{
    var $_app_id = 'todo';

    //! ToDoの所有者
    var $col_user = ['type' => 'relation', 'to' => 'CB_User'];

    //! ToDo名
    var $col_title = ['type' => 'char', 'length' => 255];

    //! メモ
    var $col_memo = ['type' => 'char', 'length' => 65535];

    //! カテゴリ
    var $col_category
        = [
            'type' => 'weak_relation',
            'to'   => 'GRN_ToDo_CategoryEntity'
        ];

    //! 〆切
    var $col_expiration = ['type' => 'timestamp'];

    //! 〆切設定の有無
    var $col_limited = ['type' => 'int'];

    //! 完了タイムスタンプ
    var $col_finish = ['type' => 'timestamp'];

    //! 重要度
    var $col_priority = ['type' => 'int'];

    //! 作成時刻
    var $col_ctime = ['type' => 'timestamp'];

    //! 更新時刻
    var $col_mtime = ['type' => 'timestamp'];

    var $idx_mtime = ['cols' => ['mtime', null]];
    var $idx_finish = ['cols' => ['finish', null]];
    var $idx_l_e = ['cols' => ['limited', 'expiration', null]];
    var $idx_p_l_e = ['cols' => ['priority', 'limited', 'expiration', null]];
    var $idx_u_e = ['cols' => ['user', 'expiration', null]];


    // 予備カラム
    var $col_reserve_text1 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text2 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text3 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_int1 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int2 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int3 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_blob1 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob2 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob3 = ['type' => 'blob', 'lazy' => true];


    function __construct(& $row)
    {
        parent::__construct($row);
    }


    function set($prop_name, $prop_value)
    {
        if ($prop_name == 'title') {
            require_once('fw/string_util.csp');
            $prop_value = cb_trim_check($prop_value,
                E_COMMON_MISSING_MANDATORY);
        }
        if ($prop_name == 'expiration' || $prop_name == 'finish') {
            if ($prop_value && ! is_a($prop_value, 'cb_timestamp')) {
                require_once('todo/functions.csp');
                $prop_value = grn_todo_timestamp($prop_value);
            }

            if ($prop_name == 'expiration') {
                if ($prop_value) {
                    parent::set('limited', 1);
                } else {
                    parent::set('limited', 0);
                }
            }
        }

        return parent::set($prop_name, $prop_value);
    }


    /**
     * 〆切を過ぎているかどうか問い合わせる
     *
     * @param mixed $date 〆切日の指定、nullの場合は本日
     *
     * @return  boolean
     */
    function isExpired($date = null)
    {
        // 〆切日なしの場合
        if ( ! ($expiration = $this->get('expiration'))) {
            return false;
        }

        require_once('todo/functions.csp');
        $ts = grn_todo_timestamp($date);

        return $expiration->compare($ts) <= 0;
    }

    /**
     * 〆切日を設定する
     *
     * @param   mixed $date 〆切日
     *
     * @return  boolean
     */
    function setExpirationDate($date)
    {
        return $this->set('expiration', $date);
    }

    function isFinished()
    {
        return ! is_null($this->get('finish'));
    }

    function setFinish($finish)
    {
        if ($finish) {
            $ts = new CB_TimeStamp();
            $ts->unix_ts = time();

            $this->set('finish', $ts);
        } else {
            $this->set('finish', null);
        }

        return true;
    }

    function onCreate()
    {
        $ts = new Cb_TimeStamp();
        $ts->unix_ts = time();
        $this->set('ctime', $ts);
        $this->set('mtime', $ts);
    }

    function onUpdate()
    {
        $ts = new Cb_TimeStamp();
        $ts->unix_ts = time();
        $this->set('mtime', $ts);
    }
}


