<?php
/**
 * @brief
 * @author   Yoshiaki Tanaka
 * @date     2005/02/16
 * @par      Copyright (c) 2005 Cybozu,Inc. All rights reserved .
 * @package  grn.todo
 */


require_once('grn/controller.csp');


/**
 * @class    GRN_ToDo_ControllerUtil
 * @package  grn.todo
 */
class GRN_ToDo_ControllerUtil extends GRN_ControllerUtil
{
    function __construct($page = null)
    {
        parent::__construct($page);
    }

    function isCurrentPage()
    {
        return $this->_page == cb_get_pagename();
    }

    /**
     * 一覧開始位置を取得する、自動でセッションへ保存する
     *
     * @return integer
     */
    function getListOffset()
    {
        if ( ! $this->isCurrentPage()) {
            $session =& $this->getSession();
            $sp = $session->get('current_start_position');
            if ($sp == null) {
                $sp = 0;
            }

            return $sp;
        }

        $sp = $this->getNaviStartPosition();
        $this->setNaviStartPosition($sp);

        return $sp;
    }

    /**
     * @access private
     */
    var $_order_param = null;

    /**
     * 一覧ソートパラメータを取得する、自動でセッションへ保存する
     *
     * @param string $default ソートパラメータの初期値
     *
     * @return string
     */
    function getListOrderParam($default = null)
    {
        if ( ! is_null($this->_order_param)) {
            return $this->_order_param;
        }

        global $G_INPUT;

        if ($this->isCurrentPage()) {
            if (array_key_exists('sort', $G_INPUT)) {
                $this->_order_param = $G_INPUT['sort'];
                if ( ! $this->_order_param) {
                    $this->_order_param = $default;
                }

                $session =& $this->getSession();
                $session->set('current_sort', $this->_order_param);

                return $this->_order_param;
            }

            if ( ! array_key_exists('sf', $G_INPUT) || ! $G_INPUT['sf']) {
                $this->_order_param = $default;

                $session = $this->getSession();
                $session->set('current_sort', $this->_order_param);

                return $this->_order_param;
            }
        }

        $session = $this->getSession();
        $current_sort = $session->get('current_sort');
        if ($current_sort == null) {
            $current_sort = $default;
        }

        $this->_order_param = $current_sort;

        return $current_sort;
    }

    /**
     * 一覧ソートのカラム情報を取得する
     *
     * @param string $arg     ソートパラメータ
     * @param string $default ソートパラメータの初期値
     *
     * @return array
     */
    function getListOrderColumn($arg = null, $default = 'prd')
    {
        $params = [
            'ctu' => [
                'param'  => 'ctu',
                'column' => 'category',
                'order'  => false
            ],
            'ctd' => [
                'param'  => 'ctd',
                'column' => 'category',
                'order'  => true
            ],
            'epu' => [
                'param'  => 'epu',
                'column' => 'expiration',
                'order'  => false
            ],
            'epd' => [
                'param'  => 'epd',
                'column' => 'expiration',
                'order'  => true
            ],
            'pru' => [
                'param'  => 'pru',
                'column' => 'priority',
                'order'  => false
            ],
            'prd' => [
                'param'  => 'prd',
                'column' => 'priority',
                'order'  => true
            ],
        ];

        if (is_null($arg)) {
            $arg = $this->getListOrderParam($default);
        }

        if ( ! $arg || ! array_key_exists($arg, $params)) {
            $arg = 'prd';
        }

        return $params[$arg];
    }

    function getDateTimeCompactFormat($date)
    {
        if ( ! $date) {
            return null;
        }

        require_once('fw/date.csp');
        $format_id = cb_date_compact_format($date);
        if ($format_id == 'TimeShort_HM') {
            $format_id = 'DateShort_MDW';
        }

        return $format_id;
    }

    function getToDoView(& $todo)
    {
        $todo_for_view = [];

        if ( ! $todo) {
            return $todo_for_view;
        }

        $todo_for_view['tid'] = $todo->getOID();
        $todo_for_view['cid'] = $todo->get('category');
        $todo_for_view['title'] = $todo->get('title');
        $todo_for_view['ldate'] = $todo->get('expiration');
        $todo_for_view['ldate_format']
            = $this->getDateTimeCompactFormat($todo_for_view['ldate']);
        $todo_for_view['fdate'] = $todo->get('finish');
        $todo_for_view['fdate_format']
            = $this->getDateTimeCompactFormat($todo_for_view['fdate']);
        $todo_for_view['priority'] = $todo->get('priority');
        $todo_for_view['memo'] = $todo->get('memo');

        if (($category = $todo->get('category'))) {
            $todo_for_view['category'] = $category->get('title');
        }

        $todo_for_view['ctime'] = $todo->get('ctime');
        $todo_for_view['mtime'] = $todo->get('mtime');

        return $todo_for_view;
    }


    function setSitePosition(& $smarty, $page_path, $current_page = null)
    {
        assert('$smarty');

        if (is_null($current_page)) {
            $page_title = grn_get_current_page_display_name();
        } else {
            if (strncmp($current_page, 'name:', 5) == 0) {
                $page_title = substr($current_page, 5);
            } else {
                $page_title = grn_get_page_display_name($current_page);
            }
        }

        $smarty->assign('app_id', 'todo');
        $smarty->assign('page_title', $page_title);

        $positions = [];
        if ($page_path) {
            foreach ($page_path as $page => $args) {
                // サイトポジションで一覧に戻るときは常に一覧状態を復元する
                $base = basename($page);
                if ($base == 'index' || $base == 'history') {
                    $args['sf'] = 1;
                }

                $positions[] = ([
                                    'page' => $page,
                                    'name' => grn_get_page_display_name($page)
                                ] + $args);
            }
        }
        $positions[] = ['page' => "", 'name' => $page_title];

        $smarty->assign('site_position', $positions);
    }


    function getInputConfigValues(& $user)
    {
        $config = [];

        require_once('grn/ui.csp');
        $um = GRN_UIConfigManager::getInstance();
        $uc = $um->getUserConfig($user);

        if ( ! $uc) {
            return $config;
        }

        $config['area_width'] = $uc->getAreaWidth();
        $config['area_height'] = $uc->getAreaHeight();

        return $config;
    }

    function getConfigValues(& $user, $input = false)
    {
        require_once('grn/ui.csp');
        $um = GRN_UIConfigManager::getInstance();
        $uc = $um->getUserConfig($user);

        if ( ! $uc) {
            return false;
        }

        $config = [
            'subject_width'  => $uc->getSubjectWidth(),
            'truncate_width' => $uc->getTruncateWidth(),
            'name_width'     => $uc->getNameWidth(),
            'inline'         => $uc->getInlineSetting(),
        ];

        if ($input) {
            $config += $this->getInputConfigValues($user);
        }

        return $config;
    }

    /**
     * Get ToDo View
     *
     * @param array $todo
     *
     * @return array
     */
    private function getView(& $todo)
    {
        $todo_for_view = [];

        if ( ! $todo) {
            return $todo_for_view;
        }

        $todo_for_view['tid'] = $todo['_id'];
        $todo_for_view['cid'] = $todo['col_category'];
        $todo_for_view['title'] = $todo['col_title'];

        $todo_for_view['ldate'] = $todo['col_expiration'];
        if ( ! is_null($todo_for_view['ldate'])) {
            $ets = new CB_TimeStamp();
            $ets->unix_ts = $todo_for_view['ldate'];
            $todo_for_view['ldate_format']
                = $this->getDateTimeCompactFormat($ets);
        }

        $todo_for_view['fdate'] = $todo['col_finish'];
        if ( ! is_null($todo_for_view['fdate'])) {
            $fts = new CB_TimeStamp();
            $fts->unix_ts = $todo_for_view['fdate'];
            $todo_for_view['fdate_format']
                = $this->getDateTimeCompactFormat($fts);
        }

        $todo_for_view['priority'] = $todo['col_priority'];
        $todo_for_view['memo'] = $todo['col_memo'];

        $todo_for_view['ctime'] = $todo['col_ctime'];
        $todo_for_view['mtime'] = $todo['col_mtime'];

        return $todo_for_view;
    }

    /**
     * Get ToDo List View
     *
     * @param  array $todos
     *
     * @return array $todo_list_for_view
     */
    public function getListView($todos)
    {
        $todo_list_for_view = [];
        foreach ($todos as $id => $todo) {
            $todo_list_for_view[$id] = $this->getView($todo);
        }

        return $todo_list_for_view;
    }
}


