<?php

namespace grn\todo;

/**
 * UncompletedTodoLogic
 * call Shared & Parsonal Todo Dao to exec Query.
 * Methods in class create Timestamp of search_end_timestamp,
 *                                   of Timezone spec.
 */

class UncompletedTodoLogic
{
    const SECONDS_OF_DAY = 86400;
    const SECONDS_OF_HOUR = 3600;

    private $personalTodoDao;
    private $sharedTodoDao;

    public function __construct()
    {
        $this->createTodoDAO();
    }

    /**
     * Get Expired Personal Todo. This method search ExpriedTodo from Tododay to 90 days before.
     *
     * @param $user_id         user if of serach
     * @param $start_timestamp search start timestamp.
     *
     * @return array $todos Expired Shared Todo
     **/
    public function getExpiredPersonalTodo($user_id, $start_timestamp)
    {
        $three_month_before = $start_timestamp - self::SECONDS_OF_DAY * 30 * 3;

        return $this->personalTodoDao
            ->selectExpiredTodoByUserId($user_id,
                $three_month_before,
                $start_timestamp - self::SECONDS_OF_DAY);
    }

    /**
     * define Argument $todo is Expired or not.
     *
     * @param array $todo
     * @param       $start_timestamp
     *
     * @return Boolean
     */
    private function isExpiredTodo(array $todo, $start_timestamp)
    {
        $userTimestamp = new \CB_TimeStampEx();
        $todoTimestamp = new \CB_TimeStampEx();
        $todoTimestamp->unix_ts = $todo["deadline"];
        $userTimestamp->unix_ts = $start_timestamp;
        //set similar Timezone for comparing
        $todoTimestamp->setTimezone($todo["timezone"]);
        $userTimestamp->setTimezone($todo["timezone"]);

        return $userTimestamp->getDate()->compare($todoTimestamp->getDate())
               > 0;
    }

    /**
     * Get Expired Shared Todo. This method search ExpriedTodo from Tododay to 90 days before.
     *
     * @param $user_id         user if of serach
     * @param $start_timestamp search start timestamp.
     *
     * @return array $todos Expired Shared Todo
     **/
    public function getExpiredSharedTodo($user_id, $start_timestamp)
    {
        //共有Todoの締切仕様を考慮した90日前
        //90日前の0:00-23:59を考慮する
        $three_month_before = $start_timestamp - self::SECONDS_OF_DAY * 30 * 3
                              - self::SECONDS_OF_DAY + 1;
        $todos
            = $this->sharedTodoDao
            ->selectUncompleteTodoByUserIdByTimestamp($user_id,
                $three_month_before,
                $start_timestamp + self::SECONDS_OF_DAY);
        $expired_todo = [];
        foreach ($todos as $todo) {
            if ($this->isExpiredTodo($todo, $start_timestamp)) {
                array_push($expired_todo, $todo);
            }
        }

        return $expired_todo;

    }

    /**
     * @param array $todos            data elements of array.
     * @param int   $target_timestamp timestamp of Calendar startDate
     * @param int   $term             amount of day.
     *
     * @return array $todos devided by Day.
     **/
    public function devideTodosByDay(array $todos, $target_timestamp, $term)
    {
        $devided_todos = [];
        for ($i = 0; $i < $term; $i++) {
            $devided_todos[$i] = [];
        }

        foreach ($todos as $todo) {
            //締切は、deadlineから算出される当日の23:59:59ということになるので、
            //スケジューラーに表示されるのは、締切時間を基準にする
            $real_deadline = $todo["deadline"] + self::SECONDS_OF_DAY - 1;
            $offset_day = ($real_deadline - $target_timestamp)
                          / self::SECONDS_OF_DAY;
            if (0 <= $offset_day and $offset_day <= $term) {
                array_push($devided_todos[(int)$offset_day], $todo);
            }
        }

        return $devided_todos;
    }

    /**
     * @param $user_id
     * @param $start_timestamp
     * @param $end_timestamp
     *
     * @return array array of UncompledSharedTodo,devided by Day. array size is amount of day.
     **/
    public function getUncompletedSharedTodoByDays(
        $user_id,
        $start_timestamp,
        $end_timestamp
    ) {
        //共有Todoの締切タイムスタンプは、時の一点を表現しない。
        //あるタイムゾーンの○日の0:00-23:59
        //タイムゾーンを考慮して、一日前を余分に取得する必要がある。
        $search_start_timestamp = $start_timestamp - self::SECONDS_OF_DAY;
        $todos
            = $this->sharedTodoDao->selectUncompleteTodoByUserIdByTimestamp($user_id,
            $search_start_timestamp,
            $end_timestamp);

        return $this->devideTodosByDay($todos,
            $start_timestamp,
            ($end_timestamp - $start_timestamp) / self::SECONDS_OF_DAY);

    }

    /**
     * Create DataAccessObject
     * please Overiride when Testing if you need.
     **/
    protected function createTodoDAO()
    {
        $this->sharedTodoDao = new \grn\space\db\dao\TodoDAO();
        $this->personalTodoDao = new \grn\todo\TodoDAO();
    }

}
