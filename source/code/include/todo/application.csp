<?php

use grn\grn\access\service\AppAccess;

/**
 * ToDoアプリケーションクラス
 *
 * @author  Tanaka, Yoshiaki        2004/11
 * @package grn.todo
 */

require_once('grn/application.csp');
require_once('grn/ui.csp');

require_once('todo/table.csp');
require_once('todo/inspection.csp');


/**
 * @package grn.todo
 */
class GRN_ToDo extends GRN_ApplicationBase
{
    function __construct()
    {
        parent::__construct('todo');
    }


    /**
     * @access private
     */
    function _getTableInfo($class_name)
    {
        $app_locator = GRN_ApplicationLocator::instance();
        $tm = $app_locator->getTableManager('todo');

        $table = $tm->getTableInfo($class_name);

        return $table;
    }


    /**
     * ToDo を登録する
     *
     * @param object $user       ユーザー
     * @param array  $properties ToDoのプロパティ値
     *
     * @return mixed
     */
    function create(& $user, $properties)
    {
        if ( ! $user) {
            $ret = false;

            return $ret;
        }
        if ( ! $properties) {
            $ret = false;

            return $ret;
        }

        $table = $this->_getTableInfo('GRN_ToDo_Entity');

        if ( ! ($row = $table->newRow())) {
            $ret = false;

            return $ret;
        }

        $row->set('user', $user);

        if (array_key_exists('user', $properties)) {
            unset($properties['user']);
        }

        foreach (array_keys($properties) as $prop_name) {
            $row->set($prop_name, $properties[$prop_name]);
        }

        $row->onCreate();

        // 監査する
        $inspection = GRN_ToDo_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            if (is_null($properties['category'])) {
                $category = '0';
            } else {
                $category = $properties['category']->getOID();
            }
            $inspection->record('create', 'todo',
                [
                    'tid'   => $row->getOID(),
                    'cid'   => $category,
                    'title' => $properties['title']
                ]
            );
        }

        return $row;
    }

    /**
     * カテゴリ を登録する
     *
     * @param object $user       ユーザー
     * @param array  $properties カテゴリのプロパティ値
     *
     * @return mixed
     */
    function createCategory(& $user, $properties)
    {
        if ( ! $user) {
            $ret = false;

            return $ret;
        }
        if ( ! $properties) {
            $ret = false;

            return $ret;
        }

        $table = $this->_getTableInfo('GRN_ToDo_CategoryEntity');
        $row = $table->newRow();

        $row->set('user', $user);

        if (array_key_exists('user', $properties)) {
            unset($properties['user']);
        }

        foreach (array_keys($properties) as $prop_name) {
            $row->set($prop_name, $properties[$prop_name]);
        }

        $row->onCreate();

        // 監査する
        $inspection = GRN_ToDo_Inspection::getInstance();

        if ($inspection->isEnabled()) {
            $inspection->record('create', 'category',
                [
                    'cid'   => $row->getOID(),
                    'title' => $properties['title']
                ]
            );
        }

        return $row;
    }

    /**
     * カテゴリ を削除する
     *
     * @param object $category 削除するカテゴリ
     */
    function deleteCategory(& $category)
    {
        //added by TRung
        $rowset = new CB_RowSet(cb_class2table('GRN_ToDo_Entity'));
        $rowset->addCondition('tab_grn_todo_entity.col_category ='
                              . $category->getOID());
        $todo_for_log = [];
        while ( ! is_null(($row = $rowset->iterate()))) {
            $id = $row->getOID();
            $todo_for_log[$id]['tid'] = $id;
            $todo_for_log[$id]['cid'] = 0;
            $todo_for_log[$id]['title'] = $row->get('title');
        }

        $category->delete();

        // 監査する
        $inspection = GRN_ToDo_Inspection::getInstance();

        if ($inspection->isEnabled()) {
            $inspection->record('delete', 'category',
                ['cid' => $category->getOID()]
            );

            //write log for todo
            foreach ($todo_for_log as $todo) {
                $inspection->record('modify', 'todo',
                    [
                        'tid'   => $todo['tid'],
                        'cid'   => $todo['cid'],
                        'title' => $todo['title']
                    ]
                );
            }
        }
    }

    /**
     * ToDo を取得する
     *
     * @param object $user ユーザー
     *
     * @return mixed
     */
    function get(& $user, $id)
    {
        if ( ! $user) {
            $ret = null;

            return $ret;
        }

        $table = $this->_getTableInfo('GRN_ToDo_Entity');
        assert('!is_null($table)');
        $rowset = new CB_RowSet($table);
        //escape!
        $rowset->addCondition($rowset->queryf("_id = '@S' AND col_user = '@S'",
            $id, $user->getOID()));
        $row = $rowset->iterate();
        $rowset->destroy();

        return $row;
    }

    /**
     * カテゴリを取得する
     *
     * @param object $user ユーザー
     * @param string $id   カテゴリID
     *
     * @return mixed
     */
    function getCategory(& $user, $id)
    {
        if ( ! $user || ! $id) {
            $ret = null;

            return $ret;
        }

        $table = $this->_getTableInfo('GRN_ToDo_CategoryEntity');
        assert('!is_null($table)');
        $rowset = new CB_RowSet($table);
        //escape!
        $rowset->addCondition($rowset->queryf("_id = '@S' AND col_user = '@S'",
            $id, $user->getOID()));
        $row = $rowset->iterate();
        $rowset->destroy();

        return $row;
    }

    /**
     * カテゴリの一覧を取得する
     *
     * @param object $user ユーザー
     *
     * @return mixed
     */
    function listCategories(& $user)
    {
        if ( ! $user) {
            return [];
        }

        $table = $this->_getTableInfo('GRN_ToDo_CategoryEntity');
        assert('!is_null($table)');
        $rowset = new CB_RowSet($table);
        //escape!
        $rowset->addCondition($rowset->queryf("col_user = '@S'",
            $user->getOID()));
        $rowset->addOrderColumn('col_list_index');

        $categories = [];
        while ( ! is_null(($row = $rowset->iterate()))) {
            $categories[$row->getOID()] = $row;
        }

        return $categories;
    }


    /**
     * カテゴリメニューを設定する
     *
     * @param object $user ユーザー
     * @param string $menu メニュー文字列（1行1項目）
     *
     * @return boolean
     */
    function setCategoryMenu(& $user, $menu)
    {
        $names = [];
        if ( ! is_null($menu) && strlen($menu) > 0) {
            require_once('fw/string_util.csp');

            foreach (explode("\n", $menu) as $title) {
                $title = cb_trim($title);
                if (strlen($title) > 0) {
                    $names[] = $title;
                }
            }
        }

        $categories = $this->listCategories($user);

        $idx = 1;
        foreach ($names as $title) {
            $category = null;

            foreach (array_keys($categories) as $key) {
                $ct = $categories[$key]->get('title');

                if ($title == $ct) {
                    $category =& $categories[$key];
                    unset($categories[$key]);
                    break;
                }
            }

            if (is_null($category)) {
                $category = $this->createCategory($user, ['title' => $title]);
            }

            $category->set('list_index', $idx);
            $idx++;
        }

        foreach (array_keys($categories) as $key) {
            $this->deleteCategory($categories[$key]);
        }
    }

    /**
     * システム設定
     */
    /**
     * function getSystemConfigArray()
     * {
     * return array( 'todo_config' =>
     * array( array('page'=>'todo/system/common_set',
     * 'icon'=>'general32'),
     * ),
     * );
     * }
     */

    /**
     * 個人設定
     */
    function getPersonalConfigArray()
    {
        return [
            'todo_config' =>
                [
                    [
                        'page' => 'todo/personal/category_set',
                        'icon' => 'category32'
                    ],
                ],
        ];
    }

    /**
     * ポートレット
     *
     * @return array
     */
    function &getPortletList()
    {
        $portlet = [
            'name'             => $this->getName(),
            'type'             => 'grn.todo.portlet',
            //種別
            'version'          => '1.0',
            //バージョン
            'set_template'     => 'todo/portlet/settings.csp',
            //設定用テンプレート名
            'command_template' => 'todo/portlet/command_settings.csp',
            //設定用テンプレート名
            'view_template'    => 'todo/portlet/view.csp'
            //表示用テンプレート名
        ];
        $ret = [$portlet];

        return $ret;
    }

    /**
     * Get if todo application is enabled
     *
     * @return bool
     */
    public static function isEnableTodo()
    {
        return AppAccess::isAppAvailableInternalAccess('todo');
    }
}


