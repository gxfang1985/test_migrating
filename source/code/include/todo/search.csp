<?php
/**
 * @brief
 * @author   Yoshiaki Tanaka
 * @date     2005/02/16
 * @par      Copyright (c) 2005 Cybozu,Inc. All rights reserved .
 * @package  grn.todo
 */
require_once('todo/table.csp');

/**
 * @class    GRN_ToDo_Search
 * @package  grn.todo
 */
class GRN_ToDo_Search
{

    private $_available_items = ['title' => 1, 'memo' => 1];
    private $_order_items
        = [
            'category'   => 1,
            'expiration' => 1,
            'priority'   => 1
        ];
    private $_items = [];

    public function getAvailableItems()
    {
        return $this->_available_items;
    }

    public function setItems($items)
    {
        if ($this->_items != $items) {
            $available = $this->getAvailableItems();
            foreach (array_keys($items) as $item) {
                if ( ! array_key_exists($item, $available)) {
                    unset($items[$item]);
                }
            }
            $this->_items = $items;
        }
    }

    private $_keywords = null;

    /**
     * Set search text
     *
     * @param string $keyword
     */
    public function setText($keyword)
    {
        require_once('fw/string_util.csp');

        if ($keyword) {
            $this->_keywords = cb_parse_search_text($keyword);
        } else {
            $this->_keywords = null;
        }
    }

    private $_and = true;

    /**
     * Set and search
     *
     * @param boolean $and
     */
    public function setAnd($and)
    {
        $this->_and = $and;
    }

    private $_not = false;

    /**
     * Set not like search
     *
     * @param boolean $not
     */
    public function setNot($not)
    {
        $this->_not = $not;
    }

    private $_offset = 0;

    /**
     * Set offset
     *
     * @param int $offset
     */
    public function setOffset($offset)
    {
        $this->_offset = $offset;
    }

    private $_limit = -1;

    /**
     * Set limit
     *
     * @param int $limit
     */
    public function setLimit($limit)
    {
        $this->_limit = $limit;
    }

    private $_sensitive = false;

    private $_order = 'expiration';
    private $_desc = true;

    public function setOrder($column, $desc = true)
    {
        if (array_key_exists($column, $this->_order_items)) {
            $this->_order = $column;
            $this->_desc = $desc;
        }
    }

    /**
     * Set case sensitive
     *
     * @param boolean $enable
     */
    public function setSensitive($enable)
    {
        $this->_sensitive = $enable;
    }

    private $_limited = null;

    /**
     * Set Expiration Limited
     *
     * @param boolean $limited
     */
    public function setLimited($limited)
    {
        $this->_limited = $limited;
    }

    private $_exp_from = null;
    private $_exp_to = null;

    /**
     * Set expiration
     *
     * @param mixed $from CB_Date or CB_DateTime or CB_TimeStamp
     * @param mixed $to   CB_Date or CB_DateTime or CB_TimeStamp
     */
    public function setExpiration($from, $to)
    {
        require_once('todo/functions.csp');
        $this->_exp_from = grn_todo_timestamp($from);
        $this->_exp_to = grn_todo_timestamp($to);
    }

    private $_category = null;

    /**
     * Set category ID
     *
     * @param int $category Category ID
     */
    public function setCategory($category)
    {
        $this->_category = $category;
    }

    private $_priority = null;

    /**
     * Set priority
     *
     * @param int $priority
     */
    public function setPriority($priority)
    {
        $this->_priority = $priority;
    }

    private $_finished = null;

    /**
     * Set finished
     *
     * @param boolean $finished
     */
    public function setFinish($finished)
    {
        $this->_finished = $finished;
    }

    private $table_name = 'tab_grn_todo_entity';
    private $database = null;
    private $_user = null;

    /**
     * Constructor
     *
     * @param CB_User $user
     */
    public function __construct($user)
    {
        if ( ! $user) {
            cb_throw_error(E_GRN_TODO_INTERNAL);
        }

        $this->_user = &$user;

        $app_locator = GRN_ApplicationLocator::instance();
        $this->database = $app_locator->getConnection('todo');
    }

    /**
     * Search todos
     *
     * @return array $rows  array( array( '_id' => ... ), ... )
     */
    public function search()
    {
        $db = $this->database;

        $query = 'SELECT * FROM ' . $this->table_name . ' AS t WHERE '
                 . $this->_makeCondition();

        if ($this->_limit > 0) {
            $query .= ' LIMIT ' . $this->_limit;
        }
        if ($this->_offset > 0) {
            $query .= ' OFFSET ' . $this->_offset;
        }

        $order_condition = $this->_desc ? ' DESC' : ' ASC';

        $query .= ' ORDER BY col_' . $this->_order . ' ' . $order_condition;

        $result = $db->query($query);
        if ($result === false) {
            //Throw Query Error
            $db->throwError(['query' => 'query failed: ' . $query]);
        }

        $rows = [];
        $count = $db->num_rows($result);
        for ($i = 0; $i < $count; $i++) {
            $row = $db->fetch_assoc($result);
            $rows[$row['_id']] = $row;
        }

        return $rows;
    }

    /**
     * Get count
     *
     * @return int
     */
    public function count()
    {
        $db = $this->database;

        $query = 'SELECT COUNT(*) FROM ' . $this->table_name . ' AS t WHERE '
                 . $this->_makeCondition();
        $result = $db->query($query);
        if ($result === false) {
            //Throw Query Error
            $db->throwError(['query' => 'query failed: ' . $query]);
        }

        $row = $db->fetch_assoc($result);

        return $row['COUNT(*)'];
    }

    /**
     * Make where condition
     *
     * @return string
     */
    private function _makeCondition()
    {
        $db = $this->database;

        $conditions = [
            cb_queryf($db, "t.col_user = '@S'", $this->_user->getOID())
        ];

        if ( ! is_null($this->_limited)) {
            $conditions[] = cb_queryf($db, "t.col_limited = '@S'",
                $this->_limited);
        }

        if ( ! is_null($this->_exp_from)) {
            $conditions[] = cb_queryf($db, "t.col_expiration >= '@S'",
                $this->_exp_from->unix_ts);
        }

        if ( ! is_null($this->_exp_to)) {
            $conditions[] = cb_queryf($db, "t.col_expiration < '@S'",
                $this->_exp_to->unix_ts);
        }

        if ( ! is_null($this->_category)) {
            $conditions[] = cb_queryf($db, "t.col_category = '@S'",
                $this->_category);
        }

        if ( ! is_null($this->_priority)) {
            $conditions[] = cb_queryf($db, "t.col_priority = '@S'",
                $this->_priority);
        }

        if ($this->_finished === true) {
            $conditions[] = 't.col_finish IS NOT NULL';
        } elseif ($this->_finished === false) {
            $conditions[] = 't.col_finish IS NULL';
        }

        $text_search_condition = $this->_makeColumnCondition($this->_items,
            $this->_keywords);
        if ( ! is_null($text_search_condition)) {
            $conditions[] = $text_search_condition;
        }

        $condition = implode(' AND ', $conditions);

        return $condition;
    }

    /**
     * Get text search conditions
     *
     * @param  array $items
     * @param  array $words
     *
     * @return string
     */
    private function _makeColumnCondition($items, $words)
    {
        if ( ! $items || ! $words) {
            return null;
        }

        $conditions = [];

        if ($this->_and) {
            $operator = 'AND';
        } else {
            $operator = 'OR';
        }

        $acolumns = array_keys($this->_avaliable_items);

        foreach ($words as $word) {
            $format = $this->_makeFormatCondition($word);

            $acond = [];

            foreach ($acolumns as $column) {
                if (array_key_exists($column, $items)) {
                    $acond[] = 't.col_' . $column . $format;
                }
            }

            if ($acond) {
                if ($this->_not) {
                    $conditions[] = '(' . implode(' AND ', $acond) . ')';
                } else {
                    $conditions[] = '(' . implode(' OR ', $acond) . ')';
                }
            }
        }

        if ( ! $conditions) {
            return null;
        }

        return '(' . implode(' ' . $operator . ' ', $conditions) . ')';
    }

    /**
     * Get LIKE condition for text search
     *
     * @param  string $word
     *
     * @return string
     */
    private function _makeFormatCondition($word)
    {
        $format = '';

        if ($this->_not) {
            $format .= ' NOT LIKE ';
        } else {
            $format .= ' LIKE ';
        }

        // sensitive search
        if ($this->_sensitive) {
            $format .= 'BINARY ';
        }

        $format .= '\'%@L%\'';

        $db = $this->database;

        return cb_queryf($db, $format, $word);
    }

}


