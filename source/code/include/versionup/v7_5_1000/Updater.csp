<?php

namespace grn\versionup\v7_5_1000;

use grn\versionup\AbstractUpdater;
use grn\versionup\AlterTable;

class Updater extends AbstractUpdater
{
    protected function before()
    {
        $this->createUserProfileOfBulletin();
        $this->createUnSubscribeCategoryOfBulletin();
        if (cb_is_onpremises_distributed_database()) {
            $this->createTableGaroonSessions();
        }

        $this->createTablesForWorkflowCustomization();
    }

    protected function middleAlterTables()
    {
        $this->alterTablesForWorkflowCustomization();
        $this->addJoinLeaveColumnToSpaceSpace();
        $this->addMemberColumnOfSpace();
        $this->modifyTypeOfApprovalComment();
    }

    protected function middleUpdateData()
    {
        $this->insertNetMeetingVersionProfileData();
        $this->insertEnableConfirmAuthorityReadAndNotificationUsersProfileData();

        if (cb_is_onpremises()) {
            $this->makePhpPortletPrivate();
        }

        $this->deleteCbdnetAndGoogleSearch();

        if (cb_is_forest()) {
            require_once('fw/cydec.csp');
            $util = \CB_CyDECUtil::getInstance();
            $domain_id = $util->getDomainID();

            switch ($domain_id) {
                case 'c3' :
                    $this->deleteEventsThatContainInvalidEventDate();
                    break;
                case 'c219016' :
                    $this->fixEventThatContainInvalidEventDate();
                    break;
                case 'c158448' :
                    $event_id = '1089964';
                    $this->fixInvalidScheduleRepeatConditions($event_id);
                    break;
                case 'c158907' :
                    $event_id = '309987';
                    $this->fixInvalidScheduleRepeatConditions($event_id);
                    break;
                default :
                    break;
            }
        }

        $this->revertWorkflowDateItemData();
    }

    protected function after()
    {
    }

    /**
     * GTM-2544
     */
    private function addMemberColumnOfSpace()
    {
        $db = cb_get_app_db('space');
        $alter_table = new AlterTable($db, 'tab_grn_space_space_user');

        // Not change together, because foreign key constraint.
        $alter_table->dropForeignKey("cns_grn_space_space_user_user");
        $alter_table->dropForeignKey("cns_grn_space_space_user_space");
        $alter_table->dropPrimaryKey(["col_user", "col_space"]);
        $alter_table->addColumn("_id",
            "bigint(20) NOT NULL AUTO_INCREMENT FIRST");
        $alter_table->addPrimaryKey(["_id"]);
        $alter_table->execute();

        $alter_table->modifyColumn("col_space",
            "bigint(20) NOT NULL AFTER _id");
        $alter_table->modifyColumn("col_user",
            "bigint(20) DEFAULT NULL AFTER col_space");
        $alter_table->addColumn("col_group",
            "bigint(20) DEFAULT NULL AFTER col_user");
        $alter_table->addColumn("col_role",
            "bigint(20) DEFAULT NULL AFTER col_group");
        $alter_table->modifyColumn("col_display_order",
            "int(11) NOT NULL DEFAULT '2147483647' AFTER col_role");

        $alter_table->addIndex("cni_user", ["col_user"]);
        $alter_table->addIndex("cni_group", ["col_group"]);
        $alter_table->addIndex("cni_role", ["col_role"]);

        $alter_table->addUniqueIndex("idx_space_user",
            ["col_space", "col_user"]);
        $alter_table->addUniqueIndex("idx_space_group",
            ["col_space", "col_group"]);
        $alter_table->addUniqueIndex("idx_space_role",
            ["col_space", "col_role"]);

        $alter_table->addIndex("idx_space_display_order",
            ["col_space", "col_display_order"]);
        $alter_table->execute();

        $alter_table->addForeignKey(
            "cns_grn_space_space_user_space", ["col_space"],
            "tab_grn_space_space", ["_id"],
            "ON DELETE CASCADE");
        $alter_table->addForeignKey(
            "cns_grn_space_space_user_user", ["col_user"],
            "tab_cb_user", ["_id"],
            "ON DELETE CASCADE");
        $alter_table->addForeignKey(
            "cns_grn_space_space_user_group", ["col_group"],
            "tab_cb_group", ["_id"],
            "ON DELETE CASCADE");
        $alter_table->addForeignKey(
            "cns_grn_space_space_user_role", ["col_role"],
            "tab_cb_role", ["_id"],
            "ON DELETE CASCADE");
        $alter_table->execute();

        $this->log("Succeeded to alter the tab_grn_space_space_user table.");
    }

    /*
     * GTM-2549
     */
    private function createUserProfileOfBulletin()
    {
        $db = cb_get_app_db('bulletin');
        $query
            = <<<SQL
CREATE TABLE IF NOT EXISTS `tab_grn_bulletin_profiledata` (
  `col_user` bigint(20) NOT NULL,
  `col_subscribe` int(11) NOT NULL,
  PRIMARY KEY (`col_user`),
  KEY `idx_subscribe` (`col_subscribe`),
  KEY `idx_user_subscribe` (`col_user`,`col_subscribe`),
  CONSTRAINT `cns_grn_bulletin_profiledata` FOREIGN KEY (`col_user`) REFERENCES `tab_cb_user` (`_id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;
SQL;
        $db->query($query);
        $this->log("Succeeded to create the tab_grn_bulletin_profiledata table.");
    }

    /**
     * GTM-2548 GTM-2551
     */
    private function createUnSubscribeCategoryOfBulletin()
    {
        $db = cb_get_app_db('bulletin');
        $query
            = <<<SQL
CREATE TABLE IF NOT EXISTS `tab_grn_bulletin_unsubscribecategory` (
  `col_category` bigint(20) NOT NULL,
  `col_user` bigint(20) NOT NULL,
  KEY `cni_user` (`col_user`),
  PRIMARY KEY `idx_category_user` (`col_category`,`col_user`),
  CONSTRAINT `cns_grn_bulletin_unsubscribecategory_category` FOREIGN KEY (`col_category`) REFERENCES `tab_grn_bulletin_categoryentity` (`_id`) ON DELETE CASCADE,
  CONSTRAINT `cns_grn_bulletin_unsubscribecategory_user` FOREIGN KEY (`col_user`) REFERENCES `tab_cb_user` (`_id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;
SQL;
        $db->query($query);
        $this->log("Succeeded to create the tab_grn_bulletin_unsubscribecategory table.");
    }

    /**
     * GTM-3065
     */
    private function insertNetMeetingVersionProfileData()
    {
        $db = cb_get_master_db();
        $db->query("INSERT INTO `tab_cb_profiledata___system` (`col_key`, `col_module`, `col_name`, `col_value`) VALUES (0, 'grn.netmeeting.system', 'netmeeting_vcube_version', 's:1:\"4\";');");

        $this->log("Succeeded to insert Net meeting version profile data");
    }

    /**
     * GTM-2962
     */
    private function makePhpPortletPrivate()
    {
        $db = cb_get_master_db();

        $db->query(
            'UPDATE tab_grn_portal_portletlayout,tab_grn_portal_portlet ' .
            'SET tab_grn_portal_portletlayout.col_is_open = 0 WHERE ' .
            'tab_grn_portal_portletlayout.col_portlet = tab_grn_portal_portlet._id '
            .
            'AND tab_grn_portal_portlet.col_type="grn.portal.php"'
        );

        $this->log('Succeeded to hide php_portlet');
    }

    /**
     * GTM-2550
     */
    private function insertEnableConfirmAuthorityReadAndNotificationUsersProfileData()
    {
        $db = cb_get_master_db();
        $db->query("DELETE FROM tab_cb_profiledata___system WHERE col_module = 'grn.bulletin' AND col_name = 'enable_confirm_authority_read_and_notification_users';");
        $db->query("INSERT INTO `tab_cb_profiledata___system` (`col_key`, `col_module`, `col_name`, `col_value`) VALUES  (0, 'grn.bulletin', 'enable_confirm_authority_read_and_notification_users', 'b:0;');");

        $this->log("Succeeded to insert enable_confirm_authority_read_and_notification_users profile data");
    }

    /**
     * GTM-3029
     */
    private function deleteCbdnetAndGoogleSearch()
    {
        $db = cb_get_master_db();
        $db->query("DELETE FROM tab_grn_applicationname WHERE col_application='cbdnet';");
        $db->query("DELETE FROM tab_cb_profiledata___system WHERE col_name = 'cbdnet' AND col_module = 'grn.common.application';");

        $db->query("DELETE FROM tab_grn_systemadmin_application_group_acl WHERE col_application='cbdnet';");
        $db->query("DELETE FROM tab_grn_systemadmin_application_role_acl WHERE col_application='cbdnet';");
        $db->query("DELETE FROM tab_grn_systemadmin_application_user_acl WHERE col_application='cbdnet';");

        $db->query("DELETE tab_grn_defaultapplicationmenu_local FROM tab_grn_defaultapplicationmenu_local INNER JOIN tab_grn_defaultapplicationmenu ON tab_grn_defaultapplicationmenu_local.parent_id=tab_grn_defaultapplicationmenu._id WHERE col_app_id='cbdnet';");
        $db->query("DELETE FROM tab_grn_defaultapplicationmenu WHERE col_app_id='cbdnet';");

        $db->query("DELETE tab_grn_defaultstartmenu_local FROM tab_grn_defaultstartmenu_local INNER JOIN tab_grn_defaultstartmenu ON tab_grn_defaultstartmenu_local.parent_id=tab_grn_defaultstartmenu._id WHERE col_app_id='cbdnet';");
        $db->query("DELETE FROM tab_grn_defaultstartmenu WHERE col_app_id='cbdnet';");

        $db->query("DELETE FROM tab_grn_portal_portlet WHERE col_type='grn.portal.google_search';");

        $this->log("Succeeded to delete the data of 'Cbdnet' and 'GoogleSearch'.");
    }

    /**
     * GRB-16634
     */
    private function createTableGaroonSessions()
    {
        $db = cb_get_master_db();

        $db->query(
            'CREATE TABLE IF NOT EXISTS `garoon_sessions` (
              id char(32) PRIMARY KEY,
              ts TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
              data LONGBLOB NOT NULL,
              KEY idx_ts (ts ASC)
            ) ENGINE=InnoDB DEFAULT CHARSET=ascii ROW_FORMAT=DYNAMIC;'
        );

        $this->log("Succeeded to create table 'garoon_sessions'");
    }

    /**
     * GTM-2948
     */
    private function createTablesForWorkflowCustomization()
    {
        $db = cb_get_app_db('workflow');

        $db->query(
            "CREATE TABLE IF NOT EXISTS `tab_grn_workflow_customization_filebody` (
                `_id` bigint(20) NOT NULL AUTO_INCREMENT,
                `col_blob` char(49) CHARACTER SET ascii DEFAULT NULL,
                `col_charset` char(100) DEFAULT NULL,
                `col_hash` char(40) CHARACTER SET ascii DEFAULT NULL,
                `col_mime` char(100) NOT NULL,
                `col_name` char(255) NOT NULL,
                `col_timestamp` int(11) NOT NULL,
                `col_size` int(11) NOT NULL,
                PRIMARY KEY (`_id`)
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci ROW_FORMAT=DYNAMIC;"
        );

        $db->query(
            "CREATE TABLE IF NOT EXISTS `tab_grn_workflow_customization_resource` (
                `_id` bigint(20) NOT NULL AUTO_INCREMENT,
                `col_target` varchar(100),
                `col_url` varchar(512) DEFAULT NULL,
                `col_file` bigint(20) DEFAULT NULL,
                `col_type` varchar(100) NOT NULL,
                PRIMARY KEY (`_id`),
                KEY `cni_file` (`col_file`),
                KEY `idx_target` (col_target),
               CONSTRAINT `cns_grn_workflow_customization_resource_file` FOREIGN KEY (`col_file`) REFERENCES `tab_grn_workflow_customization_filebody` (`_id`) ON DELETE SET NULL
            ) ENGINE=INNODB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci ROW_FORMAT=DYNAMIC;"
        );

        $this->log("Succeeded to create tables for workflow customization");
    }

    /**
     * GTM-2948
     */
    private function alterTablesForWorkflowCustomization()
    {
        $db = cb_get_app_db('workflow');

        $alter_tab_grn_workflow_form = new AlterTable($db,
            'tab_grn_workflow_form');
        $alter_tab_grn_workflow_form->addColumn("col_is_customization_active",
            "tinyint(1) DEFAULT NULL");
        $alter_tab_grn_workflow_form->execute();

        $alter_tab_grn_workflow_item = new AlterTable($db,
            'tab_grn_workflow_item');
        $alter_tab_grn_workflow_item->addColumn("col_code",
            "CHAR(100) DEFAULT NULL");
        $alter_tab_grn_workflow_item->execute();

        $alter_tab_grn_workflow_pathstep = new AlterTable($db,
            'tab_grn_workflow_pathstep');
        $alter_tab_grn_workflow_pathstep->addColumn("col_code",
            "CHAR(100) DEFAULT NULL");
        $alter_tab_grn_workflow_pathstep->execute();

        $this->log("Succeeded to alter tables for workflow customization");
    }

    /**
     * GTM-3265
     */
    private function addJoinLeaveColumnToSpaceSpace()
    {
        $db = cb_get_app_db('space');
        $alter_table = new AlterTable($db, 'tab_grn_space_space');

        $alter_table->addColumn('col_join_leave', 'tinyint(1) DEFAULT NULL');
        $alter_table->execute();

        $this->log('Succeeded to alter the tab_grn_space_space table.');
    }

    /**
     * GRB-18750
     */
    private function deleteEventsThatContainInvalidEventDate()
    {
        require_once('schedule/resources.csp');

        $event_type_normal_and_allday = GRN_SCHEDULE_EVENT_TYPE_NORMAL
                                        + GRN_SCHEDULE_EVENT_TYPE_ALLDAY;

        $db = cb_get_app_db('schedule');
        $ret = $db->query(
            "SELECT col_event FROM tab_grn_schedule_eventdate
             WHERE (col_setdate IS NOT NULL AND col_setdate + INTERVAL 1 DAY IS NULL)
                AND (col_enddate IS NOT NULL AND col_enddate + INTERVAL 1 DAY IS NULL)
                AND col_event_type = $event_type_normal_and_allday"
        );

        $delete_event_ids = [];
        while ($row = $db->fetch_row($ret)) {
            $delete_event_ids[] = $row[0];
        }

        $this->deleteEvents($db, $delete_event_ids);

        $this->log('Succeeded to delete invalid events.');
    }

    /**
     * @param \CB_DatabaseConnection $schedule_db
     * @param array                  $event_ids
     */
    private function deleteEvents(
        \CB_DatabaseConnection $schedule_db,
        array $event_ids
    ) {
        if (empty($event_ids)) {
            return;
        }

        $this->deleteFilesOfEvents($schedule_db, $event_ids);

        $delete_events_query = $schedule_db->format(
            "DELETE FROM tab_grn_schedule_event WHERE _id IN (@A)",
            [$event_ids]
        );
        $schedule_db->query($delete_events_query);

        $report_db = cb_get_app_db('report');
        $delete_report_relations_query = $report_db->format(
            "DELETE FROM tab_grn_report_reportschedulerelations WHERE col_schedule IN (@A)",
            [$event_ids]
        );
        $report_db->query($delete_report_relations_query);
    }

    /**
     * @param \CB_DatabaseConnection $schedule_db
     * @param array                  $event_ids
     */
    private function deleteFilesOfEvents(
        \CB_DatabaseConnection $schedule_db,
        array $event_ids
    ) {
        require_once('grn/application.csp');
        require_once('schedule/table.csp');
        require_once('schedule/file.csp');

        $app_locator = \GRN_ApplicationLocator::instance();
        $table_manager = $app_locator->getTableManager('schedule');

        $rowset
            = new \CB_RowSet($table_manager->getTableInfo(\GRN_Schedule_FileRelation::class));
        $rowset->addCondition($schedule_db->format('col_event IN (@A)',
            [$event_ids]));
        /** @var \GRN_Schedule_FileRelation $row */
        while ($row = $rowset->iterate()) {
            /** @var \GRN_Schedule_File $f */
            if (($f = $row->get('file'))) {
                $f->delete();
            }
            $row->delete();
        }
        $rowset->destroy();
    }

    /**
     * GRB-18750
     */
    private function fixEventThatContainInvalidEventDate()
    {
        $db = cb_get_app_db('schedule');
        $db->query('UPDATE tab_grn_schedule_eventdate SET col_setdate="2013-11-11" WHERE _id=3575');
        $this->log('Succeeded to fix the invalid event.');
    }

    /**
     * GRB-18347 Revert Workflow Date Item Data
     */
    private function revertWorkflowDateItemData()
    {
        $db = cb_get_app_db('workflow');

        $result
            = $db->query('SELECT _id, col_settings FROM tab_grn_workflow_itemdata WHERE col_text="a:0:{}" and col_foreign_key="grn.workflow.date"');

        require_once('fw/miscFunctions.csp');
        $revert_date_ids = [];
        $revert_datetime_ids = [];
        while ($row = $db->fetch_row($result)) {
            $date_setting = @cb_unserialize($row[1],
                ["allowed_classes" => false]);

            if (isset($date_setting['date_type'])
                && $date_setting['date_type'] == 1
            ) {
                $revert_datetime_ids[] = $row[0];
            } else {
                $revert_date_ids[] = $row[0];
            }
        }

        if (count($revert_date_ids) > 0) {
            $query
                = $db->format('UPDATE tab_grn_workflow_itemdata SET col_text="a:3:{s:4:\"year\";s:0:\"\";s:5:\"month\";s:0:\"\";s:3:\"day\";s:0:\"\";}"  WHERE _id IN (@A)',
                [$revert_date_ids]);
            $db->query($query);
        }

        if (count($revert_datetime_ids) > 0) {
            $query
                = $db->format('UPDATE tab_grn_workflow_itemdata SET col_text="a:5:{s:4:\"year\";s:0:\"\";s:5:\"month\";s:0:\"\";s:3:\"day\";s:0:\"\";s:4:\"hour\";s:0:\"\";s:6:\"minute\";s:0:\"\";}"  WHERE _id IN (@A)',
                [$revert_datetime_ids]);
            $db->query($query);
        }

        $this->log('Succeeded to revert workflow date item data.');
    }

    /**
     * GRB-13809
     */
    private function modifyTypeOfApprovalComment()
    {
        $db = cb_get_app_db('workflow');

        $alter_table = new AlterTable($db, 'tab_grn_workflow_pathstepdatauser');
        $alter_table->modifyColumn("col_comment", "longtext");
        $alter_table->execute();

        $this->log("Succeeded to modify the col_comment column on tab_grn_workflow_pathstepdatauser.");
    }

    /**
     * GRB-18751
     *
     * @param string $event_id
     */
    private function fixInvalidScheduleRepeatConditions($event_id)
    {
        require_once('schedule/resources.csp');

        $db = cb_get_app_db('schedule');

        $fixed_setdate = '2011-03-01';

        $update_query = $db->format(
            "UPDATE tab_grn_schedule_repeatcondition
                 SET col_setdate = '@S'
                 WHERE col_event = '@S'
                   AND col_setdate IS NOT NULL AND col_setdate + INTERVAL 1 DAY IS NULL",
            [$fixed_setdate, $event_id]
        );
        $db->query($update_query);

        $this->log('Succeeded to fix an invalid repeat condition.');
    }
}
