<?php
declare(strict_types=1);

namespace grn\versionup\v18_5_0;

use grn\versionup\AbstractUpdater;
use grn\versionup\AlterTable;

class Updater extends AbstractUpdater
{
    protected function before()
    {
        $this->createMessageMentionTable();
    }

    protected function middleAlterTables()
    {
        $this->alterTableTabGrnScheduleEvent();
    }

    protected function middleUpdateData()
    {
        $this->updateSystemDefaultDesignTheme();
        $this->updateUsersDesignTheme();
        $this->deleteSettingDisplayBanner();
        $this->updateStateApplicationMenu();
        $this->deleteInvalidCommentInPathStepDataUser();
        if (cb_is_onpremises()) {
            $this->updateLanguageStatusAndDefaultLanguage();
        }
    }

    protected function after()
    {
    }


    //GTM-4476
    private function updateSystemDefaultDesignTheme()
    {
        $db = cb_get_master_db();
        $query
            = <<<SQL
UPDATE
 tab_cb_profiledata___system
SET
 col_value = CASE
 WHEN col_value='N;' OR col_value='s:15:"Design-standard";' THEN 's:18:"Design-classic2011";'
 WHEN col_value='s:14:"Design-classic";' THEN 's:18:"Design-classic2005";'
 ELSE col_value
 END
WHERE
 col_module='grn.common.ui'
 AND
 col_name='design';
SQL;
        $db->query($query);

        $this->log("Succeeded to update the value of System default design theme in tab_cb_profiledata___system table.");
    }

    private function updateUsersDesignTheme()
    {
        require_once("fw/profile.csp");
        $profile_connections = get_profile_get_connections();
        $user_tables = cb_get_user_tables();

        foreach ($profile_connections as $db) {
            for ($table_num = 0; $table_num < $user_tables; $table_num++) {
                $db->query("UPDATE tab_cb_profiledata___p" . $table_num
                           . " SET col_value = CASE"
                           . " WHEN col_value='N;' OR col_value='s:15:\"Design-standard\";' THEN 's:18:\"Design-classic2011\";'"
                           . " WHEN col_value='s:14:\"Design-classic\";' THEN 's:18:\"Design-classic2005\";'"
                           . " ELSE col_value"
                           . " END"
                           . " WHERE"
                           . " col_module='grn.common.ui'"
                           . " AND"
                           . " col_name='design';");
            }
        }
        $this->log("Succeeded to update the value of design theme of users.");
    }

    private function deleteSettingDisplayBanner()
    {

        require_once("fw/profile.csp");
        $profile_connections = get_profile_get_connections();
        $user_tables = cb_get_user_tables();

        foreach ($profile_connections as $db) {
            for ($table_num = 0; $table_num < $user_tables; $table_num++) {
                $db->query("DELETE FROM tab_cb_profiledata___p" . $table_num
                           . " WHERE col_module = 'grn.common.ui' AND col_name ='used_moremoderm_theme'");
            }
        }
        $this->log("Succeeded to delete the value of showing more modern banner");
    }

    private function deleteInvalidCommentInPathStepDataUser()
    {
        $db = cb_get_app_db('workflow');

        $result
            = $db->query("SELECT COUNT(_id) FROM tab_grn_workflow_pathstepdatauser WHERE col_comment IS NOT NULL;");
        $count = 0;
        if ($row = $db->fetch_row($result)) {
            $count = $row[0];
        }
        $db->free_result($result);

        $total_delete_ids = 0;
        $record_id = 0;
        while (0 < $count) {
            $delete_ids = [];
            $result
                = $db->query("SELECT _id, col_comment FROM tab_grn_workflow_pathstepdatauser WHERE col_comment IS NOT NULL AND _id > {$record_id} LIMIT 1000;");

            require_once('fw/miscFunctions.csp');
            while ($row = $db->fetch_row($result)) {
                if ( ! @cb_unserialize($row[1],
                    ["allowed_classes" => ["CB_TimeStamp"]])
                ) {
                    $delete_ids[] = $row[0];
                }
                $record_id = $row[0];
            }
            $db->free_result($result);

            if (count($delete_ids) > 0) {
                $query
                    = $db->format("UPDATE tab_grn_workflow_pathstepdatauser SET col_comment='a:1:{s:7:\"current\";s:0:\"\";}' WHERE _id IN (@A)",
                    [$delete_ids]);
                $db->query($query);
                $total_delete_ids += count($delete_ids);
            }

            $count -= 1000;
        }

        $this->log('Succeeded to delete ' . $total_delete_ids
                   . ' invalid comments.');
    }

    private function updateStateApplicationMenu()
    {
        require_once("fw/profile.csp");
        $profile_connections = get_profile_get_connections();
        $user_tables = cb_get_user_tables();

        foreach ($profile_connections as $db) {
            for ($table_num = 0; $table_num < $user_tables; $table_num++) {

                $query
                    = "INSERT INTO tab_cb_profiledata___p{$table_num} (col_key,col_module,col_name,col_value)"
                      . " SELECT DISTINCT p1.col_key, 'grn.common.togglemenu', 'last_state_applicationMenu', 's:1:\"1\";'"
                      . " FROM tab_cb_profiledata___p{$table_num} p1"
                      . " WHERE p1.col_key NOT IN"
                      . " (SELECT DISTINCT p2.col_key FROM tab_cb_profiledata___p{$table_num} p2 WHERE p2.col_module = 'grn.common.togglemenu');";

                $db->query($query);
            }
        }
        $this->log("Succeeded to update the value of state application menu");
    }

    private function createMessageMentionTable()
    {
        $db = cb_get_app_db('message');
        $sql
            = <<<SQL
CREATE TABLE IF NOT EXISTS `tab_grn_message_mention` (
  `_id` bigint(20) NOT NULL AUTO_INCREMENT,
  `col_comment` bigint(20) NOT NULL,
  `col_user` bigint(20) DEFAULT NULL,
  `col_group` bigint(20) DEFAULT NULL,
  `col_role` bigint(20) DEFAULT NULL,
  `col_name` char(255) NOT NULL,
  `col_type` char(12) NOT NULL,
  PRIMARY KEY (`_id`),
  UNIQUE KEY `idx_message_mention_user_comment` (`col_user`,`col_comment`),
  UNIQUE KEY `idx_message_mention_group_comment` (`col_group`,`col_comment`),
  UNIQUE KEY `idx_message_mention_role_comment` (`col_role`,`col_comment`),
  KEY `cns_grn_message_mention_comment` (`col_comment`),
  CONSTRAINT `cns_grn_message_mention_comment` FOREIGN KEY (`col_comment`) REFERENCES `tab_grn_message_follows` (`_id`) ON DELETE CASCADE,
  CONSTRAINT `cns_grn_message_mention_user` FOREIGN KEY (`col_user`) REFERENCES `tab_cb_user` (`_id`) ON DELETE SET NULL,
  CONSTRAINT `cns_grn_message_mention_group` FOREIGN KEY (`col_group`) REFERENCES `tab_cb_group` (`_id`) ON DELETE SET NULL,
  CONSTRAINT `cns_grn_message_mention_role` FOREIGN KEY (`col_role`) REFERENCES `tab_cb_role` (`_id`) ON DELETE SET NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
SQL;
        $db->query($sql);
        $this->log("Succeeded to create the tab_grn_message_mention table.");
    }


    private function updateLanguageStatusAndDefaultLanguage()
    {
        require_once("fw/i18n/locale.csp");
        require_once("fw/i18n/system_config.csp");
        $display_languages = \CB_LanguageManager::getAvailableLanguages();
        if (count($display_languages) == 0) {
            $display_languages
                = \CB_LanguageManager::getAllowedLanguagesByConfigurationFile();
            // don't set selectable for zh-tw
            $display_languages = array_diff($display_languages, ['zh-tw']);
            \CB_I18N_SystemConfig::setDisplayLanguages($display_languages);
        }

        $default_locale = \CB_LocaleManager::getDefaultLanguage();
        if ( ! in_array($default_locale, $display_languages)) {
            \CB_LocaleManager::setDefaultLanguage($display_languages [0]);
        }
        $this->log("Succeeded to update language status and default local language");
    }

    private function alterTableTabGrnScheduleEvent()
    {
        $db = cb_get_app_db('schedule');
        $alter_table = new AlterTable($db, 'tab_grn_schedule_event');
        $alter_table->addColumn('col_additional_items', 'longtext');
        $alter_table->execute();

        $this->log('Succeeded to add the col_additional_items column on tab_grn_schedule_event.');

    }
}
