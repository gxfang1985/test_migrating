<?php

namespace grn\versionup\v6_11_900;

use grn\grn\access\utility\AppAvailabilityUtil;
use grn\versionup\AbstractUpdater;
use grn\versionup\AlterTable;

class Updater extends AbstractUpdater
{
    protected function before()
    {
        $this->createPresenceTable();
        $this->createInternalIpAddressTable();
        if (cb_is_onpremises_distributed_database()) {
            $this->createMyGroupTable();
        }
        $this->createMyGroupFacilityRelationTable();
        $this->createDefaultPublicDestinationOfSchedule();
        $this->createManuallyEnterSenderTableOfBulletin();
        $this->createOperatorTableOfBulletin();
    }

    protected function middleAlterTables()
    {
        $this->addApprovedNumberColumnOfWorkflowForm();
        $this->modifyLengthOfPetitionNumber();
        $this->addDisplayNameModeColumnToPortletLayout();
        $this->addNotifyAddressColumnOfSchedule();
        $this->addManuallyEnterSenderColumnToBulletinArticleEntity();
        $this->addManuallyEnterSenderColumnToBulletinDraftEntity();
        $this->addNewStartItemIdAndEndItemId();
    }

    protected function middleUpdateData()
    {
        $this->updateDataToAvailabilitiesTable();
        $this->insertEnableUsingRoleProfileData();
        $this->insertAllowSettingGroupRoleToWatchers();
        $this->clearDisplayNameOnPortletLayout();
        $this->deleteInvalidMyCalendarProfileData();
        $this->convertPresenceData();
        if (cb_is_onpremises_distributed_database()) {
            $this->copyMyGroupDataToSlaveDB();
        }

        if (cb_is_forest()) {
            $this->deleteUnnecessaryEventsOfSchedulingService();
        }

        if ( ! $this->isCalledFromDotComConverter()) {
            $this->convertAutoScheduleData();
        }
    }

    protected function after()
    {
        $this->dropSchemaVersionTable();
        $this->dropOldColumnsFromAutoScheduleTable();
    }

    private function dropSchemaVersionTable()
    {
        $db = cb_get_master_db();
        $db->query('DROP TABLE IF EXISTS tab_cb_schema_version');
        $this->log("Succeeded to drop tab_cb_schema_version table");
    }

    /**
     * GTM-2539
     */
    private function createDefaultPublicDestinationOfSchedule()
    {
        $db = cb_get_app_db('schedule');
        $query
            = <<<SQL
CREATE TABLE IF NOT EXISTS `tab_grn_schedule_notifyaddress_default` (
  `_id` bigint(20) NOT NULL AUTO_INCREMENT,
  `col_target` bigint(20) NOT NULL,
  `col_user` bigint(20) DEFAULT NULL,
  `col_group` bigint(20) DEFAULT NULL,
  `col_role` bigint(20) DEFAULT NULL,
  `col_order` int(11) NOT NULL DEFAULT '2147483647',
  PRIMARY KEY (`_id`),
  UNIQUE KEY `idx_target_user` (`col_target`,`col_user`),
  UNIQUE KEY `idx_target_group` (`col_target`,`col_group`),
  UNIQUE KEY `idx_target_role` (`col_target`,`col_role`),
  KEY `idx_target_order` (`col_target`,`col_order`),
  CONSTRAINT `cns_grn_schedule_notifyaddress_default_group` FOREIGN KEY (`col_group`) REFERENCES `tab_cb_group` (`_id`) ON DELETE CASCADE,
  CONSTRAINT `cns_grn_schedule_notifyaddress_default_role` FOREIGN KEY (`col_role`) REFERENCES `tab_cb_role` (`_id`) ON DELETE CASCADE,
  CONSTRAINT `cns_grn_schedule_notifyaddress_default_target` FOREIGN KEY (`col_target`) REFERENCES `tab_cb_user` (`_id`) ON DELETE CASCADE,
  CONSTRAINT `cns_grn_schedule_notifyaddress_default_user` FOREIGN KEY (`col_user`) REFERENCES `tab_cb_user` (`_id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;
SQL;
        $db->query($query);
        $this->log("Succeeded to create the tab_grn_schedule_notifyaddress_default table.");
    }

    /**
     * GTM-2573
     */
    private function addNotifyAddressColumnOfSchedule()
    {
        $db = cb_get_app_db('schedule');
        $alter_table = new AlterTable($db, 'tab_grn_schedule_notifyaddress');

        $alter_table->addColumn("col_group", "bigint(20) DEFAULT NULL");
        $alter_table->addColumn("col_role", "bigint(20) DEFAULT NULL");
        $alter_table->addColumn("col_order",
            "int(11) NOT NULL DEFAULT '2147483647'");
        $alter_table->dropIndex("idx_event_user", ["col_event", "col_user"]);
        $alter_table->addUniqueIndex("idx_event_user",
            ["col_event", "col_user"]);
        $alter_table->addUniqueIndex("idx_event_group",
            ["col_event", "col_group"]);
        $alter_table->addUniqueIndex("idx_event_role",
            ["col_event", "col_role"]);
        $alter_table->addIndex("idx_event_order", ["col_event", "col_order"]);
        $alter_table->addIndex("cns_grn_schedule_notifyaddress_user",
            ["col_user"]);
        $alter_table->dropIndex("cni_event", ["col_event"]);
        $alter_table->dropIndex("cni_user", ["col_user"]);
        $alter_table->addForeignKey(
            "cns_grn_schedule_notifyaddress_group", ["col_group"],
            "tab_cb_group", ["_id"],
            "ON DELETE CASCADE");
        $alter_table->addForeignKey(
            "cns_grn_schedule_notifyaddress_role", ["col_role"],
            "tab_cb_role", ["_id"],
            "ON DELETE CASCADE");

        $alter_table->execute();

        $this->log("Succeeded to alter the tab_grn_schedule_notifyaddress table.");
    }

    /**
     * GTM-2580 START
     */
    private function createInternalIpAddressTable()
    {
        $db = cb_get_master_db();
        $db->query("CREATE TABLE IF NOT EXISTS `tab_grn_internal_ip_address` (
                        `_id` bigint(20) NOT NULL AUTO_INCREMENT,
                        `col_ip_address` varchar(50) NOT NULL,
                        `col_cidr` int(3) NULL,
                        `col_memo` text NULL,
                        PRIMARY KEY (`_id`)
                    )ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci ROW_FORMAT=DYNAMIC;");

        $this->log("Succeeded to create the tab_grn_internal_ip_address table.");
    }

    private function updateDataToAvailabilitiesTable()
    {
        $tables = [
            'col_user'         => 'tab_grn_availability_user',
            'col_groupuser'    => 'tab_grn_availability_groupuser',
            'col_dynamic_role' => 'tab_grn_availability_dynamic_role',
            'col_role'         => 'tab_grn_availability_role'
        ];

        foreach ($tables as $column_target => $table) {
            $availabilities = $this->getAllAvailability($table, $column_target);
            if (count($availabilities) > 0) {
                $this->deleteAllAvailability($table);
            }
            $this->insertAvailabilities($availabilities, $table,
                $column_target);

            $this->log("Succeeded to update data to the {$table} table.");
        }
    }

    private function getAllAvailability($table, $column_target)
    {
        $db = cb_get_master_db();

        $availability_list = [];
        $query = cb_queryf($db, "SELECT `@S`, col_app FROM @S ;",
            $column_target, $table);
        $result = $db->query($query);

        while ($rawData = $db->fetch_assoc($result)) {
            $availability_list[] = $rawData;
        }
        $db->free_result($result);

        return $availability_list;
    }

    private function deleteAllAvailability($table)
    {
        $db = cb_get_master_db();

        $query = "DELETE FROM " . $table . ";";
        $db->query($query);
    }

    private function insertAvailabilities(
        array $availabilities,
        $table,
        $column_target
    ) {
        $default_value = [
            'internal' => AppAvailabilityUtil::ACCESS_DENIED,
            'external' => AppAvailabilityUtil::ACCESS_DENIED
        ];

        $db = cb_get_master_db();

        $query
            = "INSERT INTO {$table} (col_ctime, {$column_target}, col_app) VALUES ";
        $query_values = [];
        foreach ($availabilities as $availability) {
            $new_app_settings = [];
            foreach (array_keys(AppAvailabilityUtil::$appIdsPrefix) as $app) {
                $new_app_settings[$app] = $default_value;
            }

            if ("" !== $availability['col_app']) {
                $apps = explode(',', $availability['col_app']);
                foreach ($apps as $app) {
                    $new_app_settings[$app]['internal']
                        = AppAvailabilityUtil::ACCESS_ALLOWED;
                    $new_app_settings[$app]['external']
                        = AppAvailabilityUtil::ACCESS_ALLOWED;
                }
            }

            $query_values[] = cb_queryf($db, "('@S', '@S', '@S')",
                time(),
                $availability[$column_target],
                json_encode(['availability' => $new_app_settings])
            );
        }

        if (count($query_values) > 0) {
            $query .= implode(",", $query_values);
            $db->query($query);
            $db->affected_rows();
        }
    }

    /**
     * GTM-2580 END
     */

    private function addApprovedNumberColumnOfWorkflowForm()
    {
        $db = cb_get_app_db('workflow');

        $alter_table = new AlterTable($db, 'tab_grn_workflow_form');
        $alter_table->addColumn("col_approved_serial_type",
            "int(11) DEFAULT NULL");
        $alter_table->addColumn("col_approved_serial_number",
            "bigint(20) DEFAULT NULL");
        $alter_table->addColumn("col_approved_serial_format",
            "char(100) DEFAULT NULL");
        $alter_table->execute();

        $this->log("Succeeded to add the col_approved_serial_type,col_approved_serial_number,col_approved_serial_format column on tab_grn_workflow_form.");
    }

    private function modifyLengthOfPetitionNumber()
    {
        $db = cb_get_app_db('workflow');

        $alter_table = new AlterTable($db, 'tab_grn_workflow_petition');
        $alter_table->modifyColumn("col_petition_number",
            "char(200) DEFAULT NULL");
        $alter_table->execute();

        $this->log("Succeeded to modify the col_petition_number column on tab_grn_workflow_petition.");
    }

    /**
     * GTM-2542
     */
    private function clearDisplayNameOnPortletLayout()
    {
        $db = cb_get_master_db();

        $portlet_type = [
            'grn.portal.application_menu',
            'grn.portal.information',
            'grn.portal.calendar',
            'grn.portal.send',
            'grn.portal.html',
            'grn.portal.php'
        ];

        // clear tab_grn_portal_portletlayout
        $query_format
            = <<<SQL
UPDATE tab_grn_portal_portletlayout
SET col_display_name = ''
WHERE col_portlet IN (
  SELECT _id FROM tab_grn_portal_portlet WHERE col_type IN (@A)
)
SQL;

        $query = $db->format($query_format, [$portlet_type]);
        $db->query($query);

        // clear tab_grn_portal_portletlayout_local
        $query_format
            = <<<SQL
DELETE FROM tab_grn_portal_portletlayout_local
WHERE parent_id IN (
  SELECT _id FROM tab_grn_portal_portletlayout
  WHERE col_portlet IN (
    SELECT _id FROM tab_grn_portal_portlet WHERE col_type IN (@A)
  )
)
SQL;

        $query = $db->format($query_format, [$portlet_type]);
        $db->query($query);

        $this->log("Succeeded to clear col_display_name on tab_grn_portal_portletlayout and tab_grn_portal_portletlayout_local.");
    }

    /**
     * GTM-2543
     */
    private function addDisplayNameModeColumnToPortletLayout()
    {
        $db = cb_get_master_db();

        $alter_table = new AlterTable($db, 'tab_grn_portal_portletlayout');
        $alter_table->addColumn("col_display_name_mode",
            "char(100) DEFAULT 'normal'");
        $alter_table->execute();

        $this->log("Succeeded to add the col_display_name_mode column on tab_grn_portal_portletlayout.");
    }

    /**
     * GTM-2541
     */
    private function insertEnableUsingRoleProfileData()
    {
        $db = cb_get_master_db();
        $db->query("DELETE FROM tab_cb_profiledata___system WHERE col_module = 'grn.common.system' AND col_name = 'permission_to_select_role';");
        $db->query("INSERT INTO `tab_cb_profiledata___system` (`col_key`, `col_module`, `col_name`, `col_value`) VALUES (0, 'grn.common.system', 'permission_to_select_role', 'i:0;');");

        $this->log("Succeeded to insert enable using role profile data");
    }

    /**
     * GTM-2573
     */
    private function insertAllowSettingGroupRoleToWatchers()
    {
        $db = cb_get_master_db();
        $db->query("INSERT INTO `tab_cb_profiledata___system` (`col_key`, `col_module`, `col_name`, `col_value`) VALUES (0, 'grn.schedule.system', 'allow_setting_group_role_to_watchers', 's:1:\"0\";') ON DUPLICATE KEY UPDATE col_value='s:1:\"0\";'");

        $this->log("Succeeded to insert allow setting group role to watchers profile data");
    }

    private function deleteInvalidMyCalendarProfileData()
    {
        require_once("fw/profile.csp");

        $user_calendar_ids = $this->getUserCalendarIdList();

        $profile_connections = get_profile_get_connections();
        $user_tables = cb_get_user_tables();

        foreach ($profile_connections as $db) {
            for ($table_num = 0; $table_num < $user_tables; $table_num++) {
                $user_calendar_ids_in_profile
                    = $this->getUserCalendarIdListInProfile($db, $table_num);

                $invalid_user_calendar_ids
                    = array_diff($user_calendar_ids_in_profile,
                    $user_calendar_ids);

                if (empty($invalid_user_calendar_ids)) {
                    continue;
                }

                $query
                    = $db->format("DELETE FROM tab_cb_profiledata___p{$table_num} WHERE _id IN (@A)",
                    [array_keys($invalid_user_calendar_ids)]);
                $db->query($query);
            }
        }

        $this->log("Succeeded to delete invalid my calendar profile data.");
    }

    private function getUserCalendarIdList()
    {
        $master_db = cb_get_master_db();
        $ret = $master_db->query('SELECT _id FROM tab_grn_usercalendar');

        $id_list = [];
        while ($row = $master_db->fetch_row($ret)) {
            $id_list[] = $row[0];
        }
        $master_db->free_result($ret);

        return $id_list;
    }

    /**
     * @param \CB_DatabaseConnection $db
     * @param int                    $table_num
     *
     * @return array key: profile id, value: user calendar id
     */
    private function getUserCalendarIdListInProfile(
        \CB_DatabaseConnection $db,
        $table_num
    ) {
        $id_list = [];

        $query
            = <<<SQL
SELECT _id, TRIM( TRAILING '";' FROM SUBSTR(col_value, INSTR(col_value, '"') + 1 ) ) AS usercalendar_id
FROM tab_cb_profiledata___p{$table_num}
WHERE col_name = 'my_calendar'
SQL;

        $ret = $db->query($query);
        while ($row = $db->fetch_assoc($ret)) {
            $id_list[$row['_id']] = $row['usercalendar_id'];
        }
        $db->free_result($ret);

        return $id_list;
    }

    private function deleteUnnecessaryEventsOfSchedulingService()
    {
        $db = cb_get_master_db();

        // Some domains, which are migrated from on-premises, have following events.
        // These events were not deleted by the grcomconv.
        $unnecessary_events = [
            'archive_log.csp',
            'delete_old_notification.csp',
            'grn_dezielink_sync_user.csp',
            'grn_rss_cybozu_information.csp',
        ];

        $query
            = $db->format('DELETE FROM tab_cb_scheduleevent WHERE col_filename IN (@A)',
            [$unnecessary_events]);

        $db->query($query);
        $this->log("Succeeded to delete unnecessary events of scheduling service");
    }

    private function createPresenceTable()
    {
        $query
            = <<<SQL
CREATE TABLE IF NOT EXISTS `tab_grn_presence_presence` (
  `col_user` bigint(20) PRIMARY KEY NOT NULL,
  `col_mode` varchar(10) DEFAULT NULL,
  `col_status` text,
  `col_memo` varchar(100) DEFAULT NULL,
  `col_mtime` int(11) NOT NULL,
  CONSTRAINT cns_grn_presence_presence_user FOREIGN KEY (col_user) REFERENCES tab_cb_user (`_id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci ROW_FORMAT=DYNAMIC;
SQL;

        $db = cb_get_app_db('presence');
        $db->query($query);

        $this->log('Succeed to create tab_grn_presence_presence table.');
    }

    private function convertPresenceData()
    {
        $master_db = cb_get_master_db();
        $presence_db = cb_get_app_db('presence');

        $ret
            = $master_db->query('SELECT col_user, col_attendee, col_attendee_mtime FROM tab_grn_userinfo');

        while ($row = $master_db->fetch_assoc($ret)) {
            if ( ! $row['col_attendee_mtime']) {
                continue;
            }

            $presence_info = @cb_unserialize($row['col_attendee'],
                ['allowed_classes' => false]);
            if ( ! is_array($presence_info)) {
                continue;
            }
            if ( ! isset($presence_info['mode'])
                 || ! isset($presence_info['status'])
                 || ! isset($presence_info['memo'])
            ) {
                continue;
            }

            $this->insertPresence($presence_db, $row['col_user'],
                $presence_info, $row['col_attendee_mtime']);
        }
        $master_db->free_result($ret);

        $master_db->query('UPDATE tab_grn_userinfo SET col_attendee = NULL, col_attendee_mtime = NULL');

        $this->log('Succeed to convert presence data.');
    }

    /**
     * @param \CB_DatabaseConnection $db
     * @param string                 $uid
     * @param array                  $presence_info
     * @param string                 $mtime
     */
    private function insertPresence(
        \CB_DatabaseConnection $db,
        $uid,
        array $presence_info,
        $mtime
    ) {
        $mode = $presence_info['mode'];
        $status = $presence_info['status'];
        $memo = $presence_info['memo'];

        $query = $db->format(
            "INSERT INTO tab_grn_presence_presence (col_user, col_mode, col_status, col_memo, col_mtime) VALUES ('@S', '@S', '@S', '@S', '@S')"
            . " ON DUPLICATE KEY UPDATE col_mode = '@S', col_status = '@S', col_memo = '@S', col_mtime = '@S'",
            [
                $uid,
                $mode,
                $status,
                $memo,
                $mtime,
                $mode,
                $status,
                $memo,
                $mtime
            ]
        );

        $db->query($query);
    }

    /**
     * GTM-2575
     */
    private function createMyGroupTable()
    {
        $slaveDatabases = $this->getSlaveDBConnections();

        $query
            = "CREATE TABLE IF NOT EXISTS `tab_grn_mygroup` (
                  `_id` bigint(20) NOT NULL AUTO_INCREMENT,
                  `col_creator` bigint(20) DEFAULT NULL,
                  `col_creator_foreign_key` char(255) DEFAULT NULL,
                  `col_creator_name` char(100) DEFAULT NULL,
                  `col_ctime` int(11) DEFAULT NULL,
                  `col_description` text,
                  `col_list_index` int(11) NOT NULL DEFAULT '2147483647',
                  `col_modifier` bigint(20) DEFAULT NULL,
                  `col_modifier_foreign_key` char(255) DEFAULT NULL,
                  `col_modifier_name` char(100) DEFAULT NULL,
                  `col_mtime` int(11) DEFAULT NULL,
                  `col_name` char(100) NOT NULL,
                  `col_owner` bigint(20) NOT NULL,
                  PRIMARY KEY (`_id`),
                  KEY `cni_creator` (`col_creator`),
                  KEY `cni_modifier` (`col_modifier`),
                  KEY `cni_owner` (`col_owner`),
                  KEY `idx_list_index1` (`col_list_index`,`_id`),
                  KEY `idx_list_index2` (`col_owner`,`col_list_index`,`_id`),
                  CONSTRAINT `cns_grn_mygroup_creator` FOREIGN KEY (`col_creator`) REFERENCES `tab_cb_user` (`_id`) ON DELETE SET NULL,
                  CONSTRAINT `cns_grn_mygroup_modifier` FOREIGN KEY (`col_modifier`) REFERENCES `tab_cb_user` (`_id`) ON DELETE SET NULL,
                  CONSTRAINT `cns_grn_mygroup_owner` FOREIGN KEY (`col_owner`) REFERENCES `tab_cb_user` (`_id`) ON DELETE CASCADE
                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci ROW_FORMAT=DYNAMIC;";

        foreach ($slaveDatabases as $slave) {
            $slave->query($query);
        }
        $this->log("Succeeded to create the tab_grn_mygroup table.");
    }

    private function copyMyGroupDataToSlaveDB()
    {
        $db = cb_get_master_db();

        $result = $db->query("SELECT * FROM tab_grn_mygroup ORDER BY _id;");
        $insertQueries = [];
        while ($row = $db->fetch_assoc($result)) {
            $setQuery = [];
            foreach ($row as $column => $value) {
                if ( ! is_null($value)) {
                    $setQuery[] = " {$column}='{$db->escape($value)}' ";
                }
            }
            $insertQueries[] = "INSERT INTO tab_grn_mygroup SET " . implode(",",
                    $setQuery) . ";";
        }

        $slaveDatabases = $this->getSlaveDBConnections();
        foreach ($slaveDatabases as $slave) {
            foreach ($insertQueries as $insertQuery) {
                $slave->query($insertQuery);
            }
            $slave->commit();
        }
    }

    private function createMyGroupFacilityRelationTable()
    {
        $db = cb_get_app_db('schedule');
        $db->query("CREATE TABLE IF NOT EXISTS `tab_grn_schedule_mygroupfacilityrelation` (
                      `col_list_index` int(11) NOT NULL DEFAULT '2147483647',
                      `col_mygroup` bigint(20) NOT NULL,
                      `col_facility` bigint(20) NOT NULL,
                      PRIMARY KEY (`col_facility`,`col_mygroup`),
                      KEY `idx_mygroups_list_index_facility` (`col_mygroup`,`col_list_index`,`col_facility`),
                      CONSTRAINT `cns_grn_schedule_mygroupfacilityrelation_mygroup` FOREIGN KEY (`col_mygroup`) REFERENCES `tab_grn_mygroup` (`_id`) ON DELETE CASCADE,
                      CONSTRAINT `cns_grn_schedule_mygroupfacilityrelation_facility` FOREIGN KEY (`col_facility`) REFERENCES `tab_grn_facility_facility` (`_id`) ON DELETE CASCADE
                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci ROW_FORMAT=DYNAMIC;");
        $this->log("Succeeded to create the tab_grn_schedule_mygroupfacilityrelation table.");
    }

    /**
     * GTM-2581
     */
    private function createManuallyEnterSenderTableOfBulletin()
    {
        $db = cb_get_app_db('bulletin');

        $db->query("CREATE TABLE IF NOT EXISTS `tab_grn_bulletin_manually_enter_sender` (
                      `_id` bigint(20) NOT NULL AUTO_INCREMENT,
                      `col_sender_name_bin` varchar(100) COLLATE utf8mb4_bin NOT NULL,
                      `col_sender_name` varchar(100) NOT NULL,
                      PRIMARY KEY (`_id`),
                      UNIQUE KEY `idx_sender_name_bin` (`col_sender_name_bin`),
                      KEY `idx_sender_name` (`col_sender_name`)
                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci ROW_FORMAT=DYNAMIC;");
        $this->log("Succeeded to create the tab_grn_bulletin_manually_enter_sender table.");
    }

    /**
     * GTM-2581
     */
    private function createOperatorTableOfBulletin()
    {
        $db = cb_get_app_db('bulletin');

        $db->query("CREATE TABLE IF NOT EXISTS `tab_grn_bulletin_operator` (
                      `_id` bigint(20) NOT NULL AUTO_INCREMENT,
                      `col_article` bigint(20),
                      `col_draft` bigint(20),
                      `col_user` bigint(20),
                      `col_user_name` char(100) NOT NULL,
                      PRIMARY KEY (`_id`),
                      KEY `cni_article` (`col_article`),
                      KEY `cni_draft` (`col_draft`),
                      KEY `cni_user` (`col_user`),
                      CONSTRAINT `cns_bulletin_articleentity_operator_article` FOREIGN KEY (`col_article`) REFERENCES `tab_grn_bulletin_articleentity` (`_id`) ON DELETE CASCADE,
                      CONSTRAINT `cns_bulletin_articleentity_operator_draft` FOREIGN KEY (`col_draft`) REFERENCES `tab_grn_bulletin_draftentity` (`_id`) ON DELETE CASCADE,
                      CONSTRAINT `cns_bulletin_articleentity_operator_user` FOREIGN KEY (`col_user`) REFERENCES `tab_cb_user` (`_id`) ON DELETE SET NULL
                     ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci ROW_FORMAT=DYNAMIC;");
        $this->log("Succeeded to create the tab_grn_bulletin_operator table.");
    }

    /**
     * GTM-2581
     */
    private function addManuallyEnterSenderColumnToBulletinArticleEntity()
    {
        $db = cb_get_app_db('bulletin');

        $alter_table = new AlterTable($db, 'tab_grn_bulletin_articleentity');
        $alter_table->addColumn("col_manually_enter_sender",
            "bigint(20) DEFAULT NULL");
        $alter_table->addIndex("idx_manually_enter_sender",
            ["col_manually_enter_sender"]);
        $alter_table->addForeignKey(
            "cns_grn_bulletin_articleentity_manually_enter_sender",
            ['col_manually_enter_sender'],
            "tab_grn_bulletin_manually_enter_sender", ['_id'],
            "ON DELETE RESTRICT");
        $alter_table->execute();

        $this->log("Succeeded to add the col_manually_enter_sender column on tab_grn_bulletin_articleentity.");
    }

    /**
     * GTM-2581
     */
    private function addManuallyEnterSenderColumnToBulletinDraftEntity()
    {
        $db = cb_get_app_db('bulletin');

        $alter_table = new AlterTable($db, 'tab_grn_bulletin_draftentity');
        $alter_table->addColumn("col_manually_enter_sender",
            "bigint(20) DEFAULT NULL");
        $alter_table->addIndex("idx_manually_enter_sender",
            ["col_manually_enter_sender"]);
        $alter_table->addForeignKey(
            "cns_grn_bulletin_draftentity_manually_enter_sender",
            ['col_manually_enter_sender'],
            "tab_grn_bulletin_manually_enter_sender", ['_id'],
            "ON DELETE RESTRICT");
        $alter_table->execute();

        $this->log("Succeeded to add the col_manually_enter_sender column on tab_grn_bulletin_draftentity.");
    }

    /**
     * @return \CB_DatabaseConnection[]
     */
    private function getSlaveDBConnections()
    {
        global $G_container_base;
        global $G_config_common;
        require_once('fw/lwc.csp');
        $config = new \CB_LWContainerFileConfig($G_config_common->get('LWC',
            'config'));
        $lwc_config = $config->listConfigs();
        $connections = [];
        foreach ($lwc_config as $section_name) {
            $section = $config->getConfig($section_name);
            if (array_key_exists('class', $section)
                && strcmp('CB_DatabaseConnection', $section['class']) === 0
            ) {
                if ($section_name !== 'dbconn') {
                    $connections[]
                        = $G_container_base->getInstance($section_name);
                }
            }
        }

        return $connections;
    }

    /**
     * GRB-18158
     */
    private function addNewStartItemIdAndEndItemId()
    {
        $db = cb_get_app_db('workflow');

        $alter_table = new AlterTable($db, 'tab_grn_workflow_auto_schedule');
        $alter_table->addColumn("col_schedule_end_item_data",
            "bigint(20) DEFAULT NULL AFTER col_schedule_end_item");
        $alter_table->addColumn("col_schedule_start_item_data",
            "bigint(20) DEFAULT NULL AFTER col_schedule_end_item");
        $alter_table->addForeignKey(
            "cns_grn_workflow_auto_schedule_item_start_data",
            ["col_schedule_start_item_data"],
            "tab_grn_workflow_itemdata", ["_id"],
            "ON DELETE SET NULL");
        $alter_table->addForeignKey(
            "cns_grn_workflow_auto_schedule_item_end_data",
            ["col_schedule_end_item_data"],
            "tab_grn_workflow_itemdata", ["_id"],
            "ON DELETE SET NULL");
        $alter_table->execute();
        $this->log("Succeeded to add col_schedule_start_item_data and col_schedule_end_item_data on tab_grn_workflow_auto_schedule.");
    }

    /**
     * GRB-18158
     */
    private function convertAutoScheduleData()
    {
        $db = cb_get_app_db('workflow');

        $db->query("UPDATE `tab_grn_workflow_auto_schedule` AS `auto_schedule` 
                     INNER JOIN `tab_grn_workflow_itemdata` AS `itemdata` 
                     ON `itemdata`.`col_item`=`auto_schedule`.`col_schedule_start_item` AND `itemdata`.`col_petition` = `auto_schedule`.`col_petition_id` 
                     SET `auto_schedule`.`col_schedule_start_item_data` = `itemdata`.`_id`");
        $db->query("UPDATE `tab_grn_workflow_auto_schedule` AS `auto_schedule` 
                     INNER JOIN `tab_grn_workflow_itemdata` AS `itemdata` 
                     ON `itemdata`.`col_item`=`auto_schedule`.`col_schedule_end_item` AND `itemdata`.`col_petition` = `auto_schedule`.`col_petition_id` 
                     SET `auto_schedule`.`col_schedule_end_item_data` = `itemdata`.`_id`");
        $db->query("DELETE FROM `tab_grn_workflow_auto_schedule`
                     WHERE `col_schedule_start_item_data` IS NULL OR `col_schedule_end_item_data` IS NULL");
        $this->log("Succeeded to convert col_schedule_start_item_data and col_schedule_end_item_data on tab_grn_workflow_auto_schedule.");
    }

    /**
     * GRB-18158
     */
    private function dropOldColumnsFromAutoScheduleTable()
    {
        $db = cb_get_app_db('workflow');

        $alter_table = new AlterTable($db, 'tab_grn_workflow_auto_schedule');
        $alter_table->dropColumn('col_schedule_start_item');
        $alter_table->dropColumn('col_schedule_end_item');
        $alter_table->execute();
        $this->log("Succeeded to drop col_schedule_start_item and col_schedule_end_item on tab_grn_workflow_auto_schedule.");
    }
}
