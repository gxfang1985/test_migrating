<?php

namespace grn\versionup\v8_2_1300;

use grn\versionup\AbstractUpdater;
use grn\versionup\AlterTable;

class Updater extends AbstractUpdater
{
    protected function before()
    {
        $this->createSpaceMentionTable();
        $this->createNotificationToMeTable();
        $this->createNotificationToMeHistoryTable();
    }

    protected function middleAlterTables()
    {
        $this->alterTableTabGrnSpaceSpace();
        $this->deleteUnnecessaryIndexOfNotificationTable();
        $this->alterTableTabCbLogevent();
    }

    protected function middleUpdateData()
    {
        $this->deleteInvalidSpaceCategoryLocalRecord();
        $this->addLanguageZHTW();
        if (cb_is_forest()) {
            $this->updateLanguageStatus();
        }
        $this->addDiscussionAndTodoNameOfTW();
        $this->addApplicationNameWithTW();
    }

    protected function after()
    {
    }

    //GTM-3957
    private function alterTableTabGrnSpaceSpace()
    {
        $db = cb_get_app_db('space');
        $alter_table = new AlterTable($db, 'tab_grn_space_space');
        $alter_table->addColumn('col_end_is_datetime',
            'tinyint(1) DEFAULT NULL');
        $alter_table->addColumn('col_end_timestamp', 'int(11) DEFAULT NULL');
        $alter_table->execute();

        $this->log('Succeeded to add the col_end_is_datetime and col_end_timestamp columns on tab_grn_space_space.');
    }

    private function alterTableTabCbLogevent()
    {
        $db = cb_get_master_db();
        $db->query("ALTER TABLE tab_cb_logevent ENGINE=InnoDB;");
        $this->log("Succeeded to convert table tab_cb_logevent from MyISAM to InnoDB.");
    }

    /**
     * GRB-18711
     */
    private function deleteUnnecessaryIndexOfNotificationTable()
    {
        $notify_table = "tab_grn_notification_notify";
        $history_table = "tab_grn_notification_history";

        require_once("grn/notification.csp");
        $notify_db_list = grn_notification_get_connections();
        foreach ($notify_db_list as $db) {
            if (grn_check_table_merged()) {
                $this->deleteUnnecessaryIndex($db, $notify_table,
                    $history_table);
            } else {
                $user_tables = cb_get_user_tables();
                for ($i = 0; $i < $user_tables; $i++) {
                    $this->deleteUnnecessaryIndex($db,
                        $notify_table . CB_PERSISTENT_NAMESEPARATOR
                        . CB_DATABASE_USER_TABLE_PREFIX . $i,
                        $history_table . CB_PERSISTENT_NAMESEPARATOR
                        . CB_DATABASE_USER_TABLE_PREFIX . $i);
                }

            }
        }
    }

    /**
     * @param   \CB_DatabaseConnection $db            : Database connection instance
     * @param   string                 $notify_table  : notification table name
     * @param   string                 $history_table : history notification table name
     */
    private function deleteUnnecessaryIndex($db, $notify_table, $history_table)
    {
        // tab_grn_notification_notify
        $alter_table_notify = new AlterTable($db, $notify_table);

        // delete index of tab_grn_notification_notify
        $alter_table_notify->dropIndex("idx_user_module_sender_ts",
            ["col_user", "col_module_id", "col_sender_name", "col_timestamp"]);
        $alter_table_notify->dropIndex("idx_user_module_ts_n_status",
            [
                "col_user",
                "col_module_id",
                "col_timestamp",
                "_id",
                "col_status"
            ]);
        $alter_table_notify->dropIndex("idx_user_sender_ts",
            ["col_user", "col_sender_name", "col_timestamp"]);
        $alter_table_notify->dropIndex("idx_unique_id", ["col_unique_id"]);

        $alter_table_notify->execute();
        $this->log("Succeeded to delete index of the $notify_table table.");

        // tab_grn_notification_history
        $alter_table_history = new AlterTable($db, $history_table);

        // delete index of tab_grn_notification_history
        $alter_table_history->dropIndex("idx_spaceid", ["col_space_id"]);
        $alter_table_history->dropIndex("idx_user_module_sender_ts",
            ["col_user", "col_module_id", "col_sender_name", "col_timestamp"]);
        $alter_table_history->dropIndex("idx_user_module_status_ts",
            ["col_user", "col_module_id", "col_status", "col_timestamp"]);
        $alter_table_history->dropIndex("idx_user_sender_ts",
            ["col_user", "col_sender_name", "col_timestamp"]);
        $alter_table_history->dropIndex("idx_user_status_ts",
            ["col_user", "col_status", "col_timestamp"]);
        $alter_table_history->dropIndex("idx_user_ts_oid",
            ["col_user", "col_timestamp", "_id"]);
        $alter_table_history->dropIndex("idx_unique_id", ["col_unique_id"]);

        $alter_table_history->execute();
        $this->log("Succeeded to delete index of the $history_table table.");
    }

    //GRB-19889
    private function deleteInvalidSpaceCategoryLocalRecord()
    {
        $db = cb_get_app_db('space');
        $query
            = <<<SQL
DELETE
  space_category_local
FROM
  tab_grn_space_category_local AS space_category_local
  LEFT JOIN tab_cb_language_status AS language_status
    ON space_category_local.col_language = language_status._id
WHERE language_status._id IS NULL;
SQL;
        $db->query($query);
        $this->log("Succeeded to delete invalid tab_grn_space_category_local data.");
    }

    //GTM-4145
    private function addLanguageZHTW()
    {
        $db = cb_get_master_db();
        if (cb_is_forest()) {
            $db->query("INSERT INTO `tab_cb_language_status` (`col_language`, `col_status`) VALUES ('zh-tw',1);");
        } else {
            $db->query("INSERT INTO `tab_cb_language_status` (`col_language`, `col_status`) VALUES ('zh-tw',0);");
        }

        $this->log("Succeeded to insert tab_cb_language_status to add a new language zh-tw.");
    }

    private function addDiscussionAndTodoNameOfTW()
    {
        $db = cb_get_app_db('space');

        $query
            = <<<SQL
INSERT INTO
    tab_grn_space_application_local 
SELECT
    tab_grn_space_application._id, tab_cb_language_status._id, '討論區'
FROM
    tab_cb_language_status,
    tab_grn_space_application
WHERE
    tab_cb_language_status.col_language = 'zh-tw'
    AND
    tab_grn_space_application.col_application_code = 'jp.co.cybozu.garoon350.discussion';
SQL;
        $db->query($query);
        $this->log("Succeeded to insert tab_grn_space_application_local for discussion name of TW.");

        $query
            = <<<SQL
INSERT INTO
    tab_grn_space_application_local 
SELECT
    tab_grn_space_application._id, tab_cb_language_status._id, '共用ToDo'
FROM
    tab_cb_language_status,
    tab_grn_space_application
WHERE
    tab_cb_language_status.col_language = 'zh-tw'
    AND
    tab_grn_space_application.col_application_code = 'jp.co.cybozu.garoon350.todo';
SQL;
        $db->query($query);
        $this->log("Succeeded to insert tab_grn_space_application_local for todo name of TW.");
    }

    /**
     * This method changes the status in the case the old version have status is 0
     * It using to fix can't access the index garoon page which has the what's new portlet after upgrading
     */
    private function updateLanguageStatus()
    {
        $db = cb_get_master_db();

        $query
            = <<<SQL
UPDATE
 tab_cb_language_status 
SET
 col_status='1'
WHERE
 col_status='0';
SQL;
        $db->query($query);
        $this->log("Succeeded to update the col_status columns of the tab_cb_language_status table.");
    }

    // GTM-4155
    private function addApplicationNameWithTW()
    {
        $db = cb_get_master_db();

        $query
            = <<<SQL
INSERT INTO `tab_grn_applicationname` (`col_application`, `col_locale`, `col_name`) VALUES
('portal','zh-tw','首頁'),
('link','zh-tw','書籤'),
('schedule','zh-tw','排程'),
('message','zh-tw','站內信'),
('bulletin','zh-tw','公告欄'),
('cabinet','zh-tw','文件管理'),
('memo','zh-tw','備忘錄'),
('phonemessage','zh-tw','電話記錄'),
('timecard','zh-tw','考勤卡'),
('todo','zh-tw','ToDo列表'),
('address','zh-tw','通訊錄'),
('mail','zh-tw','E-mail'),
('workflow','zh-tw','Workflow'),
('report','zh-tw','多功能報告'),
('cbwebsrv','zh-tw','網路整合服務'),
('rss','zh-tw','RSS閱讀器'),
('presence','zh-tw','在崗確認'),
('star','zh-tw','我的最愛'),
('notification','zh-tw','通知列表'),
('cellular','zh-tw','手機版'),
('dezielink','zh-tw','Dezie整合'),
('space','zh-tw','社群'),
('favour','zh-tw','頂');
SQL;

        $db->query($query);
        $this->log("Succeeded to insert tab_grn_applicationname for adding application name with TW.");
    }

    private function createNotificationToMeTable()
    {
        $sql
            = <<<SQL
CREATE TABLE IF NOT EXISTS `tab_grn_notification_to_me` (
  `_id` bigint(20) NOT NULL AUTO_INCREMENT,
  `col_abstract` char(128) DEFAULT NULL,
  `col_abstract_b` char(128) DEFAULT NULL,
  `col_abstract_f` char(128) DEFAULT NULL,
  `col_abstract_icon` char(128) DEFAULT NULL,
  `col_abstract_url` char(255) DEFAULT NULL,
  `col_action_id` char(64) NOT NULL,
  `col_attached` int(11) DEFAULT NULL,
  `col_auto_confirm` int(11) DEFAULT NULL,
  `col_confirm_required` int(11) DEFAULT NULL,
  `col_group_name` char(128) DEFAULT NULL,
  `col_module_id` char(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `col_notify_relation` bigint(20) DEFAULT NULL,
  `col_org_data` text,
  `col_popup` int(11) DEFAULT NULL,
  `col_read` int(11) DEFAULT NULL,
  `col_sender_id` char(128) DEFAULT NULL,
  `col_sender_name` char(128) DEFAULT NULL,
  `col_sender_url` char(255) DEFAULT NULL,
  `col_status` char(128) DEFAULT NULL,
  `col_subject` char(128) DEFAULT NULL,
  `col_subject_b` char(128) DEFAULT NULL,
  `col_subject_f` char(128) DEFAULT NULL,
  `col_subject_icon` char(128) DEFAULT NULL,
  `col_subject_url` char(255) DEFAULT NULL,
  `col_timestamp` int(11) NOT NULL,
  `col_unique_id` char(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `col_user` bigint(20) NOT NULL,
  `col_sub_module_id` char(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `col_space_id` int(11) DEFAULT NULL,
  `col_space_name` varchar(255) DEFAULT NULL,
  `col_event_start_ts` int(11) DEFAULT NULL,
  PRIMARY KEY (`_id`),
  UNIQUE KEY `idx_unique_id_module_user` (`col_unique_id`,`col_module_id`,`col_sub_module_id`,`col_user`),
  UNIQUE KEY `idx_user_module_unique_id` (`col_user`,`col_module_id`,`col_sub_module_id`,`col_unique_id`),
  KEY `idx_spaceid` (`col_space_id`),
  KEY `idx_ts` (`col_timestamp`),
  KEY `idx_user_module_read_ts_n` (`col_user`,`col_module_id`,`col_read`,`col_timestamp`,`_id`),
  KEY `idx_user_module_ts` (`col_user`,`col_module_id`,`col_timestamp`),
  KEY `idx_user_module_status_ts_n` (`col_user`,`col_module_id`,`col_timestamp`,`_id`,`col_status`),
  KEY `idx_user_read_ts_n` (`col_user`,`col_read`,`col_timestamp`,`_id`),
  KEY `idx_user_ts_n` (`col_user`,`col_timestamp`,`_id`),
  KEY `idx_user_status_ts` (`col_user`,`col_status`,`col_timestamp`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;
SQL;

        $this->executeCreateNotificationToMe($sql,
            'tab_grn_notification_to_me');
    }

    private function createSpaceMentionTable()
    {
        $db = cb_get_app_db('space');
        $sql
            = <<<SQL
CREATE TABLE IF NOT EXISTS `tab_grn_space_mention` (
  `_id` bigint(20) NOT NULL AUTO_INCREMENT,
  `col_comment` bigint(20) NOT NULL,
  `col_user` bigint(20) DEFAULT NULL,
  `col_group` bigint(20) DEFAULT NULL,
  `col_role` bigint(20) DEFAULT NULL,
  `col_name` char(255) NOT NULL,
  `col_type` char(12) NOT NULL,
  PRIMARY KEY (`_id`),
  UNIQUE KEY `idx_space_mention_user_comment` (`col_user`,`col_comment`),
  UNIQUE KEY `idx_space_mention_group_comment` (`col_group`,`col_comment`),
  UNIQUE KEY `idx_space_mention_role_comment` (`col_role`,`col_comment`),
  KEY `cns_grn_space_mention_comment` (`col_comment`),
  CONSTRAINT `cns_grn_space_mention_comment` FOREIGN KEY (`col_comment`) REFERENCES `tab_grn_space_comment` (`_id`) ON DELETE CASCADE,
  CONSTRAINT `cns_grn_space_mention_user` FOREIGN KEY (`col_user`) REFERENCES `tab_cb_user` (`_id`) ON DELETE SET NULL,
  CONSTRAINT `cns_grn_space_mention_group` FOREIGN KEY (`col_group`) REFERENCES `tab_cb_group` (`_id`) ON DELETE SET NULL,
  CONSTRAINT `cns_grn_space_mention_role` FOREIGN KEY (`col_role`) REFERENCES `tab_cb_role` (`_id`) ON DELETE SET NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;
SQL;
        $db->query($sql);
        $this->log("Succeeded to create the tab_grn_space_mention table.");
    }

    private function createNotificationToMeHistoryTable()
    {
        $sql
            = <<<SQL
CREATE TABLE IF NOT EXISTS `tab_grn_notification_to_me_history` (
  `_id` bigint(20) NOT NULL AUTO_INCREMENT,
  `col_abstract` char(128) DEFAULT NULL,
  `col_abstract_b` char(128) DEFAULT NULL,
  `col_abstract_f` char(128) DEFAULT NULL,
  `col_abstract_icon` char(128) DEFAULT NULL,
  `col_abstract_url` char(255) DEFAULT NULL,
  `col_action_id` char(64) NOT NULL,
  `col_attached` int(11) DEFAULT NULL,
  `col_group_name` char(128) DEFAULT NULL,
  `col_module_id` char(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `col_org_data` text,
  `col_popup` int(11) DEFAULT NULL,
  `col_read` int(11) DEFAULT NULL,
  `col_sender_id` char(128) DEFAULT NULL,
  `col_sender_name` char(128) DEFAULT NULL,
  `col_sender_url` char(255) DEFAULT NULL,
  `col_status` char(128) DEFAULT NULL,
  `col_subject` char(128) DEFAULT NULL,
  `col_subject_b` char(128) DEFAULT NULL,
  `col_subject_f` char(128) DEFAULT NULL,
  `col_subject_icon` char(128) DEFAULT NULL,
  `col_subject_url` char(255) DEFAULT NULL,
  `col_timestamp` int(11) NOT NULL,
  `col_unique_id` char(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `col_user` bigint(20) NOT NULL,
  `col_sub_module_id` char(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `col_space_id` int(11) DEFAULT NULL,
  `col_space_name` varchar(255) DEFAULT NULL,
  `col_event_start_ts` int(11) DEFAULT NULL,
  PRIMARY KEY (`_id`),
  UNIQUE KEY `idx_unique_id_module_user` (`col_unique_id`,`col_module_id`,`col_sub_module_id`,`col_user`),
  UNIQUE KEY `idx_user_module_unique_id` (`col_user`,`col_module_id`,`col_sub_module_id`,`col_unique_id`),
  KEY `idx_ts` (`col_timestamp`),
  KEY `idx_user_module_ts` (`col_user`,`col_module_id`,`col_timestamp`),
  KEY `idx_user_ts` (`col_user`,`col_timestamp`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;
SQL;

        $this->executeCreateNotificationToMe($sql,
            'tab_grn_notification_to_me_history');
    }

    private function executeCreateNotificationToMe($sql, $table)
    {
        require_once("grn/notification.csp");
        $notification_connections = grn_notification_get_connections();

        foreach ($notification_connections as $db) {
            $db->query($sql);
            if (cb_is_onpremises_distributed_database()) {
                $distributor_db_convert = new \grn\fw\DistributorDBConvert();
                $distributor_db_convert->convertApplication($db, [$table]);
            }
        }

        $this->log("Succeeded to create the {$table} table.");
    }
}
