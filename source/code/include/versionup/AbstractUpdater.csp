<?php

namespace grn\versionup;

use grn\grn\TextLogger;

/**
 * The base class to implement verion up logic using SQL.
 *
 * Sub classes should be created for each versions of .com. (If any schema or data will be changed)
 * It will be used both of .com and on-premises archives.
 */
abstract class AbstractUpdater
{
    /** @var bool */
    private $calledFromDotComConverter = false;

    /**
     * @var TextLogger
     */
    private $textLogger;

    /**
     * AbstractUpdater constructor.
     */
    public function __construct()
    {
        if (cb_is_forest()) {
            $logFileName = "upgrade_to_" . $this->getVersion() . ".log";
            $this->textLogger
                = TextLogger::createInstanceForceUseLogFileName("upgrade_log",
                $logFileName);
            $this->textLogger->shouldNotCleanUp();
        }
    }

    /**
     * CREATE TABLE must be implemented in this method.
     */
    protected abstract function before();

    /**
     * Every DDLs except CREATE TABLE and DROP TABLE must be implemented in this method.
     * ref: http://dev.mysql.com/doc/refman/5.6/en/implicit-commit.html
     */
    protected abstract function middleAlterTables();

    /**
     * DML(INSERT, UPDATE DELETE) must be implemented in this method.
     */
    protected abstract function middleUpdateData();

    /**
     * DROP TABLE must be implemented in this method.
     */
    protected abstract function after();

    /**
     * @param string $from_version
     * @param string $to_version
     *
     * @return bool
     */
    public function shouldRunMiddle($from_version, $to_version)
    {
        return version_compare($from_version, $to_version) === -1;
    }

    public function runMiddle()
    {
        if (cb_is_forest()) {
            $profile = cb_get_system_profile('grn.common.system');
            $to_version = $this->getVersion();
            if ($profile->getAttribute('forest_schema_version',
                $from_version)
            ) {
                if ( ! $this->shouldRunMiddle($from_version, $to_version)) {
                    return;
                }
            }
            $this->runMiddleAlterTables();
            $this->runMiddleUpdateData();
            $profile->createAttribute('forest_schema_version', $to_version);
        } else {
            $this->runMiddleAlterTables();
            $this->runMiddleUpdateData();
        }
    }

    public function runMiddleAlterTables()
    {
        $this->log("Start runMiddleAlterTables().");
        $this->middleAlterTables();
        $this->log("End runMiddleAlterTables().");
    }

    public function runMiddleUpdateData()
    {
        $this->log("Start runMiddleUpdateData().");
        $this->middleUpdateData();
        $this->log("End runMiddleUpdateData().");
    }


    public function runBefore()
    {
        $this->log("Start runBefore().");
        $this->before();
        $this->log("End runBefore().");
    }

    public function runAfter()
    {
        $this->log("Start runAfter().");
        $this->after();
        $this->log("End runAfter().");
    }

    /**
     * @return string
     */
    public function getVersion()
    {
        // eg. $class_name = 'grn\versionup\v6_5_800\Updater'
        $class_name = get_class($this);
        $names = explode('\\', $class_name);
        assert('count( $names ) === 4');

        $version = $names[2];
        assert('strlen( $version ) !== 0');

        $version = substr($version, 1); // strip 'v'
        $version = str_replace('_', '.', $version);
        assert('\grn\grn\Validate::isVersionNumber( $version )');

        return $version;
    }

    /**
     * @param string $msg
     */
    protected function log($msg)
    {
        $outmsg = date("Ymd H:i:s");
        $outmsg .= ' [INFO] ';
        $outmsg .= $msg;
        if (cb_is_forest()) {
            $this->textLogger->log($outmsg);

            return;
        }

        $outmsg .= "\n";
        echo $outmsg;
        if (ob_get_level() > 0) {
            ob_flush();
        }
    }

    /**
     */
    public function setCalledFromDotComConverter()
    {
        $this->calledFromDotComConverter = true;
    }

    /**
     * @return bool
     */
    protected function isCalledFromDotComConverter()
    {
        return $this->calledFromDotComConverter;
    }
}
