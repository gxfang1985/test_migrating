<?php

namespace grn\versionup;

/**
 * This class execute ALTER TABLE with idempotency.
 */
class AlterTable
{
    /**
     * Stock alter specs to execute them later.
     *
     * @var string[]
     */
    private $alterSpecs = [];

    const TARGET_NAME_TYPE_COLUMN = 'column';
    const TARGET_NAME_TYPE_FOREIGN_KEY = 'foreign_key';

    /**
     * Store target names of alter specs to check restrictions.
     *
     * @var array
     */
    private $targetNames
        = [
            self::TARGET_NAME_TYPE_COLUMN      => [],
            self::TARGET_NAME_TYPE_FOREIGN_KEY => []
        ];

    /**
     * @var \CB_DatabaseConnection
     */
    private $db;

    /**
     * @var string
     */
    private $tableName;

    /**
     * @param \CB_DatabaseConnection $db
     * @param string                 $table_name
     */
    public function __construct(\CB_DatabaseConnection $db, $table_name)
    {
        $this->db = $db;
        $this->tableName = $table_name;
    }

    /**
     * Even ALTER TABLE supports executing multiple ALTER specs with the same name,
     * this class doesn't support it in some cases.
     *
     * e.g. ALTER TABLE DROP COLUMN col_name, ADD COLUMN col_name varchar(100);
     *
     * This method prevents to be specified it.
     *
     * @param string $type
     * @param string $name
     */
    private function checkRestriction($type, $name)
    {
        if (in_array($name, $this->targetNames[$type])) {
            throw new AlterTableRestrictionException();
        }
        $this->targetNames[$type][] = $name;
    }

    /**
     * @param  string $column_name
     * @param  string $definition
     */
    public function addColumn($column_name, $definition)
    {
        $this->checkRestriction(self::TARGET_NAME_TYPE_COLUMN, $column_name);

        if (InformationSchemaUtil::hasColumn($this->db, $this->tableName,
            $column_name)
        ) {
            return;
        }

        $this->alterSpecs[] = sprintf("ADD COLUMN %s %s", $column_name,
            $definition);
    }

    /**
     * @param string $column_name
     * @param string $definition
     *
     * @return AlterTable
     */
    public function modifyColumn($column_name, $definition)
    {
        $this->checkRestriction(self::TARGET_NAME_TYPE_COLUMN, $column_name);

        $this->alterSpecs[] = sprintf("MODIFY COLUMN %s %s", $column_name,
            $definition);
    }

    /**
     * @param string $column_name
     */
    public function dropColumn($column_name)
    {
        $this->checkRestriction(self::TARGET_NAME_TYPE_COLUMN, $column_name);

        if ( ! InformationSchemaUtil::hasColumn($this->db, $this->tableName,
            $column_name)
        ) {
            return;
        }

        $this->alterSpecs[] = sprintf("DROP COLUMN %s", $column_name);
    }


    /**
     * @param string   $index_name
     * @param string[] $columns
     */
    public function addIndex($index_name, array $columns)
    {
        if (InformationSchemaUtil::hasIndex($this->db, $this->tableName,
            $index_name, $columns, false)
        ) {
            return;
        }

        $this->alterSpecs[] = sprintf("ADD INDEX %s (%s)", $index_name,
            join(',', $columns));
    }

    /**
     * @param string   $index_name
     * @param string[] $columns
     */
    public function dropIndex($index_name, array $columns)
    {
        if ( ! InformationSchemaUtil::hasIndex($this->db, $this->tableName,
            $index_name, $columns, false)
        ) {
            return;
        }

        $this->alterSpecs[] = "DROP INDEX ${index_name}";
    }

    /**
     * @param string   $index_name
     * @param string[] $columns
     */
    public function addUniqueIndex($index_name, array $columns)
    {
        if (InformationSchemaUtil::hasIndex($this->db, $this->tableName,
            $index_name, $columns, true)
        ) {
            return;
        }

        $this->alterSpecs[] = sprintf("ADD UNIQUE INDEX %s (%s)", $index_name,
            join(',', $columns));
    }

    /**
     * @param string   $index_name
     * @param string[] $columns
     */
    public function dropUniqueIndex($index_name, array $columns)
    {
        if ( ! InformationSchemaUtil::hasIndex($this->db, $this->tableName,
            $index_name, $columns, true)
        ) {
            return;
        }

        $this->alterSpecs[] = "DROP INDEX ${index_name}";
    }

    /**
     * @param string $foreign_key_name
     * @param array  $columns
     * @param string $reference_table_name
     * @param array  $reference_columns
     * @param string $definition
     */
    public function addForeignKey(
        $foreign_key_name,
        array $columns,
        $reference_table_name,
        array $reference_columns,
        $definition = ""
    ) {
        $this->checkRestriction(self::TARGET_NAME_TYPE_FOREIGN_KEY,
            $foreign_key_name);

        if (InformationSchemaUtil::hasForeignKey($this->db, $this->tableName,
            $foreign_key_name)
        ) {
            return;
        }

        $this->alterSpecs[] = sprintf(
            "ADD CONSTRAINT ${foreign_key_name} FOREIGN KEY(%s) REFERENCES ${reference_table_name} (%s) ${definition}",
            join(',', $columns), join(',', $reference_columns)
        );
    }

    /**
     * @param string $foreign_key_name
     */
    public function dropForeignKey($foreign_key_name)
    {
        $this->checkRestriction(self::TARGET_NAME_TYPE_FOREIGN_KEY,
            $foreign_key_name);

        if ( ! InformationSchemaUtil::hasForeignKey($this->db, $this->tableName,
            $foreign_key_name)
        ) {
            return;
        }

        $this->alterSpecs[] = "DROP FOREIGN KEY ${foreign_key_name}";
    }

    /**
     * @param array $columns
     */
    public function addPrimaryKey(array $columns)
    {
        if (InformationSchemaUtil::hasPrimaryKey($this->db, $this->tableName,
            $columns)
        ) {
            return;
        }

        $this->alterSpecs[] = sprintf("ADD PRIMARY KEY(%s)",
            join(',', $columns));
    }

    /**
     * @param string[] $columns
     */
    public function dropPrimaryKey(array $columns)
    {
        if ( ! InformationSchemaUtil::hasPrimaryKey($this->db, $this->tableName,
            $columns)
        ) {
            return;
        }

        $this->alterSpecs[] = "DROP PRIMARY KEY";
    }

    /**
     * @return bool
     */
    public function execute()
    {
        if (empty($this->alterSpecs)) {
            return false;
        }

        $query = sprintf("ALTER TABLE %s %s", $this->tableName,
            join(',', $this->alterSpecs));
        $this->db->query($query);

        $this->alterSpecs = [];
        foreach ($this->targetNames as $key => $value) {
            $this->targetNames[$key] = [];
        }

        return true;
    }
}
