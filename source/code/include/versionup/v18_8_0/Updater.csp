<?php
declare(strict_types=1);

namespace grn\versionup\v18_8_0;

use grn\versionup\AbstractUpdater;
use grn\versionup\AlterTable;

class Updater extends AbstractUpdater
{
    protected function before()
    {
    }

    protected function middleAlterTables()
    {
        $this->deleteUnnecessaryIndexOfNotificationTable();
        if (cb_is_onpremises()) {
            $this->deleteUnusedColumnsNotification();
        }
    }

    protected function middleUpdateData()
    {
        $this->deleteSettingDisplayBlueBanner();
        $this->deleteStartMenuSettings();
        $this->deleteTrashDataSpaceAcl();
        $this->updateTimezoneYangon();
    }

    protected function after()
    {
        $this->dropStartMenuTables();
    }

    private function deleteSettingDisplayBlueBanner()
    {

        require_once( "fw/profile.csp" );
        $profile_connections = get_profile_get_connections();
        $user_tables = cb_get_user_tables();

        foreach( $profile_connections as $db )
        {
            for( $table_num = 0; $table_num < $user_tables; $table_num++ )
            {
                $db->query( "DELETE FROM tab_cb_profiledata___p" . $table_num
                            . " WHERE col_module = 'grn.common.ui' AND col_name ='known_theme_has_updated'" );
            }
        }

    }

    private function deleteStartMenuSettings()
    {
        require_once("fw/profile.csp");
        $profile_connections = get_profile_get_connections();
        $user_tables = cb_get_user_tables();

        foreach ($profile_connections as $db) {
            for ($table_num = 0; $table_num < $user_tables; $table_num++) {
                $db->query("DELETE FROM tab_cb_profiledata___p" . $table_num
                           . " WHERE col_module = 'grn.common.ui' AND col_name ='display_start_menu';");
            }
        }

        $master_db = cb_get_master_db();
        $master_db->query("DELETE FROM tab_cb_profiledata___system WHERE col_module = 'grn.common.ui' AND col_name ='display_start_menu';");
        $master_db->query("DELETE FROM tab_cb_profiledata___system WHERE col_module = 'grn.common.ui' AND col_name ='st_menu_initialized';");

        $this->log("Succeeded to delete the value of Start menu settings");
    }

    private function dropStartMenuTables()
    {
        $db = cb_get_master_db();
        $db->query("DROP TABLE IF EXISTS tab_grn_defaultstartmenu_local;");
        $this->log("Succeeded to drop tab_grn_defaultstartmenu_local table");

        $db->query("DROP TABLE IF EXISTS tab_grn_defaultstartmenu;");
        $this->log("Succeeded to drop tab_grn_defaultstartmenu table");
    }

    private function deleteUnnecessaryIndexOfNotificationTable()
    {
        $notify_table = "tab_grn_notification_notify";
        $notify_to_me_table = "tab_grn_notification_to_me";

        require_once("grn/notification.csp");
        $notify_db_list = grn_notification_get_connections();
        foreach ($notify_db_list as $db) {
            if (grn_check_table_merged()) {
                $this->deleteUnnecessaryIndex($db, $notify_table, $notify_to_me_table);
            } else {
                $user_tables = cb_get_user_tables();
                for ($i = 0; $i < $user_tables; $i++) {
                    $this->deleteUnnecessaryIndex($db,
                        $notify_table . CB_PERSISTENT_NAMESEPARATOR
                        . CB_DATABASE_USER_TABLE_PREFIX . $i,
                        $notify_to_me_table . CB_PERSISTENT_NAMESEPARATOR
                        . CB_DATABASE_USER_TABLE_PREFIX . $i);
                }
            }
        }
    }

    private function deleteUnnecessaryIndex($db, $notify_table, $notify_to_me_table)
    {
        // delete index of tab_grn_notification_notify
        $alter_table_notify = new AlterTable($db, $notify_table);

        $alter_table_notify->dropIndex("idx_user_module_status_ts_n",
            ["col_user", "col_module_id", "col_status", "col_timestamp", "_id"]);
        $alter_table_notify->dropIndex("idx_user_status_ts",
            ["col_user", "col_status", "col_timestamp"]);

        $alter_table_notify->execute();
        $this->log("Succeeded to delete index of the $notify_table table.");

        // delete index of tab_grn_notification_to_me
        $alter_table_notify_to_me = new AlterTable($db, $notify_to_me_table);

        $alter_table_notify_to_me->dropIndex("idx_user_module_status_ts_n",
            ["col_user", "col_module_id", "col_timestamp", "_id", "col_status"]);
        $alter_table_notify_to_me->dropIndex("idx_user_status_ts",
            ["col_user", "col_status", "col_timestamp"]);

        $alter_table_notify_to_me->execute();
        $this->log("Succeeded to delete index of the $notify_to_me_table table.");
    }

    private function deleteUnusedColumnsNotification()
    {
        $notify_table = "tab_grn_notification_notify";
        $notify_history_table = "tab_grn_notification_history";

        require_once("grn/notification.csp");
        $notify_db_list = grn_notification_get_connections();
        foreach ($notify_db_list as $db) {
            if (grn_check_table_merged()) {
                $this->deleteUnusedColumns($db, $notify_table, $notify_history_table);
            } else {
                $user_tables = cb_get_user_tables();
                for ($i = 0; $i < $user_tables; $i++) {
                    $this->deleteUnusedColumns($db,
                        $notify_table . CB_PERSISTENT_NAMESEPARATOR
                        . CB_DATABASE_USER_TABLE_PREFIX . $i,
                        $notify_history_table . CB_PERSISTENT_NAMESEPARATOR
                        . CB_DATABASE_USER_TABLE_PREFIX . $i);
                }
            }
        }
    }

    /**
     * @param \CB_DatabaseConnection $db
     * @param string                 $notify_table
     * @param string                 $notify_history_table
     */
    private function deleteUnusedColumns($db, $notify_table, $notify_history_table)
    {
        $alter_table_notify = new AlterTable($db, $notify_table);
        $alter_table_notify->dropColumn('col_notify_relation');
        $alter_table_notify->dropColumn('col_reserve_blob1');
        $alter_table_notify->dropColumn('col_reserve_blob2');
        $alter_table_notify->dropColumn('col_reserve_blob3');
        $alter_table_notify->dropColumn('col_reserve_int1');
        $alter_table_notify->dropColumn('col_reserve_int2');
        $alter_table_notify->dropColumn('col_reserve_int3');
        $alter_table_notify->dropColumn('col_reserve_text1');
        $alter_table_notify->dropColumn('col_reserve_text2');
        $alter_table_notify->dropColumn('col_reserve_text3');
        $alter_table_notify->execute();
        $this->log("Succeeded to delete columns of the $notify_table table.");

        $alter_table_notify_history = new AlterTable($db, $notify_history_table);
        $alter_table_notify_history->dropColumn('col_reserve_blob1');
        $alter_table_notify_history->dropColumn('col_reserve_blob2');
        $alter_table_notify_history->dropColumn('col_reserve_blob3');
        $alter_table_notify_history->dropColumn('col_reserve_int1');
        $alter_table_notify_history->dropColumn('col_reserve_int2');
        $alter_table_notify_history->dropColumn('col_reserve_int3');
        $alter_table_notify_history->dropColumn('col_reserve_text1');
        $alter_table_notify_history->dropColumn('col_reserve_text2');
        $alter_table_notify_history->dropColumn('col_reserve_text3');
        $alter_table_notify_history->execute();
        $this->log("Succeeded to delete columns of the $notify_history_table table.");
    }

    private function deleteTrashDataSpaceAcl()
    {
        $db = cb_get_app_db("space");

        // Delete trash data in tab_grn_space_acl_user
        $user_query
            = <<<SQL
DELETE FROM 
  tab_grn_space_acl_user 
WHERE 
  (col_acl, col_user) 
IN 
  (SELECT 
    acol_acl, acol_user 
   FROM 
    (SELECT 
      au.col_acl AS acol_acl, au.col_user AS acol_user 
     FROM 
      tab_grn_space_acl_user au 
     INNER JOIN tab_grn_space_space_acl sa ON au.col_acl = sa.col_acl 
     LEFT JOIN tab_grn_space_space_user su ON au.col_user= su.col_user AND su.col_space = sa.col_space AND su.col_user IS NOT NULL 
     WHERE su.col_user IS NULL)
  AS t);
SQL;
        $db->query($user_query);
        $affected_rows = $db->affected_rows();
        if ($affected_rows > 0) {
            $this->log("Succeeded to delete invalid data in tab_grn_space_acl_user table.");
        }

        // Delete trash data in tab_grn_space_acl_group
        $group_query
            = <<<SQL
DELETE FROM 
  tab_grn_space_acl_group 
WHERE 
  (col_acl, col_group) 
IN 
  (SELECT 
    acol_acl, acol_group 
   FROM 
    (SELECT 
      ag.col_acl AS acol_acl, ag.col_group AS acol_group 
     FROM 
      tab_grn_space_acl_group ag 
     INNER JOIN tab_grn_space_space_acl sa ON ag.col_acl = sa.col_acl 
     LEFT JOIN tab_grn_space_space_user su ON ag.col_group= su.col_group AND su.col_space = sa.col_space AND su.col_group IS NOT NULL 
     WHERE su.col_group IS NULL) 
  AS t);
SQL;
        $db->query($group_query);
        $affected_rows = $db->affected_rows();
        if ($affected_rows > 0) {
            $this->log("Succeeded to delete invalid data in tab_grn_space_acl_group table.");
        }

        // Delete trash data in tab_grn_space_acl_role
        $role_query
            = <<<SQL
DELETE FROM 
  tab_grn_space_acl_role 
WHERE 
  (col_acl, col_role) 
IN 
  (SELECT 
    acol_acl, acol_role 
   FROM 
    (SELECT 
      ar.col_acl AS acol_acl, ar.col_role AS acol_role 
     FROM 
      tab_grn_space_acl_role ar 
     INNER JOIN tab_grn_space_space_acl sa on ar.col_acl = sa.col_acl 
     LEFT JOIN tab_grn_space_space_user su ON ar.col_role= su.col_role and su.col_space = sa.col_space and su.col_role IS NOT NULL 
     WHERE su.col_role IS NULL and ar.col_role > 1) 
  AS t);
SQL;
        $db->query($role_query);
        $affected_rows = $db->affected_rows();
        if ($affected_rows > 0) {
            $this->log("Succeeded to delete invalid data in tab_grn_space_acl_role table.");
        }
    }

    private function updateTimezoneYangon()
    {
        $db = cb_get_master_db();
        $query = "UPDATE tab_cb_user SET col_timezone = 'Asia/Yangon' WHERE col_timezone = 'Asia/Rangoon';";
        $db->query($query);
        $query = "UPDATE tab_cb_profiledata___system SET col_value = 's:11:\"Asia/Yangon\";' WHERE col_module = 'fw.i18n.timezone' AND col_name = 'default_timezone' AND col_value = 's:12:\"Asia/Rangoon\";';";
        $db->query($query);

        $db = cb_get_app_db('schedule');
        $query = "UPDATE tab_grn_schedule_eventdate SET col_timezone = 'Asia/Yangon' WHERE col_timezone = 'Asia/Rangoon';";
        $db->query($query);
        $query = "UPDATE tab_grn_schedule_eventdate SET col_end_timezone = 'Asia/Yangon' WHERE col_end_timezone = 'Asia/Rangoon';";
        $db->query($query);
        $query = "UPDATE tab_grn_schedule_eventdatetime SET col_timezone = 'Asia/Yangon' WHERE col_timezone = 'Asia/Rangoon';";
        $db->query($query);
        $query = "UPDATE tab_grn_schedule_eventdatetime SET col_end_timezone = 'Asia/Yangon' WHERE col_end_timezone = 'Asia/Rangoon';";
        $db->query($query);
        $query = "UPDATE tab_grn_schedule_netmeeting_cooperation SET col_timezone = 'Asia/Yangon' WHERE col_timezone = 'Asia/Rangoon';";
        $db->query($query);
        $query = "UPDATE tab_grn_schedule_netmeeting_cooperation SET col_end_timezone = 'Asia/Yangon' WHERE col_end_timezone = 'Asia/Rangoon';";
        $db->query($query);
        $query = "UPDATE tab_grn_schedule_netmeeting_invitation SET col_user_timezone = 'Asia/Yangon' WHERE col_user_timezone = 'Asia/Rangoon';";
        $db->query($query);
        $query = "UPDATE tab_grn_schedule_repeatcondition SET col_timezone = 'Asia/Yangon' WHERE col_timezone = 'Asia/Rangoon';";
        $db->query($query);
        $query = "UPDATE tab_grn_schedule_repeatexcept SET col_timezone = 'Asia/Yangon' WHERE col_timezone = 'Asia/Rangoon';";
        $db->query($query);

        $db = cb_get_app_db('space');
        $query = "UPDATE tab_grn_space_todo SET col_timezone = 'Asia/Yangon' WHERE col_timezone = 'Asia/Rangoon';";
        $db->query($query);

        $db = cb_get_app_db('timecard');
        $query = "UPDATE tab_grn_timecard_record SET col_timezone = 'Asia/Yangon' WHERE col_timezone = 'Asia/Rangoon';";
        $db->query($query);

        $db = cb_get_app_db('workflow');
        $query = "UPDATE tab_grn_workflow_auto_schedule SET col_schedule_timezone = 'Asia/Yangon' WHERE col_schedule_timezone = 'Asia/Rangoon';";
        $db->query($query);

        $this->log("Succeeded to update the data of timezone Asia/Yangon.");
    }
}
