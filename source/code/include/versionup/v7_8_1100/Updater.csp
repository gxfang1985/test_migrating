<?php

namespace grn\versionup\v7_8_1100;

use grn\versionup\AbstractUpdater;
use grn\versionup\AlterTable;

class Updater extends AbstractUpdater
{
    protected function before()
    {
        $this->createScheduleCustomizationTables();
        $this->createCustomizationProxySettingTable();
    }

    protected function middleAlterTables()
    {
        $this->alterTableCybozuWebService();

        if ( ! cb_is_forest()) {
            $this->alterTableTabGrnUserinfo();
        }

        $this->modifyBulletinReadstatusTable();
    }

    protected function middleUpdateData()
    {
        $this->deleteOldPortletDataOfCybozuWebService();
        $this->updateOldPortletSettingOfCybozuWebService();
        $this->updateOldProfileSettingOfCybozuWebService();
        $this->deleteOldDataOfCybozuWebService();
        $this->deleteBundleUploadSetting();

        $this->moveReconvertBulletinAckRecipient();
        $this->removeOldAcknowledgement();
    }

    protected function after()
    {
    }

    /**
     * tab_grn_userinfo's alter table query method
     */
    private function alterTableTabGrnUserinfo()
    {
        $db = cb_get_app_db('master');
        $alter_table = new AlterTable($db, 'tab_grn_userinfo');

        $alter_table->dropColumn('col_attendee');
        $alter_table->dropColumn('col_attendee_mtime');
        $alter_table->execute();

        $this->log("Succeeded to alter the tab_grn_userinfo table.");
    }

    private function createScheduleCustomizationTables()
    {
        $db = cb_get_app_db('schedule');
        $sql
            = <<<SQL
CREATE TABLE IF NOT EXISTS `tab_grn_schedule_customization_filebody` (
    `_id` bigint(20) NOT NULL AUTO_INCREMENT,
    `col_blob` char(49) CHARACTER SET ascii DEFAULT NULL,
    `col_charset` char(100) DEFAULT NULL,
    `col_hash` char(40) CHARACTER SET ascii DEFAULT NULL,
    `col_mime` char(100) NOT NULL,
    `col_name` char(255) NOT NULL,
    `col_timestamp` int(11) NOT NULL,
    `col_size` int(11) NOT NULL,
    PRIMARY KEY (`_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci ROW_FORMAT=DYNAMIC;
SQL;
        $db->query($sql);

        $this->log("Succeeded to create the tab_grn_schedule_customization_filebody table.");

        $sql
            = <<<SQL
CREATE TABLE IF NOT EXISTS `tab_grn_schedule_customization_resource` (
    `_id` bigint(20) NOT NULL AUTO_INCREMENT,
    `col_target` varchar(100),
    `col_url` varchar(512) DEFAULT NULL,
    `col_file` bigint(20) DEFAULT NULL,
    `col_type` varchar(100) NOT NULL,
    PRIMARY KEY (`_id`),
    KEY `cni_file` (`col_file`),
    KEY `idx_target` (col_target),
    CONSTRAINT `cns_grn_schedule_customization_resource_file` FOREIGN KEY (`col_file`) REFERENCES `tab_grn_schedule_customization_filebody` (`_id`) ON DELETE SET NULL
) ENGINE=INNODB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci ROW_FORMAT=DYNAMIC;        
SQL;

        $db->query($sql);

        $this->log("Succeeded to create the tab_Grn_schedule_customization_resource table.");

        $sql
            = <<<SQL
CREATE TABLE IF NOT EXISTS `tab_grn_schedule_customization_group` (
    `_id` bigint(20) NOT NULL AUTO_INCREMENT,
    `col_name` varchar(100),
    `col_is_active` tinyint(1) NOT NULL,
    `col_order` int(11) NOT NULL DEFAULT '2147483647',
    `col_creator` bigint(20) DEFAULT NULL,
    `col_creator_foreign_key` char(255) DEFAULT NULL,
    `col_creator_name` char(100) DEFAULT NULL,
    `col_ctime` int(11) DEFAULT NULL,
    `col_modifier` bigint(20) DEFAULT NULL,
    `col_modifier_foreign_key` char(255) DEFAULT NULL,
    `col_modifier_name` char(100) DEFAULT NULL,
    `col_mtime` int(11) DEFAULT NULL,
    PRIMARY KEY (`_id`),
    KEY `cni_creator` (`col_creator`),
    KEY `cni_modifier` (`col_modifier`),
    CONSTRAINT `cns_grn_schedule_customization_group_creator` FOREIGN KEY (`col_creator`) REFERENCES `tab_cb_user` (`_id`) ON DELETE SET NULL,
    CONSTRAINT `cns_grn_schedule_customization_group_modifier` FOREIGN KEY (`col_modifier`) REFERENCES `tab_cb_user` (`_id`) ON DELETE SET NULL
) ENGINE=INNODB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci ROW_FORMAT=DYNAMIC;
SQL;

        $db->query($sql);

        $this->log("Succeeded to create the tab_grn_schedule_customization_group table.");

        $sql
            = <<<SQL
CREATE TABLE IF NOT EXISTS `tab_grn_schedule_customization_target` (
    `_id` bigint(20) NOT NULL AUTO_INCREMENT,
    `col_customization_group` bigint(20) NOT NULL,
    `col_dynamic_role` char(100),
    `col_static_role` bigint(20),
    `col_group` bigint(20),
    `col_user` bigint(20),
    PRIMARY KEY (`_id`),
    KEY `cni_customization_group` (`col_customization_group`),
    UNIQUE KEY `idx_static_role` (`col_static_role`, `col_customization_group`),
    UNIQUE KEY `idx_group` (`col_group`, `col_customization_group`),
    UNIQUE KEY `idx_user` (`col_user`, `col_customization_group`),
    CONSTRAINT `cns_grn_schedule_customization_target_customization_group` FOREIGN KEY (`col_customization_group`) REFERENCES `tab_grn_schedule_customization_group` (`_id`) ON DELETE CASCADE,
    CONSTRAINT `cns_grn_schedule_customization_target_static_role` FOREIGN KEY (`col_static_role`) REFERENCES `tab_cb_role` (`_id`) ON DELETE CASCADE,
    CONSTRAINT `cns_grn_schedule_customization_target_group` FOREIGN KEY (`col_group`) REFERENCES `tab_cb_group` (`_id`) ON DELETE CASCADE,
    CONSTRAINT `cns_grn_schedule_customization_target_user` FOREIGN KEY (`col_user`) REFERENCES `tab_cb_user` (`_id`) ON DELETE CASCADE
)ENGINE=INNODB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci ROW_FORMAT=DYNAMIC;
SQL;
        $db->query($sql);

        $this->log("Succeeded to create the tab_grn_schedule_customization_target table.");
    }

    private function deleteOldPortletDataOfCybozuWebService()
    {
        $db = cb_get_master_db();
        $query
            = <<<SQL
DELETE FROM `tab_grn_portal_portlet` 
WHERE col_type IN ('grn.cbwebsrv.tool_address', 'grn.cbwebsrv.tool_map', 'grn.cbwebsrv.tool_research', 'grn.cbwebsrv.tool_route');
SQL;
        $db->query($query);
        $this->log("Succeeded to alter the tab_grn_portal_portlet table.");
    }

    /**
     * update portlet setting
     */
    private function updateOldPortletSettingOfCybozuWebService()
    {
        $db = cb_get_master_db();
        $table = 'tab_grn_portal_portletlayout';
        $condition
            = 'col_portlet IN ( SELECT _id FROM tab_grn_portal_portlet WHERE col_type IN ("grn.portal.calendar", "grn.cbwebsrv.weather") )';
        $this->updateWeatherLocationSettings($db, $table, 'col_settings',
            $condition, 'locations',
            'weather_location_list');
    }

    /**
     * update profile
     */
    private function updateOldProfileSettingOfCybozuWebService()
    {
        $user_tables = cb_get_user_tables();
        $profile_connections = get_profile_get_connections();
        $table_prefix = 'tab_cb_profiledata___p';
        $condition = 'col_name="weather"';
        foreach ($profile_connections as $db) {
            for ($table_part = 0; $table_part < $user_tables; $table_part++) {
                $table = $table_prefix . $table_part;
                $this->updateWeatherLocationSettings($db, $table, 'col_value',
                    $condition, 'location_list',
                    'location_list');
            }
        }
    }

    /**
     * GTM-3426 - Convert data (Weather location setting)
     *
     * @param        $db               \CB_DatabaseConnection: Database connection instance
     * @param string $table            : The table name want to update
     * @param string $column           : the column want to select in the table
     * @param string $old_location_key : The key will be replaced by $new_location_key
     * @param string $new_location_key : The key will replace $old_location_key
     * @param string $condition        : Data in the table will get by this condition
     */
    private function updateWeatherLocationSettings(
        $db,
        $table,
        $column,
        $condition,
        $old_location_key,
        $new_location_key
    ) {
        $query = sprintf("SELECT _id, %s FROM %s WHERE %s ",
            $column, $table, $condition);
        $result = $db->query($query);
        $mappings = $this->getLocationMapping();
        $multiple_update_sql = sprintf("UPDATE %s SET %s = CASE", $table,
            $column);
        $arr_ids = [];
        while ($row = $db->fetch_assoc($result)) {
            $arr_settings = [];
            $id = $row['_id'];
            $str_settings = $row[$column];
            if (is_string($str_settings)) {
                $arr_settings = cb_unserialize($str_settings);
            }
            if ( ! is_array($arr_settings) || empty($arr_settings)) {
                continue;
            }
            unset($arr_settings['prob_of_prec']);
            unset($arr_settings['max_temp']);
            unset($arr_settings['min_temp']);
            if (isset($arr_settings[$old_location_key])) // convert data & change the key
            {
                $locations = $arr_settings[$old_location_key];
                unset($arr_settings[$old_location_key]); // unset old key
                $new_locations = [];
                foreach ($locations as $location) {
                    if (isset($mappings[$location])) {
                        $new_locations[] = $mappings[$location];
                    }
                }
                $arr_settings[$new_location_key] = $new_locations;
            }
            if (isset($arr_settings['weather'])) // Only convert data and doesn't change key
            {
                foreach ($arr_settings['weather'] as $key => $location_list) {
                    foreach (
                        $arr_settings['weather'][$key] as $location_key =>
                        $location
                    ) {
                        if (isset($mappings[$location])) {
                            $arr_settings['weather'][$key][$location_key]
                                = $mappings[$location];
                        }
                    }
                }
            }
            $data = serialize($arr_settings);
            $multiple_update_sql .= cb_queryf($db, " WHEN _id = '@S' THEN '@S'",
                $id, $data);
            $arr_ids[] = $id;
        }
        if ($arr_ids) {
            $multiple_update_sql_condition = cb_queryf($db,
                "END WHERE _id IN (@A)", $arr_ids);
            $query
                = "{$multiple_update_sql} {$multiple_update_sql_condition}";
            $db->query($query);
        }
        $this->log("Succeeded to update weather location settings in the "
                   . $table . " table.");
    }

    private function createCustomizationProxySettingTable()
    {
        $query
            = <<<SQL
CREATE TABLE IF NOT EXISTS `tab_grn_customization_proxy_setting` (
  `_id` bigint(20) NOT NULL AUTO_INCREMENT,
  `col_code` varchar(100) COLLATE utf8mb4_bin NOT NULL,
  `col_method` varchar(100) NOT NULL,
  `col_url` text NOT NULL,
  `col_params` longtext,
  `col_headers` longtext,
  `col_body` longtext,
  `col_active` tinyint(1) NOT NULL,
  `col_creator` bigint(20) DEFAULT NULL,
  `col_creator_name` char(100) DEFAULT NULL,
  `col_create_timestamp` int(11) DEFAULT NULL,
  `col_modifier` bigint(20) DEFAULT NULL,
  `col_modifier_name` char(100) DEFAULT NULL,
  `col_modify_timestamp` int(11) DEFAULT NULL,
  PRIMARY KEY (`_id`),
  UNIQUE KEY `idx_code` (`col_code`),
  CONSTRAINT `cns_grn_customization_proxy_setting_creator` FOREIGN KEY (`col_creator`) REFERENCES `tab_cb_user` (`_id`) ON DELETE SET NULL,
  CONSTRAINT `cns_grn_customization_proxy_setting_modifier` FOREIGN KEY (`col_modifier`) REFERENCES `tab_cb_user` (`_id`) ON DELETE SET NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci ROW_FORMAT=DYNAMIC;
SQL;

        $db = cb_get_master_db();
        $db->query($query);

        $this->log('Succeeded to create the tab_grn_customization_proxy_setting table.');
    }

    private function alterTableCybozuWebService()
    {
        $db = cb_get_master_db();
        $alter_table = new AlterTable($db, 'tab_grn_cbwebsrv_weather');

        if (cb_is_forest()) {
            $alter_table->addColumn('col_weather_code',
                'CHAR(100) DEFAULT NULL');
        } else {
            $alter_table->dropColumn('col_image');
            $alter_table->dropColumn('col_max_temp');
            $alter_table->dropColumn('col_min_temp');
            $alter_table->dropColumn('col_prob_of_prec');
            $alter_table->addColumn('col_weather_code',
                'CHAR(100) DEFAULT NULL');
        }

        $alter_table->execute();
        $this->log("Succeeded to alter the tab_grn_cbwebsrv_weather table.");
    }

    private function deleteOldDataOfCybozuWebService()
    {
        require_once('cbwebsrv/weather.csp');
        $weather_service = \GRN_CBWebSrv_WeatherService::getInstance();
        $weather_service->deleteEventData();
    }

    /**
     * GTM-3397
     * Delete the setting data of bundle upload
     */
    private function deleteBundleUploadSetting()
    {
        $db = cb_get_master_db();
        $db->query("DELETE FROM tab_cb_profiledata___system WHERE col_module = 'grn.common.file' and col_name = 'use_bundle_upload'");
        $this->log("Succeeded to delete bundle upload setting");
    }

    private function getLocationMapping()
    {
        return [
            "wn000101" => "1-214",
            "wn000102" => "1-211",
            "wn000105" => "1-204",
            "wn000110" => "1-205",
            "wn000112" => "1-101",
            "wn000115" => "1-202",
            "wn000201" => "2-201",
            "wn000301" => "5-201",
            "wn000401" => "3-201",
            "wn000501" => "6-201",
            "wn000601" => "4-101",
            "wn000701" => "7-201",
            "wn000801" => "15-103",
            "wn000901" => "16-201",
            "wn001001" => "17-201",
            "wn001101" => "18-201",
            "wn001201" => "9-201",
            "wn001301" => "10-201",
            "wn001401" => "11-202",
            "wn001501" => "8-201",
            "wn001601" => "12-101",
            "wn001701" => "13-104",
            "wn001703" => "13-401",
            "wn001801" => "14-103",
            "wn001901" => "20-201",
            "wn002001" => "19-201",
            "wn002101" => "23-106",
            "wn002201" => "22-101",
            "wn002301" => "21-201",
            "wn002401" => "24-201",
            "wn002501" => "27-128",
            "wn002601" => "26-104",
            "wn002701" => "25-202",
            "wn002801" => "28-110",
            "wn002901" => "29-201",
            "wn003001" => "30-201",
            "wn003101" => "34-101",
            "wn003201" => "33-101",
            "wn003301" => "31-201",
            "wn003401" => "32-201",
            "wn003502" => "35-203",
            "wn003601" => "37-201",
            "wn003701" => "38-201",
            "wn003801" => "39-201",
            "wn003901" => "36-201",
            "wn004001" => "40-132",
            "wn004101" => "41-201",
            "wn004201" => "42-201",
            "wn004301" => "44-201",
            "wn004401" => "43-101",
            "wn004501" => "45-201",
            "wn004601" => "46-201",
            "wn004603" => "46-222",
            "wn004701" => "47-201",
            "wn004704" => "47-357",
            "wn004705" => "47-214",
            "wn004706" => "47-207"
        ];
    }

    /**
     * GRB-17806
     */
    private function modifyBulletinReadstatusTable()
    {
        $db = cb_get_app_db('bulletin');
        $alter_table = new AlterTable($db, 'tab_grn_bulletin_readstatus');

        if ( ! cb_is_forest()) {
            $alter_table->dropColumn("col_reserve_blob1");
            $alter_table->dropColumn("col_reserve_blob2");
            $alter_table->dropColumn("col_reserve_blob3");
            $alter_table->dropColumn("col_reserve_int1");
            $alter_table->dropColumn("col_reserve_int2");
            $alter_table->dropColumn("col_reserve_int3");
            $alter_table->dropColumn("col_reserve_text1");
            $alter_table->dropColumn("col_reserve_text2");
            $alter_table->dropColumn("col_reserve_text3");
        }

        $alter_table->addColumn("col_acknowledgement", "int(11) DEFAULT NULL");
        $alter_table->dropIndex("cni_user", ["col_user"]);

        $alter_table->execute();

        $this->log("Succeeded to modify the tab_grn_bulletin_readstatus table.");
    }

    /**
     * GRB-17806
     */
    private function moveReconvertBulletinAckRecipient()
    {
        $has_data = true;
        $start_article_id = 1;

        /* @var \CB_DatabaseConnection $db */
        $db = cb_get_app_db('bulletin');

        require_once('bulletin/BulletinFacade.csp');
        $dao = new \BulletinFacade();

        $db->query("SET FOREIGN_KEY_CHECKS = 0;");
        $db->query("SET UNIQUE_CHECKS = 0;");

        $query = "SELECT _id FROM tab_cb_user;";
        $result = $db->query($query);
        $user_ids_exists = [];
        while ($row = $db->fetch_assoc($result)) {
            $user_ids_exists[] = $row['_id'];
        }
        $db->free_result($result);

        do {
            $query = "SELECT _id, col_reserve_blob1, col_reserve_blob2 "
                     . " FROM tab_grn_bulletin_articleentity"
                     . " WHERE col_reserve_int1=1 AND col_reserve_blob1 IS NOT NULL AND _id > "
                     . $start_article_id
                     . " ORDER BY _id ASC";
            $query = $db->select_format($query, 0, 2,
                CB_DATABASE_NO_LOCK);
            $acknowledgement_article = $db->query($query);
            $count = $db->num_rows($acknowledgement_article);

            if ($count <= 1) {
                $has_data = false;
            }

            $row = $db->fetch_assoc($acknowledgement_article);
            $db->free_result($acknowledgement_article);

            $article_id = $row['_id'];
            $start_article_id = $article_id;

            $original_ack_user_ids = array_merge(
                $this->bin_arr_ushort($row['col_reserve_blob1']),
                $this->bin_arr_ushort($row['col_reserve_blob2'])
            );

            $acknowledgement_user_ids = array_intersect($original_ack_user_ids,
                $user_ids_exists);
            if (is_array($acknowledgement_user_ids)
                && count($acknowledgement_user_ids) > 0
            ) {
                $query
                    = "SELECT col_user FROM tab_grn_bulletin_readstatus WHERE col_article='"
                      . $db->escape($article_id)
                      . "' AND col_user IN ("
                      . $db->escape(implode($acknowledgement_user_ids,
                        ","))
                      . ");";
                $added_result = $db->query($query);
                $exist_acknowledgement_user_ids = [];
                while ($row = $db->fetch_assoc($added_result)) {
                    $exist_acknowledgement_user_ids[] = $row['col_user'];
                }
                $db->free_result($added_result);

                //update exist records col_acknowledgement to 1
                if (count($exist_acknowledgement_user_ids) > 0) {
                    $query
                        = "UPDATE tab_grn_bulletin_readstatus SET col_acknowledgement = 1 WHERE col_article='"
                          . $db->escape($article_id)
                          . "' AND col_user in ("
                          . $db->escape(implode($exist_acknowledgement_user_ids,
                            ","))
                          . ");";
                }
                $db->query($query);

                $acknowledgement_user_ids
                    = array_diff($acknowledgement_user_ids,
                    $exist_acknowledgement_user_ids);

                if (count($acknowledgement_user_ids) > 0) {
                    $dao->insertAcknowledgement($article_id,
                        $acknowledgement_user_ids);
                }
            } else {
                continue;
            }
        } while ($has_data);

        $db->query("SET FOREIGN_KEY_CHECKS = 1;");
        $db->query("SET UNIQUE_CHECKS = 1;");

        $this->log("Succeeded to move and convert the data of bulletin acknowledgement.");
    }

    /**
     * GRB-17806
     */
    private function removeOldAcknowledgement()
    {
        $db = cb_get_app_db('bulletin');

        $query
            = "UPDATE tab_grn_bulletin_articleentity SET col_reserve_blob1 = NULL, col_reserve_blob2 = NULL, col_reserve_int2 = NULL ;";

        $db->query($query);

        $this->log("Succeeded to delete old acknowledgement data at tab_grn_bulletin_articleentity.");
    }

    // Convert binary data type to array integer
    function bin_arr_ushort($bin)
    {
        $len = strlen($bin) / 2;

        return unpack('v' . $len, $bin);
    }
}
