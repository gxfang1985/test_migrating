<?php

namespace grn\versionup;

class InformationSchemaUtil
{
    /**
     * @param \CB_DatabaseConnection $db
     * @param  string                $table_name
     * @param  string                $column_name
     *
     * @return bool
     */
    public static function hasColumn(
        \CB_DatabaseConnection $db,
        $table_name,
        $column_name
    ) {
        $query
            = <<<SQL
SELECT * FROM information_schema.columns
WHERE table_schema = '@S'
  AND table_name = '@S'
  AND column_name = '@S'
SQL;

        $query = $db->format($query,
            [$db->getDatabaseName(), $table_name, $column_name]);
        $ret = $db->query($query);
        $row = $db->fetch_row($ret);
        $db->free_result($ret);

        return $row !== false;
    }

    /**
     * @param \CB_DatabaseConnection $db
     * @param string                 $table_name
     * @param string                 $index_name
     * @param string[]               $columns
     * @param bool                   $is_unique
     *
     * @return bool
     */
    public static function hasIndex(
        \CB_DatabaseConnection $db,
        $table_name,
        $index_name,
        array $columns,
        $is_unique
    ) {
        $query
            = <<<SQL
SELECT column_name, non_unique FROM information_schema.statistics
WHERE index_schema = '@S'
  AND table_name = '@S'
  AND index_name = '@S'
ORDER BY seq_in_index
SQL;

        $query = $db->format($query,
            [$db->getDatabaseName(), $table_name, $index_name]);
        $ret = $db->query($query);

        $actual = [];
        while ($row = $db->fetch_assoc($ret)) {
            $actual[] = [
                $row['column_name'],
                $row['non_unique'] === '0' // '0' means that the index is unique
            ];
        }
        $db->free_result($ret);

        $expected = [];
        foreach ($columns as $column) {
            $expected[] = [$column, $is_unique];
        }

        return $actual === $expected;
    }

    /**
     * @param \CB_DatabaseConnection $db
     * @param string                 $table_name
     * @param string                 $foreign_key_name
     *
     * @return bool
     */
    public static function hasForeignKey(
        \CB_DatabaseConnection $db,
        $table_name,
        $foreign_key_name
    ) {
        $query
            = <<<SQL
SELECT constraint_name FROM information_schema.table_constraints
WHERE constraint_schema = '@S'
  AND table_name = '@S'
  AND constraint_name = '@S'
  AND constraint_type = 'FOREIGN KEY'
LIMIT 1
SQL;

        $query = $db->format($query,
            [$db->getDatabaseName(), $table_name, $foreign_key_name]);
        $ret = $db->query($query);
        $row = $db->fetch_row($ret);
        $db->free_result($ret);

        return $row !== false;
    }

    /**
     * @param \CB_DatabaseConnection $db
     * @param string                 $table_name
     * @param string[]               $columns
     *
     * @return bool
     */
    public static function hasPrimaryKey(
        \CB_DatabaseConnection $db,
        $table_name,
        array $columns
    ) {
        return self::hasIndex($db, $table_name, 'PRIMARY', $columns, true);
    }
}
