<?php

// 1. Framework initialization.
require('fw/prepend.csp');

// 2. Resolve the current locale
// HTTP-ACCEPT-LANGUAGE header is used when the key 'locale' doesn't exist in $_SESSION.
require_once('fw/i18n.csp');
$i18n = CB_I18N::getInstance();
$session = $i18n->getSession();

if ( ! $session->get('locale') && ! cb_is_init_process()) {
    $browser_locale = $i18n->getLanguageFromHttpHeader();
    if ( ! cb_is_versionup_process()) {
        $i18n->switchCurrentLocale($browser_locale, null);
    }
}

unset($session, $langs, $l_manager, $browser_locale, $l);

// 3. Check backup mode.
global $G_state_set;
require_once('fw/backupmode.csp');
$info = false;
if (($info = cb_get_backupmode()) !== false) {
    if ($G_state_set->get('command_line') === false) {
        $mnt = cb_get_backupmode_driver();
        $mnt->onHttpRequest($info);
        exit(CB_EXIT_BACKUP_MODE);
    } elseif (isset($argv) === false || is_array($argv) === false
              || array_key_exists(0, $argv) === false
              || basename($argv[0]) !== 'backupmode_end.csp'
    ) {
        $mnt = cb_get_backupmode_driver();
        $mnt->onCommandLineRequest($info);
        exit(CB_EXIT_BACKUP_MODE);
    }
}
unset($info, $mnt);

// 4. Preprocess by plugin scripts.
require_once('fw/plugin.csp');
$loader = new CB_PluginLoader('fw.prepend');
$loader->loadFiles();
unset($loader);

// 5. Preproess by common flowlet.
$loaded = false;
if (defined('ON_FOREST')) {
    //GTM-129 for server side customization
    //try to load customized prepend file
    require_once('grn/CustomUtil.csp');
    $customutil = GRN_Custom_Util::getInstance();
    $loaded = $customutil->loadCustomCsp(dirname(cb_get_pagename())
                                         . '/_prepend.csp');
    unset($customutil);
}

if ($loaded === false) {
    $prepend = cb_basedir() . '/code/doc_root/' . dirname(cb_get_pagename())
               . '/_prepend.csp';

    if (file_exists($prepend)) {
        include($prepend);
    }
}
unset($loaded);
unset($prepend);

// 6. Check product license.
$lic = cb_get_license_driver();
if ( ! cb_is_versionup_process()
     && ($redirect = $lic->forceRedirect()) !== false
) {
    cb_switch_page($redirect, CB_EXIT_LICENSE_REDIRECT);
}
unset($redirect, $lic);
unset($i18n);

// 7. register function when fatal error occured.
register_shutdown_function(
    create_function('',
        '$handler = CB_ErrorHandler::getInstance();
$handler->handlerForPhpFatalError();'
    ));

