<?php
require_once('grn/org_tree.csp');

class GRN_Mail_FolderTree extends GRN_OrgTree
{
    var $_account_id = null;
    var $_locale = null;

    /**
     * @param $params
     */
    function __construct($params)
    {
        if (isset($params['account_id'])) {
            $this->_account_id = $params['account_id'];
        }
        $this->_groups_have_childs = [];
    }

    /**
     * @return mixed
     */
    function _getLoginUser()
    {
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $user = $uum->getLoginUser();

        return $user;
    }

    /**
     * @return GRN_Mail_FolderLogic
     */
    function _getFolderLogic()
    {
        require_once('mail/utility.csp');
        $utility = GRN_Mail_Utility::getInstance();
        $folder_logic = $utility->getFolderLogic();

        return $folder_logic;
    }

    /**
     * @param   int $oid 親組織ID
     *
     * @return  array 子組織
     */
    function _getChildren($oid)
    {
        $logic = $this->_getFolderLogic();

        $use_garbagebox = null;
        $folders = [];
        $user = $this->_getLoginUser();
        if (is_null($oid)) {
            $folders = $logic->getRootFolders($user, $this->_account_id);

            require_once('mail/utility.csp');
            $utility = GRN_Mail_Utility::getInstance();
            $personal_config = $utility->getPersonalConfig($user);
            $use_garbagebox = $personal_config->useTrash();
        } else {
            $folders = $logic->getChildren($user, $this->_account_id, $oid);
        }

        $ret = [];
        foreach ($folders as $fid => $folder) {
            if (GRN_MAIL_FOLDER_CODE_TRASH == $folder['type']
                && ! $use_garbagebox
            ) {
                continue;
            }

            $ret[$fid] = [
                '_id'        => $folder['id'],
                'col_name'   => $folder['name'],
                'subscribed' => $folder['subscribe'],
                'type'       => $folder['type'],
                'unread'     => $folder['unread']
            ];
        }

        return $ret;
    }

    /**
     * @param int $oid
     *
     * @return  array associated array
     */
    function _getAncestors($oid)
    {
        $logic = $this->_getFolderLogic();
        $retval =& $logic->getAncestors($oid);

        return $retval;
    }

    /**
     * @param $child
     * @param $child_row
     */
    function _onCreateChild(&$child, &$child_row)
    {
        $child['subscribed'] = $child_row['subscribed'];
        $child['type'] = $child_row['type'];
        $child['unread'] = $child_row['unread'];
    }

    /**
     * @param  int $oid 親組織ID
     *
     * @return int num of child organization
     */
    function _getChildCount($oid)
    {
        $logic = $this->_getFolderLogic();
        $user = $this->_getLoginUser();
        $count = $logic->childrenCount($user, $this->_account_id, $oid);

        return $count;
    }

    function getRoot()
    {
        $tree =& $this->_tree;

        if (is_null($tree) || (is_array($tree) && count($tree) == 0)) {
            return null;
        }

        // update caption of special folders when current locale is changed
        require_once('fw/i18n.csp');
        $i18n = CB_I18N::getInstance();
        $locale = strtolower($i18n->getCurrentLanguage());

        if (strcasecmp($this->_locale, $locale)) {
            foreach (array_keys($tree) as $key) {
                $folder =& $tree[$key];
                switch ($folder['type']) {
                    case GRN_MAIL_FOLDER_CODE_INBOX:
                        $folder['name'] = cb_msg('grn.mail', 'inbox');
                        break;
                    case GRN_MAIL_FOLDER_CODE_SENTBOX:
                        $folder['name'] = cb_msg('grn.mail', 'outbox');
                        break;
                    case GRN_MAIL_FOLDER_CODE_UNSENT:
                        $folder['name'] = cb_msg('grn.mail', 'draftbox');
                        break;
                    case GRN_MAIL_FOLDER_CODE_TRASH:
                        $folder['name'] = cb_msg('grn.mail', 'garbagebox');
                        break;
                }
            }
        }

        $this->_locale = $locale;

        return $tree;
    }

    /**
     * @param $folder_id
     *
     * @return mixed
     */
    function getSelectedNodeToSelect($folder_id)
    {
        $logic = $this->_getFolderLogic();
        $user = $this->_getLoginUser();
        $nodes =& $this->_nodes;

        $inbox_detail = $logic->getSpecialFolderData($this->_account_id,
            'inbox');
        $inbox_id = $inbox_detail['id'];

        if ($folder_id) {
            $folder_info = $logic->getFolderInfo($user, $this->_account_id,
                $folder_id);
            if ($folder_info) {
                $this->_selectedNode = $folder_id;
            }
        }

        if ( ! $this->_selectedNode) {
            $this->_selectedNode = $inbox_id;
        }

        return $this->_selectedNode;
    }


    function checkAndInitialize()
    {
        $logic = $this->_getFolderLogic();
        $user = $this->_getLoginUser();
        $tree =& $this->_tree;
        $nodes =& $this->_nodes;

        $initialize = false;
        // login as another user
        if ($this->_uid !== $user->getOID()) {
            $initialize = true;
        }

        if (is_null($tree) || (is_array($tree) && count($tree) == 0)) {
            $initialize = true;
        }

        if ($initialize) {
            $this->initialize($expanded = true);
            $this->_selectedNode = null;
        }

        // check on/off trash
        require_once('mail/utility.csp');
        $utility = GRN_Mail_Utility::getInstance();
        $personal_config = $utility->getPersonalConfig($user);
        $use_garbagebox = $personal_config->useTrash();

        $trash_detail = $logic->getSpecialFolderData($this->_account_id,
            'garbagebox');
        $trash_id = $trash_detail['id'];

        if (is_array($tree) && count($tree)) {
            if (array_key_exists($trash_id, $tree) && $use_garbagebox == '0') {
                $this->rebuild();
                unset($nodes[$trash_id]);
            } elseif ( ! array_key_exists($trash_id, $tree)
                       && $use_garbagebox == '1'
            ) {
                $this->rebuild();
            }
        }
    }

    /**
     * ツリーの子ノードを構築する。
     *
     * @param int  $parent_oid 親ノードID
     * @param bool $expanded
     * @param bool $force
     *
     * @return array|bool 構築した子ノード
     */
    function buildChild($parent_oid, $expanded = false, $force = true)
    {
        return $this->_buildChild($parent_oid, $expanded, $force);
    }

}

/**
 * @param      $list_page
 * @param      $account_id
 * @param null $expand_oid
 */
function grn_mail_rebuild_folder_tree(
    $list_page,
    $account_id,
    $expand_oid = null
) {
    $util = GRN_OrgTreeUtil::getInstance();
    $tree =& $util->getTree($list_page, 'GRN_Mail_FolderTree',
        ["account_id" => $account_id]);
    $tree->initialize();

    // update init time
    $util->updateInitPageList($list_page, $tree);

    if ( ! is_null($expand_oid)) {
        global $G_message_login;

        require_once('mail/folder.csp');
        $logic = new GRN_Mail_FolderLogic();
        $ancestors =& $logic->getAncestors($expand_oid);
        foreach (array_keys($ancestors) as $fid) {
            $tree->buildChild($fid);
        }
    }
    $util->setTree($list_page, $tree);
}

