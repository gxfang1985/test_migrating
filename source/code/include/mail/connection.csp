<?php
require_once('mail/table.csp');

//////////////////////////////////////////////////////////////////////////////

/**
 * メール通信ロガークラス
 *
 * @author  IKEDA, Atsushi 2004/12
 * @version 1.0
 * @package grn.mail
 */
class GRN_Mail_ConnectionLogger
{
    var $_filename = null;
    var $_logger = null; //use logger_25

    function __construct()
    {
        require_once('grn/application.csp');
        $locator = GRN_ApplicationLocator::instance();
        $mail = $locator->getInstance('mail');
        if ( ! is_null($mail)) {
            $logfile = $mail->getConfig('logfile');
            if ( ! is_null($logfile) && $logfile !== false) {
                $this->_filename = $logfile;
            }
        }

        require_once('grn/logger.csp');
        $logger_manager = CB_LoggerManager::getInstance();
        $this->_logger = $logger_manager->getLogger('grn.mail');
    }

    function isDebugEnabled()
    {
        return true;
    }

    function warning($message)
    {
        if ( ! is_null($this->_filename)) {
            $fd = fopen($this->_filename, 'a');
            fwrite($fd, "WARN: $message\r\n");
            fclose($fd);
        }
    }

    function warningEx($message)
    {
        $this->_logger->warning($message);
    }

    function debug($message)
    {
        if ( ! is_null($this->_filename)) {
            $fd = fopen($this->_filename, 'a');
            fwrite($fd, "DEBUG: $message\r\n");
            fclose($fd);
        }
    }

    function error($message)
    {
        if ( ! is_null($this->_filename)) {
            $fd = fopen($this->_filename, 'a');
            fwrite($fd, "ERROR: $message\r\n");
            fclose($fd);
        }
    }
}

//////////////////////////////////////////////////////////////////////////////

/**
 * メール通信エラーリスナークラス
 *
 * @author  IKEDA, Atsushi 2004/12
 * @version 1.0
 * @package grn.mail
 */
class GRN_Mail_ErrorListener
{
    function __construct()
    {
    }

    var $_errors = [];

    /**
     * エラーを登録
     *
     * @param   string $errno エラーコード
     * @param   string $msg   サーバーからの応答文字列
     */
    function error($errno, $msg)
    {
        $this->_errors[] = ['errno' => $errno, 'msg' => $msg];
    }

    /**
     * 全てのエラーを削除
     *
     */
    function clearErrors()
    {
        $this->_errors = [];
    }

    /**
     * エラー文字列を取得
     *
     * @param $errno
     * @param $msg
     *
     * @return string
     */
    function formatError($errno, $msg)
    {
        return "$errno - [$msg]";
    }

    /**
     * 全てのエラー文字列を取得
     *
     * @return string
     */
    function formatErrors()
    {
        $str = '';
        foreach ($this->_errors as $error) {
            if (array_key_exists('errno', $error)
                && array_key_exists('msg', $error)
            ) {
                $str .= $this->formatError($error['errno'], $error['msg']);
                $str .= "\r\n";
            }
        }

        return $str;
    }

}

//////////////////////////////////////////////////////////////////////////////

/**
 * メール通信ロジック管理クラス
 *
 * @author  IKEDA, Atsushi 2005/01
 * @version 1.0
 * @package grn.mail
 */
class GRN_Mail_ConnectionLogicManager
{
    /**
     * Return singleton.
     *
     * @return GRN_Mail_ConnectionLogicManager
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Mail_ConnectionLogicManager();
        }

        return $_instance;
    }

    function __construct()
    {
    }

    //////////////////////////////////////////////////////////////////////////
    // メンバ変数
    /**
     * @access private
     */
    var $_connection_logic = [];                  // アカウントごと
    var $_error_listener = null;
    var $_logger = null;

    //////////////////////////////////////////////////////////////////////////
    // private method


    //////////////////////////////////////////////////////////////////////////
    // public method

    /**
     * エラーリスナーオブジェクトを取得
     *
     * @return GRN_Mail_ErrorListener
     */
    function getErrorListener()
    {
        if (is_null($this->_error_listener)) {
            // GRN_Mail_ErrorListenerオブジェクトの生成
            $this->_error_listener = new GRN_Mail_ErrorListener();
        }

        return $this->_error_listener;
    }

    /**
     * ロガーオブジェクトを取得
     *
     * @return GRN_Mail_ConnectionLogger
     */
    function getLogger()
    {
        if (is_null($this->_logger)) {
            // GRN_Mail_ConnectionLoggerオブジェクトの生成
            $this->_logger = new GRN_Mail_ConnectionLogger();
        }

        return $this->_logger;
    }

    /**
     * @param $account GRN_Mail_Account
     *
     * @return GRN_Mail_ConnectionLogic
     */
    function getConnectionLogic(& $account)
    {
        // メールアカウントデータ
        if ( ! is_object($account)) {
            assert('FALSE');
            {
                $___ret = null;

                return $___ret;
            }
        }

        $account_id = $account->getOID();
        if ( ! array_key_exists($account_id, $this->_connection_logic)) {
            $logger = $this->getLogger();
            $error_listener = $this->getErrorListener();
            $this->_connection_logic[$account_id]
                = new GRN_Mail_ConnectionLogic(
                $account,
                $error_listener,          // 共通のリスナ
                $logger                  // 共通のロガー
            );
        }

        return $this->_connection_logic[$account_id];
    }

}

//////////////////////////////////////////////////////////////////////////////

/**
 * メール通信ロジッククラス
 *
 * @author  IKEDA, Atsushi 2004/12
 * @version 1.0
 * @package grn.mail
 */
class GRN_Mail_ConnectionLogic
{
    /**
     * コンストラクタ
     *
     * @param   object $account        メールアカウントオブジェクト（GRN_Mail_Account）
     * @param   object $error_listener エラーリスナーオブジェクト
     * @param   object $logger         ロガーオブジェクト
     */
    function __construct(& $account, & $error_listener, & $logger)
    {
        $this->_utility = GRN_Mail_Utility::getInstance();

        assert('is_object( $account )');
        $this->_account =& $account;
        $this->_error_listener =& $error_listener;
        $this->_logger =& $logger;

        // サーバー情報取得
        $server_id = $account->getId('server');
        if ($server_id === false) {
            // メールサーバーが見つからない
            cb_throw_error(E_GRN_MAIL_SERVER_DATA_NOT_FOUND);
        }

        $system_config = $this->_utility->getSystemConfig();
        $server_data = $system_config->getServerData($server_id);
        if ( ! is_array($server_data)
             || ! array_key_exists('server_info', $server_data)
             || ! is_object($server_data['server_info'])
        ) {
            // メールサーバーが見つからない
            cb_throw_error(E_GRN_MAIL_SERVER_DATA_NOT_FOUND);
        }

        $this->_server_info =& $server_data['server_info'];
        assert('is_object( $this->_server_info )');
    }

    //////////////////////////////////////////////////////////////////////////
    // メンバ変数
    /**
     * @access private
     */
    var $_utility = null;

    /**
     * @var \GRN_Mail_ServerInfo
     */
    var $_server_info = null;

    /**
     * @var null|GRN_Mail_Account
     */
    var $_account = null;                     // GRN_Mail_Account
    var $_error_listener = null;
    var $_logger = null;
    var $_smtp_server = null;                     // メール送信クラスオブジェクト
    var $_retrieve_server = null;                     // メール受信クラスオブジェクト(POP3/IMAP4)
    var $_retrieve_folder = null;                     // 受信サーバーフォルダオブジェクト(POP3/IMAP4)

    //////////////////////////////////////////////////////////////////////////
    // private method

    /**
     * エラーリスナーオブジェクトを取得
     *
     * @return GRN_Mail_ErrorListener
     */
    function _getErrorListener()
    {
        if (is_null($this->_error_listener)) {
            // GRN_Mail_ErrorListenerオブジェクトの生成
            $this->_error_listener = new GRN_Mail_ErrorListener();
        }

        return $this->_error_listener;
    }

    /**
     * ロガーオブジェクトを取得
     *
     * @return GRN_Mail_ConnectionLogger
     */
    function _getLogger()
    {
        if (is_null($this->_logger)) {
            // GRN_Mail_ConnectionLoggerオブジェクトの生成
            $this->_logger = new GRN_Mail_ConnectionLogger();
        }

        return $this->_logger;
    }

    //////////////////////////////////////////////////////////////////////////
    // public method

    /**
     * メールアカウントデータオブジェクトを取得
     *
     * @return GRN_Mail_Account
     */
    function getAccount()
    {
        return $this->_account;
    }

    /**
     * メールアカウント情報オブジェクトを取得
     *
     */
    function getAccountInfo()
    {
        if ( ! is_object($this->_account)) {
            $___ret = null;

            return $___ret;
        }

        $ret = $this->_account->getAccountInfo();

        return $ret;
    }

    /**
     * メールサーバー情報オブジェクトを取得
     *
     */
    function getServerInfo()
    {
        return $this->_server_info;
    }

    /**
     * 全てのエラーを削除
     *
     */
    function clearErrors()
    {
        $error_listener = $this->_getErrorListener();
        $error_listener->clearErrors();
    }

    /**
     * エラー文字列を取得
     *
     * @return string
     */
    function &formatErrors()
    {
        $error_listener =& $this->_getErrorListener();
        $ret = $error_listener->formatErrors();

        return $ret;
    }

    /**
     * 送信メールサーバーオブジェクトを取得
     *
     * @return CB_MailSMTPSenderBase
     */
    function getSmtpServer()
    {
        if (is_null($this->_smtp_server)) {
            // CB_MailSenderオブジェクトの取得
            global $G_container_base;
            /** @var CB_MailSMTPSenderBase $sender */
            $this->_smtp_server = $G_container_base->getInstance('mail_smtp');
        }

        return $this->_smtp_server;
    }

    /**
     * 受信メールサーバーオブジェクトを取得
     *
     * @return  CB_MailStore
     */
    function getRetrieveServer()
    {
        if (is_null($this->_retrieve_server)) {
            $server_info = $this->getServerInfo();
            $protocol = $server_info->getRetrieveProtocol();
            $section_name = 'mail_pop3';
            if ($protocol == 'IMAP4') {
                // CB_MailIMAPStoreオブジェクトの取得
                $section_name = 'mail_imap';
            } else {
                // CB_MailPOP3Storeオブジェクトの取得
                $section_name = 'mail_pop3';
            }

            global $G_container_base;
            /** @var CB_MailStore _retrieve_server */
            $this->_retrieve_server
                = $G_container_base->getInstance($section_name);
        }

        return $this->_retrieve_server;
    }

    /**
     * 送信メールサーバーに接続
     *
     * @return  boolean
     */
    function connectToSmtpServer($stream_timeout = null)
    {
        require_once('fw/mail_smtp.csp');
        $server_info = $this->getServerInfo();

        if ($server_info->isPopBeforeSmtp()) {
            // 受信サーバーにログイン
            $server_folder =& $this->loginRetrieveServer();
            if ( ! is_object($server_folder)) {
                // 接続失敗
                cb_throw_error(E_GRN_MAIL_FAILED_TO_CONNECT_RETRIEVE_SERVER,
                    null, $this->formatErrors());
            }

            // 受信サーバーから切断
            $this->disconnectFromRetrieveServer();

            $wait = (int)$server_info->getPopBeforeSmtpWaitTime();
            if ($wait > 0) {
                sleep($wait);
            }
        }

        $this->checkSmtpServerHostIsValid($server_info);

        $info_array = [
            'hostname' => $server_info->getSmtp(),
            'smtp_ssl' => $server_info->smtpOverSsl(),
            'smtp_tls' => $server_info->smtpOverTls(),
            'port'     => $server_info->getSmtpPort(),
            'auth'     => $server_info->getSmtpAuth(),
            'timeout'  => $server_info->getSmtpTimeoutTime()
        ];

        // SMTP AUTH
        if ($server_info->isSmtpAuth()) {
            $account_info = $this->getAccountInfo();
            if ($server_info->usingSmtpAccount()) {
                // 送信アカウント設定を使う
                $info_array['uid'] = $account_info->getSmtpAccount();
                $info_array['password'] = $account_info->getSmtpPassword();
            } else {
                // 受信アカウント設定を使う
                $info_array['uid'] = $account_info->getRetrieveAccount();
                $info_array['password'] = $account_info->getRetrievePassword();
            }
        }

        $sender = $this->getSmtpServer();
        $sender->setErrorListener($this->_getErrorListener());
        $sender->setLogger($this->_getLogger());
        if ($stream_timeout > 0) {
            $sender->_p->_socket->timeout = $stream_timeout;
        }

        return $sender->connect($info_array);
    }

    /**
     * 送信メールサーバーから切断
     *
     * @return boolean
     */
    function disconnectFromSmtpServer()
    {
        $sender = $this->getSmtpServer();
        if ($sender->isConnected()) {
            return $sender->disconnect();
        }

        return true;
    }

    /**
     * 送信メールサーバーのコミット
     *
     * @return boolean
     */
    function commitSmtpServer()
    {
        $sender = $this->getSmtpServer();
        if ($sender->isConnected()) {
            return $sender->commit();
        }

        return true;
    }

    /**
     * 送信メールサーバーの処理中断
     *
     */
    function abortSmtpServer()
    {
        $sender =& $this->getSmtpServer();

        return $sender->abort();
    }

    /**
     * 受信メールサーバーにログインしてデフォルトフォルダオブジェクトを返す
     *
     * @return CB_MailPOP3Folder|CB_MailIMAPFolder|null
     */
    function loginRetrieveServer()
    {
        $account = $this->getAccount();
        $account_info = $this->getAccountInfo();
        $server_info = $this->getServerInfo();

        $this->checkRetrieveServerHostIsValid($server_info);

        $protocol = $server_info->getRetrieveProtocol();
        if ($protocol == 'IMAP4') {
            $retrieve_ssl = 'imap4_ssl';
        } else {
            $retrieve_ssl = 'pop3_ssl';
        }
        $info_array = [
            'hostname'    => $server_info->getRetrieve(),
            $retrieve_ssl => $server_info->retrieveOverSsl(),
            'port'        => $server_info->getRetrievePort(),
            'auth'        => $server_info->getRetrieveAuth(),
            'uid'         => $account_info->getRetrieveAccount(),
            'password'    => $account_info->getRetrievePassword(),
            'timeout'     => $server_info->getRetrieveTimeoutTime(),
            'option'      => $account->getOID()
        ];

        $store = $this->getRetrieveServer();
        $store->setErrorListener($this->_getErrorListener());
        $store->setLogger($this->_getLogger());
        if ($store->connect($info_array) != true) {
            $___ret = null;

            return $___ret;
        }

        $this->_retrieve_folder = $store->getDefaultFolder();
        if ( ! is_object($this->_retrieve_folder)) {
            $this->_retrieve_folder = null;
        }

        return $this->_retrieve_folder;
    }

    /**
     * 受信メールサーバーから切断
     *
     * @return boolean
     */
    function disconnectFromRetrieveServer()
    {
        if ( ! is_null($this->_retrieve_server)
             && $this->_retrieve_server->isConnected()
        ) {
            return $this->_retrieve_server->disconnect();
        }

        return true;
    }

    /**
     * 受信メールサーバーのコミット
     *
     * @return boolean
     */
    function commitRetrieveServer()
    {
        if ( ! is_null($this->_retrieve_server)
             && $this->_retrieve_server->isConnected()
        ) {
            return $this->_retrieve_server->commit();
        }

        return true;
    }

    /**
     * 受信メールサーバーの処理中断
     *
     * @return boolean
     */
    function abortRetrieveServer()
    {
        if ( ! is_null($this->_retrieve_server)
             && $this->_retrieve_server->isConnected()
        ) {
            return $this->_retrieve_server->abort();
        }

        return true;
    }



    //////////////////////////////////////////////////////////////////////////

    /**
     * メールをメールサーバーに送信
     *
     * @param   array  $mailMessages メールメッセージオブジェクト{@link CB_MailMessage}の配列
     * @param   string $locale       ロケール
     *
     * @return  int         送信メール数
     */
    function sendMailToSmtpServer(& $mailMessages, $locale)
    {
        require_once('fw/mail_message.csp');
        assert('is_array( $mailMessages )');
        assert('! is_null( $locale )');

        $sender = $this->getSmtpServer();

        return $sender->sendMails($mailMessages, $locale);
    }


    //////////////////////////////////////////////////////////////////////////

    /**
     * 送信メールサーバーオブジェクトを取得(static)
     *
     * @return CB_MailSMTPSenderBase
     */
    public static function static_getSmtpServer()
    {
        // CB_MailSenderオブジェクトの取得
        require_once('fw/mail_smtp.csp');
        global $G_container_base;
        /** @var CB_MailSMTPSenderBase $sender */
        $ret = $G_container_base->getInstance('mail_smtp');

        return $ret;
    }

    /**
     * 送信メールサーバー接続テスト(static)
     *
     * @param $server_info GRN_Mail_ServerInfo
     * @param $listener
     * @param $logger
     * @param $timeout
     *
     * @return boolean
     */
    public static function static_testSmtpConnection(
        & $server_info,
        & $listener,
        & $logger,
        $timeout
    ) {
        assert('is_object( $server_info )');
        self::checkSmtpServerHostIsValid($server_info);

        // 送信メールサーバーに接続
        $sender = GRN_Mail_ConnectionLogic::static_getSmtpServer();
        $sender->setErrorListener($listener);
        $sender->setLogger($logger);

        $info_array = [
            'hostname' => $server_info->getSmtp(),
            'port'     => $server_info->getSmtpPort(),
            'smtp_ssl' => $server_info->smtpOverSsl(),
            'smtp_tls' => $server_info->smtpOverTls(),
            'auth'     => $server_info->getSmtpAuth(),
            'timeout'  => $timeout
        ];

        return $sender->isAvailable($info_array);
    }

    /**
     * 送信メールサーバーに接続(static)
     *
     * @param GRN_Mail_ServerInfo       $server_info
     * @param GRN_Mail_AccountInfo      $account_info
     * @param GRN_Mail_ErrorListener    $listener
     * @param GRN_Mail_ConnectionLogger $logger
     * @param int                       $timeout
     *
     * @return  boolean
     */
    public static function static_testSmtpConnectionWithAccount(
        GRN_Mail_ServerInfo $server_info,
        $account_info,
        $listener,
        $logger,
        $timeout
    ) {
        assert('is_object( $server_info )');

        self::checkSmtpServerHostIsValid($server_info);

        require_once('fw/mail_smtp.csp');

        $info_array = [
            'hostname' => $server_info->getSmtp(),
            'port'     => $server_info->getSmtpPort(),
            'smtp_ssl' => $server_info->smtpOverSsl(),
            'smtp_tls' => $server_info->smtpOverTls(),
            'auth'     => $server_info->getSmtpAuth(),
            'timeout'  => $timeout
        ];

        // SMTP AUTH
        if ($server_info->isSmtpAuth()) {
            assert('is_object( $account_info )');
            if ($server_info->usingSmtpAccount()) {
                // 送信アカウント設定を使う
                $info_array['uid'] = $account_info->getSmtpAccount();
                $info_array['password'] = $account_info->getSmtpPassword();
            } else {
                // 受信アカウント設定を使う
                $info_array['uid'] = $account_info->getRetrieveAccount();
                $info_array['password'] = $account_info->getRetrievePassword();
            }
        }

        $sender = self::static_getSmtpServer();
        $sender->setErrorListener($listener);
        $sender->setLogger($logger);
        $is_succeed = $sender->connect($info_array);
        if ($is_succeed) {
            $sender->disconnect();
        }

        return $is_succeed;
    }

    /**
     * 受信メールサーバーオブジェクトを取得(static)
     *
     * @param $server_info GRN_Mail_ServerInfo
     *
     * @return CB_MailIMAPStore|CB_MailPOP3Store
     */
    public static function static_getRetrieveServer(& $server_info)
    {
        assert('is_object( $server_info )');

        $protocol = $server_info->getRetrieveProtocol();
        $section_name = 'mail_pop3';
        if ($protocol == 'IMAP4') {
            // CB_MailIMAPStoreオブジェクトの取得
            $section_name = 'mail_imap';
        } else {
            // CB_MailPOP3Storeオブジェクトの取得
            $section_name = 'mail_pop3';
        }

        global $G_container_base;
        $ret = $G_container_base->getInstance($section_name);

        return $ret;
    }

    /**
     * 受信メールサーバー接続テスト(static)
     *
     * @param GRN_Mail_ServerInfo            $server_info
     * @param GRN_Mail_ErrorListener|null    $listener
     * @param GRN_Mail_ConnectionLogger|null $logger
     *
     * @return boolean
     */
    public static function static_testRetrieveConnection(
        $server_info,
        $listener,
        $logger
    ) {
        self::checkRetrieveServerHostIsValid($server_info);

        // 受信メールサーバーに接続
        $store
            = GRN_Mail_ConnectionLogic::static_getRetrieveServer($server_info);
        $store->setErrorListener($listener);
        $store->setLogger($logger);

        $protocol = $server_info->getRetrieveProtocol();
        if ($protocol == 'IMAP4') {
            // CB_MailIMAPStoreオブジェクトの取得
            $retrieve_ssl = 'imap4_ssl';
        } else {
            // CB_MailPOP3Storeオブジェクトの取得
            $retrieve_ssl = 'pop3_ssl';
        }
        $info_array = [
            'hostname'    => $server_info->getRetrieve(),
            $retrieve_ssl => $server_info->retrieveOverSsl(),
            'port'        => $server_info->getRetrievePort(),
            'auth'        => $server_info->getRetrieveAuth(),
            'timeout'     => $server_info->getRetrieveTimeoutTime(),
        ];

        return $store->isAvailable($info_array);
    }

    /**
     * 受信メールサーバーに接続(static)
     *
     * @param GRN_Mail_ServerInfo            $server_info
     * @param GRN_Mail_AccountInfo           $account_info
     * @param GRN_Mail_ErrorListener|null    $listener
     * @param GRN_Mail_ConnectionLogger|null $logger
     *
     * @return  boolean
     */
    public static function static_testRetrieveConnectionWithAccount(
        $server_info,
        $account_info,
        $listener,
        $logger
    ) {
        assert('is_object( $server_info )');

        self::checkRetrieveServerHostIsValid($server_info);

        $protocol = $server_info->getRetrieveProtocol();
        if ($protocol == 'IMAP4') {
            // CB_MailIMAPStoreオブジェクトの取得
            $retrieve_ssl = 'imap4_ssl';
        } else {
            // CB_MailPOP3Storeオブジェクトの取得
            $retrieve_ssl = 'pop3_ssl';
        }
        $info_array = [
            'hostname'    => $server_info->getRetrieve(),
            'port'        => $server_info->getRetrievePort(),
            $retrieve_ssl => $server_info->retrieveOverSsl(),
            'auth'        => $server_info->getRetrieveAuth(),
            'uid'         => $account_info->getRetrieveAccount(),
            'password'    => $account_info->getRetrievePassword(),
            'timeout'     => $server_info->getRetrieveTimeoutTime()
        ];

        $server
            = GRN_Mail_ConnectionLogic::static_getRetrieveServer($server_info);
        $server->setErrorListener($listener);
        $server->setLogger($logger);

        $is_succeed = $server->connect($info_array);
        if ($is_succeed) {
            $server->disconnect();
        }

        return $is_succeed;
    }

    /**
     * @param GRN_Mail_ServerInfo $server_info
     */
    private static function checkRetrieveServerHostIsValid(
        GRN_Mail_ServerInfo $server_info
    ) {
        require_once('fw/mailserver_config.csp');
        $config = CB_MailServerConfig::getInstance();
        if ( ! $config->isValidHost($server_info->getRetrieve())) {
            cb_throw_error(E_GRN_MAIL_SERVER_INVALID_RETRIEVE_SERVER);
        }
    }

    /**
     * @param GRN_Mail_ServerInfo $server_info
     */
    private static function checkSmtpServerHostIsValid(
        GRN_Mail_ServerInfo $server_info
    ) {
        require_once('fw/mailserver_config.csp');
        $config = CB_MailServerConfig::getInstance();
        if ( ! $config->isValidHost($server_info->getSmtp())) {
            cb_throw_error(E_GRN_MAIL_SERVER_INVALID_SMTP_SERVER);
        }
    }
}


