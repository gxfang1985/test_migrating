<?php

//require_once( 'fw/i18n.csp' );
require_once('fw/module.csp');
require_once('mail/table.csp');
require_once('mail/utility.csp');
require_once('grn/application.csp');
define('GRN_MAIL_USER_SIZE_UNLIMIT', 1099511627777);  // MB

//////////////////////////////////////////////////////////////////////////////

/**
 * メールシステム設定ロジック
 *
 * @author  IKEDA, Atsushi 2004/12
 * @version 1.0
 * @package grn.mail
 */
class GRN_Mail_SystemConfig extends CB_ModuleBase
{
    /**
     * Return singleton.
     *
     * @return GRN_Mail_SystemConfig
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Mail_SystemConfig();
        }

        return $_instance;
    }

    function __construct()
    {
        parent::__construct(GRN_MAIL_SYSTEM_MODULE_ID);

        $this->_utility = GRN_Mail_Utility::getInstance();
    }

    //////////////////////////////////////////////////////////////////////////
    // メンバ変数
    /**
     * @access private
     */
    var $_utility = null;
    var $_server_table = null;
    var $_account_data_list = [];           // cache
    var $_can_user_use_confirm = null;           // cache
    var $_dbconnection = null;                   // cache

    //////////////////////////////////////////////////////////////////////////
    // private method

    function _clearAccountDataListCache(& $user)
    {
        if (is_object($user)
            && array_key_exists($user->getOID(), $this->_account_data_list)
        ) {
            unset($this->_account_data_list[$user->getOID()]);
        }
    }

    /**
     * 指定されたIDでメールサーバーデータをDBから取得
     *
     * @access private
     *
     * @param   string $id メールサーバーID
     *
     * @return GRN_Mail_Server|null
     */
    function _getServerRow($id)
    {
        if (is_null($id) || (strlen($id) == 0)) {
            // データ不正
            assert('FALSE');
            {
                $___ret = null;

                return $___ret;
            }
        }

        $table = $this->_utility->getTableInfo(GRN_MAIL_SERVER_TABLE);
        $db = $table->getDBConnection();
        $id = $db->escape($id);
        $row = $table->getRow($id);
        if ( ! is_object($row)) {
            $___ret = null;

            return $___ret;
        }

        return $row;
    }

    /**
     * @access private
     */
    function _getServerRowByForeignKey($key)
    {
        if ( ! $key && mb_strlen($key) < 1) {
            $___ret = null;

            return $___ret;
        }

        $rowset
            = new CB_RowSet($this->_utility->getTableInfo(GRN_MAIL_SERVER_TABLE));
        $rowset->addCondition($rowset->queryf("col_foreign_key = '@S'", $key));
        $row = $rowset->iterate();
        $rowset->destroy();

        if ( ! is_object($row)) {
            $___ret = null;

            return $___ret;
        }

        return $row;
    }

    /**
     * 指定されたIDでメールアカウントデータをDBから取得
     *
     * @access private
     *
     * @param   string $id メールアカウントID
     *
     * @return  GRN_Mail_Account|null       メールアカウントデータ(GRN_Mail_Account) or null
     */
    function _getAccountRow($id)
    {
        if (is_null($id) || (strlen($id) == 0)) {
            // データ不正
            assert('FALSE');
            {
                $___ret = null;

                return $___ret;
            }
        }

        $table = $this->_utility->getTableInfo(GRN_MAIL_ACCOUNT_TABLE);
        $db = $table->getDBConnection();
        $id = $db->escape($id);
        $row = $table->getRow($id);
        if ( ! is_object($row) || is_null($row->get('user'))) {
            {
                $___ret = null;

                return $___ret;
            }
        }

        return $row;
    }

    /**
     * @access private
     */
    function _getAccountRowByForeignKey($key)
    {
        if ( ! $key && mb_strlen($key) < 1) {
            $___ret = null;

            return $___ret;
        }

        $rowset
            = new CB_RowSet($this->_utility->getTableInfo(GRN_MAIL_ACCOUNT_TABLE));
        $rowset->addCondition($rowset->queryf("col_foreign_key = '@S'", $key));
        $row = $rowset->iterate();
        $rowset->destroy();

        if ( ! is_object($row) || is_null($row->get('user'))) {
            $___ret = null;

            return $___ret;
        }

        return $row;
    }

    /**
     * 指定されたIDのアカウントに関するデータを全て削除
     *
     * @param          $user
     * @param   string $account_id アカウントID
     *
     * @return  boolean
     */
    function _clearAllAccountMailData($user, $account_id)
    {
        assert('is_object( $user )');
        assert('! is_null( $account_id )');
        if ( ! is_object($user)) {
            return;
        }

        // アカウントの全フォルダ削除
        $rowset
            = new CB_RowSet($this->_utility->getTableInfo(GRN_MAIL_FOLDER_TABLE));
        if (is_null($rowset)) {
            return true;
        }
        //$rowset->addCondition( 'col_account=' . $account_id );
        $rowset->addCondition($rowset->queryf("col_account = '@S'",
            $account_id));

        $folder_logic = $this->_utility->getFolderLogic();

        // フォルダデータ一覧ループ
        $ret = true;
        while ( ! is_null($folder_row = $rowset->iterate())) {
            $id = $folder_row->getOID();
            if ( ! $folder_logic->deleteFolderData($id, true, true, false,
                false)
            ) {
                $ret = false;
                break;
            }
        }

        $this->_clearAccountDataListCache($user);

        return $ret;
    }

    /**
     * @access private
     */
    function _getDBConnection()
    {
        if (is_null($this->_dbconnection)) {
            $app_locator = GRN_ApplicationLocator::instance();
            $this->_dbconnection = $app_locator->getConnection('mail');
        }

        return $this->_dbconnection;
    }


    //////////////////////////////////////////////////////////////////////////
    // public method

    /**
     * 管理者権限を持っているか
     *
     */
    function isAdmin()
    {
        // 未実装
    }

    /**
     * Get system profile object for this module.
     *
     * @return CB_Profile
     */
    function getSystemProfile()
    {
        require_once('fw/profile.csp');
        $ret = cb_get_system_profile($this->getModuleId());

        return $ret;
    }

    /**
     * メールアプリが使用停止設定になっていないか
     *
     * @return  boolean     使用可能ならTRUE
     */
    function canUseMail()
    {
        // システムプロファイルを取得する
        $disable_mail = false;
        $profile = $this->getSystemProfile();
        if ($this->_utility->getProfileSetting($profile, 'disable_mail',
            $disable_mail)
        ) {
            return ! $disable_mail;
        }

        return true;
    }

    /**
     * 一般設定を行う
     *
     * @param   array $settings 設定
     *                          string  'disable_mail'           メールの使用停止
     *                          string  'check_mail_on_login'    ログイン時の新着メールチェック
     *                          string  'incremental_search'     インクリメンタルサーチ
     *                          string  'mail_display_plaintext' HTMLメールの初期表示
     *                          array   'auto_receive'           メールの自動受信
     *                          array   'screen_layout'          メール画面の設定
     *                          bool    'automatic_mail'         メールの自動転送
     *                          string  'all_permission'         メールアカウントの操作
     *                          string  'modify_account'         メールアカウントの操作
     *                          string  'leave'                  受信メールサーバーにメールを残す
     *                          string  'all_receive'            一括メール受信機能
     *                          string  'check_mails'            新着メールチェック機能
     *                          string  'send_html_mail'         HTML メール送信機能
     *                          string  'use_confirm'            開封確認機能
     *                          string  'use_status'             ステータス管理機能
     *                          string  'use_history'            送受信記録機能
     *                          string  'use_html_pict'          HTML メール内の画像参照
     *
     * @return  boolean 成否
     */
    function setGeneralSetting($settings)
    {
        if ( ! is_array($settings)) {
            return false;
        }

        $profile_settings = [];
        $disable_mail = '';
        if (isset($settings['disable_mail'])) {
            $disable_mail = $settings['disable_mail'];
            $profile_settings['disable_mail'] = intval($disable_mail) != 0;
        }

        $check_mail_on_login = '';
        if (isset($settings['check_mail_on_login'])) {
            $check_mail_on_login = $settings['check_mail_on_login'];
            $profile_settings['check_mail_on_login']
                = intval($check_mail_on_login) != 0;
        }

        $incremental_search = '';
        if (isset($settings['incremental_search'])) {
            $incremental_search = $settings['incremental_search'];
            $profile_settings['incremental_search']
                = intval($incremental_search) != 0;
        }

        $auto_receive = [];
        if (array_key_exists('auto_receive', $settings)) {
            $auto_receive = $settings['auto_receive'];
        }

        $profile_settings['auto_receive'] = $auto_receive;

        $screen_layout = [];
        if (array_key_exists('screen_layout', $settings)) {
            $screen_layout = $settings['screen_layout'];
        }
        $profile_settings['screen_layout'] = $screen_layout;

        $mail_display_plaintext = '';
        if (array_key_exists('mail_display_plaintext', $settings)) {
            $mail_display_plaintext = $settings['mail_display_plaintext'];
        }
        $profile_settings['mail_display_plaintext']
            = intval($mail_display_plaintext) != 0;

        $profile_settings['automatic_mail'] = cb_at($settings, 'automatic_mail',
            false);


        if (isset($settings['all_permission'])) {
            $profile_settings['deny_all_permission']
                = intval($settings['all_permission']) != 1;
        }
        if (isset($settings['modify_account'])) {
            $profile_settings['deny_modify_account']
                = intval($settings['modify_account']) != 1;
        }
        if (isset($settings['leave'])) {
            $profile_settings['deny_leave'] = intval($settings['leave']) != 1;
        }
        if (isset($settings['all_receive'])) {
            $profile_settings['deny_all_receive']
                = intval($settings['all_receive']) != 1;
        }
        if (isset($settings['check_mails'])) {
            $profile_settings['deny_check_mails']
                = intval($settings['check_mails']) != 1;
        }
        if (isset($settings['send_html_mail'])) {
            $profile_settings['deny_send_html_mail']
                = intval($settings['send_html_mail']) != 1;
        }
        if (isset($settings['use_confirm'])) {
            $profile_settings['deny_use_confirm']
                = intval($settings['use_confirm']) != 1;
            $this->_can_user_use_confirm
                = $profile_settings['deny_use_confirm'];
        }
        if (isset($settings['use_status'])) {
            $profile_settings['deny_use_status']
                = intval($settings['use_status']) != 1;
        }
        if (isset($settings['use_history'])) {
            $profile_settings['deny_use_history']
                = intval($settings['use_history']) != 1;
        }

        //HTML画像参照許可
        if (isset($settings['use_html_pict'])) {
            $profile_settings['deny_use_html_pict']
                = intval($settings['use_html_pict']) != 1;
        }

        if (count($profile_settings) == 0) {
            return true;
        }

        // システムプロファイルを取得する
        $profile = $this->getSystemProfile();
        assert('! is_null( $profile )');

        // start write log
        require_once('mail/inspection.csp');
        $inspection = GRN_Mail_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            $properties = [];
            $properties['disable_mail'] = $disable_mail;
            $properties['check_mail_on_login'] = $check_mail_on_login;
            if ($auto_receive['is_setting']) {
                if ($auto_receive['interval_time'] > 0) {
                    $properties['auto_receive_period']
                        = $auto_receive['interval_time'];
                }
                $scheduled_times = $auto_receive['scheduled_times'];
                if (is_array($scheduled_times)) {
                    $i = 1;
                    foreach (array_keys($scheduled_times) as $key) {
                        $scheduled_time = $scheduled_times[$key];
                        if (strlen($scheduled_time->hour) > 0) {
                            if (strlen($scheduled_time->hour) == 1) {
                                $hour = '0' . $scheduled_time->hour;
                            } else {
                                $hour = $scheduled_time->hour;
                            }
                            $min = $scheduled_time->minute;
                            if (strlen($min) == 0 || $min == 0) {
                                $min = '00';
                            }
                            if (strlen($min) == 1) {
                                $min = '0' . $min;
                            }
                            $auto_receive_time = $hour . $min;
                            $properties['auto_receive_time_' . $i]
                                = $auto_receive_time;
                            $i++;
                        }
                    }
                }
            }
            $properties['incremental_search'] = $incremental_search;
            $properties['deny_use_html_pict']
                = $profile_settings['deny_use_html_pict']
                ? 1 : 0;
            $properties['mail_display_plaintext']
                = $profile_settings['mail_display_plaintext']
                ? 1 : 0;
            $properties['deny_use_history']
                = $profile_settings['deny_use_history']
                ? 1 : 0;
            $deny_all_permission = false;
            if (array_key_exists('deny_all_permission', $profile_settings)) {
                $deny_all_permission = $profile_settings['deny_all_permission'];
            }
            $deny_modify_account = false;
            if (array_key_exists('deny_modify_account', $profile_settings)) {
                $deny_modify_account = $profile_settings['deny_modify_account'];
            }
            if ($deny_all_permission) {
                if ($deny_modify_account) {
                    $allow_account_operation = 'none';
                } else {
                    $allow_account_operation = 'modify';
                }
            } else {
                $allow_account_operation = 'all';
            }
            $properties['allow_account_operation'] = $allow_account_operation;
            $properties['deny_leave']
                = $profile_settings['deny_leave']
                ? 1 : 0;
            $properties['deny_check_mails']
                = $profile_settings['deny_check_mails']
                ? 1 : 0;
            $properties['deny_all_receive']
                = $profile_settings['deny_all_receive']
                ? 1 : 0;
            $properties['deny_send_html_mail']
                = $profile_settings['deny_send_html_mail']
                ? 1 : 0;
            $properties['automatic_mail']
                = $profile_settings['automatic_mail'];
            $properties['deny_use_confirm']
                = $profile_settings['deny_use_confirm']
                ? 1 : 0;
            $properties['deny_use_status']
                = $profile_settings['deny_use_status']
                ? 1 : 0;
            $properties['screen_layout_2pane'] = $screen_layout['2pane'] ? 1
                : 0;
            $properties['screen_layout_3pane'] = $screen_layout['3pane'] ? 1
                : 0;
            $inspection->writeInspectionLog('config', 'general', $properties);
        }

        //end write log

        return $this->_utility->setProfileSetting($profile, $profile_settings);
    }

    /**
     * 一般設定を取得する
     *
     * @param   array $settings 設定を受け取る
     *                          boolean 'disable_mail'          メールの使用停止
     *                          boolean 'check_mail_on_login'   ログイン時の新着メールチェック
     *
     * @return  boolean 成否
     */
    function getGeneralSetting(& $settings)
    {
        // システムプロファイルを取得する
        $profile = $this->getSystemProfile();
        assert('! is_null( $profile )');

        $settings = [];
        if ( ! $this->_utility->getProfileSetting($profile, 'disable_mail',
            $settings['disable_mail'])
        ) {
            // デフォルト
            $settings['disable_mail'] = false;
        }

        if ( ! $this->_utility->getProfileSetting($profile,
            'check_mail_on_login', $settings['check_mail_on_login'])
        ) {
            // デフォルト
            $settings['check_mail_on_login'] = false;
        }

        if ( ! $this->_utility->getProfileSetting($profile, 'auto_receive',
            $settings['auto_receive'])
        ) {
            // デフォルト
            $settings['auto_receive'] = [];
        }

        if ( ! $this->_utility->getProfileSetting($profile,
            'incremental_search', $settings['incremental_search'])
        ) {
            // デフォルト
            $settings['incremental_search'] = true;
        }

        if ( ! $this->_utility->getProfileSetting($profile,
            'mail_display_plaintext', $settings['mail_display_plaintext'])
        ) {
            // デフォルト
            $settings['mail_display_plaintext'] = false;
        }

        if ( ! $this->_utility->getProfileSetting($profile, 'automatic_mail',
            $settings['automatic_mail'])
        ) {
            // デフォルト
            $settings['automatic_mail'] = true;
        }

        return true;
    }

    /**
     * サイズ制限設定を行う
     *
     * @param   array $settings 設定を受け取る
     *                          int     'user_limit'        ユーザーが使用できる総サイズ（MB）。-1の場合は無制限
     *                          int     'receive_limit'     受信可能なサイズ（KB）。-1の場合は無制限
     *                          int     'send_limit'        送信可能なサイズ（KB）。-1の場合は無制限
     *
     * @return  boolean 成否
     */
    function setSizeLimitSetting($settings)
    {
        if ( ! is_array($settings)) {
            return false;
        }

        $profile_settings = [];
        $user_limit = '';
        if (isset($settings['user_limit'])
            && ! is_null($settings['user_limit'])
        ) {
            $user_limit = intval($settings['user_limit']);
            if (($user_limit == -1) || ($user_limit > 0)) {
                $profile_settings['user_limit'] = $user_limit;
            }
        }

        $receive_limit = '';
        if (isset($settings['receive_limit'])
            && ! is_null($settings['receive_limit'])
        ) {
            $receive_limit = intval($settings['receive_limit']);

            /*** GRREQ-265 start ***/
            if (defined('ON_FOREST') && $receive_limit == -1) {
                cb_throw_error(E_GRN_FOREST_MAIL_RECEIVE_LIMIT_OVER);
            }
            /*** GRREQ-265 end ***/

            if (($receive_limit == -1) || ($receive_limit > 0)) {
                $profile_settings['receive_limit'] = $receive_limit;
            }
        }

        $send_limit = '';
        if (isset($settings['send_limit'])
            && ! is_null($settings['send_limit'])
        ) {
            $send_limit = intval($settings['send_limit']);
            if (($send_limit == -1) || ($send_limit > 0)) {
                $profile_settings['send_limit'] = $send_limit;
            }
        }

        if (count($profile_settings) == 0) {
            return true;
        }

        // システムプロファイルを取得する
        $profile = $this->getSystemProfile();
        assert('! is_null( $profile )');
        if ($settings['user_limit'] !== '' && $settings['receive_limit'] !== ''
            && $settings['send_limit'] !== ''
        ) {
            // write log set mail size limit
            require_once('mail/inspection.csp');
            $inspection = GRN_Mail_Inspection::getInstance();
            if ($inspection->isEnabled()) {
                $properties = [
                    'user_limit'     => $user_limit,
                    'retrieve_limit' => $receive_limit,
                    'send_limit'     => $send_limit
                ];
                $inspection->writeInspectionLog('config', 'mail_limit',
                    $properties);
            }
        }

        return $this->_utility->setProfileSetting($profile, $profile_settings);
    }

    /**
     * Size limit setting user
     *
     * @param   array $settings 設定を受け取る
     *                          int     'user_limit'        ユーザーが使用できる総サイズ（MB）。-1の場合は無制限
     *                          int     'receive_limit'     受信可能なサイズ（KB）。-1の場合は無制限
     *                          int     'send_limit'        送信可能なサイズ（KB）。-1の場合は無制限
     *                          int     'user_id'        user ID that need to setting size limit
     * @param         $user_id
     *
     * @return  boolean 成否
     */
    function setSizeUserLimitSetting($settings, $user_id)
    {
        if ( ! is_array($settings)) {
            return false;
        }
        if ($user_id == null || $user_id === '') {
            return false;
        }
        $profile_settings = [];
        if ($settings['user_limit_' . $user_id] === ''
            || $settings['receive_limit_' . $user_id] === ''
            || $settings['send_limit_' . $user_id] === ''
        ) {
            return;
        }
        $user_limit = '';
        if (isset($settings['user_limit_' . $user_id])
            && ! is_null($settings['user_limit_' . $user_id])
        ) {
            $user_limit = intval($settings['user_limit_' . $user_id]);
            if (($user_limit == -1) || ($user_limit > 0)) {
                $profile_settings['user_limit_' . $user_id] = $user_limit;
            }
        }

        $receive_limit = '';
        if (isset($settings['receive_limit_' . $user_id])
            && ! is_null($settings['receive_limit_' . $user_id])
        ) {
            $receive_limit = intval($settings['receive_limit_' . $user_id]);

            /*** GRREQ-265 start ***/
            if (defined('ON_FOREST') && $receive_limit == -1) {
                cb_throw_error(E_GRN_FOREST_MAIL_RECEIVE_LIMIT_OVER);
            }
            /*** GRREQ-265 end ***/

            if (($receive_limit == -1) || ($receive_limit > 0)) {
                $profile_settings['receive_limit_' . $user_id] = $receive_limit;
            }
        }

        $send_limit = '';
        if (isset($settings['send_limit_' . $user_id])
            && ! is_null($settings['send_limit_' . $user_id])
        ) {
            $send_limit = intval($settings['send_limit_' . $user_id]);
            if (($send_limit == -1) || ($send_limit > 0)) {
                $profile_settings['send_limit_' . $user_id] = $send_limit;
            }
        }
        if (count($profile_settings) == 0) {
            return true;
        }

        // システムプロファイルを取得する
        $profile = $this->getSystemProfile();
        assert('! is_null( $profile )');

        // write log set user mail size limit
        require_once('mail/inspection.csp');
        $inspection = GRN_Mail_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            $properties = [
                'uid'            => $user_id,
                'user_limit'     => $user_limit,
                'retrieve_limit' => $receive_limit,
                'send_limit'     => $send_limit
            ];
            $inspection->writeInspectionLog('config', 'user_mail_limit',
                $properties);
        }

        return $this->_utility->setProfileSetting($profile, $profile_settings);
    }

    /**
     * サイズ制限設定を取得する
     *
     * @param   array $settings 設定を受け取る
     *                          int     'user_limit'        ユーザーが使用できる総サイズ（MB）。-1の場合は無制限
     *                          int     'receive_limit'     受信可能なサイズ（KB）。-1の場合は無制限
     *                          int     'send_limit'        送信可能なサイズ（KB）。-1の場合は無制限
     *                          int     'user_id'       user ID that need to get value size limit
     * @param         $user_id
     *
     * @return  boolean 成否
     */
    function getSizeUserLimitSetting(& $settings, $user_id)
    {
        // システムプロファイルを取得する
        $profile = $this->getSystemProfile();
        assert('! is_null( $profile )');
        $settings = [];
        if ( ! $this->_utility->getProfileSetting($profile,
            'user_limit_' . $user_id, $settings['user_limit_' . $user_id])
        ) {
            // デフォルト\
            if ( ! $this->_utility->getProfileSetting($profile, 'user_limit',
                $settings['user_limit'])
            ) {
                $settings['user_limit_' . $user_id]
                    = GRN_MAIL_DEFAULT_USER_SIZE_LIMIT;
            } else {
                $settings['user_limit_' . $user_id] = $settings['user_limit'];
            }
        }

        if ( ! $this->_utility->getProfileSetting($profile,
            'receive_limit_' . $user_id, $settings['receive_limit_' . $user_id])
        ) {
            // デフォルト
            if ( ! $this->_utility->getProfileSetting($profile, 'receive_limit',
                $settings['receive_limit'])
            ) {
                $settings['receive_limit_' . $user_id]
                    = GRN_MAIL_DEFAULT_RECEIVE_SIZE_LIMIT;
            } else {
                $settings['receive_limit_' . $user_id]
                    = $settings['receive_limit'];;
            }
        }

        if ( ! $this->_utility->getProfileSetting($profile,
            'send_limit_' . $user_id, $settings['send_limit_' . $user_id])
        ) {
            // デフォルト
            if ( ! $this->_utility->getProfileSetting($profile, 'send_limit',
                $settings['send_limit'])
            ) {
                $settings['send_limit_' . $user_id]
                    = GRN_MAIL_DEFAULT_SEND_SIZE_LIMIT;
            } else {
                $settings['send_limit_' . $user_id] = $settings['send_limit'];
            }
        }

        return true;
    }

    /**
     * サイズ制限設定を取得する
     *
     * @param   array $settings 設定を受け取る
     *                          int     'user_limit'        ユーザーが使用できる総サイズ（MB）。-1の場合は無制限
     *                          int     'receive_limit'     受信可能なサイズ（KB）。-1の場合は無制限
     *                          int     'send_limit'        送信可能なサイズ（KB）。-1の場合は無制限
     *
     * @return  boolean 成否
     */
    function getSizeLimitSetting(& $settings)
    {
        // システムプロファイルを取得する
        $profile = $this->getSystemProfile();
        assert('! is_null( $profile )');

        $settings = [];
        if ( ! $this->_utility->getProfileSetting($profile, 'user_limit',
            $settings['user_limit'])
        ) {
            // デフォルト
            $settings['user_limit'] = GRN_MAIL_DEFAULT_USER_SIZE_LIMIT;
        }

        if ( ! $this->_utility->getProfileSetting($profile, 'receive_limit',
            $settings['receive_limit'])
        ) {
            // デフォルト
            $settings['receive_limit'] = GRN_MAIL_DEFAULT_RECEIVE_SIZE_LIMIT;
        }

        if ( ! $this->_utility->getProfileSetting($profile, 'send_limit',
            $settings['send_limit'])
        ) {
            // デフォルト
            $settings['send_limit'] = GRN_MAIL_DEFAULT_SEND_SIZE_LIMIT;
        }

        return true;
    }

    /**
     * Remove profile artribute mail size limit for each user
     *
     * @param   int   $user_id  UserID who have mail account
     * @param   array $settings 設定を受け取る
     *                          int     'user_limit_'.$user_id        ユーザーが使用できる総サイズ（MB）。-1の場合は無制限
     *                          int     'receive_limit_'.$user_id     受信可能なサイズ（KB）。-1の場合は無制限
     *                          int     'send_limit_'.$user_id        送信可能なサイズ（KB）。-1の場合は無制限
     *
     * @return  boolean 成否
     */
    function removeSizeUserLimitSetting(& $settings, $user_id)
    {
        // システムプロファイルを取得する
        $profile = $this->getSystemProfile();
        assert('! is_null( $profile )');
        if (is_null($user_id) || $user_id === '') {
            return false;
        }
        $settings = [];
        if ($this->_utility->getProfileSetting($profile,
            'user_limit_' . $user_id, $settings['user_limit_' . $user_id])
        ) {
            //Remove named attribute.
            $name = 'user_limit_' . $user_id;
            $profile->removeAttribute($name);
        }
        if ($this->_utility->getProfileSetting($profile,
            'receive_limit_' . $user_id, $settings['receive_limit_' . $user_id])
        ) {
            //Remove named attribute.
            $name = 'receive_limit_' . $user_id;
            $profile->removeAttribute($name);
        }
        if ($this->_utility->getProfileSetting($profile,
            'send_limit_' . $user_id, $settings['send_limit_' . $user_id])
        ) {
            //Remove named attribute.
            $name = 'send_limit_' . $user_id;
            $profile->removeAttribute($name);
        }

        return true;
    }

    /**
     * ユーザーの権限設定を取得する
     *
     * @param   array $settings 設定を受け取る
     *                          boolean 'all_permission'    メールアカウントのすべての権限
     *                          boolean 'modify_account'    メールアカウントの変更
     *                          boolean 'leave'             受信メールサーバーにメールを残す
     *                          boolean 'all_receive'       一括メール受信機能
     *                          boolean 'check_mails'       新着メールチェック機能
     *                          boolean 'send_html_mail'    HTMLメール送信許可
     *                          boolean 'use_html_pict'     HTMLメール画像表示許可
     *
     * @return  boolean 成否
     */
    function getUserPrivilegeSetting(& $settings)
    {
        $settings = [
            'all_permission' => $this->canUserAllPermission(),
            'modify_account' => $this->canUserModifyAccount(),
            'leave'          => $this->canUserLeaveServerMail(),
            'all_receive'    => $this->canUserAllReceiveMail(),
            'check_mails'    => $this->canUserCheckMail(),
            'send_html_mail' => $this->canUserSendHtmlMail(),
            'use_confirm'    => $this->canUserUseConfirm(),
            'use_status'     => $this->canUserUseStatus(),
            'use_history'    => $this->canUserUseHistory(),
            'use_html_pict'  => $this->canUserUseHtmlMailPicture()
        ];

        return true;
    }

    /**
     * 個人設定でメールアカウントのすべての権限があるか
     *
     * @return  boolean 権限あり
     */
    function canUserAllPermission()
    {
        // システムプロファイルを取得する
        $profile = $this->getSystemProfile();
        assert('! is_null( $profile )');

        $temp = null;
        if ( ! $this->_utility->getProfileSetting($profile,
            'deny_all_permission', $temp)
        ) {
            // デフォルト
            $all_permission = true;
        } else {
            $temp = (int)$temp;
            $all_permission = (is_null($temp) || ($temp !== 1));
        }

        return $all_permission;
    }

    /**
     * 個人設定でメールアカウントの変更権限があるか
     *
     * @return  boolean 権限あり
     */
    function canUserModifyAccount()
    {
        // システムプロファイルを取得する
        $profile = $this->getSystemProfile();
        assert('! is_null( $profile )');

        $temp = null;
        if ( ! $this->_utility->getProfileSetting($profile,
            'deny_modify_account', $temp)
        ) {
            // デフォルト
            $modify_account = true;
        } else {
            $temp = (int)$temp;
            $modify_account = (is_null($temp) || ($temp !== 1));
        }

        return $modify_account;
    }

    /**
     * 個人設定で受信メールサーバーにメールを残す権限があるか
     *
     * @return  boolean 権限あり
     */
    function canUserLeaveServerMail()
    {
        // システムプロファイルを取得する
        $profile = $this->getSystemProfile();
        assert('! is_null( $profile )');

        $temp = null;
        if ( ! $this->_utility->getProfileSetting($profile, 'deny_leave',
            $temp)
        ) {
            // デフォルト
            $leave = true;
        } else {
            $temp = (int)$temp;
            $leave = (is_null($temp) || ($temp !== 1));
        }

        return $leave;
    }


    /**
     * 個人設定で一括メール受信を行う権限があるか
     *
     * @return  boolean 権限あり
     */
    function canUserAllReceiveMail()
    {
        // システムプロファイルを取得する
        $profile = $this->getSystemProfile();
        assert('! is_null( $profile )');

        $temp = null;
        if ( ! $this->_utility->getProfileSetting($profile, 'deny_all_receive',
            $temp)
        ) {
            // デフォルト
            $all_receive = true;
        } else {
            $temp = (int)$temp;
            $all_receive = (is_null($temp) || ($temp !== 1));
        }

        return $all_receive;
    }

    /**
     * 個人設定で新着メールチェック権限があるか
     *
     * @return  boolean 権限あり
     */
    function canUserCheckMail()
    {
        // システムプロファイルを取得する
        $profile = $this->getSystemProfile();
        assert('! is_null( $profile )');

        $temp = null;
        if ( ! $this->_utility->getProfileSetting($profile, 'deny_check_mails',
            $temp)
        ) {
            // デフォルト
            $check_mails = true;
        } else {
            $temp = (int)$temp;
            $check_mails = (is_null($temp) || ($temp !== 1));
        }

        return $check_mails;
    }

    /**
     * ユーザーがHTMLメール送信権限があるか
     *
     * @return  boolean 権限あり
     */
    function canUserSendHtmlMail()
    {
        // システムプロファイルを取得する
        $profile = $this->getSystemProfile();
        assert('! is_null( $profile )');

        $temp = null;
        if ( ! $this->_utility->getProfileSetting($profile,
            'deny_send_html_mail', $temp)
        ) {
            // デフォルト
            $html_mail = true;
        } else {
            $temp = (int)$temp;
            $html_mail = (is_null($temp) || ($temp !== 1));
        }

        return $html_mail;
    }

    /**
     * ユーザーが開封確認機能使用権限があるか
     *
     * @return  boolean 権限あり
     */
    function canUserUseConfirm()
    {
        if ( ! is_null($this->_can_user_use_confirm)) {
            // cache
            return $this->_can_user_use_confirm;
        }

        // システムプロファイルを取得する
        $profile = $this->getSystemProfile();
        assert('! is_null( $profile )');

        $temp = null;
        if ( ! $this->_utility->getProfileSetting($profile, 'deny_use_confirm',
            $temp)
        ) {
            // デフォルト
            $use_confirm = true;
        } else {
            $temp = (int)$temp;
            $use_confirm = (is_null($temp) || ($temp !== 1));
        }

        $this->_can_user_use_confirm = $use_confirm;

        return $use_confirm;
    }

    /**
     * ユーザーがステータス管理機能使用権限があるか
     *
     * @return  boolean 権限あり
     */
    function canUserUseStatus()
    {
        // システムプロファイルを取得する
        $profile = $this->getSystemProfile();
        assert('! is_null( $profile )');

        $temp = null;
        if ( ! $this->_utility->getProfileSetting($profile, 'deny_use_status',
            $temp)
        ) {
            // デフォルト
            $use_status = true;
        } else {
            $temp = (int)$temp;
            $use_status = (is_null($temp) || ($temp !== 1));
        }

        return $use_status;
    }

    /**
     * ユーザーが送受信記録機能使用権限があるか
     *
     * @return  boolean 権限あり
     */
    function canUserUseHistory()
    {
        // システムプロファイルを取得する
        $profile = $this->getSystemProfile();
        assert('! is_null( $profile )');

        $temp = null;
        if ( ! $this->_utility->getProfileSetting($profile, 'deny_use_history',
            $temp)
        ) {
            // デフォルト
            $use_history = true;
        } else {
            $temp = (int)$temp;
            $use_history = (is_null($temp) || ($temp !== 1));
        }

        return $use_history;
    }

    /**
     * ユーザーがHTMLメール内の画像参照権限があるか
     *
     * @return  boolean 権限あり
     */
    function canUserUseHtmlMailPicture()
    {
        // システムプロファイルを取得する
        $profile = $this->getSystemProfile();
        assert('! is_null( $profile )');

        $temp = null;
        if ( ! $this->_utility->getProfileSetting($profile,
            'deny_use_html_pict', $temp)
        ) {
            // デフォルト
            $html_pict = true;
        } else {
            $temp = (int)$temp;
            $html_pict = (is_null($temp) || ($temp !== 1));
        }

        return $html_pict;
    }

    /**
     * returns system permission of automatic mail sending service
     *
     * @return bool
     */
    function hasPermissionOfAutomaticMailService()
    {
        $settings = [];
        $this->getGeneralSetting($settings);

        return $settings["automatic_mail"];


    }

    //////////////////////////////////////////////////////////////////////////

    /**
     * メールサーバーコードの重複をチェックする
     * 指定したコードのサーバーが存在しないか、指定されたサーバーIDと一致する場合に重複なしとする
     *
     * @param string $key           コード
     * @param string $server_id     メールサーバーID
     * @param bool   $b_throw_error 重複を見つけた場合にエラーを発生するならTRUE
     *
     * @return bool  重複のある場合にFALSE、それ以外でTRUE
     */
    function checkServerForeignKey($key, $server_id, $b_throw_error = true)
    {
        $server = $this->_getServerRowByForeignKey($key);
        if ( ! is_object($server)) {
            return true;
        }

        if ($server->getOID() != $server_id) {
            if ($b_throw_error) {
                cb_throw_error(E_GRN_MAIL_SERVER_DUPLICATE_FOREIGN_KEY);
            }

            return false;
        }

        return true;
    }

    /**
     * メールサーバー設定の件数を取得
     *
     * @return  int     メールサーバーデータ数
     */
    function getServerDataCount()
    {
        // 総データ数取得
        $rowset
            = new CB_RowSet($this->_utility->getTableInfo(GRN_MAIL_SERVER_TABLE));
        $rowset->applyGroupFunctions(['count' => 'COUNT(*)']);
        $result = $rowset->iterate();
        $rowset->destroy();

        return $result['count'];
    }

    /**
     * 指定されたIDのメールサーバー情報を取得
     *
     * @param   string $id メールサーバーID
     *
     * @return  mixed       メールサーバー情報(array) or null
     */
    function getServerData($id)
    {
        if (is_null($id) || (strlen($id) == 0)) {
            // データ不正
            //assert( 'FALSE' );
            return null;
        }

        // メールサーバーデータを取得
        $row = $this->_getServerRow($id);
        if ( ! is_object($row)) {
            // データが見つからない
            cb_throw_error(E_GRN_MAIL_SERVER_DATA_NOT_FOUND);
            //return null;
        }

        $data = $row->getDataProperties();

        return $data;
    }

    /**
     * メールサーバーの追加
     *
     * @param   string  $foreign_key メールサーバーコード
     * @param   string  $name        名前
     * @param   string  $memo        メモ
     * @param   object  $server_info メールサーバー情報（GRN_Mail_ServerInfo）
     * @param   boolean $disabled    使用停止フラグ
     * @param   int     $list_index  順番
     *
     * @return  string  メールサーバーオブジェクトID
     */
    function addServerData(
        $foreign_key,
        $name,
        $memo,
        & $server_info,
        $disabled = false,
        $list_index = null
    ) {
        assert('is_object( $server_info )');

        $this->isAdmin();

        // メールサーバーコードの空 and 重複チェック
        if ( ! is_null($foreign_key)) {
            if (strlen($foreign_key) === 0) {
                cb_throw_error(E_GRN_MAIL_SERVER_EMPTY_FOREIGN_KEY);
            }

            // 重複は許可しない
            $this->checkServerForeignKey($foreign_key, 0);
        }

        // 送信メールサーバーと接続テスト
        require_once('mail/connection.csp');
        $manager = GRN_Mail_ConnectionLogicManager::getInstance();
        $listener = $manager->getErrorListener();
        $logger = $manager->getLogger();
        if ( ! GRN_Mail_ConnectionLogic::static_testSmtpConnection($server_info,
            $listener, $logger, $server_info->smtp_timeout_sec)
        ) {
            // 送信メールサーバーが見つからない
            cb_throw_error(E_GRN_MAIL_FAILED_TO_CONNECT_SMTP_SERVER, null,
                ['cause' => $listener->formatErrors()]);
        }

        // 受信メールサーバーと接続テスト
        $listener->clearErrors();
        if ( ! GRN_Mail_ConnectionLogic::static_testRetrieveConnection($server_info,
            $listener, $logger)
        ) {
            // 受信メールサーバーが見つからない
            cb_throw_error(E_GRN_MAIL_FAILED_TO_CONNECT_RETRIEVE_SERVER, null,
                ['cause' => $listener->formatErrors()]);
        }

        // メールサーバーテーブルにデータを追加
        $table = $this->_utility->getTableInfo(GRN_MAIL_SERVER_TABLE);
        $row = $table->newRow();
        if ( ! is_object($row)) {
            // データ追加失敗
            cb_throw_error(E_GRN_MAIL_FAILED_TO_ADD_SERVER_DATA);
        }

        // ログインユーザー取得
        $login = $this->_utility->getLoginUser();

        $properties = [
            'server_id'            => $row->getOID(),
            'foreign_key'          => $foreign_key,
            'name'                 => $name,
            'memo'                 => $memo,
            'smtp'                 => $server_info->smtp,
            'smtp_port'            => $server_info->smtp_port,
            'smtp_ssl'             => $server_info->smtp_ssl,
            'smtp_starttls'        => $server_info->smtp_tls,
            'smtp_auth'            => $server_info->smtp_auth,
            'smtp_set_account'     => $server_info->smtp_set_account,
            'pop_before_smtp'      => $server_info->pop_before_smtp,
            'pbsmtp_wait_sec'      => $server_info->pbsmtp_wait_sec,
            'smtp_timeout_sec'     => $server_info->smtp_timeout_sec,
            'retrieve_protocol'    => $server_info->retrieve_protocol,
            'retrieve'             => $server_info->retrieve,
            'retrieve_port'        => $server_info->retrieve_port,
            'retrieve_ssl'         => $server_info->retrieve_ssl,
            'retrieve_auth'        => $server_info->retrieve_auth,
            'disabled'             => $disabled,
            'retrieve_timeout_sec' => $server_info->retrieve_timeout_sec
        ];

        if ( ! is_null($list_index)) {
            $properties['list_index'] = $list_index;
        }

        if ($row->initialize($login, $properties) === false) {
            // データ追加失敗
            cb_throw_error(E_GRN_MAIL_FAILED_TO_ADD_SERVER_DATA);
        }

        return $row->getOID();
    }

    /**
     * メールサーバーの更新
     *
     * @param   string  $id          メールサーバーID
     * @param   string  $foreign_key メールサーバーコード
     * @param   string  $name        名前
     * @param   string  $memo        メモ
     * @param   object  $server_info メールサーバー情報（GRN_Mail_ServerInfo）
     * @param   boolean $disabled    使用停止フラグ
     * @param   int     $list_index  順番
     *
     * @return  boolean 成否
     */
    function modifyServerData(
        $id,
        $foreign_key,
        $name,
        $memo,
        & $server_info,
        $disabled = false,
        $list_index = null
    ) {
        $this->isAdmin();

        // メールサーバーデータを取得
        $row = $this->_getServerRow($id);
        if ( ! is_object($row)) {
            // データが見つからない
            cb_throw_error(E_GRN_MAIL_SERVER_DATA_NOT_FOUND);
        }

        // メールサーバーコードの重複チェック
        if ( ! is_null($foreign_key)) {
            if (strlen($foreign_key) === 0) {
                cb_throw_error(E_GRN_MAIL_SERVER_EMPTY_FOREIGN_KEY);
            }

            // 重複は許可しない
            $this->checkServerForeignKey($foreign_key, $id);
        }

        // 送信メールサーバーと接続テスト
        require_once('mail/connection.csp');
        $manager = GRN_Mail_ConnectionLogicManager::getInstance();
        $listener = $manager->getErrorListener();
        $logger = $manager->getLogger();
        if ( ! GRN_Mail_ConnectionLogic::static_testSmtpConnection($server_info,
            $listener, $logger, $server_info->smtp_timeout_sec)
        ) {
            // 送信メールサーバーが見つからない
            cb_throw_error(E_GRN_MAIL_FAILED_TO_CONNECT_SMTP_SERVER, null,
                ['cause' => $listener->formatErrors()]);
        }

        // 受信メールサーバーと接続テスト
        $listener->clearErrors();
        if ( ! GRN_Mail_ConnectionLogic::static_testRetrieveConnection($server_info,
            $listener, $logger, $server_info->retrieve_timeout_sec)
        ) {
            // 受信メールサーバーが見つからない
            cb_throw_error(E_GRN_MAIL_FAILED_TO_CONNECT_RETRIEVE_SERVER, null,
                ['cause' => $listener->formatErrors()]);
        }

        // ログインユーザー取得
        $login = $this->_utility->getLoginUser();

        $properties = [
            'server_id'            => $row->getOID(),
            'foreign_key'          => $foreign_key,
            'name'                 => $name,
            'memo'                 => $memo,
            'smtp'                 => $server_info->smtp,
            'smtp_port'            => $server_info->smtp_port,
            'smtp_ssl'             => $server_info->smtp_ssl,
            'smtp_starttls'        => $server_info->smtp_tls,
            'smtp_auth'            => $server_info->smtp_auth,
            'smtp_set_account'     => $server_info->smtp_set_account,
            'pop_before_smtp'      => $server_info->pop_before_smtp,
            'pbsmtp_wait_sec'      => $server_info->pbsmtp_wait_sec,
            'smtp_timeout_sec'     => $server_info->smtp_timeout_sec,
            'retrieve_protocol'    => $server_info->retrieve_protocol,
            'retrieve'             => $server_info->retrieve,
            'retrieve_port'        => $server_info->retrieve_port,
            'retrieve_ssl'         => $server_info->retrieve_ssl,
            'retrieve_auth'        => $server_info->retrieve_auth,
            'disabled'             => $disabled,
            'retrieve_timeout_sec' => $server_info->retrieve_timeout_sec
        ];

        if ( ! is_null($list_index)) {
            $properties['list_index'] = $list_index;
        }

        // プロパティセット
        $row->setProperties($login, $properties);

        return true;
    }

    /**
     * メールサーバーの削除
     *
     * @param string[] $server_ids メールサーバーIDの配列
     *
     * @return  int     削除数
     */
    function deleteServerDatas(& $server_ids)
    {
        $this->isAdmin();

        $num = 0;
        if (is_array($server_ids) && (count($server_ids) > 0)) {
            foreach ($server_ids as $id) {
                // メールサーバーデータを取得
                $row = $this->_getServerRow($id);
                if ( ! is_object($row)) {
                    // データが見つからない
                    //cb_throw_error( E_GRN_MAIL_SERVER_DATA_NOT_FOUND );
                    continue;
                }
                // write log delete mail server
                require_once('mail/inspection.csp');
                $inspection = GRN_Mail_Inspection::getInstance();
                if ($inspection->isEnabled()) {
                    $properties = [
                        'server_id'            => $row->getOID(),
                        'foreign_key'          => $row->get('foreign_key'),
                        'name'                 => $row->get('name'),
                        'smtp'                 => $row->get('smtp'),
                        'smtp_port'            => $row->get('smtp_port'),
                        'smtp_ssl'             => $row->get('smtp_ssl'),
                        'smtp_starttls'        => $row->get('reserve_int1'),
                        'smtp_auth'            => $row->get('smtp_auth'),
                        'pop_before_smtp'      => $row->get('pop_before_smtp'),
                        'pbsmtp_wait_sec'      => $row->get('pbsmtp_wait_sec'),
                        'smtp_timeout_sec'     => $row->get('smtp_timeout_sec'),
                        'retrieve_protocol'    => $row->get('retrieve_protocol'),
                        'retrieve'             => $row->get('retrieve'),
                        'retrieve_port'        => $row->get('retrieve_port'),
                        'retrieve_ssl'         => $row->get('retrieve_ssl'),
                        'retrieve_auth'        => $row->get('retrieve_auth'),
                        'retrieve_timeout_sec' => $row->get('retrieve_timeout_sec')
                    ];
                    if ($properties['smtp_auth'] !== 'NONE') {
                        if (array_key_exists('pop_before_smtp', $properties)) {
                            unset($properties['pop_before_smtp']);
                        }
                        if (array_key_exists('pbsmtp_wait_sec', $properties)) {
                            unset($properties['pbsmtp_wait_sec']);
                        }
                    }
                    if ($properties['retrieve_protocol'] !== 'POP3') {
                        if (array_key_exists('retrieve_auth', $properties)) {
                            unset($properties['retrieve_auth']);
                        }
                        if (array_key_exists('retrieve_ssl', $properties)) {
                            $properties['imap4_ssl']
                                = $row->get('retrieve_ssl');
                        }
                    } else {
                        if (array_key_exists('retrieve_ssl', $properties)) {
                            $properties['pop3_ssl'] = $row->get('retrieve_ssl');
                        }
                    }
                    $inspection->writeInspectionLog('delete', 'server',
                        $properties);
                }

                if ($row->delete()) {
                    $num++;
                }
            }
        }

        return $num;
    }

    /**
     * メールサーバーの順番を設定する
     *
     * @param array $server_ids メールサーバーIDの配列、格納された順番にメールサーバーを配置する
     *
     * @return boolean          成否
     */
    function changeServerOrder(& $server_ids)
    {
        assert('is_array( $server_ids )');

        $user = null;               // 更新情報を記録しないためにnullを渡す
        $list_index = 0;
        foreach ($server_ids as $id) {
            // メールサーバーデータを取得
            $row = $this->_getServerRow($id);
            if ( ! is_object($row)) {
                // 見つからないデータは無視
                continue;
            }

            $list_index++;
            $row->set('list_index', $list_index);
            $row->updateData($user);
        }

        return true;
    }

    /**
     * メールサーバーデータ一覧の取得
     *
     * @param   boolean $reverse   ソート順。デフォルト:TRUE
     * @param   int     $offset    表示位置。デフォルト:-1
     * @param   int     $limit     表示件数。デフォルト:-1
     * @param   string  $sub_query サブ検索条件文
     *
     * @return  array   メールサーバーデータのリスト
     */
    function getServerDataList(
        $reverse = true,
        $offset = -1,
        $limit = -1,
        $sub_query = null
    ) {
        // メールサーバーデータリスト
        $data_list = [];

        $rowset
            = new CB_RowSet($this->_utility->getTableInfo(GRN_MAIL_SERVER_TABLE));
        if (is_null($rowset)) {
            return $data_list;
        }

        // サブ検索条件文を追加
        if ( ! is_null($sub_query) && 0 < strlen($sub_query)) {
            $rowset->addCondition($sub_query);
        }

        // ソート
        $rowset->addOrderColumn('col_list_index', $reverse);      // ソート
        $rowset->addOrderColumn(null, $reverse);                  // OID順

        // 取得範囲の設定
        if ( ! is_null($offset) && ($offset >= 0) && ! is_null($limit)
             && ($limit >= 0)
        ) {
            $rowset->limit($offset, $limit);
        }

        // メールサーバーデータ一覧ループ
        /** @var GRN_Mail_Server $row */
        while ( ! is_null($row = $rowset->iterate())) {
            if ( ! is_object($row)) {
                assert('FALSE');
                continue;
            }

            $data = $row->getDataProperties();
            if (is_null($data)) {
                assert('FALSE');
                continue;
            }

            $data_list[$row->getOID()] = $data;
        }

        return $data_list;
    }

    //////////////////////////////////////////////////////////////////////////

    /**
     * アカウントコードの重複をチェックする
     * 指定したコードのアカウントが存在しないか、指定されたアカウントIDと一致する場合に重複なしとする
     *
     * @param string $key           コード
     * @param string $account_id    アカウントID
     * @param bool   $b_throw_error 重複を見つけた場合にエラーを発生するならTRUE
     *
     * @return bool  重複のある場合にFALSE、それ以外でTRUE
     */
    function checkAccountForeignKey($key, $account_id, $b_throw_error = true)
    {
        $account = $this->_getAccountRowByForeignKey($key);
        if ( ! is_object($account)) {
            return true;
        }

        if ($account->getOID() != $account_id) {
            if ($b_throw_error) {
                cb_throw_error(E_GRN_MAIL_ACCOUNT_DUPLICATE_FOREIGN_KEY);
            }

            return false;
        }

        return true;
    }

    /**
     * 指定されたIDのメールアカウント情報を取得
     *
     * @param   string  $id            データID
     * @param   boolean $b_server      サーバー情報も取得するかどうか
     * @param   boolean $b_throw_error エラー発生時に例外をスローするか
     *
     * @return  mixed       メールアカウント情報(array) or null
     */
    function getAccountData($id, $b_server = false, $b_throw_error = false)
    {
        if (is_null($id) || (strlen($id) == 0)) {
            // データが見つからない
            if ($b_throw_error) {
                cb_throw_error(E_GRN_MAIL_ACCOUNT_DATA_NOT_FOUND);
            } else {
                return null;
            }
        }

        // メールアカウントデータを取得
        $row = $this->_getAccountRow($id);
        if ( ! is_object($row)) {
            // データが見つからない
            if ($b_throw_error) {
                cb_throw_error(E_GRN_MAIL_ACCOUNT_DATA_NOT_FOUND);
            } else {
                return null;
            }
        }

        $data = $row->getDataProperties($b_server);

        return $data;
    }

    /**
     * メールアカウントの追加（管理者のみ）
     *
     * @param   object  $user         アカウントを設定されるユーザー
     * @param   string  $foreign_key  アカウントコード
     * @param   string  $name         名前
     * @param   string  $memo         メモ
     * @param   object  $account_info アカウント情報（GRN_Mail_AccountInfo）
     * @param           $send_vcard
     * @param null      $default_bcc
     * @param null      $sender
     * @param   boolean $personal     個人設定フラグ
     * @param   boolean $disabled     使用停止フラグ
     * @param   int     $list_index   順番
     *
     * @return  string  オブジェクトID
     */
    function addAccountData(
        & $user,
        $foreign_key,
        $name,
        $memo,
        & $account_info,
        $send_vcard,
        $default_bcc = null,
        $sender = null,
        $personal = false,
        $disabled = false,
        $list_index = null
    ) {
        assert('is_object( $user )');
        assert('is_object( $account_info )');

        $this->isAdmin();

        // アカウントコードの重複チェック
        if ( ! is_null($foreign_key)) {
            if (strlen($foreign_key) === 0) {
                cb_throw_error(E_GRN_MAIL_ACCOUNT_EMPTY_FOREIGN_KEY);
            }

            // 重複は許可しない
            $this->checkAccountForeignKey($foreign_key, 0);
        }

        // アカウントテーブルにデータを追加
        $table = $this->_utility->getTableInfo(GRN_MAIL_ACCOUNT_TABLE);
        $row = $table->newRow();
        if ( ! is_object($row)) {
            // データ追加失敗
            cb_throw_error(E_GRN_MAIL_FAILED_TO_ADD_ACCOUNT_DATA);
        }

        // ログインユーザー取得
        $login = $this->_utility->getLoginUser();

        $properties = [
            'foreign_key'       => $foreign_key,
            'name'              => $name,
            'memo'              => $memo,
            'send_vcard'        => $send_vcard,
            'email'             => $account_info->email,
            'from_name'         => $account_info->from_name,
            'retrieve_account'  => $account_info->retrieve_account,
            'retrieve_password' => $account_info->retrieve_password,
            'retrieve_save'     => $account_info->getRetrieveSave(),
            'smtp_account'      => $account_info->smtp_account,
            'smtp_password'     => $account_info->smtp_password,
            'default_bcc'       => $default_bcc,
            'sender'            => $sender,
            'personal'          => $personal,
            'disabled'          => $disabled
        ];

        // メールサーバーデータを取得
        $server_row = $this->_getServerRow($account_info->server_id);
        if ( ! is_object($server_row)) {
            // データが見つからない
            cb_throw_error(E_GRN_MAIL_SERVER_DATA_NOT_FOUND);
        }

        // 受信メールサーバーと接続テスト
        require_once('mail/connection.csp');
        $manager = GRN_Mail_ConnectionLogicManager::getInstance();
        $listener = $manager->getErrorListener();
        $logger = $manager->getLogger();
        $server_info = $server_row->getServerInfo();
        if ( ! GRN_Mail_ConnectionLogic::static_testRetrieveConnectionWithAccount($server_info,
            $account_info, $listener, $logger)
        ) {
            // 受信メールサーバーにログインできない
            cb_throw_error(E_GRN_MAIL_FAILED_TO_CONNECT_RETRIEVE_SERVER, null,
                ['cause' => $listener->formatErrors()]);
        }

        $properties['user'] = $user;
        $properties['server'] = $server_row;

        if ( ! is_null($list_index)) {
            $properties['list_index'] = $list_index;
        }

        if ($row->initialize($login, $properties) === false) {
            // データ追加失敗
            cb_throw_error(E_GRN_MAIL_FAILED_TO_ADD_ACCOUNT_DATA);
        }
        // write log create mail account
        require_once('mail/inspection.csp');
        $inspection = GRN_Mail_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            $properties = [
                'account_id'       => $row->getOID(),
                'account_code'     => $foreign_key,
                'account_name'     => $name,
                'mail_server'      => $account_info->server_id,
                'email'            => $account_info->email,
                'retrieve_account' => $account_info->retrieve_account,
                'retrieve_save'    => $account_info->getRetrieveSave(),
                'smtp_account'     => $account_info->smtp_account,
                'disabled'         => $disabled ? 1 : 0
            ];
            if ($server_row->get('smtp_auth') === 'NONE') {
                unset($properties['smtp_account']);
            } else {
                if ($properties['smtp_account'] === '') {
                    unset($properties['smtp_account']);
                }
            }
            $inspection->writeInspectionLog('create', 'account', $properties);
        }
        // 削除されたアカウントを一番後ろに持ってくるために、順番変更を行う
        $account_list = $this->getAccountDataList($user, false);
        if (is_array($account_list)) {
            $account_ids = [];
            foreach (array_keys($account_list) as $key) {
                $account_ids[] = $key;
            }

            if (count($account_ids) > 0) {
                $this->changeAccountOrder($user, $account_ids);
            }
        }

        $this->_clearAccountDataListCache($user);

        return $row->getOID();
    }

    /**
     * メールアカウントの変更
     *
     * @param   string  $id           データID
     * @param   string  $foreign_key  アカウントコード
     * @param   string  $name         名前
     * @param   string  $memo         メモ
     * @param   object  $account_info アカウント情報（GRN_Mail_AccountInfo）
     * @param           $send_vcard
     * @param null      $default_bcc
     * @param null      $sender
     * @param   boolean $disabled     使用停止フラグ(nullの場合は変更しない)
     * @param   int     $list_index   順番(nullの場合は変更しない)
     *
     * @return  boolean
     */
    function modifyAccountData(
        $id,
        $foreign_key,
        $name,
        $memo,
        & $account_info,
        $send_vcard,
        $default_bcc = null,
        $sender = null,
        $disabled = null,
        $list_index = null
    ) {
        assert('is_object( $account_info )');

        // メールアカウントデータを取得
        $row = $this->_getAccountRow($id);
        if ( ! is_object($row)) {
            // データが見つからない
            cb_throw_error(E_GRN_MAIL_ACCOUNT_DATA_NOT_FOUND);
        }

        // アカウントコードの重複チェック
        if ( ! is_null($foreign_key)) {
            if (strlen($foreign_key) === 0) {
                cb_throw_error(E_GRN_MAIL_ACCOUNT_EMPTY_FOREIGN_KEY);
            }

            // 重複は許可しない
            $this->checkAccountForeignKey($foreign_key, $id);
        }

        // ログインユーザーと異なる場合は管理者権限が必要
        $user = $row->get('user');
        $login = $this->_utility->getLoginUser();
        if (is_null($user)
            || ( ! is_null($login)
                 && ($user->getOID() != $login->getOID()))
        ) {
            $this->isAdmin();
        }

        // メールサーバーデータを取得
        $server_row = $this->_getServerRow($account_info->server_id);
        if ( ! is_object($server_row)) {
            // データが見つからない
            cb_throw_error(E_GRN_MAIL_SERVER_DATA_NOT_FOUND);
        }

        // パスワードが入力されていない場合に変換
        if (strcmp($account_info->retrieve_password, '***************') === 0) {
            $account_info->retrieve_password = $row->get('retrieve_password');
        }
        if (strcmp($account_info->smtp_password, '***************') === 0) {
            $account_info->smtp_password = $row->get('smtp_password');
        }

        // 受信メールサーバーと接続テスト
        require_once('mail/connection.csp');
        $manager = GRN_Mail_ConnectionLogicManager::getInstance();
        $listener = $manager->getErrorListener();
        $logger = $manager->getLogger();
        $server_info = $server_row->getServerInfo();
        if ( ! GRN_Mail_ConnectionLogic::static_testRetrieveConnectionWithAccount($server_info,
            $account_info, $listener, $logger)
        ) {
            // 受信メールサーバーにログインできない
            cb_throw_error(E_GRN_MAIL_FAILED_TO_CONNECT_RETRIEVE_SERVER, null,
                ['cause' => $listener->formatErrors()]);
        }

        $properties = [
            'foreign_key'       => $foreign_key,
            'name'              => $name,
            'memo'              => $memo,
            'send_vcard'        => $send_vcard,
            'email'             => $account_info->email,
            'retrieve_account'  => $account_info->retrieve_account,
            'retrieve_password' => $account_info->retrieve_password,
            'retrieve_save'     => $account_info->getRetrieveSave(),
            'smtp_account'      => $account_info->smtp_account,
            'smtp_password'     => $account_info->smtp_password,
            'default_bcc'       => $default_bcc,
            'sender'            => $sender,
            'disabled'          => $disabled,
        ];

        $properties['user'] = $user;
        $properties['server'] = $server_row;

        //update mtime use for mobile api
        $ts = new CB_TimeStamp();
        $ts->unix_ts = time();
        $properties['mtime'] = $ts;

        if ( ! is_null($list_index)) {
            $properties['list_index'] = $list_index;
        }

        // プロパティセット
        $row->setProperties($login, $properties);

        // write log modify mail account
        require_once('mail/inspection.csp');
        $inspection = GRN_Mail_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            $properties = [
                'account_id'       => $row->getOID(),
                'account_code'     => $foreign_key,
                'account_name'     => $name,
                'mail_server'      => $account_info->server_id,
                'email'            => $account_info->email,
                'retrieve_account' => $account_info->retrieve_account,
                'retrieve_save'    => $account_info->getRetrieveSave(),
                'smtp_account'     => $account_info->smtp_account,
                'disabled'         => $disabled ? 1 : 0
            ];
            if ($server_row->get('smtp_auth') === 'NONE') {
                unset($properties['smtp_account']);
            } else {
                if ($properties['smtp_account'] === '') {
                    unset($properties['smtp_account']);
                }
            }
            $inspection->writeInspectionLog('modify', 'account', $properties);
        }

        $this->_clearAccountDataListCache($user);

        return true;
    }

    /**
     * メールアカウントデータの削除
     *
     * @param   string  $account_ids    アカウントデータIDの配列
     * @param   boolean $b_force_delete メールデータが存在していても強制削除を行う
     *
     * @return  int     削除数
     */
    function deleteAccountDatas(& $account_ids, $b_force_delete = false)
    {
        $num = 0;
        $user = null;
        if (is_array($account_ids) && (count($account_ids) > 0)) {
            $login = $this->_utility->getLoginUser();
            foreach ($account_ids as $aid) {
                // アカウントデータ削除
                $row = $this->_getAccountRow($aid);
                if ( ! is_object($row)) {
                    // データが見つからない
                    //cb_throw_error( E_GRN_MAIL_ACCOUNT_DATA_NOT_FOUND );
                    continue;
                }
                // メールデータが１つでも存在する場合は削除しない
                if ( ! $b_force_delete && ($row->getMailCount() > 0)) {
                    $row->set('deleted', true);
                    $row->set('list_index', 0x7FFFFFFF);
                    $num++;
                } else {
                    $user = $row->get('user');
                    if ($this->_clearAllAccountMailData($user, $aid)) {
                        if ( ! $row->delete()) {
                            cb_throw_error(E_GRN_MAIL_FAILED_TO_DELETE_ACCOUNT_DATA);
                        }
                        $num++;
                    }
                }
            }
        }
        $this->_clearAccountDataListCache($user);

        return $num;
    }

    /**
     * メールアカウントの順番を設定する
     *
     * @param object $user        対象ユーザー（CB_User）
     * @param array  $account_ids メールアカウントデータIDの配列、格納された順番にメールアカウントを配置する
     *
     * @return boolean      成否
     */
    function changeAccountOrder(& $user, & $account_ids)
    {
        assert('is_array( $account_ids )');

        // ログインユーザーと異なる場合は管理者権限が必要
        $login = $this->_utility->getLoginUser();
        assert('is_object( $user )');
        if (is_null($user)
            || ( ! is_null($login)
                 && ($user->getOID() != $login->getOID()))
        ) {
            $this->isAdmin();
        }

        $temp = null;               // 更新情報を記録しないためにnullを渡す
        $list_index = 0;
        foreach ($account_ids as $id) {
            // メールアカウントデータを取得
            $row = $this->_getAccountRow($id);
            if ( ! is_object($row)) {
                // 見つからないデータは無視
                continue;
            }

            // アカウントに設定されているユーザーが一致しているかチェック
            $account_user = $row->get('user');
            if (is_null($account_user)
                || ( ! is_null($account_user)
                     && ($account_user->getOID() != $user->getOID()))
            ) {
                continue;
            }

            $list_index++;
            $row->set('list_index', $list_index);
            $row->updateData($temp);
        }

        $this->_clearAccountDataListCache($user);

        return true;
    }

    /**
     * メールアカウントデータ一覧の取得
     *
     * @param   object  $user        取得するアカウントのユーザー
     * @param   boolean $b_server    サーバー情報も取得するかどうか
     * @param   boolean $reverse     ソート順。デフォルト:FALSE
     * @param   int     $offset      表示位置。デフォルト:-1
     * @param   int     $limit       表示件数。デフォルト:-1
     * @param   boolean $no_disabled 使用停止データを取得しない。デフォルト:FALSE
     * @param   boolean $no_deleted  削除済みデータを取得しない。デフォルト:TRUE
     * @param   string  $sub_query   サブ検索条件文
     *
     * @return  array   データのリスト
     */
    function &getAccountDataList(
        & $user,
        $b_server = false,
        $reverse = false,
        $offset = -1,
        $limit = -1,
        $no_disabled = false,
        $no_deleted = true,
        $sub_query = null
    ) {
        assert('is_object( $user )');

        // 安全対策
        if ( ! is_object($user)) {
            $ret = [];

            return $ret;
        }
        $ret = $this->getAccountDataListByUserID($user->getOID(), $b_server,
            $reverse, $offset, $limit, $no_disabled, $no_deleted, $sub_query);

        return $ret;
    }

    /**
     * メールアカウントデータ一覧の取得
     *
     * @param           $user_id     取得するアカウントのユーザーのID
     * @param   boolean $b_server    サーバー情報も取得するかどうか
     * @param   boolean $reverse     ソート順。デフォルト:FALSE
     * @param   int     $offset      表示位置。デフォルト:-1
     * @param   int     $limit       表示件数。デフォルト:-1
     * @param   boolean $no_disabled 使用停止データを取得しない。デフォルト:FALSE
     * @param   boolean $no_deleted  削除済みデータを取得しない。デフォルト:TRUE
     * @param   string  $sub_query   サブ検索条件文
     *
     * @return  array   データのリスト
     */
    function getAccountDataListByUserID(
        $user_id,
        $b_server = false,
        $reverse = false,
        $offset = -1,
        $limit = -1,
        $no_disabled = false,
        $no_deleted = true,
        $sub_query = null
    ) {
        assert('$user_id > 0');
        // 安全対策
        if ($user_id <= 0) {
            return [];
        }

        $b_server_only = false;         // サーバー情報だけを取得すればよい

        if (array_key_exists($user_id, $this->_account_data_list)) {
            // すでに取得済みだが..
            if ($b_server) {
                $b_already_got = false;
                $data_list =& $this->_account_data_list[$user_id];
                if (is_array($data_list)) {
                    foreach (array_keys($data_list) as $key) {
                        $temp_data =& $data_list[$key];
                        if ( ! is_array($temp_data)) {
                            continue;
                        }

                        if (array_key_exists('server', $temp_data)) {
                            $b_already_got = true;
                        }

                        // 先頭のみチェック
                        break;
                    }
                }

                if (is_null($data_list) || $b_already_got) {
                    // すでに取得しているがオブジェクトがnull、またはサーバー情報も取得済みだった
                    return $this->_account_data_list[$user_id];
                }

                // すでに取得しているが、サーバー情報は取得していなかった
                $b_server_only = true;
            } else {
                return $this->_account_data_list[$user_id];
            }
        }

        // データリスト
        if ( ! array_key_exists($user_id, $this->_account_data_list)) {
            $this->_account_data_list[$user_id] = [];
        }

        $rowset
            = new CB_RowSet($this->_utility->getTableInfo(GRN_MAIL_ACCOUNT_TABLE));
        if (is_null($rowset)) {
            return $this->_account_data_list[$user_id];
        }

        // ユーザー条件を追加
        $rowset->addCondition($rowset->queryf("col_user = '@S'", $user_id));

        // サブ検索条件文を追加
        if ( ! is_null($sub_query) && 0 < strlen($sub_query)) {
            $rowset->addCondition($sub_query);
        }

        // 使用停止中は対象外
        if ($no_disabled) {
            $rowset->addCondition("col_disabled = 0");
        }

        // 削除済みは対象外
        if ($no_deleted) {
            $rowset->addCondition(CB_DATABASE_TABLE_PREFIX
                                  . GRN_MAIL_ACCOUNT_TABLE
                                  . ".col_deleted = 0");
        }

        $user_table_info = $this->_utility->getTableInfo('cb_user');
        $on = CB_DATABASE_TABLE_PREFIX . GRN_MAIL_ACCOUNT_TABLE
              . '.col_user = u._id '
              . 'AND u.col_deleted IS NULL';
        $rowset->addJoin($user_table_info, $on, CB_DATABASE_INNER_JOIN, 'u');

        // ソート
        $rowset->addOrderColumn('col_list_index', $reverse);      // ソート
        $rowset->addOrderColumn(null, $reverse);                  // OID順

        // 取得範囲の設定
        if ( ! is_null($offset) && ($offset >= 0) && ! is_null($limit)
             && ($limit >= 0)
        ) {
            $rowset->limit($offset, $limit);
        }

        // データ一覧ループ
        /** @var GRN_Mail_Account $row */
        while ( ! is_null($row = $rowset->iterate())) {
            if ( ! is_object($row)) {
                assert('FALSE');
                continue;
            }

            $aid = $row->getOID();
            if ($b_server_only
                && array_key_exists($aid, $this->_account_data_list[$user_id])
                && is_array($this->_account_data_list[$user_id][$aid])
            ) {
                // サーバー情報だけを取得する
                /** @var GRN_Mail_Server $mailserver */
                $mailserver = $row->get('server');
                if ( ! is_null($mailserver)) {
                    $server_data = $mailserver->getDataProperties();
                } else {
                    $server_data = null;
                }

                $this->_account_data_list[$user_id][$aid]['server']
                    =& $server_data;
            } else {
                $this->_account_data_list[$user_id][$aid]
                    = $row->getDataProperties($b_server, false);
            }
        }

        return $this->_account_data_list[$user_id];
    }

    /**
     * 全メールアカウントデータ一覧の取得
     *
     * @param   boolean $reverse     ソート順。デフォルト:FALSE
     * @param   int     $offset      表示位置。デフォルト:-1
     * @param   int     $limit       表示件数。デフォルト:-1
     * @param   boolean $no_disabled 使用停止データを取得しない。デフォルト:FALSE
     * @param   boolean $no_deleted  削除済みデータを取得しない。デフォルト:TRUE
     * @param   string  $sub_query   サブ検索条件文
     *
     * @return  array   データのリスト
     */
    function getAllAccountDataList(
        $reverse = false,
        $offset = -1,
        $limit = -1,
        $no_disabled = false,
        $no_deleted = true,
        $sub_query = null
    ) {
        //全メールアカウントデータのキャッシュをチェック
        if (array_key_exists(0, $this->_account_data_list)) {
            return $this->_account_data_list[$user_id];
        } else {
            $this->_account_data_list[0] = [];
        }

        // 無ければ全メールアカウントデータを取得
        $rowset
            = new CB_RowSet($this->_utility->getTableInfo(GRN_MAIL_ACCOUNT_TABLE));
        if (is_null($rowset)) {
            return $this->_account_data_list[0];
        }

        // サブ検索条件文を追加
        if ( ! is_null($sub_query) && 0 < strlen($sub_query)) {
            $rowset->addCondition($sub_query);
        }

        // 使用停止中は対象外
        if ($no_disabled) {
            $rowset->addCondition("col_disabled = 0");
        }

        // 削除済みは対象外
        if ($no_deleted) {
            $rowset->addCondition(CB_DATABASE_TABLE_PREFIX
                                  . GRN_MAIL_ACCOUNT_TABLE
                                  . ".col_deleted = 0");
        }

        $user_table_info = $this->_utility->getTableInfo('cb_user');
        $on = CB_DATABASE_TABLE_PREFIX . GRN_MAIL_ACCOUNT_TABLE
              . '.col_user = u._id '
              . 'AND u.col_deleted IS NULL';
        $rowset->addJoin($user_table_info, $on, CB_DATABASE_INNER_JOIN, 'u');

        // ソート
        $rowset->addOrderColumn('col_list_index', $reverse);      // ソート
        $rowset->addOrderColumn(null, $reverse);                  // OID順

        // 取得範囲の設定
        if ( ! is_null($offset) && ($offset >= 0) && ! is_null($limit)
             && ($limit >= 0)
        ) {
            $rowset->limit($offset, $limit);
        }

        // データ一覧ループ
        /** @var GRN_Mail_Account $row */
        while ( ! is_null($row = $rowset->iterate())) {
            if ( ! is_object($row)) {
                assert('FALSE');
                continue;
            }

            $aid = $row->getOID();
            $this->_account_data_list[0][$aid] = $row->getDataProperties(false,
                false);
        }

        return $this->_account_data_list[0];
    }

    /**
     * メールアカウントの使用停止
     *
     * @param   string $account_ids アカウントデータIDの配列
     *
     * @return  int     処理数
     */
    function disableAccountDatas(& $account_ids)
    {
        $this->isAdmin();

        // ログインユーザー取得
        $login = $this->_utility->getLoginUser();
        $num = 0;
        if (is_array($account_ids) && (count($account_ids) > 0)) {
            foreach ($account_ids as $aid) {
                // アカウントデータ取得
                $row = $this->_getAccountRow($aid);
                if ( ! is_object($row)) {
                    // データが見つからない
                    continue;
                }

                $row->set('disabled', 1);
                if ($login) {
                    $row->onUpdate($login);
                }
                $num++;
            }
        }

        return $num;
    }

    /**
     * メールアカウントの使用再開
     *
     * @param   string $account_ids アカウントデータIDの配列
     *
     * @return  int     処理数
     */
    function enableAccountDatas(& $account_ids)
    {
        $this->isAdmin();

        // ログインユーザー取得
        $login = $this->_utility->getLoginUser();
        $num = 0;
        $user = null;
        if (is_array($account_ids) && (count($account_ids) > 0)) {
            foreach ($account_ids as $aid) {
                // アカウントデータ取得
                $row = $this->_getAccountRow($aid);
                if ( ! is_object($row)) {
                    // データが見つからない
                    cb_throw_error(E_GRN_MAIL_ACCOUNT_DATA_NOT_FOUND);
                }

                $row->set('disabled', 0);
                if ($login) {
                    $row->onUpdate($login);
                }
                $num++;

                if (is_null($user)) {
                    $temp = $row->get('user');
                    if (is_object($temp)) {
                        $user = $temp;
                    }
                }
            }
        }

        $this->_clearAccountDataListCache($user);

        return $num;
    }

    /**
     * 指定されたIDのメールアカウントが使用停止中か
     *
     * @param   string $account_id データID
     *
     * @return  boolean     使用停止中ならTRUE（データが存在しない場合はFALSE）
     */
    function isDisabledAccountData($account_id)
    {
        if (is_null($account_id) || (strlen($account_id) == 0)) {
            // データが見つからない
            return false;
        }

        // メールアカウントデータを取得
        $row = $this->_getAccountRow($account_id);
        if ( ! is_object($row)) {
            // データが見つからない
            return false;
        }

        return $row->isDisabled();
    }

    /**
     * 指定されたIDのメールアカウントが削除済みか
     *
     * @param   string $account_id データID
     *
     * @return  boolean     データが存在しないまたは削除済み状態ならTRUE
     */
    function isDeletedAccountData($account_id)
    {
        if (is_null($account_id) || (strlen($account_id) == 0)) {
            // データが見つからない
            return true;
        }

        // メールアカウントデータを取得
        $row = $this->_getAccountRow($account_id);
        if ( ! is_object($row)) {
            // データが見つからない
            return true;
        }

        return $row->isDeleted();
    }

    /**
     * メールサーバーデータをCSVファイルから入力する
     *
     * @param   object $csv CB_CSVReader
     *
     * @description カラム内容
     *  +-----+-------------------------+-------------------------------------------+----+
     *  |No.  |カラム                   |データ                                     |必須|
     *  +=====+=========================+===========================================+====+
     *  |01   |メールサーバーコード     |foreign_key                                |    |
     *  |02   |メールサーバー名         |name                                       | ○ |
     *  |03   |送信メールサーバー名     |smtp                                       | ○ |
     *  |04   |送信メールサーバーポート |smtp_port                                  |    |
     *  |05   |送信SSLの使用 |smtp_ssl
     *  |06   |SMTP認証方法             |smtp_auth                                  |    |
     *  |07   |SMTPアカウント設定有無   |smtp_set_account                           |    |
     *  |08   |POP before SMTP          |pop_before_smtp                            |    |
     *  |09   |POP before SMTP待ち時間  |pbsmtp_wait_sec                            |    |
     *  |10   |送信タイムアウト時間     |smtp_timeout_sec                           |    |
     *  |11   |受信プロトコル           |retrieve_protocol                          |    |
     *  |12   |受信メールサーバー名     |retrieve                                   | ○ |
     *  |13   |受信メールサーバーポート |retrieve_port                              |    |
     *  |14   |受信SSLの使用      |retrieve_ssl                              |    |
     *  |15   |受信認証方法             |retrieve_auth                              |    |
     *  |16   |受信タイムアウト時間     |retrieve_timeout_sec                       |    |
     *  +-----+-------------------------+-------------------------------------------+----+
     * @return  boolean
     */
    function importServerDataFromCSV(& $csv)
    {
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $login = $this->_utility->getLoginUser();
        require_once('fw/string_util.csp');

        $server_foreign_keys = [];        // 重複チェック用
        while (($line = $csv->readLine()) !== false) {
            if ( ! is_array($line) || (count($line) < 16)) {
                cb_throw_error(E_GRN_MAIL_SERVER_CSV_INVALID_COLUMNS);
            }

            // 必須チェック
            // メールサーバーコード
            $foreign_key = '';
            if (is_string($line[0])) {
                $foreign_key = cb_trim($line[0]);
            }
            if (strlen($foreign_key) == 0) {
                cb_throw_error(
                    E_GRN_MAIL_SERVER_CSV_EMPTY_NECESSARY_PROPERTY,
                    null,
                    [
                        'property' => cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
                            'mailserver_csv_foreign_key')
                    ],
                    [
                        'property' => cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
                            'mailserver_csv_foreign_key')
                    ]
                );
            }
            // メールサーバー名
            $name = '';
            if (is_string($line[1])) {
                $name = cb_trim($line[1]);
            }
            if (strlen($name) == 0) {
                cb_throw_error(
                    E_GRN_MAIL_SERVER_CSV_EMPTY_NECESSARY_PROPERTY,
                    null,
                    [
                        'property' => cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
                            'mailserver_csv_name')
                    ],
                    [
                        'property' => cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
                            'mailserver_csv_name')
                    ]
                );
            }

            // 送信サーバー名
            $smtp = '';
            if (is_string($line[2])) {
                $smtp = cb_trim($line[2]);
            }
            if (strlen($smtp) == 0) {
                cb_throw_error(
                    E_GRN_MAIL_SERVER_CSV_EMPTY_NECESSARY_PROPERTY,
                    null,
                    [
                        'property' => cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
                            'mailserver_csv_smtp')
                    ],
                    [
                        'property' => cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
                            'mailserver_csv_smtp')
                    ]
                );
            }

            // 受信サーバー名
            $retrieve = '';
            if (is_string($line[11])) {
                $retrieve = cb_trim($line[11]);
            }
            if (strlen($retrieve) == 0) {
                cb_throw_error(
                    E_GRN_MAIL_SERVER_CSV_EMPTY_NECESSARY_PROPERTY,
                    null,
                    [
                        'property' => cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
                            'mailserver_csv_retrieve')
                    ],
                    [
                        'property' => cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
                            'mailserver_csv_retrieve')
                    ]
                );
            }

            // サーバーコード
            $server = null;
            if (array_key_exists($foreign_key, $server_foreign_keys)) {
                // キー重複
                cb_throw_error(E_GRN_MAIL_SERVER_DUPLICATE_FOREIGN_KEY);
            }

            $server_foreign_keys[$foreign_key] = true;
            $server
                = $this->_getServerRowByForeignKey($foreign_key);

            // smtp_port
            $smtp_port = GRN_MAIL_DEFAULT_SMTP_PORT;
            if (strlen($line[3]) > 0) {
                $temp = intval($line[3]);
                if ( ! is_numeric($line[3]) || $temp <= 0) {
                    cb_throw_error(
                        E_GRN_MAIL_SERVER_CSV_INVALID_COLUMN_PROPERTY,
                        null,
                        [
                            'property' => cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
                                'mailserver_csv_smtp_port')
                        ],
                        [
                            'property' => cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
                                'mailserver_csv_smtp_port')
                        ]
                    );
                }
                $smtp_port = $temp;
            }

            //type_encrypted
            if (strlen($line[4]) > 0) {
                // use import file before apply Office365
                if (is_numeric($line[4])) {
                    $temp = intval($line[4]);
                    if ($temp < 0) {
                        cb_throw_error(
                            E_GRN_MAIL_SERVER_CSV_INVALID_COLUMN_PROPERTY,
                            null,
                            [
                                'property' => cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
                                    'mailserver_csv_smtp_ssl')
                            ],
                            [
                                'property' => cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
                                    'mailserver_csv_smtp_ssl')
                            ]
                        );
                    }
                    $use_ssl = $temp;
                    $use_tls = 0;
                } else {
                    $temp = strtoupper($line[4]);
                    if ((strcmp($temp, 'NONE') != 0)
                        && (strcmp($temp, 'SSL') != 0)
                        && (strcmp($temp, 'TLS') != 0)
                    ) {
                        cb_throw_error(
                            E_GRN_MAIL_SERVER_CSV_INVALID_COLUMN_PROPERTY,
                            null,
                            [
                                'property' => cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
                                    'mailserver_csv_type_encrypted')
                            ],
                            [
                                'property' => cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
                                    'mailserver_csv_type_encrypted')
                            ]
                        );
                    }
                    $use_ssl = $temp == 'SSL' ? 1 : 0;
                    $use_tls = $temp == 'TLS' ? 1 : 0;
                }
            }

            // smtp_auth
            $smtp_auth = GRN_MAIL_DEFAULT_SMTP_AUTH;
            if (strlen($line[5]) > 0) {
                $temp = strtoupper($line[5]);
                if ((strcmp($temp, GRN_MAIL_SMTP_AUTH_NONE) != 0)
                    && (strcmp($temp, GRN_MAIL_SMTP_AUTH_PLAIN) != 0)
                    && (strcmp($temp, GRN_MAIL_SMTP_AUTH_LOGIN) != 0)
                    && (strcmp($temp, GRN_MAIL_SMTP_AUTH_CRAMMD5) != 0)
                    && (strcmp($temp, GRN_MAIL_SMTP_AUTH_DIGESTMD5) != 0)
                ) {
                    cb_throw_error(
                        E_GRN_MAIL_SERVER_CSV_INVALID_COLUMN_PROPERTY,
                        null,
                        [
                            'property' => cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
                                'mailserver_csv_smtp_auth')
                        ],
                        [
                            'property' => cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
                                'mailserver_csv_smtp_auth')
                        ]
                    );
                }
                $smtp_auth = $temp;
            }

            // smtp_set_account
            $smtp_set_account = 0;
            if (strlen($line[6]) > 0) {
                $temp = intval($line[6]);
                if ( ! is_numeric($line[6]) || ($temp != 0) && ($temp != 1)) {
                    cb_throw_error(
                        E_GRN_MAIL_SERVER_CSV_INVALID_COLUMN_PROPERTY,
                        null,
                        [
                            'property' => cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
                                'mailserver_csv_smtp_set_account')
                        ],
                        [
                            'property' => cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
                                'mailserver_csv_smtp_set_account')
                        ]
                    );
                }
                $smtp_set_account = $temp;
            }

            // pop_before_smtp
            $pop_before_smtp = 0;
            if (strlen($line[7]) > 0) {
                $temp = intval($line[7]);
                if ( ! is_numeric($line[7]) || ($temp != 0) && ($temp != 1)) {
                    cb_throw_error(
                        E_GRN_MAIL_SERVER_CSV_INVALID_COLUMN_PROPERTY,
                        null,
                        [
                            'property' => cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
                                'mailserver_csv_pop_before_smtp')
                        ],
                        [
                            'property' => cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
                                'mailserver_csv_pop_before_smtp')
                        ]
                    );
                }
                $pop_before_smtp = $temp;
            }

            // pbsmtp_wait_sec
            $pbsmtp_wait_sec = 0;
            if (strlen($line[8]) > 0) {
                $temp = intval($line[8]);
                if ( ! is_numeric($line[8]) || ($temp < 0) || ($temp > 10)) {
                    cb_throw_error(
                        E_GRN_MAIL_SERVER_CSV_INVALID_COLUMN_PROPERTY,
                        null,
                        [
                            'property' => cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
                                'mailserver_csv_pbsmtp_wait_sec')
                        ],
                        [
                            'property' => cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
                                'mailserver_csv_pbsmtp_wait_sec')
                        ]
                    );
                }
                $pbsmtp_wait_sec = $temp;
            }

            // smtp_timeout_sec
            $smtp_timeout_sec = GRN_MAIL_SMTP_CONNECTION_TIMEOUT;
            if (strlen($line[9]) > 0) {
                $temp = intval($line[9]);
                if ( ! is_numeric($line[9]) || ($temp < 10) || ($temp > 120)) {
                    cb_throw_error(
                        E_GRN_MAIL_SERVER_CSV_INVALID_COLUMN_PROPERTY,
                        null,
                        [
                            'property' => cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
                                'mailserver_csv_smtp_timeout_sec')
                        ],
                        [
                            'property' => cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
                                'mailserver_csv_smtp_timeout_sec')
                        ]
                    );
                }
                $smtp_timeout_sec = $temp;
            }

            // retrieve_protocol
            $retrieve_protocol = GRN_MAIL_DEFAULT_RETRIEVE_PROTOCOL;
            if (strlen($line[10]) > 0) {
                $temp = strtoupper($line[10]);
                if ((strcmp($temp, GRN_MAIL_RETRIEVE_PROTOCOL_POP3) != 0)
                    && (strcmp($temp, GRN_MAIL_RETRIEVE_PROTOCOL_IMAP4) != 0)
                ) {
                    cb_throw_error(
                        E_GRN_MAIL_SERVER_CSV_INVALID_COLUMN_PROPERTY,
                        null,
                        [
                            'property' => cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
                                'mailserver_csv_retrieve_protocol')
                        ],
                        [
                            'property' => cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
                                'mailserver_csv_retrieve_protocol')
                        ]
                    );
                }
                $retrieve_protocol = $temp;
            }

            // retrieve_port
            switch ($retrieve_protocol) {
                case GRN_MAIL_RETRIEVE_PROTOCOL_POP3:
                    $retrieve_port = GRN_MAIL_DEFAULT_POP3_PORT;
                    break;
                case GRN_MAIL_RETRIEVE_PROTOCOL_IMAP4:
                    $retrieve_port = GRN_MAIL_DEFAULT_IMAP4_PORT;
                    break;
                default:
                    $retrieve_port = GRN_MAIL_DEFAULT_POP3_PORT;
            }
            if (strlen($line[12]) > 0) {
                $temp = intval($line[12]);
                if ( ! is_numeric($line[12]) || $temp <= 0) {
                    cb_throw_error(
                        E_GRN_MAIL_SERVER_CSV_INVALID_COLUMN_PROPERTY,
                        null,
                        [
                            'property' => cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
                                'mailserver_csv_retrieve_port')
                        ],
                        [
                            'property' => cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
                                'mailserver_csv_retrieve_port')
                        ]
                    );
                }
                $retrieve_port = $temp;
            }

            //retrieve_ssl
            if (strlen($line[13]) > 0) {
                $temp = intval($line[13]);
                if ( ! is_numeric($line[13]) || $temp < 0) {
                    cb_throw_error(
                        E_GRN_MAIL_SERVER_CSV_INVALID_COLUMN_PROPERTY,
                        null,
                        [
                            'property' => cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
                                'mailserver_csv_retrieve_ssl')
                        ],
                        [
                            'property' => cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
                                'mailserver_csv_retrieve_ssl')
                        ]
                    );
                }
                $retrieve_ssl = $temp;
            }

            // retrieve_auth
            $retrieve_auth = GRN_MAIL_DEFAULT_RETRIEVE_AUTH;
            if (strlen($line[14]) > 0) {
                $temp = strtoupper($line[14]);
                if ((strcmp($temp, GRN_MAIL_RETRIEVE_AUTH_USER) != 0)
                    && (strcmp($temp, GRN_MAIL_RETRIEVE_AUTH_APOP) != 0)
                ) {
                    cb_throw_error(
                        E_GRN_MAIL_SERVER_CSV_INVALID_COLUMN_PROPERTY,
                        null,
                        [
                            'property' => cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
                                'mailserver_csv_retrieve_auth')
                        ],
                        [
                            'property' => cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
                                'mailserver_csv_retrieve_auth')
                        ]
                    );
                }
                $retrieve_auth = $temp;
            }

            // retrieve_timeout_sec
            $retrieve_timeout_sec = GRN_MAIL_RETRIEVE_CONNECTION_TIMEOUT;
            if (strlen($line[15]) > 0) {
                $temp = intval($line[15]);
                if ( ! is_numeric($line[15]) || ($temp < 10) || ($temp > 120)) {
                    cb_throw_error(
                        E_GRN_MAIL_SERVER_CSV_INVALID_COLUMN_PROPERTY,
                        null,
                        [
                            'property' => cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
                                'mailserver_csv_retrieve_timeout_sec')
                        ],
                        [
                            'property' => cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
                                'mailserver_csv_retrieve_timeout_sec')
                        ]
                    );
                }
                $retrieve_timeout_sec = $temp;
            }

            $properties = [
                'foreign_key'          => $foreign_key,
                'name'                 => $name,
                'smtp'                 => $smtp,
                'smtp_port'            => $smtp_port,
                'smtp_ssl'             => $use_ssl,
                'smtp_starttls'        => $use_tls,
                'smtp_auth'            => $smtp_auth,
                'smtp_set_account'     => $smtp_set_account,
                'pop_before_smtp'      => $pop_before_smtp,
                'pbsmtp_wait_sec'      => $pbsmtp_wait_sec,
                'smtp_timeout_sec'     => $smtp_timeout_sec,
                'retrieve_protocol'    => $retrieve_protocol,
                'retrieve'             => $retrieve,
                'retrieve_port'        => $retrieve_port,
                'retrieve_ssl'         => $retrieve_ssl,
                'retrieve_auth'        => $retrieve_auth,
                'retrieve_timeout_sec' => $retrieve_timeout_sec
            ];

            if ( ! is_object($server)) {
                // なければ追加
                $table = $this->_utility->getTableInfo(GRN_MAIL_SERVER_TABLE);
                $server = $table->newRow();
                if ( ! is_object($server)) {
                    // データ追加失敗
                    cb_throw_error(E_GRN_MAIL_FAILED_TO_ADD_SERVER_DATA);
                }

                if ($server->initialize($login, $properties, false) === false) {
                    // データ追加失敗
                    cb_throw_error(E_GRN_MAIL_FAILED_TO_ADD_SERVER_DATA);
                }
            } else {
                // 見つかったら上書き
                if ($server->setProperties($login, $properties, false)
                    === false
                ) {
                    // データ更新失敗
                    cb_throw_error(E_GRN_MAIL_FAILED_TO_MODIFY_SERVER_DATA);
                }
            }

            // write log import mail server
            require_once('mail/inspection.csp');
            $inspection = GRN_Mail_Inspection::getInstance();
            if ($inspection->isEnabled()) {
                $inspection->writeInspectionLog('import', 'server', [
                    'server_id'   => $server->getOID(),
                    'foreign_key' => $properties['foreign_key']
                ]);
            }
        }

        return true;
    }

    /**
     * メールサーバーデータをCSVファイル出力する
     *
     * @param   object  $csv         CB_CSVWriter
     *
     * @description カラム内容
     *  +-----+-------------------------+-------------------------------------------+----+
     *  |No.  |カラム                   |データ                                     |必須|
     *  +=====+=========================+===========================================+====+
     *  |01   |メールサーバーコード     |foreign_key                                |    |
     *  |02   |メールサーバー名         |name                                       | ○ |
     *  |03   |送信メールサーバー名     |smtp                                       | ○ |
     *  |04   |送信メールサーバーポート |smtp_port                                  |    |
     *  |05   |送信SSLの使用 |smtp_ssl
     *  |06   |SMTP認証方法             |smtp_auth                                  |    |
     *  |07   |SMTPアカウント設定有無   |smtp_set_account                           |    |
     *  |08   |POP before SMTP          |pop_before_smtp                            |    |
     *  |09   |POP before SMTP待ち時間  |pbsmtp_wait_sec                            |    |
     *  |10   |送信タイムアウト時間     |smtp_timeout_sec                           |    |
     *  |11   |受信プロトコル           |retrieve_protocol                          |    |
     *  |12   |受信メールサーバー名     |retrieve                                   | ○ |
     *  |13   |受信メールサーバーポート |retrieve_port                              |    |
     *  |14   |受信SSLの使用      |retrieve_ssl                              |    |
     *  |15   |受信認証方法             |retrieve_auth                              |    |
     *  |16   |受信タイムアウト時間     |retrieve_timeout_sec                       |    |
     *  +-----+-------------------------+-------------------------------------------+----+
     *
     * @param   boolean $b_item_name 先頭に項目名を出力するか
     *
     * @return  boolean
     */
    function exportServerDataToCSV(& $csv, $b_item_name)
    {
        assert('is_object( $csv )');

        $rowset
            = new CB_RowSet($this->_utility->getTableInfo(GRN_MAIL_SERVER_TABLE));
        $rowset->addOrderColumn('col_list_index');
        $rowset->addOrderColumn('_id');

        // 項目名の書き出し
        if ($b_item_name) {
            $headers = $this->getServerCSVTitles();
            $csv->writeLine($headers);
        }

        $lines = [];
        while ( ! is_null($row = $rowset->iterate())) {
            $line = [];
            $line[] = $row->get('foreign_key');
            $line[] = $row->get('name');
            $line[] = $row->get('smtp');
            $line[] = $row->get('smtp_port');
            if ($row->get('smtp_ssl')) {
                $line[] = 'SSL';
            } elseif ($row->get('reserve_int1')) {
                $line[] = 'TLS';
            } else {
                $line[] = 'NONE';
            }
            $line[] = $row->get('smtp_auth');
            $line[] = $row->get('smtp_set_account');
            $line[] = $row->get('pop_before_smtp');
            $line[] = $row->get('pbsmtp_wait_sec');
            $line[] = $row->get('smtp_timeout_sec');
            $line[] = $row->get('retrieve_protocol');
            $line[] = $row->get('retrieve');
            $line[] = $row->get('retrieve_port');
            $line[] = $row->get('retrieve_ssl');
            $line[] = $row->get('retrieve_auth');
            $line[] = $row->get('retrieve_timeout_sec');
            $csv->writeLine($line);

            // write log export  mail server
            require_once('mail/inspection.csp');
            $inspection = GRN_Mail_Inspection::getInstance();
            if ($inspection->isEnabled()) {
                $inspection->writeInspectionLog('export', 'server',
                    ['server_id' => $row->getOID(), 'foreign_key' => $line[0]]);
            }
        }

        return true;
    }

    function getServerCSVTitles()
    {
        require_once('fw/i18n.csp');
        $header = [];
        $headers[] = cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
            'mailserver_csv_foreign_key');
        $headers[] = cb_msg(GRN_MAIL_SYSTEM_MODULE_ID, 'mailserver_csv_name');
        $headers[] = cb_msg(GRN_MAIL_SYSTEM_MODULE_ID, 'mailserver_csv_smtp');
        $headers[] = cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
            'mailserver_csv_smtp_port');
        $headers[] = cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
            'mailserver_csv_type_encrypted');
        $headers[] = cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
            'mailserver_csv_smtp_auth');
        $headers[] = cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
            'mailserver_csv_smtp_set_account');
        $headers[] = cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
            'mailserver_csv_pop_before_smtp');
        $headers[] = cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
            'mailserver_csv_pbsmtp_wait_sec');
        $headers[] = cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
            'mailserver_csv_smtp_timeout_sec');
        $headers[] = cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
            'mailserver_csv_retrieve_protocol');
        $headers[] = cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
            'mailserver_csv_retrieve');
        $headers[] = cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
            'mailserver_csv_retrieve_port');
        $headers[] = cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
            'mailserver_csv_retrieve_ssl');
        $headers[] = cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
            'mailserver_csv_retrieve_auth');
        $headers[] = cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
            'mailserver_csv_retrieve_timeout_sec');

        return $headers;
    }

    /**
     * ユーザーアカウントデータをCSVファイルから入力する
     *
     * @param   object $csv CB_CSVReader
     *
     * @description カラム内容
     *  +-----+-------------------------+-------------------------------------------+----+
     *  |No.  |カラム                   |データ                                     |必須|
     *  +=====+=========================+===========================================+====+
     *  |01   |ユーザーログイン名       |ログイン名                                 | ○ |
     *  |02   |アカウントコード         |foreign_key                                | ○ |
     *  |03   |アカウント名             |name                                       |    |
     *  |04   |メールサーバーコード     |foreign_key                                |    |
     *  |05   |メールアドレス           |email                                      | ○ |
     *  |06   |From名                   |from_name                                  |    |
     *  |07   |受信メールアカウント名   |retrieve_account                           |    |
     *  |08   |受信メールパスワード     |retrieve_password                          |    |
     *  |09   |サーバーに残す           |retrieve_save                              |    |
     *  |10   |送信メールアカウント名   |smtp_account                               |    |
     *  |11   |送信メールパスワード     |smtp_password                              |    |
     *  |12   |使用停止                 |disabled                                   |    |
     *  +-----+-------------------------+-------------------------------------------+----+
     * @return  boolean
     */
    function importAccountDataFromCSV(& $csv)
    {
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $login = $this->_utility->getLoginUser();
        require_once('fw/string_util.csp');

        $account_foreign_keys = [];        // 重複チェック用
        while (($line = $csv->readLine()) !== false) {
            if ( ! is_array($line) || (count($line) < 12)) {
                cb_throw_error(E_GRN_MAIL_ACCOUNT_CSV_INVALID_COLUMNS);
            }

            // ユーザー
            $user = null;
            if (is_string($line[0])
                && (mb_strlen(($code = cb_trim($line[0]))) > 0)
            ) {
                $user = $uum->getUserByForeignKey($code);
            } else {
                // 未指定はエラー
                cb_throw_error(
                    E_GRN_MAIL_ACCOUNT_CSV_EMPTY_NECESSARY_PROPERTY,
                    null,
                    [
                        'property' => cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
                            'user_account_csv_user')
                    ],
                    [
                        'property' => cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
                            'user_account_csv_user')
                    ]
                );
            }

            if ( ! is_object($user)) {
                cb_throw_error(
                    E_GRN_MAIL_ACCOUNT_CSV_INVALID_COLUMN_PROPERTY,
                    null,
                    [
                        'property' => cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
                            'user_account_csv_user')
                    ],
                    [
                        'property' => cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
                            'user_account_csv_user')
                    ]
                );
            }

            // サーバー
            $server = null;
            if (is_string($line[3]) && mb_strlen($line[3]) > 0) {
                $code = cb_trim($line[3]);
                if (mb_strlen($code) > 0) {
                    $server = $this->_getServerRowByForeignKey($code);
                }
            }
            if (is_null($server)) {
                cb_throw_error(
                    E_GRN_MAIL_ACCOUNT_CSV_INVALID_COLUMN_PROPERTY,
                    null,
                    [
                        'property' => cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
                            'user_account_csv_server_foreign_key')
                    ],
                    [
                        'property' => cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
                            'user_account_csv_server_foreign_key')
                    ]
                );
            }

            // アカウント
            $account = null;

            // 必須チェック
            $foreign_key = '';
            if (is_string($line[1])) {
                $foreign_key = cb_trim($line[1]);
            }
            if (strlen($foreign_key) == 0) {
                cb_throw_error(
                    E_GRN_MAIL_ACCOUNT_CSV_EMPTY_NECESSARY_PROPERTY,
                    null,
                    [
                        'property' => cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
                            'user_account_csv_foreign_key')
                    ],
                    [
                        'property' => cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
                            'user_account_csv_foreign_key')
                    ]
                );
            }

            if (array_key_exists($foreign_key, $account_foreign_keys)) {
                // キー重複
                cb_throw_error(E_GRN_MAIL_ACCOUNT_DUPLICATE_FOREIGN_KEY);
            }

            $account_foreign_keys[$foreign_key] = true;
            $account
                = $this->_getAccountRowByForeignKey($foreign_key);

            if (strlen($line[11]) == 0) {
                $disabled = false;
            } else {
                $tmp = intval($line[11]);
                if ( ! is_numeric($line[11]) || ($tmp !== 0 && $tmp !== 1)) {
                    cb_throw_error(
                        E_GRN_MAIL_ACCOUNT_CSV_INVALID_COLUMN_PROPERTY,
                        null,
                        [
                            'property' => cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
                                'user_account_csv_disabled')
                        ],
                        [
                            'property' => cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
                                'user_account_csv_disabled')
                        ]
                    );
                }
                $disabled = $tmp !== 0;
            }

            // 必須チェック
            $email = null;
            if (is_string($line[4])) {
                $email = cb_trim($line[4]);
            }
            if ( ! is_string($email) || (strlen($email) == 0)) {
                cb_throw_error(
                    E_GRN_MAIL_ACCOUNT_CSV_EMPTY_NECESSARY_PROPERTY,
                    null,
                    [
                        'property' => cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
                            'user_account_csv_email')
                    ],
                    [
                        'property' => cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
                            'user_account_csv_email')
                    ]
                );
            }

            // retrieve_save
            $retrieve_save = GRN_MAIL_DEFAULT_RETRIEVE_SAVE;
            if (strlen($line[8]) > 0) {
                $temp = strtoupper($line[8]);
                if ((strcmp($temp, GRN_MAIL_RETRIEVE_SAVE_LEAVE) != 0)
                    && (strcmp($temp, GRN_MAIL_RETRIEVE_SAVE_DELETE) != 0)
                ) {
                    cb_throw_error(
                        E_GRN_MAIL_ACCOUNT_CSV_INVALID_COLUMN_PROPERTY,
                        null,
                        [
                            'property' => cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
                                'user_account_csv_retrieve_save')
                        ],
                        [
                            'property' => cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
                                'user_account_csv_retrieve_save')
                        ]
                    );
                }
                $retrieve_save = $temp;
            }

            $properties = [
                'foreign_key'      => $foreign_key,
                'name'             => $line[2],
                'email'            => $line[4],
                'from_name'        => $line[5],
                'retrieve_account' => $line[6],
                'retrieve_save'    => $retrieve_save,
                'smtp_account'     => $line[9],
                'disabled'         => $disabled
            ];

            if ((strlen($line[7]) > 0) && ($line[7] !== '*')) {
                $properties['retrieve_password'] = $line[7];
            }
            if ((strlen($line[10]) > 0) && ($line[10] !== '*')) {
                $properties['smtp_password'] = $line[10];
            }

            $properties['user'] = $user;
            $properties['server'] = $server;

            if ( ! is_object($account)) {
                // なければ追加
                $table = $this->_utility->getTableInfo(GRN_MAIL_ACCOUNT_TABLE);
                $account = $table->newRow();
                if ( ! is_object($account)) {
                    // データ追加失敗
                    cb_throw_error(E_GRN_MAIL_FAILED_TO_ADD_ACCOUNT_DATA);
                }

                if ($account->initialize($login, $properties, false)
                    === false
                ) {
                    // データ追加失敗
                    cb_throw_error(E_GRN_MAIL_FAILED_TO_ADD_ACCOUNT_DATA);
                }
            } else {
                // ログイン名/アカウントコード名から取得したユーザーが
                // 一致していなければエラー
                $account_user = $account->get('user');
                if ($account_user->getOID() != $user->getOID()) {
                    cb_throw_error(E_GRN_MAIL_ACCOUNT_CSV_INVALID_KEY_NAME);
                }

                // 見つかったら上書き
                if ($account->setProperties($login, $properties, false)
                    === false
                ) {
                    // データ更新失敗
                    cb_throw_error(E_GRN_MAIL_FAILED_TO_MODIFY_ACCOUNT_DATA);
                }
            }

            // write log import user mail account
            require_once('mail/inspection.csp');
            $inspection = GRN_Mail_Inspection::getInstance();
            if ($inspection->isEnabled()) {
                $inspection->writeInspectionLog('import', 'account',
                    ['account_id' => $account->getOID()]);
            }
        }

        return true;
    }

    /**
     * ユーザーアカウントデータをCSVファイル出力する
     *
     * @param   mixed   $user_id     出力するユーザーID or null（全ユーザー）
     * @param   object  $csv         CB_CSVWriter
     *
     * @description カラム内容
     *  +-----+-------------------------+-------------------------------------------+----+
     *  |No.  |カラム                   |データ                                     |必須|
     *  +=====+=========================+===========================================+====+
     *  |01   |ユーザーログイン名       |ログイン名                                 | ○ |
     *  |02   |アカウントコード         |foreign_key                                |    |
     *  |03   |アカウント名             |name                                       |    |
     *  |04   |メールサーバーコード     |foreign_key                                |    |
     *  |05   |メールアドレス           |email                                      | ○ |
     *  |06   |From名                   |from_name                                  |    |
     *  |07   |受信メールアカウント名   |retrieve_account                           |    |
     *  |08   |受信メールパスワード     |retrieve_password                          |    |
     *  |09   |サーバーに残す           |retrieve_save                              |    |
     *  |10   |送信メールアカウント名   |smtp_account                               |    |
     *  |11   |送信メールパスワード     |smtp_password                              |    |
     *  |12   |使用停止                 |disabled                                   |    |
     *  +-----+-------------------------+-------------------------------------------+----+
     *
     * @param   boolean $b_item_name 先頭に項目名を出力するか
     *
     * @return  boolean
     */
    function exportAccountDataToCSV($user_id, & $csv, $b_item_name)
    {
        assert('is_object( $csv )');

        $rowset
            = new CB_MultiRowSet($this->_utility->getTableInfo(GRN_MAIL_ACCOUNT_TABLE),
            'a');
        $rowset->addJoin($this->_utility->getTableInfo('CB_User'),
            'col_user = u._id AND u.col_deleted IS NULL',
            CB_DATABASE_INNER_JOIN,
            'u');
        $rowset->addJoin($this->_utility->getTableInfo(GRN_MAIL_SERVER_TABLE),
            'col_server = s._id',
            CB_DATABASE_LEFT_JOIN,
            's');
        $rowset->addOrderColumn('a.col_user');
        $rowset->addOrderColumn('a.col_list_index');
        $rowset->addOrderColumn('a._id');

        // 項目名の書き出し
        if ($b_item_name) {
            $headers = $this->getAccountCSVTitles();
            $csv->writeLine($headers);
        }

        $lines = [];
        while ( ! is_null($row =& $rowset->iterate())) {
            if (is_null($row['u'])) {
                continue;
            }

            if ( ! is_object($row['s'])) {
                $server_foreign_key = '';
            } else {
                $server_foreign_key = $row['s']->get('foreign_key');
            }

            $line = [];
            $line[] = $row['u']->get('foreign_key');
            $line[] = $row['a']->get('foreign_key');
            $line[] = $row['a']->get('name');
            $line[] = $server_foreign_key;
            $line[] = $row['a']->get('email');
            $line[] = $row['a']->get('from_name');
            $line[] = $row['a']->get('retrieve_account');
            $line[] = '*';//$row['a']->get( 'retrieve_password' );
            $line[] = $row['a']->get('retrieve_save');
            $line[] = $row['a']->get('smtp_account');
            $line[] = '*';//$row['a']->get( 'smtp_password' );
            $line[] = $row['a']->get('disabled');

            $csv->writeLine($line);

            // write log export  user mail account
            require_once('mail/inspection.csp');
            $inspection = GRN_Mail_Inspection::getInstance();
            if ($inspection->isEnabled()) {
                $inspection->writeInspectionLog('export', 'account',
                    ['account_id' => $row['a']->getOID()]);
            }
        }

        return true;
    }

    function getAccountCSVTitles()
    {
        require_once('fw/i18n.csp');
        $header = [];
        $headers[] = cb_msg(GRN_MAIL_SYSTEM_MODULE_ID, 'user_account_csv_user');
        $headers[] = cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
            'user_account_csv_foreign_key');
        $headers[] = cb_msg(GRN_MAIL_SYSTEM_MODULE_ID, 'user_account_csv_name');
        $headers[] = cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
            'user_account_csv_server_foreign_key');
        $headers[] = cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
            'user_account_csv_email');
        $headers[] = cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
            'user_account_csv_from_name');
        $headers[] = cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
            'user_account_csv_retrieve_account');
        $headers[] = cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
            'user_account_csv_retrieve_password');
        $headers[] = cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
            'user_account_csv_retrieve_save');
        $headers[] = cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
            'user_account_csv_smtp_account');
        $headers[] = cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
            'user_account_csv_smtp_password');
        $headers[] = cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
            'user_account_csv_disabled');

        return $headers;
    }

    /**
     * 条件にあったユーザーのアカウント一覧を取得する
     *
     * @param   mixed   $org_id      組織ID、-1：未所属、null：全ユーザー
     * @param   array   $navi_info   N件ナビ用のパラメータ
     * @param   string  $search_text 検索文字列
     * @param   string  $sort        ソート条件
     * @param   boolean $reverse     ソート順
     *
     * @return  array   ユーザーのリスト
     */
    function getUsersAccountList(
        $org_id,
        $navi_info,
        $search_text = '',
        $sort = '',
        $reverse = false
    ) {
        require_once('fw/string_util.csp');
        $search_text = cb_trim($search_text);

        $retval = [];
        $db = $this->_getDBConnection();
        $query
            = 'SELECT tab_cb_user._id uid, tab_cb_user.col_display_name display_name, tab_cb_user.col_foreign_key foreign_key, tab_cb_user.col_position position, tab_cb_user.col_valid valid, SUM( a.col_mail_size ) SUM FROM tab_cb_user LEFT JOIN';

        // 検索
        if (0 !== strlen($search_text)) {
            $query .= " tab_grn_userinfo ON tab_grn_userinfo.col_user = tab_cb_user._id LEFT JOIN";

            require_once('grn/org_util.csp');
            $condition = grn_get_user_info_search_condition($org_id,
                $search_text, true);
            $condition .= ' AND tab_cb_user.col_deleted IS NULL';

            if ($org_id > 0) {
                $format
                    = ' tab_cb_usergrouprelation g ON g.col_user = tab_cb_user._id LEFT JOIN tab_grn_mail_account a ON tab_cb_user._id = a.col_user AND a.col_deleted = 0 WHERE g.col_group = \'@S\'';
                // 組織内で検索
                $query .= cb_queryf($db, $format, $org_id);
                $query .= ' AND ' . $condition;

            } elseif ($org_id < 0) {
                global $G_container_base;
                $uum = $G_container_base->getInstance('uum');

                $users_list = $uum->getNoGroupUsersInfo(0, -1);

                if ( ! is_array($users_list) || count($users_list) === 0) {
                    return $retval;
                }

                $escaped_list = [];
                foreach (array_keys($users_list) as $id) {
                    $escaped_list[] = "'" . $db->escape($id) . "'";
                }

                $query .= ' tab_grn_mail_account a ON tab_cb_user._id = a.col_user AND a.col_deleted = 0 WHERE tab_cb_user._id IN ( %s ) ';
                $query = sprintf($query, implode(',', $escaped_list));
                $query .= " AND " . $condition;
            } else {
                $query .= ' tab_grn_mail_account a ON tab_cb_user._id = a.col_user AND a.col_deleted = 0 WHERE '
                          . $condition;
            }
        } elseif (0 < $org_id) {
            // 所属している組織で取得
            $format
                = ' tab_cb_usergrouprelation g ON g.col_user = tab_cb_user._id LEFT JOIN tab_grn_mail_account a ON tab_cb_user._id = a.col_user AND a.col_deleted = 0 WHERE g.col_group = \'@S\' AND tab_cb_user.col_deleted IS NULL';
            $query .= cb_queryf($db, $format, (string)$org_id);

        } elseif (is_null($org_id)) {
            $query .= ' tab_grn_mail_account a ON tab_cb_user._id = a.col_user AND a.col_deleted = 0 WHERE tab_cb_user.col_deleted IS NULL';
        } else {
            //未所属のユーザー
            $uum = cb_lwc_uum();

            $users_list = $uum->getNoGroupUsersInfo(0, -1);

            if ( ! is_array($users_list) || count($users_list) === 0) {
                return $retval;
            }

            $escaped_list = [];
            foreach (array_keys($users_list) as $id) {
                $escaped_list[] = "'" . $db->escape($id) . "'";
            }
            $query .= sprintf(' tab_grn_mail_account a ON tab_cb_user._id = a.col_user AND a.col_deleted = 0 WHERE tab_cb_user._id IN ( %s ) AND tab_cb_user.col_deleted IS NULL',
                implode(',', $escaped_list));
        }

        $query .= ' GROUP BY uid';

        // ソートが指定されている場合
        if ($sort === 'size') {
            if ($reverse) {
                $query .= ' ORDER BY SUM, tab_cb_user.col_position, uid';
            } else {
                $query .= ' ORDER BY SUM DESC, tab_cb_user.col_position, uid';
            }
        } else {
            $query .= ' ORDER BY tab_cb_user.col_position, uid';
        }
        $result = $db->query($query);
        if ($result === false) {
            $db->throwError(['query' => 'failed query on SELECT: ' . $query]);
        }
        //mail size limit common
        $this->getSizeLimitSetting($setting);
        while ($row = $db->fetch_assoc($result)) {
            $retval[$row['uid']] = $row;
            $this->getSizeUserLimitSetting($settings, $row['uid']);

            if ($settings['user_limit_' . $row['uid']]
                !== $setting['user_limit']
                || $settings['receive_limit_' . $row['uid']]
                   !== $setting['receive_limit']
                || $settings['send_limit_' . $row['uid']]
                   !== $setting['send_limit']
            ) {
                if ($settings['user_limit_' . $row['uid']]
                    == GRN_MAIL_DEFAULT_USER_SIZE_LIMIT
                ) {
                    $retval[$row['uid']]['user_limit']
                        = GRN_MAIL_USER_SIZE_UNLIMIT;//set value unlimit
                } else {
                    $retval[$row['uid']]['user_limit'] = $settings['user_limit_'
                                                                   . $row['uid']];
                }
                if ($settings['receive_limit_' . $row['uid']]
                    == GRN_MAIL_DEFAULT_USER_SIZE_LIMIT
                ) {
                    $retval[$row['uid']]['receive_limit']
                        = GRN_MAIL_USER_SIZE_UNLIMIT;//set value unlimit
                } else {
                    $retval[$row['uid']]['receive_limit']
                        = $settings['receive_limit_' . $row['uid']];
                }
                if ($settings['send_limit_' . $row['uid']]
                    == GRN_MAIL_DEFAULT_USER_SIZE_LIMIT
                ) {
                    $retval[$row['uid']]['send_limit']
                        = GRN_MAIL_USER_SIZE_UNLIMIT;//set value unlimit
                } else {
                    $retval[$row['uid']]['send_limit'] = $settings['send_limit_'
                                                                   . $row['uid']];
                }
                $retval[$row['uid']]['reverse'] = $reverse;
                $retval[$row['uid']]['sort_by'] = $sort;
                $retval[$row['uid']]['no_display_value'] = false;

            } else {
                $retval[$row['uid']]['user_limit'] = 0;
                $retval[$row['uid']]['receive_limit'] = 0;
                $retval[$row['uid']]['send_limit'] = 0;
                $retval[$row['uid']]['reverse'] = $reverse;
                $retval[$row['uid']]['sort_by'] = $sort;
                $retval[$row['uid']]['no_display_value'] = true;
            }
        }

        return $retval;
    }

    /**
     * Sort mail size limit by column
     *
     * @param   object  $retval
     * @param   boolean $reverse
     * @param   array   $sort_by_column value size limit
     *
     * @return  object
     */
    function sortSizeByColumn(&$retval, $reverse, $sort_by_column)
    {
        if ($reverse) {
            asort($sort_by_column, SORT_NUMERIC);
        } else {
            arsort($sort_by_column, SORT_NUMERIC);
        }
        $retval_sorted = [];
        foreach ($sort_by_column as $key => $item) {
            $retval_sorted[$key] = $retval[$key];
        }
        $retval = $retval_sorted;
    }


    /**
     * Import mail size limit from file CSV
     *
     * @param   object $csv CB_CSVReader
     *
     * @description カラム内容
     *  +-----+-------------------------+-------------------------------------------+----+
     *  |No.  |カラム                   |データ                                     |必須|
     *  +=====+=========================+===========================================+====+
     *  |01   |ユーザーログイン名       |ログイン名                                 | ○ |
     *  |02   |総メールサイズ（MB）         |user_limit                          |    |
     *  |03   |受信メールサイズ（KB）     |receive_limit                      |    |
     *  |04   |送信メールサイズ（KB） |send_limit                               |    |
     *  +-----+-------------------------+-------------------------------------------+----+
     * @return  boolean
     */
    function importMailSizeLimitToCSV(& $csv)
    {
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $login = $this->_utility->getLoginUser();
        require_once('fw/string_util.csp');

        while (($line = $csv->readLine()) !== false) {
            if ( ! is_array($line) || (count($line) < 4)) {
                cb_throw_error(E_GRN_MAIL_INVALID_FILE_FORMAT);
            }
            // ユーザー
            $user = null;
            if (is_string($line[0])
                && (mb_strlen(($code = cb_trim($line[0]))) > 0)
            ) {
                $user = $uum->getUserByForeignKey($code);
            } else {
                //  user no exist
                cb_throw_error(
                    E_GRN_MAIL_LIMIT_CSV_INVALID_COLUMN_PROPERTY,
                    [
                        'column' => cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
                            'mail_limit_csv_user')
                    ],
                    ['value' => $line[0]],
                    [
                        'value'  => $line[0],
                        'column' => cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
                            'mail_limit_csv_user')
                    ]
                );
            }

            if ( ! is_object($user)) {
                cb_throw_error(
                    E_GRN_USER_NOT_FOUND
                );
            }
            $user_id = $user->getOID();
            // サイズ制限
            $this->getSizeLimitSetting($setting_common);
            // Total user limit
            $user_limit = null;
            $user_limit = cb_trim($line[1]);

            if ((strlen($user_limit) > 0)
                && (strrpos($user_limit, '*') === false)
            ) {
                $temp_user_limit = intval($user_limit);
                if (($temp_user_limit == -1)
                    || ($temp_user_limit >= 1
                        && $temp_user_limit <= 999999)
                ) {
                    $user_limit = $user_limit;
                } else {
                    cb_throw_error(
                        E_GRN_MAIL_LIMIT_CSV_INVALID_COLUMN_PROPERTY,
                        [
                            'column' => cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
                                'mail_limit_csv_user_limit')
                        ],
                        ['value' => $line[1]],
                        [
                            'value'  => $line[1],
                            'column' => cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
                                'mail_limit_csv_user_limit')
                        ]
                    );
                }
            } else {
                $temp_user_limit = $setting_common['user_limit'];
                $user_limit = $temp_user_limit;
            }

            // receive limit
            $receive_limit = null;
            $receive_limit = cb_trim($line[2]);
            $max_receive_limit = 102400;

            if ((strlen($receive_limit) > 0)
                && (strrpos($receive_limit, '*') === false)
            ) {
                $temp_receive_limit = intval($receive_limit);
                if ($temp_user_limit == -1) {
                    if (($temp_receive_limit == -1)
                        || (($temp_receive_limit >= 256)
                            && ($temp_receive_limit <= $max_receive_limit))
                    ) {
                        $receive_limit = $receive_limit;
                    } else {
                        cb_throw_error(
                            E_GRN_MAIL_LIMIT_CSV_INVALID_COLUMN_PROPERTY,
                            [
                                'column' => cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
                                    'mail_limit_csv_receive_limit')
                            ],
                            ['value' => $line[2]],
                            [
                                'value'  => $line[2],
                                'column' => cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
                                    'mail_limit_csv_receive_limit')
                            ]
                        );
                    }
                } else {
                    if (($temp_receive_limit == -1)
                        || (($temp_receive_limit >= 256)
                            && ($temp_receive_limit <= $max_receive_limit)
                            && ($temp_receive_limit
                                <= $temp_user_limit *= 1024))
                    ) {
                        $receive_limit = $receive_limit;
                    } else {
                        cb_throw_error(
                            E_GRN_MAIL_LIMIT_CSV_INVALID_COLUMN_PROPERTY,
                            [
                                'column' => cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
                                    'mail_limit_csv_receive_limit')
                            ],
                            ['value' => $line[2]],
                            [
                                'value'  => $line[2],
                                'column' => cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
                                    'mail_limit_csv_receive_limit')
                            ]
                        );
                    }
                }
            } else {
                $receive_limit = $setting_common['receive_limit'];
            }

            // send limit
            $send_limit = null;
            $send_limit = cb_trim($line[3]);
            if ((strlen($send_limit) > 0)
                && (strrpos($send_limit, '*') === false)
            ) {
                $temp_send_limit = intval($send_limit);
                if (($temp_send_limit == -1)
                    || (($temp_send_limit >= 256)
                        && ($temp_send_limit <= 30720))
                ) {
                    $send_limit = $send_limit;
                } else {
                    cb_throw_error(
                        E_GRN_MAIL_LIMIT_CSV_INVALID_COLUMN_PROPERTY,
                        [
                            'column' => cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
                                'mail_limit_csv_send_limit')
                        ],
                        ['value' => $line[3]],
                        [
                            'value'  => $line[3],
                            'column' => cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
                                'mail_limit_csv_send_limit')
                        ]
                    );
                }
            } else {
                $send_limit = $setting_common['send_limit'];
            }

            $settings = [
                'user_limit_' . $user_id    => $user_limit,
                'receive_limit_' . $user_id => $receive_limit,
                'send_limit_' . $user_id    => $send_limit
            ];

            if ($user_limit == $setting_common['user_limit']
                && $receive_limit == $setting_common['receive_limit']
                && $send_limit == $setting_common['send_limit']
            ) {
                $this->removeSizeUserLimitSetting($settings, $user_id);
                continue;
            }
            $this->setSizeUserLimitSetting($settings, $user_id);
        }

        return true;
    }

    /**
     *Export mail size limit to CSV
     *
     * @param   object  $csv         CB_CSVWriter
     * @param   boolean $b_item_name 先頭に項目名を出力するか
     *
     * @description カラム内容
     *  +-----+-------------------------+-------------------------------------------+----+
     *  |No.  |カラム                   |データ                                     |必須|
     *  +=====+=========================+===========================================+====+
     *  |01   |ユーザーログイン名       |ログイン名                                 | ○ |
     *  |02   |総メールサイズ（MB）         |user_limit                          |    |
     *  |03   |受信メールサイズ（KB）     |receive_limit                      |    |
     *  |04   |送信メールサイズ（KB） |send_limit                               |    |
     *  +-----+-------------------------+-------------------------------------------+----+
     * @return  boolean
     */
    function exportMailSizeLimitToCSV(& $csv, $b_item_name)
    {
        assert('is_object( $csv )');

        // 項目名の書き出し
        if ($b_item_name) {
            $headers = $this->getMailSizeLimitCSVTitles();
            $csv->writeLine($headers);
        }
        // export mail size limit for each user
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $user_count = $uum->getUserCount();
        //--N-navigation
        require_once('grn/org_util.csp');
        $navi_params = [];
        $navigation_info = grn_get_user_navigation_info($user_count,
            $navi_params, -1);
        $user_list = $this->getUsersAccountList(null, $navigation_info);
        foreach (array_keys($user_list) as $uid) {
            $items = $user_list[$uid];
            $foreign_key = $items['foreign_key'];
            $user_limit = $items['user_limit'];
            $receive_limit = $items['receive_limit'];
            $send_limit = $items['send_limit'];
            if ($user_limit == 0 || $receive_limit == 0 || $send_limit == 0) {
                continue;
            } else {
                if ($user_limit == GRN_MAIL_USER_SIZE_UNLIMIT) {
                    $user_limit = -1;
                }
                if ($receive_limit == GRN_MAIL_USER_SIZE_UNLIMIT) {
                    $receive_limit = -1;
                }
                if ($send_limit == GRN_MAIL_USER_SIZE_UNLIMIT) {
                    $send_limit = -1;
                }
                $lines = [];
                $lines[] = $foreign_key;
                $lines[] = $user_limit;
                $lines[] = $receive_limit;
                $lines[] = $send_limit;
            }

            $csv->writeLine($lines);
        }

        return true;
    }

    function getMailSizeLimitCSVTitles()
    {
        require_once('fw/i18n.csp');
        $header = [];
        $headers[] = cb_msg(GRN_MAIL_SYSTEM_MODULE_ID, 'mail_limit_csv_user');
        $headers[] = cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
            'mail_limit_csv_user_limit');
        $headers[] = cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
            'mail_limit_csv_receive_limit');
        $headers[] = cb_msg(GRN_MAIL_SYSTEM_MODULE_ID,
            'mail_limit_csv_send_limit');

        return $headers;
    }

    public function getScreenLayout()
    {
        // システムプロファイルを取得する
        $profile = $this->getSystemProfile();
        assert('! is_null( $profile )');

        $three_pane = true;
        $two_pane = true;
        $default_pane = 3;
        if ($this->_utility->getProfileSetting($profile, 'screen_layout',
            $screen_layout)
        ) {
            if (array_key_exists('3pane', $screen_layout)
                && $screen_layout['3pane'] === false
            ) {
                $three_pane = false;
            }

            if (array_key_exists('2pane', $screen_layout)
                && $screen_layout['2pane'] === false
            ) {
                $two_pane = false;
            }

            if ($three_pane === false && $two_pane === false) {
                $three_pane = true;
                $two_pane = true;
            }

            if (array_key_exists('default_pane', $screen_layout)
                && 2 === $screen_layout['default_pane']
            ) {
                $default_pane = 2;
            }
        }
        $screen_layout = [
            '3pane'        => $three_pane,
            '2pane'        => $two_pane,
            'default_pane' => $default_pane
        ];

        return $screen_layout;
    }
}
