<?php

namespace grn\mail\background\job;

use grn\grn\background\BackgroundJob;
use grn\grn\background\BackgroundJobDTO;
use grn\grn\background\BackgroundJobDAO;
use grn\grn\background\BackgroundJobLogger;

use grn\mail\automation\AutomaticEventFacade;
use grn\mail\automation\AutomaticEventFilterOption;
use grn\grn\background\exception\InvalidDataException;

class MailAutomation implements BackgroundJob
{
    private $automaticEventFacade;
    /** @var  $uum \GRN_Uum */
    private $uum;

    public function __construct()
    {
        global $G_container_base;
        $this->automaticEventFacade = new AutomaticEventFacade();
        $this->uum = $G_container_base->getInstance("uum");
        $this->logger = BackgroundJobLogger::create();
    }

    /**
     * @param BackGroundJobDto $dto
     *
     * @return void
     */
    public function run(BackgroundJobDto $dto)
    {
        try {
            $message = $this->convertMessageToArray($dto);
            if ((int)$message["trialCount"] >= 1) {
                return;
            }
            $this->updateTrialCount($dto, $message);
            $accountId = $message["accountId"];
            $mailIds = $message["mailIds"];
            $user = $this->uum->getUser($message["userId"]);
            if ( ! $user) {
                throw new InvalidDataException("User(id:{$message['userId']}) is not found.");
            }
            $option = new AutomaticEventFilterOption;
            $option->toGetOnlyAvailableAccount();
            $option->toGetOnlyInServiceAction();
            $automaticEvents
                = $this->automaticEventFacade->getEventByAccountId($accountId,
                $option);
            $this->uum->loginAs($user);
            foreach ($automaticEvents as $event) {
                $matchedMailIds = $event->getMatchedMailIds($user, $mailIds);
                $event->runAction($user, $accountId, $matchedMailIds);
            }
        } catch (\Exception $e) {
            $this->logger->logException($e);
        }

    }

    /**
     * @param BackgroundJobDTO $dto
     * @param array            $message
     */
    private function updateTrialCount(BackgroundJobDto $dto, array $message)
    {
        $trialCount = (int)$message["trialCount"];
        $trialCount += 1;
        $message["trialCount"] = $trialCount;
        $dto->setMessage(json_encode($message));
        $dao = new BackgroundJobDAO(cb_get_app_db("job"));
        $dao->updateJobMessageById($dto);
    }

    /**
     * @param BackgroundJobDTO $dto
     *
     * @return array["mailIds"]
     *              ["userId"]
     *              ["accountId"]
     *              ["trialCount"]
     * @throws \grn\grn\background\exception\InvalidDataException
     */
    private function convertMessageToArray(BackgroundJobDto $dto)
    {
        $message = json_decode($dto->getMessage(), true);
        if ( ! $message) {
            throw new InvalidDataException("failed construct job message");
        }

        if ( ! isset($message["mailIds"]) || ! is_array($message["mailIds"])) {
            throw new InvalidDataException("mailIds is invalid");
        }


        foreach (["userId", "accountId", "trialCount"] as $property) {
            if ( ! isset($message[$property])
                 || ! is_numeric($message[$property])
            ) {
                throw new InvalidDataException("${property} is invalid");
            }
        }

        return $message;
    }
}
