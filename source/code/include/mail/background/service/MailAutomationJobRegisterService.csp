<?php

namespace grn\mail\background\service;


use grn\grn\background\BackgroundJobDAO;
use grn\grn\background\BackgroundJobDTO;
use grn\grn\background\IBackgroundJobDAO;
use grn\grn\background\BackgroundJobName;
use grn\mail\automation\AutomaticEventFacade;


class MailAutomationJobRegisterService
{
    /** @var \grn\grn\background\IBackgroundJobDAO */
    private $backgroundJobDAO;
    /** @var  \grn\mail\automation\AutomaticEventFacade */
    private $automaticEventFacade;

    public static function create()
    {
        return new MailAutomationJobRegisterService(
            new BackgroundJobDAO(cb_get_app_db("job")),
            new AutomaticEventFacade()
        );
    }

    /**
     * @param IBackgroundJobDAO    $backgroundJobDAO
     * @param AutomaticEventFacade $automaticEventFacade
     */
    private function __construct(
        IBackgroundJobDAO $backgroundJobDAO,
        AutomaticEventFacade $automaticEventFacade
    ) {
        $this->backgroundJobDAO = $backgroundJobDAO;
        $this->automaticEventFacade = $automaticEventFacade;
    }

    /**
     * @param \CB_User          $user
     * @param \GRN_Mail_Account $account
     * @param                   $mailIds
     */
    public function register(
        \CB_User $user,
        \GRN_Mail_Account $account,
        $mailIds
    ) {
        if (empty($mailIds)) {
            return;
        }

        if ( ! $this->automaticEventFacade->hasAutomaticEvent($user->getOID(),
            $account->getOID())
        ) {
            return;
        }

        $message = [
            "userId"     => $user->getOID(),
            "accountId"  => $account->getOID(),
            "mailIds"    => $mailIds,
            "trialCount" => 0
        ];

        $dto = new BackgroundJobDTO(
            BackgroundJobName::MAIL_AUTOMATIC_EVENT,
            json_encode($message),
            time(),
            time()
        );
        $this->backgroundJobDAO->addJob($dto);
    }

}
