<?php

namespace grn\mail;

use \grn\mail\dao\GrnMailAccountDAO;

class GrnMailSitePosition
{
    const ARG_USER = "user";
    const ARG_ACCOUNT_ID = "accountId";
    const ARG_FOLDER_ID = "folderId";
    const ARG_APPLICATION_NAME = "applicationName";

    /**
     * Make a breadcrum
     *
     * @param string $pagename
     * @param array  $argument
     *
     * @return array
     */
    public function getSitePositionArray($pagename, $argument)
    {
        if ($pagename == "mail/view" || $pagename == "mail/search") {
            assert(array_key_exists(self::ARG_USER, $argument));
            assert(array_key_exists(self::ARG_ACCOUNT_ID, $argument));
            assert(array_key_exists(self::ARG_FOLDER_ID, $argument));
            assert(array_key_exists(self::ARG_APPLICATION_NAME, $argument));

            return $this->getFolderTreeSitePositionArray($pagename,
                $argument[self::ARG_USER], $argument[self::ARG_ACCOUNT_ID],
                $argument[self::ARG_FOLDER_ID],
                $argument[self::ARG_APPLICATION_NAME]);
        }
        assert(false);

        return [];
    }

    /**
     * Make a breadcrumb based on the category tree.
     *
     * @param string                     $pagename
     * @param \CB_User                   $user
     * @param string                     $accountId
     * @param string                     $folderId
     * @param                            $applicationName
     *
     * @return array
     */
    private function getFolderTreeSitePositionArray(
        $pagename,
        \CB_User $user,
        $accountId,
        $folderId,
        $applicationName
    ) {
        $sitePosition = [];

        $sitePosition[] = $this->getFirstElement($user->getOID(), $accountId,
            $applicationName);

        $folderLogic = $this->createFolderLogic();
        $categories = $folderLogic->getAncestors($folderId);
        array_reverse($categories);

        foreach ($categories as $eachCategory) {
            // The root category should not be in the site position
            /** @var \GRN_Mail_Folder $eachCategory */
            if ($eachCategory->get('code') == GRN_MAIL_FOLDER_CODE_ROOT) {
                continue;
            }

            $sitePosition[] = [
                "page" => "mail/index",
                "name" => $eachCategory->getDisplayName(),
                "aid"  => $accountId,
                "sf"   => 1,
                "cid"  => $eachCategory->getOID(),
            ];
        }

        $sitePosition[] = [
            "page" => "",
            "name" => grn_get_page_display_name($pagename,
                ["app_name" => $applicationName])
        ];

        return $sitePosition;
    }

    /**
     * Make the first element of the breadcrumb
     *
     * @param string $userId
     * @param string $accountId
     * @param string $applicationName
     *
     * @return array
     */
    private function getFirstElement($userId, $accountId, $applicationName)
    {
        $pageName = grn_get_page_display_name("mail/index",
            ["app_name" => $applicationName]);
        if ($this->doesUserHaveManyAccounts($userId)) {
            $account = $this->getAccount($accountId);

            return [
                "page" => "mail/index",
                "name" => "{$pageName}<{$account->getDisplayName()}>",
                "aid"  => $accountId,
            ];
        }

        return [
            "page" => "mail/index",
            "name" => "{$pageName}",
            "aid"  => $accountId,
        ];
    }

    /**
     * Check whether the user specified by $userId has more than one emal account.
     *
     * @param string $userId
     *
     * @return bool
     */
    private function doesUserHaveManyAccounts($userId)
    {
        $accountDao = $this->createGrnMailAccountDAO();

        return $accountDao->countUsersAccount($userId, true) > 1;
    }

    /**
     * Get the mail account specified by $accountId
     *
     * @param string $accountId
     *
     * @return bean\GrnMailAccount
     */
    private function getAccount($accountId)
    {
        $accountDao = $this->createGrnMailAccountDAO();

        return $accountDao->selectAccountById($accountId);
    }

    /**
     * @return GrnMailAccountDAO
     */
    private function createGrnMailAccountDAO()
    {
        return new GrnMailAccountDAO();
    }

    /**
     * @return \GRN_Mail_FolderLogic
     */
    private function createFolderLogic()
    {
        require_once("mail/folder.csp");

        return \GRN_Mail_FolderLogic::getInstance();
    }
}
