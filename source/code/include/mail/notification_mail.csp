<?php

/**
 * 外部通知メールロジック
 *
 * @package grn.mail
 * @author  Ikeda, ATSUSHI 2005/02
 * @version 1.0
 */

require_once('fw/string_util.csp');
require_once('mail/utility.csp');
require_once('grn/application.csp');


define('GRN_MAIL_NOTTIFICATION_ABSTRACT_LENGTH', 128);
define('GRN_MAIL_NOTTIFICATION_NOTIFY_MAIL_VERSION', '1.0');
define('GRN_MAIL_NOTTIFICATION_HEADER_PREFIX', 'X-Cybozu-');
define('GRN_MAIL_NOTTIFICATION_HEADER_NOTIFY_APP_NAME',
    'X-Cybozu-Notify-App-Name');
define('GRN_MAIL_NOTTIFICATION_HEADER_NOTIFY_APP_VER',
    'X-Cybozu-Notify-App-Ver');
define('GRN_MAIL_NOTTIFICATION_HEADER_NOTIFY_APP_UNIQUE_ID',
    'X-Cybozu-Notify-App-UniqueID');
define('GRN_MAIL_NOTTIFICATION_HEADER_NOTIFY_APP_URL',
    'X-Cybozu-Notify-App-URL');
define('GRN_MAIL_NOTTIFICATION_HEADER_NOTIFY_DATE', 'X-Cybozu-Notify-Date');
define('GRN_MAIL_NOTTIFICATION_HEADER_NOTIFY_NAME', 'X-Cybozu-Notify-Name');
define('GRN_MAIL_NOTTIFICATION_HEADER_NOTIFY_SUBJECT',
    'X-Cybozu-Notify-Subject');
define('GRN_MAIL_NOTTIFICATION_HEADER_NOTIFY_ABSTRACT',
    'X-Cybozu-Notify-Abstract');
define('GRN_MAIL_NOTTIFICATION_HEADER_NOTIFY_VERSION',
    'X-Cybozu-Notify-Version');
define('GRN_MAIL_NOTTIFICATION_HEADER_NOTIFY_ICON_URL',
    'X-Cybozu-Notify-Icon-URL');
define('GRN_MAIL_NOTTIFICATION_HEADER_NOTIFY_DIGEST', 'X-Cybozu-Notify-Digest');

define('GRN_MAIL_NOTTIFICATION_CYBOZU_APP_NAME_DEZIE', 'Cybozu Dezie');
define('GRN_MAIL_NOTTIFICATION_CYBOZU_APP_NAME_MAILWISE', 'Cybozu MailWise');
define('GRN_MAIL_NOTTIFICATION_CYBOZU_APP_NAME_COLLABOREX',
    'Cybozu Collaborex');
define('GRN_MAIL_NOTTIFICATION_CYBOZU_APP_NAME_DOTSALES', 'Cybozu DotSales');
define('GRN_MAIL_NOTTIFICATION_CYBOZU_APP_NAME_BLOG', 'Cybozu Blog');

define('GRN_MAIL_NOTTIFICATION_NOTIFY_ICON_DEZIE', 'notify_dezie20');
define('GRN_MAIL_NOTTIFICATION_NOTIFY_ICON_MAILWISE', 'notify_mailwise20');
define('GRN_MAIL_NOTTIFICATION_NOTIFY_ICON_COLLABOREX', 'notify_collaborex20');
define('GRN_MAIL_NOTTIFICATION_NOTIFY_ICON_DOTSALES', 'notify_dotsales20');
define('GRN_MAIL_NOTTIFICATION_NOTIFY_ICON_BLOG', 'notify_blog20');
define('GRN_MAIL_NOTTIFICATION_NOTIFY_ICON_DEFAULT', 'notify20');

define('GRN_MAIL_NOTTIFICATION_COMBINE_SEPARATOR', '-');
define('GRN_MAIL_NOTTIFICATION_KEY_FOR_CYBOZU',
    '2003/02/31+for cybozu products only+58163');


//////////////////////////////////////////////////////////////////////////////

/**
 * 外部通知メールデータ
 */
class GRN_Mail_NotificationMailData
{
    // constructor
    function __construct()
    {
    }

    //////////////////////////////////////////////////////////////////////////////
    // private functions

    // 一意なキーを作る
    function _makeKey($app_name, $app_unique_id, $app_url)
    {
        $key = '';
        if (strlen($app_name) == 0) {
            return $key;
        }

        $key = $app_name;
        $key .= '-';

        if (strlen($app_unique_id) > 0) {
            $key .= $app_unique_id;
        } elseif (strlen($app_url) > 0) {
            $pos = strpos($app_url, '#');
            if ($pos !== false) {
                $s = substr($app_url, 0, $pos);
            } else {
                $s = $app_url;
            }

            $key .= $s;
        } else {
            return '';
        }

        // This is because the type of the column "col_unique_id" of the table "tab_grn_notification_notify___pXX" is char(64)
        if (strlen($key) > 64) {
            $key = substr($key, 0, 64);
        }

        return $key;
    }

    //////////////////////////////////////////////////////////////////////////////
    // public functions

    function addHeaderValue($name, $value)
    {
        static $_header_prefix_len = null;
        if (is_null($_header_prefix_len)) {
            $_header_prefix_len = strlen(GRN_MAIL_NOTTIFICATION_HEADER_PREFIX);
        }

        // サイボウズ拡張ヘッダのみ格納する
        $name = cb_trim($name);
        if (strncasecmp($name, GRN_MAIL_NOTTIFICATION_HEADER_PREFIX,
                $_header_prefix_len) != 0
        ) {
            return;
        }

        $name = strtolower($name);
        $this->_header_values[$name] = cb_trim($value);
    }

    function getNumberOfHeaderValues()
    {
        return count($this->_header_values);
    }

    function getHeaderValue($name)
    {
        $name = cb_trim($name);
        if (strlen($name) == 0) {
            return null;
        }

        $name = strtolower($name);
        if ( ! array_key_exists($name, $this->_header_values)) {
            return null;
        }

        return $this->_header_values[$name];
    }

    // 一意なキーを作る
    function makeKey()
    {
        $app_name
            = $this->getHeaderValue(GRN_MAIL_NOTTIFICATION_HEADER_NOTIFY_APP_NAME);
        $app_unique_id
            = $this->getHeaderValue(GRN_MAIL_NOTTIFICATION_HEADER_NOTIFY_APP_UNIQUE_ID);
        $app_url
            = $this->getHeaderValue(GRN_MAIL_NOTTIFICATION_HEADER_NOTIFY_APP_URL);

        return $this->_makeKey($app_name, $app_unique_id, $app_url);
    }

    // サイボウズ製品アイコンを取得
    function getCybozuIcon()
    {
        $app_name
            = $this->getHeaderValue(GRN_MAIL_NOTTIFICATION_HEADER_NOTIFY_APP_NAME);
        if (is_null($app_name) || (strlen($app_name) == 0)) {
            return null;
        }

        if (strcasecmp($app_name, GRN_MAIL_NOTTIFICATION_CYBOZU_APP_NAME_DEZIE)
            == 0
        ) {
            return GRN_MAIL_NOTTIFICATION_NOTIFY_ICON_DEZIE;
        } elseif (strcasecmp($app_name,
                GRN_MAIL_NOTTIFICATION_CYBOZU_APP_NAME_MAILWISE) == 0
        ) {
            return GRN_MAIL_NOTTIFICATION_NOTIFY_ICON_MAILWISE;
        } elseif (strcasecmp($app_name,
                GRN_MAIL_NOTTIFICATION_CYBOZU_APP_NAME_COLLABOREX) == 0
        ) {
            return GRN_MAIL_NOTTIFICATION_NOTIFY_ICON_COLLABOREX;
        } elseif (strcasecmp($app_name,
                GRN_MAIL_NOTTIFICATION_CYBOZU_APP_NAME_DOTSALES) == 0
        ) {
            return GRN_MAIL_NOTTIFICATION_NOTIFY_ICON_DOTSALES;
        } elseif (strcasecmp($app_name,
                GRN_MAIL_NOTTIFICATION_CYBOZU_APP_NAME_BLOG) == 0
        ) {
            return GRN_MAIL_NOTTIFICATION_NOTIFY_ICON_BLOG;
        }

        return null;
    }

    //////////////////////////////////////////////////////////////////////////////
    // メンバ変数

    var $_header_values = [];
}

//////////////////////////////////////////////////////////////////////////////

/**
 * 外部通知メールロジック
 *
 * @author  IKEDA, Atsushi 2005/02
 * @version 1.0
 * @package grn.mail
 */
class GRN_Mail_NotificationMailLogic
{
    /**
     * Return singleton.
     *
     * @return GRN_Mail_NotificationMailLogic
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Mail_NotificationMailLogic();
        }

        return $_instance;
    }

    function __construct()
    {
        $this->_utility = GRN_Mail_Utility::getInstance();
    }

    //////////////////////////////////////////////////////////////////////////
    // メンバ変数
    /**
     * @access private
     */
    var $_utility = null;

    //////////////////////////////////////////////////////////////////////////
    // private method


    //////////////////////////////////////////////////////////////////////////
    // public method

    /**
     * 通知メールの拡張メールヘッダ値解析
     *
     * @param   object $msg メールメッセージオブジェクト {@link CB_MailMessage}
     *
     * @return  object  外部通知データ{@link GRN_Mail_NotificationMailData}
     */
    function parseNotifyHeader(& $msg)
    {
        if (is_null($msg)) {
            assert('FALSE');
            {
                $___ret = null;

                return $___ret;
            }
        }

        $all_headers = $msg->getAllHeaders();
        if ( ! is_array($all_headers)) {
            {
                $___ret = null;

                return $___ret;
            }
        }

        $notify_mail_data = new GRN_Mail_NotificationMailData;
        foreach (array_keys($all_headers) as $header_key) {
            $header =& $all_headers[$header_key];
            $notify_mail_data->addHeaderValue($header->name, $header->value);
        }

        return $notify_mail_data;
    }

    /**
     * @param GRN_Notification_Data $notify_data
     * @param GRN_Mail_Message      $mail_row
     * @param string                $account
     * @param string                $name_key
     * @param string                $name_format
     * @param array                 $notify_data_array
     */
    function createNotificationData(
        & $notify_data,
        & $mail_row,
        $account,
        $name_key,
        $name_format,
        & $notify_data_array
    ) {
        $name = $mail_row->get($name_key);
        if (is_null($name) || (strlen($name) == 0)) {
            if ($name_format == 'name') {
                $name = $mail_row->get('abstract_from_email');
            } elseif ($name_format == 'email') {
                $name = $mail_row->get('abstract_from_name');
            }
        }

        $mail_id = $mail_row->getOID();
        $notify_data->setUniqueId($mail_id);
        $notify_data->setOrgData([
            'mid'      => $mail_id,
            'attached' => $mail_row->get('attached')
        ]);
        $subject = $mail_row->get('abstract_subject');
        if (0 == strlen($subject)) {
            $subject = cb_msg('grn.mail', 'no_title');
        }
        $notify_data->setSubjectData($subject);
        $notify_data->setSenderData($name, null);
        $notify_data->setAbstractData($account);

        $notify_data->setTimeStampData($mail_row->get('timestamp'));

        $notify_data_array = $notify_data->export();
    }

    /**
     * 外部通知メール受信処理
     *
     * @param CB_User               $user 受信するユーザー
     * @param CB_MailLazyMessage    $msg
     * @param GRN_Notification_Data $notify_data
     *
     * @return boolean 通知メールか否か
     */
    public function processNotifyMail(& $user, & $msg, & $notify_data)
    {
        if ( ! is_object($user) || ! is_object($msg)) {
            assert('FALSE');

            return false;
        }

        $subject = $msg->getSubject();
        $from = '';
        $from_list = $msg->getFrom();
        if (is_array($from_list)) {
            foreach (array_keys($from_list) as $key) {
                $from_temp =& $from_list[$key];
                if (strlen($from) > 0) {
                    $from .= ', ';
                }

                $from_name = $from_temp->name;
                if (strlen($from_name) > 0) {
                    $from_name
                        = GRN_Mail_Utility::static_addNameQuotation($from_name,
                        'add');
                }

                if (strlen($from_temp->address) > 0) {
                    if (strlen($from_name) > 0) {
                        $from_name .= ' ';
                    }
                    $from_name .= GRN_Mail_Utility::static_addEmailBracket($from_temp->address,
                        'add');
                }

                $from .= $from_name;
            }
        }

        $notify_mail_data = $this->parseNotifyHeader($msg);
        if (is_null($notify_mail_data)) {
            return false;
        }

        $app_name
            = $notify_mail_data->getHeaderValue(GRN_MAIL_NOTTIFICATION_HEADER_NOTIFY_APP_NAME);
        $app_url
            = $notify_mail_data->getHeaderValue(GRN_MAIL_NOTTIFICATION_HEADER_NOTIFY_APP_URL);

        // 製品名およびURLが指定されていなければ連携通知とみなさない
        if ( ! is_string($app_name) || (strlen($app_name) == 0)
             || ! is_string($app_url)
             || (strlen($app_url) == 0)
        ) {
            return false;
        }

        // 外部アプリケーション管理ロジックを取得する
        require_once('grn/outside_application.csp');
        $app_manager = GRN_Notification_ApplicationManager::getInstance();

        // （ユーザーが定義し、ソートキーになる）識別子から外部アプリケーションを取得する
        $app =& $app_manager->getById($app_name);
        if (is_null($app)) {
            require_once('notification/system_config.csp');
            $notify_system_config
                = GRN_Notification_SystemConfig::getInstance();

            // 未登録の外部通知を使用する設定を取得
            if ($notify_system_config->getOutsideApplicationSetting($setting)
                && $setting['is_receive']
            ) {
                // 該当する外部アプリがない場合は生成
                $app =& $app_manager->create($app_name);
            }
        }

        if (is_null($app)) {
            return false;
        }

        // If the notification mail is not safe, it is treated as a normal mail.
        if ( ! $app->validateNotificationMail($notify_mail_data)) {
            return false;
        }

        // 一意なキーを作る
        $unique_key = $notify_mail_data->makeKey();
        if (strlen($unique_key) == 0) {
            return false;
        }

        require_once('grn/notification.csp');
        $notify_service = GRN_Notification_Service::getInstance();

        // メールソースがない場合には外部通知を記録しない
        $msg->_fetchSource();
        $mail_source =& $msg->_source_data;
        //$mail_source = $msg->getSourceData();
        if (is_null($mail_source)) {
            return false;
        }

        $moduleId = $app->getModuleId();
        $notify_data->setModuleId($moduleId);   // 外部アプリのモジュールID
        $notify_data->setStatusToUnread();
        $notify_data->setUniqueId($unique_key);
        $notify_data->setOrgData([]);

        // 標題アイコン
        $subject_icon
            = $notify_mail_data->getHeaderValue(GRN_MAIL_NOTTIFICATION_HEADER_NOTIFY_ICON_URL);
        if (is_null($subject_icon) || (strlen($subject_icon) == 0)) {
            // 指定されていないときはサイボウズ製品のデフォルトアイコンを使用
            $subject_icon = $notify_mail_data->getCybozuIcon();
            if (is_null($subject_icon) || (strlen($subject_icon) == 0)) {
                // サイボウズ製品以外の場合
                $subject_icon = GRN_MAIL_NOTTIFICATION_NOTIFY_ICON_DEFAULT;
            }
        }

        // 標題
        $notify_subject
            = $notify_mail_data->getHeaderValue(GRN_MAIL_NOTTIFICATION_HEADER_NOTIFY_SUBJECT);
        if ( ! is_null($notify_subject) && (strlen($notify_subject) >= 0)) {
            $subject = $notify_subject;
        }
        if (0 == strlen($subject)) {
            $subject = cb_msg('grn.mail', 'no_title');
        }
        $notify_data->setSubjectData($subject, null, null, $app_url,
            $subject_icon);

        // 名前
        $notify_from
            = $notify_mail_data->getHeaderValue(GRN_MAIL_NOTTIFICATION_HEADER_NOTIFY_NAME);
        if ( ! is_null($notify_from) && (strlen($notify_from) >= 0)) {
            $from = $notify_from;
        }
        $notify_data->setSenderData($from, null);

        // 内容
        $abstract
            = $notify_mail_data->getHeaderValue(GRN_MAIL_NOTTIFICATION_HEADER_NOTIFY_ABSTRACT);
        if (is_null($abstract) || (strlen($abstract) == 0)) {
            // メール本文
            $body = $html_body = null;
            GRN_Mail_Message::static_fetchMailBody($msg, $body, $html_body);
            $abstract = $body;
        }
        $notify_data->setAbstractData($abstract);

        // 日時
        $notify_ts = new CB_TimeStamp;
        $notify_ts->unix_ts = time();

        $notify_data->setTimeStampData($notify_ts);
        $notify_data->setAutoConfirmFlag(true);       // 開くと同時に確認済みとするフラグ

        // Always treat an external notification as a fresh new notification
        $notify_data->setActionId(GRN_NOTIFICATION_ACTION_CREATE_ID);

        // 通知データ追加
        $notify_service->modifyNotifyData($user, $notify_data, true);

        return true;
    }

}



