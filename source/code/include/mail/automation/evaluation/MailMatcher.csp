<?php

namespace grn\mail\automation\evaluation;

require_once("mail/table.csp");

class MailMatcher
{
    /**
     * @param       $userId
     * @param       $logicType  "AND" "OR"
     * @param array $mailIdCandidates
     * @param array $conditions []["conditionObject"] -> title to cc from
     *                          []["condition"]       -> contains notContains equals notEquals statsWith
     *                          []["matchData"]       -> String to search
     *
     * @return array
     */
    public function getMatchedMailIds(
        $userId,
        $logicType,
        array $mailIdCandidates,
        array $conditions
    ) {
        if (empty($mailIdCandidates) || empty($conditions)) {
            return [];
        }

        $matchingConditions = $this->getMatchingConditions($conditions);
        if (empty($matchingConditions)) {
            return [];
        }


        $db = cb_get_app_db("mail");
        $query = " SELECT _id AS mailId"
                 . " FROM " . "tab_" . \grn_mail_get_personal_tablename($userId,
                GRN_MAIL_MESSAGE_TABLE)
                 . " WHERE " . $db->format("_id IN (@A) ", [$mailIdCandidates])
                 . " AND " . sprintf("(%s)",
                implode($matchingConditions, $logicType));

        $result = $db->query($query);
        $mailIds = [];
        while ($row = $db->fetch_assoc($result)) {
            $mailIds[] = $row["mailId"];
        }

        return $mailIds;
    }

    /**
     * @param array $conditions
     *
     * @see MailMatcher::getMatchedMailIds structure of @var $conditions
     * @return array sets of matching query conditions
     */
    private function getMatchingConditions(array $conditions)
    {
        $queryConditions = [];
        foreach ($conditions as $condition) {
            if (strlen($condition["matchData"]) <= 0) {
                continue;
            }

            $queryConditions[] = sprintf(" (%s %s) ",
                $this->getColumnName($condition["evaluationObject"]),
                $this->formatCondition($condition["evaluationMethod"],
                    $condition["matchData"])
            );
        }

        return $queryConditions;

    }

    /**
     * @param $evaluationMethod
     * @param $matchData
     *
     * @return string
     */
    private function formatCondition($evaluationMethod, $matchData)
    {
        $db = cb_get_app_db("mail");
        if (EvaluationMethodConstraints::CONTAINS === $evaluationMethod) {
            return $db->format("LIKE '%@L%'", [$matchData]);
        }

        if (EvaluationMethodConstraints::NOT_CONTAINS === $evaluationMethod) {
            return $db->format("NOT LIKE '%@L%'", [$matchData]);
        }

        if (EvaluationMethodConstraints::EQUALS === $evaluationMethod) {
            return $db->format("= '@S'", [$matchData]);
        }

        if (EvaluationMethodConstraints::NOT_EQUALS === $evaluationMethod) {
            return $db->format("<> '@S'", [$matchData]);
        }

        if (EvaluationMethodConstraints::STARTS_WITH === $evaluationMethod) {
            return $db->format("LIKE '@L%'", [$matchData]);
        }
        assert('false');

        return "";
    }

    /**
     * @param $conditionObject
     *
     * @return string
     */
    private function getColumnName($conditionObject)
    {
        if (EvaluationObjectConstraints::SUBJECT === $conditionObject) {
            return "col_subject";
        }

        if (EvaluationObjectConstraints::TO === $conditionObject) {
            return "col_to";
        }

        if (EvaluationObjectConstraints::CC === $conditionObject) {
            return "col_cc";
        }

        if (EvaluationObjectConstraints::FROM === $conditionObject) {
            return "col_from";
        }
        assert('false');

        return "";
    }


}
