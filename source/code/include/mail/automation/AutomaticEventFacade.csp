<?php

namespace grn\mail\automation;

use grn\mail\dao\AutomaticEventDAO;
use grn\mail\dao\AutomaticEventTriggerConditionDAO;
use grn\mail\dao\AutomaticEventActionDAO;

class AutomaticEventFacade
{
    private $eventDAO;
    private $eventTriggerConditionDAO;
    private $eventActionDAO;
    private $validator;

    public function __construct()
    {
        $this->eventDAO = new AutomaticEventDAO();
        $this->eventTriggerConditionDAO
            = new AutomaticEventTriggerConditionDAO();
        $this->eventActionDAO = new AutomaticEventActionDAO();
        $this->validator = new MailAutomaticEventValidator();
    }


    /**
     * @param                            $accountId
     * @param AutomaticEventFilterOption $option
     *
     * @return AutomaticEvent[]
     */
    public function getEventByAccountId(
        $accountId,
        AutomaticEventFilterOption $option
    ) {
        $this->validator->validateMailAutomationIsAvailable();
        $events = $this->eventDAO->getEventsByAccountIds([$accountId], $option);
        $actionsEventIdHash
            = $this->eventActionDAO->getActionsByAccountIds([$accountId],
            $option);

        foreach ($actionsEventIdHash as $eventId => $actions) {
            if ( ! isset($events[$eventId])) {
                continue;
            }

            $events[$eventId]->setActions($actions);
        }

        $conditionsEventIdHash
            = $this->eventTriggerConditionDAO->getConditionsByAccountIds([$accountId],
            $option);

        foreach ($conditionsEventIdHash as $eventId => $conditions) {
            if ( ! isset($events[$eventId])) {
                continue;
            }
            $events[$eventId]->setConditions($conditions);
        }

        return $events;
    }

    /**
     * @param       $userId
     * @param       $accountId
     * @param array $event
     * @param array $conditions
     * As to properties of $conditions, @see AutomaticEventTriggerConditionDAO::insertConditionByEventId
     * As to properties of $actions,    @see AutomaticEventActionDAO::insertActionByEventId
     * @param array $actions
     */
    public function addEvent(
        $userId,
        $accountId,
        array $event,
        array $conditions,
        array $actions
    ) {
        $this->validator->validateMailAutomationIsAvailable();
        //validate register Data
        $this->validator->validateEvent($event);
        $this->validator->validateConditions($conditions);
        $actions = $this->validator->validateActions($actions);

        //Database consistency
        $this->validator->validateUserHasAccount($userId, $accountId);

        $eventId = $this->eventDAO->insertEvent($accountId, $event);
        $this->eventTriggerConditionDAO->insertConditionByEventId($eventId,
            $conditions);
        $this->eventActionDAO->insertActionByEventId($eventId, $actions);
    }

    public function updateEvent(
        $userId,
        $accountId,
        $eventId,
        array $event,
        array $conditions,
        array $actions
    ) {
        $this->validator->validateMailAutomationIsAvailable();
        //validate register Data
        $this->validator->validateEvent($event);
        $this->validator->validateConditions($conditions);
        $actions = $this->validator->validateActions($actions);

        //Database consistency
        $this->validator->validateAccountHasAutomaticEvent($userId, $accountId,
            $eventId);

        $this->eventDAO->updateEvent($eventId, $event);
        $this->eventTriggerConditionDAO->replaceConditionByEventId($eventId,
            $conditions);
        $this->eventActionDAO->replaceActionByEventId($eventId, $actions);
    }

    public function deleteEventByEventId($userId, $accountId, $eventId)
    {
        $this->validator->validateMailAutomationIsAvailable();
        //Database consistency
        $this->validator->validateAccountHasAutomaticEvent($userId, $accountId,
            $eventId);
        $this->eventDAO->deleteEventById($eventId);
    }

    public function enableEventByEventId($userId, $accountId, $eventId)
    {
        $this->validator->validateMailAutomationIsAvailable();
        //Database consistency
        $this->validator->validateAccountHasAutomaticEvent($userId, $accountId,
            $eventId);
        $this->eventDAO->enableEventById($eventId);
    }

    public function disableEventByEventId($userId, $accountId, $eventId)
    {
        $this->validator->validateMailAutomationIsAvailable();
        //Database consistency
        $this->validator->validateAccountHasAutomaticEvent($userId, $accountId,
            $eventId);
        $this->eventDAO->disableEventById($eventId);
    }

    /**
     * @param $userId
     * @param $accountId
     *
     * @return mixed
     */
    public function hasAutomaticEvent($userId, $accountId)
    {
        try {
            $this->validator->validateMailAutomationIsAvailable();
        } catch (\grn\grn\GrnException $e) {
            return false;
        }

        return $this->eventDAO->hasAutomaticEvent($userId, $accountId);
    }
}
