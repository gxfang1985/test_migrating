<?php

namespace grn\mail\automation;

use grn\grn\GrnException;
use grn\mail\dao\GrnMailAccountDAO;
use grn\mail\dao\AutomaticEventDAO;

require_once("mail/system_config.csp");

class MailAutomaticEventValidator
{
    const MAX_AUTOMATIC_EVENT = 50;

    /**
     * @param array $event
     *
     * @throws \grn\grn\GrnException
     */
    public function validateEvent(array $event)
    {
        $enum = Enums::getInstance();
        if ( ! isset($event["name"])
             || ! is_string($event["name"])
             || ! strlen($event["name"]) > 0
        ) {
            throw new GrnException(E_COMMON_MISSING_MANDATORY);
        }

        if ( ! isset($event["logicType"])
             || ! in_array($event["logicType"], $enum->logicType())
        ) {
            throw new GrnException(E_COMMON_MISSING_MANDATORY);
        }

        if ( ! isset($event["serviceStatus"])
             || ! in_array($event["serviceStatus"], $enum->serviceStatus())
        ) {
            throw new GrnException(E_COMMON_MISSING_MANDATORY);
        }

    }

    /**
     * @param array $conditions
     *
     * @throws \grn\grn\GrnException
     */
    public function validateConditions(array $conditions)
    {
        $enum = Enums::getInstance();
        foreach ($conditions as $condition) {
            if ( ! isset($condition["evaluationMethod"])
                 || ! in_array($condition["evaluationMethod"],
                    $enum->evaluationMethod())
            ) {
                throw new GrnException(E_COMMON_MISSING_MANDATORY);
            }

            if ( ! isset($condition["evaluationObject"])
                 || ! in_array($condition["evaluationObject"],
                    $enum->evaluationObject())
            ) {
                throw new GrnException(E_COMMON_MISSING_MANDATORY);
            }

            if ( ! isset($condition["matchData"])) {
                throw new GrnException(E_COMMON_MISSING_MANDATORY);
            }


        }
    }

    /**
     * @param array $actions
     *
     * @return array
     * @throws \grn\grn\GrnException
     */
    public function validateActions(array $actions)
    {
        $enum = Enums::getInstance();
        if (empty($actions)) {
            throw new GrnException(E_COMMON_MISSING_MANDATORY);
        }

        foreach ($actions as $action) {
            if ( ! isset($action["name"])
                 || ! in_array($action["name"], $enum->actionName())
            ) {
                throw new GrnException(E_COMMON_MISSING_MANDATORY);
            }

            if ( ! isset($action["message"])
                 || ! strlen($action["message"] > 0)
            ) {
                throw new GrnException(E_COMMON_MISSING_MANDATORY);
            }
        }

        return $actions;
    }

    /**
     * @param $userId
     * @param $accountId
     *
     * @throws \grn\grn\GrnException
     */
    public function validateUserHasAccount($userId, $accountId)
    {
        $accountDAO = new GrnMailAccountDAO;
        if ( ! $accountDAO->hasValidAccount($userId, $accountId)) {
            throw new GrnException(E_GRN_MAIL_ACCOUNT_EMAIL_NOT_FOUND);
        }

        $eventDao = new AutomaticEventDAO();
        if ($eventDao->hasEventsMoreThan(self::MAX_AUTOMATIC_EVENT, $userId)) {
            throw new GrnException(E_GRN_MAIL_TOO_MANY_AUTO_FORWARDING_SETTING);
        }

    }

    /**
     * @param $userId
     * @param $accountId
     * @param $eventId
     *
     * @throws \grn\grn\GrnException
     */
    public function validateAccountHasAutomaticEvent(
        $userId,
        $accountId,
        $eventId
    ) {
        $eventDAO = new AutomaticEventDAO;
        if ( ! $eventDAO->hasSpecificAutomaticEvent($userId, $accountId,
            $eventId)
        ) {
            throw new GrnException(E_GRN_MAIL_AUTO_FORWARDING_SETTING_NOT_FOUND);
        }

    }

    /**
     * @throws \grn\grn\GrnException
     */
    public function validateMailAutomationIsAvailable()
    {
        $systemConfig = \GRN_Mail_SystemConfig::getInstance();
        if ( ! $systemConfig->hasPermissionOfAutomaticMailService()) {
            throw new GrnException(E_GRN_MAIL_AUTOMATIC_MAIL_EVENT_CANNOT_USE);
        }
    }
}
