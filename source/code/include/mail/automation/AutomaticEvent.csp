<?php

namespace grn\mail\automation;

use grn\mail\automation\action\AutomaticActionFactory;
use grn\mail\automation\evaluation\MailMatcher;


class AutomaticEvent
{
    private $conditions = [];
    private $actions = [];
    private $actionFactory;
    private $logicType;
    private $eventName;
    private $serviceStatus;
    private $accountId;
    private $accountStatus;
    private $serviceAccount;
    private $eventId;

    /**
     * @param $row
     */
    public function __construct($row)
    {
        $this->eventId = $row["eventId"];
        $this->accountId = $row["accountId"];
        $this->eventName = $row["eventName"];
        $this->logicType = $row["logicType"];
        $this->serviceStatus = $row["serviceStatus"];
        $this->accountStatus = $row["accountStatus"];
        $this->serviceAccount = $row["serviceAccount"];
        $this->actionFactory = new AutomaticActionFactory();
    }

    /**
     * @param array $conditions
     */
    public function setConditions(array $conditions)
    {
        $this->conditions = $conditions;
    }

    /**
     * @param array $actions
     */
    public function setActions(array $actions)
    {
        $this->actions = $actions;
    }

    /**
     * @param \CB_User $user
     * @param array    $mailIds
     *
     * @return array
     */
    public function getMatchedMailIds(\CB_User $user, array $mailIds)
    {
        $mailMatcher = new MailMatcher;
        $matchedMailIds
            = $mailMatcher->getMatchedMailIds(
            $user->getOID(),
            $this->logicType,
            $mailIds,
            $this->conditions);

        return $matchedMailIds;
    }

    /**
     * @param \CB_User $user
     * @param          $account_id
     * @param array    $mailIds
     */
    public function runAction(\CB_User $user, $account_id, array $mailIds)
    {

        foreach ($this->actions as $action) {

            $actionInstance
                = $this->actionFactory->createAction($action["actionName"],
                $action["message"]);
            $actionInstance->execute($user, $account_id, $mailIds);
        }
    }

    /**
     * @return array
     */
    public function toArray()
    {
        $actionArray = [];
        foreach ($this->actions as $action) {
            $actionArray[] = [
                "actionName" => $action["actionName"],
                "message"    => $this->actionFactory->convertMessageToArray($action["actionName"],
                    $action["message"])
            ];
        }

        return [
            "eventId"        => $this->eventId,
            "accountId"      => $this->accountId,
            "eventName"      => $this->eventName,
            "logicType"      => $this->logicType,
            "serviceAccount" => $this->serviceAccount,
            "serviceStatus"  => $this->serviceStatus === "ON" ? true : false,
            "accountStatus"  => (int)$this->accountStatus === 0 ? true : false,
            "actions"        => $actionArray,
            "conditions"     => $this->conditions
        ];
    }

    /**
     * @return array
     */
    public function getConditions()
    {
        return $this->conditions;
    }

}
