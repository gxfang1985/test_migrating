<?php

/**
 * メール送受信記録ロジック
 *
 * @package grn.mail
 * @author  Ikeda, ATSUSHI 2005/03
 * @version 1.0
 */

require_once('mail/utility.csp');
require_once('mail/table.csp');
require_once('grn/application.csp');

//////////////////////////////////////////////////////////////////////////////

/**
 * 送受信記録ロジック
 *
 * @author  IKEDA, Atsushi 2005/03
 * @version 1.0
 * @package grn.mail
 */
class GRN_Mail_AddressHistoryLogic
{
    /**
     * Return singleton.
     *
     * @return GRN_Mail_AddressHistoryLogic
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Mail_AddressHistoryLogic();
        }

        return $_instance;
    }

    function __construct()
    {
        $this->_utility = GRN_Mail_Utility::getInstance();
    }

    //////////////////////////////////////////////////////////////////////////
    // メンバ変数
    /**
     * @access private
     */
    var $_utility = null;

    //////////////////////////////////////////////////////////////////////////
    // private method

    /**
     * E-Mailアドレスからアドレス情報データオブジェクトを取得
     *
     * @access  private
     *
     * @param   string $id データID
     *
     * @return  object  {@link GRN_Mail_AddressInfo}
     */
    function _getAddressInfoRow($id)
    {
        assert('! is_null( $id )');

        $table = $this->_utility->getTableInfo(GRN_MAIL_ADDRESS_INFO_TABLE);
        $db = $table->getDBConnection();
        $id = $db->escape($id);
        $row = $table->getRow($id);
        if ( ! is_object($row) || is_null($row->get('user'))) {
            $___ret = null;

            return $___ret;
        }

        return $row;
    }

    /**
     * E-Mailアドレスからアドレス情報データオブジェクトを取得
     *
     * @access  private
     *
     * @param   object $user  ユーザー
     * @param   string $email E-Mail
     *
     * @return  object  {@link GRN_Mail_AddressInfo}
     */
    function _getAddressInfoRowByEmail($user, $email)
    {
        assert('is_object( $user )');
        assert('! is_null( $email )');

        require_once('fw/string_util.csp');
        $email = cb_trim($email);
        if (strlen($email) == 0) {
            $___ret = null;

            return $___ret;
        }

        $rowset
            = new CB_RowSet($this->_utility->getTableInfo(GRN_MAIL_ADDRESS_INFO_TABLE));
        $rowset->addCondition($rowset->queryf("col_user = '@S'",
            $user->getOID()));
        $rowset->addCondition($rowset->queryf("col_email = '@S'", $email));
        $user_table_info = $this->_utility->getTableInfo('cb_user');
        $on = CB_DATABASE_TABLE_PREFIX
              . GRN_MAIL_ADDRESS_INFO_TABLE . '.col_user = u._id '
              . 'AND u.col_deleted IS NULL';
        $rowset->addJoin($user_table_info, $on, CB_DATABASE_INNER_JOIN, 'u');
        $rowset->limit(0, 1);
        $row = $rowset->iterate();
        $rowset->destroy();

        return $row;
    }

    //////////////////////////////////////////////////////////////////////////

    /**
     * 送受信履歴のソート条件からソートカラム名を返す
     *
     * @param   string $sort    ソート条件。デフォルト:'send_ts'
     *                          timestamp/send_ts/dtime/data/from/from_name/from_email/to/to_name/to_email/size
     *
     * @return  string  ソートカラム名
     */
    function _getAddressHistorySortColumnName($sort)
    {
        if ((strcmp($sort, 'ctime') == 0) || (strcmp($sort, 'send_ts') == 0)) {
            // 送信日時でソート
            $sort_column = 'col_send_ts';
        }
        if ((strcmp($sort, 'rtime') == 0) || (strcmp($sort, 'timestamp') == 0)
            || (strcmp($sort, 'recv_ts') == 0)
        ) {
            // 受信日時でソート
            $sort_column = 'col_timestamp';
        } elseif (strcmp($sort, 'dtime') == 0) {
            // 削除日時でソート
            $sort_column = 'col_dtime';
        } elseif (strcmp($sort, 'subject') == 0) {
            // 標題でソート
            $sort_column = 'col_subject';
        } elseif (strcmp($sort, 'data') == 0) {
            // 内容でソート
            $sort_column = 'col_data';
        } elseif (strcmp($sort, 'from') == 0) {
            // 差出人でソート
            $sort_column = 'col_from';
        } elseif (strcmp($sort, 'from_name') == 0) {
            // 差出人でソート
            $sort_column = 'col_from_name';
        } elseif (strcmp($sort, 'from_email') == 0) {
            // 差出人でソート
            $sort_column = 'col_from_email';
        } elseif (strcmp($sort, 'to') == 0) {
            // 宛先でソート
            $sort_column = 'col_to';
        } elseif (strcmp($sort, 'to_name') == 0) {
            // 宛先でソート
            $sort_column = 'col_to_name';
        } elseif (strcmp($sort, 'to_email') == 0) {
            // 宛先でソート
            $sort_column = 'col_to_email';
        } elseif (strcmp($sort, 'size') == 0) {
            // サイズでソート
            $sort_column = 'col_size';
        } else {
            $sort_column = 'col_send_ts';
        }

        return $sort_column;
    }


    //////////////////////////////////////////////////////////////////////////
    // public method

    /**
     * アドレス情報データを取得
     *
     * @param   string  $id       データID
     * @param   boolean $b_detail 詳細情報取得フラグ
     *
     * @return  mixed   アドレス情報データ or null
     */
    function getAddressInfoData($id, $b_detail)
    {
        assert('! is_null( $id )');

        $row =& $this->_getAddressInfoRow($id);
        if (is_null($row)) {
            return null;
        }

        return $row->getDataProperties($b_detail);
    }

    /**
     * E-Mailアドレスからアドレス情報データを取得
     *
     * @param   object  $user     ユーザー
     * @param   string  $email    E-Mail
     * @param   boolean $b_detail 詳細情報取得フラグ
     *
     * @return  mixed   アドレス情報データ or null
     */
    function getAddressInfoDataByEmail(& $user, $email, $b_detail)
    {
        assert('is_object( $user )');
        assert('! is_null( $email )');

        require_once('fw/string_util.csp');
        $email = GRN_Mail_Utility::static_addEmailBracket(cb_trim($email),
            'remove');
        if (strlen($email) == 0) {
            return null;
        }

        $address_info =& $this->_getAddressInfoRowByEmail($user, $email);
        if (is_null($address_info)) {
            return null;
        }

        return $address_info->getDataProperties($b_detail);
    }

    //////////////////////////////////////////////////////////////////////////

    // getAddressInfoDataByEmailFromMessage/getAddressHistoryDataList
    // のいずれかを実行していればこの変数にメールアドレスと、statusをキーにして、発見した該当メールメッセージの
    // _idのリストが乗る
    // 現状の送受信履歴の実装では必ずこれらがセットで呼ばれるので無駄な処理を省くため
    // $_history_message_id_list_cache[$address_string][$status_id]
    var $_history_message_id_list_cache = [];

    // _getHistoryMessageIdListを呼ぶとキャッシュされる
    var $_address_info_cache = null;

    /**
     * 送受信履歴データ一覧を取得
     * tab_grn_mail_messageテーブルから動的に生成
     *
     * @param   object  $user           ユーザーオブジェクト
     * @param   string  $address_string 取得対象のEmailアドレス
     * @param   string  $sort           ソートキー（'timestamp'/'send_ts'/'dtime'/'data'/'from'/'to'/'size'）。デフォルト:'send_ts'
     * @param   boolean $reverse        ソート順。デフォルト:TRUE
     * @param   int     $offset         表示位置。デフォルト:0
     * @param   int     $limit          表示件数。デフォルト:20
     * @param   string  $status_id      状態ID。nullで指定なし。デフォルト:null
     *
     * @return  mixed   送受信履歴データ or null
     */
    function getAddressHistoryDataList(
        & $user,
        $address_string,
        $sort = 'send_ts',
        $reverse = true,
        $offset = 0,
        $limit = 20,
        $status_id = null
    ) {
        assert('is_object( $user )');

        $user_id = $user->getOID();

        $app_locator = GRN_ApplicationLocator::instance();
        $db =& $app_locator->getConnection('mail');

        //----------------------------------------------------------------
        // 対象となるすべてのアドレスから該当のメールアドレスが含まれる
        // メールの_idを探す
        // これらが履歴となる該当メールメッセージのレコード
        //----------------------------------------------------------------

        $found_id_list = null;
        if (array_key_exists($address_string,
            $this->_history_message_id_list_cache)
        ) {
            $status_key = is_null($status_id) ? GRN_MAIL_STATUS_CODE_ALL
                : $status_id;
            if (array_key_exists($status_key,
                $this->_history_message_id_list_cache[$address_string])
            ) {
                $found_id_list
                    = $this->_history_message_id_list_cache[$address_string][$status_key];
            }
        }

        if (is_null($found_id_list)) {
            $found_id_list = $this->_getHistoryMessageIdList($user_id,
                $address_string, $status_id, $sort, $reverse, $offset, $limit);
        }

        if (count($found_id_list) <= 0) {
            return [];
        }

        //----------------------------------------------------------------
        // 発見した_idのリストを使って実際のデータを取得する。
        // わざわざクエリを分けているのは該当するメールメッセージを探す処理を
        // できる限り少ないリソースで行いたかったから
        //----------------------------------------------------------------

        $columns = [
            'm._id AS mid',
            'm.col_subject AS col_subject',
            'm.col_size AS col_size',
            'm.col_sent AS col_sent',
            'm.col_attached AS col_attached',
            'm.col_send_ts AS col_send_ts',
            'm.col_read_ts AS col_read_ts',
            'm.col_timestamp AS col_timestamp',
            'm.col_confirmation_request AS col_confirmation_request',
            'm.col_confirmation_response AS col_confirmation_response',
            'm.col_confirmation_status AS col_confirmation_status',
            'm.col_folder AS col_folder',
            'm.col_action AS col_action',
            'a._id AS aid',
            's._id AS sid, s.col_name AS sname',
            's.col_code AS scode',
            's.col_color AS scolor',
            's.col_type AS stype',
        ];

        $query = 'SELECT ' .
                 implode(', ', $columns) .
                 ' FROM ' . grn_mail_get_personal_tablename($user_id,
                'tab_grn_mail_message') . ' AS m ' .
                 'LEFT JOIN tab_grn_mail_folder AS f ON m.col_folder = f._id ' .
                 'LEFT JOIN tab_grn_mail_account AS a ON f.col_account = a._id '
                 .
                 'LEFT JOIN tab_grn_mail_status AS s ON m.col_status = s._id ' .
                 'WHERE ' . sprintf("m._id IN ( %s )",
                implode(',', $found_id_list));


        $sort_column = $this->_getAddressHistorySortColumnName($sort);
        $order_by = [
            ['m.' . $sort_column, $reverse],
            ['mid', $reverse]
        ];

        $query .= ' ORDER BY ';
        $toPutComma = false;
        foreach ($order_by as $ob) {
            if ($toPutComma) {
                $query .= ', ';
            } else {
                $toPutComma = true;
            }

            $query .= $ob[0];
            if ($ob[1]) {
                $query .= ' DESC';
            }
        }

        $query = $db->select_format($query, 0, $limit, CB_DATABASE_NO_LOCK);
        $result = $db->query($query);

        $data_list = [];
        $ts = new CB_TimeStamp;
        while ($row = $db->fetch_assoc($result)) {
            $data = [
                'mail_id'               => $row['mid'],
                'subject'               => $row['col_subject'],
                'sent'                  => $row['col_sent'],
                'size'                  => $row['col_size'],
                'attached'              => $row['col_attached'],
                'confirmation_request'  => $row['col_confirmation_request'],
                'confirmation_response' => $row['col_confirmation_response'],
                'confirmation_status'   => $row['col_confirmation_status'],
                'account_id'            => $row['aid'],
                'folder_id'             => $row['col_folder'],
                'action'                => $row['col_action'],
            ];

            $ts->unix_ts = $row['col_send_ts'];
            $data['send_ts'] = clone $ts;
            $ts->unix_ts = $row['col_read_ts'];
            $data['read_ts'] = clone $ts;
            $ts->unix_ts = $row['col_timestamp'];
            $data['timestamp'] = clone $ts;

            // status
            if (strcmp($row['stype'], GRN_MAIL_STATUS_TYPE_SYSTEM) === 0) {
                if (strcmp($row['sid'], GRN_MAIL_STATUS_CODE_DEFAULT) === 0) {
                    $status_name = '';
                } else {
                    $status_name = cb_msg(GRN_MAIL_MODULE_ID, $row['scode']);
                }
            } else {
                $status_name = $row['sname'];
            }
            $data['status_name'] = $status_name;
            $data['status_color'] = $row['scolor'];

            $data_list[] = $data;
        }

        return $data_list;
    }


    /**
     * メールメッセージからAddressInfoの情報を取り出す
     *
     * @param        $user           ユーザーオブジェクト
     * @param        $address_string Emailアドレス
     * @param        $status_id
     * @param string $sort
     * @param bool   $reverse
     * @param int    $offset
     * @param int    $limit
     * @param bool   $display_escape
     *
     * @return mixed
     */
    function getAddressInfoDataByEmailFromMessage(
        & $user,
        $address_string,
        $status_id,
        $sort = 'send_ts',
        $reverse = true,
        $offset = 0,
        $limit = 20,
        $display_escape = false
    ) {
        // address_info_cacheがキャッシュされるためそこから取得する
        // history_message_id_list_cacheをキャッシュさせパフォーマンスを向上するために
        // 関数を流用している
        $this->_getHistoryMessageIdList($user->getOID(), $address_string,
            $status_id, $sort, $reverse, $offset, $limit, $display_escape);
        $address_info_data
            = $this->_address_info_cache[$address_string][strval($display_escape)];

        return $address_info_data;
    }

    /**
     * @param        $user_id
     * @param        $address_string
     * @param        $status_id
     * @param string $sort
     * @param bool   $reverse
     * @param int    $offset
     * @param int    $limit
     *
     * @return string
     */
    private function createMessageHistoryListQuery(
        $user_id,
        $address_string,
        $status_id,
        $sort = 'send_ts',
        $reverse = true,
        $offset = 0,
        $limit = 20
    ) {
        $app_locator = GRN_ApplicationLocator::instance();
        $db = $app_locator->getConnection('mail');

        $conditions = [];
        $conditions[] = sprintf("m.col_user = '%s'", $db->escape($user_id));

        $conditions[] = "m.col_draft IS NULL";
        // まったく関係ないアドレスとのやり取りはとりあえず排除する
        $condition = '(';
        $condition .= '(';
        $condition .= cb_queryf($db, "m.col_sent = 1");
        $condition .= ' AND (';
        $condition .= cb_queryf($db, "m.col_to LIKE '%@S%'",
            $address_string);
        $condition .= cb_queryf($db, " OR m.col_cc LIKE '%@S%'",
            $address_string);
        $condition .= cb_queryf($db, " OR m.col_bcc LIKE '%@S%'",
            $address_string);
        $condition .= ')';
        $condition .= ') OR (';
        $condition .= cb_queryf($db,
            "m.col_sent = 0 AND m.col_from LIKE '%@S%'", $address_string);
        $condition .= ')';
        $condition .= ')';
        $conditions[] = $condition;


        $columns = [
            'm._id AS _id',
            'm.col_to AS col_to',
            'm.col_cc AS col_cc',
            'm.col_bcc AS col_bcc',
            'm.col_from AS col_from',
            'm.col_sent AS col_sent',
            'm.col_status AS col_status',
        ];

        $query = 'SELECT '
                 . implode(', ', $columns)
                 . ' FROM '
                 . grn_mail_get_personal_tablename($user_id,
                'tab_grn_mail_message') . ' AS m '
                 . ' WHERE ' . implode(' AND ', $conditions);

        if ( ! is_null($status_id)
             && strcmp($status_id, GRN_MAIL_STATUS_CODE_ALL) != 0
        ) {
            $query .= " AND col_status = '" . $db->escape($status_id) . "'";
        }

        $sort_column = $this->_getAddressHistorySortColumnName($sort);
        $order_by = [
            ['m.' . $sort_column, $reverse],
            ['_id', $reverse]
        ];

        $query .= ' ORDER BY ';
        $toPutComma = false;
        foreach ($order_by as $ob) {
            if ($toPutComma) {
                $query .= ', ';
            } else {
                $toPutComma = true;
            }

            $query .= $ob[0];
            if ($ob[1]) {
                $query .= ' DESC';
            }
        }

        $query = $db->select_format($query, $offset, $limit,
            CB_DATABASE_NO_LOCK);

        return $query;
    }

    /**
     * 指定したEmailアドレスの履歴対象となるメールメッセージの_idのリストを返す
     * $_address_info_cacheにEmailアドレス情報をキャッシュする
     *
     * @private
     *
     * @param        $user_id
     * @param        $address_string
     * @param null   $status_id
     * @param string $sort
     * @param bool   $reverse
     * @param int    $offset
     * @param int    $limit
     * @param bool   $display_escape
     *
     * @return array
     */
    function _getHistoryMessageIdList(
        $user_id,
        $address_string,
        $status_id = null,
        $sort = 'send_ts',
        $reverse = true,
        $offset = 0,
        $limit = 20,
        $display_escape = false
    ) {
        $found_row_count = 0;
        $found_id_list = [];
        $address_info_data = null;

        $app_locator = GRN_ApplicationLocator::instance();
        $db =& $app_locator->getConnection('mail');

        $rows = [];
        if (isset($this->_address_info_cache[$address_string]['rawdata'])) {
            $rows = $this->_address_info_cache[$address_string]['rawdata'];
        } else {
            $query = $this->createMessageHistoryListQuery($user_id,
                $address_string, $status_id, $sort, $reverse, $offset,
                $limit + 1);
            $result = $db->query($query);

            while ($row = $db->fetch_assoc($result)) {
                $rows[] = $row;
            }

            $db->free_result($result);

            // cache
            $this->_address_info_cache[$address_string]
                = ['hasNextPage' => false];
            if (count($rows) > $limit) {
                $this->_address_info_cache[$address_string]['hasNextPage']
                    = true;
                array_pop($rows);
            }
            $this->_address_info_cache[$address_string]['rawdata'] = $rows;
        }

        foreach ($rows as $row) {
            $b_found = false;
            if ($row['col_sent']) {
                // TO
                $to_array
                    = GRN_Mail_Utility::static_formatAddressString($row['col_to'],
                    true,
                    false,
                    true,
                    false,
                    'array',
                    $display_escape);
                foreach ($to_array as $key => $value) {
                    $address_info_email
                        = GRN_Mail_Utility::static_addEmailBracket($value['email'],
                        'remove');
                    if (strcasecmp($address_info_email, $address_string) == 0) {
                        $b_found = true;
                        $address_info_name = $value['name'];
                        break;
                    }
                }

                // CC
                if ( ! $b_found) {
                    $cc_array
                        = GRN_Mail_Utility::static_formatAddressString($row['col_cc'],
                        true,
                        false,
                        true,
                        false,
                        'array',
                        $display_escape);
                    foreach ($cc_array as $key => $value) {
                        $address_info_email
                            = GRN_Mail_Utility::static_addEmailBracket($value['email'],
                            'remove');
                        if (strcasecmp($address_info_email, $address_string)
                            == 0
                        ) {
                            $b_found = true;
                            $address_info_name = $value['name'];
                            break;
                        }
                    }
                }

                // BCC
                if ( ! $b_found) {
                    $bcc_array
                        = GRN_Mail_Utility::static_formatAddressString($row['col_bcc'],
                        true,
                        false,
                        true,
                        false,
                        'array',
                        $display_escape);
                    foreach ($bcc_array as $key => $value) {
                        $address_info_email
                            = GRN_Mail_Utility::static_addEmailBracket($value['email'],
                            'remove');
                        if (strcasecmp($address_info_email, $address_string)
                            == 0
                        ) {
                            $b_found = true;
                            $address_info_name = $value['name'];
                            break;
                        }
                    }
                }
            } else {
                $from_array
                    = GRN_Mail_Utility::static_formatAddressString($row['col_from'],
                    true,
                    false,
                    true,
                    false,
                    'array',
                    $display_escape);

                foreach ($from_array as $key => $value) {
                    $address_info_email
                        = GRN_Mail_Utility::static_addEmailBracket($value['email'],
                        'remove');
                    if (strcasecmp($address_info_email, $address_string) == 0) {
                        $b_found = true;
                        $address_info_name = $value['name'];
                        break;
                    }
                }
            }

            if ($b_found) {
                // ステータスコードでフィルタリング
                if ( ! is_null($status_id)
                     && strcmp($status_id, GRN_MAIL_STATUS_CODE_ALL) != 0
                ) {
                    if (strcmp($status_id, $row['col_status']) == 0) {
                        $found_id_list[] = "'" . $db->escape($row['_id']) . "'";
                    }
                } else {
                    $found_id_list[] = "'" . $db->escape($row['_id']) . "'";
                }

                if (is_null($address_info_data)) {
                    $address_info_data = [];
                    $address_info_data['name'] = $address_info_name;
                    $address_info_data['email'] = $address_info_email;
                }
            }
        }


        // キャッシュする
        if ( ! array_key_exists($address_string,
            $this->_history_message_id_list_cache)
        ) {
            $this->_history_message_id_list_cache[$address_string] = [];
        }
        $status_key = is_null($status_id) ? GRN_MAIL_STATUS_CODE_ALL
            : $status_id;
        $this->_history_message_id_list_cache[$address_string][$status_key]
            = $found_id_list;

        // AddressInfoもキャッシュする
        $this->_address_info_cache[$address_string][strval($display_escape)]
            = $address_info_data;

        return $found_id_list;
    }

    /**
     *
     * Have the next data in the search result?
     *
     * @access public
     *
     * @param string $address_string
     *
     * @return bool
     */
    public function hasNextPage(string $address_string): bool
    {
        if (isset($this->_address_info_cache[$address_string]['rawdata'])) {
            return $this->_address_info_cache[$address_string]['hasNextPage'];
        }

        return false;
    }
}
