<?php

namespace grn\mail\screen;

use grn\grn\Validate;
use grn\grn\GrnException;
use grn\grn\GrnGenericScreenBase;

require_once('mail/resources.csp');
require_once('mail/error_code.csp');
require_once('fw/i18n.csp');

class MailScreenBase extends GrnGenericScreenBase
{
    const ARG_ACCOUNT_ID = 'aid';
    const ARG_CATEGORY_ID = 'cid';
    const ARG_STATUS_ID = 'sid';
    const ARG_RECEIVE = 'receive';
    const ARG_MAIL_ID = 'mid';
    const ARG_SORT = 'sort';
    const ARG_SORT_TIME = 'sort_time';
    const ARG_REVERSE = 'reverse';
    const ARG_MULTIMAIL_ID = 'ids';

    const PAGE_INDEX = 'mail/index';
    const PAGE_ROOT = 'mail/root';
    const PAGE_INBOX = 'mail/inbox';
    const PAGE_OUTBOX = 'mail/outbox';
    const PAGE_DRAFTBOX = 'mail/draftbox';
    const PAGE_GARBAGEBOX = 'mail/garbagebox';
    const PAGE_CATEGORY_LIST = 'mail/category_list';

    const IS_OPEN_STATUS = 'is_open_status';

    const MORE_VIEW_COUNT = 100;

    const SESSION_KEY_INDEX_3PANE = 'grn.mail.index_3pane';

    private $_mail_app;
    private $_utility;

    private $_aid;
    private $_cid;
    private $_sid;
    private $_mid;
    private $_sort;
    private $_sort_time;
    private $_reverse;

    private $_status_infos;
    private $_can_send_account_count = 0;
    private $_can_recv_account_count = 0;

    protected function getSort()
    {
        return $this->_sort;
    }

    protected function setSortTime($value)
    {
        $this->_sort_time = $value;
    }

    protected function getSortTime()
    {
        return $this->_sort_time;
    }

    protected function setReverse($value)
    {
        $this->_reverse = $value;
    }

    protected function getReverse()
    {
        return $this->_reverse;
    }

    protected function setAccountId($value)
    {
        $this->_aid = $value;
    }

    protected function setCategoryId($value)
    {
        $this->_cid = $value;
    }

    /**
     * @return \GRN_ApplicationBase|mixed
     * @throws \grn\grn\GrnException
     */
    public function getMailApp()
    {
        if (is_null($this->_mail_app)) {
            require_once('grn/application.csp');
            $locator = \GRN_ApplicationLocator::instance();

            if ( ! ($this->_mail_app = $locator->getInstance('mail'))) {
                throw new GrnException(E_GRN_MAIL_NOT_AVAILABLE);
            }
        }

        return $this->_mail_app;
    }

    /**
     * @return \GRN_Mail_Utility
     */
    public function getUtility()
    {
        if (is_null($this->_utility)) {
            require_once('mail/utility.csp');
            $this->_utility = \GRN_Mail_Utility::getInstance();
        }

        return $this->_utility;
    }

    /**
     * @return \GRN_Mail_PersonalConfig
     */
    public function getPersonalConfig()
    {
        $login_user = $this->getLoginUser();
        $utility = $this->getUtility();

        return $utility->getPersonalConfig($login_user);
    }

    /**
     * @return \GRN_Mail_SystemConfig
     */
    public function getSystemConfig()
    {
        $utility = $this->getUtility();

        return $utility->getSystemConfig();
    }

    /**
     * @return \GRN_Mail_FolderLogic
     */
    public function getFolderLogic()
    {
        $utility = $this->getUtility();

        return $utility->getFolderLogic();
    }

    /**
     * @return \GRN_Mail_MailLogic
     */
    public function getMailLogic()
    {
        $utility = $this->getUtility();

        return $utility->getMailLogic();
    }

    public function getReceiveLogic()
    {
        $utility = $this->getUtility();

        return $utility->getRecvLogic();
    }

    /**
     * @return \GRN_Mail_SendLogic
     */
    public function getSendLogic()
    {
        $utility = $this->getUtility();

        return $utility->getSendLogic();
    }

    public function getAccountId()
    {
        if (is_null($this->_aid)) {
            $input = $this->getInput();
            if ( ! Validate::isNumber(@$input[self::ARG_ACCOUNT_ID])) {
                $personal_config = $this->getPersonalConfig();
                $this->_aid = $personal_config->getDefaultAccountId(false,
                    true, true);
            } else {
                $this->_aid = $input[self::ARG_ACCOUNT_ID];
            }
        }

        return $this->_aid;
    }

    /**
     * Get category id, if $G_INPUT['cid'] is valid, $account_id will be reset.
     *
     * @param string $account_id
     */
    public function getCategoryId(& $account_id)
    {
        if (is_null($this->_cid)) {
            $input = $this->getInput();
            if ( ! Validate::isNumber(@$input[self::ARG_CATEGORY_ID])) {
                if ($account_id) {
                    $folder_logic = $this->getFolderLogic();
                    $this->_cid
                        = $folder_logic->translateFolderId($account_id,
                        GRN_MAIL_FOLDER_CODE_INBOX);
                }
            } else {
                $this->_cid = $input[self::ARG_CATEGORY_ID];

                $folder_logic = $this->getFolderLogic();
                $folder_data = $folder_logic->getFolderData($this->_cid,
                    false);
                if ($folder_data['user_id'] != $this->getLoginUser()
                                                    ->getOID()
                ) {
                    throw new GrnException(E_GRN_MAIL_FOLDER_DATA_NOT_FOUND);
                }
                $account_id = $folder_data['account_id'];
            }
        }

        return $this->_cid;
    }

    public function getMailId()
    {
        if (is_null($this->_mid)) {
            $input = $this->getInput();
            if ( ! Validate::isNumber(@$input[self::ARG_MAIL_ID])) {
                throw new GrnException(E_GRN_MAIL_MAIL_DATA_NOT_FOUND);
            } else {
                $this->_mid = $input[self::ARG_MAIL_ID];
            }
        }

        return $this->_mid;
    }

    public function getStatusId()
    {
        if (is_null($this->_sid)) {
            $input = $this->getInput();
            if ( ! Validate::isNumber(@$input[self::ARG_STATUS_ID])) {
                $this->_sid = GRN_MAIL_STATUS_CODE_ALL;
            } else {
                $this->_sid = $input[self::ARG_STATUS_ID];
            }
        }

        return $this->_sid;
    }

    /**
     * return string when $input has a hash value filter
     *
     * @return string
     */
    public function getFilter()
    {
        $input = $this->getInput();

        return isset($input["filter"]) ? $input["filter"] : "";
    }

    protected function getFolderData($account_id, & $category_id)
    {
        $folder_logic = $this->getFolderLogic();

        // 指定されたフォルダ
        $folder_data = $folder_logic->getFolderData($category_id, true, true);

        if ( ! is_array($folder_data)
             || ! array_key_exists('account_id', $folder_data)
             || is_null($folder_data['account_id'])
             || (isset($account_id) && ! is_null($account_id)
                 && ($folder_data['account_id'] != $account_id))
        ) {
            // フォルダがない、またはアカウントが異なる
            throw new GrnException(E_GRN_MAIL_FOLDER_DATA_NOT_FOUND);
        }

        // 指定されたフォルダがルートだったら受信箱に変更する
        if ($folder_data['code'] == GRN_MAIL_FOLDER_CODE_ROOT) {
            // 受信箱
            $folder_data = $folder_logic->getSpecialFolderData($account_id,
                GRN_MAIL_FOLDER_CODE_INBOX, true);
            $category_id = $folder_data['id'];
        }

        return $folder_data;
    }

    protected function getCategoryForView(
        $folder_data,
        $account_id,
        $category_id
    ) {
        $folder_code = $this->getArrayValue('code', $folder_data);

        switch ($folder_code) {
            case GRN_MAIL_FOLDER_CODE_ROOT:
                $folder_type = '0';
                $page_folder = grn_get_page_display_name(self::PAGE_ROOT);
                break;
            case GRN_MAIL_FOLDER_CODE_INBOX:
                $folder_type = '1';
                $page_folder = grn_get_page_display_name(self::PAGE_INDEX);
                break;
            case GRN_MAIL_FOLDER_CODE_SENTBOX:
                $folder_type = '2';
                $page_folder = grn_get_page_display_name(self::PAGE_OUTBOX);
                break;
            case GRN_MAIL_FOLDER_CODE_UNSENT:
                $folder_type = '3';
                $page_folder = grn_get_page_display_name(self::PAGE_DRAFTBOX);
                break;
            case GRN_MAIL_FOLDER_CODE_TRASH:
                $folder_type = '4';
                $page_folder = grn_get_page_display_name(self::PAGE_GARBAGEBOX);
                break;
            default:
                $folder_type = '5';
                $page_folder
                    = grn_get_page_display_name(self::PAGE_CATEGORY_LIST);
                break;
        }

        $category_for_view = [];
        $category_for_view['type'] = $folder_type;
        $category_for_view['title'] = $page_folder;
        $category_for_view['aid'] = $account_id;
        $category_for_view['cid'] = $category_id;
        $category_for_view['parent_id'] = $folder_data['parent_id'];
        $category_for_view['subscribed'] = $folder_data['subscribed'];
        $category_for_view['memo'] = $folder_data['memo'];

        return $category_for_view;
    }

    protected function getAccountList()
    {
        $personal_config = $this->getPersonalConfig();

        return $personal_config->getAccountDataList(false, false, -1, -1, false,
            false);
    }

    protected function getAccountListForView(
        $account_list,
        $check_for_send = false,
        $check_for_recv = false
    ) {
        $personal_config = $this->getPersonalConfig();
        $account_list_for_view = [];
        if (is_array($account_list)) {
            foreach ($account_list as $key => $account) {
                $temp_no_account = $temp_no_server = true;

                // 送信可能なアカウントかチェック
                $can_send = $personal_config->checkAccountForSend($key,
                    $temp_no_account, $temp_no_server);
                if ($can_send) {
                    $this->_can_send_account_count++;
                }

                // 受信可能なアカウントかチェック
                $can_recv = $personal_config->checkAccountForReceive($key,
                    $temp_no_account, $temp_no_server);
                if ($can_recv) {
                    $this->_can_recv_account_count++;
                }

                if ($check_for_send) {
                    $check_result = $can_send;
                } elseif ($check_for_recv) {
                    $check_result = $can_recv;
                } else {
                    $check_result = true;
                }

                if ($check_result) {
                    $temp_title = $account['title'];
                    if ($account['deleted']) {
                        $temp_title .= cb_msg('grn.mail', 'delete_accout');
                    } elseif ($account['disabled']) {
                        $temp_title .= cb_msg('grn.mail', 'inactive_accout');
                    }
                    $account_list_for_view[$key] = [
                        'aid'            => $key,
                        'title'          => $temp_title,
                        'cannot_send'    => ! $can_send,
                        'cannot_recv'    => ! $can_recv,
                        'new_mail_count' => intval($account['new_mails'])
                    ];
                }
            }
        }

        return $account_list_for_view;
    }

    protected function getCanSendAccountCount()
    {
        return $this->_can_send_account_count;
    }

    protected function getCanRecvAccountCount()
    {
        return $this->_can_recv_account_count;
    }

    protected function getAccountInfo($account_id)
    {
        $personal_config = $this->getPersonalConfig();

        // アカウントデータ取得
        $account_data = $personal_config->getAccountData($account_id, true,
            false);

        if (is_array($account_data)) {
            if ( ! array_key_exists('user_id', $account_data)
                 || ($account_data['user_id'] != $this->getLoginUser()
                                                      ->getOID())
            ) {
                throw new GrnException(E_GRN_MAIL_ACCOUNT_DATA_NOT_FOUND);
            }

            return $account_data['account_info'];
        }

        return false;
    }

    private function prepareStatusInfo()
    {
        if (is_null($this->_status_infos)) {
            require_once('mail/status.csp');
            $logged_in_user = $this->getLoginUser();
            $status_list = grn_mail_get_status_list($logged_in_user);
            $status_infos_for_view = [];
            foreach ($status_list as $status_oid => $status) {
                $status_info = [];
                $status_info['value'] = $status_oid;
                $status_info['label'] = $status['name'];
                $status_info['color'] = $status['color'];
                switch ($status_oid) {
                    case 1 :
                        $status_info['class'] = "mail-statusNormal-grn";
                        break;
                    case 2 :
                        $status_info['class'] = "mail-statusUnCheck-grn";
                        break;
                    case 3 :
                        $status_info['class'] = "mail-statusNeedSend-grn";
                        break;
                    case 4 :
                        $status_info['class'] = "mail-statusCheck-grn";
                        break;
                    case 5 :
                        $status_info['class'] = "mail-statusHold-grn";
                        break;
                    case 6 :
                        $status_info['class'] = "mail-statusWaitSend-grn";
                        break;
                }
                $status_infos_for_view[$status_oid] = $status_info;
            }
            $this->_status_infos = $status_infos_for_view;
        }

        return $this->_status_infos;
    }

    public function getStatusInfos()
    {
        return $this->prepareStatusInfo();
    }

    public function getChangeStatusInfos()
    {
        return $this->prepareStatusInfo();
    }

    public function getFolderTree($account_id, $category_id)
    {
        $login_user = $this->getLoginUser();
        $mail_logic = $this->getMailLogic();
        $account_of_user = $mail_logic->getAccountOfUser($login_user);
        if (count($account_of_user)) {
            require_once('grn/org_tree.csp');
            require_once('mail/folder_tree.csp');

            $util = \GRN_OrgTreeUtil::getInstance();
            $tree_session_key = 'mail/index/' . $account_id;
            $tree = $util->getTree($tree_session_key,
                'GRN_Mail_FolderTree', ['account_id' => $account_id]);

            $tree->checkAndInitialize();
            $selected_node = $tree->getSelectedNodeToSelect($category_id);

            $unread_mail_info = $mail_logic->getUnreadMailNum($login_user);
            foreach (array_keys($unread_mail_info) as $index) {
                $unread_mail_info[$index] = (int)$unread_mail_info[$index];
            }

            // expand the folders which contain unread mails
            foreach ($unread_mail_info as $unread_folder => $unread_count) {
                if ($unread_count == 0) {
                    continue;
                }
                if ( ! $tree->containNode($unread_folder)) {
                    $tree->expandToAndDisplay($unread_folder);
                }
            }

            // Open path to nodes whose unread mail numbers change
            foreach ($tree->_nodes as $nodeId => $node_info) {
                if ( ! isset($tree->_nodes[$nodeId]['unread'])) {
                    $tree->_nodes[$nodeId]['unread'] = 0;
                }

                $latest_unread_num = array_key_exists($nodeId,
                    $unread_mail_info) ? $unread_mail_info[$nodeId] : 0;
                if ($latest_unread_num > $tree->_nodes[$nodeId]['unread']) {
                    $tree->showPathToNode($nodeId);
                }
                $tree->_nodes[$nodeId]['unread'] = $latest_unread_num;
            }

            // get trash
            $personal_config = $this->getPersonalConfig();
            $folder_logic = $this->getFolderLogic();
            $trash_enable = $personal_config->useTrash();
            $trash_detail = $folder_logic->getSpecialFolderData($account_id,
                GRN_MAIL_FOLDER_CODE_TRASH);
            $trash_id = $trash_detail['id'];

            $tree_for_view = [
                'page_name'       => $tree_session_key,
                'root'            => $tree->getRoot(),
                'async_url'       => 'mail/folder_json',
                'link_url'        => 'mail/index',
                'selected_oid'    => $selected_node,
                'unread_num'      => $unread_mail_info,
                'oid_key'         => 'cid',
                'trash_id'        => $trash_id,
                'trash_enable'    => $trash_enable,
                'no_root'         => true,
                'link_url_params' => ['aid' => $account_id],
            ];

            $tree->setSelectedNode($selected_node);
            $util->setTree($tree_session_key, $tree);

            return $tree_for_view;
        }

        return false;
    }

    protected function setSortParameters()
    {
        $input = $this->getInput();
        // ソート設定をプロファイルからロード
        $sort = null;
        $sort_time = null;
        $reverse = null;
        $personal_config = $this->getPersonalConfig();
        $result = $personal_config->getSortCondition($sort, $sort_time,
            $reverse);
        assert('$result');

        // ソートキーまたはソート順が指定されている場合はプロファイルに保存
        if (array_key_exists(self::ARG_SORT, $input)
            || array_key_exists(self::ARG_REVERSE, $input)
        ) {
            if (array_key_exists(self::ARG_SORT, $input)
                && $input[self::ARG_SORT]
            ) {
                $sort = $input[self::ARG_SORT];
                $sort = preg_replace('/\'+/', '"', $sort);
            }
            if (array_key_exists(self::ARG_SORT_TIME, $input)
                && $input[self::ARG_SORT_TIME]
            ) {
                $sort_time = $input[self::ARG_SORT_TIME];
            }
            if (array_key_exists(self::ARG_REVERSE, $input)
                && (($input[self::ARG_REVERSE] == 1)
                    || ($input[self::ARG_REVERSE] == 0))
            ) {
                $reverse = $input[self::ARG_REVERSE];
            }
            // ソート設定を保存
            $result = $personal_config->setSortCondition($sort, $sort_time,
                $reverse);
            assert('$result');
        }
        $this->_sort = $sort;
        $this->_sort_time = $sort_time;
        $this->_reverse = $reverse;
    }

    /**
     * Get session object by session_key
     *
     * @param string $session_key
     *
     * @return \CB_Session
     */
    protected function getSession($session_key = null)
    {
        require_once('fw/session_manager.csp');
        $session_manager = \CB_SessionManager::getInstance();
        if ($session_key) {
            $session = $session_manager->getSession($session_key);
        } else {
            $session
                = $session_manager->getSession(self::SESSION_KEY_INDEX_3PANE);
        }

        return $session;
    }

    protected function checkMailSizeOver(& $user_limit, & $mail_size)
    {
        $login_user = $this->getLoginUser();
        $login_user_id = $login_user->getOID();
        $system_config = $this->getSystemConfig();
        $personal_config = $this->getPersonalConfig();

        // 総メールサイズ上限を取得
        $system_config->getSizeUserLimitSetting($size_settings, $login_user_id);
        // ユーザーの総メールサイズを取得
        $mail_size = $personal_config->getMailSize(null);
        // 総サイズチェック
        $user_limit = $size_settings['user_limit_' . $login_user_id];
        $size_over = false;
        if (($user_limit >= 0) && ($mail_size >= $user_limit * 1024 * 1024)) {
            $size_over = true;
        }

        return $size_over;
    }

    protected function checkSendAndReceive(
        $smarty,
        $size_over,
        & $cannot_send,
        & $cannot_recv,
        & $no_account_for_send,
        & $no_account_for_recv,
        & $no_server_for_send,
        & $no_server_for_recv
    ) {
        $account_id = $this->getAccountId();
        $personal_config = $this->getPersonalConfig();
        // アカウントチェック
        $cannot_send = true;
        $cannot_recv = true;
        $no_account_for_send = $no_server_for_send = false;
        $no_account_for_recv = $no_server_for_recv = false;
        if ( ! is_null($account_id) && ! $size_over) {
            $cannot_send = ! $personal_config->checkAccountForSend($account_id,
                $no_account_for_send, $no_server_for_send);
            $cannot_recv
                = ! $personal_config->checkAccountForReceive($account_id,
                $no_account_for_recv, $no_server_for_recv);
        }
        $smarty->assign('cannot_recv_all_account',
            $size_over || ($this->getCanRecvAccountCount() <= 1));
        $smarty->assign('cannot_send', $cannot_send);
        $smarty->assign('cannot_recv', $cannot_recv);
    }

    public function getNumOfUnreadMails()
    {
        $logged_in = $this->getLoginUser();

        return $this->getMailLogic()->getUnreadMailNum($logged_in);
    }

    /**
     * @param \GRN_Smarty $smarty
     */
    public function checkExternalNotification($smarty)
    {
        $input = $this->getInput();
        // 外部通知あり
        if ( ! isset($input['_reload']) || (intval($input['_reload']) != 1)) {
            if (isset($input['ncnt'])) {
                $notify_count = $input['ncnt'];
                $smarty->assign('notify_count', $notify_count);
            }
        }
    }

    /**
     * @param array    $mail_for_view
     * @param array    $mail_data
     * @param string[] $inline_file_ids
     */
    protected function fetchAttachFileInfo(
        & $mail_for_view,
        $mail_data,
        array $inline_file_ids
    ) {
        $file_exists = false;

        if (array_key_exists('files', $mail_data)) {
            $mail_for_view['inline_files'] = [];
            $mail_for_view['attach_files'] = [];

            foreach ($mail_data['files'] as $key => $file) {
                if (in_array($file['fid'], $inline_file_ids)) {
                    $mail_for_view['inline_files'][$key] = $file;
                } else {
                    $mail_for_view['attach_files'][$key] = $file;
                }
            }

            if (strcmp($mail_for_view['sent'], '1') === 0) {
                $mail_for_view['receive'] = false;

                // 送信メールの場合は添付ファイルの実体が存在するかチェック
                foreach ($mail_data['files'] as $file) {
                    if (array_key_exists('exists', $file) && $file['exists']) {
                        $file_exists = true;
                        break;
                    }
                }
            } else {
                $mail_for_view['receive'] = true;
            }
        }

        $mail_for_view['has_files'] = ! empty($mail_data['files']) ? 1 : 0;

        // 1: 添付ファイルもファイルデータも存在する
        // 2: 添付ファイルはあるが実体もしくはメールソースが削除されている
        if (strcmp($mail_for_view['sent'], '1') === 0) // 送信メール
        {
            $mail_for_view['attach_file_type'] = $file_exists ? 1 : 2;
        } else                                              // 受信メール
        {
            $mail_for_view['attach_file_type'] = $mail_data['source_flag'] ? 1
                : 2;
        }
    }
}
