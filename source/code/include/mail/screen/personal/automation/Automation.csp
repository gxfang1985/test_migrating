<?php

namespace grn\mail\screen\personal\automation;

use grn\mail\automation\AutomaticEventFacade;
use grn\mail\automation\AutomaticEventFilterOption;

class Automation
{

    private $personalConfig;
    private $eventForView;
    private $accountId;
    private $accountList;

    public function __construct($accountId)
    {
        $logged_in_user = cb_get_login_user();
        $this->personalConfig = \GRN_Mail_Utility::getInstance()
                                                 ->getPersonalConfig($logged_in_user);
        $this->facade = new AutomaticEventFacade();
        $this->setAccount($accountId);
        $this->createAutomaticEventList();
        $this->pageTitle = cb_msg("grn.mail.personal", "automation");
    }

    public function getPageTitle()
    {
        return $this->pageTitle;
    }

    public function getSitePosition()
    {
        return [['page' => '', 'name' => $this->pageTitle]];
    }

    public function getAccountList()
    {
        $accountForView = [];
        foreach ($this->accountList as $accountId => $account) {
            $accountForView[$accountId] = [
                'value' => $accountId,
                'label' => $account['title']
            ];
            if ($accountId == $this->accountId) {
                $accountForView[$accountId]['selected'] = true;
            }
        }

        return $accountForView;
    }

    public function getAccount()
    {
        return $this->accountList[$this->accountId];
    }

    private function setAccount($accountId)
    {
        if ((int)$accountId === -1 || ! $accountId) {
            $this->accountId = $this->personalConfig->getDefaultAccountId(false,
                true);
        } else {
            $this->accountId = $accountId;
        }

        // get available and stopped account
        $this->accountList = $this->personalConfig->getAccountDataList(false);


        //  validation
        if ( ! isset($this->accountList[$this->accountId])) {
            cb_throw_error(E_GRN_MAIL_ACCOUNT_EMAIL_NOT_FOUND);
        }


    }

    private function createAutomaticEventList()
    {

        $filterOption = new AutomaticEventFilterOption();
        $filterOption->toGetAlsoOutOfServiceAction();
        $filterOption->toGetAlsoStoppedAccount();

        $events = $this->facade->getEventByAccountId($this->accountId,
            $filterOption);
        $eventForView = [];
        foreach ($events as $eventId => $event) {
            $eventForView[$eventId] = $event->toArray();
        }
        $this->eventForView = $eventForView;
    }

    public function getAutomaticEventList()
    {
        return $this->eventForView;

    }

    public function getAccountId()
    {
        return $this->accountId;
    }

}
