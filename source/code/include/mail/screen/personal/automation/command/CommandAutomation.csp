<?php

namespace grn\mail\screen\personal\automation\command;

use grn\grn\GrnException;

class CommandAutomation
{
    const DISABLE_EVENT = "disable.event";
    const ENABLE_EVENT = "enable.event";
    const DELETE_EVENT = "delete.event";
    const ADD_EVENT = "add.event";
    const MODIFY_EVENT = "modify.event";

    private $actionEnums
        = [
            self::DISABLE_EVENT,
            self::ENABLE_EVENT,
            self::DELETE_EVENT,
            self::ADD_EVENT,
            self::MODIFY_EVENT
        ];

    private $inputData;

    /**
     * @param $input
     *
     * @throws \grn\grn\GrnException
     */
    public function validate($input)
    {

        if ( ! isset($input["json"])) {
            throw new GrnException(E_COMMON_MISSING_MANDATORY);
        }

        $this->inputData = json_decode($input["json"], true);

        if ( ! $this->inputData) {
            throw new GrnException(E_COMMON_INVALID_JSON);
        }

        if ( ! isset($this->inputData["action"])
             || ! in_array($this->inputData["action"], $this->actionEnums)
        ) {
            throw new GrnException(E_COMMON_MISSING_MANDATORY);
        }

        if ( ! isset($this->inputData["accountId"])
             && is_numeric($this->inputData["accountId"])
        ) {
            throw new GrnException(E_COMMON_MISSING_MANDATORY);
        }

        if ( ! isset($this->inputData["eventId"])
             && is_numeric($this->inputData["eventId"])
        ) {
            throw new GrnException(E_COMMON_MISSING_MANDATORY);
        }
    }

    /**
     * @throws \grn\grn\GrnException
     * @return CommandAutomationResponse
     */
    public function getCommandAutomationResponse()
    {
        $action = $this->inputData["action"];


        if ($action === self::DISABLE_EVENT
            || $action === self::ENABLE_EVENT
        ) {
            return new CommandSwitchServiceStatus($action, $this->inputData);
        }

        if ($action === self::ADD_EVENT
            || $action === self::MODIFY_EVENT
        ) {
            return new CommandRegister($action, $this->inputData);
        }
        if ($action === self::DELETE_EVENT) {
            return new CommandDelete($this->inputData);
        }
        throw new GrnException();
    }
}
