<?php

namespace grn\mail\screen\mobile;

use grn\grn\JSONResponse;

class MailSendConfirm extends MobileMailScreenBase
{
    private $_temp_mail_data;

    protected function setTempMailData($temp_mail_id)
    {
        $mail_logic = $this->getMailLogic();
        $this->_temp_mail_data
            = $mail_logic->getTemporaryMailData($temp_mail_id, true);
    }

    public function getTempMailData()
    {
        return $this->_temp_mail_data;
    }

    public function fetch()
    {
        require_once("grn/smarty.csp");
        $smarty = new \GRN_Smarty();

        $user = $this->getLoginUser();

        $personal_config = $this->getPersonalConfig();
        $system_config = $this->getSystemConfig();

        //check the mail size
        $this->checkMailSize();

        // 送信前確認を行う
        $personal_config->getGeneralSetting($personal_general_settings);
        $b_preview = $personal_general_settings['preview'];

        $input = $this->getInput();
        $account_id = cb_at($input, self::ARG_B_ACCOUNT_ID);
        $category_id = cb_at($input, self::ARG_B_CATEGORY_ID);
        $temp_mail_id = cb_at($input, self::ARG_B_MAIL_ID);
        $draft_id = cb_at($input, self::ARG_DRAFT_ID);
        $mail_id = cb_at($input, self::ARG_MAIL_ID);
        $action = cb_at($input, self::ARG_ACTION);
        $this->setTempMailData($temp_mail_id);

        //インライン表示設定
        $inline = $this->getInlineSetting($user);

        //開封確認設定
        $send_set = $system_config->canUserUseConfirm()
                    && $personal_config->useConfirmMail();

        // メール情報
        $mail_for_view = $this->getMailDataForView($send_set, $user);

        //set data
        $smarty->assign('mail', $mail_for_view);
        $smarty->assign(self::ARG_SIGN_POSITION,
            cb_at($input, self::ARG_SIGN_POSITION));
        $smarty->assign('send_set', $send_set);
        $smarty->assign('inline', $inline);

        $smarty->assign(self::ARG_B_ACCOUNT_ID, $account_id);
        $smarty->assign(self::ARG_B_CATEGORY_ID, $category_id);
        $smarty->assign(self::ARG_MAIL_ID, $mail_id);
        $smarty->assign(self::ARG_DRAFT_ID, $draft_id);
        $smarty->assign(self::ARG_FROM_INDEX,
            cb_at($input, self::ARG_FROM_INDEX));
        $smarty->assign(self::ARG_ACTION, $action);
        $smarty->assign('preview', $b_preview);

        //assign breadcrumb.
        $this->setTheBreadcrumb($smarty, $account_id, $category_id);

        return $smarty->fetch(cb_get_pagename() . '.tpl');
    }

    public function post($input)
    {
        $this->setInput($input);
        $command = $input[self::ARG_COMMAND];

        $user = $this->getLoginUser();

        //check the mail size
        $this->checkMailSize();

        // validate after a POST
        require_once('mail/include_send.csp');

        $json = JSONResponse::create();
        if ($command == 'send') {
            $this->commandSendMail($json, $user);
        } elseif ($command == 'modify') {
            $this->commandModifyMail($json);
        }
    }

    public function checkMailSize()
    {
        $size_over = $this->checkMailSizeOver($user_limit, $mail_size);
        if ($size_over) {
            cb_throw_error(E_GRN_MAIL_LIMIT, null,
                ['limit' => $user_limit . 'MB']);
        }
    }

    public function getInlineSetting($user)
    {
        require_once('grn/ui.csp');
        $uim = \GRN_UIConfigManager::getInstance();
        $user_ui_config = $uim->getUserConfig($user);
        unset($uim);

        //インライン表示設定
        $inline = $user_ui_config->getInlineSetting();

        return $inline;
    }

    public function getMailDataForView($send_set, $user)
    {
        $input = $this->getInput();

        $temp_mail_data = $this->getTempMailData();
        $temp_account_id = $temp_mail_data['temp_account_id'];

        $personal_config = $this->getPersonalConfig();
        $account_data = $personal_config->getAccountData($temp_account_id,
            false, true);
        $account_info = $account_data['account_info'];
        $from_name = $account_info->getFrom($user);
        $utility = $this->getUtility();
        $from_name = $utility->static_addNameQuotation($from_name, 'add');
        if (strlen($from_name) > 0) {
            $from_name .= ' ';
        }

        $from_name .= $utility->static_addEmailBracket($account_info->email,
            'add');

        $mail_for_view = [
            'aid'             => $temp_account_id,
            'mid'             => $input[self::ARG_B_MAIL_ID],
            'from'            => $from_name,
            'ctime'           => $temp_mail_data['send_ts'],
            'to'              => $temp_mail_data['to'],
            'cc'              => $temp_mail_data['cc'],
            'bcc'             => $temp_mail_data['bcc'],
            'subject'         => $temp_mail_data['subject'],
            'html_data'       => strlen($temp_mail_data['html_data']) > 0,
            'sent'            => $temp_mail_data['sent'],
            'source_id'       => $temp_mail_data['source_id'],
            'no_source'       => ! $temp_mail_data['source_flag'],
            'open'            => 3,
            'status'          => 1,
            'give_open_check' => $temp_mail_data['confirmation_request']
                                 && $send_set, // 開封確認メールの要求する/しない
        ];

        $mail_data_for_view = $this->packingMailDataForView($mail_for_view);

        return $mail_data_for_view;
    }

    public function packingMailDataForView($mail_for_view)
    {
        require_once('grn/word_util.csp');
        $fold_words = new \GRN_FoldWords;
        $fold_words->setLineWidth(GRN_MAIL_LINE_WIDTH);
        $fold_words->setExtendNum(0);
        $fold_words->setShortenNum(0);
        $data_plain_text = "";

        $temp_mail_data = $this->getTempMailData();
        if ($mail_for_view['html_data']) {
            $data = $temp_mail_data['html_data'];
            $data_plain_text = $fold_words->fold($temp_mail_data['data']);
        } else {
            $data = $temp_mail_data['data'];
        }

        if ( ! is_string($data)) {
            $data = '';
        }

        $utility = $this->getUtility();
        $mail_logic = $this->getMailLogic();
        $input = $this->getInput();

        $sign_data = $temp_mail_data['sign_data'];
        $sign_data = $fold_words->fold($sign_data);
        $action = cb_at($input, self::ARG_ACTION, '');
        $mail_id = cb_at($input, self::ARG_MAIL_ID);
        $sign_position = cb_at($input, self::ARG_SIGN_POSITION);

        if (strtolower($sign_position) == "top" && 0 < strlen($action)
            && $action != "reuse"
        ) {
            if (is_string($sign_data) && 0 < strlen($sign_data)) {
                if (strlen($data) > 0) {
                    if ($mail_for_view['html_data']) {
                        $ret = [];
                        \GRN_Mail_Utility::insertSignData($data, $sign_data, [
                            'action'          => $action,
                            'position'        => $sign_position,
                            'data_plain_text' => $data_plain_text,
                            'original_mid'    => $mail_id
                        ], $ret, $utility);
                        $data = $ret['data'];
                        $data_plain_text = $ret['data_plain_text'];
                    } else {
                        $mail_data = $mail_logic->getMailData($mail_id, true);

                        //reply, reply all
                        $original_data = "";
                        if ($action == "reply" || $action == "reply-all") {
                            $original_data
                                = \GRN_Mail_Utility::makeReplyInfo($mail_data,
                                false);
                        }

                        //forwad
                        if ($action == "forward") {
                            $original_data
                                = \GRN_Mail_Utility::makeForwardInfo($mail_data,
                                false);
                        }

                        $data = preg_replace("'(?:\r\n|\r|\n)'s", "\r\n",
                            $data);
                        $temp_datas = explode(trim($original_data), $data);
                        if (count($temp_datas) > 1) {
                            $temp_datas[0] = preg_replace("'(\r\n)$'s", "",
                                    $temp_datas[0])
                                             . "\r\n"
                                             . preg_replace("'^\r\n|\r\n$'s",
                                    "", $sign_data)
                                             . "\r\n";
                            $data = implode(trim($original_data),
                                $temp_datas);
                        } else {
                            $data = preg_replace("'(\r\n)$'s", "", $data)
                                    . "\r\n"
                                    . preg_replace("'^\r\n|\r\n$'s", "",
                                    $sign_data);
                        }
                        $data = $fold_words->fold($data);
                    }
                } else {
                    if ($mail_for_view["html_data"]) {
                        $sign_data = htmlspecialchars($sign_data);
                    }
                    $data .= $sign_data;
                }
            }
        } else {
            if ($mail_for_view['html_data']) {
                $sign_data = preg_replace("'(?:\r\n|\r|\n)'s",
                    "<br /></div><div>", htmlspecialchars($sign_data));
                $sign_data = "<div>" . $sign_data . "</div>";
            } elseif (strlen($data) > 0) {
                $sign_data = "\r\n" . $sign_data;
            }
            $data .= $sign_data;
        }
        $mail_for_view['data'] = $data;
        $mail_for_view['data_plain_text'] = $data_plain_text;

        // 添付ファイル
        if (array_key_exists('files', $temp_mail_data)) {
            $mail_for_view['attach_files'] = $temp_mail_data['files'];
        }

        $mail_for_view['attach_file_type'] = $temp_mail_data['source_flag'] ? 1
            : 2;

        return $mail_for_view;
    }

    public function commandSendMail($json, $user)
    {
        $input = $this->getInput();
        $account_id = cb_at($input, self::ARG_B_ACCOUNT_ID);
        $category_id = cb_at($input, self::ARG_B_CATEGORY_ID);
        $tmpid = cb_at($input, self::ARG_B_MAIL_ID);

        $utility = $this->getUtility();
        $send_logic = $utility->getSendLogic();
        $mail_logic = $this->getMailLogic();

        //メールの送信
        if (array_key_exists('data_plain_text', $input)
            && strlen($input['data_plain_text']) > 0
        ) {
            $data = [];
            $data['data'] = $input['data'];
            $data['data_plain_text']
                = grn_strip_tags(grn_wash_script_without_style_attribute($input['data_plain_text']));
        } else {
            $data = $input['data'];
        }
        $position = cb_at($input, self::ARG_SIGN_POSITION);

        $personal_config = $this->getPersonalConfig();
        $personal_config->getGeneralSetting($general_settings);
        $mail_id = $send_logic->sendPreviewMail($user, $tmpid,
            $general_settings['save_sentfile'], null, $position, $data);

        if ( ! is_null($mail_id)) {
            // 一時メールデータを削除
            $mail_logic->deleteTemporaryMailData($tmpid);
        }

        //delete a draft mail
        if (array_key_exists(self::ARG_DRAFT_ID, $input)
            && strlen($input[self::ARG_DRAFT_ID]) > 0
        ) {
            $mail_ids = [$input[self::ARG_DRAFT_ID]];
            $mail_logic->deleteMailDatas($mail_ids, true);
        }

        if (array_key_exists(self::ARG_FROM_INDEX, $input)
            && $input[self::ARG_FROM_INDEX] == 1
        ) {
            $redirect_page = self::PAGE_MAIL_INDEX;
        } else {
            $redirect_page = self::PAGE_MAIL_LIST;
        }

        $json->response([
            'redirect' => cb_get_full_url($redirect_page,
                [
                    self::ARG_ACCOUNT_ID  => $account_id,
                    self::ARG_CATEGORY_ID => $category_id
                ])
        ]);
    }

    public function commandModifyMail($json)
    {
        $input = $this->getInput();
        $account_id = cb_at($input, self::ARG_B_ACCOUNT_ID);
        $category_id = cb_at($input, self::ARG_B_CATEGORY_ID);
        $tmpid = cb_at($input, self::ARG_B_MAIL_ID);
        $origin_mid = cb_at($input, self::ARG_MAIL_ID);
        $draft_id = cb_at($input, self::ARG_DRAFT_ID);
        $from_index = cb_at($input, self::ARG_FROM_INDEX);
        $action = cb_at($input, self::ARG_ACTION);

        $redirect_page = self::PAGE_MAIL_PREVIEW_MODIFY;
        if (array_key_exists(self::ARG_SIGN_POSITION, $input)
            && strlen($input[self::ARG_SIGN_POSITION]) > 0
        ) {
            $sign_position = $input[self::ARG_SIGN_POSITION];

            $json->response([
                'redirect' => cb_format_url($redirect_page, [
                    self::ARG_B_ACCOUNT_ID  => $account_id,
                    self::ARG_B_CATEGORY_ID => $category_id,
                    self::ARG_MAIL_ID       => $origin_mid,
                    self::ARG_SIGN_POSITION => $sign_position,
                    self::ARG_B_MAIL_ID     => $tmpid,
                    self::ARG_DRAFT_ID      => $draft_id,
                    self::ARG_FROM_INDEX    => $from_index,
                    self::ARG_ACTION        => $action
                ])
            ]);

        } else {
            $json->response([
                'redirect' => cb_format_url($redirect_page, [
                    self::ARG_B_ACCOUNT_ID  => $account_id,
                    self::ARG_B_CATEGORY_ID => $category_id,
                    self::ARG_MAIL_ID       => $origin_mid,
                    self::ARG_B_MAIL_ID     => $tmpid,
                    self::ARG_DRAFT_ID      => $draft_id,
                    self::ARG_FROM_INDEX    => $from_index,
                    self::ARG_ACTION        => $action
                ])
            ]);
        }
    }

    public function setTheBreadcrumb($smarty, $account_id, $category_id)
    {
        $input = $this->getInput();

        if (array_key_exists(self::ARG_FROM_INDEX, $input)
            && $input[self::ARG_FROM_INDEX] == 1
        ) {
            $redirect_page = self::PAGE_MAIL_INDEX;
            $upper_page_name = $this->getMailApp()->getName();
        } else {
            $redirect_page = self::PAGE_MAIL_LIST;
            $folder_data = $this->getFolderData($account_id, $category_id);
            $upper_page_name = $this->getCategoryName($folder_data);
        }

        $this->assignBreadcrumbUpperPage($smarty,
            $upper_page_name,
            $redirect_page,
            [
                self::ARG_ACCOUNT_ID  => $account_id,
                self::ARG_CATEGORY_ID => $category_id
            ]);

        $current_page_title = $this->getTitle();
        $this->assignBreadcrumbCurrentPage($smarty, $current_page_title);
    }

    public function getTitle()
    {
        return grn_get_page_display_name('mail/preview',
            ['app_name' => $this->getMailApp()->getName()]);
    }
}
