<?php

namespace grn\mail\screen\mobile;

use grn\grn\Validate;
use grn\grn\GrnException;

require_once('mail/resources.csp');

class MailDelete extends MobileMailScreenBase
{
    private $_delted_mid;

    public function __construct($input)
    {
        parent::__construct($input);
    }

    public function fetch()
    {
        $input = $this->getInput();
        $user = $this->getLoginUser();
        if ( ! is_object($user)) {
            require_once('fw/error_code.csp');
            cb_throw_error(E_COMMON_AUTHENTICATION_FAILED);
        }
        $this->checkArgsFromInput($input);
        $mail_data = $this->getMailLogic()
                          ->getMailData($input[parent::ARG_MAIL_ID]);
        require_once("grn/smarty.csp");
        $t = new \GRN_Smarty;
        $current_page = $this->getTitle();
        $upper_page = cb_msg('grn.mail.mobile', 'detail');
        $sp = 0;
        if (array_key_exists('sp', $input)) {
            $sp = $input['sp'];
        }
        $t->assign('sp', $sp);
        $this->assignBreadcrumbCurrentPage($t, $current_page);
        $this->assignBreadcrumbUpperPage($t, $upper_page, 'mail/mobile/view',
            $params = ['mid' => $input[parent::ARG_MAIL_ID], 'sp' => $sp]);
        $aid = $mail_data['account_id'];
        $cid = $mail_data['folder_id'];
        $folder_data = $this->getFolderData($aid, $cid);
        $category_for_view = $this->getCategoryForView($folder_data, $aid,
            $cid);
        $this->getPersonalConfig()->getTrashSetting($use_trash, $save_days);
        $t->assign('category', $category_for_view);
        $t->assign('aid', $aid);
        $t->assign('cid', $cid);
        $t->assign('mid', $input[parent::ARG_MAIL_ID]);
        $t->assign('use_garbagebox', $use_trash);
        $t->assign('subject', $mail_data['subject']);

        return $t->fetch('mail/mobile/delete.tpl');
    }

    public function post($input)
    {
        $input = $this->getInput();
        $this->checkArgsFromInput($input);
        $this->prependCheck($input);
        $mail_logic = $this->getUtility()->getMailLogic();
        $mail_logic->deleteMailDatas($this->_delted_mid);
    }

    private function checkArgsFromInput($input)
    {
        if (array_key_exists(parent::ARG_MULTIMAIL_ID, $input)
            && count($input[parent::ARG_MULTIMAIL_ID]) > 0
        ) {
            foreach ($input[parent::ARG_MULTIMAIL_ID] as $mail_id) {
                if ( ! Validate::isNumber($mail_id)) {
                    throw new GrnException(E_GRN_MAIL_WRONG_PARAMETER);
                }
            }
            $this->_delted_mid = $input[parent::ARG_MULTIMAIL_ID];
        } elseif (array_key_exists(parent::ARG_MAIL_ID, $input)
                  && strlen($input[parent::ARG_MAIL_ID]) > 0
        ) {
            if ( ! Validate::isNumber($input[parent::ARG_MAIL_ID])) {
                throw new GrnException(E_GRN_MAIL_WRONG_PARAMETER);
            }
            $this->_delted_mid = [$input[parent::ARG_MAIL_ID]];
        } else {
            throw new GrnException(E_GRN_MAIL_WRONG_PARAMETER);
        }
    }

    private function prependCheck($input)
    {
        if (array_key_exists(self::ARG_MULTIMAIL_ID, $input)
            && count($input[self::ARG_MULTIMAIL_ID]) > 0
        ) {
            $mail = $this->getUtility()->getMailLogic();
            foreach ($input[self::ARG_MULTIMAIL_ID] as $mid) {
                $mail_data = $mail->getMailData($mid, false);
                if (is_null($mail_data)) {
                    cb_throw_error(E_GRN_MAIL_MAIL_DATA_NOT_FOUND);
                }

                if ( ! array_key_exists('user_id', $mail_data)
                     || $mail_data['user_id'] != $this->getLoginUserId()
                ) {
                    cb_throw_error(E_GRN_MAIL_MAIL_ACCESS_DENIED);
                }
            }
        }
    }

    public function getTitle()
    {
        return cb_msg('grn.mail.mobile', 'delete');
    }
}
