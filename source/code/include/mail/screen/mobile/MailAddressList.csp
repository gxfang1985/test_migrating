<?php

namespace grn\mail\screen\mobile;

use grn\grn\Validate;

class MailAddressList extends MobileMailScreenBase
{
    const FROM = 1;
    const TO = 2;
    const CC = 3;
    const BCC = 4;

    private $_keyWord;

    public function __construct($input)
    {
        parent::__construct($input);

        $key_word = cb_at($input, 'key_word');
        if ( ! Validate::isNumber($key_word)) {
            $key_word = '';
        } elseif ( ! in_array($key_word,
            [self::FROM, self::TO, self::CC, self::BCC])
        ) {
            $key_word = '';
        }
        $this->setKeyWord($key_word);

        $this->setMobileFooterBar();
    }

    protected function setKeyWord($value)
    {
        $this->_keyWord = $value;
    }

    public function getKeyWord()
    {
        return $this->_keyWord;
    }

    public function fetch()
    {
        require_once("grn/smarty.csp");
        $smarty = new \GRN_Smarty();

        $this->assignData($smarty);

        return $smarty->fetch('mail/mobile/address_list.tpl');
    }

    public function ajax_fetch()
    {
        require_once("grn/smarty.csp");
        $smarty = new \GRN_Smarty();

        $this->assignData($smarty);

        return $smarty->fetch('mail/mobile/_address_item.tpl');
    }

    public function assignData($smarty)
    {
        $input = $this->getInput();
        $mail_id = $this->getMailId();

        $offset = $this->getArrayValue(self::ARG_NAVI_TAG, $input);
        if ( ! Validate::isNumber($offset)) {
            $offset = 0;
        }

        $this->setBreadcrumb($smarty);

        $smarty->assign('address_list', $this->getMailAddressList($offset));
        $smarty->assign('offset', $this->getNewOffset());
        $smarty->assign('more_view_args',
            ['mid' => $mail_id, 'key_word' => $this->getKeyWord()]);
    }

    public function getMailAddressList($offset)
    {
        $mail_id = $this->getMailId();
        $key_word = $this->getKeyWord();

        $mail_logic = $this->getMailLogic();
        $mail_data = $mail_logic->getMailData($mail_id, true, false, false);

        switch ($key_word) {
            case self::FROM:
                $addresses = $mail_data['from'];
                break;
            case self::TO:
                $addresses = $mail_data['to'];
                break;
            case self::CC:
                $addresses = $mail_data['cc'];
                break;
            case self::BCC:
                $addresses = $mail_data['bcc'];
                break;
            default:
                $addresses = '';
        }

        $all_address_list = [];
        if (strlen($addresses) > 0) {
            if (array_keys([self::TO, self::CC, self::BCC], $key_word)) {
                require_once('fw/mail_message.csp');
                $all_address_list
                    = \CB_MailAddress::static_parse_list($addresses, null, true,
                    false);
                foreach ($all_address_list as $key => $address_value) {
                    if ( ! is_object($address_value)) {
                        continue;
                    }
                    $all_address_list[$key] = $address_value->raw_address;
                }
            } else {
                $all_address_list = [$addresses];
            }
        }

        $display_address_list = [];
        if ($offset == 0 && count($all_address_list) <= self::MORE_VIEW_COUNT) {
            $display_address_list = $all_address_list;
        } else {
            if (count($all_address_list) <= $offset + self::MORE_VIEW_COUNT) {
                for ($i = 0; $i < count($all_address_list); $i++) {
                    $display_address_list[] = $all_address_list[$i];
                }
            } else {
                for ($i = 0; $i < $offset + self::MORE_VIEW_COUNT; $i++) {
                    $display_address_list[] = $all_address_list[$i];
                }
            }
        }
        $this->setNewOffset($offset, self::MORE_VIEW_COUNT,
            count($all_address_list));

        return $display_address_list;
    }

    public function setBreadcrumb($smarty)
    {
        $input = $this->getInput();
        $sp = 0;
        if (array_key_exists('sp', $input)) {
            $sp = $input['sp'];
        }

        $title = $this->getTitle();
        $this->assignBreadcrumbCurrentPage($smarty, $title);

        $this->assignBreadcrumbUpperPage($smarty,
            cb_msg('grn.mobile', 'detail_title'), 'mail/mobile/view',
            [self::ARG_MAIL_ID => $input['mid'], 'sp' => $sp]);
    }

    public function getTitle()
    {
        $title = '';
        switch ($this->getKeyWord()) {
            case self::FROM:
                $title = cb_msg('grn.mail.mobile', 'from');
                break;
            case self::TO:
                $title = cb_msg('grn.mail.mobile', 'to');
                break;
            case self::CC:
                $title = cb_msg('grn.mail.mobile', 'cc');
                break;
            case self::BCC:
                $title = cb_msg('grn.mail.mobile', 'bcc');
                break;
        }

        return $title;
    }
}
