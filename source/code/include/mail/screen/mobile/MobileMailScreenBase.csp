<?php

namespace grn\mail\screen\mobile;

use grn\mail\screen\MailScreenBase;
use grn\grn\Validate;

require_once('mail/resources.csp');
require_once('mail/error_code.csp');

class MobileMailScreenBase extends MailScreenBase
{
    const MORE_VIEW_COUNT = 20;
    const ARG_NAVI_TAG = 'sp';

    const ARG_USER_ID = 'uid';
    const ARG_DATA_FOLDER_ID = 'folder_id';
    const ARG_DATA_ACCOUNT_ID = 'account_id';
    const ARG_DRAFT_ID = 'draft_id';
    const ARG_SIGN_ID = 'sign_id';
    const ARG_B_ACCOUNT_ID = 'baid';
    const ARG_B_CATEGORY_ID = 'bcid';
    const ARG_B_MAIL_ID = 'tmpid';
    const ARG_SIGN = 'sign';
    const ARG_TO = 'to';
    const ARG_CC = 'cc';
    const ARG_BCC = 'bcc';
    const ARG_RECIPIENT = 'recipient';
    const ARG_SUBJECT = 'subject';
    const ARG_SIGN_VALUE = 'sign_value';
    const ARG_SIGN_DATA = 'sign_data';
    const ARG_SIGN_POSITION = 'sign_position';
    const ARG_POSITION = 'position';
    const ARG_GIVE_OPEN_CHECK = 'give_open_check';
    const ARG_CONFIRMATION_REQUEST = 'confirmation_request';
    const ARG_DATA = 'data';
    const ARG_ATTACHED_FILE = 'attached_file';
    const ARG_UPLOAD_TICKET = 'upload_ticket';
    const ARG_FILE_INPUT = 'file_input';
    const ARG_ACTION = 'action';
    const ARG_COMMAND = 'cmd';
    const ARG_NAME = 'name';
    const ARG_FROM_INDEX = 'from_index';

    const PAGE_MAIL_INDEX = 'mail/mobile/index';
    const PAGE_MAIL_LIST = 'mail/mobile/mail_list';
    const PAGE_MAIL_PREVIEW_MODIFY = 'mail/mobile/preview_modify';
    const PAGE_MAIL_DETAIL = 'mail/mobile/view';
    const PAGE_MAIL_PREVIEW = 'mail/mobile/preview';
    const PAGE_MAIL_SEND = 'mail/send';
    const PAGE_MAIL_FORWARD = 'mail/forward';
    const PAGE_MAIL_RESEND = 'mail/resend';
    const PAGE_MAIL_REPLY_ALL = 'mail/reply_all';
    const PAGE_MAIL_REPLY = 'mail/reply';
    const PAGE_MAIL_DRAFT_MODIFY = 'mail/draft_modify';

    private $_disable_mail;
    private $_no_setting;
    private $_account_data_count;

    protected $_account_deleted;
    protected $_cannot_send;
    protected $_size_over;
    protected $_smarty;

    protected $_uid;
    protected $_b_preview;
    protected $_send_set;
    protected $_incremental_search;
    protected $_from_index;
    protected $_position;
    protected $_sign_list;
    protected $_tmp_key;
    protected $_action;
    protected $_mail = [];
    protected $_user_for_view = [];

    public function __construct($input)
    {
        parent::__construct($input);
        $this->initMobileView();
        $this->setMobileApplicationId(GRN_MAIL_APP_ID);
        $this->mailPrepend();
    }

    public function getFolderTree($account_id, $category_id)
    {
        $login_user = cb_get_login_user();
        $mail_logic = $this->getMailLogic();

        $account_of_user = $mail_logic->getAccountOfUser($login_user);
        if (count($account_of_user)) {
            require_once('grn/org_tree.csp');
            require_once('mail/folder_tree.csp');

            $util = \GRN_OrgTreeUtil::getInstance();
            $page = 'mail/mobile/index/' . $account_id;
            $tree = new \GRN_Mail_FolderTree(['account_id' => $account_id]);
            $tree->setUID($login_user->getOID());
            $util->initTreeByUpdateSystem($page, $tree);

            $tree->checkAndInitialize();

            $selected_node = $tree->getSelectedNodeToSelect($category_id);

            $unread_mail_info = $mail_logic->getUnreadMailNum($login_user);
            foreach (array_keys($unread_mail_info) as $index) {
                $unread_mail_info[$index] = (int)$unread_mail_info[$index];
            }

            // expand the folders which contain unread mails
            foreach ($unread_mail_info as $unread_folder => $unread_count) {
                if ($unread_count == 0) {
                    continue;
                }
                if ( ! $tree->containNode($unread_folder)) {
                    $tree->expandToAndDisplay($unread_folder);
                }
            }

            // Open path to nodes whose unread mail numbers change
            foreach ($tree->_nodes as $nodeId => $node_info) {
                if ( ! isset($tree->_nodes[$nodeId]['unread'])) {
                    $tree->_nodes[$nodeId]['unread'] = 0;
                }

                $latest_unread_num = array_key_exists($nodeId,
                    $unread_mail_info) ? $unread_mail_info[$nodeId] : 0;
                if ($latest_unread_num > $tree->_nodes[$nodeId]['unread']) {
                    $tree->showPathToNode($nodeId);
                }
                $tree->_nodes[$nodeId]['unread'] = $latest_unread_num;

                if (isset($tree->_nodes[$nodeId]['type'])) {
                    $folder_code = $tree->_nodes[$nodeId]['type'];
                } else {
                    $folder_code = null;
                }

                switch ($folder_code) {
                    case GRN_MAIL_FOLDER_CODE_INBOX:
                        $folder_icon_class
                            = "mobile_folderlist_icon_receives_grn";
                        break;
                    case GRN_MAIL_FOLDER_CODE_SENTBOX:
                        $folder_icon_class = "mobile_folderlist_icon_sents_grn";
                        break;
                    case GRN_MAIL_FOLDER_CODE_UNSENT:
                        $folder_icon_class
                            = "mobile_folderlist_icon_drafts_grn";
                        break;
                    case GRN_MAIL_FOLDER_CODE_TRASH:
                        $folder_icon_class
                            = "mobile_folderlist_icon_trashs_grn";
                        break;
                    default:
                        $folder_icon_class = null;
                        break;
                }
                $tree->_nodes[$nodeId]['folder_icon_class']
                    = $folder_icon_class;
            }

            $tree_for_view = [
                'tree_name'       => 'mail_tree',
                'root'            => $tree->getRoot(),
                'async_url'       => 'mail/mobile/ajax/get_sub_folder_list',
                'link_url'        => 'mail/mobile/mail_list',
                'oid_key'         => 'cid',
                'no_root'         => true,
                'link_url_params' => ['aid' => $account_id],
            ];

            $tree->setSelectedNodeNotDisplay($selected_node);

            return $tree_for_view;
        }

        return false;
    }

    protected function getAccountListInfo()
    {
        // Get account list
        $account_list = $this->getAccountList();
        $account_list_view = $this->getAccountListForView($account_list);

        return $account_list_view;
    }

    protected function isMailDisabled()
    {
        if (is_null($this->_disable_mail)) {
            // メールの使用が許可されているか
            $system_config = $this->getSystemConfig();
            $system_config->getGeneralSetting($general_settings);
            $this->_disable_mail = $general_settings['disable_mail'];
        }

        return $this->_disable_mail;
    }

    protected function getAccountDataCount()
    {
        if (is_null($this->_account_data_count)) {
            $personal_config = $this->getPersonalConfig();
            $this->_account_data_count
                = $personal_config->getAccountDataCount();
        }

        return $this->_account_data_count;
    }

    protected function createNotes($smarty, $size_over, $user_limit, $mail_size)
    {
        $input = $this->getInput();
        $recv_logic = $this->getReceiveLogic();
        $account_id = $this->getAccountId();

        $personal_config = $this->getPersonalConfig();
        $account_data = $personal_config->getAccountData($account_id,
            true, false);
        $this->_account_deleted = $account_data['deleted'];

        // サイズエラーで受信できなかったメールが存在する
        $size_error = $recv_logic->getPop3ErrorMailDataCount($account_id);
        $smarty->assign('size_error', $size_error);

        $received = cb_at($input, self::ARG_RECEIVE);
        if (isset($received) && ! is_null($received) && $received) {
            if ( ! $size_over) {
                // 受信できなかったメールが存在する
                $new_mails = is_array($account_data)
                    ? $account_data['new_mails'] : 0;
                if (($new_mails > 0) && ($size_error != $new_mails)) {
                    $smarty->assign('remaining', 1);
                }
            }

            $this->checkExternalNotification($smarty);
        }

        // メールの総サイズオーバー
        if ($size_over) {
            $smarty->assign('size_over', $size_over); // 1:オーバーしている時
        }

        // メールの総サイズ
        $smarty->assign('mailbox_size', $user_limit . 'MB');
        // ユーザーのメール総サイズ
        $smarty->assign('mail_size', $mail_size);

        $smarty->assign('account_deleted', $this->_account_deleted);
    }

    /**
     * @param \GRN_Smarty $smarty             smarty object
     * @param int         $account_data_count account number of login user
     * @param bool        $check_send
     *
     * @return string         $no_setting           type of error setting
     */
    protected function getNoSettingInfo(
        $smarty,
        $account_data_count,
        $check_send = false
    ) {
        if (is_null($this->_no_setting)) {
            $input = $this->getInput();

            if ($account_data_count == 0) {
                $system_config = $this->getSystemConfig();
                // サーバー設定数を取得する
                $server_data_count = $system_config->getServerDataCount();
                if (($account_data_count == 0) && ($server_data_count == 0)) {
                    $no_setting = '3';
                } elseif ($account_data_count == 0) {
                    $no_setting = '2';
                } elseif ($server_data_count == 0) {
                    $no_setting = '1';
                } else {
                    $no_setting = '0';
                }
            } else {
                $this->_size_over = $this->checkMailSizeOver($user_limit,
                    $mail_size);
                $this->checkSendAndReceive($smarty, $this->_size_over,
                    $cannot_send, $cannot_recv, $no_account_for_send,
                    $no_account_for_recv, $no_server_for_send,
                    $no_server_for_recv);
                $this->createNotes($smarty, $this->_size_over, $user_limit,
                    $mail_size);
                $this->_cannot_send = $cannot_send;

                $no_setting = '0';

                //Check receive
                $received = cb_at($input, self::ARG_RECEIVE);

                if (Validate::isNotNull($received)) {
                    if ($received == 1) {
                        // カレントアカウントでの受信
                        if ($cannot_recv) {
                            if ($no_account_for_recv && $no_server_for_recv) {
                                $no_setting = '3';
                            } elseif ($no_account_for_recv) {
                                $no_setting = '2';
                            } elseif ($no_server_for_recv) {
                                $no_setting = '1';
                            } else {
                                $no_setting = '0';
                            }
                        }
                    }
                }

                if ($check_send) {
                    if ($cannot_send) {
                        if ($no_account_for_send && $no_server_for_send) {
                            $no_setting = '3';
                        } elseif ($no_account_for_send) {
                            $no_setting = '2';
                        } elseif ($no_server_for_send) {
                            $no_setting = '1';
                        } else {
                            $no_setting = '0';
                        }
                    }
                }
            }
            $this->_no_setting = $no_setting;
        }

        return $this->_no_setting;
    }

    /**
     * check data and setting
     */
    protected function sendPrepare($input = [])
    {
        if (array_key_exists(self::ARG_USER_ID, $input)) {
            $user_id = $input[self::ARG_USER_ID];
            $user = $this->getUserInfo($user_id);
            $err_msg = E_GRN_USER_NOT_FOUND;
        } else {
            // check login user
            $user = cb_get_login_user();
            $err_msg = E_COMMON_AUTHENTICATION_FAILED;
        }
        if ( ! is_object($user)) {
            cb_throw_error($err_msg);
        }

        // メールの使用が許可されているか
        $disable_mail = $this->isMailDisabled();
        if ($disable_mail) {
            // メール使用停止中
            cb_throw_error(E_GRN_MAIL_CANNOT_USE);
        }

        // 総メールサイズをチェック
        $size_over = $this->checkMailSizeOver($user_limit, $mail_size);
        if ($size_over) {
            cb_throw_error(E_GRN_MAIL_LIMIT, null,
                ['limit' => $user_limit . 'MB']);
        }
    }

    /**
     * get mail address and server no setting flg
     */
    protected function getNoSetting()
    {
        require_once('grn/smarty.csp');
        $smarty = new \GRN_Smarty();
        $personal_config = $this->getPersonalConfig();
        $account_data_count = $personal_config->getAccountDataCount();
        $no_setting = $this->getNoSettingInfo($smarty,
            $account_data_count, true);

        return $no_setting;
    }

    /**
     * 署名情報取得
     */
    protected function getSignatureInfo(
        $sign_id,
        $sign_value,
        $account_id,
        &$signature_selected_data = [],
        $b_sign_display_none = true
    ) {
        $personal_config = $this->getPersonalConfig();
        $utility = $this->getUtility();

        // アカウントの署名設定リストを取得
        $signature_list = $personal_config->getSignatureDataList($account_id,
            true);

        // アカウントごとの署名名称リスト
        $signature_list_for_view = [];

        if (is_array($signature_list) && (count($signature_list) > 0)) {
            // 署名ループ
            foreach ($signature_list as $temp_sign_id => $sign_data) {
                if ($sign_data[self::ARG_POSITION] === null
                    || ($sign_data[self::ARG_POSITION] == "")
                ) {
                    $sign_data[self::ARG_POSITION] = 'bottom';
                }

                $selected = false;
                if ($sign_id == $temp_sign_id) {
                    $selected = true;
                }

                $sign_data['selected'] = $selected;

                if ($sign_data[self::ARG_POSITION] == 'top') {
                    $position_msg = cb_msg('grn.mail.personal',
                        'GRN_MAIL_PE-258');
                } else {
                    $position_msg = cb_msg('grn.mail.personal',
                        'GRN_MAIL_PE-259');
                }

                // 署名データリスト
                if (is_null($signature_selected_data) && $selected) {
                    $signature_selected_data[self::ARG_SIGN_ID] = $temp_sign_id;
                    $signature_selected_data[self::ARG_POSITION]
                        = $sign_data[self::ARG_POSITION];
                    $signature_selected_data[self::ARG_NAME]
                        = $sign_data[self::ARG_NAME];
                    $signature_selected_data['position_msg']
                        = $position_msg;
                    if (isset($sign_value)) {
                        $signature_selected_data[self::ARG_DATA] = $sign_value;
                    } else {
                        $signature_selected_data[self::ARG_DATA]
                            = $sign_data[self::ARG_DATA];
                    }
                }
                $signature_list_for_view[$temp_sign_id] = $sign_data;
                $signature_list_for_view[$temp_sign_id]['sign_id']
                    = $temp_sign_id;
                $signature_list_for_view[$temp_sign_id]['position_msg']
                    = $position_msg;
            }

            // なしを表示
            if (isset($b_sign_display_none) && $b_sign_display_none) {
                $mail_app = $utility->getMailApp();
                $signature_list_for_view['-1']['sign_id'] = '-1';
                $signature_list_for_view['-1'][self::ARG_DATA] = '';
                $signature_list_for_view['-1'][self::ARG_POSITION] = '';
                $signature_list_for_view['-1'][self::ARG_NAME]
                    = cb_msg($mail_app->getModuleId(),
                    'no_signature');
                $signature_list_for_view['-1']['position_msg'] = '';
                $signature_list_for_view['-1']['select'] = false;

                $selected = false;
                if (strcmp($sign_id, '-1') === 0) {
                    $selected = true;
                    $signature_selected_data = [];
                    $signature_selected_data[self::ARG_SIGN_ID] = '-1';
                    $signature_selected_data[self::ARG_POSITION] = '';
                    $signature_selected_data[self::ARG_NAME]
                        = cb_msg($mail_app->getModuleId(),
                        'no_signature');
                    if (isset($sign_value)) {
                        $signature_selected_data[self::ARG_DATA] = $sign_value;
                    } else {
                        $signature_selected_data[self::ARG_DATA] = '';
                    }
                }
                $signature_list_for_view['-1']['selected'] = $selected;
            }
        }

        if (is_null($signature_selected_data)) {
            if (is_array($signature_list) && count($signature_list) > 0) {
                $signature_list_slice = array_slice($signature_list, 0, 1);
                $first_signature
                    = array_shift($signature_list_slice);
                $signature_list_keys
                    = array_keys($signature_list);
                $signature_selected_data[self::ARG_SIGN_ID]
                    = current($signature_list_keys);
                $signature_selected_data[self::ARG_POSITION]
                    = $first_signature[self::ARG_POSITION];
                $signature_selected_data[self::ARG_DATA]
                    = $first_signature[self::ARG_DATA];
                $signature_selected_data[self::ARG_NAME]
                    = $first_signature[self::ARG_NAME];
                if ($first_signature[self::ARG_POSITION] == 'top') {
                    $position_msg = cb_msg('grn.mail.personal',
                        'GRN_MAIL_PE-258');
                } else {
                    $position_msg = cb_msg('grn.mail.personal',
                        'GRN_MAIL_PE-259');
                }
                $signature_selected_data['position_msg'] = $position_msg;
                $signature_list_for_view[$signature_selected_data[self::ARG_SIGN_ID]]['selected']
                    = true;
            }
        }

        return $signature_list_for_view;
    }

    /**
     * Check argument of $G_INPUT
     *
     * @param  array $paraArr ( aid, cid, uid, mid )
     * @param  array $input
     *
     * @throws
     */
    protected function checkArgFromInput(array $paraArr, array &$input)
    {
        foreach ($paraArr as $para) {
            switch ($para) {
                case self::ARG_ACCOUNT_ID:
                    if ( ! Validate::isNumber(@$input[self::ARG_ACCOUNT_ID])) {
                        cb_throw_error(E_GRN_MAIL_WRONG_PARAMETER);
                    }
                    break;
                case self::ARG_B_ACCOUNT_ID:
                    if ( ! Validate::isNumber(@$input[self::ARG_B_ACCOUNT_ID])) {
                        cb_throw_error(E_GRN_MAIL_WRONG_PARAMETER);
                    }
                    break;
                case self::ARG_CATEGORY_ID:
                    if ( ! Validate::isNumber(@$input[self::ARG_CATEGORY_ID])) {
                        cb_throw_error(E_GRN_MAIL_WRONG_PARAMETER);
                    }
                    break;
                case self::ARG_B_CATEGORY_ID:
                    if ( ! Validate::isNumber(@$input[self::ARG_B_CATEGORY_ID])) {
                        cb_throw_error(E_GRN_MAIL_WRONG_PARAMETER);
                    }
                    break;
                case self::ARG_MAIL_ID:
                    if ( ! Validate::isNumber(@$input[self::ARG_MAIL_ID])) {
                        cb_throw_error(E_GRN_MAIL_WRONG_PARAMETER);
                    }
                    break;
                case self::ARG_B_MAIL_ID:
                    if ( ! Validate::isNumber(@$input[self::ARG_B_MAIL_ID])) {
                        cb_throw_error(E_GRN_MAIL_WRONG_PARAMETER);
                    }
                    break;
                case self::ARG_USER_ID:
                    if ( ! Validate::isNumber(@$input[self::ARG_USER_ID])) {
                        $input[self::ARG_USER_ID] = $this->getLoginUserId();
                    }
                    break;
            }
        }

        return;
    }

    /**
     * @param $folder_data
     *
     * @return string
     */
    protected function getCategoryName($folder_data)
    {
        $folder_code = cb_at($folder_data, 'code');
        $folder_name = cb_at($folder_data, 'name');

        switch ($folder_code) {
            case GRN_MAIL_FOLDER_CODE_ROOT:
                $category_name = grn_get_page_display_name(self::PAGE_ROOT);
                break;
            case GRN_MAIL_FOLDER_CODE_INBOX:
                $category_name = grn_get_page_display_name(self::PAGE_INBOX);
                break;
            case GRN_MAIL_FOLDER_CODE_SENTBOX:
                $category_name = grn_get_page_display_name(self::PAGE_OUTBOX);
                break;
            case GRN_MAIL_FOLDER_CODE_UNSENT:
                $category_name = grn_get_page_display_name(self::PAGE_DRAFTBOX);
                break;
            case GRN_MAIL_FOLDER_CODE_TRASH:
                $category_name
                    = grn_get_page_display_name(self::PAGE_GARBAGEBOX);
                break;
            default:
                $category_name = $folder_name;
                break;
        }

        return $category_name;
    }

    /**
     * @param \GRN_Smarty $smarty
     * @param int         $no_setting
     */
    protected function assignCommonArgumentsForCreate($smarty, $no_setting)
    {
        if ($no_setting == 0) {
            $smarty->assign('preview', $this->_b_preview);
            $smarty->assign('send_set',
                $this->_send_set); //開封確認メール使用許可設定 on:1 off:0
            $smarty->assign('mail', $this->_mail);
            // user_data
            $smarty->assign('user', $this->_user_for_view);
            $smarty->assign('incremental_search', $this->_incremental_search);
            $smarty->assign('user_sign', $this->_sign_list);
            $smarty->assign('position', $this->_position);
        }

        // 0はOK、1はメールサーバーがまだ 2はアカウントがまだ 3は両方まだ
        $smarty->assign('no_setting', $no_setting);
        $smarty->assign('uid', $this->_uid);
        $mail_app = $this->getMailApp();
        $app_name = $mail_app->getName();
        $smarty->assign('app_name', $app_name);

        $account_id = $this->getAccountId();
        $smarty->assign('aid', $account_id);
        $smarty->assign('cid', $this->getCategoryId($account_id));
    }

    protected function mailPrepend()
    {
        $input = $this->getInput();
        $personal_config = $this->getPersonalConfig();
        $folder_logic = $this->getFolderLogic();
        $mail_logic = $this->getMailLogic();
        $user = cb_get_login_user();

        // check account id
        if (array_key_exists('aid', $input) && strlen($input['aid']) > 0) {
            $aid = $input['aid'];
            $account = $personal_config->getAccountData($aid);
            if (is_null($account)) {
                cb_throw_error(E_GRN_MAIL_ACCOUNT_DATA_NOT_FOUND);
            }

            if ( ! array_key_exists('user_id', $account)
                 || $account['user_id'] != $user->getOID()
            ) {
                cb_throw_error(E_GRN_MAIL_ACCOUNT_DATA_NOT_FOUND);
            }

            // initialize special folders
            $folder_logic->initSpecialFolders($user, $aid);
        } else {
            // initialize special folders
            $folder_logic->initSpecialFolders($user);
        }

        if (array_key_exists('baid', $input) && strlen($input['baid']) > 0) {
            $baid = $input['baid'];
            $account = $personal_config->getAccountData($baid);
            if (is_null($account)) {
                cb_throw_error(E_GRN_MAIL_ACCOUNT_DATA_NOT_FOUND);
            }

            if ( ! array_key_exists('user_id', $account)
                 || $account['user_id'] != $user->getOID()
            ) {
                cb_throw_error(E_GRN_MAIL_ACCOUNT_DATA_NOT_FOUND);
            }
        }

        // check category id
        if (array_key_exists('cid', $input) && strlen($input['cid']) > 0) {
            $cid = $input['cid'];
            $folder_data = $folder_logic->getFolderData($cid, false, false);
            if (is_null($folder_data)) {
                cb_throw_error(E_GRN_MAIL_FOLDER_DATA_NOT_FOUND);
            }

            if ( ! array_key_exists('user_id', $folder_data)
                 || $folder_data['user_id'] != $user->getOID()
            ) {
                cb_throw_error(E_GRN_MAIL_FOLDER_DATA_NOT_FOUND);
            }
        }

        if (array_key_exists('bcid', $input) && strlen($input['bcid']) > 0) {
            $bcid = $input['bcid'];
            $folder_data = $folder_logic->getFolderData($bcid, false, false);
            if (is_null($folder_data)) {
                cb_throw_error(E_GRN_MAIL_FOLDER_DATA_NOT_FOUND);
            }

            if ( ! array_key_exists('user_id', $folder_data)
                 || $folder_data['user_id'] != $user->getOID()
            ) {
                cb_throw_error(E_GRN_MAIL_FOLDER_DATA_NOT_FOUND);
            }
        }

        // check mail id
        if (array_key_exists('mid', $input) && strlen($input['mid']) > 0) {
            $mid = $input['mid'];
            $mail_data = $mail_logic->getMailData($mid, false);
            if (is_null($mail_data)) {
                cb_throw_error(E_GRN_MAIL_MAIL_DATA_NOT_FOUND);
            }

            if ( ! array_key_exists('user_id', $mail_data)
                 || $mail_data['user_id'] != $user->getOID()
            ) {
                cb_throw_error(E_GRN_MAIL_MAIL_ACCESS_DENIED);
            }
        }

        if (array_key_exists('tmpid', $input) && strlen($input['tmpid']) > 0) {
            $tmpid = $input['tmpid'];
            $mail_data = $mail_logic->getTemporaryMailData($tmpid, false);
            if (is_null($mail_data)) {
                cb_throw_error(E_GRN_MAIL_MAIL_DATA_NOT_FOUND);
            }

            if ( ! array_key_exists('user_id', $mail_data)
                 || $mail_data['user_id'] != $user->getOID()
            ) {
                cb_throw_error(E_GRN_MAIL_MAIL_ACCESS_DENIED);
            }
        }
    }
}
