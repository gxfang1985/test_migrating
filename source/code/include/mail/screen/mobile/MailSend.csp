<?php

namespace grn\mail\screen\mobile;

use grn\grn\Validate;

class MailSend extends MobileMailScreenBase
{
    public function fetch()
    {
        $user = cb_get_login_user();

        //get config setting
        $system_config = $this->getSystemConfig();
        $personal_config = $this->getPersonalConfig();
        $utility = $this->getUtility();

        $this->sendPrepare();

        $this->_uid = $user->getOID();
        $this->_getFromIndex();

        // Smarty をインスタンス化
        require_once("grn/smarty.csp");
        $t = new \GRN_Smarty();

        $account_id = $this->getAccountId();
        $category_id = $this->getCategoryId($account_id);

        // ユーザー情報
        $this->_user_for_view = [
            self::ARG_USER_ID => $user->getOID(),
            self::ARG_NAME    => $user->get('display_name')
        ];

        $this->_mail[self::ARG_SIGN] = '';

        $no_setting = $this->getNoSetting();
        if ($no_setting == 0) {
            // アカウントデータ取得
            $account_data = $personal_config->getAccountData($account_id, true,
                false);
            if (is_null($account_data) || $account_data['disabled']) {
                // アカウント停止中
                cb_throw_error(E_GRN_MAIL_DISABLED_ACCOUNT);
            }

            //カレントアカウント情報取得
            $account_info = $this->getAccountInfo($account_id);
            if ( ! is_null($account_info)) {
                $this->_user_for_view['from'] = $account_info->getFrom($user);
                $this->_user_for_view['email'] = $account_info->email;
                $this->_user_for_view['label'] = '"'
                                                 . $this->_user_for_view['from']
                                                 . '" <'
                                                 . $this->_user_for_view['email']
                                                 . '>';

                if (strlen($this->_user_for_view['email']) < 1) {
                    cb_throw_error(E_GRN_MAIL_ACCOUNT_EMAIL_NOT_FOUND);
                }
            }

            //get incremental search flg
            $this->_incremental_search
                = $utility->checkAvailableForIncrementalSearch($book_ids);

            //署名情報取得
            $this->_sign_list = $this->getSignatureInfo(null, null, $account_id,
                $signature_selected_data);
            $this->_position = $signature_selected_data[self::ARG_POSITION];

            $this->_mail[self::ARG_SIGN] = $signature_selected_data;

            // 送信前確認を行う
            $personal_config->getGeneralSetting($personal_general_settings);
            $this->_b_preview = $personal_general_settings['preview'];

            // 開封確認設定
            $this->_send_set = $system_config->canUserUseConfirm()
                               && ($personal_config->useConfirmMail());
        }


        if ($this->_from_index == 1) {
            $upper_page = self::PAGE_MAIL_INDEX;
            $upper_page_name = $this->getMailApp()->getName();
        } else {
            $upper_page = self::PAGE_MAIL_LIST;
            $folder_data = $this->getFolderData($account_id, $category_id);
            $upper_page_name = $this->getCategoryName($folder_data);
        }
        $page_title = $this->getTitle();

        // set breadcrumb
        $this->assignBreadcrumbUpperPage($t, $upper_page_name, $upper_page, [
            self::ARG_ACCOUNT_ID  => $account_id,
            self::ARG_CATEGORY_ID => $category_id
        ]);
        $this->assignBreadcrumbCurrentPage($t, $page_title);

        $this->_assignArguments($t, $no_setting);
        //generate upload ticket
        include('grn/_upload_prepend.csp');

        return $t->fetch(cb_get_pagename() . ".tpl");
    }

    public function post($input = null)
    {
        $input = $this->getInput();

        //get config setting
        $personal_config = $this->getPersonalConfig();
        $utility = $this->getUtility();
        $send_logic = $this->getSendLogic();

        $this->checkArgFromInput([
            self::ARG_ACCOUNT_ID,
            self::ARG_CATEGORY_ID,
            self::ARG_USER_ID
        ],
            $input);
        $this->sendPrepare($input);

        $aid = cb_at($input, self::ARG_ACCOUNT_ID);
        $category_id = cb_at($input, self::ARG_CATEGORY_ID);
        $user_id = cb_at($input, self::ARG_USER_ID);
        $user = $this->getUserInfo($user_id);
        $command = cb_at($input, self::ARG_COMMAND);

        $to = cb_at($input, self::ARG_TO, '');
        $cc = cb_at($input, self::ARG_CC, '');
        $bcc = cb_at($input, self::ARG_BCC, '');

        if (strlen($to) > 0 || strlen($cc) > 0 || strlen($bcc) > 0
            || strcmp($command, 'draft') === 0
        ) {
            $input[self::ARG_RECIPIENT] = 'dummy';
        }

        // selected signature OID
        $sign_id = cb_at($input, self::ARG_SIGN, '');

        require_once('mail/include_send.csp');

        $properties = [];
        $properties[self::ARG_SUBJECT] = cb_at($input, self::ARG_SUBJECT);
        $properties[self::ARG_TO] = $to;
        $properties[self::ARG_CC] = $cc;
        $properties[self::ARG_BCC] = $bcc;
        $properties[self::ARG_SIGN_DATA] = cb_at($input,
            self::ARG_SIGN_VALUE, '');
        $properties[self::ARG_SIGN_POSITION] = strtolower(cb_at($input,
            self::ARG_POSITION));
        $properties[self::ARG_DATA] = cb_at($input, self::ARG_DATA);

        // 署名ID
        $properties[self::ARG_SIGN_ID] = $sign_id;

        if (array_key_exists(self::ARG_GIVE_OPEN_CHECK, $input)
            && $input[self::ARG_GIVE_OPEN_CHECK] == 'on'
        ) {
            $properties[self::ARG_CONFIRMATION_REQUEST] = 1;
        } else {
            $properties[self::ARG_CONFIRMATION_REQUEST] = 0;
        }

        // attached files
        if (cb_at($input, self::ARG_ATTACHED_FILE)) {
            require_once('grn/upload.csp');
            $files = \GRN_UploadFile::getUploadedFiles(cb_at($input,
                self::ARG_UPLOAD_TICKET), cb_at($input, self::ARG_FILE_INPUT),
                true);
        } else {
            $files = [];
        }

        if ($command == 'send') {
            // メールの送信
            $personal_config->getGeneralSetting($general_settings);
            $position = 'bottom';
            $send_logic->sendMail($user, $aid, $properties, $files, null, null,
                null, null, true, $general_settings['save_sentfile'], true,
                null, false, $position);
            $utility->addIncrementalSearch($to, $cc, $bcc);
            if (array_key_exists(self::ARG_FROM_INDEX, $input)
                && $input[self::ARG_FROM_INDEX] == 1
            ) {
                $redirect_page = self::PAGE_MAIL_INDEX;
            } else {
                $redirect_page = self::PAGE_MAIL_LIST;
            }
            cb_redirect($redirect_page, [
                self::ARG_ACCOUNT_ID  => $aid,
                self::ARG_CATEGORY_ID => $category_id
            ]);
        } elseif ($command == 'preview') {
            // メールのプレビュー
            $temp_mail_id = $send_logic->savePreviewMail($user, $aid,
                $properties, $files);

            $redirect_page = self::PAGE_MAIL_PREVIEW;
            cb_redirect($redirect_page, [
                    self::ARG_B_ACCOUNT_ID  => $aid,
                    self::ARG_B_CATEGORY_ID => $category_id,
                    self::ARG_B_MAIL_ID     => $temp_mail_id,
                    self::ARG_FROM_INDEX    => cb_at($input,
                        self::ARG_FROM_INDEX)
                ]
            );
        } elseif ($command == 'draft') {
            // メールの保存
            $send_logic->saveMail($user, $aid, $properties, $files);

            // 下書きフォルダへ遷移
            $folder_logic = $this->getFolderLogic();
            $folder_data = $folder_logic->getSpecialFolderData($aid,
                GRN_MAIL_FOLDER_CODE_UNSENT,
                false);

            $redirect_page = self::PAGE_MAIL_LIST;
            cb_redirect($redirect_page, [
                self::ARG_ACCOUNT_ID  => $aid,
                self::ARG_CATEGORY_ID => $folder_data['id']
            ]);
        }
    }

    /**
     * set smarty variable
     */
    private function _assignArguments($smarty, $no_setting)
    {
        $this->assignCommonArgumentsForCreate($smarty, $no_setting);

        $smarty->assign('page_send', true);
        $smarty->assign('from_index', $this->_from_index);
    }

    /**
     * get from_index arg
     */
    private function _getFromIndex()
    {
        if (is_null($this->_from_index)) {
            $input = $this->getInput();
            if (Validate::isNumber(cb_at($input, self::ARG_FROM_INDEX))
                && cb_at($input, self::ARG_FROM_INDEX) == 1
            ) {
                $this->_from_index = 1;
            } else {
                $this->_from_index = '';
            }
        }
    }

    public function getTitle()
    {
        $mail_app = $this->getMailApp();
        $app_name = $mail_app->getName();

        return grn_get_page_display_name(self::PAGE_MAIL_SEND,
            ['app_name' => $app_name]);
    }
}
