<?php

namespace grn\mail\screen\mobile;

use grn\mail\HtmlMailInlineContents;
use grn\mail\HtmlMailProcessor;

require_once('fw/i18n.csp');
require_once('mail/resources.csp');

class MailDetailView extends MobileMailScreenBase
{
    private $_mail_data = null;

    public function __construct($input)
    {
        parent::__construct($input);

        $this->initDetailViewFooterBar();
    }

    public function fetch()
    {
        require_once('grn/smarty.csp');
        $smarty = new \GRN_Smarty;

        // 既読処理
        $this->getMailLogic()->readMail($this->getMailId());

        $input = $this->getInput();
        $sp = 0;
        if (array_key_exists('sp', $input)) {
            $sp = $input['sp'];
        }
        $smarty->assign('sp', $sp);

        //set mail_reply_operate_info
        $mail_reply_operate_menu = [];
        $mail_reply_operate_menu[] = [
            'page'   => 'mail/mobile/reply',
            'params' => [
                self::ARG_MAIL_ID => $this->getMailId(),
                'sp'              => $sp
            ]
        ];
        $mail_reply_operate_menu[] = [
            'page'   => 'mail/mobile/reply_all',
            'params' => [
                self::ARG_MAIL_ID => $this->getMailId(),
                'sp'              => $sp
            ]
        ];
        $mail_reply_operate_menu[] = [
            'page'   => 'mail/mobile/forward',
            'params' => [
                self::ARG_MAIL_ID => $this->getMailId(),
                'sp'              => $sp
            ]
        ];
        $smarty->assign('mail_reply_operate_menu', $mail_reply_operate_menu);

        $category_id = $this->_mail_data['folder_id'];
        $folder_data = $this->getFolderLogic()->getFolderData($category_id);
        $account_id = $folder_data['account_id'];

        $folder_code = cb_at($folder_data, 'code');
        if ($folder_code == GRN_MAIL_FOLDER_CODE_TRASH) {
            $this->setSortTime('dtime');
        } elseif ($folder_code == GRN_MAIL_FOLDER_CODE_INBOX
                  || $folder_code == GRN_MAIL_FOLDER_CODE_SENTBOX
        ) {
            $this->setSortTime('ctime');
        } elseif ($folder_code == GRN_MAIL_FOLDER_CODE_UNSENT) {
            $this->setSortTime('dctime');
        }
        $sort_key = $this->getSortTime();
        $sort_column = substr($this->getMailLogic()
                                   ->_getSortColumnName($sort_key), 4);
        $sort_var = $this->_mail_data[$sort_column]->unix_ts;

        //up down button
        $logged_in_user = cb_get_login_user();
        $pn_ids = $this->getMailLogic()
                       ->getPreviousNextIDs($logged_in_user,
                           $category_id, $this->getMailId(), $sort_key,
                           $sort_var);
        $previous_params = $this->getMailLogic()
                                ->getPreviousNextNaviParams('previous',
                                    $pn_ids);
        $next_params = $this->getMailLogic()
                            ->getPreviousNextNaviParams('next', $pn_ids);
        if ($previous_params) {
            $up_params
                = [
                self::ARG_MAIL_ID => $previous_params['page_params']['mid'],
                'sp'              => $sp
            ];
            $up_disable = false;
        } else {
            $up_params = [];
            $up_disable = true;
        }
        if ($next_params) {
            $down_params
                = [
                self::ARG_MAIL_ID => $next_params['page_params']['mid'],
                'sp'              => $sp
            ];
            $down_disable = false;
        } else {
            $down_params = [];
            $down_disable = true;
        }
        $this->assignPageUpDownButton($smarty, 'mail/mobile/view', $up_params,
            $down_params, $up_disable, $down_disable);

        //star
        require_once('star/logic.csp');
        $star_logic = \GRN_Star_StarLogic::getInstance();
        $use_star = $star_logic->isActive();
        $use_star = $use_star && ($folder_code != GRN_MAIL_FOLDER_CODE_TRASH);
        $smarty->assign('use_star', $use_star);
        if ($use_star) {
            $smarty->assign('star_infos',
                $star_logic->getStatusByIDs(cb_get_login_user(),
                    GRN_MAIL_MODULE_ID, [$this->getMailId()]));
        }

        $truncated
            = \GRN_Mail_Utility::truncateMailData($this->_mail_data['data']);
        $smarty->assign('truncated', $truncated);

        $this->assignMailForView($smarty, $account_id, $category_id);

        //mail statuses
        $smarty->assign('status_mail', ['value' => -1]);
        if ($this->_mail_data['draft'] != '1'
            && $this->getSystemConfig()->canUserUseStatus()
            && $this->getPersonalConfig()->useStatus()
        ) {
            require_once('mail/status.csp');
            $logged_in_user = cb_get_login_user();
            $status_list = grn_mail_get_status_list($logged_in_user);
            foreach ($status_list as $status_oid => $status) {
                if ($this->_mail_data['status'] == $status_oid) {
                    $temp['value'] = $status_oid;
                    $temp['label'] = $status['name'];
                    $smarty->assign('status_mail', $temp);
                }
            }
        }

        //mail client setting
        $smarty->assign('disable_mail', $this->checkMailClientSetting());

        if (array_key_exists('nid', $input)
            || array_key_exists('nhid', $input)
        ) {
            $this->assignBreadcrumbUpperPage($smarty, '', '', [], true);
        } else {
            $this->assignBreadcrumbUpperPage($smarty,
                $this->getCategoryName($folder_data), 'mail/mobile/mail_list', [
                    self::ARG_ACCOUNT_ID  => $account_id,
                    self::ARG_CATEGORY_ID => $category_id,
                    'sp'                  => $sp
                ]);
        }
        $this->assignBreadcrumbCurrentPage($smarty, $this->getTitle());

        return $smarty->fetch(cb_get_pagename() . '.tpl');
    }

    private function initDetailViewFooterBar()
    {
        require_once('grn/smarty.csp');
        $smarty = new \GRN_Smarty;

        //Check setting
        $person_config = $this->getPersonalConfig();
        $account_data_count = $person_config->getAccountDataCount();
        $no_setting = $this->getNoSettingInfo($smarty,
            $account_data_count);

        //check mail type
        $this->_mail_data = $this->getMailLogic()
                                 ->getMailData($this->getMailId());
        $is_sent = $this->_mail_data['sent'];
        $is_draft = $this->_mail_data['draft'];

        $category_id = null;
        $folder_data = null;
        $account_id = null;
        if ( ! is_null($this->_mail_data) && is_array($this->_mail_data)
             && count($this->_mail_data)
        ) {
            $category_id = $this->_mail_data['folder_id'];
            $folder_data = $this->getFolderLogic()->getFolderData($category_id);
            $account_id = $folder_data['account_id'];
        }

        $input = $this->getInput();
        $sp = 0;
        if (array_key_exists('sp', $input)) {
            $sp = $input['sp'];
        }

        // set MobileFooterBar
        $custom_footer_bar_info = [];
        if ($no_setting == 0 && ! $this->checkMailClientSetting()
            && $is_sent != 1
            && $is_draft != 1
        ) {
            $custom_footer_bar_info['reply'] = [];
        }
        if ($no_setting == 0 && ! $this->checkMailClientSetting()
            && $is_sent == 1
            && $is_draft != 1
        ) {
            $custom_footer_bar_info['reuse'] = [
                'page'   => 'mail/mobile/resend',
                'params' => [
                    self::ARG_MAIL_ID => $this->getMailId(),
                    'sp'              => $sp
                ]
            ];
        }
        if ($no_setting == 0 && ! $this->checkMailClientSetting()
            && $is_draft == 1
        ) {
            $custom_footer_bar_info['edit']
                = [
                'page'   => 'mail/mobile/draft_modify',
                'params' => [
                    self::ARG_MAIL_ID => $this->getMailId(),
                    'sp'              => $sp
                ]
            ];
        }
        $custom_footer_bar_info['trash'] = [
            'page'   => 'mail/mobile/delete',
            'params' => [
                self::ARG_MAIL_ID => $this->getMailId(),
                'sp'              => $sp
            ]
        ];
        $this->setMobileFooterBar($custom_footer_bar_info);
    }

    private function assignMailForView(
        \GRN_Smarty $smarty,
        $account_id,
        $category_id
    ) {
        //mail subject
        $mail_subject = htmlspecialchars_decode($this->_mail_data['subject']);
        if (is_null($mail_subject) || strlen($mail_subject) == 0) {
            $mail_subject = cb_msg('grn.mail', 'no_title');
        }

        //mail to
        $to = $this->_mail_data['to'];
        $to_list = \GRN_Mail_Utility::static_formatAddressString($to, true,
            false, true, false, 'array');
        $to_count = 0;
        if ( ! is_array($to_list) || (count($to_list) == 0)) {
            $to = null;
        } else {
            $to_count = count($to_list);
        }

        //mail cc
        $cc = $this->_mail_data['cc'];
        $cc_list = \GRN_Mail_Utility::static_formatAddressString($cc, true,
            false, true, false, 'array');
        $cc_count = 0;
        if ( ! is_array($cc_list) || (count($cc_list) == 0)) {
            $cc = null;
        } else {
            $cc_count = count($cc_list);
        }

        //mail bcc
        $bcc = $this->_mail_data['bcc'];
        $bcc_list = \GRN_Mail_Utility::static_formatAddressString($bcc, true,
            false, true, false, 'array');
        $bcc_count = 0;
        if ( ! is_array($bcc_list) || (count($bcc_list) == 0)) {
            $bcc = null;
        } else {
            $bcc_count = count($bcc_list);
        }

        //mail for view object
        $mail_for_view = [
            'aid'                   => $account_id, //user_account_ID
            'cid'                   => $category_id,
            'mid'                   => $this->getMailId(),
            'from'                  => $this->_mail_data['from'],
            'ctime'                 => $this->_mail_data['send_ts'],
            'to'                    => $to,
            'to_count'              => $to_count,
            'cc'                    => $cc,
            'cc_count'              => $cc_count,
            'bcc'                   => $bcc,
            'bcc_count'             => $bcc_count,
            'subject'               => $mail_subject,
            'draft'                 => $this->_mail_data['draft'],
            'open'                  => null,
            'data'                  => $this->_mail_data['data'],
            'html_data'             => strlen($this->_mail_data['html_data'])
                                       > 0,
            'sent'                  => $this->_mail_data['sent'],
            'source_id'             => $this->_mail_data['source_id'],
            'no_source'             => ! $this->_mail_data['source_flag'],
            'status'                => $this->_mail_data['status'],
            'confirmation_request'  => $this->_mail_data['confirmation_request'],
            'confirmation_response' => $this->_mail_data['confirmation_response'],
            'confirmation_to'       => $this->_mail_data['confirmation_to'],
        ];

        // arrange body
        if (strcmp($this->_mail_data['sent'], '0') == 0
            && is_null($this->_mail_data['data'])
            && $mail_for_view['no_source']
        ) {
            $smarty->assign('no_body', true);
        }

        $can_show_html = true;
        $this->getSystemConfig()->getGeneralSetting($general_settings);
        if ((strcmp($this->_mail_data['sent'], '1') != 0)
            && $general_settings['mail_display_plaintext']
        ) {
            $can_show_html = false;
        }
        $smarty->assign('can_show_html', $can_show_html);

        if ($mail_for_view['html_data'] && $can_show_html) {
            $show_picture = $this->getUtility()->isHtmlMailShowPicture(
                cb_get_login_user()->getOID(), $this->getMailId(),
                $this->_mail_data['sent']
            );
            $files
                = new HtmlMailInlineContents(cb_at($this->_mail_data,
                'files', []), $this->getMailId());
            $mail_for_view['data'] = (new HtmlMailProcessor())->process(
                $this->_mail_data['html_data'], $files, $show_picture
            );
            $smarty->assign(
                'show_display_image_button',
                $this->getUtility()
                     ->isShowDisplayImageButton($this->_mail_data['html_data'],
                         $show_picture)
            );
        }

        if ($mail_for_view['draft'] != '1') {
            //is Content-Type 'message/partial'?
            $mail_for_view['is_partial']
                = strncasecmp(ltrim($this->_mail_data['content_type']),
                    'message/partial', 15) == 0;

            //Read Receipt
            $can_use_read_confirm = $this->getSystemConfig()
                                         ->canUserUseConfirm();
            $read_confirmation_status = $this->getMailLogic()
                                             ->confirmMail($account_id,
                                                 $this->getMailId());
            if ($can_use_read_confirm
                && $this->_mail_data['confirmation_request']
            ) {
                $this->getPersonalConfig()
                     ->getConfirmSetting($read_confirm_settings);

                if ($read_confirm_settings['response'] == 'manual'
                    || $read_confirm_settings['response'] == 'auto'
                ) {
                    if (is_null($read_confirmation_status)
                        || ($read_confirmation_status == 'none')
                        || ($read_confirmation_status == 'opened')
                    ) {
                        // No receipt
                        $mail_for_view['open'] = '1';
                    }
                }
            }
        }

        // 添付ファイル
        $this->fetchAttachFileInfo($mail_for_view, $this->_mail_data, []);

        $smarty->assign('mail', $mail_for_view);
    }

    private function checkMailClientSetting()
    {
        $system_config = $this->getSystemConfig();
        $system_config->getGeneralSetting($general_settings);

        return $general_settings['disable_mail'];
    }

    public function getTitle()
    {
        return cb_msg('grn.mobile', 'detail_title');
    }
}
