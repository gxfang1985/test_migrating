<?php

namespace grn\mail\screen\mobile;

use grn\grn\Validate;
use grn\grn\GrnException;

require_once('mail/resources.csp');

class MailList extends MobileMailScreenBase
{
    private $_display_name;
    private $_folder_data;

    public function __construct($input)
    {
        parent::__construct($input);

        if ( ! Validate::isNumber(@$input[self::ARG_ACCOUNT_ID])) {
            throw new GrnException(E_GRN_MAIL_ACCOUNT_DATA_NOT_FOUND);
        }
        if ( ! Validate::isNumber(@$input[self::ARG_CATEGORY_ID])) {
            throw new GrnException(E_GRN_MAIL_FOLDER_DATA_NOT_FOUND);
        }
        $aid = $input[self::ARG_ACCOUNT_ID];
        $cid = $input[self::ARG_CATEGORY_ID];
        $this->_folder_data = $this->getFolderData($aid, $cid);
        $this->setAccountId($aid);
        $this->setCategoryId($cid);

        require_once("grn/smarty.csp");
        $smarty = new \GRN_Smarty;

        $disable_mail = $this->isMailDisabled();
        $smarty->assign('disable_mail', $disable_mail);

        // Check setting.
        $personal_config = $this->getPersonalConfig();
        $account_data_count = $personal_config->getAccountDataCount();
        $no_setting = $this->getNoSettingInfo($smarty,
            $account_data_count);

        // 0はOK、1はメールサーバーがまだ 2はアカウントがまだ 3は両方まだ
        $smarty->assign('no_setting', $no_setting);

        $this->setMobileOperateMenu([
            [
                'page'   => 'mail/mobile/mail_list',
                'name'   => cb_msg('grn.mail.mobile', 'all'),
                'params' => ['aid' => $aid, 'cid' => $cid]
            ],
            [
                'page'   => 'mail/mobile/mail_list',
                'name'   => cb_msg('grn.mail.mobile', 'unread'),
                'params' => ['aid' => $aid, 'cid' => $cid, 'filter' => 'unread']
            ]
        ]);
        if ($this->_account_deleted || $disable_mail || $this->_cannot_send
            || $this->_size_over
        ) {
            $this->setMobileFooterBar();
        } else {
            $this->setMobileFooterBar([
                'add' => [
                    'page'   => 'mail/mobile/send',
                    'params' => ['aid' => $aid, 'cid' => $cid]
                ]
            ]);
        }
        if (array_key_exists('sp', $input)) {
            $smarty->assign('sp', $input['sp']);
        }
        $this->_smarty = $smarty;
    }

    private function setDisplayName($value)
    {
        $this->_display_name = $value;
    }

    private function getDisplayName()
    {
        return $this->_display_name;
    }

    public function fetch()
    {
        $user = cb_get_login_user();
        $aid = $this->getAccountId();
        $cid = $this->getCategoryId($aid);

        if (is_null($this->_smarty)) {
            require_once('grn/smarty.csp');
            $this->_smarty = new \GRN_Smarty;
        }
        $smarty = $this->_smarty;

        $smarty->assign('account_id', $aid);
        $smarty->assign('category_id', $cid);

        $app_name = $this->getMailApp()->getName();
        $smarty->assign('app_name', $app_name);

        $account_list_view = $this->getAccountListInfo();
        $smarty->assign('account_list', $account_list_view);

        // N件ナビゲーション
        require_once('fw/string_util.csp');
        require_once('grn/controller.csp');
        $controller_util = new \GRN_ControllerUtil();
        assert('! is_null( $controller_util )');

        // 現在位置
        $current_start_position = $controller_util->getNaviStartPosition();

        // セッションに保存
        $controller_util->setNaviStartPosition($current_start_position);

        // 表示する件数取得
        $number_on_page = self::MORE_VIEW_COUNT;

        $folder_code = cb_at($this->_folder_data, 'code');

        if ($folder_code == GRN_MAIL_FOLDER_CODE_TRASH) {
            $this->setSortTime('dtime');
        } elseif ($folder_code == GRN_MAIL_FOLDER_CODE_INBOX
                  || $folder_code == GRN_MAIL_FOLDER_CODE_SENTBOX
        ) {
            $this->setSortTime('ctime');
        } elseif ($folder_code == GRN_MAIL_FOLDER_CODE_UNSENT) {
            $this->setSortTime('dctime');
        }

        //------------------
        // 一覧に表示する形式
        if (($folder_code == GRN_MAIL_FOLDER_CODE_SENTBOX)
            || ($folder_code == GRN_MAIL_FOLDER_CODE_UNSENT)
        ) {
            $this->setDisplayName('to');
        } else {
            $this->setDisplayName('from');
        }
        $sort_key = $this->getSortTime();

        $mail_logic = $this->getMailLogic();
        $mail_list = $mail_logic->getMailDataList($user, $cid, false,
            false, $sort_key, true, $current_start_position,
            $number_on_page + 1, null, $this->getFilter());
        $isExistsNextPage = count($mail_list) > $number_on_page;
        if ($isExistsNextPage) {
            array_pop($mail_list);
        }

        // n件ナビゲーション情報を取得する
        $navigation_info
            = $controller_util->makeSimpleNaviInformation($current_start_position,
            $number_on_page, count($mail_list), $isExistsNextPage,
            ['aid' => $aid, 'cid' => $cid, 'filter' => $this->getFilter()]);

        $mail_list_for_view = $this->getMailListForView($mail_list);

        // データ一覧
        $smarty->assign('navi_info', $navigation_info);

        $smarty->assign('count', count($mail_list_for_view));
        $smarty->assign('mails', $mail_list_for_view);

        //assign breadcrumb.
        $current_page = $this->getTitle();
        $upper_page = grn_get_page_display_name(self::PAGE_INDEX);
        $this->assignBreadcrumbCurrentPage($smarty, $current_page);
        $this->assignBreadcrumbUpperPage($smarty, $upper_page,
            'mail/mobile/index', $params = ['aid' => $aid, 'cid' => $cid]);

        //delete multi
        $category_for_view = $this->getCategoryForView($this->_folder_data,
            $aid, $cid);
        if (strlen($folder_code) > 0) {
            $folder_name = cb_msg($this->getMailApp()->getModuleId(),
                $folder_code);
        } else {
            $folder_name = $this->_folder_data['name'];
        }
        $personal_config = $this->getPersonalConfig();
        $personal_config->getTrashSetting($use_trash, $save_days);
        $delete_multi_info = [
            'title'          => grn_get_page_display_name('mail/mobile/delete_multi'),
            'page'           => 'mail/mobile/delete_multi.tpl',
            'no_confirm'     => false,
            'data'           => [
                'category'       => $category_for_view,
                'use_garbagebox' => $use_trash,
                'folder_name'    => $folder_name,
                'aid'            => $aid,
                'cid'            => $cid
            ],
            'handler'        => 'delete_multi',
            'multi_target'   => 'ids[]',
            'form_target'    => 'mail/mobile/mail_list',
            'beforeAjaxSend' => 'beforeMailDelete',
            'afterAjaxSend'  => 'afterMailDelete',
        ];
        $smarty->assign('delete_multi_info', $delete_multi_info);

        return $smarty->fetch(cb_get_pagename() . '.tpl');
    }

    private function getMailListForView($mail_list)
    {
        $mail_list_for_view = [];
        if (is_array($mail_list)) {
            foreach (array_keys($mail_list) as $mail_id) {
                $mail_data = $mail_list[$mail_id];

                $sort_time = $this->getSortTime();
                if ($sort_time === 'dtime') {
                    $time = $mail_data['dtime'];
                } else {
                    if ($sort_time === 'dctime') {
                        $time = $mail_data['ctime'];
                    } else {
                        $time = $mail_data['send_ts'];
                    }
                }

                $subject = $mail_data['subject'];
                if (is_null($subject)) {
                    $subject = '';
                } else {
                    $subject = cb_trim($subject);
                }

                $subject = htmlspecialchars_decode($subject);

                $name = $mail_data[$this->getDisplayName()];

                $mail_name = '';
                $names
                    = \GRN_Mail_Utility::static_formatAddressString($name,
                    true, false, true, false, 'array');

                if (is_array($names) && (count($names) > 0)) {
                    $counter = 0;
                    foreach ($names as $temp_array) {
                        $email = $temp_array['email'];

                        $display_name = $temp_array['name'];
                        if (strlen($display_name) == 0) {
                            $display_name = $email;
                        }

                        if ($counter > 0) {
                            $mail_name .= ', ';
                        }
                        $mail_name .= $display_name;
                        $counter++;
                    }
                }

                $read_ts = $mail_data['read_ts'];
                $b_unread = ( ! is_object($read_ts)
                              || ($read_ts->unix_ts == 0));

                $mail_list_for_view[$mail_id] = [
                    'mid'         => $mail_id,
                    'unread'      => $b_unread,
                    'name'        => $mail_name,
                    'time'        => $time, // 日時
                    'subject'     => $subject,
                    'data'        => $mail_data['data'],
                    'attach_file' => $mail_data['attached'],
                    'draft'       => $mail_data['draft'], //ダミー 下書きか否か
                ];

                // 操作した内容（1:返信 2:全員に返信 3:転送）
                switch ($mail_data['action']) {
                    case 'reply':
                        $mail_list_for_view[$mail_id]['action'] = '1';
                        break;
                    case 'reply-all':
                        $mail_list_for_view[$mail_id]['action'] = '2';
                        break;
                    case 'forward':
                        $mail_list_for_view[$mail_id]['action'] = '3';
                        break;
                }
            }
        }

        return $mail_list_for_view;
    }

    public function getTitle()
    {
        $page_title = $this->getCategoryName($this->_folder_data);

        return $page_title;
    }
}
