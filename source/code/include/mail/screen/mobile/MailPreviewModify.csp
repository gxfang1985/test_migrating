<?php

namespace grn\mail\screen\mobile;

use grn\grn\Validate;
use grn\grn\GrnException;

class MailPreviewModify extends MobileMailScreenBase
{
    private $_mail_id;
    private $_account_id;
    private $_category_id;
    private $_preview_account_id;
    private $_draft_id;
    private $_tmp_mail_id;
    private $_temp_mail_data;

    public function __construct($input)
    {
        parent::__construct($input);

        $this->sendPrepare();
        $mail_logic = $this->getMailLogic();

        $this->_getTempMailId();
        $this->_temp_mail_data
            = $mail_logic->getTemporaryMailData($this->_tmp_mail_id,
            true);
        $this->_preview_account_id = $this->_temp_mail_data['temp_account_id'];
        $this->_action = $this->_temp_mail_data[self::ARG_ACTION];
    }

    public function fetch()
    {
        $user = cb_get_login_user();

        //get config setting
        $system_config = $this->getSystemConfig();
        $personal_config = $this->getPersonalConfig();
        $utility = $this->getUtility();
        $send_logic = $this->getSendLogic();

        $this->_uid = $user->getOID();

        // Smarty をインスタンス化
        require_once("grn/smarty.csp");
        $t = new \GRN_Smarty();

        $this->_getAccountId();
        $this->_getCategoryId($this->_account_id);
        $this->_draft_id = cb_at($this->getInput(), self::ARG_DRAFT_ID, '');
        $this->_getMailId();
        $this->_getFromIndex();

        // for cancel button
        $this->setAccountId($this->_account_id);
        $this->setCategoryId($this->_category_id);

        // ユーザー情報
        $this->_user_for_view = [
            self::ARG_USER_ID => $user->getOID(),
            self::ARG_NAME    => $user->get('display_name')
        ];

        $this->_mail[self::ARG_SIGN] = '';

        $doc_name = cb_get_pagename();

        $no_setting = $this->getNoSetting();
        if ($no_setting == 0) {
            // アカウントデータ取得
            $account_data = $personal_config->getAccountData($this->_account_id,
                true, false);
            if (is_null($account_data) || $account_data['disabled']) {
                // アカウント停止中
                cb_throw_error(E_GRN_MAIL_DISABLED_ACCOUNT);
            }

            //カレントアカウント情報取得
            $account_info = $this->getAccountInfo($this->_account_id);
            if ( ! is_null($account_info)) {
                $this->_user_for_view['from'] = $account_info->getFrom($user);
                $this->_user_for_view['email'] = $account_info->email;
                $this->_user_for_view['label'] = '"'
                                                 . $this->_user_for_view['from']
                                                 . '" <'
                                                 . $this->_user_for_view['email']
                                                 . '>';

                if (strlen($this->_user_for_view['email']) < 1) {
                    cb_throw_error(E_GRN_MAIL_ACCOUNT_EMAIL_NOT_FOUND);
                }
            }

            //get incremental search flg
            $this->_incremental_search
                = $utility->checkAvailableForIncrementalSearch($book_ids);

            //署名情報取得
            $this->_sign_list
                = $this->getSignatureInfo($this->_temp_mail_data['sign_id'],
                $this->_temp_mail_data['sign_data'], $this->_account_id,
                $signature_selected_data);
            $this->_position = $signature_selected_data[self::ARG_POSITION];

            // 再送信用ファイル情報取得
            require_once('grn/controller.csp');
            $this->_tmp_key = grn_get_temporary_key();
            $reuse_files = grn_init_attached_file($doc_name
                                                  . $this->_tmp_key,
                $send_logic->makeReuseFiles($this->_temp_mail_data, true));

            // 送信前確認を行う
            $personal_config->getGeneralSetting($personal_general_settings);
            $this->_b_preview = $personal_general_settings['preview'];

            // 開封確認設定
            $this->_send_set = $system_config->canUserUseConfirm()
                               && ($personal_config->useConfirmMail());

            $this->_mail = [
                'aid'             => $this->_preview_account_id,
                'cid'             => $this->_category_id,
                'mid'             => $this->_temp_mail_data['id'],
                'to'              => $this->_temp_mail_data[self::ARG_TO],
                'cc'              => $this->_temp_mail_data[self::ARG_CC],
                'bcc'             => $this->_temp_mail_data[self::ARG_BCC],
                'subject'         => $this->_temp_mail_data[self::ARG_SUBJECT],
                'data'            => $this->_temp_mail_data[self::ARG_DATA],
                'attached_files'  => $reuse_files,
                'html_data'       => '',
                'give_open_check' => $this->_temp_mail_data[self::ARG_CONFIRMATION_REQUEST]
                                     && $this->_send_set, // 開封確認メールの要求する/しない
                'sign'            => $signature_selected_data
            ];
        }

        // set breadcrumb
        if ($this->_from_index == 1) {
            $upper_page = self::PAGE_MAIL_INDEX;
            $upper_page_name = $this->getMailApp()->getName();
        } else {
            $upper_page = self::PAGE_MAIL_LIST;
            $folder_data = $this->getFolderData($this->_account_id,
                $this->_category_id);
            $upper_page_name = $this->getCategoryName($folder_data);
        }
        $this->assignBreadcrumbUpperPage($t, $upper_page_name, $upper_page, [
            self::ARG_ACCOUNT_ID  => $this->_account_id,
            self::ARG_CATEGORY_ID => $this->_category_id
        ]);
        $page_title = $this->getTitle();
        $this->assignBreadcrumbCurrentPage($t, $page_title);

        $this->_action = cb_at($this->getInput(), self::ARG_ACTION, '');

        $this->_assignArguments($t, $no_setting);
        //generate upload ticket
        include('grn/_upload_prepend.csp');

        return $t->fetch("{$doc_name}.tpl");
    }

    public function post($input = null)
    {
        $input = $this->getInput();

        //get config setting
        $send_logic = $this->getSendLogic();

        $this->checkArgFromInput([
            self::ARG_B_ACCOUNT_ID,
            self::ARG_B_CATEGORY_ID,
            self::ARG_B_MAIL_ID,
            self::ARG_USER_ID
        ],
            $input);

        $aid = cb_at($input, self::ARG_B_ACCOUNT_ID);
        $category_id = cb_at($input, self::ARG_B_CATEGORY_ID);
        $temp_mail_id = cb_at($input, self::ARG_B_MAIL_ID);
        $user_id = cb_at($input, self::ARG_USER_ID);
        $user = $this->getUserInfo($user_id);
        $command = cb_at($input, self::ARG_COMMAND);
        $action = cb_at($input, self::ARG_ACTION);
        $from_index = cb_at($input, self::ARG_FROM_INDEX);
        $draft_id = cb_at($input, self::ARG_DRAFT_ID, '');
        $mail_id = cb_at($input, self::ARG_MAIL_ID, '');

        $to = cb_at($input, self::ARG_TO, '');
        $cc = cb_at($input, self::ARG_CC, '');
        $bcc = cb_at($input, self::ARG_BCC, '');

        if (strlen($to) > 0 || strlen($cc) > 0 || strlen($bcc) > 0
            || strcmp($command, 'draft') === 0
        ) {
            $input[self::ARG_RECIPIENT] = 'dummy';
        }

        // selected signature OID
        $sign_id = cb_at($input, self::ARG_SIGN, '');

        require_once('mail/include_send.csp');

        $properties = [];
        $properties[self::ARG_SUBJECT] = cb_at($input, self::ARG_SUBJECT);
        $properties[self::ARG_TO] = $to;
        $properties[self::ARG_CC] = $cc;
        $properties[self::ARG_BCC] = $bcc;
        $properties[self::ARG_SIGN_DATA] = cb_at($input,
            self::ARG_SIGN_VALUE, '');
        $properties[self::ARG_SIGN_POSITION] = strtolower(cb_at($input,
            self::ARG_POSITION));
        $properties[self::ARG_DATA] = cb_at($input, self::ARG_DATA);

        // 署名ID
        $properties[self::ARG_SIGN_ID] = $sign_id;

        if (array_key_exists(self::ARG_GIVE_OPEN_CHECK, $input)
            && $input[self::ARG_GIVE_OPEN_CHECK] == 'on'
        ) {
            $properties[self::ARG_CONFIRMATION_REQUEST] = 1;
        } else {
            $properties[self::ARG_CONFIRMATION_REQUEST] = 0;
        }

        // attached files
        require_once('grn/controller.csp');
        $tmp_key = grn_get_temporary_key();
        $target_name = 'mail/mobile/preview_modify';
        $files = grn_get_attached_files($target_name . $tmp_key);

        if (cb_at($input, self::ARG_ATTACHED_FILE)) {
            require_once('grn/upload.csp');
            $upload_files = \GRN_UploadFile::getUploadedFiles(cb_at($input,
                self::ARG_UPLOAD_TICKET), cb_at($input, self::ARG_FILE_INPUT),
                true);
            foreach ($upload_files as $fid => $file) {
                $files[$fid] = $file;
            }
        }

        if ($command == 'preview') {
            // メールのプレビュー
            $temp_mail_id = $send_logic->savePreviewMail($user, $aid,
                $properties, $files, $temp_mail_id, null, $action);

            $redirect_page = self::PAGE_MAIL_PREVIEW;
            if (strlen($properties['sign_position']) > 0) {
                cb_redirect($redirect_page, [
                        self::ARG_B_ACCOUNT_ID  => $aid,
                        self::ARG_B_CATEGORY_ID => $category_id,
                        self::ARG_MAIL_ID       => $mail_id,
                        self::ARG_B_MAIL_ID     => $temp_mail_id,
                        self::ARG_DRAFT_ID      => $draft_id,
                        self::ARG_FROM_INDEX    => $from_index,
                        self::ARG_SIGN_POSITION => $properties[self::ARG_SIGN_POSITION],
                        self::ARG_ACTION        => $action
                    ]
                );
            } else {
                cb_redirect($redirect_page, [
                        self::ARG_B_ACCOUNT_ID  => $aid,
                        self::ARG_B_CATEGORY_ID => $category_id,
                        self::ARG_MAIL_ID       => $mail_id,
                        self::ARG_B_MAIL_ID     => $temp_mail_id,
                        self::ARG_DRAFT_ID      => $draft_id,
                        self::ARG_FROM_INDEX    => $from_index,
                        self::ARG_ACTION        => $action
                    ]
                );
            }
        } elseif ($command == 'draft') {
            // メールの保存
            $send_logic->saveMail($user, $aid, $properties, $files,
                $temp_mail_id);

            // 下書きフォルダへ遷移
            $folder_logic = $this->getFolderLogic();
            $folder_data = $folder_logic->getSpecialFolderData($aid,
                GRN_MAIL_FOLDER_CODE_UNSENT,
                false);

            $redirect_page = self::PAGE_MAIL_LIST;
            cb_redirect($redirect_page, [
                self::ARG_ACCOUNT_ID  => $aid,
                self::ARG_CATEGORY_ID => $folder_data['id']
            ]);
        }
    }

    /**
     * set smarty variable
     */
    private function _assignArguments($smarty, $no_setting)
    {
        $this->assignCommonArgumentsForCreate($smarty, $no_setting);

        $smarty->assign('baid', $this->_account_id);
        $smarty->assign('bcid', $this->_category_id);
        $smarty->assign('tempid', $this->_tmp_mail_id);
        $smarty->assign('draft_id', $this->_draft_id);
        $smarty->assign('tmp_key', $this->_tmp_key);
        $smarty->assign('from_index', $this->_from_index);
        if (is_null($this->_action) == true || $this->_action == "") {
            $smarty->assign('page_send', true);
        } else {
            $smarty->assign('mid', $this->_mail_id);
            $smarty->assign('action', $this->_action);
            if ($this->_action == 'reuse') {
                $smarty->assign('page_send', true);
            }
        }
    }

    private function _getTempMailId()
    {
        if (is_null($this->_tmp_mail_id)) {
            $input = $this->getInput();
            if ( ! Validate::isNumber(@$input[self::ARG_B_MAIL_ID])) {
                throw new GrnException(E_GRN_MAIL_MAIL_DATA_NOT_FOUND);
            } else {
                $this->_tmp_mail_id = $input[self::ARG_B_MAIL_ID];
            }
        }
    }

    private function _getAccountId()
    {
        if (is_null($this->_account_id)) {
            $input = $this->getInput();
            if ( ! Validate::isNumber(@$input[self::ARG_B_ACCOUNT_ID])) {
                $personal_config = $this->getPersonalConfig();
                $this->_account_id
                    = $personal_config->getDefaultAccountId(false,
                    true, true);
            } else {
                $this->_account_id = $input[self::ARG_B_ACCOUNT_ID];
            }
        }
    }

    private function _getCategoryId(& $account_id)
    {
        if (is_null($this->_category_id)) {
            $input = $this->getInput();
            if ( ! Validate::isNumber(@$input[self::ARG_B_CATEGORY_ID])) {
                if ($account_id) {
                    $folder_logic = $this->getFolderLogic();
                    $this->_category_id
                        = $folder_logic->translateFolderId($account_id,
                        GRN_MAIL_FOLDER_CODE_INBOX);
                }
            } else {
                $this->_category_id = $input[self::ARG_B_CATEGORY_ID];
            }
        }
    }

    private function _getMailId()
    {
        $input = $this->getInput();
        if ( ! Validate::isNumber(@$input[self::ARG_MAIL_ID])) {
            $this->_mail_id = '';
        } else {
            $this->_mail_id = $input[self::ARG_MAIL_ID];
        }
    }

    /**
     * get from_index arg
     */
    private function _getFromIndex()
    {
        if (is_null($this->_from_index)) {
            $input = $this->getInput();
            if (Validate::isNumber(cb_at($input, self::ARG_FROM_INDEX))
                && cb_at($input, self::ARG_FROM_INDEX) == 1
            ) {
                $this->_from_index = 1;
            } else {
                $this->_from_index = '';
            }
        }
    }

    public function getTitle()
    {
        $mail_app = $this->getMailApp();
        $app_name = $mail_app->getName();
        if (is_string($this->_action) && (strlen($this->_action) > 0)) {
            $temp_action = ($this->_action === 'reuse') ? 'resend'
                : $this->_action;
            $page_title = grn_get_page_display_name('mail/' . str_replace("-",
                    "_", $temp_action), ['app_name' => $app_name]);
        } else {
            $page_title = grn_get_page_display_name(self::PAGE_MAIL_SEND,
                ['app_name' => $app_name]);
        }

        return $page_title;
    }
}
