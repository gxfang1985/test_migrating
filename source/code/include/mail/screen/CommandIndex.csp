<?php

namespace grn\mail\screen;

use grn\grn\GrnException;
use grn\grn\Validate;

require_once('mail/resources.csp');

class CommandIndex extends MailScreenBase
{
    private $_mail_ids;

    public function __construct($input)
    {
        parent::__construct($input);
        $this->_mail_ids = $this->getArrayValue('ids', $input);
        $this->setAccountId(cb_at($input, self::ARG_ACCOUNT_ID, ''));
        $this->setCategoryId(cb_at($input, self::ARG_CATEGORY_ID, ''));
    }

    public function changeStatus()
    {
        $mail_ids = $this->_mail_ids;
        if (is_array($mail_ids) && (count($mail_ids) > 0)) {
            $input = $this->getInput();
            $change_status_id = $this->getArrayValue('cs_value', $input);
            if (Validate::isInTheRange($change_status_id, 1, 6)) {
                require_once('mail/status.csp');
                $logged_in_user = $this->getLoginUser();
                grn_mail_set_status_multi($logged_in_user, $mail_ids,
                    $change_status_id);
            }

            return $mail_ids;
        }

        return false;
    }

    public function move()
    {
        $mail_ids = $this->_mail_ids;
        if (is_array($mail_ids) && (count($mail_ids) > 0)) {
            $input = $this->getInput();
            $new_category_id = $this->getArrayValue('dcid', $input);
            if ($new_category_id === 'another') {
                $session = $this->getSession('mail/index');
                $session->set('mail_ids', $mail_ids);
                $aid = $this->getAccountId();

                return [
                    'type' => 'another_account',
                    'link' => cb_get_full_url('mail/move_another', [
                        'aid' => $aid,
                        'cid' => $this->getCategoryId($aid)
                    ])
                ];
            } elseif (Validate::isNumber($new_category_id)) {
                $mail_logic = $this->getMailLogic();
                foreach ($mail_ids as $id) {
                    $mail_logic->checkMailExist($id);
                }
                $count = $mail_logic->moveMailDatas($mail_ids,
                    $new_category_id);

                return [
                    'type'     => '',
                    'count'    => $count,
                    'mail_ids' => $mail_ids
                ];
            }

            return false;
        }

        return false;
    }

    public function read()
    {
        $mail_ids = $this->_mail_ids;
        if (is_array($mail_ids) && (count($mail_ids) > 0)) {
            $mail_logic = $this->getMailLogic();
            $timestamp = new \CB_TimeStampEx();
            foreach ($mail_ids as $mail_id) {
                $mail_logic->readMail($mail_id, $timestamp, false, true);
            }

            return $mail_ids;
        }

        return false;
    }

    public function unread()
    {
        $mail_ids = $this->_mail_ids;
        if (is_array($mail_ids) && count($mail_ids) > 0) {
            return $this->getMailLogic()
                        ->unreadMails($this->getLoginUser(), $mail_ids);
        }

        return false;
    }

    public function deleteMulti()
    {
        $mail_ids = $this->_mail_ids;
        if (is_array($mail_ids) && (count($mail_ids) > 0)) {
            $mail_logic = $this->getMailLogic();
            $mail_logic->deleteMailDatas($mail_ids);

            return $mail_ids;
        }

        return false;
    }

    public function deleteAll()
    {
        $input = $this->getInput();
        $b_sub_folder = $this->getArrayValue('subfolder', $input);
        $b_sub_folder = ( ! is_null($b_sub_folder) && ($b_sub_folder == '1'));

        $mail_logic = $this->getMailLogic();

        // フォルダ内データの削除
        $aid = $this->getAccountId();

        return $mail_logic->deleteMailDataListByFolderID($this->getLoginUser(),
            $aid, $this->getCategoryId($aid), $b_sub_folder);
    }

    /* Delete Multi Files
     *
     * return bool|array
     */
    public function deleteMultiFiles()
    {
        $mail_ids = $this->_mail_ids;
        if (is_array($mail_ids) && (count($mail_ids) > 0)) {
            $mail_logic = $this->getMailLogic();

            return $mail_logic->deleteMultiFiles($mail_ids);
        }

        return false;
    }
}
