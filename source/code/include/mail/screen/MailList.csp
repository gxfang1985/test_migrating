<?php

namespace grn\mail\screen;

use grn\mail\screen\MailScreenBase;
use grn\grn\Validate;

require_once('mail/resources.csp');

class MailList extends MailScreenBase
{
    const ARG_NAVI_TAG = 'sp';

    private $_display_name;
    private $_navi_info;
    private $_is_from_ajax;

    private function setDisplayName($value)
    {
        $this->_display_name = $value;
    }

    private function getDisplayName()
    {
        return $this->_display_name;
    }

    private function setNaviInfo($offset, $limit, $total_count)
    {
        require_once('grn/controller.csp');
        $controllerUtil = new \GRN_ControllerUtil();
        $this->_navi_info = $controllerUtil->makeNaviInformation($offset,
            $limit, $total_count);
    }

    private function getNaviInfo()
    {
        return $this->_navi_info;
    }

    public function fetch()
    {
        $input = $this->getInput();
        $user = $this->getLoginUser();

        $mail_logic = $this->getMailLogic();
        $personal_config = $this->getPersonalConfig();
        $system_config = $this->getSystemConfig();

        $account_id = $this->getAccountId();
        $category_id = $this->getCategoryId($account_id);
        $status_id = $this->getStatusId();
        $filter = $this->getFilter();

        require_once('grn/smarty.csp');
        $t = new \GRN_Smarty();

        $t->assign('status_id', $status_id);
        $t->assign('filter', $filter);

        $this->setSortParameters();

        $folder_data = $this->getFolderData($account_id, $category_id);
        $folder_code = is_array($folder_data) ? $folder_data['code'] : '';

        if ($folder_code == GRN_MAIL_FOLDER_CODE_TRASH) {
            $this->setSortTime('dtime');
        } elseif ($folder_code == GRN_MAIL_FOLDER_CODE_INBOX
                  || $folder_code == GRN_MAIL_FOLDER_CODE_SENTBOX
        ) {
            if ($this->getSortTime() == 'dctime') {
                $this->setSortTime('ctime');
            } elseif ($this->getSortTime() == 'mtime') {
                $this->setSortTime('rtime');
            }
        } elseif ($folder_code == GRN_MAIL_FOLDER_CODE_UNSENT) {
            if ($this->getSortTime() == 'ctime') {
                $this->setSortTime('dctime');
            } elseif ($this->getSortTime() == 'rtime') {
                $this->setSortTime('mtime');
            }
        }

        $category_for_view = $this->getCategoryForView($folder_data,
            $account_id, $category_id);
        $t->assign('category', $category_for_view);

        //------------------
        // 一覧に表示する形式
        if (($folder_code == GRN_MAIL_FOLDER_CODE_SENTBOX)
            || ($folder_code == GRN_MAIL_FOLDER_CODE_UNSENT)
        ) {
            $this->setDisplayName('to');
        } else {
            $this->setDisplayName('from');
        }
        $name_format = $personal_config->getListNameFormatSetting();
        $sort_key = $this->getSortKey($this->getSort(), $this->getSortTime(),
            $this->getDisplayName(), $name_format);

        // 表示する件数取得
        $offset = $this->getArrayValue(self::ARG_NAVI_TAG, $this->getInput());
        if ( ! Validate::isNumber($offset)) {
            $offset = 0;
        }

        if (Validate::isNumber(@$input[self::ARG_MAIL_ID])) {
            $mail_id = $input[self::ARG_MAIL_ID];
            $count = $mail_logic->getIndexOfMailInList($user, $category_id,
                $mail_id, $sort_key, $this->getReverse());
            if ($count) {
                $offset = intval($count / 100) * 100;
            }
        }
        $mail_list = $mail_logic->getMailDataList($user, $category_id, false,
            false, $sort_key, $this->getReverse(), $offset,
            self::MORE_VIEW_COUNT, $status_id, $filter);

        // メールデータ数取得
        $number_of_all = $mail_logic->getMailDataCount($user, $category_id,
            $status_id, $filter);

        $this->setNaviInfo($offset, self::MORE_VIEW_COUNT, $number_of_all);
        $navi_info = $this->getNaviInfo();
        $t->assign('prev_offset',
            $navi_info['navi']['previous_page_start_position']);
        $t->assign('next_offset',
            $navi_info['navi']['next_page_start_position']);
        $t->assign('start', $navi_info['start_count']);
        $t->assign('end', $navi_info['end_count']);

        $mail_list_for_view = $this->getMailListForView($mail_list, $account_id,
            $category_id, $name_format);
        $t->assign('count', count($mail_list_for_view));
        $t->assign('mails', $mail_list_for_view);

        // statuses
        if ( ! $system_config->canUserUseStatus()
             || ! $personal_config->useStatus()
        ) {
            $t->assign('no_status', '1');
        }
        // star
        require_once('star/logic.csp');
        $star_logic = \GRN_Star_StarLogic::getInstance();
        $t->assign('use_star', ($use_star = $star_logic->isActive()));
        if ($use_star && is_array($mail_list)) {
            $t->assign('star_infos',
                $star_logic->getStatusByIDs($user, GRN_MAIL_MODULE_ID,
                    array_keys($mail_list)));
        }
        // ---end star

        //同階層フォルダの有無
        $folder_logic = $this->getFolderLogic();
        $has_sibling_folders = $folder_logic->siblingFolderExists($category_id);
        $t->assign('has_sibling_folders', $has_sibling_folders);

        // ソート設定
        $t->assign('sort', $this->getSort());
        $t->assign('sort_col', $this->getSort());
        $t->assign('sort_time', $this->getSortTime());
        $t->assign('reverse', $this->getReverse());

        $personal_config->getTrashSetting($use_trash, $save_days);
        $category_for_view['child']
            = $folder_logic->getSubFolderCount($category_id);
        //delete all data
        $delete_info_all = [
            'title'          => grn_get_page_display_name('mail/delete_all',
                ['app_name' => $this->getMailApp()->getName()]),
            'category'       => $category_for_view,
            'use_garbagebox' => $use_trash,
            'truncate_len'   => GRN_MAIL_SUBJECT_TRUNCATE_WIDTH
        ];
        $t->assign('delete_info_all', $delete_info_all);
        // delete multi
        $delete_info_multi = [
            'title'          => grn_get_page_display_name('mail/delete_multi',
                ['app_name' => $this->getMailApp()->getName()]),
            'use_garbagebox' => $use_trash,
        ];
        $t->assign('delete_info_multi', $delete_info_multi);
        // delete multi files
        $delete_info_multi_files = [
            'title' => grn_get_page_display_name('mail/delete_multi_files',
                ['app_name' => $this->getMailApp()->getName()]),
        ];
        $t->assign('delete_info_multi_files', $delete_info_multi_files);

        return $t->fetch('mail/mail_list_3pane.tpl');
    }

    private function getSortKey($sort, $sort_time, $disp_name, $name_format)
    {
        if ($sort === 'time') {
            $sort_key = $sort_time;
        } elseif ($sort === 'name') {
            if ($name_format == 'name') {
                $sort_key = $disp_name . '_name';
            } elseif ($name_format == 'email') {
                $sort_key = $disp_name . '_email';
            } else {
                $sort_key = $disp_name;
            }
        } else {
            $sort_key = $sort;
        }

        return $sort_key;
    }

    private function getMailListForView(
        $mail_list,
        $account_id,
        $category_id,
        $name_format
    ) {
        $mail_list_for_view = [];
        if (is_array($mail_list)) {
            foreach (array_keys($mail_list) as $mail_id) {
                $mail_data = $mail_list[$mail_id];

                $sort_time = $this->getSortTime();
                if ($sort_time === 'rtime') {
                    $time = $mail_data['timestamp'];
                } elseif ($sort_time === 'dtime') {
                    $time = $mail_data['dtime'];
                } elseif ($sort_time === 'dctime') {
                    $time = $mail_data['ctime'];
                } elseif ($sort_time === 'mtime') {
                    $time = $mail_data['mtime'];
                } else {
                    $time = $mail_data['send_ts'];
                }

                $subject = $mail_data['subject'];
                if (is_null($subject)) {
                    $subject = '';
                } else {
                    $subject = cb_trim($subject);
                }

                $subject = htmlspecialchars_decode($subject);

                $name = $mail_data[$this->getDisplayName()];

                $mail_name = '';
                if ($name_format == 'name') {
                    $names
                        = \GRN_Mail_Utility::static_formatAddressString($name,
                        true, false, true, false, 'array');
                } elseif ($name_format == 'email') {
                    $names
                        = \GRN_Mail_Utility::static_formatAddressString($name,
                        false, false, true, false, 'array');
                } else {
                    $names
                        = \GRN_Mail_Utility::static_formatAddressString($name,
                        true, false, true, false, 'array');
                }

                if (is_array($names) && (count($names) > 0)) {
                    $counter = 0;
                    foreach ($names as $temp_array) {
                        $display_name = '';
                        $email = $temp_array['email'];
                        if ($name_format == 'name') {
                            $display_name = $temp_array['name'];
                            if (strlen($display_name) == 0) {
                                $display_name = $email;
                            }
                        } elseif ($name_format == 'email') {
                            $display_name = $email;
                        } else {
                            $name_exists = false;
                            $temp_name = $temp_array['name'];
                            $len = strlen($temp_name);
                            if ($len > 0) {
                                // ニックネームに""を付ける
                                $temp_name
                                    = \GRN_Mail_Utility::static_addNameQuotation($temp_name,
                                    'add');
                                $display_name = $temp_name;
                                $name_exists = true;
                            }

                            $len = strlen($email);
                            if ($len > 0) {
                                if ($name_exists) {
                                    $display_name .= ' ';
                                    // ニックネームがある場合は<>を付ける
                                    $email
                                        = \GRN_Mail_Utility::static_addEmailBracket($email,
                                        'add');
                                }
                                $display_name .= $email;
                            }
                        }
                        if ($counter > 0) {
                            $mail_name .= ', ';
                        }
                        $mail_name .= $display_name;
                        $counter++;
                    }
                }

                $read_ts = $mail_data['read_ts'];
                $b_unread = ( ! is_object($read_ts)
                              || ($read_ts->unix_ts == 0));

                $mail_list_for_view[$mail_id] = [
                    'mid'          => $mail_id,
                    'unread'       => $b_unread,
                    'aid'          => $account_id,
                    'cid'          => $category_id,
                    'name'         => $mail_name,
                    'time'         => $time, // 日時
                    'subject'      => $subject,
                    'data'         => $mail_data['data'],
                    'attach_file'  => $mail_data['attached'],
                    'status_name'  => $mail_data['status_name'],
                    'status_color' => $mail_data['status_color'],
                    'draft'        => $mail_data['draft'], //ダミー 下書きか否か
                    'status_id'    => $mail_data['status_id']
                ];

                if ( ! $mail_data['sent']) {
                    // 受信メール
                    if ($mail_data['confirmation_response']) {
                        // 開封通知
                        $mail_list_for_view[$mail_id]['open'] = '4';    // 開封通知
                    } else {
                        // 受信メール
                        if (is_null($mail_data['confirmation_status'])) {
                            // まだ返信してない
                            $mail_list_for_view[$mail_id]['open'] = '3';
                        }
                        if (($mail_data['confirmation_status'] == 'none')
                            || ($mail_data['confirmation_status'] == 'opened')
                        ) {
                            // 無視した
                            $mail_list_for_view[$mail_id]['open'] = '1';
                        } elseif (strncasecmp($mail_data['confirmation_status'],
                                'sent', 4) == 0
                        ) {
                            // 開封確認返信済み
                            $mail_list_for_view[$mail_id]['open'] = '2';
                        }
                    }
                } else {
                    // 送信メール
                    if ($mail_data['confirmation_request']) {
                        // 開封確認要求
                        $mail_list_for_view[$mail_id]['open'] = '3';
                    }
                }

                if ($mail_data['draft']) {
                    $mail_list_for_view[$mail_id]['type'] = '2';
                } else {
                    $mail_list_for_view[$mail_id]['type'] = $mail_data['sent']
                        ? '1' : '0';
                }

                $size = (int)$mail_data['size'];
                if (($size > 0) && ($size < 1024)) {
                    // 1KB未満の場合は1KBと表示させる
                    $mail_list_for_view[$mail_id]['size'] = 1024;
                } else {
                    $mail_list_for_view[$mail_id]['size'] = $size;
                }

                // 操作した内容（1:返信 2:全員に返信 3:転送）
                switch ($mail_data['action']) {
                    case 'reply':
                        $mail_list_for_view[$mail_id]['action'] = '1';
                        break;
                    case 'reply-all':
                        $mail_list_for_view[$mail_id]['action'] = '2';
                        break;
                    case 'forward':
                        $mail_list_for_view[$mail_id]['action'] = '3';
                        break;
                }
            }
        }

        return $mail_list_for_view;
    }
}
