<?php

use grn\fts\Application as FtsApplication;
use grn\fts\mail\IndexService;
use grn\fts\mail\MailUtil as FtsMailUtil;
use grn\mail\dao\GrnMailFileInfoDAO;
use grn\mail\dao\GrnMailReceivedFileRelationDAO;

require_once('fw/mail_pop3_uidstorage.csp');
require_once('grn/server_file.csp');
require_once('grn/inspection.csp');
require_once('mail/error_code.csp');
require_once('mail/resources.csp');
require_once('grn/application.csp');

//////////////////////////////////////////////////////////////////////////////

/**
 * メールデータ永続化クラス
 *
 * @author  IKEDA, Atsushi 2004/12
 * @version 1.0
 * @package grn.mail
 */
class GRN_Mail_Message extends GRN_InspectionBaseEx
{
    function __construct(& $row)
    {
        parent::__construct($row, GRN_MAIL_MODULE_ID);
    }

    var $_app_id = 'mail';

    /**
     * プロパティ
     */
    var $col_user
        = [
            'type'                  => 'weak_relation',
            'to'                    => 'CB_User',
            'no_foreign_key_create' => true
        ];                    // ユーザー


    var $col_subject
        = [
            'type'   => 'char',
            'length' => 65535
        ];               // 標題
    var $col_data
        = [
            'type'   => 'char',
            'length' => 1048575,
            'lazy'   => true
        ];               // 本文
    var $col_html_data
        = [
            'type'   => 'char',
            'length' => 1048575,
            'lazy'   => true
        ];               // HTML本文

    var $col_signature
        = [
            'type' => 'weak_relation',
            'to'   => GRN_MAIL_SIGNATURE_TABLE
        ];     // 署名データ
    var $col_sign_data
        = [
            'type'   => 'char',
            'length' => 65535
        ];               // 署名本文（書きかけメールで使用）

    var $col_date
        = [
            'type'   => 'char',
            'length' => 65535
        ];               // DATEヘッダそのまま
    var $col_from = ['type' => 'char', 'length' => 65535];               // 差出人
    var $col_to = ['type' => 'char', 'length' => 65535];               // 宛先
    var $col_cc = ['type' => 'char', 'length' => 65535];               // Cc
    var $col_bcc = ['type' => 'char', 'length' => 65535];               // Bcc

    var $col_content_type
        = [
            'type'   => 'char',
            'length' => 255
        ];                 // Content-Type
    var $col_message_id
        = [
            'type'   => 'char',
            'length' => 255
        ];                 // Message-Id
    var $col_origin_mail
        = [
            'type'   => 'weak_relation',
            'to'     => GRN_MAIL_MESSAGE_TABLE,
            'suffix' => true
        ];       // 引用、転送元のメール
    var $col_reply_to
        = [
            'type'   => 'char',
            'length' => 65535
        ];               // Reply-To
    var $col_in_reply_to
        = [
            'type'   => 'char',
            'length' => 65535
        ];               // In-Reply-To
    var $col_references
        = [
            'type'   => 'char',
            'length' => 65535
        ];               // References（シリアライズ文字列）

    var $col_timestamp
        = [
            'type'    => 'timestamp',
            'notnull' => true
        ];                        // 受信日時
    var $col_read_ts
        = [
            'type'    => 'timestamp',
            'notnull' => true
        ];                        // 閲覧日時(未読のときは0をセットする)
    var $col_send_ts
        = [
            'type'    => 'timestamp',
            'notnull' => true
        ];                        // 送信日時
    var $col_dtime = ['type' => 'timestamp'];                                         // 削除日時
    var $col_size = ['type' => 'int'];                                               // メールサイズ

    var $col_sent
        = [
            'type'    => 'int',
            'notnull' => true
        ];                              // 送信フラグ
    var $col_unsent = ['type' => 'int'];                                               // 送信待ちフラグ
    var $col_draft = ['type' => 'int'];                                               // 書きかけフラグ
    var $col_attached = ['type' => 'int'];                                               // 添付ファイルフラグ
    var $col_action
        = [
            'type'   => 'char',
            'length' => 32
        ];                                // 操作した内容（'reply-all' / 'reply' / 'forward'）

    // 開封確認
    var $col_confirmation_request = ['type' => 'int'];                   // 開封確認要求フラグ
    var $col_confirmation_response = ['type' => 'int'];                   // 開封通知フラグ（開封確認の返答メール）
    var $col_confirmation_status
        = [
            'type'   => 'char',
            'length' => 32
        ];    // 開封確認状態
    // 受信したがなにもしていない   'none'
    // 受信したが無視した           'ignored'
    // 受信して自動返信した         'sent-auto'
    // 受信して手動返信した         'sent-manual'
    // 受信して開封したが返信していない 'opened'
    var $col_confirmation_org_message_id
        = [
            'type'   => 'char',
            'length' => 255
        ];   // 開封通知メールの Original-Message-Id
    var $col_confirmation_final_recipient
        = [
            'type'   => 'char',
            'length' => 65535
        ]; // 開封通知メールの Final-Recipient
    var $col_confirmation_to
        = [
            'type'   => 'char',
            'length' => 65535
        ];   // Disposition-Notification-To

    // ソート用短縮文字列
    var $col_abstract_subject
        = [
            'type'   => 'char',
            'length' => GRN_MAIL_ABSTRACT_MAX_LENGTH
        ];      // 標題
    var $col_abstract_data
        = [
            'type'   => 'char',
            'length' => GRN_MAIL_ABSTRACT_MAX_LENGTH
        ];      // 本文
    var $col_abstract_from
        = [
            'type'   => 'char',
            'length' => GRN_MAIL_ABSTRACT_MAX_LENGTH
        ];      // 差出人
    var $col_abstract_from_name
        = [
            'type'   => 'char',
            'length' => GRN_MAIL_ABSTRACT_MAX_LENGTH
        ];      // 差出人(Name)
    var $col_abstract_from_email
        = [
            'type'   => 'char',
            'length' => GRN_MAIL_ABSTRACT_MAX_LENGTH
        ];      // 差出人(E-Mail)
    var $col_abstract_to
        = [
            'type'   => 'char',
            'length' => GRN_MAIL_ABSTRACT_MAX_LENGTH
        ];      // 宛先
    var $col_abstract_to_name
        = [
            'type'   => 'char',
            'length' => GRN_MAIL_ABSTRACT_MAX_LENGTH
        ];      // 宛先(Name)
    var $col_abstract_to_email
        = [
            'type'   => 'char',
            'length' => GRN_MAIL_ABSTRACT_MAX_LENGTH
        ];      // 宛先(E-Mail)

    var $col_status
        = [
            'type'    => 'char',
            'length'  => 64,
            'notnull' => true
        ];

    // リレーション
    var $col_folder
        = [
            'type' => 'weak_relation',
            'to'   => GRN_MAIL_FOLDER_TABLE
        ];        // フォルダ

    // 拡張用

    // reserved columns
    var $col_reserve_text1 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text2 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text3 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_int1
        = [
            'type' => 'int',
            'lazy' => true
        ]; // decode_tnef_flag
    var $col_reserve_int2 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int3 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_blob1 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob2 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob3 = ['type' => 'blob', 'lazy' => true];

    /**
     * インデックス
     */
    var $idx_folder_ts_n = ['cols' => ['folder', 'timestamp', null]];
    var $idx_folder_rts_n = ['cols' => ['folder', 'read_ts', null]];
    var $idx_folder_sts_n = ['cols' => ['folder', 'send_ts', null]];
    var $idx_folder_dts_n = ['cols' => ['folder', 'dtime', null]];
    var $idx_folder_subject_n
        = [
            'cols' => [
                'folder',
                'abstract_subject',
                null
            ]
        ];
    var $idx_folder_data_n = ['cols' => ['folder', 'abstract_data', null]];
    var $idx_folder_from_n = ['cols' => ['folder', 'abstract_from', null]];
    var $idx_folder_from_name_n
        = [
            'cols' => [
                'folder',
                'abstract_from_name',
                null
            ]
        ];
    var $idx_folder_from_email_n
        = [
            'cols' => [
                'folder',
                'abstract_from_email',
                null
            ]
        ];
    var $idx_folder_to_n = ['cols' => ['folder', 'abstract_to', null]];
    var $idx_folder_to_name_n
        = [
            'cols' => [
                'folder',
                'abstract_to_name',
                null
            ]
        ];
    var $idx_folder_to_email_n
        = [
            'cols' => [
                'folder',
                'abstract_to_email',
                null
            ]
        ];
    var $idx_user_status_ts = ['cols' => ['user', 'status', 'timestamp']];
    var $idx_user_messageid = ['cols' => ['user', 'message_id']];


    var $idx_folder_status = ['cols' => ['folder', 'status']];
    var $idx_sent_ts = ['cols' => ['send_ts']];

    var $_message = null;               // CB_MailLazyMessageのキャッシュ
    var $_source_data = null;           // ソースデータのキャッシュ

    var $_articleTriggers = null;
    var $_fileTriggers = null;
    private $_indexService = null;

    /**
     * 初期化
     *
     * @param CB_User        $user       ユーザーオブジェクト
     * @param array          $properties プロパティ配列
     * @param bool           $is_temp
     * @param CB_MailMessage $msg
     *
     * @return  boolean 成否
     */
    function initialize($user, & $properties, $is_temp = false, $msg = null)
    {
        assert('is_object( $user )');
        assert('is_array( $properties )');

        if ( ! is_object($user)) {
            // 必須項目エラー
            cb_throw_error(E_GRN_MISSING_MANDATORY);
        }

        $this->set('user', $user);

        if (isset($properties['subject'])) {
            $this->set('subject', $properties['subject']);
        }
        if (isset($properties['data'])) {
            $this->set('data', $properties['data']);
        }
        if (isset($properties['html_data'])) {
            $this->set('html_data', $properties['html_data']);
        }
        if (isset($properties['signature'])) {
            $this->set('signature', $properties['signature']);
        }
        if (isset($properties['sign_data'])) {
            $this->set('sign_data', $properties['sign_data']);
        }

        if (isset($properties['from'])) {
            $this->set('from', $properties['from']);
        }
        if (isset($properties['date'])) {
            $this->set('date', $properties['date']);
        }
        if (isset($properties['to'])) {
            $this->set('to', $properties['to']);
        }
        if (isset($properties['cc'])) {
            $this->set('cc', $properties['cc']);
        }
        if (isset($properties['bcc'])) {
            $this->set('bcc', $properties['bcc']);
        }
        if (isset($properties['content_type'])) {
            $this->set('content_type', $properties['content_type']);
        }
        if (isset($properties['message_id'])) {
            $this->set('message_id', $properties['message_id']);
        }
        if (isset($properties['reply_to'])) {
            $this->set('reply_to', $properties['reply_to']);
        }
        if (isset($properties['in_reply_to'])) {
            $this->set('in_reply_to', $properties['in_reply_to']);
        }
        if (isset($properties['references'])) {
            $this->set('references', $properties['references']);
        }
        if (isset($properties['timestamp'])) {
            $this->set('timestamp', $properties['timestamp']);
        }
        if (isset($properties['send_ts'])) {
            $this->set('send_ts', $properties['send_ts']);
        }
        if (isset($properties['read_ts'])) {
            $this->set('read_ts', $properties['read_ts']);
        }
        if (isset($properties['size'])) {
            $this->set('size', $properties['size']);
        }
        if (isset($properties['sent'])) {
            $this->set('sent', $properties['sent']);
        }
        if (isset($properties['unsent'])) {
            $this->set('unsent', $properties['unsent']);
        }
        $draft = false;
        if (isset($properties['draft']) && $properties['draft'] == 1) {
            $draft = true;
            $this->set('draft', $properties['draft']);
        }
        if (isset($properties['action'])) {
            $this->set('action', $properties['action']);
        }
        if (isset($properties['confirmation_request'])) {
            $this->set('confirmation_request',
                $properties['confirmation_request']);
        }
        if (isset($properties['confirmation_status'])) {
            $this->set('confirmation_status',
                $properties['confirmation_status']);
        }
        if (isset($properties['confirmation_to'])) {
            $this->set('confirmation_to', $properties['confirmation_to']);
        }

        if (isset($properties['account'])) {
            $this->set('account', $properties['account']);
        }

        if (isset($properties['decode_tnef_flag'])) {
            $this->set('reserve_int1', 1);
        }

        if ( ! $is_temp && ! $draft) {
            $this->set('creator', $user);
            $this->set('creator_name', $user->get('display_name'));
            $this->set('creator_foreign_key', $user->get('foreign_key'));
            $this->set('modifier', $user);
            $this->set('modifier_name', $user->get('display_name'));
            $this->set('modifier_foreign_key', $user->get('foreign_key'));

            $ts = new CB_TimeStamp();
            $ts->unix_ts = time();
            $this->set('ctime', $ts);
            $this->set('mtime', $ts);

            require_once('mail/inspection.csp');
            $inspection = GRN_Mail_Inspection::getInstance();
            // write log send and receive mail
            $subject = $this->get('subject');
            $to = $this->get('to');
            $cc = $this->get('cc');
            $bcc = $this->get('bcc');
            $from = $this->get('from');
            $data = '';

            if ($this->get('sent') == 1) {
                $this->set('action', null);

                $action_name = 'send';
                $data = $this->get('data');
                $rowset = $this->getFileBodyRowSet();
                $log_properties = [
                    'mid'     => $this->getOID(),
                    // INSERT query is sent at this time.
                    'subject' => $subject,
                    'data'    => $data
                ];
                $i = 1;
                while ( ! is_null($row = $rowset->iterate())) {
                    $file_name = $row->get('name');
                    $log_properties['filename_' . $i] = $file_name;
                    $i++;
                }
                $log_properties['to'] = $to;
                $log_properties['cc'] = $cc;
                $log_properties['bcc'] = $bcc;

                $logger = $inspection->_logger;
                $log_properties = $logger->createMessage($action_name, 'mail',
                    $log_properties, ['to', 'cc', 'bcc']);
            } else {
                $action_name = 'receive';
                $body = $html_body = null;
                $main_part = $msg->getMainPart();
                if ($main_part instanceof CB_MailMultiPart) {
                    /** @var CB_MailMultiPart $main_part */
                    // HTML,テキストが混在したメール
                    $parts =& $main_part->getMailParts();
                    for ($i = 0; $i < count($parts); $i++) {
                        GRN_Mail_Message::static_getPartContent($parts[$i],
                            $body, $html_body);
                    }
                    $data = $body;
                } elseif ($main_part instanceof CB_MailSinglePart) {
                    /** @var CB_MailSinglePart $main_part */
                    $data = $main_part->getContent();
                }
                $log_properties = [
                    'mid'     => $this->getOID(),
                    // INSERT query is sent at this time.
                    'subject' => $subject,
                    'from'    => $from,
                    'data'    => $data
                ];

                $attachments = $msg->getAttachedParts(true);

                foreach ($attachments as $part_no => $attachment) {
                    $log_properties['filename_' . ($part_no + 1)]
                        = $attachment->getFilename();
                }
            }

            if ($inspection->isEnabled()) {
                $inspection->writeInspectionLog($action_name, 'mail',
                    $log_properties);
            }
        } else {
            // Temporary or draft or imported mail

            $ts = new CB_TimeStamp();
            $ts->unix_ts = time();
            $ctime = $this->get('ctime');
            if ($ctime === false || is_null($ctime) || $ctime->unix_ts == 0) {
                $this->set('ctime', $ts);
            }
            $this->set('mtime', $ts);
            $this->registerNow(); // INSERT query is sent at this time.
        }

        return true;
    }

    /**
     * invoke article hooks on create, update or delete event
     *
     * @access public
     *
     * @param string $action action
     */
    function runArticleHook($action)
    {
        if (is_null($this->_articleTriggers)) {
            $loader = new CB_PluginLoader('grn.mail.article');
            $this->_articleTriggers = $loader->loadHooks();
        }

        foreach ($this->_articleTriggers as $hook) {
            call_user_func($hook, $this, $action);
        }
    }

    /**
     * invoke file hooks on create, update or delete event
     *
     * @access public
     *
     * @param string $action action
     */
    function runFileHook($action)
    {
        if (is_null($this->_fileTriggers)) {
            $loader = new CB_PluginLoader('grn.mail.file');
            $this->_fileTriggers = $loader->loadHooks();
        }

        foreach ($this->_fileTriggers as $hook) {
            call_user_func($hook, $this, $action);
        }
    }

    /**
     * 更新
     *
     * @param   array $properties プロパティ配列
     *
     * @return  boolean 成否
     */
    function updateProperties(& $properties)
    {
        assert('is_array( $properties )');

        foreach (array_keys($properties) as $key) {
            $this->set($key, $properties[$key]);
        }

        // HTMLエディタを使用しない場合は、前回の内容をクリアする
        if ( ! array_key_exists('html_data', $properties)) {
            $this->set('html_data', null);
        }

        $ts = new CB_TimeStamp();
        $ts->unix_ts = time();
        $this->set('mtime', $ts);

        return true;
    }

    function set($prop_name, $prop_value)
    {
        $prop_name = strtolower($prop_name);
        if ($prop_name == 'subject') {
            require_once('fw/string_util.csp');
            $prop_value = cb_trim($prop_value);
        }

        // 短縮データ
        if (($prop_name == 'subject') || ($prop_name == 'data')
            || ($prop_name == 'from')
            || ($prop_name == 'to')
        ) {
            // 名前とE-Mailで分解
            if (($prop_name == 'from') || ($prop_name == 'to')) {
                require_once('mail/utility.csp');

                $full = '';
                $name = '';
                $email = '';
                $str_array
                    = GRN_Mail_Utility::static_formatAddressString($prop_value,
                    true, true, true, false, 'array');
                if (is_array($str_array) && (count($str_array) > 0)) {
                    foreach (array_keys($str_array) as $key) {
                        $temp_array =& $str_array[$key];

                        if (strlen($full) > 0) {
                            $full .= ', ';
                        }

                        $name_exists = false;
                        if (strlen($temp_array['name']) > 0) {
                            //$full .= '"' . $temp_array['name'] . '"';
                            $full .= $temp_array['name'];
                            $name_exists = true;
                        }

                        if (strlen($temp_array['email']) > 0) {
                            if ($name_exists) {
                                $full .= ' '
                                         . GRN_Mail_Utility::static_addEmailBracket($temp_array['email'],
                                        'add');
                            } else {
                                $full .= $temp_array['email'];
                            }
                        }

                        if (strlen($name) > 0) {
                            $name .= ', ';
                        }

                        if (strlen($temp_array['name']) > 0) {
                            $name .= $temp_array['name'];
                        } else {
                            $name .= $temp_array['email'];
                        }

                        if (strlen($email) > 0) {
                            $email .= ', ';
                        }
                        $email .= $temp_array['email'];

                    }
                }

                // Abstract
                $abstract_name = 'abstract_' . $prop_name;
                $abstract_value = mb_strimwidth($full, 0,
                    GRN_MAIL_ABSTRACT_MAX_LENGTH);
                parent::set($abstract_name, $abstract_value);

                // Abstract Name
                $abstract_name = 'abstract_' . $prop_name . '_name';
                $abstract_value = mb_strimwidth($name, 0,
                    GRN_MAIL_ABSTRACT_MAX_LENGTH);
                parent::set($abstract_name, $abstract_value);

                // Abstract E-Mail
                $abstract_name = 'abstract_' . $prop_name . '_email';
                $abstract_value = mb_strimwidth($email, 0,
                    GRN_MAIL_ABSTRACT_MAX_LENGTH);
                parent::set($abstract_name, $abstract_value);

            } else {
                $abstract_value = is_string($prop_value)
                    ? mb_strimwidth($prop_value, 0,
                        GRN_MAIL_ABSTRACT_MAX_LENGTH) : '';
                $abstract_name = 'abstract_' . $prop_name;
                parent::set($abstract_name, $abstract_value);
            }
        } elseif ($prop_name == 'message_id') {
            $prop_value
                = mb_strimwidth(GRN_Mail_Utility::static_addEmailBracket($prop_value,
                'remove'), 0, 255);
        } elseif ($prop_name == 'sent') {
            if (is_null($prop_value)
                || (($prop_value !== 1)
                    && ($prop_value !== '1')
                    && ($prop_value !== true))
            ) {
                $prop_value = 0;
            } else {
                $prop_value = 1;
            }
        } elseif (($prop_name == 'timestamp') || ($prop_name == 'send_ts')) {
            if (is_null($prop_value)) {
                // null禁止なので、現在時刻をセット
                $prop_value = new CB_TimeStamp;
                $prop_value->unix_ts = time();
            }
        } elseif ($prop_name == 'read_ts') {
            if (is_null($prop_value)) {
                // null禁止なので、0をセット
                $prop_value = new CB_TimeStamp;
                $prop_value->unix_ts = 0;
            }
        } elseif ($prop_name == 'content_type') {
            if (is_string($prop_value)) {
                $prop_value = mb_strimwidth($prop_value, 0, 255);
            }
        }

        return parent::set($prop_name, $prop_value);
    }

    function delete($user_id = null)
    {

        $account_id = $this->getAccountId();
        $subject = $this->get('subject');
        $to = $this->get('to');
        $body = $html_body = null;
        $properties = [
            'mid'        => $this->getOID(),
            'account_id' => $account_id,
            'subject'    => $subject,
            'to'         => $to
        ];


        require_once('mail/inspection.csp');
        $inspection = GRN_Mail_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            $inspection->writeInspectionLog('delete', 'mail', $properties);
        }

        // 受信メールの全てのソースファイルを削除
        $this->deleteSourceFileBodys($user_id);

        // 送信メールの全ての添付ファイルを削除
        $this->deleteFileBodys($user_id);

        if (defined('ON_FOREST')) {
            $relationDao = new GrnMailReceivedFileRelationDAO();
            $fileInfoDao = new GrnMailFileInfoDAO();
            global $G_container_base;
            if (is_null($user_id)) {
                $user_id = cb_get_login_user()->getOID();
            }
            /** @var GRN_Uum $uum */
            $tableName = 'tab_' . grn_mail_get_personal_tablename($user_id,
                    GRN_MAIL_FILEINFO_TABLE);
            $fileIds = $fileInfoDao->getFileIdsByMailId($this->getOID(),
                $tableName);
            /** @var CB_BlobFileManager $fm */
            $fm = $G_container_base->getInstance('file_manager');
            foreach ($fileIds as $fileId) {
                $fm->addToRemoveByBlobId($relationDao->getBlobId($fileId,
                    $user_id));
                $relationDao->deleteRecord($fileId, $user_id);
            }
        }

        return parent::delete();
    }

    // 受信メールの全てのソースファイルを削除
    function deleteSourceFileBodys($user_id = null)
    {
        // メールソースファイルオブジェクトを削除
        $size = 0;
        if ( ! is_null($user_id)) {
            $rowset = $this->getSourceFileRowSet($user_id);
        } else {
            $rowset = $this->getSourceFileRowSet();
        }
        if ( ! is_null($rowset)) {
            while ( ! is_null($row = $rowset->iterate())) {
                $size += intval($row->get('size'));
                if ( ! $row->delete()) {
                    cb_throw_error(E_GRN_MAIL_FAILED_TO_DELETE_SOURCE_FILE_DATA);
                }
            }
        }

        return $size;
    }


    // 送信メールの全ての添付ファイルを削除
    function deleteFileBodys($user_id = null)
    {
        // ファイルオブジェクトを削除
        $size = 0;
        if ( ! is_null($user_id)) {
            $rowset = $this->getFileBodyRowSet($user_id);
        } else {
            $rowset = $this->getFileBodyRowSet();
        }
        if ( ! is_null($rowset)) {
            while ( ! is_null($row = $rowset->iterate())) {
                $size += intval($row->get('size'));
                if ( ! $row->delete()) {
                    cb_throw_error(E_GRN_MAIL_FAILED_TO_DELETE_FILE_DATA);
                }
            }
        }

        return $size;
    }

    /**
     * 送信メールの全ての添付ファイルの実体を削除し、メールサイズプロパティを更新する（アカウントデータは更新しない）
     *
     * @return  int     削除したファイルサイズの合計
     **/
    function deleteFileBodyFiles()
    {
        // ファイルの実体を削除
        $deleted_file_size = 0;
        $rowset = $this->getFileBodyRowSet();
        if ( ! is_null($rowset)) {
            /** @var GRN_Mail_FileBody $row */
            while ( ! is_null($row = $rowset->iterate())) {
                $deleted_file_size += intval($row->get('size'));
                $row->deleteFile();
            }
        }

        $size = $this->get('size') - $deleted_file_size;
        if ($size < 0) {
            $size = 0;
        }

        $this->set('size', $size);

        return $deleted_file_size;
    }

    /**
     * @return CB_MailMessage|null
     */
    function getMessage()
    {
        if (is_null($this->_message)) {
            if ($this->sourceDataExists()) {
                $source_data =& $this->getSourceData(true);
                if ( ! is_null($source_data)) {
                    require_once('fw/mail_message.csp');
                    $this->_message = CB_MailParser::static_parse($source_data);
                }
            }
        }

        return $this->_message;
    }

    /**
     * 指定されたメールデータオブジェクトのプロパティからメール情報を取得
     * $b_detail がFALSEの場合はメールソースの解析は行われない
     *
     * @param boolean $b_detail 詳細情報取得フラグ
     * @param boolean $b_files  添付ファイル情報取得フラグ
     * @param string  $body_encoding
     * @param string  $header_encoding
     * @param boolean $b_source ソース情報取得フラグ
     * @param boolean $b_delete_multi_files
     *
     * @return array
     */
    function getDataProperties(
        $b_detail,
        $b_files = false,
        $body_encoding = '',
        $header_encoding = '',
        $b_source = true,
        $b_delete_multi_files = false
    ) {
        $data = [
            'id'                   => $this->getOID(),
            'timestamp'            => $this->get('timestamp'),
            'read_ts'              => $this->get('read_ts'),
            'send_ts'              => $this->get('send_ts'),
            'ctime'                => $this->get('ctime'),
            'dtime'                => $this->get('dtime'),
            'mtime'                => $this->get('mtime'),
            'size'                 => $this->get('size'),
            'sent'                 => $this->get('sent'),
            'unsent'               => $this->get('unsent'),
            'draft'                => $this->get('draft'),
            'attached'             => $this->get('attached'),
            'content_type'         => $this->get('content_type'),
            'charset'              => $this->getCharSet(),
            'action'               => $this->get('action'),
            'confirmation_request' => $this->get('confirmation_request'),
            'confirmation_status'  => $this->get('confirmation_status'),
            'status'               => $this->get('status'),
        ];

        if ($data['sent'] == 1 && $data['draft'] != 1) {
            $data['action'] = null;
        }

        if ($b_detail) {
            // 詳細データ
            $body = $this->get('data');
            if (is_null($body)) {
                // NULLの場合はまだメールソースから本文を抜き出していないのでメールソースをロードして解析
                $body = $html_body = $confirm_response = null;
                $msg = $this->getMessage();
                if ( ! is_null($msg)) {
                    /** @var CB_MailSinglePart[] $file_parts */
                    self::static_fetchMailBody($msg, $body, $html_body);
                    $file_parts = $this->getAttachedPartsFromSource();
                    if ($msg->isDispositionNotification()) {
                        $confirm_response
                            = self::getDispositionNotification($file_parts);
                    }

                    if (count($file_parts) > 0) {
                        // ファイル情報テーブル
                        global $G_container_base;
                        /** @var GRN_Uum $uum */
                        $uum = $G_container_base->getInstance('uum');
                        $login = $uum->getLoginUser();
                        $suffix
                            = grn_mail_get_personal_suffix($login->getOID());
                        $file_info_table
                            = cb_class2table(GRN_MAIL_FILEINFO_TABLE,
                            $suffix);
                        foreach ($file_parts as $part_no => $part) {
                            if ($part->getIsBody()) {
                                continue;
                            }

                            $file_info_row = $file_info_table->newRow();
                            if ( ! is_object($file_info_row)) {
                                // データ追加失敗
                                cb_throw_error(E_GRN_MAIL_FAILED_TO_ADD_FILE_DATA);
                            }

                            $file_info_row->set('user', $this->get('user'));
                            $file_info_row->set('mail', $this);
                            $file_info_row->set('part_no', $part_no);
                            $file_info_row->set('name', $part->getFilename());
                            $file_info_row->set('mime',
                                $part->getContentType());
                            $file_info_row->registerNow();

                            if (defined('ON_FOREST')) {
                                $blob_id = null;
                                if ( ! $b_delete_multi_files) {
                                    $fm = cb_lwc_file_manager();
                                    $content = ($part->getContent())
                                        ?: ''; // ファイル取得に失敗したら、空文字扱いとする
                                    $blob_id = $fm->addToPut($part->getFilename(),
                                        $content);
                                }

                                $dao = new GrnMailReceivedFileRelationDAO();
                                $dao->setBlobIdRelation($blob_id,
                                    $file_info_row->getOID(), $login->getOID());
                            } elseif (FtsApplication::isAvailable() && ! $b_delete_multi_files) {
                                $dir = FtsMailUtil::getTmpDirectoryPath();
                                $content = $part->getContent() ?: '';
                                $tmp_name = FtsMailUtil::makeTmpFile($dir,
                                    $content);
                                if ($tmp_name !== false) {
                                    $searchService = $this->_indexService
                                        ?: new IndexService();
                                    $searchService->createReceiveFileIndex($file_info_row,
                                        $tmp_name);
                                }
                            }
                        }
                    }

                    // 開封通知メール
                    if (is_array($confirm_response)) {
                        $this->set('confirmation_response', true);
                        if (isset($confirm_response['org_message_id'])) {
                            $this->set('confirmation_org_message_id',
                                $confirm_response['org_message_id']);
                        }

                        if (isset($confirm_response['final_recipient'])) {
                            $this->set('confirmation_final_recipient',
                                $confirm_response['final_recipient']);
                        }
                    }

                    // DBにも保存
                    if ( ! is_null($body)) {
                        $this->set('data', $body);
                    }
                    if ( ! is_null($html_body)) {
                        $this->set('html_data', $html_body);
                    }

                    $this->updateNow();
                }

                $data['data'] = $body;
                $data['html_data'] = $html_body;

                $this->runArticleHook('create');

                //Full Text Search
                if (FtsApplication::isAvailable()) {
                    $searchService = $this->_indexService ?: new IndexService();
                    $searchService->createMessageIndex($this);
                    if (defined('ON_FOREST') && ! $b_delete_multi_files) {
                        $fileInfoRowSet = $this->getFileInfoRowSet();
                        $dao = new GrnMailReceivedFileRelationDAO();
                        /** @var GRN_Mail_FileInfo $fileInfoRow */
                        while ($fileInfoRow = $fileInfoRowSet->iterate()) {
                            $searchService->createReceiveFileIndex($fileInfoRow,
                                $dao->getBlobId($fileInfoRow->getOID(),
                                    $fileInfoRow->get('user')->getOID()));
                        }
                    }
                }
            } else {
                if (strlen($body_encoding) > 0) {
                    // 強制文字コード変換
                    $msg = $this->getMessage();
                    $msg->setForceEncoding($body_encoding);
                    $body = $html_body = null;
                    self::static_fetchMailBody($msg, $body, $html_body);
                    $data['data'] = $body;
                    $data['html_data'] = $html_body;
                } else {
                    $data['data'] = $this->get('data');
                    $data['html_data'] = $this->get('html_data');
                }
            }
            $sign_id = $this->getId('signature');
            $data['sign_id'] = ($sign_id === false || is_null($sign_id))
                ? '-1' : $sign_id;
            $data['sign_data'] = $this->get('sign_data');

            if (strlen($header_encoding) > 0) {
                // 強制文字コード変換
                $msg = $this->getMessage();
                $msg->setForceEncoding($header_encoding);
                $main_part =& $msg->getMainPart();
                $data['subject'] = $msg->getSubject();
                $data['from'] = $msg->getFrom();
                $data['to'] = $msg->getTo();
                $data['cc'] = $msg->getCc();
            } else {
                $data['subject'] = $this->get('subject');
                $data['from'] = $this->get('from');
                $data['to'] = $this->get('to');
                $data['cc'] = $this->get('cc');
            }

            $data['date'] = $this->get('date');
            $data['bcc'] = $this->get('bcc');

            $data['message_id'] = $this->get('message_id');
            $data['reply_to'] = $this->get('reply_to');
            $data['in_reply_to'] = $this->get('in_reply_to');
            $data['references'] = $this->get('references');

            // 開封メール情報
            $data['confirmation_to'] = $this->get('confirmation_to');
            $data['confirmation_response']
                = $this->get('confirmation_response');
            $data['confirmation_org_message_id']
                = $this->get('confirmation_org_message_id');
            $data['confirmation_final_recipient']
                = $this->get('confirmation_final_recipient');

            if ($b_source) {
                // ソースファイル情報
                $source_row = $this->getSourceFileRow();
                if (is_object($source_row) && $source_row->fileExists()) {
                    $data['source_flag'] = $source_row->fileExists();
                    $data['source_id'] = $source_row->getOID();
                } else {
                    $data['source_flag'] = false;
                    $data['source_id'] = null;
                }
            }
        } else {
            // 簡易データ
            $data['subject'] = $this->get('abstract_subject');
            $data['data'] = $this->get('abstract_data');
            $data['from'] = $this->get('abstract_from');
            $data['from_name'] = $this->get('abstract_from_name');
            $data['from_email'] = $this->get('abstract_from_email');
            $data['to'] = $this->get('abstract_to');
            $data['to_name'] = $this->get('abstract_to_name');
            $data['to_email'] = $this->get('abstract_to_email');
            $data['confirmation_response']
                = $this->get('confirmation_response');
        }

        $user_id = $this->getId('user');
        $data['user_id'] = ($user_id === false) ? null : $user_id;
        $folder_id = $this->getId('folder');
        $data['folder_id'] = ($folder_id === false) ? null : $folder_id;
        $data['account_id'] = $this->getAccountId();
        $origin_mid = $this->getId('origin_mail');
        $data['origin_mid'] = ($origin_mid === false) ? null : $origin_mid;

        if ($b_files) {
            // ファイル情報
            $data['files'] = [];
            $file_rowset = $this->getFileInfoRowSet();
            while ( ! is_null($file_row = $file_rowset->iterate())) {
                $file_id = $file_row->getOID();
                $data['files'] = [
                    'id'      => $file_id,
                    'part_no' => $file_row->get('part_no'),
                    'name'    => $file_row->get('name'),
                    'mime'    => $file_row->get('mime')
                ];
            }
        }

        return $data;
    }

    /**
     * content-typeからcharsetを取得する（指定されていない場合は''）
     *
     * @return string
     */
    function getCharSet()
    {
        $charset = '';
        $content_type = $this->get('content_type');
        if (($pos = strpos($content_type, ';')) !== false) {
            require_once('fw/string_util.csp');
            $content_type = substr($content_type, $pos);
            $content_type = cb_trim($content_type);

            if (($pos = strpos($content_type, 'charset')) !== false) {
                $content_type = substr($content_type, $pos + 7);
                $content_type = cb_trim($content_type);

                $len = strlen($content_type);
                if (($len > 0) && ($content_type[0] == '=')) {
                    $content_type = substr($content_type, 1);
                    $content_type = cb_trim($content_type);
                    $len = strlen($content_type);
                    if ($len > 0) {
                        if ($content_type[0] == '"') {
                            $content_type = substr($content_type, 1);
                            $len--;
                        }

                        if ($len > 0) {
                            if ($content_type[$len - 1] == '"') {
                                $content_type = substr($content_type, 0,
                                    $len - 1);
                                $len--;
                            }
                        }
                        if ($len > 0) {
                            if (($pos = strpos($content_type, ';')) !== false) {
                                $content_type = substr($content_type, 0, $pos);
                                $content_type = cb_trim($content_type);
                                $len = strlen($content_type);
                            }
                        }

                        if ($len > 0) {
                            $charset = $content_type;
                        }
                    }
                }
            }
        }

        return strtoupper($charset);
    }

    /**
     * アカウントデータオブジェクトを取得
     *
     * @return GRN_Mail_Account
     */
    function getAccountRow()
    {
        $folder = $this->get('folder');
        if ( ! is_object($folder)) {
            $___ret = null;

            return $___ret;
        }

        $account = $folder->get('account');
        if ( ! is_object($account)) {
            $___ret = null;

            return $___ret;
        }

        return $account;
    }

    /**
     * アカウントデータIDを取得
     *
     * @return false|int
     */
    function getAccountId()
    {
        $folder = $this->get('folder');
        if ( ! is_object($folder)) {
            return null;
        }

        $account_id = $folder->getId('account');
        if ($account_id === false) {
            return null;
        }

        return $account_id;
    }

    /**
     * @param CB_MailMultiPart|CB_MailSinglePart $part
     * @param                                    $body
     * @param                                    $html_body
     * @param string                             $encoding
     */
    public static function static_getPartContent(
        $part,
        & $body,
        & $html_body,
        $encoding = '',
        & $bodytext = ""
    ) {
        if ( ! is_object($part)) {
            return;
        }

        if ($part instanceof CB_MailMultiPart) {
            $parts =& $part->getMailParts();
            for ($i = 0; $i < count($parts); $i++) {
                GRN_Mail_Message::static_getPartContent($parts[$i], $body,
                    $html_body, $encoding, $bodytext);
            }
        } else {
            $disposition = $part->getDisposition();
            $content = $part->getContent();
            $content_type = $part->getContentType();
            if ((strcasecmp($content_type, 'text/plain') == 0
                 || strcasecmp($content_type, 'text') == 0)
                && strcasecmp($disposition, 'attachment') !== 0
            ) {
                if ( ! @$part->addedContent) {
                    if (strlen($body) > 0) {
                        $body .= CB_MAIL_CRLF;
                    }
                    $body .= $part->getContent();
                    $part_parent = $part->_parent;
                    if (is_a($part_parent, 'CB_MailMultipart')) {
                        $content_type = $part_parent->_content_type;
                        if (strcasecmp($content_type, 'multipart/mixed') == 0) {
                            $text_part = $part->getContent();
                            if (strlen($text_part) > 0) {
                                require_once('mail/utility.csp');
                                $text_part
                                    = GRN_Mail_Utility::static_formatBodyText($text_part);

                                if (strlen($html_body) > 0) {
                                    $html_body .= '<br />' . $text_part;
                                } else {
                                    if (strlen($bodytext) > 0) {
                                        $bodytext .= '<br />';
                                    }

                                    $bodytext .= $text_part;
                                }
                            }
                        }
                    }
                }
                $part->addedContent = true;
                $part->setIsBody(true);
            } elseif (strcasecmp($content_type, 'text/html') == 0
                      && strcasecmp($disposition, 'attachment') !== 0
            ) {
                $part_parent = $part->_parent;
                $part_parent = $part_parent->_parent;
                if ( ! is_null($part_parent)
                     && is_a($part_parent, 'CB_MailMultipart')
                ) {
                    $content_type = $part_parent->_content_type;
                    if (strcasecmp($content_type, 'multipart/mixed') == 0) {
                        if (strlen($bodytext) > 0) {
                            // HTML
                            if (strlen($html_body) > 0) {
                                $html_body .= '<br />' . $bodytext;
                            } else {
                                $html_body .= $bodytext;
                            }
                            $bodytext = "";
                            $part->setIsBody(true);
                        }
                    }
                }

                // HTML
                $next_html_body = $part->getContent();
                if (strlen($html_body) > 0 && strlen($next_html_body) > 0) {
                    $html_body .= '<br />' . $next_html_body;
                } else {
                    $html_body .= $next_html_body;
                }
                $part->setIsBody(true);
            } elseif (strcasecmp($content_type, 'text/calendar') == 0
                      && strcasecmp($disposition, 'attachment') !== 0
                      && ! stripos($content,
                    'PRODID:-//Google Inc//Google Calendar')
            ) {
                require_once('mail/utility.csp');
                $util = GRN_Mail_Utility::getInstance();
                $body_calendar = $util->partVCalendar($content,
                    $part->getCharset(), $encoding);
                if ($body_calendar != '') {
                    $body = $body_calendar;
                    $html_body = null;
                    $part->setIsBody(true);
                }
            }
        }
    }

    /**
     * Fetch body and html body of the mail message.
     *
     * @param CB_MailMessage $msg       mail message
     * @param string         $body      a variable to assign fetched mail body
     * @param string         $html_body a variable to assign fetched html mail body
     */
    public static function static_fetchMailBody($msg, & $body, & $html_body)
    {
        $body = '';
        $html_body = '';
        $bodytext = '';

        // メインパート
        $main_part = null;
        if (isset($msg->_body) && $msg->_body) {
            $main_part =& $msg->_body;
        } else {
            // メインパート
            $main_part =& $msg->getMainPart();
        }

        if ($main_part) {
            $encoding = $msg->getHeaderValue("content-transfer-encoding");
            GRN_Mail_Message::static_getPartContent($main_part, $body,
                $html_body, $encoding, $bodytext);
        }
    }

    /**
     * Get disposition notifications.
     *
     * @param CB_MailSinglePart[] $file_parts
     *
     * @return array|null
     */
    public static function getDispositionNotification($file_parts)
    {
        foreach ($file_parts as $part) {
            if ($part->getIsBody()) {
                continue;
            }

            $disposition_notification = $part->getDispositionNotification();
            if (is_array($disposition_notification)) {
                if (isset($disposition_notification['final-recipient'])
                    && is_string($disposition_notification['final-recipient'])
                ) {
                    $final_recipient
                        = $disposition_notification['final-recipient'];
                    if (strlen($final_recipient) > 0) {
                        // 開封通知情報
                        $confirm_response = [];
                        $confirm_response['final_recipient'] = $final_recipient;

                        // get manual or auto
                        $confirmation_status = 'sent-manual';   // default
                        if (isset($disposition_notification['disposition-field'])
                            && is_array($disposition_notification['disposition-field'])
                        ) {
                            // action-mode
                            $disposition_field
                                = $disposition_notification['disposition-field'];
                            if (isset($disposition_field['action-mode'])
                                && is_string($disposition_field['action-mode'])
                            ) {
                                $action_mode
                                    = $disposition_field['action-mode'];
                                if (strcasecmp($action_mode, 'manual-action')
                                    == 0
                                ) {
                                    $confirmation_status = 'sent-manual';
                                } elseif (strcasecmp($action_mode,
                                        'automatic-action') == 0
                                ) {
                                    $confirmation_status = 'sent-auto';
                                }
                            } // sending-mode
                            elseif (isset($disposition_field['sending-mode'])
                                    && is_string($disposition_field['sending-mode'])
                            ) {
                                $sending_mode
                                    = $disposition_field['sending-mode'];
                                if (strcasecmp($sending_mode,
                                        'MDN-sent-manually') == 0
                                ) {
                                    $confirmation_status = 'sent-manual';
                                } elseif (strcasecmp($sending_mode,
                                        'MDN-sent-automatically') == 0
                                ) {
                                    $confirmation_status = 'sent-auto';
                                }
                            }
                        }
                        $confirm_response['status'] = $confirmation_status;

                        // original-message-id
                        $original_message_id = null;
                        if (isset($disposition_notification['option-fields'])
                            && is_array($disposition_notification['option-fields'])
                        ) {
                            $option_fields
                                = $disposition_notification['option-fields'];
                            if (isset($option_fields['original-message-id'])
                                && is_string($option_fields['original-message-id'])
                            ) {
                                require_once('mail/utility.csp');
                                $original_message_id
                                    = GRN_Mail_Utility::static_addEmailBracket($option_fields['original-message-id'],
                                    'remove');
                            }
                        }
                        $confirm_response['org_message_id']
                            = $original_message_id;

                        return $confirm_response;
                    }
                }
            }
        }

        return null;
    }

    /**
     * メールソースデータが存在するか
     *
     * @return mixed
     */
    function sourceDataExists()
    {
        $row = $this->getSourceFileRow();
        if ( ! is_object($row)) {
            return false;
        }

        return $row->fileExists();
    }

    /**
     * 添付ファイルが存在するか
     *
     * @return boolean
     */
    function fileExists()
    {
        $rowset = $this->getFileBodyRowSet();
        /** @var GRN_Mail_FileBody $row */
        while ( ! is_null($row = $rowset->iterate())) {
            if ($row->fileExists()) {
                return true;
            }
        }

        return false;
    }

    /**
     * メールソースデータを取得する
     *
     * @param   bool $require_file_path
     *
     * @return  mixed
     */
    function &getSourceData($require_file_path = false)
    {
        if ( ! $require_file_path) {
            if ( ! is_null($this->_source_data)) {
                return $this->_source_data;
            }
        }

        $row = $this->getSourceFileRow();
        if ( ! is_object($row)) {
            $___ret = null;

            return $___ret;
        }

        if ($require_file_path) {
            $ret = $row->getPath();

            return $ret;
        } else {
            $this->_source_data = $row->getFileContents();

            return $this->_source_data;
        }
    }

    /**
     * メールソースファイルボディ一覧ローセットを返す. なければ NULL.
     *
     * @param   null $user_id
     *
     * @return  CB_RowSet|null
     */
    function getSourceFileRowSet($user_id = null)
    {
        if ( ! is_null($user_id)) {
            $suffix = grn_mail_get_personal_suffix($user_id);
        } else {
            global $G_container_base;
            /** @var GRN_Uum $uum */
            $uum = $G_container_base->getInstance('uum');
            $login = $uum->getLoginUser();
            $suffix = grn_mail_get_personal_suffix($login->getOID());
        }
        $rowset = new CB_RowSet(cb_class2table(GRN_MAIL_SOURCEFILEBODY_TABLE,
            $suffix));
        $rowset->addCondition('col_mail=' . $this->getOID());

        return $rowset;
    }

    /**
     * ソースデータオブジェクトをDBから取得
     *
     * @param string|null $user_id
     *
     * @return GRN_Mail_SourceFileBody|null
     */
    function getSourceFileRow($user_id = null)
    {
        $rowset = $this->getSourceFileRowSet($user_id);
        $rowset->limit(0, 1);
        $row = $rowset->iterate();
        $rowset->destroy();
        if ( ! is_object($row)) {
            $___ret = null;

            return $___ret;
        }

        return $row;
    }

    /**
     * ファイルボディ一覧ローセットを返す. なければ NULL.
     *
     * @param   null $user_id
     *
     * @return  CB_RowSet
     */
    function getFileBodyRowSet($user_id = null)
    {
        if ( ! is_null($user_id)) {
            $suffix = grn_mail_get_personal_suffix($user_id);
        } else {
            global $G_container_base;
            /** @var GRN_Uum $uum */
            $uum = $G_container_base->getInstance('uum');
            $login = $uum->getLoginUser();
            $suffix = grn_mail_get_personal_suffix($login->getOID());
        }
        $rowset = new CB_RowSet(cb_class2table(GRN_MAIL_FILEBODY_TABLE,
            $suffix));
        $rowset->addCondition('col_mail=' . $this->getOID());
        $rowset->addOrderColumn(null, false);

        return $rowset;
    }

    /**
     * ファイル情報一覧ローセットを返す.
     *
     * @return CB_RowSet
     */
    function getFileInfoRowSet()
    {
        global $G_container_base;
        /** @var GRN_Uum $uum */
        $uum = $G_container_base->getInstance('uum');
        $login = $uum->getLoginUser();
        $suffix = grn_mail_get_personal_suffix($login->getOID());
        $rowset = new CB_RowSet(cb_class2table(GRN_MAIL_FILEINFO_TABLE,
            $suffix));
        $rowset->addCondition('col_mail=' . $this->getOID());
        $rowset->addOrderColumn(null, false);

        return $rowset;
    }

    /**
     * 閲覧済みか
     *
     * @return boolean
     */
    function isRead()
    {
        $read_ts = $this->get('read_ts');
        if ( ! is_object($this->get('read_ts')) || ($read_ts->unix_ts == 0)) {
            // 0のときは未読
            return false;
        }

        return true;
    }

    /**
     * 添付ファイルありか
     *
     * @return boolean
     */
    function isAttached()
    {
        $attached = $this->get('attached');

        return ( ! is_null($attached) && (int)$attached !== 0);
    }

    /**
     * 送信メールか
     *
     * @return boolean
     */
    function isSent()
    {
        $sent = $this->get('sent');

        return ( ! is_null($sent) && (int)$sent == 1) ? true : false;
    }

    /**
     * 開封確認要求情報をセット
     *
     * @param bool $request
     * @param null $confirmation_to
     */
    function setConfirmationRequest($request = true, $confirmation_to = null)
    {
        $this->set('confirmation_request', $request);

        if ($request === true) {
            if (is_null($confirmation_to)) {
                // 未指定の場合はFromと同じ
                $confirmation_to = $this->get('from');
            }
        }

        $this->set('confirmation_to', $confirmation_to);
    }

    /**
     * 開封確認要求メールか
     *
     * @return boolean
     */
    function isConfirmationRequest()
    {
        $confirmation_request = $this->get('confirmation_request');

        return ( ! is_null($confirmation_request)
                 && intval($confirmation_request) == 1) ? true : false;
    }

    /**
     * 開封通知メールか
     *
     * @return boolean
     */
    function isConfirmationResponse()
    {
        $confirmation_response =& $this->get('confirmation_response');

        return ( ! is_null($confirmation_response)
                 && intval($confirmation_response) == 1) ? true : false;
    }


    /**
     * フォルダ移動
     *
     * @param GRN_Mail_Folder $new_folder 移動先フォルダデータ
     *
     * @return  boolean
     */
    function moveFolder(& $new_folder)
    {
        if ( ! is_object($new_folder)) {
            return false;
        }

        $is_trash = false;
        $folder = $this->get('folder');
        if (is_object($folder)) {
            $is_trash = $folder->isTrash();
        }

        // フォルダ移動
        $this->set('folder', $new_folder);

        if ($is_trash && ! $new_folder->isTrash()) {
            // ごみ箱からの復帰
            // 削除日時クリア
            $this->set('dtime', null);
        } elseif ( ! $is_trash && $new_folder->isTrash()) {
            // ごみ箱へ移動
            // 削除日時セット
            $ts = new CB_TimeStamp;
            $ts->unix_ts = time();
            $this->set('dtime', $ts);
        }
        $this->updateNow();

        return true;
    }

    /**
     * 監査ログ
     *
     * @param string $action Action name.
     *
     * @return string
     */
    function getInspectionMessage($action)
    {
        switch ($action) {
            case 'create':
                $subject = mb_strimwidth($this->get('subject'), 0, 100,
                    '...');
                $to = mb_strimwidth($this->get('to'), 0, 100, '...');
                $data = mb_strimwidth($this->get('data'), 0, 100, '...');
                $file_name = '';
                if ($this->get('sent') == 1) {
                    $action_name = 'send';
                    $rowset = $this->getFileBodyRowSet();
                } else {
                    $action_name = 'receive';
                    $rowset = $this->getFileInfoRowSet();
                }
                while ( ! is_null($row = $rowset->iterate())) {
                    $file_name .= $row->get('name');
                }
                $file_name = mb_strimwidth($file_name, 0, 100, '...');

                return '[' . $action_name . '] ' . $subject . ' ' . $to . ' '
                       . $data . ' ' .
                       $file_name . '(mid:' . $this->getOID() . ')';
        }
    }

    /**
     * @return bool
     */
    public function isDraft()
    {
        return ! is_null($this->get('draft'));
    }

    /**
     * Return TRUE, if the message uses tab_grn_mail_filebody___XX table to store attachment files information.
     * Return FALSE, if the message uses tab_grn_mail_fileinfo___XX table to store attachment files information.
     *
     * @return bool
     */
    public function isUseFileBodyTable()
    {
        if ($this->isDraft()) {
            // DRAFT MAIL
            return true;
        } elseif ($this->isSent() && ! is_null($this->get('creator'))) {
            // SENT MAIL
            return true;
        } else {
            // RECEIVED MAIL and IMPORTED MAIL(include imported sent mail)
            return false;
        }
    }

    /**
     * @return bool
     */
    private function isTnefDecoded()
    {
        return ! ! $this->get('reserve_int1');
    }

    /**
     * @return CB_MailSinglePart[]|null
     */
    public function getAttachedPartsFromSource()
    {
        $cb_mail_message = $this->getMessage();
        if (is_null($cb_mail_message)) {
            return null;
        }

        return $cb_mail_message->getAttachedParts($this->isTnefDecoded());
    }
}

/**
 * 送信/受信した開封確認要求メール情報テーブル
 *
 * @author  IKEDA, Atsushi 2005/04
 * @version 1.0
 * @package grn.mail
 */
class GRN_Mail_ConfirmationRequest extends CB_PersistentBase
{
    function __construct(& $row)
    {
        parent::__construct($row);
    }

    var $_app_id = 'mail';

    /**
     * プロパティ
     */
    var $col_user
        = [
            'type' => 'relation',
            'to'   => 'CB_User'
        ];                      // ユーザー
    var $col_mail = ['type' => 'reference', 'lazy' => true];    // 開封確認要求メール

    // キャッシュデータ
    var $col_subject
        = [
            'type'   => 'char',
            'length' => 65535
        ];                          // 〃 標題
    var $col_from
        = [
            'type'   => 'char',
            'length' => 65535
        ];                          // 〃 差出人
    var $col_timestamp
        = [
            'type'    => 'timestamp',
            'notnull' => true
        ];                     // 〃 受信日時
    var $col_send_ts
        = [
            'type'    => 'timestamp',
            'notnull' => true
        ];                     // 〃 送信日時
    var $col_message_id
        = [
            'type'   => 'char',
            'length' => 255
        ];                            // 〃 Message-Id

    /**
     * インデックス
     */
    var $idx_user_messageid = ['cols' => ['user', 'message_id']];

    function getDataProperties()
    {
        $data = [
            'id'         => $this->getOID(),
            'message_id' => $this->get('message_id'),
            'subject'    => $this->get('subject'),
            'from'       => $this->get('from'),
            'timestamp'  => $this->get('timestamp'),
            'send_ts'    => $this->get('send_ts')
        ];

        $user_id = $this->getId('user');
        $data['user_id'] = ($user_id === false) ? null : $user_id;
        $mail = $this->get('mail');
        $mail_id = false;
        if (is_object($mail)) {
            $mail_id = $mail->getOID();
        } else {
            $this->set('mail', null);
        }
        $data['mail_id'] = ($mail_id === false) ? null : $mail_id;

        return $data;
    }
}

/**
 * 送信/受信した開封通知メール情報テーブル
 *
 * @author  IKEDA, Atsushi 2005/04
 * @version 1.0
 * @package grn.mail
 */
class GRN_Mail_ConfirmationResponse extends CB_PersistentBase
{
    function __construct(& $row)
    {
        parent::__construct($row);
    }

    var $_app_id = 'mail';

    /**
     * プロパティ
     */
    var $col_user
        = [
            'type' => 'relation',
            'to'   => 'CB_User'
        ];                             // ユーザー
    var $col_mail
        = [
            'type' => 'reference',
            'lazy' => true
        ];           // 開封通知メール

    // キャッシュデータ
    var $col_org_message_id
        = [
            'type'   => 'char',
            'length' => 255
        ];                                   // 〃 Original-Message-Id
    var $col_final_recipient
        = [
            'type'   => 'char',
            'length' => 65535
        ];                                 // 〃 Final-Recipient
    var $col_subject
        = [
            'type'   => 'char',
            'length' => 65535
        ];                                 // 〃 標題
    var $col_from
        = [
            'type'   => 'char',
            'length' => 65535
        ];                                 // 〃 差出人
    var $col_timestamp
        = [
            'type'    => 'timestamp',
            'notnull' => true
        ];                            // 〃 受信日時
    var $col_send_ts
        = [
            'type'    => 'timestamp',
            'notnull' => true
        ];                            // 〃 送信日時


    // インデックス

    function getDataProperties()
    {
        $data = [
            'id'              => $this->getOID(),
            'org_message_id'  => $this->get('org_message_id'),
            'final_recipient' => $this->get('final_recipient'),
            'subject'         => $this->get('subject'),
            'from'            => $this->get('from'),
            'timestamp'       => $this->get('timestamp'),
            'send_ts'         => $this->get('send_ts')
        ];

        $user_id = $this->getId('user');
        $data['user_id'] = ($user_id === false) ? null : $user_id;
        $mail = $this->get('mail');
        $mail_id = false;
        if (is_object($mail)) {
            $mail_id = $mail->getOID();
        } else {
            $this->set('mail', null);
        }
        $data['mail_id'] = ($mail_id === false) ? null : $mail_id;

        return $data;
    }
}

/**
 * テンポラリメールデータ永続化クラス
 *
 * @author  IKEDA, Atsushi 2005/03
 * @version 1.0
 * @package grn.mail
 */
class GRN_Mail_TemporaryMessage extends GRN_Mail_Message
{
    function __construct(& $row)
    {
        parent::__construct($row);
    }

    var $col_temp_account
        = [
            'type' => 'weak_relation',
            'to'   => GRN_MAIL_ACCOUNT_TABLE
        ];       // アカウント
    var $col_temp_draft_mail
        = [
            'type' => 'reference',
            'lazy' => true
        ];       // 下書きメール
    var $col_origin_mail
        = [
            'type' => 'reference',
            'lazy' => true
        ];       // 引用、転送元のメール

    /**
     * @param CB_User        $user
     * @param array          $properties
     * @param bool           $is_temp
     * @param CB_MailMessage $msg
     *
     * @return bool
     */
    function initialize($user, & $properties, $is_temp = true, $msg = null)
    {
        return parent::initialize($user, $properties, $is_temp, $msg);
    }

    function delete($user_id = null)
    {
        // ファイルオブジェクトを削除
        $rowset = $this->getFileBodyRowSet($user_id);
        if ( ! is_null($rowset)) {
            while ( ! is_null($row = $rowset->iterate())) {
                if ( ! $row->delete()) {
                    cb_throw_error(E_GRN_MAIL_FAILED_TO_DELETE_FILE_DATA);
                }
            }
        }

        return GRN_InspectionBaseEx::delete();
    }

    /**
     * ファイルボディ一覧ローセットを返す. なければ NULL.
     *
     * @param null $user_id
     *
     * @return CB_RowSet|null
     */
    function getFileBodyRowSet($user_id = null)
    {
        if ( ! is_null($user_id)) {
            $suffix = grn_mail_get_personal_suffix($user_id);
        } else {
            global $G_container_base;
            /** @var GRN_Uum $uum */
            $uum = $G_container_base->getInstance('uum');
            $login = $uum->getLoginUser();
            $suffix = grn_mail_get_personal_suffix($login->getOID());
        }
        $rowset = new CB_RowSet(cb_class2table(GRN_MAIL_FILEBODY_TABLE,
            $suffix));
        $rowset->addCondition('col_temporary_mail=' . $this->getOID());
        $rowset->addOrderColumn(null, false);

        return $rowset;
    }

    /**
     * Get e-mail information from the specified e-mail data object.
     *
     * @param bool   $b_detail        Flag for getting e-mail information.
     * @param bool   $b_files         Flag for getting attachment information.
     * @param string $body_encoding   Body encoding
     * @param string $header_encoding Header encoding
     * @param bool   $b_source        Flag for getting source information.
     * @param bool   $b_delete_multi_files
     *
     * @return mixed
     */
    function getDataProperties(
        $b_detail,
        $b_files = false,
        $body_encoding = '',
        $header_encoding = '',
        $b_source = true,
        $b_delete_multi_files = false
    ) {
        $data = parent::getDataProperties($b_detail, $b_files, $body_encoding, $header_encoding, $b_source,
            $b_delete_multi_files);

        $temp_account_id = $this->getId('temp_account');
        $data['temp_account_id'] = ($temp_account_id === false) ? null
            : $temp_account_id;

        return $data;
    }

}

/**
 * 受信メールソースファイルのの中身を表す.
 *
 * @param grn.mail
 */
class GRN_Mail_SourceFileBody extends GRN_ServerFile
{
    function __construct(& $row)
    {
        parent::__construct($row);
    }

    var $_app_id = 'mail';

    /**
     * プロパティ
     */
    var $col_user
        = [
            'type'                  => 'weak_relation',
            'to'                    => 'CB_User',
            'no_foreign_key_create' => true
        ];                    // ユーザー
    var $col_mail
        = [
            'type'   => 'weak_relation',
            'to'     => GRN_MAIL_MESSAGE_TABLE,
            'suffix' => true
        ];       // メールデータ

    function set($prop_name, $prop_value)
    {
        $prop_name = strtolower($prop_name);
        if (($prop_name == 'user') || ($prop_name == 'mail')) {
            if (is_null($prop_value)) {
                // エラー
                assert('FALSE');
                cb_throw_error();
            }
        }

        return parent::set($prop_name, $prop_value);
    }

    function fileExists()
    {
        return $this->exists();
    }

    function getFileContents()
    {
        $file_handle = $this->f_open('rb');
        if ($file_handle === false) {
            return null;
        }

        $file_size = $this->get('size');
        if ($file_size > 0) {
            $file_raw = '';
            while ( ! feof($file_handle)) {
                $file_raw .= fread($file_handle, $file_size);
            }
        } else {
            $file_raw = '';
        }
        fclose($file_handle);

        return $file_raw;
    }
}

/**
 * 受信メール用添付ファイル情報クラス（ファイルの実体は持たない）
 *
 * @author  IKEDA, Atsushi 2005/02
 * @version 1.0
 * @package grn.mail
 */
class GRN_Mail_FileInfo extends CB_PersistentBase
{
    function __construct(& $row)
    {
        parent::__construct($row);
    }

    var $_app_id = 'mail';

    /**
     * プロパティ
     */
    var $col_user
        = [
            'type'                  => 'weak_relation',
            'to'                    => 'CB_User',
            'no_foreign_key_create' => true
        ];                    // ユーザー

    var $col_mail
        = [
            'type'   => 'relation',
            'to'     => GRN_MAIL_MESSAGE_TABLE,
            'suffix' => true
        ];            // メールデータ

    var $col_part_no = ['type' => 'int'];                                               // パートNo.
    var $col_name
        = [
            'type'   => 'char',
            'length' => CB_DATABASE_MAX_STRINDEX
        ];          // ファイル名
    var $col_mime
        = [
            'type'   => 'char',
            'length' => 100
        ];                               // MIMEタイプ


    // reserved columns
    var $col_reserve_text1 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text2 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_int1 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int2 = ['type' => 'int', 'lazy' => true];


    function initialize(& $user, & $mail, & $properties)
    {
        assert('is_object( $user )');
        assert('is_object( $mail )');
        assert('is_array( $properties )');

        $this->set('user', $user);
        $this->set('mail', $mail);
        $this->set('part_no', $properties['part_no']);
        $this->set('name', $properties['name']);
        $this->set('mime', $properties['mime']);

        $this->registerNow();

        return true;
    }

    /**
     * @param string $prop_name
     *
     * @return CB_Row|mixed
     */
    function &get($prop_name)
    {
        if ($prop_name == 'mime') {
            $ret = $this->getMIMEType();

            return $ret;
        }

        $ret = parent::get($prop_name);

        return $ret;
    }

    function getDataProperties()
    {
        $data = [
            'id'      => $this->getOID(),
            'part_no' => $this->get('part_no'),
            'name'    => $this->get('name'),
            'mime'    => $this->get('mime')
        ];

        $mail_id = $this->getId('mail');
        $data['mail_id'] = ($mail_id === false) ? null : $mail_id;

        return $data;
    }

    /**
     * 拡張子を取得する
     *
     * @return string 拡張子
     */
    function getExtension()
    {
        $path = $this->get('name');

        return substr(strrchr($path, '.'), 1);
    }

    /**
     * MIMEタイプを取得する
     *
     * @return string MIMEタイプ
     */
    function getMIMEType()
    {
        // 未指定の場合はファイル名から取得
        $mcm = GRN_MIMEConfigManager::getInstance();
        $ext = $this->getExtension();
        if ($ext !== false) {
            $mime = $mcm->getMIMEType($ext);
            if (is_string($mime) && (strlen($mime) > 0)) {
                return $mime;
            }
        }

        // 指定されたMIMEタイプを信じる
        $mime = parent::get('mime');
        if (is_string($mime) && (strlen($mime) > 0)) {
            return $mime;
        }

        return 'application/octet-stream';
    }
}

/**
 * 送信メールの添付ファイルのの中身を表す.
 *
 * @param grn.mail
 */
class GRN_Mail_FileBody extends GRN_ServerFile
{
    function __construct(& $row)
    {
        parent::__construct($row);
    }

    var $_app_id = 'mail';

    /**
     * プロパティ
     */
    var $col_user
        = [
            'type'                  => 'weak_relation',
            'to'                    => 'CB_User',
            'no_foreign_key_create' => true
        ];                        // ユーザー
    var $col_mail
        = [
            'type'   => 'weak_relation',
            'to'     => GRN_MAIL_MESSAGE_TABLE,
            'suffix' => true
        ];           // メールデータ
    var $col_temporary_mail
        = [
            'type' => 'weak_relation',
            'to'   => GRN_MAIL_TEMPORARY_MESSAGE_TABLE
        ]; // 一時メールデータ
    var $col_timestamp
        = [
            'type'    => 'timestamp',
            'notnull' => true
        ];                            // タイムスタンプ

    /**
     * 初期化
     *
     * @param   object $user       ユーザーオブジェクト
     * @param   object $mail       メールオブジェクト or テンポラリメールオブジェクト
     * @param   array  $properties プロパティ配列
     *
     * @return  boolean 成否
     */
    function initialize(& $user, & $mail, & $properties)
    {
        assert('is_object( $user )');
        assert('is_array( $properties )');

        $this->set('user', $user);
        if (is_a($mail, GRN_MAIL_TEMPORARY_MESSAGE_TABLE)) {
            $this->set('temporary_mail', $mail);
        } elseif (is_a($mail, GRN_MAIL_MESSAGE_TABLE)) {
            $this->set('mail', $mail);
        } else {
            assert('FALSE');

            return false;
        }

        $this->set('name', $properties['name']);
        $this->set('mime', $properties['mime']);
        $this->set('size', $properties['size']);
        $this->set('charset', @ $properties['charset']);
        $this->set('timestamp', $properties['timestamp']);

        $this->registerNow();

        return true;
    }

    function set($prop_name, $prop_value)
    {
        $prop_name = strtolower($prop_name);
        if (($prop_name == 'user') || ($prop_name == 'name')
            || ($prop_name == 'mime')
            || ($prop_name == 'size')
            || ($prop_name == 'timestamp')
        ) {
            if (is_null($prop_value)) {
                // エラー
                assert('FALSE');
                cb_throw_error();
            }
        }

        return parent::set($prop_name, $prop_value);
    }

    /**
     * @param string $prop_name
     *
     * @return CB_Row|mixed|string
     */
    function &get($prop_name)
    {
        if ($prop_name == 'mime') {
            $ret = $this->getMIMEType();

            return $ret;
        }

        $ret =& parent::get($prop_name);

        return $ret;
    }

    function getDataProperties()
    {
        $data = [
            'id'      => $this->getOID(),
            'name'    => $this->get('name'),
            'charset' => $this->get('charset'),
            'size'    => $this->get('size'),
            'mime'    => $this->get('mime')
        ];

        $user_id = $this->getId('user');
        $data['user_id'] = ($user_id === false) ? null : $user_id;
        $mail_id = $this->getId('mail');
        $data['mail_id'] = ($mail_id === false) ? null : $mail_id;
        $temp_mail_id = $this->getId('temporary_mail');
        $data['temp_mail_id'] = ($temp_mail_id === false) ? null
            : $temp_mail_id;

        return $data;
    }

    /**
     * @param string|array|CB_ServerFile $file
     * @param                            $user
     * @param                            $mail
     * @param                            $ts
     * @param bool                       $detect_encoding
     *
     * @return bool
     */
    function copyFile(& $file, & $user, & $mail, & $ts, $detect_encoding = true)
    {
        assert('is_a( $ts, "CB_TimeStamp" )');
        $this->set('timestamp', $ts);

        // ファイルサイズ制限

        $size = 0;
        if (is_array($file)) {
            $size = $file['size'];
        } elseif (is_a($file, 'CB_ServerFile')) {
            $size = $file->get('size');
        } else {
            assert('is_string( $file )');
            $size = filesize($file);
        }


        return parent::copy($file, $detect_encoding);
    }


    /**
     * 拡張子を取得する
     *
     * @return string 拡張子
     */
    function getExtension()
    {
        $path = $this->get('name');

        return substr(strrchr($path, '.'), 1);
    }

    /**
     * MIMEタイプを取得する
     *
     * @return string MIMEタイプ
     */
    function getMIMEType()
    {
        // 未指定の場合はファイル名から取得
        $mcm = GRN_MIMEConfigManager::getInstance();
        $ext = $this->getExtension();
        if ($ext !== false) {
            $mime = $mcm->getMIMEType($ext);
            if (is_string($mime) && (strlen($mime) > 0)) {
                return $mime;
            }
        }

        // 指定されたMIMEタイプを信じる
        $mime = parent::get('mime');
        if (is_string($mime) && (strlen($mime) > 0)) {
            return $mime;
        }

        return 'application/octet-stream';
    }

    function fileExists()
    {
        return $this->exists();
    }

    function getFileContents()
    {
        $file_handle = $this->f_open('rb');
        if ($file_handle === false) {
            return null;
        }

        $file_size = $this->get('size');
        if ($file_size > 0) {
            $file_raw = '';
            while ( ! feof($file_handle)) {
                $file_raw .= fread($file_handle, $file_size);
            }
        } else {
            $file_raw = '';
        }
        fclose($file_handle);

        return $file_raw;
    }

    function delete()
    {
        $this->deleteTempFile();

        return parent::delete();
    }

    // DBから削除せず、ファイルのみ削除する
    function deleteFile()
    {
        global $G_container_base;
        /** @var CB_FileManager $fm */
        $fm = $G_container_base->getInstance('file_manager');
        $fm->addToRemove($this);
        $this->set('size', 0);
        $this->set('blob', null);
    }

    // 送信時の一時ファイルを削除する
    function deleteTempFile()
    {
        $tmp_name = $this->getTmpName();
        if ( ! is_null($tmp_name) && is_file($tmp_name)) {
            unlink($tmp_name);
        }

        $this->set('size', 0);
    }
}

/**
 * メール状態データ永続化クラス
 *
 * @author  IKEDA, Atsushi 2004/12
 * @version 1.0
 * @package grn.mail
 */
class GRN_Mail_Status extends CB_PersistentBase
{
    function __construct(& $row)
    {
        parent::__construct($row);
    }

    var $_app_id = 'mail';

    /**
     * プロパティ
     */
    var $col_user
        = [
            'type' => 'weak_relation',
            'to'   => 'CB_User'
        ];                    // ユーザー
    var $col_name
        = [
            'type'   => 'char',
            'length' => 100,
            'lazy'   => true
        ];                 // 状態表示名
    var $col_code
        = [
            'type'   => 'char',
            'length' => 32
        ];                                // 組み込み状態用コード
    var $col_type
        = [
            'type'   => 'char',
            'length' => 1
        ];                                 // ステータスタイプ(GRN_MAIL_STATUS_TYPE_SYSTEM/GRN_MAIL_STATUS_TYPE_PERSONAL)
    var $col_color = ['type' => 'char', 'length' => 6];

    // reserved columns
    var $col_reserve_text1 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text2 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_int1 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int2 = ['type' => 'int', 'lazy' => true];

    /**
     * インデックス
     */
    var $idx_type = ['cols' => ['type']];

    function set($prop_name, $prop_value)
    {
        $prop_name = strtolower($prop_name);
        if (($prop_name == 'user') || ($prop_name == 'mail')) {
            if (is_null($prop_value)) {
                // エラー
                assert('FALSE');
                cb_throw_error();
            }
        }

        return parent::set($prop_name, $prop_value);
    }
}


//////////////////////////////////////////////////////////////////////////////

/**
 * メールサーバー情報クラス
 *
 * @author  IKEDA, Atsushi 2004/12
 * @version 1.0
 * @package grn.mail
 */
class GRN_Mail_ServerInfo
{
    function __construct()
    {
    }

    //////////////////////////////////////////////////////////////////////////
    // メンバ変数
    /**
     * @access public
     */
    var $smtp = null;
    var $smtp_port = null;
    var $smtp_ssl = null;
    var $smtp_auth = null;
    var $smtp_set_account = null;
    var $pop_before_smtp = null;
    var $pbsmtp_wait_sec = null;
    var $retrieve = null;
    var $retrieve_ssl = null;
    var $retrieve_port = null;
    var $retrieve_auth = null;
    var $retrieve_protocol = null;
    var $smtp_timeout_sec = null;
    var $retrieve_timeout_sec = null;
    var $smtp_tls = null;

    //////////////////////////////////////////////////////////////////////////
    // public method

    /**
     * 送信メールサーバーのアドレスを取得
     *
     * @return string
     */
    function getSmtp()
    {
        if (is_null($this->smtp)) {
            // デフォルトアドレス
            return GRN_MAIL_DEFAULT_SMTP;
        }

        return $this->smtp;
    }

    /**
     * 送信メールサーバーのポート番号を取得
     *
     * @return int
     */
    function getSmtpPort()
    {
        if (is_null($this->smtp_port)) {
            // デフォルトポート番号
            return GRN_MAIL_DEFAULT_SMTP_PORT;
        }

        return $this->smtp_port;
    }

    /**
     * Use SMTP over ssl
     *
     * @return boolean
     */
    function smtpOverSsl()
    {
        return ( ! is_null($this->smtp_ssl) && $this->smtp_ssl);
    }

    /**
     * Use SMTP over TLS
     *
     * @return boolean
     */
    function smtpOverTls()
    {
        return ( ! is_null($this->smtp_tls) && $this->smtp_tls);
    }

    /**
     * 送信メールサーバーの認証種別を取得
     *
     * @return string
     */
    function getSmtpAuth()
    {
        if (is_null($this->smtp_auth)) {
            // デフォルト認証種別
            return GRN_MAIL_DEFAULT_SMTP_AUTH;
        }

        return $this->smtp_auth;
    }

    /**
     * 認証が必要な送信メールサーバーか
     *
     * @return boolean
     */
    function isSmtpAuth()
    {
        $smtp_auth = $this->getSmtpAuth();

        return ( ! is_null($smtp_auth)
                 && ($smtp_auth !== GRN_MAIL_SMTP_AUTH_NONE));
    }

    /**
     * 送信アカウント設定を使用するか
     *
     * @return boolean
     */
    function usingSmtpAccount()
    {
        return ( ! is_null($this->smtp_set_account) && $this->smtp_set_account);
    }

    /**
     * 送信メールサーバーの通信タイムアウト時間（秒）を取得
     *
     * @return string
     */
    function getSmtpTimeoutTime()
    {
        if (is_null($this->smtp_timeout_sec)) {
            // デフォルト
            return GRN_MAIL_SMTP_CONNECTION_TIMEOUT;
        }

        return (int)$this->smtp_timeout_sec;
    }

    /**
     * POP before SMTPかどうか
     *
     * @return boolean
     */
    function isPopBeforeSmtp()
    {
        return ( ! is_null($this->pop_before_smtp)
                 && (int)$this->pop_before_smtp !== 0);
    }

    /**
     * POP before SMTPの送信前待ち時間（秒）
     *
     * @return boolean
     */
    function getPopBeforeSmtpWaitTime()
    {
        if (is_null($this->pbsmtp_wait_sec)) {
            // デフォルト
            return 0;
        }

        return (int)$this->pbsmtp_wait_sec;
    }

    /**
     * 受信メールサーバーを取得
     *
     * @return string
     */
    function getRetrieve()
    {
        if (is_null($this->retrieve)) {
            // デフォルトアドレス
            return GRN_MAIL_DEFAULT_RETRIEVE;
        }

        return $this->retrieve;
    }

    /**
     * 受信メールサーバーのプロトコルを取得
     *
     * @return string
     */
    function getRetrieveProtocol()
    {
        if (is_null($this->retrieve_protocol)
            || (strlen($this->retrieve_protocol) == 0)
        ) {
            // デフォルトプロトコル
            return GRN_MAIL_DEFAULT_RETRIEVE_PROTOCOL;
        }

        return strtoupper($this->retrieve_protocol);
    }

    /**
     * 受信メールサーバーの認証種別を取得
     *
     * @return string
     */
    function getRetrieveAuth()
    {
        if (is_null($this->retrieve_auth)) {
            // デフォルト認証種別
            return GRN_MAIL_DEFAULT_RETRIEVE_AUTH;
        }

        return $this->retrieve_auth;
    }

    /**
     * 受信メールサーバーのポート番号を取得
     *
     * @return int
     */
    function getRetrievePort()
    {
        $protocol = $this->getRetrieveProtocol();
        if (is_null($this->retrieve_port)) {
            // デフォルトポート番号
            return ($protocol == GRN_MAIL_RETRIEVE_PROTOCOL_IMAP4)
                ? GRN_MAIL_DEFAULT_IMAP4_PORT : GRN_MAIL_DEFAULT_POP3_PORT;
        }

        return $this->retrieve_port;
    }

    /**
     * Use SMTP over ssl
     *
     * @return boolean
     */
    function retrieveOverSsl()
    {
        return ( ! is_null($this->retrieve_ssl) && $this->retrieve_ssl);
    }

    /**
     * 受信メールサーバーの通信タイムアウト時間（秒）を取得
     *
     * @return string
     */
    function getRetrieveTimeoutTime()
    {
        if (is_null($this->retrieve_timeout_sec)) {
            // デフォルト
            return GRN_MAIL_RETRIEVE_CONNECTION_TIMEOUT;
        }

        return (int)$this->retrieve_timeout_sec;
    }

}

/**
 * メールサーバーデータ永続化クラス
 *
 * @author  IKEDA, Atsushi 2004/12
 * @version 1.0
 * @package grn.mail
 */
class GRN_Mail_Server extends GRN_InspectionBase
{
    function __construct(& $row)
    {
        parent::__construct($row, GRN_MAIL_MODULE_ID);
    }

    var $_app_id = 'mail';

    /**
     * プロパティ
     */
    var $col_foreign_key
        = [
            'type'    => 'char',
            'length'  => CB_DATABASE_MAX_STRINDEX,
            'notnull' => true
        ];  // サーバーコード
    var $col_name
        = [
            'type'   => 'char',
            'length' => 100
        ];                       // アカウントの名前
    var $col_memo
        = [
            'type'   => 'char',
            'length' => 65535,
            'lazy'   => true
        ];       // メモ

    var $col_smtp
        = [
            'type'   => 'char',
            'length' => 255
        ];                       // SMTPサーバー
    var $col_smtp_port = ['type' => 'int'];                                       // SMTPポート番号
    var $col_smtp_ssl = ['type' => 'int'];                                       // SMTP over SSL
    var $col_smtp_auth
        = [
            'type'   => 'char',
            'length' => 64
        ];                        // SMTP認証種別（'NONE'/'plain'/'login'/'cram-md5'/'digest-md5'）
    var $col_smtp_set_account = ['type' => 'int'];                                       // SMTPアカウント設定フラグ
    var $col_pop_before_smtp = ['type' => 'int'];                                       // POP before SMTPフラグ
    var $col_pbsmtp_wait_sec = ['type' => 'int'];                                       // POP before SMTP待ち時間
    var $col_smtp_timeout_sec = ['type' => 'int'];                                       // 送信タイムアウト時間

    var $col_retrieve
        = [
            'type'   => 'char',
            'length' => 255
        ];                       // 受信サーバー
    var $col_retrieve_port = ['type' => 'int'];                                       // 受信ポート番号
    var $col_retrieve_ssl = ['type' => 'int'];                                        // receive POP3/IMAP4 over SSL
    var $col_retrieve_auth
        = [
            'type'   => 'char',
            'length' => 64
        ];                        // 受信認証種別（'USER'/'apop'）
    var $col_retrieve_protocol
        = [
            'type'   => 'char',
            'length' => 64
        ];                        // 受信プロトコル（'pop3'/'imap4'）
    var $col_retrieve_timeout_sec = ['type' => 'int'];                                       // 受信タイムアウト時間

    var $col_disabled
        = [
            'type'    => 'int',
            'notnull' => true
        ];                      // 使用停止フラグ

    var $col_list_index = ['type' => 'list_index'];                                // 順番

    // smtp_tls
    var $col_reserve_int1 = ['type' => 'int'];
    // reserved columns
    var $col_reserve_text1 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text2 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text3 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_int2 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int3 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_blob1 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob2 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob3 = ['type' => 'blob', 'lazy' => true];

    /**
     * インデックス
     */
    var $idx_smtp = ['cols' => ['smtp']];
    var $idx_retrieve = ['cols' => ['retrieve']];
    var $idx_foreign_key = ['cols' => 'foreign_key', 'unique' => true];

    /**
     * 初期化
     *
     * @param   object $user       ユーザーオブジェクト
     * @param   array  $properties プロパティ配列
     * @param   bool   $log
     *
     * @return  boolean 成否
     */
    function initialize(& $user, & $properties, $log = true)
    {
        $this->set('foreign_key', @ $properties['foreign_key']);
        $this->set('name', @ $properties['name']);
        $this->set('memo', @ $properties['memo']);

        $this->set('smtp', @ $properties['smtp']);
        $this->set('smtp_port', array_key_exists('smtp_port', $properties)
            ? intval($properties['smtp_port']) : '');
        $this->set('smtp_ssl', @ $properties['smtp_ssl']);
        $this->set('smtp_auth', @ $properties['smtp_auth']);
        $this->set('pop_before_smtp', @ $properties['pop_before_smtp']);
        $this->set('pbsmtp_wait_sec', @ $properties['pbsmtp_wait_sec']);
        $this->set('smtp_set_account', @ $properties['smtp_set_account']);
        $this->set('smtp_timeout_sec', @ $properties['smtp_timeout_sec']);
        $this->set('reserve_int1', @ $properties['smtp_starttls']);

        $this->set('retrieve', @ $properties['retrieve']);
        $this->set('retrieve_port',
            array_key_exists('retrieve_port', $properties)
                ? intval($properties['retrieve_port']) : '');
        $this->set('retrieve_ssl', @ $properties['retrieve_ssl']);
        $this->set('retrieve_auth', @ $properties['retrieve_auth']);
        $this->set('retrieve_protocol', @ $properties['retrieve_protocol']);
        $this->set('retrieve_timeout_sec',
            @ $properties['retrieve_timeout_sec']);

        $this->set('disabled', @ $properties['disabled']);

        if (array_key_exists('list_index', $properties)) {
            $this->set('list_index', $properties['list_index']);
        }
        // write log
        if ($log) {
            require_once('mail/inspection.csp');
            $inspection = GRN_Mail_Inspection::getInstance();
            if ($inspection->isEnabled()) {
                if (array_key_exists('memo', $properties)) {
                    unset($properties['memo']);
                }
                if (array_key_exists('smtp_set_account', $properties)) {
                    unset($properties['smtp_set_account']);
                }
                if (array_key_exists('smtp_ssl', $properties)) {
                    $properties['smtp_ssl'] = $properties['smtp_ssl'] ? 1 : 0;
                }
                if (array_key_exists('smtp_starttls', $properties)) {
                    $properties['smtp_starttls'] = $properties['smtp_starttls']
                        ? 1 : 0;
                }
                if ($properties['smtp_auth'] !== 'NONE'
                    && ! defined("ON_FOREST")
                ) {
                    if (array_key_exists('pop_before_smtp', $properties)) {
                        unset($properties['pop_before_smtp']);
                    }
                    if (array_key_exists('pbsmtp_wait_sec', $properties)) {
                        unset($properties['pbsmtp_wait_sec']);
                    }

                } else {
                    //bug 618
                    if (array_key_exists('pop_before_smtp', $properties)) {
                        $properties['pop_before_smtp']
                            = $properties['pop_before_smtp'] ? 1 : 0;
                    }
                }
                if ($properties['retrieve_protocol'] !== 'POP3') {
                    if (array_key_exists('retrieve_auth', $properties)) {
                        unset($properties['retrieve_auth']);
                    }
                }
                if (array_key_exists('retrieve_ssl', $properties)) {
                    $properties['retrieve_ssl'] = $properties['retrieve_ssl']
                        ? 1 : 0;
                }

                if (array_key_exists('disabled', $properties)) {
                    unset($properties['disabled']);
                }

                $inspection->writeInspectionLog('create', 'server',
                    $properties);
            }
        } else {
            $ts = new CB_TimeStamp();
            $ts->unix_ts = time();
            $this->set('ctime', $ts);
            $this->set('mtime', $ts);
        }
        $this->updateNow();

        return true;
    }

    /**
     * プロパティーを設定する
     *
     * @param object $user       操作しているユーザー
     * @param array  $properties プロパティー値
     * @param bool   $log
     *
     * @return boolean  成否
     */
    function setProperties(& $user, $properties, $log = true)
    {
        if ( ! is_array($properties) || (count($properties) == 0)) {
            return true;
        }

        foreach ($properties as $prop_name => $prop_value) {
            if ('smtp_starttls' === $prop_name) {
                $this->set('reserve_int1', $prop_value);
            } else {
                $this->set($prop_name, $prop_value);
            }
        }
        if ($log) {
            require_once('mail/inspection.csp');
            $inspection = GRN_Mail_Inspection::getInstance();
            if ($inspection->isEnabled()) {
                if (array_key_exists('memo', $properties)) {
                    unset($properties['memo']);
                }
                if (array_key_exists('smtp_set_account', $properties)) {
                    unset($properties['smtp_set_account']);
                }
                if (array_key_exists('smtp_ssl', $properties)) {
                    $properties['smtp_ssl'] = $properties['smtp_ssl'] ? 1 : 0;
                }
                if (array_key_exists('smtp_starttls', $properties)) {
                    $properties['smtp_starttls'] = $properties['smtp_starttls']
                        ? 1 : 0;
                }
                if ($properties['smtp_auth'] !== 'NONE'
                    && ! defined("ON_FOREST")
                ) {
                    if (array_key_exists('pop_before_smtp', $properties)) {
                        unset($properties['pop_before_smtp']);
                    }

                    if (array_key_exists('pbsmtp_wait_sec', $properties)) {
                        unset($properties['pbsmtp_wait_sec']);
                    }
                } else {
                    if (array_key_exists('pop_before_smtp', $properties)) {
                        $properties['pop_before_smtp']
                            = $properties['pop_before_smtp'] ? 1 : 0;
                    }
                }
                if ($properties['retrieve_protocol'] !== 'POP3') {
                    if (array_key_exists('retrieve_auth', $properties)) {
                        unset($properties['retrieve_auth']);
                    }
                }
                if (array_key_exists('retrieve_ssl', $properties)) {
                    $properties['retrieve_ssl'] = $properties['retrieve_ssl']
                        ? 1 : 0;
                }

                if (array_key_exists('disabled', $properties)) {
                    unset($properties['disabled']);
                }
                $inspection->writeInspectionLog('modify', 'server',
                    $properties);
            }
        } else {
            $ts = new CB_TimeStamp();
            $ts->unix_ts = time();
            $this->set('mtime', $ts);
        }

        return $this->updateData($user);
    }

    /**
     * データプロパティの更新を反映する
     *
     * @param object $user 操作しているユーザー
     *
     * @return boolean  成否
     */
    function updateData(& $user)
    {
        if ( ! is_object($user)) {
            return false;
        }

        $this->updateNow();

        return true;
    }

    function set($prop_name, $prop_value)
    {
        $prop_name = strtolower($prop_name);
        switch ($prop_name) {
            case 'name':
                require_once('fw/string_util.csp');
                $prop_value = cb_trim_check($prop_value,
                    E_COMMON_MISSING_MANDATORY);
                break;
            case 'disabled':
                if (is_null($prop_value)) {
                    // default
                    $prop_value = 0;
                }
                break;
            case 'smtp_port':
            case 'retrieve_port':
                $prop_value = intval($prop_value);
                break;
            case 'pop_before_smtp':
            case 'pbsmtp_wait_sec':
                $prop_value = defined("ON_FOREST") ? 0
                    : $prop_value;  // always off on garoon.com
                break;
        }

        return parent::set($prop_name, $prop_value);
    }

    function delete()
    {
        return parent::delete();
    }

    /**
     * @return GRN_Mail_ServerInfo
     */
    function getServerInfo()
    {
        $server_info = new GRN_Mail_ServerInfo();
        $server_info->smtp = $this->get('smtp');
        $server_info->smtp_port = $this->get('smtp_port');
        $server_info->smtp_ssl = $this->get('smtp_ssl');
        $server_info->smtp_tls = $this->get('reserve_int1');
        $server_info->smtp_auth = $this->get('smtp_auth');
        $server_info->smtp_set_account = $this->get('smtp_set_account');
        $server_info->pop_before_smtp = $this->get('pop_before_smtp');
        $server_info->pbsmtp_wait_sec = $this->get('pbsmtp_wait_sec');
        $server_info->smtp_timeout_sec = $this->get('smtp_timeout_sec');

        $server_info->retrieve = $this->get('retrieve');
        $server_info->retrieve_port = $this->get('retrieve_port');
        $server_info->retrieve_ssl = $this->get('retrieve_ssl');
        $server_info->retrieve_auth = $this->get('retrieve_auth');
        $server_info->retrieve_protocol = $this->get('retrieve_protocol');
        $server_info->retrieve_timeout_sec = $this->get('retrieve_timeout_sec');

        return $server_info;
    }

    /**
     * プロパティから情報を取得
     *
     * @access  private
     * @return  mixed       メールサーバー情報(array) or null
     */
    function getDataProperties()
    {
        $data = [
            'id'          => $this->getOID(),
            'foreign_key' => $this->get('foreign_key'),
            'name'        => $this->get('name'),
            'memo'        => $this->get('memo'),
            'disabled'    => $this->get('disabled'),
            'list_index'  => $this->get('list_index')
        ];

        $data['server_info'] = $this->getServerInfo();

        return $data;
    }

    /**
     * 監査ログ
     *
     * @param string $action Action name.
     *
     * @return string
     */
    function getInspectionMessage($action)
    {
        switch ($action) {
            case 'create':
                return '[server.create] ' . $this->_getInspectionMessage();
            case 'update':
                return '[server.modify] ' . $this->_getInspectionMessage();
            case 'delete':
                return '[server.delete] ' . $this->_getInspectionMessage();
        }
    }

    /**
     * @access   private
     */
    function _getInspectionMessage()
    {
        $cols = [
            'foreign_key',
            'name',
            'smtp',
            'smtp_port',
            'smtp_ssl',
            'smtp_auth',
            'pop_before_smtp',
            'pbsmtp_wait_sec',
            'smtp_timeout_sec',
            'retrieve_protocol',
            'retrieve',
            'retrieve_port',
            'retrieve_ssl',
            'retrieve_auth',
            'retrieve_timeout_sec',
            'reserve_int1'
        ]; // reserve_int1 use for tls

        $col_vals = [];
        foreach ($cols as $key) {
            $col_vals[] = $key . ' = ' . $this->get($key);
        }

        return implode(', ', $col_vals) . ' (id: ' . $this->getOID() . ')';
    }
}

//////////////////////////////////////////////////////////////////////////////

/**
 * メールアカウント情報クラス
 *
 * @author  IKEDA, Atsushi 2004/12
 * @version 1.0
 * @package grn.mail
 */
class GRN_Mail_AccountInfo
{
    function __construct()
    {
    }

    //////////////////////////////////////////////////////////////////////////
    // メンバ変数
    /**
     * @access public
     */
    var $email = null;
    var $from_name = null;
    var $retrieve_account = null;
    var $retrieve_password = null;
    var $retrieve_save = null;                     // 'LEAVE' / 'DELETE'

    var $server_id = null;

    var $smtp_account = null;
    var $smtp_password = null;

    function getFrom(& $user)
    {
        if ((is_null($this->from_name) || (strlen($this->from_name) == 0))
            && is_object($user)
        ) {
            $user_info = [
                'col_display_name'          => 'display_name',
                'col_valid'                 => 'valid',
                'col_display_name_language' => 'display_name_language',
                'col_nickname'              => 'nickname',
                'col_position'              => 'position',
                'col_foreign_key'           => 'foreign_key'
            ];
            foreach ($user_info as $col => $val) {
                $user_info[$col] = $user->get($val);
            }
            global $G_container_base;
            $uum = $G_container_base->getInstance("uum");
            $from_name = $uum->getNameOf($user, $user_info);
        } else {
            $from_name = $this->from_name;
        }

        return $from_name;
    }

    function getRetrieveAccount()
    {
        if (is_null($this->retrieve_account)) {
            return '';
        }

        return $this->retrieve_account;
    }

    function getRetrievePassword()
    {
        if (is_null($this->retrieve_password)) {
            return '';
        }

        return $this->retrieve_password;
    }

    function getRetrieveSave()
    {
        if (is_null($this->retrieve_save)) {
            return GRN_MAIL_DEFAULT_RETRIEVE_SAVE;
        }

        return $this->retrieve_save;
    }

    function getSmtpAccount()
    {
        if (is_null($this->smtp_account)) {
            return '';
        }

        return $this->smtp_account;
    }

    function getSmtpPassword()
    {
        if (is_null($this->smtp_password)) {
            return '';
        }

        return $this->smtp_password;
    }
}

/**
 * アカウントデータ永続化クラス
 *
 * @author  IKEDA, Atsushi 2004/12
 * @version 1.0
 * @package grn.mail
 */
class GRN_Mail_Account extends GRN_InspectionBase
{
    function __construct(& $row)
    {
        parent::__construct($row, GRN_MAIL_MODULE_ID);
    }

    var $_app_id = 'mail';

    /**
     * プロパティ
     */
    var $col_user
        = [
            'type' => 'relation',
            'to'   => 'CB_User'
        ];                     // ユーザー

    var $col_foreign_key
        = [
            'type'    => 'char',
            'length'  => CB_DATABASE_MAX_STRINDEX,
            'notnull' => true
        ];      // アカウントコード
    var $col_mail_size
        = [
            'type'   => 'int',
            'length' => 20
        ];                             // 総メールサイズ（バイト）
    var $col_new_mails = ['type' => 'int'];                                           // 新着メール数
    var $col_name
        = [
            'type'   => 'char',
            'length' => 100
        ];                           // アカウントの名前
    var $col_memo
        = [
            'type'   => 'char',
            'length' => 65535,
            'lazy'   => true
        ];           // メモ
    var $col_email
        = [
            'type'   => 'char',
            'length' => 255
        ];                           // E-Mailアドレス
    var $col_from_name
        = [
            'type'   => 'char',
            'length' => 100
        ];                           // From名

    var $col_retrieve_account
        = [
            'type'   => 'char',
            'length' => 255
        ];                           // 受信アカウント名
    var $col_retrieve_password
        = [
            'type'   => 'char',
            'length' => 255
        ];                           // 受信パスワード
    var $col_retrieve_save
        = [
            'type'   => 'char',
            'length' => 32
        ];                            // 受信サーバーに残す設定（leave/save/trash/N日）

    var $col_smtp_account
        = [
            'type'   => 'char',
            'length' => 255
        ];                           // 送信アカウント名
    var $col_smtp_password
        = [
            'type'   => 'char',
            'length' => 255
        ];                           // 送信パスワード

    var $col_send_vcard = ['type' => 'int'];                                           // vCardを常に送信するフラグ

    var $col_check_mail_ts = ['type' => 'timestamp'];                                     // 新着メールチェック日時


    var $col_personal
        = [
            'type'    => 'int',
            'notnull' => true
        ];                          // 個人フラグ
    var $col_disabled
        = [
            'type'    => 'int',
            'notnull' => true
        ];                          // 使用停止フラグ
    var $col_deleted
        = [
            'type'    => 'int',
            'notnull' => true
        ];                          // 削除フラグ


    var $col_server
        = [
            'type' => 'weak_relation',
            'to'   => GRN_MAIL_SERVER_TABLE
        ];    // メールサーバー

    var $col_list_index = ['type' => 'list_index'];                                    // 順番

    // 拡張用
    var $col_default_bcc
        = [
            'type'   => 'char',
            'length' => 255,
            'lazy'   => true
        ];             // デフォルトBcc
    var $col_sender
        = [
            'type'   => 'char',
            'length' => 255,
            'lazy'   => true
        ];             // Sender

    // reserved columns
    var $col_reserve_text1 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text2 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text3 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_int1 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int2 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int3 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_blob1 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob2 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob3 = ['type' => 'blob', 'lazy' => true];

    /**
     * インデックス
     */
    var $idx_foreign_key = ['cols' => 'foreign_key', 'unique' => true];
    var $idx_user_del = ['cols' => ['user', 'deleted']];
    var $idx_user_dis_del_oid_lstidx
        = [
            'cols' => [
                'user',
                'disabled',
                'deleted',
                null,
                'list_index'
            ]
        ];
    var $idx_server_del = ['cols' => ['server', 'deleted']];
    var $idx_server_dis_del = ['cols' => ['server', 'disabled', 'deleted']];
    var $idx_user_server_del = ['cols' => ['user', 'server', 'deleted']];
    var $idx_user_server_dis_del
        = [
            'cols' => [
                'user',
                'server',
                'disabled',
                'deleted'
            ]
        ];

    var $_account_info = null;

    /**
     * 初期化
     *
     * @param   object $user       ユーザーオブジェクト
     * @param   array  $properties プロパティ配列
     * @param   bool   $log
     *
     * @return  boolean 成否
     */
    function initialize(& $user, & $properties, $log = true)
    {
        $this->set('user', @ $properties['user']);

        $this->set('foreign_key', @ $properties['foreign_key']);
        $this->set('name', @ $properties['name']);
        $this->set('memo', @ $properties['memo']);
        $this->set('email', @ $properties['email']);
        $this->set('from_name', @ $properties['from_name']);

        $this->set('retrieve_account', @ $properties['retrieve_account']);
        $this->set('retrieve_password', @ $properties['retrieve_password']);
        $this->set('retrieve_save', @ $properties['retrieve_save']);

        $this->set('send_vcard', @ $properties['send_vcard']);

        $this->set('personal', @ $properties['personal']);
        $this->set('disabled', @ $properties['disabled']);
        $this->set('deleted', @ 0);

        $this->set('server', @ $properties['server']);

        if (array_key_exists('mail_size', $properties)) {
            $this->set('mail_size', $properties['mail_size']);
        } else {
            $this->set('mail_size', 0);
        }

        if (array_key_exists('list_index', $properties)) {
            $this->set('list_index', $properties['list_index']);
        }

        $this->set('smtp_account', @ $properties['smtp_account']);
        $this->set('smtp_password', @ $properties['smtp_password']);
        $this->set('default_bcc', @ $properties['default_bcc']);
        $this->set('sender', @ $properties['sender']);

        //add ctime, mtime use for mobile api
        $ts = new CB_TimeStamp();
        $ts->unix_ts = time();
        $this->set('ctime', $ts);
        $this->set('mtime', $ts);

        $this->updateNow();

        return true;
    }

    /**
     * プロパティーを設定する
     *
     * @param object $user       操作しているユーザー
     * @param array  $properties プロパティー値
     * @param bool   $log
     *
     * @return boolean  成否
     */
    function setProperties(& $user, $properties, $log = true)
    {
        if ( ! is_array($properties) || (count($properties) == 0)) {
            return true;
        }

        foreach ($properties as $prop_name => $prop_value) {
            if (($prop_name == 'disabled') || ($prop_name == 'list_index')) {
                // nullは無視
                if (is_null($prop_value)) {
                    continue;
                }
            }

            $this->set($prop_name, $prop_value);
        }

        return $this->updateData($user, $log);
    }

    /**
     * データプロパティの更新を反映する
     *
     * @param object $user 操作しているユーザー
     * @param bool   $log
     *
     * @return boolean  成否
     */
    function updateData(& $user, $log = true)
    {
        if ( ! is_object($user)) {
            return false;
        }
        $this->updateNow();

        return true;
    }

    function set($prop_name, $prop_value)
    {
        $prop_name = strtolower($prop_name);
        if ($prop_name == 'user') {
            if (is_null($prop_value)) {
                cb_throw_error(E_COMMON_MISSING_MANDATORY);
            }
        } elseif (($prop_name == 'retrieve_password')
                  || ($prop_name == 'smtp_password')
        ) {
            if ( ! $this->isValidPassword($prop_value)) {
                return false;
            }
        } elseif (($prop_name == 'personal') || ($prop_name == 'disabled')
                  || ($prop_name == 'deleted')
        ) {
            if (is_null($prop_value)) {
                // default
                $prop_value = 0;
            }
        } elseif ($prop_name == 'retrieve_save') {
            if ( ! is_null($prop_value)) {
                $prop_value = strtoupper($prop_value);
            }
        } elseif ($prop_name == 'mail_size') {
            if ( ! is_numeric($prop_value)) {
                return false;
            }

            if ($prop_value < 0) {
                $prop_value = 0;
            }
        }

        return parent::set($prop_name, $prop_value);
    }

    function delete()
    {

        // メールサーバーが削除されていた場合はnullをセット
        $server = $this->get('server');
        $server_id = is_null($server) ? null : $server->getOID();
        $properties = [
            'account_id'       => $this->getOID(),
            'account_code'     => $this->get('foreign_key'),
            'account_name'     => $this->get('name'),
            'mail_server'      => $server_id,
            'email'            => $this->get('email'),
            'retrieve_account' => $this->get('retrieve_account'),
            'retrieve_save'    => $this->get('retrieve_save'),
            'smtp_account'     => $this->get('smtp_account'),
            'disabled'         => $this->get('disabled') ? 1 : 0
        ];
        // get server infomation
        if ( ! is_null($server)) {
            $server_info = $server->getServerInfo();
            if ($server_info->smtp_auth === 'NONE') {
                unset($properties['smtp_account']);
            } else {
                if ($properties['smtp_account'] === '') {
                    unset($properties['smtp_account']);
                }
            }
        } else {
            unset($properties['mail_server']);
            unset($properties['smtp_account']);
        }
        // write log delete mail account
        require_once('mail/inspection.csp');
        $inspection = GRN_Mail_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            $inspection->writeInspectionLog('delete', 'account', $properties);
        }

        return parent::delete();

    }

    /**
     * @return GRN_Mail_AccountInfo
     */
    function getAccountInfo()
    {
        if (is_null($this->_account_info)) {
            $this->_account_info = new GRN_Mail_AccountInfo();
            $this->_account_info->email = $this->get('email');
            $this->_account_info->from_name = $this->get('from_name');
            $this->_account_info->retrieve_account
                = $this->get('retrieve_account');
            $this->_account_info->retrieve_password
                = $this->get('retrieve_password');
            $this->_account_info->retrieve_save
                = $this->get('retrieve_save');

            $this->_account_info->smtp_account = $this->get('smtp_account');
            $this->_account_info->smtp_password = $this->get('smtp_password');

            // メールサーバーが削除されていた場合はnullをセット
            $server = $this->get('server');
            $this->_account_info->server_id = is_null($server) ? null
                : $server->getOID();
        }

        return $this->_account_info;
    }

    /**
     * プロパティから情報を取得
     *
     * @param bool $b_server メールサーバー情報取得フラグ
     * @param bool $b_detail
     *
     * @return  mixed       メールアカウント情報(array) or null
     */
    function getDataProperties($b_server = false, $b_detail = false)
    {
        $data = [
            'id'            => $this->getOID(),
            'foreign_key'   => $this->get('foreign_key'),
            'title'         => $this->getTitle(),
            'name'          => $this->get('name'),
            'check_mail_ts' => $this->get('check_mail_ts'),
            'mail_size'     => $this->getMailSize(),
            'send_vcard'    => $this->get('send_vcard'),
            'disabled'      => $this->get('disabled'),
            'deleted'       => $this->get('deleted'),
            'list_index'    => $this->get('list_index')
        ];

        $new_mails = $this->get('new_mails');
        $data['new_mails'] = is_null($new_mails) ? 0 : (int)$new_mails;

        $data['account_info'] = $this->getAccountInfo();

        // ユーザーが削除されていた場合はnullをセット
        $user = $this->get('user');
        if (is_null($user)) {
            $data['user_id'] = null;
            $data['user_name'] = null;
        } else {
            $data['user_id'] = $user->getOID();
            $data['user_name'] = $user->get('display_name');
        }

        if ($b_detail) {
            $data['memo'] = $this->get('memo');
        }

        if ($b_server) {
            /** @var GRN_Mail_Server $mailserver */
            $mailserver = $this->get('server');
            if ( ! is_null($mailserver)) {
                $data['server'] = $mailserver->getDataProperties();
            } else {
                $data['server'] = null;
            }
        }

        return $data;
    }

    /**
     * アカウントが使用停止中か
     *
     * @return  boolean
     */
    function isDisabled()
    {
        $disabled = $this->get('disabled');

        return ($disabled != 0);
    }

    /**
     * アカウントが削除済みか
     *
     * @return  boolean
     */
    function isDeleted()
    {
        $deleted = $this->get('deleted');

        return ($deleted != 0);
    }

    function setMailSize($size)
    {
        if ($size < 0) {
            $size = 0;
        }

        $this->set('mail_size', $size);
    }

    function getMailSize()
    {
        $mail_size = $this->get('mail_size');
        if (is_null($mail_size)) {
            return 0;
        }

        return $mail_size;
    }

    /**
     * 全フォルダ購読設定解除
     *
     */
    function unsubscribeAllFolders()
    {
        // 全フォルダリスト取得
        $folder_list = $this->getAllFolderRowList();
        foreach (array_keys($folder_list) as $folder_id) {
            $folder = $folder_list[$folder_id];

            // 購読解除
            $folder->subscribe(false);
        }
    }

    /**
     * 購読中フォルダIDリスト取得
     *
     * @return array
     */
    function getSubscribedFolderIds()
    {
        $folder_id_list = [];

        // アカウントのフォルダ一覧
        $folder_list = $this->getAllFolderRowList();
        foreach (array_keys($folder_list) as $folder_id) {
            $folder = $folder_list[$folder_id];
            if ($folder->isSubscribed()) {
                // 購読中
                $folder_id_list[$folder_id] = $folder_id;
            }
        }

        return $folder_id_list;
    }

    /**
     * 全フォルダリスト取得
     *
     * @return GRN_Mail_Folder[]
     */
    function getAllFolderRowList()
    {
        // アカウントのフォルダ一覧
        $folder_list = [];
        $rowset = new CB_RowSet(cb_class2table(GRN_MAIL_FOLDER_TABLE));
        $rowset->addCondition('col_account=' . $this->getOID());
        $rowset->addOrderColumn(null);
        while ( ! is_null($row = $rowset->iterate())) {
            $folder_list[$row->getOID()] = clone $row;
        }

        return $folder_list;
    }

    /**
     * アカウント名称を取得
     * 名前が設定されていなければE-Mailを返す
     *
     * @param bool $no_email_bracket
     *
     * @return  string      メールアカウント名称
     */
    function getTitle($no_email_bracket = false)
    {
        $title = $this->get('name');
        if (is_null($title) || (mb_strlen($title) == 0)) {
            $email =& $this->get('email');
            if ( ! is_null($email) && (strlen($email) > 0)) {
                require_once('mail/utility.csp');
                if ( ! $no_email_bracket) {
                    $title = GRN_Mail_Utility::static_addEmailBracket($email,
                        'add');
                } else {
                    $title = GRN_Mail_Utility::static_addEmailBracket($email,
                        'remove');
                }
            }
        }

        return $title;
    }

    function isValidPassword($password)
    {
        if ($password == '***************') {
            return false;
        }

        return true;
    }

    function &getServerInfo()
    {
        /** @var GRN_Mail_Server $mailserver */
        $mailserver = $this->get('server');
        if (is_object($mailserver)) {
            $ret = $mailserver->getServerInfo();

            return $ret;
        }

        {
            $___ret = null;

            return $___ret;
        }
    }

    /**
     * 送信可能なアカウントデータかどうか
     *
     * @param   boolean $no_account アカウント設定有無を受け取る
     * @param   boolean $no_server  サーバー設定有無を受け取る
     *
     * @return  boolean     送信可否
     */
    function canSend(& $no_account, & $no_server)
    {
        $no_account = true;         // アカウント設定なし
        $no_server = true;          // サーバー設定なし

        $account_info = $this->getAccountInfo();
        if ( ! is_null($account_info)) {
            // アカウント設定あり
            $no_account = false;
        }

        // サーバー設定取得
        $server_info = $this->getServerInfo();

        if ( ! is_null($server_info)) {
            // SMTPサーバー設定必須
            if ( ! is_null($server_info->smtp)
                 && (strlen($server_info->smtp) > 0)
            ) {
                // サーバー設定あり
                $no_server = false;
            }

            // SMTP AUTH
            if ($server_info->isSmtpAuth()) {
                if ( ! $no_account) {
                    // 送信用アカウント設定を使う
                    if ( ! is_null($server_info->smtp_set_account)
                         && $server_info->smtp_set_account
                    ) {
                        if (is_null($account_info->smtp_account)
                            || (strlen($account_info->smtp_account) == 0)
                        ) {
                            // アカウント設定なし
                            $no_account = true;
                        }
                    } // 受信用アカウント設定を使う
                    elseif (is_null($account_info->retrieve_account)
                            || (strlen($account_info->retrieve_account) == 0)
                    ) {
                        // アカウント設定なし
                        $no_account = true;
                    }
                }
            } // POP before SMTP
            elseif ($server_info->isPopBeforeSmtp()) {
                // 受信サーバー設定が必須
                if (is_null($server_info->retrieve)
                    || (strlen($server_info->retrieve) == 0)
                ) {
                    // サーバー設定なし
                    $no_server = true;
                }

                if ( ! $no_account) {
                    // 受信アカウント設定が必須
                    if (is_null($account_info->retrieve_account)
                        || (strlen($account_info->retrieve_account) == 0)
                    ) {
                        // アカウント設定なし
                        $no_account = true;
                    }
                }
            }
        }

        return ( ! $this->isDisabled() && ! $this->isDeleted() && ! $no_account
                 && ! $no_server);
    }


    /**
     * 受信可能なアカウントデータかどうか
     *
     * @param   boolean $no_account アカウント設定有無を受け取る
     * @param   boolean $no_server  サーバー設定有無を受け取る
     *
     * @return  boolean     受信可否
     */
    function canReceive(& $no_account, & $no_server)
    {
        $no_account = true;         // アカウント設定なし
        $no_server = true;          // サーバー設定なし

        // サーバー設定取得
        $server_info = $this->getServerInfo();
        if ( ! is_null($server_info) && ! is_null($server_info->retrieve)
             && (strlen($server_info->retrieve) > 0)
        ) {
            // サーバー設定あり
            $no_server = false;
        }

        $account_info = $this->getAccountInfo();
        if ( ! is_null($account_info)
             && ! is_null($account_info->retrieve_account)
             && (strlen($account_info->retrieve_account) > 0)
        ) {
            // アカウント設定あり
            $no_account = false;
        }

        return ( ! $this->isDisabled() && ! $this->isDeleted() && ! $no_account
                 && ! $no_server);
    }

    /**
     * アカウントのメールデータ件数を取得
     *
     * @return  boolean
     */
    function getMailCount()
    {
        $app_locator = GRN_ApplicationLocator::instance();
        $db = $app_locator->getConnection('mail');

        // アカウントのフォルダIDを取得する
        $user = $this->get('user');
        if ( ! $user) {
            return 0;
        }
        $query = sprintf("SELECT _id FROM %s WHERE col_account='%s'",
            'tab_' . GRN_MAIL_FOLDER_TABLE, $this->getOID());

        $query = $db->select_format($query);
        $result = $db->query($query);
        if ( ! cb_is_db_result($result)) {
            return 0;
        }

        // 検索条件はフォルダID
        $conditions = [];
        $n = $db->num_rows($result);
        for ($i = 0; $i < $n; $i++) {
            $row = $db->fetch_assoc($result);
            if ( ! is_array($row)) {
                continue;
            }

            $conditions[] = sprintf("col_folder='%s'", $row['_id']);
        }

        $folder_count = count($conditions);
        if ($folder_count == 0) {
            return 0;
        } elseif ($folder_count == 1) {
            $condition = $conditions[0];
        } else {
            $condition = implode(' or ', $conditions);
        }

        // アカウントの全てのフォルダに存在するメールデータ数
        $table_name = grn_mail_get_personal_tablename($user->getOID(),
            GRN_MAIL_MESSAGE_TABLE);
        $query = sprintf('SELECT count(*) as count FROM %s WHERE %s',
            'tab_' . $table_name, $condition);

        $query = $db->select_format($query);
        $result = $db->query($query);
        if (cb_is_db_result($result)) {
            $row = $db->fetch_assoc($result);
            if (is_array($row)) {
                return intval($row['count']);
            }
        }

        return 0;
    }

    /**
     * 監査ログ
     *
     * @param string $action Action name.
     *
     * @return string
     */
    function getInspectionMessage($action)
    {
        switch ($action) {
            case 'create':
                return '[account.create] ' . $this->_getInspectionMessage();
            case 'update':
                return '[account.modify] ' . $this->_getInspectionMessage();
            case 'delete':
                return '[account.delete] ' . $this->_getInspectionMessage();
        }
    }

    /**
     * @access   private
     * @return string
     */
    function _getInspectionMessage()
    {
        $server = $this->get('server');
        $server_name = '';
        if ( ! is_null($server)) {
            $server_name = $server->get('name');
        }

        return 'account_code = ' . $this->get('foreign_key')
               . ', account_name = ' . $this->get('name') . ', mail_server = '
               . $server_name . ', email = ' . $this->get('email')
               . ', retrieve_account = ' . $this->get('retrieve_account')
               . ', retrieve_save = ' . $this->get('retrieve_save')
               . ', smtp_account = ' . $this->get('smtp_account')
               . ', disabled = ' . $this->get('disabled') . ' (id: '
               . $this->getOID() . ')';
    }
}

/**
 * 署名データ永続化クラス
 *
 * @author  IKEDA, Atsushi 2004/12
 * @version 1.0
 * @package grn.mail
 */
class GRN_Mail_Signature extends CB_PersistentBase
{
    function __construct(& $row)
    {
        parent::__construct($row);
    }

    var $_app_id = 'mail';

    /**
     * プロパティ
     */
    var $col_account
        = [
            'type' => 'relation',
            'to'   => GRN_MAIL_ACCOUNT_TABLE
        ];            // アカウント

    var $col_name
        = [
            'type'   => 'char',
            'length' => 100
        ];                               // フォルダ名
    var $col_position = ['type' => 'int', 'lazy' => true];
    var $col_data
        = [
            'type'   => 'char',
            'length' => 65535,
            'lazy'   => true
        ];               // 署名本文
    var $col_ctime = ['type' => 'timestamp'];                                         // 作成日時
    var $col_mtime = ['type' => 'timestamp'];                                         // 更新日時

    var $col_list_index = ['type' => 'list_index'];                                        // 順番

    // 拡張用
    var $col_html_data
        = [
            'type'   => 'char',
            'length' => 65535,
            'lazy'   => true
        ];               // 署名HTML本文

    // reserved columns
    var $col_reserve_text1 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text2 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_int1 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int2 = ['type' => 'int', 'lazy' => true];

    function set($prop_name, $prop_value)
    {
        $prop_name = strtolower($prop_name);
        if (($prop_name == 'account') || ($prop_name == 'name')) {
            if (is_null($prop_value)) {
                // 必須項目エラー
                assert('FALSE');
                cb_throw_error(E_GRN_MISSING_MANDATORY);
            }
        }

        if ($prop_name == 'name') {
            require_once('fw/string_util.csp');
            $prop_value = cb_trim_check($prop_value,
                E_COMMON_MISSING_MANDATORY);
        }

        return parent::set($prop_name, $prop_value);
    }

    /**
     * プロパティから情報を取得
     *
     * @param   boolean $b_detail 詳細情報を取得するか
     *
     * @return  mixed   署名設定情報(array) or null
     */
    function getDataProperties($b_detail = true)
    {
        $account_id = $this->getId('account');
        $data['account_id'] = ($account_id === false) ? null : $account_id;

        $data['name'] = $this->get('name');

        if ($b_detail) {
            // 詳細データ
            $data['data'] = $this->get('data');
            $data['ctime'] = $this->get('ctime');
            $data['mtime'] = $this->get('mtime');
            $data['position'] = $this->get('position');
        }

        return $data;
    }
}

/**
 * フォルダデータ永続化クラス
 *
 * @author  IKEDA, Atsushi 2004/12
 * @version 1.0
 * @package grn.mail
 */
class GRN_Mail_Folder extends CB_PersistentBase
{
    function __construct(& $row)
    {
        parent::__construct($row);
    }

    var $_app_id = 'mail';

    /**
     * プロパティ
     */
    var $col_user
        = [
            'type' => 'weak_relation',
            'to'   => 'CB_User'
        ];                    // ユーザー


    var $col_code
        = [
            'type'   => 'char',
            'length' => 32
        ];                                // 組み込みフォルダ用コード('inbox'/'sentbox'/'unsent'/'trash')
    var $col_name
        = [
            'type'   => 'char',
            'length' => 100
        ];                               // フォルダ名
    var $col_memo
        = [
            'type'   => 'char',
            'length' => 65535,
            'lazy'   => true
        ];               // メモ


    var $col_ctime = ['type' => 'timestamp'];                                         // 作成日時
    var $col_mtime = ['type' => 'timestamp'];                                         // 更新日時

    var $col_account
        = [
            'type' => 'weak_relation',
            'to'   => GRN_MAIL_ACCOUNT_TABLE
        ];       // アカウント
    var $col_parent
        = [
            'type' => 'weak_relation',
            'to'   => GRN_MAIL_FOLDER_TABLE
        ];        // 親フォルダ

    var $col_subscribed
        = [
            'type'    => 'int',
            'notnull' => true
        ];                              // 購読フラグ

    var $col_list_index = ['type' => 'list_index'];                                        // 順番

    // reserved columns
    var $col_reserve_text1 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text2 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_int1 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int2 = ['type' => 'int', 'lazy' => true];

    /**
     * インデックス
     */
    var $idx_user_code = ['cols' => ['user', 'code']];
    var $idx_account_code = ['cols' => ['account', 'code'], 'unique' => true];
    var $idx_n_account_subscribed = ['cols' => [null, 'account', 'subscribed']];

    /**
     * 初期化
     *
     * @param   CB_User              $user       ユーザーオブジェクト
     * @param   GRN_Mail_Account     $account
     * @param   GRN_Mail_Folder|null $parent
     * @param   array                $properties プロパティ配列
     *
     * @return  boolean 成否
     */
    function initialize(& $user, & $account, & $parent, & $properties)
    {
        $this->set('user', $user);
        $this->set('account', $account);
        $this->set('parent', $parent);

        $this->set('code', @ $properties['code']);
        $this->set('name', @ $properties['name']);
        $this->set('memo', @ $properties['memo']);
        $this->set('subscribed', @ $properties['subscribed']);

        if (array_key_exists('list_index', $properties)) {
            $this->set('list_index', $properties['list_index']);
        }

        $ts = new CB_TimeStamp;
        $ts->unix_ts = time();
        $this->set('ctime', $ts);
        $this->set('mtime', $ts);

        $this->updateNow();

        return true;
    }

    function set($prop_name, $prop_value)
    {
        $prop_name = strtolower($prop_name);
        if (($prop_name == 'user') || ($prop_name == 'account')) {
            if (is_null($prop_value)) {
                // 必須項目エラー
                assert('FALSE');
                cb_throw_error(E_GRN_MISSING_MANDATORY);
            }
        }

        if ($prop_name == 'parent') {
            if (is_object($prop_value)
                && ($prop_value->getOID() == $this->getOID())
            ) {
                assert('FALSE');
            }
        }

        if ($prop_name == 'name') {
            require_once('fw/string_util.csp');
            $prop_value = cb_trim($prop_value);

            // 組み込みフォルダでない場合は名前が必須
            $code = $this->get('code');
            if (is_null($code)) {
                if (mb_strlen($prop_value) == 0) {
                    // 必須項目エラー
                    cb_throw_error(E_GRN_MISSING_MANDATORY);
                }
            }
        } elseif ($prop_name == 'subscribed') {
            if (is_null($prop_value)
                || (($prop_value !== 1)
                    && ($prop_value !== '1')
                    && ($prop_value !== true))
            ) {
                $prop_value = 0;
            } else {
                $prop_value = 1;
            }
        }

        $result = parent::set($prop_name, $prop_value);

        if ($prop_name == 'subscribed') {
            $this->updateNow();
        }

        return $result;
    }

    /**
     * 指定されたフォルダデータオブジェクトのプロパティからフォルダ情報を取得
     *
     * @access  private
     *
     * @param   boolean $b_detail   詳細情報取得フラグ
     * @param   boolean $b_data_num データ数取得フラグ
     *
     * @return  mixed       フォルダデータ配列 or null
     */
    function getDataProperties($b_detail, $b_data_num = false)
    {
        $data = [
            'id'         => $this->getOID(),
            'code'       => $this->get('code'),
            'name'       => $this->get('name'),
            'subscribed' => $this->isSubscribed(),
            'list_index' => $this->get('list_index')
        ];

        $user_id = $this->getId('user');
        $parent_id = $this->getId('parent');
        $account_id = $this->getId('account');
        $data['user_id'] = ($user_id === false) ? null : $user_id;
        $data['parent_id'] = ($parent_id === false) ? null : $parent_id;
        $data['account_id'] = ($account_id === false) ? null : $account_id;

        if ($b_detail) {
            // 詳細データ
            $data['memo'] = $this->get('memo');
            $data['ctime'] = $this->get('ctime');
            $data['mtime'] = $this->get('mtime');
        }

        if ($b_data_num) {
            $data['unread_num'] = $this->getMailNum(true);
        }

        return $data;
    }

    /**
     * 自分のサブフォルダのデータオブジェクト一覧RowSetを取得する
     *
     * @param bool $reverse
     * @param bool $b_sort
     *
     * @return CB_RowSet
     */
    function getSubFolderRowSet($reverse = false, $b_sort = true)
    {
        $rowset = new CB_RowSet(cb_class2table(GRN_MAIL_FOLDER_TABLE));
        $rowset->addCondition('col_parent=' . $this->getOID());

        if ($b_sort) {
            $rowset->addOrderColumn('col_list_index', $reverse);
            $rowset->addOrderColumn(null, $reverse);
        }

        return $rowset;
    }

    /**
     * 自分のサブフォルダのデータオブジェクト一覧を取得する
     *
     * @param bool $reverse
     *
     * @return GRN_Mail_Folder[]
     */
    function &getSubFolderRowList($reverse = false)
    {
        $rowset = $this->getSubFolderRowSet($reverse);

        // フォルダデータ一覧ループ
        $folder_list = [];
        while ( ! is_null($row = $rowset->iterate())) {
            $folder_list[$row->getOID()] = clone $row;
        }

        return $folder_list;
    }

    /**
     * サブフォルダの数を取得する
     *
     * @return  int
     */
    function getSubFolderCount()
    {
        $rowset = $this->getSubFolderRowSet(false, false);
        $rowset->applyGroupFunctions(['count' => 'COUNT(*)']);
        $result = $rowset->iterate();
        $rowset->destroy();

        return $result['count'];
    }

    /**
     * 組み込みフォルダかどうか
     *
     * @return  boolean
     */
    function isSpecialFolder()
    {
        $code = $this->get('code');
        if (is_string($code) && (strlen($code) > 0)) {
            return true;
        }

        return false;
    }

    /**
     * ルートフォルダかどうか
     *
     * @return  boolean
     */
    function isRoot()
    {
        $code = $this->get('code');
        if (is_string($code) && ($code === GRN_MAIL_FOLDER_CODE_ROOT)) {
            return true;
        }

        return false;
    }

    /**
     * 受信箱かどうか
     *
     * @return  boolean
     */
    function isInbox()
    {
        $code = $this->get('code');
        if (is_string($code) && ($code === GRN_MAIL_FOLDER_CODE_INBOX)) {
            return true;
        }

        return false;
    }

    /**
     * 送信箱かどうか
     *
     * @return  boolean
     */
    function isSentBox()
    {
        $code = $this->get('code');
        if (is_string($code) && ($code === GRN_MAIL_FOLDER_CODE_SENTBOX)) {
            return true;
        }

        return false;
    }

    /**
     * 下書きかどうか
     *
     * @return  boolean
     */
    function isUnsent()
    {
        $code = $this->get('code');
        if (is_string($code) && ($code === GRN_MAIL_FOLDER_CODE_UNSENT)) {
            return true;
        }

        return false;
    }

    /**
     * ごみ箱かどうか
     *
     * @return  boolean
     */
    function isTrash()
    {
        $code = $this->get('code');
        if (is_string($code) && ($code === GRN_MAIL_FOLDER_CODE_TRASH)) {
            return true;
        }

        return false;
    }

    /**
     * 購読設定されているフォルダかどうか
     *
     * @return  boolean
     */
    function isSubscribed()
    {
        $subscribed = $this->get('subscribed');
        if (is_null($subscribed)
            || (($subscribed !== 1)
                && ($subscribed !== '1')
                && ($subscribed !== true))
        ) {
            return false;
        }

        return true;
    }

    /**
     * 購読設定
     *
     * @param $b_subscribe
     *
     * @return bool
     *
     */
    function subscribe($b_subscribe)
    {
        if ($this->isTrash()) {
            // ごみ箱の場合は何もしない
            return true;
        }

        $this->set('subscribed', $b_subscribe);

        return true;
    }

    /**
     * @return string
     */
    public function getDisplayName()
    {
        switch ($this->get('code')) {
            case GRN_MAIL_FOLDER_CODE_ROOT:
                return grn_get_page_display_name('mail/root');

            case GRN_MAIL_FOLDER_CODE_INBOX:
                return grn_get_page_display_name('mail/inbox');

            case GRN_MAIL_FOLDER_CODE_SENTBOX:
                return grn_get_page_display_name('mail/outbox');

            case GRN_MAIL_FOLDER_CODE_UNSENT:
                return grn_get_page_display_name('mail/draftbox');

            case GRN_MAIL_FOLDER_CODE_TRASH:
                return grn_get_page_display_name('mail/garbagebox');

            default:
                return $this->get('name');
        }
    }

    /**
     * フォルダの深さを取得（0がルート）
     *
     * @return  int
     */
    function getDepth()
    {

        $depth = -1;
        $folder = $this;
        while (true) {
            $depth++;
            $parent = $folder->get('parent');
            if (is_null($parent)) {
                break;
            }

            $folder = $parent;
        }

        return $depth;
    }

    /**
     * サブフォルダの最大深度を取得
     *
     * @param   int   $start       開始位置
     * @param   array $sub_folders サブフォルダデータを受け取る配列
     *
     * @return  int
     */
    function _seekMaxDepth($start, & $sub_folders)
    {
        $depth = $start;

        $rowset = $this->getSubFolderRowSet();

        // フォルダデータ一覧ループ
        /** @var $row GRN_Mail_Folder */
        while ( ! is_null($row = $rowset->iterate())) {
            $sub_folders[$row->getOID()] = $row;
            $ret = $row->_seekMaxDepth($start + 1,
                $sub_folders);
            if ($ret > $depth) {
                $depth = $ret;
            }
        }

        return $depth;
    }

    /**
     * サブフォルダの最大深度（相対値）を取得
     *
     * @param   array $sub_folders サブフォルダデータを受け取る配列
     *
     * @return  int
     */
    function getMaxDescendantDepth(& $sub_folders)
    {
        $depth = 1;

        return $this->_seekMaxDepth($depth, $sub_folders);
    }

    /**
     * サブフォルダのアカウントを全て変更する
     *
     * @param   object $account アカウント
     */
    function setNewAccountToAllDescendants(& $account)
    {
        // 自分自身
        $this->set('account', $account);

        // フォルダデータ一覧ループ
        $rowset = $this->getSubFolderRowSet();
        /** @var GRN_Mail_Folder $row */
        while ( ! is_null($row = $rowset->iterate())) {
            $row->setNewAccountToAllDescendants($account);
        }
    }

    /**
     * フォルダのメール数を取得する
     *
     * @param   boolean $b_unread_only 未読のみを取得するフラグ
     *
     * @return  int     メール数
     */
    function getMailNum($b_unread_only)
    {
        // メールテーブル
        global $G_container_base;
        /** @var GRN_Uum $uum */
        $uum = $G_container_base->getInstance('uum');
        $login = $uum->getLoginUser();
        $suffix = grn_mail_get_personal_suffix($login->getOID());
        $rowset = new CB_RowSet(cb_class2table(GRN_MAIL_MESSAGE_TABLE,
            $suffix));
        $rowset->addCondition('col_folder = ' . $this->getOID());
        if ($b_unread_only) {
            // 未読のみ
            $rowset->addCondition("col_read_ts = 0");
        }
        $rowset->applyGroupFunctions(['count' => 'COUNT(*)']);
        $result = $rowset->iterate();
        $rowset->destroy();

        return $result['count'];
    }

}

/**
 * 振り分け設定データ永続化クラス
 *
 * @author  IKEDA, Atsushi 2004/12
 * @version 1.0
 * @package grn.mail
 */
class GRN_Mail_Filter extends CB_PersistentBase
{
    function __construct(& $row)
    {
        parent::__construct($row);
    }

    var $_app_id = 'mail';

    /**
     * プロパティ
     */
    var $col_account
        = [
            'type' => 'relation',
            'to'   => GRN_MAIL_ACCOUNT_TABLE
        ];            // アカウント
    var $col_folder
        = [
            'type' => 'weak_relation',
            'to'   => GRN_MAIL_FOLDER_TABLE
        ];        // フォルダ

    var $col_name
        = [
            'type'   => 'char',
            'length' => 100
        ];                               // 振り分け名
    var $col_or = ['type' => 'int'];                                               // ORフラグ

    var $col_status
        = [
            'type' => 'weak_relation',
            'to'   => GRN_MAIL_STATUS_TABLE
        ];        // 自動で設定するステータス

    var $col_not_save_address_history = ['type' => 'int'];                                         // 自動で送受信記録に保存しないフラグ

    var $col_list_index = ['type' => 'list_index'];                                        // 順番

    // reserved columns
    var $col_reserve_text1 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text2 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_int1 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int2 = ['type' => 'int', 'lazy' => true];

    var $_cache_properties = null;                                                                 // プロパティのキャッシュ
    var $_cache_condition_rows = null;                                                                 // 条件のキャッシュ

    function set($prop_name, $prop_value)
    {
        $prop_name = strtolower($prop_name);
        if (($prop_name == 'account') || ($prop_name == 'folder')
            || ($prop_name == 'name')
        ) {
            if (is_null($prop_value)) {
                // エラー
                assert('FALSE');
                cb_throw_error();
            }
        }

        if ($prop_name == 'name') {
            require_once('fw/string_util.csp');
            $prop_value = cb_trim_check($prop_value,
                E_COMMON_MISSING_MANDATORY);
        }

        return parent::set($prop_name, $prop_value);
    }

    /**
     * 付随する条件データRowSetを取得
     *
     * @return CB_RowSet
     */
    function getConditionRowSet()
    {
        // 振り分け条件データテーブル
        $rowset
            = new CB_RowSet(cb_class2table(GRN_MAIL_FILTER_CONDITION_TABLE));
        $rowset->addCondition('col_filter = ' . $this->getOID());

        return $rowset;
    }

    /**
     * 付随する条件データ一覧を取得する
     *
     * @return GRN_Mail_FilterCondition[]
     */
    function &getConditionRowList()
    {
        if (is_null($this->_cache_condition_rows)) {
            // 振り分け条件データテーブル
            $rowset = $this->getConditionRowSet();

            // データ一覧ループ
            $this->_cache_condition_rows = [];
            while ( ! is_null($row = $rowset->iterate())) {
                $this->_cache_condition_rows[] = clone $row;
            }
        }

        return $this->_cache_condition_rows;
    }

    /**
     * 付随する条件を全て削除する
     *
     */
    function deleteAllConditions()
    {
        // 振り分け条件データテーブル
        $rowset = $this->getConditionRowSet();
        $rowset->deleteAllMatched();
        unset($this->_cache_properties['conditions']);
        $this->_cache_condition_rows = null;
    }

    /**
     * 条件を保存する
     *
     * @param   array $conditions 条件情報の配列の配列（array of array）
     */
    function setConditions(& $conditions)
    {
        if ( ! is_array($conditions) || (count($conditions) == 0)) {
            // 条件が１つもない
            cb_throw_error(E_COMMON_MISSING_MANDATORY);
        }

        // 付随する条件を全て削除する
        $this->deleteAllConditions();

        // 振り分け条件データテーブル
        $table = cb_class2table(GRN_MAIL_FILTER_CONDITION_TABLE);

        foreach (array_keys($conditions) as $key) {
            $condition =& $conditions[$key];

            // 振り分け条件データ追加
            $row = $table->newRow();
            if ( ! is_object($row)) {
                // データ追加失敗
                cb_throw_error(E_GRN_MAIL_FAILED_TO_ADD_FILTER_CONDITION_DATA);
            }

            $row->set('filter', $this);
            $row->set('type', $condition['type']);
            $row->set('expr', $condition['expr']);
            $row->set('string', $condition['string']);
            $row->registerNow();
        }
    }

    /**
     * プロパティから情報を取得
     *
     * @param   boolean $b_detail 振り分け条件を取得するか
     *
     * @return  mixed   振り分け設定情報(array) or null
     */
    function getDataProperties($b_detail = true)
    {
        if (is_null($this->_cache_properties)) {
            $this->_cache_properties = [
                'id'                   => $this->getOID(),
                'name'                 => $this->get('name'),
                'or'                   => $this->get('or'),
                'save_address_history' => (intval($this->get('not_save_address_history'))
                                           != 1),
                'list_index'           => $this->get('list_index')
            ];

            $account_id = $this->getId('account');
            $folder_id = $this->getId('folder');
            $status_id = $this->getId('status');
            $this->_cache_properties['account_id'] = ($account_id === false)
                ? null : $account_id;
            $this->_cache_properties['folder_id'] = ($folder_id === false)
                ? null : $folder_id;
            $this->_cache_properties['status_id'] = ($status_id === false)
                ? null : $status_id;
        }

        if ($b_detail) {
            if ( ! array_key_exists('conditions', $this->_cache_properties)) {
                $this->_cache_properties['conditions'] = [];

                // 振り分け条件データ一覧ループ
                $condition_row_list =& $this->getConditionRowList();
                foreach (array_keys($condition_row_list) as $condition_key) {
                    $condition_row = $condition_row_list[$condition_key];
                    $this->_cache_properties['conditions'][$condition_row->getOID()]
                        = $condition_row->getDataProperties();
                }
            }
        }

        return $this->_cache_properties;
    }
}

/**
 * 振り分け条件設定データ永続化クラス
 *
 * @author  IKEDA, Atsushi 2004/12
 * @version 1.0
 * @package grn.mail
 */
class GRN_Mail_FilterCondition extends CB_PersistentBase
{
    function __construct(& $row)
    {
        parent::__construct($row);
    }

    var $_app_id = 'mail';

    /**
     * プロパティ
     */
    var $col_filter
        = [
            'type' => 'relation',
            'to'   => GRN_MAIL_FILTER_TABLE
        ];             // アカウント
    var $col_type
        = [
            'type'   => 'char',
            'length' => 32
        ];                                // 振り分け種別（'SB':subject / 'FR':from/ 'TO:'to /'CC':cc / 'HD':header / 'SZ':size）
    var $col_expr
        = [
            'type'   => 'char',
            'length' => 100
        ];                               // 振り分け条件（CO/NCO/SA/NSA/BE/GE/LE）
    var $col_string = ['type' => 'char'];                                              // 比較データ


    // reserved columns
    var $col_reserve_text1 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text2 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_int1 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int2 = ['type' => 'int', 'lazy' => true];

    function set($prop_name, $prop_value)
    {
        $prop_name = strtolower($prop_name);
        if (($prop_name == 'filter') || ($prop_name == 'type')
            || ($prop_name == 'expr')
            || ($prop_name == 'string')
        ) {
            if (is_null($prop_value)) {
                // エラー
                assert('FALSE');
                cb_throw_error(E_COMMON_MISSING_MANDATORY);
            }
        }

        if (($prop_name == 'type') || ($prop_name == 'expr')) {
            if ( ! is_string($prop_value)) {
                return false;
            }

            $prop_value = strtoupper($prop_value);
        }

        return parent::set($prop_name, $prop_value);
    }

    /**
     * プロパティから情報を取得
     *
     * @return  mixed   振り分け条件設定情報(array) or null
     */
    function getDataProperties()
    {
        $data = [
            'id'     => $this->getOID(),
            'name'   => $this->get('name'),
            'type'   => $this->get('type'),
            'expr'   => $this->get('expr'),
            'string' => $this->get('string')
        ];

        $filter_id = $this->getId('filter');
        $data['filter_id'] = ($filter_id === false) ? null : $filter_id;

        return $data;
    }
}


//////////////////////////////////////////////////////////////////////////////

/**
 * エラー等で受信しなかったメールのUIDリスト
 *
 * @author  IKEDA, Atsushi 2004/12
 * @version 1.0
 * @package grn.mail
 */
class GRN_Mail_Pop3ErrorUIDs extends CB_MailPOP3UIDTable2
{
    function __construct(& $row)
    {
        parent::__construct($row);
    }

    var $_app_id = 'mail';

    /**
     * プロパティ
     */
    var $col_ogre_user
        = [
            'type' => 'relation',
            'to'   => 'CB_User'
        ];                     // Ogreユーザー
    var $col_account
        = [
            'type' => 'relation',
            'to'   => GRN_MAIL_ACCOUNT_TABLE
        ];        // アカウントデータ
    var $col_subject
        = [
            'type'   => 'char',
            'length' => 65535
        ];                         // Subject
    var $col_from
        = [
            'type'   => 'char',
            'length' => 65535
        ];                         // FROM
    var $col_send_ts = ['type' => 'timestamp'];                                     // 送信日時
    var $col_size = ['type' => 'int'];                                           // メールサイズ
    var $col_attached = ['type' => 'int'];                                           // 添付ファイルフラグ
    var $col_timestamp = ['type' => 'timestamp'];                                     // データ追加日時
    var $idx_account_sts = ['cols' => ['account', 'send_ts']];
    var $idx_account_uid = ['cols' => ['account', 'uid']];

    /**
     * プロパティから情報を取得
     *
     * @access  private
     *
     * @param   bool $b_history
     *
     * @return  mixed       array or null
     */
    function getDataProperties($b_history = true)
    {
        $data = [
            'id'        => $this->getOID(),
            'ogre_user' => $this->get('ogre_user'),
            'subject'   => $this->get('subject'),
            'from'      => $this->get('from'),
            'send_ts'   => $this->get('send_ts'),
            'size'      => $this->get('size'),
            'attached'  => $this->get('attached'),
            'timestamp' => $this->get('timestamp'),
            'host'      => $this->get('host'),
            'port'      => $this->get('port'),
            'user'      => $this->get('user'),
            'uid'       => $this->get('uid'),
        ];

        $account_id = $this->getId('account_id');
        $data['account_id'] = ($account_id === false) ? null : $account_id;

        if ($b_history) {
            // 送受信記録ID 送受信記履歴テーブル廃止により常にnull
            $data['address_info_id'] = null;
        }

        return $data;
    }

    /**
     * 送受信記録RowSetを取得
     *
     * @return mixed    {@link CB_RowSet} or null
     */
    function &getAddressInfoRowSet()
    {
        return null;
    }

    /**
     * 送受信記録データオブジェクトを取得
     *
     * @access private
     * @return  mixed       送受信データ{@link GRN_Mail_AddressInfo} or null
     */
    function getAddressInfoRow()
    {
        return null;
    }

}

function grn_mail_get_personal_suffix($uid)
{
    if (is_null($uid) || 0 == strlen($uid)) {
        return '';
    }

    $user_tables = cb_get_user_tables();
    $partition_id = (int)($uid % $user_tables);

    return CB_DATABASE_USER_TABLE_PREFIX . $partition_id;
}

function grn_mail_get_personal_tablename($uid, $table_name)
{
    if (is_null($uid) || 0 == strlen($uid) || is_null($table_name)
        || 0 == strlen($table_name)
    ) {
        return '';
    }

    $suffix = grn_mail_get_personal_suffix($uid);
    if ( ! is_null($suffix) && strlen($suffix) > 0) {
        $table_name = $table_name . CB_PERSISTENT_NAMESEPARATOR . $suffix;
    }

    return $table_name;
}

function grn_mail_drop_personal_table($uid, $except_admin = true)
{
    if (is_null($uid) || 0 == strlen($uid)) {
        return false;
    }
    if ($except_admin == true && $uid == 1) {
        return true;
    }

    $suffix = grn_mail_get_personal_suffix($uid);
    $app_locator = GRN_ApplicationLocator::instance();
    $db = $app_locator->getConnection('mail');

    $table_list = [
        GRN_MAIL_SOURCEFILEBODY_TABLE,
        GRN_MAIL_FILEBODY_TABLE,
    ];

    $table_list_rev = array_reverse($table_list);
    foreach ($table_list_rev as $value) {
        $table_name = grn_mail_get_personal_tablename($uid, $value);
        $query = cb_queryf($db,
            "UPDATE tab_@S SET col_user = NULL WHERE col_user = '@S';",
            $table_name, $uid);
        $db->query($query);
    }

    Unset($table_list, $table_list_rev);

    $table_list = [
        GRN_MAIL_FILEINFO_TABLE,
        GRN_MAIL_MESSAGE_TABLE,
    ];

    $table_list_rev = array_reverse($table_list);
    foreach ($table_list_rev as $value) {
        $table = cb_class2table($value, $suffix);

        $rowset = new CB_RowSet($table);
        $rowset->addCondition($rowset->queryf("col_user = '@S'", $uid));

        $rowset->deleteAllMatched();
    }

    Unset($table_list, $table_list_rev);
}
