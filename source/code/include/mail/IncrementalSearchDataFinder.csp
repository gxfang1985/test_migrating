<?php

namespace grn\mail;


class IncrementalSearchDataFinder
{
    /**
     * @param \CB_DatabaseConnection $db
     * @param                        $result
     *
     * @return array
     */
    private function fetchUniqueKey(\CB_DatabaseConnection $db, $result)
    {
        $rowData = null;
        $uniqueKeys = [];
        while (($rowData = $db->fetch_assoc($result)) !== false) {
            $uniqueKeys[$rowData["uniqueKey"]] = true;
        }

        return $uniqueKeys;
    }

    /**
     * Filter out from addresseeList when addressee list has same value with uniqueKeys
     * uniqueKeys is name of user + address of user.
     *
     * @param array $uniqueKeys
     * @param       $addresseesList
     *
     * @return array
     */
    private function filterAddressByUniqueList(
        array $uniqueKeys,
        $addresseesList
    ) {
        $notExistedInUniqueKey = [];
        foreach ($addresseesList as $addressee) {
            if (isset($uniqueKeys[$addressee->address . $addressee->name])) {
                continue;
            }
            $notExistedInUniqueKey[] = $addressee;
        }

        return $notExistedInUniqueKey;
    }

    /**
     * Search Addressee exists in Personal Address Book
     *
     * @param \CB_DatabaseConnection $db
     * @param \CB_User               $loginUser
     * @param array                  $addresseesList
     *
     * @return array addressee which not exists in Personal Address Book
     */
    private function getAddresseesListNotExistInPrivateAddressBook(
        \CB_DatabaseConnection $db,
        \CB_User $loginUser,
        array $addresseesList
    ) {
        if (count($addresseesList) <= 0) {
            return [];
        }

        $query
            = "SELECT CONCAT(addr.col_email_address, addr.col_subject) AS uniqueKey FROM tab_grn_address_privatedata AS addr "
              . "WHERE ";
        $condition_states = [];

        foreach ($addresseesList as $addressee) {
            $template
                = "(addr.col_subject = '@S' AND addr.col_email_address = '@S' AND addr.col_creator = '@S') ";
            $condition_states[]
                = $db->format($template,
                [$addressee->name, $addressee->address, $loginUser->getOID()]);
        }


        $result = $db->query($query . implode(" OR ", $condition_states));

        $uniqueKeys = $this->fetchUniqueKey($db, $result);
        $db->free_result($result);

        return $this->filterAddressByUniqueList($uniqueKeys, $addresseesList);
    }


    /**
     * Search Addressee exists in Shared Address Book
     *
     * @param \CB_DatabaseConnection $db
     * @param array                  $book_ids ids of Shared Address Book
     * @param array                  $addresseesList
     *
     * @return array addressee which not exists in Shared Address Book
     */
    private function getAddresseesListNotExistInSharedBook(
        \CB_DatabaseConnection $db,
        array $book_ids,
        array $addresseesList
    ) {
        if (count($addresseesList) <= 0) {
            return [];
        }

        if (count($book_ids) <= 0) {
            return $addresseesList;
        }

        $query
            = "SELECT CONCAT(ash.col_email_address, ash.col_subject) AS uniqueKey FROM tab_grn_address_shareddata AS ash "
              . $db->format("WHERE (ash.col_book IN (@A)) AND ", [$book_ids]);

        $condition_states = [];
        foreach ($addresseesList as $addressee) {
            $template
                = "((ash.col_email_address = '@S') AND (ash.col_subject = '@S'))";
            $condition_states[]
                = $db->format($template,
                [$addressee->address, $addressee->name]);
        }

        $result = $db->query($query . "( " . implode(" OR ", $condition_states)
                             . ")");

        $uniqueKeys = $this->fetchUniqueKey($db, $result);
        $db->free_result($result);

        return $this->filterAddressByUniqueList($uniqueKeys, $addresseesList);
    }

    /**
     * Search Address data in Garoon System User Table
     *
     * @param \CB_DatabaseConnection $db
     * @param array                  $addresseesList
     *
     * @return array addressee which not exists in Garoon system User Table
     */
    private function getAddressesListNotExistInCBUser(
        \CB_DatabaseConnection $db,
        array $addresseesList
    ) {
        if (count($addresseesList) <= 0) {
            return [];
        }
        $query
            = "SELECT CONCAT(user.col_email_address, user.col_display_name) AS uniqueKey "
              . "FROM tab_cb_user AS user WHERE ";

        $condition_states = [];
        foreach ($addresseesList as $addressee) {
            $template
                = "(user.col_email_address = '@S' AND user.col_display_name = '@S' AND user.col_deleted IS NULL)";
            $condition_states[] = $db->format($template,
                [$addressee->address, $addressee->name]);
        }
        $result = $db->query($query . implode(" OR ", $condition_states));
        $uniqueKeys = $this->fetchUniqueKey($db, $result);
        $db->free_result($result);

        return $this->filterAddressByUniqueList($uniqueKeys, $addresseesList);

    }

    /**
     * Search Personal Address Book And Shared Address Book And Garoon Address Book
     *
     * @param array $addressees_list
     * @param array $book_ids
     *
     * @return array
     */
    public function getAddresseesListNotExistsInAddressBook(
        array $addressees_list,
        array $book_ids
    ) {
        require_once('grn/application.csp');
        $app_locator = \GRN_ApplicationLocator::instance();
        $db = $app_locator->getConnection('address');

        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $login_user = $uum->getLoginUser();

        return $this->getAddressesListNotExistInCBUser($db,
            $this->getAddresseesListNotExistInSharedBook($db, $book_ids,
                $this->getAddresseesListNotExistInPrivateAddressBook($db,
                    $login_user, $addressees_list)));
    }
}
