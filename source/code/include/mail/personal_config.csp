<?php

require_once('fw/module.csp');
require_once('mail/error_code.csp');
require_once('mail/resources.csp');
require_once('mail/utility.csp');
require_once('mail/table.csp');

// デフォルト値
define("GRN_MAIL_DEFAULT_TRASH_SAVEDAYS", 5);
define("GRN_MAIL_DEFAULT_LEFT_WIDTH", 150);
define("GRN_MAIL_DEFAULT_MIDDLE_WIDTH", 330);

//////////////////////////////////////////////////////////////////////////////

/**
 * メール個人設定ロジック
 *
 * @author  IKEDA, Atsushi 2004/12
 * @version 1.0
 * @package grn.mail
 */
class GRN_Mail_PersonalConfig extends CB_ModuleBase
{
    function __construct(& $user)
    {
        parent::__construct(GRN_MAIL_PERSONAL_MODULE_ID);

        $this->_user = $user;
        $this->_utility = GRN_Mail_Utility::getInstance();
        assert('is_object( $this->_user )');
    }

    //////////////////////////////////////////////////////////////////////////
    // メンバ変数
    /**
     * @access private
     */
    var $_user = null;                      // ユーザーオブジェクト
    var $_utility = null;
    var $_trash_using = null;               // ごみ箱を使用する設定
    var $_trash_savedays = null;            // ごみ箱内データの保存期間（日）


    //////////////////////////////////////////////////////////////////////////
    // private method

    /**
     * ユーザープロファイルオブジェクトを取得
     *
     * @access private
     * @return CB_Profile
     */
    function _getProfile()
    {
        // メールアプリのユーザープロファイルを取得する
        $ret = $this->getUserProfile($this->_user);

        return $ret;
    }

    /**
     * デフォルトで使用するメールアカウントデータを取得
     *
     * @param   boolean $b_disabled 使用停止中の場合も取得
     * @param   boolean $b_deleted  アカウントが削除されている場合も取得
     * @param bool      $b_check_server
     *
     * @return GRN_Mail_Account|null
     */
    function _getDefaultAccountRow(
        $b_disabled = false,
        $b_deleted = false,
        $b_check_server = false
    ) {
        $rowset
            = new CB_RowSet($this->_utility->getTableInfo(GRN_MAIL_ACCOUNT_TABLE));
        $rowset->addCondition($rowset->queryf("col_user='@S'",
            $this->_user->getOID()));

        $conditions = [];
        if ( ! $b_disabled) {
            $conditions[] = '(col_disabled = 0)';
        }
        if ( ! $b_deleted) {
            $conditions[] = '(tab_grn_mail_account.col_deleted = 0)';
        }
        if ($b_check_server) {
            $conditions[] = '(tab_grn_mail_account.col_server IS NOT NULL)';
        }
        if (count($conditions) > 0) {
            $rowset->addCondition(implode(' AND ', $conditions));
        }

        // 先頭の1件のみ
        $reverse = false;
        $rowset->addOrderColumn('col_list_index', $reverse);      // ソート
        $rowset->addOrderColumn(null, $reverse);                  // OID順
        $rowset->limit(0, 1);
        $row = $rowset->iterate();
        $rowset->destroy();

        return $row;
    }

    /**
     * 指定されたIDで振り分け設定データをDBから取得
     *
     * @access private
     *
     * @param   string $filter_id データID
     *
     * @return GRN_Mail_Filter|null
     */
    function _getFilterRow($filter_id)
    {
        if (is_null($filter_id) || (strlen($filter_id) == 0)) {
            // データ不正
            assert('FALSE');
            {
                $___ret = null;

                return $___ret;
            }
        }

        $table = $this->_utility->getTableInfo(GRN_MAIL_FILTER_TABLE);
        $db = $table->getDBConnection();
        $filter_id = $db->escape($filter_id);
        $row = $table->getRow($filter_id);
        if ( ! is_object($row)) {
            $___ret = null;

            return $___ret;
        }

        return $row;
    }

    /**
     * 振り分け設定データオブジェクト一覧の取得
     *
     * @param   string $account_id 一覧を取得するアカウントID
     * @param   string $sub_query  サブ検索条件文
     *
     * @return  array   データのリスト
     */
    function _getFilterRowList($account_id, $sub_query = null)
    {
        assert('! is_null( $account_id )');

        // データオブジェクトリスト
        $row_list = [];

        $rowset
            = new CB_RowSet($this->_utility->getTableInfo(GRN_MAIL_FILTER_TABLE));
        if (is_null($rowset)) {
            return $row_list;
        }

        // 指定されたアカウント
        $rowset->addCondition($rowset->queryf("col_account = '@S'",
            $account_id));

        // サブ検索条件文を追加
        if ( ! is_null($sub_query) && 0 < strlen($sub_query)) {
            $rowset->addCondition($sub_query);
        }

        // ソート
        $rowset->addOrderColumn('col_list_index', true);      // ソート
        $rowset->addOrderColumn(null, true);                  // OID順

        // データ一覧ループ
        while ( ! is_null($row = &$rowset->iterate())) {
            $row_list[$row->getOID()] = $row;
        }

        return $row_list;
    }

    /**
     * 指定されたIDで署名設定データをDBから取得
     *
     * @access private
     *
     * @param   string $sign_id データID
     *
     * @return GRN_Mail_Signature|null
     */
    function _getSignatureRow($sign_id)
    {
        if (is_null($sign_id) || (strlen($sign_id) == 0)) {
            // データ不正
            assert('FALSE');
            {
                $___ret = null;

                return $___ret;
            }
        }

        $table = $this->_utility->getTableInfo(GRN_MAIL_SIGNATURE_TABLE);
        $db = $table->getDBConnection();
        $sign_id = $db->escape($sign_id);
        $row = $table->getRow($sign_id);
        if ( ! is_object($row)) {
            $___ret = null;

            return $___ret;
        }

        return $row;
    }

    /**
     * 署名設定データオブジェクト一覧の取得
     *
     * @param   string $account_id 一覧を取得するアカウントID
     * @param   string $sub_query  サブ検索条件文
     *
     * @return  array   データのリスト
     */
    function _getSignatureRowList($account_id, $sub_query = null)
    {
        assert('! is_null( $account_id )');

        // データオブジェクトリスト
        $row_list = [];

        $rowset
            = new CB_RowSet($this->_utility->getTableInfo(GRN_MAIL_SIGNATURE_TABLE));
        if (is_null($rowset)) {
            return $row_list;
        }

        // 指定されたアカウント
        $rowset->addCondition($rowset->queryf("col_account = '@S'",
            $account_id));

        // サブ検索条件文を追加
        if ( ! is_null($sub_query) && 0 < strlen($sub_query)) {
            $rowset->addCondition($sub_query);
        }

        // ソート
        $rowset->addOrderColumn('col_list_index', true);      // ソート
        $rowset->addOrderColumn(null, true);                  // OID順

        // データ一覧ループ
        while ( ! is_null($row = &$rowset->iterate())) {
            $row_list[$row->getOID()] = $row;
        }

        return $row_list;
    }

    //////////////////////////////////////////////////////////////////////////
    // public method

    /**
     * Get user profile object of the named user for this module.
     *
     * @param   $user
     *
     * @return  CB_Profile
     */
    function getUserProfile($user)
    {
        require_once('fw/profile.csp');
        $ret = cb_get_user_profile($user, $this->getModuleId());

        return $ret;
    }

    /**
     * 総メールサイズを取得
     *
     * @param   mixed $account_id アカウントID or null
     *
     * @return  int
     */
    function getMailSize($account_id)
    {
        $size = 0;
        if ( ! is_null($account_id)) {
            // アカウントデータ
            $system_config = $this->_utility->getSystemConfig();
            $account = $system_config->_getAccountRow($account_id);
            if ( ! is_object($account)) {
                // アカウントがない
                cb_throw_error(E_GRN_MAIL_ACCOUNT_DATA_NOT_FOUND);
            }

            $size = $account->getMailSize();
        } else {
            // 全アカウントのメールサイズを合計
            $rowset
                = new CB_RowSet($this->_utility->getTableInfo(GRN_MAIL_ACCOUNT_TABLE));
            if (is_null($rowset)) {
                return 0;
            }

            // ユーザー条件を追加
            $rowset->addCondition($rowset->queryf("col_user = '@S'",
                $this->_user->getOID()));
            $rowset->applyGroupFunctions(['sum' => 'sum(col_mail_size)']);
            $result = $rowset->iterate();
            $rowset->destroy();
            $size = $result['sum'];
        }

        if (is_null($size)) {
            return 0;
        }

        return $size;
    }

    /**
     * 総メールサイズを再計算する（重い可能性あり）
     * 添付ファイルの実体が存在するかどうかは判別しない
     * メールデータのsizeカラムの合計を算出する
     *
     * @return  int
     */
    function resetMailSize()
    {
        // 全アカウントループ
        $total = 0;
        $system_config = $this->_utility->getSystemConfig();
        $account_rowset
            = new CB_RowSet($this->_utility->getTableInfo(GRN_MAIL_ACCOUNT_TABLE));
        $account_rowset->addCondition($account_rowset->queryf("col_user = '@S'",
            $this->_user->getOID()));
        $account_rowset->setOidOnly();
        while ( ! is_null($account_id = $account_rowset->iterate())) {
            $folder_ids = [];
            $folder_rowset
                = new CB_RowSet($this->_utility->getTableInfo(GRN_MAIL_FOLDER_TABLE));
            $folder_rowset->addCondition($folder_rowset->queryf("col_account = '@S'",
                $account_id));
            $folder_rowset->setOidOnly();
            while ( ! is_null($folder_id = $folder_rowset->iterate())) {
                $folder_ids[] = $folder_id;
            }
            unset($folder_rowset);

            if (count($folder_ids) > 0) {
                // 全メールから特定のアカウントのサイズを取得
                $table_name
                    = grn_mail_get_personal_tablename($this->_user->getOID(),
                    GRN_MAIL_MESSAGE_TABLE);
                $rowset
                    = new CB_RowSet($this->_utility->getTableInfo($table_name));
                //$rowset->addCondition( 'col_folder IN(' . implode( ',', $folder_ids ). ')' );
                if (is_array($folder_ids) && count($folder_ids) > 0) {
                    $condition = [];
                    foreach ($folder_ids as $folder_id) {
                        $condition[] = $rowset->queryf("'@S'", $folder_id);
                    }
                    $folder_condition = sprintf('col_folder IN ( %s )',
                        implode(', ', $condition));
                    $rowset->addCondition($folder_condition);
                }
                $rowset->addCondition($rowset->queryf("col_user = '@S'",
                    $this->_user->getOID()));
                $user_table_info = $this->_utility->getTableInfo('cb_user');
                $on = CB_DATABASE_TABLE_PREFIX . $table_name
                      . '.col_user = u._id '
                      . 'AND u.col_deleted IS NULL';
                $rowset->addJoin($user_table_info, $on, CB_DATABASE_INNER_JOIN,
                    'u');
                $rowset->applyGroupFunctions(['sum' => 'sum(col_size)']);
                $result = $rowset->iterate();
                $size = $result['sum'];
                if (is_null($size)) {
                    $size = 0;
                }
                $rowset->destroy();
                unset($rowset);
            } else {
                $size = 0;
            }

            unset($folder_ids);

            // アカウントのプロパティを更新
            $this->setAccountMailSize($account_id, $size);
            $total = bcadd($total, $size);
        }

        return $total;
    }

    /**
     * アカウントの総メールサイズをセット
     *
     * @param   string  $account_id    アカウントID
     * @param           $size
     * @param   boolean $b_throw_error エラー発生時に例外をスローするか
     *
     * @return  bool
     *
     */
    function setAccountMailSize($account_id, $size, $b_throw_error = true)
    {
        assert('! is_null( $account_id )');

        // アカウントデータ
        $system_config = $this->_utility->getSystemConfig();
        $account = $system_config->_getAccountRow($account_id);
        if ( ! is_object($account)) {
            if ($b_throw_error) {
                // アカウントがない
                cb_throw_error(E_GRN_MAIL_ACCOUNT_DATA_NOT_FOUND);
            } else {
                return false;
            }
        }

        $account->set('mail_size', $size);
        $account->updateNow();

        return true;
    }

    /**
     * 指定されたアカウントの全フォルダIDのリストを返す
     *
     * @param   string $account_id アカウントID
     *
     * @return  array
     */
    function getAccountFolderIdList($account_id)
    {
        assert('! is_null( $account_id )');

        $folder_ids = [];
        $folder_rowset
            = new CB_RowSet($this->_utility->getTableInfo(GRN_MAIL_FOLDER_TABLE));
        $folder_rowset->addCondition($folder_rowset->queryf("col_account = '@S'",
            $account_id));
        $folder_rowset->setOidOnly();
        while ( ! is_null($folder_id = $folder_rowset->iterate())) {
            $folder_ids[$folder_id] = $folder_id;
        }

        return $folder_ids;
    }

    /**
     * ごみ箱を使用する設定か
     *
     * @return  boolean     使用する場合はTRUE
     */
    function useTrash()
    {
        $this->getTrashSetting($use_trash, $save_days);

        return $use_trash;
    }

    /**
     * ごみ箱に保存する期間（日）取得
     *
     * @return  int
     */
    function getTrashSaveDays()
    {
        $this->getTrashSetting($use_trash, $save_days);

        return $save_days;
    }

    /**
     * 外部通知を使用する設定か
     *
     * @return  boolean     使用する場合はTRUE
     */
    function useNotifyMail()
    {
        $this->getNotyfMailSetting($use_notify);

        return $use_notify;
    }

    /**
     * 送受信記録を使用する設定か
     *
     * @return  boolean     使用する場合はTRUE
     */
    function useAddressHistory()
    {
        // デフォルト
        return true;
    }

    /**
     * ステータス管理機能を使用する設定か
     *
     * @return  boolean     使用する場合はTRUE
     */
    function useStatus()
    {
        if ($this->getStatusSetting($settings)) {
            return $settings['use'];
        }

        // デフォルト
        return true;
    }

    /**
     * 開封確認機能をを使用する設定か
     *
     * @return  boolean     使用する場合はTRUE
     */
    function useConfirmMail()
    {
        if ($this->getConfirmSetting($settings)) {
            return $settings['use_for_sending'];
        }

        // デフォルト
        return true;
    }

    /**
     * データ一覧画面のソート設定を保存
     *
     * @param   string $sort      ソートキー（標題：'subject', 内容：'data', 日時：'time', 名前：'name', サイズ：'size' )
     * @param   string $sort_time 日時（送信日時：'ctime', 受信日時：'rtime' )
     * @param   string $reverse   ソート順（1/0)
     *
     * @return  boolean 成否
     */
    function setSortCondition($sort, $sort_time, $reverse)
    {
        // 通知アプリのユーザープロファイルを取得する
        $profile = $this->_getProfile();
        if (is_null($profile)) {
            // プロファイルデータ更新失敗
            cb_throw_error(E_GRN_MAIL_FAILED_TO_UPDATE_PROFILE_DATA);
        }

        // ソートキーの設定
        if (is_null($sort) || ! $sort) {
            $sort = 'time';
        } elseif (($sort !== 'subject') && ($sort !== 'data')
                  && ($sort !== 'time')
                  && ($sort !== 'name')
                  && ($sort !== 'size')
        ) {
            $tmpSortColumn = null;
            $this->_utility->getProfileSetting($profile, 'index.sort.key',
                $tmpSortColumn);

            return $tmpSortColumn;
        }

        $name = 'index.sort.key';
        if ( ! $this->_utility->updateProfile($profile, $name, $sort)) {
            // プロファイルデータ更新失敗
            cb_throw_error(E_GRN_MAIL_FAILED_TO_UPDATE_PROFILE_DATA);
        }

        // ソート日時の設定
        if (is_null($sort_time) || ! $sort_time) {
            $sort_time = 'ctime';
        } elseif (($sort_time !== 'ctime') && ($sort_time !== 'rtime')
                  && ($sort_time !== 'dctime')
                  && ($sort_time !== 'mtime')
                  && ($sort_time !== 'dtime')
        ) {
            // データ不正
            assert('FALSE');

            return false;
        }

        $name = 'index.sort.time';
        if ( ! $this->_utility->updateProfile($profile, $name, $sort_time)) {
            // プロファイルデータ更新失敗
            cb_throw_error(E_GRN_MAIL_FAILED_TO_UPDATE_PROFILE_DATA);
        }

        // ソート順の設定
        if (is_null($reverse)) {
            $reverse = true;
        }

        $name = 'index.sort.reverse';
        if ( ! $this->_utility->updateProfile($profile, $name, $reverse)) {
            // プロファイルデータ更新失敗
            cb_throw_error(E_GRN_MAIL_FAILED_TO_UPDATE_PROFILE_DATA);
        }

        return true;
    }

    /**
     * データ一覧画面のソート設定を取得
     *
     * @param   string $sort      ソートキー（標題：'subject', 内容：'data', 日時：'time', 名前：'name', サイズ：'size' )を受け取る
     * @param   string $sort_time 日時（送信日時：'ctime', 受信日時：'rtime' )を受け取る
     * @param   string $reverse   ソート順（1/0)を受け取る
     *
     * @return  boolean 成否
     */
    function getSortCondition(& $sort, & $sort_time, & $reverse)
    {
        // デフォルト
        $sort = GRN_MAIL_DEFAULT_SORT_KEY;
        $sort_time = GRN_MAIL_DEFAULT_SORT_TIME;
        $reverse = GRN_MAIL_DEFAULT_SORT_REVERSE;

        // 通知アプリのユーザープロファイルを取得する
        $profile = $this->_getProfile();
        if (is_null($profile)) {
            return true;
        }

        // ソートキーの取得
        $value = null;
        $name = 'index.sort.key';
        if ($this->_utility->getProfileSetting($profile, $name, $value)) {
            $sort = $value;
        }

        // ソート日時の取得
        $value = null;
        $name = 'index.sort.time';
        if ($this->_utility->getProfileSetting($profile, $name, $value)) {
            $sort_time = $value;
        }

        // ソート順の取得
        $name = 'index.sort.reverse';
        if ($this->_utility->getProfileSetting($profile, $name, $value)) {
            $reverse = $value;
        }

        return true;
    }

    //////////////////////////////////////////////////////////////////////////

    /**
     * メールアカウント設定の件数を取得
     *
     * @param   boolean $b_disabled 使用停止中の場合も取得
     * @param   boolean $b_deleted  アカウントが削除されている場合も取得
     *
     * @return  int     メールアカウントデータ数
     */
    function getAccountDataCount($b_disabled = true, $b_deleted = true)
    {
        $rowset
            = new CB_RowSet($this->_utility->getTableInfo(GRN_MAIL_ACCOUNT_TABLE));
        $rowset->addCondition($rowset->queryf("col_user='@S'",
            $this->_user->getOID()));

        $conditions = [];
        if ( ! $b_disabled) {
            $conditions[] = '(col_disabled = 0)';
        }
        if ( ! $b_deleted) {
            $conditions[] = '(col_deleted = 0)';
        }
        if (count($conditions) > 0) {
            $rowset->addCondition(implode(' AND ', $conditions));
        }

        // 総データ数取得
        $rowset->applyGroupFunctions(['count' => 'COUNT(*)']);
        $result = $rowset->iterate();
        $rowset->destroy();

        return $result['count'];
    }

    /**
     * 指定されたIDのメールアカウント情報を取得
     *
     * @param   string  $account_id    データID
     * @param   boolean $b_server      サーバー情報も取得するかどうか
     * @param   boolean $b_throw_error エラー発生時に例外をスローするか
     *
     * @return  mixed       メールアカウント情報(array) or null
     */
    function getAccountData(
        $account_id,
        $b_server = false,
        $b_throw_error = false
    ) {
        $system_config = $this->_utility->getSystemConfig();

        return $system_config->getAccountData($account_id, $b_server,
            $b_throw_error);
    }

    /**
     * デフォルトで使用するメールアカウントIDを取得
     *
     * @param   boolean $b_throw_error エラー発生時に例外をスローするか(default:FALSE)
     * @param   boolean $b_disabled    使用停止中の場合も取得
     * @param   boolean $b_deleted     アカウントが削除されている場合も取得
     * @param bool      $b_check_server
     *
     * @return  mixed       メールアカウント情報(array) or null
     */
    function getDefaultAccountId(
        $b_throw_error = false,
        $b_disabled = false,
        $b_deleted = false,
        $b_check_server = false
    ) {
        $row = $this->_getDefaultAccountRow($b_disabled, $b_deleted,
            $b_check_server);
        if (is_null($row)) {
            // データが見つからない
            if ($b_throw_error) {
                cb_throw_error(E_GRN_MAIL_ACCOUNT_DATA_NOT_FOUND);
            } else {
                return null;
            }
        }

        return $row->getOID();
    }

    /**
     * デフォルトで使用するメールアカウント情報を取得
     *
     * @param   boolean $b_server      サーバー情報も取得するかどうか
     * @param   boolean $b_throw_error エラー発生時に例外をスローするか(default:FALSE)
     *
     * @return  mixed       メールアカウント情報(array) or null
     */
    function getDefaultAccountData($b_server = false, $b_throw_error = false)
    {
        $row = $this->_getDefaultAccountRow();
        if (is_null($row)) {
            // データが見つからない
            if ($b_throw_error) {
                cb_throw_error(E_GRN_MAIL_ACCOUNT_DATA_NOT_FOUND);
            } else {
                return null;
            }
        }

        $data = $row->getDataProperties($b_server);

        return $data;
    }

    /**
     * 送信可能なアカウントデータかどうか
     *
     * @param   string  $account_id アカウントデータID
     * @param   boolean $no_account アカウント設定有無を受け取る
     * @param   boolean $no_server  サーバー設定有無を受け取る
     *
     * @return  boolean     送信可否
     */
    function checkAccountForSend($account_id, & $no_account, & $no_server)
    {
        $system_config = $this->_utility->getSystemConfig();
        $row = $system_config->_getAccountRow($account_id);
        if ( ! is_object($row)) {
            // アカウントがない
            return false;
        }

        return $row->canSend($no_account, $no_server);
    }

    function checkAccountForOwner($account_id)
    {
        $account = $this->getAccountData($account_id);
        if (is_null($account) || ! array_key_exists('user_id', $account)
            || $account['user_id'] != $this->_user->getOID()
        ) {
            return false;
        }

        return true;
    }

    /**
     * 受信可能なアカウントデータかどうか
     *
     * @param   string  $account_id アカウントデータID
     * @param   boolean $no_account アカウント設定有無を受け取る
     * @param   boolean $no_server  サーバー設定有無を受け取る
     *
     * @return  boolean     送信可否
     */
    function checkAccountForReceive($account_id, & $no_account, & $no_server)
    {
        $system_config = $this->_utility->getSystemConfig();
        $row = $system_config->_getAccountRow($account_id);
        if ( ! is_object($row) || ! is_object($row->get('user'))
             || $row->get('user')->getOID() != $this->_user->getOID()
        ) {
            // アカウントがない
            return false;
        }

        return $row->canReceive($no_account, $no_server);
    }

    /**
     * メールアカウントの追加（自分のみ）
     *
     * @param   string  $foreign_key  アカウントコード
     * @param   string  $name         名前
     * @param   string  $memo         メモ
     * @param   object  $account_info アカウント情報（GRN_Mail_AccountInfo）
     * @param           $send_vcard
     * @param   null    $default_bcc
     * @param   null    $sender
     * @param   boolean $disabled     使用停止フラグ
     * @param   int     $list_index   順番
     *
     * @return  string  オブジェクトID
     */
    function addAccountData(
        $foreign_key,
        $name,
        $memo,
        & $account_info,
        $send_vcard,
        $default_bcc = null,
        $sender = null,
        $disabled = false,
        $list_index = null
    ) {
        // 権限チェック
        $system_config = $this->_utility->getSystemConfig();
        if ( ! $system_config->canUserAllPermission()) {
            cb_throw_error(E_GRN_MAIL_CANNOT_ADD_ACCOUNT_DATA);
        }

        $system_config = $this->_utility->getSystemConfig();

        return $system_config->addAccountData($this->_user, $foreign_key, $name,
            $memo, $account_info, $send_vcard, $default_bcc, $sender, true,
            $disabled, $list_index);
    }

    /**
     * メールアカウントの変更（自分のみ）
     *
     * @param   string  $account_id   データID
     * @param   string  $foreign_key  アカウントコード
     * @param   string  $name         名前
     * @param   string  $memo         メモ
     * @param   object  $account_info アカウント情報（GRN_Mail_AccountInfo）
     * @param           $send_vcard
     * @param   null    $default_bcc
     * @param   null    $sender
     * @param   boolean $disabled     使用停止フラグ(nullの場合は変更しない)
     * @param   int     $list_index   順番(nullの場合は変更しない)
     *
     * @return  string  オブジェクトID
     */
    function modifyAccountData(
        $account_id,
        $foreign_key,
        $name,
        $memo,
        & $account_info,
        $send_vcard,
        $default_bcc = null,
        $sender = null,
        $disabled = null,
        $list_index = null
    ) {
        // 権限チェック
        $system_config = $this->_utility->getSystemConfig();
        if ( ! $system_config->canUserModifyAccount()) {
            cb_throw_error(E_GRN_MAIL_CANNOT_MODIFY_ACCOUNT_DATA);
        }

        $system_config = $this->_utility->getSystemConfig();

        return $system_config->modifyAccountData($account_id, $foreign_key,
            $name, $memo, $account_info, $send_vcard, $default_bcc, $sender,
            $disabled, $list_index);
    }

    /**
     * メールアカウントデータの削除（自分のみ）
     *
     * @param   string  $account_ids    アカウントデータID晴れいつ
     * @param   boolean $b_force_delete メールデータが存在していても強制削除を行う
     *
     * @return  int     削除数
     */
    function deleteAccountDatas($account_ids, $b_force_delete = false)
    {
        // 権限チェック
        $system_config = $this->_utility->getSystemConfig();
        if ( ! $system_config->canUserAllPermission()) {
            cb_throw_error(E_GRN_MAIL_CANNOT_DELETE_ACCOUNT_DATA);
        }

        $system_config = $this->_utility->getSystemConfig();

        return $system_config->deleteAccountDatas($account_ids,
            $b_force_delete);
    }

    /**
     * メールアカウントの順番を設定する（自分のみ）
     *
     * @param array $account_ids メールアカウントデータIDの配列、格納された順番にメールアカウントを配置する
     *
     * @return boolean      成否
     */
    function changeAccountOrder(& $account_ids)
    {
        // 権限チェック
        $system_config = $this->_utility->getSystemConfig();
        if ( ! $system_config->canUserModifyAccount()) {
            cb_throw_error(E_GRN_MAIL_CANNOT_MODIFY_ACCOUNT_DATA);
        }

        $system_config = $this->_utility->getSystemConfig();

        return $system_config->changeAccountOrder($this->_user, $account_ids);
    }

    /**
     * メールアカウントデータ一覧の取得（自分のみ）
     *
     * @param   boolean $b_server    サーバー情報も取得するかどうか
     * @param   boolean $reverse     ソート順。デフォルト:FALSE
     * @param   int     $offset      表示位置。デフォルト:-1
     * @param   int     $limit       表示件数。デフォルト:-1
     * @param   boolean $no_disabled 使用停止データを取得しない。デフォルト:FALSE
     * @param   boolean $no_deleted  削除済みデータを取得しない。デフォルト:TRUE
     * @param   string  $sub_query   サブ検索条件文
     *
     * @return  array   データのリスト
     */
    function &getAccountDataList(
        $b_server = false,
        $reverse = false,
        $offset = -1,
        $limit = -1,
        $no_disabled = false,
        $no_deleted = true,
        $sub_query = null
    ) {
        $system_config = $this->_utility->getSystemConfig();
        $ret = $system_config->getAccountDataList($this->_user,
            $b_server, $reverse, $offset, $limit, $no_disabled, $no_deleted,
            $sub_query);

        return $ret;
    }

    /**
     * メールアカウントの送信情報の変更
     *
     * @param   string $account_id アカウントID
     * @param   string $from_name  送信者名
     *
     * @return void
     */
    function setAccountSendData($account_id, $from_name)
    {
        // アカウントデータ
        $system_config = $this->_utility->getSystemConfig();
        $account = $system_config->_getAccountRow($account_id);
        if ( ! is_object($account)) {
            // アカウントがない
            cb_throw_error(E_GRN_MAIL_ACCOUNT_DATA_NOT_FOUND);
        }

        $account->set('from_name', $from_name);
        $account->updateNow();
    }

    /**
     *
     * アカウントのフォルダの取得
     *
     * @param   string $account_id アカウントID
     * @param   string $folder_id  保存先フォルダID
     *
     * @return GRN_Mail_Folder      フォルダ
     */
    protected function _getAccountFolder($account_id, $folder_id)
    {
        // フォルダデータ
        $folder_config = $this->_utility->getFolderLogic();
        $folder = $folder_config->_getFolderRow($folder_id);
        if ( ! $folder instanceof GRN_Mail_Folder
             || $account_id != $folder->getId('account')
        ) {
            // フォルダがない
            cb_throw_error(E_GRN_MAIL_FOLDER_DATA_NOT_FOUND);
        }

        return $folder;
    }

    /**
     * メール振り分け設定の追加
     *
     * @param   string $account_id           アカウントID
     * @param   string $folder_id            保存先フォルダID
     * @param   string $name                 振り分け名
     * @param   int    $or                   ORフラグ
     * @param   string $status_id            自動で設定するステータス
     * @param   int    $save_address_history 送受信記録に保存するフラグ
     * @param   array  $conditions           条件情報の配列の配列（array of array）
     * @param   int    $list_index           順番（nullの場合は設定しない）
     *
     * @return  string  振り分け設定ID
     */
    function addFilterData(
        $account_id,
        $folder_id,
        $name,
        $or,
        $status_id,
        $save_address_history,
        & $conditions,
        $list_index = null
    ) {
        assert('! is_null( $account_id )');
        assert('! is_null( $folder_id )');

        // アカウントデータ
        $system_config = $this->_utility->getSystemConfig();
        $account = $system_config->_getAccountRow($account_id);
        if ( ! is_object($account)) {
            // アカウントがない
            cb_throw_error(E_GRN_MAIL_ACCOUNT_DATA_NOT_FOUND);
        }

        // 振り分け設定データテーブル
        $table = $this->_utility->getTableInfo(GRN_MAIL_FILTER_TABLE);

        // データ追加
        $row = $table->newRow();
        if ( ! is_object($row)) {
            // データ追加失敗
            cb_throw_error(E_GRN_MAIL_FAILED_TO_ADD_FILTER_DATA);
        }

        $row->set('account', $account);

        $row->set('folder', $this->_getAccountFolder($account_id, $folder_id));

        // プロパティ
        $row->set('name', $name);
        $row->set('or', $or);

        // 自動で設定するステータス
        require_once('mail/status.csp');
        $status = grn_mail_get_status_row($status_id);
        if ( ! $status) {
            $status = grn_mail_get_status_row(GRN_MAIL_STATUS_CODE_DEFAULT);
        }
        $row->set('status', $status);

        // 送受信記録に保存するフラグ
        $row->set('not_save_address_history',
            intval($save_address_history) == 0);

        if ( ! is_null($list_index)) {
            $row->set('list_index', $list_index);
        }

        $row->registerNow();

        // 条件
        $row->setConditions($conditions);

        return $row->getOID();
    }

    /**
     * メール振り分け設定の変更
     *
     * @param   string $filter_id  データID
     * @param   string $folder_id  保存先フォルダID
     * @param   string $name       振り分け名
     * @param   int    $or         ORフラグ
     * @param          $status_id
     * @param          $save_address_history
     * @param   array  $conditions 条件情報の配列の配列（array of array）
     * @param   int    $list_index 順番（nullの場合は設定しない）
     *
     * @return  boolean
     */
    function modifyFilterData(
        $filter_id,
        $folder_id,
        $name,
        $or,
        $status_id,
        $save_address_history,
        & $conditions,
        $list_index = null
    ) {
        assert('! is_null( $filter_id )');

        // 振り分け設定データを取得
        $row = $this->_getFilterRow($filter_id);
        if ( ! is_object($row)) {
            // データが見つからない
            cb_throw_error(E_GRN_MAIL_GET_FILTER_DATA_NOT_FOUND);
        }
        $account = $row->get('account');
        $isAuthoried = false;
        if (is_object($account)) {
            $user = $account->get('user');
            if (is_object($user) && $user->getOID() == $this->_user->getOID()) {
                $isAuthoried = true;
            }
        }
        if ( ! $isAuthoried) {
            cb_throw_error(E_GRN_MAIL_GET_FILTER_DATA_NOT_FOUND);
        }

        $row->set('folder',
            $this->_getAccountFolder($row->getID('account'), $folder_id));

        // プロパティ
        $row->set('name', $name);
        $row->set('or', $or);

        // 自動で設定するステータス
        require_once('mail/status.csp');
        $status = grn_mail_get_status_row($status_id);
        if ( ! $status) {
            $status = grn_mail_get_status_row(GRN_MAIL_STATUS_CODE_DEFAULT);
        }
        $row->set('status', $status);

        // 送受信記録に保存するフラグ
        $row->set('not_save_address_history',
            intval($save_address_history) == 0);

        if ( ! is_null($list_index)) {
            $row->set('list_index', $list_index);
        }

        // 条件
        $row->setConditions($conditions);
        $row->updateNow();

        return true;
    }

    /**
     * 振り分け設定データの削除
     *
     * @param   string $filter_id データID
     *
     * @return  boolean 成否
     */
    function deleteFilterData($filter_id)
    {
        // 振り分け設定データを取得
        $row = $this->_getFilterRow($filter_id);
        if ( ! is_object($row)) {
            // データが見つからない
            return true;
        }
        $account = $row->get('account');
        $isAuthoried = false;
        if ( ! is_null($account) && is_object($account)) {
            $user = $account->get('user');
            if ( ! is_null($user) && is_object($user)
                 && $user->getOID() == $this->_user->getOID()
            ) {
                $isAuthoried = true;
            }
        }
        if ( ! $isAuthoried) {
            cb_throw_error(E_GRN_MAIL_GET_FILTER_DATA_NOT_FOUND);
        }

        if ( ! $row->delete()) {
            cb_throw_error(E_GRN_MAIL_FAILED_TO_DELETE_FILTER_DATA);
        }

        return true;
    }

    /**
     * 振り分け設定の順番を設定する
     *
     * @param array $filter_ids 振り分け設定データIDの配列、格納された順番に配置する
     *
     * @return boolean      成否
     */
    function changeFilterOrder(& $filter_ids)
    {
        assert('is_array( $filter_ids )');

        $list_index = 0;
        foreach ($filter_ids as $filter_id) {
            // 振り分け設定データを取得
            $row = $this->_getFilterRow($filter_id);
            if ( ! is_object($row)) {
                // 見つからないデータは無視
                continue;
            }
            $account = $row->get('account');
            $isAuthoried = false;
            if (is_object($account)) {
                $user = $account->get('user');
                if (is_object($user)
                    && $user->getOID() == $this->_user->getOID()
                ) {
                    $isAuthoried = true;
                }
            }
            if ( ! $isAuthoried) {
                continue;
            }
            $list_index++;
            $row->set('list_index', $list_index);
        }

        return true;
    }

    /**
     * メール振り分け設定の取得
     *
     * @param   string  $filter_id データID
     * @param   boolean $b_detail  振り分け条件を取得するか
     *
     * @return  array
     */
    function getFilterData($filter_id, $b_detail)
    {
        assert('! is_null( $filter_id )');

        // 振り分け設定データを取得
        $row = $this->_getFilterRow($filter_id);
        if ( ! is_object($row)) {
            // データが見つからない
            cb_throw_error(E_GRN_MAIL_GET_FILTER_DATA_NOT_FOUND);
        }

        return $row->getDataProperties($b_detail);
    }

    /**
     * 振り分け設定データ一覧の取得
     *
     * @param   stirng  $account_id 一覧を取得するアカウントID
     * @param   boolean $b_detail   振り分け条件を取得するか
     * @param   string  $sub_query  サブ検索条件文
     *
     * @return  array   データのリスト
     */
    function getFilterDataList($account_id, $b_detail, $sub_query = null)
    {
        assert('! is_null( $account_id )');

        // データリスト
        $data_list = [];

        $rowset
            = new CB_RowSet($this->_utility->getTableInfo(GRN_MAIL_FILTER_TABLE));
        if (is_null($rowset)) {
            return $data_list;
        }

        // 指定されたアカウント
        $rowset->addCondition($rowset->queryf("col_account = '@S'",
            $account_id));

        // サブ検索条件文を追加
        if ( ! is_null($sub_query) && 0 < strlen($sub_query)) {
            $rowset->addCondition($sub_query);
        }

        // ソート
        $rowset->addOrderColumn('col_list_index', false);      // ソート
        $rowset->addOrderColumn(null, false);                  // OID順

        // データ一覧ループ
        /** @var GRN_Mail_Filter $row */
        while ( ! is_null($row = $rowset->iterate())) {
            // データプロパティの取得
            $data = $row->getDataProperties($b_detail);
            if (is_null($data)) {
                assert('FALSE');
                continue;
            }

            $data_list[$row->getOID()] = $data;
        }

        return $data_list;
    }

    /**
     * 署名設定データ一覧の取得
     *
     * @param   stirng  $sign_id       署名ID
     * @param   boolean $b_detail      内容を取得するか
     * @param   boolean $b_throw_error エラー発生時に例外をスローするか
     *
     * @return  array   署名データ
     */
    function getSignatureData($sign_id, $b_detail, $b_throw_error = false)
    {
        assert('! is_null( $sign_id )');

        // 署名設定データを取得
        $row = $this->_getSignatureRow($sign_id);
        if ( ! is_object($row)) {
            if ($b_throw_error) {
                cb_throw_error(E_GRN_MAIL_SIGNATURE_DATA_NOT_FOUND);
            } else {
                return null;
            }
        }

        // データプロパティの取得
        $data = $row->getDataProperties($b_detail);
        if (is_null($data)) {
            if ($b_throw_error) {
                cb_throw_error(E_GRN_MAIL_SIGNATURE_DATA_NOT_FOUND);
            } else {
                return null;
            }
        }

        return $data;
    }

    /**
     * メール署名設定の追加
     *
     * @param   string $account_id アカウントID
     * @param   string $name       署名名称
     * @param   string $data       署名内容
     * @param   string $html_data  署名内容(HTML)（拡張用）
     * @param   int    $list_index 順番（nullの場合は設定しない）
     * @param null     $position_signature
     *
     * @return  string  ID
     */
    function addSignatureData(
        $account_id,
        $name,
        $data,
        $html_data = null,
        $list_index = null,
        $position_signature = null
    ) {
        assert('! is_null( $account_id )');

        // アカウントデータ
        $system_config = $this->_utility->getSystemConfig();
        $account = $system_config->_getAccountRow($account_id);
        if ( ! is_object($account)) {
            // アカウントがない
            cb_throw_error(E_GRN_MAIL_ACCOUNT_DATA_NOT_FOUND);
        }

        // 署名設定データテーブル
        $table = $this->_utility->getTableInfo(GRN_MAIL_SIGNATURE_TABLE);

        // データ追加
        $row = $table->newRow();
        if ( ! is_object($row)) {
            // データ追加失敗
            cb_throw_error(E_GRN_MAIL_FAILED_TO_ADD_SIGNATURE_DATA);
        }

        $row->set('account', $account);

        // プロパティ
        $row->set('name', $name);
        $row->set('data', $data);
        //$row->set( 'html_data', $html_data );

        $ctime = new CB_TimeStamp;
        $ctime->unix_ts = time();
        $row->set('ctime', $ctime);
        $row->set('mtime', $ctime);

        if ( ! is_null($list_index)) {
            $row->set('list_index', $list_index);
        }

        $row->set('position', $position_signature);
        $row->registerNow();

        return $row->getOID();
    }

    /**
     * メール署名設定の変更
     *
     * @param   string $sign_id    データID
     * @param   string $name       署名名称
     * @param   string $data       署名内容
     * @param   string $html_data  署名内容(HTML)（拡張用）
     * @param   int    $list_index 順番（nullの場合は設定しない）
     * @param null     $position_signature
     *
     * @return  boolean
     */
    function modifySignatureData(
        $sign_id,
        $name,
        $data,
        $html_data = null,
        $list_index = null,
        $position_signature = null
    ) {
        assert('! is_null( $sign_id )');

        // 署名設定データを取得
        $row = $this->_getSignatureRow($sign_id);
        if ( ! is_object($row)) {
            // データが見つからない
            cb_throw_error(E_GRN_MAIL_SIGNATURE_DATA_NOT_FOUND);
        }

        $isAuthoried = false;
        $account = $row->get('account');
        if ( ! is_null($account) && is_object($account)) {
            $user = $account->get('user');
            if ( ! is_null($user) && is_object($user)
                 && $user->getOID() == $this->_user->getOID()
            ) {
                $isAuthoried = true;
            }
        }
        if ( ! $isAuthoried) {
            cb_throw_error(E_GRN_MAIL_SIGNATURE_DATA_NOT_FOUND);
        }

        // プロパティ
        $row->set('name', $name);
        $row->set('data', $data);

        $mtime = new CB_TimeStamp;
        $mtime->unix_ts = time();
        $row->set('mtime', $mtime);

        if ( ! is_null($list_index)) {
            $row->set('list_index', $list_index);
        }

        $row->set('position', $position_signature);
        $row->updateNow();

        return true;
    }

    /**
     * 署名設定データの削除
     *
     * @param array $signature_ids 署名設定データIDの配列、格納された順番に配置する
     *
     * @return  boolean 成否
     */
    function deleteSignatureDatas(& $signature_ids)
    {
        assert('is_array( $signature_ids )');

        foreach ($signature_ids as $sign_id) {
            // 署名設定データを取得
            $row = $this->_getSignatureRow($sign_id);
            if ( ! is_object($row)) {
                // 見つからないデータは無視
                continue;
            }
            $isAuthoried = false;
            $account = $row->get('account');
            if ( ! is_null($account) && is_object($account)) {
                $user = $account->get('user');
                if ( ! is_null($user) && is_object($user)
                     && $user->getOID() == $this->_user->getOID()
                ) {
                    $isAuthoried = true;
                }
            }
            if ( ! $isAuthoried) {
                continue;
            }
            if ( ! $row->delete()) {
                cb_throw_error(E_GRN_MAIL_FAILED_TO_DELETE_SIGNATURE_DATA);
            }
        }

        return true;
    }

    /**
     * 署名設定の順番を設定する
     *
     * @param array $signature_ids 署名設定データIDの配列、格納された順番に配置する
     *
     * @return boolean      成否
     */
    function changeSignatureOrder(& $signature_ids)
    {
        assert('is_array( $signature_ids )');

        $list_index = 0;
        foreach ($signature_ids as $sign_id) {
            // 署名設定データを取得
            $row = $this->_getSignatureRow($sign_id);
            if ( ! is_object($row)) {
                // 見つからないデータは無視
                continue;
            }
            $isAuthoried = false;
            $account = $row->get('account');
            if ( ! is_null($account) && is_object($account)) {
                $user = $account->get('user');
                if ( ! is_null($user) && is_object($user)
                     && $user->getOID() == $this->_user->getOID()
                ) {
                    $isAuthoried = true;
                }
            }
            if ( ! $isAuthoried) {
                continue;
            }

            $list_index++;
            $row->set('list_index', $list_index);
        }

        return true;
    }

    /**
     * 署名設定データ一覧の取得
     *
     * @param   stirng  $account_id 一覧を取得するアカウントID
     * @param   boolean $b_detail   内容を取得するか
     * @param   bool    $reverse
     * @param   string  $sub_query  サブ検索条件文
     *
     * @return  array   データのリスト
     */
    function getSignatureDataList(
        $account_id,
        $b_detail,
        $reverse = false,
        $sub_query = null
    ) {
        assert('! is_null( $account_id )');

        // データリスト
        $data_list = [];

        $rowset
            = new CB_RowSet($this->_utility->getTableInfo(GRN_MAIL_SIGNATURE_TABLE));
        if (is_null($rowset)) {
            return $data_list;
        }

        // 指定されたアカウント
        $rowset->addCondition($rowset->queryf("col_account = '@S'",
            $account_id));

        // サブ検索条件文を追加
        if ( ! is_null($sub_query) && 0 < strlen($sub_query)) {
            $rowset->addCondition($sub_query);
        }

        // ソート
        $rowset->addOrderColumn('col_list_index', $reverse);     // ソート
        $rowset->addOrderColumn(null, $reverse);                  // OID順

        // データ一覧ループ
        /** @var GRN_Mail_Signature $row */
        while ( ! is_null($row = $rowset->iterate())) {
            // データプロパティの取得
            $data = $row->getDataProperties($b_detail);
            if (is_null($data)) {
                assert('FALSE');
                continue;
            }

            $data_list[$row->getOID()] = $data;
        }

        return $data_list;
    }

    /**
     * 一般設定を保存
     *
     * @param   array $settings 設定
     *                          boolean 'list_name_format'  一覧に表示する形式（'name'/'email'/'full'）
     *                          boolean 'save_sentfile'     送信メールの添付ファイルを保存する
     *                          boolean 'preview'           送信前の確認
     *
     * @return  boolean 成否
     */
    function setGeneralSetting($settings)
    {
        if ( ! is_array($settings)) {
            return false;
        }

        // ユーザープロファイルを取得する
        $profile = $this->_getProfile();
        if (is_null($profile)) {
            // プロファイルデータ更新失敗
            cb_throw_error(E_GRN_MAIL_FAILED_TO_UPDATE_PROFILE_DATA);
        }

        $profile_settings = [];
        if (isset($settings['list_name_format'])
            && is_string($settings['list_name_format'])
        ) {
            $profile_settings['list_name_format']
                = $settings['list_name_format'];
        }

        if (isset($settings['save_sentfile'])
            && ! is_null($settings['save_sentfile'])
        ) {
            $profile_settings['save_sentfile'] = $settings['save_sentfile'];
        }

        if (isset($settings['preview']) && ! is_null($settings['preview'])) {
            $profile_settings['preview'] = intval($settings['preview']) != 0;
        }

        if (isset($settings['charset']) && is_string($settings['charset'])) {
            $profile_settings['charset'] = $settings['charset'];
        }

        return $this->_utility->setProfileSetting($profile, $profile_settings);
    }

    /**
     * ごみ箱の設定を取得
     *
     * @param   mixed $settings 設定を受け取る
     *                          boolean 'list_name_format'  一覧に表示する形式（'name'/'email'/'full'）
     *                          boolean 'save_sentfile'     送信メールの添付ファイルを保存する
     *                          boolean 'preview'           送信前の確認
     *
     * @return  boolean 成否
     */
    function getGeneralSetting(& $settings)
    {
        // ユーザープロファイルを取得する
        $profile = $this->_getProfile();
        assert('! is_null( $profile )');


        $settings = [];

        // 個人設定の取得
        $value = null;
        if ($this->_utility->getProfileSetting($profile, 'list_name_format',
            $value)
        ) {
            $settings['list_name_format'] = $value;
        } else {
            // デフォルト
            $settings['list_name_format'] = GRN_MAIL_DEFAULT_NAME_FORMAT;
        }

        if ($this->_utility->getProfileSetting($profile, 'save_sentfile',
            $value)
        ) {
            $settings['save_sentfile'] = (intval($value) != 0);
        } else {
            // デフォルト
            $settings['save_sentfile'] = GRN_MAIL_DEFAULT_SAVE_SENTFILE;
        }

        if ($this->_utility->getProfileSetting($profile, 'preview', $value)) {
            $settings['preview'] = (intval($value) != 0);
        } else {
            // デフォルト
            $settings['preview'] = GRN_MAIL_DEFAULT_PREVIEW;
        }

        if ($this->_utility->getProfileSetting($profile, 'charset', $value)) {
            $settings['charset'] = $value;
        } else {
            // デフォルト
            $settings['charset'] = GRN_MAIL_DEFAULT_CHARSET;
        }

        return true;
    }

    /**
     * 一覧に表示する形式を取得
     *
     * @return  string  $list_name_format   一覧に表示する形式（'name'/'email'/'full'）を受け取る
     */
    function getListNameFormatSetting()
    {
        // デフォルト
        $list_name_format = GRN_MAIL_DEFAULT_NAME_FORMAT;

        // ユーザープロファイルを取得する
        $profile = $this->_getProfile();
        if ( ! is_null($profile)) {
            // 個人設定の取得
            $value = null;
            $name = 'list_name_format';
            if ($this->_utility->getProfileSetting($profile, $name, $value)) {
                $list_name_format = $value;
            }
        }

        return $list_name_format;
    }

    /**
     * データの保存期間の設定を保存
     *
     * @param   boolean $use_trash ごみ箱を使用するか
     * @param   int     $save_days ごみ箱に保存する期間（日）
     *
     * @return  boolean 成否
     */
    function setTrashSetting($use_trash, $save_days)
    {
        // ユーザープロファイルを取得する
        $profile = $this->_getProfile();
        if (is_null($profile)) {
            // プロファイルデータ更新失敗
            cb_throw_error(E_GRN_MAIL_FAILED_TO_UPDATE_PROFILE_DATA);
        }

        if (is_null($use_trash) || is_null($save_days)
            || ((int)$save_days < -1)
        ) {
            // データ不正
            assert('FALSE');

            return false;
        }

        $use_trash = ((int)$use_trash === 1);
        $save_days = (int)$save_days;

        // 設定の保存
        $name = 'trash_using';
        if ( ! $this->_utility->updateProfile($profile, $name, $use_trash)) {
            // プロファイルデータ更新失敗
            cb_throw_error(E_GRN_MAIL_FAILED_TO_UPDATE_PROFILE_DATA);
        }

        $name = 'trash_save_days';
        if ( ! $this->_utility->updateProfile($profile, $name, $save_days)) {
            // プロファイルデータ更新失敗
            cb_throw_error(E_GRN_MAIL_FAILED_TO_UPDATE_PROFILE_DATA);
        }

        // キャッシュ更新
        $this->_trash_using = $use_trash;
        $this->_trash_savedays = $save_days;

        return true;
    }

    /**
     * ごみ箱の設定を取得
     *
     * @param   boolean $use_trash ごみ箱を使用するかを受け取る
     * @param   int     $save_days ごみ箱に保存する期間（日）を受け取る
     *
     * @return  boolean 成否
     */
    function getTrashSetting(& $use_trash, & $save_days)
    {
        // キャッシュチェック
        if ( ! is_null($this->_trash_using)
             && ! is_null($this->_trash_savedays)
        ) {
            $use_trash = $this->_trash_using;
            $save_days = $this->_trash_savedays;

            return true;
        }

        // デフォルト
        $use_trash = true;
        $save_days = GRN_MAIL_DEFAULT_TRASH_SAVEDAYS;

        // ユーザープロファイルを取得する
        $profile = $this->_getProfile();
        if ( ! is_null($profile)) {
            // 個人設定の取得
            $value = null;
            $name = 'trash_using';
            if ($this->_utility->getProfileSetting($profile, $name, $value)) {
                $use_trash = ((int)$value === 1);
            }

            $name = 'trash_save_days';
            if ($this->_utility->getProfileSetting($profile, $name, $value)) {
                $save_days = (int)$value;
            }
        }

        // キャッシュ更新
        $this->_trash_using = $use_trash;
        $this->_trash_savedays = $save_days;

        return true;
    }

    /**
     * 送受信記録機能の設定を保存
     *
     * @param   array $settings 設定
     *                          boolean 'use'           使用するか
     *
     * @return  boolean 成否
     */
    function setAddressHistorySetting(& $settings)
    {
        if ( ! is_array($settings)) {
            assert('FALSE');

            return false;
        }

        // ユーザープロファイルを取得する
        $profile = $this->_getProfile();
        if (is_null($profile)) {
            // プロファイルデータ更新失敗
            cb_throw_error(E_GRN_MAIL_FAILED_TO_UPDATE_PROFILE_DATA);
        }

        if (isset($settings['use'])) {
            $b_use = $settings['use'];
            if (is_null($b_use) || ($b_use != true)) {
                $b_use = false;
            }

            // 設定の保存
            $name = 'address_history_using';
            if ( ! $this->_utility->updateProfile($profile, $name, $b_use)) {
                // プロファイルデータ更新失敗
                cb_throw_error(E_GRN_MAIL_FAILED_TO_UPDATE_PROFILE_DATA);
            }
        }

        return true;
    }

    /**
     * 送受信記録機能の設定を取得
     *
     * @param   array $settings 設定を受け取る
     *                          boolean 'use'           使用するか
     *
     * @return  boolean 成否
     */
    function getAddressHistorySetting(& $settings)
    {
        // ユーザープロファイルを取得する
        $profile = $this->_getProfile();
        assert('! is_null( $profile )');

        $settings = [];
        if ( ! $this->_utility->getProfileSetting($profile,
            'address_history_using', $b_use)
        ) {
            // デフォルト
            $settings['use'] = true;
        } else {
            $settings['use'] = ( ! is_null($b_use) && ($b_use == true));
        }

        return true;
    }

    /**
     * 開封確認機能の設定を保存
     *
     * @param   array $settings 設定
     *                          boolean 'use_for_sending'   送信時に使用するか
     *                          string  'response'          受信時に要求に対する返答（'auto' / 'manual' / 'ignore' ）
     *                          boolean 'no_response_bcc'   ToまたはCCに含まれないときは返信しない
     *
     * @return  boolean 成否
     */
    function setConfirmSetting(& $settings)
    {
        if ( ! is_array($settings)) {
            assert('FALSE');

            return false;
        }

        // ユーザープロファイルを取得する
        $profile = $this->_getProfile();
        if (is_null($profile)) {
            // プロファイルデータ更新失敗
            cb_throw_error(E_GRN_MAIL_FAILED_TO_UPDATE_PROFILE_DATA);
        }

        // 送信時の設定更新
        $b_use_for_sending = '';
        if (isset($settings['use_for_sending'])) {
            $b_use_for_sending = $settings['use_for_sending'];
            if (is_null($b_use_for_sending)
                || (intval($b_use_for_sending) != 1)
            ) {
                $b_use_for_sending = 0;
            } else {
                $b_use_for_sending = 1;
            }

            // 設定の保存
            $name = 'confirmation_use_for_sending';
            if ( ! $this->_utility->updateProfile($profile, $name,
                $b_use_for_sending)
            ) {
                // プロファイルデータ更新失敗
                cb_throw_error(E_GRN_MAIL_FAILED_TO_UPDATE_PROFILE_DATA);
            }

        }

        // 受信時に要求に対する返答の設定更新
        $response = '';
        if (isset($settings['response']) && is_string($settings['response'])) {
            $response = is_string($settings['response'])
                ? strtolower($settings['response']) : $settings['response'];
            if (($response != 'auto') && ($response != 'ignore')) {
                // デフォルト
                $response = 'manual';
            }

            // 設定の保存
            $name = 'confirmation_response';
            if ( ! $this->_utility->updateProfile($profile, $name, $response)) {
                // プロファイルデータ更新失敗
                cb_throw_error(E_GRN_MAIL_FAILED_TO_UPDATE_PROFILE_DATA);
            }
        }

        // ToまたはCCに含まれないときは返信しない設定
        $b_no_response_bcc = '';
        if (isset($settings['no_response_bcc'])) {
            $b_no_response_bcc = $settings['no_response_bcc'];
            if (is_null($b_no_response_bcc)
                || (intval($b_no_response_bcc) != 1)
            ) {
                $b_no_response_bcc = 0;
            } else {
                $b_no_response_bcc = 1;
            }

            // 設定の保存
            $name = 'confirmation_no_response_bcc';
            if ( ! $this->_utility->updateProfile($profile, $name,
                $b_no_response_bcc)
            ) {
                // プロファイルデータ更新失敗
                cb_throw_error(E_GRN_MAIL_FAILED_TO_UPDATE_PROFILE_DATA);
            }
        }

        $properties = [
            'use_for_sending' => $b_use_for_sending,
            'response'        => $response,
            'no_response_bcc' => $b_no_response_bcc
        ];
        if ($response !== 'auto') {
            unset($properties['no_response_bcc']);
        }
        // log
        require_once('mail/inspection.csp');
        $inspection = GRN_Mail_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            $inspection->writeInspectionLog('config', 'confirm', $properties);
        }

        return true;
    }

    /**
     * 開封確認機能の設定を取得
     *
     * @param   array $settings 設定を受け取る
     *                          boolean 'use_for_sending'   送信時に使用するか
     *                          string  'response'          受信時に要求に対する返答（'auto' / 'manual' / 'ignore' ）
     *                          boolean 'no_response_bcc'   ToまたはCCに含まれないときは返信しない
     *
     * @return  boolean 成否
     */
    function getConfirmSetting(& $settings)
    {
        // ユーザープロファイルを取得する
        $profile = $this->_getProfile();
        assert('! is_null( $profile )');

        // 送信時の設定
        if ( ! $this->_utility->getProfileSetting($profile,
            'confirmation_use_for_sending', $b_use_for_sending)
        ) {
            // デフォルト
            $settings['use_for_sending'] = 1;
        } else {
            $settings['use_for_sending'] = ( ! is_null($b_use_for_sending)
                                             && ($b_use_for_sending != 0)) ? 1
                : 0;
        }

        // 受信時に要求に対する返答の設定
        if ( ! $this->_utility->getProfileSetting($profile,
            'confirmation_response', $response)
        ) {
            // デフォルト
            $settings['response'] = 'manual';
        } else {
            if (is_null($response) || ! is_string($response)) {
                // デフォルト
                $settings['response'] = 'manual';
            } else {
                $settings['response'] = $response;
            }
        }

        // ToまたはCCに含まれないときは返信しない設定
        if ( ! $this->_utility->getProfileSetting($profile,
            'confirmation_no_response_bcc', $b_no_response_bcc)
        ) {
            // デフォルト
            $settings['no_response_bcc'] = 0;
        } else {
            $settings['no_response_bcc'] = ( ! is_null($b_no_response_bcc)
                                             && ($b_no_response_bcc != 0)) ? 1
                : 0;
        }

        return true;
    }

    /**
     * ステータス管理機能の設定を保存
     *
     * @param   array $settings 設定
     *                          boolean 'use'           使用するか
     *
     * @return  boolean 成否
     */
    function setStatusSetting(& $settings)
    {
        if ( ! is_array($settings)) {
            assert('FALSE');

            return false;
        }

        // ユーザープロファイルを取得する
        $profile = $this->_getProfile();
        if (is_null($profile)) {
            // プロファイルデータ更新失敗
            cb_throw_error(E_GRN_MAIL_FAILED_TO_UPDATE_PROFILE_DATA);
        }

        if (isset($settings['use'])) {
            $b_use = $settings['use'];
            if (is_null($b_use) || ($b_use != true)) {
                $b_use = false;
            }

            // 設定の保存
            $name = 'status_using';
            if ( ! $this->_utility->updateProfile($profile, $name, $b_use)) {
                // プロファイルデータ更新失敗
                cb_throw_error(E_GRN_MAIL_FAILED_TO_UPDATE_PROFILE_DATA);
            }
        }

        return true;
    }

    /**
     * ステータス管理機能の設定を取得
     *
     * @param   array $settings 設定を受け取る
     *                          boolean 'use'           使用するか
     *
     * @return  boolean 成否
     */
    function getStatusSetting(& $settings)
    {
        // ユーザープロファイルを取得する
        $profile = $this->_getProfile();
        assert('! is_null( $profile )');

        $settings = [];
        if ( ! $this->_utility->getProfileSetting($profile, 'status_using',
            $b_use)
        ) {
            // デフォルト
            $settings['use'] = true;
        } else {
            $settings['use'] = ( ! is_null($b_use) && ($b_use == true));
        }

        return true;
    }

    /**
     * データの自動削除を行ったタイムスタンプを保存
     *
     * @param   object $timestamp 自動削除を行ったタイムスタンプ（CB_TimeStamp）
     *
     * @return  boolean 成否
     */
    function setLastCleaningTime(& $timestamp)
    {
        // のユーザープロファイルを取得する
        $profile = $this->_getProfile();
        if (is_null($profile)) {
            // プロファイルデータ更新失敗
            cb_throw_error(E_GRN_MAIL_FAILED_TO_UPDATE_PROFILE_DATA);
        }

        if ( ! is_a($timestamp, 'CB_TimeStamp')) {
            // データ不正
            assert('FALSE');

            return false;
        }

        // 設定の保存
        if ( ! $this->_utility->updateProfile($profile, 'last_cleaning_ts',
            $timestamp)
        ) {
            // プロファイルデータ更新失敗
            cb_throw_error(E_GRN_MAIL_FAILED_TO_UPDATE_PROFILE_DATA);
        }

        return true;
    }

    /**
     * データの自動削除を行ったタイムスタンプを取得
     *
     * @param   mixed $timestamp 自動削除を行ったタイムスタンプを受け取る（CB_TimeStamp or null）
     *
     * @return  boolean 成否
     */
    function getLastCleaningTime(& $timestamp)
    {
        // デフォルト
        $timestamp = null;

        // 通知サービスのユーザープロファイルを取得する
        $profile = $this->_getProfile();
        if (is_null($profile)) {
            // まだ設定されていない
            return true;
        }

        // プロファイルデータの取得
        $value = null;
        if ($profile->getAttribute('last_cleaning_ts', $value)) {
            $timestamp = $value;
        }

        return true;
    }

    /**
     * 送受信できる設定がされているか
     *
     * @param   mixed   $account_list アカウントデータ配列 or null
     * @param   boolean $can_recv     1つでも受信可能なカウントがあるか受け取る
     * @param   boolean $can_send     1つでも送信可能なカウントがあるか受け取る
     *
     * @return  boolean 送受信とも可ならTRUE
     */
    function checkCommunicationSetting(
        & $account_list,
        & $can_recv,
        & $can_send
    ) {
        $can_recv = $can_send = false;

        if ( ! is_array($account_list)) {
            $account_list = $this->getAccountDataList(false);
            if ( ! is_array($account_list)) {
                return false;
            }
        }

        $no_account = $no_server = true;
        foreach (array_keys($account_list) as $account_id) {
            // 受信可能なアカウントかチェック
            if ( ! $can_recv) {
                if ($this->checkAccountForReceive($account_id, $no_account,
                    $no_server)
                ) {
                    $can_recv = true;
                }
            }

            // 送信可能なアカウントかチェック
            if ( ! $can_send) {
                if ($this->checkAccountForSend($account_id, $no_account,
                    $no_server)
                ) {
                    $can_send = true;
                }
            }

            if ($can_recv && $can_send) {
                return true;
            }
        }

        return false;
    }


    /**
     * メールデータのインポート
     *
     * @param   string        $format    入力ファイルのフォーマット（'mbox' / 'eml' ）
     * @param   CB_ServerFile $file      入力ファイル
     * @param   string        $folder_id 出力先フォルダID
     *
     * @return  int         出力したメール数
     **/
    function importMaildatas($format, $file, $folder_id)
    {
        $folder_logic = $this->_utility->getFolderLogic();
        $folder = $folder_logic->_getFolderRow($folder_id);
        if ( ! is_object($folder)) {
            cb_throw_error(E_GRN_MAIL_FOLDER_DATA_NOT_FOUND);
        }

        // フォルダのユーザーチェック
        $user = $folder->get('user');
        if ( ! is_object($user)
             || ($user->getOID() != $this->_user->getOID())
        ) {
            cb_throw_error(E_GRN_MAIL_FOLDER_DATA_NOT_FOUND);
        }

        $account = null;
        $mail_logic = $this->_utility->getMailLogic();
        switch ($format) {
            case 'eml':
                // emlファイルの読み込み
                if ($mail_logic->importMailDatasFromEmlFile($this->_user, $file,
                    $account, $folder)
                ) {
                    return 1;
                }

                return 0;

            case 'mbox':
                // UNIX mboxファイルの読み込み
                $ret = $mail_logic->importMailDatasFromMboxFile($this->_user,
                    $file, $account, $folder);

                return $ret;

            default:
                // 未対応のフォーマット
                cb_throw_error();
        }

        return $ret;
    }

    public function setPersonalPane($pane)
    {
        if (2 !== $pane && 3 !== $pane) {
            return false;
        }

        // ユーザープロファイルを取得する
        $profile = $this->_getProfile();
        if (is_null($profile)) {
            // プロファイルデータ更新失敗
            cb_throw_error(E_GRN_MAIL_FAILED_TO_UPDATE_PROFILE_DATA);
        }

        $setting = ['pane' => $pane];

        return $this->_utility->setProfileSetting($profile, $setting);
    }

    public function getPersonalPane()
    {
        $profile = $this->_getProfile();
        assert('! is_null( $profile )');

        $pane = null;
        $this->_utility->getProfileSetting($profile, 'pane', $pane);

        return $pane;
    }

    public function setPaneInfo($pane_info)
    {
        if ( ! is_array($pane_info)) {
            return false;
        }

        if ( ! array_key_exists('left', $pane_info)
             || ! array_key_exists('middle', $pane_info)
        ) {
            return false;
        }

        // ユーザープロファイルを取得する
        $profile = $this->_getProfile();
        if (is_null($profile)) {
            // プロファイルデータ更新失敗
            cb_throw_error(E_GRN_MAIL_FAILED_TO_UPDATE_PROFILE_DATA);
        }

        $setting = ['pane_info' => $pane_info];

        return $this->_utility->setProfileSetting($profile, $setting);
    }

    public function getPaneInfo()
    {
        $profile = $this->_getProfile();
        assert('! is_null( $profile )');

        $pane_info = [];
        if ($this->_utility->getProfileSetting($profile, 'pane_info',
            $pane_info)
        ) {
            if ( ! array_key_exists('left', $pane_info)
                 || ! array_key_exists('middle', $pane_info)
            ) {
                $pane_info = [
                    'left'   => GRN_MAIL_DEFAULT_LEFT_WIDTH,
                    'middle' => GRN_MAIL_DEFAULT_MIDDLE_WIDTH
                ];
            }
        } else {
            $pane_info = [
                'left'   => GRN_MAIL_DEFAULT_LEFT_WIDTH,
                'middle' => GRN_MAIL_DEFAULT_MIDDLE_WIDTH
            ];
        }

        return $pane_info;
    }
}
