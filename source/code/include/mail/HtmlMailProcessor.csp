<?php

namespace grn\mail;

require_once('grn/controller.csp');

class HtmlMailProcessor extends \GRN_SafeHtml
{
    /**
     * @var string[]
     */
    private $fileFoundContentIds = [];

    /**
     * @var bool
     */
    private $showImage;

    /**
     * @var HtmlMailInlineContents
     */
    private $files;

    public function __construct()
    {
        /**
         * List of dangerous tags (such tags will be deleted)
         * This is some more dangerous tags that are not listed at GRN_SafeHtml
         */
        $deleteTags = [
            'area',
            'button',
            'form',
            'ilayer',
            'input',
            'isindex',
            'label',
            'map',
            'optgroup',
            'option',
            'param',
            'select',
            'textarea',
            'audio',
            'canvas',
            'data',
            'datalist',
            'keygen',
            'main',
            'output',
            'source',
            'track',
            'video'
        ];

        array_push($this->attributes, 'srcdoc', 'srcset');

        /**
         * List of "safe" protocols(used for whitelist-filtering) that are not listed at GRN_SafeHtml
         */
        $whiteProtocols = ['wais'];
        /**
         * List of attributes that can contain protocols that are not listed at GRN_SafeHtml
         */
        $protocolAttributes = [
            'usemap',
            'classid',
            'data',
            'longdesc',
            'cite',
            'profile',
        ];

        foreach ($deleteTags as $tag) {
            $this->addDeleteTag($tag);
        }
        // set white protocols
        foreach ($whiteProtocols as $proto) {
            $this->whiteProtocols[] = $proto;
        }
        // set protocol attributes
        foreach ($protocolAttributes as $attr) {
            $this->protocolAttributes[] = $attr;
        }

        if (in_array('style', $this->attributes)) {
            $key = array_search('style', $this->attributes);
            unset($this->attributes[$key]);
        }

        parent::__construct();
    }

    /**
     * @param string                 $doc
     * @param HtmlMailInlineContents $files
     * @param bool                   $showImage
     *
     * @return string
     */
    public function process($doc, HtmlMailInlineContents $files, $showImage)
    {
        $this->showImage = $showImage;
        $this->files = $files;

        // hide background-image for all elements.
        if ( ! $this->showImage
             && ! in_array('background', $this->attributes)
        ) {
            $this->attributes[] = 'background';
        }

        return parent::parse($doc);
    }

    /**
     * @param string $tagName
     * @param array  $attrs
     *
     * @return bool
     */
    public function beforeWriteAttrs($tagName, array $attrs)
    {
        if (strtolower($tagName) === 'img') {
            $this->replaceAndStoreCid($attrs);

            if ( ! $this->showImage) {
                foreach ($attrs as $name => $value) {
                    if (strtolower($name) === 'src') {
                        unset($attrs[$name]);
                    }
                }
            }
        }

        return $attrs;
    }

    /**
     * @param array $attrs
     */
    private function replaceAndStoreCid(array & $attrs)
    {
        foreach ($attrs as $name => $value) {
            if (strtolower($name) !== 'src') {
                continue;
            }

            if (strpos($value, 'cid:') !== 0) {
                continue;
            }

            $cid = substr($value, 4);
            if (strlen($cid) === 0) {
                // cid: has no value.
                continue;
            }

            $fileUrl = $this->files->getFileUrlByContentId($cid);
            if (is_null($fileUrl)) {
                continue;
            }

            $attrs[$name] = $fileUrl;

            $this->fileFoundContentIds[] = $cid;
        }
    }

    /**
     * @return array
     */
    public function getInlineFileIds()
    {
        return $this->files->getFileIdsByContentIds($this->fileFoundContentIds);
    }
}
