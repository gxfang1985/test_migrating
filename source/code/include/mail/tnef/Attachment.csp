<?php

namespace grn\mail\tnef;


class Attachment
{
    /**
     * Binary data of the attachment file
     *
     * @var string|null
     */
    private $data = null;

    /**
     * 8.3 filename (https://en.wikipedia.org/wiki/8.3_filename)
     *
     * @var string|null
     */
    private $filename83 = null;

    /**
     * Key: property id.
     *
     * @var Property[]
     */
    private $properties = [];

    /**
     * @param string $filename
     */
    public function setFilename83($filename)
    {
        $this->filename83 = $filename;
    }

    /**
     * @return string|null
     */
    public function getFilename()
    {
        if (array_key_exists(Property::PidTagAttachLongFilename,
            $this->properties)
        ) {
            return $this->properties[Property::PidTagAttachLongFilename]->getData();
        } else {
            return $this->filename83;
        }
    }

    /**
     * @param string|null $data
     */
    public function setData($data)
    {
        $this->data = $data;
    }

    /**
     * @return string|null
     */
    public function getData()
    {
        if ( ! in_array($this->getAttachMethod(),
            [AttachMethod::ATTACH_EMBEDDED_MSG, AttachMethod::ATTACH_OLE])
        ) {
            return $this->data;
        } elseif (array_key_exists(Property::PidTagAttachDataBinary,
            $this->properties)
        ) {
            $prop = $this->properties[Property::PidTagAttachDataBinary];
            if ($prop->getPropertyType() === PropertyType::Object) {
                // Ignore Interface Identifier(16 bytes) of the object.
                return substr($prop->getData(), 16);
            } else {
                // Uninterpreted BLOB
                return $prop->getData();
            }
        }

        return null;
    }

    /**
     * @param Property[] $properties
     */
    public function setProperties(array $properties)
    {
        $this->properties = $properties;
    }

    /**
     * @return Property[]
     */
    public function getProperties()
    {
        return $this->properties;
    }

    /**
     * @param $propertyId
     *
     * @return Property|null
     */
    private function getProperty($propertyId)
    {
        if (array_key_exists($propertyId, $this->properties)) {
            return $this->properties[$propertyId];
        }

        return null;
    }

    /**
     * @return int|null
     */
    public function getAttachMethod()
    {
        $property = $this->getProperty(Property::PidTagAttachMethod);
        if (is_null($property)) {
            return null;
        }

        return $property->getData();
    }
}
