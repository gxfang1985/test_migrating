<?php

namespace grn\mail\tnef;

/**
 * Properties data reader.
 */
class PropertiesDecoder
{
    /** @var Reader */
    private $reader;

    /** @var string */
    private $characterEncoding;

    /** @var string */
    private $internalEncoding;

    const STRING_TERMINATING_CHAR_LENGTH = 1;
    const UNICODE_TERMINATING_CHAR_LENGTH = 2;

    /**
     * @param string      $data
     * @param string|null $character_encoding
     */
    public function __construct($data, $character_encoding)
    {
        $this->reader = new Reader($data);
        $this->characterEncoding = $character_encoding;
        $this->internalEncoding = mb_internal_encoding();
    }

    /**
     * @return Property[]
     * @throws TnefFormatException
     */
    public function decode()
    {
        $props = [];
        $property_count = $this->reader->readUint32();

        for ($i = 0; $i < $property_count; $i++) {
            $prop = $this->decodePropertyValue();
            $props[$prop->getPropertyId()] = $prop;
        }

        return $props;
    }

    /**
     * @return Property
     * @throws TnefFormatException
     */
    private function decodePropertyValue()
    {
        $property_type = $this->reader->readUint16();
        $property_id = $this->reader->readUint16();

        // NamedPropSpec
        if (($property_id >= 0x8000) && ($property_id <= 0xFFFF)) {
            // PropNameSpace (GUID)
            $this->reader->read(16);

            $prop_id_type = $this->reader->readUint32();
            switch ($prop_id_type) {
                // IdTypeNumber
                case 0x00000000:
                    // PropMapID = UINT32
                    $this->reader->readUint32();
                    break;
                // IdTypeString
                case 0x00000001:
                    $length = $this->reader->readUint32();
                    $this->reader->read($length);
                    $this->reader->pad(4);
                    break;
                default:
                    throw new TnefFormatException("invalid PropIDType");
            }
        }

        $prop = new Property($property_type, $property_id);

        $content_count = 1;
        if (PropertyType::isMultiValue($property_type)
            || PropertyType::isVariableLength($property_type)
        ) {
            $content_count = $this->reader->readUint32();
        }


        // Note: If the property is multi-value($content_count > 1), only last value will be stored as as property data.
        // But we don't use any multi-value property, so we don't care about it.
        for ($i = 0; $i < $content_count; $i++) {
            switch ($property_type) {
                case PropertyType::Unspecified:
                    throw new TnefFormatException("invalid MsgPropertyType (TypeUnspecified)");
                case PropertyType::Null:
                    break;
                case PropertyType::Int16:
                case PropertyType::MVInt16:
                    $prop->setData($this->reader->readInt16());
                    $this->reader->pad(4);
                    break;
                case PropertyType::Int32:
                case PropertyType::MVInt32:
                    $prop->setData($this->reader->readInt32());
                    break;
                case PropertyType::Flt32:
                case PropertyType::MVFlt32:
                    $this->reader->read(4);
                    break;
                case PropertyType::Flt64:
                case PropertyType::MVFlt64:
                    $this->reader->read(8);
                    break;
                case PropertyType::Currency:
                case PropertyType::MVCurrency:
                    $this->reader->read(8);
                    break;
                case PropertyType::AppTime:
                case PropertyType::MVAppTime:
                    $this->reader->read(8);
                    break;
                case PropertyType::Error:
                    $this->reader->read(4);
                    break;
                case PropertyType::Boolean:
                    $prop->setData($this->reader->readUint16());
                    $this->reader->pad(4);
                    break;
                case PropertyType::Int64:
                case PropertyType::MVInt64:
                    $this->reader->read(8);
                    break;
                case PropertyType::Unicode:
                case PropertyType::MVUnicode:
                    $length = $this->reader->readInt32();
                    $data = $this->reader->read($length
                                                - self::UNICODE_TERMINATING_CHAR_LENGTH);
                    $prop->setData(mb_convert_encoding($data,
                        $this->internalEncoding, 'UTF-16LE'));
                    $this->reader->read(self::UNICODE_TERMINATING_CHAR_LENGTH);
                    $this->reader->pad(4);
                    break;
                case PropertyType::String8:
                case PropertyType::MVString8:
                    $length = $this->reader->readInt32();
                    $data = $this->reader->read($length
                                                - self::STRING_TERMINATING_CHAR_LENGTH);
                    $prop->setData(mb_convert_encoding($data,
                        $this->internalEncoding, $this->characterEncoding));
                    $this->reader->read(self::STRING_TERMINATING_CHAR_LENGTH);
                    $this->reader->pad(4);
                    break;
                case PropertyType::Systime:
                case PropertyType::MVSystime:
                    $this->reader->read(8);
                    break;
                case PropertyType::ClsId:
                case PropertyType::MVClsId:
                    $this->reader->read(16);
                    break;
                case PropertyType::Binary:
                case PropertyType::MVBinary:
                case PropertyType::Object:
                    $length = $this->reader->readInt32();
                    $prop->setData($this->reader->read($length));
                    $this->reader->pad(4);
                    break;
                default:
                    throw new TnefFormatException("invalid MsgPropertyType");
            }
        }

        return $prop;
    }
}
