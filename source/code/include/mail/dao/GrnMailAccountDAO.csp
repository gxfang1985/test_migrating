<?php

namespace grn\mail\dao;

use grn\mail\bean\GrnMailAccount;
use grn\space\common\exception\GrnDataNotFoundException;

class GrnMailAccountDAO
{
    private function getDatabaseConnection()
    {
        require_once("grn/application.csp");
        require_once("mail/resources.csp");

        $applicationLocator = \GRN_ApplicationLocator::instance();
        $connection
            = $applicationLocator->getConnection(GRN_MAIL_APP_ID);

        return $connection;
    }

    public function selectDefaountAccountDataOfAllUser()
    {
        $this->getDatabaseConnection()->query("SET @c=0;");
        $this->getDatabaseConnection()->query("SET @lastUid = 0;");
        $query = "SELECT " .
                 "a._id AS a_id," .
                 "a.col_foreign_key AS a_col_foreign_key," .
                 "IF(" .
                 "a.col_name IS NULL OR CHAR_LENGTH(a.col_name) = 0," .
                 "CONCAT(" .
                 "IF(" .
                 "a.col_email IS NOT NULL " .
                 "AND " .
                 "CHAR_LENGTH(a.col_email) > 0 " .
                 "AND " .
                 "LEFT(a.col_email, 1) <> '<', " .
                 "'<'," .
                 "''" .
                 ")," .
                 "a.col_email," .
                 "IF(" .
                 "a.col_email IS NOT NULL " .
                 "AND " .
                 "CHAR_LENGTH(a.col_email) > 0 " .
                 "AND " .
                 "RIGHT(a.col_email, 1) <> '>', " .
                 "'>', " .
                 "''" .
                 ")" .
                 ")," .
                 "a.col_name ) AS a_title, " .
                 "a.col_name AS a_col_name," .
                 "a.col_check_mail_ts AS a_col_check_mail_ts," .
                 "IFNULL(a.col_mail_size, 0) AS a_col_mail_size, " .
                 "a.col_send_vcard AS a_col_send_vcard, " .
                 "a.col_disabled AS a_col_disabled, " .
                 "a.col_deleted AS a_col_deleted," .
                 "a.col_list_index AS a_col_list_index, " .
                 "IFNULL(a.col_new_mails, 0) AS a_col_new_mails, " .
                 "a.col_email AS a_col_email, " .
                 "a.col_from_name AS a_col_from_name, " .
                 "a.col_retrieve_account AS a_col_retrieve_account, " .
                 "a.col_retrieve_password AS a_col_retrieve_password," .
                 "a.col_retrieve_save AS a_col_retrieve_save, " .
                 "a.col_smtp_account AS a_col_smtp_account, " .
                 "a.col_smtp_password AS a_col_smtp_password, " .
                 "a.col_user AS a_col_user, " .
                 "a.col_memo AS a_col_memo, " .
                 "a.col_server AS a_col_server, " .
                 "u.col_display_name AS u_col_display_name, " .
                 "s._id AS s_id," .
                 "s.col_foreign_key AS s_col_foreign_key, " .
                 "s.col_name AS s_col_name," .
                 "s.col_memo AS s_col_memo," .
                 "s.col_disabled AS s_col_disabled," .
                 "s.col_list_index AS s_col_list_index," .
                 "s.col_smtp AS s_col_smtp," .
                 "s.col_smtp_port AS s_col_smtp_port," .
                 "s.col_smtp_ssl AS s_col_smtp_ssl," .
                 "s.col_reserve_int1 AS s_col_reserve_int1," .
                 "s.col_smtp_auth AS s_col_smtp_auth," .
                 "s.col_smtp_set_account AS s_col_smtp_set_account," .
                 "s.col_smtp_timeout_sec AS s_col_smtp_timeout_sec," .
                 "s.col_pop_before_smtp AS s_col_pop_before_smtp," .
                 "s.col_pbsmtp_wait_sec AS s_col_pbsmtp_wait_sec," .
                 "s.col_retrieve AS s_col_retrieve," .
                 "s.col_retrieve_port AS s_col_retrieve_port," .
                 "s.col_retrieve_ssl AS s_col_retrieve_ssl," .
                 "s.col_retrieve_auth AS s_col_retrieve_auth," .
                 "s.col_retrieve_protocol AS s_col_retrieve_protocol," .
                 "s.col_retrieve_timeout_sec AS s_col_retrieve_timeout_sec " .
                 "FROM " .
                 "(SELECT " .
                 "* " .
                 "FROM " .
                 "(SELECT " .
                 "IF(@lastUid <> col_user, @c:=0, @c:=@c+1) AS c, " .
                 "IF(@lastUid <> col_user, @lastUid:=col_user, @lastUid) AS dummy, "
                 .
                 "tab_grn_mail_account.* " .
                 "FROM " .
                 "tab_grn_mail_account " .
                 "WHERE " .
                 "col_disabled = 0 " .
                 "AND " .
                 "col_deleted = 0 " .
                 "ORDER BY " .
                 "col_user, col_list_index, _id) AS mail_account " .
                 "WHERE " .
                 "c=0) AS a, " .
                 "tab_grn_mail_server AS s, " .
                 "tab_cb_user AS u " .
                 "WHERE " .
                 "a.col_server = s._id " .
                 "AND " .
                 "a.col_user = u._id " .
                 "AND " .
                 "u.col_valid IS NULL " .
                 "AND " .
                 "u.col_deleted IS NULL " .
                 "ORDER BY " .
                 "u.col_position, u._id;";

        $result = $this->getDatabaseConnection()->query($query);
        $retval = [];
        while ($row = $this->getDatabaseConnection()->fetch_assoc($result)) {
            $tmp = [];
            $tmp["id"] = $row["a_id"];
            $tmp["foreign_key"] = $row["a_col_foreign_key"];
            $tmp["title"] = $row["a_title"];
            $tmp["name"] = $row["a_col_name"];
            $tmp["check_mail_ts"] = $row["a_col_check_mail_ts"];
            $tmp["mail_size"] = $row["a_col_mail_size"];
            $tmp["send_vcard"] = $row["a_col_send_vcard"];
            $tmp["disabeld"] = $row["a_col_disabled"];
            $tmp["deleted"] = $row["a_col_deleted"];
            $tmp["list_index"] = $row["a_col_list_index"];
            $tmp["new_mails"] = $row["a_col_new_mails"];

            $account_info = new \GRN_Mail_AccountInfo();
            $account_info->email = $row["a_col_email"];
            $account_info->from_name = $row["a_col_from_name"];
            $account_info->retrieve_account = $row["a_col_retrieve_account"];
            $account_info->retrieve_password = $row["a_col_retrieve_password"];
            $account_info->retrieve_save = $row["a_col_retrieve_save"];
            $account_info->smtp_account = $row["a_col_smtp_account"];
            $account_info->smtp_password = $row["a_col_smtp_password"];
            $account_info->server_id = $row["s_id"];
            $tmp["account_info"] = $account_info;

            $tmp["user_id"] = $row["a_col_user"];
            $tmp["user_name"] = $row["u_col_display_name"];
            $tmp["memo"] = $row["a_col_memo"];

            $tmp["server"] = [
                "id"          => $row["s_id"],
                "foreign_key" => $row["s_col_foreign_key"],
                "name"        => $row["s_col_name"],
                "memo"        => $row["s_col_memo"],
                "disabled"    => $row["s_col_disabled"],
                "list_index"  => $row["s_col_list_index"],
            ];
            $server_info = new \GRN_Mail_ServerInfo();
            $server_info->smtp = $row["s_col_smtp"];
            $server_info->smtp_port = $row["s_col_smtp_port"];
            $server_info->smtp_ssl = $row["s_col_smtp_ssl"];
            $server_info->smtp_tls = $row["s_col_reserve_int1"];
            $server_info->smtp_auth = $row["s_col_smtp_auth"];
            $server_info->smtp_set_account = $row["s_col_smtp_set_account"];
            $server_info->pop_before_smtp = $row["s_col_pop_before_smtp"];
            $server_info->pbsmtp_wait_sec = $row["s_col_pbsmtp_wait_sec"];
            $server_info->smtp_timeout_sec = $row["s_col_smtp_timeout_sec"];
            $server_info->retrieve = $row["s_col_retrieve"];
            $server_info->retrieve_port = $row["s_col_retrieve_port"];
            $server_info->retrieve_ssl = $row["s_col_retrieve_ssl"];
            $server_info->retrieve_auth = $row["s_col_retrieve_auth"];
            $server_info->retrieve_protocol
                = $row["s_col_retrieve_protocol"];
            $server_info->retrieve_timeout_sec
                = $row["s_col_retrieve_timeout_sec"];
            $tmp["server"]["server_info"] = $server_info;
            $retval[] = $tmp;
        }
        $this->getDatabaseConnection()->free_result($result);

        return $retval;
    }

    /**
     * @param string  $userId
     * @param boolean $isOnlyAvailable
     *
     * @return string
     */
    public function countUsersAccount($userId, $isOnlyAvailable)
    {
        $db = $this->getDatabaseConnection();

        $query = cb_queryf($db,
            'SELECT ' .
            'COUNT(*) AS count ' .
            'FROM ' .
            'tab_grn_mail_account ' .
            'WHERE ' .
            'tab_grn_mail_account.col_user = \'@S\' ' .
            'AND ' .
            'tab_grn_mail_account.col_deleted = 0 ' .
            ($isOnlyAvailable ? 'AND tab_grn_mail_account.col_disabled = 0'
                : ''),
            $userId
        );

        $result = $db->query($query);
        $row = $db->fetch_assoc($result);
        $db->free_result($result);

        return $row['count'];
    }

    public function selectAccountById($accountId)
    {
        $db = $this->getDatabaseConnection();
        $query = cb_queryf($db,
            'SELECT ' .
            '* ' .
            'FROM ' .
            'tab_grn_mail_account ' .
            'WHERE ' .
            'tab_grn_mail_account._id = \'@S\' ',
            $accountId);
        $result = $db->query($query);

        $row = $db->fetch_array($result);
        $db->free_result($result);

        if ( ! $row) {
            throw new GrnDataNotFoundException();
        }

        return new GrnMailAccount($row, false);
    }

    public function hasValidAccount($userId, $accountId)
    {
        $db = $this->getDatabaseConnection();
        $query = "SELECT account._id FROM tab_grn_mail_account AS account "
                 . "INNER JOIN tab_cb_user AS user ON user._id = account.col_user "
                 . "WHERE user.col_deleted IS NULL "
                 . "AND user.col_valid IS NULL "
                 . "AND account.col_deleted = '0' "
                 . $db->format("AND user._id='@S' AND account._id = '@S' ",
                [$userId, $accountId])
                 . "LIMIT 1";
        $result = $db->query($query);

        return $db->num_rows($result) > 0;
    }
}
