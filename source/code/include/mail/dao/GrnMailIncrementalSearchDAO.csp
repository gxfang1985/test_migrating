<?php

namespace grn\mail\dao;

use grn\mail\bean\GrnMailIncrementalSearch;
use grn\grn\GrnException;

class GrnMailIncrementalSearchDAO
{
    const MAX_COUNT_RECORD = 100;

    private function getDBConnection()
    {
        require_once('grn/application.csp');
        require_once('mail/resources.csp');
        $applicationLocator = \GRN_ApplicationLocator::instance();
        $connection
            = $applicationLocator->getConnection(GRN_MAIL_APP_ID);

        return $connection;
    }

    public function deleteById(array $ids)
    {
        try {
            if (count($ids) == 0) {
                return false;
            }

            $db = $this->getDBConnection();

            foreach ($ids as $k => $id) {
                $ids[$k] = "'{$db->escape($id)}'";
            }

            $query = 'DELETE FROM tab_grn_mail_incremental_search ';
            $query .= 'WHERE ' . GrnMailIncrementalSearch::ID . ' IN ('
                      . implode(',', $ids) . ');';

            $db->query($query);

            return true;
        } catch (GrnException $e) {
            throw $e;
        }
    }

    public function selectByDisplayNameEmailAndUserID(
        $display_name,
        $email,
        $user_id
    ) {
        try {
            $db = $this->getDBConnection();

            $query = "SELECT _id, ";
            $query .= " col_display_name, ";
            $query .= " col_email, ";
            $query .= " col_update_time, ";
            $query .= " col_use_count, ";
            $query .= " col_user_id ";
            $query .= "FROM tab_grn_mail_incremental_search ";
            $query .= "WHERE " . GrnMailIncrementalSearch::DISPLAY_NAME
                      . "='{$db->escape($display_name)}'";
            $query .= " AND " . GrnMailIncrementalSearch::EMAIL
                      . "='{$db->escape($email)}'";
            $query .= " AND " . GrnMailIncrementalSearch::USER_ID
                      . "='{$db->escape($user_id)}';";

            $result = $db->query($query);
            if ($row = $db->fetch_assoc($result)) {
                $incremental_search = new GrnMailIncrementalSearch($row,
                    GrnMailIncrementalSearch::NOT_CHECK_INPUT);
            } else {
                $incremental_search = new GrnMailIncrementalSearch();
            }
            $db->free_result($result);

            return $incremental_search;
        } catch (GrnException $e) {
            throw $e;
        }
    }

    /**
     *
     * @param string $user_id
     *
     * @throws \Exception|\grn\grn\GrnException
     * @return array $incremental_search_ids
     */
    public function selectWillBeRemovedDataByUserId($user_id)
    {
        try {
            $db = $this->getDBConnection();

            $select = "SELECT _id FROM tab_grn_mail_incremental_search  ";
            $condition = $db->format("WHERE col_user_id = '@S' ",
                [$user_id]);
            $orderBy
                = "ORDER BY col_update_time DESC, _id DESC LIMIT 100, 1100";
            $incremental_search_ids = [];
            $result = $db->query($select . $condition
                                 . $orderBy);

            while ($row = $db->fetch_assoc($result)) {
                $incremental_search_ids[] = $row['_id'];
            }
            $db->free_result($result);

            return $incremental_search_ids;
        } catch (GrnException $e) {
            throw $e;
        }
    }


    public function updateMailSendHistory(
        \CB_User $loginUser,
        array $addresseesList
    ) {
        if (count($addresseesList) <= 0) {
            return;
        }

        try {
            $db = $this->getDBConnection();
            $query
                = "INSERT INTO tab_grn_mail_incremental_search (col_display_name,col_email,col_update_time,col_user_id,col_hash) VALUES ";
            $statements = [];
            foreach ($addresseesList as $addressee) {
                $name = is_null($addressee->name) ? "" : $addressee->name;
                $address = is_null($addressee->address) ? ""
                    : $addressee->address;
                $hash = hash('sha256', $name . $address);
                $template = "('@S', '@S', UNIX_TIMESTAMP(), '@S', '@S')";
                $statements[]
                    = $db->format($template,
                    [$name, $address, $loginUser->getOID(), $hash]);
            }

            $db->query($query . implode(",", $statements)
                       . "ON DUPLICATE KEY UPDATE col_update_time=UNIX_TIMESTAMP();");
        } catch (GrnException $e) {
            throw $e;
        }
    }
}
