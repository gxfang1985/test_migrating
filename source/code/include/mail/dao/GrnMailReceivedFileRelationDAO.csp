<?php

namespace grn\mail\dao;

class GrnMailReceivedFileRelationDAO
{
    /**
     * @param string $blobId
     * @param string $fileId
     * @param string $userId
     */
    public function setBlobIdRelation($blobId, $fileId, $userId)
    {
        $db = $this->getDataBaseConnection();
        $format
            = "INSERT tab_grn_mail_receivedfilerelation (`col_blob`, `col_file`, `col_user`) VALUE ('@S', '@S', '@S')";
        $query = $db->format($format, [$blobId, $fileId, $userId]);
        $db->query($query);
    }

    /**
     * @param string $fileId
     * @param string $userId
     *
     * @return string|null
     */
    public function getBlobId($fileId, $userId)
    {
        $db = $this->getDataBaseConnection();
        $format
            = "SELECT col_blob FROM tab_grn_mail_receivedfilerelation WHERE col_file = '@S' AND col_user = '@S'";
        $query = $db->format($format, [$fileId, $userId]);
        $result = $db->query($query);
        $row = $db->fetch_assoc($result);

        return $row['col_blob'];
    }

    /**
     * @param string $fileInfoTable
     * @param string $limit
     * @param array  $skipMailIds
     *
     * @return array
     */
    public function getNotRelatedMailIds(
        $fileInfoTable,
        $limit,
        array $skipMailIds = []
    ) {
        $skipMailSQL = '';
        $db = $this->getDataBaseConnection();
        if ( ! empty($skipMailIds)) {
            $skipMailSQL = cb_queryf($db, 'AND f.col_mail NOT IN(@A)',
                $skipMailIds);
        }

        $query
            = "SELECT f.col_mail FROM {$fileInfoTable} AS f LEFT JOIN tab_grn_mail_receivedfilerelation AS r ON f._id=r.col_file AND f.col_user=r.col_user WHERE r.col_blob IS NULL AND r.col_delete IS NULL {$skipMailSQL} GROUP BY f.col_mail LIMIT {$limit}";
        $result = $db->query($query);
        $mailIds = [];
        while ($row = $db->fetch_assoc($result)) {
            $mailIds[] = $row['col_mail'];
        }
        $db->free_result($result);

        return $mailIds;
    }

    /**
     * @param string $fileId
     * @param string $userId
     */
    public function deleteRecord($fileId, $userId)
    {
        $db = $this->getDataBaseConnection();
        $format
            = "DELETE FROM tab_grn_mail_receivedfilerelation WHERE col_file='@S' AND col_user='@S'";
        $query = $db->format($format, [$fileId, $userId]);
        $db->query($query);
    }

    /**
     * @param string $fileId
     * @param string $userId
     */
    public function setDelete($fileId, $userId)
    {
        $db = $this->getDataBaseConnection();
        $format
            = "UPDATE tab_grn_mail_receivedfilerelation SET col_blob=NULL, col_delete=1 WHERE col_file='@S' AND col_user='@S'";
        $query = $db->format($format, [$fileId, $userId]);
        $db->query($query);
    }

    /**
     * @param string $fileId
     * @param string $userId
     */
    public function insertDelete($fileId, $userId)
    {
        $db = $this->getDataBaseConnection();
        $format
            = "INSERT tab_grn_mail_receivedfilerelation (`col_blob`, `col_file`, `col_user`, `col_delete`) VALUE (NULL, '@S', '@S', 1)";
        $query = $db->format($format, [$fileId, $userId]);
        $db->query($query);
    }

    /**
     * @param string $mailId
     * @param string $fileInfoTable
     */
    public function insertDeletedByMailId($mailId, $fileInfoTable)
    {
        $db = $this->getDataBaseConnection();
        $format
            = "INSERT tab_grn_mail_receivedfilerelation (col_file, col_user, col_delete) SELECT i._id, i.col_user, 1 FROM {$fileInfoTable} AS i WHERE i.col_mail = '@S'";
        $query = $db->format($format, [$mailId]);
        $db->query($query);
    }

    /**
     * @return \CB_DatabaseConnection
     */
    private function getDataBaseConnection()
    {
        $app_locator = \GRN_ApplicationLocator::instance();

        return $app_locator->getConnection('mail');
    }
}
