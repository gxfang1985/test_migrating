<?php

namespace grn\mail\dao;

use grn\mail\automation\AutomaticEventFilterOption;
use grn\grn\GrnException;


class AutomaticEventActionDAO
{
    /**
     * @return \CB_DatabaseConnection
     */
    private function db()
    {
        return cb_get_app_db("mail");
    }

    /**
     * @param $eventId
     */
    private function removeActionByEventId($eventId)
    {
        $db = $this->db();
        $query = "DELETE FROM tab_grn_mail_automatic_event_action "
                 . "WHERE " . $db->format("col_event='@S'", [$eventId]);
        $db->query($query);
    }

    /**
     * @param       $eventId
     * @param array $actions  []["name"]
     *                        ["message"]
     */
    public function insertActionByEventId($eventId, array $actions)
    {
        $db = $this->db();
        $query = "INSERT INTO tab_grn_mail_automatic_event_action "
                 . "(col_event,col_name,col_message) VALUES ";
        $toRegisterData = [];

        foreach ($actions as $action) {
            $message = json_encode($action["message"]);

            if ( ! $db->validateMediumTextLength($message)) {
                throw new GrnException(E_GRN_MAIL_TOO_MANY_FORWARD_LIST);
            }

            $toRegisterData[] = $db->format("('@S','@S','@S')",
                [
                    $eventId,
                    $action["name"],
                    $message
                ]
            );
        }
        $db->query($query . implode($toRegisterData, ","));
    }

    /**
     * @param       $eventId
     * @param array $actions
     * As to $actions properties, @see insertActionByEventId
     */
    public function replaceActionByEventId($eventId, array $actions)
    {
        $this->removeActionByEventId($eventId);
        $this->insertActionByEventId($eventId, $actions);
    }


    public function getActionsByAccountIds(
        array $accountIds,
        AutomaticEventFilterOption $option
    ) {
        $db = $this->db();
        $query = "SELECT "
                 . "event._id AS eventId, "
                 . "action.col_name AS actionName, "
                 . "action.col_message AS message, "
                 . "user._id AS userId "
                 . "FROM tab_grn_mail_automatic_event AS event "
                 . "INNER JOIN tab_grn_mail_account AS account ON account._id = event.col_account "
                 . "INNER JOIN tab_cb_user AS user ON user._id = account.col_user "
                 . "INNER JOIN tab_grn_mail_automatic_event_action AS action ON event._id = action.col_event "
                 . "WHERE user.col_deleted IS NULL "
                 . "AND   user.col_valid   IS NULL "
                 . "AND   account.col_deleted  = '0' "
                 . "AND " . $db->format("event.col_account IN (@A) ",
                [$accountIds]);

        if ($option->shouldGetOnlyInServiceAction()) {
            $query .= "AND   event.col_service_status = 'ON' ";
        }

        if ($option->shouldGetOnlyAvailableAccount()) {
            $query .= "AND   account.col_disabled  = '0' ";
        }

        $result = $db->query($query);
        $actions = [];
        while ($row = $db->fetch_assoc($result)) {
            $actions[$row["eventId"]][] = $row;
        }

        return $actions;
    }


}
