<?php

namespace grn\mail\dao;

use grn\mail\automation\AutomaticEventFilterOption;


class AutomaticEventTriggerConditionDAO
{
    /**
     * @return \CB_DatabaseConnection
     */
    private function db()
    {
        return cb_get_app_db("mail");
    }

    /**
     * @param $eventId
     */
    private function removeConditionByEventId($eventId)
    {
        $db = $this->db();
        $query = "DELETE FROM tab_grn_mail_automatic_event_trigger_condition "
                 . "WHERE " . $db->format("col_event='@S'", [$eventId]);
        $db->query($query);
    }

    /**
     * @param $eventId
     * @param $conditions []["evaluationMethod"]
     *                    []["evaluationObject"]
     *                    []["matchData"]
     */
    public function insertConditionByEventId($eventId, array $conditions)
    {
        $db = $this->db();
        $query
            = "INSERT INTO tab_grn_mail_automatic_event_trigger_condition "
              . "(col_event, col_evaluation_method, col_evaluation_object, col_match_data) VALUES ";
        $toRegisterData = [];
        foreach ($conditions as $condition) {
            $toRegisterData[] = $db->format("('@S','@S','@S','@S')",
                [
                    $eventId,
                    $condition["evaluationMethod"],
                    $condition["evaluationObject"],
                    $condition["matchData"]
                ]
            );
        }
        $db->query($query . implode($toRegisterData, ","));
    }

    /**
     * @param $eventId
     * @param $conditions
     * As to $conditions properties, @see insertConditionByEventId
     */
    public function replaceConditionByEventId($eventId, array $conditions)
    {
        $this->removeConditionByEventId($eventId);
        $this->insertConditionByEventId($eventId, $conditions);
    }

    /**
     * @param array                                           $accountIds
     * @param \grn\mail\automation\AutomaticEventFilterOption $option
     *
     * @return array
     */
    public function getConditionsByAccountIds(
        array $accountIds,
        AutomaticEventFilterOption $option
    ) {
        $db = $this->db();
        $query = "SELECT "
                 . "event._id AS eventId, "
                 . "triggerCondition.col_evaluation_method AS evaluationMethod, "
                 . "triggerCondition.col_evaluation_object AS evaluationObject, "
                 . "triggerCondition.col_match_data AS matchData, "
                 . "user._id AS userId "
                 . "FROM tab_grn_mail_automatic_event AS event "
                 . "INNER JOIN tab_grn_mail_account AS account ON account._id = event.col_account "
                 . "INNER JOIN tab_cb_user AS user ON user._id = account.col_user "
                 . "INNER JOIN tab_grn_mail_automatic_event_trigger_condition AS triggerCondition ON event._id = triggerCondition.col_event "
                 . "WHERE user.col_deleted IS NULL "
                 . "AND   user.col_valid   IS NULL "
                 . "AND   account.col_deleted  = '0' "
                 . "AND " . $db->format("event.col_account IN (@A) ",
                [$accountIds]);

        if ($option->shouldGetOnlyInServiceAction()) {
            $query .= "AND   event.col_service_status = 'ON' ";
        }

        if ($option->shouldGetOnlyAvailableAccount()) {
            $query .= "AND   account.col_disabled  = '0' ";
        }

        $result = $db->query($query);
        $conditions = [];
        while ($row = $db->fetch_assoc($result)) {
            $conditions[$row["eventId"]][] = $row;
        }

        return $conditions;
    }
}
