<?php

namespace grn\mail\dao;

use grn\mail\automation\AutomaticEvent;
use grn\mail\automation\evaluation\AutomaticEventConstraints as Constrains;
use grn\mail\automation\AutomaticEventFilterOption;

class AutomaticEventDAO
{
    /**
     * @return \CB_DatabaseConnection
     */
    private function db()
    {
        return cb_get_app_db("mail");
    }

    /**
     * @param $accountId
     *
     * @return \grn\mail\automation\AutomaticEvent[]
     */
    public function getEventsByAccountIds(
        $accountIds,
        AutomaticEventFilterOption $option
    ) {
        $db = $this->db();
        $query = "SELECT "
                 . "event._id AS eventId, "
                 . "event.col_name AS eventName, "
                 . "event.col_logic_type AS logicType, "
                 . "event.col_service_status AS serviceStatus, "
                 . "account._id AS accountId, "
                 . "account.col_disabled AS accountStatus, "
                 . "account.col_email AS serviceAccount "
                 . "FROM tab_grn_mail_automatic_event AS event "
                 . "INNER JOIN tab_grn_mail_account AS account ON account._id = event.col_account "
                 . "INNER JOIN tab_cb_user AS user ON user._id = account.col_user "
                 . "WHERE user.col_deleted IS NULL "
                 . "  AND user.col_valid   IS NULL "
                 . "  AND account.col_deleted  = '0' "
                 . "  AND " . $db->format("event.col_account IN (@A)",
                [$accountIds]);

        if ($option->shouldGetOnlyInserviceAction()) {
            $query .= "AND event.col_service_status='ON' ";
        }

        if ($option->shouldGetOnlyAvailableAccount()) {
            $query .= "  AND account.col_disabled  = '0' ";
        }


        $result = $db->query($query);
        /** @var $automaticEvents AutomaticEvent[] */
        $automaticEvents = [];
        while ($row = $db->fetch_assoc($result)) {
            $eventId = $row["eventId"];
            $automaticEvents[$eventId] = new AutomaticEvent($row);
        }

        return $automaticEvents;
    }

    public function hasAutomaticEvent($userId, $accountId)
    {
        $db = $this->db();
        $query = "SELECT event._id AS eventId "
                 . "FROM tab_grn_mail_automatic_event AS event "
                 . "INNER JOIN tab_grn_mail_account AS account ON account._id = event.col_account "
                 . "INNER JOIN tab_cb_user AS user ON account.col_user = user._id "
                 . "WHERE " . $db->format("event.col_account='@S' ",
                [$accountId])
                 . "AND " . $db->format("user._id='@S' ", [$userId])
                 . "AND user.col_deleted IS NULL "
                 . "AND user.col_valid IS NULL "
                 . "AND account.col_deleted = '0' "
                 . "AND account.col_disabled = '0' "
                 . "GROUP BY event._id HAVING COUNT(event._id) > 0";
        $result = $db->query($query);

        return $db->num_rows($result) > 0;
    }

    public function hasSpecificAutomaticEvent($userId, $accountId, $eventId)
    {
        $db = $this->db();
        $query = "SELECT event._id AS eventId "
                 . "FROM tab_grn_mail_automatic_event AS event "
                 . "INNER JOIN tab_grn_mail_account AS account ON account._id = event.col_account "
                 . "INNER JOIN tab_cb_user AS user ON account.col_user = user._id "
                 . "WHERE " . $db->format("event.col_account='@S' ",
                [$accountId])
                 . "AND " . $db->format("user._id='@S' ", [$userId])
                 . "AND " . $db->format("event._id='@S' ", [$eventId])
                 . "AND user.col_deleted IS NULL "
                 . "AND user.col_valid IS NULL "
                 . "AND account.col_deleted = '0' ";
        $result = $db->query($query);

        return $db->num_rows($result) === 1;
    }

    /**
     * @param $accountId
     * @param $data ["name"]          => name of event name
     *              ["logicType"]     => "AND" or "OR"
     *              ["serviceStatus"] => "ON" or "OFF"
     *
     * @return mixed $id last inserted id
     */
    public function insertEvent($accountId, $data)
    {
        $db = $this->db();
        $query = "INSERT INTO tab_grn_mail_automatic_event "
                 . "(col_name, col_logic_type, col_service_status, col_account) VALUES ";
        $toRegisterData
            = $db->format("('@S','@S','@S','@S')",
            [
                $data["name"],
                $data["logicType"],
                $data["serviceStatus"],
                $accountId
            ]
        );
        $db->query($query . $toRegisterData);
        $result = $db->query("SELECT LAST_INSERT_ID() AS id");
        $idRow = $db->fetch_assoc($result);

        return $idRow["id"];
    }

    public function updateEvent($eventId, $data)
    {
        $db = $this->db();
        $query = "UPDATE tab_grn_mail_automatic_event "
                 . "SET "
                 . $db->format(
                "col_name='@S', col_logic_type='@S',col_service_status='@S' ",
                [
                    $data["name"],
                    $data["logicType"],
                    $data["serviceStatus"]
                ])
                 . "WHERE " . $db->format("_id='@S'", [$eventId]);
        $db->query($query);
    }

    /**
     * @param $id
     */
    public function deleteEventById($id)
    {
        $db = $this->db();
        $query = "DELETE FROM tab_grn_mail_automatic_event "
                 . "WHERE " . $db->format("_id='@S'", [$id]);
        $db->query($query);
    }

    /**
     * @param $id
     * @param $serviceStatus
     */
    private function updateServiceStatusById($id, $serviceStatus)
    {
        $db = $this->db();
        $query = "UPDATE tab_grn_mail_automatic_event "
                 . "SET " . $db->format("col_service_status='@S' ",
                [$serviceStatus])
                 . "WHERE " . $db->format("_id = '@S'", [$id]);
        $db->query($query);
    }

    /**
     * @param $id
     */
    public function disableEventById($id)
    {
        $this->updateServiceStatusById($id, Constrains::SERVICE_STATUS_OFF);
    }

    /**
     * @param $id
     */
    public function enableEventById($id)
    {
        $this->updateServiceStatusById($id, Constrains::SERVICE_STATUS_ON);
    }

    public function hasEventsMoreThan($number, $userId)
    {
        $db = $this->db();
        $query = "SELECT 1 FROM tab_grn_mail_automatic_event AS event "
                 . "INNER JOIN tab_grn_mail_account AS account ON event.col_account = account._id "
                 . "INNER JOIN tab_cb_user AS user ON account.col_user = user._id "
                 . "WHERE user.col_deleted IS NULL "
                 . "AND   user.col_valid IS NULL "
                 . "AND   account.col_deleted = '0' "
                 . $db->format("AND user._id='@S' ", [$userId])
                 . "GROUP BY user._id "
                 . "HAVING COUNT(event._id) >= " . $db->format("'@S'",
                [$number]);
        $result = $db->query($query);

        return $db->num_rows($result) === 1;

    }

    public function deleteObsoleteAutomaticEvent()
    {
        $db = $this->db();
        $query = "DELETE event FROM tab_grn_mail_automatic_event AS event "
                 . "INNER JOIN tab_grn_mail_account AS account ON event.col_account = account._id "
                 . "INNER JOIN tab_cb_user AS user ON account.col_user = user._id "
                 . "WHERE account.col_deleted <> '0' ";
        $db->query($query);
    }
}
