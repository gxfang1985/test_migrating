<?php
/**
 * Link Application Link Information Logic Base Class
 *
 * @author  Yuichi, Nakamura 2005/5
 * @version 1.0
 * @package grn.link
 */

/** Link Application **/
require_once('link/resources.csp');

/**
 * Link Information Logic Base Class
 *
 * @package grn.link
 */
class GRN_Link_Link_Information_Logic_Base
{
    //Link Information Manager Instance
    var $_link_information_manager_base = null;

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {

    }

    /**
     * get Login User
     *
     * @access private
     * @return object $login_user                //Login User
     */
    function _getLoginUser()
    {
        //Get UUM Instance
        global $G_container_base;
        $grn_uum = $G_container_base->getInstance('uum');

        //Get Login User
        $login_user = $grn_uum->getLoginUser();
        if ( ! $login_user) {
            {
                $___ret = false;

                return $___ret;
            }
        }

        //Return Login User
        return $login_user;
    }

    /**
     * Set Creator
     *
     * @access private
     *
     * @param  object $object //Object
     *
     * @return bool   $result                    //Result
     */
    function _setCreator(&$object)
    {
        //Check Argument
        if ( ! $object) {
            return false;
        }

        // Get Login User
        $login_user =& $this->_getLoginUser();

        //Get Create Time
        $ctime = new CB_TimeStamp();
        $ctime->unix_ts = time();

        //Set Create Infomation
        if ($login_user) {
            $display_name = $login_user->get(GRN_LINK_PROPERTY_DISPLAY_NAME);
            $foreign_key = $login_user->get(GRN_LINK_PROPERTY_FOREIGN_KEY);
            $object->set(GRN_LINK_PROPERTY_CREATOR, $login_user);   //Creator
            $object->set(GRN_LINK_PROPERTY_CREATOR_NAME,
                $display_name); //Creator Name
            $object->set(GRN_LINK_PROPERTY_CREATOR_FOREIGN_KEY,
                $foreign_key);  //Creator Foreign Key
            $object->set(GRN_LINK_PROPERTY_MODIFIER, $login_user);   //Modifier
            $object->set(GRN_LINK_PROPERTY_MODIFIER_NAME,
                $display_name); //Modifier Name
            $object->set(GRN_LINK_PROPERTY_MODIFIER_FOREIGN_KEY,
                $foreign_key);  //Modifier Foreign Key
        }
        $object->set(GRN_LINK_PROPERTY_CTIME, $ctime);  //Create Time
        $object->set(GRN_LINK_PROPERTY_MTIME, $ctime);  //Modify Time

        return true;
    }

    /**
     * Set Modofier
     *
     * @access private
     *
     * @param  object $object //Object
     *
     * @return bool   $result                    //Result
     */
    function _setModifier(&$object)
    {
        //Check Argument
        if ( ! $object) {
            return false;
        }

        // Get Login User
        $login_user =& $this->_getLoginUser();

        //Get Modofy Time
        $mtime = new CB_TimeStamp();
        $mtime->unix_ts = time();

        //Set Modify Infomation/
        if ($login_user) {
            $display_name = $login_user->get(GRN_LINK_PROPERTY_DISPLAY_NAME);
            $foreign_key = $login_user->get(GRN_LINK_PROPERTY_FOREIGN_KEY);
            $object->set(GRN_LINK_PROPERTY_MODIFIER, $login_user);   //Modifier
            $object->set(GRN_LINK_PROPERTY_MODIFIER_NAME,
                $display_name); //Modifier Display Name
            $object->set(GRN_LINK_PROPERTY_MODIFIER_FOREIGN_KEY,
                $foreign_key);  //Modifier Foreign Key
        }
        $object->set(GRN_LINK_PROPERTY_MTIME, $mtime);  //Modify Time

        return true;
    }
}

/**
 * System Link Information Logic Base Class
 *
 * @package grn.link
 */
class GRN_Link_System_Link_Information_Logic_Base
    extends GRN_Link_Link_Information_Logic_Base
{
    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {

    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Link_System_Link_Information_Logic_Base
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Link Information Manager Base
     *
     * @return object $link_manager_base         //Link Information Manager Base
     */
    function _getLinkInformationManagerBase()
    {
        if (is_null($this->_link_information_manager_base)) {
            require_once('link/link_information_manager_base.csp');
            $this->_link_information_manager_base
                = GRN_Link_System_Link_Information_Manager_Base::getInstance();
        }

        return $this->_link_information_manager_base;
    }

    /**
     * Get Link Information
     *
     * @param  int $link_id     //Link ID
     * @param  int $category_id //Category ID
     * @param  int $lock_mode   //Lock Mode
     *
     * @return array  $link                      //Link Information Array
     */
    function &get(
        $link_id,
        $category_id = null,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('link/error_code.csp');
        cb_trim_check($link_id, E_GRN_LINK_LINK_INVALID_ID);    //Link ID

        //Get Link Information
        $link_information_manager_base
            =& $this->_getLinkInformationManagerBase();
        $link = $link_information_manager_base->get($link_id, $category_id,
            $lock_mode);
        if ( ! $link) {
            //Link Not Found
            require_once('link/error_code.csp');
            cb_throw_error(E_GRN_LINK_LINK_NOT_FOUND);
        }

        //Return Link Object
        return $link;
    }

    /**
     * Get Link Information List
     *
     * @param  int  $category_id //Category ID
     * @param  int  $lock_mode   //Lock Mode
     * @param  bool $refresh     //Refresh Flag
     *
     * @return array  $link_list                 //Link Information List
     */
    function &getList(
        $category_id = null,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $refresh = false
    ) {
        //Get Link Information List
        $link_information_manager_base
            = $this->_getLinkInformationManagerBase();
        $link_list =& $link_information_manager_base->getList($category_id,
            $refresh, $lock_mode);

        //Return Link Information List
        return $link_list;
    }

    /**
     * Get Link Count
     *
     * @param  int $category_id //Category ID
     * @param  int $lock_mode   //Lock Mode
     *
     * @return int    $link_count                //Link Information Count
     */
    function getCount(
        $category_id = null,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Link Information List
        $link_information_manager_base
            =& $this->_getLinkInformationManagerBase();
        $link_count = $link_information_manager_base->getCount($category_id,
            $lock_mode);

        //Return Link Count
        return $link_count;
    }

    /**
     * Search Link
     *
     * @param  array $category_id_list //Category ID List
     * @param  array $target_list      //Search Target List
     * @param  array $condition_list   //Search Condition List
     * @param  int   $offset           //Search Offset
     * @param  int   $limit            //Search Limit
     * @param  int   $term             //Search Term
     * @param  int   $lock_mode        //Lock Mode
     *
     * @return array  $hit_link_list             //Hit Link Information List
     */
    function search(
        $category_id_list,
        $target_list,
        $condition_list,
        $offset = 0,
        $limit = 5,
        $term = 2678400,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Create Search Category List
        $saerch_category_list = [];
        $category_list = $this->getList(null, $lock_mode, false);
        foreach ($category_id_list as $category_id) {
            $search_category_list[$category_id]
                =& $category_id_list[$category_id];
        }

        //Search Link
        $link_information_manager_base
            =& $this->_getLinkInformationManagerBase();

        return $link_information_manager_base->search($search_category_list,
            $target_list, $condition_list, $offset, $limit, $term, $lock_mode);
    }

    /**
     * Search Link Count
     *
     * @param  array $category_id_list //Category ID List
     * @param  array $target_list      //Search Target List
     * @param  array $condition_list   //Search Condition List
     * @param  int   $term             //Search Term
     * @param  int   $lock_mode        //Lock Mode
     *
     * @return int    $hit_link_count            //Hit Link Information Count
     */
    function searchCount(
        $category_id_list,
        $target_list,
        $condition_list,
        $term = 2678400,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Create Search Category List
        $saerch_category_list = [];
        $category_list = $this->getList(null, $lock_mode, false);
        foreach ($category_id_list as $category_id) {
            $search_category_list[$category_id]
                =& $category_id_list[$category_id];
        }

        //Search Link
        $link_information_manager_base
            =& $this->_getLinkInformationManagerBase();

        return $link_information_manager_base->searchCount($search_category_list,
            $target_list, $condition_list, $term, $lock_mode);
    }
}

/**
 * Personal Link Logic Base Class
 *
 * @package grn.link
 */
class GRN_Link_Personal_Link_Information_Logic_Base
    extends GRN_Link_Link_Information_Logic_Base
{
    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {

    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Link_Personal_Link_Information_Logic_Base
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Link Information Manager Base
     *
     * @return object $link_information_manager_base         //Link Information Manager Base
     */
    function _getLinkInformationManagerBase()
    {
        if (is_null($this->_link_information_manager_base)) {
            require_once('link/link_information_manager_base.csp');
            $this->_link_information_manager_base
                = GRN_Link_Personal_Link_Information_Manager_base::getInstance();
        }

        return $this->_link_information_manager_base;
    }

    /**
     * Get Link Information
     *
     * @param  int $link_id     //Link ID
     * @param  int $category_id //Category ID
     * @param  int $lock_mode   //Lock Mode
     *
     * @return object $link                      //Link Information
     */
    function &get(
        $link_id,
        $category_id = null,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('link/error_code.csp');
        cb_trim_check($link_id, E_GRN_LINK_LINK_INVALID_ID);    //Link ID

        //Get Login User
        $login_user = $this->_getLoginUser();
        $login_user_id = $login_user->getOID();

        //Get Link Information
        $link_information_manager_base
            = $this->_getLinkInformationManagerBase();
        $link =& $link_information_manager_base->get($link_id, $login_user_id,
            $category_id, $lock_mode);
        if ( ! $link) {
            //Link Not Found
            require_once('link/error_code.csp');
            cb_throw_error(E_GRN_LINK_LINK_NOT_FOUND);
        }

        //Return Link Object
        return $link;
    }

    /**
     * Get Link Information List
     *
     * @param  int  $category_id //Category ID
     * @param  int  $lock_mode   //Lock Mode
     * @param  bool $refresh     //Refresh Flag
     *
     * @return array  $link_list                 //Link Information List
     */
    function &getList(
        $category_id = null,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $refresh = false
    ) {
        //Get Login User
        $login_user = $this->_getLoginUser();
        $login_user_id = $login_user->getOID();

        //Get Link Information List
        $link_information_manager_base
            = $this->_getLinkInformationManagerBase();
        $link_list =& $link_information_manager_base->getList($login_user_id,
            $category_id, $lock_mode, $refresh);

        //Return Link Information List
        return $link_list;
    }

    /**
     * Get Link Count
     *
     * @param  int $category_id //Category ID
     * @param  int $lock_mode   //Lock Mode
     *
     * @return int   $link_list                 //Link Information List
     */
    function getCount(
        $category_id = null,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Login User
        $login_user =& $this->_getLoginUser();
        $login_user_id = $login_user->getOID();

        //Get Link Count
        $link_information_manager_base
            =& $this->_getLinkInformationManagerBase();
        $link_count = $link_information_manager_base->getCount($login_user_id,
            $category_id, $lock_mode);

        //Return Link Count
        return $link_count;
    }

    /**
     * Search Link
     *
     * @param  array $category_id_list //Category ID List
     * @param  array $target_list      //Search Target List
     * @param  array $condition_list   //Search Condition List
     * @param  int   $offset           //Search Offset
     * @param  int   $limit            //Search Limit
     * @param  int   $term             //Search Term
     * @param  int   $lock_mode        //Lock Mode
     *
     * @return array  $hit_link_list             //Hit Link Information List
     */
    function search(
        $category_id_list,
        $target_list,
        $condition_list,
        $offset = 0,
        $limit = 5,
        $term = 2678400,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Login User
        $login_user =& $this->_getLoginUser();
        $login_user_id = $login_user->getOID();

        //Create Search Category List
        $saerch_category_list = [];
        $category_list = $this->getList(null, $lock_mode, false);
        foreach ($category_id_list as $category_id) {
            $search_category_list[$category_id]
                =& $category_id_list[$category_id];
        }

        //Search Link
        $link_information_manager_base
            =& $this->_getLinkInformationManagerBase();

        return $link_information_manager_base->search($search_category_list,
            $target_list, $condition_list, $login_user_id, $offset, $limit,
            $term, $lock_mode);
    }

    /**
     * Search Link Count
     *
     * @param  array $category_id_list //Category ID List
     * @param  array $target_list      //Search Target List
     * @param  array $condition_list   //Search Condition List
     * @param  int   $term             //Search Term
     * @param  int   $lock_mode        //Lock Mode
     *
     * @return int    $hit_link_count            //Hit Link Count
     */
    function searchCount(
        $category_id_list,
        $target_list,
        $condition_list,
        $term = 2678400,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Login User
        $login_user =& $this->_getLoginUser();
        $login_user_id = $login_user->getOID();

        //Create Search Category List
        $saerch_category_list = [];
        $category_list = $this->getList(null, $lock_mode, false);
        foreach ($category_id_list as $category_id) {
            $search_category_list[$category_id]
                =& $category_id_list[$category_id];
        }

        //Search Link
        $link_information_manager_base
            =& $this->_getLinkInformationManagerBase();

        return $link_information_manager_base->searchCount($search_category_list,
            $target_list, $condition_list, $login_user_id, $term, $lock_mode);
    }
}


