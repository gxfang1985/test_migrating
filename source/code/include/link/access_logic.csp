<?php
/**
 * Link Application Access Logic Class
 *
 * @author  Yuichi, Nakamura 2005/4
 * @version 1.0
 * @package grn.link
 */

/** Link Application **/
require_once('link/table.csp');
require_once('link/resources.csp');
require_once('link/access_logic_base.csp');

/**
 * Link Category Access Manager Class
 *
 * @package grn.link
 */
class GRN_Link_Category_Access_Logic extends GRN_Link_Category_Access_Logic_Base
{
    //Category Logic Instance
    var $_category_logic = null;

    //Category Access Manager Instance
    var $_category_access_manager = null;

    /**
     * Constructor
     */
    function __construct()
    {

    }

    /**
     * Get Instance
     *
     * @return object $instance                  //Instance of GRN_Link_Catogory_Access_Logic
     */
    private static $_instance = null;

    /**
     * @return GRN_Link_Category_Access_Logic
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Category Access Manager
     *
     * @return GRN_Link_Category_Access_Manager $category_access_manager   //Category Access Manager
     */
    function _getCategoryAccessManager()
    {
        if (is_null($this->_category_access_manager)) {
            require_once('link/access_manager.csp');
            $this->_category_access_manager
                = GRN_Link_Category_Access_Manager::getInstance();
        }

        return $this->_category_access_manager;
    }

    /**
     * Get Category Logic
     *
     * @return GRN_Link_System_Category_Logic $category_logic            //Category Logic
     */
    function _getCategoryLogic()
    {
        if (is_null($this->_category_logic)) {
            require_once('link/category_logic.csp');
            $this->_category_logic
                = GRN_Link_System_Category_Logic::getInstance();
        }

        return $this->_category_logic;
    }

    /**
     * Create Table List
     *
     * @param  none
     *
     * @return bool   $result                    //Result
     */
    function createTableList()
    {
        //Create Table List
        $manager =& $this->_getCategoryAccessManager();
        $manager->createTableList();

        return true;
    }

    /**
     * Alter Table  List
     *
     * @param  array $authority_list //Authority List
     *
     * @return bool   $result                    //Result
     */
    function alterTableList($authority_list = null)
    {
        //Alter Table List
        $manager =& $this->_getCategoryAccessManager();

        return $manager->alterTableList($authority_list);
    }

    /**
     * Drop Table  List
     *
     * @return true
     */
    function dropTableList()
    {
        //Drop Table List
        $manager =& $this->_getCategoryAccessManager();
        $manager->dropTableList();

        return true;
    }

    /**
     * Create Access Object
     *
     * @param  int    $category_id    //Category ID
     * @param  int    $target_id      //Target ID
     * @param  string $target_type    //Table Type(user/group/static_role/dynamic_role)
     * @param  object $authority_list //Authority List
     * @param  bool   $inspect        //Inspaction Message Flag
     *
     * @return object $access                    //Access Object
     */
    function addAccess(
        $category_id,
        $target_id,
        $target_type,
        $authority_list,
        $inspect = true
    ) {
        //Check Argument
        require_once('link/error_code.csp');
        require_once('fw/string_util.csp');
        cb_trim_check($category_id,
            E_GRN_LINK_CATEGORY_INVALID_ID);    //Category ID
        cb_trim_check($target_id,
            E_GRN_LINK_ACCESS_INVALID_TARGET);  //Access Target
        cb_trim_check($target_type,
            E_GRN_LINK_ACCESS_INVALID_TARGET);  //Access Target


        //Get Category Object
        $category_logic =& $this->_getCategoryLogic();
        $category = $category_logic->get($category_id);

        //Get UUM Instance
        global $G_container_base;
        $grn_uum = $G_container_base->getInstance('uum');

        //Get Target Object
        $target = null;
        switch ($target_type) {
            case GRN_LINK_ACCESS_TARGET_TYPE_USER:
                $target =& $grn_uum->getUser($target_id);
                $id_name = 'uid';
                $id_value = $target_id;
                break;
            case GRN_LINK_ACCESS_TARGET_TYPE_GROUP:
                $target =& $grn_uum->getGroup($target_id);
                $id_name = 'gid';
                $id_value = $target_id;
                break;
            case GRN_LINK_ACCESS_TARGET_TYPE_STATIC_ROLE:
                $target =& $grn_uum->getStaticRole($target_id);
                $id_name = 'rid';
                $id_value = $target_id;
                break;
            case GRN_LINK_ACCESS_TARGET_TYPE_DYNAMIC_ROLE:
                $target = $target_id;
                $id_name = 'rid';
                $id_value = $target_id;
                break;
            default:
                //Access Target Object Not Found
                require_once('link/error_code.csp');
                cb_throw_error(E_GRN_LINK_ACCESS_TARGET_NOT_FOUND);
                break;
        }

        //Create Access Object
        $manager = $this->_getCategoryAccessManager();
        $access = $manager->createAccess($category, $target, $target_type,
            $authority_list);

        //Check Inspect Flag
        if ($inspect) {
            //Check Inspection Message Enabled
            require_once('link/inspection.csp');
            $inspection = GRN_Link_Inspection::getInstance();
            if ($inspection->isEnabled()) {
                //Write Inspection Message
                $message_args['cid']
                    = $category->getOID();                      //Category ID
                $message_args[$id_name]
                    = $id_value;                                 //Target ID Name
                $message_args['category_name']
                    = $category->get(GRN_LINK_PROPERTY_NAME);   //Category Name

                //Record Inspection
                $inspection->writeInspectionLog('create',
                    'system_category_access', $message_args);
            }
        }

        //Return Access Object
        return $access;
    }

    /**
     * Remove Access Object
     *
     * @param  int    $access_id   //access_id
     * @param  string $target_type //Table Type(user/group/static_role/dynamic_role)
     * @param  bool   $inspect     //Inspaction Message Flag
     *
     * @return bool   $result                    //Result
     */
    function deleteAccess($access_id, $target_type, $inspect = true)
    {
        //Check Argument
        require_once('link/error_code.csp');
        require_once('fw/string_util.csp');
        cb_trim_check($access_id,
            E_GRN_LINK_ACCESS_INVALID_ID);      //Access ID
        cb_trim_check($target_type,
            E_GRN_LINK_ACCESS_INVALID_TARGET);  //Access Target

        //Check Inspect Flag
        if ($inspect) {
            //Check Inspection Message Enabled
            require_once('link/inspection.csp');
            $inspection = GRN_Link_Inspection::getInstance();
            if ($inspection->isEnabled()) {
                //Get Access
                $access =& $this->getAccess($access_id, $target_type);
                if ( ! $access) {
                    return false;
                }

                //Get Category
                $category =& $access->get(GRN_LINK_PROPERTY_OBJECT);

                //Get Target Information
                switch ($target_type) {
                    case GRN_LINK_ACCESS_TARGET_TYPE_USER:
                        $target =& $access->get(GRN_LINK_PROPERTY_TARGET);
                        $id_name = 'uid';
                        $id_value = $target->getOID();
                        break;
                    case GRN_LINK_ACCESS_TARGET_TYPE_GROUP:
                        $target =& $access->get(GRN_LINK_PROPERTY_TARGET);
                        $id_name = 'gid';
                        $id_value = $target->getOID();
                        break;
                    case GRN_LINK_ACCESS_TARGET_TYPE_STATIC_ROLE:
                        $target =& $access->get(GRN_LINK_PROPERTY_TARGET);
                        $id_name = 'rid';
                        $id_value = $target->getOID();
                        break;
                    case GRN_LINK_ACCESS_TARGET_TYPE_DYNAMIC_ROLE:
                        $target = $access->get(GRN_LINK_PROPERTY_TARGET);
                        $id_name = 'rid';
                        $id_value = $target;
                        break;
                    default:
                        //Access Target Object Not Found
                        require_once('link/error_code.csp');
                        cb_throw_error(E_GRN_LINK_ACCESS_TARGET_NOT_FOUND);
                        break;
                }
            }
        }

        //Delete Access Object
        $manager =& $this->_getCategoryAccessManager();
        $manager->removeAccess($access_id, $target_type);

        //Check Inspect Flag
        if ($inspect) {
            //Check Inspection Message Enabled
            require_once('link/inspection.csp');
            $inspection = GRN_Link_Inspection::getInstance();
            if ($inspection->isEnabled()) {
                //Write Inspection Message
                $message_args['cid']
                    = $category->getOID();                      //Category ID
                $message_args[$id_name]
                    = $id_value;                                 //Target ID Name
                $message_args['category_name']
                    = $category->get(GRN_LINK_PROPERTY_NAME);   //Category Name
                if ( ! $message_args['category_name']) {
                    $message_args['category_name'] = cb_msg('grn.link',
                        GRN_LINK_ROOT_CATEGORY_NAME_DEFAULT_PARENTHESES);
                }

                //Record Inspection
                $inspection->writeInspectionLog('delete',
                    'system_category_access', $message_args);
            }
        }

        return true;
    }

    /**
     * Remove Access Object
     *
     * @param         $category_id
     * @param         $target_id
     * @param  string $target_type //Table Type(user/group/static_role/dynamic_role)
     * @param  bool   $inspect     //Inspaction Message Flag
     *
     * @return bool   $result                    //Result
     */
    function deleteAccess2(
        $category_id,
        $target_id,
        $target_type,
        $inspect = true
    ) {
        //Check Argument
        require_once('link/error_code.csp');
        require_once('fw/string_util.csp');
        cb_trim_check($category_id,
            E_GRN_LINK_CATEGORY_INVALID_ID);    //Category ID
        cb_trim_check($target_id,
            E_GRN_LINK_ACCESS_INVALID_TARGET);  //Target ID
        cb_trim_check($target_type,
            E_GRN_LINK_ACCESS_INVALID_TARGET);  //Access Target

        //Check Inspect Flag
        if ($inspect) {
            //Check Inspection Message Enabled
            require_once('link/inspection.csp');
            $inspection = GRN_Link_Inspection::getInstance();
            if ($inspection->isEnabled()) {
                //Get Access
                $access =& $this->getAccess2($category_id, $target_id,
                    $target_type);
                if ( ! $access) {
                    return false;
                }

                //Get Category
                $category =& $access->get(GRN_LINK_PROPERTY_OBJECT);

                //Get Target Information
                switch ($target_type) {
                    case GRN_LINK_ACCESS_TARGET_TYPE_USER:
                        $target =& $access->get(GRN_LINK_PROPERTY_TARGET);
                        $id_name = 'uid';
                        $id_value = $target->getOID();
                        break;
                    case GRN_LINK_ACCESS_TARGET_TYPE_GROUP:
                        $target =& $access->get(GRN_LINK_PROPERTY_TARGET);
                        $id_name = 'gid';
                        $id_value = $target->getOID();
                        break;
                    case GRN_LINK_ACCESS_TARGET_TYPE_STATIC_ROLE:
                        $target =& $access->get(GRN_LINK_PROPERTY_TARGET);
                        $id_name = 'rid';
                        $id_value = $target->getOID();
                        break;
                    case GRN_LINK_ACCESS_TARGET_TYPE_DYNAMIC_ROLE:
                        $target = $access->get(GRN_LINK_PROPERTY_TARGET);
                        $id_name = 'rid';
                        $id_value = $target;
                        break;
                    default:
                        //Access Target Object Not Found
                        require_once('link/error_code.csp');
                        cb_throw_error(E_GRN_LINK_ACCESS_TARGET_NOT_FOUND);
                        break;
                }
            }
        }

        //Delete Access Object
        $manager =& $this->_getCategoryAccessManager();
        $manager->removeAccess2($category_id, $target_id, $target_type);

        //Check Inspect Flag
        if ($inspect) {
            //Check Inspection Message Enabled
            require_once('link/inspection.csp');
            $inspection = GRN_Link_Inspection::getInstance();
            if ($inspection->isEnabled()) {
                //Write Inspection Message
                $message_args['cid']
                    = $category->getOID();                      //Category ID
                $message_args[$id_name]
                    = $id_value;                                 //Target ID Name/Value
                $message_args['category_name']
                    = $category->get(GRN_LINK_PROPERTY_NAME);   //Category Name
                if ( ! $message_args['category_name']) {
                    $message_args['category_name'] = cb_msg('grn.link',
                        GRN_LINK_ROOT_CATEGORY_NAME_DEFAULT_PARENTHESES);
                }

                //Record Inspection
                $inspection->writeInspectionLog('delete',
                    'system_category_access', $message_args);
            }
        }

        return true;
    }

    /**
     * Set Security  Model
     *
     * @param  int    $category_id    //Category ID
     * @param  string $security_model //Security Model
     * @param  bool   $inspect        //Inspection Message Flag
     *
     * @return bool   $result                    //Result
     */
    function setSecurityModel($category_id, $security_model, $inspect = true)
    {
        //Check Argument
        require_once('link/error_code.csp');
        require_once('fw/string_util.csp');
        cb_trim_check($category_id,
            E_GRN_LINK_CATEGORY_INVALID_ID);            //Category ID
        cb_trim_check($security_model,
            E_GRN_LINK_ACCESS_INVALID_SECURITY_MODEL);  //Security Model

        //Get Category Object
        $category_logic =& $this->_getCategoryLogic();
        $category =& $category_logic->get($category_id);

        //Set Security Model
        $manager =& $this->_getCategoryAccessManager();
        $manager->setSecurityModel($category, $security_model);

        //Delete All Access
        foreach ($this->_target_type_list as $target_type) {
            $access_list = $this->getAccessListByCategoryID($category_id,
                $target_type);
            foreach (array_keys($access_list) as $access_id) {
                //Delete Access
                $this->deleteAccess($access_id, $target_type, false);
            }
        }

        //Check Inspect Flag
        if ($inspect) {
            //Check Inspection Message Enabled
            require_once('link/inspection.csp');
            $inspection = GRN_Link_Inspection::getInstance();
            if ($inspection->isEnabled()) {
                //Write Inspection Message
                $message_args['cid']
                    = $category->getOID();                      //Category ID
                $message_args['category_name']
                    = $category->get(GRN_LINK_PROPERTY_NAME);   //Category Name
                $message_args['security_model']
                    = $security_model;                          //Security Model

                //Record Inspection
                $inspection->writeInspectionLog('modify',
                    'system_category_access', $message_args);
            }
        }

        return true;
    }

    /**
     * Import Access
     *
     * @param array $line //CSV Line
     */
    function importAccess($line)
    {
        //Check Argument
        if (count($line) != 4) {
            //InValid CSV Data
            require_once('link/error_code.csp');
            cb_throw_error(E_GRN_LINK_ACCESS_INVALID_CSV_DATA);
        }

        //Get Category Object
        $category_logic =& $this->_getCategoryLogic();
        if ($line[0] == 'ROOT_CATEGORY') {
            $category =& $category_logic->getRoot();
        } else {
            $category =& $category_logic->getByForeignKey($line[0]);
        }

        //Create Authority List
        $authority_list = ['browse' => 0];
        if (preg_match('/B/i', $line[2]) !== 0) {
            $authority_list['browse'] = 1;
        }

        //Get UUM Instance
        global $G_container_base;
        $uum =& $G_container_base->getInstance('uum');

        //Get Target Object
        switch ($line[1]) {
            case GRN_LINK_ACCESS_TARGET_TYPE_USER:
                $target =& $uum->getUserByForeignKey($line[3]);
                if ( ! $target) {
                    //Invalid Target
                    require_once('link/error_code.csp');
                    cb_throw_error(E_GRN_LINK_ACCESS_INVALID_TARGET);
                }
                $target_id = $target->getOID();
                $id_name = 'uid';
                $id_value = $target_id;
                break;
            case GRN_LINK_ACCESS_TARGET_TYPE_GROUP:
                $target =& $uum->getGroupByForeignKey($line[3]);
                if ( ! $target) {
                    //Invalid Target
                    require_once('link/error_code.csp');
                    cb_throw_error(E_GRN_LINK_ACCESS_INVALID_TARGET);
                }
                $target_id = $target->getOID();
                $id_name = 'gid';
                $id_value = $target_id;
                break;
            case GRN_LINK_ACCESS_TARGET_TYPE_STATIC_ROLE:
                $target =& $uum->getStaticRoleByForeignKey($line[3]);
                if ( ! $target) {
                    //Invalid Target
                    require_once('link/error_code.csp');
                    cb_throw_error(E_GRN_LINK_ACCESS_INVALID_TARGET);
                }
                $target_id = $target->getOID();
                $id_name = 'rid';
                $id_value = $target_id;
                break;
            case GRN_LINK_ACCESS_TARGET_TYPE_DYNAMIC_ROLE:
                $target_id = $line[3];
                $id_name = 'rid';
                $id_value = $target_id;
                break;
            default:
                //Invalid Target
                require_once('link/error_code.csp');
                cb_throw_error(E_GRN_LINK_ACCESS_INVALID_TARGET);
                break;
        }

        //Get Access 
        $access =& $this->getAccess2($category->getOID(), $target_id, $line[1]);
        if ($access) {
            if ($authority_list['browse'] != 1) {
                $this->deleteAccess($access->getOID(), $line[1], false);
            }
        } else {
            if ($authority_list['browse'] == 1) {
                //Add Access
                $this->addAccess($category->getOID(), $target_id, $line[1],
                    $authority_list, false);
            }
        }

        //Check Inspection Message Enabled
        require_once('link/inspection.csp');
        $inspection = GRN_Link_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            //Get Target Object
            switch ($line[1]) {
                case GRN_LINK_ACCESS_TARGET_TYPE_USER:
                    $target =& $uum->getUserByForeignKey($line[3]);
                    $target_id = $target->getOID();
                    $id_name = 'uid';
                    $id_value = $target_id;
                    break;
                case GRN_LINK_ACCESS_TARGET_TYPE_GROUP:
                    $target =& $uum->getGroupByForeignKey($line[3]);
                    if ( ! $target) {
                        //Invalid Target
                        require_once('link/error_code.csp');
                        cb_throw_error(E_GRN_LINK_ACCESS_INVALID_TARGET);
                    }
                    $target_id = $target->getOID();
                    $id_name = 'gid';
                    $id_value = $target_id;
                    break;
                case GRN_LINK_ACCESS_TARGET_TYPE_STATIC_ROLE:
                    $target =& $uum->getStaticRoleByForeignKey($line[3]);
                    if ( ! $target) {
                        //Invalid Target
                        require_once('link/error_code.csp');
                        cb_throw_error(E_GRN_LINK_ACCESS_INVALID_TARGET);
                    }
                    $target_id = $target->getOID();
                    $id_name = 'rid';
                    $id_value = $target_id;
                    break;
                case GRN_LINK_ACCESS_TARGET_TYPE_DYNAMIC_ROLE:
                    $target_id = $line[3];
                    $id_name = 'rid';
                    $id_value = $target_id;
                    break;
                default:
                    //Invalid Target
                    require_once('link/error_code.csp');
                    cb_throw_error(E_GRN_LINK_ACCESS_INVALID_TARGET);
                    break;
            }

            //Write Inspection Message
            $message_args['cid']
                = $category->getOID();                      //Category ID
            $message_args[$id_name]
                = $id_value;                                 //Target ID Name/value
            $message_args['category_name']
                = $category->get(GRN_LINK_PROPERTY_NAME);   //Category Name
            $message_args['auth'] = $authority_list['browse'] ? 'browse:1'
                : 'browse:0';  //Authority

            //Record Inspection
            $inspection->writeInspectionLog('import', 'system_category_access',
                $message_args);
        }

        return;
    }


    /**
     * Export Access
     *
     * @param  int $category_id //Category ID
     *
     * @return array  $csv_line_list             //CSV Line List
     */
    function exportAccess($category_id)
    {
        $csv_line_list = [];

        //Check Argument
        require_once('link/error_code.csp');
        require_once('fw/string_util.csp');
        cb_trim_check($category_id,
            E_GRN_LINK_CATEGORY_INVALID_ID);            //Category ID

        //Get Category Object
        $category_logic =& $this->_getCategoryLogic();
        $category =& $category_logic->get($category_id);

        //Get Category Access List
        foreach ($this->_target_type_list as $target_type) {
            $csv_line = [];
            $access_list = $this->getAccessListByCategoryID($category_id,
                $target_type);
            foreach (array_keys($access_list) as $access_id) {
                //Get Access Object
                $access =& $access_list[$access_id];

                //Get Target Object Foregin Key
                if ($target_type == GRN_LINK_ACCESS_TARGET_TYPE_DYNAMIC_ROLE) {
                    $target_key = $access->get(GRN_LINK_PROPERTY_TARGET);
                    $id_name = 'rid';
                    $id_value = $target_key;
                } else {
                    $object =& $access->get(GRN_LINK_PROPERTY_TARGET);
                    $target_key = $object->get(GRN_LINK_PROPERTY_FOREIGN_KEY);
                    switch ($target_type) {
                        case GRN_LINK_ACCESS_TARGET_TYPE_USER:
                            $id_name = 'uid';
                            $id_value = $object->getOID();
                            break;
                        case GRN_LINK_ACCESS_TARGET_TYPE_GROUP:
                            $id_name = 'gid';
                            $id_value = $object->getOID();
                            break;
                        case GRN_LINK_ACCESS_TARGET_TYPE_STATIC_ROLE:
                            $id_name = 'rid';
                            $id_value = $object->getOID();
                            break;
                        default:
                            //Invalid Target
                            require_once('link/error_code.csp');
                            cb_throw_error(E_GRN_LINK_ACCESS_INVALID_TARGET);
                            break;
                    }
                }

                //Create CSV Line
                $category_foreign_key
                    = $category->get(GRN_LINK_PROPERTY_FOREIGN_KEY);
                $csv_line[0] = $category_foreign_key ? $category_foreign_key
                    : 'ROOT_CATEGORY'; //Category Foreign Key
                $csv_line[1]
                    = $target_type;                                                    //Target Type
                $csv_line[2]
                    = 'B';                                                             //Authority
                $csv_line[3]
                    = $target_key;                                                     //Target Foreign Key

                //Add CSV Line List
                $csv_line_list[] = $csv_line;
                unset($csv_line);

                //Check Inspection Message Enabled
                require_once('link/inspection.csp');
                $inspection = GRN_Link_Inspection::getInstance();
                if ($inspection->isEnabled()) {
                    //Get Authority
                    $browse = $access->get('authority_browse');

                    //Write Inspection Message
                    $message_args = [];
                    $message_args['cid']
                        = $category->getOID();                      //Category ID
                    $message_args[$id_name]
                        = $id_value;                                 //Target ID Name/value
                    $message_args['category_name']
                        = $category->get(GRN_LINK_PROPERTY_NAME);   //Category Name
                    $message_args['auth'] = $browse ? 'browse:1'
                        : 'browse:0';        //Authority

                    //Record Inspection
                    $inspection->writeInspectionLog('export',
                        'system_category_access', $message_args);
                }
            }
        }

        //Return CSV Line List
        return $csv_line_list;
    }

    /**
     * Import Security Model
     *
     * @param array $line //CSV Line
     *
     * @return void
     */
    function importSecurityModel($line)
    {
        //Check Argument
        if (count($line) != 3 && count($line) != 4) {
            //InValid CSV Data
            require_once('link/error_code.csp');
            cb_throw_error(E_GRN_LINK_ACCESS_INVALID_CSV_DATA);
        }

        //Get Category Object
        $category_logic =& $this->_getCategoryLogic();
        if ($line[0] == 'ROOT_CATEGORY') {
            $category =& $category_logic->getRoot();
        } else {
            $category =& $category_logic->getByForeignKey($line[0]);
        }

        //Set Security Model
        switch ($line[2]) {
            case 'revoke':
                $category->set(GRN_LINK_PROPERTY_SECURITY_MODEL,
                    GRN_LINK_SECURITY_MODEL_TYPE_REVOKE);
                break;
            case 'grant':
                $category->set(GRN_LINK_PROPERTY_SECURITY_MODEL,
                    GRN_LINK_SECURITY_MODEL_TYPE_GRANT);
                break;
            default:
                //Not Input necessary
                require_once('link/error_code.csp');
                cb_throw_error(E_GRN_LINK_ACCESS_INVALID_SECURITY_MODEL);
                break;
        }

        //Check Inspection Message Enabled
        require_once('link/inspection.csp');
        $inspection = GRN_Link_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            //Write Inspection Message
            $message_args['cid']
                = $category->getOID();                      //Category ID
            $message_args['category_name']
                = $category->get(GRN_LINK_PROPERTY_NAME);   //Category Name
            $message_args['security_model']
                = $line[2];                              //Security Model

            //Record Inspection
            $inspection->writeInspectionLog('import', 'system_category_access',
                $message_args);
        }

        return;
    }

    /**
     * Export Security Model
     *
     * @param  int $category_id //Category ID
     *
     * @return array  $csv_line                  //CSV Line
     */
    function exportSecurityModel($category_id)
    {
        $csv_line = [];

        //Check Argument
        require_once('link/error_code.csp');
        require_once('fw/string_util.csp');
        cb_trim_check($category_id,
            E_GRN_LINK_CATEGORY_INVALID_ID);            //Category ID

        //Get Category Object
        $category_logic =& $this->_getCategoryLogic();
        $category =& $category_logic->get($category_id);

        //Get Security Model
        $security_model = $this->getSecurityModel($category_id);

        //Create CSV Line
        $category_foreign_key = $category->get(GRN_LINK_PROPERTY_FOREIGN_KEY);
        $csv_line[0] = $category_foreign_key ? $category_foreign_key
            : 'ROOT_CATEGORY'; //Category Foreign Key
        $csv_line[1] = GRN_LINK_PROPERTY_SECURITY_MODEL;
        $csv_line[2] = $security_model;

        //Check Inspection Message Enabled
        require_once('link/inspection.csp');
        $inspection = GRN_Link_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            //Write Inspection Message
            $message_args['cid']
                = $category->getOID();                      //Category ID
            $message_args['category_name']
                = $category->get(GRN_LINK_PROPERTY_NAME);   //Category Name
            $message_args['security_model']
                = $security_model;                       //Security Model

            //Record Inspection
            $inspection->writeInspectionLog('export', 'system_category_access',
                $message_args);
        }

        //Return CSV Line
        return $csv_line;
    }
}


