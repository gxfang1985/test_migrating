<?php
/**
 * Link Application Controller Utility Class
 *
 * @author  Yuichi, Nakamura 2005/4
 * @version 1.0
 * @package grn.link
 */

/** Link Application **/
require_once('link/resources.csp');
require_once('link/access_manager.csp');
require_once('link/manage_manager.csp');

/**
 * Link Controller Utility Class
 *
 * @package grn.link
 */
class GRN_Link_Link_Controller_Utility
{
    /** Link and Category Logic Instance **/
    var $_link_information_logic_base = null;
    var $_category_information_logic_base = null;

    /** Share / Personal type **/
    var $_type = null;

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {

    }

    /**
     * Get Instance
     *
     * @return GRN_Link_Link_Controller_Utility $instance                  //Instance of GRN_Link_Link_Controller_Utility
     */
    private static $_instance = null;

    /**
     *
     * @return GRN_Link_Link_Controller_Utility
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Link / Category Type
     *
     * @param  none
     *
     * @return string $type                      //Link / Category Type(Share or Personal or System or Manage)
     */
    function getType()
    {
        if ( ! $this->_type) {
            $this->_type = GRN_LINK_LINK_TYPE_PERSONAL;
        }

        //Return Type
        return $this->_type;
    }

    /**
     * Set Link / Category Type
     *
     * @param  string $type //Link / Category Type(Share or Personal or System or Manage)
     *
     * @return bool   $result                    //result
     */
    function setType($type)
    {
        //Set Type
        $this->_type = $type;

        return true;
    }

    /**
     * Get Information Link Logic Base
     *
     * @param  none
     *
     * @return GRN_Link_Personal_Link_Information_Logic_Base|GRN_Link_System_Link_Information_Logic_Base
     */
    function getLinkInformationLogicBase()
    {
        //Get Type
        $type = $this->getType();

        //Get Link Logic
        require_once('link/link_information_logic_base.csp');
        if ($type == GRN_LINK_LINK_TYPE_PERSONAL) {
            $this->_link_information_logic_base
                = GRN_Link_Personal_Link_Information_Logic_Base::getInstance();
        } else {
            $this->_link_information_logic_base
                = GRN_Link_System_Link_Information_Logic_Base::getInstance();
        }

        //Return Link Information Logic Base
        return $this->_link_information_logic_base;
    }

    /**
     * Get Category Information Logic Base
     *
     * @param  none
     *
     * @return GRN_Link_Personal_Category_Information_Logic_Base|GRN_Link_System_Category_Information_Logic_Base
     */
    function getCategoryInformationLogicBase()
    {
        //Get Type
        $type = $this->getType();

        //Get Categor Logic
        require_once('link/category_information_logic_base.csp');
        if ($type == GRN_LINK_LINK_TYPE_PERSONAL) {
            $this->_category_information_logic_base
                = GRN_Link_Personal_Category_Information_Logic_Base::getInstance();
        } else {
            $this->_category_information_logic_base
                = GRN_Link_System_Category_Information_Logic_Base::getInstance();
        }

        //Return Category Logic
        return $this->_category_information_logic_base;
    }

    /**
     * Get Category Controller Utility
     *
     * @param  none
     *
     * @return GRN_Link_Category_Controller_Utility
     */
    function getCategoryControllerUtility()
    {
        //Get Type
        $type = $this->getType();

        //Get Category Controller Utility
        $this->_category_util
            = GRN_Link_Category_Controller_Utility::getInstance();
        $this->_category_util->setType($type);

        //Return Category Utility
        return $this->_category_util;
    }

    /**
     * Get Link View
     *
     * @param  int   $link_id         //Link ID
     * @param  array $translation_map //Model <=> View Translation Map
     * @param  int   $category_id     //Category ID
     * @param  int   $lock_mode       //Lock Mode
     *
     * @return array  $link_view                 //Link for View
     */
    function getView(
        $link_id,
        $translation_map,
        $category_id = null,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $link_for_view = [];

        //Get Link Object
        $link_information_logic_base = $this->getLinkInformationLogicBase();
        $link
            =& $link_information_logic_base->get($link_id,
            $category_id, $lock_mode);

        //Create Parameter Translation for Link
        foreach ($translation_map as $view => $model) {
            switch ($model) {
                case '_id':
                    $link_for_view[$view] = $link['_id'];
                    break;
                case 'cid':
                    $link_for_view[$view] = $link['col_category'];
                    break;
                case 'category_name':
                    $cid = $link['col_category'];
                    $catetgory_information_logic_base
                        =& $this->getCategoryInformationLogicBase();
                    $category
                        =& $catetgory_information_logic_base->get($cid, null,
                        $lock_mode);
                    if ($category['_id'] == GRN_LINK_CATEGORY_ROOT_ID) {
                        $link_for_view[$view] = cb_msg('grn.link',
                            GRN_LINK_ROOT_CATEGORY_NAME_DEFAULT_PARENTHESES);
                    } else {
                        $link_for_view[$view] = $category['col_name'];
                    }
                    break;
                case 'sso_name':
                    //Get SSO Method ID
                    $smid = $link['col_sso'];

                    //Get SSO Method
                    require_once('grn/sso.csp');
                    $sso_service = GRN_SSO_Service::getInstance();
                    $sso_method_list = $sso_service->getSSOMethodList();
                    if ( ! array_key_exists($smid, $sso_method_list)) {
                        $link_for_view[$view] = cb_msg('grn.link',
                            'default_sso');
                    } else {
                        $link_for_view[$view]
                            = $sso_method_list[$smid]->get('display_name');
                    }
                    break;
                case 'sid':
                    //Get SSO Method ID
                    $smid = $link['col_sso'];
                    if ($smid) {
                        $link_for_view[$view] = $smid;
                    } else {
                        $link_for_view[$view] = 0;
                    }
                    break;
                case 'creator_uid':
                case 'modifier_uid':
                    //Get User ID
                    $elements = explode('_', $model);
                    $uid = $link['col_' . $elements[0]];
                    if ($uid) {
                        $link_for_view[$view] = $uid;
                    }
                    break;
                case 'creator_name':
                case 'modifier_name':
                    //Get User ID
                    $elements = explode('_', $model);
                    $uid = $link['col_' . $elements[0]];

                    //Get User Object
                    global $G_container_base;
                    $grn_uum = $G_container_base->getInstance('uum');
                    $object = $grn_uum->getUser($uid);
                    if ($object) {
                        $link_for_view[$view]
                            = $object->get(GRN_LINK_PROPERTY_DISPLAY_NAME);
                    }
                    break;
                case 'ctime':
                case 'mtime':
                    $time = $link['col_' . $model];
                    $link_for_view[$view] = new CB_TimeStamp();
                    $link_for_view[$view]->unix_ts = $time;
                    break;
                default:
                    $link_for_view[$view] = $link['col_' . $model];
                    break;
            }
        }
        //Check Line
        if ($link['col_type'] == 'line') {
            $link_for_view['title'] = '------------------------------';
        }

        //Return Link View
        return $link_for_view;
    }

    /**
     * Get Link List View
     *
     * @param  array $translation_map //Model <=> View Translation Map
     * @param  int   $category_id     //Category ID
     * @param  int   $lock_mode       //Lock Mode
     *
     * @return array  $link_view                 //Link for View
     */
    function getListView(
        $translation_map,
        $category_id = null,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $link_list_for_view = [];

        //Get Link List Object
        $link_information_logic_base = $this->getLinkInformationLogicBase();
        $link_list
            =& $link_information_logic_base->getList($category_id,
            $lock_mode);

        //Create Parameter Translation for Link List
        foreach (array_keys($link_list) as $link_id) {
            $link_list_for_view[$link_id] = $this->getView($link_id,
                $translation_map, $category_id, $lock_mode);
        }

        //Return Link List View
        return $link_list_for_view;
    }

    /**
     * Search Category
     *
     * @param  int   $category_id     //Category ID
     * @param  array $search_info     //Search Information
     * @param  array $translation_map //Translation Map
     * @param  int   $lock_mode       //Lock Mode
     *
     * @return array  $hit_category_list         //Hit Category List
     */
    function search(
        $category_id,
        $search_info,
        $translation_map,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $search_category_list = [];

        $dummy_translation_map = ['_id' => '_id'];

        //Get Category Controller Utility
        $category_util =& $this->getCategoryControllerUtility();

        //Get Search Category List
        if ($search_info['all']) {
            //Get All Category
            $search_category_list
                = $category_util->getListView($dummy_translation_map, null,
                $lock_mode);
        } elseif ($search_info['recursive']) {
            //Get Category
            $search_category_list[$category_id]
                = $category_util->getView($category_id, $dummy_translation_map,
                null, $lock_mode = CB_DATABASE_DEFAULT_LOCK);

            //Get All Child Category
            $search_category_list += $category_util->getAllChildListView($category_id,
                $dummy_translation_map, $lock_mode);
        } else {
            //Get Category
            $search_category_list[$category_id]
                = $category_util->getView($category_id, $dummy_translation_map,
                null, $lock_mode);
        }

        //Check Search Category Count
        if (count($search_category_list) == 0) {
            return [];
        }

        //Create Condition List
        require_once('fw/string_util.csp');
        $condition_list = cb_parse_search_text($search_info['text']);

        //Check Condition Count
        if (count($condition_list) == 0) {
            return [];
        }

        //Search Link
        $link_information_logic_base =& $this->getLinkInformationLogicBase();
        $hit_link_list
            = $link_information_logic_base->search(array_keys($search_category_list),
            $search_info['target_list'],
            $condition_list, $search_info['offset'], $search_info['limit'],
            $search_info['term'], $lock_mode);

        //Create Parameter Translation for Link List
        $link_list_for_view = [];
        foreach (array_keys($hit_link_list) as $hit_link_id) {
            $link_list_for_view[$hit_link_id] = $this->getView($hit_link_id,
                $translation_map, null, $lock_mode);
        }

        return $link_list_for_view;
    }

    /**
     * Search Link Count
     *
     * @param  int   $category_id //Category ID
     * @param  array $search_info //Search Information
     * @param  int   $lock_mode   //Lock Mode
     *
     * @return int    $hit_link_count            //Hit Link Count
     */
    function searchCount(
        $category_id,
        $search_info,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $search_category_list = [];
        $dummy_translation_map = ['_id' => '_id'];

        //Get Category Controller Utility
        $category_util =& $this->getCategoryControllerUtility();

        //Get Search Category List
        if ($search_info['all']) {
            //Get All Category
            $search_category_list
                = $category_util->getListView($dummy_translation_map, null,
                $lock_mode);
        } elseif ($search_info['recursive']) {
            //Get Category
            $search_category_list[$category_id]
                = $category_util->getView($category_id, $dummy_translation_map,
                null, $lock_mode);

            //Get All Child Category
            $search_category_list += $category_util->getAllChildListView($category_id,
                $dummy_translation_map, $lock_mode);
        } else {
            //Get Category
            $search_category_list[$category_id]
                = $category_util->getView($category_id, $dummy_translation_map,
                null, $lock_mode);
        }

        //Check Search Category Count
        if (count($search_category_list) == 0) {
            return 0;
        }

        //Create Condition List
        require_once('fw/string_util.csp');
        $condition_list = cb_parse_search_text($search_info['text']);

        //Check Condition Count
        if (count($condition_list) == 0) {
            return 0;
        }

        //Search Link Count
        $link_information_logic_base =& $this->getLinkInformationLogicBase();

        return $link_information_logic_base->searchCount(array_keys($search_category_list),
            $search_info['target_list'],
            $condition_list, $search_info['term'], $lock_mode);
    }

    /**
     * Set Genaral Configuration
     *
     * @param  array $config_list //Configuration (config_name=>config_value)
     *
     * @return bool
     */
    function setGeneralConfig($config_list)
    {
        //Check Argument
        if ( ! is_array($config_list)) {
            return false;
        }

        //Get Link Application Instance
        require_once('grn/application.csp');
        $locator = GRN_ApplicationLocator::instance();
        $link_app =& $locator->getInstance('link');

        //Get Profile
        $type = $this->getType();
        if ($type == 'personal') {
            //Get Personal Profile
            require_once('grn/uum.csp');
            global $G_container_base;
            $grn_uum =& $G_container_base->getInstance('uum');
            $login_user =& $grn_uum->getLoginUser();
            if ( ! $login_user) {
                return false;
            }
            $profile =& $link_app->getUserProfile($login_user);
        } else {
            //Get System Profile
            $profile =& $link_app->getSystemProfile();
        }
        if ( ! $profile) {
            return false;
        }

        //Set General Config
        foreach ($config_list as $config_name => $config_value) {
            $dummy = null;
            if ( ! $profile->getAttribute($config_name, $dummy)) {
                //Create Attribute
                $profile->createAttribute($config_name, $config_value);
            } else {
                //Update Attribute
                $profile->updateAttribute($config_name, $config_value);
            }
        }

        return true;
    }


    /**
     * Get Genaral Configuration
     *
     * @param  none
     * @param  array $config //Configuration (config_name=>config_value)
     */
    function getGeneralConfig()
    {
        //Get Link Application Instance
        require_once('grn/application.csp');
        $locator = GRN_ApplicationLocator::instance();
        $link_app = $locator->getInstance('link');

        //Get Profile
        $type = $this->getType();
        if ($type == 'personal') {
            //Get Personal Profile
            require_once('grn/uum.csp');
            global $G_container_base;
            $grn_uum = $G_container_base->getInstance('uum');
            $login_user = $grn_uum->getLoginUser();
            if ( ! $login_user) {
                return false;
            }
            $profile = $link_app->getUserProfile($login_user);
        } else {
            //Get System Profile
            $profile = $link_app->getSystemProfile();
        }
        if ( ! $profile) {
            return false;
        }

        //Get General Config
        return $profile->getAttributes();
    }
}

/**
 * Category Controller  Utility Class
 *
 * @package grn.link
 */
class GRN_Link_Category_Controller_Utility
{
    /** Link and Category Logic Instance **/
    var $_link_informationlogic_base = null;
    var $_category_information_logic_base = null;
    var $_category_access_logic_base = null;
    var $_category_manage_logic_base = null;

    /** Share / Personal type **/
    var $_type = null;

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {

    }

    /**
     * Get Instance
     *
     * @return GRN_Link_Category_Controller_Utility $instance                  //Instance of GRN_Link_Category_Controller_Utility
     */
    private static $_instance = null;

    /**
     *
     * @return GRN_Link_Category_Controller_Utility
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Link / Category Type
     *
     * @param  none
     *
     * @return string $type                      //Link / Category Type(Share or Personal)
     */
    function getType()
    {
        if ( ! $this->_type) {
            $this->_type = GRN_LINK_LINK_TYPE_PERSONAL;
        }

        //Return Type
        return $this->_type;
    }

    /**
     * Set Link / Category Type
     *
     * @param  string $type //Link / Category Type(Share or Personal)
     *
     * @return bool   $result                    //result
     */
    function setType($type)
    {
        //Get Link Application Session
        require_once('fw/session_manager.csp');
        $session_manager = CB_SessionManager::getInstance();
        $session = $session_manager->getSession(GRN_LINK_MODULE_ID);

        //Set Type
        $session->set(GRN_LINK_SESSION_LINK_TYPE, $type);
        $this->_type = $type;

        return true;
    }

    /**
     * Get Link Information Logic
     *
     * @param  none
     *
     * @return GRN_Link_Personal_Link_Information_Logic_Base|GRN_Link_System_Link_Information_Logic_Base
     */
    function getLinkInformationLogicBase()
    {
        //Get Type
        $type = $this->getType();

        //Get Link Logic
        require_once('link/link_information_logic_base.csp');
        if ($type == GRN_LINK_LINK_TYPE_PERSONAL) {
            $this->_link_information_logic_base
                = GRN_Link_Personal_Link_Information_Logic_Base::getInstance();
        } else {
            $this->_link_information_logic_base
                = GRN_Link_System_Link_Information_Logic_Base::getInstance();
        }

        //Return Link Information Logic Base
        return $this->_link_information_logic_base;
    }

    /**
     * Get Category Information Logic Base
     *
     * @param  none
     *
     * @return GRN_Link_Personal_Category_Information_Logic_Base|GRN_Link_System_Category_Information_Logic_Base
     */
    function getCategoryInformationLogicBase()
    {
        //Get Type
        $type = $this->getType();

        //Get Categor Logic
        require_once('link/category_information_logic_base.csp');
        if ($type == GRN_LINK_LINK_TYPE_PERSONAL) {
            $this->_category_information_logic_base
                = GRN_Link_Personal_Category_Information_Logic_Base::getInstance();
        } else {
            $this->_category_information_logic_base
                = GRN_Link_System_Category_Information_Logic_Base::getInstance();
        }

        //Return Category Information Logic Base
        return $this->_category_information_logic_base;
    }

    /**
     * Get Category Access Logic Base
     *
     * @param  none
     *
     * @return GRN_Link_Category_Access_Logic_Base
     */
    function getCategoryAccessLogicBase()
    {
        //Get Category Access Logic
        require_once('link/access_logic_base.csp');
        $this->_category_access_logic_base
            = GRN_Link_Category_Access_Logic_Base::getInstance();

        //Return Category Access Logic
        return $this->_category_access_logic_base;
    }

    /**
     * Get Category Manage Logic Base
     *
     * @param  none
     *
     * @return GRN_Link_Category_Manage_Logic_Base
     */
    function getCategoryManageLogicBase()
    {
        //Get Category Manage Logic Base
        require_once('link/manage_logic_base.csp');
        $this->_category_manage_logic_base
            = GRN_Link_Category_Manage_Logic_Base::getInstance();

        //Return Category Access Logic
        return $this->_category_manage_logic_base;
    }

    /**
     * Check Access
     *
     * @param  int  $category_id        //Category
     * @param  int  $parent_category_id //Parent Category ID
     * @param  bool $throw_error        //Throw Errro Flag
     * @param  int  $lock_mode          //Lock Mode
     *
     * @return bool   $result                    //Check Result
     */
    function checkAccess(
        $category_id,
        $parent_category_id = null,
        $throw_error = true,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        if ($this->isSuperAdmin()) {
            //Always True
            return true;
        }

        //Check Category Type
        if ($this->_type == GRN_LINK_LINK_TYPE_PERSONAL) {
            //Always True
            return true;
        }

        //Get Category Object
        $category_information_logic_base
            = $this->getCategoryInformationLogicBase();
        $category =& $category_information_logic_base->get($category_id,
            $parent_category_id, $lock_mode);

        //Check Access Right
        if ($this->_type == GRN_LINK_LINK_TYPE_SHARE
            || $this->_type == GRN_LINK_LINK_TYPE_MANAGE
        ) {
            $category_access_logic_base = $this->getCategoryAccessLogicBase();
            if ( ! $category_access_logic_base->evaluateCategory($category['_id'],
                $lock_mode)
            ) {
                //Check Throw Error Flag
                if ($throw_error) {
                    //Category Access Deny
                    require_once('link/error_code.csp');
                    cb_throw_error(E_GRN_LINK_ACCESS_DENY);
                } else {
                    return false;
                }
            }
        }

        return true;
    }

    /**
     * Check Manage
     *
     * @param  int  $category_id        //Category
     * @param  int  $parent_category_id //Parent Category ID
     * @param  bool $throw_error        //Throw Errro Flag
     * @param  int  $lock_mode          //Lock Mode
     *
     * @return bool   $result                    //Check Result
     */
    function checkManage(
        $category_id,
        $parent_category_id = null,
        $throw_error = true,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Category Object
        $category_information_logic_base
            = $this->getCategoryInformationLogicBase();
        $category =& $category_information_logic_base->get($category_id,
            $parent_category_id, $lock_mode);

        //Check Manage Right
        if ($this->_type == GRN_LINK_LINK_TYPE_MANAGE) {
            $category_manage_logic_base = $this->getCategoryManageLogicBase();
            if ( ! $category_manage_logic_base->evaluateCategory($category['_id'],
                $lock_mode)
            ) {
                //Check Throw Error Flag
                if ($throw_error) {
                    //Category Manage Deny
                    require_once('link/error_code.csp');
                    cb_throw_error(E_GRN_LINK_MANAGE_DENY);
                } else {
                    return false;
                }
            }
        }

        return true;
    }

    /**
     * Get Category View
     *
     * @param  int   $category_id        //Category
     * @param  array $translation_map    //Model <=> View Translation Map
     * @param  int   $parent_category_id //Parent Category ID
     * @param  bool  $throw_error        //Throw Errro Flag
     * @param  int   $lock_mode          //Lock Mode
     *
     * @return array  $link_view                 //Link for View
     */
    function getView(
        $category_id,
        $translation_map,
        $parent_category_id = null,
        $throw_error = true,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $category_for_view = [];

        //Get Category Object
        $category_information_logic_base
            = $this->getCategoryInformationLogicBase();
        $category =& $category_information_logic_base->get($category_id,
            $parent_category_id, $lock_mode);

        //Chech Shared Link
        if ($throw_error) {
            //Check Access
            $this->checkAccess($category_id, $parent_category_id, $throw_error,
                $lock_mode);
        }

        //Create Parameter Translation for Category
        foreach ($translation_map as $view => $model) {
            switch ($model) {
                case '_id':
                    $category_for_view[$view] = $category['_id'];
                    break;
                case 'creator_uid':
                case 'modifier_uid':
                    //Get User ID
                    $elements = explode('_', $model);
                    $uid = $category['col_' . $elements[0]];
                    if ($uid) {
                        $category_for_view[$view] = $uid;
                    }
                    break;
                case 'creator_name':
                case 'modifier_name':
                    //Get User ID
                    $elements = explode('_', $model);
                    $uid = $category['col_' . $elements[0]];

                    //Get User Object
                    global $G_container_base;
                    $grn_uum =& $G_container_base->getInstance('uum');
                    $object =& $grn_uum->getUser($uid);
                    if ($object) {
                        $category_for_view[$view]
                            = $object->get(GRN_LINK_PROPERTY_DISPLAY_NAME);
                    }
                    break;
                case 'ctime':
                case 'mtime':
                    $time = $category['col_'
                                      . $model];
                    $category_for_view[$view] = new CB_TimeStamp();
                    $category_for_view[$view]->unix_ts = $time;
                    break;
                case 'num_children':
                    $category_for_view[$view]
                        = $category_information_logic_base->getChildCount($category['_id'],
                        $lock_mode);
                    break;
                case 'num_link':
                    $link_information_logic_base
                        =& $this->getLinkInformationLogicBase();
                    $category_for_view[$view]
                        = $link_information_logic_base->getCount($category['_id'],
                        $lock_mode);
                    break;
                default:
                    $category_for_view[$view] = $category['col_' . $model];
                    break;
            }
        }

        //Check Root
        if ($category['_id'] == GRN_LINK_CATEGORY_ROOT_ID) {
            if (in_array(GRN_LINK_PROPERTY_NAME, $translation_map)) {
                $flip_translation_map = array_flip($translation_map);
                $category_for_view[$flip_translation_map[GRN_LINK_PROPERTY_NAME]]
                    = cb_msg('grn.link',
                    GRN_LINK_ROOT_CATEGORY_NAME_DEFAULT_PARENTHESES);
            }
        }

        //Return Category View
        return $category_for_view;
    }

    /**
     * Get Parent Category View
     *
     * @param  int   $category_id        //Category
     * @param  array $translation_map    //Model <=> View Translation Map
     * @param  int   $parent_category_id //Parent Category ID
     * @param  bool  $throw_error        //Throw Errro Flag
     * @param  int   $lock_mode          //Lock Mode
     *
     * @return array  $link_view                 //Link for View
     */
    function getParentView(
        $category_id,
        $translation_map,
        $parent_category_id = null,
        $throw_error = true,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Parent Category Object
        $category_information_logic_base
            =& $this->getCategoryInformationLogicBase();
        if ($parent_category_id) {
            $parent_category
                =& $category_information_logic_base->get($parent_category_id,
                null, $lock_mode);
        } else {
            $parent_category
                =& $category_information_logic_base->getParent($category_id,
                $lock_mode);
            if ( ! $parent_category) {
                $dummy = [];

                return $dummy;
            }
        }

        //Return Parent Category View
        return $this->getView($parent_category['_id'], $translation_map, null,
            $throw_error, $lock_mode);
    }


    /**
     * Get Category List View
     *
     * @param  array $translation_map    //Model <=> View Translation Map
     * @param  int   $parent_category_id //Parent Category ID
     * @param  int   $lock_mode          //Lock Mode
     *
     * @return array  $category_view             //Link for View
     */
    function getListView(
        $translation_map,
        $parent_category_id = null,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $category_list_for_view = [];

        //Get Category List Object
        $category_information_logic_base
            =& $this->getCategoryInformationLogicBase();
        $category_list
            =& $category_information_logic_base->getList($parent_category_id,
            $lock_mode);

        //Create Parameter Translation for Link List
        foreach (array_keys($category_list) as $category_id) {
            //Check Access Right
            if ( ! $this->checkAccess($category_id, $parent_category_id, false,
                $lock_mode)
            ) {
                continue;
            }

            $category_list_for_view[$category_id] = $this->getView($category_id,
                $translation_map, $parent_category_id, false, $lock_mode);
        }

        //Return Category List View
        return $category_list_for_view;
    }

    /**
     * Get Child List View
     *
     * @param  array $translation_map    //Model <=> View Translation Map
     * @param  int   $parent_category_id //Parent Category ID
     * @param  bool  $check_access       //Check Access Flag
     * @param  bool  $check_manage       //Check Mange Flag
     * @param  int   $lock_mode          //Lock Mode
     *
     * @return array  $category_view             //Link for View
     */
    function getChildListView(
        $category_id,
        $translation_map,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $category_list_for_view = [];

        //Get Category List Object
        $category_information_logic_base
            = $this->getCategoryInformationLogicBase();
        $child_category_list
            = $category_information_logic_base->getChildList($category_id,
            $lock_mode);

        //Create Parameter Translation for Link List
        foreach (array_keys($child_category_list) as $child_category_id) {
            //Check Access Right
            if ( ! $this->checkAccess($child_category_id, $category_id, false,
                $lock_mode)
            ) {
                continue;
            }

            $category_list_for_view[$child_category_id]
                = $this->getView($child_category_id, $translation_map,
                $category_id, false, $lock_mode);
        }

        //Return Category List View
        return $category_list_for_view;
    }

    /**
     * Get ALL Child List View
     *
     * @param  array $translation_map    //Model <=> View Translation Map
     * @param  int   $parent_category_id //Parent Category ID
     * @param  bool  $check_access       //Check Access Flag
     * @param  bool  $check_manage       //Check Mange Flag
     * @param  int   $lock_mode          //Lock Mode
     *
     * @return array  $category_view             //Link for View
     */
    function getALLChildListView(
        $category_id,
        $translation_map,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $category_list_for_view = [];

        //Get Category List Object
        $category_information_logic_base
            =& $this->getCategoryInformationLogicBase();
        $child_category_list
            = $category_information_logic_base->getALLChildList($category_id,
            $lock_mode);

        //Create Parameter Translation for Link List
        foreach (array_keys($child_category_list) as $child_category_id) {
            //Check Access Right
            if ( ! $this->checkAccess($child_category_id, null, false,
                $lock_mode)
            ) {
                continue;
            }

            $category_list_for_view[$child_category_id]
                = $this->getView($child_category_id, $translation_map, null,
                false, $lock_mode);
        }

        //Return Category List View
        return $category_list_for_view;
    }

    /**
     * Get Brother List View
     *
     * @param  array $translation_map    //Model <=> View Translation Map
     * @param  bool  $include_self       //Self Category
     * @param  int   $parent_category_id //Parent Category ID
     * @param  int   $lock_mode          //Lock Mode
     *
     * @return array  $category_view             //Link for View
     */
    function getBrotherListView(
        $category_id,
        $translation_map,
        $include_self = true,
        $parent_category_id = null,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $category_list_for_view = [];

        //Get Category List Object
        $category_information_logic_base
            =& $this->getCategoryInformationLogicBase();
        if ($parent_category_id) {
            $brother_category_list
                = $category_information_logic_base->getList($parent_category_id,
                $lock_mode);
        } else {
            $parent_category
                =& $category_information_logic_base->getParent($category_id,
                $lock_mode);
            if ($parent_category) {
                $brother_category_list
                    = $category_information_logic_base->getList($parent_category['_id'],
                    $lock_mode);
            } else {
                $brother_category_list[$category_id]
                    =& $category_information_logic_base->get($category_id, null,
                    $lock_mode);
            }
        }

        //Create Parameter Translation for Link List
        foreach (array_keys($brother_category_list) as $brother_category_id) {
            if ($category_id == $brother_category_id && ! $include_self) {
                continue;
            }

            //Check Access and Manage Right
            if ( ! $this->checkAccess($brother_category_id, null, false,
                $lock_mode)
            ) {
                continue;
            }

            $category_list_for_view[$brother_category_id]
                = $this->getView($brother_category_id, $translation_map,
                $parent_category_id, false, $lock_mode);
        }

        //Return Category List View
        return $category_list_for_view;
    }

    /**
     * Get Tree List View
     *
     * @param  array $translation_map    //Model <=> View Translation Map
     * @param  int   $parent_category_id //Parent Category ID
     * @param  int   $lock_mode          //Lock Mode
     *
     * @return array  $category_view             //Link for View
     */
    function getTreeListView(
        $category_id,
        $translation_map,
        $include_root = true,
        $include_last = true,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $category_list_for_view = [];

        //Get Category List Object
        $category_information_logic_base
            = $this->getCategoryInformationLogicBase();
        $tree_category_list
            = $category_information_logic_base->getTreeList($category_id,
            $include_root, $include_last, $lock_mode);

        //Create Parameter Translation for Link List
        foreach (array_keys($tree_category_list) as $tree_category_id) {
            //Check Access Right
            if ( ! $this->checkAccess($tree_category_id, null, false,
                $lock_mode)
            ) {
                continue;
            }

            $category_list_for_view[$tree_category_id]
                = $this->getView($tree_category_id, $translation_map, null,
                false, $lock_mode);
        }

        //Return Category List View
        return $category_list_for_view;
    }

    /**
     * Search Category
     *
     * @param  int   $category_id     //Category ID
     * @param  array $search_info     //Search Information
     * @param  array $translation_map //Translation Map
     * @param  int   $lock_mode       //Lock Mode
     *
     * @return array  $hit_category_list         //Hit Category List
     */
    function search(
        $category_id,
        $search_info,
        $translation_map,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $search_category_list = [];

        $dummy_translation_map = ['_id' => '_id'];

        //Get Search Category List
        if ($search_info['all']) {
            //Get All Category
            $search_category_list = $this->getListView($dummy_translation_map,
                null, $lock_mode);
        } elseif ($search_info['recursive']) {
            //Get Category
            $search_category_list[$category_id] = $this->getView($category_id,
                $dummy_translation_map, null, false, $lock_mode);

            //Get All Child Category
            $search_category_list += $this->getAllChildListView($category_id,
                $dummy_translation_map, $lock_mode);
        } else {
            //Get Category
            $search_category_list[$category_id] = $this->getView($category_id,
                $dummy_translation_map, null, false, $lock_mode);

            //Get Child Category
            $search_category_list += $this->getChildListView($category_id,
                $dummy_translation_map, $lock_mode);
        }

        //Check Search Category Count
        if (count($search_category_list) == 0) {
            return [];
        }

        //Create Condition List
        require_once('fw/string_util.csp');
        $condition_list = cb_parse_search_text($search_info['text']);

        //Check Condition Count
        if (count($condition_list) == 0) {
            return [];
        }

        //Search Category
        $category_information_logic_base
            =& $this->getCategoryInformationLogicBase();
        $hit_category_list
            = $category_information_logic_base->search(array_keys($search_category_list),
            $search_info['target_list'],
            $condition_list, $search_info['offset'], $search_info['limit'],
            $search_info['term'], $lock_mode);

        //Create Parameter Translation for Link List
        $category_list_for_view = [];
        foreach (array_keys($hit_category_list) as $hit_category_id) {
            $category_list_for_view[$hit_category_id]
                = $this->getView($hit_category_id, $translation_map, null,
                false, $lock_mode);
        }

        return $category_list_for_view;
    }

    /**
     * Search Category Count
     *
     * @param  int   $category_id //Category ID
     * @param  array $search_info //Search Information
     * @param  int   $lock_mode   //Lock Mode
     *
     * @return int    $hit_category_count        //Hit Category Count
     */
    function searchCount(
        $category_id,
        $search_info,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $search_category_list = [];

        $dummy_translation_map = ['_id' => '_id'];

        //Get Search Category List
        if ($search_info['all']) {
            //Get All Category
            $search_category_list = $this->getListView($dummy_translation_map,
                null, $lock_mode);
        } elseif ($search_info['recursive']) {
            //Get Category
            $search_category_list[$category_id] = $this->getView($category_id,
                $dummy_translation_map, null, false, $lock_mode);

            //Get All Child Category
            $search_category_list += $this->getAllChildListView($category_id,
                $dummy_translation_map, $lock_mode);
        } else {
            //Get Category
            $search_category_list[$category_id] = $this->getView($category_id,
                $dummy_translation_map, null, false, $lock_mode);
        }

        //Check Search Category Count
        if (count($search_category_list) == 0) {
            return 0;
        }

        //Create Condition List
        require_once('fw/string_util.csp');
        $condition_list = cb_parse_search_text($search_info['text']);

        //Check Condition Count
        if (count($condition_list) == 0) {
            return 0;
        }

        //Search Category
        $category_information_logic_base
            =& $this->getCategoryInformationLogicBase();

        return $category_information_logic_base->searchCount(array_keys($search_category_list),
            $search_info['target_list'],
            $condition_list, $search_info['term'], $lock_mode);
    }

    /**
     * @return array
     */
    function &getAncestors($category_id)
    {
        $ret = [];
        require_once('link/category_logic.csp');
        if ($this->_type != GRN_LINK_LINK_TYPE_PERSONAL) {
            $category_logic = GRN_Link_System_Category_Logic::getInstance();
        } else {
            $category_logic = GRN_Link_Personal_Category_Logic::getInstance();
        }

        $category = $category_logic->get($category_id);
        while ($category) {
            $ret[$category->getOID()] = $category;
            $category = $category->get('parent');
        }
        $ret = array_reverse($ret, true);

        return $ret;
    }

    /**
     * @access private
     */
    var $_admin_mode = null;

    function isSuperAdminMode()
    {
        if (is_null($this->_admin_mode)) {
            $current_page = strtolower(cb_get_pagename());
            $page_parts = explode('/', $current_page);
            if (@ $page_parts[1] === 'system'
                && $current_page !== 'portal/system/preview'
            ) {
                $this->_admin_mode = true;
            } else {
                $this->_admin_mode = false;
            }
        }

        return $this->_admin_mode;
    }

    function isSuperAdmin()
    {
        if ( ! $this->isSuperAdminMode()) {
            return false;
        }

        // システム管理画面に入れていれば管理者とみなす
        return true;
    }

    public function createMultiLanguageValuesArray($inCategoryId)
    {
        $resultArray = [];

        require_once('link/LinkFacade.csp');
        $linkDAO = new LinkFacade();

        $dataObj = [];
        $category
            = $linkDAO->referSystemCategoryById($dataObj,
            $inCategoryId);
        $resultArray[CB_I18N_DEFUALT_LANGUAGE_CODE] = $category->getName();

        $dataObj = [];
        $categoryLocalList
            = $linkDAO->getSystemCategoryLocalListByCategoryId($dataObj,
            $inCategoryId);
        foreach ($categoryLocalList as $categoryLocal) {
            $resultArray[$categoryLocal->getLanguageCode()]
                = $categoryLocal->getName();
        }

        return $resultArray;
    }
}

/**
 * Category Access Controller Utility Class
 *
 * @package grn.link
 */
class GRN_Link_Category_Access_Controller_Utility
{
    /** Category Access Logic Base Instance **/
    var $_category_access_logic_base = null;

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {

    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Link_Category_Access_Controller_Utility
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Category Access Logic Base
     *
     * @param  none
     *
     * @return GRN_Link_Category_Access_Logic_Base
     */
    function getCategoryAccessLogicBase()
    {
        //Get Category Access Logic Base
        require_once('link/access_logic_base.csp');
        $this->_category_access_logic_base
            = GRN_Link_Category_Access_Logic_Base::getInstance();

        //Return Category Access Logic Base
        return $this->_category_access_logic_base;
    }

    /**
     * Get Access View
     *
     * @param  int    $access_id       //Access ID
     * @param  string $target_type     //Target Type
     * @param  array  $translation_map //Model <=> View Translation Map
     *
     * @return array  $access_view               //Access for View
     */
    function getView($access_id, $target_type, $translation_map)
    {
        $access_for_view = [];

        //Get Access Object
        $category_access_logic_base =& $this->getCategoryAccessLogicBase();
        $access
            =& $category_access_logic_base->getAccess($access_id,
            $target_type);

        //Create Parameter Translation for Access
        foreach ($translation_map as $view => $model) {
            switch ($model) {
                case '_id':
                    $access_for_view[$view] = $access->getOID();
                    break;
                case 'type':
                    $access_for_view[$view] = $target_type;
                    break;
                case 'object':
                    $object =& $access->get($model);
                    if ($object) {
                        $access_for_view[$view] = $object->getOID();
                    }
                    break;
                case 'target':
                    if ($target_type == 'dynamic_role') {
                        $access_for_view[$view] = $access->get($model);
                    } else {
                        $object =& $access->get($model);
                        if ($object) {
                            $access_for_view[$view] = $object->getOID();
                        }
                    }
                    break;
                case 'security_model':
                    $object =& $access->get('object');
                    if ($object) {
                        $access_for_view[$view]
                            = $category_access_logic_base->getSecurityModel($object->getOID());
                    }
                    break;
                case 'authorities':
                    $authorities
                        = ['browse' => $access->get('authority_browse')];
                    $access_for_view[$view] = $authorities;
                    break;
                default:
                    $access_for_view[$view] = $access->get($model);
                    break;
            }
        }

        //Return Access View
        return $access_for_view;
    }

    /**
     * Get Access View
     *
     * @param  int    $category_id     //Catetgory ID
     * @param  int    $target_id       //Target ID
     * @param  string $target_type     //Target Type
     * @param  array  $translation_map //Model <=> View Translation Map
     *
     * @return array  $access_view               //Access for View
     */
    function getView2($category_id, $target_id, $target_type, $translation_map)
    {
        $access_for_view = [];

        //Get Access Object
        $category_access_logic_base =& $this->getCategoryAccessLogicBase();
        $access
            =& $category_access_logic_base->getAccess2($category_id,
            $target_id, $target_type);

        //Return Access View
        return $this->getView($access->getOID(), $target_type,
            $translation_map);
    }

    /**
     * Get Access List View
     *
     * @param  int    $category_id     //Catetgory ID
     * @param  string $target_type     //Target Type
     * @param  array  $translation_map //Model <=> View Translation Map
     *
     * @return array  $access_view               //access for View
     */
    function getListView($category_id, $target_type, $translation_map)
    {
        $access_list_for_view = [];

        //Get Access List Object
        $category_access_logic_base =& $this->getCategoryAccessLogicBase();
        $access_list
            = $category_access_logic_base->getAccessListByCategoryID($category_id,
            $target_type);

        //Create Parameter Translation for Access List
        foreach (array_keys($access_list) as $access_id) {
            $access_list_for_view[$access_id] = $this->getView($access_id,
                $target_type, $translation_map);
        }

        //Return Access List View
        return $access_list_for_view;
    }
}

/**
 * Category Manage Controller Utility Class
 *
 * @package grn.link
 */
class GRN_Link_Category_Manage_Controller_Utility
{
    /** Category Manage Logic Instance **/
    var $_category_manage_logic_base = null;

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {

    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Link_Category_Manage_Controller_Utility
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Category Manage Logic Base
     *
     * @param  none
     *
     * @return GRN_Link_Category_Manage_Logic_Base
     */
    function getCategoryManageLogicBase()
    {
        //Get Category Manage Logic Base
        require_once('link/manage_logic_base.csp');
        $this->_category_manage_logic_base
            = GRN_Link_Category_Manage_Logic_Base::getInstance();

        //Return Category Manage Logic Base
        return $this->_category_manage_logic_base;
    }

    /**
     * Get Manage View
     *
     * @param  int    $manage_id       //Manage ID
     * @param  string $target_type     //Target Type
     * @param  array  $translation_map //Model <=> View Translation Map
     *
     * @return array  $manage_view               //Manage for View
     */
    function getView($manage_id, $target_type, $translation_map)
    {
        $manage_for_view = [];

        //Get Manage Object
        $category_manage_logic_base =& $this->getCategoryManageLogicBase();
        $manage
            =& $category_manage_logic_base->getManage($manage_id,
            $target_type);
        if ( ! $manage) {
            //Manage Not Found
            require_once('error_code.csp');
            cb_throw_error(E_GRN_LINK_MANAGE_NOT_FOUND);
        }

        //Create Parameter Translation for Manage
        foreach ($translation_map as $view => $model) {
            switch ($model) {
                case '_id':
                    $manage_for_view[$view] = $manage->getOID();
                    break;
                case 'type':
                    $manage_for_view[$view] = $target_type;
                    break;
                case 'object':
                    $object =& $manage->get($model);
                    if ($object) {
                        $manage_for_view[$view] = $object->getOID();
                    }
                    break;
                case 'target':
                    if ($target_type == 'dynamic_role') {
                        $manage_for_view[$view] = $manage->get($model);
                    } else {
                        $object =& $manage->get($model);
                        if ($object) {
                            $manage_for_view[$view] = $object->getOID();
                        }
                    }
                    break;
                case 'authorities':
                    $authorities
                        = ['manage' => $manage->get('authority_manage')];
                    $manage_for_view[$view] = $authorities;
                    break;
                default:
                    $manage_for_view[$view] = $manage->get($model);
                    break;
            }
        }

        //Return Manage View
        return $manage_for_view;
    }

    /**
     * Get Manage View
     *
     * @param  int    $category_id     //Catetgory ID
     * @param  int    $target_id       //Target ID
     * @param  string $target_type     //Target Type
     * @param  array  $translation_map //Model <=> View Translation Map
     *
     * @return array  $manage_view               //Manage for View
     */
    function getView2($category_id, $target_id, $target_type, $translation_map)
    {
        $manage_for_view = [];

        //Get Manage Object
        $category_manage_logic_base =& $this->getCategoryManageLogicBase();
        $manage
            =& $category_manage_logic_base->getManage2($category_id,
            $target_id, $target_type);

        //Return Manage View
        return $this->getView($manage->getOID(), $target_type,
            $translation_map);
    }

    /**
     * Get Manage List View
     *
     * @param  int    $category_id     //Catetgory ID
     * @param  string $target_type     //Target Type
     * @param  array  $translation_map //Model <=> View Translation Map
     *
     * @return array  $manage_view               //manage for View
     */
    function getListView($category_id, $target_type, $translation_map)
    {
        $manage_list_for_view = [];

        //Get Manage List Object
        $category_manage_logic_base =& $this->getCategoryManageLogicBase();
        $manage_list
            = $category_manage_logic_base->getManageListByCategoryID($category_id,
            $target_type);

        //Create Parameter Translation for Manage List
        foreach (array_keys($manage_list) as $manage_id) {
            $manage_list_for_view[$manage_id] = $this->getView($manage_id,
                $target_type, $translation_map);
        }

        //Return Manage List View
        return $manage_list_for_view;
    }
}


