<?php
/**
 * Link Application Link Informarion Manager Base Class
 *
 * @author  Yuichi, Nakamura 2005/5
 * @version 1.0
 * @package grn.link
 */

/** Link Application **/
require_once('link/resources.csp');
require_once('grn/application.csp');

/**
 * System Link Information Manager Class
 *
 * @package grn.link
 */
class GRN_Link_System_Link_Information_Manager_Base
{
    /** Table Name **/
    var $_table_name = null;

    /** Link List **/
    var $_list = [];

    /** Search Link List **/
    var $_search_list = [];

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
        $this->_table_name = 'tab_grn_link_system_link';
    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Link_System_Link_Information_Manager_Base
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Database
     *
     * @return object $table                     //GRN_Link_System_Link Table Information
     */
    function _getDatabase()
    {
        static $database = null;
        if (is_null($database)) {
            $app_locator = GRN_ApplicationLocator::instance();
            $database = $app_locator->getConnection('link');
        }

        return $database;
    }

    /**
     * Get Column List
     *
     * @return array $table                     //GRN_Link_System_Link Table Information
     */
    function &_getColumnList()
    {
        static $column_name_list = null;
        if (is_null($column_name_list)) {
            require_once('link/table.csp');
            $column_list = get_class_vars(GRN_LINK_TABLE_SYSTEM_LINK);
            foreach (array_keys($column_list) as $column_name) {
                if (strpos($column_name, 'col_') === 0
                    && strpos($column_name, 'col_reserve') !== 0
                ) {
                    $column_name_list[] = $column_name;
                }
            }
            $column_name_list[] = '_id';
        }

        return $column_name_list;
    }

    /**
     * @return array
     */
    function &_getColumnListAlias($alias)
    {
        $column_list = $this->_getColumnList();

        if (is_null($alias) || $alias == '') {
            return $column_list;
        }

        foreach (array_keys($column_list) as $key) {
            $column_list[$key] = $alias . '.' . $column_list[$key];
        }

        return $column_list;
    }

    function _replaceUserColumn(
        $column_list,
        $column,
        $user_table,
        $column_alias = null
    ) {
        if (is_null($column_alias)) {
            $column_alias = $column;
        }

        $key = array_search($column, $column_list);
        if ($key !== false) {
            $column_list[$key]
                = sprintf('CASE WHEN %s.col_deleted IS NULL THEN %s END AS %s',
                $user_table, $column, $column_alias);
        }

        return $column_list;
    }

    function _getUserJoin($column, $alias)
    {
        return sprintf('LEFT JOIN tab_cb_user AS %s ON %s.%s = %s._id', $alias,
            $this->_table_name, $column, $alias);
    }

    /**
     * Get Link Information
     *
     * @param  int $link_id     //Link ID
     * @param  int $category_id //Target Category ID(null:ALL Category)
     * @param  int $lock_mode   //Lock Mode
     *
     * @return array  $link                      //Link Information Array
     */
    function &get(
        $link_id,
        $category_id = null,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Link List
        $link_list =& $this->getList($category_id, $lock_mode);

        //Get Link
        if ( ! array_key_exists($link_id, $link_list)) {
            {
                $___ret = false;

                return $___ret;
            }
        }

        //Return Link Object
        return $link_list[$link_id];
    }

    /**
     * Get Link Information List
     *
     * @param  int  $category_id //Target Category ID(null:ALL Category)
     * @param  int  $lock_mode   //Lock Mode
     * @param  bool $refresh     //Refresh Cache
     *
     * @return array  $link_list                 //Link Information List
     */
    function &getList(
        $category_id = null,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $refresh = false
    ) {
        $link_list = [];

        //Check Arguments
        $category_id = is_null($category_id) ? 0 : $category_id;

        //Get Link List From Cache
        $cached = false;
        if ( ! $refresh) {
            if (array_key_exists($category_id, $this->_list)) {
                if (is_array($this->_list[$category_id])) {
                    $link_list =& $this->_list[$category_id];
                    $cached = true;
                }
            }
        }

        //Get Link List From Database
        if ( ! $cached || $refresh) {
            //Get Database
            $database = $this->_getDatabase();

            //Create Column List
            $column_list = $this->_getColumnListAlias($this->_table_name);
            $column_list = $this->_replaceUserColumn($column_list,
                $this->_table_name . '.col_creator', 'uc', 'col_creator');
            $column_list = $this->_replaceUserColumn($column_list,
                $this->_table_name . '.col_modifier', 'um', 'col_modifier');
            $column_list = implode(',', $column_list);

            //Create Condition
            $condition_list = [];
            if ($category_id !== 0) {
                $condition_list[] = sprintf("%s.col_category = '%s'",
                    $this->_table_name, $database->escape($category_id));
            }
            $condition = implode(' AND ', $condition_list);
            if ($condition) {
                $condition = 'WHERE ' . $condition;
            }

            //Create Join
            $join_list = [];
            $join_list[] = $this->_getUserJoin('col_creator', 'uc');
            $join_list[] = $this->_getUserJoin('col_modifier', 'um');
            $join = implode(' ', $join_list);

            //Create Order By Column
            $order_by = sprintf('ORDER BY %s.col_list_index',
                $this->_table_name);

            //Create Query
            $query = sprintf('SELECT %s FROM %s %s %s %s', $column_list,
                $this->_table_name, $join, $condition, $order_by);
            $query = $database->select_format($query, 0, -1, $lock_mode);

            //Execute Query
            $result = $database->query($query);
            if ($result === false) {
                //Throw Query Error
                $database->throwError(['query' => 'query failed: ' . $query]);
            }

            //Update Link List
            $count = $database->num_rows($result);
            for ($i = 0; $i < $count; $i++) {
                $row = $database->fetch_assoc($result);
                $this->_list[$category_id][$row['_id']] = $row;
            }
            $database->free_result($result);

            if ($count > 0) {
                $link_list =& $this->_list[$category_id];
            }
        }

        //Return Link List
        return $link_list;
    }

    /**
     * Get Link Count
     *
     * @param  int $category_id //Target Category ID(null:ALL Category)
     * @param  int $lock_mode   //Lock Mode
     *
     * @return int    $link_count                //Link Count
     */
    function getCount(
        $category_id = null,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Link List
        $link_list = $this->getList($category_id, $lock_mode);

        //Return Link Count
        return count($link_list);
    }

    /**
     * Search Link
     *
     * @param  array $category_id_list //Category ID List
     * @param  array $target_list      //Search Target List
     * @param  array $condition_list   //Search Condition List
     * @param  int   $offset           //Search Offset
     * @param  int   $limit            //Search Limit
     * @param  int   $term             //Search Term
     * @param  int   $lock_mode        //Lock Mode
     *
     * @return array  $hit_link_list             //Hit Link List
     */
    function search(
        $search_category_list,
        $target_list,
        $condition_list,
        $offset = 0,
        $limit = 5,
        $term = 0,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Database
        $database =& $this->_getDatabase();

        //Create Column List
        $column_list = $this->_getColumnListAlias($this->_table_name);
        $column_list = $this->_replaceUserColumn($column_list,
            $this->_table_name . '.col_creator', 'uc', 'col_creator');
        $column_list = $this->_replaceUserColumn($column_list,
            $this->_table_name . '.col_modifier', 'um', 'col_modifier');
        $column_list = implode(',', $column_list);

        //Create Category Condition
        $condition = [];
        //$condition[] = cb_queryf($database, '(col_category IN (@S))', implode(',', array_keys($search_category_list)));
        //escape!
        $after = [];
        $before = array_keys($search_category_list);
        foreach ($before as $item) {
            $after[] = "'" . $database->escape($item) . "'";
        }
        $condition[] = '(' . $this->_table_name . '.col_category IN ('
                       . implode(',', $after) . '))';

        //Create Search Condition
        $search_condition = [];
        foreach ($target_list as $target_name) {
            $item_search_condition = [];
            foreach ($condition_list as $condition_item) {
                switch ($target_name) {
                    case 'title':
                        $item_search_condition[] = cb_queryf($database,
                            '(@S.col_name LIKE "%@L%")', $this->_table_name,
                            $condition_item);
                        break;
                    case 'url':
                        $item_search_condition[] = cb_queryf($database,
                            '(@S.col_url LIKE "%@L%")', $this->_table_name,
                            $condition_item);
                        break;
                    default:
                        break;
                }
            }
            if (count($item_search_condition) != 0) {
                $search_condition[] = '(' . implode(' AND ',
                        $item_search_condition) . ')';
            }
        }
        if (count($search_condition) != 0) {
            $condition[] = '(' . implode(' OR ', $search_condition) . ')';
        }

        //Create Limit Date Condition
        if ($term > 0) {
            //escape!
            $condition[] = cb_queryf($database, "(@S.col_mtime >= '@S')",
                $this->_table_name, $term);
        }

        //Create Condition
        $condition = implode(' AND ', $condition);
        if ($condition) {
            $condition = 'WHERE ' . $condition;
        }

        //Create Join
        $join_list = [];
        $join_list[] = $this->_getUserJoin('col_creator', 'uc');
        $join_list[] = $this->_getUserJoin('col_modifier', 'um');
        $join = implode(' ', $join_list);

        //Search Link
        $hit_link_list = [];

        //Create Query
        $query = sprintf('SELECT %s FROM %s %s %s', $column_list,
            $this->_table_name, $join, $condition);
        if ($limit > 0) {
            $query = $database->select_format($query, $offset, $limit,
                $lock_mode);
        } else {
            $query = $database->select_format($query, 0, -1, $lock_mode);
        }

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Update Hit Link List
        $count = $database->num_rows($result);
        for ($i = 0; $i < $count; $i++) {
            $row = $database->fetch_assoc($result);
            $this->_search_list[$row['_id']] = $row;
        }
        $database->free_result($result);
        if ($count > 0) {
            $hit_link_list =& $this->_search_list;
        }

        //return Hit Link List
        return $hit_link_list;
    }

    /**
     * Search Link Count
     *
     * @param  array $category_id_list //Category ID List
     * @param  array $target_list      //Search Target List
     * @param  array $condition_list   //Search Condition List
     * @param  int   $term             //Search Term
     * @param  int   $lock_mode        //Lock Mode
     *
     * @return array  $hit_link_count            //Hit Link Count
     */
    function searchCount(
        $search_category_list,
        $target_list,
        $condition_list,
        $term = 0,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Database
        $database =& $this->_getDatabase();

        //Create Column List
        $column_list = implode(',', $this->_getColumnList());

        //Create Category Condition
        $condition = [];
        //escape!
        //$condition[] = cb_queryf($database, '(col_category IN (@S))', implode(',', array_keys($search_category_list)));
        $after = [];
        $before = array_keys($search_category_list);
        foreach ($before as $item) {
            $after[] = "'" . $database->escape($item) . "'";
        }
        $condition[] = '(col_category IN (' . implode(',', $after) . '))';

        //Create Search Condition
        $search_condition = [];
        foreach ($target_list as $target_name) {
            $item_search_condition = [];
            foreach ($condition_list as $condition_item) {
                switch ($target_name) {
                    case 'title':
                        $item_search_condition[] = cb_queryf($database,
                            '(col_name LIKE "%@L%")', $condition_item);
                        break;
                    case 'url':
                        $item_search_condition[] = cb_queryf($database,
                            '(col_url LIKE "%@L%")', $condition_item);
                        break;
                    default:
                        break;
                }
            }
            if (count($item_search_condition) != 0) {
                $search_condition[] = '(' . implode(' AND ',
                        $item_search_condition) . ')';
            }
        }
        if (count($search_condition) != 0) {
            $condition[] = '(' . implode(' OR ', $search_condition) . ')';
        }

        //Create Limit Date Condition
        if ($term > 0) {
            $condition[] = cb_queryf($database, "(col_mtime >= '@S')", $term);
        }

        //Create Condition
        $condition = implode(' AND ', $condition);
        if ($condition) {
            $condition = 'WHERE ' . $condition;
        }

        //Create Query
        $query = sprintf('SELECT %s FROM %s %s', $column_list,
            $this->_table_name, $condition);
        $query = $database->select_format($query, 0, -1, $lock_mode);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Update Hit Link Count
        $hit_count = $database->num_rows($result);
        $database->free_result($result);

        //Return Hit Link Count
        return $hit_count;
    }
}

/**
 * Personal Link Information Manager Base Class
 *
 * @package grn.link
 */
class GRN_Link_Personal_Link_Information_Manager_Base
{
    /** Table Name **/
    var $_table_name = null;

    /** Link List **/
    var $_list = [];

    /** Search Link List **/
    var $_search_list = [];

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
        $this->_table_name = 'tab_grn_link_personal_link';
    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Link_Personal_Link_Information_Manager_Base
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Database
     *
     * @return object $table                     //GRN_Link_Personal_Link Table Information
     */
    function _getDatabase()
    {
        static $database = null;
        if (is_null($database)) {
            $app_locator = GRN_ApplicationLocator::instance();
            $database = $app_locator->getConnection('link');
        }

        return $database;
    }

    /**
     * Get Column List
     *
     * @return array $column_list               //GRN_Link_Personal_Link Column Information
     */
    function &_getColumnList()
    {
        static $column_name_list = null;
        if (is_null($column_name_list)) {
            require_once('link/table.csp');
            $column_list = get_class_vars(GRN_LINK_TABLE_PERSONAL_LINK);
            foreach (array_keys($column_list) as $column_name) {
                if (strpos($column_name, 'col_') === 0
                    && strpos($column_name, 'col_reserve') !== 0
                ) {
                    $column_name_list[] = $column_name;
                }
            }
            $column_name_list[] = '_id';
        }

        return $column_name_list;
    }

    /**
     * Get Link
     *
     * @param  int $link_id     //Link ID
     * @param  int $user_id     //Target User ID
     * @param  int $category_id //Target Category ID(null:ALL Category)
     * @param  int $lock_mode   //Lock Mode
     *
     * @return array  $link                       //Link Information Array
     */
    function &get(
        $link_id,
        $user_id,
        $category_id = null,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Link List
        $link_list =& $this->getList($user_id, $category_id, $lock_mode);

        //Get Link
        if ( ! array_key_exists($link_id, $link_list)) {
            {
                $___ret = false;

                return $___ret;
            }
        }

        //Return Link Object
        return $link_list[$link_id];
    }

    /**
     * Get Link List
     *
     * @param  int  $user_id     //Target User ID
     * @param  int  $category_id //Target Category ID(null:ALL Category)
     * @param  int  $lock_mode   //Lock Mode
     * @param  bool $refresh     //Refresh Cache
     *
     * @return array  $link_list                 //Link Information List
     */
    function &getList(
        $user_id,
        $category_id = null,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $refresh = false
    ) {
        $link_list = [];

        //Check Arguments
        $user_id = is_null($user_id) ? 0 : $user_id;
        $category_id = is_null($category_id) ? 0 : $category_id;

        //Get Link List From Cache
        $cached = false;
        if ( ! $refresh) {
            if (array_key_exists($user_id, $this->_list)) {
                if (array_key_exists($category_id, $this->_list[$user_id])) {
                    if (is_array($this->_list[$user_id][$category_id])) {
                        $link_list =& $this->_list[$user_id][$category_id];
                        $cached = true;
                    }
                }
            }
        }

        //Get Link List From Database
        if ( ! $cached || $refresh) {
            //Get Database
            $database = $this->_getDatabase();

            //Create Column List
            $column_list = implode(',', $this->_getColumnList());

            //Create Condition
            $condition_list = [];
            //$condition_list[] = sprintf('col_user = "%s"', $user_id);
            //escape!
            $condition_list[] = sprintf("col_user = '%s'",
                $database->escape($user_id));
            if ($category_id !== 0) {
                //escape!
                //$condition_list[] = sprintf('col_category = "%s"', $category_id);
                $condition_list[] = sprintf("col_category = '%s'",
                    $database->escape($category_id));
            }
            $condition = implode(' AND ', $condition_list);
            if ($condition) {
                $condition = 'WHERE ' . $condition;
            }

            //Create Order By Column
            $order_by = 'ORDER BY col_list_index';

            //Create Query
            $query = sprintf('SELECT %s FROM %s %s %s', $column_list,
                $this->_table_name, $condition, $order_by);
            $query = $database->select_format($query, 0, -1, $lock_mode);

            //Execute Query
            $result = $database->query($query);
            if ($result === false) {
                //Throw Query Error
                $database->throwError(['query' => 'query failed: ' . $query]);
            }

            //Update Link List
            $count = $database->num_rows($result);
            for ($i = 0; $i < $count; $i++) {
                $row = $database->fetch_assoc($result);
                $this->_list[$user_id][$category_id][$row['_id']] = $row;
            }
            $database->free_result($result);

            if ($count > 0) {
                $link_list =& $this->_list[$user_id][$category_id];
            }
        }

        //Return Link List
        return $link_list;
    }

    /**
     * Get Link Count
     *
     * @param  int $user_id     //Target User ID
     * @param  int $category_id //Target Category ID(null:ALL Category)
     * @param  int $lock_mode   //Lock Mode
     *
     * @return int    $link_count                //Link Count
     */
    function getCount(
        $user_id,
        $category_id = null,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Link List
        $link_list = $this->getList($user_id, $category_id, $lock_mode);

        //Return Link Count
        return count($link_list);
    }

    /**
     * Search Link
     *
     * @return array  $category_id_list          //Category ID List
     * @return array  $target_list               //Search Target List
     * @return array  $condition_list            //Search Condition List
     * @return int    $user_id                   //Search User ID
     * @return int    $offset                    //Search Offset
     * @return int    $limit                     //Search Limit
     * @return int    $term                      //Search Term
     * @return array  $hit_link_list             //Hit Link List
     */
    function search(
        $search_category_list,
        $target_list,
        $condition_list,
        $user_id,
        $offset = 0,
        $limit = 5,
        $term = 0,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Database
        $database =& $this->_getDatabase();

        //Create Column List
        $column_list = implode(',', $this->_getColumnList());

        //Create User Condition
        $condition = [];
        //escape!
        $condition[] = cb_queryf($database, "(col_user = '@S')", $user_id);

        //Create Category Condition
        //$condition[] = cb_queryf($database, '(col_category IN (@S))', implode(',', array_keys($search_category_list)));
        $after = [];
        $before = array_keys($search_category_list);
        foreach ($before as $item) {
            $after[] = "'" . $database->escape($item) . "'";
        }
        $condition[] = '(col_category IN (' . implode(',', $after) . '))';

        //Create Search Condition
        $search_condition = [];
        foreach ($target_list as $target_name) {
            $item_search_condition = [];
            foreach ($condition_list as $condition_item) {
                switch ($target_name) {
                    case 'title':
                        $item_search_condition[] = cb_queryf($database,
                            '(col_name LIKE "%@L%")', $condition_item);
                        break;
                    case 'url':
                        $item_search_condition[] = cb_queryf($database,
                            '(col_url LIKE "%@L%")', $condition_item);
                        break;
                    default:
                        break;
                }
            }
            if (count($item_search_condition) != 0) {
                $search_condition[] = '(' . implode(' AND ',
                        $item_search_condition) . ')';
            }
        }
        if (count($search_condition) != 0) {
            $condition[] = '(' . implode(' OR ', $search_condition) . ')';
        }

        //Create Limit Date Condition
        if ($term > 0) {
            $condition[] = cb_queryf($database, "(col_mtime >= '@S')", $term);
        }

        //Create Condition
        $condition = implode(' AND ', $condition);
        if ($condition) {
            $condition = 'WHERE ' . $condition;
        }

        //Search Link
        $hit_link_list = [];

        //Create Query
        $query = sprintf('SELECT %s FROM %s %s', $column_list,
            $this->_table_name, $condition);
        if ($limit > 0) {
            $query = $database->select_format($query, $offset, $limit,
                $lock_mode);
        } else {
            $query = $database->select_format($query, 0, -1, $lock_mode);
        }

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Update Hit Link List
        $count = $database->num_rows($result);
        for ($i = 0; $i < $count; $i++) {
            $row = $database->fetch_assoc($result);
            $this->_search_list[$user_id][$row['_id']] = $row;
        }
        $database->free_result($result);

        if ($count > 0) {
            $hit_link_list =& $this->_search_list[$user_id];
        }

        //return Hit Link List
        return $hit_link_list;
    }

    /**
     * Search Link Count
     *
     * @param  array $category_id_list //Category ID List
     * @param  array $target_list      //Search Target List
     * @param  array $condition_list   //Search Condition List
     * @param  int   $user_id          //Search User ID
     * @param  int   $term             //Search Term
     * @param  int   $lock_mode        //Lock Mode
     *
     * @return array  $hit_link_count            //Hit Link Count
     */
    function searchCount(
        $search_category_list,
        $target_list,
        $condition_list,
        $user_id,
        $term = 0,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Database
        $database =& $this->_getDatabase();

        //Create Column List
        $column_list = implode(',', $this->_getColumnList());

        //Create User Condition
        $condition = [];
        //escape
        //$condition[] = cb_queryf($database, '(col_user = @S)', $user_id);
        $condition[] = cb_queryf($database, "(col_user = '@S')", $user_id);
        //Create Category Condition
        //$condition[] = cb_queryf($database, '(col_category IN (@S))', implode(',', array_keys($search_category_list)));
        $after = [];
        $before = array_keys($search_category_list);
        foreach ($before as $item) {
            $after[] = "'" . $database->escape($item) . "'";
        }
        $condition[] = '(col_category IN (' . implode(',', $after) . '))';

        //Create Search Condition
        $search_condition = [];
        foreach ($target_list as $target_name) {
            $item_search_condition = [];
            foreach ($condition_list as $condition_item) {
                switch ($target_name) {
                    case 'title':
                        $item_search_condition[] = cb_queryf($database,
                            '(col_name LIKE "%@L%")', $condition_item);
                        break;
                    case 'url':
                        $item_search_condition[] = cb_queryf($database,
                            '(col_url LIKE "%@L%")', $condition_item);
                        break;
                    default:
                        break;
                }
            }
            if (count($item_search_condition) != 0) {
                $search_condition[] = '(' . implode(' AND ',
                        $item_search_condition) . ')';
            }
        }
        if (count($search_condition) != 0) {
            $condition[] = '(' . implode(' OR ', $search_condition) . ')';
        }

        //Create Limit Date Condition
        if ($term > 0) {
            $condition[] = cb_queryf($database, "(col_mtime >= '@S')", $term);
        }

        //Create Condition
        $condition = implode(' AND ', $condition);
        if ($condition) {
            $condition = 'WHERE ' . $condition;
        }

        //Create Query
        $query = sprintf('SELECT %s FROM %s %s', $column_list,
            $this->_table_name, $condition);
        $query = $database->select_format($query, 0, -1, $lock_mode);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Update Hit Link Count
        $hit_count = $database->num_rows($result);
        $database->free_result($result);

        //Return Hit Link Count
        return $hit_count;
    }
}


