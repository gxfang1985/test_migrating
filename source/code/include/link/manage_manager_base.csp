<?php
/**
 * Link Application Manage Manager Base Class
 *
 * @author  Yuichi, Nakamura 2005/5
 * @version 1.0
 * @package grn.link
 */

/** Link Application **/
require_once('link/resources.csp');
require_once('grn/application.csp');

/**
 * Link Category Manage Manager Class
 *
 * @package grn.link
 */
class GRN_Link_Category_Manage_Manager_Base
{
    /** Category Manage Table List **/
    var $_table_list = [];

    /** Category Manage Cache List **/
    var $_manage_cache_list = [];

    /** Target List **/
    var $_target_type_list
        = [
            GRN_LINK_MANAGE_TARGET_TYPE_DYNAMIC_ROLE,
            GRN_LINK_MANAGE_TARGET_TYPE_STATIC_ROLE,
            GRN_LINK_MANAGE_TARGET_TYPE_GROUP,
            GRN_LINK_MANAGE_TARGET_TYPE_USER,
        ];

    /** Authority List **/
    var $_authority_list = ['manage' => 0];

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {

    }

    /**
     * Get Database
     *
     * @return object $table                     //GRN_Portal_Portal Table Information
     */
    function _getDatabase()
    {
        static $database = null;
        if (is_null($database)) {
            $app_locator = GRN_ApplicationLocator::instance();
            $database = $app_locator->getConnection('link');

        }

        return $database;
    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Link_Category_Manage_Manager_Base
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Table Information Object
     *
     * @param  string $target_type //Table Type(user/group/static_role)
     *
     * @return object $table                     //GRN_Link_Category_XXXX Table Information
     */
    function _getTableInfo($target_type)
    {
        $table_list =& $this->_table_list;
        if ( ! array_key_exists($target_type, $table_list)) {
            $app_locator = GRN_ApplicationLocator::instance();
            $table_manager = $app_locator->getTableManager('link');
            switch ($target_type) {
                case GRN_LINK_MANAGE_TARGET_TYPE_USER:
                    $table_list[$target_type]
                        = $table_manager->getTableInfo(GRN_LINK_TABLE_CATEGORY_MANAGE_USER);
                    break;
                case GRN_LINK_MANAGE_TARGET_TYPE_GROUP:
                    $table_list[$target_type]
                        = $table_manager->getTableInfo(GRN_LINK_TABLE_CATEGORY_MANAGE_GROUP);
                    break;
                case GRN_LINK_MANAGE_TARGET_TYPE_STATIC_ROLE:
                    $table_list[$target_type]
                        = $table_manager->getTableInfo(GRN_LINK_TABLE_CATEGORY_MANAGE_STATIC_ROLE);
                    break;
                case GRN_LINK_MANAGE_TARGET_TYPE_DYNAMIC_ROLE:
                    $table_list[$target_type]
                        = $table_manager->getTableInfo(GRN_LINK_TABLE_CATEGORY_MANAGE_DYNAMIC_ROLE);
                    break;
                default:
                    assert('FALSE');
                    break;
            }
        }

        return $table_list[$target_type];
    }

    /**
     * Get Table Information Object
     *
     * @param  string $target_type //Table Type(user/group/static_role)
     *
     * @return string $table_name                //Table Name
     */
    function _getTableName($target_type)
    {
        $table =& $this->_getTableInfo($target_type);

        return $table->getTableName;
    }

    /**
     * Get Manage Object
     *
     * @param  string $target_type //Table Type(user/group/static_role)
     * @param  int    $manage_id   //Manage Object ID
     *
     * @return object $manage                    //Manage Object
     */
    function getManage($manage_id, $target_type)
    {
        //Get Table Information
        $table_info = $this->_getTableInfo($target_type);

        $rowset = new CB_RowSet($table_info, 'a');
        if ($target_type == GRN_LINK_MANAGE_TARGET_TYPE_USER) {
            $app_locator = GRN_ApplicationLocator::instance();
            $tm = $app_locator->getTableManager('link');
            $user_table = $tm->getTableInfo('cb_user');
            $on = 'a.col_target = u._id AND u.col_deleted IS NULL';
            $rowset->addJoin($user_table, $on, CB_DATABASE_INNER_JOIN, 'u');
        }
        $condition = $rowset->queryf("(a._id = '@S')", $manage_id);
        $rowset->addCondition($condition);
        $row = $rowset->iterate();
        if ( ! $row) {
            {
                $___ret = false;

                return $___ret;
            }
        }

        //Return Manage Object
        return $row;
    }

    /**
     * Get Manage Object
     *
     * @param  int    $category_id //Category Object ID
     * @param  int    $target_id   //Target Object ID
     * @param  string $target_type //Table Type(user/group/static_role)
     *
     * @return object $manage                    //Manage Object
     */
    function &getManage2($category_id, $target_id, $target_type)
    {
        //Get Table Information
        $table_info = $this->_getTableInfo($target_type);

        //Create RowSet
        $rowset = new CB_RowSet($table_info, 'a');
        if ($target_type == GRN_LINK_MANAGE_TARGET_TYPE_DYNAMIC_ROLE) {
            //$condition = sprintf('(col_object = %d) AND (col_target = "%s")', $category_id, $target_id);
            $condition
                = $rowset->queryf("(col_object = '@S') AND (col_target = '@S')",
                $category_id, $target_id);
        } elseif ($target_type == GRN_LINK_MANAGE_TARGET_TYPE_USER) {
            $condition
                = $rowset->queryf("(col_object = '@S') AND (col_target = '@S')",
                $category_id, $target_id);

            $app_locator = GRN_ApplicationLocator::instance();
            $tm = $app_locator->getTableManager('link');
            $user_table = $tm->getTableInfo('cb_user');
            $on = 'a.col_target = u._id AND u.col_deleted IS NULL';
            $rowset->addJoin($user_table, $on, CB_DATABASE_INNER_JOIN, 'u');
        } else {
            //$condition = sprintf('(col_object = %d) AND (col_target = %d)', $category_id, $target_id);
            $condition
                = $rowset->queryf("(col_object = '@S') AND (col_target = '@S')",
                $category_id, $target_id);
        }
        $rowset->addCondition($condition);
        $row = $rowset->iterate();
        if ( ! $row) {
            {
                $___ret = false;

                return $___ret;
            }
        }

        //Return Manage Object
        return $row;
    }

    /**
     * Get Manage Object List By Category ID
     *
     * @param  int    $category_id //Category Object ID
     * @param  string $target_type //Table Type(user/group/static_role/dynamic_role)
     *
     * @return array  $manage                    //Manage Object
     */
    function &getManageListByCategoryID($category_id, $target_type)
    {
        $manage_list = [];

        //Get Table Information
        $table_info =& $this->_getTableInfo($target_type);

        //Create RowSet
        //$condition = sprintf('(col_object = %d)', $category_id);
        $rowset = new CB_RowSet($table_info, 'a');
        if ($target_type == GRN_LINK_MANAGE_TARGET_TYPE_USER) {
            $app_locator = GRN_ApplicationLocator::instance();
            $tm = $app_locator->getTableManager('link');
            $user_table = $tm->getTableInfo('cb_user');
            $on = 'a.col_target = u._id AND u.col_deleted IS NULL';
            $rowset->addJoin($user_table, $on, CB_DATABASE_INNER_JOIN, 'u');
        }
        $condition = $rowset->queryf("(col_object = '@S')", $category_id);
        $rowset->addCondition($condition);
        $rowset->addOrderColumn('_id');
        while ( ! is_null($row = $rowset->iterate())) {
            $manage_list[$row->getOID()] = $row;
        }

        //Return Manage List
        return $manage_list;
    }

    /**
     * set Manage Cache
     *
     * @param  int   $user_id        //User ID
     * @param  int   $category_id    //Category ID
     * @param  array $authority_list //Authority List
     *
     * @return none
     */
    function setManageCache($user_id, $category_id, $authority_list)
    {
        //Set Manage Cache
        foreach ($authority_list as $authority_id => $authority_value) {
            $this->_manage_cache_list[$user_id][$category_id][$authority_id]
                = $authority_value;
        }

        return;
    }

    /**
     * get Manage Cache
     *
     * @param  int $user_id     //User ID
     * @param  int $category_id //Category ID
     *
     * @return array  $authority_list            //Authority List
     */
    function getManageCache($user_id, $category_id)
    {
        //Check Manage Cache Availavle
        if (array_key_exists($user_id, $this->_manage_cache_list)) {
            if (array_key_exists($category_id,
                $this->_manage_cache_list[$user_id])
            ) {
                //Return Manage Cache
                return $this->_manage_cache_list[$user_id][$category_id];
            }
        }

        return false;
    }

    /**
     * Clear Manage Cache
     *
     * @return none
     */
    function clearManageCache()
    {
        $this->_manege_cache_list = [];

        return false;
    }

    /**
     * Create Target Condition
     *
     * @param  array  $target_list //Target List
     * @param  string $target_type //Target Type(user/group/static_role/dynamic_role)
     *
     * @return string $condition                 //Condition Strring
     */
    function _createTargetCondition($target_list, $target_type)
    {
        $condition = null;

        $app_locator = GRN_ApplicationLocator::instance();
        $dbconn = $app_locator->getConnection('link');

        //Create Condition From Target List
        switch ($target_type) {
            case GRN_LINK_MANAGE_TARGET_TYPE_DYNAMIC_ROLE:
                $condition_list = [];
                if (is_array($target_list) && count($target_list) > 0) {
                    foreach ($target_list as $target_id => $target_value) {
                        if ($target_value == 1) {
                            //$condition_list[] = sprintf('"%s"', $target_id);
                            $condition_list[] = cb_queryf($dbconn, "'@S'",
                                $target_id);
                        }
                    }
                    $condition = sprintf('(col_target IN (%s))',
                        implode(',', $condition_list));
                }
                break;
            default:
                $condition_list = [];
                if (is_array($target_list) && count($target_list) > 0) {
                    foreach ($target_list as $target_id => $target_value) {
                        $condition_list[] = cb_queryf($dbconn, "'@S'",
                            $target_id);
                    }
                    $condition = sprintf('(col_target IN (%s))',
                        implode(',', $condition_list));
                }
                break;
        }

        return $condition;
    }

    /**
     * Create Category Condition
     *
     * @param  array $category_list //Category List
     *
     * @return string $condition                 //Condition String
     */
    function _createCategoryCondition(& $category_list)
    {
        //Create Condition From Category List
        $condition = null;
        $condition_list = [];

        $app_locator = GRN_ApplicationLocator::instance();
        $dbconn = $app_locator->getConnection('link');

        if (is_array($category_list) && count($category_list) > 0) {
            //$condition = sprintf('(col_object IN (%s))', implode(',', array_keys($category_list)));
            foreach ($category_list as $category_id => $category_value) {
                $condition_list[] = cb_queryf($dbconn, "'@S'", $category_id);
            }
            $condition = sprintf('(col_object IN (%s))',
                implode(',', $condition_list));
        }

        return $condition;
    }

    /**
     * Evaluate Category List
     *
     * @param  string $category_list     //Category List
     * @param  int    $user_id           //User ID
     * @param  array  $dynamic_role_list //Dynamic Role List
     * @param  int    $authority_list    //Authority List
     * @param  int    $lock_mode         //Lock Mode
     *
     * @return array  $manage_list               //Evaluate Result Manage List
     */
    function evaluateCategoryList(
        $category_list,
        & $user,
        $dynamic_role_list,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get UUM Instance
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');

        //Get Evaluate Target List
        $targets_list = [];
        $user_id
            = $user->getOID();
        $targets_list[GRN_LINK_MANAGE_TARGET_TYPE_USER]
            = [$user_id => &$user];
        $targets_list[GRN_LINK_MANAGE_TARGET_TYPE_GROUP]
            = $uum->getUserGroups($user_id);
        $targets_list[GRN_LINK_MANAGE_TARGET_TYPE_STATIC_ROLE]
            = $uum->getUserRoles($user_id);;
        $targets_list[GRN_LINK_MANAGE_TARGET_TYPE_DYNAMIC_ROLE]
            = $dynamic_role_list;

        //Initialize Manage Cache
        $manage_list = [];
        foreach (array_keys($category_list) as $category_id) {
            $this->setManageCache($user_id, $category_id,
                $this->_authority_list);
            $manage_list[$user_id][$category_id] = $this->_authority_list;
        }

        //Check Manage
        foreach (array_keys($targets_list) as $targets_type) {
            //Check Target List Count
            if (count($targets_list[$targets_type]) === 0) {
                continue;
            }
            $target_list =& $targets_list[$targets_type];

            //Create Condition
            $condition = null;
            $target_condition = $this->_createTargetCondition($target_list,
                $targets_type);
            $category_condition
                = $this->_createCategoryCondition($category_list);
            $condition = sprintf('%s AND %s', $target_condition,
                $category_condition);

            //Get Table Information
            $table_info = $this->_getTableInfo($targets_type);

            //Create RowSet With Condition
            $rowset = new CB_RowSet($table_info, 'a');
            if ($targets_type == GRN_LINK_MANAGE_TARGET_TYPE_USER) {
                $app_locator = GRN_ApplicationLocator::instance();
                $tm = $app_locator->getTableManager('link');
                $user_table = $tm->getTableInfo('cb_user');
                $on = 'a.col_target = u._id AND u.col_deleted IS NULL';
                $rowset->addJoin($user_table, $on, CB_DATABASE_INNER_JOIN, 'u');
            }
            $rowset->setLock($lock_mode);
            $rowset->addCondition($condition);
            while ( ! is_null($row = $rowset->iterate())) {
                $authority_list = [];

                //Get Category Object
                $category = $row->get(GRN_LINK_PROPERTY_OBJECT);
                $category_id = $category->getOID();

                //Set Manage Cache
                foreach (array_keys($this->_authority_list) as $authority_id) {
                    //Get Authority Value
                    $authority_value = $row->get('authority_' . $authority_id);
                    $prev_authority_value
                        = $manage_list[$user_id][$category_id][$authority_id];
                    $manage_list[$user_id][$category_id][$authority_id]
                        = max($authority_value,
                        $prev_authority_value);
                }
                $this->setManageCache($user_id, $category_id,
                    $manage_list[$user_id][$category_id]);
            }
        }

        //Return Manage List
        return $manage_list;
    }
}

class GRN_Link_Category_Manage_Base extends CB_PersistentBase
{
    var $col_authority_manage = ['type' => 'int'];
    var $col_object
        = [
            'type' => 'relation',
            'to'   => 'grn_link_system_category'
        ];
}

class GRN_Link_Category_Manage_User extends GRN_Link_Category_Manage_Base
{
    var $col_target = ['type' => 'relation', 'to' => 'cb_user'];
}

class GRN_Link_Category_Manage_Group extends GRN_Link_Category_Manage_Base
{
    var $col_target = ['type' => 'relation', 'to' => 'cb_group'];
}

class GRN_Link_Category_Manage_Dynamic_Role
    extends GRN_Link_Category_Manage_Base
{
    var $col_target = ['type' => 'char', 'length' => 100];
}

class GRN_Link_Category_Manage_Static_Role extends GRN_Link_Category_Manage_Base
{
    var $col_target = ['type' => 'relation', 'to' => 'cb_role'];
}
