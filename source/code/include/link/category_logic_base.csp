<?php
/**
 * Link Application Category Logic Class
 *
 * @author  Yuichi, Nakamura 2005/4
 * @version 1.0
 * @package grn.link
 */

/** Category Application **/
require_once('link/resources.csp');

/**
 * Category Logic Base Class
 *
 * @package grn.link
 */
class GRN_Link_Category_Logic_Base
{
    //Category Manager Instance
    var $_category_manager_base = null;

    /**
     * Constructor
     */
    function __construct()
    {
    }

    /**
     * get Login User
     *
     * @access private
     * @return object $login_user                //Login User
     */
    function _getLoginUser()
    {
        //Get UUM Instance
        global $G_container_base;
        $grn_uum = $G_container_base->getInstance('uum');

        //Get Login User
        $login_user = $grn_uum->getLoginUser();
        if ( ! $login_user) {
            {
                $___ret = false;

                return $___ret;
            }
        }

        //Return Login User
        return $login_user;
    }

    /**
     * Set Creator
     *
     * @access private
     *
     * @param  object $object //Object
     *
     * @return bool   $result                    //Result
     */
    function _setCreator(&$object)
    {
        //Check Argument
        if ( ! $object) {
            return false;
        }

        // Get Login User
        $login_user = $this->_getLoginUser();

        //Get Create Time
        $ctime = new CB_TimeStamp();
        $ctime->unix_ts = time();

        //Set Create Infomation
        if ($login_user) {
            $display_name = $login_user->get(GRN_LINK_PROPERTY_DISPLAY_NAME);
            $foreign_key = $login_user->get(GRN_LINK_PROPERTY_FOREIGN_KEY);
            $object->set(GRN_LINK_PROPERTY_CREATOR, $login_user);   //Creator
            $object->set(GRN_LINK_PROPERTY_CREATOR_NAME,
                $display_name); //Creator Name
            $object->set(GRN_LINK_PROPERTY_CREATOR_FOREIGN_KEY,
                $foreign_key);  //Creator Foreign Key
            $object->set(GRN_LINK_PROPERTY_MODIFIER, $login_user);   //Modifier
            $object->set(GRN_LINK_PROPERTY_MODIFIER_NAME,
                $display_name); //Modifier Name
            $object->set(GRN_LINK_PROPERTY_MODIFIER_FOREIGN_KEY,
                $foreign_key); //Modifier Foreign Key
        }
        $object->set(GRN_LINK_PROPERTY_CTIME, $ctime);  //Create Time
        $object->set(GRN_LINK_PROPERTY_MTIME, $ctime);  //Modify Time

        return true;
    }

    /**
     * Set Modofier
     *
     * @access private
     *
     * @param  object $object //Object
     *
     * @return bool   $result                    //Result
     */
    function _setModifier(&$object)
    {
        //Check Argument
        if ( ! $object) {
            return false;
        }

        // Get Login User
        $login_user =& $this->_getLoginUser();

        //Get Modofy Time
        $mtime = new CB_TimeStamp();
        $mtime->unix_ts = time();

        //Set Modify Infomation/
        if ($login_user) {
            $display_name = $login_user->get(GRN_LINK_PROPERTY_DISPLAY_NAME);
            $foreign_key = $login_user->get(GRN_LINK_PROPERTY_FOREIGN_KEY);
            $object->set(GRN_LINK_PROPERTY_MODIFIER, $login_user);   //Modifier
            $object->set(GRN_LINK_PROPERTY_MODIFIER_NAME,
                $display_name); //Modifier Display Name
            $object->set(GRN_LINK_PROPERTY_MODIFIER_FOREIGN_KEY,
                $foreign_key);  //Modifier Foreign Key
        }
        $object->set(GRN_LINK_PROPERTY_MTIME, $mtime);  //Modify Time

        return true;
    }
}

/**
 * System Category Logic Class
 *
 * @package grn.link
 */
class GRN_Link_System_Category_Logic_Base extends GRN_Link_Category_Logic_Base
{
    /**
     * Constructor
     */
    function __construct()
    {
    }

    /**
     * Get Instance
     *
     * @return object $instance                  //Instance of GRN_Link_System_Category_Logic_Base
     */
    private static $_instance = null;

    /**
     * @return GRN_Link_System_Category_Logic_Base
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Category Manager Base
     *
     * @return GRN_Link_System_Category_Manager_Base $category_manager_base     //Category Manager Base
     */
    function _getCategoryManagerBase()
    {
        if (is_null($this->_category_manager_base)) {
            require_once('link/category_manager_base.csp');
            $this->_category_manager_base
                = GRN_Link_System_Category_Manager_Base::getInstance();
        }

        return $this->_category_manager_base;
    }

    /**
     * Get Category Object
     *
     * @param  int $category_id        //Category ID
     * @param  int $parent_category_id //Parent Category ID
     *
     * @return object $category                  //Category Object
     */
    function &get($category_id, $parent_category_id = null)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('link/error_code.csp');
        cb_trim_check($category_id,
            E_GRN_LINK_CATEGORY_INVALID_ID);    //Category ID

        //Get Category Object
        $category_manager_base = $this->_getCategoryManagerBase();
        $category =& $category_manager_base->get($category_id,
            $parent_category_id);
        if ( ! $category) {
            //Category Not Found
            require_once('link/error_code.csp');
            cb_throw_error(E_GRN_LINK_CATEGORY_NOT_FOUND);
        }

        //Return Category Object
        return $category;
    }

    /**
     * Get Category By Foreign Key
     *
     * @param string $category_key //Category Foreign Key
     *
     * @return object $category                   //Category Object
     */
    function &getByForeignKey($category_key)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('link/error_code.csp');
        cb_trim_check($category_key,
            E_GRN_LINK_CATEGORY_INVALID_ID);    //Category ID

        //Get Category Object
        $category_manager_base = $this->_getCategoryManagerBase();
        $category
            =& $category_manager_base->getByForeignKey($category_key);
        if ( ! $category) {
            //Category Not Found
            require_once('link/error_code.csp');
            cb_throw_error(E_GRN_LINK_CATEGORY_NOT_FOUND);
        }

        //Return Category Object
        return $category;
    }

    /**
     * Get Root Category Object
     *
     * @return object $root_category             //Root Category Object
     */
    function &getRoot()
    {
        //Get Root Category Object
        $category_manager_base = $this->_getCategoryManagerBase();
        $category =& $category_manager_base->getRoot();
        if ( ! $category) {
            //Category Not Found
            require_once('link/error_code.csp');
            cb_throw_error(E_GRN_LINK_CATEGORY_NOT_FOUND);
        }

        //Return Category Object
        return $category;
    }

    /**
     * Get Category Object List
     *
     * @param  int  $parent_category_id //Parent Category ID
     * @param  bool $refresh            //Refresh Flag
     *
     * @return array  $category_list             //Category Object List
     */
    function &getList($parent_category_id = null, $refresh = false)
    {
        //Get Category Object List
        $category_manager_base =& $this->_getCategoryManagerBase();
        $category_list
            =& $category_manager_base->getList($parent_category_id,
            $refresh);

        //Return Category Object List
        return $category_list;
    }

    /**
     * Get Parent Category
     *
     * @param int $category_id //Category ID
     *
     * @return object $parent_category            //Parent Category Object
     */
    function &getParent($category_id)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('link/error_code.csp');
        cb_trim_check($category_id,
            E_GRN_LINK_CATEGORY_INVALID_ID);    //Category ID

        //Get Parent Category
        $category_manager_base =& $this->_getCategoryManagerBase();
        $parent_category
            =& $category_manager_base->getParent($category_id);
        if ( ! $parent_category) {
            {
                $___ret = false;

                return $___ret;
            }
        }

        //Return Parent Category Object
        return $parent_category;
    }

    /**
     * Get Child Category
     *
     * @param int $category_id //Category ID
     *
     * @return array $child_category_list       //Child Category List
     */
    function getChildList($category_id)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('link/error_code.csp');
        cb_trim_check($category_id,
            E_GRN_LINK_CATEGORY_INVALID_ID);    //Category ID

        //Get Category List
        $category_manager_base =& $this->_getCategoryManagerBase();
        $child_category_list
            = $category_manager_base->getChildList($category_id);

        //Return Child Category List
        return $child_category_list;
    }
}

/**
 * Personal Category Logic Class
 *
 * @package grn.link
 */
class GRN_Link_Personal_Category_Logic_Base extends GRN_Link_Category_Logic_Base
{
    /**
     * Constructor
     */
    function __construct()
    {
    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Link_Personal_Category_Logic_Base
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Category Manager Base
     *
     * @return object $category_manager_base     //Category Manager Base
     */
    function _getCategoryManagerBase()
    {
        if (is_null($this->_category_manager_base)) {
            require_once('link/category_manager_base.csp');
            $this->_category_manager_base
                = GRN_Link_Personal_Category_Manager_Base::getInstance();
        }

        return $this->_category_manager_base;
    }

    /**
     * Get Category Object
     *
     * @param  int $category_id        //Category ID
     * @param  int $parent_category_id //Parent Category ID
     *
     * @return object $category                  //Category Object
     */
    function &get($category_id, $parent_category_id = null)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('link/error_code.csp');
        cb_trim_check($category_id,
            E_GRN_LINK_CATEGORY_INVALID_ID);    //Category ID

        //Get Login User
        $login_user = $this->_getLoginUser();
        $login_user_id = $login_user->getOID();

        //Get Category Object
        $category_manager_base = $this->_getCategoryManagerBase();
        $category = $category_manager_base->get($category_id,
            $login_user_id, $parent_category_id);
        if ( ! $category) {
            //Category Not Found
            require_once('link/error_code.csp');
            cb_throw_error(E_GRN_LINK_CATEGORY_NOT_FOUND);
        }

        //Return Category Object
        return $category;
    }

    /**
     * Get Category By Foreign Key
     *
     * @param string $category_key //Category Foreign Key
     *
     * @return object $category                  //Category Object
     */
    function &getByForeignKey($category_key)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('link/error_code.csp');
        cb_trim_check($category_key,
            E_GRN_LINK_CATEGORY_INVALID_ID);    //Category ID

        //Get Login User
        $login_user = $this->_getLoginUser();
        $login_user_id = $login_user->getOID();

        //Get Category Object
        $category_manager_base = $this->_getCategoryManagerBase();
        $category
            =& $category_manager_base->getByForeignKey($category_key,
            $login_user_id);
        if ( ! $category) {
            //Category Not Found
            require_once('link/error_code.csp');
            cb_throw_error(E_GRN_LINK_CATEGORY_NOT_FOUND);
        }

        //Return Category Object
        return $category;
    }

    /**
     * Get Root Category Object
     *
     * @return object $root_category             //Root Category Object
     */
    function &getRoot()
    {
        //Get Login User
        $login_user = $this->_getLoginUser();
        $login_user_id = $login_user->getOID();

        //Get Root Category Object
        $category_manager_base = $this->_getCategoryManagerBase();
        $category
            =& $category_manager_base->getRoot($login_user_id);
        if ( ! $category) {
            //Category Not Found
            require_once('link/error_code.csp');
            cb_throw_error(E_GRN_LINK_CATEGORY_NOT_FOUND);
        }

        //Return Category Object
        return $category;
    }

    /**
     * Get Category Object List
     *
     * @param  int  $parent_category_id //Parent Category ID
     * @param  bool $refresh            //Refresh Flag
     *
     * @return array  $category_list             //Category Object List
     */
    function &getList($parent_category_id = null, $refresh = false)
    {
        //Get Login User
        $login_user = $this->_getLoginUser();
        $login_user_id = $login_user->getOID();

        //Get Category Object List
        $category_manager_base = $this->_getCategoryManagerBase();
        $category_list
            =& $category_manager_base->getList($login_user_id,
            $parent_category_id, $refresh);

        //Return Category Object List
        return $category_list;
    }

    /**
     * Get Parent Category
     *
     * @param int $category_id //Category ID
     *
     * @return object $parent_category            //Parent Category Object
     */
    function &getParent($category_id)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('link/error_code.csp');
        cb_trim_check($category_id,
            E_GRN_LINK_CATEGORY_INVALID_ID);    //Category ID

        //Get Login User
        $login_user = $this->_getLoginUser();
        $login_user_id = $login_user->getOID();

        //Get Parent Category
        $category_manager_base = $this->_getCategoryManagerBase();
        $parent_category
            =& $category_manager_base->getParent($category_id,
            $login_user_id);
        if ( ! $parent_category) {
            {
                $___ret = false;

                return $___ret;
            }
        }

        //Return Parent Category Object
        return $parent_category;
    }
}


