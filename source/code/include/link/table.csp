<?php

/**
 * Link Application Persistent Class
 *
 * @author  Y.Nakamura 2005/03/15
 * @version 1.0
 * @package grn.link
 */

/** Framework **/
require_once('fw/uum_core.csp');

/** Base Service **/
require_once('grn/inspection.csp');
require_once('grn/sso.csp');

/**
 * Link Application Access Base Class
 *
 * @package grn.link
 * @abstract
 */
class GRN_Link_Access_Base extends GRN_InspectionBase
{
    /**
     * @param $row
     */
    function __construct(&$row)
    {
        parent::__construct($row, 'grn.link');
    }

    var $_app_id = 'link';

    /** Security Model **/
    var $col_security_model = ['type' => 'int'];
}

/**
 * System Category Persistent Class
 *
 * @package grn.link
 */
class GRN_Link_System_Category extends GRN_Link_Access_Base
{
    /**
     * @param $row
     */
    function __construct(&$row)
    {
        parent::__construct($row);
    }

    /** Name **/
    var $col_name = ['type' => 'char', 'notnull' => true];
    /** Foreign Key **/
    var $col_foreign_key = ['type' => 'char', 'notnull' => true];
    var $idx_foreign_key = ['cols' => ['foreign_key'], 'unique' => true];
    /** Memo **/
    var $col_memo = ['type' => 'char', 'length' => 65535, 'lazy' => true];
    /** Parent **/
    var $col_parent
        = [
            'type' => 'relation',
            'to'   => 'GRN_Link_System_Category'
        ];
    /** List Index **/
    var $col_list_index = ['type' => 'int', 'notnull' => true];
    var $idx_list_index = ['cols' => ['list_index']];

    /** Complex Index **/
    var $idx_parent_list_index = ['cols' => ['parent', 'list_index']];

    /** reserved columns **/
    var $col_reserve_text1 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text2 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text3 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_int1 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int2 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int3 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_blob1 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob2 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob3 = ['type' => 'blob', 'lazy' => true];

    /**
     * @param string $col_name
     *
     * @return mixed
     */
    public function get($col_name)
    {
        $result = false;

        $table_info = $this->getTableInfo();
        $col_info = $table_info->getColumnInfo($col_name);
        if (is_null($col_info)) {
            return $result;
        }

        if ($col_name == 'parent') {
            $isKeyExists = array_key_exists(CB_DATABASE_COLUMN_PREFIX
                                            . $col_name,
                $this->__row->_rawdata);
            $id = $isKeyExists
                ? $this->__row->_rawdata[CB_DATABASE_COLUMN_PREFIX . $col_name]
                : null;

            if ( ! is_null($id)) {
                require_once('link/LinkFacade.csp');
                require_once('fw/i18n.csp');

                $i18n = CB_I18N::getInstance();
                $table_info = $this->getTableInfo();
                $tableManager = $table_info->getTableManager();
                $relationTableName = $col_info['to'];
                $relationTableInfo
                    = $tableManager->getTableInfo($relationTableName);
                $relationTableLock = $relationTableInfo->_lock;

                $linkDAO = new LinkFacade();
                $dataObj = [];
                $dataObj['lock'] = $relationTableLock;
                $dataObj['language'] = $i18n->getCurrentLanguage();

                $linkCategoryData = $linkDAO->referSystemCategoryById($dataObj,
                    $id);
                $result
                    = $relationTableInfo->getRow($linkCategoryData->getId(),
                    $linkCategoryData->convertArray());
            } else {
                $result = parent::get($col_name);
            }
        } else {
            $result = parent::get($col_name);
        }

        return $result;
    }
}

/**
 * Personal Category Persistent Class
 *
 * @package grn.link
 */
class GRN_Link_Personal_Category extends GRN_InspectionBase
{
    /**
     * @param $row
     */
    function __construct(&$row)
    {
        parent::__construct($row, 'grn.link');
    }

    var $_app_id = 'link';

    /** Name **/
    var $col_name = ['type' => 'char', 'notnull' => true];
    /** Foreign Key **/
    var $col_foreign_key = ['type' => 'char', 'notnull' => true];
    /** Memo **/
    var $col_memo = ['type' => 'char', 'length' => 65535, 'lazy' => true];
    /** Parent **/
    var $col_parent
        = [
            'type' => 'relation',
            'to'   => 'GRN_Link_Personal_Category'
        ];
    /** User **/
    var $col_user = ['type' => 'relation', 'to' => 'CB_User'];
    /** List Index **/
    var $col_list_index = ['type' => 'int', 'notnull' => true];

    /** Complex Index **/
    var $idx_foreign_key_user
        = [
            'cols'   => ['foreign_key', 'user'],
            'unique' => true
        ];
    var $idx_user_list_index = ['cols' => ['user', 'list_index']];
    var $idx_parent_user_list_index
        = [
            'cols' => [
                'parent',
                'user',
                'list_index'
            ]
        ];

    /** reserved columns **/
    var $col_reserve_text1 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text2 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text3 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_int1 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int2 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int3 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_blob1 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob2 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob3 = ['type' => 'blob', 'lazy' => true];
}

/**
 * System Link Persistent Class
 *
 * @package grn.link
 */
class GRN_Link_System_Link extends GRN_InspectionBase
{
    /**
     * @param $row
     */
    function __construct(&$row)
    {
        parent::__construct($row, 'grn.link');
    }

    var $_app_id = 'link';

    /** Name **/
    var $col_name = ['type' => 'char', 'notnull' => true];
    /** Type(Link/Line) **/
    var $col_type = ['type' => 'char', 'notnull' => true];
    /** URL **/
    var $col_url = ['type' => 'char', 'length' => 255, 'notnull' => true];
    /** Memo **/
    var $col_memo = ['type' => 'char', 'length' => 65535, 'lazy' => true];
    /** Category **/
    var $col_category
        = [
            'type' => 'relation',
            'to'   => 'GRN_Link_System_Category'
        ];
    /** SSO **/
    var $col_sso = ['type' => 'weak_relation', 'to' => 'GRN_SSO_SSO'];
    /** List Index **/
    var $col_list_index = ['type' => 'int', 'notnull' => true];
    var $idx_list_index = ['cols' => ['list_index']];

    /** Complex Index **/
    var $idx_category_list_index = ['cols' => ['category', 'list_index']];

    /** reserved columns **/
    var $col_reserve_text1 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text2 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text3 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_int1 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int2 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int3 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_blob1 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob2 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob3 = ['type' => 'blob', 'lazy' => true];

    /**
     * @param string $col_name
     *
     * @return mixed
     */
    public function get($col_name)
    {
        $result = false;

        $table_info = $this->getTableInfo();
        $col_info = $table_info->getColumnInfo($col_name);
        if (is_null($col_info)) {
            return $result;
        }

        if ($col_name == 'category') {
            $isKeyExists = array_key_exists(CB_DATABASE_COLUMN_PREFIX
                                            . $col_name,
                $this->__row->_rawdata);
            $id = $isKeyExists
                ? $this->__row->_rawdata[CB_DATABASE_COLUMN_PREFIX . $col_name]
                : null;

            if ( ! is_null($id)) {
                require_once('link/LinkFacade.csp');
                require_once('fw/i18n.csp');

                $i18n = CB_I18N::getInstance();
                $table_info = $this->getTableInfo();
                $tableManager = $table_info->getTableManager();
                $relationTableName = $col_info['to'];
                $relationTableInfo
                    = $tableManager->getTableInfo($relationTableName);
                $relationTableLock = $relationTableInfo->_lock;

                $linkDAO = new LinkFacade();
                $dataObj = [];
                $dataObj['lock'] = $relationTableLock;
                $dataObj['language'] = $i18n->getCurrentLanguage();

                $linkCategoryData = $linkDAO->referSystemCategoryById($dataObj,
                    $id);
                $result
                    = $relationTableInfo->getRow($linkCategoryData->getId(),
                    $linkCategoryData->convertArray());
            } else {
                $result = parent::get($col_name);
            }
        } else {
            $result = parent::get($col_name);
        }

        return $result;
    }
}

/**
 * Personal Link Persistent Class
 *
 * @package grn.link
 */
class GRN_Link_Personal_Link extends GRN_InspectionBase
{
    /**
     * @param $row
     */
    function __construct(&$row)
    {
        parent::__construct($row, 'grn.link');
    }

    var $_app_id = 'link';

    /** Name **/
    var $col_name = ['type' => 'char', 'notnull' => true];
    /** Type(Link/Line) **/
    var $col_type = ['type' => 'char', 'notnull' => true];
    /** URL **/
    var $col_url = ['type' => 'char', 'length' => 255, 'notnull' => true];
    /** Memo **/
    var $col_memo = ['type' => 'char', 'length' => 65535, 'lazy' => true];
    /** Category **/
    var $col_category
        = [
            'type' => 'relation',
            'to'   => 'GRN_Link_Personal_Category'
        ];
    /** User **/
    var $col_user = ['type' => 'relation', 'to' => 'CB_User'];
    /** SSO **/
    var $col_sso = ['type' => 'weak_relation', 'to' => 'GRN_SSO_SSO'];
    /** List Index **/
    var $col_list_index = ['type' => 'int', 'notnull' => true];

    /** Complex Index **/
    var $idx_user_list_index = ['cols' => ['user', 'list_index']];
    var $idx_category_user_list_index
        = [
            'cols' => [
                'category',
                'user',
                'list_index'
            ]
        ];

    /** reserved columns **/
    var $col_reserve_text1 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text2 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text3 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_int1 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int2 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int3 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_blob1 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob2 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob3 = ['type' => 'blob', 'lazy' => true];
}
