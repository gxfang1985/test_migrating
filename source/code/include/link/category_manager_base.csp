<?php
/**
 * Link Application Category Manager Base Class
 *
 * @author  Yuichi, Nakamura 2005/5
 * @version 1.0
 * @package grn.link
 */

/** Link Application **/
require_once('link/resources.csp');

/**
 * System Category Manager Class
 *
 * @package grn.link
 */
class GRN_Link_System_Category_Manager_Base
{
    /** Category Table **/
    var $_table = null;

    /** Category List **/
    var $_list = [];

    /** Search Category List **/
    var $_search_list = [];

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {

    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Link_System_Category_Manager_Base
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Table
     *
     * @return CB_TableInfo $table                     //GRN_Link_Category Table Information
     */
    function _getTable()
    {
        if (is_null($this->_table)) {
            require_once('link/table.csp');
            $app_locator = GRN_ApplicationLocator::instance();
            $table_manager = $app_locator->getTableManager('link');
            $this->_table
                = $table_manager->getTableInfo('grn_link_system_category');
        }

        return $this->_table;
    }

    /**
     * Get Category
     *
     * @param int $category_id        //Category ID
     * @param int $parent_category_id //Parent Category ID(null:All Category)
     *
     * @return CB_Row                            //Category Object
     */
    function get($category_id, $parent_category_id = null)
    {
        //Check Root Category
        if ($category_id == GRN_LINK_CATEGORY_ROOT_ID || $category_id == 0) {
            $ret =& $this->getRoot();

            return $ret;
        }

        //Get Category List
        $category_list =& $this->getList($parent_category_id);

        //Get Category
        if ( ! array_key_exists($category_id, $category_list)) {
            $ret = false;

            return $ret;
        }

        //Return Category Object
        return $category_list[$category_id];
    }

    /**
     * Get Category By Foreign Key
     *
     * @param string $inCategoryKey //Category Foreign Key
     *
     * @return \CB_Row
     */
    function &getByForeignKey($inCategoryKey)
    {
        require_once('link/LinkFacade.csp');
        require_once('fw/i18n.csp');

        $i18n = CB_I18N::getInstance();
        $tableInfo = $this->_getTable();

        $linkDAO = new LinkFacade();
        $dataObj = [];
        $dataObj['lock'] = $tableInfo->_lock;
        $dataObj['language'] = $i18n->getCurrentLanguage();

        $category = $linkDAO->referSystemCategoryByForeignKey($dataObj,
            $inCategoryKey);

        //Return Category Object
        if ($category === false) {
            return $category;
        } else {
            $row = $this->_getTable()
                        ->getRow($category->getId(), $category->convertArray());

            return $row;
        }
    }

    /**
     * Get Root Category
     *
     * @return \CB_Row
     */
    function &getRoot()
    {
        //Get Root Category
        require_once('link/LinkFacade.csp');
        require_once('fw/i18n.csp');

        $i18n = CB_I18N::getInstance();
        $tableInfo = $this->_getTable();

        $linkDAO = new LinkFacade();
        $dataObj = [];
        $dataObj['lock'] = $tableInfo->_lock;
        $dataObj['language'] = $i18n->getCurrentLanguage();

        $category = $linkDAO->referSystemCategoryById($dataObj,
            GRN_LINK_CATEGORY_ROOT_ID);
        $ret = $tableInfo->getRow($category->getId(),
            $category->convertArray());

        return $ret;
    }

    /**
     * Get Category List
     *
     * @param int  $parent_category_id //Parent Category ID(null:All Category)
     * @param bool $refresh            //Refresh Cache
     *
     * @return CB_Row[]                         //Category Object List
     */
    function &getList($parent_category_id = null, $refresh = false)
    {
        $resultList = [];

        //Check Arguments
        $parent_category_id = is_null($parent_category_id) ? 0
            : $parent_category_id;

        //Get Category List From Cache
        $cached = false;
        if ( ! $refresh) {
            if (array_key_exists($parent_category_id, $this->_list)) {
                if (is_array($this->_list[$parent_category_id])) {
                    $resultList = $this->_list[$parent_category_id];
                    $cached = true;
                }
            }
        }

        //Get Category List From Database
        if ( ! $cached || $refresh) {
            //Get Category
            require_once('link/LinkFacade.csp');
            require_once('fw/i18n.csp');

            $i18n = CB_I18N::getInstance();
            $tableInfo = $this->_getTable();

            $linkDAO = new LinkFacade();
            $dataObj = [];
            $dataObj['lock'] = $tableInfo->_lock;
            $dataObj['language'] = $i18n->getCurrentLanguage();
            $dataObj['parentId'] = ($parent_category_id == 0) ? null
                : $parent_category_id;

            $categoryList = $linkDAO->getSystemCategoryList($dataObj);

            foreach ($categoryList as $category) {
                $row = $tableInfo->getRow($category->getId(),
                    $category->convertArray());
                $this->_list[$parent_category_id][$category->getId()] = $row;
            }

            if (count($categoryList) > 0) {
                $resultList = $this->_list[$parent_category_id];
            }
        }

        //Return Category List
        return $resultList;
    }

    /**
     * Get Parent Category
     *
     * @param int $category_id //Category ID
     *
     * @return CB_Row                            //Parent Category Object
     */
    function &getParent($category_id)
    {
        //Get Category
        $category = $this->get($category_id);
        if ( ! $category) {
            $ret = false;

            return $ret;
        }

        //Return Parent Category Object
        $ret =& $category->get(GRN_LINK_PROPERTY_PARENT);

        return $ret;
    }

    /**
     * Get Child Category
     *
     * @param int $category_id //Category ID
     *
     * @return CB_Row[]                          //Child Category List
     */
    function getChildList($category_id)
    {
        //Get Child Category List
        return $this->getList($category_id);
    }

    /**
     * Reflesh Cache
     *
     * @param int  $category_id //Category ID(null:ALL Category)
     * @param bool $recursive   //Recursive Flag
     * @param none
     */
    protected function refreshCache($category_id = null, $recursive = false)
    {
        //Refresh Cache With User ID
        if (is_null($category_id)) {
            if ($recursive) {
                unset($this->_list);
            } else {
                unset($this->_list[0]);
            }

            return;
        } else {
            if ($recursive) {
                $sub_category =& $this->_list[$category_id];
                if (is_array($sub_category)) {
                    foreach (array_keys($sub_category) as $sub_category_id) {
                        $this->refreshCache($sub_category_id, true);
                    }
                }
            }
            unset($this->_list[$category_id]);
            unset($this->_list[0][$category_id]);
        }

        return;
    }
}

/**
 * Personal Category  Manager Base Class
 *
 * @package grn.link
 */
class GRN_Link_Personal_Category_Manager_Base
{
    /** Category Table **/
    var $_table = null;

    /** Category List **/
    var $_list = [];

    /** Search Category List **/
    var $_search_list = [];

    /**
     * Constructor of GRN_Link_Personal_Category_Manager_Base
     */
    function __construct()
    {

    }

    /** @var  GRN_Link_Personal_Category_Manager_Base */
    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Link_Personal_Category_Manager_Base
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Table
     *
     * @return CB_TableInfo                //GRN_Link_Category Table Information
     */
    function _getTable()
    {
        if (is_null($this->_table)) {
            require_once('link/table.csp');
            $app_locator = GRN_ApplicationLocator::instance();
            $table_manager = $app_locator->getTableManager('link');
            $this->_table
                = $table_manager->getTableInfo('grn_link_personal_category');
        }

        return $this->_table;
    }

    /**
     * Get Category
     *
     * @param int $category_id        //Category ID
     * @param int $user_id            //Target User ID(null:System Category)
     * @param int $parent_category_id //Parent Category ID(null:All Category)
     *
     * @return CB_Row|bool
     */
    function get($category_id, $user_id, $parent_category_id = null)
    {
        //Check Root Category
        if ($category_id == GRN_LINK_CATEGORY_ROOT_ID || $category_id == 0) {
            $ret = $this->getRoot();

            return $ret;
        }

        //Get Category List
        $category_list =& $this->getList($user_id, $parent_category_id);

        //Get Category
        if ( ! array_key_exists($category_id, $category_list)) {
            $ret = false;

            return $ret;
        }

        //Return Category Object
        return $category_list[$category_id];
    }

    /**
     * Get Category By Foreign Key
     *
     * @param string $category_key //Category Foreign Key
     * @param        $user_id
     *
     * @return bool|\CB_Row
     */
    function getByForeignKey($category_key, $user_id)
    {
        //Create RowSet
        $rowset = new CB_RowSet($this->_getTable());

        //Create Condition
        $condition = null;
        $condition = $rowset->queryf('(col_foreign_key = "@S")', $category_key);
        $condition = $condition . $rowset->queryf(' AND (col_user = "@S")',
                $user_id);
        $rowset->addCondition($condition);

        //Search Category
        $rowset->addOrderColumn('col_list_index');
        $row = $rowset->iterate();
        if ( ! $row) {
            $ret = false;

            return $ret;
        }

        //Return Category Object
        return $row;
    }

    /**
     * Get Root Category
     *
     * @return CB_Row
     */
    function getRoot()
    {
        //Get Root Category
        $table = $this->_getTable();
        $ret = $table->getRow(GRN_LINK_CATEGORY_ROOT_ID);

        return $ret;
    }

    /**
     * Get Category List
     *
     * @param int  $user_id            //Target User ID
     * @param int  $parent_category_id //Parent Category ID(null:All Category)
     * @param bool $refresh            //Refresh Cache
     *
     * @return CB_Row[]                          //Category Object List
     */
    function &getList($user_id, $parent_category_id = null, $refresh = false)
    {
        $category_list = [];

        //Check Arguments
        $parent_category_id = is_null($parent_category_id) ? 0
            : $parent_category_id;

        //Get Category List From Cache
        $cached = false;
        if ( ! $refresh) {
            if (array_key_exists($user_id, $this->_list)) {
                if (array_key_exists($parent_category_id,
                    $this->_list[$user_id])
                ) {
                    if (is_array($this->_list[$user_id][$parent_category_id])) {
                        $category_list
                            =& $this->_list[$user_id][$parent_category_id];
                        $cached = true;
                    }
                }
            }
        }

        //Get Category List From Database
        if ( ! $cached || $refresh) {
            //Create RowSet
            $rowset = new CB_RowSet($this->_getTable());

            //Create Condition
            $condition = $rowset->queryf('col_user = "@S"', $user_id);
            if ($parent_category_id != 0) {
                $condition = $condition
                             . $rowset->queryf(' AND col_parent = "@S"',
                        $parent_category_id);
            } else {
                $root_category = $this->getRoot();
            }

            //Search Link List
            $count = 0;
            $rowset->addCondition($condition);
            $rowset->addOrderColumn('col_list_index');

            if (isset($root_category)) {
                $this->_list[$user_id][$parent_category_id][GRN_LINK_CATEGORY_ROOT_ID]
                    = $root_category;
                $count++;
            }
            while ( ! is_null($row = $rowset->iterate())) {
                $this->_list[$user_id][$parent_category_id][$row->getOID()]
                    = $row;
                $count++;
            }
            if ($count > 0) {
                $category_list =& $this->_list[$user_id][$parent_category_id];
            }

        }

        //Return Category List
        return $category_list;
    }

    /**
     * Get Parent Category
     *
     * @param int $category_id //Category ID
     * @param int $user_id     //Target User ID
     *
     * @return \CB_Row
     */
    function getParent($category_id, $user_id)
    {
        //Get Category
        $category = $this->get($category_id, $user_id);
        if ( ! $category) {
            $ret = false;

            return $ret;
        }

        //Return Parent Category Object
        $ret = $category->get(GRN_LINK_PROPERTY_PARENT);

        return $ret;
    }

    /**
     * Reflesh Cache
     *
     * @param int  $user_id     //User ID
     * @param int  $category_id //Category ID(null:ALL Category)
     * @param bool $recursive   //Recursive Flag
     * @param none
     */
    protected function refreshCache(
        $user_id,
        $category_id = null,
        $recursive = false
    ) {
        //Refresh Cache With User ID
        if (is_null($category_id)) {
            if ($recursive) {
                unset($this->_list[$user_id]);
            } else {
                unset($this->_list[$user_id][0]);
            }

            return;
        } else {
            if ($recursive) {
                $sub_category =& $this->_list[$user_id][$category_id];
                if (is_array($sub_category)) {
                    foreach (array_keys($sub_category) as $sub_category_id) {
                        $this->refreshCache($user_id, $sub_category_id, true);
                    }
                }
            }
            unset($this->_list[$user_id][$category_id]);
            unset($this->_list[$user_id][0][$category_id]);
        }

        return;
    }
}


