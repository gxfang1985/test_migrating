<?php
/**
 * Link Application Manage Logic Class
 *
 * @author  Yuichi, Nakamura 2005/4
 * @version 1.0
 * @package grn.link
 */

/** Link Application **/
require_once('link/table.csp');
require_once('link/resources.csp');
require_once('link/manage_logic_base.csp');

/**
 * Link Category Manage Manager Class
 *
 * @package grn.link
 */
class GRN_Link_Category_Manage_Logic extends GRN_Link_Category_Manage_Logic_Base
{
    //Category Manager Instance
    var $_category_logic = null;

    //Category Manage Manager Instance
    var $_category_manage_manager = null;

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {

    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Link_Category_Manage_Logic
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Category Manage Manager
     *
     * @return object $category_manage_manager   //Category Manage Manager
     */
    function _getCategoryManageManager()
    {
        if (is_null($this->_category_manage_manager)) {
            require_once('link/manage_manager.csp');
            $this->_category_manage_manager
                = GRN_Link_Category_Manage_Manager::getInstance();
        }

        return $this->_category_manage_manager;
    }

    /**
     * Get Category Logic
     *
     * @return object $category_logic            //Category Logic
     */
    function _getCategoryLogic()
    {
        if (is_null($this->_category_logic)) {
            require_once('link/category_logic.csp');
            $this->_category_logic
                = GRN_Link_System_Category_Logic::getInstance();
        }

        return $this->_category_logic;
    }

    /**
     * Create Table List
     *
     * @param  none
     *
     * @return bool   $result                    //Result
     */
    function createTableList()
    {
        //Create Table List
        $manager =& $this->_getCategoryManageManager();
        $manager->createTableList();

        return true;
    }

    /**
     * Alter Table  List
     *
     * @param  array $authority_list //Authority List
     *
     * @return bool   $result                    //Result
     */
    function alterTableList($authority_list = null)
    {
        //Alter Table List
        $manager =& $this->_getCategoryManageManager();

        return $manager->alterTableList($authority_list);
    }

    /**
     * Drop Table  List
     *
     * @param  array $authority_list //Authority List
     *
     * @return bool   $result                    //Result
     */
    function dropTableList()
    {
        //Drop Table List
        $manager =& $this->_getCategoryManageManager();
        $manager->dropTableList();

        return true;
    }

    /**
     * Create Manage Object
     *
     * @param  int    $category_id    //Category ID
     * @param  int    $target_id      //Target ID
     * @param  string $target_type    //Table Type(user/group/static_role/dynamic_role)
     * @param  object $authority_list //Authority List
     * @param  bool   $inspect        //Inspaction Message Flag
     *
     * @return object $manage                    //Manage Object
     */
    function &addManage(
        $category_id,
        $target_id,
        $target_type,
        $authority_list,
        $inspect = true
    ) {
        //Check Argument
        require_once('link/error_code.csp');
        require_once('fw/string_util.csp');
        cb_trim_check($category_id,
            E_GRN_LINK_CATEGORY_INVALID_ID);    //Category ID
        cb_trim_check($target_id,
            E_GRN_LINK_MANAGE_INVALID_TARGET);  //Manage Target
        cb_trim_check($target_type,
            E_GRN_LINK_MANAGE_INVALID_TARGET);  //Manage Target


        //Get Category Object
        $category_logic =& $this->_getCategoryLogic();
        $category =& $category_logic->get($category_id);

        //Get UUM Instance
        global $G_container_base;
        $grn_uum =& $G_container_base->getInstance('uum');

        //Get Target Object
        $target = null;
        switch ($target_type) {
            case GRN_LINK_MANAGE_TARGET_TYPE_USER:
                $target =& $grn_uum->getUser($target_id);
                $id_name = 'uid';
                $id_value = $target_id;
                break;
            case GRN_LINK_MANAGE_TARGET_TYPE_GROUP:
                $target =& $grn_uum->getGroup($target_id);
                $id_name = 'gid';
                $id_value = $target_id;
                break;
            case GRN_LINK_MANAGE_TARGET_TYPE_STATIC_ROLE:
                $target =& $grn_uum->getStaticRole($target_id);
                $id_name = 'rid';
                $id_value = $target_id;
                break;
            case GRN_LINK_MANAGE_TARGET_TYPE_DYNAMIC_ROLE:
                $target = $target_id;
                $id_name = 'rid';
                $id_value = $target_id;
                break;
            default:
                //Manage Target Object Not Found
                require_once('link/error_code.csp');
                cb_throw_error(E_GRN_LINK_MANAGE_TARGET_NOT_FOUND);
                break;
        }

        //Create Manage Object
        $manager = $this->_getCategoryManageManager();
        $manage =& $manager->createManage($category, $target, $target_type,
            $authority_list);

        //Check Inspect Flag
        if ($inspect) {
            //Check Inspection Message Enabled
            require_once('link/inspection.csp');
            $inspection = GRN_Link_Inspection::getInstance();
            if ($inspection->isEnabled()) {
                //Write Inspection Message
                $message_args['cid']
                    = $category->getOID();                      //Category ID
                $message_args[$id_name]
                    = $id_value;                                 //Target ID Name/Value
                $message_args['category_name']
                    = $category->get(GRN_LINK_PROPERTY_NAME);   //Category Name

                //Record Inspection
                $inspection->writeInspectionLog('create',
                    'system_category_privilege', $message_args);
            }
        }

        //Return Manage Object
        return $manage;
    }

    /**
     * Remove Manage Object
     *
     * @param  int    $manage_id   //manage_id
     * @param  string $target_type //Table Type(user/group/static_role/dynamic_role)
     * @param  bool   $inspect     //Inspaction Message Flag
     *
     * @return bool   $result                    //Result
     */
    function deleteManage($manage_id, $target_type, $inspect = true)
    {
        //Check Argument
        require_once('link/error_code.csp');
        require_once('fw/string_util.csp');
        cb_trim_check($manage_id,
            E_GRN_LINK_MANAGE_INVALID_ID);      //Manage ID
        cb_trim_check($target_type,
            E_GRN_LINK_MANAGE_INVALID_TARGET);  //Manage Target

        //Check Inspect Flag
        if ($inspect) {
            //Check Inspection Message Enabled
            require_once('link/inspection.csp');
            $inspection = GRN_Link_Inspection::getInstance();
            if ($inspection->isEnabled()) {
                //Get Manage
                $manage =& $this->getManage($manage_id, $target_type);
                if ( ! $manage) {
                    return false;
                }

                //Get Category
                $category =& $manage->get(GRN_LINK_PROPERTY_OBJECT);

                //Get Target Information
                switch ($target_type) {
                    case GRN_LINK_MANAGE_TARGET_TYPE_USER:
                        $target =& $manage->get(GRN_LINK_PROPERTY_TARGET);
                        $id_name = 'uid';
                        $id_value = $target->getOID();
                        break;
                    case GRN_LINK_MANAGE_TARGET_TYPE_GROUP:
                        $target =& $manage->get(GRN_LINK_PROPERTY_TARGET);
                        $id_name = 'gid';
                        $id_value = $target->getOID();
                        break;
                    case GRN_LINK_MANAGE_TARGET_TYPE_STATIC_ROLE:
                        $target =& $manage->get(GRN_LINK_PROPERTY_TARGET);
                        $id_name = 'rid';
                        $id_value = $target->getOID();
                        break;
                    case GRN_LINK_MANAGE_TARGET_TYPE_DYNAMIC_ROLE:
                        $target = $manage->get(GRN_LINK_PROPERTY_TARGET);
                        $id_name = 'rid';
                        $id_value = $target;
                        break;
                    default:
                        //Access Target Object Not Found
                        require_once('link/error_code.csp');
                        cb_throw_error(E_GRN_LINK_MANAGE_TARGET_NOT_FOUND);
                        break;
                }
            }
        }

        //Delete Manage Object
        $manager =& $this->_getCategoryManageManager();
        $manager->removeManage($manage_id, $target_type);

        //Check Inspect Flag
        if ($inspect) {
            //Check Inspection Message Enabled
            require_once('link/inspection.csp');
            $inspection = GRN_Link_Inspection::getInstance();
            if ($inspection->isEnabled()) {
                //Write Inspection Message
                $message_args['cid']
                    = $category->getOID();                      //Category ID
                $message_args[$id_name]
                    = $id_value;                                 //Target ID Name
                $message_args['category_name']
                    = $category->get(GRN_LINK_PROPERTY_NAME);   //Category Name
                if ( ! $message_args['category_name']) {
                    $message_args['category_name'] = cb_msg('grn.link',
                        GRN_LINK_ROOT_CATEGORY_NAME_DEFAULT_PARENTHESES);
                }

                //Record Inspection
                $inspection->writeInspectionLog('delete',
                    'system_category_privilege', $message_args);
            }
        }

        return true;
    }

    /**
     * Remove Manage Object
     *
     * @param  int    $manage_id   //manage_id
     * @param  string $target_type //Table Type(user/group/static_role/dynamic_role)
     * @param  bool   $inspect     //Inspaction Message Flag
     *
     * @return bool   $result                    //Result
     */
    function deleteManage2(
        $category_id,
        $target_id,
        $target_type,
        $inspect = true
    ) {
        //Check Argument
        require_once('link/error_code.csp');
        require_once('fw/string_util.csp');
        cb_trim_check($category_id,
            E_GRN_LINK_CATEGORY_INVALID_ID);    //Category ID
        cb_trim_check($target_id,
            E_GRN_LINK_MANAGE_INVALID_TARGET);  //Target ID
        cb_trim_check($target_type,
            E_GRN_LINK_MANAGE_INVALID_TARGET);  //Manage Target

        //Check Inspect Flag
        if ($inspect) {
            //Check Inspection Message Enabled
            require_once('link/inspection.csp');
            $inspection = GRN_Link_Inspection::getInstance();
            if ($inspection->isEnabled()) {
                //Get Manage
                $manage =& $this->getManage2($category_id, $target_id,
                    $target_type);
                if ( ! $manage) {
                    return false;
                }

                //Get Category
                $category =& $manage->get(GRN_LINK_PROPERTY_OBJECT);

                //Get Target Information
                switch ($target_type) {
                    case GRN_LINK_MANAGE_TARGET_TYPE_USER:
                        $target =& $manage->get(GRN_LINK_PROPERTY_TARGET);
                        $id_name = 'uid';
                        $id_value = $target->getOID();
                        break;
                    case GRN_LINK_MANAGE_TARGET_TYPE_GROUP:
                        $target =& $manage->get(GRN_LINK_PROPERTY_TARGET);
                        $id_name = 'gid';
                        $id_value = $target->getOID();
                        break;
                    case GRN_LINK_MANAGE_TARGET_TYPE_STATIC_ROLE:
                        $target =& $manage->get(GRN_LINK_PROPERTY_TARGET);
                        $id_name = 'rid';
                        $id_value = $target->getOID();
                        break;
                    case GRN_LINK_MANAGE_TARGET_TYPE_DYNAMIC_ROLE:
                        $target = $manage->get(GRN_LINK_PROPERTY_TARGET);
                        $id_name = 'rid';
                        $id_value = $target;
                        break;
                    default:
                        //Access Target Object Not Found
                        require_once('link/error_code.csp');
                        cb_throw_error(E_GRN_LINK_MANAGE_TARGET_NOT_FOUND);
                        break;
                }
            }
        }

        //Delete Manage Object
        $manager =& $this->_getCategoryManageManager();
        $manager->removeManage2($category_id, $target_id, $target_type);

        //Check Inspect Flag
        if ($inspect) {
            //Check Inspection Message Enabled
            require_once('link/inspection.csp');
            $inspection = GRN_Link_Inspection::getInstance();
            if ($inspection->isEnabled()) {
                //Write Inspection Message
                $message_args['cid']
                    = $category->getOID();                      //Category ID
                $message_args[$id_name]
                    = $id_value;                                 //Target ID Name/Value
                $message_args['category_name']
                    = $category->get(GRN_LINK_PROPERTY_NAME);   //Category Name
                if ( ! $message_args['category_name']) {
                    $message_args['category_name'] = cb_msg('grn.link',
                        GRN_LINK_ROOT_CATEGORY_NAME_DEFAULT_PARENTHESES);
                }

                //Record Inspection
                $inspection->writeInspectionLog('delete',
                    'system_category_privilege', $message_args);
            }
        }

        return true;
    }
}


