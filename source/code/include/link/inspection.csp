<?php
/**
 * Link/Category Inspection  Class
 *
 * @author  Yuichi, Nakamura 2005/4
 * @version 1.0
 * @package grn.link
 */

/** Link Application **/
require_once('link/resources.csp');

/**
 * Inspection for link apply for Garoon 2.5 version.
 *Date 2007/06
 *
 * @version 1.0
 * @package grn.link
 */
class GRN_Link_Inspection extends CB_ModuleBase
{
    private static $_instance = null;

    /**
     * @return GRN_Link_Inspection
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    var $_logger = null;

    var $_uum = null;

    function __construct()
    {
        require_once('grn/logger.csp');
        $logger_manager = CB_LoggerManager::getInstance();

        parent::__construct('grn.link');

        $this->_logger = $logger_manager->getLogger($this->getModuleId());

        global $G_container_base;
        $this->_uum = $G_container_base->getInstance('uum');
    }

    function isEnabled()
    {
        return $this->_logger->isNoticeEnabled();
    }

    /**
     * write an inspection log
     *
     * @param   string $action action name
     * @param   string $target target name
     * @param   array  $params log list array
     */
    function writeInspectionLog($action, $target, $params = [])
    {
        $this->_logger->noticeEx($action, $target, $params);
    }
}

/**
 * System Category Local Inspection Class
 *
 * @package grn.link
 * @abstract
 */
class GRN_Link_System_Category_Local_Inspection extends GRN_Link_Inspection
{
    var $_template_list = null;

    /**
     * Constructor
     *
     */
    public function __construct()
    {
        $this->_template_list = [
            'system_category_local_add'    => [
                'action' => 'create',
                'target' => 'system_category_local',
            ],
            'system_category_local_modify' => [
                'action' => 'modify',
                'target' => 'system_category_local',
            ],
            'system_category_local_delete' => [
                'action' => 'delete',
                'target' => 'system_category_local',
            ],
        ];

        //Set Template List
        parent::__construct();

        return;
    }

    /** @var self */
    private static $_instance = null;

    /**
     * @return self
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    function isEnabled($threshold = 'notice')
    {
        //Check Threshold
        switch ($threshold) {
            case 'critical':
                $result = $this->_logger->isCriticalEnabled();
                break;
            case 'error':
                $result = $this->_logger->isErrorEnabled();
                break;
            case 'warning':
                $result = $this->_logger->isWarningEnabled();
                break;
            case 'notice':
                $result = $this->_logger->isNoticeEnabled();
                break;
            case 'info':
                $result = $this->_logger->isInfoEnabled();
                break;
            case 'debug':
                $result = $this->_logger->isDebugEnabled();
                break;
            default:
                $result = false;
                break;
        }

        //Return Result
        return $result;
    }

    /**
     * Record Inspection Message
     *
     * $param  string $message_type               //Inspaction Message Type
     * $param  array  $message_args               //Inspaction Message Argument List
     * $return bool   $result                     //Result
     */
    function record($message_type, $message_args = [])
    {
        //Get Inspaction Message Template
        if ( ! array_key_exists($message_type, $this->_template_list)) {
            return false;
        }
        $message_template = $this->_template_list[$message_type];

        $message_action = $message_template['action'];
        $message_target = $message_template['target'];

        $this->_logger->noticeEx($message_action, $message_target,
            $message_args);

        //Return Result
        return true;
    }
}

