<?php
/**
 * Link Application Link Manager Base Class
 *
 * @author  Yuichi, Nakamura 2005/5
 * @version 1.0
 * @package grn.link
 */

/** Link Application **/
require_once('link/resources.csp');

/**
 * Link Manager Class
 *
 * @package grn.link
 */
class GRN_Link_System_Link_Manager_Base
{
    /** Link Table **/
    var $_table = null;

    /** Link List **/
    var $_list = [];

    /** Search Link List **/
    var $_search_list = [];

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Link_System_Link_Manager_Base
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Table
     *
     * @return CB_TableInfo
     */
    function _getTable()
    {
        static $table = null;
        if (is_null($table)) {
            require_once('link/table.csp');
            $app_locator = GRN_ApplicationLocator::instance();
            $table_manager = $app_locator->getTableManager('link');
            $table
                = $table_manager->getTableInfo('grn_link_system_link');
        }

        return $table;
    }

    /**
     * Get Link
     *
     * @param int $link_id     //Link ID
     * @param int $category_id //Target Category ID(null:ALL Category)
     *
     * @return \CB_Row
     */
    function &get($link_id, $category_id = null)
    {
        //Get Link List
        $link_list =& $this->getList($category_id);

        //Get Link
        if ( ! array_key_exists($link_id, $link_list)) {
            $ret = false;

            return $ret;
        }

        //Return Link Object
        return $link_list[$link_id];
    }

    /**
     * Get Link List
     *
     * @param int  $category_id //Target Category ID(null:ALL Category)
     * @param bool $refresh     //Refresh Cache
     *
     * @return CB_Row[]
     */
    function &getList($category_id = null, $refresh = false)
    {
        $link_list = [];

        //Check Arguments
        $category_id = is_null($category_id) ? 0 : $category_id;

        //Get Link List From Cache
        $cached = false;
        if ( ! $refresh) {
            if (array_key_exists($category_id, $this->_list)) {
                if (is_array($this->_list[$category_id])) {
                    $link_list =& $this->_list[$category_id];
                    $cached = true;
                }
            }
        }

        //Get Link List From Database
        if ( ! $cached || $refresh) {
            //Create RowSet
            $rowset = new CB_RowSet($this->_getTable());

            //Create Condition
            $condition = null;
            if ($category_id !== 0) {
                $condition = $condition . $rowset->queryf('col_category = "@S"',
                        $category_id);
                $rowset->addCondition($condition);
            }

            //Search Link List
            $count = 0;
            $rowset->addOrderColumn('col_list_index');
            while ( ! is_null($row = $rowset->iterate())) {
                $this->_list[$category_id][$row->getOID()] = $row;
                $count++;
            }
            if ($count > 0) {
                $link_list =& $this->_list[$category_id];
            }
        }

        //Return Link List
        return $link_list;
    }

    /**
     * Get Link Count
     *
     * @param int $category_id //Target Category ID(null:ALL Category)
     *
     * @return int
     */
    function getCount($category_id = null)
    {
        //Create RowSet
        $rowset = new CB_RowSet($this->_getTable());

        //Create Condition
        $condition = null;
        if ($category_id !== 0) {
            $condition = $condition . $rowset->queryf('col_category = "@S"',
                    $category_id);
            $rowset->addCondition($condition);
        }

        //Get Link Count
        $rowset->setCalcAllMatched(true);
        $link_count = $rowset->countAllMatched();
        $rowset->destroy();

        //Return Link Count
        return $link_count;
    }
}

/**
 * Personal Link Manager Base Class
 *
 * @package grn.link
 */
class GRN_Link_Personal_Link_Manager_Base
{
    /** Link Table **/
    var $_table = null;

    /** Link List **/
    var $_list = [];

    /** Search Link List **/
    var $_search_list = [];

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {

    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Link_Personal_Link_Manager_Base
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Table
     *
     * @return object $table                     //GRN_Link_Personal_Link Table Information
     */
    function _getTable()
    {
        static $table = null;
        if (is_null($table)) {
            require_once('link/table.csp');
            $app_locator = GRN_ApplicationLocator::instance();
            $table_manager = $app_locator->getTableManager('link');
            $table
                = $table_manager->getTableInfo('grn_link_personal_link');
        }

        return $table;
    }

    /**
     * Get Link
     *
     * @param int $link_id     //Link ID
     * @param int $user_id     //Target User ID
     * @param int $category_id //Target Category ID(null:ALL Category)
     *
     * @return CB_Row
     */
    function &get($link_id, $user_id, $category_id = null)
    {
        //Get Link List
        $link_list =& $this->getList($user_id, $category_id);

        //Get Link
        if ( ! array_key_exists($link_id, $link_list)) {
            $ret = false;

            return $ret;
        }

        //Return Link Object
        return $link_list[$link_id];
    }

    /**
     * Get Link List
     *
     * @param int  $user_id     //Target User ID
     * @param int  $category_id //Target Category ID(null:ALL Category)
     * @param bool $refresh     //Refresh Cache
     *
     * @return CB_Row[]
     */
    function &getList($user_id, $category_id = null, $refresh = false)
    {
        $link_list = [];

        //Check Arguments
        $user_id = is_null($user_id) ? 0 : $user_id;
        $category_id = is_null($category_id) ? 0 : $category_id;

        //Get Link List From Cache
        $cached = false;
        if ( ! $refresh) {
            if (array_key_exists($user_id, $this->_list)) {
                if (array_key_exists($category_id, $this->_list[$user_id])) {
                    if (is_array($this->_list[$user_id][$category_id])) {
                        $link_list =& $this->_list[$user_id][$category_id];
                        $cached = true;
                    }
                }
            }
        }

        //Get Link List From Database
        if ( ! $cached || $refresh) {
            //Create RowSet
            $rowset = new CB_RowSet($this->_getTable());

            //Create Condition
            $condition = $rowset->queryf('col_user = "@S"', $user_id);
            if ($category_id !== 0) {
                $condition = $condition
                             . $rowset->queryf('and col_category = "@S"',
                        $category_id);
            }

            //Search Link List
            $count = 0;
            $rowset->addCondition($condition);
            $rowset->addOrderColumn('col_list_index');
            while ( ! is_null($row = $rowset->iterate())) {
                $this->_list[$user_id][$category_id][$row->getOID()] = $row;
                $count++;
            }
            if ($count > 0) {
                $link_list =& $this->_list[$user_id][$category_id];
            }
        }

        //Return Link List
        return $link_list;
    }

    /**
     * Get Link Count
     *
     * @param int $user_id     //Target User ID
     * @param int $category_id //Target Category ID(null:ALL Category)
     *
     * @return int
     */
    function getCount($user_id, $category_id = null)
    {
        //Create RowSet
        $rowset = new CB_RowSet($this->_getTable());

        //Create Condition
        $condition = $rowset->queryf('col_user = "@S"', $user_id);
        if ($category_id !== 0) {
            $condition = $condition . $rowset->queryf('and col_category = "@S"',
                    $category_id);
        }

        //Get Link Count
        $rowset->addCondition($condition);
        $rowset->setCalcAllMatched(true);
        $link_count = $rowset->countAllMatched();
        $rowset->destroy();

        //Return Link Count
        return $link_count;
    }

    /**
     * Search Link
     *
     * @param array $search_category_list //Category ID List
     * @param array $target_list          //Search Target List
     * @param array $condition_list       //Search Condition List
     * @param int   $user_id              //Search User ID
     * @param int   $offset               //Search Offset
     * @param int   $limit                //Search Limit
     * @param int   $term                 //Search Term
     *
     * @return CB_Row[]                         //Hit Link List
     */
    function search(
        $search_category_list,
        $target_list,
        $condition_list,
        $user_id,
        $offset = 0,
        $limit = 5,
        $term = 0
    ) {
        //Create RowSet
        $rowset = new CB_RowSet($this->_getTable());

        //Create User Condition
        $condition = [];
        $condition[] = $rowset->queryf('(col_user = "@S")', $user_id);

        //Create Category Condition
        //$condition[] = $rowset->queryf('(col_category IN (@S))', implode(',', array_keys($search_category_list)));
        if (is_array($search_category_list)
            && count($search_category_list) > 0
        ) {
            $category_condition = [];
            foreach (
                $search_category_list as $search_category_key =>
                $search_category_value
            ) {
                $category_condition[] = $rowset->queryf("'@S'",
                    $search_category_key);
            }
            $condition[] = sprintf('(col_category IN (%s))',
                implode(',', $category_condition));
        }

        //Create Search Condition
        $search_condition = [];
        foreach ($target_list as $target_name) {
            $item_search_condition = [];
            foreach ($condition_list as $condition_item) {
                switch ($target_name) {
                    case 'title':
                        $item_search_condition[]
                            = $rowset->queryf('(col_name LIKE "%@L%")',
                            $condition_item);
                        break;
                    case 'url':
                        $item_search_condition[]
                            = $rowset->queryf('(col_url LIKE "%@L%")',
                            $condition_item);
                        break;
                    default:
                        break;
                }
            }
            if (count($item_search_condition) != 0) {
                $search_condition[] = '(' . implode(' AND ',
                        $item_search_condition) . ')';
            }
        }
        if (count($search_condition) != 0) {
            $condition[] = '(' . implode(' OR ', $search_condition) . ')';
        }

        //Create Limit Date Condition
        if ($term > 0) {
            $condition[] = $rowset->queryf('(col_mtime >= "@S")', $term);
        }

        //Create Condition
        $condition = implode(' AND ', $condition);

        //Search Link
        $hit_link_list = [];
        $rowset->addCondition($condition);
        if ($limit > 0) {
            $rowset->limit($offset, $limit);
        }
        while ( ! is_null($row = $rowset->iterate())) {
            $hit_link_list[$row->getOID()] = $row;
        }

        //return Hit Link List
        return $hit_link_list;
    }
}
