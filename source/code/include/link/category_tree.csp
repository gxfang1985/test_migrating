<?php
/**
 * Links Tree View
 *
 * @author: Huy Nguyen - 2009/11
 */


require_once('grn/org_tree.csp');
require_once('link/resources.csp');

class GRN_Link_CategoryTree extends GRN_OrgTree
{
    var $_locale = null;

    function __construct()
    {
        $this->_groups_have_childs = [];
    }

    /**
     * 子組織を取得する。
     *
     * @param int $oid
     *
     * @return array
     */
    function _getChildren($oid)
    {
        $ret = [];
        $type = null;

        if (is_null($oid)) {
            $oid = 0;
        } else {
            $oid_info = $this->parseOID($oid);
            $oid = $oid_info['id'];
            $type = $oid_info['type'];
        }

        if (0 == $oid) {
            // create virtual categories
            $p_oid = $this->makeOID('personal', GRN_LINK_CATEGORY_ROOT_ID);
            $s_oid = $this->makeOID('share', GRN_LINK_CATEGORY_ROOT_ID);

            $ret = [
                //個人カテゴリ
                $p_oid => [
                    '_id'      => $p_oid,
                    'col_name' => cb_msg('grn.link', 'personal_category')
                ],
                //共有カテゴリ
                $s_oid => [
                    '_id'      => $s_oid,
                    'col_name' => cb_msg('grn.link', 'shared_category')
                ],
            ];

            $this->_groups_have_childs[$oid] = 2;

            return $ret;
        } else {
            $tmp_categories = $this->_getChildrenForView($oid, $type);

            foreach ($tmp_categories as $category) {
                $id = $this->makeOID($type, $category['id']);
                $ret[$id] = [
                    '_id'      => $id,
                    'col_name' => $category['name']
                ];
            }
        }

        return $ret;
    }

    function _getChildrenForView($oid, $type)
    {
        $ret = [];

        require_once('link/controller_util.csp');
        $category_util = GRN_Link_Category_Controller_Utility::getInstance();
        $translation_map_category = [
            'id'   => '_id',
            'name' => 'name'
        ];
        $category_util->setType($type);
        $ret = $category_util->GetChildListView($oid, $translation_map_category,
            CB_DATABASE_NO_LOCK);

        return $ret;
    }

    /**
     * @param int $oid
     *
     * @return int
     */
    function _getChildCount($oid)
    {
        $oid_info = $this->parseOID($oid);
        $category = $this->_getChildrenForView($oid_info['id'],
            $oid_info['type']);

        return count($category);
    }

    /**
     * @param int $oid
     *
     * @return array
     */
    function _getAncestors($oid)
    {
        $retval = [];
        if (is_null($oid)) {
            return $retval;
        }

        $oid_info = $this->parseOID($oid);
        $oid = $oid_info['id'];
        $type = $oid_info['type'];

        require_once('link/controller_util.csp');
        $category_util = GRN_Link_Category_Controller_Utility::getInstance();
        $category_util->setType($type);

        $ancestors =& $category_util->getAncestors($oid);
        foreach (array_keys($ancestors) as $key) {
            $retval[$this->makeOID($type, $key)] =& $ancestors[$key];
        }

        return $retval;
    }

    function getRoot()
    {
        $tree =& $this->_tree;
        if (is_null($tree)) {
            return $tree;
        }

        // update caption of virtual folders when current locale is changed
        require_once('fw/i18n.csp');
        $i18n = CB_I18N::getInstance();
        $locale = strtolower($i18n->getCurrentLanguage());

        if (strcasecmp($this->_locale, $locale)) {
            $p_oid = $this->makeOID('personal', GRN_LINK_CATEGORY_ROOT_ID);
            $s_oid = $this->makeOID('share', GRN_LINK_CATEGORY_ROOT_ID);
            foreach (array_keys($tree) as $key) {
                $folder =& $tree[$key];
                switch ($key) {
                    case $p_oid:
                        $folder['name'] = cb_msg('grn.link',
                            'personal_category');
                        break;
                    case $s_oid:
                        $folder['name'] = cb_msg('grn.link', 'shared_category');
                        break;
                }
            }
        }

        $this->_locale = $locale;

        return $tree;
    }

    function parseOID($oid)
    {
        $ret = [];
        $parts = explode('_', $oid);

        if (is_null($oid) || is_numeric($oid) || count($parts) != 2) {
            return $oid;
        }

        $ret = [
            'id'   => @$parts[1],
            'type' => @$parts[0]
        ];

        return $ret;
    }

    function makeOID($type, $oid)
    {
        $ret = $type . '_' . $oid;

        return $ret;
    }

    function getSelectedNode()
    {
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $user = $uum->getLoginUser();

        if ($this->_uid !== $user->getOID()) {
            $this->_selectedNode = null;
            $this->initialize();
        }

        if ( ! is_null($this->_selectedNode)) {
            $oid_info = $this->parseOID($this->_selectedNode);
            $accessible = true;

            require_once('link/controller_util.csp');
            $category_util
                = GRN_Link_Category_Controller_Utility::getInstance();
            $category_util->setType($oid_info['type']);

            $category_info_logic_base
                =& $category_util->getCategoryInformationLogicBase();
            $category_info_man_base
                =& $category_info_logic_base->_getCategoryInformationManagerBase();

            if ($oid_info['type'] == 'share') {
                $category =& $category_info_man_base->get($oid_info['id']);
            } else {
                $category =& $category_info_man_base->get($oid_info['id'],
                    $user->getOID(), null, CB_DATABASE_DEFAULT_LOCK);
            }

            if ($category) {
                require_once('link/controller_util.csp');
                $category_util
                    = GRN_Link_Category_Controller_Utility::getInstance();

                $category_util->setType($oid_info['type']);
                $accessible = $category_util->checkAccess($oid_info['id'], null,
                    false, CB_DATABASE_NO_LOCK);
            }

            if ( ! $category || ! $accessible) {
                $this->_selectedNode = null;
                $this->initialize();
            }
        }

        return $this->_selectedNode;
    }

    /**
     * @param int  $parent_oid
     * @param bool $expanded
     * @param bool $force
     *
     * @return array|bool
     */
    function buildChild($parent_oid, $expanded = false, $force = true)
    {
        return $this->_buildChild($parent_oid, $expanded, $force);
    }
}


class GRN_Link_SystemCategoryTree extends GRN_OrgTree
{
    function __construct()
    {
        $this->_groups_have_childs = [];
    }

    /**
     * 子組織を取得する。
     *
     * @param   int $oid 親組織ID
     *
     * @return  array 子組織
     */
    function _getChildren($oid)
    {
        $ret = [];
        $type = null;

        if (is_null($oid)) {
            $oid = GRN_LINK_CATEGORY_ROOT_ID;
        }

        $tmp_categories = $this->_getChildrenForView($oid);

        foreach ($tmp_categories as $id => $category) {
            $ret[$id] = [
                '_id'      => $category['id'],
                'col_name' => $category['name']
            ];
        }

        return $ret;
    }

    function _getChildrenForView($oid)
    {
        $ret = [];

        require_once('link/controller_util.csp');
        $category_util = GRN_Link_Category_Controller_Utility::getInstance();
        $translation_map_category = [
            'id'   => '_id',
            'name' => 'name'
        ];
        $category_util->setType('system');
        $ret = $category_util->GetChildListView($oid, $translation_map_category,
            CB_DATABASE_NO_LOCK);

        return $ret;
    }

    /**
     * 子組織数を取得する。
     *
     * @param  int $oid 親組織ID
     *
     * @return int num of child organization
     */
    function _getChildCount($oid)
    {
        $category = $this->_getChildrenForView($oid);

        return count($category);
    }

    /**
     * @param int $oid
     *
     * @return array
     */
    function _getAncestors($oid)
    {
        $retval = [];
        if (is_null($oid)) {
            return $retval;
        }

        require_once('link/controller_util.csp');
        $category_util = GRN_Link_Category_Controller_Utility::getInstance();
        $category_util->setType('system');

        $retval =& $category_util->getAncestors($oid);

        return $retval;
    }

    function getSelectedNode()
    {
        global $G_container_base;
        $uum =& $G_container_base->getInstance('uum');
        $user =& $uum->getLoginUser();

        if ($this->_uid !== $user->getOID()) {
            $this->_selectedNode = null;
            $this->initialize();
        }

        if ( ! is_null($this->_selectedNode)) {
            require_once('link/controller_util.csp');
            $category_util
                = GRN_Link_Category_Controller_Utility::getInstance();
            $category_util->setType('system');

            $category_info_logic_base
                =& $category_util->getCategoryInformationLogicBase();
            $category_info_man_base
                =& $category_info_logic_base->_getCategoryInformationManagerBase();

            $category =& $category_info_man_base->get($this->_selectedNode);

            if ( ! $category) {
                $this->_selectedNode = null;
                $this->initialize();
            }
        }

        return $this->_selectedNode;
    }

    /**
     * ツリーの子ノードを構築する。
     *
     * @param int  $parent_oid 親ノードID
     * @param bool $expanded
     * @param bool $force
     *
     * @return array|bool 構築した子ノード
     */
    function buildChild($parent_oid, $expanded = false, $force = true)
    {
        return $this->_buildChild($parent_oid, $expanded, $force);
    }
}

////////// Unitity functions //////////
function grn_link_rebuild_folder_tree($list_page, $type, $expand_oid = null)
{
    $page_parts = explode('/', cb_get_pagename());
    $is_system = (@$page_parts[1] === 'system');
    $class = $is_system ? 'GRN_Link_SystemCategoryTree'
        : 'GRN_Link_CategoryTree';

    $util = GRN_OrgTreeUtil::getInstance();
    $tree =& $util->getTree($list_page, $class);
    $tree->rebuild();

    // update init time
    $util->updateInitPageList($list_page, $tree);

    if ( ! is_null($expand_oid)) {
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $user = $uum->getLoginUser();

        require_once('link/controller_util.csp');
        $category_util = GRN_Link_Category_Controller_Utility::getInstance();
        $category_util->setType($type);

        $ancestors =& $category_util->getAncestors($expand_oid);

        $ancestors = array_keys($ancestors);

        $oid_type = ($type == 'personal') ? $type : 'share';
        foreach ($ancestors as $oid) {
            if ( ! $is_system) {
                $oid = $tree->makeOID($oid_type, $oid);
            }
            $tree->buildChild($oid);
        }
    }
    $util->setTree($list_page, $tree);
}

