<?php
/**
 * Link Application Category Manager Class
 *
 * @author  Yuichi, Nakamura 2005/3
 * @version 1.0
 * @package grn.link
 */

/** Link Application **/
require_once('link/resources.csp');
require_once('link/category_manager_base.csp');

/**
 * System Category Manager Class
 *
 * @package grn.link
 */
class GRN_Link_System_Category_Manager
    extends GRN_Link_System_Category_Manager_Base
{
    /**
     * Constructor
     *
     */
    function __construct()
    {
        //Get Parent Instance
        $parent = parent::getInstance();

        //Sync Parent Table and Category and Search Cache
        $this->_table =& $parent->_table;
        $this->_list =& $parent->_list;
        $this->_search_list =& $parent->_search_list;
    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Link_System_Category_Manager
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Create Category
     *
     * @param int $parent_category_id //Parent Category ID(null:All Category)
     *
     * @return mixed
     */
    function create($parent_category_id = null)
    {
        //Create Category Object
        $table = $this->_getTable();
        $category = $table->newRow();

        //Get Parent Category Object
        $parent_category = null;
        if ( ! is_null($parent_category_id)) {
            $parent_category =& $this->get($parent_category_id);
        }

        //Set Link Properties
        $category_id = $category->getOID();
        $category->set(GRN_LINK_PROPERTY_PARENT, $parent_category);
        $category->set(GRN_LINK_PROPERTY_LIST_INDEX, $category_id);

        //Set Category List Cache
        $parent_category_id = is_null($parent_category_id) ? 0
            : $parent_category_id;
        //Case of User != 0 and Parent Category != 0 (User and Parent Category's Category)
        $this->_list[$parent_category_id][$category_id] = $category;
        if (array_key_exists(0, $this->_list)) {
            //(Update User's ALL Category Cache, if Loaded)
            $this->_list[0][$category_id] = $category;
        }

        //Return Category Object
        return $category;
    }

    /**
     * Remove Category
     *
     * @param int $category_id        //Link ID
     * @param int $parent_category_id //Parent Category ID(null:All Category)
     *
     * @return bool $result //Result
     */
    function remove($category_id, $parent_category_id = null)
    {
        //Get Category Object
        $category =& $this->get($category_id, $parent_category_id);
        if ( ! $category) {
            return false;
        }

        //Get Parent Category ID
        $parent_category =& $category->get(GRN_LINK_PROPERTY_CATEGORY);
        if ($parent_category) {
            $parent_category_id = $parent_category->getOID();
        }

        //Delete Category Object
        $category->delete();

        //Delete From Category List Cache With Children
        //Case of User != 0 and Parent Category != 0 (User and Parent Category's Category)
        if (array_key_exists($parent_category_id, $this->_list)) {
            unset($this->_list[$parent_category_id][$category_id]);
        }
        if (array_key_exists(0, $this->_list)) {
            unset($this->_list[0][$category_id]);
        }
        $this->refreshCache($category_id, true);

        return true;
    }

    /**
     * Change Category Order
     *
     * @param array $category_id_list   //Category ID List
     * @param int   $parent_category_id //Parent Category ID(null:ALL Category)
     *
     * @return bool $result //Result
     */
    function changeOrder($category_id_list, $parent_category_id = null)
    {
        //Get Category List
        $category_list =& $this->getList($parent_category_id);

        //Create New List Index
        $object_index = 0;
        $list_indecies = [];
        foreach (array_keys($category_list) as $category_id) {
            if ($category_id != current($category_id_list)) {
                $list_indecies[current($category_id_list)]
                    = $category_list[$category_id]->get(GRN_LINK_PROPERTY_LIST_INDEX);
            }
            if ( ! next($category_id_list)) {
                break;
            }
        }

        //Set New List Index
        foreach ($list_indecies as $category_id => $list_index) {
            $category_list[$category_id]->set(GRN_LINK_PROPERTY_LIST_INDEX,
                $list_index);
            $category_list[$category_id]->updateNow();
        }

        return;
    }
}

/**
 * Personal Category  Manager Class
 *
 * @package grn.link
 */
class GRN_Link_Personal_Category_Manager
    extends GRN_Link_Personal_Category_Manager_Base
{
    /**
     * Constructor
     *
     */
    function __construct()
    {
        //Get Parent Instance
        $parent = parent::getInstance();

        //Sync Parent Table and Category and Search Cache
        $this->_table =& $parent->_table;
        $this->_list =& $parent->_list;
        $this->_search_list =& $parent->_search_list;
    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Link_Personal_Category_Manager
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Create Category
     *
     * @param int $user_id            //Target User ID
     * @param int $parent_category_id //Parent Category ID(null:All Category)
     *
     * @return object $link                       //Link Object
     */
    function create($user_id, $parent_category_id = null)
    {
        //Create Category Object
        $table = $this->_getTable();
        $category = $table->newRow();

        //Get User Object
        global $G_container_base;
        $grn_uum = $G_container_base->getInstance('uum');
        $user = $grn_uum->getUser($user_id);
        if ( ! $user) {
            {
                $___ret = false;

                return $___ret;
            }
        }

        //Get Parent Category Object
        $parent_category = null;
        if ( ! is_null($parent_category_id)) {
            $parent_category = $this->get($parent_category_id, $user_id);
        }

        //Set Link Properties
        $category_id = $category->getOID();
        $category->set(GRN_LINK_PROPERTY_USER, $user);
        $category->set(GRN_LINK_PROPERTY_PARENT, $parent_category);
        $category->set(GRN_LINK_PROPERTY_LIST_INDEX, $category_id);

        //Set Category List Cache
        $parent_category_id = is_null($parent_category_id) ? 0
            : $parent_category_id;
        //Case of User != 0 and Parent Category != 0 (User and Parent Category's Category)
        $this->_list[$user_id][$parent_category_id][$category_id] =& $category;
        if (array_key_exists(0, $this->_list[$user_id])) {
            //(Update User's ALL Category Cache, if Loaded)
            $this->_list[$user_id][0][$category_id] =& $category;
        }

        //Return Category Object
        return $category;
    }

    /**
     * Remove Category
     *
     * @param int $category_id        //Link ID
     * @param int $user_id            //Target User ID
     * @param int $parent_category_id //Parent Category ID(null:All Category)
     *
     * @return bool   $result                     //Result
     */
    function remove($category_id, $user_id, $parent_category_id = null)
    {
        //Get Category Object
        $category =& $this->get($category_id, $user_id, $parent_category_id);
        if ( ! $category) {
            return false;
        }

        //Get User and Parent Category ID
        $user =& $category->get(GRN_LINK_PROPERTY_USER);
        if ( ! $user) {
            return false;
        }
        $user_id = $user->getOID();
        $parent_category =& $category->get(GRN_LINK_PROPERTY_CATEGORY);
        if ($parent_category) {
            $parent_category_id = $parent_category->getOID();
        }

        //Delete Category Object
        $category->delete();

        //Delete From Category List Cache With Children
        //Case of User != 0 and Parent Category != 0 (User and Parent Category's Category)
        if (array_key_exists($parent_category_id, $this->_list[$user_id])) {
            unset($this->_list[$user_id][$parent_category_id][$category_id]);
        }
        if (array_key_exists(0, $this->_list[$user_id])) {
            unset($this->_list[$user_id][0][$category_id]);
        }
        $this->refreshCache($user_id, $category_id, true);

        return true;
    }

    /**
     * Change Category Order
     *
     * @param array $category_id_list   //Category ID List
     * @param int   $user_id            //User ID
     * @param int   $parent_category_id //Parent Category ID(null:ALL Category)
     *
     * @return bool $result //Result
     */
    function changeOrder(
        $category_id_list,
        $user_id,
        $parent_category_id = null
    ) {
        //Get Category List
        $category_list =& $this->getList($user_id, $parent_category_id);

        //Create New List Index
        $object_index = 0;
        $list_indecies = [];
        foreach (array_keys($category_list) as $category_id) {
            if ($category_id != current($category_id_list)) {
                $list_indecies[current($category_id_list)]
                    = $category_list[$category_id]->get(GRN_LINK_PROPERTY_LIST_INDEX);
            }
            if ( ! next($category_id_list)) {
                break;
            }
        }

        //Set New List Index
        foreach ($list_indecies as $category_id => $list_index) {
            $category_list[$category_id]->set(GRN_LINK_PROPERTY_LIST_INDEX,
                $list_index);
            $category_list[$category_id]->updateNow();
        }

        return;
    }
}


