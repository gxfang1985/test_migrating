<?php
/**
 * Link Application Link Manager Class
 *
 * @author  Yuichi, Nakamura 2005/5
 * @version 1.0
 * @package grn.link
 */

/** Link Application **/
require_once('link/resources.csp');
require_once('link/link_manager_base.csp');

/**
 * Link Manager Class
 *
 * @package grn.link
 */
class GRN_Link_System_Link_Manager extends GRN_Link_System_Link_Manager_Base
{
    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
        //Get Parent Instance
        $parent = parent::getInstance();

        //Sync Parent Table and Category and Search Cache
        $this->_table =& $parent->_table;
        $this->_list =& $parent->_list;
        $this->_search_list =& $parent->_search_list;
    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Link_System_Link_Manager
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Create Link
     *
     * @param int $category_id //Target Category ID(null:ALL Category)
     *
     * @return \CB_Row|mixed                     //Link Object
     */
    function create($category_id = null)
    {
        //Create Link Object
        $table = $this->_getTable();
        $link = $table->newRow();

        //Get Category
        $category = null;
        if ( ! is_null($category_id)) {
            $category_manager = GRN_Link_System_Category_Manager::getInstance();
            $category = $category_manager->get($category_id);
        }

        //Set Link Properties
        $link_id = $link->getOID();
        $link->set(GRN_LINK_PROPERTY_CATEGORY, $category);

        //Get Link List
        $link_list =& $this->getList(null, true);
        $link_index_list = [];
        foreach (array_keys($link_list) as $link_id) {
            $link_index_list[$link_id]
                = $link_list[$link_id]->get(GRN_LINK_PROPERTY_LIST_INDEX);
        }
        $link_index = count($link_index_list) > 0 ? max($link_index_list) + 1
            : $link_id;
        $link->set(GRN_LINK_PROPERTY_LIST_INDEX, $link_index);

        //Set Link List Cache
        $category_id = is_null($category_id) ? 0 : $category_id;
        //Case of User != 0 and Category != 0 (User and Category's Link)
        $this->_list[$category_id][$link_id] =& $link;
        if (array_key_exists(0, $this->_list)) {
            //(Update User's ALL Link Cache, if Loaded)
            $this->_list[0][$link_id] =& $link;
        }

        //Return Link Object
        return $link;
    }

    /**
     * Remove Link
     *
     * @param int      $link_id     //Link ID
     * @param int|null $category_id //Target Category ID(null:ALL Category)
     *
     * @return bool
     */
    function remove($link_id, $category_id = null)
    {
        //Get Link Object
        $link = $this->get($link_id, $category_id);
        if ( ! $link) {
            return false;
        }

        //Get User and Category ID
        $category = $link->get(GRN_LINK_PROPERTY_CATEGORY);
        $category_id = ($category !== false) ? $category->getOID() : 0;

        //Delete Link Object
        $link->delete();

        //Delete From Link List Cache
        //Case of User != 0 and Category != 0 (User and Category's Link)
        unset($this->_list[$category_id][$link_id]);
        if (array_key_exists(0, $this->_list)) {
            //(Update User's ALL Link Cache, if Loaded)
            unset($this->_list[0][$link_id]);
        }

        return true;
    }

    /**
     * Change Link Order
     *
     * @param int  $link_id_list //Link ID List
     * @param int  $category_id  //Category ID(null:ALL Category)
     * @param BOOL $result       //Result
     */
    function changeOrder($link_id_list, $category_id = null)
    {
        //Get Link List
        $link_list =& $this->getList($category_id);

        //Create New List Index
        $object_index = 0;
        $list_indecies = [];
        foreach (array_keys($link_list) as $link_id) {
            if ($link_id !== current($link_id_list)) {
                $list_indecies[current($link_id_list)]
                    = $link_list[$link_id]->get(GRN_LINK_PROPERTY_LIST_INDEX);
            }
            if ( ! next($link_id_list)) {
                break;
            }
        }

        //Set New List Index
        foreach ($list_indecies as $link_id => $list_index) {
            $link_list[$link_id]->set(GRN_LINK_PROPERTY_LIST_INDEX,
                $list_index);
        }

        return;
    }
}

/**
 * Personal Link Manager Class
 *
 * @package grn.link
 */
class GRN_Link_Personal_Link_Manager extends GRN_Link_Personal_Link_Manager_Base
{
    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
        //Get Parent Instance
        $parent = parent::getInstance();

        //Sync Parent Table and Category and Search Cache
        $this->_table =& $parent->_table;
        $this->_list =& $parent->_list;
        $this->_search_list =& $parent->_search_list;
    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Link_Personal_Link_Manager
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Create Link
     *
     * @param int    $user_id     //Target User ID
     * @param int    $category_id //Target Category ID(null:ALL Category)
     * @param object $link        //Link Object
     */
    function create($user_id, $category_id = null)
    {
        //Create Link Object
        $table = $this->_getTable();
        $link = $table->newRow();

        //Get User
        $user = null;
        if ( ! is_null($user_id)) {
            global $G_container_base;
            $grn_uum = $G_container_base->getInstance('uum');
            $user = $grn_uum->getUser($user_id);
        }

        //Get Category
        $category = null;
        if ( ! is_null($category_id)) {
            $category_manager
                = GRN_Link_Personal_Category_Manager::getInstance();
            $category = $category_manager->get($category_id, $user_id);
        }

        //Set Link Properties
        $link_id = $link->getOID();
        $link->set(GRN_LINK_PROPERTY_USER, $user);
        $link->set(GRN_LINK_PROPERTY_CATEGORY, $category);

        //Get Link List
        $link_list =& $this->getList($user_id, null, true);
        $link_index_list = [];
        foreach (array_keys($link_list) as $link_id) {
            $link_index_list[$link_id]
                = $link_list[$link_id]->get(GRN_LINK_PROPERTY_LIST_INDEX);
        }
        $link_index = count($link_index_list) > 0 ? max($link_index_list) + 1
            : $link_id;
        $link->set(GRN_LINK_PROPERTY_LIST_INDEX, $link_index);

        //Set Link List Cache
        $user_id = is_null($user_id) ? 0 : $user_id;
        $category_id = is_null($category_id) ? 0 : $category_id;
        //Case of User != 0 and Category != 0 (User and Category's Link)
        $this->_list[$user_id][$category_id][$link_id] =& $link;
        if (array_key_exists(0, $this->_list[$user_id])) {
            //(Update User's ALL Link Cache, if Loaded)
            $this->_list[$user_id][0][$link_id] =& $link;
        }

        //Return Link Object
        return $link;
    }

    /**
     * Remove Link
     *
     * @param int  $link_id     //Link ID
     * @param int  $user_id     //Target User ID
     * @param int  $category_id //Target Category ID(null:ALL Category)
     * @param BOOL $result      //Result
     */
    function remove($link_id, $user_id, $category_id = null)
    {
        //Get Link Object
        $link =& $this->get($link_id, $user_id, $category_id);
        if ( ! $link) {
            return false;
        }

        //Get User and Category ID
        $user = $link->get(GRN_LINK_PROPERTY_USER);
        $user_id = ($user !== false) ? $user->getOID() : 0;
        $category = $link->get(GRN_LINK_PROPERTY_CATEGORY);
        $category_id = ($category !== false) ? $category->getOID() : 0;

        //Delete Link Object
        $link->delete();

        //Delete From Link List Cache
        //Case of User != 0 and Category != 0 (User and Category's Link)
        unset($this->_list[$user_id][$category_id][$link_id]);
        if (array_key_exists(0, $this->_list[$user_id])) {
            //(Update User's ALL Link Cache, if Loaded)
            unset($this->_list[$user_id][0][$link_id]);
        }

        return true;
    }

    /**
     * Change Link Order
     *
     * @param int  $link_id_list //Link ID List
     * @param int  $user_id      //User ID
     * @param int  $category_id  //Category ID(null:ALL Category)
     * @param BOOL $result       //Result
     */
    function changeOrder($link_id_list, $user_id, $category_id = null)
    {
        //Get Link List
        $link_list =& $this->getList($user_id, $category_id);

        //Create New List Index
        $object_index = 0;
        $list_indecies = [];
        foreach (array_keys($link_list) as $link_id) {
            if ($link_id !== current($link_id_list)) {
                $list_indecies[current($link_id_list)]
                    = $link_list[$link_id]->get(GRN_LINK_PROPERTY_LIST_INDEX);
            }
            if ( ! next($link_id_list)) {
                break;
            }
        }

        //Set New List Index
        foreach ($list_indecies as $link_id => $list_index) {
            $link_list[$link_id]->set(GRN_LINK_PROPERTY_LIST_INDEX,
                $list_index);
        }

        return;
    }
}


