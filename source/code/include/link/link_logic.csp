<?php
/**
 * Link Application Link Logic Class
 *
 * @author  Yuichi, Nakamura 2005/4
 * @version 1.0
 * @package grn.link
 */

/** Link Application **/
require_once('link/resources.csp');
require_once('link/link_logic_base.csp');

/**
 * System Link Logic Class
 *
 * @package grn.link
 */
class GRN_Link_System_Link_Logic extends GRN_Link_System_Link_Logic_Base
{
    //Link Manager Instance
    var $_link_manager = null;

    //Category Manager Instance
    var $_category_manager = null;

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {

    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Link_System_Link_Logic
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Link Manager
     *
     * @return GRN_Link_System_Link_Manager
     */
    function _getLinkManager()
    {
        if (is_null($this->_link_manager)) {
            require_once('link/link_manager.csp');
            $this->_link_manager = GRN_Link_System_Link_Manager::getInstance();
        }

        return $this->_link_manager;
    }

    /**
     * Get Category Manager
     *
     * @return object $category_manager          //Category Manager
     */
    function _getCategoryManager()
    {
        if (is_null($this->_category_manager)) {
            require_once('link/category_manager.csp');
            $this->_category_manager
                = GRN_Link_System_Category_Manager::getInstance();
        }

        return $this->_category_manager;
    }

    /**
     * Add Link Object
     *
     * @return string $link_name                 //Link Name
     * @return string $link_type                 //Link Type
     * @return string $link_url                  //Link URL
     * @return string $link_memo                 //Link Memo
     * @return int    $category_id               //Category ID
     * @return object $link                      //Link Object
     */
    function add($link_name, $link_type, $link_url, $link_memo, $category_id)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('link/error_code.csp');
        cb_trim_check($link_type,
            E_GRN_LINK_LINK_NOT_INPUT_NECESSARY);    //Link Type
        if ($link_type == 'link') {
            cb_trim_check($link_name,
                E_GRN_LINK_LINK_NOT_INPUT_NECESSARY);    //Link Name
            cb_trim_check($link_url,
                E_GRN_LINK_LINK_NOT_INPUT_NECESSARY);    //Link URL
        }
        cb_trim_check($category_id,
            E_GRN_LINK_LINK_NOT_INPUT_NECESSARY);    //Category ID

        //Get Category Object
        $category_manager = $this->_getCategoryManager();
        $category = $category_manager->get($category_id);
        if ( ! $category) {
            //Category Not Found
            require_once('link/error_code.csp');
            cb_throw_error(E_GRN_LINK_CATEGORY_NOT_FOUND);
        }

        //Create Link Object
        $link_manager = $this->_getLinkManager();
        $link = $link_manager->create($category_id);

        //Set Link Properties
        $link->set(GRN_LINK_PROPERTY_NAME, $link_name);    //Link Name
        $link->set(GRN_LINK_PROPERTY_TYPE, $link_type);    //Link Type
        $link->set(GRN_LINK_PROPERTY_URL, $link_url);     //Link URL
        $link->set(GRN_LINK_PROPERTY_MEMO, $link_memo);    //Link Memo
        $link->set(GRN_LINK_PROPERTY_CATEGORY, $category);     //Category

        //Set Creator Information
        $this->_setCreator($link);

        //Return Link Object
        return $link;
    }

    /**
     * Modify Link  Object
     *
     * @return int    $link_id                   //Link ID
     * @return string $link_name                 //Link Name
     * @return string $link_url                  //Link URL
     * @return string $link_memo                 //Link Memo
     * @return int    $category_id               //Category ID
     * @return object $link                      //Link Object
     */
    function modify(
        $link_id,
        $link_name,
        $link_url,
        $link_memo,
        $category_id = null
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('link/error_code.csp');
        cb_trim_check($link_id,
            E_GRN_LINK_LINK_INVALID_ID);             //Link ID
        cb_trim_check($link_name,
            E_GRN_LINK_LINK_NOT_INPUT_NECESSARY);    //Link Name
        cb_trim_check($link_url,
            E_GRN_LINK_LINK_NOT_INPUT_NECESSARY);    //Link URL

        //Get Link Object
        $link = $this->get($link_id, $category_id);
        if ( ! $link) {
            //Link Not Found
            require_once('link/error_code.csp');
            cb_throw_error(E_GRN_LINK_LINK_NOT_FOUND);
        }

        //Set Link Properties
        $link->set(GRN_LINK_PROPERTY_NAME, $link_name);    //Link Name
        $link->set(GRN_LINK_PROPERTY_URL, $link_url);     //Link URL
        $link->set(GRN_LINK_PROPERTY_MEMO, $link_memo);    //Link Memo

        //Set Modifier Information
        $this->_setModifier($link);

        //Return Link Object
        return $link;
    }

    /**
     * Delete Link Object
     *
     * @return int    $link_id                   //Link ID
     * @return int    $category_id               //Category ID
     * @return none
     */
    function delete($link_id, $category_id = null)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('link/error_code.csp');
        cb_trim_check($link_id,
            E_GRN_LINK_LINK_INVALID_ID);             //Link ID

        //Get Link Object
        $link_manager =& $this->_getLinkManager();
        $result = $link_manager->remove($link_id, $category_id);
        if ( ! $result) {
            //Link Not Found
            require_once('link/error_code.csp');
            cb_throw_error(E_GRN_LINK_LINK_NOT_FOUND);
        }

        return;
    }

    /**
     * Move Link Object
     *
     * @return int    $link_id                   //Link ID
     * @return int    $category_id               //Category ID
     * @return object $link                      //Link Object
     */
    function move($link_id, $category_id)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('link/error_code.csp');
        cb_trim_check($link_id,
            E_GRN_LINK_LINK_INVALID_ID);             //Link ID
        cb_trim_check($category_id,
            E_GRN_LINK_LINK_NOT_INPUT_NECESSARY);    //Category ID

        //Get Category Object
        $category_manager =& $this->_getCategoryManager();
        $category = $category_manager->get($category_id);
        if ( ! $category) {
            //Category Not Found
            require_once('link/error_code.csp');
            cb_throw_error(E_GRN_LINK_CATEGORY_NOT_FOUND);
        }

        //Get Link Object
        $link = $this->get($link_id);
        if ( ! $link) {
            //Link Not Found
            require_once('link/error_code.csp');
            cb_throw_error(E_GRN_LINK_LINK_NOT_FOUND);
        }

        //Set Link Properties
        $link->set(GRN_LINK_PROPERTY_CATEGORY, $category);     //Category

        //Set Modifier Information
        $this->_setModifier($link);

        //Return Link Object
        return $link;
    }

    /**
     * Change Link Order
     *
     * @return array  $link_id_list              //Link ID List
     * @return int    $category_id               //Category ID
     * @return none
     */
    function changeOrder($link_id_list, $category_id = null)
    {
        //Change Link Order
        $link_manager =& $this->_getLinkManager();
        $link_manager->changeOrder($link_id_list, $category_id);

        return;
    }

    /**
     * Import Link
     *
     * @param int    $category_id //Category ID
     * @param array  $csv_line    //CSV Line
     * @param object $Link        //Link Object
     */
    function import($category_id, $csv_line)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('link/error_code.csp');
        cb_trim_check($category_id,
            E_GRN_LINK_LINK_NOT_INPUT_NECESSARY);    //Category ID

        //Check Field Count
        if (count($csv_line) < 3) {
            //Not Input necessary
            require_once('link/error_code.csp');
            cb_throw_error(E_GRN_LINK_LINK_NOT_INPUT_NECESSARY);
        }

        //Check Link Type
        if ( ! array_key_exists(3, $csv_line)) {
            $csv_line[3] = 'link';
        } elseif ($csv_line[3] == '') {
            $csv_line[3] = 'link';
        } elseif ($csv_line[3] != 'line' && $csv_line[3] != 'link') {
            //Not Input necessary
            require_once('link/error_code.csp');
            cb_throw_error(E_GRN_LINK_LINK_INVALID_TYPE);
        }

        //Add Link
        $link =& $this->add($csv_line[0], $csv_line[3], $csv_line[1],
            $csv_line[2], $category_id);

        //Return Link
        return $link;
    }

    /**
     * Export Link
     *
     * @param int   $link_id     //Link ID
     * @param int   $category_id //Category ID
     * @param array $csv_line    //CSV Line
     */
    function export($link_id, $category_id = null)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('link/error_code.csp');
        cb_trim_check($link_id, E_GRN_LINK_LINK_INVALID_ID);    //LINK ID

        //Get Link Object
        $link =& $this->get($link_id, $category_id);

        //Create CSV Line
        $csv_line = [];
        $export_properties = [
            GRN_LINK_PROPERTY_NAME, //Link Name
            GRN_LINK_PROPERTY_URL,  //Link URL
            GRN_LINK_PROPERTY_MEMO, //Link Memo
            GRN_LINK_PROPERTY_TYPE, //Link Type (link/line)
        ];
        foreach ($export_properties as $export_property) {
            $csv_line[] = $link->get($export_property);
        }

        //Return CSV Line
        return $csv_line;
    }

    /**
     * Attach SSO Object
     *
     * @return object $link                      //Link Object
     * @return int    $sso_id                    //SSO Method ID
     * @return object $link                      //Link Object
     */
    function attachSSO($link, $sso_method_id)
    {
        //Get SSO Method
        require_once('grn/sso.csp');
        $sso_service = GRN_SSO_Service::getInstance();
        $sso_method =& $sso_service->getSSOMethod($sso_method_id);

        //Attach SSO Object
        $link->set(GRN_LINK_PROPERTY_SSO, $sso_method);

        //Return Link Object
        return $link;
    }

    /**
     * Detach SSO Object
     *
     * @return object $link                      //Link Object
     * @return object $link                      //Link Object
     */
    function detachSSO($link)
    {
        //Detach SSO Object
        $dummy = null;
        $link->set(GRN_LINK_PROPERTY_SSO, $dummy);

        //Return Link Object
        return $link;
    }
}

/**
 * Personal Link Logic Class
 *
 * @package grn.link
 */
class GRN_Link_Personal_Link_Logic extends GRN_Link_Personal_Link_Logic_Base
{
    //Link Manager Instance
    var $_link_manager = null;

    //Category Manager Instance
    var $_category_manager = null;

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {

    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Link_Personal_Link_Logic
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Link Manager
     *
     * @return object $link_manager              //Link Manager
     */
    function _getLinkManager()
    {
        if (is_null($this->_link_manager)) {
            require_once('link/link_manager.csp');
            $this->_link_manager
                = GRN_Link_Personal_Link_Manager::getInstance();
        }

        return $this->_link_manager;
    }


    /**
     * Get Category Manager
     *
     * @return object $category_manager          //Category Manager
     */
    function _getCategoryManager()
    {
        if (is_null($this->_category_manager)) {
            require_once('link/category_manager.csp');
            $this->_category_manager
                = GRN_Link_Personal_Category_Manager::getInstance();
        }

        return $this->_category_manager;
    }


    /**
     * Add Link Object
     *
     * @return string $link_name                 //Link Name
     * @return string $link_type                 //Link Type
     * @return string $link_url                  //Link URL
     * @return string $link_memo                 //Link Memo
     * @return int    $category_id               //Category ID
     * @return object $link                      //Link Object
     */
    function add($link_name, $link_type, $link_url, $link_memo, $category_id)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('link/error_code.csp');
        cb_trim_check($link_type,
            E_GRN_LINK_LINK_NOT_INPUT_NECESSARY);    //Link Type
        if ($link_type == 'link') {
            cb_trim_check($link_name,
                E_GRN_LINK_LINK_NOT_INPUT_NECESSARY);    //Link Name
            cb_trim_check($link_url,
                E_GRN_LINK_LINK_NOT_INPUT_NECESSARY);    //Link URL
        }
        cb_trim_check($category_id,
            E_GRN_LINK_LINK_NOT_INPUT_NECESSARY);    //Category ID

        //Get Login User
        $login_user = $this->_getLoginUser();
        $login_user_id = $login_user->getOID();

        //Get Category Object
        $category_manager = $this->_getCategoryManager();
        $category = $category_manager->get($category_id,
            $login_user_id);
        if ( ! $category) {
            //Category Not Found
            require_once('link/error_code.csp');
            cb_throw_error(E_GRN_LINK_CATEGORY_NOT_FOUND);
        }

        //Create Link Object
        $link_manager = $this->_getLinkManager();
        $link = $link_manager->create($login_user_id, $category_id);

        //Set Link Properties
        $link->set(GRN_LINK_PROPERTY_NAME, $link_name);    //Link Name
        $link->set(GRN_LINK_PROPERTY_TYPE, $link_type);    //Link Type
        $link->set(GRN_LINK_PROPERTY_URL, $link_url);     //Link URL
        $link->set(GRN_LINK_PROPERTY_MEMO, $link_memo);    //Link Memo
        $link->set(GRN_LINK_PROPERTY_CATEGORY, $category);     //Category

        //Set Creator Information
        $this->_setCreator($link);

        //Return Link Object
        return $link;
    }

    /**
     * Modify Link  Object
     *
     * @return int    $link_id                   //Link ID
     * @return string $link_name                 //Link Name
     * @return string $link_url                  //Link URL
     * @return string $link_memo                 //Link Memo
     * @return int    $category_id               //Category ID
     * @return object $link                      //Link Object
     */
    function modify(
        $link_id,
        $link_name,
        $link_url,
        $link_memo,
        $category_id = null
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('link/error_code.csp');
        cb_trim_check($link_id,
            E_GRN_LINK_LINK_INVALID_ID);             //Link ID
        cb_trim_check($link_name,
            E_GRN_LINK_LINK_NOT_INPUT_NECESSARY);    //Link Name
        cb_trim_check($link_url,
            E_GRN_LINK_LINK_NOT_INPUT_NECESSARY);    //Link URL

        //Get Login User
        $login_user = $this->_getLoginUser();
        $login_user_id = $login_user->getOID();

        //Get Link Object
        $link = $this->get($link_id, $category_id);
        if ( ! $link) {
            //Link Not Found
            require_once('link/error_code.csp');
            cb_throw_error(E_GRN_LINK_LINK_NOT_FOUND);
        }

        //Set Link Properties
        $link->set(GRN_LINK_PROPERTY_NAME, $link_name);    //Link Name
        $link->set(GRN_LINK_PROPERTY_URL, $link_url);     //Link URL
        $link->set(GRN_LINK_PROPERTY_MEMO, $link_memo);    //Link Memo

        //Set Modifier Information
        $this->_setModifier($link);

        //Return Link Object
        return $link;
    }

    /**
     * Delete Link Object
     *
     * @return int    $link_id                   //Link ID
     * @return int    $category_id               //Category ID
     * @return none
     */
    function delete($link_id, $category_id = null)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('link/error_code.csp');
        cb_trim_check($link_id,
            E_GRN_LINK_LINK_INVALID_ID);             //Link ID

        //Get Login User
        $login_user = $this->_getLoginUser();
        $login_user_id = $login_user->getOID();

        //Get Link Object
        $link_manager = $this->_getLinkManager();
        $result = $link_manager->remove($link_id, $login_user_id,
            $category_id);
        if ( ! $result) {
            //Link Not Found
            require_once('link/error_code.csp');
            cb_throw_error(E_GRN_LINK_LINK_NOT_FOUND);
        }

        return;
    }

    /**
     * Move Link Object
     *
     * @return int    $link_id                   //Link ID
     * @return int    $category_id               //Category ID
     * @return object $link                      //Link Object
     */
    function move($link_id, $category_id)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('link/error_code.csp');
        cb_trim_check($link_id,
            E_GRN_LINK_LINK_INVALID_ID);             //Link ID
        cb_trim_check($category_id,
            E_GRN_LINK_LINK_NOT_INPUT_NECESSARY);    //Category ID

        //Get Login User
        $login_user = $this->_getLoginUser();
        $login_user_id = $login_user->getOID();

        //Get Category Object
        $category_manager = $this->_getCategoryManager();
        $category = $category_manager->get($category_id,
            $login_user_id);
        if ( ! $category) {
            //Category Not Found
            require_once('link/error_code.csp');
            cb_throw_error(E_GRN_LINK_CATEGORY_NOT_FOUND);
        }

        //Get Link Object
        $link = $this->get($link_id);
        if ( ! $link) {
            //Link Not Found
            require_once('link/error_code.csp');
            cb_throw_error(E_GRN_LINK_LINK_NOT_FOUND);
        }

        //Set Link Properties
        $link->set(GRN_LINK_PROPERTY_CATEGORY, $category);     //Category

        //Set Modifier Information
        $this->_setModifier($link);

        //Return Link Object
        return $link;
    }

    /**
     * Change Link Order
     *
     * @return array  $link_id_list              //Link ID List
     * @return int    $category_id               //Category ID
     * @return none
     */
    function changeOrder($link_id_list, $category_id = null)
    {
        //Get Login User
        $login_user =& $this->_getLoginUser();
        $login_user_id = $login_user->getOID();

        //Change Link Order
        $link_manager =& $this->_getLinkManager();
        $link_manager->changeOrder($link_id_list, $login_user_id, $category_id);

        return;
    }
}


