<?php
/**
 * Link Application Access Manager Base Class
 *
 * @author  Yuichi, Nakamura 2005/5
 * @version 1.0
 * @package grn.link
 */

/** Link Application **/
require_once('link/resources.csp');
require_once('grn/application.csp');

/**
 * Link Category Access Manager Class
 *
 * @package grn.link
 */
class GRN_Link_Category_Access_Manager_Base
{
    /** Category Access Table List **/
    var $_table_list = [];

    /** Category Access Cache List **/
    var $_access_cache_list = [];

    /** Target List **/
    var $_target_type_list
        = [
            GRN_LINK_ACCESS_TARGET_TYPE_DYNAMIC_ROLE,
            GRN_LINK_ACCESS_TARGET_TYPE_STATIC_ROLE,
            GRN_LINK_ACCESS_TARGET_TYPE_GROUP,
            GRN_LINK_ACCESS_TARGET_TYPE_USER,
        ];

    /** Authority List **/
    var $_authority_list = ['browse' => 0];

    /**
     * Constructor
     */
    function __construct()
    {
    }

    /**
     * Get Database
     *
     * @return object $table                     //GRN_Portal_Portal Table Information
     */
    function _getDatabase()
    {
        static $database = null;
        if (is_null($database)) {
            $app_locator = GRN_ApplicationLocator::instance();
            $database = $app_locator->getConnection('link');
        }

        return $database;
    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Link_Category_Access_Manager_Base
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Table Information Object
     *
     * @param  string $target_type //Table Type(user/group/static_role)
     *
     * @return object $table                     //GRN_Link_Category_XXXX Table Information
     */
    function _getTableInfo($target_type)
    {
        $table_list =& $this->_table_list;
        if ( ! array_key_exists($target_type, $table_list)) {
            $app_locator = GRN_ApplicationLocator::instance();
            $table_manager = $app_locator->getTableManager('link');

            switch ($target_type) {
                case GRN_LINK_ACCESS_TARGET_TYPE_USER:
                    $table_list[$target_type]
                        = $table_manager->getTableInfo(GRN_LINK_TABLE_CATEGORY_USER);
                    break;
                case GRN_LINK_ACCESS_TARGET_TYPE_GROUP:
                    $table_list[$target_type]
                        = $table_manager->getTableInfo(GRN_LINK_TABLE_CATEGORY_GROUP);
                    break;
                case GRN_LINK_ACCESS_TARGET_TYPE_STATIC_ROLE:
                    $table_list[$target_type]
                        = $table_manager->getTableInfo(GRN_LINK_TABLE_CATEGORY_STATIC_ROLE);
                    break;
                case GRN_LINK_ACCESS_TARGET_TYPE_DYNAMIC_ROLE:
                    $table_list[$target_type]
                        = $table_manager->getTableInfo(GRN_LINK_TABLE_CATEGORY_DYNAMIC_ROLE);
                    break;
                default:
                    assert('FALSE');
                    break;
            }
        }

        return $table_list[$target_type];
    }

    /**
     * Get Table Information Object
     *
     * @param  string $target_type //Table Type(user/group/static_role)
     *
     * @return string $table_name                //Table Name
     */
    function _getTableName($target_type)
    {
        $table =& $this->_getTableInfo($target_type);

        return $table->getTableName;
    }

    /**
     * Get Access Object
     *
     * @param  string $target_type //Table Type(user/group/static_role)
     * @param  int    $access_id   //Access Object ID
     *
     * @return object $access                    //Access Object
     */
    function getAccess($access_id, $target_type)
    {
        //Get Table Information
        $table_info =& $this->_getTableInfo($target_type);
        $rowset = new CB_RowSet($table_info, 'a');
        if ($target_type == GRN_LINK_MANAGE_TARGET_TYPE_USER) {
            $app_locator = GRN_ApplicationLocator::instance();
            $tm = $app_locator->getTableManager('link');
            $user_table = $tm->getTableInfo('cb_user');
            $on = 'a.col_target = u._id AND u.col_deleted IS NULL';
            $rowset->addJoin($user_table, $on, CB_DATABASE_INNER_JOIN, 'u');
        }
        $condition = $rowset->queryf("(a._id = '@S')", $access_id);
        $rowset->addCondition($condition);
        $row = $rowset->iterate();
        if ( ! $row) {
            {
                $___ret = false;

                return $___ret;
            }
        }

        //Return Access Object
        return $row;
    }

    /**
     * Get Access Object
     *
     * @param  int    $category_id //Category Object ID
     * @param  int    $target_id   //Target Object ID
     * @param  string $target_type //Table Type(user/group/static_role)
     *
     * @return object $access                    //Access Object
     */
    function getAccess2($category_id, $target_id, $target_type)
    {
        //Get Table Information
        $table_info = $this->_getTableInfo($target_type);

        //Create RowSet
        $rowset = new CB_RowSet($table_info, 'a');
        if ($target_type == GRN_LINK_ACCESS_TARGET_TYPE_DYNAMIC_ROLE) {
            //$condition = sprintf('(col_object = %d) AND (col_target = "%s")', $category_id, $target_id);
            $condition
                = $rowset->queryf("(col_object = '@S') AND (col_target = '@S')",
                $category_id, $target_id);
        } elseif ($target_type == GRN_LINK_ACCESS_TARGET_TYPE_USER) {
            $condition
                = $rowset->queryf("(col_object = '@S') AND (col_target = '@S')",
                $category_id, $target_id);

            $app_locator = GRN_ApplicationLocator::instance();
            $tm = $app_locator->getTableManager('link');
            $user_table = $tm->getTableInfo('cb_user');
            $on = 'a.col_target = u._id AND u.col_deleted IS NULL';
            $rowset->addJoin($user_table, $on, CB_DATABASE_INNER_JOIN, 'u');
        } else {
            //$condition = sprintf('(col_object = %d) AND (col_target = %d)', $category_id, $target_id);
            $condition
                = $rowset->queryf("(col_object = '@S') AND (col_target = '@S')",
                $category_id, $target_id);
        }
        $rowset->addCondition($condition);
        $row = $rowset->iterate();
        if ( ! $row) {
            {
                $___ret = false;

                return $___ret;
            }
        }

        //Return Access Object
        return $row;
    }

    /**
     * Get Access Object List By Category ID
     *
     * @param  int    $category_id //Category Object ID
     * @param  string $target_type //Table Type(user/group/static_role/dynamic_role)
     *
     * @return array  $access_list
     */
    function getAccessListByCategoryID($category_id, $target_type)
    {
        $access_list = [];

        //Get Table Information
        $table_info =& $this->_getTableInfo($target_type);

        //Create RowSet
        //$condition = sprintf('(col_object = %d)', $category_id);
        $rowset = new CB_RowSet($table_info, 'a');
        if ($target_type == GRN_LINK_ACCESS_TARGET_TYPE_USER) {
            $app_locator = GRN_ApplicationLocator::instance();
            $tm =& $app_locator->getTableManager('link');
            $user_table =& $tm->getTableInfo('cb_user');
            $on = 'a.col_target = u._id AND u.col_deleted IS NULL';
            $rowset->addJoin($user_table, $on, CB_DATABASE_INNER_JOIN, 'u');
        }
        $condition = $rowset->queryf("(col_object = '@S')", $category_id);
        $rowset->addCondition($condition);
        $rowset->addOrderColumn('_id');
        while ( ! is_null($row = $rowset->iterate())) {
            $access_list[$row->getOID()] = $row;
        }

        //Return Access List
        return $access_list;
    }

    /**
     * Get Default Security Model
     *
     * @param  none
     *
     * @return string $security_model            //Security Model
     */
    function getDefaultSecurityModel()
    {
        //Get Common Security Policy
        global $G_container_app;
        $common_policy = $G_container_app->getInstance('common_policy');
        $policy = $common_policy->getPolicy('grn.link',
            'security_model');


        //Get security_model
        if ($policy == 'revoke') {
            //Revoke
            $security_model = 'revoke';
        } else {
            //Grant
            $security_model = 'grant';
        }

        return $security_model;
    }

    /**
     * Get Security Model
     *
     * @param  CB_Row $category //Category Object
     *
     * @return string $security_model            //Security Model
     */
    function getSecurityModel(& $category)
    {
        //Get Security Model
        if (is_object($category)) {
            $security_model = $category->get(GRN_LINK_PROPERTY_SECURITY_MODEL);
        } else {
            $security_model = $category['col_security_model'];
        }

        if (is_null($security_model)) {
            //Default Security Model
            $security_model = $this->getDefaultSecurityModel();
        } else {
            //Security Model
            $security_model = $security_model ? 'revoke' : 'grant';
        }

        return $security_model;
    }

    /**
     * set Access Cache
     *
     * @param  int   $user_id        //User ID
     * @param  int   $category_id    //Category ID
     * @param  array $authority_list //Authority List
     */
    function setAccessCache($user_id, $category_id, $authority_list)
    {
        //Set Access Cache
        foreach ($authority_list as $authority_id => $authority_value) {
            $this->_access_cache_list[$user_id][$category_id][$authority_id]
                = $authority_value;
        }

        return;
    }

    /**
     * get Access Cache
     *
     * @param  int $user_id     //User ID
     * @param  int $category_id //Category ID
     *
     * @return array  $authority_list            //Authority List
     */
    function getAccessCache($user_id, $category_id)
    {
        //Check Access Cache Availavle
        if (array_key_exists($user_id, $this->_access_cache_list)) {
            if (array_key_exists($category_id,
                $this->_access_cache_list[$user_id])
            ) {
                //Return Access Cache
                return $this->_access_cache_list[$user_id][$category_id];
            }
        }

        return false;
    }

    /**
     * clear Access  Cache
     *
     * @return false
     */
    function clearAccessCache()
    {
        $this->_access_cache_list = [];

        return false;
    }

    /**
     * Create Target Condition
     *
     * @param  array  $target_list //Target List
     * @param  string $target_type //Target Type(user/group/static_role/dynamic_role)
     *
     * @return string $condition                 //Condition String
     */
    function _createTargetCondition($target_list, $target_type)
    {
        $condition = null;

        $app_locator = GRN_ApplicationLocator::instance();
        $dbconn = $app_locator->getConnection('link');

        //Create Condition From Target List
        switch ($target_type) {
            case GRN_LINK_ACCESS_TARGET_TYPE_DYNAMIC_ROLE:
                $condition_list = [];
                if (is_array($target_list) && count($target_list) > 0) {
                    foreach ($target_list as $target_id => $target_value) {
                        if ($target_value == 1) {
                            //$condition_list[] = sprintf('"%s"', $target_id);
                            $condition_list[] = cb_queryf($dbconn, "'@S'",
                                $target_id);
                        }
                    }
                    $condition = sprintf('(col_target IN (%s))',
                        implode(',', $condition_list));
                }
                break;
            default:
                $condition_list = [];
                if (is_array($target_list) && count($target_list) > 0) {
                    foreach ($target_list as $target_id => $target_value) {
                        $condition_list[] = cb_queryf($dbconn, "'@S'",
                            $target_id);
                    }
                    $condition = sprintf('(col_target IN (%s))',
                        implode(',', $condition_list));
                }
                break;
        }

        return $condition;
    }

    /**
     * Create Category Condition
     *
     * @param  array $category_list //Category List
     *
     * @return string $condition                 //Condition String
     */
    function _createCategoryCondition(& $category_list)
    {
        //Create Condition From Category List
        $condition = null;
        $condition_list = [];

        $app_locator = GRN_ApplicationLocator::instance();
        $dbconn = $app_locator->getConnection('link');

        if (is_array($category_list) && count($category_list) > 0) {
            foreach ($category_list as $category_id => $category_value) {
                $condition_list[] = cb_queryf($dbconn, "'@S'", $category_id);
            }
            $condition = sprintf('(col_object IN (%s))',
                implode(',', $condition_list));
        }

        return $condition;
    }

    /**
     * Evaluate Category List
     *
     * @param  string  $category_list     //Category List
     * @param  CB_User $user
     * @param  array   $dynamic_role_list //Dynamic Role List
     * @param  int     $lock_mode         //Lock Mode
     *
     * @return array  $access_list               //Evaluate Result Access List
     */
    function evaluateCategoryList(
        $category_list,
        & $user,
        $dynamic_role_list,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get UUM Instance
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');

        //Get Evaluate Target List
        $targets_list = [];
        $user_id
            = $user->getOID();
        $targets_list[GRN_LINK_ACCESS_TARGET_TYPE_USER]
            = [$user_id => &$user];
        $targets_list[GRN_LINK_ACCESS_TARGET_TYPE_GROUP]
            = $uum->getUserGroups($user_id);
        $targets_list[GRN_LINK_ACCESS_TARGET_TYPE_STATIC_ROLE]
            = $uum->getUserRoles($user_id);;
        $targets_list[GRN_LINK_ACCESS_TARGET_TYPE_DYNAMIC_ROLE]
            = $dynamic_role_list;

        //Initialize Access Cache
        $access_list = [];
        foreach (array_keys($category_list) as $category_id) {
            $security_model
                = $this->getSecurityModel($category_list[$category_id]);
            $auhority = ($security_model == 'grant') ? 0 : 1;
            $authority_list = [];
            foreach (array_keys($this->_authority_list) as $authorty_id) {
                $authority_list = [$authorty_id => $auhority];
            }
            $this->setAccessCache($user_id, $category_id, $authority_list);
            $access_list[$user_id][$category_id] = $authority_list;
        }

        //Check Access
        foreach (array_keys($targets_list) as $targets_type) {
            //Check Target List Count
            if (count($targets_list[$targets_type]) === 0) {
                continue;
            }
            $target_list =& $targets_list[$targets_type];

            //Create Condition
            $condition = null;
            $target_condition = $this->_createTargetCondition($target_list,
                $targets_type);
            $category_condition
                = $this->_createCategoryCondition($category_list);
            $condition = sprintf('%s AND %s', $target_condition,
                $category_condition);

            //Get Table Information
            $table_info = $this->_getTableInfo($targets_type);

            //Create RowSet With Condition
            $rowset = new CB_RowSet($table_info, 'a');
            if ($targets_type == GRN_LINK_ACCESS_TARGET_TYPE_USER) {
                $app_locator = GRN_ApplicationLocator::instance();
                $tm = $app_locator->getTableManager('link');
                $user_table = $tm->getTableInfo('cb_user');
                $on = 'a.col_target = u._id AND u.col_deleted IS NULL';
                $rowset->addJoin($user_table, $on, CB_DATABASE_INNER_JOIN, 'u');
            }
            $rowset->setLock($lock_mode);
            $rowset->addCondition($condition);
            while ( ! is_null($row = $rowset->iterate())) {
                //Get Category Object
                $category = $row->get(GRN_LINK_PROPERTY_OBJECT);
                $category_id = $category->getOID();

                //Get Security Model
                $security_model = $this->getSecurityModel($category);

                //Set Access Cache
                foreach (array_keys($this->_authority_list) as $authority_id) {
                    //Get Authority Value
                    $authority_value = $row->get('authority_' . $authority_id);
                    $prev_authority_value
                        = $access_list[$user_id][$category_id][$authority_id];
                    if ($security_model == 'grant') {
                        $authority_value = ($authority_value == 1) ? 1 : 0;
                        $authority_value = max($prev_authority_value,
                            $authority_value);
                    } else {
                        $authority_value = ($authority_value == 1) ? 0 : 1;
                        $authority_value = min($prev_authority_value,
                            $authority_value);
                    }
                    $access_list[$user_id][$category_id][$authority_id]
                        = $authority_value;
                }
                $this->setAccessCache($user_id, $category_id,
                    $access_list[$user_id][$category_id]);
            }
        }

        //Return Access List
        return $access_list;
    }
}

class GRN_Link_Category_Base extends CB_PersistentBase
{
    var $col_authority_browse = ['type' => 'int'];
    var $col_object
        = [
            'type' => 'relation',
            'to'   => 'grn_link_system_category'
        ];
}

class GRN_Link_Category_User extends GRN_Link_Category_Base
{
    var $col_target = ['type' => 'relation', 'to' => 'cb_user'];
}

class GRN_Link_Category_Group extends GRN_Link_Category_Base
{
    var $col_target = ['type' => 'relation', 'to' => 'cb_group'];
}

class GRN_Link_Category_Dynamic_Role extends GRN_Link_Category_Base
{
    var $col_target = ['type' => 'char', 'length' => 100];
}

class GRN_Link_Category_Static_Role extends GRN_Link_Category_Base
{
    var $col_target = ['type' => 'relation', 'to' => 'cb_role'];
}
