<?php
/**
 * Link Application Category Logic Class
 *
 * @author  Yuichi, Nakamura 2005/4
 * @version 1.0
 * @package grn.link
 */

/** Category Application **/
require_once('fw/i18n.csp');
require_once('link/resources.csp');
require_once('link/category_logic_base.csp');

/**
 * System Category Logic Class
 *
 * @package grn.link
 */
class GRN_Link_System_Category_Logic extends GRN_Link_System_Category_Logic_Base
{
    //Category Manager Instance
    var $_category_manager = null;

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {

    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Link_System_Category_Logic
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Category Manager
     *
     * @return GRN_Link_System_Category_Manager
     */
    function _getCategoryManager()
    {
        if (is_null($this->_category_manager)) {
            require_once('link/category_manager.csp');
            $this->_category_manager
                = GRN_Link_System_Category_Manager::getInstance();
        }

        return $this->_category_manager;
    }

    /**
     * Add Category Object
     *
     * @return string $category_name             //Category Name
     * @return string $category_code             //Category Code
     * @return string $link_memo                 //Category Memo
     * @return int    $parent_category_id        //Parent Category ID
     * @return object $category                  //Category Object
     */
    private function add(
        $category_name,
        $category_code,
        $category_memo,
        $parent_category_id
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('link/error_code.csp');
        cb_trim_check($category_name,
            E_GRN_LINK_CATEGORY_NOT_INPUT_NECESSARY);    //Category Name
        cb_trim_check($category_code,
            E_GRN_LINK_CATEGORY_NOT_INPUT_NECESSARY);    //Category Code
        cb_trim_check($parent_category_id,
            E_GRN_LINK_CATEGORY_NOT_INPUT_NECESSARY);    //Parent Category ID

        //Check Duplicate Category Code
        $this->checkCode($category_code);

        //Get Category Object
        $parent_category =& $this->get($parent_category_id);
        if ( ! $parent_category) {
            //Category Not Found
            require_once('link/error_code.csp');
            cb_throw_error(E_GRN_LINK_CATEGORY_NOT_FOUND);
        }

        //Create Category Object
        $category_manager =& $this->_getCategoryManager();
        $category =& $category_manager->create($parent_category_id);

        //Set Category Properties
        $category->set(GRN_LINK_PROPERTY_NAME,
            $category_name);    //Category Name
        $category->set(GRN_LINK_PROPERTY_FOREIGN_KEY,
            $category_code);    //Category Type
        $category->set(GRN_LINK_PROPERTY_MEMO,
            $category_memo);    //Category Memo
        $category->set(GRN_LINK_PROPERTY_PARENT,
            $parent_category);  //Parent Category

        //Set Creator Information
        $this->_setCreator($category);

        $category->registerNow();

        //Return Category Object
        return $category;
    }

    /**
     * Modify Category Object
     *
     * @return int    $category_id               //Category ID
     * @return string $category_name             //Category Name
     * @return string $category_code             //Category Code
     * @return string $category_memo             //Category Memo
     * @return int    $parent_category_id        //Parent Category ID
     * @return object $Category                  //Category Object
     */
    private function modify(
        $category_id,
        $category_name,
        $category_code,
        $category_memo,
        $parent_category_id = null
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('link/error_code.csp');
        cb_trim_check($category_id,
            E_GRN_LINK_CATEGORY_INVALID_ID);            //Category ID
        cb_trim_check($category_code,
            E_GRN_LINK_CATEGORY_NOT_INPUT_NECESSARY);   //Category Code
        cb_trim_check($category_name,
            E_GRN_LINK_CATEGORY_NOT_INPUT_NECESSARY);   //Category Name

        //Check Duplicate Category Code
        $this->checkCode($category_code, $category_id);

        //Get Category Object
        $category =& $this->get($category_id, $parent_category_id);
        if ( ! $category) {
            //Category Not Found
            require_once('link/error_code.csp');
            cb_throw_error(E_GRN_LINK_CATEGORY_NOT_FOUND);
        }

        //Set Category Properties
        $category->set(GRN_LINK_PROPERTY_NAME,
            $category_name);    //Category Name
        $category->set(GRN_LINK_PROPERTY_FOREIGN_KEY,
            $category_code);    //Category Foreign Key
        $category->set(GRN_LINK_PROPERTY_MEMO,
            $category_memo);    //Category Memo

        //Set Modifier Information
        $this->_setModifier($category);

        $category->updateNow();

        //Return Category Object
        return $category;
    }

    /**
     * Delete Category Object
     *
     * @return int    $category_id               //Category ID
     * @return int    $parent_category_id        //Parent Category ID
     * @return none
     */
    function delete($category_id, $parent_category_id = null)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('link/error_code.csp');
        cb_trim_check($category_id,
            E_GRN_LINK_CATEGORY_INVALID_ID);    //Category ID

        //Get Category Object
        $category_manager =& $this->_getCategoryManager();
        $result = $category_manager->remove($category_id,
            $parent_category_id);
        if ( ! $result) {
            //Category Not Found
            require_once('link/error_code.csp');
            cb_throw_error(E_GRN_LINK_CATEGORY_NOT_FOUND);
        }

        return;
    }

    /**
     * Move Category Object
     *
     * @return int    $category_id               //Category ID
     * @return int    $parent_category_id        //Parent Category ID
     * @return object $category                  //Category Object
     */
    function move($category_id, $parent_category_id)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('link/error_code.csp');
        cb_trim_check($category_id,
            E_GRN_LINK_CATEGORY_INVALID_ID);                    //Category ID
        cb_trim_check($parent_category_id,
            E_GRN_LINK_CATEGORY_NOT_INPUT_NECESSARY);    //Parent Category ID

        //Get Parent Category Object
        $parent_category =& $this->get($parent_category_id);

        //Get Category Object
        $category = $this->get($category_id);

        //Set Categoiry Properties
        $category->set(GRN_LINK_PROPERTY_PARENT,
            $parent_category);    //Parent Category

        //Set Modifier Information
        $this->_setModifier($category);

        $category->updateNow();

        //Return Category Object
        return $category;
    }

    /**
     * Change Category Order
     *
     * @return array  $category_id_list          //Category ID List
     * @return int    $parent_category_id        //Parent Category ID
     * @return none
     */
    function changeOrder($category_id_list, $parent_category_id = null)
    {
        //Change Category Order
        $category_manager =& $this->_getCategoryManager();
        $category_manager->changeOrder($category_id_list, $parent_category_id);

        return;
    }

    /**
     * Check Category Code
     *
     * @param string $category_code //Category Code
     * @param int    $category_id   //Category ID
     * @param bool   $throw_error   //Throw Error Flag
     * @param bool   $result        //Check Result
     */
    function checkCode($category_code, $category_id = null, $throw_error = true)
    {
        //Get Category Object
        $category_manager =& $this->_getCategoryManager();
        $category =& $category_manager->getByForeignKey($category_code);
        if ( ! $category) {
            return true;
        }

        //Check Same Category
        if ($category->getOID() != $category_id) {
            if ($throw_error) {
                //Duplicate Foreign Key
                require_once('link/error_code.csp');
                cb_throw_error(E_GRN_LINK_CATEGORY_DUPLICATE_FOREIGN_KEY);
            }

            return false;
        }

        return true;
    }

    public function addSystemCategory(
        $inLocalNameArray,
        $inForeignKey,
        $inMemo,
        $inParentCategoryId
    ) {
        require_once('link/inspection.csp');
        require_once('link/LinkFacade.csp');
        require_once('link/bean/GrnLinkSystemCategoryLocal.csp');
        $dao = new LinkFacade();


        //--------------  default category name modify -------------
        $defalutName = $inLocalNameArray[CB_I18N_DEFUALT_LANGUAGE_CODE];

        //Add New System Portal
        $category = $this->add($defalutName, $inForeignKey, $inMemo,
            $inParentCategoryId);

        //Check Inspection Message Enabled
        $inspection = GRN_Link_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            //Get Parent Category Object
            $parentCategory = $this->get($inParentCategoryId);

            //Write Inspection Message
            $message_args['cid']
                = $category->getOID();                          //Category ID
            $message_args['pcid']
                = $parentCategory->getOID();                    //Parent Category ID
            $message_args['category_name']
                = $defalutName;                                 //Category Name
            $message_args['parent_category_name']
                = $parentCategory->get(GRN_LINK_PROPERTY_NAME); //Parent Category Name
            $message_args['category_foreign_key']
                = $inForeignKey;                                //Category Foreign key
            $message_args['category_memo']
                = $inMemo;                                      //Category Memo

            //Record Inspection
            $inspection->writeInspectionLog('create', 'system_category',
                $message_args);
        }


        //--------------  category local name modify -------------
        //Add System Portal
        $categoryId = $category->getOID();
        $i18n = CB_I18N::getInstance();
        $availableLanguageArray = $i18n->getAvailableLanguages();
        foreach ($availableLanguageArray as $languageKey) {
            if ((array_key_exists($languageKey, $inLocalNameArray))
                && strlen(cb_trim($inLocalNameArray[$languageKey])) > 0
            ) {
                $localName = cb_trim($inLocalNameArray[$languageKey]);

                $dataObj = [];
                $dataObj['messageTypeAdd'] = 'system_category_local_add';
                $systemCategoryLocal = new GrnLinkSystemCategoryLocal();
                $systemCategoryLocal->setParentId($categoryId);
                $systemCategoryLocal->setLanguageCode($languageKey);
                $systemCategoryLocal->setName($localName);

                $dao->insertSystemCategoryLocal($dataObj, $systemCategoryLocal);
            }
        }

        return true;
    }

    public function modifySystemCategory(
        $inCategoryId,
        $inLocalNameArray,
        $inForeignKey,
        $inMemo,
        $inParentCategoryId
    ) {
        require_once('link/inspection.csp');
        require_once('link/LinkFacade.csp');
        require_once('link/bean/GrnLinkSystemCategoryLocal.csp');
        $dao = new LinkFacade();


        //--------------  default category name modify -------------
        $defalutName = $inLocalNameArray[CB_I18N_DEFUALT_LANGUAGE_CODE];
        $category = $this->modify($inCategoryId, $defalutName, $inForeignKey,
            $inMemo, $inParentCategoryId);

        //Check Inspection Message Enabled
        $inspection = GRN_Link_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            //Get Parent Category Object
            $parentCategory = $this->get($inParentCategoryId);

            //Write Inspection Message
            $message_args['cid']
                = $inCategoryId;                                //Category ID
            $message_args['pcid']
                = $inParentCategoryId;                          //Parent Category ID
            $message_args['category_name']
                = $defalutName;                                 //Category Name
            $message_args['parent_category_name']
                = $parentCategory->get(GRN_LINK_PROPERTY_NAME); //Parent Category Name
            $message_args['category_foreign_key']
                = $inForeignKey;                                //Category Foreign key
            $message_args['category_memo']
                = $inMemo;                                      //Category Memo

            //Record Inspection
            $inspection->writeInspectionLog('modify', 'system_category',
                $message_args);
        }


        //--------------  category local name modify -------------
        $i18n = CB_I18N::getInstance();
        $availableLanguageArray = $i18n->getAvailableLanguages();
        foreach ($availableLanguageArray as $languageKey) {
            if ((array_key_exists($languageKey, $inLocalNameArray))
                && strlen(cb_trim($inLocalNameArray[$languageKey])) > 0
            ) {
                $localName = cb_trim($inLocalNameArray[$languageKey]);

                $dataObj = [];
                $systemCategoryLocal = new GrnLinkSystemCategoryLocal();
                $systemCategoryLocal->setParentId($inCategoryId);
                $systemCategoryLocal->setLanguageCode($languageKey);
                $systemCategoryLocal->setName($localName);

                $dao->updateSystemCategoryLocal($dataObj, $systemCategoryLocal);
            } else {
                $dataObj = [];
                $systemCategoryLocal = new GrnLinkSystemCategoryLocal();
                $systemCategoryLocal->setParentId($inCategoryId);
                $systemCategoryLocal->setLanguageCode($languageKey);

                $dao->deleteSystemCategoryLocal($dataObj, $systemCategoryLocal);
            }
        }

        return true;
    }
}

/**
 * Personal Category Logic Class
 *
 * @package grn.link
 */
class GRN_Link_Personal_Category_Logic
    extends GRN_Link_Personal_Category_Logic_Base
{
    //Category Manager Instance
    var $_category_manager = null;

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {

    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Link_Personal_Category_Logic
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Category Manager
     *
     * @return GRN_Link_Personal_Category_Manager
     */
    function _getCategoryManager()
    {
        if (is_null($this->_category_manager)) {
            require_once('link/category_manager.csp');
            $this->_category_manager
                = GRN_Link_Personal_Category_Manager::getInstance();
        }

        return $this->_category_manager;
    }

    /**
     * Add Category Object
     *
     * @return string $category_name             //Category Name
     * @return string $category_code             //Category Code
     * @return string $link_memo                 //Category Memo
     * @return int    $parent_category_id        //Parent Category ID
     * @return object $category                  //Category Object
     */
    function add(
        $category_name,
        $category_code,
        $category_memo,
        $parent_category_id
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('link/error_code.csp');
        cb_trim_check($category_name,
            E_GRN_LINK_CATEGORY_NOT_INPUT_NECESSARY);    //Category Name
        cb_trim_check($category_code,
            E_GRN_LINK_CATEGORY_NOT_INPUT_NECESSARY);    //Category Code
        cb_trim_check($parent_category_id,
            E_GRN_LINK_CATEGORY_NOT_INPUT_NECESSARY);    //Parent Category ID

        //Check Duplicate Category Code
        $this->checkCode($category_code);

        //Get Category Object
        $parent_category =& $this->get($parent_category_id);
        if ( ! $parent_category) {
            //Category Not Found
            require_once('link/error_code.csp');
            cb_throw_error(E_GRN_LINK_CATEGORY_NOT_FOUND);
        }

        //Get Login User
        $login_user = $this->_getLoginUser();
        $login_user_id = $login_user->getOID();

        //Create Category Object
        $category_manager = $this->_getCategoryManager();
        $category = $category_manager->create($login_user_id,
            $parent_category_id);

        //Set Category Properties
        $category->set(GRN_LINK_PROPERTY_NAME,
            $category_name);    //Category Name
        $category->set(GRN_LINK_PROPERTY_FOREIGN_KEY,
            $category_code);    //Category Type
        $category->set(GRN_LINK_PROPERTY_MEMO,
            $category_memo);    //Category Memo
        $category->set(GRN_LINK_PROPERTY_PARENT,
            $parent_category);  //Parent Category

        //Set Creator Information
        $this->_setCreator($category);

        $category->registerNow();

        //Return Category Object
        return $category;
    }

    /**
     * Modify Category Object
     *
     * @return int    $category_id               //Category ID
     * @return string $category_name             //Category Name
     * @return string $category_code             //Category Code
     * @return string $category_memo             //Category Memo
     * @return int    $parent_category_id        //Parent Category ID
     * @return object $category                  //Category Object
     */
    function modify(
        $category_id,
        $category_name,
        $category_code,
        $category_memo,
        $parent_category_id = null
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('link/error_code.csp');
        cb_trim_check($category_id,
            E_GRN_LINK_CATEGORY_INVALID_ID);            //Category ID
        cb_trim_check($category_code,
            E_GRN_LINK_CATEGORY_NOT_INPUT_NECESSARY);    //Category Code
        cb_trim_check($category_name,
            E_GRN_LINK_CATEGORY_NOT_INPUT_NECESSARY);   //Category Name

        //Check Duplicate Category Code
        $this->checkCode($category_code, $category_id);

        //Get Category Object
        $category = $this->get($category_id, $parent_category_id);
        if ( ! $category) {
            //Category Not Found
            require_once('link/error_code.csp');
            cb_throw_error(E_GRN_LINK_CATEGORY_NOT_FOUND);
        }

        //Set Category Properties
        $category->set(GRN_LINK_PROPERTY_NAME,
            $category_name);    //Category Name
        $category->set(GRN_LINK_PROPERTY_FOREIGN_KEY,
            $category_code);    //Category Code
        $category->set(GRN_LINK_PROPERTY_MEMO,
            $category_memo);    //Category Memo

        //Set Modifier Information
        $this->_setModifier($category);

        $category->updateNow();

        //Return Category Object
        return $category;
    }

    /**
     * Delete Category Object
     *
     * @return int    $category_id               //Category ID
     * @return int    $parent_category_id        //Parent Category ID
     * @return none
     */
    function delete($category_id, $parent_category_id = null)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('link/error_code.csp');
        cb_trim_check($category_id,
            E_GRN_LINK_CATEGORY_INVALID_ID);    //Category ID

        //Get Login User
        $login_user =& $this->_getLoginUser();
        $login_user_id = $login_user->getOID();

        //Get Category Object
        $category_manager =& $this->_getCategoryManager();
        $result = $category_manager->remove($category_id,
            $login_user_id, $parent_category_id);
        if ( ! $result) {
            //Category Not Found
            require_once('link/error_code.csp');
            cb_throw_error(E_GRN_LINK_CATEGORY_NOT_FOUND);
        }

        return;
    }

    /**
     * Move Category Object
     *
     * @return int    $category_id               //Category ID
     * @return int    $parent_category_id        //Parent Category ID
     * @return object $category                  //Category Object
     */
    function move($category_id, $parent_category_id)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('link/error_code.csp');
        cb_trim_check($category_id,
            E_GRN_LINK_CATEGORY_INVALID_ID);             //Category ID
        cb_trim_check($category_id,
            E_GRN_LINK_CATEGORY_NOT_INPUT_NECESSARY);    //Parent Category ID

        //Get Parent Category Object
        $parent_category =& $this->get($parent_category_id);

        //Get Category Object
        $category = $this->get($category_id);

        //Set Categoiry Properties
        $category->set(GRN_LINK_PROPERTY_PARENT,
            $parent_category);    //Parent Category

        //Set Modifier Information
        $this->_setModifier($category);

        $category->updateNow();

        //Return Category Object
        return $category;
    }

    /**
     * Change Category Order
     *
     * @return array  $category_id_list          //Category ID List
     * @return int    $parent_category_id        //Parent Category ID
     * @return none
     */
    function changeOrder($category_id_list, $parent_category_id = null)
    {
        //Get Login User
        $login_user =& $this->_getLoginUser();
        $login_user_id = $login_user->getOID();

        //Change Category Order
        $category_manager =& $this->_getCategoryManager();
        $category_manager->changeOrder($category_id_list, $login_user_id,
            $parent_category_id);

        return;
    }

    /**
     * Check Category Code
     *
     * @param string $category_code //Category Code
     * @param int    $category_id   //Category ID
     * @param bool   $throw_error   //Throw Error Flag
     * @param bool   $result        //Check Result
     */
    function checkCode($category_code, $category_id = null, $throw_error = true)
    {
        //Get Login User
        $login_user = $this->_getLoginUser();
        $login_user_id = $login_user->getOID();

        //Get Category Object
        $category_manager = $this->_getCategoryManager();
        $category = $category_manager->getByForeignKey($category_code,
            $login_user_id);
        if ( ! $category) {
            return true;
        }

        //Check Same Category
        if ($category->getOID() != $category_id) {
            if ($throw_error) {
                //Duplicate Foreign Key
                require_once('link/error_code.csp');
                cb_throw_error(E_GRN_LINK_CATEGORY_DUPLICATE_FOREIGN_KEY);
            }

            return false;
        }

        return true;
    }
}


