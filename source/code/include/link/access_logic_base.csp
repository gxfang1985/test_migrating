<?php
/**
 * Link Application Access Logic Base Class
 *
 * @author  Yuichi, Nakamura 2005/4
 * @version 1.0
 * @package grn.link
 */

/** Link Application **/
require_once('link/table.csp');
require_once('link/resources.csp');

/**
 * Link Category Access Logic Base Class
 *
 * @package grn.link
 */
class GRN_Link_Category_Access_Logic_Base
{
    //Category Information Logic Base Instance
    var $_category_information_logic_base = null;

    //Category Access Manager Instance
    var $_category_access_manager_base = null;

    //Target Type List
    var $_target_type_list
        = [
            GRN_LINK_ACCESS_TARGET_TYPE_USER,
            GRN_LINK_ACCESS_TARGET_TYPE_GROUP,
            GRN_LINK_ACCESS_TARGET_TYPE_STATIC_ROLE,
            GRN_LINK_ACCESS_TARGET_TYPE_DYNAMIC_ROLE,
        ];

    /**
     * Constructor
     */
    function __construct()
    {
    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Link_Category_Access_Logic_Base
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Category Access Manager Base
     *
     * @return GRN_Link_Category_Access_Manager_Base $category_access_manager_base   //Category Access Manager_Base
     */
    function _getCategoryAccessManagerBase()
    {
        if (is_null($this->_category_access_manager_base)) {
            require_once('link/access_manager_base.csp');
            $this->_category_access_manager_base
                = GRN_Link_Category_Access_Manager_Base::getInstance();
        }

        return $this->_category_access_manager_base;
    }

    /**
     * Get Category Information Logic Base
     *
     * @return object $category_information_logic_base       //Category Information Logic Base
     */
    function _getCategoryInformationLogicBase()
    {
        if (is_null($this->_category_information_logic_base)) {
            require_once('link/category_information_logic_base.csp');
            $this->_category_information_logic_base
                = GRN_Link_System_Category_Information_Logic_Base::getInstance();
        }

        return $this->_category_information_logic_base;
    }

    /**
     * Get Access Object
     *
     * @param  string $target_type //Table Type(user/group/static_role)
     * @param  int    $access_id   //Access Object ID
     *
     * @return object $access                    //Access Object
     */
    function getAccess($access_id, $target_type)
    {
        //Check Argument
        require_once('link/error_code.csp');
        require_once('fw/string_util.csp');
        cb_trim_check($access_id,
            E_GRN_LINK_ACCESS_INVALID_ID);      //Access ID
        cb_trim_check($target_type,
            E_GRN_LINK_ACCESS_INVALID_TARGET);  //Access Target

        //Check Target Type
        if ( ! in_array($target_type, $this->_target_type_list)) {
            //Invalid Target Type
            require_once('link/error_code.csp');
            cb_throw_error(E_GRN_LINK_ACCESS_INVALID_TARGET);
        }

        //Get Access Object
        $manager = $this->_getCategoryAccessManagerBase();
        $access = $manager->getAccess($access_id, $target_type);
        if ( ! $access) {
            {
                $___ret = false;

                return $___ret;
            }
        }

        //Return Access Object
        return $access;
    }

    /**
     * Get Access Object
     *
     * @param         $category_id
     * @param         $target_id
     * @param  string $target_type //Table Type(user/group/static_role)
     *
     * @return object $access                    //Access Object
     */
    function getAccess2($category_id, $target_id, $target_type)
    {
        //Check Argument
        require_once('link/error_code.csp');
        require_once('fw/string_util.csp');
        cb_trim_check($category_id,
            E_GRN_LINK_CATEGORY_INVALID_ID);    //Category ID
        cb_trim_check($target_id,
            E_GRN_LINK_ACCESS_INVALID_TARGET);  //Access Target ID
        cb_trim_check($target_type,
            E_GRN_LINK_ACCESS_INVALID_TARGET);  //Access Target

        //Check Target Type
        if ( ! in_array($target_type, $this->_target_type_list)) {
            //Invalid Target Type
            require_once('link/error_code.csp');
            cb_throw_error(E_GRN_LINK_ACCESS_INVALID_TARGET);
        }

        //Get Access Object
        $manager = $this->_getCategoryAccessManagerBase();
        $access = $manager->getAccess2($category_id, $target_id, $target_type);
        if ( ! $access) {
            {
                $___ret = false;

                return $___ret;
            }
        }

        //Return Access Object
        return $access;
    }

    /**
     * Get Access Object List By Category ID
     *
     * @param  int    $category_id //Category Object ID
     * @param  string $target_type //Table Type(user/group/static_role/dynamic_role)
     *
     * @return array  $access_list
     */
    function getAccessListByCategoryID($category_id, $target_type)
    {
        //Check Argument
        require_once('link/error_code.csp');
        require_once('fw/string_util.csp');
        cb_trim_check($category_id,
            E_GRN_LINK_CATEGORY_INVALID_ID);    //Category ID
        cb_trim_check($target_type,
            E_GRN_LINK_ACCESS_INVALID_TARGET);  //Access Target

        //Get Access Object
        $manager =& $this->_getCategoryAccessManagerBase();
        $access_list = $manager->getAccessListByCategoryID($category_id,
            $target_type);
        if ( ! $access_list) {
            $access_list = [];

            return $access_list;
        }

        //Return Access List
        return $access_list;
    }

    /**
     * Get Default Security Model
     *
     * @param  none
     *
     * @return string $security_model            //Security Model
     */
    function getDefaultSecurityModel()
    {
        //Get Default Security Model
        $manager =& $this->_getCategoryAccessManagerBase();

        return $manager->getDefaultSecurityModel();
    }

    /**
     * Get Security Model
     *
     * @param  int $category_id //Category ID
     * @param  int $lock_mode   //Lock Mode
     *
     * @return string $security_model            //Security Model
     */
    function getSecurityModel(
        $category_id,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Check Argument
        require_once('link/error_code.csp');
        require_once('fw/string_util.csp');
        cb_trim_check($category_id,
            E_GRN_LINK_CATEGORY_INVALID_ID);      //Category ID

        //Get Category Object
        $category_information_logic_base
            =& $this->_getCategoryInformationLogicBase();
        $category =& $category_information_logic_base->get($category_id, null,
            $lock_mode);

        //Get Security Model
        $manager =& $this->_getCategoryAccessManagerBase();

        return $manager->getSecurityModel($category);
    }

    /**
     * Evaluate Category List
     *
     * @param  int $category_id //Category ID
     * @param  int $lock_mode   //Lock Mode
     *
     * @return array  $access_list               //Evaluate Result Access List
     */
    function evaluateCategory(
        $category_id,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get UUM Instance
        global $G_container_base;
        /** @var GRN_Uum $uum */
        $uum = $G_container_base->getInstance('uum');

        //Get Login User
        $login_user = $uum->getLoginUser();
        $login_user_id = $login_user->getOID();

        //Get Dynamic Role
        $dynamic_role_list = $uum->listGrantedRoles();

        //Get Category Tree
        $category_information_logic_base
            = $this->_getCategoryInformationLogicBase();
        $category_tree_list
            = $category_information_logic_base->getTreeList($category_id, true,
            true, $lock_mode);

        //Get Access Manager
        $manager = $this->_getCategoryAccessManagerBase();

        //Check Access Cache
        $user_access_list = [];
        $evaluate_category_list = [];
        foreach (array_keys($category_tree_list) as $category_tree_id) {
            $access = $manager->getAccessCache($login_user_id,
                $category_tree_id);

            if ( ! $access) {
                $evaluate_category_list[$category_tree_id]
                    =& $category_tree_list[$category_tree_id];
            } else {
                $user_access_list[$category_tree_id] = $access;
            }
        }

        //Evaluate No Cached Category List
        if (count($evaluate_category_list) !== 0) {
            $evaluate_access_list
                = $manager->evaluateCategoryList($evaluate_category_list,
                $login_user, $dynamic_role_list);
            $user_access_list = $user_access_list
                                + $evaluate_access_list[$login_user_id];
        }

        //Check Access Right
        foreach (array_keys($category_tree_list) as $category_tree_id) {
            foreach ($user_access_list[$category_tree_id] as $authority) {
                if ($authority != 1) {
                    return false;
                }
            }
        }

        return true;
    }
}


