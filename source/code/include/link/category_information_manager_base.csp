<?php
/**
 * Link Application Category Information Manager Base Class
 *
 * @author  Yuichi, Nakamura 2005/5
 * @version 1.0
 * @package grn.link
 */

/** Link Application **/
require_once('link/resources.csp');
require_once('grn/application.csp');

/**
 * System Category Information Manager Class
 *
 * @package grn.link
 */
class GRN_Link_System_Category_Information_Manager_Base
{
    /** Table Name **/
    var $_table_name = null;

    /** Category List **/
    var $_list = [];

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
        $this->_table_name = 'tab_grn_link_system_category';
    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Link_System_Category_Information_Manager_Base
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Database
     *
     * @return object $table                     //GRN_Link_System_Link Table Information
     */
    function _getDatabase()
    {
        static $database = null;
        if (is_null($database)) {
            $app_locator = GRN_ApplicationLocator::instance();
            $database = $app_locator->getConnection('link');
        }

        return $database;
    }

    /**
     * Get Column List
     *
     * @return array $table                     //GRN_Link_System_Link Table Information
     */
    function &_getColumnList()
    {
        static $column_name_list = null;
        if (is_null($column_name_list)) {
            require_once('link/table.csp');
            $column_list = get_class_vars(GRN_LINK_TABLE_SYSTEM_CATEGORY);
            foreach (array_keys($column_list) as $column_name) {
                if (strpos($column_name, 'col_') === 0
                    && strpos($column_name, 'col_reserve') !== 0
                ) {
                    $column_name_list[] = $column_name;
                }
            }
            $column_name_list[] = '_id';
        }

        return $column_name_list;
    }

    /**
     * @param string|null $alias
     *
     * @return array
     */
    function &_getColumnListAlias($alias)
    {
        $column_list = $this->_getColumnList();

        if (is_null($alias) || $alias == '') {
            return $column_list;
        }

        foreach (array_keys($column_list) as $key) {
            $column_list[$key] = $alias . '.' . $column_list[$key];
        }

        return $column_list;
    }

    function _replaceUserColumn(
        $column_list,
        $column,
        $user_table,
        $column_alias = null
    ) {
        if (is_null($column_alias)) {
            $column_alias = $column;
        }

        $key = array_search($column, $column_list);
        if ($key !== false) {
            $column_list[$key]
                = sprintf('CASE WHEN %s.col_deleted IS NULL THEN %s END AS %s',
                $user_table, $column, $column_alias);
        }

        return $column_list;
    }

    function _getUserJoin($column, $alias)
    {
        return sprintf('LEFT JOIN tab_cb_user AS %s ON %s.%s = %s._id', $alias,
            $this->_table_name, $column, $alias);
    }

    /**
     * Get Category
     *
     * @param  int $category_id        //Category ID
     * @param  int $parent_category_id //Parent Category ID(null:All Category)
     * @param  int $lock_mode          //Lock Mode
     *
     * @return object $category                  //Category Object
     */
    function get(
        $category_id,
        $parent_category_id = null,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Check Root Category
        if ($category_id == GRN_LINK_CATEGORY_ROOT_ID || $category_id == 0) {
            //Get Root Category
            $category_list =& $this->getList(null, $lock_mode, false);

            return $category_list[GRN_LINK_CATEGORY_ROOT_ID];
        }

        //Get Category List
        $category_list =& $this->getList($parent_category_id, $lock_mode,
            false);

        //Get Category
        if ( ! array_key_exists($category_id, $category_list)) {
            {
                $___ret = false;

                return $___ret;
            }
        }

        //Return Category Object
        return $category_list[$category_id];
    }

    /**
     * Get Category List
     *
     * @param  int  $parent_category_id //Parent Category ID(null:All Category)
     * @param  int  $lock_mode          //Lock Mode
     * @param  bool $refresh            //Refresh Cache
     *
     * @return array  $resultList             //Category Object List
     */
    function &getList(
        $parent_category_id = null,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $refresh = false
    ) {
        $resultList = [];

        //Check Arguments
        $parent_category_id = is_null($parent_category_id) ? 0
            : $parent_category_id;

        //Get Category List From Cache
        $cached = false;
        if ( ! $refresh) {
            if (array_key_exists($parent_category_id, $this->_list)) {
                if (is_array($this->_list[$parent_category_id])) {
                    $resultList =& $this->_list[$parent_category_id];
                    $cached = true;
                }
            }
        }

        //Get Category List From Database
        if ( ! $cached || $refresh) {
            //Get Category
            require_once('link/LinkFacade.csp');
            require_once('fw/i18n.csp');

            $i18n = CB_I18N::getInstance();

            $linkDAO = new LinkFacade();
            $dataObj = [];
            $dataObj['lock'] = $lock_mode;
            $dataObj['language'] = $i18n->getCurrentLanguage();
            $dataObj['parentId'] = ($parent_category_id == 0) ? null
                : $parent_category_id;

            $categoryList = $linkDAO->getSystemCategoryList($dataObj);

            foreach ($categoryList as $category) {
                $this->_list[$parent_category_id][$category->getId()]
                    = $category->convertArray();
            }

            if (count($categoryList) > 0) {
                $resultList =& $this->_list[$parent_category_id];
            }
        }

        //Return Category List
        return $resultList;
    }

    /**
     * Search Category
     *
     * @param  array $search_category_list //Category ID List
     * @param  array $target_list          //Search Target List
     * @param  array $condition_list       //Search Condition List
     * @param  int   $offset
     * @param  int   $limit
     * @param  int   $term                 //Search Term
     * @param  int   $lock_mode            //Lock Mode
     *
     * @return array  $resultList                //Hit Category List
     */
    function search(
        $search_category_list,
        $target_list,
        $condition_list,
        $offset = 0,
        $limit = 5,
        $term = 0,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $resultList = [];

        //Create Category Condition
        $categoryIdArray = [];
        if (is_array($search_category_list)
            && count($search_category_list) > 0
        ) {
            foreach (
                $search_category_list as $search_category_key =>
                $search_category_value
            ) {
                $categoryIdArray[] = $search_category_key;
            }
        }

        //Create Search Condition
        $categoryNameArray = [];
        foreach ($target_list as $targetName) {
            foreach ($condition_list as $conditionItem) {
                if ($targetName == 'category') {
                    $categoryNameArray[] = $conditionItem;
                }
            }
        }

        require_once('link/LinkFacade.csp');
        require_once('fw/i18n.csp');

        $i18n = CB_I18N::getInstance();

        $linkDAO = new LinkFacade();
        $dataObj = [];
        $dataObj['lock'] = $lock_mode;
        $dataObj['language'] = $i18n->getCurrentLanguage();
        $dataObj['offset'] = $offset;
        $dataObj['limit'] = $limit;

        $categoryList
            = $linkDAO->getSystemCategoryListByIds_Names_Mtime($dataObj,
            $categoryIdArray, $categoryNameArray, $term);

        foreach ($categoryList as $category) {
            $resultList[$category->getId()] = $category->convertArray();
        }

        //return Hit Category List
        return $resultList;
    }

    /**
     * Search Category
     *
     * @param  array $search_category_list //Category ID List
     * @param  array $target_list          //Search Target List
     * @param  array $condition_list       //Search Condition List
     * @param  int   $term                 //Search Term
     * @param  int   $lock_mode            //Lock Mode
     *
     * @return int    $resultCount               //Hit Category Count
     */
    function searchCount(
        $search_category_list,
        $target_list,
        $condition_list,
        $term = 0,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Create Category Condition
        $categoryIdArray = [];
        if (is_array($search_category_list)
            && count($search_category_list) > 0
        ) {
            foreach (
                $search_category_list as $search_category_key =>
                $search_category_value
            ) {
                $categoryIdArray[] = $search_category_key;
            }
        }

        //Create Search Condition
        $categoryNameArray = [];
        foreach ($target_list as $targetName) {
            foreach ($condition_list as $conditionItem) {
                if ($targetName == 'category') {
                    $categoryNameArray[] = $conditionItem;
                }
            }
        }

        require_once('link/LinkFacade.csp');
        require_once('fw/i18n.csp');

        $i18n = CB_I18N::getInstance();

        $linkDAO = new LinkFacade();
        $dataObj = [];
        $dataObj['lock'] = $lock_mode;
        $dataObj['language'] = $i18n->getCurrentLanguage();

        $resultCount
            = $linkDAO->getCountSystemCategoryByIds_Names_Mtime($dataObj,
            $categoryIdArray, $categoryNameArray, $term);

        return $resultCount;
    }

    /**
     * Get Parent Category
     *
     * @param  int $category_id //Category ID
     * @param  int $lock_mode   //Lock Mode
     *
     * @return object $parent_category           //Parent Category Object
     */
    function &getParent($category_id, $lock_mode = CB_DATABASE_DEFAULT_LOCK)
    {
        //Get Category
        $category =& $this->get($category_id, null, $lock_mode);
        if ( ! $category) {
            {
                $___ret = false;

                return $___ret;
            }
        }

        //Check Parent Category
        $parent_category_id = $category['col_parent'];
        if ( ! $parent_category_id) {
            {
                $___ret = false;

                return $___ret;
            }
        }

        //Return Parent Category Object
        $ret =& $this->get($category['col_parent'], null, $lock_mode);

        return $ret;
    }

    /**
     * Get Child Category
     *
     * @param  int $category_id //Category ID
     * @param  int $lock_mode   //Lock Mode
     *
     * @return array  $child_category_list       //Child Category List
     */
    function getChildList($category_id, $lock_mode = CB_DATABASE_DEFAULT_LOCK)
    {
        //Get Child Category List
        return $this->getList($category_id, $lock_mode, false);
    }

    /**
     * Get ALL Child Category
     *
     * @param array $search_category_list //Category ID
     * @param array $outChildCategoryList //Child Category List
     * @param int   $lock_mode            //Lock Mode
     */
    function getALLChildList(
        $search_category_list,
        & $outChildCategoryList,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        if (count($search_category_list) === 0) {
            return;
        }

        //Create Category Condition
        $categoryIdArray = [];
        if (is_array($search_category_list)
            && count($search_category_list) > 0
        ) {
            foreach (
                $search_category_list as $search_category_key =>
                $search_category_value
            ) {
                $categoryIdArray[] = $search_category_key;
            }
        }

        require_once('link/LinkFacade.csp');
        require_once('fw/i18n.csp');

        $i18n = CB_I18N::getInstance();

        $linkDAO = new LinkFacade();
        $dataObj = [];
        $dataObj['lock'] = $lock_mode;
        $dataObj['language'] = $i18n->getCurrentLanguage();

        $categoryList = $linkDAO->getChildSystemCategoryListByIds($dataObj,
            $categoryIdArray);

        $searchChildCategoryIdArray = [];
        foreach ($categoryList as $category) {
            $outChildCategoryList[$category->getId()]
                = $category->convertArray();
            $searchChildCategoryIdArray[] = $category->getId();

        }

        //Recursive call
        $this->getALLChildList($searchChildCategoryIdArray,
            $outChildCategoryList);

        return;
    }

    /**
     * Get Child Count
     *
     * @param  int $category_id //Category ID
     * @param  int $lock_mode   //Lock Mode
     *
     * @return int    $child_category_count      //Child Category Count
     */
    function getChildCount($category_id, $lock_mode = CB_DATABASE_DEFAULT_LOCK)
    {
        //Get Category List
        $category_list = $this->getList($category_id, $lock_mode, false);

        //Return Child Category Count
        return count($category_list);
    }

    /**
     * Get Category Tree List
     *
     * @param  int  $last_category_id //Last Category ID
     * @param  bool $include_root     //Include Root Flag
     * @param  bool $include_last     //Include Last Category Flag
     * @param  int  $lock_mode        //Lock Mode
     *
     * @return array  $tree_category_list        //Tree Category List
     */
    function getTreeList(
        $last_category_id,
        $include_root = true,
        $include_last = true,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $tree_list = [];

        //Check Include Root Flag
        if ($include_root && $last_category_id == GRN_LINK_CATEGORY_ROOT_ID) {
            //Get First Category
            $category = $this->get($last_category_id, null, $lock_mode);
            if ( ! $category) {
                return false;
            }
            $tree_list[$last_category_id] =& $category;

            return $tree_list;
        }

        //Check Include Last Flag
        if ($include_last) {
            //Get First Category
            $category =& $this->get($last_category_id, null, $lock_mode);
            if ( ! $category) {
                return false;
            }
            $tree_list[$last_category_id] =& $category;
        }

        //Get Tree List
        while (false != ($parent_category =& $this->getParent($last_category_id,
                $lock_mode))) {
            $parent_category_id = $parent_category['_id'];
            if ($parent_category_id == GRN_LINK_CATEGORY_ROOT_ID
                && ! $include_root
            ) {
                break;
            }
            $tree_list[$parent_category_id] =& $parent_category;
            $last_category_id = $parent_category_id;
        }

        //Reverse Tree List
        $reverse_tree_list = array_reverse($tree_list, true);

        //Return Category Tree List
        return $reverse_tree_list;
    }

    /**
     * Reflesh Cache
     *
     * @param int  $category_id //Category ID(null:ALL Category)
     * @param bool $recursive   //Recursive Flag
     * @param none
     */
    function refreshCache($category_id = null, $recursive = false)
    {
        //Refresh Cache With User ID
        if (is_null($category_id)) {
            if ($recursive) {
                unset($this->_list);
                $this->_list = [];
            } else {
                unset($this->_list[0]);
            }

            return;
        } else {
            if ($recursive) {
                $sub_category =& $this->_list[$category_id];
                if (is_array($sub_category)) {
                    foreach (array_keys($sub_category) as $sub_category_id) {
                        $this->refreshCache($sub_category_id, true);
                    }
                }
            }
            unset($this->_list[$category_id]);
            unset($this->_list[0][$category_id]);
        }

        return;
    }
}

/**
 * Personal Category Information Manager Base Class
 *
 * @package grn.link
 */
class GRN_Link_Personal_Category_Information_Manager_Base
{
    /** Table Name **/
    var $_table_name = null;

    /** Category List **/
    var $_list = [];

    /** Search Category List **/
    var $_search_list = [];

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
        $this->_table_name = 'tab_grn_link_personal_category';
    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Link_Personal_Category_Information_Manager_Base
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Database
     *
     * @return CB_DatabaseConnection
     */
    function _getDatabase()
    {
        static $database = null;
        if (is_null($database)) {
            $app_locator = GRN_ApplicationLocator::instance();
            $database = $app_locator->getConnection('link');
        }

        return $database;
    }

    /**
     * Get Column List
     *
     * @return object $table                     //GRN_Link_System_Link Table Information
     */
    function &_getColumnList()
    {
        static $column_name_list = null;
        if (is_null($column_name_list)) {
            require_once('link/table.csp');
            $column_list = get_class_vars(GRN_LINK_TABLE_PERSONAL_CATEGORY);
            foreach (array_keys($column_list) as $column_name) {
                if (strpos($column_name, 'col_') === 0
                    && strpos($column_name, 'col_reserve') !== 0
                ) {
                    $column_name_list[] = $column_name;
                }
            }
            $column_name_list[] = '_id';
        }

        return $column_name_list;
    }

    /**
     * Get Category
     *
     * @param  int $category_id        //Category ID
     * @param  int $user_id            //Target User ID(null:System Category)
     * @param  int $parent_category_id //Parent Category ID(null:All Category)
     * @param  int $lock_mode          //Lock Mode
     *
     * @return object $category                   //Category Object
     */
    function &get(
        $category_id,
        $user_id,
        $parent_category_id = null,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Check Root Category
        if ($category_id == GRN_LINK_CATEGORY_ROOT_ID || $category_id == 0) {
            $ret =& $this->getRoot($user_id, $lock_mode);

            return $ret;
        }

        //Get Category List
        $category_list =& $this->getList($user_id, $parent_category_id,
            $lock_mode);

        //Get Category
        if ( ! array_key_exists($category_id, $category_list)) {
            {
                $___ret = false;

                return $___ret;
            }
        }

        //Return Category Object
        return $category_list[$category_id];
    }

    /**
     * Get Root Category
     *
     * @param int $user_id   //User ID
     * @param int $lock_mode //Lock Mode
     *
     * @return object $root_category              //Root Category Object
     */
    private function &getRoot($user_id, $lock_mode = CB_DATABASE_DEFAULT_LOCK)
    {
        //Get List
        $category_list =& $this->getList($user_id, null, $lock_mode, false);

        //Get Root Category
        return $category_list[GRN_LINK_CATEGORY_ROOT_ID];
    }

    /**
     * Get Category List
     *
     * @param  int  $user_id            //Target User ID
     * @param  int  $parent_category_id //Parent Category ID(null:All Category)
     * @param  int  $lock_mode          //Lock Mode
     * @param  bool $refresh            //Refresh Cache
     *
     * @return array  $category_list             //Category Object List
     */
    function &getList(
        $user_id,
        $parent_category_id = null,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $refresh = false
    ) {
        $category_list = [];

        //Check Arguments
        $parent_category_id = is_null($parent_category_id) ? 0
            : $parent_category_id;

        //Get Category List From Cache
        $cached = false;
        if ( ! $refresh) {
            if (array_key_exists($user_id, $this->_list)) {
                if (array_key_exists($parent_category_id,
                    $this->_list[$user_id])
                ) {
                    if (is_array($this->_list[$user_id][$parent_category_id])) {
                        $category_list
                            =& $this->_list[$user_id][$parent_category_id];
                        $cached = true;
                    }
                }
            }
        }

        //Get Category List From Database
        if ( ! $cached || $refresh) {
            $database = $this->_getDatabase();

            $column_list = implode(',', $this->_getColumnList());

            $condition = cb_queryf($database, "col_user = '@S'",
                $database->escape($user_id));
            if ($parent_category_id !== 0) {
                $condition = $condition . cb_queryf($database,
                        " AND col_parent = '@S'", $parent_category_id);
            } else {
                $root_category = $this->getRootCategoryRow();
            }
            $query = 'SELECT ' . $column_list . ' FROM ' . $this->_table_name
                     . " WHERE " . $condition
                     . " ORDER BY col_list_index";
            $query = $database->select_format($query, 0, -1, $lock_mode);
            $result = $database->query($query);
            if ($result === false) {
                //Throw Query Error
                $database->throwError(['query' => 'query failed: ' . $query]);
            }

            $count = $database->num_rows($result);
            if (isset($root_category)) {
                $this->_list[$user_id][$parent_category_id][GRN_LINK_CATEGORY_ROOT_ID]
                    = $root_category;
            }
            for ($i = 0; $i < $count; $i++) {
                $row = $database->fetch_assoc($result);
                $this->_list[$user_id][$parent_category_id][$row['_id']] = $row;
            }
            $database->free_result($result);

            if ($count > 0 || isset($root_category)) {
                $category_list = $this->_list[$user_id][$parent_category_id];
            }
        }

        //Return Category List
        return $category_list;
    }

    private function getRootCategoryRow()
    {
        $database = $this->_getDatabase();
        $column_list = implode(',', $this->_getColumnList());
        $query = 'SELECT ' . $column_list . ' FROM ' . $this->_table_name
                 . ' WHERE _id = 1';
        $result = $database->query($query);
        if ($result === false) {
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        return $database->fetch_assoc($result);
    }

    /**
     * Search Category
     *
     * @param  array $search_category_list //Category ID List
     * @param  array $target_list          //Search Target List
     * @param  array $condition_list       //Search Condition List
     * @param  int   $user_id              //Search User ID
     * @param  int   $offset               //Search Offset
     * @param  int   $limit                //Search Limit
     * @param  int   $term                 //Search Term
     * @param  int   $lock_mode            //Lock Mode
     *
     * @return array                             //Hit Category List
     */
    function search(
        $search_category_list,
        $target_list,
        $condition_list,
        $user_id,
        $offset = 0,
        $limit = 5,
        $term = 0,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Database
        $database = $this->_getDatabase();

        //Create Column List
        $column_list = implode(',', $this->_getColumnList());

        //Create User Condition
        $condition = [];
        //escape!
        $condition[] = cb_queryf($database, "(col_user = '@S')", $user_id);

        //$condition[] = cb_queryf($database, '(_id IN (@S))', implode(',', array_keys($search_category_list)));
        //escape!

        //Create Category Condition
        $after = [];
        $before = array_keys($search_category_list);
        foreach ($before as $item) {
            $after[] = "'" . $database->escape($item) . "'";
        }
        $condition[] = '(_id IN (' . implode(',', $after) . '))';

        //Create Search Condition
        $search_condition = [];
        foreach ($target_list as $target_name) {
            $item_search_condition = [];
            foreach ($condition_list as $condition_item) {
                switch ($target_name) {
                    case 'category':
                        $item_search_condition[] = cb_queryf($database,
                            '(col_name LIKE "%@L%")', $condition_item);
                        break;
                    default:
                        break;
                }
            }
            if (count($item_search_condition) != 0) {
                $search_condition[] = '(' . implode(' AND ',
                        $item_search_condition) . ')';
            }
        }
        if (count($search_condition) != 0) {
            $condition[] = '(' . implode(' OR ', $search_condition) . ')';
        }

        //Create Limit Date Condition
        if ($term > 0) {
            $condition[] = cb_queryf($database, "(col_mtime >= '@S')", $term);
        }

        //Create Condition
        $condition = implode(' AND ', $condition);
        if ($condition) {
            $condition = 'WHERE ' . $condition;
        }

        //Search Category
        $hit_category_list = [];

        //Create Query
        $query = sprintf('SELECT %s FROM %s %s', $column_list,
            $this->_table_name, $condition);
        if ($limit > 0) {
            $query = $database->select_format($query, $offset, $limit,
                $lock_mode);
        } else {
            $query = $database->select_format($query, 0, -1, $lock_mode);
        }

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Update Hit Category List
        $count = $database->num_rows($result);
        for ($i = 0; $i < $count; $i++) {
            $row = $database->fetch_assoc($result);
            $this->_search_list[$row['_id']] = $row;
        }
        $database->free_result($result);
        if ($count > 0) {
            $hit_category_list =& $this->_search_list;
        }

        //return Hit Category List
        return $hit_category_list;
    }

    /**
     * Search Category
     *
     * @param  array $search_category_list //Category ID List
     * @param  array $target_list          //Search Target List
     * @param  array $condition_list       //Search Condition List
     * @param  int   $user_id              //Search User ID
     * @param  int   $term                 //Search Term
     * @param  int   $lock_mode            //Lock Mode
     *
     * @return int                               //Hit Category List
     */
    function searchCount(
        $search_category_list,
        $target_list,
        $condition_list,
        $user_id,
        $term = 0,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Database
        $database = $this->_getDatabase();

        //Create Column List
        $column_list = implode(',', $this->_getColumnList());

        //Create User Condition
        $condition = [];
        $condition[] = cb_queryf($database, "(col_user = '@S')", $user_id);

        //Create Category Condition
        $after = [];
        $before = array_keys($search_category_list);
        foreach ($before as $item) {
            $after[] = "'" . $database->escape($item) . "'";
        }
        $condition[] = '(_id IN (' . implode(',', $after) . '))';

        //Create Search Condition
        $search_condition = [];
        foreach ($target_list as $target_name) {
            $item_search_condition = [];
            foreach ($condition_list as $condition_item) {
                switch ($target_name) {
                    case 'category':
                        $item_search_condition[] = cb_queryf($database,
                            '(col_name LIKE "%@L%")', $condition_item);
                        break;
                    default:
                        break;
                }
            }
            if (count($item_search_condition) != 0) {
                $search_condition[] = '(' . implode(' AND ',
                        $item_search_condition) . ')';
            }
        }
        if (count($search_condition) != 0) {
            $condition[] = '(' . implode(' OR ', $search_condition) . ')';
        }

        //Create Limit Date Condition
        if ($term > 0) {
            $condition[] = cb_queryf($database, "(col_mtime >= '@S')", $term);
        }

        //Create Condition
        $condition = implode(' AND ', $condition);
        if ($condition) {
            $condition = 'WHERE ' . $condition;
        }

        //Create Order By Column
        $order_by = 'ORDER BY col_mtime, _id';

        //Create Query
        $query = sprintf('SELECT %s FROM %s %s %s', $column_list,
            $this->_table_name, $condition, $order_by);
        $query = $database->select_format($query, 0, -1, $lock_mode);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Update Hit Category Count
        $hit_count = $database->num_rows($result);
        $database->free_result($result);

        //Return Hit Category Count
        return $hit_count;
    }

    /**
     * Get Parent Category
     *
     * @param  int $category_id //Category ID
     * @param  int $user_id     //Target User ID
     * @param  int $lock_mode   //Lock Mode
     *
     * @return object $parent_category            //Parent Category Object
     */
    function &getParent(
        $category_id,
        $user_id,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Category
        $category =& $this->get($category_id, $user_id, null, $lock_mode);
        if ( ! $category) {
            {
                $___ret = false;

                return $___ret;
            }
        }

        //Check Parent Category
        $parent_category_id = $category['col_parent'];
        if ( ! $parent_category_id) {
            {
                $___ret = false;

                return $___ret;
            }
        }

        //Return Parent Category Object
        $ret =& $this->get($category['col_parent'], $user_id, null, $lock_mode);

        return $ret;
    }

    /**
     * Get Child Category
     *
     * @param  int $category_id //Category ID
     * @param  int $user_id     //Target User ID
     * @param  int $lock_mode   //Lock Mode
     *
     * @return array
     */
    function getChildList(
        $category_id,
        $user_id,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Child Category List
        return $this->getList($user_id, $category_id, $lock_mode, false);
    }

    /**
     * Get ALL Child Category
     *
     * @param int[] $category_id_list //Category ID
     * @param int   $user_id          //Target User ID
     * @param array $category_list    //Child Category List
     * @param int   $lock_mode        //Lock Mode
     */
    function getALLChildList(
        $category_id_list,
        $user_id,
        & $category_list,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        if (count($category_id_list) === 0) {
            return;
        }

        //Get Database
        $database = $this->_getDatabase();

        //Create Column List
        $column_list = implode(',', $this->_getColumnList());

        //Create Condition
        //$condition = sprintf('WHERE (col_user = %s) AND (col_parent IN (%s))' , $user_id, implode(',', $category_id_list));
        //escape!
        $after = [];
        foreach ($category_id_list as $item) {
            $after[] = "'" . $database->escape($item) . "'";
        }
        $condition = "WHERE (col_user = '" . $database->escape($user_id)
                     . "') AND (col_parent IN (" . implode(',', $after) . "))";


        //Create Query
        $query = sprintf('SELECT %s FROM %s %s', $column_list,
            $this->_table_name, $condition);
        $query = $database->select_format($query, 0, -1, $lock_mode);
        //Execute Query
        $result = $database->query($query);

        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Update Child Category List
        $child_category_id_list = [];
        $count = $database->num_rows($result);
        for ($i = 0; $i < $count; $i++) {
            $row = $database->fetch_assoc($result);
            $category_list[$row['_id']] = $row;
            $child_category_id_list[] = $row['_id'];
        }
        $database->free_result($result);

        //Get All Child List
        $this->getALLChildList($child_category_id_list, $user_id,
            $category_list);

        return;
    }

    /**
     * Get Child Count
     *
     * @param int $category_id //Category ID
     * @param int $user_id     //Target User ID
     * @param int $lock_mode   //Lock Mode
     *
     * @return int
     */
    function getChildCount(
        $category_id,
        $user_id,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Category List
        $category_list = $this->getList($user_id, $category_id, $lock_mode,
            false);

        //Return Child Category Count
        return count($category_list);
    }

    /**
     * Get Category Tree List
     *
     * @param int  $last_category_id //Last Category ID
     * @param int  $user_id          //Target User ID
     * @param bool $include_root     //Include Root Flag
     * @param bool $include_last     //Include Last Category Flag
     * @param int  $lock_mode        //Lock Mode
     *
     * @return array                             //Tree Category List
     */
    function getTreeList(
        $last_category_id,
        $user_id,
        $include_root = true,
        $include_last = true,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $tree_list = [];

        //Check Include Root Flag
        if ($include_root && $last_category_id == GRN_LINK_CATEGORY_ROOT_ID) {
            //Get First Category
            $category =& $this->get($last_category_id, $user_id, null,
                $lock_mode);
            if ( ! $category) {
                return false;
            }
            $tree_list[$last_category_id] =& $category;

            return $tree_list;
        }

        //Check Include Last Flag
        if ($include_last) {
            //Get First Category
            $category =& $this->get($last_category_id, $user_id, null,
                $lock_mode);
            if ( ! $category) {
                return false;
            }
            $tree_list[$last_category_id] =& $category;
        }

        //Get Tree List
        while (false != ($parent_category =& $this->getParent($last_category_id,
                $user_id, $lock_mode))) {
            $parent_category_id = $parent_category['_id'];
            if ($parent_category_id == GRN_LINK_CATEGORY_ROOT_ID
                && ! $include_root
            ) {
                break;
            }
            $tree_list[$parent_category_id] =& $parent_category;
            $last_category_id = $parent_category_id;
        }


        //Reverse Tree List
        $reverse_tree_list = array_reverse($tree_list, true);

        //Return Category Tree List
        return $reverse_tree_list;
    }

    /**
     * Reflesh Cache
     *
     * @param int  $user_id     //User ID
     * @param int  $category_id //Category ID(null:ALL Category)
     * @param bool $recursive   //Recursive Flag
     * @param none
     */
    function refreshCache($user_id, $category_id = null, $recursive = false)
    {
        //Refresh Cache With User ID
        if (is_null($category_id)) {
            if ($recursive) {
                unset($this->_list[$user_id]);
            } else {
                unset($this->_list[$user_id][0]);
            }

            return;
        } else {
            if ($recursive) {
                $sub_category =& $this->_list[$user_id][$category_id];
                if (is_array($sub_category)) {
                    foreach (array_keys($sub_category) as $sub_category_id) {
                        $this->refreshCache($user_id, $sub_category_id, true);
                    }
                }
            }
            unset($this->_list[$user_id][$category_id]);
            unset($this->_list[$user_id][0][$category_id]);
        }

        return;
    }
}


