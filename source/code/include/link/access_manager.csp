<?php
/**
 * Link Application Access Manager Class
 *
 * @author  Yuichi, Nakamura 2005/4
 * @version 1.0
 * @package grn.link
 */

/** Link Application **/
require_once('link/resources.csp');
require_once('link/access_manager_base.csp');

/**
 * Link Category Access Manager Class
 *
 * @package grn.link
 */
class GRN_Link_Category_Access_Manager
    extends GRN_Link_Category_Access_Manager_Base
{
    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
        //Get Parent Instance
        $parent = parent::getInstance();

        //Sync Parent Table and Access Cache
        $this->_table_list =& $parent->_table_list;
        $this->_access_cache_list =& $parent->_access_cache_list;
    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Link_Category_Access_Manager
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Create Table
     *
     * @param  string $target_type    //Table Type(user/group/static_role)
     * @param  array  $authority_list //Authority List
     *
     * @return bool   $result                    //Result
     */
    function createTable($target_type)
    {
        //Get Table Information
        $table_info =& $this->_getTableInfo($target_type);

        //Create Object Column
        $table_info->addColumn('object',
            ['type' => 'relation', 'to' => 'grn_link_system_category']);

        //Create Target Column
        switch ($target_type) {
            case GRN_LINK_ACCESS_TARGET_TYPE_USER:
                $table_info->addColumn('target',
                    ['type' => 'relation', 'to' => 'cb_user']);
                break;
            case GRN_LINK_ACCESS_TARGET_TYPE_GROUP:
                $table_info->addColumn('target',
                    ['type' => 'relation', 'to' => 'cb_group']);
                break;
            case GRN_LINK_ACCESS_TARGET_TYPE_STATIC_ROLE:
                $table_info->addColumn('target',
                    ['type' => 'relation', 'to' => 'cb_role']);
                break;
            case GRN_LINK_ACCESS_TARGET_TYPE_DYNAMIC_ROLE:
                $table_info->addColumn('target',
                    ['type' => 'char', 'length' => 100]);
                break;
            default:
                return false;
                break;
        }

        //Create Authority Column
        foreach (array_keys($this->_authority_list) as $authority_id) {
            $table_info->addColumn('authority_' . $authority_id,
                ['type' => 'int']);
        }

        //Create Access Index
        $table_info->addIndex('access',
            ['cols' => ['object', 'target'], 'unique' => true]);

        //Create Table
        $table_info->createTable();

        //Add Table Information Cache
        $this->_table_list[$target_type] =& $table_info;

        return true;
    }

    /**
     * Alter Table
     *
     * @param  string $target_type    //Table Type(user/group/static_role)
     * @param  array  $authority_list //Authority List
     *
     * @return bool   $result                    //Result
     */
    function alterTable($target_type, $authority_list = null)
    {
        //Check Argument
        if ( ! is_array($authority_list)) {
            return false;
        }

        //Get Table Information
        $table_info =& $this->_getTableInfo($target_type);

        //Add Authority Column
        foreach (array_keys($authority_list) as $authority_id) {
            $table_info->addColumn('authority_' . $authority_id,
                ['type' => 'int']);
        }

        //Altar Table
        $table_info->alterTable();

        return true;
    }

    /**
     * Drop Table
     *
     * @param  string $target_type //Table Type(user/group/static_role)
     *
     * @return bool   $result                    //Result
     */
    function dropTable($target_type)
    {
        //Get Table Information
        $table_info =& $this->_getTableInfo($target_type);

        //Drop Table
        $table_info->dropTable();

        return true;
    }

    /**
     * Create Table List
     *
     * @param  array $authority_list //Authority List
     *
     * @return bool   $result                    //Result
     */
    function createTableList()
    {
        //Create Table List
        foreach ($this->_target_type_list as $target_type) {
            $this->createTable($target_type);
        }

        return true;
    }

    /**
     * Alter Table  List
     *
     * @param  array $authority_list //Authority List
     *
     * @return bool   $result                    //Result
     */
    function alterTableList($authority_list = null)
    {
        //Check Argument
        if ( ! is_array($authority_list)) {
            return false;
        }

        //Alter Table List
        foreach ($this->_target_type_list as $target_type) {
            $this->alterTable($target_type, $authority_list);
        }

        return true;
    }

    /**
     * Drop Table  List
     *
     * @param  array $authority_list //Authority List
     *
     * @return bool   $result                    //Result
     */
    function dropTableList()
    {
        //Drop Table List
        foreach ($this->_target_type_list as $target_type) {
            $this->dropTable($target_type);
        }

        return true;
    }

    /**
     * Create Access Object
     *
     * @param  object $category       //Category Object
     * @param  object $target         //Target Object
     * @param  string $target_type    //Table Type(user/group/static_role/dynamic_role)
     * @param  object $authority_list //Authority List
     *
     * @return object $access                    //Access Object
     */
    function createAccess(&$category, &$target, $target_type, $authority_list)
    {
        //Create Access Object
        $table_info = $this->_getTableInfo($target_type);
        $access = $table_info->newRow();

        //Set Category and Target Object
        $access->set(GRN_LINK_PROPERTY_OBJECT, $category);
        $access->set(GRN_LINK_PROPERTY_TARGET, $target);

        //Set Authority List
        foreach ($authority_list as $authority_id => $authority_value) {
            $access->set('authority_' . $authority_id, $authority_value);
        }
        $access->registerNow();

        //Clear Access Cache
        $this->clearAccessCache();

        //Return Access Object
        return $access;
    }

    /**
     * Remove Access Object
     *
     * @param  int    $access_id   //access_id
     * @param  string $target_type //Table Type(user/group/static_role/dynamic_role)
     *
     * @return bool   $result                    //Result
     */
    function removeAccess($access_id, $target_type)
    {
        //Get Access Object
        $access =& $this->getAccess($access_id, $target_type);
        if ( ! $access) {
            return false;
        }

        //Delete Access Object
        $access->delete();
        $access->updateNow();

        //Clear Access Cache
        $this->clearAccessCache();

        return true;
    }

    /**
     * Remove Access Object
     *
     * @param  int    $access_id   //access_id
     * @param  string $target_type //Table Type(user/group/static_role/dynamic_role)
     *
     * @return bool   $result                    //Result
     */
    function removeAccess2($category_id, $target_id, $target_type)
    {
        //Get Access Object
        $access =& $this->getAccess2($category_id, $target_id, $target_type);
        if ( ! $access) {
            return false;
        }

        //Delete Access Object
        $access->delete();
        $access->updateNow();

        //Clear Access Cache
        $this->clearAccessCache();

        return true;
    }

    /**
     * Set Security  Model
     *
     * @param  object $category       //Category Object
     * @param  string $security_model //Security Model
     *
     * @return bool   $result                    //Result
     */
    function setSecurityModel(& $category, $security_model)
    {
        //Get Current Security Model
        $current_security_model = $this->getSecurityModel($category);
        if ($current_security_model != $security_model) {
            //Set Security Model
            switch ($security_model) {
                case 'revoke':
                    $category->set(GRN_LINK_PROPERTY_SECURITY_MODEL,
                        GRN_LINK_SECURITY_MODEL_TYPE_REVOKE);
                    break;
                case 'grant':
                    $category->set(GRN_LINK_PROPERTY_SECURITY_MODEL,
                        GRN_LINK_SECURITY_MODEL_TYPE_GRANT);
                    break;
                default:
                    assert('FALSE');
                    break;
            }
            $category->updateNow();

            //Clear Access Cache
            $this->clearAccessCache();
        }

        return true;
    }
}
