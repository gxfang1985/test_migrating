<?php

require_once('report/table.csp');
require_once('grn/file.csp');
require_once('grn/application.csp');

class GRN_Report_FileBody extends GRN_FileBody
{
    var $_app_id = 'report';

    var $col_file
        = [
            'type' => 'weak_relation',
            'to'   => 'GRN_Report_File',
            'lazy' => true
        ];

    function __construct(& $row)
    {
        parent::__construct($row);
    }
}

class GRN_Report_FileLog extends GRN_FileLog
{
    var $_app_id = 'report';

    var $col_file
        = [
            'type' => 'relation',
            'to'   => 'GRN_Report_File',
            'lazy' => true
        ];
    var $col_body = ['type' => 'weak_relation', 'to' => 'GRN_Report_FileBody'];

    function __construct(& $row)
    {
        parent::__construct($row);
    }
}

class GRN_Report_FileLock extends GRN_FileLock
{
    var $_app_id = 'report';

    var $col_file
        = [
            'type'   => 'relation',
            'to'     => 'GRN_Report_File',
            'unique' => true
        ];

    function __construct(& $row)
    {
        parent::__construct($row);
    }
}

class GRN_Report_FileManager_Core extends GRN_FileManager
{
    function __construct()
    {
        $this->_file_table = cb_class2table('GRN_Report_File');
        $this->_body_table = cb_class2table('GRN_Report_FileBody');
    }

}

class GRN_Report_File extends GRN_File
{
    var $_app_id = 'report';
    var $_body_table_name = 'GRN_Report_FileBody';
    var $_log_table_name = 'GRN_Report_FileLog';
    var $_lock_table_name = 'GRN_Report_FileLock';

    /**
     * @access private
     */
    var $_triggers = null;

    function __construct(& $row)
    {
        parent::__construct($row, 'grn.report');
    }

    /**
     * invoke hooks on create, update or delete event
     *
     * @access public
     *
     * @param string $action action
     */
    function runHook($action)
    {
        if (is_null($this->_triggers)) {
            $loader = new CB_PluginLoader('grn.report.file');
            $this->_triggers = $loader->loadHooks();
        }

        foreach ($this->_triggers as $hook) {
            call_user_func($hook, $this, $action);
        }
    }

    // override
    function setTitle($title)
    {
        parent::setTitle($title);
        $this->runHook('update');
    }

    /**
     * @param mixed  $user
     * @param mixed  $file
     * @param string $comment
     *
     * @return bool
     */
    function update($user, $file, $comment)
    {
        parent::update($user, $file, $comment);
        $this->runHook('update');
    }

    /**
     * @param mixed  $user
     * @param int    $restore_version
     * @param string $comment
     *
     * @return bool
     */
    function restore($user, $restore_version, $comment)
    {
        parent::restore($user, $restore_version, $comment);
        $this->runHook('update');
    }

    /**
     * @param    object $user user is a CB_User object
     *
     * @return bool
     */
    function isCreator(& $user)
    {
        return $user && $user->getOID() == $this->getId('creator');
    }
}

/**
 * File Manager Class
 *
 * @package grn.report
 */
class GRN_Report_FileManager
{
    private static $_instance = null;

    /**
     * @static
     * @return GRN_Report_FileManager
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * @access private
     */
    var $_tab_file = null;


    function __construct()
    {
        $app_locator = GRN_ApplicationLocator::instance();
        $tm = $app_locator->getTableManager('report');
        $this->_tab_file = $tm->getTableInfo('GRN_Report_FileRelation');
    }

    function _makeCondition($id, & $object)
    {
        $query = '';

        $app_locator = GRN_ApplicationLocator::instance();
        $database = $app_locator->getConnection('report');

        if ($id) {
            $query = cb_queryf($database, "col_file = '@S' AND ", $id);
        }

        if (is_a($object, 'GRN_Report_Itemdata')) {
            $query .= cb_queryf($database,
                "col_item_data = '@S' AND col_follow IS NULL",
                $object->getOID());
        } elseif (is_a($object, 'GRN_Report_Follows')) {
            $query .= cb_queryf($database,
                "col_item_data IS NULL AND col_follow = '@S'",
                $object->getOID());
        } else {
            assert('FALSE');

            return null;
        }

        return $query;
    }

    /**
     * Get Category ID of File
     *
     * @param  file_id
     *
     * @return category_id
     */
    function getCategory($file_id)
    {
        if ( ! $file_id) {
            return false;
        }

        $report_id = $this->getReport($file_id);

        if ( ! $report_id) {
            return false;
        }

        require_once('report/controller_util.csp');
        $report_util = GRN_Report_Report_Controller_Utility::getInstance();
        $report = $report_util->getSimpleView($report_id);
        $category_id = $report['category'];

        return $category_id;
    }

    /**
     * Get Report ID of File
     *
     * @param file_id
     *
     * @return report_id
     */
    function getReport($file_id)
    {
        if ( ! $file_id) {
            return false;
        }

        $app_locator = GRN_ApplicationLocator::instance();
        $db = $app_locator->getConnection('report');

        $where_str = cb_queryf($db, "col_file = '@S'", $file_id);

        $result
            = $db->query("SELECT col_report FROM tab_grn_report_filerelation WHERE "
                         . $where_str);
        if (cb_is_db_result($result)
            && ($row =& $db->fetch_row($result)) !== false
        ) {
            $db->free_result($result);
            $report_id = $row[0];

            return $report_id;
        }

        return false;
    }

    /**
     * 報告項目に添付されたファイル数を取得する（直クエリ版）
     *
     * @param int  GRN_Report_Itemdata  報告項目ID
     *
     * @return int  添付ファイル数
     */
    function getNumFileInfos($object_id)
    {
        if ( ! $object_id) {
            return 0;
        }

        $app_locator = GRN_ApplicationLocator::instance();
        $database = $app_locator->getConnection('report');

        $condition = cb_queryf($database,
            "col_item_data = '@S' AND col_follow IS NULL", $object_id);
        $result
            = $database->query("SELECT COUNT(*) FROM tab_grn_report_filerelation where "
                               . $condition);
        if (cb_is_db_result($result)
            && ($row =& $database->fetch_row($result)) !== false
        ) {
            $database->free_result($result);

            return $row[0];
        }

        return false;
    }

    /**
     * 添付ファイルを取得する
     *
     * @param string $file_id ファイルID
     *
     * @return GRN_Report_File|false
     */
    function &getFile($file_id)
    {
        //Get GRN_File Object
        $file_manager = new GRN_Report_FileManager_Core();
        $file_table = $file_manager->getFileTable();
        $file = $file_table->getRow($file_id);
        if ( ! $file) {
            $ret = false;

            return $ret;
        }

        return $file;
    }

    /**
     * 報告項目に添付されたファイルを全て取得する
     *
     * @param object GRN_Report_Itemdata  $object  報告項目
     *
     * @return array  array( $aid => & GRN_File, ... )
     */
    function getFiles(& $object)
    {
        if ( ! $object) {
            return [];
        }

        $rowset = new CB_RowSet($this->_tab_file);

        if ( ! ($condition = $this->_makeCondition(null, $object))) {
            return [];
        }
        $rowset->addCondition($condition);

        $files = [];
        while ( ! is_null(($row = $rowset->iterate()))) {
            $files[$row->getId('file')] = $row->get('file');
        }

        return $files;
    }

    /**
     * get attached files with items and follows on report
     *
     * @param  $report_id   int          //Report ID
     *
     * @return $files       array        //Files or FALSE(if file doesn't exist)
     */
    function &getAllReportAttachedFiles(
        $report_id,
        $reverse = true,
        $sort_key = 'ctime'
    ) {
        /*
        $rowset = new CB_RowSet( $this->_tab_file );
        $rowset->addCondition( $rowset->queryf( "col_report = '@S'", $report_id ) );
        
        $rowset->addOrderColumn( '_id' );
        
        $files = array();
        while( ! is_null( $row =& $rowset->iterate() ) )
        {
            $files[$row->getOID()] =& $row->get( 'file' );
        }
                
        return $files;
        */
        switch ($sort_key) {
            case 'mtime':
                $sort_key = 'f.col_mtime';
                break;
            case 'fnd':
                $sort_key = 'b.col_name';
                break;
            case 'ftd':
                $sort_key = 'f.col_title_sort_key';
                break;
            default:
                $sort_key = 'f.col_ctime';
                break;
        }

        $tbl_grn_file = cb_class2table('GRN_Report_File');
        $tbl_grn_filebody = cb_class2table('GRN_Report_FileBody');
        $db = $this->_tab_file->getDBConnection();

        $rowset = new CB_MultiRowSet($this->_tab_file, 'r');
        $rowset->addJoin($tbl_grn_file,
            cb_queryf($db, 'col_report = \'@S\' AND r.col_file = f._id',
                $report_id),
            CB_DATABASE_INNER_JOIN,
            'f'
        );
        $rowset->addJoin($tbl_grn_filebody,
            'f._id = b.col_file AND f.col_version = b.col_version',
            CB_DATABASE_INNER_JOIN,
            'b'
        );
        $rowset->addOrderColumn($sort_key, $reverse);
        $rowset->addOrderColumn('r.col_follow, b._id');

        return $rowset;
    }

    function _makeLogMessage(& $object)
    {
        $log = [];

        if (is_a($object, 'GRN_Report_Itemdata')) {
            if ($report = $object->get('report')) {
                $log = [
                    'rid'         => $report->getOID(),
                    'itemdata_id' => $object->getOID()
                ];
            } elseif ($draft = $object->get('draft')) {
                $log = [
                    'did'         => $draft->getOID(),
                    'itemdata_id' => $object->getOID()
                ];
            }
        } elseif (is_a($object, 'GRN_Report_Follows')) {
            if ($report = $object->get('report')) {
                $log = [
                    'rid'       => $report->getOID(),
                    'follow_id' => $object->getOID()
                ];
            } elseif ($draft = $object->get('draft')) {
                $log = [
                    'did'       => $draft->getOID(),
                    'follow_id' => $object->getOID()
                ];
            }
        }

        return $log;
    }

    /**
     * ファイルを添付する
     *
     * @param object CB_User $user    操作ユーザー
     * @param object $object 報告項目またはフォロー
     * @param mixed  $file   ファイル、$_FILESの中身かGRN_Fileオブジェクト
     *
     * @return object GRN_File 失敗の場合はFALSEを返す
     */
    function addFile($user, & $object, & $file)
    {
        if ( ! $object || ! $file) {
            $ret = false;

            return $ret;
        }

        $object->access($user, GRN_REPORT_ACCESS_W, true);

        require_once('grn/file.csp');
        $fm = new GRN_Report_FileManager_Core();

        $dbfile = null;

        if (is_a($file, 'GRN_File')) {
            if ( ! ($dbfile = $fm->duplicateFile($user, $file, null))) {
                $ret = false;

                return $ret;
            }
        } else {
            if ( ! ($dbfile = $fm->createFile($user, $file, null))) {
                $ret = false;

                return $ret;
            }
        }

        $row = $this->_tab_file->newRow();

        if (is_a($object, 'GRN_Report_Itemdata')) {
            if ($report = $object->get('report')) {
                $row->set('report', $report->_getRow());
                $row->set('itemdata', $object->_getRow());
            } elseif ($draft = $object->get('draft')) {
                $row->set('draft', $draft->_getRow());
                $row->set('itemdata', $object->_getRow());
            }
        } elseif (is_a($object, 'GRN_Report_Follows')) {
            $report = $object->get('report');
            $row->set('report', $report->_getRow());
            $row->set('follow', $object->_getRow());
        } else {
            $row->delete();
            $ret = false;

            return $ret;
        }

        $row->set('file', $dbfile);
        $row->updateNow();

        // logging
        $log = $this->_makeLogMessage($object);
        grn_report_write_log('create', 'file',
            $log + ['fid' => $dbfile->getOID()]);

        $dbfile->runHook('create');

        return $dbfile;
    }

    /**
     * delete specified attached file
     *
     * @param   string $file_id //File ID
     *
     * @return  boolean                //if file doesn't exist, return FALSE
     */
    function deleteFile($file_id)
    {
        //Get File
        $file = $this->getFile($file_id);
        if ( ! $file) {
            return false;
        }

        //Delete File
        $file->delete();

        return true;
    }

    function deleteFiles(& $user, & $object)
    {
        if ( ! $object) {
            return false;
        }

        $object->isDeletable($user, true);

        $rowset = new CB_RowSet($this->_tab_file);

        if ( ! ($condition = $this->_makeCondition(null, $object))) {
            return false;
        }

        $rowset->addCondition($condition);

        $log = $this->_makeLogMessage($object);

        while ( ! is_null($row = $rowset->iterate())) {
            if (($f = $row->get('file'))) {
                grn_report_write_log('delete', 'file',
                    $log + ['fid' => $f->getOID()]);

                //force release lock file when $object can be deleted by $user
                $lock = $f->getLockObject();
                $lock->releaseLock(true);

                $f->delete();
            }
            $row->delete();
        }
        $rowset->destroy();

        return true;
    }

    function isManage($file_id)
    {
        if ( ! $file_id) {
            require_once('report/error_code.csp');
            cb_throw_error(E_GRN_RPRT_FILE_NOT_FOUND);
        }

        //Get Category
        $category_id = $this->getCategory($file_id);
        if ( ! $category_id) {
            require_once('report/error_code.csp');
            cb_throw_error(E_GRN_RPRT_FILE_NOT_FOUND);
        }

        //Check Nonparty Category
        require_once('report/controller_util.csp');
        $category_util = GRN_Report_Category_Controller_Utility::getInstance();
        if (GRN_REPORT_CATEGORY_NONPARTY_ID == $category_id) {
            require_once('report/error_code.csp');
            cb_throw_error(E_GRN_RPRT_MANAGE_DENY_NONPARTY_CATEGORY);
        }

        //Check Category Manage and Access Right
        $category_util->checkManage($category_id, true, CB_DATABASE_NO_LOCK);
        $category_util->checkAccess($category_id, true, CB_DATABASE_NO_LOCK);
    }
}


