<?php
/**
 * Report Application Subscribe Class
 *
 * @date    2009/10
 * @version 1.0
 * @package grn.report
 */

/** Report Application **/
require_once('report/resources.csp');
require_once('report/table_manager.csp');

/**
 * Subscribe Manager Class
 *
 * @package grn.report
 */
class GRN_Report_Subscribe_Manager
{
    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
        //Sync Parent Table and Subscribe List Cache
        $this->_table_name = 'tab_grn_report_subscribe';
    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Report_Subscribe_Manager
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Create Subscribe
     *
     * @param  array $property_list //Property List(Name=>Value)
     *
     * @return int   $subscribe_id                //Subscribe ID
     */
    function create($property_list)
    {
        $column_list
            = GRN_Report_Table_Manager::getColumnList(GRN_REPORT_TABLE_SUBSCRIBE);
        $column_string
            = GRN_Report_Table_Manager::createColumnString($column_list,
            $property_list);
        $value_string
            = GRN_Report_Table_Manager::createValueString($column_list,
            $property_list);
        $result = GRN_Report_Table_Manager::create($this->_table_name,
            $column_string, $value_string);

        return $result;
    }

    /**
     * Modify Report Subscribe
     *
     * @param  int $subscribe_id //Subscribe ID
     * @param  int $subscribe    //Subscribe
     *
     * @return int    $subscribe_id               //Subscribe ID
     */
    function update($subscribe_id, $property_list)
    {
        $result
            = GRN_Report_Table_Manager::updateById(GRN_REPORT_TABLE_SUBSCRIBE,
            $subscribe_id, $property_list);

        return $result;
    }

    /**
     * Get User ID List of Report Subscribe
     *
     * @param  int $report_id //Report ID
     *
     * @return array  $subscribe_list             //Subscribe List
     */
    function &getList($report_id, $user_id = null, $subscribe = null)
    {
        $database = GRN_Report_Table_Manager::getDatabase();

        //Create Column List
        $column_list = null;
        $column_list
            =& GRN_Report_Table_Manager::getColumnList(GRN_REPORT_TABLE_SUBSCRIBE);
        $column_list = implode(',', $column_list);
        if ( ! is_null($user_id)) {
            $query = cb_queryf($database,
                'SELECT @S FROM @S WHERE col_report = "@S" AND col_user = "@S"',
                $column_list, $this->_table_name, $report_id, $user_id);
        } elseif ( ! is_null($subscribe)) {
            $query = cb_queryf($database,
                'SELECT @S FROM @S WHERE col_report = "@S" AND col_subscribe = "@S"',
                $column_list, $this->_table_name, $report_id, $subscribe);
        } else {
            $query = cb_queryf($database,
                'SELECT @S FROM @S WHERE col_report = "@S"', $column_list,
                $this->_table_name, $report_id);
        }

        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Create User ID List
        $subscribe_list = [];
        $count = $database->num_rows($result);
        for ($i = 0; $i < $count; $i++) {
            $subscribe_list[] = $database->fetch_assoc($result);
        }

        $database->free_result($result);

        //Return Subscribe
        return $subscribe_list;
    }

    /**
     * Remove Subscribe
     *
     * @param  int $report_id //Report ID
     * @param  int $user_id   //User ID
     * @param  int $subscribe //Subscribe
     *
     * @return BOOL   $result                     //Result
     */
    function remove($report_id, $user_id, $subscribe = null)
    {
        //Get Database
        $database =& GRN_Report_Table_Manager::getDatabase();

        //Create Query
        if (is_null($subscribe)) {
            $where_string = cb_queryf($database,
                'col_report = "@S" AND col_user = "@S"', $report_id, $user_id);
        } else {
            $where_string = cb_queryf($database,
                'col_report = "@S" AND col_user = "@S" AND col_subscribe = "@S"',
                $report_id, $user_id, $subscribe);
        }

        //Remove
        GRN_Report_Table_Manager::remove($this->_table_name, $where_string);

        return true;
    }

    /**
     * Remove Multiple Subscribe
     *
     * @param array $report_id    //Report ID
     * @param array $user_id_list //User ID List
     * @param BOOL  $result       //Result
     */
    function removeMulti($report_id, $user_id_list)
    {
        if (is_array($user_id_list) && count($user_id_list) === 0) {
            return;
        }

        foreach ($user_id_list as $user_id) {
            $this->remove($report_id, $user_id);
        }

        return true;
    }

    /**
     * Remove All Report
     *
     * @param int  $report_id //Report ID
     * @param BOOL $result    //Result
     */
    function removeAll($report_id = null)
    {
        //Get Database
        $database =& GRN_Report_Table_Manager::getDatabase();

        //Create Query
        $where_string = "";
        if ($report_id == -1) {
            $where_string = 'col_report IS NULL';
        } elseif ( ! is_null($report_id)) {
            $where_string = cb_queryf($database, 'col_report = "@S"',
                $report_id);
        }

        GRN_Report_Table_Manager::remove($this->_table_name, $where_string);

        return true;
    }
}


