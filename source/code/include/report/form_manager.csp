<?php
/**
 * Report Application Form Class
 *
 * @author  Jumpei, Miyata 2009/9
 * @version 1.0
 * @package grn.report
 */

/** Report Application **/
require_once('report/resources.csp');
require_once('report/form_manager_base.csp');
require_once('report/table_manager.csp');

/**
 * Form Manager Class
 *
 * @package grn.report
 */
class GRN_Report_Form_Manager extends GRN_Report_Form_Manager_Base
{
    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
        //Get Parent Instance
        $parent = parent::getInstance();

        //Sync Parent Table and Form List Cache
        $this->_table_name =& $parent->_table_name;
        $this->_list =& $parent->_list;
    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Report_Form_Manager
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Create Form
     *
     * @param  array $property_list //Property List(Name=>Value)
     *
     * @return int   $form_id                    //Form ID
     */
    function create($property_list)
    {
        $id = GRN_Report_Table_Manager::genericCreate(GRN_REPORT_TABLE_FORM,
            $property_list);

        return $id;
    }

    /**
     * Update Form
     *
     * @param  array $form_id       //Form ID
     * @param  array $property_list //Property List(Name=>Value)
     *
     * @return array $form_id                    //Form ID
     */
    function update($form_id, $property_list)
    {
        $ret = GRN_Report_Table_Manager::updateById(GRN_REPORT_TABLE_FORM,
            $form_id, $property_list);
        if ($ret) {
            return $form_id;
        } else {
            return false;
        }
    }

    /**
     * Update Form Multiple
     *
     * @param  array $form_id_list  //Form ID List
     * @param  array $property_list //Property List(Name=>Value)
     *
     * @return array $form_id                    //Form ID
     */
    function updateMulti($form_id_list, $property_list)
    {
        foreach ($form_id_list as $form_id) {
            $this->update($form_id, $property_list);
        }

        //Return Form ID
        return $form_id_list;
    }

    /**
     * Remove Form
     *
     * @param int  $form_id //Form ID
     * @param BOOL $result  //Result
     */
    function remove($form_id)
    {
        GRN_Report_Table_Manager::removeById(GRN_REPORT_TABLE_FORM, $form_id);

        //Delete From Form List
        foreach (array_keys($this->_list) as $key) {
            if (in_array($form_id, $this->_list[$key])) {
                unset($this->_list[$key][$form_id]);
            }
        }

        return true;
    }

    /**
     * Remove Multiple Form
     *
     * @param array $form_id_list //Form ID List
     * @param BOOL  $result       //Result
     */
    function removeMulti($form_id_list)
    {
        foreach ($form_id_list as $form_id) {
            $this->remove($form_id);
        }

        //Delete From Form List
        $form_id = current($form_id_list);
        foreach (array_keys($this->_list) as $key) {
            if (in_array($form_id, $this->_list[$key])) {
                foreach ($form_id_list as $form_id) {
                    unset($this->_list[$key][$form_id]);
                }
            }
        }

        return true;
    }

    /**
     * Remove All Form
     *
     * @param int  $category_id //Category ID
     * @param BOOL $result      //Result
     */
    function removeAll($category_id = null)
    {
        //Get Database
        $database =& GRN_Report_Table_Manager::getDataBase();

        //Create Column List
        $column_list = implode(',',
            GRN_Report_Table_Manager::getColumnList(GRN_REPORT_TABLE_FORM, 'f',
                true));

        //Create Query
        $where_string = "";
        if ($category_id == -1) {
            $where_string = 'WHERE col_category IS NULL';
        } elseif ( ! is_null($category_id)) {
            $where_string = cb_queryf($database, "WHERE col_category = '@S'",
                $category_id);
        }
        $query = sprintf('DELETE FROM %s %s', $this->_table_name,
            $where_string);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Delete From Form List
        unset($this->_list[$category_id]);

        return true;
    }

    /**
     * Change Form Order
     *
     * @param  int $form_id_list //Form ID List
     *
     * @return BOOL   $result                    //Result
     */
    function changeOrder($form_id_list)
    {
        //Set New List Index
        $list_index = 0;
        $property_list = [];
        foreach ($form_id_list as $form_id) {
            $property_list[GRN_REPORT_COLUMN_LIST_INDEX] = $list_index;
            $this->update($form_id, $property_list);
            $list_index++;
        }

        return true;
    }

    function useForm($user_id, $form_id)
    {
        //フィルタが存在するかチェック
        $form = $this->get($form_id);
        if ( ! $form) {
            return;
        }

        $form_ids = $this->getRecentFormIds($user_id);

        foreach ($form_ids as $idx => $fid) {
            if ($fid == $form_id) {
                unset($form_ids[$idx]);
            }
        }

        if (is_array($form_ids)) {
            array_unshift($form_ids, $form_id);
        } else {
            $form_ids = [$form_id];
        }

        $database = GRN_Report_Table_Manager::getDataBase();
        $update = "";
        for ($i = 0; $i < GRN_REPORT_RECENTFORMUSER_COUNT; $i++) {
            if (array_key_exists($i, $form_ids) && is_numeric($form_ids[$i])) {
                if (strlen($update) > 0) {
                    $update .= ",";
                }
                $update .= cb_queryf($database, "@S = @S",
                    GRN_REPORT_COLUMN_FORM . ($i + 1), $form_ids[$i]);
            }
        }

        //check exist record
        $this->_createRecentUserFormRecordIfNotExist($user_id);

        $tablename
            = GRN_Report_Table_Manager::getTableName(GRN_REPORT_TABLE_RECENTFORMUSERRELATIONS);
        $query = cb_queryf($database, "update @S set @S where col_user = @S",
            $tablename, $update, $user_id);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        return true;
    }

    function getRecentFormIds($user_id)
    {
        //Get Accessible Category ID List
        require_once('report/category_logic.csp');
        $category_logic = GRN_Report_Category_Logic::getInstance();
        $category_ids
            = $category_logic->getAccessibleCategoryIdList($user_id);

        $database = GRN_Report_Table_Manager::getDataBase();
        $columns
            = GRN_Report_Table_Manager::getColumnList(GRN_REPORT_TABLE_RECENTFORMUSERRELATIONS,
            'r');
        $relation_tablename
            = GRN_Report_Table_Manager::getTableName(GRN_REPORT_TABLE_RECENTFORMUSERRELATIONS);
        $form_tablename
            = GRN_Report_Table_Manager::getTableName(GRN_REPORT_TABLE_FORM);

        $query = cb_queryf($database,
            "SELECT @S FROM @S AS r WHERE r.col_user = @S"
            , implode(',', $columns), $relation_tablename, $user_id);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        $row = $database->fetch_assoc($result);
        if ( ! $row) {
            return [];
        }

        $form_ids = [];
        for ($i = 1; $i <= GRN_REPORT_RECENTFORMUSER_COUNT; $i++) {
            if (is_numeric($row[GRN_REPORT_COLUMN_FORM . $i])) {
                $form_ids[] = $row[GRN_REPORT_COLUMN_FORM . $i];
            }
        }
        $database->free_result($result);
        $actives = $this->_getActiveAndAccessibleFormIds($form_ids,
            $category_ids);

        //順序を保持
        $ret = [];
        foreach ($form_ids as $fid) {
            if (array_key_exists($fid, $actives)) {
                $ret[$fid] = $actives[$fid];
            }
        }

        return $ret;
    }

    /**
     * 渡されたフォームIDリストの中から有効なフォームIDのみを返す。
     * 基本的にこのメソッドは使用せずIDを取得する時点で有効/無効チェックを行うこと。
     * (パフォーマンス的に非効率)
     *
     * @param $form_id_list
     *
     * @return unknown_type
     */
    function _getActiveAndAccessibleFormIds($form_id_list, $category_id_list)
    {
        $database = GRN_Report_Table_Manager::getDataBase();
        $form_tablename
            = GRN_Report_Table_Manager::getTableName(GRN_REPORT_TABLE_FORM);

        if ( ! $form_id_list || count($form_id_list) == 0) {
            return [];
        }

        if ($category_id_list && count($category_id_list) > 0) {
            $category_query = cb_queryf($database,
                '(f.col_category IS NULL OR f.col_category IN (@S))',
                implode(',', $category_id_list));
        } else {
            $category_query = "f.col_category IS NULL";
        }


        $query = cb_queryf($database,
                "SELECT f._id FROM @S AS f WHERE f.col_active = @S AND f._id IN (@S) AND "
                , $form_tablename, 1, implode(',', $form_id_list))
                 . $category_query;

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        $form_ids = [];
        $count = $database->num_rows($result);
        for ($i = 0; $i < $count; $i++) {
            $row = $database->fetch_assoc($result);
            $form_ids[$row['_id']] = $row['_id'];
        }
        $database->free_result($result);

        return $form_ids;
    }

    function _createRecentUserFormRecordIfNotExist($userId)
    {
        $database = GRN_Report_Table_Manager::getDataBase();
        $tablename
            = GRN_Report_Table_Manager::getTableName(GRN_REPORT_TABLE_RECENTFORMUSERRELATIONS);

        $query = cb_queryf($database, "select * from @S where col_user = @S",
            $tablename, $userId);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        $count = $database->num_rows($result);
        if ($count == 0) {
            $query = cb_queryf($database,
                "insert into @S(col_user) values(@S)", $tablename, $userId);
            $result = $database->query($query);
            if ($result === false) {
                //Throw Query Error
                $database->throwError(['query' => 'query failed: ' . $query]);
            }
        }
    }

    function getRecentUserFormList($user_id)
    {
        //Get Accessible Category ID List
        require_once('report/category_logic.csp');
        $category_logic = GRN_Report_Category_Logic::getInstance();
        $category_ids
            = $category_logic->getAccessibleCategoryIdList($user_id);

        $form_ids = $this->getRecentFormIds($user_id, $category_ids);
        $forms = $this->getListByFormIdList($form_ids);
        //formsの順序をform_idsと同等にする
        $ret = [];
        foreach ($form_ids as $fid) {
            $ret[$fid] = $forms[$fid];
        }

        return $ret;
    }
}


