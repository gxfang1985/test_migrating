<?php
/**
 * Report Application Manage Logic Class
 *
 * @date    2009/09
 * @version 1.0
 * @package grn.report
 */

/** Report Application **/
require_once('report/table.csp');
require_once('report/resources.csp');
require_once('report/manage_logic_base.csp');

/**
 * Report Category Manage Manager Class
 *
 * @package grn.report
 */
class GRN_Report_Category_Manage_Logic
    extends GRN_Report_Category_Manage_Logic_Base
{
    //Category Manager Instance
    private $_category_logic = null;

    //Category Manage Manager Instance
    private $_category_manage_manager = null;

    private function __construct()
    {
    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Report_Category_Manage_Logic
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Category Manage Manager
     *
     * @return GRN_Report_Category_Manage_Manager
     */
    private function _getCategoryManageManager()
    {
        if (is_null($this->_category_manage_manager)) {
            require_once('report/manage_manager.csp');
            $this->_category_manage_manager
                = GRN_Report_Category_Manage_Manager::getInstance();
        }

        return $this->_category_manage_manager;
    }

    /**
     * Get Category Logic
     *
     * @return GRN_Report_Category_Logic
     */
    private function _getCategoryLogic()
    {
        if (is_null($this->_category_logic)) {
            require_once('report/category_logic.csp');
            $this->_category_logic = GRN_Report_Category_Logic::getInstance();
        }

        return $this->_category_logic;
    }

    /**
     * Create Manage Object
     *
     * @param  int    $category_id    //Category ID
     * @param  int    $target_id      //Target ID
     * @param  string $target_type    //Table Type(user/group/static_role/dynamic_role)
     * @param  object $authority_list //Authority List
     * @param  bool   $inspect        //Inspaction Message Flag
     *
     * @return object $manage                    //Manage Object
     */
    public function &addManage(
        $category_id,
        $target_id,
        $target_type,
        $authority_list,
        $inspect = true
    ) {
        //Check Argument
        require_once('report/error_code.csp');
        require_once('fw/string_util.csp');
        cb_trim_check($category_id,
            E_GRN_RPRT_CATEGORY_INVALID_ID);    //Category ID
        cb_trim_check($target_id,
            E_GRN_RPRT_MANAGE_INVALID_TARGET);  //Manage Target
        cb_trim_check($target_type,
            E_GRN_RPRT_MANAGE_INVALID_TARGET);  //Manage Target


        //Get Category Object
        $category_logic = $this->_getCategoryLogic();
        $category =& $category_logic->get($category_id);

        //Get UUM Instance
        global $G_container_base;
        $grn_uum =& $G_container_base->getInstance('uum');

        //Get Target Object
        $target = null;
        switch ($target_type) {
            case GRN_REPORT_ACCESS_TARGET_TYPE_USER:
                $target =& $grn_uum->getUser($target_id);
                $id_name = 'uid';
                $id_value = $target_id;
                break;
            case GRN_REPORT_ACCESS_TARGET_TYPE_GROUP:
                $target =& $grn_uum->getGroup($target_id);
                $id_name = 'gid';
                $id_value = $target_id;
                break;
            case GRN_REPORT_ACCESS_TARGET_TYPE_STATIC_ROLE:
                $target =& $grn_uum->getStaticRole($target_id);
                $id_name = 'rid';
                $id_value = $target_id;
                break;
            case GRN_REPORT_ACCESS_TARGET_TYPE_DYNAMIC_ROLE:
                $target = $target_id;
                $id_name = 'rid';
                $id_value = $target_id;
                break;
            default:
                //Manage Target Object Not Found
                require_once('report/error_code.csp');
                cb_throw_error(E_GRN_RPRT_MANAGE_TARGET_NOT_FOUND);
                break;
        }

        //Create Manage Object
        $manager = $this->_getCategoryManageManager();
        $manage =& $manager->create($category, $target, $target_type,
            $authority_list);

        //Return Manage Object
        return $manage;
    }

    /**
     * Remove Manage Object
     *
     * @param  int    $category_id //Category ID
     * @param  int    $target_id   //Target ID
     * @param  string $target_type //Table Type(user/group/static_role/dynamic_role)
     * @param  bool   $inspect     //Inspaction Message Flag
     *
     * @return bool   $result                    //Result
     */
    public function removeManage(
        $category_id,
        $target_id,
        $target_type,
        $inspect = true
    ) {
        //Check Argument
        require_once('report/error_code.csp');
        require_once('fw/string_util.csp');
        cb_trim_check($category_id,
            E_GRN_RPRT_CATEGORY_INVALID_ID);    //Category ID
        cb_trim_check($target_id,
            E_GRN_RPRT_ACCESS_INVALID_TARGET);  //Target ID
        cb_trim_check($target_type,
            E_GRN_RPRT_MANAGE_INVALID_TARGET);  //Manage Target
        //Delete Manage Object
        $manager = $this->_getCategoryManageManager();
        $manager->remove($category_id, $target_id, $target_type);

        return true;
    }

    /**
     * Remove All Manage
     *
     * @param int  $category_id //Category ID
     * @param bool $inspect     //Inspaction Message Flag
     * @param BOOL $result      //Result
     */
    public function removeManageAll($category_id, $inspect = true)
    {
        //Check Argument
        require_once('report/error_code.csp');
        require_once('fw/string_util.csp');
        cb_trim_check($category_id,
            E_GRN_RPRT_CATEGORY_INVALID_ID);    //Category ID

        //Remove Manage Object
        $manager = $this->_getCategoryManageManager();
        $manager->removeAll($category_id);

        return true;
    }
}


