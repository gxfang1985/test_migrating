<?php
/**
 * Report Application Item Data Class
 *
 * @author  Yuichi, Nakamura 2006/01
 * @version 1.0561
 * @package grn.report
 */

/** Report Application **/
require_once('report/resources.csp');
require_once('report/itemdata_manager_base.csp');

/**
 * Item Data Manager Class
 *
 * @package grn.report
 */
class GRN_Report_ItemData_Manager extends GRN_Report_ItemData_Manager_Base
{
    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
        //Get Parent Instance
        $parent = parent::getInstance();

        //Sync Parent Table and Item Data List Cache
        $this->_table_name =& $parent->_table_name;
        $this->_list =& $parent->_list;
    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Report_ItemData_Manager
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Create Item Data
     *
     * @param  array $property_list //Property List(Name=>Value)
     *
     * @return int   $item_data_id               //Item Data ID
     */
    function create($property_list)
    {
        $id = GRN_Report_Table_Manager::genericCreate(GRN_REPORT_TABLE_ITEMDATA,
            $property_list);

        return $id;
    }

    /**
     * Create Item Data Multiple
     *
     * @param  array $all_property_list //ALL Property List(Name=>Value)
     *
     * @return none
     */
    function createMulti($all_property_list)
    {
        //Get Database
        $database = GRN_Report_Table_Manager::getDataBase();

        foreach (array_keys($all_property_list) as $key) {
            $property_list =& $all_property_list[$key];
            $this->create($property_list);
        }
    }

    /**
     * Update Item Data
     *
     * @param  array $item_data_id  //Item Data ID
     * @param  array $property_list //Property List(Name=>Value)
     *
     * @return array $item_data_id               //Item Data ID
     */
    function update($item_data_id, $property_list)
    {
        $ret = GRN_Report_Table_Manager::updateById(GRN_REPORT_TABLE_ITEMDATA,
            $item_data_id, $property_list);
        if ($ret) {
            return $item_data_id;
        } else {
            return false;
        }
    }

    /**
     * Remove Item Data
     *
     * @param int  $item_data_id //Item Data ID
     * @param BOOL $result       //Result
     */
    function remove($item_data_id)
    {
        GRN_Report_Table_Manager::removeById(GRN_REPORT_TABLE_ITEMDATA,
            $item_data_id);

        //Delete From Item Data List
        foreach (array_keys($this->_list) as $key) {
            if (in_array($item_data_id, $this->_list[$key])) {
                unset($this->_list[$key][$item_data_id]);
            }
        }

        return true;
    }

    /**
     * Remove Multiple Item Data
     *
     * @param array $item_data_id_list //Item Data List
     * @param BOOL  $result            //Result
     */
    function removeMulti($item_data_id_list)
    {
        foreach ($item_data_id_list as $itemdata_id) {
            $this->remove($itemdata_id);
        }
    }

    /**
     * Remove All Item Data
     *
     * @param int  $report_id //Report ID
     * @param BOOL $result    //Result
     */
    function removeAll($report_id = null)
    {
        $where = "";
        if ( ! is_null($report_id)) {
            $database =& GRN_Report_Table_Manager::getDataBase();
            $where = cb_queryf($database, "col_report = '@S'", $report_id);
        }
        GRN_Report_Table_Manager::remove($this->_table_name, $where);

        //Delete From Item Data List
        unset($this->_list[$report_id]);

        return true;
    }

    /**
     * Change Item Data Order
     *
     * @param int  $item_data_id_list //Item Data ID List
     * @param int  $start_index       //Start Index Number
     * @param BOOL $result            //Result
     */
    function changeOrder($item_data_id_list, $start_index = 0)
    {
        //Set New List Index
        $list_index = $start_index;
        $property_list = [];
        foreach ($item_data_id_list as $item_data_id) {
            $property_list[GRN_REPORT_COLUMN_LIST_INDEX] = $list_index;
            $this->update($item_data_id, $property_list);
            $list_index++;
        }

        return true;
    }
}


