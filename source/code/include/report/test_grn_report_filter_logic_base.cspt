<?php

require_once('developer/azunit.csp');
require_once('report/filter_manager_base.csp');

class test_grn_report_filter_logic_base extends CB_TestCase
{
    /** database **/
    var $_database = null;

    /** table_name **/
    var $_filter_table_name = null;
    var $_condition_table_name = null;

    /** Test Target List **/
    var $_filter_list = null;
    var $_condition_list = null;

    /** Unique key **/
    var $_unique_key = null;

    /** Basic Value List **/
    var $_filter_value_list = [];
    var $_condition_value_list = [];

    /**
     * Constructor
     *
     * @access private
     *
     * @param string $test_method //Test Method Name
     */
    function test_grn_report_filter_logic_base($test_method)
    {
        //Initialize Parent Class
        parent::CB_TestCase($test_method);

        //Initalize Randam Key
        mt_srand(time());

        //Initialize Unique Key
        $this->_unique_key = $test_method . time();

        //Get Database Connection
        global $G_container_base;
        $this->_database =& $G_container_base->getInstance('dbconn');

        //Set table name
        $this->_filter_table_name = 'tab_grn_report_filter';
        $this->_condition_table_name = 'tab_grn_report_filtercondition';

        //Set Basic Value List
        $this->_filter_value_list = [
            'col_name'                 => 'name_',
            'col_foreign_key'          => 'foreign_key_',
            'col_list_index'           => '',
            'col_or'                   => '',
            'col_creator'              => '',
            'col_creator_name'         => 'Administrator',
            'col_creator_foreign_key'  => 'Administrator',
            'col_ctime'                => '',
            'col_modifier'             => '',
            'col_modifier_name'        => 'Administrator',
            'col_modifier_foreign_key' => 'Administrator',
            'col_mtime'                => '',
        ];

        $this->_condition_value_list = [
            'col_condition' => '',
            'col_number'    => '',
            'col_filter'    => '',
            'col_text'      => '',
            'col_type'      => '',
        ];
    }

    /**
     * Initialize Test
     *
     * @access private
     */
    function _initialize()
    {
        //Get Unique Key
        $unique_key = $this->_unique_key;

        //Create Test Filter
        $this->_createFilter($unique_key);

        $this->_createCondition($unique_key);

        return;
    }

    function _createFilter($unique_key)
    {
        for ($i = 0; $i < 5; $i++) {
            //Create Query
            $filter_value_list = [];
            $index = 0;
            foreach ($this->_filter_value_list as $key => $value) {
                if ($key == 'list_index') {
                    $filter_value_list[$key] = ++$index;
                } elseif ($key == 'col_creator' || $key == 'col_modifier') {
                    $filter_value_list[$key] = 1;
                } elseif (strlen($value) > 0) {
                    $filter_value_list[$key] = cb_queryf($this->_database,
                        '"@S@S"', $value, $i);
                } else {
                    $filter_value_list[$key] = cb_queryf($this->_database,
                        '"@S"', $i);
                }
            }
            $column_string = implode(',', array_keys($filter_value_list));
            $value_string = "";
            foreach ($filter_value_list as $value) {
                if (is_null($value) || strlen($value) == 0) {
                    $value = "null";
                }
                $value_string .= $value . ',';
            }
            $value_string = substr($value_string, 0, strlen($value_string) - 1);

            $query = sprintf('INSERT %s(%s) VALUES (%s)',
                $this->_filter_table_name, $column_string, $value_string);

            //Execute Query
            $result = $this->_database->query($query);

            if ($result === false) {
                //Throw Query Error
                $this->_database->throwError([
                    'query' => 'query failed: ' . $query
                ]);
            }

            //Add Cache
            $filter_id = $this->_database->get_insert_id();
            foreach (array_keys($filter_value_list) as $key) {
                $this->_filter_list[$filter_id][$key] = mb_ereg_replace('"', '',
                    $filter_value_list[$key]);
            }
        }
    }

    function _createCondition($unique_key)
    {
        foreach ($this->_filter_list as $fid => $filter) {
            for ($i = 0; $i < 5; $i++) {
                //Create Query
                $condition_value_list = [];
                $index = 0;
                foreach ($this->_condition_value_list as $key => $value) {
                    if ($key == 'col_filter') {
                        $condition_value_list[$key] = $fid;
                    } elseif ($key == 'list_index') {
                        $condition_value_list[$key] = ++$index;
                    } elseif ($key == 'col_creator' || $key == 'col_modifier') {
                        $condition_value_list[$key] = 1;
                    } elseif (strlen($value) > 0) {
                        $condition_value_list[$key]
                            = cb_queryf($this->_database, '"@S@S"', $value, $i);
                    } else {
                        $condition_value_list[$key]
                            = cb_queryf($this->_database, '"@S"', $i);
                    }
                }
                $column_string = implode(',',
                    array_keys($condition_value_list));
                $value_string = "";
                foreach ($condition_value_list as $value) {
                    if (is_null($value) || strlen($value) == 0) {
                        $value = "null";
                    }
                    $value_string .= $value . ',';
                }
                $value_string = substr($value_string, 0,
                    strlen($value_string) - 1);

                $query = sprintf('INSERT %s(%s) VALUES (%s)',
                    $this->_condition_table_name, $column_string,
                    $value_string);

                //Execute Query
                $result = $this->_database->query($query);

                if ($result === false) {
                    //Throw Query Error
                    $this->_database->throwError([
                        'query' => 'query failed: ' . $query
                    ]);
                }

                //Add Cache
                $condition_id = $this->_database->get_insert_id();
                foreach (array_keys($condition_value_list) as $key) {
                    $this->_condition_list[$fid][$condition_id][$key]
                        = mb_ereg_replace('"', '', $condition_value_list[$key]);
                }
            }
        }
    }

    function _finalize()
    {
        $this->_deleteCondition();
        $this->_deleteFilter();
    }

    function _deleteFilter()
    {
        //Create Query
        $where_string = cb_queryf($this->_database, '_id IN (@S)',
            implode(',', array_keys($this->_filter_list)));
        $query = sprintf('DELETE FROM %s WHERE %s',
            $this->_filter_table_name, $where_string);

        //Execute Query
        $result = $this->_database->query($query);
        if ($result === false) {
            //Throw Query Error
            $this->_database->throwError([
                'query' => 'query failed: ' . $query
            ]);
        }

        //Delete Cache
        $this->_filter_list = [];
    }

    function _deleteCondition()
    {
        //Create Query
        $where_string = cb_queryf($this->_database, '_id IN (@S)',
            implode(',', array_keys($this->_condition_list)));
        $query = sprintf('DELETE FROM %s WHERE %s',
            $this->_condition_table_name, $where_string);

        //Execute Query
        $result = $this->_database->query($query);
        if ($result === false) {
            //Throw Query Error
            $this->_database->throwError([
                'query' => 'query failed: ' . $query
            ]);
        }

        //Delete Cache
        $this->_condition_list = [];
    }

    function _validateFilter($filter_id, $validate_props, $deleted = false)
    {
        //Get Link From Table
        $follow = $this->_getFilter($filter_id, array_keys($validate_props));
        if ($deleted && ! $follow) {
            return true;
        }

        //Validate Properties
        foreach ($validate_props as $prop_name => $prop_value) {
            //Check Assertion
            if (strval($follow[$prop_name]) !== strval($prop_value)) {
//                var_dump($follow[$prop_name]);
//                var_dump($prop_value);
//                echo $prop_name;
//                die();

                //Finalize Test
                $this->_finalize();
                assert('strval($follow[$prop_name]) === strval($prop_value)');
            }
        }

        return true;
    }

    function _getFilter($filter_id, $column_list)
    {
        //Get Database
        $database =& $this->_database;

        //Create Column List
        $column_list = implode(',', $column_list);

        //Create Where Column
        $where = cb_queryf($database, 'WHERE _id = @S', $filter_id);

        //Create Query
        $query = sprintf('SELECT %s FROM %s %s', $column_list,
            $this->_filter_table_name, $where);
        $query = $database->select_format($query, 0, -1,
            CB_DATABASE_DEFAULT_LOCK);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }
        $follow = $database->fetch_assoc($result);
        $database->free_result($result);

        return $follow;
    }

    function _getCondition($condition_id, $column_list)
    {
        //Get Database
        $database =& $this->_database;

        //Create Column List
        $column_list = implode(',', $column_list);

        //Create Where Column
        $where = cb_queryf($database, 'WHERE _id = @S', $condition_id);

        //Create Query
        $query = sprintf('SELECT %s FROM %s %s', $column_list,
            $this->_condition_table_name, $where);
        $query = $database->select_format($query, 0, -1,
            CB_DATABASE_DEFAULT_LOCK);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        $database->free_result($result);
        $condition = $database->fetch_assoc($result);
        $database->free_result($result);

        return $condition;
    }
}

?>
