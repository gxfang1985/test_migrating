<?php
/**
 * Report Application Item Data Class
 *
 * @author  Yuichi, Nakamura 2006/01
 * @version 1.0
 * @package grn.report
 */

/** Report Application **/
require_once('report/resources.csp');
require_once('report/itemdata_logic_base.csp');
require_once('report/itemdata_manager.csp');

/**
 * Item Data Manager Class
 *
 * @package grn.report
 */
class GRN_Report_ItemData_Logic extends GRN_Report_ItemData_Logic_Base
{

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {

    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Report_ItemData_Logic
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Set Item
     *
     * @access private
     *
     * @param  array $item          //Item Information
     * @param  array $property_list //Property List
     * @param  bool  $throw_error   //Throw Error Flag
     *
     * @return bool   $result                    //Result
     */
    function _setItem(& $item, & $property_list)
    {
        //Check Argument
        if ( ! is_array($item) && ! is_array($property_list)) {
            return false;
        }

        //Define Set Key List
        $set_column_key_list = [
            'display_name',         //Item Display Name
            'type',                 //Item Type
            'option_string',        //Item Option String
            'option_string_type',   //Item Option String Type
            'description',          //Item Description
            'description_type',     //Item Description_type
            'description_editor',   //Item Description Editor
            'data_type',            //Item Data Type
            'settings',             //Item Settings
            'required',             //Item Required
            'list_index',           //Item list Index
        ];

        //Set Item Value
        foreach ($set_column_key_list as $set_column_key) {
            //Set Property List
            $column_value =& $item[$set_column_key];
            if (is_array($column_value)) {
                $property_list['col_' . $set_column_key]
                    = serialize($column_value);
            } else {
                $property_list['col_' . $set_column_key] = $column_value;
            }
        }

        return true;
    }

    /**
     * Add Item Data
     *
     * @param  int   $report_id   //Report ID
     * @param  array $item        //Item Information
     * @param  bool  $check_value //Check Item Value
     *
     * @return int    $item_data_id              //Item Data ID
     */
    function add($report_id, $item_id, $data_type, $item, $check_value = true)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        cb_trim_check($report_id, E_GRN_RPRT_REPORT_INVALID_ID);    //Report ID

        //Check Report Exist
        require_once('report/report_logic_base.csp');
        $report_logic_base = GRN_Report_Report_Logic_Base::getInstance();
        $report =& $report_logic_base->get($report_id);

        //Check Item Exist
        require_once('report/item_manager_base.csp');
        $item_manager_base = GRN_Report_Item_Manager_Base::getInstance();
        $item_info = $item_manager_base->getDirect($item_id);

        if ( ! $item_info) {
            //Create Property List
            $property_list = [
                GRN_REPORT_COLUMN_REPORT => $report_id,
                GRN_REPORT_COLUMN_ITEM   => null,
            ];
        } else {
            //Create Property List
            $property_list = [
                GRN_REPORT_COLUMN_REPORT => $report_id,
                GRN_REPORT_COLUMN_ITEM   => $item_id,
            ];
        }

        //Set Item Properties 
        $this->_setItem($item, $property_list);

        //Set Input Data
        require_once('report/item_resources.csp');

        $item_util =& grn_report_get_item_util($data_type);
        if ($item_util) {
            $item_util->setItemData($item, $property_list, $check_value);
        }

        //Set Creator
        GRN_Report_Table_Manager::setCreator($property_list);

        //Create New Item Data
        $item_data_manager = GRN_Report_ItemData_Manager::getInstance();
        $property_list[GRN_REPORT_COLUMN_DATA_TYPE] = $data_type;

        if (array_key_exists('col_list_index', $item)) {
            $property_list[GRN_REPORT_COLUMN_LIST_INDEX]
                = $item['col_list_index'];
        }
        $item_data_id = $item_data_manager->create($property_list);

        //Set Item File Data
        if ($item_util) {
            $item_util->setItemDataFile($report_id, $item_data_id, $item,
                $property_list, $check_value);
        }

        return $item_data_id;
    }

    /**
     * Add Item Data Multiple
     *
     * @param  int   $report_id   //Report ID
     * @param  array $item_list   //Item Information List
     * @param  bool  $check_value //Check Item Value
     *
     * @return int    $item_data_id_list         //Item Data ID List
     */
    function addMulti($report_id, & $item_list, $check_value = true)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        cb_trim_check($report_id, E_GRN_RPRT_REPORT_INVALID_ID);    //Report ID

        //Check Report Exist
        $column_list = ['_id', 'col_form'];
        require_once('report/report_logic_base.csp');
        $report_logic_base = GRN_Report_Report_Logic_Base::getInstance();
        $report = $report_logic_base->getDirect($report_id,
            $column_list);

        //Get Item List
        $column_list = ['_id'];
        require_once('report/item_logic_base.csp');
        $item_logic_base = GRN_Report_Item_Logic_Base::getInstance();
        $item_info_list =& $item_logic_base->getList($report['col_form'],
            $column_list);

        //Create Property List
        $all_property_list = [];
        require_once('report/item_resources.csp');
        foreach (array_keys($item_list) as $item_id) {
            $item =& $item_list[$item_id];

            //Check Item Exists
            if ( ! array_key_exists($item['iid'], $item_info_list)) {
                $property_list = [
                    GRN_REPORT_COLUMN_REPORT => $report_id,
                    GRN_REPORT_COLUMN_ITEM   => null,
                ];
            } else {
                $property_list = [
                    GRN_REPORT_COLUMN_REPORT => $report_id,
                    GRN_REPORT_COLUMN_ITEM   => $item['iid'],
                ];
            }

            //Set Item Properties 
            $this->_setItem($item, $property_list);

            //Set Input Data
            $data_type = $item['data_type'];
            $item_util = grn_report_get_item_util($data_type);
            if ($item_util) {
                $item_util->setItemData($item, $property_list, $check_value);
            } else {
                $property_list['col_number'] = null;
                $property_list['col_text'] = null;
            }

            //Set Creator
            GRN_Report_Table_Manager::setCreator($property_list);

            $all_property_list[$item_id] = $property_list;
        }

        //Create New Item Data
        $item_data_manager = GRN_Report_ItemData_Manager::getInstance();
        $item_data_manager->createMulti($all_property_list);

        //Get Create Item Data List
        $column_list = ['_id', 'col_item', 'col_data_type'];
        $item_data_list =& $this->getList($report_id, $column_list);

        //Set Item File Data
        foreach (array_keys($item_data_list) as $item_data_id) {
            $item_data =& $item_data_list[$item_data_id];

            $data_type = $item_data['col_data_type'];
            $item_util = grn_report_get_item_util($data_type);
            if ($item_util) {
                $item =& $item_list[$item_data['col_item']];
                $property_list =& $all_property_list[$item_data['col_item']];
                $item_util->setItemDataFile($report_id, $item_data_id, $item,
                    $property_list, $check_value);
                $item['item_data'] = $item_data_id;
            }
        }

        return array_keys($item_data_list);
    }

    /**
     * Modify Item Data
     *
     * @param  int   $item_data_id //Item Data ID
     * @param  int   $report_id    //Report ID
     * @param  array $item         //Item Information
     * @param  bool  $check_value  //Check Item Value
     *
     * @return int    $item_data_id              //Item Data ID
     */
    function modify(
        $item_data_id,
        $report_id,
        $item_id,
        $item,
        $check_value = true,
        $property_columns = null
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        cb_trim_check($item_data_id,
            E_GRN_RPRT_ITEMDATA_INVALID_ID);          //Item Data ID
        cb_trim_check($report_id,
            E_GRN_RPRT_ITEM_INVALID_ID);              //Item ID

        //Check Item Data Exist
        $item_data =& $this->get($item_data_id, $report_id);

        //Create Property List
        if (is_null($property_columns) || ! is_array($property_columns)
            || ! count($property_columns)
        ) {
            $property_list = [
                GRN_REPORT_COLUMN_ITEM => $item_id,
            ];
        } else {
            $property_list = [];
            foreach ($property_columns as $key => $value) {
                if (array_key_exists($value, $item)) {
                    if (is_array($item[$value])) {   // 'col_settings'
                        $property_list[$key] = serialize($item[$value]);
                    } else {
                        $property_list[$key] = $item[$value];
                    }
                }
            }
        }

        //Set List Index
        if (array_key_exists('list_index', $item)) {
            $property_list[GRN_REPORT_COLUMN_LIST_INDEX] = $item['list_index'];
        }

        //Set Input Data
        require_once('report/item_resources.csp');
        $data_type = $item['data_type'];
        $item_util = grn_report_get_item_util($data_type);


        if ($item_util) {
            $item_util->setItemData($item, $property_list, $check_value);
        }

        //Set Modifier
        GRN_Report_Table_Manager::setModifier($property_list);

        //Update Item Data
        $item_data_manager = GRN_Report_ItemData_Manager::getInstance();
        $item_data_id = $item_data_manager->update($item_data_id,
            $property_list);

        //Set Item File Data
        if ($item_util) {
            $item_util->setItemDataFile($report_id, $item_data_id, $item,
                $property_list, $check_value);
        }

        return $item_data_id;
    }

    /**
     * Delete Item Data
     *
     * @param int  $item_data_id //Item Data ID
     * @param BOOL $result       //Result
     */
    function delete($item_data_id)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        cb_trim_check($item_data_id,
            E_GRN_RPRT_ITEMDATA_INVALID_ID);        //Item Data ID

        //Remove Item Data
        $item_data_manager = GRN_Report_ItemData_Manager::getInstance();
        $item_data_manager->remove($item_data_id);

        return true;
    }

    /**
     * Delete Multiple Item Data
     *
     * @param  array $item_data_id_list //Item Data ID List
     *
     * @return BOOL   $result                    //Result
     */
    function deleteMulti($item_data_id_list)
    {
        //Check Argument
        if ( ! is_array($item_data_id_list)) {
            //Not Input Necessary
            require_once('report/error_code.csp');
            cb_throw_error(E_GRN_RPRT_ITEMDATA_NOT_INPUT_NECESSARY);
        }

        //Remove Item Data
        $item_data_manager = GRN_Report_ItemData_Manager::getInstance();
        $item_data_manager->removeMulti($item_data_id_list);

        return true;
    }

    /**
     * Delete All Item Data
     *
     * @param  int $form_id //Form ID
     *
     * @return BOOL   $result                    //Result
     */
    function deleteAll($form_id = null)
    {
        //Remove Item Data
        $item_data_manager = GRN_Report_ItemData_Manager::getInstance();
        $item_data_manager->removeAll($form_id);

        return true;
    }

    function setAttachFile(
        $item_data_id,
        $attach_file,
        $attach_file_view = null
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        cb_trim_check($item_data_id, E_GRN_RPRT_ITEM_INVALID_ID);

        //Create Property List
        $property_list = [
            GRN_REPORT_COLUMN_ATTACH_FILE      => $attach_file,
            GRN_REPORT_COLUMN_ATTACH_FILE_VIEW => $attach_file_view,
        ];

        //Update Item
        $item_data_manager = GRN_Report_ItemData_Manager::getInstance();
        $item_data_id = $item_data_manager->update($item_data_id,
            $property_list);

        return $item_data_id;
    }

}


