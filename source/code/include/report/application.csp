<?php
/**
 * アプリケーション
 *
 * @author   Shou Aoki 2009/09
 * @modified Vien Tran at 2013/9
 * @version  2.0
 * @package  grn.report
 */

require_once('grn/application.csp');
require_once('report/resources.csp');

use grn\grn\access\service\AppAccess;

/**
 * アプリケーション
 *
 * @package grn.report
 */
class GRN_Report_Application extends GRN_ApplicationBase
{
    /**
     * コンストラクタ
     */
    function __construct()
    {
        parent::__construct(GRN_REPORT_APPLICATION_ID);
    }

    /**
     * @access private
     */
    var $_system_config = null;

    /**
     * システム設定オブジェクトの取得
     */
    function getSystemConfig(& $user, $checkReadOnly = true)
    {
        if (is_null($this->_system_config)) {
            $profile = $this->getSystemProfile();
            $this->_system_config = new GRN_Report_SystemConfig($profile);
        }

        if ($checkReadOnly) {
            require_once('grn/system_logic.csp');
            $system = GRN_System::getInstance();

            if ($system->isSuperAdmin($user)) {
                $this->_system_config->_readonly = false;
            } else // check admin application
            {
                global $G_container_base;
                $uum = $G_container_base->getInstance('uum');

                $roles = [];
                if ($user) {
                    $roles = $uum->getUserRolesInfo($user->getOID());
                }

                $groups = $uum->getUserGroups($user->getOID());

                $isApplicationAdmin = $system->isApplicationAdmin($user,
                    $groups, $roles);
                if ($isApplicationAdmin) {
                    $this->_system_config->_readonly = false;
                }
            }
        }

        return $this->_system_config;
    }

    /**
     * システム管理に表示するメニューを取得
     */
    function getSystemConfigArray()
    {

        $general_config = [
            [
                'page' => 'report/system/common_set',
                'icon' => 'general32'
            ],
            [
                'page' => 'report/system/form_list',
                'icon' => 'form32'
            ],
            [
                'page' => 'report/system/filter_index',
                'icon' => 'filter32'
            ],
            [
                'page' => 'report/system/access_index',
                'icon' => 'access32'
            ],
            [
                'page' => 'report/system/privilege_index',
                'icon' => 'manager32'
            ],
            [
                'page' => 'report/system/report_list',
                'icon' => 'report32'
            ],
            [
                'page' => 'report/system/import_index',
                'icon' => 'import32'
            ],
            [
                'page' => 'report/system/export_index',
                'icon' => 'export32'
            ],
        ];

        return ['report_config' => $general_config];

    }

    /**
     * @param int $service_offset
     *
     * @return array|bool
     */
    function getLicenseInfo($service_offset = 30)
    {
        require_once('grn/license.csp');
        $license_manager = GRN_LicenseManager::getInstance();
        $license = $license_manager->getLicense(GRN_LICENSE_BASESYSTEM);

        if ( ! is_array($license) || 0 == count($license)) {
            return false;
        }

        if ($license_manager->isDemoLicense($license['type'])) {
            // 試用期間を不正に延ばそうとした場合（試用開始日時 > 現在日時）
            if (time() < $license['register']->unix_ts) {
                $license['remind_days'] = -1;
            } // 試用期間過ぎた場合
            else {
                $license['remind_days']
                    = $license_manager->getRemindDays($license['limit']);
            }
        } // 正規ライセンス登録済み
        else {
            $license['remind_days']
                = $license_manager->getRemindDays($license['service_limit'],
                $service_offset);
        }

        return $license;
    }

    /**
     * @param $license_info
     *
     * @return int
     */
    function getStatus($license_info)
    {
        static $_status = null;
        if ( ! is_null($_status)) {
            return $_status;
        }
        $_status = GRN_LICENSE_SUCCESS;

        if (0 > $license_info['remind_days']) {
            $_status = GRN_LICENSE_EXPIRED;
        }

        return $_status;
    }

    /**
     * @return bool
     */
    function isLicensed()
    {
        $license = $this->getLicenseInfo();
        if ( ! is_array($license) || 0 == count($license)) {
            return false;
        }
        $result = $this->getStatus($license);

        return GRN_LICENSE_EXPIRED != $result;
    }

    /**
     * @param CB_User $user
     *
     * @return bool
     */
    function isLicensedUser($user)
    {
        if ( ! $user) {
            return false;
        }

        $lic = $this->getLicenseInfo();
        if ( ! is_array($lic) || 0 == count($lic)) {
            return false;
        }

        if ( ! $this->isLicensed()) {
            return false;
        }

        require_once('grn/license.csp');
        $lm = GRN_LicenseManager::getInstance();
        if ( ! $lm->isDemoLicense($lic['type'])) {
            return AppAccess::isAppAvailableInternalAccess($this->__app_id);
        }

        return true;
    }

    /**
     * Return TRUE if $user can use this application; otherwise return FALSE.
     *
     * @param  object CB_User $user
     *
     * @return bool
     */
    function isAvailableFor($user)
    {
        return $this->isLicensedUser($user);
    }


    /**
     * 通知データのページ情報の取得
     * 通知アプリから呼び出される
     *
     * @param  object $user      対象となるユーザー
     * @param  string $app_id    アプリケーションID
     * @param  string $unique_id 通知元データのユニークID
     * @param  array  $org_data  通知元データのオリジナルデータ配列
     * @param  string $status    通知元データの状態（'unread', 'update', 'confirmed'）
     * @param  string $action_id 通知元データのアクションID（'create', 'update'）
     * @param  string $sub_module_id
     *
     * @return mixed    ページ情報の配列
     *                  'subject_page'  => 標題用ページ名（ex:'report/view'）
     *                  'abstract_page' => 内容用ページ名（ex:'report/download'）
     *                  'subject_icon'  => 標題用アイコン名（ex:'report20'）
     *                  'abstract_icon' => 内容用アイコン名（ex:'file20'）
     *                  'url_params'    => URLに積むパラメータの配列（標題、内容共通）
     *                  'isBlankDisplayAbstract'  => 内容のブランク表示（TRUE：ブランク表示　FALSE：なにもしない）
     */
    function getNotificationPageInfo(
        $user,
        $app_id,
        $unique_id,
        & $org_data,
        $status,
        $action_id,
        $sub_module_id
    ) {
        $page_info = [];
        $page_info['subject_page'] = 'report/view';
        $page_info['url_params'] = ['rid' => $org_data['rid']];
        $page_info['isBlankDisplayAbstract'] = (array_key_exists('follow',
                $org_data)
                                                && $org_data['follow'] == true)
            ? false : true;

        require_once('notification/resources.csp');
        switch ($action_id) {
            case GRN_NOTIFICATION_ACTION_CREATE_ID :
                $page_info['subject_icon'] = cb_msg(GRN_NOTIFICATION_MODULE_ID,
                    GRN_NOTIFICATION_REPORT_ICON_CODE_ADD);
                break;
            case GRN_NOTIFICATION_ACTION_UPDATE_ID :
                if (array_key_exists('follow', $org_data)) {
                    $page_info['subject_icon']
                        = cb_msg(GRN_NOTIFICATION_MODULE_ID,
                        GRN_NOTIFICATION_REPORT_ICON_CODE_FOLLOW);
                } else {
                    $page_info['subject_icon']
                        = cb_msg(GRN_NOTIFICATION_MODULE_ID,
                        GRN_NOTIFICATION_REPORT_ICON_CODE_MOD);
                }
                break;
            default:
                $page_info['subject_icon'] = cb_msg(GRN_NOTIFICATION_MODULE_ID,
                    GRN_NOTIFICATION_REPORT_ICON_CODE_ADD);
                break;
        }

        if (array_key_exists('file', $org_data)) {
            if ($org_data['file'] > 0) {
                if ($status == 'update') {
                    if (array_key_exists('follow', $org_data)) {
                        $page_info['subject_icon']
                            = cb_msg(GRN_NOTIFICATION_MODULE_ID,
                            GRN_NOTIFICATION_REPORT_CLIPFILE_ICON_CODE_FOLLOW);
                    } else {
                        $page_info['subject_icon']
                            = cb_msg(GRN_NOTIFICATION_MODULE_ID,
                            GRN_NOTIFICATION_REPORT_CLIPFILE_ICON_CODE_MOD);
                    }
                } else {
                    $page_info['subject_icon']
                        = cb_msg(GRN_NOTIFICATION_MODULE_ID,
                        GRN_NOTIFICATION_REPORT_CLIPFILE_ICON_CODE_ADD);
                }
            }
        }

        if ($status == 'update' && array_key_exists('follow', $org_data)) {
            $page_info['subject_fragment'] = 'follow';
        }

        return $page_info;
    }

    function getNotificationPageInfo_cellular(
        & $user,
        $app_id,
        $unique_id,
        $org_data,
        $status
    ) {
        $info = [];
        $info['subject_page'] = 'report/cellular/look';
        $info['url_params'] = ['rid' => $org_data['rid']];

        return $info;
    }

    /**
     * ケータイトップページ通知表示用
     */
    function getNotificationIndexPageInfo_cellular(& $user, $app_id)
    {
        $info = [];
        $info['caption_module'] = 'grn.report.cellular';
        $info['caption_key'] = 'notify';
        $info['icon'] = 'pencil';

        return $info;
    }

    /**
     * 通知の既読処理
     */
    function confirmApplicationData(
        & $user,
        $module_id,
        $unique_id,
        $org_data,
        $timestamp
    ) {
        require_once('report/report_manager.csp');
        $report_manager = GRN_Report_Report_Manager::getInstance();

        if ($report_manager->getDirect($unique_id)) {
            require_once('report/readstatus_logic.csp');
            $readstatus_logic = GRN_Report_ReadStatus_Logic::getInstance();
            $readstatus_logic->read($user->getOID(), $unique_id);
        }

        return true;
    }

    /**
     * Get Portlet List
     *
     * @return array $portlet_list
     */
    function &getPortletList()
    {
        require_once('fw/i18n.csp');
        $portlet_list = [];

        // Default Report Portlet
        $report_portlet = [
            'name'             => cb_msg(GRN_REPORT_MODULE_ID,
                'portlet_view_report'),
            //名前
            'type'             => 'grn.report.report',
            //種別
            'version'          => '1.0',
            //バージョン
            'set_template'     => 'report/portlet/set_report.csp',
            //設定用テンプレート名
            'command_template' => 'report/portlet/command_set_report.csp',
            //設定用テンプレート名
            'view_template'    => 'report/portlet/view_report.csp'
            //表示用テンプレート名
        ];
        $portlet_list[] = $report_portlet;

        return $portlet_list;
    }


    public function getStarData($user, $params)
    {
        $rid = array_key_exists('rid', $params) ? $params['rid'] : '';
        if ( ! ($rid)) {
            require_once('report/error_code.csp');
            cb_throw_error(E_GRN_RPRT_REPORT_NOT_FOUND);
        }

        require_once('report/controller_util.csp');
        $report_util = GRN_Report_Report_Controller_Utility::getInstance();
        $report_id = $rid;
        //Create Parameter Translation Map
        $translation_map_report = [
            'rid'                 => '_id',
            //Report ID
            'name'                => 'name',
            //Report Name
            'form'                => 'form',
            //Report Form ID
            'form_name'           => 'form_name',
            //Report Form Name
            'category'            => 'category',
            //Category ID
            'creator'             => 'creator',
            //Report Creator
            'creator_foreign_key' => 'creator_foreign_key',
            //Report Creator Foreign Key
            'creator_name'        => 'creator_name',
            //Report Creator Name
            'mtime'               => 'mtime',
            //Report Modify Time
            'draft'               => 'draft',
            //Report Draft Flag
            'private'             => 'private'
            //private REport
        ];
        $report = $report_util->getView($report_id,
            $translation_map_report);
        if ($report) {
            if ( ! $this->isAccessReport($user->getOID(), $report)) {
                require_once('report/error_code.csp');
                cb_throw_error(E_GRN_RPRT_REPORT_DENY_ACCESS);
            }
        }
        $star_data = new GRN_Star_Data();
        $star_data->setModuleId(GRN_REPORT_MODULE_ID);
        $star_data->setSubjectData($report['name']);
        $org_data = ['rid' => $report_id, 'draft' => $report['draft']];
        $star_data->setUniqueId($report_id);
        $star_data->setOrgData($org_data);
        $star_data->setTimeStampData($report['mtime']);

        return $star_data;
    }

    function updateStarData(&$user)
    {
        assert('is_object($user) && is_a($user, \'cb_user\')');
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        require_once('star/logic.csp');
        $logic = GRN_Star_StarLogic::getInstance();
        $star_list = $logic->getList($user, GRN_REPORT_MODULE_ID, 0, -1);

        foreach ($star_list as $starid => $star_data) {
            if (isset($star_data['org_data'])) {
                $rid = array_key_exists('rid', $star_data['org_data'])
                    ? $star_data['org_data']['rid'] : null;
                require_once('report/controller_util.csp');
                $report_util
                    = GRN_Report_Report_Controller_Utility::getInstance();
                $translation_map_report = [
                    'rid'      => '_id',                        //Report ID
                    'name'     => 'name',                 //Report Name
                    'mtime'    => 'mtime',                //Report Modify Time
                    'category' => 'category',
                    'creator'  => 'creator',              //Report Creator
                    'private'  => 'private',
                ];

                require_once('report/report_manager_base.csp');
                $report_manager_base
                    = GRN_Report_Report_Manager_Base::getInstance();
                if ($report_manager_base->get($rid) === false) {
                    // if event don't exist, remove star item.
                    $logic->removeByIds($user, [$starid]);
                    continue;
                }
                $report = $report_util->getView($rid, $translation_map_report);

                if ( ! $this->isAccessReport($user->getOID(), $report)) {
                    $logic->removeByIds($user, [$starid]);
                    continue;
                }
                $star_data = new GRN_Star_Data();
                $star_data->setSubjectData($report['name']);
                $star_data->setTimeStampData($report['mtime']);

                $star_data->setModuleId(GRN_REPORT_MODULE_ID);
                $star_data->setUniqueId($rid);
                $logic->modify($user, $star_data);
            } else {
                // if org_data isn't exist, remove star item
                $logic->removeByIds($user, [$starid]);
            }
        }
    }

    function isAccessReport($login_id, $report)
    {
        $category_id = $report['category'];
        $creator_id = isset($report['creator']) ? $report['creator'] : null;
        if (0 == strlen($category_id)) {
            $category_id = GRN_REPORT_CATEGORY_NONPARTY_ID;
        }
        $rid = $report['rid'];
        require_once('report/notification_manager.csp');
        $notification_manager = GRN_Report_Notification_Manager::getInstance();
        $notificationUsers =& $notification_manager->getList($rid);
        require_once('report/controller_util.csp');
        $category_util = GRN_Report_Category_Controller_Utility::getInstance();

        if ($category_id == GRN_REPORT_CATEGORY_NONPARTY_ID
            || $category_util->checkCategoryAccess($category_id, false)
        ) {
            $is_accessible_category = true;
        } else {
            $is_accessible_category = false;
        }

        require_once('report/member_manager.csp');
        $member_manager = GRN_Report_Member_Manager::getInstance();
        $members =& $member_manager->getList($rid);
        if ($login_id == $creator_id) {
            return true;
        }
        if (in_array($login_id, $members)) {
            return true;
        }
        if (in_array($login_id, $notificationUsers)) {
            return true;
        }
        if ( ! $report['private'] && $is_accessible_category) {
            return true;
        }

        return false;
    }

    /**
     * Cleanup Application Data
     */
    function cleanup()
    {
        $this->_cleanup_report_draft();
    }

    /**
     * Cleanup deleted users' draft reports and attached files with the reports
     *
     * @access private
     */
    function _cleanup_report_draft()
    {
        global $G_container_base;
        $logger = $G_container_base->getInstance('cleanup_logger');

        $app_locator = GRN_ApplicationLocator::instance();
        $manager = $app_locator->getTableManager('report');

        require_once('report/table.csp');
        require_once('report/file.csp');
        $tab_filerelation = $manager->getTableInfo('GRN_Report_FileRelation');
        $tab_itemdata = $manager->getTableInfo('GRN_Report_ItemData');
        $tab_report = $manager->getTableInfo('GRN_Report_Report');
        $tab_file = $manager->getTableInfo('GRN_Report_File');

        // Remove attach files.
        $rowset = new CB_RowSet($tab_file, 'file');
        $rowset->addJoin($tab_filerelation, 'filerelation.col_file = file._id',
            CB_DATABASE_LEFT_JOIN, 'filerelation');
        $rowset->addJoin($tab_itemdata,
            'filerelation.col_item_data = itemdata._id', CB_DATABASE_LEFT_JOIN,
            'itemdata');
        $rowset->addJoin($tab_report, 'itemdata.col_report = report._id',
            CB_DATABASE_LEFT_JOIN, 'report');
        $condition = $rowset->queryf("report.col_creator IS NULL AND " .
                                     "report.col_draft = '1'");
        $rowset->addCondition($condition);

        while ( ! is_null($file = $rowset->iterate())) {
            $file_id = $file->getOID();
            $logger->log('[delete] report file(fid:' . $file_id . ')');
            $file->delete();
        }
        $rowset->destroy();
        unset($rowset);

        // Remove report.
        $rowset = new CB_RowSet($tab_report, 'report');
        $rowset->addCondition($condition);

        while ( ! is_null($report = $rowset->iterate())) {
            $report_id = $report->getOID();
            $logger->log('[delete] report(pid:' . $report_id . ')');
            $report->delete();
        }
        $rowset->destroy();

        unset($tab_filerelation, $tab_itemdata, $tab_report, $tab_file, $rowset, $manager, $app_locator, $logger);
    }

}

/**
 * System Config
 */
class GRN_Report_SystemConfig
{
    /**
     * @access protected
     */
    var $_profile;

    /**
     * @access private
     */
    var $_readonly = true;


    function __construct(& $profile)
    {
        $this->_profile =& $profile;

        $dummy = null;
        if ($profile->getAttribute('init', $dummy) === false) {
            $this->_initialize();
        }
    }

    /**
     * @access private
     */
    function _initialize()
    {
        $this->_profile->removeAttribute('enable_follow');
        $this->_profile->removeAttribute('enable_htmleditor');
        $this->_profile->removeAttribute('enable_follow_autolink');
        $this->_profile->removeAttribute('init');

        $this->_profile->createAttribute('enable_follow', true);
        $this->_profile->createAttribute('enable_htmleditor', true);
        $this->_profile->createAttribute('enable_follow_autolink', true);
        $this->_profile->createAttribute('init', true);
    }

    /**
     * @access protected
     */
    function _copy($name, & $default)
    {
        $this->_profile->createAttribute($name, $default->_get($name));
    }

    /**
     * @access protected
     */
    var $_settings = [];

    /**
     * @access protected
     */
    function &_get($name)
    {
        if (array_key_exists($name, $this->_settings)) {
            return $this->_settings[$name];
        }

        $setting = null;
        $this->_profile->getAttribute($name, $setting);
        $this->_settings[$name] = $setting;

        return $setting;
    }

    /**
     * @access protected
     */
    function _set($name, $value)
    {
        $this->_settings[$name] = $value;
        $result = $this->_profile->updateAttribute($name,
            $value);
        if ( ! $result) {
            $this->_profile->createAttribute($name, $value);
        }
    }

    /**
     * フォロー書き込みの初期値
     *
     * @return bool
     */
    function getEnableFollow()
    {
        $EnableFollow = $this->_get('enable_follow');
        if ( ! isset($EnableFollow)) {
            $EnableFollow = true;
        }

        return $EnableFollow;
    }

    function setEnableFollow($setting)
    {
        if ($this->_readonly) {
            return false;
        }

        $this->_set('enable_follow', $setting);

        return true;
    }

    /**
     * リッチエディタの利用可否
     *
     * @return bool
     */
    function getEnableHtmlEditor()
    {
        return $this->_get('enable_htmleditor');
    }

    function setEnableHtmlEditor($setting)
    {
        if ($this->_readonly) {
            return false;
        }

        $this->_set('enable_htmleditor', $setting);

        return true;
    }

    /**
     * get enable/disable autolink function in comment bulletin
     *
     * @return Boolean
     */
    function getEnableFollowAutoLink()
    {
        $EnableFollowAutoLink = $this->_get('enable_follow_autolink');
        if ( ! isset($EnableFollowAutoLink)) {
            $EnableFollowAutoLink = true;
        }

        return $EnableFollowAutoLink;
    }

    function setEnableFollowAutoLink($setting)
    {
        if ($this->_readonly) {
            return false;
        }

        $this->_set('enable_follow_autolink', $setting);

        return true;
    }

    function getAllUsersAttendeesUsers()
    {
        $report_allusers = $this->_get('report_allusers_attendeesusers');

        return $report_allusers;
    }

    function setAllUsersAttendeesUsers($setting)
    {
        if ($this->_readonly) {
            return false;
        }
        $this->_set('report_allusers_attendeesusers', $setting);

        return true;
    }
}
