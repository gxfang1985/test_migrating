<?php

require_once('developer/azunit.csp');
require_once('report/form_logic_base.csp');

class test_grn_report_form_logic_base extends CB_TestCase
{
    /** database **/
    var $_database = null;

    /** table_name **/
    var $_form_table_name = null;
    var $_item_table_name = null;

    /** Test Target List **/
    var $_form_list = null;
    var $_item_list = null;

    /** Unique key **/
    var $_unique_key = null;

    /** Basic Value List **/
    var $_form_value_list = [];
    var $_item_value_list = [];

    /**
     * Constructor
     *
     * @access private
     *
     * @param string $test_method //Test Method Name
     */
    function test_grn_report_form_logic_base($test_method)
    {
        //Initialize Parent Class
        parent::CB_TestCase($test_method);

        //Initalize Randam Key
        mt_srand(time());

        //Initialize Unique Key
        $this->_unique_key = $test_method . time();

        //Get Database Connection
        global $G_container_base;
        $this->_database =& $G_container_base->getInstance('dbconn');

        //Set table name
        $this->_form_table_name = 'tab_grn_report_form';
        $this->_item_table_name = 'tab_grn_report_item';

        //Set Basic Value List
        $this->_form_value_list = [
            'col_name'        => 'name_',
            'col_foreign_key' => 'foreign_key_',
            'col_type'        => '',
            'col_memo'        => 'memo_',
            'col_active'      => '',
            'col_list_index'  => '',
        ];

        $this->_item_value_list = [
            'col_foreign_key'        => 'foreign_key_',
            'col_list_index'         => '2',
            'col_display_name'       => 'display_name_',
            'col_option_string'      => 'option_string_',
            'col_option_string_type' => '',
            'col_description'        => 'description_',
            'col_description_type'   => '',
            'col_description_editor' => '',
            'col_required'           => '',

        ];

        return;
    }

    /**
     * Initialize Test
     *
     * @access private
     */
    function _initialize()
    {
        //Get Unique Key
        $unique_key = $this->_unique_key;

        //Create Test Form
        $this->_createForm($unique_key);

        //Create Test Item
        $this->_createItem($unique_key);

        return;
    }

    /**
     * finalize Test
     *
     * @access private
     */
    function _finalize()
    {
        //Delete Test Item
        $this->_deleteItem();

        //Delete Test Form
        $this->_deleteForm();

        return;
    }

    /**
     * Create Form
     *
     * @access private
     *
     * @param string $unique_key //Unique key
     */
    function _createForm($unique_key)
    {
        for ($i = 0; $i < 5; $i++) {
            //Create Query
            $form_value_list = [];
            foreach ($this->_form_value_list as $key => $value) {
                switch ($key) {
                    case 'col_type':
                        $form_value_list[$key] = 0;
                        break;
                    default:
                        if (strlen($value) > 0) {
                            $form_value_list[$key] = cb_queryf($this->_database,
                                '"@S@S"', $value, $i);
                        } else {
                            $form_value_list[$key] = cb_queryf($this->_database,
                                '"@S"', $i);
                        }
                        break;
                }
            }
            $column_string = implode(',', array_keys($form_value_list));
            $value_string = implode(',', $form_value_list);
            $query = sprintf('INSERT %s(%s) VALUES (%s)',
                $this->_form_table_name, $column_string, $value_string);

            //Execute Query
            $result = $this->_database->query($query);
            if ($result === false) {
                //Throw Query Error
                $this->_database->throwError([
                    'query' => 'query failed: ' . $query
                ]);
            }

            //Add Cache
            $form_id = $this->_database->get_insert_id();
            foreach (array_keys($form_value_list) as $key) {
                $this->_form_list[$form_id][$key] = mb_ereg_replace('"', '',
                    $form_value_list[$key]);
            }
        }

        return;
    }

    /**
     * Delete Form
     *
     * @access private
     *
     * @param string $unique_key //Unique key
     */
    function _deleteForm()
    {
        //Check Form Count
        if (count($this->_form_list) == 0) {
            return;
        }

        //Create Query
        $where_string = cb_queryf($this->_database, '_id IN (@S)',
            implode(',', array_keys($this->_form_list)));
        $query = sprintf('DELETE FROM %s WHERE %s',
            $this->_form_table_name, $where_string);

        //Execute Query
        $result = $this->_database->query($query);
        if ($result === false) {
            //Throw Query Error
            $this->_database->throwError([
                'query' => 'query failed: ' . $query
            ]);
        }

        //Delete Cache
        $this->_form_list = [];

        return;
    }


    /**
     * Create Item
     *
     * @access private
     *
     * @param string $unique_key //Unique key
     */
    function _createItem($unique_key)
    {
        for ($i = 0; $i < 5; $i++) {
            //Create Query
            $item_value_list = [];
            foreach ($this->_item_value_list as $key => $value) {
                switch ($key) {
                    default:
                        if (strlen($value) > 0) {
                            $item_value_list[$key] = cb_queryf($this->_database,
                                '"@S@S"', $value, $i);
                        } else {
                            $item_value_list[$key] = cb_queryf($this->_database,
                                '"@S"', $i);
                        }
                        break;
                }
            }
            $column_string = implode(',', array_keys($item_value_list));
            $value_string = implode(',', $item_value_list);
            $query = sprintf('INSERT %s(%s) VALUES (%s)',
                $this->_item_table_name, $column_string, $value_string);

            //Execute Query
            $result = $this->_database->query($query);
            if ($result === false) {
                //Throw Query Error
                $this->_database->throwError([
                    'query' => 'query failed: ' . $query
                ]);
            }

            //Add Cache
            $item_id = $this->_database->get_insert_id();
            foreach (array_keys($item_value_list) as $key) {
                $this->_item_list[$item_id][$key] = mb_ereg_replace('"', '',
                    $item_value_list[$key]);
            }
        }

        return;
    }

    /**
     * Delete Item
     *
     * @access private
     *
     * @param string $unique_key //Unique key
     */
    function _deleteItem()
    {
        if (count($this->_item_list) === 0) {
            return;
        }
        //Create Query
        $where_string = cb_queryf($this->_database, '_id IN (@S)',
            implode(',', array_keys($this->_item_list)));
        $query = sprintf('DELETE FROM %s WHERE %s',
            $this->_item_table_name, $where_string);

        //Execute Query
        $result = $this->_database->query($query);
        if ($result === false) {
            //Throw Query Error
            $this->_database->throwError([
                'query' => 'query failed: ' . $query
            ]);
        }

        //Delete Cache
        $this->_item_list = [];

        return;
    }


    /**
     * Validate Form
     *
     * @access  private
     *
     * @param  int $form_id        //Form ID
     * @param  int $validate_props //Validate Properties
     *
     * @return BOOL                              //Validate Result
     */
    function _validateForm($form_id, $validate_props)
    {
        //Get Link From Table
        $form =& $this->_form_list[$form_id];

        //Validate Properties
        foreach ($validate_props as $prop_name => $prop_value) {
            //Check Assertion
            if (strval($form[$prop_name]) !== strval($prop_value)) {
                //Finalize Test
                $this->_finalize();
                assert('strval($form[$prop_name]) === strval($prop_value)');
            }
        }

        return true;
    }


    /**
     * Get Form
     *
     * @access  private
     * @return BOOL                  //Validate Result
     */
    function test_get()
    {
        //Initialize Test
        $this->_initialize();

        //Get Form Logic Base Instance
        $logic = GRN_Report_Form_Logic_Base::getInstance();

        //Test Form List
        $form_list =& $this->_form_list;
        foreach (array_keys($form_list) as $form_id) {
            //Get form
            $form = $logic->get($form_id);

            //Create Validate Properties
            $validate_props = [];
            foreach (array_keys($this->_form_value_list) as $form_name) {
                $validate_props[$form_name] = $form[$form_name];
            }

            //Validate Form
            $this->_validateForm($form_id, $validate_props);
        }

        //Finalize Test
        $this->_finalize();

        return true;
    }

    /**
     * Get Form(with Extra Information)
     *
     * @access  private
     * @return BOOL                  //Validate Result
     */
    function test_getEx()
    {
        //Initialize Test
        $this->_initialize();

        //Get Form Logic Base Instance
        $logic = GRN_Report_Form_Logic_Base::getInstance();

        //Test Form List
        $form_list =& $this->_form_list;
        foreach (array_keys($form_list) as $form_id) {
            //Get form
            $form =& $logic->getEx($form_id);

            //Create Validate Properties
            $validate_props = [];
            foreach (array_keys($this->_form_value_list) as $property_name) {
                $validate_props[$property_name] = $form['f_' . $property_name];
            }

            //Validate Form
            $this->_validateForm($form_id, $validate_props);
        }

        //Finalize Test
        $this->_finalize();

        return true;
    }

    /**
     * Get Form List
     *
     * @access  private
     * @return BOOL                  //Validate Result
     */
    function test_getList()
    {
        //Initialize Test
        $this->_initialize();

        //Get Form Logic Base Instance
        $logic = GRN_Report_Form_Logic_Base::getInstance();

        //Test Form List
        $form_list =& $logic->getList();

        foreach (array_keys($form_list) as $form_id) {
            //Get Form
            $form =& $form_list[$form_id];

            //Create Validate Properties
            $validate_props = [];
            foreach (array_keys($this->_form_value_list) as $property_name) {
                $validate_props[$property_name] = $form[$property_name];
            }

            //Validate Form
            $this->_validateForm($form_id, $validate_props);
        }

        //Finalize Test
        $this->_finalize();

        return true;
    }

    /**
     * Get Form Count
     *
     * @access  private
     * @return BOOL                  //Validate Result
     */
    function test_getCount()
    {
        //Initialize Test
        $this->_initialize();

        //Get Form Logic Base Instance
        $logic = GRN_Report_Form_Logic_Base::getInstance();

        //Test Form Count
        $form_count = $logic->getCount();

        //Validate Form Count
        assert('($form_count) == count($this->_form_list)');

        //Finalize Test
        $this->_finalize();

        return true;
    }
}

cb_test_run();

?>
