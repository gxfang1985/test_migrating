<?php
/**
 * Report Application Filter Base Class
 *
 * @author  Shou Aoki 2009/09
 * @version 1.0
 * @package grn.report
 */

/** Report Application **/
require_once('report/resources.csp');
require_once('report/table_manager.csp');
require_once('grn/application.csp');
require_once('grn/numeric_util.csp');

/**
 * Filter Manager Base Class
 *
 * @package grn.report
 */
class GRN_Report_Filter_Manager_Base
{
    /** Table Name **/
    protected $_filter_table_name = null;
    protected $_condition_table_name = null;
    protected $_form_relation_table_name = null;
    protected $_form_condition_table_name = null;

    /** Filter List **/
    protected $_list = [];

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
        $this->_filter_table_name = 'tab_grn_report_filter';
        $this->_condition_table_name = 'tab_grn_report_filtercondition';
        $this->_form_condition_table_name
            = 'tab_grn_report_filterformcondition';
        $this->_form_relation_table_name
            = 'tab_grn_report_filterformrelations';
    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Report_Filter_Manager_Base
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Filter
     *
     * @param  int $filter_id //Filter ID
     * @param  int $lock_mode //Lock Mode
     *
     * @return array  $filter                      //Filter Infilteration Array
     */
    function &get($filter_id, $lock_mode = CB_DATABASE_DEFAULT_LOCK)
    {

        $filter = $this->getDirect($filter_id, $lock_mode);

        return $filter;
    }

    /**
     * Get Filter Direct
     *
     * @param  int $filter_id //Filter ID
     * @param  int $lock_mode //Lock Mode
     *
     * @return array  $filter                      //Filter Infilteration Array
     */
    function getDirect($filter_id, $lock_mode = CB_DATABASE_DEFAULT_LOCK)
    {
        $filter = [];

        //Get Database
        $database = GRN_Report_Table_Manager::getDataBase();

        //Create Column List
        $column_list = implode(',',
            GRN_Report_Table_Manager::getColumnList(GRN_REPORT_TABLE_FILTER,
                'f'));

        //Create Condition
        $condition = '';
        if (is_numeric($filter_id)) {
            $condition = cb_queryf($database, "WHERE f._id = '@S'", $filter_id);
        }

        //Create Query
        $query = sprintf('SELECT %s FROM %s as f %s', $column_list,
            $this->_filter_table_name, $condition);
        $query = $database->select_format($query, 0, 1, $lock_mode);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Get Filter
        $filter = $database->fetch_assoc($result);
        $database->free_result($result);

        if ( ! $filter) {
            return false;
        }

        $condition = $this->_getFilterConditions($filter_id);
        $filter["conditions"] = $condition;

        //Return Filter
        return $filter;
    }

    /**
     * Get Filter List
     *
     * @param  int  $filter_id //Filter ID
     * @param  bool $refresh   //Refresh Cache
     * @param  int  $lock_mode //Lock Mode
     *
     * @return array  $filter_list                 //Filter Infilteration List
     */
    /**
     * @param $filter_id
     * @param $refresh
     * @param $lock_mode
     *
     * @return unknown_type
     */
    function &getSystemList(
        $category_id = null,
        $option = [],
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $filter_list = [];

        //Get Database
        $database = GRN_Report_Table_Manager::getDataBase();

        //Create Column List
        $column_list = implode(',',
            GRN_Report_Table_Manager::getColumnList(GRN_REPORT_TABLE_FILTER));

        //Create condition
        $condition = '';
        if (GRN_REPORT_CATEGORY_NONPARTY_ID != $category_id) {
            /* GRN2-1936 pending
            $condition = cb_queryf($database,"WHERE col_category = '@S' AND col_personal_user IS NULL",$category_id);
             */
            $condition = cb_queryf($database, "WHERE col_category = '@S'",
                $category_id);
        } else {
            /* GRN2-1936 pending
            $condition = "WHERE col_category is null AND col_personal_user IS NULL";
             */
            $condition = "WHERE col_category is null";
        }

        //Create Query
        $query = sprintf('SELECT %s FROM %s %s ORDER BY col_list_index, _id',
            $column_list, $this->_filter_table_name, $condition);
        if (is_array($option) && array_key_exists('list', $option)) {
            $list =& $option['list'];
            $query = $database->select_format($query, $list['offset'],
                $list['limit'], $lock_mode);
        } else {
            $query = $database->select_format($query, 0, -1, $lock_mode);
        }
        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Update Filter List
        $count = $database->num_rows($result);
        for ($i = 0; $i < $count; $i++) {
            $row = $database->fetch_assoc($result);
            $filter_list[$row['_id']] = $row;
        }
        $database->free_result($result);

        $filter_list = $this->_fillCondition($filter_list);

        //Return Filter List
        return $filter_list;
    }

    /**
     * Get Filter Count
     *
     * @param  int   $category_id //Category ID
     * @param  array $option
     * @param  int   $lock_mode   //Lock Mode
     *
     * @return int    $filter_count              //Filter Count
     */
    function getSystemFilterCount(
        $category_id = null,
        $option = [],
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Database
        $database = GRN_Report_Table_Manager::getDataBase();

        $condition = '';
        if ( ! is_null($category_id)) {
            /* GRN2-1936 pending
            $condition = cb_queryf($database,"WHERE col_category = '@S' AND col_personal_user IS NULL",$category_id);
             */
            $condition = cb_queryf($database, "WHERE col_category = '@S'",
                $category_id);
        } else {
            /* GRN2-1936 pending
            $condition = cb_queryf($database,"WHERE col_category IS NULL AND col_personal_user IS NULL");
             */
            $condition = cb_queryf($database, "WHERE col_category IS NULL");
        }

        //Create Query
        $query = sprintf('SELECT COUNT(*) FROM %s %s',
            $this->_filter_table_name, $condition);
        if (is_array($option) && array_key_exists('list', $option)) {
            $list =& $option['list'];
            $query = $database->select_format($query, $list['offset'],
                $list['limit'], $lock_mode);
        } else {
            $query = $database->select_format($query, 0, -1, $lock_mode);
        }

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }
        $row = $database->fetch_assoc($result);
        $database->free_result($result);

        //Return Filter Count
        return $row['COUNT(*)'];
    }

    function &getListByFilterIdList(
        $filter_id_list,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        if ( ! $filter_id_list || count($filter_id_list) == 0) {
            $ret = [];

            return $ret;
        }


        $filter_list = [];

        //Get Database
        $database = GRN_Report_Table_Manager::getDataBase();

        //Create Column List
        $column_list = implode(',',
            GRN_Report_Table_Manager::getColumnList(GRN_REPORT_TABLE_FILTER,
                'f'));

        foreach ($filter_id_list as $key => $filter_id) {
            $filter_id_list[$key] = cb_queryf($database, "'@S'", $filter_id);
        }

        //Create condition
        $condition = '';
        if (is_array($filter_id_list)) {
            $condition = sprintf("WHERE f._id in (%s)",
                implode(',', $filter_id_list));
        }

        //Create Query
        $query
            = sprintf('SELECT %s FROM %s as f %s ORDER BY f.col_list_index, f._id',
            $column_list, $this->_filter_table_name, $condition);
        $query = $database->select_format($query, 0, -1, $lock_mode);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Update Filter List
        $count = $database->num_rows($result);
        for ($i = 0; $i < $count; $i++) {
            $row = $database->fetch_assoc($result);
            $filter_list[$row['_id']] = $row;
        }
        $database->free_result($result);

        $filter_list = $this->_fillCondition($filter_list);

        //Return Filter List
        return $filter_list;
    }

    function _fillCondition($filter_list)
    {
        $filterIds = array_keys($filter_list);
        $conditions = $this->_getFilterConditionsList($filterIds);

        foreach (array_keys($filter_list) as $fid) {
            $filter_list[$fid]["conditions"] = @$conditions[$fid];
        }

        return $filter_list;
    }

    function _getFilterConditionsList(
        $filter_ids,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        if (count($filter_ids) == 0) {
            return [];
        }

        //Get Database
        $database = GRN_Report_Table_Manager::getDataBase();

        //Get Columns
        $columns
            = GRN_Report_Table_Manager::getColumnList(GRN_REPORT_TABLE_FILTERCONDITION,
            'f');

        foreach ($filter_ids as $key => $filter_id) {
            $filter_ids[$key] = cb_queryf($database, "'@S'", $filter_id);
        }

        //Create Condition
        $where = "";
        if (is_array($filter_ids)) {
            $where = sprintf('f.col_filter in (%s)', implode(',', $filter_ids));
        }

        //Create Query
        $query = sprintf('SELECT %s FROM %s as f WHERE %s ORDER BY _id',
            implode(',', $columns), $this->_condition_table_name, $where);
        $query = $database->select_format($query, 0, -1, $lock_mode);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        $count = $database->num_rows($result);
        $conditions = [];
        for ($i = 0; $i < $count; $i++) {
            $row = $database->fetch_assoc($result);
            $conditions[$row['col_filter']][$row['_id']] = $row;
        }
        $database->free_result($result);

        return $conditions;
    }

    function _getFilterConditions(
        $filter_id,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $conditions = $this->_getFilterConditionsList([$filter_id], $lock_mode);
        $result = [];
        if (is_array($conditions)
            && array_key_exists($filter_id, $conditions)
        ) {
            $result = $conditions[$filter_id];
        }

        return $result;
    }

    function getDisplayUsers($filter_id, $lock_mode = CB_DATABASE_DEFAULT_LOCK)
    {
        $userIds = $this->getDisplayUserIds($filter_id, $lock_mode);

        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $users = [];
        foreach ($userIds as $userId) {
            $user = $uum->getUser($userId);
            if ($user) {
                $users[] = clone $user;
            }
        }

        return $users;
    }

    function getDisplayUserIds(
        $filter_id,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Database
        $database = GRN_Report_Table_Manager::getDataBase();

        $tablename
            = GRN_Report_Table_Manager::getTableName(GRN_REPORT_TABLE_FILTERUSERRELATIONS);
        $query = cb_queryf($database,
            "select f.col_user from @S as f where f.col_filter = '@S' order by f._id asc",
            $tablename, $filter_id);
        $query = $database->select_format($query, 0, -1, $lock_mode);
        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //get userid list
        $count = $database->num_rows($result);
        $userIds = [];
        for ($i = 0; $i < $count; $i++) {
            $row = $database->fetch_assoc($result);
            $userIds[] = $row['col_user'];
        }
        $database->free_result($result);

        return $userIds;
    }

    //現在の仕様では関連は一件のみ
    function getFilterFormRelation(
        $filter_id,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $database = GRN_Report_Table_Manager::getDataBase();

        $tablename
            = GRN_Report_Table_Manager::getTableName(GRN_REPORT_TABLE_FILTERFORMRELATIONS);
        $query = cb_queryf($database,
            "SELECT * FROM @S WHERE col_filter = '@S'", $tablename, $filter_id);
        $query = $database->select_format($query, 0, -1, $lock_mode);
        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        $row = $database->fetch_assoc($result);
        $database->free_result($result);

        return $row;
    }

    //現在の仕様では条件は一件のみ
    function getFilterFormCondition(
        $filter_id,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $database = GRN_Report_Table_Manager::getDataBase();

        $tablename
            = GRN_Report_Table_Manager::getTableName(GRN_REPORT_TABLE_FILTERFORMCONDITION);
        $query = cb_queryf($database,
            "SELECT * FROM @S WHERE col_filter = '@S'", $tablename, $filter_id);
        $query = $database->select_format($query, 0, -1, $lock_mode);
        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        $row = $database->fetch_assoc($result);
        $database->free_result($result);

        return $row;
    }

    /**
     * Get Personal Filter List
     *
     * @param  int $user_id   //User ID
     * @param  int $lock_mode //Lock Mode
     *
     * @return array  $filter_list               //Filter Array List
     */
    function getPersonalFilterListByUserId(
        $user_id,
        $option = [],
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $filter_list = [];

        //Get Database
        $database = GRN_Report_Table_Manager::getDataBase();

        //Create Column List
        $column_list = implode(',',
            GRN_Report_Table_Manager::getColumnList(GRN_REPORT_TABLE_FILTER));

        //Create Condition
        if ( ! is_numeric($user_id)) {
            return $filter_list;
        }

        $condition = cb_queryf($database, "WHERE col_personal_user = '@S'",
            $user_id);

        //Create Query
        $query = sprintf('SELECT %s FROM %s %s ORDER BY col_list_index, _id',
            $column_list, $this->_filter_table_name, $condition);
        if (is_array($option) && array_key_exists('list', $option)) {
            $list =& $option['list'];
            $query = $database->select_format($query, $list['offset'],
                $list['limit'], $lock_mode);
        } else {
            $query = $database->select_format($query, 0, -1, $lock_mode);
        }

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Get Filter List
        $count = $database->num_rows($result);
        for ($i = 0; $i < $count; $i++) {
            $row = $database->fetch_assoc($result);
            $filter_list[$row['_id']] = $row;
        }
        $database->free_result($result);

        $filter_list = $this->_fillCondition($filter_list);

        //Return Filter
        return $filter_list;
    }

    /**
     * Get Personal Filter Count by user id
     *
     * @param  int   $user_id   //User ID
     * @param  array $option
     * @param  int   $lock_mode //Lock Mode
     *
     * @return int    $filter_count          //Filter Count
     */
    function getPersonalFilterCountByUserId(
        $user_id,
        $option = [],
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        cb_numeric_check($user_id, E_GRN_RPRT_INVALID_USER_ID);

        $database = GRN_Report_Table_Manager::getDataBase();
        $condition = cb_queryf($database, "WHERE col_personal_user = '@S'",
            $user_id);
        $query = sprintf('SELECT COUNT(*) FROM %s %s',
            $this->_filter_table_name, $condition);
        if (is_array($option) && array_key_exists('list', $option)) {
            $list =& $option['list'];
            $query = $database->select_format($query, $list['offset'],
                $list['limit'], $lock_mode);
        } else {
            $query = $database->select_format($query, 0, -1, $lock_mode);
        }

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }
        $row = $database->fetch_assoc($result);
        $database->free_result($result);

        //Return Filter Count
        return $row['COUNT(*)'];
    }
}


