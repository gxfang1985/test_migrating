<?php
/**
 * Report Application Partner Class
 *
 * @data    2009/09
 * @version 1.0
 * @package grn.repot
 */

/** Report Application **/
require_once('report/resources.csp');
require_once('report/table_manager.csp');

/**
 * Partner Logic Class
 *
 * @package grn.report
 */
class GRN_Report_Partner_Logic
{
    //Partner Manager Instance
    private $_partner_manager = null;

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Report_Partner_Logic $instance                  //Instance of GRN_Report_Partner_Logic
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Partner Manager
     *
     * @return object $partner_manager          //Partner Manager
     */
    private function _getPartnerManager()
    {
        if (is_null($this->_partner_manager)) {
            require_once('report/partner_manager.csp');
            $this->_partner_manager = GRN_Report_Partner_Manager::getInstance();
        }

        return $this->_partner_manager;
    }

    /**
     * Add Multiple Partner
     *
     * @param  int $report_id //Report ID
     * @param  array<GRN_ReportPartnerData>    $partners      //User ID List
     */
    public function addMulti($report_id, $partners)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        require_once('address/error_code.csp');
        cb_trim_check($report_id, E_GRN_RPRT_REPORT_INVALID_ID);

        if (is_array($partners) && count($partners) > 0) {
            $properties_list = $this->createPropertyList($partners, $report_id);

            $partner_manager = $this->_getPartnerManager();
            $partner_manager->createMulti($properties_list);
        }
    }

    /**
     *
     * @param  array<GRN_ReportPartnerData> $partners
     * @param  int $report_id
     *
     * @return array
     */
    private function createPropertyList($partners, $report_id = null)
    {
        if ( ! $partners) {
            return [];
        }

        $properties_list = [];
        foreach ($partners as $partner) {
            $properties = [];
            $properties[GRN_REPORT_COLUMN_REPORT] = $report_id;
            $properties[GRN_REPORT_COLUMN_ADDRESS]
                = $partner->getAddressId();
            $properties[GRN_REPORT_COLUMN_SUBJECT]
                = $partner->getSubject();
            $properties[GRN_REPORT_COLUMN_COMPANY_NAME]
                = ! is_null($partner->getCompanyName())
                ? $partner->getCompanyName() : '';

            $properties_list[] = $properties;
        }

        return $properties_list;
    }

    /**
     * Delete All Partner by Report ID
     *
     * @param  int $report_id //Report ID
     */
    public function deleteAllByReportId($report_id)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        //Report ID
        cb_trim_check($report_id, E_GRN_RPRT_REPORT_INVALID_ID);

        $partner_manager = $this->_getPartnerManager();
        $partner_manager->removeAllByReportId($report_id);
    }

    public function deleteAllByAddressId($address_id)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        //Report ID
        cb_trim_check($address_id, E_GRN_ADDRESS_INVALID_CARD_ID);

        $partner_manager = $this->_getPartnerManager();
        $partner_manager->removeAllByAddressId($address_id);
    }

    public function changeOrder($report_id, $partner_id_list)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');

        //Report ID
        cb_trim_check($report_id, E_GRN_RPRT_REPORT_INVALID_ID);

        if ( ! is_array($partner_id_list) || count($partner_id_list) == 0) {
            return;
        }

        $partner_manager = $this->_getpartnermanager();
        $partner_manager->changeOrder($report_id, $partner_id_list);
    }

    /**
     * Update partner by report ID
     *
     * @param int $report_id
     * @param array<GRN_ReportPartnerData>  $partners
     */
    public function update($report_id, $partners)
    {
        $this->deleteAllByReportId($report_id);
        $this->addMulti($report_id, $partners);
    }
}
