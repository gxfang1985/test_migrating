<?php
/**
 * Report Application Partner Class
 *
 * @date    2009/09
 * @version 1.0
 * @package grn.report
 */

/** Report Application **/
require_once('report/resources.csp');
require_once('report/table_manager.csp');

/**
 * Partner Manager Class
 *
 * @package grn.report
 */
class GRN_Report_Partner_Manager
{
    /**
     * Constructor
     *
     * @return none
     */
    private function __construct()
    {
        //Sync Parent Table and Partner List Cache
        $this->_table_name = 'tab_grn_report_partner';
    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Report_Partner_Manager
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Create Partners
     *
     * @param array $property_list_array //Array of Property List(Name=>Value)
     */
    public function createMulti($property_list_array)
    {
        $column_list
            = GRN_Report_Table_Manager::getColumnList(GRN_REPORT_TABLE_PARTNER);
        $key = array_keys($property_list_array);
        $property_list = $property_list_array[$key[0]];
        $column_string
            = GRN_Report_Table_Manager::createColumnString($column_list,
            $property_list);
        $value_strings = [];

        foreach ($property_list_array as $property_list) {
            $value_strings[]
                = GRN_Report_Table_Manager::createValueString($column_list,
                $property_list);
        }
        GRN_Report_Table_Manager::createMulti($this->_table_name,
            $column_string, $value_strings);
    }

    /**
     * Get User ID List of Report Partner
     *
     * @param  int $report_id //Report ID
     *
     * @return array  $partner_list               //User ID List
     */
    public function &getList($report_id)
    {
        $database = GRN_Report_Table_Manager::getDatabase();

        //Create Column List
        $column_list = null;
        $column_list
            =& GRN_Report_Table_Manager::getColumnList(GRN_REPORT_TABLE_PARTNER);
        $column_list = implode(',', $column_list);


        $query = cb_queryf($database,
            'SELECT @S FROM @S WHERE col_report = "@S" ORDER BY col_list_index ASC, _id ASC',
            $column_list, $this->_table_name, $report_id);

        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Create User ID List
        $partner_list = [];
        $count = $database->num_rows($result);

        for ($i = 0; $i < $count; $i++) {
            $row = $database->fetch_assoc($result);
            $partner_list[] = $row;
        }

        $database->free_result($result);

        //Return Partner
        return $partner_list;
    }

    /**
     * Remove All Report
     *
     * @param int  $report_id //Report ID
     * @param BOOL $result    //Result
     */
    public function removeAllByReportId($report_id = null)
    {
        //Get Database
        $database = GRN_Report_Table_Manager::getDatabase();

        //Create Query
        $where_string = "";
        if ($report_id == -1) {
            $where_string = 'col_report IS NULL';
        } elseif ( ! is_null($report_id)) {
            $where_string = cb_queryf($database, 'col_report = "@S"',
                $report_id);
        }

        GRN_Report_Table_Manager::remove($this->_table_name, $where_string);

        return true;
    }

    /**
     * Remove All Report
     *
     * @param int  $address_id //Address ID
     * @param BOOL $result     //Result
     */
    public function removeAllByAddressId($address_id = null)
    {
        //Get Database
        $database = GRN_Report_Table_Manager::getDatabase();

        //Create Query
        $where_string = "";
        if ($address_id == -1) {
            $where_string = 'col_address IS NULL';
        } elseif ( ! is_null($address_id)) {
            $where_string = cb_queryf($database, 'col_address = "@S"',
                $address_id);
        }

        GRN_Report_Table_Manager::remove($this->_table_name, $where_string);

        return true;
    }

    /**
     * Change Partner Order
     *
     * @param  int $report_id       //Report ID
     * @param  int $partner_id_list //Partner ID List
     *
     * @return BOOL   $result                    //Result
     */
    public function changeOrder($report_id, $partner_id_list)
    {
        //Set New List Index
        $list_index = 0;
        foreach ($partner_id_list as $partner_id) {
            $this->_updateListIndex($report_id, $partner_id, $list_index);
            $list_index++;
        }

        return true;
    }

    private function _updateListIndex($report_id, $partner_id, $list_index)
    {
        //Get Database
        $database = GRN_Report_Table_Manager::getDatabase();
        $tablename
            = GRN_Report_Table_Manager::getTableName(GRN_REPORT_TABLE_PARTNER);

        $query = cb_queryf($database,
            "UPDATE @S SET col_list_index = '@S' WHERE col_report = '@S' AND col_address = '@S'",
            $tablename,
            $list_index,
            $report_id,
            $partner_id);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }
    }

    /**
     * Get report id list by address id
     *
     * @param int $address_id
     *
     * @return array $report_id_list
     */
    public function getReportIdListByAddressId($address_id)
    {
        if ( ! is_numeric($address_id)) {
            require_once('address/error_code.csp');
            cb_throw_error(E_GRN_ADDRESS_INVALID_CARD_ID);
        }

        $database = GRN_Report_Table_Manager::getDatabase();

        $query = sprintf("SELECT col_report FROM %s WHERE col_address='%s';",
            $this->_table_name, $database->escape($address_id));
        $result = $database->query($query);
        if ($result === false) {
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        $report_id_list = [];
        $count = $database->num_rows($result);
        for ($i = 0; $i < $count; $i++) {
            $row = $database->fetch_assoc($result);
            $report_id_list[] = $row['col_report'];
        }
        $database->free_result($result);

        return $report_id_list;
    }
}


