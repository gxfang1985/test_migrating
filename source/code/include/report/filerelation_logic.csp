<?php
/**
 * Report Application File Relation Class
 *
 * @data    2009/10
 * @version 1.0
 * @package grn.report
 */

/** Report Application **/
require_once('report/resources.csp');
require_once('report/filerelation_logic_base.csp');

/**
 * File Relation Logic Class
 *
 * @package grn.report
 */
class GRN_Report_FileRelation_Logic extends GRN_Report_FileRelation_Logic_Base
{
    //File Relation Manager Instance
    var $_file_relation_manager = null;

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {

    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Report_FileRelation_Logic
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get File Relation Logic
     *
     * @return object $file_relation_manager    //File Relation Manager
     */
    function _getFileRelationManager()
    {
        if (is_null($this->_file_relation_manager)) {
            require_once('report/filerelation_manager.csp');
            $this->_file_relation_manager
                = GRN_Report_FileRelation_Manager::getInstance();
        }

        return $this->_file_relation_manager;
    }

    /**
     * get Login User
     *
     * @access private
     * @return object $login_user                //Login User
     */
    function _getLoginUser()
    {
        //Get UUM Instance
        global $G_container_base;
        $grn_uum = $G_container_base->getInstance('uum');

        //Get Login User
        $login_user = $grn_uum->getLoginUser();
        if ( ! $login_user) {
            $ret = false;

            return $ret;
        }

        //Return Login User
        return $login_user;
    }

    /**
     * Add File and File Relation
     *
     * @param  int   $type    //Attach Type (Follow or ItemData)
     * @param  int   $data_id //Data ID
     * @param  array $file    //File Information Array
     *
     * @return int    $file_id                   //File ID
     */
    function _add($type, $report_id, $data_id, &$file)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        if ($type == GRN_REPORT_FOLLOW_FILE) {
            $error_code = E_GRN_RPRT_FOLLOW_INVALID_ID;
        } elseif ($type == GRN_REPORT_ITEM_DATA_FILE) {
            $error_code = E_GRN_RPRT_ITEMDATA_INVALID_ID;
        } else {
            $ret = false;

            return $ret;
        }

        cb_trim_check($data_id, $error_code);   //Data ID

        // Get Login User
        $login_user = $this->_getLoginUser();
        if ( ! $login_user) {
            $login_user = null;
        }

        //Create File
        require_once('report/file.csp');
        $file_manager = new GRN_Report_FileManager_Core();
        $file = $file_manager->createFile($login_user, $file, '');

        //Create Property List
        $property_list = [];
        if ($type == GRN_REPORT_FOLLOW_FILE) {
            $property_list[GRN_REPORT_COLUMN_FOLLOW] = $data_id;
        } elseif ($type == GRN_REPORT_ITEM_DATA_FILE) {
            $property_list[GRN_REPORT_COLUMN_ITEM_DATA] = $data_id;
        } else {
            $ret = false;

            return $ret;
        }
        $property_list[GRN_REPORT_COLUMN_REPORT] = $report_id;
        $property_list[GRN_REPORT_COLUMN_FILE] = $file->getOID();

        //Create New File
        $file_manager = $this->_getFilerelationManager();
        $file_id = $file_manager->create($property_list);

        return $file_id;
    }

    /**
     * Add Follow File and File Relation
     *
     * @param  int   $report_id //Report ID
     * @param  int   $follow_id //Follow ID
     * @param  array $file      //File Information Array
     *
     * @return int    $follow_file_id            //Follow File ID
     */
    function addFollowFile($report_id, $follow_id, &$file)
    {
        $ret = $this->_add(GRN_REPORT_FOLLOW_FILE, $report_id, $follow_id,
            $file);

        return $ret;
    }

    /**
     * Add Item Data File and File Relation
     *
     * @param  int   $report_id    //Report ID
     * @param  int   $item_data_id //Item Data ID
     * @param  array $file         //File Information Array
     *
     * @return int    $item_data_file_id         //Item Data File ID
     */
    function addItemDataFile($report_id, $item_data_id, &$file)
    {
        $ret = $this->_add(GRN_REPORT_ITEM_DATA_FILE, $report_id, $item_data_id,
            $file);

        return $ret;
    }

    /**
     * Update File
     *
     * @param  int   $file_id //File ID
     * @param  array $file    //File Information Array
     * @param  int   $data_id //Data ID
     *
     * @return array  $file_id         //File ID
     */
    function update($file_id, &$file, $data_id = null)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        cb_trim_check($file_id,
            E_GRN_RPRT_FILERELATION_INVALID_ID);    //File ID
        if ( ! is_a($file, 'CB_ServerFile')) {
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_RPRT_FILERELATION_NOT_INPUT_NECESSARY);
        }

        //Get File
        $file =& $this->getDirect($file_id);

        // Get Login User
        $login_user =& $this->_getLoginUser();
        if ( ! $login_user) {
            $login_user = null;
        }

        //Get GRN_File Object
        require_once('report/file.csp');
        $file_manager = new GRN_Report_FileManager_Core();
        $file_table =& $file_manager->getFileTable();
        $file_object =& $file_table->getRow($file[GRN_REPORT_COLUMN_FILE]);

        //Update File
        $file_object->update($login_user, $file, '');

        return $file_id;
    }

    /**
     * Rollback File
     *
     * @param  int $file_id //File ID
     * @param  int $version //Varsion
     * @param  int $data_id //Data ID
     *
     * @return array  $file_id         //File ID
     */
    function rollback($file_id, $version, $data_id = null)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        cb_trim_check($file_id,
            E_GRN_RPRT_FILERELATION_INVALID_ID);            //File ID
        cb_trim_check($version,
            E_GRN_RPRT_FILERELATION_NOT_INPUT_NECESSARY);   //Version

        //Get File
        $file =& $this->getDirect($file_id);

        // Get Login User
        $login_user =& $this->_getLoginUser();
        if ( ! $login_user) {
            $login_user = null;
        }

        //Get GRN_File Object
        require_once('report/file.csp');
        $file_manager = new GRN_Report_FileManager_Core();
        $file_table =& $file_manager->getFileTable();
        $file_object =& $file_table->getRow($file[GRN_REPORT_COLUMN_FILE]);

        //RollBack File
        $file->rollback($login_user, $version, '');

        return $file_id;
    }

    /**
     * Delete File
     *
     * @param int  $file_id //File ID
     * @param BOOL $result  //Result
     */
    function delete($file_id)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        cb_trim_check($file_id,
            E_GRN_RPRT_FILERELATION_INVALID_ID);        //File ID

        //Get File
        $file =& $this->getDirect($file_id);

        //Get GRN_File Object
        require_once('report/file.csp');
        $file_manager = new GRN_Report_FileManager_Core();
        $file_table =& $file_manager->getFileTable();
        $file_object =& $file_table->getRow($file[GRN_REPORT_COLUMN_FILE]);

        //Delete File
        $file_object->delete();

        //Remove File
        $file_relation_manager =& $this->_getFilerelationManager();
        $file_relation_manager->remove($file_id);

        return true;
    }

    /**
     * Delete File Multiple
     *
     * @param int  $file_id_list //File ID List
     * @param BOOL $result       //Result
     */
    function deleteMulti($file_id_list)
    {
        //Check Argument
        if ( ! is_array($file_id_list)) {
            //Not Input Necessary
            require_once('report/error_code.csp');
            cb_throw_error(E_GRN_RPRT_FILERELATION_NOT_INPUT_NECESSARY);
        }

        //Delete Item Data File
        foreach ($file_id_list as $file_id) {
            $this->delete($file_id);
        }

        return true;
    }

    /**
     * Delete Item Data File All
     *
     * @param int  $type    //Attach Type (Follow or ItemData)
     * @param int  $data_id //Data ID
     * @param BOOL $result  //Result
     */
    function _deleteAll($type, $data_id = null)
    {
        //Get File List
        $file_relation_manager = $this->_getFilerelationManager();
        $file_list =& $file_relation_manager->getList($type,
            $data_id);

        //Delete GRN_File Object
        require_once('report/file.csp');
        $file_manager = new GRN_Report_FileManager_Core();
        $file_table = $file_manager->getFileTable();
        foreach (array_keys($file_list) as $file_id) {
            $file_object
                = $file_table->getRow($file_list[$file_id][GRN_REPORT_COLUMN_FILE]);

            // force unlock
            $lock = $file_object->getLockObject();
            $lock->releaseLock(true);

            $file_object->delete();
        }

        //Delete Item Data File All
        $file_relation_manager->removeAll($type, $data_id);

        return true;
    }

    /**
     * Delete Item Data File All
     *
     * @param int  $follow_id //Data ID
     * @param BOOL $result    //Result
     */
    function deleteAllFollowFiles($follow_id = null)
    {
        return $this->_deleteAll(GRN_REPORT_FOLLOW_FILE, $follow_id);
    }

    /**
     * Delete Item Data File All
     *
     * @param int  $item_data_id //Data ID
     * @param BOOL $result       //Result
     */
    function deleteAllItemDataFiles($item_data_id = null)
    {
        return $this->_deleteAll(GRN_REPORT_ITEM_DATA_FILE, $item_data_id);
    }

    /**
     * Delete all report follow files
     *
     * @param array $report_id_list
     */
    function deleteAllFollowsFilesByReportId($report_id_list = [])
    {
        //Get File List
        $file_relation_manager = $this->_getFilerelationManager();
        $file_list
            = &$file_relation_manager->getListByReportIdList($report_id_list,
            ['_id', 'col_file']);

        //Delete GRN_File Object
        require_once('report/file.csp');
        $file_manager = new GRN_Report_FileManager_Core();
        $file_table = $file_manager->getFileTable();
        foreach (array_keys($file_list) as $file_id) {
            $file_object
                = $file_table->getRow($file_list[$file_id][GRN_REPORT_COLUMN_FILE]);

            // force unlock
            $lock = $file_object->getLockObject();
            $lock->releaseLock(true);

            $file_object->delete();
        }
    }
}


