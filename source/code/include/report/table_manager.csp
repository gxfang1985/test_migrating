<?php
/**
 * Report Application Table Manager Class
 *
 * @author  Shou Aoki 2009/09
 * @version 1.0
 * @package grn.report
 */
require_once('report/resources.csp');
require_once('report/table.csp');
require_once('fw/database.csp');

class GRN_Report_Table_Manager
{

    /**
     * get database object
     *
     * @return CB_DatabaseConnection $database
     */
    public static function getDataBase()
    {
        static $database = null;
        if (is_null($database)) {
            $app_locator = GRN_ApplicationLocator::instance();
            $database = $app_locator->getConnection('report');
        }

        return $database;
    }

    /**
     * get column list
     *
     * @param string $class_name    class name, not table name.
     * @param string $column_prefix prefix
     * @param bool   $set_alias
     *
     * @return array $column_list
     */
    public static function &getColumnList(
        $class_name,
        $column_prefix = null,
        $set_alias = false
    ) {
        $column_name_list = [];
        $column_list = get_class_vars($class_name);
        foreach (array_keys($column_list) as $column_name) {
            if (strpos($column_name, 'col_') === 0) {
                if (is_null($column_prefix)) {
                    $column_name_list[] = $column_name;
                } elseif ($set_alias) {
                    $column_name_list[] = sprintf('%s.%s %s_%s', $column_prefix,
                        $column_name, $column_prefix, $column_name);
                } else {
                    $column_name_list[] = sprintf('%s.%s', $column_prefix,
                        $column_name);
                }
            }
        }

        if (is_null($column_prefix)) {
            $column_name_list[] = '_id';
        } elseif ($set_alias) {
            $column_name_list[] = sprintf('%s._id %s__id', $column_prefix,
                $column_prefix);
        } else {
            $column_name_list[] = sprintf('%s._id', $column_prefix);
        }

        return $column_name_list;
    }

    /**
     * create an entity
     *
     * @param escaped string $table_name
     * @param escaped string $column_string
     * @param escaped string $value_string
     *
     * @return string last insert id
     */
    public static function create($table_name, $column_string, $value_string)
    {
        $database = GRN_Report_Table_Manager::getDataBase();
        $query = sprintf("INSERT %s(%s) VALUES (%s)", $table_name,
            $column_string, $value_string);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Return Item ID
        $ret = $database->get_insert_id();

        return $ret;
    }

    /**
     * create multi entries
     *
     * @param escaped string        $table_name
     * @param escaped string        $column_string
     * @param escaped string array  $value_strings
     */
    public static function createMulti(
        $table_name,
        $column_string,
        $value_strings
    ) {
        foreach ($value_strings as $key => $str) {
            $value_strings[$key] = "(" . $str . ")";
        }
        $string = implode($value_strings, ",");

        $database = GRN_Report_Table_Manager::getDataBase();
        $query = sprintf("INSERT %s(%s) VALUES %s", $table_name,
            $column_string, $string);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }
    }

    /**
     * 一般的なcreate処理に関するヘルパ関数
     */
    public static function genericCreate($class_name, $property_list)
    {
        $column_list = GRN_Report_Table_Manager::getColumnList($class_name);
        $column_string
            = GRN_Report_Table_Manager::createColumnString($column_list,
            $property_list);
        $value_string
            = GRN_Report_Table_Manager::createValueString($column_list,
            $property_list);
        $table_name = GRN_Report_Table_Manager::getTableName($class_name);
        $id = GRN_Report_Table_Manager::create($table_name,
            $column_string, $value_string);

        return $id;
    }

    /**
     * update
     *
     * @param escaped string $table_name
     * @param escaped string $update_string
     * @param escaped string $where_string
     *
     * @return bool|mysqli_result
     */
    public static function &update($table_name, $update_string, $where_string)
    {
        $database = GRN_Report_Table_Manager::getDataBase();
        $query = sprintf('UPDATE %s SET %s WHERE %s', $table_name,
            $update_string, $where_string);
        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        return $result;
    }

    /**
     * ID指定によるupdateのためのヘルパ
     *
     * @param $class_name
     * @param $target_id
     * @param $property_list
     *
     * @return mixed
     */
    public static function &updateById($class_name, $target_id, $property_list)
    {
        //Get Database
        $database = GRN_Report_Table_Manager::getDataBase();

        $column_list = GRN_Report_Table_Manager::getColumnList($class_name);
        $update_string
            = GRN_Report_Table_Manager::createUpdateString($column_list,
            $property_list);
        $where_string = cb_queryf($database, "_id = '@S'", $target_id);
        $table_name = GRN_Report_Table_Manager::getTableName($class_name);

        $ret = GRN_Report_Table_Manager::update($table_name, $update_string,
            $where_string);
        if ($ret) {
            return $target_id;
        } else {
            return false;
        }
    }

    /**
     * remove
     *
     * @param escaped string $table_name
     * @param escaped string $where_string
     *
     * @return bool|mysqli_result
     */
    public static function &remove($table_name, $where_string)
    {
        $database = GRN_Report_Table_Manager::getDataBase();

        $query = sprintf('DELETE FROM %s WHERE %s', $table_name, $where_string);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        return $result;
    }

    /**
     * ID指定による削除のためのヘルパ
     *
     * @param $class_name
     * @param $target_id
     *
     * @return void
     */
    public static function removeById($class_name, $target_id)
    {
        $database = GRN_Report_Table_Manager::getDataBase();
        $where = cb_queryf($database, "_id = '@S'", $target_id);
        $table_name = GRN_Report_Table_Manager::getTableName($class_name);
        GRN_Report_Table_Manager::remove($table_name, $where);
    }

    /**
     * create update string
     *
     * @param $column_list
     * @param $property_list
     *
     * @return string col1=val1, col2 = null, col3 = val3
     */
    public static function &createUpdateString($column_list, $property_list)
    {
        $update_list = [];
        $database = GRN_Report_Table_Manager::getDataBase();

        foreach ($column_list as $column) {
            if ($column === '_id') {
                continue;
            }

            if (array_key_exists($column, $property_list)) {
                if (is_null($property_list[$column])) {
                    $update_list[$column] = cb_queryf($database, '@S = null',
                        $column);
                } elseif ($column == GRN_REPORT_COLUMN_CATEGORY
                          && $property_list[GRN_REPORT_COLUMN_CATEGORY] == -1
                ) {
                    $update_list[$column] = cb_queryf($database, '@S = null',
                        $column);
                } else {
                    $update_list[$column] = cb_queryf($database, '@S = "@S"',
                        $column, $property_list[$column]);
                }
            }
        }

        $ret = implode(', ', $update_list);

        return $ret;
    }

    /**
     * create column string
     *
     * @param $column_list
     * @param $property_list
     *
     * @return string col1,col2,col3
     */
    public static function &createColumnString($column_list, $property_list)
    {
        $insert_list = GRN_Report_Table_Manager::_getInsertList($column_list,
            $property_list);
        $ret = implode(', ', array_keys($insert_list));

        return $ret;
    }

    /**
     * create value string
     *
     * @param $column_list
     * @param $property_list
     *
     * @return string val1,val2,val3
     */
    public static function &createValueString($column_list, $property_list)
    {
        $insert_list = GRN_Report_Table_Manager::_getInsertList($column_list,
            $property_list);
        $ret = implode(', ', $insert_list);

        return $ret;
    }

    public static function &_getInsertList($column_list, $property_list)
    {
        $insert_list = [];

        foreach ($column_list as $column) {
            if ($column === '_id') {
                continue;
            }

            if (array_key_exists($column, $property_list)) {
                if (is_null($property_list[$column])) {
                    $insert_list[$column] = 'null';
                } else {
                    $database = GRN_Report_Table_Manager::getDataBase();
                    $insert_list[$column] = cb_queryf($database, "'@S'",
                        $property_list[$column]);
                }
            }
        }

        return $insert_list;
    }

    /**
     * Get login user
     *
     * @return CB_User
     */
    public static function _getLoginUser()
    {
        //Get UUM Instance
        global $G_container_base;
        $grn_uum = $G_container_base->getInstance('uum');

        //Get Login User
        $login_user = $grn_uum->getLoginUser();
        if ( ! $login_user) {
            $ret = false;

            return $ret;
        }

        //Return Login User
        return $login_user;
    }

    /**
     * Set Creator
     *
     * @param  array $property_list //Property List
     *
     * @return bool   $result                    //Result
     */
    public static function setCreator(&$property_list)
    {
        //Check Argument
        if ( ! is_array($property_list)) {
            return false;
        }

        // Get Login User
        $login_user = GRN_Report_Table_Manager::_getLoginUser();

        //Set Create Infomation
        if ($login_user) {
            $user_id = $login_user->getOID();
            $display_name
                = $login_user->get('display_name');
            $foreign_key
                = $login_user->get('foreign_key');
            $property_list[GRN_REPORT_COLUMN_CREATOR]
                = $user_id;         //Creator
            $property_list[GRN_REPORT_COLUMN_CREATOR_NAME]
                = $display_name;    //Creator Name
            $property_list[GRN_REPORT_COLUMN_CREATOR_FOREIGN_KEY]
                = $foreign_key;     //Creator Foreign Key
            $property_list[GRN_REPORT_COLUMN_MODIFIER]
                = $user_id;         //Modifier
            $property_list[GRN_REPORT_COLUMN_MODIFIER_NAME]
                = $display_name;    //Modifier Name
            $property_list[GRN_REPORT_COLUMN_MODIFIER_FOREIGN_KEY]
                = $foreign_key;     //Modifier Foreign Key
        }

        //Get Create Time
        $ctime = time();
        $property_list[GRN_REPORT_COLUMN_CTIME] = $ctime;   //Create Time
        $property_list[GRN_REPORT_COLUMN_MTIME] = $ctime;   //Modify Time

        return true;
    }

    /**
     * Set Modofier
     *
     * @param  array $property_list //Property List
     *
     * @return bool   $result                    //Result
     */
    public static function setModifier(&$property_list)
    {
        //Check Argument
        if ( ! is_array($property_list)) {
            return false;
        }

        // Get Login User
        $login_user = GRN_Report_Table_Manager::_getLoginUser();

        //Set Modify Infomation/
        if ($login_user) {
            $user_id = $login_user->getOID();
            $display_name
                = $login_user->get('display_name');
            $foreign_key
                = $login_user->get('foreign_key');
            $property_list[GRN_REPORT_COLUMN_MODIFIER]
                = $user_id;         //Modifier
            $property_list[GRN_REPORT_COLUMN_MODIFIER_NAME]
                = $display_name;    //Modifier Name
            $property_list[GRN_REPORT_COLUMN_MODIFIER_FOREIGN_KEY]
                = $foreign_key;     //Modifier Foreign Key
        }
        $property_list[GRN_REPORT_COLUMN_MTIME] = time();   //Modify Time

        return true;
    }

    /**
     * Get Table Name
     *
     * @param  string $class_name
     *
     * @return string  $table_name
     */
    public static function getTableName($class_name)
    {
        return sprintf('tab_%s', strtolower($class_name));
    }

    public static function getPersonalTablename($uid, $table_name)
    {
        if (is_null($uid) || 0 == strlen($uid) || is_null($table_name)
            || 0 == strlen($table_name)
        ) {
            return '';
        }
        $suffix = GRN_Report_Table_Manager::getPersonalSuffix($uid);

        return $table_name . CB_PERSISTENT_NAMESEPARATOR . $suffix;
    }

    public static function getPersonalSuffix($uid)
    {
        if (is_null($uid) || 0 == strlen($uid)) {
            return '';
        }

        $user_tables = cb_get_user_tables();
        $partition_id = (int)($uid % $user_tables);

        return CB_DATABASE_USER_TABLE_PREFIX . $partition_id;
    }
}

