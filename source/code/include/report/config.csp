<?php

/**
 * 設定
 *
 * @date    2009/10
 * @version 1.0
 * @package grn.report
 */

require_once('grn/application.csp');
require_once('fw/forest_util.csp');

/**
 * 設定管理
 */
class GRN_Report_Configs extends CB_ModuleBase
{
    private static $_instance = null;

    /**
     * シングルトンを取得する
     *
     * @return GRN_Report_Configs
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * コンストラクタ
     */
    function __construct()
    {
        parent::__construct(GRN_REPORT_MODULE_ID);
    }

    /**
     * @access private
     */
    var $_configs = [];

    /**
     * システム管理の取得
     *
     * @return  object  GRN_Report_Config     システム管理
     */
    function getSystemConfig()
    {
        if ( ! array_key_exists('-1', $this->_configs)) {
            $system_profile =& $this->getSystemProfile();
            $this->_configs['-1'] = new GRN_Report_Config($system_profile);
        }

        return $this->_configs['-1'];
    }

    /**
     * 個人設定を取得する
     *
     * @param   int $user_id ユーザーID
     *
     * @return  GRN_Report_Config     個人設定
     */
    function getPersonalConfig($user_id)
    {
        if ( ! array_key_exists($user_id, $this->_configs)) {
            global $G_container_base;
            $uum =& $G_container_base->getInstance('uum');
            $user =& $uum->getUser($user_id);
            $personal_profile =& $this->getUserProfile($user);
            $this->_configs[$user_id]
                = new GRN_Report_Config($personal_profile);
        }

        return $this->_configs[$user_id];
    }
}

/**
 * 設定
 */
class GRN_Report_Config
{
    /**
     * @access private
     * @var CB_Profile
     */
    var $_profile;

    /**
     * コンストラクタ
     */
    function __construct(& $profile)
    {
        $this->_profile =& $profile;
    }

    /**
     * 属性の変更
     *
     * @access private
     */
    function _updateAttribute($key, $value)
    {
        $old_value = null;

        if ( ! $this->_profile->getAttribute($key, $old_value)) {
            return $this->_profile->createAttribute($key, $value);
        }

        return $this->_profile->updateAttribute($key, $value);
    }

    function getLoginUrl()
    {
        if (defined('ON_FOREST')) {
            $forest_config = CB_ForestUtil::getConfig();
            $fqdn = $forest_config->get('Cellular', 'fqdn');
            if (strlen($fqdn) === 0) {
                return null;
            }

            return 'http://' . $fqdn . '/g/report/cellular/index.csp?';
        }
        $login_url = '';
        $this->_profile->getAttribute('login_url', $login_url);

        return $login_url;
    }

    function setLoginUrl($login_url)
    {
        $this->_updateAttribute('login_url', $login_url);
    }

    function getCellularMailAddress()
    {
        $mail_address = null;
        $this->_profile->getAttribute('mail_address', $mail_address);

        return $mail_address;
    }

    function setCellularMailAddress($mail_address)
    {
        $this->_updateAttribute('mail_address', $mail_address);
    }

    function getSuspension()
    {
        $suspension = false;
        if ( ! $this->_profile->getAttribute('suspension', $suspension)) {
            // not suspend at first
            $suspension = false;
        }

        return $suspension;
    }

    function setSuspension($suspension)
    {
        $this->_updateAttribute('suspension', $suspension);
    }
}
