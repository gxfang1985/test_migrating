<?php
/**
 * Report Application Form Class
 *
 * @author  Jumpei, Miyata 2009/9
 * @version 1.0
 * @package grn.report
 */

/** Report Application **/
require_once('report/error_code.csp');
require_once('report/resources.csp');
require_once('report/form_logic_base.csp');
require_once('grn/application.csp');
require_once('report/table_manager.csp');

/**
 * Form Manager Class
 *
 * @package grn.report
 */
class GRN_Report_Form_Logic extends GRN_Report_Form_Logic_Base
{
    //Form Manager Instance
    var $_form_manager = null;

    //Report Manager Instance
    var $_report_manager = null;

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {

    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Report_Form_Logic
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Form Logic
     *
     * @return object $form_manager              //Form Manager
     */
    function _getFormManager()
    {
        if (is_null($this->_form_manager)) {
            require_once('report/form_manager.csp');
            $this->_form_manager = GRN_Report_Form_Manager::getInstance();
        }

        return $this->_form_manager;
    }

    /**
     * Get Report Logic
     *
     * @return object $form_manager              //Form Manager
     */
    function _getReportManager()
    {
        if (is_null($this->_report_manager)) {
            require_once('report/report_manager.csp');
            $this->_report_manager = GRN_Report_Report_Manager::getInstance();
        }

        return $this->_report_manager;
    }

    /**
     * Check Form Code
     *
     * @param string $form_code   //Form Code
     * @param int    $form_id     //Form ID
     * @param bool   $throw_error //Throw Error Flag
     * @param bool   $result      //Check Result
     */
    function checkCode($form_code, $form_id = null, $throw_error = true)
    {
        //Get Form By Foreign key
        $column_list = ['_id'];
        $option = [
            'condition' => [
                0 => [
                    'column'   => 'col_deleted',
                    'value'    => '0',
                    'operator' => '='
                ]
            ]
        ];
        $form_manager = $this->_getFormManager();
        $form = $form_manager->getByForeignKey($form_code, $column_list,
            $option);
        if ( ! $form) {
            return true;
        }

        //Check Same Form
        if ($form['_id'] != $form_id) {
            if ($throw_error) {
                //Duplicate Foreign Key
                require_once('report/error_code.csp');
                cb_throw_error(E_GRN_RPRT_FORM_DUPLICATE_FOREIGN_KEY);
            }

            return false;
        }

        return true;
    }

    /**
     * Add Form
     *
     * @param  string $name          //Name
     * @param  string $foreign_key   //Foreign Key
     * @param  int    $enable_follow //Enable Follow
     * @param  int    $enable_member //Enable Member
     * @param  string $memo          //Memo
     * @param  int    $category_id   //Category ID
     *
     * @return int    $form_id                    //Form ID
     */
    function add(
        $name,
        $foreign_key,
        $enable_follow,
        $enable_member,
        $enable_partner,
        $memo,
        $category_id = null,
        $active = 0,
        $list_index = null
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        cb_trim_check($name, E_GRN_RPRT_FORM_NOT_INPUT_NECESSARY);   //Name
        cb_trim_check($foreign_key,
            E_GRN_RPRT_FORM_NOT_INPUT_NECESSARY);   //Foreign key

        if ($category_id == GRN_REPORT_CATEGORY_ROOT_ID) {
            cb_throw_error(E_GRN_RPRT_CATEGORY_INVALID_ID);
        }

        //Check Foreign Key
        $this->checkCode($foreign_key);

        //Create Property List
        $property_list = [
            GRN_REPORT_COLUMN_NAME           => $name,
            GRN_REPORT_COLUMN_FOREIGN_KEY    => $foreign_key,
            GRN_REPORT_COLUMN_ENABLE_FOLLOW  => $enable_follow,
            GRN_REPORT_COLUMN_ENABLE_MEMBER  => $enable_member,
            GRN_REPORT_COLUMN_ENABLE_PARTNER => $enable_partner,
            GRN_REPORT_COLUMN_MEMO           => $memo,
            GRN_REPORT_COLUMN_FOREIGN_KEY    => $foreign_key,
            GRN_REPORT_COLUMN_TYPE           => 0,
            GRN_REPORT_COLUMN_ACTIVE         => $active,
            GRN_REPORT_COLUMN_DELETED        => 0,
        ];
        if ( ! is_null($category_id) && $category_id > 0) {
            $property_list[GRN_REPORT_COLUMN_CATEGORY] = $category_id;
        }
        if ( ! is_null($list_index)) {
            $property_list[GRN_REPORT_COLUMN_LIST_INDEX] = $list_index;
        }

        //Set Creator
        GRN_Report_Table_Manager::setCreator($property_list);

        //Create New Form
        $form_manager = $this->_getFormManager();
        $form_id = $form_manager->create($property_list);

        //監査する
        require_once('report/inspection.csp');
        $inspection = GRN_Report_Form_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            $inspection_enable_follow
                = $inspection->setEnableFollow($enable_follow);
            $inspection_enable_member
                = $inspection->setEnableMember($enable_member);
            $inspection_enable_partner
                = $inspection->setEnablePartner($enable_partner);

            $message_type = 'form_add';
            $message_args = [];
            $message_args['cid'] = $category_id;
            $message_args['fid'] = $form_id;
            $message_args['name'] = $name;
            $message_args['foreign_key'] = $foreign_key;
            $message_args['enable_follow'] = $inspection_enable_follow;
            $message_args['enable_member'] = $inspection_enable_member;
            $message_args['enable_partner'] = $inspection_enable_partner;
            $message_args['memo'] = $memo;

            //Record Inspection
            $inspection->record($message_type, $message_args);
        }

        return $form_id;
    }

    /**
     * Add Separator
     *
     * @param  int $category_id //Category ID
     *
     * @return int    $form_id                    //Form ID
     */
    function addSeparator($category_id = null)
    {
        //Create Property List
        $property_list = [
            GRN_REPORT_COLUMN_NAME        => '',
            GRN_REPORT_COLUMN_FOREIGN_KEY => GRN_REPORT_SEPARATOR_FOREIGN_KEY,
            GRN_REPORT_COLUMN_MEMO        => '',
            GRN_REPORT_COLUMN_TYPE        => 1,
            GRN_REPORT_COLUMN_ACTIVE      => 1,
            GRN_REPORT_COLUMN_DELETED     => 0,
        ];
        if ( ! is_null($category_id) && $category_id > 0) {
            $property_list[GRN_REPORT_COLUMN_CATEGORY] = $category_id;
        }

        //Set Creator
        GRN_Report_Table_Manager::setCreator($property_list);

        //Create New Form
        $form_manager =& $this->_getFormManager();
        $form_id = $form_manager->create($property_list);

        //Update Foteign Key
        $foreign_key = sprintf('%s_%s', GRN_REPORT_SEPARATOR_FOREIGN_KEY,
            $form_id);
        $property_list = [GRN_REPORT_COLUMN_FOREIGN_KEY => $foreign_key];
        $form_id = $form_manager->update($form_id, $property_list);

        return $form_id;
    }

    /**
     * Modify Form
     *
     * @param  int    $form_id        //Form ID
     * @param  string $name           //Name
     * @param  string $foreign_key    //Foreign Key
     * @param  int    $enable_follow  //Enable Follow
     * @param  int    $enable_member  //Enable Member
     * @param  int    $enable_partner //Enable Partner
     * @param  string $memo           //Memo
     * @param  int    $category_id    //Category ID
     * @param  bool   $refresh        //Refresh Flag
     *
     * @return int    $form_id                   //Form ID
     */
    function modify(
        $form_id,
        $name,
        $foreign_key,
        $enable_follow,
        $enable_member,
        $enable_partner,
        $memo,
        $category_id = null,
        $refresh = false
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        cb_trim_check($form_id,
            E_GRN_RPRT_FORM_INVALID_ID);            //Form ID
        cb_trim_check($name, E_GRN_RPRT_FORM_NOT_INPUT_NECESSARY);   //Name
        cb_trim_check($foreign_key,
            E_GRN_RPRT_FORM_NOT_INPUT_NECESSARY);   //Foreign key

        //Check Foreign Key
        $this->checkCode($foreign_key, $form_id, true);

        //Check Form Exist
        $form_list = $this->getList(null, null, null, $refresh);
        if ( ! array_key_exists($form_id, $form_list)) {
            //Form Not Found
            require_once('report/error_code.csp');
            cb_throw_error(E_GRN_RPRT_FORM_NOT_FOUND);
        }

        //Create Property List
        $property_list = [
            GRN_REPORT_COLUMN_NAME           => $name,
            GRN_REPORT_COLUMN_FOREIGN_KEY    => $foreign_key,
            GRN_REPORT_COLUMN_ENABLE_FOLLOW  => $enable_follow,
            GRN_REPORT_COLUMN_ENABLE_MEMBER  => $enable_member,
            GRN_REPORT_COLUMN_ENABLE_PARTNER => $enable_partner,
            GRN_REPORT_COLUMN_MEMO           => $memo,
        ];
        if ( ! is_null($category_id)) {
            $property_list[GRN_REPORT_COLUMN_CATEGORY] = $category_id;
        }

        //Set Modifier
        GRN_Report_Table_Manager::setModifier($property_list);

        //Update Form
        $form_manager =& $this->_getFormManager();
        $form_id = $form_manager->update($form_id, $property_list);

        return $form_id;
    }

    /**
     * Modify Form Administrator's Memo
     *
     * @param  int    $form_id     //Form ID
     * @param  string $admin_memo  //Administrator's memo
     * @param  int    $category_id //Category ID
     * @param  bool   $refresh     //Refresh Flag
     *
     * @return int    $form_id                   //Form ID
     */
    function modifyAdminMemo(
        $form_id,
        $admin_memo,
        $category_id = null,
        $refresh = false
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        cb_trim_check($form_id,
            E_GRN_RPRT_FORM_INVALID_ID);            //Form ID

        //Check Form Exist
        $form_list = $this->getList(null, null, null, $refresh);
        if ( ! array_key_exists($form_id, $form_list)) {
            //Form Not Found
            require_once('report/error_code.csp');
            cb_throw_error(E_GRN_RPRT_FORM_NOT_FOUND);
        }

        //Create Property List
        $property_list = [
            GRN_REPORT_COLUMN_ADMIN_MEMO => $admin_memo,
        ];

        //Set Modifier
        GRN_Report_Table_Manager::setModifier($property_list);

        //Update Form
        $form_manager =& $this->_getFormManager();
        $form_id = $form_manager->update($form_id, $property_list);

        return $form_id;
    }

    /**
     * Update Form
     *
     * @param  int $form_id //Form ID
     *
     * @return int    $form_id                   //Form ID
     */
    function update($form_id)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        cb_trim_check($form_id,
            E_GRN_RPRT_FORM_INVALID_ID);            //Form ID

        //Check Form Exist
        $form = $this->getDirect($form_id);

        //Set Modifier
        $property_list = [];
        GRN_Report_Table_Manager::setModifier($property_list);

        //Update Form
        $form_manager = $this->_getFormManager();
        $form_id = $form_manager->update($form_id, $property_list);

        return $form_id;
    }

    /**
     * Move Form
     *
     * @param  int  $form_id     //Form ID
     * @param  int  $category_id //Category ID
     * @param  bool $refresh     //Refresh Flag
     *
     * @return int    $form_id                   //Form ID
     */
    function move($form_id, $category_id = null)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        cb_trim_check($form_id,
            E_GRN_RPRT_FORM_INVALID_ID);            //Form ID
        cb_trim_check($category_id,
            E_GRN_RPRT_FORM_NOT_INPUT_NECESSARY);   //Category ID

        //Check Form Exist
        $column_list = ['_id'];
        $form = $this->getDirect($form_id, $column_list);
        if ( ! $form) {
            //Form Not Found
            require_once('report/error_code.csp');
            cb_throw_error(E_GRN_RPRT_FORM_NOT_FOUND);
        }

        //Create Property List
        $property_list = [
            GRN_REPORT_COLUMN_CATEGORY => $category_id,
        ];

        //Set Modifier
        GRN_Report_Table_Manager::setModifier($property_list);

        //Update Form
        $form_manager =& $this->_getFormManager();
        $form_id = $form_manager->update($form_id, $property_list);

        //Update Reports
        $report_manager =& $this->_getReportManager();
        $report_manager->changeCategory($category_id, $form_id);

        return $form_id;
    }

    /**
     * Delete Form
     *
     * @param  int $form_id //Form ID
     *
     * @return BOOL   $result                    //Result
     */
    function delete($form_id)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        cb_trim_check($form_id, E_GRN_RPRT_FORM_INVALID_ID);        //Form ID

        //Check Form Exist
        $column_list = ['_id', 'col_type'];
        $form = $this->getDirect($form_id, $column_list);

        //Check Form Type
        $form_manager =& $this->_getFormManager();
        if ($form['col_type'] == 1) {
            //Delete Separator 
            $form_manager->remove($form_id);
        } else {
            //Check Report Count
            $option = [];
            $column_list = ['_id'];
            require_once('report/report_logic_base.csp');
            $report_logic_base = GRN_Report_Report_Logic_Base::getInstance();
            $report_list =& $report_logic_base->getList($form_id,
                $column_list, $option, true);
            if (count($report_list) !== 0) {
                //Update Form MUltiple
                $property_list = [GRN_REPORT_COLUMN_DELETED => 1];
                $form_manager->update($form_id, $property_list);

                //Update Reports
                $report_manager =& $this->_getReportManager();
                $report_manager->changeCategory(null, $form_id);
            } else {
                //Remove Form
                $form_manager->remove($form_id);
            }
        }

        return true;
    }

    /**
     * Delete Multiple Form
     *
     * @param  array $form_id_list //Form ID List
     *
     * @return BOOL   $result                    //Result
     */
    function deleteMulti($form_id_list)
    {
        //Check Argument
        if ( ! is_array($form_id_list)) {
            //Not Input Necessary
            require_once('report/error_code.csp');
        }

        //Get Separator List
        $column_list = ['_id'];
        $option = [
            'condition' => [
                0 => [
                    'column'   => 'col_type',
                    'value'    => '1',
                    'operator' => '='
                ]
            ]
        ];
        $separator_list =& $this->getList(null, $column_list, $option);

        //Create Separator ID List
        $separator_id_list = [];
        foreach (array_keys($form_id_list) as $key) {
            if (array_key_exists($form_id_list[$key], $separator_list)) {
                $separator_id_list[] = $form_id_list[$key];
                unset($form_id_list[$key]);
            }
        }

        //Delete Separator Multiple
        $form_manager =& $this->_getFormManager();
        if (count($separator_id_list) !== 0) {
            $form_manager->removeMulti($separator_id_list);
        }

        //Check Form Count
        if (count($form_id_list) !== 0) {
            //Check Report Count
            $remove_form_id_list = [];
            $update_form_id_list = [];
            $column_list = ['_id'];
            require_once('report/report_logic_base.csp');
            $report_logic_base = GRN_Report_Report_Logic_Base::getInstance();
            foreach (array_keys($form_id_list) as $key) {
                $option = [];
                $report_list =& $report_logic_base->getList($form_id_list[$key],
                    $column_list, $option, true);
                if (count($report_list) !== 0) {
                    $update_form_id_list[] = $form_id_list[$key];
                } else {
                    $remove_form_id_list[] = $form_id_list[$key];
                }
            }

            //Update Form MUltiple
            if (count($update_form_id_list) !== 0) {
                $property_list = [GRN_REPORT_COLUMN_DELETED => 1];
                $form_manager->updateMulti($update_form_id_list,
                    $property_list);
            }

            //Remove Form Multiple
            if (count($remove_form_id_list) !== 0) {
                $form_manager->removeMulti($remove_form_id_list);
            }
        }

        return true;
    }

    /**
     * Delete All Form
     *
     * @param  int $category_id //Category ID
     *
     * @return BOOL   $result                    //Result
     */
    function deleteAll($category_id = null)
    {
        //Get Form ID List
        $column_list = ['_id'];
        $form_list =& $this->getList($category_id, $column_list);
        $form_id_list = array_keys($form_list);

        //Get Separator List
        $column_list = ['_id'];
        $option = [
            'condition' => [
                0 => [
                    'column'   => 'col_type',
                    'value'    => '1',
                    'operator' => '='
                ]
            ]
        ];
        $separator_list =& $this->getList(null, $column_list, $option);

        //Create Separator ID List
        $separator_id_list = [];
        foreach (array_keys($form_id_list) as $key) {
            if (array_key_exists($form_id_list[$key], $separator_list)) {
                $separator_id_list[] = $form_id_list[$key];
                unset($form_id_list[$key]);
            }
        }

        //Delete Separator Multiple
        $form_manager =& $this->_getFormManager();
        if (count($separator_id_list) !== 0) {
            $form_manager->removeMulti($separator_id_list);
        }

        //Set Form Count
        if (count($form_id_list) !== 0) {
            //Check Report Count
            $remove_form_id_list = [];
            $update_form_id_list = [];
            $column_list = ['_id'];
            require_once('report/report_logic_base.csp');
            $report_logic_base = GRN_Report_Report_Logic_Base::getInstance();
            foreach (array_keys($form_id_list) as $key) {
                $option = [];
                $report_list =& $report_logic_base->getList($form_id_list[$key],
                    $column_list, $option, true);
                if (count($report_list) !== 0) {
                    $update_form_id_list[] = $form_id_list[$key];
                } else {
                    $remove_form_id_list[] = $form_id_list[$key];
                }
            }

            //Update Form Multiple
            if (count($update_form_id_list) !== 0) {
                $property_list = [GRN_REPORT_COLUMN_DELETED => 1];
                $form_manager->updateMulti($update_form_id_list,
                    $property_list);
            }

            //Remove Form Multiple
            if (count($remove_form_id_list) !== 0) {
                $form_manager->removeMulti($remove_form_id_list);
            }
        }

        return true;
    }

    /**
     * Copy Multiple Form
     *
     * @param  array $form_id_list //Form ID List
     * @param  int   $category_id  //Category ID
     *
     * @return BOOL   $result                    //Result
     */
    function copyMulti($form_id_list, $category_id = null)
    {
        //Check Argument
        if ( ! is_array($form_id_list)) {
            //Not Input Necessary
            require_once('report/error_code.csp');
            cb_throw_error(E_GRN_RPRT_FORM_NOT_INPUT_NECESSARY);
        }

        //Get Form List
        $form_manager =& $this->_getFormManager();
        $form_list =& $form_manager->getList($category_id);

        //Copy Form List
        $form_id_map = [];
        foreach ($form_id_list as $form_id) {
            $form = $form_list[$form_id];

            //Unset _id Property
            unset($form['_id']);

            //Change Display Name
            if ($form[GRN_REPORT_COLUMN_TYPE] == 0) {
                $form[GRN_REPORT_COLUMN_NAME]
                    = cb_plain_msg(GRN_REPORT_MODULE_ID, 'copy_format',
                    ['copy_name' => $form[GRN_REPORT_COLUMN_NAME]]);

                //Change Foreign Key
                $form[GRN_REPORT_COLUMN_FOREIGN_KEY]
                    = cb_plain_msg(GRN_REPORT_MODULE_ID, 'copy_format',
                    ['copy_name' => $form[GRN_REPORT_COLUMN_FOREIGN_KEY]]);

                //Check Forekgn Key
                $this->checkCode($form[GRN_REPORT_COLUMN_FOREIGN_KEY], null,
                    true);
            }

            //Clear Category ID
            if ($category_id == -1 || is_null($category_id)) {
                unset($form[GRN_REPORT_COLUMN_CATEGORY]);
            }

            //Clear List Index 
            unset($form[GRN_REPORT_COLUMN_LIST_INDEX]);

            //Change Creator
            GRN_Report_Table_Manager::setCreator($form);

            //Add Form
            $form_id_map[$form_id] = $form_manager->create($form);

            //Update Separator Foreign Key
            if ($form[GRN_REPORT_COLUMN_TYPE] == 1) {
                $foreign_key = sprintf('%s_%s',
                    GRN_REPORT_SEPARATOR_FOREIGN_KEY, $form_id_map[$form_id]);
                $property_list
                    = [GRN_REPORT_COLUMN_FOREIGN_KEY => $foreign_key];
                $form_manager->update($form_id_map[$form_id], $property_list);
            }
        }

        //Return Form ID Map
        return $form_id_map;
    }

    /**
     * Change Form Order
     *
     * @param  int  $form_id_list //Form ID List
     * @param  int  $category_id  //Category ID
     * @param  bool $refresh      //Refresh Flag
     *
     * @return BOOL   $result                    //Result
     */
    function changeOrder($form_id_list, $category_id = null, $refresh = false)
    {
        //Check Argument
        if ( ! is_array($form_id_list)) {
            require_once('fw/string_util.csp');
            require_once('report/error_code.csp');
            cb_throw_error(E_GRN_RPRT_FORM_NOT_INPUT_NECESSARY);
        }

        //Change Order
        $form_manager =& $this->_getFormManager();
        $form_manager->changeOrder($form_id_list, $category_id, $refresh);

        return true;
    }

    /**
     * Activate Form
     *
     * @param  int  $form_id     //Form ID
     * @param  int  $category_id //Category ID
     * @param  bool $refresh     //Refresh Flag
     *
     * @return BOOL   $result                    //Result
     */
    function activate($form_id, $category_id = null, $refresh = false)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        cb_trim_check($form_id, E_GRN_RPRT_FORM_INVALID_ID);        //Form ID

        //Check Form Exist
        $form = $this->get($form_id, $category_id, [], [], $refresh);

        //Create Property List
        $property_list = [
            GRN_REPORT_COLUMN_ACTIVE => 1,
        ];

        //Set Modifier
        GRN_Report_Table_Manager::setModifier($property_list);

        //Update Form
        $form_manager = $this->_getFormManager();
        $form_id = $form_manager->update($form_id, $property_list);

        return true;
    }

    /**
     * Deactivate Form
     *
     * @param  int  $form_id     //Form ID
     * @param  int  $category_id //Category ID
     * @param  bool $refresh     //Refresh Flag
     *
     * @return BOOL   $result                    //Result
     */
    function deactivate($form_id, $category_id = null, $refresh = false)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        cb_trim_check($form_id, E_GRN_RPRT_FORM_INVALID_ID);        //Form ID

        //Check Form Exist
        $form = $this->get($form_id, $category_id, [], [], $refresh);

        //Create Property List
        $property_list = [
            GRN_REPORT_COLUMN_ACTIVE => 0,
        ];

        //Set Modifier
        GRN_Report_Table_Manager::setModifier($property_list);

        //Update Form
        $form_manager =& $this->_getFormManager();
        $form_id = $form_manager->update($form_id, $property_list);

        return true;
    }

    /**
     * Modify Form by File import
     *
     * @param  int   $form_id     //Form ID
     * @param  array $form        //Form Information
     * @param  int   $category_id //Category ID
     *
     * @return int                               //Form ID
     */
    function modifyByImport($form_id, & $form, & $category_id)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');

        // 必須チェック
        // （変更する報告フォームの有無、コードの重複は呼び出し元でチェック済み）
        cb_trim_check($form[GRN_REPORT_COLUMN_NAME],
            E_GRN_RPRT_FORM_NOT_INPUT_NECESSARY); //Name
        cb_trim_check($form[GRN_REPORT_COLUMN_FOREIGN_KEY],
            E_GRN_RPRT_FORM_NOT_INPUT_NECESSARY); //Foreign key

        //Create Property List
        $property_list = [
            GRN_REPORT_COLUMN_NAME           => $form[GRN_REPORT_COLUMN_NAME],
            GRN_REPORT_COLUMN_FOREIGN_KEY    => $form[GRN_REPORT_COLUMN_FOREIGN_KEY],
            GRN_REPORT_COLUMN_MEMO           => $form[GRN_REPORT_COLUMN_MEMO],
            GRN_REPORT_COLUMN_ADMIN_MEMO     => $form[GRN_REPORT_COLUMN_ADMIN_MEMO],
            GRN_REPORT_COLUMN_TYPE           => 0,
            GRN_REPORT_COLUMN_DELETED        => 0,
            GRN_REPORT_COLUMN_ACTIVE         => $form[GRN_REPORT_COLUMN_ACTIVE],
            GRN_REPORT_COLUMN_ENABLE_FOLLOW  => $form[GRN_REPORT_COLUMN_ENABLE_FOLLOW],
            GRN_REPORT_COLUMN_ENABLE_MEMBER  => $form[GRN_REPORT_COLUMN_ENABLE_MEMBER],
            GRN_REPORT_COLUMN_ENABLE_PARTNER => $form[GRN_REPORT_COLUMN_ENABLE_PARTNER],
            GRN_REPORT_COLUMN_LIST_INDEX     => $form[GRN_REPORT_COLUMN_LIST_INDEX],
        ];

        //Set Category ID to Property List
        if ( ! is_null($category_id) && $category_id > 0) {
            $property_list[GRN_REPORT_COLUMN_CATEGORY] = $category_id;
        }

        //Set Modifier
        GRN_Report_Table_Manager::setModifier($property_list);

        //Update Form
        $form_manager =& $this->_getFormManager();
        $form_manager->update($form_id, $property_list);

        return $form_id;
    }

    /**
     * Add Form by File import
     *
     * @param  array $form        //Form Information
     * @param  int   $category_id //Category ID
     *
     * @return int                               //Form ID
     */
    function addByImport(& $form, $category_id)
    {
        $form_id = $this->add($form[GRN_REPORT_COLUMN_NAME],
            $form[GRN_REPORT_COLUMN_FOREIGN_KEY],
            $form[GRN_REPORT_COLUMN_ENABLE_FOLLOW],
            $form[GRN_REPORT_COLUMN_ENABLE_MEMBER],
            $form[GRN_REPORT_COLUMN_ENABLE_PARTNER],
            $form[GRN_REPORT_COLUMN_MEMO],
            $category_id,
            $form[GRN_REPORT_COLUMN_ACTIVE],
            $form[GRN_REPORT_COLUMN_LIST_INDEX]);

        return $form_id;
    }

    /**
     * Get Form ID by Report ID
     *
     * @param  int $report_id // Report ID
     *
     * @return int  $form_id      // Form ID
     */
    function getIdByReportId($report_id)
    {
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        cb_trim_check($report_id, E_GRN_RPRT_REPORT_INVALID_ID);

        $app_locator = GRN_ApplicationLocator::instance();
        $dbconn =& $app_locator->getConnection('report');

        $condition = cb_queryf($dbconn, "_id='@S'", $report_id);
        $query
            = "SELECT col_form FROM tab_grn_report_report WHERE {$condition};";
        if ($result = $dbconn->query($query)) {
            $row = $dbconn->fetch_assoc($result);
            if ( ! $row || ! array_key_exists('col_form', $row)
                 || $row['col_form'] < 1
            ) {
                return false;
            }

            return $row['col_form'];
        }
        $dbconn->throwError(['query' => "failed query on SELECT: {$query}"]);
    }

    function useForm($user_id, $form_id)
    {
        cb_trim_check($form_id, E_GRN_RPRT_FORM_INVALID_ID);
        cb_trim_check($user_id, E_GRN_RPRT_INVALID_USER_ID);

        $form_manager = $this->_getFormManager();
        $form_manager->useForm($user_id, $form_id);
    }

    function getRecentUserFormList($user_id)
    {
        cb_trim_check($user_id, E_GRN_RPRT_INVALID_USER_ID);

        $form_manager = $this->_getFormManager();
        $forms = $form_manager->getRecentUserFormList($user_id);

        return $forms;
    }
}


