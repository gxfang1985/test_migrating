<?php
/**
 * Report Application Item Data Base Class
 *
 * @author  Shou Aoki 2009/09
 * @version 1.0
 * @package grn.report
 */

/** Report Application **/
require_once('report/resources.csp');
require_once('grn/application.csp');
require_once('report/table_manager.csp');

/**
 * Item Data Manager Base Class
 *
 * @package grn.report
 */
class GRN_Report_ItemData_Manager_Base
{
    /** Table Name **/
    var $_table_name = null;

    /** Item Data List **/
    var $_list = [];

    /** Item Data List(with Extra Information) **/
    var $_listEx = [];

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
        $this->_table_name = 'tab_grn_report_itemdata';
    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Report_ItemData_Manager_Base
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Column List
     *
     * @param  string $class_name //Class Name
     *
     * @return array  $column_name_list          //Column Name List
     */
    function &_getColumnList($class_name = null)
    {

        //Check Class Name
        $column_prefix = null;
        if (is_null($class_name)) {
            //Default Class Name and Table Name
            $class_name = GRN_REPORT_TABLE_ITEMDATA;
        } else {
            //Set Column Prefix
            switch ($class_name) {
                case GRN_REPORT_TABLE_ITEMDATA:
                    $column_prefix = "d";
                    break;
                case GRN_REPORT_TABLE_FILERELATION:
                    $column_prefix = "f";
                    break;
                case GRN_REPORT_TABLE_FILE:
                    $column_prefix = "g";
                    break;
                case GRN_REPORT_TABLE_FILEBODY:
                    $column_prefix = "b";
                    break;
            }
        }

        $columns = GRN_Report_Table_Manager::getColumnList($class_name,
            $column_prefix, true);

        return $columns;
    }

    /**
     * Get Item Data
     *
     * @param  int   $item_data_id //Item Data ID
     * @param  int   $report_id    //Report ID
     * @param  array $column_list  //Column List
     * @param  int   $refresh      //Lock Mode
     * @param  int   $lock_mode    //Lock Mode
     *
     * @return array  $item_data                 //Item Data Information Array
     */
    function &get(
        $item_data_id,
        $report_id = null,
        $column_list = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Item Data List
        $item_data_list =& $this->getList($report_id, $column_list, $refresh,
            $lock_mode);

        //Get Item Data
        if ( ! array_key_exists($item_data_id, $item_data_list)) {
            $ret = false;

            return $ret;
        }

        //Return Item Data
        return $item_data_list[$item_data_id];
    }

    /**
     * Get Item Data Direct
     *
     * @param  int   $item_data_id //Item Data ID
     * @param  array $column_list  //Column List
     * @param  int   $lock_mode    //Lock Mode
     *
     * @return array  $item_data                  //Item Data Information Array
     */
    function getDirect(
        $item_data_id,
        $column_list = [],
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $item_data = [];

        //Get Database
        $database = GRN_Report_Table_Manager::getDataBase();

        //Create Column List
        if (count($column_list) === 0) {
            $column_list = implode(',', $this->_getColumnList());
        } else {
            $column_list = implode(',', $column_list);
        }

        //Create Condition
        $condition_list = [];
        $condition_list[] = cb_queryf($database, "_id = '@S'", $item_data_id);
        $condition = implode(' AND ', $condition_list);
        if ($condition) {
            $condition = 'WHERE ' . $condition;
        }

        //Create Order By Column
        $order_by = 'ORDER BY col_list_index, _id';

        //Create Query
        $query = sprintf('SELECT %s FROM %s %s %s', $column_list,
            $this->_table_name, $condition, $order_by);
        $query = $database->select_format($query, 0, 1, $lock_mode);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Get Item Data
        $item_data = $database->fetch_assoc($result);
        $database->free_result($result);

        //Return Item Data
        return $item_data;
    }

    /**
     * Get Item Data(with Extra Initem_dataation)
     *
     * @param  int   $item_data_id //Item Data ID
     * @param  int   $report_id    //Report ID
     * @param  array $column_list  //Column List
     * @param  int   $refresh      //Lock Mode
     * @param  int   $lock_mode    //Lock Mode
     *
     * @return array  $item_data                 //Item Data Initem_dataation Array
     */
    function &getEx(
        $item_data_id,
        $report_id = null,
        $column_list = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Item Data List
        $item_data_list =& $this->getListEx($report_id, $column_list, $refresh,
            $lock_mode);

        //Get Item Data
        if ( ! array_key_exists($item_data_id, $item_data_list)) {
            $ret = false;

            return $ret;
        }

        //Return Item Data
        return $item_data_list[$item_data_id];
    }

    /**
     * Get Item Data Direct (with Extra Information)
     *
     * @param  int   $item_data_id //Item Data ID
     * @param  array $column_list  //Column List
     * @param  int   $lock_mode    //Lock Mode
     *
     * @return array  $item_data                  //Item Data Information Array
     */
    function &getDirectEx(
        $item_data_id,
        $column_list = [],
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $item_data = [];

        //Get Database
        $database = GRN_Report_Table_Manager::getDataBase();

        //Create Column List
        if (count($column_list) === 0) {
            $item_data_column_list
                = $this->_getColumnList(GRN_REPORT_TABLE_ITEMDATA);
            $item_data_file_column_list
                = $this->_getColumnList(GRN_REPORT_TABLE_FILERELATION);
            $column_list = array_merge($item_data_column_list,
                $item_data_file_column_list);
            $column_list = implode(',', $column_list);
        } else {
            $column_list = implode(',', $column_list);
        }


        //Create Table Name
        $table_name_item_data
            = GRN_Report_Table_Manager::getTableName(GRN_REPORT_TABLE_ITEMDATA);
        $table_name_item_data_file
            = GRN_Report_Table_Manager::getTableName(GRN_REPORT_TABLE_FILERELATION);

        //Create Join
        $join_list = [];
        $join_list[] = sprintf('%s f ON d._id = f.col_item_data',
            $table_name_item_data_file);
        $join = implode(' LEFT JOIN ', $join_list);
        if ($join) {
            $join = 'LEFT JOIN ' . $join;
        }

        //Create Condition
        $condition_list = [];
        $condition_list[] = cb_queryf($database, 'd._id = "@S"', $item_data_id);
        $condition = implode(' AND ', $condition_list);
        if ($condition) {
            $condition = 'WHERE ' . $condition;
        }

        //Create Order By Column
        $order_by = 'ORDER BY d.col_list_index, d._id, f._id';

        //Create Query
        $query = sprintf('SELECT %s FROM %s d %s %s %s', $column_list,
            $this->_table_name, $join, $condition, $order_by);
        $query = $database->select_format($query, 0, -1, $lock_mode);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Update Item Data List
        $count = $database->num_rows($result);
        for ($i = 0; $i < $count; $i++) {
            $row = $database->fetch_assoc($result);

            if ($i == 0) {
                $item_data = $row;
                $item_data['files'] = [];
            }

            $item_data['files'][$row['f__id']] = $row;
        }
        $database->free_result($result);

        //Return Item Data
        return $item_data;
    }

    /**
     * Get Item Data List
     *
     * @param  int   $report_id   //Report ID
     * @param  array $column_list //Column List
     * @param  bool  $refresh     //Refresh Cache
     * @param  int   $lock_mode   //Lock Mode
     *
     * @return array  $item_data_list            //Item Data Information List
     */
    function &getList(
        $report_id = null,
        $column_list = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $item_data_list = [];

        //Check Arguments
        $report_id = is_null($report_id) ? 0 : $report_id;

        //Get Report List From Cache
        $cached = false;
        if ( ! $refresh) {
            if (array_key_exists($report_id, $this->_list)) {
                if (is_array($this->_list[$report_id])) {
                    $item_data_list =& $this->_list[$report_id];
                    $cached = true;
                }
            }
        } else {
            $this->_list[$report_id] = [];
        }

        //Get Item Data List From Database
        if ( ! $cached || $refresh) {
            //Get Database
            $database = GRN_Report_Table_Manager::getDataBase();

            //Create Column List
            if (count($column_list) === 0) {
                $column_list = implode(',', $this->_getColumnList());
            } else {
                $column_list = implode(',', $column_list);
            }

            //Create Condition
            $condition_list = [];
            if ($report_id != 0) {
                $condition_list[] = cb_queryf($database, 'col_report = "@S"',
                    $report_id);
            }
            $condition = implode(' AND ', $condition_list);
            if ($condition) {
                $condition = 'WHERE ' . $condition;
            }

            //Create Order By Column
            $order_by = 'ORDER BY col_list_index, _id';

            //Create Query
            $query = sprintf('SELECT %s FROM %s %s %s', $column_list,
                $this->_table_name, $condition, $order_by);
            $query = $database->select_format($query, 0, -1, $lock_mode);

            //Execute Query
            $result = $database->query($query);
            if ($result === false) {
                //Throw Query Error
                $database->throwError(['query' => 'query failed: ' . $query]);
            }

            //Update Item Data List
            $count = $database->num_rows($result);
            for ($i = 0; $i < $count; $i++) {
                $row = $database->fetch_assoc($result);
                $this->_list[$report_id][$row['_id']] = $row;
            }
            $database->free_result($result);

            if ($count > 0) {
                $item_data_list =& $this->_list[$report_id];
            }
        }

        //Return Item Data List
        return $item_data_list;
    }

    /**
     * Get Item Data List
     *
     * @param  int   $report_id   //Report ID
     * @param  array $column_list //Column List
     * @param  bool  $refresh     //Refresh Cache
     * @param  int   $lock_mode   //Lock Mode
     *
     * @return array  $item_data_list            //Item Data Information List
     */
    function &getListEx(
        $report_id = null,
        $column_list = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $item_data_list = [];

        //Check Arguments
        $report_id = is_null($report_id) ? 0 : $report_id;

        //Get Item Data List From Cache
        $cached = false;
        if ( ! $refresh) {
            if (array_key_exists($report_id, $this->_listEx)) {
                if (is_array($this->_listEx[$report_id])) {
                    $item_data_list =& $this->_listEx[$report_id];
                    $cached = true;
                }
            }
        } else {
            $this->_listEx[$report_id] = [];
        }

        //Get Item Data List From Database
        if ( ! $cached || $refresh) {
            //Get Database
            $database = GRN_Report_Table_Manager::getDataBase();

            //Create Column List
            if (count($column_list) === 0) {
                $item_data_column_list
                    = $this->_getColumnList(GRN_REPORT_TABLE_ITEMDATA);
                $item_data_file_column_list
                    = $this->_getColumnList(GRN_REPORT_TABLE_FILERELATION);
                $column_list
                    = array_merge($item_data_column_list,
                    $item_data_file_column_list);
                $column_list = implode(',', $column_list);
            } else {
                $column_list = implode(',', $column_list);
            }

            //Create Table Name
            $table_name_item_data
                = GRN_Report_Table_Manager::getTableName(GRN_REPORT_TABLE_ITEMDATA);
            $table_name_item_data_file
                = GRN_Report_Table_Manager::getTableName(GRN_REPORT_TABLE_FILERELATION);

            //Create Join
            $join_list = [];
            $join_list[] = sprintf('%s f ON d._id = f.col_item_data',
                $table_name_item_data_file);
            $join = implode(' LEFT JOIN ', $join_list);
            if ($join) {
                $join = 'LEFT JOIN ' . $join;
            }

            //Create Condition
            $condition_list = [];
            if ($report_id != 0) {
                $condition_list[] = cb_queryf($database, 'd.col_report = "@S"',
                    $report_id);
            }
            $condition = implode(' AND ', $condition_list);
            if ($condition) {
                $condition = 'WHERE ' . $condition;
            }

            //Create Order By Column
            $order_by = 'ORDER BY d.col_list_index, d._id, f._id';

            //Create Query
            $query
                = sprintf('SELECT %s FROM %s d FORCE INDEX(idx_report_list_index) %s %s %s',
                $column_list, $this->_table_name, $join, $condition, $order_by);
            $query = $database->select_format($query, 0, -1, $lock_mode);

            //Execute Query
            $result = $database->query($query);
            if ($result === false) {
                //Throw Query Error
                $database->throwError(['query' => 'query failed: ' . $query]);
            }

            //Update Item Data List
            $prev_item_data_id = 0;
            $count = $database->num_rows($result);
            for ($i = 0; $i < $count; $i++) {
                $row = $database->fetch_assoc($result);
                if ($prev_item_data_id != $row['d__id']) {
                    $this->_listEx[$report_id][$row['d__id']] = $row;
                    $this->_listEx[$report_id][$row['d__id']]['files'] = [];
                }
                $this->_listEx[$report_id][$row['d__id']]['files'][$row['f__id']]
                    = $row;
                $prev_item_data_id = $row['d__id'];
            }
            $database->free_result($result);

            if ($count > 0) {
                $item_data_list =& $this->_listEx[$report_id];
            }
        }

        //Return Item Data List
        return $item_data_list;
    }

    /**
     * Get Item Data List
     *
     * @param  array $report_ids  //Report ID
     * @param  array $column_list //Column List
     * @param  bool  $refresh     //Refresh Cache
     * @param  int   $lock_mode   //Lock Mode
     *
     * @return array  $item_data_list            //Item Data Information List
     */
    function &getReportsListEx(
        $report_ids = null,
        $column_list = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $item_data_list = [];

        //Get Item Data List From Cache
        if ( ! $refresh) {
            foreach ($report_ids as $key => $report_id) {
                if (array_key_exists($report_id, $this->_listEx)) {
                    if (is_array($this->_listEx[$report_id])) {
                        $item_data_list[$report_id]
                            =& $this->_listEx[$report_id];
                        unset($report_ids[$key]);
                    }
                }
            }
        } else {
            $this->_listEx[$report_id] = [];
        }

        //Get Item Data List From Database
        if (count($report_ids) > 0) {
            //Get Database
            $database = GRN_Report_Table_Manager::getDataBase();

            $reports = [];
            foreach ($report_ids as $report_id) {
                $reports[] = cb_queryf($database, "'@S'", $report_id);
            }
            $reports_string = implode(',', $reports);

            //Create Column List
            if (count($column_list) === 0) {
                $item_data_column_list
                    = $this->_getColumnList(GRN_REPORT_TABLE_ITEMDATA);
                $item_data_file_column_list
                    = $this->_getColumnList(GRN_REPORT_TABLE_FILERELATION);
                $column_list
                    = array_merge($item_data_column_list,
                    $item_data_file_column_list);
                $column_list = implode(',', $column_list);
            } else {
                $column_list = implode(',', $column_list);
            }

            //Create Table Name
            $table_name_item_data
                = GRN_Report_Table_Manager::getTableName(GRN_REPORT_TABLE_ITEMDATA);
            $table_name_item_data_file
                = GRN_Report_Table_Manager::getTableName(GRN_REPORT_TABLE_FILERELATION);

            //Create Join
            $join_list = [];
            $join_list[] = sprintf('%s f ON d._id = f.col_item_data',
                $table_name_item_data_file);
            $join = implode(' LEFT JOIN ', $join_list);
            if ($join) {
                $join = 'LEFT JOIN ' . $join;
            }

            //Create Condition
            $condition_list = [];
            $condition_list[] = 'd.col_report IN (' . $reports_string . ')';
            $condition = implode(' AND ', $condition_list);
            if ($condition) {
                $condition = 'WHERE ' . $condition;
            }

            //Create Order By Column
            $order_by = 'ORDER BY d.col_report, d.col_list_index, d._id, f._id';

            //Create Query
            $query
                = sprintf('SELECT %s FROM %s d FORCE INDEX(idx_report_list_index) %s %s %s',
                $column_list, $this->_table_name, $join, $condition, $order_by);
            $query = $database->select_format($query, 0, -1, $lock_mode);

            //Execute Query
            $result = $database->query($query);
            if ($result === false) {
                //Throw Query Error
                $database->throwError(['query' => 'query failed: ' . $query]);
            }

            //Update Item Data List
            $prev_item_data_id = 0;
            $count = $database->num_rows($result);
            for ($i = 0; $i < $count; $i++) {
                $row = $database->fetch_assoc($result);
                $report_id = $row['d_col_report'];

                if ($prev_item_data_id != $row['d__id']) {
                    $this->_listEx[$report_id][$row['d__id']] = $row;
                    $this->_listEx[$report_id][$row['d__id']]['files'] = [];
                }
                $this->_listEx[$report_id][$row['d__id']]['files'][$row['f__id']]
                    = $row;
                $prev_item_data_id = $row['d__id'];
            }
            $database->free_result($result);

            foreach ($report_ids as $report_id) {
                if (array_key_exists($report_id, $this->_listEx)) {
                    $item_data_list[$report_id] =& $this->_listEx[$report_id];
                }
            }
        }

        //Return Item Data List
        return $item_data_list;
    }

    /**
     * Get Item Data Count
     *
     * @param  int  $report_id //Report ID
     * @param  bool $refresh   //Refresh Cache
     * @param  int  $lock_mode //Lock Mode
     *
     * @return int    $item_data_count           //Item Data Count
     */
    function getCount(
        $report_id = null,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Database
        $database = GRN_Report_Table_Manager::getDataBase();

        //Create Condition
        $condition_list = [];
        if ( ! is_null($report_id)) {
            $condition_list[] = cb_queryf($database, 'col_report = "@S"',
                $report_id);
        }
        $condition = implode(' AND ', $condition_list);
        if ($condition) {
            $condition = 'WHERE ' . $condition;
        }

        //Create Query
        $query = sprintf('SELECT COUNT(*) FROM %s %s', $this->_table_name,
            $condition);
        $query = $database->select_format($query, 0, -1, $lock_mode);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }
        $row = $database->fetch_assoc($result);
        $database->free_result($result);

        //Return Item Data Count
        return $row['COUNT(*)'];
    }

    function &gets(
        $report_ids = [],
        $column_list = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $item_data_list = [];

        //Get Database
        $database = GRN_Report_Table_Manager::getDataBase();

        //Create Column List
        if (count($column_list) === 0) {
            $column_list = implode(',', $this->_getColumnList());
        } else {
            $column_list = implode(',', $column_list);
        }

        //Create Condition
        $condition_list = [];
        //if ($report_id != 0)
        if (count($report_ids) > 0) {
            $condition_list[] = cb_queryf($database, 'col_report IN(@S)',
                implode(",", $report_ids));
        }
        $condition = implode(' AND ', $condition_list);
        if ($condition) {
            $condition = 'WHERE ' . $condition;
        }

        //Create Order By Column
        $order_by = 'ORDER BY col_list_index, _id';

        //Create Query
        $query = sprintf('SELECT %s FROM %s %s %s', $column_list,
            $this->_table_name, $condition, $order_by);
        $query = $database->select_format($query, 0, -1, $lock_mode);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Update Item Data List
        $count = $database->num_rows($result);
        $item_data_list = [];
        for ($i = 0; $i < $count; $i++) {
            $row = $database->fetch_assoc($result);
            $item_data_list[$row['_id']] = $row;
            //$this->_list[$report_id][$row['_id']] = $row;
        }
        $database->free_result($result);


        //Return Item Data List
        return $item_data_list;
    }

    /**
     * Get Report's Subject Name
     *
     * @param  int $report_id //Report ID
     * @param  int $refresh   //Lock Mode
     * @param  int $lock_mode //Lock Mode
     *
     * @return array  $item_data                 //Item Data Information Array
     */
    function &getSubject(
        $report_id,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Database
        $database = GRN_Report_Table_Manager::getDataBase();

        //Create Condition
        $condition = cb_queryf($database,
            'WHERE col_report = "@S" AND col_type = "1"', $report_id);

        //Create Query
        $query
            = sprintf('SELECT col_option_string, col_option_string_type, col_text FROM %s %s',
            $this->_table_name, $condition);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Get Item Data
        $item_data = $database->fetch_assoc($result);
        $database->free_result($result);

        //Get Item Data
        if ( ! $item_data) {
            $ret = false;

            return $ret;
        }

        //Return Item Data
        return $item_data;
    }

    /**
     * Get Report's Subject Name List
     *
     * @param  int $report_ids //Report ID List
     * @param  int $refresh    //Lock Mode
     * @param  int $lock_mode  //Lock Mode
     *
     * @return array  $item_data                 //Item Data Information Array
     */
    function &getSubjectList(
        $report_ids,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        if ( ! (count($report_ids) > 0)) {
            return false;
        }

        //Get Database
        $database = GRN_Report_Table_Manager::getDataBase();

        //Create Condition
        $condition = cb_queryf($database,
            'WHERE col_report IN (@S) AND col_type = "1"',
            implode(',', $report_ids));

        //Create Query
        $query
            = sprintf('SELECT col_option_string, col_option_string_type, col_report, col_text FROM %s %s',
            $this->_table_name, $condition);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Update Item Data List
        $count = $database->num_rows($result);
        $item_data_list = [];
        for ($i = 0; $i < $count; $i++) {
            $row = $database->fetch_assoc($result);
            $item_data_list[$row['col_report']] = $row;
        }
        $database->free_result($result);

        //Return Item Data
        return $item_data_list;
    }
}


