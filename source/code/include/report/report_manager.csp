<?php
/**
 * Report Application Report Class
 *
 * @author  Shou Aoki 2009/09
 * @version 1.0
 * @package grn.report
 */

/** Report Application **/
require_once('report/resources.csp');
require_once('report/report_manager_base.csp');
require_once('report/table_manager.csp');

/**
 * Report Manager Class
 *
 * @package grn.report
 */
class GRN_Report_Report_Manager extends GRN_Report_Report_Manager_Base
{
    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
        //Get Parent Instance
        $parent = parent::getInstance();

        //Sync Parent Table and Report List Cache
        $this->_table_name =& $parent->_table_name;
        $this->_list =& $parent->_list;
    }

    /**
     * @var self
     */
    private static $_instance = null;

    /**
     * @return self
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Create Report
     *
     * @param  array $property_list //Property List(Name=>Value)
     *
     * @return int   $report_id                //Report ID
     */
    function create($property_list)
    {
        if ( ! array_key_exists(GRN_REPORT_COLUMN_PRIVATE, $property_list)
             || is_null($property_list[GRN_REPORT_COLUMN_PRIVATE])
        ) {
            $property_list[GRN_REPORT_COLUMN_PRIVATE] = 0;
        }
        $id = GRN_Report_Table_Manager::genericCreate(GRN_REPORT_TABLE_REPORT,
            $property_list);

        return $id;
    }

    /**
     * Update Report
     *
     * @param  array $report_id     //Report ID
     * @param  array $property_list //Property List(Name=>Value)
     *
     * @return array $report_id                //Report ID
     */
    function update($report_id, $property_list)
    {
        $id = GRN_Report_Table_Manager::updateById(GRN_REPORT_TABLE_REPORT,
            $report_id, $property_list);

        return $id;
    }

    /**
     * Remove Report
     *
     * @param int  $report_id //Report ID
     * @param BOOL $result    //Result
     */
    function remove($report_id)
    {
        GRN_Report_Table_Manager::removeById(GRN_REPORT_TABLE_REPORT,
            $report_id);

        //Delete From Report List
        foreach (array_keys($this->_list) as $key) {
            if (in_array($report_id, $this->_list[$key])) {
                unset($this->_list[$key][$report_id]);
            }
        }

        return true;
    }

    /**
     * Remove Multiple Report
     *
     * @param array $report_id_list //Report ID List
     * @param BOOL  $result         //Result
     */
    function removeMulti($report_id_list)
    {
        if (is_array($report_id_list) && count($report_id_list) === 0) {
            return;
        }

        foreach ($report_id_list as $report_id) {
            $this->remove($report_id);
        }

        return true;
    }

    /**
     * Remove All Report
     *
     * @param int  $form_id //Form ID
     * @param BOOL $result  //Result
     */
    function removeAll($form_id = null)
    {
        //Get Database
        $database =& GRN_Report_Table_Manager::getDatabase();

        //Create Column List
        $column_list = implode(',', $this->_getColumnList());

        //Create Query
        $where_string = "";
        if ($form_id == -1) {
            $where_string = 'col_form IS NULL';
        } elseif ( ! is_null($form_id)) {
            $where_string = cb_queryf($database, 'col_form = "@S"', $form_id);
        }

        GRN_Report_Table_Manager::remove($this->_table_name, $where_string);

        //Delete From Report List
        unset($this->_list[$form_id]);

        return true;
    }

    /**
     * Change Report Order
     *
     * @param  int $report_id_list //Report ID List
     *
     * @return BOOL   $result                    //Result
     */
    function changeOrder($report_id_list)
    {
        //Set New List Index
        $list_index = 0;
        $property_list = [];
        foreach ($report_id_list as $report_id) {
            $property_list[GRN_REPORT_COLUMN_LIST_INDEX] = $list_index;
            $this->update($report_id, $property_list);
            $list_index++;
        }

        return true;
    }

    /**
     * Change the category related to reports
     */
    function changeCategory($category_id, $form_id)
    {
        $database =& GRN_Report_Table_Manager::getDatabase();

        $set_string = GRN_Report_Table_Manager::createUpdateString(
            [GRN_REPORT_COLUMN_CATEGORY],
            [GRN_REPORT_COLUMN_CATEGORY => $category_id]);

        GRN_Report_Table_Manager::update(
            $this->_table_name,
            $set_string,
            cb_queryf($database, "col_form = '@S'", $form_id)
        );

        return true;
    }

}


