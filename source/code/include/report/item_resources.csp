<?php

/**
 * Report Application Item Resources
 *
 * @author  Shou,Aoki 2009/09
 * @version 1.0
 * @package grn.report
 */

require_once('grn/controller.csp');
require_once('report/resources.csp');


$item_class_list = [];

/**
 * Item Base Class
 *
 * @package grn.report
 */
class GRN_Report_Item_Util_Base
{
    //Foreign_key
    var $_foreign_key = null;

    //Template Names
    var $_set_template = null;     //Template for Setting
    var $_detail_template = null;     //Template for Detail
    var $_view_template = null;     //Template for View

    /**
     * Set Item Data
     *
     * @param  array $item          //Item Information
     * @param  array $property_list //Property List
     * @param  bool  $chack_value   //Check Value Flag
     *
     * @return bool   $result                    //Result
     */
    function setItemData(& $item, & $property_list, $check_value = true)
    {
        $property_list[GRN_REPORT_COLUMN_NUMBER] = null;
        $property_list[GRN_REPORT_COLUMN_TEXT] = null;

        return true;
    }

    /**
     * Set Item data File
     *
     * @param  int   $report_id     //Report ID
     * @param  int   $item_data_id  //Item Data ID
     * @param  array $item          //Item Information
     * @param  array $property_list //Property List
     * @param  bool  $chack_value   //Check Value Flag
     *
     * @return bool   $result                    //Result
     */
    function setItemDataFile(
        $report_id,
        $item_data_id,
        & $item,
        & $property_list,
        $check_value = true
    ) {
        return true;
    }

    /**
     * Perse Item Data
     *
     * @param  mixed  $input_data        //Input Data
     * @param  string $input_data_prefix //Input Data Prefix
     * @param  array  $item              //Item Information Array
     *
     * @return mixed  $parsed_input_data         //Parsed Input Data
     */
    function parseItemData(& $input_data, $input_data_prefix, & $item)
    {
        $parsed_input_data = null;

        //Set Parsed Input Data
        $item_key = sprintf('%s_%s', $input_data_prefix,
            $item['iid']);
        $input_data[$item_key] = $parsed_input_data;

        //return Parsed Input Data
        return $parsed_input_data;
    }

    /**
     * Check Item Data
     *
     * @param  mixed $parsed_input_data //Parsed Input Data
     * @param  array $item              //Item Information Array
     *
     * @return bool   $result                    //Result
     */
    function checkItemData(& $parsed_input_data, & $item)
    {
        require_once('report/error_code.csp');

        $check_required = true;

        //Check Required
        if ($item['required'] == 1 && $check_required) {
            require_once('fw/string_util.csp');
            cb_trim_check($parsed_input_data,
                E_GRN_RPRT_ITEMDATA_NOT_INPUT_NECESSARY);
        }
    }

    /**
     * Get Item data
     *
     * @param  array $item //Item Information
     *
     * @return mixed                             //Result
     */
    function getItemData(& $item)
    {
        $ret = null;

        return $ret;
    }

    /**
     * Get Item data File
     *
     * @param  int   $item_data_id //Item Data ID
     * @param  array $item         //Item Information
     *
     * @return array                             //File Information
     */
    function getItemDataFile($item_data_id, & $item)
    {
        return null;
    }
}

/**
 * Single String Item Class
 *
 * @package grn.report
 */
class GRN_Report_Item_Util_String_Single extends GRN_Report_Item_Util_Base
{
    /**
     * Constructor
     */
    function __construct()
    {
        //Initialize Foreign_key
        $this->_foreign_key = 'grn.report.string_single';

        //Initialize Template Names
        $this->_set_template = 'report/item/set_string_single.csp';
        $this->_detail_template = 'report/item/detail_string_single.csp';
        $this->_view_template = 'report/item/view_string_single.csp';
    }

    /**
     * Set Item Data
     *
     * @param  array $item          //Item Information
     * @param  array $property_list //Property List
     * @param  bool  $chack_value   //Check Value Flag
     *
     * @return bool   $result                    //Result
     */
    function setItemData(& $item, & $property_list, $check_value = true)
    {
        $parsed_input_data = @ $item['text'];

        //Check and Set Item Data
        if ($check_value) {
            $this->checkItemData($parsed_input_data, $item);
        }
        $property_list[GRN_REPORT_COLUMN_NUMBER] = null;
        $property_list[GRN_REPORT_COLUMN_TEXT] = $parsed_input_data;

        return true;
    }

    /**
     * Perse Item Data
     *
     * @param  mixed  $input_data        //Input Data
     * @param  string $input_data_prefix //Input Data Prefix
     * @param  array  $item              //Item Information Array
     *
     * @return mixed  $parsed_input_data         //Parsed Input Data
     */
    function parseItemData(& $input_data, $input_data_prefix, & $item)
    {
        $parsed_input_data = null;

        //Parse Input Data
        $key = sprintf('%s_%s', $input_data_prefix, $item['iid']);
        $parsed_input_data = @ $input_data[$key];


        //Set Parsed Input Data to Item
        $item['text'] = $parsed_input_data;

        //Set Parsed Input Data
        $item_key = sprintf('%s_%s', $input_data_prefix,
            $item['iid']);
        $input_data[$item_key] = $parsed_input_data;

        //Return Parsed Input Data 
        return $parsed_input_data;
    }

    /**
     * Check Item Data
     *
     * @param  mixed $parsed_input_data //Parsed Input Data
     * @param  array $item              //Item Information Array
     *
     * @return bool   $result                    //Result
     */
    function checkItemData(& $parsed_input_data, & $item)
    {
        return true;
    }

    /**
     * Get Item data
     *
     * @param  array $item //Item Information
     *
     * @return string $item_data_value           //Result
     */
    function getItemData(& $item)
    {
        $item_data_value = $item[GRN_REPORT_COLUMN_TEXT];

        return $item_data_value;
    }
}

/**
 * Multiple String Item Class
 *
 * @package grn.report
 */
class GRN_Report_Item_Util_String_Multiple extends GRN_Report_Item_Util_Base
{
    /**
     * Constructor
     */
    function __construct()
    {
        //Initialize Foreign_key
        $this->_foreign_key = 'grn.report.string_multiple';

        //Initialize Template Names
        $this->_set_template = 'report/item/set_string_multiple.csp';
        $this->_detail_template = 'report/item/detail_string_multiple.csp';
        $this->_view_template = 'report/item/view_string_multiple.csp';
    }

    /**
     * Set Item Data
     *
     * @param  array $item          //Item Information
     * @param  array $property_list //Property List
     * @param  bool  $chack_value   //Check Value Flag
     *
     * @return bool   $result                    //Result
     */
    function setItemData(& $item, & $property_list, $check_value = true)
    {
        if (array_key_exists('html', $item) && $item['html']) {
            $property_list[GRN_REPORT_COLUMN_HTML] = $item['html'];
        }

        $parsed_input_data = @ $item['text'];

        //Check and Set Item Data
        if ($check_value) {
            $this->checkItemData($parsed_input_data, $item);
        }
        $property_list[GRN_REPORT_COLUMN_NUMBER] = null;
        $property_list[GRN_REPORT_COLUMN_TEXT] = $parsed_input_data;

        return true;
    }

    /**
     * Perse Item Data
     *
     * @param  mixed  $input_data        //Input Data
     * @param  string $input_data_prefix //Input Data Prefix
     * @param  array  $item              //Item Information Array
     *
     * @return mixed  $parsed_input_data         //Parsed Input Data
     */
    function parseItemData(& $input_data, $input_data_prefix, & $item)
    {
        $parsed_input_data = null;

        //Parse Input Data
        $key = sprintf('%s_%s', $input_data_prefix,
            $item['iid']);
        $parsed_input_data = @ $input_data[$key];
        $editor_key = sprintf('editor_%s_%s', $input_data_prefix,
            $item['iid']);
        $parsed_input_editor = @ $input_data[$editor_key];

        //Set Parsed Input Data to Item
        if ($parsed_input_editor) {
            require_once('grn/controller.csp');
            $item['text'] = grn_strip_tags($parsed_input_data);
            $item['html']
                = grn_wash_script_without_style_attribute($parsed_input_data);
        } else {
            $item['text'] = $parsed_input_data;
            $item['html'] = null;
        }

        //Set Parsed Input Data
        $item_key = sprintf('%s_%s', $input_data_prefix,
            $item['iid']);
        $input_data[$item_key] = $parsed_input_data;

        //Return Parsed Input Data 
        return $parsed_input_data;
    }

    /**
     * Get Item data
     *
     * @param  array $item //Item Information
     *
     * @return string $item_data_value           //Result
     */
    function getItemData(& $item)
    {
        $item_data_value = $item[GRN_REPORT_COLUMN_TEXT];

        return $item_data_value;
    }
}

/**
 * String Menu Item Class
 *
 * @package grn.report
 */
class GRN_Report_Item_Util_Menu_String extends GRN_Report_Item_Util_Base
{
    /**
     * Constructor
     */
    function __construct()
    {
        //Initialize Foreign_key
        $this->_foreign_key = 'grn.report.menu_string';

        //Initialize Template Names
        $this->_set_template = 'report/item/set_menu_string.csp';
        $this->_detail_template = 'report/item/detail_menu_string.csp';
        $this->_view_template = 'report/item/view_menu_string.csp';
    }

    /**
     * Set Item Data
     *
     * @param  array $item          //Item Information
     * @param  array $property_list //Property List
     * @param  bool  $chack_value   //Check Value Flag
     *
     * @return bool   $result                    //Result
     */
    function setItemData(& $item, & $property_list, $check_value = true)
    {
        $parsed_input_data = @ $item['text'];

        //Check and Set Item Data
        if ($check_value) {
            $this->checkItemData($parsed_input_data, $item);
        }
        $property_list[GRN_REPORT_COLUMN_NUMBER] = null;
        $property_list[GRN_REPORT_COLUMN_TEXT] = $parsed_input_data;

        return true;
    }

    /**
     * Perse Item Data
     *
     * @param  mixed  $input_data        //Input Data
     * @param  string $input_data_prefix //Input Data Prefix
     * @param  array  $item              //Item Information Array
     *
     * @return mixed  $parsed_input_data         //Parsed Input Data
     */
    function parseItemData(& $input_data, $input_data_prefix, & $item)
    {
        $parsed_input_data = null;

        //Parse Input Data
        $key = sprintf('%s_%s', $input_data_prefix, $item['iid']);
        $parsed_input_data = @ $input_data[$key];


        //Set Parsed Input Data to Item
        $item['text'] = $parsed_input_data;

        //Set Parsed Input Data
        $item_key = sprintf('%s_%s', $input_data_prefix,
            $item['iid']);
        $input_data[$item_key] = $parsed_input_data;

        //Return Parsed Input Data 
        return $parsed_input_data;
    }

    /**
     * Get Item data
     *
     * @param  array $item //Item Information
     *
     * @return string $item_data_value           //Result
     */
    function getItemData(& $item)
    {
        $item_data_value = $item[GRN_REPORT_COLUMN_TEXT];

        return $item_data_value;
    }
}

/**
 * Radio Button Item Class
 *
 * @package grn.report
 */
class GRN_Report_Item_Util_Radio extends GRN_Report_Item_Util_Base
{
    /**
     * Constructor
     */
    function __construct()
    {
        //Initialize Foreign_key
        $this->_foreign_key = 'grn.report.radio';

        //Initialize Template Names
        $this->_set_template = 'report/item/set_radio.csp';
        $this->_detail_template = 'report/item/detail_radio.csp';
        $this->_view_template = 'report/item/view_radio.csp';
    }

    /**
     * Set Item Data
     *
     * @param  array $item          //Item Information
     * @param  array $property_list //Property List
     * @param  bool  $chack_value   //Check Value Flag
     *
     * @return bool   $result                    //Result
     */
    function setItemData(& $item, & $property_list, $check_value = true)
    {
        $parsed_input_data = @ $item['text'];

        //Check and Set Item Data
        if ($check_value) {
            $this->checkItemData($parsed_input_data, $item);
        }
        $property_list[GRN_REPORT_COLUMN_NUMBER] = null;
        $property_list[GRN_REPORT_COLUMN_TEXT] = $parsed_input_data;

        return true;
    }

    /**
     * Perse Item Data
     *
     * @param  mixed  $input_data        //Input Data
     * @param  string $input_data_prefix //Input Data Prefix
     * @param  array  $item              //Item Information Array
     *
     * @return mixed  $parsed_input_data         //Parsed Input Data
     */
    function parseItemData(& $input_data, $input_data_prefix, & $item)
    {
        $parsed_input_data = null;

        //Parse Input Data
        $key = sprintf('%s_%s', $input_data_prefix, $item['iid']);
        $parsed_input_data = @ $input_data[$key];


        //Set Parsed Input Data to Item
        $item['text'] = $parsed_input_data;

        //Set Parsed Input Data
        $item_key = sprintf('%s_%s', $input_data_prefix,
            $item['iid']);
        $input_data[$item_key] = $parsed_input_data;

        //Return Parsed Input Data 
        return $parsed_input_data;
    }

    /**
     * Get Item data
     *
     * @param  array $item //Item Information
     *
     * @return string $item_data_value           //Result
     */
    function getItemData(& $item)
    {
        $item_data_value = $item[GRN_REPORT_COLUMN_TEXT];

        return $item_data_value;
    }
}

/**
 * CheckBox Item Class
 *
 * @package grn.report
 */
class GRN_Report_Item_Util_Checkbox extends GRN_Report_Item_Util_Base
{
    /**
     * Constructor
     */
    function __construct()
    {
        //Initialize Foreign_key
        $this->_foreign_key = 'grn.report.checkbox';

        //Initialize Template Names
        $this->_set_template = 'report/item/set_checkbox.csp';
        $this->_detail_template = 'report/item/detail_checkbox.csp';
        $this->_view_template = 'report/item/view_checkbox.csp';
    }

    /**
     * Set Item Data
     *
     * @param  array $item          //Item Information
     * @param  array $property_list //Property List
     * @param  bool  $chack_value   //Check Value Flag
     *
     * @return bool   $result                    //Result
     */
    function setItemData(& $item, & $property_list, $check_value = true)
    {
        $parsed_input_data = @ $item['number'];

        //Check and Set Item Data
        if ($check_value) {
            $this->checkItemData($parsed_input_data, $item);
        }
        $property_list[GRN_REPORT_COLUMN_NUMBER] = $parsed_input_data;
        $property_list[GRN_REPORT_COLUMN_TEXT] = null;

        return true;
    }

    /**
     * Perse Item Data
     *
     * @param  mixed  $input_data        //Input Data
     * @param  string $input_data_prefix //Input Data Prefix
     * @param  array  $item              //Item Information Array
     *
     * @return mixed  $parsed_input_data         //Parsed Input Data
     */
    function parseItemData(& $input_data, $input_data_prefix, & $item)
    {
        $parsed_input_data = null;

        //Parse Input Data
        $key = sprintf('%s_%s', $input_data_prefix, $item['iid']);
        $parsed_input_data = @ $input_data[$key];
        if ( ! $parsed_input_data) {
            $parsed_input_data = 0;
        }

        //Set Parsed Input Data to Item
        $item['number'] = $parsed_input_data;

        //Set Parsed Input Data
        $item_key = sprintf('%s_%s', $input_data_prefix,
            $item['iid']);
        $input_data[$item_key] = $parsed_input_data;

        //Return Parsed Input Data 
        return $parsed_input_data;
    }

    /**
     * Check Item Data
     *
     * @param  mixed $parsed_input_data //Parsed Input Data
     * @param  array $item              //Item Information Array
     *
     * @return bool   $result                    //Result
     */
    function checkItemData(& $parsed_input_data, & $item)
    {
        //Always TRUE
        return;
    }

    /**
     * Get Item data
     *
     * @param  array $item //Item Information
     *
     * @return int    $item_data_value           //Result
     */
    function getItemData(& $item)
    {
        $item_data_value = $item[GRN_REPORT_COLUMN_NUMBER];

        return $item_data_value;
    }
}

/**
 * Numeric Item Class
 *
 * @package grn.report
 */
class GRN_Report_Item_Util_Numeric extends GRN_Report_Item_Util_Base
{

    /**
     * Constructor
     */
    function __construct()
    {
        //Initialize Foreign_key
        $this->_foreign_key = 'grn.report.numeric';

        //Initialize Template Names
        $this->_set_template = 'report/item/set_numeric.csp';
        $this->_detail_template = 'report/item/detail_numeric.csp';
        $this->_view_template = 'report/item/view_numeric.csp';
    }

    /**
     * Set Item Data
     *
     * @param  array $item          //Item Information
     * @param  array $property_list //Property List
     * @param  bool  $chack_value   //Check Value Flag
     *
     * @return bool   $result                    //Result
     */
    function setItemData(& $item, & $property_list, $check_value = true)
    {
        $parsed_input_data = @ $item['number'];

        //Check and Set Item Data
        if ($check_value) {
            $this->checkItemData($parsed_input_data, $item);
        }
        $property_list[GRN_REPORT_COLUMN_NUMBER] = $parsed_input_data;
        $property_list[GRN_REPORT_COLUMN_TEXT] = null;

        return true;
    }

    /**
     * Perse Item Data
     *
     * @param  mixed  $input_data        //Input Data
     * @param  string $input_data_prefix //Input Data Prefix
     * @param  array  $item              //Item Information Array
     *
     * @return mixed  $parsed_input_data         //Parsed Input Data
     */
    function parseItemData(& $input_data, $input_data_prefix, & $item)
    {
        $parsed_input_data = null;

        //Parse Input Data
        $key = sprintf('%s_%s', $input_data_prefix, $item['iid']);
        $parsed_input_data = $input_data[$key];

        require_once('fw/string_util.csp');
        $parsed_input_data = cb_trim($parsed_input_data);

        //Apply Effective Figures
        if (is_numeric($parsed_input_data)) {
            $parsed_input_data = bcmul($parsed_input_data, 1,
                $item['settings']['effective_figures']);
        }


        //Set Parsed Input Data to Item
        $item['number'] = $parsed_input_data;

        //Set Parsed Input Data
        $item_key = sprintf('%s_%s', $input_data_prefix,
            $item['iid']);
        $input_data[$item_key] = $parsed_input_data;

        //Return Parsed Input Data 
        return $parsed_input_data;
    }

    /**
     * Check Item Data
     *
     * @param  mixed $parsed_input_data //Parsed Input Data
     * @param  array $item              //Item Information Array
     *
     * @return bool   $result                    //Result
     */
    function checkItemData(& $parsed_input_data, & $item)
    {
        require_once('report/error_code.csp');

        //Check Required
        if ($item['required'] == 1) {
            require_once('fw/string_util.csp');
            cb_trim_check($parsed_input_data,
                E_GRN_RPRT_ITEMDATA_NOT_INPUT_NECESSARY);
        }

        //Check Charactor Type
        if ($item['settings']['input_numbers'] == 1
            && is_numeric($parsed_input_data)
        ) {
            if (is_numeric($item['settings']['max_input_number'])
                && $parsed_input_data > $item['settings']['max_input_number']
            ) {
                //Invalid Item Data
                cb_throw_error(E_GRN_RPRT_ITEM_INVALID_INPUT_DATA);
            }
            if (is_numeric($item['settings']['min_input_number'])
                && $parsed_input_data < $item['settings']['min_input_number']
            ) {
                //Invalid Item Data
                cb_throw_error(E_GRN_RPRT_ITEM_INVALID_INPUT_DATA);
            }
        }

        return;
    }

    /**
     * Get Item data
     *
     * @param  array $item //Item Information
     *
     * @return int    $item_data_value           //Result
     */
    function getItemData(& $item)
    {
        $item_data_value = $item[GRN_REPORT_COLUMN_NUMBER];

        return $item_data_value;
    }
}

/**
 * Date Item Class
 *
 * @package grn.report
 */
class GRN_Report_Item_Util_Date extends GRN_Report_Item_Util_Base
{
    const DEFAULT_TIMEZONE = 'Asia/Tokyo'; // 日付は3.0以前のバージョンとの互換性のためJSTで扱う

    /**
     * Constructor
     */
    function __construct()
    {
        //Initialize Foreign_key
        $this->_foreign_key = 'grn.report.date';

        //Initialize Template Names
        $this->_set_template = 'report/item/set_date.csp';
        $this->_detail_template = 'report/item/detail_date.csp';
        $this->_view_template = 'report/item/view_date.csp';
    }

    /**
     * Set Item Data
     *
     * @param  array $item          //Item Information
     * @param  array $property_list //Property List
     * @param  bool  $chack_value   //Check Value Flag
     *
     * @return bool   $result                    //Result
     */
    function setItemData(& $item, & $property_list, $check_value = true)
    {
        $parsed_input_data = @ $item['number'];

        //Check and Set Item Data
        if ($check_value) {
            $this->checkItemData($parsed_input_data, $item);
        }
        $property_list[GRN_REPORT_COLUMN_NUMBER] = $parsed_input_data;
        $property_list[GRN_REPORT_COLUMN_TEXT] = null;

        return true;
    }

    /**
     * Perse Item Data
     *
     * @param  mixed  $input_data        //Input Data
     * @param  string $input_data_prefix //Input Data Prefix
     * @param  array  $item              //Item Information Array
     *
     * @return mixed  $parsed_input_data         //Parsed Input Data
     */
    function parseItemData(& $input_data, $input_data_prefix, & $item)
    {
        $parsed_input_data = null;

        //Parse Input Data
        $key_year = sprintf('%s_%s_year', $input_data_prefix,
            $item['iid']);
        $key_month = sprintf('%s_%s_month', $input_data_prefix,
            $item['iid']);
        $key_day = sprintf('%s_%s_day', $input_data_prefix,
            $item['iid']);
        $parsed_input_data['year'] = $input_data[$key_year];
        $parsed_input_data['month'] = $input_data[$key_month];
        $parsed_input_data['day'] = $input_data[$key_day];


        //Set Parsed Input Data to Item
        //$item['text'] = serialize($parsed_input_data);
        $year = $parsed_input_data['year'];
        $month = $parsed_input_data['month'];
        $day = $parsed_input_data['day'];
        $timestamp = 0;
        if (strlen($year) == 0 || strlen($month) == 0 || strlen($day) == 0) {
            $timestamp = null;
        } else {
            $datetime = new CB_DateTime();
            $datetime->year = $year;
            $datetime->month = $month;
            $datetime->day = $day;
            $datetime->hour = 0;
            $datetime->minute = 0;
            $datetime->second = 0;

            if ( ! cb_date_validate_datetime($datetime)) {
                cb_throw_error(E_COMMON_INVALID_DATETIME);
            }

            //GRN2-3628
            $current_timezone = CB_I18N::getInstance()->getCurrentTimezone();
            $timestamp = cb_datetime_to_timestamp($datetime,
                $current_timezone);
            //GRN2-3628
        }
        $item['number'] = $timestamp;

        //Set Parsed Input Data
        $item_key = sprintf('%s_%s', $input_data_prefix,
            $item['iid']);
        $input_data[$item_key] = $timestamp;

        //Return Parsed Input Data 
        return $parsed_input_data;
    }

    /**
     * Check Item Data
     *
     * @param  mixed $parsed_input_data //Parsed Input Data
     * @param  array $item              //Item Information Array
     *
     * @return bool   $result                    //Result
     */
    function checkItemData(& $parsed_input_data, & $item)
    {
        require_once('report/error_code.csp');

        //Check Required
        if ($item['required'] == 1) {
            if (strlen($parsed_input_data) == 0) {
                cb_throw_error(E_GRN_RPRT_ITEMDATA_NOT_INPUT_NECESSARY);
            }
        }
    }

    /**
     * Get Item data
     *
     * @param  array $item //Item Information
     *
     * @return object $item_data_value           //item_data_value :year,month,day
     */
    function getItemData(& $item)
    {
        $datetime = cb_timestamp_to_datetime($item[GRN_REPORT_COLUMN_NUMBER],
            self::DEFAULT_TIMEZONE);

        require_once('fw/date.csp');
        $date = new CB_Date();
        if (empty($item[GRN_REPORT_COLUMN_NUMBER])) {
            $date->year = null;
            $date->month = null;
            $date->day = null;
        } else {
            $date->year = $datetime->year;
            $date->month = $datetime->month;
            $date->day = $datetime->day;
        }

        return $date;

    }
}

/**
 * Time Item Class
 *
 * @package grn.report
 */
class GRN_Report_Item_Util_Time extends GRN_Report_Item_Util_Base
{
    const DUMMY_YEAR = 2000;
    const DUMMY_MONTH = 1;
    const DUMMY_DAY = 1;
    const DUMMY_SECOND = 0;
    const DEFAULT_TIMEZONE = 'UTC';

    /**
     * Constructor
     *
     * @return none
     */
    public function __construct()
    {
        //Initialize Foreign_key
        $this->_foreign_key = GRN_REPORT_CONDITION_ITEM_TIME;

        //Initialize Template Names
        $this->_set_template = 'report/item/set_time.csp';
        $this->_detail_template = 'report/item/detail_time.csp';
        $this->_view_template = 'report/item/view_time.csp';
    }

    /**
     * Set Item Time
     *
     * @param  array $item          //Item Information
     * @param  array $property_list //Property List
     * @param  bool  $chack_value   //Check Value Flag
     *
     * @return bool   $result                    //Result
     */
    public function setItemData(& $item, & $property_list, $check_value = true)
    {
        $parsed_input_data = @ $item['number'];

        //Check and Set Item Data
        if ($check_value) {
            $this->checkItemData($parsed_input_data, $item);
        }
        $property_list[GRN_REPORT_COLUMN_NUMBER] = $parsed_input_data;
        $property_list[GRN_REPORT_COLUMN_TEXT] = null;

        return true;
    }

    /**
     * Perse Item Data
     *
     * @param  mixed  $input_data        //Input Data
     * @param  string $input_data_prefix //Input Data Prefix
     * @param  array  $item              //Item Information Array
     *
     * @return mixed  $parsed_input_data         //Parsed Input Data
     */
    public function parseItemData(& $input_data, $input_data_prefix, & $item)
    {
        $parsed_input_data = null;

        //Parse Input Data
        $key_hour = sprintf('%s_%s_hour', $input_data_prefix,
            $item['iid']);
        $key_minute = sprintf('%s_%s_minute',
            $input_data_prefix, $item['iid']);
        $parsed_input_data['hour'] = $input_data[$key_hour];
        $parsed_input_data['minute'] = $input_data[$key_minute];

        //Set Parsed Input Data to Item
        $hour = $parsed_input_data['hour'];
        $minute = $parsed_input_data['minute'];
        $timestamp = 0;
        if (strlen($hour . $minute) == 0) {
            $timestamp = null;
        } else {
            if (strlen($hour) == 0) {
                $hour = 0;
            }
            if (strlen($minute) == 0) {
                $minute = 0;
            }

            $datetime = new CB_DateTime();
            $datetime->year = self::DUMMY_YEAR;
            $datetime->month = self::DUMMY_MONTH;
            $datetime->day = self::DUMMY_DAY;
            $datetime->hour = $hour;
            $datetime->minute = $minute;
            $datetime->second = self::DUMMY_SECOND;
            $timestamp = cb_datetime_to_timestamp($datetime,
                self::DEFAULT_TIMEZONE);
        }
        $item['number'] = $timestamp;

        //Set Parsed Input Data
        $item_key = sprintf('%s_%s', $input_data_prefix,
            $item['iid']);
        $input_data[$item_key] = $timestamp;

        //Return Parsed Input Data
        return $parsed_input_data;
    }

    /**
     * Check Item Data
     *
     * @param  mixed $parsed_input_data //Parsed Input Data
     * @param  array $item              //Item Information Array
     *
     * @return bool   $result                    //Result
     */
    public function checkItemData(& $parsed_input_data, & $item)
    {
        require_once('report/error_code.csp');

        //Check Required
        if ($item['required'] == 1) {
            if (strlen($parsed_input_data) == 0) {
                cb_throw_error(E_GRN_RPRT_ITEMDATA_NOT_INPUT_NECESSARY);
            }
        }
    }

    /**
     * Get Item data
     *
     * @param  array $item //Item Information
     *
     * @return CB_Time $time           //CB_Time object
     */
    public function getItemData(& $item)
    {
        $datetime = cb_timestamp_to_datetime($item[GRN_REPORT_COLUMN_NUMBER],
            self::DEFAULT_TIMEZONE);
        $time = new CB_Time();
        if (empty($item[GRN_REPORT_COLUMN_NUMBER])) {
            $time->hour = null;
            $time->minute = null;
        } else {
            $time->hour = $datetime->hour;
            $time->minute = $datetime->minute;
        }

        return $time;
    }
}

/**
 * File Item Class
 *
 * @package grn.report
 */
class GRN_Report_Item_Util_File extends GRN_Report_Item_Util_Base
{
    /**
     * Constructor
     */
    function __construct()
    {
        //Initialize Foreign_key
        $this->_foreign_key = 'grn.report.file';

        //Initialize Template Names
        $this->_set_template = 'report/item/set_file.csp';
        $this->_detail_template = 'report/item/detail_file.csp';
        $this->_view_template = 'report/item/view_file.csp';
    }

    /**
     * Set Item data File
     *
     * @param  int   $report_id     //Report ID
     * @param  int   $item_data_id  //Item Data ID
     * @param  array $item          //Item Information
     * @param  array $property_list //Property List
     * @param  bool  $chack_value   //Check Value Flag
     *
     * @return bool   $result                    //Result
     */
    function setItemDataFile(
        $report_id,
        $item_data_id,
        & $item,
        & $property_list,
        $check_value = true
    ) {
        $parsed_input_data = @ $item['files'];

        //Check Parsed Input Value
        if ($check_value) {
            $this->checkItemData($parsed_input_data, $item);
        }

        //Get Session Key
        require_once('grn/controller.csp');
        $tmp_key = grn_get_temporary_key();
        require_once('fw/session_manager.csp');
        require_once('grn/controller.csp');
        $session_manager = CB_SessionManager::getInstance();
        $session =& $session_manager->getSession($item['page_name']
                                                 . $tmp_key);
        $use_original_files = $session->get('use_original_files');

        //Check Item Data
        if ( ! $use_original_files && array_key_exists('item_data', $item)) {
            //Get Item Data File Logic
            require_once('report/filerelation_logic.csp');
            $file_relation_logic = GRN_Report_FileRelation_Logic::getInstance();

            //Delete All Item Data File
            $file_relation_logic->deleteAllItemDataFiles($item['item_data']);
        }

        //Get Attached Session File Item List
        $file_id_list = $use_original_files ? $session->get('original_file_ids')
            : [];
        $file_id_list = cb_at($file_id_list, $item_data_id, []);

        //Check Input data
        if (is_array($parsed_input_data)) {
            $attached_file_item_list
                = $session->getFiles('attached_session_file_item');
            //Get Item Data File Logic
            require_once('report/filerelation_logic.csp');
            $file_relation_logic = GRN_Report_FileRelation_Logic::getInstance();

            require_once('grn/upload.csp');
            $uploaded_files
                = GRN_UploadFile::getUploadedFiles(@$item['upload_ticket'],
                array_keys($parsed_input_data), false);

            //Add Item Data File
            foreach (array_keys($parsed_input_data) as $file_id) {
                if ($use_original_files && isset($file_id_list[$file_id])) {
                    unset($file_id_list[$file_id]);
                    continue;
                }
                $file = @$attached_file_item_list[$file_id];
                if (is_null($file)) {
                    $file = @$uploaded_files[$file_id];
                }

                if ( ! is_null($file)) {
                    $file_relation_logic->addItemDataFile($report_id,
                        $item_data_id, $file);
                }
            }
        }

        if ($use_original_files && is_array($file_id_list)
            && count($file_id_list)
        ) {
            require_once('report/file.csp');
            $file_manager = GRN_Report_FileManager::getInstance();
            foreach ($file_id_list as $file_id) {
                $file_manager->deleteFile($file_id);
            }
        }

        return true;
    }

    /**
     * Perse Item Data
     *
     * @param  mixed  $input_data        //Input Data
     * @param  string $input_data_prefix //Input Data Prefix
     * @param  array  $item              //Item Information Array
     *
     * @return mixed  $parsed_input_data         //Parsed Input Data
     */
    function parseItemData(& $input_data, $input_data_prefix, & $item)
    {
        $parsed_input_data = null;

        //Get All Attached File List
        static $all_attached_file_list = null;
        require_once('report/controller_util.csp');

        if (is_null($all_attached_file_list)) {
            $all_attached_file_list
                = grn_report_get_attached_file_info(cb_get_pagename());
        }

        //Get Attached Files Information
        $key = sprintf('%s_%s', $input_data_prefix, $item['iid']);
        if (array_key_exists($key, $all_attached_file_list)) {
            $parsed_input_data = $all_attached_file_list[$key];
        }

        //input_nameはreport/item/view_file.tplの7行目と同じ形式にする
        $input_name = 'item_' . $item['iid'] . '_file';

        $tmpfileIds = [];
        if (is_array(@$input_data['upload_fileids'])) {
            foreach ($input_data['upload_fileids'] as $fileid) {
                $tmpfileIds[$fileid] = 1;
            }
        }

        if (is_array(@$input_data['fids'])) {
            foreach ($input_data['fids'] as $fileid) {
                $tmpfileIds[$fileid] = 1;
            }
        }

        $fileIds = [];
        foreach ($tmpfileIds as $k => $v) {
            $fileIds[] = $k;
        }

        require_once('grn/upload.csp');
        $files = GRN_UploadFile::getUploadedFiles(@$input_data['upload_ticket'],
            $fileIds, false);

        foreach ($files as $key => $file) {
            if (strpos($key, $input_name) === 0) {
                if ( ! is_a($file, 'CB_ServerFile')) {
                    continue;
                }

                $info = [];
                $info['name'] = $file->get('name');
                $info['size'] = $file->get('size');
                $info['type'] = strtolower(get_class($file));
                $parsed_input_data[$key] = $info;
            }
        }

        $validation_data = count($parsed_input_data);
        //Set Parsed Input Data to Item
        $item['files'] = $parsed_input_data;
        $item['page_name'] = cb_get_pagename();
        $item['upload_ticket'] = @$input_data['upload_ticket'];

        //Set Parsed Input Data
        $item_key = sprintf('%s_%s', $input_data_prefix,
            $item['iid']);
        $input_data[$item_key] = $parsed_input_data;

        //Set Validation Data
        $item_key = sprintf('%s_%s_file', $input_data_prefix,
            $item['iid']);
        $input_data[$item_key] = $validation_data;

        //Return Parsed Input Data 
        return $parsed_input_data;
    }

    /**
     * Check Item Data
     *
     * @param  mixed $parsed_input_data //Parsed Input Data
     * @param  array $item              //Item Information Array
     *
     * @return bool   $result                    //Result
     */
    function checkItemData(& $parsed_input_data, & $item)
    {
        require_once('report/error_code.csp');

        //Get Attached File Count
        if ( ! array_key_exists('idid', $item)) {
            $file_count = count($parsed_input_data);
        } else {
            require_once('report/filerelation_logic_base.csp');
            $file_relation_logic_base
                = GRN_Report_FileRelation_Logic_Base::getInstance();
            $file_count
                = $file_relation_logic_base->getCount(GRN_REPORT_ITEM_DATA_FILE,
                $item['idid']);
            $file_count = $file_count + count($parsed_input_data);
        }

        //Check Required
        $check_required = true;

        //Check Required
        if ($item['required'] == 1 && $check_required) {
            if ($file_count === 0) {
                require_once('report/error_code.csp');
                cb_throw_error(E_GRN_RPRT_ITEMDATA_NOT_INPUT_NECESSARY);
            }
        }

        //Check File Count
        if (is_numeric($item['settings']['max_files'])) {
            if ($file_count > $item['settings']['max_files']) {
                //Invalid Item Data
                require_once('report/error_code.csp');
                cb_throw_error(E_GRN_RPRT_ITEM_INVALID_INPUT_DATA);
            }
        }
    }

    /**
     * Get Item data
     *
     * @param  array $item //Item Information =>array('_id'=>'', 'item_data_file_id'=>'')
     *
     * @return array  $item_data_value           //Item Data Value =>array('_id'=>'', 'file_info'=>array('name'=>'','size'=>'','mime'=>''))
     */
    function &getItemData(& $item)
    {
        if (array_key_exists('_id', $item)) {
            $item_data_id = $item['_id'];
            $item_data_value = $this->getItemDataFile($item_data_id, $item);
        } else {
            $ret = false;

            return $ret;
        }

        return $item_data_value;
    }

    /**
     * Get Item data File
     *
     * @param  int   $item_data_id //Item Data ID
     * @param  array $item         //Item Information =>array('item_data_file_id'=>'')
     *
     * @return array  $file_info                 //file_info =>array('_id'=>'', 'file_info'=>array('name'=>'','size'=>'','mime'=>''))
     */
    function &getItemDataFile($item_data_id, & $item)
    {
        $file_info = null;

        $item_data_file_id = $item['file_id'];
        if ($item_data_file_id) {
            $translation_map = [
                '_id'       => '_id',
                'file'      => 'file',
                'file_info' => 'file_info'    // name, size, mime
            ];

            require_once('report/controller_util.csp');
            $itemdatafile_controller_utility
                = new GRN_Report_ItemDataFile_Controller_Utility();
            $file_info
                = $itemdatafile_controller_utility->getView($item_data_file_id,
                $translation_map, $item_data_id);
        }

        return $file_info;
    }
}

/**
 * Get Item Object Utility
 *
 * @param  string $foreign_key //Foreign Key
 *
 * @return mixed  $result                    //Item Object
 */
function grn_report_get_item_util($foreign_key)
{
    //Item Utility List
    static $item_util_list = [];

    //Check Item Utility List
    if ( ! array_key_exists($foreign_key, $item_util_list)) {
        switch ($foreign_key) {
            case 'grn.report.string_single':
                $item_util_list[$foreign_key]
                    = new GRN_Report_Item_Util_String_Single;
                break;
            case 'grn.report.string_multiple':
                $item_util_list[$foreign_key]
                    = new GRN_Report_Item_Util_String_Multiple;
                break;
            case 'grn.report.menu_string':
                $item_util_list[$foreign_key]
                    = new GRN_Report_Item_Util_Menu_String;
                break;
            case 'grn.report.radio':
                $item_util_list[$foreign_key] = new GRN_Report_Item_Util_Radio;
                break;
            case 'grn.report.checkbox':
                $item_util_list[$foreign_key]
                    = new GRN_Report_Item_Util_Checkbox;
                break;
            case 'grn.report.numeric':
                $item_util_list[$foreign_key]
                    = new GRN_Report_Item_Util_Numeric;
                break;
            case 'grn.report.date':
                $item_util_list[$foreign_key] = new GRN_Report_Item_Util_Date;
                break;
            case 'grn.report.time':
                $item_util_list[$foreign_key] = new GRN_Report_Item_Util_Time();
                break;
            case 'grn.report.file':
                $item_util_list[$foreign_key] = new GRN_Report_Item_Util_File;
                break;
            default:
                $item_util_list[$foreign_key] = false;
                break;
        }
    }

    //Return Item Object
    return $item_util_list[$foreign_key];
}

/**
 * Get Item Object List Utility
 *
 * @return array  $result                    //Item Object List
 */
function &grn_report_get_item_util_list()
{
    //Item Utility List
    static $item_util_list = [];

    //Check Item List
    if (count($item_util_list) === 0) {
        $item_util_list['grn.report.string_single']
            = new GRN_Report_Item_Util_String_Single;
        $item_util_list['grn.report.string_multiple']
            = new GRN_Report_Item_Util_String_Multiple;
        $item_util_list['grn.report.menu_string']
            = new GRN_Report_Item_Util_Menu_String;
        $item_util_list['grn.report.radio']
            = new GRN_Report_Item_Util_Radio;
        $item_util_list['grn.report.checkbox']
            = new GRN_Report_Item_Util_Checkbox;
        $item_util_list['grn.report.numeric']
            = new GRN_Report_Item_Util_Numeric;
        $item_util_list['grn.report.date']
            = new GRN_Report_Item_Util_Date;
        $item_util_list['grn.report.time']
            = new GRN_Report_Item_Util_Time();
        $item_util_list['grn.report.file']
            = new GRN_Report_Item_Util_File;
    }

    //Return Item Object List
    return $item_util_list;
}


