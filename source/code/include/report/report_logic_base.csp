<?php
/**
 * Report Application Report Base Class
 *
 * @author  Shou Aoki 2009/09
 * @version 1.0
 * @package grn.report
 */

/** Report Application **/
require_once('report/resources.csp');

/**
 * Report Logic Base Class
 *
 * @package grn.report
 */
class GRN_Report_Report_Logic_Base
{
    //Report Manager Base Instance
    var $_report_manager_base = null;

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {

    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Report_Report_Logic_Base
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Report Manager Base
     *
     * @return GRN_Report_Report_Manager_Base //Report Manager Base
     */
    function _getReportManagerBase()
    {
        if (is_null($this->_report_manager_base)) {
            require_once('report/report_manager_base.csp');
            $this->_report_manager_base
                = GRN_Report_Report_Manager_Base::getInstance();
        }

        return $this->_report_manager_base;
    }

    /**
     * Get Column List
     *
     * @param  string $class_name //Class Name
     *
     * @return array  $column_name_list          //Column Name List
     */
    function getColumnList($class_name = null)
    {
        //Get Column List
        $report_manager_base = $this->_getReportManagerBase();
        $column_name_list
            =& $report_manager_base->_getColumnlist($class_name);

        //Return Column Name List
        return $column_name_list;
    }

    /**
     * Get Report
     *
     * @param  int   $report_id   //Report ID
     * @param  int   $form_id     //Form ID
     * @param  array $column_list //Column List
     * @param  mixed $option      //Option (array('list'=>array('offset'=>'', 'limit'=>''), 'sort'=>array('column'=>'', 'order'=>''), 'condition'=>array('column'=>'', 'value'=>'', 'operator'=>''))
     * @param  bool  $refresh     //Refresh Cache
     * @param  int   $lock_mode   //Lock Mode
     *
     * @return array  $report                  //Report Information Array
     */
    function &get(
        $report_id,
        $form_id = null,
        $column_list = [],
        $option = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        cb_trim_check($report_id, E_GRN_RPRT_REPORT_INVALID_ID);    //Report ID
        if ( ! is_numeric($report_id)) {
            cb_throw_error(E_GRN_RPRT_REPORT_INVALID_ID);
        }

        //Get Report 
        $report_manager_base = $this->_getReportManagerBase();
        $report =& $report_manager_base->get($report_id, $form_id,
            $column_list, $option, $refresh, $lock_mode);
        if ( ! $report) {
            //Report Not Found
            require_once('report/error_code.csp');
            cb_throw_error(E_GRN_RPRT_REPORT_NOT_FOUND);
        }

        //Return Report
        return $report;
    }

    /**
     * Get Report(with Extra Inreportation)
     *
     * @param  int   $report_id   //Report ID
     * @param  int   $form_id     //Form ID
     * @param  array $column_list //Column List
     * @param  mixed $option      //Option (array('list'=>array('offset'=>'', 'limit'=>''), 'sort'=>array('column'=>'', 'order'=>''), 'condition'=>array('column'=>'', 'value'=>'', 'operator'=>''))
     * @param  bool  $refresh     //Refresh Cache
     * @param  int   $lock_mode   //Lock Mode
     *
     * @return array  $report                  //Report Inreportation Array
     */
    function &getEx(
        $report_id,
        $form_id = null,
        $column_list = [],
        $option = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        cb_trim_check($report_id, E_GRN_RPRT_REPORT_INVALID_ID);    //Report ID
        if ( ! is_numeric($report_id)) {
            cb_throw_error(E_GRN_RPRT_REPORT_INVALID_ID);
        }

        //Get Report 
        $report_manager_base = $this->_getReportManagerBase();
        $report =& $report_manager_base->getEx($report_id,
            $form_id, $column_list, $option, $refresh, $lock_mode);
        if ( ! $report) {
            //Report Not Found
            require_once('report/error_code.csp');
            cb_throw_error(E_GRN_RPRT_REPORT_NOT_FOUND);
        }

        //Return Report
        return $report;
    }

    /**
     * Get Report Direct
     *
     * @param  int   $report_id   //Report ID
     * @param  array $column_list //Column List
     * @param  mixed $option      //Option (array('condition'=>array('column'=>'', 'value'=>'', 'operator'=>''))
     * @param  int   $lock_mode   //Lock Mode
     *
     * @return array  $report                  //Report Information Array
     */
    function getDirect(
        $report_id,
        $column_list = [],
        $option = [],
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        cb_trim_check($report_id, E_GRN_RPRT_REPORT_INVALID_ID);    //Report ID
        if ( ! is_numeric($report_id)) {
            cb_throw_error(E_GRN_RPRT_REPORT_INVALID_ID);
        }

        //Get Report 
        $report_manager_base = $this->_getReportManagerBase();
        $report = $report_manager_base->getDirect($report_id,
            $column_list, $option, $lock_mode);
        if ( ! $report) {
            //Report Not Found
            require_once('report/error_code.csp');
            cb_throw_error(E_GRN_RPRT_REPORT_NOT_FOUND);
        }

        //Return Report
        return $report;
    }

    /**
     * Get Report List
     *
     * @param  int   $form_id     //Form ID
     * @param  array $column_list //Column List
     * @param  mixed $option      //Option (array('list'=>array('offset'=>'', 'limit'=>''), 'sort'=>array('column'=>'', 'order'=>''), 'condition'=>array('column'=>'', 'value'=>'', 'operator'=>''))
     * @param  bool  $refresh     //Refresh Cache
     * @param  int   $lock_mode   //Lock Mode
     *
     * @return array  $report_list             //Report Information List
     */
    function &getList(
        $form_id = null,
        $column_list = [],
        $option = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Report List
        $report_manager_base = $this->_getReportManagerBase();
        $report_list =& $report_manager_base->getList($form_id,
            $column_list, $option, $refresh, $lock_mode);

        //Return Report List
        return $report_list;
    }

    /**
     * Get Report List(with Extra Information)
     *
     * @param  int   $form_id     //Form ID
     * @param  array $column_list //Column List
     * @param  mixed $option      //Option (array('list'=>array('offset'=>'', 'limit'=>''), 'sort'=>array('column'=>'', 'order'=>''), 'condition'=>array('column'=>'', 'value'=>'', 'operator'=>''))
     * @param  bool  $refresh     //Refresh Cache
     * @param  int   $lock_mode   //Lock Mode
     *
     * @return array  $report_list             //Report Information List
     */
    function &getListEx(
        $form_id = null,
        $column_list = [],
        $option = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Report List
        $report_manager_base = $this->_getReportManagerBase();
        $report_list =& $report_manager_base->getListEx($form_id,
            $column_list, $option, $refresh, $lock_mode);

        //Return Report List
        return $report_list;
    }

    /**
     * Get Report Count
     *
     * @param  int   $form_id   //Form ID
     * @param  mixed $option    //Option (array('list'=>array('offset'=>'', 'limit'=>''), 'sort'=>array('column'=>'', 'order'=>''), 'condition'=>array('column'=>'', 'value'=>'', 'operator'=>''))
     * @param  bool  $refresh   //Refresh Cache
     * @param  int   $lock_mode //Lock Mode
     *
     * @return int    $report_count            //Report Count
     */
    function getCount(
        $form_id = null,
        $option = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Report List
        $report_manager_base = $this->_getReportManagerBase();
        $report_count = $report_manager_base->getCount($form_id, $option,
            $refresh, $lock_mode);

        //Return Report Count
        return $report_count;
    }

    /**
     * Get Report Count(with Extra Information)
     *
     * @param  int   $form_id   //Form ID
     * @param  mixed $option    //Option (array('list'=>array('offset'=>'', 'limit'=>''), 'sort'=>array('column'=>'', 'order'=>''), 'condition'=>array('column'=>'', 'value'=>'', 'operator'=>''))
     * @param  bool  $refresh   //Refresh Cache
     * @param  int   $lock_mode //Lock Mode
     *
     * @return int    $report_count            //Report Count
     */
    function getCountEx(
        $form_id = null,
        $option = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Report List
        $report_manager_base = $this->_getReportManagerBase();
        $report_count = $report_manager_base->getCountEx($form_id,
            $option, $refresh, $lock_mode);

        //Return Report Count
        return $report_count;
    }

    function getLastOperatedTimeList($report_id_list)
    {
        //Get Report List
        $report_manager_base = $this->_getReportManagerBase();
        $lastOperatedTimeList
            = $report_manager_base->getLastOperatedTimeList($report_id_list);

        return $lastOperatedTimeList;
    }
}


