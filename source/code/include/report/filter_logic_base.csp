<?php
/**
 * Report Application Filter Logic Base Class
 *
 * @author  Shou Aoki 2009/09
 * @version 1.0
 * @package grn.report
 */

/** Report Application **/
require_once('report/resources.csp');
require_once('report/filter_manager_base.csp');
require_once('grn/numeric_util.csp');
require_once('report/error_code.csp');

/**
 * Filter Manager Class
 *
 * @package grn.report
 */
class GRN_Report_Filter_Logic_Base
{
    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {

    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Report_Filter_Logic_Base
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    function &get($filter_id, $lock_mode = CB_DATABASE_DEFAULT_LOCK)
    {
        //Check Argument
        cb_numeric_check($filter_id, E_GRN_RPRT_FILTER_INVALID_ID);

        $fmb = GRN_Report_Filter_Manager_Base::getInstance();
        $filter = $fmb->get($filter_id, $lock_mode);

        if ( ! $filter) {
            return $filter;
        }

        //Create Timestamp Object
        $ctime = $filter['col_ctime'];
        $filter['ctime'] = new CB_TimeStamp();
        $filter['ctime']->unix_ts = $ctime;

        $mtime = $filter['col_mtime'];
        $filter['mtime'] = new CB_TimeStamp();
        $filter['mtime']->unix_ts = $mtime;

        $form_relation = $fmb->getFilterFormRelation($filter_id);
        $filter['form_relation'] = $form_relation;

        $form_condition = $fmb->getFilterFormCondition($filter_id);
        $filter['form_condition'] = $form_condition;

        return $filter;
    }

    function &getDirect($filter_id, $lock_mode = CB_DATABASE_DEFAULT_LOCK)
    {
        //Check Argument
        cb_numeric_check($filter_id, E_GRN_RPRT_FILTER_INVALID_ID);

        $fmb = GRN_Report_Filter_Manager_Base::getInstance();
        $filter = $fmb->getDirect($filter_id, $lock_mode);

        if (is_null($filter)) {
            cb_throw_error(E_GRN_RPRT_FILTER_NOT_FOUND);
        } else {
            return $filter;
        }
    }

    function &getSystemList(
        $category_id = null,
        $option = [],
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        cb_numeric_check($category_id, E_GRN_RPRT_CATEGORY_INVALID_ID);

        $fmb = GRN_Report_Filter_Manager_Base::getInstance();
        $filter_list = $fmb->getSystemList($category_id, $option, $lock_mode);

        return $filter_list;
    }

    function getSystemFilterCount(
        $category_id = null,
        $option = [],
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        if ($category_id == GRN_REPORT_CATEGORY_NONPARTY_ID) {
            $category_id = null;
        }
        $fmb = GRN_Report_Filter_Manager_Base::getInstance();

        return $fmb->getSystemFilterCount($category_id, $option, $lock_mode);
    }

    function getDisplayUsers($filter_id, $lock_mode = CB_DATABASE_DEFAULT_LOCK)
    {
        //Check Argument
        cb_numeric_check($filter_id, E_GRN_RPRT_FILTER_INVALID_ID);

        $fmb = GRN_Report_Filter_Manager_Base::getInstance();
        $user_list = $fmb->getDisplayUsers($filter_id, $lock_mode);

        foreach ($user_list as $key => $user) {
            if ( ! $user || ! is_a($user, 'CB_User')) {
                unset($user_list[$key]);
            }
        }

        return $user_list;
    }

    function getDisplayUserIds(
        $filter_id,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Check Argument
        cb_numeric_check($filter_id, E_GRN_RPRT_FILTER_INVALID_ID);

        $fmb = GRN_Report_Filter_Manager_Base::getInstance();
        $user_ids = $fmb->getDisplayUserIds($filter_id, $lock_mode);

        return $user_ids;
    }

    function getFilterFormRelation($filter_id)
    {
        //Check Argument
        cb_numeric_check($filter_id, E_GRN_RPRT_FILTER_INVALID_ID);
        $fmb = GRN_Report_Filter_Manager_Base::getInstance();
        $ret = $fmb->getFilterFormRelation($filter_id);

        return $ret;
    }

    function getFilterFormCondition($filter_id)
    {
        //Check Argument
        cb_numeric_check($filter_id, E_GRN_RPRT_FILTER_INVALID_ID);

        $fmb = GRN_Report_Filter_Manager_Base::getInstance();
        $ret = $fmb->getFilterFormCondition($filter_id);

        return $ret;
    }

    function &getPersonalFilterListByUserId(
        $user_id,
        $option = [],
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        cb_numeric_check($user_id, E_GRN_RPRT_INVALID_USER_ID);

        $fmb = GRN_Report_Filter_Manager_Base::getInstance();
        $filter_list = $fmb->getPersonalFilterListByUserId($user_id, $option,
            $lock_mode);

        return $filter_list;
    }

    function getPersonalFilterCountByUserId(
        $user_id,
        $option = [],
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        cb_numeric_check($user_id, E_GRN_RPRT_INVALID_USER_ID);

        $fmb = GRN_Report_Filter_Manager_Base::getInstance();
        $filter_count = $fmb->getPersonalFilterCountByUserId($user_id, $option,
            $lock_mode);

        return $filter_count;
    }
}

