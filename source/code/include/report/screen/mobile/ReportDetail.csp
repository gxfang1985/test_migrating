<?php

namespace grn\report\screen\mobile;

use grn\grn\Validate;

require_once('report/error_code.csp');
require_once('report/resources.csp');

class ReportDetail extends MobileReportScreenBase
{
    public function __construct($input)
    {
        parent::__construct($input);

        $report = $this->getReportForView();
        if ($report['enable_follow']) {
            $this->setMobileFooterBar(['comment' => []]);
        } else {
            $this->setMobileFooterBar();
        }
    }

    public function fetch()
    {
        $report = $this->getReportForView();
        require_once('grn/smarty.csp');
        $t = new \GRN_Smarty();
        $t->assign('report', $report);

        $report_id = $this->getReportId();
        $t->assign('report_id', $report_id);

        $t->assign('report_title', $this->getReportTitle());

        $form = $this->getFormById($report['form']);
        $category_id = $this->getCategoryId($report, $form);

        $login = $this->getLoginUser();

        //Get Report Members
        $members = $this->getReportMembers($report_id);
        $attendee_name_for_view = null;
        $attendee_num = $this->getOneUserNameForView($members,
            $attendee_name_for_view, $login);
        $t->assign('attendee_name', $attendee_name_for_view);
        $t->assign('attendee_num', $attendee_num);

        //Get Report Notification
        $notification_users = $this->getReportNotification($report_id);
        $notification_user_name_for_view = null;
        $notification_user_num
            = $this->getOneUserNameForView($notification_users,
            $notification_user_name_for_view, $login);
        $t->assign('notification_user_name_for_view',
            $notification_user_name_for_view);
        $t->assign('notification_user_num', $notification_user_num);

        //View Access Right
        $this->checkViewAccessRight($category_id, $report, $members,
            $notification_users);

        //Set star info
        require_once('star/logic.csp');
        $star_logic = \GRN_Star_StarLogic::getInstance();
        $use_star = $star_logic->isActive();
        $t->assign('use_star', $use_star);
        $t->assign('star_infos',
            $star_logic->getStatusByIDs($login, GRN_REPORT_MODULE_ID,
                [$report_id]));

        //Get Report Partners
        $partners = $this->getReportPartners($report_id);
        $partners_num = count($partners);
        if ($partners_num > 0) {
            $t->assign('partner', $partners[0]);
            $t->assign('partners_num', $partners_num);
        }

        //Get item data
        $item_data_util
            = \GRN_Report_ItemData_Controller_Utility::getInstance();
        $item_data_list = $item_data_util->getSimpleListView($report_id);
        $t->assign('item_data_list', $item_data_list);

        //Get Follow List
        $users_info = [];
        $follow_list = $this->getFollowsDisplayInfo($login, $users_info,
            $category_id);
        $t->assign('follow_list', $follow_list);
        $t->assign('users_info', $users_info);
        $t->assign('offset', $this->getNewOffset());
        $t->assign('more_view_args', [self::ARG_REPORT_ID => $report_id]);

        //Get Read Status View
        $readstatus = $this->getReportReadStatus($report_id);
        $t->assign('readstatus', $readstatus);

        //Confirm Notification, Update Read Status
        $this->confirmNotification($report_id, $readstatus);

        //Inspection
        $this->recordInspection('report_browse',
            ['rid' => $report_id, 'uid' => $login->getOID()], 'info');

        //Set the current page's navigation title
        $this->assignBreadcrumbCurrentPage($t,
            cb_msg('grn.mobile', 'detail_title'));

        $input = $this->getInput();
        if (array_key_exists('nid', $input)
            || array_key_exists('nhid', $input)
        ) {
            $this->assignBreadcrumbUpperPage($t, '', '', [], true);
        }

        //generate upload ticket
        include('grn/_upload_prepend.csp');

        return $t->fetch('report/mobile/view.tpl');
    }

    public function fetchCommentForAjax()
    {
        $report = $this->getReportForView();
        $report_id = $this->getReportId();

        $form = $this->getFormById($report['form']);
        $category_id = $this->getCategoryId($report, $form);
        $members = $this->getReportMembers($report_id);
        $notification_users = $this->getReportNotification($report_id);
        $this->checkViewAccessRight($category_id, $report, $members,
            $notification_users);

        $login = $this->getLoginUser();
        $users_info = [];
        $follow_list = $this->getFollowsDisplayInfo($login, $users_info,
            $category_id);

        require_once('grn/smarty.csp');
        $t = new \GRN_Smarty();
        $t->assign('report_id', $report_id);

        //Get Read Status View
        $readstatus = $this->getReportReadStatus($report_id);
        $t->assign('readstatus', $readstatus);

        //Confirm Notification, Update Read Status
        $this->confirmNotification($report_id, $readstatus);

        $t->assign('follow_list', $follow_list);
        $t->assign('users_info', $users_info);

        return $t->fetch('report/mobile/comment_list.tpl');
    }

    private function getOneUserNameForView(
        $users,
        & $user_name_for_view,
        $login
    ) {
        $user_ids = [];
        foreach ($users as $user) {
            if ( ! is_string($user) || strlen($user) === 0) {
                continue;
            }
            $user_ids[] = $user;
        }
        $user_num = count($user_ids);

        if ($user_num > 0) {
            require_once('grn/controller.csp');
            $user_for_view_id = $user_ids[0];
            $user_for_view
                = \GRN_ControllerUtil::getUserInfoToShowUserName([$user_for_view_id],
                $login);
            $user_for_view = $user_for_view[$user_for_view_id];
            if (is_array($user_for_view)) {
                // Use NickName if possible
                $user_name_for_view
                    = \GRN_ControllerUtil::getUserNameText($login->getOID(),
                    $user_for_view_id, [$user_for_view_id => $user_for_view]);
            } else {
                $user_name_for_view
                    = \GRN_ControllerUtil::getDeletedUserNameText(null);
            }
        }

        return $user_num;
    }

    /**
     * Get report follows display information.
     *
     * @param     object $login \CB_User
     * @param     array  & $users_info
     * @param     int    $category_id
     *
     * @return    array         $follow_list                report follows display information.
     */
    private function getFollowsDisplayInfo($login, & $users_info, $category_id)
    {
        $input = $this->getInput();
        $report = $this->getReportForView();

        $offset = $this->getArrayValue(self::ARG_NAVI_TAG, $input);
        if ( ! Validate::isNumber($offset)) {
            $offset = 0;
        }

        require_once('report/controller_util.csp');
        //Get Follow List for View
        $follow_util = \GRN_Report_Follow_Controller_Utility::getInstance();
        $follow_list = $follow_util->getFollowListView($report['rid'],
            $category_id, 0, $offset + self::MORE_VIEW_COUNT);
        $users_id = [];
        foreach ($follow_list as $follow_id => $follow_info) {
            $users_id[] = cb_at($follow_info, 'creator');
        }
        $users_id[] = cb_at($report, 'creator');
        $users_id[] = cb_at($report, 'modifier');

        require_once('grn/controller.csp');
        $users_info = \GRN_ControllerUtil::getUserInfoToShowUserName($users_id,
            $login);
        $users_info = $this->getUsersInfoType($users_info);
        foreach ($follow_list as $follow_id => $follow_info) {
            $user_id = cb_at($follow_info, 'creator');
            $user_info = cb_at($users_info, $user_id);

            if (is_null($user_info)) {
                $follow_list[$follow_id]['creator_type'] = null;
            } else {
                $follow_list[$follow_id]['creator_type'] = $user_info['valid'];
            }
            if ($login->getOID() == $user_id) {
                $follow_list[$follow_id]['deletable'] = true;
            } else {
                $follow_list[$follow_id]['deletable'] = false;
            }
        }
        $this->setNewOffset($offset, self::MORE_VIEW_COUNT,
            $follow_util->getCount($report['rid']));

        return $follow_list;
    }

    public function getTitle()
    {
        return $this->getReportTitle();
    }
}
