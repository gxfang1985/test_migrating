<?php

namespace grn\report\screen\mobile;

use grn\grn\GrnGenericScreenBase;
use grn\grn\Validate;
use grn\grn\mobile\MobileDisplayUserList;

require_once('report/error_code.csp');
require_once('report/resources.csp');

class MobileReportScreenBase extends GrnGenericScreenBase
{
    const ARG_REPORT_ID = 'rid';
    const ARG_FOLLOW_ID = 'follow_id';
    const ARG_NAVI_TAG = 'sp';

    const USER_ID = 'id';
    const DISPLAY_NAME = 'displayName';
    const PRIMARY_GROUP_NAME = 'primaryGroupName';
    const IMAGE = 'image';
    const FOREST_USER_URL = 'forest_user_url';
    const DELETED = 'deleted';

    const URL_REPORT_DETAIL = "report/mobile/view";

    private $_report_id;
    private $_follow_id;
    private $_category_id;
    private $_report_view;
    private $_form_view;
    private $_follow = [];

    public function __construct($input)
    {
        parent::__construct($input);

        $this->initMobileView();
        $this->setMobileApplicationId(GRN_REPORT_APPLICATION_ID);

    }

    protected function setReportId($value)
    {
        $this->_report_id = $value;
    }

    public function getReportId()
    {
        return $this->_report_id;
    }

    protected function setFollowId($value)
    {
        $this->_follow_id = $value;
    }

    public function getFollowId()
    {
        return $this->_follow_id;
    }

    protected function setReportView($value)
    {
        $this->_report_view = $value;
    }

    public function getReportView()
    {
        return $this->_report_view;
    }

    protected function setFormView($value)
    {
        $this->_form_view = $value;
    }

    public function getFormView()
    {
        return $this->_form_view;
    }

    protected function getUsersInfoType($users_info)
    {
        foreach ($users_info as $user_id => $user) {
            if (is_array($user) && Validate::isNotNull($user['col_valid'])) {
                $users_info[$user_id]['valid'] = 'invalid_user';
            } elseif (is_array($user)
                      && array_key_exists('col_using_app', $user)
                      && Validate::isNull($user['col_using_app'])
            ) {
                $users_info[$user_id]['valid'] = 'invalidApp_user';
            } elseif ($user_id == $this->getLoginUserId()) {
                $users_info[$user_id]['valid'] = 'login_user';
            } else {
                $users_info[$user_id]['valid'] = 'unlogin_user';
            }
        }

        return $users_info;
    }

    protected function getUserDisplayInfo(array $ids)
    {
        $input = $this->getInput();
        $limit = self::MORE_VIEW_COUNT;
        $offset = $this->getArrayValue(self::ARG_NAVI_TAG, $input);
        if ( ! Validate::isNumber($offset)) {
            $offset = 0;
        }

        $loop_times = count($ids) >= ($limit + $offset) ? ($limit + $offset)
            : count($ids);
        $display_ids = array_slice($ids, 0, $loop_times);
        $this->setNewOffset($offset, $limit, count($ids));
        $display_info = MobileDisplayUserList::constructUserList($display_ids);

        return $display_info;
    }

    /**
     * Get Report for view
     *
     * @return array $report
     */
    protected function getReportForView()
    {
        $report = $this->getReportView();
        if (Validate::isNotNull($report)) {
            return $report;
        }
        $input = $this->getInput();
        $this->checkArgFromInput([self::ARG_REPORT_ID], $input);
        $report_id = $this->getReportId();
        $report = $this->getReportById($report_id);
        $this->setReportView($report);

        return $report;
    }

    /**
     * Get Report by id
     *
     * @param int $report_id
     *
     * @return array $report or NULL
     * @throws E_GRN_RPRT_REPORT_INVALID_ID
     */
    protected function getReportById($report_id)
    {
        if (Validate::isNumber($report_id)) {
            require_once('report/controller_util.csp');
            $report_util = \GRN_Report_Report_Controller_Utility::getInstance();
            $report = $report_util->getReportView($report_id);

            return $report;
        }
        cb_throw_error(E_GRN_RPRT_REPORT_INVALID_ID);
    }

    protected function getFollowDeleteableInfo($follow, $category_id = null)
    {
        require_once('report/controller_util.csp');
        $category_util = \GRN_Report_Category_Controller_Utility::getInstance();
        $category_manage = $category_util->checkManage($category_id, false,
            CB_DATABASE_NO_LOCK);
        $creator_id = isset($follow['creator']) ? $follow['creator']
            : null;

        if ($category_manage || $creator_id == $this->getLoginUserId()) {
            return true;
        }

        return false;
    }

    /**
     * Get Follow by id
     *
     * @param int $follow_id
     *
     * @return array $follow
     * @throws E_GRN_RPRT_FOLLOW_INVALID_ID
     */
    protected function getFollowById($follow_id)
    {
        if (Validate::isNotNull(cb_at($this->_follow, $follow_id))) {
            return $this->_follow[$follow_id];
        }

        if (Validate::isNumber($follow_id)) {
            $translation_map_follow = [
                'id'                  => '_id',
                'creator'             => 'creator',
                'creator_foreign_key' => 'creator_foreign_key',
                'creator_name'        => 'creator_name',
                'ctime'               => 'ctime',
                'data'                => 'data',
                'follow_id'           => 'follow_id',
                'html'                => 'html',
                'report'              => 'report',
            ];
            require_once('report/controller_util.csp');
            $follow_util = \GRN_Report_Follow_Controller_Utility::getInstance();
            $follow = $follow_util->getView($follow_id,
                $translation_map_follow);

            $follow_file_util
                = \GRN_Report_FollowFile_Controller_Utility::getInstance();
            $translation_map_follow_file = [
                'id'     => '_id',
                'follow' => 'follow',
                'file'   => 'file'
            ];
            $follow['attach_files']
                = $follow_file_util->getListView($translation_map_follow_file,
                $follow['id']);
            $this->_follow[$follow_id] = $follow;

            return $follow;
        }
        cb_throw_error(E_GRN_RPRT_FOLLOW_INVALID_ID);
    }

    /**
     * Get Read Status View
     *
     * @param int $report_id
     *
     * @return array $readstatus or NULL
     */
    protected function getReportReadStatus($report_id)
    {
        if (Validate::isNumber($report_id)) {
            $user_id = $this->getLoginUserId();
            require_once('report/controller_util.csp');
            $readstatus_util
                = \GRN_Report_ReadStatus_Controller_Utility::getInstance();
            $readstatus = $readstatus_util->getView($user_id, $report_id);

            return $readstatus;
        }

        return null;
    }

    /**
     * Confirm Notification, Update Read Status
     *
     * @param int   $report_id
     * @param array $readstatus
     *
     * @return bool
     */
    protected function confirmNotification($report_id, $readstatus = null)
    {
        if (Validate::isNumber($report_id)) {
            $user_id = $this->getLoginUserId();
            require_once('report/report_logic.csp');
            $logic = \GRN_Report_Report_Logic::getInstance();

            return $logic->read($user_id, $report_id, null, $readstatus);
        }

        return false;
    }

    /**
     * Send Notification
     *
     * @param int    $report_id
     * @param string $data
     *
     * @return bool
     */
    protected function sendNotification($report_id, $data)
    {
        if (Validate::isNumber($report_id)) {
            $login = $this->getLoginUser();

            require_once('report/controller_util.csp');
            $report_util = \GRN_Report_Report_Controller_Utility::getInstance();
            $notification_list = $report_util->getNotificationList($report_id);

            require_once('report/notification.csp');
            $notification = \GRN_Report_Notification_Listener::getInstance();
            $timestamp = new \CB_TimeStampEx();

            return $notification->sendList(GRN_REPORT_NOTIFY_FOLLOWENTRY,
                $notification_list, $login, $report_id, $timestamp, $data);
        }

        return false;
    }

    /**
     * Record Inspection
     *
     * @param string $message_type 'report_browse', 'follow_delete', 'follow_add'...
     * @param array  $message_args
     * @param string $threshold
     *
     * @return bool
     */
    protected function recordInspection(
        $message_type,
        $message_args = [],
        $threshold = 'notice'
    ) {
        require_once('report/inspection.csp');
        $inspection = \GRN_Report_Report_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            return $inspection->record($message_type, $message_args,
                $threshold);
        }

        return false;
    }

    /**
     * Get Form by form id
     *
     * @param int $form_id
     *
     * @return array $form or NULL
     */
    protected function getFormById($form_id)
    {
        if (Validate::isNumber($form_id)) {
            require_once('report/controller_util.csp');
            $form_util = \GRN_Report_Form_Controller_Utility::getInstance();
            $form = $form_util->getSimpleView($form_id);

            return $form;
        }

        return null;
    }

    /**
     * Get category id by report id
     *
     * @param array $report_view
     * @param array $form_view
     *
     * @return int $category_id
     */
    protected function getCategoryId($report_view = [], $form_view = [])
    {
        if (Validate::isNotNull($this->_category_id)) {
            return $this->_category_id;
        }

        $category_id = null;
        if (Validate::isNotNull($report_view)
            && Validate::isNotNull($form_view)
        ) {
            if (array_key_exists('active', $form_view)
                && $form_view['active'] == 1
                && array_key_exists('deleted', $form_view)
                && $form_view['deleted'] != 1
            ) {
                $category_id = $form_view['category'];
            } elseif (array_key_exists('category', $report_view)) {
                $category_id = $report_view['category'];
            }
        }
        if (0 == strlen($category_id)) {
            $category_id = GRN_REPORT_CATEGORY_NONPARTY_ID;
        }
        $this->_category_id = $category_id;

        return $category_id;
    }

    /**
     * Get report members
     *
     * @param int $report_id
     *
     * @return array $members
     */
    protected function getReportMembers($report_id)
    {
        if (Validate::isNumber($report_id)) {
            require_once('report/member_manager.csp');
            $member_manager = \GRN_Report_Member_Manager::getInstance();
            $members = &$member_manager->getList($report_id);

            return $members;
        }

        return [];
    }

    /**
     * Get Report Notification
     *
     * @param int $report_id
     *
     * @return array $notification_users
     */
    protected function getReportNotification($report_id)
    {
        if (Validate::isNumber($report_id)) {
            require_once('report/notification_manager.csp');
            $notification_manager
                = \GRN_Report_Notification_Manager::getInstance();
            $notification_users = &$notification_manager->getList($report_id);

            return $notification_users;
        }

        return [];
    }

    /**
     * Get Report Partners
     *
     * @param int $report_id
     *
     * @return array $partners
     */
    protected function getReportPartners($report_id)
    {
        if (Validate::isNumber($report_id)) {
            require_once('report/partner_manager.csp');
            $partner_manager = \GRN_Report_Partner_Manager::getInstance();
            $partner_rows = &$partner_manager->getList($report_id);
            require_once('report/partner.csp');
            $partners = \GRN_ReportPartnerData::createByRows($partner_rows);

            return $partners;
        }

        return [];
    }

    /**
     * Check view access right
     *
     * @param int   $category_id
     * @param array $report_view
     * @param array $members
     * @param array $notification_users
     *
     * @throws E_GRN_RPRT_REPORT_DENY_ACCESS
     * @return bool
     */
    protected function checkViewAccessRight(
        $category_id,
        $report_view,
        $members,
        $notification_users
    ) {
        if ( ! Validate::isNumber($category_id)
             || Validate::isNull($report_view)
             || Validate::isNull($members)
             || Validate::isNull($notification_users)
        ) {
            cb_throw_error(E_GRN_RPRT_REPORT_DENY_ACCESS);
        }
        $login_id = $this->getLoginUserId();
        $creator_id = isset($report_view['creator'])
            ? $report_view['creator'] : null;
        $is_accessible_category = false;
        require_once('report/controller_util.csp');
        $category_util = \GRN_Report_Category_Controller_Utility::getInstance();
        if ($category_id == GRN_REPORT_CATEGORY_NONPARTY_ID
            || $category_util->checkCategoryAccess($category_id, false)
        ) {
            $is_accessible_category = true;
        }
        if ($login_id == $creator_id) {
            return true;
        }
        if (in_array($login_id, $members)) {
            return true;
        }
        if (in_array($login_id, $notification_users)) {
            return true;
        }
        if ( ! $report_view['private'] && $is_accessible_category) {
            return true;
        }
        cb_throw_error(E_GRN_RPRT_REPORT_DENY_ACCESS);
    }

    protected function getReportTitle()
    {
        $report = $this->getReportForView();
        if (isset($report['form_name']) && (isset($report['name']))) {
            return $report['form_name'] . '（' . $report['name'] . '）';
        } else {
            return $report['name'];
        }
    }

    /**
     * Check argument of $G_INPUT
     *
     * @param  array $paraArr ( rid, follow_id )
     * @param  array $input
     *
     * @throws E_GRN_RPRT_REPORT_INVALID_ID
     * @throws E_GRN_RPRT_FOLLOW_INVALID_ID
     */
    protected function checkArgFromInput(array $paraArr, array $input)
    {
        foreach ($paraArr as $para) {
            switch ($para) {
                case self::ARG_REPORT_ID :
                    if (Validate::isNumber(@$input[self::ARG_REPORT_ID])) {
                        $this->setReportId($input[self::ARG_REPORT_ID]);
                    } else {
                        cb_throw_error(E_GRN_RPRT_REPORT_INVALID_ID);
                    }
                    break;
                case self::ARG_FOLLOW_ID :
                    if (Validate::isNumber(@$input[self::ARG_FOLLOW_ID])) {
                        $this->setFollowId($input[self::ARG_FOLLOW_ID]);
                    } else {
                        cb_throw_error(E_GRN_RPRT_FOLLOW_INVALID_ID);
                    }
                    break;
            }
        }

        return;
    }

    static public function redirectMobilePage($input)
    {
        if (array_key_exists(self::ARG_REPORT_ID, $input)) {
            cb_redirect(self::URL_REPORT_DETAIL, $input);
        }
    }
}
