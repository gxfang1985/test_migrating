<?php
require_once('report/table_manager.csp');
require_once('report/access_logic.csp');
require_once('report/itemdata_logic.csp');
require_once('report/error_code.csp');
require_once('report/manage_logic.csp');
require_once('report/member_manager.csp');
require_once('report/notification_manager.csp');

class GRN_ReportReport
{
    const REPORT_TABLE_NAME = 'tab_grn_report_report';

    private $_id;
    private $category;
    private $creator;
    private $creator_foreign_key;
    private $creator_name;
    private $ctime;
    private $modifier;
    private $modifier_foreign_key;
    private $modifier_name;
    private $mtime;
    private $name;
    private $form;
    private $form_name;
    private $form_foreign_key;
    private $deleted;
    private $draft;
    private $last_follow_id;
    private $list_index;
    private $private;
    private $enable_follow;
    private $enable_member;
    private $enable_partner;
    private $report_mtime;

    public function __construct($row)
    {
        $this->_id = isset($row['_id']) ? $row['_id'] : null;

        assert('array_key_exists("col_category", $row)');
        $this->setCategory($row['col_category']);

        assert('array_key_exists("col_creator", $row)');
        $this->setCreator($row['col_creator']);

        assert('array_key_exists("col_creator_foreign_key", $row)');
        $this->setCreatorForeignKey($row['col_creator_foreign_key']);

        assert('array_key_exists("col_creator_name", $row)');
        $this->setCreatorName($row['col_creator_name']);

        assert('array_key_exists("col_ctime", $row)');
        $this->setCtime($row['col_ctime']);

        assert('array_key_exists("col_modifier", $row)');
        $this->setModifier($row['col_modifier']);

        assert('array_key_exists("col_modifier_foreign_key", $row)');
        $this->setModifierForeignKey($row['col_modifier_foreign_key']);

        assert('array_key_exists("col_modifier_name", $row)');
        $this->setModifierName($row['col_modifier_name']);

        assert('array_key_exists("col_mtime", $row)');
        $this->setMtime($row['col_mtime']);

        assert('isset($row["col_name"])');
        $this->setName($row['col_name']);

        assert('array_key_exists("col_form", $row)');
        $this->setForm($row['col_form']);

        assert('array_key_exists("col_form_foreign_key", $row)');
        $this->setFormForeignKey($row['col_form_foreign_key']);

        assert('array_key_exists("col_form_name", $row)');
        $this->setFormName($row['col_form_name']);

        assert('isset($row["col_deleted"])');
        $this->setDeleted($row['col_deleted']);

        assert('isset($row["col_draft"])');
        $this->setDraft($row['col_draft']);

        assert('array_key_exists("col_list_index", $row)');
        $this->setListIndex($row['col_list_index']);

        assert('array_key_exists("col_last_follow_id", $row)');
        $this->setLastFollowId($row['col_last_follow_id']);

        assert('isset($row["col_private"])');
        $this->setPrivate($row['col_private']);

        assert('isset($row["col_enable_follow"])');
        $this->setEnableFollow($row['col_enable_follow']);

        assert('isset($row["col_enable_member"])');
        $this->setEnableMember($row['col_enable_member']);

        assert('isset($row["col_enable_partner"])');
        $this->setEnablePartner($row['col_enable_partner']);

        assert('array_key_exists("col_report_mtime", $row)');
        $this->setReportMtime($row['col_report_mtime']);
    }

    public static function selectById($report_id)
    {
        $db = GRN_Report_Table_Manager::getDataBase();
        $query = sprintf("SELECT * FROM %s WHERE _id = '%s'",
            self::REPORT_TABLE_NAME,
            $db->escape($report_id));
        $result = $db->query($query);

        if ($result === false) {
            $db->throwError(['query' => 'query failed: ' . $query]);
        }

        $row = $db->fetch_assoc($result);
        $db->free_result($result);

        return new GRN_ReportReport($row);
    }

    public function getId()
    {
        return $this->_id;
    }

    public function setId($_id)
    {
        $this->_id = $_id;
    }

    public function getCategory()
    {
        return $this->category;
    }

    public function setCategory($category)
    {
        $this->category = $category;
    }

    public function getCreator()
    {
        return $this->creator;
    }

    public function setCreator($creator)
    {
        $this->creator = $creator;
    }

    public function getCreatorForeignKey()
    {
        return $this->creator_foreign_key;
    }

    public function setCreatorForeignKey($creator_foreign_key)
    {
        $this->creator_foreign_key = $creator_foreign_key;
    }

    public function getCreatorName()
    {
        return $this->creator_name;
    }

    public function setCreatorName($creator_name)
    {
        $this->creator_name = $creator_name;
    }

    public function getCtime()
    {
        return $this->ctime;
    }

    public function setCtime($ctime)
    {
        $this->ctime = $ctime;
    }

    public function getModifier()
    {
        return $this->modifier;
    }

    public function setModifier($modifier)
    {
        $this->modifier = $modifier;
    }

    public function getModifierForeignKey()
    {
        return $this->modifier_foreign_key;
    }

    public function setModifierForeignKey($modifier_foreign_key)
    {
        $this->modifier_foreign_key = $modifier_foreign_key;
    }

    public function getModifierName()
    {
        return $this->modifier_name;
    }

    public function setModifierName($modifier_name)
    {
        $this->modifier_name = $modifier_name;
    }

    public function getMtime()
    {
        return $this->mtime;
    }

    public function setMtime($mtime)
    {
        $this->mtime = $mtime;
    }

    public function getName()
    {
        return $this->name;
    }

    public function setName($name)
    {
        $this->name = $name;
    }

    public function getForm()
    {
        return $this->form;
    }

    public function setForm($form)
    {
        $this->form = $form;
    }

    public function getFormName()
    {
        return $this->form_name;
    }

    public function setFormName($form_name)
    {
        $this->form_name = $form_name;
    }

    public function getFormForeignKey()
    {
        return $this->form_foreign_key;
    }

    public function setFormForeignKey($form_foreign_key)
    {
        $this->form_foreign_key = $form_foreign_key;
    }

    public function getDeleted()
    {
        return $this->deleted;
    }

    public function setDeleted($deleted)
    {
        $this->deleted = $deleted;
    }

    public function getDraft()
    {
        return $this->draft;
    }

    public function setDraft($draft)
    {
        $this->draft = $draft;
    }

    public function getLastFollowId()
    {
        return $this->last_follow_id;
    }

    public function setLastFollowId($last_follow_id)
    {
        $this->last_follow_id = $last_follow_id;
    }

    public function getListIndex()
    {
        return $this->list_index;
    }

    public function setListIndex($list_index)
    {
        $this->list_index = $list_index;
    }

    public function getPrivate()
    {
        return $this->private;
    }

    public function setPrivate($private)
    {
        $this->private = $private;
    }

    public function getEnableFollow()
    {
        return $this->enable_follow;
    }

    public function setEnableFollow($enable_follow)
    {
        $this->enable_follow = $enable_follow;
    }

    public function getEnableMember()
    {
        return $this->enable_member;
    }

    public function setEnableMember($enable_member)
    {
        $this->enable_member = $enable_member;
    }

    public function getEnablePartner()
    {
        return $this->enable_partner;
    }

    public function setEnablePartner($enable_partner)
    {
        $this->enable_partner = $enable_partner;
    }

    public function getReportMtime()
    {
        return $this->report_mtime;
    }

    public function setReportMtime($report_mtime)
    {
        $this->report_mtime = $report_mtime;
    }

    /**
     * Get this report's subject with option string.
     *
     * @return string
     */
    public function getSubject()
    {
        $itemdata_logic = GRN_Report_ItemData_Logic::getInstance();

        $subject_data = $itemdata_logic->getSubject($this->getId());
        $subject = $subject_data['col_text'];
        switch ($subject_data['col_option_string_type']) {
            case 1:
                $subject = $subject_data['col_option_string'] . ' ' . $subject;
                break;
            case 2:
                $subject = $subject . ' ' . $subject_data['col_option_string'];
                break;
            default:
                break;
        }

        return $subject;
    }

    /**
     * Get if this report belongs to an uncategorized category.
     *
     * @return boolean
     */
    public function isUncategorized()
    {
        if (is_null($this->getCategory())) {
            return true;
        }

        return false;
    }

    /**
     * Check if this report belongs to accessible category
     *
     * @param CB_User $user
     * @param boolean $throw_error
     *
     * @return boolean
     */
    public function checkAccessibleCategory($user, $throw_error = true)
    {
        $access_logic = GRN_Report_Category_Access_Logic::getInstance();
        if ( ! $access_logic->evaluateCategory($this->getCategory(),
            CB_DATABASE_DEFAULT_LOCK, false, $user->getOID())
        ) {
            if ($throw_error) {
                cb_throw_error(E_GRN_RPRT_ACCESS_DENY);
            }

            return false;
        }

        return true;
    }

    /**
     * Check if this report belongs to manageable category
     *
     * @param CB_User $user
     * @param boolean $throw_error
     *
     * @return boolean
     */
    public function checkManageableCategory($user, $throw_error = true)
    {
        if ($this->isUncategorized()) {
            if ($throw_error) {
                cb_throw_error(E_GRN_RPRT_MANAGE_DENY);
            }

            return false;
        }
        $manage_logic = GRN_Report_Category_Manage_Logic::getInstance();
        if ( ! $manage_logic->evaluateCategory($this->getCategory(),
            CB_DATABASE_DEFAULT_LOCK, $user->getOID())
        ) {
            if ($throw_error) {
                cb_throw_error(E_GRN_RPRT_MANAGE_DENY);
            }

            return false;
        }

        return true;
    }

    /**
     * Get if $user can view this report
     *
     * @param CB_User $user
     *
     * @return boolean
     */
    public function isViewable($user)
    {
        $user_id = $user->getOID();

        // login user can view
        if ($user_id === $this->getCreator()) {
            return true;
        }

        // member can view
        $member_manager = GRN_Report_Member_Manager::getInstance();
        $members =& $member_manager->getList($this->getId());
        if (in_array($user_id, $members)) {
            return true;
        }

        // notified user can view
        $notification_manager = GRN_Report_Notification_Manager::getInstance();
        $notification =& $notification_manager->getList($this->getId());
        if (in_array($user_id, $notification)) {
            return true;
        }

        // can not view private report other than login user, member or notified user
        if ($this->getPrivate()) {
            return false;
        }

        // can view public report beloging to accessible category
        if ($this->isUncategorized()
            || $this->checkAccessibleCategory($user, false)
        ) {
            return true;
        }

        return false;
    }
}
