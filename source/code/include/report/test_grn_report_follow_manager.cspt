<?php

require_once('developer/azunit.csp');
require_once('report/follow_manager.csp');
require_once('report/table_manager.csp');

class test_grn_report_follow_manager extends CB_TestCase
{
    /** database **/
    var $_database = null;

    /** table_name **/
    var $_table_name = null;

    /** Test Target List **/
    var $_follow_list = null;

    /** Unique key **/
    var $_unique_key = null;

    /** Basic Value List **/
    var $_follow_value_list = [];

    /**
     * Constructor
     *
     * @access private
     *
     * @param string $test_method //Test Method Name
     */
    function test_grn_report_follow_manager($test_method)
    {
        //Initialize Parent Class
        parent::CB_TestCase($test_method);

        //Initalize Randam Key
        mt_srand(time());

        //Initialize Unique Key
        $this->_unique_key = $test_method . time();

        //Get Database Connection
        global $G_container_base;
        $this->_database =& $G_container_base->getInstance('dbconn');

        //Set table name
        $this->_table_name = 'tab_grn_report_follow';

        //Set Basic Value List
        $this->_follow_value_list = [
            'col_follow_id'           => 1,
            'col_creator'             => '',
            'col_creator_name'        => 'Administrator',
            'col_creator_foreign_key' => 'Administrator',
            'col_ctime'               => '',
        ];

        return;
    }

    /**
     * Initialize Test
     *
     * @access private
     */
    function _initialize()
    {
        //Get Unique Key
        $unique_key = $this->_unique_key;

        //Create Test Follow
        $this->_createFollow($unique_key);

        return;
    }

    /**
     * finalize Test
     *
     * @access private
     */
    function _finalize()
    {
        //Delete Test Follow
        $this->_deleteFollow();

        return;
    }

    /**
     * Create Follow
     *
     * @access private
     *
     * @param string $unique_key //Unique key
     */
    function _createFollow($unique_key)
    {
        for ($i = 0; $i < 5; $i++) {
            //Create Query
            $follow_value_list = [];
            foreach ($this->_follow_value_list as $key => $value) {
                if ($key == 'col_creator') {
                    $follow_value_list[$key] = 1;
                } elseif ($key == 'col_creator_name'
                          || $key == 'col_creator_foreign_key'
                ) {
                    continue;
                } elseif (strlen($value) > 0) {
                    $follow_value_list[$key] = cb_queryf($this->_database,
                        '"@S@S"', $value, $i);
                } else {
                    $follow_value_list[$key] = cb_queryf($this->_database,
                        '"@S"', $i);
                }
            }
            $column_string = implode(',', array_keys($follow_value_list));
            $value_string = implode(',', $follow_value_list);
            $query = sprintf('INSERT %s(%s) VALUES (%s)',
                $this->_table_name, $column_string, $value_string);

            //Execute Query
            $result = $this->_database->query($query);
            if ($result === false) {
                //Throw Query Error
                $this->_database->throwError([
                    'query' => 'query failed: ' . $query
                ]);
            }

            //Add Cache
            $follow_id = $this->_database->get_insert_id();
            foreach (array_keys($follow_value_list) as $key) {
                $this->_follow_list[$follow_id][$key] = mb_ereg_replace('"', '',
                    $follow_value_list[$key]);
            }
        }

        return;
    }


    /**
     * Delete Follow
     *
     * @access private
     *
     * @param string $unique_key //Unique key
     */
    function _deleteFollow()
    {
        if (count($this->_follow_list) === 0) {
            return;
        }
        //Create Query
        $where_string = cb_queryf($this->_database, '_id IN (@S)',
            implode(',', array_keys($this->_follow_list)));
        $query = sprintf('DELETE FROM %s WHERE %s', $this->_table_name,
            $where_string);

        //Execute Query
        $result = $this->_database->query($query);
        if ($result === false) {
            //Throw Query Error
            $this->_database->throwError([
                'query' => 'query failed: ' . $query
            ]);
        }

        //Delete Cache
        $this->_follow_list = [];

        return;
    }

    /**
     * Get Follow
     *
     * @access  private
     *
     * @param  int   $follow_id   //Follow ID
     * @param  array $column_list //Column Name List
     *
     * @return array $follow                       //Validate Result
     */
    function _getFollow($follow_id, $column_list)
    {
        //Get Database
        $database =& $this->_database;

        //Create Column List
        $column_list = implode(',', $column_list);

        //Create Where Column
        $where = cb_queryf($database, 'WHERE _id = @S', $follow_id);

        //Create Order By Column
        $order_by = 'ORDER BY _id';

        //Create Query
        $query = sprintf('SELECT %s FROM %s %s %s', $column_list,
            $this->_table_name, $where, $order_by);
        $query = $database->select_format($query, 0, -1,
            CB_DATABASE_DEFAULT_LOCK);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }
        $follow = $database->fetch_assoc($result);
        $database->free_result($result);

        return $follow;
    }

    /**
     * Validate Follow
     *
     * @access  private
     *
     * @param  int  $follow_id      //Follow ID
     * @param  int  $validate_props //Validate Properties
     * @param  BOOL $deleted        //Deleted Flag
     *
     * @return BOOL                               //Validate Result
     */
    function _validateFollow($follow_id, $validate_props, $deleted = false)
    {
        //Get Link From Table
        $follow = $this->_getFollow($follow_id, array_keys($validate_props));
        if ($deleted && ! $follow) {
            return true;
        }

        //Validate Properties
        foreach ($validate_props as $prop_name => $prop_value) {
            //Check Assertion
            if (strval($follow[$prop_name]) !== strval($prop_value)) {
//                var_dump($follow[$prop_name]);
//                var_dump($prop_value);
//                echo $prop_name;
//                die();

                //Finalize Test
                $this->_finalize();
                assert('strval($follow[$prop_name]) === strval($prop_value)');
            }
        }

        return true;
    }

    /**
     * Create Follow
     *
     * @access  private
     * @return BOOL                  //Validate Result
     */
    function test_create()
    {
        //Initialize Test
        $this->_initialize();

        //Get Follow Manager Base Instance
        $manager = GRN_Report_Follow_Manager::getInstance();

        //Test Create Follow
        for ($i = 0; $i < 5; $i++) {
            $i = $i + 5;
            $property_list = [];
            foreach ($this->_follow_value_list as $key => $value) {
                if ($key == 'col_creator') {
                    $property_list[$key] = 1;
                } elseif ($key == 'col_creator_name'
                          || $key == 'col_creator_foreign_key'
                ) {
                    $property_list[$key] = 'Administrator';
                } elseif ($key == 'col_follow_id') {
                    $property_list[$key] = $i;
                } elseif ($key == 'col_ctime') {
                    $property_list[$key] = time();
                } elseif (strlen($value) > 0) {
                    $property_list[$key] = cb_queryf($this->_database, '"@S@S"',
                        $value, $i);
                } else {
                    $property_list[$key] = cb_queryf($this->_database, '"@S"',
                        $i);
                }
            }

            //Create Follow
            $follow_id = $manager->create($property_list);

            //Update Cache
            $this->_follow_list[$follow_id] = $property_list;

            //Validate Follow
            $this->_validateFollow($follow_id, $property_list);
        }

        //Finalize Test
        $this->_finalize();

        return true;
    }

    /**
     * Update Follow
     *
     * @access  private
     * @return BOOL                  //Validate Result
     */
    function test_update()
    {
        //Initialize Test
        $this->_initialize();

        //Get Follow Manager Base Instance
        $manager = GRN_Report_Follow_Manager::getInstance();

        //Test Update Follow
        $i = 5;
        $follow_list =& $this->_follow_list;
        foreach (array_keys($follow_list) as $follow_id) {
            $property_list = [];
            foreach ($this->_follow_value_list as $key => $value) {
                if ($key == 'col_creator') {
                    $property_list[$key] = 1;
                } elseif ($key == 'col_creator_name'
                          || $key == 'col_creator_foreign_key'
                ) {
                    $property_list[$key] = 'Administrator';
                } elseif ($key == 'col_follow_id') {
                    $property_list[$key] = $i;
                } elseif ($key == 'col_ctime') {
                    $property_list[$key] = time();
                } elseif (strlen($value) > 0) {
                    $property_list[$key] = cb_queryf($this->_database, '"@S@S"',
                        $value, $i);
                } else {
                    $property_list[$key] = cb_queryf($this->_database, '"@S"',
                        $i);
                }
            }

            //Update Follow
            $manager->update($follow_id, $property_list);

            //Update Cache
            $this->_follow_list[$follow_id] = $property_list;

            //Validate Follow
            $this->_validateFollow($follow_id, $property_list);

            $i++;
        }

        //Finalize Test
        $this->_finalize();

        return true;
    }

    /**
     * Remove Follow
     *
     * @access  private
     * @return BOOL                  //Validate Result
     */
    function test_remove()
    {
        //Initialize Test
        $this->_initialize();

        //Get Follow Manager Base Instance
        $manager = GRN_Report_Follow_Manager::getInstance();

        global $G_state_set;
        if ($G_state_set->get('command_line')) {
            $this->expectError('GRN_RPRT_25103');
        }

        //Test Remove Follow
        $follow_list =& $this->_follow_list;
        foreach (array_keys($follow_list) as $follow_id) {
            //Remove Follow
            $manager->remove($follow_id);

            //Remove Cache
            unset($this->_follow_list[$follow_id]);

            //Validate Follow
            $validate_props = ['*' => ''];
            $this->_validateFollow($follow_id, $validate_props, true);
        }

        //Finalize Test
        $this->_finalize();

        return true;
    }
}


cb_test_run();

?>
