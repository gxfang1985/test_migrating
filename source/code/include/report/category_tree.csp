<?php
/**
 * Report Tree View
 *
 * @date - 2010/02
 */

require_once('grn/org_tree.csp');

class GRN_Report_CategoryTree extends GRN_OrgTree
{
    var $_system = false;
    var $_locale = null;

    function __construct($params)
    {
        if (isset($params['system'])) {
            $this->_system = $params['system'];
        }
        $this->_groups_have_childs = [];
    }

    /**
     * @param   int $cid 親組織ID
     *
     * @return  array 子組織
     */
    function _getChildren($cid)
    {
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $login = $uum->getLoginUser();

        $category = null;
        $ret = [];

        if (is_null($cid)) {
            $cid = 1;   //root category ID

            $ret = [
                -1 => [
                    '_id'      => -1,
                    'col_name' => cb_msg('grn.report', 'nonparty'),
                    'link_url' => cb_pageurl(cb_get_pagename()) . "top=1"
                ],
            ];
        }

        require_once('report/category_logic.csp');
        $logic = GRN_Report_Category_Logic::getInstance();
        $category =& $logic->get($cid);

        $sub_categorys = [];
        if ($category) {
            // フォルダツリーの表示データを生成
            $sub_categorys =& $logic->getList($cid);
        }
        unset($category);

        require_once('report/controller_util.csp');
        $category_util = GRN_Report_Category_Controller_Utility::getInstance();
        foreach ($sub_categorys as $id => $category) {
            if ( ! $this->_system
                 && ! $category_util->checkCategoryAccess($category, false)
            ) {
                continue;
            }

            $ret[$id] = [
                '_id'      => $id,
                'col_name' => $category['col_name']
            ];
            if ($this->_system) {
                $this->_groups_have_childs[$id] = $logic->getChildCount($id);
            } else {
                $this->_groups_have_childs[$id]
                    = $logic->getAccessibleChildCount($login->getOID(), $id);
            }
        }
        $this->_groups_have_childs[$cid] = count($sub_categorys);

        return $ret;
    }

    function _onCreateChild(&$child, &$child_row)
    {
        if (array_key_exists('link_url', $child_row)) {
            $child['link_url'] = $child_row['link_url'];
        }
    }

    function getRoot()
    {
        $tree =& $this->_tree;
        if (is_null($tree)) {
            return $tree;
        }

        // update caption of special categorys when current locale is changed
        require_once('fw/i18n.csp');
        $i18n = CB_I18N::getInstance();
        $locale = strtolower($i18n->getCurrentLanguage());

        if (strcasecmp($this->_locale, $locale)) {
            foreach (array_keys($tree) as $key) {
                $category =& $tree[$key];
                switch ($key) {
                    case -1:
                        $category['name'] = cb_msg('grn.report', 'nonparty');
                        break;
                }
            }
        }

        $this->_locale = $locale;

        return $tree;
    }

    function getSelectedNode()
    {
        global $G_report_login_user;

        if ($this->_uid !== $G_report_login_user->getOID()) {
            $this->_selectedNode = null;
            $this->initialize();
        }

        if ($this->_selectedNode == 'top') //ルート
        {
            $this->_selectedNode = 1;
        }

        if ( ! $this->_system
             && ($this->_selectedNode == -1)
        ) //未分類
        {
            return $this->_selectedNode;
        }

        require_once('report/category_logic.csp');
        $logic = GRN_Report_Category_Logic::getInstance();

        if ( ! is_null($this->_selectedNode)
             && $logic->get($this->_selectedNode) === false
        ) {
            $this->_selectedNode = null;
            $this->initialize();
        }

        return $this->_selectedNode;
    }

    /**
     * @param int  $parent_cid 親ノードID
     * @param bool $expanded
     * @param bool $force
     *
     * @return array|bool 構築した子ノード
     */
    function buildChild($parent_cid, $expanded = false, $force = true)
    {
        return $this->_buildChild($parent_cid, $expanded, $force);
    }
}
