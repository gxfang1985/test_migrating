<?php

use grn\grn\access\service\AppAccess;

class GRN_ReportAddressUtil
{
    public static function isAddressAvailable()
    {
        return AppAccess::isAppAvailableInternalAccess('address');
    }

    /**
     * Get login user's availability of shared books
     *
     * @return boolean
     */
    public static function isSharedBookAvailable()
    {
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $login = $uum->getLoginUser();
        if ( ! is_object($login) || ! is_a($login, 'CB_User')) {
            return false;
        }

        // 使用権限を取得する
        require_once('address/access.csp');
        $access_manager = GRN_Address_AccessManager::getInstance();
        if ( ! ($row
            = $access_manager->getAbstractData(GRN_ADDRESS_AVAILABLE))
        ) {
            return false;
        }

        // ダイナミックロールを取得する
        $dynamic_roles = $uum->listGrantedRoles();

        // 使用権限を評価する
        $authorities = ['shared_address'];
        $security_model = $access_manager->getSecurityModel($row);
        $access = $access_manager->evaluateAccess($row, $login,
            $dynamic_roles, $authorities, $security_model);

        // 共有アドレス帳の使用権限を評価する
        $access_for_view = [];
        $authorities = ['shared_address'];
        $access_for_view['shared_address']
            = $access_manager->isAllowedAccess($access,
            $authorities, $security_model);

        if ( ! $access_for_view['shared_address']) {
            return false;
        }

        require_once('address/view_util.csp');
        $view_util = GRN_Address_ViewUtil::getInstance();

        $books_for_view = $view_util->getAllowedSharedBooksView();

        if (count($books_for_view) == 0) {
            return false;
        }

        return true;
    }
}
