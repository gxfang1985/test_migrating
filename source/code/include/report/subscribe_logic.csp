<?php
/**
 * Report Application Subscribe Class
 *
 * @data    2009/10
 * @version 1.0
 * @package grn.repot
 */

/** Report Application **/
require_once('report/resources.csp');
require_once('report/table_manager.csp');

/**
 * Subscribe Logic Class
 *
 * @package grn.report
 */
class GRN_Report_Subscribe_Logic
{
    //Subscribe Manager Instance
    var $_subscribe_manager = null;

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {

    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Report_Subscribe_Logic
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Subscribe Manager
     *
     * @return object $subscribe_manager          //Report Manager
     */
    function _getSubscribeManager()
    {
        if (is_null($this->_subscribe_manager)) {
            require_once('report/subscribe_manager.csp');
            $this->_subscribe_manager
                = GRN_Report_Subscribe_Manager::getInstance();
        }

        return $this->_subscribe_manager;
    }

    /**
     * Add Subscribe
     *
     * @param  int $report_id //Report ID
     * @param  int $user_id   //User ID
     * @param  int $subscribe //0 or 1(not subscribed or subscribed)
     *
     * @return int    $subscribe_id               //Subscribe ID
     */
    function add($report_id, $user_id, $subscribe)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        //Report ID
        cb_trim_check($report_id, E_GRN_RPRT_REPORT_INVALID_ID);
        //User ID
        cb_trim_check($user_id, E_GRN_RPRT_INVALID_USER_ID);

        //Get Current Subscribe List
        $subscribe_manager =& $this->_getSubscribemanager();
        $subscribe_list =& $subscribe_manager->getList($report_id, $user_id);
        foreach ($subscribe_list as $subscribe_data) {
            if ($subscribe_data[GRN_REPORT_COLUMN_SUBSCRIBE]
                == $subscribe_data
            ) {
                return false;
            } else {
                $property_list[GRN_REPORT_COLUMN_SUBSCRIBE] = $subscribe;
                $subscribe_id
                    = $subscribe_manager->update($subscribe_data['_id'],
                    $property_list);

                return $subscribe_id;
            }
        }

        //Create Property List
        $property_list[GRN_REPORT_COLUMN_REPORT] = $report_id;
        $property_list[GRN_REPORT_COLUMN_USER] = $user_id;
        $property_list[GRN_REPORT_COLUMN_SUBSCRIBE] = $subscribe;

        //Create New Subscribe
        $subscribe_id = $subscribe_manager->create($property_list);

        return $subscribe_id;
    }

    /**
     * Delete Subscribe
     *
     * @param  int $report_id //Report ID
     * @param  int $user_id   //User ID
     * @param  int $subscribe //Subscribe
     *
     * @return BOOL  $result                         //Result
     */
    function delete($report_id, $user_id, $subscribe = null)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        //Report ID
        cb_trim_check($report_id, E_GRN_RPRT_REPORT_INVALID_ID);
        //User ID
        cb_trim_check($user_id, E_GRN_RPRT_INVALID_USER_ID);

        //Remove Subscribe
        $subscribe_manager =& $this->_getSubscribeManager();
        $subscribe_manager->remove($report_id, $user_id, $subscribe);

        return true;
    }

    /**
     * Delete Multiple Subscribe
     *
     * @param  int   $report_id    //Report ID
     * @param  array $user_id_list //User ID List
     *
     * @return BOOL  $result                        //Result
     */
    function deleteMulti($report_id, $user_id_list)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        //Report ID
        cb_trim_check($report_id, E_GRN_RPRT_REPORT_INVALID_ID);
        //User ID List
        foreach ($user_id_list as $user_id) {
            cb_trim_check($user_id, E_GRN_RPRT_INVALID_USER_ID);
        }

        $subscribe_manager =& $this->_getSubscribemanager();
        $subscribe_manager->removeMulti($report_id, $user_id_list);

        return true;
    }

    /**
     * Delete All Subscribe
     *
     * @param  int $report_id //Report ID
     *
     * @return BOOL   $result                   //Result
     */
    function deleteAll($report_id)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        //Report ID
        cb_trim_check($report_id, E_GRN_RPRT_REPORT_INVALID_ID);

        $subscribe_manager =& $this->_getSubscribemanager();
        $subscribe_manager->removeAll($report_id);

        return true;
    }
}
