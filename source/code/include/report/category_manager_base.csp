<?php
/**
 * Report Application Category Manager Base Class
 *
 * @author  Jumpei Miyata 2009/09
 * @version 1.0
 * @package grn.report
 */

/** Report Application **/
require_once('fw/i18n.csp');
require_once('report/ReportFacade.csp');
require_once('report/resources.csp');
require_once('grn/application.csp');
require_once('report/table_manager.csp');
require_once('report/error_code.csp');

/**
 * Category Manager Base Class
 *
 * @package grn.report
 */
class GRN_Report_Category_Manager_Base
{
    /** Table Name **/
    var $_table_name = null;

    /** Category List **/
    var $_list = [];

    /** Search Category List **/
    var $_search_list = [];

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
        $this->_table_name = 'tab_grn_report_category';
    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Report_Category_Manager_Base
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    function _getColumnListSetNull(
        & $column_list,
        & $join,
        $set_null,
        $table_alias
    ) {
        if (is_null($column_list)) {
            $column_list
                = GRN_Report_Table_Manager::getColumnList(GRN_REPORT_TABLE_CATEGORY,
                $table_alias);
        }

        $join = "";
        if (is_array($set_null)) {
            foreach ($set_null as $key => $value) {
                $user_alias = "u_" . $key;
                $column_key = array_search($table_alias . "." . $value,
                    $column_list);
                if ($column_key !== false) {
                    $column_list[$column_key]
                        = sprintf('CASE WHEN %s.col_deleted IS NULL THEN %s.%s end AS %s',
                        $user_alias, $table_alias, $value, $value);
                    $join .= " LEFT JOIN tab_cb_user AS {$user_alias} ON c.{$value}={$user_alias}._id";
                }
            }
        }
    }

    /**
     * Get Category
     *
     * @param  int  $category_id        //Category ID
     * @param  int  $parent_category_id //Parent Category ID(null:All Category)
     * @param  bool $refresh            //Refresh Cache
     * @param  int  $lock_mode          //Lock Mode
     *
     * @return object $category                  //Category Information Array
     */
    function &get(
        $category_id,
        $parent_category_id = null,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Check Category ID
        cb_trim_check($category_id,
            E_GRN_RPRT_CATEGORY_INVALID_ID);      //Category ID

        //Check Parent Category ID
        $parent_category_id = is_null($parent_category_id) ? 0
            : $parent_category_id;

        //Get Category List
        $category_list =& $this->getList($parent_category_id, $refresh,
            $lock_mode);

        //Get Category
        if ( ! array_key_exists($category_id, $category_list)) {
            $ret = false;

            return $ret;
        }

        //Return Category
        return $category_list[$category_id];
    }

    /**
     * Get Category By Foreign Key
     *
     * @param  string $category_key //Category Foreign Key
     * @param  int    $lock_mode    //Lock Mode
     *
     * @return object $category                  //Category Object
     */
    public function getByForeignKey(
        $category_key,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $i18n = CB_I18N::getInstance();

        $dao = new ReportFacade();
        $dataObj = [];
        $dataObj['lock'] = $lock_mode;
        $dataObj['language'] = $i18n->getCurrentLanguage();

        $category = $dao->referReportCategoryByForeignKey($dataObj,
            $category_key);

        //Return Categoery Information
        return ($category === false) ? false : $category->convertArray();
    }

    /**
     * Get Category List
     *
     * @param  int  $parent_category_id //Parent Category ID(null:ROOT Category)
     * @param  bool $refresh            //Refresh Cache
     * @param  int  $lock_mode          //Lock Mode
     * @param  int  $isUseLocal         //TRUE :local name   FALSE:default name
     *
     * @return object $category                  //Category Information Array
     */
    function &getList(
        $parent_category_id = null,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $isUseLocal = true
    ) {
        $category_list = [];
        //Check Arguments
        $parent_category_id = is_null($parent_category_id)
            ? GRN_REPORT_CATEGORY_ROOT_ID : $parent_category_id;

        //Get Category List From Cache
        $cached = false;
        if ( ! $refresh) {
            if (array_key_exists($parent_category_id, $this->_list)) {
                if (is_array($this->_list[$parent_category_id])) {
                    $category_list =& $this->_list[$parent_category_id];
                    $cached = true;
                }
            }
        } else {
            $this->_list[$parent_category_id] = [];
        }

        //Get Category List From Database
        if ( ! $cached || $refresh) {
            $i18n = CB_I18N::getInstance();

            $dao = new ReportFacade();
            $dataObj = [];
            $dataObj['lock'] = $lock_mode;
            $dataObj['language'] = $i18n->getCurrentLanguage();
            $dataObj['parentId'] = ($parent_category_id == 0) ? null
                : $parent_category_id;
            $dataObj['offset'] = 0;
            $dataObj['limit'] = -1;

            $categoryList = ($isUseLocal)
                ? $dao->getReportCategoryList($dataObj)
                : $dao->getReportCategoryListWithNonLocal($dataObj);

            foreach ($categoryList as $category) {
                $categoryId = $category->getId();
                $row
                    = $category->convertArray();
                $this->_list[$parent_category_id][$categoryId] = $row;
            }

            if (count($categoryList) > 0) {
                $category_list =& $this->_list[$parent_category_id];
            }
        }

        //Return Category List
        return $category_list;
    }

    /**
     * Get Category ID List
     *
     * @param  array $category_id_list //Category ID List: array(id1, id2, id3, ..n)
     * @param  bool  $refresh          //Refresh Cache
     * @param  int   $lock_mode        //Lock Mode
     *
     * @return object $category                  //Category Information Array
     */
    function getCategoryIDList(
        $category_id_list = null,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $category_list = [];

        //Get Category List From Cache
        $cached = false;
        $no_cached = false;
        $no_caached_id_list = [];
        foreach ($category_id_list as $id) {
            if ( ! $refresh) {
                if (array_key_exists($id, $this->_list)) {
                    if (is_array($this->_list[$id])) {
                        $category_list[] =& $this->_list[$id];
                        $cached = true;
                    } else {
                        $no_caached_id_list[] = $id;
                        $no_cached = true;
                    }
                } else {
                    $no_caached_id_list[] = $id;
                    $no_cached = true;
                }
            } else {
                $no_caached_id_list[] = $id;
                $no_cached = true;
            }
        }

        if ($no_cached) {
            $category_id_list = $no_caached_id_list;
            $cached = false;
        }

        //Get Category List From Database
        if ( ! $cached || $refresh) {
            $i18n = CB_I18N::getInstance();

            $dao = new ReportFacade();
            $dataObj = [];
            $dataObj['lock'] = $lock_mode;
            $dataObj['language'] = $i18n->getCurrentLanguage();
            $dataObj['offset'] = 0;
            $dataObj['limit'] = -1;

            $categoryList = $dao->getReportCategoryListByIds($dataObj,
                $category_id_list);

            foreach ($categoryList as $category) {
                $categoryId = $category->getId();
                $row = $category->convertArray();
                $category_list[$categoryId] = $row;
            }
        }

        //Return Category List
        return $category_list;
    }

    /**
     * Get Category Count
     *
     * @param  int  $parent_category_id //Parent Category ID
     * @param  bool $refresh            //Refresh Cache
     * @param  int  $lock_mode          //Lock Mode
     *
     * @return int    $category_count            //Category Count
     */
    function getCount(
        $parent_category_id = null,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Category List
        $category_list = $this->getList($parent_category_id, $refresh,
            $lock_mode);

        //Return Category Count
        return count($category_list);
    }

    /**
     * Get Parent Category
     *
     * @param  int $category_id //Category ID
     * @param  int $lock_mode   //Lock Mode
     *
     * @return object $parent_category           //Parent Category Object
     */
    function &getParent(
        $category_id,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $refresh = false
    ) {
        //Get Category
        $category =& $this->get($category_id, null, false, $lock_mode);
        if ( ! $category) {
            $ret = false;

            return $ret;
        }

        //Check Parent Category
        $parent_category_id = $category[GRN_REPORT_COLUMN_PARENT];
        if ( ! $parent_category_id) {
            $ret = false;

            return $ret;
        }

        //Return Parent Category Object
        $ret =& $this->get($category[GRN_REPORT_COLUMN_PARENT], null, $refresh,
            $lock_mode);

        return $ret;
    }

    /**
     * Get Child Category
     *
     * @param  int $category_id //Category ID
     * @param  int $lock_mode   //Lock Mode
     *
     * @return array  $child_category_list       //Child Category List
     */
    function getChildList($category_id, $lock_mode = CB_DATABASE_DEFAULT_LOCK)
    {
        //Get Child Category List
        $category_list = $this->getList($category_id, false, $lock_mode);
        foreach (array_keys($category_list) as $key) {
            $category =& $category_list[$key];
            $category['col_count'] = $this->getChildCount($key, $lock_mode);
        }

        return $category_list;
    }

    /**
     * Get Child Count
     *
     * @param  int $category_id //Category ID
     * @param  int $lock_mode   //Lock Mode
     *
     * @return int    $child_category_count      //Child Category Count
     */
    function getChildCount($category_id, $lock_mode = CB_DATABASE_DEFAULT_LOCK)
    {
        //Get Category List
        $category_list = $this->getList($category_id, false, $lock_mode);

        //Return Child Category Count
        return count($category_list);
    }

    /**
     * Get Category Tree List
     *
     * @param  int  $last_category_id //Last Category ID
     * @param  bool $include_root     //Include Root Flag
     * @param  bool $include_last     //Include Last Category Flag
     * @param  int  $lock_mode        //Lock Mode
     *
     * @return array  $tree_category_list        //Tree Category List
     */
    function getTreeList(
        $last_category_id,
        $include_root = true,
        $include_last = true,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $refresh = false
    ) {
        $tree_list = [];

        //Check Include Root Flag
        if ($include_root && $last_category_id == GRN_REPORT_CATEGORY_ROOT_ID) {
            //Get First Category
            $category =& $this->get($last_category_id, null, $refresh,
                $lock_mode);
            if ( ! $category) {
                return false;
            }
            $tree_list[$last_category_id] =& $category;

            return $tree_list;
        }

        //Check Include Last Flag
        if ($include_last) {
            //Get First Category
            $category =& $this->get($last_category_id, null, $refresh,
                $lock_mode);
            if ( ! $category) {
                return false;
            }
            $tree_list[$last_category_id] =& $category;
        }

        //Get Tree List
        while (false != ($parent_category =& $this->getParent($last_category_id,
                $lock_mode, $refresh))) {
            $parent_category_id = $parent_category['_id'];
            if ($parent_category_id == GRN_REPORT_CATEGORY_ROOT_ID
                && ! $include_root
            ) {
                break;
            }
            $tree_list[$parent_category_id] =& $parent_category;
            $last_category_id = $parent_category_id;
        }

        //Reverse Tree List
        $reverse_tree_list = array_reverse($tree_list, true);

        //Return Category Tree List
        return $reverse_tree_list;
    }

    /**
     * Search Category
     *
     * @param  array $condition_list //Search Condition List
     * @param  int   $offset         //Search Offset
     * @param  int   $limit          //Search Limit
     * @param  int   $lock_mode      //Lock Mode
     *
     * @return array  $hit_category_list        //Hit Category List
     */
    function search(
        $condition_list,
        $offset = 0,
        $limit = 5,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $i18n = CB_I18N::getInstance();

        $dao = new ReportFacade();
        $dataObj = [];
        $dataObj['lock'] = $lock_mode;
        $dataObj['language'] = $i18n->getCurrentLanguage();
        $dataObj['offset'] = $offset;
        $dataObj['limit'] = $limit;

        $categoryList = $dao->getReportCategoryListByNames($dataObj,
            $condition_list);

        foreach ($categoryList as $category) {
            $categoryId = $category->getId();
            $row = $category->convertArray();
            $this->_search_list[$categoryId] = $row;
        }

        $hit_category_list = [];

        if (count($categoryList) > 0) {
            $hit_category_list =& $this->_search_list;
        }

        //return Hit Category List
        return $hit_category_list;
    }

    /**
     * Reflesh Cache
     *
     * @param int  $category_id //Category ID(null:ALL Category)
     * @param bool $recursive   //Recursive Flag
     * @param none
     */
    function refreshCache($category_id = null, $recursive = false)
    {
        //Refresh Cache With User ID
        if (is_null($category_id)) {
            if ($recursive) {
                unset($this->_list);
                $this->_list = [];
            } else {
                unset($this->_list[0]);
            }

            return;
        } else {
            if ($recursive) {
                $sub_category =& $this->_list[$category_id];
                if (is_array($sub_category)) {
                    foreach (array_keys($sub_category) as $sub_category_id) {
                        $this->refreshCache($sub_category_id, true);
                    }
                }
            }
            unset($this->_list[$category_id]);
            unset($this->_list[0][$category_id]);
        }

        return;
    }

    /**
     * このユーザーが閲覧可能なカテゴリID一覧を返す
     *
     * @param $user
     *
     * @return unknown_type
     */
    function getAccessibleCategoryIdList($userId)
    {
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');

        $data = [];

        //USER
        $data['user'] = $this->_getUserAccessInfo($userId);

        //Dynamic Role        
        $dRoles = $uum->listGrantedRoles();
        $data['drole'] = $this->_getDynamicRoleAccessInfo($dRoles);

        //Static Role
        $sRoles = $uum->getUserRoles($userId);
        $data['srole'] = $this->_getStaticRoleAccessInfo($sRoles);

        //Group
        $groups = $uum->getUserGroups($userId);
        $data['group'] = $this->_getGroupAccessInfo($groups);

        $result = [];

        $categories = $this->_getAllCategories();

        foreach ($categories as $cid => $c) {
            $category_tree = [];
            $id = $cid;
            while ( ! is_null($id)) {
                $category_tree[] = $id;
                $id = $categories[$id]['parent'];
            }

            $accessible = true;

            foreach ($category_tree as $category_id) {
                //「許可の対象を選択」の場合
                if ($categories[$category_id]['security_model']
                    == GRN_REPORT_SECURITY_MODEL_TYPE_GRANT
                ) {
                    $user
                        = isset($data['user'][GRN_REPORT_SECURITY_MODEL_TYPE_GRANT][$category_id]);
                    $drole
                        = isset($data['drole'][GRN_REPORT_SECURITY_MODEL_TYPE_GRANT][$category_id]);
                    $srole
                        = isset($data['srole'][GRN_REPORT_SECURITY_MODEL_TYPE_GRANT][$category_id]);
                    $group
                        = isset($data['group'][GRN_REPORT_SECURITY_MODEL_TYPE_GRANT][$category_id]);

                    //どれも許可されていない場合、閲覧不可
                    if ( ! $user && ! $drole && ! $srole && ! $group) {
                        $accessible = false;
                    }
                } //「制限の対象を選択」の場合
                elseif ($categories[$category_id]['security_model']
                        == GRN_REPORT_SECURITY_MODEL_TYPE_REVOKE
                ) {
                    $user
                        = isset($data['user'][GRN_REPORT_SECURITY_MODEL_TYPE_REVOKE][$category_id]);
                    $drole
                        = isset($data['drole'][GRN_REPORT_SECURITY_MODEL_TYPE_REVOKE][$category_id]);
                    $srole
                        = isset($data['srole'][GRN_REPORT_SECURITY_MODEL_TYPE_REVOKE][$category_id]);
                    $group
                        = isset($data['group'][GRN_REPORT_SECURITY_MODEL_TYPE_REVOKE][$category_id]);

                    if ($user || $drole || $srole
                        || $group
                    ) //どれかひとつでも制限されている場合、閲覧不可
                    {
                        $accessible = false;
                    }
                }
            }

            if ($accessible) {
                $result[] = $cid;
            }
        }

        return $result;
    }

    private function _getUserAccessInfo($userId)
    {
        $i18n = CB_I18N::getInstance();

        $dao = new ReportFacade();
        $dataObj = [];
        $dataObj['language'] = $i18n->getCurrentLanguage();

        $categoryList = $dao->getReportCategoryListByAccessUserId($dataObj,
            $userId);

        $data = [];
        foreach ($categoryList as $category) {
            $categoryId = $category->getId();
            $securityModel = $category->getSecurityModel();
            $data[$securityModel][$categoryId] = 1;
        }

        return $data;
    }

    private function _getDynamicRoleAccessInfo($roles)
    {

        if (count($roles) == 0) {
            return [];
        }

        $i18n = CB_I18N::getInstance();

        $dao = new ReportFacade();
        $dataObj = [];
        $dataObj['language'] = $i18n->getCurrentLanguage();
        $roleIds = array_keys($roles);

        $categoryList
            = $dao->getReportCategoryListByAccessDynamicRoleIds($dataObj,
            $roleIds);

        $data = [];
        foreach ($categoryList as $category) {
            $categoryId = $category->getId();
            $securityModel = $category->getSecurityModel();
            $data[$securityModel][$categoryId] = 1;
        }

        return $data;
    }

    private function _getStaticRoleAccessInfo($roles)
    {
        if (count($roles) == 0) {
            return [];
        }

        $i18n = CB_I18N::getInstance();

        $dao = new ReportFacade();
        $dataObj = [];
        $dataObj['language'] = $i18n->getCurrentLanguage();
        $roleIds = array_keys($roles);

        $categoryList
            = $dao->getReportCategoryListByAccessStaticRoleIds($dataObj,
            $roleIds);

        $data = [];
        foreach ($categoryList as $category) {
            $categoryId = $category->getId();
            $securityModel = $category->getSecurityModel();
            $data[$securityModel][$categoryId] = 1;
        }

        return $data;
    }

    private function _getGroupAccessInfo($groups)
    {
        if (count($groups) == 0) {
            return [];
        }

        $i18n = CB_I18N::getInstance();

        $dao = new ReportFacade();
        $dataObj = [];
        $dataObj['language'] = $i18n->getCurrentLanguage();
        $groupIds = array_keys($groups);

        $categoryList = $dao->getReportCategoryListByAccessGroupIds($dataObj,
            $groupIds);

        $data = [];
        foreach ($categoryList as $category) {
            $categoryId = $category->getId();
            $securityModel = $category->getSecurityModel();
            $data[$securityModel][$categoryId] = 1;
        }

        return $data;
    }

    private function _getAllCategories()
    {
        $i18n = CB_I18N::getInstance();

        $dao = new ReportFacade();
        $dataObj = [];
        $dataObj['language'] = $i18n->getCurrentLanguage();

        $categoryList = $dao->getReportCategoryList($dataObj);

        $data = [];
        foreach ($categoryList as $category) {
            $categoryId = $category->getId();
            $securityModel = $category->getSecurityModel();
            $parentId = $category->getParent();

            $data[$categoryId] = [
                'id'             => $categoryId,
                'security_model' => $securityModel,
                'parent'         => $parentId
            ];
        }

        return $data;
    }
}


