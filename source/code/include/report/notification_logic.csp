<?php
/**
 * Report Application Notification Class
 *
 * @data    2009/09
 * @version 1.0
 * @package grn.repot
 */

/** Report Application **/
require_once('report/resources.csp');
require_once('report/table_manager.csp');

/**
 * Notification Logic Class
 *
 * @package grn.report
 */
class GRN_Report_Notification_Logic
{
    //Notification Manager Instance
    var $_notification_manager = null;

    function __construct()
    {

    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Report_Notification_Logic
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Notification Manager
     *
     * @return object $notification_manager          //Report Manager
     */
    function _getNotificationManager()
    {
        if (is_null($this->_notification_manager)) {
            require_once('report/notification_manager.csp');
            $this->_notification_manager
                = GRN_Report_Notification_Manager::getInstance();
        }

        return $this->_notification_manager;
    }

    /**
     * Add Notification
     *
     * @return int    $notification_id               //Notification ID
     */
    function add($report_id, $user_id)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        //Report ID
        cb_trim_check($report_id, E_GRN_RPRT_REPORT_INVALID_ID);
        //User ID
        cb_trim_check($user_id, E_GRN_RPRT_INVALID_USER_ID);

        //Create Property List
        $property_list[GRN_REPORT_COLUMN_REPORT] = $report_id;
        $property_list[GRN_REPORT_COLUMN_USER] = $user_id;

        //Create New Notification
        $notification_manager =& $this->_getNotificationManager();
        $notification_id = $notification_manager->create($property_list);

        return $notification_id;
    }

    /**
     * Add Multiple Notification
     *
     * @param  int $report_id        //Report ID
     * @param  int $user_id_list     //User ID List
     * @param  int $operator_id_list //Operator ID List
     *
     * @return array
     */
    function &addMulti($report_id, $user_id_list, $operator_id_list)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        //Report ID
        cb_trim_check($report_id, E_GRN_RPRT_REPORT_INVALID_ID);
        //User ID List
        if (is_array($user_id_list)) {
            foreach ($user_id_list as $user_id) {
                cb_trim_check($user_id, E_GRN_RPRT_INVALID_USER_ID);
            }
        } else {
            $user_id_list = [];
        }
        if ( ! is_array($operator_id_list)) {
            $operator_id_list = [];
        }

        $notification_id_list = [];
        $property_list_array = [];
        foreach ($user_id_list as $user_id) {
            //Create Property List
            $property_list = [];
            $property_list[GRN_REPORT_COLUMN_REPORT] = $report_id;
            $property_list[GRN_REPORT_COLUMN_USER] = $user_id;
            $property_list[GRN_REPORT_COLUMN_IS_OPERATOR] = in_array($user_id,
                $operator_id_list) ? GRN_REPORT_IS_OPERATOR
                : GRN_REPORT_IS_NOT_OPERATOR;
            $property_list_array[] = $property_list;
        }

        if (count($property_list_array) > 0) {
            $notification_manager = $this->_getNotificationManager();
            $notification_manager->createMulti($property_list_array);
        }

        return $notification_id_list;
    }

    /**
     * Delete Notification
     *
     * @param  int $report_id //Report ID
     * @param  int $user_id   //User ID
     *
     * @return BOOL  $result                         //Result
     */
    function delete($report_id, $user_id)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        //Report ID
        cb_trim_check($report_id, E_GRN_RPRT_REPORT_INVALID_ID);
        //User ID
        cb_trim_check($user_id, E_GRN_RPRT_INVALID_USER_ID);

        //Remove Notification
        $notification_manager =& $this->_getNotificationManager();
        $notification_manager->remove($report_id, $user_id);

        return true;
    }

    /**
     * Delete Multiple Notification
     *
     * @param  int   $report_id    //Report ID
     * @param  array $user_id_list //User ID List
     *
     * @return BOOL  $result                        //Result
     */
    function deleteMulti($report_id, $user_id_list)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        //Report ID
        cb_trim_check($report_id, E_GRN_RPRT_REPORT_INVALID_ID);
        //User ID List
        foreach ($user_id_list as $user_id) {
            cb_trim_check($user_id, E_GRN_RPRT_INVALID_USER_ID);
        }

        $notification_manager = $this->_getNotificationManager();
        $notification_manager->removeMulti($report_id, $user_id_list);

        return true;
    }

    /**
     * Delete All Notification
     *
     * @param  int $report_id //Report ID
     *
     * @return BOOL $result                       //Result
     */
    function deleteAll($report_id)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        //Report ID
        cb_trim_check($report_id, E_GRN_RPRT_REPORT_INVALID_ID);

        $notification_manager =& $this->_getNotificationManager();
        $notification_manager->removeAll($report_id);

        return true;
    }

    function changeOrder($report_id, $notification_id_list)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');

        //Report ID
        cb_trim_check($report_id, E_GRN_RPRT_REPORT_INVALID_ID);

        if ( ! is_array($notification_id_list)
             || count($notification_id_list) == 0
        ) {
            return;
        }

        $notification_manager = $this->_getnotificationmanager();
        $notification_manager->changeOrder($report_id, $notification_id_list);
    }

    function updateOperator($report_id, $operator_values)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');

        //Report ID
        cb_trim_check($report_id, E_GRN_RPRT_REPORT_INVALID_ID);

        if ( ! is_array($operator_values) || count($operator_values) == 0) {
            return;
        }

        $notification_manager = $this->_getNotificationmanager();
        $notification_manager->updateOperator($report_id, $operator_values);
    }
}
