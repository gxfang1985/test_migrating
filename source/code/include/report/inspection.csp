<?php
/**
 * Report Inspection  Class
 *
 * @version 1.0
 * @package grn.report
 */

/** Report Application **/
require_once('report/resources.csp');

/**
 * Report Common Inspection Class
 *
 * @package grn.report
 * @abstract
 */
class GRN_Report_Common_Inspection extends GRN_Report_Inspection_Base
{
    /**
     * Constructor
     *
     */
    function __construct()
    {
        $template_list = [
            //一般設定
            'common_set' => [
                'template' => '[config] common_set <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'cutover',
                    'allow_remand',
                    'applicant',
                    'operation_admin',
                    'system_admin',
                    'approval_plan',
                    'substitute_application',
                    'substitute_approval',
                    'personal_agent_setting'
                ],
                'action'   => 'config',
                'target'   => 'common_set',
            ],
        ];
        //Set Template List
        parent::__construct($template_list);

        return;
    }

    /** @var self */
    private static $_instance = null;

    /**
     * @return GRN_Report_Common_Inspection
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }
}

/**
 * Report Category Inspection Class
 *
 * @package grn.report
 * @abstract
 */
class GRN_Report_Category_Inspection extends GRN_Report_Inspection_Base
{
    /**
     * Constructor
     *
     */
    function __construct()
    {
        $template_list = [
            //カテゴリの追加
            'category_add'    => [
                'template' => '[create] category_add (cid:%s) <%s> <%s> <%s>',
                'items'    => ['cid', 'name', 'foreign_key', 'memo',],
                'action'   => 'create',
                'target'   => 'category_add',
            ],
            //カテゴリの変更
            'category_modify' => [
                'template' => '[modify] category_modify (cid:%s) <%s> <%s> <%s>',
                'items'    => ['cid', 'name', 'foreign_key', 'memo',],
                'action'   => 'modify',
                'target'   => 'category_modify',
            ],
            //カテゴリの削除
            'category_delete' => [
                'template' => '[delete] category_delete (cid:%s)',
                'items'    => ['cid',],
                'action'   => 'delete',
                'target'   => 'category_delete',
            ],
            //カテゴリの移動
            'category_move'   => [
                'template' => '[modify] category_move (cid:%s) (s_cid:%s)',
                'items'    => ['cid', 's_cid',],
                'action'   => 'modify',
                'target'   => 'category_move',
            ],
            //サブカテゴリの順番変更
            'category_order'  => [
                'template' => '[modify] category_order (cids:%s)',
                'items'    => ['cids',],
                'action'   => 'modify',
                'target'   => 'category_order',
            ],
            //カテゴリの書き出し
            'category_export' => [
                'template' => '[export] category_export',
                'items'    => [],
                'action'   => 'export',
                'target'   => 'category_export',
            ],
            //カテゴリの読み込み
            'category_import' => [
                'template' => '[import] category_import <%s> <%s> <%s> <%s>',
                'items'    => [
                    'parent_foreign_key',
                    'foreign_key',
                    'name',
                    'memo'
                ],
                'action'   => 'import',
                'target'   => 'category_import',
            ],
        ];
        //Set Template List
        parent::__construct($template_list);

        return;
    }


    /** @var self */
    private static $_instance = null;

    /**
     * @return GRN_Report_Category_Inspection
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }
}

/**
 * Report Form Inspection Class
 *
 * @package grn.report
 * @abstract
 */
class GRN_Report_Form_Inspection extends GRN_Report_Inspection_Base
{
    /**
     * Constructor
     *
     */
    function __construct()
    {
        $template_list = [
            //区切り線の追加
            'form_separator_add' => [
                'template' => '[create] form_separator_add (cid:%s) (fid:%s)',
                'items'    => ['cid', 'fid',],
                'action'   => 'create',
                'target'   => 'form_separator_add',
            ],
            //報告フォームの追加
            'form_add'           => [
                'template' => '[create] form_add (cid:%s) (fid:%s) <%s> <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'cid',
                    'fid',
                    'name',
                    'foreign_key',
                    'enable_follow',
                    'enable_member',
                    'enable_partner',
                    'memo'
                ],
                'action'   => 'create',
                'target'   => 'form_add',
            ],
            //報告フォームの変更
            'form_modify'        => [
                'template' => '[modify] form_modify (fid:%s) <%s> <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'fid',
                    'name',
                    'foreign_key',
                    'enable_follow',
                    'enable_member',
                    'enable_partner',
                    'memo'
                ],
                'action'   => 'modify',
                'target'   => 'form_modify',
            ],
            //報告フォームの削除
            'form_delete'        => [
                'template' => '[delete] form_delete (fid:%s)',
                'items'    => ['fid',],
                'action'   => 'delete',
                'target'   => 'form_delete',
            ],
            //報告フォームの一括削除
            'form_delete_multi'  => [
                'template' => '[delete] form_delete_multi (fids:%s)',
                'items'    => ['fids',],
                'action'   => 'delete',
                'target'   => 'form_delete_multi',
            ],
            //報告フォームの全削除
            'form_delete_all'    => [
                'template' => '[delete] form_delete_all (cid:%s)',
                'items'    => ['cid',],
                'action'   => 'delete',
                'target'   => 'form_delete_all',
            ],
            //管理者用メモの変更
            'form_memo_modify'   => [
                'template' => '[modify] form_memo_modify (fid:%s) <%s>',
                'items'    => ['fid', 'admin_memo',],
                'action'   => 'modify',
                'target'   => 'form_memo_modify',
            ],
            //報告フォームの有効/無効切り替え
            'form_activate'      => [
                'template' => '[modify] form_activate (fid:%s) <%s>',
                'items'    => ['fid', 'active',],
                'action'   => 'modify',
                'target'   => 'form_activate',
            ],
            //報告フォームの順番変更
            'form_order'         => [
                'template' => '[modify] form_order (cid:%s) (fids:%s)',
                'items'    => ['cid', 'fids',],
                'action'   => 'modify',
                'target'   => 'form_order',
            ],
            //報告フォームの書き出し
            'form_export'        => [
                'template' => '[export] form_export',
                'items'    => [],
                'action'   => 'export',
                'target'   => 'form_export',
            ],
            //報告フォームの読み込み
            'form_import'        => [
                'template' => '[import] form_import <%s> <%s>',
                'items'    => ['forms', 'items',],
                'action'   => 'import',
                'target'   => 'form_import',
            ],
            //フォームのコピー
            'form_copy'          => [
                'template' => '[create] form_copy (fids:%s)',
                'items'    => ['fids',],
                'action'   => 'create',
                'target'   => 'form_copy',
            ],
            //報告フォームの移動
            'form_move'          => [
                'template' => '[modify] form_move (cid:%s) (s_cid:%s) (fid:%s)',
                'items'    => ['cid', 's_cid', 'fid',],
                'action'   => 'modify',
                'target'   => 'form_move',
            ],
        ];
        //Set Template List
        parent::__construct($template_list);

        return;
    }


    /** @var self */
    private static $_instance = null;

    /**
     * @return GRN_Report_Form_Inspection
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Set Enable Follow
     *
     * @param  int $enable_follow //Enable Follow
     *
     * @return string $inspection_enable_follow     //Inspection Enable Follow
     */
    function setEnableFollow($enable_follow)
    {
        $inspection_enable_follow = GRN_REPORT_INSPECTION_FLAG_OFF;
        if ($enable_follow === '1') {
            $inspection_enable_follow = GRN_REPORT_INSPECTION_FLAG_ON;
        }

        return $inspection_enable_follow;
    }

    /**
     * Set Enable Member
     *
     * @param  int $enable_member //Enable Member
     *
     * @return string $inspection_enable_member     //Inspection Enable Member
     */
    function setEnableMember($enable_member)
    {
        $inspection_enable_member = GRN_REPORT_INSPECTION_FLAG_OFF;
        if ($enable_member === '1') {
            $inspection_enable_member = GRN_REPORT_INSPECTION_FLAG_ON;
        }

        return $inspection_enable_member;
    }

    /**
     * Set Enable Partner
     *
     * @param  int $enable_partner //Enable Partner
     *
     * @return string $inspection_enable_partner     //Inspection Enable Partner
     */
    function setEnablePartner($enable_partner)
    {
        $inspection_enable_partner = GRN_REPORT_INSPECTION_FLAG_OFF;
        if ($enable_partner === '1') {
            $inspection_enable_partner = GRN_REPORT_INSPECTION_FLAG_ON;
        }

        return $inspection_enable_partner;
    }
}

/**
 * Report Filter Inspection Class
 *
 * @package grn.report
 * @abstract
 */
class GRN_Report_Filter_Inspection extends GRN_Report_Inspection_Base
{
    /**
     * Constructor
     *
     */
    function __construct()
    {
        $template_list = [
            //絞込みの追加
            'filter_add'          => [
                'template' => '[create] filter_add (fid:%s) <%s> <%s>',
                'items'    => ['fid', 'name', 'and_or'],
                'action'   => 'create',
                'target'   => 'filter_add',
            ],
            //絞込みの編集
            'filter_modify'       => [
                'template' => '[modify] filter_modify (fid:%s) <%s> <%s>',
                'items'    => ['fid', 'name', 'and_or'],
                'action'   => 'modify',
                'target'   => 'filter_modify',
            ],
            //絞込みのコピー
            'filter_copy'         => [
                'template' => '[create] filter_copy (fids:%s)',
                'items'    => ['fids',],
                'action'   => 'create',
                'target'   => 'filter_copy',
            ],
            //絞込みの削除
            'filter_delete'       => [
                'template' => '[delete] filter_delete (fid:%s)',
                'items'    => ['fid'],
                'action'   => 'delete',
                'target'   => 'filter_delete',
            ],
            //カテゴリ内の絞込み全削除
            'filter_delete_all'   => [
                'template' => '[delete] filter_delete_all (cid:%s)',
                'items'    => ['cid',],
                'action'   => 'delete',
                'target'   => 'filter_delete_all',
            ],
            //カテゴリ内の絞込み削除(選択)
            'filter_delete_multi' => [
                'template' => '[delete] filter_delete_multi (fids:%s)',
                'items'    => ['fids'],
                'action'   => 'delete',
                'target'   => 'filter_delete_multi',
            ],
            //順番変更
            'filter_order'        => [
                'template' => '[modify] filter_delete_multi (cid:%s) (fids:%s)',
                'items'    => ['cid', 'fids'],
                'action'   => 'modify',
                'target'   => 'filter_order',
            ],
            //絞込みの有効/無効切り替え
            'filter_activate'     => [
                'template' => '[modify] filter_activate (fid:%s) <%s>',
                'items'    => ['fid', 'active',],
                'action'   => 'modify',
                'target'   => 'filter_activate',
            ],

        ];

        //Set Template List
        parent::__construct($template_list);

        return;
    }


    /** @var self */
    private static $_instance = null;

    /**
     * @return GRN_Report_Filter_Inspection
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Set And Or
     *
     * @param  int $and_or //And Or
     *
     * @return string $inspection_and_or     //Inspection And Or
     */
    function setAndOr($and_or)
    {
        $inspection_and_or = GRN_REPORT_INSPECTION_AND;
        if ($and_or === '1') {
            $inspection_and_or = GRN_REPORT_INSPECTION_OR;
        }

        return $inspection_and_or;
    }
}

/**
 * Report Personal Filter Inspection Class
 *
 * @package grn.report
 * @abstract
 */
class GRN_Report_PersonalFilter_Inspection extends GRN_Report_Inspection_Base
{
    /**
     * Constructor
     *
     */
    function __construct()
    {
        $template_list = [
            //絞込みの追加
            'personal_filter_add'          => [
                'template' => '[create] personal_filter_add (fid:%s) (uid:%s) <%s> <%s>',
                'items'    => ['fid', 'uid', 'name', 'and_or'],
                'action'   => 'create',
                'target'   => 'personal_filter_add',
            ],
            //絞込みの編集
            'personal_filter_modify'       => [
                'template' => '[modify] personal_filter_modify (fid:%s) (uid:%s) <%s> <%s>',
                'items'    => ['fid', 'uid', 'name', 'and_or'],
                'action'   => 'modify',
                'target'   => 'personal_filter_modify',
            ],
            //絞込みのコピー
            'personal_filter_copy'         => [
                'template' => '[create] personal_filter_copy (fids:%s) (uid:%s)',
                'items'    => ['fids', 'uid'],
                'action'   => 'create',
                'target'   => 'personal_filter_copy',
            ],
            //絞込みの削除
            'personal_filter_delete'       => [
                'template' => '[delete] personal_filter_delete (fid:%s) (uid:%s)',
                'items'    => ['fid', 'uid'],
                'action'   => 'delete',
                'target'   => 'personal_filter_delete',
            ],
            //絞込み全削除
            'personal_filter_delete_all'   => [
                'template' => '[delete] personal_filter_delete_all (uid:%s)',
                'items'    => ['uid'],
                'action'   => 'delete',
                'target'   => 'personal_filter_delete_all',
            ],
            //絞込み削除(選択)
            'personal_filter_delete_multi' => [
                'template' => '[delete] personal_filter_delete_multi (fids:%s) (uid:%s)',
                'items'    => ['fids', 'uid'],
                'action'   => 'delete',
                'target'   => 'personal_filter_delete_multi',
            ],
            //順番変更
            'personal_filter_order'        => [
                'template' => '[modify] personal_filter_order (fids:%s) (uid:%s)',
                'items'    => ['fids', 'uid'],
                'action'   => 'modify',
                'target'   => 'personal_filter_order',
            ],
        ];

        //Set Template List
        parent::__construct($template_list);

        return;
    }


    /** @var self */
    private static $_instance = null;

    /**
     * @return GRN_Report_PersonalFilter_Inspection
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Set And Or
     *
     * @param  int $and_or //And Or
     *
     * @return string $inspection_and_or     //Inspection And Or
     */
    function setAndOr($and_or)
    {
        $inspection_and_or = GRN_REPORT_INSPECTION_AND;
        if ($and_or === '1') {
            $inspection_and_or = GRN_REPORT_INSPECTION_OR;
        }

        return $inspection_and_or;
    }
}

/**
 * Report FilterCondition Inspection Class
 *
 * @package grn.report
 * @abstract
 */
class GRN_Report_FilterCondition_Inspection extends GRN_Report_Inspection_Base
{
    /**
     * Constructor
     *
     */
    function __construct()
    {
        $template_list = [
            //絞込み条件の追加
            'filtercondition_add'    => [
                'template' => '[create] filtercondition_add (fid:%s) (cid:%s) <%s> <%s> <%s> <%s>',
                'items'    => [
                    'fid',
                    'cid',
                    'type',
                    'number',
                    'text',
                    'condition'
                ],
                'action'   => 'create',
                'target'   => 'filtercondition_add',
            ],
            //絞込み条件の編集
            'filtercondition_modify' => [
                'template' => '[modify] filtercondition_modify (fid:%s) (cid:%s) <%s> <%s> <%s> <%s>',
                'items'    => [
                    'fid',
                    'cid',
                    'type',
                    'number',
                    'text',
                    'condition'
                ],
                'action'   => 'modify',
                'target'   => 'filtercondition_modify',
            ],
            //絞込み条件の削除
            'filtercondition_delete' => [
                'template' => '[delete] filtercondition_delete (fid:%s) (cid:%s)',
                'items'    => ['fid', 'cid'],
                'action'   => 'delete',
                'target'   => 'filtercondition_delete',
            ],
        ];

        //Set Template List
        parent::__construct($template_list);

        return;
    }


    /** @var self */
    private static $_instance = null;

    /**
     * @return GRN_Report_FilterCondition_Inspection
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Set Filter Type
     *
     * @param  int $filter_type //Filter Type
     *
     * @return string $inspection_filter_type     //Inspection Filter Type
     */
    function setFilterType($filter_type)
    {
        switch ($filter_type) {
            case GRN_REPORT_FILTER_TYPE_FORM_NAME:
                $inspection_filter_type
                    = GRN_REPORT_INSPECTION_FILTER_TYPE_FORM_NAME;
                break;
            case GRN_REPORT_FILTER_TYPE_REPORT_NAME:
                $inspection_filter_type
                    = GRN_REPORT_INSPECTION_FILTER_TYPE_TITLE;
                break;
            case GRN_REPORT_FILTER_TYPE_CREATE_DATE:
                $inspection_filter_type
                    = GRN_REPORT_INSPECTION_FILTER_TYPE_DATE;
                break;
            case GRN_REPORT_FILTER_TYPE_CREATOR:
                $inspection_filter_type
                    = GRN_REPORT_INSPECTION_FILTER_TYPE_CREATOR;
                break;
            case GRN_REPORT_FILTER_TYPE_ITEMDATA:
                $inspection_filter_type
                    = GRN_REPORT_INSPECTION_FILTER_TYPE_ITEM;
                break;
            case GRN_REPORT_FILTER_TYPE_FOLLOW:
                $inspection_filter_type
                    = GRN_REPORT_INSPECTION_FILTER_TYPE_FOLLOW;
                break;
            case GRN_REPORT_FILTER_TYPE_ITEMDATA_DETAIL:
                $inspection_filter_type
                    = GRN_REPORT_INSPECTION_FILTER_TYPE_ITEM_DETAIL;
                break;
            default:
                //shouldn't reach here
                $inspection_filter_type = "";
                break;
        }

        return $inspection_filter_type;
    }


    /**
     * Set Filter Condition
     *
     * @param      $condition
     * @param bool $is_date
     *
     * @return string
     */
    function setCondition($condition, $is_date = false)
    {
        switch ($condition) {
            case GRN_REPORT_FILTER_CONDITION_INCLUDE:
                $inspection_condition
                    = GRN_REPORT_INSPECTION_FILTER_CONDITION_INCLUDE;
                break;
            case GRN_REPORT_FILTER_CONDITION_NOT_INCLUDE:
                $inspection_condition
                    = GRN_REPORT_INSPECTION_FILTER_CONDITION_NOT_INCLUDE;
                break;
            case GRN_REPORT_FILTER_CONDITION_EQUAL:
                $inspection_condition
                    = GRN_REPORT_INSPECTION_FILTER_CONDITION_EQUAL;
                break;
            case GRN_REPORT_FILTER_CONDITION_NOT_EQUAL:
                $inspection_condition
                    = GRN_REPORT_INSPECTION_FILTER_CONDITION_NOT_EQUAL;
                break;
            case GRN_REPORT_FILTER_CONDITION_AFTER:
                $inspection_condition
                    = GRN_REPORT_INSPECTION_FILTER_CONDITION_START;
                break;
            case GRN_REPORT_FILTER_CONDITION_BEFORE:
                $inspection_condition
                    = GRN_REPORT_INSPECTION_FILTER_CONDITION_END;
                break;
            case GRN_REPORT_FILTER_CONDITION_BIGGER:
                $inspection_condition
                    = GRN_REPORT_INSPECTION_FILTER_CONDITION_BIGGER;
                break;
            case GRN_REPORT_FILTER_CONDITION_AND_OVER:
                if ($is_date) {
                    $inspection_condition
                        = GRN_REPORT_INSPECTION_FILTER_CONDITION_AFTER;
                } else {
                    $inspection_condition
                        = GRN_REPORT_INSPECTION_FILTER_CONDITION_AND_OVER;
                }
                break;
            case GRN_REPORT_FILTER_CONDITION_SMALLER:
                $inspection_condition
                    = GRN_REPORT_INSPECTION_FILTER_CONDITION_BEFORE;
                break;
            case GRN_REPORT_FILTER_CONDITION_OR_LESS:
                if ($is_date) {
                    $inspection_condition
                        = GRN_REPORT_INSPECTION_FILTER_CONDITION_BEFORE;
                } else {
                    $inspection_condition
                        = GRN_REPORT_INSPECTION_FILTER_CONDITION_OR_LESS;
                }
                break;
            default:
                //shouldn't reach here
                $inspection_condition = "";
                break;
        }

        return $inspection_condition;
    }
}

/**
 * Report Personal FilterCondition Inspection Class
 *
 * @package grn.report
 * @abstract
 */
class GRN_Report_PersonalFilterCondition_Inspection
    extends GRN_Report_Inspection_Base
{
    /**
     * Constructor
     *
     */
    function __construct()
    {
        $template_list = [
            //絞込み条件の追加
            'personal_filtercondition_add'    => [
                'template' => '[create] personal_filtercondition_add (fid:%s) (cid:%s) (uid:%s) <%s> <%s> <%s> <%s>',
                'items'    => [
                    'fid',
                    'cid',
                    'uid',
                    'type',
                    'number',
                    'text',
                    'condition'
                ],
                'action'   => 'create',
                'target'   => 'personal_filtercondition_add',
            ],
            //絞込み条件の編集
            'personal_filtercondition_modify' => [
                'template' => '[modify] personal_filtercondition_modify (fid:%s) (cid:%s) (uid:%s) <%s> <%s> <%s> <%s>',
                'items'    => [
                    'fid',
                    'cid',
                    'uid',
                    'type',
                    'number',
                    'text',
                    'condition'
                ],
                'action'   => 'modify',
                'target'   => 'personal_filtercondition_modify',
            ],
            //絞込み条件の削除
            'personal_filtercondition_delete' => [
                'template' => '[delete] personal_filtercondition_delete (fid:%s) (cid:%s) (uid:%s)',
                'items'    => ['fid', 'cid', 'uid'],
                'action'   => 'delete',
                'target'   => 'personal_filtercondition_delete',
            ],
        ];

        //Set Template List
        parent::__construct($template_list);

        return;
    }

    /** @var self */
    private static $_instance = null;

    /**
     * @return GRN_Report_PersonalFilterCondition_Inspection
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Set Filter Type
     *
     * @param  int $filter_type //Filter Type
     *
     * @return string $inspection_filter_type     //Inspection Filter Type
     */
    function setFilterType($filter_type)
    {
        switch ($filter_type) {
            case GRN_REPORT_FILTER_TYPE_FORM_NAME:
                $inspection_filter_type
                    = GRN_REPORT_INSPECTION_FILTER_TYPE_FORM_NAME;
                break;
            case GRN_REPORT_FILTER_TYPE_REPORT_NAME:
                $inspection_filter_type
                    = GRN_REPORT_INSPECTION_FILTER_TYPE_TITLE;
                break;
            case GRN_REPORT_FILTER_TYPE_CREATE_DATE:
                $inspection_filter_type
                    = GRN_REPORT_INSPECTION_FILTER_TYPE_DATE;
                break;
            case GRN_REPORT_FILTER_TYPE_CREATOR:
                $inspection_filter_type
                    = GRN_REPORT_INSPECTION_FILTER_TYPE_CREATOR;
                break;
            case GRN_REPORT_FILTER_TYPE_ITEMDATA:
                $inspection_filter_type
                    = GRN_REPORT_INSPECTION_FILTER_TYPE_ITEM;
                break;
            case GRN_REPORT_FILTER_TYPE_FOLLOW:
                $inspection_filter_type
                    = GRN_REPORT_INSPECTION_FILTER_TYPE_FOLLOW;
                break;
            case GRN_REPORT_FILTER_TYPE_ITEMDATA_DETAIL:
                $inspection_filter_type
                    = GRN_REPORT_INSPECTION_FILTER_TYPE_ITEM_DETAIL;
                break;
            default:
                //shouldn't reach here
                $inspection_filter_type = "";
                break;
        }

        return $inspection_filter_type;
    }

    /**
     * Set Filter Condition
     *
     * @param      $condition
     * @param bool $is_date
     *
     * @return string
     */
    function setCondition($condition, $is_date = false)
    {
        switch ($condition) {
            case GRN_REPORT_FILTER_CONDITION_INCLUDE:
                $inspection_condition
                    = GRN_REPORT_INSPECTION_FILTER_CONDITION_INCLUDE;
                break;
            case GRN_REPORT_FILTER_CONDITION_NOT_INCLUDE:
                $inspection_condition
                    = GRN_REPORT_INSPECTION_FILTER_CONDITION_NOT_INCLUDE;
                break;
            case GRN_REPORT_FILTER_CONDITION_EQUAL:
                $inspection_condition
                    = GRN_REPORT_INSPECTION_FILTER_CONDITION_EQUAL;
                break;
            case GRN_REPORT_FILTER_CONDITION_NOT_EQUAL:
                $inspection_condition
                    = GRN_REPORT_INSPECTION_FILTER_CONDITION_NOT_EQUAL;
                break;
            case GRN_REPORT_FILTER_CONDITION_AFTER:
                $inspection_condition
                    = GRN_REPORT_INSPECTION_FILTER_CONDITION_START;
                break;
            case GRN_REPORT_FILTER_CONDITION_BEFORE:
                $inspection_condition
                    = GRN_REPORT_INSPECTION_FILTER_CONDITION_END;
                break;
            case GRN_REPORT_FILTER_CONDITION_BIGGER:
                $inspection_condition
                    = GRN_REPORT_INSPECTION_FILTER_CONDITION_BIGGER;
                break;
            case GRN_REPORT_FILTER_CONDITION_AND_OVER:
                if ($is_date) {
                    $inspection_condition
                        = GRN_REPORT_INSPECTION_FILTER_CONDITION_AFTER;
                } else {
                    $inspection_condition
                        = GRN_REPORT_INSPECTION_FILTER_CONDITION_AND_OVER;
                }
                break;
            case GRN_REPORT_FILTER_CONDITION_SMALLER:
                $inspection_condition
                    = GRN_REPORT_INSPECTION_FILTER_CONDITION_BEFORE;
                break;
            case GRN_REPORT_FILTER_CONDITION_OR_LESS:
                if ($is_date) {
                    $inspection_condition
                        = GRN_REPORT_INSPECTION_FILTER_CONDITION_BEFORE;
                } else {
                    $inspection_condition
                        = GRN_REPORT_INSPECTION_FILTER_CONDITION_OR_LESS;
                }
                break;
            default:
                //shouldn't reach here
                $inspection_condition = "";
                break;
        }

        return $inspection_condition;
    }
}

/**
 * Report Form Layout Inspection Class
 *
 * @package grn.report
 * @abstract
 */
class GRN_Report_Form_Layout_Inspection extends GRN_Report_Inspection_Base
{
    /**
     * Constructor
     *
     */
    function __construct()
    {
        $template_list = [
            //項目の追加(1行テキスト)
            'form_layout_string_single_add'      => [
                'template' => '[create] form_layout_string_single_add (fid:%s) (iid:%s) <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'fid',
                    'iid',
                    'data_type',
                    'display_name',
                    'option_string_type',
                    'option_string',
                    'description_editor',
                    'description',
                    'description_type',
                    'size',
                    'max_input_size',
                    'input_chars',
                    'initial_type',
                    'initial_text_value',
                    'initial_user_value',
                    'required',
                ],
                'action'   => 'create',
                'target'   => 'form_layout_string_single_add',
            ],
            //項目の変更(1行テキスト)
            'form_layout_string_single_modify'   => [
                'template' => '[modify] form_layout_string_single_modify (iid:%s) <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'iid',
                    'data_type',
                    'display_name',
                    'option_string_type',
                    'option_string',
                    'description_editor',
                    'description',
                    'description_type',
                    'size',
                    'max_input_size',
                    'input_chars',
                    'initial_type',
                    'initial_text_value',
                    'initial_user_value',
                    'required',
                ],
                'action'   => 'modify',
                'target'   => 'form_layout_string_single_modify',
            ],
            //項目の追加(複数行)
            'form_layout_string_multiple_add'    => [
                'template' => '[create] form_layout_string_multiple_add (fid:%s) (iid:%s) <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'fid',
                    'iid',
                    'data_type',
                    'display_name',
                    'option_string_type',
                    'option_string',
                    'description_editor',
                    'description',
                    'description_type',
                    'col_size',
                    'row_size',
                    'initial_value',
                    'required',
                ],
                'action'   => 'create',
                'target'   => 'form_layout_string_multiple_add',
            ],
            //項目の変更(複数行)
            'form_layout_string_multiple_modify' => [
                'template' => '[modify] form_layout_string_multiple_modify (iid:%s) <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'iid',
                    'data_type',
                    'display_name',
                    'option_string_type',
                    'option_string',
                    'description_editor',
                    'description',
                    'description_type',
                    'col_size',
                    'row_size',
                    'initial_value',
                    'required',
                ],
                'action'   => 'modify',
                'target'   => 'form_layout_string_multiple_modify',
            ],
            //項目の追加(メニュー)
            'form_layout_menu_string_add'        => [
                'template' => '[create] form_layout_menu_string_add (fid:%s) (iid:%s) <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'fid',
                    'iid',
                    'data_type',
                    'display_name',
                    'option_string_type',
                    'option_string',
                    'description_editor',
                    'description',
                    'description_type',
                    'menu_items',
                    'initial_value',
                    'menu_item_type',
                    'required',
                ],
                'action'   => 'create',
                'target'   => 'form_layout_menu_string_add',
            ],
            //項目の変更(メニュー)
            'form_layout_menu_string_modify'     => [
                'template' => '[modify] form_layout_menu_string_modify (iid:%s) <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'iid',
                    'data_type',
                    'display_name',
                    'option_string_type',
                    'option_string',
                    'description_editor',
                    'description',
                    'description_type',
                    'menu_items',
                    'initial_value',
                    'menu_item_type',
                    'required',
                ],
                'action'   => 'modify',
                'target'   => 'form_layout_menu_string_modify',
            ],
            //項目の追加(ラジオ)
            'form_layout_radio_add'              => [
                'template' => '[create] form_layout_radio_add (fid:%s) (iid:%s) <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'fid',
                    'iid',
                    'data_type',
                    'display_name',
                    'option_string_type',
                    'option_string',
                    'description_editor',
                    'description',
                    'description_type',
                    'radio_items',
                    'initial_value',
                    'required',
                ],
                'action'   => 'create',
                'target'   => 'form_layout_radio_add',
            ],
            //項目の変更(ラジオ)
            'form_layout_radio_modify'           => [
                'template' => '[modify] form_layout_radio_modify (iid:%s) <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'iid',
                    'data_type',
                    'display_name',
                    'option_string_type',
                    'option_string',
                    'description_editor',
                    'description',
                    'description_type',
                    'radio_items',
                    'initial_value',
                    'required',
                ],
                'action'   => 'modify',
                'target'   => 'form_layout_radio_modify',
            ],
            //項目の追加(チェックボックス)
            'form_layout_checkbox_add'           => [
                'template' => '[create] form_layout_checkbox_add (fid:%s) (iid:%s) <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'fid',
                    'iid',
                    'data_type',
                    'display_name',
                    'option_string_type',
                    'option_string',
                    'description_editor',
                    'description',
                    'description_type',
                    'initial_value',
                ],
                'action'   => 'create',
                'target'   => 'form_layout_checkbox_add',
            ],
            //項目の変更(チェックボックス)
            'form_layout_checkbox_modify'        => [
                'template' => '[modify] form_layout_checkbox_modify (iid:%s) <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'iid',
                    'data_type',
                    'display_name',
                    'option_string_type',
                    'option_string',
                    'description_editor',
                    'description',
                    'description_type',
                    'initial_value',
                ],
                'action'   => 'modify',
                'target'   => 'form_layout_checkbox_modify',
            ],
            //項目の追加(数値)
            'form_layout_numeric_add'            => [
                'template' => '[create] form_layout_numeric_add (fid:%s) (iid:%s) <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'fid',
                    'iid',
                    'data_type',
                    'display_name',
                    'option_string_type',
                    'option_string',
                    'description_editor',
                    'description',
                    'description_type',
                    'input_numbers',
                    'initial_value',
                    'effective_figures',
                    'minus_type',
                    'right_align',
                    'split_rank',
                    'max_input_number',
                    'min_input_number',
                    'required',
                ],
                'action'   => 'create',
                'target'   => 'form_layout_numeric_add',
            ],
            //項目の変更(数値)
            'form_layout_numeric_modify'         => [
                'template' => '[modify] form_layout_numeric_modify (iid:%s) <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'iid',
                    'data_type',
                    'display_name',
                    'option_string_type',
                    'option_string',
                    'description_editor',
                    'description',
                    'description_type',
                    'input_numbers',
                    'initial_value',
                    'effective_figures',
                    'minus_type',
                    'right_align',
                    'split_rank',
                    'max_input_number',
                    'min_input_number',
                    'required',
                ],
                'action'   => 'modify',
                'target'   => 'form_layout_numeric_modify',
            ],
            //項目の追加(日付)
            'form_layout_date_add'               => [
                'template' => '[create] form_layout_date_add (fid:%s) (iid:%s) <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'fid',
                    'iid',
                    'data_type',
                    'display_name',
                    'option_string_type',
                    'option_string',
                    'description_editor',
                    'description',
                    'description_type',
                    'initial_type',
                    'initial_year',
                    'initial_month',
                    'initial_day',
                    'required',
                ],
                'action'   => 'create',
                'target'   => 'form_layout_date_add',
            ],
            //項目の変更(日付)
            'form_layout_date_modify'            => [
                'template' => '[modify] form_layout_date_modify (iid:%s) <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'iid',
                    'data_type',
                    'display_name',
                    'option_string_type',
                    'option_string',
                    'description_editor',
                    'description',
                    'description_type',
                    'initial_type',
                    'initial_year',
                    'initial_month',
                    'initial_day',
                    'required',
                ],
                'action'   => 'modify',
                'target'   => 'form_layout_date_modify',
            ],
            //項目の追加(時刻)
            'form_layout_time_add'               => [
                'template' => '[create] form_layout_time_add (fid:%s) (iid:%s) <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'fid',
                    'iid',
                    'data_type',
                    'display_name',
                    'option_string_type',
                    'option_string',
                    'description_editor',
                    'description',
                    'description_type',
                    'unit',
                    'initial_type',
                    'initial_hour',
                    'initial_minute',
                    'required',
                ],
                'action'   => 'create',
                'target'   => 'form_layout_time_add',
            ],
            //項目の変更(時刻)
            'form_layout_time_modify'            => [
                'template' => '[modify] form_layout_time_modify (iid:%s) <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'iid',
                    'data_type',
                    'display_name',
                    'option_string_type',
                    'option_string',
                    'description_editor',
                    'description',
                    'description_type',
                    'initial_type',
                    'initial_hour',
                    'initial_minute',
                    'required',
                ],
                'action'   => 'modify',
                'target'   => 'form_layout_time_modify',
            ],
            //項目の追加(ファイル)
            'form_layout_file_add'               => [
                'template' => '[create] form_layout_file_add (fid:%s) (iid:%s) <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'fid',
                    'iid',
                    'data_type',
                    'display_name',
                    'option_string_type',
                    'option_string',
                    'description_editor',
                    'description',
                    'description_type',
                    'max_files',
                    'inline',
                    'thumbnail',
                    'thumbnail_xsize',
                    'thumbnail_ysize',
                    'required',
                ],
                'action'   => 'create',
                'target'   => 'form_layout_file_add',
            ],
            //項目の変更(ファイル)
            'form_layout_file_modify'            => [
                'template' => '[modify] form_layout_file_modify (iid:%s) <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'iid',
                    'data_type',
                    'display_name',
                    'option_string_type',
                    'option_string',
                    'description_editor',
                    'description',
                    'description_type',
                    'max_files',
                    'inline',
                    'thumbnail',
                    'thumbnail_xsize',
                    'thumbnail_ysize',
                    'required',
                ],
                'action'   => 'modify',
                'target'   => 'form_layout_file_modify',
            ],
            //項目の削除
            'form_layout_delete'                 => [
                'template' => '[delete] form_layout_delete (iid:%s)',
                'items'    => ['iid',],
                'action'   => 'delete',
                'target'   => 'form_layout_delete',
            ],
            //項目の削除(選択)
            'form_layout_delete_multi'           => [
                'template' => '[delete] form_layout_delete_multi (iids:%s)',
                'items'    => ['iids',],
                'action'   => 'delete',
                'target'   => 'form_layout_delete_multi',
            ],
            //項目の削除(全て)
            'form_layout_delete_all'             => [
                'template' => '[delete] form_layout_delete_all (fid:%s)',
                'items'    => ['fid',],
                'action'   => 'delete',
                'target'   => 'form_layout_delete_all',
            ],
            //空行の追加
            'formlayout_blank_add'               => [
                'template' => '[create] formlayout_blank_add (fid:%s) (iid:%s)',
                'items'    => ['fid', 'iid',],
                'action'   => 'create',
                'target'   => 'formlayout_blank_add',
            ],
            //項目の順番変更
            'formlayout_order'                   => [
                'template' => '[modify] formlayout_order (fid:%s) (iids:%s)',
                'items'    => ['fid', 'iids',],
                'action'   => 'modify',
                'target'   => 'formlayout_order',
            ],
            //項目のコピー
            'form_layout_copy'                   => [
                'template' => '[create] form_layout_copy (fid:%s) (iids:%s)',
                'items'    => ['fid', 'iids',],
                'action'   => 'create',
                'target'   => 'form_layout_copy',
            ],
        ];
        //Set Template List
        parent::__construct($template_list);

        return;
    }


    /** @var self */
    private static $_instance = null;

    /**
     * @return GRN_Report_Form_Layout_Inspection
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Set String Single Initial User Value
     *
     * @param  string $key //Initial User Value Key
     *
     * @return string $inspection_initial_user_value  //Inspection Initial User Value
     */
    function setStringSingleInitialUserValue($key)
    {
        $initial_user_value = [
            '%grn.common.uum.user.id%'               => GRN_REPORT_ITEM_STRING_SINGLE_LOGIN_USER_ID,
            '%grn.common.uum.user.display_name%'     => GRN_REPORT_ITEM_STRING_SINGLE_LOGIN_USER_DISPLAY_NAME,
            '%grn.common.uum.user.foreign_key%'      => GRN_REPORT_ITEM_STRING_SINGLE_LOGIN_USER_FOREIGN_KEY,
            '%grn.common.uum.user.sort_key%'         => GRN_REPORT_ITEM_STRING_SINGLE_LOGIN_USER_SORT_KEY,
            '%grn.common.uum.user.email_address%'    => GRN_REPORT_ITEM_STRING_SINGLE_LOGIN_USER_EMAIL_ADDRESS,
            '%grn.common.uum.user.telephone_number%' => GRN_REPORT_ITEM_STRING_SINGLE_LOGIN_USER_TELEPHONE_NUMBER,
            '%grn.common.uum.user.url%'              => GRN_REPORT_ITEM_STRING_SINGLE_LOGIN_USER_URL,
            '%grn.common.uum.user.description%'      => GRN_REPORT_ITEM_STRING_SINGLE_LOGIN_USER_DESCRIPTION,
            '%grn.common.uum.user.userinfo.post%'    => GRN_REPORT_ITEM_STRING_SINGLE_LOGIN_USER_POST,
        ];

        $inspection_initial_user_value = null;
        if (array_key_exists($key, $initial_user_value)) {
            $inspection_initial_user_value = $initial_user_value[$key];
        }

        return $inspection_initial_user_value;
    }

    /**
     * Set String type
     *
     * @param  int $type //Option String Type
     *
     * @return string $inspection_string_type //Inspection Option String Type
     */
    function setStringType($type)
    {
        $inspection_string_type = GRN_REPORT_ITEM_STRING_TYPE_NOT_PLACEMENT;
        if ($type == 1) {
            $inspection_string_type = GRN_REPORT_ITEM_STRING_TYPE_TOP;
        } elseif ($type == 2) {
            $inspection_string_type = GRN_REPORT_ITEM_STRING_TYPE_END;
        }

        return $inspection_string_type;
    }

    /**
     * Set Description Editor
     *
     * @param  int $editor //Description Editor
     *
     * @return string $inspection_description_editor  //Inspection Description Editor
     */
    function setDescriptionEditor($editor)
    {
        $inspection_description_editor
            = GRN_REPORT_ITEM_DESCRIPTION_EDITOR_TYPE_TEXT;
        if ($editor == 1) {
            $inspection_description_editor
                = GRN_REPORT_ITEM_DESCRIPTION_EDITOR_TYPE_EDIT;
        }

        return $inspection_description_editor;
    }

    /**
     * Set Description Type
     *
     * @param  int $description_type //Description Type
     *
     * @return string $inspection_description_type  //Inspection Description Type
     */
    function setDescriptionType($description_type)
    {
        $inspection_description_type
            = GRN_REPORT_ITEM_DESCRIPTION_NOT_ICON_TYPE;
        if ($description_type == 1) {
            $inspection_description_type
                = GRN_REPORT_ITEM_DESCRIPTION_ICON_TYPE;
        }

        return $inspection_description_type;
    }

    /**
     * Set Required
     *
     * @param  int $required //Required
     *
     * @return string $br          //Inspection Required
     */
    function setRequired($required)
    {
        $inspection_required = GRN_REPORT_ITEM_NOT_REQUIRED;
        if ($required == 1) {
            $inspection_required = GRN_REPORT_ITEM_REQUIRED;
        }

        return $inspection_required;
    }

    /**
     * Set Br
     *
     * @param  int $br //Br
     *
     * @return string $inspection_br //Inspection Br
     */
    function setBr($br)
    {
        $inspection_br = GRN_REPORT_ITEM_NOT_BR;
        if ($br == 0) {
            $inspection_br = GRN_REPORT_ITEM_BR;
        }

        return $inspection_br;
    }
}

/**
 * Report Category Accesses Inspection Class
 *
 * @package grn.report
 * @abstract
 */
class GRN_Report_Category_Accesses_Inspection extends GRN_Report_Inspection_Base
{
    /**
     * Constructor
     *
     */
    function __construct()
    {
        $template_list = [

            //セキュリティモデルの変更
            'access_model_modify'      => [
                'template' => '[modify] access_model_modify (cid:%s) <%s>',
                'items'    => ['cid', 'security_model',],
                'action'   => 'modify',
                'target'   => 'access_model_modify',
            ],
            //アクセス権の追加
            'access_add'               => [
                'template' => '[create] access_add (cid:%s) (uids:%s) (gids:%s) (srids:%s) (drids:%s) <%s> <%s>',
                'items'    => [
                    'cid',
                    'uids',
                    'gids',
                    'srids',
                    'drids',
                    'security_model',
                    'authority',
                ],
                'action'   => 'create',
                'target'   => 'access_add',
            ],
            //アクセス権の一括削除
            'access_delete_multi'      => [
                'template' => '[delete] access_delete_multi (cid:%s) (uids:%s) (gids:%s) (srids:%s) (drids:%s)',
                'items'    => ['cid', 'uids', 'gids', 'srids', 'drids',],
                'action'   => 'delete',
                'target'   => 'access_delete_multi',
            ],
            //アクセス権の全削除
            'access_delete_all'        => [
                'template' => '[delete] access_delete_all (cid:%s)',
                'items'    => ['cid',],
                'action'   => 'delete',
                'target'   => 'access_delete_all',
            ],
            //アクセス権の書き出し
            'category_accesses_export' => [
                'template' => '[export] category_accesses_export',
                'items'    => [],
                'action'   => 'export',
                'target'   => 'category_accesses_export',
            ],
            //アクセス権の読み込み
            'category_accesses_import' => [
                'template' => '[import] category_accesses_import <%s> <%s> <%s> <%s>',
                'items'    => ['foreign_key', 'item', 'value', 'name',],
                'action'   => 'import',
                'target'   => 'category_accesses_import',
            ],
        ];
        //Set Template List
        parent::__construct($template_list);

        return;
    }


    /** @var self */
    private static $_instance = null;

    /**
     * @return GRN_Report_Category_Accesses_Inspection
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }
}

/**
 * Report Report Inspection Class
 *
 * @package grn.report
 * @abstract
 */
class GRN_Report_Report_Inspection extends GRN_Report_Inspection_Base
{
    /**
     * Constructor
     *
     */
    function __construct()
    {
        $template_list = [
            //報告書追加
            'report_add'           => [
                'template' => '[create] report_add (rid:%s) (fid:%s) <%s> <%s> <%s> <%s>',
                'items'    => [
                    'rid',
                    'fid',
                    'name',
                    'subject',
                    'private',
                    'maintainer',
                ],
                'action'   => 'create',
                'target'   => 'report_add',
            ],
            //下書き追加
            'report_draft_add'     => [
                'template' => '[create] report_draft_add (rid:%s) (fid:%s) <%s> <%s> <%s>',
                'items'    => ['rid', 'fid', 'name', 'subject', 'private',],
                'action'   => 'create',
                'target'   => 'report_draft_add',
            ],
            //下書き->下書き
            'report_draft_modify'  => [
                'template' => '[modify] report_draft_modify (rid:%s) (fid:%s) <%s> <%s> <%s>',
                'items'    => ['rid', 'fid', 'name', 'subject', 'private',],
                'action'   => 'modify',
                'target'   => 'report_draft_modify',
            ],
            //下書き->削除
            'report_draft_delete'  => [
                'template' => '[delete] report_draft_delete (rid:%s)',
                'items'    => ['rid',],
                'action'   => 'delete',
                'target'   => 'report_draft_delete',
            ],
            //再利用->作成
            'report_reuse'         => [
                'template' => '[create] report_reuse (rid:%s) (fid:%s) <%s> <%s> <%s> <%s>',
                'items'    => [
                    'rid',
                    'fid',
                    'name',
                    'subject',
                    'private',
                    'maintainer',
                ],
                'action'   => 'create',
                'target'   => 'report_reuse',
            ],
            //再利用->下書き
            'report_reuse_draft'   => [
                'template' => '[create] report_reuse_draft (rid:%s) (fid:%s) <%s> <%s>',
                'items'    => ['rid', 'fid', 'name', 'subject',],
                'action'   => 'create',
                'target'   => 'report_reuse_draft',
            ],
            //報告書の変更
            'report_modify'        => [
                'template' => '[modify] report_modify (rid:%s) (fid:%s) <%s> <%s> <%s> <%s>',
                'items'    => [
                    'rid',
                    'fid',
                    'name',
                    'subject',
                    'private',
                    'maintainer',
                ],
                'action'   => 'modify',
                'target'   => 'report_modify',
            ],
            //報告書の削除
            'report_delete'        => [
                'template' => '[delete] report_delete (rid:%s)',
                'items'    => ['rid',],
                'action'   => 'delete',
                'target'   => 'report_delete',
            ],
            //報告書の一括削除
            'report_delete_multi'  => [
                'template' => '[delete] report_delete_multi (rids:%s)',
                'items'    => ['rids',],
                'action'   => 'delete',
                'target'   => 'report_delete_multi',
            ],
            //報告書の全削除
            'report_delete_all'    => [
                'template' => '[delete] report_delete_all (fid:%s)',
                'items'    => ['fid',],
                'action'   => 'delete',
                'target'   => 'report_delete_all',
            ],
            //報告書の閲覧
            'report_browse'        => [
                'template' => '[browse] report_browse (rid:%s) (uid:%s)',
                'items'    => ['rid', 'uid',],
                'action'   => 'browse',
                'target'   => 'report_browse',
            ],
            //ファイル添付項目ダウンロード
            'report_download'      => [
                '[download] report_download (rid:%s) (file_id:%s)',
                'items'  => ['rid', 'file_id',],
                'action' => 'download',
                'target' => 'report_download',
            ],
            //フォロー書き込み
            'follow_add'           => [
                'template' => '[create] follow_add (rid:%s) (follow_id:%s) (uid:%s)',
                'items'    => ['rid', 'follow_id', 'uid',],
                'action'   => 'create',
                'target'   => 'follow_add',
            ],
            //フォロー削除
            'follow_delete'        => [
                'template' => '[delete] follow_delete (rid:%s) (follow_id:%s)',
                'items'    => ['rid', 'follow_id',],
                'action'   => 'delete',
                'target'   => 'follow_delete',
            ],
            //フォローファイル添付
            'follow_file_add'      => [
                'template' => '[create] follow_file_add (rid:%s) (follow_id:%s) (file_id:%s)',
                'items'    => ['rid', 'follow_id', 'file_id',],
                'action'   => 'create',
                'target'   => 'follow_file_add',
            ],
            //フォローファイル削除
            'follow_file_delete'   => [
                'template' => '[delete] follow_file_delete (rid:%s) (follow_id:%s) (file_id:%s)',
                'items'    => ['rid', 'follow_id', 'file_id',],
                'action'   => 'delete',
                'target'   => 'follow_file_delete',
            ],
            //フォローファイルダウンロード
            'follow_file_download' => [
                'template' => '[download] follow_file_download (rid:%s) (follow_id:%s) (file_id:%s) <%s> <%s>',
                'items'    => [
                    'rid',
                    'follow_id',
                    'file_id',
                    'version',
                    'name',
                ],
                'action'   => 'download',
                'target'   => 'follow_file_download',
            ],
        ];
        //Set Template List
        parent::__construct($template_list);

        return;
    }

    /** @var self */
    private static $_instance = null;

    /**
     * @return GRN_Report_Report_Inspection
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Set Private
     *
     * @param  int $private //Private
     *
     * @return string $inspection_private     //Inspection Private
     */
    function setPrivate($private)
    {
        $inspection_private = GRN_REPORT_INSPECTION_PUBLIC;
        if ($private === '1') {
            $inspection_private = GRN_REPORT_INSPECTION_PRIVATE;
        }

        return $inspection_private;
    }
}

/**
 * Report Follow Inspection Class
 *
 * @package grn.report
 * @abstract
 */
class GRN_Report_Follow_Inspection extends GRN_Report_Inspection_Base
{
    /**
     * Constructor
     *
     */
    function __construct()
    {
        $template_list = [
            //フォロー書き込み
            'follow_add'           => [
                'template' => '[create] follow_add (rid:%s) (follow_id:%s) (uid:%s)',
                'items'    => ['rid', 'follow_id', 'uid',],
                'action'   => 'create',
                'target'   => 'follow_add',
            ],
            //フォロー削除
            'follow_delete'        => [
                'template' => '[delete] follow_delete (rid:%s) (follow_id:%s)',
                'items'    => ['rid', 'follow_id',],
                'action'   => 'delete',
                'target'   => 'follow_delete',
            ],
            //フォローファイル添付
            'follow_file_add'      => [
                'template' => '[create] follow_file_add (rid:%s) (follow_id:%s) (file_id:%s)',
                'items'    => ['rid', 'follow_id', 'file_id',],
                'action'   => 'create',
                'target'   => 'follow_file_add',
            ],
            //フォローファイル削除
            'follow_file_delete'   => [
                'template' => '[delete] follow_file_delete (rid:%s) (follow_id:%s) (file_id:%s)',
                'items'    => ['rid', 'follow_id', 'file_id',],
                'action'   => 'delete',
                'target'   => 'follow_file_delete',
            ],
            //フォローファイルダウンロード
            'follow_file_download' => [
                'template' => '[download] follow_file_download (rid:%s) (follow_id:%s) (file_id:%s) <%s> <%s>',
                'items'    => [
                    'rid',
                    'follow_id',
                    'file_id',
                    'version',
                    'name',
                ],
                'action'   => 'download',
                'target'   => 'follow_file_download',
            ],
        ];
        //Set Template List
        parent::__construct($template_list);

        return;
    }


    /** @var self */
    private static $_instance = null;

    /**
     * @return GRN_Report_Follow_Inspection
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }
}

/**
 * Report Category Manage Inspection Class
 *
 * @package grn.report
 * @abstract
 */
class GRN_Report_Category_Manage_Inspection extends GRN_Report_Inspection_Base
{
    /**
     * Constructor
     *
     */
    function __construct()
    {
        $template_list = [
            //運用管理権限の追加
            'privilege_add'          => [
                'template' => '[create] privilege_add (uids:%s) (gids:%s) (srids:%s) (drids:%s)',
                'items'    => ['uids', 'gids', 'srids', 'drids',],
                'action'   => 'create',
                'target'   => 'privilege_add',
            ],
            //運用管理権限の削除
            'privilege_delete'       => [
                'template' => '[delete] privilege_delete (cids:%s) (tids:%s) <%s>',
                'items'    => ['cids', 'tids', 'target_types',],
                'action'   => 'delete',
                'target'   => 'privilege_delete',
            ],
            //運用管理権限の一括削除
            'privilege_delete_multi' => [
                'template' => '[delete] privilege_delete_multi (cid:%s) (uids:%s) (gids:%s) (srids:%s) (drids:%s)',
                'items'    => ['cid', 'uids', 'gids', 'srids', 'drids'],
                'action'   => 'delete',
                'target'   => 'privilege_delete_multi',
            ],
            //運用管理権限の全削除
            'privilege_delete_all'   => [
                'template' => '[delete] privilege_delete_all (cid:%s)',
                'items'    => ['cid',],
                'action'   => 'delete',
                'target'   => 'privilege_delete_all',
            ],
        ];
        //Set Template List
        parent::__construct($template_list);

        return;
    }


    /** @var self */
    private static $_instance = null;

    /**
     * @return GRN_Report_Category_Manage_Inspection
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }
}

/**
 * Report Availability User Inspection Class
 *
 * @package grn.report
 * @abstract
 */
class GRN_Report_Availability_User_Inspection extends GRN_Report_Inspection_Base
{
    /**
     * Constructor
     *
     */
    function __construct()
    {
        $template_list = [
            //利用ユーザーの追加
            'availability_user_add'          => [
                'template' => '[create] availability_user_add (uids:%s) <%s> <%s>',
                'items'    => ['uids', 'authority_cellular', 'ctime',],
                'action'   => 'create',
                'target'   => 'availability_user_add',
            ],
            //利用ユーザーの変更
            'availability_user_modify'       => [
                'template' => '[modify] availability_user_modify (uids:%s) <%s>',
                'items'    => ['uids', 'authority_cellular',],
                'action'   => 'modify',
                'target'   => 'availability_user_modify',
            ],
            //利用ユーザーの削除
            'availability_user_delete'       => [
                'template' => '[delete] availability_user_delete (uids:%s)',
                'items'    => ['uids',],
                'action'   => 'delete',
                'target'   => 'availability_user_delete',
            ],
            //利用ユーザーの一括削除
            'availability_user_delete_multi' => [
                'template' => '[delete] availability_user_delete_multi (uids:%s)',
                'items'    => ['uids',],
                'action'   => 'delete',
                'target'   => 'availability_user_delete_multi',
            ],
            //利用ユーザーの全削除
            'availability_user_delete_all'   => [
                'template' => '[delete] availability_user_delete_all',
                'items'    => [],
                'action'   => 'delete',
                'target'   => 'availability_user_delete_all',
            ],
            //利用ユーザーの書き出し
            'availability_user_export'       => [
                'template' => '[export] availability_user_export',
                'items'    => [],
                'action'   => 'export',
                'target'   => 'availability_user_export',
            ],
            //利用ユーザーの読み込み
            'availability_user_import'       => [
                'template' => '[import] availability_user_import (foreign_key:%s) <%s>',
                'items'    => ['foreign_key', 'name'],
                'action'   => 'import',
                'target'   => 'availability_user_import',
            ],
        ];
        //Set Template List
        parent::__construct($template_list);

        return;
    }


    /** @var self */
    private static $_instance = null;

    /**
     * @return GRN_Report_Availability_User_Inspection
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Set setAuthorityCellular
     *
     * @param  int $authority_cellular //Authority Cellular
     *
     * @return string $inspection_authority_cellular     //Inspection Authority Cellular
     */
    function setAuthorityCellular($authority_cellular)
    {
        $inspection_authority_cellular = GRN_REPORT_INSPECTION_FLAG_OFF;
        if ($authority_cellular === '1') {
            $inspection_authority_cellular = GRN_REPORT_INSPECTION_FLAG_ON;
        }

        return $inspection_authority_cellular;
    }
}

/**
 * Report Config Inspection Class
 *
 * @package grn.report
 * @abstract
 */
class GRN_Report_Config_Inspection extends GRN_Report_Inspection_Base
{
    /**
     * Constructor
     *
     */
    function __construct()
    {
        $template_list = [
            //ログインURLの設定（ケータイの設定）
            'set_login_url' => [
                'template' => '[config] set_login_url <%s>',
                'items'    => ['login_url',],
                'action'   => 'config',
                'target'   => 'set_login_url',
            ],
            //アカウントの設定（個人設定）
            'account'       => [
                'template' => '[config] account <%s> <%s>',
                'items'    => ['cellular_address', 'suspension',],
                'action'   => 'config',
                'target'   => 'account',
            ],
            //ログインURLの送信（個人設定）
            'send_url'      => [
                'template' => '[config] send_url <%s>',
                'items'    => ['cellular_address',],
                'action'   => 'config',
                'target'   => 'send_url',
            ],
        ];
        //Set Template List
        parent::__construct($template_list);

        return;
    }

    /** @var self */
    private static $_instance = null;

    /**
     * @return GRN_Report_Config_Inspection
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }
}

/**
 * Report Portlet Inspection Class
 *
 * @package grn.report
 * @abstract
 */
class GRN_Report_Portlet_Inspection extends GRN_Report_Inspection_Base
{
    /**
     * Constructor
     *
     */
    function __construct()
    {
        $template_list = [
            //ポートレットの設定
            'portlet_set' => [
                'template' => '[config] portlet_set <%s> <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'display',
                    'fid',
                    'font_size',
                    'creator',
                    'mtime',
                    'rows',
                ],
                'action'   => 'config',
                'target'   => 'portlet_set',
            ],
        ];
        //Set Template List
        parent::__construct($template_list);

        return;
    }

    /**
     * @var self
     */
    private static $_instance = null;

    /**
     * @return GRN_Report_Portlet_Inspection
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }
}


/**
 * Link Application Inspection Base Class
 *
 * @package grn.report
 * @abstract
 */
class GRN_Report_Inspection_Base
{
    /** Module ID **/
    var $_module_id = 'grn.report';

    /** Inspacetion Message Template List **/
    var $_template_list = null;

    /**
     * Constructor
     *
     */
    function __construct(&$template_list)
    {
        //Set Template List
        $this->_template_list =& $template_list;

        return;
    }

    /**
     * Record Inspection Message
     *
     * @param  string $message_type //Inspaction Message Type
     * @param  array  $message_args //Inspaction Message Argument List
     * @param  string $threshold    //logger category
     *
     * @return bool   $result                     //Result
     */
    function record($message_type, $message_args = [], $threshold = 'notice')
    {
        //Get Inspaction Message Template
        if ( ! array_key_exists($message_type, $this->_template_list)) {
            return false;
        }

        $message_template =& $this->_template_list[$message_type];

        //Create Inspection Massage Template Arg List
        $message_template_args = [];
        $message_template_items =& $message_template['items'];
        $message_action = $message_template['action'];
        $message_target = $message_template['target'];

        foreach ($message_template_items as $message_template_item) {
            $value = $message_args[$message_template_item];
            if (is_array($value)) {
                $array_value = [];
                $i = 1;
                foreach ($value as $v) {
                    $v = "'" . mb_substr(addslashes($v), 0, 100)
                         . "'";
                    $v = $message_template_item . '_' . $i . ':'
                         . $v;
                    $array_value[] = $v;
                    $i++;
                }
                $value = implode(',', array_values($array_value));
            } elseif ( ! is_numeric($value)) {
                $value = "'" . mb_substr(addslashes($value), 0, 100) . "'";
                $value = $message_template_item . ':' . $value;
            } else {
                $value = $message_template_item . ':' . $value;
            }
            $message_template_args[] = $value;
        }
        //Create Inspection Message
        $message = '';
        $message .= '[' . $message_action . '] ';
        $message .= $message_target . ' ';
        if (0 < count($message_template_args)) {
            $message .= ' (' . implode(', ', $message_template_args) . ')';
        }

        require_once('grn/logger.csp');
        $logger_manager = CB_LoggerManager::getInstance();
        $logger = $logger_manager->getLogger($this->_module_id);
        //Write Inspection Message
        switch ($threshold) {
            case 'notice':
                $logger->noticeEx($message_action, $message_target, $message);
                break;
            case 'info':
                $logger->infoEx($message_action, $message_target, $message);
                break;
            default:
                $logger->noticeEx($message_action, $message_target, $message);
                break;
        }

        //Return Result
        return true;
    }

    /**
     * Check Enable Inspection Message
     *
     * @param  string $threshold //logger category
     *
     * @return bool   $result                     //Enable/Disable Inspection Message
     */
    function isEnabled($threshold = 'notice')
    {
        require_once('grn/logger.csp');
        $logger_manager = CB_LoggerManager::getInstance();
        $logger = $logger_manager->getLogger($this->_module_id);

        //Check Threshold
        $result = false;
        switch ($threshold) {
            case 'critical':
                $result = $logger->isCriticalEnabled();
                break;
            case 'error':
                $result = $logger->isErrorEnabled();
                break;
            case 'warning':
                $result = $logger->isWarningEnabled();
                break;
            case 'notice':
                $result = $logger->isNoticeEnabled();
                break;
            case 'debug':
                $result = $logger->isDebugEnabled();
                break;
            default:
                $result = false;
                break;
        }

        //Return Result
        return $result;
    }

    /**
     * Set Flag
     *
     * @param  int $flag //Flag
     *
     * @return string $inspection_flag    //Inspection Flag
     */
    function setFlag($flag)
    {
        $inspection_flag = GRN_REPORT_INSPECTION_FLAG_OFF;
        if ($flag == 1) {
            $inspection_flag = GRN_REPORT_INSPECTION_FLAG_ON;
        }

        return $inspection_flag;
    }
}

class GRN_Report_Category_Local_Inspection extends GRN_Report_Inspection_Base
{
    var $_logger = null;

    /**
     * Constructor
     *
     */
    public function __construct()
    {
        $template_list = [
            'category_local_add'           => [
                'action' => 'create',
                'target' => 'category_local',
            ],
            'category_local_modify'        => [
                'action' => 'modify',
                'target' => 'category_local',
            ],
            'category_local_delete'        => [
                'action' => 'delete',
                'target' => 'category_local',
            ],
            'category_local_add_import'    => [
                'action' => 'import',
                'target' => 'category_local',
            ],
            'category_local_modify_import' => [
                'action' => 'import',
                'target' => 'category_local',
            ],
            'category_local_delete_import' => [
                'action' => 'import_delete',
                'target' => 'category_local',
            ],
            'category_local_export'        => [
                'action' => 'export',
                'target' => 'category_local',
            ],
        ];

        require_once('grn/logger.csp');
        $logger_manager = CB_LoggerManager::getInstance();
        $this->_logger = &$logger_manager->getLogger($this->_module_id);

        //Set Template List
        parent::__construct($template_list);
    }

    /** @var self */
    private static $_instance = null;

    /**
     * @return GRN_Report_Category_Local_Inspection
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Record Inspection Message
     *
     * @param  string $message_type //Inspaction Message Type
     * @param  array  $message_args //Inspaction Message Argument List
     * @param  string $threshold    //logger category
     *
     * @return bool   $result                     //Result
     */
    function record($message_type, $message_args = [], $threshold = 'notice')
    {
        //Get Inspaction Message Template
        if ( ! array_key_exists($message_type, $this->_template_list)) {
            return false;
        }
        $message_template = $this->_template_list[$message_type];

        $message_action = $message_template['action'];
        $message_target = $message_template['target'];

        $this->_logger->noticeEx($message_action, $message_target,
            $message_args);

        //Return Result
        return true;
    }
}

