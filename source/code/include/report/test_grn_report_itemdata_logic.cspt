<?php

require_once('developer/azunit.csp');
require_once('report/itemdata_logic.csp');
require_once('report/itemdata_manager_base.csp');

class test_grn_report_itemdata_logic extends CB_TestCase
{
    /** database **/
    var $_database = null;

    /** table_name **/
    var $_report_table_name = null;
    var $_item_table_name = null;
    var $_item_data_table_name = null;
    var $_item_data_file_table_name = null;

    /** Test Target List **/
    var $_form_list = null;
    var $_report_list = null;
    var $_item_list = null;
    var $_item_data_list = null;
    var $_item_data_file_list = null;

    /** Unique key **/
    var $_unique_key = null;

    /** Basic Value List **/
    var $_form_value_list = [];
    var $_report_value_list = [];
    var $_item_data_value_list = [];
    var $_item_data_file_value_list = [];

    /**
     * Constructor
     *
     * @access private
     *
     * @param string $test_method //Test Method Name
     */
    function test_grn_report_itemdata_logic($test_method)
    {
        //Initialize Parent Class
        parent::CB_TestCase($test_method);

        //Initalize Randam Key
        mt_srand(time());

        //Initialize Unique Key
        $this->_unique_key = $test_method . time();

        //Get Database Connection
        global $G_container_base;
        $this->_database =& $G_container_base->getInstance('dbconn');

        //Set table name
        $this->_form_table_name = 'tab_grn_report_form';
        $this->_item_table_name = 'tab_grn_report_item';
        $this->_report_table_name = 'tab_grn_report_report';
        $this->_item_data_table_name = 'tab_grn_report_itemdata';
        $this->_item_data_file_table_name = 'tab_grn_report_itemdatafile';

        //Set Basic Value List
        $this->_form_value_list = [
            'col_name'        => 'name_',
            'col_foreign_key' => 'foreign_key_',
            'col_type'        => '',
            'col_memo'        => 'memo_',
            'col_active'      => '',
            'col_list_index'  => '',
        ];
        $this->_item_value_list = [
            'col_foreign_key' => 'grn.report.string_single',
            'col_list_index'  => '',
        ];
        $this->_report_value_list = [
            'col_name'                => 'name_',
            'col_creator'             => '',
            'col_creator_name'        => '',
            'col_creator_foreign_key' => '',
            'col_form'                => '',
            'col_form_name'           => 'form_name',
            'col_form_foreign_key'    => 'form_foreign_key',
        ];

        $this->_item_data_value_list = [
            'col_report'             => '',
            'col_number'             => '',
            'col_text'               => 'text_',
            'col_ctime'              => '',
            'col_display_name'       => 'display_name_',
            'col_option_string'      => 'option_string',
            'col_option_string_type' => '',
            'col_description'        => 'description_',
            'col_foreign_key'        => 'foreign_key_',
            'col_description_type'   => '',
            'col_description_editor' => '',
            'col_settings'           => 'settings_',
            'col_required'           => '',
            'col_foreign_key'        => 'grn.report.string_single',
        ];

        $this->_item_data_file_value_list = [
            'col_item_data' => '',
            'col_file'      => '',
        ];

        return;
    }

    /**
     * Initialize Test
     *
     * @access private
     */
    function _initialize()
    {
        //Get Unique Key
        $unique_key = $this->_unique_key;

        //Create Test Form
        $this->_createForm($unique_key);

        //Create Test Item
        $this->_createItem($unique_key);

        //Create Test Form Layout
        //$this->_createFormLayout($unique_key);

        //Create Test Petition
        $this->_createPetition($unique_key);

        //Create Test Item Data
        $this->_createItemData($unique_key);

        //Create Test Item Data File
        //$this->_createItemDataFile($unique_key);

        return;
    }

    /**
     * finalize Test
     *
     * @access private
     */
    function _finalize()
    {
        //Delete Test Item Data File
        $this->_deleteItemDataFile();

        //Delete Test Item Data
        $this->_deleteItemData();

        //Delete Test Petition
        $this->_deletePetition();

        //Delete Test Item
        $this->_deleteItem();

        //Delete Test Form
        $this->_deleteForm();

        return;
    }

    /**
     * Create Form
     *
     * @access private
     *
     * @param string $unique_key //Unique key
     */
    function _createForm($unique_key)
    {
        for ($i = 0; $i < 5; $i++) {
            //Create Query
            $form_value_list = [];
            foreach ($this->_form_value_list as $key => $value) {
                if (strlen($value) > 0) {
                    $form_value_list[$key] = cb_queryf($this->_database,
                        '"@S@S"', $value, $i);
                } elseif ($key == 'col_type') {
                    $value = $i % 2;
                    $form_value_list[$key] = cb_queryf($this->_database, '"@S"',
                        $value);
                } else {
                    $form_value_list[$key] = cb_queryf($this->_database, '"@S"',
                        $i);
                }
            }
            $column_string = implode(',', array_keys($form_value_list));
            $value_string = implode(',', $form_value_list);
            $query = sprintf('INSERT %s(%s) VALUES (%s)',
                $this->_form_table_name, $column_string, $value_string);

            //Execute Query
            $result = $this->_database->query($query);
            if ($result === false) {
                //Throw Query Error
                $this->_database->throwError([
                    'query' => 'query failed: ' . $query
                ]);
            }

            //Add Cache
            $form_id = $this->_database->get_insert_id();
            foreach (array_keys($form_value_list) as $key) {
                $this->_form_list[$form_id][$key] = mb_ereg_replace('"', '',
                    $form_value_list[$key]);
            }
        }

        return;
    }

    /**
     * Delete Form
     *
     * @access private
     *
     * @param string $unique_key //Unique key
     */
    function _deleteForm()
    {
        //Check Petition Count
        if (count($this->_form_list) == 0) {
            return true;
        }

        //Create Query
        $where_string = cb_queryf($this->_database, '_id IN (@S)',
            implode(',', array_keys($this->_form_list)));
        $query = sprintf('DELETE FROM %s WHERE %s',
            $this->_form_table_name, $where_string);

        //Execute Query
        $result = $this->_database->query($query);
        if ($result === false) {
            //Throw Query Error
            $this->_database->throwError([
                'query' => 'query failed: ' . $query
            ]);
        }

        //Delete Cache
        $this->_form_list = [];

        return;
    }


    /**
     * Create Item
     *
     * @access private
     *
     * @param string $unique_key //Unique key
     */
    function _createItem($unique_key)
    {
        for ($i = 0; $i < 5; $i++) {
            //Create Query
            $item_value_list = [];
            foreach ($this->_item_value_list as $key => $value) {
                switch ($key) {
                    case 'col_foreign_key':
                        $item_value_list[$key] = cb_queryf($this->_database,
                            '"@S"', $value);
                        break;
                    default:
                        if (strlen($value) > 0) {
                            $item_value_list[$key] = cb_queryf($this->_database,
                                '"@S@S"', $value, $i);
                        } else {
                            $item_value_list[$key] = cb_queryf($this->_database,
                                '"@S"', $i);
                        }
                        break;
                }
            }
            $column_string = implode(',', array_keys($item_value_list));
            $value_string = implode(',', $item_value_list);
            $query = sprintf('INSERT %s(%s) VALUES (%s)',
                $this->_item_table_name, $column_string, $value_string);

            //Execute Query
            $result = $this->_database->query($query);
            if ($result === false) {
                //Throw Query Error
                $this->_database->throwError([
                    'query' => 'query failed: ' . $query
                ]);
            }

            //Add Cache
            $item_id = $this->_database->get_insert_id();
            foreach (array_keys($item_value_list) as $key) {
                $this->_item_list[$item_id][$key] = mb_ereg_replace('"', '',
                    $item_value_list[$key]);
            }
        }

        return;
    }

    /**
     * Delete Item
     *
     * @access private
     *
     * @param string $unique_key //Unique key
     */
    function _deleteItem()
    {
        if (count($this->_item_list) === 0) {
            return;
        }
        //Create Query
        $where_string = cb_queryf($this->_database, '_id IN (@S)',
            implode(',', array_keys($this->_item_list)));
        $query = sprintf('DELETE FROM %s WHERE %s',
            $this->_item_table_name, $where_string);

        //Execute Query
        $result = $this->_database->query($query);
        if ($result === false) {
            //Throw Query Error
            $this->_database->throwError([
                'query' => 'query failed: ' . $query
            ]);
        }

        //Delete Cache
        $this->_item_list = [];

        return;
    }

    /**
     * Create Petition
     *
     * @access private
     *
     * @param string $unique_key //Unique key
     */
    function _createPetition($unique_key)
    {
        $i = 0;
        foreach (array_keys($this->_form_list) as $form_id) {
            //Create Query
            $report_value_list = [];
            foreach ($this->_report_value_list as $key => $value) {
                switch ($key) {
                    case 'col_form':
                        $report_value_list[$key] = cb_queryf($this->_database,
                            '"@S"', $form_id);
                        break;
                    case 'col_form_name':
                        $report_value_list[$key] = cb_queryf($this->_database,
                            '"@S"', $this->_form_list[$form_id]['col_name']);
                        break;
                    case 'col_form_foreign_key':
                        $report_value_list[$key] = cb_queryf($this->_database,
                            '"@S"',
                            $this->_form_list[$form_id]['col_foreign_key']);
                        break;
                    case 'col_creator':
                        $report_value_list[$key] = cb_queryf($this->_database,
                            '"@S"', 1);
                        break;
                    case 'col_creator_name':
                        $report_value_list[$key] = cb_queryf($this->_database,
                            '"@S"', "Administrator");
                        break;
                    case 'col_creator_foreign_key':
                        $report_value_list[$key] = cb_queryf($this->_database,
                            '"@S"', "Administrator");
                        break;
                    default:
                        if (strlen($value) > 0) {
                            $report_value_list[$key]
                                = cb_queryf($this->_database, '"@S@S"', $value,
                                $i);
                        } else {
                            $report_value_list[$key]
                                = cb_queryf($this->_database, '"@S"', $i);
                        }
                        break;
                }
            }
            $column_string = implode(',', array_keys($report_value_list));
            $value_string = implode(',', $report_value_list);
            $query = sprintf('INSERT %s(%s) VALUES (%s)',
                $this->_report_table_name, $column_string, $value_string);

            //Execute Query
            $result = $this->_database->query($query);
            if ($result === false) {
                //Throw Query Error
                $this->_database->throwError([
                    'query' => 'query failed: ' . $query
                ]);
            }

            //Add Cache
            $report_id = $this->_database->get_insert_id();
            foreach (array_keys($report_value_list) as $key) {
                $this->_report_list[$form_id][$report_id][$key]
                    = mb_ereg_replace('"', '', $report_value_list[$key]);
            }

            $i++;
        }

        return;
    }

    /**
     * Delete Petition
     *
     * @access private
     *
     * @param string $unique_key //Unique key
     */
    function _deletePetition()
    {
        //Check Form Count
        if (count($this->_report_list) == 0) {
            return true;
        }

        //Delete All Item Data
        foreach (array_keys($this->_report_list) as $form_id) {
            //Check Item Count
            if (count($this->_report_list[$form_id]) == 0) {
                continue;
            }

            //Create Query
            $where_string = cb_queryf($this->_database, '_id IN (@S)',
                implode(',', array_keys($this->_form_list)));
            $query = sprintf('DELETE FROM %s WHERE %s',
                $this->_report_table_name, $where_string);

            //Execute Query
            $result = $this->_database->query($query);
            if ($result === false) {
                //Throw Query Error
                $this->_database->throwError([
                    'query' => 'query failed: ' . $query
                ]);
            }

            //Delete Cache
            $this->_report_list[$form_id] = [];
        }

        return;
    }

    /**
     * Create Item Data
     *
     * @access private
     *
     * @param string $unique_key //Unique key
     */
    function _createItemData($unique_key)
    {
        foreach (array_keys($this->_report_list) as $form_id) {
            foreach (array_keys($this->_report_list[$form_id]) as $report_id) {
                //Create Query
                $i = 0;
                $item_data_value_list = [];
                foreach ($this->_item_data_value_list as $key => $value) {
                    switch ($key) {
                        case 'col_report':
                            $item_data_value_list[$key]
                                = cb_queryf($this->_database, '"@S"',
                                $report_id);
                            break;
                        case 'col_foreign_key':
                            $item_data_value_list[$key]
                                = cb_queryf($this->_database, '"@S"', $value);
                            break;
                        default:
                            if (strlen($value) > 0) {
                                $item_data_value_list[$key]
                                    = cb_queryf($this->_database, '"@S@S"',
                                    $value, $i);
                            } else {
                                $item_data_value_list[$key]
                                    = cb_queryf($this->_database, '"@S"', $i);
                            }
                            break;
                    }
                    $i++;
                }
                $column_string = implode(',',
                    array_keys($item_data_value_list));
                $value_string = implode(',', $item_data_value_list);
                $query = sprintf('INSERT %s(%s) VALUES (%s)',
                    $this->_item_data_table_name, $column_string,
                    $value_string);

                //Execute Query
                $result = $this->_database->query($query);
                if ($result === false) {
                    //Throw Query Error
                    $this->_database->throwError([
                        'query' => 'query failed: ' . $query
                    ]);
                }

                //Add Cache
                $item_data_id = $this->_database->get_insert_id();
                foreach (array_keys($item_data_value_list) as $key) {
                    $this->_item_data_list[$form_id][$report_id][$item_data_id][$key]
                        = mb_ereg_replace('"', '', $item_data_value_list[$key]);
                }
            }
        }

        return;
    }

    /**
     * Delete Item Data
     *
     * @access private
     *
     * @param string $unique_key //Unique key
     */
    function _deleteItemData()
    {
        //Check Petition Count
        if (count($this->_item_data_list) == 0) {
            return true;
        }

        //Delete All Item Data
        foreach (array_keys($this->_item_data_list) as $form_id) {
            foreach (array_keys($this->_item_data_list[$form_id]) as $report_id) {
                //Check Item Count
                if (count($this->_item_data_list[$form_id][$report_id]) == 0) {
                    continue;
                }

                //Create Query
                $where_string = cb_queryf($this->_database, '_id IN (@S)',
                    implode(',',
                        array_keys($this->_item_data_list[$form_id][$report_id])));
                $query = sprintf('DELETE FROM %s WHERE %s',
                    $this->_item_data_table_name, $where_string);

                //Execute Query
                $result = $this->_database->query($query);
                if ($result === false) {
                    //Throw Query Error
                    $this->_database->throwError([
                        'query' => 'query failed: ' . $query
                    ]);
                }

                //Delete Cache
                $this->_item_data_list[$form_id][$report_id] = [];
            }
        }

        return;
    }

    /**
     * Create Item Data File
     *
     * @access private
     *
     * @param string $unique_key //Unique key
     */
    function _createItemDataFile($unique_key)
    {
        foreach (array_keys($this->_item_data_list) as $form_id) {
            foreach (array_keys($this->_item_data_list[$form_id]) as $report_id) {

                foreach (
                    array_keys($this->_item_data_list[$form_id][$report_id]) as
                    $item_data_id
                ) {
                    //Create Query
                    $i = 0;
                    $item_data_file_value_list = [];
                    foreach (
                        $this->_item_data_file_value_list as $key => $value
                    ) {
                        switch ($key) {
                            case 'col_item_data':
                                $item_data_file_value_list[$key]
                                    = cb_queryf($this->_database, '"@S"',
                                    $item_data_id);
                                break;
                            case 'col_file':
                                $item_data_file_value_list[$key] = 1;
                                break;
                            default:
                                if (strlen($value) > 0) {
                                    $item_data_file_value_list[$key]
                                        = cb_queryf($this->_database, '"@S@S"',
                                        $value, $i);
                                } else {
                                    $item_data_file_value_list[$key]
                                        = cb_queryf($this->_database, '"@S"',
                                        $i);
                                }
                                break;
                        }
                        $i++;
                    }
                    $column_string = implode(',',
                        array_keys($item_data_file_value_list));
                    $value_string = implode(',', $item_data_file_value_list);
                    $query = sprintf('INSERT %s(%s) VALUES (%s)',
                        $this->_item_data_file_table_name, $column_string,
                        $value_string);

                    //Execute Query
                    $result = $this->_database->query($query);
                    if ($result === false) {
                        //Throw Query Error
                        $this->_database->throwError([
                            'query' => 'query failed: ' . $query
                        ]);
                    }

                    //Add Cache
                    $item_data_file_id = $this->_database->get_insert_id();
                    foreach (array_keys($item_data_file_value_list) as $key) {
                        $this->_item_data_file_list[$form_id][$report_id][$item_data_id][$item_data_file_id][$key]
                            = mb_ereg_replace('"', '',
                            $item_data_file_value_list[$key]);
                    }
                }
            }
        }

        return;
    }


    /**
     * Delete Item Data
     *
     * @access private
     *
     * @param string $unique_key //Unique key
     */
    function _deleteItemDataFile()
    {
        //Check Petition Count
        if (count($this->_item_data_file_list) == 0) {
            return true;
        }

        //Delete All Item File Data
        foreach (array_keys($this->_item_data_file_list) as $form_id) {
            foreach (
                array_keys($this->_item_data_file_list[$form_id]) as $report_id
            ) {
                //Check Item Data Count
                if (count($this->_item_data_file_list[$form_id][$report_id])
                    == 0
                ) {
                    continue;
                }

                foreach (
                    array_keys($this->_item_data_file_list[$form_id][$report_id])
                    as $item_data_id
                ) {
                    //Check Item Data File Count
                    if (count($this->_item_data_file_list[$form_id][$report_id][$item_data_id])
                        == 0
                    ) {
                        continue;
                    }

                    //Create Query
                    $where_string = cb_queryf($this->_database, '_id IN (@S)',
                        implode(',',
                            array_keys($this->_item_data_file_list[$form_id][$report_id][$item_data_id])));
                    $query = sprintf('DELETE FROM %s WHERE %s',
                        $this->_item_data_file_table_name, $where_string);

                    //Execute Query
                    $result = $this->_database->query($query);
                    if ($result === false) {
                        //Throw Query Error
                        $this->_database->throwError([
                            'query' => 'query failed: ' . $query
                        ]);
                    }

                    //Delete Cache
                    $this->_item_data_file_list[$form_id][$report_id][$item_data_id]
                        = [];
                }
            }
        }

        return;
    }

    /**
     * Get Item Data
     *
     * @access  private
     *
     * @param  int   $item_data_id //Item Data ID
     * @param  int   $report_id    //Petition ID
     * @param  int   $form_id      //Form ID
     * @param  array $column_list  //Column Name List
     *
     * @return array $item_data_file             //Item Data File Information Array
     */
    function _getItemData($item_data_id, $report_id, $form_id, $column_list)
    {
        //Get Database
        $database =& $this->_database;

        //Create Column List
        $column_list = implode(',', $column_list);

        //Create Where Column
        $where = cb_queryf($database, 'WHERE _id = @S', $item_data_id);

        //Create Order By Column
        $order_by = 'ORDER BY _id';

        //Create Query
        $query = sprintf('SELECT %s FROM %s %s %s', $column_list,
            $this->_item_data_table_name, $where, $order_by);
        $query = $database->select_format($query, 0, -1,
            CB_DATABASE_DEFAULT_LOCK);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }
        $item_data = $database->fetch_assoc($result);
        $database->free_result($result);

        return $item_data;
    }

    /**
     * Validate Item Data
     *
     * @access  private
     *
     * @param  int $item_data_id   //Item Data ID
     * @param  int $report_id      //Petition ID
     * @param  int $form_id        //Form ID
     * @param  int $validate_props //Validate Properties
     * @param  int $deleted        //Delete Falag
     *
     * @return BOOL                              //Validate Result
     */
    function _validateItemData(
        $item_data_id,
        $report_id,
        $form_id,
        $validate_props,
        $deleted = false
    ) {
        //Get Item Data From Table
        $item_data = $this->_getItemData($item_data_id, $report_id, $form_id,
            array_keys($validate_props));
        if ($deleted && ! $item_data) {
            return true;
        }

        //Validate Properties
        foreach ($validate_props as $prop_name => $prop_value) {
            //Check Assertion
            if (strval($item_data[$prop_name]) !== strval($prop_value)) {
                var_dump($item_data[$prop_name]);
                var_dump($prop_name);
                var_dump($prop_value);
                die();

                //Finalize Test
                $this->_finalize();
                assert('strval($item_data[$prop_name]) === strval($prop_value)');
            }
        }

        return true;
    }

    /**
     * Add Item Data
     *
     * @access  private
     * @return BOOL                              //Validate Result
     */
    function test_add()
    {
        //Initialize Test
        $this->_initialize();

        //Get Item Data Logic Instance
        $logic = GRN_Report_ItemData_Logic::getInstance();

        //Test Create Petition
        $i = 0;
        foreach (array_keys($this->_report_list) as $form_id) {
            foreach (array_keys($this->_report_list[$form_id]) as $report_id) {
                $set_column_key_list = [
                    'display_name',         //Item Display Name
                    'type',                 //Item Type
                    'option_string',        //Item Option String
                    'option_string_type',   //Item Option String Type
                    'description',          //Item Description
                    'description_type',     //Item Description_type
                    'description_editor',   //Item Description Editor
                    'foreign_key',          //Item Foreign_key
                    'settings',             //Item Settings
                    'required',             //Item Required
                    'list_index',           //Item list Index
                ];
                $itemdata = [];
                foreach ($set_column_key_list as $val) {
                    $itemdata["col_" . $val] = '';
                }

                $item_ids = array_keys($this->_item_list);
                $itemdata['col_foreign_key'] = 'grn.report.string_multiple';
                $itemdata['col_list_index'] = $i;
//                echo $itemdata['col_foreign_key'];die;

                //Create Item Data
                $item_data_id = $logic->add($report_id,
                    $item_ids[rand(0, count($item_ids) - 1)],
                    'grn.report.string_multiple', $itemdata);

                //Update Cache
                $this->_item_data_list[$form_id][$report_id][$item_data_id]
                    = $itemdata;

                //Validate Item Data
                $this->_validateItemData($item_data_id, $report_id, $form_id,
                    $itemdata);
                $i++;
            }
        }

        //Finalize Test
        $this->_finalize();

        return true;
    }

    /**
     * Modify Item Data
     *
     * @access  private
     * @return BOOL                              //Validate Result
     */
    function test_modify()
    {
        //Initialize Test
        $this->_initialize();

        //Get Item Data Logic Instance
        $logic = GRN_Report_ItemData_Logic::getInstance();

        //Test Create Petition
        $i = 0;
        foreach (array_keys($this->_item_data_list) as $form_id) {
            foreach (array_keys($this->_item_data_list[$form_id]) as $report_id) {
                foreach (
                    array_keys($this->_item_data_list[$form_id][$report_id]) as
                    $item_data_id
                ) {
                    $property_list = [];
                    foreach ($this->_item_data_value_list as $key => $value) {
                        switch ($key) {
                            case 'col_report':
                                $property_list[$key] = $report_id;
                                break;
                            case 'col_display_name':
                            case 'col_type':
                            case 'col_option_string':
                            case 'col_option_string_type':
                            case 'col_description':
                            case 'col_description_type':
                            case 'col_description_editor':
                            case 'col_settings':
                            case 'col_br':
                            case 'col_required':
                            case 'col_list_index':
                                $property_list[$key]
                                    = $this->_item_data_list[$form_id][$report_id][$item_data_id][$key];
                                break;
                            case 'col_foreign_key':
                            case 'col_set_template':
                            case 'col_view_template':
                            case 'col_detail_template':
                                $property_list[$key]
                                    = $this->_item_data_list[$form_id][$report_id][$item_data_id][$key];
                                break;
                            default:
                                break;
                        }
                    }

                    //Set Value
                    switch ($property_list['col_foreign_key']) {
                        case 'grn.report.string_single':
                        case 'grn.report.string_multiple':
                        case 'grn.report.menu_string':
                        case 'grn.report.route_search':
                            $input_value = 'aaa';
                            break;
                        case 'grn.report.radio':
                        case 'grn.report.checkbox':
                        case 'grn.report.numeric':
                        case 'grn.report.numeric_calc':
                            $property_list['col_numeric'] = 1;
                            $input_value = 1;
                            break;
                        case 'grn.report.date':
                            $property_list['col_datetime'] = 0;
                            $input_value = 0;
                            break;
                        default:
                            break;
                    }
                    echo $property_list['foreign_key'];
                    die;
                    $item_ids = array_keys($this->_item_list);
                    //Modify Item Data
                    $logic->modify($item_data_id, $report_id,
                        $item_ids[rand(0, count($item_ids) - 1)],
                        $property_list);

                    //Update Cache
                    $this->_item_data_list[$form_id][$report_id][$item_data_id]
                        = $property_list;

                    //Validate Item Data
                    $this->_validateItemData($item_data_id, $report_id,
                        $form_id, $property_list);
                    $i++;
                }
            }
        }

        //Finalize Test
        $this->_finalize();

        return true;
    }

    /**
     * Delete Item Data
     *
     * @access  private
     * @return BOOL                              //Validate Result
     */
    function test_delete()
    {
        //Initialize Test
        $this->_initialize();

        //Get Item Data Logic Instance
        $logic = GRN_Report_ItemData_Logic::getInstance();

        //Test Remove Item Data
        foreach (array_keys($this->_item_data_list) as $form_id) {
            foreach (array_keys($this->_item_data_list[$form_id]) as $report_id) {
                foreach (
                    array_keys($this->_item_data_list[$form_id][$report_id]) as
                    $item_data_id
                ) {
                    //Remove Item Data
                    $logic->delete($item_data_id, $report_id);

                    //Remove Cache
                    unset($this->_item_data_list[$form_id][$report_id][$item_data_id]);

                    //Validate Item Data
                    $validate_props = ['*' => ''];
                    $this->_validateItemData($item_data_id, $report_id,
                        $form_id, $validate_props, true);
                }
            }
        }

        //Finalize Test
        $this->_finalize();

        return true;
    }

    /**
     * Delete Item Data Multiple
     *
     * @access  private
     * @return BOOL                              //Validate Result
     */
    function test_deleteMulti()
    {
        //Initialize Test
        $this->_initialize();

        //Get Item Data Logic Base Instance
        $logic = GRN_Report_ItemData_Logic::getInstance();

        //Test Delete Multiple
        foreach (array_keys($this->_item_data_list) as $form_id) {
            foreach (array_keys($this->_item_data_list[$form_id]) as $report_id) {
                $logic->deleteMulti(array_keys($this->_item_data_list[$form_id][$report_id]));

                //Check Delete Item Data
                foreach (
                    array_keys($this->_item_data_list[$form_id][$report_id]) as
                    $item_data_id
                ) {
                    //Delete Cache
                    unset($this->_item_data_list[$form_id][$report_id][$item_data_id]);

                    //Validate Item Data
                    $validate_props = ['*' => ''];
                    $this->_validateItemData($item_data_id, $report_id,
                        $form_id, $validate_props, true);
                }
            }
        }

        //Finalize Test
        $this->_finalize();

        return true;
    }

    /**
     * Delete Item Data All
     *
     * @access  private
     * @return BOOL                              //Validate Result
     */
    function test_deleteAll()
    {
        //Initialize Test
        $this->_initialize();

        //Get Item Data Logic Base Instance
        $logic = GRN_Report_ItemData_Logic::getInstance();

        //Test Delete All
        foreach (array_keys($this->_item_data_list) as $form_id) {
            foreach (array_keys($this->_item_data_list[$form_id]) as $report_id) {
                $logic->deleteAll($report_id);

                //Check Delete Item Data
                foreach (
                    array_keys($this->_item_data_list[$form_id][$report_id]) as
                    $item_data_id
                ) {
                    //Delete Cache
                    unset($this->_item_data_list[$form_id][$report_id][$item_data_id]);

                    //Validate Item Data
                    $validate_props = ['*' => ''];
                    $this->_validateItemData($item_data_id, $report_id,
                        $form_id, $validate_props, true);
                }
            }
        }

        //Finalize Test
        $this->_finalize();

        return true;
    }
}

cb_test_run();

?>
