<?php
/**
 * Report Application Filter Class
 *
 * @author  Shou,Aoki 2009/09
 * @version 1.0
 * @package grn.report
 */

/** Report Application **/
require_once('report/resources.csp');
require_once('report/filter_manager_base.csp');

/**
 * Filter Manager Class
 *
 * @package grn.report
 */
class GRN_Report_Filter_Manager extends GRN_Report_Filter_Manager_Base
{
    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
        $parent = parent::getInstance();
        $this->_filter_table_name = $parent->_filter_table_name;
        $this->_condition_table_name = $parent->_condition_table_name;
        $this->_list = $parent->_list;
    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Report_Filter_Manager
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Create Filter
     *
     * @param  array $property_list //Filter Property List(Name=>Value)
     *
     * @return int   $filter_id           //Filter ID
     */
    public function createFilter($property_list)
    {
        $id = GRN_Report_Table_Manager::genericCreate(GRN_REPORT_TABLE_FILTER,
            $property_list);

        return $id;
    }

    public function createFormCondition($property_list)
    {
        $id
            = GRN_Report_Table_Manager::genericCreate(GRN_REPORT_TABLE_FILTERFORMCONDITION,
            $property_list);

        return $id;
    }

    public function modifyFormCondition($fcid, $property_list)
    {
        $id
            = GRN_Report_Table_Manager::updateById(GRN_REPORT_TABLE_FILTERFORMCONDITION,
            $fcid, $property_list);

        return $id;
    }

    public function addFilterFormRelation($property_list)
    {
        $id
            = GRN_Report_Table_Manager::genericCreate(GRN_REPORT_TABLE_FILTERFORMRELATIONS,
            $property_list);

        return $id;
    }

    /**
     * Create Condition
     *
     * @param  array $property_list //Condition Property List(Name=>Value)
     *
     * @return int   $condition_id           //Condition ID
     */
    public function createCondition($property_list)
    {
        $id
            = GRN_Report_Table_Manager::genericCreate(GRN_REPORT_TABLE_FILTERCONDITION,
            $property_list);

        return $id;
    }

    /**
     * Modify Filter
     *
     * @param $filter_id
     * @param $property_list
     *
     * @return unknown_type
     */
    public function modifyFilter($filter_id, $property_list)
    {
        $id = GRN_Report_Table_Manager::updateById(GRN_REPORT_TABLE_FILTER,
            $filter_id, $property_list);

        return $id;
    }

    /**
     * Modify Condition
     *
     * @param $condition_id
     * @param $property_list
     *
     * @return unknown_type
     */
    public function modifyCondition($condition_id, $property_list)
    {
        $id
            = GRN_Report_Table_Manager::updateById(GRN_REPORT_TABLE_FILTERCONDITION,
            $condition_id, $property_list);

        return $id;
    }

    /**
     * Remove Filter and remove related condition
     *
     * @param int $filter_id //Filter ID
     *
     * @return int   $condition_id           //Condition ID
     */
    public function removeFilter($filter_id, $user_id = null)
    {
        $filter = $this->get($filter_id, CB_DATABASE_DEFAULT_LOCK, $user_id);

        $conditions = $filter["conditions"];

        foreach ($conditions as $cid => $condition) {
            GRN_Report_Table_Manager::removeById(GRN_REPORT_TABLE_FILTERCONDITION,
                $cid);
        }

        GRN_Report_Table_Manager::removeById(GRN_REPORT_TABLE_FILTER,
            $filter_id);

        return true;
    }

    /**
     * Remove Condition
     *
     * @param $condition_id
     *
     * @return unknown_type
     */
    public function removeCondition($condition_id)
    {
        GRN_Report_Table_Manager::removeById(GRN_REPORT_TABLE_FILTERCONDITION,
            $condition_id);

        return true;
    }

    /**
     * Remove Filters in Category
     *
     * @param $category_id
     */
    public function removeAll($category_id)
    {
        //remove conditions
        $database =& GRN_Report_Table_Manager::getDataBase();

        if ($category_id == GRN_REPORT_CATEGORY_NONPARTY_ID) {
            $where = cb_queryf($database,
                "col_filter in (select _id from @S where col_category IS NULL)",
                $this->_filter_table_name);
        } else {
            $where = cb_queryf($database,
                "col_filter in (select _id from @S where col_category = @S)",
                $this->_filter_table_name, $category_id);
        }

        GRN_Report_Table_Manager::remove($this->_condition_table_name, $where);

        //remove filters
        if ($category_id == GRN_REPORT_CATEGORY_NONPARTY_ID) {
            $where = cb_queryf($database, "col_category IS NULL");
        } else {
            $where = cb_queryf($database, "col_category = '@S'", $category_id);
        }
        GRN_Report_Table_Manager::remove($this->_filter_table_name, $where);
    }

    /**
     * Remove Personal Filters By User Id
     *
     * @param $category_id
     */
    public function removePersonalFiltersByUserId($user_id)
    {
        $database =& GRN_Report_Table_Manager::getDataBase();
        $where = cb_queryf($database, "col_personal_user = '@S'", $user_id);

        GRN_Report_Table_Manager::remove($this->_filter_table_name, $where);
    }

    /**
     * Remove Fitlers
     *
     * @param array filter_id_list
     */
    public function removeMulti($filter_id_list, $user_id = null)
    {
        foreach ($filter_id_list as $filter_id) {
            $this->removeFilter($filter_id, $user_id);
        }

        return true;
    }

    /**
     * Change Filter Order
     *
     * @param int  $filter_id_list //Filter ID List
     * @param int  $start_index    //Start Index Number
     * @param BOOL $result         //Result
     */
    public function changeOrder($filter_id_list, $start_index = 0)
    {
        //Set New List Index
        $list_index = $start_index;
        $property_list = [];
        foreach ($filter_id_list as $filter_id) {
            $property_list[GRN_REPORT_COLUMN_LIST_INDEX] = $list_index;
            $this->modifyFilter($filter_id, $property_list);
            $list_index++;
        }

        return true;
    }

    public function registerDisplayUsers($filter_id, $user_id_list)
    {
        $database =& GRN_Report_Table_Manager::getDataBase();
        $tablename
            = GRN_Report_Table_Manager::getTableName(GRN_REPORT_TABLE_FILTERUSERRELATIONS);

        //既存のデータを削除して新たに入れなおす。
        $query = cb_queryf($database, "delete from @S where col_filter = '@S'",
            $tablename, $filter_id);
        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        if (count($user_id_list) > 0) {
            //再登録
            $query = cb_queryf($database,
                "insert into @S(col_filter,col_user) values ", $tablename);

            $insertValues = "";
            foreach ($user_id_list as $user_id) {
                if (strlen($insertValues) > 0) {
                    $insertValues .= ",";
                }
                $insertValues .= cb_queryf($database, "('@S','@S')", $filter_id,
                    $user_id);
            }

            $query .= $insertValues;

            //Execute Query
            $result = $database->query($query);
            if ($result === false) {
                //Throw Query Error
                $database->throwError(['query' => 'query failed: ' . $query]);
            }
        }

        return true;
    }

    public function removeDisplayUsers($filter_id, $user_id_list)
    {
        $database =& GRN_Report_Table_Manager::getDataBase();
        $tablename
            = GRN_Report_Table_Manager::getTableName(GRN_REPORT_TABLE_FILTERUSERRELATIONS);
        $user_id_string = implode(',', $user_id_list);
        $query = cb_queryf($database,
            "delete from @S where col_filter = @S and col_user in (@S)",
            $tablename, $filter_id, $user_id_string);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        return true;
    }

    public function useFilter($userId, $filterId)
    {
        //フィルタが存在するかチェック
        $filter = $this->get($filterId);
        if ( ! $filter) {
            return;
        }

        $filterIds = $this->getRecentUserFilterIds($userId);

        foreach ($filterIds as $idx => $fid) {
            if ($fid == $filterId) {
                unset($filterIds[$idx]);
            }
        }

        if (is_array($filterIds)) {
            array_unshift($filterIds, $filterId);
        } else {
            $filterIds = [$filterId];
        }

        $database =& GRN_Report_Table_Manager::getDataBase();
        $update = "";
        for ($i = 0; $i < GRN_REPORT_RECENTFILTERUSER_COUNT; $i++) {
            if (array_key_exists($i, $filterIds)
                && is_numeric($filterIds[$i])
            ) {
                if (strlen($update) > 0) {
                    $update .= ",";
                }
                $update .= cb_queryf($database, "@S = @S",
                    GRN_REPORT_COLUMN_FILTER . ($i + 1), $filterIds[$i]);
            }
        }

        //check exist record
        $this->_createRecentUserFilterRecordIfNotExist($userId);

        $tablename
            = GRN_Report_Table_Manager::getTableName(GRN_REPORT_TABLE_RECENTFILTERUSERRELATIONS);
        $query = cb_queryf($database, "update @S set @S where col_user = @S",
            $tablename, $update, $userId);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        return true;
    }

    private function _createRecentUserFilterRecordIfNotExist($userId)
    {
        $database =& GRN_Report_Table_Manager::getDataBase();
        $tablename
            = GRN_Report_Table_Manager::getTableName(GRN_REPORT_TABLE_RECENTFILTERUSERRELATIONS);

        $query = cb_queryf($database, "select * from @S where col_user = @S",
            $tablename, $userId);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        $count = $database->num_rows($result);
        if ($count == 0) {
            $query = cb_queryf($database,
                "insert into @S(col_user) values(@S)", $tablename, $userId);
            $result = $database->query($query);
            if ($result === false) {
                //Throw Query Error
                $database->throwError(['query' => 'query failed: ' . $query]);
            }
        }
    }

    public function getRecentUserFilterList($userId)
    {
        //Get Accessible Category ID List
        require_once('report/category_logic.csp');
        $category_logic = GRN_Report_Category_Logic::getInstance();
        $categoryIds = $category_logic->getAccessibleCategoryIdList($userId);

        $filterIds = $this->getRecentUserFilterIds($userId, $categoryIds);
        $filters = $this->getListByFilterIdList($filterIds);
        //filtersの順序をfilterIdsと同等にする
        $ret = [];
        foreach ($filterIds as $fid) {
            $ret[$fid] = $filters[$fid];
        }

        return $ret;
    }

    public function getRecentUserFilterIds($userId)
    {
        //Get Accessible Category ID List
        require_once('report/category_logic.csp');
        $category_logic = GRN_Report_Category_Logic::getInstance();
        $categoryIds = $category_logic->getAccessibleCategoryIdList($userId);

        $database = GRN_Report_Table_Manager::getDataBase();
        $columns
            = GRN_Report_Table_Manager::getColumnList(GRN_REPORT_TABLE_RECENTFILTERUSERRELATIONS,
            'r');
        $relation_tablename
            = GRN_Report_Table_Manager::getTableName(GRN_REPORT_TABLE_RECENTFILTERUSERRELATIONS);

        $query = cb_queryf($database,
            "SELECT @S FROM @S AS r WHERE r.col_user = @S"
            , implode(',', $columns), $relation_tablename, $userId);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        $row = $database->fetch_assoc($result);
        if ( ! $row) {
            return [];
        }

        $filterIds = [];
        for ($i = 1; $i <= GRN_REPORT_RECENTFILTERUSER_COUNT; $i++) {
            if (is_numeric($row[GRN_REPORT_COLUMN_FILTER . $i])) {
                $filterIds[] = $row[GRN_REPORT_COLUMN_FILTER . $i];
            }
        }
        $database->free_result($result);
        $actives = $this->_getActiveAndAccessibleFilterIds($filterIds,
            $categoryIds, $userId);

        //順序を保持
        $ret = [];
        foreach ($filterIds as $fid) {
            if (array_key_exists($fid, $actives)) {
                $ret[$fid] = $actives[$fid];
            }
        }

        return $ret;
    }

    /**
     * 渡された絞込みIDリストの中から有効な絞込みIDのみを返す。
     * 基本的にこのメソッドは使用せずIDを取得する時点で有効/無効チェックを行うこと。
     * (パフォーマンス的に非効率)
     *
     * @param $filter_id_list
     *
     * @return unknown_type
     */
    private function _getActiveAndAccessibleFilterIds(
        $filter_id_list,
        $category_id_list,
        $userId
    ) {
        $database = GRN_Report_Table_Manager::getDataBase();
        $filter_tablename
            = GRN_Report_Table_Manager::getTableName(GRN_REPORT_TABLE_FILTER);

        if ( ! $filter_id_list || count($filter_id_list) == 0) {
            return [];
        }

        if ($category_id_list && count($category_id_list) > 0) {
            $category_query = cb_queryf($database,
                '(f.col_category IS NULL OR f.col_category IN (@S))',
                implode(',', $category_id_list));
        } else {
            $category_query = "f.col_category IS NULL";
        }

        /* GRN2-1936 pending
        $query = cb_queryf($database,"SELECT f._id FROM @S AS f WHERE f.col_personal_user = @S OR ( f.col_active = @S AND f._id IN (@S) AND "
                        ,$filter_tablename,$userId,GRN_REPORT_FILTER_ACTIVE,implode(',',$filter_id_list)).$category_query.' )';
         */
        $query = cb_queryf($database,
                "SELECT f._id FROM @S AS f WHERE f.col_active = @S AND f._id IN (@S) AND "
                , $filter_tablename, GRN_REPORT_FILTER_ACTIVE,
                implode(',', $filter_id_list)) . $category_query;

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        $filterIds = [];
        $count = $database->num_rows($result);
        for ($i = 0; $i < $count; $i++) {
            $row = $database->fetch_assoc($result);
            $filterIds[$row['_id']] = $row['_id'];
        }
        $database->free_result($result);

        return $filterIds;
    }

    public function getUserDisplayFilterList($userId)
    {
        $filterIds = $this->getUserDisplayFilterIds($userId);
        $filters = $this->getListByFilterIdList($filterIds);

        return $filters;
    }

    public function getUserDisplayFilterIds($userId)
    {
        $database = GRN_Report_Table_Manager::getDataBase();
        $relation_tablename
            = GRN_Report_Table_Manager::getTableName(GRN_REPORT_TABLE_FILTERUSERRELATIONS);
        $filter_tablename
            = GRN_Report_Table_Manager::getTableName(GRN_REPORT_TABLE_FILTER);

        $query = cb_queryf($database,
            "select r.col_filter from @S as r left join @S as f on (f._id = r.col_filter) where r.col_user = @S and f.col_active = @S"
            , $relation_tablename, $filter_tablename, $userId,
            GRN_REPORT_FILTER_ACTIVE);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        $filterIds = [];
        $count = $database->num_rows($result);
        for ($i = 0; $i < $count; $i++) {
            $row = $database->fetch_assoc($result);
            $filterIds[] = $row['col_filter'];
        }
        $database->free_result($result);

        return $filterIds;
    }

    public function getUserAccessibleFilterList($user)
    {
        //Get Accessible Category ID List
        require_once('report/category_logic.csp');
        $category_logic = GRN_Report_Category_Logic::getInstance();
        $categoryIds = $category_logic->getAccessibleCategoryIdList($user);

        $filterIds = $this->getUserAccessibleFilterIds($user, $categoryIds);
        $filters = $this->getListByFilterIdList($filterIds);

        return $filters;
    }

    public function getUserAccessibleFilterIds($user, $categoryIds)
    {
        $database = GRN_Report_Table_Manager::getDataBase();
        $tablename
            = GRN_Report_Table_Manager::getTableName(GRN_REPORT_TABLE_FILTER);

        if ($categoryIds && count($categoryIds) > 0) {
            $category_query = cb_queryf($database,
                '(f.col_category IS NULL OR f.col_category IN (@S))',
                implode(',', $categoryIds));
        } else {
            $category_query = "f.col_category IS NULL";
        }

        $query = cb_queryf($database,
                "SELECT f._id FROM @S AS f WHERE f.col_active = @S AND "
                , $tablename, GRN_REPORT_FILTER_ACTIVE) . $category_query;

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        $filterIds = [];
        $count = $database->num_rows($result);
        for ($i = 0; $i < $count; $i++) {
            $row = $database->fetch_assoc($result);
            $filterIds[] = $row['_id'];
        }
        $database->free_result($result);

        return $filterIds;
    }

    public function removeFilterFormCondition($filter_id)
    {
        $database =& GRN_Report_Table_Manager::getDataBase();
        $query = cb_queryf($database,
            "DELETE FROM tab_grn_report_filterformcondition WHERE col_filter = @S",
            $filter_id);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        return true;
    }

    public function removeFilterFormRelation($filter_id)
    {
        $database =& GRN_Report_Table_Manager::getDataBase();
        $query = cb_queryf($database,
            "DELETE FROM tab_grn_report_filterformrelations WHERE col_filter = '@S'",
            $filter_id);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        return true;
    }

}

