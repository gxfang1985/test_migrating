<?php
function __grn_report_is_cellular_application()
{
    static $__valid_cellular = null;

    if ( ! is_null($__valid_cellular)) {
        return $__valid_cellular;
    }
    require_once('grn/application.csp');
    $locator = GRN_ApplicationLocator::instance();
    $cellular_app = $locator->getInstance('cellular');
    if (is_object($cellular_app)) {
        // インスタンスが取得できる時点でライセンス、利用権限はチェック済み

        global $G_container_app;
        $uum = $G_container_app->getInstance('uum');
        $login = $uum->getLoginUser();

        if (is_object($login)) {
            // ユーザーのケータイ利用許可（個人設定）をチェック
            require_once('cellular/config.csp');
            $uc = new GRN_Cellular_UserConfig($login);
            if ($uc->getAvailability()) {
                $__valid_cellular = true;

                return true;
            }
        }
    }
    $__valid_cellular = false;

    return false;
}

function __grn_report_cellular_prepare_page($page, & $params)
{
    if (__grn_report_is_cellular_application()) {
        require_once('cellular/prepend.csp');

        return __grn_cellular_prepare_page($page, $params);
    }

    return $page;
}

function grn_report_cellular_pageurl(
    $page,
    $params = null,
    $fragment = null,
    $postfix = null
) {
    require_once('grn/ui.csp');

    $page = __grn_report_cellular_prepare_page($page, $params);

    $url = cb_pageurl($page, $params, $fragment, $postfix);

    if (preg_match('/\?$/', $url)) {
        $url = substr($url, 0, strlen($url) - 1);
    }

    return $url;
}

function grn_report_cellular_redirect(
    $page,
    $args = null,
    $fragment = null,
    $postfix = null,
    $ignore_referer = false
) {
    $page = __grn_report_cellular_prepare_page($page, $args);
    cb_redirect($page, $args, $fragment, $postfix, $ignore_referer);
}

function grn_report_cellular_switch_page($page)
{
    cb_switch_page($page . '.csp');
}

// UTF-8用文字列操作関数郡(PHP4.3.11で修正？）

// UTF-8コード体系のチェック（１文字何バイトかを返す）
function grn_report_cellular_utf8_bytecheck(&$byte)
{
    $byte = intval($byte);
    if (intval($byte & bindec('10000000')) == 0) {
        return 1;
    }
    if (intval($byte & bindec('01000000')) == 0) {
        return 1;  // illegal code
    }
    if (intval($byte & bindec('00100000')) == 0) {
        return 2;
    }
    if (intval($byte & bindec('00010000')) == 0) {
        return 3;
    }
    if (intval($byte & bindec('00001000')) == 0) {
        return 4;
    }
    if (intval($byte & bindec('00000100')) == 0) {
        return 5;
    }
    if (intval($byte & bindec('00000010')) == 0) {
        return 6;
    }
    if (intval($byte & bindec('00000001')) == 0) {
        return 7;
    }

    return 1;  // illegal code
}

// 半角カナの判定（TRUE/FALSE）
function grn_report_cellular_utf8_hankana(&$byte1, &$byte2, &$byte3)
{
    if (intval($byte1) == 0xef) {
        if (intval($byte2) == 0xbd) {
            if (0xa1 <= intval($byte3) && intval($byte3) <= 0xbf) {
                return true;
            }
        }
        if (intval($byte2) == 0xbe) {
            if (0x80 <= intval($byte3) && intval($byte3) <= 0x9f) {
                return true;
            }
        }
    }

    return false;
}

// 文字列の幅を返す（mb_strwidthに問題がある為、自作）
function grn_report_cellular_utf8_strwidth(&$s)
{
    //return mb_strwidth($s);

    $chars = preg_split('//', $s, -1, PREG_SPLIT_NO_EMPTY);
    $width = 0;
    for ($i = 0, $length = count($chars); $i < $length;) {
        $ascii_value = ord($chars[$i]);
        $num = grn_report_cellular_utf8_bytecheck($ascii_value);
        switch ($num) {
            case 1:
                $width += 1;
                break;
            case 2:
                $width += 2;
                break;
            case 3:
                $ascii_st_value = ord($chars[$i]);
                $ascii_nd_value = ord($chars[$i + 1]);
                $ascii_rd_value = ord($chars[$i + 2]);
                if (grn_report_cellular_utf8_hankana($ascii_st_value,
                    $ascii_nd_value, $ascii_rd_value)
                ) {
                    $width += 1;
                } else {
                    $width += 2;
                }
                break;
            default:
                $width += 2;
                break;
        }
        $i += $num;
    }

    return $width;
}

// 文字列を幅で丸める（mb_strimwidthに問題がある為、自作）
function grn_report_cellular_utf8_strimwidth(&$s, $width, $add)
{
    //return mb_strimwidth($s, 0, $width, $add);

    if (grn_report_cellular_utf8_strwidth($s) <= $width) {
        return $s;
    } else {
        $chars = preg_split('//', $s, -1, PREG_SPLIT_NO_EMPTY);
        $out_width = $width - grn_report_cellular_utf8_strwidth($add);
        for ($i = 0, $length = count($chars); $i < $length;) {
            $ascii_value = ord($chars[$i]);
            $num = grn_report_cellular_utf8_bytecheck($ascii_value);
            switch ($num) {
                case 1:
                    $tmp_width = 1;
                    break;
                case 2:
                    $tmp_width = 2;
                    break;
                case 3:
                    $ascii_st_value = ord($chars[$i]);
                    $ascii_nd_value = ord($chars[$i + 1]);
                    $ascii_rd_value = ord($chars[$i + 2]);
                    if (grn_report_cellular_utf8_hankana($ascii_st_value,
                        $ascii_nd_value, $ascii_rd_value)
                    ) {
                        $tmp_width = 1;
                    } else {
                        $tmp_width = 2;
                    }
                    break;
                default:
                    $tmp_width = 2;
                    break;
            }

            if ($out_width - $tmp_width < 0) {
                break;
            }

            $out_width -= $tmp_width;
            $i += $num;
        }
        $out = implode("", array_slice($chars, 0, $i));
        $out .= $add;
    }

    return $out;
}

/**
 * リモートサービス向けにパスを書き換える
 * HTTP拡張ヘッダとして
 *   X-CYBOZU-REMOTE-KID
 *   X-CYBOZU-REMOTE-KAUTH
 * を取得するとそれらをパスの先頭に追加し返却
 * 拡張ヘッダが不正な場合、何も変換せず入力をそのまま返す
 * 例)
 *   $page = /cgi-bin/cbgrn/grn.cgi/cellular/index
 *   X-CYBOZU-REMOTE-KID: R1000000
 *   X-CYBOZU-REMOTE-KAUTH: abcdefgh
 *  返却されるパス
 *     /R1000000/abcdefgh/cgi-bin/cbgrn/grn.cgi/cellular/index
 *
 * @param    string $page 変換前ページパス
 *
 * @return   string   変換後ページパス
 */
function grn_report_cellular_remote_path($page)
{
    $remote_id = array_key_exists('HTTP_X_CYBOZU_REMOTE_KID', $_SERVER)
        ? $_SERVER['HTTP_X_CYBOZU_REMOTE_KID'] : '';
    $remote_auth = array_key_exists('HTTP_X_CYBOZU_REMOTE_KAUTH', $_SERVER)
        ? $_SERVER['HTTP_X_CYBOZU_REMOTE_KAUTH'] : '';

    if (strcmp($remote_id, '') === 0 || strcmp($remote_auth, '') === 0) {
        return $page;
    }

    if (strpos($page, '/') !== 0) {
        $page = '/' . $page;
    }
    $page = '/' . $remote_id . '/' . $remote_auth . $page;

    return $page;
}


