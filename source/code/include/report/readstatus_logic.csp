<?php
/**
 * Report Application ReadStatus Class
 *
 * @date    2009/10
 * @version 1.0
 * @package grn.report
 */

/** Report Application **/
require_once('report/resources.csp');
require_once('report/table_manager.csp');

/**
 * Read Status Logic Class
 *
 * @package grn.report
 */
class GRN_Report_ReadStatus_Logic
{
    /** Table Name **/
    var $_table_name = null;

    /**
     * Constructor
     */
    function __construct()
    {
        $this->_table_name = 'tab_grn_report_readstatus';
    }

    /**
     * @var self
     */
    private static $_instance = null;

    /**
     * @return GRN_Report_ReadStatus_Logic
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Add Read Status
     *
     * @param  int $user_id   //User ID
     * @param  int $report_id //Report ID
     *
     * @return int    $readstatus_id             //Read Status ID
     */
    function add($user_id, $report_id, $timestamp = null)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        cb_trim_check($user_id, E_GRN_RPRT_INVALID_USER_ID);      //User ID
        cb_trim_check($report_id, E_GRN_RPRT_REPORT_INVALID_ID);  //Report ID

        //Set Time Stamp
        if (is_null($timestamp)) {
            $timestamp = new CB_TimeStampEx();
        }

        //Create Property List
        $property_list[GRN_REPORT_COLUMN_USER] = $user_id;
        $property_list[GRN_REPORT_COLUMN_REPORT] = $report_id;
        $property_list[GRN_REPORT_COLUMN_LAST_TIMESTAMP] = $timestamp->unix_ts;

        //Create New Read Status
        $readstatus_id
            = GRN_Report_Table_Manager::genericCreate(GRN_REPORT_TABLE_READSTATUS,
            $property_list);

        return $readstatus_id;
    }

    /**
     * Update Read Status
     *
     * @param  int $user_id   //User ID
     * @param  int $report_id //Report ID
     *
     * @return int    $readstatus_id           //Read Status ID
     */
    function update(
        $user_id,
        $report_id,
        $timestamp = null,
        $existingReadstatus = null
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        cb_trim_check($user_id, E_GRN_RPRT_INVALID_USER_ID);      //User ID
        cb_trim_check($report_id, E_GRN_RPRT_REPORT_INVALID_ID);  //Report ID

        //Set Time Stamp
        if (is_null($timestamp)) {
            $timestamp = new CB_TimeStampEx();
        }

        //Create Property List
        $property_list[GRN_REPORT_COLUMN_LAST_TIMESTAMP] = $timestamp->unix_ts;

        //Get Read Status
        $readstatus_id = null;
        if ($existingReadstatus && isset($existingReadstatus['id'])) {
            $readstatus_id = $existingReadstatus['id'];
        } else {
            $readstatus =& $this->get($user_id, $report_id);
            $readstatus_id = $readstatus['_id'];
        }

        //Update Read Status
        $ret = GRN_Report_Table_Manager::updateById(GRN_REPORT_TABLE_READSTATUS,
            $readstatus_id, $property_list);

        if ($ret) {
            return $readstatus_id;
        } else {
            return false;
        }
    }

    /**
     * Get Read Status
     *
     * @param  int $user_id   //User ID
     * @param  int $report_id //Report ID
     *
     * @return array  $readstatus               //Read Status Information
     */
    function &get($user_id, $report_id)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        cb_trim_check($user_id, E_GRN_RPRT_INVALID_USER_ID);      //User ID
        cb_trim_check($report_id, E_GRN_RPRT_REPORT_INVALID_ID);  //Report ID

        //Get Database
        $database = GRN_Report_Table_Manager::getDatabase();

        //Create Column List
        $column_list
            = GRN_Report_Table_Manager::getColumnList(GRN_REPORT_TABLE_READSTATUS);
        $column_list = implode(',', $column_list);

        //Create Condition
        $where_string = cb_queryf($database,
            "col_user = '@S' AND col_report = '@S'", $user_id, $report_id);

        //Create Query
        $query = sprintf("SELECT %s FROM %s WHERE %s", $column_list,
            $this->_table_name, $where_string);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            $database->throwerror(['query' => 'query failed: ' . $query]);
        }

        $readstatus = $database->fetch_assoc($result);
        $database->free_result($result);

        return $readstatus;
    }

    /**
     * Delete Read Status
     *
     * @param  int $user_id   //Report ID
     * @param  int $report_id //Form ID
     *
     * @return BOOL   $result                   //Result
     */
    function delete($user_id, $report_id)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        cb_trim_check($user_id, E_GRN_RPRT_INVALID_USER_ID);      //User ID
        cb_trim_check($report_id, E_GRN_RPRT_REPORT_INVALID_ID);  //Report ID

        //Get Read Status
        $readstatus = $this->get($user_id, $report_id);
        if ( ! $readstatus) {
            return false;
        }
        $readstatus_id = $readstatus['_id'];

        //Remove Read Status
        GRN_Report_Table_Manager::removeById(GRN_REPORT_TABLE_READSTATUS,
            $readstatus_id);

        return true;
    }

    /**
     * Delete All Read Status
     *
     * @param  int $report_id //Report ID
     *
     * @return BOOL   $result                    //Result
     */
    function deleteAll($user_id = null, $report_id = null)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        if ( ! is_null($user_id)) {
            cb_trim_check($user_id, E_GRN_RPRT_INVALID_USER_ID);      //User ID
        }
        if ( ! is_null($report_id)) {
            cb_trim_check($report_id,
                E_GRN_RPRT_REPORT_INVALID_ID);  //Report ID
        }

        //Get Database
        $database =& GRN_Report_Table_Manager::getDatabase();

        //Create Condition
        $where_string = "";
        if ( ! is_null($user_id)) {
            $where_string[] = cb_queryf($database, "col_user = '@S'", $user_id);
        }
        if ( ! is_null($report_id)) {
            $where_string[] = cb_queryf($database, "col_report = '@S'",
                $report_id);
        }
        $where_string = implode('AND', $where_string);

        //Remove Report
        GRN_Report_Table_Manager::remove($this->_table_name, $where_string);

        return true;
    }

    function read($user_id, $report_id, $readstatus = null)
    {
        if (is_null($readstatus) || ! is_numeric($readstatus)) {
            $readstatus =& $this->get($user_id, $report_id);
        }

        if ( ! $readstatus) {
            $this->add($user_id, $report_id);
        } else {
            $this->update($user_id, $report_id, null, $readstatus);
        }
    }
}


