<?php
/**
 * Report Application Member Class
 *
 * @data    2009/09
 * @version 1.0
 * @package grn.repot
 */

/** Report Application **/
require_once('report/resources.csp');
require_once('report/table_manager.csp');

/**
 * Member Logic Class
 *
 * @package grn.report
 */
class GRN_Report_Member_Logic
{
    //Member Manager Instance
    var $_member_manager = null;

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {

    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Report_Member_Logic
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Member Manager
     *
     * @return object $member_manager          //Report Manager
     */
    function &_getMemberManager()
    {
        if (is_null($this->_member_manager)) {
            require_once('report/member_manager.csp');
            $this->_member_manager = GRN_Report_Member_Manager::getInstance();
        }

        return $this->_member_manager;
    }

    /**
     * Add Member
     *
     * @return int    $member_id               //Member ID
     */
    function &add($report_id, $user_id)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        //Report ID
        cb_trim_check($report_id, E_GRN_RPRT_REPORT_INVALID_ID);
        //User ID
        cb_trim_check($user_id, E_GRN_RPRT_INVALID_USER_ID);

        //Create Property List
        $property_list[GRN_REPORT_COLUMN_REPORT] = $report_id;
        $property_list[GRN_REPORT_COLUMN_USER] = $user_id;

        //Create New Member
        $member_manager =& $this->_getMembermanager();
        $member_id = $member_manager->create($property_list);

        return $member_id;
    }

    /**
     * Add Multiple Member
     *
     * @param  int $report_id        //Report ID
     * @param  int $user_id_list     //User ID List
     * @param  int $operator_id_list //Operator ID List
     *
     * @return bool
     */
    public function addMulti($report_id, $user_id_list, $operator_id_list)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        //Report ID
        cb_trim_check($report_id, E_GRN_RPRT_REPORT_INVALID_ID);
        //User ID List
        foreach ($user_id_list as $user_id) {
            cb_trim_check($user_id, E_GRN_RPRT_INVALID_USER_ID);
        }
        if ( ! is_array($operator_id_list)) {
            $operator_id_list = [];
        }

        $member_id_list = [];
        $property_list_array = [];
        foreach ($user_id_list as $user_id) {
            //Create Property List
            $property_list = [];
            $property_list[GRN_REPORT_COLUMN_REPORT] = $report_id;
            $property_list[GRN_REPORT_COLUMN_USER] = $user_id;
            $property_list[GRN_REPORT_COLUMN_IS_OPERATOR] = in_array($user_id,
                $operator_id_list) ? 1 : 0;
            $property_list_array[] = $property_list;
        }

        if (count($property_list_array) > 0) {
            $member_manager =& $this->_getMemberManager();
            $member_manager->createMulti($property_list_array);
        }

        return true;
    }

    /**
     * Delete Member
     *
     * @param  int $report_id //Report ID
     * @param  int $user_id   //User ID
     *
     * @return BOOL  $result                         //Result
     */
    function delete($report_id, $user_id)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        //Report ID
        cb_trim_check($report_id, E_GRN_RPRT_REPORT_INVALID_ID);
        //User ID
        cb_trim_check($user_id, E_GRN_RPRT_INVALID_USER_ID);

        //Remove Member
        $member_manager =& $this->_getMemberManager();
        $member_manager->remove($report_id, $user_id);

        return true;
    }

    /**
     * Delete Multiple Member
     *
     * @param  int   $report_id    //Report ID
     * @param  array $user_id_list //User ID List
     *
     * @return BOOL  $result                        //Result
     */
    function deleteMulti($report_id, $user_id_list)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        //Report ID
        cb_trim_check($report_id, E_GRN_RPRT_REPORT_INVALID_ID);
        //User ID List
        foreach ($user_id_list as $user_id) {
            cb_trim_check($user_id, E_GRN_RPRT_INVALID_USER_ID);
        }

        $member_manager =& $this->_getMembermanager();
        $member_manager->removeMulti($report_id, $user_id_list);

        return true;
    }

    /**
     * Delete All Member
     *
     * @param  int $report_id //Report ID
     *
     * @return BOOL   $result                   //Result
     */
    function deleteAll($report_id)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        //Report ID
        cb_trim_check($report_id, E_GRN_RPRT_REPORT_INVALID_ID);

        $member_manager =& $this->_getMembermanager();
        $member_manager->removeAll($report_id);

        return true;
    }

    function changeOrder($report_id, $member_id_list)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');

        //Report ID
        cb_trim_check($report_id, E_GRN_RPRT_REPORT_INVALID_ID);

        if ( ! is_array($member_id_list) || count($member_id_list) == 0) {
            return;
        }

        $member_manager = $this->_getMemberManager();
        $member_manager->changeOrder($report_id, $member_id_list);
    }

    function updateOperator($report_id, $operator_values)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');

        //Report ID
        cb_trim_check($report_id, E_GRN_RPRT_REPORT_INVALID_ID);

        if ( ! is_array($operator_values) || count($operator_values) == 0) {
            return;
        }

        $member_manager = $this->_getMembermanager();
        $member_manager->updateOperator($report_id, $operator_values);
    }
}
