<?php

/**
 * Report Application Controller Utility Class
 *
 * @version 1.0
 * @package grn.report
 */
/** Report Application * */
require_once('grn/controller.csp');
require_once('report/resources.csp');
require_once('grn/application.csp');
require_once('report/table_manager.csp');
require_once('report/error_code.csp');
require_once('report/item_resources.csp');

use grn\grn\MemberLogic;

/**
 *  Controller Utility Base Class
 *
 * @package grn.report
 */
class GRN_Report_Controller_Utility_Base
{

    /** Table Name * */
    var $_table_name = null;
    /** Logic Base * */
    var $_logic_base = null;

    /**
     * Constructor
     *
     * @return none
     */
    function __construct($table_name, & $logic_base)
    {
        //Initialize Table Name
        $this->_table_name = $table_name;

        //Initialize Logic Bse
        $this->_logic_base = $logic_base;
    }

    /**
     * Get Logic Base
     *
     * @param  none
     *
     * @return object $logic_base                //Logic Base
     */
    function getLogicBase()
    {
        return $this->_logic_base;
    }

    /**
     * create Column List
     *
     * @param  array $translation_map //Model <=> View Translation Map
     *
     * @return array  $column_list               //Request Column List
     */
    function createColumnList($translation_map)
    {
        //Get All Column List
        $logic_base = $this->getLogicBase();
        $column_list = $logic_base->getColumnlist();

        //Create Request Column List
        foreach (array_keys($column_list) as $key) {
            $column_name = str_replace('col_', '', $column_list[$key]);
            if ( ! in_array($column_name, $translation_map)) {
                unset($column_list[$key]);
            }
        }

        //Return Column List
        return $column_list;
    }

    /**
     * Get View
     *
     * @param  array $data            //Target Data
     * @param  array $translation_map //Model <=> View Translation Map
     *
     * @return array  $data_for_view             //Target Data for View
     */
    function _getView($data, & $translation_map)
    {
        $data_for_view = [];

        //Set Teble Name
        $data_for_view['table'] = $this->_table_name;

        //Create Parameter Translation for Data
        foreach ($translation_map as $view => $model) {
            if ($model !== '_id') {
                $model = 'col_' . $model;
            }

            switch ($model) {
                case '_id':
                    $data_for_view[$view] = $data['_id'];
                    break;
                case 'col_creator':
                case 'col_modifier':
                    //Get User ID
                    $uid = $data[$model];
                    if ($uid) {
                        $data_for_view[$view] = $uid;
                    }
                    break;
                case 'col_creator_name':
                case 'col_modifier_name':
                    //Get User ID
                    $data_for_view[$view] = $data[$model];
                    $model = str_replace('_name', '', $model);
                    $uid = $data[$model];

                    if ($uid) {
                        //Get User Information
                        global $G_container_base;
                        $grn_uum = $G_container_base->getInstance('uum');
                        $user = $grn_uum->getUserInfo($uid,
                            [GRN_REPORT_COLUMN_DISPLAY_NAME]);
                        if ($user) {
                            $data_for_view[$view]
                                = $user[GRN_REPORT_COLUMN_DISPLAY_NAME];
                        }
                    }
                    break;
                case 'col_ctime':
                case 'col_mtime':
                    $time = $data[$model];
                    $data_for_view[$view] = new CB_TimeStamp();
                    $data_for_view[$view]->unix_ts = $time;
                    break;
                case 'col_settings':
                    $data_for_view[$view] = [];
                    $settings = $data[$model];
                    if (strlen($settings) !== 0) {
                        $data_for_view[$view] = cb_unserialize($settings,
                            ["allowed_classes" => false]);
                    }
                    break;
                case 'col_display_name':
                    //if ($data['col_type'] == 1)
                    if ($data['col_type'] == 1
                        && (is_null($data[$model])
                            || strlen($data[$model]) <= 0)
                    ) {
                        $data_for_view[$view]
                            = cb_plain_msg(GRN_REPORT_MODULE_ID,
                            'form_subject');
                    } else {
                        $data_for_view[$view] = $data[$model];
                    }
                    break;
                case 'col_display_type':
                    if (array_key_exists('col_foreign_key', $data)) {
                        $foreign_key = $data['col_foreign_key'];
                        $data_for_view[$view]
                            = cb_plain_msg(GRN_REPORT_MODULE_ID,
                            $foreign_key);
                    } elseif (array_key_exists('col_data_type', $data)) {
                        $data_type = $data['col_data_type'];
                        $data_for_view[$view]
                            = cb_plain_msg(GRN_REPORT_MODULE_ID,
                            $data_type);
                    }
                    break;
                case 'col_file':
                case 'col_file_info':
                    //Get GRN_Report_File Object
                    $item_data_file_for_view['file_info'] = null;
                    if (array_key_exists('col_file', $data)) {
                        require_once('report/file.csp');
                        $file_manager = new GRN_Report_FileManager_Core();
                        $file_table = $file_manager->getFileTable();
                        $file_object = $file_table->getRow($data['col_file']);

                        //Set File Information
                        if ($file_object) {
                            $file_info
                                = grn_make_attached_file_info($file_object,
                                'report');
                            $data_for_view['file_info'] = $file_info;
                            $data_for_view['file'] = $data['col_file'];
                        }
                    }
                    break;
                default:
                    $data_for_view[$view] = $data[$model];
                    break;
            }
        }

        //Return Data View
        return $data_for_view;
    }

}

/**
 *  Form Controller Utility Class
 *
 * @package grn.report
 */
class GRN_Report_Form_Controller_Utility
    extends GRN_Report_Controller_Utility_Base
{

    /** Form Logic Instance * */
    var $_form_logic_base = null;

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
        //Get Logic Base Instance
        require_once('report/form_logic_base.csp');
        $logic_base = GRN_Report_Form_Logic_Base::getInstance();

        //Initialize Parent Class
        parent::__construct(GRN_REPORT_TABLE_FORM, $logic_base);
    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Report_Form_Controller_Utility  $instance  Instance of GRN_Report_Form_Controller_Utility
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * @access private
     */
    var $_controller_util = null;

    /**
     * Get GRN_Report_ControllerUtil
     *
     * @param  string $page //Page Name
     *
     * @return object $instance                 //Instance of GRN_Report_Form_Controller_Utility
     * @access private
     */
    function _getControllerUtil($page = null)
    {
        if (is_null($this->_controller_util)) {
            $this->_controller_util = new GRN_Report_ControllerUtil($page);
        }

        return $this->_controller_util;
    }

    /**
     * Get Form View
     *
     * @param  int   $form_id         //Form ID
     * @param  array $translation_map //Model <=> View Translation Map
     * @param  int   $category_id     //Category ID
     * @param  mixed $option          //Option (array('list'=>array('offset'=>'', 'limit'=>''), 'sort'=>array('column'=>'', 'order'=>''), 'condition'=>array('column'=>'', 'value'=>''))
     * @param  bool  $refresh         //Refresh Flag
     * @param  int   $lock_mode       //Lock Mode
     *
     * @return array  $form_view                 //Form for View
     */
    function getView(
        $form_id,
        $translation_map,
        $category_id = null,
        $option = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Create Default Condition Option
        if ( ! array_key_exists('condition', $option)) {
            $option['condition'] = [];
            $option['condition'][] = [
                'column'   => 'col_deleted',
                'value'    => '0',
                'operator' => '='
            ];
        }

        //Create Column List
        $column_list = $this->createColumnlist($translation_map);

        //Get Form
        $form_logic_base = $this->getLogicBase();
        if (is_null($category_id)) {
            $form = $form_logic_base->getDirect($form_id, $column_list, $option,
                $lock_mode);
        } else {
            $form = &$form_logic_base->get($form_id, $category_id, $column_list,
                $option, $refresh, $lock_mode);
        }

        //Get Form View
        $form_for_view = $this->_getView($form, $translation_map);

        //Return Form View
        return $form_for_view;
    }

    /**
     * Get Form List View
     *
     * @param  array $translation_map //Model <=> View Translation Map
     * @param  int   $category_id     //Category ID
     * @param  mixed $option          //Option (array('list'=>array('offset'=>'', 'limit'=>''), 'sort'=>array('column'=>'', 'order'=>''), 'condition'=>array('column'=>'', 'value'=>''))
     * @param  bool  $refresh         //Refresh Flag
     * @param  int   $lock_mode       //Lock Mode
     *
     * @return array  $form_view                 //Form for View
     */
    function getListView(
        $translation_map,
        $category_id = null,
        $option = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $form_list_for_view = [];

        //Create Default Condition Option
        if ( ! array_key_exists('condition', $option)) {
            $option['condition'] = [];
            $option['condition'][] = [
                'column'   => 'col_deleted',
                'value'    => '0',
                'operator' => '='
            ];
        }

        //Create Column List
        $column_list = $this->createColumnlist($translation_map);

        //Get Form List
        $form_list = [];
        $form_logic_base = $this->getLogicBase();
        $form_list = &$form_logic_base->getList($category_id,
            $column_list, $option, $refresh, $lock_mode);

        //Create Parameter Translation for Form List
        foreach (array_keys($form_list) as $form_id) {
            $form_list_for_view[$form_id]
                = $this->_getView($form_list[$form_id], $translation_map);
        }

        //Return Form List View
        return $form_list_for_view;
    }

    /**
     * Get Recent Used Form List View
     *
     * @param  array $translation_map
     * @param  int   $user_id //User ID
     *
     * @return array  $form_view                 //Form for View
     */
    function getRecentListView($translation_map, $user_id)
    {
        $form_list_for_view = [];

        require_once('report/form_logic.csp');
        $form_logic = GRN_Report_Form_Logic::getInstance();
        $form_list = $form_logic->getRecentUserFormList($user_id);

        foreach (array_keys($form_list) as $form_id) {
            if ( ! $form_list[$form_id]['col_deleted']) {
                $form_list_for_view[$form_id]
                    = $this->_getView($form_list[$form_id], $translation_map);
            }
        }

        return $form_list_for_view;
    }

    /**
     * Import Items into DataBase
     *
     *   Caution! Some of columns will be updated with the undermentioned value
     *            when theirs value isn't passed.
     *
     * @param  object $logic //Item Logic
     * @param  array  $items //Items Information List
     *
     * @access private
     */
    function _importItemsIntoDB(& $logic, & $form_id, & $items)
    {
        //Get Exist Item ID List
        $exist_item_column_list = [
            '_id' => '_id',
        ];
        $exist_item_list = $logic->getList($form_id,
            $exist_item_column_list);

        $i18n = CB_I18N::getInstance();
        foreach ($items as $item) {
            if ( ! array_key_exists('col_data_type', $item)
                 || '' == cb_trim($item['col_data_type'])
                 || $i18n->getResource('message', GRN_REPORT_MODULE_ID,
                    $item['col_data_type'], false) === false
            ) {
                //項目が不正です。
                require_once('report/error_code.csp');
                cb_throw_error(E_GRN_RPRT_XML_INVALID_ITEM,
                    null, null, null,
                    ['parameter' => 'data_type']);
            }

            //Create Properties
            $properties = [];
            $properties[GRN_REPORT_COLUMN_DATA_TYPE]
                = $item['col_data_type'];
            $properties[GRN_REPORT_COLUMN_TYPE] = $item['col_type'];
            $properties[GRN_REPORT_COLUMN_DISPLAY_NAME]
                = $item['col_display_name'];
            $properties[GRN_REPORT_COLUMN_OPTION_STRING]
                = array_key_exists('col_option_string',
                $item) ? $item['col_option_string'] : '';
            $properties[GRN_REPORT_COLUMN_OPTION_STRING_TYPE]
                = array_key_exists('col_option_string_type',
                $item) ? $item['col_option_string_type'] : 0;
            $properties[GRN_REPORT_COLUMN_DESCRIPTION]
                = array_key_exists('col_description',
                $item) ? $item['col_description'] : '';
            $properties[GRN_REPORT_COLUMN_DESCRIPTION_TYPE]
                = array_key_exists('col_description_type',
                $item) ? $item['col_description_type'] : 0;
            $properties[GRN_REPORT_COLUMN_DESCRIPTION_EDITOR]
                = array_key_exists('col_description_editor',
                $item) ? $item['col_description_editor'] : 0;
            $properties[GRN_REPORT_COLUMN_ATTACH_FILE]
                = array_key_exists('col_attach_file',
                $item) ? $item['col_attach_file'] : null;
            $properties[GRN_REPORT_COLUMN_ATTACH_FILE_VIEW]
                = array_key_exists('col_attach_file_view',
                $item) ? $item['col_attach_file_view'] : null;
            $properties[GRN_REPORT_COLUMN_SETTINGS]
                = array_key_exists('col_settings',
                $item) ? $item['col_settings'] : null;

            $properties[GRN_REPORT_COLUMN_REQUIRED]
                = array_key_exists('col_required',
                $item) ? $item['col_required'] : 0;
            $properties[GRN_REPORT_COLUMN_LIST_INDEX] = $item['col_list_index'];

            //Add or Modify Item
            if (array_key_exists('_id', $item)
                && is_array($exist_item_column_list)
                && array_key_exists($item['_id'], $exist_item_list)
            ) {
                // Modify
                switch ($item['col_type']) {
                    case GRN_REPORT_ITEM_TYPE_STANDARD:
                    case GRN_REPORT_ITEM_TYPE_ITEM:
                        $item_id = $item['_id'];
                        $logic->modifyByImport($item_id, $form_id, $properties);
                        break;
                    case GRN_REPORT_ITEM_TYPE_BLANK:
                        $item_id = $item['_id'];
                        break;
                    default:
                        //項目が不正です。,null,'type'
                        require_once('report/error_code.csp');
                        cb_throw_error(E_GRN_RPRT_XML_INVALID_ITEM,
                            null, null, null,
                            ['parameter' => 'type']);
                        break;
                }
                unset($exist_item_list[$item_id]);
            } else {
                // Add New
                switch ($item['col_type']) {
                    case GRN_REPORT_ITEM_TYPE_STANDARD:
                    case GRN_REPORT_ITEM_TYPE_ITEM:
                    case GRN_REPORT_ITEM_TYPE_BLANK:
                        $item_id = $logic->addByImport($form_id, $properties);
                        break;
                    default:
                        //項目が不正です。'type'
                        require_once('report/error_code.csp');
                        cb_throw_error(E_GRN_RPRT_XML_INVALID_ITEM,
                            null, null, null,
                            ['parameter' => 'type']);
                        break;
                }
            }
        }

        // Delete Extra Items
        if (is_array($exist_item_column_list) && 0 < count($exist_item_list)) {
            $extra_key_list = array_keys($exist_item_list);
            $logic->deleteMulti($extra_key_list);
        }
    }

    /**
     * Import Forms into Database
     *
     * @param  array $forms       //Imported Forms List
     * @param  int   $category_id //Category ID
     *
     * @access private
     */
    function _importFormsIntoDB(& $forms, & $category_id)
    {
        require_once('fw/string_util.csp');
        require_once('report/item_resources.csp');

        //Get Logic
        require_once('report/form_logic.csp');
        require_once('report/item_logic.csp');
        $form_logic = GRN_Report_Form_Logic::getInstance();
        $item_logic = GRN_Report_item_Logic::getInstance();

        //---------------------------------------------------------------------------
        //    準備
        //---------------------------------------------------------------------------
        //++ 登録済み報告フォームリストを作成 +++++++++++++++++++++++++++
        // Get Existing Form List.          ID=>(Foreign Key, Category ID)
        $form_column_list = [
            '_id'             => '_id',
            'col_foreign_key' => 'col_foreign_key',
            'col_category'    => 'col_category',
        ];
        $condition = [
            0 => [
                'column'   => 'col_type',
                'value'    => GRN_REPORT_FORM_TYPE_FORM,
                'operator' => '='
            ],
            1 => [
                'column'   => 'col_deleted',
                'value'    => 0,
                'operator' => '='
            ],
        ];
        $option = ['condition' => $condition];

        $form_logic_base = $this->getLogicBase();
        $exist_form_list = $form_logic_base->getList(null, $form_column_list,
            $option);

        // Transform Existing Form List.    Foreign Key=>(ID, Category ID)
        $fk_sort_exist_forms = [];
        foreach ($exist_form_list as $exist_form) {
            $fk_sort_exist_forms[$exist_form['col_foreign_key']] = $exist_form;
        }
        unset($exist_form_list);

        //---------------------------------------------------------------------------
        //    読み込みを実行
        //---------------------------------------------------------------------------
        //Get Import Category ID
        if (GRN_REPORT_CATEGORY_NONPARTY_ID == $category_id) {
            //Non Party Category
            $category_id = null;
        } else {
            //Check Import Category ID Exists
            require_once('report/category_logic_base.csp');
            $category_logic_base
                = GRN_Report_Category_Logic_Base::getInstance();
            $category = &$category_logic_base->get($category_id);
        }

        foreach ($forms as $form) {
            //Get Form ID
            //Check Duplication of Form Foreign Key
            $form_id = null;
            if (array_key_exists($form['col_foreign_key'],
                $fk_sort_exist_forms)
            ) {
                //同一カテゴリならば上書き、それ以外は重複エラー
                if ($category_id
                    != $fk_sort_exist_forms[$form['col_foreign_key']]['col_category']
                ) {
                    require_once('report/error_code.csp');
                    cb_throw_error(E_GRN_RPRT_XML_DUPLICATION_FORM_FOREIGN_KEY,
                        null,
                        ['form_foreign_key' => $form['col_foreign_key']]
                    );
                }
                $form_id
                    = $fk_sort_exist_forms[$form['col_foreign_key']]['_id'];
            }

            // Import Form Informaion
            if ($form_id) {
                // Modify
                // --Form
                $a = $form_logic->modifyByImport($form_id, $form, $category_id);
                // --Item
                $item_list = [];
                if (array_key_exists('items', $form)) {
                    $item_list = $form['items'];
                }
                $this->_importItemsIntoDB($item_logic, $form_id, $item_list);
            } else {
                // Add New Form Informaion
                // --Form
                $form_id = $form_logic->addByImport($form, $category_id);

                // --Items

                $item_list = [];
                if (array_key_exists('items', $form)) {
                    $item_list = $form['items'];
                }
                $this->_importItemsIntoDB($item_logic, $form_id, $item_list);
            }
        }
    }

    /**
     * Import Item from XML File
     *
     * @param  object $xml_reader //XML Writer
     *
     * @return array                            //Item Information
     * @access private
     */
    function _importItem(& $xml_reader)
    {
        $item = [];
        $item['_id'] = $xml_reader->getAttribute('id');
        $item['col_attach_file']
            = $xml_reader->getAttribute('attach_file');
        $item['col_attach_file_view']
            = $xml_reader->getAttribute('attach_file_view');
        $item['col_description_editor']
            = $xml_reader->getAttribute('description_editor');
        $item['col_description_type']
            = $xml_reader->getAttribute('description_type');
        $item['col_option_string_type']
            = $xml_reader->getAttribute('option_string_type');
        $item['col_required'] = $xml_reader->getAttribute('required');
        $item['col_type'] = $xml_reader->getAttribute('type');
        $item['col_list_index']
            = $xml_reader->getAttribute('list_index');

        $item['col_description'] = null;
        $item['col_display_name'] = null;
        $item['col_data_type'] = null;
        $item['col_option_string'] = null;
        $item['col_settings'] = null;

        $controller_util = $this->_getControllerUtil();
        while ($xml_reader->read()) {
            if (XMLReader::COMMENT == $xml_reader->nodeType
                || XMLReader::SIGNIFICANT_WHITESPACE == $xml_reader->nodeType
            ) {
                continue;
            }
            switch ($tag_name = $xml_reader->name) {
                case 'description':
                    $item['col_description']
                        = $controller_util->_getValue($xml_reader,
                        'description');
                    break;
                case 'display_name':
                    $item['col_display_name']
                        = $controller_util->_getValue($xml_reader,
                        'display_name');
                    break;
                case 'data_type':
                    $item['col_data_type']
                        = $controller_util->_getValue($xml_reader, 'data_type');
                    break;
                case 'option_string':
                    $item['col_option_string']
                        = $controller_util->_getValue($xml_reader,
                        'option_string');
                    break;
                case 'settings':
                    $item['col_settings']
                        = $controller_util->_getValue($xml_reader, 'settings');
                    break;
                case 'item':
                    if (XMLReader::END_ELEMENT == $xml_reader->nodeType) {
                        return $item;
                    }
                    break;
                default:
                    // XMLファイルが不正です
                    require_once('report/error_code.csp');
                    cb_throw_error(E_GRN_RPRT_XML_TAG_NAME_INVALID,
                        null, null, null,
                        ['tag_name' => $tag_name]);
                    break;
            }
        }
        // ノードが完了していません。
        require_once('report/error_code.csp');
        cb_throw_error(E_GRN_RPRT_XML_NODE_NOT_FINISH);
    }

    /**
     * Import Items from XML File
     *
     * @param  object $xml_reader //XML Writer
     *
     * @return array                            // Items Information
     * @access private
     */
    function _importItems(& $xml_reader)
    {
        $controller_util = $this->_getControllerUtil();
        $items = [];
        while ($xml_reader->read()) {
            if (XMLReader::COMMENT == $xml_reader->nodeType
                || XMLReader::SIGNIFICANT_WHITESPACE == $xml_reader->nodeType
            ) {
                continue;
            }

            switch ($tag_name = $xml_reader->name) {
                case 'item':
                    $items[] = $this->_importItem($xml_reader);
                    break;

                case 'items':
                    if (XMLReader::END_ELEMENT == $xml_reader->nodeType) {
                        return $items;
                    }
                    break;
                default:
                    // XMLファイルが不正です
                    require_once('report/error_code.csp');
                    cb_throw_error(E_GRN_RPRT_XML_TAG_NAME_INVALID,
                        null, null, null,
                        ['tag_name' => $tag_name]);
                    break;
            }
        }
        // ノードが完了していません。
        require_once('report/error_code.csp');
        cb_throw_error(E_GRN_RPRT_XML_NODE_NOT_FINISH);
    }

    /**
     * Import Form from XML File
     *
     * @param  object $xml_reader //XML Writer
     *
     * @return array                            // Icon Information
     * @access private
     */
    function _importForm(& $xml_reader)
    {
        $form = [];
        $form['col_active'] = $xml_reader->getAttribute('active');
        $form['col_enable_follow']
            = $xml_reader->getAttribute('enable_follow');
        $form['col_enable_member']
            = $xml_reader->getAttribute('enable_member');
        $form['col_enable_partner']
            = $xml_reader->getAttribute('enable_partner')
            ?: 0;
        $form['col_list_index'] = $xml_reader->getAttribute('list_index');

        $form['col_name'] = null;
        $form['col_foreign_key'] = null;
        $form['category_foreign_key'] = null;
        $form['col_memo'] = null;
        $form['col_admin_memo'] = null;

        $form['items'] = [];

        $controller_util = $this->_getControllerUtil();
        while ($xml_reader->read()) {
            if (XMLReader::COMMENT == $xml_reader->nodeType
                || XMLReader::SIGNIFICANT_WHITESPACE == $xml_reader->nodeType
            ) {
                continue;
            }

            switch ($tag_name = $xml_reader->name) {
                case 'name':
                    $form['col_name'] = $controller_util->_getValue($xml_reader,
                        'name');
                    break;
                case 'foreign_key':
                    $form['col_foreign_key']
                        = $controller_util->_getValue($xml_reader,
                        'foreign_key');
                    break;
                case 'category_foreign_key':
                    $form['category_foreign_key']
                        = $controller_util->_getValue($xml_reader,
                        'category_foreign_key');
                    break;
                case 'memo':
                    $form['col_memo'] = $controller_util->_getValue($xml_reader,
                        'memo');
                    break;
                case 'admin_memo':
                    $form['col_admin_memo']
                        = $controller_util->_getValue($xml_reader,
                        'admin_memo');
                    break;
                case 'items':
                    $form['items'] = $this->_importItems($xml_reader);
                    break;
                case 'form':
                    if (XMLReader::END_ELEMENT == $xml_reader->nodeType) {
                        return $form;
                    }
                    break;
                default:
                    // XMLファイルが不正です
                    require_once('report/error_code.csp');
                    cb_throw_error(E_GRN_RPRT_XML_TAG_NAME_INVALID,
                        null, null, null,
                        ['tag_name' => $tag_name]);
                    break;
            }
        }
        // ノードが完了していません。
        require_once('report/error_code.csp');
        cb_throw_error(E_GRN_RPRT_XML_NODE_NOT_FINISH);
    }

    /**
     * Import Forms from XML File
     *
     * @param  object $xml_reader //XML Writer
     *
     * @access private
     */
    function _importForms(& $xml_reader)
    {
        $forms = [];
        while ($xml_reader->read()) {
            if (XMLReader::COMMENT == $xml_reader->nodeType
                || XMLReader::SIGNIFICANT_WHITESPACE == $xml_reader->nodeType
            ) {
                continue;
            }

            switch ($tag_name = $xml_reader->name) {
                case 'form':
                    $forms[] = $this->_importForm($xml_reader);
                    break;
                case 'forms':
                    if (XMLReader::END_ELEMENT == $xml_reader->nodeType) {
                        return $forms;
                    }
                default:
                    // XMLファイルが不正です
                    require_once('report/error_code.csp');
                    cb_throw_error(E_GRN_RPRT_XML_TAG_NAME_INVALID,
                        null, null, null,
                        ['tag_name' => $tag_name]);
                    break;
            }
        }
        // ノードが完了していません。
        require_once('report/error_code.csp');
        cb_throw_error(E_GRN_RPRT_XML_NODE_NOT_FINISH);
    }

    /**
     * Import Form Information from XML File
     *
     * @param  string $file_name   //File Name
     * @param  int    $category_id //Category ID
     *
     * @access private
     */
    function import(& $file_name, $category_id)
    {
        // Check Category ID
        if ($category_id == GRN_REPORT_CATEGORY_ROOT_ID) {
            //Invalid Category
            require_once('report/error_code.csp');
            cb_throw_error(E_GRN_RPRT_XML_INVALID_CATEGORY);
        }

        // Get Form Information from XML File
        $xml_reader = new XMLReader();
        if ( ! $xml_reader->open($file_name)) {
            //Fail to open file
            require_once('report/error_code.csp');
            cb_throw_error(E_GRN_RPRT_XML_OPEN_FILE_FAILED);
        }

        $forms = [];
        while ($xml_reader->read()) {
            if (XMLReader::COMMENT == $xml_reader->nodeType
                || XMLReader::SIGNIFICANT_WHITESPACE == $xml_reader->nodeType
            ) {
                continue;
            }

            switch ($tag_name = $xml_reader->name) {
                case 'forms':
                    $forms = $this->_importForms($xml_reader);
                    break;
                default:
                    // XMLファイルが不正です
                    require_once('report/error_code.csp');
                    cb_throw_error(E_GRN_RPRT_XML_TAG_NAME_INVALID,
                        null, null, null,
                        ['tag_name' => $tag_name]);
                    break;
            }
        }
        $xml_reader->close();

        // Import Forms into Database
        if (0 < count($forms)) {
            // Override form if its foreign key is the same
            $foreign_keys = [];
            foreach ($forms as $key => $form) {
                $fk = $form['col_foreign_key'];
                if (count($foreign_keys)
                    && array_key_exists($fk, $foreign_keys)
                ) {
                    unset($forms[$foreign_keys[$fk]]);
                }
                $foreign_keys[$fk] = $key;
            }

            $this->_importFormsIntoDB($forms, $category_id);
        }

        //監査
        foreach (array_keys($forms) as $key) {
            //報告フォーム
            $inspections['form_foreign_key'][$forms[$key]['col_foreign_key']]
                = $forms[$key]['col_foreign_key'];
            //報告項目
            $inspections['items_data_type'][$forms[$key]['col_foreign_key']]
                = null;

            if (array_key_exists('items', $forms[$key])
                && is_array($forms[$key]['items'])
                && count($forms[$key]['items']) > 0
            ) {
                //報告項目
                foreach (array_keys($forms[$key]['items']) as $item_key) {
                    $inspections['items_data_type'][$forms[$key]['col_foreign_key']][]
                        = $forms[$key]['items'][$item_key]['col_data_type'];
                }
                $inspections['items_data_type'][$forms[$key]['col_foreign_key']]
                    = implode('/',
                    $inspections['items_data_type'][$forms[$key]['col_foreign_key']]);
            }
        }

        //監査する
        require_once('report/inspection.csp');
        $inspection = GRN_Report_Form_Inspection::getInstance();
        if ($inspection->isEnabled() && isset($inspections)) {
            $message_type = 'form_import';

            $message_args['forms'] = $inspections['form_foreign_key'];
            $message_args['items'] = $inspections['items_data_type'];

            //Record Inspection
            $inspection->record($message_type, $message_args);
        }
    }

    //-- Export Functions -------------------------------

    /**
     * Export Item Settings into XML File
     *
     * @param  object $xml_writer //XML Writer
     * @param  array  $item       //Item Information
     *
     * @access private
     */
    function _exportItemSettings(& $xml_writer, & $item)
    {
        $item_settings = $item['i_col_settings'];
        $treated_item_settings = null;
        if (0 < strlen($item_settings)) {
            require_once('report/item_resources.csp');
            $data_type = $item['i_col_data_type'];
            $item_util = grn_report_get_item_util($data_type);

            // Write Settings
            $controller_util = $this->_getControllerUtil();
            $controller_util->_writeCDATAElement($xml_writer, 'settings',
                $item_settings);             // Serilaized Settings
        }
    }

    /**
     * Export Item Information into XML File
     *
     * @param  object $xml_writer //XML Writer
     * @param  array  $item       //Item Information
     *
     * @access private
     */
    function _exportItem(& $xml_writer, & $item)
    {
        $controller_util = $this->_getControllerUtil();

        $xml_writer->startElement('item');                                                                          // <item>
        $controller_util->_writeAttribute($xml_writer, 'id',
            $item['i__id']);                                       // Item ID
        $controller_util->_writeAttribute($xml_writer, 'description_editor',
            $item['i_col_description_editor']);    // Description Editor Type
        $controller_util->_writeAttribute($xml_writer, 'description_type',
            $item['i_col_description_type']);        // Description Type to Display
        $controller_util->_writeAttribute($xml_writer, 'option_string_type',
            $item['i_col_option_string_type']);    // Option String Display Type
        $controller_util->_writeAttribute($xml_writer, 'required',
            $item['i_col_required']);                        // Required
        $controller_util->_writeAttribute($xml_writer, 'type',
            $item['i_col_type']);                                // Type
        $controller_util->_writeAttribute($xml_writer, 'list_index',
            $item['i_col_list_index']);                    // List Index

        $controller_util->_writeCDATAElement($xml_writer, 'description',
            $item['i_col_description']);               // Description
        $controller_util->_writeCDATAElement($xml_writer, 'display_name',
            $item['i_col_display_name']);             // Display Name
        $controller_util->_writeCDATAElement($xml_writer, 'data_type',
            $item['i_col_data_type']);                   // Data Type
        $controller_util->_writeCDATAElement($xml_writer, 'option_string',
            $item['i_col_option_string']);           // Option String

        $this->_exportItemSettings($xml_writer,
            $item);                                      // Settings

        $xml_writer->endElement();                                                                                  // </item>
    }

    /**
     * Export Items Information into XML File
     *
     * @param  object $xml_writer //XML Writer
     * @param  array  $item_list  //Items
     *
     * @access private
     */
    function _exportItems(& $xml_writer, & $item_list)
    {
        //Write Items
        $xml_writer->startElement('items');                     //<items>

        foreach ($item_list as $item) {
            //Write Item
            $this->_exportItem($xml_writer, $item);
        }
        $xml_writer->endElement();                              //</items>
    }

    /**
     * Export Form Information into XML File
     *
     * @param  object $xml_writer //XML Writer
     * @param  array  $form       //Form Information
     *
     * @access private
     */
    function _exportForm(& $xml_writer, & $form)
    {
        //Write Form
        $controller_util = $this->_getControllerUtil();

        $xml_writer->startElement('form');                                                              // <form>

        $controller_util->_writeattribute($xml_writer, 'active',
            $form['f_col_active']);              // Form Active
        $controller_util->_writeattribute($xml_writer, 'enable_follow',
            $form['f_col_enable_follow']);  // Enable Follow
        $controller_util->_writeattribute($xml_writer, 'enable_member',
            $form['f_col_enable_member']);  // Enable Member
        $controller_util->_writeattribute($xml_writer, 'enable_partner',
            $form['f_col_enable_partner']);  // Enable Partner
        $controller_util->_writeattribute($xml_writer, 'list_index',
            $form['f_col_list_index']);      // Form List Index
        $controller_util->_writeCDATAElement($xml_writer, 'name',
            $form['f_col_name']);        // Form Name
        $controller_util->_writeCDATAElement($xml_writer, 'foreign_key',
            $form['f_col_foreign_key']); // Form Foreign Key
        $controller_util->_writeCDATAElement($xml_writer, 'memo',
            $form['f_col_memo']);        // Form Memo
        $controller_util->_writeCDATAElement($xml_writer, 'admin_memo',
            $form['f_col_admin_memo']);  // Form Admin Memo
        // Get Form ID
        $form_id = $form['f__id'];

        // --Items
        $item_list = $form['items'];

        if (0 < count($item_list)) {
            $this->_exportItems($xml_writer, $item_list);
        }

        $xml_writer->endElement();    // </form>
    }

    /**
     * Export Forms Information into XML File
     *
     * @param  object $xml_writer  //XML Writer
     * @param  int    $category_id //Category ID
     *
     * @access private
     */
    function _exportForms(& $xml_writer, & $category_id)
    {
        // Get Form List that have NO Deleted Flag.
        $option = [
            'condition' => [
                0 => [
                    'column'   => 'f.col_deleted',
                    'value'    => '0',
                    'operator' => '='
                ],
                1 => [
                    'column'   => 'f.col_type',
                    'value'    => '0',
                    'operator' => '='
                ],
            ],
        ];

        require_once('report/form_logic_base.csp');
        $form_logic_base = GRN_Report_Form_Logic_Base::getInstance();
        $form_list = $form_logic_base->getListEx($category_id, [],
            $option, $refresh = true);

        // Write Forms
        $xml_writer->startElement('forms');                     // <forms>
        foreach ($form_list as $form) {
            $this->_exportForm($xml_writer, $form);
        }

        $xml_writer->endElement();                              // </forms>
    }

    /**
     * Export Forms Information into XML File
     *
     * @param  int    $category_id //Category ID to Make a Short List of Form
     * @param  string $file_name   //File Name to Write Data
     */
    function export($category_id, $file_name)
    {
        //Open XML Document
        $xml_writer = new XMLWriter();
        $xml_writer->openUri($file_name);
        $xml_writer->setIndentString(' ');
        $xml_writer->setIndent(true);
        $xml_writer->startDocument('1.0', 'UTF-8', 'yes');

        //Write
        $this->_exportForms($xml_writer, $category_id);

        //End XML Document
        $xml_writer->endDocument();
        $xml_writer->flush();
    }

    /**
     * Get Form
     *
     * @param  int $form_id
     *
     * @return array  $form
     */
    public function getSimpleView($form_id)
    {
        $translation_map_form = [
            'fid'                  => '_id',      //Form ID
            'active'               => 'active',   //Form Active
            'admin_memo'           => 'admin_memo',
            'creator'              => 'creator',
            'creator_foreign_key'  => 'creator_foreign_key',
            'creator_name'         => 'creator_name',
            'ctime'                => 'ctime',
            'deleted'              => 'deleted',  //Form Deleted
            'enable_follow'        => 'enable_follow', //Enable Follow
            'enable_member'        => 'enable_member',
            'enable_partner'       => 'enable_partner',
            'foreign_key'          => 'foreign_key',
            'category'             => 'category', //Category ID
            'memo'                 => 'memo',
            'modifier'             => 'modifier',
            'modifier_foreign_key' => 'modifier_foreign_key',
            'modifier_name'        => 'modifier_name',
            'mtime'                => 'mtime',
            'name'                 => 'name', //Form Name
        ];
        $option = [
            'condition' => [
                '0' => [
                    'column'   => 'col_type',
                    'value'    => '0',
                    'operator' => '='
                ]
            ]
        ];
        $form = $this->getView($form_id, $translation_map_form,
            null, $option);

        return $form;
    }

    public function checkCategory($category_id)
    {
        if (GRN_REPORT_CATEGORY_NONPARTY_ID != $category_id) {
            //Check Category Exists
            require_once('report/category_logic_base.csp');
            $category_logic_base
                = GRN_Report_Category_Logic_Base::getInstance();
            $category =& $category_logic_base->get($category_id);
        }
    }

    /**
     * Set Post Parameters to Form View
     *
     * @param array $form_for_view Form View
     * @param array $params        Post Parameters
     */
    public function setParameters(& $form_for_view, $params)
    {
        $form_for_view['name'] = null;
        if (array_key_exists('name', $params)) {
            $form_for_view['name'] = $params['name'];
        }
        $form_for_view['foreign_key'] = null;
        if (array_key_exists('foreign_key', $params)) {
            $form_for_view['foreign_key'] = $params['foreign_key'];
        }
        $form_for_view['enable_follow'] = GRN_REPORT_DISABLE;
        if (array_key_exists('enable_follow', $params)) {
            $form_for_view['enable_follow'] = $params['enable_follow'];
        }
        $form_for_view['enable_member'] = GRN_REPORT_DISABLE;
        if (array_key_exists('enable_member', $params)) {
            $form_for_view['enable_member'] = $params['enable_member'];
        }
        $form_for_view['enable_partner'] = GRN_REPORT_DISABLE;
        if (array_key_exists('enable_partner', $params)) {
            $form_for_view['enable_partner'] = $params['enable_partner'];
        }
        $form_for_view['memo'] = null;
        if (array_key_exists('memo', $params)) {
            $form_for_view['memo'] = $params['memo'];
        }
    }
}

class GRN_Report_Follow_Controller_Utility
    extends GRN_Report_Controller_Utility_Base
{

    var $_follow_logic_base = null;

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
        //Get Logic Base Instance
        require_once('report/follow_logic_base.csp');
        $logic_base = GRN_Report_Follow_Logic_Base::getInstance();

        //Initialize Parent Class
        parent::__construct(GRN_REPORT_TABLE_FOLLOW, $logic_base);
    }

    /**
     * create Column List
     *
     * @param  array $translation_map //Model <=> View Translation Map
     *
     * @return array  $column_list               //Request Column List
     */
    function createColumnList($translation_map)
    {
        $column_list
            = GRN_Report_Table_Manager::getColumnList(GRN_REPORT_TABLE_FOLLOW);
        //Create Request Column List
        foreach (array_keys($column_list) as $key) {
            $column_name = str_replace('col_', '', $column_list[$key]);
            if ( ! in_array($column_name, $translation_map)) {
                unset($column_list[$key]);
            }
        }

        //Return Column List
        return $column_list;
    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Report_Follow_Controller_Utility  $instance  Instance of GRN_Report_Form_Controller_Utility
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Follow List View
     *
     * @param  array $translation_map //Model <=> View Translation Map
     * @param  int   $category_id     //Category ID
     * @param  mixed $option          //Option (array('list'=>array('offset'=>'', 'limit'=>''), 'sort'=>array('column'=>'', 'order'=>''), 'condition'=>array('column'=>'', 'value'=>''))
     * @param  int   $lock_mode       //Lock Mode
     *
     * @return array  $follow_view               //Follow for View
     */
    function getListView(
        $translation_map,
        $report_id = null,
        $option = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $follow_list_for_view = [];

        //Create Column List
        $column_list = $this->createColumnlist($translation_map);

        //Get Report List
        $follow_list = [];
        $follow_logic_base = $this->getLogicBase();
        $follow_list = &$follow_logic_base->getList($report_id,
            $column_list, $option, $refresh, $lock_mode);

        //Create Parameter Translation for Report List
        foreach (array_keys($follow_list) as $follow_id) {
            $follow_list_for_view[$follow_id]
                = $this->_getView($follow_list[$follow_id], $translation_map);
        }

        //Return Report List View
        return $follow_list_for_view;
    }

    /**
     * Get Follow View
     *
     * @param  int   $follow_id       //Follow ID
     * @param  array $translation_map //Model <=> View Translation Map
     * @param  mixed $option          //Option (array('list'=>array('offset'=>'', 'limit'=>''), 'sort'=>array('column'=>'', 'order'=>''), 'condition'=>array('column'=>'', 'value'=>''))
     * @param  bool  $refresh         //Refresh Flag
     * @param  int   $lock_mode       //Lock Mode
     *
     * @return array  $follow_view             //Follow for View
     */
    function getView(
        $follow_id,
        $translation_map,
        $option = [],
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Follow
        $follow_logic_base = $this->getLogicBase();
        $follow = $follow_logic_base->getDirect($follow_id, null,
            $lock_mode);

        //Get Follow View
        $follow_for_view = $this->_getView($follow, $translation_map);

        //Return Follow View
        return $follow_for_view;
    }

    /**
     * Get Follow Count
     *
     * @param  int   $report_id //Report ID
     * @param  array $option
     * @param  BOOL  $refresh   //Refresh Cache
     * @param  int   $lock_mode //Lock Mode
     *
     * @return int    $follow_count          //Follow Count
     */
    function getCount(
        $report_id = null,
        $option = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $follow_logic_base = $this->getLogicBase();
        $follow_count = $follow_logic_base->getCount($report_id, $option,
            $refresh, $lock_mode);

        return $follow_count;
    }

    /**
     * Get Follow List View
     *
     * @param  int $report_id   Report ID
     * @param  int $category_id Category ID
     * @param  int $offset      Offset
     * @param  int $limit       Limit
     *
     * @return array $follow_list    Follow List With Attachments
     */
    public function getFollowListView($report_id, $category_id, $offset, $limit)
    {
        if (is_null($offset) && is_null($limit)) {
            $option = [];
        } else {
            $option = [
                'list' => [
                    'offset' => $offset,
                    'limit'  => $limit,
                ]
            ];
        }

        $translation_map_follow = [
            'id'                  => '_id',
            'creator'             => 'creator',
            'creator_foreign_key' => 'creator_foreign_key',
            'creator_name'        => 'creator_name',
            'ctime'               => 'ctime',
            'data'                => 'data',
            'follow_id'           => 'follow_id',
            'html'                => 'html',
            'report'              => 'report',
        ];
        $follow_list = $this->getListView($translation_map_follow,
            $report_id, $option);

        // Get Follow File
        $translation_map_follow_file = [
            'id'     => '_id',            //Follow File ID
            'follow' => 'follow',         //Follow ID
            'file'   => 'file',           //File ID
        ];
        $follow_file_util
            = GRN_Report_FollowFile_Controller_Utility::getInstance();
        $follow_file_list
            = $follow_file_util->getListViewByFollowIdList($translation_map_follow_file,
            array_keys($follow_list));
        foreach ($follow_file_list as $follow_id => $follow_files) {
            $follow_list[$follow_id]['attach_files'] = $follow_files;
        }

        return $follow_list;
    }

    public function setDeletableInfo(& $follow_list, $category_id, $user_id)
    {
        $category_util = GRN_Report_Category_Controller_Utility::getInstance();
        $category_manage = $category_util->checkManage($category_id, false,
            CB_DATABASE_NO_LOCK);
        foreach ($follow_list as $follow_id => $follow) {
            $follow_list[$follow_id]['deletable'] = false;

            //Creator or category administrator can delete follow
            if ((array_key_exists('creator', $follow_list[$follow_id])
                 && $user_id === $follow_list[$follow_id]['creator'])
                || $category_manage
            ) {
                $follow_list[$follow_id]['deletable'] = true;
            }
        }
    }

    public function setAutoLinkInfo(& $follow_list, $base_url)
    {
        $mask_symbol = htmlspecialchars(GRN_REPORT_FOLLOW_AUTOLINK_SYMBOL);
        foreach ($follow_list as $follow_id => $follow) {
            //Auto Link
            if (isset($follow['html']) && strlen($follow['html']) > 0) {
                $follow_list[$follow_id]['html']
                    = makeAutoLinkForHtmlEditor($follow['html'], $mask_symbol,
                    $base_url);
            }
        }
    }

    /**
     * Get Limit
     *
     * @param  CB_User $user
     *
     * @return int     $limit
     */
    public function getLimit($user)
    {
        require_once('grn/ui.csp');
        $ui_manager = GRN_UIConfigManager::getInstance();
        $config = $ui_manager->getUserConfig($user);
        $limit = $config->getFollowMax();

        return $limit;
    }

    /**
     * Get Offse
     * t
     *
     * @param  int $report_id
     * @param  int $follow_id
     *
     * @return int $offset
     */
    public function getOffset($report_id, $follow_id)
    {
        $offset = 0;

        require_once('report/follow_manager.csp');
        $follow_manager = GRN_Report_Follow_Manager::getInstance();
        $follow = $follow_manager->getDirect($follow_id);
        if ($follow) {
            $offset = $follow_manager->getFollowOffset($report_id, $follow_id);
        }

        return $offset;
    }
}

/**
 *  Filter Controller Utility Class
 *
 * @package grn.report
 */
class GRN_Report_Filter_Controller_Utility
    extends GRN_Report_Controller_Utility_Base
{

    /** Report Logic Instance * */
    var $_filter_logic_base = null;

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
        //Get Logic Base Instance
        require_once('report/filter_logic_base.csp');
        $logic_base = GRN_Report_Filter_Logic_Base::getInstance();

        //Initialize Parent Class
        parent::__construct(GRN_REPORT_TABLE_FILTER, $logic_base);
    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Report_Filter_Controller_Utility $instance  Instance of GRN_Report_Filter_Controller_Utility
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * create Column List
     *
     * @param  array $translation_map //Model <=> View Translation Map
     *
     * @return array  $column_list               //Request Column List
     */
    function createColumnList($translation_map)
    {
        $column_list
            = GRN_Report_Table_Manager::getColumnList(GRN_REPORT_TABLE_FILTER);
        //Create Request Column List
        foreach (array_keys($column_list) as $key) {
            $column_name = str_replace('col_', '', $column_list[$key]);
            if ( ! in_array($column_name, $translation_map)) {
                unset($column_list[$key]);
            }
        }

        //Return Column List
        return $column_list;
    }

    /**
     * Get Filter List View
     *
     * @param  array $translation_map //Model <=> View Translation Map
     * @param  int   $category_id     //Category ID
     * @param  mixed $option          //Option (array('list'=>array('offset'=>'', 'limit'=>''), 'sort'=>array('column'=>'', 'order'=>''), 'condition'=>array('column'=>'', 'value'=>''))
     * @param  int   $lock_mode       //Lock Mode
     *
     * @return array  $filter_view               //Filter for View
     */
    function getSystemListView(
        $translation_map,
        $category_id = null,
        $option = [],
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $filter_list_for_view = [];

        //Create Column List
        $column_list = $this->createColumnlist($translation_map);

        //Get Report List
        $filter_list = [];
        $filter_logic_base = $this->getLogicBase();
        $filter_list = &$filter_logic_base->getSystemList($category_id,
            $option, $lock_mode);

        //Create Parameter Translation for Report List
        foreach (array_keys($filter_list) as $filter_id) {
            $filter_list_for_view[$filter_id]
                = $this->_getView($filter_list[$filter_id], $translation_map);
        }

        //Return Report List View
        return $filter_list_for_view;
    }

    /**
     * Get Filter View
     *
     * @param  int   $filter_id       //Filter ID
     * @param  array $translation_map //Model <=> View Translation Map
     * @param  mixed $option          //Option (array('list'=>array('offset'=>'', 'limit'=>''), 'sort'=>array('column'=>'', 'order'=>''), 'condition'=>array('column'=>'', 'value'=>''))
     * @param  bool  $refresh         //Refresh Flag
     * @param  int   $lock_mode       //Lock Mode
     *
     * @return array  $filter_view             //Filter for View
     */
    function getView(
        $filter_id,
        $translation_map,
        $option = [],
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Create Column List
        $column_list = $this->createColumnlist($translation_map);

        //Get Filter
        $filter_logic_base = $this->getLogicBase();
        $filter = $filter_logic_base->getDirect($filter_id,
            $lock_mode);

        //Get Filter View
        $filter_for_view = $this->_getView($filter, $translation_map);

        //Return Filter View
        return $filter_for_view;
    }

    function getFilterTypeList($selected_value = null)
    {
        $and_or_info = [];
        $and_or_info[] = [
            'value' => GRN_REPORT_FILTER_AND,
            'label' => cb_msg(GRN_REPORT_MODULE_ID, 'filter.type.0')
        ];
        $and_or_info[] = [
            'value' => GRN_REPORT_FILTER_OR,
            'label' => cb_msg(GRN_REPORT_MODULE_ID, 'filter.type.1')
        ];

        if (strlen($selected_value) > 0) {
            foreach ($and_or_info as $idx => $info) {
                if ($info['value'] == $selected_value) {
                    $and_or_info[$idx]['selected'] = true;
                }
            }
        }

        return $and_or_info;
    }

    function getConditionAnyTypeList()
    {
        $type_info = [];
        $type_info[] = [
            'value' => GRN_REPORT_FILTER_TYPE_ANY,
            'label' => cb_msg(GRN_REPORT_MODULE_ID, 'condition.target.8')
        ];
        $type_info[] = [
            'value' => GRN_REPORT_FILTER_TYPE_CREATOR,
            'label' => cb_msg(GRN_REPORT_MODULE_ID, 'condition.target.3')
        ];
        $type_info[] = [
            'value' => GRN_REPORT_FILTER_TYPE_CREATE_DATE,
            'label' => cb_msg(GRN_REPORT_MODULE_ID, 'condition.target.2')
        ];
        $type_info[] = [
            'value' => GRN_REPORT_FILTER_TYPE_ITEMDATA,
            'label' => cb_msg(GRN_REPORT_MODULE_ID, 'condition.target.4')
        ];
        $type_info[] = [
            'value' => GRN_REPORT_FILTER_TYPE_FOLLOW,
            'label' => cb_msg(GRN_REPORT_MODULE_ID, 'condition.target.5')
        ];

        return $type_info;
    }

    function getConditionTypeList()
    {
        $type_info = [];
        $type_info[] = [
            'value' => GRN_REPORT_FILTER_TYPE_CREATOR,
            'label' => cb_msg(GRN_REPORT_MODULE_ID, 'condition.target.3')
        ];
        $type_info[] = [
            'value' => GRN_REPORT_FILTER_TYPE_CREATE_DATE,
            'label' => cb_msg(GRN_REPORT_MODULE_ID, 'condition.target.2')
        ];
        $type_info[] = [
            'value' => GRN_REPORT_FILTER_TYPE_ITEMDATA,
            'label' => cb_msg(GRN_REPORT_MODULE_ID, 'condition.target.4')
        ];
        $type_info[] = [
            'value' => GRN_REPORT_FILTER_TYPE_FOLLOW,
            'label' => cb_msg(GRN_REPORT_MODULE_ID, 'condition.target.5')
        ];

        return $type_info;
    }

    function getAnyTypeCondition()
    {
        $anyOption = [];
        $anyOption[] = [
            'value' => GRN_REPORT_FILTER_CONDITION_INCLUDE,
            'label' => cb_msg(GRN_REPORT_MODULE_ID, 'condition.type.0')
        ];
        $anyOption[] = [
            'value' => GRN_REPORT_FILTER_CONDITION_NOT_INCLUDE,
            'label' => cb_msg(GRN_REPORT_MODULE_ID, 'condition.type.1')
        ];

        return $anyOption;
    }

    function getTextTypeCondition()
    {
        $textOption = [];
        $textOption[] = [
            'value' => GRN_REPORT_FILTER_CONDITION_INCLUDE,
            'label' => cb_msg(GRN_REPORT_MODULE_ID, 'condition.type.0')
        ];
        $textOption[] = [
            'value' => GRN_REPORT_FILTER_CONDITION_NOT_INCLUDE,
            'label' => cb_msg(GRN_REPORT_MODULE_ID, 'condition.type.1')
        ];
        $textOption[] = [
            'value' => GRN_REPORT_FILTER_CONDITION_EQUAL,
            'label' => cb_msg(GRN_REPORT_MODULE_ID, 'condition.type.2')
        ];
        $textOption[] = [
            'value' => GRN_REPORT_FILTER_CONDITION_NOT_EQUAL,
            'label' => cb_msg(GRN_REPORT_MODULE_ID, 'condition.type.3')
        ];
        $textOption[] = [
            'value' => GRN_REPORT_FILTER_CONDITION_AFTER,
            'label' => cb_msg(GRN_REPORT_MODULE_ID, 'condition.type.4')
        ];
        $textOption[] = [
            'value' => GRN_REPORT_FILTER_CONDITION_BEFORE,
            'label' => cb_msg(GRN_REPORT_MODULE_ID, 'condition.type.5')
        ];

        return $textOption;
    }

    function getNumberTypeCondition()
    {
        $numberOption = [];
        $numberOption[] = [
            'value' => GRN_REPORT_FILTER_CONDITION_BIGGER,
            'label' => cb_msg(GRN_REPORT_MODULE_ID, 'condition.type.6')
        ];
        $numberOption[] = [
            'value' => GRN_REPORT_FILTER_CONDITION_AND_OVER,
            'label' => cb_msg(GRN_REPORT_MODULE_ID, 'condition.type.7')
        ];
        $numberOption[] = [
            'value' => GRN_REPORT_FILTER_CONDITION_SMALLER,
            'label' => cb_msg(GRN_REPORT_MODULE_ID, 'condition.type.8')
        ];
        $numberOption[] = [
            'value' => GRN_REPORT_FILTER_CONDITION_OR_LESS,
            'label' => cb_msg(GRN_REPORT_MODULE_ID, 'condition.type.9')
        ];

        return $numberOption;
    }

    function getDateTypeCondition()
    {
        $dateTypeCondition = [];
        $dateTypeCondition[] = [
            'value' => GRN_REPORT_FILTER_CONDITION_EQUAL,
            'label' => cb_msg(GRN_REPORT_MODULE_ID, 'condition.type.date.2')
        ];
        $dateTypeCondition[]
            = [
            'value' => GRN_REPORT_FILTER_CONDITION_NOT_EQUAL,
            'label' => cb_msg(GRN_REPORT_MODULE_ID, 'condition.type.date.3')
        ];
        $dateTypeCondition[] = [
            'value' => GRN_REPORT_FILTER_CONDITION_AND_OVER,
            'label' => cb_msg(GRN_REPORT_MODULE_ID, 'condition.type.date.7')
        ];
        $dateTypeCondition[] = [
            'value' => GRN_REPORT_FILTER_CONDITION_OR_LESS,
            'label' => cb_msg(GRN_REPORT_MODULE_ID, 'condition.type.date.9')
        ];

        return $dateTypeCondition;
    }

    function getTimeTypeCondition()
    {
        $timeTypeCondition = [];
        $timeTypeCondition[] = [
            'value' => GRN_REPORT_FILTER_CONDITION_EQUAL,
            'label' => cb_msg(GRN_REPORT_MODULE_ID, 'condition.type.date.2')
        ];
        $timeTypeCondition[]
            = [
            'value' => GRN_REPORT_FILTER_CONDITION_NOT_EQUAL,
            'label' => cb_msg(GRN_REPORT_MODULE_ID, 'condition.type.date.3')
        ];
        $timeTypeCondition[] = [
            'value' => GRN_REPORT_FILTER_CONDITION_AND_OVER,
            'label' => cb_msg(GRN_REPORT_MODULE_ID, 'condition.type.date.7')
        ];
        $timeTypeCondition[] = [
            'value' => GRN_REPORT_FILTER_CONDITION_OR_LESS,
            'label' => cb_msg(GRN_REPORT_MODULE_ID, 'condition.type.date.9')
        ];

        return $timeTypeCondition;
    }

    function getSelectableConditionByItemDataType($datatype)
    {
        $textOption = $this->getTextTypeCondition();
        $numberOption = $this->getNumberTypeCondition();
        $dateOption = $this->getDateTypeCondition();
        $timeOption = $this->getTimeTypeCondition();
        switch ($datatype) {
            case GRN_REPORT_CONDITION_ITEM_STRING_SINGLE:
            case GRN_REPORT_CONDITION_ITEM_STRING_MULTIPLE:
            case GRN_REPORT_CONDITION_ITEM_MENU_STRING:
            case GRN_REPORT_CONDITION_ITEM_RADIO:
                return $textOption;
            case GRN_REPORT_CONDITION_ITEM_NUMERIC:
                return $numberOption;
            case GRN_REPORT_CONDITION_ITEM_DATE:
                return $dateOption;
            case GRN_REPORT_CONDITION_ITEM_TIME:
                return $timeOption;
            case GRN_REPORT_CONDITION_ITEM_CHECK:
            case GRN_REPORT_CONDITION_ITEM_FILE:
                return [
                    [
                        'value' => GRN_REPORT_FILTER_CONDITION_EQUAL,
                        'label' => cb_msg(GRN_REPORT_MODULE_ID,
                            'condition.type.date.2')
                    ]
                ];
        }
    }

    function getSelectableCondition($type, $selected_value = null)
    {
        $anyOption = $this->getAnyTypeCondition();
        $textOption = $this->getTextTypeCondition();
        $numberOption = $this->getNumberTypeCondition();
        $dateOption = $this->getDateTypeCondition();
        $option = [];
        switch ($type) {
            case GRN_REPORT_FILTER_TYPE_ANY:
                $option = $anyOption;
                break;
            case GRN_REPORT_FILTER_TYPE_CREATOR:
            case GRN_REPORT_FILTER_TYPE_FOLLOW:
                $option = $textOption;
                break;
            case GRN_REPORT_FILTER_TYPE_CREATE_DATE:
                $option = $dateOption;
                break;
            case GRN_REPORT_FILTER_TYPE_ITEMDATA:
                $option = array_merge($textOption, $numberOption);
                break;
        }

        if (strlen($selected_value) > 0) {
            foreach ($option as $idx => $o) {
                if ($o['value'] == $selected_value) {
                    $option[$idx]['selected'] = true;
                }
            }
        }

        return $option;
    }

    function isTextType($condition)
    {
        if (0 <= $condition && $condition <= 5) {
            return true;
        } elseif (6 <= $condition && $condition <= 9) {
            return false;
        }
    }

    function getSearchTargetList($selected_value = null, $cellular = false)
    {
        $targets = [];
        $targets[] = [
            'value' => GRN_REPORT_SEARCH_TARGET_RECEIVED,
            'label' => cb_msg(GRN_REPORT_MODULE_ID, 'search.target.receive')
        ];
        $targets[] = [
            'value' => GRN_REPORT_SEARCH_TARGET_SEND,
            'label' => cb_msg(GRN_REPORT_MODULE_ID, 'search.target.send')
        ];
        if ( ! $cellular) {
            $targets[] = [
                'value' => GRN_REPORT_SEARCH_TARGET_DRAFT,
                'label' => cb_msg(GRN_REPORT_MODULE_ID, 'search.target.draft')
            ];
        }
        $targets[] = [
            'value' => GRN_REPORT_SEARCH_TARGET_ALL,
            'label' => cb_msg(GRN_REPORT_MODULE_ID, 'search.target.all')
        ];

        if (strlen($selected_value) > 0) {
            foreach ($targets as $idx => $t) {
                if ($t['value'] == $selected_value) {
                    $targets[$idx]['selected'] = true;
                }
            }
        }

        return $targets;
    }

    function validate(&$messages)
    {
        global $G_INPUT;
        $isValidate = true;

        for ($i = 0; $i < count($G_INPUT['type']); $i++) {
            if ($G_INPUT['type_item'][$i] == 'item') {
                $type = GRN_REPORT_FILTER_TYPE_ITEMDATA_DETAIL;
            } else {
                $type = $G_INPUT['type'][$i];
            }

            $condition = cb_at(cb_at($G_INPUT, 'condition'), $i);
            $value = cb_at(cb_at($G_INPUT, 'value'), $i);

            $item_id = cb_at(cb_at($G_INPUT, 'item_id'), $i);
            $item_id = explode("_", $item_id);
            $item_id = $item_id[0];
            $item_type = cb_at(cb_at($G_INPUT, 'item_type'), $i);
            $item_name = cb_at(cb_at($G_INPUT, 'item_name'), $i);

            $messages[$i]['type'] = $type;
            $messages[$i]['value'] = $value;
            $messages[$i]['condition'] = $condition;
            if (array_key_exists('condition_id', $G_INPUT)) {
                $messages[$i]['id'] = cb_at(cb_at($G_INPUT, 'condition_id'),
                    $i);
            } else {
                $messages[$i]['id'] = null;
            }

            if ($type == GRN_REPORT_FILTER_TYPE_ITEMDATA_DETAIL) {
                $messages[$i]['cOption']
                    = $this->getSelectableConditionByItemDataType($item_type);
            } else {
                $messages[$i]['cOption'] = $this->getSelectableCondition($type);
            }

            if ($type == GRN_REPORT_FILTER_TYPE_CREATE_DATE) {
                $year = $G_INPUT['date_value_' . $value
                                 . '_year'];
                $month = $G_INPUT['date_value_' . $value
                                  . '_month'];
                $day = $G_INPUT['date_value_' . $value
                                . '_day'];
                $date = new CB_Date();
                $date->year = $year;
                $date->month = $month;
                $date->day = $day;
                $messages[$i]['date'] = $date;
            }

            if ($type == GRN_REPORT_FILTER_TYPE_ITEMDATA_DETAIL) {
                $messages[$i]['item_name'] = $item_name;
                $messages[$i]['item_type'] = $item_type;
                $messages[$i]['item_id'] = $item_id;
                if ( ! is_numeric($item_id)) {
                    $isValidate = false;
                    $messages[$i]['message'] = cb_msg('grn.report',
                        'validate.no.item');
                    $messages[$i]['cOption']
                        = $this->getSelectableConditionByItemDataType(GRN_REPORT_CONDITION_ITEM_STRING_SINGLE);
                    continue;
                }

                if ($item_type == GRN_REPORT_CONDITION_ITEM_NUMERIC
                    && ! is_numeric($value)
                ) {
                    $isValidate = false;
                    $messages[$i]['message'] = cb_msg('grn.report',
                        'validate.not.a.number');
                } elseif ($item_type == GRN_REPORT_CONDITION_ITEM_DATE) {
                    $year = $G_INPUT['date_value_' . $value
                                     . '_year'];
                    $month = $G_INPUT['date_value_' . $value
                                      . '_month'];
                    $day = $G_INPUT['date_value_' . $value
                                    . '_day'];
                    $date = new CB_Date();
                    $date->year = $year;
                    $date->month = $month;
                    $date->day = $day;
                    $messages[$i]['date'] = $date;
                } elseif ($item_type == GRN_REPORT_CONDITION_ITEM_TIME) {
                    $hour = $G_INPUT['time_value_' . $value
                                     . '_hour'];
                    $minute = $G_INPUT['time_value_' . $value
                                       . '_minute'];
                    $time = new CB_Time();
                    $time->hour = $hour;
                    $time->minute = $minute;
                    $messages[$i]['time'] = $time;
                }
            }

            if ($type != GRN_REPORT_FILTER_TYPE_CREATE_DATE
                && strlen($value) == 0
            ) {
                $isValidate = false;
                $messages[$i]['message'] = cb_msg('grn.report',
                    'validate.empty.string');
            }

            if ($type == GRN_REPORT_FILTER_TYPE_ITEMDATA
                && ! $this->isTextType($condition)
            ) {
                if ( ! is_numeric($value)) {
                    $isValidate = false;
                    $messages[$i]['message'] = cb_msg('grn.report',
                        'validate.not.a.number');
                }
            }
        }

        return $isValidate;
    }

    function getFilterList($user, $translation_map, $duplicate = false)
    {
        require_once('report/filter_logic.csp');

        //Get Filter
        $user_id = $user->getOID();
        $filter_logic = GRN_Report_Filter_Logic::getInstance();
        $recent = $filter_logic->getRecentUserFilterList($user_id);
        $display = $filter_logic->getUserDisplayFilterList($user_id);
        /* GRN2-1936
        $personal = $filter_logic->getPersonalFilterListByUserId($user_id);
         */
        $all = $filter_logic->getUserAccessibleFilterList($user_id);

        if ( ! $duplicate) {
            //最近使用したフィルタと表示すべきフィルタの重複を取り除く
            foreach ($recent as $rid => $rfilter) {
                foreach ($display as $did => $dfilter) {
                    if ($did == $rid) {
                        unset($display[$did]);
                    }
                }
            }

            /* GRN2-1936
            //最近使用したフィルタと個人絞込の重複を取り除く
            foreach ($recent as $rid => $rfilter)
                foreach ($personal as $pid => $dfilter)
                    if ($pid == $rid)
                        unset($personal[$pid]);
             */
        }

        $filters = [];
        $filters['recent'] = [];
        foreach ($recent as $fid => $filter) {
            $filters['recent'][$fid] = $this->_getView($filter,
                $translation_map);
        }

        $filters['display'] = [];
        foreach ($display as $fid => $filter) {
            $filters['display'][$fid] = $this->_getView($filter,
                $translation_map);
        }

        /* GRN2-1936
        $filters['personal'] = array();
        foreach ($personal as $fid => $filter)
            $filters['personal'][$fid] = $this->_getView($filter, $translation_map);
         */

        $filters['all'] = [];
        foreach ($all as $fid => $filter) {
            $filters['all'][$fid] = $this->_getView($filter, $translation_map);
        }

        return $filters;
    }

    function formatDate($unix_ts, $format_id = 'DateFull_YMD', $tz = null)
    {
        if (is_null($unix_ts)) {
            return null;
        }

        $ts = new CB_Timestamp;
        $ts->unix_ts = $unix_ts;
        $format_date = cb_date_format($format_id, $ts, null, $tz);

        return $format_date;
    }

    /**
     * Get Personal Filter List View
     *
     * @param  int   $user_id   User ID
     * @param  mixed $option    Option (array('list'=>array('offset'=>'', 'limit'=>''), 'sort'=>array('column'=>'', 'order'=>''), 'condition'=>array('column'=>'', 'value'=>''))
     * @param  int   $lock_mode Lock Mode
     *
     * @return array  $filter_view     Filter for View
     */
    /* GRN2-1936
    public function getPersonalListView($user_id, $option = array(), $lock_mode = CB_DATABASE_DEFAULT_LOCK)
    {
        //Create Parameter Translation for Form
        $translation_map = array(
            'fid' => '_id', //Filter ID
            'name' => 'name', //Filter Name
            'cid' => 'category', //Category ID
            'creator' => 'creator',
            'creator_name' => 'creator_name',
            'ctime' => 'ctime',
            'active' => 'active',
            'personal_user' => 'personal_user',
        );

        $filter_list_for_view = array();

        //Get Filter List
        $filter_list = array();
        $filter_logic_base = $this->getLogicBase();
        $filter_list =& $filter_logic_base->getPersonalFilterListByUserId($user_id, $option);

        //Create Parameter Translation for Report List
        foreach (array_keys($filter_list) as $filter_id)
        {
            $filter_list_for_view[$filter_id] = $this->_getView($filter_list[$filter_id], $translation_map);
        }

        //Return Report List View
        return $filter_list_for_view;
    }
     */

    public function getConditionValue(
        & $input,
        $index,
        $type,
        $item_type,
        $formtype,
        $dtindex = 0
    ) {
        $value = null;

        if ($type == GRN_REPORT_FILTER_TYPE_CREATE_DATE
            || ($formtype == GRN_REPORT_FILTER_FORM_TYPE_SELECT
                && $item_type == GRN_REPORT_CONDITION_ITEM_DATE)
        ) {
            $year = $input['date_value_' . $dtindex . '_year'];
            $month = $input['date_value_' . $dtindex . '_month'];
            $day = $input['date_value_' . $dtindex . '_day'];
            $date = new CB_Date();
            $date->year = $year;
            $date->month = $month;
            $date->day = $day;
            $value = cb_date_convert2timestamp($date,
                GRN_Report_Item_Util_Date::DEFAULT_TIMEZONE);
        } elseif ($formtype == GRN_REPORT_FILTER_FORM_TYPE_SELECT
                  && $item_type == GRN_REPORT_CONDITION_ITEM_TIME
        ) {
            $hour = $input['time_value_' . $dtindex . '_hour'];
            $minute = $input['time_value_' . $dtindex . '_minute'];

            require_once('report/item_resources.csp');
            $datetime = new CB_DateTime();
            $datetime->year = GRN_Report_Item_Util_Time::DUMMY_YEAR;
            $datetime->month = GRN_Report_Item_Util_Time::DUMMY_MONTH;
            $datetime->day = GRN_Report_Item_Util_Time::DUMMY_DAY;
            $datetime->hour = $hour;
            $datetime->minute = $minute;
            $datetime->second = GRN_Report_Item_Util_Time::DUMMY_SECOND;
            $value = cb_datetime_to_timestamp($datetime,
                GRN_Report_Item_Util_Time::DEFAULT_TIMEZONE);
        } else {
            $value = $input['value'][$index];
        }

        return $value;
    }

    public function setConditionView(& $condition)
    {
        if (is_null($condition['col_number'])) {
            $condition['value'] = $condition['col_text'];
        } else {
            $condition['value'] = $condition['col_number'];
        }

        if ($condition['col_type'] == GRN_REPORT_FILTER_TYPE_CREATE_DATE) {
            $condition['value'] = $this->formatDate($condition['col_number'],
                'DateFull_YMD', GRN_Report_Item_Util_Date::DEFAULT_TIMEZONE);
        }

        if ($condition['col_type'] == GRN_REPORT_FILTER_TYPE_ITEMDATA_DETAIL) {
            $item_map = [
                'display_name' => 'display_name',
                'form'         => 'form',
                'type'         => 'type',
                'data_type'    => 'data_type',
            ];
            $form_map = ['name' => 'name', 'category' => 'category'];

            $item_util = GRN_Report_Item_Controller_Utility::getInstance();
            $form_util
                = GRN_Report_Form_Controller_Utility::getInstance();
            $item
                = $item_util->getView($condition['col_item'],
                $item_map);
            $form = $form_util->getView($item['form'],
                $form_map);
            $condition['item_name'] = $item['display_name'] . ' ('
                                      . $form['name'] . ')';
            $condition['item_type'] = $item['data_type'];
            if ($item['data_type'] == GRN_REPORT_CONDITION_ITEM_DATE) {
                $condition['value']
                    = $this->formatDate($condition['col_number'],
                    'DateFull_YMD',
                    GRN_Report_Item_Util_Date::DEFAULT_TIMEZONE);
            }
            if ($item['data_type'] == GRN_REPORT_CONDITION_ITEM_TIME) {
                $condition['value']
                    = $this->formatDate($condition['col_number'], 'TimeLong_HM',
                    GRN_Report_Item_Util_Time::DEFAULT_TIMEZONE);
            }
        }
    }

    public function getInputConditionView(& $condition)
    {
        $input = [];
        $input['type'] = $condition['col_type'];
        $input['condition'] = $condition['col_condition'];
        $input['cOption']
            = $this->getSelectableCondition($condition['col_type']);

        if ($condition['col_type'] == GRN_REPORT_FILTER_TYPE_CREATE_DATE) {
            $datetime = cb_timestamp_to_datetime($condition['col_number'],
                GRN_Report_Item_Util_Date::DEFAULT_TIMEZONE);
            $date = new CB_Date();
            $date->year = $datetime->year;
            $date->month = $datetime->month;
            $date->day = $datetime->day;
            $input['date'] = $date;
        }

        if ($condition['col_type'] == GRN_REPORT_FILTER_TYPE_ITEMDATA_DETAIL) {
            $item_util = GRN_Report_Item_Controller_Utility::getInstance();
            $form_util = GRN_Report_Form_Controller_Utility::getInstance();

            $item_map = [
                'id'           => '_id',
                'display_name' => 'display_name',
                'form'         => 'form',
                'type'         => 'type',
                'data_type'    => 'data_type',
                'settings'     => 'settings'
            ];

            $input['type'] = GRN_REPORT_FILTER_TYPE_ITEMDATA;

            $item = $item_util->getView($condition['col_item'],
                $item_map);
            $input['item_type'] = $item['data_type'];
            $input['item_id'] = $condition['col_item'];
            $input['item_name'] = $item['display_name'];
            $input['cOption']
                = $this->getSelectableConditionByItemDataType($item['data_type']);

            if (strcmp($item['data_type'], GRN_REPORT_CONDITION_ITEM_DATE)
                == 0
            ) {
                $date_util = new GRN_Report_Item_Util_Date();
                $date = $date_util->getItemData($condition);
                $input['date'] = $date;
            }

            if (strcmp($item['data_type'], GRN_REPORT_CONDITION_ITEM_TIME)
                == 0
            ) {
                $time_util = new GRN_Report_Item_Util_Time();
                $time = $time_util->getItemData($condition);
                $input['time'] = $time;
                $input['interval'] = $item['settings']['unit'];
            }
        }

        if (is_null($condition['col_number'])) {
            $input['value'] = $condition['col_text'];
        } else {
            $input['value'] = $condition['col_number'];
        }

        return $input;
    }
}

/**
 *  Report Controller Utility Class
 *
 * @package grn.report
 */
class GRN_Report_Report_Controller_Utility
    extends GRN_Report_Controller_Utility_Base
{

    /** Report Logic Instance * */
    var $_report_logic_base = null;

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
        //Get Logic Base Instance
        require_once('report/report_logic_base.csp');
        $logic_base = GRN_Report_Report_Logic_Base::getInstance();

        //Initialize Parent Class
        parent::__construct(GRN_REPORT_TABLE_REPORT, $logic_base);
    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Report_Report_Controller_Utility $instance    Instance of GRN_Report_Report_Controller_Utility
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Report View(with Extra Information)
     *
     * @param  array $report          //Report (with Extra Information)
     * @param  array $translation_map //Model <=> View Translation Map
     *
     * @return array  $report_for_view        //Item Data for View
     */
    function _getViewEx($report, $translation_map)
    {
        $report_for_view = [];

        //Set Teble Name
        $report_for_view['table'] = $this->_table_name;

        //Create Parameter Translation for Form
        foreach ($translation_map as $view => $model) {
            if (strpos($model, 'report_') !== 0) {
                continue;
            }

            $model = mb_ereg_replace('^report_', 'p_col_', $model);
            $model = mb_ereg_replace('^p_col_id', 'p__id', $model);

            switch ($model) {
                case 'p__id':
                    $report_for_view[$view] = $report['p__id'];
                    break;
                case 'p_col_creator':
                case 'p_col_modifier':
                    //Get User ID
                    $uid = $report[$model];
                    if ($uid) {
                        $report_for_view[$view] = $uid;
                    }
                    break;
                case 'p_col_creator_name':
                case 'p_col_modifier_name':
                    //Get User ID
                    $model = str_replace('_name', '', $model);
                    $uid = $report[$model];

                    //Get User Object
                    global $G_container_base;
                    $grn_uum = $G_container_base->getInstance('uum');
                    $user = $grn_uum->getUserInfo($uid,
                        [GRN_REPORT_COLUMN_DISPLAY_NAME]);
                    if ($user) {
                        $report_for_view[$view]
                            = $user[GRN_REPORT_COLUMN_DISPLAY_NAME];
                    }
                    break;
                case 'p_col_ctime':
                case 'p_col_mtime':
                    $time = $report[$model];
                    $report_for_view[$view] = new CB_TimeStamp();
                    $report_for_view[$view]->unix_ts = $time;
                    break;
                default:
                    $report_for_view[$view] = $report[$model];
                    break;
            }
        }

        //Create Paremeter Translation for ItemData and Item Data File
        $item_data_util = GRN_Report_Itemdata_Controller_Utility::getInstance();
        foreach (array_keys($report['item_data']) as $item_data_id) {
            $item_data = &$report['item_data'][$item_data_id];
            $report_for_view['item_data'][$item_data_id]
                = $item_data_util->_getViewEx($item_data,
                $translation_map);
        }

        return $report_for_view;
    }

    /**
     * Get Report View
     *
     * @param  int   $report_id       //Report ID
     * @param  array $translation_map //Model <=> View Translation Map
     * @param  int   $form_id         //Form ID
     * @param  mixed $option          //Option (array('list'=>array('offset'=>'', 'limit'=>''), 'sort'=>array('column'=>'', 'order'=>''), 'condition'=>array('column'=>'', 'value'=>''))
     * @param  bool  $refresh         //Refresh Flag
     * @param  int   $lock_mode       //Lock Mode
     *
     * @return array  $report_view             //Report for View
     */
    function getView(
        $report_id,
        $translation_map,
        $form_id = null,
        $option = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Create Column List
        $column_list = $this->createColumnlist($translation_map);

        //Get Report
        $report_logic_base = $this->getLogicBase();
        if (is_null($form_id)) {
            $report = $report_logic_base->getDirect($report_id, $column_list,
                $option, $lock_mode);
        } else {
            $report = &$report_logic_base->get($report_id, $form_id,
                $column_list, $option, $refresh, $lock_mode);
        }

        //Get Report View
        $report_for_view = $this->_getView($report, $translation_map);

        //Set Report Subject Name
        $name_key = 'name';
        foreach ($translation_map as $key => $value) {
            if ($value == 'name') {
                $name_key = $key;
            }
        }
        $subject = $this->getSubject($report_id);
        if (strlen($subject) > 0) {
            $report_for_view[$name_key] = $subject;
        }

        //Return Report View
        return $report_for_view;
    }

    /**
     * Get Simple Report View
     *
     * @param  int $report_id //Report ID
     *
     * @return array $report_view        //Report for View
     */
    function getSimpleView($report_id)
    {
        //Create Parameter Translation Map
        $translation_map = [
            'rid'                  => '_id',
            //Report ID
            'name'                 => 'name',
            //Report Name
            'form'                 => 'form',
            //Report Form ID
            'form_name'            => 'form_name',
            //Report Form Name
            'category'             => 'category',
            'creator'              => 'creator',
            //Report Creator
            'creator_name'         => 'creator_name',
            //Report Creator Name
            'creator_foreign_key'  => 'creator_foreign_key',
            //Report Creator Foreign Key
            'modifier'             => 'modifier',
            'modifier_name'        => 'modifier_name',
            'modifier_foreign_key' => 'modifier_foreign_key',
            'ctime'                => 'ctime',
            //Report Create Time
            'mtime'                => 'mtime',
            'draft'                => 'draft',
            //Report Draft
            'last_follow_id'       => 'last_follow_id',
            //Report Last Follow ID
            'enable_follow'        => 'enable_follow',
            //Report Enable Follow
            'enable_member'        => 'enable_member',
            'enable_partner'       => 'enable_partner',
            'private'              => 'private',
        ];

        //Get Report View
        $report_for_view = $this->getView($report_id, $translation_map);

        //Return Report View
        return $report_for_view;
    }

    /**
     * Get Report List View
     *
     * @param  array $translation_map //Model <=> View Translation Map
     * @param  int   $form_id         //Category ID
     * @param  mixed $option          //Option (array('list'=>array('offset'=>'', 'limit'=>''), 'sort'=>array('column'=>'', 'order'=>''), 'condition'=>array('column'=>'', 'value'=>''))
     * @param  bool  $refresh         //Refresh Flag
     * @param  int   $lock_mode       //Lock Mode
     *
     * @return array  $report_view             //Report for View
     */
    function getListView(
        $translation_map,
        $form_id = null,
        $option = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $report_list_for_view = [];

        //Create Column List
        $column_list = $this->createColumnlist($translation_map);

        //Get Report List
        $report_list = [];
        $report_logic_base = $this->getLogicBase();
        $report_list = &$report_logic_base->getList($form_id,
            $column_list, $option, $refresh, $lock_mode);

        $report_ids = [];

        //Create Parameter Translation for Report List
        foreach (array_keys($report_list) as $report_id) {
            $report_list_for_view[$report_id]
                = $this->_getView($report_list[$report_id],
                $translation_map);
            $report_ids[] = $report_id;
        }

        //Set Report Subject Name
        $subject_list_for_view = &$this->getSubjectList($report_ids);
        $name_key = 'name';
        foreach ($translation_map as $key => $value) {
            if ($value == 'name') {
                $name_key = $key;
            }
        }
        foreach (array_keys($report_list) as $report_id) {
            if (strlen(cb_at($subject_list_for_view, $report_id)) > 0) {
                $report_list_for_view[$report_id][$name_key]
                    = $subject_list_for_view[$report_id];
            }
        }

        //Return Report List View
        return $report_list_for_view;
    }

    /**
     * Get Report List View (with Extra Information)
     *
     * @param  array $translation_map //Model <=> View Translation Map
     * @param  int   $form_id         //Category ID
     * @param  mixed $option          //Option (array('list'=>array('offset'=>'', 'limit'=>''), 'sort'=>array('column'=>'', 'order'=>''), 'condition'=>array('column'=>'', 'value'=>''))
     * @param  bool  $refresh         //Refresh Flag
     * @param  int   $lock_mode       //Lock Mode
     *
     * @return array  $report_view             //Report for View
     */
    function getListViewEx(
        $translation_map,
        $form_id = null,
        $option = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $report_list_for_view = [];

        //Create Column List
        $report_logic_base = $this->getLogicBase();
        $report_column_list
            = $report_logic_base->getColumnList(GRN_REPORT_TABLE_REPORT);
        $item_data_column_list
            = $report_logic_base->getColumnList(GRN_REPORT_TABLE_ITEMDATA);
        $file_relation_column_list
            = $report_logic_base->getColumnList(GRN_REPORT_TABLE_FILERELATION);
        $column_list = array_merge($report_column_list,
            $item_data_column_list, $item_data_file_column_list);
        foreach (array_keys($column_list) as $key) {
            $column_name = explode(' ', $column_list[$key]);
            $column_name = str_replace('col_', '', $column_name[1]);
            $column_name = str_replace('p_', 'report_', $column_name);
            $column_name = str_replace('d_', 'itemdata_', $column_name);
            $column_name = str_replace('f_', 'filerelation_', $column_name);
            $column_name = str_replace('__', '_', $column_name);
            if ( ! in_array($column_name, $translation_map)
                 && $column_name != 'report_id'
                 && $column_name != 'itemdata_id'
                 && $column_name != 'filerelation_id'
            ) {
                unset($column_list[$key]);
            }
        }

        //Get Report List
        $report_list = [];
        $report_list = &$report_logic_base->getListEx($form_id, $column_list,
            $option, $refresh, $lock_mode);

        //Create Parameter Translation for Report List
        foreach (array_keys($report_list) as $report_id) {
            $report_list_for_view[$report_id]
                = $this->_getViewEx($report_list[$report_id], $translation_map);
        }

        //Return Report List View
        return $report_list_for_view;
    }

    /**
     * Export Item Data
     *
     * @param  array $item //Item Information
     *
     * @return array                           //CSV Line
     * @access private
     */
    function _exportItemData($item)
    {
        $line = '';


        // 項目値
        // Get Item Value
        $item_map_for_write = [
            '_id'                      => $item['d__id'],
            'file_id'                  => $item['f__id'],
            GRN_REPORT_COLUMN_FILE     => $item['f_col_file'],
            GRN_REPORT_COLUMN_NUMBER   => $item['d_col_number'],
            GRN_REPORT_COLUMN_TEXT     => $item['d_col_text'],
            GRN_REPORT_COLUMN_SETTINGS => $item['d_col_settings'],
        ];

        $item_util = grn_report_get_item_util($item['d_col_data_type']);

        if ('grn.report.date' == $item['d_col_data_type']) {
            // Only Date Type Returns Value by Reference.
            $item_data_value_mix = $item_util->getItemData($item_map_for_write);
        } elseif ('grn.report.file' == $item['d_col_data_type']) {
            $item_data_value_mix
                = $item_util->getItemDataFile($item_map_for_write['_id'],
                $item_map_for_write);
        } else {
            $item_data_value_mix = $item_util->getItemData($item_map_for_write);
        }

        switch ($item['d_col_data_type']) {
            case 'grn.report.string_single':
            case 'grn.report.string_multiple':
            case 'grn.report.menu_string':
            case 'grn.report.radio':
            case 'grn.report.checkbox':
            case 'grn.report.numeric':
                $item_data_value = $item_data_value_mix;
                break;
            case 'grn.report.time':
                require_once("fw/date.csp");
                $item_data_value = cb_date_format(null, $item_data_value_mix);
                break;
            case 'grn.report.date':
                if (is_null($item_data_value_mix->year)
                    || strlen($item_data_value_mix->year) < 1
                    || is_null($item_data_value_mix->month)
                    || strlen($item_data_value_mix->month) < 1
                    || is_null($item_data_value_mix->day)
                    || strlen($item_data_value_mix->day) < 1
                ) {
                    $year = "--";
                    $month = "--";
                    $day = "--";
                    if ( ! is_null($item_data_value_mix->year)
                         && strlen($item_data_value_mix->year) > 1
                    ) {
                        $year = sprintf('%04d', $item_data_value_mix->year);
                    }
                    if ( ! is_null($item_data_value_mix->month)
                         && strlen($item_data_value_mix->month) > 1
                    ) {
                        $month = sprintf('%02d', $item_data_value_mix->month);
                    }
                    if ( ! is_null($item_data_value_mix->day)
                         && strlen($item_data_value_mix->day) > 1
                    ) {
                        $day = sprintf('%02d', $item_data_value_mix->day);
                    }

                    $item_data_value_mix = sprintf('%s/%s/%s()',
                        $year, $month, $day
                    );
                } else {
                    $wday_num = cb_get_day_of_week($item_data_value_mix->year,
                        $item_data_value_mix->month, $item_data_value_mix->day);
                    $item_data_value_mix = sprintf('%04d/%02d/%02d',
                        $item_data_value_mix->year, $item_data_value_mix->month,
                        $item_data_value_mix->day
                    );
                }
                $item_data_value = $item_data_value_mix;
                break;
            case 'grn.report.file':
                if ( ! $item_data_value_mix) {
                    $item_data_value = null;
                } else {
                    $item_data_value
                        = $item_data_value_mix['file_info']['name'];
                }
                break;
        }

        $line = $item_data_value;

        return $line;
    }

    /**
     * Export Item Name
     *
     * @param  object $csv_writer //CSV Writer
     */
    private function _exportItemName(
        & $csv_writer,
        $array_export,
        $item_list_for_view,
        $inLocale = null
    ) {
        $top_line = [];

        if (is_array($array_export) && count($array_export) > 0) {
            foreach ($array_export as $key => $value) {
                if ($key != 'items_data' && $key != 'subject') {
                    if (strlen($value) > 0) {
                        $top_line[] = cb_msg('grn.report', 'csv_' . $value,
                            null, $inLocale);
                    }
                } else {
                    if ($key == 'subject') {
                        foreach (
                            $item_list_for_view as $report_item_key =>
                            $report_item_value
                        ) {
                            if ($value == $report_item_value['iid']) {
                                $top_line[]
                                    = $report_item_value['display_name'];
                                break;
                            }
                        }
                    } else {
                        if (is_array($value) && count($value) > 0) {
                            foreach ($value as $item_key => $item_value) {
                                foreach (
                                    $item_list_for_view as $report_item_key =>
                                    $report_item_value
                                ) {
                                    if ($item_value
                                        == $report_item_value['iid']
                                    ) {
                                        $top_line[]
                                            = $report_item_value['display_name'];
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        $csv_writer->writeLine($top_line);
    }

    function _getMemberReport($report_id)
    {
        require_once('report/member_manager.csp');
        $member_manager = GRN_Report_Member_Manager::getInstance();
        $members = $member_manager->getList($report_id);
        global $G_container_base;
        $uum = $G_container_base->getInstance("uum");
        $loginUser = $uum->getLoginUser();

        $list_member = '';
        $sign = '';
        require_once("grn/controller.csp");
        $users_info = GRN_ControllerUtil::getUserInfoToShowUserName($members,
            $loginUser);

        foreach ($members as $member) {
            if ( ! array_key_exists($member, $users_info)) {
                $deleted_users_info = $uum->getUserInfo($member,
                    ['col_display_name'], 0, 1, null, true);
                $list_member .= $sign
                                . $deleted_users_info['col_display_name'];
            } else {
                $list_member .= $sign
                                . GRN_ControllerUtil::getUserNameText($loginUser->getOID(),
                        $member, $users_info);
            }
            $sign = ';';
        }

        return $list_member;
    }

    function _getPartnerReport($report_id)
    {
        require_once('report/partner_manager.csp');
        $partner_manager = GRN_Report_Partner_Manager::getInstance();
        $partner_rows =& $partner_manager->getList($report_id);
        require_once('report/partner.csp');
        $partners = GRN_ReportPartnerData::createByRows($partner_rows);

        $list_partner = '';
        $sign = '';
        foreach ($partners as $partner) {
            $list_partner = $list_partner . $sign
                            . htmlspecialchars($partner->getSubject());
            $sign = ';';
        }

        return $list_partner;
    }

    function _exportComments($comments)
    {
        $string = '';
        foreach ($comments as $comment) {
            $string .= $comment['follow_id'] . ":"
                       . htmlspecialchars($comment['creator_name']) . "\n";
            $string .= cb_date_format('DateTimeLong_YMDW_HM', $comment['ctime'],
                    null, null) . "\n\n";
            $string .= htmlspecialchars($comment['data']) . "\n\n";
            if (array_key_exists('attach_files', $comment)) {
                foreach ($comment['attach_files'] as $file) {
                    $string .= htmlspecialchars($file['file_info']['name'])
                               . "\n";
                }
                $string .= "\n";
            }
            $string .= "--------------------------------------------------------------------\n";
        }

        return $string;
    }

    function _exportCustomReport(& $csv_writer, & $report, $array_export)
    {
        $line = [];

        if (is_array($array_export) && count($array_export) > 0) {
            foreach ($array_export as $key => $value) {
                if ($key != 'items_data' && $key != 'subject') {
                    switch ($key) {
                        case 'creator':
                            $line[] = $report['p_col_creator_name'];
                            break;
                        case 'ctime':
                            $apply_datetime
                                = cb_timestamp_to_datetime($report['p_col_ctime']);
                            $line[] = cb_date_format('DateTimeFull_YMDW_HM',
                                $apply_datetime, null, null);
                            break;
                        case 'enable_member':
                            $line[] = $this->_getMemberReport($report['p__id']);
                            break;
                        case 'enable_partner':
                            $line[]
                                = $this->_getPartnerReport($report['p__id']);
                            break;
                        case 'enable_follow':
                            $follow_util
                                = GRN_Report_Follow_Controller_Utility::getInstance();
                            $follow_list
                                = $follow_util->getFollowListView($report['p__id'],
                                $report['p_col_category'], null, null);
                            $line[]
                                = $this->_exportComments(array_reverse($follow_list));

                            break;

                    }
                } else {
                    if ($key == 'subject') {
                        foreach (
                            $report['item_data'] as $report_item_key =>
                            $report_item_value
                        ) {
                            if ($value == $report_item_value['d_col_item']) {
                                $line[]
                                    = $this->_exportItemData($report_item_value);
                                break;
                            }
                        }
                    } else {
                        if (is_array($value) && count($value) > 0) {
                            foreach ($value as $item_key => $item_value) {
                                $list_item = '';
                                $sign = '';

                                foreach (
                                    $report['item_data'] as $report_item_key =>
                                    $report_item_value
                                ) {
                                    if ($item_value
                                        == $report_item_value['d_col_item']
                                    ) {
                                        $list_item = $list_item . $sign
                                                     . $this->_exportItemData($report_item_value);
                                        $sign = ';';
                                    }
                                }
                                $line[] = $list_item;
                            }
                        }
                    }
                }
            }
        }

        //Write
        $csv_writer->writeLine($line);
    }

    function exportCustomReport(
        & $csv_writer,
        $inIsSkip = false,
        $category_id,
        $form_id,
        $array_export,
        $list_report_ids,
        $option,
        $search_ready = true,
        $is_manage = true
    ) {
        $item_util = GRN_Report_Item_Controller_Utility::getInstance();
        $item_list_for_view = $item_util->getSimpleListView($form_id);

        // Write CSV Header
        if ($inIsSkip && count($array_export) > 0) {
            $this->_exportItemName($csv_writer, $array_export,
                $item_list_for_view);
        }

        if ( ! $search_ready || ! $is_manage) {
            return;
        }

        $translation_map = [
            'report_creator',
            'report_creator_name',
            'report_ctime',
            'report_category',
            'itemdata_item',
            'itemdata_number',
            'itemdata_text',
            'itemdata_settings',
            'itemdata_data_type',
            'filerelation_file',
        ];

        $report_logic_base = $this->getLogicBase();
        $report_column_list
            = $report_logic_base->getColumnList(GRN_REPORT_TABLE_REPORT);
        $item_data_column_list
            = $report_logic_base->getColumnList(GRN_REPORT_TABLE_ITEMDATA);
        $file_relation_column_list
            = $report_logic_base->getColumnList(GRN_REPORT_TABLE_FILERELATION);
        $column_list = array_merge($report_column_list,
            $item_data_column_list, $file_relation_column_list);
        foreach (array_keys($column_list) as $key) {
            $column_name = explode(' ', $column_list[$key]);
            $column_name = str_replace('col_', '', $column_name[1]);
            $column_name = str_replace('p_', 'report_', $column_name);
            $column_name = str_replace('d_', 'itemdata_', $column_name);
            $column_name = str_replace('f_', 'filerelation_', $column_name);
            $column_name = str_replace('__', '_', $column_name);
            if ( ! in_array($column_name, $translation_map)
                 && $column_name != 'report_id'
                 && $column_name != 'itemdata_id'
                 && $column_name != 'filerelation_id'
            ) {
                unset($column_list[$key]);
            }
        }
        $report_list = $report_logic_base->getListEx($form_id, $column_list,
            $option);

        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $login = $uum->getLoginUser();
        $user_ids = [];
        foreach ($report_list as $report_id => $report) {
            if ($report['p_col_creator']) {
                $user_ids[] = $report['p_col_creator'];
            }
        }
        require_once("grn/controller.csp");
        $users_info = GRN_ControllerUtil::getUserInfoToShowUserName($user_ids,
            $login);
        foreach ($report_list as $report_id => $report) {

            if ($report['p_col_creator']
                && array_key_exists($report['p_col_creator'], $users_info)
            ) {
                $report_list[$report_id]['p_col_creator_name']
                    = $uum->getNameOf($login,
                    $users_info[$report['p_col_creator']], true);
            }
        }

        // Write Data
        require_once('report/item_resources.csp');
        foreach ($report_list as $report_id => $report) {
            $this->_exportCustomReport($csv_writer, $report, $array_export);
        }
    }

    /**
     * Export Report
     *
     * @param  object $csv_writer //CSV Writer
     * @param  array  $form_info  //Form Information
     * @param  array  $report     //Report Information
     *
     * @access private
     */
    function _exportReport(
        & $csv_writer,
        $form_info,
        & $report,
        $is_single = false
    ) {
        $line = [];

        // 番号
        $line[] = $report['p_col_report_number'];

        // 報告者名
        $line[] = $report['p_col_user_name'];

        // 報告日時
        $apply_datetime = cb_timestamp_to_datetime($report['p_col_ctime']);
        $wday_num = cb_get_day_of_week($apply_datetime->year,
            $apply_datetime->month, $apply_datetime->day);
        $apply_datetime = sprintf('%04d/%02d/%02d（%s） %02d:%02d',
            $apply_datetime->year, $apply_datetime->month, $apply_datetime->day,
            cb_msg('fw.date', "WDayShort{$wday_num}"),
            $apply_datetime->hour, $apply_datetime->minute
        );
        $line[] = $apply_datetime;

        // 報告フォーム名
        $line[] = $form_info['name'];

        $item_info = [];
        if ($is_single) {
            // 項目情報
            $line[] = [];

            // 経路情報
            $line[] = [];
        }

        // 標題
        $line[] = $report['p_col_name'];

        // 項目情報（開始桁）を保存
        $item_info[] = count($line);

        //Items
        foreach ($report['item_data'] as $item) {
            if ($item['d_col_foreign_key'] !== 'grn.report.blank') {
                $items_line = $this->_exportItemData($item);
                $line = array_merge($line, $items_line);
            }
        }

        // 項目情報（終了桁）を保存
        $item_info[] = count($line) - 1;

        //Write
        $csv_writer->writeLine($line);
    }

    function _genericSearch($user, $target, $option, $translation_map)
    {
        require_once('report/search_logic.csp');
        $criteria = new GRN_Report_Search_Criteria($user);
        $criteria->target = $target;
        if (is_array($option) && array_key_exists('list', $option)) {
            $criteria->index = $option['list']['offset'];
            $criteria->count = $option['list']['limit'];
            if (array_key_exists('order', $option['list'])) {
                $criteria->orders = [];
                $criteria->orders[] = $option['list']['order'];
                $criteria->orders[] = ['report._id', 'DESC'];
            }
        }

        if (is_array($option) && array_key_exists('date', $option)) {
            $start_datetime = $option['date']['start'];
            $end_datetime = $option['date']['end'];
            if (is_numeric($start_datetime)) {
                $criteria->addCondition(GRN_REPORT_FILTER_TYPE_MODIFIED_TIME,
                    $start_datetime, GRN_REPORT_FILTER_CONDITION_BIGGER);
            }
            if (is_numeric($end_datetime)) {
                $criteria->addCondition(GRN_REPORT_FILTER_TYPE_MODIFIED_TIME,
                    $end_datetime, GRN_REPORT_FILTER_CONDITION_SMALLER);
            }
        }

        if (is_array($option) && array_key_exists('last_timestamp', $option)) {
            $criteria->getLastTimeStamp = $option['last_timestamp'];
        }
        if (is_array($option) && array_key_exists('subscribe', $option)) {
            $criteria->getSubscribe = $option['subscribe'];
        }

        $reports = GRN_Report_Search_Logic::search($criteria);

        $report_list_for_view = [];
        foreach ($reports as $rid => $report) {
            $report_list_for_view[$rid] = $this->_getView($report,
                $translation_map);
            $report_list_for_view[$rid]['date'] = date('Y/m/d',
                $report['col_ctime']);
        }

        return $report_list_for_view;
    }

    function getSendList($user, $translation_map, $option = [])
    {
        return $this->_genericSearch($user, GRN_REPORT_SEARCH_TARGET_SEND,
            $option, $translation_map);
    }

    function getReceiveList($user, $translation_map, $option = [])
    {
        return $this->_genericSearch($user, GRN_REPORT_SEARCH_TARGET_RECEIVED,
            $option, $translation_map);
    }

    function getDraftList($user, $translation_map, $option = [])
    {
        return $this->_genericSearch($user, GRN_REPORT_SEARCH_TARGET_DRAFT,
            $option, $translation_map);
    }

    function getAllList($user, $translation_map, $option = [])
    {
        return $this->_genericSearch($user, GRN_REPORT_SEARCH_TARGET_ALL,
            $option, $translation_map);
    }

    function getListByFilterId($user, $filterId, $translation_map, $option = [])
    {
        require_once('report/search_logic.csp');
        $criteria = new GRN_Report_Search_Criteria($user);
        $criteria->filter_id = $filterId;
        $criteria->target = GRN_REPORT_SEARCH_TARGET_ALL;
        if (is_array($option) && array_key_exists('list', $option)) {
            $criteria->index = $option['list']['offset'];
            $criteria->count = $option['list']['limit'];
            if (array_key_exists('order', $option['list'])) {
                $criteria->orders = [];
                $criteria->orders[] = $option['list']['order'];
                $criteria->orders[] = ['report._id', 'DESC'];
            }
            if (array_key_exists('subscribe', $option)) {
                $criteria->getSubscribe = $option['subscribe'];
            }
        }

        $reports = GRN_Report_Search_Logic::search($criteria);

        $report_list_for_view = [];
        foreach ($reports as $rid => $report) {
            $report_list_for_view[$rid] = $this->_getView($report,
                $translation_map);
            $report_list_for_view[$rid]['date'] = date('Y/m/d',
                $report['col_ctime']);
        }

        return $report_list_for_view;
    }

    function _genericCount($user, $target, $option = [])
    {
        require_once('report/search_logic.csp');
        $criteria = new GRN_Report_Search_Criteria($user);
        $criteria->target = $target;

        if (is_array($option) && array_key_exists('unread', $option)) {
            $criteria->onlyUnread = $option['unread'];
        }

        $count = GRN_Report_Search_Logic::getCount($criteria);

        return $count;
    }

    function getSendCount($user)
    {
        return $this->_genericCount($user, GRN_REPORT_SEARCH_TARGET_SEND);
    }

    function getReceiveCount($user)
    {
        return $this->_genericCount($user, GRN_REPORT_SEARCH_TARGET_RECEIVED);
    }

    function getDraftCount($user)
    {
        return $this->_genericCount($user, GRN_REPORT_SEARCH_TARGET_DRAFT);
    }

    function getAllCount($user)
    {
        return $this->_genericCount($user, GRN_REPORT_SEARCH_TARGET_ALL);
    }

    function getCountByFilterId($user, $filterId)
    {
        require_once('report/search_logic.csp');
        $criteria = new GRN_Report_Search_Criteria($user);
        $criteria->filter_id = $filterId;
        $criteria->target = GRN_REPORT_SEARCH_TARGET_ALL;

        $count = GRN_Report_Search_Logic::getCount($criteria);

        return $count;
    }

    function getUnreadReceiveCount($user)
    {
        $option = [];
        $option['unread'] = true;

        return $this->_genericCount($user, GRN_REPORT_SEARCH_TARGET_RECEIVED,
            $option);
    }

    //渡されたユーザーIDリストの中から、この報告書が閲覧可能なユーザーIDを返す
    function getViewableUserList($user_id_list, $report_id)
    {
        $report = $this->getSimpleView($report_id);
        if ( ! $report) {
            require_once('report/error_code.csp');
            cb_throw_error(E_GRN_REPORT_REPORT_NOT_FOUND,
                ['app_name' => $G_report_app_name],
                ['app_name' => $G_report_app_name],
                ['app_name' => $G_report_app_name]);
        }

        $viewable_users = [];

        //Check Report Creator
        foreach ($user_id_list as $uid) {
            if ($uid == cb_at($report, 'creator')) {
                $viewable_users[$uid] = $uid;
            }
        }


        //Check Report Members
        require_once('report/member_manager.csp');
        $member_manager = GRN_Report_Member_Manager::getInstance();
        $members = &$member_manager->getList($report_id);
        foreach ($user_id_list as $uid) {
            if (in_array($uid, $members)) {
                $viewable_users[$uid] = $uid;
            }
        }

        //Check Report Notification
        require_once('report/notification_manager.csp');
        $notification_manager = GRN_Report_Notification_Manager::getInstance();
        $notification = &$notification_manager->getList($report_id);
        foreach ($user_id_list as $uid) {
            if (in_array($uid, $notification)) {
                $viewable_users[$uid] = $uid;
            }
        }

        //Check Report is Private
        $is_private = false;
        if (cb_at($report, 'private')) {
            $is_private = true;
        }

        // Category Access Right
        if ( ! ($category_id = $report['category'])) {
            $category_id = GRN_REPORT_CATEGORY_NONPARTY_ID;
        }

        $category_util = GRN_Report_Category_Controller_Utility::getInstance();
        foreach ($user_id_list as $uid) {
            $is_accessible_category = false;
            if ($category_id == GRN_REPORT_CATEGORY_NONPARTY_ID
                || $category_util->checkCategoryAccess($category_id, false,
                    CB_DATABASE_DEFAULT_LOCK, false, $uid)
            ) {
                $is_accessible_category = true;
            }

            if ( ! $is_private && $is_accessible_category) {
                $viewable_users[$uid] = $uid;
            }
        }

        return $viewable_users;
    }

    function isViewable($user_id, $report_id)
    {
        $report = $this->getSimpleView($report_id);
        if ( ! $report) {
            require_once('report/error_code.csp');
            cb_throw_error(E_GRN_REPORT_REPORT_NOT_FOUND,
                ['app_name' => $G_report_app_name],
                ['app_name' => $G_report_app_name],
                ['app_name' => $G_report_app_name]);
        }

        //Check Login User is Report Creator
        if ($user_id == cb_at($report, 'creator')) {
            return true;
        }

        //Check Report Members
        require_once('report/member_manager.csp');
        $member_manager = GRN_Report_Member_Manager::getInstance();
        $members = &$member_manager->getList($report_id);
        if (in_array($user_id, $members)) {
            return true;
        }

        //Check Report Notification
        require_once('report/notification_manager.csp');
        $notification_manager = GRN_Report_Notification_Manager::getInstance();
        $notification = &$notification_manager->getList($report_id);
        if (in_array($user_id, $notification)) {
            return true;
        }

        //Check Report is Private
        $is_private = false;
        if (cb_at($report, 'private')) {
            $is_private = true;
        }

        // Category Access Right
        if ( ! ($category_id = $report['category'])) {
            $category_id = GRN_REPORT_CATEGORY_NONPARTY_ID;
        }
        $is_accessible_category = false;
        $category_util
            = GRN_Report_Category_Controller_Utility::getInstance();
        if ($category_id == GRN_REPORT_CATEGORY_NONPARTY_ID
            || $category_util->checkCategoryAccess($category_id, false)
        ) {
            $is_accessible_category = true;
        }

        if ( ! $is_private && $is_accessible_category) {
            return true;
        }

        return false;
    }

    function isModifiable($user_id, $creator_id, $report_id, $is_draft = false)
    {
        require_once('report/operator_logic.csp');
        if ($user_id == $creator_id
            || ( ! $is_draft
                 && GRN_Report_Operator_Logic::isReportOperator($user_id,
                    $report_id))
        ) {
            return true;
        }

        return false;
    }

    public function isDeletable(
        $user_id,
        $creator_id,
        $report_id,
        $is_draft = false
    ) {
        return $this->isModifiable($user_id, $creator_id, $report_id,
            $is_draft);
    }

    function getNotificationList($report_id, $ignore_subscribe = false)
    {
        //Get Report Members
        require_once('report/member_manager.csp');
        $member_manager = GRN_Report_Member_Manager::getInstance();
        $members = &$member_manager->getList($report_id);

        //Get Report Notification
        require_once('report/notification_manager.csp');
        $notification_manager = GRN_Report_Notification_Manager::getInstance();
        $notification_users = &$notification_manager->getList($report_id);

        //Merge
        $notification_list = array_merge($members, $notification_users);

        //Add report's creator if exists
        $report = $this->getSimpleView($report_id);
        if (isset($report['creator'])) {
            $notification_list[] = $report['creator'];
        }

        if ($ignore_subscribe) {
            return $notification_list;
        }

        //Get Subscribe List
        require_once('report/subscribe_manager.csp');
        $subscribe_manager = GRN_Report_Subscribe_Manager::getInstance();
        $subscribe_list = $subscribe_manager->getList($report_id);

        //Get Diff with Sbuscribe List
        $unsubscribe_list = [];
        foreach ($subscribe_list as $subscribe) {
            if ($subscribe['col_subscribe'] == 1) {
                $notification_list[] = $subscribe['col_user'];
            } else {
                $unsubscribe_list[] = $subscribe['col_user'];
            }
        }
        $notification_list = array_diff($notification_list, $unsubscribe_list);

        return $notification_list;
    }

    function getSubjectView($subject_data)
    {
        $option = $subject_data['option_string'];
        $type = $subject_data['option_string_type'];

        $subject = $subject_data['text'];
        if ($type == 1) {
            $subject = $option . ' ' . $subject;
        } elseif ($type == 2) {
            $subject = $subject . ' ' . $option;
        }

        return $subject;
    }

    function getSubject($report_id)
    {
        $translation_map = [
            'option_string'      => 'option_string',
            'option_string_type' => 'option_string_type',
            'text'               => 'text',
        ];

        require_once('report/itemdata_logic.csp');
        $itemdata_logic = GRN_Report_ItemData_Logic::getInstance();

        $subject_data = &$itemdata_logic->getSubject($report_id);

        $subject_data_view = $this->_getView($subject_data, $translation_map);
        $subject = $this->getSubjectView($subject_data_view);

        return $subject;
    }

    /**
     * @return array
     */
    function &getSubjectList($report_ids)
    {
        $subject_list_view = [];

        if ( ! $report_ids || ! is_array($report_ids)) {
            return $subject_list_view;
        }

        $translation_map = [
            'option_string'      => 'option_string',
            'option_string_type' => 'option_string_type',
            'text'               => 'text',
        ];

        require_once('report/itemdata_logic.csp');
        $itemdata_logic = GRN_Report_ItemData_Logic::getInstance();

        $subject_list = &$itemdata_logic->getSubjectList($report_ids);

        if (is_array($subject_list)) {
            foreach ($subject_list as $key => $subject) {
                $subject_list_view[$key]
                    = $this->getSubjectView($this->_getView($subject,
                    $translation_map));
            }
        }

        return $subject_list_view;
    }

    function addPrivateMessage(& $item)
    {
        $private_message = cb_msg('grn.report', 'private');

        if ($item['option_string_type'] == 2
            && strlen($item['option_string']) > 0
        ) {
            $item['option_string'] .= $private_message;
        } else {
            $item['text'] .= $private_message;
        }
    }

    function getLastOperatedTimeList($report_id_list)
    {
        $logic = GRN_Report_Report_Logic_Base::getInstance();
        $lastOperatedTimeList
            = $logic->getLastOperatedTimeList($report_id_list);

        return $lastOperatedTimeList;
    }

    /**
     * Set Report Creator Validity
     *
     * @global CB_LWContainer $G_container_base
     *
     * @param  array          $report_for_view
     */
    public function setCreatorValid(& $report_for_view)
    {
        //ユーザーが削除される場合creatorが存在しないこともあり得るのでチェックする
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        if (array_key_exists('creator', $report_for_view)) {
            $user = $uum->getUser($report_for_view['creator']);
            if ($user) {
                $report_for_view['creator_valid'] = $user->get('valid');
            }
        }
    }

    /**
     * Get Report Title From Report View
     *
     * @param  array $report_for_view
     *
     * @return string
     */
    public function getReportTitle($report_for_view)
    {
        if (isset($report_for_view['form_name'])
            && (isset($report_for_view['name']))
        ) {
            $report_title = $report_for_view['form_name'] . '（'
                            . $report_for_view['name'] . '）';
        } else {
            $report_title = $report_for_view['name'];
        }

        return $report_title;
    }

    /**
     * Get Sort Parameters for View
     *
     * @param  int   $report_id Report ID
     * @param  array $params    Request Sort Parameters
     *
     * @return array $sort_params   Sort Parameters for View
     */
    public function getSortParamsView($report_id, $params)
    {
        $member_reverse = 0;
        if (array_key_exists('member_reverse', $params)) {
            $member_reverse = $params['member_reverse'];
        }
        $notification_reverse = 0;
        if (array_key_exists('notification_reverse', $params)) {
            $notification_reverse = $params['notification_reverse'];
        }

        $sort_params = [
            'member_user_disabled'              => true,
            'member_operator_disabled'          => true,
            'member_unsubscribe_disabled'       => true,
            'notification_user_disabled'        => true,
            'notification_operator_disabled'    => true,
            'notification_unsubscribe_disabled' => true,
            'member_user_reverse'               => 0,
            'member_operator_reverse'           => 0,
            'member_unsubscribe_reverse'        => 0,
            'notification_user_reverse'         => 0,
            'notification_operator_reverse'     => 0,
            'notification_unsubscribe_reverse'  => 0,
            'member_user_params'                => [
                'rid'                  => $report_id,
                'member_user'          => 1,
                'member_reverse'       => 0,
                'notification_reverse' => $notification_reverse
            ],
            'member_operator_params'            => [
                'rid'                  => $report_id,
                'member_operator'      => 1,
                'member_reverse'       => 0,
                'notification_reverse' => $notification_reverse
            ],
            'member_unsubscribe_params'         => [
                'rid'                  => $report_id,
                'member_unsubscribe'   => 1,
                'member_reverse'       => 0,
                'notification_reverse' => $notification_reverse
            ],
            'notification_user_params'          => [
                'rid'                  => $report_id,
                'notification_user'    => 1,
                'notification_reverse' => 0,
                'member_reverse'       => $member_reverse
            ],
            'notification_operator_params'      => [
                'rid'                   => $report_id,
                'notification_operator' => 1,
                'notification_reverse'  => 0,
                'member_reverse'        => $member_reverse
            ],
            'notification_unsubscribe_params'   => [
                'rid'                      => $report_id,
                'notification_unsubscribe' => 1,
                'notification_reverse'     => 0,
                'member_reverse'           => $member_reverse
            ]
        ];

        if (array_key_exists('member_user', $params)
            && $params['member_user']
        ) {
            $sort_params['member_user_disabled'] = false;
            $sort_params['member_user_reverse']
                = $member_reverse;
            $sort_params['member_user_params']['member_reverse']
                = $member_reverse
                ? 0 : 1;
            $sort_params['notification_user_params']['member_user'] = 1;
            $sort_params['notification_operator_params']['member_user'] = 1;
            $sort_params['notification_unsubscribe_params']['member_user'] = 1;
        }
        if (array_key_exists('member_operator', $params)
            && $params['member_operator']
        ) {
            $sort_params['member_operator_disabled'] = false;
            $sort_params['member_operator_reverse']
                = $member_reverse;
            $sort_params['member_operator_params']['member_reverse']
                = $member_reverse ? 0 : 1;
            $sort_params['notification_user_params']['member_operator']
                = 1;
            $sort_params['notification_operator_params']['member_operator']
                = 1;
            $sort_params['notification_unsubscribe_params']['member_operator']
                = 1;
        }
        if (array_key_exists('member_unsubscribe', $params)
            && $params['member_unsubscribe']
        ) {
            $sort_params['member_unsubscribe_disabled'] = false;
            $sort_params['member_unsubscribe_reverse']
                = $member_reverse;
            $sort_params['member_unsubscribe_params']['member_reverse']
                = $member_reverse ? 0
                : 1;
            $sort_params['notification_user_params']['member_unsubscribe']
                = 1;
            $sort_params['notification_operator_params']['member_unsubscribe']
                = 1;
            $sort_params['notification_unsubscribe_params']['member_unsubscribe']
                = 1;
        }
        if (array_key_exists('notification_user', $params)
            && $params['notification_user']
        ) {
            $sort_params['notification_user_disabled'] = false;
            $sort_params['notification_user_reverse']
                = $notification_reverse;
            $sort_params['notification_user_params']['notification_reverse']
                = $notification_reverse
                ? 0 : 1;
            $sort_params['member_user_params']['notification_user']
                = 1;
            $sort_params['member_operator_params']['notification_user']
                = 1;
            $sort_params['member_unsubscribe_params']['notification_user']
                = 1;
        }
        if (array_key_exists('notification_operator', $params)
            && $params['notification_operator']
        ) {
            $sort_params['notification_operator_disabled'] = false;
            $sort_params['notification_operator_reverse']
                = $notification_reverse;
            $sort_params['notification_operator_params']['notification_reverse']
                = $notification_reverse
                ? 0 : 1;
            $sort_params['member_user_params']['notification_operator']
                = 1;
            $sort_params['member_operator_params']['notification_operator']
                = 1;
            $sort_params['member_unsubscribe_params']['notification_operator']
                = 1;
        }
        if (array_key_exists('notification_unsubscribe', $params)
            && $params['notification_unsubscribe']
        ) {
            $sort_params['notification_unsubscribe_disabled'] = false;
            $sort_params['notification_unsubscribe_reverse']
                = $notification_reverse;
            $sort_params['notification_unsubscribe_params']['notification_reverse']
                = $notification_reverse
                ? 0 : 1;
            $sort_params['member_user_params']['notification_unsubscribe']
                = 1;
            $sort_params['member_operator_params']['notification_unsubscribe']
                = 1;
            $sort_params['member_unsubscribe_params']['notification_unsubscribe']
                = 1;
        }

        return $sort_params;
    }

    /**
     *
     * @global CB_LWContainer $G_container_base
     *
     * @param  int            $report_id
     * @param  bool           $is_draft
     *
     * @return array          $report
     */
    public function getReportView($report_id, $is_draft = false)
    {
        $report = $this->getSimpleView($report_id);

        if ($is_draft && ( ! $report || ! $report['draft'])) {
            cb_throw_error(E_GRN_RPRT_DRAFT_NOT_FOUND);
        }
        if ( ! $is_draft && ( ! $report || $report['draft'])) {
            cb_throw_error(E_GRN_RPRT_REPORT_NOT_FOUND);
        }

        //ユーザーが削除される場合creatorが存在しないこともあり得るのでチェックする
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        if (array_key_exists('creator', $report)) {
            $user = $uum->getUser($report['creator']);
            if ($user) {
                $report['creator_valid'] = $user->get('valid');
            }
        }

        if (array_key_exists('modifier', $report)) {
            $modifier = $uum->getUser($report['modifier']);
            if ($modifier) {
                $report['modifier_valid'] = $modifier->get('valid');
            }
        }

        return $report;
    }

    public function getViewableReportCountByAddressId($address_id, $user)
    {
        require_once('report/partner_manager.csp');
        $partner_manager = GRN_Report_Partner_Manager::getInstance();
        $report_id_list
            = $partner_manager->getReportIdListByAddressId($address_id);

        if (count($report_id_list) === 0) {
            return 0;
        }

        require_once('report/search_logic.csp');
        $criteria = new GRN_Report_Search_Criteria($user);
        $criteria->target = GRN_REPORT_SEARCH_TARGET_ALL;
        $criteria->report_id_list = $report_id_list;

        $count = GRN_Report_Search_Logic::getCount($criteria);

        return $count;
    }

    public function getViewableReportListViewByAddressId(
        $address_id,
        $user,
        $offset,
        $limit,
        $orders
    ) {
        require_once('report/partner_manager.csp');
        $partner_manager = GRN_Report_Partner_Manager::getInstance();
        $report_id_list
            = $partner_manager->getReportIdListByAddressId($address_id);

        if (count($report_id_list) === 0) {
            return [];
        }

        require_once('report/search_logic.csp');
        $criteria = new GRN_Report_Search_Criteria($user);
        $criteria->target = GRN_REPORT_SEARCH_TARGET_ALL;
        $criteria->report_id_list = $report_id_list;
        $criteria->index = $offset;
        $criteria->count = $limit;
        $criteria->orders = $orders;

        $translation_map = $this->getSimpleTranslationList();
        $report_list = GRN_Report_Search_Logic::search($criteria);
        $report_list_for_view = [];
        foreach ($report_list as $report) {
            $report_list_for_view[$report['_id']] = $this->_getView($report,
                $translation_map);
        }

        return $report_list_for_view;
    }

    private function getSimpleTranslationList()
    {
        return [
            'rid'                  => '_id',
            'name'                 => 'name',
            'form'                 => 'form',
            'form_name'            => 'form_name',
            'category'             => 'category',
            'creator'              => 'creator',
            'creator_name'         => 'creator_name',
            'creator_foreign_key'  => 'creator_foreign_key',
            'modifier'             => 'modifier',
            'modifier_name'        => 'modifier_name',
            'modifier_foreign_key' => 'modifier_foreign_key',
            'ctime'                => 'ctime',
            'mtime'                => 'mtime',
            'draft'                => 'draft',
            'last_follow_id'       => 'last_follow_id',
            'enable_follow'        => 'enable_follow',
            'enable_member'        => 'enable_member',
            'enable_partner'       => 'enable_partner',
            'private'              => 'private',
        ];
    }
}

/**
 *  Item Controller Utility Class
 *
 * @package grn.report
 */
class GRN_Report_Item_Controller_Utility
    extends GRN_Report_Controller_Utility_Base
{

    /** Item Logic Instance * */
    var $_item_logic_base = null;

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
        //Get Logic Base Instance
        require_once('report/item_logic_base.csp');
        $logic_base = GRN_Report_Item_Logic_Base::getInstance();

        //Initialize Parent Class
        parent::__construct(GRN_REPORT_TABLE_ITEM, $logic_base);
    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Report_Item_Controller_Utility  $instance  Instance of GRN_Report_Item_Controller_Utility
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Item View
     *
     * @param  int   $item_id         //Item ID
     * @param  array $translation_map //Model <=> View Translation Map
     * @param  int   $form_id         //Form ID
     * @param  bool  $refresh         //Refresh Flag
     * @param  int   $lock_mode       //Lock Mode
     *
     * @return array  $item_for_view             //Item for View
     */
    function getView(
        $item_id,
        $translation_map,
        $form_id = null,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Create Column List
        $column_list = $this->createColumnlist($translation_map);

        //Get Item
        $item_logic_base = $this->getLogicBase();
        if (is_null($form_id)) {
            $item = $item_logic_base->getDirect($item_id, $column_list,
                $lock_mode);
        } else {
            $item = &$item_logic_base->get($item_id, $form_id, $column_list,
                $refresh, $lock_mode);
        }

        //Get Item View
        $item_for_view = $this->_getView($item, $translation_map);

        //Return Item View
        return $item_for_view;
    }

    /**
     * Get Item List View
     *
     * @param  array $translation_map //Model <=> View Translation Map
     * @param  int   $form_id         //Form ID
     * @param  bool  $refresh         //Refresh Flag
     * @param  int   $lock_mode       //Lock Mode
     *
     * @return array  $item_list_for_view        //Item List for View
     */
    function getListView(
        $translation_map,
        $form_id = null,
        $type = null,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $item_list_for_view = [];

        //Create Column List
        $column_list = $this->createColumnlist($translation_map);

        //Get Item List
        $item_list = [];
        $item_logic_base = $this->getLogicBase();
        $item_list = &$item_logic_base->getList($form_id, $column_list,
            $refresh, $lock_mode);

        //Create Parameter Translation for Item List
        foreach (array_keys($item_list) as $item_id) {
            $item_list_for_view[$item_id]
                = $this->_getView($item_list[$item_id], $translation_map);
        }

        //Return Item List View
        return $item_list_for_view;
    }

    public function getSimpleListView($form_id)
    {
        //Create Parameter Translation Map
        $translation_map_item = [
            'iid'                => '_id',
            //Item ID
            'display_name'       => 'display_name',
            //Item Display Name
            'type'               => 'type',
            //Item Type
            'data_type'          => 'data_type',
            //Item Data Type
            'form'               => 'form',
            //Item Form
            'display_type'       => 'display_type',
            //Display_type
            'settings'           => 'settings',
            //Settings
            'option_string'      => 'option_string',
            //Item Option String
            'option_string_type' => 'option_string_type',
            //Item Option String Type
            'description'        => 'description',
            //Item Description
            'description_type'   => 'description_type',
            //Item Description Type
            'description_editor' => 'description_editor',
            //Item Description Editor
            'required'           => 'required',
            //Item Reuired Flag
            'list_index'         => 'list_index',
            //Item List Index
        ];

        $item_list_for_view = $this->getListView($translation_map_item,
            $form_id);

        return $item_list_for_view;
    }
}

/**
 *  Item Data Controller Utility Class
 *
 * @package grn.report
 */
class GRN_Report_ItemData_Controller_Utility
    extends GRN_Report_Controller_Utility_Base
{

    /** Item Data Logic Instance * */
    var $_item_data_logic_base = null;

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
        //Get Logic Base Instance
        require_once('report/itemdata_logic_base.csp');
        $logic_base = GRN_Report_ItemData_Logic_Base::getInstance();

        //Initialize Parent Class
        parent::__construct(GRN_REPORT_TABLE_ITEMDATA, $logic_base);
    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Report_ItemData_Controller_Utility  $instance  Instance of GRN_Report_ItemData_Controller_Utility
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Item Data View(with Extra Information)
     *
     * @param  array $item_data       //Item Data (with Extra Information)
     * @param  array $translation_map //Model <=> View Translation Map
     *
     * @return array  $item_data_for_view        //Item Data for View
     */
    function _getViewEx($item_data, $translation_map)
    {
        $item_data_for_view = [];

        //Set Teble Name
        $item_data_for_view['table'] = $this->_table_name;

        //Create Parameter Translation for Form
        foreach ($translation_map as $view => $model) {
            if (strpos($model, 'itemdata_') !== 0) {
                continue;
            }

            $model = str_replace('itemdata_', 'd_col_', $model);
            $model = str_replace('d_col_id', 'd__id', $model);

            switch ($model) {
                case 'd__id':
                    $item_data_for_view[$view] = $item_data[$model];
                    break;
                case 'd_col_creator':
                case 'd_col_modifier':
                    //Get User ID
                    $uid = $item_data[$model];
                    if ($uid) {
                        $item_data_for_view[$view] = $uid;
                    }
                    break;
                case 'd_col_creator_name':
                case 'd_col_modifier_name':
                    //Get User ID
                    $model = str_replace('_name', '', $model);
                    $uid = $item_data[$model];

                    //Get User Object
                    global $G_container_base;
                    $grn_uum = $G_container_base->getInstance('uum');
                    $user = $grn_uum->getUserInfo($uid,
                        [GRN_REPORT_COLUMN_DISPLAY_NAME]);
                    if ($user) {
                        $item_data_for_view[$view]
                            = $user[GRN_REPORT_COLUMN_DISPLAY_NAME];
                    }
                    break;
                case 'd_col_ctime':
                case 'd_col_mtime':
                    $time = $item_data[$model];
                    $item_data_for_view[$view] = new CB_TimeStamp();
                    $item_data_for_view[$view]->unix_ts = $time;
                    break;
                case 'd_col_settings':
                    $item_data_for_view[$view] = [];
                    $settings = $item_data[$model];
                    if (strlen($settings) !== 0) {
                        $item_data_for_view[$view] = cb_unserialize($settings,
                            ["allowed_classes" => false]);
                    }
                    break;
                case 'd_col_display_name':
                    //if ($item_data['d_col_type'] == 1)
                    if ($item_data['d_col_type'] == 1
                        && (is_null($item_data[$model])
                            || strlen($item_data[$model]) <= 0)
                    ) {
                        $item_data_for_view[$view]
                            = cb_plain_msg(GRN_REPORT_MODULE_ID,
                            'form_subject');
                    } else {
                        $item_data_for_view[$view] = $item_data[$model];
                    }
                    break;
                case 'd_col_display_type':
                    $foreign_key = $item_data['d_col_foreign_key'];
                    $item_data_for_view[$view]
                        = cb_plain_msg(GRN_REPORT_MODULE_ID,
                        $foreign_key);
                    break;
                case 'd_col_files':
                    $item_data_for_view['files'] = [];
                    foreach (
                        array_keys($item_data['files']) as $item_data_file_id
                    ) {
                        $item_data_file
                            = &$item_data['files'][$item_data_file_id];
                        if ( ! $item_data_file['f__id']) {
                            continue;
                        }

                        //Get GRN_Report_File Object
                        require_once('report/file.csp');
                        $file_manager = new GRN_Report_FileManager_Core();
                        $file_table = $file_manager->getFileTable();
                        $file_object
                            = $file_table->getRow($item_data_file['f_col_file']);

                        //Set File Information
                        if ($file_object) {
                            $file_info
                                = grn_make_attached_file_info($file_object,
                                'report');
                            $file_info['ifid'] = $item_data_file['f__id'];
                            $file_info['gfid'] = $item_data_file['f_col_file'];
                            $file_info['iid'] = $item_data['d__id'];
                            $file_info['table'] = GRN_REPORT_TABLE_FILERELATION;
                            $item_data_for_view['files'][$item_data_file['f__id']]
                                = $file_info;
                        }
                    }
                    break;
                default:
                    $item_data_for_view[$view] = $item_data[$model];
                    break;
            }
        }

        //Return Item Data View
        return $item_data_for_view;
    }

    /**
     * Get Item Data View
     *
     * @param  int   $item_data_id    //Item Data ID
     * @param  array $translation_map //Model <=> View Translation Map
     * @param  int   $report_id       //Report ID
     * @param  bool  $refresh         //Refresh Flag
     * @param  int   $lock_mode       //Lock Mode
     *
     * @return array  $item_data_view            //Item Data for View
     */
    function getView(
        $item_data_id,
        $translation_map,
        $report_id = null,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Create Column List
        $column_list = $this->createColumnlist($translation_map);

        //Get Item Data
        $item_data_logic_base = $this->getLogicBase();
        if (is_null($report_id)) {
            $item_data = $item_data_logic_base->getDirect($item_data_id,
                $column_list, $lock_mode);
        } else {
            $item_data = &$item_data_logic_base->get($item_data_id, $report_id,
                $column_list, $refresh, $lock_mode);
        }

        //Get Item Data View
        $item_data_for_view = $this->_getView($item_data, $translation_map);

        //Return Item Data View
        return $item_data_for_view;
    }

    /**
     * Get Item Data View(with Extra Information)
     *
     * @param  int   $item_data_id    //Item Data ID
     * @param  array $translation_map //Model <=> View Translation Map
     * @param  int   $report_id       //Report ID
     * @param  bool  $refresh         //Refresh Flag
     * @param  int   $lock_mode       //Lock Mode
     *
     * @return array  $form_view                 //Form for View
     */
    function getViewEx(
        $item_data_id,
        $translation_map,
        $report_id = null,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Create Column List
        $item_data_logic_base = $this->getLogicBase();
        $item_data_column_list
            = $item_data_logic_base->getColumnList(GRN_REPORT_TABLE_ITEMDATA);
        $item_data_file_column_list
            = $item_data_logic_base->getColumnList(GRN_REPORT_TABLE_FILERELATION);
        $column_list = array_merge($item_data_column_list,
            $item_data_file_column_list);
        foreach (array_keys($column_list) as $key) {
            $column_name = explode(' ', $column_list[$key]);
            $column_name = str_replace('col_', '', $column_name[1]);
            $column_name = str_replace('d_', 'itemdata_', $column_name);
            $column_name = str_replace('f_', 'filerelation_', $column_name);
            $column_name = str_replace('__', '_', $column_name);
            if ( ! in_array($column_name, $translation_map)
                 && $column_name != 'itemdata_id'
                 && $column_name != 'filerelation_id'
            ) {
                unset($column_list[$key]);
            }
        }

        //Get Item Data
        if (is_null($report_id)) {
            $item_data = &$item_data_logic_base->getDirectEx($item_data_id,
                $column_list, $lock_mode);
        } else {
            $item_data = &$item_data_logic_base->getEx($item_data_id,
                $report_id, $column_list, $refresh, $lock_mode);
        }

        //Get Item Data View
        $item_data_for_view = $this->_getViewEx($item_data, $translation_map);

        //Return Item Data View
        return $item_data_for_view;
    }

    /**
     * Get Item Data List View
     *
     * @param  array $translation_map //Model <=> View Translation Map
     * @param  int   $report_id       //Report ID
     * @param  bool  $refresh         //Refresh Flag
     * @param  int   $lock_mode       //Lock Mode
     *
     * @return array  $item_data_view            //Item Data for View
     */
    function getListView(
        $translation_map,
        $report_id = null,
        $type = null,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $item_data_list_for_view = [];

        //Create Column List
        $column_list = $this->createColumnlist($translation_map);

        //Get Item Data List
        $item_data_list = [];
        $item_data_logic_base = $this->getLogicBase();
        $item_data_list = &$item_data_logic_base->getList($report_id,
            $column_list, $refresh, $lock_mode);

        //Create Parameter Translation for Item Data List
        foreach (array_keys($item_data_list) as $item_data_id) {
            $item_data_list_for_view[$item_data_id]
                = $this->_getView($item_data_list[$item_data_id],
                $translation_map);
        }

        //Return Item Data List View
        return $item_data_list_for_view;
    }

    /**
     * Get Item Data List View (with Extra Information)
     *
     * @param  array $translation_map //Model <=> View Translation Map
     * @param  int   $report_id       //Report ID
     * @param  bool  $refresh         //Refresh Flag
     * @param  int   $lock_mode       //Lock Mode
     *
     * @return array  $item_data_view            //Item Data for View
     */
    function getListViewEx(
        $translation_map,
        $report_id = null,
        $type = null,
        $refresh = true,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $item_data_list_for_view = [];

        //Create Column List
        $item_data_logic_base = $this->getLogicBase();
        $item_data_column_list
            = $item_data_logic_base->getColumnList(GRN_REPORT_TABLE_ITEMDATA);
        $item_data_file_column_list
            = $item_data_logic_base->getColumnList(GRN_REPORT_TABLE_FILERELATION);
        $column_list = array_merge($item_data_column_list,
            $item_data_file_column_list);

        foreach (array_keys($column_list) as $key) {
            $column_name = explode(' ', $column_list[$key]);
            $column_name = str_replace('col_', '', $column_name[1]);
            $column_name = str_replace('d_', 'itemdata_', $column_name);
            $column_name = str_replace('f_', 'filerelation_', $column_name);
            $column_name = str_replace('__', '_', $column_name);
            if ( ! in_array($column_name, $translation_map)
                 && $column_name != 'itemdata_id'
                 && $column_name != 'filerelation_id'
            ) {
                unset($column_list[$key]);
            }
        }

        //Get Item Data List
        $item_data_list = [];
        $item_data_list = &$item_data_logic_base->getListEx($report_id,
            $column_list, $refresh, $lock_mode);

        //Create Parameter Translation for Item Data List
        foreach (array_keys($item_data_list) as $item_data_id) {
            $item_data_list_for_view[$item_data_id]
                = $this->_getViewEx($item_data_list[$item_data_id],
                $translation_map);
        }

        //Return Item Data List View
        return $item_data_list_for_view;
    }

    function gets(
        $translation_map,
        $report_ids = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $item_data_list_for_view = [];
        //Create Column List
        $column_list = $this->createColumnlist($translation_map);

        //Get Item Data List
        $item_data_list = [];
        $item_data_logic_base = $this->getLogicBase();
        $item_data_list = &$item_data_logic_base->gets($report_ids,
            $column_list, $refresh, $lock_mode);

        //Return Item Data List View
        return $item_data_list;
    }

    /**
     * Get Item Data List View (with Extra Information)
     *
     * @param  array $translation_map //Model <=> View Translation Map
     * @param  array $report_ids      //Report ID
     * @param  bool  $refresh         //Refresh Flag
     * @param  int   $lock_mode       //Lock Mode
     *
     * @return array  $item_data_view_list       //Item Data List for View
     */
    function getReportsListViewEx(
        $translation_map,
        $report_ids = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $item_data_list_for_view = [];

        //Create Column List
        $item_data_logic_base = $this->getLogicBase();
        $item_data_column_list
            = $item_data_logic_base->getColumnList(GRN_REPORT_TABLE_ITEMDATA);
        $item_data_file_column_list
            = $item_data_logic_base->getColumnList(GRN_REPORT_TABLE_FILERELATION);
        $column_list = array_merge($item_data_column_list,
            $item_data_file_column_list);

        foreach (array_keys($column_list) as $key) {
            $column_name = explode(' ', $column_list[$key]);
            $column_name = str_replace('col_', '', $column_name[1]);
            $column_name = str_replace('d_', 'itemdata_', $column_name);
            $column_name = str_replace('f_', 'filerelation_', $column_name);
            $column_name = str_replace('__', '_', $column_name);
            if ( ! in_array($column_name, $translation_map)
                 && $column_name != 'itemdata_id'
                 && $column_name != 'filerelation_id'
            ) {
                unset($column_list[$key]);
            }
        }

        //Get Item Data List
        $item_data_list = &$item_data_logic_base->getReportsListEx($report_ids,
            $column_list, $refresh, $lock_mode);

        return $item_data_list;
    }

    /**
     * If title is untitled, return string for untitled report
     *
     * @param  string $title
     *
     * @return string   $title
     */
    function parse_title($title)
    {
        if (0 == strlen(cb_trim($title))) {
            return cb_msg(GRN_REPORT_MODULE_ID, 'untitled');
        }

        return $title;
    }

    /**
     * Get Item Data List View
     *
     * @param  int $report_id
     *
     * @return string
     */
    public function getSimpleListView($report_id)
    {
        $translation_map_item_data = [
            //Item Data Information
            'iid'                => 'itemdata_id',
            //Item Data ID
            'display_name'       => 'itemdata_display_name',
            //Item Data Display Name
            'type'               => 'itemdata_type',
            //Item Data Type
            'option_string'      => 'itemdata_option_string',
            //Item Data Option String
            'option_string_type' => 'itemdata_option_string_type',
            //Item Data Option String Type
            'data_type'          => 'itemdata_data_type',
            //Item Data data_type
            'settings'           => 'itemdata_settings',
            //Item Data Settings
            'required'           => 'itemdata_required',
            //Item Data Reuired Flag
            'list_index'         => 'itemdata_list_index',
            //Item Data List Index
            'number'             => 'itemdata_number',
            //Item Data Number Value
            'text'               => 'itemdata_text',
            //Item Data text Value
            'html'               => 'itemdata_html',
            //Item Data HTML Value
            //Item Data File Information
            'fid'                => 'filerelation_id',
            //Item Data File ID
            'file'               => 'filerelation_file',
            //Item Data File ID
            'files'              => 'itemdata_files',
            //Item Data File ID List
        ];
        $item_data_list
            = $this->getListViewEx($translation_map_item_data,
            $report_id);
        foreach (array_keys($item_data_list) as $item_data_id) {
            $item_data_list[$item_data_id]['view_mode'] = 'view';
        }

        return $item_data_list;
    }
}

/**
 *  Item Data File Controller Utility Class
 *
 * @package grn.report
 */
class GRN_Report_ItemDataFile_Controller_Utility
    extends GRN_Report_Controller_Utility_Base
{

    /** Item Data File Logic Instance * */
    var $_file_relation_logic_base = null;

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
        //Get Logic Base Instance
        require_once('report/filerelation_logic_base.csp');
        $logic_base = GRN_Report_FileRelation_Logic_Base::getInstance();

        //Initialize Parent Class
        parent::__construct(GRN_REPORT_TABLE_FILERELATION, $logic_base);
    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Report_ItemDataFile_Controller_Utility
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Item Data File View
     *
     * @param  int   $item_data_file_id //Item Data ID
     * @param  array $translation_map   //Model <=> View Translation Map
     * @param  int   $item_data_id      //Item Data ID
     * @param  bool  $refresh           //Refresh Flag
     * @param  int   $lock_mode         //Lock Mode
     *
     * @return array  $item_data_file_view       //Item Data File for View
     */
    function getView(
        $item_data_file_id,
        $translation_map,
        $item_data_id = null,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Create Column List
        $column_list = $this->createColumnlist($translation_map);

        //Get Item Data File
        $file_relation_logic_base = $this->getLogicBase();
        if (is_null($item_data_id)) {
            $item_data_file
                = $file_relation_logic_base->getDirect($item_data_file_id,
                $column_list, $lock_mode);
        } else {
            $item_data_file
                = &$file_relation_logic_base->get(GRN_REPORT_ITEM_DATA_FILE,
                $item_data_file_id, $item_data_id, $column_list, $refresh,
                $lock_mode);
        }

        //Get Item Data File View
        $item_data_file_for_view = $this->_getView($item_data_file,
            $translation_map);

        //Return Item Data View
        return $item_data_file_for_view;
    }

    /**
     * Get Item Data File List View
     *
     * @param  array $translation_map //Model <=> View Translation Map
     * @param  int   $item_data_id    //Item Data ID
     * @param  bool  $refresh         //Refresh Flag
     * @param  int   $lock_mode       //Lock Mode
     *
     * @return array  $item_data_file_view       //Item Data File for View
     */
    function getListView(
        $translation_map,
        $item_data_id = null,
        $type = null,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $item_data_file_list_for_view = [];

        //Create Column List
        $column_list = $this->createColumnlist($translation_map);

        //Get Item Data File List
        $item_data_file_list = [];
        $file_relation_logic_base = $this->getLogicBase();
        $item_data_file_list
            = &$file_relation_logic_base->getList(GRN_REPORT_ITEM_DATA_FILE,
            $item_data_id, $column_list, $refresh, $lock_mode);

        //Create Parameter Translation for Item Data File List
        foreach (array_keys($item_data_file_list) as $item_data_file_id) {
            $item_data_file_list_for_view[$item_data_file_id]
                = $this->_getView($item_data_file_list[$item_data_file_id],
                $translation_map);
        }

        //Return Item Data File List View
        return $item_data_file_list_for_view;
    }

}

/**
 *  Follow File Controller Utility Class
 *
 * @package grn.report
 */
class GRN_Report_FollowFile_Controller_Utility
    extends GRN_Report_Controller_Utility_Base
{

    /** Follow File Logic Instance * */
    var $_file_relation_logic_base = null;

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
        //Get Logic Base Instance
        require_once('report/filerelation_logic_base.csp');
        $logic_base = GRN_Report_FileRelation_Logic_Base::getInstance();

        //Initialize Parent Class
        parent::__construct(GRN_REPORT_TABLE_FILERELATION, $logic_base);
    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Report_FollowFile_Controller_Utility
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Follow File View
     *
     * @param  int   $follow_file_id  //Follow ID
     * @param  array $translation_map //Model <=> View Translation Map
     * @param  int   $follow_id       //Follow ID
     * @param  bool  $refresh         //Refresh Flag
     * @param  int   $lock_mode       //Lock Mode
     *
     * @return array  $follow_file_view       //Follow File for View
     */
    function getView(
        $follow_file_id,
        $translation_map,
        $follow_id = null,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Create Column List
        $column_list = $this->createColumnlist($translation_map);

        //Get Follow File
        $file_relation_logic_base = $this->getLogicBase();
        if (is_null($follow_id)) {
            $follow_file = $file_relation_logic_base->getDirect($follow_file_id,
                $column_list, $lock_mode);
        } else {
            $follow_file
                = &$file_relation_logic_base->get(GRN_REPORT_FOLLOW_FILE,
                $follow_file_id, $follow_id, $column_list, $refresh,
                $lock_mode);
        }

        //Get Follow File View
        $follow_file_for_view = $this->_getView($follow_file, $translation_map);

        //Return Follow View
        return $follow_file_for_view;
    }

    /**
     * Get Follow File List View
     *
     * @param  array $translation_map //Model <=> View Translation Map
     * @param  int   $follow_id       //Follow ID
     * @param  bool  $refresh         //Refresh Flag
     * @param  int   $lock_mode       //Lock Mode
     *
     * @return array  $follow_file_view       //Follow File for View
     */
    function getListView(
        $translation_map,
        $follow_id = null,
        $type = null,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $follow_file_list_for_view = [];

        //Create Column List
        $column_list = $this->createColumnlist($translation_map);

        //Get Follow File List
        $follow_file_list = [];
        $file_relation_logic_base = $this->getLogicBase();
        $follow_file_list
            = &$file_relation_logic_base->getList(GRN_REPORT_FOLLOW_FILE,
            $follow_id, $column_list, $refresh, $lock_mode);

        //Create Parameter Translation for Follow File List
        foreach (array_keys($follow_file_list) as $follow_file_id) {
            $follow_file_list_for_view[$follow_file_id]
                = $this->_getView($follow_file_list[$follow_file_id],
                $translation_map);
        }

        //Return Follow File List View
        return $follow_file_list_for_view;
    }

    function getListViewByFollowIdList(
        $translation_map,
        $follow_id_list,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $follow_file_list_for_view = [];

        //Get Follow File List
        $follow_file_list = [];
        $file_relation_logic_base = $this->getLogicBase();
        $follow_file_list
            = $file_relation_logic_base->getListByFollowIdList($follow_id_list,
            $lock_mode);
        //Create Parameter Translation for Follow File List
        foreach ($follow_file_list as $follow_id => $file_list) {
            foreach ($file_list as $file_id => $file) {
                $follow_file_list_for_view[$follow_id][$file_id]
                    = $this->_getView($file, $translation_map);
            }
        }

        return $follow_file_list_for_view;
    }

}

class GRN_Report_ControllerUtil extends GRN_ControllerUtil
{

    /**
     * @access private
     */
    var $_uum = null;
    /**
     * @access private
     */
    var $_dbconn = null;

    function __construct($page = null)
    {
        global $G_container_base;
        $this->_uum = $G_container_base->getInstance('uum');

        $app_locator = GRN_ApplicationLocator::instance();
        $this->_dbconn = $app_locator->getConnection('report');

        parent::__construct($page);
    }

    function validateProperties($props, $cols_info)
    {
        $retval = [];
        if (array_key_exists('necessary', $cols_info)) {
            foreach ($cols_info['necessary'] as $col) {
                if (array_key_exists($col, $props)) {
                    $retval[$col] = cb_trim_check($props[$col]);
                } else {
                    // 必須項目が空
                    require_once('report/error_code.csp');
                    cb_throw_error(E_GRN_RPRT_EMPTY_NECESSARY_ITEM);
                }
            }
        }

        if (array_key_exists('initial', $cols_info)) {
            foreach ($cols_info['initial'] as $col => $val) {
                if (array_key_exists($col, $props)) {
                    $retval[$col] = cb_trim($props[$col]);
                } else {
                    $retval[$col] = $val;
                }
            }
        }

        if (array_key_exists('usual', $cols_info)) {
            foreach ($cols_info['usual'] as $col) {
                if (array_key_exists($col, $props)) {
                    $retval[$col] = cb_trim($props[$col]);
                }
            }
        }

        return $retval;
    }

    function _writeAttribute(& $xml_writer, $key, $value)
    {
        if (0 < strlen($value)) {
            $xml_writer->writeAttribute($key, $value);
        }
    }

    function _writeAttributes(& $xml_writer, $attributes)
    {
        if (is_array($attributes) && 0 < count($attributes)) {
            foreach ($attributes as $key => $value) {
                $this->_writeAttribute($xml_writer, $key, $value);
            }
        }
    }

    function _writeCDATAElement(& $xml_writer, $key, $value, $attributes = null)
    {
        if (0 < strlen($value)) {
            $xml_writer->startElement($key);
            $this->_writeAttributes($xml_writer, $attributes);
            $xml_writer->writeCDATA($value);
            $xml_writer->endElement();
        }
    }

    function _getValue(& $xml_reader, $tag_name)
    {
        $value = null;
        while ($xml_reader->read()) {
            if (XMLReader::COMMENT == $xml_reader->nodeType
                || XMLReader::SIGNIFICANT_WHITESPACE == $xml_reader->nodeType
            ) {
                continue;
            }

            switch ($xml_reader->name) {
                case $tag_name:
                    if (XMLReader::END_ELEMENT == $xml_reader->nodeType) {
                        return $value;
                    }
                    break;
                default:
                    $value = $xml_reader->value;
                    break;
            }
        }
        // ノードが完了していません。
        require_once('report/error_code.csp');
        cb_throw_error(E_GRN_RPRT_XML_NODE_NOT_FINISH);
    }

    /**
     * 入力に関するUI設定値を取得
     */
    function getInputConfigValues(& $user, $checkReadOnly = true)
    {
        $available_only = true;
        $page_path = explode('/', cb_get_pagename());
        if ($page_path[1] == 'system') {
            $available_only = false;
        }

        require_once('grn/application.csp');
        $locator = GRN_ApplicationLocator::instance();
        $app = $locator->getInstance('report');
        $system_config = $app->getSystemConfig($user, $checkReadOnly);
        if ( ! $system_config) {
            return false;
        }

        $config = [];
        $config['enable_follow'] = $system_config->getEnableFollow();
        $config['enable_htmleditor']
            = $system_config->getEnableHtmlEditor();
        $config['enable_follow_autolink']
            = $system_config->getEnableFollowAutoLink();
        $report_allusers
            = $system_config->getAllUsersAttendeesUsers();
        if (isset($report_allusers)) {
            $config['report_allusers_attendeesusers'] = $report_allusers;
        }
        require_once('grn/ui.csp');
        $ui_config_manager = GRN_UIConfigManager::getInstance();
        $user_config = $ui_config_manager->getUserConfig($user);

        if ( ! $user_config) {
            return $config;
        }

        $config['area_width'] = $user_config->getAreaWidth();
        $config['area_height'] = $user_config->getAreaHeight();
        $config['inline'] = $user_config->getInlineSetting();

        return $config;
    }

    /**
     * Smartyにサイトポジションをセットする
     */
    function setSitePosition(& $smarty, $page_path, $resource_args = null)
    {
        assert('$smarty');

        $page_title = grn_get_current_page_display_name($resource_args);

        $smarty->assign('app_id', 'report');
        $smarty->assign('page_title', $page_title);

        $locator = GRN_ApplicationLocator::instance();
        $app = $locator->getInstance('report');
        $smarty->assign('app_name', $app->getName());

        $positions = $this->makeSitePosition(null, $page_path,
            $resource_args);
        $positions[] = [
            'page' => "",
            'name' => grn_get_current_page_display_name()
        ];

        $smarty->assign('site_position', $positions);
    }

    public static function operationCheck(
        $category_id,
        $allow_non_manage = false
    ) {
        // 未分類カテゴリか確認
        if (GRN_REPORT_CATEGORY_NONPARTY_ID == $category_id) {
            require_once('report/error_code.csp');
            cb_throw_error(E_GRN_RPRT_MANAGE_DENY_NONPARTY_CATEGORY);
        }

        // 未分類カテゴリ以外は運用管理権限とアクセス権を確認
        $category_util = GRN_Report_Category_Controller_Utility::getInstance();
        $category_util->checkAccess($category_id, true, CB_DATABASE_NO_LOCK);

        if ($allow_non_manage) {
            $is_manage = $category_util->checkManage($category_id, false,
                CB_DATABASE_NO_LOCK);

            return $is_manage;
        } else {
            $category_util->checkManage($category_id, true,
                CB_DATABASE_NO_LOCK);
        }
    }
}

/**
 *  Category Controller Utility Class
 *
 * @package grn.report
 */
class GRN_Report_Category_Controller_Utility
{
    /**
     * Constructor
     *
     * @return void
     */
    function __construct()
    {

    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Report_Category_Controller_Utility  $instance  Instance of GRN_Report_Category_Controller_Utility
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Category Logic Base
     *
     * @param  none
     *
     * @return object $category_logic_base            //Category Logic Base
     */
    function getCategoryLogicBase()
    {
        //Get Category Logic
        require_once('report/category_logic_base.csp');

        //Return Category Logic Base
        return GRN_Report_Category_Logic_Base::getInstance();
    }

    /**
     * Get Category Access Logic Base
     *
     * @param  none
     *
     * @return GRN_Report_Category_Access_Logic_Base     //Category Access Logic
     */
    function getCategoryAccessLogicBase()
    {
        //Get Category Access Logic
        require_once('report/access_logic_base.csp');

        //Return Category Access Logic
        return GRN_Report_Category_Access_Logic_Base::getInstance();
    }

    /**
     * Get Category Manage Logic Base
     *
     * @param  none
     *
     * @return GRN_Report_Category_Manage_Logic //Category Manage Logic
     */
    function getCategoryManageLogicBase()
    {
        //Get Category Manage Logic
        require_once('report/manage_logic_base.csp');

        //Return Category Manage Logic
        return GRN_Report_Category_Manage_Logic_Base::getInstance();
    }

    /**
     * Convert Sysname
     *
     * @param  int    $category_id   //Category ID
     * @param  string $category_name //Category Name
     *
     * @return string $converted_category_name  //Converted Category Name
     */
    function _convert2SysName($category_id, $category_name)
    {
        $converted_category_name = $category_name;

        require_once('report/resources.csp');
        switch ($category_id) {
            case GRN_REPORT_CATEGORY_ROOT_ID:
                $converted_category_name = cb_msg('grn.report', '(root)');
                break;
            case GRN_REPORT_CATEGORY_NONPARTY_ID:
                $converted_category_name = cb_msg('grn.report', 'nonparty');
                break;
        }

        return $converted_category_name;
    }

    /**
     * Model => View
     *
     * @param  object $category        //Category Object
     * @param  array  $translation_map //Model <=> View Translation Map
     *
     * @return array  $category_view            //Category for View
     */
    function _model2View(&$category, $translation_map)
    {
        $category_for_view = [];

        //Create Parameter Translation for Category
        foreach ($translation_map as $view => $model) {
            if ($model !== '_id') {
                $model = 'col_' . $model;
            }

            switch ($model) {
                case '_id':
                    $category_for_view[$view] = $category['_id'];
                    break;
                case 'col_name':
                    $category_for_view[$view]
                        = $this->_convert2SysName($category['_id'],
                        $category[$model]);
                    break;
                case 'col_creator':
                case 'col_modifier':
                    //Get User ID
                    $uid = $category[$model];
                    if ($uid) {
                        $category_for_view[$view] = $uid;
                    }
                    break;
                case 'col_creator_name':
                case 'col_modifier_name':
                    //Get User ID
                    $user = str_replace('_name', '', $model);
                    $uid = $category[$user];

                    //Get User Object
                    global $G_container_base;
                    $grn_uum = $G_container_base->getInstance('uum');
                    $object = $grn_uum->getUser($uid);
                    if ($object) {
                        $category_for_view[$view]
                            = $object->get(GRN_REPORT_COLUMN_DISPLAY_NAME);
                    } else {
                        $category_for_view[$view] = cb_at($category, $model);
                    }

                    break;
                case 'col_ctime':
                case 'col_mtime':
                    $time = $category[$model];
                    $category_for_view[$view] = new CB_TimeStamp();
                    $category_for_view[$view]->unix_ts = $time;
                    break;
                default:
                    $category_for_view[$view] = cb_at($category, $model);
                    break;
            }
        }

        //Return Category View
        return $category_for_view;
    }

    /**
     * Get Category View
     *
     * @param  int   $category_id     //Category ID
     * @param  array $translation_map //Model <=> View Translation Map
     * @param  bool  $user_type       //Access User Type(sytem/manage/personal)
     * @param  bool  $refresh         //Refresh Flag
     * @param  int   $lock_mode       //Lock Mode
     *
     * @return array  $category_view            //Category for View
     */
    function getView(
        $category_id,
        $translation_map,
        $user_type,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $user_type2 = null,
        $user_id = false
    ) {
        $access_check = true;
        $category_for_view = [];
        $category = null;
        if ($category_id == GRN_REPORT_CATEGORY_NONPARTY_ID) {
            //Create Dummy Category
            $category = [];
            foreach ($translation_map as $value) {
                if ($value == '_id') {
                    $category[$value] = GRN_REPORT_CATEGORY_NONPARTY_ID;
                } else {
                    $category['col_' . $value] = '';
                }
            }
            $access_check = false;
        } else {
            //Get Category
            $category_logic_base = $this->getCategoryLogicBase();
            $category = &$category_logic_base->get($category_id,
                null, $refresh, $lock_mode);
        }

        if ($access_check) {
            if ($user_type != GRN_REPORT_ACCESS_TYPE_SYSTEM) {
                //Check Access Right
                $this->checkCategoryAccess($category, true, $lock_mode, false,
                    $user_id);
            }
            if ($user_type2 == GRN_REPORT_ACCESS_TYPE_MANAGE) {
                //Check Manage Right
                $this->checkCategoryManage($category, true, $lock_mode,
                    $user_id);
            }
        }
        $category_for_view = $this->_model2View($category, $translation_map);

        //Return Category View
        return $category_for_view;
    }

    /**
     * Get Category List View
     *
     * @param  int   $category_id     //Category ID
     * @param  array $translation_map //Model <=> View Translation Map
     * @param  bool  $user_type       //Access User Type(sytem/manage/personal)
     * @param  bool  $refresh         //Refresh Flag
     * @param  int   $lock_mode       //Lock Mode
     *
     * @return array  $category_view            //Category for View
     */
    function getListView(
        $category_id,
        $translation_map,
        $user_type,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $user_type2 = null
    ) {
        $category_list_for_view = [];

        //Get Category List
        $category_logic_base = $this->getCategoryLogicBase();
        $category_list = &$category_logic_base->getList($category_id,
            $refresh, $lock_mode);

        //Create Parameter Translation for Category List
        foreach ($category_list as $id => $category) {
            if ($user_type != GRN_REPORT_ACCESS_TYPE_SYSTEM) {
                //Check Access Right
                if ( ! $this->checkCategoryAccess($category, false,
                    $lock_mode)
                ) {
                    continue;
                }
            }
            if ($user_type2 == GRN_REPORT_ACCESS_TYPE_MANAGE) {
                //Check Manage Right
                if ( ! $this->checkCategoryManage($category, false,
                    $lock_mode)
                ) {
                    continue;
                }
            }
            $category_list_for_view[$id] = $this->_model2View($category,
                $translation_map);
        }

        //Return Category List View
        return $category_list_for_view;
    }

    /**
     * Get Tree List View
     *
     * @param  int   $category_id     //Category ID
     * @param  array $translation_map //Model <=> View Translation Map
     * @param  bool  $user_type       //Access User Type(sytem/manage/personal)
     * @param  bool  $include_root    //Include Root Category Flag
     * @param  bool  $include_last    //Include Last Category List Flag
     * @param  int   $lock_mode       //Lock Mode
     *
     * @return array  $category_view            //Category for View
     */
    function getTreeListView(
        $category_id,
        $translation_map,
        $user_type,
        $include_root = true,
        $include_last = true,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $user_type2 = null
    ) {
        $category_list_for_view = [];

        if ($category_id == GRN_REPORT_CATEGORY_NONPARTY_ID) {
            if ($include_root) {
                //Get Root Category
                $category_logic_base = $this->getCategoryLogicBase();
                $root_category
                    = $category_logic_base->get(GRN_REPORT_CATEGORY_ROOT_ID);
                $category_list_for_view[GRN_REPORT_CATEGORY_ROOT_ID]
                    = $this->_model2View($root_category,
                    $translation_map);
            }

            if ($include_last) {
                //Create Dummy Category
                $category = [];
                foreach ($translation_map as $value) {
                    if ($value == '_id') {
                        $category[$value] = GRN_REPORT_CATEGORY_NONPARTY_ID;
                    } else {
                        $category['col_' . $value] = '';
                    }
                }
                $category_list_for_view[GRN_REPORT_CATEGORY_NONPARTY_ID]
                    = $this->_model2View($category, $translation_map);
            }
        } else {
            //Get Category List
            $category_logic_base = $this->getCategoryLogicBase();
            $category_list
                = $category_logic_base->getTreeList($category_id,
                $include_root, $include_last, $lock_mode);

            //Create Parameter Translation for Category List
            foreach ($category_list as $id => $category) {
                if ($user_type != GRN_REPORT_ACCESS_TYPE_SYSTEM) {
                    //Check Access Right
                    if ( ! $this->checkCategoryAccess($category, false,
                        $lock_mode)
                    ) {
                        continue;
                    }
                }
                if ($user_type2 == GRN_REPORT_ACCESS_TYPE_MANAGE) {
                    //Check Manage Right
                    if ( ! $this->checkCategoryManage($category, false,
                        $lock_mode)
                    ) {
                        continue;
                    }
                }
                $category_list_for_view[$id] = $this->_model2View($category,
                    $translation_map);
            }
        }

        //Return Category List View
        return $category_list_for_view;
    }

    /**
     * Get Child List View
     *
     * @param  int    $category_id     //Category ID
     * @param  array  $translation_map //Model <=> View Translation Map
     * @param  string $user_type       //Access User Type(sytem/manage/personal)
     * @param  int    $lock_mode       //Lock Mode
     *
     * @return array  $category_view            //Category for View
     */
    function getChildListView(
        $category_id,
        $translation_map,
        $user_type,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $user_type2 = null,
        $user_id = false
    ) {
        $category_list_for_view = [];

        //Get Category List
        $category_logic_base = $this->getCategoryLogicBase();
        $category_list = $category_logic_base->getChildList($category_id,
            $lock_mode);

        //Create Parameter Translation for Category List
        foreach ($category_list as $id => $category) {
            if ($user_type != GRN_REPORT_ACCESS_TYPE_SYSTEM) {
                //Check Access Right
                if ( ! $this->checkCategoryAccess($category, false, $lock_mode,
                    false, $user_id)
                ) {
                    continue;
                }
            }
            if ($user_type2 == GRN_REPORT_ACCESS_TYPE_MANAGE) {
                //Check Manage Right
                if ( ! $this->checkCategoryManage($category, false, $lock_mode,
                    $user_id)
                ) {
                    continue;
                }
            }
            $category_list_for_view[$id] = $this->_model2View($category,
                $translation_map);
        }

        //Return Category List View
        return $category_list_for_view;
    }

    /**
     * Search Category
     *
     * @param  array $search_info     //Search Information
     * @param  array $translation_map //Translation Map
     * @param  bool  $user_type       //Access User Type(sytem/manage/personal)
     * @param  bool  $refresh         //Refresh Flag
     * @param  int   $lock_mode       //Lock Mode
     *
     * @return array  $hit_category_list        //Hit Category List
     */
    function search(
        $search_info,
        $translation_map,
        $user_type,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $user_type2 = null
    ) {
        $resultArray = [];

        //Create Condition List
        require_once('fw/string_util.csp');
        $condition_list = cb_parse_search_text($search_info['text']);

        if (count($condition_list) == 0) {
            return $resultArray;
        }

        //Search Category
        $category_logic_base = $this->getCategoryLogicBase();
        $hit_category_list = $category_logic_base->search($condition_list,
            $search_info['offset'], $search_info['limit'], $lock_mode);

        //Create Parameter Translation for Category List
        $category_list_for_view = [];
        foreach ($hit_category_list as $id => $category) {
            if ($user_type != GRN_REPORT_ACCESS_TYPE_SYSTEM) {
                //Check Access Right
                if ( ! $this->checkCategoryAccess($category, false,
                    $lock_mode)
                ) {
                    continue;
                }
            }

            if ($user_type2 == GRN_REPORT_ACCESS_TYPE_MANAGE) {
                //Check Manage Right
                if ( ! $this->checkCategoryManage($category, false,
                    $lock_mode)
                ) {
                    continue;
                }
            }

            $resultArray[$id] = $this->_model2View($category, $translation_map);
        }

        return $resultArray;
    }

    /**
     * Check Category Access
     *
     * @param  int         $category_id //Category ID
     * @param  bool        $throw_error //Throw Errro Flag
     * @param  int         $lock_mode   //Lock Mode
     * @param  bool        $refresh
     * @param  bool|string $user_id
     *
     * @return bool   $result                   //Check Result
     */
    function checkAccess(
        $category_id,
        $throw_error = true,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $refresh = false,
        $user_id = false
    ) {
        require_once('report/error_code.csp');
        cb_trim_check($category_id, E_GRN_RPRT_CATEGORY_INVALID_ID);

        //Check Category Existence
        $category_logic_base = $this->getCategoryLogicBase();
        $category_logic_base->get($category_id, null, $refresh, $lock_mode);

        $category = ['_id' => $category_id];

        return $this->checkCategoryAccess($category, $throw_error, $lock_mode,
            $refresh, $user_id);
    }

    /**
     * Check Category Access
     *
     * @param  int         $category    //Category
     * @param  bool        $throw_error //Throw Errro Flag
     * @param  int         $lock_mode   //Lock Mode
     * @param  bool        $refresh
     * @param  bool|string $user_id
     *
     * @return bool   $result                   //Check Result
     */
    function checkCategoryAccess(
        & $category,
        $throw_error = true,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $refresh = false,
        $user_id = false
    ) {
        $category_access_logic_base = $this->getCategoryAccessLogicBase();
        //if (!$category_access_logic_base->evaluateCategory($category['_id'], $lock_mode, $refresh, $user_id))
        if (is_array($category) && array_key_exists('_id', $category)) {
            $category_id = $category['_id'];
        } else {
            $category_id = $category;
        }
        if ( ! $category_access_logic_base->evaluateCategory($category_id,
            $lock_mode, $refresh, $user_id)
        ) {
            //Check Throw Error Flag
            if ($throw_error) {
                //Category Access Deny
                require_once('report/error_code.csp');
                cb_throw_error(E_GRN_RPRT_ACCESS_DENY);
            } else {
                return false;
            }
        }

        return true;
    }

    /**
     * Check Category Manage
     *
     * @param  int         $category_id //Category ID
     * @param  bool        $throw_error //Throw Errro Flag
     * @param  int         $lock_mode   //Lock Mode
     * @param  bool|string $user_id
     *
     * @return bool   $result                   //Check Result
     */
    function checkManage(
        $category_id,
        $throw_error = true,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $user_id = false
    ) {
        if (is_null($category_id)
            || $category_id == GRN_REPORT_CATEGORY_NONPARTY_ID
        ) {
            if ($throw_error) {
                require_once('report/error_code.csp');
                cb_throw_error(E_GRN_RPRT_MANAGE_DENY);
            }

            $ret = false;

            return $ret;
        }

        require_once('report/error_code.csp');
        cb_trim_check($category_id, E_GRN_RPRT_CATEGORY_INVALID_ID);
        $category = ['_id' => $category_id];

        return $this->checkCategoryManage($category, $throw_error, $lock_mode,
            $user_id);
    }

    /**
     * Check Category Manage
     *
     * @param  int         $category    //Category
     * @param  bool        $throw_error //Throw Errro Flag
     * @param  int         $lock_mode   //Lock Mode
     * @param  bool|string $user_id
     *
     * @return bool   $result                   //Check Result
     */
    function checkCategoryManage(
        & $category,
        $throw_error = true,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $user_id = false
    ) {
        $category_manage_logic_base = $this->getCategoryManageLogicBase();
        if ( ! $category_manage_logic_base->evaluateCategory($category['_id'],
            $lock_mode, $user_id)
        ) {
            //Check Throw Error Flag
            if ($throw_error) {
                //Category Manage Deny
                require_once('report/error_code.csp');
                cb_throw_error(E_GRN_RPRT_MANAGE_DENY);
            } else {
                return false;
            }
        }

        return true;
    }

    /**
     * Evaluate Manage
     *
     * @param  int $lock_mode //Lock Mode
     *
     * @return bool   $result                   //Check Result
     */
    function evaluateManage($lock_mode = CB_DATABASE_DEFAULT_LOCK)
    {
        //Get UUM Instance
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');

        //Get Login User
        $login_user = $uum->getLoginUser();
        $login_user_id = $login_user->getOID();

        //Get Dynamic Role
        $dynamic_role_list = $uum->listGrantedRoles();

        $category_manage_logic_base = $this->getCategoryManageLogicBase();
        $result
            = $category_manage_logic_base->evaluateManage($login_user,
            $dynamic_role_list, $lock_mode);

        return $result;
    }

    /**
     *
     * @param  int    $category_id Category ID
     * @param  string $user_type   User Access Type
     *
     * @return array   $category_for_view    Category View
     */
    public function getSimpleView(
        $category_id,
        $user_type = GRN_REPORT_ACCESS_TYPE_PERSONAL
    ) {
        //Create Parameter Translation Map
        $translation_map_category = [
            //Category Information
            'cid'            => '_id',             //Category ID
            'name'           => 'name',            //Category Name
            'foreign_key'    => 'foreign_key',     //Category Foreign key
            'pcid'           => 'parent',          //Category Parent
            'memo'           => 'memo',            //Category Memo
            'creator'        => 'creator',         //Category Creator
            'creator_name'   => 'creator_name',    //Category Creator Name
            'modifier'       => 'modifier',        //Category Modifier
            'modifier_name'  => 'modifier_name',   //Category Modifier Name
            'ctime'          => 'ctime',           //Category Create Time
            'mtime'          => 'mtime',           //Category Modify Time
            'list_index'     => 'list_index',      //Category List Index
            'security_model' => 'security_model',  //Category Security Model
        ];

        //Get Category for view
        $category_for_view = $this->getView($category_id,
            $translation_map_category, $user_type, false);

        return $category_for_view;
    }

    public function createMultiLanguageValuesArray($inCategoryId)
    {
        $resultArray = [];

        require_once('report/ReportFacade.csp');
        $dao = new ReportFacade();

        $dataObj = [];
        $category
            = $dao->referReportCategoryById($dataObj,
            $inCategoryId);
        $resultArray[CB_I18N_DEFUALT_LANGUAGE_CODE] = $category->getName();

        $dataObj = [];
        $categoryLocalList
            = $dao->getReportCategoryLocalListByCategoryId($dataObj,
            $inCategoryId);
        foreach ($categoryLocalList as $categoryLocal) {
            $resultArray[$categoryLocal->getLanguageCode()]
                = $categoryLocal->getName();
        }

        return $resultArray;
    }
}

/**
 * Category Access Controller Utility Class
 *
 * @package grn.report
 */
class GRN_Report_Category_Access_Controller_Utility
{

    /** Category Access Logic Base Instance * */
    var $_category_access_logic_base = null;

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {

    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Report_Category_Access_Controller_Utility
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Category Access Logic Base
     *
     * @param  none
     *
     * @return object $category_access_logic_base    //Category Access Logic Base
     */
    function getCategoryAccessLogicBase()
    {
        //Get Category Access Logic Base
        require_once('report/access_logic_base.csp');
        $this->_category_access_logic_base
            = GRN_Report_Category_Access_Logic_Base::getInstance();

        //Return Category Access Logic Base
        return $this->_category_access_logic_base;
    }

    /**
     * Model => View
     *
     * @param  object $access          //Access Object
     * @param  string $target_type     //Target Type
     * @param  array  $translation_map //Model <=> View Translation Map
     *
     * @return array  $access_view              //Access for View
     */
    function _model2View(&$access, $target_type, $translation_map)
    {
        $access_for_view = [];

        $access_access_logic_base = $this->getCategoryAccessLogicBase();

        //Create Parameter Translation for Access
        foreach ($translation_map as $view => $model) {
            if ($model !== '_id') {
                $model = 'col_' . $model;
            }

            switch ($model) {
                case '_id':
                    $access_for_view[$view] = $access[$model];
                    break;
                case 'col_target':
                case 'col_object':
                    $access_for_view[$view] = $access[$model];
                    break;
                case 'col_type':
                    $access_for_view[$view] = $target_type;
                    break;
                case 'col_authority_browse':
                    $authorities = ['browse' => $access[$model]];
                    $access_for_view[$view] = $authorities;
                    break;
                case 'col_security_model':
                    $access_for_view[$view]
                        = $access_access_logic_base->getSecurityModel($access['col_object']);
                    break;
                default:
                    $access_for_view[$view] = $access[$model];
                    break;
            }
        }

        //Return Access View
        return $access_for_view;
    }

    /**
     * Get Access View
     *
     * @param  int    $access_id       //Access ID
     * @param  string $target_type     //Target Type
     * @param  array  $translation_map //Model <=> View Translation Map
     * @param  bool   $refresh         //Refresh Flag
     * @param  int    $lock_mode       //Lock Mode
     *
     * @return array  $access_view              //Access for View
     */
    function getView(
        $access_id,
        $target_type,
        $translation_map,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $access_for_view = [];

        //Get Access Object
        $access_logic_base = $this->getAccessLogicBase();
        $access = &$access_logic_base->get($access_id, $refresh,
            $lock_mode);

        $access_for_view = $this->_model2View($access, $target_type,
            $translation_map);

        //Return Access View
        return $access_for_view;
    }

    /**
     * Get Access List View
     *
     * @param  int    $category_id     //Category ID
     * @param  string $target_type     //Target Type
     * @param  array  $translation_map //Model <=> View Translation Map
     * @param  bool   $refresh         //Refresh Flag
     * @param  int    $lock_mode       //Lock Mode
     *
     * @return array  $access_view              //access for View
     */
    function getListView(
        $category_id,
        $target_type,
        $translation_map,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $access_list_for_view = [];

        //Get Access List Object
//        $access_logic_base =& $this->getCategoryAccessLogicBase();
        require_once('report/access_logic_base.csp');
        $access_logic_base
            = GRN_Report_Category_Access_Logic_Base::getInstance();

        $access_id_list = &$access_logic_base->getList($category_id,
            $target_type, $refresh, $lock_mode);

        //Create Parameter Translation for Access List
        foreach ($access_id_list as $id => $access) {
            $access_list_for_view[$id] = $this->_model2View($access,
                $target_type, $translation_map);
        }

        //Return Access List View
        return $access_list_for_view;
    }

}

/**
 * Category Manage Controller Utility Class
 *
 * @package grn.report
 */
class GRN_Report_Category_Manage_Controller_Utility
{

    /** Category Manage Logic Instance * */
    var $_category_manage_logic_base = null;

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {

    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Report_Category_Manage_Controller_Utility
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Category Manage Logic Base
     *
     * @param  none
     *
     * @return object $category_manage_logic_base    //Category Manage Logic Base
     */
    function getCategoryManageLogicBase()
    {
        //Get Category Manage Logic Base
        require_once('report/manage_logic_base.csp');
        $this->_category_manage_logic_base
            = GRN_Report_Category_Manage_Logic_Base::getInstance();

        //Return Category Manage Logic Base
        return $this->_category_manage_logic_base;
    }

    /**
     * Model => View
     *
     * @param  object $manage          //Manage Object
     * @param  string $target_type     //Target Type
     * @param  array  $translation_map //Model <=> View Translation Map
     *
     * @return array  $manage_view              //Manage for View
     */
    function _model2View(&$manage, $target_type, $translation_map)
    {
        $manage_for_view = [];

        $manage_manage_logic_base = $this->getCategoryManageLogicBase();

        //Create Parameter Translation for Manage
        foreach ($translation_map as $view => $model) {
            if ($model !== '_id') {
                $model = 'col_' . $model;
            }

            switch ($model) {
                case '_id':
                    $manage_for_view[$view] = $manage[$model];
                    break;
                case 'col_target':
                case 'col_object':
                    $manage_for_view[$view] = $manage[$model];
                    break;
                case 'col_type':
                    $manage_for_view[$view] = $target_type;
                    break;
                case 'col_authority_browse':
                    $authorities = ['browse' => $manage[$model]];
                    $manage_for_view[$view] = $authorities;
                    break;
                default:
                    $manage_for_view[$view] = $manage[$model];
                    break;
            }
        }

        //Return Manage View
        return $manage_for_view;
    }

    /**
     * Get Manage View
     *
     * @param  int    $manage_id       //Manage ID
     * @param  string $target_type     //Target Type
     * @param  array  $translation_map //Model <=> View Translation Map
     * @param  bool   $refresh         //Refresh Flag
     * @param  int    $lock_mode       //Lock Mode
     *
     * @return array  $manage_view              //Manage for View
     */
    function getView(
        $manage_id,
        $target_type,
        $translation_map,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $manage_for_view = [];

        //Get Manage Object
        $manage_logic_base = $this->getManageLogicBase();
        $manage = &$manage_logic_base->getManage($manage_id,
            $refresh, $lock_mode);

        $manage_for_view = $this->_model2View($manage, $target_type,
            $translation_map);

        //Return Manage View
        return $manage_for_view;
    }

    /**
     * Get Manage List View
     *
     * @param  int    $category_id     //Category ID
     * @param  string $target_type     //Target Type
     * @param  array  $translation_map //Model <=> View Translation Map
     * @param  bool   $refresh         //Refresh Flag
     * @param  int    $lock_mode       //Lock Mode
     *
     * @return array  $manage_view              //manage for View
     */
    function getListView(
        $category_id,
        $target_type,
        $translation_map,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $manage_list_for_view = [];

        //Get Manage List Object
        $manage_logic_base = $this->getCategoryManageLogicBase();
        $manage_id_list
            = &$manage_logic_base->getManageListByCategoryID($category_id,
            $target_type, $refresh, $lock_mode);

        //Create Parameter Translation for Manage List
        foreach ($manage_id_list as $id => $manage) {
            $manage_list_for_view[$id] = $this->_model2View($manage,
                $target_type, $translation_map);
        }

        //Return Manage List View
        return $manage_list_for_view;
    }

}

/**
 * Read Status Controller Utility Class
 *
 * @package grn.report
 */
class GRN_Report_ReadStatus_Controller_Utility
    extends GRN_Report_Controller_Utility_Base
{

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {

    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Report_ReadStatus_Controller_Utility
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Read Status View
     *
     * @param  int  $user_id   //User ID
     * @param  int  $report_id //Report ID
     * @param  bool $refresh   //Refresh Flag
     * @param  int  $lock_mode //Lock Mode
     *
     * @return array  $readstatus_view           //Read Status for View
     */
    function getView(
        $user_id,
        $report_id,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Read Status
        require_once('report/readstatus_logic.csp');
        $readstatus_logic = GRN_Report_ReadStatus_Logic::getInstance();
        $readstatus = $readstatus_logic->get($user_id, $report_id);

        //Create Translation Map
        $translation_map = [
            'id'             => '_id',
            'last_timestamp' => 'last_timestamp',
            'report'         => 'report',
            'user'           => 'user',
        ];

        //Translate Read Status for View
        $readstatus_for_view = $this->_getView($readstatus, $translation_map);

        //Return Item Data View
        return $readstatus_for_view;
    }

}

/**
 * Member Controller Utility Class
 *
 * @package grn.report
 */
class GRN_Report_Member_Controller_Utility
{

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {

    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Report_Member_Controller_Utility $instance  Instance of GRN_Report_Member_Controller_Utility
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Update Report Members
     *
     * @param  int $report_id //User ID
     * @param  int $members   //Members
     *
     * @return bool   $result
     */
    function updateMembers($report_id, $members, $operator_id_list)
    {
        //Get Old Members
        require_once('report/member_manager.csp');
        $member_manager = GRN_Report_Member_Manager::getInstance();
        $old_member_row_list = &$member_manager->getRowList($report_id);
        $old_member_id_list = [];
        $old_operator_id_list = [];
        foreach ($old_member_row_list as $old_member_row) {
            $old_member_id_list[] = $old_member_row['col_user'];
            if ($old_member_row['col_is_operator']) {
                $old_operator_id_list[] = $old_member_row['col_user'];
            }
        }

        //Delete Old Member
        require_once('report/member_logic.csp');
        $member_logic = GRN_Report_Member_Logic::getInstance();
        $deleted = [];
        foreach ($old_member_id_list as $old_member) {
            if ( ! in_array($old_member, $members)) {
                $deleted[] = $old_member;
            }
        }
        $member_logic->deleteMulti($report_id, $deleted);

        //for bug 1347
        //delete notification for Members is deleted
        require_once('report/notification.csp');
        $notification = new GRN_Report_Notification_Listener();
        if (count($deleted) > 0) {
            $notification->removeList($deleted, $report_id);
        }

        //Add New Member
        $new_members = [];
        foreach ($members as $member) {
            if ( ! in_array($member, $old_member_id_list)) {
                $new_members[] = $member;
            }
        }
        $member_logic->addMulti($report_id, $new_members, $operator_id_list);

        $member_logic->changeOrder($report_id, $members);

        //Update operator values
        $update_operator_values = [];
        foreach ($old_member_id_list as $old_member) {
            if ( ! in_array($old_member, $deleted)) {
                if (in_array($old_member, $old_operator_id_list)
                    && ! in_array($old_member, $operator_id_list)
                ) {
                    $update_operator_values[0][] = $old_member;
                } elseif ( ! in_array($old_member, $old_operator_id_list)
                           && in_array($old_member, $operator_id_list)
                ) {
                    $update_operator_values[1][] = $old_member;
                }
            }
        }
        $member_logic->updateOperator($report_id, $update_operator_values);

        return true;
    }

    /**
     * Get Member View for Detail Page
     *
     * @param  int   $report_id   Report ID
     * @param  int   $creator_id  Report Creator ID
     * @param  array $sort_params Sort Parameters
     *
     * @return array $members_for_view        Members View
     */
    public function getDetailView($report_id, $creator_id, $sort_params)
    {
        require_once('report/member_manager.csp');
        $member_manager = GRN_Report_Member_Manager::getInstance();
        $members = &$member_manager->getRowList($report_id);
        $member_ids = [];
        foreach ($members as $member) {
            $member_ids[] = $member['col_user'];
        }
        $members_for_view = $this->getUsersView($member_ids);
        foreach ($members as $member) {
            $members_for_view[$member['col_user']]['id'] = $member['col_user'];
            $members_for_view[$member['col_user']]['is_operator']
                = $member['col_is_operator'];
            $members_for_view[$member['col_user']]['col_list_index']
                = $member['col_list_index'];
            if ($creator_id == $member['col_user']) {
                $members_for_view[$member['col_user']]['is_operator'] = true;
            }
        }

        require_once('report/subscribe_manager.csp');
        $subscribe_manager = GRN_Report_Subscribe_Manager::getInstance();
        $subscribe_list = $subscribe_manager->getList($report_id, null,
            GRN_REPORT_UNSUBSCRIBED);
        foreach ($subscribe_list as $subscribe) {
            if (in_array($subscribe['col_user'], $member_ids)) {
                $members_for_view[$subscribe['col_user']]['unsubscribe'] = true;
            }
        }

        $sort_key = 'col_list_index';
        if (array_key_exists('member_user', $sort_params)
            && $sort_params['member_user']
        ) {
            $sort_key = 'name';
        }
        if (array_key_exists('member_operator', $sort_params)
            && $sort_params['member_operator']
        ) {
            $sort_key = 'is_operator';
        }
        if (array_key_exists('member_unsubscribe', $sort_params)
            && $sort_params['member_unsubscribe']
        ) {
            $sort_key = 'unsubscribe';
        }
        $reverse = false;
        if (array_key_exists('member_reverse', $sort_params)
            && $sort_params['member_reverse']
        ) {
            $reverse = true;
        }
        $members_for_view = $this->sort($sort_key, $reverse, $members_for_view);

        return $members_for_view;
    }

    /**
     * Create Display Name View
     *
     * @global CB_LWContainer $G_container_base
     *
     * @param  array          $user_ids
     *
     * @return array $members_for_view
     */
    public function getUsersView($user_ids)
    {
        if ( ! is_array($user_ids)) {
            $user_ids = [];
        }
        global $G_container_base;
        $grn_uum = $G_container_base->getInstance('uum');
        $login_user = $grn_uum->getLoginUser();

        $members_info = GRN_ControllerUtil::getUserInfoToShowUserName($user_ids,
            $login_user);
        foreach ($user_ids as $user_id) {
            if ( ! array_key_exists($user_id, $members_info)) {
                $deleted_members_info = $grn_uum->getUserInfo($user_id, [
                    'col_display_name',
                    'col_display_name_language',
                    'col_nickname'
                ], 0, 1, null, true);
                $members_info[$user_id] = $deleted_members_info;
            }
        }
        $members_for_view = [];
        foreach ($members_info as $user) {
            $members_for_view[$user['_id']]['name']
                = GRN_ControllerUtil::getUserNameText($login_user->getOID(),
                $user['_id'], $members_info);
        }

        return $members_for_view;
    }

    /**
     * Sort for View
     *
     * @param string $sort_key
     * @param bool   $is_reverse
     * @param array  $info_for_view
     *
     * @return array
     */
    private function sort($sort_key, $is_reverse, $info_for_view)
    {
        $order = $is_reverse ? SORT_DESC : SORT_ASC;
        $sort = [];
        foreach ($info_for_view as $key => $addressee) {
            $sort[$key] = cb_at($addressee, $sort_key);
        }
        array_multisort($sort, $order, $info_for_view);

        // Relation between a key and its value should be kept.
        $tmp_array = $info_for_view;
        $info_for_view = [];
        for ($i = 0; $i < count($tmp_array); $i++) {
            $info_for_view[$tmp_array[$i]["id"]] = $tmp_array[$i];
        }

        return $info_for_view;
    }

    /**
     * Get Members View
     *
     * @param  int $report_id
     *
     * @return array $members_for_view
     */
    public function getView($report_id)
    {
        require_once('report/member_manager.csp');
        $member_manager = GRN_Report_Member_Manager::getInstance();
        $members =& $member_manager->getRowList($report_id);

        $member_id_list = [];
        foreach ($members as $member) {
            $member_id_list[] = $member['col_user'];
        }

        $members_for_view = MemberLogic::getInstance()
                                       ->getDisplayUsersByUserIds($member_id_list,
                                           GRN_REPORT_APPLICATION_ID, false,
                                           false);

        return $members_for_view;
    }
}

/**
 * Notification Controller Utility Class
 *
 * @package grn.report
 */
class GRN_Report_Notification_Controller_Utility
{

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {

    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Report_Notification_Controller_Utility $instance    Instance of GRN_Report_Notification_Controller_Utility
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Update Report Notification
     *
     * @param  int $report_id    //User ID
     * @param  int $notification //Notification
     *
     * @return bool   $result
     */
    function updateNotification($report_id, $notification, $operator_id_list)
    {
        if ( ! is_array($notification)) {
            $notification = [];
        }

        //Get Old Notification
        require_once('report/notification_manager.csp');
        $notification_manager = GRN_Report_Notification_Manager::getInstance();
        $old_notification_row_list
            = &$notification_manager->getRowList($report_id);
        $old_notification_id_list = [];
        $old_operator_id_list = [];

        foreach ($old_notification_row_list as $old_notification_row) {
            $old_notification_id_list[] = $old_notification_row['col_user'];
            if ($old_notification_row['col_is_operator']) {
                $old_operator_id_list[] = $old_notification_row['col_user'];
            }
        }

        //Delete Old Notification
        require_once('report/notification_logic.csp');
        $notification_logic = GRN_Report_Notification_Logic::getInstance();
        $deleted = [];
        foreach ($old_notification_id_list as $old_user) {
            if ( ! in_array($old_user, $notification)) {
                $deleted[] = $old_user;
            }
        }
        $notification_logic->deleteMulti($report_id, $deleted);

        //for bug 1347
        //delete notification for Members is deleted
        require_once('report/notification.csp');
        $notification_otherwatch = new GRN_Report_Notification_Listener();
        if (count($deleted) > 0) {
            $notification_otherwatch->removeList($deleted, $report_id);
        }

        //Add New Notification
        $new_notification = [];
        foreach ($notification as $user) {
            if ( ! in_array($user, $old_notification_id_list)) {
                $new_notification[] = $user;
            }
        }
        $notification_logic->addMulti($report_id, $new_notification,
            $operator_id_list);

        $notification_logic->changeOrder($report_id, $notification);

        //Update operator values
        $update_operator_values = [];
        foreach ($old_notification_id_list as $old_notification) {
            if ( ! in_array($old_notification, $deleted)) {
                if (in_array($old_notification, $old_operator_id_list)
                    && ! in_array($old_notification, $operator_id_list)
                ) {
                    $update_operator_values[0][] = $old_notification;
                } elseif ( ! in_array($old_notification, $old_operator_id_list)
                           && in_array($old_notification, $operator_id_list)
                ) {
                    $update_operator_values[1][] = $old_notification;
                }
            }
        }
        $notification_logic->updateOperator($report_id,
            $update_operator_values);

        return true;
    }

    /**
     * Get Notification View for Detail Page
     *
     * @param  int   $report_id   Report ID
     * @param  int   $creator_id  Report Creator ID
     * @param  array $sort_params Sort Parameters
     *
     * @return array $notification_for_view   Notification View
     */
    public function getDetailView($report_id, $creator_id, $sort_params)
    {
        require_once('report/notification_manager.csp');
        $notification_manager = GRN_Report_Notification_Manager::getInstance();
        $notifications = &$notification_manager->getRowList($report_id);
        $notification_ids = [];
        foreach ($notifications as $notification) {
            $notification_ids[] = $notification['col_user'];
        }
        $notification_for_view = $this->getUsersView($notification_ids);
        foreach ($notifications as $notification) {
            $notification_for_view[$notification['col_user']]['id']
                = $notification['col_user'];
            $notification_for_view[$notification['col_user']]['is_operator']
                = $notification['col_is_operator'];
            $notification_for_view[$notification['col_user']]['col_list_index']
                = $notification['col_list_index'];
            if ($creator_id == $notification['col_user']) {
                $notification_for_view[$notification['col_user']]['is_operator']
                    = true;
            }
        }

        require_once('report/subscribe_manager.csp');
        $subscribe_manager = GRN_Report_Subscribe_Manager::getInstance();
        $subscribe_list = $subscribe_manager->getList($report_id, null,
            GRN_REPORT_UNSUBSCRIBED);
        foreach ($subscribe_list as $subscribe) {
            if (in_array($subscribe['col_user'], $notification_ids)) {
                $notification_for_view[$subscribe['col_user']]['unsubscribe']
                    = true;
            }
        }

        $sort_key = 'col_list_index';
        if (array_key_exists('notification_user', $sort_params)
            && $sort_params['notification_user']
        ) {
            $sort_key = 'name';
        }
        if (array_key_exists('notification_operator', $sort_params)
            && $sort_params['notification_operator']
        ) {
            $sort_key = 'is_operator';
        }
        if (array_key_exists('notification_unsubscribe', $sort_params)
            && $sort_params['notification_unsubscribe']
        ) {
            $sort_key = 'unsubscribe';
        }
        $reverse = false;
        if (array_key_exists('notification_reverse', $sort_params)
            && $sort_params['notification_reverse']
        ) {
            $reverse = true;
        }
        $notification_for_view = $this->sort($sort_key, $reverse,
            $notification_for_view);

        return $notification_for_view;
    }

    /**
     * Create Display Name View
     *
     * @global CB_LWContainer $G_container_base
     *
     * @param  array          $user_ids
     *
     * @return array $members_for_view
     */
    public function getUsersView($user_ids)
    {
        if ( ! is_array($user_ids)) {
            $user_ids = [];
        }
        global $G_container_base;
        $grn_uum = $G_container_base->getInstance('uum');
        $login_user = $grn_uum->getLoginUser();

        $members_info = GRN_ControllerUtil::getUserInfoToShowUserName($user_ids,
            $login_user);
        foreach ($user_ids as $user_id) {
            if ( ! array_key_exists($user_id, $members_info)) {
                $deleted_members_info = $grn_uum->getUserInfo($user_id, [
                    'col_display_name',
                    'col_display_name_language',
                    'col_nickname'
                ], 0, 1, null, true);
                $members_info[$user_id] = $deleted_members_info;
            }
        }
        $members_for_view = [];
        foreach ($members_info as $user) {
            $members_for_view[$user['_id']]['name']
                = GRN_ControllerUtil::getUserNameText($login_user->getOID(),
                $user['_id'], $members_info);
        }

        return $members_for_view;
    }

    /**
     * Sort for View
     *
     * @param string $sort_key
     * @param bool   $is_reverse
     * @param array  $info_for_view
     *
     * @return array
     */
    private function sort($sort_key, $is_reverse, $info_for_view)
    {
        $order = $is_reverse ? SORT_DESC : SORT_ASC;
        $sort = [];
        foreach ($info_for_view as $key => $addressee) {
            $sort[$key] = cb_at($addressee, $sort_key);
        }
        array_multisort($sort, $order, $info_for_view);

        // Relation between a key and its value should be kept.
        $tmp_array = $info_for_view;
        $info_for_view = [];
        for ($i = 0; $i < count($tmp_array); $i++) {
            $info_for_view[$tmp_array[$i]["id"]] = $tmp_array[$i];
        }

        return $info_for_view;
    }

    /**
     * Get Notification Users View
     *
     * @param  int $report_id
     * @param bool $is_used_select_part
     *
     * @return array $notification_for_view
     */
    public function getView($report_id)
    {
        require_once('report/notification_manager.csp');
        $notification_manager = GRN_Report_Notification_Manager::getInstance();
        $notification_list =& $notification_manager->getRowList($report_id);

        $notification_id_list = [];
        foreach ($notification_list as $notification) {
            $notification_id_list[] = $notification['col_user'];
        }

        $notification_for_view = MemberLogic::getInstance()
                                            ->getDisplayUsersByUserIds($notification_id_list,
                                                GRN_REPORT_APPLICATION_ID,
                                                false, false);

        return $notification_for_view;
    }
}

class GRN_Report_Operator_Controller_Utility
{
    /**
     * Get Report Operatable Users
     *
     * @param  int $report_id Report ID
     *
     * @return array   $operators    Report Operatable Users
     */
    public static function getOperatorList($report_id)
    {
        require_once('report/member_manager.csp');
        $member_manager = GRN_Report_Member_Manager::getInstance();
        $members =& $member_manager->getRowList($report_id);

        require_once('report/notification_manager.csp');
        $notification_manager = GRN_Report_Notification_Manager::getInstance();
        $notifications =& $notification_manager->getRowList($report_id);

        $operators = [];
        foreach ($members as $member) {
            if ($member['col_is_operator']) {
                $operators[] = $member['col_user'];
            }
        }
        foreach ($notifications as $notification) {
            if ($notification['col_is_operator']) {
                $operators[] = $notification['col_user'];
            }
        }

        return $operators;
    }
}

/**
 * Subscribe Controller Utility Class
 *
 * @package grn.report
 */
class GRN_Report_Subscribe_Controller_Utility
{

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {

    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Report_Subscribe_Controller_Utility
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Create Subscribe List
     *
     * @param  int   $creator      //Creator ID
     * @param  array $members      //Member List
     * @param  array $notification //Notification List
     *
     * @return array  $subscribe              //Subscribe List
     */
    function createSubscribeList($creator, $members, $notification)
    {
        $subscribe = [];

        //Add Member List
        if (is_array($members)) {
            $subscribe = $members;
        }

        //Add Notification List
        if (is_array($notification)) {
            foreach ($notification as $user) {
                if ( ! in_array($user, $subscribe)) {
                    $subscribe[] = $user;
                }
            }
        }

        //Add Creator
        if ($creator) {
            if ( ! in_array($creator, $subscribe)) {
                $subscribe[] = $creator;
            }
        }

        return $subscribe;
    }

    /**
     * Update Report Subscribe
     *
     * @param  int $report_id //User ID
     * @param  int $subscribe //Subscribe
     *
     * @return bool   $result
     */
    function updateSubscribe($report_id, $subscribe)
    {
        //Get Old Subscribe
        require_once('report/subscribe_manager.csp');
        $subscribe_manager = GRN_Report_Subscribe_Manager::getInstance();
        $old_subscribe = &$subscribe_manager->getList($report_id);

        //Delete Old Subscribe
        require_once('report/subscribe_logic.csp');
        $subscribe_logic = GRN_Report_Subscribe_Logic::getInstance();
        $deleted = [];
        foreach ($old_subscribe as $old_user) {
            if ( ! in_array($old_user, $subscribe)) {
                $deleted[] = $old_user;
            }
        }
        $subscribe_logic->deleteMulti($report_id, $deleted);

        //Add New Subscribe
        $new_subscribe = [];
        foreach ($subscribe as $user) {
            if ( ! in_array($user, $old_subscribe)) {
                $new_subscribe[] = $user;
            }
        }
        $subscribe_logic->addMulti($report_id, $new_subscribe);

        return true;
    }

}

/**
 *  Report Schedule Controller Utility Class
 *
 * @package grn.report
 */
class GRN_Report_Report_Schedule_Controller_Utility
    extends GRN_Report_Controller_Utility_Base
{

    /** Report Logic Instance * */
    var $_report_schedule_logic = null;

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
        //Get Logic Base Instance
        require_once('report/report_schedule_logic.csp');
        $logic_base = GRN_Report_Report_Schedule_Logic::getInstance();

        //Initialize Parent Class
        parent::__construct(GRN_REPORT_TABLE_REPORTSCHEDULERELATIONS,
            $logic_base);
    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Report_Report_Schedule_Controller_Utility  $instance  Instance of GRN_Report_Report_Controller_Utility
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    function getListView(
        $event_id,
        $user,
        $translation_map = null,
        $option = null
    ) {
        $report_list_for_view = [];

        $logic = GRN_Report_Report_Schedule_Logic::getInstance();

        if (is_null($option)) {
            $report_list = $logic->getListByEventId($event_id, $user);
        } else {
            //ケータイからのアクセスは、ページ分割する
            $report_list = $logic->getListByEventId($event_id, $user, $option);
        }

        if (is_array($translation_map)) {
            foreach ($report_list as $id => $report) {
                $report_list_for_view[$id]['id'] = $report['_id'];
                $report_list_for_view[$id] = $this->_getView($report,
                    $translation_map);
            }
        } else {
            $column_list
                = GRN_Report_Table_Manager::getColumnList(GRN_REPORT_TABLE_REPORT);
            foreach ($report_list as $id => $report) {
                $report_list_for_view[$id]['id'] = $report['_id'];
                foreach ($column_list as $column) {
                    $name = $column;
                    if (strpos($column, 'col_') === 0) {
                        $name = substr($column, 4, strlen($column));
                    }
                    $report_list_for_view[$id][$name] = $report[$column];
                }
            }
        }

        $report_ids = [];
        foreach ($report_list as $id => $report) {
            $report_list_for_view[$id]['date'] = date('Y/m/d',
                $report['col_ctime']);
            $report_list_for_view[$id]['mdate'] = date('Y/m/d',
                $report['col_mtime']);
            $report_ids[] = $id;
        }

        //Set Report Subject Name
        $report_util = GRN_Report_Report_Controller_Utility::getInstance();
        $subject_list_for_view = &$report_util->getSubjectList($report_ids);
        $name_key = 'name';
        if (is_array($translation_map)) {
            foreach ($translation_map as $key => $value) {
                if ($value == 'name') {
                    $name_key = $key;
                }
            }
        }
        foreach (array_keys($report_list) as $report_id) {
            if (strlen($subject_list_for_view[$report_id]) > 0) {
                $report_list_for_view[$report_id][$name_key]
                    = $subject_list_for_view[$report_id];
            }
        }

        return $report_list_for_view;
    }

    function setRelatedReportInfo(&$users_event, $isFromAjax = false)
    {
        //Get UUM Instance
        global $G_container_base;
        $grn_uum = $G_container_base->getInstance('uum');

        //Get Login User
        $user = $grn_uum->getLoginUser();

        //予定のID一覧を取得
        $event_id_list = [];
        foreach (array_keys($users_event) as $key) {
            //通常予定
            $schedule_event = &$users_event[$key]['schedule_event'];
            foreach (array_keys($schedule_event) as $key2) {
                $events = &$schedule_event[$key2]['event'];
                foreach (array_keys($events) as $key3) {
                    $event_id_list[$events[$key3]['id']] = 1;
                }
            }

            //期間予定
            $banner_event = &$users_event[$key]['banner_event'];
            if ($isFromAjax) {
                foreach (array_keys($banner_event) as $key2) {
                    foreach (array_keys($banner_event[$key2]) as $key3) {
                        $events = &$banner_event[$key2][$key3];
                        foreach (array_keys($events) as $key4) {
                            $event_id_list[$events[$key4]['id']] = 1;
                        }
                    }
                }
            } else {
                foreach (array_keys($banner_event) as $key2) {
                    $events = &$banner_event[$key2];
                    foreach (array_keys($events) as $key3) {
                        $event_id_list[$events[$key3]['id']] = 1;
                    }
                }
            }
        }

        $event_id_list = array_keys($event_id_list);

        //報告書に関連するイベントIDを取得
        require_once('report/report_schedule_logic.csp');
        $report_schedule_logic
            = GRN_Report_Report_Schedule_Logic::getInstance();
        $report_relation_id_list
            = $report_schedule_logic->getRelatedReportEventIdsByEventIds($event_id_list,
            $user);

        //報告書と関連が存在するか調べる
        foreach (array_keys($users_event) as $key) {
            //通常予定
            $schedule_event = &$users_event[$key]['schedule_event'];
            foreach (array_keys($schedule_event) as $key2) {
                $events = &$schedule_event[$key2]['event'];
                foreach (array_keys($events) as $key3) {
                    $event = &$events[$key3];
                    if (isset($report_relation_id_list[$event['id']])) {
                        $event['report'] = 1;
                    } else {
                        $event['report'] = false;
                    }
                }
            }

            //期間予定
            $banner_event = &$users_event[$key]['banner_event'];
            if ($isFromAjax) {
                foreach (array_keys($banner_event) as $key2) {
                    foreach (array_keys($banner_event[$key2]) as $key3) {
                        $events = &$banner_event[$key2][$key3];
                        foreach (array_keys($events) as $key4) {
                            $event = &$events[$key4];
                            if (isset($report_relation_id_list[$event['id']])) {
                                $event['report'] = 1;
                            } else {
                                $event['report'] = false;
                            }
                        }
                    }
                }
            } else {
                foreach (array_keys($banner_event) as $key2) {
                    $events = &$banner_event[$key2];
                    foreach (array_keys($events) as $key3) {
                        $event = &$events[$key3];
                        if (isset($report_relation_id_list[$event['id']])) {
                            $event['report'] = 1;
                        } else {
                            $event['report'] = false;
                        }
                    }
                }
            }
        }
    }

    /**
     * Check whether the event is relatable for the user
     *
     * @param  int    $user_id     //User ID
     * @param  object $event       //Event
     * @param  bool   $throw_error //If true, throw error when not relatable
     * @param  bool   $report_id   //If not null, check the report has not been related yet.
     *
     * @return bool   $ret
     */
    function checkRelatable(
        $user_id,
        & $event,
        $throw_error = false,
        $report_id = null
    ) {
        $ret = true;
        $event_id = $event->id;

        //既にこのイベントに対して報告書を書いていないかチェックする。
        //ひとつのイベントに対して同じユーザーはひとつの報告書しか書けない。
        require_once('report/report_schedule_logic.csp');
        $report_schedule_logic
            = GRN_Report_Report_Schedule_Logic::getInstance();
        $isWrited = $report_schedule_logic->isWrited($event_id, $user_id);
        if ($isWrited) {
            if ($throw_error) {
                require_once('report/error_code.csp');
                cb_throw_error(E_GRN_RPRT_SCHEDULE_REPORT_WRITED);
            } else {
                $ret = false;

                return $ret;
            }
        }

        //予定の参加者でない予定には関連付けできない
        if ( ! is_array($event->users)
             || ! array_key_exists($user_id, $event->users)
        ) {
            if ($throw_error) {
                require_once('report/error_code.csp');
                cb_throw_error(E_GRN_RPRT_SCHEDULE_INVALID_ID);
            } else {
                $ret = false;

                return $ret;
            }
        }

        //1つのレポートを複数の予定に関連付けできない
        if ( ! is_null($report_id)) {
            $isRelated = $report_schedule_logic->isRelated($report_id);
            if ($isRelated) {
                require_once('report/error_code.csp');
                cb_throw_error(E_GRN_RPRT_REPORT_INVALID_ID);
            }
        }

        return $ret;
    }

    /**
     * Get Event
     *
     * @param  CB_User $user
     * @param  array   $event_info
     * @param  int     $get_mode
     * @param  int     $is_draft
     *
     * @return array    $event
     */
    public function getEvent(
        $user,
        $event_info,
        $get_mode = GRN_SCHEDULE_GET_MEMBER_ID,
        $is_draft = GRN_REPORT_SENT
    ) {
        require_once('report/report_schedule_logic.csp');
        $report_schedule_logic
            = GRN_Report_Report_Schedule_Logic::getInstance();

        $date = new CB_Date();
        if ( ! $date->parse($event_info['date'])) {
            $date = false;
        }
        $event = $report_schedule_logic->getEventDataByEventId($user,
            $event_info['event_id'], $date, $get_mode, $is_draft);

        return $event;
    }

    /**
     * Get Event By Event ID
     *
     * @param  CB_User $user
     * @param  int     $event_id
     * @param  CB_Date $date
     *
     * @return array   $event
     */
    public function getEventByEventId($user, $event_id, $date)
    {
        require_once('schedule/application.csp');
        $app = GRN_Schedule_Application::getInstance();
        $event = $app->getEvent($user, $event_id, $date, CB_DATABASE_NO_LOCK,
            false, GRN_SCHEDULE_GET_MEMBER_ID);
        if ( ! $event) {
            cb_throw_error(E_GRN_RPRT_CANNOT_ACCESS_SCHEDULE);
        }

        // 関連付け可能かチェック
        $sched_util
            = GRN_Report_Report_Schedule_Controller_Utility::getInstance();
        $sched_util->checkRelatable($user->getOID(), $event, true);

        return $event;
    }

    /**
     * Parse Date String
     *
     * @param  string $str_date
     *
     * @return CB_Date $date
     */
    public function parseDate($str_date)
    {
        $date = new CB_Date();
        if ( ! $date->parse($str_date)) {
            $date = null;
        }

        return $date;
    }

    /**
     * Get Event Item View
     *
     * @param  GRN_Schedule_Event $event
     * @param  array              $item_list_for_view
     *
     * @return array              $event_item
     */
    public function getEventItem($event, $item_list_for_view)
    {
        $keys = array_keys($item_list_for_view);
        $event_item = $item_list_for_view[$keys[0]];
        //報告書標題を予定のタイトルにする
        $event_item['text'] = html_entity_decode($event->getTitle());

        return $event_item;
    }

    /**
     * Set Event Date to Date Items
     *
     * @param CB_Date            $date
     * @param GRN_Schedule_Event $event
     * @param array              $item_list_for_view
     */
    public function setEventDateToItemList($date, $event, & $item_list_for_view)
    {
        //項目に日付があったなら、デフォルトの日付を予定の開始日,終了日にする
        $firstDate = false;
        $secondDate = false;

        //日付の取得
        $initDateStart = null;
        $initDateEnd = null;
        if ( ! is_null($date)) {
            $initDateStart = $initDateEnd = $date;
        }

        if (is_a($event, 'GRN_Schedule_BannerEvent')) {
            if (is_null($initDateStart)) {
                $initDateStart = $event->setdate;
            }
            $initDateEnd = $event->enddate;
        } else {
            if (is_null($initDateStart)) {
                $initDateStart = $event->setdatetime;
            }
            if ($event->enddatetime) {
                $initDateEnd = $event->enddatetime;
            }

        }

        //項目リストに日付を入れる
        foreach ($item_list_for_view as $iid => $item) {
            if ($item['data_type'] == 'grn.report.date') {
                if ( ! $firstDate) {
                    $item['settings']['initial_type'] = 1;
                    $item['settings']['initial_year'] = $initDateStart->year;
                    $item['settings']['initial_month'] = $initDateStart->month;
                    $item['settings']['initial_day'] = $initDateStart->day;
                    $item_list_for_view[$iid] = $item;
                    $firstDate = true;
                } elseif ( ! $secondDate) {
                    $item['settings']['initial_type'] = 1;
                    $item['settings']['initial_year'] = $initDateEnd->year;
                    $item['settings']['initial_month'] = $initDateEnd->month;
                    $item['settings']['initial_day'] = $initDateEnd->day;
                    $item_list_for_view[$iid] = $item;
                    break;
                }
            }
        }
    }
}

/**
 * Get Attached File Information
 *
 * @param  string $session_id //Session ID
 *
 * @return array  file_list                      //File Information Array
 */
function &grn_report_get_attached_file_info($session_id)
{
    //Get Session
    require_once('fw/session_manager.csp');
    $session_manager = CB_SessionManager::getInstance();
    require_once('grn/controller.csp');
    $tmp_key = grn_get_temporary_key();
    $session = $session_manager->getSession($session_id . $tmp_key);

    $use_original_files = $session->get('use_original_files');

    //Get Attached Session File
    $files = __grn_report_get_attached_session_files($session);

    $files_for_view = [];

    //Get File Information from Allready Attached Files
    require_once('grn/controller.csp');
    foreach (array_keys($files) as $key) {
        foreach (array_keys($files[$key]) as $id) {
            $file = &$files[$key][$id];
            $files_for_view[$key][$id] = grn_make_attached_file_info($file,
                'report');
        }
    }
    $files = $session->get('attached_file_item');

    $file_id_list = [];
    //Save New Uploaded File
    foreach ($_FILES as $key => $file) {
        //Check Upload Error
        if (is_array($file) && $file['error'] != UPLOAD_ERR_OK) {
            continue;
        }

        //Create Key
        $keys = explode('_', $key);
        if (count($keys) === 4) {
            $item_id = $keys[1];
            unset($keys[2]);
            unset($keys[3]);
            $key = implode('_', $keys);
        }

        //Skip old attached file if physical file does not exists anymore
        if (is_object($file) && ! $file->exists()) {
            continue;
        }
        //Add Session File
        $id = $session->addFile('attached_session_file_item',
            $file);
        $files_for_view[$key][$id] = grn_make_attached_file_info($file,
            'report');
        $files[$key][$id] = null;
        if (is_a($file, 'CB_ServerFile')) {
            $file_id_list[$item_id][$id] = $file->getId('file');
        }
    }
    $session->set('attached_file_item', $files);
    if ($use_original_files && count($file_id_list)) {
        $session->set('original_file_ids', $file_id_list);
    }

    return $files_for_view;
}

/**
 * Get Attached Session File
 *
 * @param  string $session_id //Session ID
 *
 * @return array  file_list                      //File Information Array
 */
function __grn_report_get_attached_session_files(& $session)
{
    //Get Attached File Information and Attached Session File
    require_once('fw/session_manager.csp');
    $files = $session->get('attached_file_item');
    if ( ! is_array($files)) {
        $files = [];
    }
    $session_files = $session->getFiles('attached_session_file_item');
    if ( ! is_array($session_files)) {
        $session_files = [];
    }

    global $G_INPUT;

    //Maintenance Attached Session File By fids
    if (array_key_exists('fids', $G_INPUT) && is_array($G_INPUT['fids'])) {
        $keep = [];
        foreach ($G_INPUT['fids'] as $id) {
            //Check Attached File Information
            foreach (array_keys($files) as $key) {
                if (array_key_exists($id, $files[$key])) {
                    //Check Attached Session File
                    if (array_key_exists($id, $session_files)) {
                        //Keep Session File
                        if (cb_get_pagename() !== 'report/command_handle') {
                            $keep[$key][$id] = &$session_files[$id];
                        }
                        unset($session_files[$id]);
                    } elseif ($files[$key][$id] == $id) {
                        //Keep File Information
                        $keep[$key][$id] = $id;
                    }
                }
            }
        }

        if (count($session_files) > 0) {
            //Delete Other Session File Information
            foreach (array_keys($session_files) as $id) {
                $session->unsetFile('attached_session_file_item', $id);
            }

            $attached_file = [];
            foreach (array_keys($keep) as $key) {
                $attached_file[$key] = [];
                foreach (array_keys($keep[$key]) as $id) {
                    if (is_object($keep[$key][$id])) {
                        $attached_file[$key][$id] = null;
                    } else {
                        $attached_file[$key][$id] = $id;
                    }
                }
            }
            $session->set('attached_file_item', $attached_file);
        }

        $files = $keep;
    } else {
        //Delete All Session Files
        foreach (array_keys($session_files) as $id) {
            $session->unsetFile('attached_session_file_item', $id);
        }
        $session->set('attached_file_item', null);

        $files = [];
    }

    return $files;
}

/**
 * Get Sample Line from CSV File
 *
 * @param  string $charset             //Encoded Type of CSV File
 * @param  string $skip                //Flag to Skip First Line
 * @param  string $file_id             //CSV File ID
 * @param  string $session_module_name //Session Module Name
 *
 * @return array  CSV Sample Lines
 */
function grn_report_getCSVImportSampleLine(
    $charset,
    $skip,
    $file_id,
    $session_module_name
) {
    // Get Temporary File From Session
    require_once('fw/session_manager.csp');
    $sm = CB_SessionManager::getInstance();
    $session = $sm->getSession($session_module_name);
    $files = $session->getFiles('import_files');

    // Create CSV Reader
    require_once('fw/csv.csp');
    $csv = new CB_CSVReader($charset, $files[$file_id]->getPath());

    // Create Sample Line to Display

    if ($skip) {
        // Skip First Line
        $line = $csv->readLine();
    }

    $read_lines = 5;
    $lines = [];
    for ($i = 0; $i < $read_lines; $i++) {
        if (($line = $csv->readLine()) !== false) {
            $lines[] = $line;
        } else {
            break;
        }
    }

    // Return Sample Lines
    return $lines;
}

// Date format validation
function checkDateFormat($string, &$value)
{
    //match the format of the date
    if (preg_match("/^([0-9]{2})\/([0-9]{2})\/([0-9]{4})$/", $string, $parts)) {
        //check weather the date is valid of not
        if (checkdate($parts[2], $parts[1], $parts[3])) {
            $year = $parts[3];
            $month = $parts[2];
            $day = $parts[1];
            $date = new CB_Date();
            $date->year = $year;
            $date->month = $month;
            $date->day = $day;
            $value = cb_date_convert2timestamp($date,
                GRN_Report_Item_Util_Date::DEFAULT_TIMEZONE);

            return true;
        } else {
            return false;
        }
    } else {
        return false;
    }
}
