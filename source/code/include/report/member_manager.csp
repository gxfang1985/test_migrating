<?php
/**
 * Report Application Member Class
 *
 * @date    2009/09
 * @version 1.0
 * @package grn.report
 */

/** Report Application **/
require_once('report/resources.csp');
require_once('report/table_manager.csp');

/**
 * Member Manager Class
 *
 * @package grn.report
 */
class GRN_Report_Member_Manager
{
    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
        //Sync Parent Table and Member List Cache
        $this->_table_name = 'tab_grn_report_member';
    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Report_Member_Manager
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Create Member
     *
     * @param  array $property_list //Property List(Name=>Value)
     *
     * @return int   $member_id                //Member ID
     */
    function &create($property_list)
    {
        $column_list
            = GRN_Report_Table_Manager::getColumnList(GRN_REPORT_TABLE_MEMBER);
        $column_string
            = GRN_Report_Table_Manager::createColumnString($column_list,
            $property_list);
        $value_string
            = GRN_Report_Table_Manager::createValueString($column_list,
            $property_list);
        $ret = GRN_Report_Table_Manager::create($this->_table_name,
            $column_string, $value_string);

        return $ret;
    }

    /**
     * Create Members
     *
     * @param array $property_list_array //Array of Property List(Name=>Value)
     *
     * @return BOOL result
     */
    function createMulti($property_list_array)
    {
        $column_list
            = GRN_Report_Table_Manager::getColumnList(GRN_REPORT_TABLE_MEMBER);
        $key = array_keys($property_list_array);
        $property_list = $property_list_array[$key[0]];
        $column_string
            = GRN_Report_Table_Manager::createColumnString($column_list,
            $property_list);
        $value_strings = [];
        foreach ($property_list_array as $property_list) {
            $value_strings[]
                = GRN_Report_Table_Manager::createValueString($column_list,
                $property_list);
        }
        GRN_Report_Table_Manager::createMulti($this->_table_name,
            $column_string, $value_strings);

        return true;
    }

    /**
     * Get User ID List of Report Member
     *
     * @param  int $report_id //Report ID
     *
     * @return array  $user_id_list               //User ID List
     */
    function &getList($report_id)
    {
        $database = GRN_Report_Table_Manager::getDatabase();

        //Create Column List
        $column_list = null;
        $column_list
            =& GRN_Report_Table_Manager::getColumnList(GRN_REPORT_TABLE_MEMBER);
        $column_list = implode(',', $column_list);

        $query = cb_queryf($database,
            'SELECT @S FROM @S WHERE col_report = "@S" ORDER BY col_list_index ASC',
            $column_list, $this->_table_name, $report_id);
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Create User ID List
        $user_id_list = [];
        $count = $database->num_rows($result);
        for ($i = 0; $i < $count; $i++) {
            $row = $database->fetch_assoc($result);
            $user_id_list[] = $row['col_user'];
        }

        $database->free_result($result);

        //Return Member
        return $user_id_list;
    }

    /**
     * Get Member Rows of Report Member
     *
     * @param  int $report_id //Report ID
     *
     * @return array  $row_list                   //Member Row List
     */
    function &getRowList($report_id)
    {
        $database = GRN_Report_Table_Manager::getDatabase();

        //Create Column List
        $column_list = null;
        $column_list
            =& GRN_Report_Table_Manager::getColumnList(GRN_REPORT_TABLE_MEMBER);
        $column_list = implode(',', $column_list);

        $query = cb_queryf($database,
            'SELECT @S FROM @S WHERE col_report = "@S" ORDER BY col_list_index ASC',
            $column_list, $this->_table_name, $report_id);
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Create User ID List
        $row_list = [];
        $count = $database->num_rows($result);
        for ($i = 0; $i < $count; $i++) {
            $row = $database->fetch_assoc($result);
            $row_list[] = $row;
        }

        $database->free_result($result);

        //Return Member
        return $row_list;
    }

    /**
     * Get User ID List of Report Member
     *
     * @param  array $report_ids //Report ID List
     *
     * @return array  $user_id_list               //User ID List
     */
    function &getReportsList($report_ids)
    {
        if ( ! $report_ids || count($report_ids) == 0) {
            return [];
        }

        $database =& GRN_Report_Table_Manager::getDatabase();

        $reports = [];
        foreach ($report_ids as $report_id) {
            $reports[] = cb_queryf($database, "'@S'", $report_id);
        }
        $reports_string = implode(',', $reports);

        $query = 'SELECT * FROM ' . $this->_table_name
                 . ' WHERE col_report IN (' . $reports_string
                 . ') ORDER BY col_list_index ASC';
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Create User ID List
        $ret = [];
        foreach ($report_ids as $report_id) {
            $ret[$report_id] = [];
        }
        while ($row = $database->fetch_assoc($result)) {
            $report_id = $row['col_report'];
            $user_id = $row['col_user'];
            $ret[$report_id][$user_id] = $user_id;
        }

        $database->free_result($result);

        //Return Member List
        return $ret;
    }

    /**
     * Remove Member
     *
     * @param  int $report_id //Report ID
     * @param  int $user_id   //User ID
     *
     * @return BOOL   $result                     //Result
     */
    function remove($report_id, $user_id)
    {
        //Get Database
        $database =& GRN_Report_Table_Manager::getDatabase();

        //Create Query
        $where_string = cb_queryf($database,
            'col_report = "@S" AND col_user = "@S"', $report_id, $user_id);

        //Remove
        GRN_Report_Table_Manager::remove($this->_table_name, $where_string);

        return true;
    }

    /**
     * Remove Multiple Member
     *
     * @param array $report_id    //Report ID
     * @param array $user_id_list //User ID List
     * @param BOOL  $result       //Result
     */
    function removeMulti($report_id, $user_id_list)
    {
        if (is_array($user_id_list) && count($user_id_list) === 0) {
            return;
        }

        foreach ($user_id_list as $user_id) {
            $this->remove($report_id, $user_id);
        }

        return true;
    }

    /**
     * Remove All Report
     *
     * @param int  $report_id //Report ID
     * @param BOOL $result    //Result
     */
    function removeAll($report_id = null)
    {
        //Get Database
        $database =& GRN_Report_Table_Manager::getDatabase();

        //Create Query
        $where_string = "";
        if ($report_id == -1) {
            $where_string = 'col_report IS NULL';
        } elseif ( ! is_null($report_id)) {
            $where_string = cb_queryf($database, 'col_report = "@S"',
                $report_id);
        }

        GRN_Report_Table_Manager::remove($this->_table_name, $where_string);

        return true;
    }

    /**
     * Change Member Order
     *
     * @param  int $report_id      //Report ID
     * @param  int $member_id_list //Member ID List
     *
     * @return BOOL   $result                    //Result
     */
    function changeOrder($report_id, $member_id_list)
    {
        //Set New List Index
        $list_index = 0;
        foreach ($member_id_list as $member_id) {
            $this->_updateListIndex($report_id, $member_id, $list_index);
            $list_index++;
        }

        return true;
    }

    function _updateListIndex($report_id, $member_id, $list_index)
    {
        //Get Database
        $database = GRN_Report_Table_Manager::getDatabase();
        $tablename
            = GRN_Report_Table_Manager::getTableName(GRN_REPORT_TABLE_MEMBER);

        $query = cb_queryf($database,
            "UPDATE @S SET col_list_index = '@S' WHERE col_report = '@S' AND col_user = '@S'",
            $tablename,
            $list_index,
            $report_id,
            $member_id);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }
    }

    function updateOperator($report_id, $operator_values)
    {
        //Get Database
        $database = GRN_Report_Table_Manager::getDatabase();
        $tablename
            = GRN_Report_Table_Manager::getTableName(GRN_REPORT_TABLE_MEMBER);

        foreach ($operator_values as $value => $user_ids) {
            foreach ($user_ids as $key => $user_id) {
                $user_ids[$key] = cb_queryf($database, "'@S'", $user_id);
            }
            $user_ids_str = implode(',', $user_ids);

            $query
                = sprintf("UPDATE %s SET col_is_operator = '%s' WHERE col_report = '%s' AND col_user IN (%s)",
                $tablename,
                $database->escape($value),
                $database->escape($report_id),
                $user_ids_str);

            //Execute Query
            $result = $database->query($query);
            if ($result === false) {
                //Throw Query Error
                $database->throwError([
                    'query' => 'query failed: ' . $query
                ]);
            }
        }
    }
}


