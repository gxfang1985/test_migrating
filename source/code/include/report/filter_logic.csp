<?php
/**
 * Report Application Filter Class
 *
 * @author  Shou Aoki 2009/09
 * @version 1.0
 * @package grn.report
 */

/** Report Application **/
require_once('report/resources.csp');
require_once('report/filter_logic_base.csp');
require_once('report/table_manager.csp');
require_once('report/filter_manager.csp');
require_once('fw/string_util.csp');
require_once('grn/numeric_util.csp');
require_once('report/error_code.csp');

/**
 * Filter Manager Class
 *
 * @package grn.report
 */
class GRN_Report_Filter_Logic extends GRN_Report_Filter_Logic_Base
{
    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Report_Filter_Logic $instance  Instance of GRN_Report_Filter_Logic
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    public function createFilter(
        $category_id,
        $filter_name,
        $foreign_key,
        $and_or,
        $formtype,
        $user = null
    ) {
        cb_trim_check($foreign_key,
            E_GRN_RPRT_FILTER_NOT_INPUT_NECESSARY);       //Foreign Key
        cb_trim_check($filter_name,
            E_GRN_RPRT_FILTER_NOT_INPUT_NECESSARY);       //Display Name

        if ($category_id == GRN_REPORT_CATEGORY_ROOT_ID) {
            cb_throw_error(E_GRN_RPRT_CATEGORY_INVALID_ID);
        }

        if ($category_id == GRN_REPORT_CATEGORY_NONPARTY_ID) {
            $category_id = null;
        }
        $property_list = [];
        $property_list[GRN_REPORT_COLUMN_CATEGORY] = $category_id;
        $property_list[GRN_REPORT_COLUMN_NAME] = $filter_name;
        $property_list[GRN_REPORT_COLUMN_FOREIGN_KEY] = $foreign_key;
        $property_list[GRN_REPORT_COLUMN_OR] = $and_or;
        $property_list[GRN_REPORT_COLUMN_FORMTYPE] = $formtype;
        $property_list[GRN_REPORT_COLUMN_ACTIVE]
            = GRN_REPORT_FILTER_DEACTIVE;

        /* GRN2-1936 pending
        if( ! is_null($user) )
        {
            $property_list[GRN_REPORT_COLUMN_PERSONAL_USER] = $user->getOID();
        }
         */

        //$property_list[GRN_REPORT_COLUMN_LIST_INDEX] = $list_index;

        //Set Creator
        GRN_Report_Table_Manager::setCreator($property_list);

        $manager = GRN_Report_Filter_Manager::getInstance();
        $fid = $manager->createFilter($property_list);

        if ($fid) {
            return $fid;
        } else {
            return false;
        }
    }

    public function createFormCondition($fid, $value)
    {
        cb_numeric_check($fid, E_GRN_RPRT_FILTER_INVALID_ID);

        $property_list = [];
        $property_list[GRN_REPORT_COLUMN_FILTER] = $fid;
        $property_list[GRN_REPORT_COLUMN_TEXT] = $value;

        $manager = GRN_Report_Filter_Manager::getInstance();
        $fcid = $manager->createFormCondition($property_list);

        return $fcid;
    }

    public function modifyFormCondition($fcid, $value)
    {
        $property_list = [];
        $property_list[GRN_REPORT_COLUMN_TEXT] = $value;

        $manager = GRN_Report_Filter_Manager::getInstance();
        $fcid = $manager->modifyFormCondition($fcid, $property_list);

        return $fcid;
    }

    public function addFilterFormRelation($filter_id, $form_id)
    {
        cb_numeric_check($filter_id, E_GRN_RPRT_FILTER_INVALID_ID);
        cb_numeric_check($form_id, E_GRN_RPRT_FORM_INVALID_ID);

        $property_list = [];
        $property_list[GRN_REPORT_COLUMN_FILTER] = $filter_id;
        $property_list[GRN_REPORT_COLUMN_FORM] = $form_id;

        $manager = GRN_Report_Filter_Manager::getInstance();
        $rid = $manager->addFilterFormRelation($property_list);

        return $rid;
    }

    //保存すべきカラムを返す
    public function getSaveColumn($type, $condition, $item_type)
    {
        switch ($type) {
            case GRN_REPORT_FILTER_TYPE_CREATE_DATE:
                return GRN_REPORT_COLUMN_NUMBER;
            case GRN_REPORT_FILTER_TYPE_FORM_NAME:
            case GRN_REPORT_FILTER_TYPE_REPORT_NAME:
            case GRN_REPORT_FILTER_TYPE_CREATOR:
            case GRN_REPORT_FILTER_TYPE_FOLLOW:
            case GRN_REPORT_FILTER_TYPE_ANY:
                return GRN_REPORT_COLUMN_TEXT;
            case GRN_REPORT_FILTER_TYPE_ITEMDATA:
                switch ($condition) {
                    case GRN_REPORT_FILTER_CONDITION_BIGGER:
                    case GRN_REPORT_FILTER_CONDITION_AND_OVER:
                    case GRN_REPORT_FILTER_CONDITION_SMALLER:
                    case GRN_REPORT_FILTER_CONDITION_OR_LESS:
                        return GRN_REPORT_COLUMN_NUMBER;
                    default:
                        return GRN_REPORT_COLUMN_TEXT;
                }
            case GRN_REPORT_FILTER_TYPE_ITEMDATA_DETAIL:
                switch ($item_type) {
                    case GRN_REPORT_CONDITION_ITEM_NUMERIC:
                    case GRN_REPORT_CONDITION_ITEM_DATE:
                    case GRN_REPORT_CONDITION_ITEM_TIME:
                        return GRN_REPORT_COLUMN_NUMBER;
                    default:
                        return GRN_REPORT_COLUMN_TEXT;
                }
        }
    }

    public function createCondition(
        $filter_id,
        $condition,
        $type,
        $value,
        $item_id = null,
        $item_type = null
    ) {
        cb_numeric_check($filter_id, E_GRN_RPRT_FILTER_INVALID_ID);
        cb_trim_check($condition, E_GRN_RPRT_FILTER_INVALID_CONDITION);

        $property_list = [];
        $property_list[GRN_REPORT_COLUMN_FILTER] = $filter_id;
        $property_list[GRN_REPORT_COLUMN_CONDITION] = $condition;

        //typeとconditionによってテキストカラムに保存するか数値カラムに保存するかが変わる
        $column = $this->getSaveColumn($type,
            $condition, $item_type);
        $property_list[$column] = $value;
        $property_list[GRN_REPORT_COLUMN_TYPE] = $type;
        if ($type == GRN_REPORT_FILTER_TYPE_ITEMDATA_DETAIL
            && is_numeric($item_id)
            && $item_id != GRN_REPORT_FILTER_CONDITION_ITEMTYPE_ALL
        ) {
            $property_list[GRN_REPORT_COLUMN_ITEM] = $item_id;
        }

        //Set Creator
        GRN_Report_Table_Manager::setCreator($property_list);

        $manager = GRN_Report_Filter_Manager::getInstance();
        $cid = $manager->createCondition($property_list);
        if ($cid) {
            return $cid;
        } else {
            return false;
        }
    }

    public function modifyFilter(
        $filter_id,
        $category_id,
        $filter_name,
        $foreign_key = null,
        $or = null,
        $list_index = null,
        $formtype = null
    ) {

        cb_numeric_check($filter_id, E_GRN_RPRT_FILTER_INVALID_ID);
        if ( ! is_null($foreign_key)) {
            cb_trim_check($foreign_key, E_GRN_RPRT_FILTER_NOT_INPUT_NECESSARY);
        }       //Foreign Key
        cb_trim_check($filter_name,
            E_GRN_RPRT_FILTER_NOT_INPUT_NECESSARY);       //Display Name

        if ($category_id == GRN_REPORT_CATEGORY_NONPARTY_ID) {
            $category_id = null;
        }

        $property_list = [];
        $property_list[GRN_REPORT_COLUMN_CATEGORY] = $category_id;
        $property_list[GRN_REPORT_COLUMN_NAME] = $filter_name;
        if ( ! is_null($foreign_key)) {
            $property_list[GRN_REPORT_COLUMN_FOREIGN_KEY] = $foreign_key;
        }

        if ( ! is_null($or)) {
            $property_list[GRN_REPORT_COLUMN_OR] = $or;
        }

        if ( ! is_null($list_index)) {
            $property_list[GRN_REPORT_COLUMN_LIST_INDEX] = $list_index;
        }

        if ( ! is_null($formtype)) {
            $property_list[GRN_REPORT_COLUMN_FORMTYPE] = $formtype;
        }

        //Set Creator
        GRN_Report_Table_Manager::setModifier($property_list);

        $manager = GRN_Report_Filter_Manager::getInstance();
        $manager->modifyFilter($filter_id, $property_list);
    }

    public function modifyCondition(
        $condition_id,
        $condition,
        $type = null,
        $value = null,
        $item_id = null,
        $item_type = null
    ) {
        cb_numeric_check($condition_id, E_GRN_RPRT_FILTER_INVALID_CONDITION_ID);
        cb_trim_check($condition, E_GRN_RPRT_FILTER_INVALID_CONDITION);

        $property_list = [];
        $property_list[GRN_REPORT_COLUMN_CONDITION] = $condition;
        if ( ! is_null($value)) {
            $column = $this->getSaveColumn($type, $condition, $item_type);
            if ($column == GRN_REPORT_COLUMN_TEXT) {
                $property_list[GRN_REPORT_COLUMN_TEXT] = $value;
                $property_list[GRN_REPORT_COLUMN_NUMBER] = null;
            } else {
                $property_list[GRN_REPORT_COLUMN_NUMBER] = $value;
                $property_list[GRN_REPORT_COLUMN_TEXT] = null;
            }
        }
        if ( ! is_null($type)) {
            $property_list[GRN_REPORT_COLUMN_TYPE] = $type;
        }
        if ($type == GRN_REPORT_FILTER_TYPE_ITEMDATA_DETAIL
            && ! is_null($item_id)
            && is_numeric($item_id)
            && $item_id != GRN_REPORT_FILTER_CONDITION_ITEMTYPE_ALL
        ) {
            $property_list[GRN_REPORT_COLUMN_ITEM] = $item_id;
        } else {
            $property_list[GRN_REPORT_COLUMN_ITEM] = null;
        }

        //Set Creator
        GRN_Report_Table_Manager::setModifier($property_list);
        $manager = GRN_Report_Filter_Manager::getInstance();
        $manager->modifyCondition($condition_id, $property_list);
    }

    public function removeFilter($filterId, $user_id = null)
    {
        cb_numeric_check($filterId, E_GRN_RPRT_FILTER_INVALID_ID);

        $manager = GRN_Report_Filter_Manager::getInstance();
        $manager->removeFilter($filterId, $user_id);
    }

    public function removeCondition($condition_id)
    {
        cb_numeric_check($condition_id, E_GRN_RPRT_FILTER_INVALID_CONDITION);

        $manager = GRN_Report_Filter_Manager::getInstance();
        $manager->removeCondition($condition_id);
    }

    public function removeAll($category_id)
    {
        cb_numeric_check($category_id, E_GRN_RPRT_CATEGORY_INVALID_ID);

        $manager = GRN_Report_Filter_Manager::getInstance();
        $manager->removeAll($category_id);
    }

    public function removePersonalFiltersByUserId($user_id)
    {
        cb_numeric_check($user_id, E_GRN_RPRT_CATEGORY_INVALID_ID);

        $manager = GRN_Report_Filter_Manager::getInstance();
        $manager->removePersonalFiltersByUserId($user_id);
    }

    public function removeMulti($filter_id_list, $user_id = null)
    {
        if ( ! is_array($filter_id_list)) {
            //Not Input Necessary
            require_once('report/error_code.csp');
            cb_throw_error(E_GRN_RPRT_FILTER_NOT_INPUT_NECESSARY);
        }

        //Remove Item
        $filter_manager = GRN_Report_Filter_Manager::getInstance();
        $filter_manager->removeMulti($filter_id_list, $user_id);

        //監査する
        require_once('report/inspection.csp');
        $inspection = GRN_Report_Filter_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            $message_type = '';
            $message_args = [];
            $message_args['fids'] = $filter_id_list;
            if ( ! is_null($user_id)) {
                $message_args['uid'] = $user_id;
                $message_type = 'personal_filter_delete_multi';
            } else {
                $message_type = 'filter_delete_multi';
            }

            //Record Inspection
            $inspection->record($message_type, $message_args);
        }
    }

    public function activate($filterId)
    {
        cb_numeric_check($filterId, E_GRN_RPRT_FILTER_INVALID_ID);

        $property_list = [];
        $property_list[GRN_REPORT_COLUMN_ACTIVE] = GRN_REPORT_FILTER_ACTIVE;

        GRN_Report_Table_Manager::setModifier($property_list);

        $filter_manager = GRN_Report_Filter_Manager::getInstance();
        $filter_manager->modifyFilter($filterId, $property_list);
    }

    public function deactivate($filterId)
    {
        cb_numeric_check($filterId, E_GRN_RPRT_FILTER_INVALID_ID);

        $property_list = [];
        $property_list[GRN_REPORT_COLUMN_ACTIVE] = GRN_REPORT_FILTER_DEACTIVE;

        GRN_Report_Table_Manager::setModifier($property_list);

        $filter_manager = GRN_Report_Filter_Manager::getInstance();
        $filter_manager->modifyFilter($filterId, $property_list);
    }

    /**
     * Copy Multiple System Filter
     *
     * @param  array $filter_id_list //Filter ID List
     * @param  int   $category_id    //Category ID
     *
     * @return BOOL   $result                    //Result
     */
    public function copyMulti($filter_id_list, $category_id = null)
    {
        //Check Argument
        if ( ! is_array($filter_id_list)) {
            //Not Input Necessary
            require_once('report/error_code.csp');
            cb_throw_error(E_GRN_RPRT_FILTER_NOT_INPUT_NECESSARY);
        }

        //Get Filter List
        $filter_manager = GRN_Report_Filter_Manager::getInstance();
        $filter_list =& $filter_manager->getSystemList($category_id);

        //Copy Filter List
        $filter_id_map = [];
        foreach ($filter_id_list as $filter_id) {
            $filter = $filter_list[$filter_id];

            //Unset _id Property
            unset($filter['_id']);

            //Change Display Name
            $filter[GRN_REPORT_COLUMN_NAME] = cb_plain_msg(GRN_REPORT_MODULE_ID,
                'copy_format',
                ['copy_name' => $filter[GRN_REPORT_COLUMN_NAME]]);

            //Change Foreign Key
            $filter[GRN_REPORT_COLUMN_FOREIGN_KEY]
                = cb_plain_msg(GRN_REPORT_MODULE_ID, 'copy_format',
                ['copy_name' => $filter[GRN_REPORT_COLUMN_FOREIGN_KEY]]);

            //Clear Category ID
            if ($category_id == -1 || is_null($category_id)) {
                unset($filter[GRN_REPORT_COLUMN_CATEGORY]);
            }

            //Clear List Index 
            unset($filter[GRN_REPORT_COLUMN_LIST_INDEX]);

            //Change Creator
            GRN_Report_Table_Manager::setCreator($filter);

            //Add Filter
            $filter_id_map[$filter_id] = $filter_manager->createFilter($filter);

            //Copy Form Condition
            if ($filter[GRN_REPORT_COLUMN_FORMTYPE]
                == GRN_REPORT_FILTER_FORM_TYPE_NAME
            ) {
                $form_condition = $this->getFilterFormCondition($filter_id);
                $this->createFormCondition($filter_id_map[$filter_id],
                    $form_condition['col_text']);
            } elseif ($filter[GRN_REPORT_COLUMN_FORMTYPE]
                      == GRN_REPORT_FILTER_FORM_TYPE_SELECT
            ) {
                $form_relation = $this->getFilterFormRelation($filter_id);
                $this->addFilterFormRelation($filter_id_map[$filter_id],
                    $form_relation['col_form']);
            }

            //Add Conditions
            if (is_array($filter['conditions'])) {
                foreach ($filter['conditions'] as $condition) {
                    $this->copyCondition($filter_id_map[$filter_id],
                        $condition);
                }
            }

            //Add Display Users
            $display_users = $filter_manager->getDisplayUserIds($filter_id);
            if ($display_users) {
                $this->registerDisplayUsers($filter_id_map[$filter_id],
                    $display_users);
            }
        }

        //Return Filter ID Map
        return $filter_id_map;
    }

    /**
     * Copy Multiple Filter
     *
     * @param  array $filter_id_list //Filter ID List
     * @param  int   $user_id        //User ID
     *
     * @return BOOL   $result                    //Result
     */
    public function copyPersonalFilters($filter_id_list, $user_id)
    {
        //Check Argument
        if ( ! is_array($filter_id_list)) {
            //Not Input Necessary
            require_once('report/error_code.csp');
            cb_throw_error(E_GRN_RPRT_FILTER_NOT_INPUT_NECESSARY);
        }

        //Get Filter List
        $filter_manager = GRN_Report_Filter_Manager::getInstance();
        $filter_list
            =& $filter_manager->getPersonalFilterListByUserId($user_id);

        //Copy Filter List
        $filter_id_map = [];
        foreach ($filter_id_list as $filter_id) {
            $filter = $filter_list[$filter_id];

            //Unset _id Property
            unset($filter['_id']);

            //Change Display Name
            $filter[GRN_REPORT_COLUMN_NAME] = cb_plain_msg(GRN_REPORT_MODULE_ID,
                'copy_format',
                ['copy_name' => $filter[GRN_REPORT_COLUMN_NAME]]);

            //Change Foreign Key
            $filter[GRN_REPORT_COLUMN_FOREIGN_KEY]
                = cb_plain_msg(GRN_REPORT_MODULE_ID, 'copy_format',
                ['copy_name' => $filter[GRN_REPORT_COLUMN_FOREIGN_KEY]]);

            //Clear List Index 
            unset($filter[GRN_REPORT_COLUMN_LIST_INDEX]);

            //Change Creator
            GRN_Report_Table_Manager::setCreator($filter);

            //Add Filter
            $filter_id_map[$filter_id] = $filter_manager->createFilter($filter);

            //Copy Form Condition
            if ($filter[GRN_REPORT_COLUMN_FORMTYPE]
                == GRN_REPORT_FILTER_FORM_TYPE_NAME
            ) {
                $form_condition = $this->getFilterFormCondition($filter_id);
                $this->createFormCondition($filter_id_map[$filter_id],
                    $form_condition['col_text']);
            } elseif ($filter[GRN_REPORT_COLUMN_FORMTYPE]
                      == GRN_REPORT_FILTER_FORM_TYPE_SELECT
            ) {
                $form_relation = $this->getFilterFormRelation($filter_id);
                $this->addFilterFormRelation($filter_id_map[$filter_id],
                    $form_relation['col_form']);
            }

            //Add Conditions
            if (is_array($filter['conditions'])) {
                foreach ($filter['conditions'] as $condition) {
                    $this->copyCondition($filter_id_map[$filter_id],
                        $condition);
                }
            }
        }

        //Inspection
        require_once('report/inspection.csp');
        $inspection = GRN_Report_PersonalFilter_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            $message_type = 'personal_filter_copy';
            $message_args = [];
            $message_args['fids'] = $filter_id_map;
            $message_args['uid'] = $user_id;

            //Record Inspection
            $inspection->record($message_type, $message_args);
        }

        //Return Filter ID Map
        return $filter_id_map;
    }

    public function copyCondition($filter_id, $condition)
    {
        cb_numeric_check($filter_id, E_GRN_RPRT_FILTER_INVALID_ID);

        require_once('report/table_manager.csp');
        $column_list
            = GRN_Report_Table_Manager::getColumnList(GRN_REPORT_TABLE_FILTERCONDITION);

        $property_list = [];
        foreach ($column_list as $column) {
            $property_list[$column] = $condition[$column];
        }
        $property_list[GRN_REPORT_COLUMN_FILTER] = $filter_id;

        $manager = GRN_Report_Filter_Manager::getInstance();
        $cid = $manager->createCondition($property_list);
        if ($cid) {
            return $cid;
        } else {
            return false;
        }
    }

    /**
     * Change Filter Order
     *
     * @param  int $filter_id_list //Filter ID List
     *
     * @return BOOL   $result                    //Result
     */
    public function changeOrder($filter_id_list)
    {
        //Check Argument
        if ( ! is_array($filter_id_list)) {
            require_once('fw/string_util.csp');
            require_once('report/error_code.csp');
            cb_throw_error(E_GRN_RPRT_FILTER_NOT_INPUT_NECESSARY);
        }

        //Change Order
        $filter_manager = GRN_Report_Filter_Manager::getInstance();
        $filter_manager->changeOrder($filter_id_list);

        return true;
    }

    public function registerDisplayUsers($filterId, $user_id_list)
    {
        cb_numeric_check($filterId, E_GRN_RPRT_FILTER_INVALID_ID);
        if ( ! is_array($user_id_list)) {
            require_once('report/error_code.csp');
            cb_throw_error(E_GRN_RPRT_FILTER_NOT_INPUT_NECESSARY);
        }

        //Change Order
        $filter_manager = GRN_Report_Filter_Manager::getInstance();
        $filter_manager->registerDisplayUsers($filterId, $user_id_list);
    }

    public function useFilter($userId, $filterId)
    {
        cb_numeric_check($filterId, E_GRN_RPRT_FILTER_INVALID_ID);
        cb_numeric_check($userId, E_GRN_RPRT_INVALID_USER_ID);

        $filter_manager = GRN_Report_Filter_Manager::getInstance();
        $filter_manager->useFilter($userId, $filterId);
    }

    public function getRecentUserFilterList($userId)
    {
        cb_numeric_check($userId, E_GRN_RPRT_INVALID_USER_ID);

        $filter_manager = GRN_Report_Filter_Manager::getInstance();
        $filters = $filter_manager->getRecentUserFilterList($userId);

        return $filters;
    }

    public function getUserDisplayFilterList($userId)
    {
        cb_numeric_check($userId, E_GRN_RPRT_INVALID_USER_ID);

        $filter_manager = GRN_Report_Filter_Manager::getInstance();
        $filters = $filter_manager->getUserDisplayFilterList($userId);

        return $filters;
    }

    public function getUserAccessibleFilterList($userId)
    {
        cb_numeric_check($userId, E_GRN_RPRT_INVALID_USER_ID);

        $filter_manager = GRN_Report_Filter_Manager::getInstance();
        $filters = $filter_manager->getUserAccessibleFilterList($userId);

        return $filters;
    }

    public function removeFilterFormRelation($filter_id)
    {
        cb_numeric_check($filter_id, E_GRN_RPRT_FILTER_INVALID_ID);
        $filter_manager = GRN_Report_Filter_Manager::getInstance();
        $filter_manager->removeFilterFormRelation($filter_id);
    }

    public function removeFilterFormCondition($filter_id)
    {
        cb_numeric_check($filter_id, E_GRN_RPRT_FILTER_INVALID_ID);
        $filter_manager = GRN_Report_Filter_Manager::getInstance();
        $filter_manager->removeFilterFormCondition($filter_id);
    }
}
