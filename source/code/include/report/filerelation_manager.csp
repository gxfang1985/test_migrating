<?php
/**
 * Report Application File Relation Class
 *
 * @date    2009/10
 * @version 1.0
 * @package grn.report
 */

/** Report Application **/
require_once('report/resources.csp');
require_once('report/filerelation_manager_base.csp');

/**
 * File Relation Manager Class
 *
 * @package grn.report
 */
class GRN_Report_FileRelation_Manager
    extends GRN_Report_FileRelation_Manager_Base
{
    /**
     * Constructor
     *
     * @return void
     */
    function __construct()
    {
        //Get Parent Instance
        $parent = parent::getInstance();

        //Sync Parent Table and File List Cache
        $this->_table_name =& $parent->_table_name;
        $this->_list =& $parent->_list;
    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Report_FileRelation_Manager
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Create File
     *
     * @param  array $property_list //Property List(Name=>Value)
     *
     * @return string $file_id         //File ID
     */
    function create($property_list)
    {
        //Get Database
        $database = GRN_Report_Table_Manager::getDataBase();

        //Create Column List
        $column_list
            =& GRN_Report_Table_Manager::getColumnList(GRN_REPORT_TABLE_FILERELATION);

        //Create Query
        $insert_list = [];
        foreach ($column_list as $column) {
            if ($column === '_id') {
                continue;
            }

            if (array_key_exists($column, $property_list)) {
                $insert_list[$column] = cb_queryf($database, '"@S"',
                    $property_list[$column]);
            }
        }
        $column_string = implode(', ', array_keys($insert_list));
        $value_string = implode(', ', $insert_list);
        $query = sprintf('INSERT %s(%s) VALUES (%s)',
            $this->_table_name, $column_string, $value_string);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Return File ID
        $file_id = $database->get_insert_id();

        return $file_id;
    }

    /**
     * Update File
     *
     * @param  array $file_id       //File ID
     * @param  array $property_list //Property List(Name=>Value)
     *
     * @return array $file_id          //File ID
     */
    function update($file_id, $property_list)
    {
        //Get Database
        $database =& GRN_Report_Table_Manager::getDataBase();

        //Create Column List
        $column_list
            =& GRN_Report_Table_Manager::getColumnList(GRN_REPORT_TABLE_FILERELATION);

        //Create Query
        $update_list = [];
        foreach ($column_list as $column) {
            if ($column === '_id') {
                continue;
            }

            if (array_key_exists($column, $property_list)) {
                $update_list[$column] = cb_queryf($database, '@S = "@S"',
                    $column, $property_list[$column]);
            }
        }
        $update_string = implode(', ', $update_list);
        $where_string = cb_queryf($database, "_id = '@S'", $file_id);
        $query = sprintf('UPDATE %s SET %s WHERE %s',
            $this->_table_name, $update_string, $where_string);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Return File ID
        return $file_id;
    }

    /**
     * Remove File
     *
     * @param int $file_id //File ID
     *
     * @return bool
     */
    function remove($file_id)
    {
        //Get Database
        $database =& GRN_Report_Table_Manager::getDataBase();

        //Create Column List
        $column_list = implode(',',
            GRN_Report_Table_Manager::getColumnList(GRN_REPORT_TABLE_FILERELATION));

        //Create Query
        $where_string = cb_queryf($database, "_id = '@S'", $file_id);
        $query = sprintf('DELETE FROM %s WHERE %s', $this->_table_name,
            $where_string);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Delete From File List
        foreach (array_keys($this->_list) as $key) {
            if (in_array($file_id, $this->_list[$key])) {
                unset($this->_list[$key][$file_id]);
            }
        }

        return true;
    }

    /**
     * Remove Multiple Data File
     *
     * @param array $file_id_list //File List
     *
     * @return bool
     */
    function removeMulti($file_id_list)
    {
        //Get Database
        $database =& GRN_Report_Table_Manager::getDataBase();

        //Create Column List
        $column_list = implode(',',
            GRN_Report_Table_Manager::getColumnList(GRN_REPORT_TABLE_FILERELATION));

        //Create Query
        foreach ($file_id_list as $key => $value) {
            $file_id_list[$key] = cb_queryf($database, "'@S'", $value);
        }
        $file_id_string = implode(',', $file_id_list);
        $where_string = '_id IN(' . $file_id_string . ')';
        $query = sprintf('DELETE FROM %s WHERE %s', $this->_table_name,
            $where_string);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Delete From File List
        $file_id = current($file_id_list);
        foreach (array_keys($this->_list) as $key) {
            if (in_array($file_id, $this->_list[$key])) {
                foreach ($file_id_list as $file_id) {
                    unset($this->_list[$key][$file_id]);
                }
            }
        }

        return true;
    }

    /**
     * Remove All File
     *
     * @param int $type    //Attach Type (Follow or ItemData)
     * @param int $data_id //Data ID
     *
     * @return bool
     */
    function removeAll($type, $data_id = null)
    {
        //Get Database
        $database = GRN_Report_Table_Manager::getDataBase();

        //Create Column List
        $column_list = implode(',',
            GRN_Report_Table_Manager::getColumnList(GRN_REPORT_TABLE_FILERELATION));

        //Create Query
        $where_string = "";
        if ( ! is_null($data_id)) {
            if ($type == GRN_REPORT_FOLLOW_FILE) {
                $where_string = cb_queryf($database, "WHERE col_follow = '@S'",
                    $data_id);
            } elseif ($type == GRN_REPORT_ITEM_DATA_FILE) {
                $where_string = cb_queryf($database,
                    "WHERE col_item_data = '@S'", $data_id);
            } else {
                return false;
            }
        }
        $query = sprintf('DELETE FROM %s %s', $this->_table_name,
            $where_string);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Delete From File List
        unset($this->_list[$data_id]);

        return true;
    }
}


