<?php

require_once('developer/azunit.csp');
require_once('report/report_manager_base.csp');

class test_grn_report_report_manager_base extends CB_TestCase
{
    /** database **/
    var $_database = null;

    /** table_name **/
    var $_report_table_name = null;
    var $_item_data_table_name = null;
    var $_item_data_file_table_name = null;

    /** Test Target List **/
    var $_form_list = null;
    var $_report_list = null;
    var $_item_data_list = null;
    var $_item_data_file_list = null;

    /** Unique key **/
    var $_unique_key = null;

    /** Basic Value List **/
    var $_form_value_list = [];
    var $_report_value_list = [];
    var $_item_data_value_list = [];
    var $_item_data_file_value_list = [];

    /**
     * Constructor
     *
     * @access private
     *
     * @param string $test_method //Test Method Name
     */
    function test_grn_report_report_manager_base($test_method)
    {
        //Initialize Parent Class
        parent::CB_TestCase($test_method);

        //Initalize Randam Key
        mt_srand(time());

        //Initialize Unique Key
        $this->_unique_key = $test_method . time();

        //Get Database Connection
        global $G_container_base;
        $this->_database =& $G_container_base->getInstance('dbconn');

        //Set table name
        $this->_form_table_name = 'tab_grn_report_form';
        $this->_report_table_name = 'tab_grn_report_report';
        $this->_item_data_table_name = 'tab_grn_report_itemdata';
        $this->_item_data_file_table_name = 'tab_grn_report_itemdatafile';

        //Set Basic Value List
        $this->_form_value_list = [
            'col_name'        => 'name_',
            'col_foreign_key' => 'foreign_key_',
            'col_type'        => '',
            'col_memo'        => 'memo_',
            'col_active'      => '',
            'col_list_index'  => '',
        ];

        $this->_report_value_list = [
            'col_name'                => 'name_',
            'col_creator'             => '',
            'col_creator_name'        => '',
            'col_creator_foreign_key' => '',
            'col_form'                => '',
            'col_form_name'           => 'form_name',
            'col_form_foreign_key'    => 'form_foreign_key',
        ];

        $this->_item_data_value_list = [
            'col_report'             => '',
            'col_number'             => '',
            'col_text'               => 'text_',
            'col_ctime'              => '',
            'col_display_name'       => 'display_name_',
            'col_option_string'      => 'option_string',
            'col_option_string_type' => '',
            'col_description'        => 'description_',
            'col_description_type'   => '',
            'col_description_editor' => '',
            'col_settings'           => 'settings_',
            'col_required'           => '',
            'col_foreign_key'        => 'foreign_key_',
        ];

        $this->_item_data_file_value_list = [
            'col_item_data' => '',
            'col_file'      => '',
        ];

        return;
    }

    /**
     * Initialize Test
     *
     * @access private
     */
    function _initialize()
    {
        //Get Unique Key
        $unique_key = $this->_unique_key;

        //Create Test Form
        $this->_createForm($unique_key);

        //Create Test Report
        $this->_createReport($unique_key);

        //Create Test Item Data
        $this->_createItemData($unique_key);

        //Create Test Item Data File
        $this->_createItemDataFile($unique_key);

        return;
    }

    /**
     * finalize Test
     *
     * @access private
     */
    function _finalize()
    {
        //Delete Test Item Data File
        $this->_deleteItemDataFile();

        //Delete Test Item Data
        $this->_deleteItemData();

        //Delete Test Report
        $this->_deleteReport();

        //Delete Test Form
        $this->_deleteForm();

        return;
    }

    /**
     * Create Form
     *
     * @access private
     *
     * @param string $unique_key //Unique key
     */
    function _createForm($unique_key)
    {
        for ($i = 0; $i < 5; $i++) {
            //Create Query
            $form_value_list = [];
            foreach ($this->_form_value_list as $key => $value) {
                if (strlen($value) > 0) {
                    $form_value_list[$key] = cb_queryf($this->_database,
                        '"@S@S"', $value, $i);
                } elseif ($key == 'col_type') {
                    $value = $i % 2;
                    $form_value_list[$key] = cb_queryf($this->_database, '"@S"',
                        $value);
                } else {
                    $form_value_list[$key] = cb_queryf($this->_database, '"@S"',
                        $i);
                }
            }
            $column_string = implode(',', array_keys($form_value_list));
            $value_string = implode(',', $form_value_list);
            $query = sprintf('INSERT %s(%s) VALUES (%s)',
                $this->_form_table_name, $column_string, $value_string);

            //Execute Query
            $result = $this->_database->query($query);
            if ($result === false) {
                //Throw Query Error
                $this->_database->throwError([
                    'query' => 'query failed: ' . $query
                ]);
            }

            //Add Cache
            $form_id = $this->_database->get_insert_id();
            foreach (array_keys($form_value_list) as $key) {
                $this->_form_list[$form_id][$key] = mb_ereg_replace('"', '',
                    $form_value_list[$key]);
            }
        }

        return;
    }

    /**
     * Delete Form
     *
     * @access private
     *
     * @param string $unique_key //Unique key
     */
    function _deleteForm()
    {
        //Check Report Count
        if (count($this->_form_list) == 0) {
            return true;
        }

        //Create Query
        $where_string = cb_queryf($this->_database, '_id IN (@S)',
            implode(',', array_keys($this->_form_list)));
        $query = sprintf('DELETE FROM %s WHERE %s',
            $this->_form_table_name, $where_string);

        //Execute Query
        $result = $this->_database->query($query);
        if ($result === false) {
            //Throw Query Error
            $this->_database->throwError([
                'query' => 'query failed: ' . $query
            ]);
        }

        //Delete Cache
        $this->_form_list = [];

        return;
    }

    /**
     * Create Report
     *
     * @access private
     *
     * @param string $unique_key //Unique key
     */
    function _createReport($unique_key)
    {
        $i = 0;
        foreach (array_keys($this->_form_list) as $form_id) {
            //Create Query
            $report_value_list = [];
            foreach ($this->_report_value_list as $key => $value) {
                switch ($key) {
                    case 'col_form':
                        $report_value_list[$key] = cb_queryf($this->_database,
                            '"@S"', $form_id);
                        break;
                    case 'col_form_name':
                        $report_value_list[$key] = cb_queryf($this->_database,
                            '"@S"', $this->_form_list[$form_id]['col_name']);
                        break;
                    case 'col_form_foreign_key':
                        $report_value_list[$key] = cb_queryf($this->_database,
                            '"@S"',
                            $this->_form_list[$form_id]['col_foreign_key']);
                        break;
                    case 'col_creator':
                        $report_value_list[$key] = cb_queryf($this->_database,
                            '"@S"', 1);
                        break;
                    case 'col_creator_name':
                        $report_value_list[$key] = cb_queryf($this->_database,
                            '"@S"', 'Administrator');
                        break;
                    case 'col_creator_foreign_key':
                        $report_value_list[$key] = cb_queryf($this->_database,
                            '"@S"', 'Administrator');
                        break;
                    default:
                        if (strlen($value) > 0) {
                            $report_value_list[$key]
                                = cb_queryf($this->_database, '"@S@S"', $value,
                                $i);
                        } else {
                            $report_value_list[$key]
                                = cb_queryf($this->_database, '"@S"', $i);
                        }
                        break;
                }
            }
            $column_string = implode(',', array_keys($report_value_list));
            $value_string = implode(',', $report_value_list);
            $query = sprintf('INSERT %s(%s) VALUES (%s)',
                $this->_report_table_name, $column_string, $value_string);

            //Execute Query
            $result = $this->_database->query($query);
            if ($result === false) {
                //Throw Query Error
                $this->_database->throwError([
                    'query' => 'query failed: ' . $query
                ]);
            }

            //Add Cache
            $report_id = $this->_database->get_insert_id();
            foreach (array_keys($report_value_list) as $key) {
                $this->_report_list[$form_id][$report_id][$key]
                    = mb_ereg_replace('"', '', $report_value_list[$key]);
            }

            $i++;
        }

        return;
    }

    /**
     * Delete Report
     *
     * @access private
     *
     * @param string $unique_key //Unique key
     */
    function _deleteReport()
    {
        //Check Form Count
        if (count($this->_report_list) == 0) {
            return true;
        }

        //Delete All Item Data
        foreach (array_keys($this->_report_list) as $form_id) {
            //Check Item Count
            if (count($this->_report_list[$form_id]) == 0) {
                continue;
            }

            //Create Query
            $where_string = cb_queryf($this->_database, '_id IN (@S)',
                implode(',', array_keys($this->_form_list)));
            $query = sprintf('DELETE FROM %s WHERE %s',
                $this->_report_table_name, $where_string);

            //Execute Query
            $result = $this->_database->query($query);
            if ($result === false) {
                //Throw Query Error
                $this->_database->throwError([
                    'query' => 'query failed: ' . $query
                ]);
            }

            //Delete Cache
            $this->_report_list[$form_id] = [];
        }

        return;
    }

    /**
     * Create Item Data
     *
     * @access private
     *
     * @param string $unique_key //Unique key
     */
    function _createItemData($unique_key)
    {
        foreach (array_keys($this->_report_list) as $form_id) {
            foreach (array_keys($this->_report_list[$form_id]) as $report_id) {
                //Create Query
                $i = 0;
                $item_data_value_list = [];
                foreach ($this->_item_data_value_list as $key => $value) {
                    switch ($key) {
                        case 'col_report':
                            $item_data_value_list[$key]
                                = cb_queryf($this->_database, '"@S"',
                                $report_id);
                            break;
                        default:
                            if (strlen($value) > 0) {
                                $item_data_value_list[$key]
                                    = cb_queryf($this->_database, '"@S@S"',
                                    $value, $i);
                            } else {
                                $item_data_value_list[$key]
                                    = cb_queryf($this->_database, '"@S"', $i);
                            }
                            break;
                    }
                    $i++;
                }
                $column_string = implode(',',
                    array_keys($item_data_value_list));
                $value_string = implode(',', $item_data_value_list);
                $query = sprintf('INSERT %s(%s) VALUES (%s)',
                    $this->_item_data_table_name, $column_string,
                    $value_string);

                //Execute Query
                $result = $this->_database->query($query);
                if ($result === false) {
                    //Throw Query Error
                    $this->_database->throwError([
                        'query' => 'query failed: ' . $query
                    ]);
                }

                //Add Cache
                $item_data_id = $this->_database->get_insert_id();
                foreach (array_keys($item_data_value_list) as $key) {
                    $this->_item_data_list[$form_id][$report_id][$item_data_id][$key]
                        = mb_ereg_replace('"', '', $item_data_value_list[$key]);
                }
            }
        }

        return;
    }


    /**
     * Delete Item Data
     *
     * @access private
     *
     * @param string $unique_key //Unique key
     */
    function _deleteItemData()
    {
        //Check Report Count
        if (count($this->_item_data_list) == 0) {
            return true;
        }

        //Delete All Item Data
        foreach (array_keys($this->_item_data_list) as $form_id) {
            foreach (array_keys($this->_item_data_list[$form_id]) as $report_id) {
                //Check Item Count
                if (count($this->_item_data_list[$form_id][$report_id]) == 0) {
                    continue;
                }

                //Create Query
                $where_string = cb_queryf($this->_database, '_id IN (@S)',
                    implode(',',
                        array_keys($this->_item_data_list[$form_id][$report_id])));
                $query = sprintf('DELETE FROM %s WHERE %s',
                    $this->_item_data_table_name, $where_string);

                //Execute Query
                $result = $this->_database->query($query);
                if ($result === false) {
                    //Throw Query Error
                    $this->_database->throwError([
                        'query' => 'query failed: ' . $query
                    ]);
                }

                //Delete Cache
                $this->_item_data_list[$form_id][$report_id] = [];
            }
        }

        return;
    }

    /**
     * Create Item Data File
     *
     * @access private
     *
     * @param string $unique_key //Unique key
     */
    function _createItemDataFile($unique_key)
    {
        foreach (array_keys($this->_item_data_list) as $form_id) {
            foreach (array_keys($this->_item_data_list[$form_id]) as $report_id) {

                foreach (
                    array_keys($this->_item_data_list[$form_id][$report_id]) as
                    $item_data_id
                ) {
                    //Create Query
                    $i = 0;
                    $item_data_file_value_list = [];
                    foreach (
                        $this->_item_data_file_value_list as $key => $value
                    ) {
                        switch ($key) {
                            case 'col_item_data':
                                $item_data_file_value_list[$key]
                                    = cb_queryf($this->_database, '"@S"',
                                    $item_data_id);
                                break;
                            case 'col_file':
                                //                        $item_data_file_value_list[$key] = $file_id;
                                break;
                            default:
                                if (strlen($value) > 0) {
                                    $item_data_file_value_list[$key]
                                        = cb_queryf($this->_database, '"@S@S"',
                                        $value, $i);
                                } else {
                                    $item_data_file_value_list[$key]
                                        = cb_queryf($this->_database, '"@S"',
                                        $i);
                                }
                                break;
                        }
                        $i++;
                    }
                    $column_string = implode(',',
                        array_keys($item_data_file_value_list));
                    $value_string = implode(',', $item_data_file_value_list);
                    $query = sprintf('INSERT %s(%s) VALUES (%s)',
                        $this->_item_data_file_table_name, $column_string,
                        $value_string);

                    //Execute Query
                    $result = $this->_database->query($query);
                    if ($result === false) {
                        //Throw Query Error
                        $this->_database->throwError([
                            'query' => 'query failed: ' . $query
                        ]);
                    }

                    //Add Cache
                    $item_data_file_id = $this->_database->get_insert_id();
                    foreach (array_keys($item_data_file_value_list) as $key) {
                        $this->_item_data_file_list[$form_id][$report_id][$item_data_id][$item_data_file_id][$key]
                            = mb_ereg_replace('"', '',
                            $item_data_file_value_list[$key]);
                    }
                }
            }
        }

        return;
    }


    /**
     * Delete Item Data
     *
     * @access private
     *
     * @param string $unique_key //Unique key
     */
    function _deleteItemDataFile()
    {
        //Check Report Count
        if (count($this->_item_data_file_list) == 0) {
            return true;
        }

        //Delete All Item File Data
        foreach (array_keys($this->_item_data_file_list) as $form_id) {
            foreach (
                array_keys($this->_item_data_file_list[$form_id]) as $report_id
            ) {
                //Check Item Data Count
                if (count($this->_item_data_file_list[$form_id][$report_id])
                    == 0
                ) {
                    continue;
                }

                foreach (
                    array_keys($this->_item_data_file_list[$form_id][$report_id])
                    as $item_data_id
                ) {
                    //Check Item Data File Count
                    if (count($this->_item_data_file_list[$form_id][$report_id][$item_data_id])
                        == 0
                    ) {
                        continue;
                    }

                    //Create Query
                    $where_string = cb_queryf($this->_database, '_id IN (@S)',
                        implode(',',
                            array_keys($this->_item_data_file_list[$form_id][$report_id][$item_data_id])));
                    $query = sprintf('DELETE FROM %s WHERE %s',
                        $this->_item_data_file_table_name, $where_string);

                    //Execute Query
                    $result = $this->_database->query($query);
                    if ($result === false) {
                        //Throw Query Error
                        $this->_database->throwError([
                            'query' => 'query failed: ' . $query
                        ]);
                    }

                    //Delete Cache
                    $this->_item_data_file_list[$form_id][$report_id][$item_data_id]
                        = [];
                }
            }
        }

        return;
    }

    /**
     * Validate Report
     *
     * @access  private
     *
     * @param  int $report_id      //Report ID
     * @param  int $form_id        //Form ID
     * @param  int $validate_props //Validate Properties
     *
     * @return BOOL                              //Validate Result
     */
    function _validateReport($report_id, $form_id, $validate_props)
    {
        //Get Report Table
        $report =& $this->_report_list[$form_id][$report_id];

        //Validate Properties
        foreach ($validate_props as $prop_name => $prop_value) {
            //Check Assertion
            if (strval($report[$prop_name]) !== strval($prop_value)) {
                var_dump($report[$prop_name]);
                var_dump($prop_name);
                var_dump($prop_value);
                die();

                //Finalize Test
                $this->_finalize();
                assert('strval($report[$prop_name]) === strval($prop_value)');
            }
        }

        return true;
    }

    /**
     * Get Report
     *
     * @access  private
     * @return BOOL                              //Validate Result
     */
    function test_get()
    {
        //Initialize Test
        $this->_initialize();

        //Get Report Manager Base Instance
        $manager = GRN_Report_Report_Manager_Base::getInstance();

        //Test Report
        foreach (array_keys($this->_report_list) as $form_id) {
            foreach (array_keys($this->_report_list[$form_id]) as $report_id) {
                //Get Report
                $report =& $manager->get($report_id, $form_id);

                //Create Validate Properties
                $validate_props = [];
                $report_value_list =& $this->_report_value_list;
                foreach (array_keys($report_value_list) as $report_key) {
                    $validate_props[$report_key] = $report[$report_key];
                }

                //Validate Report
                $this->_validateReport($report_id, $form_id, $validate_props);
            }
        }

        //Finalize Test
        $this->_finalize();

        return true;
    }

    /**
     * Get Report(with Extra Information)
     *
     * @access  private
     * @return BOOL                              //Validate Result
     */
    function test_getEx()
    {
        //Initialize Test
        $this->_initialize();

        //Get Report Manager Base Instance
        $manager = GRN_Report_Report_Manager_Base::getInstance();

        //Test Report List
        foreach (array_keys($this->_report_list) as $form_id) {
            foreach (array_keys($this->_report_list[$form_id]) as $report_id) {
                //Get Report
                $report =& $manager->getEx($report_id, $form_id);

                //Create Validate Properties
                $validate_props = [];
                $report_value_list =& $this->_report_value_list;
                foreach (array_keys($report_value_list) as $report_key) {
                    $validate_props[$report_key] = $report['p_' . $report_key];
                }

                //Validate Report
                $this->_validateReport($report_id, $form_id, $validate_props);
            }
        }

        //Finalize Test
        $this->_finalize();

        return true;
    }

    /**
     * Get Report List
     *
     * @access  private
     * @return BOOL                              //Validate Result
     */
    function test_getList()
    {
        //Initialize Test
        $this->_initialize();

        //Get Report Manager Base Instance
        $manager = GRN_Report_Report_Manager_Base::getInstance();

        //Test Item Data List
        foreach (array_keys($this->_report_list) as $form_id) {
            $report_list =& $manager->getList($form_id);

            foreach (array_keys($report_list) as $report_id) {
                //Get Report
                $report =& $report_list[$report_id];

                //Create Validate Properties
                $validate_props = [];
                $report_value_list =& $this->_report_value_list;
                foreach (array_keys($report_value_list) as $report_key) {
                    $validate_props[$report_key] = $report[$report_key];
                }

                //Validate Report
                $this->_validateReport($report_id, $form_id, $validate_props);
            }
        }

        //Finalize Test
        $this->_finalize();

        return true;
    }

    /**
     * Get Report List(with Extra Information)
     *
     * @access  private
     * @return BOOL                              //Validate Result
     */
    function test_getListEx()
    {
        //Initialize Test
        $this->_initialize();

        //Get Report Manager Base Instance
        $manager = GRN_Report_Report_Manager_Base::getInstance();

        //Test Report List
        foreach (array_keys($this->_report_list) as $form_id) {
            $report_list =& $manager->getListEx($form_id);
            foreach (array_keys($report_list) as $report_id) {
                //Get Report
                $report =& $report_list[$report_id];

                //Create Validate Properties
                $validate_props = [];
                $report_value_list =& $this->_report_value_list;
                foreach (array_keys($report_value_list) as $report_key) {
                    $validate_props[$report_key] = $report['p_' . $report_key];
                }

                //Validate Report
                $this->_validateReport($report_id, $form_id, $validate_props);
            }
        }

        //Finalize Test
        $this->_finalize();

        return true;
    }

    /**
     * Get Report Count
     *
     * @access  private
     * @return BOOL                              //Validate Result
     */
    function test_getCount()
    {
        //Initialize Test
        $this->_initialize();

        //Get Report Manager Base Instance
        $manager = GRN_Report_Report_Manager_Base::getInstance();

        //Test Report Count
        foreach (array_keys($this->_report_list) as $form_id) {
            $report_count = $manager->getCount($form_id);

            //Validate Report Count
            assert('($report_count) == count($this->_report_list[$form_id])');
        }

        //Finalize Test
        $this->_finalize();

        return true;
    }
}

cb_test_run();

?>
