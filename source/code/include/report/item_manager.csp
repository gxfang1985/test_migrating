<?php
/**
 * Report Application Item Class
 *
 * @author  Shou,Aoki 2009/09
 * @version 1.0
 * @package grn.report
 */

/** Report Application **/
require_once('report/resources.csp');
require_once('report/item_manager_base.csp');

/**
 * Item Manager Class
 *
 * @package grn.report
 */
class GRN_Report_Item_Manager extends GRN_Report_Item_Manager_Base
{
    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
        //Get Parent Instance
        $parent = parent::getInstance();

        //Sync Parent Table and Item List Cache
        $this->_table_name =& $parent->_table_name;
        $this->_list =& $parent->_list;
    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Report_Item_Manager
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Create Item
     *
     * @param  array $property_list //Property List(Name=>Value)
     *
     * @return int   $item_id                    //Item ID
     */
    function create($property_list)
    {
        if ( ! array_key_exists(GRN_REPORT_COLUMN_REQUIRED, $property_list)
             || is_null($property_list[GRN_REPORT_COLUMN_REQUIRED])
        ) {
            $property_list[GRN_REPORT_COLUMN_REQUIRED] = GRN_REPORT_NOT_REQUIRE;
        }

        $id = GRN_Report_Table_Manager::genericCreate(GRN_REPORT_TABLE_ITEM,
            $property_list);

        return $id;
    }

    /**
     * Update Item
     *
     * @param  array $item_id       //Item ID
     * @param  array $property_list //Property List(Name=>Value)
     *
     * @return array $item_id                    //Item ID
     */
    function update($item_id, $property_list)
    {
        $id = GRN_Report_Table_Manager::updateById(GRN_REPORT_TABLE_ITEM,
            $item_id, $property_list);

        return $id;
    }

    /**
     * Remove Item
     *
     * @param int  $item_id //Item ID
     * @param BOOL $result  //Result
     */
    function remove($item_id)
    {
        GRN_Report_Table_Manager::removeById(GRN_REPORT_TABLE_ITEM, $item_id);

        //Delete From Item List
        foreach (array_keys($this->_list) as $key) {
            if (in_array($item_id, $this->_list[$key])) {
                unset($this->_list[$key][$item_id]);
            }
        }

        return true;
    }

    /**
     * Remove Multiple Item
     *
     * @param array $item_id_list //Item ID List
     * @param BOOL  $result       //Result
     */
    function removeMulti($item_id_list)
    {
        foreach ($item_id_list as $item_id) {
            $this->remove($item_id);
        }

        return true;
    }

    /**
     * Remove All Item
     *
     * @param int  $form_id //Form ID
     * @param BOOL $result  //Result
     */
    function removeAll($form_id = null)
    {
        //Get Database
        $database =& GRN_Report_Table_Manager::getDataBase();

        //Create Query
        $where_string = "";
        if ( ! is_null($form_id)) {
            $where_string = cb_queryf($database, "col_form = '@S'", $form_id);
            $where_string = $where_string . ' AND ' . cb_queryf($database,
                    'col_list_index <> 0');
        } else {
            $where_string = cb_queryf($database, 'col_list_index <> 0');
        }

        GRN_Report_Table_Manager::remove($this->_table_name, $where_string);

        //Delete From Form List
        unset($this->_list[$form_id]);

        return true;
    }

    /**
     * Change Item Order
     *
     * @param int  $item_id_list //Item ID List
     * @param int  $start_index  //Start Index Number
     * @param BOOL $result       //Result
     */
    function changeOrder($item_id_list, $start_index = 0)
    {
        //Set New List Index
        $list_index = $start_index;
        $property_list = [];
        foreach ($item_id_list as $item_id) {
            $property_list[GRN_REPORT_COLUMN_LIST_INDEX] = $list_index;
            $this->update($item_id, $property_list);
            $list_index++;
        }

        return true;
    }
}


