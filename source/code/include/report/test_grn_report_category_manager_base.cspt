<?php

require_once('developer/azunit.csp');
require_once('report/category_manager_base.csp');

class test_grn_report_category_manager_base extends CB_TestCase
{
    /** database **/
    var $_database = null;

    /** table_name **/
    var $_category_table_name = null;

    /** Test Target List **/
    var $_category_list = null;

    /** Unique key **/
    var $_unique_key = null;

    /** Basic Value List **/
    var $_category_value_list = [];

    /**
     * Constructor
     *
     * @access private
     *
     * @param string $test_method //Test Method Name
     */
    function test_grn_report_category_manager_base($test_method)
    {
        //Initialize Parent Class
        parent::CB_TestCase($test_method);

        //Initalize Randam Key
        mt_srand(time());

        //Initialize Unique Key
        $this->_unique_key = $test_method . time();

        //Get Database Connection
        global $G_container_base;
        $this->_database =& $G_container_base->getInstance('dbconn');

        //Set table name
        $this->_category_table_name = 'tab_grn_report_category';

        //Set Basic Value List
        $this->_category_value_list = [
            'col_name'                 => 'name_',
            'col_foreign_key'          => 'foreign_key_',
            'col_memo'                 => 'memo_',
            'col_parent'               => '',
            'col_security_model'       => '', // 0:GRANT / 1:REVOKE
            'col_list_index'           => '',
            'col_creator'              => '',
            'col_creator_name'         => 'Administrator',
            'col_creator_foreign_key'  => 'Administrator',
            'col_ctime'                => '',
            'col_modifier'             => '',
            'col_modifier_name'        => 'Administrator',
            'col_modifier_foreign_key' => 'Administrator',
            'col_mtime'                => '',
        ];

        return;
    }

    /**
     * Initialize Test
     *
     * @access private
     */
    function _initialize()
    {
        //Get Unique Key
        $unique_key = $this->_unique_key;

        //Create Test Category
        $this->_createCategory($unique_key);

        return;
    }

    /**
     * finalize Test
     *
     * @access private
     */
    function _finalize()
    {
        //Delete Test Category
        $this->_deleteCategory();

        return;
    }

    /**
     * Create Category
     *
     * @access private
     *
     * @param string $unique_key //Unique key
     */
    function _createCategory($unique_key)
    {
        $parent_id = null;
        for ($i = 0; $i < 5; $i++) {
            //Create Query
            $category_value_list = [];
            $index = 0;
            foreach ($this->_category_value_list as $key => $value) {
                if ($key == 'col_security_model') {
                    $category_value_list[$key] = cb_queryf($this->_database,
                        '"@S"', $i % 2);
                } elseif ($key == 'col_parent') {
                    $category_value_list[$key] = $parent_id;
                } elseif ($key == 'list_index') {
                    $category_value_list[$key] = ++$index;
                } elseif ($key == 'col_creator' || $key == 'col_modifier') {
                    $category_value_list[$key] = 1;
                } elseif (strlen($value) > 0) {
                    $category_value_list[$key] = cb_queryf($this->_database,
                        '"@S@S"', $value, $i);
                } else {
                    $category_value_list[$key] = cb_queryf($this->_database,
                        '"@S"', $i);
                }
            }
            $column_string = implode(',', array_keys($category_value_list));
//            $value_string = implode(',', $category_value_list);
            $value_string = "";
            foreach ($category_value_list as $value) {
                if (is_null($value) || strlen($value) == 0) {
                    $value = "null";
                }
                $value_string .= $value . ',';
            }
            $value_string = substr($value_string, 0, strlen($value_string) - 1);

            $query = sprintf('INSERT %s(%s) VALUES (%s)',
                $this->_category_table_name, $column_string, $value_string);

            //Execute Query
            $result = $this->_database->query($query);

            if ($result === false) {
                //Throw Query Error
                $this->_database->throwError([
                    'query' => 'query failed: ' . $query
                ]);
            }

            //Add Cache
            $category_id = $this->_database->get_insert_id();
            $parent_id = $category_id;
            foreach (array_keys($category_value_list) as $key) {
                $this->_category_list[$category_id][$key] = mb_ereg_replace('"',
                    '', $category_value_list[$key]);
            }
        }

        return;
    }

    /**
     * Delete Category
     *
     * @access private
     *
     * @param string $unique_key //Unique key
     */
    function _deleteCategory()
    {
        //Create Query
        $where_string = cb_queryf($this->_database, '_id IN (@S)',
            implode(',', array_keys($this->_category_list)));
        $query = sprintf('DELETE FROM %s WHERE %s',
            $this->_category_table_name, $where_string);

        //Execute Query
        $result = $this->_database->query($query);
        if ($result === false) {
            //Throw Query Error
            $this->_database->throwError([
                'query' => 'query failed: ' . $query
            ]);
        }

        //Delete Cache
        $this->_category_list = [];

        return;
    }

    /**
     * Validate Category
     *
     * @access  private
     *
     * @param   int $category_id    //Category ID
     * @param   int $validate_props //Validate Properties
     *
     * @return  BOOL                            //Validate Result
     */
    function _validateCategory($category, $validate_props)
    {
        //Validate Properties
        foreach ($validate_props as $prop_name => $prop_value) {
            //Check Assertion
            if (strval($category[$prop_name]) !== strval($prop_value)) {
//                var_dump($category[$prop_name]);
//                var_dump($prop_name);
//                var_dump($prop_value);
//                die();

                //Finalize Test
                $this->_finalize();
                assert('strval($category[$prop_name]) === strval($prop_value)');
            }
        }

        return true;
    }

    /**
     * Get Category
     *
     * @access  private
     * @return  BOOL            //Validate Result
     */
    function test_get()
    {
        //Initialize Test
        $this->_initialize();

        //Get Category Manager Base Instance
        $manager = GRN_Report_Category_Manager_Base::getInstance();
        //Test Category List
        $category_list =& $this->_category_list;

        foreach (array_keys($category_list) as $category_id) {
            //Get Category
            $category =& $manager->get($category_id, null, true);
            //Create Validate Properties
            $validate_props = [];
            $category_value_list =& $this->_category_value_list;
            foreach (array_keys($category_value_list) as $category_name) {
                $validate_props[$category_name] = $category[$category_name];
            }

            //Validate Category
            $this->_validateCategory($this->_category_list[$category_id],
                $validate_props);
        }

        //Finalize Test
        $this->_finalize();

        return true;
    }

    /**
     * Get Category By Foreign Key
     *
     * @access  private
     * @return  BOOL        //Validate Result
     */
    function test_getByForeignKey()
    {
        //Initialize Test
        $this->_initialize();

        //Get Category Manager Base Instance
        $manager = GRN_Report_Category_Manager_Base::getInstance();
        //Test Category List
        $category_list =& $this->_category_list;

        foreach (array_keys($category_list) as $category_id) {
            //Get Category
            $category
                =& $manager->getByForeignKey($category_list[$category_id]['col_foreign_key']);

            //Create Validate Properties
            $validate_props = [];
            $category_value_list =& $this->_category_value_list;
            foreach (array_keys($category_value_list) as $category_name) {
                $validate_props[$category_name] = $category[$category_name];
            }

            //Validate Category
            $this->_validateCategory($this->_category_list[$category_id],
                $validate_props);
        }

        //Finalize Test
        $this->_finalize();

        return true;
    }

    /**
     * Get Category List
     *
     * @access  private
     * @return  BOOL            //Validate Result
     */
    function test_getList()
    {
        //Initialize Test
        $this->_initialize();

        //Get Category Manager Base Instance
        $manager = GRN_Report_Category_Manager_Base::getInstance();

        //Test Category List
        $category_list =& $manager->getList(null, true);

        foreach (array_keys($category_list) as $category_id) {
            //Get Category
            $category =& $category_list[$category_id];

            //Create Validate Properties
            $validate_props = [];
            $category_value_list =& $this->_category_value_list;
            foreach (array_keys($category_value_list) as $category_name) {
                $validate_props[$category_name] = $category[$category_name];
            }

            //Validate Category
            $this->_validateCategory($category_list[$category_id],
                $validate_props);
        }

        //Finalize Test
        $this->_finalize();

        return true;
    }

    /**
     * Get Category Count
     *
     * @access  private
     * @return  BOOL            //Validate Result
     */
    function test_getCount()
    {
        //Initialize Test
        $this->_initialize();

        //Get Category Manager Base Instance
        $manager = GRN_Report_Category_Manager_Base::getInstance();

        $category_list =& $this->_category_list;
        foreach (array_keys($category_list) as $category_id) {
            $child = $manager->getChildList($category_id);
            $count = $manager->getCount($category_id);
            assert('count($child) == $count');
        }
        //Finalize Test
        $this->_finalize();

        return true;
    }

    /**
     * Get Parent Category
     *
     * @access  private
     * @return  BOOL            //Validate Result
     */
    function test_getParent()
    {
        //Initialize Test
        $this->_initialize();

        //Get Category Manager Base Instance
        $manager = GRN_Report_Category_Manager_Base::getInstance();

        //Test Category List
        $category_list =& $this->_category_list;

        foreach (array_keys($category_list) as $category_id) {
            //Get Parent Category
            $parent_category =& $manager->getParent($category_id);

            if ( ! ($parent_category === false
                    && is_null($category_list[$category_id]['col_parent']))
            ) {
                //Validate Category
                $this->_validateCategory($this->_category_list[$category_id],
                    $category_list[$category_id]);
            }
        }

        //Finalize Test
        $this->_finalize();

        return true;
    }

    /**
     * Get Child Category
     *
     * @access  private
     * @return  BOOL            //Validate Result
     */
    function test_getChildList()
    {
        //Initialize Test
        $this->_initialize();

        //Get Category Manager Base Instance
        $manager = GRN_Report_Category_Manager_Base::getInstance();
        //Test Category List
        $category_list = $this->_category_list;
        foreach (array_keys($category_list) as $category_id) {
            $child = $manager->getChildList($category_id);
            foreach ($child as $cid => $c) {
                $rid = $c['col_parent'];
                assert("$rid == $category_id");
            }
        }

        //Finalize Test
        $this->_finalize();

        return true;
    }

    /**
     * Get Child Category Count
     *
     * @access  private
     * @return  BOOL            //Validate Result
     */
    function test_getChildCount()
    {
        //Initialize Test
        $this->_initialize();

        //Get Category Manager Base Instance
        $manager = GRN_Report_Category_Manager_Base::getInstance();

        $child_count_list = [];
        foreach ($this->_category_list as $category_id => $category) {
            if (strlen($category['col_parent']) > 0) {
                if (array_key_exists($category['col_parent'],
                    $child_count_list)
                ) {
                    $child_count_list[$category['col_parent']]
                        = $child_count_list[$category['col_parent']] + 1;
                } else {
                    $child_count_list[$category['col_parent']] = 1;
                }
            }
        }

        foreach ($child_count_list as $category_id => $count) {
            //Test Child Category Count
            $category_count = $manager->getChildCount($category_id);

            //Validate Category Count
            assert('$category_count == $count');
        }

        //Finalize Test
        $this->_finalize();

        return true;
    }

    /**
     * Get Category Tree List
     *
     * @access  private
     * @return  BOOL            //Validate Result
     */
    function test_getTreeList()
    {
        //Initialize Test
        $this->_initialize();

        //Get Category Manager Base Instance
        $manager = GRN_Report_Category_Manager_Base::getInstance();

        foreach (array_keys($this->_category_list) as $key) {
            //Test Category Tree List
            $trry_list = $manager->getTreeList($key);

            foreach ($trry_list as $category_id => $category) {
                //Create Validate Properties
                $validate_props = [];
                $category_value_list =& $this->_category_value_list;
                foreach (array_keys($category_value_list) as $category_name) {
                    $validate_props[$category_name] = $category[$category_name];
                }
                //Validate Category
                $this->_validateCategory($this->_category_list[$category_id],
                    $validate_props);
            }
        }

        //Finalize Test
        $this->_finalize();

        return true;
    }

    /**
     * Search Category
     *
     * @access  private
     * @return  BOOL            //Validate Result
     */
    function test_search()
    {
        //Initialize Test
        $this->_initialize();

        //Get Category Manager Base Instance
        $manager = GRN_Report_Category_Manager_Base::getInstance();

        $search_category_list =& $this->_category_list;
        $target_list = ['category'];
        $condition_list = ['0'];
        $result_list = $manager->search($search_category_list,
            $target_list, $condition_list);

        foreach ($result_list as $category_id => $category) {
            //Create Validate Properties
            $validate_props = [];
            $category_value_list =& $this->_category_value_list;
            foreach (array_keys($category_value_list) as $category_name) {
                $validate_props[$category_name] = $category[$category_name];
            }
            //Validate Category
            $this->_validateCategory($this->_category_list[$category_id],
                $validate_props);
        }

        //Finalize Test
        $this->_finalize();

        return true;
    }

    /**
     * Search Category Count
     *
     * @access  private
     * @return  BOOL            //Validate Result
     */
    function test_searchCount()
    {
        //Initialize Test
        $this->_initialize();

        //Get Category Manager Base Instance
        $manager = GRN_Report_Category_Manager_Base::getInstance();

        $search_category_list =& $this->_category_list;
        $target_list = ['category'];
        $condition_list = ['name'];
        $search_count = $manager->searchCount($search_category_list,
            $target_list, $condition_list);

        //Validate Category Count
        assert('$search_count === count($this->_category_list)');

        //Finalize Test
        $this->_finalize();

        return true;
    }

}

cb_test_run();

?>
