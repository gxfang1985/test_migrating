<?php

require_once('grn/application.csp');
require_once('grn/CBException.csp');
require_once('grn/DAOFactory.csp');
require_once('report/error_code.csp');
require_once('report/inspection.csp');

define('CB_REPORT_FACADE_DB_STATUS_INSERT', 1);
define('CB_REPORT_FACADE_DB_STATUS_UPDATE', 2);
define('CB_REPORT_FACADE_DB_STATUS_DELETE', 3);

class ReportFacade
{
    private $_db = null;
    private $_isCalcFoundRows = false;

    public function __construct()
    {
        $app_locator = GRN_ApplicationLocator::instance();
        $this->_db = $app_locator->getConnection('report');
    }

    public function setCalcFoundRows($value)
    {
        $this->_isCalcFoundRows = $value;
    }

    public function isCalcFoundRows()
    {
        return $this->_isCalcFoundRows;
    }

    /** ***************************************************** */
    /** -----               CalcFoundRows           --------- */
    /** ***************************************************** */
    /**
     * @param $inDataObj
     *
     * @return int
     */
    public function getCalcFoundRows($inDataObj)
    {
        $result = 0;

        if ($this->isCalcFoundRows()) {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnReportCategoryDAO();

            $result = $dao->getFountRows($inDataObj);
        }

        return $result;
    }

    /** ***************************************************** */
    /** -----           GrnReportCategory       --------- */
    /** ***************************************************** */
    /**
     * @param $inDataObj
     * @param $inCategoryKey
     *
     * @return bool|GrnReportCategory
     */
    public function referReportCategoryByForeignKey($inDataObj, $inCategoryKey)
    {
        $inDataObj['db'] = $this->_db;
        $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
        $dao = $daoFctry->getGrnReportCategoryDAO();

        $result = $dao->selectByForeignKey($inDataObj, $inCategoryKey);

        return $result;
    }

    /**
     * @param $inDataObj
     * @param $inId
     *
     * @return bool|GrnReportCategory
     */
    public function referReportCategoryById($inDataObj, $inId)
    {
        $inDataObj['db'] = $this->_db;
        $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
        $dao = $daoFctry->getGrnReportCategoryDAO();

        $inLanguage = (array_key_exists('language', $inDataObj))
            ? $inDataObj['language'] : null;
        if (is_null($inLanguage)) {
            $result = $dao->selectDefaultById($inDataObj, $inId);
        } else {
            $result = $dao->selectLocalById($inDataObj, $inId);
        }

        return $result;
    }

    /**
     * @param $inDataObj
     *
     * @return GrnReportCategory[]
     */
    public function getReportCategoryList($inDataObj)
    {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnReportCategoryDAO();
            $inParentId = (array_key_exists('parentId', $inDataObj))
                ? $inDataObj['parentId'] : null;

            if (is_null($inParentId)) {
                $resultList = $dao->getReportCategoryList($inDataObj);
            } else {
                $resultList = $dao->getReportCategoryListByParentId($inDataObj,
                    $inParentId);
            }

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param $inDataObj
     *
     * @return GrnReportCategory[]
     */
    public function getReportCategoryListWithNonLocal($inDataObj)
    {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnReportCategoryDAO();
            $inParentId = (array_key_exists('parentId', $inDataObj))
                ? $inDataObj['parentId'] : null;

            if (is_null($inParentId)) {
                $resultList
                    = $dao->getReportCategoryListWithNonLocal($inDataObj);
            } else {
                $resultList
                    = $dao->getReportCategoryListByParentIdWithNonLocal($inDataObj,
                    $inParentId);
            }

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param $inDataObj
     * @param $inCategoryNameArray
     *
     * @return GrnReportCategory[]
     */
    public function getReportCategoryListByNames(
        $inDataObj,
        $inCategoryNameArray
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnReportCategoryDAO();

            $resultList = $dao->getReportCategoryListByNames($inDataObj,
                $inCategoryNameArray);

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param $inDataObj
     * @param $inCategoryArray
     *
     * @return GrnReportCategory[]
     */
    public function getReportCategoryListByIds($inDataObj, $inCategoryArray)
    {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnReportCategoryDAO();

            $resultList = $dao->getReportCategoryListByIds($inDataObj,
                $inCategoryArray);

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param $inDataObj
     * @param $inParentIdArray
     *
     * @return GrnReportCategory[]
     */
    public function getReportCategoryListByParentIds(
        $inDataObj,
        $inParentIdArray
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnReportCategoryDAO();

            $resultList = $dao->getReportCategoryListByParentIds($inDataObj,
                $inParentIdArray);

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param $inDataObj
     * @param $inCategoryArray
     * @param $inCategoryNameArray
     *
     * @return GrnReportCategory[]
     */
    public function getReportCategoryListByIds_Names(
        $inDataObj,
        $inCategoryArray,
        $inCategoryNameArray
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $inDataObj['isCalcFoundRows'] = $this->isCalcFoundRows();
            $daoFctry
                = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao
                = $daoFctry->getGrnReportCategoryDAO();

            $resultList = $dao->getReportCategoryListByIds_Names($inDataObj,
                $inCategoryArray, $inCategoryNameArray);

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param $inDataObj
     * @param $inParentId
     *
     * @return int
     */
    public function getCountReportCategoryByParentId($inDataObj, $inParentId)
    {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnReportCategoryDAO();

            $resultCount = $dao->getCountReportCategoryByParentId($inDataObj,
                $inParentId);

            return $resultCount;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param $inDataObj
     * @param $inAccessUserId
     *
     * @return GrnReportCategory[]
     */
    public function getReportCategoryListByAccessUserId(
        $inDataObj,
        $inAccessUserId
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnReportCategoryDAO();

            $resultList = $dao->getReportCategoryListByAccessUserId($inDataObj,
                $inAccessUserId);

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param $inDataObj
     * @param $inAccessDynamicRoleIdArray
     *
     * @return GrnReportCategory[]
     */
    public function getReportCategoryListByAccessDynamicRoleIds(
        $inDataObj,
        $inAccessDynamicRoleIdArray
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnReportCategoryDAO();

            $resultList
                = $dao->getReportCategoryListByAccessDynamicRoleIds($inDataObj,
                $inAccessDynamicRoleIdArray);

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param $inDataObj
     * @param $inAccessStaticRoleIdArray
     *
     * @return GrnReportCategory[]
     */
    public function getReportCategoryListByAccessStaticRoleIds(
        $inDataObj,
        $inAccessStaticRoleIdArray
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnReportCategoryDAO();

            $resultList
                = $dao->getReportCategoryListByAccessStaticRoleIds($inDataObj,
                $inAccessStaticRoleIdArray);

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param $inDataObj
     * @param $inAccessGroupIdArray
     *
     * @return GrnReportCategory[]
     */
    public function getReportCategoryListByAccessGroupIds(
        $inDataObj,
        $inAccessGroupIdArray
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnReportCategoryDAO();

            $resultList
                = $dao->getReportCategoryListByAccessGroupIds($inDataObj,
                $inAccessGroupIdArray);

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /** ***************************************************** */
    /** -----        GrnReportCategoryLocal    --------- */
    /** ***************************************************** */
    /**
     * @param                        $inDataObj
     * @param GrnReportCategoryLocal $inReportCategoryLocalObj
     *
     * @return bool|int
     */
    public function insertReportCategoryLocal(
        $inDataObj,
        $inReportCategoryLocalObj
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnReportCategoryLocalDAO();
            $inspection
                = GRN_Report_Category_Local_Inspection::getInstance();

            $insertCount = $dao->insert($inDataObj, $inReportCategoryLocalObj);

            if (($insertCount > 0) && ($inspection->isEnabled())) {
                $messageType = 'category_local_add';
                $message_args = [
                    'cid'           => $inReportCategoryLocalObj->getParentId(),
                    'language_code' => $inReportCategoryLocalObj->getLanguageCode(),
                    'category_name' => $inReportCategoryLocalObj->getName(),
                ];

                $inspection->record($messageType, $message_args);
            }

            return $insertCount;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param                        $inDataObj
     * @param GrnReportCategoryLocal $inReportCategoryLocalObj
     *
     * @return int
     */
    public function updateReportCategoryLocal(
        $inDataObj,
        $inReportCategoryLocalObj
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnReportCategoryLocalDAO();

            $inMessageTypeAdd = (array_key_exists('messageTypeAdd',
                $inDataObj)) ? $inDataObj['messageTypeAdd']
                : 'category_local_add';
            $inMessageTypeModify = (array_key_exists('messageTypeModify',
                $inDataObj)) ? $inDataObj['messageTypeModify']
                : 'category_local_modify';
            $inspection
                = GRN_Report_Category_Local_Inspection::getInstance();

            $beforReportCategoryLocal
                = $dao->selectByCategoryId_LanguageCode($inDataObj,
                $inReportCategoryLocalObj);
            if ($beforReportCategoryLocal === false) {
                $insertCount = $dao->insert($inDataObj,
                    $inReportCategoryLocalObj);

                if (($insertCount > 0) && ($inspection->isEnabled())) {
                    $message_args = [
                        'cid'           => $inReportCategoryLocalObj->getParentId(),
                        'language_code' => $inReportCategoryLocalObj->getLanguageCode(),
                        'category_name' => $inReportCategoryLocalObj->getName(),
                    ];

                    $inspection->record($inMessageTypeAdd, $message_args);
                }

                return CB_REPORT_FACADE_DB_STATUS_INSERT;
            } else {
                $updateCount = $dao->update($inDataObj,
                    $inReportCategoryLocalObj);

                //MySQLは変化が無い場合UPDATE結果が0件になる。しかし、現在のGaroonのログ仕様は変化が無くても変更ログを出力しているので、更新件数が0でもログ出力している
                if (($updateCount >= 0) && ($inspection->isEnabled())) {
                    $message_args = [
                        'cid'                => $inReportCategoryLocalObj->getParentId(),
                        'language_code'      => $inReportCategoryLocalObj->getLanguageCode(),
                        'prev_category_name' => $beforReportCategoryLocal->getName(),
                        'next_category_name' => $inReportCategoryLocalObj->getName(),
                    ];

                    $inspection->record($inMessageTypeModify, $message_args);
                }

                return CB_REPORT_FACADE_DB_STATUS_UPDATE;
            }
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param                        $inDataObj
     * @param GrnReportCategoryLocal $inReportCategoryLocalObj
     *
     * @return bool|int
     */
    public function deleteReportCategoryLocal(
        $inDataObj,
        $inReportCategoryLocalObj
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnReportCategoryLocalDAO();

            $inMessageTypeDelete = (array_key_exists('messageTypeDelete',
                $inDataObj)) ? $inDataObj['messageTypeDelete']
                : 'category_local_delete';
            $inspection
                = GRN_Report_Category_Local_Inspection::getInstance();

            $deleteCount = 0;
            $beforReportCategoryLocal
                = $dao->selectByCategoryId_LanguageCode($inDataObj,
                $inReportCategoryLocalObj);
            if ($beforReportCategoryLocal !== false) {
                $deleteCount = $dao->deleteByParentId_LanguageCode($inDataObj,
                    $inReportCategoryLocalObj);
                if (($deleteCount > 0) && ($inspection->isEnabled())) {
                    $message_args = [
                        'cid'           => $inReportCategoryLocalObj->getParentId(),
                        'language_code' => $inReportCategoryLocalObj->getLanguageCode(),
                        'category_name' => $beforReportCategoryLocal->getName(),
                    ];

                    $inspection->record($inMessageTypeDelete, $message_args);
                }
            }

            return $deleteCount;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param $inDataObj
     * @param $inCategoryId
     *
     * @return GrnReportCategoryLocal[]
     */
    public function getReportCategoryLocalListByCategoryId(
        $inDataObj,
        $inCategoryId
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnReportCategoryLocalDAO();
            $resultList
                = $dao->getReportCategoryLocalListByCategoryId($inDataObj,
                $inCategoryId);

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param      $inDataObj
     * @param null $inExportLanguageCodeArray
     *
     * @return GrnReportCategoryLocal[]
     */
    public function getReportCategoryLocalListByLanguageCodes(
        $inDataObj,
        $inExportLanguageCodeArray = null
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnReportCategoryLocalDAO();


            if (is_null($inExportLanguageCodeArray)) {
                $resultList = $dao->getReportCategoryLocalList($inDataObj);
            } else {
                $resultList
                    = $dao->getReportCategoryLocalListByLanguageCodes($inDataObj,
                    $inExportLanguageCodeArray);
            }

            return $resultList;
        } catch (CBException $cbe) {

        }
    }
}

