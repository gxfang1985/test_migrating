<?php

require_once('developer/azunit.csp');
require_once('report/form_logic.csp');

class test_grn_report_form_logic extends CB_TestCase
{
    /** database **/
    var $_database = null;

    /** table_name **/
    var $_form_table_name = null;
    var $_item_table_name = null;

    /** Test Target List **/
    var $_form_list = null;
    var $_item_list = null;

    /** Unique key **/
    var $_unique_key = null;

    /** Basic Value List **/
    var $_form_value_list = [];
    var $_item_value_list = [];

    /**
     * Constructor
     *
     * @access private
     *
     * @param string $test_method //Test Method Name
     */
    function test_grn_report_form_logic($test_method)
    {
        //Initialize Parent Class
        parent::CB_TestCase($test_method);

        //Initalize Randam Key
        mt_srand(time());

        //Initialize Unique Key
        $this->_unique_key = $test_method . time();

        //Get Database Connection
        global $G_container_base;
        $this->_database =& $G_container_base->getInstance('dbconn');

        //Set table name
        $this->_form_table_name = 'tab_grn_report_form';
        $this->_item_table_name = 'tab_grn_report_item';

        //Set Basic Value List
        $this->_form_value_list = [
            'col_name'        => 'name_',
            'col_foreign_key' => 'foreign_key_',
            'col_type'        => '',
            'col_memo'        => 'memo_',
            'col_active'      => '',
            'col_list_index'  => '',
        ];

        $this->_item_value_list = [
            'col_foreign_key'        => 'foreign_key_',
            'col_list_index'         => '',
            'col_display_name'       => 'display_name_',
            'col_type'               => '',
            'col_option_string'      => 'option_string_',
            'col_option_string_type' => '',
            'col_description'        => 'description_',
            'col_description_type'   => '',
            'col_description_editor' => '',
            'col_required'           => '',
        ];

        return;
    }

    /**
     * Initialize Test
     *
     * @access private
     */
    function _initialize()
    {
        //Get Unique Key
        $unique_key = $this->_unique_key;

        //Create Test Form
        $this->_createForm($unique_key);

        //Create Test Item
        $this->_createItem($unique_key);

        return;
    }

    /**
     * finalize Test
     *
     * @access private
     */
    function _finalize()
    {
        //Delete Test Item
        $this->_deleteItem();

        //Delete Test Form
        $this->_deleteForm();

        return;
    }

    /**
     * Create Form
     *
     * @access private
     *
     * @param string $unique_key //Unique key
     */
    function _createForm($unique_key)
    {
        for ($i = 0; $i < 5; $i++) {
            //Create Query
            $form_value_list = [];
            foreach ($this->_form_value_list as $key => $value) {
                switch ($key) {
                    case 'col_type':
                        $form_value_list[$key] = 0;
                        break;
                    default:
                        if (strlen($value) > 0) {
                            $form_value_list[$key] = cb_queryf($this->_database,
                                '"@S@S"', $value, $i);
                        } else {
                            $form_value_list[$key] = cb_queryf($this->_database,
                                '"@S"', $i);
                        }
                        break;
                }
            }
            $column_string = implode(',', array_keys($form_value_list));
            $value_string = implode(',', $form_value_list);
            $query = sprintf('INSERT %s(%s) VALUES (%s)',
                $this->_form_table_name, $column_string, $value_string);

            //Execute Query
            $result = $this->_database->query($query);
            if ($result === false) {
                //Throw Query Error
                $this->_database->throwError([
                    'query' => 'query failed: ' . $query
                ]);
            }

            //Add Cache
            $form_id = $this->_database->get_insert_id();
            foreach (array_keys($form_value_list) as $key) {
                $this->_form_list[$form_id][$key] = mb_ereg_replace('"', '',
                    $form_value_list[$key]);
            }
        }

        return;
    }

    /**
     * Delete Form
     *
     * @access private
     *
     * @param string $unique_key //Unique key
     */
    function _deleteForm()
    {
        //Check Form Count
        if (count($this->_form_list) == 0) {
            return;
        }

        //Create Query
        $where_string = cb_queryf($this->_database, '_id IN (@S)',
            implode(',', array_keys($this->_form_list)));
        $query = sprintf('DELETE FROM %s WHERE %s',
            $this->_form_table_name, $where_string);

        //Execute Query
        $result = $this->_database->query($query);
        if ($result === false) {
            //Throw Query Error
            $this->_database->throwError([
                'query' => 'query failed: ' . $query
            ]);
        }

        //Delete Cache
        $this->_form_list = [];

        return;
    }


    /**
     * Create Item
     *
     * @access private
     *
     * @param string $unique_key //Unique key
     */
    function _createItem($unique_key)
    {
        for ($i = 0; $i < 5; $i++) {
            //Create Query
            $item_value_list = [];
            foreach ($this->_item_value_list as $key => $value) {
                switch ($key) {
                    default:
                        if (strlen($value) > 0) {
                            $item_value_list[$key] = cb_queryf($this->_database,
                                '"@S@S"', $value, $i);
                        } else {
                            $item_value_list[$key] = cb_queryf($this->_database,
                                '"@S"', $i);
                        }
                        break;
                }
            }
            $column_string = implode(',', array_keys($item_value_list));
            $value_string = implode(',', $item_value_list);
            $query = sprintf('INSERT %s(%s) VALUES (%s)',
                $this->_item_table_name, $column_string, $value_string);

            //Execute Query
            $result = $this->_database->query($query);
            if ($result === false) {
                //Throw Query Error
                $this->_database->throwError([
                    'query' => 'query failed: ' . $query
                ]);
            }

            //Add Cache
            $item_id = $this->_database->get_insert_id();
            foreach (array_keys($item_value_list) as $key) {
                $this->_item_list[$item_id][$key] = mb_ereg_replace('"', '',
                    $item_value_list[$key]);
            }
        }

        return;
    }

    /**
     * Delete Item
     *
     * @access private
     *
     * @param string $unique_key //Unique key
     */
    function _deleteItem()
    {
        if (count($this->_item_list) === 0) {
            return;
        }
        //Create Query
        $where_string = cb_queryf($this->_database, '_id IN (@S)',
            implode(',', array_keys($this->_item_list)));
        $query = sprintf('DELETE FROM %s WHERE %s',
            $this->_item_table_name, $where_string);

        //Execute Query
        $result = $this->_database->query($query);
        if ($result === false) {
            //Throw Query Error
            $this->_database->throwError([
                'query' => 'query failed: ' . $query
            ]);
        }

        //Delete Cache
        $this->_item_list = [];

        return;
    }


    /**
     * Get Form
     *
     * @access  private
     *
     * @param  int   $form_id     //Form ID
     * @param  array $column_list //Column Name List
     *
     * @return array $form                       //Validate Result
     */
    function _getForm($form_id, $column_list)
    {
        //Get Database
        $database =& $this->_database;

        //Create Column List
        $column_list = implode(',', $column_list);

        //Create Where Column
        $where = cb_queryf($database, 'WHERE _id = @S', $form_id);

        //Create Order By Column
        $order_by = 'ORDER BY col_list_index, _id';

        //Create Query
        $query = sprintf('SELECT %s FROM %s %s %s', $column_list,
            $this->_form_table_name, $where, $order_by);
        $query = $database->select_format($query, 0, -1,
            CB_DATABASE_DEFAULT_LOCK);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }
        $form = $database->fetch_assoc($result);
        $database->free_result($result);

        return $form;
    }

    /**
     * Validate Form
     *
     * @access  private
     *
     * @param  int  $form_id        //Form ID
     * @param  int  $validate_props //Validate Properties
     * @param  BOOL $deleted        //Deleted Flag
     *
     * @return BOOL                               //Validate Result
     */
    function _validateForm($form_id, $validate_props, $deleted = false)
    {
        //Get Link From Table
        $form = $this->_getForm($form_id, array_keys($validate_props));
        if ($deleted && ! $form) {
            return true;
        }

        //Validate Properties
        foreach ($validate_props as $prop_name => $prop_value) {
            //Check Assertion
            if (strval($form[$prop_name]) !== strval($prop_value)) {
                //Finalize Test
                $this->_finalize();
                assert('strval($form[$prop_name]) === strval($prop_value)');
            }
        }

        return true;
    }

    /**
     * Add Form
     *
     * @access  private
     * @return BOOL                  //Validate Result
     */
    function test_add()
    {
        //Initialize Test
        $this->_initialize();

        //Get Form Logic Instance
        $logic = GRN_Report_Form_Logic::getInstance();

        //Test Add Form
        $i = 0;
        for ($i = 0; $i < 5; $i++) {
            $i = $i + 5;

            //Create Property List
            $property_list = [];
            $property_list['col_name'] = 'name_' . $i;
            $property_list['col_foreign_key'] = 'foreign_key_' . $i;
            $property_list['col_memo'] = 'memo_' . $i;
            $property_list['col_type'] = 0;
            $property_list['col_category'] = null;
            $property_list['col_active'] = 0;

            //Add Form
            $form_id = $logic->add($property_list['col_name'],
                $property_list['col_foreign_key'],
                $property_list['col_memo'],
                $property_list['col_category']
            );

            //Update Cache
            $this->_form_list[$form_id] = $property_list;

            //Validate Form
            $this->_validateForm($form_id, $property_list);
        }

        //Finalize Test
        $this->_finalize();

        return true;
    }

    /**
     * Add Separator
     *
     * @access  private
     * @return BOOL                  //Validate Result
     */
    function test_addSeparator()
    {
        //Initialize Test
        $this->_initialize();

        //Get Form Logic Instance
        $logic = GRN_Report_Form_Logic::getInstance();

        //Test Add Form
        $i = 0;
        for ($i = 0; $i < 5; $i++) {
            $i = $i + 5;

            //Create Property List
            $property_list = [];
            $property_list['col_type'] = 1;
            $property_list['col_category'] = null;

            //Add Separator
            $form_id = $logic->addSeparator($property_list['col_category']);

            //Update Cache
            $this->_form_list[$form_id] = $property_list;

            //Validate Form
            $this->_validateForm($form_id, $property_list);
        }

        //Finalize Test
        $this->_finalize();

        return true;
    }

    /**
     * Modify Form Layout
     *
     * @access  private
     * @return BOOL                  //Validate Result
     */
    function test_modify()
    {
        //Initialize Test
        $this->_initialize();

        //Get Form Logic Instance
        $logic = GRN_Report_Form_Logic::getInstance();

        //Test Modify Form
        $i = 0;
        foreach (array_keys($this->_form_list) as $form_id) {
            $i = $i + 5;

            //Create Property List
            $property_list = [];
            $property_list['col_name'] = 'name_' . $i;
            $property_list['col_foreign_key'] = 'foreign_key_' . $i;;
            $property_list['col_memo'] = 'memo_' . $i;
            $property_list['col_type'] = 0;
            $property_list['col_category'] = null;

            //Modify Form
            $form_id = $logic->modify($form_id,
                $property_list['col_name'],
                $property_list['col_foreign_key'],
                $property_list['col_memo'],
                $property_list['col_category'],
                true
            );

            //Update Cache
            $this->_form_list[$form_id] = $property_list;

            //Validate Form
            $this->_validateForm($form_id, $property_list);
        }

        //Finalize Test
        $this->_finalize();

        return true;
    }

    /**
     * Modify Form Administrator's Memo
     *
     * @access  private
     * @return BOOL                  //Validate Result
     */
    function test_modifyAdminMemo()
    {
        //Initialize Test
        $this->_initialize();

        //Get Form Logic Instance
        $logic = GRN_Report_Form_Logic::getInstance();

        //Test Modify Form
        $i = 0;
        foreach (array_keys($this->_form_list) as $form_id) {
            $i = $i + 5;

            //Create Property List
            $property_list = [];
            $property_list['col_admin_memo'] = 'admin_memo_' . $i;
            $property_list['col_category'] = null;

            //Modify Form Administrator's Memo
            $form_id = $logic->modifyAdminMemo($form_id,
                $property_list['col_admin_memo'],
                $property_list['col_category'],
                true
            );

            //Update Cache
            $this->_form_list[$form_id] = $property_list;

            //Validate Form
            $this->_validateForm($form_id, $property_list);
        }

        //Finalize Test
        $this->_finalize();

        return true;
    }

    /**
     * Delete Form
     *
     * @access  private
     * @return BOOL                  //Validate Result
     */
    function test_delete()
    {
        //Initialize Test
        $this->_initialize();

        //Get Form Logic Instance
        $logic = GRN_Report_Form_Logic::getInstance();

        //Test Delete Form
        foreach (array_keys($this->_form_list) as $form_id) {
            //Delete Form Layout
            $logic->delete($form_id, null, true);

            //Update Cache
            unset($this->_form_list[$form_id]);

            //Validate Form
            $validate_props = ['*' => ''];
            $this->_validateForm($form_id, $validate_props, true);
        }

        //Finalize Test
        $this->_finalize();

        return true;
    }

    /**
     * Delete Form Multiple
     *
     * @access  private
     * @return BOOL                  //Validate Result
     */
    function test_deleteMulti()
    {
        //Initialize Test
        $this->_initialize();

        //Get Form Logic Instance
        $logic = GRN_Report_Form_Logic::getInstance();

        //Test Delete Form Multiple
        $logic->deleteMulti(array_keys($this->_form_list));

        //Check Delete Form
        foreach (array_keys($this->_form_list) as $form_id) {
            //Update Cache
            unset($this->_form_list[$form_id]);

            //Validate Form
            $validate_props = ['*' => ''];
            $this->_validateForm($form_id, $validate_props, true);
        }

        //Finalize Test
        $this->_finalize();

        return true;
    }

    /**
     * Delete Form All
     *
     * @access  private
     * @return BOOL                  //Validate Result
     */
    function test_deleteAll()
    {
        //Initialize Test
        $this->_initialize();

        //Get Form Logic Instance
        $logic = GRN_Report_Form_Logic::getInstance();

        //Test Delete Form All
        $logic->deleteAll();

        //Check Delete Form
        foreach (array_keys($this->_form_list) as $form_id) {
            //Update Cache
            unset($this->_form_list[$form_id]);

            //Validate Form
            $validate_props = ['*' => ''];
            $this->_validateForm($form_id, $validate_props, true);
        }

        //Finalize Test
        $this->_finalize();

        return true;
    }

    /**
     * Change Order Item
     *
     * @access  private
     * @return BOOL                  //Validate Result
     */
    function test_changeOrder()
    {
        //Initialize Test
        $this->_initialize();

        //Get Form Logic Instance
        $logic = GRN_Report_Form_Logic::getInstance();

        //Test Change Order Form
        $form_id_list = array_reverse(array_keys($this->_form_list));

        //Change Order Item
        $logic->changeOrder($form_id_list);

        //Create Validate Properties
        $list_index = 0;
        foreach ($form_id_list as $form_id) {
            $validate_props_list[$form_id]['col_list_index'] = $list_index;
            $list_index++;
        }

        //Validate Item
        foreach (array_keys($validate_props_list) as $key) {
            $this->_validateForm($key, $validate_props_list[$key]);
        }

        //Finalize Test
        $this->_finalize();

        return true;
    }

    /**
     * Activate Form
     *
     * @access  private
     * @return BOOL                  //Validate Result
     */
    function test_activate()
    {
        //Initialize Test
        $this->_initialize();

        //Get Form Logic Instance
        $logic = GRN_Report_Form_Logic::getInstance();

        //Test Activate Form
        foreach (array_keys($this->_form_list) as $form_id) {
            //Activate Form
            $logic->activate($form_id, null, true);

            //Update Cache
            $this->_form_list[$form_id]['col_active'] = 1;

            //Validate Form
            $validate_props = ['col_active' => 1];
            $this->_validateForm($form_id, $validate_props);
        }

        //Finalize Test
        $this->_finalize();

        return true;
    }


}

cb_test_run();

?>
