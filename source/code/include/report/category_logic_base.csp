<?php
/**
 * Report Application Category Logic Class
 *
 * @version 1.0
 * @package grn.report
 */

/** Category Application **/
require_once('report/resources.csp');

/**
 * Category Logic Base Class
 *
 * @package grn.report
 */
class GRN_Report_Category_Logic_Base
{
    //Category Manager Instance
    private $_category_manager_base = null;

    private function __construct()
    {
    }

    /**
     * get Login User
     *
     * @access private
     * @return CB_User $login_user                //Login User
     */
    private function _getLoginUser()
    {
        //Get UUM Instance
        global $G_container_base;
        $grn_uum =& $G_container_base->getInstance('uum');

        //Get Login User
        $login_user =& $grn_uum->getLoginUser();
        if ( ! $login_user) {
            $ret = false;

            return $ret;
        }

        //Return Login User
        return $login_user;
    }

    /**
     * Set Creator
     *
     * @access private
     *
     * @param  object $object //Information
     *
     * @return bool   $result                    //Result
     */
    protected function _setCreator(&$object)
    {
        //Check Argument
        if ( ! $object) {
            return false;
        }

        // Get Login User
        $login_user =& $this->_getLoginUser();

        //Get Create Time
        $ctime = new CB_TimeStamp();
        $ctime->unix_ts = time();

        //Set Create Infomation
        if ($login_user) {
            $display_name = $login_user->get("display_name");
            $foreign_key = $login_user->get("foreign_key");
            $object->set(GRN_REPORT_COLUMN_CREATOR, $login_user);   //Creator
            $object->set(GRN_REPORT_COLUMN_CREATOR_NAME,
                $display_name); //Creator Name
            $object->set(GRN_REPORT_COLUMN_CREATOR_FOREIGN_KEY,
                $foreign_key);  //Creator Foreign Key
            $object->set(GRN_REPORT_COLUMN_MODIFIER, $login_user);   //Modifier
            $object->set(GRN_REPORT_COLUMN_MODIFIER_NAME,
                $display_name); //Modifier Name
            $object->set(GRN_REPORT_COLUMN_MODIFIER_FOREIGN_KEY,
                $foreign_key); //Modifier Foreign Key
        }
        $object->set(GRN_REPORT_COLUMN_CTIME, $ctime);  //Create Time
        $object->set(GRN_REPORT_COLUMN_MTIME, $ctime);  //Modify Time

        return true;
    }

    /**
     * Set Modofier
     *
     * @access private
     *
     * @param  object $object //Information
     *
     * @return bool   $result                    //Result
     */
    private function _setModifier(&$object)
    {
        //Check Argument
        if ( ! $object) {
            return false;
        }

        // Get Login User
        $login_user =& $this->_getLoginUser();

        //Get Modofy Time
        $mtime = new CB_TimeStamp();
        $mtime->unix_ts = time();

        //Set Modify Infomation/
        if ($login_user) {
            $display_name = $login_user->get("display_name");
            $foreign_key = $login_user->get("foreign_key");
            $object->set(GRN_REPORT_COLUMN_MODIFIER, $login_user);   //Modifier
            $object->set(GRN_REPORT_COLUMN_MODIFIER_NAME,
                $display_name); //Modifier Display Name
            $object->set(GRN_REPORT_COLUMN_MODIFIER_FOREIGN_KEY,
                $foreign_key);  //Modifier Foreign Key
        }
        $object->set(GRN_REPORT_COLUMN_MTIME, $mtime);  //Modify Time

        return true;
    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Report_Category_Logic_Base
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Category Manager Base
     *
     * @return GRN_Report_Category_Manager_Base
     */
    private function _getCategoryManagerBase()
    {
        if (is_null($this->_category_manager_base)) {
            require_once('report/category_manager_base.csp');
            $this->_category_manager_base
                = GRN_Report_Category_Manager_Base::getInstance();
        }

        return $this->_category_manager_base;
    }

    /**
     * Get Category
     *
     * @param  int $category_id        //Category ID
     * @param  int $parent_category_id //Parent Category ID
     * @param  int $lock_mode          //Lock Mode
     *
     * @return array  $category                  //Category Information
     */
    public function &get(
        $category_id,
        $parent_category_id = null,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $refresh = false
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        cb_trim_check($category_id,
            E_GRN_RPRT_CATEGORY_INVALID_ID);    //Category ID

        //Get Category
        $category_manager_base = $this->_getCategoryManagerBase();
        $category =& $category_manager_base->get($category_id,
            $parent_category_id, $refresh, $lock_mode);

        if ( ! $category) {
            //Category Not Found
            require_once('report/error_code.csp');
            cb_throw_error(E_GRN_RPRT_CATEGORY_NOT_FOUND);
        }

        //Return Category
        return $category;
    }

    /**
     * Get Root Category
     *
     * @param  int $lock_mode //Lock Mode
     *
     * @return array  $root_category             //Root Category Information
     */
    public function &getRoot($lock_mode = CB_DATABASE_DEFAULT_LOCK)
    {
        //Get Root Category
        $category_manager_base = $this->_getCategoryManagerBase();
        $category
            =& $category_manager_base->get(GRN_REPORT_CATEGORY_ROOT_ID,
            false, $lock_mode);
        if ( ! $category) {
            //Category Not Found
            require_once('report/error_code.csp');
            cb_throw_error(E_GRN_RPRT_CATEGORY_NOT_FOUND);
        }

        //Return Category
        return $category;
    }

    /**
     * Get Category List
     *
     * @param  int  $paerent_category_id //Parent Category ID
     * @param  bool $refresh             //Refresh Flag
     * @param  int  $lock_mode           //Lock Mode
     * @param  int  $isUseLocal          //TRUE :local name   FALSE:default name
     *
     * @return array  $category_list             //Category Information List
     */
    public function &getList(
        $parent_category_id = null,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $isUseLocal = true
    ) {
        //Get Category List
        $category_manager_base = $this->_getCategoryManagerBase();
        $category_list
            =& $category_manager_base->getList($parent_category_id,
            $refresh, $lock_mode, $isUseLocal);

        //Return Category Information List
        return $category_list;
    }

    /**
     * Get Category List
     *
     * @param  array $category_id_list //Category ID List: array(id1, id2, id3, 鐃緒愁鐃緒愁鐃緒愁)
     * @param  bool  $refresh          //Refresh Flag
     * @param  int   $lock_mode        //Lock Mode
     *
     * @return array  $category_list             //Category Information List
     */
    public function getCategoryIDList(
        $category_id_list,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Category List
        $category_manager_base =& $this->_getCategoryManagerBase();
        $category_list
            = $category_manager_base->getCategoryIDList($category_id_list,
            $refresh, $lock_mode);

        //Return Category Information List
        return $category_list;
    }

    /**
     * Search Category
     *
     * @param  array $condition_list //Search Condition List
     * @param  int   $offset         //Search Offset
     * @param  int   $limit          //Search Limit
     * @param  int   $lock_mode      //Lock Mode
     *
     * @return array  $hit_category_list         //Hit Category List
     */
    public function search(
        $condition_list,
        $offset = 0,
        $limit = 5,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Search Category
        $category_manager_base =& $this->_getCategoryManagerBase();

        return $category_manager_base->search($condition_list, $offset, $limit,
            $lock_mode);
    }

    /**
     * Get Parent Category
     *
     * @param  int $category_id //Category ID
     * @param  int $lock_mode   //Lock Mode
     *
     * @return object $parent_category           //Parent Category Information
     */
    public function &getParent(
        $category_id,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        cb_trim_check($category_id,
            E_GRN_RPRT_CATEGORY_INVALID_ID);    //Category ID

        //Get Parent Category
        $category_manager_base = $this->_getCategoryManagerBase();
        $parent_category
            =& $category_manager_base->getParent($category_id,
            $lock_mode);
        if ( ! $parent_category) {
            $ret = false;

            return $ret;
        }

        //Return Parent Category
        return $parent_category;
    }

    /**
     * Get Child Category
     *
     * @param int   $category_id         //Category ID
     * @param array $child_category_list //Child Category List
     */
    public function getChildList(
        $category_id,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        cb_trim_check($category_id,
            E_GRN_RPRT_CATEGORY_INVALID_ID);    //Category ID

        //Get Category List
        $category_manager_base = $this->_getCategoryManagerBase();
        $child_category_list
            = $category_manager_base->getChildList($category_id,
            $lock_mode);

        //Return Child Category List
        return $child_category_list;
    }

    /**
     * Get All Child Category
     *
     * @param  int $category_id //Category ID
     * @param  int $lock_mode   //Lock Mode
     *
     * @return array  $child_category_list       //Child Category List
     */
    public function getAllChildList(
        $category_id,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        cb_trim_check($category_id,
            E_GRN_RPRT_CATEGORY_INVALID_ID);    //Category ID

        //Create Category ID List
        $category_id_list = [];
        $category_id_list[] = $category_id;

        $child_category_list = [];
        $category_manager_base =& $this->_getCategoryManagerBase();
        $category_manager_base->getALLChildList($category_id_list,
            $child_category_list, $lock_mode);

        return $child_category_list;
    }

    /**
     * Get Child Category Count
     *
     * @param  int $category_id //Category ID
     * @param  int $lock_mode   //Lock Mode
     *
     * @return array  $child_category_list       //Child Category List
     */
    public function getChildCount(
        $category_id,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        cb_trim_check($category_id,
            E_GRN_RPRT_CATEGORY_INVALID_ID);    //Category ID

        //Get Category Count
        $category_manager_base =& $this->_getCategoryManagerBase();
        $child_category_count
            = $category_manager_base->getChildCount($category_id,
            $lock_mode);

        //Return Child Category List
        return $child_category_count;
    }

    /**
     * Get Accessible Child Category Count
     *
     * @param  int $category_id //Category ID
     * @param  int $lock_mode   //Lock Mode
     *
     * @return array  $child_category_list       //Child Category List
     */
    public function getAccessibleChildCount(
        $user_id,
        $category_id,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        cb_trim_check($category_id,
            E_GRN_RPRT_CATEGORY_INVALID_ID);    //Category ID

        //Get Category Count
        $child_category_count = 0;
        $category_list = $this->getChildList($category_id);
        $accessible_category_ids = $this->getAccessibleCategoryIdList($user_id);
        foreach ($category_list as $id => $category) {
            if (in_array($id, $accessible_category_ids)) {
                $child_category_count++;
            }
        }

        //Return Child Category List
        return $child_category_count;
    }

    /**
     * Get Category Tree
     *
     * @param  int  $last_category_id //Last Category ID
     * @param  bool $include_root     //Include Root Flag
     * @param  bool $include_last     //Include Last Category Flag
     * @param  int  $lock_mode        //Lock Mode
     *
     * @return array  $tree_category_list        //Tree Category List
     */
    public function getTreeList(
        $last_category_id,
        $include_root = true,
        $include_last = true,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $refresh = false
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        cb_trim_check($last_category_id,
            E_GRN_RPRT_CATEGORY_INVALID_ID);    //Last Category ID

        //Get Tree Category List
        $category_manager_base = $this->_getCategoryManagerBase();
        $tree_category_list
            = $category_manager_base->getTreeList($last_category_id,
            $include_root, $include_last, $lock_mode, $refresh);

        //Return Tree Category List
        return $tree_category_list;
    }

    public function getAccessibleCategoryIdList($userId)
    {
        cb_trim_check($userId, E_GRN_RPRT_INVALID_USER_ID);

        $category_manager_base = $this->_getCategoryManagerBase();
        $category_id_list
            = $category_manager_base->getAccessibleCategoryIdList($userId);

        return $category_id_list;
    }
}


