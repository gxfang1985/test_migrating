<?php
require_once('developer/azunit.csp');
require_once('report/category_manager.csp');
require_once('report/category_logic.csp');

class test_grn_report_category_logic extends CB_TestCase
{
    /** database **/
    var $_database = null;

    /** table_name **/
    var $_table_name = null;

    /** Test Target List **/
    var $_category_list = null;

    /** Unique key **/
    var $_unique_key = null;

    /** Basic Value List **/
    var $_category_value_list = [];

    /**
     * Constructor
     *
     * @access private
     *
     * @param string $test_method //Test Method Name
     */
    function test_grn_report_category_logic($test_method)
    {
        //Initialize Parent Class
        parent::CB_TestCase($test_method);

        //Initalize Randam Key
        mt_srand(time());

        //Initialize Unique Key
        $this->_unique_key = $test_method . time();

        //Get Database Connection
        global $G_container_base;
        $this->_database =& $G_container_base->getInstance('dbconn');

        //Set table name
        $this->_table_name = 'tab_grn_report_category';

        //Set Basic Value List
        $this->_category_value_list = [
            'col_name'           => 'name_',
            'col_foreign_key'    => 'foreign_key_',
            'col_memo'           => 'memo_',
            'col_security_model' => '', // 0:GRANT / 1:REVOKE
        ];

        return;
    }

    /**
     * Initialize Test
     *
     * @access private
     */
    function _initialize()
    {
        //Get Unique Key
        $unique_key = $this->_unique_key;

        //Create Test Category
        $this->_createCategory($unique_key);

        return;
    }

    /**
     * finalize Test
     *
     * @access private
     */
    function _finalize()
    {
        //Delete Test Category
        $this->_deleteCategory();

        return;
    }

    /**
     * Create Category
     *
     * @access private
     *
     * @param string $unique_key //Unique key
     */
    function _createCategory($unique_key)
    {
        $parent_id = null;
        for ($i = 0; $i < 5; $i++) {
            //Create Query
            $category_value_list = [];
            $index = 0;
            foreach ($this->_category_value_list as $key => $value) {
                if ($key == 'col_security_model') {
                    $category_value_list[$key] = cb_queryf($this->_database,
                        '"@S"', $i % 2);
                } elseif ($key == 'col_parent') {
                    $category_value_list[$key] = $parent_id;
                } elseif ($key == 'list_index') {
                    $category_value_list[$key] = ++$index;
                } elseif ($key == 'col_creator' || $key == 'col_modifier') {
                    $category_value_list[$key] = 1;
                } elseif (strlen($value) > 0) {
                    $category_value_list[$key] = cb_queryf($this->_database,
                        '"@S@S"', $value, $i);
                } else {
                    $category_value_list[$key] = cb_queryf($this->_database,
                        '"@S"', $i);
                }
            }
            $column_string = implode(',', array_keys($category_value_list));
//            $value_string = implode(',', $category_value_list);
            $value_string = "";
            foreach ($category_value_list as $value) {
                if (is_null($value) || strlen($value) == 0) {
                    $value = "null";
                }
                $value_string .= $value . ',';
            }
            $value_string = substr($value_string, 0, strlen($value_string) - 1);

            $query = sprintf('INSERT %s(%s) VALUES (%s)', $this->_table_name,
                $column_string, $value_string);

            //Execute Query
            $result = $this->_database->query($query);

            if ($result === false) {
                //Throw Query Error
                $this->_database->throwError([
                    'query' => 'query failed: ' . $query
                ]);
            }

            //Add Cache
            $category_id = $this->_database->get_insert_id();
            $parent_id = $category_id;
            foreach (array_keys($category_value_list) as $key) {
                $this->_category_list[$category_id][$key] = mb_ereg_replace('"',
                    '', $category_value_list[$key]);
            }
        }

        return;
    }

    /**
     * Delete Category
     *
     * @access private
     *
     * @param string $unique_key //Unique key
     */
    function _deleteCategory()
    {
        //Create Query
        $where_string = cb_queryf($this->_database, '_id IN (@S)',
            implode(',', array_keys($this->_category_list)));
        $query = sprintf('DELETE FROM %s WHERE %s', $this->_table_name,
            $where_string);

        //Execute Query
        $result = $this->_database->query($query);
        if ($result === false) {
            //Throw Query Error
            $this->_database->throwError([
                'query' => 'query failed: ' . $query
            ]);
        }

        //Delete Cache
        $this->_category_list = [];

        return;
    }


    function test_NotifySubscribe()
    {
        $this->_initialize();

        $logic = GRN_Report_Category_Logic::getInstance();

        for ($i = 50000; $i < 50010; $i++) {
            foreach ($this->_category_list as $category_id => $category) {
                $logic->removePersonalRecord($i, $category_id);

                $logic->setNotifySubscribe($i, $category_id);
                $notify = $logic->getNotifySubscription($i, $category_id);
                assert('$notify == TRUE');

                $logic->setNotifyUnsubscribe($i, $category_id);
                $notify = $logic->getNotifySubscription($i, $category_id);
                assert('$notify == FALSE');

                $logic->removePersonalRecord($i, $category_id);
            }
        }

        $this->_finalize();
    }
}

?>
