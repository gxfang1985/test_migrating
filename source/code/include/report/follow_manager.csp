<?php
/**
 * Report Application Follow Class
 *
 * @author  Shou,Aoki 2009/09
 * @version 1.0
 * @package grn.report
 */

/** Report Application **/
require_once('report/resources.csp');
require_once('report/follow_manager_base.csp');

/**
 * Follow Manager Class
 *
 * @package grn.report
 */
class GRN_Report_Follow_Manager extends GRN_Report_Follow_Manager_Base
{
    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
        //Get Parent Instance
        $parent = parent::getInstance();

        //Sync Parent Table and Follow List Cache
        $this->_table_name =& $parent->_table_name;
        $this->_list =& $parent->_list;
    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Report_Follow_Manager
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Create Follow
     *
     * @param  array $property_list //Property List(Name=>Value)
     *
     * @return int   $follow_id                    //Follow ID
     */
    function create($property_list)
    {
        $id = GRN_Report_Table_Manager::genericCreate(GRN_REPORT_TABLE_FOLLOW,
            $property_list);

        return $id;
    }

    /**
     * Update Follow
     *
     * @param  array $follow_id     //Follow ID
     * @param  array $property_list //Property List(Name=>Value)
     *
     * @return array $follow_id                    //Follow ID
     */
    function update($follow_id, $property_list)
    {
        $id = GRN_Report_Table_Manager::updateById(GRN_REPORT_TABLE_FOLLOW,
            $follow_id, $property_list);

        return $id;
    }

    /**
     * Remove Follow
     *
     * @param int  $follow_id //Follow ID
     * @param BOOL $result    //Result
     */
    function remove($follow_id)
    {
        GRN_Report_Table_Manager::removeById(GRN_REPORT_TABLE_FOLLOW,
            $follow_id);

        //Delete From Follow List
        foreach (array_keys($this->_list) as $key) {
            if (in_array($follow_id, $this->_list[$key])) {
                unset($this->_list[$key][$follow_id]);
            }
        }

        return true;
    }

    function isRemovable($follow_id)
    {
        $follow = $this->get($follow_id);

        //Get UUM Instance
        global $G_container_base;
        $uum =& $G_container_base->getInstance('uum');
        $user =& $uum->getLoginUser();

        if ( ! method_exists($user, 'getOID')) {
            return false;
        }

        if (isset($follow['col_creator'])
            && $follow['col_creator'] === $user->getOID()
        ) {
            return true;
        } else {
            return false;
        }
    }
}


