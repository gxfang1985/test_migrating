<?php
/**
 * Report Application Report Class
 *
 * @author  Shou Aoki 2009/09
 * @version 1.0
 * @package grn.report
 */

/** Report Application **/
require_once('report/resources.csp');
require_once('report/report_logic_base.csp');
require_once('report/table_manager.csp');
require_once('report/filerelation_logic.csp');

/**
 * Report Manager Class
 *
 * @package grn.report
 */
class GRN_Report_Report_Logic extends GRN_Report_Report_Logic_Base
{
    /** @var  GRN_Report_Report_Manager */
    var $_report_manager = null;

    /**
     * Constructor
     */
    function __construct()
    {

    }

    /** @var self */
    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return self
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * @return GRN_Report_Report_Manager
     */
    function _getReportManager()
    {
        if (is_null($this->_report_manager)) {
            require_once('report/report_manager.csp');
            $this->_report_manager = GRN_Report_Report_Manager::getInstance();
        }

        return $this->_report_manager;
    }

    /**
     * Add Report
     *
     * @return array  $form                      //Form Information
     * @return int    $report_id               //Report ID
     */
    function add(& $form, $name, $property_list)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        cb_trim_check($form['fid'],
            E_GRN_RPRT_FORM_INVALID_ID);                //Form ID

        //Create Property List
        $property_list[GRN_REPORT_COLUMN_NAME] = $name;
        $property_list[GRN_REPORT_COLUMN_CATEGORY] = $form['category'];
        $property_list[GRN_REPORT_COLUMN_FORM] = $form['fid'];
        $property_list[GRN_REPORT_COLUMN_FORM_NAME] = $form['name'];
        $property_list[GRN_REPORT_COLUMN_FORM_FOREIGN_KEY]
            = $form['foreign_key'];
        $property_list[GRN_REPORT_COLUMN_ENABLE_FOLLOW]
            = $form['enable_follow'];
        $property_list[GRN_REPORT_COLUMN_ENABLE_MEMBER]
            = $form['enable_member'];
        $property_list[GRN_REPORT_COLUMN_ENABLE_PARTNER]
            = $form['enable_partner'];

        //Set Creator
        GRN_Report_Table_Manager::setCreator($property_list);
        $property_list[GRN_REPORT_COLUMN_REPORT_MTIME]
            = $property_list[GRN_REPORT_COLUMN_CTIME];

        //Create New Report
        $report_manager = $this->_getReportManager();
        $report_id = $report_manager->create($property_list);

        if ($property_list[GRN_REPORT_COLUMN_DRAFT] != GRN_REPORT_DRAFT) {
            //Add Creator's Read Status
            $this->read($property_list[GRN_REPORT_COLUMN_CREATOR], $report_id);
        }

        return $report_id;
    }

    /**
     * Modify Report
     *
     * @return array  $form                      //Form Information
     * @return array  $refresh_ctime             //Refresh Create Time
     * @return int    $report_id               //Report ID
     */
    function modify($report_id, & $property_list, $refresh_ctime = false)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');

        if ($refresh_ctime) {
            //Set Creator
            GRN_Report_Table_Manager::setCreator($property_list);
        } else {
            //Set Modifier
            GRN_Report_Table_Manager::setModifier($property_list);
            $property_list[GRN_REPORT_COLUMN_REPORT_MTIME]
                = $property_list[GRN_REPORT_COLUMN_MTIME];
        }

        //Create New Report
        $report_manager = $this->_getReportManager();
        $present_property = $report_manager->get($report_id);
        if ($this->illegalModify($present_property, $property_list)) {
            cb_throw_error(E_GRN_RPRT_REPORT_NOT_FOUND);
        }
        $ret = $report_manager->update($report_id, $property_list);

        if ($ret) {
            if ( ! array_key_exists(GRN_REPORT_COLUMN_DRAFT, $property_list)
                 || $property_list[GRN_REPORT_COLUMN_DRAFT] == GRN_REPORT_SENT
            ) {
                if ($refresh_ctime) {
                    $this->read($property_list[GRN_REPORT_COLUMN_CREATOR],
                        $report_id);
                } else {
                    $this->read($property_list[GRN_REPORT_COLUMN_MODIFIER],
                        $report_id);
                }
            }

            return $report_id;
        } else {
            $result = false;

            return $result;
        }
    }

    /**
     * check modifying Report is illeagal or not
     *
     * @param $present_property // present_property list of report
     * @param $property_list    // property list to modify
     *
     * @return BOOL $result //trying to modify is illegal or not.
     */
    function illegalModify($present_property, $property_list)
    {
        if (array_key_exists(GRN_REPORT_COLUMN_DRAFT, $property_list)) {
            return $present_property[GRN_REPORT_COLUMN_DRAFT] == GRN_REPORT_SENT
                ?
                $property_list[GRN_REPORT_COLUMN_DRAFT] == GRN_REPORT_DRAFT
                : false;
        }

        return false;
    }

    /**
     * Delete Report
     *
     * @param  int $report_id //Report ID
     * @param  int $form_id   //Form ID
     *
     * @return BOOL   $result                    //Result
     */
    function delete($report_id, $form_id = null)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        cb_trim_check($report_id, E_GRN_RPRT_REPORT_INVALID_ID);    //Report ID

        //Check Report Exist
        $report = $this->get($report_id, $form_id);

        //Get Report List with Extra Information
        $column_list = [
            'p._id p__id',
            'p.col_form p_col_form',
            'd._id d__id',
            'f._id f__id',
            'f.col_file f_col_file',
        ];
        $report_manager = $this->_getReportManager();

        $option = [
            'condition' => [
                [
                    'column'   => 'p._id',
                    'value'    => $report_id,
                    'operator' => '='
                ]
            ]
        ];

        $report =& $report_manager->getEx($report_id, $form_id, $column_list,
            $option);

        //Delete Item Data File
        $item_data_id_list = [];
        foreach (array_keys($report['item_data']) as $key) {
            $item_data_id = $report['item_data'][$key]['d__id'];
            $item_data_file_id = $report['item_data'][$key]['f__id'];
            if ($item_data_file_id
                && ! in_array($item_data_id, $item_data_id_list)
            ) {
                $item_data_id_list[] = $item_data_id;
            }
        }
        $file_relation_logic = null;
        if (count($item_data_id_list) !== 0) {
            require_once('report/filerelation_logic.csp');
            $file_relation_logic = GRN_Report_FileRelation_Logic::getInstance();
            foreach ($item_data_id_list as $item_data_id) {
                $file_relation_logic->deleteAllItemDataFiles($item_data_id);
            }
        }

        //delete report follow files
        if ( ! $file_relation_logic) {
            $file_relation_logic = GRN_Report_FileRelation_Logic::getInstance();
        }
        $file_relation_logic->deleteAllFollowsFilesByReportId([$report_id]);

        //Remove Report
        $report_manager->remove($report_id);

        //Check Form Deleted Flag
        if ( ! is_null($report['p_col_form'])) {
            $column_list = ['_id', 'col_deleted'];
            require_once('report/form_manager.csp');
            $form_manager = GRN_Report_Form_Manager::getInstance();
            $form = $form_manager->getDirect($report['p_col_form'],
                $column_list);
            if ($form['col_deleted'] == 1) {
                //Check Report Count
                $option = [];
                $column_list = ['_id'];
                $report_list =& $this->getList($report['p_col_form'],
                    $column_list, $option, true);
                if (count($report_list) === 0) {
                    //Remove Form
                    $form_manager->remove($report['p_col_form']);
                }
            }
        }

        return true;
    }

    /**
     * Delete Multiple Report
     *
     * @param  array $report_id_list //Report ID List
     * @param  array $form_id        //Form_id
     *
     * @return BOOL   $result                    //Result
     */
    function deleteMulti($report_id_list, $form_id = null)
    {
        //Check Argument
        if ( ! is_array($report_id_list)) {
            //Not Input Necessary
            require_once('report/error_code.csp');
        }

        //Get Report List with Extra Information
        $report_list = [];
        $column_list = [
            'p._id p__id',
            'p.col_form p_col_form',
            'd._id d__id',
            'f._id f__id',
            'f.col_file f_col_file',
        ];

        $report_manager = $this->_getReportManager();
        foreach ($report_id_list as $report_id) {
            $option = [
                'condition' => [
                    [
                        'column'   => 'p._id',
                        'value'    => $report_id,
                        'operator' => '='
                    ]
                ]
            ];

            $report_list[$report_id] =& $report_manager->getEx($report_id,
                $form_id, $column_list, $option);
        }

        //Delete Item Data File
        $item_data_id_list = [];
        foreach (array_keys($report_list) as $report_id) {
            foreach (array_keys($report_list[$report_id]['item_data']) as $key) {
                $item_data_id
                    = $report_list[$report_id]['item_data'][$key]['d__id'];
                $item_data_file_id
                    = $report_list[$report_id]['item_data'][$key]['f__id'];
                if ($item_data_file_id
                    && ! in_array($item_data_id, $item_data_id_list)
                ) {
                    $item_data_id_list[] = $item_data_id;
                }
            }
        }
        $file_relation_logic = null;
        if (count($item_data_id_list) !== 0) {
            require_once('report/filerelation_logic.csp');
            $file_relation_logic = GRN_Report_FileRelation_Logic::getInstance();
            foreach ($item_data_id_list as $item_data_id) {
                $file_relation_logic->deleteAllItemDataFiles($item_data_id);
            }
        }

        //delete report follow files
        if ( ! $file_relation_logic) {
            $file_relation_logic = GRN_Report_FileRelation_Logic::getInstance();
        }
        $file_relation_logic->deleteAllFollowsFilesByReportId($report_id_list);

        //Remove Report
        $report_manager = $this->_getReportManager();
        $report_manager->removeMulti($report_id_list);

        $deleted_form_id_list = [];
        require_once('report/form_manager.csp');
        $form_manager = GRN_Report_Form_Manager::getInstance();
        foreach (array_keys($report_list) as $report_id) {
            $report =& $report_list[$report_id];

            //Check Form Deleted Flag
            if ( ! is_null($report['p_col_form'])
                 && ! in_array($report['p_col_form'], $deleted_form_id_list)
            ) {
                $column_list = ['_id', 'col_deleted'];
                $form = $form_manager->getDirect($report['p_col_form'],
                    $column_list);
                if ($form['col_deleted'] == 1) {
                    //Check Report Count
                    $option = ['dummy' => '1'];
                    $column_list = ['_id'];
                    $list =& $this->getList($report['p_col_form'],
                        $column_list, $option, true);
                    if (count($list) <= 0) {
                        //Remove Form
                        $form_manager->remove($report['p_col_form']);
                        $deleted_form_id_list[] = $report['p_col_form'];
                    }
                }
            }
        }

        return true;
    }

    /**
     * Delete All Report
     *
     * @param  int $form_id //Form ID
     *
     * @return BOOL   $result                    //Result
     */
    function deleteAll($form_id = null)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        cb_trim_check($form_id, E_GRN_RPRT_FORM_INVALID_ID);    //Form ID

        //Get Report List with Extra Information
        $column_list = [
            'p._id p__id',
            'p.col_form p_col_form',
            'd._id d__id',
            'f._id f__id',
            'f.col_file f_col_file',
        ];
        $report_manager =& $this->_getReportManager();
        $report_list =& $report_manager->getListEx($form_id, $column_list);

        //Delete Item Data File
        $item_data_id_list = [];
        foreach (array_keys($report_list) as $report_id) {
            foreach (array_keys($report_list[$report_id]['item_data']) as $key) {
                $item_data_id
                    = $report_list[$report_id]['item_data'][$key]['d__id'];
                $item_data_file_id
                    = $report_list[$report_id]['item_data'][$key]['f__id'];
                if ($item_data_file_id
                    && ! in_array($item_data_id, $item_data_id_list)
                ) {
                    $item_data_id_list[] = $item_data_id;
                }
            }
        }
        if (count($item_data_id_list) !== 0) {
            require_once('report/filerelation_logic.csp');
            $file_relation_logic = GRN_Report_FileRelation_Logic::getInstance();
            foreach ($item_data_id_list as $item_data_id) {
                $file_relation_logic->deleteAllItemDataFiles($item_data_id);
            }
        }

        //Remove Report
        $report_manager->removeAll($form_id);

        //Check Form Deleted Flag
        if ( ! is_null($form_id)) {
            $column_list = ['_id', 'col_deleted'];
            require_once('report/form_manager.csp');
            $form_manager = GRN_Report_Form_Manager::getInstance();
            $form = $form_manager->getDirect($form_id, $column_list);
            if ($form['col_deleted'] == 1) {
                //Remove Form
                $form_manager->remove($form_id);
            }
        }

        return true;
    }

    /**
     * Change Report Order
     *
     * @param  int  $report_id_list //Report ID List
     * @param  int  $form_id        //Form ID
     * @param  bool $refresh        //Refresh Flag
     *
     * @return bool   $result                    //Result
     */
    function changeOrder($report_id_list, $form_id = null, $refresh = false)
    {
        //Check Argument
        if ( ! is_array($report_id_list)) {
            require_once('fw/string_util.csp');
            require_once('report/error_code.csp');
            cb_throw_error(E_GRN_RPRT_REPORT_NOT_INPUT_NECESSARY);
        }

        //Change Order
        $report_manager =& $this->_getReportManager();
        $report_manager->changeOrder($report_id_list, $form_id, $refresh);

        return true;
    }

    function setNotifySubscribe($user_id, $report_id)
    {
        $this->_setNotifySubscriptionHelper($user_id, $report_id, true);
    }

    function setNotifyUnsubscribe($user_id, $report_id)
    {
        $this->_setNotifySubscriptionHelper($user_id, $report_id, false);
    }

    function _setNotifySubscriptionHelper($user_id, $report_id, $isSubscribe)
    {

        $tablename
            = GRN_Report_Table_Manager::getTableName(GRN_REPORT_TABLE_CATEGORYREPORTRELATIONS);
        $tablename = GRN_Report_Table_Manager::getPersonalTablename($user_id,
            $tablename);
        $column_list
            = GRN_Report_Table_Manager::getColumnList(GRN_REPORT_TABLE_CATEGORYREPORTRELATIONS);
        $database =& GRN_Report_Table_Manager::getDataBase();

        $isExist = $this->_isExistPersonalRecord($user_id, $report_id);
        if ($isExist) {
            $property_list = ['col_subscription_flag' => $isSubscribe];
            $update_string
                = GRN_Report_Table_Manager::createUpdateString($column_list,
                $property_list);
            $where_string = cb_queryf($database,
                "col_user = @S and col_report = @S", $user_id, $report_id);
            GRN_Report_Table_Manager::update($tablename, $update_string,
                $where_string);
        } else {
            $property_list = [
                'col_user'              => $user_id,
                'col_report'            => $report_id,
                'col_subscription_flag' => $isSubscribe
            ];

            $column_string
                = GRN_Report_Table_Manager::createColumnString($column_list,
                $property_list);
            $value_string
                = GRN_Report_Table_Manager::createValueString($column_list,
                $property_list);
            GRN_Report_Table_Manager::create($tablename, $column_string,
                $value_string);
        }
    }

    function _isExistPersonalRecord($user_id, $report_id)
    {
        $tablename
            = GRN_Report_Table_Manager::getTableName(GRN_REPORT_TABLE_CATEGORYREPORTRELATIONS);
        $tablename = GRN_Report_Table_Manager::getPersonalTablename($user_id,
            $tablename);
        $database =& GRN_Report_Table_Manager::getDataBase();
        $query = cb_queryf($database,
            "SELECT * FROM @S where col_user = @S and col_report = @S",
            $tablename,
            $user_id,
            $report_id);

        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        $count = $database->num_rows($result);
        if ($count > 0) {
            return true;
        } else {
            return false;
        }
    }

    function removePersonalRecord($user_id, $report_id)
    {
        $tablename
            = GRN_Report_Table_Manager::getTableName(GRN_REPORT_TABLE_CATEGORYREPORTRELATIONS);
        $tablename = GRN_Report_Table_Manager::getPersonalTablename($user_id,
            $tablename);
        $database =& GRN_Report_Table_Manager::getDataBase();
        $where_string = cb_queryf($database,
            "col_user = @S and col_report = @S", $user_id, $report_id);
        GRN_Report_Table_Manager::remove($tablename, $where_string);
    }

    function getNotifySubscription($user_id, $report_id)
    {
        $tablename
            = GRN_Report_Table_Manager::getTableName(GRN_REPORT_TABLE_CATEGORYREPORTRELATIONS);
        $tablename = GRN_Report_Table_Manager::getPersonalTablename($user_id,
            $tablename);
        $database =& GRN_Report_Table_Manager::getDataBase();
        $query = cb_queryf($database,
            "SELECT * FROM @S where col_user = @S and col_report = @S",
            $tablename,
            $user_id,
            $report_id);

        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //情報が無い場合は更新通知を受け取る
        $count = $database->num_rows($result);
        if ($count === 0) {
            return true;
        }

        $row = $database->fetch_assoc($result);

        return $row['col_subscription_flag'];
    }

    /**
     * Confirm Report Notification
     *
     * @param  int $user_id   //User ID
     * @param  int $report_id //Report ID
     *
     * @return bool
     */
    function read($user_id, $report_id, $ts = null, $existingReadstatus = null)
    {
        if ( ! $user_id || ! $report_id) {
            return false;
        }

        if (is_null($ts)) {
            $ts = new CB_TimeStampEx();
        }

        //Confirm Notification
        require_once('report/notification.csp');
        $notification = GRN_Report_Notification_Listener::getInstance();
        $notification->confirmNotification($user_id, $report_id, $ts);

        //Update Read Status
        require_once('report/readstatus_logic.csp');
        $readstatus_logic = GRN_Report_ReadStatus_Logic::getInstance();
        $readstatus_logic->read($user_id, $report_id, $existingReadstatus);

        return true;
    }

}


