<?php
/**
 * Report Application Item Base Class
 *
 * @author  Shou Aoki 2009/09
 * @version 1.0
 * @package grn.report
 */

/** Report Application **/
require_once('report/resources.csp');
require_once('grn/application.csp');

/**
 * Item Manager Base Class
 *
 * @package grn.report
 */
class GRN_Report_Item_Manager_Base
{
    /** Table Name **/
    var $_table_name = null;

    /** Item List **/
    var $_list = [];

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
        $this->_table_name = 'tab_grn_report_item';
    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Report_Item_Manager_Base
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Item
     *
     * @param  int   $item_id     //Item ID
     * @param  int   $form_id     //Form ID
     * @param  array $column_list //Column List
     * @param  int   $refresh     //Refresh Cache
     * @param  int   $lock_mode   //Lock Mode
     *
     * @return array  $item                      //Item Information Array
     */
    function &get(
        $item_id,
        $form_id = null,
        $column_list = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Item List
        $item_list =& $this->getList($form_id, $column_list, $refresh,
            $lock_mode);

        //Get Item
        if ( ! array_key_exists($item_id, $item_list)) {
            $ret = false;

            return $ret;
        }

        //Return Item
        return $item_list[$item_id];
    }

    /**
     * Get Item Direct
     *
     * @param  int   $item_id     //Item ID
     * @param  array $column_list //Column List
     * @param  int   $lock_mode   //Lock Mode
     *
     * @return array  $item                      //Item Information Array
     */
    function getDirect(
        $item_id,
        $column_list = [],
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $item = [];

        //Get Database
        $database =& GRN_Report_Table_Manager::getDataBase();

        //Create Column List
        if (count($column_list) === 0) {
            $column_list = implode(',',
                GRN_Report_Table_Manager::getColumnList("GRN_Report_Item"));
        } else {
            $column_list = implode(',', $column_list);
        }
        //Create Condition
        $condition_list = [];
        $condition_list[] = cb_queryf($database, "_id = '@S'", $item_id);
        $condition = implode(' AND ', $condition_list);
        if ($condition) {
            $condition = 'WHERE ' . $condition;
        }

        //Create Order By Column
        $order_by = 'ORDER BY col_list_index, _id';

        //Create Query
        $query = sprintf('SELECT %s FROM %s %s %s', $column_list,
            $this->_table_name, $condition, $order_by);
        $query = $database->select_format($query, 0, 1, $lock_mode);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Get Item
        $item = $database->fetch_assoc($result);
        $database->free_result($result);

        //Return Item
        return $item;
    }

    /**
     * Get Item List
     *
     * @param  int   $form_id     //Form ID
     * @param  array $column_list //Column List
     * @param  bool  $refresh     //Refresh Cache
     * @param  int   $lock_mode   //Lock Mode
     *
     * @return array  $item_list                 //Item Information List
     */
    function &getList(
        $form_id = null,
        $column_list = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $item_list = [];

        //Check Arguments
        $form_id = is_null($form_id) ? 0 : $form_id;

        //Get Report List From Cache
        $cached = false;
        if ( ! $refresh) {
            if (array_key_exists($form_id, $this->_list)) {
                if (is_array($this->_list[$form_id])) {
                    $item_list =& $this->_list[$form_id];
                    $cached = true;
                }
            }
        } else {
            $this->_list[$form_id] = [];
        }

        //Get Item List From Database
        if ( ! $cached || $refresh) {
            //Get Database
            $database = GRN_Report_Table_Manager::getDataBase();

            //Create Column List
            if (count($column_list) === 0) {
                $column_list = implode(',',
                    GRN_Report_Table_Manager::getColumnList("GRN_Report_Item"));
            } else {
                $column_list = implode(',', $column_list);
            }

            //Create Condition
            $condition_list = [];
            if ($form_id != 0) {
                $condition_list[] = cb_queryf($database, 'col_form = "@S"',
                    $form_id);
            }
            $condition = implode(' AND ', $condition_list);
            if ($condition) {
                $condition = 'WHERE ' . $condition;
            }

            //Create Order By Column
            $order_by = 'ORDER BY col_list_index, _id';

            //Create Query
            $query = sprintf('SELECT %s FROM %s %s %s', $column_list,
                $this->_table_name, $condition, $order_by);
            $query = $database->select_format($query, 0, -1, $lock_mode);

            //Execute Query
            $result = $database->query($query);
            if ($result === false) {
                //Throw Query Error
                $database->throwError(['query' => 'query failed: ' . $query]);
            }

            //Update Item List
            $count = $database->num_rows($result);
            for ($i = 0; $i < $count; $i++) {
                $row = $database->fetch_assoc($result);
                $this->_list[$form_id][$row['_id']] = $row;
            }
            $database->free_result($result);

            if ($count > 0) {
                $item_list =& $this->_list[$form_id];
            }
        }

        //Return Item List
        return $item_list;
    }

    /**
     * Get Item Count
     *
     * @param  int  $form_id   //Form ID
     * @param  bool $refresh   //Refresh Cache
     * @param  int  $lock_mode //Lock Mode
     *
     * @return int    $item_count                //Item Count
     */
    function getCount(
        $form_id = null,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Database
        $database =& GRN_Report_Table_Manager::getDataBase();

        //Create Condition
        $condition_list = [];
        if ( ! is_null($form_id)) {
            $condition_list[] = cb_queryf($database, 'col_form = "@S"',
                $form_id);
        }
        $condition = implode(' AND ', $condition_list);
        if ($condition) {
            $condition = 'WHERE ' . $condition;
        }

        //Create Query
        $query = sprintf('SELECT COUNT(*) FROM %s %s', $this->_table_name,
            $condition);
        $query = $database->select_format($query, 0, -1, $lock_mode);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }
        $row = $database->fetch_assoc($result);
        $database->free_result($result);

        //Return Item Count
        return $row['COUNT(*)'];
    }
}


