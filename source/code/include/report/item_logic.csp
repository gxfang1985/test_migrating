<?php
/**
 * Report Application Item Class
 *
 * @author  Shou Aoki 2009/09
 * @version 1.0
 * @package grn.report
 */

/** Report Application **/
require_once('report/resources.csp');
require_once('report/item_logic_base.csp');
require_once('report/table_manager.csp');
require_once('report/item_manager.csp');

/**
 * Item Manager Class
 *
 * @package grn.report
 */
class GRN_Report_Item_Logic extends GRN_Report_Item_Logic_Base
{
    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {

    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Report_Item_Logic
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Add Item
     *
     * @param  int    $form_id              //Form ID
     * @param  string $data_type            //Data Type
     * @param  string $display_name         //Foreign Key
     * @param  array  $option_settings      //Settings for Option String
     * @param  array  $description_settings //Settings for Description
     * @param  array  $item_settings        //Settings for Item
     * @param  int    $required             //Required Flag
     *
     * @return int    $item_id                   //Item ID
     */
    function add(
        $form_id,
        $data_type,
        $display_name,
        $option_settings,
        $description_settings,
        $item_settings = [],
        $required = 0
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        cb_trim_check($form_id,
            E_GRN_RPRT_FORM_INVALID_ID);                //Form ID
        cb_trim_check($data_type,
            E_GRN_RPRT_ITEM_INVALID_DATA_TYPE);       //Data Type
        cb_trim_check($display_name,
            E_GRN_RPRT_ITEM_NOT_INPUT_NECESSARY);       //Display Name

        //Check Item Data Type
        require_once('report/item_resources.csp');
        $item_util = grn_report_get_item_util($data_type);
        if ( ! $item_util) {
            //Invalid Data Type
            require_once('report/error_code.csp');
            cb_throw_error(E_GRN_RPRT_ITEM_INVALID_DATA_TYPE);
        }

        //Serialize Settings
        $serialized_settings = serialize($item_settings);

        //Create Property List
        $property_list = [
            GRN_REPORT_COLUMN_DISPLAY_NAME => $display_name,
            GRN_REPORT_COLUMN_TYPE         => 0,
            GRN_REPORT_COLUMN_FORM         => $form_id,
            GRN_REPORT_COLUMN_DATA_TYPE    => $data_type,
            GRN_REPORT_COLUMN_SETTINGS     => $serialized_settings,
            GRN_REPORT_COLUMN_REQUIRED     => $required,
        ];

        //Set Option Settings
        if (is_array($option_settings)) {
            foreach (array_keys($option_settings) as $key) {
                $col_name = 'col_' . $key;
                if ($col_name == GRN_REPORT_COLUMN_OPTION_STRING_TYPE
                    || $col_name == GRN_REPORT_COLUMN_OPTION_STRING
                ) {
                    $property_list[$col_name] = $option_settings[$key];
                }
            }
        }

        //Set Description Settings
        if (is_array($description_settings)) {
            foreach (array_keys($description_settings) as $key) {
                $col_name = 'col_' . $key;
                if ($col_name == GRN_REPORT_COLUMN_DESCRIPTION
                    || $col_name == GRN_REPORT_COLUMN_DESCRIPTION_TYPE
                    || $col_name == GRN_REPORT_COLUMN_DESCRIPTION_EDITOR
                ) {
                    $property_list[$col_name] = $description_settings[$key];
                }
            }
            if (array_key_exists(GRN_REPORT_COLUMN_DESCRIPTION, $property_list)
                && array_key_exists(GRN_REPORT_COLUMN_DESCRIPTION_EDITOR,
                    $property_list)
                && $property_list[GRN_REPORT_COLUMN_DESCRIPTION_EDITOR] == 1
            ) {
                require_once('grn/controller.csp');
                $property_list[GRN_REPORT_COLUMN_DESCRIPTION]
                    = grn_wash_script_without_style_attribute($property_list[GRN_REPORT_COLUMN_DESCRIPTION]);
            }
        }

        //Set Creator
        GRN_Report_Table_Manager::setCreator($property_list);

        //Create New Item
        $item_manager = GRN_Report_Item_Manager::getInstance();
        $item_id = $item_manager->create($property_list);

        //Update Form
        require_once('report/form_logic.csp');
        $form_logic = GRN_Report_Form_Logic::getInstance();
        $form_logic->update($form_id);

        return $item_id;
    }

    /**
     * Add Standard Item
     *
     * @param  int $form_id //Form ID
     *
     * @return int    $item_id                   //Item ID
     */
    function addStandard($form_id)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        cb_trim_check($form_id,
            E_GRN_RPRT_FORM_INVALID_ID);                //Form ID

        //Serialize Settings
        $item_settings = [
            'size'               => 40,
            'max_input_size'     => null,
            'input_chars'        => 0,
            'initial_type'       => 0,
            'initial_text_value' => '',
            'initial_user_value' => '',
        ];
        $serialized_settings = serialize($item_settings);

        //Create Property List
        $property_list = [
            GRN_REPORT_COLUMN_TYPE               => 1,
            GRN_REPORT_COLUMN_FORM               => $form_id,
            GRN_REPORT_COLUMN_DATA_TYPE          => 'grn.report.string_single',
            GRN_REPORT_COLUMN_SETTINGS           => $serialized_settings,
            GRN_REPORT_COLUMN_OPTION_STRING_TYPE => 0,
            GRN_REPORT_COLUMN_OPTION_STRING      => '',
            GRN_REPORT_COLUMN_DESCRIPTION        => '',
            GRN_REPORT_COLUMN_DESCRIPTION_TYPE   => 0,
            GRN_REPORT_COLUMN_DESCRIPTION_EDITOR => 0,
            GRN_REPORT_COLUMN_REQUIRED           => 1,
            GRN_REPORT_COLUMN_LIST_INDEX         => 0,
        ];

        //Set Creator
        GRN_Report_Table_Manager::setCreator($property_list);

        //Create New Item
        $item_manager = GRN_Report_Item_Manager::getInstance();
        $item_id = $item_manager->create($property_list);

        return $item_id;
    }

    /**
     * Add Blank To Item
     *
     * @param  int $form_id //Form ID
     *
     * @return int    $item_id                   //Item ID
     */
    function addBlank($form_id)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        cb_trim_check($form_id,
            E_GRN_RPRT_FORM_INVALID_ID);                //Form ID

        //Create Property List
        $property_list = [
            GRN_REPORT_COLUMN_TYPE      => 2,
            GRN_REPORT_COLUMN_FORM      => $form_id,
            GRN_REPORT_COLUMN_DATA_TYPE => 'grn.report.blank',
            GRN_REPORT_COLUMN_BR        => 1,
            GRN_REPORT_COLUMN_REQUIRED  => 0,
        ];

        //Set Creator
        GRN_Report_Table_Manager::setCreator($property_list);

        //Create New Item
        $item_manager = GRN_Report_Item_Manager::getInstance();
        $item_id = $item_manager->create($property_list);

        //Update Form
        require_once('report/form_logic.csp');
        $form_logic = GRN_Report_Form_Logic::getInstance();
        $form_logic->update($form_id);

        return $item_id;
    }

    /**
     * Modify Item
     *
     * @return int    $item_id                   //Item ID
     *
     * @param  int    $form_id              //Form ID
     * @param  string $data_type            //Data Type
     * @param  string $display_name         //Foreign Key
     * @param  array  $option_settings      //Settings for Option String
     * @param  array  $description_settings //Settings for Description
     * @param  array  $item_settings        //Settings for Item
     * @param  int    $required             //Required Flag
     *
     * @return int    $item_id                   //Item ID
     */
    function modify(
        $item_id,
        $form_id,
        $data_type,
        $display_name,
        $option_settings,
        $description_settings,
        $item_settings = [],
        $required = 0
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        cb_trim_check($item_id,
            E_GRN_RPRT_ITEM_INVALID_ID);                //Item ID
        cb_trim_check($form_id,
            E_GRN_RPRT_FORM_INVALID_ID);                //Form ID
        cb_trim_check($data_type,
            E_GRN_RPRT_ITEM_INVALID_DATA_TYPE);           //Data Type
        cb_trim_check($display_name,
            E_GRN_RPRT_ITEM_NOT_INPUT_NECESSARY);       //Display Name

        //Check Item Data Type
        require_once('report/item_resources.csp');
        $item_util =& grn_report_get_item_util($data_type);
        if ( ! $item_util) {
            //Invalid Data Type
            cb_throw_error(E_GRN_RPRT_ITEM_INVALID_DATA_TYPE);
        }

        //Serialize Settings
        $serialized_settings = serialize($item_settings);

        //Create Property List
        $property_list = [
            GRN_REPORT_COLUMN_DISPLAY_NAME => $display_name,
            GRN_REPORT_COLUMN_FORM         => $form_id,
            GRN_REPORT_COLUMN_DATA_TYPE    => $data_type,
            GRN_REPORT_COLUMN_ITEM         => $item_id,
            GRN_REPORT_COLUMN_SETTINGS     => $serialized_settings,
            GRN_REPORT_COLUMN_REQUIRED     => $required,
        ];

        //Set Option Settings
        if (is_array($option_settings)) {
            foreach (array_keys($option_settings) as $key) {
                $col_name = 'col_' . $key;
                if ($col_name == GRN_REPORT_COLUMN_OPTION_STRING_TYPE
                    || $col_name == GRN_REPORT_COLUMN_OPTION_STRING
                ) {
                    $property_list[$col_name] = $option_settings[$key];
                }
            }
        }

        //Set Description Settings
        if (is_array($description_settings)) {
            foreach (array_keys($description_settings) as $key) {
                $col_name = 'col_' . $key;
                if ($col_name == GRN_REPORT_COLUMN_DESCRIPTION
                    || $col_name == GRN_REPORT_COLUMN_DESCRIPTION_TYPE
                    || $col_name == GRN_REPORT_COLUMN_DESCRIPTION_EDITOR
                ) {
                    $property_list[$col_name] = $description_settings[$key];
                }
            }
            if (array_key_exists(GRN_REPORT_COLUMN_DESCRIPTION, $property_list)
                && array_key_exists(GRN_REPORT_COLUMN_DESCRIPTION_EDITOR,
                    $property_list)
                && $property_list[GRN_REPORT_COLUMN_DESCRIPTION_EDITOR] == 1
            ) {
                require_once('grn/controller.csp');
                $property_list[GRN_REPORT_COLUMN_DESCRIPTION]
                    = grn_wash_script_without_style_attribute($property_list[GRN_REPORT_COLUMN_DESCRIPTION]);
            }
        }

        //Set Modifier
        GRN_Report_Table_Manager::setModifier($property_list);

        //Update Item
        $item_manager = GRN_Report_Item_Manager::getInstance();
        $ret = $item_manager->update($item_id, $property_list);

        //Update Form
        require_once('report/form_logic.csp');
        $form_logic = GRN_Report_Form_Logic::getInstance();
        $form_logic->update($form_id);

        if ($ret) {
            return $item_id;
        } else {
            return false;
        }
    }

    /**
     * Delete Item
     *
     * @param int  $item_id //Item ID
     * @param BOOL $result  //Result
     */
    function delete($item_id)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        cb_trim_check($item_id, E_GRN_RPRT_ITEM_INVALID_ID);        //Item ID

        //Remove Item
        $item_manager = GRN_Report_Item_Manager::getInstance();
        $item_manager->remove($item_id);

        return true;
    }

    /**
     * Delete Multiple Item
     *
     * @param  array $item_id_list //Item ID List
     *
     * @return BOOL   $result                    //Result
     */
    function deleteMulti($item_id_list)
    {
        //Check Argument
        if ( ! is_array($item_id_list)) {
            //Not Input Necessary
            require_once('report/error_code.csp');
            cb_throw_error(E_GRN_RPRT_ITEM_NOT_INPUT_NECESSARY);
        }

        //Get Fiest Item
        $item_id = current($item_id_list);
        $item = $this->getDirect($item_id);

        //Remove Item
        $item_manager = GRN_Report_Item_Manager::getInstance();
        $item_manager->removeMulti($item_id_list);

        //Update Form
        require_once('report/form_logic.csp');
        $form_logic = GRN_Report_Form_Logic::getInstance();
        $form_logic->update($item['col_form']);

        return true;
    }

    /**
     * Delete All Item
     *
     * @param  int $form_id //Form ID
     *
     * @return BOOL   $result                    //Result
     */
    function deleteAll($form_id = null)
    {
        //Remove Item
        $item_manager = GRN_Report_Item_Manager::getInstance();
        $item_manager->removeAll($form_id);

        //Update Form
        require_once('report/form_logic.csp');
        $form_logic = GRN_Report_Form_Logic::getInstance();
        $form_logic->update($form_id);

        return true;
    }

    /**
     * Change Item Order
     *
     * @param int  $item_id_list //Item ID List
     * @param BOOL $result       //Result
     */
    function changeOrder($item_id_list)
    {
        //Check Argument
        if ( ! is_array($item_id_list)) {
            require_once('fw/string_util.csp');
            require_once('report/error_code.csp');
            cb_throw_error(E_GRN_RPRT_ITEM_NOT_INPUT_NECESSARY);
        }

        //Get Fiest Item
        $item_id = current($item_id_list);
        $item = $this->getDirect($item_id);

        //Change Order
        $item_manager = GRN_Report_Item_Manager::getInstance();
        $item_manager->changeOrder($item_id_list, 1);

        //Update Form
        require_once('report/form_logic.csp');
        $form_logic = GRN_Report_Form_Logic::getInstance();
        $form_logic->update($item['col_form']);

        return true;
    }

    /**
     * Copy Multiple Item
     *
     * @param  array $item_id_list //Item ID List
     * @param  int   $form_id      //Form ID
     * @param  int   $new_form_id  //New Form ID
     *
     * @return BOOL   $result                    //Result
     */
    function copyMulti(
        $item_id_list,
        $form_id = null,
        $new_form_id = null,
        $copy_applicant_access = false
    ) {
        //Check Argument
        if ( ! is_array($item_id_list)) {
            //Not Input Necessary
            require_once('report/error_code.csp');
            cb_throw_error(E_GRN_RPRT_ITEM_NOT_INPUT_NECESSARY);
        }

        //Get Item List
        $item_manager = GRN_Report_Item_Manager::getInstance();
        $item_list =& $item_manager->getList($form_id);

        //Create Item ID Map
        $item_id_map = [];
        foreach (array_keys($item_list) as $item_id) {
            $item_id_map[$item_id] = $item_id;
        }

        //Copy Item List
        foreach ($item_id_list as $item_id) {
            $item = $item_list[$item_id];

            //Unset _id Property
            unset($item['_id']);

            //Change Display Name
            if ($item[GRN_REPORT_COLUMN_TYPE] == 0 && is_null($new_form_id)) {
                $item[GRN_REPORT_COLUMN_DISPLAY_NAME]
                    = cb_plain_msg(GRN_REPORT_MODULE_ID, 'copy_format',
                    ['copy_name' => $item[GRN_REPORT_COLUMN_DISPLAY_NAME]]);
            }

            //Set New Form
            if ( ! is_null($new_form_id)) {
                $item[GRN_REPORT_COLUMN_FORM] = $new_form_id;
            } else {
                //Unset List Index
                unset($item[GRN_REPORT_COLUMN_LIST_INDEX]);
            }

            if ($copy_applicant_access == false) {
                $item[GRN_REPORT_COLUMN_ATTACH_FILE] = 1;
                $item[GRN_REPORT_COLUMN_ATTACH_FILE_VIEW] = 1;
            }

            //Change Creator
            GRN_Report_Table_Manager::setCreator($property_list);

            //Add Item
            $item_id_map[$item_id] = $item_manager->create($item);
        }

        //Update Form
        if (isset($item_id) && is_null($new_form_id)) {
            if (array_key_exists($item_id, $item_list)) {
                $item =& $item_list[$item_id];
                require_once('report/form_logic.csp');
                $form_logic = GRN_Report_Form_Logic::getInstance();
                $form_logic->update($item['col_form']);
            }
        }

        //Return Item ID Map
        return $item_id_map;
    }

    /**
     * Set Attache File
     *
     * @return int    $item_id                   //Item ID
     *
     * @param  int $attach_file //Attach File Flag
     *
     * @return int    $item_id                   //Item ID
     */
    function setAttachFile($item_id, $attach_file, $attach_file_view = null)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        cb_trim_check($item_id,
            E_GRN_RPRT_ITEM_INVALID_ID);            //Item ID

        //Create Property List
        $property_list = [
            GRN_REPORT_COLUMN_ATTACH_FILE      => $attach_file,
            GRN_REPORT_COLUMN_ATTACH_FILE_VIEW => $attach_file_view,
        ];

        //Update Item
        $item_manager = GRN_Report_Item_Manager::getInstance();
        $item_id = $item_manager->update($item_id, $property_list);

        //Update Form
        $item = $this->getDirect($item_id);
        require_once('report/form_logic.csp');
        $form_logic = GRN_Report_Form_Logic::getInstance();
        $form_logic->update($item['col_form']);

        return $item_id;
    }

    /**
     * Add Item By Import
     *
     * @param  int   $form_id       //Form ID
     * @param  array $property_list //Item Information
     *
     * @return int                              //Item ID
     */
    function addByImport($form_id, $property_list)
    {
        //Create Property List
        $property_list[GRN_REPORT_COLUMN_FORM] = $form_id;

        //Set Creator
        GRN_Report_Table_Manager::setCreator($property_list);

        //Create New Item
        $item_manager = GRN_Report_Item_Manager::getInstance();
        $item_id = $item_manager->create($property_list);

        return $item_id;
    }

    /**
     * Modify Item by Import File
     *   Caution! Some of fields will be updated unless they aren't passed values.
     *
     * @return int    $item_id                   //Item ID
     *
     * @param  int   $form_id       //Form ID
     * @param  array $property_list //Item Property List
     *
     * @return int    $item_id                   //Item ID
     */
    function modifyByImport($item_id, $form_id, $property_list)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('report/error_code.csp');
        cb_trim_check($item_id,
            E_GRN_RPRT_ITEM_INVALID_ID);                        //Item ID

        $item_type
            = $property_list['col_type'];                                      //Item Type(0,1,2)
        if (0 > $item_type || 2 < $item_type) {
            cb_throw_error();
        }

        if (GRN_REPORT_ITEM_TYPE_ITEM
            == $item_type
        )                                //Display Name
        {
            cb_trim_check($property_list['col_display_name'],
                E_GRN_RPRT_ITEM_NOT_INPUT_NECESSARY);
        }

        //Create Property List
        $property_list[GRN_REPORT_COLUMN_FORM] = $form_id;

        //Set Modifier
        GRN_Report_Table_Manager::setModifier($property_list);

        //Update Item
        $item_manager = GRN_Report_Item_Manager::getInstance();
        $item_id = $item_manager->update($item_id, $property_list);

        return $item_id;
    }

    /**
     * Check is include standard item
     *
     * @param       $form_id
     * @param array $item_list
     *
     * @return bool
     */
    public function checkIsIncludeStandardItem($form_id, $item_list)
    {
        $standard_item = $this->getStandardItemIid($form_id);
        if (in_array($standard_item, $item_list)) {
            require_once('report/error_code.csp');
            cb_throw_error(E_GRN_RPRT_ITEM_INVALID_ID);
        }

        return true;
    }
}


