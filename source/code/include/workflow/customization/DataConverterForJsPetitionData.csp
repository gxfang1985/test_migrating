<?php

namespace grn\workflow\customization;

use grn\workflow\bean\CustomizationJsApplicant;
use grn\workflow\bean\CustomizationJsItem;
use grn\workflow\bean\CustomizationJsProcessor;
use grn\workflow\bean\CustomizationJsStep;
use grn\workflow\bean\CustomizationJsPetition;
use grn\workflow\CustomizationUtil;


class DataConverterForJsPetitionData
{

    /**
     * @param array  $petition
     * @param array  $items
     * @param array  $pathSteps
     * @param string $priority
     *
     * @return array
     */
    public static function covertDataPetitionInformation(
        $petition,
        $items,
        $pathSteps,
        $priority
    ) {
        $customizationPetition = new CustomizationJsPetition();
        if ( ! is_null($petition)) {
            $petition_name = cb_at($petition, 'form_name', '')
                             . cb_msg(GRN_WORKFLOW_MODULE_ID,
                    'opened_parenthesis', null)
                             . cb_at($petition, 'name', '')
                             . cb_msg(GRN_WORKFLOW_MODULE_ID,
                    'closed_parenthesis', null);

            $customizationPetition->setId($petition['pid']);
            $customizationPetition->setStatus($petition['status']);
            $customizationPetition->setCreatedAt($petition['ctime']);

            $controller_util = new \GRN_Workflow_ControllerUtil();
            $path_steps_current = current($pathSteps);
            $path_step_id
                = $controller_util->getInProcessPathStepId($path_steps_current);
            if ($path_step_id) {
                $customizationPetition->setProcessingStepCode($pathSteps[$path_step_id]['col_code']);
            }

            $customizationPetition->setName($petition_name);
            $customizationPetition->setNumber($petition['petition_number']);

            $customizationPetition->setApplicant(DataConverterForJsPetitionData::getPetitionApplicant($petition));

            $operation_info
                = CustomizationUtil::getPathInfoForOperations($petition,
                $pathSteps);
            $has_operation = false;
            $customizationPetition->setFolders(DataConverterForJsPetitionData::convertFolders($petition,
                $operation_info, $has_operation));
            if ($has_operation) {
                $customizationPetition->setAvailableOperations(DataConverterForJsPetitionData::convertAvailableOperations($petition,
                    $pathSteps, $operation_info));
            }


        }
        if ( ! is_null($items)) {
            $customizationPetition->setItems(DataConverterForJsPetitionData::convertItems($items));
        }
        if ( ! is_null($pathSteps)) {
            $customizationPetition->setSteps(DataConverterForJsPetitionData::convertPathStep($pathSteps,
                $petition));
        }

        $customizationPetition->setIsUrgent($priority);

        $hide_login_name = !cb_lwc_uum()->isForeignKeyPublic();

        return CustomizationJsPetition::toArray($customizationPetition,
            $hide_login_name);

    }

    /**
     * @param $petition
     *
     * @return CustomizationJsApplicant
     */
    private static function getPetitionApplicant($petition): CustomizationJsApplicant
    {
        $applicant_code = '';
        $applicant_name = $petition['user_name'];
        $uum = cb_lwc_uum();
        if (cb_at($petition, 'user')) {
            $applicant_code = $petition['user_foreign_key'];
            $applicant = $uum->getUser($petition['user']);
            if ($applicant) {
                $applicant_code = $applicant->get('foreign_key');
                $applicant_name = $applicant->get('display_name');
            }

        }
        $applicant_data = new CustomizationJsApplicant();
        $applicant_data->setCode($applicant_code);
        $applicant_data->setName($applicant_name);

        if (cb_at($petition, 'agent_user')
            || cb_at($petition, 'agent_user_name')
        ) {
            $agent_applicant_code = '';
            $agent_applicant_name = $petition['agent_user_name'];
            if (cb_at($petition, 'agent_user')) {
                $agent_applicant_code = $petition['agent_user_foreign_key'];
                $agent_applicant = $uum->getUser($petition['agent_user']);
                if ($agent_applicant) {
                    $agent_applicant_code
                        = $agent_applicant->get('foreign_key');
                    $agent_applicant_name
                        = $agent_applicant->get('display_name');
                }

            }
            $applicant_data->setProxy([
                'code' => $agent_applicant_code,
                'name' => $agent_applicant_name
            ]);
        }

        return $applicant_data;

    }

    /**
     * @param array $items
     *
     * @return CustomizationJsItem[]
     */
    public static function convertItems(array $items)
    {
        $items_data_for_js = [];
        $items_convert = [];
        foreach ($items as $item) {
            $sub_items = null;
            if (cb_at($item, 'sub_item_list')) {
                $sub_items = cb_at($item, 'sub_item_list');
            } elseif (cb_at($item, 'sub_item_data_list')) {
                $sub_items = cb_at($item, 'sub_item_data_list');
            }
            $items_convert[] = $item;
            if (is_array($sub_items) && count($sub_items) > 0) {
                foreach ($sub_items as $sub_item) {
                    $items_convert[] = $sub_item;
                }
            }
        }
        foreach ($items_convert as $item) {

            switch ($item['foreign_key']) {
                case 'grn.workflow.string_single':
                    $items_data_for_js[$item['code']]
                        = self::convertForStringSingle($item);
                    break;
                case 'grn.workflow.string_multiple':
                    $items_data_for_js[$item['code']]
                        = self::convertForStringMultiple($item);
                    break;
                case 'grn.workflow.menu_string':
                    $items_data_for_js[$item['code']]
                        = self::convertForMenuString($item);
                    break;
                case 'grn.workflow.radio':
                    $items_data_for_js[$item['code']]
                        = self::convertForRadio($item);
                    break;
                case 'grn.workflow.checkbox':
                    $items_data_for_js[$item['code']]
                        = self::convertForCheckbox($item);
                    break;
                case 'grn.workflow.numeric':
                    $items_data_for_js[$item['code']]
                        = self::convertForNumeric($item);
                    break;
                case 'grn.workflow.calc_numeric':
                    $items_data_for_js[$item['code']]
                        = self::convertForCalcNumeric($item);
                    break;
                case 'grn.workflow.date':
                    $items_data_for_js[$item['code']]
                        = self::convertForDate($item);
                    break;
                case 'grn.workflow.file':
                    $items_data_for_js[$item['code']]
                        = self::convertForFile($item);
                    break;
                case 'grn.workflow.route_search':
                    $items_data_for_js[$item['code']]
                        = self::convertForRouteSearch($item);
                    break;
                default:
                    break;
            }

        }

        return $items_data_for_js;
    }

    /**
     * @param array $path_steps
     * @param array $petition
     *
     * @return CustomizationJsStep[]
     */
    public static function convertPathStep($path_steps, $petition)
    {
        require_once('cbpapi/util.csp');

        $step_data_for_js = [];
        $uum = cb_lwc_uum();

        foreach ($path_steps as $step) {

            if ( ! $step['col_activate']) {
                continue;
            }
            $step_data = new CustomizationJsStep();
            $step_data->setId($step['_id']);
            $step_data->setName($step['col_role']);
            if (GRN_WORKFLOW_CIRCULAR == $step['col_type']) {
                $requirement = cb_msg(GRN_WORKFLOW_MODULE_ID,
                    'pass_along');
                $is_approval_step = 0;
            } else {
                $requirement = cb_msg(GRN_WORKFLOW_MODULE_ID,
                    'col_acceptance_type_' . $step['col_acceptance_type']);
                $is_approval_step = 1;
            }
            $step_data->setRequirement($requirement);
            $step_data->setIsApprovalStep($is_approval_step);
            $processors = [];

            if (is_array($step['users']) && count($step['users']) > 0) {
                foreach ($step['users'] as $user) {
                    $processor = new CustomizationJsProcessor();
                    if ($user['_id'] == '0') {
                        $processor->setName(cb_msg(GRN_WORKFLOW_MODULE_ID,
                            'skip'));
                        $processor->setResult(cb_msg(GRN_WORKFLOW_MODULE_ID,
                            'skip_result'));
                        $processors[] = $processor;
                        break;
                    }
                    if (is_null($petition)) {
                        $code = $user['col_foreign_key'];
                        $name = $user['col_display_name'];
                    } else {
                        $code = cb_at($user, 'col_user')
                            ? $user['col_foreign_key'] : '';
                        $name = cb_at($user, 'col_display_name')
                            ? $user['col_display_name'] : '';
                    }
                    $processor->setCode($code);
                    $processor->setName($name);
                    if (cb_at($user, 'col_agent_user')
                        || cb_at($user, 'col_agent_display_name')
                    ) {
                        $agent_approver_code = '';
                        $agent_approver_name = $user['col_agent_display_name'];
                        if (cb_at($user, 'col_agent_user')) {
                            $agent_approver_code
                                = $user['col_agent_foreign_key'];
                            $agent_aprrover
                                = $uum->getUser($user['col_agent_user']);
                            if ($agent_aprrover) {
                                $agent_approver_code
                                    = $agent_aprrover->get('foreign_key');
                                $agent_approver_name
                                    = $agent_aprrover->get('display_name');
                            }
                        }
                        $proxy = [
                            "code" => $agent_approver_code,
                            'name' => $agent_approver_name
                        ];
                        $processor->setProxy($proxy);
                    }
                    if (is_null($petition)) {
                        $processors[] = $processor;
                        continue;
                    }
                    //if approver approved request, the result/operation time/ comment is display in request data
                    if (cb_at($user, 'col_ptime')) {
                        $processor->setResult(cb_msg(GRN_WORKFLOW_MODULE_ID,
                            'col_result_' . cb_at($user, 'col_result')));
                        $processor->setOperatedAt(cb_at($user, 'col_ptime'));
                    }
                    $comment = '';
                    if (isset($user['col_comment']['current'])) {
                        $comment = $user['col_comment']['current'];
                    }
                    if (isset($user['col_comment']['log_total'])
                        && strlen($user['col_comment']['log_total']) > 0
                    ) {
                        foreach ($user['col_comment']['logs'] as $log) {
                            $operation_date
                                = grn_cbpapi_iso8601($log['col_ptime']);
                            $operation = cb_msg(GRN_WORKFLOW_MODULE_ID,
                                'col_result_' . $log['col_result']);
                            $more_info = '';
                            if ($log['col_agent']) {
                                $more_info .= $log['col_agent']
                                    ? cb_msg(GRN_WORKFLOW_MODULE_ID,
                                        'per_pro_accept_bracket')
                                      . $log['col_agent_name']
                                      . cb_msg(GRN_WORKFLOW_MODULE_ID,
                                        'closed_parenthesis') : '';
                            }
                            if ($log['col_result']
                                == GRN_WORKFLOW_RESULT_REMAND
                            ) {
                                if ($log['destination'] == 'applicant') {
                                    $more_info .= cb_msg(GRN_WORKFLOW_MODULE_ID,
                                        'applicant_bracket_arrow');
                                } else {
                                    $destination = $log['destination'];
                                    $more_info .= cb_msg(GRN_WORKFLOW_MODULE_ID,
                                            'bracket_arrow_right')
                                                  . $path_steps[$destination]['col_role']
                                                  . cb_msg(GRN_WORKFLOW_MODULE_ID,
                                            'closed_parenthesis');
                                }

                            }
                            $comment .= strlen($comment) > 0 ? '\n' : '';
                            $comment .= $operation_date . ' ' . $operation;
                            $comment .= strlen($more_info) > 0 ? ' '
                                                                 . $more_info
                                : '';
                            $comment .= strlen($log['col_comment']) > 0 ? '\n'
                                                                          . $log['col_comment']
                                : '';
                            if ($log !== end($user['col_comment']['logs'])) {
                                $comment .= '\n';
                            }

                        }
                    }
                    if (strlen($comment) > 0) {
                        $processor->setComment($comment);
                    }

                    $processors[] = $processor;
                }

            } else {
                $processor = new CustomizationJsProcessor();
                $processor->setName(cb_msg(GRN_WORKFLOW_MODULE_ID, 'skip'));
                $processor->setResult(cb_msg(GRN_WORKFLOW_MODULE_ID,
                    'skip_result'));
                $processors[] = $processor;
            }

            $step_data->setProcessors($processors);
            $step_data_for_js[$step['col_code']] = $step_data;
        }

        return $step_data_for_js;
    }

    /**
     * @param int $status
     *
     * @return array
     */
    public static function convertStatus($status)
    {
        $customizationPetition = new CustomizationJsPetition();
        $customizationPetition->setStatus($status);

        return $customizationPetition->getStatus();
    }

    /**
     * @param array $item
     *
     * @return CustomizationJsItem
     */
    protected static function convertForStringSingle($item)
    {
        $item_for_js = new CustomizationJsItem();
        $item_text = '';

        if (array_key_exists('text', $item)) {
            $item_text = $item['text'];
        } else {
            //Get Initial Value From Settings
            if ($item['settings']['initial_type'] == 0) {
                //Get Text Value From Settings
                $item_text = $item['settings']['initial_text_value'];
            } else {
                //User Information
                require_once('grn/sso.csp');

                $id_list = ['user' => cb_get_login_user()->getOID()];
                $sso_service = \GRN_SSO_Service::getInstance();
                $identifier_list = $sso_service->getIdentifierValueList('uum',
                    $id_list);

                $uum = cb_lwc_uum();
                $prefix = '%grn.common.uum.user.';

                if (array_key_exists($item['settings']['initial_user_value'],
                        $identifier_list)
                    && strpos($item['settings']['initial_user_value'], $prefix)
                       === 0
                ) {
                    $identifier_items = explode('.',
                        $item['settings']['initial_user_value']);
                    switch ($identifier_items[4]) {
                        case 'extension':
                            //Extension Item
                            $item_id = str_replace('%', '',
                                $identifier_items[5]);
                            $item_property = $uum->getItemByKey($item_id);
                            $use = $item_property->get('use');
                            if ($use) {
                                $item_text
                                    = $identifier_list[$item['settings']['initial_user_value']];
                            }
                            break;
                        case 'userinfo':
                            //Extention Item
                            $item_id = str_replace('%', '',
                                $identifier_items[5]);
                            $item_property
                                = &$uum->getDefaultItemProperty($item_id);
                            if (array_key_exists('use', $item_property)
                                && $item_property['use']
                            ) {
                                $item_text
                                    = $identifier_list[$item['settings']['initial_user_value']];
                            }
                            break;
                        default:
                            //Default Item
                            $item_id = str_replace('%', '',
                                $identifier_items[4]);
                            if (strcmp($item_id, 'id') === 0) {
                                $item_text
                                    = $identifier_list[$item['settings']['initial_user_value']];
                            } else {
                                $item_property
                                    = &$uum->getDefaultItemProperty($item_id);
                                if (array_key_exists('use', $item_property)
                                    && $item_property['use']
                                ) {
                                    $item_text
                                        = $identifier_list[$item['settings']['initial_user_value']];
                                }
                            }
                            break;
                    }

                }
            }
        }
        $item_for_js->setName($item['display_name']);
        $item_for_js->setType(CustomizationJsItem::ITEM_TYPE_SINGLE_LINE_TEXT);
        if (isset($item['view_mode']) || isset($item['view_mode_print'])) {
            if (cb_at($item, 'view_mode') == 'disable'
                || cb_at($item, 'view_mode_print') == 'disable'
            ) {
                $item_text = '';
            }
        } elseif ($item['attach_file_view'] != 1) {
            $item_text = '';
        }

        $item_for_js->setValue($item_text);

        return $item_for_js;
    }

    /**
     * @param array $item
     *
     * @return CustomizationJsItem
     */
    protected static function convertForStringMultiple($item)
    {
        $item_for_js = new CustomizationJsItem();
        if ( ! array_key_exists('text', $item)) {
            //Get Initial Value From Settings
            $item['text'] = cb_at($item['settings'], 'initial_value', '');
        }
        $item_for_js->setName($item['display_name']);
        $item_for_js->setType(CustomizationJsItem::ITEM_TYPE_MULTI_LINE_TEXT);
        if (isset($item['view_mode']) || isset($item['view_mode_print'])) {
            if (cb_at($item, 'view_mode') == 'disable'
                || cb_at($item, 'view_mode_print') == 'disable'
            ) {
                $item['text'] = '';
            }
        } elseif ($item['attach_file_view'] != 1) {
            $item['text'] = '';
        }
        $item_for_js->setValue($item['text']);

        return $item_for_js;
    }

    /**
     * @param array $item
     *
     * @return CustomizationJsItem
     */
    protected static function convertForMenuString($item)
    {
        $item_for_js = new CustomizationJsItem();
        if ( ! array_key_exists('text', $item)) {
            //Get Initial Value From Settings
            $item['text'] = cb_at($item['settings'], 'initial_value', '');
        }
        $item_for_js->setName($item['display_name']);
        $item_for_js->setType(CustomizationJsItem::ITEM_TYPE_DROP_DOWN);
        if (isset($item['view_mode']) || isset($item['view_mode_print'])) {
            if (cb_at($item, 'view_mode') == 'disable'
                || cb_at($item, 'view_mode_print') == 'disable'
            ) {
                $item['text'] = '';
            }
        } elseif ($item['attach_file_view'] != 1) {
            $item['text'] = '';
        }

        $item_for_js->setValue($item['text']);

        return $item_for_js;
    }

    /**
     * @param array $item
     *
     * @return CustomizationJsItem
     */
    protected static function convertForRadio($item)
    {
        $item_for_js = new CustomizationJsItem();
        if ( ! array_key_exists('text', $item)) {
            //Get Initial Value From Settings
            $item['text'] = cb_at($item['settings'], 'initial_value', '');
        }
        $item_for_js->setName($item['display_name']);
        $item_for_js->setType(CustomizationJsItem::ITEM_TYPE_RADIO_BUTTON);
        if (isset($item['view_mode']) || isset($item['view_mode_print'])) {
            if (cb_at($item, 'view_mode') == 'disable'
                || cb_at($item, 'view_mode_print') == 'disable'
            ) {
                $item['text'] = '';
            }
        } elseif ($item['attach_file_view'] != 1) {
            $item['text'] = '';
        }
        $item_for_js->setValue($item['text']);

        return $item_for_js;
    }

    /**
     * @param array $item
     *
     * @return CustomizationJsItem
     */
    protected static function convertForCheckbox($item)
    {
        $item_for_js = new CustomizationJsItem();
        if ( ! array_key_exists('number', $item)) {
            //Get Initial Value From Settings
            $item['number'] = cb_at($item['settings'], 'initial_value', 0);
        }
        $isChecked = $item['number'] == 1;
        $item_for_js->setName($item['display_name']);
        $item_for_js->setType(CustomizationJsItem::ITEM_TYPE_CHECK_BOX);
        if (isset($item['view_mode']) || isset($item['view_mode_print'])) {
            if (cb_at($item, 'view_mode') == 'disable'
                || cb_at($item, 'view_mode_print') == 'disable'
            ) {
                $isChecked = '';
            }
        } elseif ($item['attach_file_view'] != 1) {
            $isChecked = '';
        }
        $item_for_js->setValue($isChecked);

        return $item_for_js;
    }

    /**
     * @param array $item
     *
     * @return CustomizationJsItem
     */
    protected static function convertForNumeric($item)
    {
        $item_for_js = new CustomizationJsItem();
        if (array_key_exists('number', $item)
            && strlen(trim($item['number']))
        ) {
            require_once('workflow/item_resources.csp');
            $item['number']
                = \GRN_Workflow_Item_Util_Calc_Numeric::formatValueForJS($item['number'],
                $item['settings']);
        } else {
            $item['number'] = cb_at($item['settings'], 'initial_value', '');
        }
        $item_for_js->setName($item['display_name']);
        $item_for_js->setType(CustomizationJsItem::ITEM_TYPE_NUMBER);
        if (isset($item['view_mode']) || isset($item['view_mode_print'])) {
            if (cb_at($item, 'view_mode') == 'disable'
                || cb_at($item, 'view_mode_print') == 'disable'
            ) {
                $item['number'] = '';
            }
        } elseif ($item['attach_file_view'] != 1) {
            $item['number'] = '';
        }

        $item_for_js->setValue($item['number']);

        return $item_for_js;
    }

    /**
     * @param array $item
     *
     * @return CustomizationJsItem
     */
    protected static function convertForCalcNumeric($item)
    {
        $item_for_js = new CustomizationJsItem();
        if (array_key_exists('number', $item)
            && strlen(trim($item['number']))
        ) {
            require_once('workflow/item_resources.csp');
            $item['number']
                = \GRN_Workflow_Item_Util_Calc_Numeric::formatValueForJS($item['number'],
                $item['settings']);
        } else {
            $item['number'] = cb_at($item['settings'], 'initial_value', '');
        }
        $item_for_js->setName($item['display_name']);
        $item_for_js->setType(CustomizationJsItem::ITEM_TYPE_CALC);
        if (isset($item['view_mode']) || isset($item['view_mode_print'])) {
            if (cb_at($item, 'view_mode') == 'disable'
                || cb_at($item, 'view_mode_print') == 'disable'
            ) {
                $item['number'] = '';
            }
        } elseif ($item['attach_file_view'] != 1) {
            $item['number'] = '';
        }
        $item_for_js->setValue($item['number']);

        return $item_for_js;
    }

    /**
     * @param array $item
     *
     * @return CustomizationJsItem
     */
    protected static function convertForDate($item)
    {
        $item_for_js = new CustomizationJsItem();
        if ( ! isset($item['settings']['date_type'])
             || is_null($item['settings']['date_type'])
             || $item['settings']['date_type'] == ''
        ) {
            $item['settings']['date_type'] = 0;
        }

        if ( ! array_key_exists('text', $item)) {
            $item['text'] = [];

            //Get Initial Value From Sttings
            if ($item['settings']['initial_type'] == 0) {
                $tsex = new \CB_TimeStampEx();
                $date = $tsex->getDate();
                $item['text']['year'] = $date->year;
                $item['text']['month'] = $date->month;
                $item['text']['day'] = $date->day;
                if ($item['settings']['date_type'] == 1) {
                    $time = $tsex->getTime();
                    $item['text']['hour']
                        = $item['text']['hour'] = $time->hour;
                    $item['text']['minute']
                        = $item['text']['minuNte'] = $time->minute;
                }
            } else {
                $item['text']['year'] = cb_at($item['settings'],
                    'initial_year', '');
                $item['text']['month'] = cb_at($item['settings'],
                    'initial_month', '');
                $item['text']['day'] = cb_at($item['settings'], 'initial_day',
                    '');
                if ($item['settings']['date_type'] == 1) {
                    $item['text']['hour'] = cb_at($item['settings'],
                        'initial_hour', '');
                    $item['text']['minute'] = cb_at($item['settings'],
                        'initial_minute', '');
                }
            }

        } else {
            //Unserialize Text
            $item['text'] = cb_unserialize($item['text']);
        }

        $year = cb_at($item['text'], 'year', '');
        $month = cb_at($item['text'], 'month', '');
        $day = cb_at($item['text'], 'day', '');

        $year_text = $year == '' ? '' : sprintf('%04d', $year);
        $month_text = $month == '' ? '' : sprintf('%02d', $month);
        $day_text = $day == '' ? '' : sprintf('%02d', $day);

        $date = $year_text . '-' . $month_text . '-' . $day_text;
        $item_value = '';
        if ($item['settings']['date_type'] == 0) {
            $item_value = $date;
            $item_for_js->setType(CustomizationJsItem::ITEM_TYPE_DATE);
        } else {
            $hour = cb_at($item['text'], 'hour', '');
            $minute = cb_at($item['text'], 'minute', '');
            $hour_text = $hour == '' ? '' : sprintf('%02d', $hour);
            $minute_text = $minute == '' ? '' : sprintf('%02d', $minute);
            $time_text = $hour_text . ':' . $minute_text;
            $item_value = ['date' => $date, 'time' => $time_text];
            $item_for_js->setType(CustomizationJsItem::ITEM_TYPE_DATETIME);
        }
        if (isset($item['view_mode']) || isset($item['view_mode_print'])) {
            if (cb_at($item, 'view_mode') == 'disable'
                || cb_at($item, 'view_mode_print') == 'disable'
            ) {
                $item_value = '';
            }
        } elseif ($item['attach_file_view'] != 1) {
            $item_value = '';
        }

        $item_for_js->setValue($item_value);
        $item_for_js->setName($item['display_name']);

        return $item_for_js;
    }

    /**
     * @param array $item
     *
     * @return CustomizationJsItem
     */
    protected static function convertForFile($item)
    {
        $item_for_js = new CustomizationJsItem();
        $item_for_js->setName($item['display_name']);
        $item_for_js->setType(CustomizationJsItem::ITEM_TYPE_FILE);
        if ( ! array_key_exists('files', $item) || ! is_array($item['files'])) {
            $item_for_js->setValue('');

            return $item_for_js;
        }

        $files_data = [];
        foreach ($item['files'] as $file) {
            if ( ! array_key_exists('mime', $file)) {
                $mime = '';
                $ext = substr(strrchr($file['name'], '.'), 1);
                if ($ext !== false) {
                    require_once('grn/mime.csp');
                    $mcm = \GRN_MIMEConfigManager::getInstance();
                    $mime = $mcm->getMIMEType($ext);
                }
                if ( ! is_string($mime) || strlen($mime) == 0) {
                    $mime = 'application/octet-stream';
                }
                $file['mime'] = $mime;
            }

            $files_data[] = [
                'id'          => cb_at($file, 'id', ''),
                'name'        => $file['name'],
                'size'        => $file['size'],
                'contentType' => $file['mime']
            ];

        }

        if (isset($item['view_mode']) || isset($item['view_mode_print'])) {
            if (cb_at($item, 'view_mode') == 'disable'
                || cb_at($item, 'view_mode_print') == 'disable'
            ) {
                $files_data = '';
            }
        } elseif ($item['attach_file_view'] != 1) {
            $files_data = '';
        }

        $item_for_js->setValue($files_data);

        return $item_for_js;
    }

    /**
     * @param array $item
     *
     * @return CustomizationJsItem
     */
    protected static function convertForRouteSearch($item)
    {

        if ($item['settings']['search_type'] == 0) {
            $data = [
                'route'   => cb_at($item, 'text', ''),
                'expense' => cb_at($item, 'number', '')
            ];
        } elseif ($item['settings']['search_type'] == 1) {
            $data = ['route' => cb_at($item, 'text', '')];
        } else {
            $data = ['expense' => cb_at($item, 'number', '')];
        }

        $item_for_js = new CustomizationJsItem();
        $item_for_js->setName($item['display_name']);
        $item_for_js->setType(CustomizationJsItem::ITEM_TYPE_ROUTE_NAVI);
        if (isset($item['view_mode']) || isset($item['view_mode_print'])) {
            if (cb_at($item, 'view_mode') == 'disable'
                || cb_at($item, 'view_mode_print') == 'disable'
            ) {
                $data = '';
            }
        } elseif ($item['attach_file_view'] != 1) {
            $data = '';
        }

        $item_for_js->setValue($data);

        return $item_for_js;
    }

    /**
     * @param array $petition
     * @param array $operation_info
     * @param bool  $has_operation
     *
     * @return array|null
     */
    protected static function convertFolders(
        $petition,
        &$operation_info,
        &$has_operation
    ) {
        $user_id = isset($petition['proxy_approver_id'])
            ? $petition['proxy_approver_id'] : cb_get_login_user()->getOID();
        $cancel_confirm = $operation_info['cancel_confirm'];
        $folders = null;
        $petition_folder_relation_list
            = self::getListFolderByPetitionId($user_id,
            $petition['pid']);
        $status = $petition['status'];
        foreach (
            array_keys($petition_folder_relation_list) as
            $petition_folder_relation_id
        ) {
            $folder_id
                = $petition_folder_relation_list[$petition_folder_relation_id]['col_folder'];
            $folder_type
                = $petition_folder_relation_list[$petition_folder_relation_id]['col_folder_type'];
            $folder['folder_id'] = $folder_id;
            $folder_type_str = '';
            switch ($folder_type) {
                case GRN_WORKFLOW_FOLDER_TYPE_IN_ID:
                    $folder_type_str = 'RECEIVED';
                    break;
                case GRN_WORKFLOW_FOLDER_TYPE_OUT_ID:
                    $folder_type_str = 'SENT';
                    if ((GRN_WORKFLOW_STATUS_IN_PROCESS_CANCEL == $status
                         && $cancel_confirm)
                        || GRN_WORKFLOW_STATUS_IN_PROCESS_CANCEL == $status
                        || GRN_WORKFLOW_STATUS_FINISHED == $status
                        || GRN_WORKFLOW_STATUS_REJECTION == $status
                    ) {
                        $has_operation = false;
                    } elseif ($status == GRN_WORKFLOW_STATUS_UNPROCESSING
                              || $status == GRN_WORKFLOW_STATUS_IN_PROCESS
                              || $status == GRN_WORKFLOW_STATUS_REMAND
                    ) {
                        $has_operation = true;
                    }
                    break;
                case GRN_WORKFLOW_FOLDER_TYPE_FINISH_ID:
                    $folder_type_str = 'FINISH';
                    break;
                case GRN_WORKFLOW_FOLDER_TYPE_UNPROCESSED_ID:
                    $folder_type_str = 'UNPROCESSED';
                    $has_operation = true;
                    break;
                case GRN_WORKFLOW_FOLDER_TYPE_TEMP_ID:
                    $folder_type_str = 'DRAFT';
                    break;
            }
            $folders[] = ['id' => $folder_id, 'type' => $folder_type_str];
        }
        if (count($folders) == 1 && $folders[0]['type'] == 'SENT') {
            $operation_info['handle_mode'] = 'view_only';
        }

        return $folders;
    }

    /**
     * @param $user_id
     * @param $petition_id
     *
     * @return array
     */
    protected static function getListFolderByPetitionId($user_id, $petition_id)
    {

        $dbconn = cb_get_app_db('workflow');

        $condition = cb_queryf($dbconn,
            "fr.col_petition='@S' AND f.col_user='@S' ", $petition_id,
            $user_id);

        $join
            = " INNER JOIN tab_grn_workflow_folder AS f ON fr.col_folder=f._id";
        $join .= " INNER JOIN tab_cb_user AS u ON (f.col_user=u._id AND u.col_deleted IS NULL)";
        $query
            = "SELECT fr._id,fr.col_folder,f.col_folder_type FROM tab_grn_workflow_folderrelation AS fr {$join} WHERE ({$condition}) ORDER BY col_folder";

        $query = $dbconn->select_format($query, 0, -1,
            CB_DATABASE_DEFAULT_LOCK);
        $result = $dbconn->query($query);
        if (false === $result) {
            $dbconn->throwError(['query' => "failed query on SELECT: {$query}"]);
        }

        $rows = [];
        while ($row = $dbconn->fetch_assoc($result)) {
            $rows[$row['col_folder']] = $row;
        }

        return $rows;
    }

    /**
     * @param array $petition
     * @param array $path_steps
     * @param array $operation_info
     *
     * @return array
     */
    private static function convertAvailableOperations(
        $petition,
        $path_steps,
        $operation_info
    ) {
        $available_operations = [];
        $list_operations = [];
        $status = $petition['status'];
        $user_id = cb_get_login_user()->getOID();
        $operation_mode = $operation_info['handle_mode'];

        $target_remand = $operation_info['sent_back_target'];

        $controller_util = new \GRN_Workflow_ControllerUtil();
        $in_process = null;
        $path_steps_current = current($path_steps);
        $in_process
            = $controller_util->getInProcessPathStepId($path_steps_current);
        $processing_step = intval($in_process);

        require_once('workflow/config.csp');
        $configs = \GRN_Workflow_Configs::getInstance();
        $config = $configs->getSystemConfig();
        $is_remand = $config->getRemand();

        if ($status < GRN_WORKFLOW_STATUS_REJECTION) {
            $need_action = true;
            if (isset($path_steps[$processing_step])) {
                foreach ($path_steps[$processing_step]['users'] as $user) {
                    if ($user['col_user'] == $user_id
                        && ! is_null($user['col_ptime'])
                    ) {
                        $need_action = false;
                        break;
                    }
                }
            }
            if ($need_action) {
                if ( ! $operation_mode) {
                    if (isset($path_steps[$processing_step])
                        && $path_steps[$processing_step]['col_type']
                           == GRN_WORKFLOW_ACCEPTANCE
                        && 'view_only' != $operation_mode
                    ) {

                        $list_operations[] = GRN_WORKFLOW_OPERATION_APPROVE;
                        $list_operations[] = GRN_WORKFLOW_OPERATION_REJECT;
                        if ($is_remand) {
                            $list_operations[]
                                = GRN_WORKFLOW_OPERATION_SENT_BACK;
                            $available_operations['sentBackTargets']
                                = $target_remand;

                        }

                    } elseif ('view_only' != $operation_mode) {
                        $list_operations[] = GRN_WORKFLOW_OPERATION_CONFIRM;
                    }
                } elseif ($operation_mode == 'confirm') {
                    $list_operations[] = GRN_WORKFLOW_OPERATION_ACKNOWLEDGE;
                }
            }
        } elseif ($status == GRN_WORKFLOW_STATUS_REMAND) {
            if ('confirm' == $operation_mode || 'reapply' == $operation_mode) {
                $list_operations[] = GRN_WORKFLOW_OPERATION_CONFIRM;
            }
            if ( ! $operation_mode && 'view_only' != $operation_mode) {
                if ($processing_step
                    || ($user_id != $petition['user']
                        && $user_id != $petition['agent_user'])
                ) {

                    $list_operations[] = GRN_WORKFLOW_OPERATION_APPROVE;
                    $list_operations[] = GRN_WORKFLOW_OPERATION_REJECT;
                    if ($is_remand) {
                        $list_operations[] = GRN_WORKFLOW_OPERATION_SENT_BACK;
                        $available_operations['sentBackTargets']
                            = $target_remand;
                    }
                }
            }
        } elseif ($status == GRN_WORKFLOW_STATUS_UNPROCESSING_CANCEL
                  || $status == GRN_WORKFLOW_STATUS_IN_PROCESS_CANCEL
                  || $status == GRN_WORKFLOW_STATUS_REJECTION
        ) {
            if ('view_only' != $operation_mode) {
                $list_operations[] = GRN_WORKFLOW_OPERATION_CONFIRM;
            }
        } elseif ('change_transactor' == $operation_mode) {
            $list_operations[] = GRN_WORKFLOW_OPERATION_CONFIRM;
        } elseif ('reapply' == $operation_mode) {
            $list_operations[] = GRN_WORKFLOW_OPERATION_CONFIRM;
        } elseif ($status == GRN_WORKFLOW_STATUS_FINISHED
                  && 'confirm' == $operation_mode
        ) {
            $list_operations[] = GRN_WORKFLOW_OPERATION_ACKNOWLEDGE;
        }

        if ($status == GRN_WORKFLOW_STATUS_UNPROCESSING) {
            if ($user_id == $petition['user']
                || $user_id == $petition['agent_user']
            ) {
                $list_operations[] = GRN_WORKFLOW_OPERATION_WITHDRAW;
            }
        }
        if ($status == GRN_WORKFLOW_STATUS_IN_PROCESS
            || $status == GRN_WORKFLOW_STATUS_REMAND
        ) {
            if ($user_id == $petition['user']
                || $user_id == $petition['agent_user']
            ) {
                $list_operations[] = GRN_WORKFLOW_OPERATION_CANCEL;
            }
        }
        $available_operations['list'] = $list_operations;

        return $available_operations;
    }
}
