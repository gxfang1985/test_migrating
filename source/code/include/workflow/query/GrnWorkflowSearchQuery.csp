<?php
require_once("grn/GrnAbstractQuery.csp");

/**
 *
 */
abstract class GrnWorkflowSearchQuery extends GrnAbstractQuery
{
    /**
     *
     * @var array
     */
    private $conditions = [];

    /**
     * @param array $conditions
     */
    public function setConditions(array $conditions)
    {
        $this->conditions = $conditions;
    }

    /**
     *
     * @return array
     */
    public function getConditions()
    {
        return $this->conditions;
    }

    /**
     * @see http://issues.dev.cybozu.co.jp/browse/GRN2-7097
     *
     * @param GrnWorkflowSearchCondition $condition
     * filter out when GrnWorkflowSearchCondition::getConditionSQL return null
     */
    public function addCondition(GrnWorkflowSearchCondition $condition)
    {
        if ($condition->hasValidValue() === false) {
            return;
        }
        $this->conditions[] = $condition;
    }

    /**
     * @see http://issues.dev.cybozu.co.jp/browse/GRN2-7097
     * @return int
     * testing method for GRN2-7097
     */
    public function getNumOfCondition()
    {
        return count($this->conditions);
    }

    /**
     * @param GrnWorkflowSearchCOndition $condition
     *
     * @return mixed
     */
    private function getConditionSQL(GrnWorkflowSearchCOndition $condition)
    {
        return $condition->getConditionSQL($this->getDatabaseConnection());
    }

    /**
     *
     * Enter description here ...
     *
     * @var boolean
     */
    private $concatinateAND = true;

    /**
     * @param $concatinateAND
     */
    public function setConcatinateAND($concatinateAND)
    {
        $this->concatinateAND = $concatinateAND;
    }

    /**
     * @return bool
     */
    public function getConcatinateAND()
    {
        return $this->concatinateAND;
    }

    private $offset = 0;

    /**
     * @param $offset
     */
    public function setOffset($offset)
    {
        $this->offset = $offset;
    }

    /**
     * @return int
     */
    public function getOffset()
    {
        return $this->offset;
    }

    private $limit = -1;

    /**
     * @param $limit
     */
    public function setLimit($limit)
    {
        $this->limit = $limit;
    }

    /**
     * @return int
     */
    public function getLimit()
    {
        return $this->limit;
    }

    /**
     *
     * @return string
     */
    protected function getConditionQuery()
    {
        if (count($this->getConditions()) == 0) {
            return "";
        }

        $conditionsQuery = [];
        foreach ($this->getConditions() as $condition) {
            /**
             * @var $condition GrnWorkflowSearchCondition
             */
            $conditionsQuery[] = $this->getConditionSQL($condition);
        }
        if ($this->getConcatinateAND()) {
            $conditionsQuery = implode(" AND ", $conditionsQuery);
        } else {
            $conditionsQuery = implode(" OR ", $conditionsQuery);
        }

        return "(" . $conditionsQuery . ")";
    }
}
