<?php

/**
 * 経路
 *
 * @author  Yuichi UEYAMA 2006/01
 * @version 1.0
 * @package grn.workflow
 */

require_once('workflow/model.csp');

/**
 * 経路分岐情報データクラス
 */
class GRN_Workflow_PathSkipDatas extends GRN_Workflow_Model
{
    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
        //Parent Class Constructor
        parent::__construct('tab_grn_workflow_pathskipdata');

        //Initialize Columns Information
        $this->_columns_info = [
            'necessary' => [
                'col_petition',
                'col_item_data',
                'col_path_skip',
            ]
        ];

        //Initialize Table Aliases for Join
        $this->_aliases = [
            'tab_grn_workflow_pathskipdata'          => 'a',
            'tab_grn_workflow_petition'              => 'b',
            'tab_grn_workflow_itemdata'              => 'c',
            'tab_grn_workflow_pathconditiondata'     => 'd',
            'tab_grn_workflow_pathconditionstepdata' => 'e',
        ];
    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_PathSkipDatas $instance                  //Instance of GRN_Workflow_PathSkips
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_PathSkipDatas();
        }

        return $_instance;
    }

    /**
     * Add Path Skip Data
     *
     * @param   array $properties //Path Skip Properties
     *
     * @return  string  $path_skip_data_id      //Path Skip Data ID
     */
    function &add($properties)
    {
        //Check Arguments
        if ( ! is_array($properties) || 0 == count($properties)) {
            //Empty Properties
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_EMPTY_PROPERTIES);
        }

        //Insert Path Skip Data
        $ret = $this->_insertRecords(array_keys($properties), [$properties]);

        return $ret;
    }

    /**
     * Modify Path Skip Data
     *
     * @param   int   $path_skip_data_id //Path Skip Data ID
     * @param   array $properties        //Path Skip Properties
     */
    function modify($path_skip_data_id, $properties)
    {
        //Check Arguments
        require_once('workflow/error_code.csp');
        require_once('fw/string_util.csp');
        cb_trim_check($path_skip_data_id,
            E_GRN_WRKF_PATH_SKIP_DATA_INVALID_ID);        //Path Skip Data ID
        if ( ! is_array($properties) || 0 == count($properties)) {
            //Empty Priperties
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_EMPTY_PROPERTIES);
        }

        //Check Path Skip Data Exists
        $path_skip_data = $this->get($path_skip_data_id);
        if ( ! is_array($path_skip_data) || 0 == count($path_skip_data)) {
            //Path Skip Data Not Found
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_PATH_SKIP_DATA_NOT_FOUND);
        }

        //Create Condition String
        $condition = cb_queryf($this->_dbconn, "_id='@S'", $path_skip_data_id);

        //Update Path Skip Data
        $this->_updateRecords($condition, $properties);
    }

    /**
     * Remove Path Skip
     *
     * @param   int $path_skip_data_id //Path Skip Data ID
     */
    function remove($path_skip_data_id)
    {
        //Check Arguments
        require_once('workflow/error_code.csp');
        require_once('fw/string_util.csp');
        cb_trim_check($path_skip_data_id, E_GRN_WRKF_PATH_SKIP_DATA_INVALID_ID);

        //Check Path Skip Data Exists
        $path_skip_data = $this->get($path_skip_data_id);
        if ( ! is_array($path_skip_data) || 0 == count($path_skip_data)) {
            //Path Skip Data Not Found
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_PATH_SKIP_DATA_NOT_FOUND);
        }

        //Create Condition String
        $condition = cb_queryf($this->_dbconn, "_id='@S'", $path_skip_data_id);

        //Delete Path Skip Data
        $this->_deleteRecords($condition);
    }

    /**
     * Remove Path Skip Data By Petition ID
     *
     * @param   int $petition_id //Petition ID
     */
    function removeByPetitionID($petition_id)
    {
        //Check Arguments
        require_once('workflow/error_code.csp');
        require_once('fw/string_util.csp');
        cb_trim_check($petition_id,
            E_GRN_WRKF_PETITION_INVALID_ID);   //Petition ID

        //Create Condition
        $condition = cb_queryf($this->_dbconn, "col_petition='@S'",
            $petition_id);

        //Delete Path Skip Data
        $this->_deleteRecords($condition);
    }

    /**
     * Remove Path Skip By Item Data ID
     *
     * @param   int $item_data_id //Item Data ID
     */
    function removeByItemDataID($item_data_id)
    {
        //Check Arguments
        require_once('workflow/error_code.csp');
        require_once('fw/string_util.csp');
        cb_trim_check($item_data_id,
            E_GRN_WRKF_ITEMDATA_INVALID_ID);   //Item Data ID

        //Create Condition
        $condition = cb_queryf($this->_dbconn, "col_item_data='@S'",
            $item_data_id);

        //Delete Path Skip
        $this->_deleteRecords($condition);
    }

    /**
     * Get Path Skip Data
     *
     * @param   int   $path_skip_data_id //Path Skip Data ID
     * @param   array $columns           //Request Columns
     * @param   int   $lock              //Lock Mode
     *
     * @return  mixed   $path_skip               //Path Skip(or FALSE)
     */
    function &get(
        $path_skip_data_id,
        $columns = null,
        $lock = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Check Arguments
        require_once('workflow/error_code.csp');
        require_once('fw/string_util.csp');
        cb_trim_check($path_skip_data_id,
            E_GRN_WRKF_PATH_SKIP_DATA_INVALID_ID);    //Path Step data ID

        //Check Request Columns
        if (is_null($columns)) {
            //Set Default Columns
            $columns['tab_grn_workflow_pathskipdata'] = [
                '_id'           => '_id',
                'col_item_data' => 'col_item_data',
                'col_petition'  => 'col_petition',
                'col_path_skip' => 'col_path_skip',
            ];
        }

        //Format Columns String
        $columns = $this->_formatColumns($columns, $this->_aliases);

        //Create From String
        $from = "tab_grn_workflow_pathskipdata AS a";

        //Create Condition String
        $condition = cb_queryf($this->_dbconn, "a._id='@S'",
            $path_skip_data_id);

        //Create Order By String
        $order_by = 'ORDER BY a._id';

        //Create and Send Query
        $query
            = "SELECT {$columns} FROM {$from} WHERE ({$condition}) {$order_by}";
        $query = $this->_dbconn->select_format($query, 0, 1, $lock);
        $result = $this->_dbconn->query($query);
        if (false === $result) {
            //Query Faild
            $this->_dbconn->throwError(['query' => "failed query on SELECT: {$query}"]);
        }

        //Get Path Skip Data
        $path_skip_data = $this->_dbconn->fetch_assoc($result);
        if (array_key_exists('col_settings', $path_skip_data)) {
            $path_skip_data['col_settings']
                = cb_unserialize($path_skip_data['col_settings'],
                ["allowed_classes" => false]);
        }

        //Return Path Skip Data
        return $path_skip_data;
    }

    /**
     * Get Path Skip Data (with Extra Information)
     *
     * @param   int   $path_skip_data_id //Path Skip Data ID
     * @param   array $columns           //Request Columns
     * @param   int   $lock              //Lock Mode
     *
     * @return  mixed   $path_skip               //Path Skip(or FALSE)
     */
    function &getEx(
        $path_skip_data_id,
        $columns = null,
        $lock = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Check Arguments
        require_once('workflow/error_code.csp');
        require_once('fw/string_util.csp');
        cb_trim_check($path_skip_data_id,
            E_GRN_WRKF_PATH_SKIP_DATA_INVALID_ID);    //Path Step data ID

        //Check Request Columns
        if (is_null($columns)) {
            //Set Default Columns
            $columns['tab_grn_workflow_pathskipdata'] = [
                '_id'           => '_id',
                'col_item_data' => 'col_item_data',
                'col_petition'  => 'col_petition',
                'col_path_skip' => 'col_path_skip',
            ];
        }

        //Format Columns String
        $columns = $this->_formatColumns($columns, $this->_aliases);

        //Create From String
        $from = "tab_grn_workflow_pathskipdata AS a" .
                "INNER JOIN tab_grn_workflow_petition b ON a.col_petition = b._id "
                .
                "INNER JOIN tab_grn_workflow_itemdata AS c ON a.col_item_data=c._id";

        //Create Condition String
        $condition = cb_queryf($this->_dbconn, "a._id='@S'",
            $path_skip_data_id);

        //Create Order By String
        $order_by = 'ORDER BY a._id';

        //Create and Send Query
        $query
            = "SELECT {$columns} FROM {$from} WHERE ({$condition}) {$order_by}";
        $query = $this->_dbconn->select_format($query, 0, 1, $lock);
        $result = $this->_dbconn->query($query);
        if (false === $result) {
            //Query Faild
            $this->_dbconn->throwError(['query' => "failed query on SELECT: {$query}"]);
        }

        //Get Path Skip Data
        $path_skip_data = $this->_dbconn->fetch_assoc($result);
        if (array_key_exists('col_settings', $path_skip_data)) {
            $path_skip_data['col_settings']
                = cb_unserialize($path_skip_data['col_settings'],
                ["allowed_classes" => false]);
        }

        //Return Path Skip Data
        return $path_skip_data;
    }

    /**
     * Get Path Skip by Petitiom ID
     *
     * @param   int   $petition_id //Petitiom ID
     * @param   array $columns     //Request Columns
     * @param   int   $lock        //Lock Mode
     *
     * @return  mixed   $Path Skip               //Path Skip(or FALSE)
     */
    function getByPetitionId(
        $petition_id,
        $columns = null,
        $lock = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Check Arguments
        require_once('workflow/error_code.csp');
        require_once('fw/string_util.csp');
        cb_trim_check($petition_id,
            E_GRN_WRKF_PETITION_INVALID_ID);       //Petitiom ID

        //Create Columns String
        $columns = $this->_formatColumns($columns, $this->_aliases);

        //Create From String
        $from = "tab_grn_workflow_pathskipdata AS a ";

        //Create Condition String
        $condition = cb_queryf($this->_dbconn, "a.col_petition='@S'",
            $petition_id);

        //Create and Send Query
        $query = "SELECT {$columns} FROM {$from} WHERE ({$condition})";
        $query = $this->_dbconn->select_format($query, 0, 1, $lock);
        $result = $this->_dbconn->query($query);
        if (false === $result) {
            //Query Failed
            $this->_dbconn->throwError(['query' => "failed query on SELECT: {$query}"]);
        }

        //Get Path Skip Data
        $path_skip = $this->_dbconn->fetch_assoc($result);

        return $path_skip;
    }

    /**
     * Get Path Skip Data by Petitiom ID (with Extra Information)
     *
     * @param   int   $petition_id //Petitiom ID
     * @param   array $columns     //Request Columns
     * @param   int   $lock        //Lock Mode
     *
     * @return  mixed   $Path Skip               //Path Skip(or FALSE)
     */
    function getByPetitionIdEx(
        $petition_id,
        $columns = null,
        $lock = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Check Arguments
        require_once('workflow/error_code.csp');
        require_once('fw/string_util.csp');
        cb_trim_check($petition_id,
            E_GRN_WRKF_PETITION_INVALID_ID);       //Petitiom ID

        //Create Columns String
        $columns = $this->_formatColumns($columns, $this->_aliases);

        //Create From String
        $from = "tab_grn_workflow_pathskipdata AS a " .
                "INNER JOIN tab_grn_workflow_itemdata c ON a.col_item_data = c._id "
                .
                "INNER JOIN tab_grn_workflow_pathconditiondata d ON a._id = d.col_path_skip_data "
                .
                "LEFT JOIN tab_grn_workflow_pathconditionstepdata e ON d._id = e.col_path_condition_data ";

        //Create Condition String
        $condition = cb_queryf($this->_dbconn, "a.col_petition='@S'",
            $petition_id);

        //Create Order By String
        $order_by = 'ORDER BY d.col_list_index, d._id';

        //Create and Send Query
        $query
            = "SELECT {$columns} FROM {$from} WHERE ({$condition}) {$order_by}";
        $query = $this->_dbconn->select_format($query, 0, -1, $lock);
        $result = $this->_dbconn->query($query);
        if (false === $result) {
            //Query Failed
            $this->_dbconn->throwError(['query' => "failed query on SELECT: {$query}"]);
        }

        //Get Path Skip Data(with Extra Information)
        $path_skip = [];
        while ($row = $this->_dbconn->fetch_assoc($result)) {
            $path_skip[$row['col_path_condition_data']][$row['col_path_condition_step_data']]
                = $row;
        }

        return $path_skip;
    }
}


