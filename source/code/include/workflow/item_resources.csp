<?php

/**
 * Workflow Application Item Resources
 *
 * @author  Yuichi, Nakamura 2005/12
 * @version 1.0
 * @package grn.workflow
 */

require_once('grn/controller.csp');
require_once('workflow/resources.csp');


$item_class_list = [];

/**
 * Item Base Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_Item_Util_Base
{
    //Foreign_key
    var $_foreign_key = null;

    //Template Names
    var $_set_template = null;     //Template for Setting
    var $_detail_template = null;     //Template for Detail
    var $_view_template = null;     //Template for View

    /**
     * Set Item Data
     *
     * @param  array $item          //Item Information
     * @param  array $property_list //Property List
     * @param  bool  $chack_value   //Check Value Flag
     *
     * @return bool   $result                    //Result
     */
    function setItemData(& $item, & $property_list, $check_value = true)
    {
        $property_list[GRN_WORKFLOW_COLUMN_NUMBER] = null;
        $property_list[GRN_WORKFLOW_COLUMN_TEXT] = null;

        return true;
    }

    /**
     * Set Item data File
     *
     * @param  array $item_data_id  //Item Data ID
     * @param  array $item          //Item Information
     * @param  array $property_list //Property List
     * @param  bool  $chack_value   //Check Value Flag
     *
     * @return bool   $result                    //Result
     */
    function setItemDataFile(
        $item_data_id,
        & $item,
        & $property_list,
        $check_value = true
    ) {
        return true;
    }

    /**
     * Perse Item Data
     *
     * @param  mixed  $input_data        //Input Data
     * @param  string $input_data_prefix //Input Data Prefix
     * @param  array  $item              //Item Information Array
     *
     * @return mixed  $parsed_input_data         //Parsed Input Data
     */
    function parseItemData(& $input_data, $input_data_prefix, & $item)
    {
        $parsed_input_data = null;

        //Set Parsed Input Data
        $item_key = sprintf('%s_%s', $input_data_prefix,
            $item['iid']);
        $input_data[$item_key] = $parsed_input_data;

        //return Parsed Input Data
        return $parsed_input_data;
    }

    /**
     * Check Item Data
     *
     * @param  mixed $parsed_input_data //Parsed Input Data
     * @param  array $item              //Item Information Array
     *
     * @return bool   $result                    //Result
     */
    function checkItemData($parsed_input_data, $item)
    {
        require_once('workflow/error_code.csp');

        $check_required = ($item['attach_file'] == 1) ? true : false;

        //Check Required
        if ($item['required'] == 1 && $check_required) {
            require_once('fw/string_util.csp');
            cb_trim_check($parsed_input_data,
                E_GRN_WRKF_ITEMDATA_NOT_INPUT_NECESSARY);
        }
    }

    /**
     * Get Item data
     *
     * @param  array $item //Item Information
     *
     * @return mixed                             //Result
     */
    function getItemData(& $item)
    {
        $ret = null;

        return $ret;
    }

    /**
     * Get Item data File
     *
     * @param  int   $item_data_id //Item Data ID
     * @param  array $item         //Item Information
     *
     * @return array                             //File Information
     */
    function getItemDataFile($item_data_id, & $item)
    {
        return null;
    }

    /**
     * Convert Settings
     *
     * @param  int   $item   //Item
     * @param  array $id_map //Old -> New Item ID Map
     *
     * @return none
     */
    function convertSettings(& $item, $id_map)
    {
        return;
    }

    /**
     * Export Settings
     *
     * @param  array $setting_list    //Item Setting List
     * @param  array $id2serialno_map //ID -> Serial No. Map
     *
     * @return array                            //Item Setting List treated by some means
     */
    function exportSettings(& $setting_list, & $id2serialno_map)
    {
        $treated_setting_list = $setting_list;

        return $treated_setting_list;
    }

    /**
     * Import Settings
     *
     * @param  array $setting_list    //Item Setting List
     * @param  array $serialno2id_map //Serial No. -> ID Map
     *
     * @return array                            //Item Setting List treated by some means
     */
    function importSettings(& $setting_list, & $serialno2id_map)
    {
        $treated_setting_list = $setting_list;

        return $treated_setting_list;
    }
}

/**
 * Single String Item Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_Item_Util_String_Single extends GRN_Workflow_Item_Util_Base
{
    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
        //Initialize Foreign_key
        $this->_foreign_key = 'grn.workflow.string_single';

        //Initialize Template Names
        $this->_set_template = 'workflow/item/set_string_single.csp';
        $this->_detail_template = 'workflow/item/detail_string_single.csp';
        $this->_view_template = 'workflow/item/view_string_single.csp';
    }

    /**
     * Set Item Data
     *
     * @param  array $item          //Item Information
     * @param  array $property_list //Property List
     * @param  bool  $chack_value   //Check Value Flag
     *
     * @return bool   $result                    //Result
     */
    function setItemData(& $item, & $property_list, $check_value = true)
    {
        $parsed_input_data = @ $item['text'];

        //Check and Set Item Data
        if ($check_value) {
            $this->checkItemData($parsed_input_data, $item);
        }
        $property_list[GRN_WORKFLOW_COLUMN_NUMBER] = null;
        $property_list[GRN_WORKFLOW_COLUMN_TEXT] = $parsed_input_data;

        return true;
    }

    /**
     * Perse Item Data
     *
     * @param  mixed  $input_data        //Input Data
     * @param  string $input_data_prefix //Input Data Prefix
     * @param  array  $item              //Item Information Array
     *
     * @return mixed  $parsed_input_data         //Parsed Input Data
     */
    function parseItemData(& $input_data, $input_data_prefix, & $item)
    {
        $parsed_input_data = null;

        //Parse Input Data
        $key = sprintf('%s_%s', $input_data_prefix, $item['iid']);
        $parsed_input_data = @ $input_data[$key];

        //Check Parsed Input Value
//        $this->checkItemData($parsed_input_data, $item); 

        //Set Parsed Input Data to Item
        $item['text'] = $parsed_input_data;

        //Set Parsed Input Data
        $item_key = sprintf('%s_%s', $input_data_prefix,
            $item['iid']);
        $input_data[$item_key] = $parsed_input_data;

        //Return Parsed Input Data 
        return $parsed_input_data;
    }

    /**
     * Check Item Data
     *
     * @param  mixed $parsed_input_data //Parsed Input Data
     * @param  array $item              //Item Information Array
     *
     * @return bool   $result                    //Result
     */
    function checkItemData($parsed_input_data, $item)
    {
        require_once('workflow/error_code.csp');

        $check_required = ($item['attach_file'] == 1) ? true : false;

        //Check Required
        if ($item['required'] == 1 && $check_required) {
            require_once('fw/string_util.csp');
            cb_trim_check($parsed_input_data,
                E_GRN_WRKF_ITEMDATA_NOT_INPUT_NECESSARY);
        }

        //Check Item Type
        if ($item['type'] != 1) {
            //Check Charactor Type
            switch ($item['settings']['input_chars']) {
                case '1':
                    $new_value = mb_convert_kana($parsed_input_data, 'ASKV');
                    if ($new_value !== $parsed_input_data) {
                        //Invalid Item Data
                        cb_throw_error(E_GRN_WRKF_ITEM_INVALID_INPUT_DATA);
                    };
                    break;
                case '2':
                    $new_value = mb_convert_kana($parsed_input_data, 'haskV');
                    if ($new_value !== $parsed_input_data) {
                        //Invalid Item Data
                        cb_throw_error(E_GRN_WRKF_ITEM_INVALID_INPUT_DATA);
                    };
                    break;
                default:
                    break;
            }

            //Check Max Input Size
            if (is_numeric($item['settings']['max_input_size'])) {
                if (mb_strlen($parsed_input_data)
                    > $item['settings']['max_input_size']
                ) {
                    //Invalid Item Data
                    cb_throw_error(E_GRN_WRKF_ITEM_INVALID_INPUT_DATA);
                }
            }
        }

        return;
    }

    /**
     * Get Item data
     *
     * @param  array $item //Item Information
     *
     * @return string $item_data_value           //Result
     */
    function getItemData(& $item)
    {
        $item_data_value = $item[GRN_WORKFLOW_COLUMN_TEXT];

        return $item_data_value;
    }
}

/**
 * Multiple String Item Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_Item_Util_String_Multiple extends GRN_Workflow_Item_Util_Base
{
    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
        //Initialize Foreign_key
        $this->_foreign_key = 'grn.workflow.string_multiple';

        //Initialize Template Names
        $this->_set_template = 'workflow/item/set_string_multiple.csp';
        $this->_detail_template = 'workflow/item/detail_string_multiple.csp';
        $this->_view_template = 'workflow/item/view_string_multiple.csp';
    }

    /**
     * Set Item Data
     *
     * @param  array $item          //Item Information
     * @param  array $property_list //Property List
     * @param  bool  $chack_value   //Check Value Flag
     *
     * @return bool   $result                    //Result
     */
    function setItemData(& $item, & $property_list, $check_value = true)
    {
        $parsed_input_data = @ $item['text'];

        //Check and Set Item Data
        if ($check_value) {
            $this->checkItemData($parsed_input_data, $item);
        }
        $property_list[GRN_WORKFLOW_COLUMN_NUMBER] = null;
        $property_list[GRN_WORKFLOW_COLUMN_TEXT] = $parsed_input_data;

        return true;
    }

    /**
     * Perse Item Data
     *
     * @param  mixed  $input_data        //Input Data
     * @param  string $input_data_prefix //Input Data Prefix
     * @param  array  $item              //Item Information Array
     *
     * @return mixed  $parsed_input_data         //Parsed Input Data
     */
    function parseItemData(& $input_data, $input_data_prefix, & $item)
    {
        $parsed_input_data = null;

        //Parse Input Data
        $key = sprintf('%s_%s', $input_data_prefix, $item['iid']);
        $parsed_input_data = @ $input_data[$key];

        //Check Parsed Input Value
//        $this->checkItemData($parsed_input_data, $item); 

        //Set Parsed Input Data to Item
        $item['text'] = $parsed_input_data;

        //Set Parsed Input Data
        $item_key = sprintf('%s_%s', $input_data_prefix,
            $item['iid']);
        $input_data[$item_key] = $parsed_input_data;

        //Set Parsed Input Data
        $item_key = sprintf('%s_%s', $input_data_prefix,
            $item['iid']);
        $input_data[$item_key] = $parsed_input_data;

        //Return Parsed Input Data 
        return $parsed_input_data;
    }

    /**
     * Get Item data
     *
     * @param  array $item //Item Information
     *
     * @return string $item_data_value           //Result
     */
    function getItemData(& $item)
    {
        $item_data_value = $item[GRN_WORKFLOW_COLUMN_TEXT];

        return $item_data_value;
    }
}

/**
 * String Menu Item Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_Item_Util_Menu_String extends GRN_Workflow_Item_Util_Base
{
    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
        //Initialize Foreign_key
        $this->_foreign_key = 'grn.workflow.menu_string';

        //Initialize Template Names
        $this->_set_template = 'workflow/item/set_menu_string.csp';
        $this->_detail_template = 'workflow/item/detail_menu_string.csp';
        $this->_view_template = 'workflow/item/view_menu_string.csp';
    }

    /**
     * Set Item Data
     *
     * @param  array $item          //Item Information
     * @param  array $property_list //Property List
     * @param  bool  $chack_value   //Check Value Flag
     *
     * @return bool   $result                    //Result
     */
    function setItemData(& $item, & $property_list, $check_value = true)
    {
        $parsed_input_data = @ $item['text'];

        //Check and Set Item Data
        if ($check_value) {
            $this->checkItemData($parsed_input_data, $item);
        }
        $property_list[GRN_WORKFLOW_COLUMN_NUMBER] = null;
        $property_list[GRN_WORKFLOW_COLUMN_TEXT] = $parsed_input_data;

        return true;
    }

    /**
     * Perse Item Data
     *
     * @param  mixed  $input_data        //Input Data
     * @param  string $input_data_prefix //Input Data Prefix
     * @param  array  $item              //Item Information Array
     *
     * @return mixed  $parsed_input_data         //Parsed Input Data
     */
    function parseItemData(& $input_data, $input_data_prefix, & $item)
    {
        $parsed_input_data = null;

        //Parse Input Data
        $key = sprintf('%s_%s', $input_data_prefix, $item['iid']);
        $parsed_input_data = @ $input_data[$key];

        //Check Parsed Input Value
//        $this->checkItemData($parsed_input_data, $item); 

        //Set Parsed Input Data to Item
        $item['text'] = $parsed_input_data;

        //Set Parsed Input Data
        $item_key = sprintf('%s_%s', $input_data_prefix,
            $item['iid']);
        $input_data[$item_key] = $parsed_input_data;

        //Return Parsed Input Data 
        return $parsed_input_data;
    }

    /**
     * Get Item Condition Ooperators
     *
     * @return array $condition_operators
     */
    function getConditionOperators()
    {
        $condition_operators = [
            GRN_WORKFLOW_CONDITION_TYPE_MENU_STRING_EQUAL     => cb_msg(GRN_WORKFLOW_MODULE_ID,
                'condition_operator_0'),
            GRN_WORKFLOW_CONDITION_TYPE_MENU_STRING_NOT_EQUAL => cb_msg(GRN_WORKFLOW_MODULE_ID,
                'condition_operator_1'),
        ];

        return $condition_operators;
    }

    /**
     * Is Path Step Condition
     *
     * @return array $conditon_flg
     */
    function isPathStepCondition($operator = null, $check = null, $value = null)
    {
        $conditon_flg = false;
        if ($operator == GRN_WORKFLOW_CONDITION_TYPE_MENU_STRING_EQUAL) {
            if ($check == $value) {
                $conditon_flg = true;
            }
        } elseif ($operator
                  == GRN_WORKFLOW_CONDITION_TYPE_MENU_STRING_NOT_EQUAL
        ) {
            if ($check != $value) {
                $conditon_flg = true;
            }
        }

        return $conditon_flg;
    }

    /**
     * Get Item data
     *
     * @param  array $item //Item Information
     *
     * @return string $item_data_value           //Result
     */
    function getItemData(& $item)
    {
        $item_data_value = $item[GRN_WORKFLOW_COLUMN_TEXT];

        return $item_data_value;
    }
}

/**
 * Radio Button Item Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_Item_Util_Radio extends GRN_Workflow_Item_Util_Base
{
    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
        //Initialize Foreign_key
        $this->_foreign_key = 'grn.workflow.radio';

        //Initialize Template Names
        $this->_set_template = 'workflow/item/set_radio.csp';
        $this->_detail_template = 'workflow/item/detail_radio.csp';
        $this->_view_template = 'workflow/item/view_radio.csp';
    }

    /**
     * Set Item Data
     *
     * @param  array $item          //Item Information
     * @param  array $property_list //Property List
     * @param  bool  $chack_value   //Check Value Flag
     *
     * @return bool   $result                    //Result
     */
    function setItemData(& $item, & $property_list, $check_value = true)
    {
        $parsed_input_data = @ $item['text'];

        //Check and Set Item Data
        if ($check_value) {
            $this->checkItemData($parsed_input_data, $item);
        }
        $property_list[GRN_WORKFLOW_COLUMN_NUMBER] = null;
        $property_list[GRN_WORKFLOW_COLUMN_TEXT] = $parsed_input_data;

        return true;
    }

    /**
     * Perse Item Data
     *
     * @param  mixed  $input_data        //Input Data
     * @param  string $input_data_prefix //Input Data Prefix
     * @param  array  $item              //Item Information Array
     *
     * @return mixed  $parsed_input_data         //Parsed Input Data
     */
    function parseItemData(& $input_data, $input_data_prefix, & $item)
    {
        $parsed_input_data = null;

        //Parse Input Data
        $key = sprintf('%s_%s', $input_data_prefix, $item['iid']);
        $parsed_input_data = @ $input_data[$key];

        //Check Parsed Input Value
//        $this->checkItemData($parsed_input_data, $item); 

        //Set Parsed Input Data to Item
        $item['text'] = $parsed_input_data;

        //Set Parsed Input Data
        $item_key = sprintf('%s_%s', $input_data_prefix,
            $item['iid']);
        $input_data[$item_key] = $parsed_input_data;

        //Return Parsed Input Data 
        return $parsed_input_data;
    }

    /**
     * Get Item Condition Ooperators
     *
     * @return array $condition_operators
     */
    function getConditionOperators()
    {
        $condition_operators = [
            GRN_WORKFLOW_CONDITION_TYPE_RADIO_EQUAL     => cb_msg(GRN_WORKFLOW_MODULE_ID,
                'condition_operator_0'),
            GRN_WORKFLOW_CONDITION_TYPE_RADIO_NOT_EQUAL => cb_msg(GRN_WORKFLOW_MODULE_ID,
                'condition_operator_1'),
        ];

        return $condition_operators;
    }

    /**
     * Is Path Step Condition
     *
     * @return array $conditon_flg
     */
    function isPathStepCondition($operator = null, $check = null, $value = null)
    {
        $conditon_flg = false;
        if ($operator == GRN_WORKFLOW_CONDITION_TYPE_RADIO_EQUAL) {
            if ($check == $value) {
                $conditon_flg = true;
            }
        } elseif ($operator == GRN_WORKFLOW_CONDITION_TYPE_RADIO_NOT_EQUAL) {
            if ($check != $value) {
                $conditon_flg = true;
            }
        }

        return $conditon_flg;
    }

    /**
     * Get Item data
     *
     * @param  array $item //Item Information
     *
     * @return string $item_data_value           //Result
     */
    function getItemData(& $item)
    {
        $item_data_value = $item[GRN_WORKFLOW_COLUMN_TEXT];

        return $item_data_value;
    }
}

/**
 * CheckBox Item Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_Item_Util_Checkbox extends GRN_Workflow_Item_Util_Base
{
    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
        //Initialize Foreign_key
        $this->_foreign_key = 'grn.workflow.checkbox';

        //Initialize Template Names
        $this->_set_template = 'workflow/item/set_checkbox.csp';
        $this->_detail_template = 'workflow/item/detail_checkbox.csp';
        $this->_view_template = 'workflow/item/view_checkbox.csp';
    }

    /**
     * Set Item Data
     *
     * @param  array $item          //Item Information
     * @param  array $property_list //Property List
     * @param  bool  $chack_value   //Check Value Flag
     *
     * @return bool   $result                    //Result
     */
    function setItemData(& $item, & $property_list, $check_value = true)
    {
        $parsed_input_data = @ $item['number'];

        //Check and Set Item Data
        if ($check_value) {
            $this->checkItemData($parsed_input_data, $item);
        }
        $property_list[GRN_WORKFLOW_COLUMN_NUMBER] = $parsed_input_data;
        $property_list[GRN_WORKFLOW_COLUMN_TEXT] = null;

        return true;
    }

    /**
     * Perse Item Data
     *
     * @param  mixed  $input_data        //Input Data
     * @param  string $input_data_prefix //Input Data Prefix
     * @param  array  $item              //Item Information Array
     *
     * @return mixed  $parsed_input_data         //Parsed Input Data
     */
    function parseItemData(& $input_data, $input_data_prefix, & $item)
    {
        $parsed_input_data = null;

        //Parse Input Data
        $key = sprintf('%s_%s', $input_data_prefix, $item['iid']);
        $parsed_input_data = @ $input_data[$key];
        if ( ! $parsed_input_data) {
            $parsed_input_data = 0;
        }

        //Check Parsed Input Value
//        $this->checkItemData($parsed_input_data, $item); 

        //Set Parsed Input Data to Item
        $item['number'] = $parsed_input_data;

        //Set Parsed Input Data
        $item_key = sprintf('%s_%s', $input_data_prefix,
            $item['iid']);
        $input_data[$item_key] = $parsed_input_data;

        //Return Parsed Input Data 
        return $parsed_input_data;
    }

    /**
     * Check Item Data
     *
     * @param  mixed $parsed_input_data //Parsed Input Data
     * @param  array $item              //Item Information Array
     *
     * @return bool   $result                    //Result
     */
    function checkItemData($parsed_input_data, $item)
    {
        //Always TRUE
        return;
    }

    /**
     * Get Item Condition Ooperators
     *
     * @return array $condition_operators
     */
    function getConditionOperators()
    {
        $condition_operators = [
            GRN_WORKFLOW_CONDITION_TYPE_CHECK_EQUAL     => cb_msg(GRN_WORKFLOW_MODULE_ID,
                'condition_operator_2'),
            GRN_WORKFLOW_CONDITION_TYPE_CHECK_NOT_EQUAL => cb_msg(GRN_WORKFLOW_MODULE_ID,
                'condition_operator_3'),
        ];

        return $condition_operators;
    }

    /**
     * Is Path Step Condition
     *
     * @return array $conditon_flg
     */
    function isPathStepCondition($operator = null, $check = null, $value = null)
    {
        $conditon_flg = false;
        if ($operator == GRN_WORKFLOW_CONDITION_TYPE_CHECK_EQUAL) {
            if (GRN_WORKFLOW_CONDITION_ITEM_CHECKED == $value) {
                $conditon_flg = true;
            }
        } elseif ($operator == GRN_WORKFLOW_CONDITION_TYPE_CHECK_NOT_EQUAL) {
            if (GRN_WORKFLOW_CONDITION_ITEM_NOT_CHECKED == $value) {
                $conditon_flg = true;
            }
        }

        return $conditon_flg;
    }

    /**
     * Get Item data
     *
     * @param  array $item //Item Information
     *
     * @return int    $item_data_value           //Result
     */
    function getItemData(& $item)
    {
        $item_data_value = $item[GRN_WORKFLOW_COLUMN_NUMBER];

        return $item_data_value;
    }
}

/**
 * Numeric Item Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_Item_Util_Numeric extends GRN_Workflow_Item_Util_Base
{

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
        //Initialize Foreign_key
        $this->_foreign_key = 'grn.workflow.numeric';

        //Initialize Template Names
        $this->_set_template = 'workflow/item/set_numeric.csp';
        $this->_detail_template = 'workflow/item/detail_numeric.csp';
        $this->_view_template = 'workflow/item/view_numeric.csp';
    }

    /**
     * Set Item Data
     *
     * @param  array $item          //Item Information
     * @param  array $property_list //Property List
     * @param  bool  $chack_value   //Check Value Flag
     *
     * @return bool   $result                    //Result
     */
    function setItemData(& $item, & $property_list, $check_value = true)
    {
        $parsed_input_data = @ $item['number'];

        //Check and Set Item Data
        if ($check_value) {
            $this->checkItemData($parsed_input_data, $item);
        }
        $property_list[GRN_WORKFLOW_COLUMN_NUMBER] = $parsed_input_data;
        $property_list[GRN_WORKFLOW_COLUMN_TEXT] = null;

        return true;
    }

    /**
     * Perse Item Data
     *
     * @param  mixed  $input_data        //Input Data
     * @param  string $input_data_prefix //Input Data Prefix
     * @param  array  $item              //Item Information Array
     *
     * @return mixed  $parsed_input_data         //Parsed Input Data
     */
    function parseItemData(& $input_data, $input_data_prefix, & $item)
    {
        //Parse Input Data
        $key = sprintf('%s_%s', $input_data_prefix, $item['iid']);
        $parsed_input_data = cb_at($input_data, $key);

        require_once('fw/string_util.csp');
        $parsed_input_data = cb_trim($parsed_input_data);

        //Apply Effective Figures
        if (is_numeric($parsed_input_data)) {
            $parsed_input_data = bcmul($parsed_input_data, 1,
                $item['settings']['effective_figures']);
        }


        //Set Parsed Input Data to Item
        $item['number'] = $parsed_input_data;

        //Set Parsed Input Data
        $item_key = sprintf('%s_%s', $input_data_prefix,
            $item['iid']);
        $input_data[$item_key] = $parsed_input_data;

        //Return Parsed Input Data
        return $parsed_input_data;
    }

    /**
     * Check Item Data
     *
     * @param  mixed $parsed_input_data //Parsed Input Data
     * @param  array $item              //Item Information Array
     *
     * @return bool   $result                    //Result
     */
    function checkItemData($parsed_input_data, $item)
    {
        require_once('workflow/error_code.csp');

        //Check Required
        if ($item['required'] == 1 && $item['attach_file'] == 1) {
            require_once('fw/string_util.csp');
            cb_trim_check($parsed_input_data,
                E_GRN_WRKF_ITEMDATA_NOT_INPUT_NECESSARY);
        }

        //Check Charactor Type
        if ($item['settings']['input_numbers'] == 1
            && is_numeric($parsed_input_data)
        ) {
            if (is_numeric($item['settings']['max_input_number'])
                && $parsed_input_data > $item['settings']['max_input_number']
            ) {
                //Invalid Item Data
                cb_throw_error(E_GRN_WRKF_ITEM_INVALID_INPUT_DATA);
            }
            if (is_numeric($item['settings']['min_input_number'])
                && $parsed_input_data < $item['settings']['min_input_number']
            ) {
                //Invalid Item Data
                cb_throw_error(E_GRN_WRKF_ITEM_INVALID_INPUT_DATA);
            }
        }

        return;
    }

    /**
     * Get Item Condition Ooperators
     *
     * @return array $condition_operators
     */
    function getConditionOperators()
    {
        $condition_operators = [
            GRN_WORKFLOW_CONDITION_TYPE_NUMERIC_EQUAL     => cb_msg(GRN_WORKFLOW_MODULE_ID,
                'condition_operator_4'),
            GRN_WORKFLOW_CONDITION_TYPE_NUMERIC_NOT_EQUAL => cb_msg(GRN_WORKFLOW_MODULE_ID,
                'condition_operator_5'),
            GRN_WORKFLOW_CONDITION_TYPE_NUMERIC_BIGGER    => cb_msg(GRN_WORKFLOW_MODULE_ID,
                'condition_operator_6'),
            GRN_WORKFLOW_CONDITION_TYPE_NUMERIC_MORETHAN  => cb_msg(GRN_WORKFLOW_MODULE_ID,
                'condition_operator_7'),
            GRN_WORKFLOW_CONDITION_TYPE_NUMERIC_SMALLER   => cb_msg(GRN_WORKFLOW_MODULE_ID,
                'condition_operator_8'),
            GRN_WORKFLOW_CONDITION_TYPE_NUMERIC_LESSTHAN  => cb_msg(GRN_WORKFLOW_MODULE_ID,
                'condition_operator_9'),
        ];

        return $condition_operators;
    }

    /**
     * Is Path Step Condition
     *
     * @return array $conditon_flg
     */
    function isPathStepCondition($operator = null, $check = null, $value = null)
    {

        $conditon_flg = false;
        if ($operator == GRN_WORKFLOW_CONDITION_TYPE_NUMERIC_EQUAL) {
            if ($check == $value) {
                $conditon_flg = true;
            }
        } elseif ($operator == GRN_WORKFLOW_CONDITION_TYPE_NUMERIC_NOT_EQUAL) {
            if ($check != $value) {
                $conditon_flg = true;
            }
        } elseif ($operator == GRN_WORKFLOW_CONDITION_TYPE_NUMERIC_BIGGER) {
            if ($check < $value) {
                $conditon_flg = true;
            }
        } elseif ($operator == GRN_WORKFLOW_CONDITION_TYPE_NUMERIC_MORETHAN) {
            if ($check <= $value) {
                $conditon_flg = true;
            }
        } elseif ($operator == GRN_WORKFLOW_CONDITION_TYPE_NUMERIC_SMALLER) {
            if ($check > $value) {
                $conditon_flg = true;
            }
        } elseif ($operator == GRN_WORKFLOW_CONDITION_TYPE_NUMERIC_LESSTHAN) {
            if ($check >= $value) {
                $conditon_flg = true;
            }
        }

        return $conditon_flg;
    }

    /**
     * Get Item data
     *
     * @param  array $item //Item Information
     *
     * @return int    $item_data_value           //Result
     */
    function getItemData(& $item)
    {
        $item_data_value = $item[GRN_WORKFLOW_COLUMN_NUMBER];

        return $item_data_value;
    }
}

/**
 * Calc Numeric Item Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_Item_Util_Calc_Numeric extends GRN_Workflow_Item_Util_Base
{
    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
        //Initialize Foreign_key
        $this->_foreign_key = 'grn.workflow.calc_numeric';

        //Initialize Template Names
        $this->_set_template = 'workflow/item/set_calc_numeric.csp';
        $this->_detail_template = 'workflow/item/detail_calc_numeric.csp';
        $this->_view_template = 'workflow/item/view_calc_numeric.csp';
    }

    /**
     * Set Item Data
     *
     * @param  array $item          //Item Information
     * @param  array $property_list //Property List
     * @param  bool  $chack_value   //Check Value Flag
     *
     * @return bool   $result                    //Result
     */
    function setItemData(& $item, & $property_list, $check_value = true)
    {
        $parsed_input_data = @ $item['number'];

        //Check and Set Item Data
        if ($check_value) {
            $this->checkItemData($parsed_input_data, $item);
        }
        $property_list[GRN_WORKFLOW_COLUMN_NUMBER] = $parsed_input_data;
        $property_list[GRN_WORKFLOW_COLUMN_TEXT] = null;

        return true;
    }

    /**
     * Perse Item Data Operator
     *
     * @param  mixed  $input_data        //Input Data
     * @param  string $input_data_prefix //Input Data Prefix
     * @param  array  $item              //Item Information Array
     *
     * @return mixed  $parsed_input_data         //Parsed Input Data
     */
    function _parseItemDataOperator(& $input_data, $input_data_prefix, & $item)
    {
        $parsed_input_data = null;

        //Get Calc Operator Settings
        $calc_operator = $item['settings']['calc_operator_by_item_data_id'] ??
                         $item['settings']['calc_operator'];

        $operand1_value = array_key_exists('operand1_value', $calc_operator)
            ? $this->_numericval($calc_operator['operand1_value']) : "0";
        $operand2_value = array_key_exists('operand2_value', $calc_operator)
            ? $this->_numericval($calc_operator['operand2_value']) : "0";

        //Create Operand key
        if ($item['table'] == GRN_WORKFLOW_TABLE_ITEM) {
            $operand1_key = sprintf('%s_%s', $input_data_prefix,
                @$calc_operator['operand1_type']);
            $operand2_key = sprintf('%s_%s', $input_data_prefix,
                @$calc_operator['operand2_type']);
        } else {
            $operand1_key = 'item_0';
            $operand2_key = 'item_0';
            require_once('workflow/itemdata_logic_base.csp');
            $item_data_logic_base
                = GRN_Workflow_ItemData_Logic_Base::getInstance();
            $item_data_list
                =& $item_data_logic_base->getList($item['petition']);
            foreach (array_keys($item_data_list) as $item_data_id) {
                if (isset($item['settings']['calc_operator_by_item_data_id'])) {
                    $item_id = $item_data_id;
                } else {
                    $item_id = $item_data_list[$item_data_id]['col_item'];
                }

                if (@$calc_operator['operand1_type'] == $item_id) {
                    $operand1_key = sprintf('%s_%s', $input_data_prefix,
                        $item_data_id);
                }
                if (@$calc_operator['operand2_type'] == $item_id) {
                    $operand2_key = sprintf('%s_%s', $input_data_prefix,
                        $item_data_id);
                }
            }
        }

        //Get Operand1 Value
        if ($operand1_key != 'item_0') {
            if (array_key_exists($operand1_key, $input_data)) {
                if ( ! is_array($input_data[$operand1_key])) {
                    $operand1_value
                        = $this->_numericval($input_data[$operand1_key]);
                } else {
                    $operand1_value
                        = $this->_numericval($input_data[$operand1_key]['fare']);
                }
            }
        }

        //Get Operand2 Value
        if ($operand2_key != 'item_0') {
            if (array_key_exists($operand2_key, $input_data)) {
                if ( ! is_array($input_data[$operand2_key])) {
                    $operand2_value
                        = $this->_numericval($input_data[$operand2_key]);
                } else {
                    $operand2_value
                        = $this->_numericval($input_data[$operand2_key]['fare']);
                }
            }
        }

        //Calc by Operator
        switch ($calc_operator['operator']) {
            case '0':
                $parsed_input_data = bcadd($operand1_value, $operand2_value,
                    $item['settings']['effective_figures']);
                break;
            case '1':
                $parsed_input_data = bcsub($operand1_value, $operand2_value,
                    $item['settings']['effective_figures']);
                break;
            case '2':
                $parsed_input_data = bcmul($operand1_value, $operand2_value,
                    $item['settings']['effective_figures']);
                break;
            case '3':
                if ($operand2_value != 0) {
                    $parsed_input_data = bcdiv($operand1_value, $operand2_value,
                        $item['settings']['effective_figures']);
                } else {
                    $parsed_input_data = null;
                }
                break;
            default:
                $parsed_input_data = bcadd($operand1_value, $operand2_value,
                    $item['settings']['effective_figures']);
                break;
        }

        //Return Parsed Input Data
        return $parsed_input_data;
    }

    /**
     * Perse Item Data Total
     *
     * @param  mixed  $input_data        //Input Data
     * @param  string $input_data_prefix //Input Data Prefix
     * @param  array  $item              //Item Information Array
     *
     * @return mixed  $parsed_input_data         //Parsed Input Data
     */
    function _parseItemDataTotal(& $input_data, $input_data_prefix, & $item)
    {
        $parsed_input_data = null;

        //Get Calc Total Settings
        $calc_total = $item['settings']['calc_total_by_item_data_id'] ??
                      $item['settings']['calc_total'];

        //Convert Total Value
        if ($item['table'] != GRN_WORKFLOW_TABLE_ITEM) {
            require_once('workflow/itemdata_logic_base.csp');
            $item_data_logic_base
                = GRN_Workflow_ItemData_Logic_Base::getInstance();
            $item_data_list
                =& $item_data_logic_base->getList($item['petition']);
            $reverse_values = array_flip($calc_total['values']);
            foreach (array_keys($item_data_list) as $item_data_id) {
                if (isset($item['settings']['calc_total_by_item_data_id'])) {
                    $item_id = $item_data_id;
                } else {
                    $item_id = $item_data_list[$item_data_id]['col_item'];
                }
                if (array_key_exists($item_id, $reverse_values)) {
                    $key = $reverse_values[$item_id];
                    $calc_total['values'][$key] = $item_data_id;
                }
            }
        }

        //Calc Total
        foreach (array_keys($calc_total['values']) as $key) {
            $item_key = sprintf('%s_%s', $input_data_prefix,
                $calc_total['values'][$key]);
            if ( ! array_key_exists($item_key, $input_data)) {
                continue;
            }
            if ( ! is_array($input_data[$item_key])) {
                $inpuut_data_value = $this->_numericval($input_data[$item_key]);
                $parsed_input_data = bcadd($parsed_input_data,
                    $inpuut_data_value, $item['settings']['effective_figures']);
            } else {
                $inpuut_data_value
                    = $this->_numericval($input_data[$item_key]['fare']);
                $parsed_input_data = bcadd($parsed_input_data,
                    $inpuut_data_value, $item['settings']['effective_figures']);
            }
        }

        //Return Parsed Input Data
        return $parsed_input_data;
    }

    /**
     * Perse Item Data
     *
     * @param  mixed  $input_data        //Input Data
     * @param  string $input_data_prefix //Input Data Prefix
     * @param  array  $item              //Item Information Array
     *
     * @return mixed  $parsed_input_data         //Parsed Input Data
     */
    function parseItemData(& $input_data, $input_data_prefix, & $item)
    {
        $parsed_input_data = null;

        if ($item['settings']['calc_type'] == 0) {
            $parsed_input_data = $this->_parseItemDataOperator($input_data,
                $input_data_prefix, $item);
        } else {
            $parsed_input_data = $this->_parseItemDataTotal($input_data,
                $input_data_prefix, $item);
        }

        //Set Parsed Input Data to Item
        $item['number'] = $parsed_input_data;

        //Set Parsed Item Data
        $item_key = sprintf('%s_%s', $input_data_prefix,
            $item['iid']);
        $input_data[$item_key] = $parsed_input_data;

        //Return Parsed Input Data 
        return $parsed_input_data;
    }

    /**
     * Check Item Data
     *
     * @param  mixed $parsed_input_data //Parsed Input Data
     * @param  array $item              //Item Information Array
     *
     * @return bool   $result                    //Result
     */
    function checkItemData($parsed_input_data, $item)
    {
        //Always TRUE
        return;
    }

    /**
     * 渡された文字列を数字として認識可能な文字列にして返す
     *
     * @access    private
     *
     * @param     string $inValue 数字文字列
     *
     * @return    string    数字として認識可能な文字列。渡された文字列が認識不可能な場合は"0"を返す。
     */
    private function _numericval($inValue)
    {
        require_once('fw/string_util.csp');
        $result = cb_trim($inValue);
        if (is_numeric($result) === false) {
            $result = "0";
        }

        return $result;
    }

    /**
     * Convert Settings
     *
     * @param  int   $item   //Item
     * @param  array $id_map //Old -> New Item ID Map
     *
     * @return none
     */
    function convertSettings(& $item, $id_map)
    {
        //Get Settings
        $settings = $item[GRN_WORKFLOW_COLUMN_SETTINGS];
        if ($settings) {
            //Unserialize Settings
            $settings = cb_unserialize($settings, ["allowed_classes" => false]);

            //Check Calc Type
            if ($settings['calc_type'] == 0) {
                //Convert Operand1 Type
                if (isset($settings['calc_operator']['operand1_type'])
                    && $settings['calc_operator']['operand1_type'] != 0
                ) {
                    if (array_key_exists($settings['calc_operator']['operand1_type'],
                        $id_map)
                    ) {
                        $settings['calc_operator']['operand1_type']
                            = $id_map[$settings['calc_operator']['operand1_type']];
                    } else {
                        unset($settings['calc_operator']['operand1_type']);
                    }
                }
                //Convert Operand2 Type
                if (isset($settings['calc_operator']['operand2_type'])
                    && $settings['calc_operator']['operand2_type'] != 0
                ) {
                    if (array_key_exists($settings['calc_operator']['operand2_type'],
                        $id_map)
                    ) {
                        $settings['calc_operator']['operand2_type']
                            = $id_map[$settings['calc_operator']['operand2_type']];
                    } else {
                        unset($settings['calc_operator']['operand2_type']);
                    }
                }
            } else {
                //Convert Total Values
                foreach (array_keys($settings['calc_total']['values']) as $key) {
                    if (array_key_exists($settings['calc_total']['values'][$key],
                        $id_map)
                    ) {
                        $settings['calc_total']['values'][$key]
                            = $id_map[$settings['calc_total']['values'][$key]];
                    } else {
                        unset($settings['calc_total']['values'][$key]);
                    }
                }
            }

            //Serialize and Set Settings
            $item[GRN_WORKFLOW_COLUMN_SETTINGS] = serialize($settings);
        }

        return;
    }

    /**
     *
     * Format the value for JS customization
     *
     * @param  string $number  //number that need format
     * @param  array  $setting //Setting Information Array
     *
     * @return string value after format
     */
    public static function formatValueForJS($number, $setting)
    {
        $thousandsSep = '';
        $decimals = (int)$setting["effective_figures"];
        $decPoint = '.';
        $minusChar = '-';
        $isDecimalZeroPadding = true;

        require_once('fw/string_util.csp');

        return cb_number_format($number, $decimals, $decPoint, $thousandsSep,
            $minusChar,
            $isDecimalZeroPadding);
    }

    /**
     * Get Item Condition Ooperators
     *
     * @return array $condition_operators
     */
    function getConditionOperators()
    {
        $condition_operators = [
            GRN_WORKFLOW_CONDITION_TYPE_NUMERIC_EQUAL     => cb_msg(GRN_WORKFLOW_MODULE_ID,
                'condition_operator_4'),
            GRN_WORKFLOW_CONDITION_TYPE_NUMERIC_NOT_EQUAL => cb_msg(GRN_WORKFLOW_MODULE_ID,
                'condition_operator_5'),
            GRN_WORKFLOW_CONDITION_TYPE_NUMERIC_BIGGER    => cb_msg(GRN_WORKFLOW_MODULE_ID,
                'condition_operator_6'),
            GRN_WORKFLOW_CONDITION_TYPE_NUMERIC_MORETHAN  => cb_msg(GRN_WORKFLOW_MODULE_ID,
                'condition_operator_7'),
            GRN_WORKFLOW_CONDITION_TYPE_NUMERIC_SMALLER   => cb_msg(GRN_WORKFLOW_MODULE_ID,
                'condition_operator_8'),
            GRN_WORKFLOW_CONDITION_TYPE_NUMERIC_LESSTHAN  => cb_msg(GRN_WORKFLOW_MODULE_ID,
                'condition_operator_9'),
        ];

        return $condition_operators;
    }

    /**
     * Is Path Step Condition
     *
     * @return array $conditon_flg
     */
    function isPathStepCondition($operator = null, $check = null, $value = null)
    {

        $conditon_flg = false;
        if ($operator == GRN_WORKFLOW_CONDITION_TYPE_NUMERIC_EQUAL) {
            if ($check == $value) {
                $conditon_flg = true;
            }
        } elseif ($operator == GRN_WORKFLOW_CONDITION_TYPE_NUMERIC_NOT_EQUAL) {
            if ($check != $value) {
                $conditon_flg = true;
            }
        } elseif ($operator == GRN_WORKFLOW_CONDITION_TYPE_NUMERIC_BIGGER) {
            if ($check < $value) {
                $conditon_flg = true;
            }
        } elseif ($operator == GRN_WORKFLOW_CONDITION_TYPE_NUMERIC_MORETHAN) {
            if ($check <= $value) {
                $conditon_flg = true;
            }
        } elseif ($operator == GRN_WORKFLOW_CONDITION_TYPE_NUMERIC_SMALLER) {
            if ($check > $value) {
                $conditon_flg = true;
            }
        } elseif ($operator == GRN_WORKFLOW_CONDITION_TYPE_NUMERIC_LESSTHAN) {
            if ($check >= $value) {
                $conditon_flg = true;
            }
        }

        return $conditon_flg;
    }

    /**
     * Get Item data
     *
     * @param  array $item //Item Information
     *
     * @return int    $item_data_value           //Result
     */
    function getItemData(& $item)
    {
        $item_data_value = $item[GRN_WORKFLOW_COLUMN_NUMBER];

        return $item_data_value;
    }

    /**
     * Export Settings
     *
     * Overwrite Item ID with Item Serial Number
     *
     * @param  array $setting_list    //Item Setting List
     * @param  array $id2serialno_map //ID -> Serial No. Map
     *
     * @return array                             //Setting List transformed from IDs of Refference Items into Serial No.
     */
    function exportSettings(& $setting_list, & $id2serialno_map)
    {
        $treated_setting_list = $setting_list;

        //Check Calc Type
        if ($setting_list['calc_type'] == 0) {
            //Export Operand1 Type
            if (isset($setting_list['calc_operator']['operand1_type'])
                && $setting_list['calc_operator']['operand1_type'] != 0
            ) {
                $calc_item_serialno
                    = array_key_exists($setting_list['calc_operator']['operand1_type'],
                    $id2serialno_map)
                    ? ($id2serialno_map[$setting_list['calc_operator']['operand1_type']])
                    : 0;
                $treated_setting_list['calc_operator']['operand1_type']
                    = $calc_item_serialno;
            }
            //Export Operand2 Type
            if (isset($setting_list['calc_operator']['operand2_type'])
                && $setting_list['calc_operator']['operand2_type'] != 0
            ) {
                $calc_item_serialno
                    = array_key_exists($setting_list['calc_operator']['operand2_type'],
                    $id2serialno_map)
                    ? ($id2serialno_map[$setting_list['calc_operator']['operand2_type']])
                    : 0;
                $treated_setting_list['calc_operator']['operand2_type']
                    = $calc_item_serialno;
            }
        } else {
            //Export Total Values
            foreach (array_keys($setting_list['calc_total']['values']) as $key) {
                $index = 'value' . $key;
                if ( ! array_key_exists($setting_list['calc_total']['values'][$key],
                    $id2serialno_map)
                ) {
                    continue;
                }
                $treated_setting_list['calc_total']['values'][$index]
                    = $id2serialno_map[$setting_list['calc_total']['values'][$key]];
                unset($treated_setting_list['calc_total']['values'][$key]);
            }
        }

        return $treated_setting_list;
    }

    /**
     * Import Settings
     *
     * @param  array $setting_list    //Item Setting List
     * @param  array $serialno2id_map //Serial No. -> ID Map
     *
     * @return array                            //Item Setting List treated by some means
     */
    function importSettings(& $setting_list, & $serialno2id_map)
    {
        $treated_setting_list = $setting_list;

        //Check Calc Type
        if ($setting_list['calc_type'] == 0) {
            //Export Operand1 Type
            if (isset($setting_list['calc_operator']['operand1_type'])
                && $setting_list['calc_operator']['operand1_type'] != 0
            ) {
                $treated_setting_list['calc_operator']['operand1_type']
                    = $serialno2id_map[$setting_list['calc_operator']['operand1_type']];
            }
            //Export Operand2 Type
            if (isset($setting_list['calc_operator']['operand2_type'])
                && $setting_list['calc_operator']['operand2_type'] != 0
            ) {
                $treated_setting_list['calc_operator']['operand2_type']
                    = $serialno2id_map[$setting_list['calc_operator']['operand2_type']];
            }
        } else {
            foreach ($setting_list['calc_total']['values'] as $k => $v) {
                if (array_key_exists($v, $serialno2id_map)) {
                    $treated_setting_list['calc_total']['values'][]
                        = $serialno2id_map[$v];
                }
                unset($treated_setting_list['calc_total']['values'][$k]);
            }
        }

        return $treated_setting_list;
    }
}

/**
 * Date Item Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_Item_Util_Date extends GRN_Workflow_Item_Util_Base
{
    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
        //Initialize Foreign_key
        $this->_foreign_key = 'grn.workflow.date';

        //Initialize Template Names
        $this->_set_template = 'workflow/item/set_date.csp';
        $this->_detail_template = 'workflow/item/detail_date.csp';
        $this->_view_template = 'workflow/item/view_date.csp';
    }

    /**
     * Set Item Data
     *
     * @param  array $item          //Item Information
     * @param  array $property_list //Property List
     * @param  bool  $chack_value   //Check Value Flag
     *
     * @return bool   $result                    //Result
     */
    function setItemData(& $item, & $property_list, $check_value = true)
    {
        $parsed_input_data = @ $item['text'];

        //Check and Set Item Data
        if ($check_value) {
            $this->checkItemData($parsed_input_data, $item);
        }
        $property_list[GRN_WORKFLOW_COLUMN_NUMBER] = null;
        $property_list[GRN_WORKFLOW_COLUMN_TEXT] = $parsed_input_data;

        return true;
    }

    /**
     * Perse Item Data
     *
     * @param  mixed  $input_data        //Input Data
     * @param  string $input_data_prefix //Input Data Prefix
     * @param  array  $item              //Item Information Array
     *
     * @return mixed  $parsed_input_data         //Parsed Input Data
     */
    function parseItemData(& $input_data, $input_data_prefix, & $item)
    {
        $parsed_input_data = [];

        $calendar_keys
            = [
            "year"  => sprintf("%s_%s_year", $input_data_prefix, $item['iid']),
            "month" => sprintf("%s_%s_month", $input_data_prefix, $item['iid']),
            "day"   => sprintf("%s_%s_day", $input_data_prefix, $item['iid'])
        ];

        if (isset($item['settings']['date_type'])
            && $item['settings']['date_type'] == 1
        ) {
            $calendar_keys['hour'] = sprintf("%s_%s_hour", $input_data_prefix,
                $item['iid']);
            $calendar_keys['minute'] = sprintf("%s_%s_minute",
                $input_data_prefix, $item['iid']);
        }

        foreach ($calendar_keys as $calendar => $key) {
            if (isset($input_data[$key])) {
                $parsed_input_data[$calendar]
                    = $input_data[$key];
            } else {
                $parsed_input_data[$calendar] = null;
            }
        }

        //Set Parsed Input Data to Item
        $item['text'] = serialize($parsed_input_data);

        //Set Parsed Input Data
        $input_data[sprintf('%s_%s', $input_data_prefix, $item['iid'])]
            = serialize($parsed_input_data);

        //Return Parsed Input Data 
        return $parsed_input_data;
    }

    /**
     * Check Item Data
     *
     * @param  mixed $parsed_input_data //Parsed Input Data
     * @param  array $item              //Item Information Array
     *
     * @return bool   $result                    //Result
     */
    function checkItemData($parsed_input_data, $item)
    {
        require_once('workflow/error_code.csp');

        //Check Required
        $check_required = ($item['attach_file'] == 1) ? true : false;

        //Check Required
        if ($item['required'] == 1 && $check_required) {
            if (is_string($parsed_input_data)) {
                $parsed_input_data = cb_unserialize($parsed_input_data,
                    ["allowed_classes" => false]);
            }
            $year = cb_at($parsed_input_data, 'year', '');
            require_once('fw/string_util.csp');
            cb_trim_check($year, E_GRN_WRKF_ITEMDATA_NOT_INPUT_NECESSARY);
        }
    }

    /**
     * Get Item data
     *
     * @param  array $item //Item Information
     *
     * @return object $item_data_value           //item_data_value :year,month,day
     */
    function getItemData(& $item)
    {
        $array_date = cb_unserialize($item[GRN_WORKFLOW_COLUMN_TEXT],
            ["allowed_classes" => false]);
        $array_setting_date
            = cb_unserialize($item[GRN_WORKFLOW_COLUMN_SETTINGS],
            ["allowed_classes" => false]);

        require_once('fw/date.csp');
        if (isset($array_setting_date['date_type'])
            && $array_setting_date['date_type'] == 1
        ) {
            $item_data_value = new CB_DateTime();
            $item_data_value->hour = cb_at($array_date, 'hour', '');
            $item_data_value->minute = cb_at($array_date, 'minute', '');
        } else {
            $item_data_value = new CB_Date();
        }

        $item_data_value->year = cb_at($array_date, 'year', 0);
        $item_data_value->month = cb_at($array_date, 'month', 0);
        $item_data_value->day = cb_at($array_date, 'day', 0);

        return $item_data_value;
    }
}

/**
 * File Item Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_Item_Util_File extends GRN_Workflow_Item_Util_Base
{
    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
        //Initialize Foreign_key
        $this->_foreign_key = 'grn.workflow.file';

        //Initialize Template Names
        $this->_set_template = 'workflow/item/set_file.csp';
        $this->_detail_template = 'workflow/item/detail_file.csp';
        $this->_view_template = 'workflow/item/view_file.csp';
    }

    /**
     * Set Item data File
     *
     * @param  array $item_data_id  //Item Data ID
     * @param  array $item          //Item Information
     * @param  array $property_list //Property List
     * @param  bool  $chack_value   //Check Value Flag
     *
     * @return bool   $result                    //Result
     */
    function setItemDataFile(
        $item_data_id,
        & $item,
        & $property_list,
        $check_value = true
    ) {
        $parsed_input_data = @ $item['files'];

        //Check Parsed Input Value
        if ($check_value) {
            $this->checkItemData($parsed_input_data, $item);
        }

        //Check Item Data
        if (array_key_exists('item_data', $item)) {
            //Get Item Data File Logic
            require_once('workflow/itemdatafile_logic.csp');
            $item_data_file_logic
                = GRN_Workflow_ItemDataFile_Logic::getInstance();

            //Delete All Item Data File
            $item_data_file_logic->deleteAll($item['item_data']);
        }

        //Check Input data
        if (is_array($parsed_input_data)) {
            //Get Session Key
            require_once('grn/controller.csp');
            $tmp_key = grn_get_temporary_key();

            //Get Attached Session File Item List
            require_once('fw/session_manager.csp');
            require_once('grn/controller.csp');
            $session_manager = CB_SessionManager::getInstance();
            $session
                = $session_manager->getSession($item['page_name']
                                               . $tmp_key);
            $attached_file_item_list
                = $session->getFiles('attached_session_file_item');

            //Get Item Data File Logic
            require_once('workflow/itemdatafile_logic.csp');
            $item_data_file_logic
                = GRN_Workflow_ItemDataFile_Logic::getInstance();

            require_once('grn/upload.csp');
            $uploaded_files
                = GRN_UploadFile::getUploadedFiles($item['upload_ticket'],
                array_keys($parsed_input_data), false);

            //Add Item Data File
            foreach (array_keys($parsed_input_data) as $file_id) {
                $file = @$attached_file_item_list[$file_id];
                if (is_null($file)) {
                    $file = @$uploaded_files[$file_id];
                }

                if ( ! is_null($file)) {
                    $item_data_file_logic->add($item_data_id, $file);
                }
            }
        }

        return true;
    }

    /**
     * Perse Item Data
     *
     * @param  mixed  $input_data        //Input Data
     * @param  string $input_data_prefix //Input Data Prefix
     * @param  array  $item              //Item Information Array
     *
     * @return mixed  $parsed_input_data         //Parsed Input Data
     */
    function parseItemData(& $input_data, $input_data_prefix, & $item)
    {
        $parsed_input_data = null;
        $validation_data = '';

        //Get All Attached File List
        static $all_attached_file_list = null;
        require_once('workflow/controller_util.csp');
        if (is_null($all_attached_file_list)) {
            $all_attached_file_list
                = grn_workflow_get_attached_file_info(cb_get_pagename());
        }

        //Get Attached Files Information
        $key = sprintf('%s_%s', $input_data_prefix, $item['iid']);
        if (array_key_exists($key, $all_attached_file_list)) {
            $parsed_input_data = $all_attached_file_list[$key];
            $validation_data = count($parsed_input_data);
        }

        $input_name = 'item_' . $item['iid'] . '_file';

        require_once('grn/upload.csp');
        $files = GRN_UploadFile::getUploadedFiles(@$input_data['upload_ticket'],
            @$input_data['upload_fileids'], false);

        //Get already uploaded files when come back from Set-Route screen
        $files2
            = GRN_UploadFile::getUploadedFiles(@$input_data['upload_ticket'],
            @$input_data['fids'], false);
        $files = array_merge($files, $files2);

        foreach ($files as $key => $file) {
            if (strpos($key, $input_name) === 0) {
                $info = [];
                $info['name'] = $file->get('name');
                $info['size'] = $file->get('size');
                $info['type'] = strtolower(get_class($file));
                $parsed_input_data[$key] = $info;
            }
        }
        $validation_data = count($parsed_input_data);

        //Set Parsed Input Data to Item
        $item['files'] = $parsed_input_data;
        $item['page_name'] = cb_get_pagename();
        $item['upload_ticket'] = @$input_data['upload_ticket'];

        //Set Parsed Input Data
        $item_key = sprintf('%s_%s', $input_data_prefix,
            $item['iid']);
        $input_data[$item_key] = $parsed_input_data;

        //Set Validation Data
        $item_key = sprintf('%s_%s_file', $input_data_prefix,
            $item['iid']);
        $input_data[$item_key] = $validation_data;

        //Return Parsed Input Data 
        return $parsed_input_data;
    }

    /**
     * Check Item Data
     *
     * @param  mixed $parsed_input_data //Parsed Input Data
     * @param  array $item              //Item Information Array
     *
     * @return bool   $result                    //Result
     */
    function checkItemData($parsed_input_data, $item)
    {
        require_once('workflow/error_code.csp');

        //Get Attached File Count
        if ( ! array_key_exists('idid', $item)) {
            $file_count = count($parsed_input_data);
        } else {
            require_once('workflow/itemdatafile_logic_base.csp');
            $item_data_file_logic_base
                = GRN_Workflow_ItemDataFile_Logic_Base::getInstance();
            $file_count = $item_data_file_logic_base->getCount($item['idid']);
            $file_count = $file_count + count($parsed_input_data);
        }

        //Check Required
        $check_required = ($item['attach_file'] == 1) ? true : false;

        //var_dump($file_count);die();

        //Check Required
        if ($item['required'] == 1 && $check_required) {
            if ($file_count === 0) {
                cb_throw_error(E_GRN_WRKF_ITEMDATA_NOT_INPUT_NECESSARY);
            }
        }

        //Check File Count
        if (is_numeric($item['settings']['max_files'])) {
            if ($file_count > $item['settings']['max_files']) {
                //Invalid Item Data
                cb_throw_error(E_GRN_WRKF_ITEM_INVALID_INPUT_DATA);
            }
        }
    }

    /**
     * Get Item data
     *
     * @param  array $item //Item Information =>array('_id'=>'', 'item_data_file_id'=>'')
     *
     * @return array  $item_data_value           //Item Data Value =>array('_id'=>'', 'file_info'=>array('name'=>'','size'=>'','mime'=>''))
     */
    function &getItemData(& $item)
    {
        if (array_key_exists('_id', $item)) {
            $item_data_id = $item['_id'];
            $item_data_value = $this->getItemDataFile($item_data_id, $item);
        } else {
            $ret = false;

            return $ret;
        }

        return $item_data_value;
    }

    /**
     * Get Item data File
     *
     * @param  int   $item_data_id //Item Data ID
     * @param  array $item         //Item Information =>array('item_data_file_id'=>'')
     * @param  bool  $refresh      //Refresh Flag
     *
     * @return array  $file_info                 //file_info =>array('_id'=>'', 'file_info'=>array('name'=>'','size'=>'','mime'=>''))
     */
    function &getItemDataFile($item_data_id, & $item, $refresh = false)
    {
        $file_info = null;

        $item_data_file_id = $item['file_id'];
        if ($item_data_file_id) {
            $translation_map = [
                '_id'       => '_id',
                'file'      => 'file',
                'file_info' => 'file_info'    // name, size, mime
            ];

            require_once('workflow/controller_util.csp');
            $itemdatafile_controller_utility
                = new GRN_Workflow_ItemDataFile_Controller_Utility();
            $file_info
                = $itemdatafile_controller_utility->getView($item_data_file_id,
                $translation_map, $item_data_id, $refresh);
        }

        return $file_info;
    }
}

/**
 * Route Search Item Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_Item_Util_Route_Search extends GRN_Workflow_Item_Util_Base
{
    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
        //Initialize Foreign_key
        $this->_foreign_key = 'grn.workflow.route_search';

        //Initialize Template Names
        $this->_set_template = 'workflow/item/set_route_search.csp';
        $this->_detail_template = 'workflow/item/detail_route_search.csp';
        $this->_view_template = 'workflow/item/view_route_search.csp';
    }

    /**
     * Set Item Data
     *
     * @param  array $item          //Item Information
     * @param  array $property_list //Property List
     * @param  bool  $chack_value   //Check Value Flag
     *
     * @return bool   $result                    //Result
     */
    function setItemData(& $item, & $property_list, $check_value = true)
    {
        $parsed_input_data['route'] = @ $item['text'];
        $parsed_input_data['fare'] = @ $item['number'];

        //Check and Set Item Data
        if ($check_value) {
            $this->checkItemData($parsed_input_data, $item);
        }

        $property_list[GRN_WORKFLOW_COLUMN_TEXT] = $parsed_input_data['route'];
        $property_list[GRN_WORKFLOW_COLUMN_NUMBER] = $parsed_input_data['fare'];

        return true;
    }

    /**
     * Perse Item Data
     *
     * @param  mixed  $input_data        //Input Data
     * @param  string $input_data_prefix //Input Data Prefix
     * @param  array  $item              //Item Information Array
     *
     * @return mixed  $parsed_input_data         //Parsed Input Data
     */
    function parseItemData(& $input_data, $input_data_prefix, & $item)
    {
        $parsed_input_data = null;

        //Parse Input Data
        $parsed_input_data['route'] = null;
        $parsed_input_data['fare'] = null;
        $key_route = sprintf('%s_%s_route', $input_data_prefix,
            $item['iid']);
        $key_fare = sprintf('%s_%s_fare', $input_data_prefix,
            $item['iid']);
        if (array_key_exists($key_route, $input_data)) {
            $parsed_input_data['route'] = $input_data[$key_route];
        }
        if (array_key_exists($key_fare, $input_data)) {
            $parsed_input_data['fare'] = $input_data[$key_fare];
        }

        //Set Parsed Input Data to Item
        $item['text'] = $parsed_input_data['route'];
        $item['number'] = $parsed_input_data['fare'];

        //Set Parsed Input Data
        $item_key = sprintf('%s_%s', $input_data_prefix,
            $item['iid']);
        $input_data[$item_key] = $parsed_input_data;

        //Return Parsed Input Data 
        return $parsed_input_data;
    }

    /**
     * Check Item Data
     *
     * @param  mixed $parsed_input_data //Parsed Input Data
     * @param  array $item              //Item Information Array
     *
     * @return bool   $result                    //Result
     */
    function checkItemData($parsed_input_data, $item)
    {
        require_once('workflow/error_code.csp');

        //Check Required
        if ($item['required'] == 1) {
            require_once('fw/string_util.csp');
            if ($item['settings']['search_type'] == 0
                || $item['settings']['search_type'] == 1
            ) {
                cb_trim_check($parsed_input_data['route'],
                    E_GRN_WRKF_ITEMDATA_NOT_INPUT_NECESSARY);
            }
            if ($item['settings']['search_type'] == 0
                || $item['settings']['search_type'] == 2
            ) {
                //Check Fare
                cb_trim_check($parsed_input_data['fare'],
                    E_GRN_WRKF_ITEMDATA_NOT_INPUT_NECESSARY);
            }
        }
    }

    /**
     * Get Item data
     *
     * @param  array $item //Item Information
     *
     * @return array  $item_data_value           //item_data_value=>array('route'=>'','fare'=>'')
     */
    function &getItemData(& $item)
    {
        $search_type = cb_unserialize($item[GRN_WORKFLOW_COLUMN_SETTINGS],
            ["allowed_classes" => false]);

        $item_data_value = [];
        if (GRN_WORKFLOW_SEARCH_TYPE_FARE != $search_type['search_type']) {
            $item_data_value['route'] = $item[GRN_WORKFLOW_COLUMN_TEXT];
        }

        if (GRN_WORKFLOW_SEARCH_TYPE_ROUTE != $search_type['search_type']) {
            $item_data_value['fare'] = $item[GRN_WORKFLOW_COLUMN_NUMBER];
        }

        return $item_data_value;
    }
}

/**
 * Get Item Object Utility
 *
 * @param  string $foreign_key //Foreign Key
 *
 * @return mixed  $result                    //Item Object
 */
function grn_workflow_get_item_util($foreign_key)
{
    //Item Utility List
    static $item_util_list = [];

    //Check Item Utility List
    if ( ! array_key_exists($foreign_key, $item_util_list)) {
        switch ($foreign_key) {
            case 'grn.workflow.string_single':
                $item_util_list[$foreign_key]
                    = new GRN_Workflow_Item_Util_String_Single;
                break;
            case 'grn.workflow.string_multiple':
                $item_util_list[$foreign_key]
                    = new GRN_Workflow_Item_Util_String_Multiple;
                break;
            case 'grn.workflow.menu_string':
                $item_util_list[$foreign_key]
                    = new GRN_Workflow_Item_Util_Menu_String;
                break;
            case 'grn.workflow.radio':
                $item_util_list[$foreign_key]
                    = new GRN_Workflow_Item_Util_Radio;
                break;
            case 'grn.workflow.checkbox':
                $item_util_list[$foreign_key]
                    = new GRN_Workflow_Item_Util_Checkbox;
                break;
            case 'grn.workflow.numeric':
                $item_util_list[$foreign_key]
                    = new GRN_Workflow_Item_Util_Numeric;
                break;
            case 'grn.workflow.calc_numeric':
                $item_util_list[$foreign_key]
                    = new GRN_Workflow_Item_Util_Calc_Numeric;
                break;
            case 'grn.workflow.date':
                $item_util_list[$foreign_key] = new GRN_Workflow_Item_Util_Date;
                break;
            case 'grn.workflow.file':
                $item_util_list[$foreign_key] = new GRN_Workflow_Item_Util_File;
                break;
            case 'grn.workflow.route_search':
                $item_util_list[$foreign_key]
                    = new GRN_Workflow_Item_Util_Route_Search;
                break;
            default:
                $item_util_list[$foreign_key] = false;
                break;
        }
    }

    //Return Item Object
    return $item_util_list[$foreign_key];
}

/**
 * Get Item Object List Utility
 *
 * @return array  $result                    //Item Object List
 */
function &grn_workflow_get_item_util_list()
{
    //Item Utility List
    static $item_util_list = [];

    //Check Item List
    if (count($item_util_list) === 0) {
        $item_util_list['grn.workflow.string_single']
            = new GRN_Workflow_Item_Util_String_Single;
        $item_util_list['grn.workflow.string_multiple']
            = new GRN_Workflow_Item_Util_String_Multiple;
        $item_util_list['grn.workflow.menu_string']
            = new GRN_Workflow_Item_Util_Menu_String;
        $item_util_list['grn.workflow.radio']
            = new GRN_Workflow_Item_Util_Radio;
        $item_util_list['grn.workflow.checkbox']
            = new GRN_Workflow_Item_Util_Checkbox;
        $item_util_list['grn.workflow.numeric']
            = new GRN_Workflow_Item_Util_Numeric;
        $item_util_list['grn.workflow.calc_numeric']
            = new GRN_Workflow_Item_Util_Calc_Numeric;
        $item_util_list['grn.workflow.date']
            = new GRN_Workflow_Item_Util_Date;
        $item_util_list['grn.workflow.file']
            = new GRN_Workflow_Item_Util_File;
        $item_util_list['grn.workflow.route_search']
            = new GRN_Workflow_Item_Util_Route_Search;
    }

    //Return Item Object List
    return $item_util_list;
}


