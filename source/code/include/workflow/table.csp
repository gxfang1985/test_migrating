<?php

/**
 * Workflow Application Persistent Class
 *
 * @author  Y.Nakamura 2005/12/20
 * @version 1.0
 * @package grn.workflow
 */

/** Framework **/
require_once('fw/uum_core.csp');

/** Base Service **/
require_once('grn/inspection.csp');

/** File **/
require_once('workflow/file.csp');

/**
 * Workflow Application Access Base Class
 *
 * @package grn.workflow
 * @abstract
 */
class GRN_Workflow_AccessBase extends GRN_InspectionBase
{
    function __construct($row)
    {
        parent::__construct($row, 'grn.workflow');
    }

    var $_app_id = 'workflow';

    /** Security Model **/
    var $col_security_model = ['type' => 'int'];
}

/**
 * Category Persistent Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_Category extends GRN_Workflow_AccessBase
{
    function __construct($row)
    {
        parent::__construct($row);
    }

    /** Name **/
    var $col_name = ['type' => 'char', 'notnull' => true];
    /** Foreign Key **/
    var $col_foreign_key = ['type' => 'char', 'notnull' => true];
    /** Memo **/
    var $col_memo = ['type' => 'char', 'length' => 65535, 'lazy' => true];
    /** Parent **/
    var $col_parent = ['type' => 'relation', 'to' => 'GRN_Workflow_Category'];
    /** List Index **/
    var $col_list_index = ['type' => 'list_index'];
    /** Security Model for Public Folder **/
    var $col_public_security_model = ['type' => 'int'];

    /** Complex Index **/
    var $idx_list_index = ['cols' => ['list_index', null]];
    var $idx_parent_list_index = ['cols' => ['parent', 'list_index', null]];


    /**
     * @param string $col_name
     *
     * @return CB_Row|mixed
     */
    public function get($col_name)
    {
        $result = false;

        $table_info = $this->getTableInfo();
        $col_info = $table_info->getColumnInfo($col_name);
        if (is_null($col_info)) {
            return $result;
        }

        if ($col_name == 'parent') {
            $isKeyExists = array_key_exists(CB_DATABASE_COLUMN_PREFIX
                                            . $col_name,
                $this->__row->_rawdata);
            $id = $isKeyExists
                ? $this->__row->_rawdata[CB_DATABASE_COLUMN_PREFIX . $col_name]
                : null;

            if ( ! is_null($id)) {
                require_once('workflow/WorkflowFacade.csp');
                require_once('fw/i18n.csp');

                $i18n = CB_I18N::getInstance();
                $table_info = $this->getTableInfo();
                $tableManager = $table_info->getTableManager();
                $relationTableName = $col_info['to'];
                $relationTableInfo
                    = $tableManager->getTableInfo($relationTableName);
                $relationTableLock = $relationTableInfo->_lock;

                $dao = new WorkflowFacade();
                $dataObj = [];
                $dataObj['lock'] = $relationTableLock;
                $dataObj['language'] = $i18n->getCurrentLanguage();

                $categoryData = $dao->referWorkflowCategoryById($dataObj, $id);
                $result
                    = $relationTableInfo->getRow($categoryData->getId(),
                    $categoryData->convertArray());
            } else {
                $result = parent::get($col_name);
            }
        } else {
            $result = parent::get($col_name);
        }

        return $result;
    }
}

/**
 * Form Persistent Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_Form extends GRN_InspectionBase
{
    function __construct($row)
    {
        parent::__construct($row, 'grn.workflow');
    }

    var $_app_id = 'workflow';

    /** Name **/
    var $col_name = ['type' => 'char', 'notnull' => true];
    /** Foreign Key **/
    var $col_foreign_key = ['type' => 'char', 'notnull' => true];
    var $idx_foreign_key = ['cols' => 'foreign_key'];
    /** Memo **/
    var $col_memo = ['type' => 'char', 'length' => 65535, 'lazy' => true];
    /** Admin Memo **/
    var $col_admin_memo = ['type' => 'char', 'length' => 65535, 'lazy' => true];
    /** Type (0:form/1:separater) **/
    var $col_type = ['type' => 'int'];
    /** Deleted **/
    var $col_deleted = ['type' => 'int'];
    /** Icon Type (0:Standard Icon/1:URL Icon/2:File Icon)/ Icon URL / Icon File **/
    var $col_icon_type = ['type' => 'int'];
    var $col_icon_id = ['type' => 'int'];
    var $col_icon_url = ['type' => 'char', 'length' => 255];
    /** Category **/
    var $col_category
        = [
            'type' => 'weak_relation',
            'to'   => 'GRN_Workflow_Category'
        ];
    /** Active (0:Deactive Form/1:Active Form) **/
    var $col_active = ['type' => 'int'];
    /** Serial Type (0:Use Global Number/1:Use Local Number/2:Not Use)/ Serial format / Serial Number **/
    var $col_serial_type = ['type' => 'int'];
    var $col_serial_format = ['type' => 'char'];
    var $col_serial_number = ['type' => 'int', 'length' => 8];

    var $col_approved_serial_type = ['type' => 'int'];
    var $col_approved_serial_format = ['type' => 'char'];
    var $col_approved_serial_number = ['type' => 'int', 'length' => 8];
    /** Path **/
    var $col_path = ['type' => 'weak_relation', 'to' => 'GRN_Workflow_Path'];
    /** List Index **/
    var $col_list_index = ['type' => 'list_index'];
    /** Path Step **/
    var $col_path_step
        = [
            'type' => 'weak_relation',
            'to'   => 'GRN_Workflow_PathStep'
        ];
    /** Transactor **/
    var $col_transactor = ['type' => 'weak_relation', 'to' => 'CB_User'];
    var $col_transactor_name = ['type' => 'char'];
    // 自動書き出し
    var $col_export_folder = ['type' => 'char'];
    var $col_auto_export = ['type' => 'int'];
    var $col_login_name_export = ['type' => 'int', 'default' => 0];
    var $col_export_top_line = ['type' => 'int', 'default' => 0];

    var $col_is_customization_active = ['type' => 'int'];

    /** Complex Index **/
    var $idx_list_index = ['cols' => ['list_index', null]];
    var $idx_category_list_index = ['cols' => ['category', 'list_index', null]];

    /**
     * @param string $col_name
     *
     * @return CB_Row|mixed
     */
    public function get($col_name)
    {
        $result = false;

        $table_info = $this->getTableInfo();
        $col_info = $table_info->getColumnInfo($col_name);
        if (is_null($col_info)) {
            return $result;
        }

        if ($col_name == 'category') {
            $isKeyExists = array_key_exists(CB_DATABASE_COLUMN_PREFIX
                                            . $col_name,
                $this->__row->_rawdata);
            $id = $isKeyExists
                ? $this->__row->_rawdata[CB_DATABASE_COLUMN_PREFIX . $col_name]
                : null;

            if ( ! is_null($id)) {
                require_once('workflow/WorkflowFacade.csp');
                require_once('fw/i18n.csp');

                $i18n = CB_I18N::getInstance();
                $table_info = $this->getTableInfo();
                $tableManager = $table_info->getTableManager();
                $relationTableName = $col_info['to'];
                $relationTableInfo
                    = $tableManager->getTableInfo($relationTableName);
                $relationTableLock = $relationTableInfo->_lock;

                $dao = new WorkflowFacade();
                $dataObj = [];
                $dataObj['lock'] = $relationTableLock;
                $dataObj['language'] = $i18n->getCurrentLanguage();

                $categoryData = $dao->referWorkflowCategoryById($dataObj, $id);
                $result
                    = $relationTableInfo->getRow($categoryData->getId(),
                    $categoryData->convertArray());
            } else {
                $result = parent::get($col_name);
            }
        } else {
            $result = parent::get($col_name);
        }

        return $result;
    }
}

/**
 * Item Persistent Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_Item extends GRN_InspectionBase
{
    function __construct($row)
    {
        parent::__construct($row, 'grn.workflow');
    }

    var $_app_id = 'workflow';

    /** Form **/
    var $col_form = ['type' => 'relation', 'to' => 'GRN_Workflow_Form'];
    /** Display Name **/
    var $col_display_name = ['type' => 'char'];
    /** Code **/
    var $col_code = ['type' => 'char'];
    /** Type (0:item/1:line/2:space/3:standard) **/
    var $col_type = ['type' => 'int'];
    /** Option String **/
    var $col_option_string = ['type' => 'char'];
    /** Option String Type (0:front/1:back) **/
    var $col_option_string_type = ['type' => 'int'];
    /** Discription **/
    var $col_description
        = [
            'type'   => 'char',
            'length' => 65535,
            'lazy'   => true
        ];
    /** Discription Type (0:Text/1:Icon) **/
    var $col_description_type = ['type' => 'int'];
    /** Description Editor (0:Text/1:HTML) **/
    var $col_description_editor = ['type' => 'int'];
    /** Foreign Key **/
    var $col_foreign_key = ['type' => 'char', 'notnull' => true];
    /** Attach File Flag **/
    var $col_attach_file = ['type' => 'int'];
    /** Settings **/
    var $col_settings = ['type' => 'char', 'length' => 65535, 'lazy' => true];
    /** <br> (0:Yes/1:No) **/
    var $col_br = ['type' => 'int'];
    /** Required **/
    var $col_required = ['type' => 'int'];
    /** Separator **/
    var $col_separator = ['type' => 'char'];
    /** Attach File Flag **/
    var $col_attach_file_view = ['type' => 'int'];
    /** Export Data **/
    var $col_export_data = ['type' => 'int', 'default' => 1];

    /** List Index **/
    var $col_list_index = ['type' => 'list_index'];
    //var $idx_list_index         = array('cols'=>'list_index');

    /** Complex Index **/
    var $idx_list_index = ['cols' => ['list_index', null]];
    var $idx_form_list_index = ['cols' => ['form', 'list_index', null]];
}

/**
 * Path Persistent Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_Path extends GRN_InspectionBase
{
    function __construct($row)
    {
        parent::__construct($row, 'grn.workflow');
    }

    var $_app_id = 'workflow';

    // 経路名
    var $col_name = ['type' => 'char', 'notnull' => true];
    // 経路コード
    var $col_foreign_key = ['type' => 'char', 'notnull' => true];
    // 種類
    var $col_type = ['type' => 'int', 'notnull' => true];
    // 重複ユーザースキップフラグ
    var $col_skip = ['type' => 'int', 'notnull' => true];
    // 管理者用メモ
    var $col_admin_memo = ['type' => 'char', 'length' => 65535, 'lazy' => true];
    // 説明
    var $col_description
        = [
            'type'   => 'char',
            'length' => 65535,
            'lazy'   => true
        ];
    // 書式編集フラグ
    var $col_richeditor = ['type' => 'int', 'notnull' => true];
    // 説明を別画面で表示フラグ
    var $col_icon = ['type' => 'int', 'notnull' => true];
    // 表示順番
    var $col_list_index = ['type' => 'list_index'];

    var $idx_fk = ['cols' => ['foreign_key'], 'unique' => true];
}

/**
 * Category Persistent Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_CategoryBase extends CB_PersistentBase
{
    var $col_object = ['type' => 'relation', 'to' => 'GRN_Workflow_Category'];

    function __construct($row)
    {
        parent::__construct($row);
    }

    /**
     * @param string $col_name
     *
     * @return CB_Row|mixed
     */
    public function get($col_name)
    {
        $result = false;

        $table_info = $this->getTableInfo();
        $col_info = $table_info->getColumnInfo($col_name);
        if (is_null($col_info)) {
            return $result;
        }

        if ($col_name == 'object') {
            $isKeyExists = array_key_exists(CB_DATABASE_COLUMN_PREFIX
                                            . $col_name,
                $this->__row->_rawdata);
            $id = $isKeyExists
                ? $this->__row->_rawdata[CB_DATABASE_COLUMN_PREFIX . $col_name]
                : null;

            if ( ! is_null($id)) {
                require_once('workflow/WorkflowFacade.csp');
                require_once('fw/i18n.csp');

                $i18n = CB_I18N::getInstance();
                $table_info = $this->getTableInfo();
                $tableManager = $table_info->getTableManager();
                $relationTableName = $col_info['to'];
                $relationTableInfo
                    = $tableManager->getTableInfo($relationTableName);
                $relationTableLock = $relationTableInfo->_lock;

                $dao = new WorkflowFacade();
                $dataObj = [];
                $dataObj['lock'] = $relationTableLock;
                $dataObj['language'] = $i18n->getCurrentLanguage();

                $categoryData = $dao->referWorkflowCategoryById($dataObj, $id);
                $result
                    = $relationTableInfo->getRow($categoryData->getId(),
                    $categoryData->convertArray());
            } else {
                $result = parent::get($col_name);
            }
        } else {
            $result = parent::get($col_name);
        }

        return $result;
    }
}

/**
 * Path Step Persistent Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_PathStep extends CB_PersistentBase
{
    function __construct($row)
    {
        parent::__construct($row);
    }

    var $_app_id = 'workflow';

    // 経路ID
    var $col_path = ['type' => 'relation', 'to' => 'GRN_Workflow_Path'];
    // 経路種別
    var $col_type = ['type' => 'int'];
    // 承認経路の種類
    var $col_acceptance_type = ['type' => 'int'];
    // 役割
    var $col_role = ['type' => 'char'];
    // 省略フラグ
    var $col_skip = ['type' => 'int'];
    // 申請者フラグ
    var $col_applicant = ['type' => 'int'];
    // 申請時の経路変更の制限フラグ
    var $col_deny_change_path = ['type' => 'int'];
    // 処理者の経路変更の許可フラグ
    var $col_change_path = ['type' => 'int'];
    // 表示順番
    var $col_list_index = ['type' => 'list_index'];

    var $idx_p_t_li_n = ['cols' => ['path', 'type', 'list_index', null]];
    var $idx_p_n = ['cols' => ['path', null]];
}

/**
 * Path Step User Persistent Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_PathStepUser extends CB_PersistentBase
{
    function __construct($row)
    {
        parent::__construct($row);
    }

    var $_app_id = 'workflow';

    // 経路ステップID
    var $col_path_step
        = [
            'type' => 'relation',
            'to'   => 'GRN_Workflow_PathStep'
        ];
    // 経路ステップの構成者
    var $col_member = ['type' => 'relation', 'to' => 'CB_User'];

    var $idx_ps_m = ['cols' => ['path_step', 'member'], 'unique' => true];
}

/**
 * Group that belonged to path step.
 *
 * @package grn.workflow
 */
class GRN_Workflow_PathStepGroup extends CB_PersistentBase
{
    function __construct($row)
    {
        parent::__construct($row);
    }

    var $_app_id = 'workflow';

    // 経路ステップID
    var $col_path_step
        = [
            'type' => 'relation',
            'to'   => 'GRN_Workflow_PathStep'
        ];
    // 経路ステップの構成グループ
    var $col_member = ['type' => 'relation', 'to' => 'CB_Group'];

    var $idx_ps_m = ['cols' => ['path_step', 'member'], 'unique' => true];

    /**
     * @param string $col_name
     *
     * @return CB_Row|mixed
     */
    public function get($col_name)
    {
        $result = false;

        $table_info = $this->getTableInfo();
        $col_info = $table_info->getColumnInfo($col_name);
        if (is_null($col_info)) {
            return $result;
        }


        if ($col_name == 'member') {
            $isKeyExists = array_key_exists(CB_DATABASE_COLUMN_PREFIX
                                            . $col_name,
                $this->__row->_rawdata);
            $id = $isKeyExists
                ? $this->__row->_rawdata[CB_DATABASE_COLUMN_PREFIX . $col_name]
                : null;

            if ( ! is_null($id)) {
                require_once('fw/FwFacade.csp');
                require_once('fw/i18n.csp');

                $i18n = CB_I18N::getInstance();
                $table_info = $this->getTableInfo();
                $tableManager = $table_info->getTableManager();
                $relationTableName = $col_info['to'];
                $relationTableInfo
                    = $tableManager->getTableInfo($relationTableName);
                $relationTableLock = $relationTableInfo->_lock;

                $dao = new FwFacade();
                $dataObj = [];
                $dataObj['lock'] = $relationTableLock;
                $dataObj['language'] = $i18n->getCurrentLanguage();

                $groupData = $dao->referGroupById($dataObj, $id);
                $result = $relationTableInfo->getRow($groupData->getId(),
                    $groupData->convertArray());
            } else {
                $result = parent::get($col_name);
            }
        } else {
            $result = parent::get($col_name);
        }

        return $result;
    }
}

/**
 * Static role that belonged to path step.
 *
 * @package grn.workflow
 */
class GRN_Workflow_PathStepStaticRole extends CB_PersistentBase
{
    function __construct($row)
    {
        parent::__construct($row);
    }

    var $_app_id = 'workflow';

    // 経路ステップID
    var $col_path_step
        = [
            'type' => 'relation',
            'to'   => 'GRN_Workflow_PathStep'
        ];
    // 経路ステップの構成ロール
    var $col_member = ['type' => 'relation', 'to' => 'CB_Role'];
    // 上長評価フラグ
    var $col_chief = ['type' => 'int', 'notnull' => true];

    var $idx_ps_m = ['cols' => ['path_step', 'member'], 'unique' => true];
}

/**
 * Dynamic role that belonged to path step.
 *
 * @package grn.workflow
 */
class GRN_Workflow_PathStepDynamicRole extends CB_PersistentBase
{
    function __construct($row)
    {
        parent::__construct($row);
    }

    var $_app_id = 'workflow';

    // 経路ステップID
    var $col_path_step
        = [
            'type' => 'relation',
            'to'   => 'GRN_Workflow_PathStep'
        ];
    // 経路ステップの構成ロール
    var $col_member = ['type' => 'char'];

    var $idx_ps_m = ['cols' => ['path_step', 'member'], 'unique' => true];
}

/**
 * Path Skip Persistent Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_PathSkip extends CB_PersistentBase
{
    function __construct($row)
    {
        parent::__construct($row);
    }

    var $_app_id = 'workflow';

    /** 申請フォームID **/
    var $col_form = ['type' => 'relation', 'to' => 'GRN_Workflow_Form'];
    // 分岐項目ID
    var $col_item = ['type' => 'relation', 'to' => 'GRN_WorkFlow_Item'];
}

/**
 * Path Condition Persistent Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_PathCondition extends CB_PersistentBase
{
    function __construct($row)
    {
        parent::__construct($row);
    }

    var $_app_id = 'workflow';

    // 経路分岐ID
    var $col_path_skip
        = [
            'type' => 'relation',
            'to'   => 'GRN_Workflow_PathSkip'
        ];
    // 分岐条件名
    var $col_name = ['type' => 'char', 'length' => 65535, 'lazy' => true];
    // 比較演算子
    var $col_operator = ['type' => 'int'];
    // 比較数値
    var $col_number = ['type' => 'double'];
    // 比較オプション
    var $col_option = ['type' => 'char', 'length' => 65535, 'lazy' => true];
    // 表示順番
    var $col_list_index = ['type' => 'list_index'];
}

/**
 * Path Condition Step Persistent Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_PathConditionStep extends CB_PersistentBase
{
    function __construct($row)
    {
        parent::__construct($row);
    }

    var $_app_id = 'workflow';

    /** Path Condition **/
    var $col_path_condition
        = [
            'type' => 'relation',
            'to'   => 'GRN_Workflow_PathCondition'
        ];
    /** Path Condition **/
    var $col_path_step
        = [
            'type' => 'relation',
            'to'   => 'GRN_Workflow_PathStep'
        ];
}

/**
 * Folder Persistent Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_Folder extends GRN_InspectionBase
{
    function __construct($row)
    {
        parent::__construct($row, 'grn.workflow');
    }

    var $_app_id = 'workflow';

    /** Name **/
    var $col_name = ['type' => 'char', 'notnull' => true];
    /** Folder Type **/
    var $col_folder_type
        = [
            'type'    => 'char',
            'length'  => '1',
            'notnull' => true
        ];
    /** Foreign Key **/
    var $col_foreign_key = ['type' => 'char', 'notnull' => true];
    /** Memo **/
    var $col_memo = ['type' => 'char', 'length' => 65535, 'lazy' => true];
    /** User **/
    var $col_user = ['type' => 'relation', 'to' => 'CB_User'];
    /** Parent **/
    var $col_parent = ['type' => 'relation', 'to' => 'GRN_Workflow_Folder'];
    /** List Index **/
    var $col_list_index = ['type' => 'list_index'];

    /** Complex Index **/
    var $idx_user = ['cols' => [null, 'user']];
    var $idx_list_index = ['cols' => ['list_index', null]];
    var $idx_user_list_index = ['cols' => ['user', 'list_index', null]];
    var $idx_folder_type_list_index
        = [
            'cols' => [
                'folder_type',
                'list_index',
                null
            ]
        ];
    var $idx_user_foreign_key = ['cols' => ['user', 'foreign_key'], 'unique' => true];
}

/**
 * Folder Relation Persistent Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_FolderRelation extends GRN_InspectionBase
{
    function __construct($row)
    {
        parent::__construct($row, 'grn.workflow');
    }

    var $_app_id = 'workflow';

    /** Folder **/
    var $col_folder = ['type' => 'relation', 'to' => 'GRN_Workflow_Folder'];
    /** Petition **/
    var $col_petition = ['type' => 'relation', 'to' => 'GRN_Workflow_Petition'];
    /** List Index **/
    var $col_list_index = ['type' => 'list_index'];

    /** Complex Index **/
    var $idx_list_index = ['cols' => ['list_index', null]];
    var $idx_petition_list_index = ['cols' => ['petition', 'list_index', null]];
    var $idx_folder_list_index_petition
        = [
            'cols' => [
                'folder',
                'list_index',
                null,
                'petition'
            ]
        ];
    var $idx_folder_petition = ['cols' => ['folder', 'petition']];
}

/**
 * Petition Persistent Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_Petition extends GRN_InspectionBase
{
    function __construct($row)
    {
        parent::__construct($row, 'grn.workflow');
    }

    var $_app_id = 'workflow';

    /** Name **/
    var $col_name = ['type' => 'char', 'notnull' => true];
    /** Petition Number **/
    var $col_petition_number = ['type' => 'char'];
    /** User / User Name / User Foreign key **/
    var $col_user = ['type' => 'weak_relation', 'to' => 'CB_User'];
    var $col_user_name = ['type' => 'char'];
    var $col_user_foreign_key = ['type' => 'char'];
    /** Status **/
    var $col_status = ['type' => 'int'];
    /** Form ID / Form Name / Form Foreign key **/
    var $col_form = ['type' => 'weak_relation', 'to' => 'GRN_Workflow_Form'];
    var $col_form_name = ['type' => 'char'];
    var $col_form_foreign_key = ['type' => 'char'];
    /** Icon Type (0:Standard Icon/1:URL Icon/2:File Icon)/ Icon URL / Icon File **/
    var $col_icon_type = ['type' => 'int'];
    var $col_icon_id = ['type' => 'int'];
    var $col_icon_url = ['type' => 'char', 'length' => 255];
    /** Serial Type (0:Use Global Number/1:Use Local Number/2:Not Use)/ Serial format / Serial Number **/
    var $col_serial_type = ['type' => 'int'];
    var $col_serial_format = ['type' => 'char'];
    var $col_serial_number = ['type' => 'int', 'length' => 8];
    // 取り戻し、取り消し、差し戻し（？）処理者、コメント、日時
    var $col_transactor = ['type' => 'weak_relation', 'to' => 'CB_User'];
    var $col_transactor_name = ['type' => 'char'];
    var $col_transactor_foreign_key = ['type' => 'char'];
    var $col_comment = ['type' => 'char', 'length' => 65535, 'lazy' => true];
    var $col_ptime = ['type' => 'timestamp'];
    /** Deleted  **/
    var $col_deleted = ['type' => 'int'];
    // 自動書き出し
    var $col_export_folder = ['type' => 'char'];
    var $col_auto_export = ['type' => 'int'];
    var $col_login_name_export = ['type' => 'int', 'default' => 0];
    var $col_export_top_line = ['type' => 'int', 'default' => 0];
    // 再申請フラグ
    var $col_reapply = ['type' => 'int'];
    /** List Index **/
    var $col_list_index = ['type' => 'list_index'];
    // 優先度
    var $col_priority = ['type' => 'int'];

    // 委任者
    var $col_agent_user = ['type' => 'weak_relation', 'to' => 'CB_User'];
    var $col_agent_user_name = ['type' => 'char'];
    var $col_agent_user_foreign_key = ['type' => 'char'];

    var $col_agent_transactor = ['type' => 'weak_relation', 'to' => 'CB_User'];
    var $col_agent_transactor_name = ['type' => 'char'];
    var $col_agent_transactor_foreign_key = ['type' => 'char'];

    /** Complex Index **/
    var $idx_list_index = ['cols' => ['list_index', null]];
    var $idx_form_list_index = ['cols' => ['form', 'list_index', null]];
    var $idx_ctime_list_index = ['cols' => [null, 'ctime', 'list_index']];
}

/**
 * Petition Number Persistent Class (for Global Persistent Number)
 *
 * @package grn.workflow
 */
class GRN_Workflow_PetitionNumber extends CB_PersistentBase
{
    function __construct($row)
    {
        parent::__construct($row);
    }

    var $_app_id = 'workflow';

}

/**
 * Item Data Persistent Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_ItemData extends GRN_InspectionBase
{
    function __construct($row)
    {
        parent::__construct($row, 'grn.workflow');
    }

    var $_app_id = 'workflow';

    /** Petition **/
    var $col_petition = ['type' => 'relation', 'to' => 'GRN_Workflow_Petition'];
    /** Item **/
    var $col_item = ['type' => 'weak_relation', 'to' => 'GRN_Workflow_Item'];
    /** Number **/
    var $col_number = ['type' => 'char'];
    /** Text **/
    var $col_text = ['type' => 'char', 'length' => 65535, 'lazy' => true];
    /** Display Name **/
    var $col_display_name = ['type' => 'char'];
    /** Type (0:item/1:line/2:space/3:standard) **/
    var $col_type = ['type' => 'int'];
    /** Option String **/
    var $col_option_string = ['type' => 'char'];
    /** Option String Type (0:front/1:back) **/
    var $col_option_string_type = ['type' => 'int'];
    /** Discription **/
    var $col_description
        = [
            'type'   => 'char',
            'length' => 65535,
            'lazy'   => true
        ];
    /** Discription Type (0:Text/1:Icon) **/
    var $col_description_type = ['type' => 'int'];
    /** Description Editor (0:Text/1:HTML) **/
    var $col_description_editor = ['type' => 'int'];
    /** Foreign Key **/
    var $col_foreign_key = ['type' => 'char', 'notnull' => true];
    /** Attach File Flag **/
    var $col_attach_file = ['type' => 'int'];
    /** Settings **/
    var $col_settings = ['type' => 'char', 'length' => 65535, 'lazy' => true];
    /** <br> (0:Yes/1:No) **/
    var $col_br = ['type' => 'int'];
    /** Required **/
    var $col_required = ['type' => 'int'];
    /** Separator **/
    var $col_separator = ['type' => 'char'];
    /** List Index **/
    var $col_list_index = ['type' => 'list_index'];
    /** Access Change Flag **/
    var $col_access_change = ['type' => 'int'];
    /** Attach File Flag **/
    var $col_attach_file_view = ['type' => 'int'];
    /** Export Data **/
    var $col_export_data = ['type' => 'int', 'default' => 1];

    /** Complex Index **/
    var $idx_list_index = ['cols' => ['list_index', null]];
    var $idx_petition_list_index = ['cols' => ['petition', 'list_index', null]];
}

/**
 * Item Data File Persistent Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_ItemDataFile extends GRN_InspectionBase
{
    function __construct($row)
    {
        parent::__construct($row, 'grn.workflow');
    }

    var $_app_id = 'workflow';

    /** Item Data **/
    var $col_item_data
        = [
            'type' => 'relation',
            'to'   => 'GRN_Workflow_ItemData'
        ];
    /** File **/
    var $col_file = ['type' => 'relation', 'to' => 'GRN_Workflow_File'];

    /** Complex Index **/
    var $idx_item_data = ['cols' => ['item_data', null]];
}

/**
 * Path Step Data Persistent Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_PathStepData extends CB_PersistentBase
{
    function __construct($row)
    {
        parent::__construct($row);
    }

    var $_app_id = 'workflow';

    // 申請ID
    var $col_petition = ['type' => 'relation', 'to' => 'GRN_Workflow_Petition'];
    // アクティブフラグ
    var $col_activate = ['type' => 'int'];
    // 完了フラグ
    var $col_finished = ['type' => 'int'];
    // 経路ステップID
    var $col_path_step
        = [
            'type' => 'weak_relation',
            'to'   => 'GRN_Workflow_PathStep'
        ];
    // 経路ステップからのレプリケーション（経路種別）
    var $col_type = ['type' => 'int'];
    // 経路ステップからのレプリケーション（承認経路の種類）
    var $col_acceptance_type = ['type' => 'int'];
    // 経路ステップからのレプリケーション（役割）
    var $col_role = ['type' => 'char'];
    // 経路ステップからのレプリケーション（省略フラグ）
    var $col_skip = ['type' => 'int'];
    // 経路ステップからのレプリケーション（申請者フラグ）
    var $col_applicant = ['type' => 'int'];
    // 経路ステップからのレぷりケーション（申請時の経路変更の制限フラグ）
    var $col_deny_change_path = ['type' => 'int'];
    // 経路ステップからのレプリケーション（経路変更の許可フラグ）
    var $col_change_path = ['type' => 'int'];
    // 経路ステップからのレプリケーション（表示順番）
    var $col_list_index = ['type' => 'list_index'];

    var $idx_p_li_pk
        = [
            'cols'   => ['petition', 'list_index', null],
            'unique' => true
        ];
}

/**
 * Path Step Data User Persistent Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_PathStepDataUser extends CB_PersistentBase
{
    function __construct($row)
    {
        parent::__construct($row);
    }

    var $_app_id = 'workflow';

    // 経路ステップデータID
    var $col_path_step_data
        = [
            'type' => 'relation',
            'to'   => 'GRN_Workflow_PathStepData'
        ];
    // ユーザーID
    var $col_user = ['type' => 'weak_relation', 'to' => 'CB_User'];
    // ユーザー名
    var $col_display_name = ['type' => 'char'];
    // ユーザーコード
    var $col_foreign_key = ['type' => 'char'];
    // ユーザーの表示順番
    var $col_position = ['type' => 'list_index'];
    // 結果
    var $col_result = ['type' => 'int'];
    // 処理日時
    var $col_ptime = ['type' => 'timestamp'];
    // コメント
    var $col_comment = ['type' => 'char', 'length' => 65535, 'lazy' => true];
    // 表示順番
    var $col_list_index = ['type' => 'list_index'];
    // 代理人ユーザーID
    var $col_agent_user = ['type' => 'weak_relation', 'to' => 'CB_User'];
    // 代理人ユーザー名
    var $col_agent_display_name = ['type' => 'char'];
    // 代理人ユーザーコード
    var $col_agent_foreign_key = ['type' => 'char'];

    var $idx_psd_p_u = ['cols' => ['path_step_data', 'position', 'user']];
}

/**
 * Path Skip Data Persistent Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_PathSkipData extends CB_PersistentBase
{
    function __construct($row)
    {
        parent::__construct($row);
    }

    var $_app_id = 'workflow';

    var $col_path_skip
        = [
            'type' => 'weak_relation',
            'to'   => 'GRN_Workflow_PathSkip'
        ];
    // 申請ID
    var $col_petition = ['type' => 'relation', 'to' => 'GRN_Workflow_Petition'];
    // 申請項目ID
    var $col_item_data
        = [
            'type' => 'relation',
            'to'   => 'GRN_Workflow_ItemData'
        ];
}

/**
 * Path Condition Data Persistent Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_PathConditionData extends CB_PersistentBase
{
    function __construct($row)
    {
        parent::__construct($row);
    }

    var $_app_id = 'workflow';

    // 経路分岐条件からのレプリケーション（経路分岐条件ID）
    var $col_path_condition
        = [
            'type' => 'weak_relation',
            'to'   => 'GRN_Workflow_PathCondition'
        ];
    // 経路分岐条件からのレプリケーション（経路分岐ID）
    var $col_path_skip_data
        = [
            'type' => 'relation',
            'to'   => 'GRN_Workflow_PathSkipData'
        ];
    // 経路分岐条件からのレプリケーション（分岐条件名）
    var $col_name = ['type' => 'char', 'length' => 65535, 'lazy' => true];
    // 経路分岐条件からのレプリケーション（比較演算子）
    var $col_operator = ['type' => 'int'];
    // 経路分岐条件からのレプリケーション（比較数値）
    var $col_number = ['type' => 'double'];
    // 経路分岐条件からのレプリケーション（比較オプション）
    var $col_option = ['type' => 'char', 'length' => 65535, 'lazy' => true];
    // 経路分岐条件からのレプリケーション（表示順番）
    var $col_list_index = ['type' => 'list_index'];
}

/**
 * Path Condition Step Data Persistent Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_PathConditionStepData extends CB_PersistentBase
{
    function __construct($row)
    {
        parent::__construct($row);
    }

    var $_app_id = 'workflow';

    // 経路分岐ステップからのレプリケーション（経路分岐条件ID）
    var $col_path_condition_step
        = [
            'type' => 'weak_relation',
            'to'   => 'GRN_Workflow_PathConditionStep'
        ];
    // 経路分岐ステップからのレプリケーション（経路分岐条件）
    var $col_path_condition_data
        = [
            'type' => 'relation',
            'to'   => 'GRN_Workflow_PathConditionData'
        ];
    // 経路分岐ステップからのレプリケーション（経路分岐ステップ）
    var $col_path_step_data
        = [
            'type' => 'relation',
            'to'   => 'GRN_Workflow_PathStepData'
        ];
}

/**
 *  Access Change Data Persistent Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_AccessChangeData extends GRN_InspectionBase
{
    function __construct($row)
    {
        parent::__construct($row, 'grn.workflow');
    }

    var $_app_id = 'workflow';

    /** Access Change Form **/
    var $col_access_change_form
        = [
            'type' => 'weak_relation',
            'to'   => 'GRN_Workflow_AccessChangeForm'
        ];
    /** Item Data **/
    var $col_item_data
        = [
            'type' => 'relation',
            'to'   => 'GRN_Workflow_ItemData'
        ];
    /** Path Step Data **/
    var $col_path_step_data
        = [
            'type' => 'relation',
            'to'   => 'GRN_Workflow_PathStepData'
        ];

    var $col_view = ['type' => 'int'];
    var $col_edit = ['type' => 'int'];

    /** インデックス */
    var $idx_item_path_data
        = [
            'cols'   => ['item_data', 'path_step_data'],
            'unique' => true
        ];
}

/**
 *  Access Change Form Persistent Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_AccessChangeForm extends GRN_InspectionBase
{
    function __construct($row)
    {
        parent::__construct($row, 'grn.workflow');
    }

    var $_app_id = 'workflow';

    /** Item **/
    var $col_item = ['type' => 'relation', 'to' => 'GRN_WorkFlow_Item'];
    /** Path Step **/
    var $col_path_step
        = [
            'type'    => 'relation',
            'to'      => 'GRN_Workflow_PathStep',
            'notnull' => 'TRUE',
            'lazy'    => true
        ];

    var $col_view = ['type' => 'int'];
    var $col_edit = ['type' => 'int'];

    /** インデックス */
    var $idx_item_path_form
        = [
            'cols'   => ['item', 'path_step'],
            'unique' => true
        ];
}

/**
 * 経路変更履歴
 */
class GRN_Workflow_ChangePathHistory extends GRN_InspectionBase
{
    function __construct($row)
    {
        parent::__construct($row);
    }

    var $_app_id = 'workflow';

    // 申請ID
    var $col_petition = ['type' => 'relation', 'to' => 'GRN_Workflow_Petition'];
    // 経路ステップデータID
    var $col_path_step_data
        = [
            'type' => 'relation',
            'to'   => 'GRN_Workflow_PathStepData'
        ];
    // 経路ステップ名
    var $col_role = ['type' => 'char'];
    // 経路種別
    var $col_type = ['type' => 'int'];
    // 承認経路の種類
    var $col_acceptance_type = ['type' => 'int'];
    // コメント
    var $col_comment = ['type' => 'char', 'length' => 65535, 'lazy' => true];

    var $idx_p_pk = ['cols' => ['petition', null], 'unique' => true];
}

/**
 * 経路変更で追加した処理者
 */
class GRN_Workflow_ChangePathAddUser extends CB_PersistentBase
{
    function __construct($row)
    {
        parent::__construct($row);
    }

    var $_app_id = 'workflow';

    // 経路変更履歴ID
    var $col_change_path_history
        = [
            'type' => 'relation',
            'to'   => 'GRN_Workflow_ChangePathHistory'
        ];
    // 処理者ID
    var $col_user = ['type' => 'weak_relation', 'to' => 'CB_User'];
    // 処理者名
    var $col_display_name = ['type' => 'char'];
    // 処理者コード
    var $col_foreign_key = ['type' => 'char'];
    // 処理者の表示順番
    var $col_position = ['type' => 'list_index'];

    var $idx_cph_p_u = ['cols' => ['change_path_history', 'position', 'user']];
}

/**
 * 経路変更で削除した処理者
 */
class GRN_Workflow_ChangePathDeletedUser extends CB_PersistentBase
{
    function __construct($row)
    {
        parent::__construct($row);
    }

    var $_app_id = 'workflow';

    // 経路変更履歴ID
    var $col_change_path_history
        = [
            'type' => 'relation',
            'to'   => 'GRN_Workflow_ChangePathHistory'
        ];
    // 処理者ID
    var $col_user = ['type' => 'weak_relation', 'to' => 'CB_User'];
    // 処理者名
    var $col_display_name = ['type' => 'char'];
    // 処理者コード
    var $col_foreign_key = ['type' => 'char'];
    // 処理者の表示順番
    var $col_position = ['type' => 'list_index'];

    var $idx_cph_p_u = ['cols' => ['change_path_history', 'position', 'user']];
}

/**
 * Category Access User Class
 *
 * @package grn.workflow
 * @abstract
 */
class GRN_Workflow_CategoryAccessUser extends GRN_Workflow_CategoryBase
{
    function __construct($row)
    {
        parent::__construct($row);
    }

    var $_app_id = 'workflow';

    /** Target **/
    var $col_target = ['type' => 'relation', 'to' => 'CB_User'];
    /** Authority Browse **/
    var $col_authority_browse = ['type' => 'int'];

    /** Complex Index **/
    var $idx_object_target = ['cols' => ['object', 'target'], 'unique' => true];
}

/**
 * Category Access Group Class
 *
 * @package grn.workflow
 * @abstract
 */
class GRN_Workflow_CategoryAccessGroup extends GRN_Workflow_CategoryBase
{
    function __construct($row)
    {
        parent::__construct($row);
    }

    var $_app_id = 'workflow';

    /** Target **/
    var $col_target = ['type' => 'relation', 'to' => 'CB_Group'];
    /** Authority Browse **/
    var $col_authority_browse = ['type' => 'int'];

    /** Complex Index **/
    var $idx_object_target = ['cols' => ['object', 'target'], 'unique' => true];

    /**
     * @param string $col_name
     *
     * @return bool|CB_Row|mixed
     */
    public function get($col_name)
    {
        $result = false;

        $table_info = $this->getTableInfo();
        $col_info = $table_info->getColumnInfo($col_name);
        if (is_null($col_info)) {
            return $result;
        }


        if ($col_name == 'target') {
            $isKeyExists = array_key_exists(CB_DATABASE_COLUMN_PREFIX
                                            . $col_name,
                $this->__row->_rawdata);
            $id = $isKeyExists
                ? $this->__row->_rawdata[CB_DATABASE_COLUMN_PREFIX . $col_name]
                : null;

            if ( ! is_null($id)) {
                require_once('fw/FwFacade.csp');
                require_once('fw/i18n.csp');

                $i18n = CB_I18N::getInstance();
                $table_info = $this->getTableInfo();
                $tableManager = $table_info->getTableManager();
                $relationTableName = $col_info['to'];
                $relationTableInfo
                    = $tableManager->getTableInfo($relationTableName);
                $relationTableLock = $relationTableInfo->_lock;

                $dao = new FwFacade();
                $dataObj = [];
                $dataObj['lock'] = $relationTableLock;
                $dataObj['language'] = $i18n->getCurrentLanguage();

                $groupData = $dao->referGroupById($dataObj, $id);
                $result = $relationTableInfo->getRow($groupData->getId(),
                    $groupData->convertArray());
            } else {
                $result = parent::get($col_name);
            }
        } else {
            $result = parent::get($col_name);
        }

        return $result;
    }
}

/**
 * Category Access Static Role Class
 *
 * @package grn.workflow
 * @abstract
 */
class GRN_Workflow_CategoryAccessStaticRole extends GRN_Workflow_CategoryBase
{
    function __construct($row)
    {
        parent::__construct($row);
    }

    var $_app_id = 'workflow';

    /** Target **/
    var $col_target = ['type' => 'relation', 'to' => 'CB_Role'];
    /** Authority Browse **/
    var $col_authority_browse = ['type' => 'int'];

    /** Complex Index **/
    var $idx_object_target = ['cols' => ['object', 'target'], 'unique' => true];
}

/**
 * Category Access Dynamic Role Class
 *
 * @package grn.workflow
 * @abstract
 */
class GRN_Workflow_CategoryAccessDynamicRole extends GRN_Workflow_CategoryBase
{
    var $_app_id = 'workflow';

    /** Target **/
    var $col_target = ['type' => 'char'];
    /** Authority Browse **/
    var $col_authority_browse = ['type' => 'int'];

    /** Complex Index **/
    var $idx_object_target = ['cols' => ['object', 'target'], 'unique' => true];
}

/**
 * Category Manage User Class
 *
 * @package grn.workflow
 * @abstract
 */
class GRN_Workflow_CategoryManageUser extends GRN_Workflow_CategoryBase
{
    function __construct($row)
    {
        parent::__construct($row);
    }

    var $_app_id = 'workflow';

    /** Target **/
    var $col_target = ['type' => 'relation', 'to' => 'CB_User'];
    /** Authority Browse **/
    var $col_authority_manage = ['type' => 'int'];

    /** Complex Index **/
    var $idx_object_target = ['cols' => ['object', 'target'], 'unique' => true];
}

/**
 * Category Manage Group Class
 *
 * @package grn.workflow
 * @abstract
 */
class GRN_Workflow_CategoryManageGroup extends GRN_Workflow_CategoryBase
{
    var $_app_id = 'workflow';

    /** Target **/
    var $col_target = ['type' => 'relation', 'to' => 'CB_Group'];
    /** Authority Browse **/
    var $col_authority_manage = ['type' => 'int'];

    /** Complex Index **/
    var $idx_object_target = ['cols' => ['object', 'target'], 'unique' => true];

    /**
     * @param string $col_name
     *
     * @return bool|CB_Row|mixed
     */
    public function get($col_name)
    {
        $result = false;

        $table_info = $this->getTableInfo();
        $col_info = $table_info->getColumnInfo($col_name);
        if (is_null($col_info)) {
            return $result;
        }


        if ($col_name == 'target') {
            $isKeyExists = array_key_exists(CB_DATABASE_COLUMN_PREFIX
                                            . $col_name,
                $this->__row->_rawdata);
            $id = $isKeyExists
                ? $this->__row->_rawdata[CB_DATABASE_COLUMN_PREFIX . $col_name]
                : null;

            if ( ! is_null($id)) {
                require_once('fw/FwFacade.csp');
                require_once('fw/i18n.csp');

                $i18n = CB_I18N::getInstance();
                $table_info = $this->getTableInfo();
                $tableManager = $table_info->getTableManager();
                $relationTableName = $col_info['to'];
                $relationTableInfo
                    = $tableManager->getTableInfo($relationTableName);
                $relationTableLock = $relationTableInfo->_lock;

                $dao = new FwFacade();
                $dataObj = [];
                $dataObj['lock'] = $relationTableLock;
                $dataObj['language'] = $i18n->getCurrentLanguage();

                $groupData = $dao->referGroupById($dataObj, $id);
                $result = $relationTableInfo->getRow($groupData->getId(),
                    $groupData->convertArray());
            } else {
                $result = parent::get($col_name);
            }
        } else {
            $result = parent::get($col_name);
        }

        return $result;
    }
}

/**
 * Category Manage Static Role Class
 *
 * @package grn.workflow
 * @abstract
 */
class GRN_Workflow_CategoryManageStaticRole extends GRN_Workflow_CategoryBase
{
    function __construct($row)
    {
        parent::__construct($row);
    }

    var $_app_id = 'workflow';

    /** Target **/
    var $col_target = ['type' => 'relation', 'to' => 'CB_Role'];
    /** Authority Browse **/
    var $col_authority_manage = ['type' => 'int'];

    /** Complex Index **/
    var $idx_object_target = ['cols' => ['object', 'target'], 'unique' => true];
}

/**
 * Category Manage Dynamic Role Class
 *
 * @package grn.workflow
 * @abstract
 */
class GRN_Workflow_CategoryManageDynamicRole extends GRN_Workflow_CategoryBase
{
    var $_app_id = 'workflow';

    /** Target **/
    var $col_target = ['type' => 'char'];
    /** Authority Browse **/
    var $col_authority_manage = ['type' => 'int'];

    /** Complex Index **/
    var $idx_object_target = ['cols' => ['object', 'target'], 'unique' => true];
}

class GRN_Workflow_AvailabilityUser extends CB_PersistentBase
{
    function __construct($row)
    {
        parent::__construct($row);
    }

    var $_app_id = 'workflow';

    // ユーザー
    var $col_user = ['type' => 'relation', 'to' => 'CB_User', 'unique' => true];
    // 利用許可時刻
    var $col_ctime = ['type' => 'timestamp'];
    // ケータイの利用権限
    var $col_authority_cellular = ['type' => 'int'];
}

class GRN_Workflow_Agent extends CB_PersistentBase
{
    function __construct($row)
    {
        parent::__construct($row);
    }

    var $_app_id = 'workflow';

    var $col_user
        = [
            'type'   => 'relation',
            'to'     => 'CB_User',
            'unique' => false
        ];
    var $col_agent_user
        = [
            'type'   => 'relation',
            'to'     => 'CB_User',
            'unique' => false
        ];
    /** Type (0:petition/1:approval) **/
    var $col_agent_type = ['type' => 'int'];
}

/**
 * Classes for Public Category
 *
 * Added by Shimada, Yosuke
 * 2007/06/21
 */
class GRN_Workflow_CategoryPublicUser extends GRN_Workflow_CategoryBase
{
    var $_app_id = 'workflow';

    /** Target **/
    var $col_target = ['type' => 'relation', 'to' => 'CB_User'];
    /** Authority Browse **/
    var $col_authority_browse = ['type' => 'int'];
    /** reserve columns **/
    var $col_reserve_int1 = ['type' => 'int'];
    var $col_reserve_int2 = ['type' => 'int'];
    var $col_reserve_int3 = ['type' => 'int'];
    /** Complex Index **/
    var $idx_object_target = ['cols' => ['object', 'target'], 'unique' => true];
}

/**
 * Category Public Group Class
 *
 * @package grn.workflow
 * @abstract
 */
class GRN_Workflow_CategoryPublicGroup extends GRN_Workflow_CategoryBase
{
    var $_app_id = 'workflow';

    /** Target **/
    var $col_target = ['type' => 'relation', 'to' => 'CB_Group'];
    /** Authority Browse **/
    var $col_authority_browse = ['type' => 'int'];
    /** reserve columns **/
    var $col_reserve_int1 = ['type' => 'int'];
    var $col_reserve_int2 = ['type' => 'int'];
    var $col_reserve_int3 = ['type' => 'int'];
    /** Complex Index **/
    var $idx_object_target = ['cols' => ['object', 'target'], 'unique' => true];

    /**
     * @param string $col_name
     *
     * @return bool|CB_Row|mixed
     */
    public function get($col_name)
    {
        $result = false;

        $table_info = $this->getTableInfo();
        $col_info = $table_info->getColumnInfo($col_name);
        if (is_null($col_info)) {
            return $result;
        }


        if ($col_name == 'target') {
            $isKeyExists = array_key_exists(CB_DATABASE_COLUMN_PREFIX
                                            . $col_name,
                $this->__row->_rawdata);
            $id = $isKeyExists
                ? $this->__row->_rawdata[CB_DATABASE_COLUMN_PREFIX . $col_name]
                : null;

            if ( ! is_null($id)) {
                require_once('fw/FwFacade.csp');
                require_once('fw/i18n.csp');

                $i18n = CB_I18N::getInstance();
                $table_info = $this->getTableInfo();
                $tableManager = $table_info->getTableManager();
                $relationTableName = $col_info['to'];
                $relationTableInfo
                    = $tableManager->getTableInfo($relationTableName);
                $relationTableLock = $relationTableInfo->_lock;

                $dao = new FwFacade();
                $dataObj = [];
                $dataObj['lock'] = $relationTableLock;
                $dataObj['language'] = $i18n->getCurrentLanguage();

                $groupData = $dao->referGroupById($dataObj, $id);
                $result = $relationTableInfo->getRow($groupData->getId(),
                    $groupData->convertArray());
            } else {
                $result = parent::get($col_name);
            }
        } else {
            $result = parent::get($col_name);
        }

        return $result;
    }
}

/**
 * Category Public Static Role Class
 *
 * @package grn.workflow
 * @abstract
 */
class GRN_Workflow_CategoryPublicStaticRole extends GRN_Workflow_CategoryBase
{
    var $_app_id = 'workflow';

    /** Target **/
    var $col_target = ['type' => 'relation', 'to' => 'CB_Role'];
    /** Authority Browse **/
    var $col_authority_browse = ['type' => 'int'];
    /** reserve columns **/
    var $col_reserve_int1 = ['type' => 'int'];
    var $col_reserve_int2 = ['type' => 'int'];
    var $col_reserve_int3 = ['type' => 'int'];
    /** Complex Index **/
    var $idx_object_target = ['cols' => ['object', 'target'], 'unique' => true];
}

/**
 * Category Public Dynamic Role Class
 *
 * @package grn.workflow
 * @abstract
 */
class GRN_Workflow_CategoryPublicDynamicRole extends GRN_Workflow_CategoryBase
{
    var $_app_id = 'workflow';

    /** Target **/
    var $col_target = ['type' => 'char'];
    /** Authority Browse **/
    var $col_authority_browse = ['type' => 'int'];
    /** reserve columns **/
    var $col_reserve_int1 = ['type' => 'int'];
    var $col_reserve_int2 = ['type' => 'int'];
    var $col_reserve_int3 = ['type' => 'int'];
    /** Complex Index **/
    var $idx_object_target
        = [
            'cols'   => ['object', 'target'],
            'unique' => true
        ];
}


