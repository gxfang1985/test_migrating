<?php

/**
 * アプリケーション
 *
 * @author  Hideyasu YOSHIDA 2005/12
 * @version 1.0
 * @package grn.workflow
 */

require_once('grn/application.csp');
require_once('workflow/resources.csp');

use grn\grn\access\service\AppAccess;


/**
 * アプリケーション
 *
 * @package grn.workflow
 */
class GRN_Workflow_Application extends GRN_ApplicationBase
{
    /**
     * コンストラクタ
     */
    function __construct()
    {
        parent::__construct(GRN_WORKFLOW_APPLICATION_ID);
    }

    /**
     * 個人設定に表示するメニューを取得
     */
    function getPersonalConfigArray()
    {
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $login = $uum->getLoginUser();

        $common_config = [];
        if ($this->isLicensedUser($login)) //GTM-529
        {
            require_once('workflow/config.csp');
            $logic = GRN_Workflow_Configs::getInstance();
            $logic = $logic->getSystemConfig();
            $personal_agent_setting = $logic->getPersonalAgentSetting();
            if ($personal_agent_setting) {
                $common_config[] = [
                    'page' => 'workflow/personal/agent_index',
                    'icon' => 'groupadmin32'
                ];
            }
        }

        $common_config[] = [
            'page' => 'workflow/personal/mail_forward',
            'icon' => 'mail32'
        ];

        if ( ! $common_config) {
            return false;
        }

        return ['common_config' => $common_config];
    }

    /**
     * システム管理に表示するメニューを取得
     */
    function getSystemConfigArray()
    {
        $general_config = [
            [
                'page' => 'workflow/system/common_set',
                'icon' => 'general32'
            ],
            [
                'page' => 'workflow/system/form_list',
                'icon' => 'form32'
            ],
            [
                'page' => 'workflow/system/path_list',
                'icon' => 'path32'
            ],
            [
                'page' => 'workflow/system/access_index',
                'icon' => 'access32'
            ],
            [
                'page' => 'workflow/system/public_index',
                'icon' => 'public32'
            ],
            [
                'page' => 'workflow/system/privilege_index',
                'icon' => 'manager32'
            ],
            [
                'page' => 'workflow/system/petition_list',
                'icon' => 'workflow32'
            ],
            [
                'page' => 'workflow/system/agent_index',
                'icon' => 'groupadmin32'
            ],
            [
                'page' => 'workflow/system/import_index',
                'icon' => 'import32'
            ],
            [
                'page' => 'workflow/system/export_index',
                'icon' => 'export32'
            ]
        ];

        return ['general_config' => $general_config];
    }

    function getLicenseInfo($service_offset = 30)
    {
        require_once('grn/license.csp');
        $lm = GRN_LicenseManager::getInstance();
        $lic = $lm->getLicense(GRN_LICENSE_BASESYSTEM);
        if ( ! is_array($lic) || 0 == count($lic)) {
            return false;
        }

        if ($lm->isDemoLicense($lic['type'])) {
            // 試用期間を不正に延ばそうとした場合（試用開始日時 > 現在日時）
            if (time() < $lic['register']->unix_ts) {
                $lic['remind_days'] = -1;
            } // 試用期間過ぎた場合
            else {
                $lic['remind_days'] = $lm->getRemindDays($lic['limit']);
            }
        } // 正規ライセンス登録済み
        else {
            $lic['remind_days'] = $lm->getRemindDays($lic['service_limit'],
                $service_offset);
        }

        return $lic;
    }

    function getStatus($license_info)
    {
        static $_status = null;
        if ( ! is_null($_status)) {
            return $_status;
        }
        $_status = GRN_LICENSE_SUCCESS;

        if (0 > $license_info['remind_days']) {
            $_status = GRN_LICENSE_EXPIRED;
        }

        return $_status;
    }

    function isLicensed()
    {
        $lic = $this->getLicenseInfo();
        if ( ! is_array($lic) || 0 == count($lic)) {
            return false;
        }

        return GRN_LICENSE_EXPIRED != $this->getStatus($lic);
    }

    /**
     * @param CB_User $user
     *
     * @return bool
     */
    function isLicensedUser($user)
    {
        if ( ! $user) {
            return false;
        }

        $lic = $this->getLicenseInfo();
        if ( ! is_array($lic) || 0 == count($lic)) {
            return false;
        }

        if ( ! $this->isLicensed()) {
            return false;
        }

        require_once('grn/license.csp');
        $lm = GRN_LicenseManager::getInstance();
        if ( ! $lm->isDemoLicense($lic['type'])) {
            return AppAccess::isAppAvailableInternalAccess($this->__app_id);
        }

        return true;
    }

    /**
     * Return TRUE if $user can use this application; otherwise return FALSE.
     *
     * @param  object CB_User $user
     *
     * @return bool
     */
    function isAvailableFor($user)
    {
        return $this->isLicensedUser($user);
    }

    /**
     * （通知一覧で表示する）通知情報を取得
     */
    function getNotificationPageInfo(
        $user,
        $application_id,
        $unique_id,
        $org_data,
        $status,
        $action_id,
        $sub_module_id
    ) {
        $user_id = $user->getOID();

        require_once('workflow/folder_logic.csp');
        $logic = GRN_Workflow_Folder_Logic::getInstance();
        $uids = [$user_id];
        $foreign_keys = ['UNPROCESSED_FOLDER_FOREIGN_KEY'];
        $folders = $logic->getSpecificList($uids, $foreign_keys);
        $folder = current($folders);

        $subject_icon = 'workflow20';
        if (array_key_exists('priority', $org_data)
            && $org_data['priority'] == "1"
        ) {
            $subject_icon
                = 'workflowAttention20.png?';// The char '?' use the show icon is not a gif extention
        }

        return [
            'url_params'   => [
                'fid' => $folder['_id'],
                'pid' => $unique_id
            ],
            'subject_page' => 'workflow/handle',
            'subject_icon' => $subject_icon
        ];
    }

    function getNotificationPageInfo_cellular(
        & $user,
        $app_id,
        $unique_id,
        $org_data,
        $status
    ) {
        $user_id = $user->getOID();

        require_once('workflow/folder_logic.csp');
        $logic = GRN_Workflow_Folder_Logic::getInstance();
        $uids = [$user_id];
        $foreign_keys = ['UNPROCESSED_FOLDER_FOREIGN_KEY'];
        $folders = $logic->getSpecificList($uids, $foreign_keys);
        $folder = current($folders);

        $info = [];
        $info['subject_page'] = 'workflow/cellular/look';
        $info['url_params'] = [
            'fid' => $folder['_id'],
            'pid' => $unique_id
        ];

        return $info;
    }

    /**
     * ケータイトップページ通知表示用
     */
    function getNotificationIndexPageInfo_cellular(& $user, $app_id)
    {
        $info = [];
        $info['caption_module'] = 'grn.workflow.cellular';
        $info['caption_key'] = 'notify';
        $info['icon'] = 'ok';

        return $info;
    }

    /**
     * Get Portlet List
     *
     * @return array $portlet_list
     */
    function &getPortletList()
    {
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $login = $uum->getLoginUser();
        $login_id = $login->getOID();

        require_once('workflow/controller_util.csp');
        $folder_util = GRN_Workflow_Folder_Controller_Utility::getInstance();
        if ($folder_util->isInitializeUser($login_id)) {
            require_once('workflow/folder_logic.csp');
            $logic = GRN_Workflow_Folder_Logic::getInstance();
            $logic->initializeUsers([$login_id]);
        }

        require_once('fw/i18n.csp');
        $portlet_list = [];

        // Default Workflow Portlet
        $workflow_portlet = [
            'name'             => cb_msg(GRN_WORKFLOW_MODULE_ID,
                'portlet_view_workflow'),
            //名前
            'type'             => 'grn.workflow.workflow',
            //種別
            'version'          => '1.0',
            //バージョン
            'set_template'     => 'workflow/portlet/set_workflow.csp',
            //設定用テンプレート名
            'command_template' => 'workflow/portlet/command_set_workflow.csp',
            //設定用テンプレート名
            'view_template'    => 'workflow/portlet/view_workflow.csp'
            //表示用テンプレート名
        ];
        $portlet_list[] = $workflow_portlet;

        return $portlet_list;
    }

    /**
     * アプリケーションのデータをクリーンアップする
     */
    function cleanup()
    {
        $this->_cleanup_workflow_draft();
    }

    /**
     * 削除されたユーザーのワークフロー下書きとその添付ファイルを削除する
     *
     * @access private
     */
    function _cleanup_workflow_draft()
    {
        global $G_container_base;
        $logger = $G_container_base->getInstance('cleanup_logger');

        $app_locator = GRN_ApplicationLocator::instance();
        $manager = $app_locator->getTableManager('workflow');

        require_once('workflow/table.csp');
        require_once('workflow/file.csp');
        $tab_itemdatafile = $manager->getTableInfo('GRN_Workflow_ItemDataFile');
        $tab_itemdata = $manager->getTableInfo('GRN_Workflow_ItemData');
        $tab_petition = $manager->getTableInfo('GRN_Workflow_Petition');
        $tab_file = $manager->getTableInfo('GRN_Workflow_File');

        // Remove attach files.
        $rowset = new CB_RowSet($tab_file, 'file');
        $rowset->addJoin($tab_itemdatafile, 'itemdatafile.col_file = file._id',
            CB_DATABASE_LEFT_JOIN, 'itemdatafile');
        $rowset->addJoin($tab_itemdata,
            'itemdatafile.col_item_data = itemdata._id', CB_DATABASE_LEFT_JOIN,
            'itemdata');
        $rowset->addJoin($tab_petition, 'itemdata.col_petition = petition._id',
            CB_DATABASE_LEFT_JOIN, 'petition');
        $condition = $rowset->queryf("petition.col_petition_number IS NULL AND "
                                     .
                                     "petition.col_creator IS NULL AND " .
                                     "petition.col_status = '@S'",
            GRN_WORKFLOW_STATUS_TEMPORARY);
        $rowset->addCondition($condition);

        while ( ! is_null($file = $rowset->iterate())) {
            $file_id = $file->getOID();
            $logger->log('[delete] petition file(fid:' . $file_id . ')');
            $file->delete();
        }
        $rowset->destroy();
        unset($rowset);

        // Remove petition.
        $rowset = new CB_RowSet($tab_petition, 'petition');
        $rowset->addCondition($condition);

        while ( ! is_null($petition = $rowset->iterate())) {
            $petition_id = $petition->getOID();
            $logger->log('[delete] petition(pid:' . $petition_id . ')');
            $petition->delete();
        }
        $rowset->destroy();

        unset($tab_itemdatafile, $tab_itemdata, $tab_petition, $tab_file, $rowset, $manager, $app_locator, $logger);
    }
}

