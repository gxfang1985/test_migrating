<?php

namespace grn\workflow;

use grn\grn\customization\logic\ResourceLogic;

class CustomizationUtil
{
    const CODE_MAX_LENGTH = 100;

    private function __construct()
    {
    }

    /**
     * @param \GRN_Smarty|NULL $smarty
     *
     * @return bool
     */
    public static function allowCustomization($smarty = null)
    {
        require_once('workflow/config.csp');
        $workflow_configs = \GRN_Workflow_Configs::getInstance();
        $system_config = $workflow_configs->getSystemConfig();
        $allow_customization = $system_config->getJsCssCustomizationSetting();

        if ( ! is_null($smarty)) {
            $smarty->assign('allow_customization', $allow_customization);
        }

        return $allow_customization;
    }

    /**
     * @param NULL|integer $customization_status
     *
     * @return bool
     */
    public static function isCustomizationOn($customization_status)
    {
        return $customization_status
               == ResourceLogic::ACTIVATION_CUSTOMIZATION_ON;
    }

    /**
     * @param \GRN_Smarty|NULL $smarty
     * @param NULL|integer     $customization_status
     *
     * @return bool
     */
    public static function applyCustomization(
        $customization_status,
        $smarty = null
    ) {
        $apply_customization = self::allowCustomization()
                               && self::isCustomizationOn($customization_status);
        if ( ! is_null($smarty)) {
            $smarty->assign('apply_customization', $apply_customization);
        }

        return $apply_customization;
    }

    /**
     * @param integer|NULL     $is_customization_active
     * @param \GRN_Smarty|NULL $smarty
     *
     * @return string
     */
    public static function getActivationCustomizationResourceString(
        $is_customization_active,
        $smarty = null
    ) {
        $activation_string = cb_msg('grn.workflow.system',
            'customization_resource_status_unsaved');
        if ( ! is_null($is_customization_active)) {
            switch ($is_customization_active) {
                case ResourceLogic::ACTIVATION_CUSTOMIZATION_ON:
                    $activation_string = cb_msg('grn.workflow.system',
                        'customization_resource_status_saved_apply');
                    break;
                case ResourceLogic::ACTIVATION_CUSTOMIZATION_OFF:
                    $activation_string = cb_msg('grn.workflow.system',
                        'customization_resource_status_saved_not_apply');
                    break;

                default:
                    $activation_string = cb_msg('grn.workflow.system',
                        'customization_resource_status_unsaved');
            }
        }

        if ( ! is_null($smarty)) {
            $smarty->assign('activation_customization_resource_string',
                $activation_string);
        }

        return $activation_string;
    }

    /**
     * @param NULL|integer $is_customization_active
     *
     * @return bool
     */
    public static function parseIsActivateCustomizationStatus(
        $is_customization_active
    ) {
        if ($is_customization_active
            == ResourceLogic::ACTIVATION_CUSTOMIZATION_ON
        ) {
            return true;
        }

        return false;
    }

    /**
     * @param string $code
     *
     * @return string
     */
    public static function trimCode($code)
    {
        if (is_null($code)) {
            return '';
        }

        return substr(cb_trim($code), 0, self::CODE_MAX_LENGTH);
    }

    /**
     * @param string $code
     *
     * @return bool
     */
    public static function validateCode($code)
    {
        return preg_match('/^[\da-zA-Z_\-]+$/', $code) > 0 ? true : false;
    }

    /**
     * @param array $customization_petition
     * @param array $screen_properties
     *
     * @return array
     */
    public static function getCreateCustomizationData(
        $customization_petition,
        $screen_properties = []
    ) {
        return self::getCustomizationData($customization_petition,
            $screen_properties);
    }

    /**
     * @param array $customization_petition
     * @param array $screen_properties
     *
     * @return array
     */
    public static function getDetailCustomizationData(
        $customization_petition,
        $screen_properties = []
    ) {
        return self::getCustomizationData($customization_petition,
            $screen_properties);
    }

    /**
     * @param array $customization_petition
     * @param array $screen_properties
     *
     * @return array
     */
    public static function getApproveCustomizationData(
        $customization_petition,
        $screen_properties = []
    ) {
        return self::getCustomizationData($customization_petition,
            $screen_properties);
    }

    /**
     * @param array $customization_petition
     * @param array $screen_properties
     *
     * @return array
     */
    public static function getPrintCustomizationData(
        $customization_petition,
        $screen_properties = []
    ) {
        return self::getCustomizationData($customization_petition,
            $screen_properties);
    }

    /**
     * @param array $customization_petition
     * @param array $screen_properties
     *
     * @return array
     */
    private static function getCustomizationData(
        $customization_petition,
        $screen_properties
    ) {
        $data = [
            'viewer'  => GRN_WORKFLOW_VIEW_TYPE_APPLICANT,
            'reuse'   => false,
            'preview' => false,
            'draft'   => false,
            'confirm' => false,
            'request' => $customization_petition
        ];

        foreach ($screen_properties as $prop => $value) {
            if (isset($data[$prop]) || $prop == 'stepCode') {
                $data[$prop] = $value;
            }
        }

        return $data;
    }

    /**
     * @param array $petition
     * @param array $path_steps
     *
     * @return array
     */
    public static function getPathInfoForOperations($petition, $path_steps)
    {
        $user_id = isset($petition['proxy_approver_id'])
            ? $petition['proxy_approver_id'] : cb_get_login_user()->getOID();
        $petition_id = $petition['pid'];
        $sent_back = [];
        $sent_back[] = '$applicant';
        $handle_mode = 'confirm';
        if (isset($petition['reapply'])) {
            $handle_mode = 'reapply';
        }

        require_once('workflow/change_path_history.csp');
        $logic = \GRN_Workflow_ChangePathHistories::getInstance();
        $columns = [
            '_id',
            'col_path_step_data',
            'col_comment',
            'col_creator',
            'col_creator_name',
            'col_creator_foreign_key',
            'col_ctime'
        ];
        $change_path_histories = $logic->getListByPetitionId($petition_id,
            $columns, 0, -1);

        $deleted_users = [];
        if (is_array($change_path_histories)
            && 0 < count($change_path_histories)
        ) {
            $logic = \GRN_Workflow_ChangePathDeletedUsers::getInstance();
            $columns = [
                '_id',
                'col_change_path_history',
                'col_user'
            ];
            $tmp = $logic->getList(array_keys($change_path_histories),
                $user_id, $columns);
            foreach ($tmp as $deleted_user) {
                $change_path_history_id
                    = $deleted_user['col_change_path_history'];
                $change_path_history
                    = $change_path_histories[$change_path_history_id];
                $path_step_data_id
                    = $change_path_history['col_path_step_data'];
                if (array_key_exists($path_step_data_id, $deleted_users)) {
                    $deleted_users[$path_step_data_id] = [];
                }
                $deleted_users[$path_step_data_id][$deleted_user['col_user']]
                    = $deleted_user;
            }
        }

        $in_process = null;
        $in_path = false;
        $in_evaluated_path = false;
        $col_finished = GRN_WORKFLOW_FINISHED_NONE;
        $cancel_confirm = false;
        $change_path_history = [];
        foreach (array_keys($path_steps) as $path_step_id) {
            $path_step = $path_steps[$path_step_id];
            $path_step_data_id = $path_step['_id'];

            if ($path_step['col_activate']) {
                if ($path_step['col_skip']) {

                    if (array_key_exists($path_step_data_id, $deleted_users)) {
                        if (array_key_exists($user_id,
                            $deleted_users[$path_step_data_id])
                        ) {
                            $handle_mode = 'change_transactor';
                            $in_path = true;
                            $in_evaluated_path = true;
                        }
                    }
                } else {
                    // Processor
                    if ( ! $in_process) {
                        // 処理中/完了した経路ステップ
                        if ( ! $path_step['col_finished']) {
                            // 処理中の経路ステップ
                            $path_step['in_process'] = true;
                            $in_process = $path_step_id;

                            if (false !== array_search($user_id,
                                    $path_step['uids'])
                            ) {
                                $handle_mode = null;
                                $in_path = true;
                                $in_evaluated_path = true;
                                if (GRN_WORKFLOW_STATUS_IN_PROCESS_CANCEL
                                    == $petition['status']
                                ) {
                                    foreach ($path_step['users'] as $user) {
                                        if (GRN_WORKFLOW_RESULT_CONFIRM
                                            == $user['col_result']
                                        ) {
                                            $cancel_confirm = true;
                                            break;
                                        }
                                    }
                                }
                                break;
                            } else {
                                $psdids = [];
                                while ($path_step) {
                                    if (cb_at($path_step, 'col_activate')) {
                                        $path_step_data_id = $path_step['_id'];
                                        $psdids[] = $path_step_data_id;
                                        if (false !== ($result
                                                = array_search($user_id,
                                                $path_step['uids']))
                                        ) {
                                            if (GRN_WORKFLOW_RESULT_ACCEPT
                                                <= $path_step['users'][$result]['col_result']
                                            ) {
                                                $handle_mode = 'view_only';
                                            }

                                            $in_path = true;
                                            $in_evaluated_path = true;
                                            break;
                                        } elseif (array_key_exists($path_step_data_id,
                                            $deleted_users)
                                        ) {
                                            if (array_key_exists($user_id,
                                                $deleted_users[$path_step_data_id])
                                            ) {
                                                $handle_mode
                                                    = 'change_transactor';
                                                $in_path = true;
                                                $in_evaluated_path = true;
                                                break;
                                            }
                                        }
                                    }
                                    $path_step = cb_at($path_step, 'previous');
                                }
                            }
                        } else {
                            // 完了した経路ステップ
                            if (false !== array_search($user_id,
                                    $path_step['uids'])
                            ) {
                                $in_path = true;
                                if (GRN_WORKFLOW_STATUS_REJECTION
                                    == $petition['status']
                                    || GRN_WORKFLOW_STATUS_REMAND
                                       == $petition['status']
                                ) {
                                    if (GRN_WORKFLOW_FINISHED_REJECTION
                                        != $col_finished
                                        && GRN_WORKFLOW_FINISHED_REMAND
                                           != $col_finished
                                    ) {
                                        $in_evaluated_path = true;
                                    }
                                } else {
                                    $in_evaluated_path = true;
                                }
                            } else {
                                if (array_key_exists($path_step_data_id,
                                    $deleted_users)
                                ) {
                                    if (array_key_exists($user_id,
                                        $deleted_users[$path_step_data_id])
                                    ) {
                                        $handle_mode = 'change_transactor';
                                        $in_path = true;
                                        $in_evaluated_path = true;

                                    }
                                }
                            }

                            if (GRN_WORKFLOW_STATUS_REJECTION
                                == $petition['status']
                                || GRN_WORKFLOW_STATUS_REMAND
                                   == $petition['status']
                            ) {
                                if (GRN_WORKFLOW_FINISHED_REJECTION
                                    == $path_step['col_finished']
                                    || GRN_WORKFLOW_FINISHED_REMAND
                                       == $path_step['col_finished']
                                ) {
                                    $col_finished = $path_step['col_finished'];
                                }
                            }
                        }
                        if (is_array($path_step)) {
                            $sent_back[] = cb_at($path_step, 'col_code');
                        }

                    } else {
                        // 未処理の経路ステップ
                        if (false !== array_search($user_id,
                                $path_step['uids'])
                        ) {
                            $in_path = true;
                            if (GRN_WORKFLOW_STATUS_REJECTION
                                == $petition['status']
                                || GRN_WORKFLOW_STATUS_REMAND
                                   == $petition['status']
                            ) {
                                if (GRN_WORKFLOW_FINISHED_REJECTION
                                    != $col_finished
                                    && GRN_WORKFLOW_FINISHED_REMAND
                                       != $col_finished
                                ) {
                                    $in_evaluated_path = true;
                                }
                            }
                            break;
                        }

                        if (GRN_WORKFLOW_STATUS_REJECTION == $petition['status']
                            || GRN_WORKFLOW_STATUS_REMAND == $petition['status']
                        ) {
                            if (GRN_WORKFLOW_FINISHED_REJECTION
                                == $path_step['col_finished']
                                || GRN_WORKFLOW_FINISHED_REMAND
                                   == $path_step['col_finished']
                            ) {
                                $col_finished = $path_step['col_finished'];
                            }
                        }
                    }
                }
            }
        }

        if ($user_id == cb_at($petition, 'creator')
            || $user_id == cb_at($petition, 'agent_user')
            || $user_id == cb_at($petition, 'user')
        ) {
            // ログインユーザーは申請者
            if ( ! $in_process
                 && GRN_WORKFLOW_STATUS_REMAND == $petition['status']
            ) {
                // 申請者本人に差し戻された
                $handle_mode = null;
            }
            $in_path = true;
            $in_evaluated_path = true;
        }


        if ( ! $in_evaluated_path) {
            if (isset($petition['reapply'])) {
                // 再申請された
                $handle_mode = 'reapply';
            } else {
                if ($in_path
                    && GRN_WORKFLOW_STATUS_UNPROCESSING_CANCEL
                       != $petition['status']
                ) {
                    // まだ処理が回ってきてない（進行中、差し戻し）
                    $handle_mode = 'confirm';
                }
            }
        }


        return [
            'sent_back_target' => $sent_back,
            'handle_mode'      => $handle_mode,
            'cancel_confirm'   => $cancel_confirm,
        ];
    }

    /**
     * @param $form_id
     *
     * @return mixed
     */
    public static function getFormCustomizationStatus($form_id)
    {
        require_once('workflow/controller_util.csp');
        $form_util = \GRN_Workflow_Form_Controller_Utility::getInstance();
        $form_logic_base = $form_util->getLogicBase();
        $form = $form_logic_base->getDirect($form_id,
            ['_id', 'col_is_customization_active']);

        return $form['col_is_customization_active'];
    }
}
