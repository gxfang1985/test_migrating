<?php
/**
 * Workflow Application Folder Base Class
 *
 * @author  SHIMADA Kunihiko 2006/1
 * @version 1.0
 * @package grn.workflow
 */

/** Workflow Application **/
require_once('workflow/resources.csp');
require_once('grn/application.csp');

/**
 * Folder Manager Base Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_Folder_Manager_Base
{
    /** Table Name **/
    var $_table_name = null;

    /** Folder List **/
    var $_list = [];

    /** Folder List(with Extra Information) **/
    var $_listEx = [];

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
        $this->_table_name = 'tab_grn_workflow_folder';
    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_Folder_Manager_Base $instance                  //Instance of GRN_Workflow_Folder_Manager_Base
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_Folder_Manager_Base();
        }

        return $_instance;
    }

    /**
     * Get Database
     *
     * @return CB_DatabaseConnection $table                     //GRN_Workflow_Folder Table Information
     */
    function _getDatabase()
    {
        static $database = null;
        if (is_null($database)) {
            $app_locator = GRN_ApplicationLocator::instance();
            $database = $app_locator->getConnection('workflow');
        }

        return $database;
    }

    /**
     * Get Table Name
     *
     * @params string $class_name
     * @param $class_name
     *
     * @return string  $table_name
     */
    function _getTableName($class_name)
    {
        $table_name = sprintf('tab_%s', strtolower($class_name));

        return $table_name;
    }

    /**
     * Get Column Prefix
     *
     * @param  string $class_name //Class Name
     *
     * @return array  $column_name_list          //Column Name List
     */
    function _getColumnPrefix($class_name = null)
    {
        $column_prefix = null;
        if ( ! is_null($class_name)) {
            //Set Column Prefix
            switch ($class_name) {
                case GRN_WORKFLOW_TABLE_FOLDER:
                    $column_prefix = "f";
                    break;
                case GRN_WORKFLOW_TABLE_FOLDERRELATION:
                    $column_prefix = "r";
                    break;
                case GRN_WORKFLOW_TABLE_PETITION:
                    $column_prefix = "p";
                    break;
                case GRN_WORKFLOW_TABLE_ITEMDATA:
                    $column_prefix = "d";
                    break;
            }
        }

        return $column_prefix;
    }

    /**
     * Get Column List
     *
     * @param  string $class_name //Class Name
     * @param bool    $set_alias
     *
     * @return array  $column_name_list          //Column Name List
     */
    function &_getColumnList($class_name = null, $set_alias = true)
    {

        //Check Class Name
        $column_prefix = $this->_getColumnPrefix($class_name);

        if (is_null($class_name)) {
            //Default Class Name and Table Name
            $class_name = GRN_WORKFLOW_TABLE_FOLDER;
        }

        //Create Column Name List
        require_once('workflow/table.csp');
        $column_list = get_class_vars($class_name);
        foreach (array_keys($column_list) as $column_name) {
            if (strpos($column_name, 'col_') === 0) {
                if (is_null($column_prefix)) {
                    $column_name_list[] = $column_name;
                } elseif ($set_alias) {
                    $column_name_list[] = sprintf('%s.%s %s_%s', $column_prefix,
                        $column_name, $column_prefix, $column_name);
                } else {
                    $column_name_list[] = sprintf('%s.%s', $column_prefix,
                        $column_name);
                }
            }
        }
        if (is_null($column_prefix)) {
            $column_name_list[] = '_id';
        } elseif ($set_alias) {
            $column_name_list[] = sprintf('%s._id %s__id', $column_prefix,
                $column_prefix);
        } else {
            $column_name_list[] = sprintf('%s._id', $column_prefix);
        }

        return $column_name_list;
    }

    /**
     * Get Column list replaced Set NULL columns.
     */
    function _getColumnListSetNull(
        & $column_list,
        & $join,
        $class_name,
        $set_null_list
    ) {
        $table_alias = $this->_getColumnPrefix($class_name);
        if (empty($column_list)) {
            $column_list = $this->_getColumnList($class_name);
        }

        if ( ! is_string($join)) {
            $join = "";
        }

        if (is_array($set_null_list)) {
            foreach ($set_null_list as $key => $value) {
                $user_alias = "u_" . $key;
                $column_alias = $table_alias . "_" . $value;
                $column_name = $table_alias . "." . $value;
                $column = $column_name . " " . $column_alias;
                $column_key = array_search($column, $column_list);
                if ($column_key !== false) {
                    $column_list[$column_key]
                        = sprintf('CASE WHEN %s.col_deleted IS NULL THEN %s end AS %s',
                        $user_alias, $column_name, $column_alias);
                    $join .= sprintf(' LEFT JOIN tab_cb_user AS %s ON %s=%s._id ',
                        $user_alias, $column_name, $user_alias);
                }
            }
        }

        return $column_list;
    }

    /**
     * Get Folder
     *
     * @param  int $folder_id //Folder ID
     * @param int  $lock_mode //Lock Mode
     *
     * @return array  $folder                       //Folder Information Array
     */
    function &getFolder($folder_id, $lock_mode = CB_DATABASE_DEFAULT_LOCK)
    {
        $folder = false;

        //Check Arguments
        require_once('workflow/error_code.csp');
        cb_trim_check($folder_id,
            E_GRN_WRKF_FOLDER_INVALID_FOLDER_ID); //Folder ID

        //Get Database
        $database = $this->_getDatabase();

        //Create Column List
        $column_list = implode(',',
            $this->_getColumnList(GRN_WORKFLOW_TABLE_FOLDER, false));

        $condition = cb_queryf($database, 'f._id = "@S"', $folder_id);
        $condition = 'WHERE ' . $condition;

        $join
            = ' INNER JOIN tab_cb_user AS u ON (f.col_user=u._id AND u.col_deleted IS NULL)';

        //Create Query
        $query = sprintf('SELECT %s FROM %s AS f %s %s', $column_list,
            $this->_table_name, $join, $condition);
        $query = $database->select_format($query, 0, 1, $lock_mode);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Update Folder List
        $ret = $database->fetch_assoc($result);

        return $ret;
    }

    /**
     * Get Folder
     *
     * @param  int  $user_id   //User ID
     * @param  int  $folder_id //Folder ID
     * @param  bool $refresh   //Refresh Cache
     * @param  int  $lock_mode //Lock Mode
     *
     * @return array  $folder                       //Folder Information Array
     */
    function &get(
        $user_id,
        $folder_id,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $folder = false;

        //Check Arguments
        require_once('workflow/error_code.csp');
        cb_trim_check($folder_id,
            E_GRN_WRKF_FOLDER_INVALID_FOLDER_ID); //Folder ID
        cb_trim_check($user_id, E_GRN_WRKF_FOLDER_INVALID_USER_ID); //User ID

        //Get Folder List From Cache
        if ( ! $refresh) {
            if (array_key_exists($user_id, $this->_list)) {
                if (array_key_exists($folder_id, $this->_list[$user_id])) {
                    if (is_array($this->_list[$user_id][$folder_id])) {
                        return $this->_list[$user_id][$folder_id];
                    }
                }
            }
        }

        //Get Database
        $database =& $this->_getDatabase();

        //Create Column List
        $column_list = implode(',',
            $this->_getColumnList(GRN_WORKFLOW_TABLE_FOLDER, false));

        //Create Condition
        $condition_list = [];
        if ($user_id == -1) {
            $condition_list[] = 'f.col_user IS NULL';
        } elseif ($user_id != 0) {
            $condition_list[] = cb_queryf($database, 'f.col_user = "@S"',
                $user_id);
        }
        $condition_list[] = cb_queryf($database, 'f._id = "@S"', $folder_id);

        $condition = implode(' AND ', $condition_list);
        if ($condition) {
            $condition = 'WHERE ' . $condition;
        }

        //Create Order By Column
        $order_by = sprintf('ORDER BY f.%s, f._id',
            GRN_WORKFLOW_COLUMN_LIST_INDEX);

        $join
            = ' INNER JOIN tab_cb_user AS u ON (f.col_user=u._id AND u.col_deleted IS NULL)';

        //Create Query
        $query = sprintf('SELECT %s FROM %s AS f %s %s %s', $column_list,
            $this->_table_name, $join, $condition, $order_by);
        $query = $database->select_format($query, 0, 1, $lock_mode);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Update Folder List
        $ret = $database->fetch_assoc($result);

        return $ret;
    }

    /**
     * Get Folder By Foreign Key
     *
     * @param  int    $user_id    //User ID
     * @param  string $folder_key //Folder Foreign Key
     * @param  int    $lock_mode  //Lock Mode
     *
     * @return array  $folder                   //Folder Object
     */
    function &getByForeignKey(
        $user_id,
        $folder_key,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Database
        $database = $this->_getDatabase();

        //Create Column List
        $column_list = implode(',',
            $this->_getColumnList(GRN_WORKFLOW_TABLE_FOLDER, false));

        //Create Condition
        $condition = [];
        $condition[] = cb_queryf($database,
            sprintf("f.%s = '@S'", GRN_WORKFLOW_COLUMN_FOREIGN_KEY),
            $folder_key);
        $condition[] = cb_queryf($database,
            sprintf("f.%s = '@S'", GRN_WORKFLOW_COLUMN_USER), $user_id);
        $condition_string = implode(' AND ', $condition);

        $join
            = ' INNER JOIN tab_cb_user AS u ON (f.col_user=u._id AND u.col_deleted IS NULL)';

        //Create Query
        $query = sprintf('SELECT %s FROM %s AS f %s WHERE %s', $column_list,
            $this->_table_name, $join, $condition_string);
        $query = $database->select_format($query, 0, -1, $lock_mode);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Get Folder Information
        $row = $database->fetch_assoc($result);
        $database->free_result($result);

        //Return Folder Information
        return $row;
    }

    /**
     * Get Folder(with Extra Information)
     *
     * @param  int  $user_id   //User ID
     * @param  int  $folder_id //Folder ID
     * @param  int  $offset    //Offset
     * @param  int  $limit     //Limit
     * @param  bool $refresh   //Refresh Cache
     * @param  int  $lock_mode //Lock Mode
     *
     * @return array  $folder                       //Folder Information Array
     */
    function &getEx(
        $user_id,
        $folder_id,
        $offset = 0,
        $limit = 20,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Return Folder
        $ret =& $this->getExOrder($user_id, $folder_id, $offset, $limit, null,
            $refresh, $lock_mode);

        return $ret;
    }

    /**
     * @param       $user_id
     * @param       $folder_id
     * @param       $offset
     * @param       $limit
     * @param array $order
     * @param       $lock_mode
     *
     * @return bool|resource
     */
    protected function executeGetExOrderQuery(
        $user_id,
        $folder_id,
        $offset,
        $limit,
        $order = [],
        $lock_mode
    ) {
        $db = $this->_getDatabase();

        //user_id == 0 のときは、 tab_grn_workflow_folder.col_user で絞らない。
        //3.5.0 までは、「user_id == -1 のときは where 句で tab_grn_workflow_folder.col_user is null で絞り込む。」ことができそうなクエリだったが、、
        //tab_grn_workflow_folder.col_user と inner join していたので、実は機能していなかったので削除した。
        $escaped_where_clause_user = "";
        if ($user_id != 0) {
            $escaped_where_clause_user = cb_queryf($db, "f.col_user = '@S'",
                $user_id);
        }

        //make order-by clause.
        // when $order by is not defined, it is initialized with "p.col_ctime DESC, p.col_list_index, p._id"
        $order_by_string = "";
        if (is_array($order) && count($order) > 0) {
            foreach ($order as $order_table => $order_column) {
                foreach ($order_column as $order_column_name => $order_type) {
                    $order_by[] = $this->_getColumnPrefix($order_table) . '.'
                                  . $order_column_name . ' ' . $order_type;
                }
            }
            $order_by_string = implode(', ', $order_by)
                               . ', p.col_list_index, p._id';
        } else {
            $order_by_string = ' p.col_ctime DESC, p.col_list_index, p._id';
        }

        $query = "SELECT " .
                 "f_col_name, " .
                 "f_col_folder_type, " .
                 "f_col_foreign_key, " .
                 "f_col_memo, " .
                 "f_col_user, " .
                 "f_col_parent, " .
                 "f_col_list_index," .
                 "f_col_creator," .
                 "f_col_creator_name," .
                 "f_col_creator_foreign_key," .
                 "f_col_ctime," .
                 "f_col_modifier," .
                 "f_col_modifier_name," .
                 "f_col_modifier_foreign_key," .
                 "f_col_mtime," .
                 "f__id," .
                 "r_col_folder," .
                 "r_col_petition," .
                 "r_col_list_index," .
                 "r_col_creator," .
                 "r_col_creator_name," .
                 "r_col_creator_foreign_key," .
                 "r_col_ctime," .
                 "r_col_modifier," .
                 "r_col_modifier_name," .
                 "r_col_modifier_foreign_key," .
                 "r_col_mtime," .
                 "r__id, " .
                 "p_col_name," .
                 "p_col_petition_number," .
                 "CASE WHEN u_0.col_deleted IS NULL THEN p_col_user END AS p_col_user, "
                 .
                 "p_col_user_name," .
                 "p_col_user_foreign_key," .
                 "p_col_status," .
                 "p_col_form," .
                 "p_col_form_name," .
                 "p_col_form_foreign_key," .
                 "p_col_icon_type," .
                 "p_col_icon_id," .
                 "p_col_icon_url," .
                 "p_col_serial_type," .
                 "p_col_serial_format," .
                 "p_col_serial_number," .
                 "CASE WHEN u_3.col_deleted IS NULL THEN p_col_transactor end AS p_col_transactor,"
                 .
                 "p_col_transactor_name," .
                 "p_col_transactor_foreign_key," .
                 "p_col_comment," .
                 "p_col_ptime," .
                 "p_col_deleted," .
                 "p_col_export_folder," .
                 "p_col_auto_export," .
                 "p_col_login_name_export," .
                 "p_col_export_top_line," .
                 "p_col_reapply," .
                 "p_col_list_index," .
                 "p_col_priority," .
                 "CASE WHEN u_4.col_deleted IS NULL THEN p_col_agent_user end AS p_col_agent_user,"
                 .
                 "p_col_agent_user_name," .
                 "p_col_agent_user_foreign_key," .
                 "CASE WHEN u_5.col_deleted IS NULL THEN p_col_agent_transactor end AS p_col_agent_transactor,"
                 .
                 "p_col_agent_transactor_name," .
                 "p_col_agent_transactor_foreign_key," .
                 "CASE WHEN u_1.col_deleted IS NULL THEN p_col_creator end AS p_col_creator,"
                 .
                 "p_col_creator_name," .
                 "p_col_creator_foreign_key," .
                 "p_col_ctime," .
                 "CASE WHEN u_2.col_deleted IS NULL THEN p_col_modifier end AS p_col_modifier,"
                 .
                 "p_col_modifier_name," .
                 "p_col_modifier_foreign_key," .
                 "p_col_mtime," .
                 "p__id " .
                 "FROM " .
                 "( " .
                 $db->select_format(
                     cb_queryf($db,
                         "SELECT " .
                         "f.col_name f_col_name, " .
                         "f.col_folder_type f_col_folder_type, " .
                         "f.col_foreign_key f_col_foreign_key, " .
                         "f.col_memo f_col_memo, " .
                         "f.col_user f_col_user, " .
                         "f.col_parent f_col_parent, " .
                         "f.col_list_index f_col_list_index," .
                         "f.col_creator f_col_creator," .
                         "f.col_creator_name f_col_creator_name," .
                         "f.col_creator_foreign_key f_col_creator_foreign_key,"
                         .
                         "f.col_ctime f_col_ctime," .
                         "f.col_modifier f_col_modifier," .
                         "f.col_modifier_name f_col_modifier_name," .
                         "f.col_modifier_foreign_key f_col_modifier_foreign_key,"
                         .
                         "f.col_mtime f_col_mtime," .
                         "f._id f__id," .
                         "r.col_folder r_col_folder," .
                         "r.col_petition r_col_petition," .
                         "r.col_list_index r_col_list_index," .
                         "r.col_creator r_col_creator," .
                         "r.col_creator_name r_col_creator_name," .
                         "r.col_creator_foreign_key r_col_creator_foreign_key,"
                         .
                         "r.col_ctime r_col_ctime," .
                         "r.col_modifier r_col_modifier," .
                         "r.col_modifier_name r_col_modifier_name," .
                         "r.col_modifier_foreign_key r_col_modifier_foreign_key,"
                         .
                         "r.col_mtime r_col_mtime," .
                         "r._id r__id, " .
                         "p._id p__id," .
                         "p.col_agent_transactor p_col_agent_transactor," .
                         "p.col_agent_transactor_foreign_key p_col_agent_transactor_foreign_key,"
                         .
                         "p.col_agent_transactor_name p_col_agent_transactor_name,"
                         .
                         "p.col_agent_user p_col_agent_user," .
                         "p.col_agent_user_foreign_key p_col_agent_user_foreign_key,"
                         .
                         "p.col_agent_user_name p_col_agent_user_name," .
                         "p.col_auto_export p_col_auto_export," .
                         "p.col_comment p_col_comment," .
                         "p.col_creator p_col_creator," .
                         "p.col_creator_foreign_key p_col_creator_foreign_key,"
                         .
                         "p.col_creator_name p_col_creator_name," .
                         "p.col_ctime p_col_ctime," .
                         "p.col_deleted p_col_deleted," .
                         "p.col_export_folder p_col_export_folder," .
                         "p.col_export_top_line p_col_export_top_line," .
                         "p.col_form p_col_form," .
                         "p.col_form_foreign_key p_col_form_foreign_key," .
                         "p.col_form_name p_col_form_name," .
                         "p.col_icon_id p_col_icon_id," .
                         "p.col_icon_type p_col_icon_type," .
                         "p.col_icon_url p_col_icon_url," .
                         "p.col_list_index p_col_list_index," .
                         "p.col_login_name_export p_col_login_name_export," .
                         "p.col_modifier p_col_modifier," .
                         "p.col_modifier_foreign_key p_col_modifier_foreign_key,"
                         .
                         "p.col_modifier_name p_col_modifier_name," .
                         "p.col_mtime p_col_mtime," .
                         "p.col_name p_col_name," .
                         "p.col_petition_number p_col_petition_number," .
                         "p.col_priority p_col_priority," .
                         "p.col_ptime p_col_ptime," .
                         "p.col_reapply p_col_reapply," .
                         "p.col_serial_format p_col_serial_format," .
                         "p.col_serial_number p_col_serial_number," .
                         "p.col_serial_type p_col_serial_type," .
                         "p.col_status p_col_status," .
                         "p.col_transactor p_col_transactor," .
                         "p.col_transactor_foreign_key p_col_transactor_foreign_key,"
                         .
                         "p.col_transactor_name p_col_transactor_name," .
                         "p.col_user p_col_user," .
                         "p.col_user_foreign_key p_col_user_foreign_key," .
                         "p.col_user_name p_col_user_name " .
                         "FROM " .
                         "tab_grn_workflow_folder AS f, " .
                         "tab_grn_workflow_folderrelation AS r, " .
                         "tab_grn_workflow_petition AS p, " .
                         "tab_cb_user AS u " .
                         "WHERE " .
                         "f._id = r.col_folder " .
                         "AND p._id = r.col_petition " .
                         "AND f.col_user = u._id " .
                         "AND u.col_deleted IS NULL " .
                         "AND f._id = '@S' " .
                         (strlen($escaped_where_clause_user) > 0
                             ? "AND $escaped_where_clause_user " : "") .
                         "ORDER BY " .
                         "$order_by_string ", $folder_id), $offset, $limit,
                     $lock_mode, false) .
                 ") AS workflow_table " .
                 "LEFT JOIN tab_cb_user AS u_0 ON workflow_table.p_col_user=u_0._id "
                 .
                 "LEFT JOIN tab_cb_user AS u_1 ON workflow_table.p_col_creator=u_1._id "
                 .
                 "LEFT JOIN tab_cb_user AS u_2 ON workflow_table.p_col_modifier=u_2._id "
                 .
                 "LEFT JOIN tab_cb_user AS u_3 ON workflow_table.p_col_transactor=u_3._id "
                 .
                 "LEFT JOIN tab_cb_user AS u_4 ON workflow_table.p_col_agent_user=u_4._id "
                 .
                 "LEFT JOIN tab_cb_user AS u_5 ON workflow_table.p_col_agent_transactor=u_5._id ";

        return $db->query($query);
    }

    /**
     * Get Folder(with Extra Information)
     *
     * このメソッドの中でクエリの結果をキャッシュしているが、
     * そのキャッシュは、同じ $uiser_id, $folder_id の組で複数回呼ばれる際、 $offset, $limit, $order が毎回同じになっていることを前提にしている。
     * そうでない場合があれば不具合。
     * 同じキャッシュを getListEx でも使っている。
     *
     * @param  int   $user_id   //User ID
     * @param  int   $folder_id //Folder ID
     * @param  int   $offset    //Offset
     * @param  int   $limit     //Limit
     * @param  array $order     //OrderBy  ex) array('table name' => array('column name' => 'ASC or DESC') )
     * @param  bool  $refresh   //Refresh Cache
     * @param  int   $lock_mode //Lock Mode
     *
     * @return array  $folder                       //Folder Information Array
     */
    public function &getExOrder(
        $user_id,
        $folder_id,
        $offset = 0,
        $limit = 20,
        $order = null,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $folder = false;

        //Check Arguments
        require_once('workflow/error_code.csp');
        cb_trim_check($folder_id,
            E_GRN_WRKF_FOLDER_INVALID_FOLDER_ID); //Folder ID
        cb_trim_check($user_id, E_GRN_WRKF_FOLDER_INVALID_USER_ID); //User ID

        //Get Folder List From Cache
        if ( ! $refresh) {
            if (array_key_exists($user_id, $this->_listEx)) {
                if (array_key_exists($folder_id, $this->_listEx[$user_id])) {
                    if (is_array($this->_listEx[$user_id][$folder_id])) {
                        return $this->_listEx[$user_id][$folder_id];
                    }
                }
            }
        }

        $database = $this->_getDatabase();
        $result = $this->executeGetExOrderQuery($user_id, $folder_id, $offset,
            $limit, $order, $lock_mode);

        //Update Folder List
        $prev_folder_id = 0;
        $count = $database->num_rows($result);
        for ($i = 0; $i < $count; $i++) {
            $row = $database->fetch_assoc($result);
            if ($prev_folder_id != $row['f__id']) {
                $this->_listEx[$user_id][$row['f__id']] = $row;
                $this->_listEx[$user_id][$row['f__id']]['folderrelation'] = [];
            }
            $this->_listEx[$user_id][$row['f__id']]['folderrelation'][$row['r__id']]
                = $row;
            $prev_folder_id = $row['f__id'];
        }
        $database->free_result($result);

        if ($count > 0) {
            $folder =& $this->_listEx[$user_id][$folder_id];
        }

        //Return Folder
        return $folder;
    }

    /**
     * Get Folder List
     *
     * @param  int  $user_id   //User ID
     * @param  bool $refresh   //Refresh Cache
     * @param  int  $lock_mode //Lock Mode
     *
     * @return array  $folder_list                  //Folder Information List
     */
    function &getList(
        $user_id,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $folder_list = [];

        //Check Arguments
        require_once('workflow/error_code.csp');
        cb_trim_check($user_id, E_GRN_WRKF_FOLDER_INVALID_USER_ID); //User ID

        //Get Folder List From Cache
        $cached = false;
        if ( ! $refresh) {
            if (array_key_exists($user_id, $this->_list)) {
                if (is_array($this->_list[$user_id])) {
                    if (count($this->_list[$user_id]) >= 7) {
                        $folder_list =& $this->_list[$user_id];
                        $cached = true;
                    }
                }
            }
        }
        if ($refresh) {
            $this->_list[$user_id] = [];
        }

        //Get Folder List From Database
        if ( ! $cached || $refresh) {
            //Get Database
            $database = $this->_getDatabase();

            //Create Column List
            $column_list = implode(',',
                $this->_getColumnList(GRN_WORKFLOW_TABLE_FOLDER, false));

            //Create Condition
            $condition_list = [];
            if ($user_id == -1) {
                $condition_list[] = 'f.col_user IS NULL';
            } elseif ($user_id != 0) {
                $condition_list[] = cb_queryf($database, 'f.col_user = "@S"',
                    $user_id);
            }
            $condition = implode(' AND ', $condition_list);
            if ($condition) {
                $condition = 'WHERE ' . $condition;
            }

            //Create Order By Column
            $order_by = sprintf('ORDER BY f.%s, f._id',
                GRN_WORKFLOW_COLUMN_LIST_INDEX);

            $join
                = ' INNER JOIN tab_cb_user AS u ON (f.col_user=u._id AND u.col_deleted IS NULL)';

            //Create Query
            $query
                = sprintf('SELECT %s FROM %s AS f FORCE INDEX(idx_user_list_index) %s %s %s',
                $column_list, $this->_table_name, $join, $condition, $order_by);
            $query = $database->select_format($query, 0, -1, $lock_mode);

            //Execute Query
            $result = $database->query($query);
            if ($result === false) {
                //Throw Query Error
                $database->throwError(['query' => 'query failed: ' . $query]);
            }

            //Update Folder List
            $count = $database->num_rows($result);
            for ($i = 0; $i < $count; $i++) {
                $row = $database->fetch_assoc($result);
                $this->_list[$user_id][$row['_id']] = $row;
            }
            $database->free_result($result);

            if ($count > 0) {
                $folder_list =& $this->_list[$user_id];
            }
        }

        //Return Folder List
        return $folder_list;
    }

    /**
     * Get Folder List(with Extra Information)
     *
     * このメソッドの中でクエリの結果をキャッシュしているが、
     * そのキャッシュは、同じ $uiser_id, $folder_id の組で複数回呼ばれる際、 $offset, $limit, $order が毎回同じになっていることを前提にしている。
     * そうでない場合があれば不具合。
     * 同じキャッシュを getExOrder でも使っている。
     *
     * @param  int  $user_id   //User ID
     * @param  bool $refresh   //Refresh Cache
     * @param  int  $lock_mode //Lock Mode
     *
     * @return array  $folder_list                  //Folder Information List
     */
    function &getListEx(
        $user_id,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $folder_list = [];

        //Check Arguments
        cb_trim_check($user_id, E_GRN_WRKF_FOLDER_INVALID_USER_ID); //User ID

        //Get Folder List From Cache
        $cached = false;
        if ( ! $refresh) {
            if (array_key_exists($user_id, $this->_listEx)) {
                if (is_array($this->_listEx[$user_id])) {
                    if (count($this->_list[$user_id]) >= 7) {
                        $folder_list =& $this->_listEx[$user_id];
                        $cached = true;
                    }
                }
            }
        }
        if ($refresh) {
            $this->_listEx[$user_id] = [];
        }

        //Get Folder List From Database
        if ( ! $cached || $refresh) {
            //Get Database
            $database =& $this->_getDatabase();

            //Create Column List
            $folder_column_list
                = $this->_getColumnList(GRN_WORKFLOW_TABLE_FOLDER);
            $folderrelation_column_list
                = $this->_getColumnList(GRN_WORKFLOW_TABLE_FOLDERRELATION);

            $petition_column_list = null;
            $left_join = "";
            $set_null = [
                "col_user",
                "col_creator",
                "col_modifier",
                "col_transactor",
                "col_agent_user",
                "col_agent_transactor",
            ];
            $this->_getColumnListSetNull($petition_column_list, $left_join,
                GRN_WORKFLOW_TABLE_PETITION, $set_null);

            $column_list = array_merge($folder_column_list,
                $folderrelation_column_list, $petition_column_list);
            $column_list = implode(',', $column_list);

            //Create Table Name
            $table_name_folder
                = $this->_getTableName(GRN_WORKFLOW_TABLE_FOLDER);
            $table_name_folderrelation
                = $this->_getTableName(GRN_WORKFLOW_TABLE_FOLDERRELATION);
            $table_name_petition
                = $this->_getTableName(GRN_WORKFLOW_TABLE_PETITION);

            //Create Join
            $join_list = [];
            $join_list[]
                = 'tab_cb_user u ON (f.col_user=u._id AND u.col_deleted IS NULL)';
            $join_list[]
                = sprintf('%s r FORCE INDEX(idx_folder_petition) ON f._id = r.%s',
                $table_name_folderrelation, GRN_WORKFLOW_COLUMN_FOLDER);
            $join_list[]
                = sprintf('%s p FORCE INDEX(idx_ctime_list_index) ON p._id = r.%s',
                $table_name_petition, GRN_WORKFLOW_COLUMN_PETITION);
            $join = implode(' INNER JOIN ', $join_list);
            if ($join) {
                $join = 'INNER JOIN ' . $join;
            }
            $join .= $left_join;

            //Create Condition
            $condition_list = [];
            if ($user_id == -1) {
                $condition_list[] = 'f.col_user IS NULL';
            } elseif ($user_id != 0) {
                $condition_list[] = cb_queryf($database, 'f.col_user = "@S"',
                    $user_id);
            }
            $condition = implode(' AND ', $condition_list);
            if ($condition) {
                $condition = 'WHERE ' . $condition;
            }

            //Create Order By Column
            $order_by = 'ORDER BY f.col_list_index, f._id';

            //Create Query
            $query
                = sprintf('SELECT %s FROM %s AS f FORCE INDEX(idx_user) %s %s %s',
                $column_list, $this->_table_name, $join, $condition, $order_by);
            $query = $database->select_format($query, 0, -1, $lock_mode);

            //Execute Query
            $result = $database->query($query);
            if ($result === false) {
                //Throw Query Error
                $database->throwError(['query' => 'query failed: ' . $query]);
            }

            //Update Folder List
            $prev_folder_id = 0;
            $count = $database->num_rows($result);
            for ($i = 0; $i < $count; $i++) {
                $row = $database->fetch_assoc($result);
                if ($prev_folder_id != $row['f__id']) {
                    $this->_listEx[$user_id][$row['f__id']] = $row;
                    $this->_listEx[$user_id][$row['f__id']]['folderrelation']
                        = [];
                }
                $this->_listEx[$user_id][$row['f__id']]['folderrelation'][$row['r__id']]
                    = $row;
                $prev_folder_id = $row['f__id'];
            }
            $database->free_result($result);

            if ($count > 0) {
                $folder_list =& $this->_listEx[$user_id];
            }
        }

        //Return Folder List
        return $folder_list;
    }

    /**
     * Get Folder Count
     *
     * @param  int  $user_id   //User ID
     * @param  bool $refresh   //Refresh Cache
     * @param  int  $lock_mode //Lock Mode
     *
     * @return int    $folder_count                     //Folder Count
     */
    function getCount(
        $user_id,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Check User ID
        require_once('workflow/error_code.csp');
        cb_trim_check($user_id,
            E_GRN_WRKF_FOLDER_INVALID_USER_ID);      //User ID

        //Check Cache
        if ( ! $refresh) {
            if (array_key_exists($user_id, $this->_list)) {
                if (count($this->_list[$user_id]) >= 7) {
                    return count($this->_list[$user_id]);
                }
            }
        }

        //Get Database
        $database = $this->_getDatabase();

        //Create Condition
        $condition = cb_queryf($database, 'WHERE f.col_user="@S"', $user_id);

        $join
            = ' INNER JOIN tab_cb_user AS u ON (f.col_user=u._id AND u.col_deleted IS NULL)';

        //Create Query
        $query
            = sprintf('SELECT count(*) as count FROM %s AS f FORCE INDEX(cni_user) %s %s',
            $this->_table_name, $join, $condition);
        $query = $database->select_format($query, 0, 1, $lock_mode);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        $row = $database->fetch_assoc($result);
        $count = $row['count'];
        $database->free_result($result);

        //Return Folder Count
        return $count;
    }

    /**
     * Get Folder Relation Count
     *
     * @param  int  $user_id   //User ID
     * @param  int  $folder_id //Folder ID
     * @param  bool $refresh   //Refresh Cache
     * @param  int  $lock_mode //Lock Mode
     *
     * @return int    $folder_count                     //Folder Count
     */
    function getFolderRelationCount(
        $user_id,
        $folder_id,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Check Argument
        require_once('workflow/error_code.csp');
        cb_trim_check($folder_id,
            E_GRN_WRKF_FOLDER_INVALID_FOLDER_ID); //Folder ID
        cb_trim_check($user_id, E_GRN_WRKF_FOLDER_INVALID_USER_ID);   //User ID

        //Check Cache
        if ( ! $refresh) {
            if (array_key_exists($user_id, $this->_list)) {
                if (array_key_exists($folder_id, $this->_list[$user_id])) {
                    if (is_array($this->_list[$user_id][$folder_id])) {
                        return count($this->_list[$user_id][$folder_id]);
                    }
                }
            }
        }

        //Get Database
        $database = $this->_getDatabase();

        //Create Table Name
        $table_name_folder = $this->_getTableName(GRN_WORKFLOW_TABLE_FOLDER);
        $table_name_folderrelation
            = $this->_getTableName(GRN_WORKFLOW_TABLE_FOLDERRELATION);
        $table_name_petition
            = $this->_getTableName(GRN_WORKFLOW_TABLE_PETITION);

        //Create Join
        $join_list = [];
        $join_list[]
            = 'tab_cb_user u ON (f.col_user=u._id AND u.col_deleted IS NULL)';
        $join_list[]
            = sprintf('%s r FORCE INDEX(idx_folder_petition) ON f._id = r.%s',
            $table_name_folderrelation, GRN_WORKFLOW_COLUMN_FOLDER);
        $join_list[]
            = sprintf('%s p FORCE INDEX(idx_ctime_list_index) ON p._id = r.%s',
            $table_name_petition, GRN_WORKFLOW_COLUMN_PETITION);
        $join = implode(' INNER JOIN ', $join_list);
        if ($join) {
            $join = 'INNER JOIN ' . $join;
        }

        //Create Condition
        $condition_list = [];
        if ($user_id == -1) {
            $condition_list[] = 'f.col_user IS NULL';
        } elseif ($user_id != 0) {
            $condition_list[] = cb_queryf($database, 'f.col_user = "@S"',
                $user_id);
        }
        $condition_list[] = cb_queryf($database, 'f._id = "@S"', $folder_id);

        $condition = implode(' AND ', $condition_list);
        if ($condition) {
            $condition = 'WHERE ' . $condition;
        }

        //Create Query
        $query
            = sprintf('SELECT count(*) as count FROM %s AS f FORCE INDEX(idx_user) %s %s',
            $this->_table_name, $join, $condition);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        $row = $database->fetch_assoc($result);
        $count = $row['count'];
        $database->free_result($result);

        //Return Folder Count
        return $count;
    }

    /**
     * Check Folder Cache
     *
     * @param  int $user_id   //User ID
     * @param  int $folder_id //Folder ID
     *
     * @return bool
     */
    function isCache($user_id, $folder_id = null)
    {
        if (is_null($folder_id)) {
            return array_key_exists($user_id, $this->_list);
        } else {
            if (array_key_exists($user_id, $this->_list)) {
                return array_key_exists($folder_id, $this->_list[$user_id]);
            }

            return false;
        }
    }

    /**
     * Check Folder Cache(with Extra Information)
     *
     * @param  int $user_id   //User ID
     * @param  int $folder_id //Folder ID
     *
     * @return bool
     */
    function isCacheEx($user_id, $folder_id = null)
    {
        if (is_null($folder_id)) {
            return array_key_exists($user_id, $this->_listEx);
        } else {
            if (array_key_exists($user_id, $this->_listEx)) {
                return array_key_exists($folder_id, $this->_listEx[$user_id]);
            }

            return false;
        }
    }

    /**
     * Search Petition ID List
     *
     * @param        $folder_id
     * @param  mixed $search    //Search Option
     * @param array  $remove_item_ids
     * @param int    $lock_mode //Lock Mode
     *
     * @return array  $petition_id_list          //Petition ID List
     */
    function searchPetitionIdList(
        $folder_id,
        $search,
        $remove_item_ids = [],
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        require_once("workflow/bean/GrnWorkflowSearchCondition.csp");
        require_once("workflow/query/GrnWorkflowSearchPetitionQuery.csp");
        $queryBuilder = new \grn\workflow\query\SearchQueryBuilder();
        /**
         * @var $searchQuery GrnWorkflowSearchPetitionQuery
         */
        $searchQuery
            = $queryBuilder->build(new GrnWorkflowSearchPetitionQuery(),
            $this->_getDatabase(),
            $search);

        if (array_key_exists("list", $search)) {
            if (array_key_exists("limit", $search["list"])) {
                $searchQuery->setLimit($search["list"]["limit"]);
            }
            if (array_key_exists("offset", $search["list"])) {
                $searchQuery->setOffset($search["list"]["offset"]);
            }
        }
        $searchQuery->setRemovedIdList($remove_item_ids);
        $searchQuery->setFolderId($folder_id);
        $result = $searchQuery->execute();

        $ret = [];
        foreach ($result as $row) {
            $ret[] = $row['col_petition'];
        }

        return $ret;


    }

}

/**
 * Folder Manager Base Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_Virtual_Folder_Manager_Base
{
    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_Virtual_Folder_Manager_Base $instance
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_Virtual_Folder_Manager_Base();
        }

        return $_instance;
    }

    /**
     * Get Database
     *
     * @return object $database
     */
    function _getDatabase()
    {
        static $database = null;
        if (is_null($database)) {
            $app_locator = GRN_ApplicationLocator::instance();
            $database = $app_locator->getConnection('workflow');
        }

        return $database;
    }

    /**
     * Get Column Prefix
     *
     * @param  string $class_name //Class Name
     *
     * @return array  $column_name_list          //Column Name List
     */
    function _getColumnPrefix($class_name = null)
    {
        $column_prefix = null;
        if ( ! is_null($class_name)) {
            //Set Column Prefix
            switch ($class_name) {
                case GRN_WORKFLOW_TABLE_FOLDER:
                    $column_prefix = "f";
                    break;
                case GRN_WORKFLOW_TABLE_FOLDERRELATION:
                    $column_prefix = "r";
                    break;
                case GRN_WORKFLOW_TABLE_PETITION:
                    $column_prefix = "p";
                    break;
                case GRN_WORKFLOW_TABLE_ITEMDATA:
                    $column_prefix = "d";
                    break;
            }
        }

        return $column_prefix;
    }

    /**
     * Get Table Name
     *
     * @params string $class_name
     * @param $class_name
     *
     * @return string  $table_name
     */
    function _getTableName($class_name)
    {
        $table_name = sprintf('tab_%s', strtolower($class_name));

        return $table_name;
    }

    /**
     * Get Column List
     *
     * @param  string $class_name //Class Name
     * @param bool    $set_alias
     *
     * @return array  $column_name_list          //Column Name List
     */
    function &_getColumnList($class_name = null, $set_alias = true)
    {

        //Check Class Name
        $column_prefix = $this->_getColumnPrefix($class_name);

        if (is_null($class_name)) {
            //Default Class Name and Table Name
            $class_name = GRN_WORKFLOW_TABLE_FOLDER;
        }

        //Create Column Name List
        require_once('workflow/table.csp');
        $column_list = get_class_vars($class_name);
        foreach (array_keys($column_list) as $column_name) {
            if (strpos($column_name, 'col_') === 0) {
                if (is_null($column_prefix)) {
                    $column_name_list[] = $column_name;
                } elseif ($set_alias) {
                    $column_name_list[] = sprintf('%s.%s %s_%s', $column_prefix,
                        $column_name, $column_prefix, $column_name);
                } else {
                    $column_name_list[] = sprintf('%s.%s', $column_prefix,
                        $column_name);
                }
            }
        }
        if (is_null($column_prefix)) {
            $column_name_list[] = '_id';
        } elseif ($set_alias) {
            $column_name_list[] = sprintf('%s._id %s__id', $column_prefix,
                $column_prefix);
        } else {
            $column_name_list[] = sprintf('%s._id', $column_prefix);
        }

        return $column_name_list;
    }

    /**
     * @param array|null $column_list
     * @param string     $join
     * @param string     $class_name Always GRN_WORKFLOW_TABLE_PETITION = "GRN_WorkFlow_Petition"
     * @param array      $set_null_list
     *
     * @return array
     *
     * The input is always,
     * $column_list = NULL;
     * $join = "";
     * $set_null = array( "col_user",
     *                    "col_creator",
     *                    "col_modifier",
     *                    "col_transactor",
     *                    "col_agent_user",
     *                    "col_agent_transactor",
     *                  );
     */
    function _getColumnListSetNull(
        & $column_list,
        & $join,
        $class_name,
        $set_null_list
    ) {
        $table_alias
            = $this->_getColumnPrefix($class_name); //$table_alias = 'p';
        if (empty($column_list)) {
            $column_list = $this->_getColumnList($class_name);
        }

        if ( ! is_string($join)) {
            $join = "";
        }

        if (is_array($set_null_list)) {
            foreach ($set_null_list as $key => $value) {
                $user_alias = "u_" . $key;
                $column_alias = $table_alias . "_" . $value;
                $column_name = $table_alias . "." . $value;
                $column = $column_name . " " . $column_alias;
                $column_key = array_search($column, $column_list);
                if ($column_key !== false) {
                    $column_list[$column_key]
                        = sprintf('CASE WHEN %s.col_deleted IS NULL THEN %s end AS %s',
                        $user_alias, $column_name, $column_alias);
                    $join .= sprintf(' LEFT JOIN tab_cb_user AS %s ON %s=%s._id ',
                        $user_alias, $column_name, $user_alias);
                }
            }
        }

        return $column_list;
    }


    /**
     * Get Folder Relation Count
     *
     * @param  int  $user_id     //User ID
     * @param  int  $folder_id   //Folder ID
     * @param  int  $category_id //Category ID
     * @param  bool $refresh     //Refresh Cache
     * @param  int  $lock_mode   //Lock Mode
     *
     * @return int    $folder_count                     //Folder Count
     */
    function getFolderRelationCount(
        $user_id,
        $folder_id,
        $category_id = null,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Check Argument
        require_once('workflow/error_code.csp');
        cb_trim_check($folder_id,
            E_GRN_WRKF_FOLDER_INVALID_FOLDER_ID); //Folder ID
        cb_trim_check($user_id, E_GRN_WRKF_FOLDER_INVALID_USER_ID);   //User ID

        //Get Database
        $database = $this->_getDatabase();

        require_once('workflow/config.csp');
        $config = GRN_Workflow_Configs::getInstance();
        $config = $config->getSystemConfig();

        $count = 0;

        if ($folder_id == GRN_WORKFLOW_FOLDER_PROXY_APPROVAL_ID) {
            $r = $config->isProxyApproval($user_id);
            if ($r == false) {
                return 0;
            }
            $users = $config->getUsersFromAgent($user_id,
                GRN_WORKFLOW_AGENT_TYPE_APPROVAL);
            $uids = [];
            foreach ($users as $user) {
                $uids[] = $user['user'];
            }
            $folder_type = GRN_WORKFLOW_FOLDER_TYPE_UNPROCESSED_ID;

            //Create Table Name
            $table_name_folder
                = $this->_getTableName(GRN_WORKFLOW_TABLE_FOLDER);
            $table_name_folderrelation
                = $this->_getTableName(GRN_WORKFLOW_TABLE_FOLDERRELATION);
            $table_name_petition
                = $this->_getTableName(GRN_WORKFLOW_TABLE_PETITION);

            //Create Join
            $join_list = [];
            $join_list[]
                = 'tab_cb_user u ON (f.col_user=u._id AND u.col_deleted IS NULL)';
            $join_list[]
                = sprintf('%s r FORCE INDEX(idx_folder_petition) ON f._id = r.%s',
                $table_name_folderrelation, GRN_WORKFLOW_COLUMN_FOLDER);
            $join_list[]
                = sprintf('%s p FORCE INDEX(idx_ctime_list_index) ON p._id = r.%s',
                $table_name_petition, GRN_WORKFLOW_COLUMN_PETITION);
            $join = implode(' INNER JOIN ', $join_list);
            if ($join) {
                $join = 'INNER JOIN ' . $join;
            }

            //Create Condition
            $conditions = [];
            foreach ($uids as $uid) {
                $condition_list = [];
                if ($user_id == -1) {
                    $condition_list[] = '(f.col_user IS NULL';
                } elseif ($user_id != 0) {
                    $condition_list[] = cb_queryf($database,
                        '(f.col_user = "@S"', $uid);
                }
                $condition_list[] = cb_queryf($database,
                    'f.col_folder_type = "@S" ', $folder_type);
                $condition_list[] = cb_queryf($database,
                    '(p.col_status = "@S" OR p.col_status = "@S" OR p.col_status = "@S"))',
                    GRN_WORKFLOW_STATUS_IN_PROCESS,
                    GRN_WORKFLOW_STATUS_UNPROCESSING,
                    GRN_WORKFLOW_STATUS_REMAND
                );

                $conditions[] = implode(' AND ', $condition_list);
            }
            $condition = implode(' OR ', $conditions);
            if ($condition) {
                $condition = 'WHERE ' . $condition;
            }

            //Create Query
            //$query = sprintf('SELECT COUNT(*) as count FROM %s f FORCE INDEX(idx_user) %s %s', 'tab_grn_workflow_folder', $join, $condition); 
            $query
                = sprintf('SELECT p._id as id, p.col_status as status, f.col_user as fuser_id FROM %s f FORCE INDEX(idx_user) %s %s',
                'tab_grn_workflow_folder', $join, $condition);

            //Execute Query
            $result = $database->query($query);
            if ($result === false) {
                //Throw Query Error
                $database->throwError(['query' => 'query failed: ' . $query]);
            }

            $rows = [];
            while ($row = $database->fetch_assoc($result)) {
                $rows[$row['id']]['_id'] = $row['id'];
                $rows[$row['id']]['status'] = $row['status'];
                $rows[$row['id']]['fuser_id'] = $row['fuser_id'];
            }
            $database->free_result($result);

            require_once('workflow/controller_util.csp');
            $c = new GRN_Workflow_ControllerUtil();

            $list = [];
            foreach ($rows as $pid => $petition) {
                $in_process = null;
                $circular_step_count = 0;
                $skip = false;  // Huy add @ 2008/07/21
                $path_steps = $c->getPathInfo($pid, true);

                foreach (array_keys($path_steps) as $key => $path_step_id) {
                    $path_step =& $path_steps[$path_step_id];
                    if ($path_step['col_type'] == GRN_WORKFLOW_CIRCULAR) {
                        //回覧経路
                        $circular_step_count++;
                    }
                    if ($path_step['col_activate']) {
                        if ( ! $path_step['col_skip']) {
                            if ( ! $in_process) {
                                // 処理中/完了した経路ステップ
                                if ( ! $path_step['col_finished']) {
                                    $in_process = $path_step_id;
                                    // Huy add @ 2008/08/07
                                    if (array_search($petition['fuser_id'],
                                            $path_step['uids']) === false
                                    ) {
                                        $skip = true;
                                    }
                                }
                            }
                        }
                    }
                }
                if (count($path_steps) > $circular_step_count) {
                    if ( ! ( ! $in_process
                             && $petition['status']
                                == GRN_WORKFLOW_STATUS_REMAND)
                         && ! $skip
                    ) {
                        $list[] = $pid;
                    }
                }
            }

            return count($list);
        } elseif ($folder_id == GRN_WORKFLOW_FOLDER_PUBLIC_ID) {
            cb_trim_check($category_id, E_GRN_WRKF_CATEGORY_INVALID_ID);

            // SELECT count(*) as count FROM tab_grn_workflow_petition where col_status IN (2,7) AND col_form IN (1,3)

            // カテゴリ $category_id に所属するフォーム ID の取得
            $form_id = '';
            $query
                = sprintf('SELECT _id FROM tab_grn_workflow_form where col_category = %s',
                $category_id);
            $result = $database->query($query);
            if ($result === false) {
                $database->throwError(['query' => 'query failed: ' . $query]);
            }
            if ($database->num_rows($result) < 1) {
                return 0;
            }

            while ($row = $database->fetch_assoc($result)) {
                $form_ids[] = $row['_id'];
            }
            //$form_id = implode( ',', $form_ids );

            // SELECT count(*) as count FROM tab_grn_workflow_petition where col_status IN (2,7) AND col_form IN (1,3);

            //Create Condition
            $condition = implode(',', $form_ids);
            $condition = 'WHERE col_form IN (' . $condition . ')';
            $condition .= ' AND col_status IN ('
                          . GRN_WORKFLOW_STATUS_ACCEPTANCE . ','
                          . GRN_WORKFLOW_STATUS_FINISHED . ')';

            //Create Query
            $query
                = sprintf('SELECT distinct p._id FROM %s p FORCE INDEX(idx_ctime_list_index) %s',
                'tab_grn_workflow_petition', $condition);
            //Execute Query
            $result = $database->query($query);
            if ($result === false) {
                //Throw Query Error
                $database->throwError(['query' => 'query failed: ' . $query]);
            }

            $count = $database->num_rows($result);
            $database->free_result($result);
        } elseif ($folder_id == GRN_WORKFLOW_FOLDER_APPROVAL_PLAN_ID) {
            //承認予定一覧
            $r = $config->getApprovalPlan();
            if ($r != true) {
                return 0;
            }

            $query
                = 'SELECT DISTINCT p._id id FROM (((tab_grn_workflow_petition AS p '
                  .
                  'LEFT JOIN tab_grn_workflow_pathstepdata AS b ON p._id = b.col_petition) '
                  .
                  'LEFT JOIN tab_grn_workflow_pathstepdatauser AS c ON b._id = c.col_path_step_data) '
                  .
                  'LEFT JOIN tab_cb_user AS d ON c.col_user = d._id) ' .
                  'WHERE (c.col_user = ' . cb_queryf($database, '"@S"',
                    $user_id) . " AND d.col_deleted IS NULL)" .
                  ' AND (' .
                  'p.col_status = ' . GRN_WORKFLOW_STATUS_UNPROCESSING .
                  ' OR ' .
                  'p.col_status = ' . GRN_WORKFLOW_STATUS_IN_PROCESS .
                  ' OR ' .
                  'p.col_status = ' . GRN_WORKFLOW_STATUS_REMAND .
                  ')';

            //Execute Query
            $result = $database->query($query);
            if ($result === false) {
                //Throw Query Error
                $database->throwError(['query' => 'query failed: ' . $query]);
            }
            $rows = [];
            while ($row = $database->fetch_assoc($result)) {
                $rows[] = $row['id'];
            }
            $database->free_result($result);

            require_once('workflow/controller_util.csp');
            $c = new GRN_Workflow_ControllerUtil();
            $p = GRN_Workflow_Petition_Controller_Utility::getInstance();

            $translation_map_petition = [
                'pid'    => '_id',
                'status' => 'status',
            ];

            $list = [];
            foreach ($rows as $pid) {
                $path_steps = $c->getPathInfo($pid, true);
                $petition = $p->getView($pid, $translation_map_petition);
                $status = $petition['status'];
                if ($status != GRN_WORKFLOW_STATUS_UNPROCESSING
                    && $status != GRN_WORKFLOW_STATUS_IN_PROCESS
                    && $status != GRN_WORKFLOW_STATUS_REMAND
                ) {
                    //申請が未処理か申請中ではない
                    continue;
                }
                unset($petition);

                $me = null;
                $now_step = null;
                $in_process = null;
                foreach (array_keys($path_steps) as $key => $path_step_id) {
                    $path_step =& $path_steps[$path_step_id];
                    if ($path_step['col_type'] == GRN_WORKFLOW_CIRCULAR) {
                        //回覧経路
                        continue;
                    }
                    if ( ! $path_step['col_activate']
                         || $path_step['col_skip']
                    ) {
                        //無効またはスキップの経路
                        continue;
                    }
                    if (is_null($in_process)) {
                        $r = $c->getInProcessPathStepId($path_step);
                        if ($r && $r == $path_step_id) {
                            $in_process = $key;
                        }
                    }
                    if ($path_step['col_finished']
                        != GRN_WORKFLOW_FINISHED_COMPLETE
                    ) {
                        //完了していない経路
                        if (is_null($now_step)) {
                            $now_step = $key;
                            if (array_search($user_id, $path_step['uids'])
                                !== false
                            ) {
                                $me = $key;
                                break;
                            }
                        }
                    }
                    if (array_search($user_id, $path_step['uids']) !== false) {
                        //自分が経路に含まれている
                        $me = $key;
                    }
                }
                $ok = false;
                if (is_null($now_step) || is_null($me)) {
                    $ok = false;
                }
                if ($now_step < $me) {
                    $ok = true;
                }
                if ($status == GRN_WORKFLOW_STATUS_REMAND) {
                    if (is_null($in_process) && ! is_null($me)) {
                        $ok = true;
                    } elseif ($in_process < $me) {
                        $ok = true;
                    }
                }
                if ($ok) {
                    $list[] = $pid;
                }
            }
            $count = count($list);
        }

        //Return Folder Count
        return $count;
    }

    /**
     * Get Folder(with Extra Information)
     *
     * @param  int   $user_id     //User ID
     * @param  int   $folder_id   //Folder ID
     * @param  int   $offset      //Offset
     * @param  int   $limit       //Limit
     * @param  array $order       //OrderBy  ex) array('table name' => array('column name' => 'ASC or DESC') )
     * @param  bool  $refresh     //Refresh Cache
     * @param  int   $lock_mode   //Lock Mode
     * @param  int   $category_id //Category ID
     *
     * @return array  $folder                       //Folder Information Array
     */
    function &getExOrder(
        $user_id,
        $folder_id,
        $offset = 0,
        $limit = 20,
        $order = null,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $category_id = null
    ) {
        $folder = false;

        //Check Arguments
        require_once('workflow/error_code.csp');
        cb_trim_check($folder_id,
            E_GRN_WRKF_FOLDER_INVALID_FOLDER_ID); //Folder ID
        cb_trim_check($user_id, E_GRN_WRKF_FOLDER_INVALID_USER_ID); //User ID

        require_once('workflow/config.csp');
        $config = GRN_Workflow_Configs::getInstance();
        $config = $config->getSystemConfig();

        //Get Database
        $database = $this->_getDatabase();

        if ($folder_id == GRN_WORKFLOW_FOLDER_PROXY_APPROVAL_ID) {
            $folder_type = GRN_WORKFLOW_FOLDER_TYPE_UNPROCESSED_ID;
            $r = $config->isProxyApproval($user_id);
            if ($r == false) {
                $num = 0;

                return $num;
            }
            $users = $config->getUsersFromAgent($user_id,
                GRN_WORKFLOW_AGENT_TYPE_APPROVAL);
            $uids = [];
            foreach ($users as $user) {
                $uids[] = $user['user'];
            }
            $folder_type = GRN_WORKFLOW_FOLDER_TYPE_UNPROCESSED_ID;

            //Create Column List
            $folder_column_list
                = $this->_getColumnList(GRN_WORKFLOW_TABLE_FOLDER);
            $folderrelation_column_list
                = $this->_getColumnList(GRN_WORKFLOW_TABLE_FOLDERRELATION);

            $petition_column_list = null;
            $left_join = "";
            $set_null = [
                "col_user",
                "col_creator",
                "col_modifier",
                "col_transactor",
                "col_agent_user",
                "col_agent_transactor",
            ];
            $this->_getColumnListSetNull($petition_column_list, $left_join,
                GRN_WORKFLOW_TABLE_PETITION, $set_null);

            $column_list = array_merge($folder_column_list,
                $folderrelation_column_list, $petition_column_list);
            $column_list = implode(',', $column_list);

            //Create Table Name
            $table_name_folder
                = $this->_getTableName(GRN_WORKFLOW_TABLE_FOLDER);
            $table_name_folderrelation
                = $this->_getTableName(GRN_WORKFLOW_TABLE_FOLDERRELATION);
            $table_name_petition
                = $this->_getTableName(GRN_WORKFLOW_TABLE_PETITION);

            //Create Join
            $join_list = [];
            $join_list[]
                = 'tab_cb_user u ON (f.col_user=u._id AND u.col_deleted IS NULL)';
            $join_list[]
                = sprintf('%s r FORCE INDEX(idx_folder_petition) ON f._id = r.%s',
                $table_name_folderrelation, GRN_WORKFLOW_COLUMN_FOLDER);
            $join_list[]
                = sprintf('%s p FORCE INDEX(idx_ctime_list_index) ON p._id = r.%s',
                $table_name_petition, GRN_WORKFLOW_COLUMN_PETITION);
            $join = implode(' INNER JOIN ', $join_list);
            if ($join) {
                $join = 'INNER JOIN ' . $join;
            }
            $join .= $left_join;

            //Create Condition
            $conditions = [];
            foreach ($uids as $uid) {
                $condition_list = [];
                if ($user_id == -1) {
                    $condition_list[] = '(f.col_user IS NULL';
                } elseif ($user_id != 0) {
                    $condition_list[] = cb_queryf($database,
                        '(f.col_user = "@S"', $uid);
                }
                $condition_list[] = cb_queryf($database,
                    'f.col_folder_type = "@S"', $folder_type);
                $condition_list[] = cb_queryf($database,
                    '(p.col_status = "@S" OR p.col_status = "@S" OR p.col_status = "@S"))',
                    GRN_WORKFLOW_STATUS_IN_PROCESS,
                    GRN_WORKFLOW_STATUS_UNPROCESSING,
                    GRN_WORKFLOW_STATUS_REMAND
                );

                $conditions[] = implode(' AND ', $condition_list);
            }
            $condition = implode(' OR ', $conditions);
            if ($condition) {
                $condition = 'WHERE ' . $condition;
            }

            //Create Order By Column
            $order_by = [];
            $order_by_string = '';
            if (is_array($order) && count($order) > 0) {
                foreach ($order as $order_table => $order_column) {
                    foreach ($order_column as $order_column_name => $order_type) {
                        $order_by[] = $this->_getColumnPrefix($order_table)
                                      . '.' . $order_column_name . ' '
                                      . $order_type;
                    }
                }
                $order_by_string = implode(', ', $order_by)
                                   . ', p.col_list_index, p._id';
            } else {
                $order_by_string = ' p.col_ctime DESC, p.col_list_index, p._id';
            }
            $order_by_string = 'ORDER BY ' . $order_by_string;

            //Create Query
            $query
                = sprintf('SELECT %s FROM %s f FORCE INDEX(idx_user) %s %s %s',
                $column_list, 'tab_grn_workflow_folder', $join, $condition,
                $order_by_string);
            $query = $database->select_format($query, 0, -1, $lock_mode);

            //Execute Query
            $result = $database->query($query);
            if ($result === false) {
                //Throw Query Error
                $database->throwError(['query' => 'query failed: ' . $query]);
            }

            //Update Folder List
            $list = [
                'f__id'             => GRN_WORKFLOW_FOLDER_PROXY_APPROVAL_ID,
                'f_col_name'        => cb_msg('grn.workflow',
                    'proxy_approval_list'),
                'f_col_folder_type' => GRN_WORKFLOW_FOLDER_TYPE_PROXY_APPROVAL_ID,
            ];
            $list['folderrelation'] = [];

            require_once('workflow/controller_util.csp');
            $c = new GRN_Workflow_ControllerUtil();

            //$prev_folder_id = 0;
            $temp_list = [];
            $count = $database->num_rows($result);
            for ($i = 0; $i < $count; $i++) {
                $row = $database->fetch_assoc($result);
                $pid = $row['p__id'];
                $status = $row['p_col_status'];
                $fuser_id = $row['f_col_user']; // Huy add @ 2008/08/07

                $in_process = null;
                $circular_step_count = 0;
                $skip = false;  // Huy add @ 2008/07/21
                $path_steps = $c->getPathInfo($pid, true);
                foreach (array_keys($path_steps) as $key => $path_step_id) {
                    $path_step =& $path_steps[$path_step_id];
                    if ($path_step['col_type'] == GRN_WORKFLOW_CIRCULAR) {
                        //回覧経路
                        $circular_step_count++;
                    }
                    if ($path_step['col_activate']) {
                        if ( ! $path_step['col_skip']) {
                            if ( ! $in_process) {
                                // 処理中/完了した経路ステップ
                                if ( ! $path_step['col_finished']) {
                                    $in_process = $path_step_id;
                                    // Huy add @ 2008/08/07
                                    if (array_search($fuser_id,
                                            $path_step['uids']) === false
                                    ) {
                                        $skip = true;
                                    }
                                }
                            }
                        }
                    }
                }
                if (count($path_steps) <= $circular_step_count) {
                    continue;
                }
                if ( ! $in_process && ($status == GRN_WORKFLOW_STATUS_REMAND)
                     || $skip
                ) {
                    continue;
                }

                $temp_list[] = $row;
            }
            $database->free_result($result);

            if (count($temp_list) > 0) {
                $prev_folder_id = 0;
                if ($limit < 0) {
                    $limit = count($temp_list);
                }
                $max = $offset + $limit;
                if (count($temp_list) < $max) {
                    $max = count($temp_list);
                }
                for ($i = $offset; $i < $max; $i++) {
                    $row = $temp_list[$i];
                    if ($prev_folder_id == 0) {
                        $list = $row;
                        $list['f__id']
                            = GRN_WORKFLOW_FOLDER_PROXY_APPROVAL_ID;
                        $list['f_col_name'] = cb_msg('grn.workflow',
                            'proxy_approval_list');
                        $list['f_col_folder_type']
                            = GRN_WORKFLOW_FOLDER_TYPE_PROXY_APPROVAL_ID;
                        $list['folderrelation'] = [];
                        $prev_folder_id++;
                    }
                    $list['folderrelation'][$row['r__id']] = $row;
                }
            }
            if (count($list) > 0) {
                $folder =& $list;
            }
        } elseif ($folder_id == GRN_WORKFLOW_FOLDER_PUBLIC_ID) {
            cb_trim_check($category_id, E_GRN_WRKF_CATEGORY_INVALID_ID);

            //Create Column List
            $petition_column_list = null;
            $left_join = "";
            $set_null = [
                "col_user",
                "col_creator",
                "col_modifier",
                "col_transactor",
                "col_agent_user",
                "col_agent_transactor",
            ];
            $this->_getColumnListSetNull($petition_column_list, $left_join,
                GRN_WORKFLOW_TABLE_PETITION, $set_null);
            $column_list = implode(',', $petition_column_list);

            // カテゴリ $category_id に所属するフォーム ID の取得
            $form_id = '';
            $query
                = sprintf('SELECT _id FROM tab_grn_workflow_form where col_category = %s',
                $category_id);
            $result = $database->query($query);
            if ($result === false) {
                $database->throwError(['query' => 'query failed: ' . $query]);
            }
            if ($database->num_rows($result) < 1) {
                //Update Folder List
                $list = [
                    'f__id'             => GRN_WORKFLOW_FOLDER_PUBLIC_ID,
                    'f_col_name'        => cb_msg('grn.workflow',
                        'public_list'),
                    'f_col_folder_type' => GRN_WORKFLOW_FOLDER_TYPE_PUBLIC_ID,
                ];
                $list['folderrelation'] = [];

                return $list;
            }

            while ($row = $database->fetch_assoc($result)) {
                $form_ids[] = $row['_id'];
            }

            //Create Condition
            $condition = implode(',', $form_ids);
            $condition = 'WHERE col_form IN (' . $condition . ')';
            $condition .= ' AND col_status IN ('
                          . GRN_WORKFLOW_STATUS_ACCEPTANCE . ','
                          . GRN_WORKFLOW_STATUS_FINISHED . ')';

            //Create Order By Column
            $order_by = [];
            $order_by_string = '';
            if (is_array($order) && count($order) > 0) {
                foreach ($order as $order_table => $order_column) {
                    foreach ($order_column as $order_column_name => $order_type) {
                        $order_by[] = $this->_getColumnPrefix($order_table)
                                      . '.' . $order_column_name . ' '
                                      . $order_type;
                    }
                }
                $order_by_string = implode(', ', $order_by)
                                   . ', p.col_list_index, p._id';
            } else {
                $order_by_string = ' p.col_ctime DESC, p.col_list_index, p._id';
            }
            $order_by_string = 'ORDER BY ' . $order_by_string;

            //Create Query
            //$query = sprintf('SELECT %s FROM %s f FORCE INDEX(idx_user) %s %s %s', $column_list, 'tab_grn_workflow_folder', $join, $condition, $order_by_string); 
            $query
                = sprintf('SELECT distinct p._id as p__id, %s FROM %s p FORCE INDEX(idx_ctime_list_index) %s %s %s',
                $column_list, 'tab_grn_workflow_petition', $left_join,
                $condition, $order_by_string);
            $query = $database->select_format($query, $offset, $limit,
                $lock_mode);
            //Execute Query
            $result = $database->query($query);
            if ($result === false) {
                //Throw Query Error
                $database->throwError(['query' => 'query failed: ' . $query]);
            }

            //Update Folder List
            $list = [
                'f__id'             => GRN_WORKFLOW_FOLDER_PUBLIC_ID,
                'f_col_name'        => cb_msg('grn.workflow', 'public_list'),
                'f_col_folder_type' => GRN_WORKFLOW_FOLDER_TYPE_PUBLIC_ID,
            ];
            $list['folderrelation'] = [];

            $prev_folder_id = 0;
            $count = $database->num_rows($result);
            //$duplication_check = array();
            for ($i = 0; $i < $count; $i++) {
                $row = $database->fetch_assoc($result);
                if ($prev_folder_id == 0) {
                    $list = $row;
                    $list['f__id'] = GRN_WORKFLOW_FOLDER_PUBLIC_ID;
                    $list['f_col_name'] = cb_msg('grn.workflow',
                        'public_list');
                    $list['f_col_folder_type']
                        = GRN_WORKFLOW_FOLDER_TYPE_PUBLIC_ID;
                    $list['folderrelation'] = [];
                    $prev_folder_id++;
                }
                $list['folderrelation'][$row['p__id']] = $row;
            }
            $database->free_result($result);
            if ($count > 0) {
                $folder =& $list;
            }
        } elseif ($folder_id == GRN_WORKFLOW_FOLDER_APPROVAL_PLAN_ID) {
            //承認予定一覧
            $r = $config->getApprovalPlan();
            if ($r != true) {
                return 0;
            }

            //承認予定一覧
            $petition_column_list = null;
            $left_join = "";
            $set_null = [
                "col_user",
                "col_creator",
                "col_modifier",
                "col_transactor",
                "col_agent_user",
                "col_agent_transactor",
            ];
            $this->_getColumnListSetNull($petition_column_list, $left_join,
                GRN_WORKFLOW_TABLE_PETITION, $set_null);
            $column_list = $petition_column_list;
            $column_list = implode(',', $column_list);

            //Create Order By Column
            $order_by = [];
            $order_by_string = '';
            if (is_array($order) && count($order) > 0) {
                foreach ($order as $order_table => $order_column) {
                    foreach ($order_column as $order_column_name => $order_type) {
                        $order_by[] = $this->_getColumnPrefix($order_table)
                                      . '.' . $order_column_name . ' '
                                      . $order_type;
                    }
                }
                $order_by_string = implode(', ', $order_by)
                                   . ', p.col_list_index, p._id';
            } else {
                $order_by_string = ' p.col_ctime DESC, p.col_list_index, p._id';
            }
            $order_by_string = 'ORDER BY ' . $order_by_string;

            $query = 'SELECT ' .
                     $column_list .
                     ' FROM ((tab_grn_workflow_petition AS p ' .
                     'LEFT JOIN tab_grn_workflow_pathstepdata AS b ON p._id = b.col_petition) '
                     .
                     'LEFT JOIN tab_grn_workflow_pathstepdatauser AS c ON b._id = c.col_path_step_data) '
                     .
                     $left_join .
                     'LEFT JOIN tab_cb_user AS u7 ON c.col_user = u7._id ' .
                     'WHERE c.col_user = ' . cb_queryf($database, '"@S"',
                    $user_id) . ' AND u7.col_deleted IS NULL' .
                     ' AND (' .
                     'p.col_status = ' . GRN_WORKFLOW_STATUS_UNPROCESSING .
                     ' OR ' .
                     'p.col_status = ' . GRN_WORKFLOW_STATUS_IN_PROCESS .
                     ' OR ' .
                     'p.col_status = ' . GRN_WORKFLOW_STATUS_REMAND .
                     ') ' .
                     $order_by_string;

            //Execute Query
            $result = $database->query($query);
            if ($result === false) {
                //Throw Query Error
                $database->throwError(['query' => 'query failed: ' . $query]);
            }
            $rows = [];
            while ($row = $database->fetch_assoc($result)) {
                $rows[] = $row;
            }
            $database->free_result($result);

            require_once('workflow/controller_util.csp');
            $c = new GRN_Workflow_ControllerUtil();
            $p = GRN_Workflow_Petition_Controller_Utility::getInstance();

            $translation_map_petition = [
                'pid'    => '_id',
                'status' => 'status',
            ];


            //Update Folder List
            $list = [
                'f__id'             => GRN_WORKFLOW_FOLDER_APPROVAL_PLAN_ID,
                'f_col_name'        => cb_msg('grn.workflow', 'public_list'),
                'f_col_folder_type' => GRN_WORKFLOW_FOLDER_TYPE_APPROVAL_PLAN_ID,
            ];
            $list['folderrelation'] = [];

            $temp_list = [];
            $pid_list = [];
            foreach ($rows as $row) {
                $path_steps = $c->getPathInfo($row['p__id'], true);
                $petition = $p->getView($row['p__id'],
                    $translation_map_petition);
                $status = $petition['status'];
                if ($status != GRN_WORKFLOW_STATUS_UNPROCESSING
                    && $status != GRN_WORKFLOW_STATUS_IN_PROCESS
                    && $status != GRN_WORKFLOW_STATUS_REMAND
                ) {
                    //申請が未処理か申請中ではない
                    continue;
                }
                unset($petition);

                //$ok = false;
                $me = null;
                $now_step = null;
                $in_process = null;
                foreach (array_keys($path_steps) as $key => $path_step_id) {
                    $path_step =& $path_steps[$path_step_id];
                    if ($path_step['col_type'] == GRN_WORKFLOW_CIRCULAR) {
                        //回覧経路
                        continue;
                    }
                    if ( ! $path_step['col_activate']
                         || $path_step['col_skip']
                    ) {
                        //無効またはスキップの経路
                        continue;
                    }
                    if (is_null($in_process)) {
                        $r = $c->getInProcessPathStepId($path_step);
                        if ($r && $r == $path_step_id) {
                            $in_process = $key;
                        }
                    }
                    if ($path_step['col_finished']
                        != GRN_WORKFLOW_FINISHED_COMPLETE
                    ) {
                        //完了していない経路
                        if (is_null($now_step)) {
                            $now_step = $key;
                            if (array_search($user_id, $path_step['uids'])
                                !== false
                            ) {
                                $me = $key;
                                break;
                            }
                        }
                    }
                    if (array_search($user_id, $path_step['uids']) !== false) {
                        //自分が経路に含まれている
                        $me = $key;
                    }

                }
                $ok = false;
                if (is_null($now_step) || is_null($me)) {
                    $ok = false;
                }
                if ($now_step < $me) {
                    $ok = true;
                }
                if ($status == GRN_WORKFLOW_STATUS_REMAND) {
                    if (is_null($in_process) && ! is_null($me)) {
                        $ok = true;
                    } elseif ($in_process < $me) {
                        $ok = true;
                    }
                }
                if ($ok) {
                    $row['f__id'] = GRN_WORKFLOW_FOLDER_APPROVAL_PLAN_ID;
                    $row['f_col_name'] = cb_msg('grn.workflow',
                        'approval_plan_list');
                    $row['f_col_folder_type']
                        = GRN_WORKFLOW_FOLDER_TYPE_APPROVAL_PLAN_ID;
                    $row['path_steps'] = $path_steps;

                    if ( ! array_key_exists($row['p__id'], $pid_list)) {
                        $temp_list[] = $row;
                        $pid_list[$row['p__id']] = [];
                    }
                }
            }

            if (count($temp_list) > 0) {
                $prev_folder_id = 0;
                if ($limit < 0) {
                    $limit = count($temp_list);
                }
                $max = $offset + $limit;
                if (count($temp_list) < $max) {
                    $max = count($temp_list);
                }

                for ($i = $offset; $i < $max; $i++) {
                    $row = $temp_list[$i];
                    if ($prev_folder_id == 0) {
                        $list = $row;
                        $list['folderrelation'] = [];
                        $prev_folder_id++;
                    }
                    $list['folderrelation'][$row['p__id']] = $row;
                }
            }

            return $list;
        }

        //Return Folder
        return $folder;
    }


    /**
     * @param       $user_id
     * @param       $folder_id
     * @param       $search
     * @param array $remove_item_list
     * @param int   $lock_mode
     *
     * @return array
     */
    function searchPetitionIdList_FOLDER_PROXY_APPROVAL_ID(
        $user_id,
        $folder_id,
        $search,
        $remove_item_list = [],
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $petition_id_list = [];

        //Get Database
        $database =& $this->_getDatabase();

        require_once('workflow/config.csp');
        $config = GRN_Workflow_Configs::getInstance();
        $config =& $config->getSystemConfig();

        $r = $config->isProxyApproval($user_id);
        if ($r == false) {
            return $petition_id_list;
        }
        $users = $config->getUsersFromAgent($user_id,
            GRN_WORKFLOW_AGENT_TYPE_APPROVAL);
        $uids = [];
        foreach ($users as $user) {
            $uids[] = $user['user'];
        }

        //Split Petition and Item Data Confition
        $petition_condition = [];
        $item_data_condition = [];
        if (array_key_exists('condition_item_list', $search)) {
            foreach ($search['condition_item_list'] as $condition_item) {
                switch ($condition_item['type']) {
                    case GRN_WORKFLOW_SEARCH_ITEM_STRING:
                        $item_data_condition[] = $condition_item;
                        break;
                    default:
                        $petition_condition[] = $condition_item;
                        break;
                }
            }
        }

        //Create Folder Relation Condition List
        //$folder_relation_condition_list = 'WHERE ' . cb_queryf($database, 'r.col_folder = "@S"', $folder_id);
        $conditions = [];
        foreach ($uids as $uid) {
            $conditions[] = cb_queryf($database, '@S', $uid);
        }
        $condition = implode(',', $conditions);
        $query = cb_queryf($database,
            "SELECT "
            . "f._id "
            . " FROM "
            . " tab_grn_workflow_folder AS f "
            . " INNER JOIN tab_cb_user AS u ON (f.col_user=u._id AND u.col_deleted IS NULL) "
            . " WHERE "
            . " f.col_user IN(@S) "
            . " AND "
            . " f.col_folder_type = '" . GRN_WORKFLOW_FOLDER_TYPE_UNPROCESSED_ID
            . "'", $condition);
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }
        $folder_ids = [];
        while ($row = $database->fetch_assoc($result)) {
            $folder_ids[] = $row['_id'];
        }
        if (count($folder_ids) <= 0) {
            return [];
        }

        $database->free_result($result);


        require_once("workflow/bean/GrnWorkflowSearchCondition.csp");
        require_once("workflow/query/GrnWorkflowSearchPetitionInProxyApprovalFolderQuery.csp");
        $queryBuilder = new \grn\workflow\query\SearchQueryBuilder();
        /**
         * @var $query GrnWorkflowSearchPetitionInProxyApprovalFolderQuery
         */
        $query
            = $queryBuilder->build(new GrnWorkflowSearchPetitionInProxyApprovalFolderQuery(),
            $this->_getDatabase(),
            $search);
        $query->setRemovedIdList($remove_item_list);
        $query->setFolderIdList($folder_ids);
        $result = $query->execute();

        require_once('workflow/controller_util.csp');
        $c = new GRN_Workflow_ControllerUtil();
        $p
            = GRN_Workflow_Petition_Controller_Utility::getInstance();
        $translation_map_petition = [
            'pid'    => '_id',
            'status' => 'status',
        ];

        // for ($i=0; $i<$count; $i++)
        foreach ($result as $row) {
            // $row = $database->fetch_assoc($result);
            $pid = $row['col_petition'];

            $in_process = null;
            $circular_step_count = 0;
            $path_steps = $c->getPathInfo($pid, true, $lock_mode);
            $petition = $p->getView($pid, $translation_map_petition);

            foreach (array_keys($path_steps) as $key => $path_step_id) {
                $path_step =& $path_steps[$path_step_id];
                if ($path_step['col_type'] == GRN_WORKFLOW_CIRCULAR) {
                    //回覧経路
                    $circular_step_count++;
                }
                if ($path_step['col_activate']) {
                    if ( ! $path_step['col_skip']) {
                        if ( ! $in_process) {
                            // 処理中/完了した経路ステップ
                            if ( ! $path_step['col_finished']) {
                                $in_process = $path_step_id;
                            }
                        }
                    }
                }
            }
            if (count($path_steps) <= $circular_step_count) {
                continue;
            }
            if (( ! $in_process
                  && $petition['status'] == GRN_WORKFLOW_STATUS_REMAND)
                || $petition['status']
                   == GRN_WORKFLOW_STATUS_UNPROCESSING_CANCEL
                || $petition['status'] == GRN_WORKFLOW_STATUS_ACCEPTANCE
            ) {
                continue;
            }

            $petition['col_petition'] = $row['col_petition'];
            $petition['col_folder'] = $row['col_folder'];
            $petition_id_list[] = $petition;
        }

        // $database->free_result($result);
        return $petition_id_list;
    }

    /**
     * @param       $user_id
     * @param       $folder_id
     * @param       $search
     * @param array $remove_item_list
     * @param int   $lock_mode
     *
     * @return array|int
     */
    function searchPetitionIdList_FOLDER_APPROVAL_PLAN_ID(
        $user_id,
        $folder_id,
        $search,
        $remove_item_list = [],
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {

        $petition_id_list = [];

        require_once('workflow/config.csp');
        $config = GRN_Workflow_Configs::getInstance();
        $config = $config->getSystemConfig();
        //承認予定一覧
        $r = $config->getApprovalPlan();
        if ($r != true) {
            return 0;
        }

        require_once("workflow/bean/GrnWorkflowSearchCondition.csp");
        require_once("workflow/query/GrnWorkflowSearchPetitionInApprovalPlanFolder.csp");
        $queryBuilder = new \grn\workflow\query\SearchQueryBuilder();
        /**
         * @var $query GrnWorkflowSearchPetitionInApprovalPlanFolder
         */
        $query
            = $queryBuilder->build(new GrnWorkflowSearchPetitionInApprovalPlanFolder(),
            $this->_getDatabase(),
            $search);
        $query->setRemovedIdList($remove_item_list);
        $query->setUserId($user_id);
        $result = $query->execute();

        $rows = [];
        foreach ($result as $row) {
            $rows[] = $row['id'];
        }


        require_once('workflow/controller_util.csp');
        $c = new GRN_Workflow_ControllerUtil();
        $p = GRN_Workflow_Petition_Controller_Utility::getInstance();

        $translation_map_petition = [
            'pid'    => '_id',
            'status' => 'status',
        ];

        $list = [];
        foreach ($rows as $pid) {
            $path_steps = $c->getPathInfo($pid, true, $lock_mode);
            $petition = $p->getView($pid, $translation_map_petition);
            $status = $petition['status'];
            if ($status != GRN_WORKFLOW_STATUS_UNPROCESSING
                && $status != GRN_WORKFLOW_STATUS_IN_PROCESS
                && $status != GRN_WORKFLOW_STATUS_REMAND
            ) {
                //申請が未処理か申請中ではない
                continue;
            }
            unset($petition);

            $me = null;
            $now_step = null;
            $in_process = null;
            foreach (array_keys($path_steps) as $key => $path_step_id) {
                $path_step =& $path_steps[$path_step_id];
                if ($path_step['col_type'] == GRN_WORKFLOW_CIRCULAR) {
                    //回覧経路
                    continue;
                }
                if ( ! $path_step['col_activate'] || $path_step['col_skip']) {
                    //無効またはスキップの経路
                    continue;
                }
                if (is_null($in_process)) {
                    $r = $c->getInProcessPathStepId($path_step);
                    if ($r && $r == $path_step_id) {
                        $in_process = $key;
                    }
                }
                if ($path_step['col_finished']
                    != GRN_WORKFLOW_FINISHED_COMPLETE
                ) {
                    //完了していない経路
                    if (is_null($now_step)) {
                        $now_step = $key;
                        if (array_search($user_id, $path_step['uids'])
                            !== false
                        ) {
                            $me = $key;
                            break;
                        }
                    }
                }
                if (array_search($user_id, $path_step['uids']) !== false) {
                    //自分が経路に含まれている
                    $me = $key;
                }
            }
            $ok = false;
            if (is_null($now_step) || is_null($me)) {
                $ok = false;
            }
            if ($now_step < $me) {
                $ok = true;
            }
            if ($status == GRN_WORKFLOW_STATUS_REMAND) {
                if (is_null($in_process) && ! is_null($me)) {
                    $ok = true;
                } elseif ($in_process < $me) {
                    $ok = true;
                }
            }
            if ($ok) {
                $petition_id['col_petition'] = $pid;
                $petition_id_list[] = $petition_id;
            }
        }

        return $petition_id_list;
    }

    /**
     * @param       $user_id
     * @param       $folder_id
     * @param       $search
     * @param array $remove_item_list
     * @param int   $lock_mode
     *
     * @return array
     */
    function searchPetitionIdList_FOLDER_PUBLIC_ID(
        $user_id,
        $folder_id,
        $search,
        $remove_item_list = [],
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $petition_id_list = [];

        require_once("workflow/bean/GrnWorkflowSearchCondition.csp");
        require_once("workflow/query/GrnWorkflowSearchPetitionInPublicFolderQuery.csp");
        $queryBuilder = new \grn\workflow\query\SearchQueryBuilder();
        $query
            = $queryBuilder->build(new GrnWorkflowSearchPetitionInPublicFolderQuery(),
            $this->_getDatabase(),
            $search);
        $result = $query->execute();

        require_once('workflow/controller_util.csp');
        $category_util
            = GRN_Workflow_Category_Controller_Utility::getInstance();

        $rows = [];
        $checked_list = [];
        foreach ($result as $row) {
            // このループで、カテゴリが公開中かどうかのチェックをしている。
            if (is_null($row['category_id'])) {
                continue;
            }
            $cid = $row['category_id'] ? $row['category_id']
                : GRN_WORKFLOW_CATEGORY_ROOT_ID;
            if (array_key_exists($cid, $checked_list)) {
                if ($checked_list[$cid]) {
                    $petition_id['col_petition'] = $row['petition_id'];
                    $petition_id_list[] = $petition_id;
                }
            } else {
                $r = $category_util->checkPublic($cid, false);
                if ($r) {
                    $petition_id['col_petition'] = $row['petition_id'];
                    $petition_id_list[] = $petition_id;
                }
                $checked_list[$cid] = $r;
            }
        }

        return $petition_id_list;
    }


    /**
     * Search Petition ID List
     *
     * @param        $user_id
     * @param        $folder_id
     * @param  mixed $search    //Search Option
     * @param array  $remove_item_list
     * @param int    $lock_mode //Lock Mode
     *
     * @return array  $petition_id_list          //Petition ID List
     */
    function searchPetitionIdList(
        $user_id,
        $folder_id,
        $search,
        $remove_item_list = [],
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $petition_id_list = [];

        if ($folder_id == GRN_WORKFLOW_FOLDER_PROXY_APPROVAL_ID) {
            return $this->searchPetitionIdList_FOLDER_PROXY_APPROVAL_ID($user_id,
                $folder_id, $search, $remove_item_list, $lock_mode);
        } elseif ($folder_id == GRN_WORKFLOW_FOLDER_APPROVAL_PLAN_ID) {
            return $this->searchPetitionIdList_FOLDER_APPROVAL_PLAN_ID($user_id,
                $folder_id, $search, $remove_item_list, $lock_mode);
        } elseif ($folder_id == GRN_WORKFLOW_FOLDER_PUBLIC_ID) {
            return $this->searchPetitionIdList_FOLDER_PUBLIC_ID($user_id,
                $folder_id, $search, $remove_item_list, $lock_mode);
        }

        //Return Petition ID List
        return $petition_id_list;
    }


}

