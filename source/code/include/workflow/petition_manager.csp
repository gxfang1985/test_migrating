<?php
/**
 * Workflow Application Petition Class
 *
 * @author  Yuichi, Nakamura 2005/12
 * @version 1.0
 * @package grn.workflow
 */

/** Workflow Application **/
require_once('workflow/resources.csp');
require_once('workflow/petition_manager_base.csp');

/**
 * Petition Manager Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_Petition_Manager extends GRN_Workflow_Petition_Manager_Base
{
    /**
     * Constructor
     */
    function __construct()
    {
        //Get Parent Instance
        $parent = parent::getInstance();

        //Sync Parent Table and Petition List Cache
        $this->_table_name =& $parent->_table_name;
        $this->_list =& $parent->_list;
    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_Petition_Manager $instance                  //Instance of GRN_Workflow_Petition_Manager
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_Petition_Manager();
        }

        return $_instance;
    }

    /**
     * Create Petition
     *
     * @param  array $property_list //Property List(Name=>Value)
     *
     * @return string $petition_id               //Petition ID
     */
    function create($property_list)
    {
        //Get Database
        $database = $this->_getDatabase();

        //Create Column List
        $column_list = $this->_getColumnList();

        //Create Query
        $insert_list = [];
        foreach ($column_list as $column) {
            if ($column == '_id') {
                continue;
            }

            if (array_key_exists($column, $property_list)) {
                if ($column == GRN_WORKFLOW_COLUMN_FORM
                    && $property_list[GRN_WORKFLOW_COLUMN_FORM] == -1
                ) {
                    $insert_list[$column] = 'null';
                } else {
                    $insert_list[$column] = cb_queryf($database, '"@S"',
                        $property_list[$column]);
                }
            }
        }
        $column_string = implode(', ', array_keys($insert_list));
        $value_string = implode(', ', $insert_list);
        $query = sprintf('INSERT %s(%s) VALUES (%s)',
            $this->_table_name, $column_string, $value_string);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Return Petition ID
        $petition_id = $database->get_insert_id();

        return $petition_id;
    }

    /**
     * Update Petition
     *
     * @param  string $petition_id   //Petition ID
     * @param  array  $property_list //Property List(Name=>Value)
     *
     * @return string $petition_id                //Petition ID
     */
    function update($petition_id, $property_list)
    {
        //Get Database
        $database = $this->_getDatabase();

        //Create Column List
        $column_list = $this->_getColumnList();

        //Create Query
        $update_list = [];
        foreach ($column_list as $column) {
            if ($column == '_id') {
                continue;
            }

            if (array_key_exists($column, $property_list)) {
                if ($column == GRN_WORKFLOW_COLUMN_FORM
                    && $property_list[GRN_WORKFLOW_COLUMN_FORM] == -1
                ) {
                    $update_list[$column] = cb_queryf($database, '@S = null',
                        $column);
                } else {
                    if (is_null($property_list[$column])
                        || strlen($property_list[$column]) <= 0
                    ) {
                        $update_list[$column] = cb_queryf($database,
                            '@S = null', $column);
                    } else {
                        $update_list[$column] = cb_queryf($database,
                            '@S = "@S"', $column, $property_list[$column]);
                    }
                }
            }
        }
        $update_string = implode(', ', $update_list);
        $where_string = cb_queryf($database, '_id = "@S"', $petition_id);
        $query = sprintf('UPDATE %s SET %s WHERE %s',
            $this->_table_name, $update_string, $where_string);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Return Petition ID
        return $petition_id;
    }

    /**
     * Remove Petition
     *
     * @param int $petition_id //Petition ID
     *
     * @return true
     */
    function remove($petition_id)
    {
        //Get Database
        $database = $this->_getDatabase();

        //Create Column List
        $column_list = implode(',', $this->_getColumnList());

        //Create Query
        $where_string = cb_queryf($database, '_id = "@S"', $petition_id);
        $query = sprintf('DELETE FROM %s WHERE %s', $this->_table_name,
            $where_string);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Delete From Petition List
        foreach (array_keys($this->_list) as $key) {
            if (in_array($petition_id, $this->_list[$key])) {
                unset($this->_list[$key][$petition_id]);
            }
        }

        return true;
    }

    /**
     * Remove Multiple Petition
     *
     * @param array $petition_id_list //Petition ID List
     *
     * @return true|void
     */
    function removeMulti($petition_id_list)
    {
        if (is_array($petition_id_list) && count($petition_id_list) === 0) {
            return;
        }

        //Get Database
        $database =& $this->_getDatabase();

        //Create Column List
        $column_list = implode(',', $this->_getColumnList());

        //Create Query
        $id_condition = [];
        foreach ($petition_id_list as $petition_id) {
            $id_condition[] = cb_queryf($database, "'@S'", $petition_id);
        }
        $where_string = sprintf('_id IN(%s)', implode(', ', $id_condition));
        $query = sprintf('DELETE FROM %s WHERE %s', $this->_table_name,
            $where_string);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Delete From Petition List
        $petition_id = current($petition_id_list);
        foreach (array_keys($this->_list) as $key) {
            if (in_array($petition_id, $this->_list[$key])) {
                foreach ($petition_id_list as $petition_id) {
                    unset($this->_list[$key][$petition_id]);
                }
            }
        }

        return true;
    }

    /**
     * Remove All Petition
     *
     * @param int $form_id //Form ID
     *
     * @return true
     */
    function removeAll($form_id = null)
    {
        //Get Database
        $database =& $this->_getDatabase();

        //Create Column List
        $column_list = implode(',', $this->_getColumnList());

        //Create Query
        $where_string = "";
        if ($form_id == -1) {
            $where_string = 'WHERE col_form IS NULL';
        } elseif ( ! is_null($form_id)) {
            $where_string = cb_queryf($database, 'WHERE col_form = "@S"',
                $form_id);
        }
        $query = sprintf('DELETE FROM %s %s', $this->_table_name,
            $where_string);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Delete From Petition List
        unset($this->_list[$form_id]);

        return true;
    }

    /**
     * Change Petition Order
     *
     * @param  array $petition_id_list //Petition ID List
     *
     * @return true
     */
    function changeOrder($petition_id_list)
    {
        //Set New List Index
        $list_index = 0;
        $property_list = [];
        foreach ($petition_id_list as $petition_id) {
            $property_list[GRN_WORKFLOW_COLUMN_LIST_INDEX] = $list_index;
            $this->update($petition_id, $property_list);
            $list_index++;
        }

        return true;
    }
}


