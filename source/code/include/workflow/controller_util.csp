<?php
/**
 * Workflow Application Controller Utility Class
 *
 * @author  Yuichi, Nakamura 2006/1
 * @version 1.0
 * @package grn.workflow
 */

/** Workflow Application **/
require_once('grn/controller.csp');
require_once('workflow/resources.csp');
require_once('grn/application.csp');

use grn\grn\access\service\AppAccess;
use grn\workflow\CustomizationUtil;

/**
 *  Controller Utility Base Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_Controller_Utility_Base
{
    /** Table Name **/
    var $_table_name = null;

    /** Logic Base **/
    var $_logic_base = null;

    /**
     * Constructor
     *
     * @return none
     */
    function __construct($table_name, $logic_base)
    {
        //Initialize Table Name
        $this->_table_name = $table_name;

        //Initialize Logic Bse
        $this->_logic_base = $logic_base;
    }

    /**
     * Get Logic Base
     *
     * @param  none
     *
     * @return GRN_Workflow_Petition_Logic_Base $logic_base                //Logic Base
     */
    function getLogicBase()
    {
        return $this->_logic_base;
    }

    /**
     * create Column List
     *
     * @param  array $translation_map //Model <=> View Translation Map
     *
     * @return array  $column_list               //Request Column List
     */
    function createColumnList(& $translation_map)
    {
        //Get All Column List
        $logic_base = $this->getLogicBase();
        $column_list = $logic_base->getColumnlist();

        //Create Request Column List
        foreach (array_keys($column_list) as $key) {
            $column_name = str_replace('col_', '', $column_list[$key]);
            if ( ! in_array($column_name, $translation_map)) {
                unset($column_list[$key]);
            }
        }

        //Return Column List
        return $column_list;
    }

    /**
     * Get View
     *
     * @param  array $data            //Target Data
     * @param  array $translation_map //Model <=> View Translation Map
     *
     * @return array  $data_for_view             //Target Data for View
     */
    function _getView($data, & $translation_map)
    {
        $data_for_view = [];

        //Set Teble Name
        $data_for_view['table'] = $this->_table_name;

        //Create Parameter Translation for Data
        foreach ($translation_map as $view => $model) {
            if ($model !== '_id') {
                $model = 'col_' . $model;
            }

            switch ($model) {
                case '_id':
                    $data_for_view[$view] = $data['_id'];
                    break;
                case 'col_creator':
                case 'col_modifier':
                    //Get User ID
                    $uid = $data[$model];
                    if ($uid) {
                        $data_for_view[$view] = $uid;
                    }
                    break;
                case 'col_creator_name':
                case 'col_modifier_name':
                    //Get User ID
                    $data_for_view[$view] = $data[$model];
                    $model = str_replace('_name', '', $model);
                    $uid = $data[$model];

                    if ($uid) {
                        //Get User Information
                        global $G_container_base;
                        $grn_uum = $G_container_base->getInstance('uum');
                        $user = $grn_uum->getUserInfo($uid,
                            [GRN_WORKFLOW_COLUMN_DISPLAY_NAME]);
                        if ($user) {
                            $data_for_view[$view]
                                = $user[GRN_WORKFLOW_COLUMN_DISPLAY_NAME];
                        }
                    }
                    break;
                case 'col_ctime':
                case 'col_mtime':
                    $time = $data[$model];
                    $data_for_view[$view] = new CB_TimeStamp();
                    $data_for_view[$view]->unix_ts = $time;
                    break;
                case 'col_settings':
                    $data_for_view[$view] = [];
                    $settings = $data[$model];
                    if (strlen($settings) !== 0) {
                        $data_for_view[$view] = cb_unserialize($settings,
                            ["allowed_classes" => false]);
                    }
                    break;
                case 'col_display_name':
                    if ($data['col_type'] == GRN_WORKFLOW_ITEM_TYPE_STANDARD
                        && (is_null($data[$model])
                            || strlen($data[$model]) <= 0)
                    ) {
                        $data_for_view[$view]
                            = cb_plain_msg(GRN_WORKFLOW_MODULE_ID,
                            'form_subject');
                    } elseif ($data['col_type']
                              == GRN_WORKFLOW_ITEM_TYPE_BLANK_SPACE
                              && (is_null($data[$model])
                                  || strlen($data[$model]) <= 0)
                    ) {
                        $data_for_view[$view]
                            = cb_plain_msg(GRN_WORKFLOW_MODULE_ID,
                            'blank_space');
                    } else {
                        $data_for_view[$view] = $data[$model];
                    }
                    break;
                case 'col_display_type':
                    $foreign_key = $data['col_foreign_key'];
                    $data_for_view[$view] = cb_plain_msg(GRN_WORKFLOW_MODULE_ID,
                        $foreign_key);
                    break;
                case 'col_file_info':
                    //Get GRN_Workflow_File Object
                    $item_data_file_for_view['file_info'] = null;
                    if (array_key_exists('col_file', $data)) {
                        require_once('workflow/file.csp');
                        $file_manager = new GRN_Workflow_FileManager_Core();
                        $file_table = $file_manager->getFileTable();
                        $file_object =& $file_table->getRow($data['col_file']);

                        //Set File Information
                        if ($file_object) {
                            $file_info
                                = grn_make_attached_file_info($file_object,
                                'workflow');
                            $data_for_view['file_info'] = $file_info;
                        }
                    }
                    break;
                default:
                    $data_for_view[$view] = $data[$model];
                    break;
            }
        }

        //Return Data View
        return $data_for_view;
    }

}

/**
 *  Form Controller Utility Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_Form_Controller_Utility
    extends GRN_Workflow_Controller_Utility_Base
{
    /** Form Logic Instance **/
    var $_form_logic_base = null;

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
        //Get Logic Base Instance
        require_once('workflow/form_logic_base.csp');
        $logic_base = GRN_Workflow_Form_Logic_Base::getInstance();

        //Initialize Parent Class
        parent::__construct(GRN_WORKFLOW_TABLE_FORM, $logic_base);
    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_Form_Controller_Utility $instance                  //Instance of GRN_Workflow_Form_Controller_Utility
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_Form_Controller_Utility();
        }

        return $_instance;
    }

    /**
     * @access private
     */
    var $_controller_util = null;

    /**
     * Get GRN_Workflow_ControllerUtil
     *
     * @param  string $page //Page Name
     *
     * @return object $instance                 //Instance of GRN_Workflow_Form_Controller_Utility
     * @access private
     */
    function _getControllerUtil($page = null)
    {
        if (is_null($this->_controller_util)) {
            $this->_controller_util = new GRN_Workflow_ControllerUtil($page);
        }

        return $this->_controller_util;
    }

    /**
     * Get Form View
     *
     * @param  int   $form_id         //Form ID
     * @param  array $translation_map //Model <=> View Translation Map
     * @param  int   $category_id     //Category ID
     * @param  mixed $option          //Option (array('list'=>array('offset'=>'', 'limit'=>''), 'sort'=>array('column'=>'', 'order'=>''), 'condition'=>array('column'=>'', 'value'=>''))
     * @param  bool  $refresh         //Refresh Flag
     * @param  int   $lock_mode       //Lock Mode
     *
     * @return array  $form_view                 //Form for View
     */
    function getView(
        $form_id,
        $translation_map,
        $category_id = null,
        $option = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Create Default Condition Option
        if ( ! array_key_exists('condition', $option)) {
            $option['condition'] = [];
            $option['condition'][] = [
                'column'   => 'col_deleted',
                'value'    => '0',
                'operator' => '='
            ];
        }

        //Create Column List
        $column_list = $this->createColumnlist($translation_map);

        //Get Form
        $form_logic_base = $this->getLogicBase();
        if (is_null($category_id)) {
            $form = $form_logic_base->getDirect($form_id, $column_list, $option,
                $lock_mode);
        } else {
            $form =& $form_logic_base->get($form_id, $category_id, $column_list,
                $option, $refresh, $lock_mode);
        }

        //Get Form View
        $form_for_view = $this->_getView($form, $translation_map);

        //Return Form View
        return $form_for_view;
    }

    /**
     * Get Form List View
     *
     * @param  array $translation_map //Model <=> View Translation Map
     * @param  int   $category_id     //Category ID
     * @param  mixed $option          //Option (array('list'=>array('offset'=>'', 'limit'=>''), 'sort'=>array('column'=>'', 'order'=>''), 'condition'=>array('column'=>'', 'value'=>''))
     * @param  bool  $refresh         //Refresh Flag
     * @param  int   $lock_mode       //Lock Mode
     *
     * @return array  $form_view                 //Form for View
     */
    function getListView(
        $translation_map,
        $category_id = null,
        $option = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $form_list_for_view = [];

        //Create Default Condition Option
        if ( ! array_key_exists('condition', $option)) {
            $option['condition'] = [];
            $option['condition'][] = [
                'column'   => 'col_deleted',
                'value'    => '0',
                'operator' => '='
            ];
        }

        //Create Column List
        $column_list = $this->createColumnlist($translation_map);

        //Get Form List
        $form_list = [];
        $form_logic_base = $this->getLogicBase();
        $form_list =& $form_logic_base->getList($category_id,
            $column_list, $option, $refresh, $lock_mode);

        //Create Parameter Translation for Form List
        foreach (array_keys($form_list) as $form_id) {
            $form_list_for_view[$form_id]
                = $this->_getView($form_list[$form_id], $translation_map);
        }

        //Return Form List View
        return $form_list_for_view;
    }

    //-- Import Functions -------------------------------

    /**
     * Import Path Condition Steps into DataBase as Updating
     *
     * @param  object $logic                    //Path Condition Step Logic
     * @param  int    $condition_id             //Path Condition ID
     * @param  array  $condition_step_list      //Path Condition Step List
     * @param  int    $path_type                //Path Type
     * @param  array  $pathstep_serialno2id_map //Path Step Map (Serial number <-> Path Step ID)
     *
     * @access private
     */
    function _importPathConditionStepsIntoDB(
        & $logic,
        & $condition_id,
        & $condition_step_list,
        & $path_type,
        & $pathstep_serialno2id_map
    ) {
        //Not add/modify if Condition doesn't exist.
        if ( ! $condition_id) {
            return;
        }

        //Create Properties
        $properties = [
            'col_path_condition' => $condition_id,
            'col_path_step'      => null,
        ];

        //Get Existing Path Condition Steps
        $condition_id_list = [$condition_id];
        $exist_condition_step_columns = ['_id' => '_id'];
        $exist_condition_steps
            = $logic->getListByPathConditionId($condition_id_list,
            $exist_condition_step_columns);

        if ($path_type != GRN_WORKFLOW_PUBLIC_PATH) {
            //unset condition step
            if (is_array($exist_condition_steps)) {
                $condition_step_id_list = [];
                foreach (array_keys($condition_step_list) as $key) {
                    $condition_step_id_list[]
                        = $condition_step_list[$key]['_id'];
                }

                foreach (
                    array_keys($exist_condition_steps) as
                    $exist_condition_step_id
                ) {
                    if (in_array($exist_condition_step_id,
                        $condition_step_id_list)
                    ) {
                        unset($exist_condition_steps[$exist_condition_step_id]);
                    }
                }
            }

            foreach ($condition_step_list as $condition_step) {
                //Set Path Step ID into Properties
                switch ($path_type) {
                    case GRN_WORKFLOW_PRIVATE_PATH:
                        //専用経路の時は Serial No. から IDを取得
                        if ( ! array_key_exists($condition_step['pathstep_serial_no'],
                            $pathstep_serialno2id_map)
                        ) {
                            //分岐条件に指定された経路ステップが不正です。属性:path_step_serialno
                            require_once('workflow/error_code.csp');
                            cb_throw_error(E_GRN_WRKF_XML_INVALID_PATH_CONDITION_STEP,
                                null, null, null,
                                ['property' => 'pathstep_serialno']);
                        }
                        $properties['col_path_step']
                            = $pathstep_serialno2id_map[$condition_step['pathstep_serial_no']];
                        break;
                    default:
                        //経路の種類が不正です。
                        require_once('workflow/error_code.csp');
                        cb_throw_error(E_GRN_WRKF_INVALID_PATH_TYPE);
                        break;
                }

                if (array_key_exists('_id', $condition_step)
                    && is_array($exist_condition_steps)
                    && $current_condition_step_no
                        = array_search($condition_step['_id'],
                        $exist_condition_steps)
                ) {
                    //Modify :存在すること確認済みのため、modify を介さない
                    $controller_util = $this->_getControllerUtil();
                    $condition = cb_queryf($controller_util->_dbconn,
                        "_id='@S'", $condition_step['_id']);
                    $logic->_updateRecords($condition, $properties);
                    unset($exist_condition_steps[$current_condition_step_no]);
                } else {
                    //Add New
                    $logic->add($properties);
                }
            }
        }

        // unset されなかった Path Condition Steps を削除
        if (is_array($exist_condition_steps)
            && 0 < count($exist_condition_steps)
        ) {
            $logic->removeList(array_keys($exist_condition_steps));
        }
    }

    /**
     * Import Path Conditions into DataBase as Updating
     *
     * @param  object $logic          //Path Condition Logic
     * @param  into   $form_id        //Form ID
     * @param  into   $path_id        //Path Skip ID
     * @param  array  $condition_list //Path Condition List
     *
     * @return int                                      //Path Condition ID
     * @access private
     */
    function _importPathConditionsIntoDB(
        & $logic,
        & $form_id,
        & $path_skip_id,
        & $condition_list
    ) {
        //Get Existing Path Conditions
        $columns = [
            'tab_grn_workflow_pathcondition' => [
                '_id' => '_id'
            ]
        ];
        $exist_conditions = $logic->getList(null, $form_id, $columns);

        $condition_id = null;
        $pcids = [];
        if ($path_skip_id) {
            //Create Properties for Add or Modify
            $properties = [
                'col_path_skip'  => $path_skip_id,
                'col_name'       => null,
                'col_operator'   => null,
                'col_number'     => null,
                'col_option'     => null,
                'col_list_index' => null,
            ];

            $list_index = 0;
            foreach ($condition_list as $condition) {
                //Check Imported Values
                if ( ! array_key_exists('col_name', $condition)
                     || '' == cb_trim($condition['col_name'])
                ) {
                    //経路の分岐名が見つかりません。
                    require_once('workflow/error_code.csp');
                    cb_throw_error(E_GRN_WRKF_XML_PATH_CONDITION_NAME_NOT_FOUND,
                        null, null, null,
                        ['parameter' => 'name']);
                }
                //Add to Properties(for Add or Modify)
                $properties['col_name'] = $condition['col_name'];
                $properties['col_operator'] = $condition['col_operator'];
                $properties['col_number'] = $condition['col_number'];
                $properties['col_option'] = $condition['col_option'];
//                $properties['col_list_index']= $condition['col_list_index'];
                $properties['col_list_index'] = $list_index++;

                if (array_key_exists('_id', $condition)
                    && is_array($exist_conditions)
                    && array_key_exists($condition['_id'], $exist_conditions)
                ) {
                    // Modify
                    $condition_id = $condition['_id'];
                    $logic->modify($condition['_id'], $properties);
                    unset($exist_conditions[$condition['_id']]);
                    $condition_id = $condition['_id'];
                } else {
                    // Add New Path Condition
                    $condition_id = $logic->add($properties);
                }

                $pcids[$condition['_id']] = $condition_id;
            }
        }

        // unset されなかった Path Conditions を削除
        if (is_array($exist_conditions) && 0 < count($exist_conditions)) {
            $ids = array_keys($exist_conditions);
            $logic->removeList($ids);
        }

        return $pcids;
    }

    /**
     * Import Path Skips into DataBase
     *
     * @param  object $logic                //Path Skip Logic
     * @param  int    $form_id              //Form ID
     * @param  array  $path_skip            //Path Skip Information
     * @param  array  $item_serialno2id_map //Item ID List (serialno => id)
     *
     * @return int                                  //Path Skip ID
     * @access private
     */
    function _importPathSkipsIntoDB(
        & $logic,
        $form_id,
        $path_skip,
        $item_serialno2id_map
    ) {
        //Get Existing Path Skip
        $columns = [
            'tab_grn_workflow_pathskip' => [
                '_id' => '_id'
            ]
        ];

        $exist_path_skip = $logic->getByFormId($form_id, $columns);

        //Get Item ID
        if ( ! array_key_exists('item_serial_no', $path_skip)
             || '' == cb_trim($path_skip['item_serial_no'])
        ) {
            return;
        } elseif ( ! array_key_exists($path_skip['item_serial_no'],
            $item_serialno2id_map)
        ) {
            require_once('workflow/error_code.csp');
            //経路の分岐情報が不正です。属性:item_serial_no
            cb_throw_error(E_GRN_WRKF_XML_INVALID_PATH_SKIP,
                null, null, null,
                ['parameter' => 'item serial_no']);
        }

        $item_id = $item_serialno2id_map[$path_skip['item_serial_no']];

        require_once('workflow/item_logic.csp');
        $item_logic = GRN_Workflow_Item_Logic::getInstance();
        $item_list = $item_logic->getList($form_id, [], true);
        $item_util = GRN_Workflow_Item_Controller_Utility::getInstance();
        $branch_item_list
            = $item_util->eliminateNotAvailableBranchItems($form_id,
            $item_list);
        if ( ! array_key_exists($item_id, $branch_item_list)) {
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_INVALID_XML_IMPORT);
        }

        $properties = [
            'col_form' => $form_id,
            'col_item' => $item_id,
        ];

        if (array_key_exists('_id', $path_skip) && is_array($exist_path_skip)
            && $current_path_skip_no = array_search($path_skip['_id'],
                $exist_path_skip)
        ) {
            // Modify Path Skip
            $path_skip_id = $path_skip['_id'];
            $logic->modify($path_skip['_id'], $properties);
            unset($exist_path_skip[$current_path_skip_no]);
        } else {
            // Add New Path Skip
            $path_skip_id = $logic->add($properties);
        }

        // unset されなかった Path Skip を削除
        if (is_array($exist_path_skip)) {
            foreach ($exist_path_skip as $value) {
                $logic->remove($value);
            }
        }

        return $path_skip_id;
    }

    /**
     * Import Change Accesses into DataBase
     *
     * @param  object $logic                    //Change Access Logic
     * @param  array  $change_access_list       //Change Access List
     * @param  int    $form_id                  //Form ID
     * @param  array  $item_list                //Item List
     * @param  array  $item_serialno2id_map     //Item Map(serial no. => id)
     * @param  array  $pathstep_serialno2id_map //Path Step Map(serial no. => id)
     *
     * @access private
     */
    function _importChangeAccessesIntoDB(
        & $logic,
        & $change_access_list,
        & $form_id,
        & $item_list,
        & $item_serialno2id_map,
        & $path_type,
        & $pathstep_serialno2id_map
    ) {
        //Get Exist Change Accesses of this Form : _id => (['_id'] => _id,...)
        $columns = [
            'tab_grn_workflow_accesschangeform' => [
                '_id' => '_id'
            ]
        ];
        $exist_change_access_list = $logic->getListByFormId($form_id, $columns);

        //Create Item Map for transform from Serial No. to Foreign Key
        $item_serialno2fk_map = [];
        foreach ($item_list as $item) {
            $item_serialno2fk_map[$item['serial_no']]
                = $item['col_foreign_key']; //(Existence of Keys Checked)
        }

        //Propertes used to Add or Modify Change Access
        $properties = [
            'col_item'      => null,
            'col_path_step' => null,
            'col_view'      => null,
            'col_edit'      => null,
        ];

        foreach ($change_access_list as $change_access) {
            //Check Foreign Key
            $item_serial_no = $change_access['item_serial_no'];
            if (GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                != $item_serialno2fk_map[$item_serial_no]
                && GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                   != $item_serialno2fk_map[$item_serial_no]
                && GRN_WORKFLOW_CONDITION_ITEM_DATE
                   != $item_serialno2fk_map[$item_serial_no]
                && GRN_WORKFLOW_CONDITION_ITEM_FILE
                   != $item_serialno2fk_map[$item_serial_no]
                && GRN_WORKFLOW_CONDITION_ITEM_NUMERIC
                   != $item_serialno2fk_map[$item_serial_no]
            ) {
                //アクセス権を設定できる項目は「ファイル」のみ
                continue;
            }

            //Set Item ID
            if ( ! array_key_exists($item_serial_no, $item_serialno2id_map)) {
                //項目のアクセス権が不正です。属性:item_serial_no（項目の通し番号）
                require_once('workflow/error_code.csp');
                cb_throw_error(E_GRN_WRKF_XML_INVALID_CHANGE_ACCESS,
                    null, null, null,
                    ['parameter' => 'item_serial_no']);
            }
            $properties['col_item'] = $item_serialno2id_map[$item_serial_no];

            $properties['col_view'] = $change_access['col_view'];
            $properties['col_edit'] = $change_access['col_edit'];

            //Set Path Step ID
            switch ($path_type) {
                case GRN_WORKFLOW_PUBLIC_PATH:
                    $properties['col_path_step']
                        = $change_access['col_path_step'];
                    break;
                case GRN_WORKFLOW_PRIVATE_PATH:
                    //専用経路の時は Serial No. から IDを取得

                    if ( ! array_key_exists($change_access['pathstep_serial_no'],
                        $pathstep_serialno2id_map)
                    ) {
                        //項目のアクセス権が不正です。属性:path_step_serialno（経路ステップの通し番号）
                        require_once('workflow/error_code.csp');
                        cb_throw_error(E_GRN_WRKF_XML_INVALID_CHANGE_ACCESS,
                            null, null, null,
                            ['parameter' => 'pathstep_serial_no']);
                    }
                    $properties['col_path_step']
                        = $pathstep_serialno2id_map[$change_access['pathstep_serial_no']];

                    break;
                default:
                    //経路の種類が不正です。
                    require_once('workflow/error_code.csp');
                    cb_throw_error(E_GRN_WRKF_INVALID_PATH_TYPE);
                    break;
            }
            if ($path_type == GRN_WORKFLOW_PUBLIC_PATH) {
                $change_access_columns = [
                    '_id',
                    'col_item',
                    'col_path_step',
                    'col_view',
                    'col_edit'
                ];
                $current_change_accesses
                    = $logic->getListByItemId($properties['col_item'],
                    $change_access_columns, 'col_path_step');
                $current_change_access = null;
                if (is_array($current_change_accesses)
                    && array_key_exists($properties['col_path_step'],
                        $current_change_accesses)
                ) {
                    $current_path_step_id = $properties['col_path_step'];
                    $current_change_access
                        = $current_change_accesses[$current_path_step_id];
                }

                if (is_array($current_change_access)
                    && array_key_exists('_id', $current_change_access)
                ) {
                    //Modify
                    $logic->modify($current_change_access['_id'], $properties);
                } else {
                    //Add
                    $logic->add($properties);
                }
            } else {
                // Modify or Add Change Access
                if (array_key_exists('_id', $change_access)
                    && is_array($exist_change_access_list)
                    && array_key_exists($change_access['_id'],
                        $exist_change_access_list)
                ) {
                    //Modify
                    $logic->modify($change_access['_id'], $properties);
                    unset($exist_change_access_list[$change_access['_id']]);
                } else {
                    //Add
                    $logic->add($properties);
                }
            }
        }

        //Delete Extra Change Access
        if ($path_type != GRN_WORKFLOW_PUBLIC_PATH
            && is_array($exist_change_access_list)
            && 0 < count($exist_change_access_list)
        ) {
            $extra_key_list = array_keys($exist_change_access_list);
            $logic->removeList($extra_key_list);
        }
    }

    /**
     * Import Member into DataBase
     *
     * @param  array $path_step    //Path Step Information
     * @param  int   $path_step_id //Path Step ID
     *
     * @return array                                 //Path Step Map :serialno <-> id
     * @access private
     */
    function _importMemberIntoDB($path_step_id, $path_step)
    {
        //Get Controller Utility
        $controller_util = $this->_getControllerUtil();

        // Add Users
        $users =& $path_step['users'];
        if (is_array($users) && 0 < count($users)) {
            foreach ($users as $key => $value) {
                $users[$key] = cb_queryf($controller_util->_dbconn, "'@S'",
                    $value);
            }
            $users = implode(',', $users);
            $condition = "col_foreign_key IN({$users})";
            $users = $controller_util->_uum->getUsersInfo(null, null, 0, -1,
                null, $condition);

            if (is_array($users) && 0 < count($users)) {
                foreach (array_keys($users) as $user_id) {
                    $user =& $users[$user_id];
                    $user['col_path_step'] = $path_step_id;
                    $user['col_member'] = $user['_id'];
                }

                $logic = GRN_Workflow_PathStepUsers::getInstance();
                $columns = [
                    'col_path_step',
                    'col_member'
                ];

                $logic->addList($columns, $users);
            }
        }

        $groups =& $path_step['groups'];
        if (is_array($groups) && 0 < count($groups)) {
            $groupKeys = array_values($groups);
            $groups
                = $controller_util->_uum->getGroupInfoListByForeignKeys($groupKeys);

            if (is_array($groups) && 0 < count($groups)) {
                foreach (array_keys($groups) as $group_id) {
                    $group =& $groups[$group_id];
                    $group['col_path_step'] = $path_step_id;
                    $group['col_member'] = $group['_id'];
                }

                $logic = GRN_Workflow_PathStepGroups::getInstance();
                $columns = [
                    'col_path_step',
                    'col_member'
                ];
                $logic->addList($columns, $groups);
            }
        }

        if (is_array($path_step['roles']) && 0 < count($path_step['roles'])) {
            $roles =& $path_step['roles']['roles'];
            if (is_array($roles) && 0 < count($roles)) {
                foreach ($roles as $key => $value) {
                    $roles[$key] = cb_queryf($controller_util->_dbconn, "'@S'",
                        $value);
                }
                $roles = implode(',', $roles);
                $condition = "col_foreign_key IN({$roles})";
                $roles = $controller_util->_uum->listStaticRolesInfo(null,
                    0, -1, $condition);

                if (is_array($roles) && 0 < count($roles)) {
                    foreach (array_keys($roles) as $role_id) {
                        $role =& $roles[$role_id];
                        $role['col_path_step'] = $path_step_id;
                        $role['col_member'] = $role_id;
                    }

                    $logic = GRN_Workflow_PathStepStaticRoles::getInstance();
                    $columns = [
                        'col_path_step',
                        'col_member'
                    ];
                    $logic->addList($columns, $roles);
                }
            }

            $roles =& $path_step['roles']['chief_roles'];
            if (is_array($roles) && 0 < count($roles)) {
                foreach ($roles as $key => $value) {
                    $roles[$key] = cb_queryf($controller_util->_dbconn, "'@S'",
                        $value);
                }
                $roles = implode(',', $roles);
                $condition = "col_foreign_key IN({$roles})";
                $roles = $controller_util->_uum->listStaticRolesInfo(null,
                    0, -1, $condition);

                if (is_array($roles) && 0 < count($roles)) {
                    foreach (array_keys($roles) as $role_id) {
                        $role =& $roles[$role_id];
                        $role['col_path_step'] = $path_step_id;
                        $role['col_member'] = $role['_id'];
                        $role['col_chief'] = true;
                    }

                    $logic = GRN_Workflow_PathStepStaticRoles::getInstance();
                    $columns = [
                        'col_path_step',
                        'col_member',
                        'col_chief'
                    ];
                    $logic->addList($columns, $roles);
                }
            }
        }
    }

    /**
     * Import Private Path Steps into DataBase as New ones
     *
     *   Caution! All of Path Steps of Private Path are add NEW.
     *
     * @param  object $logic          //Path Step Logic
     * @param  int    $path_id        //Path ID
     * @param  array  $path_step_list //Path Step List
     *
     * @return array                                //Path Step Map (Serial Number=>ID)
     * @access private
     */
    function _importPathStepsIntoDB(& $logic, & $path_id, & $path_step_list)
    {
        require_once('workflow/error_code.csp');

        $pathstep_serialno2id_map = [];
        foreach ($path_step_list as $path_step) {
            //Check Values
            if ('' == cb_trim($path_step['col_role'])) {
                cb_throw_error(E_GRN_WRKF_XML_PARAMETER_INVALID,
                    null, null, null,
                    ['parameter' => '<path_step> => <name>']);
            }

            if (GRN_WORKFLOW_ITEM_TYPE_ITEM
                == $path_step['col_type']
            )             //経路ステップが「承認」のとき、承認種別は必須
            {
                if ('' == cb_trim($path_step['col_acceptance_type'])) {
                    cb_throw_error(E_GRN_WRKF_XML_PARAMETER_INVALID,
                        null, null, null,
                        ['parameter' => '<path_step> => acceptance_type']);
                }
            }

            //Add Path Steps
            $properties = [
                'col_path'             => $path_id,
                'col_type'             => $path_step['col_type'],
                'col_acceptance_type'  => ! is_null($path_step['col_acceptance_type'])
                    ? $path_step['col_acceptance_type'] : 0,
                'col_role'             => $path_step['col_role'],
                'col_code'             => cb_at($path_step, 'col_code'),
                'col_skip'             => $path_step['col_skip'],
                'col_applicant'        => $path_step['col_applicant'],
                'col_deny_change_path' => $path_step['col_deny_change_path']
                    ? $path_step['col_deny_change_path'] : 0,
                'col_change_path'      => $path_step['col_change_path']
                    ? $path_step['col_change_path'] : 0,
                'col_list_index'       => $path_step['col_list_index'],
            ];
            $is_importing = true;
            $path_step_id = $logic->add($properties, $is_importing);

            //Update Path Step Map
            if (array_key_exists('serial_no', $path_step)) {
                $pathstep_serialno2id_map[$path_step['serial_no']]
                    = $path_step_id;
            }

            //Import Users, Roles, Goups
            $this->_importMemberIntoDB($path_step_id, $path_step);
        }

        return $pathstep_serialno2id_map;
    }

    /**
     * Import Path into DataBase
     *
     *   Caution! Some of columns will be updated with the undermentioned value
     *            when theirs value isn't passed.
     *
     * @param  object $logic           //Path Logic
     * @param  object $path_step_logic //Path Step Logic
     * @param  object $form_logic      //Form Logic
     * @param  int    $form_id         //Form ID
     * @param  int    $path_id         //Path ID
     * @param  array  $path            //Path Information with Path Steps
     *
     * @return int                                  //Path ID
     * @access private
     */
    function _importPathIntoDB(
        & $logic,
        & $path_step_logic,
        & $form_logic,
        & $form_id,
        $path_id,
        & $path
    ) {
        //Get Path Type
        $path_type = null;
        if (array_key_exists('col_type', $path)) {
            $path_type
                = $path['col_type'];     //Valedated at 'function _importPath()'
        }

        if (GRN_WORKFLOW_PRIVATE_PATH == $path_type) {
            //Check Arguments
            // --Name
            if ( ! array_key_exists('col_name', $path)
                 || '' == cb_trim($path['col_name'])
            ) {
                //経路名が見つかりません。要素名:col_name
                require_once('workflow/error_code.csp');
                cb_throw_error(E_GRN_WRKF_XML_PATH_NAME_NOT_FOUND,
                    null, null, null,
                    ['parameter' => 'name']);
            }
            // --Foriegn Key
            if ( ! array_key_exists('col_foreign_key', $path)
                 || '' == cb_trim($path['col_foreign_key'])
            ) {
                //経路コードが見つかりません。要素名:col_foreign_key
                require_once('workflow/error_code.csp');
                cb_throw_error(E_GRN_WRKF_XML_PATH_FOREIGN_KEY_NOT_FOUND,
                    null, null, null,
                    ['parameter' => 'foreign_key']);
            }

            // --skip
            $path_skip = 0;
            if (array_key_exists('col_skip', $path)
                && ! is_null($path['col_skip'])
            ) {
                $path_skip = $path['col_skip'];
            }

            // --richeditor
            $path_richeditor = 0;
            if (array_key_exists('col_richeditor', $path)
                && ! is_null($path['col_richeditor'])
            ) {
                $path_richeditor = $path['col_richeditor'];
            }

            // --icon
            $path_icon = 0;
            if (array_key_exists('col_icon', $path)
                && ! is_null($path['col_icon'])
            ) {
                $path_icon = $path['col_icon'];
            }

            //Create Path's Property List
            $properties = [
                'col_name'        => $path['col_name'],
                'col_foreign_key' => $path['col_foreign_key'],
                //必須チェック済み（_import()）
                'col_type'        => $path_type,
                //有効値チェック済み（_importPathStep()）
                'col_skip'        => $path_skip,
                'col_admin_memo'  => array_key_exists('col_admin_memo', $path)
                    ? $path['col_admin_memo'] : '',
                'col_description' => array_key_exists('col_description', $path)
                    ? $path['col_description'] : '',
                'col_richeditor'  => $path_richeditor,
                'col_icon'        => $path_icon,
            ];

            global $G_container_base;
            $uum = $G_container_base->getInstance('uum');
            $login = $uum->getLoginUser();

            $properties['col_modifier'] = $login->getOID();
            $properties['col_modifier_name']
                = $login->get('display_name');
            $properties['col_modifier_foreign_key']
                = $login->get('foreign_key');
            $properties['col_mtime'] = time();

            if (is_null($path_id)) {
                $properties['col_creator'] = $properties['col_modifier'];
                $properties['col_creator_name']
                    = $properties['col_modifier_name'];
                $properties['col_creator_foreign_key']
                    = $properties['col_modifier_foreign_key'];
                $properties['col_ctime']
                    = $properties['col_mtime'];

                //New Path
                $path_id = $logic->add($properties);
            } else {
                //Modify Path
                $logic->modify($path_id, $properties);

                //Delete Path Steps
                $path_step_logic->removeListByPathId($path_id);
            }
        }

        //Set Path ID into Form
        $form_logic->setPath($form_id, $path_id, null, false, false);

        return $path_id;
    }

    /**
     * Import Items into DataBase
     *
     *   Caution! Some of columns will be updated with the undermentioned value
     *            when theirs value isn't passed.
     *
     * @param  object $logic //Item Logic
     * @param  array  $items //Items Information List
     *
     * @return array    $item_serialno2id_map   //Item Map (Serial Number=>ID)
     * @access private
     */
    function _importItemsIntoDB(& $logic, & $form_id, & $items)
    {
        $item_serialno2id_map = [];

        //Get Exist Item ID List
        $exist_item_column_list = [
            '_id' => '_id',
        ];
        $exist_item_list = $logic->getList($form_id,
            $exist_item_column_list);

        $ids_array = [];
        $item_code_array = [];

        foreach ($items as $item) {
            //Transform Item Serial No. of Settings into Item ID
            if ( ! array_key_exists('col_foreign_key', $item)
                 || '' == cb_trim($item['col_foreign_key'])
            ) {
                //項目が不正です。
                require_once('workflow/error_code.csp');
                cb_throw_error(E_GRN_WRKF_XML_INVALID_ITME,
                    null, null, null,
                    ['parameter' => 'foreign_key']);
            }

            if (array_key_exists('col_code', $item)) {
                $item['col_code']
                    = CustomizationUtil::trimCode($item['col_code']);
                if (array_key_exists($item['col_code'], $item_code_array)) {
                    require_once('workflow/error_code.csp');
                    cb_throw_error(E_GRN_WRKF_IMPORT_COLLISION_ITEM_CODE);
                }

                if ($item['col_code'] != '') {
                    if ( ! CustomizationUtil::validateCode($item['col_code'])) {
                        cb_throw_error(E_GRN_WRKF_INVALID_ITEM_CODE_VALUE);
                    }
                    $item_code_array[$item['col_code']] = $item['col_code'];
                }
            } else {
                $item['col_code'] = '';
            }

            $ids_array[$item['_id']] = $item['col_foreign_key'];

            $foreign_key = $item['col_foreign_key'];
            $settings = $item['col_settings'];
            if ('' != cb_trim($settings)) {
                $setting_list = cb_unserialize($settings,
                    ["allowed_classes" => false]);
                $item_util = grn_workflow_get_item_util($foreign_key);
                if ( ! $item_util) {
                    //Invalid Foreign Key
                    require_once('workflow/error_code.csp');
                    cb_throw_error(E_GRN_WRKF_ITEM_INVALID_FOREIGN_KEY);
                }
                $treated_item_setting_list
                    = $item_util->importSettings($setting_list,
                    $item_serialno2id_map);
                $item['col_settings'] = serialize($treated_item_setting_list);
            }

            //Create Properties
            $properties = [];
            $properties[GRN_WORKFLOW_COLUMN_FOREIGN_KEY]
                = $item['col_foreign_key'];
            $properties[GRN_WORKFLOW_COLUMN_TYPE] = $item['col_type'];
            $properties[GRN_WORKFLOW_COLUMN_DISPLAY_NAME]
                = $item['col_display_name'];
            $properties[GRN_WORKFLOW_COLUMN_CODE] = $item['col_code'];
            $properties[GRN_WORKFLOW_COLUMN_OPTION_STRING]
                = array_key_exists('col_option_string',
                $item) ? $item['col_option_string'] : '';
            $properties[GRN_WORKFLOW_COLUMN_OPTION_STRING_TYPE]
                = array_key_exists('col_option_string_type',
                $item) ? $item['col_option_string_type'] : 0;
            $properties[GRN_WORKFLOW_COLUMN_DESCRIPTION]
                = array_key_exists('col_description',
                $item) ? $item['col_description'] : '';
            $properties[GRN_WORKFLOW_COLUMN_DESCRIPTION_TYPE]
                = array_key_exists('col_description_type',
                $item) ? $item['col_description_type'] : 0;
            $properties[GRN_WORKFLOW_COLUMN_DESCRIPTION_EDITOR]
                = array_key_exists('col_description_editor',
                $item) ? $item['col_description_editor'] : 0;
            $properties[GRN_WORKFLOW_COLUMN_ATTACH_FILE]
                = array_key_exists('col_attach_file',
                $item) ? $item['col_attach_file'] : null;
            $properties[GRN_WORKFLOW_COLUMN_ATTACH_FILE_VIEW]
                = array_key_exists('col_attach_file_view',
                $item) ? $item['col_attach_file_view'] : null;
            $properties[GRN_WORKFLOW_COLUMN_SETTINGS]
                = array_key_exists('col_settings',
                $item) ? $item['col_settings'] : null;

            $properties[GRN_WORKFLOW_COLUMN_BR]
                = array_key_exists('col_br', $item) ? $item['col_br'] : 1;
            $properties[GRN_WORKFLOW_COLUMN_REQUIRED]
                = array_key_exists('col_required', $item)
                ? $item['col_required'] : 0;
            $properties[GRN_WORKFLOW_COLUMN_SEPARATOR]
                = array_key_exists('col_separator', $item)
                ? $item['col_separator'] : '';
            $properties[GRN_WORKFLOW_COLUMN_LIST_INDEX]
                = $item['col_list_index'];
            $properties[GRN_WORKFLOW_COLUMN_EXPORT_DATA]
                = $item['col_export_data'];

            if (GRN_WORKFLOW_ITEM_TYPE_BLANK_SPACE == $item['col_type']) {
                $properties[GRN_WORKFLOW_COLUMN_DISPLAY_NAME] = null;
                $properties[GRN_WORKFLOW_COLUMN_OPTION_STRING] = null;
                $properties[GRN_WORKFLOW_COLUMN_OPTION_STRING_TYPE] = null;
                $properties[GRN_WORKFLOW_COLUMN_DESCRIPTION] = null;
                $properties[GRN_WORKFLOW_COLUMN_DESCRIPTION_TYPE] = null;
                $properties[GRN_WORKFLOW_COLUMN_DESCRIPTION_EDITOR] = null;
                $properties[GRN_WORKFLOW_COLUMN_ATTACH_FILE] = null;
                $properties[GRN_WORKFLOW_COLUMN_ATTACH_FILE_VIEW] = null;
                $properties[GRN_WORKFLOW_COLUMN_SETTINGS] = null;
                $properties[GRN_WORKFLOW_COLUMN_REQUIRED] = 0;
                $properties[GRN_WORKFLOW_COLUMN_SEPARATOR] = '';
                $properties[GRN_WORKFLOW_COLUMN_EXPORT_DATA] = 0;
            }

            //Add or Modify Item
            if (array_key_exists('_id', $item)
                && is_array($exist_item_column_list)
                && array_key_exists($item['_id'], $exist_item_list)
            ) {

                // Modify
                switch ($item['col_type']) {
                    case GRN_WORKFLOW_ITEM_TYPE_STANDARD:
                    case GRN_WORKFLOW_ITEM_TYPE_ITEM:
                    case GRN_WORKFLOW_ITEM_TYPE_BLANK_SPACE:
                        $item_id = $item['_id'];
                        $logic->modifyByImport($item_id, $form_id, $properties);
                        $item_serialno2id_map[$item['serial_no']] = $item_id;
                        break;
                    case GRN_WORKFLOW_ITEM_TYPE_BLANK:
                        $item_id = $item['_id'];
                        break;
                    default:
                        //項目が不正です。,null,'type'
                        require_once('workflow/error_code.csp');
                        cb_throw_error(E_GRN_WRKF_XML_INVALID_ITME,
                            null, null, null,
                            ['parameter' => 'type']);
                        break;
                }
                unset($exist_item_list[$item_id]);
            } else {
                // Add New
                switch ($item['col_type']) {
                    case GRN_WORKFLOW_ITEM_TYPE_STANDARD:
                    case GRN_WORKFLOW_ITEM_TYPE_ITEM:
                    case GRN_WORKFLOW_ITEM_TYPE_BLANK:
                    case GRN_WORKFLOW_ITEM_TYPE_BLANK_SPACE:
                        $item_id = $logic->addByImport($form_id,
                            $properties);
                        $item_serialno2id_map[$item['serial_no']] = $item_id;
                        break;
                    default:
                        //項目が不正です。'type'
                        require_once('workflow/error_code.csp');
                        cb_throw_error(E_GRN_WRKF_XML_INVALID_ITME,
                            null, null, null,
                            ['parameter' => 'type']);
                        break;
                }
            }
        }

        require_once('workflow/auto_schedule_setting_logic.csp');
        $register_setting
            = GRN_Workflow_Auto_Schedule_Setting_Logic::getInstance();
        $register_setting->checkCsvItem($form_id, $ids_array);

        // Delete Extra Items
        if (is_array($exist_item_column_list) && 0 < count($exist_item_list)) {
            $extra_key_list = array_keys($exist_item_list);
            $logic->deleteMulti($extra_key_list);
        }

        return $item_serialno2id_map;
    }

    /**
     * Import Forms into Database
     *
     * @param  array $forms       //Imported Forms List
     * @param  int   $category_id //Category ID
     *
     * @access private
     */
    function _importFormsIntoDB(& $forms, & $category_id)
    {
        require_once('fw/string_util.csp');
        require_once('workflow/item_resources.csp');

        //Get Logic
        require_once('workflow/form_logic.csp');
        require_once('workflow/item_logic.csp');
        require_once('workflow/path.csp');
        require_once('workflow/change_access.csp');
        require_once('workflow/path_skip.csp');
        require_once('workflow/path_condition.csp');
        $form_logic = GRN_Workflow_Form_Logic::getInstance();
        $item_logic = GRN_Workflow_item_Logic::getInstance();
        $path_logic = GRN_Workflow_Paths::getInstance();
        $path_step_logic = GRN_Workflow_PathSteps::getInstance();
        $change_access_logic = GRN_Workflow_ChangeAccess::getInstance();
        $path_skip_logic = GRN_Workflow_PathSkips::getInstance();
        $path_condition_logic = GRN_Workflow_PathConditions::getInstance();
        $path_condition_step_logic
            = GRN_Workflow_PathConditionSteps::getInstance();

        //---------------------------------------------------------------------------
        //    準備
        //---------------------------------------------------------------------------

        //++ 登録済み申請フォームリストを作成 +++++++++++++++++++++++++++
        // Get Existing Form List.          ID=>(Foreign Key, Path ID, Category ID)
        $form_column_list = [
            '_id'             => '_id',
            'col_foreign_key' => 'col_foreign_key',
            'col_path'        => 'col_path',
            'col_category'    => 'col_category',
        ];
        $condition = [
            0 => [
                'column'   => 'col_type',
                'value'    => GRN_WORKFLOW_FORM_TYPE_FORM,
                'operator' => '='
            ],
            1 => [
                'column'   => 'col_deleted',
                'value'    => 0,
                'operator' => '='
            ],
        ];
        $option = ['condition' => $condition];

        $form_logic_base = $this->getLogicBase();
        $exist_form_list = $form_logic_base->getList(null, $form_column_list,
            $option);

        // Transform Existing Form List.    Foreign Key=>(ID, Path ID, Category ID)
        $fk_sort_exist_forms = [];
        foreach ($exist_form_list as $exist_form) {
            $fk_sort_exist_forms[$exist_form['col_foreign_key']] = $exist_form;
        }
        unset($exist_form_list);
        //++++++++++++++++++++++

        //++ 登録されている経路コードリストを作成 +++
        //Get Existing Path List. Foreign Key=>(ID, Type)
        $fk_sort_exist_path_list = [];
        $id_sort_exist_path_list = [];
        $path_column_list = [
            '_id'             => '_id',
            'col_foreign_key' => 'col_foreign_key',
            'col_type'        => 'col_type',
        ];
        $fk_sort_exist_path_list = $path_logic->getListByForeignKeys(null,
            $path_column_list);

        //Add Form Foreign Key to Existed Path List.   Foreign Key=>(ID, Type, Form Foreign Key)
        // -- Update when New Path is added
        $exist_path2form_map
            = [];     //Temporary Map. Path ID => Form Foreign Key
        foreach ($fk_sort_exist_forms as $exist_form) {
            $exist_path2form_map[$exist_form['col_path']]
                = $exist_form['col_foreign_key'];
        }
        foreach ($fk_sort_exist_path_list as $exist_path) {
            if (GRN_WORKFLOW_PRIVATE_PATH == $exist_path['col_type']) {
                $exist_form_fk = $exist_path2form_map[$exist_path['_id']];
            } else {
                $exist_form_fk = null;
            }
            $fk_sort_exist_path_list[$exist_path['col_foreign_key']]['form_fk']
                = $exist_form_fk;
        }

        //Create Existing Path List Sorted by Path ID.   ID=>Foreign Key
        // -- NOT need to Update when New Path is added
        // -- Use to check old Path ID after modifying Form
        foreach ($fk_sort_exist_path_list as $exist_path) {
            $id_sort_exist_path_list[$exist_path['_id']] = $exist_path;
        }
        //++++++++++++++++++++++

        //---------------------------------------------------------------------------
        //    読み込みを実行
        //---------------------------------------------------------------------------
        $serial_number_map = [];
        $serial_number_map['item'] = [];
        $serial_number_map['path_step'] = [];

        //Get Import Category ID
        if (GRN_WORKFLOW_CATEGORY_NONPARTY_ID == $category_id) {
            //Non Party Category
            $category_id = null;
        } else {
            //Check Import Category ID Exists
            require_once('workflow/category_logic_base.csp');
            $category_logic_base
                = GRN_Workflow_Category_Logic_Base::getInstance();
            $category =& $category_logic_base->get($category_id);
        }
        foreach ($forms as $form) {

            //Get Form ID
            //Check Duplication of Form Foreign Key
            $form_id = null;
            if (array_key_exists($form['col_foreign_key'],
                $fk_sort_exist_forms)
            ) {
                //同一カテゴリならば上書き、それ以外は重複エラー
                if ($category_id
                    != $fk_sort_exist_forms[$form['col_foreign_key']]['col_category']
                ) {
                    require_once('workflow/error_code.csp');
                    cb_throw_error(E_GRN_WRKF_XML_DUPLICATION_FORM_FOREIGN_KEY,
                        null,
                        ['form_foreign_key' => $form['col_foreign_key']]
                    );
                }
                $form_id
                    = $fk_sort_exist_forms[$form['col_foreign_key']]['_id'];
            }

            //Get Path
            $path = $form['path'];

            //Get Path Type
            $path_type = null;
            if (array_key_exists('col_type', $path)) {
                $path_type
                    = $path['col_type'];     //Valedated at 'function _importPath()'
            }

            //Get Path Foreign Key
            $path_foreign_key = null;
            if (array_key_exists('col_foreign_key', $path)) {
                $path_foreign_key = $path['col_foreign_key'];
            }

            //Get Path ID
            //Check Path Foreign Key
            $path_id = null;
            if (GRN_WORKFLOW_PUBLIC_PATH == $path_type) {
                //Public Path

                if ( ! array_key_exists($path_foreign_key,
                        $fk_sort_exist_path_list)
                     || GRN_WORKFLOW_PUBLIC_PATH
                        != $fk_sort_exist_path_list[$path_foreign_key]['col_type']
                ) {
                    // Public Path does't exist
                    require_once('workflow/error_code.csp');
                    cb_throw_error(E_GRN_WRKF_XML_PUBLIC_PATH_NOT_FOUND,
                        null,
                        ['path_foreign_key' => $path_foreign_key]
                    );
                }

                //Get Path ID
                $path_id = $fk_sort_exist_path_list[$path_foreign_key]['_id'];
            } elseif (GRN_WORKFLOW_PRIVATE_PATH == $path_type
                      && array_key_exists($path_foreign_key,
                    $fk_sort_exist_path_list)
            ) {
                //Private Path
                if ($fk_sort_exist_path_list[$path_foreign_key]['form_fk']
                    != $form['col_foreign_key']
                    || GRN_WORKFLOW_PRIVATE_PATH
                       != $fk_sort_exist_path_list[$path_foreign_key]['col_type']
                ) {
                    // Duplicated Private Path
                    require_once('workflow/error_code.csp');
                    cb_throw_error(E_GRN_WRKF_XML_DUPLICATION_PATH_FOREIGN_KEY,
                        null,
                        ['path_foreign_key' => $path_foreign_key]
                    );
                }

                //Get Path ID
                $path_id = $fk_sort_exist_path_list[$path_foreign_key]['_id'];
            }

            // Import Form Informaion
            if ($form_id) {
                // Modify
                // --Form
                $a = $form_logic->modifyByImport($form_id, $form, $category_id);
                // --Item
                $item_list = [];
                if (array_key_exists('items', $form)) {
                    $item_list = $form['items'];
                }
                $item_serialno2id_map = $this->_importItemsIntoDB($item_logic,
                    $form_id, $item_list);

                // --Path
                //  Type Private: Add or Modify Path AND Set Path ID into Form
                //  Type Public : Set Path ID into Form
                $new_path_id = null;
                $new_path_id = $this->_importPathIntoDB($path_logic,
                    $path_step_logic, $form_logic, $form_id, $path_id, $path);

                //Delete old Private Path
                //when old Path ID differs from new Path ID or new Path doesn't exsist.
                $old_path_id
                    = $fk_sort_exist_forms[$form['col_foreign_key']]['col_path'];
                if ( ! is_null($old_path_id)
                     && array_key_exists($old_path_id, $id_sort_exist_path_list)
                ) {
                    $old_path_type
                        = $id_sort_exist_path_list[$old_path_id]['col_type'];
                    if (GRN_WORKFLOW_PRIVATE_PATH == $old_path_type
                        && $old_path_id != $new_path_id
                    ) {
                        //Delete
                        $path_logic->remove($old_path_id);

                        //Update Exist Path ID List(sorted by Foreign Key)
                        $old_path_fk
                            = $id_sort_exist_path_list[$old_path_id]['col_foreign_key'];
                        unset($fk_sort_exist_path_list[$old_path_fk]);
                    }
                }

                // --Path Steps (Registed ones deleted)
                $pathstep_serialno2id_map = [];
                if ($new_path_id && GRN_WORKFLOW_PRIVATE_PATH == $path_type) {
                    $path_step_list = [];
                    if (array_key_exists('path_steps', $path)) {
                        $path_step_list = $path['path_steps'];
                    }
                    $pathstep_serialno2id_map
                        = $this->_importPathStepsIntoDB($path_step_logic,
                        $new_path_id, $path_step_list);
                }

                // --Access Change of Item
                $change_accesse_list = [];
                if (array_key_exists('change_accesses', $form)) {
                    $change_accesse_list = $form['change_accesses'];
                }
                $item_list = [];
                if (array_key_exists('items', $form)) {
                    $item_list = $form['items'];
                }
                $this->_importChangeAccessesIntoDB($change_access_logic,
                    $change_accesse_list, $form_id, $item_list,
                    $item_serialno2id_map, $path_type,
                    $pathstep_serialno2id_map);

                // --PathSkip
                $path_skip = [];
                if (array_key_exists('path_skip', $form)) {
                    $path_skip = $form['path_skip'];
                }
                $path_skip_id = $this->_importPathSkipsIntoDB($path_skip_logic,
                    $form_id, $path_skip, $item_serialno2id_map);

                // --Path Conditions
                $path_conditions = [];
                if (array_key_exists('path_conditions', $form)) {
                    $path_conditions = $form['path_conditions'];
                    $pcids
                        = $this->_importPathConditionsIntoDB($path_condition_logic,
                        $form_id, $path_skip_id, $path_conditions);

                    // --Path Condition Steps
                    foreach ($pcids as $key => $value) {
                        $path_condition = $path_conditions[$key];
                        if (array_key_exists('path_condition_steps',
                            $path_condition)
                        ) {
                            $this->_importPathConditionStepsIntoDB($path_condition_step_logic,
                                $value, $path_condition['path_condition_steps'],
                                $path_type, $pathstep_serialno2id_map);
                        } else {
                            $path_condition_steps = [];
                            $this->_importPathConditionStepsIntoDB($path_condition_step_logic,
                                $value, $path_condition_steps,
                                $path_type, $pathstep_serialno2id_map);
                        }
                    }
                }

                //Create Serial Number Map
                $serial_number_map['item'][$form['col_foreign_key']]
                    = $item_serialno2id_map;
                $serial_number_map['path_step'][$form['col_foreign_key']]
                    = $pathstep_serialno2id_map;
            } else {
                // Add New Form Informaion
                // --Form
                $form_id = $form_logic->addByImport($form, $category_id);

                // --Items

                $item_list = [];
                if (array_key_exists('items', $form)) {
                    $item_list = $form['items'];
                }
                $item_serialno2id_map = $this->_importItemsIntoDB($item_logic,
                    $form_id, $item_list);

                // --Path
                $new_path_id = null;
                if (0 < count($path) && array_key_exists('col_type', $path)) {
                    //Set Public Path ID when Path Type is Public
                    $public_path_id = null;
                    if (GRN_WORKFLOW_PUBLIC_PATH == $path_type) {
                        $public_path_id
                            = $path_id;     //Path ID as Public Path Checked above
                    }
                    $new_path_id = $this->_importPathIntoDB($path_logic,
                        $path_step_logic, $form_logic, $form_id,
                        $public_path_id, $path);
                }

                // --Path Steps
                $pathstep_serialno2id_map = [];
                if ($new_path_id && GRN_WORKFLOW_PRIVATE_PATH == $path_type
                    && array_key_exists('path_steps', $path)
                ) {
                    $pathstep_serialno2id_map
                        = $this->_importPathStepsIntoDB($path_step_logic,
                        $new_path_id, $path['path_steps']);
                }

                // --Access Change of Item
                if (0 < count($item_serialno2id_map)
                    && ((GRN_WORKFLOW_PRIVATE_PATH == $path_type
                         && 0 < count($pathstep_serialno2id_map))
                        || GRN_WORKFLOW_PUBLIC_PATH == $path_type)
                    && array_key_exists('change_accesses', $form)
                ) {
                    $change_access_list = $form['change_accesses'];
                    foreach ($change_access_list as $change_access) {
                        if (array_key_exists('_id', $change_access)) {
                            unset($change_access_list['_id']);
                        }
                    }

                    $this->_importChangeAccessesIntoDB($change_access_logic,
                        $change_access_list, $form_id, $form['items'],
                        $item_serialno2id_map, $path_type,
                        $pathstep_serialno2id_map);
                }

                // --Path Skip
                $path_skip_id = null;
                if (array_key_exists('path_skip', $form)) {
                    if (array_key_exists('_id', $form['path_skip'])) {
                        unset($form['path_skip']['_id']);
                    }
                    $path_skip_id
                        = $this->_importPathSkipsIntoDB($path_skip_logic,
                        $form_id, $form['path_skip'], $item_serialno2id_map);
                }

                // --Path Conditions
                $path_conditions = [];
                if ($path_skip_id
                    && array_key_exists('path_conditions', $form)
                ) {
                    $path_conditions = $form['path_conditions'];
                    $pcids
                        = $this->_importPathConditionsIntoDB($path_condition_logic,
                        $form_id, $path_skip_id, $path_conditions);

                    // --Path Condition Steps
                    foreach ($pcids as $key => $value) {
                        $path_condition = $path_conditions[$key];
                        if (array_key_exists('path_condition_steps',
                            $path_condition)
                        ) {
                            $this->_importPathConditionStepsIntoDB($path_condition_step_logic,
                                $value, $path_condition['path_condition_steps'],
                                $path_type, $pathstep_serialno2id_map);
                        }
                    }
                }

                //Create Serial Number Map
                $serial_number_map['item'][$form['col_foreign_key']]
                    = $item_serialno2id_map;
                $serial_number_map['path_step'][$form['col_foreign_key']]
                    = $pathstep_serialno2id_map;
            }

            //Update Exist Path ID List(sorted by Foreign Key)
            if ($new_path_id) {
                $fk_sort_exist_path_list[$path_foreign_key] = [
                    '_id'             => $new_path_id,
                    'col_foreign_key' => $path_foreign_key,
                    'col_type'        => $path_type,
                    'form_fk'         => $form['col_foreign_key'],
                ];
            }
        }

        return $serial_number_map;
    }

    /**
     * Import Path Conditions from XML File
     *
     * @param  object $xml_reader //XML Writer
     *
     * @return array                            //Path Conditions Information
     * @access private
     */
    function _importPathConditionSteps(& $xml_reader)
    {
        $path_condition_steps = [];

        $controller_util = $this->_getControllerUtil();
        while ($xml_reader->read()) {
            if (XMLReader::COMMENT == $xml_reader->nodeType
                || XMLReader::SIGNIFICANT_WHITESPACE == $xml_reader->nodeType
            ) {
                continue;
            }
            switch ($tag_name = $xml_reader->name) {
                case 'path_condition_step':
                    $path_condition_step = [];
                    $path_condition_step['_id']
                        = $xml_reader->getAttribute('id');
                    $path_condition_step['col_path_step']
                        = $xml_reader->getAttribute('pathstep_id');
                    $path_condition_step['pathstep_serial_no']
                        = $xml_reader->getAttribute('pathstep_serial_no');
                    $path_condition_steps[]
                        = $path_condition_step;
                case 'path_condition_steps':
                    if (XMLReader::END_ELEMENT == $xml_reader->nodeType) {
                        return $path_condition_steps;
                    }
                    break;
                default:
                    // XMLファイルが不正です
                    require_once('workflow/error_code.csp');
                    cb_throw_error(E_GRN_WRKF_XML_TAG_NAME_INVALID,
                        null, null, null,
                        ['tag_name' => $tag_name]);
                    break;
            }
        }
        // ノードが完了していません。
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_XML_NODE_NOT_FINISH);
    }

    /**
     * Import Path Conditions from XML File
     *
     * @param  object $xml_reader //XML Writer
     *
     * @return array                            //Path Conditions Information
     * @access private
     */
    function _importPathCondition(& $xml_reader)
    {
        $path_condition = [];
        $path_condition['_id'] = $xml_reader->getAttribute('id');
        $path_condition['col_list_index']
            = $xml_reader->getAttribute('list_index');
        $path_condition['col_name'] = null;
        $path_condition['col_number'] = null;
        $path_condition['col_operator'] = null;
        $path_condition['col_option'] = null;

        $controller_util = $this->_getControllerUtil();
        while ($xml_reader->read()) {
            if (XMLReader::COMMENT == $xml_reader->nodeType
                || XMLReader::SIGNIFICANT_WHITESPACE == $xml_reader->nodeType
            ) {
                continue;
            }
            switch ($tag_name = $xml_reader->name) {
                case 'name':
                    $path_condition['col_name']
                        = $controller_util->_getValue($xml_reader, 'name');
                    break;
                case 'number':
                    $path_condition['col_number']
                        = $controller_util->_getValue($xml_reader, 'number');
                    break;
                case 'operator':
                    $path_condition['col_operator']
                        = $controller_util->_getValue($xml_reader, 'operator');
                    break;
                case 'option':
                    $path_condition['col_option']
                        = $controller_util->_getValue($xml_reader, 'option');
                    break;
                case 'path_condition_steps':
                    $path_condition['path_condition_steps']
                        = $this->_importPathConditionSteps($xml_reader);
                    break;
                case 'path_condition':
                    if (XMLReader::END_ELEMENT == $xml_reader->nodeType) {
                        return $path_condition;
                    }
                    break;
                default:
                    // XMLファイルが不正です
                    require_once('workflow/error_code.csp');
                    cb_throw_error(E_GRN_WRKF_XML_TAG_NAME_INVALID,
                        null, null, null,
                        ['tag_name' => $tag_name]);
                    break;
            }
        }
        // ノードが完了していません。
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_XML_NODE_NOT_FINISH);
    }

    /**
     * Import Path Conditions from XML File
     *
     * @param  object $xml_reader //XML Writer
     *
     * @return array                            //Path Conditions Information
     * @access private
     */
    function _importPathConditions(& $xml_reader)
    {
        $path_conditions = [];
        $controller_util = $this->_getControllerUtil();
        while ($xml_reader->read()) {
            if (XMLReader::COMMENT == $xml_reader->nodeType
                || XMLReader::SIGNIFICANT_WHITESPACE == $xml_reader->nodeType
            ) {
                continue;
            }
            switch ($tag_name = $xml_reader->name) {
                case 'path_condition':
                    $path_condition = $this->_importPathCondition($xml_reader);
                    $path_conditions[$path_condition['_id']] = $path_condition;
                    break;
                case 'path_conditions':
                    if (XMLReader::END_ELEMENT == $xml_reader->nodeType) {
                        return $path_conditions;
                    }
                    break;
                default:
                    // XMLファイルが不正です
                    require_once('workflow/error_code.csp');
                    cb_throw_error(E_GRN_WRKF_XML_TAG_NAME_INVALID,
                        null, null, null,
                        ['tag_name' => $tag_name]);
                    break;
            }
        }
        // ノードが完了していません。
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_XML_NODE_NOT_FINISH);
    }

    /**
     * Import Path Skip from XML File
     *
     * @param  object $xml_reader //XML Writer
     *
     * @return array                            //Path Skip Information
     * @access private
     */
    function _importPathSkip(& $xml_reader)
    {
        $path_skip = [];
        $path_skip['_id'] = $xml_reader->getAttribute('id');

        $controller_util = $this->_getControllerUtil();
        while ($xml_reader->read()) {
            if (XMLReader::COMMENT == $xml_reader->nodeType
                || XMLReader::SIGNIFICANT_WHITESPACE == $xml_reader->nodeType
            ) {
                continue;
            }
            switch ($tag_name = $xml_reader->name) {
                case 'item':
                    $path_skip['item_serial_no']
                        = $xml_reader->getAttribute('serial_no');
                    break;
                case 'path_skip':
                    if (XMLReader::END_ELEMENT == $xml_reader->nodeType) {
                        return $path_skip;
                    }
                    break;
                default:
                    // XMLファイルが不正です
                    require_once('workflow/error_code.csp');
                    cb_throw_error(E_GRN_WRKF_XML_TAG_NAME_INVALID,
                        null, null, null,
                        ['tag_name' => $tag_name]);
                    break;
            }
        }
        // ノードが完了していません。
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_XML_NODE_NOT_FINISH);
    }

    /**
     * Import Change Accesses from XML File
     *
     * @param  object $xml_reader //XML Writer
     *
     * @return array                            //Change Accesses Information
     * @access private
     */
    function _importChangeAccesses(& $xml_reader)
    {
        $change_accesses = [];
        $controller_util = $this->_getControllerUtil();
        while ($xml_reader->read()) {
            if (XMLReader::COMMENT == $xml_reader->nodeType
                || XMLReader::SIGNIFICANT_WHITESPACE == $xml_reader->nodeType
            ) {
                continue;
            }
            switch ($tag_name = $xml_reader->name) {
                case 'change_access':
                    $change_access = [];
                    $change_access['_id']
                        = $xml_reader->getAttribute('id');
                    $change_access['item_serial_no']
                        = $xml_reader->getAttribute('item_serial_no');
                    $change_access['pathstep_serial_no']
                        = $xml_reader->getAttribute('pathstep_serial_no');
                    $change_access['col_path_step']
                        = $xml_reader->getAttribute('path_step_id');
                    $change_access['col_view']
                        = $xml_reader->getAttribute('view');
                    $change_access['col_edit']
                        = $xml_reader->getAttribute('edit');
                    $change_accesses[] = $change_access;
                    break;
                case 'change_accesses':
                    if (XMLReader::END_ELEMENT == $xml_reader->nodeType) {
                        return $change_accesses;
                    }
                    break;
                default:
                    // XMLファイルが不正です
                    require_once('workflow/error_code.csp');
                    cb_throw_error(E_GRN_WRKF_XML_TAG_NAME_INVALID,
                        null, null, null,
                        ['tag_name' => $tag_name]);
                    break;
            }
        }
        // ノードが完了していません。
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_XML_NODE_NOT_FINISH);
    }

    /**
     * Import PathStep from XML File
     *
     * @param  object $xml_reader //XML Writer
     *
     * @return array                            //PathStep Information
     * @access private
     */
    function _importPathStep(& $xml_reader)
    {
        $controller_util = $this->_getControllerUtil();

        $path_step['_id'] = $xml_reader->getAttribute('id');
        $path_step['serial_no'] = $xml_reader->getAttribute('serial_no');

        $path_step['col_type'] = $xml_reader->getAttribute('type');
        switch ($path_step['col_type']) {
            case 'acceptance':
                $path_step['col_type'] = GRN_WORKFLOW_ACCEPTANCE;
                break;
            case 'circular':
                $path_step['col_type'] = GRN_WORKFLOW_CIRCULAR;
                break;
            default:
                // XMLファイルが不正です
                require_once('workflow/error_code.csp');
                cb_throw_error(E_GRN_WRKF_XML_PARAMETER_INVALID,
                    null, null, null,
                    ['parameter' => 'Path Step Type:' . $path_step['col_type']]
                );
                break;
        }
        $path_step['col_acceptance_type']
            = $xml_reader->getAttribute('acceptance_type');
        switch ($path_step['col_acceptance_type']) {
            case 'and':
                $path_step['col_acceptance_type'] = GRN_WORKFLOW_OPERATOR_AND;
                break;
            case 'or':
                $path_step['col_acceptance_type'] = GRN_WORKFLOW_OPERATOR_OR;
                break;
            default:
                $path_step['col_acceptance_type'] = null;
                break;
        }
        $path_step['col_skip'] = $xml_reader->getAttribute('skip');
        $path_step['col_applicant']
            = $xml_reader->getAttribute('applicant');
        $path_step['col_change_path']
            = $xml_reader->getAttribute('change_path');
        $path_step['col_deny_change_path']
            = $xml_reader->getAttribute('deny_change_path');
        $path_step['col_list_index']
            = $xml_reader->getAttribute('list_index');
        $path_step['users'] = [];
        $path_step['groups'] = [];
        $path_step['roles'] = [];
        while ($xml_reader->read()) {
            if (XMLReader::COMMENT == $xml_reader->nodeType
                || XMLReader::SIGNIFICANT_WHITESPACE == $xml_reader->nodeType
            ) {
                continue;
            }
            switch ($tag_name = $xml_reader->name) {
                case 'name':
                    $path_step['col_role']
                        = $controller_util->_getValue($xml_reader, 'name');
                    break;
                case 'code':
                    $path_step['col_code']
                        = $controller_util->_getValue($xml_reader, 'code');
                    break;
                case 'users':
                    $path_step['users']
                        = $controller_util->_importUsers($xml_reader);
                    break;
                case 'groups':
                    $path_step['groups']
                        = $controller_util->_importGroups($xml_reader);
                    break;
                case 'roles':
                    $path_step['roles']
                        = $controller_util->_importRoles($xml_reader);
                    break;
                case 'path_step':
                    if (XMLReader::END_ELEMENT == $xml_reader->nodeType) {
                        return $path_step;
                    }
                    break;
                default:
                    // XMLファイルが不正です
                    require_once('workflow/error_code.csp');
                    cb_throw_error(E_GRN_WRKF_XML_TAG_NAME_INVALID,
                        null, null, null,
                        ['tag_name' => $tag_name]);
                    break;
            }
        }
        // ノードが完了していません。
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_XML_NODE_NOT_FINISH);
    }

    /**
     * Import PathSteps from XML File
     *
     * @param  object $xml_reader //XML Writer
     *
     * @return array                            //PathSteps Information
     * @access private
     */
    function _importPathSteps(& $xml_reader)
    {
        $pathsteps = [];
        $controller_util = $this->_getControllerUtil();
        while ($xml_reader->read()) {
            if (XMLReader::COMMENT == $xml_reader->nodeType
                || XMLReader::SIGNIFICANT_WHITESPACE == $xml_reader->nodeType
            ) {
                continue;
            }
            switch ($tag_name = $xml_reader->name) {
                case 'path_step':
                    $pathsteps[] = $this->_importPathStep($xml_reader);
                    break;
                case 'path_steps':
                    if (XMLReader::END_ELEMENT == $xml_reader->nodeType) {
                        return $pathsteps;
                    }
                    break;
                default:
                    // XMLファイルが不正です
                    require_once('workflow/error_code.csp');
                    cb_throw_error(E_GRN_WRKF_XML_TAG_NAME_INVALID,
                        null, null, null,
                        ['tag_name' => $tag_name]);
                    break;
            }
        }
        // ノードが完了していません。
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_XML_NODE_NOT_FINISH);
    }

    /**
     * Import Path from XML File
     *
     * @param  object $xml_reader //XML Writer
     *
     * @return array                            //Path Information
     * @access private
     */
    function _importPath(& $xml_reader)
    {
        $path = [];
        $path['col_type'] = $xml_reader->getAttribute('type');

        $controller_util = $this->_getControllerUtil();
        if (GRN_WORKFLOW_PRIVATE_PATH == $path['col_type']) {
            // Private Path
            $path['col_skip'] = $xml_reader->getAttribute('skip');
            $path['col_richeditor'] = $xml_reader->getAttribute('richeditor');
            $path['col_icon'] = $xml_reader->getAttribute('icon');

            $path['col_name'] = null;
            $path['col_foreign_key'] = null;
            $path['col_admin_memo'] = null;
            $path['col_description'] = null;

            while ($xml_reader->read()) {
                if (XMLReader::COMMENT == $xml_reader->nodeType
                    || XMLReader::SIGNIFICANT_WHITESPACE
                       == $xml_reader->nodeType
                ) {
                    continue;
                }
                switch ($tag_name = $xml_reader->name) {
                    case 'name':
                        $path['col_name']
                            = $controller_util->_getValue($xml_reader, 'name');
                        break;
                    case 'foreign_key':
                        $path['col_foreign_key']
                            = $controller_util->_getValue($xml_reader,
                            'foreign_key');
                        break;
                    case 'admin_memo':
                        $path['col_admin_memo']
                            = $controller_util->_getValue($xml_reader,
                            'admin_memo');
                        break;
                    case 'description':
                        $path['col_description']
                            = $controller_util->_getValue($xml_reader,
                            'description');
                        break;
                    case 'path_steps':
                        $path['path_steps']
                            = $this->_importPathSteps($xml_reader);
                        break;
                    case 'path':
                        if (XMLReader::END_ELEMENT == $xml_reader->nodeType) {
                            return $path;
                        }
                        break;
                    default:
                        // XMLファイルが不正です
                        require_once('workflow/error_code.csp');
                        cb_throw_error(E_GRN_WRKF_XML_TAG_NAME_INVALID,
                            null, null, null,
                            ['tag_name' => $tag_name]);
                        break;
                }
            }
            // ノードが完了していません。
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_XML_NODE_NOT_FINISH);
        } elseif (GRN_WORKFLOW_PUBLIC_PATH == $path['col_type']) {
            // Public Path
            $path['col_foreign_key'] = null;

            while ($xml_reader->read()) {
                if (XMLReader::COMMENT == $xml_reader->nodeType
                    || XMLReader::SIGNIFICANT_WHITESPACE
                       == $xml_reader->nodeType
                ) {
                    continue;
                }
                switch ($tag_name = $xml_reader->name) {
                    case 'foreign_key':
                        $path['col_foreign_key']
                            = $controller_util->_getValue($xml_reader,
                            'foreign_key');
                        break;
                    case 'path':
                        if (XMLReader::END_ELEMENT == $xml_reader->nodeType) {
                            return $path;
                        }
                        break;
                    default:
                        // XMLファイルが不正です
                        require_once('workflow/error_code.csp');
                        cb_throw_error(E_GRN_WRKF_XML_TAG_NAME_INVALID,
                            null, null, null,
                            ['tag_name' => $tag_name]);
                        break;
                }
            }
            // ノードが完了していません。
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_XML_NODE_NOT_FINISH);
        } else {
            // 経路の種類が不正です
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_INVALID_PATH_TYPE);
        }
    }

    /**
     * Import Item from XML File
     *
     * @param  object $xml_reader //XML Writer
     *
     * @return array                            //Item Information
     * @access private
     */
    function _importItem(& $xml_reader)
    {
        $item = [];
        $item['_id'] = $xml_reader->getAttribute('id');
        $item['serial_no']
            = $xml_reader->getAttribute('serial_no');
        $item['col_attach_file']
            = $xml_reader->getAttribute('attach_file');
        $item['col_attach_file_view']
            = $xml_reader->getAttribute('attach_file_view');
        $item['col_br'] = $xml_reader->getAttribute('br');
        $item['col_description_editor']
            = $xml_reader->getAttribute('description_editor');
        $item['col_description_type']
            = $xml_reader->getAttribute('description_type');
        $item['col_option_string_type']
            = $xml_reader->getAttribute('option_string_type');
        $item['col_required'] = $xml_reader->getAttribute('required');
        $item['col_type'] = $xml_reader->getAttribute('type');
        $item['col_list_index']
            = $xml_reader->getAttribute('list_index');
        $item['col_export_data']
            = $xml_reader->getAttribute('export_data');

        $item['col_description'] = null;
        $item['col_display_name'] = null;
        $item['col_code'] = null;
        $item['col_foreign_key'] = null;
        $item['col_option_string'] = null;
        $item['col_separator'] = null;
        $item['col_settings'] = null;

        $controller_util = $this->_getControllerUtil();
        while ($xml_reader->read()) {
            if (XMLReader::COMMENT == $xml_reader->nodeType
                || XMLReader::SIGNIFICANT_WHITESPACE == $xml_reader->nodeType
            ) {
                continue;
            }
            switch ($tag_name = $xml_reader->name) {
                case 'description':
                    $item['col_description']
                        = $controller_util->_getValue($xml_reader,
                        'description');
                    break;
                case 'display_name':
                    $item['col_display_name']
                        = $controller_util->_getValue($xml_reader,
                        'display_name');
                    break;
                case 'code':
                    $item['col_code'] = $controller_util->_getValue($xml_reader,
                        'code');
                    break;
                case 'foreign_key':
                    $item['col_foreign_key']
                        = $controller_util->_getValue($xml_reader,
                        'foreign_key');
                    break;
                case 'option_string':
                    $item['col_option_string']
                        = $controller_util->_getValue($xml_reader,
                        'option_string');
                    break;
                case 'separator':
                    $item['col_separator']
                        = $controller_util->_getValue($xml_reader, 'separator');
                    break;
                case 'settings':
                    $item['col_settings']
                        = $controller_util->_getValue($xml_reader, 'settings');
                    break;
                case 'item':
                    if (XMLReader::END_ELEMENT == $xml_reader->nodeType) {
                        return $item;
                    }
                    break;
                default:
                    // XMLファイルが不正です
                    require_once('workflow/error_code.csp');
                    cb_throw_error(E_GRN_WRKF_XML_TAG_NAME_INVALID,
                        null, null, null,
                        ['tag_name' => $tag_name]);
                    break;
            }
        }
        // ノードが完了していません。
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_XML_NODE_NOT_FINISH);
    }

    /**
     * Import Items from XML File
     *
     * @param  object $xml_reader //XML Writer
     *
     * @return array                            // Items Information
     * @access private
     */
    function _importItems($xml_reader)
    {
        $controller_util = $this->_getControllerUtil();
        $items = [];
        while ($xml_reader->read()) {
            if (XMLReader::COMMENT == $xml_reader->nodeType
                || XMLReader::SIGNIFICANT_WHITESPACE == $xml_reader->nodeType
            ) {
                continue;
            }

            switch ($tag_name = $xml_reader->name) {
                case 'item':
                    $items[] = $this->_importItem($xml_reader);
                    break;

                case 'items':
                    if (XMLReader::END_ELEMENT == $xml_reader->nodeType) {
                        return $items;
                    }
                    break;
                default:
                    // XMLファイルが不正です
                    require_once('workflow/error_code.csp');
                    cb_throw_error(E_GRN_WRKF_XML_TAG_NAME_INVALID,
                        null, null, null,
                        ['tag_name' => $tag_name]);
                    break;
            }
        }
        // ノードが完了していません。
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_XML_NODE_NOT_FINISH);
    }

    /**
     * Import Serial from XML File
     *
     * @param  object $xml_reader //XML Writer
     *
     * @return array                            // Icon Information
     * @access private
     */
    function _importSerial($xml_reader)
    {
        $serial = [];
        $serial['col_serial_type'] = null;
        $serial['col_serial_format'] = null;

        $controller_util = $this->_getControllerUtil();

        while ($xml_reader->read()) {
            if (XMLReader::COMMENT == $xml_reader->nodeType
                || XMLReader::SIGNIFICANT_WHITESPACE == $xml_reader->nodeType
            ) {
                continue;
            }

            switch ($tag_name = $xml_reader->name) {
                case 'type':
                    $serial['col_serial_type']
                        = $controller_util->_getValue($xml_reader, 'type');
                    break;
                case 'format':
                    $serial['col_serial_format']
                        = $controller_util->_getValue($xml_reader, 'format');
                    break;
                case 'serial':
                    if (XMLReader::END_ELEMENT == $xml_reader->nodeType) {
                        return $serial;
                    }
                    break;
                default:
                    // XMLファイルが不正です
                    require_once('workflow/error_code.csp');
                    cb_throw_error(E_GRN_WRKF_XML_TAG_NAME_INVALID,
                        null, null, null,
                        ['tag_name' => $tag_name]);
                    break;
            }
        }
        // ノードが完了していません。
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_XML_NODE_NOT_FINISH);
    }

    /**
     * import Approved Serial
     *
     * @param XMLReader $xml_reader
     *
     * @return array
     */
    private function importApprovedSerial(XMLReader $xml_reader)
    {
        $serial = [];
        $serial['col_approved_serial_type'] = null;
        $serial['col_approved_serial_format'] = null;

        $controller_util = $this->_getControllerUtil();

        while ($xml_reader->read()) {
            if (XMLReader::COMMENT == $xml_reader->nodeType
                || XMLReader::SIGNIFICANT_WHITESPACE == $xml_reader->nodeType
            ) {
                continue;
            }

            switch ($tag_name = $xml_reader->name) {
                case 'type':
                    $serial['col_approved_serial_type']
                        = $controller_util->_getValue($xml_reader, 'type');
                    break;
                case 'format':
                    $serial['col_approved_serial_format']
                        = $controller_util->_getValue($xml_reader, 'format');
                    break;
                case 'approved_serial':
                    if (XMLReader::END_ELEMENT == $xml_reader->nodeType) {
                        return $serial;
                    }
                    break;
                default:
                    // XMLファイルが不正です
                    require_once('workflow/error_code.csp');
                    cb_throw_error(E_GRN_WRKF_XML_TAG_NAME_INVALID,
                        null, null, null,
                        ['tag_name' => $tag_name]);
                    break;
            }
        }
        // ノードが完了していません。
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_XML_NODE_NOT_FINISH);
    }

    /**
     * Import Icon from XML File
     *
     * @param  object $xml_reader //XML Writer
     *
     * @return array                            // Icon Information
     * @access private
     */
    function _importIcon($xml_reader)
    {
        $icon = [];
        $icon['col_icon_id'] = $xml_reader->getAttribute('id');
        $icon['col_icon_type'] = null;
        $icon['col_icon_url'] = null;

        $controller_util = $this->_getControllerUtil();
        while ($xml_reader->read()) {
            if (XMLReader::COMMENT == $xml_reader->nodeType
                || XMLReader::SIGNIFICANT_WHITESPACE == $xml_reader->nodeType
            ) {
                continue;
            }

            switch ($tag_name = $xml_reader->name) {
                case 'type':
                    $icon['col_icon_type']
                        = $controller_util->_getValue($xml_reader, 'type');
                    break;
                case 'url':
                    $icon['col_icon_url']
                        = $controller_util->_getValue($xml_reader, 'url');
                    break;

                case 'icon':
                    if (XMLReader::END_ELEMENT == $xml_reader->nodeType) {
                        return $icon;
                    }
                    break;
                default:
                    // XMLファイルが不正です
                    require_once('workflow/error_code.csp');
                    cb_throw_error(E_GRN_WRKF_XML_TAG_NAME_INVALID,
                        null, null, null,
                        ['tag_name' => $tag_name]);
                    break;
            }
        }
        // ノードが完了していません。
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_XML_NODE_NOT_FINISH);
    }

    /**
     * Import Form from XML File
     *
     * @param  object $xml_reader //XML Writer
     *
     * @return array                            // Icon Information
     * @access private
     */
    function _importForm($xml_reader)
    {
        $form = [];
        $form['col_active'] = $xml_reader->getAttribute('active');
        $form['col_auto_export']
            = $xml_reader->getAttribute('auto_export');
        $form['col_login_name_export']
            = $xml_reader->getAttribute('login_name_export');
        $form['col_export_top_line']
            = $xml_reader->getAttribute('export_top_line');
        $form['col_list_index']
            = $xml_reader->getAttribute('list_index');

        $form['col_name'] = null;
        $form['col_foreign_key'] = null;
        $form['category_foreign_key'] = null;
        $form['col_memo'] = null;
        $form['col_admin_memo'] = null;
        $form['col_export_folder'] = null;

        $form['items'] = [];
        $form['path'] = [];
        $form['change_accesses'] = [];
        $form['path_skip'] = [];
        $form['path_conditions'] = [];

        $controller_util = $this->_getControllerUtil();
        while ($xml_reader->read()) {
            if (XMLReader::COMMENT == $xml_reader->nodeType
                || XMLReader::SIGNIFICANT_WHITESPACE == $xml_reader->nodeType
            ) {
                continue;
            }

            switch ($tag_name = $xml_reader->name) {
                case 'name':
                    $form['col_name'] = $controller_util->_getValue($xml_reader,
                        'name');
                    break;
                case 'foreign_key':
                    $form['col_foreign_key']
                        = $controller_util->_getValue($xml_reader,
                        'foreign_key');
                    break;
                case 'category_foreign_key':
                    $form['category_foreign_key']
                        = $controller_util->_getValue($xml_reader,
                        'category_foreign_key');
                    break;
                case 'memo':
                    $form['col_memo'] = $controller_util->_getValue($xml_reader,
                        'memo');
                    break;
                case 'admin_memo':
                    $form['col_admin_memo']
                        = $controller_util->_getValue($xml_reader,
                        'admin_memo');
                    break;
                case 'export_folder':
                    $form['col_export_folder']
                        = $controller_util->_getValue($xml_reader,
                        'export_folder');
                    break;
                case 'icon':
                    $form = array_merge($form, $this->_importIcon($xml_reader));
                    break;
                case 'serial':
                    $form = array_merge($form,
                        $this->_importSerial($xml_reader));
                    break;
                case 'approved_serial':
                    $form = array_merge($form,
                        $this->importApprovedSerial($xml_reader));
                    break;
                case 'items':
                    $form['items'] = $this->_importItems($xml_reader);
                    break;
                case 'path':
                    $form['path'] = $this->_importPath($xml_reader);
                    break;
                case 'change_accesses':
                    $form['change_accesses']
                        = $this->_importChangeAccesses($xml_reader);
                    break;
                case 'path_skip':
                    $form['path_skip'] = $this->_importPathSkip($xml_reader);
                    break;
                case 'path_conditions':
                    $form['path_conditions']
                        = $this->_importPathConditions($xml_reader);
                    break;
                case 'access_changes':
                    $form['access_changes']
                        = $this->_importAccessChanges($xml_reader);
                    break;
                case 'form':
                    if (XMLReader::END_ELEMENT == $xml_reader->nodeType) {
                        return $form;
                    }
                    break;
                default:
                    // XMLファイルが不正です
                    require_once('workflow/error_code.csp');
                    cb_throw_error(E_GRN_WRKF_XML_TAG_NAME_INVALID,
                        null, null, null,
                        ['tag_name' => $tag_name]);
                    break;
            }
        }
        // ノードが完了していません。
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_XML_NODE_NOT_FINISH);
    }

    /**
     * Import Forms from XML File
     *
     * @param  object $xml_reader //XML Writer
     *
     * @access private
     */
    function _importForms(& $xml_reader)
    {
        $forms = [];
        while ($xml_reader->read()) {
            if (XMLReader::COMMENT == $xml_reader->nodeType
                || XMLReader::SIGNIFICANT_WHITESPACE == $xml_reader->nodeType
            ) {
                continue;
            }

            switch ($tag_name = $xml_reader->name) {
                case 'form':
                    $forms[] = $this->_importForm($xml_reader);
                    break;
                case 'forms':
                    if (XMLReader::END_ELEMENT == $xml_reader->nodeType) {
                        return $forms;
                    }
                default:
                    // XMLファイルが不正です
                    require_once('workflow/error_code.csp');
                    cb_throw_error(E_GRN_WRKF_XML_TAG_NAME_INVALID,
                        null, null, null,
                        ['tag_name' => $tag_name]);
                    break;
            }
        }
        // ノードが完了していません。
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_XML_NODE_NOT_FINISH);
    }

    /**
     * Import Form Information from XML File
     *
     * @param  string $file_name   //File Name
     * @param  int    $category_id //Category ID
     *
     * @access private
     */
    function import(& $file_name, $category_id)
    {
        // Check Category ID
        if ($category_id == GRN_WORKFLOW_CATEGORY_ROOT_ID) {
            //Invalid Category
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_XML_INVALID_CATEGORY);
        }

        // Get Form Information from XML File
        $xml_reader = new XMLReader();
        if ( ! $xml_reader->open($file_name)) {
            //Fail to open file
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_XML_OPEN_FILE_FAILED);
        }

        $forms = [];
        while ($xml_reader->read()) {
            if (XMLReader::COMMENT == $xml_reader->nodeType
                || XMLReader::SIGNIFICANT_WHITESPACE == $xml_reader->nodeType
            ) {
                continue;
            }

            switch ($tag_name = $xml_reader->name) {
                case 'forms':
                    $forms = $this->_importForms($xml_reader);
                    break;
                default:
                    // XMLファイルが不正です
                    require_once('workflow/error_code.csp');
                    cb_throw_error(E_GRN_WRKF_XML_TAG_NAME_INVALID,
                        null, null, null,
                        ['tag_name' => $tag_name]);
                    break;
            }
        }
        $xml_reader->close();

        // Import Forms into Database
        if (0 < count($forms)) {
            // Override form if its foreign key is the same
            $foreign_keys = [];
            foreach ($forms as $key => $form) {
                $fk = $form['col_foreign_key'];
                if (count($foreign_keys)
                    && array_key_exists($fk, $foreign_keys)
                ) {
                    unset($forms[$foreign_keys[$fk]]);
                }
                $foreign_keys[$fk] = $key;
            }

            $serial_number_map = $this->_importFormsIntoDB($forms,
                $category_id);
        }

        //監査
        foreach (array_keys($forms) as $key) {
            //申請フォーム
            $inspections['form_foreign_key'][$forms[$key]['col_foreign_key']]
                = $forms[$key]['col_foreign_key'];
            //申請項目
            $inspections['items_foreign_key'][$forms[$key]['col_foreign_key']]
                = null;

            if (array_key_exists('items', $forms[$key])
                && is_array($forms[$key]['items'])
                && count($forms[$key]['items']) > 0
            ) {
                //申請項目
                foreach (array_keys($forms[$key]['items']) as $item_key) {
                    $inspections['items_foreign_key'][$forms[$key]['col_foreign_key']][]
                        = $forms[$key]['items'][$item_key]['col_foreign_key'];
                }
                $inspections['items_foreign_key'][$forms[$key]['col_foreign_key']]
                    = implode('/',
                    $inspections['items_foreign_key'][$forms[$key]['col_foreign_key']]);
            }

            //経路
            $inspections['path_foreign_key'][$forms[$key]['col_foreign_key']]
                = null;
            //経路ステップ
            $inspections['path_step_foreign_key'][$forms[$key]['col_foreign_key']]
                = null;

            if (array_key_exists('col_foreign_key', $forms[$key]['path'])) {
                $inspections['path_foreign_key'][$forms[$key]['col_foreign_key']]
                    = $forms[$key]['path']['col_foreign_key'];

                //経路ステップ
                if (array_key_exists('path_steps', $forms[$key]['path'])) {
                    foreach (
                        array_keys($forms[$key]['path']['path_steps']) as
                        $path_steps_key
                    ) {
                        $inspections['path_step_foreign_key'][$forms[$key]['col_foreign_key']][]
                            = $forms[$key]['path']['path_steps'][$path_steps_key]['col_role'];
                    }
                    $inspections['path_step_foreign_key'][$forms[$key]['col_foreign_key']]
                        = implode('/',
                        $inspections['path_step_foreign_key'][$forms[$key]['col_foreign_key']]);
                }
            }

            //経路分岐情報
            $inspections['path_skip_item'][$forms[$key]['col_foreign_key']]
                = null;
            if (array_key_exists('path_skip', $forms[$key])
                && count($forms[$key]['path_skip']) > 0
            ) {
                $inspections['path_skip_item'][$forms[$key]['col_foreign_key']]
                    = $serial_number_map['item'][$forms[$key]['col_foreign_key']][$forms[$key]['path_skip']['item_serial_no']];
            }

            //経路分岐条件
            $inspections['path_conditions'][$forms[$key]['col_foreign_key']]
                = null;
            if (array_key_exists('path_conditions', $forms[$key])
                && count($forms[$key]['path_conditions']) > 0
            ) {
                foreach (
                    array_keys($forms[$key]['path_conditions']) as
                    $path_condition_key
                ) {
                    $inspections['path_conditions'][$forms[$key]['col_foreign_key']][]
                        = $forms[$key]['path_conditions'][$path_condition_key]['col_name'];
                }
                $inspections['path_conditions'][$forms[$key]['col_foreign_key']]
                    = implode('/',
                    $inspections['path_conditions'][$forms[$key]['col_foreign_key']]);
            }
        }

        //監査する
        require_once('workflow/inspection.csp');
        $inspection = GRN_Workflow_Form_Inspection::getInstance();
        if ($inspection->isEnabled() && isset($inspections)) {
            $message_type = 'form_import';

            $message_args['forms'] = $inspections['form_foreign_key'];
            $message_args['items']
                = $inspections['items_foreign_key'];
            $message_args['paths'] = $inspections['path_foreign_key'];
            $message_args['path_steps']
                = $inspections['path_step_foreign_key'];
            $message_args['path_skips'] = $inspections['path_skip_item'];
            $message_args['path_conditions'] = $inspections['path_conditions'];

            //Record Inspection
            $inspection->record($message_type, $message_args);
        }
    }

    //-- Export Functions -------------------------------

    /**
     * Export Path Condition Step into XML File
     *
     * @param  object $xml_writer               //XML Writer
     * @param  int    $path_condition_id        //Path Condition ID
     * @param  array  $path_condition_step      //Path Condition Step Information
     * @param  int    $path_type                //Path Type : private=1 / public=2
     * @param  array  $pathstep_id2serialno_map //Map to Translate PathStep ID into Serial Number
     *
     * @return bool
     * @access private
     */
    function _exportPathConditionStep(
        $xml_writer,
        & $path_condition_id,
        & $path_condition_step,
        & $path_type,
        & $pathstep_id2serialno_map
    ) {
        // Write
        $controller_util = $this->_getControllerUtil();

        $xml_writer->startElement('path_condition_step');                                                   // <path_condition_step>
        $controller_util->_writeAttribute($xml_writer, 'id',
            $path_condition_step['_id']);                  // Path Condition Step ID
        switch ($path_type) {
            case GRN_WORKFLOW_PRIVATE_PATH:
                $pathstep_serial_no
                    = $pathstep_id2serialno_map[$path_condition_step['col_path_step']];         // Path Step ID
                $controller_util->_writeAttribute($xml_writer,
                    'pathstep_serial_no',
                    $pathstep_serial_no);      // Path Step Serial No.
                break;
            case GRN_WORKFLOW_PUBLIC_PATH:
                $controller_util->_writeAttribute($xml_writer, 'pathstep_id',
                    $path_condition_step['col_path_step']); // Path Step ID
                break;
            default:
                require_once('workflow/error_code.csp');
                cb_throw_error(E_GRN_WRKF_INVALID_PATH_TYPE);
        }

        $xml_writer->endElement();                                                                          //</path_condition_step>
    }

    /**
     * Export Path Condition into XML File
     *
     * @param  object $xml_writer               //XML Writer
     * @param  array  $path_condition           //Path Condition Information
     * @param  int    $path_type                //Path Type : private=1 / public=2
     * @param  array  $pathstep_id2serialno_map //Map to Translate PathStep ID into Serial Number
     *
     * @access private
     */
    function _exportPathCondition(
        & $xml_writer,
        & $path_condition,
        & $path_type,
        & $pathstep_id2serialno_map
    ) {
        $controller_util = $this->_getControllerUtil();

        // Write Path Condition
        $xml_writer->startElement('path_condition');                                                      // <path_condition>

        $controller_util->_writeAttribute($xml_writer, 'id',
            $path_condition['_id']);                     // Path Condition ID
        $controller_util->_writeAttribute($xml_writer, 'list_index',
            $path_condition['col_list_index']);  // Path Condition ID
        $controller_util->_writeCDATAElement($xml_writer, 'name',
            $path_condition['col_name']);           // Name
        $controller_util->_writeRowElement($xml_writer, 'number',
            $path_condition['col_number']);         // Number
        $controller_util->_writeRowElement($xml_writer, 'operator',
            $path_condition['col_operator']);     // Operator
        $controller_util->_writeCDATAElement($xml_writer, 'option',
            $path_condition['col_option']);       // Option

        // Write Path Condition Steps
        $path_condition_id_list = [$path_condition['_id']];
        $path_condition_step_columns = [
            '_id'                => '_id',
            'col_path_condition' => 'col_path_condition',
            'col_path_step'      => 'col_path_step',
        ];

        $path_condition_step_logic
            = GRN_Workflow_PathConditionSteps::getInstance();
        $path_condition_steps
            = $path_condition_step_logic->getListByPathConditionId($path_condition_id_list,
            $path_condition_step_columns);

        if (is_array($path_condition_steps)
            && 0 < count($path_condition_steps)
        ) {
            $xml_writer->startElement('path_condition_steps');                                              // <path_condition_steps>

            foreach ($path_condition_steps as $path_condition_step) {
                // Write Path Condition Steps
                $this->_exportPathConditionStep($xml_writer,
                    $path_condition['_id'], $path_condition_step, $path_type,
                    $pathstep_id2serialno_map);
            }

            $xml_writer->endElement();                                                                      //</path_condition_steps>
        }

        $xml_writer->endElement();                                                                          //</path_condition>
    }

    /**
     * Export Path Conditions into XML File
     *
     * @param  object $xml_writer               //XML Writer
     * @param  int    $path_condition           //Path Condition
     * @param  int    $path_type                //Path Type : private=1 / public=2
     * @param  array  $pathstep_id2serialno_map //Map to Translate PathStep ID into Serial Number
     *
     * @access private
     */
    function _exportPathConditions(
        & $xml_writer,
        & $form_id,
        & $path_type,
        & $pathstep_id2serialno_map
    ) {
        //Get Path Conditions
        require_once('workflow/path_condition.csp');
        $path_condition_logic = GRN_Workflow_PathConditions::getInstance();
        $columns = [
            'tab_grn_workflow_pathcondition' => [
                '_id'            => '_id',
                'col_name'       => 'col_name',
                'col_number'     => 'col_number',
                'col_operator'   => 'col_operator',
                'col_option'     => 'col_option',
                'col_list_index' => 'col_list_index',
            ],
        ];
        $path_condition_list = $path_condition_logic->getList(null, $form_id,
            $columns);

        //Write Path Conditions
        if (is_array($path_condition_list) && 0 < count($path_condition_list)) {
            $xml_writer->startElement('path_conditions');                                       //<path_conditions>
            foreach ($path_condition_list as $path_condition) {
                $this->_exportPathCondition($xml_writer, $path_condition,
                    $path_type, $pathstep_id2serialno_map);
            }
            $xml_writer->endElement();                                                          //</path_conditions>
        }
    }

    /**
     * Export Path Skip into XML File
     *
     * @param  object $xml_writer           //XML Writer
     * @param  int    $form_id              //Form ID
     * @param  int    $path_type            //Path Type : private=1 / public=2
     * @param  array  $item_id2serialno_map //Map to Translate Item ID into Serial Number
     *
     * @access private
     */
    function _exportPathSkip(& $xml_writer, & $form_id, & $item_id2serialno_map)
    {
        //Get Path Skips
        require_once('workflow/path_skip.csp');
        $path_skips_logic = GRN_Workflow_PathSkips::getInstance();

        $columns = [
            'tab_grn_workflow_pathskip' => [
                '_id'      => '_id',
                'col_item' => 'col_item'
            ]
        ];

        $path_skip = $path_skips_logic->getByFormId($form_id, $columns);

        //Write Path Skip
        if (is_array($path_skip) && 0 < count($path_skip)) {
            $controller_util = $this->_getControllerUtil();

            $xml_writer->startElement('path_skip');                                                    // <path_skip>
            $controller_util->_writeAttribute($xml_writer, 'id',
                $path_skip['_id']);                   // Path Skip ID

            $xml_writer->startElement('item');                                                         // <item>
            $attributes = [];
            $attributes['serial_no']
                = $item_id2serialno_map[$path_skip['col_item']];                  // Item Serial Number
            $controller_util->_writeAttributes($xml_writer, $attributes);

            $xml_writer->endElement();                                                                 // </item>
            $xml_writer->endElement();                                                                 // </path_skip>
        }
    }

    /**
     * Export Change Access Information into XML File
     *
     * @param  object $xml_writer               //XML Writer
     * @param  int    $path_type                //Path Type (Public/Private)
     * @param  array  $item_id2serialno_map     //Item Map (ID <-> Serial No.)
     * @param  array  $pathstep_id2serialno_map //Path Step Map (ID <-> Serial No.)
     *
     * @access private
     */
    function _exportChangeAccess(
        & $xml_writer,
        & $change_access,
        & $path_type,
        & $item_id2serialno_map,
        & $pathstep_id2serialno_map
    ) {
        //Write
        $controller_util = $this->_getControllerUtil();

        $xml_writer->startElement('change_access');                                                     //<change_access>
        $controller_util->_writeAttribute($xml_writer, 'id',
            $change_access['_id']);                    //Change Access ID
        $item_serial_no = $item_id2serialno_map[$change_access['col_item']];
        $controller_util->_writeAttribute($xml_writer, 'item_serial_no',
            $item_serial_no);              //Item Serial Number

        $controller_util->_writeAttribute($xml_writer, 'view',
            $change_access['col_view']);
        $controller_util->_writeAttribute($xml_writer, 'edit',
            $change_access['col_edit']);

        switch ($path_type) {
            case GRN_WORKFLOW_PRIVATE_PATH:
                $pathstep_serial_no
                    = $pathstep_id2serialno_map[$change_access['col_path_step']];
                $controller_util->_writeAttribute($xml_writer,
                    'pathstep_serial_no',
                    $pathstep_serial_no);               // Path Step Serial No.
                break;
            case GRN_WORKFLOW_PUBLIC_PATH:
                $controller_util->_writeAttribute($xml_writer, 'path_step_id',
                    $change_access['col_path_step']); // Path Step ID
                break;
            default:
                require_once('workflow/error_code.csp');
                cb_throw_error(E_GRN_WRKF_INVALID_PATH_TYPE);
        }

        $xml_writer->endElement();                                                                          //</change_access>
    }

    /**
     * Export Change Access Information into XML File
     *
     * @param  object $xml_writer               //XML Writer
     * @param  int    $form_id                  //Form ID
     * @param  int    $path_type                //Path Type (Public/Private)
     * @param  array  $item_id2serialno_map     //Item Map (ID <-> Serial No.)
     * @param  array  $pathstep_id2serialno_map //Path Step Map (ID <-> Serial No.)
     *
     * @access private
     */
    function _exportChangeAccesses(
        & $xml_writer,
        & $form_id,
        & $path_type,
        & $item_id2serialno_map,
        & $pathstep_id2serialno_map
    ) {
        // Get Change Access List
        $change_access_columns = [
            'tab_grn_workflow_accesschangeform' => [
                '_id'           => '_id',
                'col_item'      => 'col_item',
                'col_path_step' => 'col_path_step',
                'col_edit'      => 'col_edit',
                'col_view'      => 'col_view',
            ],
        ];
        require_once('workflow/change_access.csp');
        $change_access_logic = GRN_Workflow_ChangeAccess::getInstance();
        $change_access_list = $change_access_logic->getListByFormId($form_id,
            $change_access_columns);

        if (is_array($change_access_list) && 0 < count($change_access_list)) {
            $controller_util = $this->_getControllerUtil();
            $xml_writer->startElement('change_accesses');                                     //<change_accesses>
            foreach ($change_access_list as $change_access) {
                $this->_exportChangeAccess($xml_writer, $change_access,
                    $path_type, $item_id2serialno_map,
                    $pathstep_id2serialno_map);
            }

            $xml_writer->endElement();                                                          //</change_accesses>
        }
    }

    /**
     * Export Path Step Information into XML File
     *
     * @param  object $xml_writer //XML Writer
     * @param  array  $path_step  //PathStep Information
     * @param  int    $serial_no  //Serial Number of PathStep
     *
     * @access private
     */
    function _exportPathStep(& $xml_writer, & $path_step, & $serial_no)
    {
        $controller_util = $this->_getControllerUtil();
        $xml_writer->startElement('path_step');                                                         // <path_step>
        $controller_util->_writeAttribute($xml_writer, 'id',
            $path_step['_id']);                        // Path Step ID
        $controller_util->_writeAttribute($xml_writer, 'serial_no',
            $serial_no);                        // Serial Number
        $controller_util->_writeAttribute($xml_writer, 'list_index',
            $path_step['col_list_index']);     // List Index

        switch ($path_step['col_type']) {
            case GRN_WORKFLOW_ACCEPTANCE:
                $controller_util->_writeAttribute($xml_writer, 'type',
                    'acceptance');                       // Type(Acceptance)
                switch ($path_step['col_acceptance_type']) {
                    case GRN_WORKFLOW_OPERATOR_AND:
                        $acceptance_type = 'and';
                        break;
                    case GRN_WORKFLOW_OPERATOR_OR:
                        $acceptance_type = 'or';
                        break;
                    default:
                        assert('FALSE');
                        break;
                }
                $controller_util->_writeAttribute($xml_writer,
                    'acceptance_type', $acceptance_type);
                break;
            case GRN_WORKFLOW_CIRCULAR:
                $controller_util->_writeAttribute($xml_writer, 'type',
                    'circular');                         // Type(Circular)
                break;
            default:
                assert('FALSE');
                break;
        }
        $controller_util->_writeAttribute($xml_writer, 'skip',
            $path_step['col_skip']);                 // Skip
        $controller_util->_writeAttribute($xml_writer, 'applicant',
            $path_step['col_applicant']);       // Applicant
        $controller_util->_writeAttribute($xml_writer, 'change_path',
            $path_step['col_change_path']);   // Change Path
        $controller_util->_writeAttribute($xml_writer, 'deny_change_path',
            $path_step['col_deny_change_path']);   // Change Path
        $controller_util->_writeCDATAElement($xml_writer, 'name',
            $path_step['col_role']);              // Role Name
        $controller_util->_writeCDATAElement($xml_writer, 'code',
            $path_step['col_code']);
        if ( ! $path_step['col_skip']) {
            $controller_util->_exportUsers($xml_writer,
                $path_step['users']);                           // Users
            $controller_util->_exportGroups($xml_writer,
                $path_step['groups']);                         // Groups
            $controller_util->_exportRoles($xml_writer,
                $path_step['roles']);                           // Roles
        }
        $xml_writer->endElement();                                                                      //</path_step>
    }

    /**
     * Export Path Steps Information into XML File
     *
     * @param  object $xml_writer //XML Writer
     * @param  int    $path_id    //Path ID
     *
     * @return array  $pathstep_id2serialno_map  //Path Step Map (ID <-> Serial No.)
     * @access private
     */
    function _exportPathSteps(& $xml_writer, & $path_id)
    {
        $logic = GRN_Workflow_PathSteps::getInstance();
        $columns = [
            '_id',
            'col_path',
            'col_type',
            'col_acceptance_type',
            'col_role',
            'col_code',
            'col_skip',
            'col_applicant',
            'col_deny_change_path',
            'col_change_path',
            'col_list_index'
        ];
        $path_steps = $logic->getList($path_id, null, null, $columns);
        if (is_array($path_steps) && 0 < count($path_steps)) {
            // Get Belonging Information
            $logic = GRN_Workflow_PathStepUsers::getInstance();
            $psids = array_keys($path_steps);
            $columns = [
                'tab_grn_workflow_pathstepuser' => ['col_path_step' => 'col_path_step'],
                'tab_cb_user'                   => [
                    '_id'             => '_id',
                    'col_foreign_key' => 'col_foreign_key'
                ]
            ];
            $users = $logic->getList($psids, $columns);

            $logic = GRN_Workflow_PathStepGroups::getInstance();
            $columns = [
                'tab_grn_workflow_pathstepgroup' => ['col_path_step' => 'col_path_step'],
                'tab_cb_group'                   => [
                    '_id'             => '_id',
                    'col_foreign_key' => 'col_foreign_key'
                ]
            ];
            $groups = $logic->getList($psids, $columns);

            $logic = GRN_Workflow_PathStepStaticRoles::getInstance();
            $columns = [
                'tab_grn_workflow_pathstepstaticrole' => [
                    'col_path_step' => 'col_path_step',
                    'col_chief'     => 'col_chief'
                ],
                'tab_cb_role'                         => [
                    '_id'             => '_id',
                    'col_foreign_key' => 'col_foreign_key'
                ]
            ];
            $roles = $logic->getList($psids, $columns);

            // Write Path Steps
            $xml_writer->startElement('path_steps');                                // <path_steps>

            $pathstep_id2serialno_map = [];
            $serial_no = 1;
            foreach ($path_steps as $path_step) {
                $path_step_id = $path_step['_id'];

                // Belong
                $path_step['users'] = [];
                if (array_key_exists($path_step_id, $users)) {
                    $path_step['users'] =& $users[$path_step_id];
                }
                $path_step['groups'] = [];
                if (array_key_exists($path_step_id, $groups)) {
                    $path_step['groups'] =& $groups[$path_step_id];
                }
                $path_step['roles'] = [];
                if (array_key_exists($path_step_id, $roles)) {
                    $path_step['roles'] =& $roles[$path_step_id];
                }

                // Write Path Step
                $this->_exportPathStep($xml_writer, $path_step,
                    $serial_no);        // Path Step

                $pathstep_id2serialno_map[$path_step_id] = $serial_no;
                $serial_no++;
            }
            $xml_writer->endElement();                                              // </path_steps>

            return $pathstep_id2serialno_map;
        }
    }

    /**
     * Export Path Information into XML File
     *
     * @param  object $xml_writer //XML Writer
     * @param  array  $path       //Path Information
     *
     * @return array  $pathstep_id2serialno_map //Path Step Map (ID <-> Serial No.)
     *                                            Private Path Only
     * @access private
     */
    function _exportPath($xml_writer, & $path)
    {
        // Write Path Information
        $controller_util = $this->_getControllerUtil();
        $pathstep_id2serialno_map = [];

        $xml_writer->startElement('path');                                                              //<path>
        $controller_util->_writeattribute($xml_writer, 'type',
            $path['col_type']);
        if (GRN_WORKFLOW_PRIVATE_PATH == $path['col_type']) {
            // Private Path
            // -- Path Foreign Key, all Path Info, all Path Step Info
            $controller_util->_writeattribute($xml_writer, 'skip',
                $path['col_skip']);                  // Skip
            $controller_util->_writeattribute($xml_writer, 'richeditor',
                $path['col_richeditor']);      // RichEditor
            $controller_util->_writeattribute($xml_writer, 'icon',
                $path['col_icon']);                  // Icon
            $controller_util->_writeCDATAElement($xml_writer, 'name',
                $path['col_name']);               // Name
            $controller_util->_writeCDATAElement($xml_writer, 'foreign_key',
                $path['col_foreign_key']); // Foreign Key
            $controller_util->_writeCDATAElement($xml_writer, 'admin_memo',
                $path['col_admin_memo']);   // Admin Memo
            $controller_util->_writeCDATAElement($xml_writer, 'description',
                $path['col_description']); // Description

            // Path Step
            $path_id = $path['_id'];
            $pathstep_id2serialno_map = $this->_exportPathSteps($xml_writer,
                $path_id);                 // Path Step
        } elseif (GRN_WORKFLOW_PUBLIC_PATH == $path['col_type']) {
            // Public Path
            // -- Path Foreign Key
            $controller_util->_writeCDATAElement($xml_writer, 'foreign_key',
                $path['col_foreign_key']); // Foreign Key
        }

        $xml_writer->endElement();                                                                      //</path>

        return $pathstep_id2serialno_map;
    }

    /**
     * Export Item Settings into XML File
     *
     * @param  object $xml_writer           //XML Writer
     * @param  array  $item                 //Item Information
     * @param  array  $item_id2serialno_map //Item Map (ID => Serial No.)
     *
     * @access private
     */
    function _exportItemSettings(
        & $xml_writer,
        & $item,
        & $item_id2serialno_map
    ) {
        //Translate Item ID of Settings into Item Serial No.
        $item_settings = $item['i_col_settings'];
        $treated_item_settings = null;
        if (0 < strlen($item_settings)) {
            $item_setting_list = cb_unserialize($item_settings,
                ["allowed_classes" => false]);

            require_once('workflow/item_resources.csp');
            $foreign_key = $item['i_col_foreign_key'];
            $item_util
                = grn_workflow_get_item_util($foreign_key);
            $treated_item_setting_list
                = $item_util->exportSettings($item_setting_list,
                $item_id2serialno_map);

            // Write Settings
            $controller_util = $this->_getControllerUtil();
            $treated_item_settings = serialize($treated_item_setting_list);
            $controller_util->_writeCDATAElement($xml_writer, 'settings',
                $treated_item_settings);             // Serilaized Settings
        }
    }

    /**
     * Export Item Information into XML File
     *
     * @param  object $xml_writer              //XML Writer
     * @param  array  $item                    //Item Information
     * @param  int    $serial_no               //Item Serial Number of Item
     * @param  array  $item_id2serialno_map    //Item Map (ID <-> Serial Number)
     *                                         Use this list in case that Calc_Numeric Item refer to
     *                                         already-mentioned Items
     *
     * @access private
     */
    function _exportItem(
        & $xml_writer,
        & $item,
        & $serial_no,
        & $item_id2serialno_map
    ) {
        $controller_util = $this->_getControllerUtil();

        $xml_writer->startElement('item');                                                                          // <item>
        $controller_util->_writeAttribute($xml_writer, 'id',
            $item['i__id']);                                       // Item ID
        $controller_util->_writeAttribute($xml_writer, 'serial_no',
            $serial_no);                                    // Serial Number

        $controller_util->_writeAttribute($xml_writer, 'attach_file',
            $item['i_col_attach_file']);                  // Applicant's Access Right to Attach File at Time to Apply
        $controller_util->_writeAttribute($xml_writer, 'attach_file_view',
            $item['i_col_attach_file_view']);        // Applicant's Access Right to Attach File at Time to Apply
        $controller_util->_writeAttribute($xml_writer, 'br',
            $item['i_col_br']);                                    // Begin a New Line or Not
        $controller_util->_writeAttribute($xml_writer, 'description_editor',
            $item['i_col_description_editor']);    // Description Editor Type
        $controller_util->_writeAttribute($xml_writer, 'description_type',
            $item['i_col_description_type']);        // Description Type to Display
        $controller_util->_writeAttribute($xml_writer, 'option_string_type',
            $item['i_col_option_string_type']);    // Option String Display Type
        $controller_util->_writeAttribute($xml_writer, 'required',
            $item['i_col_required']);                        // Required
        $controller_util->_writeAttribute($xml_writer, 'type',
            $item['i_col_type']);                                // Type
        $controller_util->_writeAttribute($xml_writer, 'list_index',
            $item['i_col_list_index']);                    // List Index
        $controller_util->_writeAttribute($xml_writer, 'export_data',
            $item['i_col_export_data']);                  // Export Data

        $controller_util->_writeCDATAElement($xml_writer, 'description',
            $item['i_col_description']);               // Description
        $controller_util->_writeCDATAElement($xml_writer, 'display_name',
            $item['i_col_display_name']);             // Display Name

        $controller_util->_writeCDATAElement($xml_writer, 'code',
            $item['i_col_code']);                           // Item code

        $controller_util->_writeCDATAElement($xml_writer, 'foreign_key',
            $item['i_col_foreign_key']);               // Foreign Key
        $controller_util->_writeCDATAElement($xml_writer, 'option_string',
            $item['i_col_option_string']);           // Option String
        $controller_util->_writeCDATAElement($xml_writer, 'separator',
            $item['i_col_separator']);                   // Separator

        $this->_exportItemSettings($xml_writer, $item,
            $item_id2serialno_map);                                      // Settings

        $xml_writer->endElement();                                                                                  // </item>
    }

    /**
     * Export Items Information into XML File
     *
     * @param  object $xml_writer //XML Writer
     * @param  array  $item_list  //Items
     *
     * @return array  $item_id2serialno_map  //Item Map (ID <-> Serial No.)
     * @access private
     */
    function _exportItems(& $xml_writer, & $item_list)
    {
        //Write Items
        $xml_writer->startElement('items');                     //<items>

        $item_id2serialno_map = [];
        $serial_no = 1;
        foreach ($item_list as $item) {
            //Write Item
            $this->_exportItem($xml_writer, $item, $serial_no,
                $item_id2serialno_map);

            //Create ID -> Serial No. Map
            $item_id = $item['i__id'];
            $item_id2serialno_map[$item_id] = $serial_no;
            $serial_no++;
        }
        $xml_writer->endElement();                              //</items>

        return $item_id2serialno_map;
    }

    /**
     * Export Form Information into XML File
     *
     * @param  object $xml_writer //XML Writer
     * @param  array  $form       //Form Information
     *
     * @access private
     */
    function _exportForm($xml_writer, & $form)
    {
        //Write Form
        $controller_util = $this->_getControllerUtil();

        $xml_writer->startElement('form');                                                              // <form>

        $controller_util->_writeattribute($xml_writer, 'active',
            $form['f_col_active']);              // Form Active
        $controller_util->_writeattribute($xml_writer, 'list_index',
            $form['f_col_list_index']);      // Form List Index
        $controller_util->_writeattribute($xml_writer, 'auto_export',
            $form['f_col_auto_export']);  // Form Auto Export
        $controller_util->_writeattribute($xml_writer, 'login_name_export',
            $form['f_col_login_name_export']);  // Form Login Name Export
        $controller_util->_writeattribute($xml_writer, 'export_top_line',
            $form['f_col_export_top_line']);  // Form Export Top Line
        $controller_util->_writeCDATAElement($xml_writer, 'name',
            $form['f_col_name']);        // Form Name
        $controller_util->_writeCDATAElement($xml_writer, 'foreign_key',
            $form['f_col_foreign_key']); // Form Foreign Key
        $controller_util->_writeCDATAElement($xml_writer, 'memo',
            $form['f_col_memo']);        // Form Memo
        $controller_util->_writeCDATAElement($xml_writer, 'admin_memo',
            $form['f_col_admin_memo']);  // Form Admin Memo
        $controller_util->_writeCDATAElement($xml_writer, 'export_folder',
            $form['f_col_export_folder']);  // Form Export Folder

        // Get Form ID
        $form_id = $form['f__id'];

        // --Icon
        $xml_writer->startElement('icon');                                                                                  // <icon>
        $controller_util->_writeattribute($xml_writer, 'id',
            is_null($form['f_col_icon_id']) ? 0
                : $form['f_col_icon_id']); // Icon ID
        $controller_util->_writeRowElement($xml_writer, 'type',
            $form['f_col_icon_type']);                                  // Icon Type
        $controller_util->_writeCDATAElement($xml_writer, 'url',
            $form['f_col_icon_url']);                                  // Icon URL
        $xml_writer->endElement();                                                                                          // </icon>

        // --Serial
        $xml_writer->startElement('serial');                                                            // <serial>
        $controller_util->_writeRowElement($xml_writer, 'type',
            $form['f_col_serial_type']);           // Serial Type
        $controller_util->_writeCDATAElement($xml_writer, 'format',
            $form['f_col_serial_format']);     // Serial Format
        $xml_writer->endElement();                                                                      // </serial>

        // --Approved Serial
        $xml_writer->startElement('approved_serial');
        $controller_util->_writeRowElement($xml_writer, 'type',
            is_null($form['f_col_approved_serial_type']) ? 2
                : $form['f_col_approved_serial_type']);
        $controller_util->_writeCDATAElement($xml_writer, 'format',
            $form['f_col_approved_serial_format']);
        $xml_writer->endElement();

        // --Items
        $item_list = $form['items'];
        $item_id2serialno_map = [];

        if (0 < count($item_list)) {
            $item_id2serialno_map = $this->_exportItems($xml_writer,
                $item_list);
        }

        // --Path
        $path_id = $form['f_col_path'];
        $path = [];
        $pathstep_id2serialno_map = [];
        if ($path_id) {
            // Get Path
            require_once('workflow/path.csp');
            $path_logic = GRN_Workflow_Paths::getInstance();
            $columns = [
                '_id',
                'col_name',
                'col_foreign_key',
                'col_type',
                'col_skip',
                'col_admin_memo',
                'col_description',
                'col_richeditor',
                'col_icon'
            ];
            $path = $path_logic->get($path_id, $columns);
            $pathstep_id2serialno_map = $this->_exportPath($xml_writer, $path);
        }

        // Get Path Type
        array_key_exists('col_type', $path) ? $path_type = $path['col_type']
            : $path_type = null;

        // --Change Access
        $this->_exportChangeAccesses($xml_writer, $form_id, $path_type,
            $item_id2serialno_map, $pathstep_id2serialno_map);

        // --Path Skip
        $this->_exportPathSkip($xml_writer, $form_id, $item_id2serialno_map);

        // --Path Conditions and Path Condition Steps
        $this->_exportPathConditions($xml_writer, $form_id, $path_type,
            $pathstep_id2serialno_map);

        $xml_writer->endElement();                                                                          // </form>
    }

    /**
     * Export Forms Information into XML File
     *
     * @param  object $xml_writer  //XML Writer
     * @param  int    $category_id //Category ID
     *
     * @access private
     */
    function _exportForms(& $xml_writer, & $category_id)
    {
        // Get Form List that have NO Deleted Flag.
        $option = [
            'condition' => [
                0 => [
                    'column'   => 'f.col_deleted',
                    'value'    => '0',
                    'operator' => '='
                ],
                1 => [
                    'column'   => 'f.col_type',
                    'value'    => '0',
                    'operator' => '='
                ],
            ],
        ];

        require_once('workflow/form_logic_base.csp');
        $form_logic_base = GRN_Workflow_Form_Logic_Base::getInstance();
        $form_list = $form_logic_base->getListEx($category_id, [],
            $option, $refresh = true);

        // Write Forms
        $xml_writer->startElement('forms');                     // <forms>
        foreach ($form_list as $form) {
            $this->_exportForm($xml_writer, $form);
        }

        $xml_writer->endElement();                              // </forms>
    }

    /**
     * Export Forms Information into XML File
     *
     * @param  int    $category_id //Category ID to Make a Short List of Form
     * @param  string $file_name   //File Name to Write Data
     */
    function export($category_id, $file_name)
    {
        //Open XML Document
        $xml_writer = new XMLWriter();
        $xml_writer->openUri($file_name);
        $xml_writer->setIndentString(' ');
        $xml_writer->setIndent(true);
        $xml_writer->startDocument('1.0', 'UTF-8', 'yes');

        //Write
        $this->_exportForms($xml_writer, $category_id);

        //End XML Document
        $xml_writer->endDocument();
        $xml_writer->flush();
    }
}

/**
 *  Petition Controller Utility Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_Petition_Controller_Utility
    extends GRN_Workflow_Controller_Utility_Base
{
    /** Petition Logic Instance **/
    var $_petition_logic_base = null;

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
        //Get Logic Base Instance
        require_once('workflow/petition_logic_base.csp');
        $logic_base = GRN_Workflow_Petition_Logic_Base::getInstance();

        //Initialize Parent Class
        parent::__construct(GRN_WORKFLOW_TABLE_PETITION, $logic_base);
    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_Petition_Controller_Utility $instance                  //Instance of GRN_Workflow_Petition_Controller_Utility
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_Petition_Controller_Utility();
        }

        return $_instance;
    }

    /**
     * Get Petition View(with Extra Information)
     *
     * @param  array $petition        //Petition (with Extra Information)
     * @param  array $translation_map //Model <=> View Translation Map
     *
     * @return array  $petition_for_view        //Item Data for View
     */
    function _getViewEx($petition, $translation_map)
    {
        $petition_for_view = [];

        //Set Teble Name
        $petition_for_view['table'] = $this->_table_name;

        //Create Parameter Translation for Form
        foreach ($translation_map as $view => $model) {
            if (strpos($model, 'petition_') !== 0) {
                continue;
            }

            $model = mb_ereg_replace('^petition_', 'p_col_', $model);
            $model = mb_ereg_replace('^p_col_id', 'p__id', $model);

            switch ($model) {
                case 'p__id':
                    $petition_for_view[$view] = $petition['p__id'];
                    break;
                case 'p_col_creator':
                case 'p_col_modifier':
                    //Get User ID
                    $uid = $petition[$model];
                    if ($uid) {
                        $petition_for_view[$view] = $uid;
                    }
                    break;
                case 'p_col_creator_name':
                case 'p_col_modifier_name':
                    //Get User ID
                    $model = str_replace('_name', '', $model);
                    $uid = $petition[$model];

                    //Get User Object
                    global $G_container_base;
                    $grn_uum = $G_container_base->getInstance('uum');
                    $user = $grn_uum->getUserInfo($uid,
                        [GRN_WORKFLOW_COLUMN_DISPLAY_NAME]);
                    if ($user) {
                        $petition_for_view[$view]
                            = $user[GRN_WORKFLOW_COLUMN_DISPLAY_NAME];
                    }
                    break;
                case 'p_col_ctime':
                case 'p_col_mtime':
                    $time = $petition[$model];
                    $petition_for_view[$view] = new CB_TimeStamp();
                    $petition_for_view[$view]->unix_ts = $time;
                    break;
                default:
                    $petition_for_view[$view] = $petition[$model];
                    break;
            }
        }

        //Create Paremeter Translation for ItemData and Item Data File
        $item_data_util
            = GRN_Workflow_Itemdata_Controller_Utility::getInstance();
        foreach (array_keys($petition['item_data']) as $item_data_id) {
            $item_data =& $petition['item_data'][$item_data_id];
            $petition_for_view['item_data'][$item_data_id]
                = $item_data_util->_getViewEx($item_data,
                $translation_map);
        }

        return $petition_for_view;
    }

    /**
     * Get Petition View
     *
     * @param  int   $petition_id     //Petition ID
     * @param  array $translation_map //Model <=> View Translation Map
     * @param  int   $form_id         //Form ID
     * @param  mixed $option          //Option (array('list'=>array('offset'=>'', 'limit'=>''), 'sort'=>array('column'=>'', 'order'=>''), 'condition'=>array('column'=>'', 'value'=>''))
     * @param  bool  $refresh         //Refresh Flag
     * @param  int   $lock_mode       //Lock Mode
     *
     * @return array  $petition_view             //Petition for View
     */
    function getView(
        $petition_id,
        $translation_map,
        $form_id = null,
        $option = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Create Column List
        $column_list = $this->createColumnlist($translation_map);

        //Get Petition
        $petition_logic_base = $this->getLogicBase();
        if (is_null($form_id)) {
            $petition = $petition_logic_base->getDirect($petition_id,
                $column_list, $option, $lock_mode);
        } else {
            $petition =& $petition_logic_base->get($petition_id, $form_id,
                $column_list, $option, $refresh, $lock_mode);
        }

        //Get Petition View
        $petition_for_view = $this->_getView($petition, $translation_map);

        //Set Petition Subject Name
        $name_key = 'name';
        foreach ($translation_map as $key => $value) {
            if ($value == 'name') {
                $name_key = $key;
            }
        }
        $subject = $this->getSubject($petition_id);
        if (strlen($subject) > 0) {
            $petition_for_view[$name_key] = $subject;
        }

        //Return Petition View
        return $petition_for_view;
    }

    /**
     * Get Petition List View
     *
     * @param  array $translation_map //Model <=> View Translation Map
     * @param  int   $form_id         //Category ID
     * @param  mixed $option          //Option (array('list'=>array('offset'=>'', 'limit'=>''), 'sort'=>array('column'=>'', 'order'=>''), 'condition'=>array('column'=>'', 'value'=>''))
     * @param  bool  $refresh         //Refresh Flag
     * @param  int   $lock_mode       //Lock Mode
     *
     * @return array  $petition_view             //Petition for View
     */
    function getListView(
        $translation_map,
        $form_id = null,
        $option = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $petition_list_for_view = [];

        //Create Column List
        $column_list = $this->createColumnlist($translation_map);

        //Get Petition List
        $petition_list = [];
        $petition_logic_base = $this->getLogicBase();
        $petition_list =& $petition_logic_base->getList($form_id,
            $column_list, $option, $refresh, $lock_mode);

        $petition_ids = [];

        //Create Parameter Translation for Petition List
        foreach (array_keys($petition_list) as $petition_id) {
            $petition_list_for_view[$petition_id]
                = $this->_getView($petition_list[$petition_id],
                $translation_map);
            $petition_ids[] = $petition_id;
        }

        //Set Petition Subject Name
        $subject_list_for_view =& $this->getSubjectList($petition_ids);
        $name_key = 'name';
        foreach ($translation_map as $key => $value) {
            if ($value == 'name') {
                $name_key = $key;
            }
        }
        foreach (array_keys($petition_list) as $petition_id) {
            if (strlen($subject_list_for_view[$petition_id]) > 0) {
                $petition_list_for_view[$petition_id][$name_key]
                    = $subject_list_for_view[$petition_id];
            }
        }

        //Return Petition List View
        return $petition_list_for_view;
    }

    /**
     * Get Petition List View (with Extra Information)
     *
     * @param  array $translation_map //Model <=> View Translation Map
     * @param  int   $form_id         //Category ID
     * @param  mixed $option          //Option (array('list'=>array('offset'=>'', 'limit'=>''), 'sort'=>array('column'=>'', 'order'=>''), 'condition'=>array('column'=>'', 'value'=>''))
     * @param  bool  $refresh         //Refresh Flag
     * @param  int   $lock_mode       //Lock Mode
     *
     * @return array  $petition_view             //Petition for View
     */
    function getListViewEx(
        $translation_map,
        $form_id = null,
        $option = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $petition_list_for_view = [];

        //Create Column List
        $petition_logic_base = $this->getLogicBase();
        $petition_column_list
            = $petition_logic_base->getColumnList(GRN_WORKFLOW_TABLE_PETITION);
        $item_data_column_list
            = $petition_logic_base->getColumnList(GRN_WORKFLOW_TABLE_ITEMDATA);
        $item_data_file_column_list
            = $petition_logic_base->getColumnList(GRN_WORKFLOW_TABLE_ITEMDATAFILE);
        $column_list = array_merge($petition_column_list,
            $item_data_column_list, $item_data_file_column_list);
        foreach (array_keys($column_list) as $key) {
            $column_name = explode(' ', $column_list[$key]);
            $column_name = str_replace('col_', '', $column_name[1]);
            $column_name = str_replace('p_', 'petition_', $column_name);
            $column_name = str_replace('d_', 'itemdata_', $column_name);
            $column_name = str_replace('f_', 'itemdatafile_', $column_name);
            $column_name = str_replace('__', '_', $column_name);
            if ( ! in_array($column_name, $translation_map)
                 && $column_name != 'petition_id'
                 && $column_name != 'itemdata_id'
                 && $column_name != 'itemdatafile_id'
            ) {
                unset($column_list[$key]);
            }
        }

        //Get Petition List
        $petition_list = [];
        $petition_list =& $petition_logic_base->getListEx($form_id,
            $column_list, $option, $refresh, $lock_mode);

        //Create Parameter Translation for Petition List
        foreach (array_keys($petition_list) as $petition_id) {
            $petition_list_for_view[$petition_id]
                = $this->_getViewEx($petition_list[$petition_id],
                $translation_map);
        }

        //Return Petition List View
        return $petition_list_for_view;
    }

    /**
     * Get Status Display Name
     *
     * @param  string $status   //Status
     * @param  string $inLocale //Use Locale(null or If omitted the user's locale)
     *
     * @return string            //Status Display Name
     * @access private
     */
    private function getStatusDisplay($status, $inLocale = null)
    {
        $status_display = null;
        switch ($status) {
            case GRN_WORKFLOW_STATUS_UNPROCESSING:      //未処理
            case GRN_WORKFLOW_STATUS_IN_PROCESS:        //進行中
            case GRN_WORKFLOW_STATUS_REMAND:            //差し戻し
                $status_display = cb_msg(GRN_WORKFLOW_MODULE_ID,
                    'view_status_0', null, $inLocale); //進行中 ← 未処理,進行中,差し戻し
                break;
            case GRN_WORKFLOW_STATUS_ACCEPTANCE:        //承認
                $status_display = cb_msg(GRN_WORKFLOW_MODULE_ID,
                    'view_status_1', null, $inLocale); //承認
                break;
            case GRN_WORKFLOW_STATUS_REJECTION:         //却下
                $status_display = cb_msg(GRN_WORKFLOW_MODULE_ID,
                    'view_status_2', null, $inLocale); //却下
                break;
            case GRN_WORKFLOW_STATUS_IN_PROCESS_CANCEL: //取り消し
                $status_display = cb_msg(GRN_WORKFLOW_MODULE_ID,
                    'view_status_3', null, $inLocale); //取り消し
                break;
            case GRN_WORKFLOW_STATUS_FINISHED:          //完了
                $status_display = cb_msg(GRN_WORKFLOW_MODULE_ID,
                    'view_status_4', null, $inLocale); //完了
                break;
            default:
                $status_display = $status . ':Invalid Status ID'; // ここには来ないはず
                break;
        }

        return $status_display;
    }

    /**
     * Export Item Name
     *
     * @param  object $csv_writer //CSV Writer
     */
    private function _exportItemName(
        & $csv_writer,
        $inItemDataArray,
        $login_name_export = false,
        $isSingle = false,
        $petitionId = null,
        $inLocale = null
    ) {
        $top_line = [];
        $top_line[] = cb_msg('grn.workflow.system', 'petition_csv_no', null,
            $inLocale);                    //'番号',
        $top_line[] = cb_msg('grn.workflow.system', 'petition_csv_creator',
            null, $inLocale);               //'申請者名',
        if ($login_name_export == true) {
            $top_line[] = cb_msg('grn.workflow.system',
                'petition_csv_creator_login_name', null,
                $inLocale);    //'申請者ログイン名',
        }
        $top_line[] = cb_msg('grn.workflow.system', 'petition_csv_creat_date',
            null, $inLocale);            //'申請日時',
        $top_line[] = cb_msg('grn.workflow.system', 'petition_csv_form_name',
            null, $inLocale);             //'申請フォーム名',
        if ($isSingle) {
            $top_line[] = cb_msg('grn.workflow.system',
                'petition_csv_item_information', null,
                $inLocale);      //'項目に関する記載の開始列と終了列',
            $top_line[] = cb_msg('grn.workflow.system',
                'petition_csv_route_information', null,
                $inLocale);     //'経路に関する記載の開始列',
        }
        $top_line[] = cb_msg('grn.workflow.system', 'petition_csv_subject',
            null, $inLocale);               //'標題',
        $top_line[] = cb_msg('grn.workflow.system', 'petition_csv_status', null,
            $inLocale);                //'状況',


        //出力対象項目の数だけヘッダを出力
        if (is_array($inItemDataArray)) {
            $itemCount = 1;
            foreach ($inItemDataArray as $kye => $value) {
                $top_line[] = cb_msg('grn.workflow.system',
                        'petition_csv_item_name', null, $inLocale)
                              . $itemCount;    //'項目名n',
                $top_line[] = cb_msg('grn.workflow.system',
                        'petition_csv_item_value', null, $inLocale)
                              . $itemCount;   //'項目値n',
                $itemCount = $itemCount + 1;
            }
        }

        //出力経路及び、経路に設定されたユーザー数だけヘッダを出力(単一のみ。複数の場合、フロー毎に経路や経路に設定したユーザー数が異なるためヘッダをひとつに決定出来ない。そのため固定で経路1の1ユーザーだけ出力している)
        if ($isSingle) {
            $routeInfo = [];      //要素数：経路数　要素：pathLine要素における経路開始位置
            $routePathData = $this->_exportPathData($petitionId, $routeInfo,
                $inLocale, $isSingle);

            //経路毎の経路情報列数を計算する
            $startPositionArray = [];
            $countArray = [];
            $maxRoutePathDataCount = count($routePathData);
            foreach ($routeInfo as $routeNum => $routePathDataStartPositionNum) {
                $startPositionArray[] = $routePathDataStartPositionNum;
                $countArray[] = $maxRoutePathDataCount
                                - $routePathDataStartPositionNum;  //毎回　開始位置から末尾までのカウントをデフォルト値としてセット（最後の要素のためにセットしている）

                if ($routeNum != 0) {
                    $previousRoute = $routeNum - 1;
                    $previousRouteDataCount = $routePathDataStartPositionNum
                                              - $startPositionArray[$previousRoute];
                    $countArray[$previousRoute]
                        = $previousRouteDataCount;                         //実際の末尾までのカウントをセット
                }
            }

            //経路毎の経路情報列ヘッダを出力する
            foreach ($countArray as $index => $count) {
                $routeNo = $index + 1;
                $top_line[] = cb_msg('grn.workflow.system', 'petition_csv_path',
                        null, $inLocale) . $routeNo
                              . cb_msg('grn.workflow.system',
                        'petition_csv_colon', null, $inLocale)
                              . cb_msg('grn.workflow.system',
                        'petition_csv_pathstep_name', null,
                        $inLocale);      //'経路n：経路ステップ名',

                $loopCount = ($count - 1) / 4;     //ユーザー情報は4列で1セットのため

                for ($i = 0; $i < $loopCount; $i++) {
                    $userNo = $i + 1;

                    $top_line[] = cb_msg('grn.workflow.system',
                            'petition_csv_path', null, $inLocale) . $routeNo
                                  . cb_msg('grn.workflow.system',
                            'petition_csv_colon', null, $inLocale)
                                  . cb_msg('grn.workflow.system',
                            'petition_csv_user_name', null, $inLocale)
                                  . $userNo;   //'経路n：ユーザー名n',
                    $top_line[] = cb_msg('grn.workflow.system',
                            'petition_csv_path', null, $inLocale) . $routeNo
                                  . cb_msg('grn.workflow.system',
                            'petition_csv_colon', null, $inLocale)
                                  . cb_msg('grn.workflow.system',
                            'petition_csv_result', null,
                            $inLocale);                //'経路n：結果',
                    $top_line[] = cb_msg('grn.workflow.system',
                            'petition_csv_path', null, $inLocale) . $routeNo
                                  . cb_msg('grn.workflow.system',
                            'petition_csv_colon', null, $inLocale)
                                  . cb_msg('grn.workflow.system',
                            'petition_csv_comment', null,
                            $inLocale);               //'経路n：コメント',
                    $top_line[] = cb_msg('grn.workflow.system',
                            'petition_csv_path', null, $inLocale) . $routeNo
                                  . cb_msg('grn.workflow.system',
                            'petition_csv_colon', null, $inLocale)
                                  . cb_msg('grn.workflow.system',
                            'petition_csv_date', null,
                            $inLocale);                  //'経路n：処理日時',
                }
            }
        } else {
            $top_line[] = cb_msg('grn.workflow.system',
                'petition_csv_pathstep1_name', null,
                $inLocale);      //'経路1：経路ステップ名
            $top_line[] = cb_msg('grn.workflow.system',
                'petition_csv_pathstep1_user1', null,
                $inLocale);     //'経路1：ユーザー名1',
            $top_line[] = cb_msg('grn.workflow.system',
                'petition_csv_pathstep1_result1', null,
                $inLocale);   //'経路1：結果',
            $top_line[] = cb_msg('grn.workflow.system',
                'petition_csv_pathstep1_comment1', null,
                $inLocale);  //'経路1：コメント',
            $top_line[] = cb_msg('grn.workflow.system',
                'petition_csv_pathstep1_date1', null,
                $inLocale);     //'経路1：処理日時',
        }

        $csv_writer->writeLine($top_line);
    }

    /**
     * Get Export Custome Item Name
     *
     * @param  array  $item_list //Item List
     * @parama array      $export_list         //Export Item List
     * @param  string $inLocale  //Use Locale(null or If omitted the user's locale)
     *
     * @return array                           //Export Custome Item Name
     * @access private
     */
    private function getExportCustomItemName(
        $item_list,
        $export_list,
        $inLocale = null
    ) {
        $top_line = [];
        foreach ($export_list as $key => $value) {
            switch ($key) {
                // カスタマイズ項目
                case 'items_data':
                    if ( ! is_array($value) || count($value) == 0) {
                        break;
                    }
                    foreach ($value as $item_value) {
                        foreach ($item_list as $petition_item_value) {
                            if ($item_value == $petition_item_value['iid']) {
                                $top_line[]
                                    = $petition_item_value['display_name'];
                                break;
                            }
                        }
                    }
                    break;
                case 'path_step':
                    $top_line[] = cb_msg('grn.workflow.system',
                        'petition_csv_pathstep1_name', null,
                        $inLocale);      //'経路1：経路ステップ名
                    $top_line[] = cb_msg('grn.workflow.system',
                        'petition_csv_pathstep1_user1', null,
                        $inLocale);     //'経路1：ユーザー名1',
                    $top_line[] = cb_msg('grn.workflow.system',
                        'petition_csv_pathstep1_result1', null,
                        $inLocale);   //'経路1：結果',
                    $top_line[] = cb_msg('grn.workflow.system',
                        'petition_csv_pathstep1_comment1', null,
                        $inLocale);  //'経路1：コメント',
                    $top_line[] = cb_msg('grn.workflow.system',
                        'petition_csv_pathstep1_date1', null,
                        $inLocale);     //'経路1：処理日時',
                    break;
                default:
                    if (strlen($value) > 0) {
                        $top_line[] = cb_msg('grn.workflow.system',
                            'petition_csv_' . $value, null, $inLocale);
                    }
                    break;
            }
        }

        return $top_line;
    }

    /**
     * Export Custome Item Name
     *
     * @param  object $csv_writer //CSV Writer
     * @param  array  $item_list  //Item List
     * @parama array      $export_list         //Export Item List
     * @param  string $inLocale   //Use Locale(null or If omitted the user's locale)
     */
    private function _exportCustomItemName(
        & $csv_writer,
        & $item_list,
        & $export_list,
        $inLocale = null
    ) {
        if ( ! is_array($export_list) || count($export_list) == 0) {
            return;
        }

        $top_line =& $this->getExportCustomItemName($item_list, $export_list,
            $inLocale);
        $csv_writer->writeLine($top_line);
    }

    /**
     * Export Path Data
     *
     * @return array         //CSV Line
     * @access private
     */
    private function _exportPathData(
        $petition_id,
        & $path_info,
        $inLocale,
        $isSingle = false
    ) {
        $line = [];

        // Get Path Step Data
        require_once('workflow/path_data.csp');
        $path_step_data_logic = GRN_Workflow_PathStepDatas::getInstance();
        $path_step_columns = [
            '_id'
            ,
            GRN_WORKFLOW_COLUMN_ACTIVATE
            ,
            GRN_WORKFLOW_COLUMN_ROLE
        ];
        $path_step_list
            = $path_step_data_logic->getListByPetitionId($petition_id,
            $path_step_columns);

        // Get Path Step Data User
        $path_step_data_user_logic
            = GRN_Workflow_PathStepDataUsers::getInstance();
        $path_step_user_columns = [
            'tab_grn_workflow_pathstepdatauser' => [
                '_id'                => 'pid',
                'col_path_step_data' => 'col_path_step_data',
                'col_user'           => 'col_user',
                'col_display_name'   => 'col_display_name',
                'col_foreign_key'    => 'col_foreign_key',
                'col_result'         => 'col_result',
                'col_ptime'          => 'col_ptime',
                'col_comment'        => 'col_comment'
            ],
            'tab_cb_user'                       => [
                '_id'              => '_id',
                'col_display_name' => 'col_current_display_name'
            ]
        ];
        $users
            = $path_step_data_user_logic->getListByPathStepDataIds(array_keys($path_step_list),
            $path_step_user_columns);
        $user_ids = [];
        $path_step_user_list = [];
        foreach ($users as $user) {
            $path_step_data_id = $user['col_path_step_data'];
            if ( ! array_key_exists($path_step_data_id, $path_step_user_list)) {
                $path_step_user_list[$path_step_data_id] = [];
            }
            $path_step_user_list[$path_step_data_id][] = $user;
            if ($user['col_user']
                && ! array_key_exists($user['col_user'], $user_ids)
            ) {
                $user_ids[$user['col_user']] = $user['col_user'];
            }
        }
        if ( ! $isSingle) {
            global $G_container_base;
            $uum = $G_container_base->getInstance('uum');
            $login = $uum->getLoginUser();

            require_once("grn/controller.csp");
            $users_info
                = GRN_ControllerUtil::getUserInfoToShowUserName($user_ids,
                $login);
        }
        foreach ($path_step_list as $key => $value) {
            $id = $value['_id'];
            if ( ! array_key_exists($id, $path_step_user_list)) {
                $path_step_user_list[$id][] = [
                    'pid'                      => null,
                    'col_path_step_data'       => $id,
                    'col_user'                 => null,
                    'col_display_name'         => null,
                    'col_foreign_key'          => null,
                    'col_result'               => null,
                    'col_ptime'                => null,
                    'col_comment'              => null,
                    '_id'                      => null,
                    'col_current_display_name' => null,
                ];
            }
        }

        // Write Path Step Data
        require_once('fw/date.csp');
        foreach ($path_step_list as $pathstepdata_id => $path_step_data) {
            if ( ! $path_step_data[GRN_WORKFLOW_COLUMN_ACTIVATE]) {
                // Not Write if Inactive Path Step Data
                continue;
            }

            // 経路情報（開始桁）を保存
            if (is_array($path_info)) {
                $path_info[] = count($line);
            }

            //経路ステップ名
            $line[] = $path_step_data[GRN_WORKFLOW_COLUMN_ROLE];

            if (array_key_exists($pathstepdata_id, $path_step_user_list)) {
                $path_step_data_user_list
                    = $path_step_user_list[$pathstepdata_id];
                if (is_array($path_step_data_user_list)
                    && 0 < count($path_step_data_user_list)
                ) {
                    foreach ($path_step_data_user_list as $path_step_data_user) {
                        //ユーザー名
                        //$line[] = $path_step_data_user[GRN_WORKFLOW_COLUMN_DISPLAY_NAME];
                        $user_name = '';
                        if ( ! $isSingle && $path_step_data_user['col_user']
                             && array_key_exists($path_step_data_user['col_user'],
                                $users_info)
                        ) {
                            $user_name = $uum->getNameOf($login,
                                $users_info[$path_step_data_user['col_user']],
                                true);

                        } elseif ( ! is_null($path_step_data_user[GRN_WORKFLOW_COLUMN_DISPLAY_NAME])) {
                            $user_name
                                = $path_step_data_user[GRN_WORKFLOW_COLUMN_DISPLAY_NAME];
                        }
                        $line[] = $user_name;

                        //結果
                        //$result = cb_msg( GRN_WORKFLOW_MODULE_ID, 'col_result_' . $path_step_data_user[GRN_WORKFLOW_COLUMN_RESULT] );
                        $result = '';
                        if ( ! is_null($path_step_data_user[GRN_WORKFLOW_COLUMN_RESULT])) {
                            $result = cb_msg(GRN_WORKFLOW_MODULE_ID,
                                'col_result_'
                                . $path_step_data_user[GRN_WORKFLOW_COLUMN_RESULT],
                                null, $inLocale);
                        }
                        $line[] = $result;

                        //コメント
                        $comment = '';
                        if ($path_step_data_user[GRN_WORKFLOW_COLUMN_COMMENT]) {
                            $comment_list
                                = cb_unserialize($path_step_data_user[GRN_WORKFLOW_COLUMN_COMMENT],
                                ["allowed_classes" => ["CB_TimeStamp"]]);

                            // Current Comment
                            if (array_key_exists('current', $comment_list)) {
                                $comment .= $comment_list['current'];
                            }

                            // Log of Comments
                            if (array_key_exists('log_total', $comment_list)
                                && 0 < $comment_list['log_total']
                            ) {
                                foreach ($comment_list['logs'] as $log) {
                                    if (0 < strlen($comment)) {
                                        $comment .= "\n\n";
                                    }

                                    // Date of Log
                                    $log_date = "";
                                    if (is_object($log['col_ptime'])) {
                                        $log_date
                                            = cb_timestamp_to_datetime($log['col_ptime']->unix_ts);
                                    } else {
                                        $log_date
                                            = cb_timestamp_to_datetime($log['col_ptime']['unix_ts']);
                                    }
                                    $log_date
                                        = cb_date_format(GRN_WORKFLOW_DATETIME_FORMAT,
                                        $log_date, null, null, $inLocale);
                                    $comment .= $log_date;

                                    // Result of Log
                                    $comment .= ' ' . cb_msg('grn.workflow',
                                            'col_result_' . $log['col_result'],
                                            null, $inLocale);
                                    if (GRN_WORKFLOW_RESULT_REMAND
                                        == $log['col_result']
                                    ) {
                                        if ('applicant'
                                            == $log['destination']
                                        ) {
                                            $comment .= cb_msg('grn.workflow',
                                                'applicant_bracket_arrow', null,
                                                $inLocale);
                                        } else {
                                            $comment .= cb_msg('grn.workflow',
                                                    'bracket_arrow_right', null,
                                                    $inLocale)
                                                        . "{$path_step_list[$log['destination']]['col_role']}"
                                                        . cb_msg('grn.workflow',
                                                    'closed_parenthesis', null,
                                                    $inLocale);
                                        }
                                    }

                                    // Comment of Log
                                    $comment .= "\n${log['col_comment']}";
                                }
                            }
                        }

                        $line[] = $comment;

                        // 処理日時
                        $ptime = '';
                        if ($path_step_data_user[GRN_WORKFLOW_COLUMN_PTIME]) {
                            $ptime
                                = cb_timestamp_to_datetime($path_step_data_user[GRN_WORKFLOW_COLUMN_PTIME]);
                            $ptime
                                = cb_date_format(GRN_WORKFLOW_DATETIME_FORMAT,
                                $ptime, null, null, $inLocale);
                        }
                        $line[] = $ptime;
                    }
                }
            }
        }

        return $line;
    }

    /**
     * Export Item Data
     *
     * @param  array  $item     //Item Information
     * @param  string $inLocale // default locale
     * @param  bool   $refresh  //Refresh Flag
     *
     * @return array                           //CSV Line
     * @access private
     */
    private function _exportItemData($item, $inLocale = null, $refresh = false)
    {
        $line = [];

        // 項目名
        $line[] = $item['d_col_display_name'];

        // 項目値
        // Get Item Value
        $item_map_for_write = [
            '_id'                        => $item['d__id'],
            'file_id'                    => $item['f__id'],
            GRN_WORKFLOW_COLUMN_FILE     => $item['f_col_file'],
            GRN_WORKFLOW_COLUMN_NUMBER   => $item['d_col_number'],
            GRN_WORKFLOW_COLUMN_TEXT     => $item['d_col_text'],
            GRN_WORKFLOW_COLUMN_SETTINGS => $item['d_col_settings'],
        ];

        $item_util = grn_workflow_get_item_util($item['d_col_foreign_key']);

        if ('grn.workflow.date' == $item['d_col_foreign_key']) {
            // Only Date Type Returns Value by Reference.
            $item_data_value_mix
                =& $item_util->getItemData($item_map_for_write);
        } elseif ('grn.workflow.file' == $item['d_col_foreign_key']) {
            $item_data_value_mix
                = $item_util->getItemDataFile($item_map_for_write['_id'],
                $item_map_for_write, $refresh);
        } else {
            $item_data_value_mix = $item_util->getItemData($item_map_for_write);
        }

        switch ($item['d_col_foreign_key']) {
            case 'grn.workflow.string_single':
            case 'grn.workflow.string_multiple':
            case 'grn.workflow.menu_string':
            case 'grn.workflow.radio':
            case 'grn.workflow.checkbox':
            case 'grn.workflow.numeric':
            case 'grn.workflow.calc_numeric':
                $item_data_value = $item_data_value_mix;
                break;
            case 'grn.workflow.date':
                $item_date_settings = cb_unserialize($item['d_col_settings'],
                    ["allowed_classes" => false]);
                if (isset($item_date_settings['date_type'])
                    && $item_date_settings['date_type'] == 1
                ) {
                    $item_data_value
                        = cb_date_format(GRN_WORKFLOW_DATETIME_FORMAT,
                        $item_data_value_mix, null, null, $inLocale);
                } else {
                    $item_data_value = cb_date_format(GRN_WORKFLOW_DATE_FORMAT,
                        $item_data_value_mix, null, null, $inLocale);
                }
                break;
            case 'grn.workflow.file':
                if ( ! $item_data_value_mix) {
                    $item_data_value = null;
                } else {
                    $item_data_value = sprintf('%s(%s)',
                        $item_data_value_mix['file_info']['name'],
                        $item_data_value_mix['file_info']['mime']);
                }
                break;
            case 'grn.workflow.route_search':
                $item_data_value = implode(':', $item_data_value_mix);
                break;
        }

        $line[] = $item_data_value;

        return $line;
    }

    /**
     * Export Petition
     *
     * @param  object $csv_writer //CSV Writer
     * @param  array  $form_info  //Form Information
     * @param  array  $petition   //Petition Information
     * @param  array  $isSingle   //Single Export Flag
     * @param  string $inLocale   //Use Locale(null or If omitted the user's locale)
     *
     * @access private
     */
    private function _exportPetition(
        & $csv_writer,
        $form_info,
        & $petition,
        $isSingle = false,
        $inLocale = null
    ) {
        $line = [];

        // 番号
        $line[] = $petition['p_col_petition_number'];

        // 申請者名
        $line[] = $petition['p_col_user_name'];

        if (@$petition['p_col_login_name_export']) {
            $line[] = $petition['p_col_user_foreign_key'];
        }

        $refresh = false;
        // Detect flag in case auto export
        if ($petition['p_col_auto_export']) {
            //Refresh Cache
            $refresh = true;
        }

        // 申請日時
        $apply_datetime = cb_timestamp_to_datetime($petition['p_col_ctime']);
        $line[] = cb_date_format(GRN_WORKFLOW_DATETIME_FORMAT,
            $apply_datetime, null, null, $inLocale);

        // 申請フォーム名
        $line[] = $form_info['name'];

        $item_info = [];
        $path_info = [];
        if ($isSingle) {
            $line[] = [];  // 項目情報
            $line[] = [];  // 経路情報
        }

        // 標題
        $line[] = $petition['p_col_name'];

        // 状況
        $line[] = $this->getStatusDisplay($petition['p_col_status'], $inLocale);

        // 項目情報（開始桁）を保存
        $item_info[] = count($line);

        //Items
        foreach ($petition['item_data'] as $item) {
            $items_line = $this->_exportItemData($item, $inLocale, $refresh);
            $line = array_merge($line, $items_line);
        }

        // 項目情報（終了桁）を保存
        $item_info[] = count($line) - 1;

        //Path
        $offset = count($line);
        $path_info = [];
        $path_line = $this->_exportPathData($petition['p__id'], $path_info,
            $inLocale, $isSingle);
        $line = array_merge($line, $path_line);

        if ($isSingle) {
            foreach ($path_info as $key => $value) {
                $path_info[$key] = $offset + $value;
            }

            if (@$petition['p_col_login_name_export']) {
                $line[5] = implode(',', $item_info);
                $line[6] = implode(',', $path_info);
            } else {
                $line[4] = implode(',', $item_info);
                $line[5] = implode(',', $path_info);
            }
        }

        //Write
        $csv_writer->writeLine($line);
    }

    /**
     * Get Export Custome Petition
     *
     * @param  array  $form_info //Form Information
     * @param  array  $petition  //Petition Information
     * @parama array      $export_list         //Export Item List
     * @param  string $inLocale  //Use Locale(null or If omitted the user's locale)
     *
     * @return array                           //Export Custome Petition List
     * @access private
     */
    private function getExportCustomePetition(
        $form_info,
        $petition,
        $export_list,
        $inLocale = null
    ) {
        $line = [];
        foreach ($export_list as $key => $value) {
            switch ($key) {
                // 番号
                case 'no':
                    $line[] = $petition['p_col_petition_number'];
                    break;
                // 申請者名
                case 'creator':
                    $line[] = $petition['p_col_user_name'];
                    break;
                // 申請者のログイン名
                case 'creator_login_name':
                    $line[] = $petition['p_col_user_foreign_key'];
                    break;
                // 申請日時
                case 'creat_date':
                    $apply_datetime
                        = cb_timestamp_to_datetime($petition['p_col_ctime']);
                    $line[] = cb_date_format(GRN_WORKFLOW_DATETIME_FORMAT,
                        $apply_datetime, null, null, $inLocale);
                    break;
                // フォーム名
                case 'form_name':
                    $line[] = $form_info['name'];
                    break;
                // 状況
                case 'status':
                    $line[] = $this->getStatusDisplay($petition['p_col_status'],
                        $inLocale);
                    break;
                // カスタマイズ項目
                case 'items_data':
                    if ( ! is_array($value) || count($value) == 0) {
                        break;
                    }
                    foreach ($value as $item_key => $item_value) {
                        $items_line = [];
                        foreach ($petition['item_data'] as $item) {
                            if ($item_value == $item['d_col_item']) {
                                $items_line = $this->_exportItemData($item,
                                    $inLocale);
                                break;
                            }
                        }
                        $line[] = (isset($items_line[1])) ? $items_line[1]
                            : null;
                    }
                    break;
                // 経路
                case 'path_step':
                    $offset = count($line);
                    $path_info = [];
                    $path_line = $this->_exportPathData($petition['p__id'],
                        $path_info, $inLocale);
                    $line = array_merge($line, $path_line);
                    break;
            }
        }

        return $line;
    }

    /**
     * Export Custome Petition
     *
     * @param  object $csv_writer //CSV Writer
     * @param  array  $form_info  //Form Information
     * @param  array  $petition   //Petition Information
     * @parama array      $export_list         //Export Item List
     * @param  string $inLocale   //Use Locale(null or If omitted the user's locale)
     *
     * @access private
     */
    private function _exportCustomPetition(
        & $csv_writer,
        $form_info,
        $petition,
        $export_list,
        $inLocale = null
    ) {
        if ( ! is_array($export_list) || count($export_list) == 0) {
            return;
        }

        $line =& $this->getExportCustomePetition($form_info, $petition,
            $export_list);
        //Write
        $csv_writer->writeLine($line);
    }

    /**
     * Export Petition
     *
     * @param  object $csv_writer  //CSV Writer
     * @param  array  $category_id //Category ID
     * @param  array  $form_id     //Form ID
     * @param  mixed  $option      //Option (array('list'=>array('offset'=>'', 'limit'=>''), 'sort'=>array('column'=>'', 'order'=>''), 'condition'=>array('column'=>'', 'value'=>'', 'operator'=>''))
     * @param  array  $export_list //export item
     */
    public function exportPetition(
        & $csv_writer,
        $inIsSkip = false,
        $category_id,
        $form_id,
        $option,
        &$export_list
    ) {
        $petition_logic_base = $this->getLogicBase();

        // -- Execute Getting Petition List with Item Data.
        //    (Item File Object Information and Path Step will be gotten in loop.)

        //Create Column List
        $translation_map = [
            'petition_user',
            'petition_petition_number',
            'petition_user_name',
            'petition_user_foreign_key',
            'petition_status',
            'petition_ctime',
            'itemdata_item',
            'itemdata_number',
            'itemdata_text',
            'itemdata_display_name',
            'itemdata_type',
            'itemdata_foreign_key',
            'itemdata_settings',
            'itemdatafile_file'
        ];
        $petition_column_list
            = $petition_logic_base->getColumnList(GRN_WORKFLOW_TABLE_PETITION);
        $item_data_column_list
            = $petition_logic_base->getColumnList(GRN_WORKFLOW_TABLE_ITEMDATA);
        $item_data_file_column_list
            = $petition_logic_base->getColumnList(GRN_WORKFLOW_TABLE_ITEMDATAFILE);
        $column_list = array_merge($petition_column_list,
            $item_data_column_list, $item_data_file_column_list);
        foreach (array_keys($column_list) as $key) {
            $column_name = explode(' ', $column_list[$key]);
            $column_name = str_replace('col_', '', $column_name[1]);
            $column_name = str_replace('p_', 'petition_', $column_name);
            $column_name = str_replace('d_', 'itemdata_', $column_name);
            $column_name = str_replace('f_', 'itemdatafile_', $column_name);
            $column_name = str_replace('__', '_', $column_name);
            if ( ! in_array($column_name, $translation_map)
                 && $column_name != 'petition_id'
                 && $column_name != 'itemdata_id'
                 && $column_name != 'itemdatafile_id'
            ) {
                unset($column_list[$key]);
            }
        }

        $petition_list = $petition_logic_base->getListExForExport($form_id,
            $column_list, $option);

        $item_util = GRN_Workflow_Item_Controller_Utility::getInstance();
        $item_list = $item_util->getSimpleListView($form_id);
        // Write CSV Header
        if ($inIsSkip && count($export_list) > 0) {
            $this->_exportCustomItemName($csv_writer, $item_list, $export_list);
        }

        $form_info = [];
        if (array_key_exists('form_name', $export_list)) {
            // Get Form Name
            $form_util = GRN_Workflow_Form_Controller_Utility::getInstance();
            $translation_map_form = [
                '_id'  => '_id',             //Form ID
                'name' => 'name',            //Form Name
            ];
            $form_option
                = [
                'condition' => [
                    '0' => [
                        'column'   => 'col_type',
                        'value'    => '0',
                        'operator' => '='
                    ]
                ]
            ];
            $form_info = $form_util->getView($form_id,
                $translation_map_form, $category_id, $form_option);
        }

        // Write Data
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $login = $uum->getLoginUser();
        $user_ids = [];
        foreach ($petition_list as $petition) {
            if ($petition['p_col_user']) {
                $user_ids[] = $petition['p_col_user'];
            }
        }

        require_once("grn/controller.csp");
        $users_info = GRN_ControllerUtil::getUserInfoToShowUserName($user_ids,
            $login);
        require_once('workflow/item_resources.csp');
        foreach ($petition_list as $petition_id => $petition) {
            $petition_data_for_export = $petition;
            if ($petition['p_col_user']
                && array_key_exists($petition['p_col_user'], $users_info)
            ) {
                $petition_data_for_export['p_col_user_name']
                    = $uum->getNameOf($login,
                    $users_info[$petition['p_col_user']], true);
            }

            foreach ($petition['item_data'] as $key => $item) {
                if ($item['d_col_type'] != GRN_WORKFLOW_ITEM_TYPE_BLANK) {
                    $petition_data_for_export['item_data'][$key] = $item;
                }
            }
            $this->_exportCustomPetition($csv_writer, $form_info,
                $petition_data_for_export, $export_list);
        }
    }

    /**
     * Export Petition
     *
     * @param  int $petition_id 申請ID
     */
    public function exportSinglePetition($petition_id, $status)
    {
        if (defined('ON_FOREST')) {
            return;
        }

        $logic = $this->getLogicBase();
        $column_list = [];

        $option = [
            'condition' => [
                [
                    'column'   => 'p._id',
                    'value'    => $petition_id,
                    'operator' => '='
                ]
            ]
        ];
        $petition = $logic->getEx($petition_id, null, $column_list, $option);

        if (0 < strlen($petition['p_col_export_folder'])) {
            $petition['p_col_status'] = $status;

            $form_info = ['name' => $petition['p_col_form_name']];

            require_once('fw/csv.csp');
            $tmpdir = cb_tmpdir();
            $tmp_name = tempnam($tmpdir, 'workflow_');

            // Use the automatic export encoding specified in the system configuration
            require_once('workflow/config.csp');
            $configs = GRN_Workflow_Configs::getInstance();
            $logic = $configs->getSystemConfig();
            $automatic_export_encoding = $logic->getAutomaticExportEncoding();
            $csv_writer
                = new CB_CSVWriter($automatic_export_encoding,
                $tmp_name);

            foreach ($petition['item_data'] as $key => $item) {
                if ($item['d_col_type'] == GRN_WORKFLOW_ITEM_TYPE_BLANK
                    || $item['d_col_export_data']
                       == GRN_WORKFLOW_CONDITION_ITEM_NOT_EXPORT_DATA
                ) {
                    unset($petition['item_data'][$key]);
                }
            }

            // システムのロケールを取得
            //GRN2-3226
            require_once("fw/i18n/locale.csp");
            $locale = CB_LocaleManager::getDefaultLanguage();
            //GRN2-3226

            // Write CSV Header
            if ($petition['p_col_export_top_line']) {
                $this->_exportItemName($csv_writer, $petition['item_data'],
                    $petition['p_col_login_name_export'], true,
                    $petition['p__id'], $locale);
            }

            require_once('workflow/item_resources.csp');
            $this->_exportPetition($csv_writer, $form_info, $petition, true,
                $locale);

            $csv_writer->close();

            // コミット時に申請を書き出す
            require_once('workflow/file.csp');
            $fm = GRN_Workflow_FileManager::getInstance();
            $fm->addToCopy($tmp_name, $petition['p_col_export_folder'],
                "{$petition['p__id']}.csv");
        }

    }

    function isAvailableSendProxy($agent_id, $mandator_id = null)
    {
        if (is_null($agent_id)) {
            return false;
        }
        require_once('workflow/config.csp');
        $config = GRN_Workflow_Configs::getInstance();
        $config = $config->getSystemConfig();
        if ( ! $config->getSubstituteApplication()) {
            return false;
        }
        $users = $config->getUsersFromAgent($agent_id);
        if (is_null($users) || ! is_array($users)) {
            return false;
        }
        $count = count($users[GRN_WORKFLOW_AGENT_TYPE_PETITION]);
        if ($count <= 0) {
            return false;
        }

        if ( ! is_null($mandator_id)) {
            foreach ($users[GRN_WORKFLOW_AGENT_TYPE_PETITION] as $user) {
                if ($user['user'] == $mandator_id) {
                    return true;
                }
            }
        } else {
            return true;
        }

        return false;
    }

    function isAvailableReuseProxy($agent_id, $petition_id)
    {
        if (is_null($agent_id) || strlen($agent_id) <= 0) {
            return false;
        }
        if (is_null($petition_id) || strlen($petition_id) <= 0) {
            return false;
        }
        require_once('workflow/config.csp');
        $config = GRN_Workflow_Configs::getInstance();
        $config = $config->getSystemConfig();
        if ( ! $config->getSubstituteApplication()) {
            return false;
        }
        // get petition
        //Get Petition and Item Data and Item Data File Controller Utility
        $translation_map_petition = [
            'ptid'       => '_id',              //Petition ID
            'user'       => 'user',             //User
            'agent_user' => 'agent_user',       //Agent User
        ];
        $petition = $this->getView($petition_id,
            $translation_map_petition);
        if (count($petition) < count($translation_map_petition)) {
            return false;
        }

        $users = $config->getUsersFromAgent($agent_id);
        $users = array_key_exists(GRN_WORKFLOW_AGENT_TYPE_PETITION, $users)
            ? $users[GRN_WORKFLOW_AGENT_TYPE_PETITION] : [];
        if (is_null($users)) {
            return false;
        }

        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');

        $available = false;
        foreach ($users as $user) {
            $uid = $user['user'];
            if ($petition['user'] == $uid && $uum->isActiveUser($uid)) {
                $available = true;
                break;
            }
        }

        return $available;
    }


    function checkApprovalPlanByPetitionId($user_id, $petition_id)
    {
        if (is_null($user_id) || strlen($user_id) <= 0) {
            return false;
        }
        if (is_null($petition_id) || strlen($petition_id) <= 0) {
            return false;
        }

        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $user = $uum->getUser($user_id);
        if ( ! $user || ! $uum->isActiveUser($user_id)) {
            return false;
        }
        unset($user);

        require_once('workflow/config.csp');
        $config = GRN_Workflow_Configs::getInstance();
        $config = $config->getSystemConfig();

        $r = $config->getApprovalPlan();
        if ($r != true) {
            return false;
        }
        $translation_map_petition = [
            'pid'    => '_id',
            'status' => 'status',
        ];
        $petition = $this->getView($petition_id,
            $translation_map_petition);
        if ($petition['status'] != GRN_WORKFLOW_STATUS_UNPROCESSING
            && $petition['status'] != GRN_WORKFLOW_STATUS_IN_PROCESS
            && $petition['status'] != GRN_WORKFLOW_STATUS_REMAND
        ) {
            return false;
        }
        $c = new GRN_Workflow_ControllerUtil();
        $path_steps = $c->getPathInfo($petition_id, true);
        $me = null;
        $now_step = null;
        $in_process = null;
        foreach (array_keys($path_steps) as $key => $path_step_id) {
            $path_step =& $path_steps[$path_step_id];
            if ($path_step['col_type'] == GRN_WORKFLOW_CIRCULAR) {
                //回覧経路
                continue;
            }
            if ( ! $path_step['col_activate'] || $path_step['col_skip']) {
                //無効またはスキップの経路
                continue;
            }
            if (is_null($in_process)) {
                $r = $c->getInProcessPathStepId($path_step);
                if ($r && $r == $path_step_id) {
                    $in_process = $key;
                }
            }
            if ($path_step['col_finished'] != GRN_WORKFLOW_FINISHED_COMPLETE) {
                //完了していない経路
                if (is_null($now_step)) {
                    $now_step = $key;
                    if (array_search($user_id, $path_step['uids']) !== false) {
                        $me = $key;
                        break;
                    }
                }
            }
            if (array_search($user_id, $path_step['uids']) !== false) {
                //自分が経路に含まれている
                $me = $key;
            }
        }
        $ok = false;
        if (is_null($now_step) || is_null($me)) {
            $ok = false;
        }
        if ($now_step < $me) {
            $ok = true;
        }
        if ($petition['status'] == GRN_WORKFLOW_STATUS_REMAND) {
            if (is_null($in_process) && ! is_null($me)) {
                $ok = true;
            } elseif ($in_process < $me) {
                $ok = true;
            }
        }
        if ($ok) {
            return true;
        }

        return false;
    }

    function getSubjectView($subject_data)
    {
        $option = $subject_data['option_string'];
        $type = $subject_data['option_string_type'];

        $subject = $subject_data['text'];
        if (strlen($option) > 0) {
            if ($type == 1) {
                $subject = $option . ' ' . $subject;
            } elseif ($type == 2) {
                $subject = $subject . ' ' . $option;
            }
        }

        return $subject;
    }

    function getSubject($petition_id)
    {
        $translation_map = [
            'option_string'      => 'option_string',
            'option_string_type' => 'option_string_type',
            'text'               => 'text',
        ];

        require_once('workflow/itemdata_logic.csp');
        $itemdata_logic = GRN_Workflow_ItemData_Logic::getInstance();

        $subject_data =& $itemdata_logic->getSubject($petition_id);

        $subject_data_view = $this->_getView($subject_data, $translation_map);
        $subject = $this->getSubjectView($subject_data_view);

        return $subject;
    }

    /**
     * @return array
     */
    function &getSubjectList($petition_ids)
    {
        $subject_list_view = [];

        if ( ! $petition_ids || ! is_array($petition_ids)) {
            return $subject_list_view;
        }

        $translation_map = [
            'option_string'      => 'option_string',
            'option_string_type' => 'option_string_type',
            'ptid'               => 'petition',
            'text'               => 'text',
        ];

        require_once('workflow/itemdata_logic.csp');
        $itemdata_logic = GRN_Workflow_ItemData_Logic::getInstance();
        $subject_list =& $itemdata_logic->getSubjectList($petition_ids);

        foreach ($subject_list as $key => $subject) {
            $subject_list_view[$key]
                = $this->getSubjectView($this->_getView($subject,
                $translation_map));
        }

        return $subject_list_view;
    }
}

/**
 *  Item Controller Utility Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_Item_Controller_Utility
    extends GRN_Workflow_Controller_Utility_Base
{
    /** Item Logic Instance **/
    var $_item_logic_base = null;

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
        //Get Logic Base Instance
        require_once('workflow/item_logic_base.csp');
        $logic_base = GRN_Workflow_Item_Logic_Base::getInstance();

        //Initialize Parent Class
        parent::__construct(GRN_WORKFLOW_TABLE_ITEM, $logic_base);
    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_Item_Controller_Utility $instance                  //Instance of GRN_Workflow_Item_Controller_Utility
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_Item_Controller_Utility();
        }

        return $_instance;
    }

    /**
     * Get Item View
     *
     * @param  int   $item_id         //Item ID
     * @param  array $translation_map //Model <=> View Translation Map
     * @param  int   $form_id         //Form ID
     * @param  bool  $refresh         //Refresh Flag
     * @param  int   $lock_mode       //Lock Mode
     *
     * @return array  $item_for_view             //Item for View
     */
    function getView(
        $item_id,
        $translation_map,
        $form_id = null,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Create Column List
        $column_list = $this->createColumnlist($translation_map);

        //Get Item
        $item_logic_base = $this->getLogicBase();
        if (is_null($form_id)) {
            $item = $item_logic_base->getDirect($item_id, $column_list,
                $lock_mode);
        } else {
            $item =& $item_logic_base->get($item_id, $form_id, $column_list,
                $refresh, $lock_mode);
        }

        //Get Item View
        $item_for_view = $this->_getView($item, $translation_map);

        //Return Item View
        return $item_for_view;
    }

    /**
     * Get Item List View
     *
     * @param  array $translation_map //Model <=> View Translation Map
     * @param  int   $form_id         //Form ID
     * @param  bool  $refresh         //Refresh Flag
     * @param  int   $lock_mode       //Lock Mode
     *
     * @return array  $item_list_for_view        //Item List for View
     */
    function getListView(
        $translation_map,
        $form_id = null,
        $type = null,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $item_list_for_view = [];

        //Create Column List
        $column_list = $this->createColumnlist($translation_map);

        //Get Item List
        $item_list = [];
        $item_logic_base = $this->getLogicBase();
        $item_list =& $item_logic_base->getList($form_id, $column_list,
            $refresh, $lock_mode);

        //Create Parameter Translation for Item List
        foreach (array_keys($item_list) as $item_id) {
            $item_list_for_view[$item_id]
                = $this->_getView($item_list[$item_id], $translation_map);
        }

        //Return Item List View
        return $item_list_for_view;
    }

    /**
     * Get Simple List View
     *
     * @param  int $form_id //Form ID
     *
     * @return array  $item_list_for_view        //Item List for View
     */
    public function getSimpleListView($form_id)
    {
        //Create Parameter Translation Map
        $translation_map_item = [
            'iid'                => '_id',
            //Item ID
            'display_name'       => 'display_name',
            //Item Display Name
            'code'               => 'code',
            //Item Code
            'type'               => 'type',
            //Item Type
            'form'               => 'form',
            //Item Form
            'attach_file'        => 'attach_file',
            //Item Attach File
            'attach_file_view'   => 'attach_file_view',
            //Item Attach File View
            'description'        => 'description',
            //Item Description
            'description_type'   => 'description_type',
            //Item Description Type
            'description_editor' => 'description_editor',
            //Item Description Editor
            'export_data'        => 'export_data',
            //Item Data
            'foreign_key'        => 'foreign_key',
            //Item Foreign Key
            'option_string'      => 'option_string',
            //Item Option String
            'option_string_type' => 'option_string_type',
            //Item Option String Type
            'separator'          => 'separator',
            //Item Separator
            'required'           => 'required',
            //Item Reuired Flag
            'settings'           => 'settings',
            //Settings
            'list_index'         => 'list_index',
            //Item List Index
        ];

        $item_list_for_view = $this->getListView($translation_map_item,
            $form_id);

        return $item_list_for_view;
    }

    /**
     * Get the Automated calculation related items by form id
     *
     * @param  int $form_id
     *
     * @return array $calc_relate_number_items
     */
    private function getAutoCalculationAndRelatedItemsInForm($form_id)
    {
        $translation_map_item = [
            'id'          => '_id',
            'settings'    => 'settings',
            'foreign_key' => 'foreign_key',
        ];
        $item_list = $this->getListView($translation_map_item,
            $form_id);
        $item_id_list = array_keys($item_list);
        $auto_calculation_items = [];
        foreach ($item_list as $item => $item_info) {
            if ($item_info['foreign_key'] == 'grn.workflow.calc_numeric') {
                $auto_calculation_items[$item] = $item_info['settings'];
            }
        }

        $calc_relate_number_items = [];
        foreach ($auto_calculation_items as $calc_item => $calc_item_info) {
            $related_items = $this->getRelatedItems($calc_item_info,
                $auto_calculation_items);
            $calc_relate_number_items[$calc_item]
                = array_intersect($item_id_list, $related_items);
        }

        return $calc_relate_number_items;
    }

    /**
     * Get related Numeric value or Automated calculation items
     *
     * @param  array $calc_item
     * @param  array $calc_item_all
     * @param  array $related_items
     *
     * @return array    $related_items
     */
    private function getRelatedItems(
        $calc_item,
        $calc_item_all,
        &$related_items = []
    ) {
        if ($calc_item['calc_type'] == 1) {
            foreach ($calc_item['calc_total']['values'] as $calc_include_item) {
                if (isset($calc_item_all[$calc_include_item])) {
                    $this->getRelatedItems($calc_item_all[$calc_include_item],
                        $calc_item_all, $related_items);
                } else {
                    $related_items[] = $calc_include_item;
                }
            }
        } elseif ($calc_item['calc_type'] == 0) {
            if (isset($calc_item['calc_operator']['operand1_type'])) {
                if (isset($calc_item_all[$calc_item['calc_operator']['operand1_type']])) {
                    $this->getRelatedItems($calc_item_all[$calc_item['calc_operator']['operand1_type']],
                        $calc_item_all,
                        $related_items);
                } elseif ($calc_item['calc_operator']['operand1_type'] != 0) {
                    $related_items[]
                        = $calc_item['calc_operator']['operand1_type'];
                }
            }

            if (isset($calc_item['calc_operator']['operand2_type'])) {
                if (isset($calc_item_all[$calc_item['calc_operator']['operand2_type']])) {
                    $this->getRelatedItems($calc_item_all[$calc_item['calc_operator']['operand2_type']],
                        $calc_item_all,
                        $related_items);
                } elseif ($calc_item['calc_operator']['operand2_type'] != 0) {
                    $related_items[]
                        = $calc_item['calc_operator']['operand2_type'];
                }
            }
        }

        return array_unique($related_items);
    }

    /**
     * Get related auto calculation items
     *
     * @param int $form_id
     * @param int $item_id
     *
     * @return array  $related_calc_items
     */
    public function getRelatedAutoCalculationItemOfNumberItem(
        $form_id,
        $item_id
    ) {
        $related_calc_items = [];
        $calc_relate_number_items
            = $this->getAutoCalculationAndRelatedItemsInForm($form_id);
        foreach ($calc_relate_number_items as $calc_item_id => $related_item) {
            if (in_array($item_id, $related_item)) {
                $related_calc_items[] = $calc_item_id;
            }
        }

        return $related_calc_items;
    }

    /**
     * Get the item list which will display in Route branch information
     *
     * @param  int   $form_id
     * @param  array $item_list
     *
     * @return array  $item_list
     */
    public function eliminateNotAvailableBranchItems($form_id, $item_list)
    {
        require_once('workflow/change_access.csp');
        $change_access_logic = GRN_Workflow_ChangeAccess::getInstance();

        $columns = [
            '_id',
            'col_item',
            'col_edit',
        ];
        $ignore_numeric_items = [];
        foreach ($item_list as $item => $item_info) {
            if ($item_info['col_foreign_key'] == 'grn.workflow.numeric') {
                $change_accesses = $change_access_logic->getListByItemId($item,
                    $columns, 'col_path_step');
                foreach ($change_accesses as $change_access) {
                    if ($change_access['col_edit']) {
                        $ignore_numeric_items[] = $item;
                        unset ($item_list[$item]);
                        break;
                    }
                }
            }
        }

        $calc_number = $this->getAutoCalculationAndRelatedItemsInForm($form_id);
        foreach ($item_list as $item => $item_info) {
            if ($item_info['col_foreign_key'] == 'grn.workflow.calc_numeric') {
                $intersect_item = array_intersect($calc_number[$item],
                    $ignore_numeric_items);
                if ( ! empty($intersect_item)) {
                    unset ($item_list[$item]);
                }
            }
        }

        return $item_list;
    }

    /**
     * Numeric item edit access check
     *
     * @param int $form_id
     * @param int $item_id
     *
     * @return bool
     */
    public function checkNumberItemAvailableForEditing($form_id, $item_id)
    {
        $columns = [
            'tab_grn_workflow_pathskip' => [
                '_id'      => '_id',
                'col_item' => 'col_item'
            ]
        ];
        require_once('workflow/path_skip.csp');
        $path_skip_logic = GRN_Workflow_PathSkips::getInstance();
        $path_skip_list = $path_skip_logic->getByFormId($form_id, $columns);
        $calc_number_item
            = $this->getRelatedAutoCalculationItemOfNumberItem($form_id,
            $item_id);
        if ($path_skip_list
            && ($item_id == $path_skip_list['col_item']
                || in_array($path_skip_list['col_item'], $calc_number_item))
        ) {
            return false;
        }

        return true;
    }

    /**
     * @param array $condition
     *
     * @return string
     */
    public function getConditionOperatorView(array $condition)
    {
        require_once('workflow/item_resources.csp');
        $item_util = grn_workflow_get_item_util($condition['col_foreign_key']);
        $operators = $item_util->getConditionOperators();

        return $operators[$condition['col_operator']];
    }

    /**
     * @param array $condition
     *
     * @return string
     */
    public function getConditionValueView(array $condition)
    {
        $foreign_key = $condition['col_foreign_key'];
        if ($foreign_key == GRN_WORKFLOW_CONDITION_ITEM_RADIO) {
            $value = $condition['col_option'];
        } elseif ($foreign_key == GRN_WORKFLOW_CONDITION_ITEM_CHECK) {
            $value = null;
        } elseif ($foreign_key == GRN_WORKFLOW_CONDITION_ITEM_NUMERIC) {
            $value = $condition['col_number'];
        } elseif ($foreign_key == GRN_WORKFLOW_CONDITION_ITEM_CALC_NUMERIC) {
            $value = $condition['col_number'];
        } elseif ($foreign_key == GRN_WORKFLOW_CONDITION_ITEM_MENU_STRING) {
            if ( ! isset($condition['col_settings']['menu_item_type'])
                 || $condition['col_settings']['menu_item_type']
                    == GRN_WORKFLOW_CONDITION_ITEM_MENU_STRING_TYPE_SPECIFY
            ) {
                $value = $condition['col_option'];
            } else {
                require_once('workflow/path_condition_logic.csp');
                $pclogic = GRN_Workflow_Path_Condition_Logic::getInstance();
                $groups = $pclogic->constructGroupListForMenu();
                $group_id = $condition['col_option'];
                $value = isset($groups[$group_id]) ? $groups[$group_id] : '';
            }
        }
        if (strlen($value) > 0) {
            $value = cb_msg(GRN_WORKFLOW_MODULE_ID,
                    'condition_quotation_mark_left')
                     . $value
                     . cb_msg(GRN_WORKFLOW_MODULE_ID,
                    'condition_quotation_mark_right');
        }

        return $value;
    }
}

/**
 *  Item Data Controller Utility Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_ItemData_Controller_Utility
    extends GRN_Workflow_Controller_Utility_Base
{
    /** Item Data Logic Instance **/
    var $_item_data_logic_base = null;

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
        //Get Logic Base Instance
        require_once('workflow/itemdata_logic_base.csp');
        $logic_base = GRN_Workflow_ItemData_Logic_Base::getInstance();

        //Initialize Parent Class
        parent::__construct(GRN_WORKFLOW_TABLE_ITEMDATA, $logic_base);
    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_ItemData_Controller_Utility $instance                  //Instance of GRN_Workflow_ItemData_Controller_Utility
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_ItemData_Controller_Utility();
        }

        return $_instance;
    }

    /**
     * Get Item Data View(with Extra Information)
     *
     * @param  array $item_data       //Item Data (with Extra Information)
     * @param  array $translation_map //Model <=> View Translation Map
     *
     * @return array  $item_data_for_view        //Item Data for View
     */
    function _getViewEx($item_data, $translation_map)
    {
        $item_data_for_view = [];

        //Set Teble Name
        $item_data_for_view['table'] = $this->_table_name;

        //Create Parameter Translation for Form
        foreach ($translation_map as $view => $model) {
            if (strpos($model, 'itemdata_') !== 0) {
                continue;
            }

            $model = str_replace('itemdata_', 'd_col_', $model);
            $model = str_replace('d_col_id', 'd__id', $model);

            switch ($model) {
                case 'd__id':
                    $item_data_for_view[$view] = $item_data[$model];
                    break;
                case 'd_col_creator':
                case 'd_col_modifier':
                    //Get User ID
                    $uid = $item_data[$model];
                    if ($uid) {
                        $item_data_for_view[$view] = $uid;
                    }
                    break;
                case 'd_col_creator_name':
                case 'd_col_modifier_name':
                    //Get User ID
                    $model = str_replace('_name', '', $model);
                    $uid = $item_data[$model];

                    //Get User Object
                    global $G_container_base;
                    $grn_uum = $G_container_base->getInstance('uum');
                    $user = $grn_uum->getUserInfo($uid,
                        [GRN_WORKFLOW_COLUMN_DISPLAY_NAME]);
                    if ($user) {
                        $item_data_for_view[$view]
                            = $user[GRN_WORKFLOW_COLUMN_DISPLAY_NAME];
                    }
                    break;
                case 'd_col_ctime':
                case 'd_col_mtime':
                    $time = $item_data[$model];
                    $item_data_for_view[$view] = new CB_TimeStamp();
                    $item_data_for_view[$view]->unix_ts = $time;
                    break;
                case 'd_col_settings':
                    $item_data_for_view[$view] = [];
                    $settings = $item_data[$model];
                    if (strlen($settings) !== 0) {
                        $item_data_for_view[$view] = cb_unserialize($settings,
                            ["allowed_classes" => false]);
                    }
                    break;
                case 'd_col_display_name':
                    if ($item_data['d_col_type']
                        == GRN_WORKFLOW_ITEM_TYPE_STANDARD
                        && (is_null($item_data[$model])
                            || strlen($item_data[$model]) <= 0)
                    ) {
                        $item_data_for_view[$view]
                            = cb_plain_msg(GRN_WORKFLOW_MODULE_ID,
                            'form_subject');
                    } else {
                        $item_data_for_view[$view] = $item_data[$model];
                    }
                    break;
                case 'd_col_display_type':
                    $foreign_key = $item_data['d_col_foreign_key'];
                    $item_data_for_view[$view]
                        = cb_plain_msg(GRN_WORKFLOW_MODULE_ID,
                        $foreign_key);
                    break;
                case 'd_col_files':
                    $item_data_for_view['files'] = [];
                    foreach (
                        array_keys($item_data['files']) as $item_data_file_id
                    ) {
                        $item_data_file
                            =& $item_data['files'][$item_data_file_id];

                        //Get GRN_Workflow_File Object
                        require_once('workflow/file.csp');
                        $file_manager = new GRN_Workflow_FileManager_Core();
                        $file_table = $file_manager->getFileTable();
                        $file_object
                            = $file_table->getRow($item_data_file['f_col_file']);

                        //Set File Information
                        if ($file_object) {
                            $file_info
                                = grn_make_attached_file_info($file_object,
                                'workflow');
                            $file_info['ifid'] = $item_data_file['f__id'];
                            $file_info['gfid'] = $item_data_file['f_col_file'];
                            $file_info['table']
                                = GRN_WORKFLOW_TABLE_ITEMDATAFILE;
                            $item_data_for_view['files'][$item_data_file['f__id']]
                                = $file_info;
                        }
                    }
                    break;
                default:
                    $item_data_for_view[$view] = $item_data[$model];
                    break;
            }
        }

        //Return Item Data View
        return $item_data_for_view;
    }

    /**
     * Get Item Data View
     *
     * @param  int   $item_data_id    //Item Data ID
     * @param  array $translation_map //Model <=> View Translation Map
     * @param  int   $petition_id     //Petition ID
     * @param  bool  $refresh         //Refresh Flag
     * @param  int   $lock_mode       //Lock Mode
     *
     * @return array  $item_data_view            //Item Data for View
     */
    function getView(
        $item_data_id,
        $translation_map,
        $petition_id = null,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Create Column List
        $column_list = $this->createColumnlist($translation_map);

        //Get Item Data
        $item_data_logic_base = $this->getLogicBase();
        if (is_null($petition_id)) {
            $item_data = $item_data_logic_base->getDirect($item_data_id,
                $column_list, $lock_mode);
        } else {
            $item_data =& $item_data_logic_base->get($item_data_id,
                $petition_id, $column_list, $refresh, $lock_mode);
        }

        //Get Item Data View
        $item_data_for_view = $this->_getView($item_data, $translation_map);

        //Return Item Data View
        return $item_data_for_view;
    }

    /**
     * Get Item Data View(with Extra Information)
     *
     * @param  int   $item_data_id    //Item Data ID
     * @param  array $translation_map //Model <=> View Translation Map
     * @param  int   $petition_id     //Petition ID
     * @param  bool  $refresh         //Refresh Flag
     * @param  int   $lock_mode       //Lock Mode
     *
     * @return array  $form_view                 //Form for View
     */
    function getViewEx(
        $item_data_id,
        $translation_map,
        $petition_id = null,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Create Column List
        $item_data_logic_base = $this->getLogicBase();
        $item_data_column_list
            = $item_data_logic_base->getColumnList(GRN_WORKFLOW_TABLE_ITEMDATA);
        $item_data_file_column_list
            = $item_data_logic_base->getColumnList(GRN_WORKFLOW_TABLE_ITEMDATAFILE);
        $column_list = array_merge($item_data_column_list,
            $item_data_file_column_list);
        foreach (array_keys($column_list) as $key) {
            $column_name = explode(' ', $column_list[$key]);
            $column_name = str_replace('col_', '', $column_name[1]);
            $column_name = str_replace('d_', 'itemdata_', $column_name);
            $column_name = str_replace('f_', 'itemdatafile_', $column_name);
            $column_name = str_replace('__', '_', $column_name);
            if ( ! in_array($column_name, $translation_map)
                 && $column_name != 'itemdata_id'
                 && $column_name != 'itemdatafile_id'
            ) {
                unset($column_list[$key]);
            }
        }

        //Get Item Data
        if (is_null($petition_id)) {
            $item_data =& $item_data_logic_base->getDirectEx($item_data_id,
                $column_list, $lock_mode);
        } else {
            $item_data =& $item_data_logic_base->getEx($item_data_id,
                $petition_id, $column_list, $refresh, $lock_mode);
        }

        //Get Item Data View
        $item_data_for_view = $this->_getViewEx($item_data, $translation_map);

        //Return Item Data View
        return $item_data_for_view;
    }

    /**
     * Get Item Data List View
     *
     * @param  array $translation_map //Model <=> View Translation Map
     * @param  int   $petition_id     //Petition ID
     * @param  bool  $refresh         //Refresh Flag
     * @param  int   $lock_mode       //Lock Mode
     *
     * @return array  $item_data_view            //Item Data for View
     */
    function getListView(
        $translation_map,
        $petition_id = null,
        $type = null,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $item_data_list_for_view = [];

        //Create Column List
        $column_list = $this->createColumnlist($translation_map);

        //Get Item Data List
        $item_data_list = [];
        $item_data_logic_base = $this->getLogicBase();
        $item_data_list =& $item_data_logic_base->getList($petition_id,
            $column_list, $refresh, $lock_mode);

        //Create Parameter Translation for Item Data List
        foreach (array_keys($item_data_list) as $item_data_id) {
            $item_data_list_for_view[$item_data_id]
                = $this->_getView($item_data_list[$item_data_id],
                $translation_map);
        }

        //Return Item Data List View
        return $item_data_list_for_view;
    }

    /**
     * Get Item Data List View (with Extra Information)
     *
     * @param  array $translation_map //Model <=> View Translation Map
     * @param  int   $petition_id     //Petition ID
     * @param  bool  $refresh         //Refresh Flag
     * @param  int   $lock_mode       //Lock Mode
     *
     * @return array  $item_data_view            //Item Data for View
     */
    function getListViewEx(
        $translation_map,
        $petition_id = null,
        $type = null,
        $refresh = true,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $item_data_list_for_view = [];

        //Create Column List
        $item_data_logic_base = $this->getLogicBase();
        $item_data_column_list
            = $item_data_logic_base->getColumnList(GRN_WORKFLOW_TABLE_ITEMDATA);
        $item_data_file_column_list
            = $item_data_logic_base->getColumnList(GRN_WORKFLOW_TABLE_ITEMDATAFILE);
        $column_list = array_merge($item_data_column_list,
            $item_data_file_column_list);
        foreach (array_keys($column_list) as $key) {
            $column_name = explode(' ', $column_list[$key]);
            $column_name = str_replace('col_', '', $column_name[1]);
            $column_name = str_replace('d_', 'itemdata_', $column_name);
            $column_name = str_replace('f_', 'itemdatafile_', $column_name);
            $column_name = str_replace('__', '_', $column_name);
            if ( ! in_array($column_name, $translation_map)
                 && $column_name != 'itemdata_id'
                 && $column_name != 'itemdatafile_id'
            ) {
                unset($column_list[$key]);
            }
        }

        //Get Item Data List
        $item_data_list = [];
        $item_data_list =& $item_data_logic_base->getListEx($petition_id,
            $column_list, $refresh, $lock_mode);

        //Create Parameter Translation for Item Data List
        foreach (array_keys($item_data_list) as $item_data_id) {
            $item_data_list_for_view[$item_data_id]
                = $this->_getViewEx($item_data_list[$item_data_id],
                $translation_map);
        }

        //Return Item Data List View
        return $item_data_list_for_view;
    }

    function gets(
        $translation_map,
        $petition_ids = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $item_data_list_for_view = [];
        //Create Column List
        $column_list = $this->createColumnlist($translation_map);

        //Get Item Data List
        $item_data_list = [];
        $item_data_logic_base = $this->getLogicBase();
        $item_data_list =& $item_data_logic_base->gets($petition_ids,
            $column_list, $refresh, $lock_mode);

        /*
        //Create Parameter Translation for Item Data List
        foreach (array_keys($item_data_list) as $item_data_id)
        {
            $item_data_list_for_view[$item_data_id] = $this->_getView($item_data_list[$item_data_id], $translation_map);
        }
        */

        //Return Item Data List View
        return $item_data_list;
    }

    /**
     * Get the Automated calculation related items data by petition id
     *
     * @param  int $petition_id
     *
     * @return array $calc_relate_number_items_data
     */
    private function getCalcRelatedItemsData($petition_id)
    {
        $translation_map_item = [
            'id'          => '_id',
            'settings'    => 'settings',
            'foreign_key' => 'foreign_key',
            'item'        => 'item',
        ];
        $item_list = $this->getListView($translation_map_item,
            $petition_id);
        $item_id_to_itemdata_id = [];
        $auto_calculation_items = [];

        foreach ($item_list as $item => $item_info) {
            if (isset($item_info['item'])) {
                $item_id_to_itemdata_id[$item_info['item']] = $item;
            }
            if ($item_info['foreign_key'] == 'grn.workflow.calc_numeric') {
                $auto_calculation_items[$item] = $item_info['settings'];
            }
        }
        $calc_relate_number_items_data = [];

        foreach ($auto_calculation_items as $calc_item => $calc_item_info) {
            $calc_relate_number_items_data[$calc_item]
                = $this->getRelatedItemsData($calc_item_info,
                $auto_calculation_items, $item_id_to_itemdata_id);
        }

        return $calc_relate_number_items_data;
    }

    /**
     * Get related Numeric value or Automated calculation items data
     *
     * @param  array $calc_item
     * @param  array $calc_item_all
     * @param  array $item_id_to_itemdata_id
     * @param  array $related_items_data
     *
     * @return array    $related_items_data
     */
    private function getRelatedItemsData(
        $calc_item,
        $calc_item_all,
        $item_id_to_itemdata_id,
        &$related_items_data = []
    ) {
        if ($calc_item['calc_type'] == 1) {
            $calc_total = $calc_item['calc_total_by_item_data_id']['values'] ??
                          $calc_item['calc_total']['values'];

            foreach ($calc_total as $calc_include_item) {
                if (isset($calc_item['calc_total_by_item_data_id']['values'])) {
                    $item_id = $calc_include_item;
                } elseif ( ! isset($item_id_to_itemdata_id[$calc_include_item])) {
                    continue;
                } else {
                    $item_id = $item_id_to_itemdata_id[$calc_include_item];
                }

                if (isset($calc_item_all[$item_id])) {
                    $this->getRelatedItemsData($calc_item_all[$item_id],
                        $calc_item_all, $item_id_to_itemdata_id,
                        $related_items_data);
                } elseif ($item_id != 0) {
                    $related_items_data[] = $item_id;
                }
            }
        } elseif ($calc_item['calc_type'] == 0) {
            $need_convert_item_id_to_itemdata_id
                = isset($calc_item['calc_operator_by_item_data_id'])
                ? false : true;
            $calc_total = $calc_item['calc_operator_by_item_data_id'] ??
                          $calc_item['calc_operator'];
            $id_1 = $calc_total['operand1_type'] ?? 0;
            $id_2 = $calc_total['operand2_type'] ?? 0;
            $itemdata_id_1 = $itemdata_id_2 = 0;

            if ($need_convert_item_id_to_itemdata_id) {
                if ($id_1 != 0 && isset($item_id_to_itemdata_id[$id_1])) {
                    $itemdata_id_1 = $item_id_to_itemdata_id[$id_1];

                }
                if ($id_2 != 0 && isset($item_id_to_itemdata_id[$id_2])) {
                    $itemdata_id_2 = $item_id_to_itemdata_id[$id_2];
                }
            } else {
                $itemdata_id_1 = $id_1;
                $itemdata_id_2 = $id_2;
            }

            if (isset($calc_item_all[$itemdata_id_1])) {
                $this->getRelatedItemsData($calc_item_all[$itemdata_id_1],
                    $calc_item_all, $item_id_to_itemdata_id,
                    $related_items_data);
            } elseif ($itemdata_id_1 != 0) {
                $related_items_data[] = $itemdata_id_1;
            }

            if (isset($calc_item_all[$itemdata_id_2])) {
                $this->getRelatedItemsData($calc_item_all[$itemdata_id_2],
                    $calc_item_all, $item_id_to_itemdata_id,
                    $related_items_data);
            } elseif ($itemdata_id_2 != 0) {
                $related_items_data[] = $itemdata_id_2;
            }
        }

        return array_unique($related_items_data);
    }

    /**
     * Get related auto calculation items data
     *
     * @param int $petition_id
     * @param int $item_id
     *
     * @return array  $related_calc_items_data
     */
    public function getRelatedAutoCalculationItemData($petition_id, $item_id)
    {
        $related_calc_items_data = [];
        $calc_relate_number_items
            = $this->getCalcRelatedItemsData($petition_id);
        foreach ($calc_relate_number_items as $calc_item_id => $related_item) {
            if (in_array($item_id, $related_item)) {
                $related_calc_items_data[] = $calc_item_id;
            }
        }

        return $related_calc_items_data;
    }

    /**
     * Add AutoCalculation Item by _id in col_settings
     *
     * @param int $petition_id
     */
    public function addAutoCalculationItemDataById($petition_id)
    {
        require_once('workflow/itemdata_logic.csp');
        $itemdata_logic = GRN_Workflow_ItemData_Logic::getInstance();
        $translation_map_item_data = [
            'iid'         => '_id',                  //Item Data ID
            'settings'    => 'settings',             //ITem Data Settings
            'item'        => 'item',
            'foreign_key' => 'foreign_key',
            'text'        => 'text',
            'number'      => 'number'
        ];
        $added_itemdata_list
            = $this->getListView($translation_map_item_data,
            $petition_id, null, true);
        $item_id_to_itemdata_id = [];
        foreach ($added_itemdata_list as $item_data_id => $itemdata) {
            $item_id_to_itemdata_id[$itemdata['item']] = $item_data_id;
        }

        foreach ($added_itemdata_list as $item_data_id => $itemdata) {
            if ($itemdata['foreign_key'] == 'grn.workflow.calc_numeric') {
                $calc_item = $itemdata['settings'];
                $property_for_updating = [
                    GRN_WORKFLOW_COLUMN_SETTINGS => 'settings',
                ];
                if ($calc_item['calc_type'] == 1) {
                    foreach (
                        $calc_item['calc_total']['values'] as $key =>
                        $calc_include_item
                    ) {
                        $itemdata['settings']['calc_total_by_item_data_id']['values'][$key]
                            = isset($item_id_to_itemdata_id[$calc_include_item])
                            ? (string)$item_id_to_itemdata_id[$calc_include_item]
                            : '';
                    }
                } elseif ($calc_item['calc_type'] == 0) {
                    $itemdata['settings']['calc_operator_by_item_data_id']
                        = $calc_item['calc_operator'];
                    if (array_key_exists('operand1_type',
                        $calc_item['calc_operator'])
                    ) {
                        $itemdata['settings']['calc_operator_by_item_data_id']['operand1_type']
                            = isset($item_id_to_itemdata_id[$calc_item['calc_operator']['operand1_type']])
                            ? (string)$item_id_to_itemdata_id[$calc_item['calc_operator']['operand1_type']]
                            : '';
                    }
                    if (array_key_exists('operand2_type',
                        $calc_item['calc_operator'])
                    ) {
                        $itemdata['settings']['calc_operator_by_item_data_id']['operand2_type']
                            = isset($item_id_to_itemdata_id[$calc_item['calc_operator']['operand2_type']])
                            ? (string)$item_id_to_itemdata_id[$calc_item['calc_operator']['operand2_type']]
                            : '';
                    }
                }
                $itemdata_logic->modify($item_data_id, $petition_id, $itemdata,
                    false, $property_for_updating);
            }
        }
    }
}

/**
 *  Item Data File Controller Utility Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_ItemDataFile_Controller_Utility
    extends GRN_Workflow_Controller_Utility_Base
{
    /** Item Data File Logic Instance **/
    var $_item_data_file_logic_base = null;

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
        //Get Logic Base Instance
        require_once('workflow/itemdatafile_logic_base.csp');
        $logic_base = GRN_Workflow_ItemDataFile_Logic_Base::getInstance();

        //Initialize Parent Class
        parent::__construct(GRN_WORKFLOW_TABLE_ITEMDATAFILE, $logic_base);
    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_ItemDataFile_Controller_Utility $instance                  //Instance of GRN_Workflow_ItemDataFile_Controller_Utility
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_ItemDataFile_Controller_Utility();
        }

        return $_instance;
    }

    /**
     * Get Item Data File View
     *
     * @param  int   $item_data_file_id //Item Data ID
     * @param  array $translation_map   //Model <=> View Translation Map
     * @param  int   $item_data_id      //Item Data ID
     * @param  bool  $refresh           //Refresh Flag
     * @param  int   $lock_mode         //Lock Mode
     *
     * @return array  $item_data_file_view       //Item Data File for View
     */
    function getView(
        $item_data_file_id,
        $translation_map,
        $item_data_id = null,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Create Column List
        $column_list = $this->createColumnlist($translation_map);

        //Get Item Data File
        $item_data_file_logic_base = $this->getLogicBase();
        if (is_null($item_data_id)) {
            $item_data_file
                = $item_data_file_logic_base->getDirect($item_data_file_id,
                $column_list, $lock_mode);
        } else {
            $item_data_file
                =& $item_data_file_logic_base->get($item_data_file_id,
                $item_data_id, $column_list, $refresh, $lock_mode);
        }

        //Get Item Data File View
        $item_data_file_for_view = $this->_getView($item_data_file,
            $translation_map);

        //Return Item Data View
        return $item_data_file_for_view;
    }

    /**
     * Get Item Data File List View
     *
     * @param  array $translation_map //Model <=> View Translation Map
     * @param  int   $item_data_id    //Item Data ID
     * @param  bool  $refresh         //Refresh Flag
     * @param  int   $lock_mode       //Lock Mode
     *
     * @return array  $item_data_file_view       //Item Data File for View
     */
    function getListView(
        $translation_map,
        $item_data_id = null,
        $type = null,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $item_data_file_list_for_view = [];

        //Create Column List
        $column_list = $this->createColumnlist($translation_map);

        //Get Item Data File List
        $item_data_file_list = [];
        $item_data_file_logic_base = $this->getLogicBase();
        $item_data_file_list
            =& $item_data_file_logic_base->getList($item_data_id,
            $column_list, $refresh, $lock_mode);

        //Create Parameter Translation for Item Data File List
        foreach (array_keys($item_data_file_list) as $item_data_file_id) {
            $item_data_file_list_for_view[$item_data_file_id]
                = $this->_getView($item_data_file_list[$item_data_file_id],
                $translation_map);
        }

        //Return Item Data File List View
        return $item_data_file_list_for_view;
    }
}

class GRN_Workflow_ControllerUtil extends GRN_ControllerUtil
{
    /**
     * @access private
     */
    var $_uum = null;
    /**
     * @access private
     */
    var $_dbconn = null;

    function __construct($page = null)
    {
        global $G_container_base;
        $this->_uum = $G_container_base->getInstance('uum');

        $app_locator = GRN_ApplicationLocator::instance();
        $this->_dbconn = $app_locator->getConnection('workflow');

        parent::__construct($page);
    }

    function validateProperties($props, $cols_info)
    {
        $retval = [];
        if (array_key_exists('necessary', $cols_info)) {
            foreach ($cols_info['necessary'] as $col) {
                if (array_key_exists($col, $props)) {
                    $retval[$col] = cb_trim_check($props[$col]);
                } else {
                    // 必須項目が空
                    require_once('workflow/error_code.csp');
                    cb_throw_error(E_GRN_WRKF_EMPTY_NECESSARY_ITEM);
                }
            }
        }

        if (array_key_exists('initial', $cols_info)) {
            foreach ($cols_info['initial'] as $col => $val) {
                if (array_key_exists($col, $props)) {
                    $retval[$col] = cb_trim($props[$col]);
                } else {
                    $retval[$col] = $val;
                }
            }
        }

        if (array_key_exists('usual', $cols_info)) {
            foreach ($cols_info['usual'] as $col) {
                if (array_key_exists($col, $props)) {
                    $retval[$col] = cb_trim($props[$col]);
                }
            }
        }

        return $retval;
    }

    function getPathStepMembersInfo($path_step)
    {
        $members = [];
        $member_total = 0;

        if ($path_step['col_skip']) {
            $members[] = ['type' => 'skip'];
            $member_total++;
        } else {
            $path_step_id = $path_step['_id'];
            $path_steps = [$path_step_id => $path_step];
            $members_info = $this->getPathMembersInfo($path_steps);
            $members = $members_info['members'][$path_step_id];
            $member_total = $members_info['member_total'][$path_step_id];
        }

        return [
            'members'      => $members,
            'member_total' => $member_total
        ];
    }

    function getPathMembersInfo($path_steps)
    {
        $members = [];
        $member_total = [];

        if (is_array($path_steps) && 0 < count($path_steps)) {
            foreach ($path_steps as $path_step) {
                $path_step_id = $path_step['_id'];
                if ($path_step['col_skip']) {
                    $members[$path_step_id] = [['type' => 'skip']];
                    $member_total[$path_step_id] = 1;
                } else {
                    $members[$path_step_id] = [];
                    $member_total[$path_step_id] = 0;
                }
            }

            $psids = array_keys($path_steps);

            require_once('workflow/path.csp');
            $columns = [
                'tab_grn_workflow_pathstepuser' => [
                    'col_path_step' => 'col_path_step',
                    'col_member'    => '_id'
                ]
            ];
            $logic = GRN_Workflow_PathStepUsers::getInstance();
            $path_step_users = $logic->getList($psids, $columns);

            require_once('workflow/availability_user.csp');
            $logic = GRN_Workflow_AvailabilityUsers::getInstance();
            $columns = ['tab_cb_user' => ['_id' => '_id']];

            require_once('grn/application.csp');
            $application_locator = GRN_ApplicationLocator::instance();
            /** @var GRN_Workflow_Application $application */
            $application
                = $application_locator->getInstance(GRN_WORKFLOW_APPLICATION_ID);
            $license_info = $application->getLicenseInfo();

            require_once('grn/license.csp');
            $lm = GRN_LicenseManager::getInstance();
            $is_demo_license = $lm->isDemoLicense($license_info['type']);
            foreach ($path_step_users as $path_step_id => $users) {
                if ( ! $is_demo_license) {
                    $users = $logic->getUsers(array_keys($users));
                    foreach ($users as $user) {
                        $tmpUserArray = $user->convertArray();
                        $tmpUserArray['type'] = 'user';
                        $tmpUserArray['col_member'] = $user->getId();
                        $members[$path_step_id][] = $tmpUserArray;
                        $member_total[$path_step_id]++;
                    }
                } else {
                    foreach ($users as $user) {
                        $tmpUserArray = $user;
                        $tmpUserArray['type'] = 'user';
                        $tmpUserArray['col_member'] = $user["_id"];
                        $members[$path_step_id][] = $tmpUserArray;
                        $member_total[$path_step_id]++;
                    }
                }
            }

            $columns = [
                'tab_grn_workflow_pathstepgroup' => [
                    '_id'           => '_id',
                    'col_path_step' => 'col_path_step',
                    'col_member'    => 'col_member'
                ]
            ];
            $logic = GRN_Workflow_PathStepGroups::getInstance();
            $path_step_groups = $logic->getList($psids, $columns);
            foreach ($path_step_groups as $path_step_id => $groups) {
                foreach ($groups as $group) {
                    $group['type'] = 'group';
                    $members[$path_step_id][] = $group;
                    $member_total[$path_step_id]++;
                }
            }

            foreach ($path_steps as $path_step) {
                $path_step_id = $path_step['_id'];
                if ($path_step['col_applicant']) {
                    $members[$path_step_id][] = ['type' => 'applicant'];
                    $member_total[$path_step_id]++;
                }
            }

            $columns = [
                'tab_grn_workflow_pathstepstaticrole' => [
                    '_id'           => '_id',
                    'col_path_step' => 'col_path_step',
                    'col_member'    => 'col_member',
                    'col_chief'     => 'col_chief'
                ]
            ];
            $logic = GRN_Workflow_PathStepStaticRoles::getInstance();
            $path_step_roles = $logic->getList($psids, $columns);
            foreach ($path_step_roles as $path_step_id => $roles) {
                foreach ($roles as $role) {
                    $role['type'] = 'static_role';
                    $members[$path_step_id][] = $role;
                    $member_total[$path_step_id]++;
                }
            }
        }

        return [
            'members'      => $members,
            'member_total' => $member_total
        ];
    }

    /**
     * 上長ロールを持つユーザーの取得
     *
     * @param   int $role_id  上長ロールID
     * @param   int $group_id 組織ID
     *
     * @return  array   処理者情報リスト
     */
    function _getChiefRoleUserInfo($role_id, $group_id)
    {
        if (0 == strlen($role_id) || 0 == strlen($group_id)) {
            return [];
        }

        $users = $this->_uum->getRoleUsersInfo($role_id, [$group_id]);
        if (is_array($users) && 0 < count($users)) {
            return $users;
        }

        $group = $this->_uum->getGroupInfo($group_id);
        if ($group !== false) {
            $group_id = $group['col_parent'];
            if (0 < strlen($group_id)) {
                return $this->_getChiefRoleUserInfo($role_id, $group_id);
            }
        }

        return [];
    }

    /**
     * 初期経路情報を取得
     *
     * @param   int   $applicant_id 申請者ID
     * @param   int   $path_id      経路ID
     * @param   array $psids        経路ステップIDリスト
     *
     * @return  array   経路情報
     */
    function getDefaultPathInfo($applicant_id, $path_id, $psids)
    {
        cb_trim_check($applicant_id, E_GRN_USER_NOT_FOUND);
        cb_trim_check($path_id, E_GRN_WRKF_INVALID_PATH_ID);
        if ( ! is_array($psids) || 0 == count($psids)) {
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_EMPTY_PATH_STEP);
        }

        require_once('workflow/path.csp');
        $logic = GRN_Workflow_Paths::getInstance();
        $columns = [
            '_id',
            'col_skip'
        ];
        $path = $logic->get($path_id, $columns);

        $logic = GRN_Workflow_PathSteps::getInstance();
        $columns = [
            '_id',
            'col_type',
            'col_acceptance_type',
            'col_role',
            'col_code',
            'col_skip',
            'col_applicant',
            'col_change_path',
            'col_deny_change_path',
            'col_list_index'
        ];
        $path_steps = $logic->getList($path_id, $psids, null, $columns);
        $previous = null;
        $step_count = 1;
        foreach (array_keys($path_steps) as $path_step_id) {
            $path_step =& $path_steps[$path_step_id];

            if (is_null($path_step['col_code'])
                || strlen($path_step['col_code']) == 0
            ) {
                $path_step['col_code'] = "$" . $step_count;
            }
            $step_count++;

            $path_step['col_path_step'] = $path_step_id;

            if ($previous) {
                $previous['next'] =& $path_step;
            }
            if (array_key_exists('previous', $path_step)) {
                unset($path_step['previous']);
            }
            if (array_key_exists('next', $path_step)) {
                unset($path_step['next']);
            }
            $path_step['previous'] =& $previous;
            $path_step['next'] = null;
            $previous =& $path_step;
        }
        $psids = array_keys($path_steps);

        $user_info = $this->_uum->getUserInfo($applicant_id);


        $users_info = [];
        foreach ($psids as $path_step_id) {
            $path_step =& $path_steps[$path_step_id];

            // （申請者）ロールをユーザーに変換
            $users_info[$path_step_id] = [];
            if ($path_step['col_applicant']) {
                $users_info[$path_step_id][$user_info['_id']] = $user_info;
            }

            // （省略）のときは経路ステップにいるユーザーをすべて削除
            $path_step['users'] = [];
            $path_step['uids'] = [];
            if ($path_step['col_skip']) {
                unset($users_info[$path_step_id]);
                $path_step['users'][] = [
                    '_id'              => 0,
                    'col_display_name' => cb_plain_msg('grn.workflow', 'skip'),
                    'col_foreign_key'  => cb_plain_msg('grn.workflow', 'skip')
                ];
                $path_step['uids'][] = 0;
            }
        }

        $columns = [
            'tab_grn_workflow_pathstepuser' => [
                '_id'           => '_id',
                'col_member'    => 'col_member',
                'col_path_step' => 'col_path_step'
            ]
        ];
        $logic = GRN_Workflow_PathStepUsers::getInstance();
        $path_step_users = $logic->getList($psids, $columns);
        foreach ($path_step_users as $path_step_id => $users) {
            foreach ($users as $user) {
                $users_info[$path_step_id][$user['col_member']] = $user;
            }
        }

        $columns = [
            'tab_grn_workflow_pathstepgroup' => [
                '_id'           => '_id',
                'col_member'    => 'col_member',
                'col_path_step' => 'col_path_step'
            ]
        ];
        $logic = GRN_Workflow_PathStepGroups::getInstance();
        $path_step_groups = $logic->getList($psids, $columns);
        require_once('workflow/availability_user.csp');
        $logic = GRN_Workflow_AvailabilityUsers::getInstance();

        require_once('grn/application.csp');
        $application_locator = GRN_ApplicationLocator::instance();
        /** @var GRN_Workflow_Application $application */
        $application
            = $application_locator->getInstance(GRN_WORKFLOW_APPLICATION_ID);
        $license_info = $application->getLicenseInfo();
        require_once('grn/license.csp');
        $lm = GRN_LicenseManager::getInstance();
        $is_demo_license = $lm->isDemoLicense($license_info['type']);
        foreach ($path_step_groups as $path_step_id => $groups) {
            foreach ($groups as $group) {
                if ($is_demo_license) {
                    $columns = ['tab_cb_user._id'];
                    $users_info[$path_step_id] += $this->_uum->getGroupUsersInfo($group['col_member'],
                        0, -1, $columns);
                } else {
                    $tmpUserList = $logic->getGroupUsers($group['col_member']);
                    $tmpUserArray = [];
                    foreach ($tmpUserList as $eachTmpUserId => $eachTmpUser) {
                        $tmpUserArray[$eachTmpUserId] = [
                            "_id"              => $eachTmpUser->getId(),
                            "col_display_name" => $eachTmpUser->getDisplayName(),
                            "col_foreign_key"  => $eachTmpUser->getForeignKey(),
                            "col_valid"        => $eachTmpUser->getValid(),
                        ];
                    }
                    $users_info[$path_step_id] += $tmpUserArray;
                }
            }
        }

        $columns = [
            'tab_grn_workflow_pathstepstaticrole' => [
                '_id'           => '_id',
                'col_member'    => 'col_member',
                'col_path_step' => 'col_path_step',
                'col_chief'     => 'col_chief'
            ]
        ];
        $logic = GRN_Workflow_PathStepStaticRoles::getInstance();
        $path_step_roles = $logic->getList($psids, $columns);
        $primary_group = $this->_uum->getUserPrimaryGroupInfo($applicant_id);
        foreach ($path_step_roles as $path_step_id => $roles) {
            foreach ($roles as $role) {
                if ($role['col_chief']) {
                    // ロールを上長評価しユーザーに変換
                    $primaryGroupId = ($primary_group === false) ? ''
                        : $primary_group['_id'];
                    $users_info[$path_step_id] += $this->_getChiefRoleUserInfo($role['col_member'],
                        $primaryGroupId);
                } else {
                    // ロールをユーザーに変換
                    $users_info[$path_step_id] += $this->_uum->getRoleUsersInfo($role['col_member']);
                }
            }
        }

        $duplication_count = 0;
        $columns = [
            'col_display_name',
            'col_foreign_key'
        ];
        $logic = GRN_Workflow_AvailabilityUsers::getInstance();
        $columns1 = [
            'col_display_name',
            'col_foreign_key',
            'col_display_name_language',
            'col_nickname',
            'col_position'
        ];

        foreach (array_keys($users_info) as $path_step_id) {
            $path_step =& $path_steps[$path_step_id];
            $uids = array_keys($users_info[$path_step_id]);

            // ユーザーが空
            if (0 == count($uids)) {
                continue;
            }

            // 承認経路で申請者の重複を禁止
            if (GRN_WORKFLOW_ACCEPTANCE == $path_step['col_type']
                && $path['col_skip']
            ) {
                $index = array_search($applicant_id, $uids);
                if (false !== $index) {
                    if (0 < $duplication_count) {
                        unset($uids[$index]);
                    }
                    $duplication_count++;
                }
            }

            // 重複を禁止してユーザーが空になったら（省略）
            if (0 < count($uids)) {
                if ($is_demo_license) {
                    $temp = $this->_uum->getUsersInfo($uids,
                        $columns1);
                    $path_step['users'] = $logic->setDisplayUsersName($temp);
                } else {
                    $tempUsers = $logic->getUsers($uids);
                    $tempUsersArray = [];
                    foreach ($tempUsers as $eachTempUser) {
                        $tempUsersArray[$eachTempUser->getId()]
                            = $eachTempUser->convertArray();
                    }
                    $path_step['users']
                        = $logic->setDisplayUsersName($tempUsersArray);
                }
                $path_step['uids'] = array_keys($path_step['users']);
            } else {
                $path_step['col_skip'] = true;
                $path_step['users'][] = [
                    '_id'              => 0,
                    'col_display_name' => cb_plain_msg('grn.workflow', 'skip'),
                    'col_foreign_key'  => cb_plain_msg('grn.workflow', 'skip')
                ];
                $path_step['uids'][] = 0;
            }
        }

        return $path_steps;
    }

    /**
     * 経路情報リストを追加
     *
     * @param   int   $petition_id  申請ID
     * @param   array $path_steps   経路ステップ情報リスト
     * @param   array $active_psids 有効な経路ステップIDリスト
     */
    function addPathInfo($petition_id, $path_steps, $active_psids)
    {
        $this->connectPathStepLink($path_steps);

        $previous = null;
        foreach (array_keys($path_steps) as $path_step_id) {
            $path_step =& $path_steps[$path_step_id];
            $path_step['_id'] = $path_step_id;
            $path_step['col_activate'] = false !== array_search($path_step_id,
                    $active_psids);
            $path_step['col_finished'] = false;
            $path_step['col_path_step'] = $path_step_id;
            $path_step['col_petition'] = $petition_id;
            $path_step['col_skip'] = false;

            if ($previous) {
                $previous['next'] =& $path_step;
            }
            if (array_key_exists('previous', $path_step)) {
                unset($path_step['previous']);
            }
            if (array_key_exists('next', $path_step)) {
                unset($path_step['next']);
            }
            $path_step['previous'] =& $previous;
            $path_step['next'] = null;
            $previous =& $path_step;
            unset($path_step);
        }

        require_once('workflow/path_data.csp');
        $logic = GRN_Workflow_PathStepDatas::getInstance();
        $columns_info = $logic->getColumnsInfo();

        require_once('workflow/path.csp');
        $path_steps_logic = GRN_Workflow_PathSteps::getInstance();
        $exists_path_steps = $path_steps_logic->getList(null,
            array_keys($path_steps), null, ['_id']);

        $path_step_datas = [];
        $records = [];
        $in_process = false;
        foreach (array_keys($path_steps) as $path_step_id) {
            if ( ! array_key_exists($path_step_id, $exists_path_steps)) {
                require_once('workflow/error_code.csp');
                cb_throw_error(E_GRN_WRKF_NOT_FOUND_PATH_STEP);
            }

            $path_step =& $path_steps[$path_step_id];
            $users =& $path_step['users'];
            if ( ! is_array($users) || 0 == count($users)) {
                $path_step['col_skip'] = true;
            }
            $uids =& $path_step['uids'];
            if (false !== array_search(GRN_WORKFLOW_RESULT_SKIP, $uids)) {
                $path_step['col_skip'] = true;
            }
            $properties = $this->validateProperties($path_step,
                $columns_info);
            $path_step_data_id = $logic->add($properties);
            $path_step['col_path_step_data'] = $path_step_data_id;

            if ($path_step['col_skip']) {
                if ($path_step['col_activate']) {
                    if ($this->isLastAcceptancePathStep($path_step)) {
                        // 最終承認の経路ステップは省略できない
                        require_once('workflow/error_code.csp');
                        cb_throw_error(E_GRN_WRKF_DENY_SKIP_PATH_STEP_DATA);
                    }
                }
                $path_step['users'] = [];
                $path_step['uids'] = [];
            } else {
                $uids = [];
                $col_position = 0;
                foreach ($users as $user) {
//                    if(0 < strlen($user['_id']))
//                    {
                    $uids[] = $user['_id'];
//                    }

                    $records[] = [
                        'col_path_step_data' => $path_step_data_id,
                        'col_user'           => $user['_id'],
                        'col_display_name'   => $user['col_display_name'],
                        'col_foreign_key'    => $user['col_foreign_key'],
                        'col_position'       => $col_position++,
                        'col_result'         => GRN_WORKFLOW_RESULT_UNPROCESSING
                    ];
                }
                $path_step['uids'] = $uids;
            }
            $path_step['user_count'] = count($path_step['users']);

            if ($path_step['col_activate'] && ! $path_step['col_skip']
                && ! $in_process
            ) {
                $path_step['in_process'] = true;
                $in_process = true;
            } else {
                $path_step['in_process'] = false;
            }
        }

        if (is_array($records) && 0 < count($records)) {
            $logic = GRN_Workflow_PathStepDataUsers::getInstance();
            $columns = [
                'col_path_step_data',
                'col_user',
                'col_display_name',
                'col_foreign_key',
                'col_position',
                'col_result'
            ];
            $logic->addList($columns, $records);
        }

        return $path_steps;
    }

    /**
     * 経路情報を変更
     *
     * @param   int   $petition_id  申請ID
     * @param   array $path_steps   経路ステップ情報リスト
     * @param   array $active_psids 有効な経路ステップIDリスト
     *
     * @return  array   経路情報
     */
    function modifyPathInfo($petition_id, $path_steps, $active_psids)
    {
        $old_path_steps = $this->getPathInfo($petition_id);
        if ( ! is_array($old_path_steps) || 0 == count($old_path_steps)) {
            return $this->addPathInfo($petition_id, $path_steps, $active_psids);
        }

        require_once('workflow/path_data.csp');
        $logic = GRN_Workflow_PathStepDatas::getInstance();
        $columns_info = $logic->getColumnsInfo();

        $previous = null;
        foreach (array_keys($path_steps) as $path_step_id) {
            $path_step =& $path_steps[$path_step_id];
            $path_step['_id'] = $path_step_id;
            $path_step['col_activate'] = false
                                         !== array_search($path_step['col_path_step'],
                    $active_psids);
            $path_step['col_finished'] = false;
            $path_step['col_petition'] = $petition_id;
            $path_step['col_skip'] = false;

            if ($previous) {
                $previous['next'] =& $path_step;
            }
            if (array_key_exists('previous', $path_step)) {
                unset($path_step['previous']);
            }
            if (array_key_exists('next', $path_step)) {
                unset($path_step['next']);
            }
            $path_step['previous'] =& $previous;
            $path_step['next'] = null;
            $previous =& $path_step;
            unset($path_step);
        }

        $list_index = 0;
        $add_users = [];
        $modify_users = [];
        $delete_users = [];
        $in_process = false;
        foreach (array_keys($path_steps) as $path_step_id) {
            $path_step =& $path_steps[$path_step_id];

            $users =& $path_step['users'];
            if ( ! is_array($users) || 0 == count($users)) {
                $path_step['col_skip'] = true;
            }
            $uids =& $path_step['uids'];
            if (false !== array_search(GRN_WORKFLOW_RESULT_SKIP, $uids)) {
                $path_step['col_skip'] = true;
            }

            $properties = $this->validateProperties($path_step,
                $columns_info);
            $properties['col_list_index'] = $list_index++;

            if (array_key_exists('col_path_step_data', $path_step)) {
                $path_step_data_id = $path_step['col_path_step_data'];
                $old_path_step =& $old_path_steps[$path_step_data_id];
                $logic->modify($path_step_data_id, $properties);
                $path_step['col_path_step_data'] = $path_step_data_id;

                if ($path_step['col_skip']) {
                    if ($path_step['col_activate']) {
                        if ($this->isLastAcceptancePathStep($path_step)) {
                            // 最終承認の経路ステップは省略できない
                            require_once('workflow/error_code.csp');
                            cb_throw_error(E_GRN_WRKF_DENY_SKIP_PATH_STEP_DATA);
                        }
                    }
                    $path_step['users'] = [];
                    $path_step['uids'] = [];
                    foreach ($old_path_step['users'] as $old_user) {
                        $delete_users[$old_user['pid']] = $old_user;
                    }
                } else {
                    $old_users =& $old_path_step['users'];
                    $old_uids =& $old_path_step['uids'];
                    $uids = [];
                    $col_position = 0;
                    foreach ($users as $user) {
                        $user_id = $user['_id'];
//                        if(0 < strlen($user_id))
//                        {
                        $uids[] = $user_id;
//                        }
                        $user = [
                            'col_path_step_data' => $path_step_data_id,
                            'col_user'           => $user_id,
                            'col_display_name'   => $user['col_display_name'],
                            'col_foreign_key'    => $user['col_foreign_key'],
                            'col_position'       => $col_position++,
                            'col_result'         => GRN_WORKFLOW_RESULT_UNPROCESSING
                        ];

                        if (false === ($result = array_search($user_id,
                                $old_uids))
                        ) {
                            $add_users[] = $user;
                        } else {
                            $modify_users[$old_users[$result]['pid']] = $user;
                            unset($old_users[$result]);
                        }
                    }
                    foreach ($old_users as $old_user) {
                        $delete_users[$old_user['pid']] = $old_user;
                    }
                    $path_step['uids'] = $uids;
                }
                unset($old_path_steps[$path_step_data_id]);
            } else {
                $path_step_data_id = $logic->add($properties);
                $path_step['col_path_step_data'] = $path_step_data_id;

                if ($path_step['col_skip']) {
                    if ($path_step['col_activate']) {
                        if ($this->isLastAcceptancePathStep($path_step)) {
                            // 最終承認の経路ステップは省略できない
                            require_once('workflow/error_code.csp');
                            cb_throw_error(E_GRN_WRKF_DENY_SKIP_PATH_STEP_DATA);
                        }
                    }
                    $path_step['users'] = [];
                    $path_step['uids'] = [];
                } else {
                    $uids = [];
                    $col_position = 0;
                    foreach ($users as $user) {
//                        if(0 < strlen($user_id))
//                        {
                        $user_id = $user['_id'];
//                        }
                        $add_users[] = [
                            'col_path_step_data' => $path_step_data_id,
                            'col_user'           => $user_id,
                            'col_display_name'   => $user['col_display_name'],
                            'col_foreign_key'    => $user['col_foreign_key'],
                            'col_position'       => $col_position++,
                            'col_result'         => GRN_WORKFLOW_RESULT_UNPROCESSING
                        ];
                        $uids[] = $user_id;
                    }
                    $path_step['uids'] = $uids;
                }
            }

            if ($path_step['col_activate'] && ! $path_step['col_skip']
                && ! $in_process
            ) {
                $path_step['in_process'] = true;
                $in_process = true;
            } else {
                $path_step['in_process'] = false;
            }
        }

        if (is_array($old_path_steps) && 0 < count($old_path_steps)) {
            $logic = GRN_Workflow_PathStepDatas::getInstance();
            $logic->removeList(array_keys($old_path_steps));
        }

        if (is_array($add_users) && 0 < count($add_users)) {
            $logic = GRN_Workflow_PathStepDataUsers::getInstance();
            $columns = [
                'col_path_step_data',
                'col_user',
                'col_display_name',
                'col_foreign_key',
                'col_position',
                'col_result'
            ];
            $logic->addList($columns, $add_users);
        }

        foreach ($modify_users as $path_step_data_user_id => $modify_user) {
            $logic = GRN_Workflow_PathStepDataUsers::getInstance();
            $logic->modify($path_step_data_user_id, $modify_user);
        }

        if (is_array($delete_users) && 0 < count($delete_users)) {
            $logic = GRN_Workflow_PathStepDataUsers::getInstance();
            $logic->removeList(array_keys($delete_users));
        }

        return $path_steps;
    }

    /**
     * 経路情報を取得
     *
     * @param   int     $petition_id 申請ID
     * @param   boolean $unserialize シリアライズ解凍フラグ
     *
     * @return  array   経路情報
     */
    function getPathInfo(
        $petition_id,
        $unserialize = false,
        $lock = CB_DATABASE_DEFAULT_LOCK
    ) {
        require_once('workflow/path_data.csp');
        $logic = GRN_Workflow_PathStepDatas::getInstance();
        $columns = [
            '_id',
            'col_petition',
            'col_activate',
            'col_finished',
            'col_path_step',
            'col_type',
            'col_acceptance_type',
            'col_role',
            'col_skip',
            'col_applicant',
            'col_deny_change_path',
            'col_change_path'
        ];
        $path_steps = $logic->getListByPetitionId($petition_id, $columns, 0, -1,
            $lock);
        if ( ! is_array($path_steps) || count($path_steps) === 0) {
            return [];
        }

        $step_count = 1;
        $path_step_ids = [];
        foreach ($path_steps as $key => $path_step) {
            $path_steps[$key][GRN_WORKFLOW_COLUMN_STEP_CODE] = "$"
                                                               . $step_count;
            if ( ! is_null($path_step['col_path_step'])) {
                $path_step_ids[] = $path_step['col_path_step'];
            }

            $step_count++;
        }
        require_once('workflow/path.csp');
        $path_steps_logic = GRN_Workflow_PathSteps::getInstance();
        $path_step_codes = $path_steps_logic->getList(null, $path_step_ids,
            null, ['col_code']);
        foreach ($path_steps as $key => $path_step) {
            $code = cb_at($path_step_codes, $path_step['col_path_step'], null);
            if ( ! is_null($code) && strlen(cb_at($code, 'col_code', '')) > 0) {
                $path_steps[$key][GRN_WORKFLOW_COLUMN_STEP_CODE]
                    = $code['col_code'];
            }
        }

        $logic = GRN_Workflow_PathStepDataUsers::getInstance();
        $columns = [
            'tab_grn_workflow_pathstepdatauser' => [
                '_id'                    => 'pid',
                'col_path_step_data'     => 'col_path_step_data',
                'col_user'               => 'col_user',
                'col_display_name'       => 'col_display_name',
                'col_foreign_key'        => 'col_foreign_key',
                'col_position'           => 'col_position',
                'col_result'             => 'col_result',
                'col_ptime'              => 'col_ptime',
                'col_comment'            => 'col_comment',
                'col_agent_user'         => 'col_agent_user',
                'col_agent_display_name' => 'col_agent_display_name',
                'col_agent_foreign_key'  => 'col_agent_foreign_key',
            ],
            'tab_cb_user'                       => [
                '_id'              => '_id',
                'col_display_name' => 'col_current_display_name',
                'col_position'     => 'col_current_position',
                'col_valid'        => 'col_valid'
            ]
        ];
        $tmp = $logic->getListByPathStepDataIds(array_keys($path_steps),
            $columns, 0, -1, $lock);

        $users = [];
        $uids = [];
        foreach ($tmp as $user) {
            $path_step_data_id = $user['col_path_step_data'];
            if ( ! array_key_exists($path_step_data_id, $users)) {
                $users[$path_step_data_id] = [];
            }
            if ( ! array_key_exists($path_step_data_id, $uids)) {
                $uids[$path_step_data_id] = [];
            }

            $user['_agent_id'] = null;
            $user['col_agent_current_display_name'] = null;
            $user['col_agent_current_position'] = null;
            $user['col_agent_valid'] = null;
            if ( ! is_null($user['col_agent_user'])) {
                $columns = [
                    '_id',
                    'col_display_name',
                    'col_position',
                    'col_valid'
                ];
                $user_info = $this->_uum->getUserInfo($user['col_agent_user'],
                    $columns);
                if (is_array($user_info)) {
                    $user['_agent_id'] = $user_info['_id'];
                    $user['col_agent_current_display_name']
                        = $user_info['col_display_name'];
                    $user['col_agent_current_position']
                        = $user_info['col_position'];
                    $user['col_agent_valid']
                        = $user_info['col_valid'];
                }
            }

            $users[$path_step_data_id][] = $user;
            $uids[$path_step_data_id][] = $user['_id'];
        }

        $previous_id = false;
        foreach (array_keys($path_steps) as $path_step_id) {
            $path_steps[$path_step_id]['col_path_step_data']
                = $path_steps[$path_step_id]['_id'];

            $path_steps[$path_step_id]['users'] = [];
            $path_steps[$path_step_id]['uids'] = [];
            if ( ! $path_steps[$path_step_id]['col_skip']) {
                if (array_key_exists($path_step_id, $users)) {
                    $path_steps[$path_step_id]['users']
                        =& $users[$path_step_id];
                    $path_steps[$path_step_id]['uids'] =& $uids[$path_step_id];

                    foreach (array_keys($users[$path_step_id]) as $key) {
                        $user =& $users[$path_step_id][$key];
                        if ($user['col_ptime']) {
                            $timestamp = new CB_TimeStamp();
                            $timestamp->unix_ts = $user['col_ptime'];
                            $user['col_ptime'] = $timestamp;
                        }
                        if ($unserialize && 0 < strlen($user['col_comment'])) {
                            $user['col_comment']
                                = cb_unserialize($user['col_comment'],
                                ["allowed_classes" => ["CB_TimeStamp"]]);
                        }
                    }
                }
            }
            $path_steps[$path_step_id]['user_count']
                = count($path_steps[$path_step_id]['users']);
            $path_steps[$path_step_id]['in_process'] = false;

            if ($previous_id !== false) {
                $path_steps[$previous_id]['next'] =& $path_steps[$path_step_id];
            }
            if (array_key_exists('previous', $path_steps[$path_step_id])) {
                unset($path_steps[$path_step_id]['previous']);
            }
            if (array_key_exists('next', $path_steps[$path_step_id])) {
                unset($path_steps[$path_step_id]['next']);
            }
            if ($previous_id !== false) {
                $path_steps[$path_step_id]['previous']
                    =& $path_steps[$previous_id];
            } else {
                $path_steps[$path_step_id]['previous'] = null;
            }
            $path_steps[$path_step_id]['next'] = null;
            $previous_id = $path_step_id;
        }
        $this->setLastAcceptance($path_steps);

        return $path_steps;
    }

    /**
     * 経路ステップ情報を取得
     *
     * @param   int $petition_id
     * @param   int $path_step_data_id
     *
     * @return  array
     */
    function getPathStepInfo($petition_id, $path_step_id)
    {
        require_once('workflow/path_data.csp');
        $logic = GRN_Workflow_PathStepDatas::getInstance();
        $columns = [
            '_id',
            'col_petition',
            'col_activate',
            'col_finished',
            'col_path_step',
            'col_type',
            'col_acceptance_type',
            'col_role',
            'col_skip',
            'col_applicant',
            'col_change_path'
        ];
        $path_step = $logic->get($path_step_id, $columns);
        if ( ! is_array($path_step) || 0 == count($path_step)) {
            // 指定された経路ステップがない
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_NOT_FOUND_PATH_STEP_DATA);
        }
        if ($petition_id != $path_step['col_petition']) {
            // 申請に指定された経路ステップがない
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_NOT_FOUND_PATH_STEP_DATA);
        }

        $logic = GRN_Workflow_PathStepDataUsers::getInstance();
        $columns = [
            'tab_grn_workflow_pathstepdatauser' => [
                '_id'                => 'pid',
                'col_path_step_data' => 'col_path_step_data',
                'col_user'           => 'col_user',
                'col_display_name'   => 'col_display_name',
                'col_foreign_key'    => 'col_foreign_key',
                'col_position'       => 'col_position',
                'col_result'         => 'col_result',
                'col_ptime'          => 'col_ptime',
                'col_comment'        => 'col_comment'
            ],
            'tab_cb_user'                       => [
                '_id'              => '_id',
                'col_display_name' => 'col_current_display_name',
                'col_position'     => 'col_current_position',
                'col_invalid'      => 'col_valid'
            ]
        ];
        $users = $logic->getListByPathStepDataIds(array_keys($path_step_id),
            $columns);

        $uids = [];
        foreach ($users as $user) {
//            if(0 < strlen($user['_id']))
//            {
            $uids[] = $user['_id'];
//            }
        }

        $path_step['users'] = [];
        if ( ! $path_step['col_skip']) {
            if (is_array($users) && 0 < count($users)) {
                $path_step['users'] =& $users[$path_step_id];

                foreach (array_keys($users[$path_step_id]) as $user_id) {
                    $user =& $users[$path_step_id][$user_id];

                    if ($user['col_ptime']) {
                        $timestamp = new CB_TimeStamp();
                        $timestamp->unix_ts = $user['col_ptime'];
                        $user['col_ptime'] = $timestamp;
                    }
                }
            }
        }
        $path_step['uids'] = $uids;
        $path_step['user_count'] = count($path_step['users']);
        $path_step['in_process'] = false;

        return $path_step;
    }

    /**
     * 処理中の経路ステップIDを取得
     *
     * @param   array $path_step
     *
     * @return  int
     */
    function getInProcessPathStepId(& $path_step)
    {
        while ($path_step) {
            if ($path_step['col_activate'] && ! $path_step['col_skip']
                && ! $path_step['col_finished']
            ) {
                return $path_step['_id'];
            }
            $p =& $path_step['next'];
            unset($path_step);
            $path_step =& $p;
            unset($p);
//            $path_step =& $path_step['next'];
        }
        $ret = false;

        return $ret;
    }

    /**
     * 処理中の経路ステップを取得
     *
     * @param   array $path_step
     *
     * @return  array
     */
    function &getInProcessPathStep(& $path_step)
    {
        while ($path_step) {
            if ($path_step['col_activate'] && ! $path_step['col_skip']
                && ! $path_step['col_finished']
            ) {
                return $path_step;
            }
//            $path_step =& $path_step['next'];
            $p =& $path_step['next'];
            unset($path_step);
            $path_step =& $p;
            unset($p);
//            $path_step =& $path_step['next'];
        }
        $ret = false;

        return $ret;
    }

    function getRejectionPathStepId(& $path_step)
    {
        while ($path_step) {
            if ($path_step['col_activate'] && ! $path_step['col_skip']
                && GRN_WORKFLOW_FINISHED_REJECTION == $path_step['col_finished']
            ) {
                return $path_step['_id'];
            }
//            $path_step =& $path_step['next'];
            $p =& $path_step['next'];
            unset($path_step);
            $path_step =& $p;
            unset($p);
//            $path_step =& $path_step['next'];
        }

        return false;
    }

    function &getLastAcceptancePathStep($path_step)
    {
        while ($path_step) {
            if ($path_step['col_activate']) {
                if ($this->isLastAcceptancePathStep($path_step)) {
                    return $path_step;
                }
            }
            $path_step = $path_step['next'];
        }
        $ret = false;

        return $ret;
    }

    function getLastAcceptancePathStepId(& $path_step)
    {
        while ($path_step) {
            if ($path_step['col_activate']) {
                if ($this->isLastAcceptancePathStep($path_step)) {
                    return $path_step['_id'];
                }
            }
//            $path_step =& $path_step['next'];
            $p =& $path_step['next'];
            unset($path_step);
            $path_step =& $p;
            unset($p);
//            $path_step =& $path_step['next'];
        }
        $ret = false;

        return $ret;
    }

    public function setLastAcceptance(&$path_steps)
    {
        $key = key($path_steps);
        $last_path_step_id
            = $this->getLastAcceptancePathStepId($path_steps[$key]);
        if (false !== $last_path_step_id) {
            $path_steps[$last_path_step_id]['last_acceptance'] = true;
        }
    }

    /**
     * 経路変更のアクセス制限を評価
     *
     * @param   array $path_steps
     * @param   int   $user_id
     * @param   int   $folder_id
     * @param   int   $applicant_id
     */
    function ekePathInfo(
        & $path_steps,
        $user_id,
        $status,
        $folder_id = null,
        $applicant_id = null,
        $agent_id = null
    ) {
        require_once('workflow/config.csp');
        $configs = GRN_Workflow_Configs::getInstance();
        $config = $configs->getSystemConfig();
        $change_path_info = $config->getChangePathInfo();

        $not_modify = true;
        switch ($user_id) {
            case GRN_WORKFLOW_SYSTEM_ADMIN:     // システム管理者
                if ($change_path_info['system_admin']) {
                    $not_modify = false;
                }
                break;
            case GRN_WORKFLOW_OPERATOR_ADMIN:   // 運用管理者
                if ($change_path_info['operation_admin']) {
                    $not_modify = false;
                }
                break;
            default:                            // 一般ユーザー
                require_once('workflow/folder_logic.csp');
                $logic = GRN_Workflow_Folder_Logic::getInstance();
                $folder = $logic->getSpecific($folder_id);
                if ( ! is_array($folder) || 0 == count($folder)) {
                    // 指定されたユーザーはフォルダの所有者でない
                    require_once('workflow/error_code.csp');
                    cb_throw_error(E_GRN_WRKF_FOLDER_INVALID_FOLDER_ID);
                }

                // 送信一覧は申請者
                if (GRN_WORKFLOW_FOLDER_TYPE_OUT_ID
                    == $folder['col_folder_type']
                ) {
                    if ($change_path_info['applicant']) {
                        if ($user_id == $applicant_id || $user_id == $agent_id
                        ) {
                            $not_modify = false;
                        }
                    }
                }
                break;
        }

        $in_process = false;
        foreach (array_keys($path_steps) as $path_step_id) {
            $path_step =& $path_steps[$path_step_id];

            $path_step['not_modify'] = true;
            if ($in_process) {
                if (GRN_WORKFLOW_STATUS_REMAND == $status) {
                    $not_modify = false;
                }

                // 処理中以降は許可
                $path_step['not_modify'] = false | $not_modify;
            } else {
                $path_step['not_modify'] = true;
                if ($path_step['col_activate'] && ! $path_step['col_skip']) {
                    if ( ! $path_step['col_finished']) {
                        if (0 < $user_id) {
                            // 未処理一覧は経路変更を許可した経路ステップの処理者
                            if (GRN_WORKFLOW_FOLDER_TYPE_UNPROCESSED_ID
                                == $folder['col_folder_type']
                            ) {
                                $not_modify = true;
                                if ($path_step['col_change_path']) {
                                    if (false !== array_search($user_id,
                                            $path_step['uids'])
                                    ) {
                                        $not_modify = false;
                                    }
                                }
                            }
                        }

                        $in_process = true;
                        $path_step['in_process'] = true;
                        $path_step['not_modify'] = false | $not_modify;
                    }
                }
            }
        }
    }

    /**
     * 経路ステップが最終承認か確認
     *
     * @param   array $path_step
     *
     * @return  boolean
     */
    function isLastAcceptancePathStep($path_step)
    {
        if ( ! is_array($path_step) || 0 == count($path_step)) {
            return false;
        }
        if (GRN_WORKFLOW_CIRCULAR == $path_step['col_type']) {
            return false;
        }

        if ( ! is_array($path_step['next']) || 0 == count($path_step['next'])) {
            return true;
        }
        if (GRN_WORKFLOW_CIRCULAR == $path_step['next']['col_type']) {
            return true;
        }

        while ($path_step['next']) {
            if ($path_step['next']['col_activate']) {
                if (GRN_WORKFLOW_CIRCULAR == $path_step['next']['col_type']) {
                    return true;
                }

                return false;
            }

            $path_step = $path_step['next'];
        }

        return true;
    }

    function getTopPathStep(& $path_step)
    {
        $previous =& $path_step['previous'];
        while ($previous) {
            $p =& $path_step['previous'];
            unset($path_step);
            $path_step =& $p;
            unset($p);
            unset($previous);
            $previous =& $path_step['previous'];
        }

        return $path_step;
    }

    function isOnlyCircularPathSteps(& $path_step)
    {
        while ($path_step) {
            if ($path_step['col_activate']) {
                if (GRN_WORKFLOW_CIRCULAR != $path_step['col_type']) {
                    return false;
                }
            }
//            $path_step =& $path_step['next'];
            $p =& $path_step['next'];
            unset($path_step);
            $path_step =& $p;
            unset($p);
//            $path_step =& $path_step['next'];
        }

        return true;
    }

    /**
     * データベースをロックして経路情報を取得
     *
     * @param   int $path_step_id
     *
     * @return  array
     */
    function getLockedPathInfo($path_step_id)
    {
        // 処理する経路ステップを（更新ロックをかけて）取得
        require_once('workflow/path_data.csp');
        $logic = GRN_Workflow_PathStepDatas::getInstance();
        $columns = [
            '_id',
            'col_petition',
            'col_finished'
        ];
        $path_step = $logic->get($path_step_id, $columns,
            CB_DATABASE_EXCLUSIVE_LOCK);

        // 経路を取得
        return $this->getPathInfo($path_step['col_petition']);
    }

    /**
     * 処理者の結果を変更
     *
     * @param   int     $path_step_id
     * @param   int     $user_id
     * @param   int     $result
     * @param   string  $comment
     * @param   int     $ptime
     * @param   boolean $register
     *
     * @return  array
     */
    function modifyUserResult(
        $path_step_id,
        $user_id,
        $result,
        $comment,
        $ptime,
        $register = true,
        $forced = true,
        $agent_id = null
    ) {
        $path_steps = $this->getLockedPathInfo($path_step_id);

        // 経路ステップが処理されたか確認
        $path_step =& $path_steps[$path_step_id];
        if ($path_step['col_finished'] && $forced) {
            // 指定された経路ステップは処理された
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_FINISHED_PATH_STEP_DATA);
        }

        // 指定のユーザーが処理者に含まれるか確認
        if ( ! array_key_exists('users', $path_step)) {
            assert('FALSE');
        }
        $users =& $path_step['users'];
        if ( ! is_array($users) || 0 == count($users)) {
            // 処理者が空（経路ステップは省略のはず）
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_SKIP_PATH_STEP_DATA);
        }

        $uids =& $path_step['uids'];
        if (false === ($key = array_search($user_id, $uids))) {
            // 指定されたユーザーは処理者でない
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_NOT_TRANSACTOR_USER);
        }
        $user =& $users[$key];

        // 処理者（指定のユーザー）が未処理か確認
        if (GRN_WORKFLOW_RESULT_UNPROCESSING != $user['col_result']) {
            // 指定されたユーザーは処理した
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_FINISHED_TRANSACTOR);
        }

        $comments = [];
        if (0 < strlen($user['col_comment'])) {
            $comments = cb_unserialize($user['col_comment'],
                ["allowed_classes" => ["CB_TimeStamp"]]);
        }
        $comments['current'] = $comment;

        $agent_name = null;
        $agent_foreign_key = null;
        if ( ! is_null($agent_id)) {
            $user_info = $this->_uum->getUserInfo($agent_id);
            if (is_array($user_info)) {
                $agent_name = $user_info['col_display_name'];
                $agent_foreign_key = $user_info['col_foreign_key'];
            } else {
                $agent_id = null;
            }
        }

        // 処理者の結果、コメント、日時を変更
        $user['col_result'] = $result;
        $user['col_comment'] = serialize($comments);
        $timestamp = new CB_TimeStamp();
        $timestamp->unix_ts = $ptime;
        $user['col_ptime'] = $timestamp;
        $user['col_agent_user'] = $agent_id;
        $user['col_agent_display_name'] = $agent_name;
        $user['col_agent_foreign_key'] = $agent_foreign_key;

        if ($register) {
            // データベースに反映
            $logic = GRN_Workflow_PathStepDataUsers::getInstance();
            $properties = [
                'col_result'             => $user['col_result'],
                'col_comment'            => $user['col_comment'],
                'col_ptime'              => $ptime,
                'col_agent_user'         => $agent_id,
                'col_agent_display_name' => $agent_name,
                'col_agent_foreign_key'  => $agent_foreign_key,
            ];
            $logic->modifySpecific($path_step_id, $user_id, $properties);
        }

        return $path_steps;
    }

    /**
     * （差し戻し発生時に）コメントをまとめる
     */
    function finalizeUserComment(
        & $path_steps,
        $destination,
        $agent_id = null,
        $path_step_id_current = null,
        $user_id_current = null
    ) {
        foreach (array_keys($path_steps) as $path_step_id) {
            $path_step =& $path_steps[$path_step_id];
            if (GRN_WORKFLOW_CIRCULAR == $path_step['col_type']) {
                // 回覧中の差し戻しはない
                break;
            }

            $users =& $path_step['users'];
            foreach (array_keys($users) as $key) {
                $user =& $users[$key];
                $user_id = $user['_id'];
                // pathstepdatauser_id
                $psdu_id = $user['pid'];
                if (is_object($user['col_ptime'])
                    && is_a($user['col_ptime'], 'CB_TimeStamp')
                ) {
                    $comments = [];
                    if (0 < strlen($user['col_comment'])) {
                        $comments = cb_unserialize($user['col_comment'],
                            ["allowed_classes" => ["CB_TimeStamp"]]);
                    }

                    $comment = null;
                    if (array_key_exists('current', $comments)) {
                        $comment = $comments['current'];
                    }

                    if ( ! array_key_exists('logs', $comments)) {
                        $comments['logs'] = [];
                    }

                    /*
                    $agent_name        = null;
                    $agent_foreign_key = null;
                    if ( !is_null( $agent_id ) && strlen( $agent_id ) > 0 )
                    {
                        $user_info  = $this->_uum->getUserInfo( $agent_id );
                        if ( is_array( $user_info ) )
                        {
                            $agent_name        = $user_info['col_display_name'];
                            $agent_foreign_key = $user_info['col_foreign_key'];
                        }
                        else
                        {
                            $agent_id = null;
                        }
                    }
                    */
                    $agent_id_tmp = $user['col_agent_user'];
                    $agent_name_tmp = $user['col_agent_display_name'];

                    $comment = [
                        'col_result'     => $user['col_result'],
                        'col_comment'    => $comments['current'],
                        'col_ptime'      => $user['col_ptime'],
                        'destination'    => $destination,
                        'col_agent'      => $agent_id_tmp,
                        'col_agent_name' => $agent_name_tmp,
                    ];

                    array_unshift($comments['logs'], $comment);
                    unset($comments['current']);
                    $comments['log_total'] = count($comments['logs']);

                    $agent_name = null;
                    $agent_foreign_key = null;
                    if ( ! is_null($agent_id) && strlen($agent_id) > 0) {
                        $user_info = $this->_uum->getUserInfo($agent_id);
                        if (is_array($user_info)) {
                            $agent_name = $user_info['col_display_name'];
                            $agent_foreign_key = $user_info['col_foreign_key'];
                        } else {
                            $agent_id = null;
                        }
                    }

                    $logic = GRN_Workflow_PathStepDataUsers::getInstance();
                    $properties = [];
                    $properties['col_result']
                        = $user['col_result'] = GRN_WORKFLOW_RESULT_UNPROCESSING;
                    $properties['col_comment']
                        = $user['col_comment'] = serialize($comments);
                    $properties['col_ptime'] = $user['col_ptime'] = null;

                    if ($path_step_id_current == $path_step_id
                        && $user_id_current == $user_id
                    ) {
                        if ( ! is_null($agent_id) && strlen($agent_id) > 0) {
                            $properties['col_agent_user'] = $agent_id;
                            $properties['col_agent_display_name'] = $agent_name;
                            $properties['col_agent_foreign_key']
                                = $agent_foreign_key;
                        }
                    }
                    //$logic->modifySpecific($path_step_id, $user_id, $properties);
                    $logic->modifySpecificByPsduId($psdu_id, $properties);
                }
            }
        }

        return $path_steps;
    }

    /**
     * 承認経路ステップの処理完了を評価
     *
     * @param   array $path_step
     *
     * @return  boolean
     */
    function evalAcceptancePathStep(& $path_step)
    {
        if ( ! array_key_exists('users', $path_step)) {
            assert('FALSE');
        }
        $users =& $path_step['users'];

        $result = false;
        switch ($path_step['col_acceptance_type']) {
            case GRN_WORKFLOW_OPERATOR_AND:
                $result = true;
                foreach ($users as $user) {
                    $result &= GRN_WORKFLOW_RESULT_ACCEPT
                               == $user['col_result'];
                }
                break;
            case GRN_WORKFLOW_OPERATOR_OR:
                foreach ($users as $user) {
                    $result |= GRN_WORKFLOW_RESULT_ACCEPT
                               == $user['col_result'];
                }
                break;
            default:
                break;
        }

        return $result;
    }

    /**
     * 回覧経路ステップの処理完了を評価
     *
     * @param   array $path_step
     *
     * @return  boolean
     */
    function evalCircularPathStep(& $path_step)
    {
        if ( ! array_key_exists('users', $path_step)) {
            assert('FALSE');
        }
        $users =& $path_step['users'];

        $result = true;
        foreach ($users as $user) {
            $result &= GRN_WORKFLOW_RESULT_CONFIRM == $user['col_result'];
        }

        return $result;
    }

    /**
     * 経路ステップの処理完了を評価
     *
     * @param   array $path_step
     *
     * @return  boolean
     */
    function evalPathStep(& $path_step)
    {
        if ($path_step['col_skip']) {
            return true;
        }

        switch ($path_step['col_type']) {
            case GRN_WORKFLOW_ACCEPTANCE:
                return $this->evalAcceptancePathStep($path_step);
                break;
            case GRN_WORKFLOW_CIRCULAR:
                return $this->evalCircularPathStep($path_step);
                break;
            default:
                assert('FALSE');
                break;
        }
    }

    /**
     * 申請（フォルダリレーション）を送信
     *
     * @param   int   $petition_id
     * @param   array $uids
     * @param   array $foreign_keys
     */
    function sendPetition(
        $petition_id,
        $uids,
        $foreign_keys,
        $action_type = GRN_WORKFLOW_MAILNOTIFICATION_ACTION_TO_NEXT
    ) {
        foreach ($uids as $key => $value) {
            if (0 == strlen($value)) {
                unset($uids[$key]);
            }
        }

        if ( ! is_array($uids) || 0 == count($uids)) {
            return;
        }

        // 指定されたユーザーのフォルダを取得
        require_once('workflow/folder_logic.csp');
        $logic = GRN_Workflow_Folder_Logic::getInstance();
        $folders = $logic->getListByForeignKey($uids, $foreign_keys);

        // フォルダの初期化が必要なユーザーIDを洗い出し
        $init_uids = $uids;
        foreach ($folders as $folder) {
            if (false !== ($result = array_search($folder['col_user'],
                    $init_uids))
            ) {
                unset($init_uids[$result]);
            }
        }

        $fids = array_keys($folders);
        if (is_array($fids) && 0 < count($fids)) {
            // フォルダに残っている申請とフォルダの関連付けを取得
            require_once('workflow/folderrelation_logic.csp');
            $logic = GRN_Workflow_FolderRelation_Logic::getInstance();
            $folder_relations = $logic->getSpecificList($fids, $petition_id);

            // 新規で申請と関連付けるフォルダIDを洗い出し
            foreach ($folder_relations as $folder_relation) {
                if (false !== ($result
                        = array_search($folder_relation['col_folder'], $fids))
                ) {
                    unset($fids[$result]);
                }
            }
        }

        if (is_array($init_uids) && 0 < count($init_uids)) {
            // フォルダを一括初期化
            $logic = GRN_Workflow_Folder_Logic::getInstance();
            $logic->initializeUsers($init_uids);

            // 初期化したフォルダを取得
            $folders = $logic->getListByForeignKey($init_uids, $foreign_keys);
            $fids = array_merge($fids, array_keys($folders));
        }

        if (is_array($fids) && 0 < count($fids)) {
            // 新規で申請とフォルダを関連付ける
            require_once('workflow/folderrelation_logic.csp');
            $logic = GRN_Workflow_FolderRelation_Logic::getInstance();
            $logic->addList($petition_id, $fids);
        }

        // 通知を一括送信
        if (false !== array_search('UNPROCESSED_FOLDER_FOREIGN_KEY',
                $foreign_keys)
            || false !== array_search('FINISH_FOLDER_FOREIGN_KEY',
                $foreign_keys)
        ) {
            require_once('workflow/petition_logic.csp');
            $logic = GRN_Workflow_Petition_Logic::getInstance();
            $petition = $logic->get($petition_id);

            require_once('workflow/notification.csp');
            $logic = GRN_Workflow_Notification::getInstance();
            $foreign_key = 'UNPROCESSED_FOLDER_FOREIGN_KEY';
            $login = $this->_uum->getLoginUser();
//            $sender_name = $login->get('display_name');
//            $sender_id = $login->getOID();
            $sender_id = $petition['col_user'];
            $sender_name = $petition['col_user_name'];
            $ptime = time();
            $logic->sendList($uids, $foreign_key, $petition_id, $sender_name,
                $sender_id, $ptime, $action_type);
        }
    }

    /**
     * 申請（フォルダリレーション）を削除
     *
     * @param   int    $petition_id
     * @param   int    $user_id
     * @param   string $foreign_key
     */
    function removePetition($petition_id, $user_id, $foreign_key)
    {
        if (0 == strlen($petition_id) || 0 == strlen($user_id)) {
            return;
        }

        require_once('workflow/folder_logic.csp');
        $logic = GRN_Workflow_Folder_Logic::getInstance();
        $row = $logic->getByForeignKey($user_id, $foreign_key);

        require_once('workflow/folderrelation_logic.csp');
        $logic = GRN_Workflow_FolderRelation_Logic::getInstance();
        $logic->remove($row['_id'], $petition_id);

        // 通知を削除
//        if('UNPROCESSED_FOLDER_FOREIGN_KEY' == $foreign_key)
//        {
        // ベースサービスの通知を削除
        require_once('workflow/notification.csp');
        $logic = GRN_Workflow_Notification::getInstance();
        $logic->confirm($user_id, $petition_id);
        //$logic->removeList(array($user_id), $petition_id);
//        }
    }

    function removeAllPetitions($petition_id, $user_id)
    {
        if (0 == strlen($petition_id) || 0 == strlen($user_id)) {
            return;
        }

        require_once('workflow/folder_logic.csp');
        $folder_logic = GRN_Workflow_Folder_Logic::getInstance();
        $folders = $folder_logic->getList($user_id);
        $folder_ids = array_keys($folders);

        require_once('workflow/folderrelation_logic.csp');
        $folder_relation_logic
            = GRN_Workflow_FolderRelation_Logic::getInstance();
        $folder_relations = $folder_relation_logic->getSpecificList($folder_ids,
            $petition_id);
        $folder_relation_logic->removeListByFolderId($petition_id, $folder_ids);
    }

    /**
     * （有効な）経路ステップ数を取得
     *
     * @param   array $path_steps
     *
     * @return  int
     */
    function getPathStepCount($path_steps)
    {
        $path_step_count = 0;
        foreach ($path_steps as $path_step) {
            if ($path_step['col_activate']) {
                $path_step_count++;
            }
        }

        return $path_step_count;
    }

    function getSimilarFolderEx($user_id, $folder_id, $petition_id)
    {
        // 指定されたユーザーのフォルダを取得
        require_once('workflow/folder_logic.csp');
        $logic = GRN_Workflow_Folder_Logic::getInstance();
        $folders = $logic->getList($user_id);

        // 指定されたフォルダを取得
        $logic = GRN_Workflow_Folder_Logic::getInstance();
        $folder = $logic->getSpecific($folder_id);
        if ( ! is_array($folder) || 0 == count($folder)) {
            return null;
        }

        //申請のあるフォルダを検索
        if (is_array($folders) && 0 < count($folders)) {
            require_once('workflow/folderrelation_logic.csp');
            $logic = GRN_Workflow_FolderRelation_Logic::getInstance();
            $folder_relations = $logic->getSpecificListEx(array_keys($folders),
                $petition_id);

            $folder_petition = null;
            $folder_type = $folder['col_folder_type'];
            foreach ($folder_relations as $folder_relation) {
                $folder_id = $folder_relation['col_folder'];
                if ($folder_type == $folders[$folder_id]['col_folder_type']) {
                    $folder_petition = $folders[$folder_id];
                    break;
                }
            }
            if (is_null($folder_petition)) {
                foreach ($folder_relations as $folder_relation) {
                    $folder_id = $folder_relation['col_folder'];
                    $folder_petition = $folders[$folder_id];
                    break;
                }
            }

            return $folder_petition;
        }

        return null;
    }

    /**
     * （URL直打ち対策用）フォルダを取得
     *
     * @param   int $user_id
     * @param   int $folder_id
     * @param   int $petition_id
     *
     * @return  array
     */
    function getSimilarFolder($user_id, $folder_id, $petition_id = null)
    {
        // 指定されたユーザーのフォルダを取得
        require_once('workflow/folder_logic.csp');
        $logic = GRN_Workflow_Folder_Logic::getInstance();
        $folders = $logic->getList($user_id);

        // 指定されたフォルダを取得
        $logic = GRN_Workflow_Folder_Logic::getInstance();
        $folder = $logic->getSpecific($folder_id);
        if ( ! is_array($folder) || 0 == count($folder)) {
            return null;
        }

        if (is_array($folders) && 0 < count($folders)) {
            if (0 < strlen($petition_id)) {
                require_once('workflow/folderrelation_logic.csp');
                $logic = GRN_Workflow_FolderRelation_Logic::getInstance();
                $folder_relations
                    = $logic->getSpecificList(array_keys($folders),
                    $petition_id);

                $folder_type = $folder['col_folder_type'];
                foreach ($folder_relations as $folder_relation) {
                    $folder_id = $folder_relation['col_folder'];
                    if ($folder_type
                        == $folders[$folder_id]['col_folder_type']
                    ) {
                        return $folders[$folder_id];
                    }
                }
            } else {
                $folder_type = $folder['col_folder_type'];
                foreach ($folders as $folder) {
                    if ($folder_type == $folder['col_folder_type']) {
                        return $folder;
                    }
                }
            }
        }

        return null;
    }

    /**
     * 添付ファイルを追加
     *
     * @param   array $params
     */
    function addFile($petition_id, & $params, $path_step_data_id)
    {
        require_once('workflow/controller_util.csp');
        $item_data_util
            = GRN_Workflow_ItemData_Controller_Utility::getInstance();
        $translation_map_item_data = [
            'iid'                => '_id',
            'petition'           => 'petition',
            'item_data'          => 'item',
            'number'             => 'number',
            'text'               => 'text',
            'display_name'       => 'display_name',
            'type'               => 'type',
            'option_string'      => 'option_string',
            'option_string_type' => 'option_string_type',
            'description'        => 'description',
            'description_type'   => 'description_type',
            'description_editor' => 'description_editor',
            'foreign_key'        => 'foreign_key',
            'attach_file'        => 'attach_file',
            'attach_file_view'   => 'attach_file_view',
            'settings'           => 'settings',
            'br'                 => 'br',
            'separator'          => 'separator',
            'required'           => 'required',
            'list_index'         => 'list_index',
            'access_change'      => 'access_change',
        ];
        $item_data_list
            = $item_data_util->getListView($translation_map_item_data,
            $petition_id);

        require_once('workflow/item_resources.csp');
        $item_util = grn_workflow_get_item_util('grn.workflow.file');

        require_once('workflow/itemdata_logic.csp');
        $itemdata_logic = GRN_Workflow_ItemData_Logic::getInstance();

        require_once('workflow/change_access_data.csp');
        $change_access_data_logic
            = GRN_Workflow_ChangeAccessData::getInstance();

        foreach ($item_data_list as $item_data) {
            if ('grn.workflow.file' == $item_data['foreign_key']) {
                $item_util->parseItemData($params, 'item', $item_data);
                $tmp = $item_data['item_data'];
                $item_data['item_data'] = $item_data['iid'];
                $item_data['idid'] = $item_data['iid'];
                $item_data['iid'] = $tmp;
                $item_data_id = $item_data['item_data'];

                $item_access
                    = $change_access_data_logic->evaluate($item_data_id,
                    $path_step_data_id);

                if (is_array($item_access)
                    && array_key_exists('col_view', $item_access)
                    && array_key_exists('col_edit', $item_access)
                ) {
                    $item_data['attach_file'] = $item_access['col_edit'];
                    $item_data['attach_file_view'] = $item_access['col_view'];
                } else {
                    // default
                    $item_data['attach_file'] = null;
                    $item_data['attach_file_view'] = 1;
                }

                unset($item_data['item_data']);
                $itemdata_logic->modify($item_data_id, $petition_id,
                    $item_data);
            }
        }
    }

    /**
     * 添付ファイルを削除
     *
     * @param   int   $petition_id       Petition ID
     * @param   array $params            $G_INPUT
     * @param   int   $path_step_data_id Path Step Data ID
     */
    function deleteFile($petition_id, & $params, $path_step_data_id)
    {
        require_once('workflow/controller_util.csp');
        $item_data_util
            = GRN_Workflow_ItemData_Controller_Utility::getInstance();
        $translation_map_item_data = [
            //Item Data Information
            'iid'         => 'itemdata_id',
            'foreign_key' => 'itemdata_foreign_key',
            'settings'    => 'itemdata_settings',
            'required'    => 'itemdata_required',
            //Item Data File Information
            'fid'         => 'itemdatafile_id',
            'file'        => 'itemdatafile_file',
            'files'       => 'itemdata_files',
        ];
        $item_data_list
            = $item_data_util->getListViewEx($translation_map_item_data,
            $petition_id);
        require_once('workflow/change_access_data.csp');
        $change_access_data_logic
            = GRN_Workflow_ChangeAccessData::getInstance();
        // 既に添付されたファイルの ID を取得
        $itemdata_file_ids = [];
        foreach (array_keys($item_data_list) as $item_data_id) {
            if ($item_data_list[$item_data_id]['foreign_key']
                != 'grn.workflow.file'
            ) {
                continue;
            }

            $change_access_data
                = $change_access_data_logic->evaluateEx($item_data_list[$item_data_id]['iid'],
                $path_step_data_id);
            if ($change_access_data['col_edit'] != 1) {
                continue;
            }

            if (count($item_data_list[$item_data_id]['files']) > 0) {
                foreach (
                    $item_data_list[$item_data_id]['files'] as $key => $value
                ) {
                    $itemdata_file_ids[] = [
                        'itemdata_id'     => $item_data_id,
                        'itemdatafile_id' => $key
                    ];
                }
            }
        }
        // 承認処理時に POST されていない itemdata_file ID を探し、削除
        if (count($itemdata_file_ids) > 0) {
            require_once('workflow/itemdatafile_logic.csp');
            $item_data_file_logic
                = GRN_Workflow_ItemDataFile_Logic::getInstance();

            if ( ! array_key_exists('fids', $params)
                 || ! count($params['fids'])
            ) {
                // 全削除
                for ($i = 0; $i < count($itemdata_file_ids); $i++) {
                    $idid = $itemdata_file_ids[$i]['itemdata_id'];
                    $item_data_file_logic->deleteAll($idid);
                }
            } else {
                // 承認処理時に POST されていない itemdata_file ID を探し、削除
                for ($i = 0; $i < count($itemdata_file_ids); $i++) {
                    $idid = $itemdata_file_ids[$i]['itemdata_id'];
                    $idfid = $itemdata_file_ids[$i]['itemdatafile_id'];
                    if ( ! in_array($idfid, $params['fids'])) {
                        $item_data_file_logic->delete($idfid, $idid);
                    }
                }
            }
        }
    }

    /**
     * 添付ファイルを更新
     *
     * @param   int   $petition_id       Petition ID
     * @param   array $params            $G_INPUT
     * @param   int   $path_step_data_id Path Step Data ID
     */
    function updateFile($petition_id, & $params, $path_step_data_id)
    {
        $this->deleteFile($petition_id, $params, $path_step_data_id);
        $this->addFile($petition_id, $params, $path_step_data_id);
    }

    function getPathsInfo($pids, $unserialize = false)
    {
        require_once('workflow/path_data.csp');
        $logic = GRN_Workflow_PathStepDatas::getInstance();
        $columns = [
            '_id',
            'col_petition',
            'col_activate',
            'col_finished',
            'col_path_step',
            'col_type',
            'col_acceptance_type',
            'col_role',
            'col_skip',
            'col_applicant',
            'col_change_path'
        ];
        $path_steps = $logic->getSpecificList($pids, $columns);

        $logic = GRN_Workflow_PathStepDataUsers::getInstance();
        $columns = [
            'tab_grn_workflow_pathstepdatauser' => [
                '_id'                => 'pid',
                'col_path_step_data' => 'col_path_step_data',
                'col_user'           => 'col_user',
                'col_display_name'   => 'col_display_name',
                'col_foreign_key'    => 'col_foreign_key',
                'col_result'         => 'col_result',
                'col_ptime'          => 'col_ptime',
                'col_comment'        => 'col_comment'
            ],
            'tab_cb_user'                       => [
                '_id'              => '_id',
                'col_display_name' => 'col_current_display_name',
                'col_valid'        => 'col_valid'
            ]
        ];
        $tmp = $logic->getListByPathStepDataIds(array_keys($path_steps),
            $columns);

        $users = [];
        $uids = [];
        foreach ($tmp as $user) {
            $path_step_data_id = $user['col_path_step_data'];
            if ( ! array_key_exists($path_step_data_id, $users)) {
                $users[$path_step_data_id] = [];
            }
            if ( ! array_key_exists($path_step_data_id, $uids)) {
                $uids[$path_step_data_id] = [];
            }
            $users[$path_step_data_id][] = $user;
            $uids[$path_step_data_id][] = $user['_id'];
        }

        $path = [];
        $previous = [];
        foreach (array_keys($path_steps) as $path_step_id) {
            $path_step =& $path_steps[$path_step_id];

            $petition_id = $path_step['col_petition'];
            if (array_key_exists($petition_id, $path)) {
                $path[$petition_id] = [];
            }

            $path[$petition_id][$path_step_id] =& $path_step;

            $path_step['users'] = [];
            if (array_key_exists($path_step_id, $users)) {
                if ( ! $path_step['col_skip']) {
                    $path_step['users'] =& $users[$path_step_id];

                    foreach (array_keys($users[$path_step_id]) as $key) {
                        $user =& $users[$path_step_id][$key];
                        if ($user['col_ptime']) {
                            $timestamp = new CB_TimeStamp();
                            $timestamp->unix_ts = $user['col_ptime'];
                            $user['col_ptime'] = $timestamp;
                        }
                        if ($unserialize && 0 < strlen($user['col_comment'])) {
                            $user['col_comment']
                                = cb_unserialize($user['col_comment'],
                                ["allowed_classes" => ["CB_TimeStamp"]]);
                        }
                    }
                }
            }
            $path_step['user_count'] = count($path_step['users']);
            $path_step['uid'] = $uids[$path_step_id];
            $path_step['in_process'] = false;

            if (array_key_exists($petition_id, $previous)) {
                $previous[$petition_id]['next'] =& $path_step;
            } else {
                $previous[$petition_id] = null;
            }

            if (array_key_exists('previous', $path_step)) {
                unset($path_step['previous']);
            }
            if (array_key_exists('next', $path_step)) {
                unset($path_step['next']);
            }
            $path_step['previous'] =& $previous[$petition_id];
            $path_step['next'] = null;
            $previous[$petition_id] =& $path_step;
        }

        return $path;
    }

    function _writeAttribute(& $xml_writer, $key, $value)
    {
        if (0 < strlen($value)) {
            $xml_writer->writeAttribute($key, $value);
        }
    }

    function _writeAttributes(& $xml_writer, $attributes)
    {
        if (is_array($attributes) && 0 < count($attributes)) {
            foreach ($attributes as $key => $value) {
                $this->_writeAttribute($xml_writer, $key, $value);
            }
        }
    }

    function _writeCDATAElement(& $xml_writer, $key, $value, $attributes = null)
    {
        if (0 < strlen($value)) {
            $xml_writer->startElement($key);
            $this->_writeAttributes($xml_writer, $attributes);
            $xml_writer->writeCDATA($value);
            $xml_writer->endElement();
        }
    }

    function _writeRowElement(& $xml_writer, $key, $value, $attributes = null)
    {
        if (0 < strlen($value)) {
            $xml_writer->startElement($key);
            $this->_writeAttributes($xml_writer, $attributes);
            $xml_writer->writeRaw($value);
            $xml_writer->endElement();
        }
    }

    function _exportUsers(& $xml_writer, $users)
    {
        if (is_array($users) && 0 < count($users)) {
            $xml_writer->startElement('users');
            foreach ($users as $user) {
                $this->_writeCDATAElement($xml_writer, 'user',
                    $user['col_foreign_key']);
            }
            $xml_writer->endElement();
        }
    }

    function _exportGroups(& $xml_writer, $groups)
    {
        if (is_array($groups) && 0 < count($groups)) {
            $xml_writer->startElement('groups');
            foreach ($groups as $group) {
                $this->_writeCDATAElement($xml_writer, 'group',
                    $group['col_foreign_key']);
            }
            $xml_writer->endElement();
        }
    }

    function _exportRoles(& $xml_writer, $roles)
    {
        if (is_array($roles) && 0 < count($roles)) {
            $xml_writer->startElement('roles');
            foreach ($roles as $role) {
                $attributes = ['chief' => $role['col_chief']];
                $this->_writeCDATAElement($xml_writer, 'role',
                    $role['col_foreign_key'], $attributes);
            }
            $xml_writer->endElement();
        }
    }

    function _exportPathStep(& $xml_writer, & $path_step)
    {
        $xml_writer->startElement('path_step');
        switch ($path_step['col_type']) {
            case GRN_WORKFLOW_ACCEPTANCE:
                $this->_writeAttribute($xml_writer, 'type', 'acceptance');
                switch ($path_step['col_acceptance_type']) {
                    case GRN_WORKFLOW_OPERATOR_AND:
                        $acceptance_type = 'and';
                        break;
                    case GRN_WORKFLOW_OPERATOR_OR:
                        $acceptance_type = 'or';
                        break;
                    default:
                        assert('FALSE');
                        break;
                }
                $this->_writeAttribute($xml_writer, 'acceptance_type',
                    $acceptance_type);
                break;
            case GRN_WORKFLOW_CIRCULAR:
                $this->_writeAttribute($xml_writer, 'type', 'circular');
                break;
            default:
                assert('FALSE');
                break;
        }
        $this->_writeAttribute($xml_writer, 'skip', $path_step['col_skip']);
        $this->_writeAttribute($xml_writer, 'applicant',
            $path_step['col_applicant']);
        $this->_writeAttribute($xml_writer, 'change_path',
            $path_step['col_change_path']);
        $this->_writeAttribute($xml_writer, 'deny_change_path',
            $path_step['col_deny_change_path']);
        $this->_writeCDATAElement($xml_writer, 'name', $path_step['col_role']);
        $this->_writeCDATAElement($xml_writer, 'code', $path_step['col_code']);
        if ( ! $path_step['col_skip']) {
            $this->_exportUsers($xml_writer, $path_step['users']);
            $this->_exportGroups($xml_writer, $path_step['groups']);
            $this->_exportRoles($xml_writer, $path_step['roles']);
        }
        $xml_writer->endElement();
    }

    function _exportPathSteps(& $xml_writer, & $path_id)
    {
        $logic = GRN_Workflow_PathSteps::getInstance();
        $columns = [
            '_id',
            'col_path',
            'col_type',
            'col_acceptance_type',
            'col_role',
            'col_code',
            'col_skip',
            'col_applicant',
            'col_deny_change_path',
            'col_change_path'
        ];
        $path_steps = $logic->getList($path_id, null, null, $columns);

        if (is_array($path_steps) && 0 < count($path_steps)) {
            $logic = GRN_Workflow_PathStepUsers::getInstance();
            $psids = array_keys($path_steps);
            $columns = [
                'tab_grn_workflow_pathstepuser' => ['col_path_step' => 'col_path_step'],
                'tab_cb_user'                   => [
                    '_id'             => '_id',
                    'col_foreign_key' => 'col_foreign_key'
                ]
            ];
            $users = $logic->getList($psids, $columns);

            $logic = GRN_Workflow_PathStepGroups::getInstance();
            $columns = [
                'tab_grn_workflow_pathstepgroup' => ['col_path_step' => 'col_path_step'],
                'tab_cb_group'                   => [
                    '_id'             => '_id',
                    'col_foreign_key' => 'col_foreign_key'
                ]
            ];
            $groups = $logic->getList($psids, $columns);

            $logic = GRN_Workflow_PathStepStaticRoles::getInstance();
            $columns = [
                'tab_grn_workflow_pathstepstaticrole' => [
                    'col_path_step' => 'col_path_step',
                    'col_chief'     => 'col_chief'
                ],
                'tab_cb_role'                         => [
                    '_id'             => '_id',
                    'col_foreign_key' => 'col_foreign_key'
                ]
            ];
            $roles = $logic->getList($psids, $columns);

            $xml_writer->startElement('path_steps');
            foreach ($path_steps as $path_step) {
                $path_step_id = $path_step['_id'];

                $path_step['users'] = [];
                if (array_key_exists($path_step_id, $users)) {
                    $path_step['users'] =& $users[$path_step_id];
                }
                $path_step['groups'] = [];
                if (array_key_exists($path_step_id, $groups)) {
                    $path_step['groups'] =& $groups[$path_step_id];
                }
                $path_step['roles'] = [];
                if (array_key_exists($path_step_id, $roles)) {
                    $path_step['roles'] =& $roles[$path_step_id];
                }

                $this->_exportPathStep($xml_writer, $path_step);
            }
            $xml_writer->endElement();
        }
    }

    function _exportPath(& $xml_writer, & $path)
    {
        if (GRN_WORKFLOW_PUBLIC_PATH == $path['col_type']) {
            $xml_writer->startElement('path');
            $xml_writer->writeAttribute('skip', $path['col_skip']);
            $xml_writer->writeAttribute('richeditor', $path['col_richeditor']);
            $xml_writer->writeAttribute('icon', $path['col_icon']);
            $this->_writeCDATAElement($xml_writer, 'name', $path['col_name']);
            $this->_writeCDATAElement($xml_writer, 'foreign_key',
                $path['col_foreign_key']);
            $this->_writeCDATAElement($xml_writer, 'admin_memo',
                $path['col_admin_memo']);
            $this->_writeCDATAElement($xml_writer, 'description',
                $path['col_description']);
            $this->_exportPathSteps($xml_writer, $path['_id']);
            $xml_writer->endElement();
        }
    }

    function _exportPaths(& $xml_writer, $paths)
    {
        $xml_writer->startElement('paths');
        foreach ($paths as $path) {
            $this->_exportPath($xml_writer, $path);
        }
        $xml_writer->endElement();
    }

    function export($file_name)
    {
        require_once('workflow/path.csp');
        $logic = GRN_Workflow_Paths::getInstance();
        $columns = [
            '_id',
            'col_name',
            'col_foreign_key',
            'col_type',
            'col_skip',
            'col_admin_memo',
            'col_description',
            'col_richeditor',
            'col_icon'
        ];
        $type = GRN_WORKFLOW_PUBLIC_PATH;
        $paths = $logic->getList(null, $columns, $type);

        $xml_writer = new XMLWriter();
        $xml_writer->openUri($file_name);
        $xml_writer->setIndentString(' ');
        $xml_writer->setIndent(true);
        $xml_writer->startDocument('1.0', 'UTF-8', 'yes');

        $this->_exportPaths($xml_writer, $paths);

        $xml_writer->endDocument();
        $xml_writer->flush();
    }

    function _getValue(& $xml_reader, $tag_name)
    {
        $value = null;
        while ($xml_reader->read()) {
            if (XMLReader::COMMENT == $xml_reader->nodeType
                || XMLReader::SIGNIFICANT_WHITESPACE == $xml_reader->nodeType
            ) {
                continue;
            }

            switch ($xml_reader->name) {
                case $tag_name:
                    if (XMLReader::END_ELEMENT == $xml_reader->nodeType) {
                        return $value;
                    }
                    break;
                default:
                    $value = $xml_reader->value;
                    break;
            }
        }
        // ノードが完了していません。
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_XML_NODE_NOT_FINISH);
    }

    function _importUsers(& $xml_reader)
    {
        $users = [];
        while ($xml_reader->read()) {
            if (XMLReader::COMMENT == $xml_reader->nodeType
                || XMLReader::SIGNIFICANT_WHITESPACE == $xml_reader->nodeType
            ) {
                continue;
            }

            $user = [];
            switch ($xml_reader->name) {
                case 'user':
                    $users[] = $this->_getValue($xml_reader, 'user');
                    break;
                case 'users':
                    if (XMLReader::END_ELEMENT == $xml_reader->nodeType) {
                        return $users;
                    }
                    break;
                default:
                    // XMLファイルが不正です
                    require_once('workflow/error_code.csp');
                    cb_throw_error(E_GRN_WRKF_XML_FILE_INVALID);
                    break;
            }
        }
        // ノードが完了していません。
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_XML_NODE_NOT_FINISH);
    }

    function _importGroups(& $xml_reader)
    {
        $groups = [];
        while ($xml_reader->read()) {
            if (XMLReader::COMMENT == $xml_reader->nodeType
                || XMLReader::SIGNIFICANT_WHITESPACE == $xml_reader->nodeType
            ) {
                continue;
            }

            $group = [];
            switch ($xml_reader->name) {
                case 'group':
                    $groups[] = $this->_getValue($xml_reader, 'group');
                    break;
                case 'groups':
                    if (XMLReader::END_ELEMENT == $xml_reader->nodeType) {
                        return $groups;
                    }
                    break;
                default:
                    // XMLファイルが不正です
                    require_once('workflow/error_code.csp');
                    cb_throw_error(E_GRN_WRKF_XML_FILE_INVALID);
                    break;
            }
        }
        // ノードが完了していません。
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_XML_NODE_NOT_FINISH);
    }

    function _importRoles(& $xml_reader)
    {
        $roles = [
            'roles'       => [],
            'chief_roles' => []
        ];
        while ($xml_reader->read()) {
            if (XMLReader::COMMENT == $xml_reader->nodeType
                || XMLReader::SIGNIFICANT_WHITESPACE == $xml_reader->nodeType
            ) {
                continue;
            }

            $role = [];
            switch ($xml_reader->name) {
                case 'role':
                    if ($xml_reader->getAttribute('chief')) {
                        $roles['chief_roles'][] = $this->_getValue($xml_reader,
                            'role');
                    } else {
                        $roles['roles'][] = $this->_getValue($xml_reader,
                            'role');
                    }
                    break;
                case 'roles':
                    if (XMLReader::END_ELEMENT == $xml_reader->nodeType) {
                        return $roles;
                    }
                    break;
                default:
                    // XMLファイルが不正です
                    require_once('workflow/error_code.csp');
                    cb_throw_error(E_GRN_WRKF_XML_FILE_INVALID);
                    break;
            }
        }
        // ノードが完了していません。
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_XML_NODE_NOT_FINISH);
    }

    function _importPathStep(& $xml_reader)
    {
        $path_step['col_type'] = $xml_reader->getAttribute('type');
        switch ($path_step['col_type']) {
            case 'acceptance':
                $path_step['col_type'] = GRN_WORKFLOW_ACCEPTANCE;
                break;
            case 'circular':
                $path_step['col_type'] = GRN_WORKFLOW_CIRCULAR;
                break;
            default:
                break;
        }
        $path_step['col_acceptance_type']
            = $xml_reader->getAttribute('acceptance_type');
        switch ($path_step['col_acceptance_type']) {
            case 'and':
                $path_step['col_acceptance_type'] = GRN_WORKFLOW_OPERATOR_AND;
                break;
            case 'or':
                $path_step['col_acceptance_type'] = GRN_WORKFLOW_OPERATOR_OR;
                break;
            default:
                $path_step['col_acceptance_type'] = GRN_WORKFLOW_OPERATOR_AND;
                break;
        }
        $path_step['col_skip'] = $xml_reader->getAttribute('skip');
        $path_step['col_applicant']
            = $xml_reader->getAttribute('applicant');
        $path_step['col_change_path']
            = $xml_reader->getAttribute('change_path');
        $path_step['col_deny_change_path']
            = $xml_reader->getAttribute('deny_change_path');
        $path_step['users'] = [];
        $path_step['groups'] = [];
        $path_step['roles'] = [];
        while ($xml_reader->read()) {
            if (XMLReader::COMMENT == $xml_reader->nodeType
                || XMLReader::SIGNIFICANT_WHITESPACE == $xml_reader->nodeType
            ) {
                continue;
            }

            switch ($xml_reader->name) {
                case 'name':
                    $path_step['col_role'] = $this->_getValue($xml_reader,
                        'name');
                    break;
                case 'code':
                    $path_step['col_code'] = $this->_getValue($xml_reader,
                        'code');
                    break;
                case 'users':
                    $path_step['users'] = $this->_importUsers($xml_reader);
                    break;
                case 'groups':
                    $path_step['groups'] = $this->_importGroups($xml_reader);
                    break;
                case 'roles':
                    $path_step['roles'] = $this->_importRoles($xml_reader);
                    break;
                case 'path_step':
                    if (XMLReader::END_ELEMENT == $xml_reader->nodeType) {
                        return $path_step;
                    }
                    break;
                default:
                    // XMLファイルが不正です
                    require_once('workflow/error_code.csp');
                    cb_throw_error(E_GRN_WRKF_XML_FILE_INVALID);
                    break;
            }
        }
        // ノードが完了していません。
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_XML_NODE_NOT_FINISH);
    }

    function _importPathSteps(& $xml_reader)
    {
        $path_steps = [];
        while ($xml_reader->read()) {
            if (XMLReader::COMMENT == $xml_reader->nodeType
                || XMLReader::SIGNIFICANT_WHITESPACE == $xml_reader->nodeType
            ) {
                continue;
            }

            switch ($xml_reader->name) {
                case 'path_step':
                    $path_steps[] = $this->_importPathStep($xml_reader);
                    break;
                case 'path_steps':
                    if (XMLReader::END_ELEMENT == $xml_reader->nodeType) {
                        return $path_steps;
                    }
                    break;
                default:
                    // XMLファイルが不正です
                    require_once('workflow/error_code.csp');
                    cb_throw_error(E_GRN_WRKF_XML_FILE_INVALID);
                    break;
            }
        }
        // ノードが完了していません。
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_XML_NODE_NOT_FINISH);
    }

    function _importPath(& $xml_reader)
    {
        $path = [];
        $path['col_name'] = null;
        $path['col_foreign_key'] = null;
        $path['col_admin_memo'] = null;
        $path['col_description'] = null;
        $login = $this->_uum->getLoginUser();
        $path['col_creator']
            = $path['col_modifier'] = $login->getOID();
        $path['col_creator_name']
            = $path['col_modifier_name'] = $login->get('display_name');
        $path['col_creator_foreign_key']
            = $path['col_modifier_foreign_key'] = $login->get('foreign_key');
        $path['col_ctime'] = $path['col_mtime'] = time();
        $path['col_type'] = GRN_WORKFLOW_PUBLIC_PATH;
        $path['col_skip'] = $xml_reader->getAttribute('skip');
        $path['col_richeditor']
            = $xml_reader->getAttribute('richeditor');
        $path['col_icon'] = $xml_reader->getAttribute('icon');
        while ($xml_reader->read()) {
            if (XMLReader::COMMENT == $xml_reader->nodeType
                || XMLReader::SIGNIFICANT_WHITESPACE == $xml_reader->nodeType
            ) {
                continue;
            }

            switch ($xml_reader->name) {
                case 'name':
                    $path['col_name'] = $this->_getValue($xml_reader, 'name');
                    break;
                case 'foreign_key':
                    $path['col_foreign_key'] = $this->_getValue($xml_reader,
                        'foreign_key');
                    break;
                case 'admin_memo':
                    $path['col_admin_memo'] = $this->_getValue($xml_reader,
                        'admin_memo');
                    break;
                case 'description':
                    $path['col_description'] = $this->_getValue($xml_reader,
                        'description');
                    break;
                case 'path_steps':
                    $path['path_steps'] = $this->_importPathSteps($xml_reader);
                    break;
                case 'path':
                    if (XMLReader::END_ELEMENT == $xml_reader->nodeType) {
                        return $path;
                    }
                    break;
                default:
                    // XMLファイルが不正です
                    require_once('workflow/error_code.csp');
                    cb_throw_error(E_GRN_WRKF_XML_FILE_INVALID);
                    break;
            }
        }
        // ノードが完了していません。
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_XML_NODE_NOT_FINISH);
    }

    function _importPaths(& $xml_reader)
    {
        $paths = [];
        while ($xml_reader->read()) {
            if (XMLReader::COMMENT == $xml_reader->nodeType
                || XMLReader::SIGNIFICANT_WHITESPACE == $xml_reader->nodeType
            ) {
                continue;
            }

            switch ($xml_reader->name) {
                case 'path':
                    $paths[] = $this->_importPath($xml_reader);
                    break;
                case 'paths':
                    if (XMLReader::END_ELEMENT == $xml_reader->nodeType) {
                        return $paths;
                    }
                default:
                    // XMLファイルが不正です
                    require_once('workflow/error_code.csp');
                    cb_throw_error(E_GRN_WRKF_XML_FILE_INVALID);
                    break;
            }
        }
        // ノードが完了していません。
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_XML_NODE_NOT_FINISH);
    }

    function import($file_name)
    {
        $xml_reader = new XMLReader();
        $xml_reader->open($file_name);

        $paths = [];

        while ($xml_reader->read()) {
            if (XMLReader::COMMENT == $xml_reader->nodeType
                || XMLReader::SIGNIFICANT_WHITESPACE == $xml_reader->nodeType
            ) {
                continue;
            }

            switch ($xml_reader->name) {
                case 'paths':
                    $paths = $this->_importPaths($xml_reader);
                    break;
                default:
                    // XMLファイルが不正です
                    require_once('workflow/error_code.csp');
                    cb_throw_error(E_GRN_WRKF_XML_FILE_INVALID);
                    break;
            }
        }

        $xml_reader->close();

        if ( ! is_array($paths) || 0 == count($paths)) {
            cb_throw_error(E_GRN_WRKF_XML_FILE_INVALID);
        }

        $sorted_paths = [];
        foreach ($paths as $path) {
            $sorted_paths[$path['col_foreign_key']] = $path;
        }

        require_once('workflow/path.csp');
        $logic = GRN_Workflow_Paths::getInstance();
        $columns = [
            '_id',
            'col_foreign_key'
        ];
        $registered_paths
            = $logic->getListByForeignKeys(array_keys($sorted_paths),
            $columns);
        $add_paths = $sorted_paths;

        //監査
        $inspection_path = [];
        $inspection_path_step = [];
        $inspection_users = [];
        $inspection_groups = [];
        $inspection_roles = [];
        $inspection_chief_roles = [];
        $inspection_skips = [];
        $inspection_applicants = [];

        foreach ($registered_paths as $registered_path) {
            $logic = GRN_Workflow_PathSteps::getInstance();
            $logic->removeListByPathId($registered_path['_id']);

            unset($add_paths[$registered_path['col_foreign_key']]);
        }

        if (is_array($add_paths) && 0 < count($add_paths)) {
            $logic = GRN_Workflow_Paths::getInstance();
            $columns = [
                'col_name',
                'col_foreign_key',
                'col_type',
                'col_skip',
                'col_admin_memo',
                'col_description',
                'col_richeditor',
                'col_icon',
                'col_creator',
                'col_creator_name',
                'col_creator_foreign_key',
                'col_ctime',
                'col_modifier',
                'col_modifier_name',
                'col_modifier_foreign_key',
                'col_mtime'
            ];
            $logic->addList($columns, $add_paths);
        }

        require_once('workflow/path.csp');
        $logic = GRN_Workflow_Paths::getInstance();
        $columns = [
            '_id',
            'col_type',
            'col_foreign_key'
        ];
        $paths = $logic->getListByForeignKeys(array_keys($sorted_paths),
            $columns);

        $login = $this->_uum->getLoginUser();
        $col_modifier = $login->getOID();
        $col_modifier_name = $login->get('name');
        $col_modifier_foreign_key = $login->get('foreign_key');
        $col_mtime = time();

        foreach ($paths as $path) {
            if (GRN_WORKFLOW_PRIVATE_PATH == $path['col_type']) {
                cb_throw_error(E_GRN_WRKF_XML_DUPLICATION_PUBLIC_PATH_FOREIGN_KEY,
                    null, ['path_foreign_key' => $path['col_foreign_key']]);
            }

            if ( ! array_key_exists($path['col_foreign_key'], $add_paths)) {
                $properties = $sorted_paths[$path['col_foreign_key']];
                $properties['col_modifier'] = $col_modifier;
                $properties['col_modifier_name'] = $col_modifier_name;
                $properties['col_modifier_foreign_key']
                    = $col_modifier_foreign_key;
                $properties['col_mtime'] = $col_mtime;
                unset($properties['col_creator']);
                unset($properties['col_creator_name']);
                unset($properties['col_creator_foreign_key']);
                unset($properties['col_ctime']);
                unset($properties['path_steps']);
                $logic = GRN_Workflow_Paths::getInstance();
                $logic->modify($path['_id'], $properties);
            }

            $path_id = $path['_id'];
            $foreign_key = $path['col_foreign_key'];

            //監査
            $inspection_path[$path_id] = $path_id;

            $path_steps = [];
            if (array_key_exists('path_steps', $sorted_paths[$foreign_key])) {
                $path_steps =& $sorted_paths[$foreign_key]['path_steps'];
            }

            //監査
            require_once('workflow/inspection.csp');
            $inspection = GRN_Workflow_Path_Inspection::getInstance();

            foreach ($path_steps as $path_step) {
                $logic = GRN_Workflow_PathSteps::getInstance();
                $properties = [
                    'col_path'             => $path_id,
                    'col_type'             => $path_step['col_type'],
                    'col_acceptance_type'  => $path_step['col_acceptance_type'],
                    'col_role'             => $path_step['col_role'],
                    'col_code'             => cb_at($path_step, 'col_code'),
                    'col_skip'             => $path_step['col_skip'],
                    'col_applicant'        => $path_step['col_applicant'],
                    'col_deny_change_path' => $path_step['col_deny_change_path'],
                    'col_change_path'      => $path_step['col_change_path']
                ];
                $is_importing = true;
                $path_step_id = $logic->add($properties, $is_importing);

                $users =& $path_step['users'];

                $inspection_path_step[] = $path_step_id;
                $inspection_skips[]
                    = $inspection->setSkip($path_step['col_skip']);
                $inspection_applicants[]
                    = $inspection->setApplicant($path_step['col_applicant']);

                if (is_array($users) && 0 < count($users)) {
                    foreach ($users as $key => $value) {
                        $users[$key] = cb_queryf($this->_dbconn, "'@S'",
                            $value);
                    }
                    $users = implode(',', $users);
                    $condition = "col_foreign_key IN({$users})";
                    $users = $this->_uum->getUsersInfo(null, null, 0, -1,
                        null, $condition);

                    if (is_array($users) && 0 < count($users)) {
                        foreach (array_keys($users) as $user_id) {
                            $user =& $users[$user_id];
                            $user['col_path_step'] = $path_step_id;
                            $user['col_member'] = $user['_id'];

                            //監査
                            $inspection_users[] = $user['col_foreign_key'];
                        }

                        $logic = GRN_Workflow_PathStepUsers::getInstance();
                        $columns = [
                            'col_path_step',
                            'col_member'
                        ];
                        $logic->addList($columns, $users);
                    } else {
                        $inspection_users[] = null;
                    }
                } else {
                    $inspection_users[] = null;
                }

                $groups =& $path_step['groups'];
                if (is_array($groups) && 0 < count($groups)) {
                    $groupKeys = array_values($groups);
                    $groups
                        = $this->_uum->getGroupInfoListByForeignKeys($groupKeys);

                    if (is_array($groups) && 0 < count($groups)) {
                        foreach (array_keys($groups) as $group_id) {
                            $group =& $groups[$group_id];
                            $group['col_path_step'] = $path_step_id;
                            $group['col_member'] = $group['_id'];

                            //監査
                            $inspection_groups[] = $group['col_foreign_key'];
                        }

                        $logic = GRN_Workflow_PathStepGroups::getInstance();
                        $columns = [
                            'col_path_step',
                            'col_member'
                        ];
                        $logic->addList($columns, $groups);
                    } else {
                        $inspection_groups[] = null;
                    }
                } else {
                    $inspection_groups[] = null;
                }

                if (is_array($path_step['roles'])
                    && 0 < count($path_step['roles'])
                ) {
                    $roles =& $path_step['roles']['roles'];
                    if (is_array($roles) && 0 < count($roles)) {
                        foreach ($roles as $key => $value) {
                            $roles[$key] = cb_queryf($this->_dbconn, "'@S'",
                                $value);
                        }
                        $roles = implode(',', $roles);
                        $condition = "col_foreign_key IN({$roles})";
                        $roles = $this->_uum->listStaticRolesInfo(null, 0,
                            -1, $condition);

                        if (is_array($roles) && 0 < count($roles)) {
                            foreach (array_keys($roles) as $role_id) {
                                $role =& $roles[$role_id];
                                $role['col_path_step'] = $path_step_id;
                                $role['col_member'] = $role_id;

                                //監査
                                $inspection_roles[] = $role['col_foreign_key'];
                            }

                            $logic
                                = GRN_Workflow_PathStepStaticRoles::getInstance();
                            $columns = [
                                'col_path_step',
                                'col_member'
                            ];
                            $logic->addList($columns, $roles);
                        } else {
                            $inspection_roles[] = null;
                        }
                    } else {
                        $inspection_roles[] = null;
                    }

                    $roles =& $path_step['roles']['chief_roles'];
                    if (is_array($roles) && 0 < count($roles)) {
                        foreach ($roles as $key => $value) {
                            $roles[$key] = cb_queryf($this->_dbconn, "'@S'",
                                $value);
                        }
                        $roles = implode(',', $roles);
                        $condition = "col_foreign_key IN({$roles})";
                        $roles = $this->_uum->listStaticRolesInfo(null, 0,
                            -1, $condition);

                        if (is_array($roles) && 0 < count($roles)) {
                            foreach (array_keys($roles) as $role_id) {
                                $role =& $roles[$role_id];
                                $role['col_path_step'] = $path_step_id;
                                $role['col_member'] = $role['_id'];
                                $role['col_chief'] = true;

                                //監査
                                $inspection_chief_roles[]
                                    = $role['col_foreign_key'];
                            }

                            $logic
                                = GRN_Workflow_PathStepStaticRoles::getInstance();
                            $columns = [
                                'col_path_step',
                                'col_member',
                                'col_chief'
                            ];
                            $logic->addList($columns, $roles);
                        } else {
                            $inspection_chief_roles[] = null;
                        }
                    } else {
                        $inspection_chief_roles[] = null;
                    }
                } else {
                    $inspection_roles[] = null;
                    $inspection_chief_roles[] = null;
                }
            }
        }

        //監査する
        require_once('workflow/inspection.csp');
        $inspection = GRN_Workflow_Path_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            $message_type = 'path_import';

            $message_args['pids'] = $inspection_path;
            $message_args['psids'] = $inspection_path_step;
            $message_args['uids'] = $inspection_users;
            $message_args['gids'] = $inspection_groups;
            $message_args['srids'] = $inspection_roles;
            $message_args['crids'] = $inspection_chief_roles;
            $message_args['skips'] = $inspection_skips;
            $message_args['applicants'] = $inspection_applicants;

            $inspection->record($message_type, $message_args);
        }
    }

    function connectPathStepLink(& $path_steps)
    {
        $previous = null;
        foreach (array_keys($path_steps) as $path_step_id) {
            $path_step =& $path_steps[$path_step_id];
            if ( ! array_key_exists('col_activate', $path_step)) {
                $path_step['col_activate'] = true;
            }
            if ($previous) {
                $previous['next'] =& $path_step;
            }
            if (array_key_exists('previous', $path_step)) {
                unset($path_step['previous']);
            }
            if (array_key_exists('next', $path_step)) {
                unset($path_step['next']);
            }
            $path_step['previous'] =& $previous;
            $path_step['next'] = null;
            $previous =& $path_step;
        }
    }

    function modifyPathStepsStatus(& $path_step, $status)
    {
        $psid = [];
        while ($path_step) {
            $psids[] = $path_step['_id'];
            $path_step['col_finished'] = $status;
//            $path_step =& $path_step['next'];
            $p =& $path_step['next'];
            unset($path_step);
            $path_step =& $p;
            unset($p);
//            $path_step =& $path_step['next'];
        }

        require_once('workflow/path_data.csp');
        $logic = GRN_Workflow_PathStepDatas::getInstance();
        $properties = ['col_finished' => $status];
        $logic->modifyList($psids, $properties);
    }

    function getPathInfoForView(
        $user_id,
        $petition_id,
        $petition,
        $folder_id,
        $no_check = false,
        $lock = CB_DATABASE_DEFAULT_LOCK
    ) {
        $path_steps = $this->getPathInfo($petition_id, true, $lock);
        $path_step_total = $this->getPathStepCount($path_steps);

        $view = false;
        $handle_mode = 'confirm';
        if (@ $petition['reapply']) {
            $handle_mode = 'reapply';
        }

        require_once('workflow/change_path_history.csp');
        $logic = GRN_Workflow_ChangePathHistories::getInstance();
        $columns = [
            '_id',
            'col_path_step_data',
            'col_comment',
            'col_creator',
            'col_creator_name',
            'col_creator_foreign_key',
            'col_ctime'
        ];
        $change_path_histories = $logic->getListByPetitionId($petition_id,
            $columns);

        $in_path = false;
        $in_evaluated_path = false;
        $deleted_users = [];
        if (is_array($change_path_histories)
            && 0 < count($change_path_histories)
        ) {
            $logic = GRN_Workflow_ChangePathDeletedUsers::getInstance();
            $columns = [
                '_id',
                'col_change_path_history',
                'col_user'
            ];
            $tmp = $logic->getList(array_keys($change_path_histories),
                $user_id, $columns);
            foreach ($tmp as $deleted_user) {
                $change_path_history_id
                    = $deleted_user['col_change_path_history'];
                $change_path_history
                    = $change_path_histories[$change_path_history_id];
                $path_step_data_id
                    = $change_path_history['col_path_step_data'];
                if (array_key_exists($path_step_data_id, $deleted_users)) {
                    $deleted_users[$path_step_data_id] = [];
                }
                $deleted_users[$path_step_data_id][$deleted_user['col_user']]
                    = $deleted_user;

                if ($deleted_user['col_user'] === $user_id) {
                    $in_path = true;
                    $in_evaluated_path = true;
                }
            }
        }

        $in_process = null;
        $cancel_confirm = false;
        $col_finished = GRN_WORKFLOW_FINISHED_NONE;
        $change_path_history = [];
        foreach (array_keys($path_steps) as $path_step_id) {
            $path_step =& $path_steps[$path_step_id];
            $path_step_data_id = $path_step['_id'];

            if ($path_step['col_activate']) {
                if ($path_step['col_skip']) {
                    if (array_key_exists($path_step_data_id, $deleted_users)) {
                        if (array_key_exists($user_id,
                            $deleted_users[$path_step_data_id])
                        ) {
//                            $view = FALSE;
                            $handle_mode = 'change_transactor';

                            $deleted_user
                                = $deleted_users[$path_step_data_id][$user_id];
                            $change_path_history_id
                                = $deleted_user['col_change_path_history'];
                            $change_path_history
                                = $change_path_histories[$change_path_history_id];

                            $timestamp = new CB_TimeStamp();
                            $timestamp->unix_ts
                                = $change_path_history['col_ctime'];
                            $change_path_history['col_ctime'] = $timestamp;

                            $logic
                                = GRN_Workflow_ChangePathDeletedUsers::getInstance();
                            $columns = [
                                'tab_grn_workflow_changepathdeleteduser' => [
                                    '_id'              => 'pkey',
                                    'col_user'         => '_id',
                                    'col_display_name' => 'col_old_display_name',
                                    'col_foreign_key'  => 'col_foreign_key'
                                ],
                                'tab_cb_user'                            => [
                                    'col_display_name' => 'col_display_name',
                                    'col_valid'        => 'col_valid'
                                ]
                            ];
                            $change_path_history['deleted_users']
                                = $logic->getSortedList([$change_path_history_id],
                                $columns);

                            $logic
                                = GRN_Workflow_ChangePathAddUsers::getInstance();
                            $columns = [
                                'tab_grn_workflow_changepathadduser' => [
                                    '_id'              => 'pkey',
                                    'col_user'         => '_id',
                                    'col_display_name' => 'col_old_display_name',
                                    'col_foreign_key'  => 'col_foreign_key'
                                ],
                                'tab_cb_user'                        => [
                                    'col_display_name' => 'col_display_name',
                                    'col_valid'        => 'col_valid'
                                ]
                            ];
                            $change_path_history['add_users']
                                = $logic->getSortedList([$change_path_history_id],
                                $columns);
                        }
                    }
                } else {
                    if ( ! $in_process) {
                        // 処理中/完了した経路ステップ
                        if ( ! $path_step['col_finished']) {
                            // 処理中の経路ステップ
                            $path_step['in_process'] = true;
                            $in_process = $path_step_id;

                            if (false !== array_search($user_id,
                                    $path_step['uids'])
                            ) {
                                $view = true;
                                $handle_mode = null;
                                $in_path = true;
                                $in_evaluated_path = true;
                                if (GRN_WORKFLOW_STATUS_IN_PROCESS_CANCEL
                                    == $petition['status']
                                ) {
                                    foreach ($path_step['users'] as $user) {
                                        if (GRN_WORKFLOW_RESULT_CONFIRM
                                            == $user['col_result']
                                        ) {
                                            $cancel_confirm = true;
                                            break;
                                        }
                                    }
                                }
                                break;
                            } else {
                                $psdids = [];
                                while ($path_step) {
                                    if ($path_step['col_activate']) {
                                        $path_step_data_id = $path_step['_id'];
                                        $psdids[] = $path_step_data_id;
                                        if (false !== ($result
                                                = array_search($user_id,
                                                $path_step['uids']))
                                        ) {
                                            if (GRN_WORKFLOW_RESULT_ACCEPT
                                                <= $path_step['users'][$result]['col_result']
                                            ) {
                                                $view = true;
                                                $handle_mode = 'view_only';
                                            } else {
                                                $view = true;
                                            }
                                            $in_path = true;
                                            $in_evaluated_path = true;
                                            break;
                                        } elseif (array_key_exists($path_step_data_id,
                                            $deleted_users)
                                        ) {
                                            if (array_key_exists($user_id,
                                                $deleted_users[$path_step_data_id])
                                            ) {
//                                                $view = FALSE;
                                                $handle_mode
                                                    = 'change_transactor';

                                                $deleted_user
                                                    = $deleted_users[$path_step_data_id][$user_id];
                                                $change_path_history_id
                                                    = $deleted_user['col_change_path_history'];
                                                $change_path_history
                                                    = $change_path_histories[$change_path_history_id];

                                                $timestamp = new CB_TimeStamp();
                                                $timestamp->unix_ts
                                                    = $change_path_history['col_ctime'];
                                                $change_path_history['col_ctime']
                                                    = $timestamp;

                                                $logic
                                                    = GRN_Workflow_ChangePathDeletedUsers::getInstance();
                                                $columns = [
                                                    'tab_grn_workflow_changepathdeleteduser' => [
                                                        '_id'              => 'pkey',
                                                        'col_user'         => '_id',
                                                        'col_display_name' => 'col_old_display_name',
                                                        'col_foreign_key'  => 'col_foreign_key'
                                                    ],
                                                    'tab_cb_user'                            => [
                                                        'col_display_name' => 'col_display_name',
                                                        'col_valid'        => 'col_valid'
                                                    ]
                                                ];
                                                $change_path_history['deleted_users']
                                                    = $logic->getSortedList([$change_path_history_id],
                                                    $columns);

                                                $logic
                                                    = GRN_Workflow_ChangePathAddUsers::getInstance();
                                                $columns = [
                                                    'tab_grn_workflow_changepathadduser' => [
                                                        '_id'              => 'pkey',
                                                        'col_user'         => '_id',
                                                        'col_display_name' => 'col_old_display_name',
                                                        'col_foreign_key'  => 'col_foreign_key'
                                                    ],
                                                    'tab_cb_user'                        => [
                                                        'col_display_name' => 'col_display_name',
                                                        'col_valid'        => 'col_valid'
                                                    ]
                                                ];
                                                $change_path_history['add_users']
                                                    = $logic->getSortedList([$change_path_history_id],
                                                    $columns);
                                                break;
                                            }
                                        }
                                    }
                                    $path_step =& $path_step['previous'];
                                }
                            }
                        } else {
                            // 完了した経路ステップ
                            if (false !== array_search($user_id,
                                    $path_step['uids'])
                            ) {
                                $in_path = true;
                                if (GRN_WORKFLOW_STATUS_REJECTION
                                    == $petition['status']
                                    || GRN_WORKFLOW_STATUS_REMAND
                                       == $petition['status']
                                ) {
                                    if (GRN_WORKFLOW_FINISHED_REJECTION
                                        != $col_finished
                                        && GRN_WORKFLOW_FINISHED_REMAND
                                           != $col_finished
                                    ) {
                                        $view = true;
                                        $in_evaluated_path = true;
                                    }
                                } else {
                                    $view = true;
                                    $in_evaluated_path = true;
                                }
                            } else {
                                if (array_key_exists($path_step_data_id,
                                    $deleted_users)
                                ) {
                                    if (array_key_exists($user_id,
                                        $deleted_users[$path_step_data_id])
                                    ) {
//                                        $view = FALSE;
                                        $handle_mode = 'change_transactor';

                                        $deleted_user
                                            = $deleted_users[$path_step_data_id][$user_id];
                                        $change_path_history_id
                                            = $deleted_user['col_change_path_history'];
                                        $change_path_history
                                            = $change_path_histories[$change_path_history_id];

                                        $timestamp = new CB_TimeStamp();
                                        $timestamp->unix_ts
                                            = $change_path_history['col_ctime'];
                                        $change_path_history['col_ctime']
                                            = $timestamp;

                                        $logic
                                            = GRN_Workflow_ChangePathDeletedUsers::getInstance();
                                        $columns
                                            = [
                                            'tab_grn_workflow_changepathdeleteduser' => [
                                                '_id'              => 'pkey',
                                                'col_user'         => '_id',
                                                'col_display_name' => 'col_old_display_name',
                                                'col_foreign_key'  => 'col_foreign_key'
                                            ],
                                            'tab_cb_user'                            => [
                                                'col_display_name' => 'col_display_name',
                                                'col_valid'        => 'col_valid'
                                            ]
                                        ];
                                        $change_path_history['deleted_users']
                                            = $logic->getSortedList([$change_path_history_id],
                                            $columns);

                                        $logic
                                            = GRN_Workflow_ChangePathAddUsers::getInstance();
                                        $columns = [
                                            'tab_grn_workflow_changepathadduser' => [
                                                '_id'              => 'pkey',
                                                'col_user'         => '_id',
                                                'col_display_name' => 'col_old_display_name',
                                                'col_foreign_key'  => 'col_foreign_key'
                                            ],
                                            'tab_cb_user'                        => [
                                                'col_display_name' => 'col_display_name',
                                                'col_valid'        => 'col_valid'
                                            ]
                                        ];
                                        $change_path_history['add_users']
                                            = $logic->getSortedList([$change_path_history_id],
                                            $columns);
                                    }
                                }
                            }

                            if (GRN_WORKFLOW_STATUS_REJECTION
                                == $petition['status']
                                || GRN_WORKFLOW_STATUS_REMAND
                                   == $petition['status']
                            ) {
                                if (GRN_WORKFLOW_FINISHED_REJECTION
                                    == $path_step['col_finished']
                                    || GRN_WORKFLOW_FINISHED_REMAND
                                       == $path_step['col_finished']
                                ) {
                                    $col_finished = $path_step['col_finished'];
                                }
                            }
                        }
                        $path_step['not_modify'] = true;
                    } else {
                        // 未処理の経路ステップ
                        if (false !== array_search($user_id,
                                $path_step['uids'])
                        ) {
                            $in_path = true;
                            if (GRN_WORKFLOW_STATUS_REJECTION
                                == $petition['status']
                                || GRN_WORKFLOW_STATUS_REMAND
                                   == $petition['status']
                            ) {
                                if (GRN_WORKFLOW_FINISHED_REJECTION
                                    != $col_finished
                                    && GRN_WORKFLOW_FINISHED_REMAND
                                       != $col_finished
                                ) {
                                    $view = true;
                                    $in_evaluated_path = true;
                                }
                            }
                            break;
                        }

                        if (GRN_WORKFLOW_STATUS_REJECTION == $petition['status']
                            || GRN_WORKFLOW_STATUS_REMAND == $petition['status']
                        ) {
                            if (GRN_WORKFLOW_FINISHED_REJECTION
                                == $path_step['col_finished']
                                || GRN_WORKFLOW_FINISHED_REMAND
                                   == $path_step['col_finished']
                            ) {
                                $col_finished = $path_step['col_finished'];
                            }
                        }
                        $path_step['not_modify'] = false;
                    }
                }
            }
        }

        if (GRN_WORKFLOW_STATUS_UNPROCESSING_CANCEL == $petition['status']) {
            $view = false;
        }

        if ($user_id == @ $petition['creator']
            || $user_id == @ $petition['agent_user']
            || $user_id == @ $petition['user']
        ) {
            // ログインユーザーは申請者
            $view = true;
            if ( ! $in_process
                 && GRN_WORKFLOW_STATUS_REMAND == $petition['status']
            ) {
                // 申請者本人に差し戻された
                $handle_mode = null;
            }
            $in_path = true;
            $in_evaluated_path = true;
        }

        $error = false;
        if ( ! $in_evaluated_path) {
            if (@ $petition['reapply']) {
                // 再申請された
                $handle_mode = 'reapply';

                if ( ! $no_check) {
                    require_once('workflow/folder_logic.csp');
                    $logic = GRN_Workflow_Folder_Logic::getInstance();
                    $folders = $logic->getList($user_id);

                    if (count($folders) <= 0) {
                        $folder_util
                            = GRN_Workflow_Folder_Controller_Utility::getInstance();
                        if ($folder_util->isInitializeUser($user_id)) {
                            $folder_util->initializeUser($user_id);
                        }
                        $folders = $logic->getList($user_id);
                    }

                    require_once('workflow/folderrelation_logic.csp');
                    $logic = GRN_Workflow_FolderRelation_Logic::getInstance();
                    $petition_ids = [$petition_id];
                    $folder_relations
                        = $logic->getSpecificList(array_keys($folders),
                        $petition_id);
                    if ( ! is_array($folder_relations)
                         || 0 == count($folder_relations)
                    ) {
                        cb_throw_error(E_GRN_WRKF_PETITION_DENY_ACCESS);
                    }
                }
            } else {
                if ($in_path
                    && GRN_WORKFLOW_STATUS_UNPROCESSING_CANCEL
                       != $petition['status']
                ) {
                    // まだ処理が回ってきてない（進行中、差し戻し）
                    $error = true;
                    $handle_mode = 'confirm';
                } else {
                    if ( ! $no_check) {
                        cb_throw_error(E_GRN_WRKF_PETITION_DENY_ACCESS);
                    }
                }
            }
        }

        require_once('workflow/folderrelation_logic.csp');
        $logic = GRN_Workflow_FolderRelation_Logic::getInstance();
        $folder_relation = $logic->getSpecific($folder_id, $petition_id);
        if ( ! is_array($folder_relation) || 0 == count($folder_relation)) {
            require_once('workflow/folder_logic.csp');
            $logic = GRN_Workflow_Folder_Logic::getInstance();

            $folder_util
                = GRN_Workflow_Folder_Controller_Utility::getInstance();
            if ($folder_util->isInitializeUser($user_id)) {
                $folder_util->initializeUser($user_id);
            }

            $folder = $logic->getByForeignKey($user_id,
                'TEMP_FOLDER_FOREIGN_KEY');

            require_once('workflow/folderrelation_logic.csp');
            $logic = GRN_Workflow_FolderRelation_Logic::getInstance();
            $folder_relation = $logic->getSpecific($folder['_id'],
                $petition_id);
            if ( ! is_array($folder_relation) || 0 == count($folder_relation)) {
                $handle_mode = 'view_only';
            }
        }

        return [
            'path_steps'          => $path_steps,
            'path_step_total'     => $path_step_total,
            'handle_mode'         => $handle_mode,
            'view'                => $view,
            'in_process'          => $in_process,
            'cancel_confirm'      => $cancel_confirm,
            'error'               => $error,
            'change_path_history' => $change_path_history
        ];
    }

    function getPageTitleForHandle($error, $handle_mode, $petition)
    {
        if ($error) {
            $key = 'handle_confirm';
        } elseif ('view_only' == $handle_mode) {
            $key = 'handle_view_only';
        } else {
            switch ($petition['status']) {
                case GRN_WORKFLOW_STATUS_UNPROCESSING_CANCEL:
                    $key = 'handle_unprocessing_cancel';
                    break;
                case GRN_WORKFLOW_STATUS_IN_PROCESS_CANCEL:
                    $key = 'handle_in_process_cancel';
                    break;
                case GRN_WORKFLOW_STATUS_REMAND:
                    $key = 'handle_remand';
                    break;
                case GRN_WORKFLOW_STATUS_REJECTION:
                    $key = 'handle_rejection';
                    break;
                default:
                    switch ($handle_mode) {
                        case 'change_transactor':
                            $key = 'handle_change_transactor';
                            break;
                        case 'reapply':
                        case 'confirm':
                            $key = 'handle_confirm';
                            break;
                        default:
                            $key = 'handle';
                            break;
                    }
                    break;
            }
        }

        return cb_msg('grn.workflow', $key);
    }


    /**
     * 項目値を更新
     */
    function modifyItemData($petition_id, & $params, $path_step_data_id)
    {
        require_once('workflow/controller_util.csp');
        $item_data_util
            = GRN_Workflow_ItemData_Controller_Utility::getInstance();
        $translation_map_item_data = [
            'iid'                => '_id',
            'petition'           => 'petition',
            'item_data'          => 'item',
            'number'             => 'number',
            'text'               => 'text',
            'display_name'       => 'display_name',
            'type'               => 'type',
            'option_string'      => 'option_string',
            'option_string_type' => 'option_string_type',
            'description'        => 'description',
            'description_type'   => 'description_type',
            'description_editor' => 'description_editor',
            'foreign_key'        => 'foreign_key',
            'attach_file'        => 'attach_file',
            'attach_file_view'   => 'attach_file_view',
            'settings'           => 'settings',
            'br'                 => 'br',
            'separator'          => 'separator',
            'required'           => 'required',
            'list_index'         => 'list_index',
            'access_change'      => 'access_change',
        ];
        $item_data_list
            = $item_data_util->getListView($translation_map_item_data,
            $petition_id);

        require_once('workflow/itemdata_logic.csp');
        $itemdata_logic = GRN_Workflow_ItemData_Logic::getInstance();

        foreach ($item_data_list as $item_data) {
            $target_item_id = 'item_' . $item_data['iid'];
            if ( ! array_key_exists($target_item_id, $params)
                 && ! array_key_exists($target_item_id . '_year',
                    $params) // GRN_WORKFLOW_CONDITION_ITEM_DATE
            ) {
                continue;
            }

            if (GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                != $item_data['foreign_key']
                && GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                   != $item_data['foreign_key']
                && GRN_WORKFLOW_CONDITION_ITEM_DATE != $item_data['foreign_key']
                && GRN_WORKFLOW_CONDITION_ITEM_NUMERIC
                   != $item_data['foreign_key']
                && GRN_WORKFLOW_CONDITION_ITEM_CALC_NUMERIC
                   != $item_data['foreign_key']
            ) {
                continue;
            }

            require_once('workflow/item_resources.csp');
            $item_util = grn_workflow_get_item_util($item_data['foreign_key']);
            $item_util->parseItemData($params, 'item', $item_data);
            $tmp = $item_data['item_data'];
            $item_data['item_data'] = $item_data['iid'];
            $item_data['idid'] = $item_data['iid'];
            $item_data['iid'] = $tmp;
            $item_data_id = $item_data['item_data'];

            unset($item_data['item_data']);
            $itemdata_logic->modify($item_data_id, $petition_id, $item_data);
        }
    }

    function filter(
        $user_id,
        $folder_id,
        $folder_type,
        $pids,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        if (count($pids) <= 0) {
            return [];
        }

        $remove_item_ids = [];
        if ($folder_type == GRN_WORKFLOW_FOLDER_TYPE_OUT_ID
            || $folder_type == GRN_WORKFLOW_FOLDER_TYPE_FINISH_ID
        ) {
            //結果一覧
            //送信フォルダ
            $item_data_util
                = GRN_Workflow_ItemData_Controller_Utility::getInstance();
            $translation_map_item_data = [
                //Item Data Information
                '_id'                  => '_id',
                'col_petition'         => 'petition',
                'col_attach_file'      => 'attach_file',
                'col_attach_file_view' => 'attach_file_view',
                'col_type'             => 'type',
                'col_foreign_key'      => 'foreign_key',
            ];
            $item_data_list
                = $item_data_util->gets($translation_map_item_data,
                $pids);

            foreach ($item_data_list as $id => $item_data) {
                if (($item_data['col_foreign_key']
                     == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                     || $item_data['col_foreign_key']
                        == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                    )
                    && $item_data['col_type'] != 1
                ) {
                    if ($item_data['col_attach_file_view'] != 1) {
                        $remove_item_ids[] = $id;
                    }
                }
            }
            unset($item_data_util);
        } elseif ($folder_type == GRN_WORKFLOW_FOLDER_TYPE_IN_ID) {
            // 受信一覧
            $translation_map_petition = [
                'pid'        => '_id',              //Petition ID
                'status'     => 'status',           //Petition Status
                'user'       => 'user',
                'agent_user' => 'agent_user',
            ];

            // 申請を取得
            $option = [];
            $option['condition'][] = [
                'column'   => '_id',
                'value'    => $pids,
                'operator' => 'IN'
            ];

            $petition_util
                = GRN_Workflow_Petition_Controller_Utility::getInstance();
            $petition_list
                = $petition_util->getListView($translation_map_petition, null,
                $option);
            unset($petition_util);

            $item_data_util
                = GRN_Workflow_ItemData_Controller_Utility::getInstance();
            $translation_map_item_data = [
                //Item Data Information
                '_id'                  => '_id',
                'col_petition'         => 'petition',
                'col_attach_file'      => 'attach_file',
                'col_attach_file_view' => 'attach_file_view',
                'col_type'             => 'type',
                'col_foreign_key'      => 'foreign_key',
            ];
            $item_data_list
                = $item_data_util->gets($translation_map_item_data,
                $pids);
            unset($item_data_util);

            // 経路の判定
            $path_steps_list = $this->getPathInfoEx($pids, true, $lock_mode);
            foreach (array_keys($pids) as $key) {
                //最終承認か完了されている申請かどうか
                $pid = $pids[$key];
                $petition =& $petition_list[$pid];
                /*
                if ( $petition['status'] == GRN_WORKFLOW_STATUS_FINISHED ||
                     $petition['status'] == GRN_WORKFLOW_STATUS_ACCEPTANCE
                {
                    continue;
                }
*/

                $path_steps =& $path_steps_list[$pid]['path_steps'];

                // 取り消し
                if ($petition['status']
                    == GRN_WORKFLOW_STATUS_UNPROCESSING_CANCEL
                ) {
                    // その申請のすべての項目を検索対象に含めない
                    $path_step = array_shift($path_steps);
                    foreach ($path_step['items'] as $item) {
                        $remove_item_ids[] = $item['iid'];
                    }
                    continue;
                }

                $in_process = null;
                foreach (array_keys($path_steps) as $path_step_id) {
                    $path_step =& $path_steps[$path_step_id];
                    $path_step_data_id = $path_step['_id'];

                    if ($path_step['col_activate']) {
                        if ( ! $path_step['col_skip']) {
                            if ( ! $in_process) {
                                // 処理中/完了した経路ステップ
                                if ( ! $path_step['col_finished']) {
                                    // 処理中の経路ステップ
                                    $in_process = $path_step_id;
                                    break;
                                }
                            }
                        }

                    }
                }
                if ( ! is_null($in_process)) {
                    // 申請者の方向に向かって判定
                    $path_step_ids_tmp = array_keys($path_steps);
                    $path_step_ids = [];
                    foreach ($path_step_ids_tmp as $path_step_id) {
                        if ($path_step_id == $in_process) {
                            $path_step_ids[] = $path_step_id;
                            break;
                        }
                        $path_step_ids[] = $path_step_id;
                    }
                    $path_step_ids = array_reverse($path_step_ids);

                    $user_path_step_id = null;
                    // 経路にユーザーが含まれているかどうか
                    for ($i = 0; $i < count($path_step_ids); $i++) {
                        $path_step =& $path_steps[$path_step_ids[$i]];
                        if ( ! $path_step['col_activate']
                             || $path_step['col_skip']
                        ) {
                            // アクティブではないか省略の経路ステップは外す
                            continue;
                        }

                        $users = $path_step['users'];
                        for ($j = 0; $j < count($users); $j++) {
                            if ($user_id == $users[$j]['col_user']) {
                                $user_path_step_id = $path_step_ids[$i];
                                break 2;
                            }
                        }
                    }
                    if ( ! is_null($user_path_step_id)) {
                        // ユーザーが経路にいる
                        foreach (
                            $path_steps[$user_path_step_id]['items'] as $access
                        ) {
                            if ( ! is_null($access['aid'])
                                 && $access['view'] != 1
                            ) {
                                $remove_item_ids[] = $access['iid'];
                            }
                        }
                    } else {
                        // ユーザーが経路にいない
                        $path_step_ids_tmp = array_keys($path_steps);
                        $path_step_ids = [];
                        $after = false;
                        foreach ($path_step_ids_tmp as $path_step_id) {
                            $path_step =& $path_steps[$path_step_id];
                            if ($path_step['col_type']
                                == GRN_WORKFLOW_CIRCULAR
                            ) {
                                //回覧は飛ばす
                                continue;
                            }
                            if ($path_step_id == $in_process) {
                                $path_step_ids[] = $path_step_id;
                                $after = true;
                            } else {
                                if ($after == true) {
                                    $path_step_ids[] = $path_step_id;
                                }
                            }
                        }
                        $user_path_step_id = null;
                        // 経路にユーザーが含まれているかどうか
                        for ($i = 0; $i < count($path_step_ids); $i++) {
                            $path_step =& $path_steps[$path_step_ids[$i]];
                            if ( ! $path_step['col_activate']
                                 || $path_step['col_skip']
                            ) {
                                // 非アクティブと省略の経路ステップは外す
                                continue;
                            }

                            $users = $path_step['users'];
                            for ($j = 0; $j < count($users); $j++) {
                                if ($user_id == $users[$j]['col_user']) {
                                    $user_path_step_id = $path_step_ids[$i];
                                    break 2;
                                }
                            }
                        }
                        if ( ! is_null($user_path_step_id)) {
                            // ユーザーが経路にいる
                            foreach (
                                $path_steps[$user_path_step_id]['items'] as
                                $access
                            ) {
                                if ( ! is_null($access['aid'])
                                     && $access['view'] != 1
                                ) {
                                    $remove_item_ids[] = $access['iid'];
                                }
                            }
                        } else {
                            // ユーザーが経路にいない
                            if ($petition['user'] == $user_id
                                || $petition['agent_user'] == $user_id
                            ) {
                                //申請者
                                foreach ($item_data_list as $id => $item_data) {
                                    if ($item_data['col_petition'] != $pid) {
                                        continue;
                                    }
                                    if (($item_data['col_foreign_key']
                                         == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                                         || $item_data['col_foreign_key']
                                            == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                                        )
                                        && $item_data['col_type'] != 1
                                    ) {
                                        if ($item_data['col_attach_file_view']
                                            != 1
                                        ) {
                                            $remove_item_ids[] = $id;
                                        }
                                    }
                                }
                            } else {
                                // その申請のすべての項目を検索対象に含めない
                                $path_step = array_shift($path_steps);
                                foreach ($path_step['items'] as $item) {
                                    $remove_item_ids[] = $item['iid'];
                                }
                            }
                        }
                    }
                } else {
                    //差し戻し、取り戻しかどうかの判定
                    if ($petition['status'] == GRN_WORKFLOW_STATUS_REMAND
                        || $petition['status']
                           == GRN_WORKFLOW_STATUS_IN_PROCESS_CANCEL
                        || $petition['status'] == GRN_WORKFLOW_STATUS_REJECTION
                    ) {
                        $path_step_ids_tmp = array_keys($path_steps);
                        $path_step_ids = [];
                        foreach ($path_step_ids_tmp as $path_step_id) {
                            $path_step =& $path_steps[$path_step_id];
                            if ($path_step['col_type']
                                == GRN_WORKFLOW_CIRCULAR
                            ) {
                                //回覧は飛ばす
                                continue;
                            }
                            $path_step_ids[] = $path_step_id;
                        }
                        $user_path_step_id = null;
                        // 経路にユーザーが含まれているかどうか
                        for ($i = 0; $i < count($path_step_ids); $i++) {
                            $path_step =& $path_steps[$path_step_ids[$i]];
                            if ( ! $path_step['col_activate']
                                 || $path_step['col_skip']
                            ) {
                                // アクティブではないか省略の経路ステップは外す
                                continue;
                            }

                            $users = $path_step['users'];
                            for ($j = 0; $j < count($users); $j++) {
                                if ($user_id == $users[$j]['col_user']) {
                                    $user_path_step_id = $path_step_ids[$i];
                                    break 2;
                                }
                            }
                        }
                        if ( ! is_null($user_path_step_id)) {
                            // ユーザーが経路にいる
                            foreach (
                                $path_steps[$user_path_step_id]['items'] as
                                $access
                            ) {
                                if ( ! is_null($access['aid'])
                                     && $access['view'] != 1
                                ) {
                                    $remove_item_ids[] = $access['iid'];
                                }
                            }
                        } else {
                            // ユーザーが経路にいない

                            if ($petition['user'] == $user_id
                                || $petition['agent_user'] == $user_id
                            ) {
                                //申請者
                                foreach ($item_data_list as $id => $item_data) {
                                    if ($item_data['col_petition'] != $pid) {
                                        continue;
                                    }
                                    if (($item_data['col_foreign_key']
                                         == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                                         || $item_data['col_foreign_key']
                                            == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                                        )
                                        && $item_data['col_type'] != 1
                                    ) {
                                        if ($item_data['col_attach_file_view']
                                            != 1
                                        ) {
                                            $remove_item_ids[] = $id;
                                        }
                                    }
                                }
                            } else {
                                // その申請のすべての項目を検索対象に含めない
                                $path_step = array_shift($path_steps);
                                foreach ($path_step['items'] as $item) {
                                    $remove_item_ids[] = $item['iid'];
                                }
                            }
                        }
                    } elseif ($petition['status']
                              == GRN_WORKFLOW_STATUS_FINISHED
                              || $petition['status']
                                 == GRN_WORKFLOW_STATUS_ACCEPTANCE
                    ) {
                        // 承認/完了申請
                        // 経路にいる時は経路優先で

                        $path_step_ids_tmp = array_keys($path_steps);
                        $path_step_ids_tmp = array_reverse($path_step_ids_tmp);

                        $path_step_ids = [];
                        $after = false;
                        foreach ($path_step_ids_tmp as $path_step_id) {
                            $path_step =& $path_steps[$path_step_id];
                            /*
                            if ( $path_step['col_type'] == GRN_WORKFLOW_CIRCULAR )
                            {
                                //回覧は飛ばす
                                continue;
                            }
                            */
                            $path_step_ids[] = $path_step_id;
                        }
                        $user_path_step_id = null;
                        // 経路にユーザーが含まれているかどうか
                        for ($i = 0; $i < count($path_step_ids); $i++) {
                            $path_step =& $path_steps[$path_step_ids[$i]];
                            if ( ! $path_step['col_activate']
                                 || $path_step['col_skip']
                            ) {
                                // 非アクティブと省略の経路ステップは外す
                                continue;
                            }
                            $users = $path_step['users'];
                            for ($j = 0; $j < count($users); $j++) {
                                if ($user_id == $users[$j]['col_user']) {
                                    $user_path_step_id = $path_step_ids[$i];
                                    break 2;
                                }
                            }
                        }
                        if ( ! is_null($user_path_step_id)) {
                            // ユーザーが経路にいる
                            foreach (
                                $path_steps[$user_path_step_id]['items'] as
                                $access
                            ) {
                                if ( ! is_null($access['aid'])
                                     && $access['view'] != 1
                                ) {
                                    $remove_item_ids[] = $access['iid'];
                                }
                            }
                        } else {
                            if ($petition['user'] == $user_id
                                || $petition['agent_user'] == $user_id
                            ) {
                                //申請者
                                foreach ($item_data_list as $id => $item_data) {
                                    if ($item_data['col_petition'] != $pid) {
                                        continue;
                                    }
                                    if (($item_data['col_foreign_key']
                                         == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                                         || $item_data['col_foreign_key']
                                            == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                                        )
                                        && $item_data['col_type'] != 1
                                    ) {
                                        if ($item_data['col_attach_file_view']
                                            != 1
                                        ) {
                                            $remove_item_ids[] = $id;
                                        }
                                    }
                                }
                            }
                        }
                    } else {
                        // その申請のすべての項目を検索対象に含めない
                        $path_step = array_shift($path_steps);
                        foreach ($path_step['items'] as $item) {
                            $remove_item_ids[] = $item['iid'];
                        }
                    }
                }
            }
        } elseif ($folder_type == GRN_WORKFLOW_FOLDER_TYPE_UNPROCESSED_ID) {
            // 未処理一覧
            $path_steps_list = $this->getPathInfoEx($pids, true, $lock_mode);

            $translation_map_petition = [
                'pid'        => '_id',              //Petition ID
                'status'     => 'status',           //Petition Status
                'user'       => 'user',
                'agent_user' => 'agent_user',
            ];

            $option = [];
            $option['condition'][] = [
                'column'   => '_id',
                'value'    => $pids,
                'operator' => 'IN'
            ];

            $petition_util
                = GRN_Workflow_Petition_Controller_Utility::getInstance();
            $petition_list
                = $petition_util->getListView($translation_map_petition, null,
                $option);
            unset($petition_util);

            $item_data_util
                = GRN_Workflow_ItemData_Controller_Utility::getInstance();
            $translation_map_item_data = [
                //Item Data Information
                '_id'                  => '_id',
                'col_petition'         => 'petition',
                'col_attach_file'      => 'attach_file',
                'col_attach_file_view' => 'attach_file_view',
                'col_type'             => 'type',
                'col_foreign_key'      => 'foreign_key',
            ];
            $item_data_list
                = $item_data_util->gets($translation_map_item_data,
                $pids);
            unset($item_data_util);

            foreach (array_keys($pids) as $key) {
                $pid = $pids[$key];
                $in_process = null;
                $path_steps =& $path_steps_list[$pid]['path_steps'];

                foreach (array_keys($path_steps) as $path_step_id) {
                    $path_step =& $path_steps[$path_step_id];
                    $path_step_data_id = $path_step['_id'];

                    if ($path_step['col_activate']) {
                        if ( ! $path_step['col_skip']) {
                            if ( ! $in_process) {
                                // 処理中/完了した経路ステップ
                                if ( ! $path_step['col_finished']) {
                                    // 処理中の経路ステップ
                                    $in_process = $path_step_id;
                                    //break;
                                }
                            }
                        }

                    }
                }
                if ( ! is_null($in_process)) {
                    $petition =& $petition_list[$pid];
                    if ($petition['status']
                        == GRN_WORKFLOW_STATUS_UNPROCESSING_CANCEL
                    ) {
                        //取り戻し
                        // その申請のすべての項目を検索対象に含めない
                        $path_step = array_shift($path_steps);
                        foreach ($path_step['items'] as $item) {
                            $remove_item_ids[] = $item['iid'];
                        }
                    } else {
                        //ユーザーが経路にいるかどうかの判定
                        $path_step =& $path_steps[$in_process];
                        $users = $path_step['users'];
                        $in_path = false;
                        for ($j = 0; $j < count($users); $j++) {
                            if ($user_id == $users[$j]['col_user']) {
                                $in_path = true;
                                break;
                            }
                        }
                        if ($in_path == true) {
                            foreach (
                                $path_steps[$in_process]['items'] as $access
                            ) {
                                if ( ! is_null($access['aid'])
                                     && $access['view'] != 1
                                ) {
                                    $remove_item_ids[] = $access['iid'];
                                }
                            }
                        } else {
                            if ($petition['user'] == $user_id
                                || $petition['agent_user'] == $user_id
                            ) {
                                //申請者
                                foreach ($item_data_list as $id => $item_data) {
                                    if ($item_data['col_petition'] != $pid) {
                                        continue;
                                    }
                                    if (($item_data['col_foreign_key']
                                         == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                                         || $item_data['col_foreign_key']
                                            == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                                        )
                                        && $item_data['col_type'] != 1
                                    ) {
                                        if ($item_data['col_attach_file_view']
                                            != 1
                                        ) {
                                            $remove_item_ids[] = $id;
                                        }
                                    }
                                }
                            } else {
                                // その申請のすべての項目を検索対象に含めない
                                $path_step = array_shift($path_steps);
                                foreach ($path_step['items'] as $item) {
                                    $remove_item_ids[] = $item['iid'];
                                }
                            }
                        }
                    }
                } else {
                    $petition =& $petition_list[$pid];

                    if ($petition['status'] == GRN_WORKFLOW_STATUS_REMAND) {
                        //申請者本人に差し戻し
                        if ($petition['user'] == $user_id
                            || $petition['agent_user'] == $user_id
                        ) {
                            foreach ($item_data_list as $id => $item_data) {
                                if ($item_data['col_petition'] != $pid) {
                                    continue;
                                }
                                if (($item_data['col_foreign_key']
                                     == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                                     || $item_data['col_foreign_key']
                                        == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                                    )
                                    && $item_data['col_type'] != 1
                                ) {
                                    if ($item_data['col_attach_file_view']
                                        != 1
                                    ) {
                                        $remove_item_ids[] = $id;
                                    }
                                }
                            }
                        } else {
                            $path_step_ids_tmp = array_keys($path_steps);
                            $path_step_ids = [];
                            foreach ($path_step_ids_tmp as $path_step_id) {
                                $path_step =& $path_steps[$path_step_id];
                                if ($path_step['col_type']
                                    == GRN_WORKFLOW_CIRCULAR
                                ) {
                                    //回覧は飛ばす
                                    continue;
                                }
                                $path_step_ids[] = $path_step_id;
                            }
                            $user_path_step_id = null;
                            // 経路にユーザーが含まれているかどうか
                            for ($i = 0; $i < count($path_step_ids); $i++) {
                                $path_step =& $path_steps[$path_step_ids[$i]];
                                if ( ! $path_step['col_activate']
                                     || $path_step['col_skip']
                                ) {
                                    // アクティブではないか省略の経路ステップは外す
                                    continue;
                                }

                                $users = $path_step['users'];
                                for ($j = 0; $j < count($users); $j++) {
                                    if ($user_id == $users[$j]['col_user']) {
                                        $user_path_step_id = $path_step_ids[$i];
                                        break 2;
                                    }
                                }
                            }
                            if ( ! is_null($user_path_step_id)) {
                                // ユーザーが経路にいる
                                foreach (
                                    $path_steps[$user_path_step_id]['items'] as
                                    $access
                                ) {
                                    if ( ! is_null($access['aid'])
                                         && $access['view'] != 1
                                    ) {
                                        $remove_item_ids[] = $access['iid'];
                                    }
                                }
                            } else {
                                // その申請のすべての項目を検索対象に含めない
                                $path_step = array_shift($path_steps);
                                foreach ($path_step['items'] as $item) {
                                    $remove_item_ids[] = $item['iid'];
                                }
                            }
                        }

                    } elseif ($petition['status']
                              == GRN_WORKFLOW_RESULT_REJECT
                    ) {
                        //却下
                        if ($petition['user'] == $user_id
                            || $petition['agent_user'] == $user_id
                        ) {
                            //申請者
                            foreach ($item_data_list as $id => $item_data) {
                                if ($item_data['col_petition'] != $pid) {
                                    continue;
                                }
                                if (($item_data['col_foreign_key']
                                     == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                                     || $item_data['col_foreign_key']
                                        == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                                    )
                                    && $item_data['col_type'] != 1
                                ) {
                                    if ($item_data['col_attach_file_view']
                                        != 1
                                    ) {
                                        $remove_item_ids[] = $id;
                                    }
                                }
                            }
                        } else {
                            /*
                            // その申請のすべての項目を検索対象に含めない
                            $path_step = array_shift($path_steps);
                            foreach ($path_step['items'] as $item)
                            {
                                $remove_item_ids[] = $item['iid'];
                            }
                            */
                            $path_step_ids_tmp = array_keys($path_steps);
                            $path_step_ids = [];
                            foreach ($path_step_ids_tmp as $path_step_id) {
                                $path_step =& $path_steps[$path_step_id];
                                if ($path_step['col_type']
                                    == GRN_WORKFLOW_CIRCULAR
                                ) {
                                    //回覧は飛ばす
                                    continue;
                                }
                                $path_step_ids[] = $path_step_id;
                            }
                            $user_path_step_id = null;
                            // 経路にユーザーが含まれているかどうか
                            for ($i = 0; $i < count($path_step_ids); $i++) {
                                $path_step =& $path_steps[$path_step_ids[$i]];
                                if ( ! $path_step['col_activate']
                                     || $path_step['col_skip']
                                ) {
                                    // アクティブではないか省略の経路ステップは外す
                                    continue;
                                }

                                $users = $path_step['users'];
                                for ($j = 0; $j < count($users); $j++) {
                                    if ($user_id == $users[$j]['col_user']) {
                                        $user_path_step_id = $path_step_ids[$i];
                                        break 2;
                                    }
                                }
                            }
                            if ( ! is_null($user_path_step_id)) {
                                // ユーザーが経路にいる
                                foreach (
                                    $path_steps[$user_path_step_id]['items'] as
                                    $access
                                ) {
                                    if ( ! is_null($access['aid'])
                                         && $access['view'] != 1
                                    ) {
                                        $remove_item_ids[] = $access['iid'];
                                    }
                                }
                            } else {
                                // ユーザーが経路にいない

                                if ($petition['user'] == $user_id
                                    || $petition['agent_user'] == $user_id
                                ) {
                                    //申請者
                                    foreach (
                                        $item_data_list as $id => $item_data
                                    ) {
                                        if ($item_data['col_petition']
                                            != $pid
                                        ) {
                                            continue;
                                        }
                                        if (($item_data['col_foreign_key']
                                             == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                                             || $item_data['col_foreign_key']
                                                == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                                            )
                                            && $item_data['col_type'] != 1
                                        ) {
                                            if ($item_data['col_attach_file_view']
                                                != 1
                                            ) {
                                                $remove_item_ids[] = $id;
                                            }
                                        }
                                    }
                                } else {
                                    // その申請のすべての項目を検索対象に含めない
                                    $path_step = array_shift($path_steps);
                                    foreach ($path_step['items'] as $item) {
                                        $remove_item_ids[] = $item['iid'];
                                    }
                                }
                            }
                        }
                    } elseif ($petition['status']
                              == GRN_WORKFLOW_STATUS_UNPROCESSING_CANCEL
                    ) {
                        //取り戻し
                        // その申請のすべての項目を検索対象に含めない
                        $path_step = array_shift($path_steps);
                        foreach ($path_step['items'] as $item) {
                            $remove_item_ids[] = $item['iid'];
                        }
                    } elseif ($petition['status']
                              == GRN_WORKFLOW_STATUS_IN_PROCESS_CANCEL
                    ) {
                        //取り消し

                        $path_step_ids_tmp = array_keys($path_steps);
                        $path_step_ids = [];
                        foreach ($path_step_ids_tmp as $path_step_id) {
                            $path_step =& $path_steps[$path_step_id];
                            if ($path_step['col_type']
                                == GRN_WORKFLOW_CIRCULAR
                            ) {
                                //回覧は飛ばす
                                continue;
                            }
                            $path_step_ids[] = $path_step_id;
                        }
                        $user_path_step_id = null;
                        // 経路にユーザーが含まれているかどうか
                        for ($i = 0; $i < count($path_step_ids); $i++) {
                            $path_step =& $path_steps[$path_step_ids[$i]];
                            if ( ! $path_step['col_activate']
                                 || $path_step['col_skip']
                            ) {
                                // アクティブではないか省略の経路ステップは外す
                                continue;
                            }

                            $users = $path_step['users'];
                            for ($j = 0; $j < count($users); $j++) {
                                if ($user_id == $users[$j]['col_user']) {
                                    $user_path_step_id = $path_step_ids[$i];
                                    break 2;
                                }
                            }
                        }
                        if ( ! is_null($user_path_step_id)) {
                            // ユーザーが経路にいる
                            foreach (
                                $path_steps[$user_path_step_id]['items'] as
                                $access
                            ) {
                                if ( ! is_null($access['aid'])
                                     && $access['view'] != 1
                                ) {
                                    $remove_item_ids[] = $access['iid'];
                                }
                            }
                        } else {
                            // ユーザーが経路にいない

                            if ($petition['user'] == $user_id
                                || $petition['agent_user'] == $user_id
                            ) {
                                //申請者
                                foreach ($item_data_list as $id => $item_data) {
                                    if ($item_data['col_petition'] != $pid) {
                                        continue;
                                    }
                                    if (($item_data['col_foreign_key']
                                         == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                                         || $item_data['col_foreign_key']
                                            == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                                        )
                                        && $item_data['col_type'] != 1
                                    ) {
                                        if ($item_data['col_attach_file_view']
                                            != 1
                                        ) {
                                            $remove_item_ids[] = $id;
                                        }
                                    }
                                }
                            } else {
                                // その申請のすべての項目を検索対象に含めない
                                $path_step = array_shift($path_steps);
                                foreach ($path_step['items'] as $item) {
                                    $remove_item_ids[] = $item['iid'];
                                }
                            }
                        }
                    }
                }
            }
        } elseif ($folder_id == GRN_WORKFLOW_FOLDER_APPROVAL_PLAN_ID) {
            // 承認予定一覧
            $petition_ids = [];
            foreach ($pids as $p) {
                $petition_ids[] = $p['col_petition'];
            }
            // 最終承認ステップからみる
            $path_steps_list = $this->getPathInfoEx($petition_ids, true);
            foreach (array_keys($petition_ids) as $key) {
                $pid = $petition_ids[$key];
                $path_steps =& $path_steps_list[$pid]['path_steps'];
                $path_step_ids = array_keys($path_steps);
                $path_step_ids = array_reverse($path_step_ids);

                $user_path_step_id = null;
                // 経路にユーザーが含まれているかどうか
                for ($i = 0; $i < count($path_step_ids); $i++) {
                    $path_step =& $path_steps[$path_step_ids[$i]];
                    if ( ! $path_step['col_activate']
                         || $path_step['col_skip']
                    ) {
                        // 非アクティブと省略の経路ステップは外す
                        continue;
                    }
                    if ($path_step['col_type'] == GRN_WORKFLOW_CIRCULAR) {
                        //回覧は飛ばす
                        continue;
                    }

                    $users = $path_step['users'];
                    for ($j = 0; $j < count($users); $j++) {
                        if ($user_id == $users[$j]['col_user']) {
                            $user_path_step_id = $path_step_ids[$i];
                            break 2;
                        }
                    }
                }
                if ( ! is_null($user_path_step_id)) {
                    foreach (
                        $path_steps[$user_path_step_id]['items'] as $access
                    ) {
                        if ( ! is_null($access['aid'])
                             && $access['view'] != 1
                        ) {
                            $remove_item_ids[] = $access['iid'];
                        }
                    }
                } else {
                    // その申請のすべての項目を検索対象に含めない
                    $path_step = array_shift($path_steps);
                    foreach ($path_step['items'] as $item) {
                        $remove_item_ids[] = $item['iid'];
                    }
                }
            }
        } elseif ($folder_id == GRN_WORKFLOW_FOLDER_TYPE_PROXY_APPROVAL_ID) {
            require_once('workflow/config.csp');
            $configs = GRN_Workflow_Configs::getInstance();
            $config = $configs->getSystemConfig();

            //代理承認一覧
            $petition_ids = [];
            foreach ($pids as $p) {
                $petition_ids[] = $p['pid'];
            }
            $path_steps_list = $this->getPathInfoEx($petition_ids, true,
                $lock_mode);

            foreach (array_keys($pids) as $key) {
                $pid = $petition_ids[$key];
                $in_process = null;
                $path_steps =& $path_steps_list[$pid]['path_steps'];

                foreach (array_keys($path_steps) as $path_step_id) {
                    $path_step =& $path_steps[$path_step_id];
                    $path_step_data_id = $path_step['_id'];

                    if ($path_step['col_activate']) {
                        if ( ! $path_step['col_skip']) {
                            if ( ! $in_process) {
                                // 処理中/完了した経路ステップ
                                if ( ! $path_step['col_finished']) {
                                    // 処理中の経路ステップ
                                    $in_process = $path_step_id;
                                    //break;
                                }
                            }
                        }

                    }
                }
                if ($in_process) {
                    $in_path = false;
                    $users = $path_steps[$in_process]['users'];
                    for ($j = 0; $j < count($users); $j++) {
                        if ($user_id == $users[$j]['col_user']) {
                            $in_path = true;
                            break;
                        } else {
                            //代理承認の判定
                            if ($config->isProxyApproval($user_id,
                                $users[$j]['col_user'])
                            ) {
                                $in_path = true;
                                break;
                            }
                        }
                    }
                    if ($in_path == true) {
                        foreach ($path_steps[$in_process]['items'] as $access) {
                            if ( ! is_null($access['aid'])
                                 && $access['view'] != 1
                            ) {
                                $remove_item_ids[] = $access['iid'];
                            }
                        }
                    } else {
                        // その申請のすべての項目を検索対象に含めない
                        $path_step = current($path_steps);
                        foreach ($path_step['items'] as $item) {
                            $remove_item_ids[] = $item['iid'];
                        }
                    }
                } else {
                    // その申請のすべての項目を検索対象に含めない
                    $path_step = current($path_steps);
                    foreach ($path_step['items'] as $item) {
                        $remove_item_ids[] = $item['iid'];
                    }
                }
            }
        }

        return $remove_item_ids;
    }


    /**
     * Get Path With Extra Info
     *
     * @param array $petition_ids
     * @param bool  $unserialize
     * @param int   $lock_mode
     *
     * @return array
     */
    function getPathInfoEx(
        $petition_ids,
        $unserialize = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        require_once('workflow/path_data.csp');
        $logic = GRN_Workflow_PathStepDatas::getInstance();

        $petiton_path_steps = $logic->getListByPetitionIdEx($petition_ids, 0,
            -1, $lock_mode);
        if ( ! is_array($petiton_path_steps)
             || count($petiton_path_steps) === 0
        ) {
            return [];
        }

        foreach (array_keys($petiton_path_steps) as $key) {
            $path_steps =& $petiton_path_steps[$key]['path_steps'];

            $logic = GRN_Workflow_PathStepDataUsers::getInstance();
            $columns = [
                'tab_grn_workflow_pathstepdatauser' => [
                    '_id'                    => 'pid',
                    'col_path_step_data'     => 'col_path_step_data',
                    'col_user'               => 'col_user',
                    'col_display_name'       => 'col_display_name',
                    'col_foreign_key'        => 'col_foreign_key',
                    'col_position'           => 'col_position',
                    'col_result'             => 'col_result',
                    'col_ptime'              => 'col_ptime',
                    'col_comment'            => 'col_comment',
                    'col_agent_user'         => 'col_agent_user',
                    'col_agent_display_name' => 'col_agent_display_name',
                    'col_agent_foreign_key'  => 'col_agent_foreign_key',
                ],
                'tab_cb_user'                       => [
                    '_id'              => '_id',
                    'col_display_name' => 'col_current_display_name',
                    'col_position'     => 'col_current_position',
                    'col_valid'        => 'col_valid'
                ]
            ];
            $tmp = $logic->getListByPathStepDataIds(array_keys($path_steps),
                $columns);

            $users = [];
            $uids = [];
            foreach ($tmp as $user) {
                $path_step_data_id = $user['col_path_step_data'];
                if ( ! array_key_exists($path_step_data_id, $users)) {
                    $users[$path_step_data_id] = [];
                }
                if ( ! array_key_exists($path_step_data_id, $uids)) {
                    $uids[$path_step_data_id] = [];
                }

                $user['_agent_id'] = null;
                $user['col_agent_current_display_name'] = null;
                $user['col_agent_current_position'] = null;
                $user['col_agent_valid'] = null;
                if ( ! is_null($user['col_agent_user'])) {
                    $columns = [
                        '_id',
                        'col_display_name',
                        'col_position',
                        'col_valid'
                    ];
                    $user_info
                        = $this->_uum->getUserInfo($user['col_agent_user'],
                        $columns);
                    if (is_array($user_info)) {
                        $user['_agent_id'] = $user_info['_id'];
                        $user['col_agent_current_display_name']
                            = $user_info['col_display_name'];
                        $user['col_agent_current_position']
                            = $user_info['col_position'];
                        $user['col_agent_valid']
                            = $user_info['col_valid'];
                    }
                }

                $users[$path_step_data_id][] = $user;
                $uids[$path_step_data_id][] = $user['_id'];
            }

            $previous = null;
            foreach (array_keys($path_steps) as $path_step_id) {
                $path_step =& $path_steps[$path_step_id];
                $path_step['col_path_step_data'] = $path_step['_id'];

                $path_step['users'] = [];
                $path_step['uids'] = [];
                if ( ! $path_step['col_skip']) {
                    if (array_key_exists($path_step_id, $users)) {
                        $path_step['users'] = $users[$path_step_id];
                        $path_step['uids'] = $uids[$path_step_id];
                    }
                }
                $path_step['user_count'] = count($path_step['users']);
                $path_step['in_process'] = false;
            }
        }

        return $petiton_path_steps;
    }

    function checkAccess(
        $petition_id,
        $folder_id,
        $folder_type,
        $user_id,
        $agent_id = '',
        $lock = CB_DATABASE_DEFAULT_LOCK
    ) {
        $access = [
            'access_type'         => null,
            'access_path_step_id' => null,
            'access_view'         => true,
        ];
        //申請と経路とフォルダとユーザーでアクセス権判定を行う
        if ((is_null($petition_id) || strlen($petition_id) <= 0)
            || (is_null($folder_id) || strlen($folder_id) <= 0)
            || //(is_null($folder_type) || strlen($folder_type) <= 0) ||
            (is_null($user_id) || strlen($user_id) <= 0)
        ) {
            return $access;
        }

        require_once('workflow/controller_util.csp');
        $petition_util
            = GRN_Workflow_Petition_Controller_Utility::getInstance();

        $translation_map_petition = [
            'pid'        => '_id',
            'status'     => 'status',
            'user'       => 'user',
            'agent_user' => 'agent_user',
            'reapply'    => 'reapply',
            'creator'    => 'creator',
        ];

        //申請を取得
        $petition = $petition_util->getView($petition_id,
            $translation_map_petition);
        unset($petition_util);

        //経路を取得
        $path_info = $this->getPathInfoForView($user_id, $petition_id,
            $petition, $folder_id, true, $lock);
        $path_steps = $path_info['path_steps'];

        //アクセス権の評価
        $access_type = null;
        $access_path_step_id = null;
        $access_view = true;

        if ($folder_type == GRN_WORKFLOW_FOLDER_TYPE_OUT_ID
            || $folder_type == GRN_WORKFLOW_FOLDER_TYPE_FINISH_ID
            || $folder_type == GRN_WORKFLOW_FOLDER_TYPE_TEMP_ID
        ) {
            //送信一覧
            //結果一覧
            //下書き

            if ($user_id == $petition['user']
                || $user_id == $petition['agent_user']
            ) {
                //申請者
                $access_type = 'creator';
            } else {
                //申請者以外
                $access_type = 'all_disable';
            }
        } elseif ($folder_type == GRN_WORKFLOW_FOLDER_TYPE_UNPROCESSED_ID
                  || $folder_id == GRN_WORKFLOW_FOLDER_PROXY_APPROVAL_ID
        ) {
            //未処理一覧
            //代理承認一覧

            //現在の経路ステップを取得
            $in_process = null;
            foreach (array_keys($path_steps) as $path_step_id) {
                $path_step =& $path_steps[$path_step_id];
                if ($path_step['col_activate']) {
                    if ( ! $path_step['col_skip']) {
                        if ( ! $in_process) {
                            // 処理中/完了した経路ステップ
                            if ( ! $path_step['col_finished']) {
                                // 処理中の経路ステップ
                                $in_process = $path_step_id;
                                //break;
                            }
                        }
                    }
                }
                unset($path_step);
            }
            if ( ! is_null($in_process)) {
                //処理中の経路がある
                //ユーザーが経路にいるかどうかの判定
                $users = $path_steps[$in_process]['users'];
                $in_path = false;
                for ($j = 0; $j < count($users); $j++) {
                    if ($user_id == $users[$j]['col_user']) {
                        $in_path = true;
                        break;
                    }
                }
                if ($in_path == true) {
                    //経路にいる
                    $access_type = 'path_step';
                    $access_path_step_id = $in_process;
                } else {
                    //経路にいない
                    if ($petition['user'] == $user_id
                        || $petition['agent_user'] == $user_id
                    ) {
                        //申請者
                        $access_type = 'creator';
                        if ( ! is_null($agent_id) && strlen($agent_id) > 0) {
                            //代理でみているなら
                            $access_type = 'all_disable';
                            $access_view = false;
                        }
                    } else {
                        if ($folder_type
                            == GRN_WORKFLOW_FOLDER_TYPE_UNPROCESSED_ID
                        ) {
                            // 申請者の方向に向かって判定
                            $path_step_ids_tmp = array_keys($path_steps);
                            $path_step_ids = [];
                            foreach ($path_step_ids_tmp as $path_step_id) {
                                $path_step_ids[] = $path_step_id;
                            }
                            $path_step_ids = array_reverse($path_step_ids);

                            $user_path_step_id = null;
                            // 経路にユーザーが含まれているかどうか
                            for ($i = 0; $i < count($path_step_ids); $i++) {
                                $path_step =& $path_steps[$path_step_ids[$i]];
                                if ( ! $path_step['col_activate']
                                     || $path_step['col_skip']
                                ) {
                                    // アクティブではないか省略の経路ステップは外す
                                    continue;
                                }
                                $users = $path_step['users'];
                                for ($j = 0; $j < count($users); $j++) {
                                    if ($user_id == $users[$j]['col_user']) {
                                        $user_path_step_id = $path_step_ids[$i];
                                        break 2;
                                    }
                                }
                            }
                            if ( ! is_null($user_path_step_id)) {
                                // ユーザーが経路にいる
                                $access_type = 'path_step';
                                $access_path_step_id = $user_path_step_id;
                            } else {
                                $access_type = 'all_disable';
                            }
                        } else {
                            $access_type = 'all_disable';
                        }
                    }
                }
            } else {
                //現在の経路がない

                if ($petition['status'] == GRN_WORKFLOW_STATUS_REMAND) {
                    //差し戻し
                    if ($petition['user'] == $user_id
                        || $petition['agent_user'] == $user_id
                    ) {
                        //申請者本人に差し戻し
                        $access_type = 'creator';
                    } else {
                        //経路にいるかどうかの判定
                        $access_path_step_id = null;
                        foreach (array_keys($path_steps) as $path_step_id) {
                            $path_step =& $path_steps[$path_step_id];
                            if ($path_step['col_type']
                                == GRN_WORKFLOW_CIRCULAR
                            ) {
                                //回覧は飛ばす
                                continue;
                            }
                            if ( ! $path_step['col_activate']
                                 || $path_step['col_skip']
                            ) {
                                // アクティブではないか省略の経路ステップは外す
                                continue;
                            }
                            $users = $path_step['users'];
                            for ($j = 0; $j < count($users); $j++) {
                                if ($user_id == $users[$j]['col_user']) {
                                    $access_path_step_id = $path_step_id;
                                    break 2;
                                }
                            }
                            unset($path_step);
                        }
                        if ( ! is_null($access_path_step_id)) {
                            //経路にいる
                            $access_type = 'path_step';
                            //$access_path_step_id = $access_path_step_id;
                        } else {
                            //経路にいない
                            $access_type = 'all_disable';
                        }
                    }
                } elseif ($petition['status']
                          == GRN_WORKFLOW_STATUS_UNPROCESSING_CANCEL
                ) {
                    //取り戻し
                } elseif ($petition['status']
                          == GRN_WORKFLOW_STATUS_REJECTION
                ) {
                    //却下

                    //TODO 却下された経路から下に検索しなくていいか
                    if ( ! is_null($agent_id) && strlen($agent_id) > 0) {
                        if ($petition['agent_user'] == $agent_id) {
                            //申請者本人に却下
                            $access_type = 'creator';
                        } else {
                            //経路にいるかどうかの判定
                            $access_path_step_id = null;
                            foreach (array_keys($path_steps) as $path_step_id) {
                                $path_step =& $path_steps[$path_step_id];
                                if ($path_step['col_type']
                                    == GRN_WORKFLOW_CIRCULAR
                                ) {
                                    //回覧は飛ばす
                                    continue;
                                }
                                if ( ! $path_step['col_activate']
                                     || $path_step['col_skip']
                                ) {
                                    // アクティブではないか省略の経路ステップは外す
                                    continue;
                                }
                                $users = $path_step['users'];
                                for ($j = 0; $j < count($users); $j++) {
                                    if ($user_id == $users[$j]['col_user']) {
                                        $access_path_step_id = $path_step_id;
                                        break 2;
                                    }
                                }
                                unset($path_step);
                            }
                            if ( ! is_null($access_path_step_id)) {
                                //経路にいる
                                $access_type = 'path_step';
                            }
                        }
                    } else {
                        if ($petition['user'] == $user_id
                            || $petition['agent_user'] == $user_id
                        ) {
                            //申請者本人に却下
                            $access_type = 'creator';
                        } else {
                            //経路にいるかどうかの判定
                            $access_path_step_id = null;
                            foreach (array_keys($path_steps) as $path_step_id) {
                                $path_step =& $path_steps[$path_step_id];
                                if ($path_step['col_type']
                                    == GRN_WORKFLOW_CIRCULAR
                                ) {
                                    //回覧は飛ばす
                                    continue;
                                }
                                if ( ! $path_step['col_activate']
                                     || $path_step['col_skip']
                                ) {
                                    // アクティブではないか省略の経路ステップは外す
                                    continue;
                                }
                                $users = $path_step['users'];
                                for ($j = 0; $j < count($users); $j++) {
                                    if ($user_id == $users[$j]['col_user']) {
                                        $access_path_step_id = $path_step_id;
                                        break 2;
                                    }
                                }
                                unset($path_step);
                            }
                            if ( ! is_null($access_path_step_id)) {
                                //経路にいる
                                $access_type = 'path_step';
                            }
                        }
                    }
                } elseif ($petition['status']
                          == GRN_WORKFLOW_STATUS_IN_PROCESS_CANCEL
                ) {
                    //取り消し

                    //経路にいるかどうかの判定
                    $access_path_step_id = null;
                    foreach (array_keys($path_steps) as $path_step_id) {
                        $path_step =& $path_steps[$path_step_id];
                        if ($path_step['col_type'] == GRN_WORKFLOW_CIRCULAR) {
                            //回覧は飛ばす
                            continue;
                        }
                        if ( ! $path_step['col_activate']
                             || $path_step['col_skip']
                        ) {
                            // アクティブではないか省略の経路ステップは外す
                            continue;
                        }
                        $users = $path_step['users'];
                        for ($j = 0; $j < count($users); $j++) {
                            if ($user_id == $users[$j]['col_user']) {
                                $access_path_step_id = $path_step_id;
                                break 2;
                            }
                        }
                        unset($path_step);
                    }
                    if ( ! is_null($access_path_step_id)) {
                        //経路にいる
                        $access_type = 'path_step';
                    } else {
                        // ユーザーが経路にいない
                        if ($petition['user'] == $user_id
                            || $petition['agent_user'] == $user_id
                        ) {
                            //申請者
                            $access_type = 'creator';
                        }
                    }
                } elseif ($petition['status'] == GRN_WORKFLOW_STATUS_FINISHED) {
                    // 申請者の方向に向かって判定
                    $path_step_ids_tmp = array_keys($path_steps);
                    $path_step_ids = [];
                    foreach ($path_step_ids_tmp as $path_step_id) {
                        if ($path_step_id == $in_process) {
                            $path_step_ids[] = $path_step_id;
                            break;
                        }
                        $path_step_ids[] = $path_step_id;
                    }
                    $path_step_ids = array_reverse($path_step_ids);

                    $user_path_step_id = null;
                    // 経路にユーザーが含まれているかどうか
                    for ($i = 0; $i < count($path_step_ids); $i++) {
                        $path_step =& $path_steps[$path_step_ids[$i]];
                        if ( ! $path_step['col_activate']
                             || $path_step['col_skip']
                        ) {
                            // アクティブではないか省略の経路ステップは外す
                            continue;
                        }
                        $users = $path_step['users'];
                        for ($j = 0; $j < count($users); $j++) {
                            if ($user_id == $users[$j]['col_user']) {
                                $user_path_step_id = $path_step_ids[$i];
                                break 2;
                            }
                        }
                    }
                    if ( ! is_null($user_path_step_id)) {
                        // ユーザーが経路にいる
                        $access_type = 'path_step';
                        $access_path_step_id = $user_path_step_id;
                    } else {
                        // ユーザーが経路にいない
                        if ($petition['user'] == $user_id
                            || $petition['agent_user'] == $user_id
                        ) {
                            //申請者
                            $access_type = 'creator';
                        } else {
                            //存在しない
                            $access_type = 'all_disable';
                        }
                    }
                }
            }
        } elseif ($folder_type == GRN_WORKFLOW_FOLDER_TYPE_IN_ID) {
            // 受信フォルダ

            //現在の経路ステップを取得
            $in_process = null;
            foreach (array_keys($path_steps) as $path_step_id) {
                $path_step =& $path_steps[$path_step_id];
                if ($path_step['col_activate']) {
                    if ( ! $path_step['col_skip']) {
                        if ( ! $in_process) {
                            // 処理中/完了した経路ステップ
                            if ( ! $path_step['col_finished']) {
                                // 処理中の経路ステップ
                                $in_process = $path_step_id;
                                break;
                            }
                        }
                    }
                }
                unset($path_step);
            }
            if ( ! is_null($in_process)) {
                //現在の経路ステップがある

                // 申請者の方向に向かって判定
                $path_step_ids_tmp = array_keys($path_steps);
                $path_step_ids = [];
                foreach ($path_step_ids_tmp as $path_step_id) {
                    if ($path_step_id == $in_process) {
                        $path_step_ids[] = $path_step_id;
                        break;
                    }
                    $path_step_ids[] = $path_step_id;
                }
                $path_step_ids = array_reverse($path_step_ids);

                $user_path_step_id = null;
                // 経路にユーザーが含まれているかどうか
                for ($i = 0; $i < count($path_step_ids); $i++) {
                    $path_step =& $path_steps[$path_step_ids[$i]];
                    if ( ! $path_step['col_activate']
                         || $path_step['col_skip']
                    ) {
                        // アクティブではないか省略の経路ステップは外す
                        continue;
                    }
                    $users = $path_step['users'];
                    for ($j = 0; $j < count($users); $j++) {
                        if ($user_id == $users[$j]['col_user']) {
                            $user_path_step_id = $path_step_ids[$i];
                            break 2;
                        }
                    }
                }
                if ( ! is_null($user_path_step_id)) {
                    // ユーザーが経路にいる
                    $access_type = 'path_step';
                    $access_path_step_id = $user_path_step_id;
                } else {
                    //ユーザーが経路にいない
                    $path_step_ids_tmp = array_keys($path_steps);
                    $path_step_ids = [];
                    $after = false;
                    foreach ($path_step_ids_tmp as $path_step_id) {
                        $path_step =& $path_steps[$path_step_id];
                        if ($path_step['col_type'] == GRN_WORKFLOW_CIRCULAR) {
                            //回覧は飛ばす
                            continue;
                        }
                        if ($path_step_id == $in_process) {
                            $path_step_ids[] = $path_step_id;
                            $after = true;
                        } else {
                            if ($after == true) {
                                $path_step_ids[] = $path_step_id;
                            }
                        }
                    }
                    $user_path_step_id = null;

                    // 経路にユーザーが含まれているかどうか
                    for ($i = 0; $i < count($path_step_ids); $i++) {
                        $path_step =& $path_steps[$path_step_ids[$i]];
                        if ( ! $path_step['col_activate']
                             || $path_step['col_skip']
                        ) {
                            // 非アクティブと省略の経路ステップは外す
                            continue;
                        }

                        $users = $path_step['users'];
                        for ($j = 0; $j < count($users); $j++) {
                            if ($user_id == $users[$j]['col_user']) {
                                $user_path_step_id = $path_step_ids[$i];
                                break 2;
                            }
                        }
                        unset($path_step);
                    }
                    if ( ! is_null($user_path_step_id)) {
                        // ユーザーが経路にいる
                        $access_type = 'path_step';
                        $access_path_step_id = $user_path_step_id;
                    } else {
                        // ユーザーが経路にいない
                        if ($petition['user'] == $user_id
                            || $petition['agent_user'] == $user_id
                        ) {
                            //申請者
                            $access_type = 'creator';
                        } else {
                            //存在しない
                            $access_type = 'all_disable';
                        }
                    }
                }
            } else {
                if ($petition['status'] == GRN_WORKFLOW_STATUS_FINISHED) {
                    //完了申請

                    // 申請者の方向に向かって判定
                    $path_step_ids_tmp = array_keys($path_steps);
                    $path_step_ids = array_reverse($path_step_ids_tmp);
                    $user_path_step_id = null;
                    // 経路にユーザーが含まれているかどうか
                    for ($i = 0; $i < count($path_step_ids); $i++) {
                        $path_step =& $path_steps[$path_step_ids[$i]];
                        if ( ! $path_step['col_activate']
                             || $path_step['col_skip']
                        ) {
                            // アクティブではないか省略の経路ステップは外す
                            continue;
                        }
                        $users = $path_step['users'];
                        for ($j = 0; $j < count($users); $j++) {
                            if ($user_id == $users[$j]['col_user']) {
                                $user_path_step_id = $path_step_ids[$i];
                                break 2;
                            }
                        }
                    }
                    if ( ! is_null($user_path_step_id)) {
                        // ユーザーが経路にいる
                        $access_type = 'path_step';
                        $access_path_step_id = $user_path_step_id;
                    } else {
                        //ユーザーが経路にいない
                        if ($petition['user'] == $user_id
                            || $petition['agent_user'] == $user_id
                        ) {
                            //申請者
                            $access_type = 'creator';
                        } else {
                            //存在しない
                            $access_type = 'all_disable';
                        }
                    }
                } else {
                    if ($petition['status'] == GRN_WORKFLOW_STATUS_REMAND
                        || $petition['status'] == GRN_WORKFLOW_STATUS_REJECTION
                        || $petition['status']
                           == GRN_WORKFLOW_STATUS_IN_PROCESS_CANCEL
                    ) {
                        //差し戻し
                        //却下
                        //取り消し

                        $path_step_ids = array_keys($path_steps);
                        $user_path_step_id = null;
                        // 経路にユーザーが含まれているかどうか
                        for ($i = 0; $i < count($path_step_ids); $i++) {
                            $path_step =& $path_steps[$path_step_ids[$i]];
                            if ($path_step['col_type']
                                == GRN_WORKFLOW_CIRCULAR
                            ) {
                                //回覧は飛ばす
                                continue;
                            }
                            if ( ! $path_step['col_activate']
                                 || $path_step['col_skip']
                            ) {
                                // アクティブではないか省略の経路ステップは外す
                                continue;
                            }
                            $users = $path_step['users'];
                            for ($j = 0; $j < count($users); $j++) {
                                if ($user_id == $users[$j]['col_user']) {
                                    $user_path_step_id = $path_step_ids[$i];
                                    break 2;
                                }
                            }
                        }
                        if ( ! is_null($user_path_step_id)) {
                            /*
                            //ユーザーが経路にいない
                            if ($petition['user'] == $user_id || $petition['agent_user'] == $user_id)
                            {
                                //申請者
                                $access_type = 'creator';
                            }
                            else
                            {
                                //ユーザーが経路にいる
                                $access_type = 'path_step';
                            }
                            */
                            //ユーザーが経路にいる
                            $access_type = 'path_step';
                            $access_path_step_id = $user_path_step_id;
                        } else {
                            //ユーザーが経路にいない
                            if ($petition['user'] == $user_id
                                || $petition['agent_user'] == $user_id
                            ) {
                                //申請者
                                $access_type = 'creator';
                            } else {
                                //存在しない
                                $access_type = 'all_disable';
                            }
                        }
                    }
                }
            }
        } elseif ($folder_id == GRN_WORKFLOW_FOLDER_APPROVAL_PLAN_ID) {
            //承認予定一覧
            $path_step_ids = array_keys($path_steps);
            $path_step_ids = array_reverse($path_step_ids);
            $user_path_step_id = null;
            // 経路にユーザーが含まれているかどうか
            for ($i = 0; $i < count($path_step_ids); $i++) {
                $path_step =& $path_steps[$path_step_ids[$i]];
                if ( ! $path_step['col_activate'] || $path_step['col_skip']) {
                    // 非アクティブと省略の経路ステップは外す
                    continue;
                }
                if ($path_step['col_type'] == GRN_WORKFLOW_CIRCULAR) {
                    //回覧は飛ばす
                    continue;
                }

                $users = $path_step['users'];
                for ($j = 0; $j < count($users); $j++) {
                    if ($user_id == $users[$j]['col_user']) {
                        $user_path_step_id = $path_step_ids[$i];
                        break 2;
                    }
                }
            }
            if ( ! is_null($user_path_step_id)) {
                //ユーザーが経路にいる
                $access_type = 'path_step';
                $access_path_step_id = $user_path_step_id;
            } else {
                //存在しない
                $access_type = 'all_disable';
            }
        } elseif ($folder_id == GRN_WORKFLOW_FOLDER_TYPE_PUBLIC_ID) {
            //公開
            $access_type = 'all_view';
        }

        $access = [
            'access_type'         => $access_type,
            'access_path_step_id' => $access_path_step_id,
            'access_view'         => $access_view,
        ];

        return $access;

    }

    /**
     * @param      $form_id
     * @param      $session_target
     * @param null $mandator
     *
     * @return bool
     */
    function checkScheduleRegister($form_id, $session_target, $mandator = null)
    {
        require_once('fw/session_manager.csp');
        $session_manager = CB_SessionManager::getInstance();
        $session = $session_manager->getSession($session_target);

        if ( ! AppAccess::isAppAvailableInternalAccess(GRN_SCHEDULE_APPLICATION_ID,
            $mandator)
        ) {
            return false;
        }

        $translation_map_form = [
            //Form Information
            'fid'  => '_id',              //Form ID
            'path' => 'path',             //Form Path
        ];
        $path_step_columns = [
            '_id',
            GRN_WORKFLOW_COLUMN_TYPE,
        ];
        $form_util
            = GRN_Workflow_Form_Controller_Utility::getInstance();
        $form_for_view = $form_util->getView($form_id,
            $translation_map_form);
        require_once('workflow/path.csp');
        $path_step_logic = GRN_Workflow_PathSteps::getInstance();
        $path_steps
            = $path_step_logic->getList($form_for_view['path'],
            null, null, $path_step_columns);
        $acceptance_path_steps = [];
        foreach ($path_steps as $path_step) {
            if ($path_step[GRN_WORKFLOW_COLUMN_TYPE] != GRN_WORKFLOW_CIRCULAR) {
                $acceptance_path_steps[$path_step['_id']] = $path_step;
            }
        }
        if (count($acceptance_path_steps) == 0) {
            return false;
        }

        require_once('workflow/auto_schedule_setting_logic.csp');
        $auto_schedule_logic
            = GRN_Workflow_Auto_Schedule_Setting_Logic::getInstance();

        $autoScheduleObj = $auto_schedule_logic->getByFormId($form_id);

        if ( ! $autoScheduleObj || ! $autoScheduleObj->getActive()) {
            return false;
        } else {
            $start_item = $autoScheduleObj->getScheduleStartItem();
            $end_item = $autoScheduleObj->getScheduleEndItem();
            $date_items = [
                $start_item,
                $end_item
            ];

            $item_list = $session->get('item_list');
            $item_check_info = [];

            foreach ($item_list as $k => $v) {
                if (isset($v['item'])) {
                    $item_check_info[$v['item']] = $v;
                } else {
                    $item_check_info[$v['iid']] = $v;
                }
            }

            if ( ! isset($item_check_info[$start_item])
                 || ! isset($item_check_info[$end_item])
                 || $item_check_info[$start_item]['foreign_key']
                    != "grn.workflow.date"
                 || $item_check_info[$end_item]['foreign_key']
                    != "grn.workflow.date"
            ) {
                return false;
            }

            foreach ($item_check_info as $k => $v) {
                if (in_array($k, $date_items)
                    && ( ! $v['attach_file_view']
                         || ! $v['attach_file'])
                ) {
                    return false;
                }
            }

            $start_item_input
                = cb_unserialize($item_check_info[$start_item]['text'],
                ["allowed_classes" => false]);
            $end_item_input
                = cb_unserialize($item_check_info[$end_item]['text'],
                ["allowed_classes" => false]);

            $date = [];

            $date_string = ['year', 'month', 'day', 'hour', 'minute', 'second'];
            foreach ($date_string as $v) {
                if ( ! isset($start_item_input[$v])
                     || $start_item_input[$v] == ''
                ) {
                    $date['start'][$v] = null;
                } else {
                    $date['start'][$v] = $start_item_input[$v];
                }

                if ( ! isset($end_item_input[$v])
                     || $end_item_input[$v] == ''
                ) {
                    $date['end'][$v] = null;
                } else {
                    $date['end'][$v] = $end_item_input[$v];
                }
            }

            if (is_null($date['start']['hour'])) {
                $date['start']['minute'] = null;
            }

            if (is_null($date['end']['hour'])) {
                $date['end']['minute'] = null;
            }

            if ($this->_checkDate($date, $autoScheduleObj->getScheduleType())) {
                return false;
            }
        }

        return true;
    }

    /**
     * @param $date
     * @param $type
     *
     * @return bool
     */
    private function _checkDate($date, $type)
    {
        $date1 = new CB_DateTime();
        $date1->year = intval($date['start']['year']);
        $date1->month = intval($date['start']['month']);
        $date1->day = intval($date['start']['day']);

        $date2 = new CB_DateTime();
        $date2->year = intval($date['end']['year']);
        $date2->month = intval($date['end']['month']);
        $date2->day = intval($date['end']['day']);

        if (( ! checkdate($date1->month, $date1->day, $date1->year)
              || ! checkdate(
                    $date2->month, $date2->day, $date2->year
                ))
            || ($date1->year < 1970 || $date1->year > 2037
                || $date2->year < 1970
                || $date2->year > 2037)
        ) {
            return false;
        }

        if ($type == GRN_WORKFLOW_EVENT_REGULAR) {
            $time1 = mktime(0, 0, 0, $date1->month, $date1->day, $date1->year);
            $time2 = mktime(0, 0, 0, $date2->month, $date2->day, $date2->year);

            if (is_null($date['start']['hour'])
                && ! is_null($date['end']['hour'])
            ) {
                return false;
            }

            if (is_null($date['end']['hour'])) {
                if ($time1 == $time2) {
                    return true;
                } elseif ( ! is_null($date['start']['hour'])) {
                    return false;
                }
            }
        }

        if ( ! is_null($date['start']['hour'])) {
            $date1->hour = intval($date['start']['hour']);
        }
        if ( ! is_null($date['start']['minute'])) {
            $date1->minute = intval($date['start']['minute']);
        }
        if ( ! is_null($date['start']['second'])) {
            $date1->second = intval($date['start']['second']);
        }
        if ( ! is_null($date['end']['hour'])) {
            $date2->hour = intval($date['end']['hour']);
        }
        if ( ! is_null($date['end']['minute'])) {
            $date2->minute = intval($date['end']['minute']);
        }
        if ( ! is_null($date['end']['second'])) {
            $date2->second = intval($date['end']['second']);
        }

        require_once('schedule/utility.csp');
        if ( ! grn_schedule_datetime_isvalid($date1)
             || ! grn_schedule_datetime_isvalid($date2)
        ) {
            return false;
        }

        $dateex1 = new CB_DateTimeEx($date1);
        if ($dateex1->compare($date2) > 0) {
            return false;
        }

        return true;
    }

    /**
     * @param $petition_id
     *
     * @return bool
     */
    function registerSchedule($petition_id)
    {
        require_once('workflow/petition_logic.csp');
        $petition_logic = GRN_Workflow_Petition_Logic::getInstance();
        $petition = $petition_logic->get($petition_id);

        require_once('workflow/auto_schedule_register_logic.csp');
        $auto_schedule_register_logic
            = GRN_Workflow_Auto_Schedule_Register_Logic::getInstance();
        $auto_register_obj
            = $auto_schedule_register_logic->getByPetitionId($petition_id);

        if ( ! $auto_register_obj) {
            return false;
        } elseif (defined('AJAX_REQUEST')) {
            if ($petition['col_status'] != GRN_WORKFLOW_RESULT_ACCEPT
                && $petition['col_status'] != GRN_WORKFLOW_STATUS_FINISHED
            ) {
                return false;
            }
        }

        $start_item = $auto_register_obj->getScheduleStartItemData();
        $end_item = $auto_register_obj->getScheduleEndItemData();
        $timezone = $auto_register_obj->getScheduleTimeZone();
        $event_type = $auto_register_obj->getScheduleType();
        $menu = cb_unserialize($auto_register_obj->getAppointmentType(),
            ["allowed_classes" => false]);
        $applicant = $petition['col_user'];

        global $G_container_base;
        $uum =& $G_container_base->getInstance('uum');
        if ( ! $applicant_obj = $uum->getUser($applicant)) {
            return false;
        }

        $settings = [];
        $translation_map_item_data = [
            //Item Data Information
            'foreign_key' => 'itemdata_foreign_key',
            //Item Data foreign_key
            'settings'    => 'itemdata_settings',
            //Item Data Settings
            'text'        => 'itemdata_text',
            //Item Data text Value
            'item'        => 'itemdata_id'
        ];

        require_once('workflow/controller_util.csp');
        require_once('workflow/item_resources.csp');
        $item_data_util
            = GRN_Workflow_ItemData_Controller_Utility::getInstance();
        $item_data_list
            = $item_data_util->getListViewEx($translation_map_item_data,
            $petition_id);

        $untitled = cb_msg('grn.workflow', 'untitled');
        if ($petition['col_name'] == $untitled) {
            $subject = '';
        } else {
            $subject = $petition['col_name'];
        }

        foreach ($item_data_list as $key => $v) {
            if ($v['item'] == $start_item
                && $v['foreign_key'] == 'grn.workflow.date'
            ) {
                $settings['start'] = cb_unserialize($v['text'],
                    ["allowed_classes" => false]);
                $settings['start']['date_type'] = cb_at($v['settings'],
                    'date_type', 0);
            }

            if ($v['item'] == $end_item
                && $v['foreign_key'] == 'grn.workflow.date'
            ) {
                $settings['end'] = cb_unserialize($v['text'],
                    ["allowed_classes" => false]);
                $settings['end']['date_type'] = cb_at($v['settings'],
                    'date_type', 0);
            }
        }

        require_once('workflow/inspection.csp');
        $inspection
            = GRN_Workflow_Auto_Schedule_Register_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            if ($event_type == GRN_WORKFLOW_EVENT_REGULAR) {
                $event_type_name = GRN_WORKFLOW_INSPECTION_REGULAR;
            } else {
                $event_type_name = GRN_WORKFLOW_INSPECTION_ALL_DAY;
            }

            $path_steps = $this->getPathInfo($petition_id);
            foreach ($path_steps as $k => $v) {
                if (isset($v['last_acceptance'])
                    && $v['last_acceptance'] == true
                ) {
                    $path_step_id = $k;
                }
            }
            $path_step_users = $path_steps[$path_step_id]['users'];
            $approval = [];
            foreach ($path_step_users as $k => $v) {
                if ( ! is_null($v['col_ptime'])) {
                    $approval[$v['col_ptime']->unix_ts]
                        = $v['col_display_name'];
                }
            }
            krsort($approval);

            $message_args = [
                'pid'                 => $petition_id,
                'fid'                 => $petition['col_form'],
                'subject'             => $subject,
                'applicant_user_name' => $applicant_obj->get('display_name'),
                'approval_user_name'  => current($approval),
                'event_type'          => $event_type_name,
                'menu_title'          => $menu,
                'start_year'          => cb_at($settings['start'], 'year', ''),
                'start_month'         => cb_at($settings['start'], 'month', ''),
                'start_day'           => cb_at($settings['start'], 'day', ''),
                'end_year'            => cb_at($settings['end'], 'year', ''),
                'end_month'           => cb_at($settings['end'], 'month', ''),
                'end_day'             => cb_at($settings['end'], 'day', ''),
                'timezone'            => $timezone
            ];
            if (isset($settings['start']['date_type'])
                && $settings['start']['date_type'] == 1
            ) {
                $message_args['start_hour'] = cb_at($settings['start'],
                    'hour', '');
                $message_args['start_minute'] = cb_at($settings['start'],
                    'minute', '');
            }
            if (isset($settings['end']['date_type'])
                && $settings['end']['date_type'] == 1
            ) {
                $message_args['end_hour'] = cb_at($settings['end'], 'hour',
                    '');
                $message_args['end_minute'] = cb_at($settings['end'], 'minute',
                    '');
            }
            $inspection->record('schedule_info', $message_args);
        }

        if ( ! isset($settings['start']) || ! isset($settings['end'])) {
            return false;
        }

        $date_string = ['year', 'month', 'day', 'hour', 'minute', 'second'];

        foreach ($date_string as $v) {
            if ( ! isset($settings['start'][$v])
                 || $settings['start'][$v] == ''
            ) {
                $settings['start'][$v] = null;
            }

            if ( ! isset($settings['end'][$v]) || $settings['end'][$v] == '') {
                $settings['end'][$v] = null;
            }
        }

        if (is_null($settings['start']['hour'])) {
            $settings['start']['minute'] = null;
        }

        if (is_null($settings['end']['hour'])) {
            $settings['end']['minute'] = null;
        }

        if ( ! $this->_checkDate($settings, $event_type)) {
            return false;
        }

        $translation_map_folder = [
            'fid'  => '_id',            //Folder ID
            'name' => 'name',           //Folder Name
            'type' => 'folder_type',    //Folder Type
        ];
        $folder_util
            = GRN_Workflow_Folder_Controller_Utility::getInstance();
        $folder_list
            = $folder_util->getListView($translation_map_folder,
            $applicant);
        $fid = '';
        foreach ($folder_list as $v) {
            if ($v['type'] == GRN_WORKFLOW_FOLDER_TYPE_OUT_ID) {
                $fid = $v['fid'];
            }
        }
        $note = cb_get_full_url('workflow/view',
            ['fid' => $fid, 'pid' => $petition_id]);
        if (cb_is_secure_access()) {
            $domain = trim(cb_get_domain());
            $url = parse_url($note);
            $pos = strrpos($domain, ".");
            if ($pos === false) {
                $repl = $url['scheme'] . '://$2.cybozu$3.com';
            } else {
                $repl = $url['scheme'] . '://$2.' . substr($domain, 0, $pos)
                        . '$3.' . substr($domain, $pos + 1);
            }
            $note = preg_replace($this->grnGetWfLinkPattern($url['host']),
                $repl, $note);
        }
        $event_data = [
            'start_year'   => $settings['start']['year'],
            'start_month'  => $settings['start']['month'],
            'start_day'    => $settings['start']['day'],
            'start_hour'   => $settings['start']['hour'],
            'start_minute' => $settings['start']['minute'],
            'start_second' => $settings['start']['second'],
            'end_year'     => $settings['end']['year'],
            'end_month'    => $settings['end']['month'],
            'end_day'      => $settings['end']['day'],
            'end_hour'     => $settings['end']['hour'],
            'end_minute'   => $settings['end']['minute'],
            'end_second'   => $settings['end']['second'],
            'title'        => $subject,
            'private'      => 0,
            'memo'         => $note,
            'timezone'     => $timezone,
            'menu'         => $menu,
        ];

        if ($event_type == GRN_WORKFLOW_EVENT_ALL_DAY) {
            $event_data['BN'] = 1;
        }
        require_once('schedule/view_util.csp');
        $util = GRN_Schedule_View_Util::getInstance();

        $event = $util->createEvent($event_data);

        $event->users = [1 => $applicant_obj];

        $event->creator = $uum->getUser($applicant);

        if (AppAccess::isAppAvailableInternalAccess(GRN_SCHEDULE_APPLICATION_ID,
            $applicant)
        ) {
            require_once('schedule/application.csp');
            $logic = GRN_Schedule_Application::getInstance();
            $logic->checkEventData($event);
            if (is_a($event, 'GRN_Schedule_NormalEvent')) {
                if (is_a($event->setdatetime, 'CB_DateTime')
                    && is_a($event->enddatetime, 'CB_Date')
                ) {
                    $event->enddatetime = null;
                }
            }
            $update_data = [
                'col_petition_id' => $petition_id,
                'col_schedule_id' => $logic->entryEvent($event)
            ];
            $auto_schedule_register_logic->update($update_data);
        }

        return true;
    }

    /**
     * @param $host
     *
     * @return string
     */
    function grnGetWfLinkPattern($host)
    {
        $tokens = explode(".", $host);
        $domain = trim(cb_get_domain());
        $pos = strrpos($domain, ".");
        if ($pos === false) {
            $pattern = '/^(http|https):\\/\\/(' . $tokens[0]
                       . ')(?:\\.s)?\\.cybozu(-dev)?\\.com/i';
        } else {
            $pattern = '/^(http|https):\\/\\/(' . $tokens[0] . ')(?:\\.s)?\\.'
                       . substr($domain, 0, $pos) . '\\.' . substr($domain,
                    $pos + 1) . '/i';
        }

        return $pattern;
    }

    /**
     * update serial number after finally approved
     *
     * @param array $petition
     * @param array $message_args
     *
     */
    public function updateSerialNumberAfterFinallyApproved(
        array $petition,
        array &$message_args
    ) {
        require_once('workflow/form_logic.csp');
        require_once('workflow/resources.csp');
        $form_logic = GRN_Workflow_Form_Logic::getInstance();
        $form_info = $form_logic->get($petition['col_form']);

        if ($form_info[GRN_WORKFLOW_COLUMN_APPROVED_SERIAL_TYPE]
            == GRN_WORKFLOW_APPROVED_NUMBER_ENABLE
        ) {
            $message_args['approved_serial_type']
                = GRN_WORKFLOW_FORM_APPROVED_SERIAL_TYPE_EVERY;
            $message_args['approved_serial_format']
                = $form_info[GRN_WORKFLOW_COLUMN_APPROVED_SERIAL_FORMAT];
        } else {
            $message_args['approved_serial_type']
                = GRN_WORKFLOW_FORM_APPROVED_SERIAL_TYPE_NOT_USE;
            $message_args['approved_serial_format'] = null;
        }

        $approved_serial_number
            = $form_info[GRN_WORKFLOW_COLUMN_APPROVED_SERIAL_NUMBER];
        require_once('workflow/petition_logic.csp');
        $logic = \GRN_Workflow_Petition_Logic::getInstance();
        $approved_number
            = $logic->updatePetitionNumberWhenApproved($petition['_id'],
            $petition['col_form']);

        if ($approved_number != false) {
            $approved_serial_number += 1;
        }

        if ($approved_serial_number > GRN_WORKFLOW_INT_MAX) {
            $approved_serial_number = 1;
        }
        $message_args['approved_serial_number'] = $approved_serial_number;
    }

}


/**
 *  Category Controller Utility Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_Category_Controller_Utility
{
    /** Category Logic Instance **/
    var $_category_logic_base = null;
    var $_category_access_logic_base = null;
    var $_category_public_logic_base = null;
    var $_category_manage_logic_base = null;

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {

    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_Category_Controller_Utility $instance                  //Instance of GRN_Workflow_Category_Controller_Utility
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_Category_Controller_Utility();
        }

        return $_instance;
    }

    /**
     * Get Category Logic Base
     *
     * @param  none
     *
     * @return GRN_Workflow_Category_Logic_Base $category_logic_base            //Category Logic Base
     */
    function getCategoryLogicBase()
    {
        //Get Category Logic
        require_once('workflow/category_logic_base.csp');
        if (is_null($this->_category_logic_base)) {
            $this->_category_logic_base
                = GRN_Workflow_Category_Logic_Base::getInstance();
        }

        //Return Category Logic Base
        return $this->_category_logic_base;
    }

    /**
     * Get Category Access Logic Base
     *
     * @param  none
     *
     * @return object $category_access_logic_base     //Category Access Logic
     */
    function getCategoryAccessLogicBase()
    {
        //Get Category Access Logic
        require_once('workflow/access_logic_base.csp');
        $this->_category_access_logic_base
            = GRN_Workflow_Category_Access_Logic_Base::getInstance();

        //Return Category Access Logic
        return $this->_category_access_logic_base;
    }

    /**
     * Get Category Public Logic Base
     *
     * @param  none
     *
     * @return GRN_Workflow_Category_Public_Logic_Base $category_public_logic_base     //Category Public Logic
     */
    function getCategoryPublicLogicBase()
    {
        //Get Category Public Logic
        require_once('workflow/public_logic_base.csp');
        $this->_category_public_logic_base
            = GRN_Workflow_Category_Public_Logic_Base::getInstance();

        //Return Category Public Logic
        return $this->_category_public_logic_base;
    }

    /**
     * Get Category Manage Logic Base
     *
     * @param  none
     *
     * @return object $category_manage_logic_base     //Category Manage Logic
     */
    function getCategoryManageLogicBase()
    {
        //Get Category Manage Logic
        require_once('workflow/manage_logic_base.csp');
        $this->_category_manage_logic_base
            = GRN_Workflow_Category_Manage_Logic_Base::getInstance();

        //Return Category Manage Logic
        return $this->_category_manage_logic_base;
    }

    /**
     * Convert Sysname
     *
     * @param  int    $category_id   //Category ID
     * @param  string $category_name //Category Name
     *
     * @return string $converted_category_name  //Converted Category Name
     */
    function _convert2SysName($category_id, $category_name)
    {
        $converted_category_name = $category_name;

        require_once('workflow/resources.csp');
        switch ($category_id) {
            case GRN_WORKFLOW_CATEGORY_ROOT_ID:
                $converted_category_name = cb_msg('grn.workflow', '(root)');
                break;
            case GRN_WORKFLOW_CATEGORY_NONPARTY_ID:
                $converted_category_name = cb_msg('grn.workflow', 'nonparty');
                break;
        }

        return $converted_category_name;
    }

    /**
     * Model => View
     *
     * @param  object $category        //Category Object
     * @param  array  $translation_map //Model <=> View Translation Map
     *
     * @return array  $category_view            //Category for View
     */
    function _model2View(&$category, $translation_map)
    {
        $category_for_view = [];

        //Create Parameter Translation for Category
        foreach ($translation_map as $view => $model) {
            if ($model !== '_id') {
                $model = 'col_' . $model;
            }

            switch ($model) {
                case '_id':
                    $category_for_view[$view] = $category['_id'];
                    break;
                case 'col_name':
                    $category_for_view[$view]
                        = $this->_convert2SysName($category['_id'],
                        $category[$model]);
                    break;
                case 'col_creator':
                case 'col_modifier':
                    //Get User ID
                    $uid = $category[$model];
                    if ($uid) {
                        $category_for_view[$view] = $uid;
                    }
                    break;
                case 'col_creator_name':
                case 'col_modifier_name':
                    //Get User ID
                    $model = str_replace('_name', '', $model);
                    $uid = $category[$model];

                    //Get User Object
                    global $G_container_base;
                    $grn_uum = $G_container_base->getInstance('uum');
                    $object = $grn_uum->getUser($uid);
                    if ($object) {
                        $category_for_view[$view]
                            = $object->get(GRN_WORKFLOW_COLUMN_DISPLAY_NAME);
                    }
                    break;
                case 'col_ctime':
                case 'col_mtime':
                    $time = $category[$model];
                    $category_for_view[$view] = new CB_TimeStamp();
                    $category_for_view[$view]->unix_ts = $time;
                    break;
                default:
                    $category_for_view[$view] = @ $category[$model];
                    break;
            }
        }

        //Return Category View
        return $category_for_view;
    }

    /**
     * Get Category View
     *
     * @param  int   $category_id     //Category ID
     * @param  array $translation_map //Model <=> View Translation Map
     * @param  bool  $user_type       //Access User Type(sytem/manage/personal)
     * @param  bool  $refresh         //Refresh Flag
     * @param  int   $lock_mode       //Lock Mode
     *
     * @return array  $category_view            //Category for View
     */
    function getView(
        $category_id,
        $translation_map,
        $user_type,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $user_type2 = null,
        $user_id = false
    ) {
        $access_check = true;
        $category_for_view = [];
        $category = null;
        if ($category_id == GRN_WORKFLOW_CATEGORY_NONPARTY_ID) {
            //Create Dummy Category
            $category = [];
            foreach ($translation_map as $value) {
                if ($value == '_id') {
                    $category[$value] = GRN_WORKFLOW_CATEGORY_NONPARTY_ID;
                } else {
                    $category['col_' . $value] = '';
                }
            }
            $access_check = false;
        } else {
            //Get Category
            $category_logic_base = $this->getCategoryLogicBase();
            $category =& $category_logic_base->get($category_id,
                null, $refresh, $lock_mode);
        }

        if ($access_check) {
            if ($user_type != GRN_WORKFLOW_ACCESS_TYPE_SYSTEM) {
                //Check Access Right
                $this->checkCategoryAccess($category, true, $lock_mode, false,
                    $user_id);
            }
            if ($user_type2 == GRN_WORKFLOW_ACCESS_TYPE_MANAGE) {
                //Check Manage Right
                $this->checkCategoryManage($category, true, $lock_mode,
                    $user_id);
            }
        }
        $category_for_view = $this->_model2View($category, $translation_map);

        //Return Category View
        return $category_for_view;
    }

    /**
     * Get Category List View
     *
     * @param  int   $category_id     //Category ID
     * @param  array $translation_map //Model <=> View Translation Map
     * @param  bool  $user_type       //Access User Type(sytem/manage/personal)
     * @param  bool  $refresh         //Refresh Flag
     * @param  int   $lock_mode       //Lock Mode
     *
     * @return array  $category_view            //Category for View
     */
    function getListView(
        $category_id,
        $translation_map,
        $user_type,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $user_type2 = null
    ) {
        $category_list_for_view = [];

        //Get Category List
        $category_logic_base = $this->getCategoryLogicBase();
        $category_list =& $category_logic_base->getList($category_id,
            $refresh, $lock_mode);

        //Create Parameter Translation for Category List
        foreach ($category_list as $id => $category) {
            if ($user_type != GRN_WORKFLOW_ACCESS_TYPE_SYSTEM) {
                //Check Access Right
                if ( ! $this->checkCategoryAccess($category, false,
                    $lock_mode)
                ) {
                    continue;
                }
            }
            if ($user_type2 == GRN_WORKFLOW_ACCESS_TYPE_MANAGE) {
                //Check Manage Right
                if ( ! $this->checkCategoryManage($category, false,
                    $lock_mode)
                ) {
                    continue;
                }
            }
            $category_list_for_view[$id] = $this->_model2View($category,
                $translation_map);
        }

        //Return Category List View
        return $category_list_for_view;
    }

    /**
     * Get Tree List View
     *
     * @param  int   $category_id     //Category ID
     * @param  array $translation_map //Model <=> View Translation Map
     * @param  bool  $user_type       //Access User Type(sytem/manage/personal)
     * @param  bool  $include_root    //Include Root Category Flag
     * @param  bool  $include_last    //Include Last Category List Flag
     * @param  int   $lock_mode       //Lock Mode
     *
     * @return array  $category_view            //Category for View
     */
    function getTreeListView(
        $category_id,
        $translation_map,
        $user_type,
        $include_root = true,
        $include_last = true,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $user_type2 = null
    ) {
        $category_list_for_view = [];

        if ($category_id == GRN_WORKFLOW_CATEGORY_NONPARTY_ID) {
            if ($include_root) {
                //Get Root Category
                $category_logic_base = $this->getCategoryLogicBase();
                $root_category
                    = $category_logic_base->get(GRN_WORKFLOW_CATEGORY_ROOT_ID);
                $category_list_for_view[GRN_WORKFLOW_CATEGORY_ROOT_ID]
                    = $this->_model2View($root_category,
                    $translation_map);
            }

            if ($include_last) {
                //Create Dummy Category
                $category = [];
                foreach ($translation_map as $value) {
                    if ($value == '_id') {
                        $category[$value] = GRN_WORKFLOW_CATEGORY_NONPARTY_ID;
                    } else {
                        $category['col_' . $value] = '';
                    }
                }
                $category_list_for_view[GRN_WORKFLOW_CATEGORY_NONPARTY_ID]
                    = $this->_model2View($category, $translation_map);
            }
        } else {
            //Get Category List
            $category_logic_base = $this->getCategoryLogicBase();
            $category_list
                = $category_logic_base->getTreeList($category_id,
                $include_root, $include_last, $lock_mode);

            //Create Parameter Translation for Category List
            foreach ($category_list as $id => $category) {
                if ($user_type != GRN_WORKFLOW_ACCESS_TYPE_SYSTEM) {
                    //Check Access Right
                    if ( ! $this->checkCategoryAccess($category, false,
                        $lock_mode)
                    ) {
                        continue;
                    }
                }
                if ($user_type2 == GRN_WORKFLOW_ACCESS_TYPE_MANAGE) {
                    //Check Manage Right
                    if ( ! $this->checkCategoryManage($category, false,
                        $lock_mode)
                    ) {
                        continue;
                    }
                }
                $category_list_for_view[$id] = $this->_model2View($category,
                    $translation_map);
            }
        }

        //Return Category List View
        return $category_list_for_view;
    }

    /**
     * Get Child List View
     *
     * @param  int    $category_id     //Category ID
     * @param  array  $translation_map //Model <=> View Translation Map
     * @param  string $user_type       //Access User Type(sytem/manage/personal)
     * @param  int    $lock_mode       //Lock Mode
     *
     * @return array  $category_view            //Category for View
     */
    function getChildListView(
        $category_id,
        $translation_map,
        $user_type,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $user_type2 = null,
        $user_id = false
    ) {
        $category_list_for_view = [];

        //Get Category List
        $category_logic_base = $this->getCategoryLogicBase();
        $category_list = $category_logic_base->getChildList($category_id,
            $lock_mode);

        //Create Parameter Translation for Category List
        foreach ($category_list as $id => $category) {
            if ($user_type != GRN_WORKFLOW_ACCESS_TYPE_SYSTEM) {
                //Check Access Right
                if ( ! $this->checkCategoryAccess($category, false, $lock_mode,
                    false, $user_id)
                ) {
                    continue;
                }
            }
            if ($user_type2 == GRN_WORKFLOW_ACCESS_TYPE_MANAGE) {
                //Check Manage Right
                if ( ! $this->checkCategoryManage($category, false, $lock_mode,
                    $user_id)
                ) {
                    continue;
                }
            }
            $category_list_for_view[$id] = $this->_model2View($category,
                $translation_map);
        }

        //Return Category List View
        return $category_list_for_view;
    }

    /**
     * Get ALL Child List View
     *
     * @param  int   $category_id     //Category ID
     * @param  array $translation_map //Model <=> View Translation Map
     * @param  bool  $user_type       //Access User Type(sytem/manage/personal)
     * @param  int   $lock_mode       //Lock Mode
     *
     * @return array  $category_view            //Workflow for View
     */
    function getAllChildListView(
        $category_id,
        $translation_map,
        $user_type,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $user_type2 = null
    ) {
        $category_list_for_view = [];

        //Get Category List
        $category_logic_base = $this->getCategoryLogicBase();
        $category_list
            = $category_logic_base->getAllChildList($category_id,
            $lock_mode);

        //Create Parameter Translation for Category List
        foreach ($category_list as $id => $category) {
            if ($user_type != GRN_WORKFLOW_ACCESS_TYPE_SYSTEM) {
                //Check Access Right
                if ( ! $this->checkCategoryAccess($category, false,
                    $lock_mode)
                ) {
                    continue;
                }
            }
            if ($user_type2 == GRN_WORKFLOW_ACCESS_TYPE_MANAGE) {
                //Check Manage Right
                if ( ! $this->checkCategoryManage($category, false,
                    $lock_mode)
                ) {
                    continue;
                }
            }
            $category_list_for_view[$id] = $this->_model2View($category,
                $translation_map);
        }

        //Return Category List View
        return $category_list_for_view;
    }

    /**
     * Get Public Category View
     *
     * @param  int   $category_id     //Category ID
     * @param  array $translation_map //Model <=> View Translation Map
     * @param  bool  $user_type       //Public User Type(sytem/manage/personal)
     * @param  bool  $refresh         //Refresh Flag
     * @param  int   $lock_mode       //Lock Mode
     *
     * @return array  $category_view            //Category for View
     */
    function getViewPublic(
        $category_id,
        $translation_map,
        $user_type,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $user_type2 = null
    ) {
        $public_check = true;
        $category_for_view = [];
        $category = null;
        if ($category_id == GRN_WORKFLOW_CATEGORY_NONPARTY_ID) {
            //Create Dummy Category
            $category = [];
            foreach ($translation_map as $value) {
                if ($value == '_id') {
                    $category[$value] = GRN_WORKFLOW_CATEGORY_NONPARTY_ID;
                } else {
                    $category['col_' . $value] = '';
                }
            }
            $public_check = false;
        } else {
            //Get Category
            $category_logic_base = $this->getCategoryLogicBase();
            $category =& $category_logic_base->get($category_id,
                null, $refresh, $lock_mode);
        }

        if ($public_check) {
            if ($user_type != GRN_WORKFLOW_PUBLIC_TYPE_SYSTEM
                && $user_type != GRN_WORKFLOW_PUBLIC_TYPE_MANAGE
            ) {
                //Check Public Right
                $this->checkCategoryPublic($category, true, $lock_mode);
            }
            if ($user_type2 == GRN_WORKFLOW_PUBLIC_TYPE_MANAGE) {
                //Check Manage Right
                $this->checkCategoryManage($category, true, $lock_mode);
            }
        }
        $category_for_view = $this->_model2View($category, $translation_map);

        //Return Category View
        return $category_for_view;
    }


    /**
     * Get Public Category List View
     *
     * @param  int   $category_id     //Category ID
     * @param  array $translation_map //Model <=> View Translation Map
     * @param  bool  $user_type       //Public User Type(sytem/manage/personal)
     * @param  bool  $refresh         //Refresh Flag
     * @param  int   $lock_mode       //Lock Mode
     *
     * @return array  $category_view            //Category for View
     */
    function getListViewPublic(
        $category_id,
        $translation_map,
        $user_type,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $user_type2 = null
    ) {
        $category_list_for_view = [];

        //Get Category List
        $category_logic_base = $this->getCategoryLogicBase();
        $category_list =& $category_logic_base->getList($category_id,
            $refresh, $lock_mode);

        //Create Parameter Translation for Category List
        foreach ($category_list as $id => $category) {
            if ($user_type != GRN_WORKFLOW_PUBLIC_TYPE_SYSTEM
                && $user_type != GRN_WORKFLOW_PUBLIC_TYPE_MANAGE
            ) {
                //Check Public Right
                if ( ! $this->checkCategoryPublic($category, false,
                    $lock_mode)
                ) {
                    continue;
                }
            }
            if ($user_type2 == GRN_WORKFLOW_ACCESS_TYPE_MANAGE) {
                //Check Manage Right
                if ( ! $this->checkCategoryManage($category, false,
                    $lock_mode)
                ) {
                    continue;
                }
            }
            $category_list_for_view[$id] = $this->_model2View($category,
                $translation_map);
        }

        //Return Category List View
        return $category_list_for_view;
    }

    /**
     * Get Public Tree List View
     *
     * @param  int   $category_id     //Category ID
     * @param  array $translation_map //Model <=> View Translation Map
     * @param  bool  $user_type       //Public User Type(sytem/manage/personal)
     * @param  bool  $include_root    //Include Root Category Flag
     * @param  bool  $include_last    //Include Last Category List Flag
     * @param  int   $lock_mode       //Lock Mode
     *
     * @return array  $category_view            //Category for View
     */
    function getTreeListViewPublic(
        $category_id,
        $translation_map,
        $user_type,
        $include_root = true,
        $include_last = true,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $user_type2 = null
    ) {
        $category_list_for_view = [];

        if ($category_id == GRN_WORKFLOW_CATEGORY_NONPARTY_ID) {
            if ($include_root) {
                //Get Root Category
                $category_logic_base = $this->getCategoryLogicBase();
                $root_category
                    = $category_logic_base->get(GRN_WORKFLOW_CATEGORY_ROOT_ID);
                $category_list_for_view[GRN_WORKFLOW_CATEGORY_ROOT_ID]
                    = $this->_model2View($root_category,
                    $translation_map);
            }

            if ($include_last) {
                //Create Dummy Category
                $category = [];
                foreach ($translation_map as $value) {
                    if ($value == '_id') {
                        $category[$value] = GRN_WORKFLOW_CATEGORY_NONPARTY_ID;
                    } else {
                        $category['col_' . $value] = '';
                    }
                }
                $category_list_for_view[GRN_WORKFLOW_CATEGORY_NONPARTY_ID]
                    = $this->_model2View($category, $translation_map);
            }
        } else {
            //Get Category List
            $category_logic_base = $this->getCategoryLogicBase();
            $category_list
                = $category_logic_base->getTreeList($category_id,
                $include_root, $include_last, $lock_mode);

            //Create Parameter Translation for Category List
            foreach ($category_list as $id => $category) {
                if ($user_type != GRN_WORKFLOW_PUBLIC_TYPE_SYSTEM
                    && $user_type != GRN_WORKFLOW_PUBLIC_TYPE_MANAGE
                ) {
                    //Check Public Right
                    if ( ! $this->checkCategoryPublic($category, false,
                        $lock_mode)
                    ) {
                        continue;
                    }
                }
                if ($user_type2 == GRN_WORKFLOW_ACCESS_TYPE_MANAGE) {
                    //Check Manage Right
                    if ( ! $this->checkCategoryManage($category, false,
                        $lock_mode)
                    ) {
                        continue;
                    }
                }
                $category_list_for_view[$id] = $this->_model2View($category,
                    $translation_map);
            }
        }

        //Return Category List View
        return $category_list_for_view;
    }

    /**
     * Get Public Child List View
     *
     * @param  int    $category_id     //Category ID
     * @param  array  $translation_map //Model <=> View Translation Map
     * @param  string $user_type       //Public User Type(sytem/manage/personal)
     * @param  int    $lock_mode       //Lock Mode
     *
     * @return array  $category_view            //Category for View
     */
    function getChildListViewPublic(
        $category_id,
        $translation_map,
        $user_type,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $user_type2 = null
    ) {
        $category_list_for_view = [];

        //Get Category List
        $category_logic_base = $this->getCategoryLogicBase();
        $category_list = $category_logic_base->getChildList($category_id,
            $lock_mode);

        //Create Parameter Translation for Category List
        foreach ($category_list as $id => $category) {
            if ($user_type == GRN_WORKFLOW_PUBLIC_TYPE_MANAGE) {
                //Check Access Right
                if ( ! $this->checkCategoryAccess($category, false, $lock_mode,
                    false)
                ) {
                    continue;
                }
            }
            if ($user_type != GRN_WORKFLOW_PUBLIC_TYPE_SYSTEM
                && $user_type != GRN_WORKFLOW_PUBLIC_TYPE_MANAGE
            ) {
                //Check Public Right
                if ( ! $this->checkCategoryPublic($category, false,
                    $lock_mode)
                ) {
                    continue;
                }
            }
            if ($user_type2 == GRN_WORKFLOW_ACCESS_TYPE_MANAGE) {
                //Check Manage Right
                if ( ! $this->checkCategoryManage($category, false,
                    $lock_mode)
                ) {
                    continue;
                }
            }
            if ($user_type == GRN_WORKFLOW_PUBLIC_TYPE_PERSONAL) {
                $childs = $this->getChildListViewPublic($id,
                    $translation_map, GRN_WORKFLOW_PUBLIC_TYPE_PERSONAL);
                $category_list_for_view[$id]
                    = $this->_model2View($category,
                    $translation_map);
                $category_list_for_view[$id]['child_count'] = count($childs);
            } else {
                $category_list_for_view[$id] = $this->_model2View($category,
                    $translation_map);
            }
        }

        //Return Category List View
        return $category_list_for_view;
    }

    /**
     * Get ALL Public Child List View
     *
     * @param  int   $category_id     //Category ID
     * @param  array $translation_map //Model <=> View Translation Map
     * @param  bool  $user_type       //Public User Type(sytem/manage/personal)
     * @param  int   $lock_mode       //Lock Mode
     *
     * @return array  $category_view            //Workflow for View
     */
    function getAllChildListViewPublic(
        $category_id,
        $translation_map,
        $user_type,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $user_type2 = null
    ) {
        $category_list_for_view = [];

        //Get Category List
        $category_logic_base = $this->getCategoryLogicBase();
        $category_list
            = $category_logic_base->getAllChildList($category_id,
            $lock_mode);

        //Create Parameter Translation for Category List
        foreach ($category_list as $id => $category) {
            if ($user_type != GRN_WORKFLOW_PUBLIC_TYPE_SYSTEM
                && $user_type != GRN_WORKFLOW_PUBLIC_TYPE_MANAGE
            ) {
                //Check Public Right
                if ( ! $this->checkCategoryPublic($category, false,
                    $lock_mode)
                ) {
                    continue;
                }
            }
            if ($user_type2 == GRN_WORKFLOW_ACCESS_TYPE_MANAGE) {
                //Check Manage Right
                if ( ! $this->checkCategoryManage($category, false,
                    $lock_mode)
                ) {
                    continue;
                }
            }
            $category_list_for_view[$id] = $this->_model2View($category,
                $translation_map);
        }

        //Return Category List View
        return $category_list_for_view;
    }


    /**
     * Search Category
     *
     * @param  array $search_info     //Search Information
     * @param  array $translation_map //Translation Map
     * @param  bool  $user_type       //Access User Type(sytem/manage/personal)
     * @param  bool  $refresh         //Refresh Flag
     * @param  int   $lock_mode       //Lock Mode
     *
     * @return array  $hit_category_list        //Hit Category List
     */
    function search(
        $search_info,
        $translation_map,
        $user_type,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $user_type2 = null
    ) {
        $resultArray = [];

        //Create Condition List
        require_once('fw/string_util.csp');
        $condition_list = cb_parse_search_text($search_info['text']);
        if (count($condition_list) == 0) {
            return $resultArray;
        }

        //Search Category
        $category_logic_base = $this->getCategoryLogicBase();
        $hit_category_list = $category_logic_base->search($condition_list,
            $search_info['offset'], $search_info['limit'], $lock_mode);

        //Create Parameter Translation for Category List
        foreach ($hit_category_list as $id => $category) {
            if ($user_type != GRN_WORKFLOW_ACCESS_TYPE_SYSTEM) {
                //Check Access Right
                if ( ! $this->checkCategoryAccess($category, false,
                    $lock_mode)
                ) {
                    continue;
                }
            }
            if ($user_type2 == GRN_WORKFLOW_ACCESS_TYPE_MANAGE) {
                //Check Manage Right
                if ( ! $this->checkCategoryManage($category, false,
                    $lock_mode)
                ) {
                    continue;
                }
            }
            $resultArray[$id] = $this->_model2View($category, $translation_map);
        }

        return $resultArray;
    }

    /**
     * Check Category Access
     *
     * @param  int  $category_id //Category ID
     * @param  bool $throw_error //Throw Errro Flag
     * @param  int  $lock_mode   //Lock Mode
     *
     * @return bool   $result                   //Check Result
     */
    function checkAccess(
        $category_id,
        $throw_error = true,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $refresh = false,
        $user_id = false
    ) {
        require_once('workflow/error_code.csp');
        cb_trim_check($category_id, E_GRN_WRKF_CATEGORY_INVALID_ID);
        $category = ['_id' => $category_id];

        return $this->checkCategoryAccess($category, $throw_error, $lock_mode,
            $refresh, $user_id);
    }

    /**
     * Check Category Access
     *
     * @param  int  $category    //Category
     * @param  bool $throw_error //Throw Errro Flag
     * @param  int  $lock_mode   //Lock Mode
     *
     * @return bool   $result                   //Check Result
     */
    function checkCategoryAccess(
        & $category,
        $throw_error = true,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $refresh = false,
        $user_id = false
    ) {
        $category_access_logic_base = $this->getCategoryAccessLogicBase();
        if ( ! $category_access_logic_base->evaluateCategory($category['_id'],
            $lock_mode, $refresh, $user_id)
        ) {
            //Check Throw Error Flag
            if ($throw_error) {
                //Category Access Deny
                require_once('workflow/error_code.csp');
                cb_throw_error(E_GRN_WRKF_ACCESS_DENY);
            } else {
                return false;
            }
        }

        return true;
    }

    /**
     * Check Category Public
     *
     * @param  int  $category_id //Category ID
     * @param  bool $throw_error //Throw Errro Flag
     * @param  int  $lock_mode   //Lock Mode
     *
     * @return bool   $result                   //Check Result
     */
    function checkPublic(
        $category_id,
        $throw_error = true,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $refresh = false,
        $user_id = false
    ) {
        require_once('workflow/error_code.csp');
        cb_trim_check($category_id, E_GRN_WRKF_CATEGORY_INVALID_ID);
        $category = ['_id' => $category_id];

        return $this->checkCategoryPublic($category, $throw_error, $lock_mode,
            $refresh, $user_id);
    }

    /**
     * Check Category Public
     *
     * @param  int  $category    //Category
     * @param  bool $throw_error //Throw Errro Flag
     * @param  int  $lock_mode   //Lock Mode
     *
     * @return bool   $result                   //Check Result
     */
    function checkCategoryPublic(
        & $category,
        $throw_error = true,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $refresh = false,
        $user_id = false
    ) {
        $category_public_logic_base = $this->getCategoryPublicLogicBase();
        if ( ! $category_public_logic_base->evaluateCategory($category['_id'],
            $lock_mode, $refresh, $user_id)
        ) {
            //Check Throw Error Flag
            if ($throw_error) {
                //Category Public Deny
                require_once('workflow/error_code.csp');
                cb_throw_error(E_GRN_WRKF_PUBLIC_DENY);
            } else {
                return false;
            }
        }

        return true;
    }

    /**
     * Check Category Public by Petition ID
     *
     * @param  int  $petition_id //Petition ID
     * @param  bool $throw_error //Throw Errro Flag
     * @param  int  $lock_mode   //Lock Mode
     *
     * @return bool   $result                   //Check Result
     */
    function checkPublicByPetitionId(
        $petition_id,
        $throw_error = true,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $refresh = false,
        $user_id = false
    ) {
        require_once('workflow/error_code.csp');
        cb_trim_check($petition_id, E_GRN_WRKF_PETITION_INVALID_ID);

        //$petition = array('_id' => $petition_id);
        return $this->checkCategoryPublicByPetitionId($petition_id,
            $throw_error, $lock_mode, $refresh, $user_id);
    }

    /**
     * Check Category Public by Petition ID
     *
     * @param  int  $petition_id //Petition ID
     * @param  bool $throw_error //Throw Errro Flag
     * @param  int  $lock_mode   //Lock Mode
     *
     * @return bool   $result                   //Check Result
     */
    function checkCategoryPublicByPetitionId(
        $petition_id,
        $throw_error = true,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $refresh = false,
        $user_id = false
    ) {
        $petition_util
            = GRN_Workflow_Petition_Controller_Utility::getInstance();
        //Create Parameter Translation Map
        $translation_map_petition = [
            '_id'    => '_id',
            'status' => 'status',
        ];

        //Get Petition for view
        $petition = $petition_util->getView($petition_id,
            $translation_map_petition);
        if ($petition['status'] != GRN_WORKFLOW_STATUS_ACCEPTANCE
            && $petition['status'] != GRN_WORKFLOW_STATUS_FINISHED
        ) {
            //Check Throw Error Flag
            if ($throw_error) {
                //Category Public Deny
                require_once('workflow/error_code.csp');
                cb_throw_error(E_GRN_WRKF_PETITION_DENY_ACCESS);
            } else {
                return false;
            }
        }
        // Petition ID -> Form ID
        require_once('workflow/form_logic.csp');
        $form_logic = GRN_Workflow_Form_Logic::getInstance();
        $form_id = $form_logic->getIdByPetitionId($petition_id);
        if ( ! $form_id) {
            //Check Throw Error Flag
            if ($throw_error) {
                //Category Public Deny
                require_once('workflow/error_code.csp');
                cb_throw_error(E_GRN_WRKF_FOLDER_INVALID_PETITION_ID);
            } else {
                return false;
            }
        }
        // Form ID -> Category ID
        require_once('workflow/category_logic.csp');
        $category_logic = GRN_Workflow_Category_Logic::getInstance();
        $category['_id'] = $category_logic->getIdByFormId($form_id);
        if ( ! $category['_id']) {
            //Check Throw Error Flag
            if ($throw_error) {
                //Category Public Deny
                require_once('workflow/error_code.csp');
                cb_throw_error(E_GRN_WRKF_FOLDER_INVALID_PETITION_ID);
            } else {
                return false;
            }
        }
        // checkPublic( Category ID )
        $category_public_logic_base = $this->getCategoryPublicLogicBase();
        if ( ! $category_public_logic_base->evaluateCategory($category['_id'],
            $lock_mode, $refresh, $user_id)
        ) {
            //Check Throw Error Flag
            if ($throw_error) {
                //Category Public Deny
                require_once('workflow/error_code.csp');
                cb_throw_error(E_GRN_WRKF_PUBLIC_DENY);
            } else {
                return false;
            }
        }

        return true;
    }

    /**
     * Check Category Manage
     *
     * @param  int  $category_id //Category ID
     * @param  bool $throw_error //Throw Errro Flag
     * @param  int  $lock_mode   //Lock Mode
     *
     * @return bool   $result                   //Check Result
     */
    function checkManage(
        $category_id,
        $throw_error = true,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $user_id = false
    ) {
        require_once('workflow/error_code.csp');
        cb_trim_check($category_id, E_GRN_WRKF_CATEGORY_INVALID_ID);
        $category = ['_id' => $category_id];

        return $this->checkCategoryManage($category, $throw_error, $lock_mode,
            $user_id);
    }

    /**
     * Check Category Manage
     *
     * @param  int  $category    //Category
     * @param  bool $throw_error //Throw Errro Flag
     * @param  int  $lock_mode   //Lock Mode
     *
     * @return bool   $result                   //Check Result
     */
    function checkCategoryManage(
        & $category,
        $throw_error = true,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $user_id = false
    ) {
        $category_manage_logic_base = $this->getCategoryManageLogicBase();
        if ( ! $category_manage_logic_base->evaluateCategory($category['_id'],
            $lock_mode, $user_id)
        ) {
            //Check Throw Error Flag
            if ($throw_error) {
                //Category Manage Deny
                require_once('workflow/error_code.csp');
                cb_throw_error(E_GRN_WRKF_MANAGE_DENY);
            } else {
                return false;
            }
        }

        return true;
    }

    /**
     * Evaluate Manage
     *
     * @param  int $lock_mode //Lock Mode
     *
     * @return bool   $result                   //Check Result
     */
    function evaluateManage($lock_mode = CB_DATABASE_DEFAULT_LOCK)
    {
        //Get UUM Instance
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');

        //Get Login User
        $login_user = $uum->getLoginUser();
        $login_user_id = $login_user->getOID();

        //Get Dynamic Role
        $dynamic_role_list = $uum->listGrantedRoles();

        $category_manage_logic_base = $this->getCategoryManageLogicBase();
        $result
            = $category_manage_logic_base->evaluateManage($login_user,
            $dynamic_role_list, $lock_mode);

        return $result;
    }

    public function createMultiLanguageValuesArray($inCategoryId)
    {
        $resultArray = [];

        require_once('workflow/WorkflowFacade.csp');
        $dao = new WorkflowFacade();

        $dataObj = [];
        $category
            = $dao->referWorkflowCategoryById($dataObj,
            $inCategoryId);
        $resultArray[CB_I18N_DEFUALT_LANGUAGE_CODE] = $category->getName();

        $dataObj = [];
        $categoryLocalList
            = $dao->getWorkflowCategoryLocalListByCategoryId($dataObj,
            $inCategoryId);
        foreach ($categoryLocalList as $categoryLocal) {
            $resultArray[$categoryLocal->getLanguageCode()]
                = $categoryLocal->getName();
        }

        return $resultArray;
    }
}

/**
 * Category Access Controller Utility Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_Category_Access_Controller_Utility
{
    /** Category Access Logic Base Instance **/
    var $_category_access_logic_base = null;

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {

    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_Category_Access_Controller_Utility $instance                  //Instance of GRN_Workflow_Category_Access_Controller_Utility
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_Category_Access_Controller_Utility();
        }

        return $_instance;
    }

    /**
     * Get Category Access Logic Base
     *
     * @param  none
     *
     * @return GRN_Workflow_Category_Access_Logic_Base $category_access_logic_base    //Category Access Logic Base
     */
    function getCategoryAccessLogicBase()
    {
        //Get Category Access Logic Base
        require_once('workflow/access_logic_base.csp');
        $this->_category_access_logic_base
            = GRN_Workflow_Category_Access_Logic_Base::getInstance();

        //Return Category Access Logic Base
        return $this->_category_access_logic_base;
    }


    /**
     * Model => View
     *
     * @param  object $access          //Access Object
     * @param  string $target_type     //Target Type
     * @param  array  $translation_map //Model <=> View Translation Map
     *
     * @return array  $access_view              //Access for View
     */
    function _model2View(&$access, $target_type, $translation_map)
    {
        $access_for_view = [];

        $access_access_logic_base = $this->getCategoryAccessLogicBase();

        //Create Parameter Translation for Access
        foreach ($translation_map as $view => $model) {
            if ($model !== '_id') {
                $model = 'col_' . $model;
            }

            switch ($model) {
                case '_id':
                    $access_for_view[$view] = $access[$model];
                    break;
                case 'col_target':
                case 'col_object':
                    $access_for_view[$view] = $access[$model];
                    break;
                case 'col_type':
                    $access_for_view[$view] = $target_type;
                    break;
                case 'col_authority_browse':
                    $authorities = ['browse' => $access[$model]];
                    $access_for_view[$view] = $authorities;
                    break;
                case 'col_security_model':
                    $access_for_view[$view]
                        = $access_access_logic_base->getSecurityModel($access['col_object']);
                    break;
                default:
                    $access_for_view[$view] = $access[$model];
                    break;
            }
        }

        //Return Access View
        return $access_for_view;
    }

    /**
     * Get Access View
     *
     * @param  int    $access_id       //Access ID
     * @param  string $target_type     //Target Type
     * @param  array  $translation_map //Model <=> View Translation Map
     * @param  bool   $refresh         //Refresh Flag
     * @param  int    $lock_mode       //Lock Mode
     *
     * @return array  $access_view              //Access for View
     */
    function getView(
        $access_id,
        $target_type,
        $translation_map,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $access_for_view = [];

        //Get Access Object
        $access_logic_base = $this->getAccessLogicBase();
        $access =& $access_logic_base->get($access_id, $refresh,
            $lock_mode);

        $access_for_view = $this->_model2View($access, $target_type,
            $translation_map);

        //Return Access View
        return $access_for_view;
    }

    /**
     * Get Access List View
     *
     * @param  int    $category_id     //Category ID
     * @param  string $target_type     //Target Type
     * @param  array  $translation_map //Model <=> View Translation Map
     * @param  bool   $refresh         //Refresh Flag
     * @param  int    $lock_mode       //Lock Mode
     *
     * @return array  $access_view              //access for View
     */
    function getListView(
        $category_id,
        $target_type,
        $translation_map,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $access_list_for_view = [];

        //Get Access List Object
//        $access_logic_base =& $this->getCategoryAccessLogicBase();
        require_once('workflow/access_logic_base.csp');
        $access_logic_base
            = GRN_Workflow_Category_Access_Logic_Base::getInstance();

        $access_id_list =& $access_logic_base->getList($category_id,
            $target_type, $refresh, $lock_mode);

        //Create Parameter Translation for Access List
        foreach ($access_id_list as $id => $access) {
            $access_list_for_view[$id] = $this->_model2View($access,
                $target_type, $translation_map);
        }

        //Return Access List View
        return $access_list_for_view;
    }
}


/**
 * Category Public Controller Utility Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_Category_Public_Controller_Utility
{
    /** Category Public Logic Base Instance **/
    var $_category_public_logic_base = null;

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {

    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_Category_Public_Controller_Utility $instance                  //Instance of GRN_Workflow_Category_Public_Controller_Utility
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_Category_Public_Controller_Utility();
        }

        return $_instance;
    }

    /**
     * Get Category Public Logic Base
     *
     * @param  none
     *
     * @return object $category_public_logic_base    //Category Public Logic Base
     */
    function getCategoryPublicLogicBase()
    {
        //Get Category Public Logic Base
        require_once('workflow/public_logic_base.csp');
        $this->_category_public_logic_base
            = GRN_Workflow_Category_Public_Logic_Base::getInstance();

        //Return Category Public Logic Base
        return $this->_category_public_logic_base;
    }


    /**
     * Model => View
     *
     * @param  object $public          //Public Object
     * @param  string $target_type     //Target Type
     * @param  array  $translation_map //Model <=> View Translation Map
     *
     * @return array  $public_view              //Public for View
     */
    function _model2View(&$public, $target_type, $translation_map)
    {
        $public_for_view = [];

        $public_public_logic_base = $this->getCategoryPublicLogicBase();

        //Create Parameter Translation for Public
        foreach ($translation_map as $view => $model) {
            if ($model !== '_id') {
                $model = 'col_' . $model;
            }

            switch ($model) {
                case '_id':
                    $public_for_view[$view] = $public[$model];
                    break;
                case 'col_target':
                case 'col_object':
                    $public_for_view[$view] = $public[$model];
                    break;
                case 'col_type':
                    $public_for_view[$view] = $target_type;
                    break;
                case 'col_authority_browse':
                    $authorities = ['browse' => $public[$model]];
                    $public_for_view[$view] = $authorities;
                    break;
                case 'col_security_model':
                    $public_for_view[$view]
                        = $public_public_logic_base->getSecurityModel($public['col_object']);
                    break;

                default:
                    $public_for_view[$view] = $public[$model];
                    break;
            }
        }

        //Return Public View
        return $public_for_view;
    }

    /**
     * Get Public View
     *
     * @param  int    $public_id       //Public ID
     * @param  string $target_type     //Target Type
     * @param  array  $translation_map //Model <=> View Translation Map
     * @param  bool   $refresh         //Refresh Flag
     * @param  int    $lock_mode       //Lock Mode
     *
     * @return array  $public_view              //Public for View
     */
    function getView(
        $public_id,
        $target_type,
        $translation_map,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $public_for_view = [];

        //Get Public Object
        $public_logic_base = $this->getPublicLogicBase();
        $public =& $public_logic_base->get($public_id, $refresh,
            $lock_mode);

        $public_for_view = $this->_model2View($public, $target_type,
            $translation_map);

        //Return Public View
        return $public_for_view;
    }

    /**
     * Get Public List View
     *
     * @param  int    $category_id     //Category ID
     * @param  string $target_type     //Target Type
     * @param  array  $translation_map //Model <=> View Translation Map
     * @param  bool   $refresh         //Refresh Flag
     * @param  int    $lock_mode       //Lock Mode
     *
     * @return array  $public_view              //public for View
     */
    function getListView(
        $category_id,
        $target_type,
        $translation_map,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $public_list_for_view = [];

        //Get Public List Object
//        $public_logic_base =& $this->getCategoryPublicLogicBase();
        require_once('workflow/public_logic_base.csp');
        $public_logic_base
            = GRN_Workflow_Category_Public_Logic_Base::getInstance();

        $public_id_list =& $public_logic_base->getList($category_id,
            $target_type, $refresh, $lock_mode);

        //Create Parameter Translation for Public List
        foreach ($public_id_list as $id => $public) {
            $public_list_for_view[$id] = $this->_model2View($public,
                $target_type, $translation_map);
        }

        //Return Public List View
        return $public_list_for_view;
    }
}

/**
 * Category Manage Controller Utility Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_Category_Manage_Controller_Utility
{
    /** Category Manage Logic Instance **/
    var $_category_manage_logic_base = null;

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {

    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_Category_Manage_Controller_Utility $instance                  //Instance of GRN_Workflow_Category_Manage_Controller_Utility
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_Category_Manage_Controller_Utility();
        }

        return $_instance;
    }

    /**
     * Get Category Manage Logic Base
     *
     * @param  none
     *
     * @return GRN_Workflow_Category_Manage_Logic_Base $category_manage_logic_base    //Category Manage Logic Base
     */
    function getCategoryManageLogicBase()
    {
        //Get Category Manage Logic Base
        require_once('workflow/manage_logic_base.csp');
        $this->_category_manage_logic_base
            = GRN_Workflow_Category_Manage_Logic_Base::getInstance();

        //Return Category Manage Logic Base
        return $this->_category_manage_logic_base;
    }

    /**
     * Model => View
     *
     * @param  object $manage          //Manage Object
     * @param  string $target_type     //Target Type
     * @param  array  $translation_map //Model <=> View Translation Map
     *
     * @return array  $manage_view              //Manage for View
     */
    function _model2View(&$manage, $target_type, $translation_map)
    {
        $manage_for_view = [];

        $manage_manage_logic_base = $this->getCategoryManageLogicBase();

        //Create Parameter Translation for Manage
        foreach ($translation_map as $view => $model) {
            if ($model !== '_id') {
                $model = 'col_' . $model;
            }

            switch ($model) {
                case '_id':
                    $manage_for_view[$view] = $manage[$model];
                    break;
                case 'col_target':
                case 'col_object':
                    $manage_for_view[$view] = $manage[$model];
                    break;
                case 'col_type':
                    $manage_for_view[$view] = $target_type;
                    break;
                case 'col_authority_browse':
                    $authorities = ['browse' => $manage[$model]];
                    $manage_for_view[$view] = $authorities;
                    break;
                default:
                    $manage_for_view[$view] = $manage[$model];
                    break;
            }
        }

        //Return Manage View
        return $manage_for_view;
    }

    /**
     * Get Manage View
     *
     * @param  int    $manage_id       //Manage ID
     * @param  string $target_type     //Target Type
     * @param  array  $translation_map //Model <=> View Translation Map
     * @param  bool   $refresh         //Refresh Flag
     * @param  int    $lock_mode       //Lock Mode
     *
     * @return array  $manage_view              //Manage for View
     */
    function getView(
        $manage_id,
        $target_type,
        $translation_map,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $manage_for_view = [];

        //Get Manage Object
        $manage_logic_base = $this->getManageLogicBase();
        $manage =& $manage_logic_base->getManage($manage_id,
            $refresh, $lock_mode);

        $manage_for_view = $this->_model2View($manage, $target_type,
            $translation_map);

        //Return Manage View
        return $manage_for_view;
    }

    /**
     * Get Manage List View
     *
     * @param  int    $category_id     //Category ID
     * @param  string $target_type     //Target Type
     * @param  array  $translation_map //Model <=> View Translation Map
     * @param  bool   $refresh         //Refresh Flag
     * @param  int    $lock_mode       //Lock Mode
     *
     * @return array  $manage_view              //manage for View
     */
    function getListView(
        $category_id,
        $target_type,
        $translation_map,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $manage_list_for_view = [];

        //Get Manage List Object
        $manage_logic_base = $this->getCategoryManageLogicBase();
        $manage_id_list
            =& $manage_logic_base->getManageListByCategoryID($category_id,
            $target_type, $refresh, $lock_mode);

        //Create Parameter Translation for Manage List
        foreach ($manage_id_list as $id => $manage) {
            $manage_list_for_view[$id] = $this->_model2View($manage,
                $target_type, $translation_map);
        }

        //Return Manage List View
        return $manage_list_for_view;
    }
}

/**
 * Folder Controller Utility Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_Folder_Controller_Utility
{
    /** Folder Logic Base Instance **/
    var $_folder_logic_base = null;

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {

    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_Folder_Controller_Utility $instance                  //Instance of GRN_Workflow_Folder_Controller_Utility
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_Folder_Controller_Utility();
        }

        return $_instance;
    }

    /**
     * Get Folder Logic Base
     *
     * @param  none
     *
     * @return GRN_Workflow_Folder_Logic_Base $folder_logic_base    //Folder Logic Base
     */
    function getFolderLogicBase()
    {
        //Get Folder Logic Base
        require_once('workflow/folder_logic_base.csp');
        $this->_folder_logic_base
            = GRN_Workflow_Folder_Logic_Base::getInstance();

        //Return Folder Logic Base
        return $this->_folder_logic_base;
    }

    /**
     * Convert Sysname
     *
     * @param  int    $folder_type //Folder Type
     * @param  string $folder_name //Folder Name
     *
     * @return string $converted_folder_name  //Converted Folder Name
     */
    function _convert2SysName($folder_type, $folder_name)
    {
        $converted_folder_name = $folder_name;

        require_once('workflow/resources.csp');
        switch ($folder_type) {
            case GRN_WORKFLOW_FOLDER_TYPE_ROOT_ID:
                $converted_folder_name = cb_msg('grn.workflow', '(root)');
                break;
            case GRN_WORKFLOW_FOLDER_TYPE_NEW_ID:
                $converted_folder_name = cb_msg('grn.workflow', '(new)');
                break;
            case GRN_WORKFLOW_FOLDER_TYPE_IN_ID:
                $converted_folder_name = cb_msg('grn.workflow', '(in)');
                break;
            case GRN_WORKFLOW_FOLDER_TYPE_OUT_ID:
                $converted_folder_name = cb_msg('grn.workflow', '(out)');
                break;
            case GRN_WORKFLOW_FOLDER_TYPE_UNPROCESSED_ID:
                $converted_folder_name = cb_msg('grn.workflow',
                    '(unprocessed)');
                break;
            case GRN_WORKFLOW_FOLDER_TYPE_FINISH_ID:
                $converted_folder_name = cb_msg('grn.workflow', '(finish)');
                break;
            case GRN_WORKFLOW_FOLDER_TYPE_TEMP_ID:
                $converted_folder_name = cb_msg('grn.workflow', '(temp)');
                break;
            /*
        case GRN_WORKFLOW_FOLDER_TYPE_TRASH_ID:
            $converted_folder_name = cb_msg('grn.workflow', '(trash)');
            break;
*/
        }

        return $converted_folder_name;
    }

    /**
     * Model => View
     *
     * @param  object $folder          //Folder Object
     * @param  array  $translation_map //Model <=> View Translation Map
     *
     * @return array  $folder_view              //Folder for View
     */
    function _model2View(&$folder, $translation_map)
    {
        $folder_for_view = [];

        //Create Parameter Translation for Folder
        foreach ($translation_map as $view => $model) {
            if ($model !== '_id') {
                $model = 'col_' . $model;
            }

            switch ($model) {
                case '_id':
                    $folder_for_view[$view] = $folder['_id'];
                    break;
                case 'col_name':
                    $folder_for_view[$view]
                        = $this->_convert2SysName($folder[GRN_WORKFLOW_COLUMN_FOLDER_TYPE],
                        $folder[$model]);
                    break;
                case 'col_creator':
                case 'col_modifier':
                    //Get User ID
                    $uid = $folder[$model];
                    if ($uid) {
                        $folder_for_view[$view] = $uid;
                    }
                    break;
                case 'col_creator_name':
                case 'col_modifier_name':
                    //Get User ID
                    $model = str_replace('_name', '', $model);
                    $uid = $folder[$model];

                    //Get User Object
                    global $G_container_base;
                    $grn_uum = $G_container_base->getInstance('uum');
                    $object = $grn_uum->getUser($uid);
                    if ($object) {
                        $folder_for_view[$view]
                            = $object->get(GRN_WORKFLOW_COLUMN_DISPLAY_NAME);
                    }
                    break;
                case 'col_ctime':
                case 'col_mtime':
                    $time = $folder[$model];
                    $folder_for_view[$view] = new CB_TimeStamp();
                    $folder_for_view[$view]->unix_ts = $time;
                    break;
                default:
                    if (array_key_exists($model, $folder)) {
                        $folder_for_view[$view] = $folder[$model];
                    }
                    break;
            }
        }

        //Return Folder View
        return $folder_for_view;
    }

    /**
     * Get Folder View
     *
     * @param  array $translation_map //Model <=> View Translation Map
     * @param  int   $user_id         //User ID
     * @param  int   $folder_id       //Folder ID
     * @param  bool  $refresh         //Refresh Flag
     * @param  int   $lock_mode       //Lock Mode
     *
     * @return array  $folder_view              //Folder for View
     */
    function getView(
        $translation_map,
        $user_id,
        $folder_id = null,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $folder_for_view = [];

        //Get Folder Object
        $folder_logic_base = $this->getFolderLogicBase();
        $folder =& $folder_logic_base->get($user_id, $folder_id,
            $refresh, $lock_mode);

        $folder_for_view = $this->_model2View($folder, $translation_map);

        //Return Folder View
        return $folder_for_view;
    }

    /**
     * Get Folder View(with Extra Infolderation)
     *
     * @param  array $translation_map //Model <=> View Translation Map
     * @param  int   $user_id         //Category ID
     * @param  int   $folder_id       //Folder ID
     * @param  int   $offset          //Offset
     * @param  int   $limit           //Limit
     * @param  bool  $refresh         //Refresh Flag
     * @param  int   $lock_mode       //Lock Mode
     * @param  int   $category_id     //Category ID
     *
     * @return array  $folder_view                  //Folder for View
     */
    function getViewEx(
        $translation_map,
        $user_id,
        $folder_id,
        $offset = 0,
        $limit = 20,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $category_id = null
    ) {
        return $this->getViewExOrder($translation_map, $user_id, $folder_id,
            $offset, $limit, null, $refresh, $lock_mode, $category_id);
    }

    /**
     * Get Folder View(with Extra Infolderation)
     *
     * @param  array $translation_map //Model <=> View Translation Map
     * @param  int   $user_id         //Category ID
     * @param  int   $folder_id       //Folder ID
     * @param  int   $offset          //Offset
     * @param  int   $limit           //Limit
     * @param  array $order           //OrderBy  ex) array('table name' => array('column name' => 'ASC or DESC') )
     * @param  bool  $refresh         //Refresh Flag
     * @param  int   $lock_mode       //Lock Mode
     * @param  int   $category_id     //Category ID
     *
     * @return array  $folder_view                  //Folder for View
     */
    function getViewExOrder(
        $translation_map,
        $user_id,
        $folder_id,
        $offset = 0,
        $limit = 20,
        $order = null,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $category_id = null
    ) {
        $folder_for_view = [];

        //Get Folder
        $folderEx = false;
        if ($folder_id == GRN_WORKFLOW_FOLDER_PROXY_APPROVAL_ID
            || $folder_id == GRN_WORKFLOW_FOLDER_PUBLIC_ID
            || $folder_id == GRN_WORKFLOW_FOLDER_APPROVAL_PLAN_ID
        ) {
            require_once('workflow/folder_logic_base.csp');
            $virtual_folder_logic_base
                = GRN_Workflow_Virtual_Folder_Logic_Base::getInstance();
            $folderEx =& $virtual_folder_logic_base->getExOrder($user_id,
                $folder_id, $offset, $limit, $order, $refresh, $lock_mode,
                $category_id);
        } else {
            $folder_logic_base = $this->getFolderLogicBase();
            $folderEx =& $folder_logic_base->getExOrder($user_id,
                $folder_id, $offset, $limit, $order, $refresh, $lock_mode);
        }

        if ( ! $folderEx) {
            return false;
        }

        //Create Parameter Translation for Folder
        foreach ($translation_map as $view => $model) {
            $model = str_replace('f_col_id', 'f__id', $model);
            $model = str_replace('r_col_id', 'r__id', $model);
            $model = str_replace('p_col_id', 'p__id', $model);
            switch ($model) {
                case 'f__id':
                    $folder_for_view[$view] = $folderEx[$model];
                    break;
                case 'f_col_creator':
                case 'f_col_modifier':
                    //Get User ID
                    $uid = $folderEx[$model];
                    if ($uid) {
                        $folder_for_view[$view] = $uid;
                    }
                    break;
                case 'f_col_name':
                    $folder_for_view[$view]
                        = $this->_convert2SysName($folderEx['f_col_folder_type'],
                        $folderEx[$model]);
                    break;
                case 'f_col_creator_name':
                case 'f_col_modifier_name':
                    //Get User ID
                    $model = str_replace('_name', '', $model);
                    $uid = $folderEx[$model];

                    //Get User Object
                    global $G_container_base;
                    $grn_uum = $G_container_base->getInstance('uum');
                    $object = $grn_uum->getUser($uid);
                    if ($object) {
                        $folder_for_view[$view]
                            = $object->get(GRN_WORKFLOW_COLUMN_DISPLAY_NAME);
                    }
                    break;
                case 'f_col_ctime':
                case 'f_col_mtime':
                    $time = $folderEx[$model];
                    $folder_for_view[$view] = new CB_TimeStamp();
                    $folder_for_view[$view]->unix_ts = $time;
                    break;
                default:
                    $folder_for_view[$view] = $folderEx[$model];
                    break;
            }
            if (array_key_exists('path_steps', $folderEx)) {
                $folder_for_view['path_steps'] = $folderEx['path_steps'];
            }
        }

        $petition_ids = [];

        //Create Parameter Translation for Folder Relation and Petition
        foreach (array_keys($folderEx['folderrelation']) as $folderrelation_id) {
            $folder_folderrelation
                =& $folderEx['folderrelation'][$folderrelation_id];

            foreach ($translation_map as $view => $model) {
                $model = str_replace('f_col_id', 'f__id', $model);
                $model = str_replace('r_col_id', 'r__id', $model);
                $model = str_replace('p_col_id', 'p__id', $model);

                switch ($model) {
                    case 'r__id':
                    case 'p__id':
                        if (array_key_exists($model, $folder_folderrelation)) {
                            $folder_for_view['folderrelation'][$folderrelation_id][$view]
                                = $folder_folderrelation[$model];
                        } else {
                            $folder_for_view['folderrelation'][$folderrelation_id][$view]
                                = null;
                        }
                        if ($model == 'p__id') {
                            $petition_ids[] = $folder_folderrelation[$model];
                            $ptid_key = $view;
                        }
                        break;
                    case 'r_col_creator':
                    case 'p_col_creator':
                    case 'r_col_modifier':
                    case 'p_col_modifier':
                    case 'p_col_transactor':
                        //Get User ID
                        if (array_key_exists($model, $folder_folderrelation)) {
                            $uid = $folder_folderrelation[$model];
                        } else {
                            $uid = null;
                        }
                        if ($uid) {
                            $folder_for_view['folderrelation'][$folderrelation_id][$view]
                                = $uid;
                        }
                        break;
                    case 'r_col_creator_name':
                    case 'p_col_creator_name':
                    case 'r_col_modifier_name':
                    case 'p_col_modifier_name':
                        //Get User ID
                        $model = str_replace('_name', '', $model);
                        if (array_key_exists($model, $folder_folderrelation)) {
                            $uid = $folder_folderrelation[$model];
                        } else {
                            $uid = null;
                        }

                        //Get User Object
                        global $G_container_base;
                        $grn_uum = $G_container_base->getInstance('uum');
                        $object = $grn_uum->getUser($uid);
                        if ($object) {
                            $folder_for_view['folderrelation'][$folderrelation_id][$view]
                                = $object->get(GRN_WORKFLOW_COLUMN_DISPLAY_NAME);
                        }
                        break;

                    case 'p_col_user_foreign_key':
                    case 'p_col_transactor_foreign_key':
                        //Get User ID
                        $model = str_replace('_foreign_key', '', $model);
                        if (array_key_exists($model, $folder_folderrelation)) {
                            $uid = $folder_folderrelation[$model];
                        } else {
                            $uid = null;
                        }

                        //Get User Object
                        global $G_container_base;
                        $grn_uum = $G_container_base->getInstance('uum');
                        $object = $grn_uum->getUser($uid);
                        if ($object) {
                            $folder_for_view['folderrelation'][$folderrelation_id][$view]
                                = $object->get('foreign_key');
                        }
                        break;
                    case 'r_col_ctime':
                    case 'p_col_ctime':
                    case 'r_col_mtime':
                    case 'p_col_mtime':
                        if (array_key_exists($model, $folder_folderrelation)) {
                            $time = $folder_folderrelation[$model];
                        } else {
                            $time = null;
                        }
                        $folder_for_view['folderrelation'][$folderrelation_id][$view]
                            = new CB_TimeStamp();
                        $folder_for_view['folderrelation'][$folderrelation_id][$view]->unix_ts
                            = $time;
                        break;
                    default:
                        if (array_key_exists($model, $folder_folderrelation)) {
                            $folder_for_view['folderrelation'][$folderrelation_id][$view]
                                = $folder_folderrelation[$model];
                        } else {
                            $folder_for_view['folderrelation'][$folderrelation_id][$view]
                                = null;
                        }
                        break;
                }
            }
            if (array_key_exists('path_steps', $folder_folderrelation)) {
                $folder_for_view['folderrelation'][$folderrelation_id]['path_steps']
                    = $folder_folderrelation['path_steps'];
            }
        }

        $petition_util
            = GRN_Workflow_Petition_Controller_Utility::getInstance();
        $subject_list_for_view =& $petition_util->getSubjectList($petition_ids);

        foreach (
            array_keys($folder_for_view['folderrelation']) as $folderrelation_id
        ) {
            if (strlen($subject_list_for_view[$folder_for_view['folderrelation'][$folderrelation_id][$ptid_key]])
                > 0
            ) {
                $folder_for_view['folderrelation'][$folderrelation_id]['petition_name']
                    = $subject_list_for_view[$folder_for_view['folderrelation'][$folderrelation_id][$ptid_key]];
            }
        }

        //Return Folder View
        return $folder_for_view;
    }

    /**
     * Get Folder List View
     *
     * @param  array $translation_map //Model <=> View Translation Map
     * @param  int   $user_id         //User ID
     * @param  int   $folder_id       //Folder ID
     * @param  bool  $refresh         //Refresh Flag
     * @param  int   $lock_mode       //Lock Mode
     *
     * @return array  $folder_view              //folder for View
     */
    function getListView(
        $translation_map,
        $user_id,
        $folder_id = null,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $folder_list_for_view = [];

        //Folder Logic Base Object
        $folder_logic_base = $this->getFolderLogicBase();

        //Get Folder List Object
        $folder_id_list =& $folder_logic_base->getList($user_id, $folder_id,
            $refresh, $lock_mode);

        //仮想フォルダを追加
        require_once('workflow/folder_logic_base.csp');
        $virtual_folder_logic_base
            = GRN_Workflow_Virtual_Folder_Logic_Base::getInstance();
        $virtual_folder_id_list =& $virtual_folder_logic_base->getList($user_id,
            $folder_id, $refresh, $lock_mode);
        $folder_id_list = $folder_id_list + $virtual_folder_id_list;

        //Create Parameter Translation for Folder List
        foreach ($folder_id_list as $id => $folder) {
            $folder_list_for_view[$id] = $this->_model2View($folder,
                $translation_map);
        }

        //Return Folder List View
        return $folder_list_for_view;
    }

    /**
     * Get Folder List View(Extra Infolderation)
     *
     * どこからも呼ばれていない？
     *
     * @param  array $translation_map //Model <=> View Translation Map
     * @param  int   $user_id         //Category ID
     * @param  bool  $refresh         //Refresh Flag
     * @param  int   $lock_mode       //Lock Mode
     *
     * @return array  $folder_view                 //Folder for View
     */
    function getListViewEx(
        $translation_map,
        $user_id,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $folder_list_for_view = [];

        //Get Folder List
        $folder_logic_base = $this->getFolderLogicBase();
        $folder_list =& $folder_logic_base->getListEx($user_id, $refresh,
            $lock_mode);

        //Create Parameter Translation for Folder List
        foreach (array_keys($folder_list) as $folder_id) {
            $folder_list_for_view[$folder_id]
                = $this->getViewEx($translation_map, $user_id, $folder_id,
                $refresh, $lock_mode);
        }

        //Return Folder List View
        return $folder_list_for_view;
    }

    /**
     * Check Initialize User
     *
     * @param  int $user_id //User ID
     */
    function isInitializeUser($user_id)
    {
        //Get Folder Logic Object
        require_once('workflow/folder_logic.csp');
        $folder_logic = GRN_Workflow_Folder_Logic::getInstance();

        //Get Folder List Count
        $folder_count = $folder_logic->getCount($user_id, false, CB_DATABASE_SHARED_LOCK);
        if ($folder_count <= 0) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * Initialize User
     *
     * @param  int $user_id //User ID
     */
    function initializeUser($user_id)
    {
        //Get Folder Logic Object
        require_once('workflow/folder_logic.csp');
        $folder_logic = GRN_Workflow_Folder_Logic::getInstance();
        //Create New Folder List
        $folder_logic->initializeUser($user_id);
    }


    /**
     * Get Folder Relation Count
     *
     * @param  int  $user_id     //User ID
     * @param  int  $folder_id   //Folder ID
     * @param  int  $category_id //Category ID
     * @param  bool $refresh     //Refresh Cache
     * @param  int  $lock_mode   //Lock Mode
     *
     * @return int    $folder_count                 //Folder Count
     */
    function getFolderRelationCount(
        $user_id,
        $folder_id,
        $category_id = null,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $count = 0;
        if ($folder_id == GRN_WORKFLOW_FOLDER_PROXY_APPROVAL_ID
            || $folder_id == GRN_WORKFLOW_FOLDER_PUBLIC_ID
            || $folder_id == GRN_WORKFLOW_FOLDER_APPROVAL_PLAN_ID
        ) {
            //仮想フォルダを追加
            require_once('workflow/folder_logic_base.csp');
            $virtual_folder_logic_base
                = GRN_Workflow_Virtual_Folder_Logic_Base::getInstance();
            $count
                = $virtual_folder_logic_base->getFolderRelationCount($user_id,
                $folder_id, $category_id, $refresh, $lock_mode);
        } else {
            require_once('workflow/folder_logic_base.csp');
            $folder_logic_base = GRN_Workflow_Folder_Logic_Base::getInstance();
            $count
                = $folder_logic_base->getFolderRelationCount($user_id,
                $folder_id, $refresh, $lock_mode);
        }

        return $count;
    }

    function searchPetitionIdList(
        $user_id,
        $folder_id,
        $folder_type,
        $search,
        $is_filter = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $petition_id_list = [];

        if ($folder_id == GRN_WORKFLOW_FOLDER_PROXY_APPROVAL_ID
            || $folder_id == GRN_WORKFLOW_FOLDER_APPROVAL_PLAN_ID
            || $folder_id == GRN_WORKFLOW_FOLDER_PUBLIC_ID
        ) {
            global $G_container_base;
            $uum = $G_container_base->getInstance('uum');
            $login_user = $uum->getLoginUser();

            require_once('workflow/folder_logic_base.csp');

            $virtual_folder_logic_base
                = GRN_Workflow_Virtual_Folder_Logic_Base::getInstance();
            $petition_id_list
                = $virtual_folder_logic_base->searchPetitionIdList($login_user->getOID(),
                $folder_id, $search, [],
                $lock_mode);

            if ($is_filter == true && count($petition_id_list) > 0) {
                $remove_item_list = [];
                $c = new GRN_Workflow_ControllerUtil();
                $chunk_pids_array = array_chunk($petition_id_list,
                    GRN_WORKFLOW_SEARCH_BATCHES_NUMBER, true);
                foreach ($chunk_pids_array as $search_pids) {
                    $remove_item_list = array_merge($remove_item_list,
                        $c->filter($user_id, $folder_id, $folder_type,
                            $search_pids, $lock_mode));
                }

                unset($c);
                if (count($remove_item_list) > 0) {
                    $petition_id_list
                        = $virtual_folder_logic_base->searchPetitionIdList($login_user->getOID(),
                        $folder_id, $search,
                        $remove_item_list, $lock_mode);
                }
            }
        } else {
            require_once('workflow/folder_logic_base.csp');
            $folder_logic_base = GRN_Workflow_Folder_Logic_Base::getInstance();
            $petition_id_list
                = $folder_logic_base->searchPetitionIdList($folder_id,
                $search, [], $lock_mode);

            if ($is_filter == true && count($petition_id_list) > 0) {
                $remove_item_list = [];
                $c = new GRN_Workflow_ControllerUtil();
                $chunk_pids_array = array_chunk($petition_id_list,
                    GRN_WORKFLOW_SEARCH_BATCHES_NUMBER, true);
                foreach ($chunk_pids_array as $search_pids) {
                    $remove_item_list = array_merge($remove_item_list,
                        $c->filter($user_id, $folder_id, $folder_type,
                            $search_pids, $lock_mode));
                }
                unset($c);
                if (count($remove_item_list) > 0) {
                    $petition_id_list
                        = $folder_logic_base->searchPetitionIdList($folder_id,
                        $search, $remove_item_list, $lock_mode);
                }
            }
        }

        return $petition_id_list;
    }

}


/**
 * Get Attached File Information
 *
 * @param  string $session_id //Session ID
 *
 * @return array  file_list                      //File Information Array
 */
function &grn_workflow_get_attached_file_info($session_id)
{
    //Get Session
    require_once('fw/session_manager.csp');
    $session_manager = CB_SessionManager::getInstance();
    require_once('grn/controller.csp');
    $tmp_key = grn_get_temporary_key();
    $session = $session_manager->getSession($session_id . $tmp_key);

    //Get Attached Session File
    $files = __grn_workflow_get_attached_session_files($session);

    $files_for_view = [];

    //Get File Information from Allready Attached Files
    require_once('grn/controller.csp');
    foreach (array_keys($files) as $key) {
        foreach (array_keys($files[$key]) as $id) {
            $file =& $files[$key][$id];
            $files_for_view[$key][$id] = grn_make_attached_file_info($file,
                'workflow');
        }
    }
    $files = $session->get('attached_file_item');

    global $G_INPUT;
    if (array_key_exists("html5", $G_INPUT)) {
        $use_html5 = true;
    } else {
        $use_html5 = false;
    }

    if ( ! $use_html5) {
        //Save New Uploaded File
        foreach ($_FILES as $key => $file) {
            //Check Upload Error
            //GRN2-3272
            if ((isset($file->error) && $file->error != UPLOAD_ERR_OK)
                || (is_array($file) && $file['error'] != UPLOAD_ERR_OK)
            ) {
                continue;
            }
            //GRN2-3272
            //Create Key
            $keys = explode('_', $key);
            if (count($keys) === 4) {
                unset($keys[2]);
                unset($keys[3]);
                $key = implode('_', $keys);
            }

            //Skip old attached file if physical file does not exists anymore
            if (is_object($file) && ! $file->exists()) {
                continue;
            }
            //Add Session File
            $id = $session->addFile('attached_session_file_item',
                $file);
            $files_for_view[$key][$id] = grn_make_attached_file_info($file,
                'workflow');
            $files[$key][$id] = null;
        }
    }
    $session->set('attached_file_item', $files);

    return $files_for_view;
}

/**
 * Get Attached Session File
 *
 * @param  string $session_id //Session ID
 *
 * @return array  file_list                      //File Information Array
 */
function __grn_workflow_get_attached_session_files(& $session)
{
    //Get Attached File Information and Attached Session File
    require_once('fw/session_manager.csp');
    $files = $session->get('attached_file_item');
    if ( ! is_array($files)) {
        $files = [];
    }
    $session_files = $session->getFiles('attached_session_file_item');
    if ( ! is_array($session_files)) {
        $session_files = [];
    }

    global $G_INPUT;

    //Maintenance Attached Session File By fids
    if (array_key_exists('fids', $G_INPUT) && is_array($G_INPUT['fids'])) {
        $keep = [];
        foreach ($G_INPUT['fids'] as $id) {
            //Check Attached File Information
            foreach (array_keys($files) as $key) {
                if (array_key_exists($id, $files[$key])) {
                    //Check Attached Session File
                    if (array_key_exists($id, $session_files)) {
                        $keep[$key][$id] =& $session_files[$id];
                        unset($session_files[$id]);
                    } elseif ($files[$key][$id] == $id) {
                        //Keep File Information
                        $keep[$key][$id] = $id;
                    }
                }
            }
        }

        if (count($session_files) > 0) {
            //Delete Other Session File Information
            foreach (array_keys($session_files) as $id) {
                $session->unsetFile('attached_session_file_item', $id);
            }

            $attached_file = [];
            foreach (array_keys($keep) as $key) {
                $attached_file[$key] = [];
                foreach (array_keys($keep[$key]) as $id) {
                    if (is_object($keep[$key][$id])) {
                        $attached_file[$key][$id] = null;
                    } else {
                        $attached_file[$key][$id] = $id;
                    }
                }
            }
            $session->set('attached_file_item', $attached_file);
        }

        $files = $keep;
    } else {
        //Delete All Session Files
        foreach (array_keys($session_files) as $id) {
            $session->unsetFile('attached_session_file_item', $id);
        }
        $session->set('attached_file_item', null);

        $files = [];
    }

    return $files;
}

/**
 * Get Sample Line from CSV File
 *
 * @param  string $charset             //Encoded Type of CSV File
 * @param  string $skip                //Flag to Skip First Line
 * @param  string $file_id             //CSV File ID
 * @param  string $session_module_name //Session Module Name
 *
 * @return array  CSV Sample Lines
 */
function getCSVImportSampleLine($charset, $skip, $file_id, $session_module_name)
{
    // Get Temporary File From Session
    require_once('fw/session_manager.csp');
    $sm = CB_SessionManager::getInstance();
    $session =& $sm->getSession($session_module_name);
    $files = $session->getFiles('import_files');

    // Create CSV Reader
    require_once('fw/csv.csp');
    $csv = new CB_CSVReader($charset, $files[$file_id]->getPath());

    // Create Sample Line to Display

    if ($skip) {
        // Skip First Line
        $line = $csv->readLine();
    }

    $read_lines = 5;
    $lines = [];
    for ($i = 0; $i < $read_lines; $i++) {
        if (($line = $csv->readLine()) !== false) {
            $lines[] = $line;
        } else {
            break;
        }
    }

    // Return Sample Lines
    return $lines;
}

/**
 * Cleanup workflow sessions
 *
 * @param $smarty   GRN_Smarty  smarty object
 * @param $suffix   string      page suffix
 * @param $tmp_key  string      session temporary key
 *
 */
function grn_workflow_cleanup_session($smarty, $suffix, $tmp_key)
{
    if ('' === trim($tmp_key)) {
        return;
    }

    if ('' !== trim($suffix)) {
        $key = '_' . $suffix . $tmp_key;
    } else {
        $key = $tmp_key;
    }
    // つまれているセッションのクリア
    require_once('fw/session_manager.csp');
    $session_manager = CB_SessionManager::getInstance();
    $session_manager->destroy('workflow/send_form' . $key);
    $session_manager->destroy('workflow/command_send_form' . $key);
    $session_manager->destroy('workflow/send_path' . $key);

    // SmartyValidateのデータのクリア
    require_once('SmartyValidate.class.php');
    SmartyValidate::connect($smarty);
    SmartyValidate::unregister_form('workflow/send_form' . $key);
    SmartyValidate::unregister_form('workflow/send_path' . $key);
}
