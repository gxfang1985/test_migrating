<?php
/**
 * Workflow Application Manage Manager Base Class
 *
 * @author  SHIMADA Kunihiko 2006/2
 * @version 1.0
 * @package grn.workflow
 */

/** Workflow Application **/
require_once('workflow/resources.csp');
require_once('grn/application.csp');

/**
 * Workflow Category Manage Manager Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_Category_Manage_Manager_Base
{
    /** Category Manage Table List **/
    var $_table_list
        = [
            GRN_WORKFLOW_ACCESS_TARGET_TYPE_USER         => 'tab_grn_workflow_categorymanageuser',
            GRN_WORKFLOW_ACCESS_TARGET_TYPE_GROUP        => 'tab_grn_workflow_categorymanagegroup',
            GRN_WORKFLOW_ACCESS_TARGET_TYPE_STATIC_ROLE  => 'tab_grn_workflow_categorymanagestaticrole',
            GRN_WORKFLOW_ACCESS_TARGET_TYPE_DYNAMIC_ROLE => 'tab_grn_workflow_categorymanagedynamicrole',
        ];
    /** Category Access Table Class List **/
    var $_table_class_list
        = [
            GRN_WORKFLOW_ACCESS_TARGET_TYPE_USER         => GRN_WORKFLOW_TABLE_CATEGORYMANAGEUSER,
            GRN_WORKFLOW_ACCESS_TARGET_TYPE_GROUP        => GRN_WORKFLOW_TABLE_CATEGORYMANAGEGROUP,
            GRN_WORKFLOW_ACCESS_TARGET_TYPE_STATIC_ROLE  => GRN_WORKFLOW_TABLE_CATEGORYMANAGESTATICROLE,
            GRN_WORKFLOW_ACCESS_TARGET_TYPE_DYNAMIC_ROLE => GRN_WORKFLOW_TABLE_CATEGORYMANAGEDYNAMICROLE,
        ];

    /** Category Manage Cache List **/
    var $_manage_cache_list = [];

    /** Target List **/
    var $_target_type_list
        = [
            GRN_WORKFLOW_ACCESS_TARGET_TYPE_USER,
            GRN_WORKFLOW_ACCESS_TARGET_TYPE_GROUP,
            GRN_WORKFLOW_ACCESS_TARGET_TYPE_STATIC_ROLE,
            GRN_WORKFLOW_ACCESS_TARGET_TYPE_DYNAMIC_ROLE,
        ];

    /** Authority List **/
    var $_authority_list = ['manage' => 0];

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {

    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_Category_Manage_Manager_Base $instance                  //Instance of GRN_Workflow_Catogory_Manage_Manager_Base
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_Category_Manage_Manager_Base();
        }

        return $_instance;
    }

    /**
     * Get Database
     *
     * @return object $table                     //GRN_Workflow_Manage Table Information
     */
    function _getDatabase()
    {
        static $database = null;
        if (is_null($database)) {
            $app_locator = GRN_ApplicationLocator::instance();
            $database = $app_locator->getConnection('workflow');
        }

        return $database;
    }

    /**
     * Get Table Class Name
     *
     * @param  string $target_type //Table Type(user/group/static_role)
     *
     * @return string $table_name                //Table Name
     */
    function _getTableClassName($target_type)
    {
        $table_class_list =& $this->_table_class_list;

        return $table_class_list[$target_type];
    }

    /**
     * Get Table Name
     *
     * @param  string $target_type //Table Type(user/group/static_role)
     *
     * @return string $table_name                //Table Name
     */
    function _getTableName($target_type)
    {
        $table_list =& $this->_table_list;

        return $table_list[$target_type];
    }

    /**
     * Get Column List
     *
     * @param  string $target_type //Table Type(user/group/static_role)
     *
     * @return array  $table                     //GRN_Workflow_Category_Manage Table Information
     */
    function &_getColumnList($target_type, $table_name = "")
    {
        $prefix = "";
        if (strlen($table_name) > 0) {
            $prefix = $table_name . ".";
        }

        $column_name_list = null;
        if (is_null($column_name_list)) {
            require_once('workflow/table.csp');
            $column_list
                = get_class_vars($this->_getTableClassName($target_type));

            foreach (array_keys($column_list) as $column_name) {
                if (strpos($column_name, 'col_') === 0
                    && strpos($column_name, 'col_reserve') !== 0
                ) {
                    $column_name_list[] = $prefix . $column_name;
                }
            }
            $column_name_list[] = $prefix . '_id';
        }

        return $column_name_list;
    }

    /**
     * Get Manage Object
     *
     * @param  string $target_type //Table Type(user/group/static_role)
     * @param  int    $manage_id   //Manage Object ID
     * @param  int    $lock_mode   //Lock Mode
     *
     * @return array  $manage                   //Manage Object
     */
    function &getManage(
        $manage_id,
        $target_type,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Database
        $database = $this->_getDatabase();

        //Get Table Name
        $table_name = $this->_getTableName($target_type);

        //Create Column List
        $column_list = implode(',', $this->_getColumnList($target_type, "a"));

        //Create Query
        if ($target_type == GRN_WORKFLOW_ACCESS_TARGET_TYPE_USER) {
            $query = cb_queryf($database, "SELECT @S FROM @S AS a" .
                                          " INNER JOIN tab_cb_user AS b ON (a.col_target=b._id AND b.col_deleted IS NULL)"
                                          .
                                          " WHERE a._id = '@S'",
                $column_list, $table_name, $manage_id);
        } else {
            $query = cb_queryf($database,
                "SELECT @S FROM @S AS a WHERE a._id = '@S'", $column_list,
                $table_name, $access_id);
        }

        $query = $database->select_format($query, 0, -1, $lock_mode);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Get Manage Information
        $row = $database->fetch_assoc($result);
        $database->free_result($result);

        //Return Manage Object
        return $row;
    }

    /**
     * Get Manage Object By Category ID
     *
     * @param  int    $category_id //Category Object ID
     * @param  int    $target_id   //Target Object ID
     * @param  string $target_type //Table Type(user/group/static_role)
     * @param  int    $lock_mode   //Lock Mode
     *
     * @return array  $manage                    //Manage Object
     */
    function &getManageByCategoryID(
        $category_id,
        $target_id,
        $target_type,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Database
        $database = $this->_getDatabase();

        //Get Table Name
        $table_name = $this->_getTableName($target_type);

        //Create Column List
        $column_list = implode(',', $this->_getColumnList($target_type, "a"));

        //Create Condition
        $condition = [];
        $condition[] = cb_queryf($database,
            sprintf("a.%s = '@S'", GRN_WORKFLOW_COLUMN_OBJECT), $category_id);
        $condition[] = cb_queryf($database,
            sprintf("a.%s = '@S'", GRN_WORKFLOW_COLUMN_TARGET), $target_id);
        $condition_string = implode(' AND ', $condition);

        //Create Query
        if ($target_type == GRN_WORKFLOW_ACCESS_TARGET_TYPE_USER) {
            //$query = sprintf('SELECT %s FROM %s WHERE %s', $column_list, $table_name, $condition_string); 
            $query = sprintf('SELECT %s FROM %s AS a' .
                             ' INNER JOIN tab_cb_user AS b ON (a.col_target=b._id AND b.col_deleted IS NULL)'
                             .
                             ' WHERE %s',
                $column_list, $table_name, $condition_string);
        } else {
            $query = sprintf('SELECT %s FROM %s AS a WHERE %s', $column_list,
                $table_name, $condition_string);
        }

        $query = $database->select_format($query, 0, -1, $lock_mode);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Get Manage Information
        $row = $database->fetch_assoc($result);
        $database->free_result($result);

        //Return Manage Object
        return $row;
    }

    /**
     * Get Manage Object List By Category ID
     *
     * @param  int    $category_id //Category Object ID
     * @param  string $target_type //Table Type(user/group/static_role/dynamic_role)
     * @param  int    $lock_mode   //Lock Mode
     *
     * @return array  $manage                    //Manage Object
     */
    function &getManageListByCategoryID(
        $category_id,
        $target_type,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $manage_list = [];

        //Get Database
        $database = $this->_getDatabase();

        //Get Table Name
        $table_name = $this->_getTableName($target_type);

        //Create Column List
        $column_list = implode(',', $this->_getColumnList($target_type, "a"));

        //Create Condition
        // $condition = sprintf('WHERE (%s = %d)', GRN_WORKFLOW_COLUMN_OBJECT, $category_id);
        $condition = cb_queryf($database,
            sprintf("a.%s = '@S'", GRN_WORKFLOW_COLUMN_OBJECT), $category_id);

        //Create Oeder
        $order = 'ORDER BY a._id';

        //Create Query
        if ($target_type == GRN_WORKFLOW_ACCESS_TARGET_TYPE_USER) {
            $query = sprintf('SELECT %s,b._id AS b_id FROM %s AS a' .
                             ' INNER JOIN tab_cb_user AS b ON (a.col_target=b._id AND b.col_deleted IS NULL)'
                             .
                             ' WHERE %s %s',
                $column_list, $table_name, $condition, $order);
        } else {
            $query = sprintf('SELECT %s FROM %s AS a WHERE %s %s', $column_list,
                $table_name, $condition, $order);
        }
        $query = $database->select_format($query, 0, -1, $lock_mode);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Manage List
        $count = $database->num_rows($result);
        for ($i = 0; $i < $count; $i++) {
            //Get Manage Information
            $row = $database->fetch_assoc($result);
            $manage_list[$row['_id']] = $row;
        }
        $database->free_result($result);

        //Return Manage List
        return $manage_list;
    }

    /**
     * Get Manage List
     *
     * @param  int    $category_id //Category ID
     * @param  string $target_type //Table Type(user/group/static_role/dynamic_role)
     * @param  bool   $refresh     //Refresh Cache
     * @param  int    $lock_mode   //Lock Mode
     *
     * @return object $manage                    //Manage Information Array
     */
    function &getList(
        $category_id,
        $target_type,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $manage_list = [];

        //Check Arguments
        $category_id = is_null($category_id) ? GRN_WORKFLOW_CATEGORY_ROOT_ID
            : $category_id;

        //Get Category List From Cache
        $cached = false;
        if ( ! $refresh) {
            if (array_key_exists($category_id, $this->_manage_cache_list)) {
                if (is_array($this->_manage_cache_list[$category_id])) {
                    $manage_list =& $this->_manage_cache_list[$category_id];
                    $cached = true;
                }
            }
        } else {
            $this->_manage_cache_list[$category_id] = [];
        }

        //Get Category List From Database
        if ( ! $cached || $refresh) {
            //Get Database
            $database =& $this->_getDatabase();

            //Get Table Name
            $table_name = $this->_getTableName($target_type);

            //Create Column List
            $column_list = implode(',',
                $this->_getColumnList($target_type, "a"));

            //Create Condition
            $condition_list = [];
            if ($category_id != 0) {
                //$condition_list[] = sprintf('%s = "%s"', GRN_WORKFLOW_COLUMN_OBJECT, $category_id);
                $condition_list[] = cb_queryf($database,
                    sprintf("a.%s = '@S'", GRN_WORKFLOW_COLUMN_OBJECT),
                    $category_id);
            }
            $condition = implode(' AND ', $condition_list);
            if ($condition) {
                $condition = 'WHERE ' . $condition;
            }

            //Order By Column
            $order_by = 'ORDER BY a._id';

            //Create Query
            if ($target_type == GRN_WORKFLOW_ACCESS_TARGET_TYPE_USER) {
                $query = sprintf('SELECT %s FROM %s AS a' .
                                 ' INNER JOIN tab_cb_user AS b ON (a.col_target=b._id AND b.col_deleted IS NULL) %s %s',
                    $column_list, $table_name, $condition, $order_by);
            } else {
                $query = sprintf('SELECT %s FROM %s AS a %s %s', $column_list,
                    $table_name, $condition, $order_by);
            }
            $query = $database->select_format($query, 0, -1, $lock_mode);

            //Execute Query
            $result = $database->query($query);
            if ($result === false) {
                //Throw Query Error
                $database->throwError(['query' => 'query failed: ' . $query]);
            }

            //Update Manage List
            $count = $database->num_rows($result);
            for ($i = 0; $i < $count; $i++) {
                $row = $database->fetch_assoc($result);
                $this->_manage_cache_list[$category_id][$row['_id']] = $row;
            }
            $database->free_result($result);

            if ($count > 0) {
                $manage_list =& $this->_manage_cache_list[$category_id];
            }
        }

        //Return Manage List
        return $manage_list;
    }

    /**
     * set Manage Cache
     *
     * @param  int   $user_id        //User ID
     * @param  int   $category_id    //Category ID
     * @param  array $authority_list //Authority List
     *
     * @return none
     */
    function setManageCache($user_id, $category_id, $authority_list)
    {
        //Set Manage Cache
        foreach ($authority_list as $authority_id => $authority_value) {
            $this->_manage_cache_list[$user_id][$category_id][$authority_id]
                = $authority_value;
        }

        return;
    }

    /**
     * get Manage Cache
     *
     * @param  int $user_id     //User ID
     * @param  int $category_id //Category ID
     *
     * @return array  $authority_list            //Authority List
     */
    function getManageCache($user_id, $category_id)
    {
        //Check Manage Cache Availavle
        if (array_key_exists($user_id, $this->_manage_cache_list)) {
            if (array_key_exists($category_id,
                $this->_manage_cache_list[$user_id])
            ) {
                //Return Manage Cache
                return $this->_manage_cache_list[$user_id][$category_id];
            }
        }

        return false;
    }

    /**
     * Clear Manage Cache
     *
     * @return none
     */
    function clearManageCache()
    {
        $this->_manage_cache_list = [];

        return false;
    }

    /**
     * Create Target Condition
     *
     * @param  array  $target_list //Target List
     * @param  string $target_type //Target Type(user/group/static_role/dynamic_role)
     *
     * @return string $condition                 //Condition Strring
     */
    function _createTargetCondition(
        $target_list,
        $target_type,
        $table_name = ""
    ) {
        $prefix = "";
        if (strlen($table_name) > 0) {
            $prefix = $table_name . ".";
        }

        //Get Database
        $database = $this->_getDatabase();

        $condition = null;

        //Create Condition From Target List
        switch ($target_type) {
            case GRN_WORKFLOW_ACCESS_TARGET_TYPE_DYNAMIC_ROLE:
                $condition_list = [];
                foreach ($target_list as $target_id => $target_value) {
                    if ($target_value == 1) {
                        //$condition_list[] = sprintf('"%s"', $target_id);
                        $condition_list[] = cb_queryf($database, "'@S'",
                            $target_id);
                    }
                }
                $condition = sprintf('(%s%s IN (%s))', $prefix,
                    GRN_WORKFLOW_COLUMN_TARGET, implode(',', $condition_list));
                //$condition = cb_queryf($database, sprintf('%s IN (@S)', GRN_WORKFLOW_COLUMN_TARGET), implode(',', $condition_list));
                break;
            default:
                if (count($target_list) != 0) {
                    $tids = array_keys($target_list);
                    foreach ($tids as $key => $value) {
                        $tids[$key] = cb_queryf($database, "'@S'", $value);
                    }
                    //$condition = sprintf('(%s IN (%s))', GRN_WORKFLOW_COLUMN_TARGET, implode(',', array_keys($target_list)));
                    //$condition = cb_queryf($database, sprintf('%s IN (@S)', GRN_WORKFLOW_COLUMN_TARGET), implode(',', array_keys($target_list)));
                    $condition = sprintf('%s%s IN (%s)', $prefix,
                        GRN_WORKFLOW_COLUMN_TARGET, implode(',', $tids));
                }
                break;
        }

        return $condition;
    }

    /**
     * Create Category Condition
     *
     * @param  array $category_list //Category List
     *
     * @return string $condition                 //Condition String
     */
    function _createCategoryCondition(& $category_list, $table_name)
    {
        $prefix = "";
        if (strlen($table_name) > 0) {
            $prefix = $table_name . ".";
        }

        //Get Database
        $database =& $this->_getDatabase();

        //Create Condition From Category List
        $condition = null;
        if (count($category_list) != 0) {
            $cids = array_keys($category_list);
            foreach ($cids as $key => $value) {
                $cids[$key] = cb_queryf($database, "'@S'", $value);
            }
            //$condition = sprintf('(col_object IN (%s))', GRN_WORKFLOW_COLUMN_OBJECT, implode(',', array_keys($category_list)));
            //$condition = cb_queryf($database, sprintf('%s IN (@S)', GRN_WORKFLOW_COLUMN_OBJECT), implode(',', array_keys($category_list)));
            $condition = sprintf('%s%s IN (%s)', $prefix,
                GRN_WORKFLOW_COLUMN_OBJECT, implode(',', $cids));
        }

        return $condition;
    }

    /**
     * Evaluate Category List
     *
     * @param  int   $user_id           //User ID
     * @param  array $dynamic_role_list //Dynamic Role List
     * @param  int   $lock_mode         //Lock Mode
     *
     * @return bool   $result                    //result
     */
    function evaluateManage(
        & $user,
        $dynamic_role_list,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get UUM Instance
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');

        //Get Evaluate Target List
        $targets_list = [];
        $user_id
            = $user->getOID();
        $targets_list[GRN_WORKFLOW_ACCESS_TARGET_TYPE_USER]
            = [$user_id => &$user];
        $targets_list[GRN_WORKFLOW_ACCESS_TARGET_TYPE_GROUP]
            = $uum->getUserGroups($user_id);
        $targets_list[GRN_WORKFLOW_ACCESS_TARGET_TYPE_STATIC_ROLE]
            = $uum->getUserRoles($user_id);;
        $targets_list[GRN_WORKFLOW_ACCESS_TARGET_TYPE_DYNAMIC_ROLE]
            = $dynamic_role_list;

        //Get Database
        $database = $this->_getDatabase();

        //Check Manage
        foreach (array_keys($targets_list) as $target_type) {
            //Check Target List Count
            if (count($targets_list[$target_type]) === 0) {
                continue;
            }
            $target_list =& $targets_list[$target_type];

            //Get Table Name
            $table_name = $this->_getTableName($target_type);

            //Create Column List
            $column_list = implode(',',
                $this->_getColumnList($target_type, "a"));

            //Create Condition
            $condition = $this->_createTargetCondition($target_list,
                $target_type, "a");

            //Create Query
            if ($target_type == GRN_WORKFLOW_ACCESS_TARGET_TYPE_USER) {
                $query = sprintf('SELECT %s FROM %s AS a' .
                                 ' INNER JOIN tab_cb_user AS b ON (a.col_target=b._id AND b.col_deleted IS NULL)'
                                 .
                                 ' WHERE %s',
                    $column_list, $table_name, $condition);
            } else {
                $query = sprintf('SELECT %s FROM %s AS a WHERE %s',
                    $column_list, $table_name, $condition);
            }

            $query = $database->select_format($query, 0, -1, $lock_mode);

            //Execute Query
            $result = $database->query($query);
            if ($result === false) {
                //Throw Query Error
                $database->throwError(['query' => 'query failed: ' . $query]);
            }

            $count = $database->num_rows($result);
            if ($count > 0) {
                return true;
            }
        }

        return false;
    }

    /**
     * Evaluate Category List
     *
     * @param  string $category_list     //Category List
     * @param  int    $user_id           //User ID
     * @param  array  $dynamic_role_list //Dynamic Role List
     * @param  int    $lock_mode         //Lock Mode
     *
     * @return array  $manage_list               //Evaluate Result Manage List
     */
    function evaluateCategoryList(
        $category_list,
        & $user,
        $dynamic_role_list,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get UUM Instance
        global $G_container_base;
        $uum =& $G_container_base->getInstance('uum');

        //Get Evaluate Target List
        $targets_list = [];
        $user_id
            = $user->getOID();
        $targets_list[GRN_WORKFLOW_ACCESS_TARGET_TYPE_USER]
            = [$user_id => &$user];
        $targets_list[GRN_WORKFLOW_ACCESS_TARGET_TYPE_GROUP]
            = $uum->getUserGroups($user_id);
        $targets_list[GRN_WORKFLOW_ACCESS_TARGET_TYPE_STATIC_ROLE]
            = $uum->getUserRoles($user_id);;
        $targets_list[GRN_WORKFLOW_ACCESS_TARGET_TYPE_DYNAMIC_ROLE]
            = $dynamic_role_list;

        //Initialize Manage Cache
        $manage_list = [];
        foreach (array_keys($category_list) as $category_id) {
            $this->setManageCache($user_id, $category_id,
                $this->_authority_list);
            $manage_list[$user_id][$category_id] = $this->_authority_list;
        }

        //Get Database
        $database =& $this->_getDatabase();

        //Check Manage
        foreach (array_keys($targets_list) as $target_type) {
            //Check Target List Count
            if (count($targets_list[$target_type]) === 0) {
                continue;
            }
            $target_list =& $targets_list[$target_type];

            //Get Table Name
            $table_name = $this->_getTableName($target_type);

            //Create Column List
            $column_list = implode(',',
                $this->_getColumnList($target_type, "a"));

            //Create Condition
            $condition = null;
            $target_condition = $this->_createTargetCondition($target_list,
                $target_type, "a");
            $category_condition
                = $this->_createCategoryCondition($category_list,
                "a");
            $condition = sprintf('WHERE (%s AND %s)', $target_condition,
                $category_condition);

            //Create Query
            if ($target_type == GRN_WORKFLOW_ACCESS_TARGET_TYPE_USER) {
                $query = sprintf('SELECT %s FROM %s AS a' .
                                 ' INNER JOIN tab_cb_user AS b ON (a.col_target=b._id AND b.col_deleted IS NULL) %s',
                    $column_list, $table_name, $condition);
            } else {
                $query = sprintf('SELECT %s FROM %s AS a %s', $column_list,
                    $table_name, $condition);
            }
            $query = $database->select_format($query, 0, -1, $lock_mode);

            //Execute Query
            $result = $database->query($query);
            if ($result === false) {
                //Throw Query Error
                $database->throwError(['query' => 'query failed: ' . $query]);
            }

            $count = $database->num_rows($result);
            for ($i = 0; $i < $count; $i++) {
                $row = $database->fetch_assoc($result);
                //Get Category Object
                $category_id = $row[GRN_WORKFLOW_COLUMN_OBJECT];
                $category =& $category_list[$category_id];

                //Set Manage Cache
                foreach (array_keys($this->_authority_list) as $authority_id) {
                    //Get Authority Value
                    $authority_value = $row['col_authority_' . $authority_id];
                    $prev_authority_value
                        = $manage_list[$user_id][$category_id][$authority_id];
                    $manage_list[$user_id][$category_id][$authority_id]
                        = $authority_value;
                }
                $this->setManageCache($user_id, $category_id,
                    $manage_list[$user_id][$category_id]);
            }
        }

        //Return Manage List
        return $manage_list;
    }
}


