<?php

/**
 * 改変アクセス権
 *
 * @author  Hideyasu YOSHIDA 2006/01
 * @version 1.0
 * @package grn.workflow
 */

require_once('workflow/model.csp');

/**
 * 改変アクセス権クラス
 */
class GRN_Workflow_ChangeAccess extends GRN_Workflow_Model
{
    /**
     * シングルトンの取得
     *
     * @return GRN_Workflow_ChangeAccess
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_ChangeAccess();
        }

        return $_instance;
    }

    /**
     * コンストラクタ
     */
    function __construct()
    {
        $this->_columns_info = [
            'necessary' => [
                'col_item',
                'col_path_step',
            ]
        ];

        $this->_aliases = [
            'tab_grn_workflow_accesschangeform' => 'a',
            'tab_grn_workflow_item'             => 'b'
        ];

        parent::__construct('tab_grn_workflow_accesschangeform');
    }

    /**
     * 改変アクセス権を取得
     *
     * @param   int   $access_id 改変アクセス権ID
     * @param   array $columns   プロパティを取得するカラム名一覧
     * @param   int   $lock      ロックの種類
     *
     * @return  mixed   プロパティ一覧（カラム名とプロパティ）
     *                  それ以外は失敗
     */
    function &get(
        $change_access_id,
        $columns = null,
        $lock = CB_DATABASE_NO_LOCK
    ) {
        cb_trim_check($change_access_id, E_GRN_WRKF_INVALID_CHANGE_ACCESS_ID);

        $condition = cb_queryf($this->_dbconn, "_id='@S'", $change_access_id);
        $rows = $this->_selectRecords($columns, '_id', 0, 1, null,
            $condition, $lock);

        return $rows[$change_access_id];
    }

    /**
     * 改変アクセス権一覧を取得
     *
     * @param   mixed $aids         （特定の）改変アクセス権を取得する場合は改変アクセス権IDの配列
     *                              それ以外はすべて取得
     * @param   array $columns      プロパティを取得するカラム名一覧
     * @param   int   $offset       一覧の先頭オフセット
     * @param   int   $limit        一覧件数
     * @param   int   $lock         ロックの種類
     *
     * @return  array   レコード一覧（経路IDとレコード）
     */
    function &getList(
        $caids = null,
        $columns = null,
        $offset = 0,
        $limit = -1,
        $lock = CB_DATABASE_NO_LOCK
    ) {
        $condition = null;
        if (is_array($caids) && 0 < count($caids)) {
            foreach ($caids as $key => $value) {
                $caids[$key] = cb_queryf($this->_dbconn, "'@S'", $value);
            }
            $caids = implode(',', $caids);
            $condition = "(_id IN (${caids}))";
        }

        $ret = $this->_selectRecords($columns, '_id', $offset, $limit, '_id',
            $condition, $lock);

        return $ret;
    }

    /**
     * 改変アクセス権一覧を取得
     *
     * @param   int    $form_id 申請フォームID
     * @param   array  $columns プロパティを取得するカラム名一覧
     * @param   string $key     改変アクセス権一覧のキー
     * @param   int    $offset  一覧の先頭オフセット
     * @param   int    $limit   一覧件数
     * @param   int    $lock    ロックの種類
     *
     * @return  array   レコード一覧（経路IDとレコード）
     */
    function getListByFormId(
        $form_id,
        $columns,
        $key = '_id',
        $offset = 0,
        $limit = -1,
        $lock = CB_DATABASE_NO_LOCK
    ) {
        cb_trim_check($form_id, E_GRN_WRKF_FORM_INVALID_ID);
        if ( ! is_array($columns) || 0 == count($columns)) {
            cb_throw_error(E_GRN_WRKF_EMPTY_COLUMNS);
        }

        $columns = $this->_formatColumns($columns, $this->_aliases);
        $from
            = "tab_grn_workflow_accesschangeform AS a LEFT JOIN tab_grn_workflow_item AS b ON a.col_item=b._id";
        $condition = cb_queryf($this->_dbconn, "b.col_form='@S'", $form_id);
        $order_by = 'b.col_list_index,b._id';
        $query
            = "SELECT {$columns} FROM {$from} WHERE ({$condition}) ORDER BY {$order_by}";
        $query = $this->_dbconn->select_format($query, $offset, $limit,
            $lock);
        $result = $this->_dbconn->query($query);
        if (false === $result) {
            $this->_dbconn->throwError(['query' => "failed query on SELECT: {$query}"]);
        }

        $rows = [];
        while ($row = $this->_dbconn->fetch_assoc($result)) {
            $rows[$row[$key]] = $row;
        }

        return $rows;
    }

    /**
     * 改変アクセス権一覧を取得
     *
     * @param   int    $item_id 項目ID
     * @param   array  $columns プロパティを取得するカラム名一覧
     * @param   string $key     改変アクセス権一覧のキー
     * @param   int    $offset  一覧の先頭オフセット
     * @param   int    $limit   一覧件数
     * @param   int    $lock    ロックの種類
     *
     * @return  array   レコード一覧（経路IDとレコード）
     */
    function getListByItemId(
        $item_id,
        $columns = null,
        $key = '_id',
        $offset = 0,
        $limit = -1,
        $lock = CB_DATABASE_NO_LOCK
    ) {
        cb_trim_check($item_id, E_GRN_WRKF_ITEM_INVALID_ID);

        $condition = cb_queryf($this->_dbconn, "col_item='@S'", $item_id);

        return $this->_selectRecords($columns, $key, $offset, $limit, null,
            $condition, $lock);
    }

    /**
     * 改変アクセス権を変更
     *
     * @param   int   $change_access_id 改変アクセス権ID
     * @param   array $properties       プロパティ一覧（カラム名とプロパティ）
     */
    function modify($change_access_id, $properties)
    {
        cb_trim_check($change_access_id, E_GRN_WRKF_INVALID_CHANGE_ACCESS_ID);
        if ( ! is_array($properties) || 0 == count($properties)) {
            cb_throw_error(E_GRN_WRKF_EMPTY_PROPERTIES);
        }

        $condition = cb_queryf($this->_dbconn, "_id='@S'", $change_access_id);
        $this->_updateRecords($condition, $properties);
    }

    /**
     * 改変アクセス権を削除
     *
     * @param   int $change_access_id 改変アクセス権ID
     */
    function remove($change_access_id)
    {
        cb_trim_check($change_access_id, E_GRN_WRKF_INVALID_CHANGE_ACCESS_ID);

        $condition = cb_queryf($this->_dbconn, "_id='@S'", $change_access_id);
        $this->_deleteRecords($condition);
    }

    /**
     * 改変アクセス権を一括削除
     *
     * @param   mixed $caids    （特定の）改変アクセス権を一括削除する場合は改変アクセス権IDの配列
     *                          それ以外はすべて削除
     */
    function removeList($caids = null)
    {
        $condition = null;
        if (is_array($caids) && 0 < count($caids)) {
            foreach ($caids as $key => $value) {
                $caids[$key] = cb_queryf($this->_dbconn, "'@S'", $value);
            }
            $caids = implode(',', $caids);
            $condition = "_id IN (${caids})";
        }

        $this->_deleteRecords($condition);
    }
}


