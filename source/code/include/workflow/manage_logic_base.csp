<?php
/**
 * Workflow Application Manage Logic Base Class
 *
 * @author  SHIMADA Kunihiko 2006/2
 * @version 1.0
 * @package grn.workflow
 */

/** Workflow Application **/
require_once('workflow/table.csp');
require_once('workflow/resources.csp');

/**
 * Workflow Category Manage Manager Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_Category_Manage_Logic_Base
{
    //Category Manager Instance
    var $_category_logic_base = null;

    //Category Manage Manager Instance
    var $_category_manage_manager_base = null;

    //Target Type List
    var $_target_type_list
        = [
            GRN_WORKFLOW_ACCESS_TARGET_TYPE_USER,
            GRN_WORKFLOW_ACCESS_TARGET_TYPE_GROUP,
            GRN_WORKFLOW_ACCESS_TARGET_TYPE_STATIC_ROLE,
            GRN_WORKFLOW_ACCESS_TARGET_TYPE_DYNAMIC_ROLE,
        ];

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {

    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_Category_Manage_Logic_Base $instance                  //Instance of GRN_Workflow_Catogory_Manage_Logic_Base
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_Category_Manage_Logic_Base();
        }

        return $_instance;
    }

    /**
     * Get Category Manage Manager Base
     *
     * @return GRN_Workflow_Category_Manage_Manager_Base $category_manage_manager_base   //Category Manage Manager Base
     */
    function _getCategoryManageManagerBase()
    {
        if (is_null($this->_category_manage_manager_base)) {
            require_once('workflow/manage_manager_base.csp');
            $this->_category_manage_manager_base
                = GRN_Workflow_Category_Manage_Manager_Base::getInstance();
        }

        return $this->_category_manage_manager_base;
    }

    /**
     * Get Category Logic Base
     *
     * @return object $category_logic_base            //Category Logic Base
     */
    function _getCategoryLogicBase()
    {
        if (is_null($this->_category_logic_base)) {
            require_once('workflow/category_logic_base.csp');
            $this->_category_logic_base
                = GRN_Workflow_Category_Logic_base::getInstance();
        }

        return $this->_category_logic_base;
    }

    /**
     * Get Manage Object
     *
     * @param  int    $manage_id   //Manage Object ID
     * @param  string $target_type //Table Type(user/group/static_role)
     * @param  int    $lock_mode   //Lock Mode
     *
     * @return object $manage                    //Manage Object
     */
    function &getManage(
        $manage_id,
        $target_type,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Check Argument
        require_once('workflow/error_code.csp');
        require_once('fw/string_util.csp');
        cb_trim_check($manage_id,
            E_GRN_WRKF_MANAGE_INVALID_ID);      //Manage ID
        cb_trim_check($target_type,
            E_GRN_WRKF_MANAGE_INVALID_TARGET);  //Manage Target

        //Check Target Type
        if ( ! in_array($target_type, $this->_target_type_list)) {
            //Invalid Target Type
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_MANAGE_INVALID_TARGET);
        }

        //Get Manage Object
        $manager = $this->_getCategoryManageManagerBase();
        $manage =& $manager->getManage($manage_id, $target_type, $lock_mode);
        if ( ! $manage) {
            $ret = false;

            return $ret;
        }

        //Return Manage Object
        return $manage;
    }

    /**
     * Get Manage Object By Category ID
     *
     * @param  int    $category_id //Category Object ID
     * @param  int    $target_id   //Target Object ID
     * @param  string $target_type //Table Type(user/group/static_role)
     * @param  int    $lock_mode   //Lock Mode
     *
     * @return object $manage                    //Manage Object
     */
    function &getManageByCategoryID(
        $category_id,
        $target_id,
        $target_type,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Check Argument
        require_once('workflow/error_code.csp');
        require_once('fw/string_util.csp');
        cb_trim_check($category_id,
            E_GRN_WRKF_CATEGORY_INVALID_ID);    //Category ID
        cb_trim_check($target_id,
            E_GRN_WRKF_MANAGE_INVALID_TARGET);  //Manage Target ID
        cb_trim_check($target_type,
            E_GRN_WRKF_MANAGE_INVALID_TARGET);  //Manage Target

        //Check Target Type
        if ( ! in_array($target_type, $this->_target_type_list)) {
            //Invalid Target Type
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_MANAGE_INVALID_TARGET);
        }

        //Get Manage Object
        $manager =& $this->_getCategoryManageManagerBase();
        $manage =& $manager->getManageByCategoryID($category_id, $target_id,
            $target_type, $lock_mode);
        if ( ! $manage) {
            $ret = false;

            return $ret;
        }

        //Return Manage Object
        return $manage;
    }

    /**
     * Get Manage List
     *
     * @param  int    $category_id //Category ID
     * @param  string $target_type //Table Type(user/group/static_role/dynamic_role)
     * @param  bool   $refresh     //Refresh Flag
     * @param  int    $lock_mode   //Lock Mode
     *
     * @return array  $category_list             //Category List
     */
    function &getList(
        $category_id,
        $target_type,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Manage List
        $manager =& $this->_getCategoryManageManagerBase();
        $manage_list =& $manager->getList($category_id, $target_type, $refresh,
            $lock_mode);

        //Return Manage List
        return $manage_list;
    }

    /**
     * Get Manage Object List By Category ID
     *
     * @param  int    $category_id //Category Object ID
     * @param  string $target_type //Table Type(user/group/static_role/dynamic_role)
     * @param  int    $lock_mode   //Lock Mode
     *
     * @return object $manage                    //Manage Object
     */
    function &getManageListByCategoryID(
        $category_id,
        $target_type,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Check Argument
        require_once('workflow/error_code.csp');
        require_once('fw/string_util.csp');
        cb_trim_check($category_id,
            E_GRN_WRKF_CATEGORY_INVALID_ID);    //Category ID
        cb_trim_check($target_type,
            E_GRN_WRKF_MANAGE_INVALID_TARGET);  //Manage Target

        $manage_list = [];

        //Get Manage Object
        $manager =& $this->_getCategoryManageManagerBase();
        $manage_list = $manager->getManageListByCategoryID($category_id,
            $target_type, $lock_mode);
        if ( ! $manage_list) {
            $manage_list = [];

            return $manage_list;
        }

        //Return Manage List
        return $manage_list;
    }

    /**
     * Evaluate Category List
     *
     * @param  int   $user_id           //User ID
     * @param  array $dynamic_role_list //Dynamic Role List
     * @param  int   $lock_mode         //Lock Mode
     *
     * @return array  $manage_list               //Evaluate Result Manage List
     */
    function evaluateManage(
        & $user,
        $dynamic_role_list,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get UUM Instance
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');

        //Get Login User
        $login_user = $uum->getLoginUser();
        $login_user_id = $login_user->getOID();

        //Get Dynamic Role
        $dynamic_role_list = $uum->listGrantedRoles();

        //Get Manage Manager
        $manager = $this->_getCategoryManageManagerBase();
        $result = $manager->evaluateManage($login_user, $dynamic_role_list,
            $lock_mode);

        return $result;
    }

    /**
     * Evaluate Parent Category List
     * 運用管理権限のあるカテゴリに対して親カテゴリの運用管理権限すべて評価する
     *
     * @param  array $category_list //Category List
     * @param  id    $user_id       //User ID (null=login user)
     * @param  int   $lock_mode     //Lock Mode
     *
     * @return array  $evaluate_category_id_list //Evaluate Category List : array(id1=>TRUE, id2=>FALSE, id3=>FALSE, ･･･ )
     */
    function evaluateParentCategoryList(
        & $category_list,
        $user = null,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get UUM Instance
        global $G_container_base;
        $uum =& $G_container_base->getInstance('uum');

        if (is_null($user)) {
            //Get Login User
            $user =& $uum->getLoginUser();
        }

        //Get Dynamic Role
        $dynamic_role_list = $uum->listGrantedRoles();

        // Get Category Logic
        $category_logic =& $this->_getCategoryLogicBase();
        // Get Manage Manager
        $manager =& $this->_getCategoryManageManagerBase();

        // Grant Manage ID Cache
        $grant_manage_id_list = [];
        // Evalute Category ID 
        $evaluate_category_id_list = [];
        foreach ($category_list as $id => $authority) {
            // 処理中断フラグ
            $stop_flag = false;

            $manage = @ $authority["manage"];
            if (is_null($manage) || strlen($manage) <= 0) {
                $manage = @ $authority["col_authority_manage"];
            }

            // 運用管理権限がない場合、親カテゴリ（全階層）にも運用管理権限が設定されていないかチェックする
            if (intval($manage) == 0) {
                $parent_category_id_list = $category_logic->getTreeList($id,
                    true, false, $lock_mode);
                if ( ! $parent_category_id_list) {
                    // 親カテゴリなし、次のIDへ
                    continue;
                }

                foreach ($grant_manage_id_list as $grant_id) {
                    if (array_key_exists($grant_id,
                        array_keys($parent_category_id_list))
                    ) {
                        $evaluate_category_id_list[$id] = true;
                        $stop_flag = true;
                        break;
                    }
                }
                if ($stop_flag) {
                    // 親カテゴリに運用管理権限ありIDリスト(メソッド内キャッシュ)内のIDにヒット、次のIDへ
                    continue;
                }

                // 親カテゴリの運用管理権限を評価
                $evaluate_parent_category_list
                    = $manager->evaluateCategoryList($parent_category_id_list,
                    $user, $dynamic_role_list, $lock_mode);
                foreach (
                    $evaluate_parent_category_list[$user->getOID()] as $a =>
                    $authority
                ) {
                    if (intval($authority["manage"]) == 1) {
                        // 親カテゴリに運用管理権限ありのカテゴリ発見
                        $evaluate_category_id_list[$id] = true;
                        $grant_manage_id_list[] = $id;
                        $stop_flag = true;
                        break;
                    }
                }
                if ( ! $stop_flag) {
                    // 親カテゴリ全てに運用管理権限なし
                    $evaluate_category_id_list[$id] = false;
                }
            } else {
                // もともと運用管理権限あり
                $evaluate_category_id_list[$id] = true;
            }
        }

        return $evaluate_category_id_list;
    }

    /**
     * Evaluate Category List
     *
     * @param  array $category_id_list //Category ID List : array(id1, id2, id3, ･･･)
     * @param  id    $user_id          //User ID
     * @param  int   $lock_mode        //Lock Mode
     *
     * @return array  $manage_list               //Evaluate Result Manage List : array(id1=>TRUE, id2=>FALSE, id3=>FALSE, ･･･ )
     */
    function evaluateCategoryList(
        $category_id_list,
        $user_id,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $evaluate_category_id_list = [];

        //Check Arguments
        if (count($category_id_list) === 0) {
            return $evaluate_category_id_list;
        }

        //Get UUM Instance
        global $G_container_base;
        $uum =& $G_container_base->getInstance('uum');

        //Get User
        $user =& $uum->getUser($user_id);

        //Get Dynamic Role
        $dynamic_role_list = $uum->listGrantedRoles();

        //Get Manage Manager
        $manager =& $this->_getCategoryManageManagerBase();

        foreach ($category_id_list as $id) {
            $evaluate_category_id_list[$id] = false;
        }

        $evaluate_category_list
            = $manager->evaluateCategoryList($evaluate_category_id_list, $user,
            $dynamic_role_list, $lock_mode);
        $evaluate_category_id_list
            = $this->evaluateParentCategoryList($evaluate_category_list[$user_id],
            $user, $dynamic_role_list, $lock_mode);

        return $evaluate_category_id_list;
    }

    /**
     * Evaluate Category List
     *
     * @param  int $category_id //Category ID
     * @param  int $lock_mode   //Lock Mode
     *
     * @return array  $manage_list               //Evaluate Result Manage List
     */
    function evaluateCategory(
        $category_id,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $user_id = false
    ) {
        //Get UUM Instance
        global $G_container_base;
        $uum =& $G_container_base->getInstance('uum');

        //Get Login User
        if ($user_id === false) {
            $login_user =& $uum->getLoginUser();
            $login_user_id = $login_user->getOID();
        } else {
            //Get User
            $login_user =& $uum->getUser($user_id);
            $login_user_id = $user_id;
        }

        //Get Dynamic Role
        $dynamic_role_list = $uum->listGrantedRoles();

        //Get Category Tree
        $category_logic_base =& $this->_getCategoryLogicBase();
        $category_tree_list = $category_logic_base->getTreeList($category_id,
            true, true, $lock_mode);
        if ( ! is_array($category_tree_list)) {
            return false;
        }

        //Get Manage Manager
        $manager =& $this->_getCategoryManageManagerBase();

        //Check Manage Cache
        $user_manage_list = [];
        $evaluate_category_list = [];

        foreach (array_keys($category_tree_list) as $category_tree_id) {
            $manage = $manager->getManageCache($login_user_id,
                $category_tree_id);

            if ( ! $manage) {
                $evaluate_category_list[$category_tree_id]
                    =& $category_tree_list[$category_tree_id];
            } else {
                $user_manage_list[$category_tree_id] = $manage;
            }
        }

        //Evaluate No Cached Category List
        if (count($evaluate_category_list) !== 0) {
            $evaluate_manage_list
                = $manager->evaluateCategoryList($evaluate_category_list,
                $login_user, $dynamic_role_list, $lock_mode);
            $user_manage_list = $user_manage_list
                                + $evaluate_manage_list[$login_user_id];
        }

        //Check Manage Right
        $category_id_list = [$category_id => $user_manage_list[$category_id]];
        $evaluate_category_id
            = $this->evaluateParentCategoryList($category_id_list,
            $login_user, $dynamic_role_list, $lock_mode);

        return $evaluate_category_id[$category_id];
    }

    /**
     * Evaluate Form
     *
     * @param  int $form_id   //Form ID
     * @param  int $lock_mode //Lock Mode
     *
     * @return array  $manage_list               //Evaluate Result Manage List
     */
    function evaluateForm(
        $form_id,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $user_id = false
    ) {
        //Get Form
        require_once('workflow/form_logic_base.csp');
        $form_logic_base = GRN_Workflow_Form_Logic_Base::getInstance();
        $form =& $form_logic_base->get($form_id);

        return $this->evaluateCategory($form[GRN_WORKFLOW_COLUMN_CATEGORY],
            $lock_mode, $user_id);
    }
}


