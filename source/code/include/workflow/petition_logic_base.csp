<?php
/**
 * Workflow Application Petition Base Class
 *
 * @author  Yuichi, Nakamura 2006/01
 * @version 1.0
 * @package grn.workflow
 */

/** Workflow Application **/
require_once('workflow/resources.csp');

/**
 * Petition Logic Base Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_Petition_Logic_Base
{
    //Petition Manager Base Instance
    var $_petition_manager_base = null;

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {

    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_Petition_Logic_Base $instance                  //Instance of GRN_Workflow_Petition_Logic_Base
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_Petition_Logic_Base();
        }

        return $_instance;
    }

    /**
     * Get Petition Manager Base
     *
     * @return GRN_Workflow_Petition_Manager_Base $petition_manager_base     //Petition Manager Base
     */
    function _getPetitionManagerBase()
    {
        if (is_null($this->_petition_manager_base)) {
            require_once('workflow/petition_manager_base.csp');
            $this->_petition_manager_base
                = GRN_Workflow_Petition_Manager_Base::getInstance();
        }

        return $this->_petition_manager_base;
    }

    /**
     * Get Column List
     *
     * @param  string $class_name //Class Name
     *
     * @return array  $column_name_list          //Column Name List
     */
    function getColumnList($class_name = null)
    {
        //Get Column List
        $petition_manager_base = $this->_getPetitionManagerBase();
        $column_name_list
            =& $petition_manager_base->_getColumnlist($class_name);

        //Return Column Name List
        return $column_name_list;
    }

    /**
     * Get Petition
     *
     * @param  int   $petition_id //Petition ID
     * @param  int   $form_id     //Form ID
     * @param  array $column_list //Column List
     * @param  mixed $option      //Option (array('list'=>array('offset'=>'', 'limit'=>''), 'sort'=>array('column'=>'', 'order'=>''), 'condition'=>array('column'=>'', 'value'=>'', 'operator'=>''))
     * @param  bool  $refresh     //Refresh Cache
     * @param  int   $lock_mode   //Lock Mode
     *
     * @return array  $petition                  //Petition Information Array
     */
    function &get(
        $petition_id,
        $form_id = null,
        $column_list = [],
        $option = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($petition_id,
            E_GRN_WRKF_PETITION_INVALID_ID);    //Petition ID

        //Get Petition 
        $petition_manager_base = $this->_getPetitionManagerBase();
        $petition =& $petition_manager_base->get($petition_id,
            $form_id, $column_list, $option, $refresh, $lock_mode);
        if ( ! $petition) {
            //Petition Not Found
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_PETITION_NOT_FOUND);
        }

        //Return Petition
        return $petition;
    }

    /**
     * Get Petition(with Extra Inpetitionation)
     *
     * @param  int   $petition_id //Petition ID
     * @param  int   $form_id     //Form ID
     * @param  array $column_list //Column List
     * @param  mixed $option      //Option (array('list'=>array('offset'=>'', 'limit'=>''), 'sort'=>array('column'=>'', 'order'=>''), 'condition'=>array('column'=>'', 'value'=>'', 'operator'=>''))
     * @param  bool  $refresh     //Refresh Cache
     * @param  int   $lock_mode   //Lock Mode
     *
     * @return array  $petition                  //Petition Inpetitionation Array
     */
    function &getEx(
        $petition_id,
        $form_id = null,
        $column_list = [],
        $option = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($petition_id,
            E_GRN_WRKF_PETITION_INVALID_ID);    //Petition ID

        //Get Petition 
        $petition_manager_base =& $this->_getPetitionManagerBase();
        $petition =& $petition_manager_base->getEx($petition_id,
            $form_id, $column_list, $option, $refresh, $lock_mode);
        if ( ! $petition) {
            //Petition Not Found
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_PETITION_NOT_FOUND);
        }

        //Return Petition
        return $petition;
    }

    /**
     * Get Petition Direct
     *
     * @param  int   $petition_id //Petition ID
     * @param  array $column_list //Column List
     * @param  mixed $option      //Option (array('condition'=>array('column'=>'', 'value'=>'', 'operator'=>''))
     * @param  int   $lock_mode   //Lock Mode
     *
     * @return array  $petition                  //Petition Information Array
     */
    function getDirect(
        $petition_id,
        $column_list = [],
        $option = [],
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($petition_id,
            E_GRN_WRKF_PETITION_INVALID_ID);    //Petition ID

        //Get Petition 
        $petition_manager_base = $this->_getPetitionManagerBase();
        $petition = $petition_manager_base->getDirect($petition_id,
            $column_list, $option, $lock_mode);
        if ( ! $petition) {
            //Petition Not Found
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_PETITION_NOT_FOUND);
        }

        //Return Petition
        return $petition;
    }

    /**
     * Get Petition List
     *
     * @param  int   $form_id     //Form ID
     * @param  array $column_list //Column List
     * @param  mixed $option      //Option (array('list'=>array('offset'=>'', 'limit'=>''), 'sort'=>array('column'=>'', 'order'=>''), 'condition'=>array('column'=>'', 'value'=>'', 'operator'=>''))
     * @param  bool  $refresh     //Refresh Cache
     * @param  int   $lock_mode   //Lock Mode
     *
     * @return array  $petition_list             //Petition Information List
     */
    function &getList(
        $form_id = null,
        $column_list = [],
        $option = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Petition List
        $petition_manager_base = $this->_getPetitionManagerBase();
        $petition_list =& $petition_manager_base->getList($form_id,
            $column_list, $option, $refresh, $lock_mode);

        //Return Petition List
        return $petition_list;
    }

    /**
     * Get Petition List(with Extra Information)
     *
     * @param  int   $form_id     //Form ID
     * @param  array $column_list //Column List
     * @param  mixed $option      //Option (array('list'=>array('offset'=>'', 'limit'=>''), 'sort'=>array('column'=>'', 'order'=>''), 'condition'=>array('column'=>'', 'value'=>'', 'operator'=>''))
     * @param  bool  $refresh     //Refresh Cache
     * @param  int   $lock_mode   //Lock Mode
     *
     * @return array  $petition_list             //Petition Information List
     */
    function &getListEx(
        $form_id = null,
        $column_list = [],
        $option = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Petition List
        $petition_manager_base =& $this->_getPetitionManagerBase();
        $petition_list =& $petition_manager_base->getListEx($form_id,
            $column_list, $option, $refresh, $lock_mode);

        //Return Petition List
        return $petition_list;
    }

    /**
     * Get Petition List for csv export(with Extra Information)
     *
     * @param  int   $form_id     //Form ID
     * @param  array $column_list //Column List
     * @param  mixed $option      //Option (array('list'=>array('offset'=>'', 'limit'=>''), 'sort'=>array('column'=>'', 'order'=>''), 'condition'=>array('column'=>'', 'value'=>'', 'operator'=>''))
     * @param  int   $lock_mode   //Lock Mode
     *
     * @return array  $petition_list             //Petition Information List
     */
    function getListExForExport(
        $form_id = null,
        $column_list = [],
        $option = [],
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Petition List
        $petition_manager_base = $this->_getPetitionManagerBase();
        $petition_list
            = $petition_manager_base->getListExForExport($form_id,
            $column_list, $option, $lock_mode);

        //Return Petition List
        return $petition_list;
    }

    /**
     * Get Petition ID List(with Extra Information)
     *
     * @param  int   $form_id   //Form ID
     * @param  mixed $option    //Option (array('list'=>array('offset'=>'', 'limit'=>''), 'sort'=>array('column'=>'', 'order'=>''), 'condition'=>array('column'=>'', 'value'=>'', 'operator'=>''))
     * @param  bool  $refresh   //Refresh Cache
     * @param  int   $lock_mode //Lock Mode
     *
     * @return array  $petition_list             //Petition Information List
     */
    function getIdListEx(
        $form_id = null,
        $option = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Petition List
        $petition_manager_base = $this->_getPetitionManagerBase();
        $petition_id_list = $petition_manager_base->getIdListEx($form_id,
            $option, $refresh, $lock_mode);

        //Return Petition ID List
        return $petition_id_list;
    }

    /**
     * Get Petition Count
     *
     * @param  int   $form_id   //Form ID
     * @param  mixed $option    //Option (array('list'=>array('offset'=>'', 'limit'=>''), 'sort'=>array('column'=>'', 'order'=>''), 'condition'=>array('column'=>'', 'value'=>'', 'operator'=>''))
     * @param  bool  $refresh   //Refresh Cache
     * @param  int   $lock_mode //Lock Mode
     *
     * @return int    $petition_count            //Petition Count
     */
    function getCount(
        $form_id = null,
        $option = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Petition List
        $petition_manager_base = $this->_getPetitionManagerBase();
        $petition_count = $petition_manager_base->getCount($form_id,
            $option, $refresh, $lock_mode);

        //Return Petition Count
        return $petition_count;
    }

    /**
     * Get Petition Count(with Extra Information)
     *
     * @param  int   $form_id   //Form ID
     * @param  mixed $option    //Option (array('list'=>array('offset'=>'', 'limit'=>''), 'sort'=>array('column'=>'', 'order'=>''), 'condition'=>array('column'=>'', 'value'=>'', 'operator'=>''))
     * @param  bool  $refresh   //Refresh Cache
     * @param  int   $lock_mode //Lock Mode
     *
     * @return int    $petition_count            //Petition Count
     */
    function getCountEx(
        $form_id = null,
        $option = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Petition List
        $petition_manager_base =& $this->_getPetitionManagerBase();
        $petition_count = $petition_manager_base->getCountEx($form_id,
            $option, $refresh, $lock_mode);

        //Return Petition Count
        return $petition_count;
    }
}
