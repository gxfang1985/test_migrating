<?php
/**
 * Workflow Application Form Base Class
 *
 * @author  Yuichi, Nakamura 2005/12
 * @version 1.0
 * @package grn.workflow
 */

/** Workflow Application **/
require_once('workflow/resources.csp');
require_once('grn/application.csp');

/**
 * Form Manager Base Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_Form_Manager_Base
{
    /** Table Name **/
    var $_table_name = null;

    /** Form List **/
    var $_list = [];

    /** Form List(with Extra Information) **/
    var $_listEx = [];

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
        $this->_table_name = 'tab_grn_workflow_form';
    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_Form_Manager_Base $instance                  //Instance of GRN_Workflow_Form_Manager_Base
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_Form_Manager_Base();
        }

        return $_instance;
    }

    /**
     * Get Database
     *
     * @return object $table                     //GRN_Workflow_Form Table Information
     */
    function _getDatabase()
    {
        static $database = null;
        if (is_null($database)) {
            $app_locator = GRN_ApplicationLocator::instance();
            $database = $app_locator->getConnection('workflow');
        }

        return $database;
    }

    /**
     * Get Table Name
     *
     * @params  string $class_name
     *
     * @return string  $table_name
     */
    function _getTableName($class_name)
    {
        $table_name = sprintf('tab_%s', strtolower($class_name));

        return $table_name;
    }

    /**
     * Get Column List
     *
     * @param  string $class_name //Class Name
     *
     * @return array  $column_name_list          //Column Name List
     */
    function &_getColumnList($class_name = null, $set_alias = true)
    {

        //Check Class Name
        $column_prefix = null;
        if (is_null($class_name)) {
            //Default Class Name and Table Name
            $class_name = GRN_WORKFLOW_TABLE_FORM;
        } else {
            //Set Column Prefix
            switch ($class_name) {
                case GRN_WORKFLOW_TABLE_FORM:
                    $column_prefix = "f";
                    break;
                case GRN_WORKFLOW_TABLE_ITEM:
                    $column_prefix = "i";
                    break;
            }
        }

        //Create Column Name List
        require_once('workflow/table.csp');
        $column_list = get_class_vars($class_name);
        foreach (array_keys($column_list) as $column_name) {
            if (strpos($column_name, 'col_') === 0) {
                if (is_null($column_prefix)) {
                    $column_name_list[] = $column_name;
                } elseif ($set_alias) {
                    $column_name_list[] = sprintf('%s.%s %s_%s', $column_prefix,
                        $column_name, $column_prefix, $column_name);
                } else {
                    $column_name_list[] = sprintf('%s.%s', $column_prefix,
                        $column_name);
                }
            }
        }
        if (is_null($column_prefix)) {
            $column_name_list[] = '_id';
        } elseif ($set_alias) {
            $column_name_list[] = sprintf('%s._id %s__id', $column_prefix,
                $column_prefix);
        } else {
            $column_name_list[] = sprintf('%s._id', $column_prefix);
        }

        return $column_name_list;
    }

    function _replaceSetNullColumn(
        & $column_list,
        & $join,
        $set_null,
        $table_alias
    ) {
        assert('is_array($column_list)');

        $join = "";
        if (is_array($set_null)) {
            foreach ($set_null as $key => $value) {
                $user_alias = "u_" . $key;
                $column_key = array_search($table_alias . "." . $value,
                    $column_list);
                if ($column_key !== false) {
                    $column_list[$column_key]
                        = sprintf('CASE WHEN %s.col_deleted IS NULL THEN %s.%s end AS %s',
                        $user_alias, $table_alias, $value, $value);
                    $join .= " LEFT JOIN tab_cb_user AS {$user_alias} ON {$table_alias}.{$value}={$user_alias}._id";
                }
            }
        }
    }

    function _replaceSetNullColumnWithAlias(
        & $column_list,
        & $join,
        $set_null,
        $table_alias
    ) {
        assert('is_array($column_list)');

        $join = "";
        if (is_array($set_null)) {
            foreach ($set_null as $key => $value) {
                $user_alias = "u_" . $key;
                $column = $table_alias . "." . $value;
                $alias = $table_alias . "_" . $value;
                $column_alias = $column . " " . $alias;

                $column_key = array_search($column_alias, $column_list);
                if ($key !== false) {
                    $column_list[$column_key]
                        = sprintf('CASE WHEN %s.col_deleted IS NULL THEN %s END AS %s',
                        $user_alias, $column, $alias);
                    $join .= " LEFT JOIN tab_cb_user AS {$user_alias} ON {$table_alias}.{$value}={$user_alias}._id";
                }
            }
        }

    }

    /**
     * Create Condition
     *
     * @param  array $condition_list //Condition List
     *
     * @return string $condition_string          //Condition String
     */
    function _createCondition($condition_list, $table_alias = "")
    {
        $condition_string = [];

        foreach (array_keys($condition_list) as $key) {
            $condition =& $condition_list[$key];

            //Check Column Type
            if (is_array($condition['column'])) {
                //Multi Column (OR)
                $temp = $condition;
                $condition_element_list = [];
                foreach ($condition['column'] as $column) {
                    $temp['column'] = $column;
                    $condition_element_list[]
                        = $this->_createConditionElement($temp,
                        $table_alias);
                }
                $condition_string[] = sprintf('(%s)',
                    implode(' OR ', $condition_element_list));

            } else {
                //Single Column
                $condition_string[] = $this->_createConditionElement($condition,
                    $table_alias);
            }
        }

        //Create Condition String (AND)
        if (count($condition_string) !== 0) {
            $condition_string = implode(' AND ', $condition_string);
        } else {
            $condition_string = null;
        }

        return $condition_string;
    }

    /**
     * Create Condition Element
     *
     * @param  array $condition //Condition Array
     *
     * @return string $condition_element         //Condition Element
     */
    function _createConditionElement($condition, $table_alias = "")
    {
        if (strlen($table_alias) > 0) {
            $table_alias .= ".";
        }

        $condition_element = '';

        //Get Database
        $database = $this->_getDatabase();

        //Check Condition Operator
        switch (strtoupper($condition['operator'])) {
            //Condition Type 'LIKE'
            case 'LIKE':
            case 'LIKE BINARY':
                $condition_element = cb_queryf($database,
                    $table_alias . '@S @S "%@L%"', $condition['column'],
                    $condition['operator'], $condition['value']);
                break;
            //Condition Type 'IN'
            case 'IN':
                if ( ! is_array($condition['value'])) {
                    $condition['value'][] = $condition['value'];
                }

                foreach (array_keys($condition['value']) as $key) {
                    $condition['value'][$key] = cb_queryf($database, '"@S"',
                        $condition['value'][$key]);
                }
                $in_value = implode(',', $condition['value']);
                $condition_element = cb_queryf($database,
                    "{$table_alias}@S IN(${in_value})", $condition['column']);
                break;
            //Condition Type Other
            default:
                $condition_element = cb_queryf($database,
                    $table_alias . '@S @S "@S"', $condition['column'],
                    $condition['operator'], $condition['value']);
                break;
        }

        //Return Condition Element
        return $condition_element;
    }

    /**
     * Create Order By
     *
     * @param  array $order_list //Order By List
     *
     * @return string $order_by_string           //Order By String
     */
    function _createOrderBy($order_list, $table_alias = "")
    {
        if (strlen($table_alias) > 0) {
            $table_alias .= ".";
        }

        $order_by_string = [];

        //Get Database
        $database =& $this->_getDatabase();

        //Create Order By Column
        $order_by = [];
        foreach (array_keys($order_list) as $key) {
            $order_by_string[] = cb_queryf($database, "{$table_alias}@S @S",
                $order_list[$key]['column'], $order_list[$key]['order']);
        }
        if (count($order_by_string) !== 0) {
            $order_by_string = 'ORDER BY ' . implode(',', $order_by_string);
        } else {
            $order_by_string = null;
        }

        //Return Order By
        return $order_by_string;
    }

    /**
     * Get Form
     *
     * @param  int   $form_id     //Form ID
     * @param  int   $category_id //Category ID
     * @param  array $column_list //Column List
     * @param  mixed $option      //Option (array('list'=>array('offset'=>'', 'limit'=>''), 'sort'=>array('column'=>'', 'order'=>''), 'condition'=>array('column'=>'', 'value'=>'', 'operator'=>''))
     * @param  bool  $refresh     //Refresh Cache
     * @param  int   $lock_mode   //Lock Mode
     *
     * @return array  $form                      //Form Information Array
     */
    function &get(
        $form_id,
        $category_id = null,
        $column_list = [],
        $option = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Form List
        $form_list =& $this->getList($category_id, $column_list, $option,
            $refresh, $lock_mode);

        //Get Form
        if ( ! array_key_exists($form_id, $form_list)) {
            $ret = false;

            return $ret;
        }

        //Return Form
        return $form_list[$form_id];
    }

    /**
     * Get Form Direct
     *
     * @param  int   $form_id     //Form ID
     * @param  array $column_list //Column List
     * @param  mixed $option      //Option ('condition'=>array('column'=>'', 'value'=>'', 'operator'=>''))
     * @param  int   $lock_mode   //Lock Mode
     *
     * @return array  $form                      //Form Information Array
     */
    function getDirect(
        $form_id,
        $column_list = [],
        $option = [],
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $form = [];

        //Get Database
        $database = $this->_getDatabase();

        //Create Column List
        if (count($column_list) === 0) {
            $column_list = $this->_getColumnList(GRN_WORKFLOW_TABLE_FORM,
                false);
        } else {
            foreach ($column_list as $key => $value) {
                $column_list[$key] = "f." . $value;
            }
        }
        $set_null = ['col_creator', 'col_modifier', 'col_transactor'];
        $join = "";
        $this->_replaceSetNullColumn($column_list, $join, $set_null, "f");
        $column_list = implode(',', $column_list);

        //Create Condition
        $condition_list = [];
        $condition_list[] = cb_queryf($database, "f._id = '@S'", $form_id);
        if (array_key_exists('condition', $option)) {
            $condition_list[] = $this->_createCondition($option['condition'],
                "f");
        }
        $condition = implode(' AND ', $condition_list);
        if ($condition) {
            $condition = 'WHERE ' . $condition;
        }

        //Create Query
        $query = sprintf('SELECT %s FROM %s AS f %s %s', $column_list,
            $this->_table_name, $join, $condition);
        $query = $database->select_format($query, 0, 1, $lock_mode);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Get Form
        $form = $database->fetch_assoc($result);
        $database->free_result($result);

        //Return Form
        return $form;
    }

    /**
     * Get Form by Foreign Key
     *
     * @param  string $foreign_key //Foreign Key
     * @param  array  $column_list //Column List
     * @param  mixed  $option      //Option (array('list'=>array('offset'=>'', 'limit'=>''), 'sort'=>array('column'=>'', 'order'=>''), 'condition'=>array('column'=>'', 'value'=>'', 'operator'=>''))
     * @param  int    $lock_mode   //Lock Mode
     *
     * @return array  $form                      //Form Information Array
     */
    function &getByForeignKey(
        $foreign_key,
        $column_list = [],
        $option = [],
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Database
        $database = $this->_getDatabase();

        //Create Column List
        if (count($column_list) === 0) {
            $column_list = $this->_getColumnList(GRN_WORKFLOW_TABLE_FORM,
                false);
        } else {
            foreach ($column_list as $key => $value) {
                $column_list[$key] = "f." . $value;
            }
        }
        $set_null = ['col_creator', 'col_modifier', 'col_transactor'];
        $join = "";
        $this->_replaceSetNullColumn($column_list, $join, $set_null, "f");
        $column_list = implode(',', $column_list);

        //Create Condition
        $condition_list = [];
        $condition_list[] = cb_queryf($database, 'f.col_foreign_key = "@S"',
            $foreign_key);
        if (array_key_exists('condition', $option)) {
            $condition_list[] = $this->_createCondition($option['condition'],
                "f");
        }
        $condition = implode(' AND ', $condition_list);
        if ($condition) {
            $condition = 'WHERE ' . $condition;
        }

        //Create Query
        $query = sprintf('SELECT %s FROM %s AS f %s %s', $column_list,
            $this->_table_name, $join, $condition);
        $query = $database->select_format($query, 0, -1, $lock_mode);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Update Form List
        $count = $database->num_rows($result);
        $form = $database->fetch_assoc($result);
        $database->free_result($result);

        return $form;
    }

    /**
     * Get Form(with Extra Information)
     *
     * @param  int   $form_id     //Form ID
     * @param  int   $category_id //Category ID
     * @param  array $column_list //Column List
     * @param  mixed $option      //Option (array('list'=>array('offset'=>'', 'limit'=>''), 'sort'=>array('column'=>'', 'order'=>''), 'condition'=>array('column'=>'', 'value'=>'', 'operator'=>''))
     * @param  int   $refresh     //Refresh Cache
     * @param  int   $lock_mode   //Lock Mode
     *
     * @return array  $form                      //Form Information Array
     */
    function &getEx(
        $form_id,
        $category_id = null,
        $column_list = [],
        $option = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Form List
        $form_list =& $this->getListEx($category_id, $column_list, $option,
            $refresh, $lock_mode);

        //Get Form
        if ( ! array_key_exists($form_id, $form_list)) {
            $ret = false;

            return $ret;
        }

        //Return Form
        return $form_list[$form_id];
    }

    /**
     * Get Form List
     *
     * @param  int   $category_id //Category ID
     * @param  array $column_list //Column List
     * @param  mixed $option      //Option (array('list'=>array('offset'=>'', 'limit'=>''), 'sort'=>array('column'=>'', 'order'=>''), 'condition'=>array('column'=>'', 'value'=>'', 'operator'=>''))
     * @param  bool  $refresh     //Refresh Cache
     * @param  int   $lock_mode   //Lock Mode
     *
     * @return array  $form_list                 //Form Information List
     */
    function &getList(
        $category_id = null,
        $column_list = [],
        $option = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $form_list = [];

        //Check Arguments
        $category_id = is_null($category_id) ? 0 : $category_id;

        //Check Option
        $refresh = count($option) !== 0 ? true : false;

        //Get Form List From Cache
        $cached = false;
        if ( ! $refresh) {
            if (array_key_exists($category_id, $this->_list)) {
                if (is_array($this->_list[$category_id])) {
                    $form_list =& $this->_list[$category_id];
                    $cached = true;
                }
            }
        } else {
            $this->_list[$category_id] = [];
        }

        //Get Form List From Database
        if ( ! $cached || $refresh) {
            //Get Database
            $database = $this->_getDatabase();

            //Create Column List
            if (count($column_list) === 0 || $column_list === false) {
                $column_list = $this->_getColumnList(GRN_WORKFLOW_TABLE_FORM,
                    false);
            } else {
                foreach ($column_list as $key => $value) {
                    $column_list[$key] = "f." . $value;
                }
            }
            $set_null = ['col_creator', 'col_modifier', 'col_transactor'];
            $join = "";
            $this->_replaceSetNullColumn($column_list, $join, $set_null, "f");
            $column_list = implode(',', $column_list);

            //Create Condition
            $condition_list = [];
            if ($category_id == -1) {
                $condition_list[] = 'f.col_category IS NULL';
            } elseif ($category_id != 0) {
                $condition_list[] = cb_queryf($database,
                    'f.col_category = "@S"', $category_id);
            }
            if (array_key_exists('condition', $option)) {
                $condition_list[]
                    = $this->_createCondition($option['condition'], "f");
            }
            $condition = implode(' AND ', $condition_list);
            if ($condition) {
                $condition = 'WHERE ' . $condition;
            }

            //Create Order By Column
            if (array_key_exists('sort', $option)) {
                $order_by = $this->_createOrderBy($option['sort'], "f");
                $order_by = $order_by . ', f.col_list_index, f._id';
            } else {
                $order_by = 'ORDER BY f.col_list_index, f._id';
            }

            //Create Query
            $query = sprintf('SELECT %s FROM %s AS f %s %s %s', $column_list,
                $this->_table_name, $join, $condition, $order_by);
            if (array_key_exists('list', $option)) {
                $list =& $option['list'];
                $query = $database->select_format($query, $list['offset'],
                    $list['limit'], $lock_mode);
            } else {
                $query = $database->select_format($query, 0, -1, $lock_mode);
            }

            //Execute Query
            $result = $database->query($query);
            if ($result === false) {
                //Throw Query Error
                $database->throwError(['query' => 'query failed: ' . $query]);
            }

            //Update Form List
            $count = $database->num_rows($result);
            for ($i = 0; $i < $count; $i++) {
                $row = $database->fetch_assoc($result);
                $this->_list[$category_id][$row['_id']] = $row;
            }
            $database->free_result($result);

            if ($count > 0) {
                $form_list =& $this->_list[$category_id];
            }
        }

        //Return Form List
        return $form_list;
    }

    /**
     * Get Form List (with Extra Information)
     *
     * @param  int   $category_id //Petition ID
     * @param  array $column_list //Column List
     * @param  mixed $option      //Option (array('list'=>array('offset'=>'', 'limit'=>''), 'sort'=>array('column'=>'', 'order'=>''), 'condition'=>array('column'=>'', 'value'=>'', 'operator'=>''))
     * @param  bool  $refresh     //Refresh Cache
     * @param  int   $lock_mode   //Lock Mode
     *
     * @return array  $form_list                 //Form Information List
     */
    function &getListEx(
        $category_id = null,
        $column_list = [],
        $option = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $form_list = [];

        //Check Arguments
        $category_id = is_null($category_id) ? 0 : $category_id;

        //Check Option
        $refresh = count($option) !== 0 ? true : false;

        //Get Form List From Cache
        $cached = false;
        if ( ! $refresh) {
            if (array_key_exists($category_id, $this->_listEx)) {
                if (is_array($this->_listEx[$category_id])) {
                    $form_list =& $this->_listEx[$category_id];
                    $cached = true;
                }
            }
        } else {
            $this->_listEx[$category_id] = [];
        }

        //Get Form List From Database
        if ( ! $cached || $refresh) {
            //Get Database
            $database =& $this->_getDatabase();

            $set_null = ['col_creator', 'col_modifier', 'col_transactor'];
            $join_add = "";

            //Create Column List
            if (count($column_list) === 0) {
                $form_column_list
                    = $this->_getColumnList(GRN_WORKFLOW_TABLE_FORM);
                $this->_replaceSetNullColumnWithAlias($form_column_list,
                    $join_add, $set_null, "f");
                $item_column_list
                    = $this->_getColumnList(GRN_WORKFLOW_TABLE_ITEM);
                $column_list = array_merge($form_column_list,
                    $item_column_list);
                $column_list = implode(',', $column_list);
            } else {
                $column_list = implode(',', $column_list);
            }

            //Create Table Name
            $table_name_form = $this->_getTableName(GRN_WORKFLOW_TABLE_FORM);
            $table_name_item = $this->_getTableName(GRN_WORKFLOW_TABLE_ITEM);

            //Create Join
            $join_list = [];
            $join_list[] = sprintf('%s i ON f._id = i.col_form',
                $table_name_item);
            $join = implode(' LEFT JOIN ', $join_list);
            if ($join) {
                $join = 'LEFT JOIN ' . $join;
            }

            $join .= $join_add;

            //Create Condition
            $condition_list = [];
            if ($category_id == -1) {
                $condition_list[] = 'f.col_category IS NULL';
            } elseif ($category_id != 0) {
                $condition_list[] = cb_queryf($database,
                    'f.col_category = "@S"', $category_id);
            }
            if (array_key_exists('condition', $option)) {
                $condition_list[]
                    = $this->_createCondition($option['condition']);
            }
            $condition = implode(' AND ', $condition_list);
            if ($condition) {
                $condition = 'WHERE ' . $condition;
            }

            //Create Order By Column
            if (array_key_exists('sort', $option)) {
                $order_by = $this->_createOrderBy($option['sort'], "f");
                $order_by = $order_by
                            . ', f.col_list_index, f._id, i.col_list_index, i._id';
            } else {
                $order_by
                    = 'ORDER BY f.col_list_index, f._id, i.col_list_index, i._id';
            }

            //Create Query
            $query = sprintf('SELECT %s FROM %s f %s %s %s', $column_list,
                $this->_table_name, $join, $condition, $order_by);
            if (array_key_exists('list', $option)) {
                $list =& $option['list'];
                $query = $database->select_format($query, $list['offset'],
                    $list['limit'], $lock_mode);
            } else {
                $query = $database->select_format($query, 0, -1, $lock_mode);
            }

            //Execute Query
            $result = $database->query($query);
            if ($result === false) {
                //Throw Query Error
                $database->throwError(['query' => 'query failed: ' . $query]);
            }

            //Update Form List
            $prev_form_id = 0;
            $count = $database->num_rows($result);
            for ($i = 0; $i < $count; $i++) {
                $row = $database->fetch_assoc($result);
                if ($prev_form_id != $row['f__id']) {
                    $this->_listEx[$category_id][$row['f__id']] = $row;
                    $this->_listEx[$category_id][$row['f__id']]['items'] = [];
                }
                $this->_listEx[$category_id][$row['f__id']]['items'][$row['i__id']]
                    = $row;
                $prev_form_id = $row['f__id'];
            }
            $database->free_result($result);

            if ($count > 0) {
                $form_list =& $this->_listEx[$category_id];
            }
        }

        //Return Form List
        return $form_list;
    }

    /**
     * Get Form Count
     *
     * @param  int   $category_id //Category ID
     * @param  mixed $option      //Option (array('condition'=>array('column'=>'', 'value'=>'', 'operator'=>''))
     * @param  bool  $refresh     //Refresh Cache
     * @param  int   $lock_mode   //Lock Mode
     *
     * @return int    $form_count                //Form Count
     */
    function getCount(
        $category_id = null,
        $option = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Database
        $database = $this->_getDatabase();

        //Create Condition
        $condition_list = [];
        if ($category_id == -1) {
            $condition_list[] = 'col_category IS NULL';
        } elseif ( ! is_null($category_id)) {
            $condition_list[] = cb_queryf($database, 'col_category = "@S"',
                $category_id);
        }
        if (array_key_exists('condition', $option)) {
            $condition_list[] = $this->_createCondition($option['condition']);
        }
        $condition = implode(' AND ', $condition_list);
        if ($condition) {
            $condition = 'WHERE ' . $condition;
        }

        //Create Query
        $query = sprintf('SELECT COUNT(*) FROM %s %s', $this->_table_name,
            $condition);
        $query = $database->select_format($query, 0, -1, $lock_mode);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }
        $row = $database->fetch_assoc($result);
        $database->free_result($result);

        //Return Form Count
        return $row['COUNT(*)'];
    }

    /**
     * Get Form Count
     *
     * @param  int   $category_id //Category ID
     * @param  mixed $option      //Option (array('condition'=>array('column'=>'', 'value'=>'', 'operator'=>''))
     * @param  bool  $refresh     //Refresh Cache
     * @param  int   $lock_mode   //Lock Mode
     *
     * @return int    $form_count                //Form Count
     */
    function getCountEx(
        $category_id = null,
        $option = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Database
        $database =& $this->_getDatabase();

        //Create Table Name
        $table_name_form = $this->_getTableName(GRN_WORKFLOW_TABLE_FORM);
        $table_name_item = $this->_getTableName(GRN_WORKFLOW_TABLE_ITEM);

        //Create Join
        $join_list = [];
        $join_list[] = sprintf('%s i ON f._id = i.col_form', $table_name_item);
        $join = implode(' LEFT JOIN ', $join_list);
        if ($join) {
            $join = 'LEFT JOIN ' . $join;
        }

        //Create Condition
        $condition_list = [];
        if ($category_id == -1) {
            $condition_list[] = 'f.col_category IS NULL';
        } elseif ($category_id != 0) {
            $condition_list[] = cb_queryf($database, 'f.col_category = "@S"',
                $category_id);
        }
        if (array_key_exists('condition', $option)) {
            $condition_list[] = $this->_createCondition($option['condition']);
        }
        $condition = implode(' AND ', $condition_list);
        if ($condition) {
            $condition = 'WHERE ' . $condition;
        }

        //Create Query
        $query = sprintf('SELECT COUNT(DISTINCT(f._id)) COUNT FROM %s f %s %s',
            $this->_table_name, $join, $condition);
        $query = $database->select_format($query, 0, -1, $lock_mode);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }
        $row = $database->fetch_assoc($result);
        $database->free_result($result);

        //Return Form Count
        return $row['COUNT'];
    }
}


