<?php
require_once('fw/database.csp');
require_once('workflow/bean/GrnAutoScheduleRegister.csp');

class GrnAutoScheduleRegisterDAO
{
    CONST AUTO_SCHEDULE_TABLE = "tab_grn_workflow_auto_schedule";

    /**
     * @param                         $inDataObj
     * @param GrnAutoScheduleRegister $insertObj
     *
     * @return bool|int
     */
    public function insert($inDataObj, GrnAutoScheduleRegister $insertObj)
    {
        /** @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $query = cb_queryf(
            $inDb,
            "INSERT INTO @S( col_petition_id, col_schedule_type, col_appointment_type,  col_schedule_timezone, col_schedule_start_item_data, col_schedule_end_item_data)",
            self::AUTO_SCHEDULE_TABLE
        );
        $query .= cb_queryf(
            $inDb, " VALUES ( '@S', '@S', '@S', '@S', '@S', '@S');",
            $insertObj->getPetitionId(),
            $insertObj->getScheduleType(),
            $insertObj->getAppointmentType(),
            $insertObj->getScheduleTimeZone(),
            $insertObj->getScheduleStartItemData(),
            $insertObj->getScheduleEndItemData()
        );

        if ($inDb->query($query) === false) {
            $inDb->throwServerError($query);
        }

        $insertCount = $inDb->affected_rows();

        return $insertCount;
    }

    /**
     * @param                         $inDataObj
     * @param                         $column_list
     * @param GrnAutoScheduleRegister $updateObj
     *
     * @return bool|int
     */
    public function updateByPetitionId(
        $inDataObj,
        $column_list,
        GrnAutoScheduleRegister $updateObj
    ) {
        /** @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];

        //Create Column List
        $property_list = $updateObj->convertArray();
        $petition_id = $property_list['col_petition_id'];
        unset($property_list['col_petition_id']);

        //Create Query
        $update_list = [];
        foreach ($column_list as $column) {
            if ($column === '_id') {
                continue;
            }

            if (array_key_exists($column, $property_list)) {
                if (is_null($property_list[$column])) {
                    $update_list[$column] = cb_queryf($inDb, '@S = null',
                        $column);
                } else {
                    $update_list[$column] = cb_queryf($inDb, '@S = "@S"',
                        $column, $property_list[$column]);
                }
            }
        }

        $update_string = implode(', ', $update_list);
        $where_string = cb_queryf($inDb, "col_petition_id = '@S'",
            $petition_id);
        $query = sprintf('UPDATE %s SET %s WHERE %s',
            self::AUTO_SCHEDULE_TABLE, $update_string, $where_string);

        //Execute Query
        $result = $inDb->query($query);
        if ($result === false) {
            //Throw Query Error
            $inDb->throwError(['query' => 'query failed: ' . $query]);
        }

        $updateCount = $inDb->affected_rows();

        return $updateCount;
    }

    /**
     * @param                         $inDataObj
     * @param GrnAutoScheduleRegister $scheduleRegisterObj
     *
     * @return bool|GrnAutoScheduleRegister
     */
    public function getByPetitionId(
        $inDataObj,
        GrnAutoScheduleRegister $scheduleRegisterObj
    ) {
        /** @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inPetitionId = $scheduleRegisterObj->getPetitionId();

        $query = "SELECT ";
        $query .= "col_petition_id, col_schedule_type, col_appointment_type,  col_schedule_timezone, col_schedule_start_item_data, col_schedule_end_item_data, col_schedule_id";
        $query .= " FROM " . self::AUTO_SCHEDULE_TABLE;
        $query = cb_queryf($inDb, $query . " WHERE  col_petition_id = '@S'",
            $inPetitionId);
        $result = $inDb->query($query);

        if (($result === false) || ($inDb->num_rows($result) != 1)) {
            if ($result) {
                $inDb->free_result($result);
            }

            return false;
        }

        $row = $inDb->fetch_assoc($result);
        $inDb->free_result($result);
        $grnAutoScheduleRegister = new GrnAutoScheduleRegister($row);

        return $grnAutoScheduleRegister;
    }

    /**
     * @param                         $inDataObj
     * @param GrnAutoScheduleRegister $delObj
     *
     * @return bool|int
     */
    public function delete($inDataObj, GrnAutoScheduleRegister $delObj)
    {
        /** @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inPetitionId = $delObj->getPetitionId();

        $query = "DELETE FROM " . self::AUTO_SCHEDULE_TABLE;
        $query = cb_queryf($inDb, $query . " WHERE  col_petition_id = '@S'",
            $inPetitionId);
        $inDb->query($query);

        $deleteCount = $inDb->affected_rows();

        return $deleteCount;
    }

    /**
     * @param       $inDataObj
     * @param array $petition_ids
     *
     * @return bool|int
     */
    public function multiDelete($inDataObj, Array $petition_ids)
    {
        /** @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];

        $query = "DELETE FROM " . self::AUTO_SCHEDULE_TABLE;
        $query = cb_queryf($inDb, $query . " WHERE  col_petition_id in (@A)",
            $petition_ids);
        $inDb->query($query);

        $deleteCount = $inDb->affected_rows();

        return $deleteCount;
    }
}
