<?php
/**
 * Workflow Application Category Logic Class
 *
 * @author  SHIMADA Kunihiko
 * @version 1.0
 * @package grn.workflow
 */

/** Category Application **/
require_once('workflow/resources.csp');
require_once('workflow/category_logic_base.csp');

/**
 * Category Logic Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_Category_Logic extends GRN_Workflow_Category_Logic_Base
{
    //Category Manager Instance
    var $_category_manager = null;

    /**
     * Constructor
     *
     * @return none
     */
    function GRN_Wrokflow_Category_Logic()
    {

    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_Category_Logic $instance                  //Instance of GRN_Workflow_Category_Logic
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_Category_Logic();
        }

        return $_instance;
    }

    /**
     * Get Category Manager
     *
     * @return GRN_Workflow_Category_Manager $category_manager          //Category Manager
     */
    function _getCategoryManager()
    {
        if (is_null($this->_category_manager)) {
            require_once('workflow/category_manager.csp');
            $this->_category_manager
                = GRN_Workflow_Category_Manager::getInstance();
        }

        return $this->_category_manager;
    }

    /**
     * Initialize Category
     *
     * @param  none
     *
     * @return array   $category_id_list             //Category ID
     */
    function initialize()
    {
        //Get Administrator
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $administrator = $uum->getUser(1);
        $user_id = $administrator->getOID();
        $display_name = $administrator->get("display_name");
        $foreign_key = $administrator->get("foreign_key");

        //Get Create Time
        $ctime = time();

        //Set Category Property List
        $property_list = [
            GRN_WORKFLOW_COLUMN_NAME                 => '(root)',
            GRN_WORKFLOW_COLUMN_FOREIGN_KEY          => 'ROOT_CATEGORY',
            GRN_WORKFLOW_COLUMN_LIST_INDEX           => '0',
            GRN_WORKFLOW_COLUMN_CREATOR              => $user_id,
            GRN_WORKFLOW_COLUMN_CREATOR_NAME         => $display_name,
            GRN_WORKFLOW_COLUMN_CREATOR_FOREIGN_KEY  => $foreign_key,
            GRN_WORKFLOW_COLUMN_CTIME                => $ctime,
            GRN_WORKFLOW_COLUMN_MODIFIER             => $user_id,
            GRN_WORKFLOW_COLUMN_MODIFIER_NAME        => $display_name,
            GRN_WORKFLOW_COLUMN_MODIFIER_FOREIGN_KEY => $foreign_key,
            GRN_WORKFLOW_COLUMN_MTIME                => $ctime,
        ];

        // Category Manager Instance
        $category_manager = $this->_getCategoryManager();
        //Initialize Category
        $category_id =& $category_manager->create($property_list);

        return $category_id;
    }

    /**
     * get Login User
     *
     * @access private
     * @return object $login_user                //Login User
     */
    function _getLoginUser()
    {
        //Get UUM Instance
        global $G_container_base;
        $grn_uum = $G_container_base->getInstance('uum');

        //Get Login User
        $login_user = $grn_uum->getLoginUser();
        if ( ! $login_user) {
            $ret = false;

            return $ret;
        }

        //Return Login User
        return $login_user;
    }

    /**
     * Set Creator
     *
     * @access private
     *
     * @param  array $property_list //Property List
     *
     * @return bool   $result                    //Result
     */
    function _setCreator(&$property_list)
    {
        //Check Argument
        if ( ! is_array($property_list)) {
            return false;
        }

        // Get Login User
        $login_user = $this->_getLoginUser();

        //Get Create Time
        $ctime = time();

        //Set Create Infomation
        if ($login_user) {
            $user_id = $login_user->getOID();
            $display_name
                = $login_user->get("display_name");
            $foreign_key
                = $login_user->get("foreign_key");
            $property_list[GRN_WORKFLOW_COLUMN_CREATOR]
                = $user_id;         //Creator
            $property_list[GRN_WORKFLOW_COLUMN_CREATOR_NAME]
                = $display_name;    //Creator Name
            $property_list[GRN_WORKFLOW_COLUMN_CREATOR_FOREIGN_KEY]
                = $foreign_key;     //Creator Foreign Key
            $property_list[GRN_WORKFLOW_COLUMN_MODIFIER]
                = $user_id;         //Modifier
            $property_list[GRN_WORKFLOW_COLUMN_MODIFIER_NAME]
                = $display_name;    //Modifier Name
            $property_list[GRN_WORKFLOW_COLUMN_MODIFIER_FOREIGN_KEY]
                = $foreign_key;     //Modifier Foreign Key
        }
        $property_list[GRN_WORKFLOW_COLUMN_CTIME] = $ctime;   //Create Time
        $property_list[GRN_WORKFLOW_COLUMN_MTIME] = $ctime;   //Modify Time

        return true;
    }

    /**
     * Set Modofier
     *
     * @access private
     *
     * @param  array $property_list //Property List
     *
     * @return bool   $result                    //Result
     */
    function _setModifier(&$property_list)
    {
        //Check Argument
        if ( ! is_array($property_list)) {
            return false;
        }

        // Get Login User
        $login_user = $this->_getLoginUser();

        //Get Modofy Time
        $mtime = time();

        //Set Modify Infomation/
        if ($login_user) {
            $user_id = $login_user->getOID();
            $display_name
                = $login_user->get("display_name");
            $foreign_key
                = $login_user->get("foreign_key");
            $property_list[GRN_WORKFLOW_COLUMN_MODIFIER]
                = $user_id;         //Modifier
            $property_list[GRN_WORKFLOW_COLUMN_MODIFIER_NAME]
                = $display_name;    //Modifier Name
            $property_list[GRN_WORKFLOW_COLUMN_MODIFIER_FOREIGN_KEY]
                = $foreign_key;     //Modifier Foreign Key
        }
        $property_list[GRN_WORKFLOW_COLUMN_MTIME] = $mtime;   //Modify Time

        return true;
    }

    /**
     * Add Category Object
     *
     * @return string $category_name             //Category Name
     * @return string $category_code             //Category Code
     * @return string $category_memo             //Category Memo
     * @return int    $parent_category_id        //Parent Category ID
     * @return object $category                  //Category Object
     */
    function &add(
        $category_name,
        $category_code,
        $category_memo,
        $parent_category_id
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($category_name,
            E_GRN_WRKF_CATEGORY_NOT_INPUT_NECESSARY);    //Category Name
        cb_trim_check($category_code,
            E_GRN_WRKF_CATEGORY_NOT_INPUT_NECESSARY);    //Category Code
        cb_trim_check($parent_category_id,
            E_GRN_WRKF_CATEGORY_NOT_INPUT_NECESSARY);    //Parent Category ID

        //Check Duplicate Category Code
        $this->checkCode($category_code);

        //Get Category Object
        $parent_category =& $this->get($parent_category_id, null,
            CB_DATABASE_DEFAULT_LOCK, true);
        if ( ! $parent_category) {
            //Category Not Found
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_CATEGORY_NOT_FOUND);
        }

        //Create Property List
        $property_list = [
            GRN_WORKFLOW_COLUMN_NAME        => $category_name,
            GRN_WORKFLOW_COLUMN_FOREIGN_KEY => $category_code,
            GRN_WORKFLOW_COLUMN_MEMO        => $category_memo,
            GRN_WORKFLOW_COLUMN_PARENT      => $parent_category_id,
            //            GRN_WORKFLOW_COLUMN_LIST_INDEX              => time(),
        ];

        //Set Creator
        $this->_setCreator($property_list);

        $category_manager = $this->_getCategoryManager();
        $category = $category_manager->create($property_list);

        //Return Category Object
        return $category;
    }

    public function addCategory(
        $inLocalNameArray,
        $inForeignKey,
        $inMemo,
        $inParentCategoryId
    ) {
        require_once('workflow/WorkflowFacade.csp');
        require_once('workflow/bean/GrnWorkflowCategoryLocal.csp');
        $dao = new WorkflowFacade();


        //--------------  default category add -------------
        $defaultName = $inLocalNameArray[CB_I18N_DEFUALT_LANGUAGE_CODE];

        //Add Category
        $categoryId = $this->add($defaultName, $inForeignKey, $inMemo,
            $inParentCategoryId);

        //監査する
        require_once('workflow/inspection.csp');
        $inspection = GRN_Workflow_Category_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            $message_type = 'category_add';

            $message_args['cid'] = $categoryId;
            $message_args['name'] = $defaultName;
            $message_args['foreign_key'] = $inForeignKey;
            $message_args['memo'] = $inMemo;

            //Record Inspection
            $inspection->record($message_type, $message_args);
        }


        //--------------  category local name add -------------
        //Add System Portal
        $i18n = CB_I18N::getInstance();
        $availableLanguageArray = $i18n->getAvailableLanguages();
        foreach ($availableLanguageArray as $languageKey) {
            if ((array_key_exists($languageKey, $inLocalNameArray))
                && strlen(cb_trim($inLocalNameArray[$languageKey])) > 0
            ) {
                $localName = cb_trim($inLocalNameArray[$languageKey]);

                $dataObj = [];
                $dataObj['messageTypeAdd'] = 'category_local_add';
                $categoryLocal = new GrnWorkflowCategoryLocal();
                $categoryLocal->setParentId($categoryId);
                $categoryLocal->setLanguageCode($languageKey);
                $categoryLocal->setName($localName);

                $dao->insertWorkflowCategoryLocal($dataObj, $categoryLocal);
            }
        }

        return true;
    }

    /**
     * Modify Category Object
     *
     * @return int    $category_id               //Category ID
     * @return string $category_name             //Category Name
     * @return string $category_code             //Category Code
     * @return string $category_memo             //Category Memo
     * @return int    $parent_category_id        //Parent Category ID
     * @return object $Category                  //Category Object
     */
    function &modify(
        $category_id,
        $category_name,
        $category_code,
        $category_memo,
        $parent_category_id = null
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($category_id,
            E_GRN_WRKF_CATEGORY_INVALID_ID);            //Category ID
        cb_trim_check($category_code,
            E_GRN_WRKF_CATEGORY_NOT_INPUT_NECESSARY);   //Category Code
        cb_trim_check($category_name,
            E_GRN_WRKF_CATEGORY_NOT_INPUT_NECESSARY);   //Category Name

        //Check Duplicate Category Code
        $this->checkCode($category_code, $category_id);

        //Get Category Object
        $category =& $this->get($category_id, $parent_category_id);
        if ( ! $category) {
            //Category Not Found
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_CATEGORY_NOT_FOUND);
        }

        //Create Property List
        $property_list = [
            GRN_WORKFLOW_COLUMN_NAME        => $category_name,
            GRN_WORKFLOW_COLUMN_FOREIGN_KEY => $category_code,
            GRN_WORKFLOW_COLUMN_MEMO        => $category_memo,
            GRN_WORKFLOW_COLUMN_PARENT      => $parent_category_id,
        ];

        //Set Modifier Information
        $this->_setModifier($property_list);

        $category_manager = $this->_getCategoryManager();

        $category = $category_manager->update($category_id, $property_list);

        //Return Category Object
        return $category;
    }

    public function modifyCategory(
        $inCategoryId,
        $inLocalNameArray,
        $inForeignKey,
        $inMemo,
        $inParentCategoryId
    ) {
        require_once('workflow/WorkflowFacade.csp');
        require_once('workflow/bean/GrnWorkflowCategoryLocal.csp');
        $dao = new WorkflowFacade();


        //--------------  default category modify -------------
        $defaultName = $inLocalNameArray[CB_I18N_DEFUALT_LANGUAGE_CODE];

        //Modify Category
        $categoryId = $this->modify($inCategoryId, $defaultName, $inForeignKey,
            $inMemo, $inParentCategoryId);

        //監査する
        require_once('workflow/inspection.csp');
        $inspection = GRN_Workflow_Category_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            $message_type = 'category_modify';

            $message_args['cid'] = $inCategoryId;
            $message_args['name'] = $defaultName;
            $message_args['foreign_key'] = $inForeignKey;
            $message_args['memo'] = $inMemo;

            //Record Inspection
            $inspection->record($message_type, $message_args);
        }


        //--------------  category local name modify -------------
        $i18n = CB_I18N::getInstance();
        $availableLanguageArray = $i18n->getAvailableLanguages();
        foreach ($availableLanguageArray as $languageKey) {
            if ((array_key_exists($languageKey, $inLocalNameArray))
                && strlen(cb_trim($inLocalNameArray[$languageKey])) > 0
            ) {
                $localName = cb_trim($inLocalNameArray[$languageKey]);

                $dataObj = [];
                $categoryLocal = new GrnWorkflowCategoryLocal();
                $categoryLocal->setParentId($inCategoryId);
                $categoryLocal->setLanguageCode($languageKey);
                $categoryLocal->setName($localName);

                $dao->updateWorkflowCategoryLocal($dataObj, $categoryLocal);
            } else {
                $dataObj = [];
                $categoryLocal = new GrnWorkflowCategoryLocal();
                $categoryLocal->setParentId($inCategoryId);
                $categoryLocal->setLanguageCode($languageKey);

                $dao->deleteWorkflowCategoryLocal($dataObj, $categoryLocal);
            }
        }

        return true;
    }

    /**
     * Delete Category Object
     *
     * @return int    $category_id               //Category ID
     * @return int    $parent_category_id        //Parent Category ID
     * @return bool
     */
    function delete($category_id, $parent_category_id = null)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($category_id,
            E_GRN_WRKF_CATEGORY_INVALID_ID);    //Category ID

        //Get Category Object
        $category_manager = $this->_getCategoryManager();
        $result = $category_manager->remove($category_id,
            $parent_category_id);
        if ( ! $result) {
            //Category Not Found
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_CATEGORY_NOT_FOUND);
        }
        $r = true;

        return $r;
    }

    /**
     * Move Category Object
     *
     * @return int    $category_id               //Category ID
     * @return int    $parent_category_id        //Parent Category ID
     * @return object $category                  //Category Object
     */
    function &move($category_id, $parent_category_id)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        $category_id = cb_trim_check($category_id,
            E_GRN_WRKF_CATEGORY_INVALID_ID);                    //Category ID
        $parent_category_id = cb_trim_check($parent_category_id,
            E_GRN_WRKF_CATEGORY_NOT_INPUT_NECESSARY);    //Parent Category ID

        if ( ! is_numeric($category_id) || ! is_numeric($parent_category_id)) {
            cb_throw_error(E_GRN_WRKF_CATEGORY_NOT_FOUND);
        }

        if ($this->hasParent($category_id, $parent_category_id)) {
            cb_throw_error(E_GRN_WRKF_CATEGORY_INVALID_ID);
        }

        //Get Parent Category Object
        $parent_category =& $this->get($parent_category_id);

        //Create Property List
        $property_list = [
            GRN_WORKFLOW_COLUMN_PARENT => $parent_category['_id'],
        ];

        //Set Modifier Information
        $this->_setModifier($property_list);

        $category_manager = $this->_getCategoryManager();
        $category = $category_manager->update($category_id,
            $property_list);

        //Return Category Object
        return $category;
    }

    /**
     * @param $categoryid   確認するカテゴリID
     * @param $parentid     確認する親カテゴリID
     *
     * @return bool  親カテゴリIDが含まれる場合にはTRUE、それ以外の場合でFALSE
     */
    function hasParent($categoryid, $parentid)
    {
        if ($categoryid == $parentid) {
            return true;
        }

        $parent = $this->get($parentid);

        while ( ! is_null($parent['col_parent'])) {
            if ($categoryid == $parent['col_parent']) {
                return true;
            }
            $parent = $this->get($parent['col_parent']);
        }

        return false;
    }


    /**
     * Change Category Order
     *
     * @return array  $category_id_list          //Category ID List
     * @return none
     */
    function changeOrder($category_id_list)
    {
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');

        //Get Category Manager Object
        $category_manager = $this->_getCategoryManager();

        //Set New List Index
        $list_index = 1;
        foreach ($category_id_list as $category_id) {
            //Check Argument
            cb_trim_check($category_id,
                E_GRN_WRKF_CATEGORY_INVALID_ID);    //Category ID

            //Create Property List
            $property_list = [
                GRN_WORKFLOW_COLUMN_LIST_INDEX => $list_index,
            ];

            //Change Category Order
            $category_manager->update($category_id, $property_list);
            $list_index++;
        }

        return;
    }

    /**
     * Change Category Security Model
     *
     * @return array  $category_id               //Category ID
     * @return int    $security_model            //Security Model
     * @return none
     */
    function changeSecurityModel($category_id, $security_model)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($category_id,
            E_GRN_WRKF_CATEGORY_INVALID_ID);    //Category ID

        //Create Property List
        $property_list = [
            GRN_WORKFLOW_COLUMN_SECURITY_MODEL => $security_model,
        ];

        //Get Category Manager Object
        $category_manager = $this->_getCategoryManager();
        $result = $category_manager->update($category_id,
            $property_list);
        if ( ! $result) {
            //Category Not Found
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_CATEGORY_NOT_FOUND);
        }

        //Change Security Model
        return;
    }

    /**
     * Change Category Security Model for Public Folder
     *
     * @return array  $category_id               //Category ID
     * @return int    $security_model            //Security Model
     * @return none
     */
    function changePublicSecurityModel($category_id, $security_model)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($category_id,
            E_GRN_WRKF_CATEGORY_INVALID_ID);    //Category ID

        //Create Property List
        $property_list = [
            GRN_WORKFLOW_COLUMN_PUBLIC_SECURITY_MODEL => $security_model,
        ];

        //Get Category Manager Object
        $category_manager = $this->_getCategoryManager();
        $result = $category_manager->update($category_id,
            $property_list);
        if ( ! $result) {
            //Category Not Found
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_CATEGORY_NOT_FOUND);
        }

        return;
    }

    /**
     * Check Category Code
     *
     * @param string $category_code //Category Code
     * @param int    $category_id   //Category ID
     * @param bool   $throw_error   //Throw Error Flag
     * @param bool   $result        //Check Result
     */
    function checkCode($category_code, $category_id = null, $throw_error = true)
    {
        //Get Category Object
        $category_manager = $this->_getCategoryManager();
        $category = $category_manager->getByForeignKey($category_code);
        if ( ! $category) {
            return true;
        }

        //Check Same Category
        if ($category['_id'] != $category_id) {
            if ($throw_error) {
                //Duplicate Foreign Key
                require_once('workflow/error_code.csp');
                cb_throw_error(E_GRN_WRKF_CATEGORY_DUPLICATE_FOREIGN_KEY);
            }

            return false;
        }

        return true;
    }


    //
    // CSV File Import/Export Logic
    //

    /**
     * Write Item Name
     *
     * @param  object $csv // CSV Writer
     */
    function export_item_name($csv)
    {
        // Get Item Name
        require_once('fw/i18n.csp');
        $header = [];
        $header[] = cb_msg('grn.workflow.system', 'category_csv_parent_code');
        $header[] = cb_msg('grn.workflow.system', 'category_csv_code');
        $header[] = cb_msg('grn.workflow.system', 'category_csv_name');
        $header[] = cb_msg('grn.workflow.system', 'category_csv_memo');

        // Write Item Name
        $csv->writeLine($header);
    }

    /**
     * Write One Category Information
     *
     * @param  object $csv      // CSV Writer
     * @param  array  $category // Category
     *
     * @return bool
     *
     * @access private
     */
    function _export($csv, $category)
    {
        // Get Parent Category
        $parent_category = $this->get($category[GRN_WORKFLOW_COLUMN_PARENT]);

        // Get One Line
        $line = [];
        if ($parent_category) {
            $line[] = $parent_category[GRN_WORKFLOW_COLUMN_FOREIGN_KEY];
        } else {
            $line[] = '';
        }

        $line[] = $category[GRN_WORKFLOW_COLUMN_FOREIGN_KEY];
        $line[] = $category[GRN_WORKFLOW_COLUMN_NAME];
        $line[] = $category[GRN_WORKFLOW_COLUMN_MEMO];

        // Write One Line
        $csv->writeLine($line);

        return true;
    }

    /**
     * Export Category CSV
     *
     * @param  object $csv      // CSV Writer
     * @param  mix    $category // Category Array or ROOT Category ID
     *
     * @return bool
     */
    function export($csv, $category)
    {
        if ( ! $csv) {
            // CSV Write Handler Not Found
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_CSV_WRITER_NOT_FOUND);
        }

        if ( ! $category) {
            //Category Not Found
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_CATEGORY_NOT_FOUND);
        }

        // Not Write 'Root Category'
        if ($category != GRN_WORKFLOW_CATEGORY_ROOT_ID) {
            // Write Category information
            $this->_export($csv, $category);
        }

        // Get Child Categories
        $children = $this->getList($category['_id'], false,
            CB_DATABASE_DEFAULT_LOCK, false);

        // Write Chile Categories by Recursion
        foreach (array_keys($children) as $cid) {
            $child = $children[$cid];
            $this->export($csv, $child);
        }

        return true;
    }

    public function createCategoryNameCSV(
        $inCharset,
        $inIsExportHeader,
        $inExportLanguageCodeArray = null
    ) {
        /// テンポラリのファイルを作成
        $tempdir = cb_tmpdir();
        $tempFilename = tempnam($tempdir, 'wf_');
        require_once('fw/csv.csp');
        $csv = new CB_CSVWriter($inCharset, $tempFilename);

        // 項目名の書き出し
        if ($inIsExportHeader) {
            $header = [];
            $header[] = cb_msg('grn.workflow.system', 'category_csv_code');
            $header[] = cb_msg('grn.workflow.system',
                'category_csv_language_code');
            $header[] = cb_msg('grn.workflow.system', 'category_csv_name');

            $csv->writeLine($header);
        }

        // 内容の書き出し
        require_once('workflow/inspection.csp');
        require_once('workflow/WorkflowFacade.csp');
        $dao = new WorkflowFacade();
        $dataObj = [];
        $objectList
            = $dao->getWorkflowCategoryLocalListByLanguageCodes($dataObj,
            $inExportLanguageCodeArray);

        $inspection = GRN_Workflow_Category_Local_Inspection::getInstance();

        foreach ($objectList as $categoryLocal) {
            $line = [];
            $line[0] = $categoryLocal->getParentCode();
            $line[1] = $categoryLocal->getLanguageCode();
            $line[2] = $categoryLocal->getName();
            $csv->writeLine($line);

            //Check Inspection Message Enabled
            if ($inspection->isEnabled()) {
                //Write Inspection Message
                $message_type = 'category_local_export';
                $message_args = [
                    'cid'           => $categoryLocal->getParentId(),
                    'languageCode'  => $categoryLocal->getLanguageCode(),
                    'category_name' => $categoryLocal->getName()
                ];
                $inspection->record($message_type, $message_args);
            }
        }

        $csv->close();

        return $tempFilename;
    }

    /**
     * Import Category CSV
     *
     * @param  array $line // CSV Line
     *
     * @return bool
     */
    function import($line)
    {
        // Check the Number of Fields of CSV
        $csv_columns = [
            GRN_WORKFLOW_CSV_CATEGORY_PARENT_FOREIGN_KEY
            ,
            GRN_WORKFLOW_CSV_CATEGORY_FOREIGN_KEY
            ,
            GRN_WORKFLOW_CSV_CATEGORY_NAME
            ,
            GRN_WORKFLOW_CSV_CATEGORY_MEMO
        ];

        $csv_comumns_num = count($csv_columns);
        if (count($line) != $csv_comumns_num) {
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_CSV_FILE_INVALID);
        }

        //Create Foreign Key List
        static $category_list = null;    // All Category List
        static $all_foreign_key_list = null;    // All Import Foreign Key List
        static $old_foreign_key_list
            = null;    // Before Import Foreign Key List
        if (is_null($category_list) && is_null($all_foreign_key_list)
            && is_null($old_foreign_key_list)
        ) {
            $all_foreign_key_list = [];
            $old_foreign_key_list = [];
            $category_list = $this->getList(0);    // Get All Categories
            foreach (array_keys($category_list) as $category_id) {
                $old_foreign_key_list[$category_id]
                    = $category_list[$category_id][GRN_WORKFLOW_COLUMN_FOREIGN_KEY];
            }
            $all_foreign_key_list = $old_foreign_key_list;
        }
        $reverse_all_foreign_key_list = array_flip($all_foreign_key_list);
        $reverse_old_foreign_key_list = array_flip($old_foreign_key_list);

        // Set Field Data
        $csv_parent_foreign_key
            = $line[GRN_WORKFLOW_CSV_CATEGORY_PARENT_FOREIGN_KEY];
        $csv_foreign_key = $line[GRN_WORKFLOW_CSV_CATEGORY_FOREIGN_KEY];
        $csv_category_name = $line[GRN_WORKFLOW_CSV_CATEGORY_NAME];
        $csv_category_memo = $line[GRN_WORKFLOW_CSV_CATEGORY_MEMO];

        // Error Check of Field Data
        if ($csv_foreign_key === GRN_WORKFLOW_CATEGORY_ROOT_FOREIGN_KEY) {
            // Enable to Modify ROOT Category
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_CSV_ROOT_CATRGORY_FOREIGN_KEY);
        }

        // Set ROOT Foreign Key as Parent Foreign Key If Blank
        if (0 === strlen(cb_trim($csv_parent_foreign_key))) {
            $csv_parent_foreign_key = GRN_WORKFLOW_CATEGORY_ROOT_FOREIGN_KEY;
        }

        // Get Parent Category ID
        if ($csv_parent_foreign_key
            === GRN_WORKFLOW_CATEGORY_ROOT_FOREIGN_KEY
        ) {
            // Parant Category = ROOT Category
            $csv_parent_category_id = GRN_WORKFLOW_CATEGORY_ROOT_ID;
        } else {
            // Get Parent Category ID by Parent Foreign Key
            if ( ! in_array($csv_parent_foreign_key, $all_foreign_key_list)) {
                require_once('workflow/error_code.csp');
                cb_throw_error(E_GRN_WRKF_CSV_PARENT_FOREIGN_KEY_INVALID);
            }
            $csv_parent_category_id
                = $reverse_all_foreign_key_list[$csv_parent_foreign_key];
        }

        // Validate Parent Foreign Key of CSV
        $current_foreign_key = $csv_parent_foreign_key;
        while (GRN_WORKFLOW_CATEGORY_ROOT_FOREIGN_KEY != $current_foreign_key) {
            if ($current_foreign_key == $csv_foreign_key) {
                require_once('workflow/error_code.csp');
                cb_throw_error(E_GRN_WRKF_CSV_PARENT_FOREIGN_KEY_INVALID);
            }
            $current_category_id
                = $reverse_all_foreign_key_list[$current_foreign_key];
            $parent_category_id
                = $category_list[$current_category_id][GRN_WORKFLOW_COLUMN_PARENT];
            $current_foreign_key
                = $category_list[$parent_category_id][GRN_WORKFLOW_COLUMN_FOREIGN_KEY];
        }

        // Get Category ID by Foreign Key
        if (in_array($csv_foreign_key, $old_foreign_key_list)) {
            // UPDATE Category Information, If Category is Exist
            $category_id = $reverse_old_foreign_key_list[$csv_foreign_key];
            $this->modify($category_id, $csv_category_name, $csv_foreign_key,
                $csv_category_memo, $csv_parent_category_id);
        } else {
            // INSERT New Category, If Category is NOT Exist
            $category_id = $this->add($csv_category_name,
                $csv_foreign_key, $csv_category_memo, $csv_parent_category_id);
            $all_foreign_key_list[$category_id] = $csv_foreign_key;
        }

        //Update Category List
        $category_list[$category_id] = [
            GRN_WORKFLOW_COLUMN_NAME        => $csv_category_name,
            GRN_WORKFLOW_COLUMN_FOREIGN_KEY => $csv_foreign_key,
            GRN_WORKFLOW_COLUMN_MEMO        => $csv_category_memo,
            GRN_WORKFLOW_COLUMN_PARENT      => $csv_parent_category_id,
        ];

        return true;
    }

    /**
     * CSV read lines
     *
     * @access  public
     *
     * @param  string   inFilePath      //CSV FilePath
     * @param  string   inCharset       //read charset
     * @param  int      inSkipLineCount //read charset
     *
     * @return boolean  success:TRUE
     */
    public function importCategoryNameWithCSV(
        $inFilePath,
        $inCharset,
        $inSkipLineCount = 0
    ) {
        if ( ! $inCharset) {
            global $G_config_common;
            $inCharset = $G_config_common->get('I18N',
                'default_external_encoding');
        }

        require_once('fw/csv.csp');
        $csv = new CB_CSVReader($inCharset, $inFilePath);

        // 先頭行をスキップ
        for ($i = 0; $i < $inSkipLineCount; ++$i) {
            $csv->readLine();
        }

        require_once('workflow/bean/GrnWorkflowCategoryLocal.csp');
        require_once('workflow/WorkflowFacade.csp');
        $dao = new WorkflowFacade();
        $dataObj = [];
        $dataObj['messageTypeAdd'] = 'category_local_add_import';
        $dataObj['messageTypeModify'] = 'category_local_modify_import';
        $dataObj['messageTypeDelete'] = 'category_local_delete_import';

        $i18n = CB_I18N::getInstance();

        $app_locator = GRN_ApplicationLocator::instance();
        $manager = $app_locator->getTableManager('workflow');
        require_once('workflow/table.csp');
        $table_info = $manager->getTableInfo('GRN_Workflow_Category');

        $categoryDataObj = [];
        $categoryDataObj['lock'] = $table_info->_lock;
        $categoryDataObj['language'] = $i18n->getCurrentLanguage();
        $availableLanguageArray = $i18n->getAvailableLanguages();

        while (($line = $csv->readLine()) !== false) {
            //カテゴリコードからカテゴリIDを求める
            if (is_null($line[0]) || (strlen($line[0]) <= 0)) {
                continue;
            }
            $category
                = $dao->referWorkflowCategoryByForeignKey($categoryDataObj,
                $line[0]);
            if ($category === false) {
                continue;
            }

            if ( ! in_array($line[1], $availableLanguageArray)) {
                cb_throw_error(E_COMMON_CSV_LANGUAGE_CODE_INVALID);
            }
            //インポートデータの取り込み
            $categoryLocal = new GrnWorkflowCategoryLocal();
            $categoryLocal->setParentId($category->getId());
            $categoryLocal->setLanguageCode($line[1]);
            $categoryLocal->setName(cb_trim($line[2]));

            if (is_null($categoryLocal->getName())
                || (strlen($categoryLocal->getName()) <= 0)
            ) {
                $dao->deleteWorkflowCategoryLocal($dataObj, $categoryLocal);
            } else {
                $dao->updateWorkflowCategoryLocal($dataObj, $categoryLocal);
            }
        }

        $csv->close();

        return true;
    }

    /**
     * Get Category ID by Form ID
     *
     * @param  int $form_id Form ID
     *
     * @return int            Category ID
     */
    function getIdByFormId($form_id)
    {
        require_once('workflow/error_code.csp');
        cb_trim_check($form_id, E_GRN_WRKF_FORM_INVALID_ID);

        $app_locator = GRN_ApplicationLocator::instance();
        $dbconn = $app_locator->getConnection('workflow');

        $condition = cb_queryf($dbconn, "_id='@S'", $form_id);
        $query
            = "SELECT col_category FROM tab_grn_workflow_form WHERE {$condition};";
        if ($result = $dbconn->query($query)) {
            $row = $dbconn->fetch_assoc($result);
            if ( ! $row || ! array_key_exists('col_category', $row)
                 || $row['col_category'] < 1
            ) {
                return false;
            }

            return $row['col_category'];
        }
        $dbconn->throwError(['query' => "failed query on SELECT: {$query}"]);
    }
}

