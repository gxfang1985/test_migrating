<?php
/**
 * Workflow Application Item Class
 *
 * @author  Yuichi, Nakamura 2005/12
 * @version 1.0
 * @package grn.workflow
 */

/** Workflow Application **/
require_once('workflow/resources.csp');
require_once('workflow/item_logic_base.csp');

use grn\workflow\CustomizationUtil;

/**
 * Item Manager Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_Item_Logic extends GRN_Workflow_Item_Logic_Base
{
    //Item Manager Instance
    var $_item_manager = null;

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {

    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_Item_Logic $instance                  //Instance of GRN_Workflow_Item_Logic
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_Item_Logic();
        }

        return $_instance;
    }

    /**
     * Get Item Logic
     *
     * @return GRN_Workflow_Item_Manager $item_manager              //Item Manager
     */
    function _getItemManager()
    {
        if (is_null($this->_item_manager)) {
            require_once('workflow/item_manager.csp');
            $this->_item_manager = GRN_Workflow_Item_Manager::getInstance();
        }

        return $this->_item_manager;
    }

    /**
     * get Login User
     *
     * @access private
     * @return object $login_user                //Login User
     */
    function _getLoginUser()
    {
        //Get UUM Instance
        global $G_container_base;
        $grn_uum = $G_container_base->getInstance('uum');

        //Get Login User
        $login_user = $grn_uum->getLoginUser();
        if ( ! $login_user) {
            $ret = false;

            return $ret;
        }

        //Return Login User
        return $login_user;
    }

    /**
     * Set Creator
     *
     * @access private
     *
     * @param  array $property_list //Property List
     *
     * @return bool   $result                    //Result
     */
    function _setCreator(&$property_list)
    {
        //Check Argument
        if ( ! is_array($property_list)) {
            return false;
        }

        // Get Login User
        $login_user = $this->_getLoginUser();

        //Get Create Time
        $ctime = time();

        //Set Create Infomation
        if ($login_user) {
            $user_id = $login_user->getOID();
            $display_name
                = $login_user->get('display_name');
            $foreign_key
                = $login_user->get('foreign_key');
            $property_list[GRN_WORKFLOW_COLUMN_CREATOR]
                = $user_id;         //Creator
            $property_list[GRN_WORKFLOW_COLUMN_CREATOR_NAME]
                = $display_name;    //Creator Name
            $property_list[GRN_WORKFLOW_COLUMN_CREATOR_FOREIGN_KEY]
                = $foreign_key;     //Creator Foreign Key
            $property_list[GRN_WORKFLOW_COLUMN_MODIFIER]
                = $user_id;         //Modifier
            $property_list[GRN_WORKFLOW_COLUMN_MODIFIER_NAME]
                = $display_name;    //Modifier Name
            $property_list[GRN_WORKFLOW_COLUMN_MODIFIER_FOREIGN_KEY]
                = $foreign_key;     //Modifier Foreign Key
        }
        $property_list[GRN_WORKFLOW_COLUMN_CTIME] = $ctime;   //Create Time
        $property_list[GRN_WORKFLOW_COLUMN_MTIME] = $ctime;   //Modify Time

        return true;
    }

    /**
     * Set Modofier
     *
     * @access private
     *
     * @param  array $property_list //Property List
     *
     * @return bool   $result                    //Result
     */
    function _setModifier(&$property_list)
    {
        //Check Argument
        if ( ! is_array($property_list)) {
            return false;
        }

        // Get Login User
        $login_user =& $this->_getLoginUser();

        //Get Modofy Time
        $mtime = time();

        //Set Modify Infomation/
        if ($login_user) {
            $user_id = $login_user->getOID();
            $display_name
                = $login_user->get('display_name');
            $foreign_key
                = $login_user->get('foreign_key');
            $property_list[GRN_WORKFLOW_COLUMN_MODIFIER]
                = $user_id;         //Modifier
            $property_list[GRN_WORKFLOW_COLUMN_MODIFIER_NAME]
                = $display_name;    //Modifier Name
            $property_list[GRN_WORKFLOW_COLUMN_MODIFIER_FOREIGN_KEY]
                = $foreign_key;     //Modifier Foreign Key
        }
        $property_list[GRN_WORKFLOW_COLUMN_MTIME] = $mtime;   //Modify Time

        return true;
    }

    /**
     * Add Item
     *
     * @param  int    $form_id              //Form ID
     * @param  string $foreign_key          //Foreign key
     * @param  string $display_name         //Foreign Key
     * @param  array  $option_settings      //Settings for Option String
     * @param  array  $description_settings //Settings for Description
     * @param  array  $item_settings        //Settings for Item
     * @param  int    $br                   //<BR>
     * @param  string $separator            //Separator
     * @param  int    $required             //Required Flag
     *
     * @return int    $item_id                   //Item ID
     */
    function add(
        $form_id,
        $foreign_key,
        $display_name,
        $code,
        $option_settings,
        $description_settings,
        $item_settings = [],
        $br = 1,
        $separator = null,
        $required = 0,
        $export_data = 0
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($form_id,
            E_GRN_WRKF_FORM_INVALID_ID);                //Form ID
        cb_trim_check($foreign_key,
            E_GRN_WRKF_ITEM_INVALID_FOREIGN_KEY);       //Foreign Key
        cb_trim_check($display_name,
            E_GRN_WRKF_ITEM_NOT_INPUT_NECESSARY);       //Display Name

        //Check Item Foreign Key
        require_once('workflow/item_resources.csp');
        $item_util = grn_workflow_get_item_util($foreign_key);
        if ( ! $item_util) {
            //Invalid Foreign Key
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_ITEM_INVALID_FOREIGN_KEY);
        }

        $code = CustomizationUtil::trimCode($code);
        if ($this->isDuplicationItemCode($form_id, $code)) {
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_COLLISION_ITEM_CODE);
        }


        $export_data = (is_null($export_data)) ? 0 : $export_data;

        //Serialize Settings
        $serialized_settings = serialize($item_settings);

        //Create Property List
        $property_list = [
            GRN_WORKFLOW_COLUMN_DISPLAY_NAME => $display_name,
            GRN_WORKFLOW_COLUMN_CODE         => $code,
            GRN_WORKFLOW_COLUMN_TYPE         => 0,
            GRN_WORKFLOW_COLUMN_FORM         => $form_id,
            GRN_WORKFLOW_COLUMN_FOREIGN_KEY  => $foreign_key,
            GRN_WORKFLOW_COLUMN_SETTINGS     => $serialized_settings,
            GRN_WORKFLOW_COLUMN_BR           => $br,
            GRN_WORKFLOW_COLUMN_SEPARATOR    => $separator,
            GRN_WORKFLOW_COLUMN_REQUIRED     => $required,
            GRN_WORKFLOW_COLUMN_EXPORT_DATA  => $export_data,
        ];

        //Set Option Settings
        if (is_array($option_settings)) {
            foreach (array_keys($option_settings) as $key) {
                $col_name = 'col_' . $key;
                if ($col_name == GRN_WORKFLOW_COLUMN_OPTION_STRING_TYPE
                    || $col_name == GRN_WORKFLOW_COLUMN_OPTION_STRING
                ) {
                    $property_list[$col_name] = $option_settings[$key];
                }
            }
        }

        //Set Description Settings
        if (is_array($description_settings)) {
            foreach (array_keys($description_settings) as $key) {
                $col_name = 'col_' . $key;
                if ($col_name == GRN_WORKFLOW_COLUMN_DESCRIPTION
                    || $col_name == GRN_WORKFLOW_COLUMN_DESCRIPTION_TYPE
                    || $col_name == GRN_WORKFLOW_COLUMN_DESCRIPTION_EDITOR
                ) {
                    $property_list[$col_name] = $description_settings[$key];
                }
            }
            if (array_key_exists(GRN_WORKFLOW_COLUMN_DESCRIPTION,
                    $property_list)
                && array_key_exists(GRN_WORKFLOW_COLUMN_DESCRIPTION_EDITOR,
                    $property_list)
                && $property_list[GRN_WORKFLOW_COLUMN_DESCRIPTION_EDITOR] == 1
            ) {
                require_once('grn/controller.csp');
                $property_list[GRN_WORKFLOW_COLUMN_DESCRIPTION]
                    = grn_wash_script_without_style_attribute($property_list[GRN_WORKFLOW_COLUMN_DESCRIPTION]);
            }
        }

        //Set Creator
        $this->_setCreator($property_list);

        //Create New Item
        $item_manager = $this->_getItemManager();
        $item_id = $item_manager->create($property_list);

        //Update Form
        require_once('workflow/form_logic.csp');
        $form_logic = GRN_Workflow_Form_Logic::getInstance();
        $form_logic->update($form_id);

        return $item_id;
    }

    function addBlankSpaceItem($form_id, $code, $br)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($form_id,
            E_GRN_WRKF_FORM_INVALID_ID);                //Form ID


        $code = CustomizationUtil::trimCode($code);
        if ($this->isDuplicationItemCode($form_id, $code)) {
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_COLLISION_ITEM_CODE);
        }


        //Create Property List
        $property_list = [
            GRN_WORKFLOW_COLUMN_TYPE        => GRN_WORKFLOW_ITEM_TYPE_BLANK_SPACE,
            GRN_WORKFLOW_COLUMN_CODE        => $code,
            GRN_WORKFLOW_COLUMN_FORM        => $form_id,
            GRN_WORKFLOW_COLUMN_FOREIGN_KEY => GRN_WORKFLOW_BLANK_SPACE_ITEM,
            GRN_WORKFLOW_COLUMN_BR          => $br,
            GRN_WORKFLOW_COLUMN_REQUIRED    => 0,
            GRN_WORKFLOW_COLUMN_EXPORT_DATA => 0,
        ];

        //Set Creator
        $this->_setCreator($property_list);

        //Create New Item
        $item_manager =& $this->_getItemManager();
        $item_id = $item_manager->create($property_list);

        //Update Form
        require_once('workflow/form_logic.csp');
        $form_logic = GRN_Workflow_Form_Logic::getInstance();
        $form_logic->update($form_id);

        return $item_id;
    }

    function modifyBlankSpaceItem($item_id, $form_id, $code, $br)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($form_id,
            E_GRN_WRKF_FORM_INVALID_ID);                //Form ID


        $before_modify_item = $this->get($item_id, $form_id);
        $code = CustomizationUtil::trimCode($code);
        if ($before_modify_item[GRN_WORKFLOW_COLUMN_CODE] != $code
            && $this->isDuplicationItemCode($form_id, $code)
        ) {
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_COLLISION_ITEM_CODE);
        }
        if ($before_modify_item[GRN_WORKFLOW_COLUMN_FOREIGN_KEY]
            != GRN_WORKFLOW_BLANK_SPACE_ITEM
        ) {
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_ITEM_NOT_FOUND);
        }

        //Create Property List
        $property_list = [
            GRN_WORKFLOW_COLUMN_TYPE        => GRN_WORKFLOW_ITEM_TYPE_BLANK_SPACE,
            GRN_WORKFLOW_COLUMN_CODE        => $code,
            GRN_WORKFLOW_COLUMN_FORM        => $form_id,
            GRN_WORKFLOW_COLUMN_BR          => $br,
            GRN_WORKFLOW_COLUMN_REQUIRED    => 0,
            GRN_WORKFLOW_COLUMN_EXPORT_DATA => 0,
        ];

        //Set Modifier
        $this->_setModifier($property_list);

        //Update Item
        $item_manager =& $this->_getItemManager();
        $item_id = $item_manager->update($item_id, $property_list);

        //Update Form
        require_once('workflow/form_logic.csp');
        $form_logic = GRN_Workflow_Form_Logic::getInstance();
        $form_logic->update($form_id);

        return $item_id;
    }

    /**
     * Add Standard Item
     *
     * @param  int $form_id //Form ID
     *
     * @return int    $item_id                   //Item ID
     */
    function addStandard($form_id)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($form_id,
            E_GRN_WRKF_FORM_INVALID_ID);                //Form ID

        //Serialize Settings
        $item_settings = [
            'size'               => 40,
            'max_input_size'     => null,
            'input_chars'        => 0,
            'initial_type'       => 0,
            'initial_text_value' => '',
            'initial_user_value' => '',
        ];
        $serialized_settings = serialize($item_settings);

        //Create Property List
        $property_list = [
            GRN_WORKFLOW_COLUMN_TYPE               => 1,
            GRN_WORKFLOW_COLUMN_FORM               => $form_id,
            GRN_WORKFLOW_COLUMN_FOREIGN_KEY        => 'grn.workflow.string_single',
            GRN_WORKFLOW_COLUMN_SETTINGS           => $serialized_settings,
            GRN_WORKFLOW_COLUMN_OPTION_STRING_TYPE => 0,
            GRN_WORKFLOW_COLUMN_OPTION_STRING      => '',
            GRN_WORKFLOW_COLUMN_DESCRIPTION        => '',
            GRN_WORKFLOW_COLUMN_DESCRIPTION_TYPE   => 0,
            GRN_WORKFLOW_COLUMN_DESCRIPTION_EDITOR => 0,
            GRN_WORKFLOW_COLUMN_BR                 => 1,
            GRN_WORKFLOW_COLUMN_REQUIRED           => 1,
            GRN_WORKFLOW_COLUMN_LIST_INDEX         => 0,
            GRN_WORKFLOW_COLUMN_ATTACH_FILE        => 1,
            GRN_WORKFLOW_COLUMN_ATTACH_FILE_VIEW   => 1,
            GRN_WORKFLOW_COLUMN_EXPORT_DATA        => 1,
        ];

        //Set Creator
        $this->_setCreator($property_list);

        //Create New Item
        $item_manager = $this->_getItemManager();
        $item_id = $item_manager->create($property_list);

        return $item_id;
    }

    /**
     * Add Blank To Item
     *
     * @param  int $form_id //Form ID
     *
     * @return int    $item_id                   //Item ID
     */
    function addBlank($form_id)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($form_id,
            E_GRN_WRKF_FORM_INVALID_ID);                //Form ID

        //Create Property List
        $property_list = [
            GRN_WORKFLOW_COLUMN_TYPE        => 2,
            GRN_WORKFLOW_COLUMN_FORM        => $form_id,
            GRN_WORKFLOW_COLUMN_FOREIGN_KEY => 'grn.workflow.blank',
            GRN_WORKFLOW_COLUMN_BR          => 1,
            GRN_WORKFLOW_COLUMN_REQUIRED    => 0,
            GRN_WORKFLOW_COLUMN_EXPORT_DATA => 0,
        ];

        //Set Creator
        $this->_setCreator($property_list);

        //Create New Item
        $item_manager =& $this->_getItemManager();
        $item_id = $item_manager->create($property_list);

        //Update Form
        require_once('workflow/form_logic.csp');
        $form_logic = GRN_Workflow_Form_Logic::getInstance();
        $form_logic->update($form_id);

        return $item_id;
    }

    /**
     * Modify Item
     *
     * @return int    $item_id                   //Item ID
     *
     * @param  int    $form_id              //Form ID
     * @param  string $foreign_key          //Foreign key
     * @param  string $display_name         //Foreign Key
     * @param  array  $option_settings      //Settings for Option String
     * @param  array  $description_settings //Settings for Description
     * @param  array  $item_settings        //Settings for Item
     * @param  int    $br                   //<BR>
     * @param  string $separator            //Separator
     * @param  int    $required             //Required Flag
     *
     * @return int    $item_id                   //Item ID
     */
    function modify(
        $item_id,
        $form_id,
        $foreign_key,
        $display_name,
        $code,
        $option_settings,
        $description_settings,
        $item_settings = [],
        $br = 1,
        $separator = null,
        $required = 0,
        $export_data = 0
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($item_id,
            E_GRN_WRKF_ITEM_INVALID_ID);                //Item ID
        cb_trim_check($form_id,
            E_GRN_WRKF_FORM_INVALID_ID);                //Form ID
        cb_trim_check($foreign_key,
            E_GRN_WRKF_ITEM_INVALID_FOREIGN_KEY);       //Foreign Key
        cb_trim_check($display_name,
            E_GRN_WRKF_ITEM_NOT_INPUT_NECESSARY);       //Display Name

        //Check Item Foreign Key
        require_once('workflow/item_resources.csp');
        $item_util =& grn_workflow_get_item_util($foreign_key);
        if ( ! $item_util) {
            //Invalid Foreign Key
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_ITEM_INVALID_FOREIGN_KEY);
        }

        $before_modify_item = $this->get($item_id, $form_id);
        $code = CustomizationUtil::trimCode($code);
        if ($before_modify_item['col_code'] != $code
            && $this->isDuplicationItemCode($form_id, $code)
        ) {
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_COLLISION_ITEM_CODE);
        }

        $export_data = (is_null($export_data)) ? 0 : $export_data;

        //Serialize Settings
        $serialized_settings = serialize($item_settings);

        //Create Property List
        $property_list = [
            GRN_WORKFLOW_COLUMN_DISPLAY_NAME => $display_name,
            GRN_WORKFLOW_COLUMN_CODE         => $code,
            GRN_WORKFLOW_COLUMN_FORM         => $form_id,
            GRN_WORKFLOW_COLUMN_FOREIGN_KEY  => $foreign_key,
            GRN_WORKFLOW_COLUMN_ITEM         => $item_id,
            GRN_WORKFLOW_COLUMN_SETTINGS     => $serialized_settings,
            GRN_WORKFLOW_COLUMN_BR           => $br,
            GRN_WORKFLOW_COLUMN_SEPARATOR    => $separator,
            GRN_WORKFLOW_COLUMN_REQUIRED     => $required,
            GRN_WORKFLOW_COLUMN_EXPORT_DATA  => $export_data,
        ];

        //Set Option Settings
        if (is_array($option_settings)) {
            foreach (array_keys($option_settings) as $key) {
                $col_name = 'col_' . $key;
                if ($col_name == GRN_WORKFLOW_COLUMN_OPTION_STRING_TYPE
                    || $col_name == GRN_WORKFLOW_COLUMN_OPTION_STRING
                ) {
                    $property_list[$col_name] = $option_settings[$key];
                }
            }
        }

        //Set Description Settings
        if (is_array($description_settings)) {
            foreach (array_keys($description_settings) as $key) {
                $col_name = 'col_' . $key;
                if ($col_name == GRN_WORKFLOW_COLUMN_DESCRIPTION
                    || $col_name == GRN_WORKFLOW_COLUMN_DESCRIPTION_TYPE
                    || $col_name == GRN_WORKFLOW_COLUMN_DESCRIPTION_EDITOR
                ) {
                    $property_list[$col_name] = $description_settings[$key];
                }
            }
            if (array_key_exists(GRN_WORKFLOW_COLUMN_DESCRIPTION,
                    $property_list)
                && array_key_exists(GRN_WORKFLOW_COLUMN_DESCRIPTION_EDITOR,
                    $property_list)
                && $property_list[GRN_WORKFLOW_COLUMN_DESCRIPTION_EDITOR] == 1
            ) {
                require_once('grn/controller.csp');
                $property_list[GRN_WORKFLOW_COLUMN_DESCRIPTION]
                    = grn_wash_script_without_style_attribute($property_list[GRN_WORKFLOW_COLUMN_DESCRIPTION]);
            }
        }

        //Set Modifier
        $this->_setModifier($property_list);

        //Update Item
        $item_manager =& $this->_getItemManager();
        $item_id = $item_manager->update($item_id, $property_list);

        //Update Form
        require_once('workflow/form_logic.csp');
        $form_logic = GRN_Workflow_Form_Logic::getInstance();
        $form_logic->update($form_id);

        return $item_id;
    }

    /**
     * @param integer $form_id
     * @param string  $item_code
     *
     * @return bool
     */
    function isDuplicationItemCode($form_id, $item_code)
    {
        if (strlen(cb_trim($item_code)) == 0) {
            return false;
        }
        $app_locator = GRN_ApplicationLocator::instance();
        $database = $app_locator->getConnection('workflow');
        $query
            = "SELECT COUNT(1) as total  FROM tab_grn_workflow_item  WHERE col_form = '@S' AND col_code COLLATE utf8mb4_bin ='@S' ";
        $query = cb_queryf($database, $query, $form_id, $item_code);
        $result = $database->query($query);
        $row = $database->fetch_assoc($result);

        return $row['total'] > 0 ? true : false;
    }

    /**
     * Delete Item
     *
     * @param int  $item_id //Item ID
     * @param BOOL $result  //Result
     */
    function delete($item_id)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($item_id, E_GRN_WRKF_ITEM_INVALID_ID);        //Item ID

        //Remove Item
        $item_manager =& $this->_getItemManager();
        $item_manager->remove($item_id);

        return true;
    }

    /**
     * Delete Multiple Item
     *
     * @param  array $item_id_list //Item ID List
     *
     * @return BOOL   $result                    //Result
     */
    function deleteMulti($item_id_list)
    {
        //Check Argument
        if ( ! is_array($item_id_list)) {
            //Not Input Necessary
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_ITEM_NOT_INPUT_NECESSARY);
        }

        //Get Fiest Item
        $item_id = current($item_id_list);
        $item = $this->getDirect($item_id);

        //Remove Item
        $item_manager =& $this->_getItemManager();
        $item_manager->removeMulti($item_id_list);

        //Update Form
        require_once('workflow/form_logic.csp');
        $form_logic = GRN_Workflow_Form_Logic::getInstance();
        $form_logic->update($item['col_form']);

        return true;
    }

    /**
     * Delete All Item
     *
     * @param  int $form_id //Form ID
     *
     * @return BOOL   $result                    //Result
     */
    function deleteAll($form_id = null)
    {
        //Remove Item
        $item_manager =& $this->_getItemManager();
        $item_manager->removeAll($form_id);

        //Update Form
        require_once('workflow/form_logic.csp');
        $form_logic = GRN_Workflow_Form_Logic::getInstance();
        $form_logic->update($form_id);

        return true;
    }

    /**
     * Change Item Order
     *
     * @param int  $item_id_list //Item ID List
     * @param BOOL $result       //Result
     */
    function changeOrder($item_id_list)
    {
        //Check Argument
        if ( ! is_array($item_id_list)) {
            require_once('fw/string_util.csp');
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_ITEM_NOT_INPUT_NECESSARY);
        }

        //Get Fiest Item
        $item_id = current($item_id_list);
        $item = $this->getDirect($item_id);

        //Change Order
        $item_manager =& $this->_getItemManager();
        $item_manager->changeOrder($item_id_list, 1);

        //Update Form
        require_once('workflow/form_logic.csp');
        $form_logic = GRN_Workflow_Form_Logic::getInstance();
        $form_logic->update($item['col_form']);

        return true;
    }

    /**
     * Copy Multiple Item
     *
     * @param  array $item_id_list //Item ID List
     * @param  int   $form_id      //Form ID
     * @param  int   $new_form_id  //New Form ID
     *
     * @return BOOL   $result                    //Result
     */
    function copyMulti(
        $item_id_list,
        $form_id = null,
        $new_form_id = null,
        $copy_applicant_access = false
    ) {
        //Check Argument
        if ( ! is_array($item_id_list)) {
            //Not Input Necessary
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_ITEM_NOT_INPUT_NECESSARY);
        }

        //Get Item List
        $item_manager =& $this->_getItemManager();
        $item_list =& $item_manager->getList($form_id);

        //Create Item ID Map
        $item_id_map = [];
        foreach (array_keys($item_list) as $item_id) {
            $item_id_map[$item_id] = $item_id;
        }

        //Copy Item List
        foreach ($item_id_list as $item_id) {
            $item = $item_list[$item_id];

            //Unset _id Property
            unset($item['_id']);

            //Change Display Name
            if ($item[GRN_WORKFLOW_COLUMN_TYPE] == 0 && is_null($new_form_id)) {
                $item[GRN_WORKFLOW_COLUMN_DISPLAY_NAME]
                    = cb_plain_msg(GRN_WORKFLOW_MODULE_ID, 'copy_format',
                    ['copy_name' => $item[GRN_WORKFLOW_COLUMN_DISPLAY_NAME]]);

            }
            $item[GRN_WORKFLOW_COLUMN_CODE] = null;
            //Set New Form
            if ( ! is_null($new_form_id)) {
                $item[GRN_WORKFLOW_COLUMN_FORM] = $new_form_id;
            } else {
                //Unset List Index
                unset($item[GRN_WORKFLOW_COLUMN_LIST_INDEX]);
            }

            if ($copy_applicant_access == false) {
                $item[GRN_WORKFLOW_COLUMN_ATTACH_FILE] = 1;
                $item[GRN_WORKFLOW_COLUMN_ATTACH_FILE_VIEW] = 1;
            }

            //Change Creator
            $this->_setCreator($item);

            //Convert Settings
            require_once('workflow/item_resources.csp');
            $foreign_key = $item[GRN_WORKFLOW_COLUMN_FOREIGN_KEY];
            $item_util =& grn_workflow_get_item_util($foreign_key);
            if ($item_util) {
                $item_util->convertSettings($item, $item_id_map);
            }

            //Add Item
            $item_id_map[$item_id] = $item_manager->create($item);
        }

        //Update Form
        if (isset($item_id) && is_null($new_form_id)) {
            if (array_key_exists($item_id, $item_list)) {
                $item =& $item_list[$item_id];
                require_once('workflow/form_logic.csp');
                $form_logic = GRN_Workflow_Form_Logic::getInstance();
                $form_logic->update($item['col_form']);
            }
        }

        //Return Item ID Map
        return $item_id_map;
    }

    /**
     * Set Attache File
     *
     * @return int    $item_id                   //Item ID
     *
     * @param  int $attach_file //Attach File Flag
     *
     * @return int    $item_id                   //Item ID
     */
    function setAttachFile($item_id, $attach_file, $attach_file_view = null)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($item_id,
            E_GRN_WRKF_ITEM_INVALID_ID);            //Item ID

        //Create Property List
        $property_list = [
            GRN_WORKFLOW_COLUMN_ATTACH_FILE      => $attach_file,
            GRN_WORKFLOW_COLUMN_ATTACH_FILE_VIEW => $attach_file_view,
        ];

        //Update Item
        $item_manager = $this->_getItemManager();
        $item_id = $item_manager->update($item_id, $property_list);

        //Update Form
        $item = $this->getDirect($item_id);
        require_once('workflow/form_logic.csp');
        $form_logic = GRN_Workflow_Form_Logic::getInstance();
        $form_logic->update($item['col_form']);

        return $item_id;
    }

    /**
     * Add Item By Import
     *
     * @param  int   $form_id       //Form ID
     * @param  array $property_list //Item Information
     *
     * @return int                              //Item ID
     */
    function addByImport($form_id, $property_list)
    {
        //Check Argument
//        cb_trim_check($property_list['col_foreign_key'], E_GRN_WRKF_ITEM_INVALID_FOREIGN_KEY);   //Foreign Key:呼び出し元でチェック済み

        //Create Property List
        $property_list[GRN_WORKFLOW_COLUMN_FORM] = $form_id;

        //Set Creator
        $this->_setCreator($property_list);

        //Create New Item
        $item_manager =& $this->_getItemManager();
        $item_id = $item_manager->create($property_list);

        return $item_id;
    }

    /**
     * Modify Item by Import File
     *   Cautin! Some of fields will be updated unless they aren't passed values.
     *
     * @return int    $item_id                   //Item ID
     *
     * @param  int   $form_id       //Form ID
     * @param  array $property_list //Item Property List
     *
     * @return int    $item_id                   //Item ID
     */
    function modifyByImport($item_id, $form_id, $property_list)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($item_id,
            E_GRN_WRKF_ITEM_INVALID_ID);                        //Item ID
//        cb_trim_check($property_list['foreign_key'],  E_GRN_WRKF_ITEM_INVALID_FOREIGN_KEY);  //Foreign Key:呼び出し元でチェック済み

        $item_type
            = $property_list['col_type'];                                      //Item Type(0,1,2)
        if (0 > $item_type || 3 < $item_type) {
            cb_throw_error();
        }

        if (GRN_WORKFLOW_ITEM_TYPE_ITEM
            == $item_type
        )                                //Display Name
        {
            cb_trim_check($property_list['col_display_name'],
                E_GRN_WRKF_ITEM_NOT_INPUT_NECESSARY);
        }

        //Create Property List
        $property_list[GRN_WORKFLOW_COLUMN_FORM] = $form_id;

        //Set Modifier
        $this->_setModifier($property_list);

        //Update Item
        $item_manager =& $this->_getItemManager();
        $item_id = $item_manager->update($item_id, $property_list);

        return $item_id;
    }

    /**
     * Check is include standard item
     *
     * @param       $form_id
     * @param array $item_list
     *
     * @return bool
     */
    public function checkIsIncludeStandardItem($form_id, $item_list)
    {
        $standard_item = $this->getStandardItemIid($form_id);
        if (in_array($standard_item, $item_list)) {
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_ITEM_INVALID_ID);
        }

        return true;
    }
}


