<?php

namespace grn\workflow\screen;

use grn\grn\customization\logic\ResourceLogic;
use grn\grn\customization\screen\FileDownload;
use grn\workflow\CustomizationUtil;

class WorkFlowCustomizationFileDownload extends FileDownload
{
    /**
     * @return string
     */
    protected function getAppId()
    {
        return 'workflow';
    }

    /**
     * @param string $file_id
     */
    protected function checkAccessRightOfFile($file_id)
    {
        if ( ! CustomizationUtil::allowCustomization()) {
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_CUSTOMIZATION_IS_DEACTIVATED);
        }

        $input = $this->getInput();
        $pid = cb_at($input, 'pid');
        $folder_id = cb_at($input, 'folder_id');
        $form_id = $this->getTargetForm($file_id);
        if (is_null($pid) || is_null($folder_id)) {
            if ( ! $this->canAccessFile($form_id)) {
                require_once('workflow/error_code.csp');
                cb_throw_error(E_GRN_WRKF_FORM_NOT_FOUND);
            }
        } else {
            $this->checkAccessFileByRequest($pid, $folder_id, $form_id);
        }
    }

    /**
     * @param string $form_id
     *
     * @return bool
     */
    private function canAccessFile($form_id)
    {

        if (cb_is_system_page()) {
            return true;
        }
        // check access category
        require_once('workflow/controller_util.csp');
        $form_util = \GRN_Workflow_Form_Controller_Utility::getInstance();
        $form_logic_base = $form_util->getLogicBase();
        $form = $form_logic_base->getDirect($form_id,
            ['_id', 'col_category', 'col_is_customization_active']);
        $category_util
            = \GRN_Workflow_Category_Controller_Utility::getInstance();

        if ( ! is_null($form['col_category'])
             && ! $category_util->checkAccess($form['col_category'], false,
                CB_DATABASE_NO_LOCK)
        ) {
            return false;
        }

        // check in opration screen
        if (cb_is_operation_page()) {
            if ( ! $category_util->checkManage($form['col_category'], false,
                CB_DATABASE_NO_LOCK)
            ) {
                return false;
            }

            return true;
        }

        if ( ! CustomizationUtil::applyCustomization($form['col_is_customization_active'])) {
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_USERS_FILE_NOT_FOUND);
        }

        return true;
    }

    /**
     * @param string $petition_id
     * @param string $folder_id
     * @param string $form_id
     */
    private function checkAccessFileByRequest(
        $petition_id,
        $folder_id,
        $form_id
    ) {
        require_once('workflow/controller_util.csp');
        $form_util = \GRN_Workflow_Form_Controller_Utility::getInstance();
        $form_logic_base = $form_util->getLogicBase();
        $form = $form_logic_base->getDirect($form_id,
            ['_id', 'col_category', 'col_is_customization_active']);
        if ( ! CustomizationUtil::applyCustomization($form['col_is_customization_active'])) {
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_USERS_FILE_NOT_FOUND);
        }
        $user_id = cb_get_login_user()->getOID();
        //Create Parameter Translation Map
        $translation_map_petition = [
            'pid'                    => '_id',
            //Petition ID
            'petition_number'        => 'petition_number',
            //Petition Number
            'name'                   => 'name',
            //Petition Name
            'form'                   => 'form',
            //Petition Form ID
            'form_name'              => 'form_name',
            //Petition Form Name
            'creator'                => 'creator',
            //Petition Creator
            'creator_name'           => 'creator_name',
            //Petition Creator Name
            'creator_foreign_key'    => 'creator_foreign_key',
            //Petition Creator Foreign Key
            'ctime'                  => 'ctime',
            //Petition Create Time
            'icon_type'              => 'icon_type',
            //Petition Icon Type
            'icon_id'                => 'icon_id',
            //Petition Icon ID
            'icon_url'               => 'icon_url',
            //Petition Icon URL
            'status'                 => 'status',
            'transactor'             => 'transactor',
            'transactor_name'        => 'transactor_name',
            'transactor_foreign_key' => 'transactor_foreign_key',
            'user'                   => 'user',
            'user_name'              => 'user_name',
            'user_foreign_key'       => 'user_foreign_key',
            'agent_user'             => 'agent_user',
            'agent_user_name'        => 'agent_user_name',
            'agent_user_foreign_key' => 'agent_user_foreign_key',
            'comment'                => 'comment',
            'ptime'                  => 'ptime',
            'reapply'                => 'reapply',
        ];

        //Get Petition for view
        $no_check = false;
        if ($folder_id == GRN_WORKFLOW_FOLDER_PUBLIC_ID) {
            require_once('workflow/controller_util.csp');
            $c = \GRN_Workflow_Category_Controller_Utility::getInstance();
            $r = $c->checkPublicByPetitionId($petition_id, false);
            if ( ! $r) {
                require_once('workflow/error_code.csp');
                cb_throw_error(E_GRN_WRKF_PETITION_DENY_ACCESS);
            }
            $no_check = true;
        } elseif ($folder_id == GRN_WORKFLOW_FOLDER_TYPE_APPROVAL_PLAN_ID) {
            // 承認予定の判断
            require_once('workflow/controller_util.csp');
            $c = \GRN_Workflow_Petition_Controller_Utility::getInstance();
            $r = $c->checkApprovalPlanByPetitionId($user_id, $petition_id);
            if ($r == true) {
                $no_check = true;
            } else {
                require_once('workflow/error_code.csp');
                cb_throw_error(E_GRN_WRKF_PETITION_DENY_ACCESS);
            }
        } else {
            require_once('workflow/folder_logic.csp');
            $logic = \GRN_Workflow_Folder_Logic::getInstance();
            $folder_org = $logic->getFolder($folder_id);
            $folder_user_id = $folder_org['col_user'];
            if ($user_id != $folder_user_id) {
                //代理承認の検証
                if ($folder_org['col_folder_type']
                    == GRN_WORKFLOW_FOLDER_TYPE_UNPROCESSED_ID
                ) {
                    require_once('workflow/config.csp');
                    $configs = \GRN_Workflow_Configs::getInstance();
                    $config =& $configs->getSystemConfig();
                    if ($config->isProxyApproval($user_id, $folder_user_id)) {
                        $user_id = $folder_user_id;
                        $no_check = true;
                    } else {
                        //公開申請データの閲覧権限のチェック
                        require_once('workflow/controller_util.csp');
                        $c
                            = \GRN_Workflow_Category_Controller_Utility::getInstance();
                        $r = $c->checkPublicByPetitionId($petition_id, false);
                        if ($r == true) {
                            $no_check = true;
                        }
                    }
                } else {
                    //公開申請データの閲覧権限のチェック
                    require_once('workflow/controller_util.csp');
                    $c
                        = \GRN_Workflow_Category_Controller_Utility::getInstance();
                    $r = $c->checkPublicByPetitionId($petition_id, false);
                    if ($r == true) {
                        $no_check = true;
                    }
                }
            }
        }

        require_once('workflow/controller_util.csp');
        $petition_util
            = \GRN_Workflow_Petition_Controller_Utility::getInstance();
        $petition = $petition_util->getView($petition_id,
            $translation_map_petition);

        if ($petition['form'] != $form_id) {
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_FORM_NOT_FOUND);
        }
        $controller_util = new \GRN_Workflow_ControllerUtil();
        $path_info = $controller_util->getPathInfoForView($user_id,
            $petition_id, $petition, $folder_id, $no_check,
            CB_DATABASE_NO_LOCK);

        if ( ! $no_check && ! $path_info['view']
             && $folder_id != GRN_WORKFLOW_FOLDER_APPROVAL_PLAN_ID
        ) {
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_USERS_FILE_NOT_FOUND);
        }

        // Block accesses by users in 'circular path'.
        if ($folder_id == GRN_WORKFLOW_FOLDER_APPROVAL_PLAN_ID) {
            require_once('workflow/controller_util.csp');
            $c = \GRN_Workflow_Petition_Controller_Utility::getInstance();
            $r = $c->checkApprovalPlanByPetitionId($user_id, $petition_id);
            if ( ! $r) {
                require_once('workflow/error_code.csp');
                cb_throw_error(E_GRN_WRKF_PETITION_DENY_ACCESS);
            }
        }
    }

    /**
     * @param string $file_id
     *
     * @return string
     */
    private function getTargetForm($file_id)
    {
        $resource_logic = new ResourceLogic('workflow');
        $target_form = $resource_logic->getTargetByFileID($file_id);
        $form_id
            = str_replace(WorkflowCustomizationResourceScreen::CUSTOMIZATION_TARGET,
            '', $target_form);

        return $form_id;
    }

}
