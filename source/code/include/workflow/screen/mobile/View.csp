<?php

namespace grn\workflow\screen\mobile;

class View extends MobileWorkflowScreenBase
{
    const HANDLE_PAGE = 'workflow/mobile/handle';
    const COMMAND_HANDLE_PAGE = 'workflow/mobile/command_handle';

    private $_fid;
    private $_petition_id;
    private $_petition;
    private $_priority;
    private $_change_path_history;
    private $_in_process;
    private $_path_steps;
    private $_path_step_total;
    private $_is_remand;
    private $_view;
    private $_handle_mode;
    private $_error;
    private $_change_path_history_total;
    private $_item_data_list;
    private $_user_id;
    private $_agent_id;
    private $_wf_operations;
    private $_has_editable_item = false;
    private $_remand_options;

    public function __construct($input)
    {
        parent::__construct($input);
        $this->checkArgFromInput([
            parent::ARG_FOLDER_ID,
            parent::ARG_PETITION_ID
        ], $input);
        $this->_init();
        //handle menu(accept, reject, remand, confirm with comment) AND confirm menu(without comment)
        $this->_wf_operations = array_merge($this->getHandleMenu(),
            $this->getConfirmMenu());
        if (count($this->_wf_operations) > 0) {
            $this->setMobileFooterBar(["workflow" => ['menu' => []]]);
        } else {
            $this->setMobileFooterBar();
        }
        //cancel, withdraw
        if (count($this->getCancelMenu()) > 0) {
            $this->setMobileOperateMenu([$this->getCancelMenu()]);
        }
    }

    public function fetch()
    {
        require_once('grn/smarty.csp');
        $t = new \GRN_Smarty();

        $current_page = $this->getTitle();
        $input = $this->getInput();
        if (array_key_exists('nid', $input)
            || array_key_exists('nhid', $input)
        ) {
            $this->assignBreadcrumbUpperPage($t, '', '', [], true);
        }
        $this->assignBreadcrumbCurrentPage($t, $current_page);
        $t->assign('fid', $this->_fid);
        $t->assign('pid', $this->_petition_id);
        $t->assign('petition', $this->_petition);
        $t->assign('priority', $this->_priority);
        $t->assign('change_path_history', $this->_change_path_history);
        $t->assign('in_process', $this->_in_process);
        $t->assign('path_steps', $this->_path_steps);
        $t->assign('path_step_total', $this->_path_step_total);
        $t->assign('is_remand', $this->_is_remand);
        $t->assign('view', $this->_view);
        $t->assign('handle_mode', $this->_handle_mode);
        $t->assign('error', $this->_error);
        $t->assign('change_path_history_total',
            $this->_change_path_history_total);
        $t->assign('item_data_list', $this->_item_data_list);
        $t->assign('user_id', $this->_user_id);
        $t->assign('agent_id', $this->_agent_id);
        $t->assign('wf_operations', $this->_wf_operations);
        require_once('grn/controller.csp');
        $t->assign('tmp_key', grn_get_temporary_key());
        $t->assign('has_editable_item', $this->_has_editable_item);

        return $t->fetch('workflow/mobile/view.tpl');
    }

    private function _init()
    {
        require_once('workflow/resources.csp');
        $page_name = cb_get_pagename();

        $uum = $this->getUum();
        $folder_id = $this->getFolderId();
        $petition_id = $this->getPetitionId();

        $controller_util = null;
        $path_steps = null;

        require_once('workflow/folder_logic.csp');
        $logic = \GRN_Workflow_Folder_Logic::getInstance();
        $folder_org = $logic->getFolder($folder_id);
        $folder_user_id = $folder_org['col_user'];

        $user_id = $this->getLoginUserId();
        $agent_id = null;
        $is_public = null;
        if ($user_id != $folder_user_id) {
            //代理承認の検証
            require_once('workflow/config.csp');
            $configs = \GRN_Workflow_Configs::getInstance();
            $config = $configs->getSystemConfig();
            if ($config->isProxyApproval($user_id, $folder_user_id)) {
                require_once('workflow/controller_util.csp');
                $controller_util = new \GRN_Workflow_ControllerUtil($page_name);
                $path_steps
                    = $controller_util->getPathInfo($petition_id,
                    true, CB_DATABASE_NO_LOCK);
                $path_steps_current = current($path_steps);
                $path_step
                    = $controller_util->getInProcessPathStep($path_steps_current);

                if ( ! $path_step
                     || $path_step['col_type'] == GRN_WORKFLOW_CIRCULAR
                ) {
                    cb_throw_error(E_GRN_WRKF_PETITION_DENY_ACCESS);
                }
                // 代理承認
                $agent_id = $user_id;
                $user_id = $folder_user_id;
            } elseif ( ! is_null($petition_id)) {
                // 公開申請データの閲覧権限
                require_once('workflow/controller_util.csp');
                $c = \GRN_Workflow_Category_Controller_Utility::getInstance();
                $is_public = $c->checkPublicByPetitionId($petition_id, false);
            } else {
                cb_throw_error(E_GRN_WRKF_PETITION_DENY_ACCESS);
            }
            if (GRN_WORKFLOW_FOLDER_TYPE_UNPROCESSED_ID
                != $folder_org['col_folder_type']
            ) {
                // フォルダは未処理一覧でない
                cb_throw_error(E_GRN_WRKF_FOLDER_INVALID_FOLDER_ID);
            }
        }

        $folder = $logic->getByForeignKey($user_id,
            'UNPROCESSED_FOLDER_FOREIGN_KEY');
        if (is_array($folder) && 0 < count($folder)) {
            $folder_id = $folder['_id'];
        }
        $this->_fid = $folder_id;
        $this->_petition_id = $petition_id;

        //Get Petition and Item Data Controller Utility
        require_once('workflow/controller_util.csp');
        $petition_util
            = \GRN_Workflow_Petition_Controller_Utility::getInstance();
        $item_data_util
            = \GRN_Workflow_ItemData_Controller_Utility::getInstance();

        //Create Parameter Translation Map
        $translation_map_petition = [
            'pid'                          => '_id',
            //Petition ID
            'petition_number'              => 'petition_number',
            //Petition Number
            'name'                         => 'name',
            //Petition Name
            'form_name'                    => 'form_name',
            //Petition Form Name
            'creator'                      => 'creator',
            //Petition Creator
            'creator_name'                 => 'creator_name',
            //Petition Creator Name
            'creator_foreign_key'          => 'creator_foreign_key',
            //Petition Creator Foreign Key
            'ctime'                        => 'ctime',
            //Petition Create Time
            'icon_type'                    => 'icon_type',
            //Petition Icon Type
            'icon_id'                      => 'icon_id',
            //Petition Icon ID
            'icon_url'                     => 'icon_url',
            //Petition Icon URL
            'status'                       => 'status',
            'transactor'                   => 'transactor',
            'transactor_name'              => 'transactor_name',
            'transactor_foreign_key'       => 'transactor_foreign_key',
            'user'                         => 'user',
            'user_name'                    => 'user_name',
            'user_foreign_key'             => 'user_foreign_key',
            'comment'                      => 'comment',
            'ptime'                        => 'ptime',
            'reapply'                      => 'reapply',
            'priority'                     => 'priority',
            'agent_user'                   => 'agent_user',
            'agent_user_name'              => 'agent_user_name',
            'agent_transactor'             => 'agent_transactor',
            'agent_transactor_name'        => 'agent_transactor_name',
            'agent_transactor_foreign_key' => 'agent_transactor_foreign_key',
        ];

        //Create Parameter Translation Map
        $translation_map_item_data = [
            //Item Data Information
            'iid'                => 'itemdata_id',
            //Item Data ID
            'petition'           => 'petition',
            //Petition ID
            'display_name'       => 'itemdata_display_name',
            //Item Data Display Name
            'type'               => 'itemdata_type',
            //Item Data Type
            'option_string'      => 'itemdata_option_string',
            //Item Data Option String
            'option_string_type' => 'itemdata_option_string_type',
            //Item Data Option String Type
            'foreign_key'        => 'itemdata_foreign_key',
            //Item Data foreign_key
            'attach_file'        => 'itemdata_attach_file',
            //Item Data Attach File
            'attach_file_view'   => 'itemdata_attach_file_view',
            //Item Data Attach File View
            'settings'           => 'itemdata_settings',
            //Item Data Settings
            'br'                 => 'itemdata_br',
            //Item Data <br> Flag
            'separator'          => 'itemdata_separator',
            //Item Data Separator
            'required'           => 'itemdata_required',
            //Item Data Reuired Flag
            'list_index'         => 'itemdata_list_index',
            //Item Data List Index
            'number'             => 'itemdata_number',
            //Item Data Number Value
            'text'               => 'itemdata_text',
            //Item Data text Value
            //Item Data File Information
            'fid'                => 'itemdatafile_id',
            //Item Data File ID
            'file'               => 'itemdatafile_file',
            //Item Data File ID
            'files'              => 'itemdata_files',
            //Item Data File ID
        ];

        //Get Petition for view
        $petition = $petition_util->getView($petition_id,
            $translation_map_petition);

        $ptime = new \CB_TimeStamp();
        $ptime->unix_ts = $petition['ptime'];
        $petition['ptime'] = $ptime;

        $applicant = $uum->getUser($petition['user']);
        if ($applicant) {
            $petition['user_valid'] = $applicant->get('valid');
        }
        $applicant = $uum->getUser($petition['agent_user']);
        if ($applicant) {
            $petition['agent_user_valid'] = $applicant->get('valid');
        }

        if (array_key_exists('transactor', $petition)) {
            $transactor = $uum->getUser($petition['transactor']);
            if ($transactor) {
                $petition['transactor_valid'] = $transactor->get('valid');
            }
        }
        if (array_key_exists('agent_transactor', $petition)) {
            $transactor = $uum->getUser($petition['agent_transactor']);
            if ($transactor) {
                $petition['agent_transactor_valid'] = $transactor->get('valid');
            }
        }

        $this->_petition = $petition;

        //priority
        $priority = '';
        if ( ! is_null($petition['priority'])
             && strlen($petition['priority']) > 0
             && $petition['priority'] != 0
        ) {
            require_once('workflow/properties.csp');
            $properties_logic = \GRN_Workflow_Properties::getInstance();
            $property = $properties_logic->get('priority');
            foreach ($property['options'] as $option) {
                if ($option['value'] == $petition['priority']) {
                    $priority = htmlspecialchars($option['label']);
                    break;
                }
            }
        }
        $this->_priority = $priority;

        if ($controller_util == null) {
            require_once('workflow/controller_util.csp');
            $controller_util = new \GRN_Workflow_ControllerUtil($page_name);
        }

        //Get Item Data List for view
        $item_data_list
            = $item_data_util->getListViewEx($translation_map_item_data,
            $petition_id, null, true);

        //Unset Standard Item
        $current_item_data = current($item_data_list);
        unset($item_data_list[$current_item_data['iid']]);

        //Create Item Layout
        $current = null;
        $previous = null;
        foreach (array_keys($item_data_list) as $item_data_id) {
            //Check Calc Numeric Not Display Parameter
            if ($item_data_list[$item_data_id]['foreign_key']
                == 'grn.workflow.calc_numeric'
            ) {
                if ($item_data_list[$item_data_id]['settings']['not_display']
                    == 1
                ) {
                    unset($item_data_list[$item_data_id]);
                    continue;
                }
            }
            //Check Previous Item
            if ( ! is_null($previous)) {
                if ($previous['type'] != 0) {
                    //Force Set br Flag
                    $item_data_list[$item_data_id]['br'] = 1;
                }
            } else {
                //Force Set br Flag
                $item_data_list[$item_data_id]['br'] = 1;
            }
            //Set Previous Item
            $previous =& $item_data_list[$item_data_id];
            //Check Current or Sub Item
            if ($item_data_list[$item_data_id]['br'] == 1) {
                $current =& $item_data_list[$item_data_id];
                $current['sub_item_data_list'] = [];
                $current['total_required'] = $current['required'];
                if (array_key_exists('right_align',
                        $item_data_list[$item_data_id]['settings'])
                    && $item_data_list[$item_data_id]['settings']['right_align']
                ) {
                    $current['right_align_flag'] = 1;
                }
            } else {
                if (array_key_exists('right_align',
                        $item_data_list[$item_data_id]['settings'])
                    && $item_data_list[$item_data_id]['settings']['right_align']
                ) {
                    $current['right_align_flag'] = 1;
                }
                $current['sub_item_data_list'][$item_data_id]
                    = $item_data_list[$item_data_id];
                $current['sub_item_data_count']
                    = count($current['sub_item_data_list']);
                if ($item_data_list[$item_data_id]['required'] == 1) {
                    $current['total_required'] = 1;
                }
                unset($item_data_list[$item_data_id]);
            }
        }

        /**
         * 経路にいる人には見せる（ただし内容を見せない）
         * 経路にいない人には見せない（エラー）
         */
        if ($path_steps == null) {
            $path_steps = $controller_util->getPathInfo($petition_id, true,
                CB_DATABASE_NO_LOCK);
        }
        $path_step_total = $controller_util->getPathStepCount($path_steps);

        $view = false;
        $handle_mode = 'confirm';
        if (@ $petition['reapply']) {
            $handle_mode = 'reapply';
        }

        require_once('workflow/change_path_history.csp');
        $logic = \GRN_Workflow_ChangePathHistories::getInstance();
        $columns = [
            '_id',
            'col_path_step_data',
            'col_comment',
            'col_creator',
            'col_creator_name',
            'col_creator_foreign_key',
            'col_ctime'
        ];
        $change_path_histories = $logic->getListByPetitionId($petition_id,
            $columns);

        $deleted_users = [];
        $change_path_history = null;
        if (is_array($change_path_histories)
            && 0 < count($change_path_histories)
        ) {
            $logic = \GRN_Workflow_ChangePathDeletedUsers::getInstance();
            $columns = [
                '_id',
                'col_change_path_history',
                'col_user'
            ];
            $tmp = $logic->getList(array_keys($change_path_histories),
                $user_id, $columns);
            foreach ($tmp as $deleted_user) {
                $change_path_history_id
                    = $deleted_user['col_change_path_history'];
                $change_path_history
                    = $change_path_histories[$change_path_history_id];
                $path_step_data_id
                    = $change_path_history['col_path_step_data'];
                if (array_key_exists($path_step_data_id, $deleted_users)) {
                    $deleted_users[$path_step_data_id] = [];
                }
                $deleted_users[$path_step_data_id][$deleted_user['col_user']]
                    = $deleted_user;
            }
        }

        $in_process = null;
        $in_path = false;
        $in_evaluated_path = false;
        $col_finished = GRN_WORKFLOW_FINISHED_NONE;
        $options = [];
        $options['applicant'] = cb_msg('grn.workflow', 'GRMSG_WF_2');
        foreach (array_keys($path_steps) as $path_step_id) {
            $path_step =& $path_steps[$path_step_id];
            $path_step_data_id = $path_step['_id'];

            if ($path_step['col_activate']) {
                if ($path_step['col_skip']) {
                    if (array_key_exists($path_step_data_id, $deleted_users)) {
                        if (array_key_exists($user_id,
                            $deleted_users[$path_step_data_id])
                        ) {
                            $handle_mode = 'change_transactor';
                            $in_path = true;
                            $in_evaluated_path = true;

                            $deleted_user
                                = $deleted_users[$path_step_data_id][$user_id];
                            $change_path_history_id
                                = $deleted_user['col_change_path_history'];
                            $change_path_history
                                = $change_path_histories[$change_path_history_id];

                            $timestamp = new \CB_TimeStamp();
                            $timestamp->unix_ts
                                = $change_path_history['col_ctime'];
                            $change_path_history['col_ctime']
                                = clone $timestamp;

                            $logic
                                = \GRN_Workflow_ChangePathDeletedUsers::getInstance();
                            $columns = [
                                'tab_grn_workflow_changepathdeleteduser' => [
                                    '_id'              => '_id',
                                    'col_user'         => 'col_user',
                                    'col_display_name' => 'col_old_display_name',
                                    'col_foreign_key'  => 'col_foreign_key'
                                ],
                                'tab_cb_user'                            => [
                                    'col_display_name' => 'col_display_name',
                                    'col_valid'        => 'col_valid'
                                ]
                            ];
                            $change_path_history['deleted_users']
                                = $logic->getSortedList([$change_path_history_id],
                                $columns);
                            $logic
                                = \GRN_Workflow_ChangePathAddUsers::getInstance();
                            $columns = [
                                'tab_grn_workflow_changepathadduser' => [
                                    '_id'              => '_id',
                                    'col_user'         => 'col_user',
                                    'col_display_name' => 'col_old_display_name',
                                    'col_foreign_key'  => 'col_foreign_key'
                                ],
                                'tab_cb_user'                        => [
                                    'col_display_name' => 'col_display_name',
                                    'col_valid'        => 'col_valid'
                                ]
                            ];
                            $change_path_history['add_users']
                                = $logic->getSortedList([$change_path_history_id],
                                $columns);
                        }
                    }
                } else {
                    if ( ! $in_process) {
                        // 処理中/完了した経路ステップ
                        if ( ! $path_step['col_finished']) {
                            // 処理中の経路ステップ
                            $path_step['in_process'] = true;
                            $in_process = $path_step_id;

                            if (false !== array_search($user_id,
                                    $path_step['uids'])
                            ) {
                                $view = true;
                                $handle_mode = null;
                                $in_path = true;
                                $in_evaluated_path = true;
                                break;
                            } else {
                                $psdids = [];
                                //代理承認対応により、承認経路を遡る(previous)
                                while ($path_step) {
                                    if ($path_step['col_activate']) {
                                        $path_step_data_id = $path_step['_id'];
                                        $psdids[] = $path_step_data_id;
                                        if (false !== ($result
                                                = array_search($user_id,
                                                $path_step['uids']))
                                        ) {
                                            if (GRN_WORKFLOW_RESULT_CONFIRM
                                                == $path_step['users'][$result]['col_result']
                                                && $path_step['col_acceptance_type']
                                            ) {
                                                $view = true;
                                            } elseif (GRN_WORKFLOW_RESULT_ACCEPT
                                                      < $path_step['users'][$result]['col_result']
                                            ) {
                                                $view = true;
                                                $handle_mode = 'view_only';
                                            } else {
                                                $view = true;
                                            }
                                            $in_path = true;
                                            $in_evaluated_path = true;
                                            break;
                                        } elseif (array_key_exists($path_step_data_id,
                                            $deleted_users)
                                        ) {
                                            if (array_key_exists($user_id,
                                                $deleted_users[$path_step_data_id])
                                            ) {
                                                $handle_mode
                                                    = 'change_transactor';
                                                $in_path = true;
                                                $in_evaluated_path = true;

                                                $deleted_user
                                                    = $deleted_users[$path_step_data_id][$user_id];
                                                $change_path_history_id
                                                    = $deleted_user['col_change_path_history'];
                                                $change_path_history
                                                    = $change_path_histories[$change_path_history_id];

                                                $timestamp
                                                    = new \CB_TimeStamp();
                                                $timestamp->unix_ts
                                                    = $change_path_history['col_ctime'];
                                                $change_path_history['col_ctime']
                                                    = clone $timestamp;

                                                $logic
                                                    = \GRN_Workflow_ChangePathDeletedUsers::getInstance();
                                                $columns = [
                                                    'tab_grn_workflow_changepathdeleteduser' => [
                                                        '_id'              => '_id',
                                                        'col_user'         => 'col_user',
                                                        'col_display_name' => 'col_old_display_name',
                                                        'col_foreign_key'  => 'col_foreign_key'
                                                    ],
                                                    'tab_cb_user'                            => [
                                                        'col_display_name' => 'col_display_name',
                                                        'col_valid'        => 'col_valid'
                                                    ]
                                                ];
                                                $change_path_history['deleted_users']
                                                    = $logic->getSortedList([$change_path_history_id],
                                                    $columns);

                                                $logic
                                                    = \GRN_Workflow_ChangePathAddUsers::getInstance();
                                                $columns = [
                                                    'tab_grn_workflow_changepathadduser' => [
                                                        '_id'              => '_id',
                                                        'col_user'         => 'col_user',
                                                        'col_display_name' => 'col_old_display_name',
                                                        'col_foreign_key'  => 'col_foreign_key'
                                                    ],
                                                    'tab_cb_user'                        => [
                                                        'col_display_name' => 'col_display_name',
                                                        'col_valid'        => 'col_valid'
                                                    ]
                                                ];
                                                $change_path_history['add_users']
                                                    = $logic->getSortedList([$change_path_history_id],
                                                    $columns);
                                                break;
                                            }
                                        }
                                    }
                                    $path_step =& $path_step['previous'];
                                }
                            }
                        } else {
                            // 完了した経路ステップ
                            if (false !== array_search($user_id,
                                    $path_step['uids'])
                            ) {
                                $in_path = true;
                                if (GRN_WORKFLOW_STATUS_REJECTION
                                    == $petition['status']
                                    || GRN_WORKFLOW_STATUS_REMAND
                                       == $petition['status']
                                ) {
                                    if (GRN_WORKFLOW_FINISHED_REJECTION
                                        != $col_finished
                                        && GRN_WORKFLOW_FINISHED_REMAND
                                           != $col_finished
                                    ) {
                                        $view = true;
                                        $in_evaluated_path = true;
                                    }
                                } else {
                                    $view = true;
                                    $in_evaluated_path = true;
                                }
                            } else {
                                if (array_key_exists($path_step_data_id,
                                    $deleted_users)
                                ) {
                                    if (array_key_exists($user_id,
                                        $deleted_users[$path_step_data_id])
                                    ) {
                                        $handle_mode = 'change_transactor';
                                        $in_path = true;
                                        $in_evaluated_path = true;

                                        $deleted_user
                                            = $deleted_users[$path_step_data_id][$user_id];
                                        $change_path_history_id
                                            = $deleted_user['col_change_path_history'];
                                        $change_path_history
                                            = $change_path_histories[$change_path_history_id];

                                        $timestamp = new \CB_TimeStamp();
                                        $timestamp->unix_ts
                                            = $change_path_history['col_ctime'];
                                        $change_path_history['col_ctime']
                                            = clone $timestamp;

                                        $logic
                                            = \GRN_Workflow_ChangePathDeletedUsers::getInstance();
                                        $columns
                                            = [
                                            'tab_grn_workflow_changepathdeleteduser' => [
                                                '_id'              => '_id',
                                                'col_user'         => 'col_user',
                                                'col_display_name' => 'col_old_display_name',
                                                'col_foreign_key'  => 'col_foreign_key'
                                            ],
                                            'tab_cb_user'                            => [
                                                'col_display_name' => 'col_display_name',
                                                'col_valid'        => 'col_valid'
                                            ]
                                        ];
                                        $change_path_history['deleted_users']
                                            = $logic->getSortedList([$change_path_history_id],
                                            $columns);

                                        $logic
                                            = \GRN_Workflow_ChangePathAddUsers::getInstance();
                                        $columns = [
                                            'tab_grn_workflow_changepathadduser' => [
                                                '_id'              => '_id',
                                                'col_user'         => 'col_user',
                                                'col_display_name' => 'col_old_display_name',
                                                'col_foreign_key'  => 'col_foreign_key'
                                            ],
                                            'tab_cb_user'                        => [
                                                'col_display_name' => 'col_display_name',
                                                'col_valid'        => 'col_valid'
                                            ]
                                        ];
                                        $change_path_history['add_users']
                                            = $logic->getSortedList([$change_path_history_id],
                                            $columns);
                                    }
                                }
                            }
                            if (GRN_WORKFLOW_STATUS_REJECTION
                                == $petition['status']
                                || GRN_WORKFLOW_STATUS_REMAND
                                   == $petition['status']
                            ) {
                                if (GRN_WORKFLOW_FINISHED_REJECTION
                                    == $path_step['col_finished']
                                    || GRN_WORKFLOW_FINISHED_REMAND
                                       == $path_step['col_finished']
                                ) {
                                    $col_finished = $path_step['col_finished'];
                                }
                            }
                        }
                        $options[$path_step['_id']] = $path_step['col_role'];
                        $path_step['not_modify'] = true;
                    } else {
                        // 未処理の経路ステップ
                        if (false !== array_search($user_id,
                                $path_step['uids'])
                        ) {
                            $in_path = true;
                            if (GRN_WORKFLOW_STATUS_REJECTION
                                == $petition['status']
                                || GRN_WORKFLOW_STATUS_REMAND
                                   == $petition['status']
                            ) {
                                if (GRN_WORKFLOW_FINISHED_REJECTION
                                    != $col_finished
                                    && GRN_WORKFLOW_FINISHED_REMAND
                                       != $col_finished
                                ) {
                                    $view = true;
                                    $in_evaluated_path = true;
                                }
                            }
                            break;
                        }

                        if (GRN_WORKFLOW_STATUS_REJECTION == $petition['status']
                            || GRN_WORKFLOW_STATUS_REMAND == $petition['status']
                        ) {
                            if (GRN_WORKFLOW_FINISHED_REJECTION
                                == $path_step['col_finished']
                                || GRN_WORKFLOW_FINISHED_REMAND
                                   == $path_step['col_finished']
                            ) {
                                $col_finished = $path_step['col_finished'];
                            }
                        }
                        $path_step['not_modify'] = false;
                    }
                }
            }
        }

        // Check view/edit Right to Item.
        require_once('workflow/change_access_data.csp');
        $change_access_data_logic
            = \GRN_Workflow_ChangeAccessData::getInstance();
        if ($in_process) {
            if ($handle_mode == 'change_transactor') {
                //経路変更
                if ($petition['user'] == $user_id
                    || $petition['agent_user'] == $user_id
                ) {
                    //申請者なら
                    foreach (array_keys($item_data_list) as $item_data_id) {
                        if ($item_data_list[$item_data_id]['foreign_key']
                            == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                            || $item_data_list[$item_data_id]['foreign_key']
                               == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                            || $item_data_list[$item_data_id]['foreign_key']
                               == GRN_WORKFLOW_CONDITION_ITEM_DATE
                            || $item_data_list[$item_data_id]['foreign_key']
                               == GRN_WORKFLOW_CONDITION_ITEM_FILE
                            || $item_data_list[$item_data_id]['foreign_key']
                               == GRN_WORKFLOW_CONDITION_ITEM_NUMERIC
                        ) {
                            if ($item_data_list[$item_data_id]['attach_file_view']
                                == 1
                            ) {
                                $item_data_list[$item_data_id]['view_mode']
                                    = 'view';
                            } else {
                                $item_data_list[$item_data_id]['view_mode']
                                    = 'disable';
                            }
                        }
                    }
                } else {
                    $users = $path_steps[$in_process]['uids'];
                    $user_step_id = null;
                    $access_mode_view_only = false;
                    if (($r = array_search($user_id, $users)) === false) {
                        //現在の経路にいない
                        //経路にいるかどうかの判定
                        //申請者の方向に向かって判定
                        $access_mode_view_only = true;
                        $path_step_ids_tmp = array_keys($path_steps);
                        $path_step_ids = [];
                        foreach ($path_step_ids_tmp as $path_step_id) {
                            if ($path_step_id == $in_process) {
                                $path_step_ids[] = $path_step_id;
                                break;
                            }
                            $path_step_ids[] = $path_step_id;
                        }
                        $path_step_ids = array_reverse($path_step_ids);

                        // 経路にユーザーが含まれているかどうか
                        for ($i = 0; $i < count($path_step_ids); $i++) {
                            $path_step_temp =& $path_steps[$path_step_ids[$i]];
                            if ( ! $path_step_temp['col_activate']
                                 || $path_step_temp['col_skip']
                            ) {
                                // アクティブではないか省略の経路ステップは外す
                                continue;
                            }
                            $users = $path_step_temp['users'];
                            for ($j = 0; $j < count($users); $j++) {
                                if ($user_id == $users[$j]['col_user']) {
                                    $user_step_id = $path_step_ids[$i];
                                    break 2;
                                }
                            }
                        }
                    } else {
                        $user_step_id = $in_process;
                    }
                    if ( ! is_null($user_step_id)) {
                        foreach (array_keys($item_data_list) as $item_data_id) {
                            $change_access
                                = $change_access_data_logic->evaluateEx($item_data_list[$item_data_id]['iid'],
                                $user_step_id);
                            if ($change_access['col_view'] == 1
                                && $change_access['col_edit'] == 1
                            ) {
                                if ($petition['status']
                                    != GRN_WORKFLOW_STATUS_UNPROCESSING_CANCEL
                                    && $petition['status']
                                       != GRN_WORKFLOW_STATUS_IN_PROCESS_CANCEL
                                ) {
                                    if ($access_mode_view_only == false) {
                                        $item_data_list[$item_data_id]['view_mode']
                                            = parent::MOBILE_ITEM_DATA_EDIT_MODE;
                                        $item_data_list[$item_data_id]['mobile_view_mode']
                                            = 'edit';
                                        $this->_has_editable_item = true;
                                    } else {
                                        $item_data_list[$item_data_id]['view_mode']
                                            = 'view';
                                    }
                                } else {
                                    $item_data_list[$item_data_id]['view_mode']
                                        = 'view';
                                }
                            } elseif ($change_access['col_view'] == 1
                                      && $change_access['col_edit'] != 1
                            ) {
                                $item_data_list[$item_data_id]['view_mode']
                                    = 'view';
                            } elseif ($change_access['col_view'] != 1) {
                                $item_data_list[$item_data_id]['view_mode']
                                    = 'disable';
                            }

                            if (array_key_exists('sub_item_data_list',
                                    $item_data_list[$item_data_id])
                                && is_array($item_data_list[$item_data_id]['sub_item_data_list'])
                            ) {
                                foreach (
                                    array_keys($item_data_list[$item_data_id]['sub_item_data_list'])
                                    as $sub_item_data_id
                                ) {
                                    $change_access
                                        = $change_access_data_logic->evaluateEx($item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['iid'],
                                        $user_step_id);
                                    if ($change_access['col_view'] == 1
                                        && $change_access['col_edit'] == 1
                                    ) {
                                        if ($petition['status']
                                            != GRN_WORKFLOW_STATUS_UNPROCESSING_CANCEL
                                            && $petition['status']
                                               != GRN_WORKFLOW_STATUS_IN_PROCESS_CANCEL
                                        ) {
                                            if ($access_mode_view_only
                                                == false
                                            ) {
                                                $item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['view_mode']
                                                    = parent::MOBILE_ITEM_DATA_EDIT_MODE;
                                                $item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['mobile_view_mode']
                                                    = 'edit';
                                                $this->_has_editable_item
                                                    = true;
                                            } else {
                                                $item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['view_mode']
                                                    = 'view';
                                            }
                                        } else {
                                            $item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['view_mode']
                                                = 'view';
                                        }
                                    } elseif ($change_access['col_view'] == 1
                                              && $change_access['col_edit'] != 1
                                    ) {
                                        $item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['view_mode']
                                            = 'view';
                                    } elseif ($change_access['col_view'] != 1) {
                                        $item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['view_mode']
                                            = 'disable';
                                    }
                                }
                            }
                        }
                    } else {
                        //申請者かどうか
                        if ($petition['user'] == $user_id
                            || $petition['agent_user'] == $user_id
                        ) {
                            //申請者なら
                            foreach (
                                array_keys($item_data_list) as $item_data_id
                            ) {
                                if ($item_data_list[$item_data_id]['foreign_key']
                                    == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                                    || $item_data_list[$item_data_id]['foreign_key']
                                       == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                                    || $item_data_list[$item_data_id]['foreign_key']
                                       == GRN_WORKFLOW_CONDITION_ITEM_DATE
                                    || $item_data_list[$item_data_id]['foreign_key']
                                       == GRN_WORKFLOW_CONDITION_ITEM_FILE
                                    || $item_data_list[$item_data_id]['foreign_key']
                                       == GRN_WORKFLOW_CONDITION_ITEM_NUMERIC
                                ) {
                                    if ($item_data_list[$item_data_id]['attach_file_view']
                                        == 1
                                    ) {
                                        $item_data_list[$item_data_id]['view_mode']
                                            = 'view';
                                    } else {
                                        $item_data_list[$item_data_id]['view_mode']
                                            = 'disable';
                                    }
                                }
                            }
                        } else {
                            //どこの経路にもいない
                            foreach (
                                array_keys($item_data_list) as $item_data_id
                            ) {
                                if ($item_data_list[$item_data_id]['foreign_key']
                                    == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                                    || $item_data_list[$item_data_id]['foreign_key']
                                       == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                                    || $item_data_list[$item_data_id]['foreign_key']
                                       == GRN_WORKFLOW_CONDITION_ITEM_DATE
                                    || $item_data_list[$item_data_id]['foreign_key']
                                       == GRN_WORKFLOW_CONDITION_ITEM_FILE
                                    || $item_data_list[$item_data_id]['foreign_key']
                                       == GRN_WORKFLOW_CONDITION_ITEM_NUMERIC
                                ) {
                                    $item_data_list[$item_data_id]['view_mode']
                                        = 'disable';
                                }
                            }
                        }
                    }
                }
            } else {
                if ($handle_mode == 'confirm' && $in_path == false
                    && ($petition['user'] == $user_id
                        || $petition['agent_user'] == $user_id)
                ) {
                    //確認で経路にいなくて申請者なら
                    foreach (array_keys($item_data_list) as $item_data_id) {
                        if ($item_data_list[$item_data_id]['foreign_key']
                            == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                            || $item_data_list[$item_data_id]['foreign_key']
                               == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                            || $item_data_list[$item_data_id]['foreign_key']
                               == GRN_WORKFLOW_CONDITION_ITEM_DATE
                            || $item_data_list[$item_data_id]['foreign_key']
                               == GRN_WORKFLOW_CONDITION_ITEM_FILE
                            || $item_data_list[$item_data_id]['foreign_key']
                               == GRN_WORKFLOW_CONDITION_ITEM_NUMERIC
                        ) {
                            if ($item_data_list[$item_data_id]['attach_file_view']
                                == 1
                            ) {
                                $item_data_list[$item_data_id]['view_mode']
                                    = 'view';
                            } else {
                                $item_data_list[$item_data_id]['view_mode']
                                    = 'disable';
                            }
                        }
                    }
                } else {
                    $users = $path_steps[$in_process]['uids'];
                    $user_step_id = null;
                    $access_mode_view_only = false;
                    if (($r = array_search($user_id, $users)) === false) {
                        if ( ! is_null($agent_id) && strlen($agent_id) > 0) {
                            cb_throw_error(E_GRN_WRKF_PETITION_DENY_ACCESS);
                        }

                        //現在の経路にいない
                        //経路にいるかどうかの判定
                        //申請者の方向に向かって判定
                        $access_mode_view_only = true;
                        $path_step_ids_tmp = array_keys($path_steps);
                        $path_step_ids = [];
                        foreach ($path_step_ids_tmp as $path_step_id) {
                            $path_step_ids[] = $path_step_id;
                        }
                        $path_step_ids = array_reverse($path_step_ids);

                        // 経路にユーザーが含まれているかどうか
                        for ($i = 0; $i < count($path_step_ids); $i++) {
                            $path_step_temp =& $path_steps[$path_step_ids[$i]];
                            if ( ! $path_step_temp['col_activate']
                                 || $path_step_temp['col_skip']
                            ) {
                                // アクティブではないか省略の経路ステップは外す
                                continue;
                            }
                            $users = $path_step_temp['users'];
                            for ($j = 0; $j < count($users); $j++) {
                                if ($user_id == $users[$j]['col_user']) {
                                    $user_step_id = $path_step_ids[$i];
                                    break 2;
                                }
                            }
                        }
                    } else {
                        $user_step_id = $in_process;
                    }
                    if ( ! is_null($user_step_id)) {
                        foreach (array_keys($item_data_list) as $item_data_id) {
                            $change_access
                                = $change_access_data_logic->evaluateEx($item_data_list[$item_data_id]['iid'],
                                $user_step_id);
                            if ($change_access['col_view'] == 1
                                && $change_access['col_edit'] == 1
                            ) {
                                if ($petition['status']
                                    != GRN_WORKFLOW_STATUS_UNPROCESSING_CANCEL
                                    && $petition['status']
                                       != GRN_WORKFLOW_STATUS_IN_PROCESS_CANCEL
                                ) {
                                    if ($access_mode_view_only == false) {
                                        $item_data_list[$item_data_id]['view_mode']
                                            = parent::MOBILE_ITEM_DATA_EDIT_MODE;
                                        $item_data_list[$item_data_id]['mobile_view_mode']
                                            = 'edit';
                                        $this->_has_editable_item = true;
                                    } else {
                                        $item_data_list[$item_data_id]['view_mode']
                                            = 'view';
                                    }
                                } else {
                                    $item_data_list[$item_data_id]['view_mode']
                                        = 'view';
                                }
                            } elseif ($change_access['col_view'] == 1
                                      && $change_access['col_edit'] != 1
                            ) {
                                $item_data_list[$item_data_id]['view_mode']
                                    = 'view';
                            } elseif ($change_access['col_view'] != 1) {
                                $item_data_list[$item_data_id]['view_mode']
                                    = 'disable';
                            }

                            if (array_key_exists('sub_item_data_list',
                                    $item_data_list[$item_data_id])
                                && is_array($item_data_list[$item_data_id]['sub_item_data_list'])
                            ) {
                                foreach (
                                    array_keys($item_data_list[$item_data_id]['sub_item_data_list'])
                                    as $sub_item_data_id
                                ) {
                                    $change_access
                                        = $change_access_data_logic->evaluateEx($item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['iid'],
                                        $user_step_id);
                                    if ($change_access['col_view'] == 1
                                        && $change_access['col_edit'] == 1
                                    ) {
                                        if ($petition['status']
                                            != GRN_WORKFLOW_STATUS_UNPROCESSING_CANCEL
                                            && $petition['status']
                                               != GRN_WORKFLOW_STATUS_IN_PROCESS_CANCEL
                                        ) {
                                            if ($access_mode_view_only
                                                == false
                                            ) {
                                                $item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['view_mode']
                                                    = parent::MOBILE_ITEM_DATA_EDIT_MODE;
                                                $item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['mobile_view_mode']
                                                    = 'edit';
                                                $this->_has_editable_item
                                                    = true;
                                            } else {
                                                $item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['view_mode']
                                                    = 'view';
                                            }
                                        } else {
                                            $item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['view_mode']
                                                = 'view';
                                        }
                                    } elseif ($change_access['col_view'] == 1
                                              && $change_access['col_edit'] != 1
                                    ) {
                                        $item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['view_mode']
                                            = 'view';
                                    } elseif ($change_access['col_view'] != 1) {
                                        $item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['view_mode']
                                            = 'disable';
                                    }
                                }
                            }
                        }
                    } else {
                        //申請者かどうか
                        if ($petition['user'] == $user_id
                            || $petition['agent_user'] == $user_id
                        ) {
                            //申請者なら
                            foreach (
                                array_keys($item_data_list) as $item_data_id
                            ) {
                                if ($item_data_list[$item_data_id]['foreign_key']
                                    == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                                    || $item_data_list[$item_data_id]['foreign_key']
                                       == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                                    || $item_data_list[$item_data_id]['foreign_key']
                                       == GRN_WORKFLOW_CONDITION_ITEM_DATE
                                    || $item_data_list[$item_data_id]['foreign_key']
                                       == GRN_WORKFLOW_CONDITION_ITEM_FILE
                                    || $item_data_list[$item_data_id]['foreign_key']
                                       == GRN_WORKFLOW_CONDITION_ITEM_NUMERIC
                                ) {
                                    if ($item_data_list[$item_data_id]['attach_file_view']
                                        == 1
                                    ) {
                                        $item_data_list[$item_data_id]['view_mode']
                                            = 'view';
                                    } else {
                                        $item_data_list[$item_data_id]['view_mode']
                                            = 'disable';
                                    }
                                }
                            }
                        } else {
                            //どこの経路にもいない
                            foreach (
                                array_keys($item_data_list) as $item_data_id
                            ) {
                                if ($item_data_list[$item_data_id]['foreign_key']
                                    == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                                    || $item_data_list[$item_data_id]['foreign_key']
                                       == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                                    || $item_data_list[$item_data_id]['foreign_key']
                                       == GRN_WORKFLOW_CONDITION_ITEM_DATE
                                    || $item_data_list[$item_data_id]['foreign_key']
                                       == GRN_WORKFLOW_CONDITION_ITEM_FILE
                                    || $item_data_list[$item_data_id]['foreign_key']
                                       == GRN_WORKFLOW_CONDITION_ITEM_NUMERIC
                                ) {
                                    $item_data_list[$item_data_id]['view_mode']
                                        = 'disable';
                                }
                            }
                        }
                    }
                }
            }
        } else {
            $folder_type = '';
            if (array_key_exists('col_folder_type', $folder)) {
                $folder_type = $folder['col_folder_type'];
            }
            if (array_key_exists('f_col_folder_type', $folder)) {
                $folder_type = $folder['f_col_folder_type'];
            }
            if ($folder_type == GRN_WORKFLOW_FOLDER_TYPE_UNPROCESSED_ID
                && $petition['status'] == GRN_WORKFLOW_STATUS_IN_PROCESS_CANCEL
            ) {
                //未処理一覧で、取り消された申請の場合
                $path_step_ids_tmp = array_keys($path_steps);
                $path_step_ids = [];
                foreach ($path_step_ids_tmp as $path_step_id) {
                    $path_step =& $path_steps[$path_step_id];
                    if ($path_step['col_type'] == GRN_WORKFLOW_CIRCULAR) {
                        //回覧は飛ばす
                        continue;
                    }
                    $path_step_ids[] = $path_step_id;
                }
                $user_path_step_id = null;
                // 経路にユーザーが含まれているかどうか
                for ($i = 0; $i < count($path_step_ids); $i++) {
                    $path_step =& $path_steps[$path_step_ids[$i]];
                    if ( ! $path_step['col_activate']
                         || $path_step['col_skip']
                    ) {
                        // アクティブではないか省略の経路ステップは外す
                        continue;
                    }

                    $users = $path_step['users'];
                    for ($j = 0; $j < count($users); $j++) {
                        if ($user_id == $users[$j]['col_user']) {
                            $user_path_step_id = $path_step_ids[$i];
                            break 2;
                        }
                    }
                }
                if ( ! is_null($user_path_step_id)) {
                    foreach (array_keys($item_data_list) as $item_data_id) {
                        if ($item_data_list[$item_data_id]['foreign_key']
                            == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                            || $item_data_list[$item_data_id]['foreign_key']
                               == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                            || $item_data_list[$item_data_id]['foreign_key']
                               == GRN_WORKFLOW_CONDITION_ITEM_DATE
                            || $item_data_list[$item_data_id]['foreign_key']
                               == GRN_WORKFLOW_CONDITION_ITEM_FILE
                            || $item_data_list[$item_data_id]['foreign_key']
                               == GRN_WORKFLOW_CONDITION_ITEM_NUMERIC
                        ) {
                            $change_access_data
                                = $change_access_data_logic->evaluateEx($item_data_list[$item_data_id]['iid'],
                                $user_path_step_id);
                            if ($change_access_data['col_view'] == 1) {
                                $item_data_list[$item_data_id]['view_mode']
                                    = 'view';
                            } else {
                                $item_data_list[$item_data_id]['view_mode']
                                    = 'disable';
                            }
                        }
                        if (array_key_exists('sub_item_data_list',
                                $item_data_list[$item_data_id])
                            && is_array($item_data_list[$item_data_id]['sub_item_data_list'])
                        ) {
                            foreach (
                                array_keys($item_data_list[$item_data_id]['sub_item_data_list'])
                                as $sub_item_data_id
                            ) {
                                $change_access
                                    = $change_access_data_logic->evaluateEx($item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['iid'],
                                    $user_path_step_id);
                                if ($change_access['col_view'] == 1) {
                                    $item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['view_mode']
                                        = 'view';
                                } else {
                                    $item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['view_mode']
                                        = 'disable';
                                }
                            }
                        }
                    }
                } else {
                    if ($petition['user'] == $user_id
                        || $petition['agent_user'] == $user_id
                    ) {
                        //申請者なら
                        foreach (array_keys($item_data_list) as $item_data_id) {
                            if ($item_data_list[$item_data_id]['foreign_key']
                                == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                                || $item_data_list[$item_data_id]['foreign_key']
                                   == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                                || $item_data_list[$item_data_id]['foreign_key']
                                   == GRN_WORKFLOW_CONDITION_ITEM_DATE
                                || $item_data_list[$item_data_id]['foreign_key']
                                   == GRN_WORKFLOW_CONDITION_ITEM_FILE
                                || $item_data_list[$item_data_id]['foreign_key']
                                   == GRN_WORKFLOW_CONDITION_ITEM_NUMERIC
                            ) {
                                if ($item_data_list[$item_data_id]['attach_file_view']
                                    == 1
                                ) {
                                    $item_data_list[$item_data_id]['view_mode']
                                        = 'view';
                                } else {
                                    $item_data_list[$item_data_id]['view_mode']
                                        = 'disable';
                                }
                            }
                        }
                    }
                }
            } elseif ($folder_type == GRN_WORKFLOW_FOLDER_TYPE_UNPROCESSED_ID
                      && $petition['status'] == GRN_WORKFLOW_STATUS_REMAND
            ) {
                if ($petition['user'] == $user_id
                    || $petition['agent_user'] == $user_id
                ) {
                    //申請者なら
                    foreach (array_keys($item_data_list) as $item_data_id) {
                        if ($item_data_list[$item_data_id]['foreign_key']
                            == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                            || $item_data_list[$item_data_id]['foreign_key']
                               == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                            || $item_data_list[$item_data_id]['foreign_key']
                               == GRN_WORKFLOW_CONDITION_ITEM_DATE
                            || $item_data_list[$item_data_id]['foreign_key']
                               == GRN_WORKFLOW_CONDITION_ITEM_FILE
                            || $item_data_list[$item_data_id]['foreign_key']
                               == GRN_WORKFLOW_CONDITION_ITEM_NUMERIC
                        ) {
                            if ($item_data_list[$item_data_id]['attach_file_view']
                                == 1
                            ) {
                                $item_data_list[$item_data_id]['view_mode']
                                    = 'view';
                            } else {
                                $item_data_list[$item_data_id]['view_mode']
                                    = 'disable';
                            }
                        }
                    }
                } else {
                    $path_step_ids_tmp = array_keys($path_steps);
                    $path_step_ids = [];
                    foreach ($path_step_ids_tmp as $path_step_id) {
                        $path_step =& $path_steps[$path_step_id];
                        if ($path_step['col_type'] == GRN_WORKFLOW_CIRCULAR) {
                            //回覧は飛ばす
                            continue;
                        }
                        $path_step_ids[] = $path_step_id;
                    }
                    $user_path_step_id = null;
                    // 経路にユーザーが含まれているかどうか
                    for ($i = 0; $i < count($path_step_ids); $i++) {
                        $path_step =& $path_steps[$path_step_ids[$i]];
                        if ( ! $path_step['col_activate']
                             || $path_step['col_skip']
                        ) {
                            // アクティブではないか省略の経路ステップは外す
                            continue;
                        }
                        $users = $path_step['users'];
                        for ($j = 0; $j < count($users); $j++) {
                            if ($user_id == $users[$j]['col_user']) {
                                $user_path_step_id = $path_step_ids[$i];
                                break 2;
                            }
                        }
                    }
                    if ( ! is_null($user_path_step_id)) {
                        //代理承認の場合
                        if ( ! is_null($agent_id) && strlen($agent_id) > 0) {
                            cb_throw_error(E_GRN_WRKF_PETITION_DENY_ACCESS);
                        }
                        foreach (array_keys($item_data_list) as $item_data_id) {
                            if ($item_data_list[$item_data_id]['foreign_key']
                                == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                                || $item_data_list[$item_data_id]['foreign_key']
                                   == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                                || $item_data_list[$item_data_id]['foreign_key']
                                   == GRN_WORKFLOW_CONDITION_ITEM_DATE
                                || $item_data_list[$item_data_id]['foreign_key']
                                   == GRN_WORKFLOW_CONDITION_ITEM_FILE
                                || $item_data_list[$item_data_id]['foreign_key']
                                   == GRN_WORKFLOW_CONDITION_ITEM_NUMERIC
                            ) {
                                $change_access_data
                                    = $change_access_data_logic->evaluateEx($item_data_list[$item_data_id]['iid'],
                                    $user_path_step_id);
                                if ($change_access_data['col_view'] == 1) {
                                    $item_data_list[$item_data_id]['view_mode']
                                        = 'view';
                                } else {
                                    $item_data_list[$item_data_id]['view_mode']
                                        = 'disable';
                                }
                            }
                            if (array_key_exists('sub_item_data_list',
                                    $item_data_list[$item_data_id])
                                && is_array($item_data_list[$item_data_id]['sub_item_data_list'])
                            ) {
                                foreach (
                                    array_keys($item_data_list[$item_data_id]['sub_item_data_list'])
                                    as $sub_item_data_id
                                ) {
                                    $change_access
                                        = $change_access_data_logic->evaluateEx($item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['iid'],
                                        $user_path_step_id);
                                    if ($change_access['col_view'] == 1) {
                                        $item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['view_mode']
                                            = 'view';
                                    } else {
                                        $item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['view_mode']
                                            = 'disable';
                                    }
                                }
                            }
                        }
                    }
                }
            } elseif ($folder_type == GRN_WORKFLOW_FOLDER_TYPE_UNPROCESSED_ID
                      && $petition['status'] == GRN_WORKFLOW_RESULT_REJECT
            ) {
                if ( ! is_null($agent_id) && strlen($agent_id) > 0) {
                    //URLアクセス処理
                    //本来アクセスしてはいけない代理申請
                    //未処理で却下の場合
                    //ただし代理申請者なら、申請者の権限でみてもいい
                    if ($petition['user'] == $agent_id
                        || $petition['agent_user'] == $agent_id
                    ) {
                        //申請者の権限で表示する
                        foreach (array_keys($item_data_list) as $item_data_id) {
                            if ($item_data_list[$item_data_id]['foreign_key']
                                == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                                || $item_data_list[$item_data_id]['foreign_key']
                                   == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                                || $item_data_list[$item_data_id]['foreign_key']
                                   == GRN_WORKFLOW_CONDITION_ITEM_DATE
                                || $item_data_list[$item_data_id]['foreign_key']
                                   == GRN_WORKFLOW_CONDITION_ITEM_FILE
                                || $item_data_list[$item_data_id]['foreign_key']
                                   == GRN_WORKFLOW_CONDITION_ITEM_NUMERIC
                            ) {
                                if ($item_data_list[$item_data_id]['attach_file_view']
                                    == 1
                                ) {
                                    $item_data_list[$item_data_id]['view_mode']
                                        = 'view';
                                } else {
                                    $item_data_list[$item_data_id]['view_mode']
                                        = 'disable';
                                }
                            }
                        }
                        //この場合は、代理承認での表示を解除する
                        $user_id = $agent_id;
                        $agent_id = '';
                        $folder_id = '';
                        $handle_mode = 'view_only';
                    } else {
                        $path_step_ids_tmp = array_keys($path_steps);
                        $path_step_ids = [];
                        foreach ($path_step_ids_tmp as $path_step_id) {
                            $path_step =& $path_steps[$path_step_id];
                            if ($path_step['col_type']
                                == GRN_WORKFLOW_CIRCULAR
                            ) {
                                //回覧は飛ばす
                                continue;
                            }
                            $path_step_ids[] = $path_step_id;
                        }
                        $user_path_step_id = null;
                        // 経路にユーザーが含まれているかどうか
                        for ($i = 0; $i < count($path_step_ids); $i++) {
                            $path_step =& $path_steps[$path_step_ids[$i]];
                            if ( ! $path_step['col_activate']
                                 || $path_step['col_skip']
                            ) {
                                // アクティブではないか省略の経路ステップは外す
                                continue;
                            }
                            $users = $path_step['users'];
                            for ($j = 0; $j < count($users); $j++) {
                                if ($user_id == $users[$j]['col_user']) {
                                    $user_path_step_id = $path_step_ids[$i];
                                    break 2;
                                }
                            }
                        }
                        if ( ! is_null($user_path_step_id)) {
                            foreach (
                                array_keys($item_data_list) as $item_data_id
                            ) {
                                if ($item_data_list[$item_data_id]['foreign_key']
                                    == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                                    || $item_data_list[$item_data_id]['foreign_key']
                                       == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                                    || $item_data_list[$item_data_id]['foreign_key']
                                       == GRN_WORKFLOW_CONDITION_ITEM_DATE
                                    || $item_data_list[$item_data_id]['foreign_key']
                                       == GRN_WORKFLOW_CONDITION_ITEM_FILE
                                    || $item_data_list[$item_data_id]['foreign_key']
                                       == GRN_WORKFLOW_CONDITION_ITEM_NUMERIC
                                ) {
                                    $change_access_data
                                        = $change_access_data_logic->evaluateEx($item_data_list[$item_data_id]['iid'],
                                        $user_path_step_id);
                                    if ($change_access_data['col_view'] == 1) {
                                        $item_data_list[$item_data_id]['view_mode']
                                            = 'view';
                                    } else {
                                        $item_data_list[$item_data_id]['view_mode']
                                            = 'disable';
                                    }
                                }
                                if (array_key_exists('sub_item_data_list',
                                        $item_data_list[$item_data_id])
                                    && is_array($item_data_list[$item_data_id]['sub_item_data_list'])
                                ) {
                                    foreach (
                                        array_keys($item_data_list[$item_data_id]['sub_item_data_list'])
                                        as $sub_item_data_id
                                    ) {
                                        $change_access
                                            = $change_access_data_logic->evaluateEx($item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['iid'],
                                            $user_path_step_id);
                                        if ($change_access['col_view'] == 1) {
                                            $item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['view_mode']
                                                = 'view';
                                        } else {
                                            $item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['view_mode']
                                                = 'disable';
                                        }
                                    }
                                }
                            }
                        }
                    }
                } elseif ($petition['user'] == $user_id) {
                    //申請者なら
                    foreach (array_keys($item_data_list) as $item_data_id) {
                        if ($item_data_list[$item_data_id]['foreign_key']
                            == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                            || $item_data_list[$item_data_id]['foreign_key']
                               == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                            || $item_data_list[$item_data_id]['foreign_key']
                               == GRN_WORKFLOW_CONDITION_ITEM_DATE
                            || $item_data_list[$item_data_id]['foreign_key']
                               == GRN_WORKFLOW_CONDITION_ITEM_FILE
                            || $item_data_list[$item_data_id]['foreign_key']
                               == GRN_WORKFLOW_CONDITION_ITEM_NUMERIC
                        ) {
                            if ($item_data_list[$item_data_id]['attach_file_view']
                                == 1
                            ) {
                                $item_data_list[$item_data_id]['view_mode']
                                    = 'view';
                            } else {
                                $item_data_list[$item_data_id]['view_mode']
                                    = 'disable';
                            }
                        }
                    }
                } else {
                    $path_step_ids_tmp = array_keys($path_steps);
                    $path_step_ids = [];
                    foreach ($path_step_ids_tmp as $path_step_id) {
                        $path_step =& $path_steps[$path_step_id];
                        if ($path_step['col_type'] == GRN_WORKFLOW_CIRCULAR) {
                            //回覧は飛ばす
                            continue;
                        }
                        $path_step_ids[] = $path_step_id;
                    }
                    $user_path_step_id = null;
                    // 経路にユーザーが含まれているかどうか
                    for ($i = 0; $i < count($path_step_ids); $i++) {
                        $path_step =& $path_steps[$path_step_ids[$i]];
                        if ( ! $path_step['col_activate']
                             || $path_step['col_skip']
                        ) {
                            // アクティブではないか省略の経路ステップは外す
                            continue;
                        }

                        $users = $path_step['users'];
                        for ($j = 0; $j < count($users); $j++) {
                            if ($user_id == $users[$j]['col_user']) {
                                $user_path_step_id = $path_step_ids[$i];
                                break 2;
                            }
                        }
                    }
                    if ( ! is_null($user_path_step_id)) {
                        foreach (array_keys($item_data_list) as $item_data_id) {
                            if ($item_data_list[$item_data_id]['foreign_key']
                                == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                                || $item_data_list[$item_data_id]['foreign_key']
                                   == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                                || $item_data_list[$item_data_id]['foreign_key']
                                   == GRN_WORKFLOW_CONDITION_ITEM_DATE
                                || $item_data_list[$item_data_id]['foreign_key']
                                   == GRN_WORKFLOW_CONDITION_ITEM_FILE
                                || $item_data_list[$item_data_id]['foreign_key']
                                   == GRN_WORKFLOW_CONDITION_ITEM_NUMERIC
                            ) {
                                $change_access_data
                                    = $change_access_data_logic->evaluateEx($item_data_list[$item_data_id]['iid'],
                                    $user_path_step_id);
                                if ($change_access_data['col_view'] == 1) {
                                    $item_data_list[$item_data_id]['view_mode']
                                        = 'view';
                                } else {
                                    $item_data_list[$item_data_id]['view_mode']
                                        = 'disable';
                                }
                            }
                            if (array_key_exists('sub_item_data_list',
                                    $item_data_list[$item_data_id])
                                && is_array($item_data_list[$item_data_id]['sub_item_data_list'])
                            ) {
                                foreach (
                                    array_keys($item_data_list[$item_data_id]['sub_item_data_list'])
                                    as $sub_item_data_id
                                ) {
                                    $change_access
                                        = $change_access_data_logic->evaluateEx($item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['iid'],
                                        $user_path_step_id);
                                    if ($change_access['col_view'] == 1) {
                                        $item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['view_mode']
                                            = 'view';
                                    } else {
                                        $item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['view_mode']
                                            = 'disable';
                                    }
                                }
                            }
                        }
                    } else {
                        if ($petition['user'] == $user_id
                            || $petition['agent_user'] == $user_id
                        ) {
                            //申請者なら
                            foreach (
                                array_keys($item_data_list) as $item_data_id
                            ) {
                                if ($item_data_list[$item_data_id]['foreign_key']
                                    == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                                    || $item_data_list[$item_data_id]['foreign_key']
                                       == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                                    || $item_data_list[$item_data_id]['foreign_key']
                                       == GRN_WORKFLOW_CONDITION_ITEM_DATE
                                    || $item_data_list[$item_data_id]['foreign_key']
                                       == GRN_WORKFLOW_CONDITION_ITEM_FILE
                                    || $item_data_list[$item_data_id]['foreign_key']
                                       == GRN_WORKFLOW_CONDITION_ITEM_NUMERIC
                                ) {
                                    if ($item_data_list[$item_data_id]['attach_file_view']
                                        == 1
                                    ) {
                                        $item_data_list[$item_data_id]['view_mode']
                                            = 'view';
                                    } else {
                                        $item_data_list[$item_data_id]['view_mode']
                                            = 'disable';
                                    }
                                }
                            }
                        } else {
                            foreach (
                                array_keys($item_data_list) as $item_data_id
                            ) {
                                if ($item_data_list[$item_data_id]['foreign_key']
                                    == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                                    || $item_data_list[$item_data_id]['foreign_key']
                                       == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                                    || $item_data_list[$item_data_id]['foreign_key']
                                       == GRN_WORKFLOW_CONDITION_ITEM_DATE
                                    || $item_data_list[$item_data_id]['foreign_key']
                                       == GRN_WORKFLOW_CONDITION_ITEM_FILE
                                    || $item_data_list[$item_data_id]['foreign_key']
                                       == GRN_WORKFLOW_CONDITION_ITEM_NUMERIC
                                ) {
                                    $item_data_list[$item_data_id]['view_mode']
                                        = 'disable';
                                }
                            }
                        }
                    }
                }
            } elseif ($folder_type == GRN_WORKFLOW_FOLDER_TYPE_UNPROCESSED_ID
                      && $petition['status'] == GRN_WORKFLOW_STATUS_FINISHED
            ) {
                //未処理で完了通知なら
                //申請者の方向に向かって判定
                $path_step_ids_tmp = array_keys($path_steps);
                $path_step_ids = array_reverse($path_step_ids_tmp);
                $user_path_step_id = null;
                // 経路にユーザーが含まれているかどうか
                for ($i = 0; $i < count($path_step_ids); $i++) {
                    $path_step =& $path_steps[$path_step_ids[$i]];
                    if ( ! $path_step['col_activate']
                         || $path_step['col_skip']
                    ) {
                        // アクティブではないか省略の経路ステップは外す
                        continue;
                    }
                    $users = $path_step['users'];
                    for ($j = 0; $j < count($users); $j++) {
                        if ($user_id == $users[$j]['col_user']) {
                            $user_path_step_id = $path_step_ids[$i];
                            break 2;
                        }
                    }
                }
                if ( ! is_null($user_path_step_id)) {
                    if ( ! is_null($agent_id) && strlen($agent_id) > 0) {
                        //代理承認者
                        if ($petition['status']
                            == GRN_WORKFLOW_STATUS_FINISHED
                        ) {
                            //完了している申請にはエラーを出す
                            cb_throw_error(E_GRN_WRKF_PETITION_DENY_ACCESS);
                        }
                    }
                    // ユーザーが経路にいる
                    foreach (array_keys($item_data_list) as $item_data_id) {
                        if ($item_data_list[$item_data_id]['foreign_key']
                            == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                            || $item_data_list[$item_data_id]['foreign_key']
                               == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                            || $item_data_list[$item_data_id]['foreign_key']
                               == GRN_WORKFLOW_CONDITION_ITEM_DATE
                            || $item_data_list[$item_data_id]['foreign_key']
                               == GRN_WORKFLOW_CONDITION_ITEM_FILE
                            || $item_data_list[$item_data_id]['foreign_key']
                               == GRN_WORKFLOW_CONDITION_ITEM_NUMERIC
                        ) {
                            $change_access_data
                                = $change_access_data_logic->evaluateEx($item_data_list[$item_data_id]['iid'],
                                $user_path_step_id);
                            if ($change_access_data['col_view'] == 1) {
                                $item_data_list[$item_data_id]['view_mode']
                                    = 'view';
                            } else {
                                $item_data_list[$item_data_id]['view_mode']
                                    = 'disable';
                            }
                        }
                        if (array_key_exists('sub_item_data_list',
                                $item_data_list[$item_data_id])
                            && is_array($item_data_list[$item_data_id]['sub_item_data_list'])
                        ) {
                            foreach (
                                array_keys($item_data_list[$item_data_id]['sub_item_data_list'])
                                as $sub_item_data_id
                            ) {
                                $change_access
                                    = $change_access_data_logic->evaluateEx($item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['iid'],
                                    $user_path_step_id);
                                if ($change_access['col_view'] == 1) {
                                    $item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['view_mode']
                                        = 'view';
                                } else {
                                    $item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['view_mode']
                                        = 'disable';
                                }
                            }
                        }

                    }
                } else {
                    //ユーザーが経路にいない
                    if ($petition['user'] == $user_id
                        || $petition['agent_user'] == $user_id
                    ) {
                        //申請者なら
                        foreach (array_keys($item_data_list) as $item_data_id) {
                            if ($item_data_list[$item_data_id]['foreign_key']
                                == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                                || $item_data_list[$item_data_id]['foreign_key']
                                   == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                                || $item_data_list[$item_data_id]['foreign_key']
                                   == GRN_WORKFLOW_CONDITION_ITEM_DATE
                                || $item_data_list[$item_data_id]['foreign_key']
                                   == GRN_WORKFLOW_CONDITION_ITEM_FILE
                                || $item_data_list[$item_data_id]['foreign_key']
                                   == GRN_WORKFLOW_CONDITION_ITEM_NUMERIC
                            ) {
                                if ($item_data_list[$item_data_id]['attach_file_view']
                                    == 1
                                ) {
                                    $item_data_list[$item_data_id]['view_mode']
                                        = 'view';
                                } else {
                                    $item_data_list[$item_data_id]['view_mode']
                                        = 'disable';
                                }
                            }
                        }
                    } else {
                        //存在しない
                    }
                }
            } else {
                if ( ! is_null($agent_id) && strlen($agent_id) > 0) {
                    //代理承認者
                    if ($petition['status'] == GRN_WORKFLOW_STATUS_FINISHED) {
                        //完了している申請にはエラーを出す
                        cb_throw_error(E_GRN_WRKF_PETITION_DENY_ACCESS);
                    }
                }
            }
        }

        //Rename username if username is changed.
        foreach (array_keys($path_steps) as $path_key) {
            $path =& $path_steps[$path_key];
            $columns = ['col_display_name', 'col_foreign_key', 'col_position'];
            $users = $uum->getUsersInfo($path['uids'], $columns);
            foreach (array_keys($path['users']) as $user_key) {
                if (array_key_exists($path['users'][$user_key]['_id'],
                    $users)
                ) {
                    $path['users'][$user_key][GRN_WORKFLOW_COLUMN_DISPLAY_NAME]
                        = $users[$path['users'][$user_key]['_id']]['col_display_name'];
                    $path['users'][$user_key][GRN_WORKFLOW_COLUMN_FOREIGN_KEY]
                        = $users[$path['users'][$user_key]['_id']]['col_foreign_key'];
                }
            }
            $path['user_count'] = count($path['users']);
        }

        if (GRN_WORKFLOW_STATUS_UNPROCESSING_CANCEL == $petition['status']) {
            $view = false;
        }

        if ($user_id == @ $petition['user']
            || $user_id == @ $petition['agent_user']
        ) {
            if ($agent_id > 0
                && $agent_id != @ $petition['user']
                && $agent_id != @ $petition['agent_user']
                && $handle_mode == 'change_transactor'
            ) {
                // ログインユーザーは代理承認者で、委任者が経路から外された場合
                // do nothing.
                $view = false;
            } else {
                // ログインユーザーは申請者
                $view = true;
            }

            if ( ! $in_process
                 && GRN_WORKFLOW_STATUS_REMAND == $petition['status']
            ) {
                // 申請者本人に差し戻された
                $handle_mode = null;
            }
            $in_path = true;
            $in_evaluated_path = true;
        } else {
            if ($agent_id > 0
                && $agent_id != @ $petition['user']
                && $agent_id != @ $petition['agent_user']
                && $handle_mode == 'change_transactor'
            ) {
                // ログインユーザーは代理承認者で、委任者が経路から外された場合
                $view = false;
            }
        }

        $error = false;
        if ( ! $in_evaluated_path) {
            if (@ $petition['reapply']) {
                // 再申請された
                $handle_mode = 'reapply';

                require_once('workflow/folder_logic.csp');
                $logic = \GRN_Workflow_Folder_Logic::getInstance();
                $folders = $logic->getList($user_id);

                require_once('workflow/folderrelation_logic.csp');
                $logic = \GRN_Workflow_FolderRelation_Logic::getInstance();
                $folder_relations
                    = $logic->getSpecificList(array_keys($folders),
                    $petition_id);
                if ( ! is_array($folder_relations)
                     || 0 == count($folder_relations)
                ) {
                    if ($is_public == true) {
                        cb_redirect('workflow/mobile/view', [
                            'fid' => GRN_WORKFLOW_FOLDER_PUBLIC_ID,
                            'pid' => $petition_id
                        ]);
                    }
                    cb_throw_error(E_GRN_WRKF_PETITION_DENY_ACCESS);
                }
            } else {
                if ($in_path
                    && GRN_WORKFLOW_STATUS_UNPROCESSING_CANCEL
                       != $petition['status']
                ) {
                    // まだ処理が回ってきてない（進行中、差し戻し）
                    $error = true;
                    $handle_mode = 'confirm';
                } else {
                    if ($is_public == true) {
                        cb_redirect('workflow/mobile/view', [
                            'fid' => GRN_WORKFLOW_FOLDER_PUBLIC_ID,
                            'pid' => $petition_id
                        ]);
                    }
                    cb_throw_error(E_GRN_WRKF_PETITION_DENY_ACCESS);
                }
            }
        }

        require_once('workflow/config.csp');
        $configs = \GRN_Workflow_Configs::getInstance();
        $config = $configs->getSystemConfig();
        $remand = $config->getRemand();

        require_once('workflow/change_path_history.csp');
        $logic = \GRN_Workflow_ChangePathHistories::getInstance();
        $change_path_history_total = $logic->getCount($petition_id);

        if ('change_transactor' == $handle_mode) {
            $this->_change_path_history = $change_path_history;
        }

        require_once('workflow/folderrelation_logic.csp');
        $logic = \GRN_Workflow_FolderRelation_Logic::getInstance();
        $folder_relation = $logic->getSpecific($folder_id, $petition_id);
        if ( ! is_array($folder_relation) || 0 == count($folder_relation)) {
            require_once('workflow/folder_logic.csp');
            $logic = \GRN_Workflow_Folder_Logic::getInstance();
            $folder = $logic->getByForeignKey($user_id,
                'FINISH_FOLDER_FOREIGN_KEY');

            $fids = [];
            $fids[] = $folder['_id'];

            require_once('workflow/folder_logic.csp');
            $logic = \GRN_Workflow_Folder_Logic::getInstance();
            $folder = $logic->getByForeignKey($user_id,
                'TEMP_FOLDER_FOREIGN_KEY');

            $fids[] = $folder['_id'];

            require_once('workflow/folderrelation_logic.csp');
            $logic = \GRN_Workflow_FolderRelation_Logic::getInstance();
            $folder_relations = $logic->getSpecificList($fids, $petition_id);
            if ( ! is_array($folder_relations)
                 || 0 == count($folder_relations)
            ) {
                if ($petition['agent_user'] == ''
                    || $petition['agent_user'] < 1
                ) {
                    $handle_mode = 'view_only';
                } else {
                    $handle_mode = null;
                }
            }
        }

        // ベースサービスの通知を確認済みに変更
        require_once('workflow/notification.csp');
        $logic = \GRN_Workflow_Notification::getInstance();
        if ($logic->isConfirmed($user_id, $petition_id)) {
            require_once('workflow/folder_logic.csp');
            $logic = \GRN_Workflow_Folder_Logic::getInstance();
            $folder = $logic->getByForeignKey($user_id,
                'UNPROCESSED_FOLDER_FOREIGN_KEY');
            $fids = [];
            $fids[] = $folder['_id'];
            require_once('workflow/folderrelation_logic.csp');
            $logic = \GRN_Workflow_FolderRelation_Logic::getInstance();
            $folder_relations = $logic->getSpecificList($fids, $petition_id);
            if ( ! is_array($folder_relations)
                 || 0 == count($folder_relations)
            ) {
                $handle_mode = 'view_only';
            }
        }

        $this->_in_process = $in_process;
        $this->_path_steps = $path_steps;
        $this->_path_step_total = $path_step_total;
        $this->_is_remand = $remand;
        $this->_view = $view;
        $this->_handle_mode = $handle_mode;
        $this->_error = $error;
        $this->_change_path_history_total = $change_path_history_total;
        $this->_item_data_list = $item_data_list;
        $this->_user_id = $user_id;
        $this->_agent_id = $agent_id;
        $this->_remand_options = $options;
    }

    public function getHandleMenu()
    {
        $handle_menu = [];
        //accept, reject, sendback, confirm with comment
        if ( ! $this->_handle_mode && 'view_only' != $this->_handle_mode) {
            $params = [];
            $common_params = [
                'fid'        => $this->_fid,
                'pid'        => $this->_petition_id,
                'in_process' => $this->_in_process
            ];
            if (GRN_WORKFLOW_STATUS_REJECTION > $this->_petition['status']) {
                //承認
                if (GRN_WORKFLOW_ACCEPTANCE
                    == $this->_path_steps[$this->_in_process]['col_type']
                ) {
                    $params[] = array_merge($common_params,
                        ['cmd' => 'acceptance']);
                    $params[] = array_merge($common_params,
                        ['cmd' => 'reject']);
                    if ($this->_is_remand) {
                        $params[] = array_merge($common_params,
                            ['cmd' => 'remand']);
                    }
                } else {
                    $params[] = array_merge($common_params,
                        ['cmd' => 'confirmation']);
                }
            } elseif (GRN_WORKFLOW_STATUS_REMAND
                      == $this->_petition['status']
            ) {
                //申請者本人に差し戻し
                $user_id = $this->getLoginUserId();
                if ($this->_in_process
                    || ($user_id != $this->_petition['user']
                        && $user_id != $this->_petition['agent_user'])
                ) {
                    $params[] = array_merge($common_params,
                        ['cmd' => 'acceptance']);
                    $params[] = array_merge($common_params,
                        ['cmd' => 'reject']);
                    if ($this->_is_remand) {
                        $params[] = array_merge($common_params,
                            ['cmd' => 'remand']);
                    }
                }
            }
            if (count($params) > 0) {
                $handle_menu = [self::HANDLE_PAGE => $params];
            }
        }

        return $handle_menu;
    }

    protected function getConfirmMenu()
    {
        $confirm_menu = [];
        //confirm without comment
        if (GRN_WORKFLOW_STATUS_UNPROCESSING_CANCEL
            == $this->_petition['status']
            || GRN_WORKFLOW_STATUS_IN_PROCESS_CANCEL
               == $this->_petition['status']
            || 'change_transactor' == $this->_handle_mode
        ) {
            if ('view_only' != $this->_handle_mode) {
                $confirm_menu = [self::COMMAND_HANDLE_PAGE => []];
            }
        } elseif (GRN_WORKFLOW_STATUS_REMAND == $this->_petition['status']) {
            if ('confirm' == $this->_handle_mode
                || 'reapply' == $this->_handle_mode
            ) {
                $confirm_menu = [self::COMMAND_HANDLE_PAGE => []];
            }
        } elseif ('reapply' == $this->_handle_mode) {
            $confirm_menu = [self::COMMAND_HANDLE_PAGE => []];
        } elseif ('confirm' == $this->_handle_mode) {
            $confirm_menu = [self::COMMAND_HANDLE_PAGE => []];
        }

        return $confirm_menu;
    }

    protected function getCancelMenu()
    {
        $user_id = $this->getLoginUserId();
        $cancel_menu = [];
        if ($user_id == $this->_petition['user']
            || $user_id == $this->_petition['agent_user']
        ) {
            $common_params = [
                'page'   => 'workflow/mobile/cancel',
                'params' => [
                    'fid' => $this->_fid,
                    'pid' => $this->_petition_id
                ]
            ];
            if (GRN_WORKFLOW_STATUS_UNPROCESSING
                == $this->_petition['status']
            ) {
                $cancel_menu = array_merge($common_params, [
                    'name' => cb_msg('grn.workflow.mobile',
                        'take_back_application')
                ]);
            } elseif (GRN_WORKFLOW_STATUS_IN_PROCESS
                      == $this->_petition['status']
                      || GRN_WORKFLOW_STATUS_REMAND
                         == $this->_petition['status']
            ) {
                $cancel_menu = array_merge($common_params, [
                    'name' => cb_msg('grn.workflow.mobile',
                        'cancel_application')
                ]);
            }
        }

        return $cancel_menu;
    }

    public function getView()
    {
        return $this->_view;
    }

    public function getAgentId()
    {
        return $this->_agent_id;
    }

    public function getUserId()
    {
        return $this->_user_id;
    }

    public function getRemandOptions()
    {
        return $this->_remand_options;
    }

    public function getItemDataList()
    {
        return $this->_item_data_list;
    }

    public function getTitle()
    {
        return cb_msg('grn.workflow.mobile', 'detail');
    }
}
