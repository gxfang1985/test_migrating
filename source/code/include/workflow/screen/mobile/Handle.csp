<?php

namespace grn\workflow\screen\mobile;

use grn\workflow\screen\mobile\View;
use grn\grn\JSONResponse;

class Handle extends MobileWorkflowScreenBase
{
    public function __construct($input)
    {
        parent::__construct($input);
        $this->checkArgFromInput([
            parent::ARG_FOLDER_ID,
            parent::ARG_PETITION_ID,
            parent::ARG_COMMAND,
            parent::ARG_IN_PROCESS
        ], $input);
    }

    public function fetch()
    {
        $input = $this->getInput();
        $folder_id = $this->getFolderId();
        $petition_id = $this->getPetitionId();
        $command = $this->getCommand();
        $in_process = $this->getInProcess();

        $view_page = new View($input);
        $view = $view_page->getView();
        $agent_id = $view_page->getAgentId();
        $user_id = $view_page->getUserId();
        if (self::HANDLE_REMAND == $command) {
            $config = $this->getSystemConfig();
            if ( ! $config->getRemand()) {
                cb_throw_error(E_GRN_WRKF_PETITION_SYSTEM_DENY_REMAND);
            }
            $remand_options = $view_page->getRemandOptions();
        }

        $menus = $view_page->getHandleMenu();
        $operations = [];
        foreach ($menus as $params) {
            foreach ($params as $param) {
                $operations[] = $param['cmd'];
            }
        }
        if ( ! in_array($command, $operations)) {
            cb_throw_error(E_GRN_WRKF_INVALID_COMMAND);
        }

        require_once('grn/smarty.csp');
        $t = new \GRN_Smarty();

        //get title and set navigation
        $current_page = $this->getTitle();
        $upper_page = cb_msg('grn.workflow.mobile', 'detail');
        $this->assignBreadcrumbUpperPage($t, $upper_page,
            'workflow/mobile/view',
            $params = ['fid' => $folder_id, 'pid' => $petition_id]);
        $this->assignBreadcrumbCurrentPage($t, $current_page);

        //get petition for view
        require_once('workflow/controller_util.csp');
        $petition_util
            = \GRN_Workflow_Petition_Controller_Utility::getInstance();
        $translation_map_petition = [
            'pid'             => '_id',                  //Petition ID
            'petition_number' => 'petition_number',      //Petition Number
            'name'            => 'name',                 //Petition Name
            'form_name'       => 'form_name',            //Petition Form Name
        ];
        $petition = $petition_util->getView($petition_id,
            $translation_map_petition);

        $t->assign('view', $view);
        $t->assign('command', $command);
        $t->assign('petition', $petition);
        $t->assign('user_id', $user_id);
        $t->assign('agent_id', $agent_id);
        $t->assign('fid', $folder_id);
        $t->assign('pid', $petition_id);
        $t->assign('in_process', $in_process);
        if (parent::HANDLE_REMAND == $command) {
            // In order to use mobile_select_menu, adjust the remand_options structure
            // remand_options = array('applicant' => cb_msg('grn.workflow','GRMSG_WF_2'), x(x is a number) => 「Route name」);
            // tmp_opt = array('applicant' => array('value' => 'applicant', title => cb_msg('grn.workflow','GRMSG_WF_2')),
            //                 x           => array('value' => x, title => 「Route name」 );
            $tmp_opt = [];
            foreach ($remand_options as $opt_value => $opt_title) {
                $tmp_opt[$opt_value] = [
                    'value' => $opt_value,
                    'title' => $opt_title
                ];
            }
            $t->assign('remand_options', $tmp_opt);
        }

        return $t->fetch('workflow/mobile/handle.tpl');
    }

    public function post($input)
    {
        $input = $this->getInput();
        $page_name = 'workflow/mobile/handle';
        $folder_id = $this->getFolderId();
        $petition_id = $this->getPetitionId();
        $command = $this->getCommand();
        $in_process = $this->getInProcess();
        if (self::HANDLE_ACCEPTANCE == $command) {
            $this->checkRequiredItem();
        }

        $json = JSONResponse::create();
        $destination = null;
        if (parent::HANDLE_REMAND == $command) {
            $config = $this->getSystemConfig();
            if ( ! $config->getRemand()) {
                cb_throw_error(E_GRN_WRKF_PETITION_SYSTEM_DENY_REMAND);
            }
            if (array_key_exists('destination', $input)) {
                $destination = $input['destination'];
            }
            if ( ! is_numeric($destination) && 'applicant' != $destination) {
                $input['destination'] = null;
            }
        } else {
            $input['destination'] = $command;
        }
        $user_id = $this->getLoginUserId();
        $agent_id = '';

        $finally_approved = false;

        require_once('workflow/folder_logic.csp');
        $logic = \GRN_Workflow_Folder_Logic::getInstance();
        $folder_org = $logic->getFolder($folder_id);
        $folder_user_id = $folder_org['col_user'];
        if ($user_id != $folder_user_id) {
            //代理承認の検証
            $config = $this->getSystemConfig();
            if ($config->isProxyApproval($user_id, $folder_user_id)) {
                $agent_id = $user_id;
                $user_id = $folder_user_id;
            }
        }

        //Update Form and Item List
        require_once('workflow/controller_util.csp');
        require_once('workflow/item_resources.csp');
        $item_data_util
            = \GRN_Workflow_ItemData_Controller_Utility::getInstance();
        $translation_map_item_data_tmp = [
            'iid'         => 'itemdata_id',
            //Item Data ID
            'foreign_key' => 'itemdata_foreign_key',
            //Item Data foreign_key
        ];
        $item_data_list
            = $item_data_util->getListViewEx($translation_map_item_data_tmp,
            $petition_id);
        unset($item_data_util);

        require_once('workflow/change_access_data.csp');
        $change_access_data_logic
            = \GRN_Workflow_ChangeAccessData::getInstance();
        require_once('workflow/controller_util.csp');
        $controller_util = new \GRN_Workflow_ControllerUtil($page_name);
        $path_steps = $controller_util->getPathInfo($petition_id, false,
            CB_DATABASE_NO_LOCK);

        if ( ! is_null($agent_id) && strlen($agent_id) > 0) {
            $path_steps_current = current($path_steps);
            $path_step
                = $controller_util->getInProcessPathStep($path_steps_current);
            if ( ! $path_step
                 || $path_step['col_type'] == GRN_WORKFLOW_CIRCULAR
            ) {
                cb_throw_error(E_GRN_WRKF_PETITION_DENY_ACCESS);
            }
        }

        // 処理中の経路ステップを取得
        $path_steps_current = current($path_steps);
        $path_step_id
            = $controller_util->getInProcessPathStepId($path_steps_current);
        if ($path_step_id) {
            if ($path_step_id != $in_process) {
                cb_throw_error(E_GRN_WRKF_INVALID_PATH_STEP_ID);
            }
            foreach (array_keys($item_data_list) as $item_id) {
                $change_access
                    = $change_access_data_logic->evaluateEx($item_data_list[$item_id]['iid'],
                    $path_step_id);
                if ($change_access['col_edit'] == 1) {
                    $item_util
                        = &grn_workflow_get_item_util($item_data_list[$item_id]['foreign_key']);
                    if ($item_util) {
                        $item_util->parseItemData($input, 'item',
                            $item_data_list[$item_id]);
                        unset($item_util);
                    }
                }
            }
        }

        require_once('workflow/controller_util.csp');
        $controller_util = new \GRN_Workflow_ControllerUtil($page_name);
        $folder = $controller_util->getSimilarFolder($user_id,
            $folder_id);
        if (is_array($folder) && 0 < count($folder)) {
            $folder_id = $folder['_id'];
        }

        // 申請を取得
        require_once('workflow/petition_logic.csp');
        $logic = \GRN_Workflow_Petition_Logic::getInstance();
        $petition = $logic->get($petition_id);
        $status = $petition['col_status'];

        // 経路を取得
        require_once('workflow/controller_util.csp');
        $controller_util = new \GRN_Workflow_ControllerUtil($page_name);
        $path_steps = $controller_util->getPathInfo($petition_id, false,
            CB_DATABASE_NO_LOCK);

        // 処理中の経路ステップを取得
        $path_steps_current = current($path_steps);
        $path_step_id
            = $controller_util->getInProcessPathStepId($path_steps_current);

        $comment = null;
        if (array_key_exists('col_comment', $input)) {
            $comment = $input['col_comment'];
        }
        $ptime = time();

        $uids = [];
        $forced_remove = false;
        $message_type = null;
        $message_args = ['pid' => $petition_id, 'comment' => $comment];
        require_once('workflow/path_data.csp');
        switch ($command) {
            // 承認
            case self::HANDLE_ACCEPTANCE:
                if (GRN_WORKFLOW_STATUS_IN_PROCESS < $petition['col_status']
                    && GRN_WORKFLOW_STATUS_REMAND != $petition['col_status']
                ) {
                    // 進行中、差し戻しでない申請は承認できない
                    cb_throw_error(E_GRN_WRKF_PETITION_STATUS_DENY_ACCEPT);
                }

                // 経路種別が承認か確認
                $path_step =& $path_steps[$path_step_id];
                if (GRN_WORKFLOW_ACCEPTANCE != $path_step['col_type']) {
                    // 承認でない経路ステップは承認できない
                    cb_throw_error(E_GRN_WRKF_DENY_ACCEPT_PATH_STEP_DATA);
                }

                // 処理者の結果を変更
                $result = GRN_WORKFLOW_RESULT_ACCEPT;
                $path_steps = $controller_util->modifyUserResult($path_step_id,
                    $user_id,
                    $result,
                    $comment,
                    $ptime,
                    true,
                    true,
                    $agent_id);

                // 次以降の経路ステップを未処理に変更
                $path_step =& $path_steps[$path_step_id];
                $controller_util->modifyPathStepsStatus($path_step,
                    GRN_WORKFLOW_FINISHED_NONE);
                $message_type = 'petition_accept';
                // 承認経路ステップを評価
                if ($controller_util->evalAcceptancePathStep($path_step)) {
                    // 経路ステップを処理済に変更
                    $logic = \GRN_Workflow_PathStepDatas::getInstance();
                    $properties
                        = ['col_finished' => GRN_WORKFLOW_FINISHED_COMPLETE];
                    $path_step['col_finished'] = GRN_WORKFLOW_FINISHED_COMPLETE;
                    $logic->modify($path_step_id, $properties);

                    // 次に処理を回す経路ステップIDを取得
                    $path_steps_current = current($path_steps);
                    $path_step_id
                        = $controller_util->getInProcessPathStepId($path_steps_current);
                    if (false === $path_step_id) {
                        // 完了
                        $status = GRN_WORKFLOW_STATUS_FINISHED;
                        $uids[] = $petition['col_user'];
                        if ( ! is_null($petition['col_agent_user'])) {
                            $uids[] = $petition['col_agent_user'];
                        }
                        $foreign_keys = [
                            'FINISH_FOLDER_FOREIGN_KEY',
                            'IN_FOLDER_FOREIGN_KEY'
                        ];
                        $forced_remove = true;
                        $finally_approved = true;

                        $message_type = "petition_accept_with_approved_number";
                        $controller_util->updateSerialNumberAfterFinallyApproved($petition,
                            $message_args);

                        // 自動書き出し
                        if ($petition['col_auto_export']) {
                            $petition_controller_util
                                = \GRN_Workflow_Petition_Controller_Utility::getInstance();
                            $petition_controller_util->exportSinglePetition($petition_id,
                                $status);
                        }
                    } else {
                        $path_step =& $path_steps[$path_step_id];
                        if (GRN_WORKFLOW_CIRCULAR == $path_step['col_type']) {
                            // 申請者にフォルダリレーションを追加
                            $uids[] = $petition['col_user'];
                            if ( ! is_null($petition['col_agent_user'])) {
                                $uids[] = $petition['col_agent_user'];
                            }
                            $foreign_keys = [
                                'FINISH_FOLDER_FOREIGN_KEY',
                                'IN_FOLDER_FOREIGN_KEY'
                            ];
                            // 最終承認
                            $status = GRN_WORKFLOW_RESULT_ACCEPT;

                            $message_type
                                = "petition_accept_with_approved_number";
                            $controller_util->updateSerialNumberAfterFinallyApproved($petition,
                                $message_args);

                            $logic
                                = \GRN_Workflow_Petition_Logic::getInstance();
                            $logic->modifyStatus($petition_id, $status);
                            $b_status_modified = true;
                            $controller_util->sendPetition($petition_id, $uids,
                                $foreign_keys,
                                GRN_WORKFLOW_MAILNOTIFICATION_ACTION_ACCEPTED);
                            $finally_approved = true;

                            // 自動書き出し
                            if ($petition['col_auto_export']) {
                                $petition_controller_util
                                    = \GRN_Workflow_Petition_Controller_Utility::getInstance();
                                $petition_controller_util->exportSinglePetition($petition_id,
                                    $status);
                            }
                        } else {
                            // 進行中
                            $status = GRN_WORKFLOW_STATUS_IN_PROCESS;
                        }

                        if ( ! array_key_exists('uids', $path_step)) {
                            assert('FALSE');
                        }
                        $uids = $path_step['uids'];
                        $foreign_keys = [
                            'UNPROCESSED_FOLDER_FOREIGN_KEY',
                            'IN_FOLDER_FOREIGN_KEY'
                        ];
                    }

                    // 申請の状況を変更
                    if ( ! (isset($b_status_modified) && $b_status_modified)) {
                        $logic = \GRN_Workflow_Petition_Logic::getInstance();
                        $logic->modifyStatus($petition_id, $status);
                    }

                    // 次の処理者に申請を送信
                    $controller_util->sendPetition($petition_id, $uids,
                        $foreign_keys,
                        GRN_WORKFLOW_MAILNOTIFICATION_ACTION_TO_NEXT);
                } else {
                    // 申請の状況を進行中に変更
                    if (GRN_WORKFLOW_STATUS_UNPROCESSING
                        == $petition['col_status']
                    ) {
                        $status = GRN_WORKFLOW_STATUS_IN_PROCESS;
                        $logic->modifyStatus($petition_id, $status);
                    } else {
                        if (0 == strlen($ptime)) {
                            $ptime = time();
                        }
                        $properties = [];
                        $properties['col_ptime'] = $ptime;
                        require_once('workflow/petition_manager.csp');
                        $petition_manager
                            = \GRN_Workflow_Petition_Manager::getInstance();
                        $petition_manager->update($petition_id, $properties);
                    }
                }
                break;
            // 確認
            case self::HANDLE_CONFIRM:
                // 進行中、承認
                switch ($petition['col_status']) {
                    case GRN_WORKFLOW_STATUS_UNPROCESSING:
                    case GRN_WORKFLOW_STATUS_IN_PROCESS:
                        $path_step =& $path_steps[$path_step_id];
                        $top_path_step
                            = $controller_util->getTopPathStep($path_step);
                        if (false !== array_search($user_id, $path_step['uids'])
                            &&
                            ! $controller_util->isOnlyCircularPathSteps($top_path_step)
                        ) {
                            $uids[] = $user_id;
                            break;
                        }
                    case GRN_WORKFLOW_STATUS_TEMPORARY:
                    case GRN_WORKFLOW_STATUS_ACCEPTANCE:
                        // 経路種別（回覧）を確認
                        $path_step =& $path_steps[$path_step_id];
                        if (GRN_WORKFLOW_CIRCULAR == $path_step['col_type']) {
                            if (false === array_search($user_id,
                                    $path_step['uids'])
                            ) {
                                // 経路ステップの処理が移ってしまった
                                require_once('workflow/controller_util.csp');
                                $controller_util
                                    = new \GRN_Workflow_ControllerUtil($page_name);
                                $path_steps
                                    = $controller_util->getLockedPathInfo($path_step_id);
                                $path_step = current($path_steps);
                                $path_step_id_to_confirm = null;
                                while ($path_step) {
                                    if ($path_step['col_activate']) {
                                        $path_step_id = $path_step['_id'];
                                        if (false !== ($key
                                                = array_search($user_id,
                                                $path_step['uids']))
                                            && $path_step['col_finished']
                                               == GRN_WORKFLOW_FINISHED_COMPLETE
                                        ) {
                                            if ( ! $path_step['users'][$key]['col_ptime']) {
                                                if ( ! $this->isPathStepAfterRemand($path_step)) {
                                                    $path_step_id_to_confirm
                                                        = $path_step_id;
                                                }
                                            }
                                        }
                                    }
                                    $path_step =& $path_step['next'];
                                }
                                if ($path_step_id_to_confirm) {
                                    $result = GRN_WORKFLOW_RESULT_CONFIRM;
                                    $controller_util->modifyUserResult($path_step_id_to_confirm,
                                        $user_id, $result, $comment, $ptime,
                                        true, false);
                                }
                            } else {
                                // 処理者の結果を変更
                                $result = GRN_WORKFLOW_RESULT_CONFIRM;
                                $path_steps
                                    = $controller_util->modifyUserResult($path_step_id,
                                    $user_id, $result, $comment, $ptime);

                                // 回覧経路ステップを評価
                                $path_step =& $path_steps[$path_step_id];
                                if ($controller_util->evalCircularPathStep($path_step)) {
                                    // 経路ステップを処理済に変更
                                    $logic
                                        = \GRN_Workflow_PathStepDatas::getInstance();
                                    $properties
                                        = ['col_finished' => GRN_WORKFLOW_FINISHED_COMPLETE];
                                    $path_step['col_finished']
                                        = GRN_WORKFLOW_FINISHED_COMPLETE;
                                    $logic->modify($path_step_id, $properties);

                                    // 次に処理を回す経路ステップIDを取得
                                    $path_steps_current = current($path_steps);
                                    $path_step_id
                                        = $controller_util->getInProcessPathStepId($path_steps_current);
                                    if (false === $path_step_id) {
                                        // 完了
                                        $status = GRN_WORKFLOW_STATUS_FINISHED;
                                        $uids[] = $petition['col_user'];
                                        if ( ! is_null($petition['col_agent_user'])) {
                                            $uids[]
                                                = $petition['col_agent_user'];
                                        }
                                        $foreign_keys = [
                                            'FINISH_FOLDER_FOREIGN_KEY',
                                            'IN_FOLDER_FOREIGN_KEY'
                                        ];
                                        $forced_remove = true;
                                        $action_type
                                            = GRN_WORKFLOW_MAILNOTIFICATION_ACTION_FINISHED;
                                    } else {
                                        if (GRN_WORKFLOW_STATUS_ACCEPTANCE
                                            != $petition['col_status']
                                        ) {
                                            // 進行中
                                            $status
                                                = GRN_WORKFLOW_STATUS_IN_PROCESS;
                                        }
                                        $path_step
                                            =& $path_steps[$path_step_id];
                                        if ( ! array_key_exists('uids',
                                            $path_step)
                                        ) {
                                            assert('FALSE');
                                        }
                                        $uids = $path_step['uids'];
                                        $foreign_keys = [
                                            'UNPROCESSED_FOLDER_FOREIGN_KEY',
                                            'IN_FOLDER_FOREIGN_KEY'
                                        ];
                                        $action_type
                                            = GRN_WORKFLOW_MAILNOTIFICATION_ACTION_TO_NEXT;
                                    }
                                    // 申請のステータスを変更
                                    $logic
                                        = \GRN_Workflow_Petition_Logic::getInstance();
                                    $logic->modifyStatus($petition_id, $status);
                                    // 次の処理者に申請を送信
                                    $controller_util->sendPetition($petition_id,
                                        $uids, $foreign_keys, $action_type);
                                } else {
                                    if (GRN_WORKFLOW_STATUS_ACCEPTANCE
                                        != $petition['col_status']
                                    ) {
                                        // 進行中
                                        $status
                                            = GRN_WORKFLOW_STATUS_IN_PROCESS;
                                    }
                                    // 申請のステータスを変更
                                    $logic
                                        = \GRN_Workflow_Petition_Logic::getInstance();
                                    $logic->modifyStatus($petition_id, $status);
                                }
                            }
                        } else {
                            while ($path_step) {
                                if ($path_step['col_activate']) {
                                    $path_step_id = $path_step['_id'];
                                    if (false !== ($key = array_search($user_id,
                                            $path_step['uids']))
                                        && $path_step['col_finished']
                                           == GRN_WORKFLOW_FINISHED_COMPLETE
                                    ) {
                                        if ( ! $path_step['users'][$key]['col_ptime']) {
                                            if ( ! $this->isPathStepAfterRemand($path_step)) {
                                                $result
                                                    = GRN_WORKFLOW_RESULT_CONFIRM;
                                                $controller_util->modifyUserResult($path_step_id,
                                                    $user_id, $result, $comment,
                                                    $ptime, true, false);
                                            }
                                            break;
                                        }
                                    }
                                }
                                $path_step =& $path_step['previous'];
                            }
                        }
                        break;
                    case GRN_WORKFLOW_STATUS_IN_PROCESS_CANCEL:
                        // 差し戻しからの取り消しは除外
                        if ($path_step_id) {
                            $path_step =& $path_steps[$path_step_id];
                            // 処理者の所属を確認
                            if ( ! array_key_exists('uids', $path_step)) {
                                assert('FALSE');
                            }
                            if (false !== array_search($user_id,
                                    $path_step['uids'])
                            ) {
                                // 処理者の結果を変更
                                $result = GRN_WORKFLOW_RESULT_CONFIRM;
                                $path_steps
                                    = $controller_util->modifyUserResult($path_step_id,
                                    $user_id, $result, $comment, $ptime);
                                // すべての経路ステップを処理済に変更
                                if ($controller_util->evalPathStep($path_step)) {
                                    $logic
                                        = \GRN_Workflow_PathStepDatas::getInstance();
                                    $properties
                                        = ['col_finished' => GRN_WORKFLOW_FINISHED_COMPLETE];
                                    $logic->modifyList(array_keys($path_steps),
                                        $properties);
                                }
                            } else {
                                // 過去の承認(誰か1人)の経路を確認する
                                while ($path_step) {
                                    if ($path_step['col_activate']) {
                                        $path_step_id = $path_step['_id'];
                                        if (false !== ($key
                                                = array_search($user_id,
                                                $path_step['uids']))
                                            && $path_step['col_finished']
                                               == GRN_WORKFLOW_FINISHED_COMPLETE
                                            && $path_step['col_acceptance_type']
                                               == GRN_WORKFLOW_OPERATOR_OR
                                        ) {
                                            if ( ! $path_step['users'][$key]['col_ptime']) {
                                                if ( ! $this->isPathStepAfterRemand($path_step)) {
                                                    $result
                                                        = GRN_WORKFLOW_RESULT_CONFIRM;
                                                    $controller_util->modifyUserResult($path_step_id,
                                                        $user_id, $result,
                                                        $comment, $ptime, true,
                                                        false);
                                                }
                                                break;
                                            }
                                        }
                                    }
                                    $path_step =& $path_step['previous'];
                                }
                            }
                        }
                        break;
                    case GRN_WORKFLOW_STATUS_REJECTION:
                        $path_steps_current = current($path_steps);
                        $path_step_id
                            = $controller_util->getRejectionPathStepId($path_steps_current);
                        $path_step =& $path_steps[$path_step_id];
                        // 処理者の所属を確認
                        if ( ! array_key_exists('uids', $path_step)) {
                            assert('FALSE');
                        }
                        if (false !== ($result = array_search($user_id,
                                $path_step['uids']))
                        ) {
                            if (GRN_WORKFLOW_RESULT_UNPROCESSING
                                == $path_step['users'][$result]['col_result']
                            ) {
                                // 処理者の結果を変更
                                $result = GRN_WORKFLOW_RESULT_CONFIRM;
                                $controller_util->modifyUserResult($path_step_id,
                                    $user_id, $result, $comment, $ptime, true,
                                    false);
                            }
                        } else {
                            // 過去の承認(誰か1人)の経路を確認する
                            while ($path_step) {
                                if ($path_step['col_activate']) {
                                    $path_step_id = $path_step['_id'];
                                    if (false !== ($key = array_search($user_id,
                                            $path_step['uids']))
                                        && $path_step['col_finished']
                                           == GRN_WORKFLOW_FINISHED_COMPLETE
                                        && $path_step['col_acceptance_type']
                                           == GRN_WORKFLOW_OPERATOR_OR
                                    ) {
                                        if ( ! $path_step['users'][$key]['col_ptime']) {
                                            if ( ! $this->isPathStepAfterRemand($path_step)) {
                                                $result
                                                    = GRN_WORKFLOW_RESULT_CONFIRM;
                                                $controller_util->modifyUserResult($path_step_id,
                                                    $user_id, $result, $comment,
                                                    $ptime, true, false);
                                            }
                                            break;
                                        }
                                    }
                                }
                                $path_step =& $path_step['previous'];
                            }
                        }
                        break;
                    case GRN_WORKFLOW_STATUS_FINISHED:
                        $path_step = current($path_steps);
                        $path_step_id_to_confirm = null;
                        while ($path_step) {
                            if ($path_step['col_activate']) {
                                $path_step_id = $path_step['_id'];
                                if (false !== ($key = array_search($user_id,
                                        $path_step['uids']))
                                    && $path_step['col_finished']
                                       == GRN_WORKFLOW_FINISHED_COMPLETE
                                ) {
                                    if ( ! $path_step['users'][$key]['col_ptime']) {
                                        if ( ! $this->isPathStepAfterRemand($path_step)) {
                                            $path_step_id_to_confirm
                                                = $path_step_id;
                                        }
                                    }
                                }
                            }
                            $path_step =& $path_step['next'];
                        }
                        if ($path_step_id_to_confirm) {
                            $result = GRN_WORKFLOW_RESULT_CONFIRM;
                            $controller_util->modifyUserResult($path_step_id_to_confirm,
                                $user_id, $result, $comment, $ptime, true,
                                false);
                        }
                        $forced_remove = true;
                        break;
                    case GRN_WORKFLOW_STATUS_REMAND:
                        foreach (array_keys($path_steps) as $path_step_id) {
                            $path_step =& $path_steps[$path_step_id];
                            if ($path_step['col_activate']) {
                                if ( ! $path_step['col_skip']) {
                                    if ( ! $path_step['col_finished']) {
                                        $path_step['in_process'] = true;
                                        if (false !== array_search($user_id,
                                                $path_step['uids'])
                                        ) {
                                            $json->response([
                                                'redirect' => cb_get_full_url(self::MOBILE_WORKFLOW_NOTIFICATION_PAGE,
                                                    ['module_id' => self::MOBILE_WORKFLOW_MODULE_ID])
                                            ]);
                                            cb_safe_exit();
                                        }
                                    }
                                }
                            }
                        }
                        break;
                    case GRN_WORKFLOW_STATUS_UNPROCESSING_CANCEL:
                    default:
                        $forced_remove = true;
                        break;
                }
                $message_type = 'petition_confirm';
                break;
            // 却下
            case self::HANDLE_REJECT:
                if (GRN_WORKFLOW_STATUS_IN_PROCESS < $petition['col_status']
                    && GRN_WORKFLOW_STATUS_REMAND != $petition['col_status']
                ) {
                    // 進行中、差し戻しでない申請は却下できない
                    cb_throw_error(E_GRN_WRKF_PETITION_STATUS_DENY_REJECT);
                }
                // 経路種別が承認か確認
                $path_step =& $path_steps[$path_step_id];
                if (GRN_WORKFLOW_ACCEPTANCE != $path_step['col_type']) {
                    // 承認でない経路ステップは却下できない
                    cb_throw_error(E_GRN_WRKF_DENY_REJECT_PATH_STEP_DATA);
                }
                // 処理者の結果を変更
                $result = GRN_WORKFLOW_RESULT_REJECT;
                $path_steps = $controller_util->modifyUserResult($path_step_id,
                    $user_id,
                    $result,
                    $comment,
                    $ptime,
                    true,
                    true,
                    $agent_id
                );
                // すべての経路ステップを処理済に変更
                $logic = \GRN_Workflow_PathStepDatas::getInstance();
                $properties
                    = ['col_finished' => GRN_WORKFLOW_FINISHED_COMPLETE];
                $logic->modifyList(array_keys($path_steps), $properties);
                $properties
                    = ['col_finished' => GRN_WORKFLOW_FINISHED_REJECTION];
                $logic->modify($path_step_id, $properties);
                // 申請の状況を却下に変更
                $logic = \GRN_Workflow_Petition_Logic::getInstance();
                $logic->modifyStatus($petition_id,
                    GRN_WORKFLOW_STATUS_REJECTION, $user_id, $comment, $ptime);

                // 申請者に申請を送信
                $uids[] = $petition['col_user'];
                if ( ! is_null($petition['col_agent_user'])) {
                    $uids[] = $petition['col_agent_user'];
                }
                $foreign_keys = [
                    'FINISH_FOLDER_FOREIGN_KEY',
                    'IN_FOLDER_FOREIGN_KEY'
                ];
                $controller_util->sendPetition($petition_id, $uids,
                    $foreign_keys,
                    GRN_WORKFLOW_MAILNOTIFICATION_ACTION_REJECTED);
                $forced_remove = true;
                $message_type = 'petition_reject';

                require('workflow/auto_schedule_register_logic.csp');
                $wf_register_logic
                    = \GRN_Workflow_Auto_Schedule_Register_Logic::getInstance();
                $wf_register_logic->delete($petition_id);

                break;
            // 差し戻し
            case self::HANDLE_REMAND:
                if (GRN_WORKFLOW_STATUS_IN_PROCESS < $petition['col_status']
                    && GRN_WORKFLOW_STATUS_REMAND != $petition['col_status']
                ) {
                    // 進行中、差し戻しでない申請は差し戻しできない
                    cb_throw_error(E_GRN_WRKF_PETITION_STATUS_DENY_REMAND);
                }

                // 経路種別（承認）を確認
                $path_step =& $path_steps[$path_step_id];
                if (GRN_WORKFLOW_ACCEPTANCE != $path_step['col_type']) {
                    // 承認でない経路ステップは差し戻しできない
                    cb_throw_error(E_GRN_WRKF_DENY_REMAND_PATH_STEP_DATA);
                }
                // 差し戻し先のユーザーが削除されていないか確認
                if ($destination == 'applicant') {
                    if (strlen($petition['col_user']) == 0) {
                        // 差し戻し先が申請者で、申請者が削除済みのユーザー
                        cb_throw_error(E_GRN_WRKF_INVALID_USER_ID);
                    }
                } elseif (array_key_exists($destination, $path_steps)) {
                    $all_transactor_deleted = true;
                    foreach ($path_steps[$destination]['uids'] as $uid) {
                        if (strlen($uid) > 0) {
                            $all_transactor_deleted = false;
                            break;
                        }
                    }
                    if ($all_transactor_deleted) {
                        // 差し戻し先の経路ステップの全てユーザーが削除済み
                        cb_throw_error(E_GRN_WRKF_INVALID_USER_ID);
                    }
                } else {
                    // 差し戻し先が不正
                    assert('$destination == "applicant" || array_key_exists( $destination, $path_steps )');
                }

                // 処理者の結果を変更（ここではデータベースに反映しない）
                $result = GRN_WORKFLOW_RESULT_REMAND;
                $path_steps = $controller_util->modifyUserResult($path_step_id,
                    $user_id,
                    $result,
                    $comment,
                    $ptime,
                    false,
                    true,
                    $agent_id
                );
                // 結果、コメント、日時をコメントにまとめ、データベースに反映
                $path_steps = $controller_util->finalizeUserComment($path_steps,
                    $destination, $agent_id, $path_step_id, $user_id);
                // 申請の状況を差し戻しに変更
                $logic = \GRN_Workflow_Petition_Logic::getInstance();
                $logic->modifyStatus($petition_id, GRN_WORKFLOW_STATUS_REMAND,
                    $user_id, $comment, $ptime, $agent_id);
                // すべての経路ステップを処理済に変更
                $logic = \GRN_Workflow_PathStepDatas::getInstance();
                $properties
                    = ['col_finished' => GRN_WORKFLOW_FINISHED_COMPLETE];
                $logic->modifyList(array_keys($path_steps), $properties);
                // 差し戻し元を差し戻し完了に変更
                $properties = ['col_finished' => GRN_WORKFLOW_FINISHED_REMAND];
                $logic->modify($path_step_id, $properties);
                if ('applicant' == $destination) {
                    // 差し戻し先は申請者
                    $uids[] = $petition['col_user'];
                    if ( ! is_null($petition['col_agent_user'])) {
                        $uids[] = $petition['col_agent_user'];
                    }
                } else {
                    // 差し戻し先を未完了に変更
                    $path_step = $path_steps[$destination];
                    $properties = ['col_finished' => null];
                    $logic->modify($path_step['_id'], $properties);
                    // 差し戻し先は（差し戻し先の）処理者全員
                    $uids = $path_step['uids'];
                }
                // 申請を送信
                $foreign_keys = [
                    'UNPROCESSED_FOLDER_FOREIGN_KEY',
                    'IN_FOLDER_FOREIGN_KEY'
                ];
                $controller_util->sendPetition($petition_id, $uids,
                    $foreign_keys,
                    GRN_WORKFLOW_MAILNOTIFICATION_ACTION_REMANDED);
                $message_type = 'petition_remand';
                break;
            // （差し戻しの）取り消し
            case 'cancel':
                if (GRN_WORKFLOW_STATUS_REMAND != $petition['col_status']) {
                    // 差し戻しでない申請は取り消しできない
                    cb_throw_error(E_GRN_WRKF_PETITION_STATUS_DENY_CANCEL);
                }

                $json->response([
                    'redirect' => cb_get_full_url('workflow/mobile/cancel', [
                        'fid'    => $folder_id,
                        'pid'    => $petition_id,
                        'handle' => true
                    ])
                ]);
                cb_safe_exit();
                break;
            default:
                // 不正なコマンド
                cb_throw_error(E_GRN_WRKF_INVALID_COMMAND);
                break;
        }

        // 監査
        require_once('workflow/inspection.csp');
        $inspection = \GRN_Workflow_Petition_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            if (0 < strlen($message_type)) {
                $inspection->record($message_type, $message_args);
            }
        }

        if (false === array_search($user_id, $uids) || $forced_remove) {
            // 処理者の申請を削除
            $controller_util->removePetition($petition_id, $user_id,
                'UNPROCESSED_FOLDER_FOREIGN_KEY');
        }

        $response
            = [
            'redirect' => cb_get_full_url(self::MOBILE_WORKFLOW_NOTIFICATION_PAGE,
                ['module_id' => self::MOBILE_WORKFLOW_MODULE_ID])
        ];
        if ($finally_approved) {
            $response['success_do'] = 'auto_schedule';
            $response['petition_id'] = $petition_id;
        }
        $json->response($response);
        cb_safe_exit();
    }

    /**
     * 過去に差し戻しが行われたことがあり
     * 差し戻し先の経路が $path_step より後ろだったため
     * 以前の承認が現在も有効である場合 TRUE を返す
     */
    private function isPathStepAfterRemand(& $path_step)
    {
        if ( ! $path_step['col_finished'] == GRN_WORKFLOW_FINISHED_COMPLETE) {
            return false;
        }
        $is_after_remand = true;
        foreach (array_keys($path_step['users']) as $path_step_user_key) {
            if ($path_step['users'][$path_step_user_key]['col_ptime']) {
                $is_after_remand = false;
            }
        }

        return $is_after_remand;
    }

    private function checkRequiredItem()
    {
        $petition_id = $this->getPetitionId();
        $input = $this->getInput();
        require_once('workflow/petition_logic.csp');
        $logic = \GRN_Workflow_Petition_Logic::getInstance();
        $petition = $logic->get($petition_id);
        if (GRN_WORKFLOW_STATUS_UNPROCESSING == $petition['col_status']
            || GRN_WORKFLOW_STATUS_IN_PROCESS == $petition['col_status']
        ) {
            $view_page = new View($input);
            $item_data_list = $view_page->getItemDataList();
            foreach ($item_data_list as $item) {
                if (array_key_exists('mobile_view_mode', $item)
                    && $item['mobile_view_mode'] == 'edit'
                    && $item['required']
                ) {
                    switch ($item['foreign_key']) {
                        case 'grn.workflow.string_single' :
                        case 'grn.workflow.string_multiple' :
                            if ( ! $item['text']) {
                                cb_throw_error(E_GRN_WRKF_EMPTY_REQUIRED_FIELDS);
                            }
                            break;
                        case 'grn.workflow.date' :
                            $item_date_for_view = cb_unserialize($item['text'],
                                ["allowed_classes" => false]);
                            if (strlen($item_date_for_view['year']) == 0
                                && strlen($item_date_for_view['month']) == 0
                                && strlen($item_date_for_view['day']) == 0
                            ) {
                                cb_throw_error(E_GRN_WRKF_EMPTY_REQUIRED_FIELDS);
                            }
                            break;
                        case 'grn.workflow.file' :
                            if ( ! count($item['files'])) {
                                cb_throw_error(E_GRN_WRKF_EMPTY_REQUIRED_FIELDS);
                            }
                            break;
                        case 'grn.workflow.numeric' :
                            if ( ! $item['number']) {
                                cb_throw_error(E_GRN_WRKF_EMPTY_REQUIRED_FIELDS);
                            }
                            break;
                    }
                }
                if (count($item['sub_item_data_list']) > 0) {
                    foreach ($item['sub_item_data_list'] as $sub_item) {
                        if (array_key_exists('mobile_view_mode', $sub_item)
                            && $sub_item['mobile_view_mode'] == 'edit'
                            && $sub_item['required']
                        ) {
                            switch ($sub_item['foreign_key']) {
                                case 'grn.workflow.string_single' :
                                case 'grn.workflow.string_multiple' :
                                    if ( ! $sub_item['text']) {
                                        cb_throw_error(E_GRN_WRKF_EMPTY_REQUIRED_FIELDS);
                                    }
                                    break;
                                case 'grn.workflow.date' :
                                    $sub_item_date_for_view
                                        = cb_unserialize($sub_item['text'],
                                        ["allowed_classes" => false]);
                                    if (strlen($sub_item_date_for_view['year'])
                                        == 0
                                        && strlen($sub_item_date_for_view['month'])
                                           == 0
                                        && strlen($sub_item_date_for_view['day'])
                                           == 0
                                    ) {
                                        cb_throw_error(E_GRN_WRKF_EMPTY_REQUIRED_FIELDS);
                                    }
                                    break;
                                case 'grn.workflow.file' :
                                    if ( ! count($sub_item['files'])) {
                                        cb_throw_error(E_GRN_WRKF_EMPTY_REQUIRED_FIELDS);
                                    }
                                    break;
                                case 'grn.workflow.numeric' :
                                    if ( ! $sub_item['number']) {
                                        cb_throw_error(E_GRN_WRKF_EMPTY_REQUIRED_FIELDS);
                                    }
                                    break;
                            }
                        }
                    }
                }
            }
        }
    }

    public function getTitle()
    {
        switch (cb_at($this->getInput(), self::ARG_COMMAND)) {
            case self::HANDLE_ACCEPTANCE :
                return cb_msg('grn.workflow.mobile', 'acceptance');
            case self::HANDLE_REJECT :
                return cb_msg('grn.workflow.mobile', 'reject');
            case self::HANDLE_REMAND :
                return cb_msg('grn.workflow.mobile', 'remand');
            case self::HANDLE_CONFIRM :
                return cb_msg('grn.workflow.mobile', 'confirmation');
            default :
                cb_throw_error(E_GRN_WRKF_INVALID_COMMAND);
                break;
        }
    }
}
