<?php

namespace grn\workflow\screen\mobile;

use grn\grn\GrnGenericScreenBase;
use grn\grn\Validate;
use grn\grn\GrnException;

require_once('workflow/resources.csp');
require_once('workflow/error_code.csp');

class MobileWorkflowScreenBase extends GrnGenericScreenBase
{
    const WORKFLOW_APP_ID = 'workflow';

    const ARG_FOLDER_ID = 'fid';
    const ARG_PETITION_ID = 'pid';
    const ARG_COMMAND = 'cmd';
    const ARG_HANDLE = 'handle';
    const ARG_COMMENT = 'comment';
    const ARG_IN_PROCESS = 'in_process';

    //use plugin already existed to only display editable item(s)
    const MOBILE_ITEM_DATA_EDIT_MODE = 'view';

    const HANDLE_ACCEPTANCE = 'acceptance';
    const HANDLE_REJECT = 'reject';
    const HANDLE_REMAND = 'remand';
    const HANDLE_CONFIRM = 'confirmation';

    const MOBILE_WORKFLOW_NOTIFICATION_PAGE = 'notification/mobile/index';
    const MOBILE_WORKFLOW_MODULE_ID = 'grn.workflow';

    private $folder_id = null;
    private $petition_id = null;
    private $cmd;
    private $handle;
    private $comment;
    private $in_process = null;

    public function __construct($input)
    {
        parent::__construct($input);
        $this->setMobileApplicationId(self::WORKFLOW_APP_ID);
    }

    public function getFolderId()
    {
        return $this->folder_id;
    }

    protected function setFolderId($value)
    {
        $this->folder_id = $value;
    }

    public function getPetitionId()
    {
        return $this->petition_id;
    }

    protected function setPetitionId($value)
    {
        $this->petition_id = $value;
    }

    public function getCommand()
    {
        return $this->cmd;
    }

    protected function setCommand($value)
    {
        $this->cmd = $value;
    }

    public function getHandle()
    {
        return $this->handle;
    }

    protected function setHandle($value)
    {
        $this->handle = $value;
    }

    public function getComment()
    {
        return $this->comment;
    }

    protected function setComment($value)
    {
        $this->comment = $value;
    }

    public function getInProcess()
    {
        return $this->in_process;
    }

    protected function setInProcess($value)
    {
        $this->in_process = $value;
    }

    public function getUum()
    {
        global $G_container_base;

        return $G_container_base->getInstance('uum');
    }

    protected function getSystemConfig()
    {
        require_once('workflow/config.csp');
        $configs = \GRN_Workflow_Configs::getInstance();

        return $configs->getSystemConfig();
    }

    public function checkArgFromInput(array $paraArr, array $input)
    {
        foreach ($paraArr as $para) {
            switch ($para) {
                case self::ARG_FOLDER_ID :
                    if (array_key_exists($para, $input)
                        && Validate::isNumber($input[$para])
                    ) {
                        $this->setFolderId($input[$para]);
                    } else {
                        throw new GrnException(E_GRN_WRKF_FOLDER_INVALID_FOLDER_ID);
                    }
                    break;
                case self::ARG_PETITION_ID :
                    if (array_key_exists($para, $input)
                        && Validate::isNumber($input[$para])
                    ) {
                        $this->setPetitionId($input[$para]);
                    } else {
                        throw new GrnException(E_GRN_WRKF_PETITION_INVALID_ID);
                    }
                    break;
                case self::ARG_COMMAND :
                    if (array_key_exists($para, $input)
                        && Validate::isIn($input[$para],
                            [
                                self::HANDLE_ACCEPTANCE,
                                self::HANDLE_REJECT,
                                self::HANDLE_REMAND,
                                self::HANDLE_CONFIRM
                            ])
                    ) {
                        $this->setCommand($input[$para]);
                    } else {
                        throw new GrnException(E_GRN_WRKF_INVALID_COMMAND);
                    }
                    break;
                case self::ARG_COMMENT :
                    if (array_key_exists($para, $input)) {
                        $this->setComment($input[$para]);
                    }
                    break;
                case self::ARG_HANDLE :
                    if (array_key_exists($para, $input)) {
                        $this->setHandle($input[$para]);
                    }
                    break;
                case self::ARG_IN_PROCESS :
                    if (array_key_exists($para, $input)) {
                        $this->setInProcess($input[$para]);
                    }
                    break;
            }
        }
    }
}
