<?php

namespace grn\workflow\screen;


use grn\grn\GrnGenericScreenBase;
use grn\workflow\CustomizationUtil;

class BlankSpaceScreen extends GrnGenericScreenBase
{
    const ACTION_MODE_DETAIL = 0;
    const ACTION_MODE_ADD = 1;
    const ACTION_MODE_MODIFY = 2;
    const ACTION_MODE_DELETE = 3;

    private $smarty;

    private $categoryId;
    private $itemId;
    private $formId;
    private $screenType;
    private $targetName;
    private $commandAction;
    private $cancelAction;
    private $actionMode;

    /**
     * BlankSpaceScreen constructor.
     *
     * @param     $input
     * @param int $action_mode
     */
    public function __construct($input, $action_mode = self::ACTION_MODE_DETAIL)
    {
        parent::__construct($input);

        // instantiate an Smarty object
        require_once("grn/smarty.csp");
        $this->smarty = new \GRN_Smarty;

        // Category
        $category_id = cb_at($input, 'cid');

        // Check Category Exists
        require_once('workflow/resources.csp');
        if (GRN_WORKFLOW_CATEGORY_NONPARTY_ID != $category_id) {
            require_once('workflow/category_logic_base.csp');
            $category_logic_base
                = \GRN_Workflow_Category_Logic_Base::getInstance();
            $category_logic_base->get($category_id);
        }

        // Check access right for operator
        if (cb_is_operation_page()) {
            // ログインユーザーが運用管理権限を持つか確認
            require_once('workflow/controller_util.csp');
            $category_util
                = \GRN_Workflow_Category_Controller_Utility::getInstance();
            if ( ! $category_util->evaluateManage()) {
                require_once('workflow/error_code.csp');
                cb_throw_error(E_GRN_WRKF_MANAGE_DENY);
            }

            // 未分類カテゴリか確認
            if (GRN_WORKFLOW_CATEGORY_NONPARTY_ID == $category_id) {
                require_once('workflow/error_code.csp');
                cb_throw_error(E_GRN_WRKF_MANAGE_DENY_NONPARTY_CATEGORY);
            }

            $throw_error = self::ACTION_MODE_DETAIL === $action_mode ? false
                : true;
            $is_manage = $category_util->checkManage($category_id,
                $throw_error, CB_DATABASE_NO_LOCK);
            $category_util->checkAccess($category_id, true,
                CB_DATABASE_NO_LOCK);
            $this->smarty->assign('is_not_manage', ! $is_manage);
        }

        $this->categoryId = $category_id;

        // Form
        $form_id = cb_at($input, 'fid');
        //Check Form Exist
        require_once('workflow/form_logic_base.csp');
        $column_list = ['_id'];
        $option = [
            'condition' => [
                0 => [
                    'column'   => 'col_deleted',
                    'value'    => '0',
                    'operator' => '='
                ]
            ]
        ];
        $form_logic_base = \GRN_Workflow_Form_Logic_Base::getInstance();
        $form_logic_base->get($form_id, $category_id, $column_list, $option);
        $this->formId = $form_id;

        $this->actionMode = $action_mode;
        $this->itemId = cb_at($input, 'iid');

        $this->screenType = cb_is_system_page() ? 'system' : 'operation';

        if (self::ACTION_MODE_ADD === $this->actionMode) {
            $this->targetName
                = "workflow/$this->screenType/formlayout_blank_space_add";
            $this->commandAction
                = "workflow/$this->screenType/command_formlayout_blank_space_add";
            $this->cancelAction = "workflow/$this->screenType/form_view";
        } elseif (self::ACTION_MODE_MODIFY === $this->actionMode) {
            $this->targetName
                = "workflow/$this->screenType/formlayout_blank_space_modify";
            $this->commandAction
                = "workflow/$this->screenType/command_formlayout_blank_space_modify";
            $this->cancelAction
                = "workflow/$this->screenType/formlayout_blank_space_detail";
        } else {
            $this->targetName
                = "workflow/$this->screenType/formlayout_blank_space_delete";
            $this->commandAction
                = "workflow/$this->screenType/command_formlayout_blank_space_delete";
            $this->cancelAction = '';
        }
    }

    /**
     * @return array
     */
    private function getFormItem()
    {
        $input = $this->getInput();
        //item id

        $item_for_view = [
            'iid'        => $this->itemId,
            'code'       => cb_at($input, 'code'),
            'reverse_br' => cb_at($input, 'reverse_br'),
        ];

        if (self::ACTION_MODE_ADD === $this->actionMode
            || cb_at($_SERVER, 'REQUEST_METHOD') == 'POST'
        ) {
            return $item_for_view;
        }

        require_once('workflow/controller_util.csp');
        $item_util = \GRN_Workflow_Item_Controller_Utility::getInstance();

        $translation_map_item = [
            'iid'         => '_id',                  //Item ID
            'code'        => 'code',                 //Item code
            'foreign_key' => 'foreign_key',          //Item foreign_key
            'reverse_br'  => 'br',                   //Item <br> Flag
        ];
        $item_for_view = $item_util->getView($this->itemId,
            $translation_map_item, $this->formId);
        if ($item_for_view['foreign_key'] != GRN_WORKFLOW_BLANK_SPACE_ITEM) {
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_ITEM_NOT_FOUND);
        }
        if (strpos($item_for_view['code'], '$') !== false) {
            $item_for_view['code'] = '';

        }
        $item_for_view['reverse_br'] = ($item_for_view['reverse_br'] == 1) ? 0
            : 1;

        return $item_for_view;
    }

    /**
     * @return mixed|string|void
     */
    public function fetch()
    {

        if (self::ACTION_MODE_ADD === $this->actionMode
            && ! CustomizationUtil::allowCustomization()
        ) {
            cb_throw_error(E_GRN_WRKF_CUSTOMIZATION_IS_DEACTIVATED);
        }

        $item = $this->getFormItem();

        require_once('SmartyValidate.class.php');
        \SmartyValidate::connect($this->smarty);
        \SmartyValidate::register_form($this->targetName, true);
        $this->smarty->assign('item', $item);
        $this->smarty->assign('category_id', $this->categoryId);
        $this->smarty->assign('form_id', $this->formId);

        if (self::ACTION_MODE_DELETE === $this->actionMode) {
            $confirm_message = cb_msg('grn.workflow.system',
                'formlayout_blank_space_delete_confirm', [
                    'parameter' => $item['code']
                ]);
            $this->smarty->assign('confirm_message', $confirm_message);
        }

        $form_info = [
            'name'          => $this->targetName,
            'action'        => $this->commandAction,
            'action_cancel' => $this->cancelAction
        ];
        $this->smarty->assign('form_info', $form_info);

        $this->smarty->assign('is_new_item',
            self::ACTION_MODE_ADD === $this->actionMode);

        $page_title = grn_get_current_page_display_name();
        $this->smarty->assign('page_title', $page_title);

        $site_position = $this->getSitePosition();

        $this->smarty->assign('site_position', $site_position);
        $this->smarty->assign('screen_type', $this->screenType);
        $this->smarty->assign('menu_params', [
            'cid' => $this->categoryId,
            'fid' => $this->formId,
            'iid' => $this->itemId
        ]);

        return $this->smarty->fetch(str_replace('command_', '',
            cb_get_pagename() . '.tpl'));
    }

    /**
     * @param $input
     *
     * @return mixed|string|void
     */
    public function post($input)
    {

        $redirect_form_view_page = "workflow/$this->screenType/form_view";
        $redirect_detail_page
            = "workflow/$this->screenType/formlayout_blank_space_detail";
        if (self::ACTION_MODE_ADD === $this->actionMode
            && ! CustomizationUtil::allowCustomization()
        ) {
            cb_throw_error(E_GRN_WRKF_CUSTOMIZATION_IS_DEACTIVATED);
        }
        // Validation check
        require_once('SmartyValidate.class.php');
        \SmartyValidate::connect($this->smarty);
        \SmartyValidate::register_form($this->targetName);

        $reverse_br = cb_at($input, 'reverse_br', 0) == 1 ? 0 : 1;
        $item_code = cb_at($input, 'code');
        $item_id = cb_at($input, 'iid');

        // validate after a POST
        if (\SmartyValidate::is_valid($input, $this->targetName)) {
            //Add Blank
            require_once('workflow/item_logic.csp');
            $item_logic = \GRN_Workflow_Item_Logic::getInstance();
            if (self::ACTION_MODE_ADD === $this->actionMode) {
                $item_id = $item_logic->addBlankSpaceItem($this->formId,
                    $item_code, $reverse_br);
            } elseif (self::ACTION_MODE_MODIFY === $this->actionMode) {
                $item_id = $item_logic->modifyBlankSpaceItem($item_id,
                    $this->formId, $item_code, $reverse_br);
            }

            require_once('workflow/inspection.csp');
            $inspection = \GRN_Workflow_Form_Layout_Inspection::getInstance();
            if ($inspection->isEnabled()) {
                if (self::ACTION_MODE_ADD === $this->actionMode) {
                    $message_type = 'form_layout_js_customize_add';
                } elseif (self::ACTION_MODE_MODIFY === $this->actionMode) {
                    $message_type = 'form_layout_js_customize_modify';
                } else {
                    $message_type = 'form_layout_js_customize_delete';
                }

                $message_args['fid'] = $this->formId;
                $message_args['iid'] = $item_id;
                $message_args['code'] = $item_code;
                $message_args['foreign_key'] = 'grn.workflow.js_customize';

                $inspection_br = $inspection->setBr($reverse_br);
                $message_args['br'] = $inspection_br;

                $inspection->record($message_type, $message_args);
            }
            if (self::ACTION_MODE_MODIFY === $this->actionMode) {
                cb_redirect($redirect_detail_page,
                    [
                        'cid' => $this->categoryId,
                        'fid' => $this->formId,
                        'iid' => $item_id
                    ]);
            } else {
                cb_redirect($redirect_form_view_page,
                    ['cid' => $this->categoryId, 'fid' => $this->formId]);
            }
        } else {

            \SmartyValidate::unregister_form($this->targetName, true);

            return $this->fetch();

        }
    }

    /**
     * @return array
     */
    public function getSitePosition()
    {
        if ( ! cb_is_system_page()) {
            require_once('fw/session_manager.csp');
            $session_manager = \CB_SessionManager::getInstance();
            $session_form_list
                = $session_manager->getSession('workflow/operation/form_list');
            $folder_id = $session_form_list->get('folder_id');
            $site_position[] = [
                'page' => 'workflow/index',
                'name' => grn_get_page_display_name('workflow/index'),
                'fid'  => $folder_id,
                'sf'   => 1
            ];
        }

        $site_position[] = [
            'page' => "workflow/$this->screenType/form_list",
            'name' => grn_get_page_display_name("workflow/$this->screenType/form_list"),
            'cid'  => $this->categoryId,
            'sf'   => 1
        ];
        $site_position[] = [
            'page' => "workflow/$this->screenType/form_view",
            'name' => grn_get_page_display_name("workflow/$this->screenType/form_view"),
            'cid'  => $this->categoryId,
            'fid'  => $this->formId
        ];

        if (self::ACTION_MODE_DELETE === $this->actionMode
            || self::ACTION_MODE_MODIFY === $this->actionMode
        ) {
            $site_position[] = [
                'page' => "workflow/$this->screenType/formlayout_blank_space_detail",
                'name' => grn_get_page_display_name("workflow/$this->screenType/formlayout_blank_space_detail"),
                'cid'  => $this->categoryId,
                'fid'  => $this->formId,
                'iid'  => $this->itemId
            ];
        }
        $site_position[] = [
            'page' => '',
            'name' => grn_get_current_page_display_name()
        ];

        return $site_position;
    }

    public function deleteItem()
    {
        require_once('workflow/auto_schedule_setting_logic.csp');
        $register_setting
            = \GRN_Workflow_Auto_Schedule_Setting_Logic::getInstance();
        $register_setting->checkModifyItem($this->formId, [$this->itemId]);

        require_once('workflow/item_logic.csp');
        $item_logic = \GRN_Workflow_Item_Logic::getInstance();
        $item_logic->delete($this->itemId);
        require_once('workflow/inspection.csp');
        $inspection = \GRN_Workflow_Form_Layout_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            $message_type = 'form_layout_js_customize_delete';
            $message_args['iid'] = $this->itemId;

            //Record Inspection
            $inspection->record($message_type, $message_args);
        }
        $redirect_page = "workflow/$this->screenType/form_view";
        cb_redirect($redirect_page,
            ['cid' => $this->categoryId, 'fid' => $this->formId]);
    }

}
