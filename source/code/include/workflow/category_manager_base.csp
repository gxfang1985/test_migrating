<?php
/**
 * Workflow Application Category Manager Base Class
 *
 * @author  SHIMADA Kunihiko 2006/1
 * @version 1.0
 * @package grn.workflow
 */

/** Workflow Application **/
require_once('fw/i18n.csp');
require_once('workflow/WorkflowFacade.csp');
require_once('workflow/resources.csp');
require_once('grn/application.csp');

/**
 * Category Manager Base Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_Category_Manager_Base
{
    /** Table Name **/
    var $_table_name = null;

    /** Category List **/
    var $_list = [];

    /** Search Category List **/
    var $_search_list = [];

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
        $this->_table_name = 'tab_grn_workflow_category';
    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_Category_Manager_Base $instance                  //Instance of GRN_Workflow_Category_Manager_Base
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_Category_Manager_Base();
        }

        return $_instance;
    }

    /**
     * Get Database
     *
     * @return object $table                     //GRN_Workflow_Category Table Information
     */
    protected function _getDatabase()
    {
        static $database = null;
        if (is_null($database)) {
            $app_locator = GRN_ApplicationLocator::instance();
            $database = $app_locator->getConnection('workflow');
        }

        return $database;
    }

    /**
     * Get Column List
     *
     * @return array  $column_name_list          //Column Name List
     */
    protected function &_getColumnList($alias = "")
    {
        if (strlen($alias) > 0) {
            $alias .= ".";
        }

        $column_name_list = null;
        if (is_null($column_name_list)) {
            require_once('workflow/table.csp');
            $column_list = get_class_vars(GRN_WORKFLOW_TABLE_CATEGORY);
            foreach (array_keys($column_list) as $column_name) {
                if (strpos($column_name, 'col_') === 0) {
                    $column_name_list[] = $alias . $column_name;
                }
            }
            $column_name_list[] = $alias . '_id';
        }

        return $column_name_list;
    }

    /**
     * Get Category
     *
     * @param  int  $category_id        //Category ID
     * @param  int  $parent_category_id //Parent Category ID(null:All Category)
     * @param  bool $refresh            //Refresh Cache
     * @param  int  $lock_mode          //Lock Mode
     *
     * @return object $category                  //Category Information Array
     */
    function &get(
        $category_id,
        $parent_category_id = null,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Check Category ID
        cb_trim_check($category_id,
            E_GRN_WRKF_CATEGORY_INVALID_ID);      //Category ID

        //Check Parent Category ID
        $parent_category_id = is_null($parent_category_id) ? 0
            : $parent_category_id;

        //Get Category List
        $category_list =& $this->getList($parent_category_id, $refresh,
            $lock_mode);

        //Get Category
        if ( ! array_key_exists($category_id, $category_list)) {
            $ret = false;

            return $ret;
        }

        //Return Category
        return $category_list[$category_id];
    }

    /**
     * Get Category By Foreign Key
     *
     * @param  string $category_key //Category Foreign Key
     * @param  int    $lock_mode    //Lock Mode
     *
     * @return array  $category                  //Category Info Array
     */
    public function getByForeignKey(
        $category_key,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $i18n = CB_I18N::getInstance();

        $dao = new WorkflowFacade();
        $dataObj = [];
        $dataObj['lock'] = $lock_mode;
        $dataObj['language'] = $i18n->getCurrentLanguage();
        $dataObj['isThrowError'] = true;

        $categoryData = $dao->referWorkflowCategoryByForeignKey($dataObj,
            $category_key);

        return ($categoryData === false) ? false
            : $categoryData->convertArray();
    }

    /**
     * Get Category List
     *
     * @param  int  $parent_category_id //Parent Category ID(null:All Category)
     * @param  bool $refresh            //Refresh Cache
     * @param  int  $lock_mode          //Lock Mode
     * @param  int  $isUseLocal         //TRUE :local name   FALSE:default name
     *
     * @return object $category                  //Category Information Array
     */
    function &getList(
        $parent_category_id = null,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $isUseLocal = true
    ) {
        $category_list = [];

        //Check Arguments
        $parent_category_id = is_null($parent_category_id)
            ? GRN_WORKFLOW_CATEGORY_ROOT_ID : $parent_category_id;

        //Get Category List From Cache
        $cached = false;
        if ( ! $refresh) {
            if (array_key_exists($parent_category_id, $this->_list)) {
                if (is_array($this->_list[$parent_category_id])) {
                    $category_list =& $this->_list[$parent_category_id];
                    $cached = true;
                }
            }
        } else {
            $this->_list[$parent_category_id] = [];
        }

        //Get Category List From Database
        if ( ! $cached || $refresh) {
            $i18n = CB_I18N::getInstance();

            $dao = new WorkflowFacade();
            $dataObj = [];
            $dataObj['lock'] = $lock_mode;
            $dataObj['language'] = $i18n->getCurrentLanguage();
            $dataObj['parentId'] = ($parent_category_id == 0) ? null
                : $parent_category_id;
            $dataObj['offset'] = 0;
            $dataObj['limit'] = -1;

            $categoryList = ($isUseLocal)
                ? $dao->getWorkflowCategoryList($dataObj)
                : $dao->getWorkflowCategoryListWithNonLocal($dataObj);

            foreach ($categoryList as $category) {
                $categoryId = $category->getId();
                $row
                    = $category->convertArray();
                $this->_list[$parent_category_id][$categoryId] = $row;
            }

            if (count($categoryList) > 0) {
                $category_list =& $this->_list[$parent_category_id];
            }
        }

        //Return Category List
        return $category_list;
    }

    /**
     * Get Category ID List
     *
     * @param  array $category_id_list //Category ID List: array(id1, id2, id3, ...)
     * @param  bool  $refresh          //Refresh Cache
     * @param  int   $lock_mode        //Lock Mode
     *
     * @return object $category                  //Category Information Array
     */
    function getCategoryIDList(
        $category_id_list = null,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $category_list = [];

        //Get Category List From Cache
        $cached = false;
        $no_cached = false;
        $no_caached_id_list = [];
        foreach ($category_id_list as $id) {
            if ( ! $refresh) {
                if (array_key_exists($id, $this->_list)) {
                    if (is_array($this->_list[$id])) {
                        $category_list[] =& $this->_list[$id];
                        $cached = true;
                    } else {
                        $no_caached_id_list[] = $id;
                        $no_cached = true;
                    }
                } else {
                    $no_caached_id_list[] = $id;
                    $no_cached = true;
                }
            } else {
                $no_caached_id_list[] = $id;
                $no_cached = true;
            }
        }

        if ($no_cached) {
            $category_id_list = $no_caached_id_list;
            $cached = false;
        }

        //Get Category List From Database
        if ( ! $cached || $refresh) {
            $i18n = CB_I18N::getInstance();

            $dao = new WorkflowFacade();
            $dataObj = [];
            $dataObj['lock'] = $lock_mode;
            $dataObj['language'] = $i18n->getCurrentLanguage();
            $dataObj['offset'] = 0;
            $dataObj['limit'] = -1;

            $categoryList = $dao->getWorkflowCategoryListByIds($dataObj,
                $category_id_list);

            foreach ($categoryList as $category) {
                $categoryId = $category->getId();
                $row = $category->convertArray();
                $category_list[$categoryId] = $row;
            }
        }

        //Return Category List
        return $category_list;
    }

    /**
     * Get Parent Category
     *
     * @param  int $category_id //Category ID
     * @param  int $lock_mode   //Lock Mode
     *
     * @return object $parent_category           //Parent Category Object
     */
    function &getParent(
        $category_id,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $refresh = false
    ) {
        //Get Category
        $category =& $this->get($category_id, null, false, $lock_mode);
        if ( ! $category) {
            $ret = false;

            return $ret;
        }

        //Check Parent Category
        $parent_category_id = $category[GRN_WORKFLOW_COLUMN_PARENT];
        if ( ! $parent_category_id) {
            $ret = false;

            return $ret;
        }

        //Return Parent Category Object
        $ret =& $this->get($category[GRN_WORKFLOW_COLUMN_PARENT], null,
            $refresh, $lock_mode);

        return $ret;
    }

    /**
     * Get Child Category
     *
     * @param  int $category_id //Category ID
     * @param  int $lock_mode   //Lock Mode
     *
     * @return array  $child_category_list       //Child Category List
     */
    function getChildList($category_id, $lock_mode = CB_DATABASE_DEFAULT_LOCK)
    {
        //Get Child Category List
        $category_list = $this->getList($category_id, false, $lock_mode);
        foreach (array_keys($category_list) as $key) {
            $category =& $category_list[$key];
            $category['col_count'] = $this->getChildCount($key, $lock_mode);
        }

        return $category_list;
    }

    /**
     * Get Child Count
     *
     * @param  int $category_id //Category ID
     * @param  int $lock_mode   //Lock Mode
     *
     * @return int    $child_category_count      //Child Category Count
     */
    private function getChildCount(
        $category_id,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Category List
        $category_list = $this->getList($category_id, false, $lock_mode);

        //Return Child Category Count
        return count($category_list);
    }

    /**
     * Get Category Tree List
     *
     * @param  int  $last_category_id //Last Category ID
     * @param  bool $include_root     //Include Root Flag
     * @param  bool $include_last     //Include Last Category Flag
     * @param  int  $lock_mode        //Lock Mode
     *
     * @return array  $tree_category_list        //Tree Category List
     */
    function getTreeList(
        $last_category_id,
        $include_root = true,
        $include_last = true,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $refresh = false
    ) {
        $tree_list = [];

        //Check Include Root Flag
        if ($include_root
            && $last_category_id == GRN_WORKFLOW_CATEGORY_ROOT_ID
        ) {
            //Get First Category
            $category =& $this->get($last_category_id, null, $refresh,
                $lock_mode);
            if ( ! $category) {
                return false;
            }
            $tree_list[$last_category_id] =& $category;

            return $tree_list;
        }

        //Check Include Last Flag
        if ($include_last) {
            //Get First Category
            $category =& $this->get($last_category_id, null, $refresh,
                $lock_mode);
            if ( ! $category) {
                return false;
            }
            $tree_list[$last_category_id] =& $category;
        }

        //Get Tree List
        while (false != ($parent_category =& $this->getParent($last_category_id,
                $lock_mode, $refresh))) {
            $parent_category_id = $parent_category['_id'];
            if ($parent_category_id == GRN_WORKFLOW_CATEGORY_ROOT_ID
                && ! $include_root
            ) {
                break;
            }
            $tree_list[$parent_category_id] =& $parent_category;
            $last_category_id = $parent_category_id;
        }

        //Reverse Tree List
        $reverse_tree_list = array_reverse($tree_list, true);

        //Return Category Tree List
        return $reverse_tree_list;
    }

    /**
     * Search Category
     *
     * @param  array $condition_list //Search Condition List
     * @param  int   $offset         //Search Offset
     * @param  int   $limit          //Search Limit
     * @param  int   $lock_mode      //Lock Mode
     *
     * @return array  $hit_category_list        //Hit Category List
     */
    function search(
        $condition_list,
        $offset = 0,
        $limit = 5,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $i18n = CB_I18N::getInstance();

        $dao = new WorkflowFacade();
        $dataObj = [];
        $dataObj['lock'] = $lock_mode;
        $dataObj['language'] = $i18n->getCurrentLanguage();
        $dataObj['offset'] = $offset;
        $dataObj['limit'] = $limit;

        $categoryList = $dao->getWorkflowCategoryListByNames($dataObj,
            $condition_list);

        foreach ($categoryList as $category) {
            $categoryId = $category->getId();
            $row = $category->convertArray();
            $this->_search_list[$categoryId] = $row;
        }

        $hit_category_list = [];

        if (count($categoryList) > 0) {
            $hit_category_list =& $this->_search_list;
        }

        //return Hit Category List
        return $hit_category_list;
    }
}


