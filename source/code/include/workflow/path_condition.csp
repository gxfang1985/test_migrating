<?php

/**
 * 経路データ
 *
 * @author  Yuichi UEYAMA 2006/01
 * @version 1.0
 * @package grn.workflow
 */

require_once('workflow/model.csp');

/**
 * 経路分岐条件クラス
 */
class GRN_Workflow_PathConditions extends GRN_Workflow_Model
{
    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
        //Parent Class Constructor
        parent::__construct('tab_grn_workflow_pathcondition');

        //Initialize Columns Information
        $this->_columns_info = [
            'necessary' => [
                'col_name' => ''
            ],
            'default'   => [
                'col_number'    => null,
                'col_operator'  => null,
                'col_option'    => '',
                'col_path_skip' => '',
            ],
        ];

        //Initialize Table Aliases for Join
        $this->_aliases = [
            'tab_grn_workflow_pathcondition'     => 'a',
            'tab_grn_workflow_pathskip'          => 'b',
            'tab_grn_workflow_item'              => 'c',
            'tab_grn_workflow_pathconditionstep' => 'd'
        ];
    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_PathConditions $instance                  //Instance of GRN_Workflow_PathConditions
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_PathConditions();
        }

        return $_instance;
    }

    /**
     * Add Path Condition
     *
     * @param   array $properties //Path Condition Properties
     *
     * @return  string  $path_condition_id       //Path Condition ID
     */
    function &add($properties)
    {
        //Check Arguments
        if ( ! is_array($properties) || 0 == count($properties)) {
            //Empty Properties
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_EMPTY_PROPERTIES);
        }

        //Insert Path Condition
        $ret = $this->_insertRecords(array_keys($properties), [$properties]);

        return $ret;
    }

    /**
     * Add Path Condition List
     *
     * @param   array $columns //Columns
     * @param   array $records //Records
     *
     * @return  string  $last_insert_id         //Last Insert Path Condition Step ID
     */
    function addList($columns, $records)
    {
        //Check Arguments
        if ( ! is_array($columns) || 0 == count($columns)) {
            //Empty Columns
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_EMPTY_COLUMNS);
        }
        if ( ! is_array($records) || 0 == count($records)) {
            //Empty Records
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_EMPTY_RECORDS);
        }

        //Insert Path Condition Step List
        return $this->_insertRecords($columns, $records);
    }

    /**
     * Modify Path Condition
     *
     * @param   int   $path_condition_id //Path Condition
     * @param   array $properties        //Path Condition Properties
     */
    function modify($path_condition_id, $properties)
    {
        //Check Arguments
        require_once('workflow/error_code.csp');
        require_once('fw/string_util.csp');
        cb_trim_check($path_condition_id,
            E_GRN_WRKF_PATH_CONDITION_INVALID_ID);   //Path Condition ID
        if ( ! is_array($properties) || 0 == count($properties)) {
            //Empty Priperties
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_EMPTY_PROPERTIES);
        }

        $columns = [
            'tab_grn_workflow_pathcondition' => ['_id' => 'col_pathcondition_id'],
        ];
        //Check Path Condition Exists
        $path_condition = $this->get($path_condition_id, $columns);
        if ( ! is_array($path_condition) || 0 == count($path_condition)) {
            //Path Condition Not Found
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_PATH_CONDITION_NOT_FOUND);
        }

        //Create Condition
        $condition = cb_queryf($this->_dbconn, "_id='@S'", $path_condition_id);

        //Update Path Condition Data
        $this->_updateRecords($condition, $properties);
    }

    /**
     * Remove Path Condition
     *
     * @param   int $path_condition_id //Path Condition ID
     *
     * @return  none
     */
    function remove($path_condition_id)
    {
        //Check Arguments
        require_once('workflow/error_code.csp');
        require_once('fw/string_util.csp');
        cb_trim_check($path_condition_id,
            E_GRN_WRKF_PATH_CONDITION_INVALID_ID);  //Path Condition ID

        //Check Path Condition Exists
        $path_condition = $this->get($path_condition_id);
        if ( ! is_array($path_condition) || 0 == count($path_condition)) {
            //Path Condition Not Found
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_PATH_CONDITION_NOT_FOUND);
        }

        //Create Condition String
        $condition = cb_queryf($this->_dbconn, "_id='@S'", $path_condition_id);

        //Delete Path Condition
        $this->_deleteRecords($condition);
    }

    function removeByPathSkipId($path_skip_id)
    {
        $condition = cb_queryf($this->_dbconn, "col_path_skip='@S'",
            $path_skip_id);
        $this->_deleteRecords($condition);
    }

    /**
     * Remove Path Condition List
     *
     * @param   mixed $path_condition_id_list //Path Condition ID List
     *
     * @return  none
     */
    function removeList($path_condition_id_list = null)
    {
        //Create Condition String
        $condition = null;
        if (is_array($path_condition_id_list)
            && 0 < count($path_condition_id_list)
        ) {
            foreach ($path_condition_id_list as $key => $value) {
                $path_condition_id_list[$key] = cb_queryf($this->_dbconn,
                    "'@S'", $value);
            }
            $path_condition_id_list = implode(',', $path_condition_id_list);
//            $condition = cb_queryf($this->_dbconn, "_id IN (@S)", $path_condition_id_list);
            $condition = '_id IN(' . $path_condition_id_list . ')';
        }

        //Delete Path Condition List
        $this->_deleteRecords($condition);
    }

    /**
     * Remove Path Condition List By Group Id
     *
     * @param   int $org_id
     *
     * @return  void
     */
    public function removeListByGroupId($org_id)
    {
        $columns = [
            'tab_grn_workflow_item'          => [
                'col_settings'    => 'col_settings',
                'col_foreign_key' => 'col_foreign_key',
            ],
            'tab_grn_workflow_pathcondition' => ['_id' => '_id',],
        ];
        $condition_list = $this->getList(null, null, $columns,
            CB_DATABASE_NO_LOCK, $org_id);
        if (count($condition_list) == 0) {
            return;
        }

        $cids = [];
        require_once('workflow/resources.csp');
        foreach ($condition_list as $condition) {
            if ($condition['col_foreign_key'] == 'grn.workflow.menu_string'
                && $condition['col_settings']['menu_item_type']
                   == GRN_WORKFLOW_CONDITION_ITEM_MENU_STRING_TYPE_ORGANIZATION
            ) {
                $cids[] = $condition['_id'];
            }
        }

        if (is_array($cids) && count($cids) > 0) {
            $this->removeList($cids);
        }
    }

    /**
     * Get Path Condition
     *
     * @param   int   $path_condition_id //Path Condition ID
     * @param   array $columns           //Request Columns
     * @param   int   $lock              //Lock Mode
     *
     * @return  mixed   $path_condition          //Path Condition(or FALSE)
     */
    function &get(
        $path_condition_id,
        $columns = null,
        $lock = CB_DATABASE_NO_LOCK
    ) {
        //Check Arguments
        require_once('workflow/error_code.csp');
        require_once('fw/string_util.csp');
        cb_trim_check($path_condition_id,
            E_GRN_WRKF_PATH_CONDITION_INVALID_ID);  //Path Condition ID

        //Create Columns String
        $columns = $this->_formatColumns($columns, $this->_aliases);

        //Create From String
        $from
            = "tab_grn_workflow_pathcondition AS a 
                 INNER JOIN tab_grn_workflow_pathskip AS b ON a.col_path_skip = b._id 
                 INNER JOIN tab_grn_workflow_item AS c ON b.col_item = c._id";

        //Create Condition String
        $condition = cb_queryf($this->_dbconn, "a._id='@S'",
            $path_condition_id);

        //Create Order By String
        $order_by = 'a.col_list_index,a._id';

        //Create and Send Query
        $query
            = "SELECT {$columns} FROM {$from} WHERE ({$condition}) ORDER BY {$order_by}";
        $query = $this->_dbconn->select_format($query, 0, 1, $lock);
        $result = $this->_dbconn->query($query);
        if (false === $result) {
            //Querty Faild
            $this->_dbconn->throwError(['query' => "failed query on SELECT: {$query}"]);
        }

        //Get Path Condition
        $path_condition = $this->_dbconn->fetch_assoc($result);

        return $path_condition;
    }

    /**
     * Get List
     *
     * @param   array  $path_condition_id_list //Path Condition ID List
     * @param   int    $form_id                //Form_id
     * @param   array  $columns                //Columns
     * @param   int    $lock                   //Lock Mode
     * @param   string $org_id                 //Organization Id
     *
     * @return  array   $path_condition_list     //Path Condition List
     */
    function &getList(
        $path_condition_id_list = null,
        $form_id = null,
        $columns = null,
        $lock = CB_DATABASE_NO_LOCK,
        $org_id = null
    ) {
        //Check Arguments
        require_once('workflow/error_code.csp');
        require_once('fw/string_util.csp');
        if ( ! $org_id) {
            cb_trim_check($form_id, E_GRN_WRKF_FORM_INVALID_ID);    //Form ID
        } else {
            require_once('grn/error_code.csp');
            cb_trim_check($org_id, E_GRN_GROUP_NOT_FOUND);
        }
        //Create Condition String
        $condition = [];
        if (is_array($path_condition_id_list)
            && 0 < count($path_condition_id_list)
        ) {
            foreach ($path_condition_id_list as $key => $value) {
                $path_condition_id_list[$key] = cb_queryf($this->_dbconn,
                    "'@S'", $value);
            }
            $path_condition_id_list = implode(',', $path_condition_id_list);
//            $condition[] = cb_queryf($this->_dbconn, "a._id IN (@S)", $path_condition_id_list);
            $condition[] = 'a._id IN(' . $path_condition_id_list . ')';
        }
        if ( ! $org_id) {
            $condition[] = cb_queryf($this->_dbconn, "b.col_form = '@S'",
                $form_id);
        } else {
            $condition[] = cb_queryf($this->_dbconn, "a.col_option = '@S'",
                $org_id);
        }

        if (is_array($condition) && 0 < count($condition)) {
            $condition = implode(' AND ', $condition);
        }

        //Create Columns String
        $columns = $this->_formatColumns($columns, $this->_aliases);

        //Create From String
        $from
            = "tab_grn_workflow_pathcondition AS a 
                 INNER JOIN tab_grn_workflow_pathskip AS b ON a.col_path_skip = b._id 
                 INNER JOIN tab_grn_workflow_item AS c ON b.col_item = c._id 
                 LEFT JOIN tab_grn_workflow_pathconditionstep AS d ON a._id = d.col_path_condition";

        //Create Order By String
        $order_by = 'a.col_list_index,a._id,c.col_list_index,c._id';

        //Create and Send Query
        $query = "SELECT {$columns} FROM {$from}";
        if ($condition !== null) {
            $query .= " WHERE ({$condition})";
        }
        $query .= " ORDER BY {$order_by}";
        $query = $this->_dbconn->select_format($query, 0, -1, $lock);
        $result = $this->_dbconn->query($query);
        if (false === $result) {
            $this->_dbconn->throwError(['query' => "failed query on SELECT: {$query}"]);
        }

        //Create Path Condition List
        $path_condition_list = [];
        while ($row = $this->_dbconn->fetch_assoc($result)) {
            if (is_array($row) && array_key_exists('col_settings', $row)) {
                $row['col_settings'] = cb_unserialize($row['col_settings'],
                    ["allowed_classes" => false]);
            }
            $path_condition_list[$row['_id']] = $row;
        }

        //Return Path Condition List
        return $path_condition_list;
    }

    /**
     * Get List By Path Skip ID
     *
     * @param   array $path_step_id_list //Path Step ID List
     * @param   array $columns           //Columns
     * @param   int   $lock              //Lock Mode
     *
     * @return  array   $path_condition_list     //Path Condition List
     */
    function getListByPathSkipId(
        $path_step_id_list = null,
        $columns = null,
        $lock = CB_DATABASE_NO_LOCK
    ) {
        //Create Condition String
        $condition = null;
        if (is_array($path_step_id_list) && 0 < count($path_step_id_list)) {
            foreach ($path_step_id_list as $key => $value) {
                $path_step_id_list[$key] = cb_queryf($this->_dbconn, "'@S'",
                    $value);
            }
            $path_step_id_list = implode(',', $path_step_id_list);
//            $condition = cb_queryf($this->_dbconn, "col_path_skip IN (@S)", $path_step_id_list);
            $condition = 'col_path_skip IN(' . $path_step_id_list . ')';
        }

        //Create Column String
        $columns = $this->_formatColumns($columns, $this->_aliases);

        //Create Form String
        $from = "tab_grn_workflow_pathcondition AS a";

        //Create Order By String
        $order_by = 'a.col_list_index,a._id';

        //Create and Send Query
        $query = "SELECT {$columns} FROM {$from}";
        if ($condition !== null) {
            $query .= " WHERE ({$condition})";
        }
        $query .= " ORDER BY {$order_by}";
        $query = $this->_dbconn->select_format($query, 0, -1, $lock);
        $result = $this->_dbconn->query($query);
        if (false === $result) {
            //Query Faild
            $this->_dbconn->throwError(['query' => "failed query on SELECT: {$query}"]);
        }

        //Create Path Condition List
        $path_condition_list = [];
        while ($row = $this->_dbconn->fetch_assoc($result)) {
            $path_condition_list[$row['_id']] = $row;
        }

        //Return Path Condition List
        return $path_condition_list;
    }
}

/**
 * 経路分岐ステップクラス
 */
class GRN_Workflow_PathConditionSteps extends GRN_Workflow_Model
{
    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
        //Parent Class Constructor
        parent::__construct('tab_grn_workflow_pathconditionstep');

        //Initialize Columns Information
        $this->_columns_info = [
            'default' => [
                'col_path_condition' => null,
                'col_path_step'      => null,
            ],
        ];

        //Initialize Table Aliases for Join
        $this->_aliases = [
            'tab_grn_workflow_pathconditionstep' => 'a',
        ];
    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_PathConditionSteps $instance                  //Instance of GRN_Workflow_PathConditionSteps
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_PathConditionSteps();
        }

        return $_instance;
    }

    /**
     * Add Path Condition Step
     *
     * @param   array $properties //Path Condition Properties
     *
     * @return  string  $path_condition_step_id  //Path Condition Step ID
     */
    function &add($properties)
    {
        //Check Arguments
        if ( ! is_array($properties) || 0 == count($properties)) {
            //Empty Properties
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_EMPTY_PROPERTIES);
        }

        //Insert Path Condition Step
        $ret = $this->_insertRecords(array_keys($properties), [$properties]);

        return $ret;
    }

    /**
     * Add Path Condition Step List
     *
     * @param   array $columns //Columns
     * @param   array $records //Records
     *
     * @return  string  $last_insert_id         //Last Insert Path Condition Step ID
     */
    function addList($columns, $records)
    {
        //Check Arguments
        if ( ! is_array($columns) || 0 == count($columns)) {
            //Empty Columns
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_EMPTY_COLUMNS);
        }
        if ( ! is_array($records) || 0 == count($records)) {
            //Empty Records
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_EMPTY_RECORDS);
        }

        //Insert Path Condition Step List
        return $this->_insertRecords($columns, $records);
    }

    /**
     * Modify Path Condition Step
     *
     * @param   int   $path_condition_step_id //Path Condition
     * @param   array $properties             //Path Condition Properties
     */
    function modify($path_condition_step_id, $properties)
    {
        //Check Arguments
        require_once('workflow/error_code.csp');
        require_once('fw/string_util.csp');
        cb_trim_check($path_condition_step_id,
            E_GRN_WRKF_PATH_CONDITION_STEP_INVALID_ID);   //Path Condition Step ID
        if ( ! is_array($properties) || 0 == count($properties)) {
            //Empty Priperties
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_EMPTY_PROPERTIES);
        }

        //Check Path Condition Step Exists
        $path_condition_step = $this->get($path_condition_step_id);
        if ( ! is_array($path_condition_step)
             || 0 == count($path_condition_step)
        ) {
            //Path Condition Step Not Found
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_PATH_CONDITION_STEP_NOT_FOUND);
        }

        //Create Condition
        $condition = cb_queryf($this->_dbconn, "_id='@S'",
            $path_condition_step_id);

        //Update Path Condition Step
        $this->_updateRecords($condition, $properties);
    }

    /**
     * Remove Path Condition Step
     *
     * @param   int $path_condition_step_id //Path Condition Step ID
     *
     * @return  none
     */
    function remove($path_condition_step_id)
    {
        //Check Arguments
        require_once('workflow/error_code.csp');
        require_once('fw/string_util.csp');
        cb_trim_check($path_condition_step_id,
            E_GRN_WRKF_PATH_CONDITION_STEP_INVALID_ID);

        //Create Condition String
        $condition = cb_queryf($this->_dbconn, "_id='@S'",
            $path_condition_step_id);

        //Delete Path Condition Step
        $this->_deleteRecords($condition);
    }

    /**
     * Remove Path Condition Step List
     *
     * @param   array $path_condition_step_id_list
     *
     * @return  none
     */
    function removeList($path_condition_step_id_list = null)
    {
        //Create Condition String
        $condition = null;
        if (is_array($path_condition_step_id_list)
            && 0 < count($path_condition_step_id_list)
        ) {
            foreach ($path_condition_step_id_list as $key => $value) {
                $path_condition_step_id_list[$key] = cb_queryf($this->_dbconn,
                    "'@S'", $value);
            }
            $path_condition_step_id_list = implode(',',
                $path_condition_step_id_list);
//            $condition = cb_queryf($this->_dbconn, "_id IN (@S)", $path_condition_step_id_list);
            $condition = '_id IN(' . $path_condition_step_id_list . ')';
        }

        //Delete Path Condition Step List
        $this->_deleteRecords($condition);
    }

    /**
     * Remove Path Condition Step List By Path Condition ID
     *
     * @param   array $path_condition_id_list
     *
     * @return  none
     */
    function removeListByPathConditionId($path_condition_id_list = null)
    {
        //Create Condition String
        $condition = null;
        if (is_array($path_condition_id_list)
            && 0 < count($path_condition_id_list)
        ) {
            foreach ($path_condition_id_list as $key => $value) {
                $path_condition_id_list[$key] = cb_queryf($this->_dbconn,
                    "'@S'", $value);
            }
            $path_condition_id_list = implode(',', $path_condition_id_list);
//            $condition = cb_queryf($this->_dbconn, "col_path_condition IN (@S)", $path_condition_id_list);
            $condition = 'col_path_condition IN(' . $path_condition_id_list
                         . ')';
        }

        //Delete Path Condition Step List
        $this->_deleteRecords($condition);
    }

    /**
     * Get Path Condition Step
     *
     * @param   int   $path_condition_step_id //Path Condition Step ID
     * @param   array $columns                //Request Columns
     * @param   int   $lock                   //Lock Mode
     *
     * @return  array   $path_condition_step     //Path Condition Step
     */
    function &get(
        $path_condition_step_id,
        $columns = null,
        $lock = CB_DATABASE_NO_LOCK
    ) {
        //Check Arguments
        require_once('workflow/error_code.csp');
        require_once('fw/string_util.csp');
        cb_trim_check($path_condition_step_id,
            E_GRN_WRKF_PATH_CONDITION_STEP_INVALID_ID); //Path Condition Step ID

        //Create Condition String
        $condition = cb_queryf($this->_dbconn, "_id='@S'",
            $path_condition_step_id);

        //Get Path Condition Step List
        $path_condition_step_list = $this->_selectRecords($columns, '_id', 0, 1,
            null, $condition, $lock);

        //Return Path Condition Step
        return $path_condition_step_list[$path_condition_step_id];
    }

    /**
     * Get List
     *
     * @param   array $path_condition_step_id_list //Path Condition Step ID List
     * @param   array $columns                     //Request Columns
     * @param   int   $lock                        //Lock Mode
     *
     * @return  array   $path_condition_step_list     //Path Condition Step List
     */
    function &getList(
        $path_condition_step_id_list = null,
        $columns = null,
        $lock = CB_DATABASE_NO_LOCK
    ) {
        //Create Condition String
        $condition = null;
        if (is_array($path_condition_step_id_list)
            && 0 < count($path_condition_step_id_list)
        ) {
            foreach ($path_condition_step_id_list as $key => $value) {
                $path_condition_step_id_list[$key] = cb_queryf($this->_dbconn,
                    "'@S'", $value);
            }
            $path_condition_step_id_list = implode(',',
                $path_condition_step_id_list);
//            $condition = cb_queryf($this->_dbconn, "_id IN (@S)", $path_condition_step_id_list);
            $condition = '_id IN(' . $path_condition_step_id_list . ')';
        }

        //Get Path Condition Step List
        $path_condition_step_list = $this->_selectRecords($columns, '_id', 0,
            -1, '_id', $condition, $lock);

        //Return Path Condition Step List
        return $path_condition_step_list;
    }

    /**
     * Get Path Condition Step List By Pathj Condition ID
     *
     * @param   mixed  $path_condition_id_list //Path Condition ID List
     * @param   array  $columns                //Request Columns
     * @param   string $key                    //Key Column
     * @param   int    $lock                   //Lock Modd
     *
     * @return  array   $path_condition_step_list   //Path Condition Step List
     */
    function getListByPathConditionId(
        $path_condition_id_list = null,
        $columns = null,
        $key = '_id',
        $lock = CB_DATABASE_NO_LOCK
    ) {
        //Create Condition String
        $condition = null;
        if (is_array($path_condition_id_list)
            && 0 < count($path_condition_id_list)
        ) {
            foreach ($path_condition_id_list as $index => $value) {
                $path_condition_id_list[$index] = cb_queryf($this->_dbconn,
                    "'@S'", $value);
            }
            $path_condition_id_list = implode(',', $path_condition_id_list);
//            $condition = cb_queryf($this->_dbconn, "col_path_condition IN (@S)", $path_condition_id_list);
            $condition = 'col_path_condition IN(' . $path_condition_id_list
                         . ')';
        }

        //Get Path Condition Step List
        $path_condition_step_list = $this->_selectRecords($columns, $key, 0, -1,
            '_id', $condition, $lock);

        //Return Path Condition Step List
        return $path_condition_step_list;
    }
}

