<?php
/**
 * Workflow Application Form Class
 *
 * @author  Yuichi, Nakamura 2005/12
 * @version 1.0
 * @package grn.workflow
 */

/** Workflow Application **/
require_once('workflow/resources.csp');
require_once('workflow/form_manager_base.csp');

/**
 * Form Manager Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_Form_Manager extends GRN_Workflow_Form_Manager_Base
{
    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
        //Get Parent Instance
        $parent = parent::getInstance();

        //Sync Parent Table and Form List Cache
        $this->_table_name =& $parent->_table_name;
        $this->_list =& $parent->_list;
    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_Form_Manager $instance                  //Instance of GRN_Workflow_Form_Manager
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_Form_Manager();
        }

        return $_instance;
    }

    /**
     * Create Form
     *
     * @param  array $property_list //Property List(Name=>Value)
     *
     * @return int   $form_id                    //Form ID
     */
    function create($property_list)
    {
        //Get Database
        $database = $this->_getDatabase();

        //Create Column List
        $column_list = $this->_getColumnList();

        //Create Query
        $insert_list = [];
        foreach ($column_list as $column) {
            if ($column == '_id') {
                continue;
            }

            if (array_key_exists($column, $property_list)) {
                if ($column == GRN_WORKFLOW_COLUMN_CATEGORY
                    && $property_list[GRN_WORKFLOW_COLUMN_CATEGORY] == -1
                ) {
                    $insert_list[$column] = 'null';
                } elseif ($column == GRN_WORKFLOW_COLUMN_PATH
                          && is_null($property_list[GRN_WORKFLOW_COLUMN_PATH])
                ) {
                    $insert_list[$column] = 'null';
                } else {
                    $insert_list[$column] = cb_queryf($database, '"@S"',
                        $property_list[$column]);
                }
            }
        }
        $column_string = implode(', ', array_keys($insert_list));
        $value_string = implode(', ', $insert_list);
        $query = sprintf('INSERT %s(%s) VALUES (%s)',
            $this->_table_name, $column_string, $value_string);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Return Form ID
        $form_id = $database->get_insert_id();

        return $form_id;
    }

    /**
     * Update Form
     *
     * @param  array $form_id       //Form ID
     * @param  array $property_list //Property List(Name=>Value)
     *
     * @return array $form_id                    //Form ID
     */
    function update($form_id, $property_list)
    {
        //Get Database
        $database = $this->_getDatabase();

        //Create Column List
        $column_list = $this->_getColumnList();

        //Create Query
        $update_list = [];
        foreach ($column_list as $column) {
            if ($column == '_id') {
                continue;
            }

            if (array_key_exists($column, $property_list)) {
                if ($column == GRN_WORKFLOW_COLUMN_CATEGORY
                    && $property_list[GRN_WORKFLOW_COLUMN_CATEGORY] == -1
                ) {
                    $update_list[$column] = cb_queryf($database, '@S = null',
                        $column);
                } elseif ($column == GRN_WORKFLOW_COLUMN_PATH
                          && is_null($property_list[GRN_WORKFLOW_COLUMN_PATH])
                ) {
                    $update_list[$column] = cb_queryf($database, '@S = null',
                        $column);
                } elseif ($column == GRN_WORKFLOW_COLUMN_IS_CUSTOMIZATION_ACTIVE
                          && is_null($property_list[GRN_WORKFLOW_COLUMN_IS_CUSTOMIZATION_ACTIVE])
                ) {
                    $update_list[$column] = cb_queryf($database, '@S = null',
                        $column);
                } else {
                    $update_list[$column] = cb_queryf($database, '@S = "@S"',
                        $column, $property_list[$column]);
                }
            }
        }
        $update_string = implode(', ', $update_list);
        $where_string = cb_queryf($database, "_id = '@S'", $form_id);
        $query = sprintf('UPDATE %s SET %s WHERE %s',
            $this->_table_name, $update_string, $where_string);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Return Form ID
        return $form_id;
    }

    /**
     * Update Form Multiple
     *
     * @param  array $form_id_list  //Form ID List
     * @param  array $property_list //Property List(Name=>Value)
     *
     * @return array $form_id                    //Form ID
     */
    function updateMulti($form_id_list, $property_list)
    {
        //Get Database
        $database =& $this->_getDatabase();

        //Create Column List
        $column_list = $this->_getColumnList();

        //Create Query
        $update_list = [];
        foreach ($column_list as $column) {
            if ($column == '_id') {
                continue;
            }

            if (array_key_exists($column, $property_list)) {
                if ($column == GRN_WORKFLOW_COLUMN_CATEGORY
                    && $property_list[GRN_WORKFLOW_COLUMN_CATEGORY] == -1
                ) {
                    $update_list[$column] = cb_queryf($database, '@S = null',
                        $column);
                } else {
                    $update_list[$column] = cb_queryf($database, '@S = "@S"',
                        $column, $property_list[$column]);
                }
            }
        }
        $update_string = implode(', ', $update_list);
        $escape_fids = [];
        foreach ($form_id_list as $fid) {
            $fid = cb_queryf($database, "'@S'", $fid);
            $escape_fids[$fid] = $fid;
        }
        $form_id_string = implode(',', $escape_fids);
        $where_string = sprintf('_id IN(%s)', $form_id_string);
        $query = sprintf('UPDATE %s SET %s WHERE %s',
            $this->_table_name, $update_string, $where_string);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Return Form ID
        return $form_id_list;
    }

    /**
     * Remove Form
     *
     * @param int  $form_id //Form ID
     * @param BOOL $result  //Result
     */
    function remove($form_id)
    {
        //Get Database
        $database =& $this->_getDatabase();

        //Create Column List
        $column_list = implode(',', $this->_getColumnList());

        //Create Query
        $where_string = cb_queryf($database, "_id = '@S'", $form_id);
        $query = sprintf('DELETE FROM %s WHERE %s', $this->_table_name,
            $where_string);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Delete From Form List
        foreach (array_keys($this->_list) as $key) {
            if (in_array($form_id, $this->_list[$key])) {
                unset($this->_list[$key][$form_id]);
            }
        }

        return true;
    }

    /**
     * Remove Multiple Form
     *
     * @param array $form_id_list //Form ID List
     * @param BOOL  $result       //Result
     */
    function removeMulti($form_id_list)
    {
        //Get Database
        $database =& $this->_getDatabase();

        //Create Column List
        $column_list = implode(',', $this->_getColumnList());

        //Create Query
        foreach ($form_id_list as $key => $value) {
            $form_id_list[$key] = cb_queryf($database, "'@S'", $value);
        }
        $form_id_string = implode(',', $form_id_list);
//        $where_string = cb_queryf($database, '_id IN(@S)', $form_id_string);
        $where_string = '_id IN(' . $form_id_string . ')';
        $query = sprintf('DELETE FROM %s WHERE %s', $this->_table_name,
            $where_string);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Delete From Form List
        $form_id = current($form_id_list);
        foreach (array_keys($this->_list) as $key) {
            if (in_array($form_id, $this->_list[$key])) {
                foreach ($form_id_list as $form_id) {
                    unset($this->_list[$key][$form_id]);
                }
            }
        }

        return true;
    }

    /**
     * Remove All Form
     *
     * @param int  $category_id //Category ID
     * @param BOOL $result      //Result
     */
    function removeAll($category_id = null)
    {
        //Get Database
        $database =& $this->_getDatabase();

        //Create Column List
        $column_list = implode(',', $this->_getColumnList());

        //Create Query
        $where_string = "";
        if ($category_id == -1) {
            $where_string = 'WHERE col_category IS NULL';
        } elseif ( ! is_null($category_id)) {
            $where_string = cb_queryf($database, "WHERE col_category = '@S'",
                $category_id);
        }
        $query = sprintf('DELETE FROM %s %s', $this->_table_name,
            $where_string);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Delete From Form List
        unset($this->_list[$category_id]);

        return true;
    }

    /**
     * Change Form Order
     *
     * @param  int $form_id_list //Form ID List
     *
     * @return BOOL   $result                    //Result
     */
    function changeOrder($form_id_list)
    {
        //Set New List Index
        $list_index = 0;
        $property_list = [];
        foreach ($form_id_list as $form_id) {
            $property_list[GRN_WORKFLOW_COLUMN_LIST_INDEX] = $list_index;
            $this->update($form_id, $property_list);
            $list_index++;
        }

        return true;
    }

    /**
     * Get Serial
     *
     * @param  int $form_id //Form ID
     *
     * @return string $serial_number             //Serial Number
     */
    function getSerial($form_id)
    {
        //Get Database
        $database =& $this->_getDatabase();

        //Create Column List
        $column_list = GRN_WORKFLOW_COLUMN_SERIAL_NUMBER;

        //Create Condition
        $condition_list = [];
        $condition_list[] = cb_queryf($database, '_id = "@S"', $form_id);
        $condition = implode(' AND ', $condition_list);
        if ($condition) {
            $condition = 'WHERE ' . $condition;
        }

        //Create Query
        $query = sprintf('SELECT %s FROM %s %s', $column_list,
            $this->_table_name, $condition);
        $query = $database->select_format($query, 0, -1,
            CB_DATABASE_EXCLUSIVE_LOCK);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Update Form List
        $count = $database->num_rows($result);
        $form = $database->fetch_assoc($result);
        $database->free_result($result);

        //Incriment Serial Number
        $serial_number = $form[GRN_WORKFLOW_COLUMN_SERIAL_NUMBER] + 1;
        if ($serial_number > GRN_WORKFLOW_INT_MAX) {
            $serial_number = 1;
        }
        $this->update($form_id,
            [GRN_WORKFLOW_COLUMN_SERIAL_NUMBER => $serial_number]);

        return $serial_number;
    }

    /**
     * Get Serial
     *
     * @param  int $form_id //Form ID
     *
     * @return string $serial_number             //Serial Number
     */
    function getApprovedSerial($form_id)
    {
        //Get Database
        $database =& $this->_getDatabase();

        //Create Column List
        $column_list = GRN_WORKFLOW_COLUMN_APPROVED_SERIAL_NUMBER;

        //Create Condition
        $condition_list = [];
        $condition_list[] = cb_queryf($database, '_id = "@S"', $form_id);
        $condition = implode(' AND ', $condition_list);
        if ($condition) {
            $condition = 'WHERE ' . $condition;
        }

        //Create Query
        $query = sprintf('SELECT %s FROM %s %s', $column_list,
            $this->_table_name, $condition);
        $query = $database->select_format($query, 0, -1,
            CB_DATABASE_EXCLUSIVE_LOCK);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Update Form List
        $count = $database->num_rows($result);
        $form = $database->fetch_assoc($result);
        $database->free_result($result);

        //Incriment Serial Number
        $serial_number = $form[GRN_WORKFLOW_COLUMN_APPROVED_SERIAL_NUMBER] + 1;
        if ($serial_number > GRN_WORKFLOW_INT_MAX) {
            $serial_number = 1;
        }
        $this->update($form_id,
            [GRN_WORKFLOW_COLUMN_APPROVED_SERIAL_NUMBER => $serial_number]);

        return $serial_number;
    }

}


