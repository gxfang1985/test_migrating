<?php
/**
 * Workflow Application Category Manager Base Class
 *
 * @author  SHIMADA Kunihiko 2006/1
 * @version 1.0
 * @package grn.workflow
 */

/** Workflow Application **/
require_once('workflow/resources.csp');
require_once('workflow/category_manager_base.csp');

/**
 * Category Manager Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_Category_Manager extends GRN_Workflow_Category_Manager_Base
{
    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
        //Get Parent Instance
        $parent = parent::getInstance();

        //Sync Parent Table and Category List Cache
        $this->_table_name =& $parent->_table_name;
        $this->_list =& $parent->_list;
        $this->_search_list =& $parent->_search_list;
    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_Category_Manager $instance                  //Instance of GRN_Workflow_Category_Manager
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_Category_Manager();
        }

        return $_instance;
    }

    /**
     * Create Category
     *
     * @param  array $property_list //Property List(Name=>Value)
     *
     * @return int   $category_id               //Category ID
     */
    function create($property_list)
    {
        //Get Database
        $database = $this->_getDatabase();

        //Create Column List
        $column_list = $this->_getColumnList();

        //Create Query
        $insert_list = [];
        foreach ($column_list as $column) {
            if ($column === '_id') {
                continue;
            }

            if (array_key_exists($column, $property_list)) {
                $insert_list[$column] = cb_queryf($database, '"@S"',
                    $property_list[$column]);
            }
        }
        $column_string = implode(', ', array_keys($insert_list));
        $value_string = implode(', ', $insert_list);
        $query = sprintf('INSERT %s(%s) VALUES (%s)',
            $this->_table_name, $column_string, $value_string);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Return Category ID
        $category_id = $database->get_insert_id();

        return $category_id;
    }

    /**
     * Update Category
     *
     * @param  array $category_id   //Category ID
     * @param  array $property_list //Property List(Name=>Value)
     *
     * @return array $category_id               //Category ID
     */
    function update($category_id, $property_list)
    {
        //Get Database
        $database = $this->_getDatabase();

        //Create Column List
        $column_list = $this->_getColumnList();

        //Create Query
        $update_list = [];
        foreach ($column_list as $column) {
            if ($column === '_id') {
                continue;
            }

            if (array_key_exists($column, $property_list)) {
                $update_list[$column] = cb_queryf($database, '@S = "@S"',
                    $column, $property_list[$column]);
            }
        }
        $update_string = implode(', ', $update_list);
        $where_string = cb_queryf($database, '_id = "@S"', $category_id);
        $query = sprintf('UPDATE %s SET %s WHERE %s',
            $this->_table_name, $update_string, $where_string);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Return Category ID
        return $category_id;
    }

    /**
     * Remove Category
     *
     * @param int  $category_id //Category ID
     * @param bool $result      //Result
     */
    function remove($category_id)
    {
        //Get Database
        $database = $this->_getDatabase();

        //Create Column List
        $column_list = implode(',', $this->_getColumnList());

        //Create Query
        $where_string = cb_queryf($database, '_id = "@S"', $category_id);
        $query = sprintf('DELETE FROM %s WHERE %s', $this->_table_name,
            $where_string);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Delete From Category List
        foreach (array_keys($this->_list) as $key) {
            if (in_array($category_id, $this->_list[$key])) {
                unset($this->_list[$key][$category_id]);
            }
        }

        return true;
    }
}

