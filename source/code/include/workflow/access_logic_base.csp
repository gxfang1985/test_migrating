<?php
/**
 * Workflow Application Access Logic Base Class
 *
 * @author  SHIMADA Kunihiko 2005/12
 * @version 1.0
 * @package grn.workflow
 */

/** Workflow Application **/
require_once('workflow/table.csp');
require_once('workflow/resources.csp');

/**
 * Workflow Category Access Logic Base Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_Category_Access_Logic_Base
{
    //Category Logic Base Instance
    var $_category_logic_base = null;

    //Category Access Manager Instance
    var $_category_access_manager_base = null;

    //Target Type List
    var $_target_type_list
        = [
            GRN_WORKFLOW_ACCESS_TARGET_TYPE_USER,
            GRN_WORKFLOW_ACCESS_TARGET_TYPE_GROUP,
            GRN_WORKFLOW_ACCESS_TARGET_TYPE_STATIC_ROLE,
            GRN_WORKFLOW_ACCESS_TARGET_TYPE_DYNAMIC_ROLE,
        ];

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {

    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_Category_Access_Logic_Base $instance                  //Instance of GRN_Workflow_Catogory_Access_Logic_Base
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_Category_Access_Logic_Base();
        }

        return $_instance;
    }

    /**
     * Get Category Access Manager Base
     *
     * @return GRN_Workflow_Category_Access_Manager_Base $category_access_manager_base   //Category Access Manager Base
     */
    function _getCategoryAccessManagerBase()
    {
        if (is_null($this->_category_access_manager_base)) {
            require_once('workflow/access_manager_base.csp');
            $this->_category_access_manager_base
                = GRN_Workflow_Category_Access_Manager_Base::getInstance();
        }

        return $this->_category_access_manager_base;
    }

    /**
     * Get Category Access Logic Base
     *
     * @return object $category_logic_base   //Category Logic Base
     */
    function _getCategoryLogicBase()
    {
        if (is_null($this->_category_logic_base)) {
            require_once('workflow/category_logic_base.csp');
            $this->_category_logic_base
                = GRN_Workflow_Category_Logic_Base::getInstance();
        }

        return $this->_category_logic_base;
    }

    /**
     * Get Access
     *
     * @param  int    $access_id   //Access ID
     * @param  string $target_type //Table Type(user/group/static_role)
     * @param  int    $lock_mode   //Lock Mode
     *
     * @return object $access                    //Access Object
     */
    function &getAccess(
        $access_id,
        $target_type,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Check Argument
        require_once('workflow/error_code.csp');
        require_once('fw/string_util.csp');
        cb_trim_check($access_id,
            E_GRN_WRKF_ACCESS_INVALID_ID);      //Access ID
        cb_trim_check($target_type,
            E_GRN_WRKF_ACCESS_INVALID_TARGET);  //Access Target

        //Check Target Type
        if ( ! in_array($target_type, $this->_target_type_list)) {
            //Invalid Target Type
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_ACCESS_INVALID_TARGET);
        }

        //Get Access Object
        $manager = $this->_getCategoryAccessManagerBase();
        $access = $manager->getAccess($access_id, $target_type, $lock_mode);
        if ( ! $access) {
            $ret = false;

            return $ret;
        }

        //Return Access Object
        return $access;
    }

    /**
     * Get Access Object
     *
     * @param  int    $category_id //Category Object ID
     * @param  int    $target_id   //Target Object ID
     * @param  string $target_type //Table Type(user/group/static_role)
     * @param  int    $lock_mode   //Lock Mode
     *
     * @return object $access                    //Access Object
     */
    function &getAccessByCategoryID(
        $category_id,
        $target_id,
        $target_type,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Check Argument
        require_once('workflow/error_code.csp');
        require_once('fw/string_util.csp');
        cb_trim_check($category_id,
            E_GRN_WRKF_CATEGORY_INVALID_ID);    //Category ID
        cb_trim_check($target_id,
            E_GRN_WRKF_ACCESS_INVALID_TARGET);  //Access Target ID
        cb_trim_check($target_type,
            E_GRN_WRKF_ACCESS_INVALID_TARGET);  //Access Target

        //Check Target Type
        if ( ! in_array($target_type, $this->_target_type_list)) {
            //Invalid Target Type
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_ACCESS_INVALID_TARGET);
        }

        //Get Access Object
        $manager = $this->_getCategoryAccessManagerBase();
        $access = $manager->getAccessByCategoryID($category_id, $target_id,
            $target_type, $lock_mode);
        if ( ! $access) {
            $ret = false;

            return $ret;
        }

        //Return Access Object
        return $access;
    }

    /**
     * Get Access List
     *
     * @param  int    $category_id //Category ID
     * @param  string $target_type //Table Type(user/group/static_role/dynamic_role)
     * @param  bool   $refresh     //Refresh Flag
     * @param  int    $lock_mode   //Lock Mode
     *
     * @return array  $category_list             //Category Information List
     */
    function &getList(
        $category_id,
        $target_type,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Access List
        $manager = $this->_getCategoryAccessManagerBase();
        $access_list = $manager->getList($category_id, $target_type, $refresh,
            $lock_mode);

        //Return Access Information List
        return $access_list;
    }

    /**
     * Get Access Object List By Category ID
     *
     * @param  int    $category_id //Category Object ID
     * @param  string $target_type //Table Type(user/group/static_role/dynamic_role)
     * @param  int    $lock_mode   //Lock Mode
     *
     * @return object $access                    //Access Object
     */
    function getAccessListByCategoryID(
        $category_id,
        $target_type,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Check Argument
        require_once('workflow/error_code.csp');
        require_once('fw/string_util.csp');
        cb_trim_check($category_id,
            E_GRN_WRKF_CATEGORY_INVALID_ID);    //Category ID
        cb_trim_check($target_type,
            E_GRN_WRKF_ACCESS_INVALID_TARGET);  //Access Target

        $access_list = [];

        //Get Access Object
        $manager = $this->_getCategoryAccessManagerBase();
        $access_list = $manager->getAccessListByCategoryID($category_id,
            $target_type, $lock_mode);
        if ( ! $access_list) {
            $access_list = [];

            return $access_list;
        }

        //Return Access List
        return $access_list;
    }

    /**
     * Get Default Security Model
     *
     * @param  none
     *
     * @return string $security_model            //Security Model
     */
    function getDefaultSecurityModel()
    {
        //Get Default Security Model
        $manager = $this->_getCategoryAccessManagerBase();

        return $manager->getDefaultSecurityModel();
    }

    /**
     * Get Security Model
     *
     * @param  int $category_id //Category ID
     * @param  int $lock_mode   //Lock Mode
     *
     * @return string $security_model            //Security Model
     */
    function getSecurityModel(
        $category_id,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Check Argument
        require_once('workflow/error_code.csp');
        require_once('fw/string_util.csp');
        cb_trim_check($category_id,
            E_GRN_WRKF_CATEGORY_INVALID_ID);      //Category ID

        //Get Category Object
        $category_logic_base = $this->_getCategoryLogicBase();
        $category =& $category_logic_base->get($category_id, null,
            $lock_mode);

        //Get Security Model
        $manager = $this->_getCategoryAccessManagerBase();

        return $manager->getSecurityModel($category);
    }

    /**
     * Evaluate Parent Category List
     * アクセス権のあるカテゴリに対して親カテゴリのアクセス権すべて評価する
     *
     * @param  array $category_list //Category List
     * @param  id    $user_id       //User ID (null=login user)
     * @param  int   $lock_mode     //Lock Mode
     *
     * @return array  $evaluate_category_id_list //Evaluate Category List : array(id1=>TRUE, id2=>FALSE, id3=>FALSE, ･･･ )
     */
    function evaluateParentCategoryList(
        & $category_list,
        $user = null,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get UUM Instance
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');

        if (is_null($user)) {
            //Get Login User
            $user = $uum->getLoginUser();
        }

        //Get Dynamic Role
        $dynamic_role_list = $uum->listGrantedRoles();

        // Get Category Logic
        $category_logic = $this->_getCategoryLogicBase();
        // Get Access Manager
        $manager = $this->_getCategoryAccessManagerBase();

        // Deny Access ID Cache
        $deny_access_id_list = [];
        // Evalute Category ID 
        $evaluate_category_id_list = [];
        foreach ($category_list as $id => $authority) {
            // 処理中断フラグ
            $stop_flag = false;

            $browse = @ $authority["browse"];
            if (is_null($browse) || strlen($browse) <= 0) {
                $browse = @ $authority["col_authority_browse"];
            }

            // アクセス権がある場合、親カテゴリ（全階層）にもアクセス権が設定されていないかチェックする
            if (intval($browse) == 1) {
                $parent_category_id_list = $category_logic->getTreeList($id,
                    true, false, $lock_mode);
                if ( ! $parent_category_id_list) {
                    // 親カテゴリなし、次のIDへ
                    continue;
                }

                foreach ($deny_access_id_list as $deny_id) {
                    if (array_key_exists($deny_id,
                        array_keys($parent_category_id_list))
                    ) {
                        // 結果リストに追加
                        $evaluate_category_id_list[$id] = false;
                        $stop_flag = true;
                        break;
                    }
                }
                if ($stop_flag) {
                    // 親カテゴリがアクセス権なしIDリスト(メソッド内キャッシュ)内のIDにヒット、次のIDへ
                    continue;
                }

                // 親カテゴリのアクセス権を評価
                $evaluate_parent_category_list
                    = $manager->evaluateCategoryList($parent_category_id_list,
                    $user, $dynamic_role_list, $lock_mode);
                foreach (
                    $evaluate_parent_category_list[$user->getOID()] as
                    $authority
                ) {
                    if (intval($authority["browse"]) == 0) {
                        // 親カテゴリにアクセス権なしのカテゴリ発見
                        $evaluate_category_id_list[$id] = false;
                        $deny_access_id_list[] = $id;
                        $stop_flag = true;
                        break;
                    }
                }
                if ( ! $stop_flag) {
                    // 親カテゴリ全てにアクセス権あり
                    $evaluate_category_id_list[$id] = true;
                }
            } else {
                // もともとアクセス権なし
                $evaluate_category_id_list[$id] = false;
            }
        }

        return $evaluate_category_id_list;
    }

    /**
     * Evaluate Category List
     *
     * @param  array $category_id_list //Category ID List : array(id1, id2, id3, ･･･)
     * @param  id    $user_id          //User ID
     * @param  int   $lock_mode        //Lock Mode
     *
     * @return array  $evaluate_category_id_list //Evaluate Category List : array(id1=>TRUE, id2=>FALSE, id3=>FALSE, ･･･ )
     */
    function evaluateCategoryList(
        $category_id_list,
        $user_id,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get UUM Instance
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');

        //Get User
        $user = $uum->getUser($user_id);

        //Get Dynamic Role
        $dynamic_role_list = $uum->listGrantedRoles();

        // Get Category Logic
        $category_logic = $this->_getCategoryLogicBase();
        $category_list = $category_logic->getCategoryIDList($category_id_list);

        //Get Access Manager
        $manager = $this->_getCategoryAccessManagerBase();

        $evaluate_category_list = $manager->evaluateCategoryList($category_list,
            $user, $dynamic_role_list, $lock_mode);
        $evaluate_category_id_list
            = $this->evaluateParentCategoryList($evaluate_category_list[$user_id],
            $user, $dynamic_role_list, $lock_mode);

        return $evaluate_category_id_list;
    }

    /**
     * Evaluate Category List
     *
     * @param  int $category_id //Category ID
     * @param  int $lock_mode   //Lock Mode
     *
     * @return bool $access                     //Evaluate Result Access
     */
    function evaluateCategory(
        $category_id,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $refresh = false,
        $user_id = false
    ) {
        //Get UUM Instance
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');

        //Get Login User
        if ($user_id === false) {
            $login_user = $uum->getLoginUser();
            $login_user_id = $login_user->getOID();
        } else {
            //Get User
            $login_user = $uum->getUser($user_id);
            $login_user_id = $user_id;
        }

        //Get Dynamic Role
        $dynamic_role_list = $uum->listGrantedRoles();

        //Get Category Tree
        $category_logic_base = $this->_getCategoryLogicBase();
        $category_tree_list = $category_logic_base->getTreeList($category_id,
            true, true, $lock_mode, $refresh);
        if ( ! is_array($category_tree_list)) {
            return false;
        }

        //Get Access Manager
        $manager = $this->_getCategoryAccessManagerBase();

        //Check Access Cache
        $user_access_list = [];
        $evaluate_category_list = [];
        foreach (array_keys($category_tree_list) as $category_tree_id) {
            $access = [];
            if ( ! $refresh) {
                $access = $manager->getAccessCache($login_user_id,
                    $category_tree_id);
            }

            if ( ! $access) {
                $evaluate_category_list[$category_tree_id]
                    =& $category_tree_list[$category_tree_id];
            } else {
                $user_access_list[$category_tree_id] = $access;
            }
        }

        //Evaluate No Cached Category List
        if (count($evaluate_category_list) !== 0) {
            $evaluate_access_list
                = $manager->evaluateCategoryList($evaluate_category_list,
                $login_user, $dynamic_role_list, $lock_mode);
            $user_access_list = $user_access_list
                                + $evaluate_access_list[$login_user_id];
        }
        //Check Access Right
        foreach (array_keys($category_tree_list) as $category_tree_id) {
            foreach ($user_access_list[$category_tree_id] as $authority) {
                if ($authority != 1) {
                    return false;
                }
            }
        }

        return true;
    }

    /**
     * Evaluate Form
     *
     * @param  int $form_id   //Form ID
     * @param  int $lock_mode //Lock Mode
     *
     * @return array  $access_list               //Evaluate Result Access List
     */
    function evaluateForm(
        $form_id,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $user_id = false
    ) {
        //Get Form
        require_once('workflow/form_logic_base.csp');
        $form_logic_base = GRN_Workflow_Form_Logic_Base::getInstance();
        $form =& $form_logic_base->get($form_id);

        return $this->evaluateCategory($form[GRN_WORKFLOW_COLUMN_CATEGORY],
            $lock_mode, $user_id);
    }
}


