<?php
/**
 * Workflow Application Form Class
 *
 * @author  Yuichi, Nakamura 2005/12
 * @version 1.0
 * @package grn.workflow
 */

/** Workflow Application **/
require_once('workflow/resources.csp');
require_once('workflow/form_logic_base.csp');
require_once('grn/application.csp');

use grn\grn\customization\logic\ResourceLogic;

/**
 * Form Manager Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_Form_Logic extends GRN_Workflow_Form_Logic_Base
{
    const JS_CSS_CUSTOMIZATION_TARGET = 'form.';

    //Form Manager Instance
    var $_form_manager = null;

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {

    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_Form_Logic $instance                  //Instance of GRN_Workflow_Form_Logic
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_Form_Logic();
        }

        return $_instance;
    }

    /**
     * Get Form Logic
     *
     * @return GRN_Workflow_Form_Manager $form_manager              //Form Manager
     */
    function _getFormManager()
    {
        if (is_null($this->_form_manager)) {
            require_once('workflow/form_manager.csp');
            $this->_form_manager = GRN_Workflow_Form_Manager::getInstance();
        }

        return $this->_form_manager;
    }

    /**
     * get Login User
     *
     * @access private
     * @return object $login_user                //Login User
     */
    function _getLoginUser()
    {
        //Get UUM Instance
        global $G_container_base;
        $grn_uum = $G_container_base->getInstance('uum');

        //Get Login User
        $login_user = $grn_uum->getLoginUser();
        if ( ! $login_user) {
            $ret = false;

            return $ret;
        }

        //Return Login User
        return $login_user;
    }

    /**
     * Set Creator
     *
     * @access private
     *
     * @param  array $property_list //Property List
     *
     * @return bool   $result                    //Result
     */
    function _setCreator(&$property_list)
    {
        //Check Argument
        if ( ! is_array($property_list)) {
            return false;
        }

        // Get Login User
        $login_user = $this->_getLoginUser();

        //Get Create Time
        $ctime = time();

        //Set Create Infomation
        if ($login_user) {
            $user_id = $login_user->getOID();
            $display_name
                = $login_user->get('display_name');
            $foreign_key
                = $login_user->get('foreign_key');
            $property_list[GRN_WORKFLOW_COLUMN_CREATOR]
                = $user_id;         //Creator
            $property_list[GRN_WORKFLOW_COLUMN_CREATOR_NAME]
                = $display_name;    //Creator Name
            $property_list[GRN_WORKFLOW_COLUMN_CREATOR_FOREIGN_KEY]
                = $foreign_key;     //Creator Foreign Key
            $property_list[GRN_WORKFLOW_COLUMN_MODIFIER]
                = $user_id;         //Modifier
            $property_list[GRN_WORKFLOW_COLUMN_MODIFIER_NAME]
                = $display_name;    //Modifier Name
            $property_list[GRN_WORKFLOW_COLUMN_MODIFIER_FOREIGN_KEY]
                = $foreign_key;     //Modifier Foreign Key
        }
        $property_list[GRN_WORKFLOW_COLUMN_CTIME] = $ctime;   //Create Time
        $property_list[GRN_WORKFLOW_COLUMN_MTIME] = $ctime;   //Modify Time

        return true;
    }

    /**
     * Set Modofier
     *
     * @access private
     *
     * @param  array $property_list //Property List
     *
     * @return bool   $result                    //Result
     */
    function _setModifier(&$property_list)
    {
        //Check Argument
        if ( ! is_array($property_list)) {
            return false;
        }

        // Get Login User
        $login_user = $this->_getLoginUser();

        //Get Modofy Time
        $mtime = time();

        //Set Modify Infomation/
        if ($login_user) {
            $user_id = $login_user->getOID();
            $display_name
                = $login_user->get('display_name');
            $foreign_key
                = $login_user->get('foreign_key');
            $property_list[GRN_WORKFLOW_COLUMN_MODIFIER]
                = $user_id;         //Modifier
            $property_list[GRN_WORKFLOW_COLUMN_MODIFIER_NAME]
                = $display_name;    //Modifier Name
            $property_list[GRN_WORKFLOW_COLUMN_MODIFIER_FOREIGN_KEY]
                = $foreign_key;     //Modifier Foreign Key
        }
        $property_list[GRN_WORKFLOW_COLUMN_MTIME] = $mtime;   //Modify Time

        return true;
    }

    /**
     * Check Form Code
     *
     * @param string $form_code   //Form Code
     * @param int    $form_id     //Form ID
     * @param bool   $throw_error //Throw Error Flag
     * @param bool   $result      //Check Result
     */
    function checkCode($form_code, $form_id = null, $throw_error = true)
    {
        //Get Form By Foreign key
        $column_list = ['_id'];
        $option = [
            'condition' => [
                0 => [
                    'column'   => 'col_deleted',
                    'value'    => '0',
                    'operator' => '='
                ]
            ]
        ];
        $form_manager = $this->_getFormManager();
        $form = $form_manager->getByForeignKey($form_code, $column_list,
            $option);
        if ( ! $form) {
            return true;
        }

        //Check Same Form
        if ($form['_id'] != $form_id) {
            if ($throw_error) {
                //Duplicate Foreign Key
                require_once('workflow/error_code.csp');
                cb_throw_error(E_GRN_WRKF_FORM_DUPLICATE_FOREIGN_KEY);
            }

            return false;
        }

        return true;
    }

    /**
     * Add Form
     *
     * @param  string $name        //Name
     * @param  string $foreign_key //Foreign Key
     * @param  string $memo        //Memo
     * @param  int    $category_id //Category ID
     *
     * @return int    $form_id                    //Form ID
     */
    function add(
        $name,
        $foreign_key,
        $memo,
        $category_id = null,
        $auto_export = false,
        $export_folder = null,
        $login_name_export = 0,
        $export_top_line = 0
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($name, E_GRN_WRKF_FORM_NOT_INPUT_NECESSARY);   //Name
        cb_trim_check($foreign_key,
            E_GRN_WRKF_FORM_NOT_INPUT_NECESSARY);   //Foreign key

        //Check Foreign Key
        $this->checkCode($foreign_key);

        $login_name_export = (is_null($login_name_export)) ? 0
            : $login_name_export;
        $export_top_line = (is_null($export_top_line)) ? 0 : $export_top_line;

        //Create Property List
        $property_list = [
            GRN_WORKFLOW_COLUMN_NAME              => $name,
            GRN_WORKFLOW_COLUMN_FOREIGN_KEY       => $foreign_key,
            GRN_WORKFLOW_COLUMN_MEMO              => $memo,
            GRN_WORKFLOW_COLUMN_TYPE              => 0,
            GRN_WORKFLOW_COLUMN_ICON_TYPE         => 0,
            GRN_WORKFLOW_COLUMN_ICON_URL          => null,
            GRN_WORKFLOW_COLUMN_ICON_ID           => null,
            GRN_WORKFLOW_COLUMN_ACTIVE            => 0,
            GRN_WORKFLOW_COLUMN_SERIAL_TYPE       => 0,
            GRN_WORKFLOW_COLUMN_SERIAL_FORMAT     => null,
            GRN_WORKFLOW_COLUMN_SERIAL_NUMBER     => 0,
            GRN_WORKFLOW_COLUMN_DELETED           => 0,
            GRN_WORKFLOW_COLUMN_AUTO_EXPORT       => $auto_export,
            GRN_WORKFLOW_COLUMN_EXPORT_FOLDER     => $export_folder,
            GRN_WORKFLOW_COLUMN_LOGIN_NAME_EXPORT => $login_name_export,
            GRN_WORKFLOW_COLUMN_EXPORT_TOP_LINE   => $export_top_line,
        ];
        if ( ! is_null($category_id) && $category_id > 0) {
            $property_list[GRN_WORKFLOW_COLUMN_CATEGORY] = $category_id;
        }

        //Set Creator
        $this->_setCreator($property_list);

        //Create New Form
        $form_manager = $this->_getFormManager();
        $form_id = $form_manager->create($property_list);

        return $form_id;
    }

    /**
     * Add Separator
     *
     * @param  int $category_id //Category ID
     *
     * @return int    $form_id                    //Form ID
     */
    function addSeparator($category_id = null)
    {
        //Create Property List
        $property_list = [
            GRN_WORKFLOW_COLUMN_NAME          => '',
            GRN_WORKFLOW_COLUMN_FOREIGN_KEY   => GRN_WORKFLOW_SEPARATOR_FOREIGN_KEY,
            GRN_WORKFLOW_COLUMN_MEMO          => '',
            GRN_WORKFLOW_COLUMN_TYPE          => 1,
            GRN_WORKFLOW_COLUMN_ICON_TYPE     => 0,
            GRN_WORKFLOW_COLUMN_ICON_URL      => null,
            GRN_WORKFLOW_COLUMN_ICON_ID       => null,
            GRN_WORKFLOW_COLUMN_ACTIVE        => 1,
            GRN_WORKFLOW_COLUMN_SERIAL_TYPE   => 0,
            GRN_WORKFLOW_COLUMN_SERIAL_FORMAT => null,
            GRN_WORKFLOW_COLUMN_SERIAL_NUMBER => 0,
            GRN_WORKFLOW_COLUMN_DELETED       => 0,
            GRN_WORKFLOW_COLUMN_AUTO_EXPORT   => false,
        ];
        if ( ! is_null($category_id) && $category_id > 0) {
            $property_list[GRN_WORKFLOW_COLUMN_CATEGORY] = $category_id;
        }

        //Set Creator
        $this->_setCreator($property_list);

        //Create New Form
        $form_manager =& $this->_getFormManager();
        $form_id = $form_manager->create($property_list);

        //Update Foteign Key
        $foreign_key = sprintf('%s_%s', GRN_WORKFLOW_SEPARATOR_FOREIGN_KEY,
            $form_id);
        $property_list = [GRN_WORKFLOW_COLUMN_FOREIGN_KEY => $foreign_key];
        $form_id = $form_manager->update($form_id, $property_list);

        return $form_id;
    }

    /**
     * Modify Form
     *
     * @param  int    $form_id     //Form ID
     * @param  string $name        //Name
     * @param  string $foreign_key //Foreign Key
     * @param  string $memo        //Memo
     * @param  int    $category_id //Category ID
     * @param  bool   $refresh     //Refresh Flag
     *
     * @return int    $form_id                   //Form ID
     */
    function modify(
        $form_id,
        $name,
        $foreign_key,
        $memo,
        $category_id = null,
        $refresh = false,
        $auto_export = false,
        $export_folder,
        $login_name_export = 0,
        $export_top_line = 0
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($form_id,
            E_GRN_WRKF_FORM_INVALID_ID);            //Form ID
        cb_trim_check($name, E_GRN_WRKF_FORM_NOT_INPUT_NECESSARY);   //Name
        cb_trim_check($foreign_key,
            E_GRN_WRKF_FORM_NOT_INPUT_NECESSARY);   //Foreign key

        //Check Foreign Key
        $this->checkCode($foreign_key, $form_id, true);

        //Check Form Exist
        $form_list = $this->getList(null, $refresh);
        if ( ! array_key_exists($form_id, $form_list)) {
            //Form Not Found
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_FORM_NOT_FOUND);
        }

        $login_name_export = (is_null($login_name_export)) ? 0
            : $login_name_export;
        $export_top_line = (is_null($export_top_line)) ? 0 : $export_top_line;

        //Create Property List
        $property_list = [
            GRN_WORKFLOW_COLUMN_NAME              => $name,
            GRN_WORKFLOW_COLUMN_FOREIGN_KEY       => $foreign_key,
            GRN_WORKFLOW_COLUMN_MEMO              => $memo,
            GRN_WORKFLOW_COLUMN_AUTO_EXPORT       => $auto_export,
            GRN_WORKFLOW_COLUMN_EXPORT_FOLDER     => $export_folder,
            GRN_WORKFLOW_COLUMN_LOGIN_NAME_EXPORT => $login_name_export,
            GRN_WORKFLOW_COLUMN_EXPORT_TOP_LINE   => $export_top_line,
        ];

        if ( ! is_null($category_id)) {
            $property_list[GRN_WORKFLOW_COLUMN_CATEGORY] = $category_id;
        }

        //Set Modifier
        $this->_setModifier($property_list);

        //Update Form
        $form_manager = $this->_getFormManager();
        $form_id = $form_manager->update($form_id, $property_list);

        return $form_id;
    }

    /**
     * Modify Form Administrator's Memo
     *
     * @param  int    $form_id     //Form ID
     * @param  string $admin_memo  //Administrator's memo
     * @param  int    $category_id //Category ID
     * @param  bool   $refresh     //Refresh Flag
     *
     * @return int    $form_id                   //Form ID
     */
    function modifyAdminMemo(
        $form_id,
        $admin_memo,
        $category_id = null,
        $refresh = false
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($form_id,
            E_GRN_WRKF_FORM_INVALID_ID);            //Form ID

        //Check Form Exist
        $form_list = $this->getList(null, $refresh);
        if ( ! array_key_exists($form_id, $form_list)) {
            //Form Not Found
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_FORM_NOT_FOUND);
        }

        //Create Property List
        $property_list = [
            GRN_WORKFLOW_COLUMN_ADMIN_MEMO => $admin_memo,
        ];

        //Set Modifier
        $this->_setModifier($property_list);

        //Update Form
        $form_manager =& $this->_getFormManager();
        $form_id = $form_manager->update($form_id, $property_list);

        return $form_id;
    }

    /**
     * Update Form
     *
     * @param  int $form_id //Form ID
     *
     * @return int    $form_id                   //Form ID
     */
    function update($form_id)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($form_id,
            E_GRN_WRKF_FORM_INVALID_ID);            //Form ID

        //Check Form Exist
        $form = $this->getDirect($form_id);

        //Set Modifier
        $property_list = [];
        $this->_setModifier($property_list);

        //Update Form
        $form_manager = $this->_getFormManager();
        $form_id = $form_manager->update($form_id, $property_list);

        return $form_id;
    }

    /**
     * Move Form
     *
     * @param  int  $form_id     //Form ID
     * @param  int  $category_id //Category ID
     * @param  bool $refresh     //Refresh Flag
     *
     * @return int    $form_id                   //Form ID
     */
    function move($form_id, $category_id = null)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($form_id,
            E_GRN_WRKF_FORM_INVALID_ID);            //Form ID
        cb_trim_check($category_id,
            E_GRN_WRKF_FORM_NOT_INPUT_NECESSARY);   //Category ID

        //Check Form Exist
        $column_list = ['_id'];
        $form = $this->getDirect($form_id, $column_list);
        if ( ! $form) {
            //Form Not Found
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_FORM_NOT_FOUND);
        }

        //Create Property List
        $property_list = [
            GRN_WORKFLOW_COLUMN_CATEGORY => $category_id,
        ];

        //Set Modifier
        $this->_setModifier($property_list);

        //Update Form
        $form_manager = $this->_getFormManager();
        $form_id = $form_manager->update($form_id, $property_list);

        return $form_id;
    }

    /**
     * Delete Form
     *
     * @param  int $form_id //Form ID
     *
     * @return BOOL   $result                    //Result
     */
    function delete($form_id)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($form_id, E_GRN_WRKF_FORM_INVALID_ID);        //Form ID

        //Check Form Exist
        $column_list = ['_id', 'col_type'];
        $form = $this->getDirect($form_id, $column_list);

        //Check Form Type
        $form_manager =& $this->_getFormManager();
        if ($form['col_type'] == 1) {
            //Delete Separator 
            $form_manager->remove($form_id);
        } else {
            //Check Petition Count
            $option = [];
            $column_list = ['_id'];
            require_once('workflow/petition_logic_base.csp');
            $petition_logic_base
                = GRN_Workflow_Petition_Logic_Base::getInstance();
            $petition_list =& $petition_logic_base->getList($form_id,
                $column_list, $option, true);
            if (count($petition_list) !== 0) {
                //Update Form MUltiple
                $property_list = [GRN_WORKFLOW_COLUMN_DELETED => 1];
                $form_manager->update($form_id, $property_list);
            } else {
                //Remove Form
                $form_manager->remove($form_id);
            }
        }

        $this->removeCustomizationResources([$form_id]);

        return true;
    }

    /**
     * Delete Multiple Form
     *
     * @param  array $form_id_list //Form ID List
     *
     * @return BOOL   $result                    //Result
     */
    function deleteMulti($form_id_list)
    {
        //Check Argument
        if ( ! is_array($form_id_list)) {
            //Not Input Necessary
            require_once('workflow/error_code.csp');
        }

        //Get Separator List
        $column_list = ['_id'];
        $option = [
            'condition' => [
                0 => [
                    'column'   => 'col_type',
                    'value'    => '1',
                    'operator' => '='
                ]
            ]
        ];
        $separator_list =& $this->getList(null, $column_list, $option);

        //Create Separator ID List
        $separator_id_list = [];
        foreach (array_keys($form_id_list) as $key) {
            if (array_key_exists($form_id_list[$key], $separator_list)) {
                $separator_id_list[] = $form_id_list[$key];
                unset($form_id_list[$key]);
            }
        }

        //Delete Separator Multiple
        $form_manager =& $this->_getFormManager();
        if (count($separator_id_list) !== 0) {
            $form_manager->removeMulti($separator_id_list);
            $this->removeCustomizationResources($separator_id_list);
        }

        //Check Form Count
        if (count($form_id_list) !== 0) {
            //Check Petition Count
            $remove_form_id_list = [];
            $update_form_id_list = [];
            $column_list = ['_id'];
            require_once('workflow/petition_logic_base.csp');
            $petition_logic_base
                = GRN_Workflow_Petition_Logic_Base::getInstance();
            foreach (array_keys($form_id_list) as $key) {
                $option = [];
                $petition_list
                    =& $petition_logic_base->getList($form_id_list[$key],
                    $column_list, $option, true);
                if (count($petition_list) !== 0) {
                    $update_form_id_list[] = $form_id_list[$key];
                } else {
                    $remove_form_id_list[] = $form_id_list[$key];
                }
            }

            //Update Form MUltiple
            if (count($update_form_id_list) !== 0) {
                $property_list = [GRN_WORKFLOW_COLUMN_DELETED => 1];
                $form_manager->updateMulti($update_form_id_list,
                    $property_list);
            }

            //Remove Form Multiple
            if (count($remove_form_id_list) !== 0) {
                $form_manager->removeMulti($remove_form_id_list);
                $this->removeCustomizationResources($remove_form_id_list);
            }
        }

        return true;
    }

    /**
     * Delete All Form
     *
     * @param  int $category_id //Category ID
     *
     * @return BOOL   $result                    //Result
     */
    function deleteAll($category_id = null)
    {
        //Get Form ID List
        $column_list = ['_id'];
        $form_list =& $this->getList($category_id, $column_list);
        $form_id_list = array_keys($form_list);

        //Get Separator List
        $column_list = ['_id'];
        $option = [
            'condition' => [
                0 => [
                    'column'   => 'col_type',
                    'value'    => '1',
                    'operator' => '='
                ]
            ]
        ];
        $separator_list =& $this->getList(null, $column_list, $option);

        //Create Separator ID List
        $separator_id_list = [];
        foreach (array_keys($form_id_list) as $key) {
            if (array_key_exists($form_id_list[$key], $separator_list)) {
                $separator_id_list[] = $form_id_list[$key];
                unset($form_id_list[$key]);
            }
        }

        //Delete Separator Multiple
        $form_manager =& $this->_getFormManager();
        if (count($separator_id_list) !== 0) {
            $form_manager->removeMulti($separator_id_list);
            $this->removeCustomizationResources($separator_id_list);
        }

        //Set Form Count
        if (count($form_id_list) !== 0) {
            //Check Petition Count
            $remove_form_id_list = [];
            $update_form_id_list = [];
            $column_list = ['_id'];
            require_once('workflow/petition_logic_base.csp');
            $petition_logic_base
                = GRN_Workflow_Petition_Logic_Base::getInstance();
            foreach (array_keys($form_id_list) as $key) {
                $option = [];
                $petition_list
                    =& $petition_logic_base->getList($form_id_list[$key],
                    $column_list, $option, true);
                if (count($petition_list) !== 0) {
                    $update_form_id_list[] = $form_id_list[$key];
                } else {
                    $remove_form_id_list[] = $form_id_list[$key];
                }
            }

            //Update Form MUltiple
            if (count($update_form_id_list) !== 0) {
                $property_list = [GRN_WORKFLOW_COLUMN_DELETED => 1];
                $form_manager->updateMulti($update_form_id_list,
                    $property_list);
            }

            //Remove Form Multiple
            if (count($remove_form_id_list) !== 0) {
                $form_manager->removeMulti($remove_form_id_list);
                $this->removeCustomizationResources($remove_form_id_list);
            }
        }

        return true;
    }

    /**
     * Copy Multiple Form
     *
     * @param  array $form_id_list //Form ID List
     * @param  int   $category_id  //Category ID
     *
     * @return BOOL   $result                    //Result
     */
    function copyMulti($form_id_list, $category_id = null)
    {
        //Check Argument
        if ( ! is_array($form_id_list)) {
            //Not Input Necessary
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_FORM_NOT_INPUT_NECESSARY);
        }

        //Get Form List
        $form_manager =& $this->_getFormManager();
        $form_list =& $form_manager->getList($category_id);

        //Copy Form List
        $form_id_map = [];
        foreach ($form_id_list as $form_id) {
            $form = $form_list[$form_id];

            //Unset _id Property
            unset($form['_id']);

            unset($form[GRN_WORKFLOW_COLUMN_IS_CUSTOMIZATION_ACTIVE]);

            //Change Display Name
            if ($form[GRN_WORKFLOW_COLUMN_TYPE] == 0) {
                $form[GRN_WORKFLOW_COLUMN_NAME]
                    = cb_plain_msg(GRN_WORKFLOW_MODULE_ID, 'copy_format',
                    ['copy_name' => $form[GRN_WORKFLOW_COLUMN_NAME]]);

                //Change Foreign Key
                $form[GRN_WORKFLOW_COLUMN_FOREIGN_KEY]
                    = cb_plain_msg(GRN_WORKFLOW_MODULE_ID, 'copy_format',
                    ['copy_name' => $form[GRN_WORKFLOW_COLUMN_FOREIGN_KEY]]);

                //Check Forekgn Key
                $this->checkCode($form[GRN_WORKFLOW_COLUMN_FOREIGN_KEY], null,
                    true);
            }

            $form[GRN_WORKFLOW_COLUMN_APPROVED_SERIAL_NUMBER] = 0;

            //Clear Category ID
            if ($category_id == -1 || is_null($category_id)) {
                unset($form[GRN_WORKFLOW_COLUMN_CATEGORY]);
            }

            //Crear Path
            if ( ! $form[GRN_WORKFLOW_COLUMN_PATH]) {
                unset($form[GRN_WORKFLOW_COLUMN_PATH]);
            }

            //Clear Path Step and List Index 
            unset($form[GRN_WORKFLOW_COLUMN_PATH]);
            unset($form[GRN_WORKFLOW_COLUMN_PATH_STEP]);
            unset($form[GRN_WORKFLOW_COLUMN_TRANSACTOR]);
            unset($form[GRN_WORKFLOW_COLUMN_TRANSACTOR_NAME]);
            unset($form[GRN_WORKFLOW_COLUMN_LIST_INDEX]);

            //Change Creator
            $this->_setCreator($form);

            //not active form if path is not public
            require_once('workflow/path.csp');
            $path_logic = GRN_Workflow_Paths::getInstance();
            if ($form_list[$form_id]['col_active']
                && ! is_null($form_list[$form_id]['col_path'])
            ) {
                $path = $path_logic->get($form_list[$form_id]['col_path'],
                    ['col_type']);
                if ($path['col_type'] == GRN_WORKFLOW_PRIVATE_PATH) {
                    $form['col_active'] = 0;
                }
            }

            //Add Form
            $form_id_map[$form_id] = $form_manager->create($form);

            //Update Separator Foreign Key
            if ($form[GRN_WORKFLOW_COLUMN_TYPE] == 1) {
                $foreign_key = sprintf('%s_%s',
                    GRN_WORKFLOW_SEPARATOR_FOREIGN_KEY, $form_id_map[$form_id]);
                $property_list
                    = [GRN_WORKFLOW_COLUMN_FOREIGN_KEY => $foreign_key];
                $form_manager->update($form_id_map[$form_id], $property_list);
            }
        }

        //Return Form ID Map
        return $form_id_map;
    }

    /**
     * Change Form Order
     *
     * @param  int  $form_id_list //Form ID List
     * @param  int  $category_id  //Category ID
     * @param  bool $refresh      //Refresh Flag
     *
     * @return BOOL   $result                    //Result
     */
    function changeOrder($form_id_list, $category_id = null, $refresh = false)
    {
        //Check Argument
        if ( ! is_array($form_id_list)) {
            require_once('fw/string_util.csp');
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_FORM_NOT_INPUT_NECESSARY);
        }

        //Change Order
        $form_manager =& $this->_getFormManager();
        $form_manager->changeOrder($form_id_list, $category_id, $refresh);

        return true;
    }

    /**
     * Activate Form
     *
     * @param  int  $form_id     //Form ID
     * @param  int  $category_id //Category ID
     * @param  bool $refresh     //Refresh Flag
     *
     * @return BOOL   $result                    //Result
     */
    function activate($form_id, $category_id = null, $refresh = false)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($form_id, E_GRN_WRKF_FORM_INVALID_ID);        //Form ID

        //Check Form Exist
        $form = $this->get($form_id, $category_id, [], [], $refresh);

        //Create Property List
        $property_list = [
            GRN_WORKFLOW_COLUMN_ACTIVE => 1,
        ];

        //Set Modifier
        $this->_setModifier($property_list);

        //Update Form
        $form_manager = $this->_getFormManager();
        $form_id = $form_manager->update($form_id, $property_list);

        return true;
    }

    /**
     * Deactivate Form
     *
     * @param  int  $form_id     //Form ID
     * @param  int  $category_id //Category ID
     * @param  bool $refresh     //Refresh Flag
     *
     * @return BOOL   $result                    //Result
     */
    function deactivate($form_id, $category_id = null, $refresh = false)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($form_id, E_GRN_WRKF_FORM_INVALID_ID);        //Form ID

        //Check Form Exist
        $form = $this->get($form_id, $category_id, [], [], $refresh);

        //Create Property List
        $property_list = [
            GRN_WORKFLOW_COLUMN_ACTIVE => 0,
        ];

        //Set Modifier
        $this->_setModifier($property_list);

        //Update Form
        $form_manager =& $this->_getFormManager();
        $form_id = $form_manager->update($form_id, $property_list);

        return true;
    }

    /**
     * Set Icon To Form
     *
     * @param  int    $form_id     //Form ID
     * @param  int    $icon_type   //Icon Type
     * @param  int    $icon_id     //Icon ID
     * @param  string $icon_url    //Icon URL
     * @param  int    $category_id //Category ID
     * @param  bool   $refresh     //Refresh Flag
     *
     * @return BOOL   $result                    //Result
     */
    function setIcon(
        $form_id,
        $icon_type,
        $icon_id,
        $icon_url,
        $category_id = null,
        $refresh = false
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($form_id,
            E_GRN_WRKF_FORM_INVALID_ID);            //Form ID
        cb_trim_check($icon_type,
            E_GRN_WRKF_FORM_NOT_INPUT_NECESSARY);   //Icon Type

        //Check Form Exist
        $form = $this->get($form_id, $category_id, [], [], $refresh);

        //Proccess Icon
        $icon_id_param = 0;
        $icon_url_string = null;
        switch ($icon_type) {
            //Embedded Icon
            case 0:
                cb_trim_check($icon_id,
                    E_GRN_WRKF_FORM_NOT_INPUT_NECESSARY);   //Icon ID
                $icon_id_param = $icon_id;
                break;
            //URL Icon
            case 1:
                cb_trim_check($icon_url,
                    E_GRN_WRKF_FORM_NOT_INPUT_NECESSARY);   //Icon URL
                $icon_url_string = $icon_url;
                break;
            //Standard Icon
            default:
                break;
        }

        //Create Property List
        $property_list = [
            GRN_WORKFLOW_COLUMN_ICON_TYPE => $icon_type,
            GRN_WORKFLOW_COLUMN_ICON_ID   => $icon_id_param,
            GRN_WORKFLOW_COLUMN_ICON_URL  => $icon_url_string,
        ];

        //Set Modifier
        $this->_setModifier($property_list);

        //Update Form
        $form_manager =& $this->_getFormManager();
        $form_id = $form_manager->update($form_id, $property_list);

        return true;
    }

    /**
     * Set Serial To Form
     *
     * @param  int    $form_id       //Form ID
     * @param  int    $serial_type   //Serial Type
     * @param  string $serial_format //Serial Format
     * @param  int    $category_id   //Category ID
     * @param  bool   $refresh       //Refresh Flag
     *
     * @return BOOL   $result                    //Result
     */
    function setSerial(
        $form_id,
        $serial_type,
        $serial_format,
        $serial_number = null,
        $category_id = null,
        $refresh = false
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($form_id,
            E_GRN_WRKF_FORM_INVALID_ID);            //Form ID
        cb_trim_check($serial_type,
            E_GRN_WRKF_FORM_NOT_INPUT_NECESSARY);   //Serial Type

        //Check Form Exist
        $form = $this->get($form_id, $category_id, [], [], $refresh);

        //Create Property List
        $property_list = [
            GRN_WORKFLOW_COLUMN_SERIAL_TYPE   => $serial_type,
            GRN_WORKFLOW_COLUMN_SERIAL_FORMAT => $serial_format,
        ];

        //Check Reset Serial Number
        if ( ! is_null($serial_number) && $serial_type == 1) {
            $property_list[GRN_WORKFLOW_COLUMN_SERIAL_NUMBER] = $serial_number;
        }

        //Set Modifier
        $this->_setModifier($property_list);

        //Update Form
        $form_manager =& $this->_getFormManager();
        $form_id = $form_manager->update($form_id, $property_list);

        return true;
    }

    /**
     * set Approved Serial
     *
     * @param int    $form_id
     * @param int    $approved_serial_type
     * @param string $approved_serial_format
     * @param int    $approved_serial_number
     * @param int    $category_id
     * @param bool   $refresh
     *
     * @return bool
     */
    public function setApprovedSerial(
        $form_id,
        $approved_serial_type,
        $approved_serial_format,
        $approved_serial_number = null,
        $category_id = null,
        $refresh = false
    ) {
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($form_id, E_GRN_WRKF_FORM_INVALID_ID);
        cb_trim_check($approved_serial_type,
            E_GRN_WRKF_FORM_NOT_INPUT_NECESSARY);

        $this->get($form_id, $category_id, [], [], $refresh);

        $property_list = [
            GRN_WORKFLOW_COLUMN_APPROVED_SERIAL_TYPE   => $approved_serial_type,
            GRN_WORKFLOW_COLUMN_APPROVED_SERIAL_FORMAT => $approved_serial_format,
        ];

        if ( ! is_null($approved_serial_number)
             && $approved_serial_type == GRN_WORKFLOW_APPROVED_NUMBER_ENABLE
        ) {
            $property_list[GRN_WORKFLOW_COLUMN_APPROVED_SERIAL_NUMBER]
                = $approved_serial_number;
        }
        $this->_setModifier($property_list);

        $form_manager =& $this->_getFormManager();
        $form_manager->update($form_id, $property_list);

        return true;
    }

    /**
     * set Serial Setting
     *
     * @param int    $form_id
     * @param int    $serial_type
     * @param string $serial_format
     * @param int    $approved_serial_type
     * @param string $approved_serial_format
     * @param int    $category_id
     * @param bool   $refresh
     *
     * @return bool
     */
    public function setSerialSetting(
        $form_id,
        $serial_type,
        $serial_format,
        $approved_serial_type,
        $approved_serial_format,
        $category_id = null,
        $refresh = false
    ) {
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($form_id,
            E_GRN_WRKF_FORM_INVALID_ID);            //Form ID
        cb_trim_check($serial_type,
            E_GRN_WRKF_FORM_NOT_INPUT_NECESSARY);   //Serial Type
        cb_trim_check($approved_serial_type,
            E_GRN_WRKF_FORM_NOT_INPUT_NECESSARY);   //Serial Type

        $this->get($form_id, $category_id, [], [], $refresh);

        $property_list = [
            GRN_WORKFLOW_COLUMN_SERIAL_TYPE            => $serial_type,
            GRN_WORKFLOW_COLUMN_SERIAL_FORMAT          => $serial_format,
            GRN_WORKFLOW_COLUMN_APPROVED_SERIAL_TYPE   => $approved_serial_type,
            GRN_WORKFLOW_COLUMN_APPROVED_SERIAL_FORMAT => $approved_serial_format,
        ];

        $this->_setModifier($property_list);

        $form_manager =& $this->_getFormManager();
        $form_manager->update($form_id, $property_list);

        return true;
    }

    /**
     * @param $form_id
     *
     * @return string
     */
    public function getApprovedSerial($form_id)
    {
        $form_manager =& $this->_getFormManager();
        $serial_number = $form_manager->getApprovedSerial($form_id);

        return $serial_number;
    }

    /**
     * Get Serial
     *
     * @return int    $form_count                //Form Count
     */
    function getSerial($form_id)
    {
        //Get Form List
        $form_manager =& $this->_getFormManager();
        $serial_number = $form_manager->getSerial($form_id);

        //Return Form Count
        return $serial_number;
    }

    /**
     * Reset Serial
     *
     * @param  int $category_id //Category ID
     *
     * @return int    $form_count                //Form Count
     */
    function resetSerial()
    {
        //Get All Form List(For Update)
        $column_list = ['_id'];
        $option = [
            'condition' => [
                0 => [
                    'column'   => 'col_type',
                    'value'    => '0',
                    'operator' => '='
                ]
            ]
        ];
        $form_list = $this->getList(null, $column_list, $option, true,
            CB_DATABASE_EXCLUSIVE_LOCK);
        if (count($form_list) === 0) {
            return;
        }

        //Create Property List
        $property_list = [
            GRN_WORKFLOW_COLUMN_SERIAL_NUMBER          => 0,
            GRN_WORKFLOW_COLUMN_APPROVED_SERIAL_NUMBER => 0,
        ];

        //Reset All Serial
        $form_manager =& $this->_getFormManager();
        $form_manager->updateMulti(array_keys($form_list), $property_list);

        return;
    }

    /**
     * Set Path To Form
     *
     * @param  int  $form_id         //Form ID
     * @param  int  $path_id         //Path ID
     * @param  int  $category_id     //Category ID
     * @param  bool $refresh         //Refresh Flag
     * @param  bool $path_empty_flag //Path Empty Flag (TRUE:Ban empty Path ID)
     *
     * @return BOOL   $result                    //Result
     */
    function setPath(
        $form_id,
        $path_id,
        $category_id = null,
        $refresh = false,
        $path_empty_flag = true
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($form_id,
            E_GRN_WRKF_FORM_INVALID_ID);            //Form ID
        if ($path_empty_flag) {
            cb_trim_check($path_id,
                E_GRN_WRKF_INVALID_PATH_ID);        //Path ID
        }

        //Create Property List
        $property_list = [
            GRN_WORKFLOW_COLUMN_PATH => $path_id,
        ];

        //Set Modifier
        $this->_setModifier($property_list);

        //Update Form
        $form_manager = $this->_getFormManager();
        $form_id = $form_manager->update($form_id, $property_list);

        return true;
    }

    /**
     * @param $form_id
     * @param $apply_status
     *
     * @return bool
     */
    function setActiveCustomization($form_id, $apply_status)
    {
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($form_id, E_GRN_WRKF_FORM_INVALID_ID);

        $property_list
            = [GRN_WORKFLOW_COLUMN_IS_CUSTOMIZATION_ACTIVE => $apply_status];

        $this->_setModifier($property_list);

        $form_manager = $this->_getFormManager();
        $form_manager->update($form_id, $property_list);

        return true;
    }

    function getListByPathId(
        $path_id,
        $offset = 0,
        $limit = -1,
        $lock = CB_DATABASE_DEFAULT_LOCK
    ) {
        cb_trim_check($path_id, E_GRN_WRKF_INVALID_PATH_ID);

        require_once('fw/i18n.csp');
        require_once('workflow/WorkflowFacade.csp');

        $i18n = CB_I18N::getInstance();

        $dao = new WorkflowFacade();
        $dataObj = [];
        $dataObj['lock'] = $lock;
        $dataObj['language'] = $i18n->getCurrentLanguage();
        $dataObj['offset'] = $offset;
        $dataObj['limit'] = $limit;

        $formList = $dao->getWorkflowFormListByPathId($dataObj, $path_id);

        $resultArray = [];
        foreach ($formList as $form) {
            $formId = $form->getId();
            $row = $form->convertArray();
            $resultArray[$formId] = $row;
        }

        return $resultArray;
    }

    function getFormCount($path_id)
    {
        $app_locator = GRN_ApplicationLocator::instance();
        $dbconn =& $app_locator->getConnection('workflow');

        $condition = cb_queryf($dbconn,
            "( col_deleted <> 1 AND col_type='0' AND col_path='@S')", $path_id);
        $query
            = "SELECT COUNT(*) FROM tab_grn_workflow_form WHERE {$condition};";
        if ($result = $dbconn->query($query)) {
            $row = $dbconn->fetch_assoc($result);

            return $row['COUNT(*)'];
        }
        $dbconn->throwError(['query' => "failed query on SELECT: {$query}"]);
    }

    function getCountListGroupByPath($pids)
    {
        $app_locator = GRN_ApplicationLocator::instance();
        $dbconn = $app_locator->getConnection('workflow');

        if ( ! is_array($pids) || 0 == count($pids)) {
            return [];
        }

        $condition = null;
        foreach ($pids as $key => $value) {
            $pids[$key] = cb_queryf($dbconn, "'@S'", $value);
        }
        $pids = implode(',', $pids);
        $condition = "col_path IN({$pids}) AND col_deleted <>1";

        $query
            = "SELECT col_path,COUNT(*) FROM tab_grn_workflow_form WHERE {$condition} GROUP BY col_path;";
        $result = $dbconn->query($query);
        if (false === $result) {
            $dbconn->throwError(['query' => "failed query on SELECT: {$query}"]);
        }

        $rows = [];
        while ($row = $dbconn->fetch_assoc($result)) {
            $rows[$row['col_path']] = $row['COUNT(*)'];
        }

        return $rows;
    }

    /**
     * Modify Form by File import
     *
     * @param  int   $form_id     //Form ID
     * @param  array $form        //Form Information
     * @param  int   $category_id //Category ID
     *
     * @return int                               //Form ID
     */
    function modifyByImport($form_id, & $form, & $category_id)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');

        // 必須チェック
        // （変更する申請フォームの有無、コードの重複は呼び出し元でチェック済み）
        cb_trim_check($form[GRN_WORKFLOW_COLUMN_NAME],
            E_GRN_WRKF_FORM_NOT_INPUT_NECESSARY); //Name
        cb_trim_check($form[GRN_WORKFLOW_COLUMN_FOREIGN_KEY],
            E_GRN_WRKF_FORM_NOT_INPUT_NECESSARY); //Foreign key

        $approved_serial_type = cb_at($form,
            GRN_WORKFLOW_COLUMN_APPROVED_SERIAL_TYPE,
            GRN_WORKFLOW_APPROVED_NUMBER_DISABLE);
        if ($approved_serial_type != GRN_WORKFLOW_APPROVED_NUMBER_ENABLE
            && $approved_serial_type != GRN_WORKFLOW_APPROVED_NUMBER_DISABLE
        ) {
            $approved_serial_type = GRN_WORKFLOW_APPROVED_NUMBER_DISABLE;
        }

        $serial_type_options = [
            GRN_WORKFLOW_SERIAL_NUMBERING_UNIQUE_ACROSS_ALL_REQUEST_FORMS,
            GRN_WORKFLOW_SERIAL_NUMBERING_UNIQUE_EACH_FORM,
            GRN_WORKFLOW_SERIAL_NUMBERING_NONE
        ];

        $serial_type = cb_at($form, GRN_WORKFLOW_COLUMN_SERIAL_TYPE,
            GRN_WORKFLOW_SERIAL_NUMBERING_UNIQUE_ACROSS_ALL_REQUEST_FORMS);

        if ( ! in_array($serial_type, $serial_type_options)) {
            $serial_type
                = GRN_WORKFLOW_SERIAL_NUMBERING_UNIQUE_ACROSS_ALL_REQUEST_FORMS;
        }

        $serial_format = cb_at($form, GRN_WORKFLOW_COLUMN_SERIAL_FORMAT, '');
        //Create Property List
        $property_list = [
            GRN_WORKFLOW_COLUMN_NAME                   => $form[GRN_WORKFLOW_COLUMN_NAME],
            GRN_WORKFLOW_COLUMN_FOREIGN_KEY            => $form[GRN_WORKFLOW_COLUMN_FOREIGN_KEY],
            GRN_WORKFLOW_COLUMN_MEMO                   => $form[GRN_WORKFLOW_COLUMN_MEMO],
            GRN_WORKFLOW_COLUMN_ADMIN_MEMO             => $form[GRN_WORKFLOW_COLUMN_ADMIN_MEMO],
            GRN_WORKFLOW_COLUMN_TYPE                   => 0,
            GRN_WORKFLOW_COLUMN_DELETED                => 0,
            GRN_WORKFLOW_COLUMN_ICON_TYPE              => $form[GRN_WORKFLOW_COLUMN_ICON_TYPE],
            GRN_WORKFLOW_COLUMN_ACTIVE                 => $form[GRN_WORKFLOW_COLUMN_ACTIVE],
            GRN_WORKFLOW_COLUMN_SERIAL_TYPE            => $serial_type,
            GRN_WORKFLOW_COLUMN_SERIAL_FORMAT          => ! is_array($serial_format)
                ? $serial_format : '',
            GRN_WORKFLOW_COLUMN_APPROVED_SERIAL_TYPE   => $approved_serial_type,
            GRN_WORKFLOW_COLUMN_APPROVED_SERIAL_FORMAT => cb_at($form,
                GRN_WORKFLOW_COLUMN_APPROVED_SERIAL_FORMAT, ''),
            GRN_WORKFLOW_COLUMN_AUTO_EXPORT            => $form[GRN_WORKFLOW_COLUMN_AUTO_EXPORT],
            GRN_WORKFLOW_COLUMN_EXPORT_FOLDER          => $form[GRN_WORKFLOW_COLUMN_EXPORT_FOLDER],
            GRN_WORKFLOW_COLUMN_LOGIN_NAME_EXPORT      => $form[GRN_WORKFLOW_COLUMN_LOGIN_NAME_EXPORT],
            GRN_WORKFLOW_COLUMN_EXPORT_TOP_LINE        => $form[GRN_WORKFLOW_COLUMN_EXPORT_TOP_LINE],
            GRN_WORKFLOW_COLUMN_LIST_INDEX             => $form[GRN_WORKFLOW_COLUMN_LIST_INDEX],
        ];

        //Set Category ID to Property List
        if ( ! is_null($category_id) && $category_id > 0) {
            $property_list[GRN_WORKFLOW_COLUMN_CATEGORY] = $category_id;
        }

        //Set Icon Info to Property List
        $icon_id_param = 0;
        $icon_url_string = '';
        switch ($property_list[GRN_WORKFLOW_COLUMN_ICON_TYPE]) {
            case 0:        //Standard or Embedded Icon
                $icon_id = $form[GRN_WORKFLOW_COLUMN_ICON_ID];
                cb_trim_check($icon_id,
                    E_GRN_WRKF_FORM_NOT_INPUT_NECESSARY);   //Icon ID
                $icon_id_param = $icon_id;
                break;
            case 1:        //URL Icon
                $icon_url = $form[GRN_WORKFLOW_COLUMN_ICON_URL];
                cb_trim_check($icon_url,
                    E_GRN_WRKF_FORM_NOT_INPUT_NECESSARY);   //Icon URL
                $icon_url_string = $icon_url;
                break;
            default:
                cb_throw_error(E_GRN_WRKF_XML_PARAMETER_INVALID,
                    null, null, null,
                    ['parameter' => 'Form Icon Type']);
                break;
        }
        $property_list[GRN_WORKFLOW_COLUMN_ICON_ID] = $icon_id_param;
        $property_list[GRN_WORKFLOW_COLUMN_ICON_URL] = $icon_url_string;

        //Set Modifier
        $this->_setModifier($property_list);

        //Update Form
        $form_manager =& $this->_getFormManager();
        $form_manager->update($form_id, $property_list);

        return $form_id;
    }

    /**
     * Add Form by File import
     *
     * @param  array $form        //Form Information
     * @param  int   $category_id //Category ID
     *
     * @return int                               //Form ID
     */
    function addByImport(& $form, $category_id)
    {
        //Check Argument
        // （コードの重複は呼び出し元でチェック済み）
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($form[GRN_WORKFLOW_COLUMN_NAME],
            E_GRN_WRKF_FORM_NOT_INPUT_NECESSARY); //Name
        cb_trim_check($form[GRN_WORKFLOW_COLUMN_FOREIGN_KEY],
            E_GRN_WRKF_FORM_NOT_INPUT_NECESSARY); //Foreign key

        $approved_serial_type = cb_at($form,
            GRN_WORKFLOW_COLUMN_APPROVED_SERIAL_TYPE,
            GRN_WORKFLOW_APPROVED_NUMBER_DISABLE);
        if ($approved_serial_type != GRN_WORKFLOW_APPROVED_NUMBER_ENABLE
            && $approved_serial_type != GRN_WORKFLOW_APPROVED_NUMBER_DISABLE
        ) {
            $approved_serial_type = GRN_WORKFLOW_APPROVED_NUMBER_DISABLE;
        }

        $serial_type_options = [
            GRN_WORKFLOW_SERIAL_NUMBERING_UNIQUE_ACROSS_ALL_REQUEST_FORMS,
            GRN_WORKFLOW_SERIAL_NUMBERING_UNIQUE_EACH_FORM,
            GRN_WORKFLOW_SERIAL_NUMBERING_NONE
        ];

        $serial_type = cb_at($form, GRN_WORKFLOW_COLUMN_SERIAL_TYPE,
            GRN_WORKFLOW_SERIAL_NUMBERING_UNIQUE_ACROSS_ALL_REQUEST_FORMS);

        if ( ! in_array($serial_type, $serial_type_options)) {
            $serial_type
                = GRN_WORKFLOW_SERIAL_NUMBERING_UNIQUE_ACROSS_ALL_REQUEST_FORMS;
        }

        $serial_format = cb_at($form, GRN_WORKFLOW_COLUMN_SERIAL_FORMAT, '');
        //Create Property List
        $property_list = [
            GRN_WORKFLOW_COLUMN_NAME                   => $form[GRN_WORKFLOW_COLUMN_NAME],
            GRN_WORKFLOW_COLUMN_FOREIGN_KEY            => $form[GRN_WORKFLOW_COLUMN_FOREIGN_KEY],
            GRN_WORKFLOW_COLUMN_MEMO                   => $form[GRN_WORKFLOW_COLUMN_MEMO],
            GRN_WORKFLOW_COLUMN_ADMIN_MEMO             => $form[GRN_WORKFLOW_COLUMN_ADMIN_MEMO],
            GRN_WORKFLOW_COLUMN_TYPE                   => 0,
            GRN_WORKFLOW_COLUMN_DELETED                => 0,
            GRN_WORKFLOW_COLUMN_ICON_TYPE              => $form[GRN_WORKFLOW_COLUMN_ICON_TYPE],
            GRN_WORKFLOW_COLUMN_ACTIVE                 => $form[GRN_WORKFLOW_COLUMN_ACTIVE],
            GRN_WORKFLOW_COLUMN_SERIAL_TYPE            => $serial_type,
            GRN_WORKFLOW_COLUMN_SERIAL_FORMAT          => ! is_array($serial_format)
                ? $serial_format : '',
            GRN_WORKFLOW_COLUMN_SERIAL_NUMBER          => 0,
            GRN_WORKFLOW_COLUMN_APPROVED_SERIAL_TYPE   => $approved_serial_type,
            GRN_WORKFLOW_COLUMN_APPROVED_SERIAL_FORMAT => cb_at($form,
                GRN_WORKFLOW_COLUMN_APPROVED_SERIAL_FORMAT, ''),
            GRN_WORKFLOW_COLUMN_APPROVED_SERIAL_NUMBER => 0,
            GRN_WORKFLOW_COLUMN_AUTO_EXPORT            => $form[GRN_WORKFLOW_COLUMN_AUTO_EXPORT],
            GRN_WORKFLOW_COLUMN_EXPORT_FOLDER          => $form[GRN_WORKFLOW_COLUMN_EXPORT_FOLDER],
            GRN_WORKFLOW_COLUMN_LOGIN_NAME_EXPORT      => $form[GRN_WORKFLOW_COLUMN_LOGIN_NAME_EXPORT],
            GRN_WORKFLOW_COLUMN_EXPORT_TOP_LINE        => $form[GRN_WORKFLOW_COLUMN_EXPORT_TOP_LINE],
            GRN_WORKFLOW_COLUMN_LIST_INDEX             => $form[GRN_WORKFLOW_COLUMN_LIST_INDEX],
        ];

        //Set Category ID to Property List
        if ( ! is_null($category_id) && $category_id > 0) {
            $property_list[GRN_WORKFLOW_COLUMN_CATEGORY] = $category_id;
        }

        //Set Icon Info to Property List
        $icon_id_param = 0;
        $icon_url_string = '';
        switch ($property_list[GRN_WORKFLOW_COLUMN_ICON_TYPE]) {
            case 0:        //Standard or Embedded Icon
                $icon_id = $form[GRN_WORKFLOW_COLUMN_ICON_ID];
                cb_trim_check($icon_id,
                    E_GRN_WRKF_FORM_NOT_INPUT_NECESSARY);   //Icon ID
                $icon_id_param = $icon_id;
                break;
            case 1:        //URL Icon
                $icon_url = $form[GRN_WORKFLOW_COLUMN_ICON_URL];
                cb_trim_check($icon_url,
                    E_GRN_WRKF_FORM_NOT_INPUT_NECESSARY);   //Icon URL
                $icon_url_string = $icon_url;
                break;
            default:
                cb_throw_error(E_GRN_WRKF_XML_PARAMETER_INVALID,
                    null, null, null,
                    ['parameter' => 'Form Icon Type']);
                break;
        }
        $property_list[GRN_WORKFLOW_COLUMN_ICON_ID] = $icon_id_param;
        $property_list[GRN_WORKFLOW_COLUMN_ICON_URL] = $icon_url_string;

        //Set Creator
        $this->_setCreator($property_list);

        //Create New Form
        $form_manager =& $this->_getFormManager();
        $form_id = $form_manager->create($property_list);

        return $form_id;
    }

    /**
     * Get Form ID by Petition ID
     *
     * @param  int $petition_id // Petition ID
     *
     * @return int  $form_id      // Form ID
     */
    function getIdByPetitionId($petition_id)
    {
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($petition_id, E_GRN_WRKF_PETITION_INVALID_ID);

        $app_locator = GRN_ApplicationLocator::instance();
        $dbconn =& $app_locator->getConnection('workflow');

        $condition = cb_queryf($dbconn, "_id='@S'", $petition_id);
        $query
            = "SELECT col_form FROM tab_grn_workflow_petition WHERE {$condition};";
        if ($result = $dbconn->query($query)) {
            $row = $dbconn->fetch_assoc($result);
            if ( ! $row || ! array_key_exists('col_form', $row)
                 || $row['col_form'] < 1
            ) {
                return false;
            }

            return $row['col_form'];
        }
        $dbconn->throwError(['query' => "failed query on SELECT: {$query}"]);
    }

    /**
     * @param array $form_ids
     */
    public function removeCustomizationResources($form_ids)
    {
        $targets = [];
        foreach ($form_ids as $form_id) {
            $targets[] = self::JS_CSS_CUSTOMIZATION_TARGET . $form_id;
        }

        $resource_logic = new ResourceLogic('workflow');
        $resource_logic->deleteResourcesAndFilesByTargets($targets);
    }
}


