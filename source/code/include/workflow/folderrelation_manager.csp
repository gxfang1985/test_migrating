<?php
/**
 * Workflow Application Folder Relation Class
 *
 * @author  SHIMADA Kunihiko 2006/1
 * @version 1.0
 * @package grn.workflow
 */

/** Workflow Application **/
require_once('workflow/resources.csp');
require_once('workflow/folderrelation_manager_base.csp');

/**
 * Folder Relation Manager Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_FolderRelation_Manager
    extends GRN_Workflow_FolderRelation_Manager_Base
{
    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
        //Get Parent Instance
        $parent = parent::getInstance();

        //Sync Parent Table and Folder Relation List Cache
        $this->_table_name =& $parent->_table_name;
        $this->_list =& $parent->_list;
    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_FolderRelation_Manager $instance                 //Instance of GRN_Workflow_FolderRelation_Manager
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_FolderRelation_Manager();
        }

        return $_instance;
    }

    /**
     * Create Folder Relation
     *
     * @param  array $property_list //Property List(Name=>Value)
     *
     * @return int   $folder_relation_id        //Folder Relation ID
     */
    function create($property_list)
    {
        //Get Database
        $database = $this->_getDatabase();

        //Create Column List
        $column_list = $this->_getColumnList();

        //Create Query
        $insert_list = [];
        foreach ($column_list as $column) {
            if ($column === '_id') {
                continue;
            }

            if (array_key_exists($column, $property_list)) {
                if (is_null($property_list[$column])) {
                    $insert_list[$column] = 'null';
                } else {
                    $insert_list[$column] = cb_queryf($database, '"@S"',
                        $property_list[$column]);
                }
            }
        }
        $column_string = implode(', ', array_keys($insert_list));
        $value_string = implode(', ', $insert_list);
        $query = sprintf('INSERT %s(%s) VALUES (%s)',
            $this->_table_name, $column_string, $value_string);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Return Folder Relation ID
        $folder_relation_id = $database->get_insert_id();

        return $folder_relation_id;
    }

    /**
     * Update Folder Relation
     *
     * @param  array $folder_relation_id //Folder Relation ID
     * @param  array $property_list      //Property List(Name=>Value)
     *
     * @return array $folder_relation_id            //Folder Relation ID
     */
    function update($folder_relation_id, $property_list)
    {
        //Get Database
        $database =& $this->_getDatabase();

        //Create Column List
        $column_list = $this->_getColumnList();

        //Create Query
        $update_list = [];
        foreach ($column_list as $column) {
            if ($column === '_id') {
                continue;
            }

            if (array_key_exists($column, $property_list)) {
                if (is_null($property_list[$column])) {
                    $update_list[$column] = cb_queryf($database, '@S = null',
                        $column);
                } else {
                    $update_list[$column] = cb_queryf($database, '@S = "@S"',
                        $column, $property_list[$column]);
                }
            }
        }
        $update_string = implode(', ', $update_list);
        $where_string = cb_queryf($database, "_id = '@S'",
            $folder_relation_id);
        $query = sprintf('UPDATE %s SET %s WHERE %s',
            $this->_table_name, $update_string, $where_string);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Return Folder Relation ID
        return $folder_relation_id;
    }

    /**
     * Remove Folder Relation
     *
     * @param int  $folder_relation_id //Folder Relation ID
     * @param BOOL $result             //Result
     */
    function remove($folder_relation_id)
    {
        //Get Database
        $database =& $this->_getDatabase();

        //Create Column List
        $column_list = implode(',', $this->_getColumnList());

        //Create Query
        $where_string = cb_queryf($database, "_id = '@S'", $folder_relation_id);
        $query = sprintf('DELETE FROM %s WHERE %s', $this->_table_name,
            $where_string);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Delete From Folder Relation List
        foreach (array_keys($this->_list) as $key) {
            if (in_array($folder_relation_id, $this->_list[$key])) {
                unset($this->_list[$key][$folder_relation_id]);
            }
        }

        return true;
    }

    /**
     * Remove Multiple Folder Relation
     *
     * @param array $folder_relation_id_list //Folder Relation ID List
     * @param array $folder_id               //Folder ID
     * @param BOOL  $result                  //Result
     */
    function removeMulti($folder_relation_id_list, $folder_id = null)
    {
        //Get Database
        $database =& $this->_getDatabase();

        //Create Column List
        $column_list = implode(',', $this->_getColumnList());

        //Create Query
        foreach ($folder_relation_id_list as $key => $value) {
            $folder_relation_id_list[$key] = cb_queryf($database, "'@S'",
                $value);
        }
        $folder_relation_id_string = implode(',', $folder_relation_id_list);
        //$where_string = cb_queryf($database, '_id IN(@S)', $folder_relation_id_string);
        $where_string = '_id IN(' . $folder_relation_id_string . ')';
        if ( ! is_null($folder_id)) {
            $where_string .= " AND ";
            $where_string .= cb_queryf($database,
                sprintf(" %s = '@S' ", GRN_WORKFLOW_COLUMN_FOLDER), $folder_id);
        }
        $query = sprintf('DELETE FROM %s WHERE %s', $this->_table_name,
            $where_string);
        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Delete From Form List
        $folder_relation_id = current($folder_relation_id_list);
        foreach (array_keys($this->_list) as $key) {
            if (in_array($folder_relation_id, $this->_list[$key])) {
                foreach ($folder_relation_id_list as $folder_relation_id) {
                    unset($this->_list[$key][$folder_relation_id]);
                }
            }
        }

        return true;
    }

    /**
     * Remove All Folder Relation
     *
     * @param int  $folder_id //Folder ID
     * @param BOOL $result    //Result
     */
    function removeAll($folder_id = null)
    {
        //Get Database
        $database =& $this->_getDatabase();

        //Create Column List
        $column_list = implode(',', $this->_getColumnList());

        //Create Query
        $where_string = "";
        if ( ! is_null($folder_id)) {
            $where_string = cb_queryf($database, "col_petition = '@S'",
                $folder_id);
            $where_string = $where_string . ' AND ' . cb_queryf($database,
                    'col_list_index <> 0');
        } else {
            $where_string = cb_queryf($database, 'col_list_index <> 0');
        }
        $query = sprintf('DELETE FROM %s WHERE %s', $this->_table_name,
            $where_string);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Delete From Form List
        unset($this->_list[$folder_id]);

        return true;
    }

    /**
     * Change Folder Relation Order
     *
     * @param int  $folder_relation_id_list //Folder Relation ID List
     * @param int  $start_index             //Start Index Number
     * @param BOOL $result                  //Result
     */
    function changeOrder($folder_relation_id_list, $start_index = 0)
    {
        //Set New List Index
        $list_index = $start_index;
        $property_list = [];
        foreach ($folder_relation_id_list as $folder_relation_id) {
            $property_list[GRN_WORKFLOW_COLUMN_LIST_INDEX] = $list_index;
            $this->update($folder_relation_id, $property_list);
            $list_index++;
        }

        return true;
    }
}


