<?php
/**
 * Workflow Application Folder Relation Base Class
 *
 * @author  SHIMADA Kunihiko 2006/1
 * @version 1.0
 * @package grn.workflow
 */

/** Workflow Application **/
require_once('workflow/resources.csp');
require_once('grn/application.csp');

/**
 * Folder Relation Manager Base Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_FolderRelation_Manager_Base
{
    /** Table Name **/
    var $_table_name = null;

    /** Folder Relation List **/
    var $_list = [];

    /** Folder Relation List(with Extra Information) **/
    var $_listEx = [];

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
        $this->_table_name = 'tab_grn_workflow_folderrelation';
    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_FolderRelation_Manager_Base $instance                  //Instance of GRN_Workflow_FolderRelation_Manager_Base
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_FolderRelation_Manager_Base();
        }

        return $_instance;
    }

    /**
     * Get Database
     *
     * @return object $table                     //GRN_Workflow_FolderRelation Table Information
     */
    function _getDatabase()
    {
        static $database = null;
        if (is_null($database)) {
            $app_locator = GRN_ApplicationLocator::instance();
            $database = $app_locator->getConnection('workflow');
        }

        return $database;
    }

    /**
     * Get Table Name
     *
     * @params  string $class_name
     *
     * @return string  $table_name
     */
    function _getTableName($class_name)
    {
        $table_name = sprintf('tab_%s', strtolower($class_name));

        return $table_name;
    }

    /**
     * Get Column List
     *
     * @param  string $class_name //Class Name
     *
     * @return array  $column_name_list          //Column Name List
     */
    function &_getColumnList($class_name = null, $set_alias = true)
    {

        //Check Class Name
        $column_prefix = null;
        if (is_null($class_name)) {
            //Default Class Name and Table Name
            $class_name = GRN_WORKFLOW_TABLE_FOLDERRELATION;
        } else {
            //Set Column Prefix
            switch ($class_name) {
                case GRN_WORKFLOW_TABLE_FOLDER:
                    $column_prefix = "f";
                    break;
                case GRN_WORKFLOW_TABLE_FOLDERRELATION:
                    $column_prefix = "r";
                    break;
                case GRN_WORKFLOW_TABLE_PETITION:
                    $column_prefix = "p";
                    break;
            }
        }

        //Create Column Name List
        require_once('workflow/table.csp');
        $column_list = get_class_vars($class_name);
        foreach (array_keys($column_list) as $column_name) {
            if (strpos($column_name, 'col_') === 0) {
                if (is_null($column_prefix)) {
                    $column_name_list[] = $column_name;
                } elseif ($set_alias) {
                    $column_name_list[] = sprintf('%s.%s %s_%s', $column_prefix,
                        $column_name, $column_prefix, $column_name);
                } else {
                    $column_name_list[] = sprintf('%s.%s', $column_prefix,
                        $column_name);
                }
            }
        }
        if (is_null($column_prefix)) {
            $column_name_list[] = '_id';
        } elseif ($set_alias) {
            $column_name_list[] = sprintf('%s._id %s__id', $column_prefix,
                $column_prefix);
        } else {
            $column_name_list[] = sprintf('%s._id', $column_prefix);
        }

        return $column_name_list;
    }

    function _replaceSetNullColumnWithAlias(
        & $column_list,
        & $join,
        $set_null,
        $table_alias
    ) {
        assert('is_array($column_list)');

        $join = "";
        if (is_array($set_null)) {
            foreach ($set_null as $key => $value) {
                $user_alias = "u_" . $key;
                $column = $table_alias . "." . $value;
                $alias = $table_alias . "_" . $value;
                $column_alias = $column . " " . $alias;

                $column_key = array_search($column_alias, $column_list);
                if ($key !== false) {
                    $column_list[$column_key]
                        = sprintf('CASE WHEN %s.col_deleted IS NULL THEN %s END AS %s',
                        $user_alias, $column, $alias);
                    $join .= " LEFT JOIN tab_cb_user AS {$user_alias} ON {$table_alias}.{$value}={$user_alias}._id";
                }
            }
        }

    }

    /**
     * Get Folder Relation
     *
     * @param  int  $folder_relation_id //Folder Relation ID
     * @param  int  $folder_id          //Folder ID
     * @param  bool $refresh            //Refresh Cache
     * @param  int  $lock_mode          //Lock Mode
     *
     * @return array  $folder_relation          //Folder Relation Information Array
     */
    function &get(
        $folder_relation_id,
        $folder_id = null,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Check Arguments
        cb_trim_check($folder_relation_id,
            E_GRN_WRKF_FOLDERRELATION_INVALID_USER_ID); //FolderRelation ID

        //Get Folder Relation List
        $folder_relation_list =& $this->getList($folder_id, $refresh,
            $lock_mode);

        //Get Folder Relation
        if ( ! array_key_exists($folder_relation_id, $folder_relation_list)) {
            $ret = false;

            return $ret;
        }

        //Return Folder Relation
        return $folder_relation_list[$folder_relation_id];
    }

    /**
     * Get Folder Relation(with Extra Information)
     *
     * @param  int  $folder_relation_id //Folder Relation ID
     * @param  int  $folder_id          //Folder ID
     * @param  bool $refresh            //Refresh Cache
     * @param  int  $lock_mode          //Lock Mode
     *
     * @return array  $folder_relation          //Folder Relation Information Array
     */
    function &getEx(
        $folder_relation_id,
        $folder_id = null,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Check Arguments
        cb_trim_check($folder_relation_id,
            E_GRN_WRKF_FOLDERRELATION_INVALID_USER_ID); //FolderRelation ID

        //Get Folder Relation List
        $folder_relation_list =& $this->getListEx($folder_id, $refresh,
            $lock_mode);

        //Get Folder Relation
        if ( ! array_key_exists($folder_relation_id, $folder_relation_list)) {
            $ret = false;

            return $ret;
        }

        //Return Folder Relation
        return $folder_relation_list[$folder_relation_id];
    }

    /**
     * Get Folder Relation List
     *
     * @param  int  $folder_id //Folder ID
     * @param  int  $offset    //Offset
     * @param  int  $limit     //Limit
     * @param  bool $refresh   //Refresh Cache
     * @param  int  $lock_mode //Lock Mode
     *
     * @return array  $folder_relation_list     //Folder Relation Information List
     */
    function &getList(
        $folder_id,
        $offset = 0,
        $limit = -1,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $folder_relation_list = [];

        //Check Arguments
        cb_trim_check($folder_id,
            E_GRN_WRKF_FOLDER_INVALID_FOLDER_ID); //Folder ID

        //Get Folder Relation List From Cache
        $cached = false;
        if ( ! $refresh) {
            if (array_key_exists($folder_id, $this->_list)) {
                if (is_array($this->_list[$folder_id])) {
                    $folder_relation_list =& $this->_list[$folder_id];
                    $cached = true;
                }
            }
        } else {
            $this->_list[$folder_id] = [];
        }

        //Get Folder Relation List From Database
        if ( ! $cached || $refresh) {
            //Get Database
            $database =& $this->_getDatabase();

            //Create Column List
            $column_list = implode(',',
                $this->_getColumnList(GRN_WORKFLOW_TABLE_FOLDERRELATION,
                    false));

            //Create Condition
            $condition_list = [];
            if ($folder_id != 0) {
                $condition_list[] = cb_queryf($database, 'r.col_folder = "@S"',
                    $folder_id);
            }
            $condition = implode(' AND ', $condition_list);
            if ($condition) {
                $condition = 'WHERE ' . $condition;
            }

            //Create Order By Column
            $order_by = 'ORDER BY col_list_index, _id';

            $join
                = " INNER JOIN tab_grn_workflow_folder AS f ON r.col_folder=f._id";
            $join .= " INNER JOIN tab_cb_user AS u ON (f.col_user=u._id AND u.col_deleted IS NULL)";

            //Create Query
            $query = sprintf('SELECT %s FROM %s AS r %s %s %s', $column_list,
                $this->_table_name, $join, $condition, $order_by);
            $query = $database->select_format($query, $offset, $limit,
                $lock_mode);

            //Execute Query
            $result = $database->query($query);
            if ($result === false) {
                //Throw Query Error
                $database->throwError(['query' => 'query failed: ' . $query]);
            }

            //Update Folder Relation List
            $count = $database->num_rows($result);
            for ($i = 0; $i < $count; $i++) {
                $row = $database->fetch_assoc($result);
                $this->_list[$folder_id][$row['_id']] = $row;
            }
            $database->free_result($result);

            if ($count > 0) {
                $folder_relation_list =& $this->_list[$folder_id];
            }
        }

        //Return Folder Relation List
        return $folder_relation_list;
    }

    /**
     * Get Folder Relation List(with Extra Information)
     *
     * @param  int  $folder_id //Folder ID
     * @param  int  $offset    //Offset
     * @param  int  $limit     //Limit
     * @param  bool $refresh   //Refresh Cache
     * @param  int  $lock_mode //Lock Mode
     *
     * @return array  $folder_relation_list     //Folder Relation Information List
     */
    function &getListEx(
        $folder_id,
        $offset = 0,
        $limit = -1,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $folder_relation_list = [];

        //Check Arguments
        cb_trim_check($folder_id,
            E_GRN_WRKF_FOLDER_INVALID_FOLDER_ID); //Folder ID

        //Get Folder Relation List From Cache
        $cached = false;
        if ( ! $refresh) {
            if (array_key_exists($folder_id, $this->_listEx)) {
                if (is_array($this->_listEx[$folder_id])) {
                    $folder_relation_list =& $this->_listEx[$folder_id];
                    $cached = true;
                }
            }
        } else {
            $this->_listEx[$folder_id] = [];
        }

        //Get Folder Relation List From Database
        if ( ! $cached || $refresh) {
            //Get Database
            $database =& $this->_getDatabase();

            //Create Column List
            $relation_column_list
                = $this->_getColumnList(GRN_WORKFLOW_TABLE_FOLDERRELATION);
            $petition_column_list
                = $this->_getColumnList(GRN_WORKFLOW_TABLE_PETITION);
            $set_null = [
                'col_creator',
                'col_modifier',
                'col_agent_transactor',
                'col_agent_user',
                'col_transactor',
                'col_user'
            ];
            $left_join = "";
            $this->_replaceSetNullColumnWithAlias($petition_column_list,
                $left_join, $set_null, "p");
            $column_list = array_merge($relation_column_list,
                $petition_column_list);
            $column_list = implode(',', $column_list);

            //Create Table Name
            $table_name_relation
                = $this->_getTableName(GRN_WORKFLOW_TABLE_FOLDERRELATION);
            $table_name_petition
                = $this->_getTableName(GRN_WORKFLOW_TABLE_PETITION);

            //Create Join
            $join_list = [];
            $join_list[] = "tab_grn_workflow_folder AS f ON r.col_folder=f._id";
            $join_list[]
                = "tab_cb_user AS u ON (f.col_user=u._id AND u.col_deleted IS NULL)";
            $join_list[] = sprintf('%s p ON p._id = r.%s', $table_name_petition,
                GRN_WORKFLOW_COLUMN_PETITION);
            $join = implode(' INNER JOIN ', $join_list);
            if ($join) {
                $join = 'INNER JOIN ' . $join;
            }

            $join .= $left_join;

            //Create Condition
            $condition_list = [];
            if ($folder_id !== 0) {
                $condition_list[] = cb_queryf($database, 'r.col_folder = "@S"',
                    $folder_id);
            }
            $condition = implode(' AND ', $condition_list);
            if ($condition) {
                $condition = 'WHERE ' . $condition;
            }

            //Create Order By Column
            $order_by = 'ORDER BY r.col_list_index, r._id';

            //Create Query
            $query = sprintf('SELECT %s FROM %s r %s %s %s', $column_list,
                $this->_table_name, $join, $condition, $order_by);
            $query = $database->select_format($query, $offset, $limit,
                $lock_mode);

            //Execute Query
            $result = $database->query($query);
            if ($result === false) {
                //Throw Query Error
                $database->throwError(['query' => 'query failed: ' . $query]);
            }

            //Update Folder Relation List
            $count = $database->num_rows($result);
            for ($i = 0; $i < $count; $i++) {
                $row = $database->fetch_assoc($result);
                $this->_listEx[$folder_id][$row['r__id']] = $row;
            }
            $database->free_result($result);

            if ($count > 0) {
                $folder_relation_list =& $this->_listEx[$folder_id];
            }
        }

        //Return Folder Relation List
        return $folder_relation_list;
    }

    /**
     * Get Folder Relation List By Petition ID
     *
     * @param  int $petition_ids //Petition ID (List)
     * @param  int $folder_id    //Folder ID
     * @param  int $offset       //Offset
     * @param  int $limit        //Limit
     * @param  int $lock_mode    //Lock Mode
     *
     * @return array  $folder_relation          //Folder Relation Information Array
     */
    function getListByPetitionId(
        $petition_ids,
        $folder_id = null,
        $offset = 0,
        $limit = -1,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Folder Relation List From Database
        $folder_relation_list = [];

        //Get Database
        $database = $this->_getDatabase();

        //Petition ID
        if (is_array($petition_ids)) {
            $escape_pids = [];
            foreach ($petition_ids as $pid) {
                $pid = cb_queryf($database, '"@S"', $pid);
                $escape_pids[$pid] = $pid;
            }
            $petition_id_string = implode(',', $escape_pids);
        } else {
            $petition_id_string = cb_queryf($database, '"@S"', $petition_ids);
        }

        //Create Column List
        $column_list = implode(',',
            $this->_getColumnList(GRN_WORKFLOW_TABLE_FOLDERRELATION, false));
        //Create Condition
        $condition_list = [];
        $condition_list[] = sprintf(" r.%s IN(%s) ",
            GRN_WORKFLOW_COLUMN_PETITION, $petition_id_string);
        if ( ! is_null($folder_id)) {
            $condition_list[] = cb_queryf($database,
                sprintf(' r.%s = "@S" ', GRN_WORKFLOW_COLUMN_FOLDER),
                $folder_id);
        }
        $condition = implode(' AND ', $condition_list);
        if ($condition) {
            $condition = 'WHERE ' . $condition;
        }

        //Create Order By Column
        $order_by = 'ORDER BY r.col_list_index, r._id';

        $join
            = " INNER JOIN tab_grn_workflow_folder AS f ON r.col_folder=f._id";
        $join .= " INNER JOIN tab_cb_user AS u ON (f.col_user=u._id AND u.col_deleted IS NULL)";

        //Create Query
        $query = sprintf('SELECT %s FROM %s AS r %s %s', $column_list,
            $this->_table_name, $join, $condition, $order_by);
        $query = $database->select_format($query, $offset, $limit, $lock_mode);
        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Update Folder Relation List
        $count = $database->num_rows($result);
        for ($i = 0; $i < $count; $i++) {
            $row = $database->fetch_assoc($result);
            $folder_relation_list[$row['_id']] = $row;
        }
        $database->free_result($result);

        //Return Folder Relation
        return $folder_relation_list;
    }

    /**
     * Get Folder Relation Count
     *
     * @param  int  $folder_id //Folder ID
     * @param  bool $refresh   //Refresh Cache
     * @param  int  $lock_mode //Lock Mode
     *
     * @return int    $folder_relation_count    //Folder Relation Count
     */
    function getCount(
        $folder_id,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Check Arguments
        cb_trim_check($folder_id,
            E_GRN_WRKF_FOLDER_INVALID_FOLDER_ID); //Folder ID

        //Get Folder Relation List
        $folder_relation_list = $this->getList($folder_id, $lock_mode,
            $refresh);

        //Return Folder Relation Count
        return count($folder_relation_list);
    }
}


