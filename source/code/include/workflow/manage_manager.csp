<?php
/**
 * Workflow Application Manage Manager Class
 *
 * @author  SHIMADA Kunihiko 2006/2
 * @version 1.0
 * @package grn.workflow
 */

/** Workflow Application **/
require_once('workflow/resources.csp');
require_once('workflow/manage_manager_base.csp');

/**
 * Workflow Category Manage Manager Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_Category_Manage_Manager
    extends GRN_Workflow_Category_Manage_Manager_Base
{
    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
        //Get Parent Instance
        $parent = parent::getInstance();

        //Sync Parent Table and Access Cache
        $this->_table_list =& $parent->_table_list;
        $this->_manage_cache_list =& $parent->_access_cache_list;

    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_Category_Manage_Manager
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_Category_Manage_Manager();
        }

        return $_instance;
    }

    /**
     * Create Manage Object
     *
     * @param  object $category       //Category Object
     * @param  object $target         //Target Object
     * @param  string $target_type    //Table Type(user/group/static_role/dynamic_role)
     * @param  object $authority_list //Authority List
     *
     * @return int    $manage                    //Manage ID
     */
    function create(&$category, &$target, $target_type, $authority_list)
    {
        //Get Database
        $database = $this->_getDatabase();

        //Get Table Name
        $table_name = $this->_getTableName($target_type);

        //Set Category and Target Object
        $insert_list[GRN_WORKFLOW_COLUMN_OBJECT] = cb_queryf($database, '"@S"',
            $category['_id']);
        if ($target_type == GRN_WORKFLOW_ACCESS_TARGET_TYPE_DYNAMIC_ROLE) {
            $insert_list[GRN_WORKFLOW_COLUMN_TARGET] = cb_queryf($database,
                '"@S"', $target);
        } else {
            $insert_list[GRN_WORKFLOW_COLUMN_TARGET] = cb_queryf($database,
                '"@S"', $target->getOID());
        }

        //Set Authority List
        foreach ($authority_list as $authority_id => $authority_value) {
            $insert_list['col_authority_' . $authority_id]
                = cb_queryf($database, '"@S"', $authority_value);
        }

        $column_string = implode(', ', array_keys($insert_list));
        $value_string = implode(', ', $insert_list);
        $query = sprintf('INSERT %s(%s) VALUES (%s)', $table_name,
            $column_string, $value_string);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Clear Manage Cache
        $this->clearManageCache();

        //Return Manage ID
        $manage_id = $database->get_insert_id();

        return $manage_id;
    }

    /**
     * Update Manage
     *
     * @param  array  $manage_id      //Manage ID
     * @param  object $target         //Target Object
     * @param  string $target_type    //Table Type(user/group/static_role/dynamic_role)
     * @param  object $authority_list //Authority List
     *
     * @return int    $Manage_id                //Manage ID
     */
    function update(
        $manage_id,
        &$category,
        &$target,
        $target_type,
        $authority_list
    ) {
        //Get Database
        $database =& $this->_getDatabase();

        //Get Table Name
        $table_name = $this->_getTableName($target_type);

        //Set Category and Target Object
        $update_list[GRN_WORKFLOW_COLUMN_OBJECT] = cb_queryf($database,
            sprintf('%s = "@S"', GRN_WORKFLOW_COLUMN_OBJECT), $category['_id']);
        if ($target_type == GRN_WORKFLOW_ACCESS_TARGET_TYPE_DYNAMIC_ROLE) {
            $update_list[GRN_WORKFLOW_COLUMN_TARGET] = cb_queryf($database,
                sprintf('%s = "@S"', GRN_WORKFLOW_COLUMN_TARGET), $target);
        } else {
            $update_list[GRN_WORKFLOW_COLUMN_TARGET] = cb_queryf($database,
                sprintf('%s = "@S"', GRN_WORKFLOW_COLUMN_TARGET),
                $target->getOID());
        }

        //Set Authority List
        foreach ($authority_list as $authority_id => $authority_value) {
            $authority_column = 'col_authority_' . $authority_id;
            $update_list[$authority_column] = cb_queryf($database, '@S = "@S"',
                $authority_column, $authority_value);
        }

        $update_string = implode(', ', $update_list);
        $where_string = cb_queryf($database, "_id = '@S'", $manage_id);
        $query = sprintf('UPDATE %s SET %s WHERE %s', $table_name,
            $update_string, $where_string);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Clear Manage Cache
        $this->clearManageCache();

        //Return Manage ID
        $manage_id = $database->get_insert_id();

        return $manage_id;
    }

    /**
     * Remove Manage
     *
     * @param int    $category_id //Category ID
     * @param int    $target_id   //Target ID
     * @param string $target_type //Table Type(user/group/static_role)
     * @param BOOL   $result      //Result
     */
    function remove($category_id, $target_id, $target_type)
    {
        //Get Database
        $database =& $this->_getDatabase();

        //Get Table Name
        $table_name = $this->_getTableName($target_type);

        //Create Query
        $where_list = [
            cb_queryf($database,
                sprintf('%s = "@S"', GRN_WORKFLOW_COLUMN_TARGET), $target_id),
            cb_queryf($database,
                sprintf('%s = "@S"', GRN_WORKFLOW_COLUMN_OBJECT), $category_id),
        ];
        $where_string = implode(' AND ', $where_list);

        $query = sprintf('DELETE FROM %s WHERE %s', $table_name, $where_string);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Delete From Manage List
        $this->getList($category_id, $target_type, true);

        return true;
    }

    /**
     * Remove Multiple Manage
     *
     * @param array  $manage_id_list //Manage ID List
     * @param string $target_type    //Table Type(user/group/static_role)
     * @param BOOL   $result         //Result
     */
    function removeMulti($manage_id_list, $target_type)
    {
        //Get Database
        $database =& $this->_getDatabase();

        //Get Table Name
        $table_name = $this->_getTableName($target_type);

        //Create Query
        foreach ($manage_id_list as $key => $value) {
            $manage_id_list[$key] = cb_queryf($database, "'@S'", $value);
        }
        $manage_id_string = implode(',', $manage_id_list);
//        $where_string = cb_queryf($database, '_id IN(@S)', $manage_id_string);
        $where_string = '_id IN(' . $manage_id_string . ')';
        $query = sprintf('DELETE FROM %s WHERE %s', $table_name,
            $where_string);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Delete From Manage List
        $manage_id = current($manage_id_list);
        foreach (array_keys($this->_manage_cache_list) as $key) {
            if (in_array($manage_id, $this->_manage_cache_list[$key])) {
                foreach ($manage_id_list as $manage_id) {
                    unset($this->_manage_cache_list[$key][$manage_id]);
                }
            }
        }

        return true;
    }

    /**
     * Remove All Manage
     *
     * @param int  $category_id //Category ID
     * @param BOOL $result      //Result
     */
    function removeAll($category_id = null)
    {
        //Get Database
        $database =& $this->_getDatabase();

        //Create Query
        $where_string = "";
        if ($category_id == -1) {
            $where_string = sprintf('WHERE %s IS NULL',
                GRN_WORKFLOW_COLUMN_OBJECT);
        } elseif ( ! is_null($category_id)) {
            $where_string = cb_queryf($database,
                sprintf("WHERE %s = '@S'", GRN_WORKFLOW_COLUMN_OBJECT),
                $category_id);
        }

        //Delete From All Manage Table
        foreach ($this->_target_type_list as $target_type) {
            $query = sprintf('DELETE FROM %s %s',
                $this->_getTableName($target_type), $where_string);

            //Execute Query
            $result = $database->query($query);
            if ($result === false) {
                //Throw Query Error
                $database->throwError(['query' => 'query failed: ' . $query]);
            }

            //Delete From Manage List
            unset($this->_manage_cache_list[$category_id]);
        }

        return true;
    }
}

