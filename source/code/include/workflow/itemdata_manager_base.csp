<?php
/**
 * Workflow Application Item Data Base Class
 *
 * @author  Yuichi, Nakamura 2006/01
 * @version 1.0
 * @package grn.workflow
 */

/** Workflow Application **/
require_once('workflow/resources.csp');
require_once('grn/application.csp');

/**
 * Item Data Manager Base Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_ItemData_Manager_Base
{
    /** Table Name **/
    var $_table_name = null;

    /** Item Data List **/
    var $_list = [];

    /** Item Data List(with Extra Information) **/
    var $_listEx = [];

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
        $this->_table_name = 'tab_grn_workflow_itemdata';
    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_ItemData_Manager_Base $instance                  //Instance of GRN_Workflow_ItemData_Manager_Base
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_ItemData_Manager_Base();
        }

        return $_instance;
    }

    /**
     * Get Database
     *
     * @return object $table                     //GRN_Workflow_ItemData Table Information
     */
    function _getDatabase()
    {
        static $database = null;
        if (is_null($database)) {
            $app_locator = GRN_ApplicationLocator::instance();
            $database = $app_locator->getConnection('workflow');
        }

        return $database;
    }

    /**
     * Get Table Name
     *
     * @params  string $class_name
     *
     * @return string  $table_name
     */
    function _getTableName($class_name)
    {
        $table_name = sprintf('tab_%s', strtolower($class_name));

        return $table_name;
    }

    /**
     * Get Column List
     *
     * @param  string $class_name //Class Name
     *
     * @return array  $column_name_list          //Column Name List
     */
    function &_getColumnList($class_name = null)
    {

        //Check Class Name
        $column_prefix = null;
        if (is_null($class_name)) {
            //Default Class Name and Table Name
            $class_name = GRN_WORKFLOW_TABLE_ITEMDATA;
        } else {
            //Set Column Prefix
            switch ($class_name) {
                case GRN_WORKFLOW_TABLE_ITEMDATA:
                    $column_prefix = "d";
                    break;
                case GRN_WORKFLOW_TABLE_ITEMDATAFILE:
                    $column_prefix = "f";
                    break;
                case GRN_WORKFLOW_TABLE_FILE:
                    $column_prefix = "g";
                    break;
                case GRN_WORKFLOW_TABLE_FILEBODY:
                    $column_prefix = "b";
                    break;
            }
        }

        //Create Column Name List
        require_once('grn/file.csp');
        require_once('workflow/table.csp');
        $column_list = get_class_vars($class_name);
        foreach (array_keys($column_list) as $column_name) {
            if (strpos($column_name, 'col_') === 0) {
                if (is_null($column_prefix)) {
                    $column_name_list[] = $column_name;
                } else {
                    $column_name_list[] = sprintf('%s.%s %s_%s', $column_prefix,
                        $column_name, $column_prefix, $column_name);
                }
            }
        }
        if (is_null($column_prefix)) {
            $column_name_list[] = '_id';
        } else {
            $column_name_list[] = sprintf('%s._id %s__id', $column_prefix,
                $column_prefix);
        }

        return $column_name_list;
    }

    /**
     * Get Item Data
     *
     * @param  int   $item_data_id //Item Data ID
     * @param  int   $petition_id  //Petition ID
     * @param  array $column_list  //Column List
     * @param  int   $refresh      //Lock Mode
     * @param  int   $lock_mode    //Lock Mode
     *
     * @return array  $item_data                 //Item Data Information Array
     */
    function &get(
        $item_data_id,
        $petition_id = null,
        $column_list = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Item Data List
        $item_data_list =& $this->getList($petition_id, $column_list, $refresh,
            $lock_mode);

        //Get Item Data
        if ( ! array_key_exists($item_data_id, $item_data_list)) {
            $ret = false;

            return $ret;
        }

        //Return Item Data
        return $item_data_list[$item_data_id];
    }

    /**
     * Get Item Data Direct
     *
     * @param  int   $item_data_id //Item Data ID
     * @param  array $column_list  //Column List
     * @param  int   $lock_mode    //Lock Mode
     *
     * @return array  $item_data                  //Item Data Information Array
     */
    function getDirect(
        $item_data_id,
        $column_list = [],
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $item_data = [];

        //Get Database
        $database =& $this->_getDatabase();

        //Create Column List
        if (count($column_list) === 0) {
            $column_list = implode(',', $this->_getColumnList());
        } else {
            $column_list = implode(',', $column_list);
        }

        //Create Condition
        $condition_list = [];
        $condition_list[] = cb_queryf($database, "_id = '@S'", $item_data_id);
        $condition = implode(' AND ', $condition_list);
        if ($condition) {
            $condition = 'WHERE ' . $condition;
        }

        //Create Order By Column
        $order_by = 'ORDER BY col_list_index, _id';

        //Create Query
        $query = sprintf('SELECT %s FROM %s %s %s', $column_list,
            $this->_table_name, $condition, $order_by);
        $query = $database->select_format($query, 0, 1, $lock_mode);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Get Item Data
        $item_data = $database->fetch_assoc($result);
        $database->free_result($result);

        //Return Item Data
        return $item_data;
    }

    /**
     * Get Item Data(with Extra Initem_dataation)
     *
     * @param  int   $item_data_id //Item Data ID
     * @param  int   $petition_id  //Petition ID
     * @param  array $column_list  //Column List
     * @param  int   $refresh      //Lock Mode
     * @param  int   $lock_mode    //Lock Mode
     *
     * @return array  $item_data                 //Item Data Initem_dataation Array
     */
    function &getEx(
        $item_data_id,
        $petition_id = null,
        $column_list = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Item Data List
        $item_data_list =& $this->getListEx($petition_id, $column_list,
            $refresh, $lock_mode);

        //Get Item Data
        if ( ! array_key_exists($item_data_id, $item_data_list)) {
            $ret = false;

            return $ret;
        }

        //Return Item Data
        return $item_data_list[$item_data_id];
    }

    /**
     * Get Item Data Direct (with Extra Information)
     *
     * @param  int   $item_data_id //Item Data ID
     * @param  array $column_list  //Column List
     * @param  int   $lock_mode    //Lock Mode
     *
     * @return array  $item_data                  //Item Data Information Array
     */
    function &getDirectEx(
        $item_data_id,
        $column_list = [],
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $item_data = [];

        //Get Database
        $database =& $this->_getDatabase();

        //Create Column List
        if (count($column_list) === 0) {
            $item_data_column_list
                = $this->_getColumnList(GRN_WORKFLOW_TABLE_ITEMDATA);
            $item_data_file_column_list
                = $this->_getColumnList(GRN_WORKFLOW_TABLE_ITEMDATAFILE);
            $column_list = array_merge($item_data_column_list,
                $item_data_file_column_list);
            $column_list = implode(',', $column_list);
        } else {
            $column_list = implode(',', $column_list);
        }
        $column_list .= ',item.col_code AS d_col_code';
        //Create Table Name
        $table_name_item_data
            = $this->_getTableName(GRN_WORKFLOW_TABLE_ITEMDATA);
        $table_name_item_data_file
            = $this->_getTableName(GRN_WORKFLOW_TABLE_ITEMDATAFILE);

        //Create Join
        $join_list = [];
        $join_list[] = sprintf('%s f ON d._id = f.col_item_data',
            $table_name_item_data_file);
        $join = implode(' LEFT JOIN ', $join_list);
        if ($join) {
            $join = 'LEFT JOIN ' . $join;
        }

        //Create Condition
        $condition_list = [];
        $condition_list[] = cb_queryf($database, 'd._id = "@S"', $item_data_id);
        $condition = implode(' AND ', $condition_list);
        if ($condition) {
            $condition = 'WHERE ' . $condition;
        }

        //Create Order By Column
        $order_by = 'ORDER BY d.col_list_index, d._id, f._id';

        //Create Query
        $query = sprintf('SELECT %s FROM %s d %s %s %s', $column_list,
            $this->_table_name, $join, $condition, $order_by);
        $query = $database->select_format($query, 0, -1, $lock_mode);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Update Item Data List
        $count = $database->num_rows($result);
        for ($i = 0; $i < $count; $i++) {
            $row = $database->fetch_assoc($result);

            if ($i == 0) {
                $item_data = $row;
                $item_data['files'] = [];
            }

            $item_data['files'][$row['f__id']] = $row;
        }
        $database->free_result($result);

        //Return Item Data
        return $item_data;
    }

    /**
     * Get Item Data List
     *
     * @param  int   $petition_id //Petition ID
     * @param  array $column_list //Column List
     * @param  bool  $refresh     //Refresh Cache
     * @param  int   $lock_mode   //Lock Mode
     *
     * @return array  $item_data_list            //Item Data Information List
     */
    function &getList(
        $petition_id = null,
        $column_list = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $item_data_list = [];

        //Check Arguments
        $petition_id = is_null($petition_id) ? 0 : $petition_id;

        //Get Petition List From Cache
        $cached = false;
        if ( ! $refresh) {
            if (array_key_exists($petition_id, $this->_list)) {
                if (is_array($this->_list[$petition_id])) {
                    $item_data_list =& $this->_list[$petition_id];
                    $cached = true;
                }
            }
        } else {
            $this->_list[$petition_id] = [];
        }

        //Get Item Data List From Database
        if ( ! $cached || $refresh) {
            //Get Database
            $database = $this->_getDatabase();

            //Create Column List
            if (count($column_list) === 0) {
                $column_list = $this->_getColumnList();
            }

            foreach ($column_list as $key => $column) {
                $column_list[$key] = 'd.' . $column;
            }
            $column_list = implode(',', $column_list);

            $column_list .= ',item.col_code AS col_code';

            $table_name_item = $this->_getTableName(GRN_WORKFLOW_TABLE_ITEM);
            $join
                = sprintf('LEFT JOIN %s item ON item._id = d.col_item',
                $table_name_item);

            //Create Condition
            $condition_list = [];
            if ($petition_id != 0) {
                $condition_list[] = cb_queryf($database,
                    'd.col_petition = "@S"', $petition_id);
            }
            $condition = implode(' AND ', $condition_list);
            if ($condition) {
                $condition = 'WHERE ' . $condition;
            }

            //Create Order By Column
            $order_by = 'ORDER BY d.col_list_index, d._id';

            //Create Query
            $query = sprintf('SELECT %s FROM %s d %s %s %s', $column_list,
                $this->_table_name, $join, $condition, $order_by);
            $query = $database->select_format($query, 0, -1, $lock_mode);

            //Execute Query
            $result = $database->query($query);
            if ($result === false) {
                //Throw Query Error
                $database->throwError(['query' => 'query failed: ' . $query]);
            }

            //Update Item Data List
            $count = $database->num_rows($result);
            for ($i = 0; $i < $count; $i++) {
                $row = $database->fetch_assoc($result);
                //Set the default item code for customization
                $code = cb_at($row, 'col_code', '');
                if (strlen($code) == 0) {
                    $row['col_code'] = '$' . ($i + 1);
                }
                $this->_list[$petition_id][$row['_id']] = $row;
            }
            $database->free_result($result);

            if ($count > 0) {
                $item_data_list =& $this->_list[$petition_id];
            }
        }

        //Return Item Data List
        return $item_data_list;
    }

    /**
     * Get Item Data List
     *
     * @param  int   $petition_id //Petition ID
     * @param  array $column_list //Column List
     * @param  bool  $refresh     //Refresh Cache
     * @param  int   $lock_mode   //Lock Mode
     *
     * @return array  $item_data_list            //Item Data Information List
     */
    function &getListEx(
        $petition_id = null,
        $column_list = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $item_data_list = [];

        //Check Arguments
        $petition_id = is_null($petition_id) ? 0 : $petition_id;

        //Get Item Data List From Cache
        $cached = false;
        if ( ! $refresh) {
            if (array_key_exists($petition_id, $this->_listEx)) {
                if (is_array($this->_listEx[$petition_id])) {
                    $item_data_list =& $this->_listEx[$petition_id];
                    $cached = true;
                }
            }
        } else {
            $this->_listEx[$petition_id] = [];
        }

        //Get Item Data List From Database
        if ( ! $cached || $refresh) {
            //Get Database
            $database = $this->_getDatabase();

            //Create Column List
            if (count($column_list) === 0) {
                $item_data_column_list
                    = $this->_getColumnList(GRN_WORKFLOW_TABLE_ITEMDATA);
                $item_data_file_column_list
                    = $this->_getColumnList(GRN_WORKFLOW_TABLE_ITEMDATAFILE);
                $column_list
                    = array_merge($item_data_column_list,
                    $item_data_file_column_list);
                $column_list = implode(',', $column_list);
            } else {
                $column_list = implode(',', $column_list);
            }
            $column_list .= ',item.col_code AS d_col_code';

            //Create Table Name
            $table_name_item_data
                = $this->_getTableName(GRN_WORKFLOW_TABLE_ITEMDATA);
            $table_name_item_data_file
                = $this->_getTableName(GRN_WORKFLOW_TABLE_ITEMDATAFILE);
            $table_name_item
                = $this->_getTableName(GRN_WORKFLOW_TABLE_ITEM);

            //Create Join
            $join_list = [];
            $join_list[] = sprintf('%s f ON d._id = f.col_item_data',
                $table_name_item_data_file);
            $join_list[] = sprintf('%s item ON item._id = d.col_item',
                $table_name_item);
            $join = implode(' LEFT JOIN ', $join_list);
            if ($join) {
                $join = 'LEFT JOIN ' . $join;
            }

            //Create Condition
            $condition_list = [];
            if ($petition_id != 0) {
                $condition_list[] = cb_queryf($database,
                    'd.col_petition = "@S"', $petition_id);
            }
            $condition = implode(' AND ', $condition_list);
            if ($condition) {
                $condition = 'WHERE ' . $condition;
            }

            //Create Order By Column
            $order_by = 'ORDER BY d.col_list_index, d._id, f._id';

            //Create Query
            $query
                = sprintf('SELECT %s FROM %s d FORCE INDEX(idx_petition_list_index) %s %s %s',
                $column_list, $this->_table_name, $join, $condition, $order_by);
            $query = $database->select_format($query, 0, -1, $lock_mode);

            //Execute Query
            $result = $database->query($query);
            if ($result === false) {
                //Throw Query Error
                $database->throwError(['query' => 'query failed: ' . $query]);
            }

            //Update Item Data List
            $prev_item_data_id = 0;
            $count = $database->num_rows($result);
            for ($i = 0; $i < $count; $i++) {
                $row = $database->fetch_assoc($result);
                //Set the default item code for customization
                $code = cb_at($row, 'd_col_code', '');
                if (strlen($code) == 0) {
                    $row['d_col_code'] = '$' . ($i + 1);
                }
                if ($prev_item_data_id != $row['d__id']) {
                    $this->_listEx[$petition_id][$row['d__id']] = $row;
                    $this->_listEx[$petition_id][$row['d__id']]['files'] = [];
                }
                $this->_listEx[$petition_id][$row['d__id']]['files'][$row['f__id']]
                    = $row;
                $prev_item_data_id = $row['d__id'];
            }
            $database->free_result($result);

            if ($count > 0) {
                $item_data_list =& $this->_listEx[$petition_id];
            }
        }

        //Return Item Data List
        return $item_data_list;
    }

    /**
     * Get Item Data Count
     *
     * @param  int  $petition_id //Petition ID
     * @param  bool $refresh     //Refresh Cache
     * @param  int  $lock_mode   //Lock Mode
     *
     * @return int    $item_data_count           //Item Data Count
     */
    function getCount(
        $petition_id = null,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Database
        $database =& $this->_getDatabase();

        //Create Condition
        $condition_list = [];
        if ( ! is_null($petition_id)) {
            $condition_list[] = cb_queryf($database, 'col_petition = "@S"',
                $petition_id);
        }
        $condition = implode(' AND ', $condition_list);
        if ($condition) {
            $condition = 'WHERE ' . $condition;
        }

        //Create Query
        $query = sprintf('SELECT COUNT(*) FROM %s %s', $this->_table_name,
            $condition);
        $query = $database->select_format($query, 0, -1, $lock_mode);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }
        $row = $database->fetch_assoc($result);
        $database->free_result($result);

        //Return Item Data Count
        return $row['COUNT(*)'];
    }

    /**
     * @return array
     */
    function &gets(
        $petition_ids = [],
        $column_list = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $item_data_list = [];

        //Check Arguments
        //$petition_id = is_null($petition_id) ? 0 : $petition_id;

        //Get Petition List From Cache
        /*
        $cached = FALSE;
        if (!$refresh)
        {
            if (array_key_exists($petition_id, $this->_list))
            {
                if (is_array($this->_list[$petition_id]))
                {
                    $item_data_list =& $this->_list[$petition_id];
                    $cached = TRUE;
                }
            }
        }
        else
        {
            $this->_list[$petition_id] = array();
        }
        */

        //Get Item Data List From Database
        //if (!$cached || $refresh)
        //{
        //Get Database
        $database =& $this->_getDatabase();

        //Create Column List
        if (count($column_list) === 0) {
            $column_list = implode(',', $this->_getColumnList());
        } else {
            $column_list = implode(',', $column_list);
        }

        //Create Condition
        $condition_list = [];
        //if ($petition_id != 0)
        if (count($petition_ids) > 0) {
            $condition_list[] = cb_queryf($database, 'col_petition IN(@S)',
                implode(",", $petition_ids));
        }
        $condition = implode(' AND ', $condition_list);
        if ($condition) {
            $condition = 'WHERE ' . $condition;
        }

        //Create Order By Column
        $order_by = 'ORDER BY col_list_index, _id';

        //Create Query
        $query = sprintf('SELECT %s FROM %s %s %s', $column_list,
            $this->_table_name, $condition, $order_by);
        $query = $database->select_format($query, 0, -1, $lock_mode);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Update Item Data List
        $count = $database->num_rows($result);
        $item_data_list = [];
        for ($i = 0; $i < $count; $i++) {
            $row = $database->fetch_assoc($result);
            $item_data_list[$row['_id']] = $row;
            //$this->_list[$petition_id][$row['_id']] = $row;
        }
        $database->free_result($result);

        /*
        if ($count > 0)
        {
            $item_data_list =& $this->_list[$petition_id];
        }
        */
        //}

        //Return Item Data List
        return $item_data_list;
    }

    /**
     * Get Petition's Subject Name
     *
     * @param  int $petition_id //Petition ID
     * @param  int $refresh     //Lock Mode
     * @param  int $lock_mode   //Lock Mode
     *
     * @return array  $item_data                 //Item Data Information Array
     */
    function &getSubject(
        $petition_id,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Database
        $database = $this->_getDatabase();

        //Create Condition
        $condition = cb_queryf($database,
            'WHERE col_petition = "@S" AND col_type = "1"', $petition_id);

        //Create Query
        $query
            = sprintf('SELECT col_option_string, col_option_string_type, col_text FROM %s %s',
            $this->_table_name, $condition);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Get Item Data
        $item_data = $database->fetch_assoc($result);
        $database->free_result($result);

        //Get Item Data
        if ( ! $item_data) {
            $ret = false;

            return $ret;
        }

        //Return Item Data
        return $item_data;
    }

    /**
     * Get Petition's Subject Name List
     *
     * @param  int $petition_ids //Petition ID List
     * @param  int $refresh      //Lock Mode
     * @param  int $lock_mode    //Lock Mode
     *
     * @return array  $item_data                 //Item Data Information Array
     */
    function &getSubjectList(
        $petition_ids,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        if ( ! (count($petition_ids) > 0)) {
            return false;
        }

        //Get Database
        $database = $this->_getDatabase();

        //Create Condition
        $condition = cb_queryf($database,
            'WHERE col_petition IN (@S) AND col_type = "1"',
            implode(',', $petition_ids));

        //Create Query
        $query
            = sprintf('SELECT col_option_string, col_option_string_type, col_petition, col_text FROM %s %s',
            $this->_table_name, $condition);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Update Item Data List
        $count = $database->num_rows($result);
        $item_data_list = [];
        for ($i = 0; $i < $count; $i++) {
            $row = $database->fetch_assoc($result);
            $item_data_list[$row['col_petition']] = $row;
        }
        $database->free_result($result);

        //Return Item Data
        return $item_data_list;
    }
}


