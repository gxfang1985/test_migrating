<?php
/**
 * Workflow Application Item Data File Class
 *
 * @author  Yuichi, Nakamura 2006/01
 * @version 1.0
 * @package grn.workflow
 */

/** Workflow Application **/
require_once('workflow/resources.csp');
require_once('workflow/itemdatafile_logic_base.csp');

/**
 * Item Data File Manager Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_ItemDataFile_Logic
    extends GRN_Workflow_ItemDataFile_Logic_Base
{
    //Item Data File Manager Instance
    var $_item_data_file_manager = null;

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {

    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_ItemDataFile_Logic $instance                  //Instance of GRN_Workflow_ItemDataFile_Logic
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_ItemDataFile_Logic();
        }

        return $_instance;
    }

    /**
     * Get Item Data File Logic
     *
     * @return object $item_data_file_manager    //Item Data File Manager
     */
    function _getItemDataFileManager()
    {
        if (is_null($this->_item_data_file_manager)) {
            require_once('workflow/itemdatafile_manager.csp');
            $this->_item_data_file_manager
                = GRN_Workflow_ItemDataFile_Manager::getInstance();
        }

        return $this->_item_data_file_manager;
    }

    /**
     * get Login User
     *
     * @access private
     * @return object $login_user                //Login User
     */
    function _getLoginUser()
    {
        //Get UUM Instance
        global $G_container_base;
        $grn_uum = $G_container_base->getInstance('uum');

        //Get Login User
        $login_user = $grn_uum->getLoginUser();
        if ( ! $login_user) {
            $ret = false;

            return $ret;
        }

        //Return Login User
        return $login_user;
    }

    /**
     * Add Item Data File
     *
     * @param  int   $item_data_id //Item Data ID
     * @param  array $file         //File Information Array
     *
     * @return int    $item_data_file_id         //Item Data File ID
     */
    function add($item_data_id, &$file)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($item_data_id,
            E_GRN_WRKF_ITEMDATA_INVALID_ID);   //Item Data ID
        if ( ! is_a($file, 'CB_ServerFile')) {
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_WRKF_ITEMDATAFILE_NOT_INPUT_NECESSARY);
        }

        // Get Login User
        $login_user = $this->_getLoginUser();
        if ( ! $login_user) {
            $login_user = null;
        }

        //Create File
        require_once('workflow/file.csp');
        $file_manager = new GRN_Workflow_FileManager_Core();
        $file = $file_manager->createFile($login_user, $file, '');

        //Create Property List
        $property_list = [
            GRN_WORKFLOW_COLUMN_ITEM_DATA => $item_data_id,
            GRN_WORKFLOW_COLUMN_FILE      => $file->getOID(),
        ];

        //Create New Item Data File
        $item_data_file_manager = $this->_getItemDataFileManager();
        $item_data_file_id
            = $item_data_file_manager->create($property_list);

        return $item_data_file_id;
    }

    /**
     * Update Item Data File
     *
     * @param  int   $item_data_file_id //Item Data File ID
     * @param  array $file              //File Information Array
     * @param  int   $item_data_id      //Item Data ID
     *
     * @return array  $item_data_file_id         //Item Data File ID
     */
    function update($item_data_file_id, &$file, $item_data_id = null)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($item_data_file_id,
            E_GRN_WRKF_ITEMDATAFILE_INVALID_ID);    //Item Data File ID
        if ( ! is_a($file, 'CB_ServerFile')) {
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_WRKF_ITEMDATAFILE_NOT_INPUT_NECESSARY);
        }

        //Get Item Data File
        $item_data_file =& $this->get($item_data_file_id, $item_data_id);

        // Get Login User
        $login_user =& $this->_getLoginUser();
        if ( ! $login_user) {
            $login_user = null;
        }

        //Get GRN_File Object
        require_once('workflow/file.csp');
        $file_manager = new GRN_Workflow_FileManager_Core();
        $file_table =& $file_manager->getFileTable();
        $file_object
            =& $file_table->getRow($item_data_file[GRN_WORKFLOW_COLUMN_FILE]);

        //Update File
        $file_object->update($login_user, $file, '');

        return $item_data_file_id;
    }

    /**
     * Rollback Item Data File
     *
     * @param  int $item_data_file_id //Item Data File ID
     * @param  int $version           //Varsion
     * @param  int $item_data_id      //Item Data ID
     *
     * @return array  $item_data_file_id         //Item Data File ID
     */
    function rollback($item_data_file_id, $version, $item_data_id = null)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($item_data_file_id,
            E_GRN_WRKF_ITEMDATAFILE_INVALID_ID);            //Item Data File ID
        cb_trim_check($version,
            E_GRN_WRKF_ITEMDATAFILE_NOT_INPUT_NECESSARY);   //Version

        //Get Item Data File
        $item_data_file =& $this->get($item_data_file_id, $item_data_id);

        // Get Login User
        $login_user =& $this->_getLoginUser();
        if ( ! $login_user) {
            $login_user = null;
        }

        //Get GRN_File Object
        require_once('workflow/file.csp');
        $file_manager = new GRN_Workflow_FileManager_Core();
        $file_table =& $file_manager->getFileTable();
        $file_object
            =& $file_table->getRow($item_data_file[GRN_WORKFLOW_COLUMN_FILE]);

        //RollBack File
        $file->rollback($login_user, $version, '');

        return $item_data_file_id;
    }

    /**
     * Delete Item Data File
     *
     * @param int  $item_data_file_id //Item Data File ID
     * @param int  $item_data_id      //Item Data ID
     * @param BOOL $result            //Result
     */
    function delete($item_data_file_id, $item_data_id = null)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($item_data_file_id,
            E_GRN_WRKF_ITEMDATAFILE_INVALID_ID);        //Item Data File ID

        //Get Item Data File
        $item_data_file =& $this->get($item_data_file_id, $item_data_id);

        //Get GRN_File Object
        require_once('workflow/file.csp');
        $file_manager = new GRN_Workflow_FileManager_Core();
        $file_table =& $file_manager->getFileTable();
        $file_object
            =& $file_table->getRow($item_data_file[GRN_WORKFLOW_COLUMN_FILE]);

        //Delete File
        $file_object->delete();

        //Remove Item Data File
        $item_data_file_manager =& $this->_getItemDataFileManager();
        $item_data_file_manager->remove($item_data_file_id);

        return true;
    }

    /**
     * Delete Item Data File Multiple
     *
     * @param int  $item_data_file_id_list //Item Data File ID List
     * @param int  $item_data_id           //Item Data ID
     * @param BOOL $result                 //Result
     */
    function deleteMulti($item_data_file_id_list, $item_data_id = null)
    {
        //Check Argument
        if ( ! is_array($item_data_file_id_list)) {
            //Not Input Necessary
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_ITEMDATAFILE_NOT_INPUT_NECESSARY);
        }

        //Delete Item Data File
        foreach ($item_data_file_id_list as $item_data_file_id) {
            $this->delete($item_data_file_id, $item_data_id);
        }

        return true;
    }

    /**
     * Delete Item Data File All
     *
     * @param int  $item_data_id //Item Data ID
     * @param BOOL $result       //Result
     */
    function deleteAll($item_data_id = null)
    {
        //Get Item Data File List
        $item_data_file_manager = $this->_getItemDataFileManager();
        $item_data_file_list
            =& $item_data_file_manager->getList($item_data_id);

        //Delete GRN_File Object
        require_once('workflow/file.csp');
        $file_manager = new GRN_Workflow_FileManager_Core();
        $file_table = $file_manager->getFileTable();
        foreach (array_keys($item_data_file_list) as $item_data_file_id) {
            $file_object
                = $file_table->getRow($item_data_file_list[$item_data_file_id][GRN_WORKFLOW_COLUMN_FILE]);
            $file_object->delete();
        }

        //Delete Item Data File All
        $item_data_file_manager->removeAll($item_data_id);

        return true;
    }
}


