<?php
/**
 * Workflow Application Path Condition Logic Class
 *
 * @author  Yuichi, Ueyama 2006/1
 * @version 1.0
 * @package grn.workflow
 */

/** Workflow Application **/
require_once('workflow/error_code.csp');

/**
 * Item Manager Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_Path_Condition_Logic
{
    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {

    }


    /**
     * Get Instance
     *
     * @return GRN_Workflow_Path_Condition_Logic $instance                  //Instance of GRN_Workflow_Path_Condition_Logic
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_Path_Condition_Logic();
        }

        return $_instance;
    }


    /**
     * Get Eavaluated Path Steps
     *
     * @param  array $path_steps //Path Steps
     * @param  array $path_skip  //Path Skip (with Extra Information)
     *
     * @return array $operators                  //Item Operators
     */
    function getEvaluatedPathSteps(
        & $path_steps,
        & $path_skip,
        $post_data = [],
        $item_list = []
    ) {
        //Check Arguments
        if ( ! is_array($path_steps) || 0 == count($path_steps)) {
            //Empty Properties
            cb_throw_error(E_GRN_WRKF_EMPTY_PROPERTIES);
        }
        if ( ! is_array($path_skip) || 0 == count($path_skip)) {
            return $path_steps;
        }

        //Eavaluated Path Step Datas
        $evaluated_path_steps = $path_steps;
        foreach (array_keys($path_skip) as $path_condition_id) {
            foreach (
                array_keys($path_skip[$path_condition_id]) as
                $path_condition_step_id
            ) {
                //Get Item Data
                $path_condition_step
                    =& $path_skip[$path_condition_id][$path_condition_step_id];
                if ( ! array_key_exists($path_condition_step['col_item'],
                    $post_data)
                ) {
                    continue;
                }
                $item_data = $post_data[$path_condition_step['col_item']];

                $item_id = $path_condition_step['col_item'];
                switch ($item_list[$item_id]['foreign_key']) {
                    case 'grn.workflow.numeric':
                    case 'grn.workflow.calc_numeric':
                        $check_value = $path_condition_step['col_number'];
                        break;
                    case 'grn.workflow.radio':
                        $check_value = $path_condition_step['col_option'];
                        break;
                    case 'grn.workflow.menu_string':
                        $check_value = $path_condition_step['col_option'];
                        if (isset($item_list[$item_id]['settings']['menu_item_type'])
                            && $item_list[$item_id]['settings']['menu_item_type']
                               == GRN_WORKFLOW_CONDITION_ITEM_MENU_STRING_TYPE_ORGANIZATION
                        ) {
                            global $G_container_base;
                            $uum = $G_container_base->getInstance('uum');
                            $group_info = $uum->getGroupInfo($check_value);
                            $check_value = $group_info['col_name'];
                        }
                        break;
                    case 'grn.workflow.checkbox':
                        $check_value = $path_condition_step['col_operator'];
                        break;
                    default:
                        break;
                }

                require_once('workflow/item_resources.csp');
                $item_util
                    = grn_workflow_get_item_util($path_condition_step['col_foreign_key']);
                if ($item_util->isPathStepCondition($path_condition_step['col_operator'],
                    $check_value, $item_data)
                ) {
                    foreach (
                        array_keys($path_skip[$path_condition_id]) as
                        $path_condition_step_id
                    ) {
                        if ($path_condition_step_id) {
                            $path_condition_step
                                =& $path_skip[$path_condition_id][$path_condition_step_id];
                            unset($evaluated_path_steps[$path_condition_step['col_path_step']]);
                        }
                    }
                    break 2;
                }
            }
        }

        //Return Evaluated Path Steps
        return $evaluated_path_steps;
    }

    /**
     * set Radio Or Menu Item List
     *
     * @param  string $items //radio or menu items
     *
     * @return array   $item_list       //radio or menu item list
     */
    function setRadioOrMenuItemList($items = null)
    {
        cb_trim_check($items, E_GRN_WRKF_EMPTY_PROPERTIES);

        $item_list = [];
        $values = mb_split("\r\n", $items);
        if (is_array($values) && count($values) > 0) {
            foreach ($values as $key => $value) {
                $item_list[$value] = $value;
            }
        }

        if ( ! is_array($item_list) || 0 == count($item_list)) {
            cb_throw_error(E_GRN_WRKF_EMPTY_PROPERTIES);
        }

        return $item_list;
    }

    public function constructGroupListForMenu()
    {
        $group_list = [];
        $this->getChildGroup($group_list, []);
        $group_view = [];
        foreach ($group_list as $group) {
            $group_view[$group['_id']] = $group['col_name']
                                         . (count($group['path']) > 0 ? ' （'
                                                                        . implode(' > ',
                        $group['path']) . '）' : '');
        }

        return $group_view;
    }

    private function getChildGroup(& $group_view, $path, $gid = null)
    {
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $childs = $uum->getChildGroupsInfo($gid);
        foreach ($childs as $key => $child) {
            $childs[$key]['path'] = $path;
            array_push($path, $child['col_name']);
            $group_view[] = $childs[$key];
            $this->getChildGroup($group_view, $path, $child['_id']);
            array_pop($path);
        }

        return true;
    }

    /**
     * get Path Skip
     *
     * @param  int $sid //Skip Id
     *
     * @return array  $skip_row           //Path Skip
     */
    function getPathSkipEx($sid = null)
    {
        cb_trim_check($sid, E_GRN_WRKF_PATH_SKIP_INVALID_ID);

        $skip_row = [];

        $columns['tab_grn_workflow_pathskip'] = [
            '_id'      => '_id',
            'col_form' => 'col_form',
            'col_item' => 'col_item',
        ];
        $columns['tab_grn_workflow_item'] = [
            '_id'              => '_id',
            'col_display_name' => 'col_display_name',
            'col_settings'     => 'col_settings',
            'col_foreign_key'  => 'col_foreign_key'
        ];
        $columns['tab_grn_workflow_form'] = [
            '_id'      => '_id',
            'col_path' => 'col_path',
        ];

        require_once('workflow/path_skip.csp');

        $logic = GRN_Workflow_PathSkips::getInstance();
        $skip_row = $logic->getEx($sid, $columns);

        return $skip_row;
    }


    /**
     * get Condition Operators
     *
     * @param  int $foreign_key //Item Foreign Key
     *
     * @return array  $operators          //Condition Operators
     */
    function getConditionOperators($foreign_key = null)
    {
        cb_trim_check($foreign_key, E_GRN_WRKF_EMPTY_PROPERTIES);

        $operators = [];

        require_once('workflow/item_resources.csp');
        $logic = grn_workflow_get_item_util($foreign_key);
        $operators = $logic->getConditionOperators();

        return $operators;
    }


    /**
     * get List By PathId
     *
     * @param  int $pid //Path Id
     *
     * @return array  $path_rows          //Path Steps
     */
    function getListByPathId($pid = null)
    {
        cb_trim_check($pid, E_GRN_WRKF_INVALID_PATH_ID);

        require_once('workflow/path.csp');
        $logic = GRN_Workflow_PathSteps::getInstance();
        $columns = [
            '_id',
            'col_type',
            'col_acceptance_type',
            'col_role',
            'col_skip',
            'col_deny_change_path',
            'col_change_path',
            'col_applicant'
        ];

        $path_rows = [];
        $acceptance_path_steps = [];
        $path_rows = $logic->getList($pid, null, null, $columns);

        return $path_rows;
    }


    /**
     * set Acceptance Path Steps
     *
     * @param  array $path_rows //Path Steps
     *
     * @return array  $acceptance_path_steps  //Acceptance Path Steps
     */
    function setAcceptancePathSteps($path_rows = null)
    {
        if ( ! is_array($path_rows) || 0 == count($path_rows)) {
            cb_throw_error(E_GRN_WRKF_EMPTY_PROPERTIES);
        }

        $acceptance_path_steps = [];
        foreach ($path_rows as $row) {
            if (GRN_WORKFLOW_CIRCULAR != $row['col_type']) {
                $acceptance_path_steps[$row['_id']] = $row;
            }
        }

        return $acceptance_path_steps;
    }

    /**
     * set Path Step Checked Values To Add
     *
     * @param  array $path_rows //Path Steps
     *
     * @return array  $path_steps_checkeds  //Acceptance Path Steps
     */
    function setPathStepCheckedValuesToAdd($path_rows = null)
    {
        if ( ! is_array($path_rows) || 0 == count($path_rows)) {
            cb_throw_error(E_GRN_WRKF_EMPTY_PROPERTIES);
        }

        $path_steps_checkeds = [];

        foreach ($path_rows as $step) {
            $path_steps_checkeds[$step['_id']] = '1';
        }

        return $path_steps_checkeds;
    }


    /**
     * get List By ConditionId
     *
     * @param  array $condition_id //Path Steps
     *
     * @return array  $step_rows     //Path Condition Steps
     */
    function getListByPathConditionId($pcid = null)
    {
        cb_trim_check($pcid, E_GRN_WRKF_PATH_CONDITION_INVALID_ID);

        $step_rows = [];

        $columns = [
            '_id',
            'col_path_condition',
            'col_path_step',
        ];

        require_once('workflow/path_condition.csp');
        $step_logic = GRN_Workflow_PathConditionSteps::getInstance();
        $step_rows = $step_logic->getListByPathConditionId([$pcid], $columns,
            'col_path_step');

        return $step_rows;
    }


    /**
     * set Path Step Checked Values To Modify
     *
     * @param  array $path_rows //Path Steps
     *
     * @return array  $step_rows  //Path Condition Steps
     */
    function setPathStepCheckedValuesToModify(
        $path_rows = null,
        $step_rows = null
    ) {
        if ( ! is_array($path_rows) || 0 == count($path_rows)) {
            cb_throw_error(E_GRN_WRKF_EMPTY_PROPERTIES);
        }

        $path_steps_checkeds = [];

        foreach ($path_rows as $step) {
            if ( ! (array_key_exists($step['_id'], $step_rows))) {
                $path_steps_checkeds[$step['_id']] = '1';
            }
        }

        return $path_steps_checkeds;
    }


    /**
     * set Path Step Checked Values To Command
     *
     * @param  array $path_rows //Path Steps
     *
     * @return array  $step_rows  //Path Condition Steps
     */
    function setPathStepCheckedValuesToCommand(
        $post_data = null,
        $path_rows = null,
        $checked_steps = null
    ) {
        if ( ! is_array($path_rows) || 0 == count($post_data)) {
            cb_throw_error(E_GRN_WRKF_EMPTY_PROPERTIES);
        }

        if ( ! is_array($checked_steps) || 0 == count($checked_steps)) {
            cb_throw_error(E_GRN_WRKF_EMPTY_PROPERTIES);
        }

        $path_steps_checkeds = [];

        foreach ($path_rows as $step) {
            if ( ! (array_key_exists('pid', $post_data))
                 || in_array($step['_id'], $checked_steps)
            ) {
                $path_steps_checkeds[$step['_id']] = '1';
            }
        }

        return $path_steps_checkeds;
    }

    /**
     * check Category Access
     *
     * @param  int $cid //Category Id
     *
     * @return int   $cid           //Category Id
     */
    function checkCategoryAccess($cid = null)
    {
        cb_trim_check($cid, E_GRN_WRKF_CATEGORY_INVALID_ID);

        $category = ['_id' => $cid];

        require_once('workflow/controller_util.csp');
        $controller_util
            = GRN_Workflow_Category_Controller_Utility::getInstance();
        $controller_util->checkCategoryAccess($cid, true);

        return $cid;
    }


    /**
     * check Category By Form Id
     *
     * @param  int $cid //Category Id
     * @param  int $fid //Form Id
     *
     * @return int   $cid           //Category Id
     */
    function chkCategoryByFormId($cid = null, $fid = null)
    {
        cb_trim_check($cid, E_GRN_WRKF_CATEGORY_INVALID_ID);

        require_once('workflow/form_logic.csp');
        $logic = GRN_Workflow_Form_Logic::getInstance();
        $row = [];
        $row = $logic->get($fid);

        if ( ! is_array($row) || 0 == count($row)) {
            // 目的のフォームが見つかりません
            cb_throw_error(E_GRN_WRKF_FORM_NOT_FOUND);
        }

        if ($cid != $row['col_category']) {
            if ( ! (GRN_WORKFLOW_CATEGORY_NONPARTY_ID == $cid
                    && is_null($row['col_category']))
            ) {
                // 目的のフォームが見つかりません
                cb_throw_error(E_GRN_WRKF_FORM_NOT_FOUND);
            }
        }

        return $cid;
    }


}


