<?php
/**
 * Workflow Application Folder Relation Class
 *
 * @author  SHIMADA Kunihiko 2006/1
 * @version 1.0
 * @package grn.workflow
 */

/** Workflow Application **/
require_once('workflow/resources.csp');
require_once('workflow/folderrelation_logic_base.csp');
require_once('grn/application.csp');

/**
 * Folder Relation Manager Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_FolderRelation_Logic
    extends GRN_Workflow_FolderRelation_Logic_Base
{
    //Folder Relation Manager Instance
    var $_folder_relation_manager = null;

    /**
     * Constructor
     */
    function __construct()
    {

    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_FolderRelation_Logic $instance                  //Instance of GRN_Workflow_FolderRelation_Logic
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_FolderRelation_Logic();
        }

        return $_instance;
    }

    /**
     * Get Folder Relation Logic
     *
     * @return GRN_Workflow_FolderRelation_Manager $folder_relation_manager              //Folder Relation Manager
     */
    function _getFolderRelationManager()
    {
        if (is_null($this->_folder_relation_manager)) {
            require_once('workflow/folderrelation_manager.csp');
            $this->_folder_relation_manager
                = GRN_Workflow_FolderRelation_Manager::getInstance();
        }

        return $this->_folder_relation_manager;
    }

    /**
     * get Login User
     *
     * @access private
     * @return object $login_user                //Login User
     */
    function _getLoginUser()
    {
        //Get UUM Instance
        global $G_container_base;
        $grn_uum = $G_container_base->getInstance('uum');

        //Get Login User
        $login_user = $grn_uum->getLoginUser();
        if ( ! $login_user) {
            $ret = false;

            return $ret;
        }

        //Return Login User
        return $login_user;
    }

    /**
     * Set Creator
     *
     * @access private
     *
     * @param  array $property_list //Property List
     *
     * @return bool   $result                    //Result
     */
    function _setCreator(&$property_list)
    {
        //Check Argument
        if ( ! is_array($property_list)) {
            return false;
        }

        // Get Login User
        $login_user =& $this->_getLoginUser();

        //Get Create Time
//        $ctime = new CB_TimeStamp();
//        $ctime->unix_ts = time();
        $ctime = time();

        //Set Create Infomation
        if ($login_user) {
            $user_id = $login_user->getOID();
            $display_name
                = $login_user->get('display_name');
            $foreign_key
                = $login_user->get('foreign_key');
            $property_list[GRN_WORKFLOW_COLUMN_CREATOR]
                = $user_id;         //Creator
            $property_list[GRN_WORKFLOW_COLUMN_CREATOR_NAME]
                = $display_name;    //Creator Name
            $property_list[GRN_WORKFLOW_COLUMN_CREATOR_FOREIGN_KEY]
                = $foreign_key;     //Creator Foreign Key
            $property_list[GRN_WORKFLOW_COLUMN_MODIFIER]
                = $user_id;         //Modifier
            $property_list[GRN_WORKFLOW_COLUMN_MODIFIER_NAME]
                = $display_name;    //Modifier Name
            $property_list[GRN_WORKFLOW_COLUMN_MODIFIER_FOREIGN_KEY]
                = $foreign_key;     //Modifier Foreign Key
        }
        $property_list[GRN_WORKFLOW_COLUMN_CTIME] = $ctime;   //Create Time
        $property_list[GRN_WORKFLOW_COLUMN_MTIME] = $ctime;   //Modify Time

        return true;
    }

    /**
     * Set Modofier
     *
     * @access private
     *
     * @param  array $property_list //Property List
     *
     * @return bool   $result                    //Result
     */
    function _setModifier(&$property_list)
    {
        //Check Argument
        if ( ! is_array($property_list)) {
            return false;
        }

        // Get Login User
        $login_user =& $this->_getLoginUser();

        //Get Modofy Time
//        $mtime = new CB_TimeStamp();
//        $mtime->unix_ts = time();
        $mtime = time();

        //Set Modify Infomation/
        if ($login_user) {
            $user_id = $login_user->getOID();
            $display_name
                = $login_user->get('display_name');
            $foreign_key
                = $login_user->get('foreign_key');
            $property_list[GRN_WORKFLOW_COLUMN_MODIFIER]
                = $user_id;         //Modifier
            $property_list[GRN_WORKFLOW_COLUMN_MODIFIER_NAME]
                = $display_name;    //Modifier Name
            $property_list[GRN_WORKFLOW_COLUMN_MODIFIER_FOREIGN_KEY]
                = $foreign_key;     //Modifier Foreign Key
        }
        $property_list[GRN_WORKFLOW_COLUMN_MTIME] = $mtime;   //Modify Time

        return true;
    }

    /**
     * Add Petition To Folder Relation
     *
     * @param  int $folder_id   //Folder ID
     * @param  int $petition_id //Item ID
     *
     * @return int $folder_relation_id              //Folder Relation ID
     */
    function add($folder_id, $petition_id)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($folder_id,
            E_GRN_WRKF_FOLDER_INVALID_FOLDER_ID);   //Folder ID
        cb_trim_check($petition_id,
            E_GRN_WRKF_FOLDER_INVALID_PETITION_ID); //Petition ID

        //Create Property List
        $property_list = [
            GRN_WORKFLOW_COLUMN_FOLDER   => $folder_id,
            GRN_WORKFLOW_COLUMN_PETITION => $petition_id,
        ];

        //Set Creator
        $this->_setCreator($property_list);

        //Create New Folder Relation
        $folder_relation_manager = $this->_getFolderRelationManager();
        $folder_relation_id
            = $folder_relation_manager->create($property_list);

        return $folder_relation_id;
    }

    /**
     * Modify Folder Relation
     *
     * @param  int $folder_relation_id //Folder Reration ID
     * @param  int $folder_id          //Folder ID
     * @param  int $petition_id        //Item ID
     *
     * @return int $folder_relation_id              //Folder Relation ID
     */
    function modify($folder_relation_id, $folder_id, $petition_id)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($folder_relation_id,
            E_GRN_WRKF_FOLDER_INVALID_FOLDERRELATION_ID);    //Folder Relation ID
        cb_trim_check($folder_id,
            E_GRN_WRKF_FOLDER_INVALID_FOLDER_ID);            //Folder ID
        cb_trim_check($petition_id,
            E_GRN_WRKF_FOLDER_INVALID_PETITION_ID);          //Petition ID

        //Create Property List
        $property_list = [
            GRN_WORKFLOW_COLUMN_FOLDER   => $folder_id,
            GRN_WORKFLOW_COLUMN_PETITION => petition_id,
        ];

        //Set Modifier
        $this->_setModifier($property_list);

        //Update Folder Relation
        $folder_relation_manager =& $this->_getFolderRelationManager();
        $folder_relation_id
            = $folder_relation_manager->update($folder_relation_id,
            $property_list);

        return $folder_relation_id;
    }

    /**
     * Delete Folder Relation
     *
     * @param int $folder_relation_id //Folder Relation ID
     *
     * @return true
     */
    function delete($folder_relation_id)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($folder_relation_id,
            E_GRN_WRKF_FOLDER_INVALID_FOLDERRELATION_ID);   //Folder Relation ID

        //Remove Folder Relation
        $folder_relation_manager =& $this->_getFolderRelationManager();
        $folder_relation_manager->remove($folder_relation_id);

        return true;
    }

    /**
     * Delete Multiple Folder Relation
     *
     * @param  array $folder_relation_id_list //Folder Relation ID List
     * @param  array $folder_id               //Folder ID
     *
     * @return BOOL   $result                       //Result
     */
    function deleteMulti($folder_relation_id_list, $folder_id = null)
    {
        //Check Argument
        if ( ! is_array($folder_relation_id_list)) {
            //Not Input Necessary
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_FOLDERRELATION_NOT_INPUT_NECESSARY);
        }

        //Remove Folder Relation
        $folder_relation_manager =& $this->_getFolderRelationManager();
        $folder_relation_manager->removeMulti($folder_relation_id_list,
            $folder_id);

        return true;
    }

    /**
     * Delete All Folder Relation
     *
     * @param  int $folder_id //Folder ID
     *
     * @return BOOL   $result                       //Result
     */
    function deleteAll($folder_id = null)
    {
        //Remove Folder Relation
        $folder_relation_manager =& $this->_getFolderRelationManager();
        $folder_relation_manager->removeAll($folder_id);

        return true;
    }

    /**
     * Change Folder Relation Order
     *
     * @param int $folder_relation_id_list //Folder Relation ID List
     *
     * @return true
     */
    function changeOrder($folder_relation_id_list)
    {
        //Check Argument
        if ( ! is_array($folder_relation_id_list)) {
            require_once('fw/string_util.csp');
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_FOLDERRELATION_NOT_INPUT_NECESSARY);
        }

        //Change Order
        $folder_relation_manager =& $this->_getFolderRelationManager();
        $folder_relation_manager->changeOrder($folder_relation_id_list, 1);

        return true;
    }

////////////////////////////////////////////////

    /**
     * フォルダリレーションを一括追加
     *
     * @param   int   $petition_id
     * @param   array $fids
     *
     * @return  string
     */
    function addList($petition_id, $fids)
    {
        $app_locator = GRN_ApplicationLocator::instance();
        $dbconn = $app_locator->getConnection('workflow');

        $records = [];
        foreach ($fids as $folder_id) {
            $records[] = cb_queryf($dbconn, "('@S','@S')", $petition_id,
                $folder_id);
        }
        $records = implode(',', $records);

        $query
            = "INSERT tab_grn_workflow_folderrelation(col_petition,col_folder) VALUES{$records}";
        if (false === $dbconn->query($query)) {
            $dbconn->throwError(['query' => "failed query on INSERT: {$query}"]);
        }

        return $dbconn->get_insert_id();
    }

    function getSpecific(
        $folder_id,
        $petition_id,
        $lock = CB_DATABASE_DEFAULT_LOCK
    ) {
        $rows = $this->getSpecificList([$folder_id], $petition_id, 'col_folder',
            0, 1, $lock);
        if (array_key_exists($folder_id, $rows)) {
            return $rows[$folder_id];
        }

        return false;
    }

    function getSpecificList(
        $fids,
        $petition_id,
        $sort_key = 'col_folder',
        $offset = 0,
        $limit = -1,
        $lock = CB_DATABASE_DEFAULT_LOCK
    ) {
        $app_locator = GRN_ApplicationLocator::instance();
        $dbconn = $app_locator->getConnection('workflow');
        foreach ($fids as $key => $value) {
            $fids[$key] = cb_queryf($dbconn, "'@S'", $value);
        }
        $fids = implode(',', $fids);
        $condition = cb_queryf($dbconn,
            "fr.col_petition='@S' AND fr.col_folder IN({$fids})", $petition_id);
        $order_by = 'fr.col_list_index,fr._id';

        $join
            = " INNER JOIN tab_grn_workflow_folder AS f ON fr.col_folder=f._id";
        $join .= " INNER JOIN tab_cb_user AS u ON (f.col_user=u._id AND u.col_deleted IS NULL)";
        $query
            = "SELECT fr._id,fr.col_folder FROM tab_grn_workflow_folderrelation AS fr {$join} WHERE ({$condition}) ORDER BY {$order_by}";

        $query = $dbconn->select_format($query, $offset, $limit, $lock);
        $result = $dbconn->query($query);
        if (false === $result) {
            $dbconn->throwError(['query' => "failed query on SELECT: {$query}"]);
        }

        $rows = [];
        while ($row = $dbconn->fetch_assoc($result)) {
            $rows[$row[$sort_key]] = $row;
        }

        return $rows;
    }

    function getSpecificListEx(
        $fids,
        $petition_id,
        $sort_key = 'col_folder',
        $offset = 0,
        $limit = -1,
        $lock = CB_DATABASE_DEFAULT_LOCK
    ) {
        $app_locator = GRN_ApplicationLocator::instance();
        $dbconn = $app_locator->getConnection('workflow');
        foreach ($fids as $key => $value) {
            $fids[$key] = cb_queryf($dbconn, "'@S'", $value);
        }
        $fids = implode(',', $fids);
        $condition = cb_queryf($dbconn,
            "fr.col_petition='@S' AND fr.col_folder IN({$fids})", $petition_id);
        $order_by = 'f.col_list_index, fr.col_list_index, fr._id';

        $join
            = " INNER JOIN tab_grn_workflow_folder AS f ON fr.col_folder=f._id";
        $join .= " INNER JOIN tab_cb_user AS u ON (f.col_user=u._id AND u.col_deleted IS NULL)";
        $query
            = "SELECT fr._id,fr.col_folder FROM tab_grn_workflow_folderrelation AS fr {$join} WHERE ({$condition}) ORDER BY {$order_by}";

        $query = $dbconn->select_format($query, $offset, $limit, $lock);
        $result = $dbconn->query($query);
        if (false === $result) {
            $dbconn->throwError(['query' => "failed query on SELECT: {$query}"]);
        }

        $rows = [];
        while ($row = $dbconn->fetch_assoc($result)) {
            $rows[$row[$sort_key]] = $row;
        }

        return $rows;
    }

    function getSpecificListByOID(
        $frids,
        $folder_id = null,
        $sort_key = '_id',
        $offset = 0,
        $limit = -1,
        $lock = CB_DATABASE_DEFAULT_LOCK
    ) {
        $app_locator = GRN_ApplicationLocator::instance();
        $dbconn =& $app_locator->getConnection('workflow');

        foreach ($frids as $key => $value) {
            $frids[$key] = cb_queryf($dbconn, "'@S'", $value);
        }
        $frids = implode(',', $frids);
        $condition = "fr._id IN({$frids})";

        if (0 < strlen($folder_id)) {
            $condition = cb_queryf($dbconn,
                "(fr.col_folder='@S') AND ({$condition})", $folder_id);
        }

        $order_by = 'fr.col_list_index,fr._id';

        $join
            = " INNER JOIN tab_grn_workflow_folder AS f ON fr.col_folder=f._id";
        $join .= " INNER JOIN tab_cb_user AS u ON (f.col_user=u._id AND u.col_deleted IS NULL)";
        $query
            = "SELECT fr._id,fr.col_folder,fr.col_petition FROM tab_grn_workflow_folderrelation AS fr {$join} WHERE ({$condition}) ORDER BY {$order_by}";

        $query = $dbconn->select_format($query, 0, -1, $lock);
        $result = $dbconn->query($query);
        if (false === $result) {
            $dbconn->throwError(['query' => "failed query on SELECT: {$query}"]);
        }

        $rows = [];
        while ($row = $dbconn->fetch_assoc($result)) {
            $rows[$row[$sort_key]] = $row;
        }

        return $rows;
    }

    /**
     * @param       $folder_id
     * @param array $petition_ids
     * @param int   $lock
     *
     * @return array
     */
    function getRelationFolderType(
        $folder_id,
        Array $petition_ids,
        $lock = CB_DATABASE_DEFAULT_LOCK
    ) {
        $app_locator = GRN_ApplicationLocator::instance();
        $dbconn =& $app_locator->getConnection('workflow');

        $query
            = "SELECT a.col_petition AS petition_id, b.col_status AS status FROM tab_grn_workflow_folderrelation a";
        $query .= " LEFT JOIN tab_grn_workflow_petition b ON a.col_petition = b._id";
        $query = cb_queryf($dbconn,
            $query . " WHERE a.col_folder = '@S' and a.col_petition in (@A)",
            $folder_id, $petition_ids);

        $query = $dbconn->select_format($query, 0, -1, $lock);
        $result = $dbconn->query($query);
        if (false === $result) {
            $dbconn->throwError(['query' => "failed query on SELECT: {$query}"]);
        }

        $rows = [];
        while ($row = $dbconn->fetch_assoc($result)) {
            $rows[] = $row;
        }

        return $rows;
    }

    function remove($folder_id, $petition_id)
    {
        $this->removeList($folder_id, [$petition_id]);
    }

    function removeList($folder_id, $pids)
    {
        $app_locator = GRN_ApplicationLocator::instance();
        $dbconn = $app_locator->getConnection('workflow');

        $condition = cb_queryf($dbconn, "col_folder='@S'", $folder_id);
        foreach ($pids as $key => $value) {
            $pids[$key] = cb_queryf($dbconn, "'@S'", $value);
        }
        $pids = implode(',', $pids);
        $condition = "({$condition}) AND (col_petition IN({$pids}))";

        $query
            = "DELETE FROM tab_grn_workflow_folderrelation WHERE ({$condition})";
        $result = $dbconn->query($query);
        if (false === $result) {
            $dbconn->throwError(['query' => "failed query on DELETE: {$query}"]);
        }
    }

    function removeListByFolderId($petition_id, $fids)
    {
        $app_locator = GRN_ApplicationLocator::instance();
        $dbconn =& $app_locator->getConnection('workflow');

        $condition = cb_queryf($dbconn, "col_petition='@S'", $petition_id);
        foreach ($fids as $key => $value) {
            $fids[$key] = cb_queryf($dbconn, "'@S'", $value);
        }
        $fids = implode(',', $fids);
        $condition = "({$condition}) AND (col_folder IN({$fids}))";

        $query
            = "DELETE FROM tab_grn_workflow_folderrelation WHERE ({$condition})";
        $result = $dbconn->query($query);
        if (false === $result) {
            $dbconn->throwError(['query' => "failed query on DELETE: {$query}"]);
        }
    }
}


