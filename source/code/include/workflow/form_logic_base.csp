<?php
/**
 * Workflow Application Form Base Class
 *
 * @author  Yuichi, Nakamura 2005/12
 * @version 1.0
 * @package grn.workflow
 */

/** Workflow Application **/
require_once('workflow/resources.csp');

/**
 * Form Logic Base Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_Form_Logic_Base
{
    //Form Manager Base Instance
    var $_form_manager_base = null;

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {

    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_Form_Logic_Base $instance                  //Instance of GRN_Workflow_Form_Logic_Base
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_Form_Logic_Base();
        }

        return $_instance;
    }

    /**
     * Get Form Manager Base
     *
     * @return GRN_Workflow_Form_Manager_Base $form_manager_base         //Form Manager Base
     */
    function _getFormManagerBase()
    {
        if (is_null($this->_form_manager_base)) {
            require_once('workflow/form_manager_base.csp');
            $this->_form_manager_base
                = GRN_Workflow_Form_Manager_Base::getInstance();
        }

        return $this->_form_manager_base;
    }

    /**
     * Get Column List
     *
     * @param  string $class_name //Class Name
     *
     * @return array  $column_name_list          //Column Name List
     */
    function getColumnList($class_name = null)
    {
        //Get Column List
        $form_manager_base = $this->_getFormManagerBase();
        $column_name_list =& $form_manager_base->_getColumnlist($class_name);

        //Return Column Name List
        return $column_name_list;
    }

    /**
     * Get Form
     *
     * @param  int   $form_id     //Form ID
     * @param  int   $category_id //Category ID
     * @param  array $column_list //Column List
     * @param  mixed $option      //Option (array('list'=>array('offset'=>'', 'limit'=>''), 'sort'=>array('column'=>'', 'order'=>''), 'condition'=>array('column'=>'', 'value'=>'', 'operator'=>''))
     * @param  bool  $refresh     //Refresh Cache
     * @param  int   $lock_mode   //Lock Mode
     *
     * @return array  $form                      //Form Information Array
     */
    function &get(
        $form_id,
        $category_id = null,
        $column_list = [],
        $option = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($form_id, E_GRN_WRKF_FORM_INVALID_ID);    //Form ID

        //Get Form 
        $form_manager_base = $this->_getFormManagerBase();
        $form =& $form_manager_base->get($form_id, $category_id,
            $column_list, $option, $refresh, $lock_mode);
        if ( ! $form) {
            //Form Not Found
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_FORM_NOT_FOUND);
        }

        //Return Form
        return $form;
    }

    /**
     * Get Form(with Extra Information)
     *
     * @param  int   $form_id     //Form ID
     * @param  int   $category_id //Category ID
     * @param  array $column_list //Column List
     * @param  mixed $option      //Option (array('list'=>array('offset'=>'', 'limit'=>''), 'sort'=>array('column'=>'', 'order'=>''), 'condition'=>array('column'=>'', 'value'=>'', 'operator'=>''))
     * @param  bool  $refresh     //Refresh Cache
     * @param  int   $lock_mode   //Lock Mode
     *
     * @return array  $form                      //Form Information Array
     */
    function &getEx(
        $form_id,
        $category_id = null,
        $column_list = [],
        $option = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($form_id, E_GRN_WRKF_FORM_INVALID_ID);    //Form ID

        //Get Form 
        $form_manager_base =& $this->_getFormManagerBase();
        $form =& $form_manager_base->getEx($form_id, $category_id,
            $column_list, $option, $refresh, $lock_mode);
        if ( ! $form) {
            //Form Not Found
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_FORM_NOT_FOUND);
        }

        //Return Form
        return $form;
    }

    /**
     * Get Form Direct
     *
     * @param  int   $form_id     //Form ID
     * @param  array $column_list //Column List
     * @param  mixed $option      //Option (array('condition'=>array('column'=>'', 'value'=>'', 'operator'=>''))
     * @param  int   $lock_mode   //Lock Mode
     *
     * @return array  $form                      //Form Information Array
     */
    function getDirect(
        $form_id,
        $column_list = [],
        $option = [],
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($form_id, E_GRN_WRKF_FORM_INVALID_ID);    //Form ID

        //Get Form 
        $form_manager_base = $this->_getFormManagerBase();
        $form = $form_manager_base->getDirect($form_id,
            $column_list, $option, $lock_mode);
        if ( ! $form) {
            //Form Not Found
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_FORM_NOT_FOUND);
        }

        //Return Form
        return $form;
    }

    /**
     * Get Form List
     *
     * @param  int   $category_id //Category ID
     * @param  array $column_list //Column List
     * @param  mixed $option      //Option (array('list'=>array('offset'=>'', 'limit'=>''), 'sort'=>array('column'=>'', 'order'=>''), 'condition'=>array('column'=>'', 'value'=>'', 'operator'=>''))
     * @param  bool  $refresh     //Refresh Cache
     * @param  int   $lock_mode   //Lock Mode
     *
     * @return array  $form_list                 //Form Information List
     */
    function &getList(
        $category_id = null,
        $column_list = [],
        $option = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Form List
        $form_manager_base = $this->_getFormManagerBase();
        $form_list =& $form_manager_base->getList($category_id,
            $column_list, $option, $refresh, $lock_mode);

        //Return Form List
        return $form_list;
    }

    /**
     * Get Form List (with Extra Information)
     *
     * @param  int   $category_id //Petition ID
     * @param  array $column_list //Column List
     * @param  mixed $option      //Option (array('list'=>array('offset'=>'', 'limit'=>''), 'sort'=>array('column'=>'', 'order'=>''), 'condition'=>array('column'=>'', 'value'=>'', 'operator'=>''))
     * @param  bool  $refresh     //Refresh Cache
     * @param  int   $lock_mode   //Lock Mode
     *
     * @return array  $form_list                 //Form Information List
     */
    function &getListEx(
        $category_id = null,
        $column_list = [],
        $option = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Form List
        $form_manager_base =& $this->_getFormManagerBase();
        $form_list =& $form_manager_base->getListEx($category_id,
            $column_list, $option, $refresh, $lock_mode);

        //Return Form List
        return $form_list;
    }

    /**
     * Get Form Count
     *
     * @param  int   $category_id //Category ID
     * @param  mixed $option      //Option (array('list'=>array('offset'=>'', 'limit'=>''), 'sort'=>array('column'=>'', 'order'=>''), 'condition'=>array('column'=>'', 'value'=>'', 'operator'=>''))
     * @param  bool  $refresh     //Refresh Cache
     * @param  int   $lock_mode   //Lock Mode
     *
     * @return int    $form_count                //Form Count
     */
    function getCount(
        $category_id = null,
        $option = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Form List
        $form_manager_base = $this->_getFormManagerBase();
        $form_count = $form_manager_base->getCount($category_id, $option,
            $refresh, $lock_mode);

        //Return Form Count
        return $form_count;
    }

    /**
     * Get Form Count(with Extra Information)
     *
     * @param  int   $category_id //Category ID
     * @param  mixed $option      //Option (array('list'=>array('offset'=>'', 'limit'=>''), 'sort'=>array('column'=>'', 'order'=>''), 'condition'=>array('column'=>'', 'value'=>'', 'operator'=>''))
     * @param  bool  $refresh     //Refresh Cache
     * @param  int   $lock_mode   //Lock Mode
     *
     * @return int    $form_count                //Form Count
     */
    function getCountEx(
        $category_id = null,
        $option = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Form List
        $form_manager_base =& $this->_getFormManagerBase();
        $form_count = $form_manager_base->getCountEx($category_id,
            $option, $refresh, $lock_mode);

        //Return Form Count
        return $form_count;
    }
}


