<?php
/**
 * Workflow Inspection  Class
 *
 * @author  Yuichi, UEYAMA 2006/2
 * @version 1.0
 * @package grn.workflow
 */

/** Workflow Application **/
require_once('workflow/resources.csp');

/**
 * Workflow Common Inspection Class
 *
 * @package grn.workflow
 * @abstract
 */
class GRN_Workflow_Common_Inspection extends GRN_Workflow_Inspection_Base
{
    /**
     * Constructor
     *
     */
    function __construct()
    {
        $template_list = [
            //一般設定
            'common_set' => [
                'template' => '[config] common_set <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'cutover',
                    'allow_remand',
                    'applicant',
                    'operation_admin',
                    'system_admin',
                    'approval_plan',
                    'substitute_application',
                    'substitute_approval',
                    'personal_agent_setting',
                    'mail_notification',
                    'mail_notification_url',
                    'automatic_export_encoding',
                    'js_css_customization_setting'
                ],
                'action'   => 'config',
                'target'   => 'common_set',
            ],
        ];
        //Set Template List
        parent::__construct($template_list);

        return;
    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_Common_Inspection $instance                   //Instance of GRN_Workflow_Common_Inspection
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_Common_Inspection();
        }

        return $_instance;
    }
}

/**
 * Workflow Category Inspection Class
 *
 * @package grn.workflow
 * @abstract
 */
class GRN_Workflow_Category_Inspection extends GRN_Workflow_Inspection_Base
{
    /**
     * Constructor
     *
     */
    function __construct()
    {
        $template_list = [
            //カテゴリの追加
            'category_add'    => [
                'template' => '[create] category_add (cid:%s) <%s> <%s> <%s>',
                'items'    => ['cid', 'name', 'foreign_key', 'memo',],
                'action'   => 'create',
                'target'   => 'category_add',
            ],
            //カテゴリの変更
            'category_modify' => [
                'template' => '[modify] category_modify (cid:%s) <%s> <%s> <%s>',
                'items'    => ['cid', 'name', 'foreign_key', 'memo',],
                'action'   => 'modify',
                'target'   => 'category_modify',
            ],
            //カテゴリの削除
            'category_delete' => [
                'template' => '[delete] category_delete (cid:%s)',
                'items'    => ['cid',],
                'action'   => 'delete',
                'target'   => 'category_delete',
            ],
            //カテゴリの移動
            'category_move'   => [
                'template' => '[modify] category_move (cid:%s) (s_cid:%s)',
                'items'    => ['cid', 's_cid',],
                'action'   => 'modify',
                'target'   => 'category_move',
            ],
            //サブカテゴリの順番変更
            'category_order'  => [
                'template' => '[modify] category_order (cids:%s)',
                'items'    => ['cids',],
                'action'   => 'modify',
                'target'   => 'category_order',
            ],
            //カテゴリの書き出し
            'category_export' => [
                'template' => '[export] category_export',
                'items'    => [],
                'action'   => 'export',
                'target'   => 'category_export',
            ],
            //カテゴリの読み込み
            'category_import' => [
                'template' => '[import] category_import <%s> <%s> <%s> <%s>',
                'items'    => [
                    'parent_foreign_key',
                    'foreign_key',
                    'name',
                    'memo'
                ],
                'action'   => 'import',
                'target'   => 'category_import',
            ],
        ];
        //Set Template List
        parent::__construct($template_list);

        return;
    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_Category_Inspection $instance                   //Instance of GRN_Workflow_Category_Inspection
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_Category_Inspection();
        }

        return $_instance;
    }
}

/**
 * Workflow Form Inspection Class
 *
 * @package grn.workflow
 * @abstract
 */
class GRN_Workflow_Form_Inspection extends GRN_Workflow_Inspection_Base
{
    /**
     * Constructor
     *
     */
    function __construct()
    {
        $template_list = [
            //区切り線の追加
            'form_separator_add'              => [
                'template' => '[create] form_separator_add (cid:%s) (fid:%s)',
                'items'    => ['cid', 'fid',],
                'action'   => 'create',
                'target'   => 'form_separator_add',
            ],
            //申請フォームの追加
            'form_add'                        => [
                'template' => '[create] form_add (cid:%s) (fid:%s) <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'cid',
                    'fid',
                    'name',
                    'foreign_key',
                    'memo',
                    'auto_export',
                    'login_name_export',
                    'export_top_line',
                    'export_folder'
                ],
                'action'   => 'create',
                'target'   => 'form_add',
            ],
            //申請フォームの変更
            'form_modify'                     => [
                'template' => '[modify] form_modify (fid:%s) <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'fid',
                    'name',
                    'foreign_key',
                    'memo',
                    'auto_export',
                    'login_name_export',
                    'export_top_line',
                    'export_folder'
                ],
                'action'   => 'modify',
                'target'   => 'form_modify',
            ],
            //申請フォームの削除
            'form_delete'                     => [
                'template' => '[delete] form_delete (fid:%s)',
                'items'    => ['fid',],
                'action'   => 'delete',
                'target'   => 'form_delete',
            ],
            //申請フォームの一括削除
            'form_delete_multi'               => [
                'template' => '[delete] form_delete_multi (fids:%s)',
                'items'    => ['fids',],
                'action'   => 'delete',
                'target'   => 'form_delete_multi',
            ],
            //申請フォームの全削除
            'form_delete_all'                 => [
                'template' => '[delete] form_delete_all (cid:%s)',
                'items'    => ['cid',],
                'action'   => 'delete',
                'target'   => 'form_delete_all',
            ],
            //管理者用メモの変更
            'form_memo_modify'                => [
                'template' => '[modify] form_memo_modify (fid:%s) <%s>',
                'items'    => ['fid', 'admin_memo',],
                'action'   => 'modify',
                'target'   => 'form_memo_modify',
            ],
            //申請フォームの有効/無効切り替え
            'form_activate'                   => [
                'template' => '[modify] form_activate (fid:%s) <%s>',
                'items'    => ['fid', 'active',],
                'action'   => 'modify',
                'target'   => 'form_activate',
            ],
            //アイコンの設定
            'form_icon_modify'                => [
                'template' => '[modify] form_icon_modify <%s> <%s> <%s>',
                'items'    => ['icon_id', 'icon_type', 'icon_url',],
                'action'   => 'modify',
                'target'   => 'form_icon_modify',
            ],
            //番号の設定
            'form_serial_modify'              => [
                'template' => '[modify] form_serial_modify (fid:%s) <%s> <%s>',
                'items'    => [
                    'fid',
                    'serial_type',
                    'serial_format',
                    'approved_serial_type',
                    'approved_serial_format'
                ],
                'action'   => 'modify',
                'target'   => 'form_serial_modify',
            ],
            //申請番号の初期化
            'form_serial_initialize'          => [
                'template' => '[modify] form_serial_initialize (fid:%s) <%s>',
                'items'    => ['fid', 'serial_number',],
                'action'   => 'modify',
                'target'   => 'form_serial_initialize',
            ],
            'form_approved_serial_initialize' => [
                'template' => '[modify] form_approved_serial_initialize (fid:%s) <%s>',
                'items'    => ['fid', 'approved_serial_number',],
                'action'   => 'modify',
                'target'   => 'form_approved_serial_initialize',
            ],
            //申請フォームの順番変更
            'form_order'                      => [
                'template' => '[modify] form_order (cid:%s) (fids:%s)',
                'items'    => ['cid', 'fids',],
                'action'   => 'modify',
                'target'   => 'form_order',
            ],
            //申請フォームの書き出し
            'form_export'                     => [
                'template' => '[export] form_export',
                'items'    => [],
                'action'   => 'export',
                'target'   => 'form_export',
            ],
            //申請フォームの読み込み
            'form_import'                     => [
                'template' => '[import] form_import <%s> <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'forms',
                    'items',
                    'paths',
                    'path_steps',
                    'path_skips',
                    'path_conditions',
                ],
                'action'   => 'import',
                'target'   => 'form_import',
            ],
            //フォームのコピー
            'form_copy'                       => [
                'template' => '[create] form_copy (fids:%s)',
                'items'    => ['fids',],
                'action'   => 'create',
                'target'   => 'form_copy',
            ],
            //申請フォームの移動
            'form_move'                       => [
                'template' => '[modify] form_move (cid:%s) (s_cid:%s) (fid:%s)',
                'items'    => ['cid', 's_cid', 'fid',],
                'action'   => 'modify',
                'target'   => 'form_move',
            ],
        ];
        //Set Template List
        parent::__construct($template_list);

        return;
    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_Form_Inspection $instance                   //Instance of GRN_Workflow_Form_Inspection
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_Form_Inspection();
        }

        return $_instance;
    }
}

/**
 * Workflow Form Layout Inspection Class
 *
 * @package grn.workflow
 * @abstract
 */
class GRN_Workflow_Form_Layout_Inspection extends GRN_Workflow_Inspection_Base
{
    /**
     * Constructor
     *
     */
    function __construct()
    {
        $template_list = [
            //項目の追加(1行テキスト)
            'form_layout_string_single_add'      => [
                'template' => '[create] form_layout_string_single_add (fid:%s) (iid:%s) <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'fid',
                    'iid',
                    'foreign_key',
                    'display_name',
                    'code',
                    'br',
                    'separator',
                    'option_string_type',
                    'option_string',
                    'description_editor',
                    'description',
                    'description_type',
                    'size',
                    'max_input_size',
                    'input_chars',
                    'initial_type',
                    'initial_text_value',
                    'initial_user_value',
                    'required',
                    'export_data'
                ],
                'action'   => 'create',
                'target'   => 'form_layout_string_single_add',
            ],
            //項目の変更(1行テキスト)
            'form_layout_string_single_modify'   => [
                'template' => '[modify] form_layout_string_single_modify (iid:%s) <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'iid',
                    'foreign_key',
                    'display_name',
                    'code',
                    'br',
                    'separator',
                    'option_string_type',
                    'option_string',
                    'description_editor',
                    'description',
                    'description_type',
                    'size',
                    'max_input_size',
                    'input_chars',
                    'initial_type',
                    'initial_text_value',
                    'initial_user_value',
                    'required',
                    'export_data'
                ],
                'action'   => 'modify',
                'target'   => 'form_layout_string_single_modify',
            ],
            //項目の追加(複数行)
            'form_layout_string_multiple_add'    => [
                'template' => '[create] form_layout_string_multiple_add (fid:%s) (iid:%s) <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'fid',
                    'iid',
                    'foreign_key',
                    'display_name',
                    'code',
                    'br',
                    'separator',
                    'option_string_type',
                    'option_string',
                    'description_editor',
                    'description',
                    'description_type',
                    'col_size',
                    'row_size',
                    'initial_value',
                    'required',
                    'export_data'
                ],
                'action'   => 'create',
                'target'   => 'form_layout_string_multiple_add',
            ],
            //項目の変更(複数行)
            'form_layout_string_multiple_modify' => [
                'template' => '[modify] form_layout_string_multiple_modify (iid:%s) <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'iid',
                    'foreign_key',
                    'display_name',
                    'code',
                    'br',
                    'separator',
                    'option_string_type',
                    'option_string',
                    'description_editor',
                    'description',
                    'description_type',
                    'col_size',
                    'row_size',
                    'initial_value',
                    'required',
                    'export_data'
                ],
                'action'   => 'modify',
                'target'   => 'form_layout_string_multiple_modify',
            ],
            //項目の追加(メニュー)
            'form_layout_menu_string_add'        => [
                'template' => '[create] form_layout_menu_string_add (fid:%s) (iid:%s) <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'fid',
                    'iid',
                    'foreign_key',
                    'display_name',
                    'code',
                    'br',
                    'separator',
                    'option_string_type',
                    'option_string',
                    'description_editor',
                    'description',
                    'description_type',
                    'menu_items',
                    'initial_value',
                    'menu_item_type',
                    'required',
                    'export_data'
                ],
                'action'   => 'create',
                'target'   => 'form_layout_menu_string_add',
            ],
            //項目の変更(メニュー)
            'form_layout_menu_string_modify'     => [
                'template' => '[modify] form_layout_menu_string_modify (iid:%s) <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'iid',
                    'foreign_key',
                    'display_name',
                    'code',
                    'br',
                    'separator',
                    'option_string_type',
                    'option_string',
                    'description_editor',
                    'description',
                    'description_type',
                    'menu_items',
                    'initial_value',
                    'menu_item_type',
                    'required',
                    'export_data'
                ],
                'action'   => 'modify',
                'target'   => 'form_layout_menu_string_modify',
            ],
            //項目の追加(ラジオ)
            'form_layout_radio_add'              => [
                'template' => '[create] form_layout_radio_add (fid:%s) (iid:%s) <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'fid',
                    'iid',
                    'foreign_key',
                    'display_name',
                    'code',
                    'br',
                    'separator',
                    'option_string_type',
                    'option_string',
                    'description_editor',
                    'description',
                    'description_type',
                    'radio_items',
                    'initial_value',
                    'required',
                    'export_data'
                ],
                'action'   => 'create',
                'target'   => 'form_layout_radio_add',
            ],
            //項目の変更(ラジオ)
            'form_layout_radio_modify'           => [
                'template' => '[modify] form_layout_radio_modify (iid:%s) <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'iid',
                    'foreign_key',
                    'display_name',
                    'code',
                    'br',
                    'separator',
                    'option_string_type',
                    'option_string',
                    'description_editor',
                    'description',
                    'description_type',
                    'radio_items',
                    'initial_value',
                    'required',
                    'export_data'
                ],
                'action'   => 'modify',
                'target'   => 'form_layout_radio_modify',
            ],
            //項目の追加(チェックボックス)
            'form_layout_checkbox_add'           => [
                'template' => '[create] form_layout_checkbox_add (fid:%s) (iid:%s) <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'fid',
                    'iid',
                    'foreign_key',
                    'display_name',
                    'code',
                    'br',
                    'separator',
                    'option_string_type',
                    'option_string',
                    'description_editor',
                    'description',
                    'description_type',
                    'initial_value',
                    'export_data'
                ],
                'action'   => 'create',
                'target'   => 'form_layout_checkbox_add',
            ],
            //項目の変更(チェックボックス)
            'form_layout_checkbox_modify'        => [
                'template' => '[modify] form_layout_checkbox_modify (iid:%s) <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'iid',
                    'foreign_key',
                    'display_name',
                    'code',
                    'br',
                    'separator',
                    'option_string_type',
                    'option_string',
                    'description_editor',
                    'description',
                    'description_type',
                    'initial_value',
                    'export_data'
                ],
                'action'   => 'modify',
                'target'   => 'form_layout_checkbox_modify',
            ],
            //項目の追加(数値)
            'form_layout_numeric_add'            => [
                'template' => '[create] form_layout_numeric_add (fid:%s) (iid:%s) <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'fid',
                    'iid',
                    'foreign_key',
                    'display_name',
                    'code',
                    'br',
                    'separator',
                    'option_string_type',
                    'option_string',
                    'description_editor',
                    'description',
                    'description_type',
                    'input_numbers',
                    'initial_value',
                    'effective_figures',
                    'minus_type',
                    'right_align',
                    'split_rank',
                    'max_input_number',
                    'min_input_number',
                    'required',
                    'export_data'
                ],
                'action'   => 'create',
                'target'   => 'form_layout_numeric_add',
            ],
            //項目の変更(数値)
            'form_layout_numeric_modify'         => [
                'template' => '[modify] form_layout_numeric_modify (iid:%s) <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'iid',
                    'foreign_key',
                    'display_name',
                    'code',
                    'br',
                    'separator',
                    'option_string_type',
                    'option_string',
                    'description_editor',
                    'description',
                    'description_type',
                    'input_numbers',
                    'initial_value',
                    'effective_figures',
                    'minus_type',
                    'right_align',
                    'split_rank',
                    'max_input_number',
                    'min_input_number',
                    'required',
                    'export_data'
                ],
                'action'   => 'modify',
                'target'   => 'form_layout_numeric_modify',
            ],
            //項目の追加(自動計算)
            'form_layout_calc_numeric_add'       => [
                'template' => '[create] form_layout_calc_numeric_add (fid:%s) (iid:%s) <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'fid',
                    'iid',
                    'foreign_key',
                    'display_name',
                    'code',
                    'br',
                    'separator',
                    'option_string_type',
                    'option_string',
                    'description_editor',
                    'description',
                    'description_type',
                    'effective_figures',
                    'minus_type',
                    'right_align',
                    'split_rank',
                    'not_display',
                    'calc_type',
                    'calc_operator_operator',
                    'calc_operator_operand1_type',
                    'calc_operator_operand1_value',
                    'calc_operator_operand2_type',
                    'calc_operator_operand2_value',
                    'calc_total_values',
                    'export_data'
                ],
                'action'   => 'create',
                'target'   => 'form_layout_calc_numeric_add',
            ],
            //項目の変更(自動計算)
            'form_layout_calc_numeric_modify'    => [
                'template' => '[modify] form_layout_calc_numeric_modify (iid:%s) <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'iid',
                    'foreign_key',
                    'display_name',
                    'code',
                    'br',
                    'separator',
                    'option_string_type',
                    'option_string',
                    'description_editor',
                    'description',
                    'description_type',
                    'effective_figures',
                    'minus_type',
                    'right_align',
                    'split_rank',
                    'not_display',
                    'calc_type',
                    'calc_operator_operator',
                    'calc_operator_operand1_type',
                    'calc_operator_operand1_value',
                    'calc_operator_operand2_type',
                    'calc_operator_operand2_value',
                    'calc_total_values',
                    'export_data'
                ],
                'action'   => 'modify',
                'target'   => 'form_layout_calc_numeric_modify',
            ],
            //項目の追加(日付)
            'form_layout_date_add'               => [
                'template' => '[create] form_layout_date_add (fid:%s) (iid:%s) <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'fid',
                    'iid',
                    'foreign_key',
                    'display_name',
                    'code',
                    'date_type',
                    'br',
                    'separator',
                    'option_string_type',
                    'option_string',
                    'description_editor',
                    'description',
                    'description_type',
                    'initial_type',
                    'initial_year',
                    'initial_month',
                    'initial_day',
                    'initial_hour',
                    'initial_minute',
                    'required',
                    'export_data'
                ],
                'action'   => 'create',
                'target'   => 'form_layout_date_add',
            ],
            //項目の変更(日付)
            'form_layout_date_modify'            => [
                'template' => '[modify] form_layout_date_modify (iid:%s) <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'iid',
                    'foreign_key',
                    'display_name',
                    'code',
                    'date_type',
                    'br',
                    'separator',
                    'option_string_type',
                    'option_string',
                    'description_editor',
                    'description',
                    'description_type',
                    'initial_type',
                    'initial_year',
                    'initial_month',
                    'initial_day',
                    'initial_hour',
                    'initial_minute',
                    'required',
                    'export_data'
                ],
                'action'   => 'modify',
                'target'   => 'form_layout_date_modify',
            ],
            //項目の追加(ファイル)
            'form_layout_file_add'               => [
                'template' => '[create] form_layout_file_add (fid:%s) (iid:%s) <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'fid',
                    'iid',
                    'foreign_key',
                    'display_name',
                    'code',
                    'br',
                    'separator',
                    'option_string_type',
                    'option_string',
                    'description_editor',
                    'description',
                    'description_type',
                    'max_files',
                    'inline',
                    'thumbnail',
                    'thumbnail_xsize',
                    'thumbnail_ysize',
                    'required',
                    'export_data'
                ],
                'action'   => 'create',
                'target'   => 'form_layout_file_add',
            ],
            //項目の変更(ファイル)
            'form_layout_file_modify'            => [
                'template' => '[modify] form_layout_file_modify (iid:%s) <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'iid',
                    'foreign_key',
                    'display_name',
                    'code',
                    'br',
                    'separator',
                    'option_string_type',
                    'option_string',
                    'description_editor',
                    'description',
                    'description_type',
                    'max_files',
                    'inline',
                    'thumbnail',
                    'thumbnail_xsize',
                    'thumbnail_ysize',
                    'required',
                    'export_data'
                ],
                'action'   => 'modify',
                'target'   => 'form_layout_file_modify',
            ],
            //項目の追加(路線ナビ)
            'form_layout_route_search_add'       => [
                'template' => '[create] form_layout_route_search_add (fid:%s) (iid:%s) <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'fid',
                    'iid',
                    'foreign_key',
                    'display_name',
                    'code',
                    'search_type',
                    'br',
                    'separator',
                    'option_string_type',
                    'option_string',
                    'description_editor',
                    'description',
                    'description_type',
                    'required',
                    'export_data'
                ],
                'action'   => 'create',
                'target'   => 'form_layout_route_search_add',
            ],
            //項目の変更(路線ナビ)
            'form_layout_route_search_modify'    => [
                'template' => '[modify] form_layout_route_search_modify (iid:%s) <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'iid',
                    'foreign_key',
                    'display_name',
                    'code',
                    'search_type',
                    'br',
                    'separator',
                    'option_string_type',
                    'option_string',
                    'description_editor',
                    'description',
                    'description_type',
                    'required',
                    'export_data'
                ],
                'action'   => 'modify',
                'target'   => 'form_layout_route_search_modify',
            ],
            //項目の削除
            'form_layout_delete'                 => [
                'template' => '[delete] form_layout_delete (iid:%s)',
                'items'    => ['iid',],
                'action'   => 'delete',
                'target'   => 'form_layout_delete',
            ],
            //項目の削除(選択)
            'form_layout_delete_multi'           => [
                'template' => '[delete] form_layout_delete_multi (iids:%s)',
                'items'    => ['iids',],
                'action'   => 'delete',
                'target'   => 'form_layout_delete_multi',
            ],
            //項目の削除(全て)
            'form_layout_delete_all'             => [
                'template' => '[delete] form_layout_delete_all (fid:%s)',
                'items'    => ['fid',],
                'action'   => 'delete',
                'target'   => 'form_layout_delete_all',
            ],
            //空行の追加
            'formlayout_blank_add'               => [
                'template' => '[create] formlayout_blank_add (fid:%s) (iid:%s)',
                'items'    => ['fid', 'iid',],
                'action'   => 'create',
                'target'   => 'formlayout_blank_add',
            ],
            //項目の順番変更
            'formlayout_order'                   => [
                'template' => '[modify] formlayout_order (fid:%s) (iids:%s)',
                'items'    => ['fid', 'iids',],
                'action'   => 'modify',
                'target'   => 'formlayout_order',
            ],
            //項目のコピー
            'form_layout_copy'                   => [
                'template' => '[create] form_layout_copy (fid:%s) (iids:%s)',
                'items'    => ['fid', 'iids',],
                'action'   => 'create',
                'target'   => 'form_layout_copy',
            ],

            'form_layout_js_customize_add'    => [
                'template' => '[create] form_layout_js_customize_add (fid:%s) (iid:%s) (foreign_key:%s) (code:%s) (br:%s)',
                'items'    => ['fid', 'iid', 'foreign_key', 'code', 'br'],
                'action'   => 'create',
                'target'   => 'form_layout_js_customize_add',
            ],
            'form_layout_js_customize_modify' => [
                'template' => '[create] form_layout_js_customize_modify (iid:%s) (foreign_key:%s) (code:%s) (br:%s)',
                'items'    => ['iid', 'foreign_key', 'code', 'br'],
                'action'   => 'modify',
                'target'   => 'form_layout_js_customize_modify',
            ],
            'form_layout_js_customize_delete' => [
                'template' => '[delete] form_layout_js_customize_delete (iid:%s)',
                'items'    => ['iid',],
                'action'   => 'delete',
                'target'   => 'form_layout_js_customize_delete',
            ],
        ];
        //Set Template List
        parent::__construct($template_list);

        return;
    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_Form_Layout_Inspection $instance                   //Instance of GRN_Workflow_Form_Layout_Inspection
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_Form_Layout_Inspection();
        }

        return $_instance;
    }

    /**
     * Set String Single Initial User Value
     *
     * @param  string $key //Initial User Value Key
     *
     * @return string $inspection_initial_user_value  //Inspection Initial User Value
     */
    function setStringSingleInitialUserValue($key)
    {
        $initial_user_value = [
            '%grn.common.uum.user.id%'               => GRN_WORKFLOW_ITEM_STRING_SINGLE_LOGIN_USER_ID,
            '%grn.common.uum.user.display_name%'     => GRN_WORKFLOW_ITEM_STRING_SINGLE_LOGIN_USER_DISPLAY_NAME,
            '%grn.common.uum.user.foreign_key%'      => GRN_WORKFLOW_ITEM_STRING_SINGLE_LOGIN_USER_FOREIGN_KEY,
            '%grn.common.uum.user.sort_key%'         => GRN_WORKFLOW_ITEM_STRING_SINGLE_LOGIN_USER_SORT_KEY,
            '%grn.common.uum.user.email_address%'    => GRN_WORKFLOW_ITEM_STRING_SINGLE_LOGIN_USER_EMAIL_ADDRESS,
            '%grn.common.uum.user.telephone_number%' => GRN_WORKFLOW_ITEM_STRING_SINGLE_LOGIN_USER_TELEPHONE_NUMBER,
            '%grn.common.uum.user.url%'              => GRN_WORKFLOW_ITEM_STRING_SINGLE_LOGIN_USER_URL,
            '%grn.common.uum.user.description%'      => GRN_WORKFLOW_ITEM_STRING_SINGLE_LOGIN_USER_DESCRIPTION,
            '%grn.common.uum.user.userinfo.post%'    => GRN_WORKFLOW_ITEM_STRING_SINGLE_LOGIN_USER_POST,
        ];

        $inspection_initial_user_value = null;
        if (array_key_exists($key, $initial_user_value)) {
            $inspection_initial_user_value = $initial_user_value[$key];
        }

        return $inspection_initial_user_value;
    }

    /**
     * Set String type
     *
     * @param  int $type //Option String Type
     *
     * @return string $inspection_string_type //Inspection Option String Type
     */
    function setStringType($type)
    {
        $inspection_string_type = GRN_WORKFLOW_ITEM_STRING_TYPE_NOT_PLACEMENT;
        if ($type == 1) {
            $inspection_string_type = GRN_WORKFLOW_ITEM_STRING_TYPE_TOP;
        } elseif ($type == 2) {
            $inspection_string_type = GRN_WORKFLOW_ITEM_STRING_TYPE_END;
        }

        return $inspection_string_type;
    }

    /**
     * Set Description Editor
     *
     * @param  int $editor //Description Editor
     *
     * @return string $inspection_description_editor  //Inspection Description Editor
     */
    function setDescriptionEditor($editor)
    {
        $inspection_description_editor
            = GRN_WORKFLOW_ITEM_DESCRIPTION_EDITOR_TYPE_TEXT;
        if ($editor == 1) {
            $inspection_description_editor
                = GRN_WORKFLOW_ITEM_DESCRIPTION_EDITOR_TYPE_EDIT;
        }

        return $inspection_description_editor;
    }

    /**
     * Set Description Type
     *
     * @param  int $description_type //Description Type
     *
     * @return string $inspection_description_type  //Inspection Description Type
     */
    function setDescriptionType($description_type)
    {
        $inspection_description_type
            = GRN_WORKFLOW_ITEM_DESCRIPTION_NOT_ICON_TYPE;
        if ($description_type == 1) {
            $inspection_description_type
                = GRN_WORKFLOW_ITEM_DESCRIPTION_ICON_TYPE;
        }

        return $inspection_description_type;
    }

    /**
     * Set Required
     *
     * @param  int $required //Required
     *
     * @return string $br          //Inspection Required
     */
    function setRequired($required)
    {
        $inspection_required = GRN_WORKFLOW_ITEM_NOT_REQUIRED;
        if ($required == 1) {
            $inspection_required = GRN_WORKFLOW_ITEM_REQUIRED;
        }

        return $inspection_required;
    }

    /**
     * Set Br
     *
     * @param  int $br //Br
     *
     * @return string $inspection_br //Inspection Br
     */
    function setBr($br)
    {
        $inspection_br = GRN_WORKFLOW_ITEM_NOT_BR;
        if ($br == 0) {
            $inspection_br = GRN_WORKFLOW_ITEM_BR;
        }

        return $inspection_br;
    }
}

/**
 * Workflow Path Inspection Class
 *
 * @package grn.workflow
 * @abstract
 */
class GRN_Workflow_Path_Inspection extends GRN_Workflow_Inspection_Base
{
    /**
     * Constructor
     *
     */
    function __construct()
    {
        $template_list = [
            //経路の追加
            'path_add'           => [
                'template' => '[create] path_add (fid:%s) (pid:%s) <%s> <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'fid',
                    'pid',
                    'name',
                    'type',
                    'foreign_key',
                    'richeditor',
                    'description',
                    'icon',
                ],
                'action'   => 'create',
                'target'   => 'path_add',
            ],
            //経路の変更
            'path_modify'        => [
                'template' => '[modify] path_modify (pid:%s) <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'pid',
                    'name',
                    'type',
                    'foreign_key',
                    'richeditor',
                    'description',
                    'icon',
                ],
                'action'   => 'modify',
                'target'   => 'path_modify',
            ],
            //経路の共有
            'path_publish'       => [
                'template' => '[modify] path_publish (pid:%s) <%s>',
                'items'    => ['pid', 'type',],
                'action'   => 'modify',
                'target'   => 'path_publish',
            ],
            //共有経路の選択
            'path_select'        => [
                'template' => '[modify] path_select (fid:%s) (pid:%s)',
                'items'    => ['fid', 'pid',],
                'action'   => 'modify',
                'target'   => 'path_select',
            ],
            //管理者メモの変更
            'admin_memo_modify'  => [
                'template' => '[modify] admin_memo_modify (pid:%s) <%s>',
                'items'    => ['pid', 'admin_memo',],
                'action'   => 'modify',
                'target'   => 'admin_memo_modify',
            ],
            //経路の削除
            'path_delete'        => [
                'template' => '[delete] path_delete (pid:%s)',
                'items'    => ['pid',],
                'action'   => 'delete',
                'target'   => 'path_delete',
            ],
            //経路の一括削除
            'path_delete_multi'  => [
                'template' => '[delete] path_delete_multi (pids:%s)',
                'items'    => ['pids',],
                'action'   => 'delete',
                'target'   => 'path_delete_multi',
            ],
            //区切り線の追加
            'path_separator_add' => [
                'template' => '[create] path_separator_add (pid:%s)',
                'items'    => ['pid',],
                'action'   => 'create',
                'target'   => 'path_separator_add',
            ],
            //経路の順番変更
            'path_order'         => [
                'template' => '[modify] path_order <%s>',
                'items'    => ['pids',],
                'action'   => 'modify',
                'target'   => 'path_order',
            ],
            //経路の書き出し
            'path_export'        => [
                'template' => '[export] path_export ',
                'items'    => [],
                'action'   => 'export',
                'target'   => 'path_export',
            ],
            //経路の読み込み
            'path_import'        => [
                'template' => '[import] path_import (pids:%s) (psids:%s) (uids:%s) (gids:%s) (srids:%s) (crids:%s) (skips:%s) (applicants:%s)',
                'items'    => [
                    'pids',
                    'psids',
                    'uids',
                    'gids',
                    'srids',
                    'crids',
                    'skips',
                    'applicants'
                ],
                'action'   => 'import',
                'target'   => 'path_import',
            ],
        ];
        //Set Template List
        parent::__construct($template_list);

        return;
    }

    /**
     * Set Applicant
     *
     * @param  int $applicant //Applicant
     *
     * @return string $inspection_applicant     //Inspection Applicant
     */
    function setApplicant($applicant)
    {
        $inspection_applicant = GRN_WORKFLOW_PATH_STEP_NOT_APPLICANT;
        if ($applicant == 1) {
            $inspection_applicant = GRN_WORKFLOW_PATH_STEP_APPLICANT;
        }

        return $inspection_applicant;
    }

    /**
     * Set Skip
     *
     * @param  int $skip //Skip
     *
     * @return string $inspection_skip     //Inspection Skip
     */
    function setSkip($skip)
    {
        $inspection_skip = GRN_WORKFLOW_PATH_SETTING_NOT_SKIP;
        if ($skip == 1) {
            $inspection_skip = GRN_WORKFLOW_PATH_SETTING_SKIP;
        }

        return $inspection_skip;
    }

    /**
     * Set Richeditor
     *
     * @param  int $richeditor //Richeditor
     *
     * @return string $inspection_richeditor     //Inspection Richeditor
     */
    function setRicheditor($richeditor)
    {
        $inspection_richeditor = null;
        if ($richeditor == 0) {
            $inspection_richeditor
                = GRN_WORKFLOW_PATH_DESCRIPTION_RICHEDITOR_TEXT;
        } elseif ($richeditor == 1) {
            $inspection_richeditor
                = GRN_WORKFLOW_PATH_DESCRIPTION_RICHEDITOR_EDIT;
        }

        return $inspection_richeditor;
    }

    /**
     * Set Icon
     *
     * @param  int $icon //Icon
     *
     * @return string $inspection_icon     //Inspection Icon
     */
    function setIcon($icon)
    {
        $inspection_icon = GRN_WORKFLOW_PATH_DESCRIPTION_NOT_ICON;
        if ($icon == 1) {
            $inspection_icon = GRN_WORKFLOW_PATH_DESCRIPTION_ICON;
        }

        return $inspection_icon;
    }

    /**
     * Set Type
     *
     * @param  int $type //Type
     *
     * @return string $inspection_skip     //Inspection Type
     */
    function setType($type)
    {
        $inspection_type = null;
        if ($type == 1) {
            $inspection_type = GRN_WORKFLOW_PATH_TYPE_MONOPOLY;
        } elseif ($type == 2) {
            $inspection_type = GRN_WORKFLOW_PATH_TYPE_PUBLISH;
        } elseif ($type == 4) {
            $inspection_type = GRN_WORKFLOW_PATH_TYPE_SEPARATOR;
        }

        return $inspection_type;
    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_Path_Inspection $instance                   //Instance of GRN_Workflow_Path_Inspection
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_Path_Inspection();
        }

        return $_instance;
    }
}

/**
 * Workflow Path Step Inspection Class
 *
 * @package grn.workflow
 * @abstract
 */
class GRN_Workflow_Path_Step_Inspection extends GRN_Workflow_Inspection_Base
{
    /**
     * Constructor
     *
     */
    function __construct()
    {
        $template_list = [
            //経路ステップの追加
            'path_step_add'             => [
                'template' => '[create] path_step_add (pid:%s) (psid:%s) <%s> <%s> <%s> <%s>',
                'items'    => [
                    'pid',
                    'psid',
                    'role',
                    'code',
                    'type',
                    'acceptance_type',
                    'change_path',
                ],
                'action'   => 'create',
                'target'   => 'path_step_add',
            ],
            //経路ステップの変更
            'path_step_modify'          => [
                'template' => '[modify] path_step_modify (psid:%s) <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'psid',
                    'role',
                    'code',
                    'path',
                    'type',
                    'acceptance_type',
                    'change_path',
                ],
                'action'   => 'modify',
                'target'   => 'path_step_modify',
            ],
            //経路ステップの削除
            'path_step_delete'          => [
                'template' => '[delete] path_step_delete (psid:%s)',
                'items'    => ['psid',],
                'action'   => 'delete',
                'target'   => 'path_step_delete',
            ],
            //経路ステップの一括削除
            'path_step_delete_multi'    => [
                'template' => '[delete] path_step_delete_multi (psids:%s)',
                'items'    => ['psids',],
                'action'   => 'delete',
                'target'   => 'path_step_delete_multi',
            ],
            //初期値の追加
            'default_add'               => [
                'template' => '[create] default_add (psid:%s) (uids:%s) (gids:%s) (srids:%s) <%s> <%s>',
                'items'    => [
                    'psid',
                    'uids',
                    'gids',
                    'srids',
                    'skip',
                    'applicant',
                ],
                'action'   => 'create',
                'target'   => 'default_add',
            ],
            //初期値の一括削除
            'default_delete_multi'      => [
                'template' => '[delete] default_delete_multi (psid:%s) (uids:%s) (gids:%s) (srids:%s) <%s> <%s>',
                'items'    => [
                    'psid',
                    'uids',
                    'gids',
                    'srids',
                    'skip',
                    'applicant'
                ],
                'action'   => 'delete',
                'target'   => 'default_delete_multi',
            ],
            //初期値の全削除
            'default_delete_all'        => [
                'template' => '[delete] default_delete_all (psid:%s)',
                'items'    => ['psid',],
                'action'   => 'delete',
                'target'   => 'default_delete_all',
            ],
            //（省略）の設定
            'default_skip_set'          => [
                'template' => '[modify] default_skip_set (psid:%s)',
                'items'    => ['psid',],
                'action'   => 'modify',
                'target'   => 'default_skip_set',
            ],
            //順番変更
            'path_step_order'           => [
                'template' => '[modify] path_step_order (pid:%s) (psids:%s)',
                'items'    => ['pid', 'psids',],
                'action'   => 'modify',
                'target'   => 'path_step_order',
            ],
            //経路ステップの変更
            'petition_path_step_modify' => [
                'template' => '[modify] petition_path_step_modify (add_uids:%s) (deleted_uids:%s) <%s>',
                'items'    => ['add_uids', 'deleted_uids', 'comment',],
                'action'   => 'modify',
                'target'   => 'petition_path_step_modify',
            ],
            //上長選択の変更
            'default_chief_set'         => [
                'template' => '[modify] default_chief_set (rid:%s) (psid:%s) <%s>',
                'items'    => ['rid', 'psid', 'chief',],
                'action'   => 'modify',
                'target'   => 'default_chief_set',
            ],
            //上長選択の変更
            'default_change_path'       => [
                'template' => '[modify] default_change_path (psid:%s) <%s>',
                'items'    => ['psid', 'change_path',],
                'action'   => 'modify',
                'target'   => 'default_change_path',
            ],
        ];
        //Set Template List
        parent::__construct($template_list);

        return;
    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_Path_Step_Inspection $instance                   //Instance of GRN_Workflow_Path_Step_Inspection
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_Path_Step_Inspection();
        }

        return $_instance;
    }

    /**
     * Set Type
     *
     * @param  int $type //Type
     *
     * @return string $inspection_type  //Inspection  Type
     */
    function setType($type)
    {
        $inspection_type = null;
        if ($type == 0) {
            $inspection_type = GRN_WORKFLOW_PATH_STEP_TYPE_APPROVAL;
        } elseif ($type == 1) {
            $inspection_type = GRN_WORKFLOW_PATH_STEP_TYPE_CIRCULAR;
        }

        return $inspection_type;
    }

    /**
     * Set Acceptance Type
     *
     * @param  int $acceptance_type //Acceptance Type
     *
     * @return string $inspection_acceptance_type  //Inspection Acceptance Type
     */
    function setAcceptanceType($acceptance_type)
    {
        $inspection_acceptance_type
            = GRN_WORKFLOW_PATH_STEP_ACCEPTANCE_TYPE_AND;
        if ($acceptance_type == 1) {
            $inspection_acceptance_type
                = GRN_WORKFLOW_PATH_STEP_ACCEPTANCE_TYPE_OR;
        }

        return $inspection_acceptance_type;
    }

    /**
     * Set Change Path
     *
     * @param  int $change_path //Change Path
     *
     * @return string $inspection_change_path     //Inspection Change Path
     */
    function setChangePath($change_path)
    {
        $inspection_change_path
            = GRN_WORKFLOW_PATH_STEP_CHANGE_PATH_STEP_NOT_PERMISSION;
        if ($change_path == 1) {
            $inspection_change_path
                = GRN_WORKFLOW_PATH_STEP_CHANGE_PATH_STEP_PERMISSION;
        }

        return $inspection_change_path;
    }

    /**
     * Set Applicant
     *
     * @param  int $applicant //Applicant
     *
     * @return string $inspection_applicant     //Inspection Applicant
     */
    function setApplicant($applicant)
    {
        $inspection_applicant = GRN_WORKFLOW_PATH_STEP_NOT_APPLICANT;
        if ($applicant == 1) {
            $inspection_applicant = GRN_WORKFLOW_PATH_STEP_APPLICANT;
        }

        return $inspection_applicant;
    }

    /**
     * Set Skip
     *
     * @param  int $skip //Skip
     *
     * @return string $inspection_skip     //Inspection Skip
     */
    function setSkip($skip)
    {
        $inspection_skip = GRN_WORKFLOW_PATH_STEP_NOT_SKIP;
        if ($skip == 1) {
            $inspection_skip = GRN_WORKFLOW_PATH_STEP_SKIP;
        }

        return $inspection_skip;
    }

    /**
     * Set Chief
     *
     * @param  int $chief //Chief
     *
     * @return string $inspection_chief     //Inspection Chief
     */
    function setChief($chief)
    {
        $inspection_chief = GRN_WORKFLOW_DEFAULT_CHIEF_SET_CHIEF_NOT_SELECTED;
        if ($chief == 1) {
            $inspection_chief = GRN_WORKFLOW_DEFAULT_CHIEF_SET_CHIEF_SELECTED;
        }

        return $inspection_chief;
    }

    function setDenyChangePath($deny_change_path)
    {
        $result = GRN_WORKFLOW_DEFAULT_ALLOW_CHANGE_PATH;
        if ($deny_change_path) {
            $result = GRN_WORKFLOW_DEFAULT_DENY_CHANGE_PATH;
        }

        return $result;
    }
}


/**
 * Workflow Path Skip Inspection Class
 *
 * @package grn.workflow
 * @abstract
 */
class GRN_Workflow_Path_Skip_Inspection extends GRN_Workflow_Inspection_Base
{
    /**
     * Constructor
     *
     */
    function __construct()
    {
        $template_list = [
            //経路分岐情報の設定
            'path_skip_set'    => [
                'template' => '[create] path_skip_set (fid:%s) (sid:%s) (iid:%s)',
                'items'    => ['fid', 'sid', 'iid',],
                'action'   => 'create',
                'target'   => 'path_skip_set',
            ],
            //経路分岐情報の削除
            'path_skip_delete' => [
                'template' => '[delete] path_skip_delete (sid:%s)',
                'items'    => ['sid',],
                'action'   => 'delete',
                'target'   => 'path_skip_delete',
            ],
        ];
        //Set Template List
        parent::__construct($template_list);

        return;
    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_Path_Skip_Inspection $instance                   //Instance of GRN_Workflow_Path_Skip_Inspection
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_Path_Skip_Inspection();
        }

        return $_instance;
    }
}


/**
 * Workflow Path Condition Inspection Class
 *
 * @package grn.workflow
 * @abstract
 */
class GRN_Workflow_Path_Condition_Inspection
    extends GRN_Workflow_Inspection_Base
{
    /**
     * Constructor
     *
     */
    function __construct()
    {
        $template_list = [
            //経路分岐条件の設定
            'path_condition_add'          => [
                'template' => '[create] path_condition_add (sid:%s) (pcid:%s) <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'sid',
                    'pcid',
                    'name',
                    'number',
                    'operator',
                    'option',
                    'path_skip',
                ],
                'action'   => 'create',
                'target'   => 'path_condition_add',
            ],
            //経路分岐条件の設定
            'path_condition_modify'       => [
                'template' => '[modify] path_condition_modify (pcid:%s) <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'pcid',
                    'name',
                    'number',
                    'operator',
                    'option',
                    'path_skip',
                ],
                'action'   => 'modify',
                'target'   => 'path_condition_modify',
            ],
            //経路分岐条件の削除
            'path_condition_delete'       => [
                'template' => '[delete] path_condition_delete (pcid:%s)',
                'items'    => ['pcid',],
                'action'   => 'delete',
                'target'   => 'path_condition_delete',
            ],
            //経路分岐条件の削除
            'path_condition_delete_multi' => [
                'template' => '[delete] path_condition_delete_multi (pcids:%s)',
                'items'    => ['pcids',],
                'action'   => 'delete',
                'target'   => 'path_condition_delete_multi',
            ],
            //経路分岐条件の順番変更
            'path_condition_order'        => [
                'template' => '[modify] path_condition_order (sid:%s) (pcids:%s)',
                'items'    => ['sid', 'pcids',],
                'action'   => 'modify',
                'target'   => 'path_condition_order',
            ],
        ];
        //Set Template List
        parent::__construct($template_list);

        return;
    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_Path_Condition_Inspection $instance                   //Instance of GRN_Workflow_Path_Condition_Inspection
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_Path_Condition_Inspection();
        }

        return $_instance;
    }
}


/**
 * Workflow Category Accesses Inspection Class
 *
 * @package grn.workflow
 * @abstract
 */
class GRN_Workflow_Category_Accesses_Inspection
    extends GRN_Workflow_Inspection_Base
{
    /**
     * Constructor
     *
     */
    function __construct()
    {
        $template_list = [

            //セキュリティモデルの変更
            'access_model_modify'      => [
                'template' => '[modify] access_model_modify (cid:%s) <%s>',
                'items'    => ['cid', 'security_model',],
                'action'   => 'modify',
                'target'   => 'access_model_modify',
            ],
            //アクセス権の追加
            'access_add'               => [
                'template' => '[create] access_add (cid:%s) (uids:%s) (gids:%s) (srids:%s) (drids:%s) <%s> <%s>',
                'items'    => [
                    'cid',
                    'uids',
                    'gids',
                    'srids',
                    'drids',
                    'security_model',
                    'authority',
                ],
                'action'   => 'create',
                'target'   => 'access_add',
            ],
            //アクセス権の一括削除
            'access_delete_multi'      => [
                'template' => '[delete] access_delete_multi (cid:%s) (uids:%s) (gids:%s) (srids:%s) (drids:%s)',
                'items'    => ['cid', 'uids', 'gids', 'srids', 'drids',],
                'action'   => 'delete',
                'target'   => 'access_delete_multi',
            ],
            //アクセス権の全削除
            'access_delete_all'        => [
                'template' => '[delete] access_delete_all (cid:%s)',
                'items'    => ['cid',],
                'action'   => 'delete',
                'target'   => 'access_delete_all',
            ],
            //アクセス権の書き出し
            'category_accesses_export' => [
                'template' => '[export] category_accesses_export',
                'items'    => [],
                'action'   => 'export',
                'target'   => 'category_accesses_export',
            ],
            //アクセス権の読み込み
            'category_accesses_import' => [
                'template' => '[import] category_accesses_import <%s> <%s> <%s> <%s>',
                'items'    => ['foreign_key', 'item', 'value', 'name',],
                'action'   => 'import',
                'target'   => 'category_accesses_import',
            ],
        ];
        //Set Template List
        parent::__construct($template_list);

        return;
    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_Category_Accesses_Inspection $instance                   //Instance of GRN_Workflow_Category_Accesses_Inspection
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_Category_Accesses_Inspection();
        }

        return $_instance;
    }
}


/**
 * Workflow Change Accesses Inspection Class
 *
 * @package grn.workflow
 * @abstract
 */
class GRN_Workflow_Change_Accesses_Inspection
    extends GRN_Workflow_Inspection_Base
{
    /**
     * Constructor
     *
     */
    function __construct()
    {
        $template_list = [
            //改変アクセス権の追加
            'change_accesses_add_list' => [
                'template' => '[create] change_accesses_add_list (iid:%s) (psids:%s) <%s>',
                'items'    => ['iid', 'psids', 'attach_file',],
                'action'   => 'create',
                'target'   => 'change_accesses_add_list',
            ],
        ];
        //Set Template List
        parent::__construct($template_list);

        return;
    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_Change_Accesses_Inspection $instance                   //Instance of GRN_Workflow_Change_Accesses_Inspection
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_Change_Accesses_Inspection();
        }

        return $_instance;
    }
}


/**
 * Workflow Petition Inspection Class
 *
 * @package grn.workflow
 * @abstract
 */
class GRN_Workflow_Petition_Inspection extends GRN_Workflow_Inspection_Base
{
    /**
     * Constructor
     *
     */
    function __construct()
    {
        $template_list = [
            //申請追加
            'petition_add'                         => [
                'template' => '[create] petition_add (pid:%s) (fid:%s) <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'pid',
                    'fid',
                    'name',
                    'icon_type',
                    'icon_id',
                    'icon_url',
                    'serial_type',
                    'serial_format',
                    'serial_number',
                    'subject',
                ],
                'action'   => 'create',
                'target'   => 'petition_add',
            ],
            //下書き追加
            'petition_draft_add'                   => [
                'template' => '[create] petition_draft_add (pid:%s) (fid:%s) <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'pid',
                    'fid',
                    'name',
                    'icon_type',
                    'icon_id',
                    'icon_url',
                    'serial_type',
                    'serial_format',
                    'serial_number',
                    'subject',
                ],
                'action'   => 'create',
                'target'   => 'petition_draft_add',
            ],
            //下書き->申請
            'petition_draft'                       => [
                'template' => '[modify] petition_draft (pid:%s) (fid:%s) <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'pid',
                    'fid',
                    'name',
                    'icon_type',
                    'icon_id',
                    'icon_url',
                    'serial_type',
                    'serial_format',
                    'serial_number',
                    'subject',
                ],
                'action'   => 'modify',
                'target'   => 'petition_draft',
            ],
            //下書き->下書き
            'petition_draft_draft'                 => [
                'template' => '[modify] petition_draft_draft (pid:%s) (fid:%s) <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'pid',
                    'fid',
                    'name',
                    'icon_type',
                    'icon_id',
                    'icon_url',
                    'serial_type',
                    'serial_format',
                    'serial_number',
                    'subject',
                ],
                'action'   => 'modify',
                'target'   => 'petition_draft_draft',
            ],
            //差戻し->申請
            'remand_petition'                      => [
                'template' => '[modify] remand_petition (pid:%s) (fid:%s) <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'pid',
                    'fid',
                    'name',
                    'icon_type',
                    'icon_id',
                    'icon_url',
                    'serial_type',
                    'serial_format',
                    'serial_number',
                    'subject',
                ],
                'action'   => 'modify',
                'target'   => 'remand_petition',
            ],
            //再利用->申請
            'petition_reuse'                       => [
                'template' => '[create] petition_reuse (pid:%s) (fid:%s) <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'pid',
                    'fid',
                    'name',
                    'icon_type',
                    'icon_id',
                    'icon_url',
                    'serial_type',
                    'serial_format',
                    'serial_number',
                    'subject',
                ],
                'action'   => 'create',
                'target'   => 'petition_reuse',
            ],
            //再利用->下書き
            'petition_reuse_draft'                 => [
                'template' => '[create] petition_reuse_draft (pid:%s) (fid:%s) <%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'pid',
                    'fid',
                    'name',
                    'icon_type',
                    'icon_id',
                    'icon_url',
                    'serial_type',
                    'serial_format',
                    'serial_number',
                    'subject',
                ],
                'action'   => 'create',
                'target'   => 'petition_reuse_draft',
            ],
            //申請の削除
            'petition_delete'                      => [
                'template' => '[delete] petition_delete (pid:%s)',
                'items'    => ['pid',],
                'action'   => 'delete',
                'target'   => 'petition_delete',
            ],
            //申請の一括削除
            'petition_delete_multi'                => [
                'template' => '[delete] petition_delete_multi (pids:%s)',
                'items'    => ['pids',],
                'action'   => 'delete',
                'target'   => 'petition_delete_multi',
            ],
            //申請の全削除
            'petition_delete_all'                  => [
                'template' => '[delete] petition_delete_all (fid:%s)',
                'items'    => ['fid',],
                'action'   => 'delete',
                'target'   => 'petition_delete_all',
            ],
            //フォルダー追加
            'attach_folder_list'                   => [
                'template' => '[create] attach_folder_list (petition_id:%s) <%s> <%s>',
                'items'    => [
                    'petition_id',
                    'user_id_list',
                    'folder_foreign_key',
                ],
                'action'   => 'create',
                'target'   => 'attach_folder_list',
            ],
            //フォルダー削除
            'detach_folder_list'                   => [
                'template' => '[delete] detach_folder_list (petition_id:%s) <%s> <%s>',
                'items'    => [
                    'petition_id',
                    'user_id_list',
                    'folder_foreign_key',
                ],
                'action'   => 'delete',
                'target'   => 'detach_folder_list',
            ],
            //申請番号取得
            'set_petition_number'                  => [
                'template' => '[create] set_petition_number (petition_number:%s) (petition_id:%s) (form_id:%s)',
                'items'    => ['petition_number', 'petition_id', 'form_id',],
                'action'   => 'create',
                'target'   => 'set_petition_number',
            ],
            //承認する
            'petition_accept'                      => [
                'template' => '[modify] petition_accept (pid:%s) <%s>',
                'items'    => ['pid', 'comment',],
                'action'   => 'modify',
                'target'   => 'petition_accept',
            ],
            //却下する
            'petition_reject'                      => [
                'template' => '[modify] petition_reject (pid:%s) <%s>',
                'items'    => ['pid', 'comment',],
                'action'   => 'modify',
                'target'   => 'petition_reject',
            ],
            //確認する
            'petition_confirm'                     => [
                'template' => '[modify] petition_confirm (pid:%s) <%s>',
                'items'    => ['pid', 'comment',],
                'action'   => 'modify',
                'target'   => 'petition_confirm',
            ],
            //差し戻す
            'petition_remand'                      => [
                'template' => '[modify] petition_remand (pid:%s) <%s>',
                'items'    => ['pid', 'comment',],
                'action'   => 'modify',
                'target'   => 'petition_remand',
            ],
            //申請の取り戻し（取り消し）
            'petition_cancel'                      => [
                'template' => '[modify] petition_cancel (pid:%s) (uid:%s) <%s> <%s> <%s>',
                'items'    => ['pid', 'uid', 'status', 'comment', 'ptime',],
                'action'   => 'modify',
                'target'   => 'petition_cancel',
            ],
            //申請データの書き出し
            'petition_export'                      => [
                'template' => '[export] petition_export',
                'items'    => [],
                'action'   => 'export',
                'target'   => 'petition_export',
            ],
            //申請データの印刷
            'petition_print'                       => [
                'template' => '[print] petition_print',
                'items'    => [],
                'action'   => 'print',
                'target'   => 'petition_print',
            ],

            //finally approved with approved_number
            'petition_accept_with_approved_number' => [
                'template' => '[modify] petition_accept (pid:%s) <%s>',
                'items'    => [
                    'pid',
                    'comment',
                    'approved_serial_type',
                    'approved_serial_format',
                    'approved_serial_number'
                ],
                'action'   => 'modify',
                'target'   => 'petition_accept',
            ],
        ];
        //Set Template List
        parent::__construct($template_list);

        return;
    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_Petition_Inspection $instance                   //Instance of GRN_Workflow_Petition_Inspection
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_Petition_Inspection();
        }

        return $_instance;
    }
}

/**
 * Workflow Folder Relation Inspection Class
 *
 * @package grn.workflow
 * @abstract
 */
class GRN_Workflow_Folder_Relation_Inspection
    extends GRN_Workflow_Inspection_Base
{
    /**
     * Constructor
     *
     */
    function __construct()
    {
        $template_list = [
            //削除
            'folder_relation_delete'       => [
                'template' => '[delete] folder_relation_delete (foid:%s) (pid:%s)',
                'items'    => ['foid', 'pid',],
                'action'   => 'delete',
                'target'   => 'folder_relation_delete',
            ],
            //一括削除
            'folder_relation_delete_multi' => [
                'template' => '[delete] folder_relation_delete_multi (foid:%s) (pids:%s)',
                'items'    => ['foid', 'pids',],
                'action'   => 'delete',
                'target'   => 'folder_relation_delete_multi',
            ],
        ];
        //Set Template List
        parent::__construct($template_list);

        return;
    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_Folder_Relation_Inspection $instance                   //Instance of GRN_Workflow_Folder_Relation_Inspection
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_Folder_Relation_Inspection();
        }

        return $_instance;
    }
}

/**
 * Workflow Category Manage Inspection Class
 *
 * @package grn.workflow
 * @abstract
 */
class GRN_Workflow_Category_Manage_Inspection
    extends GRN_Workflow_Inspection_Base
{
    /**
     * Constructor
     *
     */
    function __construct()
    {
        $template_list = [
            //運用管理権限の追加
            'privilege_add'          => [
                'template' => '[create] privilege_add (uids:%s) (gids:%s) (srids:%s) (drids:%s)',
                'items'    => ['uids', 'gids', 'srids', 'drids',],
                'action'   => 'create',
                'target'   => 'privilege_add',
            ],
            //運用管理権限の削除
            'privilege_delete'       => [
                'template' => '[delete] privilege_delete (cids:%s) (tids:%s) <%s>',
                'items'    => ['cids', 'tids', 'target_types',],
                'action'   => 'delete',
                'target'   => 'privilege_delete',
            ],
            //運用管理権限の一括削除
            'privilege_delete_multi' => [
                'template' => '[delete] privilege_delete_multi (cid:%s) (uids:%s) (gids:%s) (srids:%s) (drids:%s)',
                'items'    => ['cid', 'uids', 'gids', 'srids', 'drids'],
                'action'   => 'delete',
                'target'   => 'privilege_delete_multi',
            ],
            //運用管理権限の全削除
            'privilege_delete_all'   => [
                'template' => '[delete] privilege_delete_all (cid:%s)',
                'items'    => ['cid',],
                'action'   => 'delete',
                'target'   => 'privilege_delete_all',
            ],
        ];
        //Set Template List
        parent::__construct($template_list);

        return;
    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_Category_Manage_Inspection $instance                   //Instance of GRN_Workflow_Category_Manage_Inspection
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_Category_Manage_Inspection();
        }

        return $_instance;
    }
}

/**
 * Workflow Availability User Inspection Class
 *
 * @package grn.workflow
 * @abstract
 */
class GRN_Workflow_Availability_User_Inspection
    extends GRN_Workflow_Inspection_Base
{
    /**
     * Constructor
     *
     */
    function __construct()
    {
        $template_list = [
            //利用ユーザーの追加
            'availability_user_add'          => [
                'template' => '[create] availability_user_add (uids:%s) <%s> <%s>',
                'items'    => ['uids', 'authority_cellular', 'ctime',],
                'action'   => 'create',
                'target'   => 'availability_user_add',
            ],
            //利用ユーザーの変更
            'availability_user_modify'       => [
                'template' => '[modify] availability_user_modify (uids:%s) <%s>',
                'items'    => ['uids', 'authority_cellular',],
                'action'   => 'modify',
                'target'   => 'availability_user_modify',
            ],
            //利用ユーザーの削除
            'availability_user_delete'       => [
                'template' => '[delete] availability_user_delete (uids:%s)',
                'items'    => ['uids',],
                'action'   => 'delete',
                'target'   => 'availability_user_delete',
            ],
            //利用ユーザーの一括削除
            'availability_user_delete_multi' => [
                'template' => '[delete] availability_user_delete_multi (uids:%s)',
                'items'    => ['uids',],
                'action'   => 'delete',
                'target'   => 'availability_user_delete_multi',
            ],
            //利用ユーザーの全削除
            'availability_user_delete_all'   => [
                'template' => '[delete] availability_user_delete_all',
                'items'    => [],
                'action'   => 'delete',
                'target'   => 'availability_user_delete_all',
            ],
            //利用ユーザーの書き出し
            'availability_user_export'       => [
                'template' => '[export] availability_user_export',
                'items'    => [],
                'action'   => 'export',
                'target'   => 'availability_user_export',
            ],
            //利用ユーザーの読み込み
            'availability_user_import'       => [
                'template' => '[import] availability_user_import (foreign_key: <%s>) <%s>',
                'items'    => ['foreign_key', 'name'],
                'action'   => 'import',
                'target'   => 'availability_user_import',
            ],
        ];
        //Set Template List
        parent::__construct($template_list);

        return;
    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_Availability_User_Inspection $instance                   //Instance of GRN_Workflow_Availability_User_Inspection
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_Availability_User_Inspection();
        }

        return $_instance;
    }

    /**
     * Set setAuthorityCellular
     *
     * @param  int $authority_cellular //Authority Cellular
     *
     * @return string $inspection_authority_cellular     //Inspection Authority Cellular
     */
    function setAuthorityCellular($authority_cellular)
    {
        $inspection_authority_cellular = GRN_WORKFLOW_INSPECTION_FLAG_OFF;
        if ($authority_cellular === '1') {
            $inspection_authority_cellular = GRN_WORKFLOW_INSPECTION_FLAG_ON;
        }

        return $inspection_authority_cellular;
    }
}

/**
 * Workflow Config Inspection Class
 *
 * @package grn.workflow
 * @abstract
 */
class GRN_Workflow_Config_Inspection extends GRN_Workflow_Inspection_Base
{
    /**
     * Constructor
     *
     */
    function __construct()
    {
        $template_list = [
            //ログインURLの設定（ケータイの設定）
            'set_login_url' => [
                'template' => '[config] set_login_url <%s>',
                'items'    => ['login_url',],
                'action'   => 'config',
                'target'   => 'set_login_url',
            ],
            //アカウントの設定（個人設定）
            'account'       => [
                'template' => '[config] account <%s> <%s>',
                'items'    => ['cellular_address', 'suspension',],
                'action'   => 'config',
                'target'   => 'account',
            ],
            //ログインURLの送信（個人設定）
            'send_url'      => [
                'template' => '[config] send_url <%s>',
                'items'    => ['cellular_address',],
                'action'   => 'config',
                'target'   => 'send_url',
            ],
            //mail notification
            'mail_forward'  => [
                'template' => '[config] mail_forward <%s> <%s> <%s>',
                'items'    => ['forward', 'email', 'charset'],
                'action'   => 'config',
                'target'   => 'mail_forward',
            ],
        ];
        //Set Template List
        parent::__construct($template_list);

        return;
    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_Config_Inspection $instance                   //Instance of GRN_Workflow_Config_Inspection
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_Config_Inspection();
        }

        return $_instance;
    }
}

/**
 * Workflow Portlet Inspection Class
 *
 * @package grn.workflow
 * @abstract
 */
class GRN_Workflow_Portlet_Inspection extends GRN_Workflow_Inspection_Base
{
    /**
     * Constructor
     *
     */
    function __construct()
    {
        $template_list = [
            //ポートレットの設定
            'portlet_set' => [
                'template' => '[config] portlet_set <%s> <%s> <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'folder_type',
                    'font_size',
                    'number',
                    'status',
                    'transactor',
                    'time',
                    'rows',
                ],
                'action'   => 'config',
                'target'   => 'portlet_set',
            ],
        ];
        //Set Template List
        parent::__construct($template_list);

        return;
    }

    /**
     * Get Instance
     *
     * return GRN_Workflow_Portlet_Inspection $instance                   //Instance of GRN_Workflow_Portlet_Inspection
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_Portlet_Inspection();
        }

        return $_instance;
    }
}


/**
 * Link Application Inspection Base Class
 *
 * @package grn.workflow
 * @abstract
 */
class GRN_Workflow_Inspection_Base
{
    /** Module ID **/
    var $_module_id = 'grn.workflow';

    /** Inspacetion Message Template List **/
    var $_template_list = null;

    /**
     * Constructor
     *
     */
    function __construct(&$template_list)
    {
        //Set Template List
        $this->_template_list =& $template_list;

        return;
    }

    /**
     * Record Inspection Message
     *
     * @param  string $message_type //Inspaction Message Type
     * @param  array  $message_args //Inspaction Message Argument List
     * @param  string $threshold    //logger category
     *
     * @return bool   $result                     //Result
     */
    function record($message_type, $message_args = [], $threshold = 'notice')
    {
        //Get Inspaction Message Template
        if ( ! array_key_exists($message_type, $this->_template_list)) {
            return false;
        }

        $message_template =& $this->_template_list[$message_type];

        //Create Inspection Massage Template Arg List
        $message_template_args = [];
        $message_template_items =& $message_template['items'];
        $message_action = $message_template['action'];
        $message_target = $message_template['target'];


        foreach ($message_template_items as $message_template_item) {
            if ( ! array_key_exists($message_template_item, $message_args)) {
                continue;
            }
            $value = $message_args[$message_template_item];
            if (is_array($value)) {
                $array_value = [];
                $i = 1;
                foreach ($value as $v) {
                    $v = "'" . mb_substr(addslashes($v), 0, 100)
                         . "'";
                    $v = $message_template_item . '_' . $i . ':'
                         . $v;
                    $array_value[] = $v;
                    $i++;
                }
                $value = implode(',', array_values($array_value));
            } elseif ( ! is_numeric($value)) {
                $value = "'" . mb_substr(addslashes($value), 0, 100) . "'";
                $value = $message_template_item . ':' . $value;
            } else {
                $value = $message_template_item . ':' . $value;
            }
            $message_template_args[] = $value;
        }
        //Create Inspection Message
        $message = '';
        $message .= '[' . $message_action . '] ';
        $message .= $message_target . ' ';

        if (0 < count($message_template_args)) {
            $message .= ' (' . implode(', ', $message_template_args) . ')';
        }

        require_once('grn/logger.csp');
        $logger_manager = CB_LoggerManager::getInstance();
        $logger = $logger_manager->getLogger($this->_module_id);
        //Write Inspection Message
        switch ($threshold) {
            case 'notice':
                $logger->noticeEx($message_action, $message_target, $message);
                break;
            default:
                $logger->noticeEx($message_action, $message_target, $message);
                break;
        }

        //Return Result
        return true;
    }

    /**
     * Check Enable Inspection Message
     *
     * @param  string $threshold //logger category
     *
     * @return bool   $result                     //Enable/Disable Inspection Message
     */
    function isEnabled($threshold = 'notice')
    {
        //Get Logger
        require_once('grn/logger.csp');
        $logger_manager = CB_LoggerManager::getInstance();
        $logger = $logger_manager->getLogger($this->_module_id);

        //Check Threshold
        $result = false;
        switch ($threshold) {
            case 'critical':
                $result = $logger->isCriticalEnabled();
                break;
            case 'error':
                $result = $logger->isErrorEnabled();
                break;
            case 'warning':
                $result = $logger->isWarningEnabled();
                break;
            case 'notice':
                $result = $logger->isNoticeEnabled();
                break;
            case 'debug':
                $result = $logger->isDebugEnabled();
                break;
            default:
                $result = false;
                break;
        }

        //Return Result
        return $result;
    }

    /**
     * Set Flag
     *
     * $param  int    $flag               //Flag
     * $return string $inspection_flag    //Inspection Flag
     */
    function setFlag($flag)
    {
        $inspection_flag = GRN_WORKFLOW_INSPECTION_FLAG_OFF;
        if ($flag == 1) {
            $inspection_flag = GRN_WORKFLOW_INSPECTION_FLAG_ON;
        }

        return $inspection_flag;
    }
}

/**
 * Workflow Category Agent Inspection Class
 *
 * @package grn.workflow
 * @abstract
 */
class GRN_Workflow_Agent_Inspection extends GRN_Workflow_Inspection_Base
{
    /**
     * Constructor
     *
     */
    function __construct()
    {
        $template_list = [
            //代理申請者の読み込み
            'agent_petition_import' => [
                'template' => '[import] agent_petition_import <%s> <%s>',
                'items'    => ['foreign_key', 'agent'],
                'action'   => 'import',
                'target'   => 'agent_petition_import',
            ],
            //代理承認者の読み込み
            'agent_approval_import' => [
                'template' => '[import] agent_approval_import <%s> <%s>',
                'items'    => ['foreign_key', 'agent'],
                'action'   => 'import',
                'target'   => 'agent_approval_import',
            ],
            //代理申請者の書き出し
            'agent_petition_export' => [
                'template' => '[export] agent_petition_export',
                'items'    => [],
                'action'   => 'export',
                'target'   => 'agent_petition_export',
            ],
            //代理承認者の書き出し
            'agent_approval_export' => [
                'template' => '[export] agent_approval_export',
                'items'    => [],
                'action'   => 'export',
                'target'   => 'agent_approval_export',
            ],
            //代理人の変更
            'agent_modify'          => [
                'template' => '[modify] agent_modify (uids:%s) (uids:%s)',
                'items'    => ['uid', 'agent_petition', 'agent_approval'],
                'action'   => 'modify',
                'target'   => 'agent_modify',
            ],
        ];
        //Set Template List
        parent::__construct($template_list);

        return;
    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_Agent_Inspection $instance                   //Instance of GRN_Workflow_Category_Accesses_Inspection
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_Agent_Inspection();
        }

        return $_instance;
    }
}

/**
 * Workflow Category Public Inspection Class
 *
 * @package grn.workflow
 * @abstract
 */
class GRN_Workflow_Category_Public_Inspection
    extends GRN_Workflow_Inspection_Base
{
    /**
     * Constructor
     *
     */
    function __construct()
    {
        $template_list = [

            //セキュリティモデルの変更
            'public_model_modify' => [
                'template' => '[modify] public_model_modify (cid:%s) <%s>',
                'items'    => ['cid', 'security_model',],
                'action'   => 'modify',
                'target'   => 'public_model_modify',
            ],
            //公開設定の追加
            'public_add'          => [
                'template' => '[create] public_add (uids:%s) (gids:%s) (srids:%s) (drids:%s) <%s> <%s>',
                'items'    => [
                    'uids',
                    'gids',
                    'srids',
                    'drids',
                    'security_model',
                    'authority',
                ],
                'action'   => 'create',
                'target'   => 'public_add',
            ],
            //公開設定の一括削除
            'public_delete_multi' => [
                'template' => '[delete] public_delete_multi (cid:%s) (uids:%s) (gids:%s) (srids:%s) (drids:%s)',
                'items'    => ['cid', 'uids', 'gids', 'srids', 'drids',],
                'action'   => 'delete',
                'target'   => 'public_delete_multi',
            ],
            //公開設定の全削除
            'public_delete_all'   => [
                'template' => '[delete] public_delete_all (cid:%s)',
                'items'    => ['cid',],
                'action'   => 'delete',
                'target'   => 'public_delete_all',
            ],
        ];
        //Set Template List
        parent::__construct($template_list);

        return;
    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_Category_Public_Inspection $instance                   //Instance of GRN_Workflow_Category_Public_Inspection
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_Category_Public_Inspection();
        }

        return $_instance;
    }
}

/**
 * Workflow Category Public Inspection Class
 *
 * @package grn.workflow
 * @abstract
 */
class GRN_Workflow_Item_Access_Inspection extends GRN_Workflow_Inspection_Base
{
    /**
     * Constructor
     *
     */
    function __construct()
    {
        $template_list = [
            //アクセス権の変更
            'item_access_modify' => [
                'template' => '[modify] item_access_modify (fid:%s) (iid:%s) (psid:%s) <%s> <%s>',
                'items'    => ['fid', 'iid', 'psid', 'view', 'edit',],
                'action'   => 'modify',
                'target'   => 'item_access_modify',
            ],
        ];
        //Set Template List
        parent::__construct($template_list);

        return;
    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_Item_Access_Inspection $instance                   //Instance of GRN_Workflow_Category_Public_Inspection
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_Item_Access_Inspection();
        }

        return $_instance;
    }
}

class GRN_Workflow_Category_Local_Inspection
    extends GRN_Workflow_Inspection_Base
{
    var $_logger = null;

    /**
     * Constructor
     *
     */
    public function __construct()
    {
        $template_list = [
            'category_local_add'           => [
                'action' => 'create',
                'target' => 'category_local',
            ],
            'category_local_modify'        => [
                'action' => 'modify',
                'target' => 'category_local',
            ],
            'category_local_delete'        => [
                'action' => 'delete',
                'target' => 'category_local',
            ],
            'category_local_add_import'    => [
                'action' => 'import',
                'target' => 'category_local',
            ],
            'category_local_modify_import' => [
                'action' => 'import',
                'target' => 'category_local',
            ],
            'category_local_delete_import' => [
                'action' => 'import_delete',
                'target' => 'category_local',
            ],
            'category_local_export'        => [
                'action' => 'export',
                'target' => 'category_local',
            ],
        ];

        require_once('grn/logger.csp');
        $logger_manager = CB_LoggerManager::getInstance();
        $this->_logger = &$logger_manager->getLogger($this->_module_id);

        //Set Template List
        parent::__construct($template_list);
    }

    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Workflow_Category_Local_Inspection $instance                   //Instance of GRN_Bulletin_Category_Local_Inspection
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Record Inspection Message
     *
     * @param  string $message_type //Inspaction Message Type
     * @param  array  $message_args //Inspaction Message Argument List
     * @param  string $threshold    //logger category
     *
     * @return bool   $result                     //Result
     */
    function record($message_type, $message_args = [], $threshold = 'notice')
    {
        //Get Inspaction Message Template
        if ( ! array_key_exists($message_type, $this->_template_list)) {
            return false;
        }
        $message_template = $this->_template_list[$message_type];

        $message_action = $message_template['action'];
        $message_target = $message_template['target'];

        $this->_logger->noticeEx($message_action, $message_target,
            $message_args);

        //Return Result
        return true;
    }
}

class GRN_Workflow_Auto_Schedule_Setting_Inspection
    extends GRN_Workflow_Inspection_Base
{
    /**
     * Constructor
     */
    public function __construct()
    {
        $template_list = [
            //一般設定
            'schedule cooperation' => [
                'template' => '[config] schedule cooperation <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'use',
                    'fid',
                    'event_type',
                    'menu_title',
                    'start_iid',
                    'start_display_name',
                    'end_iid',
                    'end_display_name'
                ],
                'action'   => 'config',
                'target'   => 'schedule cooperation',
            ],
        ];
        //Set Template List
        parent::__construct($template_list);

        return;
    }

    /**
     * @return GRN_Workflow_Auto_Schedule_Setting_Inspection
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_Auto_Schedule_Setting_Inspection();
        }

        return $_instance;
    }
}

class GRN_Workflow_Auto_Schedule_Register_Inspection
    extends GRN_Workflow_Inspection_Base
{
    /**
     * Constructor
     */
    public function __construct()
    {
        $template_list = [
            //一般設定
            'schedule_info' => [
                'template' => '[cooperation] schedule_info <%s> <%s> <%s> <%s> <%s>',
                'items'    => [
                    'pid',
                    'fid',
                    'subject',
                    'applicant_user_name',
                    'approval_user_name',
                    'event_type',
                    'menu_title',
                    'start_year',
                    'start_month',
                    'start_day',
                    'start_hour',
                    'start_minute',
                    'end_year',
                    'end_month',
                    'end_day',
                    'end_hour',
                    'end_minute',
                    'timezone'
                ],
                'action'   => 'cooperation',
                'target'   => 'schedule_info',
            ],
        ];
        //Set Template List
        parent::__construct($template_list);

        return;
    }

    /**
     * @return GRN_Workflow_Auto_Schedule_Register_Inspection
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_Auto_Schedule_Register_Inspection();
        }

        return $_instance;
    }
}

/**
 * Class GRN_Workflow_Customization_Inspection
 */
class GRN_Workflow_Customization_Inspection extends GRN_Workflow_Inspection_Base
{

    /**
     * GRN_Workflow_Customization_Inspection constructor.
     */
    function __construct()
    {
        $template_list = [];
        parent::__construct($template_list);

        return;
    }

    /**
     * @return GRN_Workflow_Customization_Inspection|null
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_Customization_Inspection();
        }

        return $_instance;
    }

    /**
     * @param $template_name
     * @param $template
     */
    function addTemplate($template_name, $template)
    {
        $this->_template_list[$template_name] = $template;
    }
}
