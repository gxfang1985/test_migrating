<?php

require_once('grn/application.csp');
require_once('grn/CBException.csp');
require_once('grn/DAOFactory.csp');
require_once('workflow/error_code.csp');
require_once('workflow/inspection.csp');

define('CB_WORKFLOW_FACADE_DB_STATUS_INSERT', 1);
define('CB_WORKFLOW_FACADE_DB_STATUS_UPDATE', 2);
define('CB_WORKFLOW_FACADE_DB_STATUS_DELETE', 3);

class WorkflowFacade
{
    private $_db = null;

    public function __construct()
    {
        $app_locator = GRN_ApplicationLocator::instance();
        $this->_db = $app_locator->getConnection('workflow');
    }

    /** ***************************************************** */
    /** -----              GrnWorkflowForm          --------- */
    /** ***************************************************** */
    /**
     * @param $inDataObj
     * @param $inPathId
     *
     * @return GrnWorkflowForm[]
     */
    public function getWorkflowFormListByPathId($inDataObj, $inPathId)
    {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnWorkflowFormDAO();

            $resultList = $dao->getWorkflowFormListByPathId($inDataObj,
                $inPathId);

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /** ***************************************************** */
    /** -----           GrnWorkflowCategory       --------- */
    /** ***************************************************** */
    /**
     * @param $inDataObj
     * @param $inCategoryKey
     *
     * @return bool|GrnWorkflowCategory
     */
    public function referWorkflowCategoryByForeignKey(
        $inDataObj,
        $inCategoryKey
    ) {
        $inDataObj['db'] = $this->_db;
        $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
        $dao = $daoFctry->getGrnWorkflowCategoryDAO();

        $result = $dao->selectByForeignKey($inDataObj, $inCategoryKey);

        return $result;
    }

    /**
     * @param $inDataObj
     * @param $inId
     *
     * @return bool|GrnWorkflowCategory
     */
    public function referWorkflowCategoryById($inDataObj, $inId)
    {
        $inDataObj['db'] = $this->_db;
        $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
        $dao = $daoFctry->getGrnWorkflowCategoryDAO();

        $inLanguage = (array_key_exists('language', $inDataObj))
            ? $inDataObj['language'] : null;
        if (is_null($inLanguage)) {
            $result = $dao->selectDefaultById($inDataObj, $inId);
        } else {
            $result = $dao->selectLocalById($inDataObj, $inId);
        }

        return $result;
    }

    /**
     * @param $inDataObj
     *
     * @return GrnWorkflowCategory[]
     */
    public function getWorkflowCategoryList($inDataObj)
    {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnWorkflowCategoryDAO();
            $inParentId = (array_key_exists('parentId', $inDataObj))
                ? $inDataObj['parentId'] : null;

            if (is_null($inParentId)) {
                $resultList = $dao->getWorkflowCategoryList($inDataObj);
            } else {
                $resultList
                    = $dao->getWorkflowCategoryListByParentId($inDataObj,
                    $inParentId);
            }

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param $inDataObj
     *
     * @return GrnWorkflowCategory[]
     */
    public function getWorkflowCategoryListWithNonLocal($inDataObj)
    {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnWorkflowCategoryDAO();
            $inParentId = (array_key_exists('parentId', $inDataObj))
                ? $inDataObj['parentId'] : null;

            if (is_null($inParentId)) {
                $resultList
                    = $dao->getWorkflowCategoryListWithNonLocal($inDataObj);
            } else {
                $resultList
                    = $dao->getWorkflowCategoryListByParentIdWithNonLocal($inDataObj,
                    $inParentId);
            }

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param $inDataObj
     * @param $inCategoryNameArray
     *
     * @return GrnWorkflowCategory[]
     */
    public function getWorkflowCategoryListByNames(
        $inDataObj,
        $inCategoryNameArray
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnWorkflowCategoryDAO();

            $resultList = $dao->getWorkflowCategoryListByNames($inDataObj,
                $inCategoryNameArray);

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param $inDataObj
     * @param $inCategoryArray
     *
     * @return GrnWorkflowCategory[]
     */
    public function getWorkflowCategoryListByIds($inDataObj, $inCategoryArray)
    {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnWorkflowCategoryDAO();

            $resultList = $dao->getWorkflowCategoryListByIds($inDataObj,
                $inCategoryArray);

            return $resultList;
        } catch (CBException $cbe) {

        }
    }


    /** ***************************************************** */
    /** -----        GrnWorkflowCategoryLocal    --------- */
    /** ***************************************************** */
    /**
     * @param                          $inDataObj
     * @param GrnWorkflowCategoryLocal $inWorkflowCategoryLocalObj
     *
     * @return bool|int
     */
    public function insertWorkflowCategoryLocal(
        $inDataObj,
        $inWorkflowCategoryLocalObj
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnWorkflowCategoryLocalDAO();
            $inspection
                = GRN_Workflow_Category_Local_Inspection::getInstance();

            $insertCount = $dao->insert($inDataObj,
                $inWorkflowCategoryLocalObj);

            if (($insertCount > 0) && ($inspection->isEnabled())) {
                $messageType = 'category_local_add';
                $message_args = [
                    'cid'           => $inWorkflowCategoryLocalObj->getParentId(),
                    'language_code' => $inWorkflowCategoryLocalObj->getLanguageCode(),
                    'category_name' => $inWorkflowCategoryLocalObj->getName(),
                ];

                $inspection->record($messageType, $message_args);
            }

            return $insertCount;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param                          $inDataObj
     * @param GrnWorkflowCategoryLocal $inWorkflowCategoryLocalObj
     *
     * @return int
     */
    public function updateWorkflowCategoryLocal(
        $inDataObj,
        $inWorkflowCategoryLocalObj
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnWorkflowCategoryLocalDAO();

            $inMessageTypeAdd = (array_key_exists('messageTypeAdd',
                $inDataObj)) ? $inDataObj['messageTypeAdd']
                : 'category_local_add';
            $inMessageTypeModify = (array_key_exists('messageTypeModify',
                $inDataObj)) ? $inDataObj['messageTypeModify']
                : 'category_local_modify';
            $inspection
                = GRN_Workflow_Category_Local_Inspection::getInstance();

            $beforWorkflowCategoryLocal
                = $dao->selectByCategoryId_LanguageCode($inDataObj,
                $inWorkflowCategoryLocalObj);
            if ($beforWorkflowCategoryLocal === false) {
                $insertCount = $dao->insert($inDataObj,
                    $inWorkflowCategoryLocalObj);

                if (($insertCount > 0) && ($inspection->isEnabled())) {
                    $message_args = [
                        'cid'           => $inWorkflowCategoryLocalObj->getParentId(),
                        'language_code' => $inWorkflowCategoryLocalObj->getLanguageCode(),
                        'category_name' => $inWorkflowCategoryLocalObj->getName(),
                    ];

                    $inspection->record($inMessageTypeAdd, $message_args);
                }

                return CB_WORKFLOW_FACADE_DB_STATUS_INSERT;
            } else {
                $updateCount = $dao->update($inDataObj,
                    $inWorkflowCategoryLocalObj);

                //MySQLは変化が無い場合UPDATE結果が0件になる。しかし、現在のGaroonのログ仕様は変化が無くても変更ログを出力しているので、更新件数が0でもログ出力している
                if (($updateCount >= 0) && ($inspection->isEnabled())) {
                    $message_args = [
                        'cid'                => $inWorkflowCategoryLocalObj->getParentId(),
                        'language_code'      => $inWorkflowCategoryLocalObj->getLanguageCode(),
                        'prev_category_name' => $beforWorkflowCategoryLocal->getName(),
                        'next_category_name' => $inWorkflowCategoryLocalObj->getName(),
                    ];

                    $inspection->record($inMessageTypeModify, $message_args);
                }

                return CB_WORKFLOW_FACADE_DB_STATUS_UPDATE;
            }
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param                          $inDataObj
     * @param GrnWorkflowCategoryLocal $inWorkflowCategoryLocalObj
     *
     * @return bool|int
     */
    public function deleteWorkflowCategoryLocal(
        $inDataObj,
        $inWorkflowCategoryLocalObj
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnWorkflowCategoryLocalDAO();

            $inMessageTypeDelete = (array_key_exists('messageTypeDelete',
                $inDataObj)) ? $inDataObj['messageTypeDelete']
                : 'category_local_delete';
            $inspection
                = GRN_Workflow_Category_Local_Inspection::getInstance();

            $deleteCount = 0;
            $beforWorkflowCategoryLocal
                = $dao->selectByCategoryId_LanguageCode($inDataObj,
                $inWorkflowCategoryLocalObj);
            if ($beforWorkflowCategoryLocal !== false) {
                $deleteCount = $dao->deleteByParentId_LanguageCode($inDataObj,
                    $inWorkflowCategoryLocalObj);
                if (($deleteCount > 0) && ($inspection->isEnabled())) {
                    $message_args = [
                        'cid'           => $inWorkflowCategoryLocalObj->getParentId(),
                        'language_code' => $inWorkflowCategoryLocalObj->getLanguageCode(),
                        'category_name' => $beforWorkflowCategoryLocal->getName(),
                    ];

                    $inspection->record($inMessageTypeDelete, $message_args);
                }
            }

            return $deleteCount;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param $inDataObj
     * @param $inCategoryId
     *
     * @return GrnWorkflowCategoryLocal[]
     */
    public function getWorkflowCategoryLocalListByCategoryId(
        $inDataObj,
        $inCategoryId
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnWorkflowCategoryLocalDAO();
            $resultList
                = $dao->getWorkflowCategoryLocalListByCategoryId($inDataObj,
                $inCategoryId);

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param      $inDataObj
     * @param null $inExportLanguageCodeArray
     *
     * @return GrnWorkflowCategoryLocal[]
     */
    public function getWorkflowCategoryLocalListByLanguageCodes(
        $inDataObj,
        $inExportLanguageCodeArray = null
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnWorkflowCategoryLocalDAO();


            if (is_null($inExportLanguageCodeArray)) {
                $resultList = $dao->getWorkflowCategoryLocalList($inDataObj);
            } else {
                $resultList
                    = $dao->getWorkflowCategoryLocalListByLanguageCodes($inDataObj,
                    $inExportLanguageCodeArray);
            }

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param $inDataObj
     * @param $autoScheduleSettingObj
     *
     * @return bool|GrnAutoScheduleSetting
     */
    public function getAutoScheduleSetting($inDataObj, $autoScheduleSettingObj)
    {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFactory = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFactory->getGrnAutoScheduleSettingDAO();

            return $dao->getByFormId($inDataObj, $autoScheduleSettingObj);
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param $inDataObj
     * @param $insertAutoScheduleSettingObj
     * @param $column_list
     *
     * @return bool|int
     */
    public function insertAutoScheduleSetting(
        $inDataObj,
        $insertAutoScheduleSettingObj
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFactory = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFactory->getGrnAutoScheduleSettingDAO();

            return $dao->insert($inDataObj, $insertAutoScheduleSettingObj);
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param $inDataObj
     * @param $column_list
     * @param $updateAutoScheduleSettingObj
     *
     * @return bool|int
     */
    public function updateAutoScheduleSetting(
        $inDataObj,
        $column_list,
        $updateAutoScheduleSettingObj
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFactory = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFactory->getGrnAutoScheduleSettingDAO();

            return $dao->updateByFormId($inDataObj, $column_list,
                $updateAutoScheduleSettingObj);
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param $inDataObj
     * @param $insertAutoScheduleRegisterObj
     *
     * @return bool|int
     */
    public function insertAutoScheduleRegister(
        $inDataObj,
        $insertAutoScheduleRegisterObj
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFactory = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFactory->getGrnAutoScheduleRegisterDAO();

            return $dao->insert($inDataObj, $insertAutoScheduleRegisterObj);
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param $inDataObj
     * @param $column_list
     * @param $updateAutoScheduleRegisterObj
     *
     * @return bool|int
     */
    public function updateAutoScheduleRegister(
        $inDataObj,
        $column_list,
        $updateAutoScheduleRegisterObj
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFactory = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFactory->getGrnAutoScheduleRegisterDAO();

            return $dao->updateByPetitionId($inDataObj, $column_list,
                $updateAutoScheduleRegisterObj);
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param $inDataObj
     * @param $delAutoScheduleRegisterObj
     *
     * @return bool|int
     */
    public function deleteAutoScheduleRegister(
        $inDataObj,
        $delAutoScheduleRegisterObj
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFactory = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFactory->getGrnAutoScheduleRegisterDAO();

            return $dao->delete($inDataObj, $delAutoScheduleRegisterObj);
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param       $inDataObj
     * @param array $petition_ids
     *
     * @return bool|int
     */
    public function multiDeleteAutoScheduleRegister(
        $inDataObj,
        Array $petition_ids
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFactory = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFactory->getGrnAutoScheduleRegisterDAO();

            return $dao->multidelete($inDataObj, $petition_ids);
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param $inDataObj
     * @param $autoScheduleRegisterObj
     *
     * @return bool|GrnAutoScheduleRegister
     */
    public function getAutoScheduleRegister(
        $inDataObj,
        $autoScheduleRegisterObj
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFactory = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFactory->getGrnAutoScheduleRegisterDAO();

            return $dao->getByPetitionId($inDataObj, $autoScheduleRegisterObj);
        } catch (CBException $cbe) {

        }
    }
}
