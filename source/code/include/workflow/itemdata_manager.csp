<?php
/**
 * Workflow Application Item Data Class
 *
 * @author  Yuichi, Nakamura 2006/01
 * @version 1.0561
 * @package grn.workflow
 */

/** Workflow Application **/
require_once('workflow/resources.csp');
require_once('workflow/itemdata_manager_base.csp');

/**
 * Item Data Manager Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_ItemData_Manager extends GRN_Workflow_ItemData_Manager_Base
{
    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
        //Get Parent Instance
        $parent = parent::getInstance();

        //Sync Parent Table and Item Data List Cache
        $this->_table_name =& $parent->_table_name;
        $this->_list =& $parent->_list;
    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_ItemData_Manager $instance                  //Instance of GRN_Workflow_Item Data_Manager
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_ItemData_Manager();
        }

        return $_instance;
    }

    /**
     * Create Item Data
     *
     * @param  array $property_list //Property List(Name=>Value)
     *
     * @return int   $item_data_id               //Item Data ID
     */
    function create($property_list)
    {
        //Get Database
        $database = $this->_getDatabase();

        //Create Column List
        $column_list = $this->_getColumnList();

        //Create Query
        $insert_list = [];
        foreach ($column_list as $column) {
            if ($column === '_id') {
                continue;
            }

            if (array_key_exists($column, $property_list)) {
                if (is_null($property_list[$column])) {
                    $insert_list[$column] = 'null';
                } else {
                    $insert_list[$column] = cb_queryf($database, '"@S"',
                        $property_list[$column]);
                }
            }
        }
        $column_string = implode(', ', array_keys($insert_list));
        $value_string = implode(', ', $insert_list);
        $query = sprintf('INSERT %s(%s) VALUES (%s)',
            $this->_table_name, $column_string, $value_string);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Return Item Data ID
        $item_data_id = $database->get_insert_id();

        return $item_data_id;
    }

    /**
     * Create Item Data Multiple
     *
     * @param  array $all_property_list //ALL Property List(Name=>Value)
     *
     * @return none
     */
    function createMulti($all_property_list)
    {
        //Get Database
        $database = $this->_getDatabase();

        //Create Column List
        $column_list = $this->_getColumnList();

        //Create Query
        foreach (array_keys($all_property_list) as $key) {
            $property_list =& $all_property_list[$key];

            $insert_list = [];
            foreach ($column_list as $column) {
                if ($column === '_id') {
                    continue;
                }

                if (array_key_exists($column, $property_list)) {
                    if (is_null($property_list[$column])) {
                        $insert_list[$column] = 'null';
                    } else {
                        $insert_list[$column] = cb_queryf($database, '"@S"',
                            $property_list[$column]);
                    }
                }
            }
            $column_string = implode(', ', array_keys($insert_list));
            $value_string_list[] = sprintf('(%s)', implode(', ', $insert_list));
        }
        $value_string = implode(', ', $value_string_list);
        $query = sprintf('INSERT %s(%s) VALUES %s', $this->_table_name,
            $column_string, $value_string);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        return;
    }

    /**
     * Update Item Data
     *
     * @param  array $item_data_id  //Item Data ID
     * @param  array $property_list //Property List(Name=>Value)
     *
     * @return array $item_data_id               //Item Data ID
     */
    function update($item_data_id, $property_list)
    {
        //Get Database
        $database = $this->_getDatabase();

        //Create Column List
        $column_list = $this->_getColumnList();

        //Create Query
        $update_list = [];
        foreach ($column_list as $column) {
            if ($column === '_id') {
                continue;
            }

            if (array_key_exists($column, $property_list)) {
                if (is_null($property_list[$column])) {
                    $update_list[$column] = cb_queryf($database, '@S = null',
                        $column);
                } else {
                    $update_list[$column] = cb_queryf($database, '@S = "@S"',
                        $column, $property_list[$column]);
                }
            }
        }
        $update_string = implode(', ', $update_list);
        $where_string = cb_queryf($database, "_id = '@S'", $item_data_id);
        $query = sprintf('UPDATE %s SET %s WHERE %s',
            $this->_table_name, $update_string, $where_string);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Return Item Data ID
        return $item_data_id;
    }

    /**
     * Remove Item Data
     *
     * @param int  $item_data_id //Item Data ID
     * @param BOOL $result       //Result
     */
    function remove($item_data_id)
    {
        //Get Database
        $database =& $this->_getDatabase();

        //Create Column List
        $column_list = implode(',', $this->_getColumnList());

        //Create Query
        $where_string = cb_queryf($database, "_id = '@S'", $item_data_id);
        $query = sprintf('DELETE FROM %s WHERE %s', $this->_table_name,
            $where_string);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Delete From Item Data List
        foreach (array_keys($this->_list) as $key) {
            if (in_array($item_data_id, $this->_list[$key])) {
                unset($this->_list[$key][$item_data_id]);
            }
        }

        return true;
    }

    /**
     * Remove Multiple Item Data
     *
     * @param array $item_data_id_list //Item Data List
     * @param BOOL  $result            //Result
     */
    function removeMulti($item_data_id_list)
    {
        //Get Database
        $database =& $this->_getDatabase();

        //Create Column List
        $column_list = implode(',', $this->_getColumnList());

        //Create Query
        foreach ($item_data_id_list as $key => $value) {
            $item_data_id_list[$key] = cb_queryf($database, "'@S'", $value);
        }
        $item_data_id_string = implode(',', $item_data_id_list);
//        $where_string = cb_queryf($database, '_id IN(@S)', $item_data_id_string);
        $where_string = '_id IN(' . $item_data_id_string . ')';
        $query = sprintf('DELETE FROM %s WHERE %s', $this->_table_name,
            $where_string);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Delete From Item Data List
        $item_data_id = current($item_data_id_list);
        foreach (array_keys($this->_list) as $key) {
            if (in_array($item_data_id, $this->_list[$key])) {
                foreach ($item_data_id_list as $item_data_id) {
                    unset($this->_list[$key][$item_data_id]);
                }
            }
        }

        return true;
    }

    /**
     * Remove All Item Data
     *
     * @param int  $petition_id //Petition ID
     * @param BOOL $result      //Result
     */
    function removeAll($petition_id = null)
    {
        //Get Database
        $database =& $this->_getDatabase();

        //Create Column List
        $column_list = implode(',', $this->_getColumnList());

        //Create Query
        $where_string = "";
        if ( ! is_null($petition_id)) {
            $where_string = cb_queryf($database, "WHERE col_petition = '@S'",
                $petition_id);
        }
        $query = sprintf('DELETE FROM %s %s', $this->_table_name,
            $where_string);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Delete From Item Data List
        unset($this->_list[$petition_id]);

        return true;
    }

    /**
     * Change Item Data Order
     *
     * @param int  $item_data_id_list //Item Data ID List
     * @param int  $start_index       //Start Index Number
     * @param BOOL $result            //Result
     */
    function changeOrder($item_data_id_list, $start_index = 0)
    {
        //Set New List Index
        $list_index = $start_index;
        $property_list = [];
        foreach ($item_data_id_list as $item_data_id) {
            $property_list[GRN_WORKFLOW_COLUMN_LIST_INDEX] = $list_index;
            $this->update($item_data_id, $property_list);
            $list_index++;
        }

        return true;
    }
}


