<?php

/**
 * 利用ユーザー
 *
 * @author  Hideyasu YOSHIDA 2005/12
 * @version 1.0
 * @package grn.workflow
 */

require_once('workflow/model.csp');
require_once('fw/bean/CbUser.csp');

use grn\grn\access\service\AppAccess;

class GRN_Workflow_AvailabilityUsers extends GRN_Workflow_Model
{
    /**
     * @return GRN_Workflow_AvailabilityUsers
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_AvailabilityUsers();
        }

        return $_instance;
    }

    /**
     * @access private
     */
    var $_demo = false;
    /**
     * @access private
     */
    var $_uum = null;

    function __construct()
    {
    }

    function getUsers($userIdList)
    {
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $users = [];
        $columns = [
            'col_display_name',
            'col_foreign_key',
            'col_display_name_language',
            'col_nickname'
        ];
        foreach ($userIdList as $uid) {
            $user_info = $uum->getUserInfo($uid, $columns);
            $users[$uid] = new CbUser($user_info);
        }

        return $users;
    }

    function getGroupUsers($group_id)
    {
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        require_once('grn/org_util.csp');
        $group_info = [];
        $users = [];
        if ($group_id == -1 || $group_id > 0) {
            $group_info['user_list']
                = grn_get_users_by_group_id_and_app_id($group_id, 'workflow');
        }
        foreach ($group_info['user_list'] as $user) {
            $users[$user['_id']] = new CbUser($user);
        }

        return $users;
    }

    function getList($uids = null)
    {
        $users = [];
        // tuning GRB-15157
        if ( ! is_null($uids)) {
            $uids = AppAccess::filterUserIdsInternalAccessByAppId($uids,
                'workflow');
            $users = array_combine($uids, $uids);
            /* foreach($uids as $uid)
             {
                 $users[$uid] = $uid;
             }*/
        }

        return $users;
    }

    /**
     *  set name for default user in path with right language name
     */
    function setDisplayUsersName($users)
    {
        global $G_container_base;
        $uum =& $G_container_base->getInstance('uum');
        $login =& $uum->getLoginUser();

        foreach ($users as $key => $user) {
            $result = $uum->getNameOf($login, $user);
            $users[$key]['col_display_name'] = $result;
        }

        return $users;
    }


}


