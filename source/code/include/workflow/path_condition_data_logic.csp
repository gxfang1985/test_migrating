<?php
/**
 * Workflow Application Path Condition Data Logic Class
 *
 * @author  Yuichi, Ueyama 2006/1
 * @version 1.0
 * @package grn.workflow
 */

/** Workflow Application **/
require_once('workflow/error_code.csp');

/**
 * Item Manager Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_Path_Condition_Data_Logic
{
    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {

    }


    /**
     * Get Instance
     *
     * @return GRN_Workflow_Path_Condition_Data_Logic $instance                  //Instance of GRN_Workflow_Path_Condition_Data_Logic
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_Path_Condition_Data_Logic();
        }

        return $_instance;
    }


    /**
     * Get Eavaluated Path Step Datas
     *
     * @param  array $path_step_datas //Path Step Datas
     * @param  array $path_skip_data  //Path Skip Data (with Extra Information)
     *
     * @return array $operators                  //Item Operators
     */
    function getEvaluatedPathStepDatas(
        & $path_step_datas,
        & $path_skip_data,
        $post_data = []
    ) {
        //Check Arguments
        if ( ! is_array($path_step_datas) || 0 == count($path_step_datas)) {
            //Empty Properties
            cb_throw_error(E_GRN_WRKF_EMPTY_PROPERTIES);
        }
        if ( ! is_array($path_skip_data) || 0 == count($path_skip_data)) {
            return $path_step_datas;
        }

        //Eavaluated Path Step Datas
        $evaluated_path_step_datas = $path_step_datas;
        foreach (array_keys($path_skip_data) as $path_condition_data_id) {
            foreach (
                array_keys($path_skip_data[$path_condition_data_id]) as
                $path_condition_step_data_id
            ) {
                //Get Item Data
                $path_condition_step_data
                    =& $path_skip_data[$path_condition_data_id][$path_condition_step_data_id];
                if ( ! array_key_exists($path_condition_step_data['col_item_data'],
                    $post_data)
                ) {
                    continue;
                }
                $item_data
                    = $post_data[$path_condition_step_data['col_item_data']];
                //Get Check Value
                $check_value = null;
                switch ($path_condition_step_data['col_foreign_key']) {
                    case 'grn.workflow.numeric':
                    case 'grn.workflow.calc_numeric':
                        $check_value = $path_condition_step_data['col_number'];
                        break;
                    case 'grn.workflow.radio':
                        $check_value = $path_condition_step_data['col_option'];
                        break;
                    case 'grn.workflow.menu_string':
                        $check_value = $path_condition_step_data['col_option'];
                        require_once('workflow/controller_util.csp');
                        $item_data_util
                            = GRN_Workflow_ItemData_Controller_Utility::getInstance();
                        $item_data_view
                            = $item_data_util->getView($path_condition_step_data['col_item_data'],
                            ['settings' => 'settings']);
                        if (isset($item_data_view['settings']['menu_item_type'])
                            && $item_data_view['settings']['menu_item_type']
                               == GRN_WORKFLOW_CONDITION_ITEM_MENU_STRING_TYPE_ORGANIZATION
                        ) {
                            global $G_container_base;
                            $uum = $G_container_base->getInstance('uum');
                            $group_info = $uum->getGroupInfo($check_value);
                            $check_value = $group_info['col_name'];
                        }
                        break;
                    default;
                        break;
                }


                require_once('workflow/item_resources.csp');
                $item_util
                    = grn_workflow_get_item_util($path_condition_step_data['col_foreign_key']);
                if ($item_util->isPathStepCondition($path_condition_step_data['col_operator'],
                    $check_value, $item_data)
                ) {
                    foreach (
                        array_keys($path_skip_data[$path_condition_data_id]) as
                        $path_condition_step_data_id
                    ) {
                        if ($path_condition_step_data_id) {
                            $path_condition_step_data
                                =& $path_skip_data[$path_condition_data_id][$path_condition_step_data_id];
                            unset($evaluated_path_step_datas[$path_condition_step_data['col_path_step_data']]);
                        }
                    }
                    break 2;
                }
            }
        }

        //Return Evaluated Path Step Datas
        return $evaluated_path_step_datas;
    }
}


