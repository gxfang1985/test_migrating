<?php
/**
 * Workflow Application Item Data File  Base Class
 *
 * @author  Yuichi, Nakamura 2006/01
 * @version 1.0
 * @package grn.workflow
 */

/** Workflow Application **/
require_once('workflow/resources.csp');
require_once('grn/application.csp');

/**
 * Item Data File Manager Base Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_ItemDataFile_Manager_Base
{
    /** Table Name **/
    var $_table_name = null;

    /** Item Data File List **/
    var $_list = [];

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
        $this->_table_name = 'tab_grn_workflow_itemdatafile';
    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_ItemDataFile_Manager_Base $instance                  //Instance of GRN_Workflow_ItemDataFile_Manager_Base
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_ItemDataFile_Manager_Base();
        }

        return $_instance;
    }

    /**
     * Get Database
     *
     * @return object $table                     //GRN_Workflow_ItemDataFile Table Information
     */
    function _getDatabase()
    {
        static $database = null;
        if (is_null($database)) {
            $app_locator = GRN_ApplicationLocator::instance();
            $database = $app_locator->getConnection('workflow');
        }

        return $database;
    }

    /**
     * Get Column List
     *
     * @return array $table                     //GRN_Workflow_ItemDataFile Table Information
     */
    function &_getColumnList()
    {
        static $column_name_list = null;
        if (is_null($column_name_list)) {
            require_once('workflow/table.csp');
            $column_list = get_class_vars(GRN_WORKFLOW_TABLE_ITEMDATAFILE);
            foreach (array_keys($column_list) as $column_name) {
                if (strpos($column_name, 'col_') === 0) {
                    $column_name_list[] = $column_name;
                }
            }
            $column_name_list[] = '_id';
        }

        return $column_name_list;
    }

    /**
     * Get Item Data File
     *
     * @param  int   $item_data_file_id //Item Data File ID
     * @param  int   $item_data_id      //Item Data ID
     * @param  array $column_list       //Column List
     * @param  int   $refresh           //Lock Mode
     * @param  int   $lock_mode         //Lock Mode
     *
     * @return array  $item_data_file            //Item Data File Information Array
     */
    function &get(
        $item_data_file_id,
        $item_data_id = null,
        $column_list = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Item Data File List
        $item_data_file_list =& $this->getList($item_data_id, $column_list,
            $refresh, $lock_mode);

        //Get Item Data File
        if ( ! array_key_exists($item_data_file_id, $item_data_file_list)) {
            $ret = false;

            return $ret;
        }

        //Return Item Data File
        return $item_data_file_list[$item_data_file_id];
    }

    /**
     * Get Item Data File Direct
     *
     * @param  int   $item_data_file_id //Item Data File ID
     * @param  array $column_list       //Column List
     * @param  int   $lock_mode         //Lock Mode
     *
     * @return array  $item_data_file                  //Item Data File Information Array
     */
    function getDirect(
        $item_data_file_id,
        $column_list = [],
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $item_data_file = [];

        //Get Database
        $database = $this->_getDatabase();

        //Create Column List
        if (count($column_list) === 0) {
            $column_list = implode(',', $this->_getColumnList());
        } else {
            $column_list = implode(',', $column_list);
        }

        //Create Condition
        $condition_list = [];
        $condition_list[] = cb_queryf($database, "_id = '@S'",
            $item_data_file_id);
        $condition = implode(' AND ', $condition_list);
        if ($condition) {
            $condition = 'WHERE ' . $condition;
        }

        //Create Order By Column
        $order_by = 'ORDER BY _id';

        //Create Query
        $query = sprintf('SELECT %s FROM %s %s %s', $column_list,
            $this->_table_name, $condition, $order_by);
        $query = $database->select_format($query, 0, 1, $lock_mode);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Get Item Data File
        $item_data_file = $database->fetch_assoc($result);
        $database->free_result($result);

        //Return Item Data File
        return $item_data_file;
    }

    /**
     * Get Item Data File List
     *
     * @param  int   $item_data_id //Item Data ID
     * @param  array $column_list  //Column List
     * @param  bool  $refresh      //Refresh Cache
     * @param  int   $lock_mode    //Lock Mode
     *
     * @return array  $item_data_file_list       //Item Data File Information List
     */
    function &getList(
        $item_data_id = null,
        $column_list = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $item_data_file_list = [];

        //Check Arguments
        $item_data_id = is_null($item_data_id) ? 0 : $item_data_id;

        //Get Item Data File List From Cache
        $cached = false;
        if ( ! $refresh) {
            if (array_key_exists($item_data_id, $this->_list)) {
                if (is_array($this->_list[$item_data_id])) {
                    $item_data_file_list =& $this->_list[$item_data_id];
                    $cached = true;
                }
            }
        } else {
            $this->_list[$item_data_id] = [];
        }

        //Get Item Data File List From Database
        if ( ! $cached || $refresh) {
            //Get Database
            $database = $this->_getDatabase();

            //Create Column List
            if (count($column_list) === 0) {
                $column_list = implode(',', $this->_getColumnList());
            } else {
                $column_list = implode(',', $column_list);
            }

            //Create Condition
            $condition_list = [];
            if ($item_data_id != 0) {
                $condition_list[] = cb_queryf($database, 'col_item_data = "@S"',
                    $item_data_id);
            }
            $condition = implode(' AND ', $condition_list);
            if ($condition) {
                $condition = 'WHERE ' . $condition;
            }

            //Create Order By Column
            $order_by = 'ORDER BY _id';

            //Create Query
            $query = sprintf('SELECT %s FROM %s %s %s', $column_list,
                $this->_table_name, $condition, $order_by);
            $query = $database->select_format($query, 0, -1, $lock_mode);

            //Execute Query
            $result = $database->query($query);
            if ($result === false) {
                //Throw Query Error
                $database->throwError(['query' => 'query failed: ' . $query]);
            }

            //Update Item Data File List
            $count = $database->num_rows($result);
            for ($i = 0; $i < $count; $i++) {
                $row = $database->fetch_assoc($result);
                $this->_list[$item_data_id][$row['_id']] = $row;
            }
            $database->free_result($result);

            if ($count > 0) {
                $item_data_file_list =& $this->_list[$item_data_id];
            }
        }

        //Return Item Data File List
        return $item_data_file_list;
    }

    /**
     * Get Item Data File Count
     *
     * @param  int  $item_data_id //Item Data ID
     * @param  bool $refresh      //Refresh Cache
     * @param  int  $lock_mode    //Lock Mode
     *
     * @return int    $item_data_file_count      //Item Data File Count
     */
    function getCount(
        $item_data_id = null,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Database
        $database = $this->_getDatabase();

        //Create Condition
        $condition_list = [];
        if ( ! is_null($item_data_id)) {
            $condition_list[] = cb_queryf($database, 'col_item_data = "@S"',
                $item_data_id);
        }
        $condition = implode(' AND ', $condition_list);
        if ($condition) {
            $condition = 'WHERE ' . $condition;
        }

        //Create Query
        $query = sprintf('SELECT COUNT(*) FROM %s %s', $this->_table_name,
            $condition);
        $query = $database->select_format($query, 0, -1, $lock_mode);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }
        $row = $database->fetch_assoc($result);
        $database->free_result($result);

        //Return Item Data File Count
        return $row['COUNT(*)'];
    }
}


