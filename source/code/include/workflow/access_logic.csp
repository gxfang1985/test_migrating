<?php
/**
 * Workflow Application Access Logic Class
 *
 * @author  SHIMADA Kunihiko 2005/12
 * @version 1.0
 * @package grn.workflow
 */

/** Workflow Application **/
require_once('workflow/table.csp');
require_once('workflow/resources.csp');
require_once('workflow/access_logic_base.csp');

/**
 * Workflow Category Access Manager Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_Category_Access_Logic
    extends GRN_Workflow_Category_Access_Logic_Base
{
    //Category Logic Instance
    var $_category_logic = null;

    //Category Access Manager Instance
    var $_category_access_manager = null;

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {

    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_Category_Access_Logic $instance                  //Instance of GRN_Workflow_Catogory_Access_Logic
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_Category_Access_Logic();
        }

        return $_instance;
    }

    /**
     * Get Category Access Manager
     *
     * @return GRN_Workflow_Category_Access_Manager $category_access_manager   //Category Access Manager
     */
    function _getCategoryAccessManager()
    {
        if (is_null($this->_category_access_manager)) {
            require_once('workflow/access_manager.csp');
            $this->_category_access_manager
                = GRN_Workflow_Category_Access_Manager::getInstance();
        }

        return $this->_category_access_manager;
    }

    /**
     * Get Category Logic
     *
     * @return object $category_logic            //Category Logic
     */
    function _getCategoryLogic()
    {
        if (is_null($this->_category_logic)) {
            require_once('workflow/category_logic.csp');
            $this->_category_logic = GRN_Workflow_Category_Logic::getInstance();
        }

        return $this->_category_logic;
    }

    /**
     * Create Access Object
     *
     * @param  int    $category_id    //Category ID
     * @param  int    $target_id      //Target ID
     * @param  string $target_type    //Table Type(user/group/static_role/dynamic_role)
     * @param  object $authority_list //Authority List
     * @param  bool   $inspect        //Inspection Message Flag
     *
     * @return object $access                    //Access Object
     */
    function &addAccess(
        $category_id,
        $target_id,
        $target_type,
        $authority_list,
        $inspect = true
    ) {
        //Check Argument
        require_once('workflow/error_code.csp');
        require_once('fw/string_util.csp');
        cb_trim_check($category_id,
            E_GRN_WRKF_CATEGORY_INVALID_ID);    //Category ID
        cb_trim_check($target_id,
            E_GRN_WRKF_ACCESS_INVALID_TARGET);  //Access Target
        cb_trim_check($target_type,
            E_GRN_WRKF_ACCESS_INVALID_TARGET);  //Access Target

        //Get Category Object
        $category_logic = $this->_getCategoryLogic();
        $category =& $category_logic->get($category_id);

        //Get UUM Instance
        global $G_container_base;
        $grn_uum = $G_container_base->getInstance('uum');

        //Get Target Object
        $target = null;
        switch ($target_type) {
            case GRN_WORKFLOW_ACCESS_TARGET_TYPE_USER:
                $target = $grn_uum->getUser($target_id);
                $id_name = 'uid';
                $id_value = $target_id;
                break;
            case GRN_WORKFLOW_ACCESS_TARGET_TYPE_GROUP:
                $target = $grn_uum->getGroup($target_id);
                $id_name = 'gid';
                $id_value = $target_id;
                break;
            case GRN_WORKFLOW_ACCESS_TARGET_TYPE_STATIC_ROLE:
                $target = $grn_uum->getStaticRole($target_id);
                $id_name = 'rid';
                $id_value = $target_id;
                break;
            case GRN_WORKFLOW_ACCESS_TARGET_TYPE_DYNAMIC_ROLE:
                $target = $target_id;
                $id_name = 'rid';
                $id_value = $target_id;
                break;
            default:
                //Access Target Object Not Found
                require_once('workflow/error_code.csp');
                cb_throw_error(E_GRN_WRKF_ACCESS_TARGET_NOT_FOUND);
                break;
        }

        //Create Access Object
        $manager = $this->_getCategoryAccessManager();
        $access =& $manager->create($category, $target, $target_type,
            $authority_list);

        //Return Access Object
        return $access;
    }

    /**
     * Remove Access Object
     *
     * @param  int    $category_id //Category ID
     * @param  int    $target_id   //Target ID
     * @param  string $target_type //Table Type(user/group/static_role/dynamic_role)
     * @param  bool   $inspect     //Inspaction Message Flag
     *
     * @return bool   $result                    //Result
     */
    function removeAccess(
        $category_id,
        $target_id,
        $target_type,
        $inspect = true
    ) {
        //Check Argument
        require_once('workflow/error_code.csp');
        require_once('fw/string_util.csp');
        cb_trim_check($category_id,
            E_GRN_WRKF_CATEGORY_INVALID_ID);    //Category ID
        cb_trim_check($target_id,
            E_GRN_WRKF_ACCESS_INVALID_TARGET);  //Target ID
        cb_trim_check($target_type,
            E_GRN_WRKF_ACCESS_INVALID_TARGET);  //Access Target

        //Delete Access Object
        $manager = $this->_getCategoryAccessManager();
        $manager->remove($category_id, $target_id, $target_type);

        return true;
    }

    /**
     * Remove Multiple Access
     *
     * @param array  $access_id_list //Access ID List
     * @param string $target_type    //Table Type(user/group/static_role)
     * @param bool   $inspect        //Inspaction Message Flag
     * @param BOOL   $result         //Result
     */
    function removeAccessMulti($access_id_list, $target_type, $inspect = true)
    {
        //Check Argument
        require_once('workflow/error_code.csp');
        require_once('fw/string_util.csp');
        foreach ($access_id_list as $access_id) {
            cb_trim_check($access_id,
                E_GRN_WRKF_ACCESS_INVALID_ID);    //Category ID
        }
        cb_trim_check($target_id,
            E_GRN_WRKF_ACCESS_INVALID_TARGET);  //Target ID
        cb_trim_check($target_type,
            E_GRN_WRKF_ACCESS_INVALID_TARGET);  //Access Target

        //Remove Access Object
        $manager = $this->_getCategoryAccessManager();
        $manager->removeMulti($access_id, $target_type);

        return true;
    }

    /**
     * Remove All Access
     *
     * @param int  $category_id //Category ID
     * @param bool $inspect     //Inspaction Message Flag
     * @param BOOL $result      //Result
     */
    function removeAccessAll($category_id, $inspect = true)
    {
        //Check Argument
        require_once('workflow/error_code.csp');
        require_once('fw/string_util.csp');
        cb_trim_check($category_id,
            E_GRN_WRKF_CATEGORY_INVALID_ID);    //Category ID

        //Remove Access Object
        $manager = $this->_getCategoryAccessManager();
        $manager->removeAll($category_id);

        return true;
    }

    /**
     * Set Security  Model
     *
     * @param  int    $category_id    //Category ID
     * @param  string $security_model //Security Model
     * @param  bool   $inspect        //Inspaction Message Flag
     *
     * @return bool   $result                    //Result
     */
    function setSecurityModel($category_id, $security_model, $inspect = true)
    {
        //Check Argument
        require_once('workflow/error_code.csp');
        require_once('fw/string_util.csp');
        cb_trim_check($category_id,
            E_GRN_WRKF_CATEGORY_INVALID_ID);            //Category ID
        cb_trim_check($security_model,
            E_GRN_WRKF_ACCESS_INVALID_SECURITY_MODEL);  //Security Model

        //Get Category Object
        $category_logic = $this->_getCategoryLogic();
        $category =& $category_logic->get($category_id);

        //Set Security Model
        $manager = $this->_getCategoryAccessManager();
        $manager->setSecurityModel($category_id, $category, $security_model);

        return true;
    }

    /**
     * Update Access
     *
     * @param  array  $access_id      // Access ID
     * @param  int    $category_id    // Category ID
     * @param  int    $target_id      // Target ID
     * @param  string $target_type    // Table Type(user/group/static_role/dynamic_role)
     * @param  array  $authority_list // Authority List
     *
     * @return int    $Access_id                // Access ID
     */
    function modify(
        $access_id,
        $category_id,
        $target_id,
        $target_type,
        $authority_list,
        $inspect = true
    ) {
        //Check Argument
        require_once('workflow/error_code.csp');
        require_once('fw/string_util.csp');
        cb_trim_check($access_id,
            E_GRN_WRKF_CATEGORY_INVALID_ID);    //Category ID
        cb_trim_check($category_id,
            E_GRN_WRKF_CATEGORY_INVALID_ID);    //Category ID
        cb_trim_check($target_id,
            E_GRN_WRKF_ACCESS_INVALID_TARGET);  //Access Target
        cb_trim_check($target_type,
            E_GRN_WRKF_ACCESS_INVALID_TARGET);  //Access Target

        //Get Category Object
        $category_logic = $this->_getCategoryLogic();
        $category =& $category_logic->get($category_id);

        //Get UUM Instance
        global $G_container_base;
        $grn_uum = $G_container_base->getInstance('uum');

        //Get Target Object
        $target = null;
        switch ($target_type) {
            case GRN_WORKFLOW_ACCESS_TARGET_TYPE_USER:
                $target = $grn_uum->getUser($target_id);
                $id_name = 'uid';
                $id_value = $target_id;
                break;
            case GRN_WORKFLOW_ACCESS_TARGET_TYPE_GROUP:
                $target = $grn_uum->getGroup($target_id);
                $id_name = 'gid';
                $id_value = $target_id;
                break;
            case GRN_WORKFLOW_ACCESS_TARGET_TYPE_STATIC_ROLE:
                $target = $grn_uum->getStaticRole($target_id);
                $id_name = 'rid';
                $id_value = $target_id;
                break;
            case GRN_WORKFLOW_ACCESS_TARGET_TYPE_DYNAMIC_ROLE:
                $target = $target_id;
                $id_name = 'rid';
                $id_value = $target_id;
                break;
            default:
                //Access Target Object Not Found
                cb_throw_error(E_GRN_WRKF_ACCESS_TARGET_NOT_FOUND);
                break;
        }

        //Update Access Object
        $manager = $this->_getCategoryAccessManager();
        $manager->update($access_id, $category, $target, $target_type,
            $authority_list);
    }

    /**
     * Export Access Set Information
     *
     * @param  object $csv // CSV Writer
     *
     * @return bool                      // Result
     */
    function export($csv)
    {
        // Parameter Validation Check
        if ( ! $csv) {
            // CSV Write Handler Not Found
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_CSV_WRITER_NOT_FOUND);
        }

        // Preparation
        require_once('workflow/category_logic_base.csp');
        $category_logic_base = GRN_Workflow_Category_Logic_Base::getInstance();

        // Get All Category Information
        $category_list = $category_logic_base->getList(0);

        // Write by One Category
        foreach ($category_list as $category) {
            // Initialize CSV Line by One Category
            $line = [
                GRN_WORKFLOW_CSV_ACCESS_FOREIGN_KEY => $category[GRN_WORKFLOW_COLUMN_FOREIGN_KEY]
                ,
                GRN_WORKFLOW_CSV_ACCESS_ITEM        => null
                ,
                GRN_WORKFLOW_CSV_ACCESS_VALUE       => null
                ,
                GRN_WORKFLOW_CSV_ACCESS_TARGET_NAME => null
            ];

            // Write Information of Security Model
            $security_model_id = $category[GRN_WORKFLOW_COLUMN_SECURITY_MODEL];
            if (is_null($security_model_id)) {
                // Set Default Value of Security Model
                $security_model_name = $this->getDefaultSecurityModel();
                if (GRN_WORKFLOW_SECURITY_MODEL_NAME_GRANT
                    == $security_model_name
                ) {
                    $security_model_id = GRN_WORKFLOW_SECURITY_MODEL_TYPE_GRANT;
                } elseif (GRN_WORKFLOW_SECURITY_MODEL_NAME_REVOKE
                          == $security_model_name
                ) {
                    $security_model_id
                        = GRN_WORKFLOW_SECURITY_MODEL_TYPE_REVOKE;
                } else {
                    require_once('workflow/error_code.csp');
                    cb_throw_error(E_GRN_WRKF_ACCESS_INVALID_SECURITY_MODEL);
                }
            } elseif ($security_model_id
                      != GRN_WORKFLOW_SECURITY_MODEL_TYPE_GRANT
                      && $security_model_id
                         != GRN_WORKFLOW_SECURITY_MODEL_TYPE_REVOKE
            ) {
                require_once('workflow/error_code.csp');
                cb_throw_error(E_GRN_WRKF_ACCESS_INVALID_SECURITY_MODEL);
            }

            $line_security_model
                = $this->_exportSecurityModelCSV($security_model_id);
            $line = array_merge($line, $line_security_model);

            // Write
            $csv->writeLine($line);

            // Write Access Right Information by Item Type
            $item_type_list = [
                GRN_WORKFLOW_ACCESS_TARGET_TYPE_DYNAMIC_ROLE
                ,
                GRN_WORKFLOW_ACCESS_TARGET_TYPE_STATIC_ROLE
                ,
                GRN_WORKFLOW_ACCESS_TARGET_TYPE_GROUP
                ,
                GRN_WORKFLOW_ACCESS_TARGET_TYPE_USER
            ];
            foreach ($item_type_list as $item_type) {
                // Set Item Type
                $line[GRN_WORKFLOW_CSV_ACCESS_ITEM] = $item_type;

                // Get Access Right List
                $access_list = [];
                $access_list
                    = $this->getAccessListByCategoryID($category['_id'],
                    $item_type);


                foreach ($access_list as $access) {
                    $line[GRN_WORKFLOW_CSV_ACCESS_VALUE] = null;
                    $line[GRN_WORKFLOW_CSV_ACCESS_TARGET_NAME] = null;

                    $line_access_right = $this->_exportAccessCSV($access,
                        $security_model_id, $item_type);
                    $line = array_merge($line, $line_access_right);

                    // Write
                    $csv->writeLine($line);
                }
            }
        }

        return true;
    }

    /**
     * Set Security Model for Export CSV File
     *
     * @param   int $security_model_id // Security Model of Category
     *
     * @return  array                       // CSV Line of Security Model
     * @access  private
     */
    function _exportSecurityModelCSV($security_model_id)
    {
        // Set Item Name
        $line[GRN_WORKFLOW_CSV_ACCESS_ITEM] = 'security_model';

        // Set Value
        $line[GRN_WORKFLOW_CSV_ACCESS_VALUE] = null;

        if ($security_model_id == GRN_WORKFLOW_SECURITY_MODEL_TYPE_GRANT) {
            // Set 'grant'
            $line[GRN_WORKFLOW_CSV_ACCESS_VALUE]
                = GRN_WORKFLOW_SECURITY_MODEL_NAME_GRANT;
        } elseif ($security_model_id
                  == GRN_WORKFLOW_SECURITY_MODEL_TYPE_REVOKE
        ) {
            // Set 'revoke'
            $line[GRN_WORKFLOW_CSV_ACCESS_VALUE]
                = GRN_WORKFLOW_SECURITY_MODEL_NAME_REVOKE;
        } else {
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_ACCESS_INVALID_SECURITY_MODEL);
        }

        // Set Target Name = null
        $line[GRN_WORKFLOW_CSV_ACCESS_TARGET_NAME] = null;

        return $line;
    }

    /**
     * Set Access Right Information for Export CSV File
     *
     * @param   array  $access            // Access Right Information of One Row
     * @param   int    $security_model_id // Security Model
     * @param   string $item_type         // Item Name (ex. 'dynamic_role', 'user' )
     *
     * @return  array                                  // CSV Line of Access Right Information
     * @access  private
     */
    function _exportAccessCSV($access, $security_model_id, $item_type)
    {
        // Set Access Right Type
        if ($security_model_id == GRN_WORKFLOW_SECURITY_MODEL_TYPE_GRANT) {
            if ($access[GRN_WORKFLOW_COLUMN_AUTHORITY_BROWSE]) {
                // Have Right to Read
                $line[GRN_WORKFLOW_CSV_ACCESS_VALUE]
                    = GRN_WORKFLOW_CSV_ACCESS_READ;
            }
        } elseif ($security_model_id
                  == GRN_WORKFLOW_SECURITY_MODEL_TYPE_REVOKE
        ) {
            if ($access[GRN_WORKFLOW_COLUMN_AUTHORITY_BROWSE]) {
                // Have NO Right to Access
                $line[GRN_WORKFLOW_CSV_ACCESS_VALUE]
                    = GRN_WORKFLOW_CSV_ACCESS_NONE;
            }
        } else {
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_ACCESS_INVALID_SECURITY_MODEL);
        }

        // Set Target Name
        $target_info
            = $access[GRN_WORKFLOW_COLUMN_TARGET];    // Dynamic Role -> Name , Others -> ID

        if ($item_type === GRN_WORKFLOW_ACCESS_TARGET_TYPE_DYNAMIC_ROLE) {
            // Dynamic Role
            $line[GRN_WORKFLOW_CSV_ACCESS_TARGET_NAME] = $target_info;
        } else {
            global $G_container_base;
            $uum = $G_container_base->getInstance('uum');

            $target = null;

            if ($item_type === GRN_WORKFLOW_ACCESS_TARGET_TYPE_STATIC_ROLE) {
                // Name of Static Role
                $target = $uum->getStaticRole($target_info);
            } elseif ($item_type === GRN_WORKFLOW_ACCESS_TARGET_TYPE_GROUP) {
                // Name of Group
                $target = $uum->getGroup($target_info);
            } elseif ($item_type === GRN_WORKFLOW_ACCESS_TARGET_TYPE_USER) {
                // Name of User
                $target = $uum->getUser($target_info);
            } else {
                return false;
            }
            $line[GRN_WORKFLOW_CSV_ACCESS_TARGET_NAME]
                = $target->get('foreign_key');
        }

        return $line;
    }

    /**
     * Export Item Name
     *
     * @param   object $csv // CSV Writer
     *
     * @return  bool
     */
    function export_item_name($csv)
    {
        // Get Item Name
        require_once('fw/i18n.csp');
        $header = [];
        $header[] = cb_msg('grn.workflow.system', 'access_csv_code');
        $header[] = cb_msg('grn.workflow.system', 'access_csv_item');
        $header[] = cb_msg('grn.workflow.system', 'access_csv_value');
        $header[] = cb_msg('grn.workflow.system', 'access_csv_target');

        // Write
        $csv->writeLine($header);

        return true;
    }

    /**
     * Import Access Right Information from CSV File
     *
     * @param  object $line // One Read Line from CSV File
     *
     * @return bool                      // Result
     */
    function import($line)
    {
        // Create Map to Transform Security Model Name into Integer Value
        $security_model_list = [
            GRN_WORKFLOW_SECURITY_MODEL_NAME_GRANT
            => GRN_WORKFLOW_SECURITY_MODEL_TYPE_GRANT,
            GRN_WORKFLOW_SECURITY_MODEL_NAME_REVOKE
            => GRN_WORKFLOW_SECURITY_MODEL_TYPE_REVOKE
        ];

        //Get UUM Instance
        global $G_container_base;
        $grn_uum = $G_container_base->getInstance('uum');

        //Get Dynamic Roles
        static $dynamic_roles = null;
        if (is_null($dynamic_roles)) {
            $granted_roles = $grn_uum->listGrantedRoles();
            $static_roles = $grn_uum->listStaticRoles();
            $dynamic_roles = $granted_roles;
            foreach (array_keys($static_roles) as $static_role_id) {
                $foreign_key
                    = $static_roles[$static_role_id]->get('foreign_key');
                if (array_key_exists($foreign_key, $dynamic_roles)) {
                    unset($dynamic_roles[$foreign_key]);
                }
            }
        }

        //-- Create Category List as Cache Data ----------------------
        // Category Foreign Key => array( Category ID, Security Model )
        static $category_list = null;
        if (is_null($category_list)) {
            // Get All Category Information
            require_once('workflow/category_logic_base.csp');
            $category_logic_base
                = GRN_Workflow_Category_Logic_Base::getInstance();
            $category_all_list = $category_logic_base->getList(0);

            // Get Default Security Model ID
            $default_security_model_name = $this->getDefaultSecurityModel();
            if ( ! array_key_exists($default_security_model_name,
                $security_model_list)
            ) {
                require_once('workflow/error_code.csp');
                cb_throw_error(E_GRN_WRKF_ACCESS_INVALID_SECURITY_MODEL);
            }
            $default_security_model_id
                = $security_model_list[$default_security_model_name];

            // Set Category ID, Security model by Foreign Key
            $category_list = [];
            foreach (array_keys($category_all_list) as $id) {
                // Set Category Foreign Key as a Key of Array
                $foreign_key
                    = $category_all_list[$id][GRN_WORKFLOW_COLUMN_FOREIGN_KEY];

                // Set Category ID
                if ( ! array_key_exists($foreign_key, $category_list)) {
                    $category_list[$foreign_key] = [];
                }
                $category_list[$foreign_key]['_id'] = $id;

                // Set Security Model
                $security_model_id
                    = $category_all_list[$id][GRN_WORKFLOW_COLUMN_SECURITY_MODEL];
                if (is_null($security_model_id)) {
                    // Set Default Value of Security Model
                    $security_model_id = $default_security_model_id;
                }
                $category_list[$foreign_key][GRN_WORKFLOW_COLUMN_SECURITY_MODEL]
                    = $security_model_id;
            }

        }
        //-- END of Create Category List ----------------------------

        // the Number of Columns
        $csv_columns = [
            GRN_WORKFLOW_CSV_READ_ACCESS_FOREIGN_KEY
            ,
            GRN_WORKFLOW_CSV_READ_ACCESS_ITEM
            ,
            GRN_WORKFLOW_CSV_READ_ACCESS_VALUE
            ,
            GRN_WORKFLOW_CSV_READ_ACCESS_TARGET_NAME
        ];
        $csv_columns_num = count($csv_columns);

        // Check the Number of Items on the Line
        if (count($line) != ($csv_columns_num - 1)
            && count($line) != $csv_columns_num
        ) {
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_CSV_FILE_INVALID);
        } elseif (count($line) >= ($csv_columns_num - 1)) {
            // Set CSV Field Value : No.1-No.3
            $csv_foreign_key = $line[GRN_WORKFLOW_CSV_READ_ACCESS_FOREIGN_KEY];
            $csv_access_item
                = strtolower($line[GRN_WORKFLOW_CSV_READ_ACCESS_ITEM]);
            $csv_access_value = $line[GRN_WORKFLOW_CSV_READ_ACCESS_VALUE];
        }

        // Set CSV Field Value : No.4
        $csv_target_name = null;
        if (count($line) === $csv_columns_num) {
            $csv_target_name = $line[GRN_WORKFLOW_CSV_READ_ACCESS_TARGET_NAME];
        }

        // Get Category ID
        if ( ! array_key_exists($csv_foreign_key, $category_list)) {
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_CATEGORY_NOT_FOUND);
        }
        $category_id = $category_list[$csv_foreign_key]['_id'];

        // Decide the Method by Value of Access Item
        if (GRN_WORKFLOW_ACCESS_ITEM_SECURITY_MODEL == $csv_access_item) {
            //-- Import Security Model --------------------------------------

            // Transform Security Model Name into Integer Value
            if ( ! array_key_exists($csv_access_value, $security_model_list)) {
                // Invalid Security Model Name
                require_once('workflow/error_code.csp');
                cb_throw_error(E_GRN_WRKF_ACCESS_INVALID_SECURITY_MODEL);
            }

            // Set Security Model
            $this->setSecurityModel($category_id, $csv_access_value);

            // Update Category List Cache
            $category_list[$csv_foreign_key][GRN_WORKFLOW_COLUMN_SECURITY_MODEL]
                = $security_model_list[$csv_access_value];

            //-- End : Import Security Model --------------------------------
        } else {
            //-- Import Access Right Setting --------------------------------

            // Check the Number of Items on the Line
            if (count($line) != $csv_columns_num) {
                require_once('workflow/error_code.csp');
                cb_throw_error(E_GRN_WRKF_CSV_FILE_INVALID);
            }

            // Check Category Foreign Key by Category List Cache
            if ( ! array_key_exists($csv_foreign_key, $category_list)) {
                // Category Not Found
                require_once('workflow/error_code.csp');
                cb_throw_error(E_GRN_WRKF_CATEGORY_NOT_FOUND);
            }

            // Get Target ID
            global $G_container_base;
            $uum = $G_container_base->getInstance('uum');

            $target = null;
            switch ($csv_access_item) {
                case GRN_WORKFLOW_ACCESS_TARGET_TYPE_USER:
                    $target =& $uum->getUserbyForeignKey($csv_target_name);
                    break;
                case GRN_WORKFLOW_ACCESS_TARGET_TYPE_GROUP:
                    $target =& $uum->getGroupbyForeignKey($csv_target_name);
                    break;
                case GRN_WORKFLOW_ACCESS_TARGET_TYPE_STATIC_ROLE:
                    $target
                        =& $uum->getStaticRolebyForeignKey($csv_target_name);
                    break;
                case GRN_WORKFLOW_ACCESS_TARGET_TYPE_DYNAMIC_ROLE:
                    if ( ! array_key_exists($csv_target_name, $dynamic_roles)) {
                        require_once('workflow/error_code.csp');
                        cb_throw_error(E_GRN_WRKF_CSV_ACCESS_TARGET_INVALID);
                    }
                    $target = $csv_target_name;
                    break;
                default:
                    require_once('workflow/error_code.csp');
                    cb_throw_error(E_GRN_WRKF_CSV_ACCESS_ITEM_INVALID);
            }

            if ( ! $target) {
                require_once('workflow/error_code.csp');
                cb_throw_error(E_GRN_WRKF_CSV_ACCESS_TARGET_INVALID);
            }
            if (is_object($target)) {
                $target_id = $target->getOID();
            } else {
                $target_id = $target;
            }

            // Set Access Right Settings
            // Decide a Behavior by Securty Model

            // Get Security Model from Category List Cache
            $current_securty_model_id
                = $category_list[$csv_foreign_key][GRN_WORKFLOW_COLUMN_SECURITY_MODEL];

            if ( ! in_array($current_securty_model_id, $security_model_list)) {
                // Invalid Security Model
                require_once('workflow/error_code.csp');
                cb_throw_error(E_GRN_WRKF_ACCESS_INVALID_SECURITY_MODEL);
            }

            // Check Existence of Access Settings by Category
            require_once('workflow/access_logic_base.csp');
            $access_logic_base
                = GRN_Workflow_Category_Access_Logic_Base::getInstance();

            // Access Value of CSV File:Transform Charactors into Upper-Case
            $csv_access_value_upper = strtoupper($csv_access_value);

            // Reflect Access Settings of CSV File in DataBase
            $authority_list = ['browse' => 1];
            if (GRN_WORKFLOW_CSV_ACCESS_READ === $csv_access_value_upper) {
                if (GRN_WORKFLOW_SECURITY_MODEL_TYPE_GRANT
                    == $current_securty_model_id
                ) {
                    // GRANT
                    $access
                        = $access_logic_base->getAccessByCategoryID($category_id,
                        $target_id, $csv_access_item);
                    if ( ! $access) {
                        $this->addAccess($category_id, $target_id,
                            $csv_access_item, $authority_list);
                    } elseif ($access[GRN_WORKFLOW_COLUMN_AUTHORITY_BROWSE]
                              != $authority_list['browse']
                    ) {
                        // Illeagal Pattern
                        $this->modify($access['_id'], $category_id, $target_id,
                            $csv_access_item, $authority_list);
                    }
                } elseif (GRN_WORKFLOW_SECURITY_MODEL_TYPE_REVOKE
                          == $current_securty_model_id
                ) {
                    // REVOKE
                    $this->removeAccess($category_id, $target_id,
                        $csv_access_item);
                }
            } elseif (GRN_WORKFLOW_CSV_ACCESS_NONE
                      === $csv_access_value
            )    // notice:Value isn't Uppered
            {
                if (GRN_WORKFLOW_SECURITY_MODEL_TYPE_GRANT
                    == $current_securty_model_id
                ) {
                    // GRANT
                    $this->removeAccess($category_id, $target_id,
                        $csv_access_item);
                } elseif (GRN_WORKFLOW_SECURITY_MODEL_TYPE_REVOKE
                          == $current_securty_model_id
                ) {
                    // REVOKE
                    $access
                        = $access_logic_base->getAccessByCategoryID($category_id,
                        $target_id, $csv_access_item);
                    if ( ! $access) {
                        $this->addAccess($category_id, $target_id,
                            $csv_access_item, $authority_list);
                    } elseif ($access[GRN_WORKFLOW_COLUMN_AUTHORITY_BROWSE]
                              != $authority_list['browse']
                    ) {
                        // Illeagal Pattern
                        $this->modify($access['_id'], $category_id, $target_id,
                            $csv_access_item, $authority_list);
                    }
                }
            } else {
                // Invalid Access Right Setting
                require_once('workflow/error_code.csp');
                cb_throw_error(E_GRN_WRKF_CSV_ACCESS_VALUE_INVALID);
            }
            //-- END : Import Access Right Setting --------------------------
        }
    }
}

