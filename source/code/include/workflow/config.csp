<?php

/**
 * 設定
 *
 * @author  Hideyasu YOSHIDA 2006/02
 * @version 1.0
 * @package grn.workflow
 */

require_once('grn/application.csp');
require_once('workflow/resources.csp');
require_once('fw/forest_util.csp');

/**
 * 設定管理
 */
class GRN_Workflow_Configs extends CB_ModuleBase
{
    /**
     * シングルトンを取得する
     *
     * @return GRN_Workflow_Configs
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_Configs();
        }

        return $_instance;
    }

    /**
     * コンストラクタ
     */
    function __construct()
    {
        parent::__construct(GRN_WORKFLOW_MODULE_ID);
    }

    /**
     * @access private
     */
    var $_configs = [];

    /**
     * システム管理の取得
     *
     * @return  GRN_Workflow_Config  GRN_Workflow_Config     システム管理
     */
    function getSystemConfig()
    {
        if ( ! array_key_exists('-1', $this->_configs)) {
            $system_profile = $this->getSystemProfile();
            $this->_configs['-1'] = new GRN_Workflow_Config($system_profile);
        }

        return $this->_configs['-1'];
    }

    /**
     * 個人設定を取得する
     *
     * @param   int $user_id ユーザーID
     *
     * @return  object  GRN_Workflow_Config     個人設定
     */
    function getPersonalConfig($user_id)
    {
        if ( ! array_key_exists($user_id, $this->_configs)) {
            global $G_container_base;
            $uum = $G_container_base->getInstance('uum');
            $user = $uum->getUser($user_id);
            $personal_profile = $this->getUserProfile($user);
            $this->_configs[$user_id]
                = new GRN_Workflow_Config($personal_profile);
        }

        return $this->_configs[$user_id];
    }

}

/**
 * 設定
 */
class GRN_Workflow_Config
{
    /**
     * @access private
     * @var CB_Profile
     */
    var $_profile;

    /**
     * コンストラクタ
     */
    function __construct(& $profile)
    {
        $this->_profile =& $profile;
    }

    /**
     * 属性の変更
     *
     * @access private
     */
    function _updateAttribute($key, $value)
    {
        $old_value = null;
        if ( ! $this->_profile->getAttribute($key, $old_value)) {
            return $this->_profile->createAttribute($key, $value);
        }

        return $this->_profile->updateAttribute($key, $value);
    }

    /**
     * 年次切替の取得
     *
     * @return  object  CB_DateTime 年次切替日時
     */
    function getCutover()
    {
        require_once('fw/date.csp');

        // 閏年に強制変更
        $this->_profile->getAttribute('cutover', $cutover);

        return $cutover;
    }

    /**
     * @param \CB_DateTime $date
     *
     * @return \CB_DateTimeEx
     */
    public function translateDateTimeOfLoginUserTimezoneToUTC(CB_DateTime $date)
    {
        global $G_container_base;
        /** @var $uum GRN_Uum */
        $uum = $G_container_base->getInstance("uum");
        $loginUser = $uum->getLoginUser();
        $i18n = CB_I18N::getInstance();
        $timezone = $i18n->getUserTimezone($loginUser);

        return $i18n->translateDatetimeTimezone($date, $timezone, "UTC");
    }

    /**
     * 年次切替の設定
     *
     * @param   array   年次切替日時
     */
    function setCutover($cutover)
    {
        //スケジューリングサービスを取得
        require_once('fw/schedule.csp');
        $schedule_service = CB_SchedulingService::getInstance();

        //不正な日時であれば、設定を初期化
        $dummy = null;
        require_once('fw/date.csp');
        if ($cutover->month === '' || $cutover->day === ''
            || $cutover->hour === ''
            || $cutover->minute === ''
        ) {
            //設定を初期化
            $this->_updateAttribute('cutover', $dummy);
            $this->_updateAttribute('cutover_year', $dummy);

            //スケジューリングサービスの登録を解除
            $schedule_service->unregisterEvent('grn_workflow_cutover');
        } else {
            $cutover_utc
                = $this->translateDateTimeOfLoginUserTimezoneToUTC($cutover);
            $this->_updateAttribute('cutover', $cutover_utc);

            //スケジューリングサービスに登録
            $schedule_service->registerRepeatEventByDateTime($cutover_utc,
                'grn_workflow_cutover',
                'grn_workflow_cutover.csp'
            );
        }

        return;
    }


    /**
     * 差し戻しの使用許可フラグの取得
     *
     * @return  boolean     差し戻しの使用許可フラグ
     */
    function getRemand()
    {
        // 初期値は有効
        $remand = true;
        $this->_profile->getAttribute('remand', $remand);

        return $remand;
    }

    /**
     * 差し戻しの使用許可フラグの設定
     *
     * @param   boolean     enabled_remand      差し戻しの使用許可フラグ
     */
    function setRemand($remand)
    {
        $this->_updateAttribute('remand', $remand);
    }

    /**
     * 経路変更の許可情報の取得
     *
     * @return  array   経路変更の許可情報
     */
    function getChangePathInfo()
    {
        $change_path_info = [
            'applicant'       => true,
            'operation_admin' => true,
            'system_admin'    => true
        ];
        $this->_profile->getAttribute('change_path_info', $change_path_info);

        return $change_path_info;
    }

    /**
     * 経路変更の許可情報の設定
     *
     * @param   array   change_path_info    経路変更の許可情報
     */
    function setChangePathInfo($change_path_info)
    {
        $change_path_info = [
            'applicant'       => $change_path_info['applicant'],
            'operation_admin' => $change_path_info['operation_admin'],
            'system_admin'    => $change_path_info['system_admin']
        ];
        $this->_updateAttribute('change_path_info', $change_path_info);
    }

    /**
     * @return string
     */
    function getLoginUrl()
    {
        if (defined('ON_FOREST')) {
            $forest_config = CB_ForestUtil::getConfig();
            $fqdn = $forest_config->get('Cellular', 'fqdn');
            if (strlen($fqdn) === 0) {
                return null;
            }

            return 'http://' . $fqdn . '/g/workflow/cellular/index.csp?';
        }
        $login_url = '';
        $this->_profile->getAttribute('login_url', $login_url);

        return $login_url;
    }

    /**
     * @param $login_url
     */
    function setLoginUrl($login_url)
    {
        $this->_updateAttribute('login_url', $login_url);
    }

    function getCellularMailAddress()
    {
        $mail_address = null;
        $this->_profile->getAttribute('mail_address', $mail_address);

        return $mail_address;
    }

    /**
     * @param $mail_address
     */
    function setCellularMailAddress($mail_address)
    {
        $this->_updateAttribute('mail_address', $mail_address);
    }

    /**
     * @return bool
     */
    function getSuspension()
    {
        $suspension = false;
        if ( ! $this->_profile->getAttribute('suspension', $suspension)) {
            $suspension = true;
        }

        return $suspension;
    }

    /**
     * @param $suspension
     */
    function setSuspension($suspension)
    {
        $this->_updateAttribute('suspension', $suspension);
    }

    /**
     * 承認予定の使用許可情報
     *
     */
    function getApprovalPlan()
    {
        $approval_plan = false;
        $this->_profile->getAttribute('approval_plan', $approval_plan);

        return $approval_plan;
    }

    /**
     * @param $approval_plan
     */
    function setApprovalPlan($approval_plan)
    {
        $this->_updateAttribute('approval_plan', $approval_plan);
    }

    /**
     * 代理申請の許可
     *
     */
    function getSubstituteApplication()
    {
        $substitute_application = false;
        $this->_profile->getAttribute('substitute_application',
            $substitute_application);

        return $substitute_application;
    }

    /**
     * @param $substitute_application
     */
    function setSubstituteApplication($substitute_application)
    {
        $this->_updateAttribute('substitute_application',
            $substitute_application);
    }

    /**
     * 代理承認の許可
     *
     */
    function getSubstituteApproval()
    {
        $substitute_approval = false;
        $this->_profile->getAttribute('substitute_approval',
            $substitute_approval);

        return $substitute_approval;
    }

    /**
     * @param $substitute_approval
     */
    function setSubstituteApproval($substitute_approval)
    {
        $this->_updateAttribute('substitute_approval', $substitute_approval);
    }

    /**
     * 個人の代理人設定の許可
     *
     */
    function getPersonalAgentSetting()
    {
        $personal_agent_setting = false;
        $this->_profile->getAttribute('personal_agent_setting',
            $personal_agent_setting);

        return $personal_agent_setting;
    }

    /**
     * @param $personal_agent_setting
     */
    function setPersonalAgentSetting($personal_agent_setting)
    {
        $this->_updateAttribute('personal_agent_setting',
            $personal_agent_setting);
    }


    /**
     * @return mixed
     */
    function getAutomaticExportEncoding()
    {
        // Default to the default encoding as specified in common.ini
        global $G_config_common;
        $charset = $G_config_common->get('I18N', 'default_external_encoding');

        // Fetch the configured setting
        $this->_profile->getAttribute('automatic_export_encoding', $charset);

        return $charset;
    }

    /**
     * @param $charset
     */
    function setAutomaticExportEncoding($charset)
    {
        $this->_updateAttribute('automatic_export_encoding', $charset);
    }

    /**
     * 代理人の取得
     *
     */
    function getAgent($uid)
    {
        if (is_null($uid) || strlen($uid) < 1) {
            return false;
        }

        $app_locator = GRN_ApplicationLocator::instance();
        $dbconn = $app_locator->getConnection('workflow');
        $query
            = "SELECT a._id, a.col_agent_type AS agent_type, a.col_agent_user AS agent FROM tab_grn_workflow_agent AS a"
              .
              " INNER JOIN tab_cb_user AS uu ON ( a.col_user=uu._id AND uu.col_deleted IS NULL )"
              .
              " INNER JOIN tab_cb_user AS ua ON ( a.col_agent_user=ua._id AND ua.col_deleted IS NULL )"
              .
              " WHERE a.col_user='{$dbconn->escape($uid)}'";

        $r = $dbconn->query($query);
        if ($r === false) {
            $dbconn->throwError([
                'query' => 'failed query on SELECT: ' . $query
            ]);
        }

        $result = [];
        while ($row = $dbconn->fetch_assoc($r)) {
            $result[$row["agent_type"]] = $row;
        }

        if ( ! array_key_exists(GRN_WORKFLOW_AGENT_TYPE_PETITION, $result)) {
            $result[GRN_WORKFLOW_AGENT_TYPE_PETITION] = null;
        }
        if ( ! array_key_exists(GRN_WORKFLOW_AGENT_TYPE_APPROVAL, $result)) {
            $result[GRN_WORKFLOW_AGENT_TYPE_APPROVAL] = null;
        }

        return $result;
    }

    /**
     * @param string $agent_type
     *
     * @return array
     */
    function getAgentList($agent_type = '')
    {
        $app_locator = GRN_ApplicationLocator::instance();
        $dbconn = $app_locator->getConnection('workflow');

        //$query = "SELECT _id, col_user as user, col_agent_type as agent_type, col_agent_user as agent FROM tab_grn_workflow_agent";
        $query
            = "SELECT a._id, a.col_user AS user, a.col_agent_type AS agent_type, a.col_agent_user AS agent FROM tab_grn_workflow_agent AS a"
              .
              " INNER JOIN tab_cb_user AS uu ON ( a.col_user=uu._id AND uu.col_deleted IS NULL )"
              .
              " INNER JOIN tab_cb_user AS ua ON ( a.col_agent_user=ua._id AND ua.col_deleted IS NULL )";

        if ($agent_type == GRN_WORKFLOW_AGENT_TYPE_PETITION) {
            $query .= " WHERE a.col_agent_type = "
                      . GRN_WORKFLOW_AGENT_TYPE_PETITION;
        } elseif ($agent_type == GRN_WORKFLOW_AGENT_TYPE_APPROVAL) {
            $query .= " WHERE a.col_agent_type = "
                      . GRN_WORKFLOW_AGENT_TYPE_APPROVAL;
        }

        $r = $dbconn->query($query);
        if ($r === false) {
            $dbconn->throwError([
                'query' => 'failed query on SELECT: ' . $query
            ]);
        }

        $result = [];
        while ($row = $dbconn->fetch_assoc($r)) {
            $result[$row["_id"]] = $row;
        }

        return $result;
    }

    /**
     * 代理人からユーザーを取得
     *
     */
    function getUsersFromAgent($uid, $agent_type = null)
    {
        if (is_null($uid) || strlen($uid) < 1) {
            return false;
        }

        $app_locator = GRN_ApplicationLocator::instance();
        $dbconn = $app_locator->getConnection('workflow');

        $query
            = "SELECT a._id, a.col_user AS user, a.col_agent_type AS agent_type, a.col_agent_user AS agent FROM tab_grn_workflow_agent AS a"
              .
              " INNER JOIN tab_cb_user AS uu ON ( a.col_user=uu._id AND uu.col_deleted IS NULL )"
              .
              " INNER JOIN tab_cb_user AS ua ON ( a.col_agent_user=ua._id AND ua.col_deleted IS NULL )"
              .
              " WHERE a.col_agent_user='{$dbconn->escape($uid)}'" .
              " ORDER BY a._id";

        $r = $dbconn->query($query);
        if ($r === false) {
            $dbconn->throwError([
                'query' => 'failed query on SELECT: ' . $query
            ]);
        }

        $result = [];
        while ($row = $dbconn->fetch_assoc($r)) {
            $result[$row["agent_type"]][] = $row;
        }

        if ( ! array_key_exists(GRN_WORKFLOW_AGENT_TYPE_PETITION, $result)) {
            $result[GRN_WORKFLOW_AGENT_TYPE_PETITION] = null;
        }
        if ( ! array_key_exists(GRN_WORKFLOW_AGENT_TYPE_APPROVAL, $result)) {
            $result[GRN_WORKFLOW_AGENT_TYPE_APPROVAL] = null;
        }

        if ( ! is_null($agent_type)) {
            if (array_key_exists($agent_type, $result)) {
                return $result[$agent_type];
            }
        }

        return $result;
    }

    /**
     * 代理人数の取得
     *
     */
    function getAgentCount($agent_type)
    {
        $app_locator = GRN_ApplicationLocator::instance();
        $dbconn = $app_locator->getConnection('workflow');

        $query = "SELECT COUNT(a._id) FROM tab_grn_workflow_agent AS a" .
                 " INNER JOIN tab_cb_user AS uu ON ( a.col_user=uu._id AND uu.col_deleted IS NULL )"
                 .
                 " INNER JOIN tab_cb_user AS ua ON ( a.col_agent_user=ua._id AND ua.col_deleted IS NULL )"
                 .
                 " WHERE a.col_agent_user is not null AND a.col_agent_type = '{$dbconn->escape( $agent_type )}'";

        $r = $dbconn->query($query);
        if ($r === false) {
            $dbconn->throwError([
                'query' => 'failed query on SELECT: ' . $query
            ]);
        }
        $row = $dbconn->fetch_assoc($r);
        $result = $row['COUNT(a._id)'];

        return $result;
    }

    /**
     * 代理人の更新
     *
     */
    function setAgent($uid, $agents, $agent_type)
    {
        if (is_null($uid) || strlen($uid) < 1) {
            return false;
        }

        $app_locator = GRN_ApplicationLocator::instance();
        $dbconn = $app_locator->getConnection('workflow');

        $condition = cb_queryf($dbconn,
            'col_user = "@S" AND col_agent_type="@S"', $uid, $agent_type);

        $query = "DELETE FROM tab_grn_workflow_agent WHERE " . $condition;
        $r = $dbconn->query($query);
        if ($r === false) {
            $dbconn->throwError([
                'query' => 'failed query on SELECT: ' . $query
            ]);
        }

        if (is_null($agents)) {
            $values = cb_queryf($dbconn, 'VALUES("@S", null, "@S")', $uid,
                $agent_type);
            $query
                = "INSERT INTO tab_grn_workflow_agent (col_user,col_agent_user,col_agent_type) "
                  . $values;
            $r = $dbconn->query($query);
            if ($r === false) {
                $dbconn->throwError([
                    'query' => 'failed query on SELECT: ' . $query
                ]);
            }

            return true;
        }
        foreach ($agents as $agent) {
            if (is_null($agent) || strlen($agent) < 1) {
                $values = cb_queryf($dbconn, 'VALUES("@S", null, "@S")', $uid,
                    $agent_type);
                $query
                    = "INSERT INTO tab_grn_workflow_agent (col_user,col_agent_user,col_agent_type) "
                      . $values;
            } else {
                $values = cb_queryf($dbconn, 'VALUES("@S", "@S", "@S")', $uid,
                    $agent, $agent_type);
                $query
                    = "INSERT INTO tab_grn_workflow_agent (col_user,col_agent_user,col_agent_type) "
                      . $values;
            }
            $r = $dbconn->query($query);
            if ($r === false) {
                $dbconn->throwError([
                    'query' => 'failed query on SELECT: ' . $query
                ]);
            }
        }

        return true;
    }

    /**
     * @param $user_id
     * @param $mandator_id
     *
     * @return bool
     */
    public function isProxyApproval($user_id, $mandator_id = null)
    {
        if ( ! $this->getSubstituteApproval()) {
            return false;
        }

        $users = $this->getUsersFromAgent($user_id,
            GRN_WORKFLOW_AGENT_TYPE_APPROVAL);
        if ($users == false || is_null($users) || ! is_array($users)) {
            return false;
        }
        if (count($users) <= 0) {
            return false;
        }
        if ( ! is_null($mandator_id)) {
            foreach ($users as $user) {
                if ($user['user'] == $mandator_id) {
                    return true;
                }
            }

            return false;
        }

        return true;
    }

    /**
     * enable/disable email notification
     */
    function getForwardEmail()
    {
        $forward_email = false;
        $this->_profile->getAttribute('forward_email', $forward_email);

        return $forward_email;
    }

    /**
     * @param $forward_email
     *
     * @return bool
     */
    function setForwardEmail($forward_email)
    {
        return $this->_updateAttribute('forward_email', $forward_email);
    }

    /**
     * use/not use email in user information to forward
     */
    function getForwardUserEmail()
    {
        $forward_user_email = true;
        $this->_profile->getAttribute('forward_user_email',
            $forward_user_email);

        return $forward_user_email;
    }

    /**
     * @param $forward_user_email
     *
     * @return bool
     */
    function setForwardUserEmail($forward_user_email)
    {
        return $this->_updateAttribute('forward_user_email',
            $forward_user_email);
    }

    /**
     * get other email to notification
     */
    function getOtherEmailAddress()
    {
        $other_email_address = null;
        $this->_profile->getAttribute('other_email_address',
            $other_email_address);

        return $other_email_address;
    }

    /**
     * @param $other_email_address
     *
     * @return bool
     */
    function setOtherEmailAddress($other_email_address)
    {
        return $this->_updateAttribute('other_email_address',
            $other_email_address);
    }

    /**
     * enable or disable mail notification
     *
     */
    function getMailNotification()
    {
        $mail_notification = false;
        $this->_profile->getAttribute('mail_notification', $mail_notification);

        return $mail_notification;
    }

    /**
     * @param $mail_notification
     */
    function setMailNotification($mail_notification)
    {
        $this->_updateAttribute('mail_notification', $mail_notification);
    }

    /**
     * mail notification url
     *
     */
    function getMailNotificationURL()
    {
        //GRN2-3047
        $mail_notification_url = cb_get_full_url('workflow/index');
        //GRN2-3047
        $this->_profile->getAttribute('mail_notification_url',
            $mail_notification_url);

        return $mail_notification_url;
    }

    /**
     * @param $mail_notification_url
     */
    function setMailNotificationURL($mail_notification_url)
    {
        $this->_updateAttribute('mail_notification_url',
            $mail_notification_url);
    }

    /**
     * @param $mail_notification_url
     *
     * @return bool
     */
    function validateMailNotificationURL($mail_notification_url)
    {
        require_once('workflow/mail_notification.csp');
        $mail_notification_service
            = GRN_Workflow_MailNotification_Service::getInstance();

        return $mail_notification_service->validateURL($mail_notification_url);
    }

    /**
     * @return bool
     */
    function getJsCssCustomizationSetting()
    {
        $js_css_customization_setting = false;
        $this->_profile->getAttribute('js_css_customization_setting',
            $js_css_customization_setting);

        return $js_css_customization_setting;
    }

    /**
     * @param integer $js_css_customization_setting
     */
    function setJsCssCustomizationSetting($js_css_customization_setting)
    {
        $this->_updateAttribute('js_css_customization_setting',
            $js_css_customization_setting);
    }
}
