<?php

require_once('fw/transaction.csp');
require_once('grn/file.csp');

class GRN_Workflow_FileBody extends GRN_FileBody
{
    var $_app_id = 'workflow';

    var $col_file
        = [
            'type' => 'weak_relation',
            'to'   => 'GRN_Workflow_File',
            'lazy' => true
        ];

    function __construct(& $row)
    {
        parent::__construct($row);
    }
}

class GRN_Workflow_FileLog extends GRN_FileLog
{
    var $_app_id = 'workflow';

    var $col_file
        = [
            'type' => 'relation',
            'to'   => 'GRN_Workflow_File',
            'lazy' => true
        ];
    var $col_body
        = [
            'type' => 'weak_relation',
            'to'   => 'GRN_Workflow_FileBody'
        ];

    function __construct(& $row)
    {
        parent::__construct($row);
    }
}

class GRN_Workflow_FileLock extends GRN_FileLock
{
    var $_app_id = 'workflow';

    var $col_file
        = [
            'type'   => 'relation',
            'to'     => 'GRN_Workflow_File',
            'unique' => true
        ];

    function __construct(& $row)
    {
        parent::__construct($row);
    }
}

class GRN_Workflow_File extends GRN_File
{
    var $_app_id = 'workflow';
    var $_body_table_name = 'GRN_Workflow_FileBody';
    var $_log_table_name = 'GRN_Workflow_FileLog';
    var $_lock_table_name = 'GRN_Workflow_FileLock';

    function __construct(& $row)
    {
        parent::__construct($row, 'grn.workflow');
    }
}

class GRN_Workflow_FileManager_Core extends GRN_FileManager
{
    function __construct()
    {
        $this->_file_table = cb_class2table('GRN_Workflow_File');
        $this->_body_table = cb_class2table('GRN_Workflow_FileBody');
    }
}

class GRN_Workflow_FileManager implements CB_Transactional
{
    /**
     * @return GRN_Workflow_FileManager
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_FileManager();

            $tm = CB_TransactionManager::getInstance();
            $tm->register(CB_TRANSACTION_LEVEL_SUBSIDIARY, $_instance);
        }

        return $_instance;
    }

    var $_root = null;

    function __construct()
    {
        global $G_config_common;
        $this->_root = $G_config_common->get('Files', 'dir');
        if ( ! is_writable($this->_root)) {
            cb_throw_error(E_COMMON_FILES_DIR_NO_WRITE_PRIV, null,
                ['dir' => $this->_root]);
        }
    }

    function _formatPath($sub_dir, $name)
    {
        $dir = $this->_root . "/workflow/{$sub_dir}";
        cb_mkdir($dir, 0777, true, true);
        if ( ! is_writable($dir)) {
            cb_throw_error(E_COMMON_FILES_DIR_NO_WRITE_PRIV, null,
                ['dir' => $dir]);
        }

        return "{$dir}/{$name}";
    }

    var $_toCopy = [];

    function addToCopy($tmp_name, $dir, $name)
    {
        $this->_toCopy[] = [
            $tmp_name,
            $this->_formatPath($dir, $name)
        ];
    }

    public function commit()
    {
        foreach ($this->_toCopy as $cp) {
            $from = $cp[0];
            $to = $cp[1];

            copy($from, $to);
        }

        $this->_toCopy = [];

        return true;
    }

    public function abort()
    {
        $this->_toCopy = [];
    }
}


