<?php
require_once('workflow/resources.csp');
require_once('workflow/WorkflowFacade.csp');
require_once('workflow/bean/GrnAutoScheduleSetting.csp');

/**
 * Class GRN_Workflow_Auto_Schedule_Setting_Logic
 */
class GRN_Workflow_Auto_Schedule_Setting_Logic
{
    /**
     * @return GRN_Workflow_Auto_Schedule_Setting_Logic
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_Auto_Schedule_Setting_Logic();
        }

        return $_instance;
    }

    /**
     * @param GrnAutoScheduleSetting $insertObj
     *
     * @return bool
     */
    private function _setCreator(GrnAutoScheduleSetting $insertObj)
    {
        //Check Argument
        if ( ! $insertObj) {
            return false;
        }

        // Get Login User
        $login_user = cb_get_login_user();

        //Get Create Time
        $ctime = time();

        //Set Create Infomation
        if ($login_user) {
            $user_id = $login_user->getOID();
            $display_name = $login_user->get('display_name');
            $foreign_key = $login_user->get('foreign_key');
            $insertObj->setCreator($user_id);         //Creator
            $insertObj->setCreatorForeignKey($foreign_key);
            $insertObj->setCreatorName($display_name);
            $insertObj->setModifier($user_id);         //Creator
            $insertObj->setModifierForeignKey($foreign_key);
            $insertObj->setModifierName($display_name);
        }
        $insertObj->setCtime($ctime);   //Create Time
        $insertObj->setMtime($ctime);   //Create Time

        return true;
    }

    /**
     * @param $modifyObj
     *
     * @return bool
     */
    private function _setModifier($modifyObj)
    {
        if ( ! $modifyObj) {
            return false;
        }

        // Get Login User
        $login_user = cb_get_login_user();

        //Get Create Time
        $ctime = time();

        //Set Create Infomation
        if ($login_user) {
            $user_id = $login_user->getOID();
            $display_name = $login_user->get('display_name');
            $foreign_key = $login_user->get('foreign_key');
            $modifyObj->setModifier($user_id);         //Creator
            $modifyObj->setModifierForeignKey($foreign_key);
            $modifyObj->setModifierName($display_name);
        }
        $modifyObj->setMtime($ctime);   //Create Time

        return true;
    }

    /**
     * @param $inDataArray
     *
     * @return bool|int|mixed
     */
    public function save($inDataArray)
    {
        if ( ! isset($inDataArray['col_form'])) {
            return false;
        }
        $dataObj = [];

        $dao = new WorkflowFacade();
        $inputObj = new GrnAutoScheduleSetting($inDataArray);

        $t = $this->getByFormId($inDataArray['col_form']);
        if ( ! $t) {
            if ($inDataArray['col_active']
                == GRN_WORKFLOW_SCHEDULE_DEACTIVACTED
            ) {
                return false;
            } else {
                $this->_setCreator($inputObj);

                return $dao->insertAutoScheduleSetting($dataObj, $inputObj);
            }
        } else {
            $column_list = array_keys($inDataArray);
            $this->_setModifier($inputObj);

            return $dao->updateAutoScheduleSetting($dataObj, $inputObj,
                $column_list);
        }
    }

    /**
     * @param $form_id
     *
     * @return bool|GrnAutoScheduleSetting
     */
    function getByFormId($form_id)
    {
        $dao = new WorkflowFacade();
        $dataObj = [];
        $insertObj = new GrnAutoScheduleSetting(['col_form' => $form_id]);

        return $dao->getAutoScheduleSetting($dataObj, $insertObj);
    }

    /**
     * @param $inDataArray
     *
     * @return bool|mixed
     */
    public function update($inDataArray)
    {
        if ( ! isset($inDataArray['col_form'])) {
            return false;
        }
        $dao = new WorkflowFacade();
        $dataObj = [];

        $upObj = new GrnAutoScheduleSetting($inDataArray);
        $this->_setModifier($upObj);
        $column_list = array_keys($inDataArray);

        return $dao->updateAutoScheduleSetting($dataObj, $column_list, $upObj);
    }

    /**
     * @param $form_id
     * @param $ids_array
     *
     * @return bool
     */
    public function checkModifyItem($form_id, $ids_array)
    {
        $autoScheduleObj = $this->getByFormId($form_id);

        $locator = GRN_ApplicationLocator::instance();
        if ($locator->isActive(GRN_SCHEDULE_APPLICATION_ID) && $autoScheduleObj
            && $autoScheduleObj->getActive() == GRN_WORKFLOW_SCHEDULE_ACTIVE
        ) {
            $items_array = [
                $autoScheduleObj->getScheduleStartItem(),
                $autoScheduleObj->getScheduleEndItem()
            ];

            $intersect = array_intersect($ids_array, $items_array);
            if ( ! empty($intersect)) {
                require_once('workflow/error_code.csp');
                cb_throw_error(E_GRN_WRKF_AUTO_SCHEDULE_ITEM);
            }
        }

        return true;
    }

    /**
     * @param $form_id
     * @param $ids_array
     *
     * @return bool
     */
    public function checkCsvItem($form_id, $ids_array)
    {
        $autoScheduleObj = $this->getByFormId($form_id);

        $locator = GRN_ApplicationLocator::instance();
        if ($locator->isActive(GRN_SCHEDULE_APPLICATION_ID) && $autoScheduleObj
            && $autoScheduleObj->getActive() == GRN_WORKFLOW_SCHEDULE_ACTIVE
        ) {
            $start_item = $autoScheduleObj->getScheduleStartItem();
            $end_item = $autoScheduleObj->getScheduleEndItem();
            if ( ! isset($ids_array[$start_item])
                 || ! isset($ids_array[$end_item])
                 || $ids_array[$start_item] != 'grn.workflow.date'
                 || $ids_array[$end_item] != 'grn.workflow.date'
            ) {
                require_once('workflow/error_code.csp');
                cb_throw_error(E_GRN_WRKF_AUTO_SCHEDULE_ITEM);
            }
        }

        return true;
    }
}


