<?php
/**
 * Workflow Application Folder Class
 *
 * @author  SHIMADA Kunihiko 2006/1
 * @version 1.0
 * @package grn.workflow
 */

/** Workflow Application **/
require_once('workflow/resources.csp');
require_once('workflow/folder_logic_base.csp');
require_once('grn/application.csp');

/**
 * Folder Manager Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_Folder_Logic extends GRN_Workflow_Folder_Logic_Base
{
    //Folder Manager Instance
    var $_folder_manager = null;

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {

    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_Folder_Logic $instance                  //Instance of GRN_Workflow_Folder_Logic
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_Folder_Logic();
        }

        return $_instance;
    }

    /**
     * Get Folder Logic
     *
     * @return GRN_Workflow_Folder_Manager $folder_manager              //Folder Manager
     */
    function _getFolderManager()
    {
        if (is_null($this->_folder_manager)) {
            require_once('workflow/folder_manager.csp');
            $this->_folder_manager = GRN_Workflow_Folder_Manager::getInstance();
        }

        return $this->_folder_manager;
    }

    /**
     * Initialize Folder
     */
    function initialize()
    {
        // Folder Manager Instance
        $folder_manager = $this->_getFolderManager();

        //Get User Object
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $user_id = 1;   // Administrator
        $user = $uum->getUser($user_id);
        $display_name = $user->get("display_name");
        $foreign_key = $user->get("foreign_key");
        //Get Create Time
        $ctime = time();

        // Folder Manager Instance
        $folder_manager = $this->_getFolderManager();
        //Set Folder Property List

        $property_list = [
            GRN_WORKFLOW_COLUMN_NAME        => '(root)',
            GRN_WORKFLOW_COLUMN_FOREIGN_KEY => 'ROOT_FOLDER_FOREIGN_KEY',
            GRN_WORKFLOW_COLUMN_FOLDER_TYPE => GRN_WORKFLOW_FOLDER_TYPE_ROOT_ID,
            GRN_WORKFLOW_COLUMN_LIST_INDEX  => '0',
        ];
        $folder_manager->create($property_list);

        return true;
    }

    /**
     * Initialize User
     *
     * @param  int $user_id //User ID
     *
     * @return array $folder_list           //Folder ID
     */
    function initializeUser($user_id)
    {
        //Check User ID
        require_once('workflow/error_code.csp');
        cb_trim_check($user_id, E_GRN_WRKF_FOLDER_INVALID_USER_ID); //User ID

        // Folder Manager Instance
        $folder_manager = $this->_getFolderManager();
        if ( ! $folder_manager->isCache($user_id)) {
            //Get User Object
            global $G_container_base;
            $uum = $G_container_base->getInstance('uum');
            $user = $uum->getUser($user_id);
            $display_name = $user->get("display_name");
            $foreign_key = $user->get("foreign_key");
            //Get Create Time
            $ctime = time();

            // Folder Manager Instance
            $folder_manager = $this->_getFolderManager();
            //Set Folder Property List

            $property_list = [
                GRN_WORKFLOW_COLUMN_USER                 => $user_id,
                GRN_WORKFLOW_COLUMN_NAME                 => '(new)',
                GRN_WORKFLOW_COLUMN_FOREIGN_KEY          => 'NEW_FOLDER_FOREIGN_KEY',
                GRN_WORKFLOW_COLUMN_FOLDER_TYPE          => GRN_WORKFLOW_FOLDER_TYPE_NEW_ID,
                GRN_WORKFLOW_COLUMN_LIST_INDEX           => '1',
                GRN_WORKFLOW_COLUMN_PARENT               => GRN_WORKFLOW_FOLDER_ROOT_ID,
                GRN_WORKFLOW_COLUMN_CREATOR              => $user_id,
                GRN_WORKFLOW_COLUMN_CREATOR_NAME         => $display_name,
                GRN_WORKFLOW_COLUMN_CREATOR_FOREIGN_KEY  => $foreign_key,
                GRN_WORKFLOW_COLUMN_CTIME                => $ctime,
                GRN_WORKFLOW_COLUMN_MODIFIER             => $user_id,
                GRN_WORKFLOW_COLUMN_MODIFIER_NAME        => $display_name,
                GRN_WORKFLOW_COLUMN_MODIFIER_FOREIGN_KEY => $foreign_key,
                GRN_WORKFLOW_COLUMN_MTIME                => $ctime,
            ];
            $folder_manager->create($property_list);

            $property_list = [
                GRN_WORKFLOW_COLUMN_USER                 => $user_id,
                GRN_WORKFLOW_COLUMN_NAME                 => '(in)',
                GRN_WORKFLOW_COLUMN_FOREIGN_KEY          => 'IN_FOLDER_FOREIGN_KEY',
                GRN_WORKFLOW_COLUMN_FOLDER_TYPE          => GRN_WORKFLOW_FOLDER_TYPE_IN_ID,
                GRN_WORKFLOW_COLUMN_LIST_INDEX           => '2',
                GRN_WORKFLOW_COLUMN_PARENT               => GRN_WORKFLOW_FOLDER_ROOT_ID,
                GRN_WORKFLOW_COLUMN_CREATOR              => $user_id,
                GRN_WORKFLOW_COLUMN_CREATOR_NAME         => $display_name,
                GRN_WORKFLOW_COLUMN_CREATOR_FOREIGN_KEY  => $foreign_key,
                GRN_WORKFLOW_COLUMN_CTIME                => $ctime,
                GRN_WORKFLOW_COLUMN_MODIFIER             => $user_id,
                GRN_WORKFLOW_COLUMN_MODIFIER_NAME        => $display_name,
                GRN_WORKFLOW_COLUMN_MODIFIER_FOREIGN_KEY => $foreign_key,
                GRN_WORKFLOW_COLUMN_MTIME                => $ctime,
            ];
            $folder_manager->create($property_list);

            $property_list = [
                GRN_WORKFLOW_COLUMN_USER                 => $user_id,
                GRN_WORKFLOW_COLUMN_NAME                 => '(out)',
                GRN_WORKFLOW_COLUMN_FOREIGN_KEY          => 'OUT_FOLDER_FOREIGN_KEY',
                GRN_WORKFLOW_COLUMN_FOLDER_TYPE          => GRN_WORKFLOW_FOLDER_TYPE_OUT_ID,
                GRN_WORKFLOW_COLUMN_LIST_INDEX           => '3',
                GRN_WORKFLOW_COLUMN_PARENT               => GRN_WORKFLOW_FOLDER_ROOT_ID,
                GRN_WORKFLOW_COLUMN_CREATOR              => $user_id,
                GRN_WORKFLOW_COLUMN_CREATOR_NAME         => $display_name,
                GRN_WORKFLOW_COLUMN_CREATOR_FOREIGN_KEY  => $foreign_key,
                GRN_WORKFLOW_COLUMN_CTIME                => $ctime,
                GRN_WORKFLOW_COLUMN_MODIFIER             => $user_id,
                GRN_WORKFLOW_COLUMN_MODIFIER_NAME        => $display_name,
                GRN_WORKFLOW_COLUMN_MODIFIER_FOREIGN_KEY => $foreign_key,
                GRN_WORKFLOW_COLUMN_MTIME                => $ctime,
            ];
            $folder_manager->create($property_list);

            $property_list = [
                GRN_WORKFLOW_COLUMN_USER                 => $user_id,
                GRN_WORKFLOW_COLUMN_NAME                 => '(finish)',
                GRN_WORKFLOW_COLUMN_FOREIGN_KEY          => 'FINISH_FOLDER_FOREIGN_KEY',
                GRN_WORKFLOW_COLUMN_FOLDER_TYPE          => GRN_WORKFLOW_FOLDER_TYPE_FINISH_ID,
                GRN_WORKFLOW_COLUMN_LIST_INDEX           => '4',
                GRN_WORKFLOW_COLUMN_PARENT               => GRN_WORKFLOW_FOLDER_ROOT_ID,
                GRN_WORKFLOW_COLUMN_CREATOR              => $user_id,
                GRN_WORKFLOW_COLUMN_CREATOR_NAME         => $display_name,
                GRN_WORKFLOW_COLUMN_CREATOR_FOREIGN_KEY  => $foreign_key,
                GRN_WORKFLOW_COLUMN_CTIME                => $ctime,
                GRN_WORKFLOW_COLUMN_MODIFIER             => $user_id,
                GRN_WORKFLOW_COLUMN_MODIFIER_NAME        => $display_name,
                GRN_WORKFLOW_COLUMN_MODIFIER_FOREIGN_KEY => $foreign_key,
                GRN_WORKFLOW_COLUMN_MTIME                => $ctime,
            ];
            $folder_manager->create($property_list);

            $property_list = [
                GRN_WORKFLOW_COLUMN_USER                 => $user_id,
                GRN_WORKFLOW_COLUMN_NAME                 => '(unprocessed)',
                GRN_WORKFLOW_COLUMN_FOREIGN_KEY          => 'UNPROCESSED_FOLDER_FOREIGN_KEY',
                GRN_WORKFLOW_COLUMN_FOLDER_TYPE          => GRN_WORKFLOW_FOLDER_TYPE_UNPROCESSED_ID,
                GRN_WORKFLOW_COLUMN_LIST_INDEX           => '5',
                GRN_WORKFLOW_COLUMN_PARENT               => GRN_WORKFLOW_FOLDER_ROOT_ID,
                GRN_WORKFLOW_COLUMN_CREATOR              => $user_id,
                GRN_WORKFLOW_COLUMN_CREATOR_NAME         => $display_name,
                GRN_WORKFLOW_COLUMN_CREATOR_FOREIGN_KEY  => $foreign_key,
                GRN_WORKFLOW_COLUMN_CTIME                => $ctime,
                GRN_WORKFLOW_COLUMN_MODIFIER             => $user_id,
                GRN_WORKFLOW_COLUMN_MODIFIER_NAME        => $display_name,
                GRN_WORKFLOW_COLUMN_MODIFIER_FOREIGN_KEY => $foreign_key,
                GRN_WORKFLOW_COLUMN_MTIME                => $ctime,
            ];
            $folder_manager->create($property_list);

            $property_list = [
                GRN_WORKFLOW_COLUMN_USER                 => $user_id,
                GRN_WORKFLOW_COLUMN_NAME                 => '(temp)',
                GRN_WORKFLOW_COLUMN_FOREIGN_KEY          => 'TEMP_FOLDER_FOREIGN_KEY',
                GRN_WORKFLOW_COLUMN_FOLDER_TYPE          => GRN_WORKFLOW_FOLDER_TYPE_TEMP_ID,
                GRN_WORKFLOW_COLUMN_LIST_INDEX           => '6',
                GRN_WORKFLOW_COLUMN_PARENT               => GRN_WORKFLOW_FOLDER_ROOT_ID,
                GRN_WORKFLOW_COLUMN_CREATOR              => $user_id,
                GRN_WORKFLOW_COLUMN_CREATOR_NAME         => $display_name,
                GRN_WORKFLOW_COLUMN_CREATOR_FOREIGN_KEY  => $foreign_key,
                GRN_WORKFLOW_COLUMN_CTIME                => $ctime,
                GRN_WORKFLOW_COLUMN_MODIFIER             => $user_id,
                GRN_WORKFLOW_COLUMN_MODIFIER_NAME        => $display_name,
                GRN_WORKFLOW_COLUMN_MODIFIER_FOREIGN_KEY => $foreign_key,
                GRN_WORKFLOW_COLUMN_MTIME                => $ctime,
            ];
            $folder_manager->create($property_list);
            /*
                        $property_list = array(
                            GRN_WORKFLOW_COLUMN_USER                    => $user_id,
                            GRN_WORKFLOW_COLUMN_NAME                    => '(trash)',
                            GRN_WORKFLOW_COLUMN_FOREIGN_KEY             => 'TRASH_FOLDER_FOREIGN_KEY',
                            GRN_WORKFLOW_COLUMN_FOLDER_TYPE             => GRN_WORKFLOW_FOLDER_TYPE_TRASH_ID,
                            GRN_WORKFLOW_COLUMN_LIST_INDEX              => 0x7FFFFFFF,
                            GRN_WORKFLOW_COLUMN_PARENT                  => GRN_WORKFLOW_FOLDER_ROOT_ID,
                            GRN_WORKFLOW_COLUMN_CREATOR                 => $user_id,
                            GRN_WORKFLOW_COLUMN_CREATOR_NAME            => $display_name,
                            GRN_WORKFLOW_COLUMN_CREATOR_FOREIGN_KEY     => $foreign_key,
                            GRN_WORKFLOW_COLUMN_CTIME                   => $ctime,
                            GRN_WORKFLOW_COLUMN_MODIFIER                => $user_id,
                            GRN_WORKFLOW_COLUMN_MODIFIER_NAME           => $display_name,
                            GRN_WORKFLOW_COLUMN_MODIFIER_FOREIGN_KEY    => $foreign_key,
                            GRN_WORKFLOW_COLUMN_MTIME                   => $ctime,
                        );
                        $folder_manager->create($property_list);
            */
        }

        return true;
    }

    /**
     * get Login User
     *
     * @access private
     * @return object $login_user                //Login User
     */
    function _getLoginUser()
    {
        //Get UUM Instance
        global $G_container_base;
        $grn_uum = $G_container_base->getInstance('uum');

        //Get Login User
        $login_user = $grn_uum->getLoginUser();
        if ( ! $login_user) {
            $ret = false;

            return $ret;
        }

        //Return Login User
        return $login_user;
    }

    /**
     * Set Creator
     *
     * @access private
     *
     * @param  array $property_list //Property List
     *
     * @return bool   $result                    //Result
     */
    function _setCreator(&$property_list)
    {
        //Check Argument
        if ( ! is_array($property_list)) {
            return false;
        }

        // Get Login User
        $login_user = $this->_getLoginUser();

        //Get Create Time
        $ctime = time();

        //Set Create Infomation
        if ($login_user) {
            $user_id = $login_user->getOID();
            $display_name
                = $login_user->get('display_name');
            $foreign_key
                = $login_user->get('foreign_key');
            $property_list[GRN_WORKFLOW_COLUMN_CREATOR]
                = $user_id;         //Creator
            $property_list[GRN_WORKFLOW_COLUMN_CREATOR_NAME]
                = $display_name;    //Creator Name
            $property_list[GRN_WORKFLOW_COLUMN_CREATOR_FOREIGN_KEY]
                = $foreign_key;     //Creator Foreign Key
            $property_list[GRN_WORKFLOW_COLUMN_MODIFIER]
                = $user_id;         //Modifier
            $property_list[GRN_WORKFLOW_COLUMN_MODIFIER_NAME]
                = $display_name;    //Modifier Name
            $property_list[GRN_WORKFLOW_COLUMN_MODIFIER_FOREIGN_KEY]
                = $foreign_key;     //Modifier Foreign Key
        }
        $property_list[GRN_WORKFLOW_COLUMN_CTIME] = $ctime;   //Create Time
        $property_list[GRN_WORKFLOW_COLUMN_MTIME] = $ctime;   //Modify Time

        return true;
    }

    /**
     * Set Modofier
     *
     * @access private
     *
     * @param  array $property_list //Property List
     *
     * @return bool   $result                    //Result
     */
    function _setModifier(&$property_list)
    {
        //Check Argument
        if ( ! is_array($property_list)) {
            return false;
        }

        // Get Login User
        $login_user = $this->_getLoginUser();

        //Get Modofy Time
        $mtime = time();

        //Set Modify Infomation/
        if ($login_user) {
            $user_id = $login_user->getOID();
            $display_name
                = $login_user->get('display_name');
            $foreign_key
                = $login_user->get('foreign_key');
            $property_list[GRN_WORKFLOW_COLUMN_MODIFIER]
                = $user_id;         //Modifier
            $property_list[GRN_WORKFLOW_COLUMN_MODIFIER_NAME]
                = $display_name;    //Modifier Name
            $property_list[GRN_WORKFLOW_COLUMN_MODIFIER_FOREIGN_KEY]
                = $foreign_key;     //Modifier Foreign Key
        }
        $property_list[GRN_WORKFLOW_COLUMN_MTIME] = $mtime;   //Modify Time

        return true;
    }

    /**
     * Check Folder Code
     *
     * @param int    $user_id     //User ID
     * @param string $folder_code //Folder Code
     * @param int    $folder_id   //Folder ID
     * @param bool   $throw_error //Throw Error Flag
     * @param bool   $result      //Check Result
     */
    function checkCode(
        $user_id,
        $folder_code,
        $folder_id = null,
        $throw_error = true
    ) {
        //Get Folder By Foreign key
        $folder_manager = $this->_getFolderManager();
        $folder = $folder_manager->getByForeignKey($user_id,
            $folder_code);
        if ( ! $folder) {
            return true;
        }

        //Check Same Folder
        if ($folder['_id'] != $folder_id) {
            if ($throw_error) {
                //Duplicate Foreign Key
                require_once('workflow/error_code.csp');
                cb_throw_error(E_GRN_WRKF_FOLDER_DUPLICATE_FOREIGN_KEY);
            }

            return false;
        }

        return true;
    }


    /**
     * Add Folder Object
     *
     * @return string $user_id                  //User ID
     * @return string $folder_name              //Folder Name
     * @return string $folder_code              //Folder Code
     * @return string $folder_memo              //Folder Memo
     * @return int    $parent_folder_id         //Parent Folder ID
     * @return object $folder                   //Folder Object
     */
    function &add(
        $user_id,
        $folder_name,
        $folder_code,
        $folder_memo,
        $parent_folder_id
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($user_id,
            E_GRN_WRKF_FOLDER_INVALID_USER_ID);     //User ID
        cb_trim_check($folder_name,
            E_GRN_WRKF_FOLDER_NOT_INPUT_NECESSARY); //Folder Name
        cb_trim_check($folder_code,
            E_GRN_WRKF_FOLDER_NOT_INPUT_NECESSARY); //Folder Code
        cb_trim_check($parent_folder_id,
            E_GRN_WRKF_FOLDER_NOT_INPUT_NECESSARY); //Parent Folder ID

        //Check Duplicate Folder Code
        $this->checkCode($user_id, $folder_code);

        //Get Folder Object
        $parent_folder =& $this->get($user_id, $parent_folder_id);
        if ( ! $parent_folder) {
            //Folder Not Found
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_FOLDER_NOT_FOUND);
        }

        //Create Property List
        $property_list = [
            GRN_WORKFLOW_COLUMN_USER        => $user_id,
            GRN_WORKFLOW_COLUMN_NAME        => $folder_name,
            GRN_WORKFLOW_COLUMN_FOREIGN_KEY => $folder_code,
            GRN_WORKFLOW_COLUMN_MEMO        => $folder_memo,
            GRN_WORKFLOW_COLUMN_PARENT      => $parent_folder_id,
        ];

        //Set Creator
        $this->_setCreator($property_list);

        $folder_manager = $this->_getFolderManager();
        $folder =& $folder_manager->create($property_list);

        //Return Folder Object
        return $folder;
    }

    /**
     * Modify Folder Object
     *
     * @return string $user_id                  //User ID
     * @return int    $folder_id                //Folder ID
     * @return string $folder_name              //Folder Name
     * @return string $folder_code              //Folder Code
     * @return string $folder_memo              //Folder Memo
     * @return int    $parent_folder_id         //Parent Folder ID
     * @return int    $folder_id                //Folder ID
     */
    function modify(
        $user_id,
        $folder_id,
        $folder_name,
        $folder_code,
        $folder_memo,
        $parent_folder_id = null
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($user_id,
            E_GRN_WRKF_FOLDER_INVALID_USER_ID);         //User ID
        cb_trim_check($folder_id,
            E_GRN_WRKF_FOLDER_INVALID_FOLDER_ID);       //Folder ID
        cb_trim_check($folder_code,
            E_GRN_WRKF_FOLDER_NOT_INPUT_NECESSARY);     //Folder Code
        cb_trim_check($folder_name,
            E_GRN_WRKF_FOLDER_NOT_INPUT_NECESSARY);     //Folder Name

        //Check Duplicate Folder Code
        $this->checkCode($user_id, $folder_code, $folder_id);

        //Get Folder Object
        $folder =& $this->get($user_id, $folder_id);
        if ( ! $folder) {
            //Folder Not Found
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_FOLDER_NOT_FOUND);
        }

        //Create Property List
        $property_list = [
            GRN_WORKFLOW_COLUMN_USER        => $user_id,
            GRN_WORKFLOW_COLUMN_NAME        => $folder_name,
            GRN_WORKFLOW_COLUMN_FOREIGN_KEY => $folder_code,
            GRN_WORKFLOW_COLUMN_MEMO        => $folder_memo,
        ];

        //Set Modifier Information
        $this->_setModifier($property_list);

        $folder_manager = $this->_getFolderManager();
        $folder_id = $folder_manager->update($user_id, $folder_id,
            $property_list);

        //Return Folder ID
        return $folder_id;
    }

    /**
     * Delete Folder
     *
     * @param  int  $user_id   //User ID
     * @param  int  $folder_id //Folder ID
     * @param  bool $refresh   //Refresh Flag
     *
     * @return BOOL   $result                   //Result
     */
    function delete($user_id, $folder_id, $refresh = false)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($folder_id,
            E_GRN_WRKF_FOLDER_INVALID_FOLDER_ID);        //Folder ID

        //Check Folder Exist
        $folder = $this->get($folder_id, $user_id, $refresh);

        //Remove Folder
        $folder_manager = $this->_getFolderManager();
        $result = $folder_manager->remove($user_id, $folder_id);

        return true;
    }

    /**
     * Delete Multiple Folder
     *
     * @param  int   $user_id        //User ID
     * @param  array $folder_id_list //Folder ID List
     *
     * @return BOOL   $result                   //Result
     */
    function deleteMulti($user_id, $folder_id_list)
    {
        //Check Argument
        if ( ! is_array($folder_id_list)) {
            //Not Input Necessary
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_FOLDER_NOT_INPUT_NECESSARY);
        }

        //Remove Folder
        $folder_manager = $this->_getFolderManager();
        $folder_manager->removeMulti($user_id, $folder_id_list);

        return true;
    }

    /**
     * Delete All Folder
     *
     * @param  int $user_id //User ID
     *
     * @return BOOL   $result                   //Result
     */
    function deleteAll($user_id)
    {
        //Remove Folder
        $folder_manager = $this->_getFolderManager();
        $folder_manager->removeAll($user_id);

        return true;
    }

    /**
     * Change Folder Order
     *
     * @param  int  $user_id        //User ID
     * @param  int  $folder_id_list //Folder ID List
     * @param  bool $refresh        //Refresh Flag
     *
     * @return BOOL   $result                   //Result
     */
    function changeOrder($user_id, $folder_id_list, $refresh = false)
    {
        //Check Argument
        if ( ! is_array($folder_id_list)) {
            require_once('fw/string_util.csp');
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_FOLDER_NOT_INPUT_NECESSARY);
        }

        //Change Order
        $folder_manager = $this->_getFolderManager();
        $folder_manager->changeOrder($user_id, $folder_id_list, $refresh);

        return true;
    }

    function getSpecific($folder_id, $lock = CB_DATABASE_DEFAULT_LOCK)
    {
        require_once('workflow/error_code.csp');
        cb_trim_check($folder_id, E_GRN_WRKF_FOLDER_INVALID_FOLDER_ID);

        $app_locator = GRN_ApplicationLocator::instance();
        $dbconn = $app_locator->getConnection('workflow');

        $condition = cb_queryf($dbconn, "f._id='@S'", $folder_id);
        $query
            = "SELECT f._id,f.col_folder_type FROM tab_grn_workflow_folder AS f"
              .
              " INNER JOIN tab_cb_user AS u ON (f.col_user=u._id AND u.col_deleted IS NULL)"
              .
              " WHERE ({$condition})";
        $query = $dbconn->select_format($query, 0, 1, $lock);
        $result = $dbconn->query($query);
        if (false === $result) {
            $dbconn->throwError(['query' => "failed query on SELECT: {$query}"]);
        }

        return $dbconn->fetch_assoc($result);
    }

    function getSpecificList(
        $uids,
        $foreign_keys = null,
        $lock = CB_DATABASE_DEFAULT_LOCK
    ) {
        if ( ! is_array($uids) || 0 == count($uids)) {
            // ユーザーがありません
            cb_throw_error(E_GRN_WRKF_FOLDER_INVALID_USER_ID);
        }

        $app_locator = GRN_ApplicationLocator::instance();
        $dbconn = $app_locator->getConnection('workflow');
        if (is_array($foreign_keys) && 0 < count($foreign_keys)) {
            $limit = count($foreign_keys) * count($uids);

            foreach ($foreign_keys as $key => $value) {
                $foreign_keys[$key] = cb_queryf($dbconn, "'@S'", $value);
            }
            $foreign_keys = implode(',', $foreign_keys);

            foreach ($uids as $key2 => $value2) {
                $uids[$key2] = cb_queryf($dbconn, "'@S'", $value2);
            }
            $uids = implode(',', $uids);

            $condition
                = sprintf("(f.col_user IN(%s) AND f.col_foreign_key IN(%s))",
                $uids, $foreign_keys);
        } else {
            $limit = -1;

            foreach ($uids as $key => $value) {
                $uids[$key] = cb_queryf($dbconn, "'@S'", $value);
            }
            $uids = implode(',', $uids);
            $condition = "f.col_user IN({$uids})";
        }

        $app_locator = GRN_ApplicationLocator::instance();
        $dbconn = $app_locator->getConnection('workflow');
        $query
            = "SELECT f._id, f.col_user, f.col_foreign_key FROM tab_grn_workflow_folder AS f"
              .
              " INNER JOIN tab_cb_user AS u ON (f.col_user=u._id AND u.col_deleted IS NULL)"
              .
              " WHERE ({$condition})";
        $query = $dbconn->select_format($query, 0, $limit, $lock);
        $result = $dbconn->query($query);
        if (false === $result) {
            $dbconn->throwError(['query' => "failed query on SELECT: {$query}"]);
        }

        $rows = [];
        while ($row = $dbconn->fetch_assoc($result)) {
            $rows[$row['_id']] = $row;
        }

        return $rows;
    }

    /**
     * @return array
     */
    function &getListByForeignKey(
        $uids,
        $foreign_keys = null,
        $lock = CB_DATABASE_DEFAULT_LOCK
    ) {
        if ( ! is_array($uids) || 0 == count($uids)) {
            assert('FALSE');
        }

        $app_locator = GRN_ApplicationLocator::instance();
        $dbconn = $app_locator->getConnection('workflow');
        if (is_array($foreign_keys) && 0 < count($foreign_keys)) {
            $limit = count($foreign_keys) * count($uids);

            foreach ($foreign_keys as $key => $value) {
                $foreign_keys[$key] = cb_queryf($dbconn, "'@S'", $value);
            }
            $foreign_keys = implode(',', $foreign_keys);

            $condition = [];
            foreach ($uids as $user_id) {
                $condition[] = cb_queryf($dbconn,
                    "(f.col_user='@S' AND f.col_foreign_key IN({$foreign_keys}))",
                    $user_id);
            }
            $condition = implode(' OR ', $condition);
        } else {
            $limit = -1;

            foreach ($uids as $key => $value) {
                $uids[$key] = cb_queryf($dbconn, "'@S'", $value);
            }
            $uids = implode(',', $uids);
            $condition = "f.col_user IN({$uids})";
        }

        $app_locator = GRN_ApplicationLocator::instance();
        $dbconn = $app_locator->getConnection('workflow');
        $query
            = "SELECT f._id, f.col_user, f.col_foreign_key FROM tab_grn_workflow_folder AS f"
              .
              " INNER JOIN tab_cb_user AS u ON (f.col_user=u._id AND u.col_deleted IS NULL)"
              .
              " WHERE ({$condition})";
        $query = $dbconn->select_format($query, 0, $limit, $lock);
        $result = $dbconn->query($query);
        if (false === $result) {
            $dbconn->throwError(['query' => "failed query on SELECT: {$query}"]);
        }

        $rows = [];
        while ($row = $dbconn->fetch_assoc($result)) {
            $rows[$row['_id']] = $row;
        }

        return $rows;
    }

    /**
     * @param $uids
     *
     * @return bool|string
     */
    function initializeUsers($uids)
    {
        if ( ! is_array($uids) || 0 == count($uids)) {
            assert('FALSE');
        }

        $columns = [
            GRN_WORKFLOW_COLUMN_USER,
            GRN_WORKFLOW_COLUMN_NAME,
            GRN_WORKFLOW_COLUMN_FOREIGN_KEY,
            GRN_WORKFLOW_COLUMN_FOLDER_TYPE,
            GRN_WORKFLOW_COLUMN_LIST_INDEX,
            GRN_WORKFLOW_COLUMN_PARENT,
            GRN_WORKFLOW_COLUMN_CREATOR,
            GRN_WORKFLOW_COLUMN_CREATOR_NAME,
            GRN_WORKFLOW_COLUMN_CREATOR_FOREIGN_KEY,
            GRN_WORKFLOW_COLUMN_CTIME,
            GRN_WORKFLOW_COLUMN_MODIFIER,
            GRN_WORKFLOW_COLUMN_MODIFIER_NAME,
            GRN_WORKFLOW_COLUMN_MODIFIER_FOREIGN_KEY,
            GRN_WORKFLOW_COLUMN_MTIME
        ];
        $columns = implode(',', $columns);

        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $users = $uum->getUsersInfo($uids);

        $folders = [
            GRN_WORKFLOW_FOLDER_TYPE_NEW_ID         => [
                '(new)',
                'NEW_FOLDER_FOREIGN_KEY',
                1
            ],
            GRN_WORKFLOW_FOLDER_TYPE_IN_ID          => [
                '(in)',
                'IN_FOLDER_FOREIGN_KEY',
                2
            ],
            GRN_WORKFLOW_FOLDER_TYPE_OUT_ID         => [
                '(out)',
                'OUT_FOLDER_FOREIGN_KEY',
                3
            ],
            GRN_WORKFLOW_FOLDER_TYPE_FINISH_ID      => [
                '(finish)',
                'FINISH_FOLDER_FOREIGN_KEY',
                4
            ],
            GRN_WORKFLOW_FOLDER_TYPE_UNPROCESSED_ID => [
                '(unprocessed)',
                'UNPROCESSED_FOLDER_FOREIGN_KEY',
                5
            ],
            GRN_WORKFLOW_FOLDER_TYPE_TEMP_ID        => [
                '(temp)',
                'TEMP_FOLDER_FOREIGN_KEY',
                6
            ],
        ];

        $app_locator = GRN_ApplicationLocator::instance();
        $dbconn = $app_locator->getConnection('workflow');

        foreach ($uids as $key => $value) {
            $uids[$key] = cb_queryf($dbconn, "'@S'", $value);
        }
        $uids = implode(',', $uids);
        $condition = "f.col_user IN({$uids})";
        $query
            = "SELECT f._id, f.col_user FROM tab_grn_workflow_folder AS f"
              .
              " INNER JOIN tab_cb_user AS u ON (f.col_user=u._id AND u.col_deleted IS NULL)"
              .
              " WHERE ({$condition})";
        $query = $dbconn->select_format($query, 0, -1, CB_DATABASE_SHARED_LOCK);

        $result = $dbconn->query($query);
        if (false === $result) {
            $dbconn->throwError(['query' => "failed query on SELECT: {$query}"]);
        }

        while ($row = $dbconn->fetch_assoc($result)) {
            if (array_key_exists($row['col_user'], $users)) {
                unset($users[$row['col_user']]);
            }
        }

        if (0 < count($users)) {
            $ctime = time();
            $records = [];
            foreach ($users as $user) {
                foreach ($folders as $key => $value) {
                    $record = [
                        $user['_id'],
                        $value[0],
                        $value[1],
                        $key,
                        $value[2],
                        GRN_WORKFLOW_FOLDER_ROOT_ID,
                        $user['_id'],
                        $user['col_display_name'],
                        $user['col_foreign_key'],
                        $ctime,
                        $user['_id'],
                        $user['col_display_name'],
                        $user['col_foreign_key'],
                        $ctime
                    ];
                    foreach ($record as $key => $value) {
                        $record[$key] = cb_queryf($dbconn, "'@S'", $value);
                    }
                    $record = implode(',', $record);
                    $records[] = "({$record})";
                }
            }

            $records = implode(',', $records);
            $query
                = "INSERT tab_grn_workflow_folder({$columns}) VALUES{$records}";

            if (false === $dbconn->query($query)) {
                $dbconn->throwError(['query' => "failed query on INSERT: {$query}"]);
            }

            return $dbconn->get_insert_id();
        }

        return false;
    }
}


