<?php

namespace grn\workflow\bean;

class CustomizationJsPetition
{
    /**
     * @var string|null
     */
    private $id;

    /**
     * @var string|null
     */
    private $status;

    /**
     * @var \CB_TimeStamp|null
     */
    private $createdAt;

    /**
     * @var string|null
     */
    private $processingStepCode;

    /**
     * @var string|null
     */
    private $name;

    /**
     * @var string|null
     */
    private $number;

    /**
     * @var string|null
     */
    private $isUrgent;

    /**
     * @var CustomizationJsApplicant|null
     */
    private $applicant;

    /**
     * @var CustomizationJsItem[]|null
     */
    private $items;

    /**
     * @var CustomizationJsStep[]|null
     */
    private $steps;

    /**
     * @var array|null
     */
    private $availableOperations;

    /**
     * @var array|null
     */
    private $folders;

    /**
     * @return string|null
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * @param string $id
     */
    public function setId($id)
    {
        $this->id = $id;
    }

    /**
     * @return array|null
     */
    public function getStatus()
    {
        if (is_null($this->status) || $this->status == -1) {
            return null;
        }
        require_once("fw/i18n/locale.csp");
        $login = cb_get_login_user();
        $locale = \CB_LocaleManager::getCurrentLanguage($login->getOID());
        switch ($this->status) {

            case GRN_WORKFLOW_STATUS_UNPROCESSING:      //未処理
            case GRN_WORKFLOW_STATUS_IN_PROCESS:        //進行中
            case GRN_WORKFLOW_STATUS_REMAND:            //差し戻し
                $status_display = cb_msg(GRN_WORKFLOW_MODULE_ID,
                    'view_status_0', null, $locale); //進行中 ← 未処理,進行中,差し戻し
                break;
            case GRN_WORKFLOW_STATUS_ACCEPTANCE:        //承認
                $status_display = cb_msg(GRN_WORKFLOW_MODULE_ID,
                    'view_status_1', null, $locale); //承認
                break;
            case GRN_WORKFLOW_STATUS_REJECTION:         //却下
                $status_display = cb_msg(GRN_WORKFLOW_MODULE_ID,
                    'view_status_2', null, $locale); //却下
                break;
            case GRN_WORKFLOW_STATUS_IN_PROCESS_CANCEL: //取り消し
            case GRN_WORKFLOW_STATUS_UNPROCESSING_CANCEL:   //取り戻し
                $status_display = cb_msg(GRN_WORKFLOW_MODULE_ID,
                    'view_status_3', null, $locale); //取り消し
                break;
            case GRN_WORKFLOW_STATUS_FINISHED:          //完了
                $status_display = cb_msg(GRN_WORKFLOW_MODULE_ID,
                    'view_status_4', null, $locale); //完了
                break;
            default:
                break;
        }
        switch ($this->status) {

            case GRN_WORKFLOW_STATUS_UNPROCESSING:      //未処理
                $status_type = 'UNPROCESSING';
                break;
            case GRN_WORKFLOW_STATUS_IN_PROCESS:        //進行中
                $status_type = 'IN_PROGRESS';
                break;
            case GRN_WORKFLOW_STATUS_REMAND:            //差し戻し
                $status_type = 'SENT_BACK';
                break;
            case GRN_WORKFLOW_STATUS_ACCEPTANCE:        //承認
                $status_type = 'APPROVED';
                break;
            case GRN_WORKFLOW_STATUS_REJECTION:         //却下
                $status_type = 'REJECTED';
                break;
            case GRN_WORKFLOW_STATUS_IN_PROCESS_CANCEL: //取り消し
                $status_type = 'CANCELLED';
                break;
            case GRN_WORKFLOW_STATUS_UNPROCESSING_CANCEL: // 取り戻し
                $status_type = 'WITHDRAWN';
                break;
            case GRN_WORKFLOW_STATUS_FINISHED:          //完了
                $status_type = 'COMPLETED';
                break;
            default:
                $status_type = null;
        }

        return ['name' => $status_display, 'type' => $status_type];
    }

    /**
     * @param string $status
     */
    public function setStatus($status)
    {
        $this->status = $status;
    }

    /**
     * @return string|null
     */
    public function getCreatedAt()
    {
        require_once('cbpapi/util.csp');

        return is_null($this->createdAt) ? null
            : grn_cbpapi_iso8601($this->createdAt);
    }

    /**
     * @param \CB_TimeStamp $createdAt
     */
    public function setCreatedAt($createdAt)
    {
        $this->createdAt = $createdAt;
    }

    /**
     * @return string|null
     */
    public function getProcessingStepCode()
    {
        return $this->processingStepCode;
    }

    /**
     * @param string $processingStepCode
     */
    public function setProcessingStepCode($processingStepCode)
    {
        $this->processingStepCode = $processingStepCode;
    }

    /**
     * @return mixed
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * @param mixed $name
     */
    public function setName($name)
    {
        $this->name = $name;
    }

    /**
     * @return mixed
     */
    public function getNumber()
    {
        return $this->number;
    }

    /**
     * @param string $number
     */
    public function setNumber($number)
    {
        $this->number = $number;
    }

    /**
     * @return bool
     */
    public function getIsUrgent()
    {
        return $this->isUrgent == 1 ? true : false;
    }

    /**
     * @param string $isUrgent
     */
    public function setIsUrgent($isUrgent)
    {
        $this->isUrgent = $isUrgent;
    }

    /**
     * @return CustomizationJsApplicant|null
     */
    public function getApplicant()
    {
        return $this->applicant;
    }

    /**
     * @param CustomizationJsApplicant $applicant
     */
    public function setApplicant(CustomizationJsApplicant $applicant)
    {
        $this->applicant = $applicant;
    }

    /**
     * @return CustomizationJsItem[]|null
     */
    public function getItems()
    {
        return $this->items;
    }

    /**
     * @param CustomizationJsItem[] $items
     */
    public function setItems($items)
    {
        $this->items = $items;
    }

    /**
     * @return CustomizationJsStep[]|null
     */
    public function getSteps()
    {
        return $this->steps;
    }

    /**
     * @param CustomizationJsStep[] $steps
     */
    public function setSteps($steps)
    {
        $this->steps = $steps;
    }

    /**
     * @return array|null
     */
    public function getAvailableOperations()
    {
        return $this->availableOperations;
    }

    /**
     * @param array $availableOperations
     */
    public function setAvailableOperations($availableOperations)
    {
        $this->availableOperations = $availableOperations;
    }

    /**
     * @return array|null
     */
    public function getFolders()
    {
        return $this->folders;
    }

    /**
     * @param array|null $folders
     */
    public function setFolders($folders)
    {
        $this->folders = $folders;
    }

    public static function toArray($object, $hide_login_name = true)
    {
        $reflect = new \ReflectionClass($object);
        $props = $reflect->getProperties(\ReflectionProperty::IS_PRIVATE);
        $data = [];
        foreach ($props as $prop) {
            $prop_name = $prop->getName();
            $prop->setAccessible(true);
            $prop_value = null;

            $get_method = 'get' . ucfirst($prop_name);
            if ( ! method_exists($object, $get_method)) {
                continue;
            }

            $is_login_name
                = (($object instanceof CustomizationJsProcessor || $object instanceof CustomizationJsApplicant)
                   && $prop_name === 'code');
            if ($is_login_name && $hide_login_name) {
                continue;
            }

            $prop_value = $object->$get_method();

            if (is_null($prop_value)) {
                continue;
            }

            if (is_array($prop_value)) {
                $values = [];
                foreach ($prop_value as $key => $item) {
                    $is_login_name = ($prop_name === 'proxy' && $key === 'code');
                    if ($is_login_name && $hide_login_name) {
                        continue;
                    }
                    $values[$key] = is_object($item) ? self::toArray($item, $hide_login_name) : $item;
                }
                $prop_value = $values;
            } elseif (is_object($prop_value)) {
                $prop_value = self::toArray($prop_value, $hide_login_name);
            }

            $data[$prop_name] = $prop_value;
        }

        return $data;
    }

}
