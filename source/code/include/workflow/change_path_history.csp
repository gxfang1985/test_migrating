<?php

/**
 * 経路変更履歴
 *
 * @author  Hideyasu YOSHIDA 2006/02
 * @version 1.0
 * @package grn.workflow
 */

require_once('workflow/model.csp');

/**
 * 経路変更履歴クラス
 */
class GRN_Workflow_ChangePathHistories extends GRN_Workflow_Model
{

    /**
     * @static
     * @return GRN_Workflow_ChangePathHistories
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_ChangePathHistories();
        }

        return $_instance;
    }

    /**
     * コンストラクタ
     */
    function __construct()
    {
        parent::__construct('tab_grn_workflow_changepathhistory');

        $this->_columns_info = [
            'usual' => [
                'col_petition',
                'col_path_step_data',
                'col_comment',
                'col_creator',
                'col_creator_name',
                'col_creator_foreign_key',
                'col_ctime'
            ]
        ];
    }

    /**
     * 経路を取得
     *
     * @param   int   $change_path_history_id 経路変更履歴ID
     * @param   array $columns                プロパティを取得するカラム名一覧
     * @param   int   $lock                   ロックの種類
     *
     * @return  mixed   プロパティ一覧（カラム名とプロパティ）
     *                  それ以外は失敗
     */
    function &get(
        $change_path_history_id,
        $columns = null,
        $lock = CB_DATABASE_DEFAULT_LOCK
    ) {
        cb_trim_check($change_path_history_id,
            E_GRN_WRKF_INVALID_CHANGE_PATH_HISTORY_ID);

        $condition = cb_queryf($this->_dbconn, "{$this->_table_name}._id='@S'",
            $change_path_history_id);
        $join_key = ['col_creator'];
        $rows = $this->_selectRecordsLeftJoinUser($columns, '_id', 0, 1,
            null, $condition, $lock, $join_key);

        $ret = false;
        if (array_key_exists($change_path_history_id, $rows)) {
            $ret = $rows[$change_path_history_id];
        }

        return $ret;
    }

    /**
     * 経路変更履歴一覧を取得
     *
     * @param   mixed $cphids       （特定の）経路変更履歴を取得する場合は経路変更履歴IDの配列
     *                              それ以外はすべて取得
     * @param   array $columns      プロパティを取得するカラム名一覧
     * @param   int   $offset       一覧の先頭オフセット
     * @param   int   $limit        一覧件数
     * @param   int   $lock         ロックの種類
     *
     * @return  array   レコード一覧（経路変更履歴IDとレコード）
     */
    function &getList(
        $cphids = null,
        $columns = null,
        $offset = 0,
        $limit = -1,
        $lock = CB_DATABASE_DEFAULT_LOCK
    ) {
        $condition = null;
        if (is_array($cphids) && 0 < count($cphids)) {
            foreach ($cphids as $key => $value) {
                $cphids[$key] = cb_queryf($this->_dbconn, "'@S'", $value);
            }
            $cphids = implode(',', $cphids);
            $condition = "({$this->_table_name}._id IN (${cphids}))";
        }

        $join_key = ['col_creator'];
        $ret = $this->_selectRecordsLeftJoinUser($columns, '_id', $offset,
            $limit, 'col_list_index,_id', $condition, $lock, $join_key);

        return $ret;
    }

    /**
     * 申請IDで絞り込んだ経路変更履歴リストを取得
     *
     * @param   mixed $petition_id 申請ID
     * @param   array $columns     プロパティを取得するカラム名一覧
     * @param   int   $offset      一覧の先頭オフセット
     * @param   int   $limit       一覧件数
     * @param   int   $lock        ロックの種類
     *
     * @return  array   レコード一覧（外部キーとレコード）
     */
    function getListByPetitionId(
        $petition_id,
        $columns = null,
        $offset = 0,
        $limit = -1,
        $lock = CB_DATABASE_DEFAULT_LOCK
    ) {
        cb_trim_check($petition_id, E_GRN_WRKF_PETITION_INVALID_ID);

        $condition = cb_queryf($this->_dbconn,
            "{$this->_table_name}.col_petition='@S'", $petition_id);

        $join_key = ['col_creator'];

        return $this->_selectRecordsLeftJoinUser($columns, '_id', $offset,
            $limit, '_id', $condition, $lock, $join_key);
    }

    function getListByPathStepDataId(
        $psdids,
        $columns = null,
        $lock = CB_DATABASE_DEFULAT_LOCK
    ) {
        $condition = null;
        if (is_array($psdids) && 0 < count($psdids)) {
            foreach ($psdids as $key => $value) {
                $psdids[$key] = cb_queryf($this->_dbconn, "'@S'", $value);
            }
            $psdids = implode(',', $psdids);
            $condition
                = "({$this->_table_name}.col_path_step_data IN (${psdids}))";
        }

        $join_key = ['col_creator'];

        return $this->_selectRecordsLeftJoinUser($columns, '_id', $offset,
            $limit, 'col_list_index,_id', $condition, $lock, $join_key);
    }

    function getCount($petition_id)
    {
        cb_trim_check($petition_id, E_GRN_WRKF_PETITION_INVALID_ID);

        $condition = cb_queryf($this->_dbconn,
            "{$this->_table_name}.col_petition='@S'", $petition_id);
        $force_index = 'cni_petition';

        return $this->_countRecord($condition, $force_index);
    }
}

class GRN_Workflow_ChangePathUsers extends GRN_Workflow_Model
{
    /**
     * コンストラクタ
     */
    function __construct($table_name)
    {
        parent::__construct($table_name);
    }

    function &getList(
        $cphids,
        $user_id = null,
        $columns = null,
        $offset = 0,
        $limit = -1,
        $lock = CB_DATABASE_DEFAULT_LOCK
    ) {
        if ( ! is_array($cphids) || 0 == count($cphids)) {
            // 経路変更履歴が空
            cb_throw_error(E_GRN_WRKF_EMPTY_CHANGE_PATH_HISTORY);
        }
        if ( ! is_array($columns) || 0 == count($columns)) {
            // カラム名が空
            cb_throw_error(E_GRN_WRKF_EMPTY_COLUMNS);
        }

        foreach ($cphids as $key => $value) {
            $cphids[$key] = cb_queryf($this->_dbconn, "'@S'", $value);
        }
        $cphids = implode(',', $cphids);
        $conditions
            = ["({$this->_table_name}.col_change_path_history IN (${cphids}))"];

        if (0 < strlen($user_id)) {
            $conditions[] = cb_queryf($this->_dbconn,
                "({$this->_table_name}.col_user='@S')", $user_id);
        }
        $condition = implode(' AND ', $conditions);

        $join_key = ['col_user'];
        $ret = $this->_selectRecordsLeftJoinUser($columns, '_id', $offset,
            $limit, '_id', $condition, $lock, $join_key);

        return $ret;
    }

    function getSortedList(
        $cphids,
        $columns = null,
        $offset = 0,
        $limit = -1,
        $lock = CB_DATABASE_DEFAULT_LOCK
    ) {
        if ( ! is_array($cphids) || 0 == count($cphids)) {
            // 経路変更履歴が空
            cb_throw_error(E_GRN_WRKF_EMPTY_CHANGE_PATH_HISTORY);
        }
        if ( ! is_array($columns) || 0 == count($columns)) {
            // カラム名が空
            cb_throw_error(E_GRN_WRKF_EMPTY_COLUMNS);
        }

        foreach ($cphids as $key => $value) {
            $cphids[$key] = cb_queryf($this->_dbconn, "'@S'", $value);
        }
        $cphids = implode(',', $cphids);
        $condition = "a.col_change_path_history IN (${cphids})";

        $columns = $this->_formatColumns($columns, $this->_aliases);
        $from
            = "{$this->_table_name} AS a LEFT JOIN tab_cb_user AS b ON a.col_user=b._id";
        $order_by = 'a.col_position,a.col_user';
        $query
            = "SELECT {$columns}, b.col_deleted FROM {$from} WHERE ({$condition}) ORDER BY {$order_by}";
        $query = $this->_dbconn->select_format($query, $offset, $limit,
            $lock);
        $result = $this->_dbconn->query($query);
        if (false === $result) {
            $this->_dbconn->throwError(['query' => "failed query on SELECT: {$query}"]);
        }

        $rows = [];
        while ($row = $this->_dbconn->fetch_assoc($result)) {
            $rows[$row['_id']] = $row;
            if ( ! is_null($row['col_deleted'])) {
                if (array_key_exists('col_user', $rows[$row['_id']])) {
                    $rows[$row['_id']]['col_user'] = null;
                }

                if (array_key_exists('col_display_name', $rows[$row['_id']])) {
                    $rows[$row['_id']]['col_display_name'] = null;
                }
            }
            unset($rows[$row['_id']]['col_deleted']);
        }

        return $rows;
    }
}

class GRN_Workflow_ChangePathDeletedUsers extends GRN_Workflow_ChangePathUsers
{

    /**
     * @static
     * @return GRN_Workflow_ChangePathDeletedUsers
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_ChangePathDeletedUsers();
        }

        return $_instance;
    }

    /**
     * コンストラクタ
     */
    function __construct()
    {
        parent::__construct('tab_grn_workflow_changepathdeleteduser');

        $this->_columns_info = [
            'usual' => [
                'col_change_path_history',
                'col_user',
                'col_user_name',
                'col_user_foreign_key',
                'col_confirmation'
            ]
        ];

        $this->_aliases = [
            'tab_grn_workflow_changepathdeleteduser' => 'a',
            'tab_cb_user'                            => 'b'
        ];
    }

    function modifyListByUserId($user_id, $properties)
    {
        cb_trim_check($user_id, E_GRN_WRKF_INVALID_MEMBER_ID);
        if ( ! is_array($properties) || 0 == count($properties)) {
            cb_throw_error(E_GRN_WRKF_EMPTY_PROPERTIES);
        }

        $condition = cb_queryf($this->_dbconn, "col_user='@S'", $user_id);
        $this->_updateRecords($condition, $properties);
    }
}

class GRN_Workflow_ChangePathAddUsers extends GRN_Workflow_ChangePathUsers
{

    /**
     * @static
     * @return GRN_Workflow_ChangePathAddUsers
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_ChangePathAddUsers();
        }

        return $_instance;
    }

    /**
     * コンストラクタ
     */
    function __construct()
    {
        parent::__construct('tab_grn_workflow_changepathadduser');

        $this->_columns_info = [
            'usual' => [
                'col_change_path_history',
                'col_user',
                'col_user_name',
                'col_user_foreign_key'
            ]
        ];

        $this->_aliases = [
            'tab_grn_workflow_changepathadduser' => 'a',
            'tab_cb_user'                        => 'b'
        ];
    }
}


