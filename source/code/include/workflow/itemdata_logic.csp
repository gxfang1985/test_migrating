<?php
/**
 * Workflow Application Item Data Class
 *
 * @author  Yuichi, Nakamura 2006/01
 * @version 1.0
 * @package grn.workflow
 */

/** Workflow Application **/
require_once('workflow/resources.csp');
require_once('workflow/itemdata_logic_base.csp');

/**
 * Item Data Manager Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_ItemData_Logic extends GRN_Workflow_ItemData_Logic_Base
{
    //Item Data Manager Instance
    var $_item_data_manager = null;

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {

    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_ItemData_Logic $instance                  //Instance of GRN_Workflow_ItemData_Logic
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_ItemData_Logic();
        }

        return $_instance;
    }

    /**
     * Get Item Data Logic
     *
     * @return GRN_Workflow_ItemData_Manager $item_data_manager              //Item Data Manager
     */
    function _getItemDataManager()
    {
        if (is_null($this->_item_data_manager)) {
            require_once('workflow/itemdata_manager.csp');
            $this->_item_data_manager
                = GRN_Workflow_ItemData_Manager::getInstance();
        }

        return $this->_item_data_manager;
    }

    /**
     * get Login User
     *
     * @access private
     * @return object $login_user                //Login User
     */
    function _getLoginUser()
    {
        //Get UUM Instance
        global $G_container_base;
        $grn_uum = $G_container_base->getInstance('uum');

        //Get Login User
        $login_user = $grn_uum->getLoginUser();
        if ( ! $login_user) {
            $ret = false;

            return $ret;
        }

        //Return Login User
        return $login_user;
    }

    /**
     * Set Creator
     *
     * @access private
     *
     * @param  array $property_list //Property List
     *
     * @return bool   $result                    //Result
     */
    function _setCreator(&$property_list)
    {
        //Check Argument
        if ( ! is_array($property_list)) {
            return false;
        }

        // Get Login User
        $login_user = $this->_getLoginUser();

        //Get Create Time
        $ctime = time();

        //Set Create Infomation
        if ($login_user) {
            $user_id = $login_user->getOID();
            $display_name
                = $login_user->get('display_name');
            $foreign_key
                = $login_user->get('foreign_key');
            $property_list[GRN_WORKFLOW_COLUMN_CREATOR]
                = $user_id;         //Creator
            $property_list[GRN_WORKFLOW_COLUMN_CREATOR_NAME]
                = $display_name;    //Creator Name
            $property_list[GRN_WORKFLOW_COLUMN_CREATOR_FOREIGN_KEY]
                = $foreign_key;     //Creator Foreign Key
            $property_list[GRN_WORKFLOW_COLUMN_MODIFIER]
                = $user_id;         //Modifier
            $property_list[GRN_WORKFLOW_COLUMN_MODIFIER_NAME]
                = $display_name;    //Modifier Name
            $property_list[GRN_WORKFLOW_COLUMN_MODIFIER_FOREIGN_KEY]
                = $foreign_key;     //Modifier Foreign Key
        }
        $property_list[GRN_WORKFLOW_COLUMN_CTIME] = $ctime;   //Create Time
        $property_list[GRN_WORKFLOW_COLUMN_MTIME] = $ctime;   //Modify Time

        return true;
    }

    /**
     * Set Modofier
     *
     * @access private
     *
     * @param  array $property_list //Property List
     *
     * @return bool   $result                    //Result
     */
    function _setModifier(&$property_list)
    {
        //Check Argument
        if ( ! is_array($property_list)) {
            return false;
        }

        // Get Login User
        $login_user = $this->_getLoginUser();

        //Get Modofy Time
        $mtime = time();

        //Set Modify Infomation/
        if ($login_user) {
            $user_id = $login_user->getOID();
            $display_name
                = $login_user->get('display_name');
            $foreign_key
                = $login_user->get('foreign_key');
            $property_list[GRN_WORKFLOW_COLUMN_MODIFIER]
                = $user_id;         //Modifier
            $property_list[GRN_WORKFLOW_COLUMN_MODIFIER_NAME]
                = $display_name;    //Modifier Name
            $property_list[GRN_WORKFLOW_COLUMN_MODIFIER_FOREIGN_KEY]
                = $foreign_key;     //Modifier Foreign Key
        }
        $property_list[GRN_WORKFLOW_COLUMN_MTIME] = $mtime;   //Modify Time

        return true;
    }

    /**
     * Set Item
     *
     * @access private
     *
     * @param  array $item          //Item Information
     * @param  array $property_list //Property List
     * @param  bool  $throw_error   //Throw Error Flag
     *
     * @return bool   $result                    //Result
     */
    function _setItem(& $item, & $property_list)
    {
        //Check Argument
        if ( ! is_array($item) && ! is_array($property_list)) {
            return false;
        }

        //Define Set Key List
        $set_column_key_list = [
            'display_name',         //Item Display Name
            'type',                 //Item Type
            'option_string',        //Item Option String
            'option_string_type',   //Item Option String Type
            'description',          //Item Description
            'description_type',     //Item Description_type
            'description_editor',   //Item Description Editor
            'foreign_key',          //Item Foreign_key
            'attach_file',          //Item Attach File
            'attach_file_view',     //Item Attach File View
            'settings',             //Item Settings
            'br',                   //Item br
            'separator',            //Item Separator
            'required',             //Item Required
            'list_index',           //Item list Index
            'export_data',          //Export Data
        ];

        //Set Item Value
        foreach ($set_column_key_list as $set_column_key) {
            //Set Property List
            $column_value =& $item[$set_column_key];
            if (is_array($column_value)) {
                $property_list['col_' . $set_column_key]
                    = serialize($column_value);
            } else {
                $property_list['col_' . $set_column_key] = $column_value;
            }
        }

        return true;
    }

    /**
     * Add Item Data
     *
     * @param  int   $petition_id //Petition ID
     * @param  array $item        //Item Information
     * @param  bool  $check_value //Check Item Value
     *
     * @return int    $item_data_id              //Item Data ID
     */
    function add($petition_id, & $item, $check_value = true)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($petition_id,
            E_GRN_WRKF_PETITION_INVALID_ID);    //Petition ID

        //Check Petition Exist
        require_once('workflow/petition_logic_base.csp');
        $petition_logic_base = GRN_Workflow_Petition_Logic_Base::getInstance();
        $petition =& $petition_logic_base->get($petition_id);

        //Check Item Exist
        require_once('workflow/item_manager_base.csp');
        $item_manager_base = GRN_Workflow_Item_Manager_Base::getInstance();
        $item_info = $item_manager_base->getDirect($item['iid']);
        if ( ! $item_info) {
            //Create Property List
            $property_list = [
                GRN_WORKFLOW_COLUMN_PETITION => $petition_id,
                GRN_WORKFLOW_COLUMN_ITEM     => null,
            ];
        } else {
            //Create Property List
            $property_list = [
                GRN_WORKFLOW_COLUMN_PETITION => $petition_id,
                GRN_WORKFLOW_COLUMN_ITEM     => $item['iid'],
            ];
        }

        //Set Item Properties 
        $this->_setItem($item, $property_list);

        //Set Input Data
        require_once('workflow/item_resources.csp');
        $foreign_key = $item['foreign_key'];
        $item_util = grn_workflow_get_item_util($foreign_key);
        if ($item_util) {
            $item_util->setItemData($item, $property_list, $check_value);
        }

        //Set Creator
        $this->_setCreator($property_list);

        //Create New Item Data
        $item_data_manager = $this->_getItemDataManager();
        $item_data_id = $item_data_manager->create($property_list);

        //Set Item File Data
        if ($item_util) {
            $item_util->setItemDataFile($item_data_id, $item, $property_list,
                $check_value);
        }

        return $item_data_id;
    }

    /**
     * Add Item Data Multiple
     *
     * @param  int   $petition_id //Petition ID
     * @param  array $item_list   //Item Information List
     * @param  bool  $check_value //Check Item Value
     *
     * @return int    $item_data_id_list         //Item Data ID List
     */
    function addMulti($petition_id, & $item_list, $check_value = true)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($petition_id,
            E_GRN_WRKF_PETITION_INVALID_ID);    //Petition ID

        //Check Petition Exist
        $column_list = ['_id', 'col_form'];
        require_once('workflow/petition_logic_base.csp');
        $petition_logic_base = GRN_Workflow_Petition_Logic_Base::getInstance();
        $petition = $petition_logic_base->getDirect($petition_id,
            $column_list);

        //Get Item List
        $column_list = ['_id'];
        require_once('workflow/item_logic_base.csp');
        $item_logic_base = GRN_Workflow_Item_Logic_Base::getInstance();
        $item_info_list =& $item_logic_base->getList($petition['col_form'],
            $column_list);

        //Create Property List
        $all_property_list = [];
        require_once('workflow/item_resources.csp');
        foreach (array_keys($item_list) as $item_id) {
            $item =& $item_list[$item_id];

            //Check Item Exists
            if ( ! array_key_exists($item['iid'], $item_info_list)) {
                $property_list = [
                    GRN_WORKFLOW_COLUMN_PETITION => $petition_id,
                    GRN_WORKFLOW_COLUMN_ITEM     => null,
                ];
            } else {
                $property_list = [
                    GRN_WORKFLOW_COLUMN_PETITION => $petition_id,
                    GRN_WORKFLOW_COLUMN_ITEM     => $item['iid'],
                ];
            }

            //Set Item Properties 
            $this->_setItem($item, $property_list);

            //Set Input Data
            $foreign_key = $item['foreign_key'];
            $item_util = grn_workflow_get_item_util($foreign_key);
            if ($item_util) {
                $item_util->setItemData($item, $property_list, $check_value);
            } else {
                $property_list['col_number'] = null;
                $property_list['col_text'] = null;
            }

            //Set Creator
            $this->_setCreator($property_list);

            $all_property_list[$item_id] = $property_list;
        }

        //Create New Item Data
        $item_data_manager = $this->_getItemDataManager();
        $item_data_manager->createMulti($all_property_list);

        //Get Create Item Data List
        $column_list = ['_id', 'col_item', 'col_foreign_key'];
        $item_data_list =& $this->getList($petition_id, $column_list);

        //Set Item File Data
        foreach (array_keys($item_data_list) as $item_data_id) {
            $item_data =& $item_data_list[$item_data_id];

            $foreign_key = $item_data['col_foreign_key'];
            $item_util = grn_workflow_get_item_util($foreign_key);
            if ($item_util) {
                $item =& $item_list[$item_data['col_item']];
                $property_list =& $all_property_list[$item_data['col_item']];
                $item_util->setItemDataFile($item_data_id, $item,
                    $property_list, $check_value);
                $item['item_data'] = $item_data_id;
            }
        }

        return array_keys($item_data_list);
    }

    /**
     * Modify Item Data
     *
     * @param  int   $item_data_id //Item Data ID
     * @param  int   $petition_id  //Petition ID
     * @param  array $item         //Item Information
     * @param  bool  $check_value  //Check Item Value
     *
     * @return int    $item_data_id              //Item Data ID
     */
    function modify(
        $item_data_id,
        $petition_id,
        $item,
        $check_value = true,
        $property_columns = null
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($item_data_id,
            E_GRN_WRKF_ITEMDATA_INVALID_ID);          //Item Data ID
        cb_trim_check($petition_id,
            E_GRN_WRKF_ITEM_INVALID_ID);              //Item ID

        //Check Item Data Exist
        $item_data =& $this->get($item_data_id, $petition_id);

        //Create Property List
        if (is_null($property_columns) || ! is_array($property_columns)
            || ! count($property_columns)
        ) {
            $property_list = [
                GRN_WORKFLOW_COLUMN_ITEM => $item['iid'],
            ];
        } else {
            $property_list = [];
            foreach ($property_columns as $key => $value) {
                if (array_key_exists($value, $item)) {
                    if (is_array($item[$value])) {   // 'col_settings'
                        $property_list[$key] = serialize($item[$value]);
                    } else {
                        $property_list[$key] = $item[$value];
                    }
                }
            }
        }

        //Set List Index
        if (array_key_exists('list_index', $item)) {
            $property_list[GRN_WORKFLOW_COLUMN_LIST_INDEX]
                = $item['list_index'];
        }

        //Set Input Data
        require_once('workflow/item_resources.csp');
        $foreign_key = $item['foreign_key'];
        $item_util = grn_workflow_get_item_util($foreign_key);
        if ($item_util) {
            $item_util->setItemData($item, $property_list, $check_value);
        }

        //Set Modifier
        $this->_setModifier($property_list);

        //Update Item Data
        $item_data_manager = $this->_getItemDataManager();
        $item_data_id = $item_data_manager->update($item_data_id,
            $property_list);

        //Set Item File Data
        if ($item_util) {
            $item_util->setItemDataFile($item_data_id, $item, $property_list,
                $check_value);
        }

        return $item_data_id;
    }

    /**
     * Delete Item Data
     *
     * @param int  $item_data_id //Item Data ID
     * @param BOOL $result       //Result
     */
    function delete($item_data_id)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($item_data_id,
            E_GRN_WRKF_ITEMDATA_INVALID_ID);        //Item Data ID

        //Remove Item Data
        $item_data_manager =& $this->_getItemDataManager();
        $item_data_manager->remove($item_data_id);

        return true;
    }

    /**
     * Delete Multiple Item Data
     *
     * @param  array $item_data_id_list //Item Data ID List
     *
     * @return BOOL   $result                    //Result
     */
    function deleteMulti($item_data_id_list)
    {
        //Check Argument
        if ( ! is_array($item_data_id_list)) {
            //Not Input Necessary
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_ITEMDATA_NOT_INPUT_NECESSARY);
        }

        //Remove Item Data
        $item_data_manager =& $this->_getItemDataManager();
        $item_data_manager->removeMulti($item_data_id_list);

        return true;
    }

    /**
     * Delete All Item Data
     *
     * @param  int $form_id //Form ID
     *
     * @return BOOL   $result                    //Result
     */
    function deleteAll($form_id = null)
    {
        //Remove Item Data
        $item_data_manager =& $this->_getItemDataManager();
        $item_data_manager->removeAll($form_id);

        return true;
    }

    function setAttachFile(
        $item_data_id,
        $attach_file,
        $attach_file_view = null
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($item_data_id, E_GRN_WRKF_ITEM_INVALID_ID);

        //Create Property List
        $property_list = [
            GRN_WORKFLOW_COLUMN_ATTACH_FILE      => $attach_file,
            GRN_WORKFLOW_COLUMN_ATTACH_FILE_VIEW => $attach_file_view,
        ];

        //Update Item
        $item_data_manager =& $this->_getItemDataManager();
        $item_data_id = $item_data_manager->update($item_data_id,
            $property_list);

        return $item_data_id;
    }

}


