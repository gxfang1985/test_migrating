<?php
require_once('grn/application.csp');
require_once('workflow/resources.csp');
require_once('fw/mail_core.csp');
require_once('grn/system_mail.csp');

use grn\grn\access\service\AppAccess;

class GRN_Workflow_MailErrorListener extends CB_MailErrorListener
{
    private $_logger = null;

    function __construct()
    {
        if ( ! $this->_logger) {
            require_once('fw/logger.csp');
            $logger_manager = CB_LoggerManager::getInstance();
            $this->_logger
                = $logger_manager->getLogger(GRN_WORKFLOW_MODULE_ID);
        }
    }

    private static $_instance = null;

    /**
     * @static
     * @return GRN_Workflow_MailErrorListener
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Notify an error.
     *
     * @param string $errno An error code that associated with the error.
     *                      Positive number as protocol error or -1 as otherwise.
     * @param string $msg   Human readable message text.
     */
    function error($errno, $msg)
    {
        if ( ! $this->_logger) {
            return;
        }

        $this->_logger->debug($msg);
    }
}

/**
 * Workflow Mail Notification Mail Creator Class
 */
class GRN_Workflow_MailNotification_Mail_Creator
{
    function __construct($action_type, $petition = null)
    {
        $this->_petition = $petition;
        $this->_action_type = $action_type;
    }

    private static $_instance = null;

    /**
     * @static
     * @return GRN_Workflow_MailNotification_Mail_Creator
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    private $_action_type = null;
    private $_petition = null;
    private $_locale = null;
    private $_config = null;
    private $_user_id = null;

    function setLocale($locale)
    {
        $this->_locale = $locale;

        return $this->_locale;
    }

    public function setUserId($user_id)
    {
        $this->_user_id = $user_id;

        return $this->_user_id;
    }

    /**
     * @return string
     */
    function createSubject()
    {
        $priority = '';
        if ($this->_petition['col_priority']) {
            $priority = ' ' . $this->_msg('mail_subject_priority');
        }

        $subject = sprintf('[%s] %s%s', $this->_getPetitionStatus(), $priority,
            $this->_getPetitionTitle());

        return $subject;
    }

    /**
     * @return string
     */
    function createContents()
    {
        $contents = '';

        // Priority
        if ($this->_petition['col_priority']) {
            $contents .= $this->_msg('mail_contents_priority') . "\n";
        }
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $user = $uum->getUser($this->_user_id);
        $uids = [];
        $uids[] = $this->_petition['col_user'];
        if ($this->_petition['col_agent_user']) {
            $uids[] = $this->_petition['col_agent_user'];
        }
        require_once("grn/controller.csp");
        $users_info = GRN_ControllerUtil::getUserInfoToShowUserName($uids,
            $user);
        // Appricant
        if ($this->_petition['col_user']
            && array_key_exists($this->_petition['col_user'], $users_info)
        ) {
            $contents .= $this->_msg('mail_contents_applicant')
                         . $uum->getNameOf($user,
                    $users_info[$this->_petition['col_user']], true) . "\n";
        } else {
            $contents .= $this->_msg('mail_contents_applicant')
                         . $this->_petition['col_user_name'] . "\n";
        }
        // Agent
        if ($this->_petition['col_agent_user_name']) {
            if ($this->_petition['col_agent_user']
                && array_key_exists($this->_petition['col_agent_user'],
                    $users_info)
            ) {
                $contents .= $this->_msg('mail_contents_agent')
                             . $uum->getNameOf($user,
                        $users_info[$this->_petition['col_agent_user']], true)
                             . "\n";
            } else {
                $contents .= $this->_msg('mail_contents_agent')
                             . $this->_petition['col_agent_user_name'] . "\n";
            }
        }

        // Date
        $ctime = new CB_TimeStamp();
        $ctime->unix_ts = $this->_petition['col_ctime'];
        $contents .= $this->_msg('mail_contents_date')
                     . cb_date_format('DateTimeMiddle_YMDW_HM', $ctime,
                $this->_user_id, null, $this->_locale) . "\n";

        // Message
        $contents .= "\n";
        $contents .= $this->_getMessage() . "\n";
        //$contents .= "\n";

        // Title & URL
        $contents .= $this->_getPetitionTitle() . "\n";
        $contents .= $this->_getPetitionURL() . "\n";
        $contents .= "\n";

        // To personal config message
        $contents .= $this->_getPersonalConfigMessage() . "\n";
        $contents .= $this->_getPersonalConfigURL() . "\n";

        return $contents;
    }

    function _getPetitionTitle()
    {
        $title = '';

        if ($this->_petition['col_petition_number'] != "") {
            $title .= 'No. ' . $this->_petition['col_petition_number'] . ' ';
        }

        $title .= $this->_petition['col_form_name'] . '('
                  . $this->_petition['col_name'] . ')';

        return $title;
    }

    function _getPetitionStatus()
    {
        switch ($this->_petition['col_status']) {
            case GRN_WORKFLOW_STATUS_UNPROCESSING:
            case GRN_WORKFLOW_STATUS_IN_PROCESS:
                $status = $this->_msg('status_1', 'grn.workflow');
                break;
            case GRN_WORKFLOW_STATUS_ACCEPTANCE:
                $status = $this->_msg('status_2', 'grn.workflow');
                break;
            case GRN_WORKFLOW_STATUS_REJECTION:
                $status = $this->_msg('status_3', 'grn.workflow');
                break;
            case GRN_WORKFLOW_STATUS_REMAND:
                $status = $this->_msg('status_4', 'grn.workflow');
                break;
            case GRN_WORKFLOW_STATUS_UNPROCESSING_CANCEL:
                $status = $this->_msg('status_5', 'grn.workflow');
                break;
            case GRN_WORKFLOW_STATUS_IN_PROCESS_CANCEL:
                $status = $this->_msg('status_6', 'grn.workflow');
                break;
            case GRN_WORKFLOW_STATUS_FINISHED:
                $status = $this->_msg('status_7', 'grn.workflow');
                break;
            default:
                $status = '';
                break;
        }

        return $status;
    }

    function _getPetitionURL()
    {
        $url = $this->_getBaseURL() . cb_format_url('workflow/redirector',
                [
                    'pid'   => $this->_petition['_id'],
                    'ftype' => GRN_WORKFLOW_FOLDER_TYPE_UNPROCESSED_ID
                ]);

        return $url;
    }

    function _getMessage()
    {
        $message = '';
        switch ($this->_petition['col_status']) {
            case GRN_WORKFLOW_STATUS_UNPROCESSING:
            case GRN_WORKFLOW_STATUS_IN_PROCESS:
                $message = $this->_msg('mail_contents_message_to_next');
                break;
            case GRN_WORKFLOW_STATUS_ACCEPTANCE:
                $message = $this->_msg('mail_contents_message_accepted');
                break;
            case GRN_WORKFLOW_STATUS_REJECTION:
                $message = $this->_msg('mail_contents_message_rejected');
                break;
            case GRN_WORKFLOW_STATUS_REMAND:
                $message = $this->_msg('mail_contents_message_remanded');
                break;
            case GRN_WORKFLOW_STATUS_UNPROCESSING_CANCEL:
            case GRN_WORKFLOW_STATUS_IN_PROCESS_CANCEL:
                break;
            case GRN_WORKFLOW_STATUS_FINISHED:
                $message = $this->_msg('mail_contents_message_finished');
                break;
        }

        return $message;
    }

    /**
     * @return string
     */
    function _getPersonalConfigMessage()
    {
        $str = $this->_msg('mail_contents_config_message');

        return $str;
    }

    /**
     * @return string
     */
    function _getPersonalConfigURL()
    {
        return $this->_getBaseURL()
               . cb_format_url('workflow/personal/mail_forward');
    }

    /**
     * @param        $key
     * @param string $module
     * @param null   $args
     *
     * @return string
     */
    function _msg($key, $module = 'grn.workflow', $args = null)
    {
        return cb_msg($module, $key, $args, $this->_locale);
    }

    /**
     * Get base URL.
     *
     * @return string   ex) https://hoge@example.com:8080
     */
    function _getBaseURL()
    {
        require_once('workflow/config.csp');
        $configs = GRN_Workflow_Configs::getInstance();
        $system_config = $configs->getSystemConfig();
        $system_url = $system_config->getMailNotificationURL();

        // ex) %^(.*)/cgi-bin/grn310fix/grn.exe/index.*$%$1%
        // 
        //GRN2-3047
        $pattern = '%^(.*)' . substr(cb_format_url('workflow/index'), 0, -1)
                   . '.*$%';
        //GRN2-3047
        if (preg_match($pattern, $system_url, $matches) > 0) {
            $url = $matches[1];
        } else {
            $url = cb_get_url_prefix();
        }

        return $url;
    }
}

/**
 * Workflow Mail Notification Service Logic
 */
class GRN_Workflow_MailNotification_Service
{
    function __construct()
    {
    }

    private static $_instance = null;

    /**
     * @static
     * @return GRN_Workflow_MailNotification_Service
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    var $_config = null;
    var $_sender = null;

    /**
     * Get System Mail Address
     *
     * @return string or FALSE
     */
    function getFromAddress()
    {
        $system_mail = GRN_SystemMailConfigManager::getInstance();

        return $system_mail->getMailAddress();
    }

    /**
     * Get info to forward mail
     *
     * @param  array $uids
     *
     * @return array
     */
    function getForwardMailInfos($uids)
    {
        require_once('fw/i18n.csp');
        $i18n = CB_I18N::getInstance();

        require_once('grn/locale.csp');
        $locale_manager = GRN_Locale_ConfigManager::getInstance();
        $users_locale = $locale_manager->getUsersLocale($uids);

        require_once('workflow/config.csp');
        $personal_configs = GRN_Workflow_Configs::getInstance();

        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');

        $email = null;
        $locale = null;
        $charset = null;
        $ret = [];
        foreach ($uids as $uid) {
            $personal_config = $personal_configs->getPersonalConfig($uid);
            // check forward mail
            if ( ! $personal_config->getForwardEmail()) {
                continue;
            }
            if ( ! $uum->isActiveUser($uid)) {
                continue;
            }
            $user = $uum->getUser($uid);

            // locale
            if ( ! array_key_exists($uid, $users_locale)) {
                $locale = $locale_manager->getDefaultLocale();
            } else {
                $locale = $users_locale[$uid];
            }

            $locale_personal = $locale_manager->getPersonalConfig($user);
            // charset
            $charset = $locale_personal->getReceivingEmailCharset();
            if ($charset == 'auto') {
                $charset = $i18n->getEncodingByLocale($locale);
            }

            // email
            // email in user info
            if ($personal_config->getForwardUserEmail()) {
                $email = $user->get('email_address');
            } else // other email address
            {
                $email = $personal_config->getOtherEmailAddress();
            }
            if ( ! $email) {
                continue;
            }

            // output ret
            if ( ! array_key_exists($locale, $ret)) {
                $ret[$locale] = [];
            }
            if ( ! array_key_exists($charset, $ret[$locale])) {
                $ret[$locale][$charset] = [];
            }
            $ret[$locale][$charset][$uid] = $email;
        }

        return $ret;
    }

    /**
     * Send Mail Notification
     *
     * @param  array $petition
     * @param  array $uids
     * @param  int   $action_type (defined in resources)
     *
     * @return CB_MailSender|FALSE
     */
    function sendMailNotification(
        $petition,
        $uids,
        $action_type = GRN_WORKFLOW_MAILNOTIFICATION_ACTION_TO_NEXT
    ) {
        // Validation
        if ( ! is_array($petition)) {
            return false;
        }

        if ( ! is_array($uids)) {
            return false;
        }
        require_once('grn/system_mail.csp');
        $system_mail = GRN_SystemMailConfigManager::getInstance();

        // service not available
        if ( ! $system_mail->isAvailable()) {
            return false;
        }

        require_once('workflow/config.csp');
        $configs = GRN_Workflow_Configs::getInstance();
        $uids_send_mail = AppAccess::filterUserIdsInternalAccessByAppId($uids,
            'workflow');
        $forward_infos = $this->getForwardMailInfos($uids_send_mail);
        if (count($forward_infos) == 0) {
            return false;
        }

        $errMessage = null;
        // mail sender
        $sender = $system_mail->getSystemMailSender($errMessage);
        if ( ! $sender) {
            $system_mail->logForwardMailFail($errMessage,
                GRN_WORKFLOW_APPLICATION_ID,
                GRN_WORKFLOW_MODULE_ID);

            return false;
        }

        $listener = GRN_Workflow_MailErrorListener::getInstance();
        $sender->setErrorListener($listener);

        $from = $system_mail->getMailAddress();
        if ( ! $from) {
            return false;
        }

        $addresses_send_fail = [];
        $invalid_addresses = [];
        $use_builtin_mail_server = $system_mail->useBuiltinMailServer();
        foreach ($forward_infos as $locale => $charset_addresses) {
            $creator
                = new GRN_Workflow_MailNotification_Mail_Creator($action_type,
                $petition);
            $creator->setLocale($locale);
            // send
            foreach ($charset_addresses as $charset => $addresses) {
                foreach (array_keys($addresses) as $uid) {
                    $creator->setUserId($uid);

                    // create mail
                    $subject = $creator->createSubject();
                    $contents = $creator->createContents();

                    // Check the mail address whether is a local address
                    if ($use_builtin_mail_server) {
                        $user_addresses = explode(',', $addresses[$uid]);
                        $system_mail->separateLocalMailAddress($user_addresses,
                            $invalid_addresses);

                        if (0 < count($user_addresses)) {
                            $addresses[$uid] = implode(',', $user_addresses);
                        } else {
                            continue;
                        }
                    }

                    $ret_send = $this->_sendMail($sender, $from,
                        [$uid => $addresses[$uid]], $subject, $contents,
                        $locale, $charset);
                    if (is_array($ret_send) && count($ret_send)) {
                        $addresses_send_fail[] = implode(',', $ret_send);
                    }
                }
            }
        }
        $sender->commit();

        // disconnect
        if (method_exists($sender, 'disconnect')) {
            $sender->disconnect();
        }

        // output log of invalid addresses
        if (count($invalid_addresses) > 0) {
            $log_message
                = $system_mail->createInvalidAddressLogMessage($invalid_addresses);
            $system_mail->logForwardMailFail($log_message,
                GRN_WORKFLOW_APPLICATION_ID, GRN_WORKFLOW_MODULE_ID);
        }

        // output log mail send fail
        if (count($addresses_send_fail)) {
            $system_mail->logForwardMailFail(implode(',', $addresses_send_fail),
                GRN_WORKFLOW_APPLICATION_ID,
                GRN_WORKFLOW_MODULE_ID);
        }

        return $sender;
    }

    /**
     * Reserve a sending mail.
     *
     * @param CB_MailSMTPSenderBase $sender
     * @param string                $from
     * @param array                 $addresses
     * @param string                $subject
     * @param string                $contents
     * @param string                $locale
     * @param string                $encoding
     *
     * @return bool|array
     */
    function _sendMail(
        $sender,
        $from,
        $addresses,
        $subject,
        $contents,
        $locale,
        $encoding
    ) {
        if ( ! is_array($addresses) || count($addresses) == 0) {
            return false;
        }

        require_once('fw/mail_message.csp');
        $cp = new CB_MailComposer();
        $cp->setFrom(new CB_MailAddress($from));
        $cp->setSubject(CB_MailComposer::escapeHalfWidthKana($subject,
            $encoding));
        $cp->setTextBody(CB_MailComposer::escapeHalfWidthKana($contents,
            $encoding));
        $cp->setXMailer();

        $max_chunk_address = 50;
        $addresses_send = [];
        if (count($addresses) > $max_chunk_address) {
            $addresses_send = array_chunk($addresses, $max_chunk_address, true);
        } else {
            $addresses_send[] = $addresses;
        }

        $addresses_send_fail = [];
        // send mail
        foreach ($addresses_send as $values) {
            $address_objects = [];
            foreach ($values as $key => $value) {
                $address_objects[] = new CB_MailAddress($value);
            }

            $addresses_string = CB_MailAddress::static_format($address_objects);
            $cp->setHeader(new CB_MailHeader('Bcc', $addresses_string), true);

            $temp_message = $cp->getMailMessage();
            if ($encoding != 'auto') {
                $temp_message->setForceEncoding($encoding);
            }

            $msg = [];
            $msg[] = $temp_message;

            $result = $sender->sendMails($msg, $locale);
            if ( ! $result) {
                $addresses_send_fail[] = $addresses_string;
            }
        }

        return $addresses_send_fail;
    }

    /**
     * Validate Product URL
     *
     * @param string $url
     *
     * @return bool if valid, TRUE; if invalid, valid URL suffix
     */
    function validateURL($url)
    {
        // ex) %^(.*)/cgi-bin/grn310fix/grn.exe/index.*$%$1%
        //
        //GRN2-3047
        $pattern = '%^.*' . substr(cb_format_url('workflow/index'), 0, -1)
                   . '\??$%';
        if (preg_match($pattern, $url) > 0) {
            $ret = true;
        } else {
            $ret = cb_format_url('workflow/index');
        }

        //GRN2-3047
        return $ret;
    }
}

