<?php

/**
 * 改変アクセス権（データ）
 *
 * @author  MayumiAsakawa 2006/01
 * @version 1.0
 * @package grn.workflow
 */

require_once('workflow/resources.csp');
require_once('workflow/model.csp');

/**
 * 改変アクセス権（データ）クラス
 */
class GRN_Workflow_ChangeAccessData extends GRN_Workflow_Model
{
    /**
     * シングルトンの取得
     *
     * @return GRN_Workflow_ChangeAccessData
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_ChangeAccessData();
        }

        return $_instance;
    }

    /**
     * コンストラクタ
     */
    function __construct()
    {
        $this->_columns_info = [
            'necessary' => [
                'col_change_access_form',
                'col_item_data',
                'col_path_step_data'
            ]
        ];

        $this->_aliases = [
            'tab_grn_workflow_accesschangedata' => 'a',
            'tab_grn_workflow_itemdata'         => 'i'
        ];

        parent::__construct('tab_grn_workflow_accesschangedata');
    }

    /**
     * 改変アクセス権をチェック（1件）
     *
     * @param   array $properties プロパティ一覧（カラム名:配列key／プロパティ:配列値）
     * @param   int   $lock       ロックの種類
     *
     * @return  bool    改変権あり：TRUE
     */
    function check($properties, $lock = CB_DATABASE_NO_LOCK)
    {
        if ( ! is_array($properties) || 0 == count($properties)) {
            cb_throw_error(E_GRN_WRKF_EMPTY_PROPERTIES);
        }

        // 検索条件
        $condition_set = [];
        foreach ($properties as $key => $value) {
            $condition_set[] = cb_queryf($this->_dbconn, $key . "='@S'",
                $value);
        }
        $condition = implode(' AND ', $condition_set);

        $columns = null;
        $key = '_id';
        $offset = 0;
        $limit = 1;
        $order_by = null;
        $result = $this->_selectRecords($columns, $key, $offset, $limit,
            $order_by, $condition, $lock);

        if (count($result) > 0) {
            return true;    // 改変権あり
        } else {
            return false;    // 改変権なし
        }
    }

    /**
     * 改変アクセス権をチェックしてカウント（複数行）
     *
     * @param   array $properties 追加データ一覧（カラム名:配列key／プロパティ:配列値）
     * @param   int   $lock       ロックの種類
     *
     * @return  array   データ件数
     *
     * @access private
     */
    function countList($properties, $lock = CB_DATABASE_NO_LOCK)
    {
        if ( ! is_array($properties) || 0 == count($properties)) {
            cb_throw_error(E_GRN_WRKF_EMPTY_PROPERTIES);
        }

        // 検索条件 Where (A='1' AND B IN('2','4','5','3','2') OR (A='3' B IN(...))
        $where_set = [];
        foreach ($properties as $record) {
            if (count($record) !== 5) {
                // プロパティは４種類
                cb_throw_error(E_GRN_WRKF_EMPTY_PROPERTIES);
            }


            if ( ! isset($where_set[$record[GRN_WORKFLOW_COLUMN_ITEM_DATA]])) {
                $where_set[$record[GRN_WORKFLOW_COLUMN_ITEM_DATA]] = [];
            }

            $where_set[$record[GRN_WORKFLOW_COLUMN_ITEM_DATA]][]
                = cb_queryf($this->_dbconn, "'@S'",
                $record[GRN_WORKFLOW_COLUMN_PATH_STEP_DATA]);
        }

        $condition_list = [];
        foreach (array_keys($where_set) as $item_data_id) {
            $path_step_data_id_list =& $where_set[$item_data_id];
            $condition_list[] = sprintf("%s = %s AND %s IN (%s)",
                GRN_WORKFLOW_COLUMN_ITEM_DATA,
                $item_data_id,
                GRN_WORKFLOW_COLUMN_PATH_STEP_DATA,
                implode(',', $path_step_data_id_list)
            );
        }
        $condition = implode(' OR ', $condition_list);

        $key = 'count(*)';
        $offset = 0;
        $limit = -1;

        // クエリ実行
        $row = $this->_selectRecords(null, $key, $offset, $limit, null,
            $condition, $lock);
        $result = reset($row);
        $rs_count = intval($result[$key]);

        return $rs_count;
    }

    /**
     * 申請時に改変アクセス権を追加
     *
     * @param   array $properties 追加データ一覧（カラム名:配列key／プロパティ:配列値）
     * @param   array $records
     *
     * @return  string （最後に追加した）改変アクセス権ID
     */
    function addList($properties, $records = [])
    {
        if ( ! is_array($properties) || 0 == count($properties)) {
            cb_throw_error(E_GRN_WRKF_EMPTY_PROPERTIES);
        }

        // 追加するデータを配列に格納し直す。兼、配列内の重複チェック。
        $record_for_check = [];   // 重複チェックに使用
        foreach ($properties as $record) {
            if (count($record) !== 5) {
                // プロパティは４種類
                cb_throw_error(E_GRN_WRKF_EMPTY_PROPERTIES);
            }

            if ( ! isset($record_for_check[$record[GRN_WORKFLOW_COLUMN_ITEM_DATA]])) {
                $record_for_check[$record[GRN_WORKFLOW_COLUMN_ITEM_DATA]] = [];
            }

            if (in_array($record[GRN_WORKFLOW_COLUMN_PATH_STEP_DATA],
                $record_for_check[$record[GRN_WORKFLOW_COLUMN_ITEM_DATA]])
            ) {
                // 一件でも重複していたらエラー終了
                cb_throw_error(E_GRN_WRKF_ACCESSCHANGEDATA_DUPLICATION);
            }

            $record_for_check[$record[GRN_WORKFLOW_COLUMN_ITEM_DATA]][]
                = $record[GRN_WORKFLOW_COLUMN_PATH_STEP_DATA];
        }

        // テーブルに既に追加されていないか
        $return = $this->countList($properties);
        if (0 === $return) {
            // 追加を実行
            return $this->_insertRecords(array_keys($properties[0]),
                $properties);
        } elseif (0 < $return) {
            // 一件でも重複していたらエラー終了
            cb_throw_error(E_GRN_WRKF_ACCESSCHANGEDATA_EXIST);
        } else {
            cb_throw_error();
        }
    }

    /**
     * 改変アクセス権データ一覧を取得
     *
     * @param   int    $petition_id 申請ID
     * @param   array  $columns     プロパティを取得するカラム名一覧
     * @param   string $key         改変アクセス権一覧のキー
     * @param   int    $offset      一覧の先頭オフセット
     * @param   int    $limit       一覧件数
     * @param   int    $lock        ロックの種類
     *
     * @return  array   レコード一覧（経路IDとレコード）
     */
    function getListByPetitionId(
        $petition_id,
        $columns,
        $key = '_id',
        $offset = 0,
        $limit = -1,
        $lock = CB_DATABASE_NO_LOCK
    ) {
        cb_trim_check($petition_id, E_GRN_WRKF_PETITION_INVALID_ID);
        if ( ! is_array($columns) || 0 == count($columns)) {
            cb_throw_error(E_GRN_WRKF_EMPTY_COLUMNS);
        }

        $columns = $this->_formatColumns($columns, $this->_aliases);
        $from
            = "tab_grn_workflow_accesschangedata AS a LEFT JOIN tab_grn_workflow_itemdata AS b ON a.col_item_data=b._id";
        $condition = cb_queryf($this->_dbconn, "b.col_petition='@S'",
            $petition_id);
        $order_by = 'b.col_list_index,b._id';
        $query
            = "SELECT {$columns} FROM {$from} WHERE ({$condition}) ORDER BY {$order_by}";
        $query = $this->_dbconn->select_format($query, $offset, $limit,
            $lock);
        $result = $this->_dbconn->query($query);
        if (false === $result) {
            $this->_dbconn->throwError(['query' => "failed query on SELECT: {$query}"]);
        }

        $rows = [];
        while ($row = $this->_dbconn->fetch_assoc($result)) {
            $rows[$row[$key]] = $row;
        }

        return $rows;
    }

    /**
     * 改変アクセス権データ一覧を取得
     *
     * @param   int    $item_data_id 項目データID
     * @param   array  $columns      プロパティを取得するカラム名一覧
     * @param   string $key          改変アクセス権一覧のキー
     * @param   int    $offset       一覧の先頭オフセット
     * @param   int    $limit        一覧件数
     * @param   int    $lock         ロックの種類
     *
     * @return  array   レコード一覧（経路IDとレコード）
     */
    function getListByItemDataId(
        $item_data_id,
        $columns = null,
        $key = '_id',
        $offset = 0,
        $limit = -1,
        $lock = CB_DATABASE_NO_LOCK
    ) {
        cb_trim_check($item_data_id, E_GRN_WRKF_ITEMDATA_INVALID_ID);

        $condition = cb_queryf($this->_dbconn, "col_item_data='@S'",
            $item_data_id);

        return $this->_selectRecords($columns, $key, $offset, $limit, null,
            $condition, $lock);
    }

    /**
     * 改変アクセス権データを削除
     *
     * @param   int $change_access_id 改変アクセス権データID
     */
    function remove($change_access_data_id)
    {
        cb_trim_check($change_access_data_id,
            E_GRN_WRKF_INVALID_CHANGE_ACCESS_DATA_ID);

        $condition = cb_queryf($this->_dbconn, "_id='@S'",
            $change_access_data_id);
        $this->_deleteRecords($condition);
    }

    /**
     * 改変アクセス権データを一括削除
     *
     * @param   mixed $caids    （特定の）改変アクセス権データを一括削除する場合は改変アクセス権データIDの配列
     *                          それ以外はすべて削除
     */
    function removeList($caids = null)
    {
        $condition = null;
        if (is_array($caids) && 0 < count($caids)) {
            foreach ($caids as $key => $value) {
                $caids[$key] = cb_queryf($this->_dbconn, "'@S'", $value);
            }
            $caids = implode(',', $caids);
            $condition = "_id IN (${caids})";
        }

        $this->_deleteRecords($condition);
    }

    function evaluate($item_data_id, $path_step_data_id)
    {
        cb_trim_check($item_data_id, E_GRN_WRKF_ITEMDATA_INVALID_ID);
//        cb_trim_check($path_step_data_id, E_GRN_WRKF_ITEMDATA_INVALID_ID);

        $condition = cb_queryf($this->_dbconn,
            "col_item_data='@S' AND col_path_step_data='@S'", $item_data_id,
            $path_step_data_id);

        //$rows = $this->_selectRecords(null, '_id', 0, 1, null, $condition);
        $rows = $this->_selectRecords(['col_view', 'col_edit'], '_id', 0, 1,
            null, $condition);
        $ret = count($rows) ? array_shift($rows) : false;

        //return 0 < count($rows);
        return $ret;
    }

    /**
     * 項目に対するアクセス権を返す ( デフォルト設定あり )
     *
     * @param   array   閲覧権・編集権
     */
    function evaluateEx($item_data_id, $path_step_data_id)
    {
        cb_trim_check($item_data_id, E_GRN_WRKF_ITEMDATA_INVALID_ID);
        $condition = cb_queryf($this->_dbconn,
            "col_item_data='@S' AND col_path_step_data='@S'", $item_data_id,
            $path_step_data_id);
        $rows = $this->_selectRecords(['col_view', 'col_edit'], '_id', 0,
            1, null, $condition);

        if (count($rows)) {
            $ret = array_shift($rows);
        } else {
            // default setting.
            $ret = [
                'col_view' => 1,
                'col_edit' => null
            ];
        }

        return $ret;
    }
}

