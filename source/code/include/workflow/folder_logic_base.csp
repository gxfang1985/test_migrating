<?php
/**
 * Workflow Application Folder Base Class
 *
 * @author  SHIMADA Kunihiko 2006/1
 * @version 1.0
 * @package grn.workflow
 */

/** Workflow Application **/
require_once('workflow/resources.csp');

/**
 * Folder Logic Base Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_Folder_Logic_Base
{
    //Folder Manager Base Instance
    var $_folder_manager_base = null;

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {

    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_Folder_Logic_Base $instance                  //Instance of GRN_Workflow_Folder_Logic_Base
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_Folder_Logic_Base();
        }

        return $_instance;
    }

    /**
     * Get Folder Manager Base
     *
     * @return GRN_Workflow_Folder_Manager_Base $folder_manager_base         //Folder Manager Base
     */
    function _getFolderManagerBase()
    {
        if (is_null($this->_folder_manager_base)) {
            require_once('workflow/folder_manager_base.csp');
            $this->_folder_manager_base
                = GRN_Workflow_Folder_Manager_Base::getInstance();
        }

        return $this->_folder_manager_base;
    }

    function &getFolder($folder_id, $lock_mode = CB_DATABASE_DEFAULT_LOCK)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        //Check Folder ID
        cb_trim_check($folder_id,
            E_GRN_WRKF_FOLDER_INVALID_FOLDER_ID); //Folder ID

        //Get Folder 
        $folder_manager_base = $this->_getFolderManagerBase();
        $folder =& $folder_manager_base->getFolder($folder_id,
            $lock_mode);
        if ( ! $folder) {
            //Folder Not Found
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_FOLDER_NOT_FOUND);
        }

        //Return Folder
        return $folder;
    }

    /**
     * Get Folder
     *
     * @param  int  $user_id   //User ID
     * @param  int  $folder_id //Folder ID
     * @param  bool $refresh   //Refresh Cache
     * @param  int  $lock_mode //Lock Mode
     *
     * @return array  $folder                       //Folder Information Array
     */
    function &get(
        $user_id,
        $folder_id,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        //Check Folder ID
        cb_trim_check($folder_id,
            E_GRN_WRKF_FOLDER_INVALID_FOLDER_ID); //Folder ID
        //Check User ID
        cb_trim_check($user_id, E_GRN_WRKF_FOLDER_INVALID_USER_ID);   //User ID

        //Get Folder 
        $folder_manager_base = $this->_getFolderManagerBase();
        $folder =& $folder_manager_base->get($user_id, $folder_id,
            $refresh, $lock_mode);
        if ( ! $folder) {
            //Folder Not Found
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_FOLDER_NOT_FOUND);
        }

        //Return Folder
        return $folder;
    }

    /**
     * Get Folder By Foreign Key
     *
     * @param  int    $user_id    //User ID
     * @param  string $folder_key //Folder Foreign Key
     * @param  int    $lock_mode  //Lock Mode
     *
     * @return array  $folder                   //Folder Information
     */
    function &getByForeignKey(
        $user_id,
        $folder_key,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        //Check User ID
        cb_trim_check($user_id,
            E_GRN_WRKF_FOLDER_INVALID_USER_ID);      //User ID
        //Check Folder Key
        cb_trim_check($folder_key, E_GRN_WRKF_FOLDER_NOT_INPUT_NECESSARY);

        //Get Folder
        $folder_manager_base = $this->_getFolderManagerBase();
        $folder =& $folder_manager_base->getByForeignKey($user_id,
            $folder_key, $lock_mode);
        if ( ! $folder) {
            //Folder Not Found
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_FOLDER_NOT_FOUND);
        }

        //Return Folder
        return $folder;
    }

    /**
     * Get Folder(with Extra Information)
     *
     * @param  int  $user_id   //User ID
     * @param  int  $folder_id //Folder ID
     * @param  int  $offset    //Offset
     * @param  int  $limit     //Limit
     * @param  bool $refresh   //Refresh Cache
     * @param  int  $lock_mode //Lock Mode
     *
     * @return array  $folder                       //Folder Information Array
     */
    function &getEx(
        $user_id,
        $folder_id,
        $offset = 0,
        $limit = 20,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $ret =& $this->getExOrder($user_id, $folder_id, $offset, $limit, null,
            $refresh, $lock_mode);

        return $ret;
    }

    /**
     * Get Folder(with Extra Information)
     *
     * @param  int   $user_id   //User ID
     * @param  int   $folder_id //Folder ID
     * @param  int   $offset    //Offset
     * @param  int   $limit     //Limit
     * @param  array $order     //OrderBy  ex) array('table name' => array('column name' => 'ASC or DESC') )
     * @param  bool  $refresh   //Refresh Cache
     * @param  int   $lock_mode //Lock Mode
     *
     * @return array  $folder                       //Folder Information Array
     */
    function &getExOrder(
        $user_id,
        $folder_id,
        $offset = 0,
        $limit = 20,
        $order = null,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        //Check Folder ID
        cb_trim_check($folder_id,
            E_GRN_WRKF_FOLDER_INVALID_FOLDER_ID); //Folder ID
        //Check User ID
        cb_trim_check($user_id, E_GRN_WRKF_FOLDER_INVALID_USER_ID);   //User ID

        //Get Folder 
        $folder_manager_base = $this->_getFolderManagerBase();
        $folder =& $folder_manager_base->getExOrder($user_id,
            $folder_id, $offset, $limit, $order, $refresh, $lock_mode);
        if ( ! $folder) {
            $ret = false;

            return $ret;
        }

        //Return Folder
        return $folder;
    }

    /**
     * Get Folder List
     *
     * @param  int  $user_id   //User ID
     * @param  bool $refresh   //Refresh Cache
     * @param  int  $lock_mode //Lock Mode
     *
     * @return array  $folder_list                  //Folder Information List
     */
    function &getList(
        $user_id,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        //Check User ID
        cb_trim_check($user_id, E_GRN_WRKF_FOLDER_INVALID_USER_ID);   //User ID

        //Get Folder List
        $folder_manager_base = $this->_getFolderManagerBase();
        $folder_list =& $folder_manager_base->getList($user_id,
            $refresh, $lock_mode);

        //Return Folder List
        return $folder_list;
    }

    /**
     * Get Folder List(Extra Information)
     *
     * @param  int  $user_id   //User ID
     * @param  bool $refresh   //Refresh Cache
     * @param  int  $lock_mode //Lock Mode
     *
     * @return array  $folder_list                  //Folder Information List
     */
    function &getListEx(
        $user_id,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        //Check User ID
        cb_trim_check($user_id, E_GRN_WRKF_FOLDER_INVALID_USER_ID);   //User ID

        //Get Folder List
        $folder_manager_base = $this->_getFolderManagerBase();
        $folder_list =& $folder_manager_base->getListEx($user_id,
            $refresh, $lock_mode);

        //Return Folder List
        return $folder_list;
    }

    /**
     * Get Folder Count
     *
     * @param  int  $user_id   /User ID
     * @param  bool $refresh   //Refresh Cache
     * @param  int  $lock_mode //Lock Mode
     *
     * @return int    $folder_count                 //Folder Count
     */
    function getCount(
        $user_id,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        //Check User ID
        cb_trim_check($user_id, E_GRN_WRKF_FOLDER_INVALID_USER_ID);   //User ID

        //Get Folder List
        $folder_manager_base = $this->_getFolderManagerBase();
        $folder_count = $folder_manager_base->getCount($user_id,
            $refresh, $lock_mode);

        //Return Folder Count
        return $folder_count;
    }

    /**
     * Get Folder Relation Count
     *
     * @param  int  $user_id   //User ID
     * @param  int  $folder_id //Folder ID
     * @param  bool $refresh   //Refresh Cache
     * @param  int  $lock_mode //Lock Mode
     *
     * @return int    $folder_count                 //Folder Count
     */
    function getFolderRelationCount(
        $user_id,
        $folder_id,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        //Check User ID
        cb_trim_check($user_id, E_GRN_WRKF_FOLDER_INVALID_USER_ID);   //User ID

        //Get Folder List
        $folder_manager_base = $this->_getFolderManagerBase();
        $folder_count
            = $folder_manager_base->getFolderRelationCount($user_id,
            $folder_id, $refresh, $lock_mode);

        //Return Folder Count
        return $folder_count;
    }

    /**
     * Search Petition ID List
     *
     * @param  int   $form_id   //Form ID
     * @param  mixed $search    //Search Option
     * @param  int   $lock_mode //Lock Mode
     *
     * @return array  $petition_id_list          //Petition ID List
     */
    function searchPetitionIdList(
        $folder_id,
        $search,
        $remove_item_ids = [],
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($folder_id,
            E_GRN_WRKF_FOLDER_INVALID_FOLDER_ID);   //Folder ID

        //Get Petition ID List
        $folder_manager_base = $this->_getFolderManagerBase();
        $petition_id_list
            = $folder_manager_base->searchPetitionIdList($folder_id,
            $search, $remove_item_ids, $lock_mode);

        //Return Petition ID List
        return $petition_id_list;
    }

}

/**
 * Virtual Folder Logic Base Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_Virtual_Folder_Logic_Base
{
    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {

    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_Virtual_Folder_Logic_Base $instance                  //Instance of GRN_Workflow_Virtual_Folder_Logic_Base
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_Virtual_Folder_Logic_Base();
        }

        return $_instance;
    }

    /**
     * Get Folder List
     *
     * @param  int  $user_id   //User ID
     * @param  bool $refresh   //Refresh Cache
     * @param  int  $lock_mode //Lock Mode
     *
     * @return array  $folder_list                  //Folder Information List
     */
    function &getList(
        $user_id,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        //Check User ID
        cb_trim_check($user_id, E_GRN_WRKF_FOLDER_INVALID_USER_ID);   //User ID

        $folder_list = [];

        // 代理承認一覧
        require_once('workflow/config.csp');
        $config = GRN_Workflow_Configs::getInstance();
        $config = $config->getSystemConfig();
        $r = $config->isProxyApproval($user_id);
        if ($r != false) {
            $proxy_approval_folder = [
                '_id'             => GRN_WORKFLOW_FOLDER_PROXY_APPROVAL_ID,
                'col_name'        => cb_msg('grn.workflow',
                    'proxy_approval_list'),
                'col_folder_type' => GRN_WORKFLOW_FOLDER_TYPE_PROXY_APPROVAL_ID,
            ];
            $folder_list[GRN_WORKFLOW_FOLDER_PROXY_APPROVAL_ID]
                = $proxy_approval_folder;
        }

        // 承認予定一覧
        $r = $config->getApprovalPlan();
        if ($r != false) {
            $approval_plan_folder = [
                '_id'             => GRN_WORKFLOW_FOLDER_APPROVAL_PLAN_ID,
                'col_name'        => cb_msg('grn.workflow',
                    'approval_plan_list'),
                'col_folder_type' => GRN_WORKFLOW_FOLDER_TYPE_APPROVAL_PLAN_ID,
            ];
            $folder_list[GRN_WORKFLOW_FOLDER_APPROVAL_PLAN_ID]
                = $approval_plan_folder;
        }

        require_once('workflow/controller_util.csp');
        $category_util
            = GRN_Workflow_Category_Controller_Utility::getInstance();
        $r = $category_util->checkPublic(GRN_WORKFLOW_CATEGORY_ROOT_ID, false);

        if ($r != false) {
            // 公開一覧        
            $public_folder = [
                '_id'             => GRN_WORKFLOW_FOLDER_PUBLIC_ID,
                'col_name'        => cb_msg('grn.workflow', 'public_list'),
                'col_folder_type' => GRN_WORKFLOW_FOLDER_TYPE_PUBLIC_ID
            ];
            $folder_list[GRN_WORKFLOW_FOLDER_PUBLIC_ID] = $public_folder;
        }

        //Return Folder List
        return $folder_list;
    }

    function getFolderRelationCount(
        $user_id,
        $folder_id,
        $category_id = null,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        //Check User ID
        cb_trim_check($user_id, E_GRN_WRKF_FOLDER_INVALID_USER_ID);   //User ID

        require_once('workflow/folder_manager_base.csp');
        $virtual_folder_manager_base
            = GRN_Workflow_Virtual_Folder_Manager_Base::getInstance();
        $folder_count
            = $virtual_folder_manager_base->getFolderRelationCount($user_id,
            $folder_id, $category_id, $refresh, $lock_mode);

        //Return Folder Count
        return $folder_count;
    }

    /**
     * Get Folder(with Extra Information)
     *
     * @param  int   $user_id     //User ID
     * @param  int   $folder_id   //Folder ID
     * @param  int   $offset      //Offset
     * @param  int   $limit       //Limit
     * @param  array $order       //OrderBy  ex) array('table name' => array('column name' => 'ASC or DESC') )
     * @param  bool  $refresh     //Refresh Cache
     * @param  int   $lock_mode   //Lock Mode
     * @param  int   $category_id //Category ID
     *
     * @return array  $folder                       //Folder Information Array
     */
    function &getExOrder(
        $user_id,
        $folder_id,
        $offset = 0,
        $limit = 20,
        $order = null,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $category_id = null
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        //Check Folder ID
        cb_trim_check($folder_id,
            E_GRN_WRKF_FOLDER_INVALID_FOLDER_ID); //Folder ID
        //Check User ID
        cb_trim_check($user_id, E_GRN_WRKF_FOLDER_INVALID_USER_ID);   //User ID

        //Get Folder 
        require_once('workflow/folder_manager_base.csp');
        $virtual_folder_manager_base
            = GRN_Workflow_Virtual_Folder_Manager_Base::getInstance();
        $folder =& $virtual_folder_manager_base->getExOrder($user_id,
            $folder_id, $offset, $limit, $order, $refresh, $lock_mode,
            $category_id);
        if ( ! $folder) {
            $ret = false;

            return $ret;
        }

        //Return Folder
        return $folder;
    }


    /**
     * Search Petition ID List
     *
     * @param  int   $form_id   //Form ID
     * @param  mixed $search    //Search Option
     * @param  int   $lock_mode //Lock Mode
     *
     * @return array  $petition_id_list          //Petition ID List
     */
    function searchPetitionIdList(
        $user_id,
        $folder_id,
        $search,
        $remove_item_list = [],
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($user_id, E_GRN_WRKF_FOLDER_INVALID_USER_ID);   //User ID
        cb_trim_check($folder_id,
            E_GRN_WRKF_FOLDER_INVALID_FOLDER_ID);   //Folder ID

        //Get Petition ID List
        $virtual_folder_manager_base
            = GRN_Workflow_Virtual_Folder_Manager_Base::getInstance();
        $petition_id_list
            = $virtual_folder_manager_base->searchPetitionIdList($user_id,
            $folder_id, $search, $remove_item_list, $lock_mode);

        //Return Petition ID List
        return $petition_id_list;
    }

}


