<?php
/**
 * Workflow Application Petition Base Class
 *
 * @author  Yuichi, Nakamura 2005/12
 * @version 1.0
 * @package grn.workflow
 */

/** Workflow Application **/
require_once('workflow/resources.csp');
require_once('grn/application.csp');

/**
 * Petition Manager Base Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_Petition_Manager_Base
{
    /** Table Name **/
    var $_table_name = null;

    /** Petition List **/
    var $_list = [];

    /** Petition List(with Extra Information) **/
    var $_listEx = [];

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
        $this->_table_name = 'tab_grn_workflow_petition';
    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_Petition_Manager_Base $instance                  //Instance of GRN_Workflow_Petition_Manager_Base
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_Petition_Manager_Base();
        }

        return $_instance;
    }


    /**
     *
     * Enter description here ...
     *
     * @var CB_DatabaseConnection
     */
    private $database = null;

    /**
     * Get Database
     *
     * @return CB_DatabaseConnection $table                     //GRN_Workflow_Petition Table Information
     */
    function _getDatabase()
    {
        if (is_null($this->database)) {
            $app_locator = GRN_ApplicationLocator::instance();
            $this->database = $app_locator->getConnection('workflow');
        }

        return $this->database;
    }

    function setDatabase($database)
    {
        $this->database = $database;
    }

    /**
     * Get Table Name
     *
     * @params  string  $class_name
     *
     * @return string  $table_name
     */
    function _getTableName($class_name)
    {
        $table_name = sprintf('tab_%s', strtolower($class_name));

        return $table_name;
    }

    /**
     * Get Column List
     *
     * @param  string $class_name //Class Name
     *
     * @return array  $column_name_list          //Column Name List
     */
    function &_getColumnList($class_name = null, $set_alias = true)
    {

        //Check Class Name
        $column_prefix = null;
        if (is_null($class_name)) {
            //Default Class Name and Table Name
            $class_name = GRN_WORKFLOW_TABLE_PETITION;
        } else {
            //Set Column Prefix
            switch ($class_name) {
                case GRN_WORKFLOW_TABLE_PETITION:
                    $column_prefix = "p";
                    break;
                case GRN_WORKFLOW_TABLE_ITEMDATA:
                    $column_prefix = "d";
                    break;
                case GRN_WORKFLOW_TABLE_ITEMDATAFILE:
                    $column_prefix = "f";
                    break;
                /*
                            case GRN_WORKFLOW_TABLE_PATHSTEPDATA:
                                $column_prefix = "s";
                                break;
                            case GRN_WORKFLOW_TABLE_PATHSTEPDATAUSER:
                                $column_prefix = "u";
                                break;
                */
            }
        }

        //Create Column Name List
        require_once('workflow/table.csp');
        $column_list = get_class_vars($class_name);
        foreach (array_keys($column_list) as $column_name) {
            if (strpos($column_name, 'col_') === 0) {
                if (is_null($column_prefix)) {
                    $column_name_list[] = $column_name;
                } elseif ($set_alias) {
                    $column_name_list[] = sprintf('%s.%s %s_%s', $column_prefix,
                        $column_name, $column_prefix, $column_name);
                } else {
                    $column_name_list[] = sprintf('%s.%s', $column_prefix,
                        $column_name);
                }
            }
        }
        if (is_null($column_prefix)) {
            $column_name_list[] = '_id';
        } elseif ($set_alias) {
            $column_name_list[] = sprintf('%s._id %s__id', $column_prefix,
                $column_prefix);
        } else {
            $column_name_list[] = sprintf('%s._id', $column_prefix);
        }

        return $column_name_list;
    }

    function _replaceSetNullColumn(
        & $column_list,
        & $join,
        $set_null,
        $table_alias
    ) {
        assert('is_array($column_list)');

        $join = "";
        if (is_array($set_null)) {
            foreach ($set_null as $key => $value) {
                $user_alias = "u_" . $key;
                $column_key = array_search($table_alias . "." . $value,
                    $column_list);
                if ($column_key !== false) {
                    $column_list[$column_key]
                        = sprintf('CASE WHEN %s.col_deleted IS NULL THEN %s.%s end AS %s',
                        $user_alias, $table_alias, $value, $value);
                    $join .= " LEFT JOIN tab_cb_user AS {$user_alias} ON {$table_alias}.{$value}={$user_alias}._id";
                }
            }
        }
    }

    function _replaceSetNullColumnWithAlias(
        & $column_list,
        & $join,
        $set_null,
        $table_alias
    ) {
        assert('is_array($column_list)');

        $join = "";
        if (is_array($set_null)) {
            foreach ($set_null as $key => $value) {
                $user_alias = "u_" . $key;
                $column = $table_alias . "." . $value;
                $alias = $table_alias . "_" . $value;
                $column_alias = $column . " " . $alias;

                $column_key = array_search($column_alias, $column_list);
                if ($key !== false) {
                    $column_list[$column_key]
                        = sprintf('CASE WHEN %s.col_deleted IS NULL THEN %s END AS %s',
                        $user_alias, $column, $alias);
                    $join .= " LEFT JOIN tab_cb_user AS {$user_alias} ON {$table_alias}.{$value}={$user_alias}._id";
                }
            }
        }

    }

    /**
     * Create Condition
     *
     * @param  array $condition_list //Condition List
     *
     * @return string $condition_string          //Condition String
     */
    function _createCondition($condition_list, $alias = "")
    {
        $condition_string = [];

        foreach (array_keys($condition_list) as $key) {
            $condition =& $condition_list[$key];

            //Check Column Type
            if (is_array($condition['column'])) {
                //Multi Column (OR)
                $temp = $condition;
                $condition_element_list = [];
                foreach ($condition['column'] as $column) {
                    $temp['column'] = $column;
                    $condition_element_list[]
                        = $this->_createConditionElement($temp,
                        $alias);
                }
                $condition_string[] = sprintf('(%s)',
                    implode(' OR ', $condition_element_list));

            } else {
                //Single Column
                $condition_string[] = $this->_createConditionElement($condition,
                    $alias);
            }
        }

        //Create Condition String (AND)
        if (count($condition_string) !== 0) {
            $condition_string = implode(' AND ', $condition_string);
        } else {
            $condition_string = null;
        }

        return $condition_string;
    }

    /**
     * Create Condition Element
     *
     * @param  array $condition //Condition Array
     *
     * @return string $condition_element         //Condition Element
     */
    function _createConditionElement($condition, $alias = "")
    {
        if (strlen($alias) > 0) {
            $alias .= ".";
        }

        $condition_element = '';

        //Get Database
        $database = $this->_getDatabase();

        //Check Condition Operator
        switch (strtoupper($condition['operator'])) {
            //Condition Type 'LIKE'
            case 'LIKE':
            case 'LIKE BINARY':
                $condition_element = cb_queryf($database,
                    $alias . '@S @S "%@L%"', $condition['column'],
                    $condition['operator'], $condition['value']);
                break;
            //Condition Type 'IN'
            case 'IN':
                if ( ! is_array($condition['value'])) {
                    $condition['value'][] = $condition['value'];
                }

                foreach (array_keys($condition['value']) as $key) {
                    $condition['value'][$key] = cb_queryf($database, '"@S"',
                        $condition['value'][$key]);
                }
                $in_value = implode(',', $condition['value']);
                $condition_element = cb_queryf($database,
                    $alias . "@S IN(${in_value})", $condition['column']);
                break;
            //Condition Type Other
            default:
                $condition_element = cb_queryf($database, $alias . '@S @S "@S"',
                    $condition['column'], $condition['operator'],
                    $condition['value']);
                break;
        }

        //Return Condition Element
        return $condition_element;
    }

    private function _createOrderByList($order_list, $alias = '')
    {
        if (strlen($alias) > 0) {
            $alias .= ".";
        }

        $order_by_string = [];

        //Get Database
        $database = $this->_getDatabase();

        //Create Order By Column
        $order_by = [];
        foreach (array_keys($order_list) as $key) {
            $order_by_string[] = cb_queryf($database, $alias . "@S @S",
                $order_list[$key]['column'], $order_list[$key]['order']);
        }
        if (count($order_by_string) !== 0) {
            return implode(',', $order_by_string);
        }

        return "";
    }

    /**
     * Create Select by List
     *
     * @param  array  $order_list
     * @param  string $alias
     *
     * @return string
     */
    private function _createSelectByList($order_list, $alias = '')
    {
        if (strlen($alias) > 0) {
            $alias .= ".";
        }

        $select_list = [];

        //Get Database
        $database = $this->_getDatabase();

        //Create Select By Column
        foreach (array_keys($order_list) as $key) {
            $select_list[] = cb_queryf($database, $alias . "@S",
                $order_list[$key]['column']);
        }
        if (count($select_list) !== 0) {
            return implode(',', $select_list);
        }

        return "";
    }

    /**
     * Create Order By
     *
     * @param  array $order_list //Order By List
     *
     * @return string $order_by_string           //Order By String
     */
    function _createOrderBy($order_list, $alias = "")
    {
        $orderByString = $this->_createOrderByList($order_list, $alias);
        if (count($orderByString) > 0) {
            return "ORDER BY " . $orderByString;
        }

        return "";
    }

    /**
     * Get Petition
     *
     * @param  int   $petition_id //Petition ID
     * @param  int   $form_id     //Form ID
     * @param  mixed $option      //Option (array('list'=>array('offset'=>'', 'limit'=>''), 'sort'=>array('column'=>'', 'order'=>''), 'condition'=>array('column'=>'', 'value'=>'', 'operator'=>''))
     * @param  array $column_list //Column List
     * @param  bool  $refresh     //Refresh Cache
     * @param  int   $lock_mode   //Lock Mode
     *
     * @return array  $petition                  //Petition Information Array
     */
    function &get(
        $petition_id,
        $form_id = null,
        $column_list = [],
        $option = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        if (count($column_list) > 0 && ! in_array('_id', $column_list)) {
            $column_list[] = '_id';
        }
        $option['condition'][] = [
            'column'   => '_id',
            'operator' => '=',
            'value'    => $petition_id
        ];
        //Get Petition List
        $petition_list =& $this->getList($form_id, $column_list, $option,
            $refresh, $lock_mode);

        //Get Petition
        if ( ! array_key_exists($petition_id, $petition_list)) {
            $ret = false;

            return $ret;
        }

        //Return Petition
        return $petition_list[$petition_id];
    }

    /**
     * Get Petition Direct
     *
     * @param  int   $petition_id //Petition ID
     * @param  array $column_list //Column List
     * @param  mixed $option      //Option ('condition'=>array('column'=>'', 'value'=>'', 'operator'=>''))
     * @param  int   $lock_mode   //Lock Mode
     *
     * @return array  $petition                  //Petition Information Array
     */
    function getDirect(
        $petition_id,
        $column_list = [],
        $option = [],
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $petition = [];

        //Get Database
        $database = $this->_getDatabase();

        //Create Column List
        $set_null = [
            'col_creator',
            'col_modifier',
            'col_agent_transactor',
            'col_agent_user',
            'col_transactor',
            'col_user'
        ];
        $join = null;
        $column_list = $this->_getColumnList(GRN_WORKFLOW_TABLE_PETITION,
            false);
        $this->_replaceSetNullColumn($column_list, $join, $set_null, "p");
        $column_list = implode(',', $column_list);

        //Create Condition
        $condition_list = [];
        $condition_list[] = cb_queryf($database, "p._id = '@S'", $petition_id);
        if (array_key_exists('condition', $option)) {
            $condition_list[] = $this->_createCondition($option['condition'],
                "p");
        }
        $condition = implode(' AND ', $condition_list);
        if ($condition) {
            $condition = ' WHERE ' . $condition;
        }

        //Create Query
        $query = sprintf('SELECT %s FROM %s AS p %s %s', $column_list,
            $this->_table_name, $join, $condition);
        $query = $database->select_format($query, 0, 1, $lock_mode);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Get Petition
        $petition = $database->fetch_assoc($result);
        $database->free_result($result);

        //Return Petition
        return $petition;
    }

    /**
     * Get Petition by Foreign Key
     *
     * @param  string $foreign_key //Foreign Key
     * @param  array  $column_list //Column List
     * @param  int    $lock_mode   //Lock Mode
     *
     * @return array  $petition                      //Petition Inpetitionation Array
     */
    function &getByForeignKey(
        $foreign_key,
        $column_list = [],
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Database
        $database =& $this->_getDatabase();

        //Create Column List
        $set_null = [
            'col_creator',
            'col_modifier',
            'col_agent_transactor',
            'col_agent_user',
            'col_transactor',
            'col_user'
        ];
        $join = null;
        $column_list = null;
        if (count($column_list) === 0) {
            $column_list = $this->_getColumnList(GRN_WORKFLOW_TABLE_PETITION,
                false);
        } else {
            foreach ($column_list as $key => $value) {
                $column_list[$key] = "p." . $value;
            }
        }
        $this->_replaceSetNullColumn($column_list, $join, $set_null, "p");
        $column_list = implode(',', $column_list);

        //Create Condition
        $condition_list = [];
        $condition_list[] = cb_queryf($database, 'p.col_foreign_key = "@S"',
            $foreign_key);
        $condition = implode(' AND ', $condition_list);
        if ($condition) {
            $condition = ' WHERE ' . $condition;
        }

        //Create Query
        $query = sprintf('SELECT %s FROM %s AS p %s %s', $column_list,
            $this->_table_name, $join, $condition);
        $query = $database->select_format($query, 0, -1, $lock_mode);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Update Petition List
        $count = $database->num_rows($result);
        $petition = $database->fetch_assoc($result);
        $database->free_result($result);

        return $petition;
    }

    /**
     * Get Petition(with Extra Information)
     *
     * @param  int   $petition_id //Petition ID
     * @param  int   $form_id     //Form ID
     * @param  array $column_list //Column List
     * @param  mixed $option      //Option (array('list'=>array('offset'=>'', 'limit'=>''), 'sort'=>array('column'=>'', 'order'=>''), 'condition'=>array('column'=>'', 'value'=>'', 'operator'=>''))
     * @param  bool  $refresh     //Refresh Cache
     * @param  int   $lock_mode   //Lock Mode
     *
     * @return array  $petition                  //Petition Information Array
     */
    function &getEx(
        $petition_id,
        $form_id = null,
        $column_list = [],
        $option = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Petition List
        $petition_list =& $this->getListEx($form_id, $column_list, $option,
            $refresh, $lock_mode);

        //Get Petition
        if ( ! array_key_exists($petition_id, $petition_list)) {
            $ret = false;

            return $ret;
        }

        //Return Petition
        return $petition_list[$petition_id];
    }

    /**
     * Get Petition List
     *
     * @param  int   $form_id     //Form ID
     * @param  array $column_list //Column List
     * @param  mixed $option      //Option (array('list'=>array('offset'=>'', 'limit'=>''), 'sort'=>array('column'=>'', 'order'=>''), 'condition'=>array('column'=>'', 'value'=>'', 'operator'=>''))
     * @param  bool  $refresh     //Refresh Cache
     * @param  int   $lock_mode   //Lock Mode
     *
     * @return array  $petition_list             //Petition Information List
     */
    function &getList(
        $form_id = null,
        $column_list = [],
        $option = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $petition_list = [];

        //Check Arguments
        $form_id = is_null($form_id) ? 0 : $form_id;

        //Check Option
        $refresh = count($option) !== 0 ? true : false;

        //Get Petition List From Cache
        $cached = false;
        if ( ! $refresh) {
            if (array_key_exists($form_id, $this->_list)) {
                if (is_array($this->_list[$form_id])) {
                    $petition_list =& $this->_list[$form_id];
                    $cached = true;
                }
            }
        } else {
            $this->_list[$form_id] = [];
        }

        //Get Petition List From Database
        if ( ! $cached || $refresh) {
            //Get Database
            $database = $this->_getDatabase();

            //Create Column List
            $set_null = [
                'col_creator',
                'col_modifier',
                'col_agent_transactor',
                'col_agent_user',
                'col_transactor',
                'col_user'
            ];
            $join = null;
            $column_list = null;
            if (count($column_list) === 0) {
                $column_list
                    = $this->_getColumnList(GRN_WORKFLOW_TABLE_PETITION, false);
            } else {
                foreach ($column_list as $key => $value) {
                    $column_list[$key] = "p." . $value;
                }
            }
            $this->_replaceSetNullColumn($column_list, $join, $set_null, "p");
            $column_list = implode(',', $column_list);

            //Create Condition
            $condition_list = [];
            if ($form_id == -1) {
                $condition_list[] = 'p.col_form IS NULL';
            } elseif ($form_id != 0) {
                $condition_list[] = cb_queryf($database, 'p.col_form = "@S"',
                    $form_id);
            }
            if (array_key_exists('condition', $option)) {
                $condition_list[]
                    = $this->_createCondition($option['condition'], "p");
            }
            $condition = implode(' AND ', $condition_list);
            if ($condition) {
                $condition = ' WHERE ' . $condition;
            }

            //Create Order By Column
            if (array_key_exists('sort', $option)) {
                $order_by = $this->_createOrderBy($option['sort']);
                $order_by = $order_by . ', p.col_list_index, p._id';
            } else {
                $order_by = 'ORDER BY p.col_list_index, p._id';
            }

            //Create Query
            $query
                = "SELECT {$column_list} FROM tab_grn_workflow_petition AS p {$join} {$condition} {$order_by}";
            if (array_key_exists('list', $option)) {
                $list =& $option['list'];
                $query = $database->select_format($query, $list['offset'],
                    $list['limit'], $lock_mode);
            } else {
                $query = $database->select_format($query, 0, -1, $lock_mode);
            }

            //Execute Query
            $result = $database->query($query);
            if ($result === false) {
                //Throw Query Error
                $database->throwError(['query' => 'query failed: ' . $query]);
            }

            //Update Petition List
            $count = $database->num_rows($result);
            for ($i = 0; $i < $count; $i++) {
                $row = $database->fetch_assoc($result);
                $this->_list[$form_id][$row['_id']] = $row;
            }
            $database->free_result($result);

            if ($count > 0) {
                $petition_list =& $this->_list[$form_id];
            }
        }

        //Return Petition List
        return $petition_list;
    }

    /**
     * Get Petition List(with Extra Information)
     *
     * @param  int   $form_id     //Form ID
     * @param  array $column_list //Column List
     * @param  mixed $option      //Option (array('list'=>array('offset'=>'', 'limit'=>''), 'sort'=>array('column'=>'', 'order'=>''), 'condition'=>array('column'=>'', 'value'=>'', 'operator'=>''))
     * @param  bool  $refresh     //Refresh Cache
     * @param  int   $lock_mode   //Lock Mode
     *
     * @return array  $petition_list             //Petition Information List
     */
    function &getListEx(
        $form_id = null,
        $column_list = [],
        $option = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $petition_list = [];
        //Check Arguments
        $form_id = is_null($form_id) ? 0 : $form_id;
        //Check Option
        $refresh = count($option) !== 0 ? true : false;

        //Get Petition List From Cache
        $cached = false;
        if ( ! $refresh) {
            if (array_key_exists($form_id, $this->_listEx)) {
                if (is_array($this->_listEx[$form_id])) {
                    $petition_list =& $this->_listEx[$form_id];
                    $cached = true;
                }
            }
        } else {
            $this->_listEx[$form_id] = [];
        }

        //Get Petition List From Database
        if ( ! $cached || $refresh) {
            //Get Database
            $database = $this->_getDatabase();
            //Create Column List
            $join_petition = "";
            if (count($column_list) === 0) {
                $set_null = [
                    'col_creator',
                    'col_modifier',
                    'col_agent_transactor',
                    'col_agent_user',
                    'col_transactor',
                    'col_user'
                ];
                $petition_column_list
                    = $this->_getColumnList(GRN_WORKFLOW_TABLE_PETITION);

                $this->_replaceSetNullColumnWithAlias($petition_column_list,
                    $join_petition, $set_null, "p");
                $item_data_column_list
                    = $this->_getColumnList(GRN_WORKFLOW_TABLE_ITEMDATA);
                $item_data_file_column_list
                    = $this->_getColumnList(GRN_WORKFLOW_TABLE_ITEMDATAFILE);
                $column_list = array_merge($petition_column_list,
                    $item_data_column_list, $item_data_file_column_list);
                $column_list = implode(',', $column_list);
            } else {
                $column_list = implode(',', $column_list);
            }

            //Create Table Name
            $table_name_petition
                = $this->_getTableName(GRN_WORKFLOW_TABLE_PETITION);
            $table_name_item_data
                = $this->_getTableName(GRN_WORKFLOW_TABLE_ITEMDATA);
            $table_name_item_data_file
                = $this->_getTableName(GRN_WORKFLOW_TABLE_ITEMDATAFILE);

            //Create Join
            $join_list = [];
            $join_list[] = sprintf('%s d ON p._id = d.col_petition',
                $table_name_item_data);
            $join_list[] = sprintf('%s f ON f.col_item_data = d._id',
                $table_name_item_data_file);
            $join = implode(' LEFT JOIN ', $join_list);
            if ($join) {
                $join = 'LEFT JOIN ' . $join;
            }
            $join .= $join_petition;

            //Create Condition
            $condition_list = [];
            if ($form_id == -1) {
                $condition_list[] = 'p.col_form IS NULL';
            } elseif ($form_id != 0) {
                $condition_list[] = cb_queryf($database, 'p.col_form = "@S"',
                    $form_id);
            }
            if (array_key_exists('condition', $option)) {
                $condition_list[]
                    = $this->_createCondition($option['condition']);
            }
            $condition = implode(' AND ', $condition_list);
            if ($condition) {
                $condition = ' WHERE ' . $condition;
            }

            //Create Order By Column
            if (array_key_exists('sort', $option)) {
                $order_by = $this->_createOrderBy($option['sort']);
                $order_by = $order_by
                            . ', p.col_list_index, p._id, d.col_list_index, d._id';
            } else {
                $order_by
                    = 'ORDER BY p.col_list_index, p._id, d.col_list_index, d._id';
            }

            //Create Query
            $query = sprintf('SELECT %s FROM %s p %s%s %s', $column_list,
                $this->_table_name, $join, $condition, $order_by);
            if (array_key_exists('list', $option)) {
                $list =& $option['list'];
                $query = $database->select_format($query, $list['offset'],
                    $list['limit'], $lock_mode);
            } else {
                $query = $database->select_format($query, 0, -1, $lock_mode);
            }
            //Execute Query
            $result = $database->query($query);
            if ($result === false) {
                //Throw Query Error
                $database->throwError(['query' => 'query failed: ' . $query]);
            }
            //Update Petition List
            $prev_petition_id = 0;
            $count = $database->num_rows($result);
            for ($i = 0; $i < $count; $i++) {
                $row = $database->fetch_assoc($result);
                if ($prev_petition_id != $row['p__id']) {
                    $this->_listEx[$form_id][$row['p__id']] = $row;
                    $this->_listEx[$form_id][$row['p__id']]['item_data'] = [];
                }
                $this->_listEx[$form_id][$row['p__id']]['item_data'][$i] = $row;
                $prev_petition_id
                    = $row['p__id'];
            }
            $database->free_result($result);

            if ($count > 0) {
                $petition_list =& $this->_listEx[$form_id];
            }
        }

        //Return Petition List
        return $petition_list;
    }

    /**
     * Get Petition List for csv export(with Extra Information)
     *
     * @param  int   $form_id     //Form ID
     * @param  array $column_list //Column List
     * @param  mixed $option      //Option (array('list'=>array('offset'=>'', 'limit'=>''), 'sort'=>array('column'=>'', 'order'=>''), 'condition'=>array('column'=>'', 'value'=>'', 'operator'=>''))
     * @param  int   $lock_mode   //Lock Mode
     *
     * @return array  $petition_list             //Petition Information List
     */
    function getListExForExport(
        $form_id = null,
        $column_list = [],
        $option = [],
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $petition_list = [];

        //Check Arguments
        $form_id = is_null($form_id) ? 0 : $form_id;

        //Get Petition List From Database
        $database = $this->_getDatabase();

        //Create Column List
        $join_petition = "";
        $set_null = [
            'col_creator',
            'col_modifier',
            'col_agent_transactor',
            'col_agent_user',
            'col_transactor',
            'col_user'
        ];
        if (count($column_list) === 0) {
            $petition_column_list
                = $this->_getColumnList(GRN_WORKFLOW_TABLE_PETITION);
            $this->_replaceSetNullColumnWithAlias($petition_column_list,
                $join_petition, $set_null, "p");
            $item_data_column_list
                = $this->_getColumnList(GRN_WORKFLOW_TABLE_ITEMDATA);
            $item_data_file_column_list
                = $this->_getColumnList(GRN_WORKFLOW_TABLE_ITEMDATAFILE);
            $column_list = array_merge($petition_column_list,
                $item_data_column_list, $item_data_file_column_list);
            $column_list = implode(',', $column_list);
        } else {
            $column_list = implode(',', $column_list);
        }

        //Create Table Name
        $table_name_item_data
            = $this->_getTableName(GRN_WORKFLOW_TABLE_ITEMDATA);
        $table_name_item_data_file
            = $this->_getTableName(GRN_WORKFLOW_TABLE_ITEMDATAFILE);

        //Create Join
        $join_list = [];
        $join_list[] = sprintf('%s d ON p._id = d.col_petition',
            $table_name_item_data);
        $join_list[] = sprintf('%s f ON f.col_item_data = d._id',
            $table_name_item_data_file);
        $join = implode(' LEFT JOIN ', $join_list);
        if ($join) {
            $join = 'LEFT JOIN ' . $join;
        }
        $join .= $join_petition;

        //Create Condition
        $condition_list = [];
        if ($form_id == -1) {
            $condition_list[] = 'p.col_form IS NULL';
        } elseif ($form_id != 0) {
            $condition_list[] = cb_queryf($database, 'p.col_form = "@S"',
                $form_id);
        }
        if (array_key_exists('condition', $option)) {
            $condition_list[] = $this->_createCondition($option['condition']);
        }
        $condition = implode(' AND ', $condition_list);
        if ($condition) {
            $condition = ' WHERE ' . $condition;
        }

        //Create Order By Column
        if (array_key_exists('sort', $option)) {
            $order_by = $this->_createOrderBy($option['sort']);
            $order_by = $order_by
                        . ', p.col_list_index, p._id, d.col_list_index, d._id';
        } else {
            $order_by
                = 'ORDER BY p.col_list_index, p._id, d.col_list_index, d._id';
        }

        //Create Query
        $query = sprintf('SELECT %s FROM %s p %s%s %s', $column_list,
            $this->_table_name, $join, $condition, $order_by);
        if (array_key_exists('list', $option)) {
            $list =& $option['list'];
            $query = $database->select_format($query, $list['offset'],
                $list['limit'], $lock_mode);
        } else {
            $query = $database->select_format($query, 0, -1, $lock_mode);
        }
        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }
        //Update Petition List
        $prev_petition_id = 0;
        $petition_data_result = [];
        $item_data_result = [];
        while ($row = $database->fetch_assoc($result)) {
            foreach ($row as $row_array_key => $row_array_value) {
                if (strpos($row_array_key, 'p_') === 0) {
                    $petition_data_result[$row_array_key] = $row_array_value;
                } else {
                    $item_data_result[$row_array_key] = $row_array_value;
                }
            }
            if ($prev_petition_id != $row['p__id']) {
                $petition_list[$row['p__id']] = $petition_data_result;
                $petition_list[$row['p__id']]['item_data'] = [];
            }
            $petition_list[$row['p__id']]['item_data'][] = $item_data_result;
            $prev_petition_id = $row['p__id'];
        }

        $database->free_result($result);

        //Return Petition List
        return $petition_list;
    }

    /**
     * Get Petition ID List(with Extra Information)
     *
     * @param  int   $form_id   //Form ID
     * @param  mixed $option    //Option (array('list'=>array('offset'=>'', 'limit'=>''), 'sort'=>array('column'=>'', 'order'=>''), 'condition'=>array('column'=>'', 'value'=>'', 'operator'=>''))
     * @param  bool  $refresh   //Refresh Cache
     * @param  int   $lock_mode //Lock Mode
     *
     * @return array  $petition_list             //Petition Information List
     */
    function getIdListEx(
        $form_id = null,
        $option = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $petition_id_list = [];

        //Get Database
        $database = $this->_getDatabase();

        //Create Condition
        $condition_list = [];
        if ($form_id == -1) {
            $condition_list[] = 'p.col_form IS NULL';
        } elseif ($form_id != 0) {
            $condition_list[] = cb_queryf($database, 'p.col_form = "@S"',
                $form_id);
        }
        if (array_key_exists('condition', $option)) {
            $condition_list[] = $this->_createCondition($option['condition']);
        }
        $condition = implode(' AND ', $condition_list);

        $select_item = isset($option['sort'])
            ? $this->_createSelectByList($option['sort']) : '';
        $select_query = '';
        if (strlen($select_item) > 0) {
            $select_query .= $select_item . ', ';
        }
        $select_query .= "p.col_list_index, p._id";

        //Create Query
        $query = "SELECT DISTINCT {$select_query} "
                 . "FROM "
                 . "tab_grn_workflow_petition p "
                 . "LEFT JOIN tab_grn_workflow_itemdata d ON p._id = d.col_petition "
                 . "LEFT JOIN tab_grn_workflow_itemdatafile f ON f.col_item_data = d._id "
                 . "LEFT JOIN tab_cb_user pu ON pu._id = p.col_user";
        if ($condition) {
            $query .= " WHERE " . $condition;
        }

        $order_by = isset($option['sort'])
            ? $this->_createOrderByList($option['sort']) : '';
        $query .= " ORDER BY {$order_by}";
        if (strlen($order_by) > 0) {
            $query .= ", ";
        }
        $query .= "p.col_list_index, p._id";

        if (array_key_exists('list', $option)) {
            $query = $database->select_format($query, $option['list']['offset'],
                $option['list']['limit'], $lock_mode);
        } else {
            $query = $database->select_format($query, 0, -1, $lock_mode);
        }
        //return $query;///////////////////////////////////////////////////////////////////////////////////////////
        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Update Petition List
        $prev_petition_id = 0;
        $count = $database->num_rows($result);
        for ($i = 0; $i < $count; $i++) {
            $row = $database->fetch_assoc($result);
            $petition_id_list[] = $row['_id'];
        }
        $database->free_result($result);

        //Return Petition ID List
        return $petition_id_list;
    }

    /**
     * Get Petition Count
     *
     * @param  int   $form_id   //Form ID
     * @param  mixed $option    //Option (array('condition'=>array('column'=>'', 'value'=>'', 'operator'=>''))
     * @param  bool  $refresh   //Refresh Cache
     * @param  int   $lock_mode //Lock Mode
     *
     * @return int    $petition_count            //Petition Count
     */
    function getCount(
        $form_id = null,
        $option = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Database
        $database = $this->_getDatabase();

        //Create Condition
        $condition_list = [];
        if ( ! is_null($form_id)) {
            $condition_list[] = cb_queryf($database, 'col_form = "@S"',
                $form_id);
        }
        if (array_key_exists('condition', $option)) {
            $condition_list[] = $this->_createCondition($option['condition']);
        }
        $condition = implode(' AND ', $condition_list);
        if ($condition) {
            $condition = ' WHERE ' . $condition;
        }

        //Create Query
        $query = sprintf('SELECT COUNT(*) FROM %s%s', $this->_table_name,
            $condition);
        $query = $database->select_format($query, 0, -1, $lock_mode);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }
        $row = $database->fetch_assoc($result);
        $database->free_result($result);

        //Return Petition Count
        return $row['COUNT(*)'];
    }

    /**
     * Get Petition Count
     *
     * @param  int   $form_id   //Form ID
     * @param  mixed $option    //Option (array('condition'=>array('column'=>'', 'value'=>'', 'operator'=>''))
     * @param  bool  $refresh   //Refresh Cache
     * @param  int   $lock_mode //Lock Mode
     *
     * @return int    $petition_count            //Petition Count
     */
    function getCountEx(
        $form_id = null,
        $option = [],
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Database
        $database =& $this->_getDatabase();

        //Create Condition
        $condition_list = [];
        if ($form_id == -1) {
            $condition_list[] = 'p.col_form IS NULL';
        } elseif ($form_id != 0) {
            $condition_list[] = cb_queryf($database, 'p.col_form = "@S"',
                $form_id);
        }
        if (array_key_exists('condition', $option)) {
            $condition_list[] = $this->_createCondition($option['condition']);
        }
        $condition = implode(' AND ', $condition_list);
        if ($condition) {
            $condition = ' WHERE ' . $condition;
        }

        //Create Query
        $query = "SELECT "
                 . "COUNT(DISTINCT(p._id)) COUNT "
                 . "FROM "
                 . "tab_grn_workflow_petition p "
                 . "LEFT JOIN tab_grn_workflow_itemdata d ON p._id = d.col_petition "
                 . "LEFT JOIN tab_grn_workflow_itemdatafile f ON f.col_item_data = d._id "
                 . "LEFT JOIN tab_cb_user pu ON pu._id = p.col_user "
                 . "{$condition}";
        $query = $database->select_format($query, 0, -1, $lock_mode);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }
        $row = $database->fetch_assoc($result);
        $database->free_result($result);


        //Return Petition Count
        return $row['COUNT'];
    }
}


