<?php
/**
 * Workflow Application Folder Class
 *
 * @author  SHIMADA Kunihiko 2006/1
 * @version 1.0
 * @package grn.workflow
 */

/** Workflow Application **/
require_once('workflow/resources.csp');
require_once('workflow/folder_manager_base.csp');

/**
 * Folder Manager Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_Folder_Manager extends GRN_Workflow_Folder_Manager_Base
{
    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {
        //Get Parent Instance
        $parent = parent::getInstance();

        //Sync Parent Table and Folder List Cache
        $this->_table_name =& $parent->_table_name;
        $this->_list =& $parent->_list;
    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_Folder_Manager $instance                  //Instance of GRN_Workflow_Folder_Manager
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_Folder_Manager();
        }

        return $_instance;
    }

    /**
     * Create Folder
     *
     * @param  array $property_list //Property List(Name=>Value)
     *
     * @return string $folder_id                //Folder ID
     */
    function create($property_list)
    {
        //Get Database
        $database = $this->_getDatabase();

        //Create Column List
        $column_list = $this->_getColumnList();

        //Create Query
        $insert_list = [];
        foreach ($column_list as $column) {
            if ($column == '_id') {
                continue;
            }

            if (array_key_exists($column, $property_list)) {
                if ($column == GRN_WORKFLOW_COLUMN_CATEGORY
                    && $property_list[GRN_WORKFLOW_COLUMN_CATEGORY] == -1
                ) {
                    $insert_list[$column] = 'null';
                } else {
                    $insert_list[$column] = cb_queryf($database, '"@S"',
                        $property_list[$column]);
                }
            }
        }
        $column_string = implode(', ', array_keys($insert_list));
        $value_string = implode(', ', $insert_list);
        $query = sprintf('INSERT %s(%s) VALUES (%s)',
            $this->_table_name, $column_string, $value_string);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Return Folder ID
        $folder_id = $database->get_insert_id();

        return $folder_id;
    }

    /**
     * Update Folder
     *
     * @param  int   $user_id       //User ID
     * @param  array $folder_id     //Folder ID
     * @param  array $property_list //Property List(Name=>Value)
     *
     * @return array $folder_id                 //Folder ID
     */
    function update($user_id, $folder_id, $property_list)
    {
        //Check ID
        cb_trim_check($user_id,
            E_GRN_WRKF_FOLDER_INVALID_USER_ID);     //User ID
        cb_trim_check($folder_id,
            E_GRN_WRKF_FOLDER_INVALID_FOLDER_ID); //Folder ID

        //Get Database
        $database =& $this->_getDatabase();

        //Create Column List
        $column_list = $this->_getColumnList();

        //Create Query
        $update_list = [];
        foreach ($column_list as $column) {
            if ($column == '_id') {
                continue;
            }

            if (array_key_exists($column, $property_list)) {
                $update_list[$column] = cb_queryf($database, '@S = "@S"',
                    $column, $property_list[$column]);
            }
        }
        $update_string = implode(', ', $update_list);
        $where[] = cb_queryf($database, '_id = "@S"', $folder_id);
        $where[] = cb_queryf($database,
            sprintf('%s = "@S"', GRN_WORKFLOW_COLUMN_USER), $user_id);
        $where_string = implode(' AND ', $where);

        $query = sprintf('UPDATE %s SET %s WHERE %s', $this->_table_name,
            $update_string, $where_string);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Return Folder ID
        return $folder_id;
    }

    /**
     * Remove Folder
     *
     * @param int  $user_id   //User ID
     * @param int  $folder_id //Folder ID
     * @param BOOL $result    //Result
     */
    function remove($user_id, $folder_id)
    {
        //Get Database
        $database =& $this->_getDatabase();

        //Create Column List
        $column_list = implode(',', $this->_getColumnList());

        //Create Query
        $where = [];
        $where[] = cb_queryf($database, '_id = "@S"', $folder_id);
        $where[] = cb_queryf($database,
            sprintf('%s = "@S"', GRN_WORKFLOW_COLUMN_USER), $user_id);
        $where_string = implode(' AND ', $where);

        $query = sprintf('DELETE FROM %s WHERE %s', $this->_table_name,
            $where_string);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Delete From Folder List
        foreach (array_keys($this->_list) as $key) {
            if (in_array($folder_id, $this->_list[$key])) {
                unset($this->_list[$key][$folder_id]);
            }
        }

        return true;
    }

    /**
     * Remove Multiple Folder
     *
     * @param int   $user_id        //User ID
     * @param array $folder_id_list //Folder ID List
     * @param BOOL  $result         //Result
     */
    function removeMulti($user_id, $folder_id_list)
    {
        //Check User ID
        cb_trim_check($user_id,
            E_GRN_WRKF_FOLDER_INVALID_USER_ID);      //User ID

        //Get Database
        $database =& $this->_getDatabase();

        //Create Column List
        $column_list = implode(',', $this->_getColumnList());

        //Create Query
        $escape_fids = [];
        foreach ($folder_id_list as $fid) {
            $fid = cb_queryf($database, '"@S"', $fid);
            $escape_fids[$fid] = $fid;
        }
        $folder_id_string = implode(',', $escape_fids);
        $where[] = sprintf('_id IN(%s)', $folder_id_string);
        $where[] = cb_queryf($database,
            sprintf('%s = "@S"', GRN_WORKFLOW_COLUMN_USER), $user_id);
        $where_string = implode(' AND ', $where);

        $query = sprintf('DELETE FROM %s WHERE %s', $this->_table_name,
            $where_string);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Delete From Folder List
        $folder_id = current($folder_id_list);
        foreach (array_keys($this->_list) as $key) {
            if (in_array($folder_id, $this->_list[$key])) {
                foreach ($folder_id_list as $folder_id) {
                    unset($this->_list[$key][$folder_id]);
                }
            }
        }

        return true;
    }

    /**
     * Remove All Folder
     *
     * @param int  $user_id //User ID
     * @param BOOL $result  //Result
     */
    function removeAll($user_id)
    {
        //Check User ID
        cb_trim_check($user_id,
            E_GRN_WRKF_FOLDER_INVALID_USER_ID);      //User ID

        //Get Database
        $database =& $this->_getDatabase();

        //Create Column List
        $column_list = implode(',', $this->_getColumnList());

        //Create Query
        $where_string = cb_queryf($database,
            sprintf('%s = "@S"', GRN_WORKFLOW_COLUMN_USER), $user_id);

        $query = sprintf('DELETE FROM %s WHERE %s', $this->_table_name,
            $where_string);

        //Execute Query
        $result = $database->query($query);
        if ($result === false) {
            //Throw Query Error
            $database->throwError(['query' => 'query failed: ' . $query]);
        }

        //Delete From Folder List
        unset($this->_list[$user_id]);

        return true;
    }

    /**
     * Change Folder Order
     *
     * @param  int $user_id        //User ID
     * @param  int $folder_id_list //Folder ID List
     *
     * @return BOOL   $result                       //Result
     */
    function changeOrder($user_id, $folder_id_list)
    {
        //Check User ID
        cb_trim_check($user_id,
            E_GRN_WRKF_FOLDER_INVALID_USER_ID);      //User ID

        //Set New List Index
        $list_index = 0;
        $property_list = [];
        foreach ($folder_id_list as $folder_id) {
            $property_list[GRN_WORKFLOW_COLUMN_LIST_INDEX] = $list_index;
            $this->update($user_id, $folder_id, $property_list);
            $list_index++;
        }

        return true;
    }
}


