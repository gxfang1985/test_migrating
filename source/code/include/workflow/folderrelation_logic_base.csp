<?php
/**
 * Workflow Application Folder Relation Base Class
 *
 * @author  SHIMADA Kunihiko 2006/1
 * @version 1.0
 * @package grn.workflow
 */

/** Workflow Application **/
require_once('workflow/resources.csp');
require_once('grn/application.csp');

/**
 * Folder Relation Logic Base Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_FolderRelation_Logic_Base
{
    //Folder Relation Manager Base Instance
    var $_folder_relation_manager_base = null;

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {

    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_FolderRelation_Logic_Base $instance             //Instance of GRN_Workflow_FolderRelation_Logic_Base
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_FolderRelation_Logic_Base();
        }

        return $_instance;
    }

    /**
     * Get Folder Relation Manager Base
     *
     * @return object $folder_relation_manager_base     //Folder Relation Manager Base
     */
    function _getFolderRelationManagerBase()
    {
        if (is_null($this->_folder_relation_manager_base)) {
            require_once('workflow/folderrelation_manager_base.csp');
            $this->_folder_relation_manager_base
                = GRN_Workflow_FolderRelation_Manager_Base::getInstance();
        }

        return $this->_folder_relation_manager_base;
    }

    /**
     * Get Folder Relation
     *
     * @param  int  $folder_relation_id //Folder Relation ID
     * @param  int  $folder_id          //Folder ID
     * @param  bool $refresh            //Refresh Cache
     * @param  int  $lock_mode          //Lock Mode
     *
     * @return array  $folder_relation              //Folder Relation Information Array
     */
    function &get(
        $folder_relation_id,
        $folder_id = null,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($folder_relation_id,
            E_GRN_WRKF_FOLDER_INVALID_FOLDERRELATION_ID);   //Folder Relation ID

        //Get Folder Relation 
        $folder_relation_manager_base =& $this->_getFolderRelationManagerBase();
        $folder_relation
            =& $folder_relation_manager_base->get($folder_relation_id,
            $folder_id, $refresh, $lock_mode);
        if ( ! $folder_relation) {
            //Folder Relation Not Found
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_FOLDER_FOLDERRELATION_NOT_FOUND);
        }

        //Return Folder Relation
        return $folder_relation;
    }

    /**
     * Get Folder Relation(with Extra Information)
     *
     * @param  int  $folder_relation_id //Folder Relation ID
     * @param  int  $folder_id          //Folder ID
     * @param  bool $refresh            //Refresh Cache
     * @param  int  $lock_mode          //Lock Mode
     *
     * @return array  $folder_relation              //Folder Relation Information Array
     */
    function &getEx(
        $folder_relation_id,
        $folder_id = null,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($folder_relation_id,
            E_GRN_WRKF_FOLDER_INVALID_FOLDERRELATION_ID);    //Folder Relation ID

        //Get Folder Relation 
        $folder_relation_manager_base =& $this->_getFolderRelationManagerBase();
        $folder_relation
            =& $folder_relation_manager_base->getEx($folder_relation_id,
            $folder_id, $refresh, $lock_mode);
        if ( ! $folder_relation) {
            //Folder Relation Not Found
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_FOLDER_FOLDERRELATION_NOT_FOUND);
        }

        //Return Folder Relation
        return $folder_relation;
    }

    /**
     * Get Folder Relation List
     *
     * @param  int  $folder_id //Folder ID
     * @param  int  $offset    //Offset
     * @param  int  $limit     //Limit
     * @param  bool $refresh   //Refresh Cache
     * @param  int  $lock_mode //Lock Mode
     *
     * @return array  $folder_relation_list         //Folder Relation Information List
     */
    function &getList(
        $folder_id,
        $offset = 0,
        $limit = -1,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($folder_id,
            E_GRN_WRKF_FOLDER_INVALID_FOLDER_ID);   //Folder ID

        //Get Folder Relation List
        $folder_relation_manager_base =& $this->_getFolderRelationManagerBase();
        $folder_relation_list
            =& $folder_relation_manager_base->getList($folder_id,
            $offset, $limit, $refresh, $lock_mode);

        //Return Folder Relation List
        return $folder_relation_list;
    }

    /**
     * Get Folder Relation List(with Extra Information)
     *
     * @param  int  $folder_id //Folder ID
     * @param  int  $offset    //Offset
     * @param  int  $limit     //Limit
     * @param  bool $refresh   //Refresh Cache
     * @param  int  $lock_mode //Lock Mode
     *
     * @return array  $folder_relation_list         //Folder Relation Information List
     */
    function &getListEx(
        $folder_id,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($folder_id,
            E_GRN_WRKF_FOLDER_INVALID_FOLDER_ID);   //Folder ID

        //Get Folder Relation List
        $folder_relation_manager_base =& $this->_getFolderRelationManagerBase();
        $folder_relation_list
            =& $folder_relation_manager_base->getListEx($folder_id,
            $offset, $limit, $refresh, $lock_mode);

        //Return Folder Relation List
        return $folder_relation_list;
    }

    /**
     * Get Folder Relation By Petition ID
     *
     * @param  array $petition_id_list //Petition ID List
     * @param  int   $folder_id        //Folder ID
     * @param  int   $offset           //Offset
     * @param  int   $limit            //Limit
     * @param  int   $lock_mode        //Lock Mode
     *
     * @return array  $folder_relation_list     //Folder Relation Information List
     */
    function &getListByPetitionID(
        $petition_id_list,
        $folder_id = null,
        $offset = 0,
        $limit = -1,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get Folder Relation 
        $folder_relation_manager_base = $this->_getFolderRelationManagerBase();
        $folder_relation_list
            =& $folder_relation_manager_base->getListByPetitionID($petition_id_list,
            $folder_id, $offset, $limit, $lock_mode);

        //Return Folder Relation
        return $folder_relation_list;
    }

    /**
     * Get Folder Relation Count
     *
     * @param  int  $folder_id //Folder ID
     * @param  bool $refresh   //Refresh Cache
     * @param  int  $lock_mode //Lock Mode
     *
     * @return int    $folder_relation_count        //Folder Relation Count
     */
    function getCount(
        $folder_id,
        $refresh = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($folder_id,
            E_GRN_WRKF_FOLDER_INVALID_FOLDER_ID);   //Folder ID

        //Get Folder Relation List
        $folder_relation_manager_base =& $this->_getFolderRelationManagerBase();
        $folder_relation_count
            = $folder_relation_manager_base->getCount($folder_id,
            $refresh, $lock_mode);

        //Return Folder Relation Count
        return $folder_relation_count;
    }

    // テスト用
    function getTestSpecificList($folder_id, $lock = CB_DATABASE_DEFAULT_LOCK)
    {
        $columns
            = 'a.col_name AS col_name,b._id AS _id,b.col_folder AS col_folder,b.col_petition AS col_petition';
        $from
            = 'tab_grn_workflow_petition AS a LEFT JOIN tab_grn_workflow_folderrelation AS b ON a._id=b.col_petition';

        $app_locator = GRN_ApplicationLocator::instance();
        $dbconn =& $app_locator->getConnection('workflow');

        $condition = cb_queryf($dbconn, "b.col_folder='@S'", $folder_id);
        $query = "SELECT {$columns} FROM {$from} WHERE ({$condition})";
        $query = $dbconn->select_format($query, 0, -1, $lock);
        if (false === ($result = $dbconn->query($query))) {
            $dbconn->throwError(['query' => "failed query on SELECT: {$query}"]);
        }

        $rows = [];
        while ($row = $dbconn->fetch_assoc($result)) {
            $rows[$row['_id']] = $row;
        }

        return $rows;
    }

}


