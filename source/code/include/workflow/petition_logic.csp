<?php
/**
 * Workflow Application Petition Class
 *
 * @author  Yuichi, Nakamura 2006/01
 * @version 1.0
 * @package grn.workflow
 */

/** Workflow Application **/
require_once('workflow/resources.csp');
require_once('workflow/petition_logic_base.csp');

/**
 * Petition Manager Class
 *
 * @package grn.workflow
 */
class GRN_Workflow_Petition_Logic extends GRN_Workflow_Petition_Logic_Base
{
    //Petition Manager Instance
    var $_petition_manager = null;

    /**
     * Constructor
     *
     * @return GRN_Workflow_Petition_Logic
     */
    function __construct()
    {

    }

    /**
     * Get Instance
     *
     * @return GRN_Workflow_Petition_Logic $instance                  //Instance of GRN_Workflow_Petition_Logic
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Workflow_Petition_Logic();
        }

        return $_instance;
    }

    /**
     * Get Petition Logic
     *
     * @return GRN_Workflow_Petition_Manager $petition_manager          //Petition Manager
     */
    function _getPetitionManager()
    {
        if (is_null($this->_petition_manager)) {
            require_once('workflow/petition_manager.csp');
            $this->_petition_manager
                = GRN_Workflow_Petition_Manager::getInstance();
        }

        return $this->_petition_manager;
    }

    /**
     * get Login User
     *
     * @access private
     * @return object $login_user                //Login User
     */
    function _getLoginUser()
    {
        //Get UUM Instance
        global $G_container_base;
        $grn_uum = $G_container_base->getInstance('uum');

        //Get Login User
        $login_user = $grn_uum->getLoginUser();
        if ( ! $login_user) {
            $ret = false;

            return $ret;
        }

        //Return Login User
        return $login_user;
    }

    /**
     * get User
     *
     * @access private
     *
     * @param $uid
     *
     * @return object $user                //User
     */
    function _getUser($uid)
    {
        //Get UUM Instance
        global $G_container_base;
        $grn_uum = $G_container_base->getInstance('uum');

        //Get User
        $user = $grn_uum->getUser($uid);
        if ( ! $user) {
            $ret = false;

            return $ret;
        }

        //Return User
        return $user;
    }

    /**
     * Set Creator
     *
     * @access private
     *
     * @param  array $property_list //Property List
     *
     * @return bool   $result                    //Result
     */
    function _setCreator(&$property_list)
    {
        //Check Argument
        if ( ! is_array($property_list)) {
            return false;
        }

        // Get Login User
        $login_user = $this->_getLoginUser();

        //Get Create Time
        $ctime = time();

        //Set Create Infomation
        if ($login_user) {
            $user_id = $login_user->getOID();
            $display_name
                = $login_user->get('display_name');
            $foreign_key
                = $login_user->get('foreign_key');
            $property_list[GRN_WORKFLOW_COLUMN_CREATOR]
                = $user_id;         //Creator
            $property_list[GRN_WORKFLOW_COLUMN_CREATOR_NAME]
                = $display_name;    //Creator Name
            $property_list[GRN_WORKFLOW_COLUMN_CREATOR_FOREIGN_KEY]
                = $foreign_key;     //Creator Foreign Key
            $property_list[GRN_WORKFLOW_COLUMN_MODIFIER]
                = $user_id;         //Modifier
            $property_list[GRN_WORKFLOW_COLUMN_MODIFIER_NAME]
                = $display_name;    //Modifier Name
            $property_list[GRN_WORKFLOW_COLUMN_MODIFIER_FOREIGN_KEY]
                = $foreign_key;     //Modifier Foreign Key
        }
        $property_list[GRN_WORKFLOW_COLUMN_CTIME] = $ctime;   //Create Time
        $property_list[GRN_WORKFLOW_COLUMN_MTIME] = $ctime;   //Modify Time

        return true;
    }

    /**
     * Set Modofier
     *
     * @access private
     *
     * @param  array $property_list //Property List
     *
     * @return bool   $result                    //Result
     */
    function _setModifier(&$property_list)
    {
        //Check Argument
        if ( ! is_array($property_list)) {
            return false;
        }

        // Get Login User
        $login_user =& $this->_getLoginUser();

        //Get Modofy Time
        $mtime = time();

        //Set Modify Infomation/
        if ($login_user) {
            $user_id = $login_user->getOID();
            $display_name
                = $login_user->get('display_name');
            $foreign_key
                = $login_user->get('foreign_key');
            $property_list[GRN_WORKFLOW_COLUMN_MODIFIER]
                = $user_id;         //Modifier
            $property_list[GRN_WORKFLOW_COLUMN_MODIFIER_NAME]
                = $display_name;    //Modifier Name
            $property_list[GRN_WORKFLOW_COLUMN_MODIFIER_FOREIGN_KEY]
                = $foreign_key;     //Modifier Foreign Key
        }
        $property_list[GRN_WORKFLOW_COLUMN_MTIME] = $mtime;   //Modify Time

        return true;
    }

    /**
     * Set User
     *
     * @access private
     *
     * @param  array $property_list //Property List
     *
     * @return bool   $result                    //Result
     */
    function _setUser(& $property_list)
    {
        //Check Argument
        if ( ! is_array($property_list)) {
            return false;
        }

        $user = null;
        if (array_key_exists(GRN_WORKFLOW_COLUMN_USER, $property_list)) {
            if (is_null($property_list[GRN_WORKFLOW_COLUMN_USER])
                || strlen($property_list[GRN_WORKFLOW_COLUMN_USER]) <= 0
            ) {
                // Get Login User
                $user =& $this->_getLoginUser();
            } else {
                $user
                    =& $this->_getUser($property_list[GRN_WORKFLOW_COLUMN_USER]);
            }
        } else {
            // Get Login User
            $user = $this->_getLoginUser();
        }

        //Set Modify Infomation/
        if ($user) {
            $user_id = $user->getOID();
            $display_name
                = $user->get('display_name');
            $foreign_key
                = $user->get('foreign_key');
            $property_list[GRN_WORKFLOW_COLUMN_USER]
                = $user_id;         //User
            $property_list[GRN_WORKFLOW_COLUMN_USER_NAME]
                = $display_name;    //User Name
            $property_list[GRN_WORKFLOW_COLUMN_USER_FOREIGN_KEY]
                = $foreign_key;     //User Foreign Key
        }

        return true;
    }

    /**
     * Set Mandator User
     *
     * @access private
     *
     * @param  array $property_list //Property List
     *
     * @return bool   $result                    //Result
     */
    function _setAgentUser(& $property_list)
    {
        //Check Argument
        if ( ! is_array($property_list)) {
            return false;
        }

        if (array_key_exists(GRN_WORKFLOW_COLUMN_AGENT_USER, $property_list)) {
            if (is_null($property_list[GRN_WORKFLOW_COLUMN_AGENT_USER])
                || strlen($property_list[GRN_WORKFLOW_COLUMN_AGENT_USER]) <= 0
            ) {
                return true;
            }
        } else {
            return true;
        }

        // Get Login User
        $user
            =& $this->_getUser($property_list[GRN_WORKFLOW_COLUMN_AGENT_USER]);
        if ( ! $user) {
            return false;
        }

        //Set Modify Infomation/
        if ($user) {
            $user_id = $user->getOID();
            $display_name
                = $user->get('display_name');
            $foreign_key
                = $user->get('foreign_key');
            $property_list[GRN_WORKFLOW_COLUMN_AGENT_USER]
                = $user_id;         //User
            $property_list[GRN_WORKFLOW_COLUMN_AGENT_USER_NAME]
                = $display_name;    //User Name
            $property_list[GRN_WORKFLOW_COLUMN_AGENT_USER_FOREIGN_KEY]
                = $foreign_key;     //User Foreign Key
        }

        return true;
    }

    /**
     * Set Form
     *
     * @access private
     *
     * @param  array $form          //Form Information
     * @param  array $property_list //Property List
     *
     * @return bool   $result                    //Result
     */
    function _setForm(& $form, & $property_list)
    {
        //Check Argument
        if ( ! is_array($form) || ! is_array($property_list)) {
            return false;
        }

        //Define Not Set Column
        $set_column_key_list = [
            'icon_type',        //Form Icon Type
            'icon_id',          //Form Icon ID
            'icon_url',         //Form Icon URL
            'serial_type',      //Form Serial Type
            'serial_format',    //Form Serial Format
            'serial_number',    //Form Serial Number
        ];

        //Set Form Value
        foreach ($set_column_key_list as $set_column_key) {
            //Set Property List
            $column_value =& $form[$set_column_key];
            $property_list['col_' . $set_column_key] = $column_value;
        }

        return true;
    }

    /**
     * Add Petition
     *
     * @param $form
     * @param $properties
     *
     * @return array $petition_id               //Petition ID
     */
    function add(& $form, & $properties)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');

        //Check Form Exists
        $column_list = ['_id'];
        require_once('workflow/form_logic_base.csp');
        $form_logic_base = GRN_Workflow_Form_Logic_Base::getInstance();
        $form_info = $form_logic_base->getDirect($form['fid'],
            $column_list);

        //Create Property List
        $property_list = [];
        //check halfwidth and fullwidth space
        $form['subject'] = $this->_changeHalfToFullWidthSpace($form['subject']);
        $property_list[GRN_WORKFLOW_COLUMN_NAME]
            = $form['subject'];
        $property_list[GRN_WORKFLOW_COLUMN_FORM] = $form['fid'];
        $property_list[GRN_WORKFLOW_COLUMN_FORM_NAME] = $form['name'];
        $property_list[GRN_WORKFLOW_COLUMN_FORM_FOREIGN_KEY]
            = $form['foreign_key'];
        $property_list[GRN_WORKFLOW_COLUMN_AUTO_EXPORT]
            = $form['auto_export'];
        $property_list[GRN_WORKFLOW_COLUMN_EXPORT_FOLDER]
            = $form['export_folder'];
        $property_list[GRN_WORKFLOW_COLUMN_LOGIN_NAME_EXPORT]
            = $form['login_name_export'];
        $property_list[GRN_WORKFLOW_COLUMN_EXPORT_TOP_LINE]
            = $form['export_top_line'];
        $property_list[GRN_WORKFLOW_COLUMN_STATUS]
            = GRN_WORKFLOW_STATUS_UNPROCESSING;
        $property_list[GRN_WORKFLOW_COLUMN_PRIORITY]
            = array_key_exists('priority',
            $properties) ? $properties['priority'] : '';

        if (array_key_exists('petition_user', $properties)) {
            $property_list[GRN_WORKFLOW_COLUMN_USER]
                = $properties['petition_user'];
        }
        if (array_key_exists('agent_user', $properties)) {
            $property_list[GRN_WORKFLOW_COLUMN_AGENT_USER]
                = $properties['agent_user'];
        }

        //Set Form
        $this->_setForm($form, $property_list);

        //Set User
        $this->_setUser($property_list);

        //Set Agent User
        $this->_setAgentUser($property_list);

        //Set Creator
        $this->_setCreator($property_list);

        //Create New Petition
        $petition_manager = $this->_getPetitionManager();
        $petition_id = $petition_manager->create($property_list);

        return $petition_id;
    }

    /**
     * Modify Petition
     *
     * @param      $petition_id
     * @param      $form
     * @param      $properties
     * @param bool $refresh_ctime
     *
     * @return array $petition_id               //Petition ID
     */
    function modify(
        $petition_id,
        & $form,
        & $properties,
        $refresh_ctime = false
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');

        //Create Property List
        $property_list = [];
        //check halfwidth and fullwidth space
        $form['subject'] = $this->_changeHalfToFullWidthSpace($form['subject']);
        $property_list[GRN_WORKFLOW_COLUMN_NAME]
            = $form['subject'];
        $property_list[GRN_WORKFLOW_COLUMN_FORM] = $form['fid'];
        $property_list[GRN_WORKFLOW_COLUMN_FORM_NAME] = $form['name'];
        $property_list[GRN_WORKFLOW_COLUMN_FORM_FOREIGN_KEY]
            = $form['foreign_key'];
        $property_list[GRN_WORKFLOW_COLUMN_AUTO_EXPORT]
            = $form['auto_export'];
        $property_list[GRN_WORKFLOW_COLUMN_EXPORT_FOLDER]
            = $form['export_folder'];
        $property_list[GRN_WORKFLOW_COLUMN_LOGIN_NAME_EXPORT]
            = $form['login_name_export'];
        $property_list[GRN_WORKFLOW_COLUMN_EXPORT_TOP_LINE]
            = $form['export_top_line'];
        $property_list['col_reapply']
            = @$form['reapply'];
        $property_list[GRN_WORKFLOW_COLUMN_PRIORITY]
            = array_key_exists('priority',
            $properties) ? $properties['priority'] : '';
        if (GRN_WORKFLOW_STATUS_UNPROCESSING_CANCEL == $form['status']) {
            $property_list['col_reapply'] = true;
        }
        $property_list[GRN_WORKFLOW_COLUMN_STATUS]
            = GRN_WORKFLOW_STATUS_UNPROCESSING;

        if (array_key_exists('petition_user', $properties)) {
            $property_list[GRN_WORKFLOW_COLUMN_USER]
                = $properties['petition_user'];
        }
        if (array_key_exists('agent_user', $properties)) {
            $property_list[GRN_WORKFLOW_COLUMN_AGENT_USER]
                = $properties['agent_user'];
        }

        //Set Form
        $this->_setForm($form, $property_list);

        if ( ! array_key_exists('petition_user_nochange', $properties)) {
            //Set User
            $this->_setUser($property_list);
        } else {
            unset($property_list[GRN_WORKFLOW_COLUMN_USER]);
        }

        if ($refresh_ctime) {
            //Set Creator
            $this->_setCreator($property_list);
        } else {
            //Set Modifier
            $this->_setModifier($property_list);
        }

        //Create New Petition
        $petition_manager =& $this->_getPetitionManager();
        $petition_id = $petition_manager->update($petition_id,
            $property_list);

        return $petition_id;
    }

    /**
     * Delete Petition
     *
     * @param  int $petition_id //Petition ID
     * @param  int $form_id     //Form ID
     *
     * @return BOOL   $result                    //Result
     */
    function delete($petition_id, $form_id = null)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($petition_id,
            E_GRN_WRKF_PETITION_INVALID_ID);    //Petition ID

        //Check Petition Exist
        $petition = $this->get($petition_id, $form_id);

        //Get Petition List with Extra Information
        $column_list = [
            'p._id p__id',
            'p.col_form p_col_form',
            'd._id d__id',
            'f._id f__id',
            'f.col_file f_col_file',
        ];
        $petition_manager = $this->_getPetitionManager();

        $option = [
            'condition' => [
                [
                    'column'   => 'p._id',
                    'value'    => $petition_id,
                    'operator' => '='
                ]
            ]
        ];

        $petition =& $petition_manager->getEx($petition_id, $form_id,
            $column_list, $option);

        //Delete Item Data File
        $item_data_id_list = [];
        foreach (array_keys($petition['item_data']) as $key) {
            $item_data_id = $petition['item_data'][$key]['d__id'];
            $item_data_file_id = $petition['item_data'][$key]['f__id'];
            if ($item_data_file_id
                && ! in_array($item_data_id, $item_data_id_list)
            ) {
                $item_data_id_list[] = $item_data_id;
            }
        }
        if (count($item_data_id_list) !== 0) {
            require_once('workflow/itemdatafile_logic.csp');
            $item_data_file_logic
                = GRN_Workflow_ItemDataFile_Logic::getInstance();
            foreach ($item_data_id_list as $item_data_id) {
                $item_data_file_logic->deleteAll($item_data_id);
            }
        }

        //Remove Petition
        $petition_manager->remove($petition_id);

        //Check Form Deleted Flag
        if ( ! is_null($petition['p_col_form'])) {
            $column_list = ['_id', 'col_deleted'];
            require_once('workflow/form_manager.csp');
            $form_manager = GRN_Workflow_Form_Manager::getInstance();
            $form = $form_manager->getDirect($petition['p_col_form'],
                $column_list);
            if ($form['col_deleted'] == 1) {
                //Check Petition Count
                $option = [];
                $column_list = ['_id'];
                $petition_list =& $this->getList($petition['p_col_form'],
                    $column_list, $option, true);
                if (count($petition_list) === 0) {
                    //Remove Form
                    $form_manager->remove($petition['p_col_form']);
                }
            }
        }

        return true;
    }

    /**
     * Delete Multiple Petition
     *
     * @param  array $petition_id_list //Petition ID List
     * @param  array $form_id          //Form_id
     *
     * @return BOOL   $result                    //Result
     */
    function deleteMulti($petition_id_list, $form_id = null)
    {
        //Check Argument
        if ( ! is_array($petition_id_list)) {
            //Not Input Necessary
            require_once('workflow/error_code.csp');
        }

        //Get Petition List with Extra Information
        $petition_list = [];
        $column_list = [
            'p._id p__id',
            'p.col_form p_col_form',
            'd._id d__id',
            'f._id f__id',
            'f.col_file f_col_file',
        ];

        $petition_manager =& $this->_getPetitionManager();
        foreach ($petition_id_list as $petition_id) {
            $option = [
                'condition' => [
                    [
                        'column'   => 'p._id',
                        'value'    => $petition_id,
                        'operator' => '='
                    ]
                ]
            ];

            $petition_list[$petition_id]
                =& $petition_manager->getEx($petition_id, $form_id,
                $column_list, $option);
        }

        //Delete Item Data File
        $item_data_id_list = [];
        foreach (array_keys($petition_list) as $petition_id) {
            foreach (
                array_keys($petition_list[$petition_id]['item_data']) as $key
            ) {
                $item_data_id
                    = $petition_list[$petition_id]['item_data'][$key]['d__id'];
                $item_data_file_id
                    = $petition_list[$petition_id]['item_data'][$key]['f__id'];
                if ($item_data_file_id
                    && ! in_array($item_data_id, $item_data_id_list)
                ) {
                    $item_data_id_list[] = $item_data_id;
                }
            }
        }
        if (count($item_data_id_list) !== 0) {
            require_once('workflow/itemdatafile_logic.csp');
            $item_data_file_logic
                = GRN_Workflow_ItemDataFile_Logic::getInstance();
            foreach ($item_data_id_list as $item_data_id) {
                $item_data_file_logic->deleteAll($item_data_id);
            }
        }

        //Remove Petition
        $petition_manager =& $this->_getPetitionManager();
        $petition_manager->removeMulti($petition_id_list);

        $deleted_form_id_list = [];
        require_once('workflow/form_manager.csp');
        $form_manager = GRN_Workflow_Form_Manager::getInstance();
        foreach (array_keys($petition_list) as $petition_id) {
            $petition =& $petition_list[$petition_id];

            //Check Form Deleted Flag
            if ( ! is_null($petition['p_col_form'])
                 && ! in_array($petition['p_col_form'], $deleted_form_id_list)
            ) {
                $column_list = ['_id', 'col_deleted'];
                $form = $form_manager->getDirect($petition['p_col_form'],
                    $column_list);
                if ($form['col_deleted'] == 1) {
                    //Check Petition Count
                    $option = ['dummy' => '1'];
                    $column_list = ['_id'];
                    $list =& $this->getList($petition['p_col_form'],
                        $column_list, $option, true);
                    if (count($list) <= 0) {
                        //Remove Form
                        $form_manager->remove($petition['p_col_form']);
                        $deleted_form_id_list[] = $petition['p_col_form'];
                    }
                }
            }
        }

        return true;
    }

    /**
     * Delete All Petition
     *
     * @param  int $form_id //Form ID
     *
     * @return BOOL   $result                    //Result
     */
    function deleteAll($form_id = null)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($form_id, E_GRN_WRKF_FORM_INVALID_ID);    //Form ID

        //Get Petition List with Extra Information
        $column_list = [
            'p._id p__id',
            'p.col_form p_col_form',
            'd._id d__id',
            'f._id f__id',
            'f.col_file f_col_file',
        ];
        $petition_manager =& $this->_getPetitionManager();
        $petition_list =& $petition_manager->getListEx($form_id,
            $column_list);

        //Delete Item Data File
        $item_data_id_list = [];
        foreach (array_keys($petition_list) as $petition_id) {
            foreach (
                array_keys($petition_list[$petition_id]['item_data']) as $key
            ) {
                $item_data_id
                    = $petition_list[$petition_id]['item_data'][$key]['d__id'];
                $item_data_file_id
                    = $petition_list[$petition_id]['item_data'][$key]['f__id'];
                if ($item_data_file_id
                    && ! in_array($item_data_id, $item_data_id_list)
                ) {
                    $item_data_id_list[] = $item_data_id;
                }
            }
        }
        if (count($item_data_id_list) !== 0) {
            require_once('workflow/itemdatafile_logic.csp');
            $item_data_file_logic
                = GRN_Workflow_ItemDataFile_Logic::getInstance();
            foreach ($item_data_id_list as $item_data_id) {
                $item_data_file_logic->deleteAll($item_data_id);
            }
        }

        //Remove Petition
        $petition_manager->removeAll($form_id);

        //Check Form Deleted Flag
        if ( ! is_null($form_id)) {
            $column_list = ['_id', 'col_deleted'];
            require_once('workflow/form_manager.csp');
            $form_manager = GRN_Workflow_Form_Manager::getInstance();
            $form = $form_manager->getDirect($form_id, $column_list);
            if ($form['col_deleted'] == 1) {
                //Remove Form
                $form_manager->remove($form_id);
            }
        }

        return true;
    }

    /**
     * Change Petition Order
     *
     * @param  int  $petition_id_list //Petition ID List
     * @param  int  $form_id          //Form ID
     * @param  bool $refresh          //Refresh Flag
     *
     * @return bool   $result                    //Result
     */
    function changeOrder($petition_id_list, $form_id = null, $refresh = false)
    {
        //Check Argument
        if ( ! is_array($petition_id_list)) {
            require_once('fw/string_util.csp');
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_PETITION_NOT_INPUT_NECESSARY);
        }

        //Change Order
        $petition_manager =& $this->_getPetitionManager();
        $petition_manager->changeOrder($petition_id_list, $form_id, $refresh);

        return true;
    }

    /**
     * Get Approved Number
     *
     * @param  int $petition_id
     * @param  int $form_id
     *
     * @return bool|string $serial_number
     */
    function getApprovedNumber($petition_id, $form_id)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($petition_id,
            E_GRN_WRKF_PETITION_INVALID_ID);    //Petition ID

        //Get Target Petition
        require_once('workflow/form_logic.csp');
        $petition = $this->get($petition_id);
        $form_logic = GRN_Workflow_Form_Logic::getInstance();
        $form_info = $form_logic->get($form_id);

        if ($form_info[GRN_WORKFLOW_COLUMN_APPROVED_SERIAL_TYPE]
            != GRN_WORKFLOW_APPROVED_NUMBER_ENABLE
        ) {
            return false;
        }
        $serial_number = $form_logic->getApprovedSerial($form_id);

        $serial_format = $form_info[GRN_WORKFLOW_COLUMN_APPROVED_SERIAL_FORMAT];
        if (is_string($serial_format) && $serial_format !== '') {
            $approved_time = time();
            $serial_number = $this->formatSerialNumber(
                $approved_time, $serial_format, $serial_number, 'AN'
            );
        }

        return $serial_number;
    }

    /**
     * Set Petition Number
     *
     * @param  int   $petition_id //Petition ID
     * @param  array $form        //Form Information
     *
     * @return bool|int|string|void           //Serial Number
     */
    function setPetitionNumber($petition_id, & $form)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($petition_id,
            E_GRN_WRKF_PETITION_INVALID_ID);    //Petition ID

        //Get Target Petition
        $petition = $this->get($petition_id);

        //Check Petition Number Allready Set
        if ($petition[GRN_WORKFLOW_COLUMN_PETITION_NUMBER]) {
            return;
        }

        //Create Serial Number
        $serial_number = 0;
        switch ($petition[GRN_WORKFLOW_COLUMN_SERIAL_TYPE]) {
            //Global Serial Number
            case '0';
                require_once('workflow/petitionnumber_manager.csp');
                $petition_number_manager
                    = GRN_Workflow_PetitionNumber_Manager::getInstance();
                $serial_number
                    = $petition_number_manager->create(['_id' => '']);
                if (($serial_number / GRN_WORKFLOW_INT_MAX) > 1) {
                    $serial_number = bcmod($serial_number,
                        GRN_WORKFLOW_INT_MAX);
                }
                break;
            //Local Serial Number
            case '1';
                require_once('workflow/form_logic.csp');
                $form_logic = GRN_Workflow_Form_Logic::getInstance();
                $serial_number = $form_logic->getSerial($form['fid']);
                break;
            //No Serial Number
            case '2';
                $serial_number = false;
                break;
        }
        //Apply Serial Format
        $serial_format = $petition[GRN_WORKFLOW_COLUMN_SERIAL_FORMAT];
        if ($serial_number != false && is_string($serial_format)
            && $serial_format !== ''
            && $petition[GRN_WORKFLOW_COLUMN_SERIAL_TYPE] == 1
        ) {
            $serial_number
                = $this->formatSerialNumber($petition[GRN_WORKFLOW_COLUMN_CTIME],
                $serial_format, $serial_number, 'SN');
        }

        //Update Petition
        if ($serial_number != false) {
            $property_list = [
                GRN_WORKFLOW_COLUMN_PETITION_NUMBER => $serial_number,
            ];

            $petition_manager = $this->_getPetitionManager();
            $petition_manager->update($petition_id, $property_list);
        }

        return $serial_number;
    }

    /**
     * @return object
     */
    public function getCutOverUTC()
    {
        require_once("workflow/config.csp");
        $system_config = GRN_Workflow_Configs::getInstance()->getSystemConfig();

        return $system_config->getCutover();
    }

    /**
     * Attach Folder List
     *
     * @param  int   $petition_id  //Form ID
     * @param  array $user_id_list //User ID List
     * @param string $folder_type
     * @param bool   $notification
     */
    function attachFolderList(
        $petition_id,
        $user_id_list,
        $folder_type = 'UNPROCESSED_FOLDER_FOREIGN_KEY',
        $notification = true
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($petition_id,
            E_GRN_WRKF_PETITION_INVALID_ID);    //Petition ID

        //Initialize User Folders
        require_once('workflow/folder_logic.csp');
        $folder_logic = GRN_Workflow_Folder_Logic::getInstance();
        $folder_logic->initializeUsers($user_id_list);

        //Get Specific Folder List
        $folder_type_list = [$folder_type];
        $specific_folder_list = $folder_logic->getSpecificList($user_id_list,
            $folder_type_list);

        //Get Folder Relation By Petition ID
        require_once('workflow/folderrelation_manager_base.csp');
        $folder_relation_manager_base
            = GRN_Workflow_FolderRelation_Manager_Base::getInstance();
        $petition_folder_relation_list
            = $folder_relation_manager_base->getListByPetitionId($petition_id);

        //Check Allready Attach Folder
        foreach (
            array_keys($petition_folder_relation_list) as
            $petition_folder_relation_id
        ) {
            $folder_id
                = $petition_folder_relation_list[$petition_folder_relation_id]['col_folder'];
            if (array_key_exists($folder_id, $specific_folder_list)) {
                unset($specific_folder_list[$folder_id]);
            }
        }

        //Attach Folder List
        if (count($specific_folder_list) !== 0) {
            require_once('workflow/folderrelation_logic.csp');
            $folder_relation_logic
                = GRN_Workflow_FolderRelation_Logic::getInstance();
            $folder_relation_logic->addList($petition_id,
                array_keys($specific_folder_list));
        }

        if ($notification) {
            if ($folder_type == 'UNPROCESSED_FOLDER_FOREIGN_KEY'
                || $folder_type == 'FINISH_FOLDER_FOREIGN_KEY'
            ) {
                require_once('workflow/petition_logic.csp');
                $logic = GRN_Workflow_Petition_Logic::getInstance();
                $petition = $logic->get($petition_id);

                // 通知を一括送信
                require_once('workflow/notification.csp');
                $logic = GRN_Workflow_Notification::getInstance();
                $sender_id = $petition['col_user'];
                $sender_name = $petition['col_user_name'];
                $ptime = time();
                $logic->sendList($user_id_list, $folder_type, $petition_id,
                    $sender_name, $sender_id, $ptime);
            }
        }

        return;
    }

    /**
     * Detach Folder List
     *
     * @param  int   $petition_id  //Form ID
     * @param  array $user_id_list //User ID List
     * @param string $folder_type
     */
    function detachFolderList(
        $petition_id,
        $user_id_list,
        $folder_type = 'UNPROCESSED_FOLDER_FOREIGN_KEY'
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($petition_id,
            E_GRN_WRKF_PETITION_INVALID_ID);    //Petition ID

        //Initialize User Folders
        require_once('workflow/folder_logic.csp');
        $folder_logic = GRN_Workflow_Folder_Logic::getInstance();
        $folder_logic->initializeUsers($user_id_list);

        //Get Specific Folder List
        $folder_type_list = [$folder_type];
        $specific_folder_list = $folder_logic->getSpecificList($user_id_list,
            $folder_type_list);

        //Detach Folder List
        require_once('workflow/folderrelation_logic.csp');
        $folder_relation_logic
            = GRN_Workflow_FolderRelation_Logic::getInstance();
        $folder_relation_logic->removeListByFolderId($petition_id,
            array_keys($specific_folder_list));

        return;
    }

    /**
     * 状況を変更
     */
    function modifyStatus(
        $petition_id,
        $status,
        $user_id = null,
        $comment = null,
        $ptime = null,
        $agent_id = null
    ) {
        require_once('fw/string_util.csp');
        require_once('workflow/error_code.csp');
        cb_trim_check($petition_id, E_GRN_WRKF_PETITION_INVALID_ID);

        $this->_setModifier($property_list);

        $petition_manager = $this->_getPetitionManager();
        $properties = ['col_status' => $status];
        if (0 < strlen($user_id)) {
            global $G_container_base;
            $uum = $G_container_base->getInstance('uum');
            $user = $uum->getUser($user_id);

            $properties['col_transactor'] = $user_id;
            $properties['col_transactor_name']
                = $user->get('display_name');
            $properties['col_transactor_foreign_key']
                = $user->get('foreign_key');
        }
        if (0 < strlen($agent_id)) {
            global $G_container_base;
            $uum =& $G_container_base->getInstance('uum');
            $user =& $uum->getUser($agent_id);

            $properties['col_agent_transactor'] = $agent_id;
            $properties['col_agent_transactor_name']
                = $user->get('display_name');
            $properties['col_agent_transactor_foreign_key']
                = $user->get('foreign_key');
        } else {
            $properties['col_agent_transactor'] = null;
            $properties['col_agent_transactor_name'] = null;
            $properties['col_agent_transactor_foreign_key'] = null;
        }
        $properties['col_comment'] = $comment;
        if (0 == strlen($ptime)) {
            $ptime = time();
        }
        $properties['col_ptime'] = $ptime;
        $petition_manager->update($petition_id, $properties);
    }

    /**
     * @param $valueToChange
     *
     * @return string
     */
    function _changeHalfToFullWidthSpace($valueToChange)
    {
        $temp_value = $valueToChange;
        $subject = cb_trim($valueToChange);
        if ($subject == '') {
            $length_to_revert = mb_strlen($valueToChange);
            $temp_value = '';
            for ($index = 0; $index < $length_to_revert; $index++) {
                $temp_value .= '　';
            }
        }

        return $temp_value;
    }

    /**
     * format Serial Number
     *
     * @param  int    $timestamp
     * @param  string $serial_format
     * @param  int    $serial_number
     * @param  string $type
     *
     * @return string
     */
    public function formatSerialNumber(
        $timestamp,
        $serial_format,
        $serial_number,
        $type
    ) {
        $i18n = CB_I18N::getInstance();
        $default_timezone = $i18n->getDefaultTimezone();

        //Get Create Time
        $tsex = new CB_TimeStampEx(null, $default_timezone);
        $tsex->unix_ts = $timestamp;
        $date = $tsex->getDate();
        $year = sprintf('%04d', $date->year);
        $month = sprintf('%02d', $date->month);
        $day = sprintf('%02d', $date->day);

        $cutover_utc = $this->getCutOverUTC();

        if ( ! is_null($cutover_utc)) {
            $dt = $tsex->getDateTime();
            $dtex = new CB_DateTimeEx($dt);
            $tsex_utc = new CB_TimeStampEx(null, "UTC");
            $cutover_utc->year = $tsex_utc->getDate()->year;
            $cutover = $i18n->translateDatetimeTimezone($cutover_utc,
                "UTC", $default_timezone);
            $cutover->year = $dtex->year;
            $year = sprintf('%04d', $dtex->year);
            if ($dtex->compare($cutover) < 0) {
                $year = sprintf('%04d', $dtex->year - 1);
            }
        }
        $long_year = $year;
        $short_year = substr($year, 2);

        //Replace Serial Format
        $serial_format = mb_ereg_replace('%YYYY%', $long_year, $serial_format);
        $serial_format = mb_ereg_replace('%YY%', $short_year, $serial_format);
        $serial_format = mb_ereg_replace('%MM%', $month, $serial_format);
        $serial_format = mb_ereg_replace('%DD%', $day, $serial_format);

        $preg = '#%(0{0,10})' . $type . '%#';

        $result = preg_replace_callback($preg,
            function ($matches) use ($serial_number) {
                $digit_length = strlen($matches[1]);

                return str_pad($serial_number, $digit_length, '0',
                    STR_PAD_LEFT);
            }, $serial_format);

        if ($result === null) {
            return $serial_format;
        }

        return $result;
    }

    /**
     * update petition number when approved
     *
     * @param int $petition_id
     * @param int $form_id
     *
     * @return bool|string
     */
    public function updatePetitionNumberWhenApproved($petition_id, $form_id)
    {
        $petition = $this->get($petition_id);
        $approved_number = $this->getApprovedNumber($petition_id, $form_id);
        if ($approved_number != false) {
            $properties
                = [
                'col_petition_number' => $petition['col_petition_number']
                                         . $approved_number
            ];
            $petition_manager = $this->_getPetitionManager();
            $petition_manager->update($petition_id, $properties);
        }

        return $approved_number;
    }

    /**
     * add an auto schedule record
     *
     * @param int    $petition_id
     * @param int    $form_id
     * @param string $timezone
     */
    public function addAutoScheduleRecord($petition_id, $form_id, $timezone)
    {
        require_once('workflow/itemdata_logic.csp');
        $itemdata_logic = GRN_Workflow_ItemData_Logic::getInstance();
        $item_data_list = $itemdata_logic->getList($petition_id,
            ['_id', 'col_item'], true);
        $item_data_id_and_item_id = [];
        foreach ($item_data_list as $item_data_id => $col_item) {
            if (isset($col_item['col_item'])) {
                $item_data_id_and_item_id[$col_item['col_item']]
                    = $item_data_id;
            }
        }
        require_once('workflow/auto_schedule_setting_logic.csp');
        $auto_schedule_logic
            = GRN_Workflow_Auto_Schedule_Setting_Logic::getInstance();
        $autoScheduleObj = $auto_schedule_logic->getByFormId($form_id);
        if ($autoScheduleObj
            && $autoScheduleObj->getActive() == GRN_WORKFLOW_SCHEDULE_ACTIVE
            && array_key_exists($autoScheduleObj->getScheduleStartItem(),
                $item_data_id_and_item_id)
            && array_key_exists($autoScheduleObj->getScheduleEndItem(),
                $item_data_id_and_item_id)
        ) {
            $properties_auto_schedule = [
                'col_petition_id'              => $petition_id,
                'col_schedule_type'            => $autoScheduleObj->getScheduleType(),
                'col_appointment_type'         => $autoScheduleObj->getAppointmentType(),
                'col_schedule_start_item_data' => $item_data_id_and_item_id[$autoScheduleObj->getScheduleStartItem()],
                'col_schedule_end_item_data'   => $item_data_id_and_item_id[$autoScheduleObj->getScheduleEndItem()],
                'col_schedule_timezone'        => $timezone,
            ];
            require_once('workflow/auto_schedule_register_logic.csp');
            $auto_schedule_reg_logic
                = GRN_Workflow_Auto_Schedule_Register_Logic::getInstance();
            $auto_schedule_obj
                = $auto_schedule_reg_logic->getByPetitionId($petition_id);
            if ( ! $auto_schedule_obj) {
                $auto_schedule_reg_logic->insert($properties_auto_schedule);
            }
        }
    }
}


