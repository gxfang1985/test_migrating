<?php

/**
 * RSS Reader application
 *
 * @author   Eiji TAEN   2005/03
 * @package  grn.rss
 */

require_once('grn/application.csp');

/**
 * RSS Reader application class
 *
 * @package  grn.rss
 */
class GRN_RSS_Reader extends GRN_ApplicationBase
{
    /**
     * constructor
     *
     * @access   private
     */
    function __construct()
    {
        parent::__construct('rss');
    }

    private static $_instance = null;

    /**
     * @return GRN_RSS_Reader
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * system configuration
     */
    function getSystemConfigArray()
    {
        return [
            'rss_config' => [
                [
                    'page' => 'rss/system/common_set',
                    'icon' => 'general32'
                ],
                [
                    'page' => 'rss/system/list',
                    'icon' => 'link32'
                ],
                //                array( 'page' => 'rss/system/access_index',
                //                       'icon' => 'general32'),
                [
                    'page' => 'rss/system/import1',
                    'icon' => 'import32'
                ],
                [
                    'page' => 'rss/system/export',
                    'icon' => 'export32'
                ],
            ],
        ];
    }

    /**
     * personal configuration
     */
    function getPersonalConfigArray()
    {
        $config = [
            [
                'page' => 'rss/personal/common_set',
                'icon' => 'general32'
            ]
        ];

        require_once('rss/system.csp');
        $system = GRN_RSS_SystemLogic::getInstance();
        if (strcmp($system->getUsePersonalAttribute(), '1') === 0) {
            $config[] = [
                'page' => 'rss/personal/list',
                'icon' => 'link32'
            ];
        }

        return ['rss_config' => $config];

    }

    /**
     * アプリケーションポートレットリストの取得
     *
     * @return $portlet_list
     *          このアプリケーションが持つ
     *          アプリケーションポートレット情報を返します
     */
    function &getPortletList()
    {
        require_once('fw/i18n.csp');
        require_once('rss/resources.csp');

        $portlet_list = [];

        $rss_channel_list = [
            'name'             => cb_msg(GRN_RSS_APP_MODULEID,
                'portlet_channel_list'),
            //名前
            'type'             => 'grn.rss.channel_list',
            //種別
            'version'          => '1.0',
            //バージョン
            'set_template'     => 'rss/portlet/set_channel_list.csp',
            //設定用テンプレート名
            'command_template' => 'rss/portlet/command_set_channel_list.csp',
            //設定用テンプレート名
            'view_template'    => 'rss/portlet/view_channel_list.csp',
            //表示用テンプレート名
        ];
        $portlet_list[] = $rss_channel_list;

        $rss_item_list = [
            'name'             => cb_msg(GRN_RSS_APP_MODULEID,
                'portlet_item_list'),
            //名前
            'type'             => 'grn.rss.item_list',
            //種別
            'version'          => '1.0',
            //バージョン
            'set_template'     => 'rss/portlet/set_item_list.csp',
            //設定用テンプレート名
            'command_template' => 'rss/portlet/command_set_item_list.csp',
            //設定用テンプレート名
            'view_template'    => 'rss/portlet/view_item_list.csp',
            //表示用テンプレート名
        ];
        $portlet_list[] = $rss_item_list;

        return $portlet_list;
    }

}


