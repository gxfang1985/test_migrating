<?php

/**
 * RSS Reader Configuration Base
 *
 * @author  Eiji TAEN    2005/05
 * @version 1.0
 * @package grn.rss
 */

require_once('rss/resources.csp');
require_once('grn/application.csp');

/**
 * RSS Reader configuration base class
 *
 * @author  Eiji TAEN    2005/05
 * @version 1.0
 * @package grn.rss
 */
class GRN_RSS_ConfigBase
{
    // config type (shared/personal)
    var $_type;
    // channel info table name
    var $_channel_info_table_name;
    // relation table name
    var $_relation_table_name;

    /**
     * constructor
     *
     * @param   string $type Shared/Personal
     */
    function __construct($type)
    {
        $type = strtolower($type);
        $this->_type = $type;
        $this->_channel_info_table_name = 'grn_rss_' . $type . 'channelinfo';
        $this->_relation_table_name = 'grn_rss_' . $type . 'folderrelation';
    }

    /**
     * @access   protected
     *
     * @param    string $id folder relation OID
     *
     * @return   array
     */
    function &_getChannelInfo($id, $query = '')
    {
        require_once('grn/rss.csp');
        require_once('rss/tables.csp');
        $manager = GRN_RSS_TableManager::getInstance();
        $table = $manager->getTableInfo($this->_relation_table_name);
        if (strlen($query) > 0) {
            $db = $table->getDBConnection();
            $rowset = new CB_RowSet($table);
            $rowset->addCondition($query . cb_queryf($db, '_id = \'@S\'', $id));
            $rowset->limit(0, 1);
            $rowset->setLock(CB_DATABASE_NO_LOCK);
            $row = $rowset->iterate();
            $rowset->destroy();
        } else {
            $row = $table->getRow($id);
        }
        if ( ! $row) {
            $ret = false;

            return $ret;
        }

        $channel_info = $row->get('channel');
        if ( ! $channel_info) {
            $ret = false;

            return $ret;
        }

        $channel = $channel_info->get('channel');
        if ( ! $channel) {
            $ret = false;

            return $ret;
        }

        $title = $channel_info->get('title');
        if ( ! $title) {
            $title = $channel->get('title');
        }
        if ( ! $title) {
            $title = $channel->get('id');
        }

        $ret = [
            'oid'       => $channel->getOID(),
            'id'        => $channel->get('id'),
            'title'     => $title,
            'memo'      => $channel_info->get('memo'),
            'url'       => $channel->get('channel_url'),
            'has_error' => $channel->get('error_code') ? true : false
        ];

        return $ret;
    }

    /**
     * @access   protected
     *
     * @param    string $url channel url (channel id)
     *
     * @return   mixed   GRN_RSS_[Shared|Personal]ChannelInfo
     */
    function _getChannelInfoByURL($url, $query = '')
    {
        require_once('rss/tables.csp');
        $manager = GRN_RSS_TableManager::getInstance();
        $tbl_channel_info
            = $manager->getTableInfo($this->_channel_info_table_name);
        $tbl_channel = $manager->getTableInfo('GRN_RSS_Channel');
        $db = $tbl_channel_info->getDBConnection();
        $rowset = new CB_RowSet($tbl_channel_info);
        $rowset->addJoin($tbl_channel,
            $query . cb_queryf($db, 'col_id = \'@S\' AND col_channel = c._id',
                $url),
            CB_DATABASE_INNER_JOIN,
            'c');
        $rowset->limit(0, 1);
        $rowset->setLock(CB_DATABASE_NO_LOCK);
        $row = $rowset->iterate();
        $rowset->destroy();

        if (is_null($row)) {
            $ret = false;

            return $ret;
        }

        return $row;
    }

    /**
     * @access   protected
     * @return   mixed   GRN_RSS_[Shared|Personal]FolderRelation
     */
    function _getFolderRelationByURL($url)
    {
        require_once('rss/tables.csp');
        $manager = GRN_RSS_TableManager::getInstance();
        $tbl_relation = $manager->getTableInfo($this->_relation_table_name);
        $tbl_channel_info
            = $manager->getTableInfo($this->_channel_info_table_name);
        $tbl_channel = $manager->getTableInfo('GRN_RSS_Channel');
        $db = $tbl_relation->getDBConnection();
        $rowset = new CB_RowSet($tbl_relation);
        $rowset->addJoin($tbl_channel_info,
            'tab_' . strtolower($this->_relation_table_name)
            . '.col_channel = i._id',
            CB_DATABASE_INNER_JOIN,
            'i');
        $rowset->addJoin($tbl_channel,
            cb_queryf($db, 'col_id = \'@S\' AND i.col_channel = c._id', $url),
            CB_DATABASE_INNER_JOIN,
            'c');
        $rowset->limit(0, 1);
        $rowset->setLock(CB_DATABASE_NO_LOCK);
        $row = $rowset->iterate();
        $rowset->destroy();

        if (is_null($row)) {
            $ret = false;

            return $ret;
        }

        return $row;
    }

    /**
     * @access   protected
     *
     * @param    array $channel channel data
     *
     * @return   mixed    GRN_RSS_PersonalChannelInfo
     *                    if specified channel already exist, return FALSE.
     *
     * $channel['title']   => string   channel title
     *         ['memo']    => string   channel memo
     *         ['channel'] => object   GRN_RSS_Channel
     */
    function _addChannelInfo($channel)
    {
        require_once('rss/tables.csp');
        $tbl_manager = GRN_RSS_TableManager::getInstance();
        $table
            = $tbl_manager->getTableInfo($this->_channel_info_table_name);
        $row = $table->newRow();
        $row->setData($channel);

        return $row;
    }

    /**
     * @access   protected
     * @return   GRN_RSS_[Shared|Personal]FolderRelation
     */
    function _addFolderRelation(& $parent, $type, & $data)
    {
        require_once('rss/tables.csp');
        $tbl_manager = GRN_RSS_TableManager::getInstance();
        $table = $tbl_manager->getTableInfo($this->_relation_table_name);
        $row = $table->newRow();
        $row->set('parent', $parent);
        $row->set('type', $type);
        switch ($type) {
            case GRN_RSS_RELATION_TYPE_FOLDER:
                $row->set('folder', $data);
                break;
            case GRN_RSS_RELATION_TYPE_CHANNEL:
                $row->set('channel', $data);
                break;
            case GRN_RSS_RELATION_TYPE_DELIMITER:
                break;
        }

        return $row;
    }

    /**
     * change relation order
     *
     * @access   protected
     *
     * @param    object $user          CB_User
     * @param    array  $relation_list relation list
     * @param    string $folder_id     personal folder id
     *
     * @option   string   $query
     *
     * $relation_list[relation OID] => display order
     */
    function _changeRelationOrder($relation_list, $folder_id, $query = '')
    {
        if (is_array($relation_list) && count($relation_list) > 0) {
            require_once('rss/tables.csp');
            $tbl_manager = GRN_RSS_TableManager::getInstance();
            $table
                =& $tbl_manager->getTableInfo($this->_relation_table_name);
            $db = $table->getDBConnection();
            $rowset = new CB_RowSet($table);
            //$rowset->addCondition( $query . 'col_parent = ' . $folder_id );
            //for escape!
            $rowset->addCondition($query . "col_parent = '"
                                  . $db->escape($folder_id) . "'");
            while ( ! is_null($row = $rowset->iterate())) {
                $relation_oid = $row->getOID();
                if (array_key_exists($relation_oid, $relation_list)) {
                    $row->set('order', $relation_list[$relation_oid]);
                }
            }
        }
    }

    /**
     * add delimiter
     *
     * @access   protected
     *
     * @param    object $folder GRN_RSS_[Shared|Personal]Folder
     *
     * @return   mixed    GRN_RSS_[Shared|Personal]FolderRelation
     *                    if specified folder doesn't exist, return FALSE.
     */
    function _addDelimiter(& $folder)
    {
        require_once('rss/tables.csp');
        $tbl_manager = GRN_RSS_TableManager::getInstance();
        $table = $tbl_manager->getTableInfo($this->_relation_table_name);
        $row = $table->newRow();
        $row->set('parent', $folder);
        $row->set('type', GRN_RSS_RELATION_TYPE_DELIMITER);

        return $row;
    }

    /**
     * delete delimiter
     *
     * @access   protected
     *
     * @param    string $relation id   relation ID
     *
     * @return   mixed    GRN_RSS_SharedFolderRelation
     *                    if specified relation doesn't exist, return FALSE.
     */
    function _getDelimiter($relation_id, $query = null)
    {
        require_once('rss/tables.csp');
        $tbl_manager = GRN_RSS_TableManager::getInstance();
        $table = $tbl_manager->getTableInfo($this->_relation_table_name);
        $table->setLock(CB_DATABASE_NO_LOCK);
        if (strlen($query) > 0) {
            $db = $table->getDBConnection();
            $rowset = new CB_RowSet($table);
            $rowset->addCondition($query . cb_queryf($db, '_id = \'@S\'',
                    $relation_id));
            $rowset->limit(0, 1);
            $rowset->setLock(CB_DATABASE_NO_LOCK);
            $row = $rowset->iterate();
            $rowset->destroy();
        } else {
            $row =& $table->getRow($relation_id);
        }
        if ( ! $row) {
            $ret = false;

            return $ret;
        }

        return $row;
    }

    /**
     * get relation list
     *
     * @access   protected
     *
     * @param    object $folder_row GRN_RSS_[Shared|Personal]Folder
     *
     * @option   string   $query        default: ''
     * @return   mixed    array
     *                    if specified folder doesn't exist, return FALSE.
     *
     * return[relation id]                => array   (key: relation id)
     *                    ['title']       => string   relation data title
     *                    ['type']        => int      relation type (see resources.csp)
     *                    ['has_error']   => boolean
     *                    ['channel_oid'] => string   channel OID
     */
    function _getRelationList(& $folder_row, $query = '')
    {
        $app_locator = GRN_ApplicationLocator::instance();
        $db = $app_locator->getConnection('rss');

        $columns = [
            'r.col_type rtype',
            'f.col_title ftitle',
            'i.col_title ititle',
            'c.col_title ctitle',
            'c.col_id cid',
            'col_error_code',
            'c._id c_id',
            'r._id r_id'
        ];

        $tables = '(((tab_' . $this->_relation_table_name
                  . ' r) LEFT JOIN tab_grn_rss_' . $this->_type
                  . 'folder f ON f._id = r.col_folder) LEFT JOIN tab_grn_rss_'
                  . $this->_type
                  . 'channelinfo i ON i._id = r.col_channel) LEFT JOIN tab_grn_rss_channel c ON c._id = i.col_channel';

        //$query = 'SELECT ' . implode( ', ', $columns ) . ' FROM ' . $tables . ' WHERE ' . $query . 'col_parent = \'' . $folder_row->getOID() . '\'';
        $query = 'SELECT ' . implode(', ', $columns) . ' FROM ' . $tables
                 . ' WHERE ' . $query;
        $query .= cb_queryf($db, "col_parent = '@S'", $folder_row->getOID());
        $query .= ' ORDER BY col_order, r._id';

        $result = $db->query($query);
        if ($result === false) {
            $db->throwError(['query' => 'failed query on SELECT: ' . $query]);
        }

        $relation_list = [];
        while ($row = $db->fetch_assoc($result)) {
            $relation = [];
            $type = intval($row['rtype']);
            switch ($type) {
                case GRN_RSS_RELATION_TYPE_FOLDER:
                    $relation['title'] = $row['ftitle'];
                    break;
                case GRN_RSS_RELATION_TYPE_CHANNEL:
                    $title = $row['ititle'];
                    if ( ! $title) {
                        $title = $row['ctitle'];
                        if ( ! $title) {
                            $title = $row['cid'];
                        }
                    }
                    $relation['title'] = $title;

                    $relation['has_error'] = $row['col_error_code'] ? true
                        : false;
                    $relation['error'] = $row['col_error_code'];
                    $relation['channel_oid'] = $row['c_id'];
                    break;
                case GRN_RSS_RELATION_TYPE_DELIMITER:
                    $relation['title'] = cb_msg(GRN_RSS_APP_MODULEID,
                        'delimiter');
                    break;
            }
            $relation['type'] = $type;
            $relation_list[$row['r_id']] = $relation;
        }

        return $relation_list;
    }

    /**
     * get channel row
     *
     * @param    string $oid channel OID
     *
     * @return   object   GRN_RSS_SharedChannelInfo/GRN_RSS_PersonalChannelInfo
     */
    function getChannelInfoByOID($oid)
    {
        require_once('rss/tables.csp');
        $tbl_manager = GRN_RSS_TableManager::getInstance();
        $table
            =& $tbl_manager->getTableInfo($this->_channel_info_table_name);
        $table->setLock(CB_DATABASE_NO_LOCK);

        return $table->getRow($oid);
    }

    /**
     * @access   protected
     *
     * @param    object $channel_row GRN_RSS_Channel
     */
    function _deleteChannel(& $channel_row)
    {
        // delete cache file
        /*
        require_once( 'grn/rss.csp' );
        $cache = new GRN_RSS_Cache( $channel_row->get( 'id' ) );
        $cache->delete();
         */

        // delete channel row
        $channel_row->delete();
    }

    /**
     * @access   protected
     *
     * @param    object $channel_row GRN_RSS_Channel
     */
    /*
    function _deleteCaches( & $channel_row  )
    {
        $channel_id = $channel_row->get( 'id' );

        // delete cache file
        require_once( 'grn/rss.csp' );
        $cache = new GRN_RSS_Cache( $channel_id );
        $cache->delete();
     */

    /*
    // delete item cache
    $manager = GRN_RSS_Manager::getInstance();
    $manager->deleteItems( $channel_id, TRUE );

    // delete cannel cache
    $reset_cols = array( 'id', 'title', 'channel_url', 'description', 'ptime', 'utime',
                         'last_modified', 'user_num', 'error_code' );
    foreach( $reset_cols as $col )
    {
        $channel_row->set( $col, null );
    }
     */
    /*
    }
     */

}


