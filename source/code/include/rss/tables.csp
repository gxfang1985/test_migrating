<?php

/**
 * RSS Reader Application Table Classes
 *
 * @author  Eiji TAEN    2005.3
 * @version 1.0
 * @package grn.rss
 */

require_once('grn/inspection.csp');
require_once('grn/rss.csp');

/**
 * RSS Shared Folder table class
 *
 * @author  Eiji TAEN    2005.3
 * @version 1.0
 * @package grn.rss
 */
class GRN_RSS_SharedFolder extends CB_PersistentBase
{
    var $_app_id = 'rss';

    // folder title
    var $col_title = ['type' => 'char'];

    // reserved columns 
    var $col_reserve_text1 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text2 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text3 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_int1 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int2 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int3 = ['type' => 'int', 'lazy' => true];

    var $_column_list = ['title'];

    function __construct(& $row)
    {
        parent::__construct($row);
    }

    function setData($data)
    {
        foreach ($data as $key => $value) {
            if (in_array($key, $this->_column_list)) {
                $this->set($key, $value);
            }
        }
    }
}

/**
 * RSS Personal Folder table class
 *
 * @author  Eiji TAEN    2005.3
 * @version 1.0
 * @package grn.rss
 */
class GRN_RSS_PersonalFolder extends GRN_RSS_SharedFolder
{
    // relation to user
    var $col_user = ['type' => 'relation', 'to' => 'CB_User'];
    // folder type (0: root, 1: general)
    var $col_type = ['type' => 'int'];

    // indexes
    var $idx_user_type = ['cols' => ['user', 'type'], 'unique' => true];

    var $_column_list = ['title', 'user', 'type'];

    function __construct(& $row)
    {
        parent::__construct($row);
    }
}

/**
 * RSS Shared Channel Information table class
 *
 * @author  Eiji TAEN    2005/03
 * @version 1.0
 * @package grn.rss
 */
class GRN_RSS_SharedChannelInfo extends GRN_InspectionBase
{
    var $_app_id = 'rss';

    // relation to channel
    var $col_channel = ['type' => 'relation', 'to' => 'GRN_RSS_Channel'];

    // channel title
    var $col_title = ['type' => 'char'];
    // channel memo
    var $col_memo = ['type' => 'char', 'length' => 0xFFFF];

    // reserved columns 
    var $col_reserve_text1 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text2 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text3 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_int1 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int2 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int3 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_blob1 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob2 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob3 = ['type' => 'blob', 'lazy' => true];

    var $_column_list = ['channel', 'title', 'memo'];

    var $_type;

    var $_import;

    function __construct(& $row)
    {
        require_once('rss/resources.csp');
        parent::__construct($row, GRN_RSS_APP_MODULEID);
        $this->_type = 'system';
        $this->_import = '';
    }

    function setData($data)
    {
        foreach ($data as $key => $value) {
            if (in_array($key, $this->_column_list)) {
                $this->set($key, $value);
            }
        }
    }

    /**
     * @param string $action Action name.
     *
     * @return string
     */
    function getInspectionMessage($action)
    {
        // channel
        $channel =& $this->get('channel');

        // channel title
        $title = $this->get('title');
        if ( ! $title) {
            $title = $channel->get('title');
        }

        switch ($action) {
            case 'create':
                $creator =& $this->get('creator');

                return '[' . $this->_type . $this->_import . '.create] '
                       . $title . ' ' . $channel->get('id') . ' '
                       . $this->get('memo') . ' (uid: ' . $creator->getOID()
                       . ', cid:' . $this->getOID() . ')';
            case 'update':
                $modifier =& $this->get('modifier');

                return '[' . $this->_type . $this->_import . '.modify] '
                       . $title . ' ' . $channel->get('id') . ' '
                       . $this->get('memo') . ' (uid: ' . $modifier->getOID()
                       . ', cid:' . $this->getOID() . ')';
            case 'delete':
                return '[' . $this->_type . '.delete] ' . $title . ' '
                       . $channel->get('id') . ' ' . $this->get('memo')
                       . ' (uid: , cid:' . $this->getOID() . ')';
        }
    }

    function onCreateFromImport(& $user)
    {
        $this->_import = '.import';
        $this->onCreate($user);
    }

    function onUpdateFromImport(& $user)
    {
        $this->_import = '.import';
        $this->onUpdate($user);
    }
}

/**
 * RSS Personal Channel Information table class
 *
 * @author  Eiji TAEN    2005/03
 * @version 1.0
 * @package grn.rss
 */
class GRN_RSS_PersonalChannelInfo extends GRN_RSS_SharedChannelInfo
{
    var $_app_id = 'rss';

    // relation to user
    var $col_user = ['type' => 'relation', 'to' => 'CB_User'];

    // indexes
    var $idx_user_channel = ['cols' => ['user', 'channel']];
    var $idx__id_user = ['cols' => [null, 'user']];

    var $_column_list = ['channel', 'title', 'memo', 'user'];

    function __construct(& $row)
    {
        parent::__construct($row);
        $this->_type = 'personal';
    }

}

/**
 * RSS Shared Relation table class
 *
 * @author  Eiji TAEN    2005.3
 * @version 1.0
 * @package grn.rss
 */
class GRN_RSS_SharedFolderRelation extends CB_PersistentBase
{
    var $_app_id = 'rss';

    // relation to parent folder
    var $col_parent = ['type' => 'relation', 'to' => 'GRN_RSS_SharedFolder'];
    // relation type (0: folder, 1: channel, 2: delimiter)
    var $col_type = ['type' => 'int'];
    // relation to shared folder
    var $col_folder
        = [
            'type'   => 'relation',
            'to'     => 'GRN_RSS_SharedFolder',
            'unique' => true
        ];
    // relation to shared channel
    var $col_channel
        = [
            'type'   => 'relation',
            'to'     => 'GRN_RSS_SharedChannelInfo',
            'unique' => true
        ];
    // display order
    var $col_order = ['type' => 'list_index'];

    // reserved columns 
    var $col_reserve_text1 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text2 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text3 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_int1 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int2 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int3 = ['type' => 'int', 'lazy' => true];

    // indexes
    var $idx_parent_folder_channel_order
        = [
            'cols' => [
                'parent',
                'folder',
                'channel',
                'order'
            ]
        ];
    var $idx_folder_channel_order__id
        = [
            'cols' => [
                'folder',
                'channel',
                'order',
                null
            ]
        ];
    var $idx_type = ['cols' => ['type']];

    function __construct(& $row)
    {
        parent::__construct($row);
    }
}

/**
 * RSS Shared Relation table class
 *
 * @author  Eiji TAEN    2005.3
 * @version 1.0
 * @package grn.rss
 */
class GRN_RSS_PersonalFolderRelation extends GRN_RSS_SharedFolderRelation
{
    // relation to user
    var $col_user = ['type' => 'relation', 'to' => 'CB_User'];
    // relation to parent folder
    var $col_parent = ['type' => 'relation', 'to' => 'GRN_RSS_PersonalFolder'];
    // relation to shared folder
    var $col_folder
        = [
            'type'   => 'relation',
            'to'     => 'GRN_RSS_PersonalFolder',
            'unique' => true
        ];
    // relation to shared channel
    var $col_channel
        = [
            'type'   => 'relation',
            'to'     => 'GRN_RSS_PersonalChannelInfo',
            'unique' => true
        ];

    // indexes
    var $idx_user_parent_folder_channel_order
        = [
            'cols' => [
                'user',
                'parent',
                'folder',
                'channel',
                'order'
            ]
        ];
    var $idx_user__id_folder_channel_order
        = [
            'cols' => [
                'user',
                null,
                'folder',
                'channel',
                'order'
            ]
        ];

    function __construct(& $row)
    {
        parent::__construct($row);
    }
}

/**
 * RSS Access Time table class
 *
 * @author  Eiji TAEN    2005/03
 * @version 1.0
 * @package grn.rss
 */
class GRN_RSS_AccessTime extends CB_PersistentBase
{
    var $_app_id = 'rss';

    // relation to user
    var $col_user = ['type' => 'relation', 'to' => 'CB_User'];
    // relation to channel
    var $col_channel = ['type' => 'relation', 'to' => 'GRN_RSS_Channel'];
    // access time
    var $col_time = ['type' => 'timestamp'];

    // reserved columns 
    var $col_reserve_text1 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text2 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text3 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_int1 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int2 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int3 = ['type' => 'int', 'lazy' => true];

    // indexes
    var $idx_user_channel_time = ['cols' => ['user', 'channel', 'time']];

    function __construct(& $row)
    {
        parent::__construct($row);
    }
}

/**
 * RSS System Configuration table class
 *
 * @author  Eiji TAEN    2005/04
 * @version 1.0
 * @package grn.rss
 */
class GRN_RSS_SystemConfig extends GRN_InspectionBase
{
    var $_app_id = 'rss';

    // can use shared config (0: do not use, 1: use)
    var $col_use_shared = ['type' => 'char', 'length' => '1'];
    // can use personal config (0: cannot, 1: can)
    var $col_use_personal = ['type' => 'char', 'length' => '1'];
    // cache updating intereval (unit: minute)
    var $col_cache_interval = ['type' => 'int'];
    // cache preservation term (unit: day)
    var $col_cache_preservation = ['type' => 'int'];
    // connection timeout (unit: second)
    var $col_timeout = ['type' => 'int'];

    // reserved columns 
    var $col_reserve_text1 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text2 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text3 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_int1 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int2 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int3 = ['type' => 'int', 'lazy' => true];

    var $_col_name;

    function __construct(& $row)
    {
        require_once('rss/resources.csp');
        parent::__construct($row, GRN_RSS_APP_MODULEID);
    }

    /**
     * @param string $action Action name.
     *
     * @return string
     */
    function getInspectionMessage($action)
    {
        switch ($action) {
            case 'update':
                $modifier =& $this->get('modifier');

                return '[system.modify] ' . $this->_col_name . ' '
                       . $this->get($this->_col_name) . ' (uid: '
                       . $modifier->getOID() . ')';
        }
    }

    function onUpdate($user, $col_name = null, $write_log = true)
    {
        $this->_col_name = $col_name;
        parent::onUpdate($user, $col_name, $write_log);
    }

}

/**
 * RSS Table Manager class
 *
 * @author  Eiji TAEN    2005.3
 * @version 1.0
 * @package grn.rss
 */
class GRN_RSS_TableManager
{
    /**
     * table manager
     *
     * @access   private
     */
    var $_tbl_manager = null;

    /**
     * table info list
     *
     * @access   private
     */
    var $_tbl_list;

    /**
     * constructor
     */
    function __construct()
    {
        $this->_tbl_list = [];
    }

    private static $_instance = null;

    /**
     * @return GRN_RSS_TableManager
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * get specified table info
     *
     * @param    string $table_name table name
     *
     * @return   object    CB_TableInfo
     */
    function getTableInfo($table_name)
    {
        if (is_null($this->_tbl_manager)) {
            $app_locator = GRN_ApplicationLocator::instance();
            $this->_tbl_manager = $app_locator->getTableManager('rss');
        }

        if ( ! array_key_exists($table_name, $this->_tbl_list)) {
            $this->_tbl_list[$table_name]
                = $this->_tbl_manager->getTableInfo($table_name);
        }

        return $this->_tbl_list[$table_name];
    }

}


