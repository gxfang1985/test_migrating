<?php

/**
 * Implements for UserList.
 *
 * @author  YOSHIDA, Hideyasu 2005/01
 * @version 1.0
 * @package grn.address
 */

require_once('grn/uum_util.csp');
require_once('address/interface.csp');

/**
 * ユーザー名簿ブッククラス
 *
 * @package grn.address
 */
class GRN_Address_UserListBook extends GRN_Address_BookBase
{
    private static $_instance = null;

    /**
     * シングルトンを取得する
     *
     * @return GRN_Address_UserListBook
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * @access private
     */
    var $_table_manager = null;
    /**
     * @access private
     * @var GRN_Uum
     */
    var $_uum = null;

    /**
     * コンストラクタ
     */
    function __construct()
    {
        global $G_container_base;
        $app_locator = GRN_ApplicationLocator::instance();
        $this->_table_manager = $app_locator->getTableManager('address');
        $this->_uum = $G_container_base->getInstance('uum');
    }

    /**
     * @access private
     */
    var $_datas = [];

    /**
     * ユーザー情報データを新規作成する
     *
     * @access private
     */
    function _newData($row)
    {
        $ret = new GRN_Address_UserListData($this->_datas, $row);

        return $ret;
    }

    /**
     * データタイプを取得する
     *
     * @return  string  ブックのデータタイプ
     */
    function getDataType()
    {
        return GRN_ADDRESS_DATA_USERLIST;
    }

    /**
     * ユーザー情報一覧を取得する
     *
     * @param   int    $offset    一覧開始位置
     * @param   int    $limit     一覧最大件数
     * @param   string $order_by  ソートを行うカラム名
     * @param   string $condition 検索条件
     *
     * @return  array
     */
    function listDatas(
        $offset = 0,
        $limit = -1,
        $order_by = 'tab_cb_user.col_position, tab_cb_user._id',
        $add_condition = null
    ) {
        $rowset = $this->_listDatasRowSet();
        if (0 < strlen($add_condition)) {
            $rowset->addCondition($add_condition);
        }
        $rowset->addOrderColumn($order_by);
        $rowset->limit($offset, $limit);

        $datas = [];
        while ( ! is_null($rows = $rowset->iterate())) {
            $data = $this->_newData($rows['cb_user']);
            $data_id = $data->getOID();
            $datas[$data_id] = $data;
            $data->setUserInfo($rows['grn_userinfo']);
        }

        $this->_setItems($datas);
        $this->_setItemDatas($datas);

        $this->_datas = $datas;

        return $datas;
    }

    /**
     * ユーザー情報一覧件数を取得する
     *
     * @return  int     ユーザー情報一覧件数
     */
    function getDataCount()
    {
        return $this->_uum->getUserCount();
    }

    function _listDatasRowSet()
    {
        $table_info = $this->_uum->getUserTable();
        $rowset = new CB_MultiRowSet($table_info);
        $rowset->addCondition('tab_cb_user.col_deleted IS NULL');
        $table_info = $this->_uum->getUserInfoTable();
        $condition = 'tab_cb_user._id = tab_grn_userinfo.col_user';
        $rowset->addJoin($table_info, $condition, CB_DATABASE_LEFT_JOIN);
        $rowset->setLock(CB_DATABASE_NO_LOCK);

        return $rowset;
    }

    function _listDatasRowSetByMyGroup($mygroup_id)
    {
        $table_info = $this->_uum->_getMyGroupUserTable();
        $rowset = new CB_MultiRowSet($table_info);
        $table_info = $this->_uum->getUserTable();
        $condition = 'tab_grn_mygroupuserrelation.col_user = tab_cb_user._id';
        $condition .= ' AND tab_cb_user.col_deleted IS NULL';
        $rowset->addJoin($table_info, $condition, CB_DATABASE_INNER_JOIN);
        $table_info = $this->_uum->getUserInfoTable();
        $condition = 'tab_cb_user._id = tab_grn_userinfo.col_user';
        $rowset->addJoin($table_info, $condition, CB_DATABASE_LEFT_JOIN);
        $rowset->setLock(CB_DATABASE_NO_LOCK);

        $condition
            = $rowset->queryf("tab_grn_mygroupuserrelation.col_mygroup = '@S'",
            $mygroup_id);
        $rowset->addCondition($condition);

        return $rowset;
    }

    function _listDatasRowSetByGroup($group_id)
    {
        $table_info = $this->_uum->_getUserGroupTable();
        $rowset = new CB_MultiRowSet($table_info);
        $table_info = $this->_uum->getUserTable();
        $condition = 'tab_cb_usergrouprelation.col_user = tab_cb_user._id';
        $condition .= ' AND tab_cb_user.col_deleted IS NULL';
        $rowset->addJoin($table_info, $condition, CB_DATABASE_INNER_JOIN);
        $table_info = $this->_uum->getUserInfoTable();
        $condition = 'tab_cb_user._id = tab_grn_userinfo.col_user';
        $rowset->addJoin($table_info, $condition, CB_DATABASE_LEFT_JOIN);
        $rowset->setLock(CB_DATABASE_NO_LOCK);

        if (strpos($group_id, ',')) {
            $user_conditions = substr($group_id, strpos($group_id, ',') + 1);
            $user_ids = [];
            if (is_numeric($user_conditions) && $user_conditions == 0) {
                $user_ids[] = 0;
            } else {
                $user_ids = explode(",", $user_conditions);
            }
            $group_id = substr($group_id, 0, strpos($group_id, ','));
            $condition
                = $rowset->queryf("tab_cb_usergrouprelation.col_group = '@S' AND tab_cb_usergrouprelation.col_user IN(@A)",
                $group_id, $user_ids);
        } else {
            $condition
                = $rowset->queryf("tab_cb_usergrouprelation.col_group = '@S'",
                $group_id);
        }
        $rowset->addCondition($condition);


        return $rowset;
    }

    function _listDatasRowSetByUsersId($user_id_list)
    {
        if ( ! is_array($user_id_list) || count($user_id_list) <= 0) {
            $__ret = [];

            return $__ret;
        }

        $table_info = $this->_uum->getUserTable();
        $rowset = new CB_MultiRowSet($table_info);
        $rowset->addCondition('tab_cb_user.col_deleted IS NULL');
        $table_info = $this->_uum->getUserInfoTable();
        $condition = 'tab_cb_user._id = tab_grn_userinfo.col_user';
        $rowset->addJoin($table_info, $condition, CB_DATABASE_LEFT_JOIN);
        $rowset->setLock(CB_DATABASE_NO_LOCK);

        $user_conditions = $rowset->queryf("tab_cb_user._id IN(@A)",
            $user_id_list);
        $rowset->addCondition($user_conditions);

        return $rowset;
    }

    /**
     * 指定されたIDのユーザー情報一覧を取得する
     *
     * @param   array  $user_id_list 取得するユーザーIDのリスト
     * @param   int    $offset       一覧開始位置
     * @param   int    $limit        一覧最大件数
     * @param   string $order_by     ソートを行うカラム名
     */
    function listDatasByUsersId(
        $user_id_list,
        $offset = 0,
        $limit = -1,
        $order_by = 'tab_cb_user.col_position, tab_cb_user._id'
    ) {
        if ( ! is_array($user_id_list) || count($user_id_list) <= 0) {
            return [];
        }

        $rowset = $this->_listDatasRowSetByUsersId($user_id_list);

        $rowset->addOrderColumn($order_by);
        $rowset->limit($offset, $limit);

        $datas = [];
        while ( ! is_null($rows = $rowset->iterate())) {
            $data = $this->_newData($rows['cb_user']);
            $data_id = $data->getOID();
            $datas[$data_id] = $data;
            $data->setUserInfo($rows['grn_userinfo']);
        }

        $this->_setItems($datas);
        $this->_setItemDatas($datas);

        $this->_datas = $datas;

        return $datas;
    }

    /**
     * グループに所属するユーザー情報一覧を取得する
     *
     * @param   int    $group_id グループID（先頭文字がmならMyグループID）
     * @param   int    $offset   一覧開始位置
     * @param   int    $limit    一覧最大件数
     * @param   string $order_by ソートを行うカラム名
     */
    function listDatasByGroupId(
        $group_id,
        $offset = 0,
        $limit = -1,
        $order_by = 'tab_cb_user.col_position, tab_cb_user._id'
    ) {
        if ('m' == $group_id{0}) {
            $rowset = $this->_listDatasRowSetByMyGroup(substr($group_id, 1));
        } else {
            $rowset = $this->_listDatasRowSetByGroup($group_id);
        }

        $rowset->addOrderColumn($order_by);
        $rowset->limit($offset, $limit);

        $datas = [];
        while ( ! is_null($rows = $rowset->iterate())) {
            $data = $this->_newData($rows['cb_user']);
            $data_id = $data->getOID();
            $datas[$data_id] = $data;
            $data->setUserInfo($rows['grn_userinfo']);
        }

        $this->_setItems($datas);
        $this->_setItemDatas($datas);

        $this->_datas = $datas;

        return $datas;
    }

    /**
     * グループに所属するユーザー情報一覧の件数を取得する
     *
     * @param   int $group_id グループID（先頭文字がmならMyグループID）
     */
    function getDataCountByGroupId($group_id)
    {
        if ('m' == $group_id{0}) {
            $rowset = $this->_listDatasRowSetByMyGroup(substr($group_id, 1));
        } else {
            $rowset = $this->_listDatasRowSetByGroup($group_id);
        }
        $rowset->applyGroupFunctions(['count' => 'COUNT(*)'],
            ['_id' => 'tab_cb_user._id']);

        return $rowset->count();
    }

    function _getFullTextSearchDataRowSet(
        $order_by,
        $texts,
        $is_sensitive,
        $builtin_items,
        $cellular = false
    ) {
        $columns = $this->_uum->listDefaultItemIdsWithCategory();

        unset($columns['locale']);
        $columns['userinfo'] = array_diff($columns["userinfo"],
            ["primary_group", "image"]);
        $columns['user'] = array_diff($columns['user'], ["position"]);

        $table_info = $this->_uum->getUserTable();
        $rowset = new CB_MultiRowSet($table_info);
        $rowset->addCondition('tab_cb_user.col_deleted IS NULL');
        $table_info = $this->_uum->getUserInfoTable();
        $condition = 'tab_cb_user._id = tab_grn_userinfo.col_user';
        $rowset->addJoin($table_info, $condition, CB_DATABASE_LEFT_JOIN);
        $rowset->setLock(CB_DATABASE_NO_LOCK);

        $query = 'LIKE';
        if ($is_sensitive) {
            $query .= ' BINARY';
        }

        $user_format = "( tab_cb_user.col_@S " . $query . " '%@L%' )";
        $userinfo_format = "( tab_grn_userinfo.col_@S " . $query . " '%@L%' )";

        $extended_format = "("
                           . "("
                           . "SELECT "
                           . "GROUP_CONCAT(r.col_string SEPARATOR ' ') "
                           . "FROM tab_grn_itemuserrelation r INNER JOIN tab_grn_useritem i ON r.col_item = i._id "
                           . "WHERE "
                           . "(r.col_user = tab_cb_user._id) AND "
                           . '(i.col_use IS NOT NULL AND i.col_use <> 0) AND '
                           . '(i.col_show IS NOT NULL AND i.col_show <> 0) AND '
                           . '(i.col_search IS NOT NULL AND i.col_search <> 0) AND '
                           . '(i.col_type <> "image") AND '
                           . '(i.col_type <> "password") '
                           . ") "
                           . $query
                           . " '%@L%')";
        $user_search = [
            'display_name'  => 1,
            'foreign_key'   => 1,
            'sort_key'      => 1,
            'email_address' => 1,
            'post'          => 1,
            'nickname'      => 1
        ];
        if ($cellular) {
            unset($user_search['nickname']);
        }
        foreach ($texts as $text) {
            $conditions = [];
            foreach ($columns['user'] as $column) {
                if (array_key_exists($column, $builtin_items)
                    && array_key_exists($column, $user_search)
                ) {
                    $item = $builtin_items[$column];
                    if ($item['use'] && $item['show']) {
                        if ($column == "sort_key") {
                            $conditions[] = $rowset->queryf($user_format,
                                "normalized_sort_key",
                                cb_normalize_sort_key($text));
                        }
                        $conditions[] = $rowset->queryf($user_format, $column,
                            $text);
                    }
                }
            }
            foreach ($columns['userinfo'] as $column) {
                if (array_key_exists($column, $builtin_items)
                    && array_key_exists($column, $user_search)
                ) {
                    $item = $builtin_items[$column];
                    if ($item['use'] && $item['show']) {
                        $conditions[] = $rowset->queryf($userinfo_format,
                            $column, $text);
                    }
                }
            }
            $conditions[] = $rowset->queryf($extended_format, $text);
            $rowset->addCondition(implode(' OR ', $conditions));
        }

        if ( ! is_string($order_by) || 0 == strlen($order_by)) {
            $order_by = 'tab_cb_user._id';
        }
        $rowset->addOrderColumn($order_by);

        return $rowset;
    }

    /**
     * 全文検索し、検索条件にヒットしたユーザー情報一覧を取得する
     *
     * @param   int    $offset        一覧開始位置
     * @param   int    $limit         一覧最大件数
     * @param   string $order_by      ソートを行うカラム名
     * @param string[] $texts         検索単語一覧
     * @param bool     $is_sensitive  大文字小文字を区別するフラグ
     * @param   array  $builtin_items 組み込み項目設定
     * @param bool     $cellular
     *
     * @return array
     */
    function listFullTextSearchDatas(
        $offset = 0,
        $limit = -1,
        $order_by = 'tab_cb_user.col_position, tab_cb_user._id',
        $texts = null,
        $is_sensitive = false,
        $builtin_items = null,
        $cellular = false
    ) {
        // 検索結果を重複させないため、ユーザーIDでグループ化し検索する
        $rowset = $this->_getFullTextSearchDataRowSet($order_by, $texts,
            $is_sensitive, $builtin_items, $cellular);
        $rowset->applyGroupFunctions(['count' => 'COUNT(*)'],
            [
                'col_position' => 'tab_cb_user.col_position',
                '_id'          => 'tab_cb_user._id'
            ]);
        $rowset->limit($offset, $limit);

        // 取得するユーザーを列挙する
        $conditions = [];
        while ( ! is_null($row = $rowset->iterate())) {
            if (0 < $row['count']) {
                $conditions[] = $rowset->queryf("tab_cb_user._id = '@S'",
                    $row['_id']);
            }
        }

        $condition = implode(' OR ', $conditions);

        // ユーザー情報一覧を取得する
        if (0 == strlen($condition)) {
            $ret = [];

            return $ret;
        }

        $ret = $this->listDatas(0, $limit, $order_by, $condition);

        return $ret;
    }

    /**
     * 全文検索し、検索条件にヒットした全件数を取得する
     *
     * @param null    $texts         検索単語一覧
     * @param bool    $is_sensitive  大文字小文字を区別するフラグ
     * @param   array $builtin_items 組み込み項目設定
     *
     * @return int
     */
    function getFullTextSearchDataCount(
        $texts = null,
        $is_sensitive = false,
        $builtin_items = null
    ) {
        // 検索結果を重複させないため、ユーザーIDでグループ化し検索する
        $rowset = $this->_getFullTextSearchDataRowSet(null, $texts,
            $is_sensitive, $builtin_items);
        $rowset->applyGroupFunctions(['count' => 'COUNT(*)'],
            ['_id' => 'tab_cb_user._id']);

        // 検索条件にヒットした全件数を取得する
        return $rowset->count();
    }

    /**
     * @access private
     */
    var $_items = [];

    /**
     * アドレス帳のカスタマイズ項目を取得する
     *
     * @param   int $item_id カスタマイズ項目ID
     *
     * @return  object
     */
    function getItem($item_id)
    {
        assert('! is_null( $item_id ) && 0 < strlen( $item_id )');

        if (array_key_exists($item_id, $this->_items)) {
            return $this->_items[$item_id];
        }

        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');

        if (false === ($row = $uum->getItem($item_id))) {
            {
                $___ret = false;

                return $___ret;
            }
        }
        $this->_items[$row->getOID()] = $row;

        return $row;
    }

    /**
     * アドレス帳のカスタマイズ項目一覧を取得する
     */
    function listItems($id = null)
    {
        $this->_items = $this->_uum->listItems();

        return $this->_items;
    }

    /**
     * ユーザー情報拡張項目を設定する
     *
     * @param GRN_Address_UserListData[] $datas
     */
    function _setItems($datas)
    {
        $items = $this->_uum->listItems();

        $this->_items = [];
        foreach (array_keys($items) as $item_id) {
            $item = $items[$item_id];
            $this->_items[$item->getOID()] = $item;
        }

        foreach (array_keys($datas) as $data_id) {
            $data = $datas[$data_id];
            $data->setItems($this->_items);
        }
    }

    /**
     * ユーザー情報拡張項目とユーザーの関連付けを設定する
     *
     * @param GRN_Address_UserListData[] $datas
     */
    function _setItemDatas($datas)
    {
        if (0 < count($datas)) {
            $rowset = new CB_RowSet($this->_uum->getItemUserRelationTable(),
                'r');
            $rowset->addJoin($this->_uum->getItemTable(), 'r.col_item = i._id',
                CB_DATABASE_INNER_JOIN, 'i');
            $conditions = [];
            foreach (array_keys($datas) as $data_id) {
                $conditions[] = $rowset->queryf("r.col_user = '@S'", $data_id);
            }
            $condition = implode(' OR ', $conditions);
            $rowset->addCondition($condition);

            while ( ! is_null($row = $rowset->iterate())) {
                if (false === ($user = $row->get('user'))) {
                    continue;
                }
                $user_id = $user->getOID();
                $data = $datas[$user_id];
                $data->setItemData($row);
            }
        }
    }

}

/**
 * ユーザー名簿データクラス
 *
 * @package grn.address
 */
class GRN_Address_UserListData extends GRN_Address_DataBase
{
    /**
     * @access private
     */
    var $_uum = null;
    /**
     * @access private
     */
    var $_children = null;
    /**
     * @access private
     */
    var $_row = null;

    /**
     * コンストラクタ
     */
    function __construct(& $children, $row)
    {
        global $G_container_base;
        $this->_uum = $G_container_base->getInstance('uum');

        $this->_children =& $children;
        $this->_row = $row;
    }

    /**
     * カラム一覧を取得する
     */
    function listColumns($is_real = false)
    {
        $user = [
            'display_name',         // 表示名
            'display_name_language', // 名前の言語
            'nickname',             // 英語表記
            'given_name',           // 名
            'family_name',          // 姓
            'initials',             // 頭文字
            'foreign_key',          // ログイン名
            'locale',               // ロケール
            'base',                 // 拠点
            'sort_key',             // よみ
            'email_address',        // E-mailアドレス
            'physical_address',     // 住所
            'telephone_number',     // 電話番号
            'facsimile_number',     // Fax番号
            'url',                  // URL
            'room_number',          // 部屋番号
            'employee_number',      // 社員番号
            'birthdate',            // 生年月日
            'description'
        ];        // メモ

        $userinfo = [
            'primary_group',     // 優先する組織
            'image',             // 画像ファイル
            'post',              // 役職
            'attendee',          // 在席情報
            'attendee_mtime'
        ];  // 在席情報最終更新日時

        if ($is_real) {
            $columns = array_merge($user, $userinfo);

            return array_merge($columns, array_keys($this->_items));
        }

        return [
            'user'     => $user,
            'userinfo' => $userinfo
        ];
    }

    function _createFile($file)
    {
        if (UPLOAD_ERR_OK != $file['error']) {
            if (0 < strlen($file['name'])) {
                cb_throw_error(E_GRN_UPLOADING_FAILED);
            } else {
                {
                    $___ret = null;

                    return $___ret;
                }
            }
        }

        require_once('address/file.csp');
        $file_manager = new GRN_Address_FileManager_Core();
        $login = $this->_uum->getLoginUser();
        $ret = $file_manager->createFile($login, $file, null);

        return $ret;
    }

    /**
     * @access private
     * @var GRN_UserInfo $_userinfo
     */
    var $_userinfo = null;

    /**
     * ユーザー情報を設定する
     */
    function setUserInfo($userinfo)
    {
        assert('is_object( $userinfo ) && is_a( $userinfo, \'GRN_UserInfo\' )');

        $this->_userinfo = $userinfo;
    }

    /**
     * @access private
     */
    var $_items = [];

    /**
     * ユーザー情報拡張項目一覧を設定する
     */
    function setItems(& $items)
    {
        assert('is_array( $items )');

        $this->_items =& $items;
    }

    /**
     * @access private
     */
    var $_itemdatas = [];

    /**
     * ユーザー情報拡張項目とユーザーの関連付けを設定する
     */
    function setItemData($itemdata)
    {
        assert('is_object( $itemdata ) && is_a( $itemdata, \'GRN_ItemUserRelation\' )');

        if (false === ($item = $itemdata->get('item'))) {
            return false;
        }

        assert('is_object( $item ) && is_a( $item, \'GRN_UserItem\' )');

        $this->_itemdatas[$item->getOID()] = $itemdata;

        return true;
    }

    /**
     * プロパティを取得する
     */
    function &getProperty($key, $file_status = null)
    {
        assert('! is_null( $key ) && 0 < strlen( $key )');

        $columns = $this->listColumns();

        if (false !== array_search($key, $columns['user'])) {
            $ret =& $this->_row->get($key);

            return $ret;
        }

        if (false !== array_search($key, $columns['userinfo'])) {
            if ('image' == $key) {
                $file = $this->_userinfo->get($key);
                if (is_object($file) && is_a($file, 'GRN_File')) {
                    if ('copy' == $file_status) {
                        return $file;
                    } else {
                        $body = $file->getCurrentBody();
                        if ('sso' == $file_status) {
                            $ret =& $body->get('name');

                            return $ret;
                        } else {
                            $ret = [
                                'oid'  => $file->getOID(),
                                'name' => $body->get('name'),
                                'mime' => $body->get('mime')
                            ];

                            return $ret;
                        }
                    }
                }
            } else {
                $ret =& $this->_userinfo->get($key);

                return $ret;
            }
        }

        if (array_key_exists($key, $this->_itemdatas)) {
            $itemdata = $this->_itemdatas[$key];
            $item = $itemdata->get('item');
            $item_type = $item->get('type');
            if (GRN_ADDRESS_ITEM_FILE == $item_type) {
                $file = $itemdata->get('file');
                if (is_object($file) && is_a($file, 'GRN_File')) {
                    if ('copy' == $file_status) {
                        return $file;
                    } else {
                        $body = $file->getCurrentBody();
                        if ('sso' == $file_status) {
                            $ret =& $body->get('name');

                            return $ret;
                        } else {
                            $ret = [
                                'oid'  => $file->getOID(),
                                'name' => $body->get('name'),
                                'mime' => $body->get('mime')
                            ];

                            return $ret;
                        }
                    }
                }
            } elseif ('password' == $item_type) {
                $ret = '***************';

                return $ret;
            } else {
                $ret =& $itemdata->get('string');

                return $ret;
            }
        }
        {
            $___ret = false;

            return $___ret;
        }
    }

    /**
     * プロパティ一覧を取得する
     */
    function getProperties($file_status = null)
    {
        $columns = $this->listColumns();

        $properties = [];
        foreach ($columns['user'] as $column) {
            $properties[$column] = $this->_row->get($column);
        }

        foreach ($columns['userinfo'] as $column) {
            $value = null;
            if ('image' == $column) {
                $file = $this->_userinfo->get($column);
                if (is_object($file) && is_a($file, 'GRN_File')) {
                    if ('copy' == $file_status) {
                        $value = $file;
                    } else {
                        $body = $file->getCurrentBody();
                        if ('sso' == $file_status) {
                            $value = $body->get('name');
                        } else {
                            $value = [
                                'oid'  => $file->getOID(),
                                'name' => $body->get('name'),
                                'mime' => $body->get('mime')
                            ];
                        }
                    }
                }
            } else {
                $value = $this->_userinfo->get($column);
            }
            $properties[$column] = $value;
        }

        foreach (array_keys($this->_items) as $id) {
            if (array_key_exists($id, $this->_itemdatas)) {
                $itemdata = $this->_itemdatas[$id];
                $item = $itemdata->get('item');
                $item_type = $item->get('type');
                if (GRN_ADDRESS_ITEM_FILE == $item_type) {
                    $file = $itemdata->get('file');
                    if (is_object($file) && is_a($file, 'GRN_File')) {
                        if ('copy' == $file_status) {
                            $value = $file;
                        } else {
                            $body = $file->getCurrentBody();
                            if ('sso' == $file_status) {
                                $properties[$id] = $body->get('name');
                            } else {
                                $properties[$id] = [
                                    'oid'  => $file->getOID(),
                                    'name' => $body->get('name'),
                                    'mime' => $body->get('mime')
                                ];
                            }
                        }
                    }
                } elseif ('password' == $item_type) {
                    $properties[$id] = '***************';
                } else {
                    $properties[$id] = $itemdata->get('string');
                }
            }
        }

        return $properties;
    }

    /**
     * オブジェクトIDを取得する
     */
    function getOID()
    {
        return $this->_row->getOID();
    }

}


