<?php

/**
 * Inspection for Address.
 *
 * @author  YOSHIDA, Hideyasu 2005/03
 * @version 1.0
 * @package grn.address
 */

require_once('address/error_code.csp');
require_once('address/resources.csp');
require_once('address/table.csp');

class GRN_Address_Inspection extends CB_ModuleBase
{
    private static $_instance = null;

    /**
     * @static
     * @return GRN_Address_Inspection
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    var $_logger = null;

    var $_uum = null;

    function __construct()
    {
        require_once('grn/logger.csp');
        $logger_manager = CB_LoggerManager::getInstance();

        parent::__construct(GRN_ADDRESS_MODULE_ID);

        $this->_logger = $logger_manager->getLogger($this->getModuleId());

        global $G_container_base;
        $this->_uum = $G_container_base->getInstance('uum');
    }

    function isEnabled()
    {
        return $this->_logger->isNoticeEnabled();
    }

    function _getInspectionMessage(
        $action,
        $target,
        $params = [],
        $informations = []
    ) {
        $messages = [];
        foreach ($params as $key => $value) {
            $messages[$key] = $value;
        }
        foreach ($informations as $key => $value) {
            if (is_object($value)) {
                if (is_a($value, 'GRN_File')) {
                    $body = $value->getCurrentBody();
                    $messages[$key] = $body->get('name');
                }
            } else {
                $messages[$key] = $value;
            }
        }

        return $messages;
    }

    function record($action, $target, $params = [], $informations = [])
    {
        $properties = $this->_getInspectionMessage($action, $target, $params,
            $informations);
        $this->_logger->noticeEx($action, $target, $properties);
    }
}

class GRN_Address_Sharedbook_Local_Inspection extends GRN_Address_Inspection
{
    /** Inspacetion Message Template List **/
    var $_template_list = null;

    /**
     * Constructor
     *
     */
    public function __construct()
    {
        parent::__construct();

        $template_list = [
            'sharedbook_local_add'    => [
                'action' => 'create',
                'target' => 'sharedbook_local',
            ],
            'sharedbook_local_modify' => [
                'action' => 'modify',
                'target' => 'sharedbook_local',
            ],
            'sharedbook_local_delete' => [
                'action' => 'delete',
                'target' => 'sharedbook_local',
            ],
        ];

        //Set Template List
        $this->_template_list = $template_list;
    }

    /**
     * Get Instance
     *
     * return GRN_Address_Sharedbook_Local_Inspection $instance
     */
    private static $_instance = null;

    /**
     * @return GRN_Address_Inspection
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    function isEnabled($threshold = 'notice')
    {
        //Check Threshold
        $result = false;
        switch ($threshold) {
            case 'critical':
                $result = $this->_logger->isCriticalEnabled();
                break;
            case 'error':
                $result = $this->_logger->isErrorEnabled();
                break;
            case 'warning':
                $result = $this->_logger->isWarningEnabled();
                break;
            case 'notice':
                $result = $this->_logger->isNoticeEnabled();
                break;
            case 'info':
                $result = $this->_logger->isInfoEnabled();
                break;
            case 'debug':
                $result = $this->_logger->isDebugEnabled();
                break;
            default:
                $result = false;
                break;
        }

        //Return Result
        return $result;
    }

    /**
     * Record Inspection Message
     *
     * @param  string $message_type //Inspection Message Type
     * @param  array  $message_args //Inspection Message Argument List
     *
     * @return bool   $result                     //Result
     */
    function write($message_type, $message_args = [])
    {
        //Get Inspection Message Template
        if ( ! array_key_exists($message_type, $this->_template_list)) {
            return false;
        }
        $message_template = $this->_template_list[$message_type];

        $message_action = $message_template['action'];
        $message_target = $message_template['target'];

        $this->_logger->noticeEx($message_action, $message_target,
            $message_args);

        //Return Result
        return true;
    }
}

