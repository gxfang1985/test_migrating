<?php

class GRN_Address_CharMap_Util
{
    var $_char_map = [];

    function __construct()
    {
        $this->_createCharMap();
    }

    /**
     * @return GRN_Address_CharMap_Util
     */
    public static function getInstance()
    {
        static $_instance;
        if (is_null($_instance)) {
            $_instance = new GRN_Address_CharMap_Util();
        }

        return $_instance;
    }

    function _createCharMap()
    {
        $char_map = [
            ['あ', 'ア', 'ｱ', 'ぁ', 'ァ', 'ｧ'],
            ['い', 'イ', 'ｲ', 'ぃ', 'ィ', 'ｨ'],
            ['う', 'ウ', 'ｳ', 'ぅ', 'ゥ', 'ｩ'],
            ['え', 'エ', 'ｴ', 'ぇ', 'ェ', 'ｪ'],
            ['お', 'オ', 'ｵ', 'ぉ', 'ォ', 'ｫ'],
            ['か', 'カ', 'ｶ', 'が', 'ガ', 'ｶﾞ'],
            ['き', 'キ', 'ｷ', 'ぎ', 'ギ', 'ｷﾞ'],
            ['く', 'ク', 'ｸ', 'ぐ', 'グ', 'ｸﾞ'],
            ['け', 'ケ', 'ｹ', 'げ', 'ゲ', 'ｹﾞ'],
            ['こ', 'コ', 'ｺ', 'ご', 'ゴ', 'ｺﾞ'],
            ['さ', 'サ', 'ｻ', 'ざ', 'ザ', 'ｻﾞ'],
            ['し', 'シ', 'ｼ', 'じ', 'ジ', 'ｼﾞ'],
            ['す', 'ス', 'ｽ', 'ず', 'ズ', 'ｽﾞ'],
            ['せ', 'セ', 'ｾ', 'ぜ', 'ゼ', 'ｾﾞ'],
            ['そ', 'ソ', 'ｿ', 'ぞ', 'ゾ', 'ｿﾞ'],
            ['た', 'タ', 'ﾀ', 'だ', 'ダ', 'ﾀﾞ'],
            ['ち', 'チ', 'ﾁ', 'ぢ', 'ヂ', 'ﾁﾞ'],
            ['つ', 'ツ', 'ﾂ', 'づ', 'ヅ', 'ﾂﾞ', 'っ', 'ッ', 'ｯ'],
            ['て', 'テ', 'ﾃ', 'で', 'デ', 'ﾃﾞ'],
            ['と', 'ト', 'ﾄ', 'ど', 'ド', 'ﾄﾞ'],
            ['な', 'ナ', 'ﾅ'],
            ['に', 'ニ', 'ﾆ'],
            ['ぬ', 'ヌ', 'ﾇ'],
            ['ね', 'ネ', 'ﾈ'],
            ['の', 'ノ', 'ﾉ'],
            ['は', 'ハ', 'ﾊ', 'ば', 'バ', 'ﾊﾞ', 'ぱ', 'パ', 'ﾊﾟ'],
            ['ひ', 'ヒ', 'ﾋ', 'び', 'ビ', 'ﾋﾞ', 'ぴ', 'ピ', 'ﾋﾟ'],
            ['ふ', 'フ', 'ﾌ', 'ぶ', 'ブ', 'ﾌﾞ', 'ぷ', 'プ', 'ﾌﾟ'],
            ['へ', 'ヘ', 'ﾍ', 'べ', 'ベ', 'ﾍﾞ', 'ぺ', 'ペ', 'ﾍﾟ'],
            ['ほ', 'ホ', 'ﾎ', 'ぼ', 'ボ', 'ﾎﾞ', 'ぽ', 'ポ', 'ﾎﾟ'],
            ['ま', 'マ', 'ﾏ'],
            ['み', 'ミ', 'ﾐ'],
            ['む', 'ム', 'ﾑ'],
            ['め', 'メ', 'ﾒ'],
            ['も', 'モ', 'ﾓ'],
            ['や', 'ヤ', 'ﾔ', 'ゃ', 'ャ', 'ｬ'],
            ['ゆ', 'ユ', 'ﾕ', 'ゅ', 'ュ', 'ｭ'],
            ['よ', 'ヨ', 'ﾖ', 'ょ', 'ョ', 'ｮ'],
            ['ら', 'ラ', 'ﾗ'],
            ['り', 'リ', 'ﾘ'],
            ['る', 'ル', 'ﾙ'],
            ['れ', 'レ', 'ﾚ'],
            ['ろ', 'ロ', 'ﾛ'],
            ['わ', 'ワ', 'ﾜ', 'ゎ', 'ヮ'],
            ['を', 'ヲ', 'ｦ'],
            ['ん', 'ン', 'ﾝ']
        ];

        for ($i = 65; $i <= 90; $i++) {
            $char = chr($i);
            $char_map[] = [
                $char,
                strtolower($char),
                mb_convert_kana($char, 'A'),
                mb_convert_kana(strtolower($char), 'A')
            ];
        }

        $this->_char_map = $char_map;
    }

    function getCharsByIndex($charIdx)
    {
        $retVal = null;
        if (array_key_exists($charIdx, $this->_char_map)) {
            $retVal = $this->_char_map[$charIdx];
        }

        return $retVal;
    }

    public function getConditionByChars($chars)
    {
        $conditions = [];
        foreach ($chars as $c) {
            $conditions[]
                = "concat( ltrim(col_family_sort_key), ltrim(col_given_sort_key) ) LIKE '"
                  . $c . "%'";
        }

        $condition = implode(" OR ", $conditions);

        return $condition;
    }
}

