<?php
require_once('address/table.csp');

define('GRN_ADDRESS_MYGROUP_DATA_TYPE_SHARED', 1);
define('GRN_ADDRESS_MYGROUP_DATA_TYPE_PRIVATE', 2);
define('GRN_ADDRESS_MYGROUP_DATA_TYPE_USER', 3);

class GRN_Address_MyGroupData_Logic
{
    var $_mygroupdata = null;

    function __construct()
    {
        $this->_mygroupdata = cb_class2table('GRN_Address_MyGroupData');
    }

    /** @var  GRN_Address_MyGroupData_Logic */
    private static $_instance = null;

    /**
     * @return GRN_Address_MyGroupData_Logic
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /*
    * Get all items of group
    * @param    $mygroup    GRN_Address_MyGroup
    * @return   mixed       CB_Row
    */
    function _getGroupData($mygroup)
    {
        global $G_container_base;
        $dbconn = $G_container_base->getInstance('dbconn');
        $rowset = new CB_RowSet($this->_mygroupdata, 'mg');
        $condition = $rowset->queryf("mg.col_mygroup = '@S'",
            $mygroup->getOID());

        $rowset->addCondition($condition);

        // ユーザー名簿中の削除フラグがたっているユーザーを選ばないようにする
        $add_condition
            = '( col_user_address IN ( SELECT _id FROM tab_cb_user WHERE col_deleted IS NULL) OR col_user_address IS NULL )';
        $rowset->addCondition($add_condition);

        return $rowset;
    }

    function _getAccessForView()
    {
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $login = $uum->getLoginUser();

        // 使用権限を取得する
        require_once('address/access.csp');
        $access_manager = GRN_Address_AccessManager::getInstance();
        if ( ! ($row
            = $access_manager->getAbstractData(GRN_ADDRESS_AVAILABLE))
        ) {
            assert('FALSE');
        }

        // ダイナミックロールを取得する
        $dynamic_roles = $uum->listGrantedRoles();

        // 使用権限を評価する
        $authorities = ['private_address', 'shared_address'];
        $security_model = $access_manager->getSecurityModel($row);
        $access = $access_manager->evaluateAccess($row, $login,
            $dynamic_roles, $authorities, $security_model);

        // 個人アドレス帳の使用権限を評価する
        $authorities = ['private_address'];
        $access_for_view['private_address']
            = $access_manager->isAllowedAccess($access, $authorities,
            $security_model);

        // 共有アドレス帳の使用権限を評価する
        $authorities = ['shared_address'];
        $access_for_view['shared_address']
            = $access_manager->isAllowedAccess($access, $authorities,
            $security_model);

        return $access_for_view;
    }

    /*
    * Add address item to group
    * @param    $user       CB_User
    * @param    $mygroup    GRN_Address_MyGroup
    * @param    $item       mixed (GRN_Address_SharedData, GRN_Address_PrivateData, CB_User)
    * @return   mixed       CB_Row          new GroupData row
    *                                       return FALSE if can not create item
    */
    function addItem($mygroup, $item)
    {
        if ( ! is_object($mygroup) || ! is_a($mygroup, 'GRN_Address_MyGroup')) {
            return false;
        }

        assert('is_a($item, "GRN_Address_SharedData")
                 || is_a($item, "GRN_Address_PrivateData")
                 || is_a($item, "CB_User")');

        $type = null;
        $address_type = null;

        $row = $this->_mygroupdata->newRow();

        switch (strtolower(get_class($item))) {
            case "grn_address_shareddata":
                $row->set('shared_address', $item);
                $address_type = GRN_ADDRESS_MYGROUP_DATA_TYPE_SHARED;
                break;
            case "grn_address_privatedata":
                $row->set('private_address', $item);
                $address_type = GRN_ADDRESS_MYGROUP_DATA_TYPE_PRIVATE;
                break;
            case "cb_user":
                $row->set('user_address', $item);
                $address_type = GRN_ADDRESS_MYGROUP_DATA_TYPE_USER;
                break;
        }

        $row->set('type', $address_type);
        $row->set('mygroup', $mygroup);

        $row->registerNow();

        return $row;
    }

    /*
    * Get address item
    * @param    string  $id         item ID
    * @return   mixed   CB_Row      item row
    *                               return FALSE if item_id not found
    */
    function getItem($id)
    {
        global $G_container_base;
        $dbconn = $G_container_base->getInstance('dbconn');

        $row = $this->_mygroupdata->getRow($id);
        if ( ! $row || is_null($row->get('user_address'))) {
            $ret = false;

            return $ret;
        }

        return $row;
    }

    function getItemByAddressID($mygroup_id, $address_type, $address_id)
    {
        global $G_container_base;
        $dbconn = $G_container_base->getInstance('dbconn');
        $rowset = new CB_RowSet($this->_mygroupdata);

        switch ($address_type) {
            case GRN_ADDRESS_MYGROUP_DATA_TYPE_SHARED:
                $address_col = 'col_shared_address';
                break;
            case GRN_ADDRESS_MYGROUP_DATA_TYPE_PRIVATE:
                $address_col = 'col_private_address';
                break;
            case GRN_ADDRESS_MYGROUP_DATA_TYPE_USER:
                $address_col = 'col_user_address';
                break;
            default:
                return false;
        }

        $condition = $rowset->queryf("( col_mygroup = '@S' ) AND "
                                     . $address_col . " = '@S' ",
            $dbconn->escape($mygroup_id),
            $dbconn->escape($address_id));

        $rowset->addCondition($condition);

        // ユーザー名簿中の削除フラグがたっているユーザーを選ばないようにする
        $add_condition
            = '( col_user_address IN ( SELECT _id FROM tab_cb_user WHERE col_deleted IS NULL) OR col_user_address IS NULL )';
        $rowset->addCondition($add_condition);

        $row = $rowset->iterate();

        return $row;
    }

    function deleteItem($id)
    {
        $row = $this->getItem($id);
        if ($row) {
            return $row->delete();
        }

        return true;
    }

    function getGroupData($mygroup, &$allow_books, $offset = 0, $limit = -1)
    {
        $access_for_view = $this->_getAccessForView();

        global $G_container_base;
        $dbconn = $G_container_base->getInstance('dbconn');
        $rowset = null;

        $allow_books_id = array_keys($allow_books);

        $_shareddata_table = cb_class2table('GRN_Address_SharedData');

        $rowset = new CB_MultiRowSet($this->_mygroupdata, 'mg');
        $condition = '(mg.col_shared_address = sd._id)';

        $rowset->addJoin($_shareddata_table, $condition, CB_DATABASE_LEFT_JOIN,
            'sd');

        if ( ! $access_for_view['shared_address']
             || count($allow_books) === 0
        ) {
            // dot not get record of any shared book
            $condition = "col_mygroup = '@S' AND sd.col_book is null";
            $condition = $rowset->queryf($condition, $mygroup->getOID());
        } else {
            // get only records in allow_books
            $condition
                = "col_mygroup = '@S' AND ( sd.col_book is null OR sd.col_book IN (@A) )";
            $condition = $rowset->queryf($condition, $mygroup->getOID(),
                $allow_books_id);
        }

        if ( ! $access_for_view['private_address']) {
            // do not get record of private book
            $rowset->addCondition('col_private_address is null');
        }

        $rowset->addCondition($condition);

        // ユーザー名簿中の削除フラグがたっているユーザーを選ばないようにする
        $add_condition
            = '( col_user_address IN ( SELECT _id FROM tab_cb_user WHERE col_deleted IS NULL) OR col_user_address IS NULL )';
        $rowset->addCondition($add_condition);

        $order = 'col_list_index';
        $rowset->addOrderColumn($order);
        $rowset->limit($offset, $limit);

        return $rowset;
    }

    /*
    * get user search in my address group
    * @param    GRN_Address_MyGroup $mygroup
    * @param    string               $order
    * @param   string                $sub_condition
    * @return   array                $group_data_view
    */
    function &getDataSearchUsersGroup(
        $mygroup,
        $order = 'tab_cb_user.col_list_index,tab_cb_user._id',
        $offset = 0,
        $limit = -1,
        $sub_condition = null
    ) {
        global $G_container_base;
        $dbconn = $G_container_base->getInstance('dbconn');
        $rowset = null;
        $_userdata_table = cb_class2table('cb_user');
        $rowset = new CB_MultiRowSet($this->_mygroupdata, 'mg');
        $join_condition
            = 'mg.col_user_address = tab_cb_user._id AND tab_cb_user.col_deleted IS NULL';
        $rowset->addJoin($_userdata_table, $join_condition,
            CB_DATABASE_INNER_JOIN);

        $table_userInfo = cb_class2table('grn_userinfo');
        $rowset->addJoin($table_userInfo,
            "tab_cb_user._id = tab_grn_userinfo.col_user");

        $condition = " mg.col_mygroup = '@S' ) AND " . $sub_condition;
        $condition = $rowset->queryf($condition, $mygroup->getOID());

        $rowset->addCondition($condition);

        $rowset->addOrderColumn($order);
        $rowset->limit($offset, $limit);
        $group_data_view = [];
        $uum = cb_lwc_uum();
        while ( ! is_null($row =& $rowset->iterate())) {
            $row_mg = $row['mg'];
            $address
                = $row_mg->get('user_address');
            $name
                = $uum->getOnlyOneNameByUserObject($address);
            $id = $row_mg->getOID();
            $email
                = $address->get('email_address');
            $group_data_view[$id]['uid'] = $address->getOID();
            $group_data_view[$id]['display_name'] = $name;
            $group_data_view[$id]['email_address'] = $email;
        }

        return $group_data_view;
    }

    function countDatas($mygroup, &$allow_books)
    {
        $rows = $this->getGroupData($mygroup, $allow_books, 0, -1);
        $count = $rows->count();

        return $count;
    }

    /*
    * Add/Remove address/user in group
    * @param    GRN_Address_MyGroup $mygroup
    * @param    array               $items
    * @return   bool                true:success
    */
    function changeGroupData($mygroup, $items, &$allow_books)
    {
        if ( ! is_object($mygroup) || ! is_a($mygroup, 'GRN_Address_MyGroup')) {
            return false;
        }

        $access_for_view = $this->_getAccessForView();

        // delete address not in update list
        $current_items = $this->_getGroupData($mygroup);
        $current_item_list = [];
        $address_col = null;
        while ($row = $current_items->iterate()) {
            switch ($row->get('type')) {
                case GRN_ADDRESS_MYGROUP_DATA_TYPE_SHARED:
                    $address_col = 'shared_address';
                    break;
                case GRN_ADDRESS_MYGROUP_DATA_TYPE_PRIVATE:
                    $address_col = 'private_address';
                    break;
                case GRN_ADDRESS_MYGROUP_DATA_TYPE_USER:
                    $address_col = 'user_address';
                    break;
            }
            $address = $row->get($address_col);

            $exist = false;
            foreach ($items as $item_update) {
                if ($address->getOID() == $item_update['id']
                    && $row->get('type') == $item_update['address_type']
                ) {
                    if ($item_update['address_type']
                        === GRN_ADDRESS_MYGROUP_DATA_TYPE_SHARED
                    ) {
                        $book = $address->get('book');
                        if (array_key_exists($book->getOID(), $allow_books)
                            === false
                        ) {
                            cb_throw_error(E_GRN_ADDRESS_MYGROUP_UPDATE_CARD_ACCESS_DENY);
                        }
                    }

                    if ($item_update['address_type']
                        === GRN_ADDRESS_MYGROUP_DATA_TYPE_PRIVATE
                        && ! $access_for_view['private_address']
                    ) {
                        cb_throw_error(E_GRN_ADDRESS_MYGROUP_UPDATE_CARD_ACCESS_DENY);
                    }

                    $exist = true;
                    break;
                }
            }
            if ($exist === false) {
                //delete item
                $row->delete();
            }
        }

        //--

        $mygroup_id = $mygroup->getOID();
        $table_name = null;
        foreach ($items as $item) {
            if ($this->getItemByAddressID($mygroup_id, $item['address_type'],
                    $item['id']) == false
            ) {
                switch ($item['address_type']) {
                    case GRN_ADDRESS_MYGROUP_DATA_TYPE_SHARED:
                        $table_name = 'GRN_Address_SharedData';
                        $error_code = E_GRN_ADDRESS_CARD_NOT_FOUND;
                        break;
                    case GRN_ADDRESS_MYGROUP_DATA_TYPE_PRIVATE:
                        $table_name = 'GRN_Address_PrivateData';
                        $error_code = E_GRN_ADDRESS_CARD_NOT_FOUND;
                        break;
                    case GRN_ADDRESS_MYGROUP_DATA_TYPE_USER:
                        $table_name = 'CB_User';
                        $error_code = E_GRN_USER_NOT_FOUND;
                        break;
                    default:
                        return false;
                }

                $table = cb_class2table($table_name);
                $item_row = $table->getRow($item['id']);

                if ($item_row === false) {
                    cb_throw_error($error_code);
                }

                if ($item['address_type']
                    === GRN_ADDRESS_MYGROUP_DATA_TYPE_SHARED
                ) {
                    $book = $item_row->get('book');
                    if (array_key_exists($book->getOID(), $allow_books)
                        === false
                    ) {
                        cb_throw_error(E_GRN_ADDRESS_MYGROUP_UPDATE_CARD_ACCESS_DENY);
                    }
                }

                if ($item['address_type']
                    === GRN_ADDRESS_MYGROUP_DATA_TYPE_PRIVATE
                    && ! $access_for_view['private_address']
                ) {
                    cb_throw_error(E_GRN_ADDRESS_MYGROUP_UPDATE_CARD_ACCESS_DENY);
                }

                $this->addItem($mygroup, $item_row);
            }
        }

        $retval = $this->changeGroupDataOrder($mygroup, $items);
        $ts = new CB_TimeStamp();
        $ts->unix_ts = time();
        $mygroup->set('mtime', $ts);

        return $retval;
    }

    function changeGroupDataOrder($mygroup, $items)
    {
        $mygroup_id = $mygroup->getOID();
        $order = 1;
        foreach ($items as $item) {
            $item = $this->getItemByAddressID($mygroup_id,
                $item['address_type'], $item['id']);
            if ( ! is_object($item)
                 || ! is_a($item, 'GRN_Address_MyGroupData')
            ) {
                return false;
            }
            $item->set('list_index', $order);

            $order++;
        }

        return true;
    }

    function listGroupData($mygroup, &$allow_books, $offset = 0, $limit = -1)
    {
        $group_data_view = [];
        $rows = $this->getGroupData($mygroup, $allow_books, $offset,
            $limit);

        $uum = cb_lwc_uum();
        while ( ! is_null($row =& $rows->iterate())) {
            $row_mg = $row['mg'];

            $address = null;
            $name = null;
            $phone = null;
            $type = $row_mg->get('type');
            $book = null;
            $phone_key = 'personal_telephone_number';

            switch ($type) {
                case GRN_ADDRESS_MYGROUP_DATA_TYPE_SHARED:
                    $address = $row_mg->get('shared_address');
                    $name = $address->get('subject');
                    $phone = $address->get('personal_telephone_number');
                    $book = $address->get('book');
                    break;
                case GRN_ADDRESS_MYGROUP_DATA_TYPE_PRIVATE:
                    $address = $row_mg->get('private_address');
                    $name = $address->get('subject');
                    $phone = $address->get('personal_telephone_number');
                    $book = $address->get('book');
                    break;
                case GRN_ADDRESS_MYGROUP_DATA_TYPE_USER:
                    $address = $row_mg->get('user_address');
                    $name = $uum->getOnlyOneNameByUserObject($address);
                    $phone = $address->get('telephone_number');
                    break;
            }

            $id = $row_mg->getOID();
            $email = $address->get('email_address');

            $group_data_view[$id]['id'] = $id;
            $group_data_view[$id]['card_id'] = $address->getOID();
            if ($book) {
                if ($type == GRN_ADDRESS_MYGROUP_DATA_TYPE_PRIVATE) {
                    $group_data_view[$id]['book_id'] = -1;
                    $group_data_view[$id]['pbid'] = $book->getOID();
                } else {
                    $group_data_view[$id]['book_id'] = $book->getOID();
                }
            }
            $group_data_view[$id]['type'] = $type;
            $group_data_view[$id]['name'] = $name;
            $group_data_view[$id]['email'] = $email;
            $group_data_view[$id]['phone'] = strlen(cb_trim($phone)) > 0
                ? $phone : null;
        }

        return $group_data_view;
    }
}

