<?php

require_once('grn/application.csp');
require_once('grn/CBException.csp');
require_once('grn/DAOFactory.csp');
require_once('address/error_code.csp');
require_once('address/inspection.csp');

define('CB_ADDRESS_FACADE_DB_STATUS_INSERT', 1);
define('CB_ADDRESS_FACADE_DB_STATUS_UPDATE', 2);
define('CB_ADDRESS_FACADE_DB_STATUS_DELETE', 3);

class AddressFacade
{
    private $_db = null;

    public function __construct()
    {
        $app_locator = GRN_ApplicationLocator::instance();
        $this->_db = $app_locator->getConnection('address');
    }


    /** ***************************************************** */
    /** -----           GrnAddressSharedbook       --------- */
    /** ***************************************************** */
    /**
     * @param $inDataObj
     * @param $inSharedbookKey
     *
     * @return bool|GrnAddressSharedbook
     */
    public function referAddressSharedbookByForeignKey(
        $inDataObj,
        $inSharedbookKey
    ) {
        $inDataObj['db'] = $this->_db;
        $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
        $dao = $daoFctry->getGrnAddressSharedbookDAO();

        $result = $dao->selectByForeignKey($inDataObj, $inSharedbookKey);

        return $result;
    }

    /**
     * @param $inDataObj
     * @param $inId
     *
     * @return bool|GrnAddressSharedbook
     */
    public function referAddressSharedbookById($inDataObj, $inId)
    {
        $inDataObj['db'] = $this->_db;
        $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
        $dao = $daoFctry->getGrnAddressSharedbookDAO();

        $inLanguage = (array_key_exists('language', $inDataObj))
            ? $inDataObj['language'] : null;
        if (is_null($inLanguage)) {
            $result = $dao->selectDefaultById($inDataObj, $inId);
        } else {
            $result = $dao->selectLocalById($inDataObj, $inId);
        }

        return $result;
    }

    /**
     * @param $inDataObj
     *
     * @return GrnAddressSharedbook[]
     */
    public function getAddressSharedbookList($inDataObj)
    {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnAddressSharedbookDAO();

            $resultList = $dao->getAddressSharedbookList($inDataObj);

            return $resultList;
        } catch (CBException $cbe) {

        }
    }


    /** ***************************************************** */
    /** -----        GrnAddressSharedbookLocal    --------- */
    /** ***************************************************** */
    /**
     * @param                           $inDataObj
     * @param GrnAddressSharedbookLocal $inAddressSharedbookLocalObj
     *
     * @return bool|int
     */
    public function insertAddressSharedbookLocal(
        $inDataObj,
        $inAddressSharedbookLocalObj
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnAddressSharedbookLocalDAO();
            /** @var $inspection GRN_Address_Sharedbook_Local_Inspection */
            $inspection
                = GRN_Address_Sharedbook_Local_Inspection::getInstance();

            $insertCount = $dao->insert($inDataObj,
                $inAddressSharedbookLocalObj);

            if (($insertCount > 0) && ($inspection->isEnabled())) {
                $messageType = 'sharedbook_local_add';
                $message_args = [
                    'bid'             => $inAddressSharedbookLocalObj->getParentId(),
                    'language_code'   => $inAddressSharedbookLocalObj->getLanguageCode(),
                    'sharedbook_name' => $inAddressSharedbookLocalObj->getName(),
                ];

                $inspection->write($messageType, $message_args);
            }

            return $insertCount;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param                           $inDataObj
     * @param GrnAddressSharedbookLocal $inAddressSharedbookLocalObj
     *
     * @return int
     */
    public function updateAddressSharedbookLocal(
        $inDataObj,
        $inAddressSharedbookLocalObj
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnAddressSharedbookLocalDAO();

            $inMessageTypeAdd = (array_key_exists('messageTypeAdd',
                $inDataObj)) ? $inDataObj['messageTypeAdd']
                : 'sharedbook_local_add';
            $inMessageTypeModify = (array_key_exists('messageTypeModify',
                $inDataObj)) ? $inDataObj['messageTypeModify']
                : 'sharedbook_local_modify';
            $inspection
                = GRN_Address_Sharedbook_Local_Inspection::getInstance();

            $beforAddressSharedbookLocal
                = $dao->selectBySharedbookId_LanguageCode($inDataObj,
                $inAddressSharedbookLocalObj);
            if ($beforAddressSharedbookLocal === false) {
                $insertCount = $dao->insert($inDataObj,
                    $inAddressSharedbookLocalObj);

                if (($insertCount > 0) && ($inspection->isEnabled())) {
                    $message_args = [
                        'bid'             => $inAddressSharedbookLocalObj->getParentId(),
                        'language_code'   => $inAddressSharedbookLocalObj->getLanguageCode(),
                        'sharedbook_name' => $inAddressSharedbookLocalObj->getName(),
                    ];

                    $inspection->write($inMessageTypeAdd, $message_args);
                }

                return CB_ADDRESS_FACADE_DB_STATUS_INSERT;
            } else {
                $updateCount = $dao->update($inDataObj,
                    $inAddressSharedbookLocalObj);

                //MySQLは変化が無い場合UPDATE結果が0件になる。しかし、現在のGaroonのログ仕様は変化が無くても変更ログを出力しているので、更新件数が0でもログ出力している
                if (($updateCount >= 0) && ($inspection->isEnabled())) {
                    $message_args = [
                        'bid'                  => $inAddressSharedbookLocalObj->getParentId(),
                        'language_code'        => $inAddressSharedbookLocalObj->getLanguageCode(),
                        'prev_sharedbook_name' => $beforAddressSharedbookLocal->getName(),
                        'next_sharedbook_name' => $inAddressSharedbookLocalObj->getName(),
                    ];

                    $inspection->write($inMessageTypeModify, $message_args);
                }

                return CB_ADDRESS_FACADE_DB_STATUS_UPDATE;
            }
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param                           $inDataObj
     * @param GrnAddressSharedbookLocal $inAddressSharedbookLocalObj
     *
     * @return bool|int
     */
    public function deleteAddressSharedbookLocal(
        $inDataObj,
        $inAddressSharedbookLocalObj
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnAddressSharedbookLocalDAO();

            $inMessageTypeDelete = (array_key_exists('messageTypeDelete',
                $inDataObj)) ? $inDataObj['messageTypeDelete']
                : 'sharedbook_local_delete';
            /** @var GRN_Address_Sharedbook_Local_Inspection $inspection */
            $inspection
                = GRN_Address_Sharedbook_Local_Inspection::getInstance();

            $deleteCount = 0;
            $beforAddressSharedbookLocal
                = $dao->selectBySharedbookId_LanguageCode($inDataObj,
                $inAddressSharedbookLocalObj);
            if ($beforAddressSharedbookLocal !== false) {
                $deleteCount = $dao->deleteByParentId_LanguageCode($inDataObj,
                    $inAddressSharedbookLocalObj);
                if (($deleteCount > 0) && ($inspection->isEnabled())) {
                    $message_args = [
                        'bid'             => $inAddressSharedbookLocalObj->getParentId(),
                        'language_code'   => $inAddressSharedbookLocalObj->getLanguageCode(),
                        'sharedbook_name' => $beforAddressSharedbookLocal->getName(),
                    ];

                    $inspection->write($inMessageTypeDelete, $message_args);
                }
            }

            return $deleteCount;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param $inDataObj
     * @param $inSharedbookId
     *
     * @return GrnAddressSharedbookLocal[]
     */
    public function getAddressSharedbookLocalListBySharedbookId(
        $inDataObj,
        $inSharedbookId
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnAddressSharedbookLocalDAO();
            $resultList
                = $dao->getAddressSharedbookLocalListBySharedbookId($inDataObj,
                $inSharedbookId);

            return $resultList;
        } catch (CBException $cbe) {

        }
    }
}

