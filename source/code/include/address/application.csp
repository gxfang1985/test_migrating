<?php

/**
 * Application for Address.
 *
 * @author  YOSHIDA, Hideyasu 2005/01
 * @version 1.0
 * @package grn.address
 */

require_once('fw/i18n.csp');
require_once('grn/application.csp');
require_once('address/AddressFacade.csp');
require_once('address/error_code.csp');
require_once('address/resources.csp');
require_once('address/table.csp');

/**
 * アドレス帳アプリケーション
 *
 * @package grn.address
 */
class GRN_Address_Application extends GRN_ApplicationBase
{
    /**
     * コンストラクタ
     */
    function __construct()
    {
        parent::__construct(GRN_ADDRESS_APPLICATION_ID);
    }

    /**
     * アドレスブック管理を取得する
     *
     * @return GRN_Address_BookManager
     */
    function getBookManager()
    {
        $ret = GRN_Address_BookManager::getInstance();

        return $ret;
    }

    /**
     * システム設定に表示するメニューを取得する
     */
    function getSystemConfigArray()
    {
        $book_manager = $this->getBookManager();

        $configs = [];
        $configs['address_config'] = [];
        $config =& $configs['address_config'];
        $config[] = [
            'page' => 'address/system/book_list',
            'icon' => 'address32'
        ];
        $config[] = [
            'page' => 'address/system/item_index',
            'icon' => 'personitem32'
        ];
        $config[] = [
            'page' => 'address/system/availability_list',
            'icon' => 'useradmin32'
        ];

        if (0 < count($book_manager->listSharedAddressBooks())) {

            $config[] = [
                'page' => 'address/system/privilege_index',
                'icon' => 'manager32'
            ];
            $config[] = [
                'page' => 'address/system/access_index',
                'icon' => 'access32'
            ];
            $config[] = [
                'page' => 'address/system/import_index',
                'icon' => 'import32'
            ];
            $config[] = [
                'page' => 'address/system/export_index',
                'icon' => 'export32'
            ];
        }

        return $configs;
    }

    /**
     * 個人設定に表示するメニューを取得する
     */
    function getPersonalConfigArray()
    {
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');

        require_once('address/access.csp');
        $access_manager = GRN_Address_AccessManager::getInstance();

        // ログインユーザーを取得する
        $login = $uum->getLoginUser();
        if ( ! is_object($login) || ! is_a($login, 'CB_User')) {
            assert('FALSE');
        }

        // 使用権限を取得する
        if ( ! ($row
            = $access_manager->getAbstractData(GRN_ADDRESS_AVAILABLE))
        ) {
            assert('FALSE');
        }

        $configs = [];
        $configs['address_config'] = [];
        $config =& $configs['address_config'];
        $config[] = [
            'page' => 'address/personal/item_display',
            'icon' => 'personitem32'
        ];

        // 個人アドレス帳の使用権限を評価する
        $dynamic_roles = $uum->listGrantedRoles();

        $authorities = ['private_address'];
        $security_model = $access_manager->getSecurityModel($row);
        $access = $access_manager->evaluateAccess($row, $login,
            $dynamic_roles, $authorities, $security_model);
        if ($access_manager->isAllowedAccess($access, $authorities,
            $security_model)
        ) {
            $config[] = [
                'page' => 'address/personal/import1',
                'icon' => 'import32'
            ];
            $config[] = [
                'page' => 'address/personal/export',
                'icon' => 'export32'
            ];
        }

        return $configs;
    }

    /**
     * アプリケーションポートレット一覧を取得する
     */
    function &getPortletList()
    {
        $ret = [
            [
                'name'             => cb_msg('grn.address', '_view_user_list'),
                'type'             => 'grn.address.user_list',
                'version'          => '1.0',
                'set_template'     => 'address/portlet/set_view_user_list.csp',
                'command_template' => 'address/portlet/command_set_view_user_list.csp',
                'view_template'    => 'address/portlet/view_user_list.csp'
            ],
            [
                'name'          => cb_msg('grn.address',
                    '_view_address_search'),
                'type'          => 'grn.address.address_search',
                'version'       => '1.0',
                'view_template' => 'address/portlet/view_address_search.csp'
            ]
        ];

        return $ret;
    }

    /**
     * （%書式で使用する）識別子一覧を取得する
     */
    function getIdentifierList()
    {
        require_once('address/interface.csp');
        $addressDatabase = new GRN_Address_DataBase();
        $ids = $addressDatabase->listColumns();

        unset($ids[24]);  // creator
        unset($ids[25]);  // creator_name
        unset($ids[26]);  // ctime
        unset($ids[27]);  // modifier
        unset($ids[28]);  // modifier_name
        unset($ids[29]);  // mtime

        $tables = [];
        $tables[] = cb_class2table('GRN_Address_PrivateItem');
        $tables[] = cb_class2table('GRN_Address_SharedItem');

        foreach (array_keys($tables) as $key) {
            $rowset = new CB_RowSet($tables[$key]);
            while ( ! is_null($row = $rowset->iterate())) {
                $ids[] = $row->get('id');
            }
        }

        $ids[] = 'personal_name';
        $ids[] = 'personal_sort_key';

        $ids = array_unique($ids);
        foreach ($ids as $key => $value) {
            $ids[$key] = '%grn.address.' . $value . '%';
        }

        return array_values($ids);
    }

    /**
     * （%書式で使用する）SSO用の識別子一覧を取得する
     */
    function getSSOIdentifierList()
    {
        //標準の識別子リストを取得する
        $identifier_list = $this->getIdentifierList();

        //拡張項目の表示名リストを生成する
        $app_name = $this->getName();
        $extended_name_list = [];
        $tables = [];
        $tables[] = cb_class2table('GRN_Address_PrivateItem');
        $tables[] = cb_class2table('GRN_Address_SharedItem');
        foreach (array_keys($tables) as $key) {
            $rowset = new CB_RowSet($tables[$key]);
            while ( ! is_null($row = $rowset->iterate())) {
                $extended_name_list[$row->get('id')] = $app_name . ':'
                                                       . $row->get('display_name');
            }
        }

        //SSO用の識別子リストを生成する
        $sso_identifier_list = [];
        foreach ($identifier_list as $identifier) {
            $identifier_items = explode('.', $identifier);
            $id = str_replace('%', '', $identifier_items[2]);
            if (array_key_exists($id, $extended_name_list)) {
                $sso_identifier_list[$extended_name_list[$id]] = $identifier;
            } else {
                $sso_identifier_list[cb_msg('grn.address', $identifier)]
                    = $identifier;
            }
        }

        return $sso_identifier_list;
    }

    /**
     * （%書式を置換する）識別子の値を取得する
     */
    function getIdentifierValueList($sso_params)
    {
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');

        require_once('address/access.csp');
        $access_manager = GRN_Address_AccessManager::getInstance();

        $login = $uum->getLoginUser();

        $book_id = @ $sso_params['bid'];
        $card_id = @ $sso_params['cid'];
        $user_id = $login->getOID();

        // 使用権限を取得する
        if ( ! ($row
            = $access_manager->getAbstractData(GRN_ADDRESS_AVAILABLE))
        ) {
            assert('FALSE');
        }

        // ダイナミックロールを取得する
        $dynamic_roles = $uum->listGrantedRoles();

        $book_manager = $this->getBookManager();
        if (0 == strlen($book_id)) {
            $book = $book_manager->getUserListBook();
        } elseif (0 > $book_id) {
            // 個人アドレス帳の使用権限を評価する
            $authorities = ['private_address'];
            $security_model = $access_manager->getSecurityModel($row);
            $access = $access_manager->evaluateAccess($row, $login,
                $dynamic_roles, $authorities, $security_model);
            if ( ! $access_manager->isAllowedAccess($access, $authorities,
                $security_model)
            ) {
                cb_throw_error(E_GRN_ADDRESS_ACCESS_DENY_PRIVATE_ADDRESS);
            }

            // 個人アドレスブックを取得する
            if ( ! ($book
                = $book_manager->getPrivateAddressBookByUserId($user_id))
            ) {
                if ( ! ($book = $book_manager->addPrivateAddressBook('cyde',
                    $user_id, $properties))
                ) {
                    cb_throw_error(E_GRN_ADDRESS_PRIVATE_ADDRESS_BOOK_NOT_FOUND);
                }
            }
        } else {
            // 共有アドレス帳の使用権限を評価する
            $authorities = ['shared_address'];
            $security_model = $access_manager->getSecurityModel($row);
            $access = $access_manager->evaluateAccess($row, $login,
                $dynamic_roles, $authorities, $security_model);
            if ( ! $access_manager->isAllowedAccess($access, $authorities,
                $security_model)
            ) {
                cb_throw_error(E_GRN_ADDRESS_ACCESS_DENY_SHARED_ADDRESS);
            }

            // 共有アドレスブックを取得する
            if ( ! ($book = $book_manager->getSharedAddressBook($book_id))) {
                cb_throw_error(E_GRN_ADDRESS_SHARED_ADDRESS_BOOK_NOT_FOUND);
            }
        }

        $data = $book->getData($card_id);
        $properties = $data ? $data->getProperties('sso') : [];

        $ids = $this->getIdentifierlist();
        $values = [];
        foreach ($ids as $id) {
            list($product, $app, $column) = explode('.', trim($id, '%'));

            if ('personal_name' == $column) {
                $values[$id] = @ $properties['family_name'] . ' ' .
                               @ $properties['given_name'];
            } elseif ('personal_sort_key' == $column) {
                $values[$id] = @ $properties['family_sort_key'] . ' ' .
                               @ $properties['given_sort_key'];
            } else {
                $values[$id] = @ $properties[$column];
            }
        }

        return $values;
    }

    /**
     * アドレス帳ページ情報を取得する
     *
     * @param $data_type  string  データタイプ
     * @param $func_name  string  機能の名前
     * @option $params    array   アドレス帳ページ情報に割り当てるパラメータ
     *
     * @return mixed  FALSEが返るときは失敗、それ以外はアドレス帳ページ情報
     */
    function getAddressPageInfo($data_type, $func_name, $params = null)
    {
        assert('0 < strlen( $data_type )');
        assert('0 < strlen( $func_name )');

        if (GRN_ADDRESS_DATA_PRIVATE == $data_type) {
            switch ($func_name) {
                case 'add':
                    require_once('fw/session_manager.csp');
                    $session_manager = CB_SessionManager::getInstance();

                    $page_info = [
                        'page'   => 'address/add',
                        'params' => [
                            'bid' => -1,
                            'sf'  => 1,
                            'sk'  => $params['sk']
                        ]
                    ];

                    $session = $session_manager->getSession($page_info['page']
                                                            . $params['sk']);
                    $session->set('page', $params['page']);
                    $session->set('url_params', $params['url_params']);

                    foreach ($params as $key => $value) {
                        $session->set($key, $value);
                    }

                    return $page_info;
                case 'view':
                    $app_locator = GRN_ApplicationLocator::instance();
                    $dbconn = $app_locator->getConnection('address');

                    assert('is_array( $params ) && 0 < count( $params )');

                    $user = $params['login_user'];
                    $email_addresses = $params['email_address'];

                    assert('is_object( $user ) && is_a( $user, \'CB_User\' )');
                    assert('is_array( $email_addresses ) && 0 < count( $email_addresses )');

                    $user_id = $user->getOID();

                    $book_manager = $this->getBookManager();
                    if ($book
                        = $book_manager->getPrivateAddressBookByUserId($user_id)
                    ) {
                        // 組み込み項目情報一覧を取得する
                        require_once('address/view_util.csp');
                        $view_util = GRN_Address_ViewUtil::getInstance();
                        $builtin_items = $view_util->listBuiltinItems($book);

                        $page_infos = [];
                        if (@ $builtin_items['email_address']['use']) {
                            foreach ($email_addresses as $email_address) {
                                $format = "col_email_address LIKE '%@L%'";
                                $email_address = cb_trim($email_address);
                                $condition = cb_queryf($dbconn, $format,
                                    $email_address);
                                $datas = $book->listDatas(0, -1,
                                    'col_subject, _id', $condition);

                                $page_info = [];
                                foreach (array_keys($datas) as $data_id) {
                                    $page_info[] = [
                                        'page'   => 'address/view',
                                        'params' => [
                                            'bid' => -1,
                                            'cid' => $data_id
                                        ]
                                    ];
                                }
                                $page_infos[$email_address] = $page_info;
                            }
                        }

                        return $page_infos;
                    }
                    break;
                default:
                    break;
            }
        }

        return false;
    }

    /**
     * アプリケーションのデータをクリーンアップする
     */
    function cleanup()
    {
        $this->_cleanup_address_attach_files();
    }

    /**
     * どのアドレス帳でも使われていない添付ファイルを削除
     *
     * @access private
     */
    function _cleanup_address_attach_files()
    {
        global $G_container_base;
        $logger = $G_container_base->getInstance('cleanup_logger');

        $app_locator = GRN_ApplicationLocator::instance();
        $manager = $app_locator->getTableManager('address');

        require_once('address/file.csp');
        $tab_file = $manager->getTableInfo('GRN_Address_File');
        $tab_privatedata
            = $manager->getTableInfo('GRN_Address_PrivateData');
        $tab_itemprivatedatarel
            = $manager->getTableInfo('GRN_Address_ItemPrivateDataRelation');
        $tab_shareddata
            = $manager->getTableInfo('GRN_Address_SharedData');
        $tab_itemshareddatarel
            = $manager->getTableInfo('GRN_Address_ItemSharedDataRelation');

        $rowset = new CB_RowSet($tab_file, 'file');
        // NOT EXISTS -> Anti-Joinのクエリチューニング
        $rowset->addJoin($tab_privatedata, 'pd.col_image = file._id',
            CB_DATABASE_LEFT_JOIN, 'pd');
        $rowset->addJoin($tab_itemprivatedatarel, 'ipdr.col_file = file._id',
            CB_DATABASE_LEFT_JOIN, 'ipdr');
        $rowset->addJoin($tab_shareddata, 'sd.col_image = file._id',
            CB_DATABASE_LEFT_JOIN, 'sd');
        $rowset->addJoin($tab_itemshareddatarel, 'isdr.col_file = file._id',
            CB_DATABASE_LEFT_JOIN, 'isdr');
        $rowset->addCondition('pd.col_image IS NULL AND ipdr.col_file IS NULL AND sd.col_image IS NULL AND isdr.col_file IS NULL');

        while ( ! is_null($file = $rowset->iterate())) {
            $file_id = $file->getOID();
            $logger->log('[delete] address file(fid:' . $file_id . ')');
            $file->delete();
        }

        $rowset->destroy();
        unset($tab_itemprivatedatarel, $tab_privatedata, $tab_itemshareddatarel, $tab_shareddata, $tab_file, $condition, $rowset, $manager, $app_locator, $logger);
    }
}

/**
 * アドレスブック管理クラス
 *
 * @package grn.address
 */
class GRN_Address_BookManager extends CB_ModuleBase
{
    /**
     * シングルトンを取得する
     *
     * @var GRN_Address_BookManager $_instance
     */
    private static $_instance = null;

    /**
     * @return GRN_Address_BookManager
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * @access private
     * @var GRN_TableManager|null
     */
    var $_table_manager = null;
    /**
     * @access private
     * @var GRN_Uum|null
     */
    var $_uum = null;

    /**
     * コンストラクタ
     */
    function __construct()
    {
        parent::__construct(GRN_ADDRESS_MODULE_ID);

        global $G_container_base;
        $app_locator = GRN_ApplicationLocator::instance();
        $this->_table_manager = $app_locator->getTableManager('address');
        $this->_uum = $G_container_base->getInstance('uum');
    }

    /**
     * @access private
     * @var GRN_Address_BookFactoryBase[]
     */
    var $_book_factories = [];

    /**
     * Create an instance of GRN_Address_Cyde_Book class
     *
     * @access private
     *
     * @param string           $data_type 'Private' or 'Shared'
     * @param string           $book_type always 'cyde'
     * @param GRN_Address_Book $row
     *
     * @return GRN_Address_Cyde_Book
     */
    function _newBook($data_type, $book_type, $row)
    {
        switch ($data_type) {
            case GRN_ADDRESS_DATA_PRIVATE:
                $books = $this->_private_address_books;
                break;
            case GRN_ADDRESS_DATA_SHARED:
                $books = $this->_shared_address_books;
                break;
            default:
                assert('FALSE');
        }

        if ( ! array_key_exists($book_type, $this->_book_factories)) {
            $plugin_loader = $this->getPluginLoader();
            $book_factory = $plugin_loader->loadDriver($book_type);
            if ( ! is_object($book_factory)
                 || ! is_a($book_factory, 'GRN_Address_BookFactoryBase')
            ) {
                cb_throw_error(E_GRN_ADDRESS_MISSING_TARGETDRIVER, null,
                    null, ['booktype' => $book_type]);
            }
            $this->_book_factories[$book_type] = $book_factory;
        }
        $ret = $this->_book_factories[$book_type]->newBook($data_type, $books,
            $row);

        return $ret;
    }

    /**
     * @access private
     * @var GRN_TableInfo[]
     */
    var $_table_infos = [];

    /**
     * Return GRN_TableInfo instance of GRN_Address_PrivateBook or GRN_Address_SharedBook class.
     *
     * @access private
     *
     * @param string $data_type 'Private' or 'Shared'
     *
     * @return GRN_TableInfo
     */
    function _getTableInfo($data_type)
    {
        if ( ! array_key_exists($data_type, $this->_table_infos)) {
            $class_name = 'GRN_Address_' . $data_type . 'Book';
            $this->_table_infos[$data_type]
                = $this->_table_manager->getTableInfo($class_name);
        }

        return $this->_table_infos[$data_type];
    }

    /**
     * ブックタイプ一覧を取得する
     *
     * @return string[] This value is always ['cyde'].
     */
    function listBookTypes()
    {
        $plugin_loader = $this->getPluginLoader();
        $files = $plugin_loader->listFiles();

        $data_types = [];
        foreach ($files as $file) {
            $data_types[] = basename($file, '.csp');
        }

        return $data_types;
    }

    /**
     * ユーザー名簿ブックを取得する
     *
     * @return GRN_Address_UserListBook
     */
    function getUserListBook()
    {
        require_once('address/include_user_list.csp');
        $ret = GRN_Address_UserListBook::getInstance();

        return $ret;
    }

    /** @var GRN_Address_Cyde_Book[] */
    var $_private_address_books = [];

    /**
     * 個人アドレスブックを取得する
     *
     * @param $book_id
     *
     * @return GRN_Address_Cyde_Book|bool
     */
    function getPrivateAddressBook($book_id)
    {
        $table_info = $this->_getTableInfo(GRN_ADDRESS_DATA_PRIVATE);
        /** @var GRN_Address_PrivateBook $row */
        if ( ! ($row = $table_info->getRow($book_id))) {
            {
                $___ret = false;

                return $___ret;
            }
        }

        if (is_null($row->get('user'))) {
            $___ret = false;

            return $___ret;
        }

        $books =& $this->_private_address_books;
        $book_type = $row->get('type');
        $books[$book_id] = $this->_newBook(GRN_ADDRESS_DATA_PRIVATE, $book_type,
            $row);

        return $books[$book_id];
    }

    /**
     * ユーザーIDで個人アドレスブックを取得する
     *
     * @param string $user_id
     *
     * @return GRN_Address_Cyde_Book|bool
     */
    function getPrivateAddressBookByUserId($user_id)
    {
        $books =& $this->_private_address_books;
        foreach (array_keys($books) as $book_id) {
            $book = $books[$book_id];
            $user = $book->getProperty('user');
            if ($user_id == $user->getOID()) {
                return $book;
            }
        }
        $table_info = $this->_getTableInfo(GRN_ADDRESS_DATA_PRIVATE);
        $rowset = new CB_RowSet($table_info);
        $rowset->addCondition($rowset->queryf("col_user = '@S'", $user_id));
        $user_table_info = $this->_table_manager->getTableInfo('cb_user');

        $on = CB_DATABASE_TABLE_PREFIX . $table_info->getTableName()
              . '.col_user = u._id '
              . 'AND u.col_deleted IS NULL';
        $rowset->addJoin($user_table_info, $on, CB_DATABASE_INNER_JOIN, 'u');

        $row = $rowset->iterate();
        $rowset->destroy();
        if (is_null($row)) {
            {
                $___ret = false;

                return $___ret;
            }
        }

        $book_type = $row->get('type');
        $book = $this->_newBook(GRN_ADDRESS_DATA_PRIVATE,
            $book_type, $row);
        $books[$row->getOID()] = $book;

        return $book;
    }

    /** @var GRN_Address_Cyde_Book[] */
    var $_shared_address_books = [];

    /**
     * 共有アドレスブックを取得する
     *
     * @param string $book_id
     * @param bool   $isUseLocal
     *
     * @return GRN_Address_Cyde_Book|bool
     */
    function getSharedAddressBook($book_id, $isUseLocal = true)
    {
        $i18n = CB_I18N::getInstance();
        $table_info = $this->_getTableInfo(GRN_ADDRESS_DATA_SHARED);

        $dao = new AddressFacade();
        $dataObj = [];
        $dataObj['lock'] = $table_info->_lock;
        $dataObj['language'] = $isUseLocal ? $i18n->getCurrentLanguage() : null;

        $addressSharedbookData = $dao->referAddressSharedbookById($dataObj,
            $book_id);

        if ($addressSharedbookData === false) {
            return false;
        } else {
            $row = $table_info->getRow($addressSharedbookData->getId(),
                $addressSharedbookData->convertArray());

            $books =& $this->_shared_address_books;
            $book_type = $row->get('type');
            $books[$book_id] = $this->_newBook(GRN_ADDRESS_DATA_SHARED,
                $book_type, $row);

            return $books[$book_id];
        }
    }

    /**
     * @param string $foreign_key
     *
     * @return GRN_Address_Cyde_Book|bool
     */
    public function getSharedAddressBookByForeignKey($foreign_key)
    {
        $books =& $this->_shared_address_books;

        $i18n = CB_I18N::getInstance();
        $table_info = $this->_getTableInfo(GRN_ADDRESS_DATA_SHARED);

        $dao = new AddressFacade();
        $dataObj = [];
        $dataObj['lock'] = $table_info->_lock;
        $dataObj['language'] = $i18n->getCurrentLanguage();

        $addressSharedbookData
            = $dao->referAddressSharedbookByForeignKey($dataObj, $foreign_key);
        if ($addressSharedbookData === false) {
            return false;
        } else {
            $row = $table_info->getRow($addressSharedbookData->getId(),
                $addressSharedbookData->convertArray());

            $book_id = $row->getOID();
            $book_type = $row->get('type');
            $books[$book_id] = $this->_newBook(GRN_ADDRESS_DATA_SHARED,
                $book_type, $row);

            return $books[$book_id];
        }
    }

    /**
     * 共有アドレスブック一覧を取得する
     *
     * @param int $offset
     * @param int $limit
     *
     * @return GRN_Address_Cyde_Book[]
     */
    function &listSharedAddressBooks($offset = 0, $limit = -1)
    {
        $i18n = CB_I18N::getInstance();
        $table_info = $this->_getTableInfo(GRN_ADDRESS_DATA_SHARED);

        $dao = new AddressFacade();
        $dataObj = [];
        $dataObj['lock'] = $table_info->_lock;
        $dataObj['offset'] = $offset;
        $dataObj['limit'] = $limit;
        $dataObj['language'] = $i18n->getCurrentLanguage();

        $addressSharedbookList = $dao->getAddressSharedbookList($dataObj);

        $sharedbooks = [];
        foreach ($addressSharedbookList as $sharedbook) {
            $row = $table_info->getRow($sharedbook->getId(),
                $sharedbook->convertArray());
            $book_type = $row->get('type');
            $sharedbookId = $row->getOID();

            if ( ! array_key_exists($sharedbookId,
                $this->_shared_address_books)
            ) {
                $this->_shared_address_books[$sharedbookId]
                    = $this->_newBook(GRN_ADDRESS_DATA_SHARED, $book_type,
                    $row);
            }

            $sharedbooks[$sharedbookId]
                = $this->_shared_address_books[$sharedbookId];
        }

        return $sharedbooks;
    }

    /**
     * 個人アドレスブックを追加する
     *
     * @param string $book_type always 'cyde'
     * @param string $user_id
     * @param array  $properties
     *
     * @return GRN_Address_Cyde_Book|bool
     */
    function addPrivateAddressBook($book_type, $user_id, $properties)
    {
        if ( ! ($user = $this->_uum->getUser($user_id))) {
            {
                $___ret = false;

                return $___ret;
            }
        }

        $table_info = $this->_getTableInfo(GRN_ADDRESS_DATA_PRIVATE);
        $row = $table_info->newRow();
        $book = $this->_newBook(GRN_ADDRESS_DATA_PRIVATE, $book_type,
            $row);

        $properties['user'] = $user;
        $properties['type'] = $book_type;
        $book->setProperties($properties, 'create');

        $this->_books[GRN_ADDRESS_DATA_PRIVATE][$book->getOID()] = $book;
        $this->_private_address_books[$book->getOID()] = $book;

        return $book;
    }

    /**
     * 共有アドレスブックを追加する
     *
     * @param string $book_type
     * @param array  $properties
     *
     * @return GRN_Address_Cyde_Book
     */
    private function addSharedAddressBook($book_type, $properties)
    {
        $table_info = $this->_getTableInfo(GRN_ADDRESS_DATA_SHARED);
        $row = $table_info->newRow();

        $book = $this->_newBook(GRN_ADDRESS_DATA_SHARED, $book_type, $row);

        $properties['type'] = $book_type;
        $book->setProperties($properties, 'create');

        $this->_books[GRN_ADDRESS_DATA_SHARED][$book->getOID()] = $book;
        $this->_shared_address_books[$book->getOID()] = $book;

        return $book;
    }

    /**
     * 共有アドレスブックを追加する
     *
     * @param string $inBookType
     * @param array  $inLocalNameArray
     * @param string $inForeignKey
     *
     * @return GRN_Address_Cyde_Book
     */
    public function addSharedBook($inBookType, $inLocalNameArray, $inForeignKey)
    {
        // 識別子がユニークであることを検証する
        if ($this->isExistSharedbookForeignKey($inForeignKey)) {
            cb_throw_error(E_GRN_ADDRESS_COLLISION_ID_OF_BOOK);
        }

        //--------------  default sharedbook add -------------
        $properties = [
            'display_name' => $inLocalNameArray[CB_I18N_DEFUALT_LANGUAGE_CODE],
            'id'           => $inForeignKey
        ];

        //Add New Sharedbook
        $sharedbook = $this->addSharedAddressBook($inBookType, $properties);


        //--------------  sharedbook local name add -------------
        require_once('address/bean/GrnAddressSharedbookLocal.csp');
        $dao = new AddressFacade();

        $sharedbookId = $sharedbook->getOID();
        $i18n = CB_I18N::getInstance();
        $availableLanguageArray = $i18n->getAvailableLanguages();
        foreach ($availableLanguageArray as $languageKey) {
            if ((array_key_exists($languageKey, $inLocalNameArray))
                && strlen(cb_trim($inLocalNameArray[$languageKey])) > 0
            ) {
                $localName = cb_trim($inLocalNameArray[$languageKey]);

                $dataObj = [];
                $dataObj['messageTypeAdd'] = 'sharedbook_local_add';
                $sharedbookLocal = new GrnAddressSharedbookLocal();
                $sharedbookLocal->setParentId($sharedbookId);
                $sharedbookLocal->setLanguageCode($languageKey);
                $sharedbookLocal->setName($localName);

                $dao->insertAddressSharedbookLocal($dataObj, $sharedbookLocal);
            }
        }

        return $sharedbook;
    }

    /**
     * @param string $inSharedbookId
     * @param array  $inLocalNameArray
     * @param string $inForeignKey
     *
     * @return bool
     */
    public function modifySharedBook(
        $inSharedbookId,
        $inLocalNameArray,
        $inForeignKey
    ) {
        // 識別子がユニークであることを検証する
        if ($this->isExistSharedbookForeignKey($inForeignKey,
            $inSharedbookId)
        ) {
            cb_throw_error(E_GRN_ADDRESS_COLLISION_ID_OF_BOOK);
        }


        //--------------  default sharedbook modify -------------
        // 共有アドレスブックを取得する
        if ( ! ($sharedbook = $this->getSharedAddressBook($inSharedbookId,
            false))
        ) {
            cb_throw_error(E_GRN_ADDRESS_SHARED_ADDRESS_BOOK_NOT_FOUND);
        }

        // 共有アドレスブックを変更する
        $properties = [
            'display_name' => $inLocalNameArray[CB_I18N_DEFUALT_LANGUAGE_CODE],
            'id'           => $inForeignKey
        ];
        $sharedbook->setProperties($properties);


        //--------------  sharedbook local name modify -------------
        require_once('address/bean/GrnAddressSharedbookLocal.csp');
        $dao = new AddressFacade();

        $i18n = CB_I18N::getInstance();
        $availableLanguageArray = $i18n->getAvailableLanguages();
        foreach ($availableLanguageArray as $languageKey) {
            if ((array_key_exists($languageKey, $inLocalNameArray))
                && strlen(cb_trim($inLocalNameArray[$languageKey])) > 0
            ) {
                $localName = cb_trim($inLocalNameArray[$languageKey]);

                $dataObj = [];
                $sharedbookLocal = new GrnAddressSharedbookLocal();
                $sharedbookLocal->setParentId($inSharedbookId);
                $sharedbookLocal->setLanguageCode($languageKey);
                $sharedbookLocal->setName($localName);

                $dao->updateAddressSharedbookLocal($dataObj, $sharedbookLocal);
            } else {
                $dataObj = [];
                $sharedbookLocal = new GrnAddressSharedbookLocal();
                $sharedbookLocal->setParentId($inSharedbookId);
                $sharedbookLocal->setLanguageCode($languageKey);

                $dao->deleteAddressSharedbookLocal($dataObj, $sharedbookLocal);
            }
        }

        return true;
    }

    /**
     * exist sharedbook foreign key
     *
     * @param string   $inForeignKey
     * @param int|null $inSharedbookId
     *
     * @param bool     $result //exist : TRUE  / not exist : FALSE
     */
    private function isExistSharedbookForeignKey(
        $inForeignKey,
        $inSharedbookId = null
    ) {
        $sharedbook = $this->getSharedAddressBookByForeignKey($inForeignKey);

        if ($sharedbook === false) {
            return false;
        }

        if ( ! is_null($inSharedbookId)) {
            //Check Same ForeignKey
            if ($sharedbook->getOID() == $inSharedbookId) {
                return false;
            }
        }

        return true;
    }

    /**
     * @param string $inSharedbookId
     *
     * @return array
     */
    public function createMultiLanguageValuesArrayWithSharedbook($inSharedbookId
    ) {
        $resultArray = [];

        $dao = new AddressFacade();

        $dataObj = [];
        $sharedbook
            = $dao->referAddressSharedbookById($dataObj, $inSharedbookId);
        $resultArray[CB_I18N_DEFUALT_LANGUAGE_CODE]
            = $sharedbook->getDisplayName();

        $dataObj = [];
        $sharedbookLocalList
            = $dao->getAddressSharedbookLocalListBySharedbookId($dataObj,
            $inSharedbookId);
        foreach ($sharedbookLocalList as $sharedbookLocal) {
            $resultArray[$sharedbookLocal->getLanguageCode()]
                = $sharedbookLocal->getName();
        }

        return $resultArray;
    }
}

/**
 * @param array $builtin_items
 * @param array $extended_items
 *
 * @return array
 */
function grn_address_wish_input_data(
    array $builtin_items,
    array $extended_items = null
) {
    global $G_INPUT;
    require_once('grn/controller.csp');
    $properties = grn_wash_input_data($builtin_items, $extended_items);

    // アドレス帳固有の項目
    if (isset($G_INPUT['family_name'])) {
        $properties['family_name'] = $G_INPUT['family_name'];
    }
    if (isset($G_INPUT['given_name'])) {
        $properties['given_name'] = $G_INPUT['given_name'];
    }
    if (isset($G_INPUT['family_sort_key'])) {
        $properties['family_sort_key'] = $G_INPUT['family_sort_key'];
    }
    if (isset($G_INPUT['given_sort_key'])) {
        $properties['given_sort_key'] = $G_INPUT['given_sort_key'];
    }
    if (isset($G_INPUT['route_time'])) {
        $properties['route_time'] = $G_INPUT['route_time'];
    }
    if (isset($G_INPUT['route_fare'])) {
        $properties['route_fare'] = $G_INPUT['route_fare'];
    }

    return $properties;
}

