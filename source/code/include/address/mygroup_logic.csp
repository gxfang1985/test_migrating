<?php
/*
* Group Management API in My Address Groups 
*
* author: Huy
*/
require_once('address/table.csp');

class GRN_Address_MyGroup_Logic
{
    var $_mygroup_table = null;

    function __construct()
    {
    }

    /**
     * @var GRN_Address_MyGroup_Logic
     */
    private static $_instance = null;

    /**
     * @return GRN_Address_MyGroup_Logic
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    function getMyGroupTable()
    {
        if (is_null($this->_mygroup_table)) {
            $this->_mygroup_table = cb_class2table('GRN_Address_MyGroup');
        }

        return $this->_mygroup_table;
    }

    /**
     * Create Group
     *
     * @param    object $user         CB_User object
     * @param    string $mygroup_name Group name
     * @param    string $memo         memo
     *
     * @return   mixed    CB_Row             new Group row
     *                                       return FALSE if can not create group
     */
    function addMyGroup($user, $mygroup_name, $memo)
    {
        $table = $this->getMyGroupTable();
        $row = $table->newRow();

        $row->set('owner', $user);
        $row->set('name', $mygroup_name);
        $row->set('description', $memo);

        $ts = new CB_TimeStamp();
        $ts->unix_ts = time();
        $row->set('mtime', $ts);

        return $row;
    }

    /**
     * Get Group
     *
     * @param    CB_User $user
     * @param    string  $mygroup_id Group ID
     *
     * @return   mixed   CB_Row          Group row
     *                                   return FALSE if mygroup_id not found
     */
    function getMyGroup($user, $mygroup_id)
    {
        $uid = $user->getOID();

        global $G_container_base;
        $dbconn = $G_container_base->getInstance('dbconn');

        $table = $this->getMyGroupTable();
        $rowset = new CB_RowSet($table, 'm');

        $condition
            = $rowset->queryf("( m._id = '@S' ) AND ( m.col_owner = '@S' )",
            $dbconn->escape($mygroup_id),
            $dbconn->escape($uid));

        $rowset->addCondition($condition);
        $user_table_info = cb_class2table('CB_User');
        $on = 'm.col_owner = u._id AND u.col_deleted IS NULL';
        $rowset->addJoin($user_table_info, $on, CB_DATABASE_INNER_JOIN, 'u');
        $row = $rowset->iterate();

        return $row;
    }

    /**
     * Get Group Information
     *
     * @param    object $user       CB_User object
     * @param    string $mygroup_id Group ID
     *
     * @return   mixed   array           Group infor.
     *                                   return FALSE if mygroup_id not found
     */
    function getMyGroupInfo($user, $mygroup_id)
    {
        $mygroup = $this->getMyGroup($user, $mygroup_id);
        if ( ! is_object($mygroup) || ! is_a($mygroup, 'GRN_Address_MyGroup')) {
            return false;
        }

        $gid = $mygroup->getOID();
        $group['id'] = $mygroup->getOID();
        $group['name'] = $mygroup->get('name');
        $group['memo'] = $mygroup->get('description');

        return $group;
    }

    /**
     * Modify Group Information
     *
     * @param    object $user         CB_User object
     * @param    string $mygroup_id   Group ID
     * @param    string $mygroup_name Group Name
     * @param    string $memo         Memo
     *
     * @return   bool    TRUE: success modifing specified group
     */
    function modifyMyGroup($user, $mygroup_id, $mygroup_name, $memo)
    {
        $mygroup = $this->getMyGroup($user, $mygroup_id);
        if ( ! is_object($mygroup) || ! is_a($mygroup, 'GRN_Address_MyGroup')) {
            return false;
        }

        $mygroup->set('name', $mygroup_name);
        $mygroup->set('description', $memo);

        $ts = new CB_TimeStamp();
        $ts->unix_ts = time();
        $mygroup->set('mtime', $ts);

        return true;
    }

    /**
     * Delete Group
     *
     * @param    object $user       CB_User object
     * @param    string $mygroup_id Group ID
     *
     * @return   bool    TRUE: success modifing specified group
     */
    function removeMyGroup($user, $mygroup_id)
    {
        $mygroup = $this->getMyGroup($user, $mygroup_id);
        if ( ! is_object($mygroup) || ! is_a($mygroup, 'GRN_Address_MyGroup')) {
            return false;
        }

        $mygroup->delete();

        return true;
    }

    /**
     * Modify Group Order
     *
     * @param    object $user     CB_User object
     * @param    array  $mygroups Array of group's ID
     *
     * @return   bool    TRUE: success modifing specified group
     * FALSE: specified groups don't exist or cannot access these groups
     */
    function changeMyGroupOrder($user, $mygroups)
    {
        $order = 1;
        if (is_array($mygroups)) {
            foreach ($mygroups as $group) {
                $mygroup = $this->getMyGroup($user, $group);
                if ( ! is_object($mygroup)
                     || ! is_a($mygroup, 'GRN_Address_MyGroup')
                ) {
                    return false;
                }

                $mygroup->set('list_index', $order);

                $ts = new CB_TimeStamp();
                $ts->unix_ts = time();
                $mygroup->set('mtime', $ts);

                $order++;
            }
        }

        return true;
    }

    /**
     * Get groups in My Address Groups of user
     *
     * @param    CB_User $user
     *
     * @return   array   $groups
     */
    function getMyGroupList($user)
    {
        $uid = $user->getOID();

        global $G_container_base;
        $dbconn = $G_container_base->getInstance('dbconn');

        $table = $this->getMyGroupTable();
        $rowset = new CB_RowSet($table, 'm');

        $condition = $rowset->queryf("col_owner = '@S'",
            $dbconn->escape($uid));
        $user_table_info = cb_class2table('CB_User');
        $on = 'm.col_owner = u._id AND u.col_deleted IS NULL';
        $rowset->addJoin($user_table_info, $on, CB_DATABASE_INNER_JOIN, 'u');

        $rowset->addCondition($condition);
        $rowset->addOrderColumn('col_list_index');

        $grouplist = [];
        while ($row = $rowset->iterate()) {
            $gid = $row->getOID();
            $grouplist[$gid]['id'] = $row->getOID();
            $grouplist[$gid]['name'] = $row->get('name');
            $grouplist[$gid]['memo'] = $row->get('description');
            $grouplist[$gid]['mtime'] = $row->get('mtime');
        }

        return $grouplist;
    }

    /**
     * @return string
     */
    function getDataType()
    {
        $type = "MyAddressGroup";

        return $type;
    }
}

