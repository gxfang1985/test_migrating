<?php

require_once('fw/i18n.csp');
require_once('address/application.csp');

class GRN_Address_ViewUtil
{
    private static $_instance = null;

    /**
     * Get GRN_Address_ViewUtil Instance
     *
     * @return GRN_Address_ViewUtil
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /** @var GRN_Uum|null */
    var $_uum = null;
    var $_uum_util = null;
    var $_access_manager = null;
    var $_sso_service = null;
    var $_group_path_string = null;

    function __construct()
    {
        global $G_container_base;
        $this->_uum = $G_container_base->getInstance('uum');

        require_once('grn/uum_util.csp');
        $this->_uum_util = GRN_UumUtil::getInstance();

        require_once('address/access.csp');
        $this->_access_manager = GRN_Address_AccessManager::getInstance();

        require_once('grn/sso.csp');
        $this->_sso_service = GRN_SSO_Service::getInstance();
    }

    function _getBookId(& $book)
    {
        switch ($book->getDataType()) {
            case GRN_ADDRESS_DATA_USERLIST:
                return null;
            case GRN_ADDRESS_DATA_PRIVATE:
                return -1;
            case GRN_ADDRESS_DATA_SHARED:
                return $book->getOID();
            default:
                return null;
        }
    }

    function getBook(& $book, $typedef = null)
    {
        $security_model = null;
        switch ($book->getDataType()) {
            case GRN_ADDRESS_DATA_USERLIST:
                $display_name = cb_msg('grn/address', 'userlist');
                break;
            case GRN_ADDRESS_DATA_PRIVATE:
                $display_name = cb_msg('grn/address', 'private');
                break;
            case GRN_ADDRESS_DATA_SHARED:
                $display_name = $book->getProperty('display_name');
                $row = $book->getRow();
                $security_model
                    = $this->_access_manager->getSecurityModel($row);
                break;
            default:
                assert('FALSE');
        }

        $type = $book->getProperty('type');
        $retval = [];
        switch ($typedef) {
            case 'view':
                $display_name = [
                    'display_name' => cb_msg('grn.address', 'display_name'),
                    'value'        => $display_name
                ];
                $id = [
                    'display_name' => cb_msg('grn.address', 'id'),
                    'value'        => $book->getProperty('id')
                ];
                if (0 < strlen($type)) {
                    $type = [
                        'display_name' => cb_msg('grn.address', 'type'),
                        'value'        => cb_msg('grn.address', $type)
                    ];
                }
                $retval = [
                    'items' => [
                        'display_name' => $display_name,
                        'id'           => $id,
                        'type'         => $type
                    ]
                ];
                break;
            case 'order':
                $retval = $display_name;
                break;
            case 'access':
                $nid = $this->_getBookId($book);
                $retval = [
                    'nid'            => $nid,
                    'name'           => $display_name,
                    'foreign_key'    => $book->getProperty('id'),
                    'security_model' => $security_model,
                    // TODO @ access_countの取得
                    'access_count'   => 0,
                ];
                break;
            default:
                if (0 < strlen($type)) {
                    $type = cb_msg('grn.address', $type);
                }
                $retval = [
                    'oid'            => $this->_getBookId($book),
                    'display_name'   => $display_name,
                    'id'             => $book->getProperty('id'),
                    'type'           => $type,
                    'security_model' => $security_model
                ];
                break;
        }

        return $retval;
    }

    function listBooks(& $books, & $allow_books, $typedef = null)
    {
        $books_for_view = [];
        foreach (array_keys($books) as $book_id) {
            if (array_key_exists($book_id, $allow_books)) {
                $books_for_view[$book_id] = $this->getBook($books[$book_id],
                    $typedef);
            }
        }

        return $books_for_view;
    }

    function &getData(
        & $data,
        $book_id = null,
        $builtin_items = null,
        $extended_items = null,
        $users_info = [],
        $for_view = true
    ) {
        $card_id = $data->getOID();

        if ( ! is_null($book_id)) {
            $data_for_view = $data->getProperties(null, 'id', $for_view);

            // 標題を補間する
            $subject =& $data_for_view['subject'];
            $family_name = $data_for_view['family_name'];
            $given_name = $data_for_view['given_name'];
            $company_name = $data_for_view['company_name'];
            if (0 == strlen($subject)) {
                if (0 < strlen($family_name)) {
                    $subject = $family_name . ' ';
                } else {
                    $subject = '';
                }
                if (0 < strlen($given_name)) {
                    $subject .= $given_name;
                }
                if (0 == strlen($subject) && 0 < strlen($company_name)) {
                    $subject = $company_name;
                }
            }
            if (isset($data_for_view['map'])) {
                // used grn_safe_url to trip the image url of field map to avoid xss
                require_once('grn/controller.csp');
                $data_for_view['map'] = grn_safe_url($data_for_view['map']);
            }
            // シングルサインオンに割り当てるパラメータ
            $data_for_view['sso'] = [
                'bid' => $book_id,
                'cid' => $card_id
            ];
        } else {
            $keys = $data->listColumns(true);
            $keys[] = 'usergroups';
            $keys[] = 'primary_group';
            foreach ($keys as $key) {
                if (array_key_exists($key, $builtin_items)) {
                    $item =& $builtin_items[$key];
                } elseif (array_key_exists($key, $extended_items)) {
                    $item =& $extended_items[$key];
                } else {
                    continue;
                }
                if ($item['use'] && $item['display']) {
                    if ($key == 'usergroups') {
                        $data_for_view['usergroups']
                            = $this->listUserGroups($card_id);
                    } elseif ($key == 'primary_group') {
                        if (count($users_info) > 0
                            && array_key_exists('primary_group',
                                $users_info[$card_id])
                        ) {
                            $path = "";
                            $tmp_transfer
                                = $users_info[$card_id]['primary_group'];
                            if ($this->_group_path_string == null
                                || ! array_key_exists($tmp_transfer['_id'],
                                    $this->_group_path_string)
                            ) {
                                $path
                                    = $this->_uum_util->getGroupPathString($tmp_transfer['_id']);
                                $this->_group_path_string[$tmp_transfer['_id']]
                                    = $path;
                            } elseif (array_key_exists($tmp_transfer['_id'],
                                $this->_group_path_string)
                            ) {
                                $path
                                    = $this->_group_path_string[$tmp_transfer['_id']];
                            }
                            $data_for_view['primary_group']
                                = [
                                $tmp_transfer['_id'] => [
                                    'oid'   => $tmp_transfer['_id'],
                                    'title' => $tmp_transfer['col_name'],
                                    'path'  => $path
                                ]
                            ];
                        } else {
                            $data_for_view['primary_group']
                                = $this->listUserPrimaryGroups($card_id);
                        }
                    } elseif ($key == 'attendee') {
                        // Note: The values of 'attendee' should be obtained from GRN_Presence_Logic->getPresence().
                        $data_for_view[$key] = null;
                        $data_for_view['attendee_mtime'] = null;
                    } elseif ($key == 'locale') {
                        $user_locale_setting
                            = CB_LocaleManager::getCurrentLocaleSetting($data->getOID());
                        if (is_null($user_locale_setting)) {
                            $data_for_view['locale'] = '';
                        } else {
                            $locale_id = $user_locale_setting->getLocale();
                            if ($locale_id
                                === CB_UserLocaleSetting::$LOCALE_IS_NOT_RELATED
                            ) {
                                $data_for_view['locale'] = '';
                            } else {
                                $data_for_view['locale']
                                    = CB_Locale::select($locale_id)
                                               ->getLocalName();
                            }
                        }
                    } elseif ($key == 'base') {
                        require_once('fw/i18n/base.csp');
                        $base_id
                            = CB_BaseManager::getCurrentBaseSetting($data->getOID())
                                            ->getBase();
                        $data_for_view['base'] = $base_id
                            ? CB_Base::select($base_id)->getLocalName() : '';
                    } elseif ($key == 'map') {
                        // used grn_safe_url to trip the image url of field map to avoid xss
                        require_once('grn/controller.csp');
                        $data_for_view[$key]
                            = grn_safe_url($data->getProperty($key));
                    } else {
                        $data_for_view[$key] = $data->getProperty($key);
                    }
                }
            }

            $data_for_view['sso'] = ['user' => $card_id];
        }

        return $data_for_view;
    }

    function listDatas(
        & $datas,
        $book_id = null,
        $builtin_items = null,
        $extended_items = null,
        $users_info = []
    ) {
        $datas_for_view = [];
        foreach (array_keys($datas) as $data_id) {
            $datas_for_view[$data_id] = $this->getData($datas[$data_id],
                $book_id, $builtin_items, $extended_items, $users_info);
        }

        return $datas_for_view;
    }

    var $_userlist
        = [
            'display_name'          => GRN_ADDRESS_ITEM_STRING,
            'foreign_key'           => GRN_ADDRESS_ITEM_STRING,
            'display_name_language' => GRN_ADDRESS_ITEM_LANGUAGE,
            'nickname'              => GRN_ADDRESS_ITEM_STRING,
            'locale'                => GRN_ADDRESS_ITEM_STRING,
            'base'                  => GRN_ADDRESS_ITEM_STRING,
            'sort_key'              => GRN_ADDRESS_ITEM_STRING,
            'post'                  => GRN_ADDRESS_ITEM_STRING,
            'telephone_number'      => GRN_ADDRESS_ITEM_STRING,
            'email_address'         => GRN_ADDRESS_ITEM_EMAIL_ADDRESS,
            'url'                   => GRN_ADDRESS_ITEM_URL,
            'image'                 => GRN_ADDRESS_ITEM_FILE,
            'description'           => GRN_ADDRESS_ITEM_MULTIPLE_STRING,
            'usergroups'            => GRN_ADDRESS_ITEM_USER_GROUPS,
            'primary_group'         => GRN_ADDRESS_ITEM_USER_GROUPS,
            'attendee'              => GRN_ADDRESS_ITEM_ATTENDEE
        ];

    /**
     * @param      $book
     * @param bool $without_hidden
     *
     * @return array
     */
    function listBuiltinItems(
        & $book,
        $without_hidden = true,
        $use_nickname = false
    ) {
        if (GRN_ADDRESS_DATA_USERLIST == $book->getDataType()) {
            $sso_list = $this->_sso_service->getSSOMethodList('uum');

            $items_for_view = $this->_uum->getDefaultItemProperties();
            // if Presence app is stopped, not display attendee
            require_once('presence/logic.csp');
            $presence_logic = GRN_Presence_Logic::getInstance();
            $presence_view
                = $presence_logic->isActivePresence()
                ? 1 : 0;
            $items_for_view['attendee']['use'] = $presence_view;
            $items_for_view['attendee']['show'] = $presence_view;
            $items_for_view['attendee']['display'] = $presence_view;

            foreach (array_keys($items_for_view) as $item_id) {
                $item_for_view =& $items_for_view[$item_id];
                $item_for_view['display_name'] = cb_msg('grn/common',
                    $item_id . '_realname');
                $item_for_view['type'] = $this->_userlist[$item_id];
                if ( ! array_key_exists($item_for_view['sso'], $sso_list)) {
                    $item_for_view['sso'] = GRN_ADDRESS_SSO_DEFAULT;
                }
            }

            //Locale and Image are not shown when Garoon works on Forest.
            if (defined('ON_FOREST')) {
                if (isset($items_for_view['locale'])) {
                    unset($items_for_view['locale']);
                }
                if (isset($items_for_view['image'])) {
                    unset($items_for_view['image']);
                }
            }

            // アドレス帳では名前の言語、英語表記は使用しない。
            if (isset($items_for_view["display_name_language"])) {
                unset($items_for_view["display_name_language"]);
            }
            if (isset($items_for_view["nickname"]) && ! $use_nickname) {
                unset($items_for_view["nickname"]);
            }
        } else {
            $sso_list = $this->_sso_service->getSSOMethodList('address');

            require_once('address/config.csp');
            $config_manager = GRN_Address_ConfigManager::getInstance();
            $config = $config_manager->getSystemConfig();
            $items_for_view = $config->listBuiltinItems($book, $without_hidden);

            foreach (array_keys($items_for_view) as $item_id) {
                $item_for_view =& $items_for_view[$item_id];
                $item_for_view['display_name'] = cb_msg('grn/address',
                    $item_id);
                if ( ! array_key_exists($item_for_view['sso'], $sso_list)) {
                    $item_for_view['sso'] = GRN_ADDRESS_SSO_DEFAULT;
                }
            }
        }

        return $items_for_view;
    }

    function getExtendedItem(& $item, $typedef = null, $sso_list = [])
    {
        switch ($typedef) {
            case 'order':
                $retval = $item->get('display_name');
                break;
            default:
                $sso_id = $item->get('sso');
                if ( ! array_key_exists($sso_id, $sso_list)) {
                    $sso_id = GRN_ADDRESS_SSO_DEFAULT;
                }
                $retval = [
                    'oid'          => $item->getOID(),
                    'display_name' => $item->get('display_name'),
                    'id'           => $item->get('id'),
                    'type'         => $item->get('type'),
                    'setting'      => $item->get('setting'),
                    'not_modify'   => $item->get('not_modify'),
                    'necessary'    => $item->get('necessary'),
                    'use'          => $item->get('use'),
                    'display'      => $item->get('display'),
                    'show'         => $item->get('show'),
                    'sso'          => $sso_id
                ];
                break;
        }

        return $retval;
    }

    function listExtendedItems(& $book, $typedef = null)
    {
        if (GRN_ADDRESS_DATA_USERLIST == $book->getDataType()) {
            global $G_container_base;
            $book =& $this->_uum;

            $sso_list = $this->_sso_service->getSSOMethodList('uum');
        } else {
            $sso_list = $this->_sso_service->getSSOMethodList('address');
        }

        $items = $book->listItems();

        $items_for_view = [];
        foreach (array_keys($items) as $item_id) {
            $item =& $items[$item_id];
            $item_id = $item->getOID();
            $items_for_view[$item_id] = $this->getExtendedItem($item, $typedef,
                $sso_list);
        }

        return $items_for_view;
    }

    /**
     * セッションからアクセス制御する標的一覧を取得する
     */
    function listTargets($page_name)
    {
        $session_manager = CB_SessionManager::getInstance();
        $session =& $session_manager->getSession($page_name);

        return [
            'users'  => $session->get('selected_users'),
            'groups' => $session->get('selected_orgs'),
            'roles'  => $session->get('selected_roles')
        ];
    }

    /**
     * Smartyプラグインパーツに渡すアクセス制御しない標的一覧を取得する
     */
    function listIgnoredTargets($accesses, $authorities)
    {
        $ignored_targets = [];
        foreach (array_keys($accesses) as $target_name) {
            foreach (array_keys($accesses[$target_name]) as $access_id) {
                $access =& $accesses[$target_name][$access_id];
                foreach ($authorities as $authority) {
                    if (1 == $access->get('authority_' . $authority)) {
                        $target =& $access->get('target');
                        $target_id
                            = $this->_access_manager->getTargetId($target);
                        $ignored_targets[$target_name][] = $target_id;
                        break;
                    }
                }
            }
        }

        return $ignored_targets;
    }

    /**
     * 権限一覧を取得する
     */
    function listAuthorities($access_value, $allowed_keys = [])
    {
        $authorities = [];
        foreach ($this->_authorities as $key => $value) {
            if (false !== array_search($key, $allowed_keys)) {
                $authorities[$key] = 0;
                if ($value == ($access_value & $value)) {
                    $authorities[$key] = 1;
                }
            }
        }

        return $authorities;
    }

    var $_authorities
        = [
            'browse'          => GRN_ADDRESS_AUTHORITY_BROWSE,
            'editing'         => GRN_ADDRESS_AUTHORITY_EDITING,
            'operation'       => GRN_ADDRESS_AUTHORITY_OPERATION,
            'private_address' => GRN_ADDRESS_AUTHORITY_PRIVATE_ADDRESS,
            'shared_address'  => GRN_ADDRESS_AUTHORITY_SHARED_ADDRESS
        ];

    var $_prefix
        = [
            GRN_ADDRESS_TARGET_USER        => 'u',
            GRN_ADDRESS_TARGET_GROUP       => 'g',
            GRN_ADDRESS_TARGET_STATICROLE  => 'sr',
            GRN_ADDRESS_TARGET_DYNAMICROLE => 'dr'
        ];

    /**
     * アクセス権情報を取得する
     *
     * @param GRN_Address_SharedBook_Base $access
     * @param int                         $allowed_access_values
     *
     * @return array|bool
     */
    function &getAccess(& $access, $allowed_access_values = 0)
    {
        /** @var CB_User|CB_Group|CB_Role|string $target */
        $target =& $access->get('target');

        if (is_object($target)) {
            $target_id = $target->getOID();
            if (is_a($target, 'CB_User')) {
                $target_type = GRN_ADDRESS_TARGET_USER;
                $target_name = $target->get('display_name');
            } elseif (is_a($target, 'CB_Group')) {
                $target_type = GRN_ADDRESS_TARGET_GROUP;
                $groupObj = $this->_uum->getGroup($target->getOID());
                $target_name = $groupObj->get('name');
            } elseif (is_a($target, 'CB_Role')) {
                $target_type = GRN_ADDRESS_TARGET_STATICROLE;
                $target_name = $target->get('foreign_key');
            } else {
                assert('FALSE');
            }
        } elseif (is_string($target)) {
            $target_type = GRN_ADDRESS_TARGET_DYNAMICROLE;
            $target_id = $target;
            $target_name = $target;
        } else {
            assert('FALSE');
        }

        $access_id = $access->getOID();
        $access_value = 0;
        foreach ($this->_authorities as $key => $value) {
            if ($allowed_access_values & $value) {
                if (1 == $access->get('authority_' . $key)) {
                    $access_value += $value;
                }
            }
        }

        if (0 == $access_value) {
            $ret = false;

            return $ret;
        }

        $ret = [
            'type'         => $target_type,
            'tid'          => $target_id,
            'display_name' => $target_name,
            'aid'          => $access_id,
            'value'        => $access_value
        ];

        return $ret;
    }

    /**
     * アクセス権情報一覧を取得する
     *
     * @param array $accesses
     * @param int   $allowed_access_values
     *
     * @return array
     */
    function listAccesses($accesses, $allowed_access_values = 0)
    {
        $accesses_for_view = [];
        foreach (array_keys($accesses) as $target_type) {
            foreach (array_keys($accesses[$target_type]) as $access_id) {
                $access =& $accesses[$target_type][$access_id];
                $key = $this->_prefix[$target_type] . $access_id;
                if ($access_for_view = $this->getAccess($access,
                    $allowed_access_values)
                ) {
                    $accesses_for_view[$key] = $access_for_view;
                }
            }
        }

        return $accesses_for_view;
    }

    function getAccessInfo($access_id)
    {
        foreach ($this->_prefix as $target_type => $prefix) {
            if (0 === strpos($access_id, $prefix)) {
                return [
                    'access_id'   => substr($access_id, strlen($prefix)),
                    'target_type' => $target_type
                ];
            }
        }

        return false;
    }

    function listAccessInfos($access_ids)
    {
        $access_infos = [];
        foreach ($access_ids as $access_id) {
            $access_info = $this->getAccessInfo($access_id);
            $access_infos[$access_info['target_type']][] = $access_info;
        }

        return $access_infos;
    }

    /**
     * 変更できる項目を持つか検証する
     */
    function hasModifyItem(& $builtin_items, & $extended_items)
    {
        foreach ($builtin_items as $item_id => $item) {
            if ($item['use']
                &&
                ! $item['not_modify']
            ) {
                return true;
            }
        }

        foreach ($extended_items as $item_id => $item) {
            if ($item['use']
                &&
                ! $item['not_modify']
            ) {
                return true;
            }
        }

        return false;
    }

    /**
     * SmartyValidateを必要とする項目を持つか検証する
     */
    function hasSmartyValidateItem(& $builtin_items, & $extended_items)
    {
        foreach ($builtin_items as $item_id => $item) {
            if ($item['use']) {
                if ($item['necessary'] || GRN_ADDRESS_ITEM_URL == $item['type']
                    || GRN_ADDRESS_ITEM_IMAGE_URL == $item['type']
                ) {
                    return true;
                }
            }
        }

        foreach ($extended_items as $item_id => $item) {
            if ($item['use'] && ! $item['not_modify']) {
                if ($item['necessary'] || GRN_ADDRESS_ITEM_URL == $item['type']
                    || GRN_ADDRESS_ITEM_IMAGE_URL == $item['type']
                ) {
                    return true;
                }
            }
        }

        return false;
    }

    function listUserPrimaryGroups($user_id)
    {
        $primary_group = $this->_uum->getUserPrimaryGroup($user_id);

        $groups_for_view = [];
        if ($primary_group !== false) {
            $group_id = $primary_group->getOID();
            $foreign_key = $primary_group->get('foreign_key');
            $path
                = $this->_uum_util->getGroupPathString($group_id);
            $title = $primary_group->get('name');
            $groups_for_view[$foreign_key] = [
                'oid'   => $group_id,
                'title' => $title,
                'path'  => $path
            ];
        }

        return $groups_for_view;
    }

    function listUserGroups($user_id)
    {
        $groups = $this->_uum->getUserGroups($user_id);

        $groups_for_view = [];
        foreach (array_keys($groups) as $group_id) {
            $group =& $groups[$group_id];

            $foreign_key = $group->get('foreign_key');
            $path = $this->_uum_util->getGroupPathString($group_id);

            $groups_for_view[$foreign_key] = [
                'oid'   => $group_id,
                'title' => $group->get('name'),
                'path'  => $path
            ];
        }

        return $groups_for_view;
    }

    function getDisplayFlag($display_flags, & $builtin_items, & $extended_items)
    {
        if (is_array($display_flags) && 0 < count($display_flags)) {
            foreach (array_keys($builtin_items) as $item_id) {
                if (array_key_exists($item_id, $display_flags)) {
                    $builtin_items[$item_id]['display']
                        = $display_flags[$item_id];
                }
            }

            foreach (array_keys($extended_items) as $item_id) {
                if (array_key_exists($item_id, $display_flags)) {
                    $extended_items[$item_id]['display']
                        = $display_flags[$item_id];
                }
            }
        }
    }

    function setDisplayFlag(
        & $display_flags,
        & $builtin_items,
        & $extended_items
    ) {
        if ( ! is_array($display_flags)) {
            $display_flags = [];
        }

        $display_flags['display_name'] = 1;

        $this->getDisplayFlag($display_flags, $builtin_items, $extended_items);

        foreach (array_keys($builtin_items) as $item_id) {
            if ( ! array_key_exists($item_id, $display_flags)) {
                $display_flags[$item_id] = 0;
            }
        }

        foreach (array_keys($extended_items) as $item_id) {
            if ( ! array_key_exists($item_id, $display_flags)) {
                $display_flags[$item_id] = 0;
            }
        }
    }

    /**
     * 項目オプション一覧を取得する
     */
    function listItemTypeOptions($selected = null)
    {
        $item_types = [
            GRN_ADDRESS_ITEM_STRING,
            GRN_ADDRESS_ITEM_MULTIPLE_STRING,
            GRN_ADDRESS_ITEM_URL,
            GRN_ADDRESS_ITEM_IMAGE_URL,
            GRN_ADDRESS_ITEM_EMAIL_ADDRESS,
            GRN_ADDRESS_ITEM_FILE,
            GRN_ADDRESS_ITEM_IP_PHONE
        ];

        $item_type_options = [];
        foreach ($item_types as $item_type) {
            $label = cb_msg('grn/address',
                'item_type_' . $item_type);
            $item_type_options[$item_type] = [
                'value'    => $item_type,
                'label'    => $label,
                'selected' => $item_type == $selected
            ];
        }

        return $item_type_options;
    }

    /**
     * ブックオプション一覧を取得する
     */
    function listBookOptions(
        $books,
        & $book,
        $with_private_address = true,
        $with_user_list = false,
        $resources = []
    ) {
        if ( ! is_null($book)) {
            $selected_id = $this->_getBookId($book);
        } else {
            $selected_id = null;
        }

        $book_options = [];
        if ($with_user_list) {
            $book_options[] = [
                'value'    => null,
                'label'    => cb_plain_msg('grn.address', 'user_list'),
                'selected' => 0 == strlen($selected_id)
            ];
        }
        if ($with_private_address) {
            $book_options[] = [
                'value'    => -1,
                'label'    => cb_plain_msg('grn.address', 'private',
                    $resources),
                'selected' => -1 == $selected_id
            ];
        }
        foreach (array_keys($books) as $book_id) {
            $book =& $books[$book_id];

            $label = $book->get('display_name');
            $book_options[] = [
                'value'    => $book_id,
                'label'    => $label,
                'selected' => $book_id == $selected_id
            ];
        }

        return $book_options;
    }

    function listSharedAddressBookOptions(
        & $books,
        & $allow_books,
        $selected_id = null,
        $builtin_option = null
    ) {
        $book_options = [];
        if (is_array($builtin_option) && 0 < count($builtin_option)) {
            $book_options[] = $builtin_option;
        }
        foreach (array_keys($allow_books) as $book_id) {
            $book =& $books[$book_id];

            $label = $book->getProperty('display_name');
            $book_options[] = [
                'value'    => $book_id,
                'label'    => $label,
                'selected' => $book_id == $selected_id
            ];
        }

        return $book_options;
    }

    /**
     * シングルサインオンオプション一覧を取得する
     */
    function listSsoOptions($ssos, $selected = 0)
    {
        $sso_options = [];
        $sso_options['0'] = [
            'value'    => 0,
            'label'    => cb_msg('grn.address', 'default_sso'),
            'selected' => 0 == $selected
        ];
        if (is_array($ssos) && 0 < count($ssos)) {
            $sso_options['-1'] = [
                'value' => -1,
                'label' => '--'
            ];
            foreach (array_keys($ssos) as $sso_id) {
                $sso =& $ssos[$sso_id];

                $label = $sso->get('display_name');
                $sso_options[$sso_id] = [
                    'value'    => $sso_id,
                    'label'    => $label,
                    'selected' => $sso_id == $selected
                ];
            }
        }

        return $sso_options;
    }

    /**
     * ブックタイプオプション一覧を取得する
     */
    function listBookTypeOptions($book_types, $selected = 'cyde')
    {
        $book_type_options = [];
        if (is_array($book_types) && 0 < count($book_types)) {
            foreach ($book_types as $book_type) {
                $book_type_options[$book_type] = [
                    'value'    => $book_type,
                    'label'    => cb_msg('grn.address', $book_type),
                    'selected' => $book_type == $selected
                ];
            }
        }

        return $book_type_options;
    }

    /**
     * 組織オプション一覧を取得する
     */
    function listGroupOptions($user_id, $selected_group_id)
    {
        $group_options = [];
        $value = -1;
        $label = cb_msg('grn.address', 'title_everyone');
        $selected = $selected_group_id == $value;
        $group_options[] = [
            'value'    => $value,
            'label'    => $label,
            'selected' => $selected
        ];

        $user =& $this->_uum->getUser($user_id);
        $my_groups = $this->_uum->listMyGroups($user);
        if (is_array($my_groups) && 0 < count($my_groups)) {
            foreach (array_keys($my_groups) as $group_id) {
                $my_group =& $my_groups[$group_id];
                $value = 'm' . $group_id;
                $label = $my_group->get('name');
                $label = cb_msg('grn.common', 'title_my_group',
                    ['name' => $label]);
                $selected = $selected_group_id == $value;
                $group_options[] = [
                    'value'    => $value,
                    'label'    => $label,
                    'selected' => $selected
                ];
            }
        }

        $primary_group = $this->_uum->getUserPrimaryGroup($user_id);
        if ($primary_group !== false) {
            $value = $primary_group->getOID();
            $label = $primary_group->get('name');
            $label = cb_msg('grn.common', 'title_primary_group',
                ['name' => $label]);
            $selected = $selected_group_id == $value;
            $group_options[] = [
                'value'    => $value,
                'label'    => $label,
                'selected' => $selected
            ];
        }

        $groups = $this->_uum->getUserGroups($user_id);
        if (is_array($groups) && 0 < count($groups)) {
            foreach (array_keys($groups) as $group_id) {
                $group =& $groups[$group_id];
                $value = $group_id;
                $label = $group->get('name');
                $label = cb_msg('grn.common', 'title_belonging_group',
                    ['name' => $label]);
                $selected = $selected_group_id == $value;
                $group_options[] = [
                    'value'    => $value,
                    'label'    => $label,
                    'selected' => $selected
                ];
            }
        }

        require_once('grn/uum_util.csp');
        $frequent_groups = $this->_uum_util->getFrequentGroups($user);
        if (is_array($frequent_groups) && 0 < count($frequent_groups)) {
            foreach (array_keys($frequent_groups) as $group_id) {
                $frequent_group =& $frequent_groups[$group_id];
                $value = $group_id;
                $label = $frequent_group->get('name');
                $label = cb_msg('grn.common', 'title_frequent_group',
                    ['name' => $label]);
                $selected = $selected_group_id == $value;
                $group_options[] = [
                    'value'    => $value,
                    'label'    => $label,
                    'selected' => $selected
                ];
            }
        }

        return $group_options;
    }

    function getCardList($card_ids)
    {
        $app_locator = GRN_ApplicationLocator::instance();
        $database = $app_locator->getConnection('address');

        if ( ! is_array($card_ids) || count($card_ids) == 0) {
            return [];
        }

        $ids = "";
        foreach ($card_ids as $id) {
            if (strlen($ids) > 0) {
                $ids .= ",";
            }
            $ids .= cb_queryf($database, "'@S'", $id);
        }

        $query
            = sprintf("SELECT _id, col_book, col_company_name, col_subject FROM tab_grn_address_shareddata WHERE _id IN (%s)",
            $ids);
        $result = $database->query($query);
        $count = $database->num_rows($result);
        $cards = [];
        for ($i = 0; $i < $count; $i++) {
            $card = $database->fetch_assoc($result);
            $cards[$card['_id']] = $card;
        }

        return $cards;
    }

    /**
     * Get login user's allowed shared books view
     *
     * @return array $books_for_view
     */
    public function getAllowedSharedBooksView()
    {
        $allow_books = [];
        $books_for_view = [];

        // 共有アドレスブック一覧を取得する
        $book_manager = GRN_Address_BookManager::getInstance();
        $books = $book_manager->listSharedAddressBooks();

        if (0 < count($books)) {
            // 共有アドレスブック一覧の閲覧権限を評価する
            $rows = [];
            foreach (array_keys($books) as $book_id) {
                $rows[$book_id] = $books[$book_id]->getRow();
            }
            $login = $this->_uum->getLoginUser();
            $dynamic_roles = $this->_uum->listGrantedRoles();
            $authorities = ['browse', 'editing', 'operation'];
            $accesses = $this->_access_manager->evaluateAccesses($rows,
                $login, $dynamic_roles, $authorities);

            $authorities = ['browse'];
            foreach (array_keys($accesses) as $book_id) {
                $row = &$rows[$book_id];
                $security_model
                    = $this->_access_manager->getSecurityModel($row);
                if ($this->_access_manager->isAllowedAccess($accesses[$book_id],
                    $authorities, $security_model)
                ) {
                    $allow_books[$book_id] = &$row;
                }
            }

            // 共有アドレスブック情報一覧を取得する
            $books_for_view = $this->listBooks($books, $allow_books);
        }

        return $books_for_view;
    }

    /**
     * format builtin items in address book
     *
     * @param array $builtin_items : builtin items
     * @param array $address_info  : address information
     *
     * @return array $formatted_builtin_items: builtin items after format
     */
    public function formatBuiltinItems($builtin_items, $address_info)
    {
        $formatted_builtin_items = [];
        $subject = $builtin_items['subject'];
        unset($builtin_items['subject']);
        foreach ($builtin_items as $key => $value) {
            $formatted_builtin_items[$key] = $value;
            //Move the position of display name below the department name.
            if ($key == "section_name") // key of department
            {
                $formatted_builtin_items['subject'] = $subject;
            }
        }
        // if the "map" item existed then must show it
        $map_item_key = 'map';
        if (isset($address_info[$map_item_key])
            && $address_info[$map_item_key]
        ) {
            if ( ! isset($formatted_builtin_items[$map_item_key])
                 || ! is_array($formatted_builtin_items[$map_item_key])
            ) {
                $formatted_builtin_items[$map_item_key] = [];
            }
            $formatted_builtin_items[$map_item_key]['id'] = $map_item_key;
            $formatted_builtin_items[$map_item_key]['use'] = true;
            $formatted_builtin_items[$map_item_key]['display_name']
                = cb_msg('grn/address',
                $map_item_key);
        } else {
            unset($formatted_builtin_items[$map_item_key]);
        }

        return $formatted_builtin_items;
    }
}


