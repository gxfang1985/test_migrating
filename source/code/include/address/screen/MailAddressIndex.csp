<?php

namespace grn\address\screen;

require_once('fw/mail_message.csp');

class MailAddressIndex
{

    const SELECT_TYPE_DEFAULT = "default";
    const SELECT_TYPE_AUTOMATIC_FORWARD = "automaticForward";

    public function getSelectedUser(array $input, $selectType)
    {

        if (self::SELECT_TYPE_DEFAULT === $selectType) {
            return $this->getSelectedUserWhenDefault($input);
        }

        if (self::SELECT_TYPE_AUTOMATIC_FORWARD === $selectType) {
            return $this->getSelectedUseWhenAutomaticForward($input);
        }
        throw new \grn\grn\GrnException();

    }

    private function getSelectedUseWhenAutomaticForward(array $input)
    {
        $selected_users = [];
        if (array_key_exists("address_forwardTo", $input)) {
            $selected = $input["address_forwardTo"];
            $selected_users["forwardTo"]
                = $this->getSelectedUserForView($selected);
        }

        return $selected_users;
    }

    private function getSelectedUserWhenDefault(array $input)
    {
        $selected_users = [];
        if (array_key_exists('address_to', $input)
            && array_key_exists('address_cc', $input)
            && array_key_exists('address_bcc', $input)
        ) {
            foreach (["to", "cc", "bcc"] as $hash) {
                $selected = $input["address_" . $hash];
                $selected_users[$hash]
                    = $this->getSelectedUserForView($selected);
            }
        }

        return $selected_users;
    }

    private function getSelectedUserForView($selected)
    {
        $selectedArray = \CB_MailAddress::static_parse_list($selected);
        $selected_users = [];
        foreach ($selectedArray as $id => $address) {
            if (0 < strlen($address->raw_address)) {
                $userId = 'r' . $id;
                $selected_users[$userId] = [
                    'uid'            => $userId,
                    'email_address'  => \GRN_Mail_Utility::static_unescapeDisplayName($address->raw_address),
                    'escape_address' => $address->raw_address,
                    'raw_address'    => true
                ];
            }
        }

        return $selected_users;
    }

    public function validateSelectType($selectType)
    {
        $allowedSelectType = [
            self::SELECT_TYPE_DEFAULT,
            self::SELECT_TYPE_AUTOMATIC_FORWARD
        ];
        if ( ! in_array($selectType, $allowedSelectType)) {
            cb_throw_error();
        }
    }

}
