<?php
require_once('grn/application.csp');
require_once('star/table.csp');
require_once('star/resources.csp');

use grn\grn\access\service\AppAccess;

class GRN_Star_StarLogic
{
    /**
     * @access private
     */
    private $_logger = null;
    /**
     * @access private
     */
    private $_locator = null;

    /**
     * @access private
     */
    function __construct()
    {
        $this->_locator = GRN_ApplicationLocator::instance();
    }

    /**
     * @return bool
     */
    function isActive()
    {
        return $this->_locator->isActive(GRN_STAR_APPLICATION_ID);
    }

    private static $_instance = null;

    /**
     * @static
     * @return GRN_Star_StarLogic
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * @param CB_User $user
     *
     * @return CB_TableInfo
     */
    function getStarTable($user)
    {
        $table_manager
            = $this->_locator->getTableManager(GRN_STAR_APPLICATION_ID);
        global $G_config_common;
        $table_is_merged = $G_config_common->get('Database', 'merged');
        $table_name = GRN_STAR;

        if ($table_is_merged != 1) {
            if ( ! is_object($user) || ! is_a($user, 'CB_User')) {
                cb_throw_error(E_GRN_USER_NOT_FOUND);
            }
            $table_name = grn_get_personal_tablename_star($user->getOID(),
                GRN_STAR);
        }
        $table_info = $table_manager->getTableInfo($table_name);

        return $table_info;
    }

    /**
     * Add Star
     *
     * @param    CB_User       $user      CB_User Object
     * @param    GRN_Star_Data $star_data GRN_Star_Data Object
     *
     * @return   mixed              CB_Row         Star row
     */
    function add($user, $star_data)
    {
        if ( ! is_a($star_data, 'GRN_Star_Data')) {
            assert('FALSE');

            return;
        }
        $table = $this->getStarTable($user);
        $row = $table->newRow();

        require_once('star/config.csp');
        $logic = GRN_Star_SystemLogic::getInstance();
        $limit = $logic->getStarLimit();
        $count = $this->getCount($user);
        if ($limit != -1 && $count >= $limit)   //-1: 無制限
        {
            // application object
            require_once('grn/application.csp');
            $locator = GRN_ApplicationLocator::instance();
            $name = $locator->getName('star');
            $name = htmlspecialchars($name);
            cb_throw_error(E_GRN_STAR_OVER_LIMIT_VALUE,
                ['app_name' => $name], ['app_name' => $name],
                ['app_name' => $name]);
        }

        // set data
        $data_array = $star_data->getData();
        foreach ($data_array as $key => $value) {
            $row->set($key, $value);
        }
        $row->set('user', $user);

        $ts = new CB_TimeStamp();
        $ts->unix_ts = time();
        $row->set('ctime', $ts);
        $row->set('mtime', $ts);

        return $row;
    }

    /**
     * @param CB_User $user
     * @param         $module_id
     * @param         $unique_id
     *
     * @return bool
     */
    function remove($user, $module_id, $unique_id)
    {
        $table_info = $this->getStarTable($user);
        $rowset = new CB_RowSet($table_info);
        $conditions
            = $rowset->queryf("(col_user='@S') AND (col_module_id='@S') AND (col_unique_id='@S')",
            $user->getOID(), $module_id, $unique_id);
        $rowset->addCondition($conditions);

        return $rowset->deleteAllMatched();
    }

    /**
     * @param                $module_id
     * @param                $unique_id
     * @param CB_User[]|null $user_list
     *
     * @return bool
     */
    function removeStarsByUsers($module_id, $unique_id, $user_list = null)
    {
        if ( ! is_array($user_list)) {
            return false;
        }
        $table_names = [];
        foreach ($user_list as $user_id) {
            $table_name = grn_get_personal_tablename_star($user_id,
                'tab_grn_star');
            if ( ! array_key_exists($table_name, $table_names)) {
                $table_names[$table_name] = [];
            }
            $table_names[$table_name][] = $user_id;
        }

        $db = $this->_locator->getConnection('star');

        $query_tpl
            = "DELETE FROM %s WHERE col_user IN (@A) AND col_module_id='@S' AND col_unique_id='@S'";
        foreach ($table_names as $table_name => $user_ids) {
            $table_name_embbed_tpl = sprintf($query_tpl, $table_name);
            $query = $db->format($table_name_embbed_tpl,
                [$user_ids, $module_id, $unique_id]);
            $ret = $db->query($query);
            if ($ret === false) {
                $db->throwError([
                    'query' => 'failed query on DELETE: ' . $query
                ]);
            }
        }

        return true;
    }

    /**
     * @param CB_User       $user
     * @param GRN_Star_Data $data
     *
     * @return bool
     */
    function modify($user, $data)
    {
        if ( ! is_a($data, 'GRN_Star_Data')) {
            assert("FALSE");

            return false;
        }
        $table_info = $this->getStarTable($user);
        $rowset = new CB_RowSet($table_info);
        $conditions
            = $rowset->queryf("(col_user='@S') AND (col_module_id='@S') AND (col_unique_id='@S')",
            $user->getOID(), $data->getModuleId(), $data->getUniqueId());
        $rowset->addCondition($conditions);
        $row = $rowset->iterate();
        if ( ! $row) {
            return false;
        }

        $data_array = $data->getData();
        foreach ($data_array as $column => $value) {
            $row->set($column, $value);
        }

        $ts = new CB_TimeStamp();
        $ts->unix_ts = time();
        $row->set('mtime', $ts);

        return true;
    }

    /**
     * @param CB_User $user
     * @param         $star_ids
     *
     * @return bool
     */
    function removeByIds($user, $star_ids)
    {
        if ( ! is_array($star_ids)) {
            return false;
        }

        $table_info = $this->getStarTable($user);
        $rowset = new CB_RowSet($table_info);
        $conditions = [];
        $conditions[] = $rowset->queryf("(col_user='@S')", $user->getOID());
        $conditions[] = $rowset->queryf('(_id IN (@A))', $star_ids);
        $conditions = implode(' AND ', $conditions);
        $rowset->addCondition($conditions);

        return $rowset->deleteAllMatched();
    }

    /**
     * Count the number of star of user
     *
     * @param CB_User      $user
     * @param string       $module_id
     * @param CB_Timestamp $start_ts
     * @param CB_Timestamp $last_ts
     *
     * @return int
     */
    function getCount(
        $user,
        $module_id = null,
        $start_ts = null,
        $last_ts = null
    ) {
        $table_info = $this->getStarTable($user);
        $rowset = new CB_RowSet($table_info);
        $conditions = [];
        $conditions[] = $rowset->queryf("(col_user='@S')", $user->getOID());
        if ( ! is_null($module_id) && strlen($module_id) > 0) {
            if ( ! AppAccess::isAppAvailable(substr($module_id, 4))) {
                return 0;
            }

            $conditions[] = $rowset->queryf("(col_module_id='@S')", $module_id);
        } else {
            /** @var GRN_Star_Application $star_app */
            $star_app = $this->_locator->getInstance(GRN_STAR_APPLICATION_ID);
            $supported_apps = $star_app->getSupportedApplications();
            $app_ids
                = AppAccess::getAvailableAppIdsByUserId($user->getOID());
            foreach (array_keys($supported_apps) as $app_id) {
                $app = $this->_locator->getInstance($app_id);
                if ( ! $app || ! in_array($app_id, $app_ids)) {
                    unset($supported_apps[$app_id]);
                }
            }
            if (count($supported_apps) == 0) {
                $ret = 0;

                return $ret;
            }
            $conditions[] = $rowset->queryf("col_module_id IN (@A)",
                array_values($supported_apps));
        }
        if (is_a($start_ts, 'CB_TimeStamp')) {
            $conditions[] = sprintf("(col_timestamp >= '%d')",
                $start_ts->unix_ts);
        }
        if (is_a($last_ts, 'CB_TimeStamp')) {
            $conditions[] = sprintf("(col_timestamp < '%d')",
                $last_ts->unix_ts);
        }
        $conditions = implode(' AND ', $conditions);
        $rowset->addCondition($conditions);
        $rowset->applyGroupFunctions(['count' => 'COUNT(*)']);
        $result = $rowset->iterate();
        $rowset->destroy();

        return ! is_null($result) ? $result['count'] : 0;
    }

    /**
     * @param GRN_Star $row
     *
     * @return GRN_Star_Data|null
     */
    function _getData($row)
    {
        if ( ! is_object($row)) {
            assert('FALSE');
            $ret = null;

            return $ret;
        }

        $star_data = new GRN_Star_Data();
        // set data
        $star_data->setModuleId($row->get(GRN_STAR_DATA_KEY_MODULE_ID));
        $star_data->setUniqueId($row->get(GRN_STAR_DATA_KEY_UNIQUE_ID));
        $star_data->setOrgDataString($row->get(GRN_STAR_DATA_KEY_ORG_DATA));
        $star_data->setSubjectData($row->get(GRN_STAR_DATA_KEY_SUBJECT));
        $star_data->setSenderData($row->get(GRN_STAR_DATA_KEY_SENDER_NAME),
            $row->get(GRN_STAR_DATA_KEY_SENDER_ID));
        $star_data->setTimeStampData($row->get(GRN_STAR_DATA_KEY_TIMESTAMP));

        return $star_data;
    }

    /**
     * @param CB_User      $user
     * @param null         $module_id
     * @param int          $offset
     * @param int          $limit
     * @param string       $sort
     * @param bool         $reserve
     * @param CB_Timestamp $start_ts
     * @param CB_Timestamp $last_ts
     *
     * @return array
     */
    function getList(
        $user,
        $module_id = null,
        $offset = 0,
        $limit = 20,
        $sort = 'timestamp',
        $reserve = false,
        $start_ts = null,
        $last_ts = null
    ) {
        $table = $this->getStarTable($user);
        $rowset = new CB_RowSet($table);
        $rowset->limit($offset, $limit);
        $rowset->addOrderColumn('col_' . $sort, $reserve);
        //GRN2-1945
        $rowset->addOrderColumn('_id', true);
        //GRN2-1945
        $conditions = [];
        $conditions[] = $rowset->queryf("(col_user = '@S')", $user->getOID());
        if ( ! is_null($module_id) && strlen($module_id) > 0) {
            if ( ! AppAccess::isAppAvailable(substr($module_id, 4))) {
                return [];
            }

            $conditions[] = $rowset->queryf("(col_module_id='@S')", $module_id);
        } else {
            /** @var GRN_Star_Application $star_app */
            $star_app = $this->_locator->getInstance(GRN_STAR_APPLICATION_ID);
            $supported_apps = $star_app->getSupportedApplications();
            $app_ids
                = AppAccess::getAvailableAppIdsByUserId($user->getOID());
            foreach (array_keys($supported_apps) as $app_id) {
                $app = $this->_locator->getInstance($app_id);
                if ( ! $app || ! in_array($app_id, $app_ids)) {
                    unset($supported_apps[$app_id]);
                }
            }
            if (count($supported_apps) == 0) {
                $ret = [];

                return $ret;
            }
            $conditions[] = $rowset->queryf("col_module_id IN (@A)",
                array_values($supported_apps));
        }
        if (is_a($start_ts, 'CB_TimeStamp')) {
            $conditions[] = sprintf("(col_timestamp >= '%d')",
                $start_ts->unix_ts);
        }
        if (is_a($last_ts, 'CB_TimeStamp')) {
            $conditions[] = sprintf("(col_timestamp < '%d')",
                $last_ts->unix_ts);
        }

        $conditions = implode(' AND ', $conditions);
        $rowset->addCondition($conditions);

        $datas = [];
        while ( ! is_null($row = $rowset->iterate())) {
            $id = $row->getOID();
            $data = $this->_getData($row);
            $datas[$id] = $data->getData();
            $org_data = $data->getOrgData();
            $datas[$id][GRN_STAR_DATA_KEY_ORG_DATA] = $org_data;
            $datas[$id]['ctime'] = $row->get('ctime');
            $datas[$id]['mtime'] = $row->get('mtime');
            //GRN2-1943
            $datas[$id]['updater_name'] = $row->get('updater_name');
            $datas[$id]['updater_id'] = $row->get('updater');
            //GRN2-1943

            //GRN2-1945
            $datas[$id]['list_index'] = $row->get('list_index');
            //GRN2-1945

            if ($datas[$id]['module_id'] == "grn.schedule"
                && array_key_exists('subject', $datas[$id])
            ) {
                $datas[$id]['subject']
                    = htmlspecialchars_decode($datas[$id]['subject']);
            }

        }
        $rowset->destroy();

        return $datas;
    }

    /**
     * @param CB_User $user
     * @param         $module_id
     * @param         $unique_id
     *
     * @return GRN_Star_Data|null
     */
    function getStar($user, $module_id, $unique_id)
    {
        $table = $this->getStarTable($user);
        $rowset = new CB_RowSet($table);
        $format
            = "(col_user = '@S') AND (col_module_id = '@S') AND (col_unique_id = '@S')";
        $condition = $rowset->queryf($format, $user->getOID(), $module_id,
            $unique_id);
        $rowset->addCondition($condition);
        $row = $rowset->iterate();
        if ( ! $row) {
            $ret = null;

            return $ret;
        }
        $rowset->destroy();

        return $this->_getData($row);
    }

    /**
     * @param CB_User $user
     * @param         $module_id
     * @param         $unique_id
     *
     * @return bool
     */
    function isMarked($user, $module_id, $unique_id)
    {
        $table = $this->getStarTable($user);
        $rowset = new CB_RowSet($table);
        $format
            = "(col_user = '@S') AND (col_module_id = '@S') AND (col_unique_id = '@S')";
        $condition = $rowset->queryf($format, $user->getOID(), $module_id,
            $unique_id);
        $rowset->addCondition($condition);
        $result = $rowset->iterate();
        if (is_null($result)) {
            return false;
        }
        $rowset->destroy();

        return true;
    }

    /**
     * @param CB_User $user
     * @param         $module_id
     * @param array   $unique_ids
     *
     * @return array
     */
    function getStatusByIDs($user, $module_id, $unique_ids = [])
    {
        $status = [];
        if ( ! is_array($unique_ids) || count($unique_ids) == 0) {
            return $status;
        }

        $table = $this->getStarTable($user);
        $rowset = new CB_RowSet($table);

        // default all item is off
        foreach ($unique_ids as $id) {
            $status[$id] = 0;
        }
        $format = "(col_user='@S') AND (col_module_id='@S')";
        $rowset->addCondition($rowset->queryf($format, $user->getOID(),
            $module_id));
        $condition = $rowset->queryf("(col_unique_id IN (@A))", $unique_ids);
        $rowset->addCondition($condition);
        while (($row = $rowset->iterate())) {
            $status[$row->get('unique_id')] = 1;
        }

        return $status;
    }
}

class GRN_Star_Data
{
    /**
     * @access private
     */
    private $_star_data = null;

    /**
     * Contructor
     */
    function __construct()
    {
        $this->initData();
    }

    /**
     * @access private
     * @return mixed
     */
    function initData()
    {
        $this->_star_data = [];
    }

    /**
     * @access private
     * @return mixed    // star data
     */
    function &getData()
    {
        return $this->_star_data;
    }

    /**
     * @param    string $module_id // grn.scheulde, grn.mail, ...
     */
    function setModuleId($module_id)
    {
        $this->_star_data[GRN_STAR_DATA_KEY_MODULE_ID] = $module_id;
    }

    /**
     * @return null
     */
    function getModuleId()
    {
        if (isset($this->_star_data[GRN_STAR_DATA_KEY_MODULE_ID])) {
            return $this->_star_data[GRN_STAR_DATA_KEY_MODULE_ID];
        }

        return null;
    }

    /**
     * @param    string $unique_id
     */
    function setUniqueId($unique_id)
    {
        $this->_star_data[GRN_STAR_DATA_KEY_UNIQUE_ID] = $unique_id;
    }

    /**
     * @return mixed
     */
    function getUniqueId()
    {
        if (isset($this->_star_data[GRN_STAR_DATA_KEY_UNIQUE_ID])) {
            return $this->_star_data[GRN_STAR_DATA_KEY_UNIQUE_ID];
        }

        return null;
    }

    /**
     * @param    string $subject
     */
    function setSubjectData($subject)
    {
        $this->_star_data[GRN_STAR_DATA_KEY_SUBJECT] = mb_strimwidth($subject,
            0, GRN_STAR_SUBJECT_MAXLEN, '');;
    }

    /**
     * @return    mixed    subject(title) data or null
     */
    function getSubjectData()
    {
        if (isset($this->_star_data[GRN_STAR_DATA_KEY_SUBJECT])) {
            return $this->_star_data[GRN_STAR_DATA_KEY_SUBJECT];
        }

        return null;
    }

    /**
     * @param    CB_TimeStamp $timestamp
     */
    function setTimeStampData($timestamp)
    {
        if ( ! is_a($timestamp, 'CB_TimeStamp')) {
            assert('FALSE');

            return;
        }
        $this->_star_data[GRN_STAR_DATA_KEY_TIMESTAMP] = $timestamp;
    }

    /**
     * @return    mixed    CB_TimeStamp or null
     */
    function &getTimeStampData()
    {
        $ret = null;
        if (isset($this->_star_data[GRN_STAR_DATA_KEY_TIMESTAMP])) {
            $ret = $this->_star_data[GRN_STAR_DATA_KEY_TIMESTAMP];
        }

        return $ret;
    }

    /**
     * @param array $org_data original data
     */
    function setOrgData($org_data)
    {
        if ( ! is_array($org_data)) {
            // invalid data
            assert('FALSE');

            return;
        }

        $this->_star_data[GRN_STAR_DATA_KEY_ORG_DATA] = serialize($org_data);
    }

    /**
     * @return    mixed    org_data or null
     */
    function getOrgData()
    {
        if ( ! isset($this->_star_data[GRN_STAR_DATA_KEY_ORG_DATA])
             || is_null($this->_star_data[GRN_STAR_DATA_KEY_ORG_DATA])
        ) {
            return null;
        }

        return cb_unserialize($this->_star_data[GRN_STAR_DATA_KEY_ORG_DATA],
            ["allowed_classes" => false]);
    }

    /**
     * Data serialized.
     *
     * @param array $org_data original data
     */
    function setOrgDataString($org_data)
    {
        $this->_star_data[GRN_STAR_DATA_KEY_ORG_DATA] = $org_data;
    }

    /**
     * @return    mixed    org_data or null
     */
    function getOrgDataString()
    {
        if (isset($this->_star_data[GRN_STAR_DATA_KEY_ORG_DATA])) {
            return $this->_star_data[GRN_STAR_DATA_KEY_ORG_DATA];
        }

        return null;
    }

    /**
     * Set sender data of item
     *
     * @param    string $sender_name
     * @param    string $sender_id
     */
    function setSenderData($sender_name, $sender_id)
    {
        if ( ! is_null($sender_name)) {
            $sender_name = mb_strimwidth($sender_name, 0,
                GRN_STAR_SENDER_MAXLEN, '');
        }
        if ( ! is_null($sender_id)) {
            $sender_id = mb_strimwidth($sender_id, 0, GRN_STAR_SENDER_MAXLEN,
                '');
        }

        $this->_star_data[GRN_STAR_DATA_KEY_SENDER_ID] = $sender_id;
        $this->_star_data[GRN_STAR_DATA_KEY_SENDER_NAME] = $sender_name;
    }

    /**
     * Get sender data of item
     *
     * @return    mixed    sender name, sender id(name, id as keys)
     */
    function getSenderData()
    {
        if ( ! isset($this->_star_data[GRN_STAR_DATA_KEY_SENDER_ID])
             &&
             ! isset($this->_star_data[GRN_STAR_DATA_KEY_SENDER_NAME])
        ) {
            return null;
        }

        $sender_data = [];
        // Name
        if (isset($this->_star_data[GRN_STAR_DATA_KEY_SENDER_NAME])) {
            $sender_data['name']
                = $this->_star_data[GRN_STAR_DATA_KEY_SENDER_NAME];
        } else {
            $sender_data['name'] = null;
        }

        // ID
        if (isset($this->_star_data[GRN_STAR_DATA_KEY_SENDER_ID])) {
            $sender_data['id'] = $this->_star_data[GRN_STAR_DATA_KEY_SENDER_ID];
        } else {
            $sender_data['id'] = null;
        }

        return $sender_data;
    }
}
