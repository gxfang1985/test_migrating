<?php

// UTF-8用文字列操作関数郡

// UTF-8コード体系のチェック（１文字何バイトかを返す）
function utf8_bytecheck(&$byte)
{
    $byte = intval($byte);
    if (intval($byte & bindec('10000000')) == 0) {
        return 1;
    }
    if (intval($byte & bindec('01000000')) == 0) {
        return 1;  // illegal code
    }
    if (intval($byte & bindec('00100000')) == 0) {
        return 2;
    }
    if (intval($byte & bindec('00010000')) == 0) {
        return 3;
    }
    if (intval($byte & bindec('00001000')) == 0) {
        return 4;
    }
    if (intval($byte & bindec('00000100')) == 0) {
        return 5;
    }
    if (intval($byte & bindec('00000010')) == 0) {
        return 6;
    }
    if (intval($byte & bindec('00000001')) == 0) {
        return 7;
    }

    return 1;  // illegal code
}

// 半角カナの判定（TRUE/FALSE）
function utf8_hankana(&$byte1, &$byte2, &$byte3)
{
    if (intval($byte1) == 0xef) {
        if (intval($byte2) == 0xbd) {
            if (0xa1 <= intval($byte3) && intval($byte3) <= 0xbf) {
                return true;
            }
        }
        if (intval($byte2) == 0xbe) {
            if (0x80 <= intval($byte3) && intval($byte3) <= 0x9f) {
                return true;
            }
        }
    }

    return false;
}

// 文字列の幅を返す（mb_strwidthに問題がある為、自作）
function utf8_strwidth(&$s)
{
    //return mb_strwidth($s);

    $chars = preg_split('//', $s, -1, PREG_SPLIT_NO_EMPTY);
    $width = 0;
    for ($i = 0, $length = count($chars); $i < $length;) {
        $ascii_value = ord($chars[$i]);
        $num = utf8_bytecheck($ascii_value);
        switch ($num) {
            case 1:
                $width += 1;
                break;
            case 2:
                $width += 2;
                break;
            case 3:
                $ascii_st_value = ord($chars[$i]);
                $ascii_nd_value = ord($chars[$i + 1]);
                $ascii_rd_value = ord($chars[$i + 2]);
                if (utf8_hankana($ascii_st_value, $ascii_nd_value,
                    $ascii_rd_value)
                ) {
                    $width += 1;
                } else {
                    $width += 2;
                }
                break;
            default:
                $width += 2;
                break;
        }
        $i += $num;
    }

    return $width;
}

// 文字列を幅で丸める（mb_strimwidthに問題がある為、自作）
function utf8_strimwidth(&$s, $width, $add)
{
    //return mb_strimwidth($s, 0, $width, $add);

    if (utf8_strwidth($s) <= $width) {
        return $s;
    } else {
        $chars = preg_split('//', $s, -1, PREG_SPLIT_NO_EMPTY);
        $out_width = $width - utf8_strwidth($add);
        for ($i = 0, $length = count($chars); $i < $length;) {
            $ascii_value = ord($chars[$i]);
            $num = utf8_bytecheck($ascii_value);
            switch ($num) {
                case 1:
                    $tmp_width = 1;
                    break;
                case 2:
                    $tmp_width = 2;
                    break;
                case 3:
                    $ascii_st_value = ord($chars[$i]);
                    $ascii_nd_value = ord($chars[$i + 1]);
                    $ascii_rd_value = ord($chars[$i + 2]);
                    if (utf8_hankana($ascii_st_value, $ascii_nd_value,
                        $ascii_rd_value)
                    ) {
                        $tmp_width = 1;
                    } else {
                        $tmp_width = 2;
                    }
                    break;
                default:
                    $tmp_width = 2;
                    break;
            }

            if ($out_width - $tmp_width < 0) {
                break;
            }

            $out_width -= $tmp_width;
            $i += $num;
        }
        $out = implode("", array_slice($chars, 0, $i));
        $out .= $add;
    }

    return $out;
}


