<?php

/**
 * 項目を表示するかどうか調べる
 *
 * @return bool
 */
function checkUserItemSetting($item, $flags = null)
{
    // $flags が省略されたら「使用する」「公開する」「ケータイ表示」がチェックされているかどうか調べる
    if ( ! is_array($flags)) {
        $flags = ['use', 'show', 'cellular'];
    }
    foreach ($flags as $flag) {
        if ( ! array_key_exists($flag, $item) || ! $item[$flag]) {
            return false;
        }
    }

    return true;
}

/**
 * 組み込み項目で、表示するものだけを取得する
 *
 * @param $flags array checkUserItemSetting関数に渡されるもの
 *
 * @return array( 'display', 'use', ... )
 */
function getDisplayDefaultItemIdsList($flags = null)
{
    global $G_container_base;
    $uum =& $G_container_base->getInstance('uum');

    $all_item_ids = $uum->listDefaultItemIds();
    // check display presence
    require_once('presence/logic.csp');
    $presence_logic = GRN_Presence_Logic::getInstance();
    // hide attendee
    if ( ! $presence_logic->isActivePresence()) {
        unset($all_item_ids['attendee']);
    }
    $default_item_ids_list = array_keys($all_item_ids);

    $ret = [];
    foreach ($default_item_ids_list as $item_id) {
        $property = $uum->getDefaultItemProperty($item_id);
        if (checkUserItemSetting($property, $flags)) {
            $ret[] = $item_id;
        }
    }

    return $ret;
}

/**
 * カスタマイズ項目で、表示するものだけを取得する
 *
 * @param $flags array checkUserItemSetting関数に渡されるもの
 *
 * @return array( 'userinfo1'=>'...', 'userinfo2'=>'...' ... )
 */
function getDisplayExtensionItemList(&$user_obj, $flags = null)
{
    require_once('grn/controller.csp');
    $controller_util = new GRN_ControllerUtil();

    $ret = [];
    foreach (
        $controller_util->listExtendedItems($user_obj) as $item_id =>
        $item_value
    ) {
        if (checkUserItemSetting($item_value, $flags)
            && $item_value['type'] != 'image_url'
            && $item_value['type'] != 'file'
        ) {
            $ret[$item_id] = $item_value;
        }
    }

    return $ret;
}


/**
 *
 *
 */
function formatDefaultItem($item_id, &$user_obj)
{
    global $G_container_base;
    $uum =& $G_container_base->getInstance('uum');

    $ret = [];
    if ($item_id == 'usergroups') {
        $ret = getUserGroups($user_obj->getOID());
    } elseif ($item_id == 'primary_group') {
        $ret = getPrimaryGroup($user_obj->getOID());
    } else {
        // 画像は表示しない設定なので、$uum->getDefaultItemData の 'value' 要素の値は文字列
        $ret = $uum->getDefaultItemData($user_obj, $item_id);
        //$default_information[ $item_id ] = $user_obj->get( $item_id );
    }
    if ($item_id == 'attendee') {
        $ret['value']['value'] = mb_convert_kana($ret['value']['value'], 'k');
    } elseif ($item_id == 'usergroups') {
        foreach (array_keys($ret) as $key) {
            $ret[$key]['path'] = mb_convert_kana($ret[$key]['path'], 'k');
        }
    } elseif ($item_id == 'primary_group') {
        if (array_key_exists('path', $ret)) {
            $ret['path'] = mb_convert_kana($ret['path'], 'k');
        } else {
            $ret['path'] = '';
        }
    } elseif ($item_id == 'locale') {
        if (isset($ret['value']['localname'])) {
            // ロケール
            $ret['value'] = mb_convert_kana($ret['value']['localname'], 'k');
        } else {
            $ret['value'] = '';
        }
    } elseif ($item_id == 'base') {
        if (isset($ret['value']['local_name'])) {
            // 拠点
            $ret['value'] = mb_convert_kana($ret['value']['local_name'], 'k');
        } else {
            $ret['value'] = '';
        }
    } else {
        $ret['value'] = mb_convert_kana($ret['value'], 'k');
    }

    return $ret;
}


/**
 * 所属する組織を返す
 *
 *
 */
function getUserGroups($user_id)
{
    global $G_uum;

    require_once('grn/uum_util.csp');
    $uum_util = GRN_UumUtil::getInstance();
    $ret = [];
    $groups = $G_uum->getUserGroupsInfo($user_id);
    foreach ($groups as $group_id => $group) {
        $ret[$group_id] = [];
        $ret[$group_id]['oid'] = $group['_id'];
        $ret[$group_id]['name'] = $group['col_name'];
        $ret[$group_id]['path'] = $uum_util->getGroupPathString($group['_id'],
            ' > ');
    }

    return $ret;
}

/**
 * 優先する組織を返す
 *
 *
 */
function getPrimaryGroup($user_id)
{
    global $G_uum;

    $ret = [];
    require_once('grn/uum_util.csp');
    $uum_util = GRN_UumUtil::getInstance();
    $primary_group = $G_uum->getUserPrimaryGroupInfo($user_id);
    if ($primary_group !== false) {
        $ret['oid'] = $primary_group['_id'];
        $ret['name'] = $primary_group['col_name'];
        $ret['path'] = $uum_util->getGroupPathString($primary_group['_id'],
            ' > ');
    }

    return $ret;
}

/**
 * カスタマイズ項目でも組み込み項目でも、とにかく表示する
 *
 * @param $item_code string コード名
 * @param $user_obj  CB_User
 * @param $flags     array checkUserItemSetting関数に渡されるもの
 */
function getSelectedFieldInformation($item_code, &$user_obj, $flags = null)
{
    if ($flags === null) {
        $flags = ['use', 'show'];
    }

    $selected_item = ['display_name' => '', 'type' => '', 'value' => ''];
    foreach (getDisplayDefaultItemIdsList($flags) as $item_id) {
        if ($item_code == $item_id) {
            $selected_item = formatDefaultItem($item_id, $user_obj);

            return $selected_item;
        }
    }

    foreach (
        getDisplayExtensionItemList($user_obj, $flags) as $item_id =>
        $item_value
    ) {
        if ($item_code == $item_id) {
            $selected_item = $item_value;
            $selected_item['value'] = mb_convert_kana($selected_item['value'],
                'k');

            return $selected_item;
        }
    }

    return $selected_item;
}
