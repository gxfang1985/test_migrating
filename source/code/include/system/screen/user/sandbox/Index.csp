<?php

namespace grn\system\screen\user\sandbox;

use grn\system\sandbox\SandboxSchedulingEvent;
use grn\system\sandbox\SandboxStatus;
use grn\system\sandbox\GRN_Uum_Sandbox;
use grn\system\sandbox\SandboxProfileData;

class Index
{
    public function fetch()
    {
        require_once("grn/smarty.csp");
        $t = new \GRN_Smarty;

        //-- page title
        $page_title = grn_get_current_page_display_name();
        $t->assign('page_title', $page_title);

        //-- site position
        require_once('grn/controller.csp');
        $page_infos = [
            'sandbox/index' => null,
        ];
        $util = new \GRN_ControllerUtil();
        $site_position = $util->makeSitePosition('system/user/', $page_infos);
        $t->assign('site_position', $site_position);

        switch (SandboxStatus::getInstance()->get()) {
            case SandboxStatus::INITIAL:
                $t->display('system/user/sandbox/index_initial.tpl');
                break;

            case SandboxStatus::CREATE:
                $t->display('system/user/sandbox/index_create.tpl');
                break;

            case SandboxStatus::EXIST:
                (new IndexExist)->assign($t);
                break;

            case SandboxStatus::DISCARD:
                $t->display('system/user/sandbox/index_discard.tpl');
                break;

            case SandboxStatus::APPLY:
                $t->display('system/user/sandbox/index_apply.tpl');
                break;

            default:
                cb_throw_error();
        }
    }

    /**
     * @param array $input
     */
    public function post(array $input)
    {
        $eventRegister = new SandboxSchedulingEvent();
        $uum = GRN_Uum_Sandbox::getInstance();
        switch (cb_at($input, "command", "")) {
            case 'create': // Create
                if ($eventRegister->registerCreateEvent()) {
                    $uum->execInspection('sandbox', 'create', []);
                }
                break;
            case 'apply': // Apply now
                if ($eventRegister->hasEventOf($eventRegister::EVENT_PRESET_SANDBOX)
                    === false
                ) {
                    if ($eventRegister->registerApplyEvent()) {
                        $uum->execInspection('sandbox', 'apply', []);
                    }
                }
                break;
            case 'set_preset': // Specify the date and time | Modify the date and time
                $datetime = $this->parseApplyDateTime($input);
                if ($eventRegister->registerPresetEvent($datetime)) {
                    $uum->execInspection(
                        'sandbox-application-date', 'preset',
                        ["datetime" => $datetime->format()]
                    );
                }
                break;
            case 'delete_preset': // Reset
                if ($eventRegister->removePresetEvent()) {
                    $uum->execInspection('sandbox-application-date', 'cancel',
                        []);
                }
                break;
            case 'delete': // Delete tentative structure
                $eventRegister->removePresetEvent();
                if ($eventRegister->registerRemoveEvent()) {
                    $uum->execInspection('sandbox', 'delete', []);
                }
                break;
            default:
                cb_throw_error();
        }

        // delete existing sandbox result info
        $profile = SandboxProfileData::getInstance();
        $apply_result = $profile->getApplyResult();
        if (is_array($apply_result)) {
            $profile->deleteApplyResult();
        }

        cb_redirect('system/user/sandbox/index');
    }

    /**
     * @param array $input
     *
     * @return \CB_DateTimeEx
     */
    private function parseApplyDateTime(array $input)
    {
        $datetime = new \CB_DateTime();
        $datetime->year = cb_at($input, "sandbox_year");
        $datetime->month = cb_at($input, "sandbox_month");
        $datetime->day = cb_at($input, "sandbox_day");
        $datetime->hour = cb_at($input, "sandbox_hour");
        $datetime->minute = cb_at($input, "sandbox_minute");

        return new \CB_DateTimeEx($datetime);
    }
}
