<?php

namespace grn\system\screen\api;

use grn\grn\GrnGenericScreenBase;
use grn\grn\customization\bean\Proxy;
use grn\grn\customization\logic\ProxySettingLogic;
use grn\grn\ErrorCode;

abstract class ProxySettingBase extends GrnGenericScreenBase
{
    /**
     * @var string
     */
    protected $viewMode;

    /**
     * @var Proxy
     */
    protected $proxySetting;

    /**
     * @return string
     */
    public function fetch()
    {
        require_once('grn/smarty.csp');
        $t = new \GRN_Smarty();

        $t->assign('page_title', $this->getTitle());
        $t->assign('site_position', $this->getSitePosition());
        $t->assign('view_mode', $this->viewMode);
        $t->assign('proxy', new Proxy());

        $this->onFetch($t);

        return $t->fetch($this->getTemplateName() . '.tpl');
    }

    /**
     * @return string
     */
    public function getTitle()
    {
        return grn_get_current_page_display_name();
    }

    /**
     * @param \GRN_Smarty $smarty
     */
    protected function onFetch(\GRN_Smarty $smarty)
    {

    }

    protected function getTemplateName()
    {
        return cb_get_pagename();
    }

    public function getSitePosition()
    {
        require_once('grn/controller.csp');
        $controller_util = new \GRN_ControllerUtil();

        $page_infos = ['proxy_list' => []];

        if ($this->viewMode == 'modify') {
            $page_infos['proxy_view'] = [
                'id' => $this->getProxySetting()->getId()
            ];
        }

        $page_infos['proxy_' . $this->viewMode] = null;

        $site_position = $controller_util->makeSitePosition('system/api/',
            $page_infos);

        return $site_position;
    }

    /**
     * @return Proxy
     */
    protected function getProxySetting()
    {
        if ($this->proxySetting) {
            return $this->proxySetting;
        }

        $proxy_id = $this->getInput()['id'] ?? null;
        $proxy_setting_logic = new ProxySettingLogic();
        $proxy = $proxy_setting_logic->getById($proxy_id);
        if (is_null($proxy)) {
            cb_throw_error(ErrorCode::PROXY_API_SETTING_NOT_FOUND);
        }

        $this->proxySetting = $proxy;

        return $this->proxySetting;
    }

    protected function getAvailableProxyMethods()
    {
        return [
            'GET'    => ['value' => 'GET', 'label' => 'GET'],
            'POST'   => ['value' => 'POST', 'label' => 'POST'],
            'PUT'    => ['value' => 'PUT', 'label' => 'PUT'],
            'DELETE' => ['value' => 'DELETE', 'label' => 'DELETE'],
        ];
    }

    /**
     * @param int $active
     *
     * @return string
     */
    protected function getActiveString($active)
    {
        if ($active == Proxy::INACTIVE) {
            return Proxy::INACTIVE_STRING;
        } else {
            return Proxy::ACTIVE_STRING;
        }
    }

    /**
     * @param Proxy $proxy
     *
     * @return bool
     */
    protected function isBodyAvailable($proxy)
    {
        $is_display = true;
        if ($proxy instanceof Proxy) {
            $method = $proxy->getMethod();
            if ($method == Proxy::METHOD_GET
                || $method == Proxy::METHOD_DELETE
            ) {
                $is_display = false;
            }
        }

        return $is_display;
    }
}
