<?php

namespace grn\system\screen\api;

use grn\grn\customization\bean\Proxy;
use grn\grn\customization\logic\ProxySettingLogic;
use grn\grn\JSONResponse;
use grn\grn\Validate;
use grn\grn\ErrorCode;

class CommandProxySettingSave extends ProxySettingBase
{
    private $isNew = true;

    /**
     * Determine to add a proxy setting modify an existing one
     *
     * @param $is_new bool
     */
    public function setIsNew($is_new)
    {
        $this->isNew = $is_new;
    }

    public function post($input)
    {
        // set proxy settings
        $proxy = $this->isNew ? new Proxy() : $this->getProxySetting();

        cb_trim_check($input['code'] ?? '');
        $proxy->setCode(
            mb_substr(cb_trim($input['code']), 0,
                ProxySettingLogic::MAX_CODE_LENGTH_CHARACTER)
        );

        cb_trim_check($input['method'] ?? '');
        $methods = $this->getAvailableProxyMethods();
        if ( ! array_key_exists($input['method'], $methods)) {
            $proxy->setMethod(Proxy::METHOD_GET);
        } else {
            $proxy->setMethod($input['method']);
        }

        $url = cb_trim_check($input['url'] ?? '');
        if ( ! Validate::isURL($url)) {
            cb_throw_error(ErrorCode::PROXY_API_SETTING_URL_INVALID);
        }
        $proxy->setURL($url);

        $proxy->setParams(
            $this->getKeyValueArrayParam('url_params')
        );

        $proxy->setHeaders(
            $this->getKeyValueArrayParam('headers')
        );

        if ($this->isBodyAvailable($proxy)) {
            $proxy->setBody(
                $this->getKeyValueArrayParam('body')
            );
        } else {
            $proxy->setBody([]);
        }

        $status_apply = $input['status_apply'] ?? 0;
        $proxy->setActive(($status_apply == 1) ? Proxy::ACTIVE
            : Proxy::INACTIVE);

        $proxy_setting_logic = new ProxySettingLogic();
        if ($this->isNew) {
            $proxy = $proxy_setting_logic->add($proxy);
        } else {
            $proxy_setting_logic->update($proxy);
        }

        require_once('grn/logger.csp');
        $logger_manager = \CB_LoggerManager::getInstance();
        $logger = $logger_manager->getLogger('grn.common');
        $log_action = $this->isNew ? 'create' : 'modify';
        $log_target = 'proxy_api';
        $log_params = sprintf("id:%s, code:'%s'", $proxy->getId(),
            $proxy->getCode());
        $log_message = sprintf("[%s] %s (%s)", $log_action, $log_target,
            $log_params);
        $logger->noticeEx($log_action, $log_target, $log_message);

        // create response
        $response_data = [
            'success'      => true,
            'redirect_url' => cb_pageurl(
                $this->isNew ? 'system/api/proxy_list'
                    : 'system/api/proxy_view',
                $this->isNew ? null : ['id' => $proxy->getId()]),
        ];

        $json = JSONResponse::create();
        $json->response($response_data);
    }

    /**
     * @param $arg_name string
     *
     * @return array
     */
    private function getKeyValueArrayParam($arg_name)
    {
        $array_json = $this->getInput()[$arg_name] ?? '';

        $array = json_decode($array_json, true);

        if ( ! is_array($array)) {
            return [];
        }

        // remove item which has empty key
        $result = array_filter($array, function ($item) {
            return ($item['key'] ?? '') != '';
        });

        return array_values($result);
    }
}
