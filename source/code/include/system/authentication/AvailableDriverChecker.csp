<?php

namespace grn\system\authentication;

require_once('grn/authentication.csp');
require_once('grn/error_code.csp');

/**
 * This class checks whether the operations(view, modify, add, delete) can be done with specified driver
 * in the pages under 'doc_root/system/authentication'.
 */
class AvailableDriverChecker
{
    private static $METHOD_TYPE_AUTHENTICATE = 1;
    private static $METHOD_TYPE_LOGIN = 2;
    private static $METHOD_TYPE_REPOSITORY = 3;

    /** @var int */
    private $method_type;

    /** @var string */
    private $error_code_driver_not_found;

    private function __construct($method_type, $error_code_driver_not_found)
    {
        $this->method_type = $method_type;
        $this->error_code_driver_not_found = $error_code_driver_not_found;
    }

    /**
     * @return AvailableDriverChecker
     */
    public static function getInstanceOfLoginMethod()
    {
        return new AvailableDriverChecker(self::$METHOD_TYPE_LOGIN,
            E_GRN_CMMN_AUTH_LOGIN_NOT_FOUND);
    }

    /**
     * @return AvailableDriverChecker
     */
    public static function getInstanceOfAuthenticateMethod()
    {
        return new AvailableDriverChecker(self::$METHOD_TYPE_AUTHENTICATE,
            E_GRN_CMMN_AUTH_AUTHENTICATE_NOT_FOUND);
    }

    /**
     * @return AvailableDriverChecker
     */
    public static function getInstanceOfRepositoryMethod()
    {
        return new AvailableDriverChecker(self::$METHOD_TYPE_REPOSITORY,
            E_GRN_CMMN_AUTH_REPOSITORY_NOT_FOUND);
    }

    /**
     * @param string $driver_type
     *
     * @return \GRN_Authentication_DriverBase
     */
    private function getDriver($driver_type)
    {
        switch ($this->method_type) {
            case self::$METHOD_TYPE_REPOSITORY:
                $authentication_service
                    = \GRN_Authentication_Service::getInstance();

                return $authentication_service->getRepositoryDriver($driver_type);
            case self::$METHOD_TYPE_LOGIN:
                $authentication_service
                    = \GRN_Authentication_Service::getInstance();

                return $authentication_service->getLoginDriver($driver_type);
            case self::$METHOD_TYPE_AUTHENTICATE:
                $authentication_service
                    = \GRN_Authentication_Service::getInstance();

                return $authentication_service->getAuthenticateDriver($driver_type);
            default:
                throw new \RuntimeException();
        }
    }

    /**
     * @param string $driver_type
     */
    public function canView($driver_type)
    {
        if ( ! $this::getDriver($driver_type)->canViewOnAuthenticationPages()) {
            cb_throw_error($this->error_code_driver_not_found);
        }
    }

    /**
     * @param string      $driver_type
     * @param string|null $page_driver_type
     */
    public function canModify($driver_type, $page_driver_type = null)
    {
        if ( ! $this->getDriver($driver_type)
                    ->canModifyOnAuthenticationPages()
        ) {
            cb_throw_error($this->error_code_driver_not_found);
        }

        if ( ! is_null($page_driver_type)) {
            if ($driver_type !== $page_driver_type) {
                cb_throw_error($this->error_code_driver_not_found);
            }
        }
    }

    /**
     * @param string $driver_type
     */
    public function canAdd($driver_type)
    {
        if ( ! $this->getDriver($driver_type)->canAddOnAuthenticationPages()) {
            cb_throw_error($this->error_code_driver_not_found);
        }
    }

    /**
     * @param string $driver_type
     */
    public function canDelete($driver_type)
    {
        if ( ! $this->getDriver($driver_type)
                    ->canDeleteOnAuthenticationPages()
        ) {
            cb_throw_error($this->error_code_driver_not_found);
        }
    }

}
