<?php

namespace grn\system\sandbox;

require_once('fw/basic_date.csp');

class SandboxSchedulingEvent
{
    /** @var \CB_SchedulingService */
    private $schedulingService;

    const EVENT_CREATE_SANDBOX = "create_sandbox";
    const EVENT_DELETE_SANDBOX = "delete_sandbox";
    const EVENT_APPLY_SANDBOX = "apply_sandbox";
    const EVENT_PRESET_SANDBOX = "preset_sandbox";

    public function __construct()
    {
        require_once('fw/schedule.csp');
        $this->schedulingService = \CB_SchedulingService::getInstance();
    }

    /**
     * Register [Create tentative structure] event in schedule service.
     *
     * @return bool TRUE:registered｜FALSE：none
     */
    public function registerCreateEvent()
    {
        if (SandboxStatus::getInstance()->get(true)
            === SandboxStatus::INITIAL
        ) {
            $time = new \CB_Timestamp();
            $this->schedulingService->registerOnceEvent(self::EVENT_CREATE_SANDBOX,
                'create_sandbox.csp', $time);

            return true;
        }

        return false;
    }

    /**
     * Register [Apply Now] event in schedule service.
     *
     * WebのUI上から登録するときは、preset_sandboxがあるか確認する。 @see Index::post
     * preset_sandbox内で、apply_sandboxのイベントを登録するときはpreset_sandboxの有無は確認しない。
     * スケジューリングサービスで削除されたpreset_sandboxがコミットされていないまま、
     * preset_sandboxを起動されてしまうと、apply_sandboxの登録がスキップされてしまう
     * (ref) code/sched/dynamic/preset_sandbox.csp
     *
     * @return bool TRUE:registered｜FALSE：none
     */
    public function registerApplyEvent()
    {
        if (SandboxStatus::getInstance()->get(true) === SandboxStatus::EXIST) {
            $this->schedulingService->registerOnceEvent(
                self::EVENT_APPLY_SANDBOX, 'apply_sandbox.csp',
                new \CB_TimestampEx()
            );

            return true;
        }

        return false;
    }

    /**
     * Register [Specify the date and time] event in schedule service.
     *
     * @param \CB_DateTimeEx $datetimeEx
     *
     * @return bool TRUE:registered｜FALSE：none
     */
    public function registerPresetEvent(\CB_DateTimeEx $datetimeEx)
    {
        $this->validateDatetime($datetimeEx);
        $timestamp = new \CB_Timestamp();
        $timestamp->unix_ts = cb_datetime_to_timestamp($datetimeEx);

        if (SandboxStatus::getInstance()->get(true) === SandboxStatus::EXIST) {
            $presetEvent = $this->getPresetEvent();
            if ( ! $presetEvent) {
                $this->schedulingService->registerOnceEvent(
                    self::EVENT_PRESET_SANDBOX, 'preset_sandbox.csp', $timestamp
                );
            } else {
                $presetEvent->set("execution", $timestamp);
                $presetEvent->updateNow();
            }

            return true;
        }

        return false;
    }

    /**
     * Remove [Specify the date and time] event.
     *
     * @return bool TRUE:deleted schedule｜FALSE：none
     */
    public function removePresetEvent()
    {
        $presetEvent = (new SandboxSchedulingEvent())->getPresetEvent();
        if ($presetEvent) {
            $presetEvent->delete();

            return true;
        }

        return false;
    }

    /**
     * Register [Delete tentative structure] event in schedule service.
     *
     * @return bool TRUE:registered｜FALSE：none
     */
    public function registerRemoveEvent()
    {
        if (SandboxStatus::getInstance()->get(true) === SandboxStatus::EXIST) {
            $time = new \CB_Timestamp();
            $this->schedulingService->registerOnceEvent(self::EVENT_DELETE_SANDBOX,
                'delete_sandbox.csp', $time);

            return true;
        }

        return false;
    }

    /**
     * Validation1: Can register 0 or 30 as a minute
     * Validation2: Can't register event before now.
     * Validation3: Can't register event one month later
     *
     * @param \CB_DateTimeEx $datetimeEx
     */
    private function validateDatetime(\CB_DateTimeEx $datetimeEx)
    {
        $limitDatetime = cb_timestamp_to_datetime();
        $limit = new \CB_DateTimeEx($limitDatetime);
        $limit->moveMonths(1);

        $timestamp = new \CB_Timestamp();
        $timestamp->unix_ts = cb_datetime_to_timestamp($datetimeEx);

        //Validation1
        if ( ! in_array($datetimeEx->minute, [0, 30])) {
            cb_throw_error(E_GRN_SANDBOX_INVALID_MINUTES);
        }

        //Validation2
        if ($timestamp->unix_ts < time()) {
            cb_throw_error(E_GRN_SANDBOX_INVALID_DATE);
        }

        //Validation3
        if ($datetimeEx->compare($limit) > 0) {
            cb_throw_error(E_GRN_SANDBOX_INVALID_DATE);
        }
    }

    /**
     * @param string $event_name
     *
     * @return bool
     */
    public function hasEventOf($event_name)
    {
        $event_names = [
            self::EVENT_CREATE_SANDBOX,
            self::EVENT_DELETE_SANDBOX,
            self::EVENT_APPLY_SANDBOX,
            self::EVENT_PRESET_SANDBOX
        ];
        if ( ! in_array($event_name, $event_names)) {
            return false;
        }

        $event = $this->schedulingService->getEvent($event_name);

        return $event instanceof \CB_ScheduleEvent;
    }

    /**
     * @return \CB_ScheduleEvent
     */
    public function getPresetEvent()
    {
        return $this->schedulingService->getEvent(self::EVENT_PRESET_SANDBOX);
    }
}
