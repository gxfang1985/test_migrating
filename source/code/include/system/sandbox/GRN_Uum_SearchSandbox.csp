<?php

namespace grn\system\sandbox;

require_once("grn/uum_search.csp");

use grn\system\sandbox\dao\GRN_Uum_SearchSandboxDAO;

class GRN_Uum_SearchSandbox extends \GRN_Uum_Search
{
    public function __construct()
    {
        parent::__construct();
        $this->sandbox = SandboxConstants::SANDBOX_MODE;
    }

    /**
     * @return GRN_Uum_Sandbox
     */
    protected function getUum()
    {
        return GRN_Uum_Sandbox::getInstance();
    }

    /**
     * @param string      $gid
     * @param string|null $additional_condition
     *
     * @return array
     */
    function getGroupUserIds($gid, $additional_condition = null)
    {
        $group = $this->getGroup($gid);
        if ($group === false) {
            return [];
        }

        $user_ids = (new GRN_Uum_SearchSandboxDAO())->searchGroupUserIds(
            $group, 0, -1, $additional_condition
        );

        return $user_ids;
    }

    /**
     * @param string      $gid
     * @param int         $offset
     * @param int         $limit
     * @param string      $order_by
     * @param string|null $additional_condition
     *
     * @return \CB_User[]|false
     */
    function getGroupUserInfos(
        $gid,
        $offset = 0,
        $limit = -1,
        $order_by = 'tab_cb_user.col_position, tab_cb_user._id',
        $additional_condition = null
    ) {
        // this method does not support following parameters.
        assert('$order_by === "tab_cb_user.col_position, tab_cb_user._id"');

        $uum = $this->getUum();
        $group = $uum->getGroup($gid);
        if ($group === false) {
            return false;
        }

        $userIds = (new GRN_Uum_SearchSandboxDAO())->searchGroupUserIds(
            $group, $offset, $limit, $additional_condition
        );

        $users = $this->getUum()->getUsersById($userIds);
        $sortedUsers = [];
        foreach ($userIds as $userId) {
            $sortedUsers[$userId] = $users[$userId];
        }

        return $sortedUsers;
    }

    /**
     * @param string|null $additional_condition
     *
     * @return array
     */
    function getUserIds($additional_condition = null)
    {
        $user_ids = (new GRN_Uum_SearchSandboxDAO())->searchUserIds(
            0, -1, $additional_condition
        );

        return $user_ids;
    }

    /**
     * @param int    $offset
     * @param        $limit
     * @param string $order_by
     * @param null   $additional_condition
     *
     * @return array
     */
    public function getUserInfos(
        $offset = 0,
        $limit = -1,
        $order_by = 'col_position, _id',
        $additional_condition = null
    ) {
        // this method does not support following parameters.
        assert('$order_by === "tab_cb_user.col_position, tab_cb_user._id"');

        $userIds = (new GRN_Uum_SearchSandboxDAO())->searchUserIds(
            $offset, $limit, $additional_condition
        );

        $users = $this->getUum()->getUsersById($userIds);
        $sortedUsers = [];
        foreach ($userIds as $userId) {
            $sortedUsers[$userId] = $users[$userId];
        }

        return $sortedUsers;
    }

    /**
     * @param string|null $additional_condition
     *
     * @return array
     */
    function getDeactiveUserIds($additional_condition = null)
    {
        $add_condition_list = [];
        if (0 < strlen($additional_condition)) {
            $add_conditions[] = '( ' . $additional_condition . ' )';
        }
        $add_condition_list[]
            = "((CASE WHEN tab_cb_user_diff_sandbox.col_user IS NOT NULL "
              . " THEN tab_cb_user_diff_sandbox.col_valid "
              . " ELSE tab_cb_user.col_valid "
              . " END) IS NOT NULL)";
        $additional_condition = implode(' AND ', $add_condition_list);

        $user_ids = $this->getUserIds($additional_condition);

        return $user_ids;
    }

    /**
     * @param int    $offset
     * @param        $limit
     * @param string $order_by
     * @param null   $add_condition
     *
     * @return array
     */
    function getDeactiveUserInfos(
        $offset = 0,
        $limit = -1,
        $order_by = 'tab_cb_user.col_position, tab_cb_user._id',
        $add_condition = null
    ) {
        // this method does not support following parameters.
        assert('$order_by === "tab_cb_user.col_position, tab_cb_user._id"');

        $add_conditions = [];
        if (0 < strlen($add_condition)) {
            $add_conditions[] = '( ' . $add_condition . ' )';
        }
        $add_conditions[]
            = "((CASE WHEN tab_cb_user_diff_sandbox.col_user IS NOT NULL "
              . " THEN tab_cb_user_diff_sandbox.col_valid "
              . " ELSE tab_cb_user.col_valid "
              . " END) IS NOT NULL)";
        $add_condition = implode(' AND ', $add_conditions);

        return $this->getUserInfos($offset, $limit, $order_by, $add_condition);
    }

    /**
     * @param string|null $additional_condition
     *
     * @return array
     */
    function getNoGroupUserIds($additional_condition = null)
    {
        $user_ids = (new GRN_Uum_SearchSandboxDAO())->searchNoGroupUserIds(
            0, -1, $additional_condition
        );

        return $user_ids;
    }

    /**
     * @param int    $offset
     * @param        $limit
     * @param string $order_by
     * @param null   $additional_condition
     *
     * @return array
     */
    public function getNoGroupUserInfos(
        $offset = 0,
        $limit = -1,
        $order_by = 'tab_cb_user.col_position, tab_cb_user._id',
        $additional_condition = null
    ) {

        // this method does not support following parameters.
        assert('$order_by === "tab_cb_user.col_position, tab_cb_user._id"');

        $userIds = (new GRN_Uum_SearchSandboxDAO())->searchNoGroupUserIds(
            $offset, $limit, $additional_condition
        );

        $users = $this->getUum()->getUsersById($userIds);
        $sortedUsers = [];
        foreach ($userIds as $userId) {
            $sortedUsers[$userId] = $users[$userId];
        }

        return $sortedUsers;
    }

    /**
     * @param int    $offset
     * @param int    $limit
     * @param string $additional_condition
     *
     * @return array
     */
    public function getUpdatedUserInfos($offset, $limit, $additional_condition)
    {
        // get updated user ids
        $sandbox_uum = $this->getUum();
        $updatedUserIds = $sandbox_uum->getUpdatedUserIds();

        $searchDao = new GRN_Uum_SearchSandboxDAO();
        $result = $searchDao->sortAndLimitByUserIdsWithCondition(
            $updatedUserIds, $limit, $offset, $additional_condition
        );
        $total_count = $result['totalCount'];
        $user_id_for_view = $result['userIds'];

        // create display information
        $login_user = $this->getLoginUser();
        $users_info
            = GRN_ControllerUtilSandbox::getUserInfoToShowUserName($user_id_for_view,
            $login_user);

        $user_list = [];
        foreach ($user_id_for_view as $id) {
            $display_name
                = GRN_ControllerUtilSandbox::getUserNameText($login_user->getOID(),
                $id, $users_info);
            $user_list[$id] = [
                'uid'          => $id,
                'display_name' => $display_name,
                'position'     => $users_info[$id]['col_position'],
                'foreign_key'  => $users_info[$id]['col_foreign_key'],
                'valid'        => is_null($users_info[$id]['col_valid']) ? true
                    : false,
                //'row' => ..., // on sandbox, 'row' is not used. 'row' is instance of CB_User
                'updated'      => true,
            ];
        }

        return [
            'total_count' => $total_count,
            'user_list'   => $user_list
        ];
    }

    /**
     * @param null|string $condition
     *
     * @return string
     */
    function getDeactiveUserInfoCountWithCondition($condition = null)
    {
        $db = cb_get_master_db();
        $query = "SELECT COUNT(tab_cb_user._id) AS count "
                 . "FROM tab_cb_user "
                 . "LEFT JOIN tab_cb_user_diff_sandbox "
                 . "ON tab_cb_user._id = tab_cb_user_diff_sandbox.col_user "
                 . "INNER JOIN tab_grn_userinfo "
                 . "ON tab_cb_user._id = tab_grn_userinfo.col_user "
                 . "WHERE "
                 . "tab_cb_user.col_deleted IS NULL "
                 . "AND ((CASE WHEN tab_cb_user_diff_sandbox.col_user IS NOT NULL "
                 . "THEN tab_cb_user_diff_sandbox.col_valid "
                 . "ELSE tab_cb_user.col_valid "
                 . "END) IS NOT NULL) ";

        if (is_string($condition) && 0 < strlen($condition)) {
            $query .= " AND {$condition}";
        }
        $result = $db->query($query);
        $row = $db->fetch_assoc($result);
        $db->free_result($result);

        return $row['count'];
    }
}
