<?php

namespace grn\system\sandbox\dao;

class CbUserGroupRelationSandboxDAO
{
    public function copyAll()
    {
        $db = cb_get_master_db();

        $query = "INSERT INTO tab_cb_usergrouprelation_sandbox (" .

                 "_id, " .
                 "col_group, " .
                 "col_group_list, " .
                 "col_user, " .
                 "col_user_list) " .

                 "(SELECT " .
                 "_id, " .
                 "col_group, " .
                 "col_group_list, " .
                 "col_user, " .
                 "col_user_list " .
                 "FROM tab_cb_usergrouprelation)";
        $db->query($query);
    }

    /**
     * @param       $uid
     * @param int[] $groupIds
     *
     * @return bool
     */
    public function setUserGroupRelations($uid, array $groupIds)
    {
        if (empty($groupIds)) {
            return false;
        }

        $db = cb_get_master_db();
        $query
            = "INSERT INTO tab_cb_usergrouprelation_sandbox ( col_user, col_group , col_group_list ) VALUES ";

        $values = [];
        $groupList = 0;
        foreach ($groupIds as $groupId) {
            $groupList += 1;
            $values[] = $db->format(" ('@S', '@S', '@S') ",
                [$uid, $groupId, $groupList]);
        }
        $query .= implode(",", $values)
                  . " ON DUPLICATE KEY UPDATE col_group_list=VALUES(col_group_list)";

        $db->query($query);

        return true;
    }

    /**
     * @param       $groupId
     * @param array $userIds
     *
     * @return bool
     */
    public function setGroupUserRelations($groupId, array $userIds)
    {
        if (empty($userIds)) {
            return false;
        }

        $db = cb_get_master_db();
        $query
            = "INSERT INTO tab_cb_usergrouprelation_sandbox ( col_user, col_group , col_user_list ) VALUES ";

        $values = [];
        $userList = 0;
        foreach ($userIds as $userId) {
            $userList += 1;
            $values[] = $db->format(" ('@S', '@S', '@S') ",
                [$userId, $groupId, $userList]);
        }
        $query .= implode(",", $values) .
                  " ON DUPLICATE KEY UPDATE col_user_list=VALUES(col_user_list)";

        $db->query($query);

        return true;
    }

    /**
     * @param       $uid
     * @param int[] $groupIds
     *
     * @return bool
     */
    public function removeUserGroupRelations($uid, array $groupIds)
    {
        if (empty($groupIds)) {
            return false;
        }

        $db = cb_get_master_db();
        $query = $db->format(
            'DELETE FROM tab_cb_usergrouprelation_sandbox WHERE col_user="@S" AND col_group IN (@A)',
            [$uid, $groupIds]
        );

        $db->query($query);

        return true;
    }

    /**
     * @param       $groupId
     * @param array $userIds
     *
     * @return bool
     */
    public function removeGroupUserRelations($groupId, array $userIds)
    {
        if (empty($userIds)) {
            return false;
        }

        $db = cb_get_master_db();
        $query = $db->format(
            'DELETE FROM tab_cb_usergrouprelation_sandbox WHERE col_group="@S" AND col_user IN (@A)',
            [$groupId, $userIds]
        );

        $db->query($query);

        return true;
    }

    /**
     * @param $userId
     * @param $groupId
     *
     * @return string|false
     */
    public function getUserGroupRelationId($userId, $groupId)
    {
        $db = cb_get_master_db();
        $query
            = 'SELECT _id FROM tab_cb_usergrouprelation_sandbox WHERE col_user="@S" AND col_group="@S"';
        $result = $db->query($db->format($query, [$userId, $groupId]));
        $row = $db->fetch_assoc($result);
        $db->free_result($result);

        return $row ? $row['_id'] : false;
    }

    public function deleteAll()
    {
        $db = cb_get_master_db();
        $db->query("DELETE FROM tab_cb_usergrouprelation_sandbox");
    }

    /**
     * @param int $groupId
     *
     * @return array
     */
    public function getGroupUsersIdsIncludingDeletedUsers($groupId)
    {
        $query = "SELECT col_user AS userId " .
                 " FROM tab_cb_usergrouprelation_sandbox " .
                 " WHERE col_group='@S'";
        $db = cb_get_master_db();
        $query = $db->format($query, [$groupId]);
        $result = $db->query($query);
        $userIds = [];
        while ($row = $db->fetch_assoc($result)) {
            $userIds[] = $row["userId"];
        }
        $db->free_result($result);

        return $userIds;
    }

    /**
     * @param int $groupId
     * @param int $limit
     * @param int $offset
     *
     * @return array
     */
    public function getGroupUsersIds($groupId, $limit, $offset)
    {
        $query = "SELECT tab_cb_user._id AS userId " .
                 " FROM tab_cb_usergrouprelation_sandbox " .
                 " INNER JOIN tab_cb_user " .
                 " ON tab_cb_usergrouprelation_sandbox.col_user = tab_cb_user._id "
                 .
                 " LEFT JOIN tab_cb_user_diff_sandbox " .
                 " ON tab_cb_user_diff_sandbox.col_user = tab_cb_user._id " .
                 " WHERE tab_cb_usergrouprelation_sandbox.col_group='@S' " .
                 " AND tab_cb_user.col_deleted IS NULL " .
                 " ORDER BY " . // Order by position and object id
                 " CASE WHEN tab_cb_user_diff_sandbox.col_user IS NOT NULL " .
                 "      THEN tab_cb_user_diff_sandbox.col_position " .
                 "      ELSE tab_cb_user.col_position " .
                 " END ," .
                 " tab_cb_user._id ";
        $db = cb_get_master_db();
        $query = $db->format($query, [$groupId]);
        $query = $db->select_format($query, $offset, $limit,
            CB_DATABASE_NO_LOCK);
        $result = $db->query($query);
        $userIds = [];
        while ($row = $db->fetch_assoc($result)) {
            $userIds[] = $row["userId"];
        }
        $db->free_result($result);

        return $userIds;
    }

    /**
     * @param int $limit
     * @param int $offset
     *
     * @return array
     */
    public function getNoGroupUsersIds($limit, $offset)
    {
        $query = "SELECT tab_cb_user._id AS userId " .
                 " FROM tab_cb_user " .
                 " LEFT JOIN tab_cb_usergrouprelation_sandbox " .
                 " ON tab_cb_usergrouprelation_sandbox.col_user = tab_cb_user._id "
                 .
                 " LEFT JOIN tab_cb_user_diff_sandbox ON tab_cb_user_diff_sandbox.col_user = tab_cb_user._id "
                 .
                 " WHERE " .
                 " tab_cb_usergrouprelation_sandbox.col_group IS NULL " .
                 " AND tab_cb_user.col_deleted IS NULL " .
                 " ORDER BY " . // Order by position and object id
                 " CASE WHEN tab_cb_user_diff_sandbox.col_user IS NOT NULL " .
                 "      THEN tab_cb_user_diff_sandbox.col_position " .
                 "      ELSE tab_cb_user.col_position " .
                 "  END ," .
                 "  tab_cb_user._id ";
        $db = cb_get_master_db();
        $query = $db->select_format($query, $offset, $limit,
            CB_DATABASE_NO_LOCK);
        $result = $db->query($query);
        $userIds = [];
        while ($row = $db->fetch_assoc($result)) {
            $userIds[] = $row["userId"];
        }
        $db->free_result($result);

        return $userIds;
    }
}
