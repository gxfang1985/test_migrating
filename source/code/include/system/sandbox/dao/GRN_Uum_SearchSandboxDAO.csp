<?php

namespace grn\system\sandbox\dao;

class GRN_Uum_SearchSandboxDAO
{
    /**
     * @param \CB_Group   $group
     * @param int         $offset
     * @param int         $limit
     * @param null|string $additional_condition 検索条件などの付随的な条件
     *
     * @return array
     */
    public function searchGroupUserIds(
        \CB_Group $group,
        $offset,
        $limit,
        $additional_condition
    ) {
        $db = cb_get_master_db();
        $query = "SELECT tab_cb_user._id "
                 . "FROM tab_cb_user "
                 . "LEFT JOIN tab_cb_user_diff_sandbox "
                 . "ON tab_cb_user._id = tab_cb_user_diff_sandbox.col_user "
                 . "INNER JOIN tab_cb_usergrouprelation_sandbox "
                 . "ON tab_cb_usergrouprelation_sandbox.col_user = tab_cb_user._id "
                 . "INNER JOIN tab_grn_userinfo "
                 . "ON tab_cb_user._id = tab_grn_userinfo.col_user "
                 . "WHERE "
                 . "tab_cb_usergrouprelation_sandbox.col_group = '@S' "
                 . "AND tab_cb_user.col_deleted IS NULL ";
        $query = $db->format($query, [$group->getOID()]);
        if (is_string($additional_condition)
            && 0 < strlen($additional_condition)
        ) {
            $query .= "AND {$additional_condition} ";
        }
        $query .= "ORDER BY " // Order by position and object id
                  . "CASE WHEN tab_cb_user_diff_sandbox.col_user IS NOT NULL "
                  . "     THEN tab_cb_user_diff_sandbox.col_position "
                  . "     ELSE tab_cb_user.col_position "
                  . " END ,"
                  . "tab_cb_user._id";
        $query = $db->select_format($query, $offset, $limit,
            CB_DATABASE_NO_LOCK);

        $result = $db->query($query);
        $userIds = [];
        while (($row = $db->fetch_assoc($result))) {
            $userIds[] = $row["_id"];
        }
        $db->free_result($result);

        return $userIds;
    }

    /**
     * @param int         $offset
     * @param int         $limit
     * @param null|string $additional_condition 検索条件などの付随的な条件
     *
     * @return array
     */
    public function searchNoGroupUserIds($offset, $limit, $additional_condition)
    {
        $db = cb_get_master_db();
        $query = "SELECT tab_cb_user._id "
                 . "FROM tab_cb_user "
                 . "LEFT JOIN tab_cb_user_diff_sandbox "
                 . "ON tab_cb_user._id = tab_cb_user_diff_sandbox.col_user "
                 . "LEFT JOIN tab_cb_usergrouprelation_sandbox "
                 . "ON tab_cb_usergrouprelation_sandbox.col_user = tab_cb_user._id "
                 . "INNER JOIN tab_grn_userinfo "
                 . "ON tab_cb_user._id = tab_grn_userinfo.col_user "
                 . "WHERE "
                 . "tab_cb_usergrouprelation_sandbox.col_group IS NULL "
                 . "AND tab_cb_user.col_deleted IS NULL ";

        if (is_string($additional_condition)
            && 0 < strlen($additional_condition)
        ) {
            $query .= "AND {$additional_condition} ";
        }
        $query .= "ORDER BY " // Order by position and object id
                  . "CASE WHEN tab_cb_user_diff_sandbox.col_user IS NOT NULL "
                  . "     THEN tab_cb_user_diff_sandbox.col_position "
                  . "     ELSE tab_cb_user.col_position "
                  . " END ,"
                  . "tab_cb_user._id";
        $query = $db->select_format($query, $offset, $limit,
            CB_DATABASE_NO_LOCK);

        $result = $db->query($query);
        $userIds = [];
        while (($row = $db->fetch_assoc($result))) {
            $userIds[] = $row["_id"];
        }
        $db->free_result($result);

        return $userIds;
    }

    /**
     * @param int         $offset
     * @param int         $limit
     * @param null|string $additional_condition 検索条件などの付随的な条件
     *
     * @return array
     */
    public function searchUserIds($offset, $limit, $additional_condition)
    {
        $db = cb_get_master_db();
        $query = "SELECT tab_cb_user._id "
                 . "FROM tab_cb_user "
                 . "LEFT JOIN tab_cb_user_diff_sandbox "
                 . "ON tab_cb_user._id = tab_cb_user_diff_sandbox.col_user "
                 . "INNER JOIN tab_grn_userinfo "
                 . "ON tab_cb_user._id = tab_grn_userinfo.col_user "
                 . "WHERE "
                 . "tab_cb_user.col_deleted IS NULL ";

        if (is_string($additional_condition)
            && 0 < strlen($additional_condition)
        ) {
            $query .= "AND {$additional_condition} ";
        }
        $query .= "ORDER BY " // Order by position and object id
                  . "CASE WHEN tab_cb_user_diff_sandbox.col_user IS NOT NULL "
                  . "     THEN tab_cb_user_diff_sandbox.col_position "
                  . "     ELSE tab_cb_user.col_position "
                  . " END ,"
                  . "tab_cb_user._id";
        $query = $db->select_format($query, $offset, $limit,
            CB_DATABASE_NO_LOCK);

        $result = $db->query($query);
        $userIds = [];
        while (($row = $db->fetch_assoc($result))) {
            $userIds[] = $row["_id"];
        }
        $db->free_result($result);

        return $userIds;
    }

    /**
     *
     * This method does not support deleted user.
     *
     * @param array $targetUserIds
     *
     * @return array
     */
    function getUpdatedUserIdsExceptPrimaryGroup(array $targetUserIds = null)
    {
        if (is_array($targetUserIds) && empty($targetUserIds)) {
            return [];
        }

        $db = cb_get_master_db();

        $queryParts = [];
        // In organizations that has belonged to the future organization,
        // there are organizations which has not belonged in current
        $query_group_1
            = 'SELECT sandbox.col_user AS userId '
              . ' FROM '
              . ' tab_cb_usergrouprelation_sandbox AS sandbox '
              . ' LEFT JOIN tab_cb_usergrouprelation AS current '
              . ' ON '
              . ' current.col_group = sandbox.col_group '
              . ' AND current.col_user = sandbox.col_user '
              . ' WHERE current.col_group IS NULL ';
        if (is_array($targetUserIds)) {
            $condition = ' AND sandbox.col_user IN (@A) ';
            $query_group_1 .= $db->format($condition, [$targetUserIds]);
        }
        $queryParts[] = $query_group_1;

        // In organizations that has belonged to the current organization,
        // there are organizations which has not belonged in future
        $query_group_2 = 'SELECT current.col_user AS userId '
                         . ' FROM '
                         . ' tab_cb_usergrouprelation_sandbox AS sandbox '
                         . ' RIGHT JOIN tab_cb_usergrouprelation AS current '
                         . ' ON '
                         . ' current.col_group = sandbox.col_group '
                         . ' AND current.col_user = sandbox.col_user '
                         . ' WHERE sandbox.col_group IS NULL ';
        if (is_array($targetUserIds)) {
            $condition = ' AND current.col_user IN (@A) ';
            $query_group_2 .= $db->format($condition, [$targetUserIds]);
        }
        $queryParts[] = $query_group_2;

        // There are difference in "col_valid" and "col_position"
        // between future organizations and current organizations
        $query_valid_position = 'SELECT tab_cb_user._id AS userId '
                                . ' FROM tab_cb_user_diff_sandbox '
                                . ' INNER JOIN tab_cb_user '
                                . ' ON tab_cb_user._id = tab_cb_user_diff_sandbox.col_user '
                                . ' WHERE  ((!(tab_cb_user.col_valid <=> tab_cb_user_diff_sandbox.col_valid)) '
                                . ' OR     (!(tab_cb_user.col_position <=> tab_cb_user_diff_sandbox.col_position))) ';
        if (is_array($targetUserIds)) {
            $condition = ' AND tab_cb_user._id IN (@A) ';
            $query_valid_position .= $db->format($condition, [$targetUserIds]);
        }
        $queryParts[] = $query_valid_position;

        // there is difference in base value between future organizations and current organizations
        $query_base = 'SELECT tab_cb_user_diff_sandbox.col_user AS userId '
                      . ' FROM tab_cb_user_diff_sandbox '
                      . ' LEFT JOIN tab_cb_user_base_setting '
                      . ' ON tab_cb_user_diff_sandbox.col_user = tab_cb_user_base_setting._id '
                      . ' WHERE (!(tab_cb_user_diff_sandbox.col_base <=> tab_cb_user_base_setting.col_base)) ';
        if (is_array($targetUserIds)) {
            $condition = ' AND tab_cb_user_diff_sandbox.col_user IN (@A) ';
            $query_base .= $db->format($condition, [$targetUserIds]);
        }
        $queryParts[] = $query_base;

        // In roles in future, there are roles which have not belonged in current roles
        $query_role_1 = 'SELECT sandbox.col_user AS userId '
                        . ' FROM '
                        . ' tab_cb_userrolerelation_sandbox AS sandbox '
                        . ' LEFT JOIN tab_cb_userrolerelation AS current '
                        . ' ON '
                        . ' current.col_role = sandbox.col_role '
                        . ' AND current.col_user = sandbox.col_user '
                        . ' WHERE current.col_role IS NULL ';
        if (is_array($targetUserIds)) {
            $condition = ' AND sandbox.col_user IN (@A) ';
            $query_role_1 .= $db->format($condition, [$targetUserIds]);
        }
        $queryParts[] = $query_role_1;

        // In current roles, there are roles which have not belonged in future roles
        $query_role_2 = 'SELECT current.col_user AS userId '
                        . ' FROM '
                        . ' tab_cb_userrolerelation_sandbox AS sandbox '
                        . ' RIGHT JOIN tab_cb_userrolerelation AS current '
                        . ' ON '
                        . ' current.col_role = sandbox.col_role '
                        . ' AND current.col_user = sandbox.col_user '
                        . ' WHERE sandbox.col_role IS NULL ';
        if (is_array($targetUserIds)) {
            $condition = ' AND current.col_user IN (@A) ';
            $query_role_2 .= $db->format($condition, [$targetUserIds]);
        }
        $queryParts[] = $query_role_2;

        $query = '(' . join(' ) UNION DISTINCT ( ', $queryParts) . ')';
        $result = $db->query($query);
        $userIds = [];
        while ($row = $db->fetch_assoc($result)) {
            $userIds[] = $row['userId'];
        }
        $db->free_result($result);

        return $userIds;
    }

    /**
     * sort and limit by User Ids
     *
     * @param array $updatedUserIds
     * @param int   $limit
     * @param int   $offset
     *
     * @return array
     */
    public function sortAndLimitByUserIds(
        array $updatedUserIds,
        $limit,
        $offset
    ) {
        $db = cb_get_master_db();
        $query = "SELECT tab_cb_user._id AS userId "
                 . " FROM tab_cb_user "
                 . " LEFT JOIN tab_cb_user_diff_sandbox ON tab_cb_user_diff_sandbox.col_user = tab_cb_user._id "
                 . " WHERE "
                 . " tab_cb_user._id IN (@A) "
                 . " AND tab_cb_user.col_deleted IS NULL "
                 . " ORDER BY " // Order by position and object id
                 . " CASE WHEN tab_cb_user_diff_sandbox.col_user IS NOT NULL "
                 . "      THEN tab_cb_user_diff_sandbox.col_position "
                 . "      ELSE tab_cb_user.col_position "
                 . "  END ,"
                 . "  tab_cb_user._id ";
        $query = $db->format($query, [$updatedUserIds]);
        $query = $db->select_format($query, $offset, $limit,
            CB_DATABASE_NO_LOCK);
        $result = $db->query($query);
        $userIds = [];
        while ($row = $db->fetch_assoc($result)) {
            $userIds[] = $row['userId'];
        }
        $db->free_result($result);

        return $userIds;
    }

    /**
     * sort and limit by User Ids with condition
     *
     * @param array   $updatedUserIds
     * @param int     $limit
     * @param int     $offset
     * @param  string $condition
     *
     * @return array
     */
    public function sortAndLimitByUserIdsWithCondition(
        array $updatedUserIds,
        $limit,
        $offset,
        $condition
    ) {
        $db = cb_get_master_db();
        $query = "SELECT SQL_CALC_FOUND_ROWS tab_cb_user._id AS userId "
                 . " FROM tab_cb_user "
                 . " LEFT JOIN tab_cb_user_diff_sandbox "
                 . " ON tab_cb_user_diff_sandbox.col_user = tab_cb_user._id "
                 . " INNER JOIN tab_grn_userinfo "
                 . " ON tab_grn_userinfo.col_user = tab_cb_user._id "
                 . " WHERE "
                 . $db->format(" tab_cb_user._id IN (@A) ", [$updatedUserIds])
                 . " AND tab_cb_user.col_deleted IS NULL "
                 . " AND {$condition} "
                 . " ORDER BY " // Order by position and object id
                 . " CASE WHEN tab_cb_user_diff_sandbox.col_user IS NOT NULL "
                 . "      THEN tab_cb_user_diff_sandbox.col_position "
                 . "      ELSE tab_cb_user.col_position "
                 . " END ,"
                 . " tab_cb_user._id ";
        $query = $db->select_format($query, $offset, $limit,
            CB_DATABASE_NO_LOCK);
        $result = $db->query($query);
        $userIds = [];
        while ($row = $db->fetch_assoc($result)) {
            $userIds[] = $row['userId'];
        }
        $db->free_result($result);

        $query = "SELECT FOUND_ROWS() AS count";
        $result = $db->query($query);
        $row = $db->fetch_assoc($result);
        $count = $row["count"];
        $db->free_result($result);

        return [
            'totalCount' => $count,
            'userIds'    => $userIds
        ];
    }
}
