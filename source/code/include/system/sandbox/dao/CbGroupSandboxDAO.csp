<?php

namespace grn\system\sandbox\dao;

use grn\system\sandbox\GRN_Uum_Sandbox;

class CbGroupSandboxDAO
{
    private $column_info
        = [
            "col_ctime",
            "col_description",
            "col_email_address",
            "col_facsimile_number",
            "col_foreign_key",
            "col_list_index",
            "col_mtime",
            "col_name",
            "col_parent",
            "col_physical_address",
            "col_reserve_blob1",
            "col_reserve_blob2",
            "col_reserve_int1",
            "col_reserve_int2",
            "col_reserve_text1",
            "col_reserve_text2",
            "col_room_number",
            "col_slash",
            "col_telephone_number",
            "col_url",
            "col_copy",
            "col_modified",
        ];

    public function copyAll()
    {
        $db = cb_get_master_db();

        $db->query("SET FOREIGN_KEY_CHECKS = 0");

        $query = "INSERT INTO tab_cb_group_sandbox (" .
                 "_id , " .
                 "col_ctime , " .
                 "col_description , " .
                 "col_email_address , " .
                 "col_facsimile_number , " .
                 "col_foreign_key , " .
                 "col_list_index , " .
                 "col_mtime , " .
                 "col_name , " .
                 "col_parent , " .
                 "col_physical_address , " .
                 "col_reserve_blob1 , " .
                 "col_reserve_blob2 , " .
                 "col_reserve_int1 , " .
                 "col_reserve_int2 , " .
                 "col_reserve_text1 , " .
                 "col_reserve_text2 , " .
                 "col_room_number , " .
                 "col_slash , " .
                 "col_telephone_number , " .
                 "col_url , " .
                 "col_copy, " .
                 "col_modified) " .

                 "(SELECT " .
                 "_id , " .
                 "col_ctime , " .
                 "col_description , " .
                 "col_email_address , " .
                 "col_facsimile_number , " .
                 "col_foreign_key , " .
                 "col_list_index , " .
                 "col_mtime , " .
                 "col_name , " .
                 "col_parent , " .
                 "col_physical_address , " .
                 "col_reserve_blob1 , " .
                 "col_reserve_blob2 , " .
                 "col_reserve_int1 , " .
                 "col_reserve_int2 , " .
                 "col_reserve_text1 , " .
                 "col_reserve_text2 , " .
                 "col_room_number , " .
                 "col_slash , " .
                 "col_telephone_number , " .
                 "col_url , " .
                 "1 AS col_copy , " .
                 "0 AS col_modified " .
                 "FROM tab_cb_group)";
        $db->query($query);

        $db->query("SET FOREIGN_KEY_CHECKS = 1");
    }

    /**
     * @param       $id
     * @param array $properties
     */
    public function update($id, array $properties)
    {
        $db = cb_get_master_db();

        $query = 'UPDATE tab_cb_group_sandbox SET ';
        $update_columns = [];
        foreach ($properties as $key => $value) {
            $col_name = 'col_' . $key;
            if (in_array($col_name, $this->column_info)) {
                if ($col_name === "col_parent" && empty($value)) {
                    $update_columns[] = $col_name . "= NULL";
                } else {
                    $update_columns[] = $db->format($col_name . "='@S'",
                        [$value]);
                }
            }
        }
        $query .= implode(',', $update_columns);
        $query .= $db->format(" WHERE _id = '@S'", [$id]);
        $db->query($query);
    }

    /**
     * @param array $properties
     *
     * @return string Group ID
     */
    public function addGroup(array $properties)
    {
        $query = "INSERT INTO tab_cb_group_sandbox (" .
                 "col_description , " .
                 "col_foreign_key , " .
                 "col_list_index , " .
                 "col_name , " .
                 "col_parent , " .
                 "col_copy, " .
                 "col_modified) " .
                 "VALUES " .
                 '("@S","@S","@S","@S",';

        $db = cb_get_master_db();

        $query = $db->format(
            $query, [
                $properties["description"],
                $properties["foreign_key"],
                $properties["list_index"],
                $properties["name"]
            ]
        );
        if (is_null($properties['parent'])) {
            $query .= 'NULL, ';
        } else {
            $query .= $db->format('"@S", ', [$properties['parent']]);
        }
        $query .= '0, 0)';
        $db->query($query);

        return $db->get_insert_id();
    }

    /**
     * @return string[] Group ids
     */
    public function getAddedGroups()
    {
        $db = cb_get_master_db();

        $query = "SELECT _id FROM tab_cb_group_sandbox WHERE col_copy = 0";
        $ret = $db->query($query);

        $groupIds = [];
        while ($row = $db->fetch_assoc($ret)) {
            $groupIds[] = $row['_id'];
        }

        $db->free_result($ret);

        return $groupIds;
    }

    /**
     * @return string[] Group ids
     */
    public function getModifiedGroups()
    {
        $db = cb_get_master_db();

        $query
            = "SELECT _id FROM tab_cb_group_sandbox WHERE col_copy = 1 and col_modified = 1";
        $ret = $db->query($query);

        $groupIds = [];
        while ($row = $db->fetch_assoc($ret)) {
            $groupIds[] = $row['_id'];
        }

        $db->free_result($ret);

        return $groupIds;
    }

    /**
     * @return string[] Group ids
     */
    public function getDeletedGroups()
    {
        $db = cb_get_master_db();

        $query = "SELECT g1._id" .
                 " FROM tab_cb_group AS g1 LEFT JOIN tab_cb_group_sandbox AS g2 ON g1._id = g2._id"
                 .
                 " WHERE g2._id IS NULL;";
        $ret = $db->query($query);

        $groupIds = [];
        while ($row = $db->fetch_assoc($ret)) {
            $groupIds[] = $row['_id'];
        }

        $db->free_result($ret);

        return $groupIds;
    }

    public function getChildrenGroupsStatus($parentId)
    {
        assert('is_null($parentId) || is_numeric($parentId)');
        $db = cb_get_master_db();
        $query
            = "SELECT _id, col_copy, col_modified  FROM tab_cb_group_sandbox  WHERE col_parent ";
        if (is_null($parentId)) {
            $query .= "IS NULL";
        } else {
            $query .= $db->format("= '@S'", [$parentId]);
        }

        $groupsStatus = [];
        $result = $db->query($query);
        while (($row = $db->fetch_assoc($result))) {
            $groupsStatus[$row["_id"]] = $row;
        }

        $db->free_result($result);

        return $groupsStatus;
    }

    public function deleteAll()
    {
        $uum = GRN_Uum_Sandbox::getInstance();
        $rootGroups = $uum->getRootGroups(false);
        foreach ($rootGroups as $sandboxGroup) {
            $this->removeGroup($sandboxGroup->getOID());
        }
    }

    /**
     * @param string $gid
     */
    public function removeGroup($gid)
    {
        $uum = GRN_Uum_Sandbox::getInstance();
        $children = $uum->getChildGroupsInfo($gid);
        foreach ($children as $child) {
            $this->removeGroup($child['_id']);
        }

        $db = cb_get_master_db();
        $query
            = $db->format("DELETE FROM tab_cb_group_sandbox WHERE _id = '@S'",
            [$gid]);
        $db->query($query);
    }
}
