<?php

namespace grn\system\sandbox\dao;

class CbUserDiffSandboxDAO
{
    public function deleteAll()
    {
        $db = cb_get_master_db();
        $db->query("DELETE FROM tab_cb_user_diff_sandbox");
    }

    /**
     * @param int[] $userIds
     *
     * @return array
     */
    public function getByIds(array $userIds)
    {
        if (empty($userIds)) {
            return [];
        }

        $db = cb_get_master_db();
        $query = $db->format(
            "SELECT col_user, col_position, col_valid, col_primary_group, col_base"
            .
            " FROM tab_cb_user_diff_sandbox" .
            " WHERE col_user IN( @A )", [$userIds]
        );
        $result = $db->query($query);

        $diffArray = [];
        while ($row = $db->fetch_assoc($result)) {
            $diffArray[$row['col_user']] = $row;
        }
        $db->free_result($result);

        return $diffArray;
    }

    /**
     * @param int[] $userIds
     *
     * @return array
     */
    public function getPrimaryGroupIdsByIds(array $userIds)
    {
        if (empty($userIds)) {
            return [];
        }

        $db = cb_get_master_db();
        $query = $db->format(
            "SELECT user.col_user, relation.col_group" .
            " FROM tab_cb_user_diff_sandbox AS user" .
            " LEFT JOIN tab_cb_usergrouprelation_sandbox AS relation" .
            " ON user.col_primary_group = relation._id" .
            " WHERE user.col_user IN( @A )", [$userIds]
        );
        $result = $db->query($query);

        $diffArray = [];
        while ($row = $db->fetch_assoc($result)) {
            $diffArray[$row['col_user']] = $row['col_group'];
        }
        $db->free_result($result);

        return $diffArray;
    }

    /**
     * @param   int $userId
     * @param array $userDiffData
     */
    public function updateUserDiff($userId, array $userDiffData)
    {
        $db = cb_get_master_db();

        $query = $db->format(
            "INSERT INTO tab_cb_user_diff_sandbox " .
            "(col_user, col_position, col_valid, col_base, col_primary_group) VALUES "
            .
            " ('@S', '@S', ", [$userId, $userDiffData['position']]
        );

        if ($userDiffData['valid']) {
            $query .= ' NULL,';
        } else {
            $query .= $db->format(' "@S",',
                [(\CB_Date::valueOf(1970, 1, 1)->format())]);
        }

        if (is_null($userDiffData["base"])) {
            $query .= ' NULL,';
        } else {
            $query .= $db->format(' "@S",', [$userDiffData["base"]]);
        }

        $query .= ! $userDiffData["primary"] ? " NULL"
            : $db->format('"@S"', [$userDiffData["primary"]]);

        $query .= ") ON DUPLICATE KEY UPDATE" .
                  " col_position=VALUES(col_position), col_valid=VALUES(col_valid),"
                  .
                  " col_base=VALUES(col_base), col_primary_group=VALUES(col_primary_group)";

        $db->query($query);
    }

    /**
     * @return int
     */
    public function getActiveUserCount()
    {
        $db = cb_get_master_db();
        $query = "SELECT COUNT(*) AS count " .
                 "FROM tab_cb_user " .
                 "LEFT JOIN tab_cb_user_diff_sandbox AS diff " .
                 "ON diff.col_user = tab_cb_user._id " .
                 "WHERE" .
                 " (CASE WHEN diff.col_user IS NOT NULL THEN diff.col_valid " .
                 "       ELSE tab_cb_user.col_valid END ) IS NULL " .
                 "AND tab_cb_user.col_deleted IS NULL";
        $result = $db->query($query);
        $count = (int)$db->fetch_assoc($result)["count"];
        $db->free_result($result);

        return $count;
    }

    /**
     * @return int
     */
    public function getDeactiveUserCount()
    {
        $db = cb_get_master_db();
        $query = "SELECT COUNT(*) AS count " .
                 "FROM tab_cb_user " .
                 "LEFT JOIN tab_cb_user_diff_sandbox AS diff " .
                 "ON diff.col_user = tab_cb_user._id " .
                 "WHERE" .
                 " (CASE WHEN diff.col_user IS NOT NULL THEN diff.col_valid " .
                 "       ELSE tab_cb_user.col_valid END ) IS NOT NULL " .
                 "AND tab_cb_user.col_deleted IS NULL";
        $result = $db->query($query);
        $count = (int)$db->fetch_assoc($result)["count"];
        $db->free_result($result);

        return $count;
    }

    /**
     * @param $offset
     * @param $limit
     *
     * @return array
     */
    public function getDeactiveUserIds($offset, $limit)
    {
        $db = cb_get_master_db();
        $query = "SELECT tab_cb_user._id AS userId " .
                 "FROM tab_cb_user " .
                 "LEFT JOIN tab_cb_user_diff_sandbox AS diff " .
                 "ON diff.col_user = tab_cb_user._id " .
                 "WHERE" .
                 " (CASE WHEN diff.col_user IS NOT NULL THEN diff.col_valid " .
                 "       ELSE tab_cb_user.col_valid END ) IS NOT NULL " .
                 "AND tab_cb_user.col_deleted IS NULL " .
                 "ORDER BY CASE WHEN diff.col_user IS NOT NULL THEN diff.col_position "
                 .
                 " ELSE tab_cb_user.col_position " .
                 " END , _id";

        $query = $db->select_format($query, $offset, $limit,
            CB_DATABASE_NO_LOCK);
        $result = $db->query($query);

        $userIds = [];
        while (($row = $db->fetch_assoc($result))) {
            $userIds[] = $row["userId"];
        }
        $db->free_result($result);

        return $userIds;
    }
}
