<?php

namespace grn\system\sandbox;

use grn\system\sandbox\dao\CbUserDiffSandboxDAO;
use grn\system\sandbox\dao\CbUserRoleRelationSandboxDAO;
use grn\system\sandbox\dao\CbUserGroupRelationSandboxDAO;

class UserOperationService
{

    /**
     * @param int   $userId
     * @param int[] $groupIds
     *
     * @return bool
     */
    public function setUserGroups($userId, array $groupIds)
    {
        $uum = GRN_Uum_Sandbox::getInstance();

        // check an existence of user
        $user = $uum->getUser($userId);
        if ( ! $user) {
            return false;
        }
        $userId = $user->getOID();

        // get old relations
        $oldGroupIds = array_keys($uum->getUserGroupsInfo($userId, true));

        // check an existence of group
        $newGroupIds = [];
        foreach ($groupIds as $groupId) {
            $group = $uum->getGroup($groupId);
            if ( ! $group) {
                continue;
            }
            $newGroupIds[] = $group->getOID();
        }

        // add / update relations
        $dao = new CbUserGroupRelationSandboxDAO();
        $dao->setUserGroupRelations($userId, $newGroupIds);

        // remove unused relations
        $dao->removeUserGroupRelations($userId,
            array_diff($oldGroupIds, $newGroupIds));

        return true;
    }

    public function setUserRoles($userId, array $roleIds)
    {
        $uum = GRN_Uum_Sandbox::getInstance();
        $roleIds = $uum->addAdministratorRoleIfUserIsAdministrator($userId,
            $roleIds);

        // check an existence of user
        $user = $uum->getUser($userId);
        if ( ! $user) {
            return false;
        }
        $userId = $user->getOID();

        // get old relations
        $oldRoles = $uum->getUserRoles($userId);
        $oldRoleIds = [];
        foreach ($oldRoles as $oldRole) {
            $oldRoleIds[] = $oldRole->getOID();
        }

        // check an existence of role
        $newRoleIds = [];
        foreach ($roleIds as $roleId) {
            $role = $uum->getStaticRole($roleId);
            if ( ! $role) {
                continue;
            }
            $newRoleIds[] = $role->getOID();
        }

        // add / update relations
        $dao = new CbUserRoleRelationSandboxDAO();
        $dao->setUserRoleRelations($userId, $newRoleIds);

        // remove unused relations
        $dao->removeUserRoleRelations($userId,
            array_diff($oldRoleIds, $newRoleIds));

        return true;
    }

    /**
     * @param  int  $userId
     * @param array $userDiffData
     */
    public function updateUserDiff($userId, array $userDiffData)
    {
        $uum = GRN_Uum_Sandbox::getInstance();
        $uum->validateProperties($userId, $userDiffData);

        $diffDao = new CbUserDiffSandboxDAO();
        $diffDao->updateUserDiff($userId, $userDiffData);
    }

    /**
     * @param $userId
     * @param $primaryGroupId
     *
     * @return false|string
     */
    public function getUserGroupRelationId($userId, $primaryGroupId)
    {
        return (new CbUserGroupRelationSandboxDAO())->getUserGroupRelationId($userId,
            $primaryGroupId);
    }

    /**
     * @param int[] $userIds
     */
    public function activateUserByIds(array $userIds)
    {
        $this->setActivationStatusByIds($userIds, true);
    }

    /**
     * @param int[] $userIds
     */
    public function deactivateUserByIds(array $userIds)
    {
        $this->setActivationStatusByIds($userIds, false);
    }

    /**
     * @param array $userIds
     * @param bool  $valid
     */
    private function setActivationStatusByIds(array $userIds, $valid)
    {
        $uum = GRN_Uum_Sandbox::getInstance();
        $users = $uum->getUsersById($userIds);
        foreach ($users as $user) {
            $primaryGroup = $uum->getUserPrimaryGroup($user->getOID());
            $relationId = null;
            if ($primaryGroup) {
                $relationId = $this->getUserGroupRelationId($user->getOID(),
                    $primaryGroup->getOID());
            }

            $base = $uum->getBaseSettingByUser($user);

            $diff = [
                "valid"    => $valid,
                "position" => $user->get("position"),
                "base"     => $base ? $base->getBase() : null,
                "primary"  => $relationId,
            ];
            $this->updateUserDiff($user->getOID(), $diff);
        }
    }

}
