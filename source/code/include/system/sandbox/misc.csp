<?php

namespace grn\system\sandbox;

require_once('grn/error_code.csp');

/**
 * Check Sandbox status is INITIAL.
 * On INITIAL, Tentative organization structure does not exist.
 *
 * @return boolean
 */
function isSandboxActiveStatusInitial()
{
    return SandboxStatus::getInstance()
                        ->isSandboxActiveStatus(SandboxStatus::INITIAL);
}

/**
 * Check Sandbox status is NOT INITIAL.
 * On NOT INITIAL, Tentative organization structure exists.
 *
 * @return boolean
 */
function isSandboxActiveStatusNotInitial()
{
    if (SandboxStatus::getInstance()
                     ->isSandboxActiveStatus(SandboxStatus::INITIAL)
    ) {
        return false;
    }

    return true;
}

/**
 * When Tentative organization structure does not EXIST.throw error.
 */
function validateSandboxStatusIsExist()
{
    if ( ! SandboxStatus::getInstance()
                        ->isSandboxActiveStatus(SandboxStatus::EXIST)
    ) {
        cb_throw_error(E_GRN_SANDBOX_DOES_NOT_EXISTS);
    }
}

/**
 * When Tentative organization structure does not INITIAL.throw error.
 */
function validateSandboxStatusIsInitial()
{
    if ( ! SandboxStatus::getInstance()
                        ->isSandboxActiveStatus(SandboxStatus::INITIAL)
    ) {
        cb_throw_error(E_GRN_SANDBOX_RESTRICTED_OPERATION);
    }
}

function _grn_rebuild_tree($expand_oid = null)
{
    require_once('grn/org_tree.csp');
    $list_page = 'system/user/sandbox/org_list';
    $util = \GRN_OrgTreeUtil::getInstance();
    $tree = $util->getTree($list_page,
        'grn\system\sandbox\GRN_OrgSandboxTree');
    $tree->rebuild();

    // update init time
    $modules = ['system']; // GRN_OrgSandboxTree is used in sandbox pages only
    $util->updateInitPageList($modules, $tree);

    if ( ! is_null($expand_oid)) {
        $ancestors = $tree->_getAncestors($expand_oid) ?: [];
        foreach ($ancestors as $ancestor) {
            $tree->buildChild($ancestor);
        }
    }
    $util->setTree($list_page, $tree);
}
