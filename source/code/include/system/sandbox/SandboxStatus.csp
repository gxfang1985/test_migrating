<?php

namespace grn\system\sandbox;

class SandboxStatus
{
    const INITIAL = 'INITIAL';
    const CREATE = 'CREATE';
    const EXIST = 'EXIST';
    const DISCARD = 'DISCARD';
    const APPLY = 'APPLY';

    public static $AVAILABLE_STATUS
        = [
            self::INITIAL,
            self::CREATE,
            self::EXIST,
            self::DISCARD,
            self::APPLY
        ];

    private static $instance;

    /** @var SandboxProfileData */
    private $profile;

    /** @var \CB_SchedulingService */
    private $schedulingService;

    public function __construct()
    {
        $this->profile = SandboxProfileData::getInstance();

        require_once('fw/schedule.csp');
        $this->schedulingService = \CB_SchedulingService::getInstance();
    }

    /**
     * @return SandboxStatus
     */
    public static function getInstance()
    {
        if ( ! self::$instance) {
            self::$instance = new self();
        }

        return self::$instance;
    }

    /**
     * @param bool $refresh
     *
     * @return string INITIAL|CREATE|EXIST|DISCARD|APPLY
     */
    public function get($refresh = false)
    {
        static $status = null;
        if ( ! (is_null($status) || $refresh)) {
            return $status;
        }

        if ($this->schedulingService->getEvent(SandboxSchedulingEvent::EVENT_CREATE_SANDBOX)) {
            $status = self::CREATE;
        } elseif ($this->schedulingService->getEvent(SandboxSchedulingEvent::EVENT_DELETE_SANDBOX)) {
            $status = self::DISCARD;
        } elseif ($this->schedulingService->getEvent(SandboxSchedulingEvent::EVENT_APPLY_SANDBOX)) {
            $status = self::APPLY;
        } else {
            $value = $this->profile->getSandboxCreated();
            $status = self::INITIAL;
            if ($value) {
                $status = self::EXIST;
            }
        }

        return $status;
    }

    /**
     *
     * @param string $status INITIAL|CREATE|EXIST|DISCARD|APPLY
     * @param bool   $refresh
     *
     * @return bool
     */
    public function isSandboxActiveStatus($status, $refresh = false)
    {
        if (in_array($status, self::$AVAILABLE_STATUS)) {
            if ($status === self::get($refresh)) {
                return true;
            }
        }

        return false;
    }

    /**
     * @return null|array
     */
    public function getApplyResult()
    {
        return $this->profile->getApplyResult();
    }

    /**
     * @return none
     */
    public function deleteApplyResult()
    {
        $this->profile->deleteApplyResult();
    }

    /**
     * @return array
     */
    public function getSandboxView()
    {
        $sandbox_view = [];

        $sandbox_status = self::get();
        $sandbox_view['status'] = $sandbox_status;

        $apply_result = self::getApplyResult();
        $is_apply_result_exists = is_array($apply_result) ? true : false;

        $sandbox_view['is_apply_result_exists'] = $is_apply_result_exists;
        $sandbox_view['apply_result'] = [];
        if ($is_apply_result_exists) {
            if ( ! $apply_result['result']) {
                require_once('fw/date.csp');
                $datetime
                    = cb_timestamp_to_datetime($apply_result["timestamp"]);
                $datetime_format = [
                    'date' => cb_date_format("DateFull_YMD", $datetime)
                ];
                $apply_result['failed_message'] = cb_msg(
                    'grn.system.user.sandbox', 'sandbox_apply_failed',
                    $datetime_format
                );
            }
            $sandbox_view['apply_result'] = $apply_result;
        }

        $sandbox_view['is_preset_event_exists'] = false;
        if ($sandbox_view['status'] === self::EXIST) {
            $presetEvent
                = $this->schedulingService->getEvent(SandboxSchedulingEvent::EVENT_PRESET_SANDBOX);
            if (is_a($presetEvent, 'CB_ScheduleEvent')) {
                $sandbox_view['is_preset_event_exists'] = true;
                /** @var \CB_Timestamp $timestamp */
                $timestamp = $presetEvent->get("execution");
                $datetime
                    = cb_timestamp_to_datetime($timestamp->unix_ts);
                $datetime_format
                    = [
                    'datetime' => cb_date_format("DateTimeFull_YMDW_HM",
                        $datetime)
                ];

                $preset_event = [];
                $preset_event['message_prefix'] = cb_msg(
                    'grn.system.user.sandbox', 'sandbox_apply_preset1',
                    $datetime_format
                );
                $preset_event['message_link']
                    = cb_msg('grn.system.user.sandbox',
                    'sandbox_apply_preset2');
                $preset_event['message_postfix'] = cb_msg(
                    'grn.system.user.sandbox', 'sandbox_apply_preset3',
                    $datetime_format
                );
                $sandbox_view['preset_event'] = $preset_event;
            }
        }

        return $sandbox_view;
    }
}
