<?php

namespace grn\system\sandbox;

use grn\grn\Validate;
use grn\system\sandbox\dao\CbGroupSandboxDAO;
use grn\system\sandbox\dao\CbUserGroupRelationSandboxDAO;

class GroupOperationService
{
    /**
     * @param       $org_id
     * @param array $inLocalNameArray
     * @param       $inForeignKey
     * @param       $inMemo
     */
    public function modifyGroup(
        $org_id,
        array $inLocalNameArray,
        $inForeignKey,
        $inMemo
    ) {
        // update group info
        $uum = GRN_Uum_Sandbox::getInstance();

        $properties = [
            'name'        => $inLocalNameArray[CB_I18N_DEFUALT_LANGUAGE_CODE]
            ,
            'foreign_key' => $inForeignKey
            ,
            'description' => $inMemo
        ];

        $uum->_core->validateGroupInfo($properties);

        $dao = new CbGroupSandboxDAO();
        $dao->update($org_id, $properties);

        // modify group local
        // we do not use $uum->addGroupLocals because it uses $uum->_sp which does not support sandbox mode.
        // @see \grn\system\sandbox\GRN_Uum_Sandbox::__construct
        $uum->_core->modifyGroupLocals($org_id, $inLocalNameArray);

        $this->updateModifiedFlag($org_id);

        $uum->execInspection(
            'sandbox-group', 'modify', [
                'gid'         => $org_id
                ,
                'name'        => $inLocalNameArray[CB_I18N_DEFUALT_LANGUAGE_CODE]
                ,
                'foreign_key' => $inForeignKey
                ,
                'memo'        => $inMemo
            ]
        );

    }

    /**
     * @param int $org_id
     */
    private function updateModifiedFlag($org_id)
    {
        $uum = cb_lwc_uum();
        $current_group = $uum->getGroup($org_id);
        if ($current_group instanceof \CB_Group) {
            $uum_sandbox = GRN_Uum_Sandbox::getInstance();
            $sandbox_group = $uum_sandbox->getGroup($org_id);
            $modified = $this->checkConsistencyGroups($current_group,
                $sandbox_group)
                        && $this->checkConsistencyGroupLocals($org_id,
                $uum, $uum_sandbox)
                ? 0 /** not modified */ : 1/** modified */
            ;

            $group_dao = new CbGroupSandboxDAO();
            $group_dao->update($org_id, ["modified" => $modified]);
        }
    }

    /**
     * @param \CB_Group $current_group
     * @param \CB_Group $sandbox_group
     *
     * @return bool
     *  true: not modified
     *  false: modified
     */
    private function checkConsistencyGroups(
        \CB_Group $current_group,
        \CB_Group $sandbox_group
    ) {
        foreach (['description', 'foreign_key', 'name'] as $key) {
            if ($current_group->get($key) !== $sandbox_group->get($key)) {
                return false;
            }
        }

        if ($current_group->getId('parent')
            !== $sandbox_group->getId('parent')
        ) {
            return false;
        }

        return true;
    }

    /**
     * @param                 $org_id
     * @param \GRN_Uum        $uum
     * @param GRN_Uum_Sandbox $uum_sandbox
     *
     * @return bool
     *  true: not modified
     *  false: modified
     */
    public function checkConsistencyGroupLocals(
        $org_id,
        \GRN_Uum $uum,
        GRN_Uum_Sandbox $uum_sandbox
    ) {
        $local_group = $uum->createMultiLanguageValuesArray($org_id);

        $local_sandbox = $uum_sandbox->createMultiLanguageValuesArray($org_id);

        $diff = array_merge(
            array_diff_assoc($local_group, $local_sandbox),
            array_diff_assoc($local_sandbox, $local_group)
        );

        return count($diff) === 0;
    }

    /**
     * @param $gid
     */
    public function removeGroup($gid)
    {
        (new CbGroupSandboxDAO())->removeGroup($gid);
    }

    /**
     * @param array  $inLocalNameArray
     * @param string $inForeignKey
     * @param string $inMemo
     * @param string $inParentOrgId
     *
     * @return \CB_Group
     */
    public function addGroup(
        array $inLocalNameArray,
        $inForeignKey,
        $inMemo,
        $inParentOrgId = null
    ) {
        if ( ! Validate::isNumber($inParentOrgId)) {
            $inParentOrgId = null;
        }

        // add group
        $dataObj = [];
        $dataObj['lock'] = CB_DATABASE_NO_LOCK;
        $uum = GRN_Uum_Sandbox::getInstance();
        $groupCount = $uum->_core->getFwFacade()
                                 ->countGroupByParentId($dataObj,
                                     $inParentOrgId);

        $properties = [
            'name'        => $inLocalNameArray[CB_I18N_DEFUALT_LANGUAGE_CODE]
            ,
            'foreign_key' => $inForeignKey
            ,
            'description' => $inMemo
            ,
            'list_index'  => $groupCount + 1
            ,
            'parent'      => $inParentOrgId
        ];

        $properties = $uum->validateAddGroupDefaultOnly($properties);
        $dao = new CbGroupSandboxDAO();
        $insertedId = $dao->addGroup($properties);
        $group = $uum->getGroup($insertedId);
        // add group local
        // we do not use $uum->addGroupLocals because it uses $uum->_sp which does not support sandbox mode.
        // @see \grn\system\sandbox\GRN_Uum_Sandbox::__construct
        $uum->_core->addGroupLocals($insertedId, $inLocalNameArray);

        $uum->execInspection(
            'sandbox-group', 'create', [
                'gid'         => $group->getOID()
                ,
                'name'        => $inLocalNameArray[CB_I18N_DEFUALT_LANGUAGE_CODE]
                ,
                'foreign_key' => $inForeignKey
                ,
                'memo'        => $inMemo
            ]
        );

        return $group;
    }

    /**
     * @param $gid
     * @param $parentId
     *
     * @return bool
     */
    public function setParentGroup($gid, $parentId)
    {
        $uum = GRN_Uum_Sandbox::getInstance();
        $dataObj = [];
        $dataObj['lock'] = CB_DATABASE_NO_LOCK;
        $groupCount = $uum->_core->getFwFacade()
                                 ->countGroupByParentId($dataObj,
                                     $parentId);
        (new CbGroupSandboxDAO())->update(
            $gid, [
                "parent"     => $parentId,
                "list_index" => $groupCount + 1
            ]
        );

        $this->updateModifiedFlag($gid);

        return true;
    }

    /**
     * @param array $order_list
     *
     * @return bool
     */
    public function updateGroups(array $order_list)
    {
        $dao = new CbGroupSandboxDAO();
        foreach ($order_list as $key => $value) {
            $dao->update($key, $value);
        }

        return true;
    }

    /**
     * @param       $groupId
     * @param array $userIds
     *
     * @return bool
     */
    public function setGroupUsers($groupId, array $userIds)
    {
        $uum = GRN_Uum_Sandbox::getInstance();

        // check an existence of group
        $group = $uum->getGroup($groupId);
        if ( ! $group) {
            return false;
        }
        $groupId = $group->getOID();

        // get old relations
        $dao = new CbUserGroupRelationSandboxDAO();
        $oldUserIds = $dao->getGroupUsersIdsIncludingDeletedUsers($groupId);

        // check an existence of user
        $users = $uum->getUsersById($userIds);
        $newUserIds = array_keys($users);

        // add / update relations
        $dao = new CbUserGroupRelationSandboxDAO();
        $dao->setGroupUserRelations($groupId, $newUserIds);

        // remove unused relations
        $dao->removeGroupUserRelations($groupId,
            array_diff($oldUserIds, $newUserIds));

        return true;
    }
}
