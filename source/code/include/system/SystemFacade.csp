<?php

require_once('grn/CBException.csp');
require_once('grn/DAOFactory.csp');

define('CB_SYSTEM_FACADE_DB_STATUS_INSERT', 1);
define('CB_SYSTEM_FACADE_DB_STATUS_UPDATE', 2);
define('CB_SYSTEM_FACADE_DB_STATUS_DELETE', 3);

class SystemFacade
{
    private $_db = null;

    public function __construct()
    {
        global $G_container_base;
        $this->_db = $G_container_base->getInstance('dbconn');
    }


    /** ***************************************************** */
    /** -----        GrnDefaultApplicationMenu      --------- */
    /** ***************************************************** */
    /**
     * @param $inDataObj
     * @param $inId
     *
     * @return bool|GrnDefaultApplicationMenu
     */
    public function referDefaultApplicationMenuById($inDataObj, $inId)
    {
        $inDataObj['db'] = $this->_db;
        $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
        $dao = $daoFctry->getGrnDefaultApplicationMenuDAO();

        $inLanguage = (array_key_exists('language', $inDataObj))
            ? $inDataObj['language'] : null;
        if (is_null($inLanguage)) {
            $result = $dao->selectDefaultById($inDataObj, $inId);
        } else {
            $result = $dao->selectLocalById($inDataObj, $inId);
        }

        return $result;
    }

    /**
     * @param $inDataObj
     *
     * @return GrnDefaultApplicationMenu[]
     */
    public function getDefaultApplicationMenuList($inDataObj)
    {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnDefaultApplicationMenuDAO();

            $resultList = $dao->getDefaultApplicationMenuList($inDataObj);

            return $resultList;
        } catch (CBException $cbe) {

        }
    }


    /** ***************************************************** */
    /** -----      GrnDefaultApplicationMenuLocal   --------- */
    /** ***************************************************** */
    /**
     * @param $inDataObj
     * @param $inDefaultApplicationMenuLocalObj
     *
     * @return bool|int
     */
    public function insertDefaultApplicationMenuLocal(
        $inDataObj,
        $inDefaultApplicationMenuLocalObj
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao
                = $daoFctry->getGrnDefaultApplicationMenuLocalDAO();
            $insertCount = $dao->insert($inDataObj,
                $inDefaultApplicationMenuLocalObj);

            return $insertCount;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param $inDataObj
     * @param $inDefaultApplicationMenuLocalObj
     *
     * @return int
     */
    public function updateDefaultApplicationMenuLocal(
        $inDataObj,
        $inDefaultApplicationMenuLocalObj
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry
                = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao
                = $daoFctry->getGrnDefaultApplicationMenuLocalDAO();
            $beforDefaultApplicationMenuLocal
                = $dao->selectByApplicationMenuId_LanguageCode($inDataObj,
                $inDefaultApplicationMenuLocalObj);
            if ($beforDefaultApplicationMenuLocal === false) {
                $insertCount = $dao->insert($inDataObj,
                    $inDefaultApplicationMenuLocalObj);

                return CB_SYSTEM_FACADE_DB_STATUS_INSERT;
            } else {
                $updateCount = $dao->update($inDataObj,
                    $inDefaultApplicationMenuLocalObj);

                return CB_SYSTEM_FACADE_DB_STATUS_UPDATE;
            }
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param $inDataObj
     * @param $inDefaultApplicationMenuLocalObj
     *
     * @return bool|int
     */
    public function deleteDefaultApplicationMenuLocal(
        $inDataObj,
        $inDefaultApplicationMenuLocalObj
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry
                = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao
                = $daoFctry->getGrnDefaultApplicationMenuLocalDAO();
            $deleteCount = 0;
            $beforDefaultApplicationMenuLocal
                = $dao->selectByApplicationMenuId_LanguageCode($inDataObj,
                $inDefaultApplicationMenuLocalObj);
            if ($beforDefaultApplicationMenuLocal !== false) {
                $deleteCount = $dao->deleteByParentId_LanguageCode($inDataObj,
                    $inDefaultApplicationMenuLocalObj);
            }

            return $deleteCount;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param $inDataObj
     * @param $inDefaultApplicationMenuId
     *
     * @return GrnDefaultApplicationMenuLocal[]
     */
    public function getDefaultApplicationMenuLocalListByDefaultApplicationMenuId(
        $inDataObj,
        $inDefaultApplicationMenuId
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao
                = $daoFctry->getGrnDefaultApplicationMenuLocalDAO();
            $resultList
                = $dao->getDefaultApplicationMenuLocalListByDefaultApplicationMenuId($inDataObj,
                $inDefaultApplicationMenuId);

            return $resultList;
        } catch (CBException $cbe) {

        }
    }
}

