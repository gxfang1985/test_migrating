<?php
/**
 * Presence Config Manager
 *
 * @author Tuyen Nguyen 2010/01
 */
require_once('fw/profile.csp');
require_once('presence/resources.csp');

class GRN_Presence_ConfigManager extends CB_ModuleBase
{
    private static $_instance = null;

    /**
     * @return GRN_Presence_ConfigManager
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    function __construct()
    {
        parent::__construct(GRN_PRESENCE_MODULE_ID);
    }

    var $_system_config = null;

    function getSystemConfig()
    {
        if (is_null($this->_system_config)) {
            $profile = $this->getSystemProfile();
            $profile->isSystemProfile = true;
            $profile->user = null;
            $this->_system_config = new GRN_Presence_Config($profile);
        }

        return $this->_system_config;
    }

    var $_personal_config = [];

    function getPersonalConfig($user)
    {
        $user_id = $user->getOID();
        if ( ! array_key_exists($user_id, $this->_personal_config)) {
            $profile = $this->getUserProfile($user);
            $profile->isSystemProfile = false;
            $profile->user = $user;
            $this->_personal_config[$user_id]
                = new GRN_Presence_Config($profile);
        }

        return $this->_personal_config[$user_id];
    }

    /*
     * Get status using for Combobox
     */
    function getStatusCombobox(& $user)
    {
        $options = [];

        // default status
        $options[] = [
            'value' => 'default:attend',
            'label' => $status_view = cb_msg('grn.presence', 'attend')
        ];
        $options[] = [
            'value' => 'default:absence',
            'label' => $status_view = cb_msg('grn.presence', 'absence')
        ];

        // system status
        $system_config =& $this->getSystemConfig();
        $system_status = $system_config->getStatuses();
        if (count($system_status)) {
            $options[] = ['value' => '', 'label' => '--'];
            foreach ($system_status as $status_item) {
                $options[] = [
                    'value' => 'custom:' . $status_item,
                    'label' => $status_item
                ];
            }
        }

        // personal status
        $personal_config =& $this->getPersonalConfig($user);
        $personal_status = $personal_config->getStatuses();
        if (count($personal_status)) {
            $options[] = ['value' => '', 'label' => '--'];
            foreach ($personal_status as $status_item) {
                $options[] = [
                    'value' => 'custom:' . $status_item,
                    'label' => $status_item
                ];
            }
        }

        return $options;
    }

}

/**
 * Presence Config
 */
class GRN_Presence_Config
{
    var $_profile;

    function __construct(& $profile)
    {
        $this->_profile =& $profile;
    }

    function getAttribute($key)
    {
        $value = null;
        $ret = $this->_profile->getAttribute($key, $value);
        if ($ret) {
            return $value;
        }

        return null;
    }

    function setAttribute($key, $value)
    {
        $profile =& $this->_profile;
        if ( ! is_a($profile, 'CB_Profile')) {
            return false;
        }

        $temp = null;
        $ret = $profile->getAttribute($key, $temp);
        if ($ret === false) {
            $ret = $profile->createAttribute($key, $value);
            if ($ret === false) {
                return false;
            }
        }

        return $profile->updateAttribute($key, $value);
    }

    /**
     * Get presence status
     */
    function getStatuses()
    {
        $profile =& $this->_profile;
        $status = $this->getAttribute('statuses');
        $ret = [];
        // have not status then get status from Address Application
        if ( ! $status) {
            require_once('address/config.csp');
            $config_manager = GRN_Address_ConfigManager::getInstance();
            $address_config = null;
            if ($profile->isSystemProfile) {
                $address_config =& $config_manager->getSystemConfig();
            } elseif ($profile->user) {
                $address_config
                    =& $config_manager->getPersonalConfig($profile->user);
            }
            $ret = $address_config->listAttendeeItems();

            if (count($ret) > 0) {
                // save status to Presence module
                $this->setStatuses(implode("\r\n", $ret));
                // remove address old status
                $address_config->setAttendeeItems('');
            }
        } else {
            $ret = mb_split("\r\n", $status);
        }

        $real_ret = [];
        // remove empty status
        foreach ($ret as $ret_item) {
            if (trim($ret_item)) {
                $real_ret[] = $ret_item;
            }
        }

        return $real_ret;
    }

    function setStatuses($status)
    {
        if ($status) {
            $statuses = mb_split("\r\n", $status);
            //remove empty
            foreach ($statuses as $key => $value) {
                if (mb_strlen($value) == 0) {
                    unset($statuses[$key]);
                }
            }
            $status = implode("\r\n", $statuses);
        }

        $this->setAttribute('statuses', $status);

        return $status;
    }

    /*
     * Show/Hide menu Proxy Settings in Personal
     */
    function getShowProxySettingsMenu()
    {
        $ret = $this->getAttribute('show_proxy_settings_menu');
        if ($ret === null) {
            $ret = 1;
        }

        return $ret;
    }

    function setShowProxySettingsMenu($show)
    {
        $this->setAttribute('show_proxy_settings_menu', $show);
    }

    /**
     * Auto change presence information
     */
    function getAutoChangePresenceInfo()
    {
        $info = $this->getAttribute('auto_change_presence_info');
        if ($info === null) {
            $info = [
                'auto_set_presence' => 0,
                'auto_set_absence'  => 0
            ];
        }
        if (defined('ON_FOREST')) {
            $info['auto_set_absence'] = 0;
        }

        return $info;
    }

    function setAutoChangePresenceInfo($info)
    {
        $this->setAttribute('auto_change_presence_info', $info);
    }

}

