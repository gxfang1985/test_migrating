<?php
/**
 * This package manages attachment files uploaded from the RichEditor.
 *
 * @auther  Miyabe, Tatsuhiko   2005/04
 * @version 1.0
 * @package re
 */
require_once('fw/persistent.csp');
require_once('grn/server_file.csp');
require_once('fw/lwc.csp');
require_once('fw/uum.csp');

/**
 * Manages file bundles of each document.
 *
 * @package re
 */
class CB_REFileBinder
{
    /**
     * Deletes files which left exceeding appropriate time.
     *
     * @return void
     */
    function deleteExpiredFiles()
    {
    }

    /**
     * Added an uploaded file or another server file as a temporary file.
     *
     * @param $file mixed an element of uploaded filles($_FILES) or CB_ServerFile.
     *
     * @return string file id.
     */
    function addFile(&$file)
    {
    }

    /**
     * Returns entity of the file or false.
     *
     * @param $fileid string
     *
     * @return CB_ServerFile
     */
    function getServerFile(&$fileid)
    {
    }

    /**
     * Associates temporary files with the document.
     *
     * @param $fileids array of string file id.
     * @param $docid   string the unique document id among the system.
     * @param $public  boolean If true, files can be shown by all users.
     *
     * @return void
     */
    function commitFiles(&$fileids, $docid, $public = false)
    {
    }

    /**
     * Deletes all files associated with the document.
     *
     * @param $docid string the unique document id among the system.
     *
     * @return void
     */
    function deleteFiles($docid)
    {
    }
}

/**
 * An implementation of CB_REFileBunderManager using the database.
 *
 * @package re
 */
class CB_REFileBinder_DB extends CB_REFileBinder
{
    var $_table;
    var $_expiry_seconds;

    function __construct()
    {
        $this->_expiry_seconds = 60 * 60 * 24;

        global $G_container_base;
        $tm = $G_container_base->getInstance('table_manager');
        $this->_table = $tm->getTableInfo('CB_REFile');
        unset($tm);
    }

    function deleteExpiredFiles()
    {
        $time = time() - $this->_expiry_seconds;

        $rowset = new CB_RowSet($this->_table);
        $rowset->setLock(CB_DATABASE_NO_LOCK);

        $rowset->addCondition("col_created < $time");
        while ( ! is_null($row = $rowset->iterate())) {
            $row->delete();
        }
    }

    function addFile(&$file)
    {
        assert('is_array($file) || is_subclass_of($file, "CB_ServerFile")');

        $this->deleteExpiredFiles();
        $binder = new CB_REFileBinder_DB_Internal($this->_table);

        $ret = $binder->addFile($file);

        return $ret;
    }

    function getServerFile(&$fileid)
    {
        assert('is_numeric($fileid)');

        $rowset = new CB_RowSet($this->_table);
        $rowset->setLock(CB_DATABASE_NO_LOCK);

        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $user = $uum->getLoginUser();
        if ($user === false) {
            $rowset->addCondition("col_user IS NULL");
        } else {
            $tmp_user = "'" . $user->getOID() . "'";
            $rowset->addCondition("(col_user IS NULL OR col_user = " . $tmp_user
                                  . ")");
        }
        $rowset->addCondition($rowset->queryf("_id = '@S'", $fileid));

        $row = $rowset->iterate();

        return $row;
    }

    function commitFiles(&$fileids, $docid, $public = false)
    {
        assert('!is_null($docid)');

        if ( ! empty($fileids)) {
            $rowset = new CB_RowSet($this->_table);
            $rowset->setLock(CB_DATABASE_NO_LOCK);

            global $G_container_base;
            $uum = $G_container_base->getInstance('uum');
            $user = $uum->getLoginUser();
            if ($user === false) {
                $query = "col_user IS NULL AND ";
            } else {
                $tmp_user = "'" . $user->getOID() . "'";
                $query = "(col_user IS NULL OR col_user = " . $tmp_user
                         . ") AND ";
            }

            $query .= "col_created IS NOT NULL AND (";
            foreach ($fileids as $fileid) {
                $query .= $rowset->queryf("_id = '@S' OR ", $fileid);
            }
            $query = substr($query, 0, strlen($query) - 4) . ')';
            $rowset->addCondition($query);
            while ( ! is_null($row = $rowset->iterate())) {
                $row->set('created', null);
                $row->set('document_id', $docid);
                if ($public) {
                    $row->set('user', null);
                }
                $row->updateNow();
            }
        }
    }

    function deleteFiles($docid)
    {
        assert('!is_null($docid)');

        $rowset = new CB_RowSet($this->_table);
        $rowset->setLock(CB_DATABASE_NO_LOCK);

        $query = $rowset->queryf("col_document_id = '@S'", $docid);
        $rowset->addCondition($query);
        while ( ! is_null($row = $rowset->iterate())) {
            $row->delete();
        }
    }
}

class CB_REFileBinder_DB_Internal
{
    var $_table;

    function __construct($table)
    {
        $this->_table =& $table;
    }

    function addFile($file)
    {
        $row = $this->_table->newRow();

        $time = new CB_TimeStamp();
        $time->unix_ts = time();
        $row->set('created', $time);

        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $user = $uum->getLoginUser();
        if ($user !== false) {
            $row->set('user', $user);
        }

        $row->copy($file);

        $ret = $row->getOID();

        return $ret;
    }
}

/**
 * The table for CB_REFileBinderManager_DB.
 *
 * @package re
 */
class CB_REFile extends GRN_ServerFile
{
    function __construct(&$row)
    {
        parent::__construct($row);
    }

    var $col_document_id
        = [
            'type'    => 'char',
            'length'  => CB_DATABASE_MAX_STRINDEX,
            'notnull' => false
        ];
    var $col_created = ['type' => 'timestamp', 'notnull' => false];
    var $col_user
        = [
            'type'    => 'weak_relation',
            'to'      => 'CB_User',
            'notnull' => false
        ];
    var $idx_c = ['cols' => ['created'], 'unique' => false];
    var $idx_d = ['cols' => ['document_id'], 'unique' => false];

    function copy($file, $detect_encoding = true)
    {
        self::validateFileSize($file);

        return parent::copy($file, $detect_encoding);
    }
}


