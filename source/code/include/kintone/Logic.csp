<?php
require_once('fw/slash_util.csp');

class GRN_Kintone_Logic
{
    const PERSONAL_APPGROUP_ID = 0;
    const DEFAULT_APPGRPOUP_ID = 1000;
    const ADMINISTRATOR_ID = '7532782697181632512';
    const EVERYONE_GROUP_ID = '7532782697181632513';

    public static function getKintoneURL($api = false)
    {
        global $G_config_common;
        if ($G_config_common->get('Global', 'performanceTest')) {
            return "";
        } elseif ($G_config_common->get('Kintone', 'url')) {
            // defined in common.ini 
            return $G_config_common->get('Kintone', 'url');
        } elseif (defined('ON_FOREST')) {
            if ($api) {
                $host = self::getKintoneHost();

                // FOREST version
                return "http://{$host}/k/";
            }

            return cb_get_url_prefix() . "/k/";
        } else {
            // onpremise version
            require_once('fw/profile.csp');
            $profile = cb_get_system_profile('grn.kintone');

            if ($profile->getAttribute('url', $url)) {
                return $url;
            } else {
                return "";
            }
        }
    }

    public static function setKintoneURL($url)
    {
        // onpremise only
        if (defined('ON_FOREST')) {
            return;
        }

        // 一番最後が / で終わってなかったら / をつける
        if (strcmp($url{strlen($url) - 1}, '/') != 0) {
            $url .= '/';
        }

        require_once('fw/profile.csp');
        $profile = cb_get_system_profile('grn.kintone');

        if ($profile->getAttribute('url', $dummy)) {
            $profile->updateAttribute('url', $url);
        } else {
            $profile->createAttribute('url', $url);
        }
    }

    /**
     * Get URL for the iframe of this Kintone application
     *
     * @param string $kAppID Kintone application ID
     */
    public static function getApplicationViewURL($kAppID)
    {
        return self::getKintoneURL() . $kAppID . "/?isGaroon=1";
    }

    /**
     * Get URL for the original page of this Kintone application
     *
     * @param string $kAppID Kintone application ID
     */
    public static function getApplicationOriginalViewURL($kAppID)
    {
        return self::getKintoneURL() . $kAppID;
    }

    /**
     * Get URL for the maintenance page of this Kintone application.
     *
     * @param string $kAppID Kintone application ID
     */
    public static function getApplicationMaintenanceURL($kAppID)
    {
        return self::getKintoneURL() . "admin/app/flow?app={$kAppID}";
    }

    /**
     * @return bool  return TRUE if the login user is available for kintone
     */
    public static function isAvailable()
    {
        if (defined('ON_FOREST')) {
            $slash = CB_SlashDB::getInstance();
            $services = $slash->getAvailableServices();
            if (isset($services['kintone']) && $services['kintone']) {
                return true;
            }

            return false;
        }

        return false;
    }

    /**
     * Redirect if the login user is not available for kintone
     *
     * @param string $page
     * @param array  $params
     */
    public static function checkRedirect($page, $params = [])
    {
        if ( ! self::isAvailable()) {
            cb_redirect($page, $params);
        }
    }

    public static function getKintoneHost()
    {
        if (defined('ON_FOREST')) {
            $forest_config = CB_ForestUtil::getConfig();
            $host = $forest_config->get('kintone', 'host');
            $port = $forest_config->get('kintone', 'port');

            return "{$host}:{$port}";
        }

        return '';
    }
}
