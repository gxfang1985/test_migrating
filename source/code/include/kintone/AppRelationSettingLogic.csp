<?php

namespace grn\kintone;

use grn\grn\Validate;
use grn\kintone\bean\GrnKintoneAppRelationSetting;
use grn\kintone\dao\GrnKintoneAppRelationSettingDAO;

require_once('kintone/APILogic.csp');
require_once('fw/i18n.csp');

class AppRelationSettingLogic extends \GRN_Kintone_APILogic
{
    const ITEM_NAME = 'itemName';
    const ALL_MENU = 'allMenu';
    const MENUS = 'menus';
    const KINTONE_APP = 'kintone_app';
    const EACH_PAGE_SETTING_LIMIT = 50;

    public function getAllRelationSettings($page)
    {
        $setting_dao = new GrnKintoneAppRelationSettingDAO();
        $all_settings = $setting_dao->getAllSettings($page);

        $i18n = \CB_I18N::getInstance();
        $current_language = $i18n->getCurrentLanguage();
        $return_settings = [];
        foreach ($all_settings as $id => $setting) {
            /** @var GrnKintoneAppRelationSetting $setting */

            // Get item name
            $item_name = $setting->getItemName();
            $item_local_name = cb_at($item_name, $current_language);
            if (is_null($item_local_name)) {
                $item_local_name = cb_at($item_name,
                    GrnKintoneAppRelationSetting::ITEM_NAME_KEY_DEFAULT);
            }
            if (is_null($item_local_name)) {
                continue;
            }

            $setting_temp = [self::ITEM_NAME => $item_local_name];
            $value = $setting->getValue();

            // Get menus info
            $menus = cb_at($value,
                GrnKintoneAppRelationSetting::VALUE_KEY_MENUS, []);
            if (cb_at($menus,
                GrnKintoneAppRelationSetting::VALUE_KEY_MENUS_ALL)
            ) {
                $setting_temp[self::ALL_MENU] = true;
            } else {
                unset($menus[GrnKintoneAppRelationSetting::VALUE_KEY_MENUS_ALL]);
                $setting_temp[self::MENUS] = $menus;
            }

            // Get kintone app info
            $setting_temp[self::KINTONE_APP] = cb_at($value,
                GrnKintoneAppRelationSetting::VALUE_KEY_APP);

            $return_settings[$id] = $setting_temp;
        }

        return $return_settings;
    }

    /**
     * @param array  $item_name
     * @param array  $item_value Relating information except item name.
     * @param string $page
     */
    public function addRelationSetting(
        $item_name = [],
        $item_value = [],
        $page = null
    ) {
        $temp_setting_info = [
            'col_itemname' => $item_name,
            'col_value'    => $item_value,
            'col_page'     => $page
        ];
        $setting_info
            = new GrnKintoneAppRelationSetting($temp_setting_info);

        $setting_dao = new GrnKintoneAppRelationSettingDAO();
        $result = $setting_dao->addSetting($setting_info);

        return $result;
    }

    /**
     * @param null $item_id
     * @param null $page
     *
     * @return array|bool
     */
    public function getRelationSettingById($item_id = null, $page = null)
    {
        if (is_null($item_id)) {
            return false;
        }

        $setting_dao = new GrnKintoneAppRelationSettingDAO();
        $setting = $setting_dao->getSettingById($item_id, $page);
        if ( ! $setting) {
            return false;
        }

        $return_setting = [];
        $return_setting[self::ITEM_NAME] = $setting->getItemName();

        $value = $setting->getValue();
        // Get menus info
        $menus = cb_at($value, GrnKintoneAppRelationSetting::VALUE_KEY_MENUS,
            []);
        if (cb_at($menus, GrnKintoneAppRelationSetting::VALUE_KEY_MENUS_ALL)) {
            $return_setting[self::ALL_MENU] = true;
        } else {
            unset($menus[GrnKintoneAppRelationSetting::VALUE_KEY_MENUS_ALL]);
            $return_setting[self::MENUS] = $menus;
        }

        // Get kintone app info
        $return_setting[self::KINTONE_APP] = cb_at($value,
            GrnKintoneAppRelationSetting::VALUE_KEY_APP);

        return $return_setting;
    }

    /**
     * @param null  $item_id
     * @param array $item_name
     * @param array $item_value
     */
    public function updateRelationSettingById(
        $item_id = null,
        $item_name = [],
        $item_value = []
    ) {
        $temp_setting_info = [
            '_id'          => $item_id,
            'col_itemname' => $item_name,
            'col_value'    => $item_value,
        ];
        $setting_info
            = new GrnKintoneAppRelationSetting($temp_setting_info);

        $setting_dao = new GrnKintoneAppRelationSettingDAO();
        $result = $setting_dao->updateSettingById($setting_info);

        return $result;
    }

    /**
     * @param null $item_id
     * @param null $order_id
     *
     */
    public function updateRelationSettingOrder(
        $item_id = null,
        $order_id = null
    ) {
        $temp_setting_info = [
            '_id'            => $item_id,
            'col_view_order' => $order_id,
        ];
        $setting_info
            = new GrnKintoneAppRelationSetting($temp_setting_info);

        $setting_dao = new GrnKintoneAppRelationSettingDAO();
        $result = $setting_dao->updateRelationSettingOrder($setting_info);

        return $result;
    }

    public function deleteRelationSettingById($item_id = null)
    {
        $setting_do = new GrnKintoneAppRelationSettingDAO();
        $result = $setting_do->deleteSetting($item_id);

        return $result;
    }

    public function getRecordForView()
    {

    }
}
