<?php

/**
 * Cybozu Web Service application
 *
 * @author   Eiji TAEN
 * @date     2005.02
 * @package  grn.cbwebsrv
 */

require_once('grn/application.csp');

/**
 * Cybozu Web Service application class
 *
 * @package  grn.cbwebsrv
 */
class GRN_CBWebSrv_Application extends GRN_ApplicationBase
{
    /**
     * constructor
     *
     * @access   private
     */
    function __construct()
    {
        parent::__construct('cbwebsrv');
    }

    /**
     * @return GRN_CBWebSrv_Application
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_CBWebSrv_Application();
        }

        return $_instance;
    }

    public function initialize()
    {
        parent::initialize();

        // 天気予報
        // 0, 6, 12, 18時半から1時間の間にイベントデータを取得
        require_once('fw/schedule.csp');
        $ss = CB_SchedulingService::getInstance();

        $event_name_base = 'grn_cbwebsrv_weather';
        $exec_time = [30, 390, 750, 1110];
        $offset = mt_rand(0, 59);
        $count = 0;
        foreach ($exec_time as $time) {
            $event_name = $event_name_base . strval($count);
            $ss->unregisterEvent($event_name);

            $time += $offset;
            $command = strval($time % 60) . ' ' . strval((int)($time / 60))
                       . ' * * *';
            $ss->registerRepeatEvent($event_name, 'get_weather_data.csp',
                $command);
            $count++;
        }

        // 六曜
        $event_name = 'grn_cbwebsrv_six_kinds_of_day';
        $ss->unregisterEvent($event_name);
        $command = strval(mt_rand(0, 59)) . ' ' . strval(mt_rand(0, 23))
                   . ' 1 12 *';
        $ss->registerRepeatEvent($event_name, 'get_six_kinds_of_day_data.csp',
            $command);

        unset($ss, $event_name_base, $exec_time, $offset, $count, $time, $event_name, $command);
    }

    /**
     * system configuration
     */
    function getSystemConfigArray()
    {
        $config_list = [
            [
                'page' => 'cbwebsrv/system/common_set',
                'icon' => 'general32'
            ]
        ];

        require_once('cbwebsrv/system_logic.csp');
        $system = GRN_CBWebSrv_SystemLogic::getInstance();
        $use_pid = $system->getUseProductIDAttribute();

        if (strcmp($use_pid, '1') === 0) {
            $config_list[] = [
                'page' => 'cbwebsrv/system/service_list',
                'icon' => 'business32'
            ];
            $config_list[] = [
                'page' => 'cbwebsrv/system/get_event_data',
                'icon' => 'event32'
            ];
        }

        return ['cbwebsrv_config' => $config_list];
    }

    /**
     * アプリケーションポートレットリストの取得
     *
     * @return array $portlet_list
     *          このアプリケーションが持つ
     *          アプリケーションポートレット情報を返します
     */
    function &getPortletList()
    {
        require_once('fw/i18n.csp');
        $portlet_list = [];

        require_once('cbwebsrv/system_logic.csp');
        $system_logic = GRN_CBWebSrv_SystemLogic::getInstance();

        // 天気予報ポートレットの定義
        if ($system_logic->getServiceAvailabilityAttribute('weather') == '1') {
            $cbwebsrv_portlet = [
                'name'             => cb_msg('grn.cbwebsrv',
                    'portlet_view_weather'),
                //名前
                'type'             => 'grn.cbwebsrv.weather',
                //種別
                'version'          => '1.0',
                //バージョン
                'set_template'     => 'cbwebsrv/portlet/set_weather.csp',
                //設定用テンプレート名
                'command_template' => 'cbwebsrv/portlet/command_set_weather.csp',
                //設定用テンプレート名
                'view_template'    => 'cbwebsrv/portlet/view_weather.csp'
                //表示用テンプレート名
            ];
            $portlet_list[] = $cbwebsrv_portlet;
        }

        return $portlet_list;
    }

    function isLicensed()
    {
        $license = $this->getLicenseInfo();
        if ( ! is_array($license) || 0 == count($license)) {
            return false;
        }

        return GRN_LICENSE_EXPIRED != $this->getStatus($license);
    }

    function getLicenseInfo($service_offset = 30)
    {
        require_once('grn/license.csp');
        $license_manager = GRN_LicenseManager::getInstance();
        $license = $license_manager->getLicense(GRN_LICENSE_BASESYSTEM);

        if ( ! is_array($license) || 0 == count($license)) {
            return false;
        }

        if ($license_manager->isDemoLicense($license['type'])) {
            // 試用期間を不正に延ばそうとした場合（試用開始日時 > 現在日時）
            if (time() < $license['register']->unix_ts) {
                $license['remind_days'] = -1;
            } // 試用期間過ぎた場合
            else {
                $license['remind_days']
                    = $license_manager->getRemindDays($license['limit']);
            }
        } // 正規ライセンス登録済み
        else {
            $license['remind_days']
                = $license_manager->getRemindDays($license['service_limit'],
                $service_offset);
        }

        return $license;
    }

    function getStatus($license_info)
    {
        static $_status = null;
        if ( ! is_null($_status)) {
            return $_status;
        }
        $_status = GRN_LICENSE_SUCCESS;

        if (0 > $license_info['remind_days']) {
            $_status = GRN_LICENSE_EXPIRED;
        }

        return $_status;
    }
}


