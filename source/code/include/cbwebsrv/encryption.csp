<?php

/**
 * Cybozu Web Service
 *
 * @author   Mizuno, Kuniaki
 * @package  grn.cbwebsrv
 */

define('GRN_CBWEBSRV_DECRYPT_MOD_KEY', 47);

/**
 * These functions were transplanted from Office6(C++).
 *
 * @package  grn.cbwebsrv
 */
class GRN_CBWebSrv_Encryption
{
    // ランダムな short 値の配列A
    var $_randKeyA
        = [
            13,
            19,
            23,
            13,
            19,
            13,
            37,
            31,
            17,
            11,
            17,
            29,
            29,
            37,
            31,
            13,
            11,
            37,
            11,
            31,
            11,
            19,
            17,
            19,
        ];

    // ランダムな short 値の配列B
    var $_randKeyB
        = [
            5,
            2,
            3,
            7,
            5,
            3,
            2,
            5,
            3,
            7,
            2,
            2,
            5,
            3,
            3,
            2,
            7,
            2,
            3,
            5,
            7,
            3,
            7,
            5,
        ];

    /**
     * This function was transplanted from Office6(C++).
     *
     * @param $encrypt
     * @param $key
     *
     * @return string
     * @access public
     */
    function encrypt2($encrypt, $key = -1)
    {

        $length = strlen($encrypt);

        $src = [];

        for ($i = 0; $i < $length; $i++) {

            $ch1 = (ord($encrypt[$i]) >> 4) & 0x0f;
            $ch2 = ord($encrypt[$i]) & 0x0f;

            $src[] = ($ch1 < 0x0a) ? (ord('0') + $ch1)
                : (ord('A') + $ch1 - 0x0a);
            $src[] = ($ch2 < 0x0a) ? (ord('0') + $ch2)
                : (ord('A') + $ch2 - 0x0a);
        }


        if ($key < 0) {
            $key = srand(time());
            $key = rand() % 24;
        } else {
            $key = $key % 24;
        }

        $nSum = 0;
        $nSrc = 0;
        $dst = '';
        $length = count($src);
        $nResult = null;
        for ($i = $key; $nSrc < $length; $i++, $nSrc++) {

            if ($i >= 24) {
                $i = 0;
            }

            $nSum += $src[$nSrc];
            $src[$nSrc]++;

            $nResult = ($this->_randKeyA[$i] * ($src[$nSrc] - ord('0')) +
                        $this->_randKeyB[$i]) % GRN_CBWEBSRV_DECRYPT_MOD_KEY;

            $dst .= $this->_convertNumToChar($nResult);
        }

        $dst .= $this->_convertNumToChar($nSum % GRN_CBWEBSRV_DECRYPT_MOD_KEY);
        $dst .= $this->_convertNumToChar($key);

        return $dst;
    }

    /**
     * This function was transplanted from Office6(C++).
     *
     * @param string $str
     *
     * @return string
     * @access public
     */
    function decrypt2($str)
    {
        // 文字列の長さをチェック
        $length = strlen($str);
        if ($length < 2 || $length % 2 != 0) {
            return false;
        }
        if ($length == 2) {
            return '';
        }

        // キーを取得
        $key = $this->_convertCharToNum($str{$length - 1});
        if ($key < 0 || $key >= 24) {
            return false;
        }

        $sum = 0;   // チェックサムを初期化
        $buf = '';  // バッファを初期化
        $dest = ''; // 複合化文字列用バッファ
        for ($i = $key, $src = 0; $src + 2 < $length; $i++, $src++) {
            if ($i >= 24) {
                $i = 0;
            }

            for ($j = 2; ; $j++) {
                if (($this->_randKeyA[$i] * $j) % GRN_CBWEBSRV_DECRYPT_MOD_KEY
                    == 1
                ) {
                    break;
                }
            }

            $result = $this->_convertCharToNum($str{$src});
            if ($result == -1) {
                return false;
            }

            $result += GRN_CBWEBSRV_DECRYPT_MOD_KEY;
            $result = (($result - $this->_randKeyB[$i]) * $j)
                      % GRN_CBWEBSRV_DECRYPT_MOD_KEY;

            $buf_ord = $result + ord('0') - 1;
            $buf .= chr($buf_ord);
            $sum += $buf_ord;
            if (strlen($buf) == 2) {
                $ch = sscanf($buf, '%x');
                if ( ! is_array($ch) || count($ch) <= 0) {
                    return false;
                }
                $dest .= chr($ch[0]);
                $buf = '';
            }
        }

        // チェックサムの検索
        if ($this->_convertNumToChar($sum % GRN_CBWEBSRV_DECRYPT_MOD_KEY)
            != $str{$src}
        ) {
            return false;
        }

        return $dest;
    }

    /**
     * int 値を対応するアルファベットに変換
     *
     * @param int $src_ord
     *
     * @return string
     * @access private
     */
    function _convertNumToChar($src_ord)
    {
        $dest_ord = ($src_ord < 26) ? ($src_ord + ord('A'))
            : ($src_ord - 26 + ord('a'));
        $dest_ch = chr($dest_ord);
        if ($dest_ch == 'I') {
            return 'v';
        } elseif ($dest_ch == 'O') {
            return 'w';
        } elseif ($dest_ch == 'l') {
            return 'x';
        }

        return $dest_ch;
    }

    // 

    /**
     * アルファベットを対応する short 値に変換
     *
     * @param string $src_ch
     *
     * @return int
     * @access private
     */
    function _convertCharToNum($src_ch)
    {
        $src_ord = ord($src_ch);
        if (ord('A') <= $src_ord && $src_ord <= ord('Z')) {
            return $src_ord - ord('A');
        } elseif (ord('a') <= $src_ord && $src_ord <= ord('u')) {
            return ($src_ord - ord('a')) + 26;
        } elseif ($src_ch == 'v') {
            return ord('I') - ord('A');
        } elseif ($src_ch == 'w') {
            return ord('O') - ord('A');
        } elseif ($src_ch == 'x') {
            return ord('l') - ord('a') + 26;
        }

        return -1;
    }
}

