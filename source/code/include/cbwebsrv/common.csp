<?php

/**
 * This file contains common methods for Cybozu Online Services
 */

define('GRN_CBWEBSRV_DEFAULT_USER_ID', '1');
define('GRN_CBWEBSRV_DEFAULT_PRODUCT_VERSION', '1');
define('GRN_CBWEBSRV_DEFAULT_PRODUCT_NAME', 'garoon');
define('GRN_CBWEBSRV_HTTPHEADER_AUTH', 'AuthorizationToken');
define('GRN_CBWEBSRV_AUTH_TOKEN_TIMEOUT', 86400);

/**
 * @param string $user_id
 *
 * @return array
 */
function grn_cbwebsrv_create_client_info($user_id = GRN_CBWEBSRV_DEFAULT_USER_ID
) {
    $is_forest = cb_is_forest();
    if ($is_forest) {
        require_once('fw/cydec.csp');
        $cyde_util = \CB_CyDECUtil::getInstance();
        $unique_id = $cyde_util->getDomainID();
    } else {
        require_once('grn/system_logic.csp');
        $system_logic = GRN_System::getInstance();
        $unique_id = GRN_CBWEBSRV_DEFAULT_PRODUCT_NAME . "-"
                     . $system_logic->getSystemUUID();
    }
    $client_info = [
        'version'    => GRN_CBWEBSRV_DEFAULT_PRODUCT_VERSION,
        'product'    => GRN_CBWEBSRV_DEFAULT_PRODUCT_NAME,
        'cloud'      => $is_forest,
        'uniqueId'   => $unique_id,
        'userId'     => $user_id,
        'expiration' => sprintf("%s", time() + GRN_CBWEBSRV_AUTH_TOKEN_TIMEOUT)
    ];

    return $client_info;
}

/**
 * @param string $user_id
 *
 * @return string
 */
function grn_cbwebsrv_create_request_token(
    $user_id = GRN_CBWEBSRV_DEFAULT_USER_ID
) {
    $client_info = grn_cbwebsrv_create_client_info($user_id);
    $client_info_json = json_encode($client_info);

    return base64_encode($client_info_json);
}

/**
 * validate a Cybozu NET license
 *
 * @option   object    CB_Date   date you wanna compare (default: today)
 * @return   boolean   return TRUE if $date <= expiration date
 *                     return FALSE if $date > expiration date or doesn't have a license
 */
function _grn_cbwebsrv_validate_license($date = null)
{
    require_once('grn/license.csp');
    $lm = GRN_LicenseManager::getInstance();
    $license_info = $lm->getLicense(GRN_LICENSE_BASESYSTEM);

    if ($lm->isDemoLicense($license_info['type'])) {
        return true;
    } else {
        $date = $license_info['service_limit'];
        $remind_days = $lm->getRemindDays($date,
            GRN_LICENSE_SERVICE_EXPIRED_OFFSET);
        if ($remind_days < 0) {
            return false;
        }
    }

    return true;
}

function _grn_workflow_validate_license($date = null)
{
    require_once('grn/license.csp');
    require_once('workflow/resources.csp');
    $lm = GRN_LicenseManager::getInstance();
    $license_info = $lm->getLicense(GRN_LICENSE_BASESYSTEM);

    if ($lm->isDemoLicense($license_info['type'])) {
        return true;
    } else {
        $date = $license_info['service_limit'];
        $remind_days = $lm->getRemindDays($date,
            GRN_LICENSE_SERVICE_EXPIRED_OFFSET);
        if (0 > $remind_days) {
            return false;
        }
    }

    return true;
}

/**
 * check whether specified service is available or not
 *
 * @param    string $service service id
 *
 * @return   boolean   return TRUE if specified service is available
 */
function grn_cbwebsrv_is_available_service($service_id)
{
    if (GRN_WORKFLOW_SERVICE_ROUTE == $service_id) {
        // activate?
        require_once('grn/application.csp');
        $locator = GRN_ApplicationLocator::instance();
        if ( ! $locator->isActive('workflow')) {
            return false;
        }

        // has a valid license?
        if ( ! _grn_workflow_validate_license()) {
            return false;
        }
    } else {
        // activate?
        require_once('grn/application.csp');
        $locator = GRN_ApplicationLocator::instance();
        if ( ! $locator->isActive('cbwebsrv')) {
            return false;
        }

        // has a valid license?
        if ( ! _grn_cbwebsrv_validate_license()) {
            return false;
        }
    }

    // send a product id?
    require_once('cbwebsrv/system_logic.csp');
    $system = GRN_CBWebSrv_SystemLogic::getInstance();
    if (strcmp($system->getUseProductIDAttribute(), '1') !== 0) {
        return false;
    }

    // is specified service available?
    require_once('cbwebsrv/system_logic.csp');
    $system_logic = GRN_CBWebSrv_SystemLogic::getInstance();
    $can_use = $system_logic->getServiceAvailabilityAttribute($service_id);

    if ($can_use === '1') {
        $ret = true;
    } else {
        $ret = false;
    }

    return $ret;
}

/**
 * DEBUG LOGGER
 *
 * @param mixed  $msg      debug message
 * @param string $filename filename
 * @param string $line     line of the file
 */
function grn_cbwebsrv_debug_log($msg, $filename = null, $line = null)
{
    require_once('fw/logger.csp');
    $lm = CB_LoggerManager::getInstance();

    if ( ! is_null($lm)) {

        $logger =& $lm->getLogger('grn.cbwebsrv');

        if ( ! $logger->isDebugEnabled()) {
            return true;
        }

        $message = $msg;
        if (is_array($message)) {
            if (count($message) !== 0) {
                $message = '';
                foreach (array_keys($msg) as $key) {
                    $message .= $key . ' => ' . $msg[$key] . ' ';
                }
            } else {
                $message = 'argument is array, but there\'s no element';
            }
        }

        if ( ! is_null($filename) && strlen($filename) !== 0) {
            $message .= ' FILE: ' . $filename;
        }

        if ( ! is_null($line) && strlen($line) !== 0) {
            $message .= ' LINE: ' . $line;
        }

        $logger->debug($message);

        return true;
    }

    return false;
}

/**
 * Get server's encoding. (default SJIS-win)
 *
 * @return string
 */
function grn_cbwebsrv_get_encoding()
{
    return 'SJIS-win';
}


