<?php

/**
 * Cybozu Web Service
 *
 * @author   Eiji TAEN   2005/05
 * @package  grn.cbwebsrv
 */
require_once('fw/persistent.csp');
require_once('cbwebsrv/tables.csp');

define('GRN_CBWEBSRV_EVENT_SIX_KINDS_OF_DAY', 'Rokuyo');
define('GRN_CBWEBSRV_EVENT_WEATHER', 'Weather');
define('GRN_CBWEBSRV_WEATHER_PREFECTURE_NAME', 'prefectureName');
define('GRN_CBWEBSRV_WEATHER_POINT_NAME', 'pointName');
define('GRN_CBWEBSRV_WEATHER_POINT_LIST', 'point_list');
define('GRN_CBWEBSRV_WEATHER_NOT_FOUND_ICON', 'w_general.png');
define('GRN_CBWEBSRV_REQUEST_ENCODING', 'gzip');

/**
 * Cybozu Web Service base class
 *
 * @package  grn.cbwebsrv
 */
class GRN_CBWebSrv_Base
{
    /**
     * @access   private
     */
    var $_event_id;

    /**
     * @access   private
     */
    var $_manager;

    /**
     * @access   private
     */
    var $_tab_event;

    /**
     * @access   private
     */
    var $_tab_event_property;

    /**
     * @access   private
     */
    var $_event_caches;
    var $_event_property_caches;

    /**
     * constructor
     */
    function __construct()
    {
        $app_locator = GRN_ApplicationLocator::instance();
        $this->_manager = $app_locator->getTableManager('cbwebsrv');

        $this->_tab_event = $this->_manager->getTableInfo('GRN_CBWebSrv_Event');
        $this->_tab_event_property
            = $this->_manager->getTableInfo('GRN_CBWebSrv_EventProperty');
        $this->_event_caches = [];
        $this->_event_property_caches = [];
    }

    /**
     * set event name
     * @access   @protected
     */
    function _setEventID($event_id)
    {
        $this->_event_id = $event_id;
    }

    /**
     *
     */
    function getEvent($event_id)
    {
        if (array_key_exists($event_id, $this->_event_caches)) {
            return $this->_event_caches[$event_id];
        }

        $db = $this->_tab_event->getDBConnection();

        $rowset = new CB_RowSet($this->_tab_event);
        $rowset->addCondition(cb_queryf($db, 'col_event_id = \'@S\'',
            $event_id));
        $rowset->setLock(CB_DATABASE_NO_LOCK);

        $row = $rowset->iterate();
        $rowset->destroy();

        if (is_null($row)) {
            $ret = false;

            return $ret;
        }

        $this->_event_caches[$event_id] = $row;

        return $row;
    }

    /**
     * set event data
     *
     * @param    string $event_id   event id
     * @param    string $event_name event name
     * @param    object $utime      CB_TimeStamp   next update time
     *
     * @return   object   CB_Row        an event row
     */
    function setEvent($event_id, $event_name, & $utime)
    {
        $row = $this->getEvent($event_id);
        if ($row === false) {
            $row = $this->_tab_event->newRow();
        }

        $row->set('event_id', $event_id);
        $row->set('event_name', $event_name);
        $row->set('utime', $utime);

        $this->_event_caches[$event_id] =& $row;

        return $row;
    }


    /**
     *
     */
    function getEventProperty($event_id, $property_id)
    {
        if ( ! array_key_exists($event_id, $this->_event_property_caches)) {
            $this->_event_property_caches[$event_id] = [];
        }

        if (array_key_exists($property_id,
            $this->_event_property_caches[$event_id])
        ) {
            return $this->_event_property_caches[$event_id][$property_id];
        }

        $db = $this->_tab_event_property->getDBConnection();

        $rowset = new CB_RowSet($this->_tab_event_property);
        $rowset->addJoin($this->_tab_event,
            cb_queryf($db,
                'col_event_id = \'@S\' AND e._id = col_event AND col_property_id = \'@S\'',
                $event_id, $property_id),
            CB_DATABASE_INNER_JOIN,
            'e'
        );
        $rowset->setLock(CB_DATABASE_NO_LOCK);
        $row = $rowset->iterate();
        $rowset->destroy();

        if (is_null($row)) {
            $ret = false;

            return $ret;
        }

        $this->_event_property_caches[$event_id][$property_id] =& $row;

        return $row;
    }

    /**
     * @access   private
     */
    function _setEventProperty(& $event, $property_id, $property_name, & $vtime)
    {
        $event_id = $event->get('event_id');
        $row = $this->getEventProperty($event_id, $property_id);
        if ($row === false) {
            $row = $this->_tab_event_property->newRow();
        }

        $row->set('event', $event);
        $row->set('property_id', $property_id);
        $row->set('property_name', $property_name);
        $row->set('vtime', $vtime);

        $this->_event_property_caches[$event_id][$property_id] =& $row;

        return $row;
    }

    /**
     * set an event property
     *
     * @param    string $event_id      event id
     * @param    string $property_id   property id
     * @param    string $property_name property name
     * @param    object $vtime         valid time
     *
     * @return   mixed    CB_Row   an event property row
     *                             if a weather event doesn't exist, return FALSE
     */
    function setEventProperty($event_id, $property_id, $property_name, & $vtime)
    {
        $event = $this->getEvent($event_id);

        if ($event === false) {
            $ret = false;

            return $ret;
        }

        $ret = $this->_setEventProperty($event, $property_id, $property_name,
            $vtime);

        return $ret;
    }

    /**
     *
     */
    function getEventData()
    {
        $server_params = $this->getServerParameters();
        $header_params = [
            GRN_CBWEBSRV_HTTPHEADER_AUTH . ":"
            . $server_params[GRN_CBWEBSRV_HTTPHEADER_AUTH]
        ];

        if ($this->_fetchEventData($server_params['url'], $header_params)) {
            $data = $this->_parseEventData($this->getCachePath());

            if (count($data) > 0) {
                $this->deleteEventData();
                $this->setEventData($data);

                // logging
                $event_id = $this->_event_id;
                $service_name = cb_msg('grn.cbwebsrv', $event_id);

                require_once('grn/logger.csp');
                $lm = CB_LoggerManager::getInstance();
                $logger = $lm->getLogger('grn.cbwebsrv');
                $action = 'download';
                $target = 'event_data';
                $log_params = ['sid' => $event_id, 'name' => $service_name];
                $logger->noticeEx($action, $target, $log_params);
            }
        }

    }

    /**
     * @access   private
     */
    function _fetchEventData($url, $header_params, $timeout = 30)
    {
        require_once('grn/http_proxy.csp');
        $phc = new GRN_ProxyHttpClient();
        $hc = $phc->getHttp();
        $hc->setCurlOption(CURLOPT_HTTPHEADER, $header_params);
        $hc->setCurlOption(CURLOPT_REFERER, '');
        $hc->setCurlOption(CURLOPT_CONNECTTIMEOUT, $timeout);
        $hc->setCurlOption(CURLOPT_ENCODING, GRN_CBWEBSRV_REQUEST_ENCODING);

        if ($phc->execute($url)) {
            $status_line = $hc->getStatusLine();

            $status_code = -1;
            if (array_key_exists('status-code', $status_line)) {
                $status_code = $status_line['status-code'];
            }

            switch ($status_code) {
                case 200: // OK
                    $this->_makeCacheDir();
                    $fh = fopen($this->getCachePath(), 'w');
                    fwrite($fh, $hc->getBody());
                    fclose($fh);

                    return true;
                case 301: // Moved Permanently
                case 302: // Found
                case 303: // See Other
                    $headers = $hc->getHeaders();
                    if (array_key_exists('location', $headers)) {
                        // redirect
                        return $this->execute($headers['location'][0],
                            $header_params);
                    } else {
                        require_once('cbwebsrv/error_code.csp');
                        cb_throw_error(E_GRN_CBWEBSRV_FAIL_TO_ACCESS_SERVER);
                    }
                    break;
                case 304: // Not Modified
                    return false;
                default:  // something wrong
                    require_once('cbwebsrv/error_code.csp');
                    cb_throw_error(E_GRN_CBWEBSRV_FAIL_TO_ACCESS_SERVER);
            }
        } else {
            // warning log
            $service_name = cb_msg('grn.cbwebsrv', $this->_event_id);
            $error_name = 'connection_error';

            require_once('grn/logger.csp');
            $lm = CB_LoggerManager::getInstance();
            $logger =& $lm->getLogger('grn.cbwebsrv');
            $log_params = [
                'sid'  => $this->_event_id,
                'name' => $service_name,
                'url'  => $url
            ];
            $logger->warningEx($error_name, $log_params);

            require_once('cbwebsrv/error_code.csp');
            cb_throw_error(E_GRN_CBWEBSRV_FAIL_TO_ACCESS_SERVER);
        }

        return true;
    }

    /**
     * @access   private
     */
    function _makeCacheDir()
    {
        $dir = $this->_getCacheDir();
        cb_mkdir($dir, 0700) || die("failed to make directory: ${dir}");
    }

    /**
     * @access   private
     */
    function _getCacheDir()
    {
        return cb_tmpdir() . '/cbwebsrv';
    }

    /**
     * get event cache file path
     * you must override this function in the inherited class.
     */
    function getCachePath()
    {
        //
    }

    /**
     * @access   protected
     */
    function getServerParameters()
    {
        $server_url = $this->getServerURL();

        require_once('cbwebsrv/common.csp');
        $token
            = grn_cbwebsrv_create_request_token(GRN_CBWEBSRV_DEFAULT_USER_ID);

        return [
            'url'                        => $server_url,
            GRN_CBWEBSRV_HTTPHEADER_AUTH => $token
        ];
    }

    /**
     * @access   protected
     */
    function getServerURL()
    {
        return null;
    }

    /**
     * @access   protected
     */
    function setEventData($data_list)
    {
        //
    }

    /**
     * @param $file
     *
     * @return array
     */
    function _parseEventData($file)
    {
        return [];
    }

    /**
     * @access   protected
     */
    function deleteEventData()
    {
    }

    /**
     * check event properties data is exist
     *
     * @param string $event_id event id
     *
     * @access public
     * @return boolean : TRUE if exist data, otherwise FALSE
     */
    public function isExistEventProperties($event_id)
    {
        $db = $this->_tab_event_property->getDBConnection();
        $query
            = 'SELECT COUNT(1) AS total FROM tab_grn_cbwebsrv_eventproperty AS p ';
        $query .= 'INNER JOIN tab_grn_cbwebsrv_event AS e ON p.col_event=e._id WHERE col_event_id = \'@S\'';
        $query = cb_queryf($db, $query, $event_id);
        $result = $db->query($query);
        $result_assoc = $db->fetch_assoc($result);
        $count = intval($result_assoc['total']);
        if ($count === 0) {
            return false;
        }

        return true;
    }
}



