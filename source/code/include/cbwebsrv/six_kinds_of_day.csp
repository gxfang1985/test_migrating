<?php

/**
 * six kinds of day logic
 *
 * @author   Eiji TAEN   2005/03
 * @package  grn.cbwebsrv
 */

require_once('cbwebsrv/base.csp');

/**
 * Six kinds of day service class
 *
 * @package  grn.cbwebsrv
 */
class GRN_CBWebSrv_SixKindsOfDayService extends GRN_CBWebSrv_Base
{

    /**
     * constructor
     *
     * @access   private
     */
    function __construct()
    {
        parent::__construct();
        require_once('cbwebsrv/tool_define.csp');
        $this->_setEventID(GRN_CBWEBSRV_SERVICE_SIXKINDSOFDAY);
    }

    /**
     * get a instance
     *
     * @return   GRN_CBWebSrv_SixKindsOfDayService
     */
    public static function getInstance()
    {
        static $_instance = null;

        if (is_null($_instance)) {
            $_instance = new GRN_CBWebSrv_SixKindsOfDayService();
        }

        return $_instance;
    }

    function getCachePath()
    {
        return $this->_getCacheDir() . '/six_kinds_of_day.xml';
    }

    /**
     * get six kinds of day information
     *
     * @option   object   $start   CB_Date start day (default: null)
     *                             if $start is null, set today to $start
     * @option   int      $days    get six kinds of day from today to $days days after
     *                             (default: 6)
     * @return   array    six kinds of day information
     *                    if parameters are wrong, return FALSE.
     *
     * return_array[date] => string   a name of six kinds of day, key: date yyyy-mm-dd
     */
    function getSixKindsOfDay($start = null, $days = 6)
    {
        // check parameters
        if (( ! is_null($start) && ! is_a($start, 'CB_Date'))
            || ! is_int($days)
        ) {
            return false;
        }

        // start date
        if (is_null($start)) {
            require_once('fw/date.csp');
            $ts = new CB_TimeStamp();
            $ts->unix_ts = time();
            $tsx = new CB_TimeStampEx($ts);
            $start =& $tsx->getDate();
        }

        return $this->_getSixKindsOfDay($start, $days);
    }

    /**
     * access   private
     */
    function _getSixKindsOfDay($start, $days)
    {
        // end date
        $end = new CB_DateEx($start);
        $end->moveDays($days);

        $tab_six_kinds_of_day
            =& $this->_manager->getTableInfo('GRN_CBWebSrv_SixKindsOfDay');

        $rowset = new CB_RowSet($tab_six_kinds_of_day);
        $rowset->addJoin($this->_tab_event,
            'col_event_id = \'' . GRN_CBWEBSRV_EVENT_SIX_KINDS_OF_DAY . '\'',
            CB_DATABASE_INNER_JOIN,
            'e'
        );
        $rowset->addJoin($this->_tab_event_property,
            'p._id = col_property AND col_date >= \'' . $start->format()
            . '\' AND col_date <= \'' . $end->format()
            . '\' AND e._id = col_event',
            CB_DATABASE_INNER_JOIN,
            'p'
        );

        $rowset->addOrderColumn('col_date');
        $rowset->setLock(CB_DATABASE_NO_LOCK);

        $six_kinds_of_day = [];
        while ( ! is_null($row = $rowset->iterate())) {
            $date = $row->get('date');
            $six_kinds_of_day[$date->format()] = $row->get('name');
        }

        return $six_kinds_of_day;
    }

    /**
     * set six-kinds-of-day event data
     *
     * @param    string $event_name event name
     * @param    object $utime      CB_TimeStamp   next update time
     *
     * @return   object   CB_Row        a six-kinds-of-day event row
     */
    function setSixKindsOfDayEvent($event_name, & $utime)
    {
        $ret = $this->setEvent(GRN_CBWEBSRV_EVENT_SIX_KINDS_OF_DAY, $event_name,
            $utime);

        return $ret;
    }

    /**
     * set a six-kinds-of-day event property (year information)
     *
     * @param    string $property_id   property id   (year id)
     * @param    string $property_name property name (year name)
     * @param    object $vtime         valid time
     *
     * @return   mixed    CB_Row   a six-kinds-of-day event property row
     *                             if a six-kinds-of-day event doesn't exist, return FALSE
     */
    function setSixKindsOfDayEventProperty(
        $property_id,
        $property_name,
        & $vtime
    ) {
        $__ret = $this->setEventProperty(GRN_CBWEBSRV_EVENT_SIX_KINDS_OF_DAY,
            $property_id,
            $property_name, $vtime);

        return $__ret;
    }

    /**
     * set six-kinds-of-day information
     *
     * @param    string $property_id property id (year id)
     * @param    object $date        CB_Date
     * @param    string $name        a six-kinds-of-day name
     *
     * @return   mixed    CB_Row   a six-kinds-of-day row
     *                             if the six-kinds-of-day event or event property don't exist,
     *                             return FALSE
     */
    function setSixKindsOfDay($property_id, & $date, $name)
    {
        $property
            =& $this->getEventProperty(GRN_CBWEBSRV_EVENT_SIX_KINDS_OF_DAY,
            $property_id);

        if ($property === false) {
            $ret = false;

            return $ret;
        }

        $ret = $this->_setSixKindsOfDay($property, $date, $name);

        return $ret;
    }

    /**
     * @access   private
     */
    function _setSixKindsOfDay(& $property, & $date, $name)
    {
        $tab_six_kinds_of_day
            =& $this->_manager->getTableInfo('GRN_CBWebSrv_SixKindsOfDay');

        $rowset = new CB_RowSet($tab_six_kinds_of_day);
        $rowset->addCondition('col_property = ' . $property->getOID()
                              . ' AND col_date = \'' . $date->format() . '\'');
        $rowset->setLock(CB_DATABASE_NO_LOCK);

        $row = $rowset->iterate();
        $rowset->destroy();

        if (is_null($row)) {
            $row =& $tab_six_kinds_of_day->newRow();
        }

        $row->set('property', $property);
        $row->set('date', $date);
        $row->set('name', $name);

        return $row;
    }

    /**
     * @param $file
     *
     * @return array    ['event']                       => array    event list
     *                      ['id']                      => string   event id
     *                      ['name']                    => string   event name
     *                      ['property_list']           => array    property list
     *                          [property id]           => array    property data
     *                             ['name']             => string   property name
     *                             ['span']             => int      the term of validity
     *                             ['date_list']        => array
     *                                 [Y-m-d]          => array
     *                                    [some node]
     *                                    ...
     */
    function _parseEventData($file)
    {
        $data_list = [];

        $reader = new XMLReader();
        $reader->open($file);

        $current_node = '';
        $current_property = '';
        $current_date = '';
        $reader->read();
        while (($node_type = $reader->nodeType) != XMLReader::NONE) {
            if ($node_type == XMLReader::ELEMENT) {
                $node_name = $reader->name;
                switch ($node_name) {
                    case 'event':
                        $current_node = $node_name;
                        $event = [];
                        break;
                    case 'id':
                        $reader->read();
                        switch ($current_node) {
                            case 'event':
                                $event['id'] = $reader->value;
                                break;
                            case 'eventproperty':
                                $current_property = $reader->value;
                                break;
                        }
                        break;
                    case 'name':
                        $reader->read();
                        switch ($current_node) {
                            case 'event':
                                $event['name'] = $reader->value;
                                break;
                            case 'eventproperty':
                                $property['name'] = $reader->value;
                                break;
                        }
                        break;
                    case 'eventproperty':
                        if ( ! array_key_exists('property_list', $event)) {
                            $event['property_list'] = [];
                        }
                        $property = [];
                        $current_node = $node_name;
                        break;
                    case 'span':
                        $reader->read();
                        $property['span'] = intval($reader->value);
                        break;
                    case 'date':
                        if ( ! array_key_exists('date_list', $property)) {
                            $property['date_list'] = [];
                        }
                        $date = [];
                        break;
                    case 'day':
                        $reader->read();
                        $current_date = $reader->value;
                        break;
                    default:
                        if ($current_date !== '') {
                            $reader->read();
                            $date[$node_name] = $reader->value;
                        }
                        break;
                }
            } elseif ($node_type == XMLReader::END_ELEMENT) {
                switch ($reader->name) {
                    case 'event':
                        $data_list['event'] = $event;
                        break;
                    case 'eventproperty':
                        $event['property_list'][$current_property] = $property;
                        $current_property = '';
                        break;
                    case 'date':
                        $property['date_list'][$current_date] = $date;
                        $current_date = '';
                        break;
                }
            }
            $reader->read();
        }

        $error = libxml_get_errors();

        $reader->close();

        // warning log
        if (count($error) > 0) {
            // warning log
            require_once('grn/logger.csp');
            $lm = CB_LoggerManager::getInstance();
            $logger =& $lm->getLogger('grn.cbwebsrv');
            $service_name = cb_msg('grn.cbwebsrv', $this->_event_id);
            $error_name = 'parse_error';
            $log_params = [
                'sid'        => $this->_event_id,
                'name'       => $service_name,
                'cache_file' => $file
            ];
            $logger->warningEx($error_name, $log_params);

            require_once('cbwebsrv/error_code.csp');
            cb_throw_error(E_GRN_CBWEBSRV_PARSE_ERROR);
        }

        return $data_list;
    }

    function getServerURL()
    {
        global $G_config_grn;
        $dir_config
            = new CB_LWContainerDirectoryConfig($G_config_grn->get('Application',
            'ini_dir'));
        $config = $dir_config->getConfig('cbwebsrv');

        return $config['rokuyo_url'];
    }

    function setEventData($data_list)
    {
        foreach ($data_list as $event) {
            $now = new CB_TimeStamp();
            $now->unix_ts = time();
            $row =& $this->setSixKindsOfDayEvent($event['name'], $now);
            $row->updateNow();

            $time = $now;

            foreach ($event['property_list'] as $property_id => $property) {
                $time->unix_ts = $now->unix_ts + $property['span'] * 86400;
                $row
                    =& $this->setSixKindsOfDayEventProperty($property_id,
                    $property['name'],
                    $time);
                $row->updateNow();

                foreach ($property['date_list'] as $date => $skod_data) {
                    $cb_date = new CB_Date();
                    $cb_date->parse($date);

                    $this->setSixKindsOfDay($property_id, $cb_date,
                        $skod_data['six_kinds_of_day']);
                }
            }
        }
    }

    /**
     * Delete old data
     */
    function deleteEventData()
    {
        $tab_event = $this->_manager->getTableInfo('GRN_CBWebSrv_event');
        $rowset = new CB_RowSet($tab_event);
        $rowset->addCondition($rowset->queryf("col_event_id = '@S'",
            GRN_CBWEBSRV_EVENT_SIX_KINDS_OF_DAY));

        $rowset->deleteAllMatched();
    }

    /**
     * check is data is received from webservice
     *
     * @return bool
     */
    public function isReceivedData()
    {
        $six_of_day_data = $this->getSixKindsOfDay();

        return ! empty($six_of_day_data);
    }

    public function isAvailable()
    {
        if ( ! grn_cbwebsrv_is_available_service(GRN_CBWEBSRV_SERVICE_SIXKINDSOFDAY)) {
            return false;
        }

        return $this->isExistEventProperties(GRN_CBWEBSRV_EVENT_SIX_KINDS_OF_DAY);
    }
}

