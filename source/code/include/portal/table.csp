<?php

/**
 * ポータル永続化レイヤ
 *
 * @author  Hideyasu, YOSHIDA 2004/10
 * @version 1.0
 * @package grn.portal
 */

require_once('fw/persistent.csp');
require_once('grn/inspection.csp');
require_once('fw/uum_core.csp');

require_once('grn/access_table.csp');
require_once('portal/resources.csp');

/**
 * ポータル/ポートレットアクセス権ベース永続化クラス
 *
 * @package grn.portal
 * @abstract
 */
class GRN_Portal_Base extends GRN_InspectionBase
{
    function __construct(& $row)
    {
        parent::__construct($row, 'grn.portal');
    }

    /**
     * @param string $col_name
     *
     * @return CB_Row|mixed
     */
    public function get($col_name)
    {
        $result = false;

        $table_info = $this->getTableInfo();
        $col_info = $table_info->getColumnInfo($col_name);
        if (is_null($col_info)) {
            return $result;
        }

        if ($col_name == 'group' || $col_name == 'portal'
            || $col_name == 'portlet'
        ) {
            $isKeyExists = array_key_exists(CB_DATABASE_COLUMN_PREFIX
                                            . $col_name,
                $this->__row->_rawdata);
            $id = $isKeyExists
                ? $this->__row->_rawdata[CB_DATABASE_COLUMN_PREFIX . $col_name]
                : null;

            if ( ! is_null($id)) {
                require_once('portal/PortalFacade.csp');
                require_once('fw/i18n.csp');

                $i18n = CB_I18N::getInstance();
                $table_info = $this->getTableInfo();
                $tableManager = $table_info->getTableManager();
                $relationTableName = $col_info['to'];
                $relationTableInfo
                    = $tableManager->getTableInfo($relationTableName);
                $relationTableLock = $relationTableInfo->_lock;

                $portalDAO = new PortalFacade();
                $dataObj = [];
                $dataObj['lock'] = $relationTableLock;
                $dataObj['language'] = $i18n->getCurrentLanguage();

                switch ($col_name) {
                    case 'group':
                        $portletGroupData
                            = $portalDAO->referPortletGroupById($dataObj, $id);
                        $result
                            = $relationTableInfo->getRow($portletGroupData->getId(),
                            $portletGroupData->convertArray());

                        break;

                    case 'portal':
                        $portalData = $portalDAO->referPortalById($dataObj,
                            $id);
                        $result
                            = $relationTableInfo->getRow($portalData->getId(),
                            $portalData->convertArray());

                        break;

                    case 'portlet':
                        $portletData = $portalDAO->referPortletById($dataObj,
                            $id);
                        $result
                            = $relationTableInfo->getRow($portletData->getId(),
                            $portletData->convertArray());

                        break;
                }
            } else {
                $result = parent::get($col_name);
            }
        } else {
            $result = parent::get($col_name);
        }

        return $result;
    }
}

/**
 * ポータル/ポートレットアクセス権ベース永続化クラス
 *
 * @package grn.portal
 * @abstract
 */
class GRN_Portal_Access_Base extends GRN_Portal_Base
{
    function __construct(& $row)
    {
        parent::__construct($row);
    }

    var $_app_id = 'portal';

    /** セキュリティ・モデル */
    var $col_security_model = ['type' => 'int'];
}

/**
 * ポータル永続化クラス
 *
 * @package grn.portal
 */
class GRN_Portal_Portal extends GRN_Portal_Access_Base
{
    function __construct(& $row)
    {
        parent::__construct($row);
    }

    /** ポータル名 */
    var $col_name = ['type' => 'char', 'length' => 100];
    /** ユーザーID（nullならシステムポータル、それ以外はMyポータル） */
    var $col_user = ['type' => 'relation', 'to' => 'CB_User'];
    /** テーマ設定 */
    var $col_theme = ['type' => 'int'];
    /** リストの表示順序 */
    var $col_list_index = ['type' => 'int', 'notnull' => true];
    /** ポータル公開/非公開(1:公開/0:非公開) **/
    var $col_is_open = ['type' => 'int'];

    /** Complex Index **/
    var $idx_user_list_index = ['cols' => ['user', 'list_index']];

    /** reserved columns **/
    var $col_reserve_text1 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text2 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text3 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_int1 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int2 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int3 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_blob1 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob2 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob3 = ['type' => 'blob', 'lazy' => true];
}

/**
 * ポートレット永続化クラス
 *
 * @package grn.portal
 */
class GRN_Portal_Portlet extends GRN_Portal_Base
{
    function __construct(& $row)
    {
        parent::__construct($row);
    }

    var $_app_id = 'portal';

    /** ポートレットの種類 */
    var $col_type = ['type' => 'char', 'length' => 100];
    /** ポートレット名 */
    var $col_name = ['type' => 'char', 'length' => 100];
    /** グループID */
    var $col_group
        = [
            'type' => 'weak_relation',
            'to'   => 'GRN_Portal_PortletGroup'
        ];
    /** ユーザーID（nullならシステムポートレット、それ以外はMyポートレット） */
    var $col_user = ['type' => 'relation', 'to' => 'CB_User'];
    /** リストの表示順序 */
    var $col_list_index = ['type' => 'int', 'notnull' => true];
    /** グループリストの表示順序 */
    var $col_group_list_index = ['type' => 'int', 'notnull' => true];
    /** バージョン */
    var $col_version = ['type' => 'int'];
    /** 設定用テンプレート名 */
    var $col_set_template = ['type' => 'char', 'length' => 100];
    /** 表示用テンプレート名 */
    var $col_view_template = ['type' => 'char', 'length' => 100];
    /** ポートレットの内容 */
    var $col_source = ['type' => 'char', 'length' => 1048575, 'lazy' => true];
    /** Myポータルでの使用許可 (1:許可/0:不許可) **/
    var $col_available_myportal = ['type' => 'int'];
    /** RichEditorの使用/未使用 (1:使用/0:未使用) **/
    var $col_editor = ['type' => 'int'];

    /** Complex Index **/
    var $idx_user_list_index = ['cols' => ['user', 'list_index']];
    var $idx_user_group_list_index = ['cols' => ['user', 'group_list_index']];

    /** reserved columns **/
    var $col_reserve_text1 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text2 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text3 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_int1 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int2 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int3 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_blob1 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob2 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob3 = ['type' => 'blob', 'lazy' => true];
}

/**
 * ログイン直後に表示するポータル永続化クラス
 *
 * @package grn.portal
 */
class GRN_Portal_LoginPortal extends GRN_Portal_Base
{
    function __construct(& $row)
    {
        parent::__construct($row);
    }

    var $_app_id = 'portal';

    /** 組織ID */
    var $col_organization = ['type' => 'relation', 'to' => 'CB_Group'];
    /** ポータルID */
    var $col_portal = ['type' => 'relation', 'to' => 'GRN_Portal_Portal'];

    /** reserved columns **/
    var $col_reserve_text1 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text2 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text3 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_int1 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int2 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int3 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_blob1 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob2 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob3 = ['type' => 'blob', 'lazy' => true];

    /**
     * @param string $col_name
     *
     * @return CB_Row|mixed
     */
    public function get($col_name)
    {
        $result = false;

        $table_info = $this->getTableInfo();
        $col_info = $table_info->getColumnInfo($col_name);
        if (is_null($col_info)) {
            return $result;
        }


        if ($col_name == 'organization') {
            $isKeyExists = array_key_exists(CB_DATABASE_COLUMN_PREFIX
                                            . $col_name,
                $this->__row->_rawdata);
            $id = $isKeyExists
                ? $this->__row->_rawdata[CB_DATABASE_COLUMN_PREFIX . $col_name]
                : null;

            if ( ! is_null($id)) {
                require_once('fw/FwFacade.csp');
                require_once('fw/i18n.csp');

                $i18n = CB_I18N::getInstance();
                $table_info = $this->getTableInfo();
                $tableManager = $table_info->getTableManager();
                $relationTableName = $col_info['to'];
                $relationTableInfo
                    = $tableManager->getTableInfo($relationTableName);
                $relationTableLock = $relationTableInfo->_lock;

                $dao = new FwFacade();
                $dataObj = [];
                $dataObj['lock'] = $relationTableLock;
                $dataObj['language'] = $i18n->getCurrentLanguage();

                $groupData = $dao->referGroupById($dataObj, $id);
                $result = $relationTableInfo->getRow($groupData->getId(),
                    $groupData->convertArray());
            } else {
                $result = parent::get($col_name);
            }
        } else {
            $result = parent::get($col_name);
        }

        return $result;
    }
}

/**
 * ポートレット配置情報永続化クラス
 *
 * @package grn.portal
 */
class GRN_Portal_PortletLayout extends GRN_Portal_Access_Base
{
    function __construct(& $row)
    {
        parent::__construct($row);
    }

    /** ポータルID */
    var $col_portal = ['type' => 'relation', 'to' => 'GRN_Portal_Portal'];
    /** ポートレットID */
    var $col_portlet = ['type' => 'relation', 'to' => 'GRN_Portal_Portlet'];
    /** 段の種類 */
    var $col_column_type = ['type' => 'int'];
    /** 段の配置順序 */
    var $col_list_index = ['type' => 'int', 'notnull' => true];
    /** 設定情報 */
    var $col_settings = ['type' => 'char', 'length' => 65535, 'lazy' => true];
    /** ポートレット表示名 **/
    var $col_display_name = ['type' => 'char', 'length' => 100];
    /** ポートレット公開/非公開(1:公開/0:非公開) **/
    var $col_is_open = ['type' => 'int'];
    /** normal:表示名の設定/category:カテゴリ名のみ表示 **/
    var $col_display_name_mode = ['type' => 'char', 'length' => 100];

    /** Complex Index **/
    var $idx_portal_list_index = ['cols' => ['portal', 'list_index']];

    /** reserved columns **/
    var $col_reserve_text1 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text2 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text3 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_int1 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int2 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int3 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_blob1 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob2 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob3 = ['type' => 'blob', 'lazy' => true];
}

/**
 * ポートレットグループ永続化クラス
 *
 * @package grn.portal
 */
class GRN_Portal_PortletGroup extends GRN_Portal_Base
{
    function __construct(& $row)
    {
        parent::__construct($row);
    }

    var $_app_id = 'portal';

    /** ポートレットグループ名 */
    var $col_name = ['type' => 'char'];
    /** ユーザーID（nullならシステムポートレットグループ、それ以外はMyポートレットグループ） */
    var $col_user = ['type' => 'relation', 'to' => 'CB_User'];
    /** 一覧の表示順序 */
    var $col_list_index = ['type' => 'int', 'notnull' => true];

    /** Complex Index **/
    var $idx_user_list_index = ['cols' => ['user', 'list_index']];

    /** reserved columns **/
    var $col_reserve_text1 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text2 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text3 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_int1 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int2 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int3 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_blob1 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob2 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob3 = ['type' => 'blob', 'lazy' => true];
}


