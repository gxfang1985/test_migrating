<?php

namespace grn\portal\ajax;

use grn\grn\JSONResponse;

class AjaxHandler
{
    /** @var PortalAjaxCommandInterface[] */
    private $commanders = [];
    /** @var array */
    private $input;
    /** @var \grn\grn\JSONResponse */
    private $jsonResponse;

    /**
     * @param array $input
     */
    public function __construct(array $input)
    {
        $this->input = $this->validate($input);
        $this->jsonResponse = JSONResponse::create();
        $this->addCommander(AjaxCommanderConstraints::AJAX_INITIAL_VALIDATION,
            new AjaxInitialValidation($this->input, $this->jsonResponse));
    }

    public function run()
    {
        $command = $this->input["command"];
        if ( ! isset($this->commanders[$command])) {
            // Command not found.
            cb_throw_error(E_COMMON_MISSING_MANDATORY);
        }
        $commander = $this->commanders[$command];
        $commander->execute();
    }

    /**
     * @param string                     $command
     * @param PortalAjaxCommandInterface $commander
     */
    private function addCommander(
        $command,
        PortalAjaxCommandInterface $commander
    ) {
        assert('!isset($this->commanders[$command])');
        $this->commanders[$command] = $commander;
    }

    /**
     * @return AjaxHandler
     */
    public function buildPersonalCommander()
    {
        $this->addCommander(AjaxCommanderConstraints::PERSONAL_AJAX_PORTLET_ADD,
            new personal\AjaxPortletAdd($this->input, $this->jsonResponse));
        $this->addCommander(AjaxCommanderConstraints::PERSONAL_AJAX_PORTLET_DELETE,
            new personal\AjaxPortletDelete($this->input, $this->jsonResponse));
        $this->addCommander(AjaxCommanderConstraints::PERSONAL_AJAX_PORTLET_MOVE,
            new personal\AjaxPortletMove($this->input, $this->jsonResponse));
        $this->addCommander(AjaxCommanderConstraints::PERSONAL_AJAX_PORTLET_ORDER,
            new personal\AjaxPortletOrder($this->input, $this->jsonResponse));
        $this->addCommander(AjaxCommanderConstraints::PERSONAL_AJAX_POST_PORTAL_TITLE_MODIFY,
            new personal\AjaxPostPortalTitleModify($this->input,
                $this->jsonResponse));
        $this->addCommander(AjaxCommanderConstraints::PERSONAL_AJAX_POST_PORTLET_TITLE_MODIFY,
            new personal\AjaxPostPortletTitleModify($this->input,
                $this->jsonResponse));
        $this->addCommander(AjaxCommanderConstraints::PERSONAL_AJAX_SHOW_PORTAL_TITLE_MODIFY,
            new personal\AjaxShowPortalTitleModify($this->input,
                $this->jsonResponse));
        $this->addCommander(AjaxCommanderConstraints::PERSONAL_AJAX_SHOW_PORTLET_TITLE_MODIFY,
            new personal\AjaxShowPortletTitleModify($this->input,
                $this->jsonResponse));

        return $this;
    }

    /**
     * @return AjaxHandler
     */
    public function buildOperationCommander()
    {
        $this->addCommander(AjaxCommanderConstraints::OPERATION_AJAX_PORTLET_ADD,
            new operation\AjaxPortletAdd($this->input, $this->jsonResponse));
        $this->addCommander(AjaxCommanderConstraints::OPERATION_AJAX_PORTLET_DELETE,
            new operation\AjaxPortletDelete($this->input, $this->jsonResponse));
        $this->addCommander(AjaxCommanderConstraints::OPERATION_AJAX_PORTLET_MOVE,
            new operation\AjaxPortletMove($this->input, $this->jsonResponse));
        $this->addCommander(AjaxCommanderConstraints::OPERATION_AJAX_PORTLET_OPEN,
            new operation\AjaxPortletOpen($this->input, $this->jsonResponse));
        $this->addCommander(AjaxCommanderConstraints::OPERATION_AJAX_PORTLET_OPEN_ALL,
            new operation\AjaxPortletOpenAll($this->input,
                $this->jsonResponse));
        $this->addCommander(AjaxCommanderConstraints::OPERATION_AJAX_PORTLET_ORDER,
            new operation\AjaxPortletOrder($this->input, $this->jsonResponse));
        $this->addCommander(AjaxCommanderConstraints::OPERATION_AJAX_POST_PORTAL_TITLE_MODIFY,
            new operation\AjaxPostPortalTitleModify($this->input,
                $this->jsonResponse));
        $this->addCommander(AjaxCommanderConstraints::OPERATION_AJAX_POST_PORTLET_TITLE_MODIFY,
            new operation\AjaxPostPortletTitleModify($this->input,
                $this->jsonResponse));
        $this->addCommander(AjaxCommanderConstraints::OPERATION_AJAX_SHOW_PORTAL_TITLE_MODIFY,
            new operation\AjaxShowPortalTitleModify($this->input,
                $this->jsonResponse));
        $this->addCommander(AjaxCommanderConstraints::OPERATION_AJAX_SHOW_PORTLET_TITLE_MODIFY,
            new operation\AjaxShowPortletTitleModify($this->input,
                $this->jsonResponse));

        return $this;
    }

    /**
     * @return AjaxHandler
     */
    public function buildSystemCommander()
    {
        $this->addCommander(AjaxCommanderConstraints::SYSTEM_AJAX_PORTAL_OPEN,
            new system\AjaxPortalOpen($this->input, $this->jsonResponse));
        $this->addCommander(AjaxCommanderConstraints::SYSTEM_AJAX_PORTLET_ADD,
            new system\AjaxPortletAdd($this->input, $this->jsonResponse));
        $this->addCommander(AjaxCommanderConstraints::SYSTEM_AJAX_PORTLET_DELETE,
            new system\AjaxPortletDelete($this->input, $this->jsonResponse));
        $this->addCommander(AjaxCommanderConstraints::SYSTEM_AJAX_PORTLET_MOVE,
            new system\AjaxPortletMove($this->input, $this->jsonResponse));
        $this->addCommander(AjaxCommanderConstraints::SYSTEM_AJAX_PORTLET_OPEN,
            new system\AjaxPortletOpen($this->input, $this->jsonResponse));
        $this->addCommander(AjaxCommanderConstraints::SYSTEM_AJAX_PORTLET_OPEN_ALL,
            new system\AjaxPortletOpenAll($this->input, $this->jsonResponse));
        $this->addCommander(AjaxCommanderConstraints::SYSTEM_AJAX_PORTLET_ORDER,
            new system\AjaxPortletOrder($this->input, $this->jsonResponse));
        $this->addCommander(AjaxCommanderConstraints::SYSTEM_AJAX_POST_PORTAL_TITLE_MODIFY,
            new system\AjaxPostPortalTitleModify($this->input,
                $this->jsonResponse));
        $this->addCommander(AjaxCommanderConstraints::SYSTEM_AJAX_POST_PORTLET_TITLE_MODIFY,
            new system\AjaxPostPortletTitleModify($this->input,
                $this->jsonResponse));
        $this->addCommander(AjaxCommanderConstraints::SYSTEM_AJAX_SHOW_PORTAL_TITLE_MODIFY,
            new system\AjaxShowPortalTitleModify($this->input,
                $this->jsonResponse));
        $this->addCommander(AjaxCommanderConstraints::SYSTEM_AJAX_SHOW_PORTLET_TITLE_MODIFY,
            new system\AjaxShowPortletTitleModify($this->input,
                $this->jsonResponse));
        $this->addCommander(AjaxCommanderConstraints::SYSTEM_AJAX_TEMPLATE_PORTLET_ADD,
            new system\AjaxTemplatePortletAdd($this->input,
                $this->jsonResponse));
        $this->addCommander(AjaxCommanderConstraints::SYSTEM_AJAX_TEMPLATE_PORTLET_DELETE,
            new system\AjaxTemplatePortletDelete($this->input,
                $this->jsonResponse));
        $this->addCommander(AjaxCommanderConstraints::SYSTEM_AJAX_TEMPLATE_PORTLET_MOVE,
            new system\AjaxTemplatePortletMove($this->input,
                $this->jsonResponse));
        $this->addCommander(AjaxCommanderConstraints::SYSTEM_AJAX_TEMPLATE_PORTLET_ORDER,
            new system\AjaxTemplatePortletOrder($this->input,
                $this->jsonResponse));
        $this->addCommander(AjaxCommanderConstraints::SYSTEM_AJAX_TEMPLATE_POST_PORTLET_TITLE_MODIFY,
            new system\AjaxTemplatePostPortletTitleModify($this->input,
                $this->jsonResponse));
        $this->addCommander(AjaxCommanderConstraints::SYSTEM_AJAX_TEMPLATE_SHOW_PORTLET_TITLE_MODIFY,
            new system\AjaxTemplateShowPortletTitleModify($this->input,
                $this->jsonResponse));

        return $this;
    }

    /**
     * @param array $input
     *
     * @return array
     */
    private function validate(array $input)
    {
        $inputArray = json_decode($input['json'], true);
        if (is_null($inputArray)) {
            cb_throw_error(E_COMMON_INVALID_JSON);
        }

        if ( ! isset($inputArray["command"])
             || strlen($inputArray["command"]) === 0
        ) {
            require_once('fw/error_code.csp');
            cb_throw_error(E_COMMON_MISSING_MANDATORY);
        }

        return $inputArray;
    }
}
