<?php

namespace grn\portal\ajax\personal;


use grn\grn\JSONResponse;
use grn\portal\ajax\PortalAjaxCommandInterface;

require_once('portal/portal_logic.csp');
require_once('portal/inspection.csp');

class AjaxPostPortalTitleModify implements PortalAjaxCommandInterface
{
    /** @var array */
    private $input;
    /** @var JSONResponse */
    private $jsonResponse;

    /**
     * @param array        $input
     * @param JSONResponse $jsonResponse
     */
    public function __construct(array $input, JSONResponse $jsonResponse)
    {
        $this->input = $input;
        $this->jsonResponse = $jsonResponse;
    }

    /**
     */
    public function execute()
    {
        $portalId = cb_at($this->input, "portal_id");
        $title = cb_at($this->input, "title");
        if (is_null($portalId) || is_null($title)) {
            cb_throw_error(E_COMMON_MISSING_MANDATORY);
        }

        // Evaluate Access
        require_once('portal/access_logic.csp');
        $myPortalAccessLogic = \GRN_Portal_MyPortalAccessLogic::getInstance();
        $myPortalAccessLogic->evaluateAccess();

        $myPortalLogic = \GRN_Portal_MyPortalLogic::getInstance();

        //Get Previous Portal Name for Inspection Message
        $portal = $myPortalLogic->get($portalId);
        $prevName = $portal->get('name');

        // Set Portal Name
        $portal->set('name', $title);

        $inspection = \GRN_Portal_My_Portal_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            //Write Inspection Message
            $message_type = 'my_portal_modify';
            $message_args = [
                'pid'              => $portal->getOID(),
                'prev_portal_name' => $prevName,
                'next_portal_name' => $portal->get('name'),
            ];
            $inspection->record($message_type, $message_args);
        }

        $this->jsonResponse->response(['title' => $title]);
    }
}
