<?php

namespace grn\portal\ajax;

use grn\grn\JSONResponse;
use grn\portal\PortalLayout;

class AjaxInitialValidation implements PortalAjaxCommandInterface
{
    /** @var array */
    private $input;
    /** @var JSONResponse */
    private $jsonResponse;
    /** @var string */
    private $page;
    /** @var string */
    private $handler;

    /**
     * @param array        $input
     * @param JSONResponse $jsonResponse
     */
    public function __construct(array $input, JSONResponse $jsonResponse)
    {
        $this->input = $input;
        $this->jsonResponse = $jsonResponse;
    }

    /**
     */
    public function execute()
    {
        $portalId = cb_at($this->input, 'portal_id');
        $currentPortletLayout = cb_at($this->input, 'portlet_layout');
        $currentPortalLayout = cb_at($this->input, 'portal_layout', '0');
        $rawPage = cb_at($this->input, 'page');
        if (is_null($portalId) || is_null($currentPortletLayout)
            || is_null($rawPage)
        ) {
            cb_throw_error(E_COMMON_MISSING_MANDATORY);
        }

        $urlArray = explode('/', $rawPage);
        $this->page = array_pop($urlArray);
        $this->handler = array_pop($urlArray);
        if ($this->handler === 'system' && $portalId == '0') {
            // Get My Portlet Template ID
            require_once("portal/system_logic.csp");
            $systemLogic = \GRN_Portal_SystemLogic::getInstance();
            $portalId = $systemLogic->getMyPortaltemplate();
        }

        $portalLogic = $this->getPortalLogic();
        $columnItems = $portalLogic->getColumnItems($portalId);

        $validate = $this->validatePortletLayout($currentPortletLayout,
            $columnItems);

        if ($validate) {
            $validate = $this->validatePortalLayout($portalId,
                $currentPortalLayout);
        }

        $this->jsonResponse->response(['validate' => $validate]);
    }

    /**
     * @return \GRN_Portal_MyPortalLogic|\GRN_Portal_OperationPortalLogic|\GRN_Portal_PortalLogicBase|\GRN_Portal_SystemPortalLogic
     */
    private function getPortalLogic()
    {
        switch ($this->handler) {
            case 'personal':
                return \GRN_Portal_MyPortalLogic::getInstance();
            case 'operation':
                return \GRN_Portal_OperationPortalLogic::getInstance();
            case 'system':
                return \GRN_Portal_SystemPortalLogic::getInstance();
            default:
                return \GRN_Portal_PortalLogicBase::getInstance();
        }
    }

    /**
     * @param array $portletLayout
     * @param array $columnItems
     *
     * @return bool
     */
    private function validatePortletLayout($portletLayout, $columnItems)
    {
        foreach ($columnItems as $columnType => $layoutItems) {
            foreach ($layoutItems as $index => $layout) {
                /** @var \GRN_Portal_PortletLayout $layout */
                if ($this->shouldCheckAvailableForMyPortal()
                    && $layout->get('portlet')
                              ->get(GRN_PRTL_PROPERTY_AVAILABLE_MYPORTAL) != '1'
                ) {
                    // Exclude unavailable portlet
                    continue;
                }
                if ( ! isset($portletLayout[$columnType][$index])
                     || $portletLayout[$columnType][$index]
                        !== $layout->getOID()
                ) {
                    return false;
                }
                unset($portletLayout[$columnType][$index]);
            }
        }

        foreach ($portletLayout as $currentColumn) {
            if (count($currentColumn) > 0) {
                // a portlet is deleted
                return false;
            }
        }

        return true;
    }

    /**
     * @param string $portalId
     * @param string $currentPortalLayout
     *
     * @return bool
     */
    private function validatePortalLayout($portalId, $currentPortalLayout)
    {
        $portalLayout = new PortalLayout($portalId);
        $layoutSetting = $portalLayout->getLayoutSettings();
        if (empty($layoutSetting)) {
            return $currentPortalLayout === '0';
        } else {
            return '100_' . $currentPortalLayout === implode('_',
                    $portalLayout->getLayoutSettings());
        }
    }

    private function shouldCheckAvailableForMyPortal()
    {
        return ($this->handler === 'personal'
                || strpos($this->page, 'base_view') !== false);
    }
}
