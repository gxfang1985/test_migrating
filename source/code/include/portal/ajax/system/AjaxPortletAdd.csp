<?php

namespace grn\portal\ajax\system;

use grn\grn\access\service\AppAccess;
use grn\grn\JSONResponse;
use grn\portal\ajax\PortalAjaxCommandInterface;

require_once('portal/portal_logic.csp');
require_once('portal/system_portlet_logic.csp');
require_once("grn/smarty.csp");
require_once('portal/error_code.csp');

class AjaxPortletAdd implements PortalAjaxCommandInterface
{
    /** @var array */
    private $input;
    /** @var JSONResponse */
    private $jsonResponse;

    /**
     * @param array        $input
     * @param JSONResponse $jsonResponse
     */
    public function __construct(array $input, JSONResponse $jsonResponse)
    {
        $this->input = $input;
        $this->jsonResponse = $jsonResponse;
    }

    /**
     */
    public function execute()
    {
        $this->jsonResponse->validateAjaxAccess();

        $portalId = cb_at($this->input, 'portal_id');
        $portletType = cb_at($this->input, 'portlet_type');
        $position = cb_at($this->input, 'position');
        $index = cb_at($this->input, 'index');
        if (is_null($portalId) || is_null($portletType) || is_null($position)
            || is_null($index)
        ) {
            cb_throw_error(E_COMMON_MISSING_MANDATORY);
        }

        $systemPortalLogic = \GRN_Portal_SystemPortalLogic::getInstance();
        $app_id
            = $systemPortalLogic->getApplicationIdFromPorletType($portletType);
        AppAccess::checkAccess($app_id, cb_get_login_user()->getOID());

        $columnItems
            = $systemPortalLogic->getColumnItemsWithoutPrivilege($portalId);
        $columnItem = null;
        switch ($position) {
            case 'top':
                $columnItem =& $columnItems['0'];
                break;
            case 'left':
                $columnItem =& $columnItems['1'];
                break;
            case 'center':
                $columnItem =& $columnItems['2'];
                break;
            case 'right':
                $columnItem =& $columnItems['3'];
                break;
        }

        $newColumnItem = [];
        if (is_array($columnItem)) {
            $allCount = count($columnItem) + 1;
            for ($i = 0; $i < $allCount; $i++) {
                if ($i == $index) {
                    $newColumnItem[$i] = [$portletType => null];
                } else {
                    $newColumnItem[$i] = current($columnItem);
                    next($columnItem);
                }
            }
        } else {
            $newColumnItem[] = [$portletType => null];
        }
        $columnItem = $newColumnItem;
        $layoutList = $systemPortalLogic->setColumnItems($portalId,
            $columnItems);
        if ( ! is_array($layoutList) || count($layoutList) === 0) {
            cb_throw_error(E_GRN_PRTL_PORTLET_LIST_NOT_FOUND);
        }

        //Get Portal Name
        $portal = $systemPortalLogic->get($portalId);
        $portalName = $portal->get('name');

        $layoutId = key($layoutList);
        $layout = $layoutList[$layoutId];

        $portlet = $layout->get(GRN_PRTL_PROPERTY_PORTLET);
        $portletId = $portlet->getOID();
        require_once('portal/portlet_util.csp');
        $portletName = \GRN_Portal_PortletUtil::getPortletName($portlet,
            $layout);

        $portletLayoutLogic = \GRN_Portal_PortletLayoutLogic::getInstance();
        //get display name mode
        $displayNameMode
            = $portletLayoutLogic->getPortletLayoutDisplayNameMode($layoutId);

        //Check Inspection Message Enabled
        require_once('portal/inspection.csp');
        $inspection = \GRN_Portal_System_Portal_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            //Write Inspection Message
            $message_type = 'portal_portlet_add';
            $message_args = [
                'pid'          => $portalId,
                'plid'         => $layoutId,
                'ppid'         => $portletId,
                'portal_name'  => $portalName,
                'portlet_name' => $portletName,
                'layout'       => $position
            ];
            $inspection->record($message_type, $message_args);
        }

        // instantiate an Smarty object
        $t = new \GRN_Smarty;
        $t->assign('key', $layoutId);
        $t->assign('portal_id', $portalId);
        $t->assign('item', [
            'pid'               => $portalId,
            'ppid'              => $portletId,
            'plid'              => $layoutId,
            'name'              => $portletName,
            'class'             => implode('_',
                array_slice(explode('.', $portlet->get('type')), 1)),
            'is_open'           => $layout->get('is_open'),
            'set_template'      => $portlet->get('set_template'),
            'view_template'     => $portlet->get('view_template'),
            'title'             => $portletName,
            'type'              => $portlet->get('type'),
            'display_name_mode' => $displayNameMode
        ]);
        $t->assign('mode', 'system');
        $t->display('portal/_portlet_row.tpl');
    }
}
