<?php

namespace grn\portal\ajax\system;


use grn\grn\JSONResponse;
use grn\portal\ajax\PortalAjaxCommandInterface;

require_once('portal/portal_logic.csp');
require_once('portal/error_code.csp');

class AjaxTemplatePortletOrder implements PortalAjaxCommandInterface
{
    /** @var array */
    private $input;
    /** @var JSONResponse */
    private $jsonResponse;

    /**
     * @param array        $input
     * @param JSONResponse $jsonResponse
     */
    public function __construct(array $input, JSONResponse $jsonResponse)
    {
        $this->input = $input;
        $this->jsonResponse = $jsonResponse;
    }

    /**
     */
    public function execute()
    {
        $this->jsonResponse->validateAjaxAccess();

        $portalId = cb_at($this->input, 'portal_id');
        $layoutIds = cb_at($this->input, 'layout_ids');
        $position = cb_at($this->input, 'position');
        if (is_null($portalId) || is_null($layoutIds) || ! is_array($layoutIds)
            || is_null($position)
        ) {
            cb_throw_error(E_COMMON_MISSING_MANDATORY);
        }
        if ($portalId == '0') {
            // Get My Portlet Template ID
            require_once("portal/system_logic.csp");
            $systemLogic = \GRN_Portal_SystemLogic::getInstance();
            $portalId = $systemLogic->getMyPortaltemplate();
        }

        //Get Column Item
        $systemPortalLogic = \GRN_Portal_SystemPortalLogic::getInstance();
        $columnItems
            = $systemPortalLogic->getColumnItemsWithoutPrivilege($portalId);
        $columnItem = [];
        switch ($position) {
            case 'top':
                $columnItem =& $columnItems['0'];
                break;
            case 'left':
                $columnItem =& $columnItems['1'];
                break;
            case 'center':
                $columnItem =& $columnItems['2'];
                break;
            case 'right':
                $columnItem =& $columnItems['3'];
                break;
        }
        /** @var \GRN_Portal_PortletLayout[] $layoutItems */
        $layoutItems =& $columnItem;

        //Change Order List
        $resultColumnItem = [];
        $orderKeyList = array_flip($layoutIds);
        foreach ($layoutItems as $layoutKey => $layout) {
            $layoutId = $layout->getOID();
            if (array_key_exists($layoutId, $orderKeyList)) {
                $orderKey = $orderKeyList[$layoutId];
                $resultColumnItem[$orderKey] = $layoutItems[$layoutKey];
            }
        }
        $columnItem = $resultColumnItem;
        ksort($columnItem);

        // Set Target Portal Column Items
        $systemPortalLogic->setColumnItems($portalId, $columnItems, false);

        //Check Inspection Message Enabled
        require_once('portal/inspection.csp');
        $inspection = \GRN_Portal_Template_Portal_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            //Write Inspection Message
            $message_type = 'template_portal_portlet_order';
            $message_args = [];
            $inspection->record($message_type, $message_args);
        }

    }
}
