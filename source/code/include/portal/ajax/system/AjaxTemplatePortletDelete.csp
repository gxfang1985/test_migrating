<?php

namespace grn\portal\ajax\system;


use grn\grn\JSONResponse;
use grn\portal\ajax\PortalAjaxCommandInterface;

require_once('portal/portal_logic.csp');
require_once('portal/error_code.csp');

class AjaxTemplatePortletDelete implements PortalAjaxCommandInterface
{
    /** @var array */
    private $input;
    /** @var JSONResponse */
    private $jsonResponse;

    /**
     * @param array        $input
     * @param JSONResponse $jsonResponse
     */
    public function __construct(array $input, JSONResponse $jsonResponse)
    {
        $this->input = $input;
        $this->jsonResponse = $jsonResponse;
    }

    /**
     */
    public function execute()
    {
        $this->jsonResponse->validateAjaxAccess();

        $portalId = cb_at($this->input, 'portal_id');
        $layoutId = cb_at($this->input, 'layout_id');
        if (is_null($portalId) || is_null($layoutId)) {
            cb_throw_error(E_COMMON_MISSING_MANDATORY);
        }
        if ($portalId == '0') {
            // Get My Portlet Template ID
            require_once("portal/system_logic.csp");
            $systemLogic = \GRN_Portal_SystemLogic::getInstance();
            $portalId = $systemLogic->getMyPortaltemplate();
        }

        $systemPortalLogic = \GRN_Portal_SystemPortalLogic::getInstance();
        $columnItems
            = $systemPortalLogic->getColumnItemsWithoutPrivilege($portalId);

        $targetPortlet = null;
        $targetLayout = null;
        foreach (array_keys($columnItems) as $columnKey) {
            /** @var \GRN_Portal_PortletLayout[] $layoutItems */
            $layoutItems =& $columnItems[$columnKey];
            foreach ($layoutItems as $layoutKey => $layout) {
                if ($layoutId == $layout->getOID()) {
                    $targetLayout = $layout;
                    $targetPortlet = $layout->get(GRN_PRTL_PROPERTY_PORTLET);
                    // Delete portlet from clumnItems
                    unset($layoutItems[$layoutKey]);
                    break 2;
                }
            }
        }

        require_once('portal/portlet_util.csp');
        if ( ! \GRN_Portal_PortletUtil::existTargetPortlet($targetPortlet,
            $targetLayout)
        ) {
            return;
        }

        //Check Inspection Message Enabled
        require_once('portal/inspection.csp');
        $inspection = \GRN_Portal_Template_Portal_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            //Get Portal Name
            $systemPortal = $systemPortalLogic->get($portalId);
            $portalName = $systemPortal->get('name');
            $portletName
                = \GRN_Portal_PortletUtil::getPortletName($targetPortlet,
                $targetLayout);

            //Write Inspection Message
            $messageType = 'template_portal_portlet_delete';
            $messageArgs = [
                'pid'          => $portalId,
                'plid'         => $layoutId,
                'ppid'         => $targetPortlet->getOID(),
                'portal_name'  => $portalName,
                'portlet_name' => $portletName
            ];
            $inspection->record($messageType, $messageArgs);
        }

        // Set Target Portal Column Items
        $systemPortalLogic->setColumnItems($portalId, $columnItems, false);
    }
}
