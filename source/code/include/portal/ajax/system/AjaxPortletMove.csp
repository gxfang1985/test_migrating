<?php

namespace grn\portal\ajax\system;


use grn\grn\JSONResponse;
use grn\portal\ajax\PortalAjaxCommandInterface;

require_once('portal/portal_logic.csp');
require_once('portal/inspection.csp');
require_once('portal/error_code.csp');

class AjaxPortletMove implements PortalAjaxCommandInterface
{
    /** @var array */
    private $input;
    /** @var JSONResponse */
    private $jsonResponse;

    /**
     * @param array        $input
     * @param JSONResponse $jsonResponse
     */
    public function __construct(array $input, JSONResponse $jsonResponse)
    {
        $this->input = $input;
        $this->jsonResponse = $jsonResponse;
    }

    /**
     */
    public function execute()
    {
        $this->jsonResponse->validateAjaxAccess();

        $portalId = cb_at($this->input, 'portal_id');
        $layoutId = cb_at($this->input, 'layout_id');
        $targetPosition = cb_at($this->input, 'target_position');
        $originalPosition = cb_at($this->input, 'original_position');
        $index = cb_at($this->input, 'index');
        if (is_null($portalId) || is_null($layoutId) || is_null($targetPosition)
            || is_null($originalPosition)
            || is_null($index)
        ) {
            cb_throw_error(E_COMMON_MISSING_MANDATORY);
        }

        // Get Target Column Item
        $systemPortalLogic = \GRN_Portal_SystemPortalLogic::getInstance();
        $columnItems
            = $systemPortalLogic->getColumnItemsWithoutPrivilege($portalId);

        // Get reference of columns
        $targetColumnItem = null;
        switch ($targetPosition) {
            case 'top':
                $targetColumnItem =& $columnItems['0'];
                break;
            case 'left':
                $targetColumnItem =& $columnItems['1'];
                break;
            case 'center':
                $targetColumnItem =& $columnItems['2'];
                break;
            case 'right':
                $targetColumnItem =& $columnItems['3'];
                break;
        }

        switch ($originalPosition) {
            case 'top':
                $originalColumnItem =& $columnItems['0'];
                break;
            case 'left':
                $originalColumnItem =& $columnItems['1'];
                break;
            case 'center':
                $originalColumnItem =& $columnItems['2'];
                break;
            case 'right':
                $originalColumnItem =& $columnItems['3'];
                break;
            default:
                $originalColumnItem = [];
        }

        // Remove target layout from original column
        $targetLayout = null;
        /** @var \GRN_Portal_PortletLayout[] $originalColumnItem */
        foreach ($originalColumnItem as $layoutKey => $layout) {
            if ($layout->getOID() == $layoutId) {
                $targetLayout = $layout;
                unset($originalColumnItem[$layoutKey]);
            }
        }

        // Add target layout to target column
        $newColumnItem = [];
        if (is_array($targetColumnItem)) {
            $count = count($targetColumnItem) + 1;
            for ($i = 0; $i < $count; $i++) {
                if ($i == $index - 1) {
                    $newColumnItem[$i] = $targetLayout;
                } else {
                    $newColumnItem[$i] = current($targetColumnItem);
                    next($targetColumnItem);
                }
            }
        } else {
            $newColumnItem[] = $targetLayout;
        }
        $targetColumnItem = $newColumnItem;

        // Set Target Portal Column Items
        $systemPortalLogic->setColumnItems($portalId, $columnItems, false);

        //Check Inspection Message Enabled
        $inspection = \GRN_Portal_System_Portal_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            //Get Portal Name
            $portal = $systemPortalLogic->get($portalId);
            $portalName = $portal->get('name');

            //Get Portlet Name
            $portlet = $targetLayout->get(GRN_PRTL_PROPERTY_PORTLET);
            $portletId = $portlet->getOID();;
            require_once('portal/portlet_util.csp');
            $portletName = \GRN_Portal_PortletUtil::getPortletName($portlet,
                $targetLayout);

            //Write Inspection Message
            $message_type = 'portal_portlet_move';
            $message_args = [
                'pid'          => $portalId,
                'plid'         => $layoutId,
                'ppid'         => $portletId,
                'portal_name'  => $portalName,
                'portlet_name' => $portletName,
                'layout'       => $targetPosition
            ];
            $inspection->record($message_type, $message_args);
        }
    }
}
