<?php
/**
 * Portal Application Portal Information Manager Base Class
 *
 * @author  Yuichi, Nakamura 2005/7
 * @version 1.0
 * @package grn.portal
 */

/** Portal Application **/
require_once('portal/resources.csp');
require_once('portal/portal_logic.csp');
require_once('grn/application.csp');

/**
 * Portal Information Manager Base Class
 *
 * @package grn.portal
 */
class GRN_Portal_Portal_Information_Manager_Base
{
    /** Table Name **/
    var $_table_name = null;

    /** Portal List **/
    var $_list = [];

    /** Portal Column List **/
    var $_column_list = [];

    /** Portal Column Name List **/
    var $_column_name_list = [];

    /**
     * Constructor
     */
    function __construct()
    {
        $this->_table_name = 'tab_grn_portal_portal';
    }

    /** @var self */
    private static $_instance = null;

    /**
     * @return GRN_Portal_Portal_Information_Manager_Base
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Database
     *
     * @return CB_DatabaseConnection
     */
    function _getDatabase()
    {
        static $database = null;
        if (is_null($database)) {
            $app_locator = GRN_ApplicationLocator::instance();
            $database = $app_locator->getConnection('portal');
        }

        return $database;
    }

    /**
     * Get Column List
     *
     * @param string $class_name
     *
     * @return array  //GRN_Portal_Portal Table Information
     */
    function &_getColumnList($class_name = null)
    {
        require_once('portal/table.csp');
        if (is_null($class_name)) {
            $column_list = get_class_vars(GRN_PRTL_TABLE_PORTAL);
            $table_name = null;
        } else {
            $column_list = get_class_vars($class_name);
            $table_name = $this->_getTableName($class_name);
            switch ($table_name) {
                case 'tab_grn_portal_portal':
                    $table_name = 'portal';
                    break;
                case 'tab_grn_portal_portletlayout':
                    $table_name = 'layout';
                    break;
                case 'tab_grn_portal_portlet':
                    $table_name = 'portlet';
                    break;
                default:
                    $table_name = null;
                    break;
            }
        }
        foreach (array_keys($column_list) as $column_name) {
            if (strpos($column_name, 'col_') === 0
                && strpos($column_name, 'col_reserve') !== 0
            ) {
                if (is_null($table_name)) {
                    $column_name_list[] = $column_name;
                } else {
                    $column_name_list[] = sprintf('%s.%s %s_%s', $table_name,
                        $column_name, $table_name, $column_name);
                }
            }
        }
        if (is_null($table_name)) {
            $column_name_list[] = '_id';
        } else {
            $column_name_list[] = sprintf('%s._id %s_id', $table_name,
                $table_name);
        }

        return $column_name_list;
    }

    /**
     * Get Table Name
     *
     * @param string $class_name
     *
     * @return string  $table_name
     */
    function _getTableName($class_name)
    {
        $table_name = sprintf('tab_%s', strtolower($class_name));

        return $table_name;
    }

    /**
     * Get Portal Column List
     *
     * @access  public
     *
     * @param  int     $portal_id //Portlet ID
     * @param bool|int $lock_mode //Lock Mode
     * @param  bool    $refresh   //Refresh Cache
     *
     * @return array  $column_list               //Portal Column Information List
     */
    function &getColumnList(
        $portal_id,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $refresh = false
    ) {
        $logic = GRN_Portal_PortalLogicBase::getInstance();
        $portal_column_list = [];

        //Get Portal Column List From Cache
        $cached = false;
        if ( ! $refresh) {
            if (array_key_exists($portal_id, $this->_column_list)) {
                if (is_array($this->_column_list[$portal_id])) {
                    $portal_column_list =& $this->_column_list[$portal_id];
                    $cached = true;
                }
            }
        }

        //Get Portal List From Database
        if ( ! $cached || $refresh) {
            require_once('fw/i18n.csp');
            $i18n = CB_I18N::getInstance();
            $language = $i18n->getCurrentLanguage();

            //Get Database
            $database = $this->_getDatabase();

// portal, portlet, portletlayout の情報を全て取得してきている。必要なのかどうか未調査。
// 次回のリファクタリングで要調査。全て取得する必要がないことが分かれば、各DAOクラスに分解して必要なDAOをコールするべき。
// 今回は現状のクエリをそのままにして、多言語テーブルをLEFT JOINさせている。
//            //Create Column List
//            $portal_column_list = $this->_getColumnList(GRN_PRTL_TABLE_PORTAL);
//            $layout_column_list = $this->_getColumnList(GRN_PRTL_TABLE_PORTLET_LAYOUT);
//            $portlet_column_list = $this->_getColumnList(GRN_PRTL_TABLE_PORTLET);
//            $all_column_list = array_merge($portal_column_list, $layout_column_list, $portlet_column_list);
//            $column_list = implode(',', $all_column_list);
//
//            //Create Table Name
//            $table_name_portal = $this->_getTableName(GRN_PRTL_TABLE_PORTAL);
//            $table_name_portlet = $this->_getTableName(GRN_PRTL_TABLE_PORTLET);
//            $table_name_portlet_layout = $this->_getTableName(GRN_PRTL_TABLE_PORTLET_LAYOUT);
//
//            //Create Order By Column
//            $order_by = 'ORDER BY layout.col_list_index';
//
//            //Create Join
//            $join_list = array();
//            //文字列tab_...
//            $join_list[] = sprintf('%s layout ON portal._id = layout.col_portal', $table_name_portlet_layout);
//            $join_list[] = sprintf('%s portlet ON layout.col_portlet = portlet._id', $table_name_portlet);
//            $join = implode(' LEFT JOIN ', $join_list);
//            if ($join)
//            {
//                $join = 'LEFT JOIN ' . $join;
//            }
//
//            //Create Condition
//            $condition_list = array();
//            $condition_list[] = sprintf("portal._id = '%d'", $database->escape($portal_id));
//            $condition = implode(' AND ', $condition_list);
//            if ($condition)
//            {
//                $condition = 'WHERE ' . $condition;
//            }
//
//            //Create Query
//            $query = sprintf('SELECT %s FROM %s portal %s %s %s', $column_list, $this->_table_name, $join, $condition, $order_by);

            //Create Query
            $query
                = "SELECT IFNULL(pl.col_name, portal.col_name) AS portal_col_name";
            $query = $query . ", portal.col_user portal_col_user";
            $query = $query . ", portal.col_theme portal_col_theme";
            $query = $query . ", portal.col_list_index portal_col_list_index";
            $query = $query . ", portal.col_is_open portal_col_is_open";
            $query = $query
                     . ", portal.col_security_model portal_col_security_model";
            $query = $query . ", portal.col_creator portal_col_creator";
            $query = $query
                     . ", portal.col_creator_name portal_col_creator_name";
            $query = $query
                     . ", portal.col_creator_foreign_key portal_col_creator_foreign_key";
            $query = $query . ", portal.col_ctime portal_col_ctime";
            $query = $query . ", portal.col_modifier portal_col_modifier";
            $query = $query
                     . ", portal.col_modifier_name portal_col_modifier_name";
            $query = $query
                     . ", portal.col_modifier_foreign_key portal_col_modifier_foreign_key";
            $query = $query . ", portal.col_mtime portal_col_mtime";
            $query = $query . ", portal._id portal_id";
            $query = $query . ", layout.col_portal layout_col_portal";
            $query = $query . ", layout.col_portlet layout_col_portlet";
            $query = $query . ", layout.col_column_type layout_col_column_type";
            $query = $query . ", layout.col_list_index layout_col_list_index";
            $query = $query . ", layout.col_settings layout_col_settings";
            $query = $query
                     . ", IFNULL(plyl.col_name, layout.col_display_name) AS layout_col_display_name";
            $query = $query . ", layout.col_is_open layout_col_is_open";
            $query = $query
                     . ", layout.col_security_model layout_col_security_model";
            $query = $query . ", layout.col_creator layout_col_creator";
            $query = $query
                     . ", layout.col_creator_name layout_col_creator_name";
            $query = $query
                     . ", layout.col_creator_foreign_key layout_col_creator_foreign_key";
            $query = $query . ", layout.col_ctime layout_col_ctime";
            $query = $query . ", layout.col_modifier layout_col_modifier";
            $query = $query
                     . ", layout.col_modifier_name layout_col_modifier_name";
            $query = $query
                     . ", layout.col_modifier_foreign_key layout_col_modifier_foreign_key";
            $query = $query . ", layout.col_mtime layout_col_mtime";
            $query = $query . ", layout._id layout_id";
            $query = $query
                     . ", layout.col_display_name_mode layout_col_display_name_mode";
            $query = $query . ", portlet.col_type portlet_col_type";
            $query = $query
                     . ", IFNULL(pltl.col_name, portlet.col_name) AS portlet_col_name";
            $query = $query . ", portlet.col_group portlet_col_group";
            $query = $query . ", portlet.col_user portlet_col_user";
            $query = $query . ", portlet.col_list_index portlet_col_list_index";
            $query = $query
                     . ", portlet.col_group_list_index portlet_col_group_list_index";
            $query = $query . ", portlet.col_version portlet_col_version";
            $query = $query
                     . ", portlet.col_set_template portlet_col_set_template";
            $query = $query
                     . ", portlet.col_view_template portlet_col_view_template";
            $query = $query . ", portlet.col_source portlet_col_source";
            $query = $query
                     . ", portlet.col_available_myportal portlet_col_available_myportal";
            $query = $query . ", portlet.col_editor portlet_col_editor";
            $query = $query . ", portlet.col_creator portlet_col_creator";
            $query = $query
                     . ", portlet.col_creator_name portlet_col_creator_name";
            $query = $query
                     . ", portlet.col_creator_foreign_key portlet_col_creator_foreign_key";
            $query = $query . ", portlet.col_ctime portlet_col_ctime";
            $query = $query . ", portlet.col_modifier portlet_col_modifier";
            $query = $query
                     . ", portlet.col_modifier_name portlet_col_modifier_name";
            $query = $query
                     . ", portlet.col_modifier_foreign_key portlet_col_modifier_foreign_key";
            $query = $query . ", portlet.col_mtime portlet_col_mtime";
            $query = $query . ", portlet._id portlet_id ";

            $query = $query
                     . " FROM (tab_grn_portal_portal portal LEFT JOIN (tab_grn_portal_portal_local pl INNER JOIN tab_cb_language_status plc ON pl.language_id = plc._id AND plc.col_language = '"
                     . $database->escape($language)
                     . "') ON portal._id = pl.parent_id)";
            $query = $query
                     . " LEFT JOIN (tab_grn_portal_portletlayout layout LEFT JOIN (tab_grn_portal_portletlayout_local plyl INNER JOIN tab_cb_language_status plylc ON plyl.language_id = plylc._id AND plylc.col_language = '"
                     . $database->escape($language)
                     . "') ON layout._id = plyl.parent_id) ON portal._id = layout.col_portal";
            $query = $query
                     . " LEFT JOIN (tab_grn_portal_portlet portlet LEFT JOIN (tab_grn_portal_portlet_local pltl INNER JOIN tab_cb_language_status pltlc ON pltl.language_id = pltlc._id AND pltlc.col_language = '"
                     . $database->escape($language)
                     . "') ON portlet._id = pltl.parent_id) ON layout.col_portlet = portlet._id";

            $query = $query . " WHERE portal._id = '"
                     . $database->escape($portal_id) . "'";
            $query = $query . " ORDER BY layout.col_list_index";

            $query = $database->select_format($query, 0, -1, $lock_mode);

            //Execute Query
            $result = $database->query($query);
            if ($result === false) {
                //Throw Query Error
                $database->throwError(['query' => 'query failed: ' . $query]);
            }

            //Update Portal Column List
            $this->_column_list[$portal_id] = [];
            $count = $database->num_rows($result);
            for ($i = 0; $i < $count; $i++) {
                $row = $database->fetch_assoc($result);
                if ($row['portlet_col_type'] && $row['portlet_col_version']) {
                    if ($logic->checkAvailablePortlet($row['portlet_col_type'],
                        $row['portlet_col_version'])
                    ) {
                        $this->_column_list[$portal_id][$row['layout_col_column_type']][$row['layout_id']]
                            = $row;
                    }
                }
            }
            $database->free_result($result);

            if ($count > 0) {
                $portal_column_list =& $this->_column_list[$portal_id];
            }
        }

        //Return Portal Column List
        return $portal_column_list;
    }

}

;

/**
 * System Portal Information Manager Base Class
 *
 * @package grn.portal
 */
class GRN_Portal_System_Portal_Information_Manager_Base
    extends GRN_Portal_Portal_Information_Manager_Base
{
    /**
     * Constructor
     */
    function __construct()
    {
        parent::__construct();
    }

    /** @var self */
    private static $_instance = null;

    /**
     * @return GRN_Portal_Portal_Information_Manager_Base
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Portal Information
     *
     * @access  public
     *
     * @param  int     $portal_id //Portal ID
     * @param bool|int $lock_mode //Lock Mode
     * @param  bool    $refresh   //Refresh Cache
     *
     * @return array  $portal                    //Portal Information
     */
    function &get(
        $portal_id,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $refresh = false
    ) {
        //Get Portal List
        $portal_list =& $this->getList($lock_mode, $refresh);

        //Get Portal
        if ( ! array_key_exists($portal_id, $portal_list)) {
            $ret = false;

            return $ret;
        }

        //Return Portal Information
        return $portal_list[$portal_id];
    }

    /**
     * Get Portal List
     *
     * @access  public
     *
     * @param bool|int $lock_mode //Lock Mode
     * @param  bool    $refresh   //Refresh Cache
     *
     * @return array  $portal_list               //Portal Information List
     */
    function &getList($lock_mode = CB_DATABASE_DEFAULT_LOCK, $refresh = false)
    {
        $portal_list = [];

        //Get Portal List From Cache
        $cached = false;
        if ( ! $refresh) {
            if (array_key_exists('0', $this->_list)) {
                $portal_list =& $this->_list['0'];
                $cached = true;
            }
        }

        //Get Portal List From Database
        if ( ! $cached || $refresh) {
            require_once('portal/PortalFacade.csp');
            require_once('fw/i18n.csp');
            $i18n = CB_I18N::getInstance();

            $portalDAO = new PortalFacade();
            $dataObj = [];
            $dataObj['offset'] = 0;
            $dataObj['limit'] = -1;
            $dataObj['lock'] = $lock_mode;
            $dataObj['language'] = $i18n->getCurrentLanguage();

            $portalList = $portalDAO->getPortalList($dataObj);

            foreach ($portalList as $portal) {
                $portalArray = $portal->convertArray();
                $object_id = $portalArray['_id'];
                $this->_list['0'][$object_id] = $portalArray;
            }

            if (count($portalList) > 0) {
                $portal_list =& $this->_list['0'];
            }
        }

        //Return Portal List
        return $portal_list;
    }
}

;

/**
 * Personal Portal Information Manager Base Class
 *
 * @package grn.portal
 */
class GRN_Portal_Personal_Portal_Information_Manager_Base
    extends GRN_Portal_Portal_Information_Manager_Base
{
    /**
     * Constructor
     */
    function __construct()
    {
        parent::__construct();
    }

    /** @var self */
    private static $_instance = null;

    /**
     * @return GRN_Portal_Personal_Portal_Information_Manager_Base
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Portal Information
     *
     * @access  public
     *
     * @param  int     $portal_id //Portal ID
     * @param  int     $user_id   //User ID
     * @param bool|int $lock_mode //Lock Mode
     * @param  bool    $refresh   //Refresh Cache
     *
     * @return array  $portal                    //Portal Information
     */
    function &get(
        $portal_id,
        $user_id,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $refresh = false
    ) {
        //Get Portal List
        $portal_list =& $this->getList($user_id, $lock_mode, $refresh);

        //Get Portal
        if ( ! array_key_exists($portal_id, $portal_list)) {
            $ret = false;

            return $ret;
        }

        //Return Portal Information
        return $portal_list[$portal_id];
    }

    /**
     * Get Portal List
     *
     * @access  public
     *
     * @param  int     $user_id   //User ID
     * @param bool|int $lock_mode //Lock Mode
     * @param  bool    $refresh   //Refresh Cache
     *
     * @return array $portal_list                //Portlet List
     */
    function &getList(
        $user_id,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $refresh = false
    ) {
        $portal_list = [];

        //Get Portal List From Cache
        $cached = false;
        if ( ! $refresh) {
            if (array_key_exists($user_id, $this->_list)) {
                $portal_list =& $this->_list[$user_id];
                $cached = true;
            }
        }

        //Get Portal List From Database
        if ( ! $cached || $refresh) {
            require_once('portal/PortalFacade.csp');
            require_once('fw/i18n.csp');
            $i18n = CB_I18N::getInstance();

            $portalDAO = new PortalFacade();
            $dataObj = [];
            $dataObj['offset'] = 0;
            $dataObj['limit'] = -1;
            $dataObj['lock'] = $lock_mode;
            $dataObj['language'] = $i18n->getCurrentLanguage();
            $dataObj['userId'] = $user_id;

            $portalList = $portalDAO->getPortalList($dataObj);

            foreach ($portalList as $portal) {
                $portalArray = $portal->convertArray();
                $object_id = $portalArray['_id'];
                $this->_list[$user_id][$object_id] = $portalArray;
            }

            if (count($portalList) > 0) {
                $portal_list =& $this->_list[$user_id];
            }
        }

        //Return Portal List 
        return $portal_list;
    }
}

;


