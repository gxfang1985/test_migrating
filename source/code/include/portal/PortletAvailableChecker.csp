<?php

namespace grn\portal;

use grn\grn\access\service\AppAccess;

class PortletAvailableChecker
{
    /** @var \GRN_Portal_PortalLogicBase */
    private $logic = null;

    /**
     * @param \GRN_Portal_PortalLogicBase $logic
     *
     * @return self
     */
    public function __construct(\GRN_Portal_PortalLogicBase $logic)
    {
        $this->logic = $logic;
    }

    /**
     * @param $type
     * @param $version
     * @param $checkPrivilege
     * @param $user_id
     *
     * @return bool
     */
    public function evaluate($type, $version, $checkPrivilege, $user_id)
    {
        if ($this->isPhpPortletOnForest($type)) {
            return false;
        }
        if ( ! $checkPrivilege) {
            return true;
        }
        if ($this->isHtmlOrPhpPortlet($type)) {
            return true;
        }
        if ( ! $this->isActiveApplication($type)) {
            return false;
        }
        if ( ! $this->isAvailableApplication($type, $user_id)) {
            return false;
        }

        return $this->isEmbeddedPortlet($type, $version);
    }

    /**
     * @param string $type
     *
     * @return string
     */
    private function getAppIdByType($type)
    {
        //Get Embedded Portlet Host Application ID
        $type_elements = explode('.', $type);

        return isset($type_elements[1]) && is_string($type_elements[1])
            ? $type_elements[1] : "";
    }

    /**
     * @param string $type
     *
     * @return bool
     */
    private function isPhpPortletOnForest($type)
    {
        return defined('ON_FOREST') && $type == GRN_PRTL_PORTLET_TYPE_PHP;
    }

    /**
     * When the type is PHP portlet or HTML portlet, return true
     *
     * @param string $type
     *
     * @return bool
     */
    private function isHtmlOrPhpPortlet($type)
    {
        return $type == GRN_PRTL_PORTLET_TYPE_HTML
               || $type == GRN_PRTL_PORTLET_TYPE_PHP;
    }

    /**
     * Check Host Application Active and Available Status
     *
     * @param string $type
     *
     * @return bool
     */
    private function isActiveApplication($type)
    {
        //Get Application Locator
        require_once('grn/application.csp');
        $app_locator = \GRN_ApplicationLocator::instance();

        return $app_locator->isActive($this->getAppIdByType($type));
    }

    /**
     * @param string $type
     * @param string $userId
     *
     * @return bool
     */
    private function isAvailableApplication($type, $userId)
    {
        $pagePath = strtolower(cb_get_pagename());
        $noCheckPages = [
            'portal/personal/access_list',
            'portal/personal/command_ajax_handler',
            'portal/personal/command_portlet_add',
            'portal/personal/command_portlet_move',
            'portal/personal/command_portlet_order',
            'portal/personal/portlet_display_modify',
            'portal/personal/portlet_order',
            'portal/personal/view',
            'portal/operation/access_list',
            'portal/operation/command_ajax_handler',
            'portal/operation/command_access_add',
            'portal/operation/command_portlet_add',
            'portal/operation/command_portlet_move',
            'portal/operation/command_portlet_order',
            'portal/operation/portlet_display_modify',
            'portal/operation/portlet_order',
            'portal/operation/preview',
            'portal/operation/view',
            'portal/system/command_ajax_handler',
            'portal/system/command_portlet_add',
            'portal/system/command_portlet_move',
            'portal/system/command_portlet_order',
            'portal/system/portlet_order',
            'portal/system/preview',
        ];
        if (in_array($pagePath, $noCheckPages)) {
            return true;
        }

        if ($userId == 0) {
            $login_user = cb_get_login_user();
            $userId = $login_user->getOID();
        }

        return AppAccess::isAppAvailable($this->getAppIdByType($type), $userId);
    }

    /**
     * @param string $type
     * @param string $version
     *
     * @return bool
     */
    private function isEmbeddedPortlet($type, $version)
    {
        $app_id = $this->getAppIdByType($type);

        //Get Embedded Portlet List
        $embedded_portlet_list = $this->logic->getEmbeddedPortletList($app_id);

        //Check Portlet Type and Version
        foreach ($embedded_portlet_list as $embedded_portlet) {
            if ($type == $embedded_portlet['type']
                && $version == $embedded_portlet['version']
            ) {
                //Match Portlet Type and Version
                return true;
            }
        }

        //Not Embedded Portlet
        return false;
    }
}
