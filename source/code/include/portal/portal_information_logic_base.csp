<?php
/**
 * Portal Application Portal Information Logic Base Class
 *
 * @author  Yuichi, Nakamura 2005/8
 * @version 1.0
 * @package grn.portal
 */

/** Portal Application **/
require_once('portal/resources.csp');

/**
 * Portal Information Logic Base Class
 *
 * @package grn.portal
 */
class GRN_Portal_Portal_Information_Logic_Base
{
    //Portal Information Manager Instance
    var $_portal_information_manager_base = null;

    /**
     * Constructor
     */
    function __construct()
    {

    }

    /**
     * get Login User
     *
     * @access private
     * @return CB_User
     */
    function _getLoginUser()
    {
        //Get UUM Instance
        global $G_container_base;
        $grn_uum = $G_container_base->getInstance('uum');

        //Get Login User
        $login_user = $grn_uum->getLoginUser();
        if ( ! $login_user) {
            $ret = false;

            return $ret;
        }

        //Return Login User
        return $login_user;
    }
}

/**
 * System Portal Information Logic Base Class
 *
 * @package grn.portal
 */
class GRN_Portal_System_Portal_Information_Logic_Base
    extends GRN_Portal_Portal_Information_Logic_Base
{
    /**
     * Constructor
     */
    function __construct()
    {

    }

    /** @var self */
    private static $_instance = null;

    /**
     * @return GRN_Portal_System_Portal_Information_Logic_Base
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Portal Information Manager Base
     *
     * @return GRN_Portal_System_Portal_Information_Manager_Base
     */
    function _getPortalInformationManagerBase()
    {
        if (is_null($this->_portal_information_manager_base)) {
            require_once('portal/portal_information_manager_base.csp');
            $this->_portal_information_manager_base
                = GRN_Portal_System_Portal_Information_Manager_Base::getInstance();
        }

        return $this->_portal_information_manager_base;
    }

    /**
     * Get Portal Information
     *
     * @param  int $portal_id //Portal ID
     * @param int  $lock_mode
     * @param bool $refresh
     *
     * @return bool $portal                    //Portal Information
     */
    function &get(
        $portal_id,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $refresh = false
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('portal/error_code.csp');
        cb_trim_check($portal_id, E_GRN_PRTL_PORTAL_INVALID_ID);    //Portal ID

        //Get Portal Information
        $portal_information_manager_base
            = $this->_getPortalInformationManagerBase();
        $portal =& $portal_information_manager_base->get($portal_id, $lock_mode,
            $refresh);
        if ( ! $portal) {
            //Portal Not Found
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_PORTAL_NOT_FOUND);
        }

        //Return Portal Object
        return $portal;
    }

    /**
     * Get Portal Information List
     *
     * @param int  $lock_mode
     * @param bool $refresh
     *
     * @return bool $portal_list               //Portal Information List
     */
    function &getList($lock_mode = CB_DATABASE_DEFAULT_LOCK, $refresh = false)
    {
        //Get Portal Information List
        $portal_information_manager_base
            = $this->_getPortalInformationManagerBase();
        $portal_list =& $portal_information_manager_base->getList($lock_mode,
            $refresh);

        //Return Portal Information List
        return $portal_list;
    }

    /**
     * Get Portal Column Information List
     *
     * @param      $portal_id
     * @param int  $lock_mode
     * @param bool $refresh
     *
     * @return int $portal_column_list        //Portal Column Information List
     */
    function &getColumnList(
        $portal_id,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $refresh = false
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('portal/error_code.csp');
        cb_trim_check($portal_id, E_GRN_PRTL_PORTAL_INVALID_ID);    //Portal ID

        //Get Portal Information List
        $portal_information_manager_base
            = $this->_getPortalInformationManagerBase();
        $portal_column_list
            =& $portal_information_manager_base->getColumnList($portal_id,
            $lock_mode, $refresh);

        //Return Portal Column Information List
        return $portal_column_list;
    }
}

/**
 * Personal Portal Logic Base Class
 *
 * @package grn.portal
 */
class GRN_Portal_Personal_Portal_Information_Logic_Base
    extends GRN_Portal_Portal_Information_Logic_Base
{
    /**
     * Constructor
     */
    function __construct()
    {

    }

    /** @var self */
    private static $_instance = null;

    /**
     * @return GRN_Portal_Personal_Portal_Information_Logic_Base
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Portal Information Manager Base
     *
     * @return object $portal_information_manager_base         //Portal Information Manager Base
     */
    function _getPortalInformationManagerBase()
    {
        if (is_null($this->_portal_information_manager_base)) {
            require_once('portal/portal_information_manager_base.csp');
            $this->_portal_information_manager_base
                = GRN_Portal_Personal_Portal_Information_Manager_base::getInstance();
        }

        return $this->_portal_information_manager_base;
    }

    /**
     * Get Portal Information
     *
     * @param  int $portal_id //Portal ID
     * @param int  $lock_mode
     * @param bool $refresh
     *
     * @return bool $portal                    //Portal Information
     */
    function &get(
        $portal_id,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $refresh = false
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('portal/error_code.csp');
        cb_trim_check($portal_id, E_GRN_PRTL_PORTAL_INVALID_ID);    //Portal ID

        //Get Login User
        $login_user = $this->_getLoginUser();
        $login_user_id = $login_user->getOID();

        //Get Portal Information
        $portal_information_manager_base
            = $this->_getPortalInformationManagerBase();
        $portal =& $portal_information_manager_base->get($portal_id,
            $login_user_id, $lock_mode, $refresh);
        if ( ! $portal) {
            //Portal Not Found
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_PORTAL_NOT_FOUND);
        }

        //Return Portal Object
        return $portal;
    }

    /**
     * Get Portal Information List
     *
     * @param int  $lock_mode
     * @param bool $refresh
     *
     * @return bool $portal_list               //Portal Information List
     */
    function &getList($lock_mode = CB_DATABASE_DEFAULT_LOCK, $refresh = false)
    {
        //Get Login User
        $login_user = $this->_getLoginUser();
        $login_user_id = $login_user->getOID();

        //Get Portal Information List
        $portal_information_manager_base
            = $this->_getPortalInformationManagerBase();
        $portal_list
            =& $portal_information_manager_base->getList($login_user_id,
            $lock_mode, $refresh);

        //Return Portal Information List
        return $portal_list;
    }

    /**
     * Get Portal Column Information List
     *
     * @param      $portal_id
     * @param int  $lock_mode
     * @param bool $refresh
     *
     * @return int $portal_column_list        //Portal Column Information List
     */
    function &getColumnList(
        $portal_id,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $refresh = false
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('portal/error_code.csp');
        cb_trim_check($portal_id, E_GRN_PRTL_PORTAL_INVALID_ID);    //Portal ID

        //Get Portal Information List
        $portal_information_manager_base
            = $this->_getPortalInformationManagerBase();
        $portal_column_list
            =& $portal_information_manager_base->getColumnList($portal_id,
            $lock_mode, $refresh);

        //Return Portal Column Information List
        return $portal_column_list;
    }
}

/**
 * Portal Utility Information Logic Base Class
 *
 * @package grn.portal
 */
class GRN_Portal_Portal_Utility_Information_Logic_Base
    extends GRN_Portal_Portal_Information_Logic_Base
{
    //System Portal Information Manager Base Instance
    var $_system_portal_information_manager_base = null;

    //Personal Portal Information Manager Base Instance
    var $_personal_portal_information_manager_base = null;

    /**
     * Constructor
     *
     * @access private
     */
    function __construct()
    {

    }

    /** @var self */
    private static $_instance = null;

    /**
     * @return GRN_Portal_Portal_Utility_Information_Logic_Base
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get System Portal Information Manager Base
     *
     * @return object $system_portal_information_manager_base         //System Portal Information Manager Base
     */
    function _getSystemPortalInformationManagerBase()
    {
        if (is_null($this->_system_portal_information_manager_base)) {
            require_once('portal/portal_information_manager_base.csp');
            $this->_system_portal_information_manager_base
                = GRN_Portal_System_Portal_Information_Manager_base::getInstance();
        }

        return $this->_system_portal_information_manager_base;
    }

    /**
     * Get Personal Portal Information Manager Base
     *
     * @return GRN_Portal_Personal_Portal_Information_Manager_base
     */
    function _getPersonalPortalInformationManagerBase()
    {
        if (is_null($this->_personal_portal_information_manager_base)) {
            require_once('portal/portal_information_manager_base.csp');
            $this->_portal_personal_information_manager_base
                = GRN_Portal_Personal_Portal_Information_Manager_base::getInstance();
        }

        return $this->_portal_personal_information_manager_base;
    }

    /**
     *  Get Current Portal ID
     *
     * @param $portal_list
     *
     * @return null $portal_id        //current portal id
     */
    function getCurrentPortalID($portal_list)
    {
        //Get Current Portal ID From Session
        require_once('fw/session_manager.csp');
        $session_manager = CB_SessionManager::getInstance();
        $session = $session_manager->getSession(GRN_PRTL_MODULE_ID);
        $session_index =& $session->get(GRN_PRTL_SESSION_GROUP_INDEX);
        if (is_array($session_index)) {
            //Check Portal Available
            $portal_id = $session_index[GRN_PRTL_SESSION_CURRENT_ID];
            if (array_key_exists($portal_id, $portal_list)) {
                return $portal_id;
            }
        }

        return null;
    }

    /**
     *  Set Current Portal ID
     *
     * @param $portal_id //current portal id
     *
     * @return bool
     */
    function setCurrentPortalID($portal_id)
    {
        //Get Login User
        $login_user = $this->_getLoginUser();
        $login_user_id = $login_user->getOID();

        //Get System Portal Information List
        $system_portal_information_manager_base
            = $this->_getSystemPortalInformationManagerBase();
        $system_portal_list
            =& $system_portal_information_manager_base->getList(CB_DATABASE_NO_LOCK);

        //Get Personal Portal Information List
        $personal_portal_information_manager_base
            = $this->_getPersonalPortalInformationManagerBase();
        $personal_portal_list
            =& $personal_portal_information_manager_base->getList($login_user_id,
            CB_DATABASE_NO_LOCK);

        //Marge Portal List
        $portal_list = $system_portal_list + $personal_portal_list;

        //Check Portal Available
        if ( ! array_key_exists($portal_id, $portal_list)) {
            return false;
        }

        //Set Current Portal ID to Session
        require_once('fw/session_manager.csp');
        $session_manager = CB_SessionManager::getInstance();
        $session = $session_manager->getSession(GRN_PRTL_MODULE_ID);
        $session->set(GRN_PRTL_SESSION_GROUP_INDEX,
            [GRN_PRTL_SESSION_CURRENT_ID => $portal_id]);

        return true;
    }
}

;


