<?php

/**
 * Operation Portlet Logic
 *
 * @author  Toshihisa, Kobayashi 2010/09
 * @version 1.0
 * @package grn.portal
 */

//Portal Application
require_once('portal/resources.csp');

/**
 * Operation HTML Portlet Logic Class
 *
 * @package grn.portal
 */
class GRN_Portal_OperationHTMLPortletLogic
{
    /**
     * Constructor
     *
     * @access private
     */
    function __construct()
    {

    }

    /** @var self */
    private static $_instance = null;

    /**
     * @return GRN_Portal_OperationHTMLPortletLogic
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }


    /**
     * Operation HTML Portlet Logic Methods
     *
     * @param      $inCharset
     * @param      $inIsExportHeader
     * @param null $inExportLanguageCodeArray
     *
     * @return string
     */
    function createHTMLPortletNameCSV(
        $inCharset,
        $inIsExportHeader,
        $inExportLanguageCodeArray = null
    ) {
        //The portlet group that manages is obtained. 
        require_once('portal/portlet_group_logic.csp');
        require_once('portal/manage_logic.csp');
        $system_portlet_grouplogic
            = GRN_Portal_SystemPortletGroupLogic::getInstance();
        $portlet_group_list = $system_portlet_grouplogic->getList();
        $manage_logic
            = GRN_Portal_SystemPortletGroupManageLogic::getInstance();
        $allowPortletGroupList
            = $manage_logic->evaluateManageList($portlet_group_list);
        $allowPortletGroupIdArray = array_keys($allowPortletGroupList);

        /// テンポラリのファイルを作成
        $tempdir = cb_tmpdir();
        $tempFilename = tempnam($tempdir, 'ptl_');
        $csv = new CB_CSVWriter($inCharset, $tempFilename);

        // 項目名の書き出し
        if ($inIsExportHeader) {
            $header = [];
            $header[] = cb_msg('grn.portal.operation',
                'portal_csv_html_portlet_id');
            $header[] = cb_msg('grn.portal.operation',
                'portal_csv_language_code');
            $header[] = cb_msg('grn.portal.operation',
                'portal_csv_html_portlet_name');

            $csv->writeLine($header);
        }

        // 内容の書き出し
        if (count($allowPortletGroupIdArray) > 0) {
            require_once('portal/PortalFacade.csp');
            require_once('portal/bean/GrnPortalPortletLocal.csp');
            require_once('portal/inspection.csp');
            $portalDAO = new PortalFacade();
            $dataObj = [];
            $objectList
                = $portalDAO->getPortletLocalListByType_GroupIds_LanguageCodes($dataObj,
                GRN_PRTL_PORTLET_TYPE_HTML, $allowPortletGroupIdArray,
                $inExportLanguageCodeArray);
            $inspection = GRN_Portal_Local_Inspection::getInstance();

            foreach ($objectList as $portletLocal) {
                $line = [];
                $line[0] = $portletLocal->getParentId();
                $line[1] = $portletLocal->getLanguageCode();
                $line[2] = $portletLocal->getName();
                $csv->writeLine($line);

                //Check Inspection Message Enabled
                if ($inspection->isEnabled()) {
                    //Write Inspection Message
                    $message_type = 'html_portlet_local_export';
                    $message_args = [
                        'ppid'         => $portletLocal->getParentId(),
                        'languageCode' => $portletLocal->getLanguageCode(),
                        'portlet_name' => $portletLocal->getName()
                    ];
                    $inspection->record($message_type, $message_args);
                }
            }
        }

        $csv->close();

        return $tempFilename;
    }

    /**
     * @param $isFilename
     */
    function deleteHTMLPortletNameCSV($isFilename)
    {
        unlink($isFilename);
    }

    /**
     * CSV read lines
     *
     * @access  public
     *
     * @param  string $inFilePath      //CSV FilePath
     * @param  string $inCharset       //read charset
     * @param  int    $inSkipLineCount //read charset
     * @param  int    $inMaxReadCount  //read charset
     *
     * @return array    readLines       //CSV read lines
     */
    public function readLinesCSV(
        $inFilePath,
        $inCharset,
        $inSkipLineCount = 0,
        $inMaxReadCount = 5
    ) {
        require_once('fw/csv.csp');
        $csv = new CB_CSVReader($inCharset, $inFilePath);

        // サンプル行の読み込み
        $lines = [];
        $readCnt = 0;
        while ($readCnt < $inMaxReadCount) {
            if (($line = $csv->readLine()) !== false) {
                if ($inSkipLineCount > 0) {
                    --$inSkipLineCount;
                    continue;
                }
                $lines[] = $line;
            } else {
                break;
            }
            $readCnt++;
        }

        return $lines;
    }

    /**
     * CSV read lines
     *
     * @access  public
     *
     * @param  string $inFilePath      //CSV FilePath
     * @param  string $inCharset       //read charset
     * @param  int    $inSkipLineCount //read charset
     *
     * @return boolean  success:TRUE
     */
    public function importHTMLPortletNameWithCSV(
        $inFilePath,
        $inCharset,
        $inSkipLineCount = 0
    ) {
        if ( ! $inCharset) {
            global $G_config_common;
            $inCharset = $G_config_common->get('I18N',
                'default_external_encoding');
        }

        //Get Allow HTML Portlet
        require_once('portal/manage_logic.csp');
        require_once('portal/system_portlet_logic.csp');
        $systemHTMLPortletLogic
            = GRN_Portal_SystemHTMLPortletLogic::getInstance();
        $HTMLPortletList = $systemHTMLPortletLogic->getList();
        $manageLogic
            = GRN_Portal_SystemPortletGroupManageLogic::getInstance();
        $allowHTMLPortletList
            = $manageLogic->evaluateManageListPortlet($HTMLPortletList);


        require_once('fw/csv.csp');
        $csv = new CB_CSVReader($inCharset, $inFilePath);

        // 先頭行をスキップ
        for ($i = 0; $i < $inSkipLineCount; ++$i) {
            $csv->readLine();
        }

        require_once('portal/PortalFacade.csp');
        require_once('portal/bean/GrnPortalPortletLocal.csp');
        $portalDAO = new PortalFacade();
        $dataObj = [];
        $dataObj['messageTypeAdd'] = 'html_portlet_local_add_import';
        $dataObj['messageTypeModify'] = 'html_portlet_local_modify_import';

        require_once('fw/i18n.csp');
        $i18n = CB_I18N::getInstance();
        $availableLanguageArray = $i18n->getAvailableLanguages();

        while (($line = $csv->readLine()) !== false) {
            if (count($line) != 3) {
                continue;
            }

            // check portlet
            if ( ! array_key_exists($line[0], $HTMLPortletList)) {
                cb_throw_error(E_GRN_PRTL_PORTLET_INVALID_ID);
            }

            if ( ! in_array($line[1], $availableLanguageArray)) {
                cb_throw_error(E_COMMON_CSV_LANGUAGE_CODE_INVALID);
            }

            // 操作者が権限を持ったHTMLポートレットのみ対象とする
            if (array_key_exists($line[0], $allowHTMLPortletList)) {

                $portletLocal = new GrnPortalPortletLocal();
                $portletLocal->setParentId($line[0]);
                $portletLocal->setLanguageCode($line[1]);
                $portletLocal->setName(cb_trim($line[2]));

                $portalDAO->updatePortletLocal($dataObj, $portletLocal);
            }
        }

        $csv->close();

        return true;
    }
}

;

