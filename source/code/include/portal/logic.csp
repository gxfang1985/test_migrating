<?php

/**
 * ポータルロジック
 *
 * @package grn.portal
 * @author  Hideyasu, YOSHIDA 2004/10
 * @version 1.0
 */

/** Portal Application **/
require_once('portal/resources.csp');

/**
 * ベースクラス
 *
 * @package grn.portal
 * @abstract
 */
class GRN_Portal_AgentBase
{
    /**
     * コンストラクタ
     */
    function __construct()
    {
    }

    /**
     * テーブル情報を取得する
     *
     * @param $table_name  テーブル名
     *
     * @return CB_TableInfo
     */
    function _getTableInfo($table_name)
    {
        require_once('portal/table.csp');
        $app_locator = GRN_ApplicationLocator::instance();
        $table_manager = $app_locator->getTableManager('portal');
        $ret = $table_manager->getTableInfo($table_name);

        return $ret;
    }

    /**
     * 表示順番を変更する
     *
     * @param $objects    array  キーに値のID、値にオブジェクトを持つ連想配列
     * @param $object_ids array  $objectsのキーを持つ配列
     * @param $col_name   string  リストインデックスのカラム名
     *
     * @access private
     */
    function _changeOrder(& $objects, $object_ids, $col_name = 'list_index')
    {
        $object_index = 0;
        $list_indecies = [];
        foreach (array_keys($objects) as $object_id) {
            if ($object_id !== current($object_ids)) {
                $list_indecies[current($object_ids)]
                    = $objects[$object_id]->get($col_name);
            }
            if ( ! next($object_ids)) {
                break;
            }
        }

        foreach ($list_indecies as $object_id => $list_index) {
            $objects[$object_id]->set($col_name, $list_index);
        }
    }

}

/**
 * オブジェクト管理テンプレートクラス
 *
 * @package grn.portal
 * @abstract
 */
class GRN_Portal_AgentManagerTemplate extends GRN_Portal_AgentBase
{
    /**
     *
     * @access private
     */
    var $_table_name = null;

    /**
     * @var CB_TableInfo
     * @access private
     */
    var $_table_info = null;

    /**
     * @var string
     * @access private
     */
    var $_class_name = null;
    /**
     * @access private
     */
    var $_system_objects = [];
    /**
     * @var GRN_Portal_PortalAgent[]|GRN_Portal_PortletAgent[]|GRN_Portal_PortletGroupAgent[]
     * @access private
     */
    var $_my_objects = [];

    /**
     * コンストラクタ
     */
    function __construct()
    {
    }

    /**
     * 軽量コンテナのブート処理
     */
    function boot()
    {
        $this->_table_info = $this->_getTableInfo($this->_table_name);
        /**
         * see: code/plugin/lwc/10portal_portal_manager.ini
         * see: code/plugin/lwc/10portal_portletfile_manager.ini
         * see: code/plugin/lwc/10portal_portletgroup_manager.ini
         * see: code/plugin/lwc/10portal_portlet_manager.ini
         *
         * @see GRN_Portal_PortalAgent
         * @see GRN_Portal_PortletAgent
         * @see GRN_Portal_PortletGroupAgent
         * GRN_Portal_PortletFileAgent(not found)
         */
        $this->_class_name = $this->_table_name . 'agent';
    }

    /**
     * オブジェクトの一覧を取得する
     * オフセットを指定されたときはキャッシュしない
     *
     * @param CB_User $user nullのときはシステムオブジェクト、それ以外のときはユーザーで絞り込んだMyオブジェクトの一覧を取得する
     * @param null    $offset
     * @param null    $limit
     * @param bool    $isUseLocal
     *
     * @return GRN_Portal_PortalAgent[]|GRN_Portal_PortletAgent[]|GRN_Portal_PortletGroupAgent[]
     */
    function &getList($user, $offset = null, $limit = null, $isUseLocal = true)
    {
        $table_info = $this->_table_info;
        $class_name = $this->_class_name;
        //for escape
        $db = $table_info->getDBConnection();

        if (is_null($user)) {
            $objects =& $this->_system_objects;

            if (0 < count($objects)) {
                return $objects;
            }
        } else {
            $user_id = $user->getOID();
            $my_objects =& $this->_my_objects;

            if (array_key_exists($user_id, $my_objects)) {
                if (0 < count($my_objects[$user_id])) {
                    return $my_objects[$user_id];
                }

                $objects =& $my_objects[$user_id];
            } else {
                $objects = [];
            }
        }


        require_once('portal/PortalFacade.csp');
        require_once('fw/i18n.csp');
        $i18n = CB_I18N::getInstance();
        $portalDAO = new PortalFacade();
        $dataObj = [];
        $dataObj['lock'] = $table_info->_lock;
        $dataObj['offset'] = $offset;
        $dataObj['limit'] = is_null($limit) ? 21 : $limit;
        $dataObj['language'] = $i18n->getCurrentLanguage();
        $dataObj['user'] = $user;

        switch ($this->_table_name) {
            case 'grn_portal_portal':
                $objectList = ($isUseLocal)
                    ? $portalDAO->getPortalList($dataObj)
                    : $portalDAO->getPortalListWithNonLocal($dataObj);

                break;

            case 'grn_portal_portlet':
                $objectList = ($isUseLocal)
                    ? $portalDAO->getPortletList($dataObj)
                    : $portalDAO->getPortletListWithNonLocal($dataObj);

                break;

            case 'grn_portal_portletgroup':
                $objectList = ($isUseLocal)
                    ? $portalDAO->getPortletGroupList($dataObj)
                    : $portalDAO->getPortletGroupListWithNonLocal($dataObj);

                break;
        }

        foreach ($objectList as $object) {
            $row = $table_info->getRow($object->getId(),
                $object->convertArray());
            $object_id = $row->getOID();
            $objects[$object_id] = new $class_name($objects, $row);
        }

        return $objects;
    }

    /**
     * オブジェクトを生成する
     *
     * @param $user object CB_User  nullのときはシステムオブジェクト、それ以外の
     *              ときはユーザーで絞り込んだMyオブジェクトを生成する
     *
     * @return GRN_Portal_AgentTemplate  オブジェクトを返す
     */
    function create($user)
    {
        $table_info = $this->_table_info;
        $class_name = $this->_class_name;

        $objects =& $this->getList($user);

        $row = $table_info->newRow();
        $object_id = $row->getOID();
        if ( ! is_null($user)) {
            $row->set('user', $user);
        }
        $row->set('list_index', $object_id);

        $object = new $class_name($objects, $row);
        $objects[$object_id] = $object;

        return $object;
    }

    /**
     * オブジェクトを削除する
     *
     * @param $user   object CB_User  nullのときはシステムオブジェクト、それ以外の
     *                ときはユーザーで絞り込んだMyオブジェクトを削除する
     * @param $object object GRN_Portal_AgentTemplate  削除するオブジェクト
     */
    function delete($user, $object)
    {
        $object_id = $object->getOID();
        $objects = $this->getList($user);

        if (array_key_exists($object_id, $objects)) {
            $objects[$object_id]->delete();
        }
    }

    /**
     * 表示順番を変更する
     *
     * @param $user       object CB_User  nullのときはシステムオブジェクトの，それ以外
     *                    のときは指定されたユーザーで絞り込んだMyオブジェクトの一覧の表示順序を変更する
     * @param $object_ids array  オブジェクトIDを持つ配列
     */
    function changeOrder($user, & $object_ids)
    {
        $objects =& $this->getList($user);

        $this->_changeOrder($objects, $object_ids);
    }
}

/**
 * オブジェクトテンプレートクラス
 *
 * @package grn.portal
 * @abstract
 */
class GRN_Portal_AgentTemplate extends GRN_Portal_AgentBase
{
    /**
     * @access private
     */
    var $_objects = null;
    /**
     * @access private
     */
    var $_row = null;

    /**
     * コンストラクタ
     *
     * @param $objects array  キーに値のID、値にオブジェクトを持つ連想配列
     * @param $row     object CB_PersistentBase  永続化クラスのテーブル行オブジェクト
     */
    function __construct(& $objects, $row)
    {
        $this->_objects =& $objects;
        $this->_row = $row;
    }

    /**
     * カラムを取得する
     *
     * @param $col_name string  カラム名
     *
     * @return mixed  カラムの値
     */
    function get($col_name)
    {
        $col_value = $this->_row->get($col_name);
        if (false === $col_value) {
            $col_value = null;
        }

        return $col_value;
    }

    /**
     * カラムを変更する
     *
     * @param $col_name  string  カラム名
     * @param $col_value mixed  カラムの値
     *
     * @return boolean  TRUEのときは正常終了，FALSEのときは失敗
     */
    function set($col_name, $col_value)
    {
        return $this->_row->set($col_name, $col_value);
    }

    /**
     * カラムを登録する
     *
     */
    function registerNow()
    {
        return $this->_row->registerNow();
    }

    /**
     * カラムを更新する
     *
     */
    function updateNow()
    {
        return $this->_row->updateNow();
    }

    /**
     * オブジェクトを削除する
     */
    function delete()
    {
        unset($this->_objects[$this->getOID()]);
        $this->_row->delete();
    }

    /**
     * 永続化オブジェクトIDを取得する
     *
     * @return int
     */
    function getOID()
    {
        return $this->_row->getOID();
    }

    /**
     * 永続化クラスのテーブル行オブジェクトを取得する
     *
     * @return object GRN_Portal_AgentTemplate
     */
    function getRow()
    {
        return $this->_row;
    }

    /**
     * オブジェクトの一覧を取得する
     *
     * @param $object_type string  オブジェクトの種類
     * @param $user
     *
     * @return mixed  引数の値が正常でないときはFALSEを返す，それ以外のときはキー
     *           に値のID、値にオブジェクトを持つ連想配列を返す
     * @access   private
     */
    function &_getList($object_type, $user)
    {
        global $G_container_app;
        $object_manager = $G_container_app->getInstance('portal_' . $object_type
                                                        . '_manager');

        $ret =& $object_manager->getList($user);

        return $ret;
    }
}

/**
 * ポータルオブジェクトクラス
 *
 * @package grn.portal
 */
class GRN_Portal_PortalAgent extends GRN_Portal_AgentTemplate
{
    /**
     * @access private
     */
    var $_columns = [];
    /**
     * @access private
     */
    var $_portlets = [];

    /**
     * コンストラクタ
     *
     * @param $objects array  キーに値のID、値にポータルオブジェクトを持つ連想配列
     * @param $row     object CB_Row  ポータル永続化オブジェクト
     */
    function __construct(& $objects, $row)
    {
        parent::__construct($objects, $row);
    }

    /**
     * ポートレットを追加する
     *
     * @param $portlet object GRN_Portal_PortletAgnet  ポートレットオブジェクト
     */
    function addPortletCache($portlet)
    {
        $portlet_id = $portlet->getOID();
        $portlets =& $this->_portlets;

        $portlets[$portlet_id] = $portlet;
    }

    /**
     * ポートレットを削除する
     *
     * @param $portlet object GRN_Portal_PortletAgnet  ポートレットオブジェクト
     */
    function deletePortletCache($portlet)
    {
        $portlet_id = $portlet->getOID();
        $portlets =& $this->_portlets;

        if (array_key_exists($portlet_id, $portlets)) {
            unset($portlets[$portlet_id]);
        }

        $columns =& $this->_columns;
        $table_info = $this->_getTableInfo('grn_portal_portletlayout');

        foreach (array_keys($columns) as $column_type) {
            $column =& $columns[$column_type];
            $layout_ids = array_search($portlet_id, $column);

            if (is_array($layout_ids)) {
                foreach ($layout_ids as $layout_id) {
                    unset($column[$layout_id]);
                }
            } elseif ( ! is_bool($layout_ids)) {
                unset($column[$layout_ids]);
            }
        }
    }

    /**
     * （ポータル段ごとの）ポートレット配置情報の一覧を取得する
     *
     * @return array  キーにポータル段の種類、値にキーにポートレット配置情報ID、
     *  値にキーのポートレットIDを持つ連想配列を持つ多重連想配列を返す
     */
    function &getColumnList()
    {
        $columns =& $this->_columns;
        if (0 < count($columns)) {
            return $columns;
        }

        $user = $this->get('user');

        if (is_null($user)) {
            $my_portlets = [];
            $system_portlets =& $this->_getList('portlet', $user);
        } else {
            $my_portlets =& $this->_getList('portlet', $user);
            $user = null;
            $system_portlets =& $this->_getList('portlet', $user);
        }

        $table_info = $this->_getTableInfo('grn_portal_portletlayout');
        $portal_id = $this->getOID();

        require_once('portal/PortalFacade.csp');
        require_once('fw/i18n.csp');
        $i18n = CB_I18N::getInstance();
        $portalDAO = new PortalFacade();
        $dataObj = [];
        $dataObj['lock'] = $table_info->_lock;
        $dataObj['language'] = $i18n->getCurrentLanguage();

        $objectList = $portalDAO->getPortletLayoutListByPortalId($dataObj,
            $portal_id);

        $layoutList = [];
        foreach ($objectList as $object) {
            $row = $table_info->getRow($object->getId(),
                $object->convertArray());
            $object_id = $row->getOID();
            $layoutList[$object_id] = $row;
        }

        foreach ($layoutList as $layout_row) {
            $portlet_row = $layout_row->get('portlet');
            $column_type = $layout_row->get('column_type');
            $column_type = (false === $column_type) ? null : $column_type;

            $portlet_id = $portlet_row->getOID();
            $layout_id = $layout_row->getOID();

            if ( ! array_key_exists($column_type, $columns)) {
                $columns[$column_type] = [];
            }
            $column =& $columns[$column_type];
            $column[$layout_id] = $portlet_id;

            if (array_key_exists($portlet_id, $my_portlets)) {
                $portlet = $my_portlets[$portlet_id];
            } elseif (array_key_exists($portlet_id, $system_portlets)) {
                $portlet = $system_portlets[$portlet_id];
            } else {
                assert('FALSE');
            }

            $portlet->addPortalCache($this);
            $this->addPortletCache($portlet);
        }

        return $columns;
    }

    /**
     * （ポータル段ごとの）ポートレット配置情報の一覧を変更する
     *
     * @param $columns array  キーにポータル段の種類、値にキーにポートレット
     *                 配置情報ID、値にキーのポートレットIDを持つ連想配列を持つ多重連想配列
     */
    function setColumnList(& $columns)
    {
        $old_columns =& $this->getColumnList();

        $layouts = [];
        foreach (array_keys($old_columns) as $column_type) {
            $old_column =& $old_columns[$column_type];
            foreach ($old_column as $layout_id => $portlet_id) {
                $layouts[$layout_id] = $portlet_id;
            }
        }

        $user = $this->get('user');

        if (is_null($user)) {
            $my_portlets = [];
            $system_portlets =& $this->_getList('portlet', $user);
        } else {
            $my_portlets =& $this->_getList('portlet', $user);
            $user = null;
            $system_portlets =& $this->_getList('portlet', $user);
        }

        $table_info = $this->_getTableInfo('grn_portal_portletlayout');
        $portal_id = $this->getOID();

        foreach (array_keys($columns) as $column_type) {
            $column =& $columns[$column_type];
            $list_index = 0;

            foreach ($column as $layout_id => $portlet_id) {
                $layout_row = $table_info->getRow($layout_id);
                $portal_row = $layout_row->get('portal');

                if ($portal_id === $portal_row->getOID()) {
                    $layout_row->set('list_index', $list_index);
                    $layout_row->set('column_type', $column_type);

                    unset($layouts[$layout_id]);

                    if (array_key_exists($portlet_id, $my_portlets)) {
                        $portlet = $my_portlets[$portlet_id];
                    } elseif (array_key_exists($portlet_id, $system_portlets)) {
                        $portlet = $system_portlets[$portlet_id];
                    } else {
                        assert('FALSE');
                    }

                    $portlet->addPortalCache($this);
                    $this->addPortletCache($portlet);

                    $list_index++;
                } else {
                    assert('FALSE');
                }
            }
        }

        $this->_columns = $columns;

        foreach ($layouts as $layout_id => $portlet_id) {
            if (array_key_exists($portlet_id, $my_portlets)) {
                $portlet = $my_portlets[$portlet_id];
            } elseif (array_key_exists($portlet_id, $system_portlets)) {
                $portlet = $system_portlets[$portlet_id];
            } else {
                assert('FALSE');
            }

            $portlet->deleteLayout($table_info->getRow($layout_id));
        }
    }

    /**
     * オブジェクトを削除する
     */
    function delete()
    {
        $portlets =& $this->_portlets;

        foreach (array_keys($portlets) as $portlet_id) {
            $portlets[$portlet_id]->deletePortalCache($this);
        }

        parent::delete();
    }
}

/**
 * ポートレットオブジェクトクラス
 *
 * @package grn.portal
 */
class GRN_Portal_PortletAgent extends GRN_Portal_AgentTemplate
{
    /**
     * @access private
     */
    var $_group = null;
    /**
     * @access private
     */
    var $_portals = [];
    /**
     * @access private
     */
    var $_layouts = [];
    /**
     * @access private
     */
    var $_files = [];

    /**
     * コンストラクタ
     *
     * @param $objects array  キーに値のID、値にポートレットオブジェクトを持つ
     *                 連想配列
     * @param $row     object CB_PersistentBase  ポートレット永続化オブジェクト
     */
    function __construct(& $objects, $row)
    {
        parent::__construct($objects, $row);
    }

    /**
     * ポータルを追加する
     *
     * @param GRN_Portal_PortletGroupAgent $portal ポートレットグループ
     *                                             オブジェクト
     */
    function addPortalCache($portal)
    {
        $portal_id = $portal->getOID();
        $portals =& $this->_portals;

        $portals[$portal_id] = $portal;
    }

    /**
     * ポータルを削除する
     *
     * @param GRN_Portal_PortletGroupAgent $portal ポートレットグループ
     *                                             オブジェクト
     */
    function deletePortalCache($portal)
    {
        $portal_id = $portal->getOID();
        $portals =& $this->_portals;

        if (array_key_exists($portal_id, $portals)) {
            unset($portals[$portal_id]);
        }
    }

    /**
     * ポートレットグループをキャッシュへ追加する
     *
     * @param GRN_Portal_PortletGroupAgent $group ポートレットグループ
     *                                            オブジェクト
     */
    function setGroupCache($group)
    {
        $this->_group = $group;
    }

    /**
     * ポートレットグループキャッシュから削除するオブジェクト
     */
    function deleteGroupCache()
    {
        $group = null;
        $this->_group = $group;
    }

    /**
     * ポートレットグループを削除する。
     */
    function deleteGroup()
    {
        $row = $this->get('group');
        if ( ! is_null($row)) {
            $group = $this->_group;
            if (is_null($group)) {
                $group_id = $row->getOID();

                $user = $this->get('user');
                $groups =& $this->_getList('portletgroup', $user);

                if (array_key_exists($group_id, $groups)) {
                    $group = $groups[$group_id];
                } else {
                    return;
                }
            }
            $group->deletePortletCache($this);
        }

        $this->deleteGroupCache();
        $this->set('group', null);
        $this->set('group_list_index', null);
    }

    /**
     * @access private
     */
    function &_getLayoutList()
    {
        $layouts =& $this->_layouts;

        if (0 < count($layouts)) {
            return $layouts;
        }

        $table_info = $this->_getTableInfo('grn_portal_portletlayout');
        $portlet_id = $this->getOID();

        require_once('portal/PortalFacade.csp');
        require_once('fw/i18n.csp');
        $i18n = CB_I18N::getInstance();
        $portalDAO = new PortalFacade();
        $dataObj = [];
        $dataObj['lock'] = $table_info->_lock;
        $dataObj['language'] = $i18n->getCurrentLanguage();

        $objectList = $portalDAO->getPortletLayoutListByPortletId($dataObj,
            $portlet_id);

        $layoutList = [];
        foreach ($objectList as $object) {
            $row = $table_info->getRow($object->getId(),
                $object->convertArray());
            $object_id = $row->getOID();
            $layoutList[$object_id] = $row;
        }

        return $layoutList;
    }

    /**
     * ポートレット配置情報永続化オブジェクトを追加する
     *
     * @param $portal object GRN_Portal_PortalAgent  ポータルオブジェクト
     *
     * @return mixed  FALSEのときは失敗，それ以外のときはポートレット配置情報永続化
     *  オブジェクトが返る
     */
    function addLayout($portal)
    {
        $portal_user = $portal->get('user');
        $portlet_user = $this->get('user');

        if (is_null($portal_user)) {
            if ( ! is_null($portlet_user)) {
                {
                    $___ret = false;

                    return $___ret;
                }
            }
        } else {
            if ( ! is_null($portlet_user)
                 && ($portal_user->getOID() != $portlet_user->getOID())
            ) {
                {
                    $___ret = false;

                    return $___ret;
                }
            }
        }

        $layouts =& $this->_getLayoutList();

        $table_info = $this->_getTableInfo('grn_portal_portletlayout');
        $row = $table_info->newRow();
        $row->set('portal', $portal->getRow());
        $row->set('portlet', $this->getRow());

        $layouts[$row->getOID()] = $row;

        $this->addPortalCache($portal);

        return $row;
    }

    /**
     *
     */
    function deleteLayout($layout_row)
    {
        $portal_row = $layout_row->get('portal');
        $portal_user = $portal_row->get('user');
        $portlet_user = $this->get('user');

        if (is_null($portal_user)) {
            if ( ! is_null($portlet_user)) {
                return false;
            }
        } else {
            if ( ! is_null($portlet_user)
                 && ($portal_user->getOID() != $portlet_user->getOID())
            ) {
                return false;
            }
        }

        if ( ! is_null($portal_row)) {
            $portals =& $this->_getList('portal', $portal_user);
            $portal = $portals[$portal_row->getOID()];
            $this->deletePortalCache($portal);
        }

        $layout_row->delete();

        return true;
    }

    /**
     * オブジェクトを削除する
     */
    function delete()
    {
        $group = $this->_group;
        $portals = $this->_portals;

        if ( ! is_null($group)) {
            $group->deletePortletCache($this);
        }

        foreach (array_keys($portals) as $portal_id) {
            $portals[$portal_id]->deletePortletCache($this);
        }

        parent::delete();
    }
}

/**
 * ポートレットグループオブジェクトクラス
 *
 * @package grn.portal
 */
class GRN_Portal_PortletGroupAgent extends GRN_Portal_AgentTemplate
{
    /**
     * @access private
     */
    var $_portlets = [];

    /**
     * コンストラクタ
     *
     * @param $objects array  キーに値のID、値にこのポートレットグループオブジェクト
     *                 を持つ連想配列
     * @param $row     object CB_PersistentBase  ポートレット永続化オブジェクト
     */
    function __construct(& $objects, $row)
    {
        parent::__construct($objects, $row);
    }

    /**
     * ポートレットを追加する
     *
     * @param $portlet object GRN_Portal_PortletAgent  ポートレットオブジェクト
     *
     * @return mixed  TRUEのときは正常終了、FALSEのときは失敗
     */
    function addPortlet($portlet)
    {
        $portlet_id = $portlet->getOID();
        $portlets =& $this->_portlets;

        if (array_key_exists($portlet_id, $portlets)) {
            $ret = false;

            return $ret;
        }

        $portlet_user = $portlet->get('user');
        $group_user = $this->get('user');

        if ( ! is_null($portlet_user)) {
            $portlet_user_id = $portlet_user->getOID();
        } else {
            $portlet_user_id = null;
        }

        if ( ! is_null($group_user)) {
            $group_user_id = $group_user->getOID();
        } else {
            $group_user_id = null;
        }

        if ($portlet_user_id !== $group_user_id) {
            $ret = false;

            return $ret;
        }

        $portlet->set('group', $this->getRow());
        $portlet->set('group_list_index', $portlet_id);
        $portlet->registerNow();

        $new_group_portlet_id_list = [];
        $group_portlet_id_list = array_keys($this->getPortletList());
        foreach ($group_portlet_id_list as $group_portlet_id) {
            if ($group_portlet_id != $portlet_id) {
                $new_group_portlet_id_list[] = $group_portlet_id;
            }
        }
        $new_group_portlet_id_list[] = $portlet_id;
        $this->changePortletOrder($new_group_portlet_id_list);

        $portlet->setGroupCache($this);

        $portlets[$portlet_id] = $portlet;

        $ret = true;

        return $ret;
    }

    /**
     * ポートレットを削除する
     *
     * @param $portlet object GRN_Portal_PortletAgent  ポートレットオブジェクト
     */
    function deletePortletCache($portlet)
    {
        $portlet_id = $portlet->getOID();
        $portlets =& $this->_portlets;

        if (array_key_exists($portlet_id, $portlets)) {
            unset($portlets[$portlet_id]);
        }
    }

    /**
     * ポートレットの一覧を取得する
     *
     * @return array  キーに値のID、値にポートレットグループオブジェクトを持つ
     *  連想配列
     */
    function &getPortletList()
    {
        if (0 < count($this->_portlets)) {
            return $this->_portlets;
        }

        $table_info = $this->_getTableInfo('grn_portal_portlet');
        $user = $this->get('user');
        $portlets =& $this->_getList('portlet', $user);

        $group_id = $this->getOID();

        require_once('portal/PortalFacade.csp');
        require_once('fw/i18n.csp');
        $i18n = CB_I18N::getInstance();
        $portalDAO = new PortalFacade();
        $dataObj = [];
        $dataObj['lock'] = $table_info->_lock;
        $dataObj['language'] = $i18n->getCurrentLanguage();
        $dataObj['user'] = $user;
        $objectList = $portalDAO->getPortletListByGroupId($dataObj,
            $group_id);

        foreach ($objectList as $portlet) {
            $portlet_id = $portlet->getID();
            $portlet = $portlets[$portlet_id];

            $portlet->setGroupCache($this);

            $this->_portlets[$portlet_id] = $portlet;
        }

        return $this->_portlets;
    }

    /**
     * 表示順番を変更する
     *
     * @param $object_ids array  オブジェクトIDを持つ配列
     */
    function changePortletOrder(& $object_ids)
    {
        $objects =& $this->getPortletList();

        $this->_changeOrder($objects, $object_ids, 'group_list_index');
    }

    /**
     * オブジェクトを削除する
     */
    function delete()
    {
        $portlets =& $this->_portlets;

        foreach (array_keys($portlets) as $portlet_id) {
            $portlets[$portlet_id]->deleteGroupCache();
        }

        parent::delete();
    }

}


