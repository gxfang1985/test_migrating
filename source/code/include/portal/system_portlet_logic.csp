<?php

/**
 * System Portlet Logic
 *
 * @author  Yuichi, Nakamura 2004/11
 * @version 1.0
 * @package grn.portal
 */

//Portal Application
require_once('fw/i18n.csp');
require_once('portal/resources.csp');

use grn\grn\access\service\AppAccess;

/**
 * System Portlet Logic Base Class
 *
 * @package grn.portal
 */
class GRN_Portal_SystemPortletLogicBase
{
    //Portal Utility Instance
    var $_portal_utility = null;

    //Portlet Manager Instance
    var $_portlet_manager = null;

    //Portlet Group Manager Instance
    var $_portlet_group_manager = null;

    //Portlet File Manager Instance
    var $_portlet_file_manager = null;

    /**
     * Constructor
     *
     * @access private
     */
    function __construct()
    {

    }

    /**
     * Get System Portlet Logic Base Instance
     *
     * @return GRN_Portal_SystemPortletLogicBase        Instance
     * of Portlet Logic Base
     */
    private static $_instance = null;

    /**
     * @return GRN_Portal_SystemPortletLogicBase
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Portal Utility Instance
     *
     * @return  GRN_Portal_Application
     */
    function _getPortalUtility()
    {
        if (is_null($this->_portal_utility)) {
            $app_locator = GRN_ApplicationLocator::instance();
            $this->_portal_utility = $app_locator->getTableManager('portal');
        }

        return $this->_portal_utility;
    }

    /**
     * Get Portlet Manager Instance
     *
     * @return GRN_Portal_AgentManagerTemplate $_portlet_manager
     */
    function _getPortletManager()
    {
        if (is_null($this->_portlet_manager)) {
            require_once('portal/logic.csp');
            global $G_container_app;
            $this->_portlet_manager
                = $G_container_app->getInstance(GRN_PRTL_LWC_ID_PORTLET_MANAGER);
        }

        return $this->_portlet_manager;
    }

    /**
     * Get Portlet Group Manager Instance
     *
     * @return GRN_Portal_AgentManagerTemplate
     */
    function _getPortletGroupManager()
    {
        if (is_null($this->_portlet_group_manager)) {
            require_once('portal/logic.csp');
            global $G_container_app;
            $this->_portlet_group_manager
                = $G_container_app->getInstance(GRN_PRTL_LWC_ID_PORTLETGROUP_MANAGER);
        }

        return $this->_portlet_group_manager;
    }

    //Common Portlet Logic Base Methods

    /**
     * Get Portlet
     *
     * @access  private
     *
     * @param  int $portlet_id //Portlet ID
     *
     * @return object $portlet                   //Portlet Object
     */
    function &get($portlet_id)
    {
        //Check Arguments
        require_once('fw/string_util.csp');
        require_once('portal/error_code.csp');
        cb_trim_check($portlet_id, E_GRN_PRTL_PORTLET_INVALID_ID); //portlet id

        //Get Portlet List
        $portlet_list = $this->getList();

        //Get Portlet Object
        if ( ! array_key_exists($portlet_id, $portlet_list)) {
            //Portlet Not Found
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_PORTLET_NOT_FOUND);
        }
        $portlet =& $portlet_list[$portlet_id];

        //Return Portlet Object
        return $portlet;
    }

    /**
     * Get Portlet List
     *
     * @access  private
     *
     * @param  boolean $isUseLocal
     *
     * @return mixed  $portlet_list              //Portlet List
     */
    function &getList($isUseLocal = true)
    {
        //Get Portlet Object
        $user = null;
        $portlet_manager = $this->_getPortletManager();
        $portlet_list = $portlet_manager->getList($user, null, null,
            $isUseLocal);
        if ( ! is_array($portlet_list)) {
            //Portlet List Not Found
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_PORTLET_LIST_NOT_FOUND);
        }

        //Return Portlet List
        return $portlet_list;
    }

    /**
     * Add New Portlet
     *
     * @param  string $portlet_name    //Portlet Name
     * @param  string $portlet_type    //Portlet Type
     * @param  int    $group_id        //Portlet Group ID
     * @param  int    $portlet_version //Portlet Version
     *
     * @return object $portlet                   //New Portlet Object
     */
    function addBase($portlet_name, $portlet_type, $group_id, $portlet_version)
    {
        //Check Arguments
        require_once('fw/string_util.csp');
        require_once('portal/error_code.csp');
        cb_trim_check($portlet_name,
            E_GRN_PRTL_PORTLET_NOT_INPUT_NECESSARY);   //portlet name
        cb_trim_check($portlet_type,
            E_GRN_PRTL_PORTLET_NOT_INPUT_NECESSARY);   //portlet type
        cb_trim_check($portlet_version,
            E_GRN_PRTL_PORTLET_NOT_INPUT_NECESSARY);   //portlet version

        //Create New Portlet Object
        $user = null;
        $portlet_manager = $this->_getPortletManager();
        $new_portlet = $portlet_manager->create($user);

        //Get Portlet Group Object
        if (strlen($group_id) > 0) {
            $portlet_group_manager = $this->_getPortletGroupManager();
            $portlet_group_list = $portlet_group_manager->getList($user);
            if ( ! $portlet_group_list) {
                //Portlet Group List Not Found
                require_once('portal/error_code.csp');
                cb_throw_error(E_GRN_PRTL_PORTLET_GROUP_LIST_NOT_FOUND);
            }

            //Modify Portlet Group
            $portlet_group = $portlet_group_list[$group_id];
            if ( ! $portlet_group) {
                //Portlet Group Not Found
                require_once('portal/error_code.csp');
                cb_throw_error(E_GRN_PRTL_PORTLET_GROUP_NOT_FOUND);
            }
            $portlet_group->addPortlet($new_portlet);
        }

        //Set Portlet Properties
        $new_portlet->set(GRN_PRTL_PROPERTY_NAME,
            $portlet_name);            //Name
        $new_portlet->set(GRN_PRTL_PROPERTY_TYPE,
            $portlet_type);            //Type
        $new_portlet->set(GRN_PRTL_PROPERTY_VERSION,
            $portlet_version);      //Version

        //Set Creator Information
        $this->_setCreator($new_portlet);

        //Return New Portlet Object
        return $new_portlet;
    }

    /**
     * Modify Portlet
     *
     * @param  int    $portlet_id      //Portlet ID
     * @param  string $portlet_name    //Portlet Name
     * @param  int    $group_id        //Portlet Group ID
     * @param  int    $portlet_version //Portlet Version
     *
     * @return object $portlet                   //Portlet Object
     */
    function modifyBase($portlet_id, $portlet_name, $group_id, $portlet_version)
    {
        //Check Arguments
        require_once('fw/string_util.csp');
        require_once('portal/error_code.csp');
        cb_trim_check($portlet_id,
            E_GRN_PRTL_PORTLET_INVALID_ID);             //portlet id
        cb_trim_check($portlet_name,
            E_GRN_PRTL_PORTLET_NOT_INPUT_NECESSARY);    //portlet name
        cb_trim_check($portlet_version,
            E_GRN_PRTL_PORTLET_NOT_INPUT_NECESSARY);    //portlet version

        //Get Portlet Object
        $portlet = $this->get($portlet_id);

        //Get Portlet Group Object**/
        if (strlen($group_id) > 0) {
            $user = null;
            $portlet_group_manager =& $this->_getPortletGroupManager();
            $portlet_group_list = $portlet_group_manager->getList($user);
            if ( ! $portlet_group_list) {
                //Portlet Group List Not Found
                require_once('portal/error_code.csp');
                cb_throw_error(E_GRN_PRTL_PORTLET_GROUP_LIST_NOT_FOUND);
            }

            //Modify Portlet Group
            $portlet_group = $portlet_group_list[$group_id];
            if ( ! $portlet_group) {
                //Portlet Group Not Found
                require_once('portal/error_code.csp');
                cb_throw_error(E_GRN_PRTL_PORTLET_GROUP_NOT_FOUND);
            }
            $portlet_group->addPortlet($portlet);
        } else {
            //Delete Portlet Group
            $portlet->deleteGroup();
        }

        //Set Portlet Properties
        $portlet->set(GRN_PRTL_PROPERTY_NAME, $portlet_name);           //Name

        //Set Modofier Information
        $this->_setModifier($portlet);

        //Return Portlet Object
        return $portlet;
    }

    /**
     * Delete Portlet
     *
     * @param  int $portlet_id //Portlet ID
     *
     * @return void
     */
    function delete($portlet_id)
    {
        //Check Arguments
        require_once('fw/string_util.csp');
        require_once('portal/error_code.csp');
        cb_trim_check($portlet_id,
            E_GRN_PRTL_PORTLET_INVALID_ID);             //portlet id

        //Get Portlet Object
        $portlet =& $this->get($portlet_id);

        //Delete Portlet Object
        $portlet->delete();

        return;
    }

    /**
     * Change Portal Order
     *
     * @param  array $portlet_id_list //Portlet ID List
     *
     * @return void
     */
    function changeOrder($portlet_id_list)
    {
        //Check Argument
        if ( ! is_array($portlet_id_list)) {
            return;
        }

        //Change Portlet Order
        $user = null;
        $portlet_manager =& $this->_getPortletManager();
        $portlet_manager->changeOrder($user, $portlet_id_list);

        return;
    }

    /**
     * Change Portlet Open Status
     *
     * @param  int $layout_id   //Layout ID
     * @param  int $open_status //Open Status
     *
     * @return GRN_Portal_PortletLayout $layout  //Layout Object
     */
    function changeOpenStatus($layout_id, $open_status = null)
    {
        //Get Portlet layout Object
        require_once('portal/portlet_layout_logic.csp');
        $portlet_layout_logic = GRN_Portal_PortletLayoutLogic::getInstance();
        $layout = $portlet_layout_logic->get($layout_id);
        if ( ! $layout) {
            //Portlet Layout Not Found
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_PORTLET_LAYOUT_NOT_FOUND);
        }

        //Change Portlet layout Open Status
        if (is_null($open_status)) {
            $layout_is_open = $layout->get(GRN_PRTL_PROPERTY_IS_OPEN);
            if ($layout_is_open == '1') {
                $open_status = '0';
            } else {
                $open_status = '1';
            }
        }
        $layout->set(GRN_PRTL_PROPERTY_IS_OPEN, $open_status);

        //Return Layout Object
        return $layout;
    }

    /**
     * Change Portlet Display Name
     *
     * @param  int    $layout_id    //Layout ID
     * @param  string $display_name //Display Name
     *
     * @return object $layout                    //Layout Object
     */
    function changeDisplayName($layout_id, $display_name)
    {
        //Check Argument
        $display_name = cb_trim($display_name);

        //Get Portlet layout Object
        require_once('portal/portlet_layout_logic.csp');
        $portlet_layout_logic = GRN_Portal_PortletLayoutLogic::getInstance();
        $layout = $portlet_layout_logic->get($layout_id);
        if ( ! $layout) {
            //Portlet Layout Not Found
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_PORTLET_LAYOUT_NOT_FOUND);
        }

        //Change Portlet layout Oprn Status
        $layout->set(GRN_PRTL_PROPERTY_DISPLAY_NAME, $display_name);

        //Return Layout Object
        return $layout;
    }

    /**
     * Get Display Name
     *
     * @param  object $portlet //Portlet Object
     * @param  object $layout  //Layout Object
     *
     * @return string                        // Display name
     */
    function getDisplayName(&$portlet, &$layout)
    {
        $display_name = '';

        //Get Display Name From Layout Object
        if ($layout) {
            $display_name = $layout->get(GRN_PRTL_PROPERTY_DISPLAY_NAME);
        }

        if ( ! $display_name) {
            //Get Display Name From Portlet Name
            $display_name = $portlet->get(GRN_PRTL_PROPERTY_NAME);
        }

        //Return Portlet Display Name
        return $display_name;
    }

    //Portlet Logic Utility Methods

    /**
     * get Owner
     *
     * @access  private
     * @return object $owner                     //Owner Object
     */
    function _getOwner()
    {
        //Get Login User
        global $G_container_base;
        $grn_uum = $G_container_base->getInstance('uum');
        $login_user = $grn_uum->getLoginUser();
        if ( ! $login_user) {
            //My Portlet Need Login
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_PORTLET_NEED_LOGIN);
        }

        //Return Login User
        return $login_user;
    }

    /**
     * Set Creator
     *
     * @access  private
     *
     * @param  object $object //Target Object
     *
     * @return bool   $result                    //Result
     */
    function _setCreator(& $object)
    {
        //Check Argument
        if ( ! $object) {
            return false;
        }

        //Get Login User
        global $G_container_base;
        $grn_uum = $G_container_base->getInstance('uum');
        $login_user = $grn_uum->getLoginUser();

        //Get Create Time
        $ctime = new CB_TimeStamp();
        $ctime->unix_ts = time();

        //Set Create Information
        if ($login_user) {
            $login_user_name = $login_user->get(GRN_PRTL_PROPERTY_DISPLAY_NAME);
            $object->set(GRN_PRTL_PROPERTY_CREATOR,
                $login_user);               //Creator
            $object->set(GRN_PRTL_PROPERTY_MODIFIER,
                $login_user);              //Modifier
            $object->set(GRN_PRTL_PROPERTY_CREATOR_NAME,
                $login_user_name);     //Creator Name
            $object->set(GRN_PRTL_PROPERTY_MODIFIER_NAME,
                $login_user_name);    //Modifier Name
        }
        $object->set(GRN_PRTL_PROPERTY_CTIME, $ctime);  //Create Time
        $object->set(GRN_PRTL_PROPERTY_MTIME, $ctime);  //Modify Time

        return true;
    }

    /**
     * Set Modofier
     *
     * @access  private
     *
     * @param  object $object //Target Object
     *
     * @return bool   $result                    //Result
     */
    function _setModifier(& $object)
    {
        //Check Argument
        if ( ! $object) {
            return false;
        }

        //Get Login User
        global $G_container_base;
        $grn_uum = $G_container_base->getInstance('uum');
        $login_user = $grn_uum->getLoginUser();

        //Get Modofy Time
        $mtime = new CB_TimeStamp();
        $mtime->unix_ts = time();

        //Set Modify Information
        if ($login_user) {
            $login_user_name = $login_user->get(GRN_PRTL_PROPERTY_DISPLAY_NAME);
            $object->set(GRN_PRTL_PROPERTY_MODIFIER,
                $login_user);              //Modifier
            $object->set(GRN_PRTL_PROPERTY_MODIFIER_NAME,
                $login_user_name);    //Modifier Name

        }
        $object->set(GRN_PRTL_PROPERTY_MTIME, $mtime);  //Modify Time

        return true;
    }

    /**
     * CSV read lines
     *
     * @access  public
     *
     * @param  string   inFilePath      //CSV FilePath
     * @param  string   inCharset       //read charset
     * @param  int      inSkipLineCount //read charset
     * @param  int      inMaxReadCount  //read charset
     *
     * @return array    readLines       //CSV read lines
     */
    public function readLinesCSV(
        $inFilePath,
        $inCharset,
        $inSkipLineCount = 0,
        $inMaxReadCount = 5
    ) {
        require_once('fw/csv.csp');
        $csv = new CB_CSVReader($inCharset, $inFilePath);

        // サンプル行の読み込み
        $lines = [];
        $readCnt = 0;
        while ($readCnt < $inMaxReadCount) {
            if (($line = $csv->readLine()) !== false) {
                if ($inSkipLineCount > 0) {
                    --$inSkipLineCount;
                    continue;
                }
                $lines[] = $line;
            } else {
                break;
            }
            $readCnt++;
        }

        return $lines;
    }

    /**
     * get portlet name
     *
     * @access  public
     *
     * @param  int      inPortletId     //portlet id
     *
     * @return string   result          //portlet name
     */
    public function getPortletName($inPortletId)
    {
        $result = "";

        require_once('portal/PortalFacade.csp');
        $portalDAO = new PortalFacade();
        $dataObj = [];
        $portlet = $portalDAO->referPortletById($dataObj, $inPortletId);
        $portletType = $portlet->getType();
        if ($portletType === GRN_PRTL_PORTLET_TYPE_HTML
            || $portletType === GRN_PRTL_PORTLET_TYPE_PHP
        ) {
            $result = $portlet->getName();
        } else    // get system application portlet name
        {
            require_once('grn/application.csp');
            $app_locator = GRN_ApplicationLocator::instance();

            //Get Target Portlet Type
            $portletTypeElements = explode('.', $portletType);
            $appName
                = $app_locator->getName($portletTypeElements[1]);
            $appModuleId = $portletTypeElements[0] . '.'
                           . $portletTypeElements[1];

            //Get Display Portlet Display Name
            $result = cb_plain_msg($appModuleId, $portletType,
                ['app_name' => $appName]);
        }

        return $result;
    }

    public function createMultiLanguageValuesArray($inPortletId)
    {
        $resultArray = [];

        require_once('portal/PortalFacade.csp');
        $portalDAO = new PortalFacade();

        $dataObj = [];
        $portlet
            = $portalDAO->referPortletById($dataObj,
            $inPortletId);
        $resultArray[CB_I18N_DEFUALT_LANGUAGE_CODE] = $portlet->getName();

        $dataObj = [];
        $portletLocalList = $portalDAO->getPortletLocalListByPortletId($dataObj,
            $inPortletId);
        foreach ($portletLocalList as $portletLocal) {
            $resultArray[$portletLocal->getLanguageCode()]
                = $portletLocal->getName();
        }

        return $resultArray;
    }

    /**
     * Change Portlet Display Name Mode
     *
     * @param  int    $layoutId        //Layout ID
     * @param  string $displayNameMode //Display Name Mode
     *
     * @return void
     */
    function changeDisplayNameMode($layoutId, $displayNameMode)
    {
        //Get Portlet layout Object
        require_once('portal/portlet_layout_logic.csp');
        $portlet_layout_logic = GRN_Portal_PortletLayoutLogic::getInstance();
        $layout = $portlet_layout_logic->get($layoutId);
        if ( ! $layout) {
            //Portlet Layout Not Found
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_PORTLET_LAYOUT_NOT_FOUND);
        }

        //Change Portlet Layout Display Name Mode
        $layout->set(GRN_PRTL_PROPERTY_DISPLAY_NAME_MODE, $displayNameMode);

        return;
    }

    /**
     * Get Display Name Mode
     *
     * @param  int $layout_id //Layout ID
     *
     * @return string                        // Display name mode
     */
    function getDisplayNameMode($inPortletLayoutId)
    {
        require_once('portal/PortalFacade.csp');
        $portalDAO = new PortalFacade();

        $dataObj = [];
        $portletLayout = $portalDAO->referPortletLayoutById($dataObj,
            $inPortletLayoutId);
        $displayNameMode = $portletLayout->getDisplayNameMode();

        //Return Portlet Display Name Mode
        return $displayNameMode;
    }
}

;

/**
 * System Embbeded Portlet Logic Class
 *
 * @package grn.portal
 */
class GRN_Portal_SystemEmbeddedPortletLogic
    extends GRN_Portal_SystemPortletLogicBase
{
    //Application Name and Application Embedded Portlet Name Cache
    var $_app_name_list = [];
    var $_app_portlet_name_list = [];

    //embedded portlet list cache
    var $_embedded_portlet_list_cache = [];

    /**
     * Constructor
     *
     * @access private
     */
    function __construct()
    {

    }

    /** @var self */
    private static $_instance = null;

    /**
     * Get System Embedded Portlet Logic Instance
     *
     * @return GRN_Portal_SystemEmbeddedPortletLogic
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    //System Embbeded Portlet Logic Methods

    /**
     * Get System Embedded Portlet List
     *
     * @access  public
     *
     * @param  boolean $isUseLocal
     *
     * @return mixed  $system_embedded_portlet_list  //System Embedded Portlet List
     *
     */
    function &getList($isUseLocal = true)
    {
        $system_embedded_portlet_list = [];

        //Get System Portlet List
        $portlet_list = parent::getList();
        if ($portlet_list) {
            //GTM-1602
            //Reorder to make Space todo portlets before Bookmarks portlet in portlet list
            require_once('space/GrnSpaceApplication.csp');
            $todo_undertake_id = null;
            $todo_rely_id = null;
            $space_todo = [];
            $link_id = null;
            $find_link_portlet = false;
            $length = 0;
            foreach ($portlet_list as $portlet_id => $portlet) {
                $type = $portlet->get(GRN_PRTL_PROPERTY_TYPE);
                if ($type == GrnSpaceApplication::PORTLET_TODO_UNDERTAKE) {
                    $todo_undertake_id = $portlet_id;
                    $space_todo[$portlet_id] = $portlet;
                } elseif ($type == GrnSpaceApplication::PORTLET_TODO_RELY) {
                    $todo_rely_id = $portlet_id;
                    $space_todo[$portlet_id] = $portlet;
                } elseif ($type == 'grn.link.link') {
                    $link_id = $portlet_id;
                    $find_link_portlet = true;
                } elseif ( ! $find_link_portlet) {
                    $length++;
                }
            }
            $compare_id = $todo_undertake_id > $todo_rely_id ? $todo_rely_id
                : $todo_undertake_id;
            if ($compare_id > $link_id) {
                //Space todo portlets are behind Bookmarks portlet
                unset($portlet_list[$todo_undertake_id], $portlet_list[$todo_rely_id]);
                $portlet_list = array_slice($portlet_list, 0, $length, true)
                                + $space_todo + array_slice($portlet_list,
                        $length, count($portlet_list) - $length, true);
            }
            //GTM-1602 end

            foreach (array_keys($portlet_list) as $portlet_id) {
                //Check HTML and PHP Portlet
                $type = $portlet_list[$portlet_id]->get(GRN_PRTL_PROPERTY_TYPE);
                if ($type == GRN_PRTL_PORTLET_TYPE_HTML
                    || $type == GRN_PRTL_PORTLET_TYPE_PHP
                ) {
                    //Not Embedded Portlet
                    continue;
                }

                //Check Available Portlet
                if ($this->checkAvailable($portlet_list[$portlet_id])) {
                    $system_embedded_portlet_list[$portlet_id]
                        = $portlet_list[$portlet_id];
                }
            }
        }

        //Return System Embedded Portlet List
        return $system_embedded_portlet_list;
    }

    /**
     * Add New System Embedded Portlet
     *
     * @access  public
     *
     * @param  string $portlet_name    //Portlet Name
     * @param  string $portlet_type    //Portlet Type
     * @param  int    $group_id        //Group ID
     * @param  int    $portlet_version //Portlet Version
     * @param  string $portlet_set     //Portlet Setting Template
     * @param  string $portlet_view    //Portlet View Template
     *
     * @return object $portlet              //New Portlet
     */
    function add(
        $portlet_name,
        $portlet_type,
        $group_id,
        $portlet_version,
        $portlet_set,
        $portlet_view
    ) {
        //Check Arguments
        require_once('fw/string_util.csp');
        require_once('portal/error_code.csp');
        cb_trim_check($portlet_view,
            E_GRN_PRTL_PORTLET_INVALID_APPLICATION);   //portlet view

        //Create System Portlet
        $new_portlet = parent::addBase($portlet_name, $portlet_type, $group_id,
            $portlet_version);

        //Set Embedded Portlet Properties
        if (is_string($portlet_set)) {
            $new_portlet->set(GRN_PRTL_PROPERTY_SET_TEMPLATE, $portlet_set);
        }
        $new_portlet->set(GRN_PRTL_PROPERTY_VIEW_TEMPLATE, $portlet_view);
        $new_portlet->set(GRN_PRTL_PROPERTY_AVAILABLE_MYPORTAL, 1);

        //Return New Portlet
        return $new_portlet;
    }

    /**
     * Modify System Embedded Portlet
     *
     * @access  public
     *
     * @param  int    $portlet_id      //Portlet ID
     * @param  string $portlet_name    //Portlet Name
     * @param  int    $group_id        //Group ID
     * @param  int    $portlet_version //Portlet Version
     * @param  string $portlet_set     //Portlet Setting Template
     * @param  string $portlet_view    //Portlet View Template
     *
     * @return object $portlet                   //Portlet Object
     */
    function modify(
        $portlet_id,
        $portlet_name,
        $group_id,
        $portlet_version,
        $portlet_set,
        $portlet_view
    ) {
        //Check Arguments
        require_once('fw/string_util.csp');
        require_once('portal/error_code.csp');
        cb_trim_check($portlet_view,
            E_GRN_PRTL_PORTLET_INVALID_APPLICATION);   //portlet view

        //Modify System Portlet
        $portlet = parent::modifyBase($portlet_id, $portlet_name, $group_id,
            $portlet_version);

        //Set Embedded Portlet Properties
        if (is_string($portlet_set)) {
            $portlet->set(GRN_PRTL_PROPERTY_SET_TEMPLATE, $portlet_set);
        }
        $portlet->set(GRN_PRTL_PROPERTY_VIEW_TEMPLATE, $portlet_view);
        // TODO Bug
        $new_portlet->set(GRN_PRTL_PROPERTY_AVAILABLE_MYPORTAL, 1);

        //Return Portlet
        return $portlet;
    }

    /**
     * Register System Embedded Portlet
     *
     * @access  private
     * @return void
     */
    function register()
    {
        //Get Portlet List
        $user = null;
        global $G_container_app;
        $portlet_mgr
            = $G_container_app->getInstance(GRN_PRTL_LWC_ID_PORTLET_MANAGER);
        $portlet_list = $portlet_mgr->getList($user);

        //Get Application Instance
        require_once('grn/application.csp');
        $app_locator = GRN_ApplicationLocator::instance();
        $apps = $app_locator->getInstancesWithMethod('getPortletList',
            false);
        foreach ($apps as $app) {
            //Get Application Portlet
            $app_portlet_list = $app->getPortletList();
            foreach ($app_portlet_list as $app_portlet) {
                $status = 'register';
                $update_portlet_id = 0;
                foreach (array_keys($portlet_list) as $portlet_id) {
                    //Check Aplication Portlet Type
                    if ($app_portlet[GRN_PRTL_PROPERTY_TYPE]
                        === $portlet_list[$portlet_id]->get(GRN_PRTL_PROPERTY_TYPE)
                    ) {
                        //Check Aplication Portlet Version
                        if (intval($app_portlet[GRN_PRTL_PROPERTY_VERSION])
                            === intval($portlet_list[$portlet_id]->get(GRN_PRTL_PROPERTY_VERSION))
                        ) {
                            $status = 'unregister';
                            break;
                        } else {
                            $status = 'update';
                            $update_portlet_id = $portlet_id;
                            break;
                        }
                    }
                }

                //Register Or Update Application Portlet
                if ($status === 'register') {
                    //Register Application Portlet
                    $this->add($app_portlet[GRN_PRTL_PROPERTY_NAME],
                        $app_portlet[GRN_PRTL_PROPERTY_TYPE], "",
                        $app_portlet[GRN_PRTL_PROPERTY_VERSION],
                        @$app_portlet[GRN_PRTL_PROPERTY_SET_TEMPLATE],
                        @$app_portlet[GRN_PRTL_PROPERTY_VIEW_TEMPLATE]
                    );
                } elseif ($status === 'update') {
                    //Update Application Portlet
                    $this->modify($update_portlet_id,
                        $app_portlet[GRN_PRTL_PROPERTY_NAME], "",
                        $app_portlet[GRN_PRTL_PROPERTY_VERSION],
                        @$app_portlet[GRN_PRTL_PROPERTY_SET_TEMPLATE],
                        @$app_portlet[GRN_PRTL_PROPERTY_VIEW_TEMPLATE]
                    );
                }
            }
        }

        return;
    }

    /**
     * Get Display Name
     *
     * @access  private
     *
     * @param  object $portlet //Portlet
     * @param  object $layout  //Layout
     *
     * @return string $display_name              //Display Name
     */
    function getDisplayName(&$portlet, &$layout)
    {
        $display_name = '';

        //Get Display Name From Layout Object
        if ($layout) {
            $display_name = $layout->get(GRN_PRTL_PROPERTY_DISPLAY_NAME);
        }

        if ( ! $display_name) {
            //Get Application Locator
            require_once('grn/application.csp');
            $app_locator = GRN_ApplicationLocator::instance();

            //Get Target Portlet Type
            $portlet_type = $portlet->get(GRN_PRTL_PROPERTY_TYPE);
            if ( ! array_key_exists($portlet_type,
                $this->_app_portlet_name_list)
            ) {
                //Get Application Name
                $portlet_type_elements = explode('.', $portlet_type);
                if ( ! array_key_exists($portlet_type_elements[1],
                    $this->_app_name_list)
                ) {
                    $this->_app_name_list[$portlet_type_elements[1]]
                        = $app_locator->getName($portlet_type_elements[1]);
                }
                $app_name = $this->_app_name_list[$portlet_type_elements[1]];
                $app_module_id = $portlet_type_elements[0] . '.'
                                 . $portlet_type_elements[1];

                //Get Display Portlet Display Name
                $this->_app_portlet_name_list[$portlet_type]
                    = cb_plain_msg($app_module_id, $portlet_type,
                    ['app_name' => $app_name]);
            }
            $display_name = $this->_app_portlet_name_list[$portlet_type];
        }

        //Return Portlet Display Name
        return $display_name;
    }

    /**
     * Check Available Portlet
     *
     * @access  private
     *
     * @param  object $portlet //Portllet Object
     *
     * @return bool   $result                    //Check Result
     */
    function checkAvailable(& $portlet)
    {
        //Check HTML and PHP Portlet
        $type = $portlet->get(GRN_PRTL_PROPERTY_TYPE);
        if ($type == GRN_PRTL_PORTLET_TYPE_HTML
            || $type == GRN_PRTL_PORTLET_TYPE_PHP
        ) {
            //HTML and PHP Portlet Always True
            return true;
        }

        //Get Application Locator
        require_once('grn/application.csp');
        $app_locator = GRN_ApplicationLocator::instance();

        //Get Embedded Portlet Host Application ID
        $type_elements = explode('.', $type);
        $app_id = $type_elements[1];

        //Check Host Application Active and Available Status
        if ( ! $app_locator->isActive($app_id)) {
            //Host Application Not Active
            return false;
        }

        if ( ! AppAccess::isAppAvailableInternalAccess($app_id, null, true)) {
            //Host Application Not Available
            return false;
        }

        if ( ! AppAccess::isAppAvailableExternalAccess($app_id)) {
            return false;
        }

        if ($app_id === 'workflow' || $app_id === 'report') {
            return $app_locator->isLicensed($app_id);
        }
        //Get Embedded Portlet List
        if ( ! array_key_exists($app_id, $this->_embedded_portlet_list_cache)) {
            $app = $app_locator->getInstance($app_id);
            if ($app) {
                $this->_embedded_portlet_list_cache[$app_id]
                    = $app->getPortletList();
            }
        }

        if (array_key_exists($app_id, $this->_embedded_portlet_list_cache)) {
            $embedded_portlet_list
                = $this->_embedded_portlet_list_cache[$app_id];

            //Check Portlet Type and Version
            $version = $portlet->get(GRN_PRTL_PROPERTY_VERSION);
            foreach ($embedded_portlet_list as $embedded_portlet) {
                if ($type == $embedded_portlet['type']
                    && $version == $embedded_portlet['version']
                ) {
                    //Match Portlet Type and Version
                    return true;
                }
            }
        }

        //Not Embedded Portlet
        return false;
    }
}

;

/**
 * System HTML Portlet Logic Class
 *
 * @package grn.portal
 */
class GRN_Portal_SystemHTMLPortletLogic
    extends GRN_Portal_SystemPortletLogicBase
{
    /**
     * Constructor
     *
     * @access private
     */
    function __construct()
    {

    }

    /**
     * Get System HTML Portlet Logic Instance
     *
     * @access  public
     *
     * @param  none
     *
     * @return  $_instance    GRN_Portal_SystemHTMLPortletLogic
     *        Instance of System HTML Portlet Logic
     */
    private static $_instance = null;

    /**
     * @return GRN_Portal_SystemHTMLPortletLogic
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    //System HTML Portlet Logic Methods

    /**
     * Get System HTML Portlet List
     *
     * @access  public
     *
     * @param  boolean  isUseLocal
     *
     * @return mixed  $system_html_portlet_list  //System HTML Portlet List
     */
    function &getList($isUseLocal = true)
    {
        $system_html_portlet_list = [];

        //Get System Portlet List
        $portlet_list = &parent::getList($isUseLocal);
        if ($portlet_list) {
            foreach (array_keys($portlet_list) as $portlet_id) {
                $portlet_type
                    = $portlet_list[$portlet_id]->get(GRN_PRTL_PROPERTY_TYPE);
                if ($portlet_type === GRN_PRTL_PORTLET_TYPE_HTML) {
                    $system_html_portlet_list = $system_html_portlet_list
                                                + [$portlet_id => $portlet_list[$portlet_id]];
                }
            }
        }

        //Return System HTML Portlet List
        return $system_html_portlet_list;
    }

    /**
     * Add New System HTML Portlet
     *
     * @access  public
     *
     * @param  string $portlet_name               //Portlet Name
     * @param  int    $group_id                   //Group ID
     * @param  string $portlet_source             //Portlet Source
     * @param  int    $portlet_available_myportal //Portlet Available My Portal
     * @param  int    $portlet_editor             //Use Portlet Editor Flag
     *
     * @return object $portlet                       //New Portlet
     */
    function add(
        $portlet_name,
        $group_id,
        $portlet_source,
        $portlet_available_myportal,
        $portlet_editor = 0
    ) {
        //Check Arguments
        if (strlen($portlet_source) <= 0) {
            //Not Input Necessary Item
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_PORTLET_NOT_INPUT_NECESSARY);
        }

        //Create System Portlet
        $new_portlet = parent::addBase($portlet_name,
            GRN_PRTL_PORTLET_TYPE_HTML, $group_id,
            GRN_PRTL_PORTLET_VERSION_HTML);

        //Set HTML Portlet Properties
        $new_portlet->set(GRN_PRTL_PROPERTY_VIEW_TEMPLATE,
            GRN_PRTL_PORTLET_VIEW_HTML);
        $new_portlet->set(GRN_PRTL_PROPERTY_SOURCE, $portlet_source);
        $new_portlet->set(GRN_PRTL_PROPERTY_AVAILABLE_MYPORTAL,
            $portlet_available_myportal);
        $new_portlet->set(GRN_PRTL_PROPERTY_EDITOR, $portlet_editor);

        //Return New Portlet
        return $new_portlet;
    }

    /**
     * Modify System HTML Portlet
     *
     * @access  public
     *
     * @param  int    $portlet_id                 //Portlet ID
     * @param  string $portlet_name               //Portlet Name
     * @param  int    $group_id                   //Group ID
     * @param  string $portlet_source             //Portlet Source
     * @param  int    $portlet_available_myportal //Portlet Available My Portal
     * @param  int    $portlet_editor             //Use Portlet Editor Flag
     *
     * @return object $portlet                       //Portlet
     */
    function modify(
        $portlet_id,
        $portlet_name,
        $group_id,
        $portlet_source,
        $portlet_available_myportal,
        $portlet_editor = 0
    ) {
        //Modify System Portlet
        $portlet = parent::modifyBase($portlet_id, $portlet_name, $group_id,
            GRN_PRTL_PORTLET_VERSION_HTML);

        //Set Embedded Portlet Properties
        $portlet->set(GRN_PRTL_PROPERTY_VIEW_TEMPLATE,
            GRN_PRTL_PORTLET_VIEW_HTML);
        $portlet->set(GRN_PRTL_PROPERTY_SOURCE, $portlet_source);
        $portlet->set(GRN_PRTL_PROPERTY_AVAILABLE_MYPORTAL,
            $portlet_available_myportal);
        $portlet->set(GRN_PRTL_PROPERTY_EDITOR, $portlet_editor);

        //Return Portlet
        return $portlet;
    }

    /**
     * Attach RichEditor File To System HTML Portlet
     *
     * @access  private
     *
     * @param  int   $portlet_id   //Portlet ID
     * @param  array $file_id_list //RichEditor File ID List
     *
     * @return none
     */
    function addFileList($portlet_id, $file_id_list)
    {
        //Check Arguments
        require_once('fw/string_util.csp');
        require_once('portal/error_code.csp');
        cb_trim_check($portlet_id,
            E_GRN_PRTL_PORTLET_INVALID_ID);             //portlet id

        //Create Document ID
        $doc_id = GRN_PRTL_PORTLET_TYPE_HTML . '.' . $portlet_id;

        //Commit File List
        require_once('grn/re_file.csp');
        global $G_container_base;
        $file_binder = $G_container_base->getInstance('re_file_binder');
        $file_binder->commitFiles($file_id_list, $doc_id, true);

        return;
    }

    /**
     * Delete RichEditor File From System HTML Portlet
     *
     * @access  private
     *
     * @param  int $portlet_id //Portlet ID
     *
     * @return none
     */
    function deleteFileList($portlet_id)
    {
        //Check Arguments
        require_once('fw/string_util.csp');
        require_once('portal/error_code.csp');
        cb_trim_check($portlet_id,
            E_GRN_PRTL_PORTLET_INVALID_ID);             //portlet id

        //Create Document ID
        $doc_id = GRN_PRTL_PORTLET_TYPE_HTML . '.' . $portlet_id;

        //Delete File List
        require_once('grn/re_file.csp');
        global $G_container_base;
        $file_binder = $G_container_base->getInstance('re_file_binder');
        $file_binder->deleteFiles($doc_id);

        return;
    }

    /**
     * Import System HTML Portlet Multiple
     *
     * @access  private
     *
     * @param  array $file //Portlet File
     * @param  int    portlet_group_id           //Target Portlet Group ID(0:All)
     *
     * @return mixed  portlet_list               //Imported Portlet Object List
     */
    function importMulti($file, $portlet_group_id = 0)
    {
        $portlet_list = [];

        //Check Import Portlet File Exists
        if ( ! file_exists($file['tmp_name'])) {
            //Portlet Invald Reed File
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_PORTLET_INVALID_REED_FILE);
        }

        //Open Import Portlet File
        $xml_reader = new XMLReader();
        if ( ! $xml_reader->open($file['tmp_name'])) {
            //Portlet Invald Reed File
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_PORTLET_INVALID_REED_FILE);
        }

        //Read Portlet Information
        while (@$xml_reader->read()) {
            //Check HTML Portlet
            if (strcmp($xml_reader->name, 'html_portlet') === 0) {
                //Read Portlet Properties
                $node_name = '';
                $properties = [];
                $portlet_files = [];
                while ($xml_reader->read()
                       && strcmp($xml_reader->name, 'html_portlet') !== 0) {
                    $node_type = $xml_reader->nodeType;
                    switch ($node_type) {
                        case XMLReader::ELEMENT:
                            $node_name = $xml_reader->name;
                            $properties[$node_name] = '';
                            if ($node_name === GRN_PRTL_PROPERTY_FILES) {
                                if ($xml_reader->getAttribute('count')
                                    !== '0'
                                ) {
                                    //Import All Portlet Files
                                    $this->_importAllFile($portlet_files,
                                        $xml_reader);
                                }
                            }
                            break;
                        case XMLReader::TEXT:
                            $properties[$node_name] = $xml_reader->value;
                            break;
                        case XMLReader::CDATA:
                            $properties[$node_name] = $xml_reader->value;
                            break;
                        case XMLReader::END_ELEMENT:
                            $node_name = '';
                            break;
                    }
                }

                //Create New System HTML Portlet
                if ($portlet_group_id == 0) {
                    $portlet =& $this->add($properties[GRN_PRTL_PROPERTY_NAME],
                        '', $properties[GRN_PRTL_PROPERTY_SOURCE],
                        $properties[GRN_PRTL_PROPERTY_AVAILABLE_MYPORTAL],
                        $properties[GRN_PRTL_PROPERTY_EDITOR]);
                } else {
                    $portlet =& $this->add($properties[GRN_PRTL_PROPERTY_NAME],
                        $portlet_group_id,
                        $properties[GRN_PRTL_PROPERTY_SOURCE],
                        $properties[GRN_PRTL_PROPERTY_AVAILABLE_MYPORTAL],
                        $properties[GRN_PRTL_PROPERTY_EDITOR]);
                }

                //Get Portlet Source
                $portlet_source = $portlet->get(GRN_PRTL_PROPERTY_SOURCE);

                //Create Portlet Files
                $user = null;
                $new_portlet_file_id_list = [];
                foreach (array_keys($portlet_files) as $portlet_file_id) {
                    //Check Temporary File Exists
                    if (file_exists($portlet_files[$portlet_file_id]['tmp_name'])) {
                        //Create Portlet File
                        require_once('grn/re_file.csp');
                        global $G_container_base;
                        $file_binder
                            = $G_container_base->getInstance('re_file_binder');
                        $new_portlet_file_id
                            = $file_binder->addFile($portlet_files[$portlet_file_id]);

                        //Replace Old File ID to NewPortlet File ID
                        $before = 'ofileid=' . $portlet_file_id;
                        $after = 'fileid=' . $new_portlet_file_id;
                        $replaced_source = mb_ereg_replace($before, $after,
                            $portlet_source);
                        $portlet_source = $replaced_source;

                        //Set New Portlet File ID List
                        $new_portlet_file_id_list[] = $new_portlet_file_id;
                    }
                }

                //Set New Portlet Files
                $this->addFileList($portlet->getOID(),
                    $new_portlet_file_id_list);

                //Set Replaced Source
                $portlet->set(GRN_PRTL_PROPERTY_SOURCE, $portlet_source);

                //Add Imported Portlet List
                $portlet_list[$portlet->getOID()] =& $portlet;
            }
        }
        //Close Import Portlet File
        $xml_reader->close();

        //Return Imported Portlet List
        return $portlet_list;
    }

    /**
     * Import All System HTML Portlet File
     *
     * @access  private
     *
     * @param  array  $portlet_files //Portlet Files
     * @param  object $xml_reader    //XML Reader Instance
     *
     * @return none
     */
    function _importAllFile(& $portlet_files, & $xml_reader)
    {
        //Read Portlet File Information
        while ($xml_reader->read()
               && strcmp($xml_reader->name, 'files') !== 0) {
            //Check HTML Portlet File
            if (strcmp($xml_reader->name, 'file') === 0) {
                //Read Portlet File Properties
                $node_name = '';
                $properties[GRN_PRTL_PROPERTY_ID]
                    = $xml_reader->getAttribute(GRN_PRTL_PROPERTY_ID);
                while ($xml_reader->read()
                       && strcmp($xml_reader->name, 'file') !== 0) {
                    $node_type = $xml_reader->nodeType;
                    switch ($node_type) {
                        case XMLReader::ELEMENT:
                            $node_name = $xml_reader->name;
                            break;
                        case XMLReader::TEXT:
                            $properties[$node_name] = $xml_reader->value;
                            break;
                        case XMLReader::CDATA:
                            if ($node_name === GRN_PRTL_PROPERTY_DATA) {
                                //Get Portlet File Data
                                $portlet_file_encoded = $xml_reader->value;
                                $portlet_file_raw
                                    = base64_decode($portlet_file_encoded);

                                //Create Temporary File
                                $temporary_file_name = tempnam(cb_tmpdir(),
                                    'php');
                                $temporary_file_handle
                                    = fopen($temporary_file_name,
                                    'wb');
                                fwrite($temporary_file_handle,
                                    $portlet_file_raw);
                                fclose($temporary_file_handle);
                                $properties[$node_name] = $temporary_file_name;
                            } else {
                                $properties[$node_name] = $xml_reader->value;
                            }
                            break;
                        case XMLReader::END_ELEMENT:
                            $node_name = '';
                            break;
                    }
                }

                //Create Dummy $_FILES Data
                $portlet_file = [];
                $portlet_file['name']
                    = $properties[GRN_PRTL_PROPERTY_NAME];
                $portlet_file['type']
                    = $properties[GRN_PRTL_PROPERTY_MIME];
                $portlet_file['tmp_name']
                    = $properties[GRN_PRTL_PROPERTY_DATA];
                $portlet_file['error'] = 0;
                $portlet_file['size']
                    = filesize($properties[GRN_PRTL_PROPERTY_DATA]);
                $portlet_files[$properties[GRN_PRTL_PROPERTY_ID]]
                    = $portlet_file;
            }
        }

        return;
    }

    /**
     * Export System HTML Portlet Multi
     *
     * @access  private
     *
     * @param  portlet_id_list        //Export Portlet ID List
     *
     * @return mixed  portlet_list    //Exported Portlet List
     */
    function exportMulti($portlet_id_list)
    {
        //Exported Portlet List
        $exported_portlet_list = [];

        //Define Export Portlet Information
        $export_properties = [
            GRN_PRTL_PROPERTY_NAME,                 //Portlet Name
            GRN_PRTL_PROPERTY_TYPE,                 //Portlet Type
            GRN_PRTL_PROPERTY_VERSION,              //Portlet Version
            GRN_PRTL_PROPERTY_SOURCE,               //Portlet Source
            GRN_PRTL_PROPERTY_AVAILABLE_MYPORTAL,   //Available MyPortal Portlet
            GRN_PRTL_PROPERTY_EDITOR,               //Use HTML Editor
        ];

        //Get System HTML Portlet List
        $isUseLocal = false;
        $portlet_list = $this->getList($isUseLocal);

        //Open XML Document
        $xml_writer = new XMLWriter();
        $xml_writer->openURI('php://output');
        $xml_writer->setIndentString(' ');
        $xml_writer->setIndent(true);

        //Start XML Document
        $xml_writer->startDocument('1.0', 'UTF-8', 'yes');
        $xml_writer->startElement('html_portlets');

        //Export All System HTML Portlet
        foreach ($portlet_id_list as $portlet_id) {
            //Check Portlet Exists
            if ( ! array_key_exists($portlet_id, $portlet_list)) {
                //Skip Invalid Portlet ID
                continue;
            }

            //Start html_portlet Node
            $xml_writer->startElement('html_portlet');
            $xml_writer->writeAttribute(GRN_PRTL_PROPERTY_ID, $portlet_id);

            //Export All Properties
            foreach ($export_properties as $export_property) {
                //Export Portlet Property
                $xml_writer->startElement($export_property);
                if ($export_property === GRN_PRTL_PROPERTY_NAME) {
                    $xml_writer->writeCDATA($portlet_list[$portlet_id]->get($export_property));
                } elseif ($export_property === GRN_PRTL_PROPERTY_SOURCE) {
                    $portlet_source
                        = $portlet_list[$portlet_id]->get($export_property);
                    $portlet_source_replaced = mb_ereg_replace('fileid=',
                        'ofileid=', $portlet_source);
                    $xml_writer->writeCDATA($portlet_source_replaced);
                } else {
                    $xml_writer->writeRaw($portlet_list[$portlet_id]->get($export_property));
                }
                $xml_writer->endElement();
            }

            //Export All Files
            $this->_exportAllFile($portlet_list[$portlet_id], $xml_writer);

            //End html_portlet Node
            $xml_writer->endElement();

            //Add Export Portlet List
            $exported_portlet_list[$portlet_id] =& $portlet_list[$portlet_id];
        }

        //End XML Document
        $xml_writer->endElement();
        $xml_writer->EndDocument();

        //Close XML Document
        $xml_writer->flush();

        //Return Exported Portlet List
        return $exported_portlet_list;
    }

    /**
     * Export All System HTML Portlet
     *
     * @access  private
     *
     * @param  object $portlet    //Portlet Object
     * @param  objext $xml_writer //XML Writer Instance
     *
     * @return none
     */
    function _exportAllFile(& $portlet, & $xml_writer)
    {
        //Define Export Portlet FILE Information
        $export_properties = [
            GRN_PRTL_PROPERTY_NAME,                 //Portlet File Name
            GRN_PRTL_PROPERTY_MIME,                 //Portlet File MIME
            GRN_PRTL_PROPERTY_SIZE,                 //Portlet File Size
            GRN_PRTL_PROPERTY_CHARSET,              //Portlet File Charaset
            GRN_PRTL_PROPERTY_DATA,                 //Portlet File Data
        ];

        //Create Document ID
        $doc_id = GRN_PRTL_PORTLET_TYPE_HTML . '.' . $portlet->getOID();;

        //Get Portlet File List
        require_once('grn/re_file.csp');
        global $G_container_base;
        $file_binder = $G_container_base->getInstance('re_file_binder');
        $portlet_file_list = $file_binder->getServerFileList($doc_id);

        //Start files Node
        $xml_writer->startElement(GRN_PRTL_PROPERTY_FILES);
        $xml_writer->writeAttribute('count',
            count(array_keys($portlet_file_list)));

        //Export All Portlet Files
        foreach (array_keys($portlet_file_list) as $portlet_file_id) {
            //Start file Node
            $xml_writer->startElement(GRN_PRTL_PROPERTY_FILE);
            $xml_writer->writeAttribute(GRN_PRTL_PROPERTY_ID, $portlet_file_id);

            //Export All Properties
            foreach ($export_properties as $export_property) {
                //Export Portlet Property
                $xml_writer->startElement($export_property);
                if ($export_property === GRN_PRTL_PROPERTY_NAME) {
                    $xml_writer->writeCDATA($portlet_file_list[$portlet_file_id]->get($export_property));
                } elseif ($export_property === GRN_PRTL_PROPERTY_DATA) {
                    //Read Portlet File Data
                    $portlet_file_handle
                        =& $portlet_file_list[$portlet_file_id]->f_open('rb');
                    $portlet_file_size
                        = $portlet_file_list[$portlet_file_id]->get('size');
                    $portlet_file_raw = '';
                    while ( ! feof($portlet_file_handle)) {
                        $portlet_file_raw .= fread($portlet_file_handle,
                            $portlet_file_size);
                    }
                    fclose($portlet_file_handle);

                    //Base64 Encode
                    $portlet_file_encoded = base64_encode($portlet_file_raw);
                    $xml_writer->writeCDATA($portlet_file_encoded);
                } else {
                    $xml_writer->writeRaw($portlet_file_list[$portlet_file_id]->get($export_property));
                }
                $xml_writer->endElement();
            }
            //End file Node
            $xml_writer->endElement();
        }

        //End files Node
        $xml_writer->endElement();

        return;
    }


    public function createHTMLPortletNameCSV(
        $inCharset,
        $inIsExportHeader,
        $inExportLanguageCodeArray = null
    ) {
        /// テンポラリのファイルを作成
        $tempdir = cb_tmpdir();
        $tempFilename = tempnam($tempdir, 'ptl_');
        $csv = new CB_CSVWriter($inCharset, $tempFilename);

        // 項目名の書き出し
        if ($inIsExportHeader) {
            $header = [];
            $header[] = cb_msg('grn.portal.system',
                'portal_csv_html_portlet_id');
            $header[] = cb_msg('grn.portal.system', 'portal_csv_language_code');
            $header[] = cb_msg('grn.portal.system',
                'portal_csv_html_portlet_name');

            $csv->writeLine($header);
        }

        // 内容の書き出し
        require_once('portal/PortalFacade.csp');
        require_once('portal/inspection.csp');
        $portalDAO = new PortalFacade();
        $dataObj = [];
        $objectList
            = $portalDAO->getPortletLocalListByType_LanguageCodes($dataObj,
            GRN_PRTL_PORTLET_TYPE_HTML, $inExportLanguageCodeArray);
        $inspection = GRN_Portal_Local_Inspection::getInstance();

        foreach ($objectList as $portletLocal) {
            $line = [];
            $line[0] = $portletLocal->getParentId();
            $line[1] = $portletLocal->getLanguageCode();
            $line[2] = $portletLocal->getName();
            $csv->writeLine($line);

            //Check Inspection Message Enabled
            if ($inspection->isEnabled()) {
                //Write Inspection Message
                $message_type = 'html_portlet_local_export';
                $message_args = [
                    'ppid'         => $portletLocal->getParentId(),
                    'languageCode' => $portletLocal->getLanguageCode(),
                    'portlet_name' => $portletLocal->getName()
                ];
                $inspection->record($message_type, $message_args);
            }
        }

        $csv->close();

        return $tempFilename;
    }

    public function deleteHTMLPortletNameCSV($isFilename)
    {
        unlink($isFilename);
    }

    /**
     * CSV read lines
     *
     * @access  public
     *
     * @param  string   inFilePath      //CSV FilePath
     * @param  string   inCharset       //read charset
     * @param  int      inSkipLineCount //read charset
     *
     * @return boolean  success:TRUE
     */
    public function importHTMLPortletNameWithCSV(
        $inFilePath,
        $inCharset,
        $inSkipLineCount = 0
    ) {
        if ( ! $inCharset) {
            global $G_config_common;
            $inCharset = $G_config_common->get('I18N',
                'default_external_encoding');
        }

        require_once('fw/csv.csp');
        $csv = new CB_CSVReader($inCharset, $inFilePath);

        // 先頭行をスキップ
        for ($i = 0; $i < $inSkipLineCount; ++$i) {
            $csv->readLine();
        }

        require_once('portal/PortalFacade.csp');
        require_once('portal/bean/GrnPortalPortletLocal.csp');
        $portalDAO = new PortalFacade();
        $dataObj = [];
        $dataObj['messageTypeAdd'] = 'html_portlet_local_add_import';
        $dataObj['messageTypeModify'] = 'html_portlet_local_modify_import';
        $dataObj['messageTypeDelete'] = 'html_portlet_local_delete_import';
        require_once('fw/i18n.csp');
        $i18n = CB_I18N::getInstance();
        $availableLanguageArray = $i18n->getAvailableLanguages();

        $html_portlet_list = $this->getList();

        while (($line = $csv->readLine()) !== false) {
            if (count($line) != 3) {
                continue;
            }

            // check portlet
            if ( ! array_key_exists($line[0], $html_portlet_list)) {
                cb_throw_error(E_GRN_PRTL_PORTLET_INVALID_ID);
            }

            if ( ! in_array($line[1], $availableLanguageArray)) {
                cb_throw_error(E_COMMON_CSV_LANGUAGE_CODE_INVALID);
            }
            $portletLocal = new GrnPortalPortletLocal();
            $portletLocal->setParentId($line[0]);
            $portletLocal->setLanguageCode($line[1]);
            $portletLocal->setName(cb_trim($line[2]));

            //現時点ではポートレットの読み込みと同じ動きにしているが、本当は読み込み対象がHTMLポートレットなのかチェックする必要があるのでは？
            if (is_null($portletLocal->getName())
                || (strlen($portletLocal->getName()) <= 0)
            ) {
                $portalDAO->deletePortletLocal($dataObj, $portletLocal);
            } else {
                $portalDAO->updatePortletLocal($dataObj, $portletLocal);
            }
        }

        $csv->close();

        return true;
    }

    public function addPortlet(
        $inLocalNameArray,
        $inGroup,
        $inAvailableMyportal,
        $inEditor,
        $inSource,
        $inFileIdList
    ) {
        require_once('portal/inspection.csp');
        require_once('portal/PortalFacade.csp');
        require_once('portal/bean/GrnPortalPortletLocal.csp');
        $portalDAO = new PortalFacade();


        //--------------  default portlet name modify -------------
        $defalutName = $inLocalNameArray[CB_I18N_DEFUALT_LANGUAGE_CODE];

        //Add New System Portal
        $logic = GRN_Portal_SystemHTMLPortletLogic::getInstance();
        $portlet = $logic->add($defalutName, $inGroup, $inSource,
            $inAvailableMyportal, $inEditor);

        //Add RichEditor File List
        $logic->addFileList($portlet->getOID(), $inFileIdList);

        //Check Inspection Message Enabled
        require_once('portal/inspection.csp');
        $inspection = GRN_Portal_System_HTML_Portlet_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            //Write Inspection Message
            $message_type = 'html_portlet_add';
            $message_args = [
                'ppid'         => $portlet->getOID(),
                'portlet_name' => $portlet->get('name')
            ];
            $inspection->record($message_type, $message_args);
        }


        //--------------  portlet local name modify -------------
        //Add System Portal
        $portletId = $portlet->getOID();
        $i18n = CB_I18N::getInstance();
        $availableLanguageArray = $i18n->getAvailableLanguages();
        foreach ($availableLanguageArray as $languageKey) {
            if ((array_key_exists($languageKey, $inLocalNameArray))
                && (strlen(cb_trim($inLocalNameArray[$languageKey])) > 0)
            ) {
                $localName = cb_trim($inLocalNameArray[$languageKey]);

                $dataObj = [];
                $dataObj['messageTypeAdd'] = 'html_portlet_local_add';
                $portletLocal = new GrnPortalPortletLocal();
                $portletLocal->setParentId($portletId);
                $portletLocal->setLanguageCode($languageKey);
                $portletLocal->setName($localName);

                $portalDAO->insertPortletLocal($dataObj, $portletLocal);
            }
        }

        return true;
    }

    public function modifyPortlet(
        $inPortletId,
        $inLocalNameArray,
        $inGroup,
        $inAvailableMyportal,
        $inEditor,
        $inSource,
        $inFileIdList
    ) {
        require_once('portal/inspection.csp');
        require_once('portal/PortalFacade.csp');
        require_once('portal/bean/GrnPortalPortletLocal.csp');
        $portalDAO = new PortalFacade();


        //--------------  default portlet name modify -------------
        $defalutName = $inLocalNameArray[CB_I18N_DEFUALT_LANGUAGE_CODE];

        //Check Inspection Message Enabled
        $inspection = GRN_Portal_System_HTML_Portlet_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            //Get Previous Portlet Name for Inspection Message
            $dataObj = [];
            $portlet = $portalDAO->referPortletById($dataObj, $inPortletId);
            $prev_name = $portlet->getName();
        }

        $logic = GRN_Portal_SystemHTMLPortletLogic::getInstance();
        $portlet = $logic->modify($inPortletId, $defalutName, $inGroup,
            $inSource, $inAvailableMyportal, $inEditor);

        //Modify RichEditor File List
        $logic->addFileList($portlet->getOID(), $inFileIdList);

        //Check Inspection Message Enabled
        if ($inspection->isEnabled()) {
            //Write Inspection Message
            $message_type = 'html_portlet_modify';
            $message_args = [
                'ppid'              => $portlet->getOID(),
                'prev_portlet_name' => $prev_name,
                'next_portlet_name' => $portlet->get('name'),
            ];
            $inspection->record($message_type, $message_args);
        }


        //--------------  portlet local name modify -------------
        $i18n = CB_I18N::getInstance();
        $availableLanguageArray = $i18n->getAvailableLanguages();
        foreach ($availableLanguageArray as $languageKey) {
            if ((array_key_exists($languageKey, $inLocalNameArray))
                && (strlen(cb_trim($inLocalNameArray[$languageKey])) > 0)
            ) {
                $localName = cb_trim($inLocalNameArray[$languageKey]);

                $dataObj = [];
                $dataObj['messageTypeAdd'] = 'html_portlet_local_add';
                $dataObj['messageTypeModify'] = 'html_portlet_local_modify';
                $portletLocal = new GrnPortalPortletLocal();
                $portletLocal->setParentId($inPortletId);
                $portletLocal->setLanguageCode($languageKey);
                $portletLocal->setName($localName);

                $portalDAO->updatePortletLocal($dataObj, $portletLocal);
            } else {
                $dataObj = [];
                $dataObj['messageTypeDelete'] = 'html_portlet_local_delete';
                $portletLocal = new GrnPortalPortletLocal();
                $portletLocal->setParentId($inPortletId);
                $portletLocal->setLanguageCode($languageKey);

                $portalDAO->deletePortletLocal($dataObj, $portletLocal);
            }
        }

        return true;
    }
}

;

/**
 * System PHP Portlet Logic Class
 *
 * @package grn.portal
 */
class GRN_Portal_SystemPHPPortletLogic extends GRN_Portal_SystemPortletLogicBase
{
    /**
     * Constructor
     *
     * @access private
     */
    function __construct()
    {

    }

    /**
     * Get System PHP Portlet Logic Instance
     *
     * @return $_instance    GRN_Portal_SystemPHPPortletLogic
     *        Instance of System PHP Portlet Logic
     */
    private static $_instance = null;

    /**
     * @return GRN_Portal_SystemPHPPortletLogic
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    //System PHP Portlet Logic Methods

    /**
     * Get System PHP Portlet List
     *
     * @access  private
     *
     * @param  boolean $isUseLocal
     *
     * @return mixed  $system_php_portlet_list   //system php portlet list
     */
    function &getList($isUseLocal = true)
    {
        $system_php_portlet_list = [];

        if (defined('ON_FOREST')) {
            return $system_php_portlet_list;
        }

        //Get System Portlet List
        $portlet_list = parent::getList($isUseLocal);
        if ($portlet_list) {
            foreach (array_keys($portlet_list) as $portlet_id) {
                $portlet_type
                    = $portlet_list[$portlet_id]->get(GRN_PRTL_PROPERTY_TYPE);
                if ($portlet_type === GRN_PRTL_PORTLET_TYPE_PHP) {
                    $system_php_portlet_list = $system_php_portlet_list
                                               + [$portlet_id => $portlet_list[$portlet_id]];
                }

            }
        }

        //Return System PHP Portlet List
        return $system_php_portlet_list;
    }

    /**
     * Add New System PHP Portlet
     *
     * @access  public
     *
     * @param  string $portlet_name               //Portlet Name
     * @param  int    $group_id                   //Group ID
     * @param  string $portlet_source             //Portlet Source
     * @param  int    $portlet_available_myportal //Portlet Available My Portal
     *
     * @return object $portlet                    //New Portlet Object
     */
    function add(
        $portlet_name,
        $group_id,
        $portlet_source,
        $portlet_available_myportal
    ) {
        //Check Arguments
        if (strlen($portlet_source) <= 0) {
            //Not Input Necessary Item**/
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_PORTLET_NOT_INPUT_NECESSARY);
        }

        //Create System Portlet
        $new_portlet = parent::addBase($portlet_name, GRN_PRTL_PORTLET_TYPE_PHP,
            $group_id, GRN_PRTL_PORTLET_VERSION_PHP);

        //Set Embedded Portlet Properties
        $new_portlet->set(GRN_PRTL_PROPERTY_VIEW_TEMPLATE,
            GRN_PRTL_PORTLET_VIEW_PHP);
        $new_portlet->set(GRN_PRTL_PROPERTY_SOURCE, $portlet_source);
        $new_portlet->set(GRN_PRTL_PROPERTY_AVAILABLE_MYPORTAL,
            $portlet_available_myportal);

        //Return New Portlet
        return $new_portlet;
    }

    /**
     * Modify System PHP Portlet
     *
     * @access  public
     *
     * @param  int    $portlet_id                 //Portlet ID
     * @param  string $portlet_name               //Portlet Name
     * @param  int    $group_id                   //Group ID
     * @param  string $portlet_source             //Portlet Source
     * @param  string $portlet_available_myportal //Portlet Available My Portal
     *
     * @return object $portlet                       //Portlet Object
     */
    function modify(
        $portlet_id,
        $portlet_name,
        $group_id,
        $portlet_source,
        $portlet_available_myportal
    ) {
        //Modify System Portlet
        $portlet = parent::modifyBase($portlet_id, $portlet_name, $group_id,
            GRN_PRTL_PORTLET_VERSION_PHP);

        //Set Embedded Portlet Properties
        $portlet->set(GRN_PRTL_PROPERTY_VIEW_TEMPLATE,
            GRN_PRTL_PORTLET_VIEW_PHP);
        $portlet->set(GRN_PRTL_PROPERTY_SOURCE, $portlet_source);
        $portlet->set(GRN_PRTL_PROPERTY_AVAILABLE_MYPORTAL,
            $portlet_available_myportal);

        //Return Portlet
        return $portlet;
    }

    /**
     * Import System PHP Portlet Multiple
     *
     * @access  private
     *
     * @param  array $file //Portlet File
     *
     * @return mixed  $portlet_list              //Imported Portlet List
     */
    function importMulti($file)
    {
        $portlet_list = [];

        //Check Import Portlet File Exists
        if ( ! file_exists($file['tmp_name'])) {
            //Portlet Invald Reed File
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_PORTLET_INVALID_REED_FILE);
        }

        //Open Import Portlet File
        $xml_reader = new XMLReader();
        if ( ! $xml_reader->open($file['tmp_name'])) {
            //Portlet Invald Reed File
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_PORTLET_INVALID_REED_FILE);
        }

        //Read Portlet Information
        while (@$xml_reader->read()) {
            //Check PHP Portlet
            if (strcmp($xml_reader->name, 'php_portlet') === 0) {
                //Read Portlet Properties
                $node_name = '';
                $properties = [];
                while ($xml_reader->read()
                       && strcmp($xml_reader->name, 'php_portlet') !== 0) {
                    $node_type = $xml_reader->nodeType;
                    switch ($node_type) {
                        case XMLReader::ELEMENT:
                            $node_name = $xml_reader->name;
                            $properties[$node_name] = '';
                            break;
                        case XMLReader::TEXT:
                            $properties[$node_name] = $xml_reader->value;
                            break;
                        case XMLReader::CDATA:
                            $properties[$node_name] = $xml_reader->value;
                            break;
                        case XMLReader::END_ELEMENT:
                            $node_name = '';
                            break;
                    }
                }

                //Create New System PHP Portlet
                $portlet =& $this->add($properties[GRN_PRTL_PROPERTY_NAME], '',
                    $properties[GRN_PRTL_PROPERTY_SOURCE],
                    $properties[GRN_PRTL_PROPERTY_AVAILABLE_MYPORTAL]);

                //Add Imported Portlet List
                $portlet_list[$portlet->getOID()] =& $portlet;
            }
        }

        //Close Import Portlet File
        $xml_reader->close();

        //Return Imported Portlet List
        return $portlet_list;
    }

    /**
     * Export System PHP Portlet Multiple
     *
     * @access  private
     *
     * @param  array  portlet_id_list    //Export Portlet ID List
     *
     * @return mixed  portlet_list       //Exported Portlet List
     */
    function exportMulti($portlet_id_list)
    {
        //Exported Portlet List
        $exported_portlet_list = [];

        //Define Export Portlet Information
        $export_properties = [
            GRN_PRTL_PROPERTY_NAME,                 //Portlet Name
            GRN_PRTL_PROPERTY_TYPE,                 //Portlet Type
            GRN_PRTL_PROPERTY_VERSION,              //Portlet Version
            GRN_PRTL_PROPERTY_SOURCE,               //Portlet Source
            GRN_PRTL_PROPERTY_AVAILABLE_MYPORTAL    //Available MyPortal Portlet
        ];

        //Get System PHP Portlet List
        $isUseLocal = false;
        $portlet_list = $this->getList($isUseLocal);

        //Open XML Document
        $xml_writer = new XMLWriter();
        $xml_writer->openURI('php://output');
        $xml_writer->setIndentString(' ');
        $xml_writer->setIndent(true);

        //Start XML Document
        $xml_writer->startDocument('1.0', 'UTF-8', 'yes');
        $xml_writer->startElement('php_portlets');

        //Export All System PHP Portlet
        foreach ($portlet_id_list as $portlet_id) {
            //Check Portlet Exists
            if ( ! array_key_exists($portlet_id, $portlet_list)) {
                //Skip Invalid Portlet ID
                continue;
            }

            //Start php_portlet Node
            $xml_writer->startElement('php_portlet');
            $xml_writer->writeAttribute('id', $portlet_id);

            //Export All Properties
            foreach ($export_properties as $export_property) {
                //Export Portlet Property
                $xml_writer->startElement($export_property);
                if ($export_property === GRN_PRTL_PROPERTY_NAME
                    || $export_property === GRN_PRTL_PROPERTY_SOURCE
                ) {
                    $xml_writer->writeCDATA($portlet_list[$portlet_id]->get($export_property));
                } else {
                    $xml_writer->writeRaw($portlet_list[$portlet_id]->get($export_property));
                }
                $xml_writer->endElement();
            }

            //End php_portlet Node
            $xml_writer->endElement();

            //Add Export Portlet List
            $exported_portlet_list[$portlet_id] =& $portlet_list[$portlet_id];

        }

        //End XML Document
        $xml_writer->endElement();
        $xml_writer->EndDocument();

        //Close XML Document
        $xml_writer->flush();

        //Return Exported Portlet List
        return $exported_portlet_list;
    }

    public function createPHPPortletNameCSV(
        $inCharset,
        $inIsExportHeader,
        $inExportLanguageCodeArray = null
    ) {
        /// テンポラリのファイルを作成
        $tempdir = cb_tmpdir();
        $tempFilename = tempnam($tempdir, 'ptl_');
        $csv = new CB_CSVWriter($inCharset, $tempFilename);

        // 項目名の書き出し
        if ($inIsExportHeader) {
            $header = [];
            $header[] = cb_msg('grn.portal.system',
                'portal_csv_php_portlet_id');
            $header[] = cb_msg('grn.portal.system', 'portal_csv_language_code');
            $header[] = cb_msg('grn.portal.system',
                'portal_csv_php_portlet_name');

            $csv->writeLine($header);
        }

        // 内容の書き出し
        require_once('portal/PortalFacade.csp');
        require_once('portal/inspection.csp');
        $portalDAO = new PortalFacade();
        $dataObj = [];
        $objectList
            = $portalDAO->getPortletLocalListByType_LanguageCodes($dataObj,
            GRN_PRTL_PORTLET_TYPE_PHP, $inExportLanguageCodeArray);
        $inspection = GRN_Portal_Local_Inspection::getInstance();

        foreach ($objectList as $portletLocal) {
            $line = [];
            $line[0] = $portletLocal->getParentId();
            $line[1] = $portletLocal->getLanguageCode();
            $line[2] = $portletLocal->getName();
            $csv->writeLine($line);

            //Check Inspection Message Enabled
            if ($inspection->isEnabled()) {
                //Write Inspection Message
                $message_type = 'php_portlet_local_export';
                $message_args = [
                    'ppid'         => $portletLocal->getParentId(),
                    'languageCode' => $portletLocal->getLanguageCode(),
                    'portlet_name' => $portletLocal->getName()
                ];
                $inspection->record($message_type, $message_args);
            }
        }

        $csv->close();

        return $tempFilename;
    }

    public function deletePHPPortletNameCSV($isFilename)
    {
        unlink($isFilename);
    }

    /**
     * CSV read lines
     *
     * @access  public
     *
     * @param  string   inFilePath      //CSV FilePath
     * @param  string   inCharset       //read charset
     * @param  int      inSkipLineCount //read charset
     *
     * @return boolean  success:TRUE
     */
    public function importPHPPortletNameWithCSV(
        $inFilePath,
        $inCharset,
        $inSkipLineCount = 0
    ) {
        if ( ! $inCharset) {
            global $G_config_common;
            $inCharset = $G_config_common->get('I18N',
                'default_external_encoding');
        }

        require_once('fw/csv.csp');
        $csv = new CB_CSVReader($inCharset, $inFilePath);

        // 先頭行をスキップ
        for ($i = 0; $i < $inSkipLineCount; ++$i) {
            $csv->readLine();
        }

        require_once('portal/PortalFacade.csp');
        require_once('portal/bean/GrnPortalPortletLocal.csp');
        require_once('portal/inspection.csp');
        $portalDAO = new PortalFacade();
        $dataObj = [];
        $dataObj['messageTypeAdd'] = 'php_portlet_local_add_import';
        $dataObj['messageTypeModify'] = 'php_portlet_local_modify_import';
        $dataObj['messageTypeDelete'] = 'php_portlet_local_delete_import';

        require_once('fw/i18n.csp');
        $i18n = CB_I18N::getInstance();
        $availableLanguageArray = $i18n->getAvailableLanguages();

        $php_portlet_list = $this->getList();

        while (($line = $csv->readLine()) !== false) {
            if (count($line) != 3) {
                continue;
            }

            if ( ! in_array($line[1], $availableLanguageArray)) {
                cb_throw_error(E_COMMON_CSV_LANGUAGE_CODE_INVALID);
            }

            // check portlet
            if ( ! array_key_exists($line[0], $php_portlet_list)) {
                cb_throw_error(E_GRN_PRTL_PORTLET_INVALID_ID);
            }

            $portletLocal = new GrnPortalPortletLocal();
            $portletLocal->setParentId($line[0]);
            $portletLocal->setLanguageCode($line[1]);
            $portletLocal->setName(cb_trim($line[2]));

            //現時点ではポートレットの読み込みと同じ動きにしているが、本当は読み込み対象がPHPポートレットなのかチェックする必要があるのでは？
            if (is_null($portletLocal->getName())
                || (strlen($portletLocal->getName()) <= 0)
            ) {
                $portalDAO->deletePortletLocal($dataObj, $portletLocal);
            } else {
                $portalDAO->updatePortletLocal($dataObj, $portletLocal);
            }
        }

        $csv->close();

        return true;
    }

    public function addPortlet(
        $inLocalNameArray,
        $inGroup,
        $inAvailableMyportal,
        $inSource
    ) {
        require_once('portal/inspection.csp');
        require_once('portal/PortalFacade.csp');
        require_once('portal/bean/GrnPortalPortletLocal.csp');
        $portalDAO = new PortalFacade();


        //--------------  default portlet name modify -------------
        $defalutName = $inLocalNameArray[CB_I18N_DEFUALT_LANGUAGE_CODE];

        //Add New System Portal
        $logic = GRN_Portal_SystemPHPPortletLogic::getInstance();
        $portlet = $logic->add($defalutName, $inGroup, $inSource,
            $inAvailableMyportal);

        //Check Inspection Message Enabled
        require_once('portal/inspection.csp');
        $inspection = GRN_Portal_System_PHP_Portlet_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            //Write Inspection Message
            $message_type = 'php_portlet_add';
            $message_args = [
                'ppid'         => $portlet->getOID(),
                'portlet_name' => $portlet->get('name')
            ];
            $inspection->record($message_type, $message_args);
        }


        //--------------  portlet local name modify -------------
        //Add System Portal
        $portletId = $portlet->getOID();
        $i18n = CB_I18N::getInstance();
        $availableLanguageArray = $i18n->getAvailableLanguages();
        foreach ($availableLanguageArray as $languageKey) {
            if ((array_key_exists($languageKey, $inLocalNameArray))
                && (strlen(cb_trim($inLocalNameArray[$languageKey])) > 0)
            ) {
                $localName = cb_trim($inLocalNameArray[$languageKey]);

                $dataObj = [];
                $dataObj['messageTypeAdd'] = 'php_portlet_local_add';
                $portletLocal = new GrnPortalPortletLocal();
                $portletLocal->setParentId($portletId);
                $portletLocal->setLanguageCode($languageKey);
                $portletLocal->setName($localName);

                $portalDAO->insertPortletLocal($dataObj, $portletLocal);
            }
        }

        return true;
    }

    public function modifyPortlet(
        $inPortletId,
        $inLocalNameArray,
        $inGroup,
        $inAvailableMyportal,
        $inSource
    ) {
        require_once('portal/inspection.csp');
        require_once('portal/PortalFacade.csp');
        require_once('portal/bean/GrnPortalPortletLocal.csp');
        $portalDAO = new PortalFacade();


        //--------------  default portlet name modify -------------
        $defalutName = $inLocalNameArray[CB_I18N_DEFUALT_LANGUAGE_CODE];

        //Check Inspection Message Enabled
        $inspection = GRN_Portal_System_PHP_Portlet_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            //Get Previous Portlet Name for Inspection Message
            $dataObj = [];
            $portlet = $portalDAO->referPortletById($dataObj, $inPortletId);
            $prev_name = $portlet->getName();
        }

        $logic = GRN_Portal_SystemPHPPortletLogic::getInstance();
        $portlet = $logic->modify($inPortletId, $defalutName, $inGroup,
            $inSource, $inAvailableMyportal);

        //Check Inspection Message Enabled
        if ($inspection->isEnabled()) {
            //Write Inspection Message
            $message_type = 'php_portlet_modify';
            $message_args = [
                'ppid'              => $portlet->getOID(),
                'prev_portlet_name' => $prev_name,
                'next_portlet_name' => $portlet->get('name'),
            ];
            $inspection->record($message_type, $message_args);
        }


        //--------------  portlet local name modify -------------
        $i18n = CB_I18N::getInstance();
        $availableLanguageArray = $i18n->getAvailableLanguages();
        foreach ($availableLanguageArray as $languageKey) {
            if ((array_key_exists($languageKey, $inLocalNameArray))
                && (strlen(cb_trim($inLocalNameArray[$languageKey])) > 0)
            ) {
                $localName = cb_trim($inLocalNameArray[$languageKey]);

                $dataObj = [];
                $dataObj['messageTypeAdd'] = 'php_portlet_local_add';
                $dataObj['messageTypeModify'] = 'php_portlet_local_modify';
                $portletLocal = new GrnPortalPortletLocal();
                $portletLocal->setParentId($inPortletId);
                $portletLocal->setLanguageCode($languageKey);
                $portletLocal->setName($localName);

                $portalDAO->updatePortletLocal($dataObj, $portletLocal);
            } else {
                $dataObj = [];
                $dataObj['messageTypeDelete'] = 'php_portlet_local_delete';
                $portletLocal = new GrnPortalPortletLocal();
                $portletLocal->setParentId($inPortletId);
                $portletLocal->setLanguageCode($languageKey);

                $portalDAO->deletePortletLocal($dataObj, $portletLocal);
            }
        }

        return true;
    }
}

;


