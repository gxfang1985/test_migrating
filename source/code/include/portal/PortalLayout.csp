<?php

namespace grn\portal;

require_once('portal/PortalFacade.csp');

/**
 * Class PortalLayout
 *
 * @package grn\portal
 *
 * $settings is array having width settings.
 * For example:
 * top_frame    - width of portal_layout0 is 100%
 * left_frame   - width of portal_layout1 is 40%
 * center_frame - width of portal_layout2 is 60%
 * right_frame  - portal_layout3 is not using
 *
 * $settings = array( '0' => '100', '1' => '40', '2' => '60', '3'=> '0' )
 * );
 */
class PortalLayout
{
    /** @var \PortalFacade */
    private $facade;
    /** @var string */
    private $id;
    /** @var array */
    static private $positions = ['top', 'left', 'center', 'right'];

    public function __construct($portalId)
    {
        $this->id = $portalId;
        $this->facade = new \PortalFacade();
    }

    /**
     * @return array
     */
    static public function getLayoutStringEnum()
    {
        return [
            // no layout setting
            '0',
            // 1 column
            '100_0_0',
            // 2 columns
            '50_50_0',
            '40_60_0',
            '60_40_0',
            '30_70_0',
            '70_30_0',
            // 3 columns
            '33_33_33',
            '30_40_30',
            '30_30_40',
            '40_30_30',
        ];
    }

    /**
     * @return bool
     */
    public function isFixedWidth()
    {
        return $this->facade->isPortalLayoutFixedWidth($this->id);
    }

    /**
     * @return array
     */
    public function getLayoutSettings()
    {
        return $this->facade->getPortalLayoutSettings($this->id);
    }

    /**
     * @param array $settings
     */
    public function setLayoutSettings($settings)
    {
        $this->facade->setPortalLayoutSettings($this->id, $settings);
    }

    public function deleteLayoutSettings()
    {
        $this->facade->deletePortalLayoutSettings($this->id);
    }

    /**
     * @param $currentPosition
     *
     * @return array ['top'=>bool, 'left'=>bool, 'center'=>bool, 'right'=>bool]
     */
    public function getMovablePositionInfo($currentPosition)
    {
        $info = [];
        if ( ! $this->isFixedWidth()) {
            foreach (self::$positions as $position) {
                $info[$position] = ($position !== $currentPosition);
            }
        } else {
            $layoutSetting = $this->getLayoutSettings();
            $index = 0;
            foreach (self::$positions as $position) {
                $info[$position] = ($layoutSetting[$index] > 0
                                    && $position !== $currentPosition);
                $index++;
            }
        }

        return $info;
    }
}
