<?php
/**
 * Portal Management Logic
 *
 * @package grn.portal
 * @author  Yuichi Nakamura 2005/3
 * @version 1.0
 */

require_once('portal/access_logic.csp');

/**
 * Portal Management Logic Base
 *
 * @package grn.portal
 * @author  Yuichi Nakamura 2005/3
 * @version 1.0
 */
class GRN_Portal_ManageLogicBase
{
    //Manage Target Name
    var $_manage_class_name = null;

    //Table Names
    var $_target_tables
        = [
            GRN_PRTL_TARGET_TYPE_DYNAMIC_ROLE => null,      //Dynamic Role
            GRN_PRTL_TARGET_TYPE_STATIC_ROLE  => 'cb_role',  //Static Role
            GRN_PRTL_TARGET_TYPE_GROUP        => 'cb_group', //Group
            GRN_PRTL_TARGET_TYPE_USER         => 'cb_user'   //User
        ];

    /**
     * Constractor
     *
     */
    function __construct()
    {
        return;
    }

    /**
     * Get Table Infomation
     *
     * @access  private
     *
     * @param  strng $table_name //Table Name
     *
     * @return object $table_info                //Table Information Object
     */
    function _getTableInfo($table_name)
    {
        $app_locator = GRN_ApplicationLocator::instance();
        $table_manager = $app_locator->getTableManager('portal');

        $ret = $table_manager->getTableInfo($table_name);

        return $ret;
    }

    /**
     * Get Authority Name List
     *
     * @access  private
     *
     * @param  object $table_info //Table Information Object
     *
     * @return array  $authority_name_list       //Authority Name List
     */
    function _getAuthorityNames(&$table_info)
    {
        $authority_names = [];

        //Get Table Column Name List
        $column_infos = $table_info->getColumnInfo();

        //Create Authority Name List From Column Name
        foreach (array_keys($column_infos) as $column_name) {
            if (false !== strpos($column_name, 'authority_')) {
                $authority_names[] = substr($column_name, 10);
            }
        }

        //Return Authority Name List
        return $authority_names;
    }

    /**
     * Get Table Name
     *
     * @access private
     *
     * @param  object $target_type //Target Type
     *
     * @return string $table_name                //Table Name
     */
    function _getTableName($target_type)
    {
        //Check Arguments
        if ( ! is_string($target_type)) {
            //Invalid Data
            assert('FALSE');
        }

        //Return Table Name
        return $this->_manage_class_name . '_manage_' . $target_type;
    }

    /**
     * Get Table Name By Object
     *
     * @access private
     *
     * @param  object $target //Target Object
     *
     * @return string $table_name                //Table Name
     */
    function _getTableNameByObject(&$target)
    {
        //Check Target Object Type
        if (is_object($target)) {
            if (is_a($target, 'cb_role')) {
                //Static Role Object
                $target_type = GRN_PRTL_TARGET_TYPE_STATIC_ROLE;
            } else {
                //User or Group Object
                $target_type = substr(strtolower(get_class($target)), 3);
            }
        } elseif (is_string($target)) {
            //Dynamic Role
            $target_type = GRN_PRTL_TARGET_TYPE_DYNAMIC_ROLE;
        } else {
            //Invalid Data
            assert('FALSE');
        }

        //Return Table Name
        return $this->_getTableName($target_type);
    }

    /**
     * Create Manage Table
     *
     * @param array $authority_list //Authority List
     *
     * @return none
     */
    function createManageTable($authority_list)
    {
        //Check Arguments
        if ( ! is_array($authority_list)) {
            assert('FALSE');
        }

        //Create Tables
        $target_tables =& $this->_target_tables;
        foreach ($target_tables as $target_type => $target_table) {
            //Get Table Information
            $table_name = $this->_getTableName($target_type);
            $table_info =& $this->_getTableInfo($table_name);

            //Create Object Column
            $table_info->addColumn('object',
                ['type' => 'relation', 'to' => $this->_manage_class_name]);

            //Create Target Column
            if (is_null($target_table)) {
                //Dynamic Role
                $table_info->addColumn('target',
                    ['type' => 'char', 'length' => 100]);
            } else {
                //Other Object Type (User/Group/Static Role Object)
                $table_info->addColumn('target',
                    ['type' => 'relation', 'to' => $target_table]);
            }

            //Crrate Authority Column
            foreach ($authority_list as $authority) {
                $table_info->addColumn('authority_' . $authority,
                    ['type' => 'int']);
            }

            //Create Manage Index
            $table_info->addIndex('manage',
                ['cols' => ['object', 'target'], 'unique' => true]);

            //Create Table
            $table_info->createTable();
        }

        return;
    }

    /**
     * Modify Manage Table
     *
     * @param  array $authority_list //Authority List
     *
     * @return none
     */
    function alterManageTable($authority_list)
    {
        //Check Arguments
        if ( ! is_array($authority_list)) {
            assert('FALSE');
        }

        //Modify Tables
        $target_tables =& $this->_target_tables;
        foreach ($target_tables as $target_type => $target_table) {
            //Get Table Information
            $table_name = $this->_getTableName($target_type);
            $table_info =& $this->_getTableInfo($table_name);

            //Create New Authority Columns
            foreach ($authority_list as $authority) {
                $column_name = 'authority_' . $authority;
                if (is_null($table_info->getColumnInfo($column_name))) {
                    $table_info->addColumn($column_name, ['type' => 'int']);
                }
            }

            //Modify Table
            $table_info->alterTable();
        }

        return;
    }

    /**
     * Delete Manage Table
     *
     * @param  array $authority_list //Authority List
     *
     * @return none
     */
    function dropManageTable($authority_list)
    {
        //Check Arguments
        if ( ! is_array($authority_list)) {
            assert('FALSE');
        }

        //Delete Manage Tables
        $target_tables =& $this->_target_tables;
        foreach ($target_tables as $target_type => $target_table) {
            //Get Manage Table Information
            $table_name = $this->_getTableName($target_type);
            $table_info =& $this->_getTableInfo($table_name);

            //Delete Manage Table
            $table_info->dropTable();
        }

        return;
    }

    /**
     * Get Manage Table Row
     *
     * @access private
     *
     * @param  int $manage_id   //Manage Object ID
     * @param  int $target_type //Target Type
     *
     * @return object $manage                    //Manage Object
     */
    function _getRow($manage_id, $target_type)
    {
        //Get Table Infomation
        $table_name = $this->_getTableName($target_type);
        $table_info = $this->_getTableInfo($table_name);

        //Get Row by Object ID
        $row = $table_info->getRow($manage_id);

        //Return Row Object
        return $row;
    }

    /**
     * Get Manage Table Row By Object
     *
     * @access private
     *
     * @param  object $object //Manage Target Object
     * @param  object $target //Target Object
     *
     * @return object  $manage                    //Manage Object
     */
    function _getRowByObject(&$object, &$target)
    {
        //Get Table Infomation
        $table_name = $this->_getTableNameByObject($target);
        $table_info = $this->_getTableInfo($table_name);
        //for escape!
        $db = $table_info->getDBConnection();
        //Create Search Condition
        //$query = 'col_object = '.$object->getOID().' AND col_target = ';

        $rowset = new CB_RowSet($table_info);

        $query = 'col_object = \'' . $db->escape($object->getOID())
                 . '\' AND col_target = ';
        if (is_object($target)) {
            $query .= '\'' . $db->escape($target->getOID()) . '\'';
        } elseif (is_string($target)) {
            $query .= '\'' . $db->escape($target) . '\'';
        } else {
            assert('FALSE');
        }
        //Get Row by Condition
        $rowset->addCondition($query);
        $this->_addUserJoin($rowset, $target);
        $row = $rowset->iterate();
        $rowset->destroy();

        //Return Row Object
        return $row;
    }

    /**
     * Get Manage Table RowSet
     *
     * @access private
     *
     * @param  object $object //Manage Target Object
     *
     * @return array  $manage_list               //Manage Object List
     */
    function _getRowSetList(&$object)
    {
        $rowset_list = [];

        //Get RowSet List
        $target_tables =& $this->_target_tables;
        foreach ($target_tables as $target_type => $target_table) {
            //Get Table Information
            $table_name = $this->_getTableName($target_type);
            $table_info =& $this->_getTableInfo($table_name);
            //for escape!
            $db = $table_info->getDBConnection();
            //Get RowSet
            //$query = 'col_object = '.$object->getOID();
            $query = 'col_object = \'' . $db->escape($object->getOID()) . '\'';
            $rowset = new CB_RowSet($table_info);
            $rowset->addCondition($query);
            $this->_addUserJoin($rowset, $target_type);
            $rowset->addOrderColumn('_id');
            $rowset_list[$target_type] =& $rowset;
            unset($rowset);
        }

        //Return RowSet List
        return $rowset_list;
    }

    /**
     * Is Manager
     *
     * @param  bool $is_throw //Throw Error Flag
     *
     * @return bool $result                     //(Allow:TRUE/Deny:FALSE)
     */
    function isManager($is_throw = false)
    {
        //Get Login User and ID
        global $G_container_base;
        $uum =& $G_container_base->getInstance('uum');
        $user =& $uum->getLoginUser();
        $user_id = $user->getOID();

        //Crerate Target List
        $targets_list = [];
        $targets_list[GRN_PRTL_TARGET_TYPE_USER]
            = [& $user];                  //User
        $targets_list[GRN_PRTL_TARGET_TYPE_GROUP]
            = $uum->getUserGroups($user_id);    //Group
        $targets_list[GRN_PRTL_TARGET_TYPE_STATIC_ROLE]
            = $uum->getUserRoles($user_id);     //Static Role
        $targets_list[GRN_PRTL_TARGET_TYPE_DYNAMIC_ROLE]
            = $uum->listGrantedRoles();         //Dynamic Role
        if ($targets_list[GRN_PRTL_TARGET_TYPE_STATIC_ROLE] === false
            || $targets_list[GRN_PRTL_TARGET_TYPE_GROUP] === false
        ) {
            return false;
        }

        //Check All Tables
        $target_tables =& $this->_target_tables;
        foreach ($target_tables as $target_type => $target_table) {
            //Check Target List
            if (is_null($targets_list[$target_type])
                || count($targets_list[$target_type]) == 0
            ) {
                continue;
            }
            $target_list = $targets_list[$target_type];

            //Get Table Information
            $table_name = $this->_getTableName($target_type);
            $table_info =& $this->_getTableInfo($table_name);
            //for escape!
            $db = $table_info->getDBConnection();

            //Create Search Condition
            $query = '(';
            switch ($target_type) {
                case GRN_PRTL_TARGET_TYPE_DYNAMIC_ROLE:
                    foreach ($target_list as $key => $value) {
                        if ($value == 1) {
                            $query .= "col_target = '" . $db->escape($key)
                                      . "' OR ";
                        }
                    }
                    break;
                case GRN_PRTL_TARGET_TYPE_STATIC_ROLE:
                case GRN_PRTL_TARGET_TYPE_USER:
                case GRN_PRTL_TARGET_TYPE_GROUP:
                    foreach (array_keys($target_list) as $key) {
                        $query .= 'col_target = \''
                                  . $db->escape($target_list[$key]->getOID())
                                  . '\' OR ';
                    }
                    break;
                default:
                    assert('FALSE');
            }
            $query = substr($query, 0, -4) . ') AND (col_authority_manage = 1)';

            //Evaluate Manage
            $rowset = new CB_RowSet($table_info);
            $rowset->addCondition($query);
            while ( ! is_null($row = $rowset->iterate())) {
                $rowset->destroy();

                return true;
            }

        }

        //Throw Error Flag
        if ($is_throw) {
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_MANAGE_DENY);
        }

        return false;
    }

    /**
     * Evaluate Manage Right for Single Object
     *
     * @param  objcet $user           //Evaluate Target User
     * @param  array  $role_list      //Evaluate Target Dynamic Role List
     * @param  object $object         //Manage Target Object
     * @param  array  $authority_list //Authority List
     *
     * @return bool   $result                     //(Allow:TRUE/Deny:FALSE)
     */
    function _evaluateManage(& $user, $role_list, &$object, $authority_list)
    {
        //Get User ID
        global $G_container_base;
        $uum =& $G_container_base->getInstance('uum');
        $user_id = $user->getOID();

        $targets_list = [];

        //Get Dynamic Role
        $targets_list[GRN_PRTL_TARGET_TYPE_DYNAMIC_ROLE] = $role_list;

        //Get Static Role
        $targets_list[GRN_PRTL_TARGET_TYPE_STATIC_ROLE]
            = $uum->getUserRoles($user_id);
        if (false === ($targets_list[GRN_PRTL_TARGET_TYPE_STATIC_ROLE])) {
            return false;
        }

        //Get Organization Unit
        $targets_list[GRN_PRTL_TARGET_TYPE_GROUP]
            = $uum->getUserGroups($user_id);
        if (false === ($targets_list[GRN_PRTL_TARGET_TYPE_GROUP])) {
            return false;
        }

        //Get User
        $targets_list[GRN_PRTL_TARGET_TYPE_USER] = [& $user];

        $values = [];
        $target_tables =& $this->_target_tables;
        foreach ($target_tables as $target_type => $target_table) {
            //Check Target List
            if (is_null($targets_list[$target_type])
                || count($targets_list[$target_type]) == 0
            ) {
                continue;
            }
            $target_list = $targets_list[$target_type];

            //Get Table Information
            $table_name = $this->_getTableName($target_type);
            $table_info =& $this->_getTableInfo($table_name);
            //for escape!
            $db = $table_info->getDBConnection();
            //Create Search Condition
            $query = 'col_object = \'' . $db->escape($object->getOID())
                     . '\' AND (';
            switch ($target_type) {
                case GRN_PRTL_TARGET_TYPE_DYNAMIC_ROLE:
                    foreach ($target_list as $key => $value) {
                        if (1 == $value) {
                            $query .= "col_target = '" . $db->escape($key)
                                      . "' OR ";
                        }
                    }
                    break;
                case GRN_PRTL_TARGET_TYPE_STATIC_ROLE:
                case GRN_PRTL_TARGET_TYPE_USER:
                case GRN_PRTL_TARGET_TYPE_GROUP:
                    foreach (array_keys($target_list) as $key) {
                        $query .= 'col_target = \''
                                  . $db->escape($target_list[$key]->getOID())
                                  . '\' OR ';
                    }
                    break;
                default:
                    assert('FALSE');
            }
            $query = substr($query, 0, -4) . ') AND (';
            foreach ($authority_list as $authority) {
                $query .= 'col_authority_' . $db->escape($authority)
                          . ' = 1 OR ';
            }
            $query = substr($query, 0, -4) . ')';

            //Evaluate Manage
            $rowset = new CB_RowSet($table_info);
            $this->_addUserJoin($rowset, $target_type);
            $rowset->addCondition($query);
            while ( ! is_null($row = $rowset->iterate())) {
                $evalval = 1;
                foreach ($authority_list as $authority) {
                    $value = $row->get('authority_' . $authority);
                    $value = is_null($value) ? 0 : intval($value);
                    $values[$authority] = max(@ $values[$authority], $value);
                    $evalval = $evalval & $values[$authority];
                }
                if (1 === $evalval) {
                    $rowset->destroy();

                    return true;
                }
            }

        }

        return false;
    }

    /**
     * Get Allow Multi Object List
     *
     * @access private
     *
     * @param  array $object_list    //Manage Target Object List
     * @param  array $targets_list   //Targets List
     * @param  array $authority_list //Authority List
     *
     * @return array  $allow_object_list         //Allow Object List
     */
    function _getAllowMultiObjectList(
        $object_list,
        $targets_list,
        $authority_list
    ) {
        //Check Object Count
        if (count($object_list) == 0) {
            return [];
        }

        $values_list = [];
        $target_tables =& $this->_target_tables;
        foreach ($target_tables as $target_type => $target_table) {
            //Check Target List
            if (is_null($targets_list[$target_type])
                || count($targets_list[$target_type]) == 0
            ) {
                continue;
            }
            $target_list = $targets_list[$target_type];

            //Get Table Information
            $table_name = $this->_getTableName($target_type);
            $table_info =& $this->_getTableInfo($table_name);
            //for escape!
            $db = $table_info->getDBConnection();

            //Create Search Condition
            $query = '(';
            foreach (array_keys($object_list) as $object_id) {
                $query .= 'col_object = \'' . $db->escape($object_id)
                          . '\' OR ';
            }
            $query = substr($query, 0, -4) . ') AND (';
            switch ($target_type) {
                case GRN_PRTL_TARGET_TYPE_DYNAMIC_ROLE:
                    foreach ($target_list as $key => $value) {
                        if (1 == $value) {
                            $query .= "col_target = '" . $db->escape($key)
                                      . "' OR ";
                        }
                    }
                    break;
                case GRN_PRTL_TARGET_TYPE_STATIC_ROLE:
                case GRN_PRTL_TARGET_TYPE_USER:
                case GRN_PRTL_TARGET_TYPE_GROUP:
                    foreach (array_keys($target_list) as $key) {
                        $query .= 'col_target = \''
                                  . $db->escape($target_list[$key]->getOID())
                                  . '\' OR ';
                    }
                    break;
                default:
                    assert('FALSE');
            }
            $query = substr($query, 0, -4) . ') AND (';
            foreach ($authority_list as $authority) {
                $query .= 'col_authority_' . $db->escape($authority)
                          . ' = 1 OR ';
            }
            $query = substr($query, 0, -4) . ')';

            //Search Allow Object
            $rowset = new CB_RowSet($table_info);
            $rowset->addCondition($query);
            $this->_addUserJoin($rowset, $target_type);
            while ( ! is_null($row = $rowset->iterate())) {
                //Get Manage Target Object and ID
                $object = $row->get('object');
                $object_id = $object->getOID();
                if ( ! array_key_exists($object_id, $object_list)) {
                    continue;
                }

                //Get Manage Right List
                if (array_key_exists($object_id, $values_list)) {
                    //Get Previous Values
                    $values =& $values_list[$object_id];
                } else {
                    //Initialize Values
                    $values_list[$object_id] = [];
                    $values =& $values_list[$object_id];
                    foreach ($authority_list as $authority) {
                        $values[$authority] = 0;
                    }
                }

                //Evaluate Manage Right
                foreach ($authority_list as $authority) {
                    $value = $row->get('authority_' . $authority);
                    $value = is_null($value) ? 0 : intval($value);
                    $value = max($values[$authority], $value);
                    $values[$authority] = $value;
                }
            }
        }

        //Create Allow Object List
        $allow_object_list = [];
        foreach ($values_list as $object_id => $values) {
            //Evaluate Values
            $evalval = 1;
            foreach ($authority_list as $authority) {
                if ($evalval == 0 || $values[$authority] == 0) {
                    $evalval = 0;
                }
            }

            //Add Allow Object List
            if ($evalval == 1) {
                $allow_object_list[$object_id] =& $object_list[$object_id];
            }
        }

        //Reuturn Allow Object List
        return $allow_object_list;
    }

    /**
     * Get Allow Multi Object
     *
     * @param  object $user           //User Object
     * @param  array  $role_list      //Dynamic Role List
     * @param  array  $object_list    //Manage Target Object List
     * @param  array  $authority_list //Authority List
     *
     * @return array  $allow_object_list         //Allow Object List
     */
    function &getAllowMultiObjectList(
        &$user,
        $role_list,
        $object_list,
        $authority_list
    ) {
        //Get UUM Instance and User ID
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $user_id = $user->getOID();

        $targets_list = [];

        //Get Dynamic Role List
        $targets_list[GRN_PRTL_TARGET_TYPE_DYNAMIC_ROLE] = $role_list;

        //Get Static Role List
        $targets_list[GRN_PRTL_TARGET_TYPE_STATIC_ROLE]
            = $uum->getUserRoles($user_id);
        if (false === ($targets_list[GRN_PRTL_TARGET_TYPE_STATIC_ROLE])) {
            $ret = false;

            return $ret;
        }

        //Get Organization Unit
        $targets_list[GRN_PRTL_TARGET_TYPE_GROUP]
            = $uum->getUserGroups($user_id);
        if (false === ($targets_list[GRN_PRTL_TARGET_TYPE_GROUP])) {
            $ret = false;

            return $ret;
        }

        //Get User
        $targets_list[GRN_PRTL_TARGET_TYPE_USER] = [& $user];

        //Get Allow Object List
        $allow_object_list = $this->_getAllowMultiObjectList($object_list,
            $targets_list, $authority_list);

        //Return Allow Object List
        return $allow_object_list;
    }

    /**
     * Get Allow Multi Object By User
     *
     * @param  object $user           //User Object
     * @param  array  $object_list    //Manage Target Object List
     * @param  array  $authority_list //Authority List
     *
     * @return array  $allow_object_list         //Allow Object List
     */
    function &getAllowMultiObjectListByUser(
        &$user,
        $object_list,
        $authority_list
    ) {
        //Get User
        $targets_list = [];
        $user_id = $user->getOID();
        $targets_list[GRN_PRTL_TARGET_TYPE_USER] = [$user_id => $user];

        //Other Type Set Null
        $targets_list[GRN_PRTL_TARGET_TYPE_GROUP] = null;
        $targets_list[GRN_PRTL_TARGET_TYPE_STATIC_ROLE] = null;
        $targets_list[GRN_PRTL_TARGET_TYPE_DYNAMIC_ROLE] = null;

        //Get Allow Object List
        $allow_object_list = $this->_getAllowMultiObjectList($object_list,
            $targets_list, $authority_list);

        //Return Allow Object List
        return $allow_object_list;
    }

    /**
     * Get Allow Multi Object By Group
     *
     * @param  object $group          //Group Object
     * @param  array  $object_list    //Manage Target Object List
     * @param  array  $authority_list //Authority List
     *
     * @return array  $allow_object_list         //Allow Object List
     */
    function &getAllowMultiObjectListByGroup(
        &$group,
        $object_list,
        $authority_list
    ) {
        //Get Organization Unit
        $targets_list = [];
        $group_id = $group->getOID();
        $targets_list[GRN_PRTL_TARGET_TYPE_GROUP] = [$group_id => $group];

        //Other Type Set Null
        $targets_list[GRN_PRTL_TARGET_TYPE_USER] = null;
        $targets_list[GRN_PRTL_TARGET_TYPE_STATIC_ROLE] = null;
        $targets_list[GRN_PRTL_TARGET_TYPE_DYNAMIC_ROLE] = null;

        //Get Allow Object List
        $allow_object_list = $this->_getAllowMultiObjectList($object_list,
            $targets_list, $authority_list);

        //Return Allow Object List
        return $allow_object_list;
    }

    /**
     * Get Allow Multi Object By Role
     *
     * @param  object $role           //Role Object
     * @param  array  $object_list    //Manage Target Object List
     * @param  array  $authority_list //Authority List
     *
     * @return array  $allow_object_list         //Allow Object List
     */
    function &getAllowMultiObjectListByRole(
        &$role,
        $object_list,
        $authority_list
    ) {
        $targets_list = [];

        //Check Dynamic or Static Role
        if (is_object($role)) {   //Static Role
            $role_id = $role->getOID();
            $targets_list[GRN_PRTL_TARGET_TYPE_STATIC_ROLE]
                = [$role_id => $role];
            $targets_list[GRN_PRTL_TARGET_TYPE_DYNAMIC_ROLE] = null;
        } else {
            //Dynamic Role
            $targets_list[GRN_PRTL_TARGET_TYPE_DYNAMIC_ROLE] = [$role => '1'];
            $targets_list[GRN_PRTL_TARGET_TYPE_STATIC_ROLE] = null;
        }

        //Other Type Set Null
        $targets_list[GRN_PRTL_TARGET_TYPE_USER] = null;
        $targets_list[GRN_PRTL_TARGET_TYPE_GROUP] = null;

        //Get Allow Object List
        $allow_object_list = $this->_getAllowMultiObjectList($object_list,
            $targets_list, $authority_list);

        //Return Allow Object List
        return $allow_object_list;
    }


    /**
     * Get Manage Target Object
     *
     * @param  int $object_id //Manage Target Object ID
     *
     * @return object $object                    //Manage Target Object
     */
    function getObject($object_id)
    {
        //Must Override Method
        $ret = null;

        return $ret;
    }

    /**
     * Get Target Object
     *
     * @access private
     *
     * @param  string $target_type //Target Type(user/group/static_role/dynamic_role)
     * @param  int    $target_id   //Target ID
     *
     * @return object $target                    //Target Object
     */
    function &_getTarget($target_type, $target_id)
    {
        //Get UUM Instance
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');

        //Get Target Object
        switch ($target_type) {
            case GRN_PRTL_TARGET_TYPE_USER:
                $target =& $uum->getUser($target_id);
                break;
            case GRN_PRTL_TARGET_TYPE_GROUP:
                $target =& $uum->getGroup($target_id);
                break;
            case GRN_PRTL_TARGET_TYPE_STATIC_ROLE:
                $target =& $uum->getStaticRole($target_id);
                break;
            case GRN_PRTL_TARGET_TYPE_DYNAMIC_ROLE:
                $target = $target_id;
                break;
            default:
                assert('FALSE');
        }

        //Return Target Object
        return $target;
    }

    /**
     * get Manage Information
     *
     * @param  int    $object_id //Manage Target Object ID
     * @param  object $manage    //Manage Object
     *
     * @return array  $manage_info               //Manage Information
     *                 (array(manage_id, object_id, target_id, target_type, array(authority_name=>authority_value)))
     */
    function _getManage($object_id, &$manage)
    {
        $manage_info = [];

        //Get target Object
        $target =& $manage->get('target');

        //Get Target Information
        $type = gettype($target);
        if ($type == 'object') {
            if (is_a($target, 'cb_user')) {
                //Manage User
                $manage_info['target_id'] = $target->getOID();
                $manage_info['target_type'] = GRN_PRTL_TARGET_TYPE_USER;
                $manage_info['target_name'] = $target->get('display_name');;
            } elseif (is_a($target, 'cb_group')) {
                global $G_container_base;
                $uum = $G_container_base->getInstance('uum');
                $groupObj = $uum->getGroup($target->getOID());

                //Manage Group
                $manage_info['target_id'] = $target->getOID();
                $manage_info['target_type'] = GRN_PRTL_TARGET_TYPE_GROUP;
                $manage_info['target_name'] = $groupObj->get('name');
            } elseif (is_a($target, 'cb_role')) {
                //Manage Role
                $manage_info['target_id'] = $target->getOID();
                $manage_info['target_type'] = GRN_PRTL_TARGET_TYPE_STATIC_ROLE;
                $manage_info['target_name'] = $target->get('foreign_key');
            }
        } elseif ($type == 'string') {
            //Manage Dynamic Role
            require_once('grn/uum_util.csp');
            $uum_util = GRN_UumUtil::getInstance();
            $dynamic_roles = $uum_util->listDynamicRoles();
            $manage_info['target_id'] = $target;
            $manage_info['target_type'] = GRN_PRTL_TARGET_TYPE_DYNAMIC_ROLE;
            $manage_info['target_name'] = $dynamic_roles[$target]['name'];
        } else {
            //Invalid Type
            assert('FALSE');
        }

        //Get Manage and Manage Target Object Information
        $manage_info['manage_id'] = $manage->getOID();
        $manage_info['object_id'] = $object_id;

        //Get Authority Information
        $manage_info['authority_list'] = [];
        $table_information = $manage->getTableInfo();
        $authority_list
            = $this->_getAuthorityNames($table_information);
        foreach ($authority_list as $authority) {
            $manage_info['authority_list'][$authority]
                = $manage->get('authority_' . $authority);
        }

        //Return Manage Information
        return $manage_info;
    }

    /**
     * Get Manage
     *
     * @param  int    $object_id   //Manage Target Object ID
     * @param  string $target_type //Target Type(user/group/static_role/dynamic_role)
     * @param  int    $target_id   //Target ID
     *
     * @return array  $manage_info               //Manage Information
     */
    function &getManage($object_id, $target_type, $target_id)
    {
        //Get Manage Target and Target Object
        $object =& $this->getObject($object_id);
        $target =& $this->_getTarget($target_type, $target_id);

        //Get Manage Object
        $manage =& $this->_getRowByObject($object, $target);

        //Create Manege Information
        $manage_info = null;
        if ( ! is_null($manage)) {
            $manage_info = $this->_getManage($object_id, $manage);
        }

        //Return Manage Information
        return $manage_info;
    }

    /**
     * Get Manage List
     *
     * @param  int    $object_id       //Manage Target Object ID
     * @param  string $manage_key_list //Manage Key List
     *                                 (array(target_type:target_id))
     *
     * @return array  $manage_info_list          //Manage Info List
     *                 (array(manage_id, object_id, target_id, target_type, target_name, array(authority_name=>authority_value)))
     */
    function getManageList($object_id, $manage_key_list = null)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('portal/error_code.csp');
        cb_trim_check($object_id,
            E_GRN_PRTL_MANAGE_INVALID_OBJECT_ID);     //Manage Target Object ID

        //Get Manage Target Object
        $object =& $this->getObject($object_id);

        //Get Manage RowSet List
        $rowset_list = $this->_getRowSetList($object);

        //Create Manage Information List
        $manage_info_list = [];
        foreach (array_keys($rowset_list) as $list_id) {
            $rowset = $rowset_list[$list_id];
            while ( ! is_null($row = $rowset->iterate())) {
                $manage_info_list[] = $this->_getManage($object_id, $row);
            }
        }
        if ( ! is_null($manage_key_list)) {
            foreach (array_keys($manage_info_list) as $key) {
                $manage_info =& $manage_info_list[$key];
                if (false === array_search($manage_info['target_type'] . ':'
                                           . $manage_info['target_id'],
                        $manage_key_list)
                ) {
                    unset($manage_info_list[$key]);
                }
            }
        }

        //Return Manage Information
        return $manage_info_list;
    }

    /**
     * アクセス権を追加する
     *
     * @param int    $object_id      //Manage Target Object ID
     * @param string $target_type    //Target Type(user/group/static_role/dynamic_role)
     * @param int    $target_id      //Target ID
     * @param array  $authority_list //Authority List
     *                               (array(authority_name=>authority_value))
     */
    function addManage($object_id, $target_type, $target_id, $authority_list)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('portal/error_code.csp');
        cb_trim_check($object_id,
            E_GRN_PRTL_MANAGE_INVALID_OBJECT_ID);     //Manage Target Object ID
        cb_trim_check($target_type,
            E_GRN_PRTL_MANAGE_INVALID_TARGET_TYPE);   //Target Type
        cb_trim_check($target_id,
            E_GRN_PRTL_MANAGE_INVALID_TARGET_ID);     //Target ID
        if (is_null($authority_list)) {
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_MANAGE_AUTHORITY_NOT_FOUND);
        }

        //Get Object and Target
        $object =& $this->getObject($object_id);
        $target =& $this->_getTarget($target_type, $target_id);

        //Get Table Information
        $table_name = $this->_getTableName($target_type);
        $table_info =& $this->_getTableInfo($table_name);

        //Create Manage Object
        $manage =& $table_info->newRow();

        //Set Manage Properties
        $manage->set('object',
            $object);                        //Manage Target Object
        $manage->set('target', $target);                        //Target Object
        foreach ($authority_list as $key => $value) {
            $manage->set('authority_' . $key, intval($value));    //Authority
        }

        //Register Manage Object
        $manage->registerNow();

        return;
    }

    /**
     * Delete Manage
     *
     * @param  int   $object_id   //Manage Target Object ID
     * @param  array $manage_info //Manage Information
     *                            (manage_id, object_id, target_type, array(authority_name=>authority_value))
     *
     * @return bool   $result                    //Result
     */
    function deleteManage($object_id, $manage_info)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('portal/error_code.csp');
        cb_trim_check($object_id, E_GRN_PRTL_MANAGE_INVALID_OBJECT_ID);
        if ( ! is_array($manage_info) || 0 == count($manage_info)) {
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_MANAGE_INFORMATION_NOT_FOUND);
        }

        //Get Manage Target Object
        $object =& $this->getObject($object_id);

        //Get Manage Object
        $row =& $this->_getRow($manage['manage_id'], $manage['target_type']);
        if ( ! is_null($row)) {
            //Delete Manage Object
            $row->delete();
        }

        return;
    }

    /**
     * Delete Manage List
     *
     * @param  int   $object_id        //Manage Target Object ID
     * @param  array $manage_info_list //Manage Information
     *                                 (array(manage_id, object_id, target_type, array (authority_name=>authority_value)))
     *
     * @return none
     */
    function deleteManageList($object_id, $manage_info_list)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('portal/error_code.csp');
        cb_trim_check($object_id, E_GRN_PRTL_MANAGE_INVALID_OBJECT_ID);
        if ( ! is_array($manage_info_list)) {
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_MANAGE_INFOMATION_NOT_FOUND);
        }
        if (count($manage_info_list) == 0) {
            return;
        }

        //Get Manage Target Object
        $object =& $this->getObject($object_id);

        //Convert Manage Information List
        $converted_manage_info_list = [];
        foreach ($manage_info_list as $manage_info) {
            if ( ! is_array($manage_info) || count($manage_info) == 0) {
                require_once('portal/error_code.csp');
                cb_throw_error(E_GRN_PRTL_MANAGE_INFORMATION_NOT_FOUND);
            }

            $target_type = $manage_info['target_type'];
            $manage_id = $manage_info['manage_id'];
            if ( ! array_key_exists($target_type,
                $converted_manage_info_list)
            ) {
                $converted_manage_info_list[$target_type] = [];
            }
            $converted_manage_info_list[$target_type][] = $manage_id;
        }

        //Delete Manage List
        $rowset_list = [];
        $target_tables =& $this->_target_tables;
        foreach (array_keys($converted_manage_info_list) as $target_type) {
            //Get Table Information
            $table_name = $this->_getTableName($target_type);
            $table_info =& $this->_getTableInfo($table_name);
            //for escape
            $db = $table_info->getDBConnection();
            //Create Search Condition
            $query = '';
            foreach ($converted_manage_info_list[$target_type] as $manage_id) {
                $query .= '_id = \'' . $db->escape($manage_id) . '\' OR ';
            }
            $query = substr($query, 0, -4);

            //Delete Manage
            $rowset = new CB_RowSet($table_info);
            $rowset->addCondition($query);
            while ( ! is_null($row = $rowset->iterate())) {
                $row->delete();
            }
        }

        return;
    }

    /**
     * @access private
     */
    function _addUserJoin(& $rowset, & $target, $alias = '')
    {
        if (is_object($target) && is_a($target, 'cb_user')) {
            $user_table_info =& $this->_getTableInfo('cb_user');
            if (is_string($alias) && strlen($alias) > 0) {
                $table_name = $alias;
            } else {
                $table_name = $this->_getTableNameByObject($target);
            }
            $on = CB_DATABASE_TABLE_PREFIX . $table_name
                  . '.col_target = u._id '
                  . 'AND u.col_deleted IS NULL';
            $rowset->addJoin($user_table_info, $on, CB_DATABASE_INNER_JOIN,
                'u');
        } elseif (is_string($target) && strcasecmp($target, 'user') === 0) {
            $user_table_info =& $this->_getTableInfo('cb_user');
            if (is_string($alias) && strlen($alias) > 0) {
                $table_name = $alias;
            } else {
                $table_name = $this->_getTableName($target);
            }
            $on = CB_DATABASE_TABLE_PREFIX . $table_name
                  . '.col_target = u._id '
                  . 'AND u.col_deleted IS NULL';
            $rowset->addJoin($user_table_info, $on, CB_DATABASE_INNER_JOIN,
                'u');
        }
    }
}


/**
 * System Portal Management Logic
 *
 * @package grn.portal
 * @author  Yuichi Nakamura 2005/3
 * @version 1.0
 */
class GRN_Portal_SystemPortalManageLogic extends GRN_Portal_ManageLogicBase
{
    /**
     * Constractor
     *
     */
    function __construct()
    {
        //Manage Module Name
        $this->_module_id = 'portal.system';
        //Manage Target Class Name
        $this->_manage_class_name = 'grn_portal_portal';
    }

    /**
     * Get Instance
     *
     * @param  none
     *
     * @return object $instance                  //Instance of This Class
     */
    private static $_instance = null;

    /**
     * @return GRN_Portal_SystemPortalManageLogic
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Manage Target Object
     *
     * @param  int $object_id //Manage Target Object ID(portal id)
     *
     * @return object $object                    //Manage Target Object(portal object)
     */
    function getObject($object_id)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('portal/error_code.csp');
        cb_trim_check($object_id, E_GRN_PRTL_MANAGE_INVALID_OBJECT_ID);

        //Get Manage Target Object(portal Object)
        require_once('portal/portal_logic.csp');
        $logic = GRN_Portal_SystemPortalLogic::getInstance();
        $object = $logic->get($object_id);

        //Return Manage Target Object
        $ret = $object->getRow();

        return $ret;
    }

    /**
     * Evaluate Manage Right
     *
     * @param  object $object   //Manage Target Object
     * @param  bool   $is_throw //Throw Error Flag
     * @param  int    $user_id  //User ID
     *
     * @return bool   $result                    //Eavluate Result
     */
    function evaluateManage(&$object, $is_throw = true, $user_id = null)
    {
        //Get UUM Instance
        global $G_container_base;
        $uum =& $G_container_base->getInstance('uum');

        //Get Granted Roles
        $granted_roles = [];
        if (is_null($user_id)) {
            //Get Login User Role
            $user =& $uum->getLoginUser();
            $granted_roles = $uum->listGrantedRoles();
        } else {
            //Set Everyone Role
            $user =& $uum->getUser($user_id);
            $granted_roles['Everyone'] = 1;
        }

        //Check User Object
        if ( ! is_object($user) || ! is_a($user, 'cb_user')) {
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_MANAGE_INVALID_USER_ID);
        }

        //Evaluate Manage Right
        $result = $this->_evaluateManage($user, $granted_roles, $object,
            ['manage']);
        if ($is_throw && ! $result) {
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_MANAGE_DENY);
        }

        //Return Evaluate Result
        return $result;
    }

    /**
     * Evaluate Manage Right for Multiple Object
     *
     * @param $object_list   array
     * @param $user_id       int
     *
     * @return array
     */
    function evaluateManageList($object_list, $user_id = null)
    {
        //Check Argument
        if ( ! is_array($object_list)) {
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_MANAGE_INVALID_OBJECT);
        }
        if (0 === count($object_list)) {
            return [];
        }

        //Get UUM Instance
        global $G_container_base;
        $uum =& $G_container_base->getInstance('uum');

        //Get Granted Roles
        $granted_roles = [];
        if (is_null($user_id)) {
            //Get Login User Role
            $user =& $uum->getLoginUser();
            $granted_roles = $uum->listGrantedRoles();
        } else {
            //Set Everyone Role
            $user =& $uum->getUser($user_id);
            $granted_roles['Everyone'] = 1;
        }

        //Check User Object
        if ( ! is_object($user) || ! is_a($user, 'cb_user')) {
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_MANAGE_INVALID_USER_ID);
        }

        //Create Row List
        $row_list = [];
        foreach (array_keys($object_list) as $object_id) {
            $row_list[$object_id] =& $object_list[$object_id]->getRow();
        }

        //Evaluate Manage Right
        $row_list = $this->getAllowMultiObjectList($user, $granted_roles,
            $row_list, ['manage']);
        foreach (array_keys($object_list) as $object_id) {
            if ( ! array_key_exists($object_id, $row_list)) {
                unset($object_list[$object_id]);
            }
        }

        //Return Allow Object List
        return $object_list;
    }

    /**
     * Evaluate Manage Right for Multiple Object
     *
     * @param $object_list   array
     * @param $user_id       int
     *
     * @return array
     */
    function evaluateManageListByUser($object_list, $user_id)
    {
        //Check Argument
        if ( ! is_array($object_list)) {
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_MANAGE_INVALID_OBJECT);
        }
        if (0 === count($object_list)) {
            return [];
        }

        //Get UUM Instance
        global $G_container_base;
        $uum =& $G_container_base->getInstance('uum');

        //Check User Object
        $user =& $uum->getUser($user_id);
        if ( ! is_object($user) || ! is_a($user, 'cb_user')) {
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_MANAGE_INVALID_USER_ID);
        }

        //Create Row List
        $row_list = [];
        foreach (array_keys($object_list) as $object_id) {
            $row_list[$object_id] =& $object_list[$object_id]->getRow();
        }

        //Evaluate Manage Right
        $row_list = $this->getAllowMultiObjectListByUser($user, $row_list,
            ['manage']);
        foreach (array_keys($object_list) as $object_id) {
            if ( ! array_key_exists($object_id, $row_list)) {
                unset($object_list[$object_id]);
            }
        }

        //Return Allow Object List
        return $object_list;
    }

    /**
     * Evaluate Manage Right for Multiple Object
     *
     * @param $object_list   array
     * @param $user_id       int
     *
     * @return array
     */
    function evaluateManageListByGroup($object_list, $group_id)
    {
        //Check Argument
        if ( ! is_array($object_list)) {
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_MANAGE_INVALID_OBJECT);
        }
        if (0 === count($object_list)) {
            return [];
        }

        //Get UUM Instance
        global $G_container_base;
        $uum =& $G_container_base->getInstance('uum');

        //Check Group Object
        $group =& $uum->getGroup($group_id);
        if ( ! is_object($group) || ! is_a($group, 'cb_group')) {
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_MANAGE_INVALID_GROUP_ID);
        }

        //Create Row List
        $row_list = [];
        foreach (array_keys($object_list) as $object_id) {
            $row_list[$object_id] =& $object_list[$object_id]->getRow();
        }

        //Evaluate Manage Right
        $row_list = $this->getAllowMultiObjectListByGroup($group, $row_list,
            ['manage']);
        foreach (array_keys($object_list) as $object_id) {
            if ( ! array_key_exists($object_id, $row_list)) {
                unset($object_list[$object_id]);
            }
        }

        //Return Allow Object List
        return $object_list;
    }

    /**
     * Evaluate Manage Right for Multiple Object
     *
     * @param $object_list   array
     * @param $user_id       int
     *
     * @return array
     */
    function evaluateManageListByRole($object_list, $role_id)
    {
        //Check Argument
        if ( ! is_array($object_list)) {
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_MANAGE_INVALID_OBJECT);
        }
        if (0 === count($object_list)) {
            return [];
        }

        //Check Dynamic Role
        require_once('grn/uum_util.csp');
        $uum_util = GRN_UumUtil::getInstance();
        $dynamic_role_list = $uum_util->listDynamicRoles();
        if (array_key_exists($role_id, $dynamic_role_list)) {
            $role = $role_id;
        } else {
            //Get UUM Instance
            global $G_container_base;
            $uum =& $G_container_base->getInstance('uum');

            //Check Role Object
            $role =& $uum->getStaticRole($role_id);
            if ( ! is_object($role) || ! is_a($role, 'cb_role')) {
                require_once('portal/error_code.csp');
                cb_throw_error(E_GRN_PRTL_MANAGE_INVALID_ROLE_ID);
            }
        }

        //Create Row List
        $row_list = [];
        foreach (array_keys($object_list) as $object_id) {
            $row_list[$object_id] =& $object_list[$object_id]->getRow();
        }

        //Evaluate Manage Right
        $row_list = $this->getAllowMultiObjectListByRole($role, $row_list,
            ['manage']);
        foreach (array_keys($object_list) as $object_id) {
            if ( ! array_key_exists($object_id, $row_list)) {
                unset($object_list[$object_id]);
            }
        }

        //Return Allow Object List
        return $object_list;
    }

    /**
     * Add Manage Right
     *
     * @param  int    $object_id      //Manage Target Object ID
     * @param  string $target_type    //Target Type
     * @param  int    $target_id      //Target ID
     * @param  array  $authority_list //Authority_list
     *                                (array(authority_name=>authority_value))
     *
     * @return none
     */
    function addManage($object_id, $target_type, $target_id, $authority_list)
    {
        //Call Parent Method
        parent::addManage($object_id, $target_type, $target_id,
            $authority_list);

        //Check Inspection Message Enabled
        require_once('portal/inspection.csp');
        $inspection = GRN_Portal_System_Portal_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            //Get Portal Name
            require_once('portal/portal_logic.csp');
            $system_portallogic = GRN_Portal_SystemPortalLogic::getInstance();
            $portal =& $system_portallogic->get($object_id);
            $portal_name = $portal->get('name');

            //Get UUM Instance
            global $G_container_base;
            $uum =& $G_container_base->getInstance('uum');

            //Get Target Name and ID
            switch ($target_type) {
                case GRN_PRTL_TARGET_TYPE_USER:
                    $id_name = 'uid';
                    $id_value = $target_id;
                    $user =& $uum->getUser($target_id);
                    $target_name = $user->get('display_name');
                    break;
                case GRN_PRTL_TARGET_TYPE_GROUP:
                    $id_name = 'gid';
                    $id_value = $target_id;
                    $group =& $uum->getGroup($target_id);
                    $target_name = $group->get('name');
                    break;
                case GRN_PRTL_TARGET_TYPE_STATIC_ROLE:
                    $id_name = 'rid';
                    $id_value = $target_id;
                    $role =& $uum->getStaticRole($target_id);
                    $target_name = $role->get('foreign_key');
                    break;
                case GRN_PRTL_TARGET_TYPE_DYNAMIC_ROLE:
                    $id_name = 'dynamic_role';
                    $id_value = $target_id;
                    $target_name = $target_id;
                    break;
                default:
                    $id_name = '';
                    $id_value = '';
                    $target_name = '';
                    break;
            }

            //Write Inspection Message
            $message_type = 'portal_manage_add';
            $message_args = [
                'pid'         => $object_id,
                $id_name      => $id_value,
                'portal_name' => $portal_name,
            ];
            $inspection->record($message_type, $message_args);
        }

        return;
    }

    /**
     * Delete Manage Right List
     *
     * @param  int   $object_id        //Manage Target Object ID
     * @param  array $manage_info_list //Manage Information List
     *                                 (array(manage_id, object_id, target_id, target_type, array(authority_name=>authority_value)))
     */
    function deleteManageList($object_id, $manage_info_list)
    {
        //Call Parent Method
        parent::deleteManageList($object_id, $manage_info_list);

        //Check Inspection Message Enabled
        require_once('portal/inspection.csp');
        $inspection = GRN_Portal_System_Portal_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            //Get System Portlet Logic Instance
            require_once('portal/portal_logic.csp');
            $system_portallogic = GRN_Portal_SystemPortalLogic::getInstance();

            //Get UUM Instance
            global $G_container_base;
            $uum =& $G_container_base->getInstance('uum');

            //Get Manage Infomation
            foreach ($manage_info_list as $manage_info) {
                //Get Portal Name
                $portal =& $system_portallogic->get($manage_info['object_id']);
                $portal_name = $portal->get('name');

                //Get Target Name and ID
                switch ($manage_info['target_type']) {
                    case GRN_PRTL_TARGET_TYPE_USER:
                        $id_name = 'uid';
                        $id_value = $manage_info['target_id'];
                        $user
                            =& $uum->getUser($manage_info['target_id']);
                        $target_name = $user->get('display_name');
                        break;
                    case GRN_PRTL_TARGET_TYPE_GROUP:
                        $id_name = 'gid';
                        $id_value = $manage_info['target_id'];
                        $group
                            =& $uum->getGroup($manage_info['target_id']);
                        $target_name = $group->get('name');
                        break;
                    case GRN_PRTL_TARGET_TYPE_STATIC_ROLE:
                        $id_name = 'rid';
                        $id_value = $manage_info['target_id'];
                        $role
                            =& $uum->getStaticRole($manage_info['target_id']);
                        $target_name = $role->get('foreign_key');
                        break;
                    case GRN_PRTL_TARGET_TYPE_DYNAMIC_ROLE:
                        $id_name = 'dynamic_role';
                        $id_value = $manage_info['target_id'];
                        $target_name = $manage_info['target_id'];
                        break;
                    default:
                        $id_name = '';
                        $id_value = '';
                        $target_name = '';
                        break;
                }

                //Write Inspection Message
                $message_type = 'portal_manage_delete';
                $message_args = [
                    'pid'         => $manage_info['object_id'],
                    $id_name      => $id_value,
                    'portal_name' => $portal_name,
                ];
                $inspection->record($message_type, $message_args);
            }
        }

        return;
    }
}


/**
 * System Portlet Group Management Logic
 *
 * @package grn.portal
 * @author  Yuichi Nakamura 2005/3
 * @version 1.0
 */
class GRN_Portal_SystemPortletGroupManageLogic
    extends GRN_Portal_ManageLogicBase
{
    /**
     * Constractor
     *
     */
    function __construct()
    {
        //Manage Target Class Name
        $this->_manage_class_name = 'grn_portal_portletgroup';
    }

    /** @var self */
    private static $_instance = null;

    /**
     * @return GRN_Portal_SystemPortletGroupManageLogic
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Manage Target Object
     *
     * @param  int $object_id //Manage Target Object ID(PortletGroup id)
     *
     * @return object $object                    //Manage Target Object(PortletGroup object)
     */
    function getObject($object_id)
    {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('portal/error_code.csp');
        cb_trim_check($object_id, E_GRN_PRTL_MANAGE_INVALID_OBJECT_ID);

        //Get Manage Target Object(PortletGroup Object)
        require_once('portal/portlet_group_logic.csp');
        $logic = GRN_Portal_SystemPortletGroupLogic::getInstance();
        $object = $logic->get($object_id);

        //Return Manage Target Object
        $ret = $object->getRow();

        return $ret;
    }

    /**
     * Evaluate Manage Right
     *
     * @param  object $object   //Manage Target Object
     * @param  bool   $is_throw //Throw Error Flag
     * @param  int    $user_id  //User ID
     *
     * @return bool   $result                    //Eavluate Result
     */
    function evaluateManage(&$object, $is_throw = true, $user_id = null)
    {
        //Get UUM Instance
        global $G_container_base;
        $uum =& $G_container_base->getInstance('uum');

        //Get Granted Roles
        $granted_roles = [];
        if (is_null($user_id)) {
            //Get Login User Role
            $user =& $uum->getLoginUser();
            $granted_roles = $uum->listGrantedRoles();
        } else {
            //Set Everyone Role
            $user =& $uum->getUser($user_id);
            $granted_roles['Everyone'] = 1;
        }

        //Check User Object
        if ( ! is_object($user) || ! is_a($user, 'cb_user')) {
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_MANAGE_INVALID_USER_ID);
        }

        //Evaluate Manage Right
        $result = $this->_evaluateManage($user, $granted_roles, $object,
            ['manage']);
        if ($is_throw && ! $result) {
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_MANAGE_DENY);
        }

        //Return Evaluate Result
        return $result;
    }

    /**
     * Evaluate Manage Right for Multiple Object
     *
     * @param $object_list       array
     * @param $user_id           int
     *
     * @return array
     */
    function evaluateManageList($object_list, $user_id = null)
    {
        //Cherck Argument
        if ( ! is_array($object_list)) {
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_MANAGE_INVALID_OBJECT);
        }
        if (0 === count($object_list)) {
            return [];
        }

        //Get UUM Instance
        global $G_container_base;
        $uum =& $G_container_base->getInstance('uum');

        //Get Granted Roles
        $granted_roles = [];
        if (is_null($user_id)) {
            //Get Login User Role
            $user =& $uum->getLoginUser();
            $granted_roles = $uum->listGrantedRoles();
        } else {
            //Set Everyone Role
            $user =& $uum->getUser($user_id);
            $granted_roles['Everyone'] = 1;
        }

        //Check User Object
        if ( ! is_object($user) || ! is_a($user, 'cb_user')) {
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_MANAGE_INVALID_USER_ID);
        }

        //Create Row List
        $row_list = [];
        foreach (array_keys($object_list) as $object_id) {
            $row_list[$object_id] =& $object_list[$object_id]->getRow();
        }

        //Evaluate Manage Right
        $row_list = $this->getAllowMultiObjectList($user, $granted_roles,
            $row_list, ['manage']);
        foreach (array_keys($object_list) as $object_id) {
            if ( ! array_key_exists($object_id, $row_list)) {
                unset($object_list[$object_id]);
            }
        }

        //Return Allow Object List
        return $object_list;
    }

    /**
     * Evaluate Portlet Manage Right
     *
     * @param  object $portlet  //Portlet Object
     * @param  bool   $is_throw //Throw Error Flag
     * @param  int    $user_id  //User ID
     *
     * @return bool   $result                    //Eavluate Result
     */
    function evaluateManagePortlet(&$portlet, $is_throw = true, $user_id = null)
    {
        //Get Portlet Group List
        require_once('portal/portlet_group_logic.csp');
        $portlet_group_logic
            = GRN_Portal_SystemPortletGroupLogic::getInstance();
        $portlet_group_list =& $portlet_group_logic->getList();

        //Get Allow Portlet Group List
        $allow_portlet_group_list
            = $this->evaluateManageList($portlet_group_list, $user_id);
        if (count($allow_portlet_group_list) != 0) {
            $portlet_group =& $portlet->get('group');
            if ($portlet_group) {
                $portlet_group_id = $portlet_group->getOID();
                if (array_key_exists($portlet_group_id,
                    $allow_portlet_group_list)
                ) {
                    return true;
                }
            }
        }

        //Check Throw Flag
        if ($is_throw) {
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_MANAGE_DENY);
        }

        //Return Evaluate Result
        return false;
    }

    /**
     * Evaluate Manage Right for Multiple Object
     *
     * @param  $portlet_list       array
     * @param  $user_id            int
     *
     * @return array
     */
    function evaluateManageListPortlet($portlet_list, $user_id = null)
    {
        $allow_portlet_list = [];

        //Cherck Argument
        if ( ! is_array($portlet_list)) {
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_MANAGE_INVALID_OBJECT);
        }
        if (0 === count($portlet_list)) {
            return [];
        }

        //Get Portlet Group List
        require_once('portal/portlet_group_logic.csp');
        $portlet_group_logic
            = GRN_Portal_SystemPortletGroupLogic::getInstance();
        $portlet_group_list =& $portlet_group_logic->getList();

        //Get Allow Portlet Group List
        $allow_portlet_group_list
            = $this->evaluateManageList($portlet_group_list, $user_id);
        if (count($allow_portlet_group_list) != 0) {
            foreach (array_keys($portlet_list) as $portlet_id) {
                $portlet =& $portlet_list[$portlet_id];
                $portlet_group =& $portlet->get('group');
                if ($portlet_group) {
                    $portlet_group_id = $portlet_group->getOID();
                    if (array_key_exists($portlet_group_id,
                        $allow_portlet_group_list)
                    ) {
                        $allow_portlet_list[$portlet_id] =& $portlet;
                    }
                }
            }

            return $allow_portlet_list;
        }

        //Return Allow Object List
        return $allow_portlet_list;
    }

    /**
     * Evaluate Manage Right for Multiple Object
     *
     * @param $object_list   array
     * @param $user_id       int
     *
     * @return array
     */
    function evaluateManageListByUser($object_list, $user_id)
    {
        //Check Argument
        if ( ! is_array($object_list)) {
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_MANAGE_INVALID_OBJECT);
        }
        if (0 === count($object_list)) {
            return [];
        }

        //Get UUM Instance
        global $G_container_base;
        $uum =& $G_container_base->getInstance('uum');

        //Check User Object
        $user =& $uum->getUser($user_id);
        if ( ! is_object($user) || ! is_a($user, 'cb_user')) {
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_MANAGE_INVALID_USER_ID);
        }

        //Create Row List
        $row_list = [];
        foreach (array_keys($object_list) as $object_id) {
            $row_list[$object_id] =& $object_list[$object_id]->getRow();
        }

        //Evaluate Manage Right
        $row_list = $this->getAllowMultiObjectListByUser($user, $row_list,
            ['manage']);
        foreach (array_keys($object_list) as $object_id) {
            if ( ! array_key_exists($object_id, $row_list)) {
                unset($object_list[$object_id]);
            }
        }

        //Return Allow Object List
        return $object_list;
    }

    /**
     * Evaluate Manage Right for Multiple Object
     *
     * @param $object_list   array
     * @param $user_id       int
     *
     * @return array
     */
    function evaluateManageListByGroup($object_list, $group_id)
    {
        //Check Argument
        if ( ! is_array($object_list)) {
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_MANAGE_INVALID_OBJECT);
        }
        if (0 === count($object_list)) {
            return [];
        }

        //Get UUM Instance
        global $G_container_base;
        $uum =& $G_container_base->getInstance('uum');

        //Check Group Object
        $group =& $uum->getGroup($group_id);
        if ( ! is_object($group) || ! is_a($group, 'cb_group')) {
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_MANAGE_INVALID_GROUP_ID);
        }

        //Create Row List
        $row_list = [];
        foreach (array_keys($object_list) as $object_id) {
            $row_list[$object_id] =& $object_list[$object_id]->getRow();
        }

        //Evaluate Manage Right
        $row_list = $this->getAllowMultiObjectListByGroup($group, $row_list,
            ['manage']);
        foreach (array_keys($object_list) as $object_id) {
            if ( ! array_key_exists($object_id, $row_list)) {
                unset($object_list[$object_id]);
            }
        }

        //Return Allow Object List
        return $object_list;
    }

    /**
     * Evaluate Manage Right for Multiple Object
     *
     * @param $object_list   array
     * @param $user_id       int
     *
     * @return array
     */
    function evaluateManageListByRole($object_list, $role_id)
    {
        //Check Argument
        if ( ! is_array($object_list)) {
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_MANAGE_INVALID_OBJECT);
        }
        if (0 === count($object_list)) {
            return [];
        }

        //Check Dynamic Role
        require_once('grn/uum_util.csp');
        $uum_util = GRN_UumUtil::getInstance();
        $dynamic_role_list = $uum_util->listDynamicRoles();
        if (array_key_exists($role_id, $dynamic_role_list)) {
            $role = $role_id;
        } else {
            //Get UUM Instance
            global $G_container_base;
            $uum =& $G_container_base->getInstance('uum');

            //Check Role Object
            $role =& $uum->getStaticRole($role_id);
            if ( ! is_object($role) || ! is_a($role, 'cb_role')) {
                require_once('portal/error_code.csp');
                cb_throw_error(E_GRN_PRTL_MANAGE_INVALID_ROLE_ID);
            }
        }

        //Create Row List
        $row_list = [];
        foreach (array_keys($object_list) as $object_id) {
            $row_list[$object_id] =& $object_list[$object_id]->getRow();
        }

        //Evaluate Manage Right
        $row_list = $this->getAllowMultiObjectListByRole($role, $row_list,
            ['manage']);
        foreach (array_keys($object_list) as $object_id) {
            if ( ! array_key_exists($object_id, $row_list)) {
                unset($object_list[$object_id]);
            }
        }

        //Return Allow Object List
        return $object_list;
    }

    /**
     * Add Manage Right
     *
     * @param  int    $object_id      //Manage Target Object ID
     * @param  string $target_type    //Target Type
     * @param  int    $target_id      //Target ID
     * @param  array  $authority_list //Authority_list
     *                                (array(authority_name=>authority_value))
     *
     * @return none
     */
    function addManage($object_id, $target_type, $target_id, $authority_list)
    {
        //Call Parent Method
        parent::addManage($object_id, $target_type, $target_id,
            $authority_list);

        //Check Inspection Message Enabled
        require_once('portal/inspection.csp');
        $inspection = GRN_Portal_System_Portlet_Group_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            //Get Portlet Group Name
            require_once('portal/portlet_group_logic.csp');
            $system_portletgrouplogic
                = GRN_Portal_SystemPortletGroupLogic::getInstance();
            $portlet_group =& $system_portletgrouplogic->get($object_id);
            $portlet_group_name = $portlet_group->get('name');

            //Get UUM Instance
            global $G_container_base;
            $uum =& $G_container_base->getInstance('uum');

            //Get Target Name and ID
            switch ($target_type) {
                case GRN_PRTL_TARGET_TYPE_USER:
                    $id_name = 'uid';
                    $id_value = $target_id;
                    $user =& $uum->getUser($target_id);
                    $target_name = $user->get('display_name');
                    break;
                case GRN_PRTL_TARGET_TYPE_GROUP:
                    $id_name = 'gid';
                    $id_value = $target_id;
                    $group =& $uum->getGroup($target_id);
                    $target_name = $group->get('name');
                    break;
                case GRN_PRTL_TARGET_TYPE_STATIC_ROLE:
                    $id_name = 'rid';
                    $id_value = $target_id;
                    $role =& $uum->getStaticRole($target_id);
                    $target_name = $role->get('foreign_key');
                    break;
                case GRN_PRTL_TARGET_TYPE_DYNAMIC_ROLE:
                    $id_name = 'dynamic_role';
                    $id_value = $target_id;
                    $target_name = $target_id;
                    break;
                default:
                    $id_name = '';
                    $id_value = '';
                    $target_name = '';
                    break;
            }

            //Write Inspection Message
            $message_type = 'portlet_group_manage_add';
            $message_args = [
                'pgid'               => $object_id,
                $id_name             => $id_value,
                'portlet_group_name' => $portlet_group_name,
            ];
            $inspection->record($message_type, $message_args);
        }

        return;
    }

    /**
     * Delete Manage Right List
     *
     * @param  int   $object_id        //Manage Target Object ID
     * @param  array $manage_info_list //Manage Information List
     *                                 (array(manage_id, object_id, target_id, target_type, array(authority_name=>authority_value)))
     */
    function deleteManageList($object_id, $manage_info_list)
    {
        //Call Parent Method
        parent::deleteManageList($object_id, $manage_info_list);

        //Check Inspection Message Enabled
        require_once('portal/inspection.csp');
        $inspection = GRN_Portal_System_Portlet_Group_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            //Get System Portlet Group Logic Instance
            require_once('portal/portlet_group_logic.csp');
            $system_portletgrouplogic
                = GRN_Portal_SystemPortletGroupLogic::getInstance();

            //Get UUM Instance
            global $G_container_base;
            $uum =& $G_container_base->getInstance('uum');

            //Get Manage Infomation
            foreach ($manage_info_list as $manage_info) {
                //Get Portal Name
                $portlet_group
                    =& $system_portletgrouplogic->get($manage_info['object_id']);
                $portlet_group_name = $portlet_group->get('name');

                //Get Target Name and ID
                switch ($manage_info['target_type']) {
                    case GRN_PRTL_TARGET_TYPE_USER:
                        $id_name = 'uid';
                        $id_value = $manage_info['target_id'];
                        $user
                            =& $uum->getUser($manage_info['target_id']);
                        $target_name = $user->get('display_name');
                        break;
                    case GRN_PRTL_TARGET_TYPE_GROUP:
                        $id_name = 'gid';
                        $id_value = $manage_info['target_id'];
                        $group
                            =& $uum->getGroup($manage_info['target_id']);
                        $target_name = $group->get('name');
                        break;
                    case GRN_PRTL_TARGET_TYPE_STATIC_ROLE:
                        $id_name = 'rid';
                        $id_value = $manage_info['target_id'];
                        $role
                            =& $uum->getStaticRole($manage_info['target_id']);
                        $target_name = $role->get('foreign_key');
                        break;
                    case GRN_PRTL_TARGET_TYPE_DYNAMIC_ROLE:
                        $id_name = 'dynamic_role';
                        $id_value = $manage_info['target_id'];
                        $target_name = $manage_info['target_id'];
                        break;
                    default:
                        $id_name = '';
                        $id_value = '';
                        $target_name = '';
                        break;
                }

                //Write Inspection Message
                $message_type = 'portal_group_manage_delete';
                $message_args = [
                    'pgid'               => $manage_info['object_id'],
                    $id_name             => $id_value,
                    'portlet_group_name' => $portlet_group_name,
                ];
                $inspection->record($message_type, $message_args);
            }
        }

        return;
    }
}


