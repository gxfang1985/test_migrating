<?php
/**
 * Portal Application Portlet Informarion Manager Base Class
 *
 * @author  Yuichi, Nakamura 2005/7
 * @version 1.0
 * @package grn.portal
 */

/** Portal Application **/
require_once('portal/resources.csp');
require_once('grn/application.csp');

/**
 * Portlet Information Manager Base Class
 *
 * @package grn.portal
 */
class GRN_Portal_Portlet_Information_Manager_Base
{
    /** Table Name **/
    var $_table_name = null;

    /** Portlet List **/
    var $_list = [];

    /**
     * Constructor
     */
    function __construct()
    {
        $this->_table_name = 'tab_grn_portal_portlet';
    }

    /** @var self */
    private static $_instance = null;

    /**
     * @return GRN_Portal_Portlet_Information_Manager_Base
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Database
     *
     * @return CB_DatabaseConnection
     */
    function _getDatabase()
    {
        static $database = null;
        if (is_null($database)) {
            $app_locator = GRN_ApplicationLocator::instance();
            $database = $app_locator->getConnection('portal');
        }

        return $database;
    }
}

;

/**
 * System Portlet Information Manager Base Class
 *
 * @package grn.portal
 */
class GRN_Portal_System_Portlet_Information_Manager_Base
    extends GRN_Portal_Portlet_Information_Manager_Base
{
    /**
     * Constructor
     */
    function __construct()
    {
        parent::__construct();
    }

    /** @var self */
    private static $_instance = null;

    /**
     * @return GRN_Portal_System_Portlet_Information_Manager_Base
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Portlet Information
     *
     * @access  public
     *
     * @param  int  $portlet_id //Portlet ID
     * @param  int  $lock_mode  //Lock Mode
     * @param  bool $refresh    //Refresh Cache
     *
     * @return array  $portlet                   //Portlet Information
     */
    function &get(
        $portlet_id,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $refresh = false
    ) {
        //Get Portlet List
        $portlet_list =& $this->getList($lock_mode, $refresh);

        //Get Portlet
        if ( ! array_key_exists($portlet_id, $portlet_list)) {
            $ret = false;

            return $ret;
        }

        //Return Portlet Information
        return $portlet_list[$portlet_id];
    }

    /**
     * Get Portlet List
     *
     * @access  public
     *
     * @param  int  $lock_mode //Lock Mode
     * @param  bool $refresh   //Refresh Cache
     *
     * @return array  $portlet_list              //Portlet List
     */
    function &getList($lock_mode = CB_DATABASE_DEFAULT_LOCK, $refresh = false)
    {
        $portlet_list = [];
        //Get Portlet List From Cache
        $cached = false;
        if ( ! $refresh) {
            if (array_key_exists('0', $this->_list)) {
                $portlet_list =& $this->_list['0'];
                $cached = true;
            }
        }

        //Get Portlet List From Database
        if ( ! $cached || $refresh) {
            require_once('portal/PortalFacade.csp');
            require_once('fw/i18n.csp');
            $i18n = CB_I18N::getInstance();

            $portalDAO = new PortalFacade();
            $dataObj = [];
            $dataObj['offset'] = 0;
            $dataObj['limit'] = -1;
            $dataObj['lock'] = $lock_mode;
            $dataObj['language'] = $i18n->getCurrentLanguage();

            $portletList = $portalDAO->getPortletList($dataObj);

            //Update Portlet List
            foreach ($portletList as $portlet) {
                $portletArray = $portlet->convertArray();
                $object_id = $portletArray['_id'];
                $this->_list['0'][$object_id] = $portletArray;
            }

            if (count($portletList) > 0) {
                $portlet_list =& $this->_list['0'];
            }
        }

        //Return Portlet List
        return $portlet_list;
    }
}

;

/**
 * System HTML Portlet Information Manager Base Class
 *
 * @package grn.portal
 */
class GRN_Portal_System_HTML_Portlet_Information_Manager_Base
    extends GRN_Portal_System_Portlet_Information_Manager_Base
{
    /**
     * Constructor
     */
    function __construct()
    {
        parent::__construct();
    }

    /** @var self */
    private static $_instance = null;

    /**
     * @return GRN_Portal_System_HTML_Portlet_Information_Manager_Base
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Portlet List
     *
     * @access  public
     *
     * @param  int  $lock_mode //Lock Mode
     * @param  bool $refresh   //Refresh Cache
     *
     * @return array  $portlet_list              //Portlet List
     */
    function &getList($lock_mode = CB_DATABASE_DEFAULT_LOCK, $refresh = false)
    {
        $portlet_list = [];

        //Get Portlet List From Cache
        $cached = false;
        if ( ! $refresh) {
            if (array_key_exists('0', $this->_list)) {
                $portlet_list =& $this->_list['0'];
                $cached = true;
            }
        }

        //Get Portlet List From Database
        if ( ! $cached || $refresh) {
            require_once('portal/PortalFacade.csp');
            require_once('fw/i18n.csp');
            $i18n = CB_I18N::getInstance();

            $portalDAO = new PortalFacade();
            $dataObj = [];
            $dataObj['offset'] = 0;
            $dataObj['limit'] = -1;
            $dataObj['lock'] = $lock_mode;
            $dataObj['language'] = $i18n->getCurrentLanguage();

            $portletList = $portalDAO->getPortletListByType($dataObj,
                GRN_PRTL_PORTLET_TYPE_HTML);

            //Update Portlet List
            foreach ($portletList as $portlet) {
                $portletArray = $portlet->convertArray();
                $object_id = $portletArray['_id'];
                $this->_list['0'][$object_id] = $portletArray;
            }

            if (count($portletList) > 0) {
                $portlet_list =& $this->_list['0'];
            }
        }

        //Return Portlet List
        return $portlet_list;
    }
}

;

/**
 * System PHP Portlet Information Manager Base Class
 *
 * @package grn.portal
 */
class GRN_Portal_System_PHP_Portlet_Information_Manager_Base
    extends GRN_Portal_System_Portlet_Information_Manager_Base
{
    /**
     * Constructor
     */
    function __construct()
    {
        parent::__construct();
    }

    /** @var GRN_Portal_System_PHP_Portlet_Information_Manager_Base */
    private static $_instance = null;

    /**
     * @return GRN_Portal_System_PHP_Portlet_Information_Manager_Base
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Portlet List
     *
     * @access  public
     *
     * @param  int  $lock_mode //Lock Mode
     * @param  bool $refresh   //Refresh Cache
     *
     * @return array  $portlet_list              //Portlet List
     */
    function &getList($lock_mode = CB_DATABASE_DEFAULT_LOCK, $refresh = false)
    {
        $portlet_list = [];

        //Get Portlet List From Cache
        $cached = false;
        if ( ! $refresh) {
            if (array_key_exists('0', $this->_list)) {
                $portlet_list =& $this->_list['0'];
                $cached = true;
            }
        }

        //Get Portlet List From Database
        if ( ! $cached || $refresh) {
            require_once('portal/PortalFacade.csp');
            require_once('fw/i18n.csp');
            $i18n = CB_I18N::getInstance();

            $portalDAO = new PortalFacade();
            $dataObj = [];
            $dataObj['offset'] = 0;
            $dataObj['limit'] = -1;
            $dataObj['lock'] = $lock_mode;
            $dataObj['language'] = $i18n->getCurrentLanguage();

            $portletList = $portalDAO->getPortletListByType($dataObj,
                GRN_PRTL_PORTLET_TYPE_PHP);

            //Update Portlet List
            foreach ($portletList as $portlet) {
                $portletArray = $portlet->convertArray();
                $object_id = $portletArray['_id'];
                $this->_list['0'][$object_id] = $portletArray;
            }

            if (count($portletList) > 0) {
                $portlet_list =& $this->_list['0'];
            }
        }

        //Return Portlet List
        return $portlet_list;
    }
}

;

/**
 * System Embedded Portlet Information Manager Base Class
 *
 * @package grn.portal
 */
class GRN_Portal_System_Embedded_Portlet_Information_Manager_Base
    extends GRN_Portal_System_Portlet_Information_Manager_Base
{
    /**
     * Constructor
     */
    function __construct()
    {
        parent::__construct();
    }

    /** @var self */
    private static $_instance = null;

    /**
     * @return GRN_Portal_System_Embedded_Portlet_Information_Manager_Base
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Portlet List
     *
     * @access  public
     *
     * @param  int  $lock_mode //Lock Mode
     * @param  bool $refresh   //Refresh Cache
     *
     * @return array  $portlet_list              //Portlet List
     */
    function &getList($lock_mode = CB_DATABASE_DEFAULT_LOCK, $refresh = false)
    {
        $portlet_list = [];

        //Get Portlet List From Cache
        $cached = false;
        if ( ! $refresh) {
            if (array_key_exists('0', $this->_list)) {
                $portlet_list =& $this->_list['0'];
                $cached = true;
            }
        }

        //Get Portlet List From Database
        if ( ! $cached || $refresh) {
            require_once('portal/PortalFacade.csp');
            require_once('fw/i18n.csp');
            $i18n = CB_I18N::getInstance();

            $portalDAO = new PortalFacade();
            $dataObj = [];
            $dataObj['offset'] = 0;
            $dataObj['limit'] = -1;
            $dataObj['lock'] = $lock_mode;
            $dataObj['language'] = $i18n->getCurrentLanguage();
            $notTypeList = [
                GRN_PRTL_PORTLET_TYPE_HTML,
                GRN_PRTL_PORTLET_TYPE_PHP
            ];

            $portletList = $portalDAO->getPortletListByNotTypes($dataObj,
                $notTypeList);

            //Update Portlet List
            foreach ($portletList as $portlet) {
                $portletArray = $portlet->convertArray();
                $object_id = $portletArray['_id'];
                $this->_list['0'][$object_id] = $portletArray;
            }

            if (count($portletList) > 0) {
                $portlet_list =& $this->_list['0'];
            }
        }

        //Return Portlet List
        return $portlet_list;
    }
}

;

/**
 * Personal Portlet Information Manager Base Class
 *
 * @package grn.portal
 */
class GRN_Portal_Personal_Portlet_Information_Manager_Base
    extends GRN_Portal_Portlet_Information_Manager_Base
{
    /**
     * Constructor
     */
    function __construct()
    {
        parent::__construct();
    }

    /** @var self */
    private static $_instance = null;

    /**
     * @return GRN_Portal_Personal_Portlet_Information_Manager_Base
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Portlet Information
     *
     * @access  public
     *
     * @param  int  $portlet_id //Portlet ID
     * @param  int  $user_id    //User ID
     * @param  int  $lock_mode  //Lock Mode
     * @param  bool $refresh    //Refresh Cache
     *
     * @return array  $portlet                   //Portlet Information
     */
    function &get(
        $portlet_id,
        $user_id,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $refresh = false
    ) {
        //Get Portlet List
        $portlet_list =& $this->getList($user_id, $lock_mode, $refresh);

        //Get Portlet
        if ( ! array_key_exists($portlet_id, $portlet_list)) {
            $ret = false;

            return $ret;
        }

        //Return Portlet Information
        return $portlet_list[$portlet_id];
    }

    /**
     * Get Portlet List
     *
     * @access  public
     *
     * @param  int  $user_id   //User ID
     * @param  int  $lock_mode //Lock Mode
     * @param  bool $refresh   //Refresh Cache
     *
     * @return array  $portlet_list              //Portlet Information List
     */
    function &getList(
        $user_id,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $refresh = false
    ) {
        $portlet_list = [];

        //Get Portlet List From Cache
        $cached = false;
        if ( ! $refresh) {
            if (array_key_exists($user_id, $this->_list)) {
                $portlet_list =& $this->_list[$user_id];
                $cached = true;
            }
        }

        //Get Portlet List From Database
        if ( ! $cached || $refresh) {
            require_once('portal/PortalFacade.csp');
            require_once('fw/i18n.csp');
            $i18n = CB_I18N::getInstance();

            $portalDAO = new PortalFacade();
            $dataObj = [];
            $dataObj['offset'] = 0;
            $dataObj['limit'] = -1;
            $dataObj['lock'] = $lock_mode;
            $dataObj['language'] = $i18n->getCurrentLanguage();
            $dataObj['userId'] = $user_id;

            //修正前はソート指定が「ORDER BY _id」だったが、col_list_indexにはデフォルトで_idが入ってるのでORDER BY col_list_indexでソートしている（クエリを共通で利用している関係で場合分けしたくないため）
            $portletList = $portalDAO->getPortletList($dataObj);

            //Update Portlet List
            foreach ($portletList as $portlet) {
                $portletArray = $portlet->convertArray();
                $object_id = $portletArray['_id'];
                $this->_list[$user_id][$object_id] = $portletArray;
            }

            if (count($portletList) > 0) {
                $portlet_list =& $this->_list[$user_id];
            }
        }

        //Return Portlet List
        return $portlet_list;
    }
}

;

/**
 * Personal HTML Portlet Information Manager Base Class
 *
 * @package grn.portal
 */
class GRN_Portal_Personal_HTML_Portlet_Information_Manager_Base
    extends GRN_Portal_Personal_Portlet_Information_Manager_Base
{
    /**
     * Constructor
     */
    function __construct()
    {
        parent::__construct();
    }

    /** @var self */
    private static $_instance = null;

    /**
     * @return GRN_Portal_Personal_HTML_Portlet_Information_Manager_Base
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Portlet List
     *
     * @access  public
     *
     * @param  int  $user_id   //User ID
     * @param  int  $lock_mode //Lock Mode
     * @param  bool $refresh   //Refresh Cache
     *
     * @return array $portlet_list               //Portlet List
     */
    function &getList(
        $user_id,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $refresh = false
    ) {
        $portlet_list = [];

        //Get Portlet List From Cache
        $cached = false;
        if ( ! $refresh) {
            if (array_key_exists($user_id, $this->_list)) {
                $portlet_list =& $this->_list[$user_id];
                $cached = true;
            }
        }

        //Get Portlet List From Database
        if ( ! $cached || $refresh) {
            require_once('portal/PortalFacade.csp');
            require_once('fw/i18n.csp');
            $i18n = CB_I18N::getInstance();

            $portalDAO = new PortalFacade();
            $dataObj = [];
            $dataObj['offset'] = 0;
            $dataObj['limit'] = -1;
            $dataObj['lock'] = $lock_mode;
            $dataObj['language'] = $i18n->getCurrentLanguage();
            $dataObj['userId'] = $user_id;

            $portletList = $portalDAO->getPortletListByType($dataObj,
                GRN_PRTL_PORTLET_TYPE_HTML);

            //Update Portlet List
            foreach ($portletList as $portlet) {
                $portletArray = $portlet->convertArray();
                $object_id = $portletArray['_id'];
                $this->_list[$user_id][$object_id] = $portletArray;
            }

            if (count($portletList) > 0) {
                $portlet_list =& $this->_list[$user_id];
            }
        }

        //Return Portlet List
        return $portlet_list;
    }
}

;

