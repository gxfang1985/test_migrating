<?php
/**
 * Portal Application Access Manager Base Class
 *
 * @author  Yuichi, Nakamura 2005/5
 * @version 1.0
 * @package grn.link
 */

/** Portal Application **/
require_once('portal/resources.csp');
require_once('grn/application.csp');

/**
 * Portal Access Manager BaseClass
 *
 * @package grn.portal
 */
class GRN_Portal_Access_Information_Manager_Base
{
    /** Portal Access Table List **/
    var $_table_list = [];

    /** Portal Access Cache List **/
    var $_access_cache_list = [];

    /** Module ID **/
    var $_module_id = null;

    /** Table Name List **/
    var $_table_name_list = [];

    /** Authority List **/
    var $_authority_list = [];

    function __construct()
    {

    }

    /** @var self */
    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return self
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Database
     *
     * @return CB_DatabaseConnection
     */
    function _getDatabase()
    {
        static $database = null;
        if (is_null($database)) {
            $app_locator = GRN_ApplicationLocator::instance();
            $database = $app_locator->getConnection('portal');
        }

        return $database;
    }

    /**
     * Get Table Information Object
     *
     * @param  string $target_type //Table Type(user/group/static_role)
     *
     * @return CB_TableInfo
     */
    function _getTableInfo($target_type)
    {
        $table_list =& $this->_table_list;
        if ( ! array_key_exists($target_type, $table_list)) {
            $app_locator = GRN_ApplicationLocator::instance();
            $table_manager = $app_locator->getTableManager('portal');
            switch ($target_type) {
                case GRN_PRTL_ACCESS_TARGET_TYPE_USER:
                    $table_list[$target_type]
                        = $table_manager->getTableInfo($this->_table_name_list[GRN_PRTL_ACCESS_TARGET_TYPE_USER]);
                    break;
                case GRN_PRTL_ACCESS_TARGET_TYPE_GROUP:
                    $table_list[$target_type]
                        = $table_manager->getTableInfo($this->_table_name_list[GRN_PRTL_ACCESS_TARGET_TYPE_GROUP]);
                    break;
                case GRN_PRTL_ACCESS_TARGET_TYPE_STATIC_ROLE:
                    $table_list[$target_type]
                        = $table_manager->getTableInfo($this->_table_name_list[GRN_PRTL_ACCESS_TARGET_TYPE_STATIC_ROLE]);
                    break;
                case GRN_PRTL_ACCESS_TARGET_TYPE_DYNAMIC_ROLE:
                    $table_list[$target_type]
                        = $table_manager->getTableInfo($this->_table_name_list[GRN_PRTL_ACCESS_TARGET_TYPE_DYNAMIC_ROLE]);
                    break;
                default:
                    assert('FALSE');
                    break;
            }
        }

        return $table_list[$target_type];
    }

    /**
     * Get Column List
     *
     * @param CB_TableInfo $table_info //Target Table Information
     *
     * @return array data of columns
     */
    function &_getColumnList($table_info)
    {
        static $column_name_list = null;
        if (is_null($column_name_list)) {
            require_once('portal/table.csp');
            $column_info = $table_info->getColumnInfo();
            foreach (array_keys($column_info) as $column_name) {
                $column_name_list[] = 'col_' . $column_name;
            }
            $column_name_list[] = '_id';
        }

        return $column_name_list;
    }

    /**
     * Get Default Security Model
     *
     * @param  none
     *
     * @return string $security_model            //Security Model
     */
    function getDefaultSecurityModel()
    {
        //Get Common Security Policy
        global $G_container_app;
        $common_policy = $G_container_app->getInstance('common_policy');
        $policy = $common_policy->getPolicy($this->_module_id,
            'security_model');

        //Get security_model
        if ($policy == 'revoke') {
            //Revoke
            $security_model = 'revoke';
        } else {
            //Grant
            $security_model = 'grant';
        }

        return $security_model;
    }

    /**
     * Get Security Model
     *
     * @param  object $object //Object
     *
     * @return string $security_model            //Security Model
     */
    function getSecurityModel(& $object)
    {
        if (is_object($object)) {
            $security_model = $object->get(GRN_PRTL_PROPERTY_SECURITY_MODEL);
        } elseif (array_key_exists('col_security_model', $object)) {
            $security_model = $object['col_security_model'];
        } elseif (array_key_exists('layout_col_security_model', $object)) {
            $security_model = $object['layout_col_security_model'];
        } elseif (array_key_exists('portal_col_security_model', $object)) {
            $security_model = $object['portal_col_security_model'];
        }

        if (is_null($security_model)) {
            //Default Security Model
            $security_model = $this->getDefaultSecurityModel();
        } else {
            //Security Model
            $security_model = $security_model ? 'revoke' : 'grant';
        }

        return $security_model;
    }

    /**
     * set Access Cache
     *
     * @param  int   $user_id        //User ID
     * @param  int   $object_id      //Object ID(Portal/Portlet Layout/My Portal)
     * @param  array $authority_list //Authority List
     *
     * @return void
     */
    function setAccessCache($user_id, $object_id, $authority_list)
    {
        //Set Access Cache
        foreach ($authority_list as $authority_id => $authority_value) {
            $this->_access_cache_list[$user_id][$object_id][$authority_id]
                = $authority_value;
        }

        return;
    }

    /**
     * get Access Cache
     *
     * @param  int $user_id   //User ID
     * @param  int $object_id //Object ID(Portal/Portlet Layout/My Portal)
     *
     * @return array  $authority_list            //Authority List
     */
    function getAccessCache($user_id, $object_id)
    {
        //Check Access Cache Availavle
        if (array_key_exists($user_id, $this->_access_cache_list)) {
            if (array_key_exists($object_id,
                $this->_access_cache_list[$user_id])
            ) {
                //Return Access Cache
                return $this->_access_cache_list[$user_id][$object_id];
            }
        }

        return false;
    }

    /**
     * clear Access  Cache
     *
     * @return false
     */
    function clearAccessCache()
    {
        $this->_access_cache_list = [];

        return false;
    }

    /**
     * Create Target Condition
     *
     * @param  array  $target_list //Target List
     * @param  string $target_type //Target Type(user/group/static_role/dynamic_role)
     *
     * @return string $condition                 //Condition Strring
     */
    function _createTargetCondition($target_list, $target_type)
    {
        $condition = null;
        //escape!
        $app_locator = GRN_ApplicationLocator::instance();
        $db = $app_locator->getConnection('portal');

        //Create Condition From Target List
        switch ($target_type) {
            case GRN_PRTL_ACCESS_TARGET_TYPE_DYNAMIC_ROLE:
                $condition_list = [];
                foreach ($target_list as $target_id => $target_value) {
                    if ($target_value == 1) {
                        //escape!
                        $condition_list[] = sprintf("'%s'",
                            $db->escape($target_id));
                    }
                }
                $condition = sprintf('(col_target IN (%s))',
                    implode(',', $condition_list));
                break;
            default:
                if (count($target_list) != 0) {
                    $keys = array_keys($target_list);
                    $escaped_keys = [];
                    foreach ($keys as $key) {
                        $escaped_keys [] = "'" . $db->escape($key) . "'";
                    }
                    $condition = sprintf('(col_target IN (%s))',
                        implode(',', $escaped_keys));
                    //escape!

                }
                break;
        }

        return $condition;
    }

    /**
     * Create Object Condition
     *
     * @param  array $object_list //Object List
     *
     * @return string $condition                 //Condition String
     */
    function _createObjectCondition(& $object_list)
    {
        //Create Condition From Category List
        $condition = null;
        //escape!
        $app_locator = GRN_ApplicationLocator::instance();
        $db = $app_locator->getConnection('portal');

        if (count($object_list) != 0) {
            $keys = array_keys($object_list);
            $escaped_keys = [];
            foreach ($keys as $key) {
                $escaped_keys [] = "'" . $db->escape($key) . "'";
            }
            $condition = sprintf('(col_object IN (%s))',
                implode(',', $escaped_keys));
            //escape!
        }

        return $condition;
    }
}

/**
 * Portal Portal Access Manager Class
 *
 * @package grn.portal
 */
class GRN_Portal_Portal_Access_Information_Manager_Base
    extends GRN_Portal_Access_Information_Manager_Base
{
    //Portlet Information Manager Instance
    var $_portal_information_manager_base = null;

    /**
     * Constructor
     *
     */
    function __construct()
    {
        //Initialize Parent Class
        $this->_module_id = 'portal.system';
        $this->_table_name_list = [
            GRN_PRTL_ACCESS_TARGET_TYPE_USER         => GRN_PRTL_TABLE_PORTAL_USER,
            GRN_PRTL_ACCESS_TARGET_TYPE_GROUP        => GRN_PRTL_TABLE_PORTAL_GROUP,
            GRN_PRTL_ACCESS_TARGET_TYPE_STATIC_ROLE  => GRN_PRTL_TABLE_PORTAL_STATIC_ROLE,
            GRN_PRTL_ACCESS_TARGET_TYPE_DYNAMIC_ROLE => GRN_PRTL_TABLE_PORTAL_DYNAMIC_ROLE,
        ];
        $this->_authority_list = ['browse' => 0];
    }


    /** @var self */
    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return self
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Portal Information Manager Base
     *
     * @return GRN_Portal_System_Portal_Information_Manager_Base
     */
    function _getPortalInformationManagerBase()
    {
        if (is_null($this->_portal_information_manager_base)) {
            require_once('portal/portal_information_manager_base.csp');
            $this->_portal_information_manager_base
                = GRN_Portal_System_Portal_Information_Manager_Base::getInstance();
        }

        return $this->_portal_information_manager_base;
    }

    /**
     * Evaluate Portal List
     *
     * @param  array   $portal_list       //Portal List
     * @param  CB_User $user
     * @param  array   $dynamic_role_list //Dynamic Role List
     * @param int      $lock_mode         //Lock Mode
     *
     * @return array  $access_list               //Evaluate Result Access List
     */
    function evaluatePortalList(
        $portal_list,
        & $user,
        $dynamic_role_list,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get UUM Instance
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');

        //Get Portal Information Manager Base Instance
        $portal_information_manager_base
            = $this->_getPortalInformationManagerBase();

        //Get Evaluate Target List
        $targets_list = [];
        $user_id
            = $user->getOID();
        $targets_list[GRN_PRTL_ACCESS_TARGET_TYPE_USER]
            = [$user_id => &$user];
        $targets_list[GRN_PRTL_ACCESS_TARGET_TYPE_GROUP]
            = $uum->getUserGroups($user_id);
        $targets_list[GRN_PRTL_ACCESS_TARGET_TYPE_STATIC_ROLE]
            = $uum->getUserRoles($user_id);;
        $targets_list[GRN_PRTL_ACCESS_TARGET_TYPE_DYNAMIC_ROLE]
            = $dynamic_role_list;

        //Initialize Access Cache
        $access_list = [];
        foreach (array_keys($portal_list) as $portal_id) {
            $security_model = $this->getSecurityModel($portal_list[$portal_id]);
            $auhority = ($security_model == 'grant') ? 0 : 1;
            foreach (array_keys($this->_authority_list) as $authorty_id) {
                $authority_list = [$authorty_id => $auhority];
            }
            $this->setAccessCache($user_id, $portal_id, $authority_list);
            $access_list[$user_id][$portal_id] = $authority_list;
        }

        //Check Access
        foreach (array_keys($targets_list) as $targets_type) {
            //Check Target List Count
            if (count($targets_list[$targets_type]) === 0) {
                continue;
            }
            $target_list =& $targets_list[$targets_type];

            //Create Condition
            $condition = null;
            $target_condition = $this->_createTargetCondition($target_list,
                $targets_type);
            $portal_condition = $this->_createObjectCondition($portal_list);
            $condition = sprintf('WHERE %s AND %s', $target_condition,
                $portal_condition);

            //Get Table Information
            $table_info = $this->_getTableInfo($targets_type);

            //Create Table Column List
            $column_array = [];
            foreach ($this->_getColumnList($table_info) as $column) {
                $column_array[] = CB_DATABASE_TABLE_PREFIX
                                  . $table_info->getTableName() . '.' . $column;
            }
            $column_list = implode(',', $column_array);

            //Get Database
            $database = $this->_getDatabase();

            //Create Query
            if (strcmp($targets_type, 'user') === 0) {
                $from = CB_DATABASE_TABLE_PREFIX . $table_info->getTableName()
                        . ' INNER JOIN tab_cb_user AS u ON '
                        . CB_DATABASE_TABLE_PREFIX . $table_info->getTableName()
                        . '.col_target = u._id AND u.col_deleted IS NULL';
            } else {
                $from = CB_DATABASE_TABLE_PREFIX . $table_info->getTableName();
            }
            $query = sprintf('SELECT %s FROM %s %s', $column_list, $from,
                $condition);
            $query = $database->select_format($query, 0, -1, $lock_mode);
            //Execute Query
            $result = $database->query($query);
            if ($result === false) {
                //Throw Query Error
                $database->throwError(['query' => 'query failed: ' . $query]);
            }

            //Create RowSet With Condition
            $count = $database->num_rows($result);
            for ($i = 0; $i < $count; $i++) {
                $row = $database->fetch_assoc($result);

                //Get Portal Object
                $portal_id =& $row['col_object'];
                $portal =& $portal_information_manager_base->get($portal_id);

                //Get Security Model
                $security_model = $this->getSecurityModel($portal);

                //Set Access Cache
                foreach (array_keys($this->_authority_list) as $authority_id) {
                    //Get Authority Value
                    $authority_value = $row['col_authority_' . $authority_id];
                    $prev_authority_value
                        = $access_list[$user_id][$portal_id][$authority_id];
                    if ($security_model == 'grant') {
                        $authority_value = ($authority_value == 1) ? 1 : 0;
                        $authority_value = max($prev_authority_value,
                            $authority_value);
                    } else {
                        $authority_value = ($authority_value == 1) ? 0 : 1;
                        $authority_value = min($prev_authority_value,
                            $authority_value);
                    }
                    $access_list[$user_id][$portal_id][$authority_id]
                        = $authority_value;
                }
                $this->setAccessCache($user_id, $portal_id,
                    $access_list[$user_id][$portal_id]);
            }
        }

        //Return Access List
        return $access_list;
    }
}

/**
 * Portal Portlet Layout Access Manager Class
 *
 * @package grn.portal
 */
class GRN_Portal_Portlet_Layout_Access_Information_Manager_Base
    extends GRN_Portal_Access_Information_Manager_Base
{
    /**
     * Constructor
     */
    function __construct()
    {
        //Initialize Parent Class
        $this->_module_id = 'portlet.layout';
        $this->_table_name_list = [
            GRN_PRTL_ACCESS_TARGET_TYPE_USER         => GRN_PRTL_TABLE_PORTLET_LAYOUT_USER,
            GRN_PRTL_ACCESS_TARGET_TYPE_GROUP        => GRN_PRTL_TABLE_PORTLET_LAYOUT_GROUP,
            GRN_PRTL_ACCESS_TARGET_TYPE_STATIC_ROLE  => GRN_PRTL_TABLE_PORTLET_LAYOUT_STATIC_ROLE,
            GRN_PRTL_ACCESS_TARGET_TYPE_DYNAMIC_ROLE => GRN_PRTL_TABLE_PORTLET_LAYOUT_DYNAMIC_ROLE,
        ];
        $this->_authority_list = ['browse' => 0];
    }


    /** @var self */
    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return self
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Evaluate Portlet Layout List
     *
     * @param  array   $portlet_layout_list //portlet layout List
     * @param  CB_User $user
     * @param  array   $dynamic_role_list   //Dynamic Role List
     * @param int      $lock_mode           //Lock Mode
     *
     * @return array  $access_list               //Evaluate Result Access List
     */
    function &evaluatePortletLayoutList(
        $portlet_layout_list,
        & $user,
        $dynamic_role_list,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get UUM Instance
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');

        //Get Evaluate Target List
        $targets_list = [];
        $user_id
            = $user->getOID();
        $targets_list[GRN_PRTL_ACCESS_TARGET_TYPE_USER]
            = [$user_id => &$user];
        $targets_list[GRN_PRTL_ACCESS_TARGET_TYPE_GROUP]
            = $uum->getUserGroups($user_id);
        $targets_list[GRN_PRTL_ACCESS_TARGET_TYPE_STATIC_ROLE]
            = $uum->getUserRoles($user_id);;
        $targets_list[GRN_PRTL_ACCESS_TARGET_TYPE_DYNAMIC_ROLE]
            = $dynamic_role_list;

        //Initialize Access Cache
        $access_list = [];
        foreach (array_keys($portlet_layout_list) as $portlet_layout_id) {
            $security_model
                = $this->getSecurityModel($portlet_layout_list[$portlet_layout_id]);
            $auhority = ($security_model == 'grant') ? 0 : 1;
            foreach (array_keys($this->_authority_list) as $authorty_id) {
                $authority_list = [$authorty_id => $auhority];
            }
            $this->setAccessCache($user_id, $portlet_layout_id,
                $authority_list);
            $access_list[$user_id][$portlet_layout_id] = $authority_list;
        }

        //Check Access
        foreach (array_keys($targets_list) as $targets_type) {
            //Check Target List Count
            if (count($targets_list[$targets_type]) === 0) {
                continue;
            }
            $target_list =& $targets_list[$targets_type];

            //Create Condition
            $condition = null;
            $target_condition
                = $this->_createTargetCondition($target_list,
                $targets_type);
            $portlet_layout_condition
                = $this->_createObjectCondition($portlet_layout_list);
            $condition = sprintf('WHERE %s AND %s', $target_condition,
                $portlet_layout_condition);

            //Get Table Information
            $table_info = $this->_getTableInfo($targets_type);

            //Create Table Column List
            $column_array = [];
            foreach ($this->_getColumnList($table_info) as $column) {
                $column_array[] = CB_DATABASE_TABLE_PREFIX
                                  . $table_info->getTableName() . '.' . $column;
            }
            $column_list = implode(',', $column_array);

            //Get Database
            $database = $this->_getDatabase();

            //Create Query
            if (strcmp($targets_type, 'user') === 0) {
                $from = CB_DATABASE_TABLE_PREFIX . $table_info->getTableName()
                        . ' INNER JOIN tab_cb_user AS u ON '
                        . CB_DATABASE_TABLE_PREFIX . $table_info->getTableName()
                        . '.col_target = u._id AND u.col_deleted IS NULL';
            } else {
                $from = CB_DATABASE_TABLE_PREFIX . $table_info->getTableName();
            }
            $query = sprintf('SELECT %s FROM %s %s', $column_list, $from,
                $condition);
            $query = $database->select_format($query, 0, -1, $lock_mode);

            //Execute Query
            $result = $database->query($query);
            if ($result === false) {
                //Throw Query Error
                $database->throwError(['query' => 'query failed: ' . $query]);
            }

            //Create RowSet With Condition
            $count = $database->num_rows($result);
            for ($i = 0; $i < $count; $i++) {
                $row = $database->fetch_assoc($result);

                //Get Portlet Layout Object
                $tempRortletLayoutId = $row['col_object'];

                //Get Security Model
                $security_model
                    = $this->getSecurityModel($portlet_layout_list[$tempRortletLayoutId]);

                //Set Access Cache
                foreach (array_keys($this->_authority_list) as $authority_id) {
                    //Get Authority Value
                    $authority_value = $row['col_authority_' . $authority_id];
                    $prev_authority_value
                        = $access_list[$user_id][$tempRortletLayoutId][$authority_id];
                    if ($security_model == 'grant') {
                        $authority_value = ($authority_value == 1) ? 1 : 0;
                        $authority_value = max($prev_authority_value,
                            $authority_value);
                    } else {
                        $authority_value = ($authority_value == 1) ? 0 : 1;
                        $authority_value = min($prev_authority_value,
                            $authority_value);
                    }
                    $access_list[$user_id][$tempRortletLayoutId][$authority_id]
                        = $authority_value;
                }
                $this->setAccessCache($user_id, $tempRortletLayoutId,
                    $access_list[$user_id][$tempRortletLayoutId]);
            }
        }

        //Return Access List
        return $access_list;
    }
}

/**
 * Portal Personal Portal Access Manager Class
 *
 * @package grn.portal
 */
class GRN_Portal_Personal_Portal_Access_Information_Manager_Base
    extends GRN_Portal_Access_Information_Manager_Base
{

    /**
     * Constructor
     */
    function __construct()
    {
        //Initialize Parent Class
        $this->_module_id = 'portlet.layout';
        $this->_table_name_list = [
            GRN_PRTL_ACCESS_TARGET_TYPE_USER         => GRN_PRTL_TABLE_MYPORTAL_USER,
            GRN_PRTL_ACCESS_TARGET_TYPE_GROUP        => GRN_PRTL_TABLE_MYPORTAL_GROUP,
            GRN_PRTL_ACCESS_TARGET_TYPE_STATIC_ROLE  => GRN_PRTL_TABLE_MYPORTAL_STATIC_ROLE,
            GRN_PRTL_ACCESS_TARGET_TYPE_DYNAMIC_ROLE => GRN_PRTL_TABLE_MYPORTAL_DYNAMIC_ROLE,
        ];
        $this->_authority_list = ['use' => 0];
    }

    /** @var self */
    private static $_instance = null;

    /**
     * @return self
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Evaluate Personal Portal
     *
     * @param  CB_User $user
     * @param  array   $dynamic_role_list //Dynamic Role List
     * @param int      $lock_mode         //Lock Mode
     *
     * @return array  $access_list               //Evaluate Result Access List
     */
    function evaluatePersonalPortal(
        & $user,
        $dynamic_role_list,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get UUM Instance
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');

        //Get Evaluate Target List
        $targets_list = [];
        $user_id
            = $user->getOID();
        $targets_list[GRN_PRTL_ACCESS_TARGET_TYPE_USER]
            = [$user_id => &$user];
        $targets_list[GRN_PRTL_ACCESS_TARGET_TYPE_GROUP]
            = $uum->getUserGroups($user_id);
        $targets_list[GRN_PRTL_ACCESS_TARGET_TYPE_STATIC_ROLE]
            = $uum->getUserRoles($user_id);;
        $targets_list[GRN_PRTL_ACCESS_TARGET_TYPE_DYNAMIC_ROLE]
            = $dynamic_role_list;

        //Get Abstract Object
        require_once('grn/access_logic.csp');
        $query = "col_unique_key ='" . GRN_PRTL_MY_PORTAL
                 . "'";
        $abstract_data_logic
            = GRN_Access_AbstractDataLogic::getInstance();
        $abstract = $abstract_data_logic->get(null, $query);
        $abstract_id = $abstract->getOID();
        $abstract_list[$abstract_id] =& $abstract;

        //Initialize Access Cache
        $access_list = [];
        $security_model = $this->getSecurityModel($abstract);
        $auhority = ($security_model == 'grant') ? 0 : 1;
        foreach (array_keys($this->_authority_list) as $authorty_id) {
            $authority_list = [$authorty_id => $auhority];
        }
        $this->setAccessCache($user_id, $abstract->getOID(), $authority_list);
        $access_list[$user_id][$abstract->getOID()] = $authority_list;

        //Check Access
        foreach (array_keys($targets_list) as $targets_type) {
            //Check Target List Count
            if (count($targets_list[$targets_type]) === 0) {
                continue;
            }
            $target_list =& $targets_list[$targets_type];

            //Create Condition
            $condition = null;
            $target_condition
                = $this->_createTargetCondition($target_list,
                $targets_type);
            $personal_portal_condition
                = $this->_createObjectCondition($abstract_list);
            $condition = sprintf('WHERE %s AND %s', $target_condition,
                $personal_portal_condition);

            //Get Table Information
            $table_info = $this->_getTableInfo($targets_type);

            //Create Table Column List
            $column_array = [];
            foreach ($this->_getColumnList($table_info) as $column) {
                $column_array[] = CB_DATABASE_TABLE_PREFIX
                                  . $table_info->getTableName() . '.' . $column;
            }
            $column_list = implode(',', $column_array);

            //Get Database
            $database = $this->_getDatabase();

            //Create Query
            if (strcmp($targets_type, 'user') === 0) {
                $from = CB_DATABASE_TABLE_PREFIX . $table_info->getTableName()
                        . ' INNER JOIN tab_cb_user AS u ON '
                        . CB_DATABASE_TABLE_PREFIX . $table_info->getTableName()
                        . '.col_target = u._id AND u.col_deleted IS NULL';
            } else {
                $from = CB_DATABASE_TABLE_PREFIX . $table_info->getTableName();
            }
            $query = sprintf('SELECT %s FROM %s %s', $column_list, $from,
                $condition);
            $query = $database->select_format($query, 0, -1, $lock_mode);
            //Execute Query
            $result = $database->query($query);
            if ($result === false) {
                //Throw Query Error
                $database->throwError(['query' => 'query failed: ' . $query]);
            }

            //Create RowSet With Condition
            $count = $database->num_rows($result);
            for ($i = 0; $i < $count; $i++) {
                $row = $database->fetch_assoc($result);

                //Get Security Model
                $security_model = $this->getSecurityModel($abstract);

                //Set Access Cache
                foreach (array_keys($this->_authority_list) as $authority_id) {
                    //Get Authority Value
                    $authority_value = $row['col_authority_' . $authority_id];
                    $prev_authority_value
                        = $access_list[$user_id][$abstract_id][$authority_id];
                    if ($security_model == 'grant') {
                        $authority_value = ($authority_value == 1) ? 1 : 0;
                        $authority_value = max($prev_authority_value,
                            $authority_value);
                    } else {
                        $authority_value = ($authority_value == 1) ? 0 : 1;
                        $authority_value = min($prev_authority_value,
                            $authority_value);
                    }
                    $access_list[$user_id][$abstract_id][$authority_id]
                        = $authority_value;
                }
                $this->setAccessCache($user_id, $abstract_id,
                    $access_list[$user_id][$abstract_id]);
            }
        }

        //Return Access List
        return $access_list;
    }
}


