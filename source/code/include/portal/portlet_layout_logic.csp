<?php

/**
 * ポートレット配置情報ロジック
 *
 * @package grn.portal
 * @author  Hideyasu, YOSHIDA 2004/11
 * @version 1.0
 */

require_once('fw/i18n.csp');

/**
 * ポートレット配置情報ロジッククラス
 *
 * @package grn.portal
 */
class GRN_Portal_PortletLayoutLogic
{
    /**
     * @access private
     */
    var $_table_info = null;

    /**
     * コンストラクタ
     */
    function __construct()
    {
    }

    private static $_instance = null;

    /**
     * @return GRN_Portal_PortletLayoutLogic
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * テーブル情報を取得する
     *
     * @return object CB_TableInfo
     */
    function getTableInfo()
    {
        if (is_null($this->_table_info)) {
            $app_locator = GRN_ApplicationLocator::instance();
            $table_manager = $app_locator->getTableManager('portal');

            $this->_table_info
                = $table_manager->getTableInfo('grn_portal_portletlayout');
        }

        return $this->_table_info;
    }

    /**
     * ポートレット配置情報テーブル行を取得する
     *
     * @param $layout_id int  ポートレット配置情報ID
     *
     * @return GRN_Portal_PortletLayout
     */
    function get($layout_id)
    {
        /** Check Arguments **/
        if (strlen($layout_id) <= 0) {
            /** Invalid Portlet layout ID **/
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_PORTLET_LAYOUT_INVALID_ID);
        }

        require_once('portal/PortalFacade.csp');
        $table_info = $this->getTableInfo();
        $i18n = CB_I18N::getInstance();
        $portalDAO = new PortalFacade();
        $dataObj = [];
        $dataObj['lock'] = $table_info->_lock;
        $dataObj['language'] = $i18n->getCurrentLanguage();

        $portletLayout = $portalDAO->referPortletLayoutById($dataObj,
            $layout_id);
        $row = $table_info->getRow($portletLayout->getId(),
            $portletLayout->convertArray());

        return $row;
    }

    /**
     * @param $portal_id
     *
     * @return array
     */
    function &getList($portal_id)
    {
        require_once('portal/PortalFacade.csp');
        $table_info = $this->getTableInfo();
        $i18n = CB_I18N::getInstance();
        $portalDAO = new PortalFacade();
        $dataObj = [];
        $dataObj['lock'] = $table_info->_lock;
        $dataObj['language'] = $i18n->getCurrentLanguage();

        $objectList = $portalDAO->getPortletLayoutListByPortalId($dataObj,
            $portal_id);

        $objects = [];
        foreach ($objectList as $object) {
            $row = $table_info->getRow($object->getId(),
                $object->convertArray());
            $objects[$row->getOID()] = $row;
        }

        return $objects;
    }

    /**
     * @param $inPortletLayoutId
     *
     * @return array
     */
    public function createMultiLanguageValuesArray($inPortletLayoutId)
    {
        $resultArray = [];

        require_once('portal/PortalFacade.csp');
        $portalDAO = new PortalFacade();

        $dataObj = [];
        $portletLayout
            = $portalDAO->referPortletLayoutById($dataObj,
            $inPortletLayoutId);
        $resultArray[CB_I18N_DEFUALT_LANGUAGE_CODE]
            = $portletLayout->getDisplayName();

        $dataObj = [];
        $portletLayoutLocalList
            = $portalDAO->getPortletLayoutLocalListByPortletLayoutId($dataObj,
            $inPortletLayoutId);
        foreach ($portletLayoutLocalList as $portletLayoutLocal) {
            $resultArray[$portletLayoutLocal->getLanguageCode()]
                = $portletLayoutLocal->getName();
        }

        return $resultArray;
    }

    /**
     * @param $inPortletId
     * @param $inPortletLayoutId
     *
     * @return string
     */
    public function getPortletLayoutDisplayName(
        $inPortletId,
        $inPortletLayoutId
    ) {
        $result = "";

        require_once('portal/PortalFacade.csp');
        $portalDAO = new PortalFacade();

        $dataObj = [];
        $portletLayout = $portalDAO->referPortletLayoutById($dataObj,
            $inPortletLayoutId);
        $result = $portletLayout->getDisplayName();
        if (strlen($result) > 0) {
            return $result;
        }

        require_once('portal/system_portlet_logic.csp');
        $systemPortletLogicBase
            = GRN_Portal_SystemPortletLogicBase::getInstance();
        $result = $systemPortletLogicBase->getPortletName($inPortletId);

        return $result;
    }

    /**
     * @param        $inPortalId
     * @param        $inPortletId
     * @param        $inPortletLayoutId
     * @param        $inLocalNameArray
     * @param string $inInspectionMessageType
     *
     * @return bool
     */
    public function modifyPortletLayoutNameAndMode(
        $inPortalId,
        $inPortletId,
        $inPortletLayoutId,
        $inLocalNameArray,
        $displayNameMode,
        $inInspectionMessageType = 'portal_portlet_modify'
    ) {
        require_once('portal/inspection.csp');
        require_once('portal/system_portlet_logic.csp');
        require_once('portal/PortalFacade.csp');
        require_once('portal/bean/GrnPortalPortletLayoutLocal.csp');
        $portalDAO = new PortalFacade();
        $i18n = CB_I18N::getInstance();


        //--------------  default portal name modify -------------
        $defalutName = $inLocalNameArray[CB_I18N_DEFUALT_LANGUAGE_CODE];

        //Check Inspection Message Enabled
        $inspection = GRN_Portal_System_Portal_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            //Get Previous Portal Name for Inspection Message
            $prevName = $this->getPortletLayoutDisplayName($inPortletId,
                $inPortletLayoutId);
        }

        //Change Portlet Name
        $systemPortletLogicBase
            = GRN_Portal_SystemPortletLogicBase::getInstance();
        $systemPortletLogicBase->changeDisplayName($inPortletLayoutId,
            $defalutName);
        //Change Portlet Display Name Mode
        $systemPortletLogicBase->changeDisplayNameMode($inPortletLayoutId,
            $displayNameMode);

        //Check Inspection Message Enabled
        if ($inspection->isEnabled()) {
            $dataObj = [];
            $dataObj['language'] = $i18n->getCurrentLanguage();
            $portal = $portalDAO->referPortalById($dataObj,
                $inPortalId);
            $portalName = $portal->getName();
            $nextName = (strlen($defalutName) > 0) ? $defalutName
                : $systemPortletLogicBase->getPortletName($inPortletId);

            //Write Inspection Message
            $message_args = [
                'pid'               => $inPortalId,
                'plid'              => $inPortletLayoutId,
                'ppid'              => $inPortletId,
                'portal_name'       => $portalName,
                'display_name_mode' => $displayNameMode,
                'prev_portlet_name' => $prevName,
                'next_portlet_name' => $nextName,
            ];
            $inspection->record($inInspectionMessageType, $message_args);
        }


        //--------------  portal local name modify -------------
        $availableLanguageArray = $i18n->getAvailableLanguages();
        foreach ($availableLanguageArray as $languageKey) {
            if ((array_key_exists($languageKey, $inLocalNameArray))
                && (strlen(cb_trim($inLocalNameArray[$languageKey])) > 0)
            ) {
                $localName = cb_trim($inLocalNameArray[$languageKey]);

                $dataObj = [];
                if ($inInspectionMessageType
                    == 'template_portal_portlet_modify'
                ) {
                    $dataObj['messageTypeAdd']
                        = 'template_portlet_layout_local_add';
                    $dataObj['messageTypeModify']
                        = 'template_portlet_layout_local_modify';
                }
                $portalLocal = new GrnPortalPortletLayoutLocal();
                $portalLocal->setParentId($inPortletLayoutId);
                $portalLocal->setLanguageCode($languageKey);
                $portalLocal->setName($localName);

                $portalDAO->updatePortletLayoutLocal($dataObj, $portalLocal);
            } else {
                $dataObj = [];
                if ($inInspectionMessageType
                    == 'template_portal_portlet_modify'
                ) {
                    $dataObj['messageTypeDelete']
                        = 'template_portlet_layout_local_delete';
                }
                $portalLocal = new GrnPortalPortletLayoutLocal();
                $portalLocal->setParentId($inPortletLayoutId);
                $portalLocal->setLanguageCode($languageKey);

                $portalDAO->deletePortletLayoutLocal($dataObj, $portalLocal);
            }
        }

        return true;
    }

    /**
     * @param $inPortletLayoutId
     *
     * @return string
     */
    public function getPortletLayoutDisplayNameMode($inPortletLayoutId)
    {
        require_once('portal/system_portlet_logic.csp');
        $systemPortletLogicBase
            = GRN_Portal_SystemPortletLogicBase::getInstance();
        $result
            = $systemPortletLogicBase->getDisplayNameMode($inPortletLayoutId);

        return $result;
    }
}


