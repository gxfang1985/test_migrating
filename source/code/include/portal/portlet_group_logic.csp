<?php

/**
 * Portlet Group Logic
 *
 * @author  Yuichi, Nakamura 2004/11
 * @version 1.0
 * @package grn.portal
 */

//Portal Application
require_once('fw/i18n.csp');
require_once('portal/resources.csp');

/**
 * Portlet Group Logic Base Class
 *
 * @package grn.portal
 */
class GRN_Portal_PortletGroupLogicBase
{
    //Portal Manager Instance
    var $_portlet_group_manager = null;

    //Portal Owners ID
    var $_portlet_group_owner_id = null;

    /**
     * Constructor
     *
     * @access private
     *
     * @param int $owner_id //Owner's User ID
     */
    function __construct($owner_id = 0)
    {
        $this->_portlet_group_owner_id = $owner_id;
    }

    private static $_instance = null;

    /**
     * Get Portal Logic Base Instance
     *
     * @return GRN_Portal_PortletGroupLogicBase
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Portlet Group Manager Instance
     *
     * @return GRN_Portal_AgentManagerTemplate
     */
    function _getPortletGroupManager()
    {
        if (is_null($this->_portlet_group_manager)) {
            require_once('portal/logic.csp');
            global $G_container_app;
            $this->_portlet_group_manager
                = $G_container_app->getInstance(GRN_PRTL_LWC_ID_PORTLETGROUP_MANAGER);
        }

        return $this->_portlet_group_manager;
    }

    //Common Portlet Group Logic Base Methods

    /**
     * Get Portlet Group
     *
     * @access  private
     *
     * @param  int $portlet_group_id //Portlet Group ID
     *
     * @return object $portlet_group              //Portlet Group
     */
    function &get($portlet_group_id)
    {
        //Check Arguments
        require_once('fw/string_util.csp');
        require_once('portal/error_code.csp');
        cb_trim_check($portlet_group_id,
            E_GRN_PRTL_PORTLET_GROUP_INVALID_ID);  //portlet group id

        //Get Portlet List
        $user_id = $this->_portlet_group_owner_id;
        $portlet_group_list = &$this->getList($user_id);

        //Get Portlet Group Object
        if ( ! array_key_exists($portlet_group_id, $portlet_group_list)) {
            //Portlet Group Not Found
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_PORTLET_GROUP_NOT_FOUND);
        }
        $portlet_group =& $portlet_group_list[$portlet_group_id];

        //Return Portlet Group Object
        return $portlet_group;
    }

    /**
     * Get Portlet Group List
     *
     * @access  private
     * @return mixed  $portlet_group_list        //Portlet Group List
     */
    function &getList()
    {
        //Get User Object
        $user = null;
        $user_id = $this->_portlet_group_owner_id;
        if ($user_id !== 0) {
            global $G_container_base;
            $grn_uum = $G_container_base->getInstance('uum');
            $user = $grn_uum->getUser($user_id);
        }

        //Get Portlet Group Object
        $portlet_group_manager = $this->_getPortletGroupManager();
        $portlet_group_list = $portlet_group_manager->getList($user);
        if ( ! is_array($portlet_group_list)) {
            //Portlet Group List Not Found
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_PORTLET_GROUP_LIST_NOT_FOUND);
        }

        //Return Portlet Group List
        return $portlet_group_list;
    }

    /**
     * Change Order
     *
     * @access  private
     *
     * @param  int   $portlet_group_id //Portlet Group ID
     * @param  array $portlet_id_list  //Portlet ID List
     *
     * @return none
     */
    function changeOrder($portlet_group_id, & $portlet_id_list)
    {
        //Check Argument
        if ( ! is_array($portlet_id_list)) {
            return;
        }

        //Get Portlet Group
        $user_id = $this->_portlet_group_owner_id;
        $portlet_group =& $this->get($portlet_group_id, $user_id);

        //Change Portlet Group Portlet Order
        $portlet_group->changePortletOrder($portlet_id_list);

        return;
    }

    /**
     * Add New Portlet Group
     *
     * @access  private
     *
     * @param  string $portlet_group_name //Portlet Group Name
     *
     * @return object $portlet_group             //New Portlet Group Object
     */
    function add($portlet_group_name)
    {
        //Check Arguments
        require_once('fw/string_util.csp');
        require_once('portal/error_code.csp');
        cb_trim_check($portlet_group_name,
            E_GRN_PRTL_PORTLET_GROUP_NOT_INPUT_NECESSARY);  //portal group name

        //Get User Object
        $user = null;
        $user_id = $this->_portlet_group_owner_id;
        if ($user_id !== 0) {
            global $G_container_base;
            $grn_uum = $G_container_base->getInstance('uum');
            $user = $grn_uum->getUser($user_id);
        }

        //Create New Portlet Group
        $portlet_group_manager = $this->_getPortletGroupManager();
        $new_portlet_group = $portlet_group_manager->create($user);

        //Set New Portlet Group Properties
        $new_portlet_group->set(GRN_PRTL_PROPERTY_NAME, $portlet_group_name);

        //Set Creator Infomation
        $this->_setCreator($new_portlet_group);

        //Return New Portlet Group Object
        return $new_portlet_group;
    }

    /**
     * Modify Portlet Group
     *
     * @access  private
     *
     * @param  int    $portlet_group_id   //Portlet Group ID
     * @param  string $portlet_group_name //Portlet Group Name
     *
     * @return object $portlet_group             //Portlet Group Object
     */
    function modify($portlet_group_id, $portlet_group_name)
    {
        //Check Arguments
        require_once('fw/string_util.csp');
        require_once('portal/error_code.csp');
        cb_trim_check($portlet_group_id,
            E_GRN_PRTL_PORTLET_GROUP_INVALID_ID);             //portal group id
        cb_trim_check($portlet_group_name,
            E_GRN_PRTL_PORTLET_GROUP_NOT_INPUT_NECESSARY);  //portal group name

        //Get Portlet Group
        $user_id = $this->_portlet_group_owner_id;
        $portlet_group = $this->get($portlet_group_id, $user_id);

        //Set Portlet Group Properties
        $portlet_group->set(GRN_PRTL_PROPERTY_NAME, $portlet_group_name);

        //Set Modofier Infomation
        $this->_setModifier($portlet_group);

        //Return Portlet Group Object
        return $portlet_group;
    }

    /**
     * Delete Portlet Group
     *
     * @access  private
     *
     * @param  int $portlet_group_id //Portlet Group ID
     *
     * @return none
     */
    function delete($portlet_group_id)
    {
        //Check Arguments
        require_once('fw/string_util.csp');
        require_once('portal/error_code.csp');
        cb_trim_check($portlet_group_id,
            E_GRN_PRTL_PORTLET_GROUP_INVALID_ID);   //portal group id

        //Get Portlet Group
        $user_id = $this->_portlet_group_owner_id;
        $portlet_group =& $this->get($portlet_group_id, $user_id);

        //Delete Portal Object
        $portlet_group->delete();

        return;
    }

    /**
     * Get Owner
     *
     * @access  private
     * @return object $owner                     //Owner Object
     */
    function _getOwner()
    {
        //Get Login User
        global $G_container_base;
        $grn_uum = $G_container_base->getInstance('uum');
        $login_user = $grn_uum->getLoginUser();
        if ( ! $login_user) {
            //Invalid Portlet ID
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_PORTLET_GROUP_NEED_LOGIN);
        }

        //Return Login User
        return $login_user;
    }

    /**
     * Set Creator
     *
     * @access  private
     *
     * @param  object $object //Target Object
     *
     * @return bool   $result                    //Result
     */
    function _setCreator(&$object)
    {
        //Check Argument
        if ( ! $object) {
            return false;
        }

        //Get Login User
        global $G_container_base;
        $grn_uum =& $G_container_base->getInstance('uum');
        $login_user =& $grn_uum->getLoginUser();

        //Get Create Time
        $ctime = new CB_TimeStamp();
        $ctime->unix_ts = time();

        //Set Create Infomation
        if ($login_user) {
            $login_user_name = $login_user->get(GRN_PRTL_PROPERTY_DISPLAY_NAME);
            $object->set(GRN_PRTL_PROPERTY_CREATOR,
                $login_user);               //Creator
            $object->set(GRN_PRTL_PROPERTY_MODIFIER,
                $login_user);              //Modifier
            $object->set(GRN_PRTL_PROPERTY_CREATOR_NAME,
                $login_user_name);     //Creator Name
            $object->set(GRN_PRTL_PROPERTY_MODIFIER_NAME,
                $login_user_name);    //Modifier Name
        }
        $object->set(GRN_PRTL_PROPERTY_CTIME, $ctime);  //Create Time
        $object->set(GRN_PRTL_PROPERTY_MTIME, $ctime);  //Modify Time

        return true;
    }

    /**
     * Set Modofier
     *
     * @access  private
     *
     * @param  object $object //Target Object
     *
     * @return bool   $result                    //Result
     */
    function _setModifier(&$object)
    {
        //Check Argument
        if ( ! $object) {
            return false;
        }

        //Get Login User
        global $G_container_base;
        $grn_uum =& $G_container_base->getInstance('uum');
        $login_user =& $grn_uum->getLoginUser();

        //Get Modofy Time
        $mtime = new CB_TimeStamp();
        $mtime->unix_ts = time();

        //Set Modify Infomation
        if ($login_user) {
            $login_user_name = $login_user->get(GRN_PRTL_PROPERTY_DISPLAY_NAME);
            $object->set(GRN_PRTL_PROPERTY_MODIFIER,
                $login_user);              //Modifier
            $object->set(GRN_PRTL_PROPERTY_MODIFIER_NAME,
                $login_user_name);    //Modifier Name

        }
        $object->set(GRN_PRTL_PROPERTY_MTIME, $mtime);  //Modify Time

        return true;
    }
}

;

/**
 * System Portlet Group Logic Class
 *
 * @package grn.portal
 */
class GRN_Portal_SystemPortletGroupLogic
    extends GRN_Portal_PortletGroupLogicBase
{
    /**
     * Constructor
     *
     * @access private
     */
    function __construct()
    {
        //Call Parent Constructor
        parent::__construct(0);
    }

    /**
     * Get System Portlet Group Logic Instance
     *
     * @return $_instance    GRN_Portal_SystemPortletGroupLogic
     *        Instance of System Portlet Group Logic
     */
    private static $_instance = null;

    /**
     * @return GRN_Portal_SystemPortletGroupLogic
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    public function createMultiLanguageValuesArray($inPortletGroupId)
    {
        $resultArray = [];

        require_once('portal/PortalFacade.csp');
        $portalDAO = new PortalFacade();

        $dataObj = [];
        $portletGroup
            = $portalDAO->referPortletGroupById($dataObj,
            $inPortletGroupId);
        $resultArray[CB_I18N_DEFUALT_LANGUAGE_CODE] = $portletGroup->getName();

        $dataObj = [];
        $portletGroupLocalList
            = $portalDAO->getPortletGroupLocalListByPortletGroupId($dataObj,
            $inPortletGroupId);
        foreach ($portletGroupLocalList as $portletGroupLocal) {
            $resultArray[$portletGroupLocal->getLanguageCode()]
                = $portletGroupLocal->getName();
        }

        return $resultArray;
    }

    public function addPortletGroupName($inLocalNameArray)
    {
        require_once('portal/inspection.csp');
        require_once('portal/PortalFacade.csp');
        require_once('portal/bean/GrnPortalPortletGroupLocal.csp');
        $portalDAO = new PortalFacade();


        //--------------  default portlet group name modify -------------
        $defalutName = $inLocalNameArray[CB_I18N_DEFUALT_LANGUAGE_CODE];

        //Add New System Portal
        $systemPortletGroupLogic
            = GRN_Portal_SystemPortletGroupLogic::getInstance();
        $portletGroup = $systemPortletGroupLogic->add($defalutName);

        //Check Inspection Message Enabled
        require_once('portal/inspection.csp');
        $inspection = GRN_Portal_System_Portlet_Group_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            //Write Inspection Message
            $message_type = 'portlet_group_add';
            $message_args = [
                'pgid'               => $portletGroup->getOID(),
                'portlet_group_name' => $portletGroup->get('name')
            ];
            $inspection->record($message_type, $message_args);
        }


        //--------------  portlet group local name modify -------------
        //Add System Portal
        $portletGroupId = $portletGroup->getOID();
        $i18n = CB_I18N::getInstance();
        $availableLanguageArray = $i18n->getAvailableLanguages();
        foreach ($availableLanguageArray as $languageKey) {
            if ((array_key_exists($languageKey, $inLocalNameArray))
                && (strlen(cb_trim($inLocalNameArray[$languageKey])) > 0)
            ) {
                $localName = cb_trim($inLocalNameArray[$languageKey]);

                $dataObj = [];
                $portletGroupLocal = new GrnPortalPortletGroupLocal();
                $portletGroupLocal->setParentId($portletGroupId);
                $portletGroupLocal->setLanguageCode($languageKey);
                $portletGroupLocal->setName($localName);

                $portalDAO->insertPortletGroupLocal($dataObj,
                    $portletGroupLocal);
            }
        }

        return true;
    }

    public function modifyPortletGroupName($inPortletGroupId, $inLocalNameArray)
    {
        require_once('portal/inspection.csp');
        require_once('portal/PortalFacade.csp');
        require_once('portal/bean/GrnPortalPortletGroupLocal.csp');
        $portalDAO = new PortalFacade();


        //--------------  default portlet group name modify -------------
        $defalutName = $inLocalNameArray[CB_I18N_DEFUALT_LANGUAGE_CODE];

        //Check Inspection Message Enabled
        $inspection = GRN_Portal_System_Portlet_Group_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            //Get Previous Portlet Group Name for Inspection Message
            $dataObj = [];
            $portletGroup = $portalDAO->referPortletGroupById($dataObj,
                $inPortletGroupId);
            $prev_name = $portletGroup->getName();
        }


        $logic = GRN_Portal_SystemPortletGroupLogic::getInstance();
        $portletGroup = $logic->modify($inPortletGroupId, $defalutName);


        //Check Inspection Message Enabled
        if ($inspection->isEnabled()) {
            //Write Inspection Message
            $message_type = 'portlet_group_modify';
            $message_args = [
                'pgid'                    => $portletGroup->getOID(),
                'prev_portlet_gorup_name' => $prev_name,
                'next_portlet_gorup_name' => $portletGroup->get('name'),
            ];
            $inspection->record($message_type, $message_args);
        }


        //--------------  portlet group local name modify -------------
        $i18n = CB_I18N::getInstance();
        $availableLanguageArray = $i18n->getAvailableLanguages();
        foreach ($availableLanguageArray as $languageKey) {
            if ((array_key_exists($languageKey, $inLocalNameArray))
                && (strlen(cb_trim($inLocalNameArray[$languageKey])) > 0)
            ) {
                $localName = cb_trim($inLocalNameArray[$languageKey]);

                $dataObj = [];
                $portalLocal = new GrnPortalPortletGroupLocal();
                $portalLocal->setParentId($inPortletGroupId);
                $portalLocal->setLanguageCode($languageKey);
                $portalLocal->setName($localName);

                $portalDAO->updatePortletGroupLocal($dataObj, $portalLocal);
            } else {
                $dataObj = [];
                $portalLocal = new GrnPortalPortletGroupLocal();
                $portalLocal->setParentId($inPortletGroupId);
                $portalLocal->setLanguageCode($languageKey);

                $portalDAO->deletePortletGroupLocal($dataObj, $portalLocal);
            }
        }

        return true;
    }
}

;

/**
 * My Portlet Group Logic Class
 *
 * @package grn.portal
 */
class GRN_Portal_MyPortletGroupLogic extends GRN_Portal_PortletGroupLogicBase
{
    /**
     * Constructor
     *
     * @access private
     */
    function __construct()
    {
        //Get Login User
        global $G_container_base;
        $grn_uum = $G_container_base->getInstance('uum');
        $login_user = $grn_uum->getLoginUser();

        //Call Parent Constructor
        parent::__construct($login_user->getOID());
    }

    /**
     * Get My Portlet Group Logic Instance
     *
     * @return $_instance    GRN_Portal_MyPortletGroupLogic
     *        Instance of My Portlet Group Logic
     */
    private static $_instance = null;

    /**
     * @return GRN_Portal_MyPortletGroupLogic
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }
}

;


