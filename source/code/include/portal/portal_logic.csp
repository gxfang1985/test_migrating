<?php

/**
 * Portal Logic
 *
 * @author  Yuichi, Nakamura 2004/11
 * @version 1.0
 * @package grn.portal
 */

//Portal Application
require_once('fw/i18n.csp');
require_once('portal/resources.csp');

/**
 * Portal Logic Base Class
 *
 * @package grn.portal
 */
class GRN_Portal_PortalLogicBase
{
    //Portal Manager Instance
    private $_portal_manager = null;

    //Portlet Manager Instance
    private $_portlet_manager = null;

    //Portal Utility Instance
    private $_portal_utility = null;

    //portlet Layout Table Instance
    private $_portlet_layout_table = null;

    //embedded portlet list cache
    private $_embedded_portlet_list_cache = [];

    //Portal Owners ID
    private $_portal_owner_id = null;

    /** @var \grn\portal\PortletAvailableChecker */
    private $checker = null;

    /**
     * Constructor
     *
     * @access private
     *
     * @param int $owner_id //Owner's User ID
     */
    function __construct($owner_id = 0)
    {
        $this->_portal_owner_id = $owner_id;
        $this->checker
            = new \grn\portal\PortletAvailableChecker($this);
    }


    /** @var self */
    private static $_instance = null;

    /**
     * @return GRN_Portal_PortalLogicBase
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * @return CB_TableManager
     */
    function _getPortalUtility()
    {
        if (is_null($this->_portal_utility)) {
            $app_locator = GRN_ApplicationLocator::instance();
            $this->_portal_utility = $app_locator->getTableManager('portal');
        }

        return $this->_portal_utility;
    }


    /**
     * @return GRN_Portal_AgentManagerTemplate
     */
    function _getPortalManager()
    {
        if (is_null($this->_portal_manager)) {
            require_once('portal/logic.csp');
            global $G_container_app;
            $this->_portal_manager
                = $G_container_app->getInstance(GRN_PRTL_LWC_ID_PORTAL_MANAGER);
        }

        return $this->_portal_manager;
    }

    /**
     * Get Portlet Manager Instance
     *
     * @return GRN_Portal_AgentManagerTemplate
     */
    function _getPortletManager()
    {
        if (is_null($this->_portlet_manager)) {
            require_once('portal/logic.csp');
            global $G_container_app;
            $this->_portlet_manager
                = $G_container_app->getInstance(GRN_PRTL_LWC_ID_PORTLET_MANAGER);
        }

        return $this->_portlet_manager;
    }

    /**
     * @return CB_TableInfo
     */
    function _getPortletLayoutTable()
    {
        if (is_null($this->_portlet_layout_table)) {
            $portal_utility = $this->_getPortalUtility();
            $this->_portlet_layout_table
                = $portal_utility->getTableInfo('grn_portal_portletlayout');
        }

        return $this->_portlet_layout_table;
    }

    //Common Portal Logic Base Methods

    /**
     * Get Portal
     *
     * @access  private
     *
     * @param $portal_id
     *
     * @return GRN_Portal_PortalAgent|GRN_Portal_PortletAgent|GRN_Portal_PortletGroupAgent
     */
    function &get($portal_id)
    {
        //Check Arguments
        require_once('fw/string_util.csp');
        require_once('portal/error_code.csp');
        cb_trim_check($portal_id, E_GRN_PRTL_PORTAL_INVALID_ID);  //portal id

        //Get Portal List
        $user_id = $this->_portal_owner_id;
        $portal_list = $this->getList($user_id);

        //Get Portal Object
        if ( ! array_key_exists($portal_id, $portal_list)) {
            //Portal Not Found
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_PORTAL_NOT_FOUND);
        }
        $portal = $portal_list[$portal_id];

        return $portal;
    }

    /**
     * Get Portal List
     *
     * @access  private
     * @return GRN_Portal_PortalAgent[]|GRN_Portal_PortletAgent[]|GRN_Portal_PortletGroupAgent[]
     */
    function &getList()
    {
        //Get User Object
        $user = null;
        $user_id = $this->_portal_owner_id;
        if ($user_id !== 0) {
            global $G_container_base;
            $grn_uum = $G_container_base->getInstance('uum');
            $user = $grn_uum->getUser($user_id);
        }

        //Get Portal List
        $portal_manager = $this->_getPortalManager();
        $portal_list = $portal_manager->getList($user);
        if ( ! is_array($portal_list)) {
            //Portal List Not Found
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_PORTAL_LIST_NOT_FOUND);
        }

        //Return Portlet List
        return $portal_list;
    }

    /**
     * Get Column Items
     *
     * @param  $portal_id //Portal ID
     *
     * @return array $columns_items       //Columns items
     */
    public function &getColumnItems($portal_id)
    {
        //Return Column Items
        return $this->getColumnItemLayout($this->makeGetColumnItemsCondition($portal_id,
            true, $this->_portal_owner_id));
    }

    /**
     * @param $portalId
     *
     * @return array
     */
    public function &getColumnItemsWithoutPrivilege($portalId)
    {
        //Return Column Items
        return $this->getColumnItemLayout($this->makeGetColumnItemsCondition($portalId,
            false, $this->_portal_owner_id));
    }

    /**
     * @param $portalId
     * @param $userId
     *
     * @return array
     */
    public function &getColumnItemsByTargetUser($portalId, $userId)
    {
        //Return Column Items
        return $this->getColumnItemLayout($this->makeGetColumnItemsCondition($portalId,
            true, $userId));
    }

    /**
     * @param string $portalId
     * @param bool   $checkPrivilege
     * @param string $userId
     *
     * @return array
     */
    private function makeGetColumnItemsCondition(
        $portalId,
        $checkPrivilege,
        $userId
    ) {
        return [
            "portalId"       => $portalId,
            "checkPrivilege" => $checkPrivilege,
            "userId"         => $userId
        ];
    }

    /**
     *
     * @param array $condition
     *
     * @return array
     */
    private function &getColumnItemLayout($condition)
    {
        $portalId = $condition['portalId'];
        $userId = $condition['userId'];
        $checkPrivilege = $condition['checkPrivilege'];

        $portal = $this->get($portalId, $userId);

        //Get Column items
        $column_items =& $portal->getColumnList();
        $portalDAO = new PortalFacade();
        $dataObj = $this->getDataObj();
        $portlet_layout_table = $this->_getPortletLayoutTable();

        $column_items_layout = [];
        foreach ($column_items as $column_type => $column_item) {
            $layout_items =& $column_item;

            //Get Layout item
            $column_item_layout = [];
            foreach (array_keys($layout_items) as $layout_id) {
                //Get Layout and Portlet Object
                $portletLayout = $portalDAO->referPortletLayoutById($dataObj,
                    $layout_id);
                /** @var GRN_Portal_PortletLayout $row */
                $row = $portlet_layout_table->getRow($portletLayout->getId(),
                    $portletLayout->convertArray());

                $portlet = $row->get(GRN_PRTL_PROPERTY_PORTLET);

                //Check Available Portlet
                $type = $portlet->get(GRN_PRTL_PROPERTY_TYPE);
                $version = $portlet->get(GRN_PRTL_PROPERTY_VERSION);
                if ($this->checkAvailablePortlet($type, $version,
                    $checkPrivilege, $userId)
                ) {
                    $column_item_layout[] = $row;
                }
            }
            if (count($column_item_layout) !== 0) {
                $column_items_layout[$column_type] = $column_item_layout;
            }
        }

        return $column_items_layout;
    }

    /**
     * @return array
     */
    private function getDataObj()
    {
        //Get Columns Column Items Layout
        require_once('portal/PortalFacade.csp');
        $portlet_layout_table = $this->_getPortletLayoutTable();
        $i18n = CB_I18N::getInstance();
        $dataObj = [];
        $dataObj['lock'] = $portlet_layout_table->_lock;
        $dataObj['language'] = $i18n->getCurrentLanguage();

        return $dataObj;
    }

    /**
     * @param      $type
     * @param      $version
     * @param bool $checkPrivilege
     * @param null $user_id
     *
     * @return bool
     */
    public function checkAvailablePortlet(
        $type,
        $version,
        $checkPrivilege = true,
        $user_id = null
    ) {
        return $this->checker->evaluate($type, $version, $checkPrivilege,
            $user_id);
    }

    /**
     * @param $app_id
     *
     * @return mixed
     */
    public function getEmbeddedPortletList($app_id)
    {
        require_once('grn/application.csp');
        $app_locator = \GRN_ApplicationLocator::instance();

        if ( ! array_key_exists($app_id, $this->_embedded_portlet_list_cache)) {
            $app = $app_locator->getInstance($app_id);
            if ($app) {
                $this->_embedded_portlet_list_cache[$app_id]
                    = $app->getPortletList();
            }
        }

        return $this->_embedded_portlet_list_cache[$app_id];
    }

    public function getPortletBaseInformation($type)
    {
        //Check HTML and PHP Portlet
        if ($type == GRN_PRTL_PORTLET_TYPE_HTML
            || $type == GRN_PRTL_PORTLET_TYPE_PHP
        ) {
            //HTML and PHP Portlet Always empty array
            return [];
        }

        list(, $app_id, $setting) = explode('.', $type);

        //Get Application Locator
        require_once('grn/application.csp');
        $app_locator = GRN_ApplicationLocator::instance();
        $app = $app_locator->getInstance($app_id);

        if ($app) {
            $list = $app->getPortletList();
            foreach ($list as $info) {
                if ($info['type'] === $type) {
                    return $info;
                }
            }
        }

        return false;
    }

    /**
     * Set Column Items
     *
     * @access private
     *
     * @param  int   $portal_id    //Portal ID
     * @param  array $column_items //Column Items
     * @param  bool  $checkPrivilege
     *
     * @return GRN_Portal_PortletLayout[]        //New Layout List
     */
    function &setColumnItems($portal_id, $column_items, $checkPrivilege = true)
    {
        //Check Argumrnt
        if ( ! is_array($column_items)) {
            $ret = [];

            return $ret;
        }

        //Get Portal Object
        $user_id = $this->_portal_owner_id;
        $portal = $this->get($portal_id, $user_id);

        //Get System Portlet List
        $user = null;
        $system_portlet_list = [];
        $portlet_manager = $this->_getPortletManager();
        $portlet_list = $portlet_manager->getList($user);

        //Get Login User
        global $G_container_base;
        $grn_uum = $G_container_base->getInstance('uum');
        $login_user = $grn_uum->getLoginUser();
        if ($login_user) {
            //get My Portlet List
            $my_portlet_list = $portlet_manager->getList($login_user);
            $portlet_list = $portlet_list + $my_portlet_list;
        }

        //Convert Column_Items To Column List
        $layout_list = [];
        $column_list = [];
        foreach (array_keys($column_items) as $column_key) {
            $column = [];
            $layout_items =& $column_items[$column_key];
            foreach (array_keys($layout_items) as $layout_key) {
                $layout_id = 0;
                $portlet_id = 0;
                if (is_object($layout_items[$layout_key])) {
                    //Process for Layout Object
                    $layout = $layout_items[$layout_key];
                    $layout_id = $layout->getOID();
                    $portlet = $layout->get(GRN_PRTL_PROPERTY_PORTLET);
                    if ( ! $this->checkAvailablePortlet($portlet->get(GRN_PRTL_PROPERTY_TYPE),
                        $portlet->get(GRN_PRTL_PROPERTY_VERSION),
                        $checkPrivilege)
                    ) {
                        continue;
                    }
                    $portlet_id = $portlet->getOID();
                } elseif (is_array($layout_items[$layout_key])) {
                    //Process for Portlet ID
                    $portlet_item =& $layout_items[$layout_key];
                    $portlet_id = intval(str_replace('p', '',
                        key($portlet_item)));
                    $portlet_display_name = current($portlet_item);
                    $portlet = $portlet_list[$portlet_id];
                    if (isset($portlet_item[GRN_PRTL_PROPERTY_DISPLAY_NAME_MODE])) {
                        $portlet_display_name_mode
                            = $portlet_item[GRN_PRTL_PROPERTY_DISPLAY_NAME_MODE];
                    } else {
                        $portlet_display_name_mode
                            = GRN_PRTL_DISPLAY_NAME_MODE_DEFAULT;
                    }
                    if ( ! $portlet) {
                        //Portlet Not Found
                        require_once('portal/error_code.csp');
                        cb_throw_error(E_GRN_PRTL_PORTLET_NOT_FOUND);
                    }
                    if ( ! $this->checkAvailablePortlet($portlet->get(GRN_PRTL_PROPERTY_TYPE),
                        $portlet->get(GRN_PRTL_PROPERTY_VERSION))
                    ) {
                        continue;
                    }
                    $layout = $portlet->addlayout($portal);
                    $layout->set(GRN_PRTL_PROPERTY_DISPLAY_NAME,
                        cb_trim($portlet_display_name));
                    $layout->set(GRN_PRTL_PROPERTY_DISPLAY_NAME_MODE,
                        $portlet_display_name_mode);
                    $layout_id = $layout->getOID();
                    $layout_list[$layout_id] = $layout;
                } else {
                    //Skip Invalid Value
                    continue;
                }
                $column = $column + [$layout_id => $portlet_id];
            }
            $column_list[$column_key] = $column;
        }

        //Set Column List
        $portal->setColumnList($column_list);

        return $layout_list;
    }

    /**
     * Add New Portal
     *
     * @param  string $portal_name //Portal Name
     *
     * @return object $portal                    //New Portal Object
     */
    function add($portal_name)
    {
        //Check Arguments
        require_once('fw/string_util.csp');
        require_once('portal/error_code.csp');
        cb_trim_check($portal_name, E_GRN_PRTL_PORTAL_NOT_INPUT_NECESSARY);

        //Get User Object
        $user = null;
        $user_id = $this->_portal_owner_id;
        if ($user_id !== 0) {
            global $G_container_base;
            $grn_uum = $G_container_base->getInstance('uum');
            $user = $grn_uum->getUser($user_id);
        }

        //Create New Portal Object
        $portal_manager = $this->_getPortalManager();
        $new_portal = $portal_manager->create($user);

        //Set Portal Properties
        $new_portal->set(GRN_PRTL_PROPERTY_NAME, $portal_name);          //Name

        //Set Creator Infomation
        $this->_setCreator($new_portal);

        //Return New Portal Object
        return $new_portal;
    }

    /**
     * Modify Portal
     *
     * @param  int    $portal_id   //Portal ID
     * @param  string $portal_name //Portal Name
     *
     * @return object $portal                    //Portal Object
     */
    function modify($portal_id, $portal_name)
    {
        //Check Arguments
        require_once('fw/string_util.csp');
        require_once('portal/error_code.csp');
        cb_trim_check($portal_id,
            E_GRN_PRTL_PORTAL_INVALID_ID);            //portal id
        cb_trim_check($portal_name,
            E_GRN_PRTL_PORTAL_NOT_INPUT_NECESSARY); //portal name

        //Get Portal Object
        $user_id = $this->_portal_owner_id;
        $portal = $this->get($portal_id, $user_id);

        //Set Portal Properties
        $portal->set(GRN_PRTL_PROPERTY_NAME, $portal_name);          //Name

        //Set Modofier Infomation
        $this->_setModifier($portal);

        //Return Portal Object
        return $portal;
    }

    /**
     * Delete Portal
     *
     * @param  int $portal_id //Portal ID
     */
    function delete($portal_id)
    {
        //Check Arguments
        require_once('fw/string_util.csp');
        require_once('portal/error_code.csp');
        cb_trim_check($portal_id, E_GRN_PRTL_PORTAL_INVALID_ID);    //portal id

        //Get Portal Object
        $user_id = $this->_portal_owner_id;
        $portal = $this->get($portal_id, $user_id);

        //Delete Portal Object
        $portal->delete();

        return;
    }

    /**
     * Set Portal Setting
     *
     * @param  int    $portal_id    //Portal ID
     * @param  string $portal_theme //Portal Theme
     */
    function set($portal_id, $portal_theme)
    {
        //Check Arguments
        require_once('fw/string_util.csp');
        require_once('portal/error_code.csp');
        cb_trim_check($portal_id, E_GRN_PRTL_PORTAL_INVALID_ID);  //portal id

        //Get Portal Object
        $user_id = $this->_portal_owner_id;
        $portal = $this->get($portal_id, $user_id);

        //Set Portal Setting
        $portal->set(GRN_PRTL_PROPERTY_THEME, $portal_theme);

        return;
    }

    /**
     * Change Portal Order
     *
     * @param  array $portal_id_list //Portal ID List
     */
    function changeOrder($portal_id_list)
    {
        //Check Argument
        if ( ! is_array($portal_id_list)) {
            return;
        }

        //Get User Object
        $user = null;
        $user_id = $this->_portal_owner_id;
        if ($user_id !== 0) {
            global $G_container_base;
            $grn_uum = $G_container_base->getInstance('uum');
            $user = $grn_uum->getUser($user_id);
        }

        //Check System Portal
        if ( ! $user) {
            //Add My Portal Template ID to Top Of Portal ID List
            require_once('portal/system_logic.csp');
            $system_logic = GRN_Portal_SystemLogic::getInstance();
            $my_portal_template_id = $system_logic->getMyPortalTemplate();
            if ($my_portal_template_id) {
                $reverse_portal_id_list = array_reverse($portal_id_list);
                $reverse_portal_id_list[] = $my_portal_template_id;
                $portal_id_list
                    = array_reverse($reverse_portal_id_list);
            }
        }

        //Change Portlet Order
        $portal_manager = $this->_getPortalManager();
        $portal_manager->changeOrder($user, $portal_id_list);

        return;
    }

    /**
     * @param     $portal_id
     * @param int $user_id
     *
     * @return GRN_Portal_PortalAgent|GRN_Portal_PortletAgent|GRN_Portal_PortletGroupAgent
     */
    function changeOpenStatus($portal_id, $user_id = 0)
    {
        //Check Arguments
        require_once('fw/string_util.csp');
        require_once('portal/error_code.csp');
        cb_trim_check($portal_id, E_GRN_PRTL_PORTAL_INVALID_ID);  //portal id

        //Get Portal Object
        $user_id = $this->_portal_owner_id;
        $portal = $this->get($portal_id, $user_id);

        //Change Portal Setting
        $portal_is_open = $portal->get(GRN_PRTL_PROPERTY_IS_OPEN);
        if ($portal_is_open === '1') {
            $portal_is_open = '0';
        } else {
            $portal_is_open = '1';
        }
        $portal->set(GRN_PRTL_PROPERTY_IS_OPEN, $portal_is_open);

        //Return Portal Object
        return $portal;
    }

    //Portal Logic Utility Methods

    /**
     * get Owner
     *
     * @access private
     * @return $owner       //Owner Object
     *
     */
    function _getOwner()
    {
        //Get Login User
        global $G_container_base;
        $grn_uum = $G_container_base->getInstance('uum');
        $login_user = $grn_uum->getLoginUser();
        if ( ! $login_user) {
            //My Portal Need Login
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_PORTAL_NEED_LOGIN);
        }

        //Return Login User**/
        return $login_user;
    }

    /**
     * Set Creator
     *
     * @param CB_Row $object
     *
     * @return bool
     */
    function _setCreator($object)
    {
        //Check Argument
        if ( ! $object) {
            return false;
        }

        //Get Login User
        global $G_container_base;
        /** @var GRN_Uum $grn_uum */
        $grn_uum = $G_container_base->getInstance('uum');
        $login_user = $grn_uum->getLoginUser();

        //Get Create Time
        $ctime = new CB_TimeStamp();
        $ctime->unix_ts = time();

        //Set Create Infomation
        if ($login_user) {
            $login_user_name = $login_user->get(GRN_PRTL_PROPERTY_DISPLAY_NAME);
            $object->set(GRN_PRTL_PROPERTY_CREATOR,
                $login_user);               //Creator
            $object->set(GRN_PRTL_PROPERTY_MODIFIER,
                $login_user);              //Modifier
            $object->set(GRN_PRTL_PROPERTY_CREATOR_NAME,
                $login_user_name);     //Creator Name
            $object->set(GRN_PRTL_PROPERTY_MODIFIER_NAME,
                $login_user_name);    //Modifier Name
        }
        $object->set(GRN_PRTL_PROPERTY_CTIME, $ctime);  //Create Time
        $object->set(GRN_PRTL_PROPERTY_MTIME, $ctime);  //Modify Time

        return true;
    }

    /**
     * Set Modofier
     *
     * @param $object
     *
     * @return bool
     */
    function _setModifier($object)
    {
        //Check Argument
        if ( ! $object) {
            return false;
        }

        //Get Login User
        global $G_container_base;
        /** @var GRN_Uum $grn_uum */
        $grn_uum = $G_container_base->getInstance('uum');
        $login_user = $grn_uum->getLoginUser();

        //Get Modofy Time
        $mtime = new CB_TimeStamp();
        $mtime->unix_ts = time();

        //Set Modify Infomation
        if ($login_user) {
            $login_user_name = $login_user->get(GRN_PRTL_PROPERTY_DISPLAY_NAME);
            $object->set(GRN_PRTL_PROPERTY_MODIFIER,
                $login_user);              //Modifier
            $object->set(GRN_PRTL_PROPERTY_MODIFIER_NAME,
                $login_user_name);    //Modifier Name

        }
        $object->set(GRN_PRTL_PROPERTY_MTIME, $mtime);  //Modify Time

        return true;
    }

    /**
     * @param $layoutId
     *
     * @return GRN_Portal_PortletLayout|mixed
     */
    public function getLayout($layoutId)
    {
        $layoutTable = $this->_getPortletLayoutTable();

        return $layoutTable->getRow($layoutId);
    }

    public function getApplicationIdFromPorletType($porletType)
    {
        //Get System Portlet List
        $user = null;
        $portlet_manager = $this->_getPortletManager();
        $portlet_list = $portlet_manager->getList($user);

        //Get Login User
        $login_user = cb_get_login_user();
        if ($login_user) {
            //get My Portlet List
            $my_portlet_list = $portlet_manager->getList($login_user);
            $portlet_list = $portlet_list + $my_portlet_list;
        }

        $portlet_id = intval(str_replace('p', '', $porletType));
        $portlet = cb_at($portlet_list, $portlet_id);
        if ( ! $portlet) {
            return "";
        }

        $type_elements = explode('.', $portlet->get(GRN_PRTL_PROPERTY_TYPE));
        $app_id = isset($type_elements[1])
                  && is_string($type_elements[1]) ? $type_elements[1]
            : "";

        return $app_id;
    }
}

;

/**
 * System Portal Logic Class
 *
 * @package grn.portal
 */
class GRN_Portal_SystemPortalLogic extends GRN_Portal_PortalLogicBase
{
    /**
     * Constructor
     *
     * @access private
     */
    function __construct()
    {
        //Call Parent Constractor
        parent::__construct(0);
    }


    /** @var GRN_Portal_SystemPortalLogic */
    private static $_instance = null;

    /**
     * @return GRN_Portal_SystemPortalLogic
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * @param $inPortalId
     *
     * @return array
     */
    public function createMultiLanguageValuesArray($inPortalId)
    {
        $resultArray = [];

        require_once('portal/PortalFacade.csp');
        $portalDAO = new PortalFacade();

        $dataObj = [];
        $portal
            = $portalDAO->referPortalById($dataObj,
            $inPortalId);
        $resultArray[CB_I18N_DEFUALT_LANGUAGE_CODE] = $portal->getName();

        $dataObj = [];
        $portalLocalList = $portalDAO->getPortalLocalListByPortalId($dataObj,
            $inPortalId);
        foreach ($portalLocalList as $portalLocal) {
            $resultArray[$portalLocal->getLanguageCode()]
                = $portalLocal->getName();
        }

        return $resultArray;
    }

    /**
     * @param $inLocalNameArray
     *
     * @return bool
     */
    public function addPortalName($inLocalNameArray)
    {
        require_once('portal/inspection.csp');
        require_once('portal/PortalFacade.csp');
        require_once('portal/bean/GrnPortalPortalLocal.csp');
        $portalDAO = new PortalFacade();


        //--------------  default portal name modify -------------
        $defalutName = $inLocalNameArray[CB_I18N_DEFUALT_LANGUAGE_CODE];

        //Add New System Portal
        require_once('portal/portal_logic.csp');
        $system_portallogic = GRN_Portal_SystemPortalLogic::getInstance();
        $portal = $system_portallogic->add($defalutName);

        //Check Inspection Message Enabled
        require_once('portal/inspection.csp');
        $inspection = GRN_Portal_System_Portal_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            //Write Inspection Message
            $message_type = 'portal_add';
            $message_args = [
                'pid'         => $portal->getOID(),
                'portal_name' => $portal->get('name')
            ];
            $inspection->record($message_type, $message_args);
        }


        //--------------  portal local name modify -------------
        //Add System Portal
        $portalId = $portal->getOID();
        $i18n = CB_I18N::getInstance();
        $availableLanguageArray = $i18n->getAvailableLanguages();
        foreach ($availableLanguageArray as $languageKey) {
            if ((array_key_exists($languageKey, $inLocalNameArray))
                && (strlen(cb_trim($inLocalNameArray[$languageKey])) > 0)
            ) {
                $localName = cb_trim($inLocalNameArray[$languageKey]);

                $dataObj = [];
                $portalLocal = new GrnPortalPortalLocal();
                $portalLocal->setParentId($portalId);
                $portalLocal->setLanguageCode($languageKey);
                $portalLocal->setName($localName);

                $portalDAO->insertPortalLocal($dataObj, $portalLocal);
            }
        }

        return true;
    }

    /**
     * @param $inPortalId
     * @param $inLocalNameArray
     *
     * @return bool
     */
    public function modifyPortalName($inPortalId, $inLocalNameArray)
    {
        require_once('portal/inspection.csp');
        require_once('portal/PortalFacade.csp');
        require_once('portal/bean/GrnPortalPortalLocal.csp');
        $portalDAO = new PortalFacade();


        //--------------  default portal name modify -------------
        $defalutName = $inLocalNameArray[CB_I18N_DEFUALT_LANGUAGE_CODE];

        //Check Inspection Message Enabled
        $inspection = GRN_Portal_System_Portal_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            //Get Previous Portal Name for Inspection Message
            $dataObj = [];
            $portal = $portalDAO->referPortalById($dataObj, $inPortalId);
            $prev_name = $portal->getName();
        }


        //Modify System Portal
        $system_portallogic = GRN_Portal_SystemPortalLogic::getInstance();
        $portal = $system_portallogic->modify($inPortalId,
            $defalutName);


        //Check Inspection Message Enabled
        if ($inspection->isEnabled()) {
            //Write Inspection Message
            $message_type = 'portal_modify';
            $message_args = [
                'pid'              => $portal->getOID(),
                'prev_portal_name' => $prev_name,
                'next_portal_name' => $portal->get('name'),
            ];
            $inspection->record($message_type, $message_args);
        }


        //--------------  portal local name modify -------------
        $i18n = CB_I18N::getInstance();
        $availableLanguageArray = $i18n->getAvailableLanguages();
        foreach ($availableLanguageArray as $languageKey) {
            if ((array_key_exists($languageKey, $inLocalNameArray))
                && (strlen(cb_trim($inLocalNameArray[$languageKey])) > 0)
            ) {
                $localName = cb_trim($inLocalNameArray[$languageKey]);

                $dataObj = [];
                $portalLocal = new GrnPortalPortalLocal();
                $portalLocal->setParentId($inPortalId);
                $portalLocal->setLanguageCode($languageKey);
                $portalLocal->setName($localName);

                $portalDAO->updatePortalLocal($dataObj, $portalLocal);
            } else {
                $dataObj = [];
                $portalLocal = new GrnPortalPortalLocal();
                $portalLocal->setParentId($inPortalId);
                $portalLocal->setLanguageCode($languageKey);

                $portalDAO->deletePortalLocal($dataObj, $portalLocal);
            }
        }

        return true;
    }
}

;

/**
 * Operation Portal Logic Class
 *
 * @package grn.portal
 */
class GRN_Portal_OperationPortalLogic extends GRN_Portal_SystemPortalLogic
{
    /**
     * Constructor
     *
     * @access private
     */
    function __construct()
    {
        //Call Parent Constractor
        parent::__construct(0);
    }

    /** @var self */
    private static $_instance = null;

    /**
     * @return GRN_Portal_OperationPortalLogic
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }
}

;

/**
 * My Portal Logic Class
 *
 * @package grn.portal
 */
class GRN_Portal_MyPortalLogic extends GRN_Portal_PortalLogicBase
{
    /**
     * Constructor
     *
     * @access private
     */
    function __construct()
    {
        //Get Login User
        global $G_container_base;
        /** @var GRN_Uum $grn_uum */
        $grn_uum = $G_container_base->getInstance('uum');
        $login_user = $grn_uum->getLoginUser();

        //Call Parent Constractor
        parent::__construct($login_user->getOID());
    }

    /** @var self */
    private static $_instance = null;

    /**
     * @return GRN_Portal_MyPortalLogic
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }
}

;

/**
 * Portal Utility Logic Class
 *
 * @package grn.portal
 */
class GRN_Portal_PortalUtilityLogic
{
    //System Portal Logic Instance
    var $_system_portal_logic = null;

    //My Portal Logic Instance
    var $_my_portal_logic = null;

    /**
     * Constructor
     *
     * @access private
     */
    function __construct()
    {

    }

    /** @var self */
    private static $_instance = null;

    /**
     * @return GRN_Portal_PortalUtilityLogic
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * @return GRN_Portal_SystemPortalLogic
     */
    function _getSystemPortalLogic()
    {
        if (is_null($this->_system_portal_logic)) {
            $this->_system_portal_logic
                = GRN_Portal_SystemPortalLogic::getInstance();
        }

        return $this->_system_portal_logic;
    }

    /**
     * @return GRN_Portal_MyPortalLogic
     */
    function _getMyPortalLogic()
    {
        if (is_null($this->_my_portal_logic)) {
            $this->_my_portal_logic = GRN_Portal_MyPortalLogic::getInstance();
        }

        return $this->_my_portal_logic;
    }

    /**
     * Get Current Portal ID
     *
     * @param $portal_list
     *
     * @return null|int
     */
    function getCurrentPortalID($portal_list)
    {
        //Get Current Portal ID From Session
        require_once('fw/session_manager.csp');
        $session_manager = CB_SessionManager::getInstance();
        $session = $session_manager->getSession(GRN_PRTL_MODULE_ID);
        $session_index =& $session->get(GRN_PRTL_SESSION_GROUP_INDEX);
        if (is_array($session_index)) {
            //Check Portal Available
            $portal_id = $session_index[GRN_PRTL_SESSION_CURRENT_ID];
            if (array_key_exists($portal_id, $portal_list)) {
                return $portal_id;
            }
        }

        return null;
    }

    /**
     * Set Current Portal ID
     *
     * @param $portal_id
     *
     * @return bool
     */
    function setCurrentPortalID($portal_id)
    {
        //Get System Portal List
        $system_portal_logic = $this->_getSystemPortalLogic();
        $system_portal_list = $system_portal_logic->getList();

        //Get My Portal List
        $my_portal_logic = $this->_getMyPortalLogic();
        $my_portal_list = $my_portal_logic->getList();

        //Marge Portal List
        $portal_list = $system_portal_list + $my_portal_list;

        //Check Portal Available
        if ( ! array_key_exists($portal_id, $portal_list)) {
            return false;
        }

        //Set Current Portal ID to Session
        require_once('fw/session_manager.csp');
        $session_manager = CB_SessionManager::getInstance();
        $session = $session_manager->getSession(GRN_PRTL_MODULE_ID);
        $session->set(GRN_PRTL_SESSION_GROUP_INDEX,
            [GRN_PRTL_SESSION_CURRENT_ID => $portal_id]);

        return true;
    }
}

;


