<?php
/**
 * Portal Application Manage Logic Base Class
 *
 * @author  Yuichi, Nakamura 2005/5
 * @version 1.0
 * @package grn.portal
 */

/** Portal Application **/
require_once('portal/resources.csp');

/**
 * Portal Manage Logic Base Class
 *
 * @package grn.portal
 */
class GRN_Portal_Portal_Manage_Information_Logic_Base
{
    //Portal Manage Information Manager Instance
    var $_portal_manage_information_manager_base = null;

    /**
     * Constructor
     *
     * @return void
     */
    function __construct()
    {

    }

    /** @var self */
    private static $_instance = null;

    /**
     * @return GRN_Portal_Portal_Manage_Information_Logic_Base
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Portal Manage Information Manager Base
     *
     * @return object $portal_manage_information_manager_base    //Portal Manage Information Manager Base
     */
    function _getPortalManageInformationManagerBase()
    {
        if (is_null($this->_portal_manage_information_manager_base)) {
            require_once('portal/manage_information_manager_base.csp');
            $this->_portal_manage_information_manager_base
                = GRN_Portal_Portal_Manage_Information_Manager_Base::getInstance();
        }

        return $this->_portal_manage_information_manager_base;
    }

    /**
     * Evaluate Portal
     *
     * @param  int $portal    //Portal
     * @param  int $lock_mode //Lock Mode
     *
     * @return array  $manage_list               //Evaluate Result Manage List
     */
    function evaluatePortal($portal, $lock_mode = CB_DATABASE_DEFAULT_LOCK)
    {
        $portal_id = $portal['_id'];

        //Get UUM Instance
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');

        //Get Login User
        $login_user = $uum->getLoginUser();
        $login_user_id = $login_user->getOID();

        //Get Dynamic Role
        $dynamic_role_list = $uum->listGrantedRoles();

        //Get Manage Information Manager
        $manager = $this->_getPortalManageInformationManagerBase();

        //Check Manage Cache
        $user_manage_list = [];
        $evaluate_portal_list = [];
        $user_manage_list[$portal_id] = $manager->getManageCache($login_user_id,
            $portal_id);
        if ( ! $user_manage_list[$portal_id]) {
            $evaluate_portal_list[$portal['_id']] = $portal;
            $evaluate_manage_list
                = $manager->evaluatePortalList($evaluate_portal_list,
                $login_user, $dynamic_role_list, $lock_mode);
            $user_manage_list
                = $evaluate_manage_list[$login_user_id];
        }

        //Check Manage Right
        foreach ($user_manage_list[$portal['_id']] as $authority) {
            if ($authority != 1) {
                return false;
            }
        }

        return true;
    }

    /**
     * Evaluate Portal List
     *
     * @param  array $portal_list //Portal List
     * @param  int   $lock_mode   //Lock Mode
     *
     * @return array  $allow_portal_list         //Allow Portal List
     */
    function evaluatePortalList(
        $portal_list,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get UUM Instance
        global $G_container_base;
        $uum =& $G_container_base->getInstance('uum');

        //Get Login User
        $login_user =& $uum->getLoginUser();
        $login_user_id = $login_user->getOID();

        //Get Dynamic Role
        $dynamic_role_list = $uum->listGrantedRoles();

        //Get Manage Information Manager
        $manager =& $this->_getPortalManageInformationManagerBase();

        //Check Manage Cache
        $user_manage_list = [];
        $evaluate_portal_list = [];
        foreach (array_keys($portal_list) as $portal_id) {
            $manage = $manager->getManageCache($login_user_id, $portal_id);

            if ( ! $manage) {
                $evaluate_portal_list[$portal_id] =& $portal_list[$portal_id];
            } else {
                $user_manage_list[$portal_id] = $manage;
            }
        }

        //Evaluate No Cached Portal List
        if (count($evaluate_portal_list) !== 0) {
            $evaluate_manage_list
                = $manager->evaluatePortalList($evaluate_portal_list,
                $login_user, $dynamic_role_list, $lock_mode);
            $user_manage_list = $user_manage_list
                                + $evaluate_manage_list[$login_user_id];
        }

        //Check Manage Right
        foreach (array_keys($portal_list) as $portal_id) {
            foreach ($user_manage_list[$portal_id] as $authority) {
                if ($authority != 1) {
                    unset($portal_list[$portal_id]);
                }
            }
        }

        return $portal_list;
    }
}

/**
 * Portlet Group Manage Logic Base Class
 *
 * @package grn.portal
 */
class GRN_Portal_Portlet_Group_Manage_Information_Logic_Base
{
    //Portlet Group Information Logic Base Instance
    var $_portlet_group_information_logic_base = null;

    //Portlet Group Manage Information Manager Instance
    var $_portlet_group_manage_information_manager_base = null;

    /**
     * Constructor
     */
    function __construct()
    {

    }


    /** @var self */
    private static $_instance = null;

    /**
     * @return GRN_Portal_Portlet_Group_Manage_Information_Logic_Base
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Portlert Group Manage Information Manager Base
     *
     * @return object $portlet_group_manage_information_manager_base    //Portlet Group Manage Information Manager Base
     */
    function _getPortletGroupManageInformationManagerBase()
    {
        if (is_null($this->_portlet_group_manage_information_manager_base)) {
            require_once('portal/manage_information_manager_base.csp');
            $this->_portlet_group_manage_information_manager_base
                = GRN_Portal_Portlet_Group_Manage_Information_Manager_Base::getInstance();
        }

        return $this->_portlet_group_manage_information_manager_base;
    }

    /**
     * Evaluate Portlet Group
     *
     * @param  int $lock_mode     //Lock Mode
     * @param  int $portlet_group //Portlet Group
     *
     * @return array  $manage_list               //Evaluate Result Manage List
     */
    function evaluatePortletGroup(
        $portlet_group,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $portlet_group_id = $portlet_group['_id'];

        //Get UUM Instance
        global $G_container_base;
        $uum =& $G_container_base->getInstance('uum');

        //Get Login User
        $login_user =& $uum->getLoginUser();
        $login_user_id = $login_user->getOID();

        //Get Dynamic Role
        $dynamic_role_list = $uum->listGrantedRoles();

        //Get Manage Information Manager
        $manager =& $this->_getPortletGroupManageInformationManagerBase();

        //Check Manage Cache
        $user_manage_list = [];
        $evaluate_portlet_group_list = [];
        $user_manage_list[$portlet_group_id]
            = $manager->getManageCache($login_user_id,
            $portlet_group_id);
        if ( ! $user_manage_list[$portlet_group_id]) {
            $evaluate_portlet_group_list[$portlet_group['_id']]
                = $portlet_group;
            $evaluate_manage_list
                = $manager->evaluatePortletGroupList($evaluate_portlet_group_list,
                $login_user, $dynamic_role_list, $lock_mode);
            $user_manage_list = $evaluate_manage_list[$login_user_id];
        }

        //Check Manage Right
        foreach ($user_manage_list[$portlet_group['_id']] as $authority) {
            if ($authority != 1) {
                return false;
            }
        }

        return true;
    }

    /**
     * Evaluate Portlet Group List
     *
     * @param     $portlet_group_list
     * @param int $lock_mode //Lock Mode
     *
     * @return array  $allow_portlet_group_list  //Allow Portlet group List
     */
    function evaluatePortletGroupList(
        $portlet_group_list,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get UUM Instance
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');

        //Get Login User
        $login_user = $uum->getLoginUser();
        $login_user_id = $login_user->getOID();

        //Get Dynamic Role
        $dynamic_role_list = $uum->listGrantedRoles();

        //Get Manage Information Manager
        $manager = $this->_getPortletGroupManageInformationManagerBase();

        //Check Manage Cache
        $user_manage_list = [];
        $evaluate_portlet_group_list = [];
        foreach (array_keys($portlet_group_list) as $portlet_group_id) {
            $manage = $manager->getManageCache($login_user_id,
                $portlet_group_id);

            if ( ! $manage) {
                $evaluate_portlet_group_list[$portlet_group_id]
                    =& $portlet_group_list[$portlet_group_id];
            } else {
                $user_manage_list[$portlet_group_id] = $manage;
            }
        }

        //Evaluate No Cached Portal List
        if (count($evaluate_portlet_group_list) !== 0) {
            $evaluate_manage_list
                = $manager->evaluatePortletGroupList($evaluate_portlet_group_list,
                $login_user, $dynamic_role_list, $lock_mode);
            $user_manage_list = $user_manage_list
                                + $evaluate_manage_list[$login_user_id];
        }

        //Check Manage Right
        foreach (array_keys($portlet_group_list) as $portlet_group_id) {
            foreach ($user_manage_list[$portlet_group_id] as $authority) {
                if ($authority != 1) {
                    unset($portlet_group_list[$portlet_group_id]);
                }
            }
        }

        return $portlet_group_list;
    }
}


