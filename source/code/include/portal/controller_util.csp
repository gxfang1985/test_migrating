<?php
/**
 * Portal Application  Controller Utility Class
 *
 * @author  Yuichi, Nakamura 2005/8
 * @version 1.0
 * @package grn.portal
 */

/** Portal Application **/
require_once('portal/resources.csp');
require_once('portal/access_logic.csp');

/**
 * Controller  Utility Base
 *
 * @package grn.portal
 */
class GRN_Portal_Controller_Utility_Base
{
    /**
     * Portal Logic Instance
     *
     * @var GRN_Portal_Personal_Portal_Information_Logic_Base|GRN_Portal_System_Portal_Information_Logic_Base|null
     */
    var $_portal_information_logic_base = null;

    /** Portlet Logic Instance **/
    var $_portlet_information_logic_base = null;

    /** Portlet Group Logic Instance **/
    var $_portlet_group_information_logic_base = null;

    /** System / Personal type **/
    var $_type = null;

    /**
     * Constructor
     */
    function __construct()
    {

    }


    /** @var self */
    private static $_instance = null;

    /**
     * @return GRN_Portal_Controller_Utility_Base
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get View Type
     *
     * @param  none
     *
     * @return string $type                      //Portal Type(System or Personal)
     */
    function getType()
    {
        if ( ! $this->_type) {
            $this->_type = GRN_PRTL_VIEW_TYPE_PERSONAL;
        }

        //Return Type
        return $this->_type;
    }

    /**
     * Set View Type
     *
     * @param  string $type //Portal Type(System or Personal)
     *
     * @return bool   $result                    //result
     */
    function setType($type)
    {
        //Set Type
        if ($type != GRN_PRTL_VIEW_TYPE_SYSTEM
            && $type != GRN_PRTL_VIEW_TYPE_PERSONAL
        ) {
            return false;
        }

        $this->_type = $type;

        return true;
    }

    /**
     * Get Portal Information Logic
     *
     * @param  none
     *
     * @return GRN_Portal_Personal_Portal_Information_Logic_Base|GRN_Portal_System_Portal_Information_Logic_Base
     */
    function getPortalInformationLogicBase()
    {
        //Get Type
        $type = $this->getType();

        //Get Portal Logic
        require_once('portal/portal_information_logic_base.csp');
        if ($type == GRN_PRTL_VIEW_TYPE_PERSONAL) {
            $this->_portal_information_logic_base
                = GRN_Portal_Personal_Portal_Information_Logic_Base::getInstance();
        } else {
            $this->_portal_information_logic_base
                = GRN_Portal_System_Portal_Information_Logic_Base::getInstance();
        }

        //Return Portal Information Logic Base
        return $this->_portal_information_logic_base;
    }

    /**
     * Get Portlet Information Logic
     *
     * @param  none
     *
     * @return object $portlet_information_logic_base    //Portlet Information Logic Base
     */
    function getPortletInformationLogicBase()
    {
        //Get Type
        $type = $this->getType();

        //Get Portlet Logic
        require_once('portal/portlet_information_logic_base.csp');
        if ($type == GRN_PRTL_VIEW_TYPE_PERSONAL) {
            $this->_portlet_information_logic_base
                = GRN_Portal_Personal_Portlet_Information_Logic_Base::getInstance();
        } else {
            $this->_portlet_information_logic_base
                = GRN_Portal_System_Portlet_Information_Logic_Base::getInstance();
        }

        //Return Portlet Information Logic Base
        return $this->_portlet_information_logic_base;
    }

    /**
     * Get Portlet Group Information Logic
     *
     * @param  none
     *
     * @return GRN_Portal_Personal_Portlet_Group_Information_Logic_Base|GRN_Portal_System_Portlet_Group_Information_Logic_Base
     */
    function getPortletGroupInformationLogicBase()
    {
        //Get Type
        $type = $this->getType();

        //Get Portlet Group Logic
        require_once('portal/portlet_group_information_logic_base.csp');
        if ($type == GRN_PRTL_VIEW_TYPE_PERSONAL) {
            $this->_portlet_group_information_logic_base
                = GRN_Portal_Personal_Portlet_Group_Information_Logic_Base::getInstance();
        } else {
            $this->_portlet_group_information_logic_base
                = GRN_Portal_System_Portlet_Group_Information_Logic_Base::getInstance();
        }

        //Return Portlet Group Information Logic Base
        return $this->_portlet_group_information_logic_base;
    }
}


/**
 * Portal Controller Utility Class
 *
 * @package grn.portal
 */
class GRN_Portal_Portal_Controller_Utility
    extends GRN_Portal_Controller_Utility_Base
{
    /**
     * Constructor
     */
    function __construct()
    {

    }

    /** @var self */
    private static $_instance = null;

    /**
     * @return GRN_Portal_Portal_Controller_Utility
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Portal View
     *
     * @param  int     $portal_id       //Portal ID
     * @param  array   $translation_map //Model <=> View Translation Map
     * @param  bool    $check_template  //Check Template Flag
     * @param  bool    $check_open      //Check Open Flag
     * @param  bool    $check_access    //Check Manage Flag
     * @param  bool    $check_manage    //Check Manage Flag
     * @param  bool    $throw_error     //Throw Error Flag
     * @param bool|int $lock_mode       //Lock Mode
     * @param  bool    $refresh         //Refresh Flag
     *
     * @return array  $portal_view               //Portal for View
     */
    function getView(
        $portal_id,
        $translation_map,
        $check_template = true,
        $check_open = false,
        $check_access = false,
        $check_manage = false,
        $throw_error = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $refresh = false
    ) {
        $portal_for_view = [];

        //Initialize Portal Type
        if ($this->getType() == GRN_PRTL_VIEW_TYPE_PERSONAL) {
            $check_template = false;
            $check_open = false;
            $check_manage = false;
        }

        //Get Portal Information
        $portal_information_logic_base = $this->getPortalInformationLogicBase();
        $portal
            =& $portal_information_logic_base->get($portal_id,
            $lock_mode, $refresh);

        //Check Portal Access Right
        $is_access = false;
        if ($check_access) {
            if ($this->getType() == GRN_PRTL_VIEW_TYPE_SYSTEM) {
                require_once('portal/access_information_logic_base.csp');
                $portal_access_information_logic_base
                    = GRN_Portal_Portal_Access_Information_Logic_Base::getInstance();
                if ($portal_access_information_logic_base->evaluatePortal($portal)) {
                    $is_access = true;
                }
            } else {
                require_once('portal/access_information_logic_base.csp');
                $personal_portal_access_information_logic_base
                    = GRN_Portal_Personal_Portal_Access_Information_Logic_Base::getInstance();
                if ($personal_portal_access_information_logic_base->evaluatePersonalPortal($portal)) {
                    $is_access = true;
                }
            }

            //Throw Error
            if ($throw_error && ! $is_access) {
                //Access Deny
                require_once('portal/error_code.csp');
                cb_throw_error(E_GRN_PRTL_ACCESS_DENY);
            }
        }

        //Check Portal Management Right
        $is_manage = false;
        if ($check_manage) {
            require_once('portal/manage_information_logic_base.csp');
            $portal_manage_information_logic_base
                = GRN_Portal_Portal_Manage_Information_Logic_Base::getInstance();
            if ($portal_manage_information_logic_base->evaluatePortal($portal)) {
                $is_manage = true;
            }
            //Throw Error
            if ($throw_error && ! $is_manage) {
                //Manage Deny
                require_once('portal/error_code.csp');
                cb_throw_error(E_GRN_PRTL_MANAGE_DENY);
            }
        }

        $is_template = false;
        if ($check_template) {
            if ($portal['col_name'] == GRN_PRTL_PORTAL_TEMPLATE) {
                $is_template = true;
            }
        }

        $is_open = false;
        if ($check_open) {
            if ($portal['col_is_open'] == 1) {
                $is_open = true;
            }
        }

        //Create Parameter Translation for Portal
        if (( ! $check_access || $is_access) && ( ! $check_manage || $is_manage)
            && ( ! $check_template || ! $is_template)
            && ( ! $check_open || $is_open)
        ) {
            foreach ($translation_map as $view => $model) {
                switch ($model) {
                    case '_id':
                        $portal_for_view[$view] = $portal['_id'];
                        break;
                    case 'user_uid':
                    case 'creator_uid':
                    case 'modifier_uid':
                        //Get User ID
                        $elements = explode('_', $model);
                        $uid = $portal['col_' . $elements[0]];
                        if ($uid) {
                            $portal_for_view[$view] = $uid;
                        }
                        break;
                    case 'user_name':
                    case 'creator_name':
                    case 'modifier_name':
                        //Get User ID
                        $elements = explode('_', $model);
                        $uid = $portal['col_' . $elements[0]];

                        //Get User Object
                        global $G_container_base;
                        $grn_uum = $G_container_base->getInstance('uum');
                        $object = $grn_uum->getUser($uid);
                        if ($object) {
                            $portal_for_view[$view]
                                = $object->get(GRN_PRTL_PROPERTY_DISPLAY_NAME);
                        }
                        break;
                    case 'ctime':
                    case 'mtime':
                        $time = $portal['col_'
                                        . $model];
                        $portal_for_view[$view] = new CB_TimeStamp();
                        $portal_for_view[$view]->unix_ts = $time;
                        break;
                    default:
                        $portal_for_view[$view] = $portal['col_' . $model];
                        break;
                }
            }
        }

        //Return Portal View
        return $portal_for_view;
    }

    /**
     * Get Portal Column View
     *
     * @param  int     $column          //Portal Column Infiormation
     * @param  array   $translation_map //Model <=> View Translation Map
     * @param  bool    $check_myportal  //Check Available MyPortal Flag
     * @param  bool    $check_open      //Check Open Flag
     * @param  bool    $check_access    //Check Access Flag
     * @param  bool    $throw_error     //Throw Error Flag
     * @param bool|int $lock_mode       //Lock Mode
     * @param  bool    $refresh         //Refresh Flag
     *
     * @return array  $column_view               //Portal Column for View
     */
    function getColumnView(
        $column,
        $translation_map,
        $check_myportal = false,
        $check_open = false,
        $check_access = false,
        $throw_error = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $refresh = false
    ) {
        $column_list_for_view = [];

        //Initialize Portal Type
        if ($this->getType() == GRN_PRTL_VIEW_TYPE_PERSONAL) {
            $check_open = false;
            $check_access = false;
        } else {
            $check_myportal = false;
        }

        //Check Portlet Layout Access Right
        $is_access = false;
        if ($check_access) {
            require_once('portal/access_information_logic_base.csp');
            $portlet_layout_access_information_logic_base
                = GRN_Portal_Portlet_Layout_Access_Information_Logic_Base::getInstance();
            if ($portlet_layout_access_information_logic_base->evaluatePortletLayout($column)) {
                $is_access = true;
            }

            //Throw Error
            if ($throw_error && ! $is_access) {
                //Access Deny
                require_once('portal/error_code.csp');
                cb_throw_error(E_GRN_PRTL_ACCESS_DENY);
            }
        }

        $is_myportal = false;
        if ($check_myportal) {
            if ($column['portlet_col_available_myportal'] == 1) {
                $is_myportal = true;
            }
        }

        $is_open = false;
        if ($check_open) {
            if ($column['layout_col_is_open'] == 1) {
                $is_open = true;
            }
        }

        //Create Parameter Translation for Portal
        foreach ($translation_map as $view => $model) {
            //Convert Column Name
            $elements = explode('_', $model);
            if ($elements[1] != 'id') {
                array_splice($elements, 1, 0, ['col']);
                $col_name = implode('_', $elements);
            }

            switch ($model) {
                case 'portal_id':
                case 'layout_id':
                case 'portlet_id':
                    $column_for_view[$view] = $column[$model];
                    break;
                case 'portal_user_uid':
                case 'layout_user_uid':
                case 'portlet_user_uid':
                case 'portal_creator_uid':
                case 'layout_creator_uid':
                case 'portlet_creator_uid':
                case 'portal_modifier_uid':
                case 'layout_modifier_uid':
                case 'portlet_modifier_uid':
                    //Get User ID
                    $uid = $column[$col_name];
                    if ($uid) {
                        $column_for_view[$view] = $uid;
                    }
                    break;
                case 'portal_user_name':
                case 'layout_user_name':
                case 'portlet_user_name':
                case 'portal_creator_name':
                case 'layout_creator_name':
                case 'portlet_creator_name':
                case 'portal_modifier_name':
                case 'layout_modifier_name':
                case 'portlet_modifier_name':
                    //Get User ID
                    $uid = $column[$col_name];

                    //Get User Object
                    global $G_container_base;
                    $grn_uum = $G_container_base->getInstance('uum');
                    $object = $grn_uum->getUser($uid);
                    if ($object) {
                        $column_for_view[$view]
                            = $object->get(GRN_PRTL_PROPERTY_DISPLAY_NAME);
                    }
                    break;
                case 'portal_ctime':
                case 'layout_ctime':
                case 'portlet_ctime':
                case 'portal_mtime':
                case 'layout_mtime':
                case 'portlet_mtime':
                    $time = $column[$col_name];
                    $column_for_view[$view] = new CB_TimeStamp();
                    $column_for_view[$view]->unix_ts = $time;
                    break;
                case 'layout_settings':
                    $settings = $column[$col_name];
                    if ($settings) {
                        $column_for_view[$view] = @cb_unserialize($settings,
                            ["allowed_classes" => false]);
                    }
                    break;
                case 'layout_title_name':
                    if ( ! $column['layout_col_display_name']) {
                        if ($column['portlet_col_type']
                            == GRN_PRTL_PORTLET_TYPE_HTML
                            || $column['portlet_col_type']
                               == GRN_PRTL_PORTLET_TYPE_PHP
                        ) {
                            $column_for_view[$view]
                                = $column['portlet_col_name'];
                        } else {
                            $portlet_information_logic_base
                                = $this->getPortletInformationLogicBase();
                            $column_for_view[$view]
                                = $portlet_information_logic_base->getApplicationPortletName($column['portlet_col_type']);
                        }
                    } else {
                        $column_for_view[$view]
                            = $column['layout_col_display_name'];
                    }
                    break;
                case 'layout_display_name_mode':
                    $column_for_view[$view]
                        = $column['layout_col_display_name_mode'];
                    break;
                case 'portlet_group_id':
                    //Get Portlet Group ID
                    $gid = $column[$col_name];
                    if ($gid) {
                        $column_for_view[$view] = $gid;
                    }
                    break;
                case 'portlet_group_name':
                    //Get Portlet Group ID
                    $gid = $column[$col_name];

                    //Get Portlet Group Information
                    $portlet_group_information_logic_base
                        = $this->getPortletGroupInformationLogicBase();
                    $portlet_group
                        =& $portlet_group_information_logic_base->get($gid,
                        $refresh);
                    if ($portlet_group) {
                        $column_for_view[$view] = $portlet_group['col_name'];
                    }
                    break;
                default:
                    $column_for_view[$view] = $column[$col_name];
                    break;
            }
        }

        //Return Portal Column View
        return $column_for_view;
    }

    /**
     * Get Portal List View
     *
     * @param  array   $translation_map //Model <=> View Translation Map
     * @param  bool    $check_template  //Check Template Flag
     * @param  bool    $check_open      //Check Open Flag
     * @param  bool    $check_access    //Check Access Flag
     * @param  bool    $check_manage    //Check Manage Flag
     * @param  bool    $throw_error     //Throw Error Flag
     * @param bool|int $lock_mode       //Lock Mode
     * @param  bool    $refresh         //Refresh Flag
     *
     * @return array  $portal_list_view          //Portlet List for View
     */
    function getListView(
        $translation_map,
        $check_template = true,
        $check_open = false,
        $check_access = false,
        $check_manage = false,
        $throw_error = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $refresh = false
    ) {
        $portal_list_for_view = [];

        //Initialize Portal Type
        if ($this->getType() == GRN_PRTL_VIEW_TYPE_PERSONAL) {
            $check_template = false;
            $check_open = false;
            $check_manage = false;
        }

        //Get Portal Information List
        $portal_information_logic_base = $this->getPortalInformationLogicBase();
        $portal_list
            =& $portal_information_logic_base->getList($lock_mode,
            $refresh);

        //Check Portal Access Right
        if ($check_access) {
            $allow_portal_list = [];
            if ($this->getType() == GRN_PRTL_VIEW_TYPE_PERSONAL) {
                require_once('portal/access_information_logic_base.csp');
                $personal_portal_access_information_logic_base
                    = GRN_Portal_Personal_Portal_Access_information_Logic_Base::getInstance();
                if ($personal_portal_access_information_logic_base->evaluatePersonalPortal()) {
                    $allow_portal_list =& $portal_list;
                }
            } else {
                require_once('portal/access_information_logic_base.csp');
                $portal_access_information_logic_base
                    = GRN_Portal_Portal_Access_Information_Logic_Base::getInstance();
                $allow_portal_list
                    = $portal_access_information_logic_base->evaluatePortalList($portal_list);
            }

            //Throw Error
            if ($throw_error && count($allow_portal_list) == 0) {
                //Access Deny
                require_once('portal/error_code.csp');
                cb_throw_error(E_GRN_PRTL_ACCESS_DENY);
            }
            $portal_list = $allow_portal_list;
        }

        //Check Portal Manage Right
        if ($check_manage) {
            $allow_portal_list = [];
            require_once('portal/manage_information_logic_base.csp');
            $portal_manage_information_logic_base
                = GRN_Portal_Portal_Manage_Information_Logic_Base::getInstance();
            $allow_portal_list
                = $portal_manage_information_logic_base->evaluatePortalList($portal_list);

            //Throw Error
            if ($throw_error && count($arrow_portal_list) == 0) {
                //Manage Deny
                require_once('portal/error_code.csp');
                cb_throw_error(E_GRN_PRTL_MANAGE_DENY);
            }
            $portal_list = $allow_portal_list;
        }

        //Create Parameter Translation for Portal List
        foreach (array_keys($portal_list) as $portal_id) {
            //Check Open and Template
            if (($check_open && $portal_list[$portal_id]['col_is_open'] != 1)
                || ($check_template
                    && $portal_list[$portal_id]['col_name']
                       == GRN_PRTL_PORTAL_TEMPLATE)
            ) {
                continue;
            }
            $portal_list_for_view[$portal_id] = $this->getView($portal_id,
                $translation_map, false, false, false, false, false, $lock_mode,
                false);
        }

        //Return Portal List View
        return $portal_list_for_view;
    }

    /**
     * Get Portal Column List View
     *
     * @param  int     $portal_id       //Portal ID
     * @param  array   $translation_map //Model <=> View Translation Map
     * @param  bool    $check_myportal  //Check Available MyPortal Flag
     * @param  bool    $check_open      //Check Open Flag
     * @param  bool    $check_access    //Check Access Flag
     * @param  bool    $throw_error     //Throw Error Flag
     * @param bool|int $lock_mode       //Lock Mode
     * @param  bool    $refresh         //Refresh Flag
     *
     * @return array  $portal_column_list_view   //Portal Column List for View
     */
    function getColumnListView(
        $portal_id,
        $translation_map,
        $check_myportal = false,
        $check_open = false,
        $check_access = false,
        $throw_error = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $refresh = false
    ) {
        $column_list_for_view = [];

        //Initialize Portal Type
        if ($this->getType() == GRN_PRTL_VIEW_TYPE_PERSONAL) {
            $check_open = false;
            $check_access = false;
        } else {
            $check_myportal = false;
        }

        //Get Portal Column Information List
        $portal_information_logic_base = $this->getPortalInformationLogicBase();
        $column_list
            =& $portal_information_logic_base->getColumnList($portal_id,
            $lock_mode, $refresh);

        //Check Portal Access Right
        $all_portlet_layout_list = [];
        $allow_portlet_layout_list = [];
        if ($check_access) {
            for ($i = 0; $i < 4; $i++) {
                if (array_key_exists($i, $column_list)) {
                    $all_portlet_layout_list = $all_portlet_layout_list
                                               + $column_list[$i];
                }
            }

            require_once('portal/access_information_logic_base.csp');
            $portlet_layout_access_information_logic_base
                = GRN_Portal_Portlet_Layout_Access_Information_Logic_Base::getInstance();
            $allow_portlet_layout_list
                = $portlet_layout_access_information_logic_base->evaluatePortletLayoutList($all_portlet_layout_list);

            //Throw Error
            if ($throw_error && count($allow_portlet_layout_list) == 0) {
                //Access Deny
                require_once('portal/error_code.csp');
                cb_throw_error(E_GRN_PRTL_ACCESS_DENY);
            }
        }

        //Create Parameter Translation for Portal Column List
        foreach (array_keys($column_list) as $column_type) {
            foreach (
                array_keys($column_list[$column_type]) as $portlet_layout_id
            ) {
                $column = $column_list[$column_type][$portlet_layout_id];

                //Check Open and Avalilable My Poryal
                if ($check_open && $column['layout_col_is_open'] != 1) {
                    continue;
                }
                if ($check_access
                    && ! array_key_exists($portlet_layout_id,
                        $allow_portlet_layout_list)
                ) {
                    continue;
                }
                if ($check_myportal
                    && $column['portlet_col_available_myportal'] != 1
                ) {
                    continue;
                }
                $column_list_for_view[$column_type][$portlet_layout_id]
                    = $this->getColumnView($column, $translation_map, false,
                    false, false, false, $lock_mode, false);
            }
        }

        //Return Portal Column List View
        return $column_list_for_view;
    }
}

/**
 * Portlet Group Controller Utility Class
 *
 * @package grn.portal
 */
class GRN_Portal_Portlet_Group_Controller_Utility
    extends GRN_Portal_Controller_Utility_Base
{
    /**
     * Constructor
     */
    function __construct()
    {

    }

    /** @var self */
    private static $_instance = null;

    /**
     * @return GRN_Portal_Portlet_Group_Controller_Utility
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Portlet Group View
     *
     * @param  int     $portlet_group_id //Portlet Group ID
     * @param  array   $translation_map  //Model <=> View Translation Map
     * @param  bool    $check_manage     //Check Manage Flag
     * @param  bool    $throw_error      //Throw Error Flag
     * @param bool|int $lock_mode        //Lock Mode
     * @param  bool    $refresh          //Refresh Flag
     *
     * @return array  $portlet_group_view        //Portlet Group for View
     */
    function getView(
        $portlet_group_id,
        $translation_map,
        $check_manage = false,
        $throw_error = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $refresh = false
    ) {
        $portlet_group_for_view = [];

        //Initialize Portal Type
        if ($this->getType() == GRN_PRTL_VIEW_TYPE_PERSONAL) {
            $check_manage = false;
        }

        //Get Portlet Group Information
        $portlet_group_information_logic_base
            = $this->getPortletGroupInformationLogicBase();
        $portlet_group
            =& $portlet_group_information_logic_base->get($portlet_group_id,
            $lock_mode, $refresh);

        //Check Portlet Group Management Right
        $is_manage = false;
        if ($check_manage) {
            require_once('portal/manage_information_logic_base.csp');
            $portlet_group_manage_information_logic_base
                = GRN_Portal_Portlet_Group_Manage_Information_Logic_Base::getInstance();
            if ($portlet_group_manage_information_logic_base->evaluatePortletGroup($portlet_group)) {
                $is_manage = true;
            }

            //Throw Error
            if ($throw_error && ! $is_manage) {
                //Manage Deny
                require_once('portal/error_code.csp');
                cb_throw_error(E_GRN_PRTL_MANAGE_DENY);
            }
        }

        //Create Parameter Translation for Portlet Group
        if ( ! $check_manage || $is_manage) {
            foreach ($translation_map as $view => $model) {
                switch ($model) {
                    case '_id':
                        $portlet_group_for_view[$view] = $portlet_group['_id'];
                        break;
                    case 'user_uid':
                    case 'creator_uid':
                    case 'modifier_uid':
                        //Get User ID
                        $elements = explode('_', $model);
                        $uid = $portlet_group['col_' . $elements[0]];
                        if ($uid) {
                            $portlet_group_for_view[$view] = $uid;
                        }
                        break;
                    case 'user_name':
                    case 'creator_name':
                    case 'modifier_name':
                        //Get User ID
                        $elements = explode('_', $model);
                        $uid = $portlet_group['col_' . $elements[0]];

                        //Get User Object
                        global $G_container_base;
                        $grn_uum = $G_container_base->getInstance('uum');
                        $object = $grn_uum->getUser($uid);
                        if ($object) {
                            $portlet_group_for_view[$view]
                                = $object->get(GRN_PRTL_PROPERTY_DISPLAY_NAME);
                        }
                        break;
                    case 'ctime':
                    case 'mtime':
                        $time = $portlet_group['col_'
                                               . $model];
                        $portlet_group_for_view[$view]
                            = new CB_TimeStamp();
                        $portlet_group_for_view[$view]->unix_ts = $time;
                        break;
                    default:
                        $portlet_group_for_view[$view] = $portlet_group['col_'
                                                                        . $model];
                        break;
                }
            }
        }

        //Return Portlet Group View
        return $portlet_group_for_view;
    }

    /**
     * Get Portlet Group List View
     *
     * @param  array   $translation_map //Model <=> View Translation Map
     * @param  bool    $check_manage    //Check Manage Flag
     * @param  bool    $throw_error     //Throw Error Flag
     * @param bool|int $lock_mode       //Lock Mode
     * @param  bool    $refresh         //Refresh Flag
     *
     * @return array  $portlet_group_list_view   //Portlet Group List for View
     */
    function getListView(
        $translation_map,
        $check_manage = false,
        $throw_error = false,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $refresh = false
    ) {
        $portlet_group_list_for_view = [];

        //Initialize Portal Type
        if ($this->getType() == GRN_PRTL_VIEW_TYPE_PERSONAL) {
            $check_manage = false;
        }

        //Get Portlet Group Information List
        $portlet_group_information_logic_base
            = $this->getPortletGroupInformationLogicBase();
        $portlet_group_list
            =& $portlet_group_information_logic_base->getList($lock_mode,
            $refresh);

        //Check Portlet Group Manage Right
        $allow_portlet_group_list = [];
        if ($check_manage) {
            $allow_portlet_group_list = [];

            require_once('portal/manage_information_logic_base.csp');
            $portlet_group_manage_information_logic_base
                = GRN_Portal_Portlet_Group_Manage_Information_Logic_Base::getInstance();
            $allow_portlet_group_list
                = $portlet_group_manage_information_logic_base->evaluatePortletGroupList($portlet_group_list);

            //Throw Error
            if ($throw_error && count($allow_portlet_group_list) == 0) {
                //Manage Deny
                require_once('portal/error_code.csp');
                cb_throw_error(E_GRN_PRTL_MANAGE_DENY);
            }
            $portlet_group_list = $allow_portlet_group_list;
        }

        //Create Parameter Translation for Portlet Group List
        foreach (array_keys($portlet_group_list) as $portlet_group_id) {
            $portlet_group_list_for_view[$portlet_group_id]
                = $this->getView($portlet_group_id, $translation_map, false,
                false, $lock_mode, false);
        }

        //Return Portlet Group List View
        return $portlet_group_list_for_view;
    }
}


