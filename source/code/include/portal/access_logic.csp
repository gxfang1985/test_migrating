<?php

/**
 * アクセス権
 *
 * @package grn.portal
 * @author  Hideyasu, YOSHIDA 2004/11
 * @version 1.0
 */

/** Portal Application **/
require_once('portal/resources.csp');

/**
 * アクセス権ロジッククラス
 *
 * @package grn.portal
 */
class GRN_Portal_AccessLogic
{
    /**
     * @access private
     */
    var $_target_tables
        = [
            GRN_PRTL_TARGET_TYPE_DYNAMIC_ROLE => null,
            GRN_PRTL_TARGET_TYPE_STATIC_ROLE  => 'cb_role',
            GRN_PRTL_TARGET_TYPE_GROUP        => 'cb_group',
            GRN_PRTL_TARGET_TYPE_USER         => 'cb_user'
        ];

    /**
     * @access private
     */
    var $_module_id = null;

    /**
     * コンストラクタ
     */
    function __construct()
    {
    }

    /**
     * テーブル情報を取得する
     *
     * @param $table_name string  テーブル名
     *
     * @return CB_TableInfo
     * @access private
     */
    function _getTableInfo($table_name)
    {
        $app_locator = GRN_ApplicationLocator::instance();
        $table_manager = $app_locator->getTableManager('portal');

        $ret = $table_manager->getTableInfo($table_name);

        return $ret;
    }

    /**
     * 権限名の一覧を取得する
     *
     * @param CB_TableInfo $table_info テーブル情報オブジェクト
     *
     * @return array
     * @access private
     */
    function _getAuthorityNames(& $table_info)
    {
        $column_infos = $table_info->getColumnInfo();
        $column_names = [];

        foreach (array_keys($column_infos) as $column_name) {
            if (false !== strpos($column_name, 'authority_')) {
                $column_names[] = substr($column_name, 10);
            }
        }

        return $column_names;
    }

    /**
     * テーブル名を取得する
     *
     * @param string|grn_access_abstractdata $object   mixed
     * @param string|cb_role                 $target   mixed
     * @param                                $is_force boolean
     *
     * @return string
     * @access private
     */
    function _getTableName(& $object, & $target, $is_force = false)
    {
        if ( ! is_bool($is_force)) {
            assert('FALSE');
        }

        if (is_object($object)) {
            $object_id = strtolower(get_class($object));
            if (is_a($object, 'grn_access_abstractdata')) {
                $object_id = 'grn_access_abstractdata_'
                             . $object->get('unique_key');
            }
            $object_id = substr($object_id, 4);
        } elseif (is_string($object)) {
            $object_id = $object;
        } else {
            assert('FALSE');
        }

        if ($is_force) {
            $target_id = $target;
        } elseif (is_object($target)) {
            if (is_a($target, 'cb_role')) {
                $target_id = GRN_PRTL_TARGET_TYPE_STATIC_ROLE;
            } else {
                $target_id = substr(strtolower(get_class($target)), 3);
            }
        } elseif (is_string($target)) {
            $target_id = GRN_PRTL_TARGET_TYPE_DYNAMIC_ROLE;
        } else {
            assert('FALSE');
        }

        return 'grn_' . $object_id . '_' . $target_id;
    }

    /**
     * アクセス権テーブルを生成する
     *
     * @param $table_data array  下記をキーに持つ連想配列
     *                    to_table string  アクセス制御するオブジェクトのクラス名
     *                    authority array  権限名の配列
     */
    function createAccessTable($table_data)
    {
        if ( ! is_array($table_data)) {
            assert('FALSE');
        }

        $target_tables =& $this->_target_tables;

        $object_id = $table_data['to_table'];
        if (array_key_exists('unique_key', $table_data)) {
            $object_id .= '_' . $table_data['unique_key'];
        }
        $object_id = substr($object_id, 4);

        foreach ($target_tables as $target_id => $target_table) {
            $table_name = $this->_getTableName($object_id, $target_id, true);
            $table_info =& $this->_getTableInfo($table_name);

            $table_info->addColumn('object',
                ['type' => 'relation', 'to' => $table_data['to_table']]);
            if (is_null($target_table)) {
                $table_info->addColumn('target',
                    ['type' => 'char', 'length' => 100]);
            } else {
                $table_info->addColumn('target',
                    ['type' => 'relation', 'to' => $target_table]);
            }
            $authorities =& $table_data['authority'];
            foreach ($authorities as $authority) {
                $table_info->addColumn('authority_' . $authority,
                    ['type' => 'int']);
            }
            $table_info->addIndex('access',
                ['cols' => ['object', 'target'], 'unique' => true]);
            $table_info->createTable();
        }
    }

    /**
     * アクセス権テーブルを変更する
     *
     * @param $table_data array  下記をキーに持つ連想配列
     *                    to_table string  アクセス制御するオブジェクトのクラス名
     *                    authority array  権限名の配列
     */
    function alterAccessTable($table_data)
    {
        if ( ! is_array($table_data)) {
            assert('FALSE');
        }

        $target_tables =& $this->_target_tables;

        $object_id = $table_data['to_table'];
        if (array_key_exists('unique_key', $table_data)) {
            $object_id .= '_' . $table_data['unique_key'];
        }
        $object_id = substr($object_id, 4);

        foreach ($target_tables as $target_id => $target_table) {
            $table_name = $this->_getTableName($object_id, $target_id, true);
            $table_info =& $this->_getTableInfo($table_name);

            $authorities =& $table_data['authority'];
            foreach ($authorities as $authority) {
                $column_name = 'authority_' . $authority;
                if (is_null($table_info->getColumnInfo($column_name))) {
                    $table_info->addColumn($column_name, ['type' => 'int']);
                }
            }
            $table_info->alterTable();
        }
    }

    /**
     * アクセス権テーブルを削除する
     *
     * @param $table_data array  下記をキーに持つ連想配列
     *                    to_table string  アクセス制御するオブジェクトのクラス名
     *                    authority array  権限名の配列
     */
    function dropTable($table_data)
    {
        if ( ! is_array($table_data)) {
            assert('FALSE');
        }

        $target_tables =& $this->_target_tables;

        $object_id = $table_data['to_table'];
        if (array_key_exists('unique_key', $table_data)) {
            $object_id .= '_' . $table_data['unique_key'];
        }
        $object_id = substr($object_id, 4);

        foreach ($target_tables as $target_id => $target_table) {
            $table_name = $this->_getTableName($object_id, $target_id, true);
            $table_info =& $this->_getTableInfo($table_name);
            $table_info->dropTable();
        }
    }

    /**
     * アクセス権テーブル行を取得する
     *
     * @param $object    mixed
     * @param $target    mixed
     * @param $access_id int
     *
     * @return object GRN_Access_Base
     * @access private
     */
    function _getRow(& $object, & $target, $access_id = null)
    {
        $is_force = ! is_null($access_id);
        $table_name = $this->_getTableName($object, $target, $is_force);
        $table_info = $this->_getTableInfo($table_name);
        $db = $table_info->getDBConnection();
        if ($is_force) {
            $row = $table_info->getRow($access_id);
        } else {
            $authorities = $this->_getAuthorityNames($table_info);
            //escape!
            $query = 'col_object = \'' . $db->escape($object->getOID())
                     . '\' AND col_target = ';
            if (is_object($target)) {
                $query .= '\'' . $db->escape($target->getOID()) . '\'';
            } elseif (is_string($target)) {
                $query .= '\'' . $db->escape($target) . '\'';
            } else {
                assert('FALSE');
            }

            $rowset = new CB_RowSet($table_info);
            $rowset->addCondition($query);
            $this->_addUserJoin($rowset, $target, $table_info->getTableName());
            $row = $rowset->iterate();
            $rowset->destroy();
        }

        return $row;
    }

    /**
     * アクセス権テーブル行の集合の一覧を取得する
     *
     * @param $object object GRN_Access_Base  アクセス制御するオブジェクト
     *
     * @return array  アクセス権テーブル行の集合オブジェクトの配列
     * @access private
     */
    function _getRowSetList(& $object)
    {
        $target_tables =& $this->_target_tables;

        $object_id = strtolower(get_class($object));
        if (is_a($object, 'grn_access_abstractdata')) {
            $object_id = 'grn_access_abstractdata_'
                         . $object->get('unique_key');
        }
        $object_id = substr($object_id, 4);

        $rowset_list = [];
        foreach ($target_tables as $target_id => $target_table) {
            $table_name = $this->_getTableName($object_id, $target_id, true);
            $table_info = $this->_getTableInfo($table_name);
            $rowset = new CB_RowSet($table_info);
            //escape!
            $query = $rowset->queryf("col_object = '@S'", $object->getOID());
            $rowset->addCondition($query);
            $this->_addUserJoin($rowset, $target_id,
                $table_info->getTableName());
            $rowset->addOrderColumn('_id');
            $rowset_list[$target_id] =& $rowset;
            unset($rowset);
        }

        return $rowset_list;
    }

    /**
     * 単体オブジェクトのアクセス権評価値を計算する
     *
     * @param $user        object CB_User  評価するユーザー
     * @param $roles       array  ロール名（キー）の配列
     * @param $object      object GRN_Access_Base  アクセス制御するオブジェクト
     * @param $authorities array  権限名を持つ配列
     *
     * @return boolean  TRUEのとき許可された、FALSEのとき拒否されたアクセス権を
     *  オブジェクトは持つ
     */
    function _evaluateAccess(& $user, $roles, & $object, $authorities)
    {
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');

        $user_id = $user->getOID();
        $targets_list = [];

        // ダイナミックロールを取得する
        $targets_list[GRN_PRTL_TARGET_TYPE_DYNAMIC_ROLE] = $roles;

        // スタティックロールを取得する
        $targets_list[GRN_PRTL_TARGET_TYPE_STATIC_ROLE]
            = $uum->getUserRoles($user_id);
        if (false === ($targets_list[GRN_PRTL_TARGET_TYPE_STATIC_ROLE])) {
            return false;
        }

        // 組織を取得する
        $targets_list[GRN_PRTL_TARGET_TYPE_GROUP]
            = $uum->getUserGroups($user_id);
        if (false === ($targets_list[GRN_PRTL_TARGET_TYPE_GROUP])) {
            return false;
        }

        // ユーザーを取得する
        $targets_list[GRN_PRTL_TARGET_TYPE_USER] = [& $user];

        switch ($this->_getSecurityModel($object)) {
            case GRN_PRTL_SECURITY_MODEL_TYPE_GRANT:
                $retval_true = true;
                $retval_false = false;
                break;
            case GRN_PRTL_SECURITY_MODEL_TYPE_REVOKE:
                $retval_true = false;
                $retval_false = true;
                break;
            default:
                return null;
        }

        $object_id = strtolower(get_class($object));
        if (is_a($object, 'grn_access_abstractdata')) {
            $object_id = 'grn_access_abstractdata_'
                         . $object->get('unique_key');
        }
        $object_id = substr($object_id, 4);

        $target_tables =& $this->_target_tables;

        $values = [];
        foreach ($target_tables as $target_id => $target_table) {
            if (is_null($targets_list[$target_id])
                || 0 === count($targets_list[$target_id])
            ) {
                continue;
            }
            $targets =& $targets_list[$target_id];

            $table_name = $this->_getTableName($object_id, $target_id, true);
            $table_info = $this->_getTableInfo($table_name);
            //for escape
            $db = $table_info->getDBConnection();
            //$query = 'col_object = '.$object->getOID().' AND ( ';
            //escaped!
            $query = 'col_object = \'' . $db->escape($object->getOID())
                     . '\' AND ( ';
            if (GRN_PRTL_TARGET_TYPE_DYNAMIC_ROLE == $target_id) {
                foreach ($targets as $key => $value) {
                    if (1 == $value) {
                        $query .= "col_target = '" . $db->escape($key)
                                  . "' OR ";
                    }
                }
            } else {
                foreach (array_keys($targets) as $offset) {
                    $query .= 'col_target = \''
                              . $db->escape($targets[$offset]->getOID())
                              . '\' OR ';
                }
            }
            $query = substr($query, 0, -4) . ' ) AND ( ';
            foreach ($authorities as $authority) {
                $query .= 'col_authority_' . $db->escape($authority)
                          . ' = 1 OR ';
            }
            $query = substr($query, 0, -4) . ' )';

            $rowset = new CB_RowSet($table_info);
            $rowset->addCondition($query);

            $this->_addUserJoin($rowset, $target_id,
                $table_info->getTableName());

            while ( ! is_null($row = $rowset->iterate())) {
                $evalval = 1;
                foreach ($authorities as $authority) {
                    $value = $row->get('authority_' . $authority);
                    $value = is_null($value) ? 0 : intval($value);
                    $values[$authority] = max(@ $values[$authority], $value);
                    $evalval = $evalval & $values[$authority];
                }
                if (1 === $evalval) {
                    $rowset->destroy();

                    return $retval_true;
                }
            }
        }

        return $retval_false;
    }

    /**
     * アクセスが許可された複数オブジェクトを取得する
     *
     * @param      $objects
     * @param      $targets_list
     * @param      $object_table
     * @param      $authorities
     * @param bool $is_grant
     *
     * @return array
     * @access private
     */
    function _getAllowSingleObjects(
        $objects,
        $targets_list,
        $object_table,
        $authorities,
        $is_grant = true
    ) {
        if (0 === count($objects)) {
            return [];
        }

        $target_tables =& $this->_target_tables;

        $values_list = [];

        foreach ($target_tables as $target_id => $target_table) {
            if (is_null($targets_list[$target_id])
                || 0 === count($targets_list[$target_id])
            ) {
                continue;
            }
            $targets =& $targets_list[$target_id];
            //for escape
            $table_name = $this->_getTableName($object_table, $target_id, true);
            $table_info =& $this->_getTableInfo($table_name);

            $db = $table_info->getDBConnection();

            $query = '( ';
            foreach (array_keys($objects) as $object_id) {
                //$query .= 'col_object = '.$object_id.' OR ';
                $query .= 'col_object = \'' . $db->escape($object_id)
                          . '\' OR ';
            }
            $query = substr($query, 0, -4) . ' ) AND ( ';
            if (GRN_PRTL_TARGET_TYPE_DYNAMIC_ROLE == $target_id) {
                foreach ($targets as $key => $value) {
                    if (1 == $value) {
                        $query .= 'col_target = ' . '\'' . $db->escape($key)
                                  . '\'' . ' OR ';
                    }
                }
            } else {
                foreach (array_keys($targets) as $offset) {
                    $query .= 'col_target = \''
                              . $db->escape($targets[$offset]->getOID())
                              . '\' OR ';
                }
            }
            $query = substr($query, 0, -4) . ' ) AND ( ';
            foreach ($authorities as $authority) {
                $query .= 'col_authority_' . $db->escape($authority)
                          . ' = 1 OR ';
            }
            $query = substr($query, 0, -4) . ' )';

            $rowset = new CB_RowSet($table_info);
            $rowset->addCondition($query);
            $this->_addUserJoin($rowset, $target_id,
                $table_info->getTableName());

            while ( ! is_null($row = $rowset->iterate())) {
                $object = $row->get('object');
                $object_id = $object->getOID();

                if ( ! array_key_exists($object_id, $objects)) {
                    continue;
                }

                // アクセス権の権限値の一覧を取得する
                if (array_key_exists($object_id, $values_list)) {
                    $values =& $values_list[$object_id];
                } else {
                    $values_list[$object_id] = [];
                    $values =& $values_list[$object_id];
                    foreach ($authorities as $authority) {
                        $values[$authority] = 0;
                    }
                }

                // アクセス権を評価する
                foreach ($authorities as $authority) {
                    $value = $row->get('authority_' . $authority);
                    $value = is_null($value) ? 0 : intval($value);
                    $value = max($values[$authority], $value);
                    $values[$authority] = $value;
                }
            }
        }

        $retval = [];
        foreach ($values_list as $object_id => $values) {
            $evalval = 1;
            foreach ($authorities as $authority) {
                if (0 == $evalval || 0 == $values[$authority]) {
                    $evalval = 0;
                }
            }

            if (1 == $evalval) {
                if ($is_grant) {
                    $retval[$object_id] =& $objects[$object_id];
                } else {
                    unset($objects[$object_id]);
                }
            }
        }

        if ($is_grant) {
            return $retval;
        }

        return $objects;
    }

    /**
     * アクセスが許可された複数オブジェクトを取得する
     *
     * @param $user        object CB_User
     * @param $roles       array
     * @param $objects     array
     * @param $authorities array
     *
     * @return array
     */
    function _getAllowMultiObjects(& $user, $roles, $objects, $authorities)
    {
        global $G_container_base;
        $uum =& $G_container_base->getInstance('uum');

        $user_id = $user->getOID();
        $targets_list = [];

        // ダイナミックロールを取得する
        $targets_list[GRN_PRTL_TARGET_TYPE_DYNAMIC_ROLE] = $roles;

        // スタティックロールを取得する
        $targets_list[GRN_PRTL_TARGET_TYPE_STATIC_ROLE]
            = $uum->getUserRoles($user_id);
        if (false === ($targets_list[GRN_PRTL_TARGET_TYPE_STATIC_ROLE])) {
            return false;
        }

        // 組織を取得する
        $targets_list[GRN_PRTL_TARGET_TYPE_GROUP]
            = $uum->getUserGroups($user_id);
        if (false === ($targets_list[GRN_PRTL_TARGET_TYPE_GROUP])) {
            return false;
        }

        // ユーザーを取得する
        $targets_list[GRN_PRTL_TARGET_TYPE_USER] = [& $user];

        $grants = [];
        $revokes = [];

        foreach (array_keys($objects) as $object_Id) {
            $object =& $objects[$object_Id];

            switch ($this->_getSecurityModel($object)) {
                case GRN_PRTL_SECURITY_MODEL_TYPE_GRANT:
                    $grants[$object->getOID()] =& $object;
                    break;
                case GRN_PRTL_SECURITY_MODEL_TYPE_REVOKE:
                    $revokes[$object->getOID()] =& $object;
                    break;
                default:
                    return null;
            }
        }

        $object_id = strtolower(get_class($object));
        if (is_a($object, 'grn_access_abstractdata')) {
            $object_id = 'grn_access_abstractdata_'
                         . $object->get('unique_key');
        }
        $object_id = substr($object_id, 4);

        $grants = $this->_getAllowSingleObjects($grants, $targets_list,
            $object_id, $authorities);
        $revokes = $this->_getAllowSingleObjects($revokes, $targets_list,
            $object_id, $authorities, false);

        return $grants + $revokes;
    }

////////////////////////////////////////////////////////////////

    /**
     * アクセス制御するオブジェクトを取得する
     *
     * @param $object_id int  アクセス制御するオブジェクトID
     *
     * @return object GRN_Access_Base
     */
    function getObject($object_id)
    {
    }

    /**
     * アクセス制御するターゲットを取得する
     *
     * @param $target_type string  アクセス制御するターゲットの種類
     * @param $target_id   mixed  アクセス制御するターゲットID
     *
     * @return mixed
     * @access private
     */
    function &_getTarget($target_type, $target_id)
    {
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');

        // ターゲットを取得する
        switch ($target_type) {
            case GRN_PRTL_TARGET_TYPE_USER:
                $target =& $uum->getUser($target_id);
                break;
            case GRN_PRTL_TARGET_TYPE_GROUP:
                $target =& $uum->getGroup($target_id);
                break;
            case GRN_PRTL_TARGET_TYPE_STATIC_ROLE:
                $target =& $uum->getStaticRole($target_id);
                break;
            case GRN_PRTL_TARGET_TYPE_DYNAMIC_ROLE:
                $target = $target_id;
                break;
            default:
                assert('FALSE');
        }

        return $target;
    }

    /**
     * アクセス権情報を取得する
     *
     * @param $object_id int  アクセス制御するオブジェクトID
     * @param $row       object
     *
     * @return array  下記をキーに持つ連想配列
     *  id int  アクセス権ID
     *  oid int  アクセス制御するオブジェクトID
     *  tid mixed  アクセス制御するターゲットID
     *  type string  アクセス制御するターゲットの種類
     *  data array  キーに権限名、値に権限値を持つ連想配列
     */
    function _getAccess($object_id, & $row)
    {
        $target =& $row->get('target');
        $target_type = gettype($target);

        $access = [];
        if ('object' == $target_type) {
            if (is_a($target, 'cb_user')) {
                $access['tid'] = $target->getOID();
                $access['type'] = GRN_PRTL_TARGET_TYPE_USER;
                $access['target_name'] = $target->get('display_name');;
            } elseif (is_a($target, 'cb_group')) {
                global $G_container_base;
                $uum = $G_container_base->getInstance('uum');
                $groupObj = $uum->getGroup($target->getOID());

                $access['tid'] = $target->getOID();
                $access['type'] = GRN_PRTL_TARGET_TYPE_GROUP;
                $access['target_name'] = $groupObj->get('name');
            } elseif (is_a($target, 'cb_role')) {
                $access['tid'] = $target->getOID();
                $access['type'] = GRN_PRTL_TARGET_TYPE_STATIC_ROLE;
                $access['target_name'] = $target->get('foreign_key');
            }
        } elseif ('string' == $target_type) {
            require_once('grn/uum_util.csp');
            $uum_util = GRN_UumUtil::getInstance();
            $dynamic_roles = $uum_util->listDynamicRoles();
            $access['tid'] = $target;
            $access['type'] = GRN_PRTL_TARGET_TYPE_DYNAMIC_ROLE;
            $access['target_name'] = $dynamic_roles[$target]['name'];
        } else {
            assert('FALSE');
        }
        $access['id'] = $row->getOID();
        $access['oid'] = $object_id;

        $access['data'] = [];
        $table_information = $row->getTableInfo();
        $authorities = $this->_getAuthorityNames($table_information);
        foreach ($authorities as $authority) {
            $access['data'][$authority] = $row->get('authority_' . $authority);
        }

        return $access;
    }

    /**
     * アクセス権情報を取得する
     *
     * @param $object_id   int  アクセス制御するオブジェクトID
     * @param $target_type string  アクセス制御するターゲットの種類
     * @param $target_id   mixed  アクセス制御するターゲットID
     *
     * @return mixed
     */
    function &getAccess($object_id, $target_type, $target_id)
    {
        $object =& $this->getObject($object_id);
        $target =& $this->_getTarget($target_type, $target_id);

        $row =& $this->_getRow($object, $target);

        $access = null;
        if ( ! is_null($row)) {
            $access = $this->_getAccess($object_id, $row);
        }

        return $access;
    }

    /**
     * アクセス権情報の一覧を取得する
     *
     * @param $object_id   int  アクセス制御するオブジェクトID
     * @param $access_keys array アクセス権キーの一覧
     *                     アクセス権キーは下記の通り
     *                     {アクセス制御するターゲットの種類}.':'.{アクセス権ID}を持つ配列
     *
     * @return array  下記をキーに持つ連想配列
     *  id int  アクセス権ID
     *  oid int  アクセス制御するオブジェクトID
     *  tid mixed  アクセス制御するターゲットID
     *  type string  アクセス制御するターゲットの種類
     *  data int  権限の値
     */
    function getAccesses($object_id, $access_keys = null)
    {
        if (is_null($object_id) || 0 == strlen($object_id)) {
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_ACCESS_INVALID_ID);
        }

        // オブジェクトテーブル行を取得する
        $object =& $this->getObject($object_id);

        // アクセス権テーブル行の集合の一覧を取得する
        $rowset_list = $this->_getRowSetList($object);

        // アクセス権の一覧を生成する
        $accesses = [];
        foreach (array_keys($rowset_list) as $list_id) {
            $rowset = $rowset_list[$list_id];
            while ( ! is_null($row = $rowset->iterate())) {
                $accesses[] = $this->_getAccess($object_id, $row);
            }
        }

        if ( ! is_null($access_keys)) {
            foreach (array_keys($accesses) as $key) {
                $access =& $accesses[$key];
                if (false === array_search($access['type'] . ':'
                                           . $access['id'], $access_keys)
                ) {
                    unset($accesses[$key]);
                }
            }
        }

        return $accesses;
    }

    /**
     * アクセス権を追加する
     *
     * @param $object_id   int  アクセス制御するオブジェクトID
     * @param $target_type int  アクセス制御するターゲットの種類
     * @param $target_id   int  アクセス制御するターゲットID
     * @param $authorities array キーに権限名、値に権限値を持つ連想配列
     */
    function addAccess($object_id, $target_type, $target_id, $authorities)
    {
        if (is_null($object_id) || 0 == strlen($object_id)) {
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_ACCESS_INVALID_OBJECT_ID);
        }

        if (is_null($target_type) || 0 == strlen($target_type)) {
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_ACCESS_INVALID_TARGET_TYPE);
        }

        if (is_null($target_id) || 0 == strlen($target_id)) {
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_ACCESS_INVALID_TARGET_ID);
        }

        if (is_null($authorities)) {
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_ACCESS_AUTHORITY_NOT_FOUND);
        }

        // オブジェクトテーブル行を取得する
        $object =& $this->getObject($object_id);
        $target =& $this->_getTarget($target_type, $target_id);

        $table_name = $this->_getTableName($object, $target);

        $table_info =& $this->_getTableInfo($table_name);
        $row =& $table_info->newRow();
        $row->set('object', $object);
        $row->set('target', $target);
        foreach ($authorities as $key => $value) {
            $row->set('authority_' . $key, intval($value));
        }
        $row->registerNow();
    }

    /**
     * アクセス権を削除する
     *
     * @param $object_id int  アクセス制御するオブジェクトID
     * @param $access    array
     *
     * @return boolean  TRUEのときは正常終了、FALSEのときは失敗
     */
    function deleteAccess($object_id, $access)
    {
        if (is_null($object_id) || 0 == strlen($object_id)) {
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_ACCESS_INVALID_OBJECT_ID);
        }

        if ( ! is_array($access) || 0 == count($access)) {
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_ACCESS_INFORMATION_NOT_FOUND);
        }

        // オブジェクトテーブル行を取得する
        $object =& $this->getObject($object_id);

        $row =& $this->_getRow($object, $access['type'], $access['id']);
        if ( ! is_null($row)) {
            $row->delete();
        }
    }

    /**
     * アクセス権の一覧を削除する
     *
     * @param $object_id int アクセス制御するオブジェクトID
     * @param $accesses  array  下記をキーに持つ連想配列を持つ配列
     *                   id int  アクセス権ID
     *                   oid int  アクセス制御するオブジェクトID
     *                   tid int  アクセス制御するターゲットID
     *                   type string  アクセス制御するターゲットの種類
     *                   data array  キーに権限名、値に権限値を持つ連想配列
     */
    function deleteAccesses($object_id, $accesses)
    {
        if (is_null($object_id) || 0 == strlen($object_id)) {
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_ACCESS_INVALID_OBJECT_ID);
        }

        if ( ! is_array($accesses)) {
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_ACCESS_INFOMATION_NOT_FOUND);
        }

        if (0 == count($accesses)) {
            return;
        }

        // アクセス制御するオブジェクトを取得する
        $object =& $this->getObject($object_id);

        // アクセス権のデータ構造を変換する
        $accesses_list = [];
        foreach ($accesses as $access) {
            if ( ! is_array($access) || 0 == count($access)) {
                require_once('portal/error_code.csp');
                cb_throw_error(E_GRN_PRTL_ACCESS_INFORMATION_NOT_FOUND);
            }

            $target_type = $access['type'];
            $access_id = $access['id'];

            if ( ! array_key_exists($target_type, $accesses_list)) {
                $accesses_list[$target_type] = [];
            }
            $accesses_list[$target_type][] = $access_id;
        }

        $target_tables =& $this->_target_tables;

        $object_id = strtolower(get_class($object));
        if (is_a($object, 'grn_access_abstractdata')) {
            $object_id = 'grn_access_abstractdata_'
                         . $object->get('unique_key');
        }
        $object_id = substr($object_id, 4);

        $rowset_list = [];
        foreach (array_keys($accesses_list) as $target_type) {
            $table_name = $this->_getTableName($object_id, $target_type, true);
            $table_info =& $this->_getTableInfo($table_name);
            //for escape!
            $db = $table_info->getDBConnection();
            $query = '';
            foreach ($accesses_list[$target_type] as $access_id) {
                $query .= '_id = \'' . $db->escape($access_id) . '\' OR ';
            }
            $query = substr($query, 0, -4);

            $rowset = new CB_RowSet($table_info);
            $rowset->addCondition($query);
            while ( ! is_null($row = $rowset->iterate())) {
                $row->delete();
            }
        }
    }

    /**
     * デフォルトのセキュリティモデルを取得する
     *
     * @param GRN_Access_Base $object アクセス権オブジェクト
     *
     * @return \CB_Row|int|mixed
     */
    function _getSecurityModel(& $object)
    {
        global $G_container_app;
        $policy = $G_container_app->getInstance('common_policy');

        $security_model = $object->get('security_model');

        if ('revoke' == $policy->getPolicy($this->_module_id,
                'security_model')
        ) {
            if (is_null($security_model)) {
                return GRN_PRTL_SECURITY_MODEL_TYPE_REVOKE;
            }
        }

        return $security_model;
    }

    /**
     * セキュリティ・モデルを取得する
     *
     * @param $object_id int  アクセス制御するオブジェクトID
     *
     * @return string
     */
    function getSecurityModel($object_id)
    {
        if (is_null($object_id) || 0 == strlen($object_id)) {
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_ACCESS_INVALID_OBJECT_ID);
        }

        $object =& $this->getObject($object_id);
        $security_model = $this->_getSecurityModel($object);

        return (GRN_PRTL_SECURITY_MODEL_TYPE_GRANT == $security_model) ? 'grant'
            : 'revoke';
    }

    /**
     * セキュリティ・モデルを変更する
     * アクセス権はすべて削除する
     *
     * @param int    $object_id      アクセス制御するオブジェクトID
     * @param string $security_model セキュリティ・モデル
     */
    function setSecurityModel($object_id, $security_model)
    {
        if (is_null($object_id) || 0 == strlen($object_id)) {
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_ACCESS_INVALID_OBJECT_ID);
        }

        if ( ! is_string($security_model) || 0 == strlen($security_model)) {
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_ACCESS_INVALID_SECURITY_MODEL);
        }

        $old_security_model = $this->getSecurityModel($object_id);
        if ($old_security_model != $security_model) {
            if ('grant' == $security_model) {
                $security_model = GRN_PRTL_SECURITY_MODEL_TYPE_GRANT;
            } elseif ('revoke' == $security_model) {
                $security_model = GRN_PRTL_SECURITY_MODEL_TYPE_REVOKE;
            } else {
                require_once('portal/error_code.csp');
                cb_throw_error(E_GRN_PRTL_ACCESS_INVALID_SECURITY_MODEL);
            }

            $object =& $this->getObject($object_id);
            $object->set('security_model', intval($security_model));
            $accesses = $this->getAccesses($object_id);

            $this->deleteAccesses($object_id, $accesses);
        }
    }

    /**
     * 削除フラグが立っているユーザーを省くために、tab_cb_userをJOINする
     *
     * @param         $rowset
     * @param CB_User $target     アクセス権のターゲットオブジェクト、もしくはターゲットタイプ
     * @param string  $table_name テーブル名、もしくはそのエイリアス名
     *
     * @access private
     */
    function _addUserJoin(& $rowset, & $target, $table_name)
    {
        if ((is_object($target) && is_a($target, 'cb_user'))
            || (is_string($target) && strcasecmp($target, 'user') === 0)
        ) {
            $user_table_info = $this->_getTableInfo('cb_user');
            $on = CB_DATABASE_TABLE_PREFIX . $table_name
                  . '.col_target = u._id '
                  . 'AND u.col_deleted IS NULL';
            $rowset->addJoin($user_table_info, $on, CB_DATABASE_INNER_JOIN,
                'u');
        }
    }

}

class GRN_Portal_SystemPortalAccessLogic extends GRN_Portal_AccessLogic
{
    /**
     * コンストラクタ
     */
    function __construct()
    {
        $this->_module_id = 'portal.system';
    }

    private static $_instance = null;

    /**
     * @return GRN_Portal_SystemPortalAccessLogic
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * アクセス制御するオブジェクトを取得する
     *
     * @param $object_id int  アクセス制御するオブジェクトID
     *
     * @return GRN_Access_Base
     */
    function &getObject($object_id)
    {
        if (is_null($object_id) || 0 == strlen($object_id)) {
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_ACCESS_INVALID_OBJECT_ID);
        }

        require_once('portal/portal_logic.csp');

        // システムポータルを取得する
        $logic = GRN_Portal_SystemPortalLogic::getInstance();
        $object = $logic->get($object_id);

        $ret = $object->getRow();

        return $ret;
    }

    /**
     *
     *
     * @param  $object
     * @param  $is_throw      boolean
     * @param  $user_id       int
     *
     * @return boolean
     */
    function evaluateAccess(& $object, $is_throw = true, $user_id = null)
    {
        global $G_container_base;
        $uum =& $G_container_base->getInstance('uum');
        $login_user =& $uum->getLoginUser();

        $granted_roles = [];
        if (is_null($user_id) || $user_id == $login_user->getOID()) {
            $user =& $login_user;
            $granted_roles = $uum->listGrantedRoles();
        } else {
            $user =& $uum->getUser($user_id);
            /** Set Everyone Role **/
            $granted_roles['Everyone'] = 1;
        }

        if ( ! is_object($user) || ! is_a($user, 'cb_user')) {
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_ACCESS_INVALID_USER_ID);
        }
        $row = $object->getRow();
        $retval = $this->_evaluateAccess($user, $granted_roles, $row,
            ['browse']);
        if ($is_throw && ! $retval) {
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_ACCESS_DENY);
        }

        return $retval;
    }

    /**
     *
     *
     * @param $objects       array
     * @param $user_id       int
     *
     * @return array
     */
    function evaluateAccesses($objects, $user_id = null)
    {
        if ( ! is_array($objects)) {
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_ACCESS_INVALID_OBJECT);
        }
        if (0 === count($objects)) {
            return [];
        }

        global $G_container_base;
        $uum =& $G_container_base->getInstance('uum');
        $login_user =& $uum->getLoginUser();

        $granted_roles = [];
        if (is_null($user_id) || $user_id == $login_user->getOID()) {
            $user =& $login_user;
            $granted_roles = $uum->listGrantedRoles();
        } else {
            $user =& $uum->getUser($user_id);

            /** Set Everyone Role **/
            $granted_roles['Everyone'] = 1;
        }

        if ( ! is_object($user) || ! is_a($user, 'cb_user')) {
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_ACCESS_INVALID_USER_ID);
        }

        $rows = [];
        foreach (array_keys($objects) as $object_id) {
            $rows[$object_id] =& $objects[$object_id]->getRow();
        }

        $rows = $this->_getAllowMultiObjects($user, $granted_roles, $rows,
            ['browse']);

        foreach (array_keys($objects) as $object_id) {
            if ( ! array_key_exists($object_id, $rows)) {
                unset($objects[$object_id]);
            }
        }

        return $objects;
    }

    /**
     * アクセス権を追加する
     *
     * @param $object_id   int  アクセス制御するオブジェクトID
     * @param $target_type int  アクセス制御するターゲットの種類
     * @param $target_id   int  アクセス制御するターゲットID
     * @param $authorities array キーに権限名、値に権限値を持つ連想配列
     */
    function addAccess($object_id, $target_type, $target_id, $authorities)
    {
        //Call Parent Method
        parent::addAccess($object_id, $target_type, $target_id, $authorities);

        //Check Inspection Message Enabled
        require_once('portal/inspection.csp');
        $inspection = GRN_Portal_System_Portal_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            //Get Portal Name
            require_once('portal/portal_logic.csp');
            $system_portallogic = GRN_Portal_SystemPortalLogic::getInstance();
            $portal =& $system_portallogic->get($object_id);
            $portal_name = $portal->get('name');

            //Get UUM Instance
            global $G_container_base;
            $uum =& $G_container_base->getInstance('uum');

            //Get Target Name and ID
            switch ($target_type) {
                case GRN_PRTL_TARGET_TYPE_USER:
                    $id_name = 'uid';
                    $id_value = $target_id;
                    $user =& $uum->getUser($target_id);
                    $target_name = $user->get('display_name');
                    break;
                case GRN_PRTL_TARGET_TYPE_GROUP:
                    $id_name = 'gid';
                    $id_value = $target_id;
                    $group =& $uum->getGroup($target_id);
                    $target_name = $group->get('name');
                    break;
                case GRN_PRTL_TARGET_TYPE_STATIC_ROLE:
                    $id_name = 'rid';
                    $id_value = $target_id;
                    $role =& $uum->getStaticRole($target_id);
                    $target_name = $role->get('foreign_key');
                    break;
                case GRN_PRTL_TARGET_TYPE_DYNAMIC_ROLE:
                    $id_name = 'dynamic_role';
                    $id_value = $target_id;
                    $target_name = $target_id;
                    break;
                default:
                    $id_name = '';
                    $id_value = '';
                    $target_name = '';
                    break;
            }

            //Write Inspection Message
            $message_type = 'portal_access_add';
            $message_args = [
                'pid'         => $object_id,
                $id_name      => $id_value,
                'portal_name' => $portal_name,
            ];
            $inspection->record($message_type, $message_args);
        }

        return;
    }

    /**
     * アクセス権の一覧を削除する
     *
     * @param $object_id int アクセス制御するオブジェクトID
     * @param $accesses  array  下記をキーに持つ連想配列を持つ配列
     *                   id int  アクセス権ID
     *                   oid int  アクセス制御するオブジェクトID
     *                   tid int  アクセス制御するターゲットID
     *                   type string  アクセス制御するターゲットの種類
     *                   data array  キーに権限名、値に権限値を持つ連想配列
     */
    function deleteAccesses($object_id, $accesses)
    {
        //Call Parent Method
        parent::deleteAccesses($object_id, $accesses);

        //Check Inspection Message Enabled
        require_once('portal/inspection.csp');
        $inspection = GRN_Portal_System_Portal_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            //Get System Portlet Logic Instance
            require_once('portal/portal_logic.csp');
            $system_portallogic = GRN_Portal_SystemPortalLogic::getInstance();

            //Get UUM Instance
            global $G_container_base;
            $uum =& $G_container_base->getInstance('uum');

            //Get Access Infomation
            foreach ($accesses as $access) {
                //Get Portal Name
                $portal =& $system_portallogic->get($access['oid']);
                $portal_name = $portal->get('name');

                //Get Target Name and ID
                switch ($access['type']) {
                    case GRN_PRTL_TARGET_TYPE_USER:
                        $id_name = 'uid';
                        $id_value = $access['tid'];
                        $user =& $uum->getUser($access['tid']);
                        $target_name = $user->get('display_name');
                        break;
                    case GRN_PRTL_TARGET_TYPE_GROUP:
                        $id_name = 'gid';
                        $id_value = $access['tid'];
                        $group =& $uum->getGroup($access['tid']);
                        $target_name = $group->get('name');
                        break;
                    case GRN_PRTL_TARGET_TYPE_STATIC_ROLE:
                        $id_name = 'rid';
                        $id_value = $access['tid'];
                        $role =& $uum->getStaticRole($access['tid']);
                        $target_name = $role->get('foreign_key');
                        break;
                    case GRN_PRTL_TARGET_TYPE_DYNAMIC_ROLE:
                        $id_name = 'dynamic_role';
                        $id_value = $access['tid'];
                        $target_name = $access['tid'];
                        break;
                    default:
                        $id_name = '';
                        $id_value = '';
                        $target_name = '';
                        break;
                }

                //Write Inspection Message
                $message_type = 'portal_access_delete';
                $message_args = [
                    'pid'         => $access['oid'],
                    $id_name      => $id_value,
                    'portal_name' => $portal_name,
                ];
                $inspection->record($message_type, $message_args);
            }
        }

        return;
    }

    /**
     * セキュリティ・モデルを変更する
     * アクセス権はすべて削除する
     *
     * @param int    $object_id      アクセス制御するオブジェクトID
     * @param string $security_model セキュリティ・モデル
     */
    function setSecurityModel($object_id, $security_model)
    {
        //Call Parent Method
        parent::setSecurityModel($object_id, $security_model);

        //Check Inspection Message Enabled
        require_once('portal/inspection.csp');
        $inspection = GRN_Portal_System_Portal_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            //Get Portal Name
            require_once('portal/portal_logic.csp');
            $system_portallogic = GRN_Portal_SystemPortalLogic::getInstance();
            $portal =& $system_portallogic->get($object_id);
            $portal_name = $portal->get('name');

            //Write Inspection Message
            $message_type = 'portal_access_model';
            $message_args = [
                'pid'            => $object_id,
                'portal_name'    => $portal_name,
                'security_model' => $security_model,
            ];
            $inspection->record($message_type, $message_args);
        }

        return;
    }
}

class GRN_Portal_MyPortalAccessLogic extends GRN_Portal_AccessLogic
{
    /**
     * コンストラクタ
     */
    function __construct()
    {
        $this->_module_id = 'portal.my';
    }

    /**
     * @return GRN_Portal_MyPortalAccessLogic
     */
    public static function getInstance()
    {
        require_once('portal/portal_logic.csp');

        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Portal_MyPortalAccessLogic();
        }

        return $_instance;
    }

    /**
     * アクセス制御するオブジェクトを取得する
     *
     * @param $object_id int  アクセス制御するオブジェクトID
     *
     * @return object GRN_Access_Base
     */
    function &getObject($object_id = null)
    {
        require_once('grn/access_logic.csp');

        $query = null;
        if (is_null($object_id)) {
            $query = "col_unique_key ='" . GRN_PRTL_MY_PORTAL . "'";
        }

        // 抽象データを取得する
        $logic = GRN_Access_AbstractDataLogic::getInstance();
        $object = $logic->get($object_id, $query);

        return $object;
    }

    /**
     *
     *
     * @param  $is_throw boolean
     * @param  $user_id  int
     *
     * @return boolean
     */
    function evaluateAccess($is_throw = true, $user_id = null)
    {
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $login_user = $uum->getLoginUser();

        $granted_roles = [];
        if (is_null($user_id) || $user_id == $login_user->getOID()) {
            $user =& $login_user;
            $granted_roles = $uum->listGrantedRoles();
        } else {
            $user =& $uum->getUser($user_id);
            /** Set Everyone Role **/
            $granted_roles['Everyone'] = 1;
        }

        if ( ! is_object($user) || ! is_a($user, 'cb_user')) {
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_ACCESS_INVALID_USER_ID);
        }

        $object =& $this->getObject();
        $object_id = $object->getOID();

        $retval = $this->_evaluateAccess($user, $granted_roles, $object,
            ['use']);
        if ($is_throw && ! $retval) {
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_ACCESS_DENY);
        }

        return $retval;
    }

    /**
     * アクセス権を追加する
     *
     * @param $object_id   int  アクセス制御するオブジェクトID
     * @param $target_type int  アクセス制御するターゲットの種類
     * @param $target_id   int  アクセス制御するターゲットID
     * @param $authorities array キーに権限名、値に権限値を持つ連想配列
     */
    function addAccess($object_id, $target_type, $target_id, $authorities)
    {
        //Call Parent Method
        parent::addAccess($object_id, $target_type, $target_id, $authorities);

        //Check Inspection Message Enabled
        require_once('portal/inspection.csp');
        $inspection = GRN_Portal_System_Portal_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            //Get UUM Instance
            global $G_container_base;
            $uum =& $G_container_base->getInstance('uum');

            //Get Target Name and ID
            switch ($target_type) {
                case GRN_PRTL_TARGET_TYPE_USER:
                    $id_name = 'uid';
                    $id_value = $target_id;
                    $user =& $uum->getUser($target_id);
                    $target_name = $user->get('display_name');
                    break;
                case GRN_PRTL_TARGET_TYPE_GROUP:
                    $id_name = 'gid';
                    $id_value = $target_id;
                    $group =& $uum->getGroup($target_id);
                    $target_name = $group->get('name');
                    break;
                case GRN_PRTL_TARGET_TYPE_STATIC_ROLE:
                    $id_name = 'rid';
                    $id_value = $target_id;
                    $role =& $uum->getStaticRole($target_id);
                    $target_name = $role->get('foreign_key');
                    break;
                case GRN_PRTL_TARGET_TYPE_DYNAMIC_ROLE:
                    $id_name = 'dynamic_role';
                    $id_value = $target_id;
                    $target_name = $target_id;
                    break;
                default:
                    $id_name = '';
                    $id_value = '';
                    $target_name = '';
                    break;
            }

            //Write Inspection Message
            $message_type = 'my_portal_access_add';
            $message_args = [
                $id_name => $id_value,
            ];
            $inspection->record($message_type, $message_args);
        }

        return;
    }

    /**
     * アクセス権の一覧を削除する
     *
     * @param $object_id int アクセス制御するオブジェクトID
     * @param $accesses  array  下記をキーに持つ連想配列を持つ配列
     *                   id int  アクセス権ID
     *                   oid int  アクセス制御するオブジェクトID
     *                   tid int  アクセス制御するターゲットID
     *                   type string  アクセス制御するターゲットの種類
     *                   data array  キーに権限名、値に権限値を持つ連想配列
     */
    function deleteAccesses($object_id, $accesses)
    {
        //Call Parent Method
        parent::deleteAccesses($object_id, $accesses);

        //Check Inspection Message Enabled
        require_once('portal/inspection.csp');
        $inspection = GRN_Portal_System_Portal_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            //Get UUM Instance
            global $G_container_base;
            $uum =& $G_container_base->getInstance('uum');

            //Get Access Infomation
            foreach ($accesses as $access) {
                //Get Target Name and ID
                switch ($access['type']) {
                    case GRN_PRTL_TARGET_TYPE_USER:
                        $id_name = 'uid';
                        $id_value = $access['tid'];
                        $user =& $uum->getUser($access['tid']);
                        $target_name = $user->get('display_name');
                        break;
                    case GRN_PRTL_TARGET_TYPE_GROUP:
                        $id_name = 'gid';
                        $id_value = $access['tid'];
                        $group =& $uum->getGroup($access['tid']);
                        $target_name = $group->get('name');
                        break;
                    case GRN_PRTL_TARGET_TYPE_STATIC_ROLE:
                        $id_name = 'rid';
                        $id_value = $access['tid'];
                        $role =& $uum->getStaticRole($access['tid']);
                        $target_name = $role->get('foreign_key');
                        break;
                    case GRN_PRTL_TARGET_TYPE_DYNAMIC_ROLE:
                        $id_name = 'dynamic_role';
                        $id_value = $access['tid'];
                        $target_name = $access['tid'];
                        break;
                    default:
                        $id_name = '';
                        $id_value = '';
                        $target_name = '';
                        break;
                }

                //Write Inspection Message
                $message_type = 'my_portal_access_delete';
                $message_args = [
                    $id_name => $id_value,
                ];
                $inspection->record($message_type, $message_args);
            }
        }

        return;
    }

    /**
     * セキュリティ・モデルを変更する
     * アクセス権はすべて削除する
     *
     * @param int    $object_id      アクセス制御するオブジェクトID
     * @param string $security_model セキュリティ・モデル
     */
    function setSecurityModel($object_id, $security_model)
    {
        //Call Parent Method
        parent::setSecurityModel($object_id, $security_model);

        //Check Inspection Message Enabled
        require_once('portal/inspection.csp');
        $inspection = GRN_Portal_System_Portal_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            //Write Inspection Message
            $message_type = 'my_portal_access_model';
            $message_args = [
                'security_model' => $security_model,
            ];
            $inspection->record($message_type, $message_args);
        }

        return;
    }

}

class GRN_Portal_PortletLayoutAccessLogic extends GRN_Portal_AccessLogic
{
    /**
     * コンストラクタ
     */
    function __construct()
    {
        $this->_module_id = 'portlet.layout';
    }

    private static $_instance = null;

    /**
     * @return GRN_Portal_PortletLayoutAccessLogic
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * アクセス制御するオブジェクトを取得する
     *
     * @param $object_id int  アクセス制御するオブジェクトID
     *
     * @return object GRN_Access_Base or FALSE
     */
    function &getObject($object_id)
    {
        if (is_null($object_id) || 0 == strlen($object_id)) {
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_ACCESS_INVALID_OBJECT_ID);
        }

        require_once('portal/portlet_layout_logic.csp');

        // ポートレット配置情報を取得する
        $logic = GRN_Portal_PortletLayoutLogic::getInstance();
        $object = $logic->get($object_id);

        return $object;
    }

    /**
     *
     *
     * @param  $is_throw      boolean
     * @param  $is_throw      boolean
     * @param  $user_id       int
     *
     * @return boolean
     */
    function evaluateAccess(& $object, $is_throw = true, $user_id = null)
    {
        global $G_container_base;
        $uum =& $G_container_base->getInstance('uum');
        $login_user =& $uum->getLoginUser();

        $granted_roles = [];
        if (is_null($user_id) || $user_id == $login_user->getOID()) {
            $user =& $login_user;
            $granted_roles = $uum->listGrantedRoles();
        } else {
            $user =& $uum->getUser($user_id);
            /** Set Everyone Role **/
            $granted_roles['Everyone'] = 1;
        }

        if ( ! is_object($user) || ! is_a($user, 'cb_user')) {
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_ACCESS_INVALID_USER_ID);
        }

        $retval = $this->_evaluateAccess($user, $granted_roles, $object,
            ['browse']);
        if ($is_throw && ! $retval) {
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_ACCESS_DENY);
        }

        return $retval;
    }

    /**
     *
     *
     * @param $object_id     int
     * @param $user_id       int
     * @param array
     */
    function evaluateAccesses($object_id, $user_id = null)
    {
        if (is_null($object_id) || 0 == strlen($object_id)) {
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_ACCESS_INVALID_OBJECT_ID);
        }

        global $G_container_base;
        $uum =& $G_container_base->getInstance('uum');
        $login_user =& $uum->getLoginUser();

        $granted_roles = [];
        if (is_null($user_id) || $user_id == $login_user->getOID()) {
            $user =& $login_user;
            $granted_roles = $uum->listGrantedRoles();
        } else {
            $user =& $uum->getUser($user_id);

            /** Set Everyone Role **/
            $granted_roles['Everyone'] = 1;
        }

        if ( ! is_object($user) || ! is_a($user, 'cb_user')) {
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_ACCESS_INVALID_USER_ID);
        }

        require_once('portal/portlet_layout_logic.csp');

        $logic = GRN_Portal_PortletLayoutLogic::getInstance();
        $rows = $logic->getList($object_id);
        if (0 === count($rows)) {
            return [];
        }

        $rows = $this->_getAllowMultiObjects($user, $granted_roles, $rows,
            ['browse']);

        return array_keys($rows);
    }

    /**
     * アクセス権を追加する
     *
     * @param $layout_id   int  アクセス制御するオブジェクトID
     * @param $target_type int  アクセス制御するターゲットの種類
     * @param $target_id   int  アクセス制御するターゲットID
     * @param $authorities array キーに権限名、値に権限値を持つ連想配列
     */
    function addAccess($layout_id, $target_type, $target_id, $authorities)
    {
        //Call Parent Method
        parent::addAccess($layout_id, $target_type, $target_id, $authorities);

        //Check Inspection Message Enabled
        require_once('portal/inspection.csp');
        $inspection = GRN_Portal_System_Portal_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            //Get Layout Object
            require_once('portal/portlet_layout_logic.csp');
            $layout_logic = GRN_Portal_PortletLayoutLogic::getInstance();
            $layout =& $layout_logic->get($layout_id);

            //Get Portal Name
            $portal =& $layout->get(GRN_PRTL_PROPERTY_PORTAL);
            $portal_name = $portal->get('name');
            $portal_id = $portal->getOID();

            //Get Portlet Display Name
            $portlet =& $layout->get(GRN_PRTL_PROPERTY_PORTLET);
            $portlet_id = $portlet->getOID();
            $type = $portlet->get('type');
            if ($type === GRN_PRTL_PORTLET_TYPE_HTML
                || $type === GRN_PRTL_PORTLET_TYPE_PHP
            ) {
                require_once('portal/system_portlet_logic.csp');
                $system_portletlogic_base
                    = GRN_Portal_SystemPortletLogicBase::getInstance();
                $portlet_name
                    = $system_portletlogic_base->getDisplayName($portlet,
                    $layout);
            } else {
                require_once('portal/system_portlet_logic.csp');
                $embedded_portlet_logic
                    = GRN_Portal_SystemEmbeddedPortletLogic::getInstance();
                $portlet_name
                    = $embedded_portlet_logic->getDisplayName($portlet,
                    $layout);
            }

            //Get UUM Instance
            global $G_container_base;
            $uum =& $G_container_base->getInstance('uum');

            //Get Target Name and ID
            switch ($target_type) {
                case GRN_PRTL_TARGET_TYPE_USER:
                    $id_name = 'uid';
                    $id_value = $target_id;
                    $user =& $uum->getUser($target_id);
                    $target_name = $user->get('display_name');
                    break;
                case GRN_PRTL_TARGET_TYPE_GROUP:
                    $id_name = 'gid';
                    $id_value = $target_id;
                    $group =& $uum->getGroup($target_id);
                    $target_name = $group->get('name');
                    break;
                case GRN_PRTL_TARGET_TYPE_STATIC_ROLE:
                    $id_name = 'rid';
                    $id_value = $target_id;
                    $role =& $uum->getStaticRole($target_id);
                    $target_name = $role->get('foreign_key');
                    break;
                case GRN_PRTL_TARGET_TYPE_DYNAMIC_ROLE:
                    $id_name = 'dynamic_role';
                    $id_value = $target_id;
                    $target_name = $target_id;
                    break;
                default:
                    $id_name = '';
                    $id_value = '';
                    $target_name = '';
                    break;
            }

            //Write Inspection Message
            $message_type = 'portal_portlet_access_add';
            $message_args = [
                'pid'          => $portal_id,
                'plid'         => $layout_id,
                'ppid'         => $portlet_id,
                $id_name       => $id_value,
                'portal_name'  => $portal_name,
                'portlet_name' => $portlet_name,
            ];
            $inspection->record($message_type, $message_args);
        }

        return;
    }

    /**
     * アクセス権の一覧を削除する
     *
     * @param $object_id int アクセス制御するオブジェクトID
     * @param $accesses  array  下記をキーに持つ連想配列を持つ配列
     *                   id int  アクセス権ID
     *                   oid int  アクセス制御するオブジェクトID
     *                   tid int  アクセス制御するターゲットID
     *                   type string  アクセス制御するターゲットの種類
     *                   data array  キーに権限名、値に権限値を持つ連想配列
     */
    function deleteAccesses($layout_id, $accesses)
    {
        //Call Parent Method
        parent::deleteAccesses($layout_id, $accesses);

        //Check Inspection Message Enabled
        require_once('portal/inspection.csp');
        $inspection = GRN_Portal_System_Portal_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            //Get Layout Object
            require_once('portal/portlet_layout_logic.csp');
            $layout_logic = GRN_Portal_PortletLayoutLogic::getInstance();
            $layout =& $layout_logic->get($layout_id);

            //Get Portal Name
            $portal =& $layout->get(GRN_PRTL_PROPERTY_PORTAL);
            $portal_name = $portal->get('name');
            $portal_id = $portal->getOID();

            //Get Portlet Display Name
            $portlet =& $layout->get(GRN_PRTL_PROPERTY_PORTLET);
            $portlet_id = $portlet->getOID();
            $type = $portlet->get('type');
            if ($type === GRN_PRTL_PORTLET_TYPE_HTML
                || $type === GRN_PRTL_PORTLET_TYPE_PHP
            ) {
                require_once('portal/system_portlet_logic.csp');
                $system_portletlogic_base
                    = GRN_Portal_SystemPortletLogicBase::getInstance();
                $portlet_name
                    = $system_portletlogic_base->getDisplayName($portlet,
                    $layout);
            } else {
                require_once('portal/system_portlet_logic.csp');
                $embedded_portlet_logic
                    = GRN_Portal_SystemEmbeddedPortletLogic::getInstance();
                $portlet_name
                    = $embedded_portlet_logic->getDisplayName($portlet,
                    $layout);
            }

            //Get UUM Instance
            global $G_container_base;
            $uum =& $G_container_base->getInstance('uum');

            //Get Access Infomation
            foreach ($accesses as $access) {
                //Get Target Name and ID
                switch ($access['type']) {
                    case GRN_PRTL_TARGET_TYPE_USER:
                        $id_name = 'uid';
                        $id_value = $access['tid'];
                        $user =& $uum->getUser($access['tid']);
                        $target_name = $user->get('display_name');
                        break;
                    case GRN_PRTL_TARGET_TYPE_GROUP:
                        $id_name = 'gid';
                        $id_value = $access['tid'];
                        $group =& $uum->getGroup($access['tid']);
                        $target_name = $group->get('name');
                        break;
                    case GRN_PRTL_TARGET_TYPE_STATIC_ROLE:
                        $id_name = 'rid';
                        $id_value = $access['tid'];
                        $role =& $uum->getStaticRole($access['tid']);
                        $target_name = $role->get('foreign_key');
                        break;
                    case GRN_PRTL_TARGET_TYPE_DYNAMIC_ROLE:
                        $id_name = 'dynamic_role';
                        $id_value = $access['tid'];
                        $target_name = $access['tid'];
                        break;
                    default:
                        $id_name = '';
                        $id_value = '';
                        $target_name = '';
                        break;
                }

                //Write Inspection Message
                $message_type = 'portal_portlet_access_delete';
                $message_args = [
                    'pid'          => $portal_id,
                    'plid'         => $layout_id,
                    'ppid'         => $portlet_id,
                    $id_name       => $id_value,
                    'portal_name'  => $portal_name,
                    'portlet_name' => $portlet_name,
                ];
                $inspection->record($message_type, $message_args);
            }
        }

        return;
    }

    /**
     * セキュリティ・モデルを変更する
     * アクセス権はすべて削除する
     *
     * @param int    $layout_id      アクセス制御するオブジェクトID
     * @param string $security_model セキュリティ・モデル
     */
    function setSecurityModel($layout_id, $security_model)
    {
        //Call Parent Method
        parent::setSecurityModel($layout_id, $security_model);

        //Check Inspection Message Enabled
        require_once('portal/inspection.csp');
        $inspection = GRN_Portal_System_Portal_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            //Get Layout Object
            require_once('portal/portlet_layout_logic.csp');
            $layout_logic = GRN_Portal_PortletLayoutLogic::getInstance();
            $layout =& $layout_logic->get($layout_id);

            //Get Portal Name
            $portal =& $layout->get(GRN_PRTL_PROPERTY_PORTAL);
            $portal_name = $portal->get('name');
            $portal_id = $portal->getOID();

            //Get Portlet Display Name
            $portlet =& $layout->get(GRN_PRTL_PROPERTY_PORTLET);
            $portlet_id = $portlet->getOID();
            $type = $portlet->get('type');
            if ($type === GRN_PRTL_PORTLET_TYPE_HTML
                || $type === GRN_PRTL_PORTLET_TYPE_PHP
            ) {
                require_once('portal/system_portlet_logic.csp');
                $system_portletlogic_base
                    = GRN_Portal_SystemPortletLogicBase::getInstance();
                $portlet_name
                    = $system_portletlogic_base->getDisplayName($portlet,
                    $layout);
            } else {
                require_once('portal/system_portlet_logic.csp');
                $embedded_portlet_logic
                    = GRN_Portal_SystemEmbeddedPortletLogic::getInstance();
                $portlet_name
                    = $embedded_portlet_logic->getDisplayName($portlet,
                    $layout);
            }

            //Write Inspection Message
            $message_type = 'portal_portlet_access_model';
            $message_args = [
                'pid'            => $portal_id,
                'plid'           => $layout_id,
                'ppid'           => $portlet_id,
                'portal_name'    => $portal_name,
                'portlet_name'   => $portlet_name,
                'security_model' => $security_model,
            ];
            $inspection->record($message_type, $message_args);
        }

        return;
    }
}

class GRN_Access_AbstractData_Prtl_MyPortal_Base extends CB_PersistentBase
{
    var $col_authority_use = ['type' => 'int'];
    var $col_object = ['type' => 'relation', 'to' => 'grn_access_abstractdata'];
}

class GRN_Access_AbstractData_Prtl_MyPortal_User
    extends GRN_Access_AbstractData_Prtl_MyPortal_Base
{
    var $col_target = ['type' => 'relation', 'to' => 'cb_user'];
}

class GRN_Access_AbstractData_Prtl_MyPortal_Group
    extends GRN_Access_AbstractData_Prtl_MyPortal_Base
{
    var $col_target = ['type' => 'relation', 'to' => 'cb_group'];
}

class GRN_Access_AbstractData_Prtl_MyPortal_Dynamic_Role
    extends GRN_Access_AbstractData_Prtl_MyPortal_Base
{
    var $col_target = ['type' => 'char', 'length' => 100];
}

class GRN_Access_AbstractData_Prtl_MyPortal_Static_Role
    extends GRN_Access_AbstractData_Prtl_MyPortal_Base
{
    var $col_target = ['type' => 'relation', 'to' => 'cb_role'];
}

class GRN_Portal_Portal_Base extends CB_PersistentBase
{
    var $col_authority_browse = ['type' => 'int'];
    var $col_object = ['type' => 'relation', 'to' => 'grn_portal_portal'];
}

class GRN_Portal_Portal_User extends GRN_Portal_Portal_Base
{
    var $col_target = ['type' => 'relation', 'to' => 'cb_user'];
}

class GRN_Portal_Portal_Group extends GRN_Portal_Portal_Base
{
    var $col_target = ['type' => 'relation', 'to' => 'cb_group'];
}

class GRN_Portal_Portal_Dynamic_Role extends GRN_Portal_Portal_Base
{
    var $col_target = ['type' => 'char', 'length' => 100];
}

class GRN_Portal_Portal_Static_Role extends GRN_Portal_Portal_Base
{
    var $col_target = ['type' => 'relation', 'to' => 'cb_role'];
}

class GRN_Portal_PortletLayout_Base extends CB_PersistentBase
{
    var $col_authority_browse = ['type' => 'int'];
    var $col_object
        = [
            'type' => 'relation',
            'to'   => 'grn_portal_portletlayout'
        ];
}

class GRN_Portal_PortletLayout_User extends GRN_Portal_PortletLayout_Base
{
    var $col_target = ['type' => 'relation', 'to' => 'cb_user'];
}

class GRN_Portal_PortletLayout_Group extends GRN_Portal_PortletLayout_Base
{
    var $col_target = ['type' => 'relation', 'to' => 'cb_group'];
}

class GRN_Portal_PortletLayout_Dynamic_Role
    extends GRN_Portal_PortletLayout_Base
{
    var $col_target = ['type' => 'char', 'length' => 100];
}

class GRN_Portal_PortletLayout_Static_Role extends GRN_Portal_PortletLayout_Base
{
    var $col_target = ['type' => 'relation', 'to' => 'cb_role'];
}

class GRN_Portal_Portal_Manage_Base extends CB_PersistentBase
{
    var $col_authority_manage = ['type' => 'int'];
    var $col_object = ['type' => 'relation', 'to' => 'grn_portal_portal'];
}

class GRN_Portal_Portal_Manage_User extends GRN_Portal_Portal_Manage_Base
{
    var $col_target = ['type' => 'relation', 'to' => 'cb_user'];
}

class GRN_Portal_Portal_Manage_Group extends GRN_Portal_Portal_Manage_Base
{
    var $col_target = ['type' => 'relation', 'to' => 'cb_group'];
}

class GRN_Portal_Portal_Manage_Dynamic_Role
    extends GRN_Portal_Portal_Manage_Base
{
    var $col_target = ['type' => 'char', 'length' => 100];
}

class GRN_Portal_Portal_Manage_Static_Role extends GRN_Portal_Portal_Manage_Base
{
    var $col_target = ['type' => 'relation', 'to' => 'cb_role'];
}

class GRN_Portal_PortletGroup_Manage_Base extends CB_PersistentBase
{
    var $col_authority_manage = ['type' => 'int'];
    var $col_object = ['type' => 'relation', 'to' => 'grn_portal_portletgroup'];
}

class GRN_Portal_PortletGroup_Manage_User
    extends GRN_Portal_PortletGroup_Manage_Base
{
    var $col_target = ['type' => 'relation', 'to' => 'cb_user'];
}

class GRN_Portal_PortletGroup_Manage_Group
    extends GRN_Portal_PortletGroup_Manage_Base
{
    var $col_target = ['type' => 'relation', 'to' => 'cb_group'];
}

class GRN_Portal_PortletGroup_Manage_Dynamic_Role
    extends GRN_Portal_PortletGroup_Manage_Base
{
    var $col_target = ['type' => 'char', 'length' => 100];
}

class GRN_Portal_PortletGroup_Manage_Static_Role
    extends GRN_Portal_PortletGroup_Manage_Base
{
    var $col_target = ['type' => 'relation', 'to' => 'cb_role'];
}
