<?php

/**
 * My Portlet Logic
 *
 * @author  Yuichi, Nakamura 2004/11
 * @version 1.0
 * @package grn.portal
 */

//Portal Application
require_once('portal/resources.csp');

/**
 * My Portlet Logic Base Class
 *
 * @package grn.portal
 */
class GRN_Portal_MyPortletLogicBase
{
    //Portal Utility Instance
    var $_portal_utility = null;

    //Portlet Manager Instance
    var $_portlet_manager = null;

    //Portlet Group Manager Instance
    var $_portlet_group_manager = null;

    //Portlet File Manager Instance
    var $_portlet_file_manager = null;

    /**
     * Constructor
     *
     * @access private
     */
    function __construct()
    {

    }

    /** @var self */
    private static $_instance = null;

    /**
     * @return GRN_Portal_MyPortletLogicBase
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * @return CB_TableManager
     */
    function _getPortalUtility()
    {
        if (is_null($this->_portal_utility)) {
            $app_locator = GRN_ApplicationLocator::instance();
            $this->_portal_utility = $app_locator->getTableManager('portal');
        }

        return $this->_portal_utility;
    }

    /**
     * see: code/plugin/lwc/10portal_portlet_manager.ini
     *
     * @return GRN_Portal_AgentManagerTemplate $_portlet_manager
     */
    function _getPortletManager()
    {
        if (is_null($this->_portlet_manager)) {
            require_once('portal/logic.csp');
            global $G_container_app;
            $this->_portlet_manager
                = $G_container_app->getInstance(GRN_PRTL_LWC_ID_PORTLET_MANAGER);
        }

        return $this->_portlet_manager;
    }

    /**
     * Get Portlet Group Manager Instance
     * see: code/plugin/lwc/10portal_portal_portletgroup_manager.ini
     *
     * @return GRN_Portal_AgentManagerTemplate
     */
    function _getPortletGroupManager()
    {
        if (is_null($this->_portlet_group_manager)) {
            require_once('portal/logic.csp');
            global $G_container_app;
            $this->_portlet_group_manager
                = $G_container_app->getInstance(GRN_PRTL_LWC_ID_PORTLETGROUP_MANAGER);
        }

        return $this->_portlet_group_manager;
    }

    //Common Portlet Logic Base Methods

    /**
     * Get Portlet
     *
     * @access  public
     *
     * @param  int $portlet_id //Portlet ID
     *
     * @return object $portlet                   //Portlet Object
     */
    function &get($portlet_id)
    {
        //Check Arguments
        require_once('fw/string_util.csp');
        require_once('portal/error_code.csp');
        cb_trim_check($portlet_id, E_GRN_PRTL_PORTLET_INVALID_ID);  //portlet id

        //Get Portlet List
        $portlet_list = $this->getList();

        //Get Portlet Object
        if ( ! array_key_exists($portlet_id, $portlet_list)) {
            //Portlet Not Found
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_PORTLET_NOT_FOUND);
        }
        $portlet =& $portlet_list[$portlet_id];

        //Return Portlet Object
        return $portlet;
    }

    /**
     * Get Portlet List
     *
     * @access  public
     * @return GRN_Portal_PortalAgent[]|GRN_Portal_PortletAgent[]|GRN_Portal_PortletGroupAgent[]
     */
    function &getList()
    {
        //Get My Portlet Owner
        $owner = $this->_getOwner();

        //Get Portlet Object
        $portlet_manager = $this->_getPortletManager();
        $portlet_list = $portlet_manager->getList($owner);
        if ( ! is_array($portlet_list)) {
            //Portlet List Not Found
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_PORTLET_LIST_NOT_FOUND);
        }

        //Return Portlet List
        return $portlet_list;
    }

    /**
     * Add New Portlet
     *
     * @access  public
     *
     * @param  string $portlet_name    //Portlet Name
     * @param  string $portlet_type    //Portlet Type
     * @param  int    $group_id        //Portlet Group ID
     * @param  string $portlet_version //Portlet Version
     * @param  string $portlet_source  //Portlet source, use only for html portlet
     * @param  int    $portlet_editor  //Portlet editor, use only for html portlet
     *
     * @return object $portlet                   //New Portlet Object
     */
    function add(
        $portlet_name,
        $portlet_type,
        $group_id,
        $portlet_version,
        $portlet_source = '',
        $portlet_editor = 0
    ) {
        //Check Arguments
        require_once('fw/string_util.csp');
        require_once('portal/error_code.csp');
        cb_trim_check($portlet_name,
            E_GRN_PRTL_PORTLET_NOT_INPUT_NECESSARY);  //portlet name
        cb_trim_check($portlet_type,
            E_GRN_PRTL_PORTLET_NOT_INPUT_NECESSARY);  //portlet type
        cb_trim_check($portlet_version,
            E_GRN_PRTL_PORTLET_NOT_INPUT_NECESSARY);  //portlet version

        //Get My Portlet Owner
        $owner = $this->_getOwner();
        $user_id = $owner->getOID();

        //Create New Portlet Object
        $portlet_manager = $this->_getPortletManager();
        $new_portlet = $portlet_manager->create($owner);

        //Get Portlet Group Object**/
        if (strlen($group_id) > 0) {
            $portlet_group_manager = $this->_getPortletGroupManager();
            $portlet_group_list = $portlet_group_manager->getList($owner);
            if ( ! $portlet_group_list) {
                //Portlet Group List Not Found
                require_once('portal/error_code.csp');
                cb_throw_error(E_GRN_PRTL_PORTLET_GROUP_LIST_NOT_FOUND);
            }

            //Modify Portlet Group
            $portlet_group = $portlet_group_list[$group_id];
            if ( ! $portlet_group) {
                //Portlet Group Not Found
                require_once('portal/error_code.csp');
                cb_throw_error(E_GRN_PRTL_PORTLET_GROUP_NOT_FOUND);
            }
            $portlet_group->addPortlet($new_portlet);
        }

        //Set My Portlet Properties
        $new_portlet->set(GRN_PRTL_PROPERTY_NAME,
            $portlet_name);            //Name
        $new_portlet->set(GRN_PRTL_PROPERTY_TYPE,
            $portlet_type);            //Type
        $new_portlet->set(GRN_PRTL_PROPERTY_VERSION,
            $portlet_version);      //Version
        $new_portlet->set(GRN_PRTL_PROPERTY_AVAILABLE_MYPORTAL,
            1);          //Available MyPortal

        // My html portlet properties
        if ($portlet_type == GRN_PRTL_PORTLET_TYPE_HTML) {
            $new_portlet->set(GRN_PRTL_PROPERTY_SOURCE, $portlet_source);
            $new_portlet->set(GRN_PRTL_PROPERTY_EDITOR, $portlet_editor);
        }

        //Set Creator Infomation
        $this->_setCreator($new_portlet);

        //Return New Portlet ID
        return $new_portlet;
    }

    /**
     * Modify Portlet
     *
     * @access  public
     *
     * @param  int    $portlet_id      //Portlet ID
     * @param  string $portlet_name    //Portlet Name
     * @param  int    $group_id        //Portlet Group ID
     * @param  string $portlet_version //Portlet Version
     *
     * @return object $portlet                   //Portlet Object
     */
    function modify($portlet_id, $portlet_name, $group_id, $portlet_version)
    {
        //Check Arguments
        require_once('fw/string_util.csp');
        require_once('portal/error_code.csp');
        cb_trim_check($portlet_id,
            E_GRN_PRTL_PORTLET_INVALID_ID);             //portlet id
        cb_trim_check($portlet_name,
            E_GRN_PRTL_PORTLET_NOT_INPUT_NECESSARY);    //portlet id
        cb_trim_check($portlet_version,
            E_GRN_PRTL_PORTLET_NOT_INPUT_NECESSARY);    //portlet id

        //Get My Portlet Owner
        $owner = $this->_getOwner();

        //Get Portlet Object
        $portlet = $this->get($portlet_id, $owner->getOID());

        //Get Portlet Group Object**/
        if (strlen($group_id) > 0) {
            $portlet_group_manager = $this->_getPortletGroupManager();
            $portlet_group_list = $portlet_group_manager->getList($owner);
            if ( ! $portlet_group_list) {
                //Portlet Group List Not Found
                require_once('portal/error_code.csp');
                cb_throw_error(E_GRN_PRTL_PORTLET_GROUP_LIST_NOT_FOUND);
            }

            //Modify Portlet Group
            $portlet_group = $portlet_group_list[$group_id];
            if ( ! $portlet_group) {
                //Portlet Group Not Found
                require_once('portal/error_code.csp');
                cb_throw_error(E_GRN_PRTL_PORTLET_GROUP_NOT_FOUND);
            }
            $portlet_group->addPortlet($portlet);
        } else {
            //Delete Portlet Group
            $portlet->deleteGroup();
        }

        //Set My Portlet Properties
        $portlet->set(GRN_PRTL_PROPERTY_NAME, $portlet_name);           //Name

        //Set Modofier Infomation
        $this->_setModifier($portlet);

        //Return Portlet Object
        return $portlet;
    }

    /**
     * Delete Portlet
     *
     * @access  public
     *
     * @param  int $portlet_id //Portlet ID
     */
    function delete($portlet_id)
    {
        //Check Arguments
        require_once('fw/string_util.csp');
        require_once('portal/error_code.csp');
        cb_trim_check($portlet_id,
            E_GRN_PRTL_PORTLET_INVALID_ID);             //portlet id

        //Get My Portlet Owner
        $owner =& $this->_getOwner();

        //Get Portlet Object
        $portlet =& $this->get($portlet_id, $owner->getOID());

        //Delete Portlet Object
        $portlet->delete();

        return;
    }

    /**
     * Change Portal Order
     *
     * @access  public
     *
     * @param  array $portlet_id_list //portlet id list
     */
    function changeOrder($portlet_id_list)
    {
        //Check Argument
        if ( ! is_array($portlet_id_list)) {
            return;
        }

        //Get My Portlet Owner
        $owner =& $this->_getOwner();

        //Change Portlet Order
        $portlet_manager =& $this->_getPortletManager();
        $portlet_manager->changeOrder($owner, $portlet_id_list);

        return;
    }

    /**
     * Change Portlet Open Status
     *
     * @access  public
     *
     * @param  int $layout_id //Layout ID
     */
    function changeOpenStatus($layout_id)
    {
        //Get Portlet layout Object
        require_once('portal/portlet_layout_logic.csp');
        $portlet_layout_logic = GRN_Portal_PortletLayoutLogic::getInstance();
        $layout =& $portlet_layout_logic->get($layout_id);
        if ( ! $layout) {
            //Portlet Layout Not Found
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_PORTLET_LAYOUT_NOT_FOUND);
        }

        //Change Portlet layout Oprn Status
        $layout_is_open = $layout->get(GRN_PRTL_PROPERTY_IS_OPEN);
        if ($layout_is_open === '1') {
            $layout_is_open = '0';
        } else {
            $layout_is_open = '1';
        }
        $layout->set(GRN_PRTL_PROPERTY_IS_OPEN, $layout_is_open);

        return;
    }

    /**
     * Change Portlet Display Name
     *
     * @access  public
     *
     * @param  int    $layout_id    //Layout ID
     * @param  string $display_name //display name
     *
     * @return GRN_Portal_PortletLayout $layout  //Layout Object
     */
    function changeDisplayName($layout_id, $display_name)
    {
        //Check Argument
        $display_name = cb_trim($display_name);

        //Get Portlet layout Object
        require_once('portal/portlet_layout_logic.csp');
        $portlet_layout_logic = GRN_Portal_PortletLayoutLogic::getInstance();
        $layout = $portlet_layout_logic->get($layout_id);
        if ( ! $layout) {
            //Portlet Layout Not Found
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_PORTLET_LAYOUT_NOT_FOUND);
        }

        //Change Portlet layout Oprn Status
        $layout->set(GRN_PRTL_PROPERTY_DISPLAY_NAME, $display_name);

        //Return Layout Object
        return $layout;
    }

    /**
     * Get Display Name
     *
     * @access  public
     *
     * @param  object $portlet //Portlet Object
     * @param  object $layout  //Layout Object
     *
     * @return string $display_name              //Display Name
     */
    function getDisplayName(&$portlet, &$layout)
    {
        $display_name = '';

        //Get Display Name From Layout Object
        if ($layout) {
            $display_name = $layout->get(GRN_PRTL_PROPERTY_DISPLAY_NAME);
        }

        if ( ! $display_name) {
            //Get Display Name From Portlet Name
            $display_name = $portlet->get(GRN_PRTL_PROPERTY_NAME);
        }

        //Return Portlet Display Name
        return $display_name;
    }

    //Portlet Logic Utility Methods

    /**
     * get Owner
     *
     * @access  private
     * @return CB_User $owner                     //Owner Object
     */
    function _getOwner()
    {
        //Get Login User
        global $G_container_base;
        $grn_uum = $G_container_base->getInstance('uum');
        $login_user = $grn_uum->getLoginUser();
        if ( ! $login_user) {
            //My Portlet Need Login
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_PORTLET_NEED_LOGIN);
        }

        //Return Login User**/
        return $login_user;
    }

    /**
     * Set Creator
     *
     * @access private
     *
     * @param  object $object //Target Object
     *
     * @return bool   $result                    //Result
     */
    function _setCreator($object)
    {
        //Check Argument
        if ( ! $object) {
            return false;
        }

        //Get Login User
        global $G_container_base;
        /** @var GRN_Uum $grn_uum */
        $grn_uum =& $G_container_base->getInstance('uum');
        $login_user =& $grn_uum->getLoginUser();

        //Get Create Time
        $ctime = new CB_TimeStamp();
        $ctime->unix_ts = time();

        //Set Create Infomation
        if ($login_user) {
            $login_user_name = $login_user->get(GRN_PRTL_PROPERTY_DISPLAY_NAME);
            $object->set(GRN_PRTL_PROPERTY_CREATOR,
                $login_user);               //Creator
            $object->set(GRN_PRTL_PROPERTY_MODIFIER,
                $login_user);              //Modifier
            $object->set(GRN_PRTL_PROPERTY_CREATOR_NAME,
                $login_user_name);     //Creator Name
            $object->set(GRN_PRTL_PROPERTY_MODIFIER_NAME,
                $login_user_name);    //Modifier Name
        }
        $object->set(GRN_PRTL_PROPERTY_CTIME, $ctime);  //Create Time
        $object->set(GRN_PRTL_PROPERTY_MTIME, $ctime);  //Modify Time

        return true;
    }

    /**
     * Set Modofier
     *
     * @access private
     *
     * @param  object $object //Target Object
     *
     * @return bool   $result                    //Result
     *
     */
    function _setModifier($object)
    {
        //Check Argument
        if ( ! $object) {
            return false;
        }

        //Get Login User
        global $G_container_base;
        /** @var GRN_Uum $grn_uum */
        $grn_uum =& $G_container_base->getInstance('uum');
        $login_user =& $grn_uum->getLoginUser();

        //Get Modofy Time
        $mtime = new CB_TimeStamp();
        $mtime->unix_ts = time();

        //Set Modify Infomation
        if ($login_user) {
            $login_user_name = $login_user->get(GRN_PRTL_PROPERTY_DISPLAY_NAME);
            $object->set(GRN_PRTL_PROPERTY_MODIFIER,
                $login_user);              //Modifier
            $object->set(GRN_PRTL_PROPERTY_MODIFIER_NAME,
                $login_user_name);    //Modifier Name

        }
        $object->set(GRN_PRTL_PROPERTY_MTIME, $mtime);  //Modify Time

        return true;
    }
}

;

/**
 * My HTML Portlet Logic Class
 *
 * @package grn.portal
 */
class GRN_Portal_MyHTMLPortletLogic extends GRN_Portal_MyPortletLogicBase
{
    /**
     * Constructor
     *
     * @access private
     */
    function __construct()
    {

    }

    /** @var GRN_Portal_MyHTMLPortletLogic */
    private static $_instance = null;

    /**
     * @return GRN_Portal_MyHTMLPortletLogic
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    //My HTML Portlet Logic Methods

    /**
     * Get My HTML Portlet List
     *
     * @access  public
     *
     * @param  none
     *
     * @return mixed  $my_html_portlet_list      //My HTML Portlet List
     */
    function &getList()
    {
        $my_html_portlet_list = [];

        //Get My Portlet List
        $portlet_list = &parent::getList();
        if ($portlet_list) {
            foreach (array_keys($portlet_list) as $portlet_id) {
                $portlet_type
                    = $portlet_list[$portlet_id]->get(GRN_PRTL_PROPERTY_TYPE);
                if ($portlet_type === GRN_PRTL_PORTLET_TYPE_HTML) {
                    $my_html_portlet_list = $my_html_portlet_list
                                            + [$portlet_id => $portlet_list[$portlet_id]];
                }

            }
        }

        return $my_html_portlet_list;
    }

    /**
     * Add New My HTML Portlet
     *
     * @access  public
     *
     * @param  string $portlet_name    //Portlet Name
     * @param  string $portlet_type    //Portlet type
     * @param  int    $group_id        //Group ID
     * @param  string $portlet_version //Portlet version
     * @param  string $portlet_source  //Portlet Source
     * @param  int    $portlet_editor  //Use Portlet Editor Flag
     *
     * @return object $portlet                   //New Portlet Object
     */
    function add(
        $portlet_name,
        $portlet_type,
        $group_id,
        $portlet_version,
        $portlet_source = '',
        $portlet_editor = 0
    ) {
        //Check Arguments
        if (strlen($portlet_source) <= 0) {
            //Not Input Necessary Item**/
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_PORTLET_NOT_INPUT_NECESSARY);
        }

        //Create System Portlet
        $new_portlet = parent::add($portlet_name, $portlet_type, $group_id,
            $portlet_version, $portlet_source, $portlet_editor);

        //Set My HTML Portlet Properties
        $new_portlet->set(GRN_PRTL_PROPERTY_VIEW_TEMPLATE,
            GRN_PRTL_PORTLET_VIEW_HTML);

        //Return New Portlet
        return $new_portlet;
    }

    /**
     * Modify System HTML Portlet
     *
     * @access  public
     *
     * @param  int    $portlet_id     //Portlet ID
     * @param  string $portlet_name   //Portlet Name
     * @param  int    $group_id       //Portlet Group ID
     * @param  string $portlet_source //Portlet Source
     * @param  int    $portlet_editor //Use Portlet Editor Flag
     *
     * @return object $Portlet                   //Portlet Object
     */
    function modify(
        $portlet_id,
        $portlet_name,
        $group_id,
        $portlet_source,
        $portlet_editor = 0
    ) {
        //Check Arguments
        if (strlen($portlet_source) <= 0) {
            //Not Input Necessary Item**/
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_PORTLET_NOT_INPUT_NECESSARY);
        }

        //Modify System Portlet
        $portlet = parent::modify($portlet_id, $portlet_name, $group_id,
            GRN_PRTL_PORTLET_VERSION_HTML);

        //Set Mt HTML Portlet Properties
        $portlet->set(GRN_PRTL_PROPERTY_VIEW_TEMPLATE,
            GRN_PRTL_PORTLET_VIEW_HTML);
        $portlet->set(GRN_PRTL_PROPERTY_SOURCE, $portlet_source);
        $portlet->set(GRN_PRTL_PROPERTY_EDITOR, $portlet_editor);

        //Return Portlet
        return $portlet;
    }

    /**
     * Attach RichEditor File To My HTML Portlet
     *
     * @access  private
     *
     * @param  int   $portlet_id   //Portlet ID
     * @param  array $file_id_list //RichEditor File ID List
     */
    function addFileList($portlet_id, $file_id_list)
    {
        //Check Arguments
        require_once('fw/string_util.csp');
        require_once('portal/error_code.csp');
        cb_trim_check($portlet_id,
            E_GRN_PRTL_PORTLET_INVALID_ID);             //portlet id

        //Create Document ID
        $doc_id = GRN_PRTL_PORTLET_TYPE_HTML . '.' . $portlet_id;

        //Commit File List
        require_once('grn/re_file.csp');
        global $G_container_base;
        $file_binder = $G_container_base->getInstance('re_file_binder');
        $file_binder->commitFiles($file_id_list, $doc_id);

        return;
    }

    /**
     * Delete RichEditor File From My HTML Portlet
     *
     * @access  private
     *
     * @param  int $portlet_id //Portlet ID
     */
    function deleteFileList($portlet_id)
    {
        //Check Arguments
        require_once('fw/string_util.csp');
        require_once('portal/error_code.csp');
        cb_trim_check($portlet_id,
            E_GRN_PRTL_PORTLET_INVALID_ID);             //portlet id

        //Create Document ID
        $doc_id = GRN_PRTL_PORTLET_TYPE_HTML . '.' . $portlet_id;

        //Delete File List
        require_once('grn/re_file.csp');
        global $G_container_base;
        $file_binder = $G_container_base->getInstance('re_file_binder');
        $file_binder->deleteFiles($doc_id);

        return;
    }

    /**
     * Import All My HTML Portlet
     *
     * @access  private
     *
     * @param  array $file //Portlet File
     *
     * @return mixed  $portlet_list              //Imported Portlet List
     */
    function importMulti($file)
    {
        $portlet_list = [];

        //Get My Portlet Owner
        $owner =& parent::_getOwner();

        //Check Import Portlet File Exists
        if ( ! file_exists($file['tmp_name'])) {
            //Portlet Invald Reed File
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_PORTLET_INVALID_REED_FILE);
        }

        //Open Import Portlet File
        $xml_reader = new XMLReader();
        if ( ! $xml_reader->open($file['tmp_name'])) {
            //Portlet Invald Reed File
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_PORTLET_INVALID_REED_FILE);
        }

        //Read Portlet Infomation
        while (@$xml_reader->read()) {
            //Check HTML Portlet
            if (strcmp($xml_reader->name, 'html_portlet') === 0) {
                //Read Portlet Properties
                $node_name = '';
                $properties = [];
                $portlet_files = [];
                while ($xml_reader->read()
                       && strcmp($xml_reader->name, 'html_portlet') !== 0) {
                    $node_type = $xml_reader->nodeType;
                    switch ($node_type) {
                        case XMLReader::ELEMENT:
                            $node_name = $xml_reader->name;
                            $properties[$node_name] = '';
                            if ($node_name === GRN_PRTL_PROPERTY_FILES) {
                                if ($xml_reader->getAttribute('count')
                                    !== '0'
                                ) {
                                    //Import All Portlet Files
                                    $this->_importAllFile($portlet_files,
                                        $xml_reader);
                                }
                            }
                            break;
                        case XMLReader::TEXT:
                            $properties[$node_name] = $xml_reader->value;
                            break;
                        case XMLReader::CDATA:
                            $properties[$node_name] = $xml_reader->value;
                            break;
                        case XMLReader::END_ELEMENT:
                            $node_name = '';
                            break;
                    }
                }

                //Create New My HTML Portlet
                $portlet =& $this->add($properties[GRN_PRTL_PROPERTY_NAME],
                    GRN_PRTL_PORTLET_TYPE_HTML, '',
                    GRN_PRTL_PORTLET_VERSION_HTML,
                    $properties[GRN_PRTL_PROPERTY_SOURCE],
                    $properties[GRN_PRTL_PROPERTY_EDITOR]);

                //Get Portlet Source
                $portlet_source = $portlet->get(GRN_PRTL_PROPERTY_SOURCE);

                //Create Portlet Files
                $new_portlet_file_id_list = [];
                foreach (array_keys($portlet_files) as $portlet_file_id) {
                    //Check Temporary File Exists
                    if (file_exists($portlet_files[$portlet_file_id]['tmp_name'])) {
                        //Create Portlet File
                        require_once('grn/re_file.csp');
                        global $G_container_base;
                        $file_binder
                            = $G_container_base->getInstance('re_file_binder');
                        $new_portlet_file_id
                            = $file_binder->addFile($portlet_files[$portlet_file_id]);

                        //Replace Old File ID to NewPortlet File ID
                        $before = 'ofileid=' . $portlet_file_id;
                        $after = 'fileid=' . $new_portlet_file_id;
                        $replaced_source = mb_ereg_replace($before, $after,
                            $portlet_source);
                        $portlet_source = $replaced_source;

                        //Set New Portlet File ID List
                        $new_portlet_file_id_list[] = $new_portlet_file_id;
                    }
                }

                //Set New Portlet Files
                $this->addFileList($portlet->getOID(),
                    $new_portlet_file_id_list);

                //Set Replaced Source
                $portlet->set(GRN_PRTL_PROPERTY_SOURCE, $portlet_source);

                //Add Imported Portlet List
                $portlet_list[$portlet->getOID()] =& $portlet;
            }
        }

        //Close Import Portlet File
        $xml_reader->close();

        //Return Imported Portlet List
        return $portlet_list;
    }

    /**
     * Import All System HTML Portlet File
     *
     * @access  private
     *
     * @param  mixed  $portlet_files //Portlet Files
     * @param  object $xml_reader    //XML Reader Instance
     */
    function _importAllFile(& $portlet_files, & $xml_reader)
    {
        //Read Portlet File Infomation
        while ($xml_reader->read()
               && strcmp($xml_reader->name, 'files') !== 0) {
            //Check HTML Portlet File
            if (strcmp($xml_reader->name, 'file') === 0) {
                //Read Portlet File Properties
                $node_name = '';
                $properties[GRN_PRTL_PROPERTY_ID]
                    = $xml_reader->getAttribute(GRN_PRTL_PROPERTY_ID);
                while ($xml_reader->read()
                       && strcmp($xml_reader->name, 'file') !== 0) {
                    $node_type = $xml_reader->nodeType;
                    switch ($node_type) {
                        case XMLReader::ELEMENT:
                            $node_name = $xml_reader->name;
                            break;
                        case XMLReader::TEXT:
                            $properties[$node_name] = $xml_reader->value;
                            break;
                        case XMLReader::CDATA:
                            if ($node_name === GRN_PRTL_PROPERTY_DATA) {
                                //Get Portlet File Data
                                $portlet_file_encoded = $xml_reader->value;
                                $portlet_file_raw
                                    = base64_decode($portlet_file_encoded);

                                //Create Temporary File
                                $temporary_file_name = tempnam(cb_tmpdir(),
                                    'ptrl_');
                                $temporary_file_handle
                                    = fopen($temporary_file_name,
                                    'wb');
                                fwrite($temporary_file_handle,
                                    $portlet_file_raw);
                                fclose($temporary_file_handle);
                                $properties[$node_name] = $temporary_file_name;
                            } else {
                                $properties[$node_name] = $xml_reader->value;
                            }
                            break;
                        case XMLReader::END_ELEMENT:
                            $node_name = '';
                            break;
                    }
                }

                //Create Dummy $_FILES Data
                $portlet_file = [];
                $portlet_file['name']
                    = $properties[GRN_PRTL_PROPERTY_NAME];
                $portlet_file['type']
                    = $properties[GRN_PRTL_PROPERTY_MIME];
                $portlet_file['tmp_name']
                    = $properties[GRN_PRTL_PROPERTY_DATA];
                $portlet_file['error'] = 0;
                $portlet_file['size']
                    = filesize($properties[GRN_PRTL_PROPERTY_DATA]);
                $portlet_files[$properties[GRN_PRTL_PROPERTY_ID]]
                    = $portlet_file;
            }
        }

        return;
    }

    /**
     * Export My HTML Portlet Multiple
     *
     * @access  private
     *
     * @param  portlet_id_list //Export Portlet ID List
     *
     * @return array portlet_list    //Exported Portlet List
     */
    function exportMulti($portlet_id_list)
    {
        //Exported Portlet List
        $exported_portlet_list = [];

        //Define Export Portlet Infomation
        $export_properties = [
            GRN_PRTL_PROPERTY_NAME,
            //Portlet Name
            GRN_PRTL_PROPERTY_TYPE,
            //Portlet Type
            GRN_PRTL_PROPERTY_VERSION,
            //Portlet Version
            GRN_PRTL_PROPERTY_SOURCE,
            //Portlet Source
            GRN_PRTL_PROPERTY_AVAILABLE_MYPORTAL,
            //Available MyPortal Portlet
            GRN_PRTL_PROPERTY_EDITOR,
            //Use HTML Editor
        ];

        //Get My HTML Portlet List
        $portlet_list = $this->getList();

        //Open XML Document
        $xml_writer = new XMLWriter();
        $xml_writer->openURI('php://output');
        $xml_writer->setIndentString(' ');
        $xml_writer->setIndent(true);

        //Start XML Document
        $xml_writer->startDocument('1.0', 'UTF-8', 'yes');
        $xml_writer->startElement('html_portlets');

        //Export All My HTML Portlet
        foreach ($portlet_id_list as $portlet_id) {
            //Check Portlet Exists
            if ( ! array_key_exists($portlet_id, $portlet_list)) {
                //Skip Invalid Portlet ID
                continue;
            }

            //Start html_portlet Node
            $xml_writer->startElement('html_portlet');
            $xml_writer->writeAttribute('id', $portlet_id);

            //Export All Properties
            foreach ($export_properties as $export_property) {
                //Export Portlet Property
                $xml_writer->startElement($export_property);
                if ($export_property === GRN_PRTL_PROPERTY_NAME) {
                    $xml_writer->writeCDATA($portlet_list[$portlet_id]->get($export_property));
                } elseif ($export_property === GRN_PRTL_PROPERTY_SOURCE) {
                    $portlet_source
                        = $portlet_list[$portlet_id]->get($export_property);
                    $portlet_source_replaced = mb_ereg_replace('fileid=',
                        'ofileid=', $portlet_source);
                    $xml_writer->writeCDATA($portlet_source_replaced);
                } else {
                    $xml_writer->writeRaw($portlet_list[$portlet_id]->get($export_property));
                }
                $xml_writer->endElement();
            }

            //Export All Files
            $this->_exportAllFile($portlet_list[$portlet_id], $xml_writer);

            //End html_portlet Node
            $xml_writer->endElement();

            //Add Export Portlet List
            $exported_portlet_list[$portlet_id] =& $portlet_list[$portlet_id];
        }

        //End XML Document
        $xml_writer->endElement();
        $xml_writer->EndDocument();

        //Close XML Document
        $xml_writer->flush();

        //Return Exported Portlet List
        return $exported_portlet_list;
    }

    /**
     * Export All System HTML Portlet
     *
     * @param $portlet
     * @param $xml_writer
     */
    function _exportAllFile(& $portlet, & $xml_writer)
    {
        //Define Export Portlet FILE Infomation
        $export_properties = [
            GRN_PRTL_PROPERTY_NAME,                 //Portlet File Name
            GRN_PRTL_PROPERTY_MIME,                 //Portlet File MIME
            GRN_PRTL_PROPERTY_SIZE,                 //Portlet File Size
            GRN_PRTL_PROPERTY_CHARSET,              //Portlet File Charaset
            GRN_PRTL_PROPERTY_DATA,                 //Portlet File Data
        ];

        //Create Document ID
        $doc_id = GRN_PRTL_PORTLET_TYPE_HTML . '.' . $portlet->getOID();;

        //Get Portlet File List
        require_once('grn/re_file.csp');
        global $G_container_base;
        $file_binder = $G_container_base->getInstance('re_file_binder');

        // Check and get user logged in
        $login = cb_get_login_user();
        if ( ! is_object($login) || ! is_a($login, 'CB_User')) {
            cb_throw_error(E_GRN_USER_NOT_FOUND);
        }
        $login_id = $login->getOID();
        $portlet_file_list = $file_binder->getServerFileList($doc_id,
            $login_id);

        //Start files Node
        $xml_writer->startElement(GRN_PRTL_PROPERTY_FILES);
        $xml_writer->writeAttribute('count',
            count(array_keys($portlet_file_list)));


        //Export All Portlet Files
        foreach (array_keys($portlet_file_list) as $portlet_file_id) {
            //Start file Node
            $xml_writer->startElement(GRN_PRTL_PROPERTY_FILE);
            $xml_writer->writeAttribute(GRN_PRTL_PROPERTY_ID, $portlet_file_id);

            //Export All Properties
            foreach ($export_properties as $export_property) {
                //Export Portlet Property
                $xml_writer->startElement($export_property);
                if ($export_property === GRN_PRTL_PROPERTY_NAME) {
                    $xml_writer->writeCDATA($portlet_file_list[$portlet_file_id]->get($export_property));
                } elseif ($export_property === GRN_PRTL_PROPERTY_DATA) {
                    //Read Portlet File Data
                    $portlet_file_handle
                        =& $portlet_file_list[$portlet_file_id]->f_open('rb');
                    $portlet_file_size
                        = $portlet_file_list[$portlet_file_id]->get('size');
                    $portlet_file_raw = '';
                    while ( ! feof($portlet_file_handle)) {
                        $portlet_file_raw .= fread($portlet_file_handle,
                            $portlet_file_size);
                    }
                    fclose($portlet_file_handle);

                    //Base64 Encode
                    $portlet_file_encoded = base64_encode($portlet_file_raw);
                    $xml_writer->writeCDATA($portlet_file_encoded);
                } else {
                    $xml_writer->writeRaw($portlet_file_list[$portlet_file_id]->get($export_property));
                }
                $xml_writer->endElement();
            }
            //End file Node
            $xml_writer->endElement();
        }

        //End files Node
        $xml_writer->endElement();

        return;
    }
}

;


