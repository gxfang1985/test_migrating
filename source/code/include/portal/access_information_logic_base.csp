<?php
/**
 * Portal Application Access Logic Base Class
 *
 * @author  Yuichi, Nakamura 2005/5
 * @version 1.0
 * @package grn.link
 */

/** Portal Application **/
require_once('portal/access_logic.csp');
require_once('portal/resources.csp');

/**
 * Portal Access Logic Base Class
 *
 * @package grn.portal
 */
class GRN_Portal_Portal_Access_Information_Logic_Base
{
    //Portal Access Information Manager Instance
    var $_portal_access_information_manager_base = null;

    /**
     * Constructor
     *
     * @return void
     */
    function __construct()
    {

    }

    /**
     * Get Instance
     *
     * @return object $instance                  //Instance of GRN_Portal_Portal_Access_Information_Logic_Base
     */
    private static $_instance = null;

    /**
     * @return GRN_Portal_Portal_Access_Information_Logic_Base
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Portal Access Information Manager Base
     *
     * @return object $portal_access_information_manager_base    //Portal Access Information Manager Base
     */
    function _getPortalAccessInformationManagerBase()
    {
        if (is_null($this->_portal_access_information_manager_base)) {
            require_once('portal/access_information_manager_base.csp');
            $this->_portal_access_information_manager_base
                = GRN_Portal_Portal_Access_Information_Manager_Base::getInstance();
        }

        return $this->_portal_access_information_manager_base;
    }

    /**
     * Evaluate Portal
     *
     * @param  int $portal_id //Portal ID
     * @param  int $lock_mode //Lock Mode
     *
     * @return array  $access_list               //Evaluate Result Access List
     */
    function evaluatePortal($portal, $lock_mode = CB_DATABASE_DEFAULT_LOCK)
    {
        $portal_id = $portal['_id'];

        //Get UUM Instance
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');

        //Get Login User
        $login_user = $uum->getLoginUser();
        $login_user_id = $login_user->getOID();

        //Get Dynamic Role
        $dynamic_role_list = $uum->listGrantedRoles();

        //Get Access Information Manager
        $manager = $this->_getPortalAccessInformationManagerBase();

        //Check Access Cache
        $user_access_list = [];
        $evaluate_portal_list = [];
        $user_access_list[$portal_id] = $manager->getAccessCache($login_user_id,
            $portal_id);
        if ( ! $user_access_list[$portal_id]) {
            $evaluate_portal_list[$portal['_id']] = $portal;
            $evaluate_access_list
                = $manager->evaluatePortalList($evaluate_portal_list,
                $login_user, $dynamic_role_list, $lock_mode);
            $user_access_list
                = $evaluate_access_list[$login_user_id];
        }

        //Check Access Right
        foreach ($user_access_list[$portal['_id']] as $authority) {
            if ($authority != 1) {
                return false;
            }
        }

        return true;
    }

    /**
     * Evaluate Portal List
     *
     * @param  array $portal_list //Portal List
     * @param  int   $lock_mode   //Lock Mode
     *
     * @return array  $allow_portal_list         //Allow Portal List
     */
    function evaluatePortalList(
        $portal_list,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get UUM Instance
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');

        //Get Login User
        $login_user = $uum->getLoginUser();
        $login_user_id = $login_user->getOID();

        //Get Dynamic Role
        $dynamic_role_list = $uum->listGrantedRoles();

        //Get Access Information Manager
        $manager = $this->_getPortalAccessInformationManagerBase();

        //Check Access Cache
        $user_access_list = [];
        $evaluate_portal_list = [];
        foreach (array_keys($portal_list) as $portal_id) {
            $access = $manager->getAccessCache($login_user_id, $portal_id);

            if ( ! $access) {
                $evaluate_portal_list[$portal_id] =& $portal_list[$portal_id];
            } else {
                $user_access_list[$portal_id] = $access;
            }
        }

        //Evaluate No Cached Portal List
        if (count($evaluate_portal_list) !== 0) {
            $evaluate_access_list
                = $manager->evaluatePortalList($evaluate_portal_list,
                $login_user, $dynamic_role_list, $lock_mode);
            $user_access_list = $user_access_list
                                + $evaluate_access_list[$login_user_id];
        }

        //Check Access Right
        foreach (array_keys($portal_list) as $portal_id) {
            foreach ($user_access_list[$portal_id] as $authority) {
                if ($authority != 1) {
                    unset($portal_list[$portal_id]);
                }
            }
        }

        return $portal_list;
    }
}

/**
 * Portlet Layout Access Logic Base Class
 *
 * @package grn.portal
 */
class GRN_Portal_Portlet_Layout_Access_Information_Logic_Base
{
    //Portlet Layout Access Information Manager Instance
    var $_portlet_layout_access_information_manager_base = null;

    function __construct()
    {

    }

    /** @var  GRN_Portal_Portlet_Layout_Access_Information_Logic_Base */
    private static $_instance = null;

    /**
     * Get Instance
     *
     * @return GRN_Portal_Portlet_Layout_Access_Information_Logic_Base
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Portlert Layout Access Information Manager Base
     *
     * @return object $portlet_layout_access_information_manager_base    //Portlet Layout Access Information Manager Base
     */
    function _getPortletLayoutAccessInformationManagerBase()
    {
        if (is_null($this->_portlet_layout_access_information_manager_base)) {
            require_once('portal/access_information_manager_base.csp');
            $this->_portlet_layout_access_information_manager_base
                = GRN_Portal_Portlet_Layout_Access_Information_Manager_Base::getInstance();
        }

        return $this->_portlet_layout_access_information_manager_base;
    }

    /**
     * Evaluate Portlet Layout
     *
     * @param  int $portlet_layout //Portlet Layout
     * @param  int $lock_mode      //Lock Mode
     *
     * @return array  $access_list               //Evaluate Result Access List
     */
    function evaluatePortletLayout(
        $portlet_layout,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $portlet_layout_id = $portlet_layout['_id'];

        //Get UUM Instance
        global $G_container_base;
        $uum =& $G_container_base->getInstance('uum');

        //Get Login User
        $login_user =& $uum->getLoginUser();
        $login_user_id = $login_user->getOID();

        //Get Dynamic Role
        $dynamic_role_list = $uum->listGrantedRoles();

        //Get Access Information Manager
        $manager =& $this->_getPortletLayoutAccessInformationManagerBase();

        //Check Access Cache
        $user_access_list = [];
        $evaluate_portlet_layout_list = [];
        $user_access_list[$portlet_layout_id]
            = $manager->getAccessCache($login_user_id,
            $portlet_layout_id);
        if ( ! $user_access_list[$portlet_layout_id]) {
            $evaluate_portlet_layout_list[$portlet_layout['_id']]
                = $portlet_layout;
            $evaluate_access_list
                = $manager->evaluatePortletLayoutList($evaluate_portlet_layout_list,
                $login_user, $dynamic_role_list, $lock_mode);
            $user_access_list = $evaluate_access_list[$login_user_id];
        }

        //Check Access Right
        foreach ($user_access_list[$portlet_layout['_id']] as $authority) {
            if ($authority != 1) {
                return false;
            }
        }

        return true;
    }

    /**
     * Evaluate Portlet Layout List
     *
     * @param  array $portlet_Layout_list //Portlet Layout List
     * @param  int   $lock_mode           //Lock Mode
     *
     * @return array  $allow_portlet_layout_list //Allow Portlet layout List
     */
    function &evaluatePortletLayoutList(
        $portlet_layout_list,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        //Get UUM Instance
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');

        //Get Login User
        $login_user = $uum->getLoginUser();
        $login_user_id = $login_user->getOID();

        //Get Dynamic Role
        $dynamic_role_list = $uum->listGrantedRoles();

        //Get Access Information Manager
        $manager = $this->_getPortletLayoutAccessInformationManagerBase();

        //Check Access Cache
        $user_access_list = [];
        $evaluate_portlet_layout_list = [];
        foreach (array_keys($portlet_layout_list) as $portlet_layout_id) {
            $access = $manager->getAccessCache($login_user_id,
                $portlet_layout_id);

            if ( ! $access) {
                $evaluate_portlet_layout_list[$portlet_layout_id]
                    =& $portlet_layout_list[$portlet_layout_id];
            } else {
                $user_access_list[$portlet_layout_id] = $access;
            }
        }

        //Evaluate No Cached Portal List
        if (count($evaluate_portlet_layout_list) !== 0) {
            $evaluate_access_list
                = $manager->evaluatePortletLayoutList($evaluate_portlet_layout_list,
                $login_user, $dynamic_role_list, $lock_mode);
            $user_access_list = $user_access_list
                                + $evaluate_access_list[$login_user_id];
        }

        //Check Access Right
        foreach (array_keys($portlet_layout_list) as $portlet_layout_id) {
            foreach ($user_access_list[$portlet_layout_id] as $authority) {
                if ($authority != 1) {
                    unset($portlet_layout_list[$portlet_layout_id]);
                }
            }
        }

        return $portlet_layout_list;
    }
}

/**
 * Personal Portal Access Information Logic Base Class
 *
 * @package grn.portal
 */
class GRN_Portal_Personal_Portal_Access_Information_Logic_Base
{
    //Personal Portal Access Information Manager Instance
    var $_personal_portal_access_information_manager_base = null;

    /**
     * Constructor
     *
     * @return void
     */
    function __construct()
    {

    }

    /**
     * Get Instance
     *
     * @return object $instance                  //Instance of GRN_Portal_Personal_Portal_Access_Information_Logic_Base
     */
    private static $_instance = null;

    /**
     * @return GRN_Portal_Personal_Portal_Access_Information_Logic_Base
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Personal Portal Access Information Manager Base
     *
     * @return object $personal_portal_access_information_manager_base    //Personal Portal Access Information Manager Base
     */
    function _getPersonalPortalAccessInformationManagerBase()
    {
        if (is_null($this->_personal_portal_access_information_manager_base)) {
            require_once('portal/access_information_manager_base.csp');
            $this->_personal_portal_access_information_manager_base
                = GRN_Portal_Personal_Portal_Access_Information_Manager_Base::getInstance();
        }

        return $this->_personal_portal_access_information_manager_base;
    }

    /**
     * Evaluate Personal Portal
     *
     * @param  int $lock_mode //Lock Mode
     *
     * @return bool   $result                    //Evaluate Result Access Result
     */
    function evaluatePersonalPortal($lock_mode = CB_DATABASE_DEFAULT_LOCK)
    {
        //Get UUM Instance
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');

        //Get Login User
        $login_user = $uum->getLoginUser();
        $login_user_id = $login_user->getOID();

        //Get Dynamic Role
        $dynamic_role_list = $uum->listGrantedRoles();

        //Get Abstract Object
        require_once('grn/access_logic.csp');
        $query = "col_unique_key ='" . GRN_PRTL_MY_PORTAL . "'";
        $abstract_data_logic = GRN_Access_AbstractDataLogic::getInstance();
        $abstract = $abstract_data_logic->get(null, $query,
            CB_DATABASE_NO_LOCK);
        $abstract_id = $abstract->getOID();

        //Get Access Information Manager
        $manager = $this->_getPersonalPortalAccessInformationManagerBase();

        //Check Access Cache
        $user_access_list = [];
        $evaluate_personal_portal_list = [];
        $user_access_list[$abstract_id]
            = $manager->getAccessCache($login_user_id,
            $abstract_id);
        if ( ! $user_access_list[$abstract_id]) {
            $evaluate_access_list
                = $manager->evaluatePersonalPortal($login_user,
                $dynamic_role_list, $lock_mode);
            $user_access_list = $evaluate_access_list[$login_user_id];
        }

        //Check Access Right
        foreach ($user_access_list[$abstract_id] as $authority) {
            if ($authority != 1) {
                return false;
            }
        }

        return true;
    }
}




