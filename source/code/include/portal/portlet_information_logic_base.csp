<?php
/**
 * Portal Application Portlet Information Logic Base Class
 *
 * @author  Yuichi, Nakamura 2005/8
 * @version 1.0
 * @package grn.portlet
 */

/** Portal Application **/
require_once('portal/resources.csp');

/**
 * Portlet Information Logic Base Class
 *
 * @package grn.portlet
 */
class GRN_Portal_Portlet_Information_Logic_Base
{
    //Portlet Information Manager Instance
    var $_portlet_information_manager_base = null;

    /** Application Name List **/
    var $_app_name_list = [];

    /** Application Portlet Name List **/
    var $_app_portlet_name_list = [];

    /**
     * Constructor
     *
     * @return none
     */
    function __construct()
    {

    }

    /**
     * get Login User
     *
     * @access private
     * @return CB_User $login_user                //Login User
     */
    function _getLoginUser()
    {
        //Get UUM Instance
        global $G_container_base;
        $grn_uum = $G_container_base->getInstance('uum');

        //Get Login User
        $login_user = $grn_uum->getLoginUser();
        if ( ! $login_user) {
            $ret = false;

            return $ret;
        }

        //Return Login User
        return $login_user;
    }

    /**
     * Get Embedded Name View
     *
     * @param  string $portlet_type //Portlet Type
     *
     * @return string $portlet_name              //Portlet Name
     */
    function getApplicationPortletName($portlet_type)
    {
        //Get Target Portlet Type
        if ( ! array_key_exists($portlet_type, $this->_app_portlet_name_list)) {
            //Get Application Locator
            require_once('grn/application.csp');
            $app_locator = GRN_ApplicationLocator::instance();

            //Get Application Name
            $portlet_type_elements = explode('.', $portlet_type);
            if ( ! array_key_exists($portlet_type_elements[1],
                $this->_app_name_list)
            ) {
                $this->_app_name_list[$portlet_type_elements[1]]
                    = $app_locator->getName($portlet_type_elements[1]);
            }
            $app_name = $this->_app_name_list[$portlet_type_elements[1]];
            $app_module_id = $portlet_type_elements[0] . '.'
                             . $portlet_type_elements[1];

            //Get Display Portlet Display Name
            $this->_app_portlet_name_list[$portlet_type]
                = cb_plain_msg($app_module_id, $portlet_type,
                ['app_name' => $app_name]);
        }
        $display_name = $this->_app_portlet_name_list[$portlet_type];

        return $display_name;
    }
}

/**
 * System Portlet Information Logic Base Class
 *
 * @package grn.portlet
 */
class GRN_Portal_System_Portlet_Information_Logic_Base
    extends GRN_Portal_Portlet_Information_Logic_Base
{
    /**
     * Constructor
     */
    function __construct()
    {

    }


    /** @var self */
    private static $_instance = null;

    /**
     * @return GRN_Portal_System_Portlet_Information_Logic_Base
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Portlet Information Manager Base
     *
     * @return mixed Return {@link GRN_Portal_System_Portlet_Information_Manager_Base} object
     */
    function _getPortletInformationManagerBase()
    {
        if (is_null($this->_portlet_information_manager_base)) {
            require_once('portal/portlet_information_manager_base.csp');
            $this->_portlet_information_manager_base
                = GRN_Portal_System_Portlet_Information_Manager_Base::getInstance();
        }

        return $this->_portlet_information_manager_base;
    }

    /**
     * Get Portlet Information
     *
     * @param  int $portlet_id //Portlet ID
     * @param int  $lock_mode
     * @param bool $refresh
     *
     * @return int $portlet                   //Portlet Information
     */
    function &get(
        $portlet_id,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $refresh = false
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('portal/error_code.csp');
        cb_trim_check($portlet_id,
            E_GRN_PRTL_PORTLET_INVALID_ID);    //Portlet ID

        //Get Portlet Information
        $portlet_information_manager_base
            = $this->_getPortletInformationManagerBase();
        $portlet =& $portlet_information_manager_base->get($portlet_id,
            $lock_mode, $refresh);
        if ( ! $portlet) {
            //Portlet Not Found
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_PORTLET_NOT_FOUND);
        }

        //Return Portlet Information
        return $portlet;
    }

    /**
     * Get Portlet Information List
     *
     * @param int  $lock_mode //Lock Mode
     * @param bool $refresh   //Refresh Flag
     *
     * @return int $portlet_list              //Portlet Information List
     */
    function &getList($lock_mode = CB_DATABASE_DEFAULT_LOCK, $refresh = false)
    {
        //Get Portlet Information List
        $portlet_information_manager_base
            = $this->_getPortletInformationManagerBase();
        $portlet_list =& $portlet_information_manager_base->getList($lock_mode,
            $refresh);

        //Return Portlet Information List
        return $portlet_list;
    }
}

/**
 * System HTML Portlet Information Logic Base Class
 *
 * @package grn.portlet
 */
class GRN_Portal_System_HTML_Portlet_Information_Logic_Base
    extends GRN_Portal_System_Portlet_Information_Logic_Base
{
    /**
     * Constructor
     */
    function __construct()
    {

    }

    /** @var self */
    private static $_instance = null;

    /**
     * @return GRN_Portal_System_HTML_Portlet_Information_Logic_Base
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Portlet Information Manager Base
     *
     * @return mixed Return {@link GRN_Portal_System_HTML_Portlet_Information_Manager_Base} object
     */
    function _getPortletInformationManagerBase()
    {
        if (is_null($this->_portlet_information_manager_base)) {
            require_once('portal/portlet_information_manager_base.csp');
            $this->_portlet_information_manager_base
                = GRN_Portal_System_HTML_Portlet_Information_Manager_Base::getInstance();
        }

        return $this->_portlet_information_manager_base;
    }
}

/**
 * System PHP Portlet Information Logic Base Class
 *
 * @package grn.portlet
 */
class GRN_Portal_System_PHP_Portlet_Information_Logic_Base
    extends GRN_Portal_System_Portlet_Information_Logic_Base
{
    /**
     * Constructor
     */
    function __construct()
    {

    }

    /** @var self */
    private static $_instance = null;

    /**
     * @return GRN_Portal_System_PHP_Portlet_Information_Logic_Base
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Portlet Information Manager Base
     *
     * @return mixed Return {@link GRN_Portal_System_PHP_Portlet_Information_Manager_Base} object
     */
    function _getPortletInformationManagerBase()
    {
        if (is_null($this->_portlet_information_manager_base)) {
            require_once('portal/portlet_information_manager_base.csp');
            $this->_portlet_information_manager_base
                = GRN_Portal_System_PHP_Portlet_Information_Manager_Base::getInstance();
        }

        return $this->_portlet_information_manager_base;
    }
}

/**
 * System Embedded Portlet Information Logic Base Class
 *
 * @package grn.portlet
 */
class GRN_Portal_System_Embedded_Portlet_Information_Logic_Base
    extends GRN_Portal_System_Portlet_Information_Logic_Base
{
    /**
     * Constructor
     */
    function __construct()
    {

    }

    /** @var self */
    private static $_instance = null;

    /**
     * @return GRN_Portal_System_Embedded_Portlet_Information_Logic_Base
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Portlet Information Manager Base
     *
     * @return mixed {@link GRN_Portal_System_Embedded_Portlet_Information_Manager_Base} object
     */
    function _getPortletInformationManagerBase()
    {
        if (is_null($this->_portlet_information_manager_base)) {
            require_once('portal/portlet_information_manager_base.csp');
            $this->_portlet_information_manager_base
                = GRN_Portal_System_Embedded_Portlet_Information_Manager_Base::getInstance();
        }

        return $this->_portlet_information_manager_base;
    }

    /**
     * Register System Embedded Portlet
     *
     * @access  private
     */
    function register()
    {
        //Get Application Portlet List
        $portlet_list =& $this->getList(CB_DATABASE_NO_LOCK);

        //Get Application Instance
        require_once('grn/application.csp');
        $app_locator = GRN_ApplicationLocator::instance();
        $apps = $app_locator->getInstancesWithMethod('getPortletList',
            false);
        foreach (array_keys($apps) as $app_id) {
            //Get Application Portlet
            $app =& $apps[$app_id];
            $app_portlet_list = $app->getPortletList();
            foreach ($app_portlet_list as $app_portlet) {
                $status = 'register';
                $update_portlet_id = 0;
                foreach (array_keys($portlet_list) as $portlet_id) {
                    //Check Aplication Portlet Type
                    if ($app_portlet[GRN_PRTL_PROPERTY_TYPE]
                        == $portlet_list[$portlet_id]['col_type']
                    ) {
                        if ($app_portlet[GRN_PRTL_PROPERTY_VERSION]
                            == $portlet_list[$portlet_id]['col_version']
                        ) {
                            $status = 'unregister';
                            break;
                        } else {
                            $status = 'update';
                            $update_portlet_id = $portlet_id;
                            break;
                        }
                    }
                }

            }
        }

        return;
    }

}

/**
 * Personal Portlet Logic Base Class
 *
 * @package grn.portlet
 */
class GRN_Portal_Personal_Portlet_Information_Logic_Base
    extends GRN_Portal_Portlet_Information_Logic_Base
{
    /**
     * Constructor
     */
    function __construct()
    {

    }

    /** @var self */
    private static $_instance = null;

    /**
     * @return GRN_Portal_Personal_Portlet_Information_Logic_Base
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Portlet Information Manager Base
     *
     * @return  mixed Return {@link GRN_Portal_Personal_Portlet_Information_Manager_base} object
     */
    function _getPortletInformationManagerBase()
    {
        if (is_null($this->_portlet_information_manager_base)) {
            require_once('portal/portlet_information_manager_base.csp');
            $this->_portlet_information_manager_base
                = GRN_Portal_Personal_Portlet_Information_Manager_base::getInstance();
        }

        return $this->_portlet_information_manager_base;
    }

    /**
     * Get Portlet Information
     *
     * @param  int $portlet_id //Portlet ID
     * @param int  $lock_mode
     * @param bool $refresh
     *
     * @return int $portlet                   //Portlet Information
     */
    function &get(
        $portlet_id,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK,
        $refresh = false
    ) {
        //Check Argument
        require_once('fw/string_util.csp');
        require_once('portal/error_code.csp');
        cb_trim_check($portlet_id,
            E_GRN_PRTL_PORTLET_INVALID_ID);    //Portlet ID

        //Get Login User
        $login_user = $this->_getLoginUser();
        $login_user_id = $login_user->getOID();

        //Get Portlet Information
        $portlet_information_manager_base
            = $this->_getPortletInformationManagerBase();
        $portlet =& $portlet_information_manager_base->get($portlet_id,
            $login_user_id, $lock_mode, $refresh);
        if ( ! $portlet) {
            //Portlet Not Found
            require_once('portal/error_code.csp');
            cb_throw_error(E_GRN_PRTL_PORTLET_NOT_FOUND);
        }

        //Return Portlet Information
        return $portlet;
    }

    /**
     * Get Portlet Information List
     *
     * @param int  $lock_mode
     * @param bool $refresh
     *
     * @return int $portlet_list              //Portlet Information List
     */
    function &getList($lock_mode = CB_DATABASE_DEFAULT_LOCK, $refresh = false)
    {
        //Get Login User
        $login_user = $this->_getLoginUser();
        $login_user_id = $login_user->getOID();

        //Get Portlet Information List
        $portlet_information_manager_base
            = $this->_getPortletInformationManagerBase();
        $portlet_list
            =& $portlet_information_manager_base->getList($login_user_id,
            $lock_mode, $refresh);

        //Return Portlet Information List
        return $portlet_list;
    }
}

/**
 * Personal HTML  Portlet Information Logic Base Class
 *
 * @package grn.portlet
 */
class GRN_Portal_Personal_HTML_Portlet_Information_Logic_Base
    extends GRN_Portal_Personal_Portlet_Information_Logic_Base
{
    /**
     * Constructor
     */
    function __construct()
    {

    }

    /** @var self */
    private static $_instance = null;

    /**
     * @return GRN_Portal_Personal_HTML_Portlet_Information_Logic_Base
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get Portlet Information Manager Base
     *
     * @return mixed Return {@link GRN_Portal_Personal_HTML_Portlet_Information_Manager_Base} object
     */
    function _getPortletInformationManagerBase()
    {
        if (is_null($this->_portlet_information_manager_base)) {
            require_once('portal/portlet_information_manager_base.csp');
            $this->_portlet_information_manager_base
                = GRN_Portal_Personal_HTML_Portlet_Information_Manager_Base::getInstance();
        }

        return $this->_portlet_information_manager_base;
    }
}


