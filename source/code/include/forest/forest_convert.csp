<?php
declare(strict_types=1);

use grn\grn\Validate;
use grn\versionup\v7_11_1200\Updater as v7_11_1200_Updater;
use grn\versionup\v8_2_1300\Updater as v8_2_1300_Updater;
use grn\versionup\v18_5_0\Updater as v18_5_0_Updater;
use grn\versionup\v18_5_1\Updater as v18_5_1_Updater;
use grn\versionup\v18_8_0\Updater as v18_8_0_Updater;

class GRN_ForestForestConvert
{
    /**
     * @param array $input
     */
    public function run(array $input)
    {
        $this->prepare();

        $src_version = $this->getSrcVersion($input);

        $this->convertDataBeforeUpdating($src_version);
        $this->updateData($src_version);
        $this->convertDataAfterUpdating($src_version);
    }

    private function prepare()
    {
        global $G_state_set;
        $G_state_set->set('copyright_should_be_written', false);
        $G_state_set->set('html_should_be_closed', false);
        $G_state_set->set('error_page_type', 'plain');

        if (cb_is_onpremises()) {
            cb_throw_error('FW00043', null, null, null,
                ['page' => cb_get_pagename()]);
        }
    }

    /**
     * @param  array $input
     *
     * @return array
     */
    private function getSrcVersion(array $input)
    {
        $src_version = cb_at($input, 'src_version');
        if ( ! Validate::isVersionNumber($src_version)) {
            cb_throw_error('FW00043', null, null, null,
                ['page' => cb_get_pagename()]);
        }

        $list = explode('.', $src_version);

        return [
            'major' => $list[0],
            'minor' => $list[1],
            'patch' => $list[2]
        ];
    }

    /**
     * @param array $src_version
     */
    private function convertDataBeforeUpdating(array $src_version)
    {
        $this->removeForestSchemaVersionAttribute();
        $this->updateExternalSettingForOnPremisesToForest();
    }

    /**
     * see: GRB-18064
     */
    private function removeForestSchemaVersionAttribute()
    {
        $profile = cb_get_system_profile('grn.common.system');
        $profile->removeAttribute('forest_schema_version');
    }

    /**
     * @see GTM-3406, GTM-2580
     */
    private function updateExternalSettingForOnPremisesToForest()
    {
        $app_availability_service
            = new \grn\grn\access\service\AppAvailabilityService();
        $is_required_logging = false;
        $app_availability_service->initializeTheRemoteAccessRule($is_required_logging);
    }

    /**
     * @param array $src_version
     */
    private function updateData(array $src_version)
    {
        if ($src_version['major'] === '4' && $src_version['minor'] === '6') {
            $updater = new v7_11_1200_Updater();
            $updater->setCalledFromDotComConverter();
            $updater->runMiddleUpdateData();

            $updater = new v8_2_1300_Updater();
            $updater->setCalledFromDotComConverter();
            $updater->runMiddleUpdateData();

            $updater = new v18_5_0_Updater();
            $updater->setCalledFromDotComConverter();
            $updater->runMiddleUpdateData();

            $updater = new v18_5_1_Updater();
            $updater->setCalledFromDotComConverter();
            $updater->runMiddleUpdateData();

            $updater = new v18_8_0_Updater();
            $updater->setCalledFromDotComConverter();
            $updater->runMiddleUpdateData();
        }
    }

    /**
     * @param array $src_version
     */
    private function convertDataAfterUpdating(array $src_version)
    {
        // Adding portlets depends on grn\versionup\v8_2_1300\Updater->addLanguageZHTW
        $this->addMailwisePortlet();
        $this->addKintonePortlet();
    }

    private function addMailwisePortlet()
    {
        $insert_portlet_query
            = <<<'SQL'
INSERT INTO tab_grn_portal_portlet SET col_available_myportal = 1, col_creator = 1, col_creator_foreign_key = NULL, col_creator_name = 'Administrator', col_ctime = unix_timestamp(), col_editor = NULL, col_group = NULL, col_group_list_index = 0, col_list_index = 0, col_modifier = 1, col_modifier_foreign_key = NULL, col_modifier_name = 'Administrator', col_mtime = unix_timestamp(), col_name = 'Mailwise', col_set_template = NULL, col_source = '<table class="top_title" style=""> <tbody><tr> <td nowrap="nowrap"><strong><nobr><a class="" href="/m/" target="_blank">メールワイズ</a></nobr></strong></td> </tr> </tbody> </table> <div class="portal_frame"> <table class="list_column" style=""> <tr><td> <div class="mailwise_portlet_main" style="padding:4px;"></div> </td></tr> </table> </div> <script type="text/javascript"> document.open(); document.write( \'<script src="\' + (function(){ var linkTags = document.getElementsByTagName("link"); for(var i=0; i<linkTags.length; i++){ if(linkTags.item(i).href.match( /std/ )){ return linkTags.item(i).href.replace( /grn\\/html\\/std.css.*/, "cbmw5/" ); } } return ""; })() + \'portlet_compiled.js"></sc\'+\'ript>\'); document.close(); </script> <script type="text/javascript"> grn.mailwise.portlet.draw(); </script>', col_type = 'grn.portal.html', col_user = NULL, col_version = 1, col_view_template = 'portal/portlet/view_html.csp';
SQL;

        $lang_resource_map = [
            'ja'    => 'メールワイズ',
            'en'    => 'Mailwise',
            'zh'    => 'Mailwise',
            'zh-tw' => 'Mailwise',
        ];

        $this->addHtmlPortlet($insert_portlet_query, $lang_resource_map);
    }

    private function addKintonePortlet()
    {
        $insert_portlet_query
            = <<<'SQL'
        INSERT INTO `tab_grn_portal_portlet` SET `_id` = NULL, `col_available_myportal` = 1, `col_creator` = 1, `col_creator_foreign_key` = NULL, `col_creator_name` = 'Administrator', `col_ctime` = UNIX_TIMESTAMP(), `col_editor` = 0, `col_group` = NULL, `col_group_list_index` = 0, `col_list_index` = IFNULL(((SELECT MAX(col_list_index) FROM tab_grn_portal_portlet AS tmp1) +1), 1), `col_modifier` = 1, `col_modifier_foreign_key` = NULL, `col_modifier_name` = 'Administrator', `col_mtime` = UNIX_TIMESTAMP(), `col_name` = 'kintone updates', `col_reserve_blob1` = NULL, `col_reserve_blob2` = NULL, `col_reserve_blob3` = NULL, `col_reserve_int1` = NULL, `col_reserve_int2` = NULL, `col_reserve_int3` = NULL, `col_reserve_text1` = NULL, `col_reserve_text2` = NULL, `col_reserve_text3` = NULL, `col_set_template` = NULL, `col_source` = '<table class="top_title"> <tr><td><strong>kintone notifications</strong></td></tr> </table> <table class="list_column"> <tr> <td> <iframe src="/k/portlet/notifications" height="500" width="100%" style="border:0px;"> </iframe> </td> </tr> </table>', `col_type` = 'grn.portal.html', `col_user` = NULL, `col_version` = 1, `col_view_template` = 'portal/portlet/view_html.csp';
SQL;

        $lang_resource_map = [
            'ja'    => 'kintone 最新情報',
            'en'    => 'kintone updates',
            'zh'    => 'kintone 最新信息',
            'zh-tw' => 'kintone 最新資訊',
        ];

        $this->addHtmlPortlet($insert_portlet_query, $lang_resource_map);
    }

    /**
     * @param string $insert_portlet_query
     * @param array  $lang_resource_map
     */
    private function addHtmlPortlet(
        string $insert_portlet_query,
        array $lang_resource_map
    ) {
        $db = cb_get_master_db();

        $db->query($insert_portlet_query);

        $portlet_id = $db->get_insert_id();


        $update_list_index_query = $db->format(
            "UPDATE tab_grn_portal_portlet SET col_list_index = '@S' WHERE _id = '@S'",
            [$portlet_id, $portlet_id]
        );
        $db->query($update_list_index_query);


        foreach ($lang_resource_map as $lang => $resource) {
            $insert_localized_name_query = $db->format(
                "INSERT tab_grn_portal_portlet_local SET parent_id = '@S', language_id = (SELECT _id FROM tab_cb_language_status WHERE col_language = '@S'), col_name = '@S'",
                [$portlet_id, $lang, $resource]
            );

            $db->query($insert_localized_name_query);
        }
    }
}
