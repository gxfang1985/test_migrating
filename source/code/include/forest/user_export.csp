<?php

require_once('fw/csv.csp');
require_once('fw/i18n/system_config.csp');
require_once('fw/i18n/locale.csp');

/**
 * User export class on forest
 */
class GRN_ForestUserExport
{
    const CHARSET = 'UTF-8';
    const ADMINISTRATOR_SLASH_ID = 7532782697181632512;
    const ADMINISTRATOR_ID = '1';

    public function __construct()
    {
        global $G_container_base;
        $this->uum = $G_container_base->getInstance('uum');
    }

    public function main()
    {
        if ( ! defined('ON_FOREST')) {
            exit("Error: not forest mode");
        }

        $this->updateAdministratorSlashId();
        $this->export();
    }

    private function updateAdministratorSlashId()
    {
        $admin = $this->uum->getUser(GRN_UUM_ADMINISTRATION_USER);
        $admin->_setPrivately('slash', self::ADMINISTRATOR_SLASH_ID);
    }

    private function export()
    {
        $writer = new CB_CSVWriter(self::CHARSET, null);

        $allUsers = $this->uum->getUsers(0, -1, '_id');
        foreach ($allUsers as $user) {
            if ($user->getOID() == self::ADMINISTRATOR_ID) {
                continue;
            }
            $line = $this->getLine($user);
            $writer->writeLine($line);
        }
    }

    /**
     * @param CB_User $user
     *
     * @return string[]
     */
    private function getLine(CB_User $user)
    {
        $line = [];

        // 1. login name
        $foreignKey = $user->get('foreign_key');
        $line[] = $foreignKey;

        // 2. name
        if ($this->hasNickname($user)) {
            $line[] = $user->get('nickname');
        } else {
            $line[] = $user->get('display_name');
        }

        // 3. new login name
        $line[] = $foreignKey;

        // 4. password
        $line[] = '';

        // 5. valid
        $line[] = $this->uum->isActiveUser($user->getOID()) ? '1' : '0';

        // 6. family name
        $line[] = '';

        // 7. first name
        $line[] = '';

        // 8. middle name
        $line[] = '';

        $readings = $this->devideBySpace($user->get('sort_key'));

        // 9. family name reading
        $line[] = $readings[0];

        // 10. first name reading
        if (count($readings) === 2) {
            $line[] = cb_trim($readings[1]);
        } else {
            $line[] = '';
        }

        // 11. local name
        $localName = '';
        if ($this->hasNickname($user)) {
            $localName = $user->get('display_name');
        }
        $line[] = $localName;

        // 12. local name language
        $localNameLanguage = '';
        if ($this->hasNickname($user)) {
            $languageId = $user->get('display_name_language');
            if ( ! is_null($languageId)) {
                $localNameLanguage
                    = CB_LanguageManager::getLanguageCode($languageId);
            }
        }
        $line[] = $localNameLanguage;

        // 13. primary group
        $line[] = '';

        // 14. E-mail
        $line[] = $user->get('email_address');

        // 15. phone
        $line[] = $user->get('telephone_number');

        // 16. cellular mobile
        $line[] = '';

        // 17. office phone
        $line[] = '';

        // 18. SIP/Skype
        $line[] = '';

        // 19. URL
        $line[] = $user->get('url');

        // 20. employee number
        $line[] = '';

        // 21. employee date
        $line[] = '';

        // 22. birth date
        $line[] = '';

        // 23. order
        $line[] = $user->get('position');

        // 24. timezone
        $line[] = $user->get('timezone');

        // 25. locale
        $userLocaleSetting = CB_UserLocaleSetting::select($user->getOID());
        $line[] = ($userLocaleSetting)
            ? $userLocaleSetting->getLanguageCode() : "";

        // 26. memo
        $line[] = $user->get('description');

        // 27. password hash
        // 28. password salt
        $oldPassword = $user->get('reserve_blob1');
        if (is_null($oldPassword)) {
            // Garoon Password
            $line[] = $user->get('password');
            $line[] = $user->get('salt');
        } else {
            // Office Password
            $line[] = $oldPassword;
            $line[] = '';
        }

        // 29. slash id
        $line[] = $user->get('slash');

        return $line;
    }

    /**
     * @param string $string
     *
     * @return string
     */
    private function devideBySpace($string)
    {
        return mb_split("[\sã€€]", cb_trim($string), 2);
    }

    /**
     * @param CB_User $user
     *
     * @return bool
     */
    private function hasNickname(CB_User $user)
    {
        if (CB_I18N_SystemConfig::isNickname()
            && strlen($user->get('nickname')) > 0
        ) {
            return true;
        }

        return false;
    }
}
