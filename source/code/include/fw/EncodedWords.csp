<?php
declare(strict_types=1);

namespace grn\fw;

class EncodedWords
{
    /** @var EncodedWord[] */
    private $encoded_words = [];

    /**
     * EncodedWords constructor.
     *
     * @param array $input
     */
    public function __construct(array $input = [])
    {
        foreach ($input as $encoded_word_array) {
            ['charset' => $charset, 'encoding' => $encoding, 'text' => $text] = $encoded_word_array;
            $this->push(new EncodedWord($charset, $encoding, $text));
        }
    }


    /**
     * @param EncodedWord $encoded_word
     */
    public function push(EncodedWord $encoded_word): void
    {
        $count = count($this->encoded_words);
        if ($count === 0) {
            $this->encoded_words[] = $encoded_word;

            return;
        }
        $last_position = $count - 1;
        $last_word = $this->encoded_words[$last_position];
        if ($encoded_word->isSameEncode($last_word)) {
            $last_word->merge($encoded_word);
            $this->encoded_words[$last_position] = $last_word;

            return;
        }
        $this->encoded_words[] = $encoded_word;
    }

    /**
     * @param $encoding_order
     * @param $force_encoding
     *
     * @return string
     */
    public function encodeToInternalEncoding($encoding_order, $force_encoding): string
    {
        $result = '';
        foreach ($this->encoded_words as $word) {
            $result .= $word->encodeToInternalEncoding($encoding_order, $force_encoding);
        }

        return $result;
    }
}
