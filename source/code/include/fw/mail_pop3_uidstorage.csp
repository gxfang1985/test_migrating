<?php
require_once('fw/persistent.csp');
require_once('fw/transaction.csp');
define('CB_MAIL_COL_LEN', 60);

/**
 * Interface for UID storage
 *
 * @abstract
 * @package fw.mail
 */
class CB_MailPOP3UIDStorage implements CB_Transactional
{
    /**
     * Setup the storage for specific user.
     */
    function setup($host, $port, $user, $option)
    {
    }

    /**
     * Subtracts storage uids from maildrop uids and returns the result.
     * Also calculates intersection between storage uids and maildrop uids and sets it to the storage.
     *
     * @param $uids array of maildrop uid.
     */
    function getUnseens($uids)
    {
    }

    /**
     * Calculates union between storage uids and seen uids and sets it to the storage.
     *
     * @param $uids array of seen uid.
     */
    function addSeens($uids)
    {
    }

    function deleteSeens($uids)
    {
    }

    public function commit()
    {
        return true;
    }

    public function abort()
    {
        return true;
    }
}

class CB_MailPOP3UIDStorage_Disk extends CB_MailPOP3UIDStorage
{
    var $_host;
    var $_port;
    var $_user;
    var $_option;

    var $_dirpath;

    var $_level;

    var $_seensSrc;
    var $_seensCache;

    function boot()
    {
        $tm = CB_TransactionManager::getInstance();
        $tm->register(constant($this->_level), $this);
    }

    function setup($host, $port, $user, $option = 'user_key')
    {
        $this->_host = $host;
        $this->_port = $port;
        $this->_user = $user;
        $this->_option = $option;
        unset($this->_seensSrc);
        unset($this->_seensCache);
    }

    function getUnseens($uids)
    {
        if ( ! isset($this->_seensSrc)) {
            $this->_seensSrc = $this->_load();
            $this->_seensCache = $this->_seensSrc;
        }
        $this->_seensCache = array_intersect($uids, $this->_seensCache);

        return array_diff($uids, $this->_seensCache);
    }

    function addSeens($uids)
    {
        if ( ! isset($this->_seensSrc)) {
            $this->_seensSrc = $this->_load();
            $this->_seensCache = $this->_seensSrc;
        }
        $this->_seensCache = array_unique(array_merge($this->_seensCache,
            $uids));
    }

    function deleteSeens($uids)
    {
        if ( ! isset($this->_seensSrc)) {
            $this->_seensSrc = $this->_load();
            $this->_seensCache = $this->_seensSrc;
        }
        $this->_seensCache = array_diff($this->_seensCache, $uids);
    }

    function commit()
    {
        $this->_save($this->_seensCache);

        return true;
    }

    function abort()
    {
        return true;
    }

    function _load()
    {
        cb_mkdir($this->dirpath, 0700, false, true);
        $filename = "{$this->_dirpath}/{$this->_host}-{$this->_port}-"
                    . urlencode($this->_user) . urlencode($this->_option);
        if ( ! file_exists($filename)) {
            $ret = [];

            return $ret;
        }
        $data = file_get_contents($filename);
        $ret = explode("\n", $data);

        return $ret;
    }

    function _save($uids)
    {
        $data = implode("\n", $uids);

        cb_mkdir($this->dirpath, 0700, false, true);
        $filename = "{$this->_dirpath}/{$this->_host}-{$this->_port}-"
                    . urlencode($this->_user) . urlencode($this->_option);
        $fd = fopen($filename, 'w');
        if ($fd === false) {
            require_once('fw/error_code.csp');
            cb_throw_error(E_COMMON_FOPEN_WRITE, null, ['file' => $filename]);
        }
        if (fwrite($fd, $data) === false) {
            require_once('fw/error_code.csp');
            cb_throw_error(E_COMMON_TOO_SHORT_STORAGE, null,
                ['required' => strlen($data)],
                ['dir' => $this->dirpath]);
        }
        if (fclose($fd) === false) {
            require_once('fw/error_code.csp');
            cb_throw_error(E_COMMON_TOO_SHORT_STORAGE, null,
                ['required' => strlen($data)],
                ['dir' => $this->dirpath]);
        }
    }
}

class CB_MailPOP3UIDStorage_CyDE extends CB_MailPOP3UIDStorage
{
    var $_host;
    var $_port;
    var $_user;
    var $_option;

    var $_table;

    var $_level;

    var $_seensSrc;
    var $_seensCache;

    function boot()
    {
        $this->_table = cb_class2table('CB_MailPOP3UIDTable2');
        $tm = CB_TransactionManager::getInstance();
        $tm->register(constant($this->_level), $this);
    }

    function setup($host, $port, $user, $option = 'user_key')
    {
        $this->_host = $host;
        $this->_port = (int)$port;
        $this->_user = $user;
        $this->_option = $option;
        unset($this->_seensSrc);
        unset($this->_seensCache);
    }

    function getUnseens($uids)
    {
        if ( ! isset($this->_seensSrc)) {
            $this->_seensSrc = $this->_get();
            $this->_seensCache = $this->_seensSrc;
        }
        $this->_seensCache = array_intersect($uids, $this->_seensCache);

        return array_diff($uids, $this->_seensCache);
    }

    function addSeens($uids)
    {
        if ( ! isset($this->_seensSrc)) {
            $this->_seensSrc = $this->_get();
            $this->_seensCache = $this->_seensSrc;
        }
        $this->_seensCache = array_unique(array_merge($this->_seensCache,
            $uids));
    }

    function deleteSeens($uids)
    {
        if ( ! isset($this->_seensSrc)) {
            $this->_seensSrc = $this->_get();
            $this->_seensCache = $this->_seensSrc;
        }
        $this->_seensCache = array_diff($this->_seensCache, $uids);
    }

    function commit()
    {
        if ( ! isset($this->_seensSrc)) {
            $this->_seensSrc = [];
        }
        if ( ! isset($this->_seensCache)) {
            $this->_seensCache = [];
        }
        $this->_add(array_diff($this->_seensCache, $this->_seensSrc));
        $this->_delete(array_diff($this->_seensSrc, $this->_seensCache));
        unset($this->_seensSrc);
        unset($this->_seensCache);

        return true;
    }

    function abort()
    {
        unset($this->_seensSrc);
        unset($this->_seensCache);

        return true;
    }

    /**
     * @return array
     */
    function &_get()
    {
        $dbconn = $this->_table->getDBConnection();
        $query
            = "SELECT col_uid FROM tab_cb_mailpop3uidtable2 WHERE col_host = '@S' AND col_port = {$this->_port} AND col_user = '@S' AND col_option = '@S'";
        $query = cb_queryf($dbconn, $query, $this->_host, $this->_user,
            $this->_option);
        $query = $dbconn->select_format($query, 0, -1,
            CB_DATABASE_EXCLUSIVE_LOCK);
        $ret = $dbconn->query($query);
        if ($ret === false) {
            $dbconn->throwServerError($query);
        }

        $puids = [];
        while ($row = $dbconn->fetch_row($ret)) {
            $puids[] = $row[0];
        }

        $dbconn->free_result($ret);

        return $puids;
    }

    function _delete($uids)
    {
        if (count($uids)) {
            $dbconn = $this->_table->getDBConnection();
            $query
                = "DELETE FROM tab_cb_mailpop3uidtable2 WHERE col_host = '@S' AND col_port = {$this->_port} AND col_user = '@S' AND col_option = '@S' AND col_uid IN (";
            $query = cb_queryf($dbconn, $query, $this->_host,
                $this->_user,
                $this->_option);
            $escaped_uids = [];

            foreach ($uids as $uid) {
                $escaped_uids[] = cb_queryf($dbconn, "'@S'", $uid);
            }

            $query .= implode(',', $escaped_uids) . ');';
            $ret = $dbconn->query($query);
            if ($ret === false) {
                $dbconn->throwServerError($query);
            }
        }
    }

    function _add($uids)
    {
        if (count($uids) > 0) {
            $dbconn = $this->_table->getDBConnection();
            $query
                = "INSERT INTO tab_cb_mailpop3uidtable2 (col_host, col_port, col_user, col_uid, col_option) VALUES ";
            $values_clause = "('@S', {$this->_port}, '@S', '@S', '@S')";
            $values_list = [];

            foreach ($uids as $uid) {
                $values_list[] = cb_queryf($dbconn, $values_clause,
                    $this->_host,
                    $this->_user, $uid, $this->_option);
            }

            $query .= implode(',', $values_list) . ';';
            $ret = $dbconn->query($query);
            if ($ret === false) {
                $dbconn->throwServerError($query);
            }
        }
    }
}

/**
 * Table for pop3 message id
 *
 * @package fw.mail
 */
class CB_MailPOP3UIDTable2 extends CB_PersistentBase
{
    function __construct($row)
    {
        parent::__construct($row);
    }

    var $col_host
        = [
            'type'    => 'char',
            'length'  => CB_MAIL_COL_LEN,
            'notnull' => true
        ];
    var $col_port = ['type' => 'int', 'notnull' => true];
    var $col_user
        = [
            'type'    => 'char',
            'length'  => CB_MAIL_COL_LEN,
            'notnull' => true
        ];
    var $col_option
        = [
            'type'    => 'char',
            'length'  => CB_MAIL_COL_LEN,
            'notnull' => true
        ];
    var $col_uid = ['type' => 'char', 'notnull' => true];
    var $idx_h_p_u_o
        = [
            'cols'   => ['host', 'port', 'user', 'option'],
            'unique' => false
        ];
    var $idx_h_p_u_o_i
        = [
            'cols'   => ['host', 'port', 'user', 'option', 'uid'],
            'unique' => true
        ];
}


