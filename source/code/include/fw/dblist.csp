<?php

/**
 * Support list operations on database objects.
 *
 * @package fw.persistent
 */

require_once('fw/database.csp');

/**
 * Provide the fastest way to set list index on rows/objects of a table.
 *
 * @param array  $oid_list
 *  An array of object IDs that represents the order in a list.
 * @param string $column_name
 *  The column name that defines the order of rows in a list.
 * @param object CB_TableInfo $table_info
 *  An instance of CB_TableInfo where rows are found.
 * @param bool   $updateNow
 *  If <var>TRUE</var>, rows are updated immediately by using
 *  CB_Row::updateNow() method.  Default is <var>FALSE</var>.
 */
function cb_set_list_index(
    $oid_list,
    $column_name,
    $table_info,
    $updateNow = false
) {
    $i = 0;
    foreach ($oid_list as $oid) {
        $row = $table_info->getRow($oid);
        if ($row === false) {
            continue;
        }

        $i = $i + 1;
        $row->set($column_name, $i);

        if ($updateNow) {
            $row->updateNow();
        }
    }
}

/**
 * Provide interactive operations on lists of persistent rows/objects.
 *
 * @package fw.persistent
 */
class CB_RowList
{
    /**
     * @access private
     */
    var $_objs = [];

    /**
     * @access private
     */
    var $_index_column;

    function __construct($rowset, $index_column)
    {
        $rowset->addOrderColumn('col_' . $index_column);
        $this->_index_column = $index_column;

        while ( ! is_null($row = $rowset->iterate())) {
            $this->_objs[$row->getOID()] = clone $row;
        }
    }

    function moveHead($oid)
    {
        if ( ! array_key_exists($oid, $this->_objs)) {
            return false;
        }

        $row = $this->_objs[$oid];
        unset($this->_objs[$oid]);

        $this->_objs = [$oid => $row] + $this->_objs;
        $this->_save();

        return true;
    }

    function moveForward($oid)
    {
        if ( ! array_key_exists($oid, $this->_objs)) {
            return false;
        }

        $previous = null;
        $keys = array_keys($this->_objs);
        foreach ($keys as $key) {
            if (strcmp($oid, $key) == 0) {
                break;
            }
            $previous = $key;
        }

        if (is_null($previous)) {
            return;
        }

        $row = $this->_objs[$oid];
        $prev_row = $this->_objs[$previous];

        $objs = [];
        foreach ($keys as $key) {
            if (strcmp($key, $previous) == 0) {
                $objs[$oid] = $row;
                continue;
            }
            if (strcmp($key, $oid) == 0) {
                $objs[$previous] = $prev_row;
                continue;
            }
            $objs[$key] = $this->_objs[$key];
        }

        $this->_objs = $objs;
        $this->_save();

        return true;
    }

    function moveBackward($oid)
    {
        if ( ! array_key_exists($oid, $this->_objs)) {
            return false;
        }

        $next = null;
        $stop = false;
        $keys = array_keys($this->_objs);
        foreach ($keys as $key) {
            if ($stop) {
                $next = $key;
                break;
            }

            if (strcmp($oid, $key) == 0) {
                $stop = true;
            }
        }

        if (is_null($next)) {
            return;
        }

        $row = $this->_objs[$oid];
        $next_row = $this->_objs[$next];

        $objs = [];
        foreach ($keys as $key) {
            if (strcmp($key, $next) == 0) {
                $objs[$oid] = $row;
                continue;
            }
            if (strcmp($key, $oid) == 0) {
                $objs[$next] = $next_row;
                continue;
            }
            $objs[$key] = $this->_objs[$key];
        }

        $this->_objs = $objs;
        $this->_save();

        return true;
    }

    function moveTail($oid)
    {
        if ( ! array_key_exists($oid, $this->_objs)) {
            return false;
        }

        $row = $this->_objs[$oid];
        unset($this->_objs[$oid]);

        $this->_objs[$oid] = $row;
        $this->_save();

        return true;
    }

    function addTail($row)
    {
        $oid = $row->getOID();
        if (array_key_exists($oid, $this->_objs)) {
            unset($this->_objs[$oid]);
        }
        $this->_objs[$oid] = $row;
        $this->_save();
    }

    /**
     * @return array
     */
    function &getList()
    {
        return $this->_objs;
    }

    function clearList()
    {
        $this->_objs = [];
    }

    /**
     * @access private
     */
    function _save()
    {
        $lidx = 0;
        foreach (array_keys($this->_objs) as $key) {
            $obj = $this->_objs[$key];

            $lidx = $lidx + 1;
            $obj->set($this->_index_column, $lidx);
            $obj->updateNow();
        }
    }
}


