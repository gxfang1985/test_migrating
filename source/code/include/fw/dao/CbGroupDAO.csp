<?php

use grn\system\sandbox\SandboxConstants;

require_once('fw/database.csp');
require_once('fw/bean/CbGroup.csp');

class CbGroupDAO
{
    private $postfix = '';

    /**
     * @param int $sandbox
     */
    public function __construct($sandbox = SandboxConstants::NO_SANDBOX_MODE)
    {
        $this->postfix = ($sandbox === SandboxConstants::SANDBOX_MODE
            ? "_sandbox" : "");
    }

    /**
     * @param $inDataObj
     * @param $inGroupKey
     *
     * @return bool|CbGroup
     */
    public function selectByForeignKey($inDataObj, $inGroupKey)
    {
        /* @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj))
            ? $inDataObj['lock'] : null;
        $inLanguage = (array_key_exists('language', $inDataObj))
            ? $inDataObj['language'] : null;

        $p = $this->postfix;

        $query
            = "SELECT c._id, c.col_ctime, c.col_description, c.col_email_address, c.col_facsimile_number";
        $query = $query . ", c.col_foreign_key, c.col_list_index, c.col_mtime";
        $query = $query . ", IFNULL(cl.col_name, c.col_name) AS col_name";
        $query = $query
                 . ", c.col_parent, c.col_physical_address, c.col_reserve_blob1, c.col_reserve_blob2";
        $query = $query
                 . ", c.col_reserve_int1, c.col_reserve_int2, c.col_reserve_text1, c.col_reserve_text2";
        $query = $query
                 . ", c.col_room_number, c.col_telephone_number, c.col_url";
        $query = $query
                 . " FROM tab_cb_group{$p} c LEFT JOIN (tab_cb_group_local{$p} cl INNER JOIN tab_cb_language_status l ON cl.language_id = l._id AND l.col_language = '"
                 . $inDb->escape($inLanguage) . "') ON c._id = cl.parent_id";
        $query = $query . " WHERE c.col_foreign_key = '"
                 . $inDb->escape($inGroupKey) . "'";
        $query = $inDb->select_format($query, 0, -1, $inLock);

        $result = $inDb->query($query);

        if (($result === false) || ($inDb->num_rows($result) != 1)) {
            if ($result) {
                $inDb->free_result($result);
            }

            return false;
        }

        $rawdata = $inDb->fetch_assoc($result);
        $inDb->free_result($result);

        $cbGroup = new CbGroup($rawdata);

        return $cbGroup;
    }

    /**
     * @param $inDataObj
     * @param $inId
     *
     * @return bool|CbGroup
     */
    public function selectDefaultById($inDataObj, $inId)
    {
        /* @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj)) ? $inDataObj['lock']
            : null;

        $p = $this->postfix;

        $query
            = "SELECT c._id, c.col_ctime, c.col_description, c.col_email_address, c.col_facsimile_number";
        $query = $query . ", c.col_foreign_key, c.col_list_index, c.col_mtime";
        $query = $query . ", c.col_name";
        $query = $query
                 . ", c.col_parent, c.col_physical_address, c.col_reserve_blob1, c.col_reserve_blob2";
        $query = $query
                 . ", c.col_reserve_int1, c.col_reserve_int2, c.col_reserve_text1, c.col_reserve_text2";
        $query = $query
                 . ", c.col_room_number, c.col_telephone_number, c.col_url";
        $query = $query . " FROM tab_cb_group{$p} c";
        $query = $query . " WHERE c._id = '" . $inDb->escape($inId) . "'";
        $query = $inDb->select_format($query, 0, -1, $inLock);

        $result = $inDb->query($query);

        if (($result === false) || ($inDb->num_rows($result) != 1)) {
            if ($result) {
                $inDb->free_result($result);
            }

            return false;
        }

        $rawdata = $inDb->fetch_assoc($result);
        $inDb->free_result($result);

        $cbGroup = new CbGroup($rawdata);

        return $cbGroup;
    }

    /**
     * @param $inDataObj
     * @param $inId
     *
     * @return bool|CbGroup
     */
    public function selectLocalById($inDataObj, $inId)
    {
        /* @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj))
            ? $inDataObj['lock'] : null;
        $inLanguage = (array_key_exists('language', $inDataObj))
            ? $inDataObj['language'] : null;
        $p = $this->postfix;
        $query
            = "SELECT c._id, c.col_ctime, c.col_description, c.col_email_address, c.col_facsimile_number";
        $query = $query
                 . ", c.col_foreign_key, c.col_list_index, c.col_mtime";
        $query = $query . ", IFNULL(cl.col_name, c.col_name) AS col_name";
        $query = $query
                 . ", c.col_parent, c.col_physical_address, c.col_reserve_blob1, c.col_reserve_blob2";
        $query = $query
                 . ", c.col_reserve_int1, c.col_reserve_int2, c.col_reserve_text1, c.col_reserve_text2";
        $query = $query
                 . ", c.col_room_number, c.col_telephone_number, c.col_url";
        $query = $query
                 . " FROM tab_cb_group{$p} c LEFT JOIN (tab_cb_group_local{$p} cl INNER JOIN tab_cb_language_status l ON cl.language_id = l._id AND l.col_language = '"
                 . $inDb->escape($inLanguage)
                 . "') ON c._id = cl.parent_id";
        $query = $query . " WHERE c._id = '" . $inDb->escape($inId) . "'";
        $query = $inDb->select_format($query, 0, -1, $inLock);

        $result = $inDb->query($query);

        if (($result === false) || ($inDb->num_rows($result) != 1)) {
            if ($result) {
                $inDb->free_result($result);
            }

            return false;
        }

        $rawdata = $inDb->fetch_assoc($result);
        $inDb->free_result($result);

        $cbGroup = new CbGroup($rawdata);

        return $cbGroup;
    }

    /**
     * @param $inDataObj
     *
     * @return CbGroup[]
     */
    public function getGroupList($inDataObj)
    {
        /* @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj))
            ? $inDataObj['lock'] : null;
        $inOffset = (array_key_exists('offset', $inDataObj))
            ? $inDataObj['offset'] : null;
        $inLimit = (array_key_exists('limit', $inDataObj))
            ? $inDataObj['limit'] : null;
        $inLanguage = (array_key_exists('language', $inDataObj))
            ? $inDataObj['language'] : null;

        $p = $this->postfix;

        $query
            = "SELECT c._id, c.col_ctime, c.col_description, c.col_email_address, c.col_facsimile_number";
        $query = $query . ", c.col_foreign_key, c.col_list_index, c.col_mtime";
        $query = $query . ", IFNULL(cl.col_name, c.col_name) AS col_name";
        $query = $query
                 . ", c.col_parent, c.col_physical_address, c.col_reserve_blob1, c.col_reserve_blob2";
        $query = $query
                 . ", c.col_reserve_int1, c.col_reserve_int2, c.col_reserve_text1, c.col_reserve_text2";
        $query = $query
                 . ", c.col_room_number, c.col_telephone_number, c.col_url";
        $query = $query
                 . " FROM (tab_cb_group{$p} c LEFT JOIN (tab_cb_group_local{$p} cl INNER JOIN tab_cb_language_status l ON cl.language_id = l._id AND l.col_language = '"
                 . $inDb->escape($inLanguage) . "') ON c._id = cl.parent_id)";
        $query = $query . " ORDER BY c.col_list_index, c._id";
        if ( ! is_null($inOffset)) {
            $query = $inDb->select_format($query, $inOffset, $inLimit, $inLock);
        }

        $result = $inDb->query($query);

        if ($result === false) {
            //Throw Query Error
            $inDb->throwError(['query' => 'query failed: ' . $query]);
        }

        $cbGroupArray = [];
        while ($rawdata = $inDb->fetch_assoc($result)) {
            $cbGroup = new CbGroup($rawdata);
            $cbGroupArray[] = $cbGroup;
        }
        $inDb->free_result($result);
        $result = false;

        return $cbGroupArray;
    }

    /**
     * @param array $inDataObj
     *
     * @return CbGroup[]
     */
    public function getGroupListByParentIdIsNull($inDataObj)
    {
        /* @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj))
            ? $inDataObj['lock'] : null;
        $inOffset = (array_key_exists('offset', $inDataObj))
            ? $inDataObj['offset'] : null;
        $inLimit = (array_key_exists('limit', $inDataObj))
            ? $inDataObj['limit'] : null;
        $inLanguage = (array_key_exists('language', $inDataObj))
            ? $inDataObj['language'] : null;


        $p = $this->postfix;

        $query
            = "SELECT c._id, c.col_ctime, c.col_description, c.col_email_address, c.col_facsimile_number";
        $query = $query . ", c.col_foreign_key, c.col_list_index, c.col_mtime";
        $query = $query . ", IFNULL(cl.col_name, c.col_name) AS col_name";
        $query = $query
                 . ", c.col_parent, c.col_physical_address, c.col_reserve_blob1, c.col_reserve_blob2";
        $query = $query
                 . ", c.col_reserve_int1, c.col_reserve_int2, c.col_reserve_text1, c.col_reserve_text2";
        $query = $query
                 . ", c.col_room_number, c.col_telephone_number, c.col_url";
        $query = $query
                 . " FROM (tab_cb_group{$p} c LEFT JOIN (tab_cb_group_local{$p} cl INNER JOIN tab_cb_language_status l ON cl.language_id = l._id AND l.col_language = '"
                 . $inDb->escape($inLanguage) . "') ON c._id = cl.parent_id)";
        $query = $query . " WHERE c.col_parent IS NULL";
        $query = $query . " ORDER BY c.col_list_index";
        if ( ! is_null($inOffset)) {
            $query = $inDb->select_format($query, $inOffset, $inLimit, $inLock);
        }

        $result = $inDb->query($query);

        if ($result === false) {
            //Throw Query Error
            $inDb->throwError(['query' => 'query failed: ' . $query]);
        }

        $cbGroupArray = [];
        while ($rawdata = $inDb->fetch_assoc($result)) {
            $cbGroup = new CbGroup($rawdata);
            $cbGroupArray[] = $cbGroup;
        }
        $inDb->free_result($result);

        return $cbGroupArray;
    }

    /**
     * @param $inDataObj
     *
     * @return CbGroup[]
     */
    public function getGroupListWithNonLocalByParentIdIsNull($inDataObj)
    {
        /* @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj)) ? $inDataObj['lock']
            : null;
        $inOffset = (array_key_exists('offset', $inDataObj))
            ? $inDataObj['offset'] : null;
        $inLimit = (array_key_exists('limit', $inDataObj))
            ? $inDataObj['limit'] : null;

        $p = $this->postfix;

        $query
            = "SELECT c._id, c.col_ctime, c.col_description, c.col_email_address, c.col_facsimile_number";
        $query = $query . ", c.col_foreign_key, c.col_list_index, c.col_mtime";
        $query = $query . ", c.col_name";
        $query = $query
                 . ", c.col_parent, c.col_physical_address, c.col_reserve_blob1, c.col_reserve_blob2";
        $query = $query
                 . ", c.col_reserve_int1, c.col_reserve_int2, c.col_reserve_text1, c.col_reserve_text2";
        $query = $query
                 . ", c.col_room_number, c.col_telephone_number, c.col_url";
        $query = $query . " FROM tab_cb_group{$p} c";
        $query = $query . " WHERE c.col_parent IS NULL";
        $query = $query . " ORDER BY c.col_list_index";
        if ( ! is_null($inOffset)) {
            $query = $inDb->select_format($query, $inOffset, $inLimit, $inLock);
        }

        $result = $inDb->query($query);

        if ($result === false) {
            //Throw Query Error
            $inDb->throwError(['query' => 'query failed: ' . $query]);
        }

        $cbGroupArray = [];
        while ($rawdata = $inDb->fetch_assoc($result)) {
            $cbGroup = new CbGroup($rawdata);
            $cbGroupArray[] = $cbGroup;
        }
        $inDb->free_result($result);
        $result = false;

        return $cbGroupArray;
    }

    /**
     * @param array  $inDataObj
     * @param string $inParentId
     *
     * @return CbGroup[]
     */
    public function getGroupListByParentId($inDataObj, $inParentId)
    {
        /* @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj))
            ? $inDataObj['lock'] : null;
        $inOffset = (array_key_exists('offset', $inDataObj))
            ? $inDataObj['offset'] : null;
        $inLimit = (array_key_exists('limit', $inDataObj))
            ? $inDataObj['limit'] : null;
        $inLanguage = (array_key_exists('language', $inDataObj))
            ? $inDataObj['language'] : null;

        $p = $this->postfix;

        $query
            = "SELECT c._id, c.col_ctime, c.col_description, c.col_email_address, c.col_facsimile_number";
        $query = $query . ", c.col_foreign_key, c.col_list_index, c.col_mtime";
        $query = $query . ", IFNULL(cl.col_name, c.col_name) AS col_name";
        $query = $query
                 . ", c.col_parent, c.col_physical_address, c.col_reserve_blob1, c.col_reserve_blob2";
        $query = $query
                 . ", c.col_reserve_int1, c.col_reserve_int2, c.col_reserve_text1, c.col_reserve_text2";
        $query = $query
                 . ", c.col_room_number, c.col_telephone_number, c.col_url";
        $query = $query
                 . " FROM (tab_cb_group{$p} c LEFT JOIN (tab_cb_group_local{$p} cl INNER JOIN tab_cb_language_status l ON cl.language_id = l._id AND l.col_language = '"
                 . $inDb->escape($inLanguage) . "') ON c._id = cl.parent_id)";
        $query = $query . " WHERE c.col_parent= '" . $inDb->escape($inParentId)
                 . "'";
        $query = $query . " ORDER BY c.col_list_index, c._id";
        if ( ! is_null($inOffset)) {
            $query = $inDb->select_format($query, $inOffset, $inLimit, $inLock);
        }

        $result = $inDb->query($query);

        if ($result === false) {
            //Throw Query Error
            $inDb->throwError(['query' => 'query failed: ' . $query]);
        }

        $cbGroupArray = [];
        while ($rawdata = $inDb->fetch_assoc($result)) {
            $cbGroup = new CbGroup($rawdata);
            $cbGroupArray[] = $cbGroup;
        }
        $inDb->free_result($result);
        $result = false;

        return $cbGroupArray;
    }

    /**
     * @param $inDataObj
     * @param $inParentId
     *
     * @return CbGroup[]
     */
    public function getGroupListWithNonLocalByParentId($inDataObj, $inParentId)
    {
        /* @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj)) ? $inDataObj['lock']
            : null;
        $inOffset = (array_key_exists('offset', $inDataObj))
            ? $inDataObj['offset'] : null;
        $inLimit = (array_key_exists('limit', $inDataObj))
            ? $inDataObj['limit'] : null;

        $p = $this->postfix;

        $query
            = "SELECT c._id, c.col_ctime, c.col_description, c.col_email_address, c.col_facsimile_number";
        $query = $query . ", c.col_foreign_key, c.col_list_index, c.col_mtime";
        $query = $query . ", c.col_name";
        $query = $query
                 . ", c.col_parent, c.col_physical_address, c.col_reserve_blob1, c.col_reserve_blob2";
        $query = $query
                 . ", c.col_reserve_int1, c.col_reserve_int2, c.col_reserve_text1, c.col_reserve_text2";
        $query = $query
                 . ", c.col_room_number, c.col_telephone_number, c.col_url";
        $query = $query . " FROM tab_cb_group{$p} c";
        $query = $query . " WHERE c.col_parent= '" . $inDb->escape($inParentId)
                 . "'";
        $query = $query . " ORDER BY c.col_list_index, c._id";
        if ( ! is_null($inOffset)) {
            $query = $inDb->select_format($query, $inOffset, $inLimit, $inLock);
        }

        $result = $inDb->query($query);

        if ($result === false) {
            //Throw Query Error
            $inDb->throwError(['query' => 'query failed: ' . $query]);
        }

        $cbGroupArray = [];
        while ($rawdata = $inDb->fetch_assoc($result)) {
            $cbGroup = new CbGroup($rawdata);
            $cbGroupArray[] = $cbGroup;
        }
        $inDb->free_result($result);
        $result = false;

        return $cbGroupArray;
    }

    /**
     * @param $inDataObj
     * @param $inGroupArray
     *
     * @return CbGroup[]
     */
    public function getGroupListByIds($inDataObj, $inGroupArray)
    {
        /* @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj))
            ? $inDataObj['lock'] : null;
        $inOffset = (array_key_exists('offset', $inDataObj))
            ? $inDataObj['offset'] : null;
        $inLimit = (array_key_exists('limit', $inDataObj))
            ? $inDataObj['limit'] : null;
        $inLanguage = (array_key_exists('language', $inDataObj))
            ? $inDataObj['language'] : null;

        $inEscapeGroupArray = [];
        foreach ($inGroupArray as $id) {
            $inEscapeGroupArray[] = $inDb->escape($id);
        }
        $inGroupIds = implode("','", $inEscapeGroupArray);

        $p = $this->postfix;

        $query
            = "SELECT c._id, c.col_ctime, c.col_description, c.col_email_address, c.col_facsimile_number";
        $query = $query . ", c.col_foreign_key, c.col_list_index, c.col_mtime";
        $query = $query . ", IFNULL(cl.col_name, c.col_name) AS col_name";
        $query = $query
                 . ", c.col_parent, c.col_physical_address, c.col_reserve_blob1, c.col_reserve_blob2";
        $query = $query
                 . ", c.col_reserve_int1, c.col_reserve_int2, c.col_reserve_text1, c.col_reserve_text2";
        $query = $query
                 . ", c.col_room_number, c.col_telephone_number, c.col_url";
        $query = $query
                 . " FROM (tab_cb_group{$p} c LEFT JOIN (tab_cb_group_local{$p} cl INNER JOIN tab_cb_language_status l ON cl.language_id = l._id AND l.col_language = '"
                 . $inDb->escape($inLanguage) . "') ON c._id = cl.parent_id)";
        $query = $query . " WHERE c._id IN ('${inGroupIds}')";
        $query = $query . " ORDER BY c.col_list_index, c._id";
        if ( ! is_null($inOffset)) {
            $query = $inDb->select_format($query, $inOffset, $inLimit, $inLock);
        }

        $result = $inDb->query($query);

        if ($result === false) {
            //Throw Query Error
            $inDb->throwError(['query' => 'query failed: ' . $query]);
        }

        $cbGroupArray = [];
        while ($rawdata = $inDb->fetch_assoc($result)) {
            $cbGroup = new CbGroup($rawdata);
            $cbGroupArray[] = $cbGroup;
        }
        $inDb->free_result($result);
        $result = false;

        return $cbGroupArray;
    }

    /**
     * @param $inDataObj
     * @param $inForeignKeyArray
     *
     * @return CbGroup[]
     */
    public function getGroupListByInForeignKeys($inDataObj, $inForeignKeyArray)
    {
        /* @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj))
            ? $inDataObj['lock'] : null;
        $inOffset = (array_key_exists('offset', $inDataObj))
            ? $inDataObj['offset'] : null;
        $inLimit = (array_key_exists('limit', $inDataObj))
            ? $inDataObj['limit'] : null;
        $inLanguage = (array_key_exists('language', $inDataObj))
            ? $inDataObj['language'] : null;

        $inEscapeForeignKeyArray = [];
        foreach ($inForeignKeyArray as $key) {
            $inEscapeForeignKeyArray[] = $inDb->escape($key);
        }
        $inForeignKeys = implode("','", $inEscapeForeignKeyArray);

        $query
            = "SELECT c._id, c.col_ctime, c.col_description, c.col_email_address, c.col_facsimile_number";
        $query = $query . ", c.col_foreign_key, c.col_list_index, c.col_mtime";
        $query = $query . ", IFNULL(cl.col_name, c.col_name) AS col_name";
        $query = $query
                 . ", c.col_parent, c.col_physical_address, c.col_reserve_blob1, c.col_reserve_blob2";
        $query = $query
                 . ", c.col_reserve_int1, c.col_reserve_int2, c.col_reserve_text1, c.col_reserve_text2";
        $query = $query
                 . ", c.col_room_number, c.col_telephone_number, c.col_url";
        $query = $query
                 . " FROM (tab_cb_group c LEFT JOIN (tab_cb_group_local cl INNER JOIN tab_cb_language_status l ON cl.language_id = l._id AND l.col_language = '"
                 . $inDb->escape($inLanguage) . "') ON c._id = cl.parent_id)";
        $query = $query . " WHERE c.col_foreign_key IN ('${inForeignKeys}')";
        $query = $query . " ORDER BY c.col_list_index, c._id";
        if ( ! is_null($inOffset)) {
            $query = $inDb->select_format($query, $inOffset, $inLimit, $inLock);
        }

        $result = $inDb->query($query);

        if ($result === false) {
            //Throw Query Error
            $inDb->throwError(['query' => 'query failed: ' . $query]);
        }

        $cbGroupArray = [];
        while ($rawdata = $inDb->fetch_assoc($result)) {
            $cbGroup = new CbGroup($rawdata);
            $cbGroupArray[] = $cbGroup;
        }
        $inDb->free_result($result);
        $result = false;

        return $cbGroupArray;
    }

    /**
     * @param $inDataObj
     * @param $inForeignKeyArray
     *
     * @return CbGroup[]
     */
    public function getGroupListByNotInForeignKeys(
        $inDataObj,
        $inForeignKeyArray
    ) {
        /* @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj))
            ? $inDataObj['lock'] : null;
        $inOffset = (array_key_exists('offset', $inDataObj))
            ? $inDataObj['offset'] : null;
        $inLimit = (array_key_exists('limit', $inDataObj))
            ? $inDataObj['limit'] : null;
        $inLanguage = (array_key_exists('language', $inDataObj))
            ? $inDataObj['language'] : null;

        $inEscapeForeignKeyArray = [];
        foreach ($inForeignKeyArray as $key) {
            $inEscapeForeignKeyArray[] = $inDb->escape($key);
        }
        $inForeignKeys = implode("','", $inEscapeForeignKeyArray);

        $query
            = "SELECT c._id, c.col_ctime, c.col_description, c.col_email_address, c.col_facsimile_number";
        $query = $query . ", c.col_foreign_key, c.col_list_index, c.col_mtime";
        $query = $query . ", IFNULL(cl.col_name, c.col_name) AS col_name";
        $query = $query
                 . ", c.col_parent, c.col_physical_address, c.col_reserve_blob1, c.col_reserve_blob2";
        $query = $query
                 . ", c.col_reserve_int1, c.col_reserve_int2, c.col_reserve_text1, c.col_reserve_text2";
        $query = $query
                 . ", c.col_room_number, c.col_telephone_number, c.col_url";
        $query = $query
                 . " FROM (tab_cb_group c LEFT JOIN (tab_cb_group_local cl INNER JOIN tab_cb_language_status l ON cl.language_id = l._id AND l.col_language = '"
                 . $inDb->escape($inLanguage) . "') ON c._id = cl.parent_id)";
        $query = $query
                 . " WHERE c.col_foreign_key NOT IN ('${inForeignKeys}')";
        $query = $query . " ORDER BY c.col_list_index, c._id";
        if ( ! is_null($inOffset)) {
            $query = $inDb->select_format($query, $inOffset, $inLimit, $inLock);
        }

        $result = $inDb->query($query);

        if ($result === false) {
            //Throw Query Error
            $inDb->throwError(['query' => 'query failed: ' . $query]);
        }

        $cbGroupArray = [];
        while ($rawdata = $inDb->fetch_assoc($result)) {
            $cbGroup = new CbGroup($rawdata);
            $cbGroupArray[] = $cbGroup;
        }
        $inDb->free_result($result);
        $result = false;

        return $cbGroupArray;
    }

    /**
     * @param $inDataObj
     * @param $inGroupNameArray
     *
     * @return CbGroup[]
     */
    public function getGroupListByAndNames($inDataObj, $inGroupNameArray)
    {
        /* @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj))
            ? $inDataObj['lock'] : null;
        $inOffset = (array_key_exists('offset', $inDataObj))
            ? $inDataObj['offset'] : null;
        $inLimit = (array_key_exists('limit', $inDataObj))
            ? $inDataObj['limit'] : null;
        $inLanguage = (array_key_exists('language', $inDataObj))
            ? $inDataObj['language'] : null;

        $inEscapeGroupNameArray = [];
        foreach ($inGroupNameArray as $name) {
            $inEscapeGroupNameArray[] = cb_queryf($inDb,
                "(main.col_name LIKE '%@L%')", $name);
        }
        $inGroupNames = implode(" AND ", $inEscapeGroupNameArray);

        $query = "SELECT *";
        $query = $query . " FROM (";
        $query = $query
                 . "SELECT c._id, c.col_ctime, c.col_description, c.col_email_address, c.col_facsimile_number";
        $query = $query . ", c.col_foreign_key, c.col_list_index, c.col_mtime";
        $query = $query . ", IFNULL(cl.col_name, c.col_name) AS col_name";
        $query = $query
                 . ", c.col_parent, c.col_physical_address, c.col_reserve_blob1, c.col_reserve_blob2";
        $query = $query
                 . ", c.col_reserve_int1, c.col_reserve_int2, c.col_reserve_text1, c.col_reserve_text2";
        $query = $query
                 . ", c.col_room_number, c.col_telephone_number, c.col_url";
        $query = $query
                 . " FROM (tab_cb_group c LEFT JOIN (tab_cb_group_local cl INNER JOIN tab_cb_language_status l ON cl.language_id = l._id AND l.col_language = '"
                 . $inDb->escape($inLanguage) . "') ON c._id = cl.parent_id)";
        $query = $query . ") main";
        $query = $query . " WHERE ${inGroupNames}";
        $query = $query . " ORDER BY main.col_list_index, main._id";
        if ( ! is_null($inOffset)) {
            $query = $inDb->select_format($query, $inOffset, $inLimit, $inLock);
        }

        $result = $inDb->query($query);

        if ($result === false) {
            //Throw Query Error
            $inDb->throwError(['query' => 'query failed: ' . $query]);
        }

        $cbGroupArray = [];
        while ($rawdata = $inDb->fetch_assoc($result)) {
            $cbGroup = new CbGroup($rawdata);
            $cbGroupArray[] = $cbGroup;
        }
        $inDb->free_result($result);
        $result = false;

        return $cbGroupArray;
    }

    /**
     * @param $inDataObj
     * @param $inGroupNameArray
     *
     * @return CbGroup[]
     */
    public function getGroupListByOrNames($inDataObj, $inGroupNameArray)
    {
        /* @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj))
            ? $inDataObj['lock'] : null;
        $inOffset = (array_key_exists('offset', $inDataObj))
            ? $inDataObj['offset'] : null;
        $inLimit = (array_key_exists('limit', $inDataObj))
            ? $inDataObj['limit'] : null;
        $inLanguage = (array_key_exists('language', $inDataObj))
            ? $inDataObj['language'] : null;

        $inEscapeGroupNameArray = [];
        foreach ($inGroupNameArray as $name) {
            $inEscapeGroupNameArray[] = cb_queryf($inDb,
                "(main.col_name LIKE '%@L%')", $name);
        }
        $inGroupNames = implode(" OR ", $inEscapeGroupNameArray);

        $query = "SELECT *";
        $query = $query . " FROM (";
        $query = $query
                 . "SELECT c._id, c.col_ctime, c.col_description, c.col_email_address, c.col_facsimile_number";
        $query = $query . ", c.col_foreign_key, c.col_list_index, c.col_mtime";
        $query = $query . ", IFNULL(cl.col_name, c.col_name) AS col_name";
        $query = $query
                 . ", c.col_parent, c.col_physical_address, c.col_reserve_blob1, c.col_reserve_blob2";
        $query = $query
                 . ", c.col_reserve_int1, c.col_reserve_int2, c.col_reserve_text1, c.col_reserve_text2";
        $query = $query
                 . ", c.col_room_number, c.col_telephone_number, c.col_url";
        $query = $query
                 . " FROM (tab_cb_group c LEFT JOIN (tab_cb_group_local cl INNER JOIN tab_cb_language_status l ON cl.language_id = l._id AND l.col_language = '"
                 . $inDb->escape($inLanguage) . "') ON c._id = cl.parent_id)";
        $query = $query . ") main";
        $query = $query . " WHERE ${inGroupNames}";
        $query = $query . " ORDER BY main.col_list_index, main._id";
        if ( ! is_null($inOffset)) {
            $query = $inDb->select_format($query, $inOffset, $inLimit, $inLock);
        }

        $result = $inDb->query($query);

        if ($result === false) {
            //Throw Query Error
            $inDb->throwError(['query' => 'query failed: ' . $query]);
        }

        $cbGroupArray = [];
        while ($rawdata = $inDb->fetch_assoc($result)) {
            $cbGroup = new CbGroup($rawdata);
            $cbGroupArray[] = $cbGroup;
        }
        $inDb->free_result($result);
        $result = false;

        return $cbGroupArray;
    }

    /**
     * @param $inDataObj
     * @param $inUserId
     *
     * @return CbGroup[]
     */
    public function getAuthorityGroupListByUserId($inDataObj, $inUserId)
    {
        /* @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj))
            ? $inDataObj['lock'] : null;
        $inOffset = (array_key_exists('offset', $inDataObj))
            ? $inDataObj['offset'] : null;
        $inLimit = (array_key_exists('limit', $inDataObj))
            ? $inDataObj['limit'] : null;
        $inLanguage = (array_key_exists('language', $inDataObj))
            ? $inDataObj['language'] : null;
        $inIsTransferable = (array_key_exists('isTransferable', $inDataObj))
            ? $inDataObj['isTransferable'] : false;
        $inGroupArray = (array_key_exists('groupArray', $inDataObj))
            ? $inDataObj['groupArray'] : [];
        $inRoleArray = (array_key_exists('roleArray', $inDataObj))
            ? $inDataObj['roleArray'] : [];
        $inDynamicRoleArray = (array_key_exists('dynamicRoleArray', $inDataObj))
            ? $inDataObj['dynamicRoleArray'] : [];


        $inEscapeGroupArray = [];
        foreach ($inGroupArray as $id) {
            $inEscapeGroupArray[] = cb_queryf($inDb, "gp.col_group = '@S'",
                $id);
        }
        $inGroupIds = implode(" OR ", $inEscapeGroupArray);

        $inEscapeRoleArray = [];
        foreach ($inRoleArray as $id) {
            $inEscapeRoleArray[] = cb_queryf($inDb, "gp.col_static_role = '@S'",
                $id);
        }
        $inRoleIds = implode(" OR ", $inEscapeRoleArray);

        $inEscapeDynamicRoleArray = [];
        foreach ($inDynamicRoleArray as $id) {
            $inEscapeDynamicRoleArray[] = cb_queryf($inDb,
                "gp.col_dynamic_role = '@S'", $id);
        }
        $inDynamicRoleIds = implode(" OR ", $inEscapeDynamicRoleArray);


        $query
            = "SELECT c._id, c.col_ctime, c.col_description, c.col_email_address, c.col_facsimile_number";
        $query = $query . ", c.col_foreign_key, c.col_list_index, c.col_mtime";
        $query = $query . ", IFNULL(cl.col_name, c.col_name) AS col_name";
        $query = $query
                 . ", c.col_parent, c.col_physical_address, c.col_reserve_blob1, c.col_reserve_blob2";
        $query = $query
                 . ", c.col_reserve_int1, c.col_reserve_int2, c.col_reserve_text1, c.col_reserve_text2";
        $query = $query
                 . ", c.col_room_number, c.col_telephone_number, c.col_url";
        $query = $query
                 . " FROM (tab_cb_group c LEFT JOIN (tab_cb_group_local cl INNER JOIN tab_cb_language_status l ON cl.language_id = l._id AND l.col_language = '"
                 . $inDb->escape($inLanguage) . "') ON c._id = cl.parent_id)";
        $query = $query . ", tab_grn_group_privilege gp";
        $query = $query . " WHERE c._id = gp.col_pv_group";
        $query = $query . " AND (";
        $query = $query . " gp.col_user = '" . $inDb->escape($inUserId) . "'";
        $query = $query . ((count($inGroupArray) > 0) ? " OR ${inGroupIds}"
                : "");
        $query = $query . ((count($inRoleArray) > 0) ? " OR ${inRoleIds}" : "");
        $query = $query . ((count($inDynamicRoleArray) > 0)
                ? " OR ${inDynamicRoleIds}" : "");
        $query = $query . " )";

        if ($inIsTransferable) {
            $query = $query . " AND gp.col_transferable = 1";
        }

        $query = $query . " ORDER BY gp.col_pv_group";
        if ( ! is_null($inOffset)) {
            $query = $inDb->select_format($query, $inOffset, $inLimit, $inLock);
        }

        $result = $inDb->query($query);

        if ($result === false) {
            //Throw Query Error
            $inDb->throwError(['query' => 'query failed: ' . $query]);
        }

        $cbGroupArray = [];
        while ($rawdata = $inDb->fetch_assoc($result)) {
            $cbGroup = new CbGroup($rawdata);
            $cbGroupArray[] = $cbGroup;
        }
        $inDb->free_result($result);
        $result = false;

        return $cbGroupArray;
    }

    /**
     * @param $inDataObj
     * @param $inUserId
     *
     * @return CbGroup[]
     */
    public function getAuthorityGroupListWithNonLocalByUserId(
        $inDataObj,
        $inUserId
    ) {
        /* @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj))
            ? $inDataObj['lock'] : null;
        $inOffset = (array_key_exists('offset', $inDataObj))
            ? $inDataObj['offset'] : null;
        $inLimit = (array_key_exists('limit', $inDataObj))
            ? $inDataObj['limit'] : null;
        $inIsTransferable = (array_key_exists('isTransferable', $inDataObj))
            ? $inDataObj['isTransferable'] : false;
        $inGroupArray = (array_key_exists('groupArray', $inDataObj))
            ? $inDataObj['groupArray'] : [];
        $inRoleArray = (array_key_exists('roleArray', $inDataObj))
            ? $inDataObj['roleArray'] : [];
        $inDynamicRoleArray = (array_key_exists('dynamicRoleArray', $inDataObj))
            ? $inDataObj['dynamicRoleArray'] : [];


        $inEscapeGroupArray = [];
        foreach ($inGroupArray as $id) {
            $inEscapeGroupArray[] = cb_queryf($inDb, "gp.col_group = '@S'",
                $id);
        }
        $inGroupIds = implode(" OR ", $inEscapeGroupArray);

        $inEscapeRoleArray = [];
        foreach ($inRoleArray as $id) {
            $inEscapeRoleArray[] = cb_queryf($inDb, "gp.col_static_role = '@S'",
                $id);
        }
        $inRoleIds = implode(" OR ", $inEscapeRoleArray);

        $inEscapeDynamicRoleArray = [];
        foreach ($inDynamicRoleArray as $id) {
            $inEscapeDynamicRoleArray[] = cb_queryf($inDb,
                "gp.col_dynamic_role = '@S'", $id);
        }
        $inDynamicRoleIds = implode(" OR ", $inEscapeDynamicRoleArray);


        $query
            = "SELECT c._id, c.col_ctime, c.col_description, c.col_email_address, c.col_facsimile_number";
        $query = $query . ", c.col_foreign_key, c.col_list_index, c.col_mtime";
        $query = $query . ", c.col_name";
        $query = $query
                 . ", c.col_parent, c.col_physical_address, c.col_reserve_blob1, c.col_reserve_blob2";
        $query = $query
                 . ", c.col_reserve_int1, c.col_reserve_int2, c.col_reserve_text1, c.col_reserve_text2";
        $query = $query
                 . ", c.col_room_number, c.col_telephone_number, c.col_url";
        $query = $query . " FROM tab_cb_group c";
        $query = $query . ", tab_grn_group_privilege gp";
        $query = $query . " WHERE c._id = gp.col_pv_group";
        $query = $query . " AND (";
        $query = $query . " gp.col_user = '" . $inDb->escape($inUserId) . "'";
        $query = $query . ((count($inGroupArray) > 0) ? " OR ${inGroupIds}"
                : "");
        $query = $query . ((count($inRoleArray) > 0) ? " OR ${inRoleIds}" : "");
        $query = $query . ((count($inDynamicRoleArray) > 0)
                ? " OR ${inDynamicRoleIds}" : "");
        $query = $query . " )";

        if ($inIsTransferable) {
            $query = $query . " AND gp.col_transferable = 1";
        }

        $query = $query . " ORDER BY gp.col_pv_group";
        if ( ! is_null($inOffset)) {
            $query = $inDb->select_format($query, $inOffset, $inLimit, $inLock);
        }

        $result = $inDb->query($query);

        if ($result === false) {
            //Throw Query Error
            $inDb->throwError(['query' => 'query failed: ' . $query]);
        }

        $cbGroupArray = [];
        while ($rawdata = $inDb->fetch_assoc($result)) {
            $cbGroup = new CbGroup($rawdata);
            $cbGroupArray[] = $cbGroup;
        }
        $inDb->free_result($result);
        $result = false;

        return $cbGroupArray;
    }

    /**
     * @param $inDataObj
     * @param $inParentId
     *
     * @return int
     */
    public function countGroupByParentId($inDataObj, $inParentId)
    {
        /* @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj)) ? $inDataObj['lock']
            : null;

        $p = $this->postfix;

        $query = "SELECT COUNT(*) AS count";
        $query = $query . " FROM tab_cb_group{$p} c";
        $query = $query . " WHERE c.col_parent = '" . $inDb->escape($inParentId)
                 . "'";
        $query = $inDb->select_format($query, 0, -1, $inLock);

        $result = $inDb->query($query);

        if (($result === false) || ($inDb->num_rows($result) != 1)) {
            //Throw Query Error
            $inDb->throwError(['query' => 'query failed: ' . $query]);
        }

        $row = $inDb->fetch_assoc($result);
        $resultCount = $row['count'];

        $inDb->free_result($result);

        return $resultCount;
    }

    /**
     * @param $inDataObj
     *
     * @return int
     */
    public function countGroupByParentIdIsNull($inDataObj)
    {
        /* @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj)) ? $inDataObj['lock']
            : null;

        $p = $this->postfix;

        $query = "SELECT COUNT(*) AS count";
        $query = $query . " FROM tab_cb_group{$p} c";
        $query = $query . " WHERE c.col_parent IS NULL";
        $query = $inDb->select_format($query, 0, -1, $inLock);

        $result = $inDb->query($query);

        if (($result === false) || ($inDb->num_rows($result) != 1)) {
            //Throw Query Error
            $inDb->throwError(['query' => 'query failed: ' . $query]);
        }

        $row = $inDb->fetch_assoc($result);
        $resultCount = $row['count'];

        $inDb->free_result($result);

        return $resultCount;
    }

    /**
     * @param $inDataObj
     *
     * @return int
     */
    public function countGroup($inDataObj)
    {
        /* @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj)) ? $inDataObj['lock']
            : null;

        $p = $this->postfix;
        $query = "SELECT COUNT(*) AS count";
        $query = $query . " FROM tab_cb_group{$p} c";
        $query = $inDb->select_format($query, 0, -1, $inLock);

        $result = $inDb->query($query);

        if (($result === false) || ($inDb->num_rows($result) != 1)) {
            //Throw Query Error
            $inDb->throwError(['query' => 'query failed: ' . $query]);
        }

        $row = $inDb->fetch_assoc($result);
        $resultCount = $row['count'];

        $inDb->free_result($result);

        return $resultCount;
    }


    /** ***************************************************** */
    /** -----             OTHER TABLE JOIN          --------- */
    /** ***************************************************** */
    /**
     * @param $inDataObj
     * @param $inUserId
     *
     * @return CbGroup[]
     */
    public function getGroupListByAliveUserId($inDataObj, $inUserId)
    {
        return $this->getGroupListByAliveUserIds($inDataObj, [$inUserId]);
    }

    public function getGroupListByUserIds($inDataObj, $inUserIdArray)
    {
        /* @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLanguage = (array_key_exists('language', $inDataObj))
            ? $inDataObj['language'] : null;

        $inEscapeUserIdArray = [];
        foreach ($inUserIdArray as $id) {
            $inEscapeUserIdArray[] = $inDb->escape($id);
        }

        $p = $this->postfix;

        $query
            = <<<SQL
SELECT 
 ug.col_user, 
 ug.col_group 
FROM 
 tab_cb_usergrouprelation@S ug 
WHERE 
 ug.col_user IN(@A) 
ORDER BY 
 ug.col_user, 
 ug.col_group_list, 
 ug.col_group 
SQL;
        $query = $inDb->format($query, [$p, $inEscapeUserIdArray]);
        $result = $inDb->query($query);

        $user_group_array = [];
        $group_ids = [];
        while ($row = $inDb->fetch_assoc($result)) {
            $group_id = $row["col_group"];
            $user_group_array[$row["col_user"]][] = $group_id;
            $group_ids[$group_id] = $group_id;
        }
        $inDb->free_result($result);

        if (count($user_group_array) === 0) {
            return [];
        }

        $query
            = <<<SQL
SELECT 
  c._id, 
  c.col_ctime, 
  c.col_description, 
  c.col_email_address, 
  c.col_facsimile_number, 
  c.col_foreign_key, 
  c.col_list_index, 
  c.col_mtime, 
  IFNULL(cl.col_name, c.col_name) AS col_name, 
  c.col_parent, 
  c.col_physical_address, 
  c.col_reserve_blob1, 
  c.col_reserve_blob2, 
  c.col_reserve_int1, 
  c.col_reserve_int2, 
  c.col_reserve_text1, 
  c.col_reserve_text2, 
  c.col_room_number, 
  c.col_telephone_number, 
  c.col_url 
FROM 
    tab_cb_group@S c 
    LEFT JOIN ( 
      tab_cb_group_local@S cl 
      INNER JOIN tab_cb_language_status l ON cl.language_id = l._id 
      AND l.col_language = '@S' 
    ) ON c._id = cl.parent_id 
WHERE 
  c._id IN (@A) 
SQL;
        $query = $inDb->format($query,
            [$p, $p, $inDb->escape($inLanguage), $group_ids]);
        $result = $inDb->query($query);
        $group_array = [];
        while ($row = $inDb->fetch_assoc($result)) {
            $group_array[$row["_id"]] = $row;
        }
        $inDb->free_result($result);

        $cbGroupArray = [];
        foreach ($user_group_array as $user_id => $user_group_ids) {
            foreach ($user_group_ids as $group_id) {
                $data_array = $group_array[$group_id];
                $data_array["col_user"] = $user_id;
                $cbGroup = new CbGroup($data_array);
                $cbGroupArray[] = $cbGroup;
            }
        }

        return $cbGroupArray;
    }

    /**
     * @param $inDataObj
     * @param $inUserIdArray
     *
     * @return CbGroup[]
     */
    public function getGroupListByAliveUserIds($inDataObj, $inUserIdArray)
    {
        /* @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLanguage = (array_key_exists('language', $inDataObj))
            ? $inDataObj['language'] : null;

        $inEscapeUserIdArray = [];
        foreach ($inUserIdArray as $id) {
            $inEscapeUserIdArray[] = $inDb->escape($id);
        }

        $p = $this->postfix;

        $query
            = <<<SQL
SELECT 
 ug.col_user, 
 ug.col_group 
FROM 
 tab_cb_usergrouprelation@S ug 
INNER JOIN tab_cb_user u ON u._id = ug.col_user 
WHERE 
 u._id IN(@A) AND u.col_deleted IS NULL 
ORDER BY 
 ug.col_user, 
 ug.col_group_list, 
 ug.col_group 
SQL;
        $query = $inDb->format($query, [$p, $inEscapeUserIdArray]);
        $result = $inDb->query($query);

        $user_group_array = [];
        $group_ids = [];
        while ($row = $inDb->fetch_assoc($result)) {
            $group_id = $row["col_group"];
            $user_group_array[$row["col_user"]][] = $group_id;
            $group_ids[$group_id] = $group_id;
        }
        $inDb->free_result($result);

        if (count($user_group_array) == 0) {
            return [];
        }

        $query
            = <<<SQL
SELECT 
  c._id, 
  c.col_ctime, 
  c.col_description, 
  c.col_email_address, 
  c.col_facsimile_number, 
  c.col_foreign_key, 
  c.col_list_index, 
  c.col_mtime, 
  IFNULL(cl.col_name, c.col_name) AS col_name, 
  c.col_parent, 
  c.col_physical_address, 
  c.col_reserve_blob1, 
  c.col_reserve_blob2, 
  c.col_reserve_int1, 
  c.col_reserve_int2, 
  c.col_reserve_text1, 
  c.col_reserve_text2, 
  c.col_room_number, 
  c.col_telephone_number, 
  c.col_url 
FROM 
    tab_cb_group@S c 
    LEFT JOIN ( 
      tab_cb_group_local@S cl 
      INNER JOIN tab_cb_language_status l ON cl.language_id = l._id 
      AND l.col_language = '@S' 
    ) ON c._id = cl.parent_id 
WHERE 
  c._id IN (@A)
SQL;
        $query = $inDb->format($query,
            [$p, $p, $inDb->escape($inLanguage), $group_ids]);
        $result = $inDb->query($query);

        $group_array = [];
        while ($row = $inDb->fetch_assoc($result)) {
            $group_array[$row["_id"]] = $row;
        }
        $inDb->free_result($result);

        $cbGroupArray = [];
        foreach ($user_group_array as $user_id => $user_group_ids) {
            foreach ($user_group_ids as $group_id) {
                $data_array = $group_array[$group_id];
                $data_array["col_user"] = $user_id;
                $cbGroup = new CbGroup($data_array);
                $cbGroupArray[] = $cbGroup;
            }
        }

        return $cbGroupArray;
    }

    /**
     * @param $inDataObj
     *
     * @return CbGroup[]
     */
    public function getNestedGroupList($inDataObj)
    {
        /* @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj))
            ? $inDataObj['lock'] : null;
        $inOffset = (array_key_exists('offset', $inDataObj))
            ? $inDataObj['offset'] : null;
        $inLimit = (array_key_exists('limit', $inDataObj))
            ? $inDataObj['limit'] : null;
        $inLanguage = (array_key_exists('language', $inDataObj))
            ? $inDataObj['language'] : null;

        $query
            = "SELECT c._id, c.col_ctime, c.col_description, c.col_email_address, c.col_facsimile_number";
        $query = $query . ", c.col_foreign_key, c.col_list_index, c.col_mtime";
        $query = $query . ", IFNULL(cl.col_name, c.col_name) AS col_name";
        $query = $query
                 . ", c.col_parent, c.col_physical_address, c.col_reserve_blob1, c.col_reserve_blob2";
        $query = $query
                 . ", c.col_reserve_int1, c.col_reserve_int2, c.col_reserve_text1, c.col_reserve_text2";
        $query = $query
                 . ", c.col_room_number, c.col_telephone_number, c.col_url";
        $query = $query
                 . " FROM (tab_cb_group c LEFT JOIN (tab_cb_group_local cl INNER JOIN tab_cb_language_status l ON cl.language_id = l._id AND l.col_language = '"
                 . $inDb->escape($inLanguage) . "') ON c._id = cl.parent_id)";
        $query = $query . ", tab_grn_groupinfo i";
        $query = $query . " WHERE c._id = i.col_group";
        $query = $query . " ORDER BY i.col_left";
        if ( ! is_null($inOffset)) {
            $query = $inDb->select_format($query, $inOffset, $inLimit, $inLock);
        }

        $result = $inDb->query($query);

        if ($result === false) {
            //Throw Query Error
            $inDb->throwError(['query' => 'query failed: ' . $query]);
        }

        $cbGroupArray = [];
        while ($rawdata = $inDb->fetch_assoc($result)) {
            $cbGroup = new CbGroup($rawdata);
            $cbGroupArray[] = $cbGroup;
        }
        $inDb->free_result($result);
        $result = false;

        return $cbGroupArray;
    }

    /**
     * @param array  $inDataObj
     * @param string $inLeft
     * @param string $inRight
     *
     * @return CbGroup[]
     */
    public function getNestedGroupListDescendantsByLeftRight(
        $inDataObj,
        $inLeft,
        $inRight
    ) {
        /* @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj))
            ? $inDataObj['lock'] : null;
        $inOffset = (array_key_exists('offset', $inDataObj))
            ? $inDataObj['offset'] : null;
        $inLimit = (array_key_exists('limit', $inDataObj))
            ? $inDataObj['limit'] : null;
        $inLanguage = (array_key_exists('language', $inDataObj))
            ? $inDataObj['language'] : null;
        $inIsMyself = (array_key_exists('isMyself', $inDataObj))
            ? $inDataObj['isMyself'] : true;

        $query
            = "SELECT c._id, c.col_ctime, c.col_description, c.col_email_address, c.col_facsimile_number";
        $query = $query . ", c.col_foreign_key, c.col_list_index, c.col_mtime";
        $query = $query . ", IFNULL(cl.col_name, c.col_name) AS col_name";
        $query = $query
                 . ", c.col_parent, c.col_physical_address, c.col_reserve_blob1, c.col_reserve_blob2";
        $query = $query
                 . ", c.col_reserve_int1, c.col_reserve_int2, c.col_reserve_text1, c.col_reserve_text2";
        $query = $query
                 . ", c.col_room_number, c.col_telephone_number, c.col_url";
        $query = $query
                 . " FROM (tab_cb_group c LEFT JOIN (tab_cb_group_local cl INNER JOIN tab_cb_language_status l ON cl.language_id = l._id AND l.col_language = '"
                 . $inDb->escape($inLanguage) . "') ON c._id = cl.parent_id)";
        $query = $query . ", tab_grn_groupinfo i";
        $query = $query . " WHERE c._id = i.col_group";
        if ($inIsMyself) {
            $query = $query . " AND i.col_left >= '" . $inDb->escape($inLeft)
                     . "'";
            $query = $query . " AND i.col_right <= '" . $inDb->escape($inRight)
                     . "'";
        } else {
            $query = $query . " AND i.col_left > '" . $inDb->escape($inLeft)
                     . "'";
            $query = $query . " AND i.col_right < '" . $inDb->escape($inRight)
                     . "'";
        }
        $query = $query . " ORDER BY i.col_left";
        if ( ! is_null($inOffset)) {
            $query = $inDb->select_format($query, $inOffset, $inLimit, $inLock);
        }

        $result = $inDb->query($query);

        if ($result === false) {
            //Throw Query Error
            $inDb->throwError(['query' => 'query failed: ' . $query]);
        }

        $cbGroupArray = [];
        while ($rawdata = $inDb->fetch_assoc($result)) {
            $cbGroup = new CbGroup($rawdata);
            $cbGroupArray[] = $cbGroup;
        }
        $inDb->free_result($result);

        return $cbGroupArray;
    }

    /**
     * @param array  $inDataObj
     * @param string $inLeft
     * @param string $inRight
     *
     * @return CbGroup[]
     */
    public function getNestedGroupListAncestorsByLeftRight(
        $inDataObj,
        $inLeft,
        $inRight
    ) {
        /* @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj))
            ? $inDataObj['lock'] : null;
        $inOffset = (array_key_exists('offset', $inDataObj))
            ? $inDataObj['offset'] : null;
        $inLimit = (array_key_exists('limit', $inDataObj))
            ? $inDataObj['limit'] : null;
        $inLanguage = (array_key_exists('language', $inDataObj))
            ? $inDataObj['language'] : null;
        $inIsMyself = (array_key_exists('isMyself', $inDataObj))
            ? $inDataObj['isMyself'] : true;

        $query
            = "SELECT c._id, c.col_ctime, c.col_description, c.col_email_address, c.col_facsimile_number";
        $query = $query . ", c.col_foreign_key, c.col_list_index, c.col_mtime";
        $query = $query . ", IFNULL(cl.col_name, c.col_name) AS col_name";
        $query = $query
                 . ", c.col_parent, c.col_physical_address, c.col_reserve_blob1, c.col_reserve_blob2";
        $query = $query
                 . ", c.col_reserve_int1, c.col_reserve_int2, c.col_reserve_text1, c.col_reserve_text2";
        $query = $query
                 . ", c.col_room_number, c.col_telephone_number, c.col_url";
        $query = $query
                 . " FROM (tab_cb_group c LEFT JOIN (tab_cb_group_local cl INNER JOIN tab_cb_language_status l ON cl.language_id = l._id AND l.col_language = '"
                 . $inDb->escape($inLanguage) . "') ON c._id = cl.parent_id)";
        $query = $query . ", tab_grn_groupinfo i";
        $query = $query . " WHERE c._id = i.col_group";
        if ($inIsMyself) {
            $query = $query . " AND i.col_left <= '" . $inDb->escape($inLeft)
                     . "'";
            $query = $query . " AND i.col_right >= '" . $inDb->escape($inRight)
                     . "'";
        } else {
            $query = $query . " AND i.col_left < '" . $inDb->escape($inLeft)
                     . "'";
            $query = $query . " AND i.col_right > '" . $inDb->escape($inRight)
                     . "'";
        }
        $query = $query . " ORDER BY i.col_left";
        if ( ! is_null($inOffset)) {
            $query = $inDb->select_format($query, $inOffset, $inLimit, $inLock);
        }

        $result = $inDb->query($query);

        if ($result === false) {
            //Throw Query Error
            $inDb->throwError(['query' => 'query failed: ' . $query]);
        }

        $cbGroupArray = [];
        while ($rawdata = $inDb->fetch_assoc($result)) {
            $cbGroup = new CbGroup($rawdata);
            $cbGroupArray[] = $cbGroup;
        }
        $inDb->free_result($result);
        $result = false;

        return $cbGroupArray;
    }

    /**
     * @param $inDataObj
     * @param $inId
     *
     * @return bool|CbGroup
     */
    public function selectParentGroupById($inDataObj, $inId)
    {
        /* @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj)) ? $inDataObj['lock']
            : null;

        $p = $this->postfix;

        $query
            = "SELECT c._id, c.col_ctime, c.col_description, c.col_email_address, c.col_facsimile_number";
        $query = $query . ", c.col_foreign_key, c.col_list_index, c.col_mtime";
        $query = $query . ", c.col_name";
        $query = $query
                 . ", c.col_parent, c.col_physical_address, c.col_reserve_blob1, c.col_reserve_blob2";
        $query = $query
                 . ", c.col_reserve_int1, c.col_reserve_int2, c.col_reserve_text1, c.col_reserve_text2";
        $query = $query
                 . ", c.col_room_number, c.col_telephone_number, c.col_url";
        $query = $query . " FROM tab_cb_group{$p} c";
        $query = $query . " INNER JOIN tab_cb_group{$p} c2";
        $query = $query . " ON c._id = c2.col_parent";
        $query = $query . " WHERE c2._id = '" . $inDb->escape($inId) . "'";
        $query = $inDb->select_format($query, 0, -1, $inLock);

        $result = $inDb->query($query);

        if (($result === false) || ($inDb->num_rows($result) != 1)) {
            if ($result) {
                $inDb->free_result($result);
            }

            return false;
        }

        $rawdata = $inDb->fetch_assoc($result);
        $inDb->free_result($result);

        $cbGroup = new CbGroup($rawdata);

        return $cbGroup;
    }

    /**
     * @param $inDataObj
     * @param $inId
     *
     * @return bool|CbGroup
     */
    public function selectParentGroupWithLocalById($inDataObj, $inId)
    {
        /* @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj))
            ? $inDataObj['lock'] : null;
        $inLanguage = (array_key_exists('language', $inDataObj))
            ? $inDataObj['language'] : null;
        $p = $this->postfix;

        $query
            = "SELECT c._id, c.col_ctime, c.col_description, c.col_email_address, c.col_facsimile_number";
        $query = $query . ", c.col_foreign_key, c.col_list_index, c.col_mtime";
        $query = $query . ", IFNULL(cl.col_name, c.col_name) AS col_name";
        $query = $query
                 . ", c.col_parent, c.col_physical_address, c.col_reserve_blob1, c.col_reserve_blob2";
        $query = $query
                 . ", c.col_reserve_int1, c.col_reserve_int2, c.col_reserve_text1, c.col_reserve_text2";
        $query = $query
                 . ", c.col_room_number, c.col_telephone_number, c.col_url";
        $query = $query
                 . " FROM tab_cb_group{$p} c LEFT JOIN (tab_cb_group_local{$p} cl INNER JOIN tab_cb_language_status l ON cl.language_id = l._id AND l.col_language = '"
                 . $inDb->escape($inLanguage) . "') ON c._id = cl.parent_id";
        $query = $query . " INNER JOIN tab_cb_group{$p} c2 ";
        $query = $query . " ON c._id = c2.col_parent ";
        $query = $query . " WHERE c2._id = '" . $inDb->escape($inId) . "'";
        $query = $inDb->select_format($query, 0, -1, $inLock);

        $result = $inDb->query($query);

        if (($result === false) || ($inDb->num_rows($result) != 1)) {
            if ($result) {
                $inDb->free_result($result);
            }

            return false;
        }

        $rawdata = $inDb->fetch_assoc($result);
        $inDb->free_result($result);

        $cbGroup = new CbGroup($rawdata);

        return $cbGroup;
    }
}
