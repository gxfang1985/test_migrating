<?php

/**
 * LDAP utility functions.
 * (execute SASL authentication easily.)
 *
 * @package fw.core
 * @version 1.0
 */

define('CB_LDAP_SUCCESS', 0x00);
define('CB_LDAP_SASL_BIND_IN_PROGRESS', 0x0e);
define('CB_LDAP_INVALID_CREDENTIALS', 0x31);


/**
 * execute DIGEST-MD5 authentication using SASL-mechanism.
 *
 * Using Digest Authentication as a SASL Mechanism.
 * (http://www.ietf.org/rfc/rfc2831.txt?number=2831)
 *
 * @return bool
 *
 * @param resource $ld     session handle
 * @param string   $dn     distinguished name
 * @param string   $pass   password
 * @param string   $server server-hostname
 * @param string   $user   user-name
 */
function cb_ldap_digest_md5_sasl_bind(&$ld, $dn, $pass, $server, $user = null)
{
    $mechanism = 'DIGEST-MD5';
    $service = 'ldap';

    require_once('Auth/SASL.php');
    $factory = Auth_SASL::factory('digestmd5');

    /////////////////////////////////////////////
    // case 1: user is specified by "dn:DN"
    // case 2: user is specified by "DN"
    ///////////////////////////////////////////
    $p1 = ["dn:$dn", $dn];
    $p2 = [];
    if ($user) {
        /////////////////////////////////////////////
        // case 3: user is specified by user
        // case 4: user is specified by "u:user"
        /////////////////////////////////////////////
        $p2 = [$user, "u:$user"];
    }

    $patterns = array_merge($p1, $p2);
    foreach ($patterns as $pattern) {
        $ret = _ldap_authenticate($ld, $dn, $pattern, $pass, $mechanism,
            $service, $factory, $server);
        if ($ret === true) {
            return true;
        } elseif ($ret === CB_LDAP_INVALID_CREDENTIALS) {
            return false;
        }
    }

    return false;
}

/**
 * execute CRAM-MD5 authentication using SASL-mechanism.
 *
 * The CRAM-MD5 SASL Mechanism.
 * (http://www.ietf.org/internet-drafts/draft-ietf-sasl-crammd5-03.txt)
 *
 * @return bool
 *
 * @param resource $ld   session handle
 * @param string   $dn   distinguished name
 * @param string   $pass password
 * @param string   $user user-name
 */
function cb_ldap_cram_md5_sasl_bind(&$ld, $dn, $pass, $user = null)
{
    $mechanism = 'CRAM-MD5';
    $service = 'ldap';

    require_once('Auth/SASL.php');
    $factory = Auth_SASL::factory('crammd5');

    /////////////////////////////////////////////
    // case 1: user is specified by "dn:DN"
    // case 2: user is specified by "DN"
    ///////////////////////////////////////////
    $p1 = ["dn:$dn", $dn];
    $p2 = [];
    if ($user) {
        /////////////////////////////////////////////
        // case 3: user is specified by user
        // case 4: user is specified by "u:user"
        /////////////////////////////////////////////
        $p2 = [$user, "u:$user"];
    }

    $patterns = array_merge($p1, $p2);
    foreach ($patterns as $pattern) {
        $ret = _ldap_authenticate($ld, $dn, $pattern, $pass, $mechanism, null,
            $factory, null);
        if ($ret === true) {
            return true;
        } elseif ($ret === CB_LDAP_INVALID_CREDENTIALS) {
            return false;
        }
    }

    return false;
}

/**
 * @access private
 * @return mixed
 */
function _ldap_authenticate(
    &$ld,
    $dn,
    $pattern,
    $pass,
    $mechanism,
    $service,
    $factory,
    $server
) {
    $scred = null;
    $ret = ldap_sasl_bind($ld, null, $mechanism, null, $scred);
    if (CB_LDAP_SASL_BIND_IN_PROGRESS !== $ret) {
        return false;
    }
    $ccred = $factory->getResponse($pattern, $pass, $scred, $server, $service);

    $ret = ldap_sasl_bind($ld, $dn, $mechanism, $ccred, null);
    if (CB_LDAP_SUCCESS === $ret) {
        return true;
    }
    if (CB_LDAP_INVALID_CREDENTIALS === $ret) {
        return CB_LDAP_INVALID_CREDENTIALS;
    }

    return false;
}


