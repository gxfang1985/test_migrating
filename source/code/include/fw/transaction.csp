<?php

/**
 * Multi-level transactions and their status manager.
 *
 * @author  Yamamoto, Hirotaka  2004/07
 * @version 1.0
 * @package fw.core
 */

define('CB_TRANSACTION_LEVEL_AUDIT', 0);
define('CB_TRANSACTION_LEVEL_MAIL', 1);
define('CB_TRANSACTION_LEVEL_SESSION', 2);
define('CB_TRANSACTION_LEVEL_FILE', 3);
define('CB_TRANSACTION_LEVEL_USER', 4);
define('CB_TRANSACTION_LEVEL_SUBSIDIARY', 5);
define('CB_TRANSACTION_LEVEL_MAIL_SERVER', 6);
define('CB_TRANSACTION_LEVEL_REST_API', 7);


/**
 * Interface for transactional classes.
 *
 * @package fw.core
 */
interface CB_Transactional
{
    /**
     * Commit changes.  Implementers must be aware that this may
     * be called many times during the process request.
     *
     * @return bool    TRUE if the commit succeeds; otherwise FALSE.
     */
    public function commit();

    /**
     * Abort and discard changes.  Implementers must be aware that
     * this may be called many times during the process request.
     */
    public function abort();
}


/**
 * Transaction Manager.
 *
 * Transactional objects have levels as numbers.  The smaller
 * numbers are, the higher levels become.  Higher level objects
 * rule lower level objects transactions.
 *
 * For instance, suppose there are two transactional object of
 * level 0 and level 1.  If level 0 object aborts, level 1 object
 * will be aborted.  However, level 1 object will never affect
 * level 0 object's transaction, because its level is lower.
 *
 * @package fw.core
 */
class CB_TransactionManager
{
    private static $_instance = null;

    /**
     * Return singleton of the transaction manager.
     *
     * @return CB_TransactionManager
     */
    public static function getInstance()
    {
        if (self::$_instance === null) {
            self::$_instance = new self();
        }

        return self::$_instance;
    }

    /**
     * @access private
     */
    function __construct()
    {
    }

    /**
     * @access private
     * @var CB_Transactional[][]
     */
    var $_objs = [];

    /**
     * Register a transactional object with its level.
     * Level numbers should be one of CB_TRANSACTION_LEVEL_* constants.
     *
     * @param integer          $level  Level of transaction.
     * @param CB_Transactional $object Transactional object.
     */
    function register($level, $object)
    {
        assert('is_object( $object ) && is_a( $object, "CB_Transactional")');

        if ( ! array_key_exists($level, $this->_objs)) {
            $this->_objs[$level] = [];
        }
        $lo =& $this->_objs[$level];
        $lo[] = $object;
    }

    function commit()
    {
        $levels = array_keys($this->_objs);
        sort($levels);

        $to_commit = true;

        foreach ($levels as $level) {
            $objs =& $this->_objs[$level];
            foreach (array_keys($objs) as $key) {
                $obj = $objs[$key];
                if ($to_commit) {
                    $to_commit = $obj->commit();
                } else {
                    $obj->abort();
                }
            }
        }
    }

    /**
     * @param integer $level
     */
    function abort($level)
    {
        $levels = array_keys($this->_objs);
        sort($levels);

        foreach ($levels as $lv) {
            if ($lv < $level) {
                continue;
            }

            $objs =& $this->_objs[$lv];
            foreach (array_keys($objs) as $key) {
                $obj = $objs[$key];
                $obj->abort();
            }
        }
    }
}


