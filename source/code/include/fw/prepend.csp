<?php

use grn\grn\XCybozuSessionTokenDetector;
use grn\grn\UnsupportedWarning;

/**
 * Framework preprocessing.
 *
 * @package fw.core
 */

/*
 * Preserve directory location of the invoked script.
 */
$tmpdir = str_replace('\\', '/', strtolower(getcwd()));
// It may seem more desirable that we may use strrpos instead of strpos.
// However, strrpos cannot be the choice here since it searches a
// character rather than a string.
$pos = strpos($tmpdir, '/code/doc_root/');

/**
 * @global string $G_pagedir
 */
$G_pagedir = '';

if ($pos !== false) {
    // remove preceding '.../code/doc_root/' keeping leading '/'.
    $G_pagedir = substr($tmpdir, $pos + 14);
}
unset($tmpdir, $pos);

require_once("fw/miscFunctions.csp");
require_once("fw/exitFunctions.csp");

//Require composer autoload.
$composer_autoload_path = cb_basedir() . "/code/vendor/autoload.php";
require_once($composer_autoload_path);
unset($composer_autoload_path);

/**
 * Setup the autoloading system.
 * When you use, for example, grn\space\common\utility\UserUtility and the class is not found,
 * this function call require_once("space/common/utility/UserUtility.csp") automatically.
 * The path is resolved from the class name with its namespace.
 */
spl_autoload_register(function ($class_name) {
    $pathList = explode('\\', $class_name);
    array_shift($pathList);
    if (count($pathList) > 0)
        // This function is called when the class name of the object which created by *unserialize* function is not defined.
        // In such case, $class_name does not have any \ so that *require_once* fails.
    {
        $fullpath = cb_basedir() . '/code/include/' . implode("/", $pathList)
                    . ".csp";
        if (is_file($fullpath)) {
            require_once($fullpath);
        }
    }
});


// Load "common.ini" from the base directory
$_common_ini = cb_basedir() . '/common.ini';
if ( ! file_exists($_common_ini)) {
    die($_common_ini . ' is missing. Check your configuration!');
}

/**
 * @global object CB_ConfigManager $G_config_common
 */
$G_config_common = new CB_ConfigManager($_common_ini, 'Global');

unset($_common_ini);

/*
 * @global CB_ConfigManager|Boolean $G_error_config
 */
$_error_ini = cb_basedir() . '/error.ini';
if (file_exists($_error_ini)) {
    $G_error_config = new CB_ConfigManager($_error_ini, 'common');
} else {
    $G_error_config = false;
}

/**
 * @global object CB_StateSet $G_state_set
 */
$G_state_set = new CB_StateSet();

$G_state_set->set('error_occurred', false);
$G_state_set->set('disable_check_hijack', false);
$G_state_set->set('no_cache', true);

if ($G_config_common->get('Global', 'use_host')) {
    define('USE_HOST', 1);
}

// Forest
if ($G_config_common->get('Forest', 'on_forest')) {
    define('ON_FOREST', 1);
}

// SaaS
if ($G_config_common->get('SaaS', 'on_saas')) {
    define('ON_SAAS', 1);
}

/*
 * ===============================================================
 * The light-weight container
 * ===============================================================
 */

require_once('fw/lwc.csp');
require_once('fw/cydec.csp');
$_dummy = null;
if (defined('ON_FOREST')) {
    $_path = CB_CyDECUtil::getInstance()->getGaroonConfig('lwc.ini');
} else {
    $_path = $G_config_common->get('LWC', 'config');
}
$_config = new CB_LWContainerFileConfig($_path);
/**
 * The bottom-most container.
 *
 * @global object CB_LWContainer $G_container_base
 * @see CB_LWContainer
 */
$G_container_base = new CB_LWContainer($_dummy, $_config);
unset($_path, $_dummy, $_config);

/*
 * Garoon基本設定
 */
$_config = cb_basedir() . '/garoon.ini';
if ( ! file_exists($_config)) {
    die($_config . ' is missing. Check your configuration!');
}
/* @global CB_ConfigManager $G_config_grn */
$G_config_grn = new CB_ConfigManager($_config, 'Global');
unset($_config);

/*
 * ベースサービス用の軽量コンテナの生成
 */
$_config = $G_config_grn->get('System', 'lwc_config');
$G_container_grn = new CB_LWContainer($G_container_base,
    new CB_LWContainerFileConfig($_config));
unset($_config);

/*
 * =============================================================
 * Session settings
 * =============================================================
 */
/**
 * ケータイ画面の時は、CBSESSIDを利用するようにする.
 * クラウドの場合は共通Sessionになるので、通常画面からケータイ画面へ遷移してしまうと,ログイン状態を継続できなくなってしまう.
 * CBSESSIDをクラウド環境でのみ決め打ちにしているのは、オンプレミス環境では、
 * php.iniの値を書き換えることで利用するSession名を変更できるので、クラウド環境のみで有効な動作とする
 */
require_once("grn/authentication.csp");
if (defined("ON_FOREST") && cb_is_cellular_page()) {
    session_name(GRN_AUTH_GAROON_COM_CELLULAR_COOKIE);
}

XCybozuSessionTokenDetector::detect();

if ($G_config_common->get('Session', 'save_path')) {
    session_save_path($G_config_common->get('Session', 'save_path'));
} else {
    session_save_path(cb_tmpdir());
}
if ($G_config_common->get('Session', 'cookie_domain')) {
    session_set_cookie_params($G_config_common->get('Session',
        'cookie_lifetime'),
        $G_config_common->get('Session', 'cookie_path'),
        $G_config_common->get('Session', 'cookie_domain'));
} else {
    session_set_cookie_params($G_config_common->get('Session',
        'cookie_lifetime'),
        $G_config_common->get('Session', 'cookie_path'));
}

/*
 * =============================================================
 * Command-line invocation detection & handling
 * =============================================================
 */
if (( ! array_key_exists(CB_MAGIC_ENV, $_ENV))
    && array_key_exists('REQUEST_METHOD', $_SERVER)
) {
    $G_state_set->set('html_should_be_closed', true);
    $G_state_set->set('copyright_should_be_written', true);
    $G_state_set->set('command_line', false);
    $G_state_set->set('error_page_type', 'html');

    //  Print X-Frame-options to prevent click jacking using iframe
    if (cb_is_need_print_x_frame_options_header()) {
        header('X-Frame-Options: SAMEORIGIN');
    }

    $page = explode('/', cb_get_pagename());
    if ($page[0] == "v1") {
        header('Cache-Control: no-cache');
        header('Pragma: no-cache');
        header('Content-Type: application/json; charset=UTF-8');
        $G_state_set->set('copyright_should_be_written', false);
        $G_state_set->set('html_should_be_closed', false);
        $G_state_set->set('error_page_type', 'v1');
    }

    // state_set initialize
    $ini = cb_basedir() . '/state.ini';
    if (is_file($ini)) {
        $cm = new CB_ConfigManager($ini);
        $config = $cm->_config;
        $type = $config['type'];
        unset($config['type']);
        $pages = explode('/', cb_get_pagename());

        $matched = '';
        $matched_num = 0;
        foreach ($config as $key => $value) {
            $n = 0;
            $s = explode('/', $key);
            for ($i = 0; $i < count($s); $i++) {
                if ($s[$i] == $pages[$i]) {
                    $n++;
                }
            }
            if ($n > 0 && $n > $matched_num) {
                $matched_num = $n;
                $matched = $key;
            }
        }

        if ($matched) {
            foreach ($config[$matched] as $key => $value) {

                if (array_key_exists($key, $type)) {
                    settype($value, $type[$key]);
                }
                $G_state_set->set($key, $value);
            }
        }
    }

    require_once('fw/session_handler.csp');
    require_once('fw/session_manager.csp');

    $hname = 'CB_' . $G_config_common->get('Session', 'handler')
             . 'SessionHandler';
    $handler = new $hname();
    CB_SessionManager::getInstance()->start($handler);
    unset($hname, $handler);

    // set header to disable IE mime-sniffing
    header('X-Content-Type-Options: nosniff');

    if ($G_config_common->get('Global', 'strict_transport_security')) {
        header('Strict-Transport-Security: max-age=315360000');
    }

} else {
    // command-line
    $G_state_set->set('html_should_be_closed', false);
    $G_state_set->set('copyright_should_be_written', false);
    $G_state_set->set('command_line', true);

    // setuid( HTTPD USER )
    $is_win = (strncasecmp(php_uname('s'), 'WIN', 3) == 0);
    if ( ! $is_win) {
        $stat = stat(cb_basedir());
        if ($stat['uid'] !== posix_getuid()
            &&
            ! posix_setuid($stat['uid'])
        ) {
            echo "Invalid user!!.\n";
            echo "Please execute it by root or HTTPD user.\n";
            exit(CB_EXIT_INVALID_USER);
        }
    }

    $_SESSION = [];
    global $_SESSION;

    // show error message in plain text.
    ini_set('html_errors', false);
    $G_state_set->set('error_page_type', 'plain');

    // update options which are overridden by the CLI SAPI
    ini_set('implicit_flush', true);
    ini_set('max_execution_time', 0);

    // STM-529 (Fixed bug GRB-17063)
    $_GET = [];
}

// *******************************************************************
// Session initialization completed.
// Tasks that depend on sessions can follow after this point.
// *******************************************************************

/*
 * =============================================================
 * Error & Assertion handling
 * =============================================================
 */

// initialize error & assertion settings for debug version.
require_once('fw/error_trace_log.csp');
if ($G_config_common->get('Global', 'debug') & ERROR_TRACE_LOG_FLAG_213) {
    error_reporting(E_ALL);
    assert_options(ASSERT_ACTIVE, 1);
    assert_options(ASSERT_CALLBACK,
        create_function('$file, $line, $expr',
            'cb_throw_error(E_PHP_ASSERTION, null, null, null,
array("file"=>$file, "line"=>$line, "expr"=>$expr));'));
}

// populate error code definitions used in framework.
require_once('fw/error_code.csp');

// install PHP error handler
require_once('fw/error_handler.csp');
set_error_handler(
    create_function('$errno, $errstr, $errfile, $errline',
        '$handler = CB_ErrorHandler::getInstance();
$handler->handlerForPhpError($errno, $errstr, $errfile, $errline);'
    ));

/*** GRREQ-155 start ***/
if (defined('ON_FOREST')) {
    if (isset($_GET['_password'])) {
        unset($_GET['_password']);
    }
}
/*** GRREQ-155 end   ***/

/**
 * @global array $G_INPUT
 */
$G_INPUT = [];

/**
 * @global array $G_INPUT_HIDDEN
 *
 * $G_INPUT は一部のシステム管理画面等でそのまま再利用されることがあるので、
 * csrf_ticket など、再利用して欲しくないパラメーターはこちらに退避しておく。
 */
$G_INPUT_HIDDEN = [];

/*
 * Check post size
 */

$request = null;
$max = null;
if ( ! cb_get_postsize_info($request, $max)) {
    if (array_key_exists("HTTP_X_FILE_UPLOAD_TICKET", $_SERVER)) {
        echo 'OVER_INI_SIZE';
        die();
    } else {
        cb_throw_error(E_COMMON_INVALID_POST_PARAM_SIZE, null,
            ['limit' => $max]);
    }
}
unset($request, $max);

/*
 * Convert character encodings of input strings into internal encoding.
 * $_POST, $_GET, and $_REQUEST will be cleared after this block of code.
 * An alternative global variable $G_INPUT provides properly encoded
 * input strings in turn.
 */

$G_RAW_INPUT = null;
if (strcasecmp(@$_SERVER['REQUEST_METHOD'], 'POST') == 0) {
    $G_RAW_INPUT = $_POST;
} else {
    $G_RAW_INPUT = $_GET;
}

$L_internal = mb_internal_encoding();
$L_input = cb_get_http_input_encoding();

// validate encodings of request parameters
cb_array_validate_encoding($_GET, $L_input);
cb_array_validate_encoding($_POST, $L_input);
cb_array_validate_encoding($_COOKIE, $L_input, false);
cb_files_validate_encoding($L_input);

if ($L_internal != $L_input) {
    foreach ($_POST as $key => $value) {
        if (is_array($value)) {
            $vv = [];
            foreach ($value as $key2 => $value2) {
                $vv[$key2] = (string)mb_convert_encoding($value2, $L_internal,
                    $L_input);
            }
            $G_INPUT[$key] = $vv;

        } else {
            $G_INPUT[$key] = (string)mb_convert_encoding($value, $L_internal,
                $L_input);
        }
    }
    foreach ($_GET as $key => $value) {
        if (is_array($value)) {
            $vv = [];
            foreach ($value as $key2 => $value2) {
                $vv[$key2] = (string)mb_convert_encoding($value2, $L_internal,
                    $L_input);
            }
            $G_INPUT[$key] = $vv;

        } else {
            $G_INPUT[$key] = (string)mb_convert_encoding($value, $L_internal,
                $L_input);
        }
    }

} else {
    if (strcasecmp(@$_SERVER['REQUEST_METHOD'], 'POST') == 0) {
        $G_INPUT = $_POST;
    } else {
        $G_INPUT = $_GET;
    }

    if ($G_state_set->get('command_line') === true) {
        $G_INPUT = [];
        for ($i = 1; $i < $argc; $i++) {
            $parts = explode("=", $argv[$i]);
            if (count($parts) == 2) {
                $matches = [];
                if (preg_match("/^'(.*)'$/", $parts[1], $matches)) {
                    $G_INPUT[$parts[0]] = $matches[1];
                } elseif (preg_match('/^"(.*)"$/', $parts[1], $matches)) {
                    $G_INPUT[$parts[0]] = $parts[1];
                } else {
                    $G_INPUT[$parts[0]] = $parts[1];
                }
            } else {
                $G_INPUT[$parts[0]] = "";
            }
        }
    }
}

// filename conversion
cb_convert_files($L_internal, $L_input);

unset($name, $lp, $vv);
unset($L_internal, $L_input, $_REQUEST);

// ajax flag
if (strcasecmp(@$_SERVER['REQUEST_METHOD'], 'POST') == 0) {
    if (array_key_exists('use_ajax', $G_INPUT) && $G_INPUT['use_ajax'] == 1
        && isset($_SERVER['HTTP_X_REQUESTED_WITH'])
        && $_SERVER['HTTP_X_REQUESTED_WITH'] == "XMLHttpRequest"
    ) {
        define('AJAX_REQUEST', 1);
        $G_state_set->set('copyright_should_be_written', false);
        $G_state_set->set('html_should_be_closed', false);
    }
}

// GTM-1452    schedule add dialog in kintone
if (array_key_exists('dialog_mode', $G_INPUT) && '1' == $G_INPUT['dialog_mode']
    && 'schedule/add' == cb_get_pagename()
) {
    $G_state_set->set('copyright_should_be_written', false);
    $G_state_set->set('html_should_be_closed', false);
    $G_state_set->set('kintone_dialog_mode', true);
}

/**
 * @global string $G_pagename
 */
$G_pagename = null;


/*
 * Check uploaded files
 * see http://www.php.net/manual/ja/features.file-upload.errors.php
 */
foreach ($_FILES as $key => $value) {
    if (array_key_exists('error', $value) && ($value['error'] != UPLOAD_ERR_OK)
        && ($value['error'] != UPLOAD_ERR_NO_FILE)
    ) {
        if (array_key_exists("HTTP_X_FILE_UPLOAD_TICKET", $_SERVER)) {
            echo 'UPLOAD_FAILED';
            die();
        }
        cb_throw_error(E_COMMON_UPLOAD_FAILED, null,
            ['file' => $value['name']]);
    }
}
unset($key, $value);

/*
 * Check private flowlet (flowlet that start with a "_").
 */
if (substr(basename(cb_get_pagename()), 0, 1) === '_') {
    cb_throw_error(E_COMMON_PRIVATE_FLOWLET, null,
        ['page' => $_SERVER['PHP_SELF']]);
}

unset($_POST, $_GET);

// Check Redirect Page
cb_check_redirect();

// KUNAIのアプリ制御: 接続を許可するかを判断する
if ((array_key_exists('HTTP_USER_AGENT', $_SERVER)
     && preg_match('/^Cybozu Mobile KUNAI for /', $_SERVER['HTTP_USER_AGENT']))
    || array_key_exists('CB_KUNAI_INFO', $_COOKIE)
) {
    require_once('kunai/Application.csp');
    $kunai_app = new \grn\kunai\Application();
    $kunai_system_profile = $kunai_app->getSystemProfile();
    if ($kunai_system_profile->getAttribute('disable_old_version', $value)) {
        if ($value) {
            // get kunai version
            if (array_key_exists('CB_KUNAI_INFO', $_COOKIE)) {
                $kunai_os_version = explode(' ',
                    trim(substr($_COOKIE['CB_KUNAI_INFO'], 10), ' '));
            } else {
                $kunai_os_version = explode(' ',
                    trim(substr($_SERVER['HTTP_USER_AGENT'], 24), ' '));
            }
            $kunai_os = $kunai_os_version[0];

            $kunai_version = '';
            if (count($kunai_os_version) > 1) {
                $kunai_version = $kunai_os_version[1];
            }

            // check kunai version
            $can_connect = true;
            $version_ini = $G_config_common->get('KUNAI', $kunai_os);
            if ($version_ini && $kunai_version) {
                $version_ini_ex = explode('.', $version_ini);
                $kunai_version_ex = explode('.', $kunai_version);
                for ($i = 0; $i < count($version_ini_ex); $i++) {
                    if ( ! is_numeric($version_ini_ex[$i])
                         || ! array_key_exists($i, $kunai_version_ex)
                         || $kunai_version_ex[$i] < $version_ini_ex[$i]
                    ) {
                        $can_connect = false;
                    } elseif ($kunai_version_ex[$i] == $version_ini_ex[$i]) {
                        continue;
                    }
                    break;
                }
            } else {
                $can_connect = false;
            }

            if ($can_connect === false) {
                // show error page
                $G_state_set->set('copyright_should_be_written', false);
                $G_state_set->set('html_should_be_closed', false);
                if (array_key_exists('CB_KUNAI_API_VERSION', $_COOKIE)) {
                    $G_state_set->set('error_page_type', 'mobile');
                } else {
                    $G_state_set->set('error_page_type', 'util_api');
                    header('Content-type: application/soap+xml; charset="utf-8"');
                }
                cb_throw_error('GRN_KUNAI_00007');
            }
        }
    }
}

if (array_key_exists('CB_KUNAI_INFO', $_COOKIE)) {
    $G_state_set->set('is_cybozu_browser', true);
    if (strpos(cb_get_pagename(), 'space') === false
        && strpos(cb_get_pagename(), 'bulletin') === false
        && strpos(cb_get_pagename(), 'report') === false
        && strpos(cb_get_pagename(), 'star/ajax_request') === false
        && strpos(cb_get_pagename(), 'js_resource') === false
        && strpos(cb_get_pagename(), 'favour') === false
    ) {
        //When a user accesses the pages other than the Space, Bulletin, Report application, 
        // the cookies assigned by Kunai are got expired.
        setcookie('CB_KUNAI_INFO', '', 1, '/');
        unset($_COOKIE['CB_KUNAI_INFO']);
    }
}

if (strpos(cb_get_pagename(), 'mobile')
    && grn\grn\mobile\MobileLicense::isLicensed()
) {
    require_once('grn/ui.csp');
    $ui_config_manager = GRN_UIConfigManager::getInstance();
    $ui_config = $ui_config_manager->getSystemConfig();
    if ( ! $ui_config->isEnableMobileView()
         && ! array_key_exists('CB_KUNAI_INFO', $_COOKIE)
    ) {
        cb_throw_error('GRN_MOBILE_00001');
    }
}

if (array_key_exists('CB_KUNAI_API_VERSION', $_COOKIE)) {
    $G_state_set->set('kunai_api_version', $_COOKIE['CB_KUNAI_API_VERSION']);
}

if (cb_is_forest() && ! $G_state_set->get('kintone_dialog_mode')) {
    $unsupported_warning = new UnsupportedWarning();
    $unsupported_warning->checkIE_Version()
                        ->checkTLS()
                        ->run();
}
