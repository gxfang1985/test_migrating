<?php

/**
 * Password utilities.
 *
 * @author      Yamamoto, Hirotaka      2004/07
 * @version     1.0
 * @package     fw.core
 */

/**
 * Provide utility routines to implement passwords.
 *
 * @package fw.core
 */
class CB_PasswordUtil
{
    /**
     * Don't instantiate this class.  Use static methods instead.
     *
     * @access private
     */
    function __construct()
    {
    }

    /**
     * @access private
     * @return string
     */
    private static function genSalt()
    {
        static $_init = false;
        if ( ! $_init) {
            mt_srand(time() ^ getmypid());
            $_init = true;
        }

        $b = [];
        for ($i = 0; $i < 4; $i++) {
            // ASCII 32-126 are printable
            $b[] = mt_rand(32, 126);
        }

        return pack('C4', $b[0], $b[1], $b[2], $b[3]);
    }

    /**
     * Hash password with 24bit salt string.  Hashed password
     * and used salt will be returned in an associative array
     * whose keys are "hash" and "salt" respectively.
     *
     * The salt will be generated everytime this is called.
     *
     * e.g.  array( 'hash' => 'XXXXXXXX', 'salt' => 'YYYY' );
     *
     * @param string $password Password to be hashed.
     *
     * @return array            An associative array whose elements are
     *                          the hashed string and the salt used.
     */
    public static function hashPassword($password)
    {
        $salt = CB_PasswordUtil::genSalt();
        $hash = sha1($salt . $password);

        return ['salt' => $salt, 'hash' => $hash];
    }

    /**
     * Validate user-supplied password.
     *
     * @param string $password   Input password to validate.
     * @param string $salt       Salt string previously returned by
     *                           {@link CB_PasswordUtil::hashPassword()}.
     * @param string $hash       Hashed password string previously returned
     *                           by {@link CB_PasswordUtil::hashPassword()}.
     *
     * @return bool              TRUE if $password is valid; otherwise FALSE.
     */
    public static function validatePassword($password, $salt, $hash)
    {
        return (strcasecmp(sha1($salt . $password), $hash) === 0);
    }
}


