<?php

/**
 * Provide configuration utilities.
 *
 * @author  Yamamoto, Hirotaka  2004/10
 * @version 1.0
 * @package fw.core
 */

/**
 * Read configurations from a directory.
 *
 * This class will look in a directory for "NNxxx.ini" files.
 * Let the directory contain "03mail.ini" and "93todo.ini" files.
 * Then this class will have [mail] and [todo] sections of configurations
 * read from each files.  The configuration sections will be ordered
 * as the preceding digits (i.e., "03" and "93").
 *
 * This is suitable to configure pluggable modules that may have their
 * own configurations.  Such an module may add its ini file to
 * a directory to dynamically add its configurations.
 *
 * @package fw.core
 */
class CB_ConfigDirectory
{
    /**
     * @access protected
     */
    var $_dir;

    /**
     * @access protected
     * @var    array
     */
    var $_config = [];

    /**
     * @param string $dir The configuration directory to be read.
     */
    function __construct($dir)
    {
        //assert( 'is_dir( $dir )' );
        $this->_dir = $dir;
        $this->reload();
    }

    function reload()
    {
        $dp = @opendir($this->_dir);
        if ($dp === false) {
            return;
        }

        $sections = [];
        while (($file = readdir($dp)) !== false) {
            if (($file === '.') || ($file === '..')) {
                continue;
            }

            // File names should be in form "NNxxxx.ini".
            // e.g., "03mail.ini"
            if (preg_match('/^[0-9][0-9].*\.ini$/', $file)) {
                $sections[$file] = parse_ini_file($this->_dir . '/' . $file);
            }
        }

        closedir($dp);

        ksort($sections);
        foreach ($sections as $key => $value) {
            $len = strlen($key) - 6;
            $this->_config[substr($key, 2, $len)] = $value;
        }
    }

    /**
     * Retrieve the configuration value for the named section and key.
     *
     * @param string $section The configuration section.
     * @param string $key     The configuration key.
     *
     * @return mixed            FALSE if no such secion or key; otherwise
     *                          the value string of the named configuration.
     */
    function &get($section, $key)
    {
        if ( ! array_key_exists($section, $this->_config)) {
            $ret = false;

            return $ret;
        }

        $ret = false;
        $c = $this->_config[$section];
        if (array_key_exists($key, $c)) {
            $ret = $c[$key];
        }

        return $ret;
    }

    /**
     * Retrieve all configurations for the named section.
     *
     * @param string $section The configuration section.
     *
     * @return mixed           FALSE if no such section.
     *                         otherwise an array holding configurations.
     */
    function getSection($section)
    {
        if ( ! array_key_exists($section, $this->_config)) {
            return false;
        }

        return $this->_config[$section];
    }

    /**
     * Acquire all section names in order.
     *
     * @return array   Array of section names.
     */
    function getSections()
    {
        return array_keys($this->_config);
    }
}


