<?php
require_once('fw/cydec.csp');

/**
 * Class for audit service on Forest
 */
class CB_AuditUtil
{
    private static $instance = null;
    private $_db;
    const FORWARDED_HEADER = 'HTTP_X_FORWARDED_FOR';
    const TIMEZONE = 'UTC';
    const LOCALE = 'en';
    const SERVICE_NAME = 'garoon';
    const PRIORITY_INFORMATION = 0;
    const PRIORITY_SEVERITY = 1;

    /* Slash
     * CB_LOGGER_ERROR   -> FAILED
     * CB_LOGGER_WARNING -> ERROR
     * otherwise         -> SUCCESS
     */
    const SUCCESS = 'SUCCESS';
    const FAILED = 'FAILED';
    const ERROR = 'ERROR';

    private function __construct()
    {
        $util = CB_CyDECUtil::getInstance();
        $this->_db = $util->getDatabase('audit', true);
    }

    /**
     * @return CB_AuditUtil
     */
    public static function getInstance()
    {
        if (is_null(self::$instance)) {
            self::$instance = new static();
        }

        return self::$instance;
    }

    /**
     * @param CB_LogEvent $event
     */
    public function log(CB_LogEvent $event)
    {
        $query = $this->createQuery($this->_db, $event);

        $this->_db->query($query);
    }

    /**
     * @param MySQLi      $db
     * @param CB_LogEvent $event
     *
     * @return string
     */
    private function createQuery(MySQLi $db, CB_LogEvent $event)
    {
        $userId = $this->getUserId($event);
        $userIdQuery = is_null($userId) ? "userId=NULL,"
            : "userId='" . $db->real_escape_string($userId) . "',";
        //When PHP Process Owner is "nobody" ($userId is NULL), bind $remoteAddr = ''
        $remoteAddr = is_null($userId) ? '' : $this->getRemoteAddr();

        $query = "INSERT INTO _audit_log SET " .
                 "createdAt=UTC_TIMESTAMP()," .
                 $userIdQuery .
                 "remoteAddr='" . $db->real_escape_string($remoteAddr) . "'," .
                 "serviceName='" . $db->real_escape_string(self::SERVICE_NAME)
                 . "'," .
                 "applicationName='"
                 . $db->real_escape_string($this->getApplicationName($event))
                 . "'," .
                 "priority="
                 . $db->real_escape_string($this->getPriority($event)) . "," .
                 "action='" . $db->real_escape_string($event->get('action'))
                 . "'," .
                 "result='" . $db->real_escape_string($this->getResult($event))
                 . "'," .
                 "errorNumber='"
                 . $db->real_escape_string($event->get('error_code')) . "'," .
                 "information='" . $db->real_escape_string($event->get('msg'))
                 . "'";

        return $query;
    }

    private $_userIds = [];

    /**
     * @param CB_LogEvent $event
     *
     * @return string  return null before login
     */
    private function getUserId(CB_LogEvent $event)
    {
        $account = $event->get('account');
        if ( ! is_string($account) || strlen($account) === 0) {
            return null;
        }

        if ( ! isset($this->_userIds[$account])) {
            global $G_container_base;
            /** @var GRN_Uum $uum */
            $uum = $G_container_base->getInstance('uum');
            $user
                = $uum->getUserByForeignKey($event->get('account'));
            $this->_userIds[$account] = $user ? $user->get('slash') : null;
        }

        return $this->_userIds[$account];
    }

    /**
     * @return string
     */
    public function getRemoteAddr()
    {
        if (isset($_SERVER[self::FORWARDED_HEADER])) {
            return $_SERVER[self::FORWARDED_HEADER];
        }

        // for development
        return isset($_SERVER['REMOTE_ADDR']) ? $_SERVER['REMOTE_ADDR'] : '';
    }

    /**
     * @param CB_LogEvent $event
     *
     * @return string
     */
    private function getApplicationName(CB_LogEvent $event)
    {
        $logic = GRN_LoggingLogic::getInstance();

        return $logic->getCategoryName($event->get('category'), self::LOCALE);
    }

    /**
     * @param CB_LogEvent $event
     *
     * @return int
     */
    private function getPriority(CB_LogEvent $event)
    {
        if ($event->get('priority') === CB_LOGGER_ERROR) {
            return self::PRIORITY_SEVERITY;
        }

        return self::PRIORITY_INFORMATION;
    }

    /**
     * @param CB_LogEvent $event
     *
     * @return string
     */
    private function getResult(CB_LogEvent $event)
    {
        $error_level = $event->get('priority');
        if ($error_level === CB_LOGGER_ERROR) {
            return self::FAILED;
        } elseif ($error_level === CB_LOGGER_WARNING) {
            return self::ERROR;
        }

        return self::SUCCESS;
    }
}
