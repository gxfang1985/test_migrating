<?php

require_once('Net/Socket.php');

class CB_MailSocketReader
{
    var $_socket;
    var $_read_timeout;
    var $_read_buffer_size;
    var $_read_buffer;
    var $_listener = null;
    var $_logger = null;

    function __construct($socket, $read_timeout, $read_buffer_size)
    {
        $this->_socket = $socket;
        $this->_read_timeout = $read_timeout;
        $this->_read_buffer_size = $read_buffer_size;
        $this->_read_buffer = '';
    }

    function setLogger($logger)
    {
        $this->_logger = $logger;
    }

    function setErrorListener($listener)
    {
        $this->_listener = $listener;
    }

    function readLine()
    {
        // set non blocking
        $wasBlocking = $this->_socket->isBlocking();
        if ($wasBlocking) {
            $this->_socket->setBlocking(false);
        }

        // read
        $expire = time() + $this->_read_timeout;
        while (time() <= $expire) {
            // getline if line exists
            $line = '';
            if (($end = strpos($this->_read_buffer, "\r\n")) !== false) {
                $line = substr($this->_read_buffer, 0, $end);
                if (strlen($this->_read_buffer) > ($end + 2)) {
                    $this->_read_buffer = substr($this->_read_buffer, $end + 2);
                } else {
                    $this->_read_buffer = '';
                }

                // return
                $this->_socket->setBlocking($wasBlocking);

                return $line;
            }

            // read data into temporary buffer
            $temp = '';
            if (PEAR::isError(
                $temp = $this->_socket->read($this->_read_buffer_size))
            ) {
                if ( ! is_null($this->_listener)) {
                    $this->_listener->error(-1,
                        cb_msg('fw.mail', 'Failed to read data.'));
                }
                if ( ! is_null($this->_logger)) {
                    $this->_logger->debug($temp->getMessage());
                }

                // return
                $this->_socket->setBlocking($wasBlocking);

                return $temp;
            }

            // debug
            if ( ! is_null($this->_logger)) {
                if ($this->_logger->isDebugEnabled()) {
                    $this->_logger->debug("S: $temp");
                }
            }

            // append temporary to read buffer
            $this->_read_buffer .= $temp;
        }

        // expired
        if ( ! is_null($this->_listener)) {
            $this->_listener->error(-1,
                cb_msg('fw.mail', 'Failed to read data.'));
        }
        if ( ! is_null($this->_logger)) {
            $this->_logger->debug('Read expired.');
        }

        // return
        $this->_socket->setBlocking($wasBlocking);

        return new PEAR_Error();
    }

    function read($size)
    {
        if ( ! is_numeric($size) || $size < 1) {
            return false;
        }

        // set non blocking
        $wasBlocking = $this->_socket->isBlocking();
        if ($wasBlocking) {
            $this->_socket->setBlocking(false);
        }

        // read
        $expire = time() + $this->_read_timeout;
        while (time() <= $expire) {
            // get data
            if (strlen($this->_read_buffer) > $size) {
                $data = substr($this->_read_buffer, 0, $size);
                $this->_read_buffer = substr($this->_read_buffer, $size);

                // return
                $this->_socket->setBlocking($wasBlocking);

                return $data;
            } elseif (strlen($this->_read_buffer) == $size) {
                $data = $this->_read_buffer;
                $this->_read_buffer = '';

                // return
                $this->_socket->setBlocking($wasBlocking);

                return $data;
            }

            // read data into temporary buffer
            $temp = '';
            if (PEAR::isError(
                $temp = $this->_socket->read($this->_read_buffer_size))
            ) {
                if ( ! is_null($this->_listener)) {
                    $this->_listener->error(-1,
                        cb_msg('fw.mail', 'Failed to read data.'));
                }
                if ( ! is_null($this->_logger)) {
                    $this->_logger->debug($temp->getMessage());
                }

                // return
                $this->_socket->setBlocking($wasBlocking);

                return $temp;
            }

            // debug
            if ( ! is_null($this->_logger)) {
                if ($this->_logger->isDebugEnabled()) {
                    $this->_logger->debug("S: $temp");
                }
            }

            // append temporary to read buffer
            $this->_read_buffer .= $temp;
        }

        // expired
        if ( ! is_null($this->_listener)) {
            $this->_listener->error(-1,
                cb_msg('fw.mail', 'Failed to read data.'));
        }
        if ( ! is_null($this->_logger)) {
            $this->_logger->debug('Read timeout.');
        }

        // return
        $this->_socket->setBlocking($wasBlocking);

        return new PEAR_Error();
    }
}


