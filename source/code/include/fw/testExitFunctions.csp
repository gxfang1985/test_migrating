<?php
require_once("grn/CBException.csp");
/**
 * エラーページを表示して終了する. 無引数で呼び出すと Internal Error.
 * NEVER RETURN.
 *
 * @param string $code      The error code.
 * @param array  $diagnosis Parameters for diagnosis message.
 * @param array  $cause     Parameters for cause message.
 * @param array  $counter   Parameters for counter-measure message.
 * @param array  $developer Parameters for developer information.
 */
function cb_throw_error(
    $code = 'FW00001',
    $diagnosis = null,
    $cause = null,
    $counter = null,
    $developer = null,
    $alternative_resources = null
) {
    $exception = new CBException(var_export([
        "cb_throw_error",
        $code,
        $diagnosis,
        $cause,
        $counter,
        $developer,
        $alternative_resources
    ], true));
    $exception->setProperties([
        "cb_throw_error",
        $code,
        $diagnosis,
        $cause,
        $counter,
        $developer,
        $alternative_resources
    ]);
    throw $exception;
}

/**
 * Graceful exit function.  This function suppresses any output to
 * avoid appending garbage data after downloading contents, but
 * commits databases and/or filemanagers.
 *
 * Typically one should call this after CB_ServerFile::download()
 * or after exporting some data in CSV format.
 *
 * @param int $status
 * The exit status, or <var>null</var> to do nothing before exit.
 */
function cb_safe_exit($status = null)
{
    $exception = new CBException(var_export(["cb_safe_exit", $status], true));
    $exception->setProperties(["cb_safe_exit", $status]);
    throw $exception;
}

/**
 * Switch to display named page instead of current one, then exit.
 * The page name must be followed by ".csp" .
 *
 * @param string $__page__ The script name deployed in doc_root, with
 *                         filename extension.
 * @param int    $__status__
 *                         The exit status, or <var>null</var> to do nothing before exit.
 *
 * @return             NEVER return from this function.
 */
function cb_switch_page($__page__, $__status__ = null)
{
    $exception = new CBException(var_export([
        "cb_switch_page",
        $__page__,
        $__status__
    ], true));
    $exception->setProperties(["cb_switch_page", $__page__, $__status__]);
    throw $exception;
}

/**
 * Issue 'Location' HTTP header to redirect, then safely exit the
 * script execution.  This function will call {@link cb_safe_exit}
 * after the header is issued.
 * <br>
 * NEVER RETURN.
 *
 * @param string $url A Fully Qualified URL such as 'http://hoge.com/scripts/php.exe/foo'.
 */
function cb_redirect_to_url($url, $strip_fragment = true)
{
    $exception = new CBException(var_export([
        "cb_redirect_to_url",
        $url,
        $strip,
        $fragment
    ], true));
    $exception->setProperties(["cb_redirect_to_url", $url, $strip, $fragment]);
    throw $exception;
}


/**
 * Issue 'Location' HTTP header to redirect, then safely exit the
 * script execution.  This function will call {@link cb_safe_exit}
 * after the header is issued.
 * <br>
 * NEVER RETURN.
 *
 * @param string $page
 *                               The destination page.
 * @param array  $args
 *                               An associative array of GET parameters, or <var>null</var>.<br>
 *                               e.g.) array('uid'=>20, 'view'=>'foo')
 * @param string $fragment
 *                               Optional fragment of the URL.  If not NULL, the returned URL will
 *                               be followed by '#' . urlencode($fragment)
 * @param string $postfix        Optional postfix string after $page.
 * @param bool   $ignore_referer Ingore REFERER request header.
 */
function cb_redirect(
    $page,
    $args = null,
    $fragment = null,
    $postfix = null,
    $ignore_referer = false
) {
    $exception = new CBException(var_export([
        "cb_redirect",
        $page,
        $args,
        $fragment,
        $postfix,
        $ignore_referer
    ], true));
    $exception->setProperties([
        "cb_redirect",
        $page,
        $args,
        $fragment,
        $postfix,
        $ignore_referer
    ]);
    throw $exception;
}
