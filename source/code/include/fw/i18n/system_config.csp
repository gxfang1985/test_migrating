<?php

require_once("fw/i18n/language_status.csp");

class CB_I18N_SystemConfig
{
    static private $DISPLAY_LANGUAGE_KEY = "display-language";
    static private $TIMEZONE_KEY = "timezone";
    static private $PRINT_LONG_DATE_FORMAT_KEY = "print-long-date-format";
    static private $PRINT_SHORT_DATE_FORMAT_KEY = "print-short-date-format";
    static private $PRINT_TIME_FORMAT_KEY = "print-time-format";
    static private $PRINT_LANGUAGE_KEY = "print-language";
    static private $LOCALE_CHANGE_KEY = "locale-change";
    static private $BASE_CHANGE_KEY = "base-change";

    static public $LOCALE_CHANGEABLE = 1;
    static public $LOCALE_UNCHANGEABLE = 0;

    static public $BASE_CHANGEABLE = 1;
    static public $BASE_UNCHANGEABLE = 0;

    static public $NICKNAME_KEY = "nickname";
    static public $NICKNAME_ON = 1;
    static public $NICKNAME_OFF = 0;

    static private function getSystemProfile()
    {
        require_once('fw/profile.csp');
        $profile = cb_get_system_profile("cb.i18n.system");

        return $profile;
    }

    static public function getDisplayLanguages()
    {
        return CB_LanguageManager::getAvailableLanguages();
    }

    static public function setDisplayLanguages($language_codes)
    {
        $all_languages = CB_LanguageStatus::selectAll();

        $code_cache = [];

        foreach ($all_languages as $language) {
            $code_cache[] = $language->getLanguage();
            if (array_search($language->getLanguage(), $language_codes)
                === false
            ) {
                $language->setStatus(CB_LanguageStatus::$LANGUAGE_UNAVAILABLE);
            } else {
                $language->setStatus(CB_LanguageStatus::$LANGUAGE_AVAILABLE);
            }
            $language->update();
        }

        foreach ($language_codes as $language_code) {
            if (array_search($language_code, $code_cache) === false) {
                $language = new CB_LanguageStatus([
                    "col_language" => $language_code,
                    "col_status"   => CB_LanguageStatus::$LANGUAGE_AVAILABLE,
                ]);
                $language->insert();
            }
        }
    }

    public static function getDisplayTimezones()
    {
        $profile = self::getSystemProfile();
        if ($profile->getAttribute(self::$TIMEZONE_KEY, $value)) {
            return $value;
        } else {
            // GRN2-3287
            require_once('fw/module.csp');
            $module = new CB_ModuleBase('fw.i18n.timezone');
            $profile = $module->getSystemProfile();
            $profile->getAttribute("default_timezone", $default_timezone);

            if ( ! $default_timezone) {
                global $G_config_common;
                $default_timezone = $G_config_common->get('I18N',
                    'default_timezone');
            }
            // GRN2-3287

            $ret = [];
            if (CB_I18N::isAvailableTimezone($default_timezone)) {
                $ret[] = $default_timezone;
            }

            return $ret;
        }
    }

    public static function setDisplayTimezones($timezones)
    {
        foreach ($timezones as $key => $timezone) {
            if ( ! CB_I18N::isAvailableTimezone($timezone)) {
                unset($timezones[$key]);
            }
        }

        $profile = self::getSystemProfile();
        if ($profile->getAttribute(self::$TIMEZONE_KEY, $dummy)) {
            $profile->updateAttribute(self::$TIMEZONE_KEY, $timezones);
        } else {
            $profile->createAttribute(self::$TIMEZONE_KEY, $timezones);
        }
    }

    static private function getDefaultLongDateFormat()
    {
        return cb_msg("fw.date", "browser_long_date_format", null,
            static::getDefaultLanguage());
    }

    static private function getDefaultShortDateFormat()
    {
        return cb_msg("fw.date", "browser_short_date_format", null,
            static::getDefaultLanguage());
    }

    static private function getDefaultTimeFormat()
    {
        return cb_msg("fw.date", "browser_time_format", null,
            static::getDefaultLanguage());
    }

    static private function getDefaultLanguage()
    {
        global $G_config_common;

        return $G_config_common->get("I18N", "default_locale");
    }

    /**
     *
     * @return string like this "&&year&&/&&mon&&/&&mday&&(&&wdayshort&&)"
     */
    static public function getPrintLongDateFormat()
    {
        return static::helperGetProfile(static::$PRINT_LONG_DATE_FORMAT_KEY,
            static::getDefaultLongDateFormat());
    }

    static public function setPrintLongDateFormat($format)
    {
        static::helperSetProfile(self::$PRINT_LONG_DATE_FORMAT_KEY, $format);
    }

    /**
     *
     * @return string like this "&&year&&/&&mon&&/&&mday&&(&&wdayshort&&)"
     */
    static public function getPrintShortDateFormat()
    {
        return static::helperGetProfile(static::$PRINT_SHORT_DATE_FORMAT_KEY,
            static::getDefaultShortDateFormat());
    }

    static public function setPrintShortDateFormat($format)
    {
        static::helperSetProfile(self::$PRINT_SHORT_DATE_FORMAT_KEY, $format);
    }

    /**
     *
     * @return string like this "&&year&&/&&mon&&/&&mday&&(&&wdayshort&&)"
     */
    static public function getPrintTimeFormat()
    {
        return static::helperGetProfile(static::$PRINT_TIME_FORMAT_KEY,
            static::getDefaultTimeFormat());
    }

    static public function setPrintTimeFormat($format)
    {
        static::helperSetProfile(self::$PRINT_TIME_FORMAT_KEY, $format);
    }

    /**
     *
     * @return string like this "&&year&&/&&mon&&/&&mday&&(&&wdayshort&&)"
     */
    static public function getPrintLanguage()
    {
        return static::helperGetProfile(static::$PRINT_LANGUAGE_KEY,
            static::getDefaultLanguage());
    }

    static public function setPrintLanguage($language_code)
    {
        static::helperSetProfile(self::$PRINT_LANGUAGE_KEY, $language_code);
    }

    static private function helperSetProfile($key, $value)
    {
        $profile = self::getSystemProfile();
        if ($profile->getAttribute($key, $dummy)) {
            $profile->updateAttribute($key, $value);
        } else {
            $profile->createAttribute($key, $value);
        }
    }

    static private function helperGetProfile($key, $default)
    {
        $profile = self::getSystemProfile();
        if ($profile->getAttribute($key, $data)) {
            return $data;
        }

        return $default;
    }

    static public function isUserChangeableLocale()
    {
        $profile = self::getSystemProfile();
        if ( ! $profile->getAttribute(self::$LOCALE_CHANGE_KEY, $setting)) {
            return self::$LOCALE_CHANGEABLE;
        }

        return $setting;
    }

    static public function setUserChangeableLocale($setting)
    {
        assert('$setting == self::$LOCALE_CHANGEABLE || $setting == self::$LOCALE_UNCHANGEABLE');
        $profile = self::getSystemProfile();
        if ($profile->getAttribute(self::$LOCALE_CHANGE_KEY, $dummy)) {
            $profile->updateAttribute(self::$LOCALE_CHANGE_KEY, $setting);
        } else {
            $profile->createAttribute(self::$LOCALE_CHANGE_KEY, $setting);
        }
    }

    static public function isUserChangeableBase()
    {
        $profile = self::getSystemProfile();
        if ( ! $profile->getAttribute(self::$BASE_CHANGE_KEY, $setting)) {
            return self::$BASE_CHANGEABLE;
        }

        return $setting;

    }

    static public function setUserChangeableBase($setting)
    {
        assert('$setting == self::$BASE_CHANGEABLE || $setting == self::$BASE_UNCHANGEABLE');
        $profile = self::getSystemProfile();
        if ($profile->getAttribute(self::$BASE_CHANGE_KEY, $dummy)) {
            $profile->updateAttribute(self::$BASE_CHANGE_KEY, $setting);
        } else {
            $profile->createAttribute(self::$BASE_CHANGE_KEY, $setting);
        }
    }

    static public function isNickname()
    {
        if (defined('ON_FOREST')) {
            return true;
        }

        $profile = self::getSystemProfile();
        if ( ! $profile->getAttribute(self::$NICKNAME_KEY, $setting)) {
            return self::$NICKNAME_OFF;
        }

        return $setting;

    }

    static public function setNickname($setting)
    {
        assert('$setting == self::$NICKNAME_ON || $setting == self::$NICKNAME_OFF');
        $profile = self::getSystemProfile();

        if ($profile->getAttribute(self::$NICKNAME_KEY, $oldSetting)) {
            if ($oldSetting == self::$NICKNAME_ON
                && $setting == self::$NICKNAME_OFF
            ) {
                self::initNicknameFunction();
            }
            $profile->updateAttribute(self::$NICKNAME_KEY, $setting);
        } else {
            if ($setting == self::$NICKNAME_ON) {
                self::initNicknameFunction();
            }
            $profile->createAttribute(self::$NICKNAME_KEY, $setting);
        }
    }

    static public function initNicknameFunction()
    {
        global $G_container_base;
        $dbconn = $G_container_base->getInstance("dbconn");

        require_once("fw/i18n/locale.csp");
        $defaultLanguageId
            = CB_LanguageManager::getLanguageId(CB_LocaleManager::getDefaultLanguage());

        require_once("grn/DAOFactory.csp");
        $daoFactory = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);

        $userNameLanguageDao = $daoFactory->getCbUserNameLanguageDAO();
        $userNameLanguageDao->initializeData(["db" => $dbconn],
            $defaultLanguageId);

        $userDao = $daoFactory->getCbUserDAO();
        $userDao->resetNicknameAndDisplayNameLanguage(["db" => $dbconn],
            $defaultLanguageId);
    }

}
