<?php

class CB_Locale
{
    var $_id = null;
    var $col_name;              //array( 'type' => "char" );
    var $col_code;              //array( 'type' => "char" );
    /**
     *
     * Code of the languages such as ja, en,...
     * This value is interpretted to _id of tab_cb_language_status when UPDATE/INSERT query is executed.
     *
     * @var string
     */
    var $col_language;          //array( 'type' => "relation", "to" => "CB_Locale_Status" );
    var $col_long_date_format;  //array( 'type' => "char" );
    var $col_short_date_format; //array( 'type' => "char" );
    var $col_time_format;       //array( 'type' => "char" );

    public static $NOT_FOUND = null;

    public function toArray()
    {
        return [
            "_id"                   => $this->getId(),
            "col_name"              => $this->getName(),
            "col_code"              => $this->getCode(),
            "col_language"          => $this->getLanguage(),
            "col_long_date_format"  => $this->getLongDateFormat(),
            "col_short_date_format" => $this->getShortDateFormat(),
            "col_time_format"       => $this->getTimeFormat(),

        ];
    }

    private function toLogParam()
    {
        return [
            "id"                => $this->getId(),
            "name"              => $this->getName(),
            "code"              => $this->getCode(),
            "language_code"     => $this->getLanguageCode(),
            "long_date_format"  => $this->getLongDateFormat(),
            "short_date_format" => $this->getShortDateFormat(),
            "time_format"       => $this->getTimeFormat(),

        ];
    }

    public function __construct($array)
    {
        if (array_key_exists("_id", $array)) {
            $this->_id = $array["_id"];
        }
        assert('array_key_exists( "col_name", $array)');
        $this->setName($array["col_name"]);

        assert('array_key_exists( "col_code", $array)');
        $this->setCode($array["col_code"]);

        assert('array_key_exists( "col_language", $array)');
        $this->setLanguage($array["col_language"]);

        assert('array_key_exists( "col_long_date_format", $array)');
        $this->setLongDateFormat($array["col_long_date_format"]);

        assert('array_key_exists( "col_short_date_format", $array)');
        $this->setShortDateFormat($array["col_short_date_format"]);

        assert('array_key_exists( "col_time_format", $array)');
        $this->setTimeFormat($array["col_time_format"]);
    }

    public function getId()
    {
        return $this->_id;
    }

    public function setName($name)
    {
        assert('is_string($name)');
        $this->col_name = $name;
    }

    public function getName()
    {
        return $this->col_name;
    }

    public function setCode($code)
    {
        assert('is_string($code)');
        $this->col_code = $code;
    }

    public function getCode()
    {
        return $this->col_code;
    }

    /**
     *
     * @param $language the code of language such as ja, en....
     */
    public function setLanguage($language)
    {
        if ( ! is_numeric($language)) {
            $language = CB_LanguageManager::getLanguageId($language);
        }
        $this->col_language = $language;
    }

    public function getLanguage()
    {
        return $this->col_language;
    }

    public function getLanguageCode()
    {
        return CB_LanguageManager::getLanguageCode($this->col_language);
    }

    public function setLongDateFormat($longDateFormat)
    {
        assert('is_string($longDateFormat)');
        $this->col_long_date_format = $longDateFormat;
    }

    public function getLongDateFormat()
    {
        return $this->col_long_date_format;
    }

    public function setShortDateFormat($shortDateFormat)
    {
        assert('is_string($shortDateFormat)');
        $this->col_short_date_format = $shortDateFormat;
    }

    public function getShortDateFormat()
    {
        return $this->col_short_date_format;
    }

    public function setTimeFormat($timeFormat)
    {
        assert('is_string($timeFormat)');
        $this->col_time_format = $timeFormat;
    }

    public function getTimeFormat()
    {
        return $this->col_time_format;
    }

    public function getLocalName($language = null)
    {
        if (is_null($language)) {
            require_once("fw/i18n.csp");
            $i18n = CB_I18N::getInstance();
            $language = $i18n->getCurrentLanguage();
        }

        $local_name = CB_LocaleManager::getLocaleName($this->getId(),
            $language);
        if (is_null($local_name)) {
            return $this->getName();
        } else {
            return $local_name->getName();
        }
    }

    public function update(CB_DatabaseConnection $dbconn = null)
    {
        if (is_null($dbconn)) {
            global $G_container_base;
            $dbconn = $G_container_base->getInstance("dbconn");
        }
        $query = "UPDATE tab_cb_locale SET "
                 . sprintf("col_name = '%s', ",
                $dbconn->escape($this->getName()))
                 . sprintf("col_code = '%s', ",
                $dbconn->escape($this->getCode()))
                 . (is_null($this->getLanguage())
                ? "col_language = NULL, "
                : sprintf("col_language = '%s', ",
                    $dbconn->escape($this->getLanguage())))
                 . sprintf("col_long_date_format = '%s', ",
                $dbconn->escape($this->getLongDateFormat()))
                 . sprintf("col_short_date_format = '%s', ",
                $dbconn->escape($this->getShortDateFormat()))
                 . sprintf("col_time_format = '%s' ",
                $dbconn->escape($this->getTimeFormat()))
                 . sprintf("WHERE _id = '%s'", $dbconn->escape($this->getId()))
                 . ";";

        $dbconn->query($query);

        $logger = CB_LocaleManager::getLogger();
        $param_list = $this->toLogParam();
        $logger->noticeEx("modify", "locale", $param_list);
    }

    public function insert(CB_DatabaseConnection $dbconn = null)
    {
        if (is_null($dbconn)) {
            global $G_container_base;
            $dbconn = $G_container_base->getInstance("dbconn");
        }
        $query = "INSERT INTO tab_cb_locale SET "
                 . sprintf("col_name = '%s', ",
                $dbconn->escape($this->getName()))
                 . sprintf("col_code = '%s', ",
                $dbconn->escape($this->getCode()))
                 . (is_null($this->getLanguage())
                ? "col_language = NULL, "
                : sprintf("col_language = '%s', ",
                    $dbconn->escape($this->getLanguage())))
                 . sprintf("col_long_date_format = '%s', ",
                $dbconn->escape($this->getLongDateFormat()))
                 . sprintf("col_short_date_format = '%s', ",
                $dbconn->escape($this->getShortDateFormat()))
                 . sprintf("col_time_format = '%s' ",
                $dbconn->escape($this->getTimeFormat()))
                 . ";";

        $dbconn->query($query);
        $this->_id = $dbconn->get_insert_id();

        $logger = CB_LocaleManager::getLogger();
        $param_list = $this->toLogParam();
        $logger->noticeEx("create", "locale", $param_list);
    }

    public function delete(CB_DatabaseConnection $dbconn = null)
    {
        if (is_null($dbconn)) {
            global $G_container_base;
            $dbconn = $G_container_base->getInstance("dbconn");
        }
        $query = sprintf("DELETE FROM tab_cb_locale WHERE _id = '%s';",
            $this->getId());
        $dbconn->query($query);

        $logger = CB_LocaleManager::getLogger();
        $param_list = $this->toLogParam();
        $logger->noticeEx("delete", "locale", $param_list);
    }

    public static function createTable(CB_DatabaseConnection $dbconn)
    {
        if (is_null($dbconn)) {
            global $G_container_base;
            $dbconn = $G_container_base->getInstance("dbconn");
        }
        $query = "DROP TABLE IF EXISTS tab_cb_locale;";
        $dbconn->query($query);

        $query = "CREATE TABLE tab_cb_locale ("
                 . "_id BIGINT(20) NOT NULL AUTO_INCREMENT, "
                 . "col_name VARCHAR(100) COLLATE utf8_general_cs NOT NULL, "
                 . "col_code VARCHAR(100) COLLATE utf8_general_cs NOT NULL, "
                 . "col_language BIGINT(20) DEFAULT NULL, "
                 . "col_long_date_format VARCHAR(100) COLLATE utf8_general_cs NOT NULL,"
                 . "col_short_date_format VARCHAR(100) COLLATE utf8_general_cs NOT NULL,"
                 . "col_time_format VARCHAR(100) COLLATE utf8_general_cs NOT NULL,"
                 . "PRIMARY KEY (_id), "
                 . "UNIQUE KEY idx_code (col_code), "
                 . "KEY idx_language (col_language),"
                 . "CONSTRAINT cns_cb_locale_language FOREIGN KEY (col_language) REFERENCES tab_cb_language_status (_id) ON DELETE SET NULL"
                 . ") ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_general_cs;";

        $dbconn->query($query);
    }

    /**
     *
     * @global                      $G_container_base
     *
     * @param string                $id
     * @param CB_DatabaseConnection $dbconn
     *
     * @return CB_Locale
     */
    public static function select($id, CB_DatabaseConnection $dbconn = null)
    {
        if (is_null($dbconn)) {
            global $G_container_base;
            $dbconn = $G_container_base->getInstance("dbconn");
        }
        if (is_null($id)) {
            return CB_Locale::$NOT_FOUND;
        }

        $escaped_id = $dbconn->escape($id);
        $query = "SELECT * FROM tab_cb_locale WHERE _id='{$escaped_id}';";

        $result = $dbconn->query($query);
        $row = $dbconn->fetch_assoc($result);
        $dbconn->free_result($result);

        if ($row === false) {
            return CB_Locale::$NOT_FOUND;
        }

        return new CB_Locale($row);
    }

    /**
     *
     * @global                      $G_container_base
     *
     * @param string                $code
     * @param CB_DatabaseConnection $dbconn
     *
     * @return CB_Locale
     */
    public static function selectByCode(
        $code,
        CB_DatabaseConnection $dbconn = null
    ) {
        if (is_null($dbconn)) {
            global $G_container_base;
            $dbconn = $G_container_base->getInstance("dbconn");
        }

        $escaped_code = $dbconn->escape($code);
        $query
            = "SELECT * FROM tab_cb_locale WHERE col_code='{$escaped_code}';";

        $result = $dbconn->query($query);
        $row = $dbconn->fetch_assoc($result);
        $dbconn->free_result($result);

        if ($row === false) {
            return null;
        }

        return new CB_Locale($row);
    }
}

class CB_LocaleLocal
{
    var $locale_id = null;
    var $language_id;
    var $col_name;

    private function toLogParam()
    {
        return [
            "locale_id"     => $this->getLocaleId(),
            "language_code" => $this->getLanguageCode(),
            "name"          => $this->getName()
        ];
    }

    public function __construct($array)
    {
        if (array_key_exists("locale_id", $array)) {
            $this->locale_id = $array["locale_id"];
        }
        $this->setLanguage($array["language_id"]);
        $this->setName($array["col_name"]);
    }

    public function getLocaleId()
    {
        return $this->locale_id;
    }

    public function setLanguage($language)
    {
        if ( ! is_numeric($language)) {
            $language = CB_LanguageManager::getLanguageId($language);
        }
        $this->language_id = $language;
    }

    public function getLanguageId()
    {
        return $this->language_id;
    }

    public function getLanguageCode()
    {
        return CB_LanguageManager::getLanguageCode($this->language_id);
    }

    public function setName($name)
    {
        assert('is_string($name)');
        $this->col_name = $name;
    }

    public function getName()
    {
        return $this->col_name;
    }

    public function update(CB_DatabaseConnection $dbconn = null)
    {
        if (is_null($dbconn)) {
            global $G_container_base;
            $dbconn = $G_container_base->getInstance("dbconn");
        }
        $query = "UPDATE tab_cb_locale_local SET "
                 . sprintf("col_name = '%s' ",
                $dbconn->escape($this->getName()))
                 . sprintf("WHERE locale_id = '%s' ",
                $dbconn->escape($this->getLocaleId()))
                 . sprintf("AND language_id = '%s'",
                $dbconn->escape($this->getLanguageId()))
                 . ";";
        $dbconn->query($query);
    }

    public function insert(CB_DatabaseConnection $dbconn = null)
    {
        if (is_null($dbconn)) {
            global $G_container_base;
            $dbconn = $G_container_base->getInstance("dbconn");
        }
        $query = "INSERT INTO tab_cb_locale_local SET "
                 . sprintf("locale_id = '%s', ",
                $dbconn->escape($this->getLocaleId()))
                 . sprintf("language_id = '%s', ",
                $dbconn->escape($this->getLanguageId()))
                 . sprintf("col_name = '%s' ",
                $dbconn->escape($this->getName()))
                 . ";";
        $dbconn->query($query);

        $logger = CB_LocaleManager::getLogger();
        $param_list = $this->toLogParam();
        $logger->noticeEx("create", "locale_local", $param_list);
    }

    public function delete(CB_DatabaseConnection $dbconn = null)
    {
        if (is_null($dbconn)) {
            global $G_container_base;
            $dbconn = $G_container_base->getInstance("dbconn");
        }
        $query
            = sprintf("DELETE FROM tab_cb_locale_local WHERE locale_id = '%s'",
            $dbconn->escape($this->getLocaleId()));
        $dbconn->query($query);

        $logger = CB_LocaleManager::getLogger();
        $param_list = $this->toLogParam();
        $logger->noticeEx("delete", "locale_local", $param_list);
    }

    public static function createTable(CB_DatabaseConnection $dbconn)
    {
        $query = "DROP TABLE IF EXISTS tab_cb_locale_local;";
        $dbconn->query($query);

        $query = "CREATE TABLE tab_cb_locale_local ("
                 . "locale_id BIGINT(20) NOT NULL, "
                 . "language_id BIGINT(20) NOT NULL, "
                 . "col_name VARCHAR(100) COLLATE utf8_general_cs NOT NULL, "
                 . "PRIMARY KEY (locale_id, language_id), "
                 . "KEY idx_locale_id (locale_id), "
                 . "KEY idx_language_id (language_id),"
                 . "CONSTRAINT cns_cb_locale_local_id FOREIGN KEY (locale_id) REFERENCES tab_cb_locale (_id) ON DELETE CASCADE,"
                 . "CONSTRAINT cns_cb_locale_local_language FOREIGN KEY (language_id) REFERENCES tab_cb_language_status (_id) ON DELETE CASCADE"
                 . ") ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_general_cs;";

        $dbconn->query($query);
    }
}

class CB_UserLocaleSetting
{
    private $_id = null;
    private $col_locale;
    private $col_language;
    private $col_long_date_format;
    private $col_short_date_format;
    private $col_time_format;

    public static $LOCALE_IS_NOT_RELATED = null;

    private static $_cache = [];

    public function __construct($array)
    {
        if (array_key_exists("_id", $array)) {
            $this->_id = $array["_id"];
        }
        $this->setLocale($array["col_locale"]);
        $this->setLanguage($array["col_language"]);
        $this->setLongDateFormat($array["col_long_date_format"]);
        $this->setShortDateFormat($array["col_short_date_format"]);
        $this->setTimeFormat($array["col_time_format"]);
    }

    public function toArray()
    {
        return [
            "_id"                   => $this->getId(),
            "col_locale"            => $this->getLocale(),
            "col_language"          => $this->getLanguage(),
            "col_long_date_format"  => $this->getLongDateFormat(),
            "col_short_date_format" => $this->getShortDateFormat(),
            "col_time_format"       => $this->getShortDateFormat(),
            "language_code"         => $this->getLanguageCode(),
        ];
    }

    public function getId()
    {
        return $this->_id;
    }

    public function getLocale()
    {
        return $this->col_locale;
    }

    public function setlocale($locale)
    {
        $this->col_locale = $locale;
    }

    public function getLanguage()
    {
        return $this->col_language;
    }

    public function setLanguage($language)
    {
        if ( ! is_numeric($language)) {
            $language = CB_LanguageManager::getLanguageId($language);
        }
        $this->col_language = $language;
    }

    public function getLanguageCode()
    {
        return CB_LanguageManager::getLanguageCode($this->col_language);
    }

    public function getLongDateFormat()
    {
        return $this->col_long_date_format;
    }

    public function setLongDateFormat($long_date_format)
    {
        $this->col_long_date_format = $long_date_format;
    }

    public function getShortDateFormat()
    {
        return $this->col_short_date_format;
    }

    public function setShortDateFormat($short_date_format)
    {
        $this->col_short_date_format = $short_date_format;
    }

    public function getTimeFormat()
    {
        return $this->col_time_format;
    }

    public function setTimeFormat($time_format)
    {
        $this->col_time_format = $time_format;
    }

    public function isCustomized()
    {
        $locale_id = $this->getLocale();
        if (is_null($locale_id)) {
            return true;
        }

        $locale = CB_Locale::select($locale_id);
        if ($locale == CB_Locale::$NOT_FOUND) {
            return true;
        }

        if ($locale->getLanguage() != $this->getLanguage()) {
            return true;
        }

        if (strcmp($locale->getLongDateFormat(), $this->getLongDateFormat())
            !== 0
        ) {
            return true;
        }

        if (strcmp($locale->getShortDateFormat(), $this->getShortDateFormat())
            !== 0
        ) {
            return true;
        }

        if (strcmp($locale->getTimeFormat(), $this->getTimeFormat()) !== 0) {
            return true;
        }

        return false;
    }

    public static function createTable(CB_DatabaseConnection $dbconn = null)
    {
        if (is_null($dbconn)) {
            global $G_container_base;
            $dbconn = $G_container_base->getInstance("dbconn");
        }
        $query = "DROP TABLE IF EXISTS tab_cb_user_locale_setting;";
        $dbconn->query($query);

        $query = "CREATE TABLE tab_cb_user_locale_setting("
                 . "`_id` bigint(20) NOT NULL, "
                 . "`col_locale` bigint(20) DEFAULT NULL, "
                 . "`col_language` bigint(20) DEFAULT NULL, "
                 . "`col_long_date_format` VARCHAR(100) DEFAULT NULL,"
                 . "`col_short_date_format` VARCHAR(100) DEFAULT NULL,"
                 . "`col_time_format` VARCHAR(100) DEFAULT NULL,"
                 . "`col_is_customize` tinyint(1) DEFAULT 0,"
                 . "PRIMARY KEY (`_id`),"
                 . "CONSTRAINT `cns_cb_user_locale_setting_id` FOREIGN KEY (`_id`) REFERENCES `tab_cb_user` (`_id`) ON DELETE CASCADE,"
                 . "CONSTRAINT `cns_cb_user_locale_setting_language` FOREIGN KEY (`col_language`) REFERENCES `tab_cb_language_status` (`_id`) ON DELETE CASCADE,"
                 . "CONSTRAINT `cns_cb_user_locale_setting_locale` FOREIGN KEY (`col_locale`) REFERENCES `tab_cb_locale` (`_id`) ON DELETE SET NULL"
                 . ") ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8 COLLATE=utf8_general_cs;";

        $dbconn->query($query);
    }

    public function insert(CB_DatabaseConnection $dbconn = null)
    {
        if (is_null($dbconn)) {
            global $G_container_base;
            $dbconn = $G_container_base->getInstance("dbconn");
        }

        $query = "INSERT INTO tab_cb_user_locale_setting SET "
                 . sprintf("_id ='%s', ", $dbconn->escape($this->getId()))
                 . (is_null($this->getLocale())
                ? "col_locale = NULL, "
                : sprintf("col_locale = '%s', ",
                    $dbconn->escape($this->getLocale())))
                 . (is_null($this->getLanguage())
                ? "col_language = NULL, "
                : sprintf("col_language = '%s', ",
                    $dbconn->escape($this->getLanguage())))
                 . sprintf("col_long_date_format = '%s', ",
                $dbconn->escape($this->getLongDateFormat()))
                 . sprintf("col_short_date_format = '%s', ",
                $dbconn->escape($this->getShortDateFormat()))
                 . sprintf("col_time_format = '%s'",
                $dbconn->escape($this->getTimeFormat()))
                 . ";";
        $dbconn->query($query);
        $this->_id = $dbconn->get_insert_id();
    }

    public function update(CB_DatabaseConnection $dbconn = null)
    {
        if (is_null($dbconn)) {
            global $G_container_base;
            $dbconn = $G_container_base->getInstance("dbconn");
        }

        $query = "UPDATE tab_cb_user_locale_setting SET "
                 . (is_null($this->getLocale())
                ? "col_locale = NULL, "
                : sprintf("col_locale = '%s', ",
                    $dbconn->escape($this->getLocale())))
                 . (is_null($this->getLanguage())
                ? "col_language = NULL, "
                : sprintf("col_language = '%s', ",
                    $dbconn->escape($this->getLanguage())))
                 . sprintf("col_long_date_format = '%s', ",
                $dbconn->escape($this->getLongDateFormat()))
                 . sprintf("col_short_date_format = '%s', ",
                $dbconn->escape($this->getShortDateFormat()))
                 . sprintf("col_time_format = '%s',",
                $dbconn->escape($this->getTimeFormat()))
                 . sprintf("col_is_customize = '%s'",
                $dbconn->escape($this->isCustomized()))
                 . sprintf(" WHERE _id = '%s' ",
                $dbconn->escape($this->getId()))
                 . ";";
        $dbconn->query($query);
    }

    public function delete(CB_DatabaseConnection $dbconn = null)
    {
        if (is_null($dbconn)) {
            global $G_container_base;
            $dbconn = $G_container_base->getInstance("dbconn");
        }

        $query
            = sprintf("DELETE FROM tab_cb_user_locale_setting WHERE _id = '%s';",
            $dbconn->escape($this->getId()));
        $dbconn->query($query);
    }

    /**
     *
     * @global <type> $G_container_base
     *
     * @param string                $user_id
     * @param CB_DatabaseConnection $dbconn
     *
     * @return CB_UserLocaleSetting
     */
    public static function select(
        $user_id,
        CB_DatabaseConnection $dbconn = null
    ) {
        if (array_key_exists($user_id, self::$_cache)) {
            return self::$_cache[$user_id];
        }

        if (is_null($dbconn)) {
            global $G_container_base;
            $dbconn = $G_container_base->getInstance("dbconn");
        }

        $query
            = sprintf("SELECT * FROM tab_cb_user_locale_setting WHERE _id='%s';",
            $dbconn->escape($user_id));
        $result = $dbconn->query($query);
        $row = $dbconn->fetch_assoc($result);
        $dbconn->free_result($result);

        if ($row === false) {
            return null;
        }

        return new CB_UserLocaleSetting($row);
    }

    public static function loadAndCache($user_id_list)
    {
        if ( ! is_array($user_id_list)) {
            return;
        }

        foreach (array_keys($user_id_list) as $key) {
            if ( ! is_numeric($user_id_list[$key])) {
                unset($user_id_list[$key]);
            }
        }

        if (count($user_id_list) === 0) {
            return;
        }

        global $G_container_base;
        $dbconn = $G_container_base->getInstance("dbconn");

        $query = cb_queryf($dbconn,
            "SELECT * FROM tab_cb_user_locale_setting WHERE _id IN (@A)",
            $user_id_list);
        $result = $dbconn->query($query);
        /**
         * when User has not record in tab_cb_user_locale_setting,
         * CB_UserLocaleSetting::select inquire database layer.
         * So caeche is needed to be fill out by NULL
         */
        foreach ($user_id_list as $userId) {
            self::$_cache[$userId] = null;
        }
        while (($row = $dbconn->fetch_assoc($result)) != false) {
            self::$_cache[$row['_id']] = new CB_UserLocaleSetting($row);
        }
        $dbconn->free_result($result);
    }

    public static function clearCache()
    {
        self::$_cache = [];
    }
}

class CB_LanguageManager
{
    /** @var string[]|null */
    private static $language_code_map = null;
    private static $available_languages = null;
    private static $allowed_languages = null;

    public static $LANGUAGE_CODE_PREFER_BROWSER_SETTING = '';

    public static function clear()
    {
        self::$language_code_map = null;
        self::$available_languages = null;
        self::$allowed_languages = null;
    }

    public static function getLanguageId($language_code, $dbconn = null)
    {
        if (is_null(self::$language_code_map)) {
            self::init($dbconn);
        }

        return @self::$language_code_map[strtolower($language_code)];
    }

    public static function getLanguageCode(
        $language_id,
        CB_DatabaseConnection $dbconn = null
    ) {
        if (is_null(self::$language_code_map)) {
            self::init($dbconn);
        }

        return array_search($language_id, self::$language_code_map);
    }

    public static function getAvailableLanguages()
    {
        if (is_null(self::$available_languages)) {
            self::init();
        }

        return self::$available_languages;
    }

    public static function getAllowedLanguagesByConfigurationFile()
    {
        if (is_null(self::$allowed_languages)) {
            global $G_config_common;
            $available_values = $G_config_common->get('I18N',
                'available_locales');
            self::$allowed_languages = explode(' ', $available_values);
        }

        return self::$allowed_languages;
    }

    private static function init()
    {
        self::$available_languages = [];
        self::$language_code_map = [];

        require_once("fw/i18n/language_status.csp");
        $language_status = CB_LanguageStatus::selectAll();
        foreach ($language_status as $l) {
            if ($l->isAvailable()) {
                self::$available_languages[] = $l->getLanguage();
            }
            self::$language_code_map[$l->getLanguage()] = $l->getId();
        }
        self::$language_code_map[static::$LANGUAGE_CODE_PREFER_BROWSER_SETTING]
            = null;

    }

    public static function getLanguageName($language_code)
    {
        require_once("fw/i18n.csp");
        $i18n = CB_I18N::getInstance();

        switch ($language_code) {
            case CB_LanguageManager::$LANGUAGE_CODE_PREFER_BROWSER_SETTING:
                return cb_msg("grn.personal.i18n", "prefer_browser");
            case CB_I18N_DEFUALT_LANGUAGE_CODE:
                return cb_msg("fw.common", "default");
            default:
                return $i18n->getResource('message', 'fw.common', 'locale_name',
                    true, $language_code);
        }
    }

    /**
     * Get available language for help.
     *
     * @return array
     */
    public static function getAvailableLanguagesForHelp()
    {
        $languages = ['ja', 'en', 'zh', 'th'];

        return $languages;
    }
}

class CB_LocaleManager
{
    private static $current_long_date_format = [];
    private static $current_short_date_format = [];
    private static $current_time_format = [];
    private static $current_language = [];

    private static $BLANK_FORMAT = "Blank";

    public static function getBlank()
    {
        return static::$BLANK_FORMAT;
    }

    /**
     *
     *
     * @param $user_id
     * @param $locale_id
     */
    public static function setUserLocaleSetting($user_id, $locale_id)
    {
        if ( ! is_null($locale_id) && strlen($locale_id) != 0) {
            $locale = CB_Locale::select($locale_id);
            if (is_null($locale)) {
                // $locale_id = null;
                cb_throw_error(E_COMMON_LOCALE_WAS_NOT_FOUND);
            }
        } else {
            $locale = CB_UserLocaleSetting::$LOCALE_IS_NOT_RELATED;
        }
        $user_locale_setting = CB_UserLocaleSetting::select($user_id);
        if (is_null($user_locale_setting)) {
            if ($locale == CB_UserLocaleSetting::$LOCALE_IS_NOT_RELATED) {
                $default_language = self::getDefaultLanguage();
                if ( ! $default_language
                     || ! CB_I18N:: isAvailableLocale($default_language)
                ) {
                    $default_language = CB_LocaleManager::getBrowserLanguage();
                }

                $user_locale_setting = new CB_UserLocaleSetting([
                    "_id"                   => $user_id,
                    "col_locale"            => CB_UserLocaleSetting::$LOCALE_IS_NOT_RELATED,
                    "col_language"          => $default_language,
                    "col_long_date_format"  => self::getDefaultLongDateFormat($default_language),
                    "col_short_date_format" => self::getDefaultShortDateFormat($default_language),
                    "col_time_format"       => self::getDefaultTimeFormat($default_language),
                ]);
            } else {
                $user_locale_setting = new CB_UserLocaleSetting([
                    "_id"                   => $user_id,
                    "col_locale"            => $locale->getId(),
                    "col_language"          => $locale->getLanguage(),
                    "col_long_date_format"  => $locale->getLongDateFormat(),
                    "col_short_date_format" => $locale->getShortDateFormat(),
                    "col_time_format"       => $locale->getTimeFormat(),
                ]);
            }
            $user_locale_setting->insert();
        } else {
            if ($locale == CB_UserLocaleSetting::$LOCALE_IS_NOT_RELATED) {
                $default_language = self::getDefaultLanguage();
                if ( ! $default_language
                     || ! CB_I18N:: isAvailableLocale($default_language)
                ) {
                    $default_language = CB_LocaleManager::getBrowserLanguage();
                }

                $user_locale_setting->setLocale(CB_UserLocaleSetting::$LOCALE_IS_NOT_RELATED);
                $user_locale_setting->setLanguage($default_language);
                $user_locale_setting->setLongDateFormat(self::getDefaultLongDateFormat($default_language));
                $user_locale_setting->setShortDateFormat(self::getDefaultShortDateFormat($default_language));
                $user_locale_setting->setTimeFormat(self::getDefaultTimeFormat($default_language));
            } else {
                $user_locale_setting->setLocale($locale->getId());
                $user_locale_setting->setLanguage($locale->getLanguage());
                $user_locale_setting->setLongDateFormat($locale->getLongDateFormat());
                $user_locale_setting->setShortDateFormat($locale->getShortDateFormat());
                $user_locale_setting->setTimeFormat($locale->getTimeFormat());
            }

            $user_locale_setting->update();
        }
    }

    public static function updateUsersTableRelatedToLocale(
        CB_Locale $locale,
        $new_language_code,
        $new_long_date_format,
        $new_short_date_format,
        $new_time_format
    ) {
        $updated_column = [];
        if ($locale->getLanguageCode() != $new_language_code) {
            $updated_column['col_language']
                = self::getLanguageId($new_language_code);
        }
        if ($locale->getLongDateFormat() != $new_long_date_format) {
            $updated_column['col_long_date_format'] = $new_long_date_format;
        }
        if ($locale->getShortDateFormat() != $new_short_date_format) {
            $updated_column['col_short_date_format'] = $new_short_date_format;
        }
        if ($locale->getTimeFormat() != $new_time_format) {
            $updated_column['col_time_format'] = $new_time_format;
        }

        if (count($updated_column) > 0) {
            global $G_container_base;
            /** @var CB_DatabaseConnection $db */
            $db = $G_container_base->getInstance("dbconn");

            $query = "UPDATE tab_cb_user_locale_setting SET ";
            $assignment_query = [];
            foreach ($updated_column as $column_name => $column_value) {
                $escaped_column_value = $db->escape($column_value);
                if (is_null($column_value)) {
                    $assignment_query[] = "{$column_name}=NULL ";
                } else {
                    $assignment_query[]
                        = "{$column_name}='{$escaped_column_value}' ";
                }
            }
            $query .= implode(",", $assignment_query);
            $query .= "WHERE "
                      . "col_locale='" . $db->escape($locale->getId()) . "'"
                      . " AND col_is_customize = 0"
                      // ." AND col_language='".$db->escape($locale->getLanguage())."'"
                      // ." AND col_long_date_format='".$db->escape($locale->getLongDateFormat())."'"
                      // ." AND col_short_date_format='".$db->escape($locale->getShortDateFormat())."'"
                      // ." AND col_time_format='".$db->escape($locale->getTimeFormat())."'"
                      . ";";

            $db->query($query);
        }
    }

    /**
     *
     * @param CB_DatabaseConnection $dbconn
     */
    public static function initialize(CB_DatabaseConnection $dbconn)
    {
        CB_Locale::createTable($dbconn);
        CB_LocaleLocal::createTable($dbconn);
        CB_UserLocaleSetting::createTable($dbconn);

        global $G_container_base;
        $dbconn = $G_container_base->getInstance("dbconn");

        $daoFactory = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
        $dao = $daoFactory->getCbUserNameLanguageDAO();
        $dao->createTable(['db' => $dbconn]);
    }

    /**
     *
     * @param string                $language_code
     * @param CB_DatabaseConnection $dbconn
     *
     * @return string
     */
    public static function getLanguageId(
        $language_code,
        CB_DatabaseConnection $dbconn = null
    ) {
        return CB_LanguageManager::getLanguageId($language_code, $dbconn);
    }

    /**
     *
     * @param string                $language_id
     * @param CB_DatabaseConnection $dbconn
     *
     * @return string
     */
    public static function getLanguageCode(
        $language_id,
        CB_DatabaseConnection $dbconn = null
    ) {
        return CB_LanguageManager::getLanguageCode($language_id, $dbconn);
    }

    /**
     *
     * @global                      $G_container_base $G_container_base
     *
     * @param string                $offset
     * @param string                $limit
     * @param CB_DatabaseConnection $dbconn
     *
     * @return CB_Locale[]
     */
    public static function getLocales(
        $offset = null,
        $limit = null,
        CB_DatabaseConnection $dbconn = null
    ) {
        if (is_null($dbconn)) {
            global $G_container_base;
            $dbconn = $G_container_base->getInstance("dbconn");
        }

        $query = "SELECT * FROM tab_cb_locale ORDER BY _id ";
        if ( ! is_null($offset) && ! is_null($limit)) {
            $query = $dbconn->select_format($query, $offset, $limit);
        }

        $result = $dbconn->query($query);
        $ret = [];
        while (($row = $dbconn->fetch_assoc($result)) !== false) {
            $ret[$row["_id"]] = new CB_Locale($row);
        }

        return $ret;
    }

    /**
     *
     * @global                      $G_container_base $G_container_base
     *
     * @param string                $localeId
     * @param CB_DatabaseConnection $dbconn
     *
     * @return array of CB_LocaleLocal
     */
    public static function getLocaleNames(
        $localeId,
        CB_DatabaseConnection $dbconn = null
    ) {
        if (is_null($dbconn)) {
            global $G_container_base;
            $dbconn = $G_container_base->getInstance("dbconn");
        }

        $escaped_localeId = $dbconn->escape($localeId);
        $query
            = "SELECT * FROM tab_cb_locale_local WHERE locale_id='{$escaped_localeId}';";

        $result = $dbconn->query($query);
        $ret = [];
        while (($row = $dbconn->fetch_assoc($result)) != false) {
            $ret[CB_LanguageManager::getLanguageCode($row["language_id"])]
                = new CB_LocaleLocal($row);
        }
        $dbconn->free_result($result);

        return $ret;
    }

    /**
     *
     * @global                      $G_container_base $G_container_base
     *
     * @param string                $localeId
     * @param string                $language
     * @param CB_DatabaseConnection $dbconn
     *
     * @return CB_LocaleLocal
     */
    public static function getLocaleName(
        $localeId,
        $language,
        CB_DatabaseConnection $dbconn = null
    ) {
        if (is_null($dbconn)) {
            global $G_container_base;
            $dbconn = $G_container_base->getInstance("dbconn");
        }

        if ( ! is_numeric($language)) {
            $language = CB_LanguageManager::getLanguageId($language);
        }

        $escaped_localeId = $dbconn->escape($localeId);
        $escaped_language = $dbconn->escape($language);
        $query
            = "SELECT * FROM tab_cb_locale_local WHERE locale_id='{$escaped_localeId}' AND language_id='{$escaped_language}';";

        $result = $dbconn->query($query);
        $row = $dbconn->fetch_assoc($result);
        $dbconn->free_result($result);

        if ($row === false) {
            return null;
        }

        return new CB_LocaleLocal($row);
    }

    /**
     *
     * @global        $G_container_base $G_container_base
     *
     * @param  string $userId
     * @param  bool   $isFromSetting
     * @param  bool   $only_display_one_name
     *
     * @return CbUserNameLanguage[]
     */
    public static function getUserNameLanguages(
        $userId,
        $isFromSetting = false,
        $only_display_one_name = false
    ) {
        global $G_container_base;
        $dbconn = $G_container_base->getInstance("dbconn");

        $daoFactory = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
        $dao = $daoFactory->getCbUserNameLanguageDAO();

        $ret = $dao->selectByUserId(['db' => $dbconn], $userId);

        if (count($ret) == 0) {
            if ( ! $isFromSetting) {
                $ret[] = new CbUserNameLanguage([
                    '_id'          => $userId,
                    'col_language' => CB_I18N::getInstance()
                                             ->getCurrentLanguage()
                ]);
            } elseif ($only_display_one_name) {
                $ret[] = new CbUserNameLanguage([
                    '_id'          => $userId,
                    'col_language' => self::getCurrentLanguage($userId)
                ]);
            }
        }

        return $ret;
    }

    public static function setUserNameLanguages($userId, $languageCode)
    {
        global $G_container_base;
        $dbconn = $G_container_base->getInstance("dbconn");

        $daoFactory = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
        $dao = $daoFactory->getCbUserNameLanguageDAO();

        $newUserNameLanguage = new CbUserNameLanguage([
            "_id"          => $userId,
            "col_language" => $languageCode
        ]);

        return $dao->insert(['db' => $dbconn], $newUserNameLanguage);
    }

    public static function deleteUserNameLangauge($userId, $languageCode)
    {
        global $G_container_base;
        $dbconn = $G_container_base->getInstance("dbconn");

        $daoFactory = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
        $dao = $daoFactory->getCbUserNameLanguageDAO();

        $newUserNameLanguage = new CbUserNameLanguage([
            "_id"          => $userId,
            "col_language" => $languageCode
        ]);

        return $dao->delete(['db' => $dbconn], $newUserNameLanguage);
    }

    public static function getDefaultLanguage()
    {
        $default_locale = 'en';
        global $G_config_common;
        if ( ! cb_is_init_process()) {
            require_once('fw/module.csp');
            $module = new CB_ModuleBase('fw.i18n.locale');
            $profile = $module->getSystemProfile();
            $profile->getAttribute("default_locale", $default_locale);
        }

        return $default_locale;
    }

    public static function setDefaultLanguage($locale)
    {
        global $G_config_common;

        require_once('fw/module.csp');
        $module = new CB_ModuleBase('fw.i18n.locale');
        $profile = $module->getSystemProfile();
        // GRN35-220
        $temp = null;
        if ( ! $profile->getAttribute("default_locale", $temp)) {
            $profile->createAttribute('default_locale', $locale);
        } else {
            $profile->updateAttribute('default_locale', $locale);
        }
        // GRN35-220
    }

    public static function getDefaultLongDateFormat($languageCode)
    {
        return cb_msg("fw.date", "browser_long_date_format", null,
            $languageCode);
    }

    private static function getBrowserLongDateFormat()
    {
        return static::getDefaultLongDateFormat(static::getBrowserLanguage());
    }

    public static function getDefaultShortDateFormat($languageCode)
    {
        return cb_msg("fw.date", "browser_short_date_format", null,
            $languageCode);
    }

    private static function getBrowserShortDateFormat()
    {
        return static::getDefaultShortDateFormat(static::getBrowserLanguage());
    }

    public static function getDefaultTimeFormat($languageCode)
    {
        return cb_msg("fw.date", "browser_time_format", null, $languageCode);
    }

    private static function getBrowserTimeFormat()
    {
        return static::getDefaultTimeFormat(static::getBrowserLanguage());
    }

    private static function getBrowserLanguage()
    {
        require_once("fw/i18n.csp");
        $i18n = CB_I18N::getInstance();

        $browserLanguage = $i18n->getLanguageFromHttpHeader();
        if ( ! is_null($browserLanguage)) {
            return $browserLanguage;
        }

        return self::getDefaultLanguage();
    }

    public static function getCurrentLongDateFormat($user_id = null)
    {
        if ( ! array_key_exists($user_id, self::$current_long_date_format)) {
            self::initCurrentUserSetting($user_id);
        }

        return self::$current_long_date_format[$user_id];
    }

    public static function getCurrentShortDateFormat($user_id = null)
    {
        if ( ! array_key_exists($user_id, self::$current_short_date_format)) {
            self::initCurrentUserSetting($user_id);
        }

        return self::$current_short_date_format[$user_id];
    }

    public static function getCurrentTimeFormat($user_id = null)
    {
        if ( ! array_key_exists($user_id, self::$current_time_format)) {
            self::initCurrentUserSetting($user_id);
        }

        return self::$current_time_format[$user_id];
    }

    public static function getCurrentLanguage($user_id = null)
    {
        if ( ! array_key_exists($user_id, self::$current_language)) {
            self::initCurrentUserSetting($user_id);
        }

        return self::$current_language[$user_id];
    }

    /**
     *
     * @param string $user_id
     *
     * @return CB_UserLocaleSetting
     */
    public static function getCurrentLocaleSetting($user_id = null)
    {
        $user_locale_setting = null;

        if (is_null($user_id)) {
            global $G_container_base;
            /** @var GRN_Uum $uum */
            $uum = $G_container_base->getInstance('uum');
            $login = $uum->getLoginUser();
            if ($login instanceof CB_User) {
                $user_id = $login->getOID();
            }
        }

        if ( ! is_null($user_id)) {
            require_once('fw/i18n/base.csp');
            $user_locale_setting = CB_UserLocaleSetting::select($user_id);
        }
        if (is_null($user_locale_setting)) {
            $user_locale_setting = new CB_UserLocaleSetting([
                "col_locale"            => CB_Locale::$NOT_FOUND,
                "col_language"          => self::getCurrentLanguage($user_id),
                "col_long_date_format"  => self::getCurrentLongDateFormat($user_id),
                "col_short_date_format" => self::getCurrentShortDateFormat($user_id),
                "col_time_format"       => self::getCurrentTimeFormat($user_id)
            ]);
        }

        return $user_locale_setting;
    }

    /**
     *
     *
     * @param string $user_id
     */
    private static function initCurrentUserSetting($user_id = null)
    {
        //デフォルト値を取得
        global $G_container_base;
        /** @var GRN_Uum $uum */
        $uum = $G_container_base->getInstance('uum');

        if ( ! is_null($user_id)) {
            $login = $uum->getLoginUser();
        } else {
            $login = false;
        }

        $default_language = "";
        $default_long_date_format = "";
        $default_short_date_format = "";
        $default_time_format = "";
        if (is_null($user_id)
            || (($login !== false)
                && ($user_id == $login->getOID()))
        ) {
            //$user_idがログインユーザー
            $default_language = self::getBrowserLanguage();
            $default_long_date_format = self::getBrowserLongDateFormat();
            $default_short_date_format = self::getBrowserShortDateFormat();
            $default_time_format = self::getBrowserTimeFormat();
        } else {
            $default_language = self::getDefaultLanguage();
            $default_long_date_format
                = self::getDefaultLongDateFormat($default_language);
            $default_short_date_format
                = self::getDefaultShortDateFormat($default_language);
            $default_time_format
                = self::getDefaultTimeFormat($default_language);
        }


        if (is_null($user_id)) {
            self::$current_long_date_format[$user_id]
                = $default_long_date_format;
            self::$current_short_date_format[$user_id]
                = $default_short_date_format;
            self::$current_time_format[$user_id] = $default_time_format;
            self::$current_language[$user_id] = $default_language;
        } else {
            $user_locale_setting = CB_UserLocaleSetting::select($user_id);
            if (is_null($user_locale_setting)) {
                self::$current_long_date_format[$user_id]
                    = $default_long_date_format;
                self::$current_short_date_format[$user_id]
                    = $default_short_date_format;
                self::$current_time_format[$user_id]
                    = $default_time_format;
                self::$current_language[$user_id] = $default_language;
            } else {
                self::$current_language[$user_id]
                    = $user_locale_setting->getLanguageCode();

                // if user's language is not specified, then the language specified by browser is regarded as user's language.
                if (is_null(self::$current_language[$user_id])
                    || strlen(self::$current_language[$user_id]) == 0
                ) {
                    self::$current_language[$user_id] = $default_language;
                    self::$current_long_date_format[$user_id]
                        = $default_long_date_format;
                    self::$current_short_date_format[$user_id]
                        = $default_short_date_format;
                    self::$current_time_format[$user_id]
                        = $default_time_format;
                } else {
                    $availableLanguages
                        = CB_LanguageManager::getAvailableLanguages();
                    if ( ! in_array(self::$current_language[$user_id],
                        $availableLanguages)
                    ) {
                        self::$current_language[$user_id] = $default_language;
                        self::$current_long_date_format[$user_id]
                            = $default_long_date_format;
                        self::$current_short_date_format[$user_id]
                            = $default_short_date_format;
                        self::$current_time_format[$user_id]
                            = $default_time_format;
                    } else {
                        self::$current_long_date_format[$user_id]
                            = $user_locale_setting->getLongDateFormat();
                        self::$current_short_date_format[$user_id]
                            = $user_locale_setting->getShortDateFormat();
                        self::$current_time_format[$user_id]
                            = $user_locale_setting->getTimeFormat();
                    }
                }
            }
        }


        assert('strlen(self::$current_language[$user_id]) > 0');
        assert('strlen(self::$current_long_date_format[$user_id]) > 0');
        assert('strlen(self::$current_short_date_format[$user_id]) > 0');
        assert('strlen(self::$current_time_format[$user_id]) > 0');
    }

    public static function addLocale($locale_info, $locale_names)
    {
        $existLocale = CB_Locale::selectByCode($locale_info["col_code"]);
        if ( ! is_null($existLocale)) {
            cb_throw_error(E_COMMON_LOCALE_DUPLICATE_FOUND);
        }

        $new_locale = new CB_Locale($locale_info);
        $new_locale->insert();

        foreach ($locale_names as $locale_key => $locale_name) {
            if ($locale_key == CB_I18N_DEFUALT_LANGUAGE_CODE) {
                continue;
            }
            if (strlen(cb_trim($locale_name)) <= 0) {
                continue;
            }
            $new_locale_local = new CB_LocaleLocal([
                "locale_id"   => $new_locale->getId(),
                "language_id" => $locale_key,
                "col_name"    => cb_trim($locale_name)
            ]);
            $new_locale_local->insert();
        }

        return $new_locale;
    }

    public static function modifyLocale($locale_info, $locale_names)
    {
        $locale = CB_Locale::select($locale_info["lid"]);
        if (is_null($locale)) {
            cb_throw_error(E_COMMON_LOCALE_WAS_NOT_FOUND);
        } else {
            $codeLocale = CB_Locale::selectByCode($locale_info["locale-code"]);
            if ( ! is_null($codeLocale)) {
                if ($locale->getId() != $codeLocale->getId()) {
                    cb_throw_error(E_COMMON_LOCALE_DUPLICATE_FOUND);
                }
            }
        }
        if (strlen($locale_info["language"]) == 0) {
            $G_INPUT["language"] = null;
        }

        $new_long_date_format
            = CB_DateTimeformatManager::getDateFormat($locale_info["language"],
            $locale_info["long-date-format"]);
        $new_short_date_format
            = CB_DateTimeformatManager::getDateFormat($locale_info["language"],
            $locale_info["short-date-format"]);
        $new_time_format
            = CB_DateTimeformatManager::getTimeFormat($locale_info["language"],
            $locale_info["time-format"]);

        CB_LocaleManager::updateUsersTableRelatedToLocale($locale,
            $locale_info["language"], $new_long_date_format,
            $new_short_date_format, $new_time_format);

        $locale->setLongDateFormat($new_long_date_format);
        $locale->setShortDateFormat($new_short_date_format);
        $locale->setTimeFormat($new_time_format);
        $locale->setName($locale_names[CB_I18N_DEFUALT_LANGUAGE_CODE]);
        $locale->setCode($locale_info["locale-code"]);
        $locale->setLanguage($locale_info["language"]);
        $locale->update();

        $locale_name_objects
            = CB_LocaleManager::getLocaleNames($locale->getId());
        foreach (CB_LanguageManager::getAvailableLanguages() as $language_code) {
            if (array_key_exists($language_code, $locale_names)
                && strlen(cb_trim($locale_names[$language_code])) > 0
            ) {
                if (array_key_exists($language_code, $locale_name_objects)) {
                    $locale_name_object = $locale_name_objects[$language_code];
                    if ($locale_name_object->getName()
                        != $locale_names[$language_code]
                    ) {
                        static::emitLogForModifiedLocaleLocal($locale_name_object,
                            $locale_names[$language_code]);
                        $locale_name_object->setName(cb_trim($locale_names[$language_code]));
                        $locale_name_object->update();
                    }
                } else {
                    $locale_name_object = new CB_LocaleLocal([
                        "locale_id"   => $locale->getId(),
                        "language_id" => $language_code,
                        "col_name"    => cb_trim($locale_names[$language_code])
                    ]);
                    $locale_name_object->insert();
                }
            } else {
                if ( ! array_key_exists($language_code, $locale_name_objects)) {
                    continue;
                }

                $locale_name_objects[$language_code]->delete();
            }
        }
    }

    private static function emitLogForModifiedLocaleLocal(
        CB_LocaleLocal $old_locale_local,
        $new_name
    ) {
        $logger = static::getLogger();
        $log_param = [
            "locale_id"        => $old_locale_local->getLocaleId(),
            "language_code"    => $old_locale_local->getLanguageCode(),
            "prev_locale_name" => $old_locale_local->getName(),
            "new_locale_name"  => $new_name
        ];
        $logger->noticeEx("modify", "locale_local", $log_param);
    }

    public static function getLogger()
    {
        require_once('grn/logger.csp');
        $logic = GRN_LoggingLogic::getInstance();

        $lm = CB_LoggerManager::getInstance();
        $log_category = $logic->getLogCategory('common');
        $logger = $lm->getLogger($log_category);

        return $logger;
    }

}

class CB_DateTimeFormatManager
{
    public static function getDateFormats($language_code)
    {
        switch ($language_code) {
            case "ja":
                return cb_msg("fw.date", "date_formats", null, "ja");
            case "en":
                return cb_msg("fw.date", "date_formats", null, "en");
            case "zh":
                return cb_msg("fw.date", "date_formats", null, "zh");
            case "zh-tw":
                return cb_msg("fw.date", "date_formats", null, "zh-tw");
            case CB_LanguageManager::$LANGUAGE_CODE_PREFER_BROWSER_SETTING:
                return [CB_LocaleManager::getBlank()];
            default:
                return cb_msg("fw.date", "date_formats", null, "en");
        }

        return [];
    }

    public static function getTimeFormats($language_code)
    {
        switch ($language_code) {
            case "ja":
                return cb_msg("fw.date", "time_formats", null, "ja");
            case "en":
                return cb_msg("fw.date", "time_formats", null, "en");
            case "zh":
                return cb_msg("fw.date", "time_formats", null, "zh");
            case "zh-tw":
                return cb_msg("fw.date", "time_formats", null, "zh-tw");
            case CB_LanguageManager::$LANGUAGE_CODE_PREFER_BROWSER_SETTING:
                return [CB_LocaleManager::getBlank()];
            default:
                return cb_msg("fw.date", "time_formats", null, "en");
        }

        return [];
    }

    public static function getDateFormat($language_code, $id)
    {
        $formats = self::getDateFormats($language_code);
        if ( ! array_key_exists($id, $formats)) {
            assert(false);
            $formats = self::getDateFormats("en");
        }

        return $formats[$id];
    }

    public static function getTimeFormat($language_code, $id)
    {
        $formats = self::getTimeFormats($language_code);
        if ( ! array_key_exists($id, $formats)) {
            assert(false);
            $formats = self::getTimeFormats("en");
        }

        return $formats[$id];
    }
}
