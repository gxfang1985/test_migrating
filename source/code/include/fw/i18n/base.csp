<?php

require_once('grn/calendar.csp');

class CB_Base
{
    private $_id = null;
    private $col_name;              //array( 'type' => "char" );
    private $col_code;              //array( 'type' => "char" );
    private $col_workday_sunday;    //array( 'type' => 'time' );
    private $col_workday_monday;    //array( 'type' => "bool" );
    private $col_workday_tuesday;   //array( 'type' => "bool" );
    private $col_workday_wednesday; //array( 'type' => "bool" );
    private $col_workday_thursday;  //array( 'type' => "bool" );
    private $col_workday_friday;    //array( 'type' => "bool" );
    private $col_workday_saturday;  //array( 'type' => "bool" );
    private $col_apply_calendar;    //array( 'type' => "bool" );
    private $col_calendar;          //array( 'type' => 'relation', 'to' => 'GRN_SystemCalendar' );

    private static $_cache = [];

    public function toArray()
    {
        return [
            "_id"                   => $this->getId(),
            "col_name"              => $this->getName(),
            "col_code"              => $this->getCode(),
            "col_workday_sunday"    => $this->getWorkdaySunday(),
            "col_workday_monday"    => $this->getWorkdayMonday(),
            "col_workday_tuesday"   => $this->getWorkdayTuesday(),
            "col_workday_wednesday" => $this->getWorkdayWednesday(),
            "col_workday_thursday"  => $this->getWorkdayThursday(),
            "col_workday_friday"    => $this->getWorkdayFriday(),
            "col_workday_saturdy"   => $this->getWorkdaySaturday(),
            "col_apply_calendar"    => $this->getApplyCalendar(),
            "col_calendar"          => $this->getCalendar(),
        ];
    }

    public function toViewArray()
    {
        $base_names_objects
            = CB_BaseManager::getBaseNamesByBaseId($this->getId());
        $base_names = [];
        foreach ($base_names_objects as $base_name_object) {
            $base_name = trim($base_name_object->getName());
            if ('' === $base_name) {
                continue;
            }
            $base_names[$base_name_object->getLanguageCode()]
                = $base_name_object->getName();
        }
        $base_names[CB_I18N_DEFUALT_LANGUAGE_CODE] = $this->getName();

        $calendar_manager = GRN_CalendarManager::getInstance();
        $calendar
            = $calendar_manager->getSystemCalendar($this->getCalendar());
        if ( ! $calendar) {
            $calendar
                = $calendar_manager->getSystemCalendar(GRN_CALENDAR_SYSTEM_DEFAULT);
        }
        $work_hours_list = CB_BaseWorkHours::selectByBaseId($this->getId());
        $work_hours_view = [];
        foreach ($work_hours_list as $work_hours) {
            $work_hours_view[] = $work_hours->toViewArray();
        }

        return [
            'id'                => $this->getId(),
            'name'              => $this->getName(),
            'local_name'        => $this->getLocalName(),
            'names'             => $base_names,
            'code'              => $this->getCode(),
            'workday_sunday'    => $this->getWorkdaySunday(),
            'workday_monday'    => $this->getWorkdayMonday(),
            'workday_tuesday'   => $this->getWorkdayTuesday(),
            'workday_wednesday' => $this->getWorkdayWednesday(),
            'workday_thursday'  => $this->getWorkdayThursday(),
            'workday_friday'    => $this->getWorkdayFriday(),
            'workday_saturday'  => $this->getWorkdaySaturday(),
            'apply_calendar'    => $this->getApplyCalendar(),
            'work_hours_list'   => $work_hours_view,
            'calendar'          => [
                'id'   => $calendar->getOID(),
                'name' => $calendar->get('name')
            ],
        ];
    }

    public function __construct($array)
    {
        $this->_id = isset($array['_id']) ? $array['_id'] : null;

        assert('isset($array["col_name"])');
        $this->setName($array["col_name"]);

        assert('isset($array["col_code"])');
        $this->setCode($array["col_code"]);

        assert('array_key_exists( "col_workday_sunday", $array)');
        $this->setWorkdaySunday($array["col_workday_sunday"]);

        assert('array_key_exists( "col_workday_monday", $array)');
        $this->setWorkdayMonday($array["col_workday_monday"]);

        assert('array_key_exists( "col_workday_tuesday", $array)');
        $this->setWorkdayTuesday($array["col_workday_tuesday"]);

        assert('array_key_exists( "col_workday_wednesday", $array)');
        $this->setWorkdayWednesday($array["col_workday_wednesday"]);

        assert('array_key_exists( "col_workday_thursday", $array)');
        $this->setWorkdayThursday($array["col_workday_thursday"]);

        assert('array_key_exists( "col_workday_friday", $array)');
        $this->setWorkdayFriday($array["col_workday_friday"]);

        assert('array_key_exists( "col_workday_saturday", $array)');
        $this->setWorkdaySaturday($array["col_workday_saturday"]);

        assert('array_key_exists( "col_apply_calendar", $array)');
        $this->setApplyCalendar($array["col_apply_calendar"]);

        assert('array_key_exists( "col_calendar", $array)');
        $this->setCalendar($array["col_calendar"]);
    }

    public function getId()
    {
        return $this->_id;
    }

    public function setName($name)
    {
        assert('is_string($name)');
        $this->col_name = $name;
    }

    public function getName()
    {
        return $this->col_name;
    }

    public function setCode($code)
    {
        assert('is_string($code)');
        $this->col_code = $code;
    }

    public function getCode()
    {
        return $this->col_code;
    }

    public function getWorkdaySunday()
    {
        return $this->col_workday_sunday;
    }

    public function setWorkdaySunday($workday_sunday)
    {
        $this->col_workday_sunday = (int)$workday_sunday;
    }

    public function getWorkdayMonday()
    {
        return $this->col_workday_monday;
    }

    public function setWorkdayMonday($workday_monday)
    {
        $this->col_workday_monday = (int)$workday_monday;
    }

    public function getWorkdayTuesday()
    {
        return $this->col_workday_tuesday;
    }

    public function setWorkdayTuesday($workday_tuesday)
    {
        $this->col_workday_tuesday = (int)$workday_tuesday;
    }

    public function getWorkdayWednesday()
    {
        return $this->col_workday_wednesday;
    }

    public function setWorkdayWednesday($workday_wednesday)
    {
        $this->col_workday_wednesday = (int)$workday_wednesday;
    }

    public function getWorkdayThursday()
    {
        return $this->col_workday_thursday;
    }

    public function setWorkdayThursday($workday_thursday)
    {
        $this->col_workday_thursday = (int)$workday_thursday;
    }

    public function getWorkdayFriday()
    {
        return $this->col_workday_friday;
    }

    public function setWorkdayFriday($workday_friday)
    {
        $this->col_workday_friday = (int)$workday_friday;
    }

    public function getWorkdaySaturday()
    {
        return $this->col_workday_saturday;
    }

    public function setWorkdaySaturday($workday_saturday)
    {
        $this->col_workday_saturday = (int)$workday_saturday;
    }

    public function getApplyCalendar()
    {
        return $this->col_apply_calendar;
    }

    public function setApplyCalendar($apply_calendar)
    {
        $this->col_apply_calendar = (int)$apply_calendar;
    }

    public function getCalendar()
    {
        return $this->col_calendar;
    }

    public function setCalendar($calendar)
    {
        $this->col_calendar = $calendar;
    }

    public function getLocalName($language = null)
    {
        if (is_null($language)) {
            require_once("fw/i18n.csp");
            $i18n = CB_I18N::getInstance();
            $language = $i18n->getCurrentLanguage();
        }

        $local_name = CB_BaseManager::getBaseName($this->getId(), $language);
        if (is_null($local_name)) {
            return $this->getName();
        } else {
            return $local_name->getName();
        }
    }

    public function update(CB_DatabaseConnection $dbconn = null)
    {
        if (is_null($dbconn)) {
            global $G_container_base;
            $dbconn = $G_container_base->getInstance("dbconn");
        }

        $this->checkDuplicateCode($dbconn);

        $query = "UPDATE tab_cb_base SET "
                 . sprintf("col_name = '%s', ",
                $dbconn->escape($this->getName()))
                 . sprintf("col_code = '%s', ",
                $dbconn->escape($this->getCode()))
                 . sprintf("col_workday_sunday = '%s', ",
                $dbconn->escape($this->getWorkdaySunday()) ? 1 : 0)
                 . sprintf("col_workday_monday = '%s', ",
                $dbconn->escape($this->getWorkdayMonday()) ? 1 : 0)
                 . sprintf("col_workday_tuesday = '%s', ",
                $dbconn->escape($this->getWorkdayTuesday()) ? 1 : 0)
                 . sprintf("col_workday_wednesday = '%s', ",
                $dbconn->escape($this->getWorkdayWednesday()) ? 1 : 0)
                 . sprintf("col_workday_thursday = '%s', ",
                $dbconn->escape($this->getWorkdayThursday()) ? 1 : 0)
                 . sprintf("col_workday_friday = '%s', ",
                $dbconn->escape($this->getWorkdayFriday()) ? 1 : 0)
                 . sprintf("col_workday_saturday = '%s', ",
                $dbconn->escape($this->getWorkdaySaturday()) ? 1 : 0)
                 . sprintf("col_apply_calendar = '%s', ",
                $dbconn->escape($this->getApplyCalendar()) ? 1 : 0)
                 . sprintf("col_calendar = '%s' ",
                $dbconn->escape($this->getCalendar()))
                 . sprintf("WHERE _id = '%s'", $dbconn->escape($this->getId()))
                 . ";";

        $dbconn->query($query);
        $param_list = $this->toLogParam();
        CB_BaseManager::getLogger()->noticeEx('modify', 'base', $param_list);
    }

    public function insert(CB_DatabaseConnection $dbconn = null)
    {
        if (is_null($dbconn)) {
            global $G_container_base;
            $dbconn = $G_container_base->getInstance("dbconn");
        }

        $this->checkDuplicateCode($dbconn);

        $query = "INSERT INTO tab_cb_base SET "
                 . sprintf("col_name = '%s', ",
                $dbconn->escape($this->getName()))
                 . sprintf("col_code = '%s', ",
                $dbconn->escape($this->getCode()))
                 . sprintf("col_workday_sunday = '%s', ",
                $dbconn->escape($this->getWorkdaySunday()) ? 1 : 0)
                 . sprintf("col_workday_monday = '%s', ",
                $dbconn->escape($this->getWorkdayMonday()) ? 1 : 0)
                 . sprintf("col_workday_tuesday = '%s', ",
                $dbconn->escape($this->getWorkdayTuesday()) ? 1 : 0)
                 . sprintf("col_workday_wednesday = '%s', ",
                $dbconn->escape($this->getWorkdayWednesday()) ? 1 : 0)
                 . sprintf("col_workday_thursday = '%s', ",
                $dbconn->escape($this->getWorkdayThursday()) ? 1 : 0)
                 . sprintf("col_workday_friday = '%s', ",
                $dbconn->escape($this->getWorkdayFriday()) ? 1 : 0)
                 . sprintf("col_workday_saturday = '%s', ",
                $dbconn->escape($this->getWorkdaySaturday()) ? 1 : 0)
                 . sprintf("col_apply_calendar = '%s', ",
                $dbconn->escape($this->getApplyCalendar()) ? 1 : 0)
                 . sprintf("col_calendar = '%s'",
                $dbconn->escape($this->getCalendar()))
                 . ";";

        $dbconn->query($query);
        $this->_id = $dbconn->get_insert_id();
        $param_list = $this->toLogParam();
        CB_BaseManager::getLogger()->noticeEx('create', 'base', $param_list);
    }

    public function delete(CB_DatabaseConnection $dbconn = null)
    {
        if (is_null($dbconn)) {
            global $G_container_base;
            $dbconn = $G_container_base->getInstance("dbconn");
        }
        $query = sprintf("DELETE FROM tab_cb_base WHERE _id = '%s';",
            $this->getId());
        $dbconn->query($query);
        $param_list = $this->toLogParam();
        CB_BaseManager::getLogger()->noticeEx('delete', 'base', $param_list);
    }

    /**
     *
     * @global CB_LWContainer       $G_container_base
     *
     * @param string                $id
     * @param CB_DatabaseConnection $dbconn
     *
     * @return CB_Base
     */
    public static function select($id, CB_DatabaseConnection $dbconn = null)
    {
        if ( ! is_numeric($id)) {
            return null;
        }

        if (array_key_exists($id, self::$_cache)) {
            return self::$_cache[$id];
        }

        if (is_null($dbconn)) {
            global $G_container_base;
            $dbconn = $G_container_base->getInstance("dbconn");
        }

        $escaped_id = $dbconn->escape($id);
        $query = "SELECT * FROM tab_cb_base WHERE _id='{$escaped_id}';";

        $result = $dbconn->query($query);
        $row = $dbconn->fetch_assoc($result);
        $dbconn->free_result($result);

        if ($row === false) {
            return null;
        }

        $base = new CB_Base($row);
        self::$_cache[$id] = $base;

        return $base;
    }

    public function clearCache()
    {
        self::$_cache = [];
    }


    /**
     *
     * @global CB_LWContainer       $G_container_base
     *
     * @param string                $code
     * @param CB_DatabaseConnection $dbconn
     *
     * @return CB_Base
     */
    public static function selectByCode(
        $code,
        CB_DatabaseConnection $dbconn = null
    ) {
        if (is_null($dbconn)) {
            global $G_container_base;
            $dbconn = $G_container_base->getInstance("dbconn");
        }

        $escaped_code = $dbconn->escape($code);
        $query
            = "SELECT * FROM tab_cb_base WHERE col_code='{$escaped_code}';";

        $result = $dbconn->query($query);
        $row = $dbconn->fetch_assoc($result);
        $dbconn->free_result($result);

        if ($row === false) {
            return null;
        }

        return new CB_Base($row);
    }

    private function checkDuplicateCode(CB_DatabaseConnection $dbconn = null)
    {
        $base = $this->selectByCode($this->getCode(), $dbconn);
        if ( ! is_null($base) && $base->getId() !== $this->getId()) {
            cb_throw_error(E_COMMON_BASE_DUPLICATE_CODE);;
        }
    }

    public function toLogParam()
    {
        return [
            'id'                => $this->getId(),
            'name'              => $this->getName(),
            'code'              => $this->getCode(),
            'workday_sunday'    => $this->getWorkdaySunday(),
            'workday_monday'    => $this->getWorkdayMonday(),
            'workday_tuesday'   => $this->getWorkdayTuesday(),
            'workday_wednesday' => $this->getWorkdayWednesday(),
            'workday_thursday'  => $this->getWorkdayThursday(),
            'workday_friday'    => $this->getWorkdayFriday(),
            'workday_saturday'  => $this->getWorkdaySaturday(),
            'apply_calendar'    => $this->getApplyCalendar(),
            'calendar'          => $this->getCalendar(),
        ];
    }
}

class CB_BaseLocal
{
    private $_id = null;
    private $col_language;
    private $col_name;

    public function __construct($array)
    {
        if (array_key_exists("_id", $array)) {
            $this->_id = $array["_id"];
        }
        $this->setLanguage($array["col_language"]);
        $this->setName($array["col_name"]);
    }

    public function getId()
    {
        return $this->_id;
    }

    public function setLanguage($language)
    {
        if ( ! is_numeric($language)) {
            $language = CB_LanguageManager::getLanguageId($language);
        }
        $this->col_language = $language;
    }

    public function getLanguage()
    {
        return $this->col_language;
    }

    public function getLanguageCode()
    {
        return CB_LanguageManager::getLanguageCode($this->col_language);
    }

    public function setName($name)
    {
        assert('is_string($name)');
        $this->col_name = $name;
    }

    public function getName()
    {
        return $this->col_name;
    }

    public function update(CB_DatabaseConnection $dbconn = null)
    {
        if (is_null($dbconn)) {
            global $G_container_base;
            $dbconn = $G_container_base->getInstance("dbconn");
        }
        $query = "UPDATE tab_cb_base_local SET "
                 . sprintf("col_name = '%s' ",
                $dbconn->escape($this->getName()))
                 . sprintf("WHERE _id = '%s' ", $dbconn->escape($this->getId()))
                 . sprintf("AND col_language = '%s'",
                $dbconn->escape($this->getLanguage()))
                 . ";";
        $dbconn->query($query);
        $param_list = $this->toLogParam();
        CB_BaseManager::getLogger()
                      ->noticeEx('modify', 'base_local', $param_list);
    }

    public function insert(CB_DatabaseConnection $dbconn = null)
    {
        if (is_null($dbconn)) {
            global $G_container_base;
            $dbconn = $G_container_base->getInstance("dbconn");
        }
        $query = "INSERT INTO tab_cb_base_local SET "
                 . sprintf("_id = '%s', ", $dbconn->escape($this->getId()))
                 . sprintf("col_language = '%s', ",
                $dbconn->escape($this->getLanguage()))
                 . sprintf("col_name = '%s'", $dbconn->escape($this->getName()))
                 . ";";
        $dbconn->query($query);
        $param_list = $this->toLogParam();
        CB_BaseManager::getLogger()
                      ->noticeEx('create', 'base_local', $param_list);
    }

    public function delete(CB_DatabaseConnection $dbconn = null)
    {
        if (is_null($dbconn)) {
            global $G_container_base;
            $dbconn = $G_container_base->getInstance("dbconn");
        }
        $query = cb_queryf($dbconn,
            'DELETE FROM tab_cb_base_local WHERE _id = \'@S\' AND col_language = \'@S\'',
            $this->getId(),
            $this->getLanguage());
        $dbconn->query($query);
        $param_list = $this->toLogParam();
        CB_BaseManager::getLogger()
                      ->noticeEx('delete', 'base_local', $param_list);
    }

    public function toLogParam()
    {
        return [
            'base_id'       => $this->getId(),
            'language_code' => $this->getLanguageCode(),
            'name'          => $this->getName()
        ];
    }
}

class CB_BaseWorkHours
{
    private $_id = null;
    private $col_base;
    private $col_start;
    private $col_end;

    public function toArray()
    {
        return [
            "_id"       => $this->getId(),
            "col_base"  => $this->getBase(),
            "col_start" => $this->getStart(),
            "col_end"   => $this->getEnd(),
        ];
    }

    public function toViewArray()
    {
        $start_time = new CB_Time();
        $start_time->parse($this->getStart());
        $end_time = new CB_Time();
        $end_time->parse($this->getEnd());

        return [
            "id"    => $this->getId(),
            "base"  => $this->getBase(),
            "start" => $start_time,
            "end"   => $end_time,
        ];
    }

    public function __construct($array)
    {
        $this->_id = isset($array['_id']) ? $array["_id"] : null;

        assert('isset($array["col_base"])');
        $this->setBase($array["col_base"]);

        assert('array_key_exists( "col_start", $array)');
        $this->setStart($array["col_start"]);

        assert('array_key_exists( "col_end", $array)');
        $this->setEnd($array["col_end"]);
    }

    public function getId()
    {
        return $this->_id;
    }

    public function getStart()
    {
        return $this->col_start;
    }

    public function setStart($start)
    {
        assert('is_string($start)');
        $this->col_start = $start;
    }

    public function getEnd()
    {
        return $this->col_end;
    }

    public function setEnd($end)
    {
        assert('is_string($end)');
        $this->col_end = $end;
    }

    public function getBase()
    {
        return $this->col_base;
    }

    public function setBase($base)
    {
        assert('is_numeric($base)');
        $this->col_base = $base;
    }

    /**
     *
     * @global CB_LWContainer       $G_container_base
     *
     * @param string                $base_id
     * @param CB_DatabaseConnection $dbconn
     *
     * @return CB_BaseWorkHours[]
     */
    public static function selectByBaseId(
        $base_id,
        CB_DatabaseConnection $dbconn = null
    ) {
        if (is_null($dbconn)) {
            global $G_container_base;
            $dbconn = $G_container_base->getInstance("dbconn");
        }

        $escaped_id = $dbconn->escape($base_id);
        $query
            = "SELECT * FROM tab_cb_base_work_hours WHERE col_base='{$escaped_id}';";

        $result = $dbconn->query($query);
        $ret = [];
        while ($row = $dbconn->fetch_assoc($result)) {
            $ret[] = new CB_BaseWorkHours($row);
        }
        $dbconn->free_result($result);

        return $ret;
    }

    public static function deleteByBaseId(
        $base_id,
        CB_DatabaseConnection $dbconn = null
    ) {
        if (is_null($dbconn)) {
            global $G_container_base;
            $dbconn = $G_container_base->getInstance("dbconn");
        }

        $work_hours_objects = self::selectByBaseId($base_id, $dbconn);
        foreach ($work_hours_objects as $work_hours) {
            $work_hours->delete($dbconn);
        }
    }

    public function update(CB_DatabaseConnection $dbconn = null)
    {
        if (is_null($dbconn)) {
            global $G_container_base;
            $dbconn = $G_container_base->getInstance("dbconn");
        }
        $query = "UPDATE tab_cb_base_work_hours SET "
                 . sprintf("col_base = '%s', ",
                $dbconn->escape($this->getBase()))
                 . sprintf("col_start = '%s', ",
                $dbconn->escape($this->getStart()))
                 . sprintf("col_end = '%s' ", $dbconn->escape($this->getEnd()))
                 . sprintf("WHERE _id = '%s'", $dbconn->escape($this->getId()))
                 . ";";
        $dbconn->query($query);
        $param_list = $this->toLogParam();
        CB_BaseManager::getLogger()
                      ->noticeEx('modify', 'base_work_hours', $param_list);
    }

    public function insert(CB_DatabaseConnection $dbconn = null)
    {
        if (is_null($dbconn)) {
            global $G_container_base;
            $dbconn = $G_container_base->getInstance("dbconn");
        }
        $query = "INSERT INTO tab_cb_base_work_hours SET "
                 . sprintf("col_base = '%s', ",
                $dbconn->escape($this->getBase()))
                 . sprintf("col_start = '%s', ",
                $dbconn->escape($this->getStart()))
                 . sprintf("col_end = '%s'", $dbconn->escape($this->getEnd()))
                 . ";";
        $dbconn->query($query);
        $param_list = $this->toLogParam();
        CB_BaseManager::getLogger()
                      ->noticeEx('create', 'base_work_hours', $param_list);
    }

    public function delete(CB_DatabaseConnection $dbconn = null)
    {
        if (is_null($dbconn)) {
            global $G_container_base;
            $dbconn = $G_container_base->getInstance("dbconn");
        }
        $query = sprintf("DELETE FROM tab_cb_base_work_hours WHERE _id = '%s'",
            $dbconn->escape($this->getId()));
        $dbconn->query($query);
        $param_list = $this->toLogParam();
        CB_BaseManager::getLogger()
                      ->noticeEx('delete', 'base_work_hours', $param_list);
    }

    public function toLogParam()
    {
        return [
            'base_id' => $this->getBase(),
            'start'   => $this->getStart(),
            'end'     => $this->getEnd(),
        ];
    }
}

class CB_UserBaseSetting
{
    private $_id = null;
    private $col_base;
    private $col_workday_sunday;
    private $col_workday_monday;
    private $col_workday_tuesday;
    private $col_workday_wednesday;
    private $col_workday_thursday;
    private $col_workday_friday;
    private $col_workday_saturday;
    private $col_apply_calendar;
    private $col_calendar;

    private static $cache = [];

    public function __construct($array)
    {
        $this->_id = isset($array['_id']) ? $array["_id"] : null;

        $this->setBase($array["col_base"]);
        $this->setWorkdaySunday($array["col_workday_sunday"]);
        $this->setWorkdayMonday($array["col_workday_monday"]);
        $this->setWorkdayTuesday($array["col_workday_tuesday"]);
        $this->setWorkdayWednesday($array["col_workday_wednesday"]);
        $this->setWorkdayThursday($array["col_workday_thursday"]);
        $this->setWorkdayFriday($array["col_workday_friday"]);
        $this->setWorkdaySaturday($array["col_workday_saturday"]);
        $this->setApplyCalendar($array["col_apply_calendar"]);
        if (isset($array["col_calendar"]) && $array["col_calendar"]) {
            $this->setCalendar($array["col_calendar"]);
        }
    }

    public function toViewArray()
    {
        $base = CB_Base::select($this->getBase());
        $base_id = is_null($base) ? null : $base->getId();
        $base_name = is_null($base) ? null : $base->getLocalName();

        $calendar_manager = GRN_CalendarManager::getInstance();
        $calendar
            = $calendar_manager->getSystemCalendar($this->getCalendar());
        if ( ! $calendar) {
            $calendar
                = $calendar_manager->getSystemCalendar(GRN_CALENDAR_SYSTEM_DEFAULT);
        }

        $work_hours_list = null;
        if (is_null($this->getId())) {
            $work_hours_list = CB_BaseManager::getDefaultUserWorkHours();
        } else {
            $work_hours_list = CB_UserWorkHours::selectByUserId($this->getId());
        }

        $work_hours_view = [];
        foreach ($work_hours_list as $work_hours) {
            $work_hours_view[] = $work_hours->toViewArray();
        }

        return [
            'id'                => $this->getId(),
            'base'              => [
                'id'         => $base_id,
                'local_name' => $base_name
            ],
            'workday_sunday'    => $this->getWorkdaySunday(),
            'workday_monday'    => $this->getWorkdayMonday(),
            'workday_tuesday'   => $this->getWorkdayTuesday(),
            'workday_wednesday' => $this->getWorkdayWednesday(),
            'workday_thursday'  => $this->getWorkdayThursday(),
            'workday_friday'    => $this->getWorkdayFriday(),
            'workday_saturday'  => $this->getWorkdaySaturday(),
            'apply_calendar'    => $this->getApplyCalendar(),
            'work_hours_list'   => $work_hours_view,
            'calendar'          => [
                'id'   => $calendar->getOID(),
                'name' => $calendar->get('name')
            ],
        ];
    }

    public function toArray()
    {
        return [
            "_id"                   => $this->getId(),
            "col_base"              => $this->getBase(),
            "col_workday_sunday"    => $this->getWorkdaySunday(),
            "col_workday_monday"    => $this->getWorkdayMonday(),
            "col_workday_tuesday"   => $this->getWorkdayTuesday(),
            "col_workday_wednesday" => $this->getWorkdayWednesday(),
            "col_workday_thursday"  => $this->getWorkdayThursday(),
            "col_workday_friday"    => $this->getWorkdayFriday(),
            "col_workday_saturdy"   => $this->getWorkdaySaturday(),
            "col_apply_calendar"    => $this->getApplyCalendar(),
            "col_calendar"          => $this->getCalendar(),
        ];
    }

    public function setId($user_id)
    {
        assert('is_numeric($user_id)');
        $this->_id = $user_id;
    }

    public function getId()
    {
        return $this->_id;
    }

    public function setBase($base)
    {
        assert('is_numeric($base) || is_null($base)');
        $this->col_base = $base;
    }

    public function getBase()
    {
        return $this->col_base;
    }

    public function getWorkdaySunday()
    {
        return $this->col_workday_sunday;
    }

    public function setWorkdaySunday($workday_sunday)
    {
        assert('is_numeric($workday_sunday)');
        $this->col_workday_sunday = (int)$workday_sunday;
    }

    public function getWorkdayMonday()
    {
        return $this->col_workday_monday;
    }

    public function setWorkdayMonday($workday_monday)
    {
        assert('is_numeric($workday_monday)');
        $this->col_workday_monday = (int)$workday_monday;
    }

    public function getWorkdayTuesday()
    {
        return $this->col_workday_tuesday;
    }

    public function setWorkdayTuesday($workday_tuesday)
    {
        assert('is_numeric($workday_tuesday)');
        $this->col_workday_tuesday = (int)$workday_tuesday;
    }

    public function getWorkdayWednesday()
    {
        return $this->col_workday_wednesday;
    }

    public function setWorkdayWednesday($workday_wednesday)
    {
        assert('is_numeric($workday_wednesday)');
        $this->col_workday_wednesday = (int)$workday_wednesday;
    }

    public function getWorkdayThursday()
    {
        return $this->col_workday_thursday;
    }

    public function setWorkdayThursday($workday_thursday)
    {
        assert('is_numeric($workday_thursday)');
        $this->col_workday_thursday = (int)$workday_thursday;
    }

    public function getWorkdayFriday()
    {
        return $this->col_workday_friday;
    }

    public function setWorkdayFriday($workday_friday)
    {
        assert('is_numeric($workday_friday)');
        $this->col_workday_friday = (int)$workday_friday;
    }

    public function getWorkdaySaturday()
    {
        return $this->col_workday_saturday;
    }

    public function setWorkdaySaturday($workday_saturday)
    {
        assert('is_numeric($workday_saturday)');
        $this->col_workday_saturday = (int)$workday_saturday;
    }

    public function getApplyCalendar()
    {
        return $this->col_apply_calendar;
    }

    public function setApplyCalendar($apply_calendar)
    {
        assert('is_numeric($apply_calendar)');
        $this->col_apply_calendar = (int)$apply_calendar;
    }

    public function getCalendar()
    {
        return $this->col_calendar;
    }

    public function setCalendar($calendar)
    {
        assert('is_numeric($calendar)');
        $this->col_calendar = (int)$calendar;
    }

    public function insert(CB_DatabaseConnection $dbconn = null)
    {
        if (is_null($dbconn)) {
            global $G_container_base;
            $dbconn = $G_container_base->getInstance("dbconn");
        }

        $query = "INSERT INTO tab_cb_user_base_setting SET "
                 . sprintf("_id ='%s', ", $dbconn->escape($this->getId()))
                 . (is_null($this->getBase())
                ? "col_base = NULL, "
                : sprintf("col_base = '%s', ",
                    $dbconn->escape($this->getBase())))
                 . (is_null($this->getWorkdaySunday())
                ? "col_workday_sunday = NULL, "
                : sprintf("col_workday_sunday = '%s', ",
                    $dbconn->escape($this->getWorkdaySunday())))
                 . (is_null($this->getWorkdayMonday())
                ? "col_workday_monday = NULL, "
                : sprintf("col_workday_monday = '%s', ",
                    $dbconn->escape($this->getWorkdayMonday())))
                 . (is_null($this->getWorkdayTuesday())
                ? "col_workday_tuesday = NULL, "
                : sprintf("col_workday_tuesday = '%s', ",
                    $dbconn->escape($this->getWorkdayTuesday())))
                 . (is_null($this->getWorkdayWednesday())
                ? "col_workday_wednesday = NULL, "
                : sprintf("col_workday_wednesday = '%s', ",
                    $dbconn->escape($this->getWorkdayWednesday())))
                 . (is_null($this->getWorkdayThursday())
                ? "col_workday_thursday = NULL, "
                : sprintf("col_workday_thursday = '%s', ",
                    $dbconn->escape($this->getWorkdayThursday())))
                 . (is_null($this->getWorkdayFriday())
                ? "col_workday_friday = NULL, "
                : sprintf("col_workday_friday = '%s', ",
                    $dbconn->escape($this->getWorkdayFriday())))
                 . (is_null($this->getWorkdaySaturday())
                ? "col_workday_saturday = NULL, "
                : sprintf("col_workday_saturday = '%s', ",
                    $dbconn->escape($this->getWorkdaySaturday())))
                 . (is_null($this->getApplyCalendar())
                ? "col_apply_calendar = NULL, "
                : sprintf("col_apply_calendar = '%s', ",
                    $dbconn->escape($this->getApplyCalendar())))
                 . (is_null($this->getCalendar())
                ? "col_calendar = NULL "
                : sprintf("col_calendar = '%s' ",
                    $dbconn->escape($this->getCalendar())))
                 . ";";
        $dbconn->query($query);
        $this->_id = $dbconn->get_insert_id();
    }

    public function update(CB_DatabaseConnection $dbconn = null)
    {
        if (is_null($dbconn)) {
            global $G_container_base;
            $dbconn = $G_container_base->getInstance("dbconn");
        }

        $query = "UPDATE tab_cb_user_base_setting SET "
                 . (is_null($this->getBase())
                ? "col_base = NULL, "
                : sprintf("col_base = '%s', ",
                    $dbconn->escape($this->getBase())))
                 . (is_null($this->getWorkdaySunday())
                ? "col_workday_sunday = NULL, "
                : sprintf("col_workday_sunday = '%s', ",
                    $dbconn->escape($this->getWorkdaySunday())))
                 . (is_null($this->getWorkdayMonday())
                ? "col_workday_monday = NULL, "
                : sprintf("col_workday_monday = '%s', ",
                    $dbconn->escape($this->getWorkdayMonday())))
                 . (is_null($this->getWorkdayTuesday())
                ? "col_workday_tuesday = NULL, "
                : sprintf("col_workday_tuesday = '%s', ",
                    $dbconn->escape($this->getWorkdayTuesday())))
                 . (is_null($this->getWorkdayWednesday())
                ? "col_workday_wednesday = NULL, "
                : sprintf("col_workday_wednesday = '%s', ",
                    $dbconn->escape($this->getWorkdayWednesday())))
                 . (is_null($this->getWorkdayThursday())
                ? "col_workday_thursday = NULL, "
                : sprintf("col_workday_thursday = '%s', ",
                    $dbconn->escape($this->getWorkdayThursday())))
                 . (is_null($this->getWorkdayFriday())
                ? "col_workday_friday = NULL, "
                : sprintf("col_workday_friday = '%s', ",
                    $dbconn->escape($this->getWorkdayFriday())))
                 . (is_null($this->getWorkdaySaturday())
                ? "col_workday_saturday = NULL, "
                : sprintf("col_workday_saturday = '%s', ",
                    $dbconn->escape($this->getWorkdaySaturday())))
                 . (is_null($this->getApplyCalendar())
                ? "col_apply_calendar = NULL, "
                : sprintf("col_apply_calendar = '%s', ",
                    $dbconn->escape($this->getApplyCalendar())))
                 . (is_null($this->getCalendar())
                ? "col_calendar = NULL, "
                : sprintf("col_calendar = '%s', ",
                    $dbconn->escape($this->getCalendar())))
                 . sprintf("col_is_customize = '%s'",
                $dbconn->escape($this->isCustomized()))
                 . sprintf(" WHERE _id = '%s' ",
                $dbconn->escape($this->getId()))
                 . ";";
        $dbconn->query($query);

        if (array_key_exists($this->getId(), self::$cache)) {
            unset(self::$cache[$this->getId()]);
        }
    }

    public function delete(CB_DatabaseConnection $dbconn = null)
    {
        if (is_null($dbconn)) {
            global $G_container_base;
            $dbconn = $G_container_base->getInstance("dbconn");
        }

        $query
            = sprintf("DELETE FROM tab_cb_user_base_setting WHERE _id = '%s';",
            $dbconn->escape($this->getId()));
        $dbconn->query($query);

        if (array_key_exists($this->getId(), self::$cache)) {
            unset(self::$cache[$this->getId()]);
        }
    }

    /**
     *
     * @global <type> $G_container_base
     *
     * @param string                $user_id
     * @param CB_DatabaseConnection $dbconn
     *
     * @return CB_UserBaseSetting|null
     */
    public static function select(
        $user_id,
        CB_DatabaseConnection $dbconn = null
    ) {
        if (array_key_exists($user_id, self::$cache)) {
            return self::$cache[$user_id];
        }

        if (is_null($dbconn)) {
            global $G_container_base;
            $dbconn = $G_container_base->getInstance("dbconn");
        }

        $query
            = sprintf("SELECT * FROM tab_cb_user_base_setting WHERE _id='%s';",
            $dbconn->escape($user_id));
        $result = $dbconn->query($query);
        $row = $dbconn->fetch_assoc($result);
        $dbconn->free_result($result);

        if ($row === false) {
            return null;
        }
        $setting = new CB_UserBaseSetting($row);
        self::$cache[$user_id] = $setting;

        return $setting;
    }

    public static function loadAndCache($user_id_list)
    {
        if ( ! is_array($user_id_list) || count($user_id_list) == 0) {
            return;
        }

        global $G_container_base;
        $dbconn = $G_container_base->getInstance("dbconn");

        $query = cb_queryf($dbconn,
            "SELECT * FROM tab_cb_user_base_setting WHERE _id IN (@A)",
            $user_id_list);
        $result = $dbconn->query($query);

        $rows = [];
        while (($row = $dbconn->fetch_assoc($result))) {
            $rows[$row['_id']] = $row;
        }

        foreach ($user_id_list as $user_id) {
            if (isset($rows[$user_id])) {
                self::$cache[$user_id]
                    = new CB_UserBaseSetting($rows[$user_id]);
            } else {
                self::$cache[$user_id] = null;
            }
        }
    }

    public function isCustomized()
    {
        $base = CB_Base::select($this->getBase());
        if (is_null($base)) {
            return true;
        }

        if ($this->getWorkdaySunday() !== $base->getWorkdaySunday()) {
            return true;
        }

        if ($this->getWorkdayMonday() !== $base->getWorkdayMonday()) {
            return true;
        }

        if ($this->getWorkdayTuesday() !== $base->getWorkdayTuesday()) {
            return true;
        }

        if ($this->getWorkdayWednesday() !== $base->getWorkdayWednesday()) {
            return true;
        }

        if ($this->getWorkdayThursday() !== $base->getWorkdayThursday()) {
            return true;
        }

        if ($this->getWorkdayFriday() !== $base->getWorkdayFriday()) {
            return true;
        }

        if ($this->getWorkdaySaturday() !== $base->getWorkdaySaturday()) {
            return true;
        }

        if ($this->getApplyCalendar() !== $base->getApplyCalendar()) {
            return true;
        }

        if ($this->isCalendarCustomised($base)) {
            return true;
        }

        if ($this->isModifiedWorkHours()) {
            return true;
        }

        return false;
    }

    /**
     * @param $base
     *
     * @return bool
     */
    public function isCalendarCustomised($base)
    {
        $calendar = (int)$this->getCalendar();
        $baseCalendar = (int)$base->getCalendar();
        $in = [0, 1];
        if ((in_array($calendar, $in) && in_array($baseCalendar, $in))) {
            return false;
        }

        return $calendar !== $baseCalendar;
    }

    private function isModifiedWorkHours()
    {
        $user_work_hours_list
            = CB_UserWorkHours::selectByUserId($this->getId());
        $base_work_hours_list
            = CB_BaseWorkHours::selectByBaseId($this->getBase());
        if (count($user_work_hours_list) !== count($base_work_hours_list)) {
            return true;
        }
        while (count($user_work_hours_list)) {
            $user_work_hours = array_shift($user_work_hours_list);
            $base_work_hours = array_shift($base_work_hours_list);
            if ($user_work_hours->getStart() !== $base_work_hours->getStart()) {
                return true;
            }
            if ($user_work_hours->getEnd() !== $base_work_hours->getEnd()) {
                return true;
            }
        }

        return false;
    }

    /**
     * Check workday
     *
     * @param CB_DateEx $date
     *
     * @return bool
     */
    public function isWorkday($date)
    {
        // $date is workday when applying calendar's workday and $date is the calendar's workday.
        if ($this->getApplyCalendar() && $this->isCalendarWorkday($date)) {
            return true;
        }

        // $date is holiday when $date is the calendar's holiday.
        // This is nothing to do with the setting of applying calendar's workday.
        if ($this->isCalendarHoliday($date)) {
            return false;
        }

        $day_of_week = $date->getDayOfWeek();
        $workday = true;
        switch ($day_of_week) {
            case CB_DayOfWeek::SUNDAY:
                $workday = $this->getWorkdaySunday();
                break;
            case CB_DayOfWeek::MONDAY:
                $workday = $this->getWorkdayMonday();
                break;
            case CB_DayOfWeek::TUESDAY:
                $workday = $this->getWorkdayTuesday();
                break;
            case CB_DayOfWeek::WEDNESDAY:
                $workday = $this->getWorkdayWednesday();
                break;
            case CB_DayOfWeek::THURSDAY:
                $workday = $this->getWorkdayThursday();
                break;
            case CB_DayOfWeek::FRIDAY:
                $workday = $this->getWorkdayFriday();
                break;
            case CB_DayOfWeek::SATURDAY:
                $workday = $this->getWorkdaySaturday();
                break;
            default:
                assert('FALSE');
                break;
        }

        return $workday ? true : false;
    }

    /**
     * Check holiday
     *
     * @param CB_Date $date
     *
     * @return type
     */
    private function isCalendarHoliday($date)
    {
        $calendar = GRN_CalendarManager::getInstance()
                                       ->getSystemCalendar($this->getCalendar());
        if ( ! $calendar) {
            $calendar = GRN_CalendarManager::getInstance()
                                           ->getSystemCalendar(GRN_CALENDAR_SYSTEM_DEFAULT);
        }
        $days = $calendar->getDaysInfoFast('system', $date, $date,
            [GRN_CALENDAR_TYPE_PUBLICHOLIDAY]);
        if (count($days)) {
            return true;
        }

        return false;
    }

    /**
     * Check calendar's workday
     *
     * @param CB_Date $date
     *
     * @return type
     */
    private function isCalendarWorkday($date)
    {
        $calendar = GRN_CalendarManager::getInstance()
                                       ->getSystemCalendar($this->getCalendar());
        if ( ! $calendar) {
            $calendar = GRN_CalendarManager::getInstance()
                                           ->getSystemCalendar(GRN_CALENDAR_SYSTEM_DEFAULT);
        }
        $days = $calendar->getDaysInfoFast('system', $date, $date,
            [GRN_CALENDAR_TYPE_WORKDAY]);
        if (count($days)) {
            return true;
        }

        return false;
    }
}

class CB_UserWorkHours
{
    private $_id = null;
    private $col_user;
    private $col_start;
    private $col_end;
    private static $cache = [];

    public function toArray()
    {
        return [
            "_id"       => $this->getId(),
            "col_user"  => $this->getUser(),
            "col_start" => $this->getStart(),
            "col_end"   => $this->getEnd(),
        ];
    }

    public function toViewArray()
    {
        $start_time = new CB_Time();
        $start_time->parse($this->getStart());
        $end_time = new CB_Time();
        $end_time->parse($this->getEnd());

        return [
            "id"    => $this->getId(),
            "user"  => $this->getUser(),
            "start" => $start_time,
            "end"   => $end_time,
        ];
    }

    public function __construct($array)
    {
        $this->_id = isset($array['_id']) ? $array["_id"] : null;

        assert('array_key_exists( "col_user", $array )');
        $this->setUser($array["col_user"]);

        assert('array_key_exists( "col_start", $array )');
        $this->setStart($array["col_start"]);

        assert('array_key_exists( "col_end", $array )');
        $this->setEnd($array["col_end"]);
    }

    public function getId()
    {
        return $this->_id;
    }

    public function getUser()
    {
        return $this->col_user;
    }

    public function setUser($user_id)
    {
        $this->col_user = $user_id;
    }

    public function getStart()
    {
        return $this->col_start;
    }

    public function setStart($start)
    {
        assert('is_string($start)');
        $this->col_start = $start;
    }

    public function getEnd()
    {
        return $this->col_end;
    }

    public function setEnd($end)
    {
        assert('is_string($end)');
        $this->col_end = $end;
    }

    public function update(CB_DatabaseConnection $dbconn = null)
    {
        if (is_null($dbconn)) {
            global $G_container_base;
            $dbconn = $G_container_base->getInstance("dbconn");
        }
        $query = "UPDATE tab_cb_user_work_hours SET "
                 . sprintf("col_user = '%s', ",
                $dbconn->escape($this->getUser()))
                 . sprintf("col_start = '%s', ",
                $dbconn->escape($this->getStart()))
                 . sprintf("col_end = '%s' ", $dbconn->escape($this->getEnd()))
                 . sprintf("WHERE _id = '%s'", $dbconn->escape($this->getId()))
                 . ";";
        $dbconn->query($query);
    }

    public function insert(CB_DatabaseConnection $dbconn = null)
    {
        if (is_null($dbconn)) {
            global $G_container_base;
            $dbconn = $G_container_base->getInstance("dbconn");
        }
        $query = "INSERT INTO tab_cb_user_work_hours SET "
                 . sprintf("col_user = '%s', ",
                $dbconn->escape($this->getUser()))
                 . sprintf("col_start = '%s', ",
                $dbconn->escape($this->getStart()))
                 . sprintf("col_end = '%s'", $dbconn->escape($this->getEnd()))
                 . ";";
        $dbconn->query($query);
    }

    public function delete(CB_DatabaseConnection $dbconn = null)
    {
        if (is_null($dbconn)) {
            global $G_container_base;
            $dbconn = $G_container_base->getInstance("dbconn");
        }
        $query = sprintf("DELETE FROM tab_cb_user_work_hours WHERE _id = '%s'",
            $dbconn->escape($this->getId()));
        $dbconn->query($query);
    }

    /**
     * delete user work hours by user id
     *
     * @global CB_LWContainer       $G_container_base
     *
     * @param int                   $user_id
     * @param CB_DatabaseConnection $dbconn
     */
    public static function deleteByUserId(
        $user_id,
        CB_DatabaseConnection $dbconn = null
    ) {
        if (is_null($dbconn)) {
            global $G_container_base;
            $dbconn = $G_container_base->getInstance("dbconn");
        }

        $escaped_id = $dbconn->escape($user_id);
        $query
            = "DELETE FROM tab_cb_user_work_hours WHERE col_user='{$escaped_id}';";

        $dbconn->query($query);
    }


    /**
     *
     * @global CB_LWContainer       $G_container_base
     *
     * @param string                $user_id
     * @param CB_DatabaseConnection $dbconn
     *
     * @return CB_UserWorkHours[]
     */
    public static function selectByUserId(
        $user_id,
        CB_DatabaseConnection $dbconn = null
    ) {
        if (array_key_exists($user_id, self::$cache)) {
            return self::$cache[$user_id];
        }

        if (is_null($dbconn)) {
            global $G_container_base;
            $dbconn = $G_container_base->getInstance("dbconn");
        }

        $escaped_id = $dbconn->escape($user_id);
        $query
            = "SELECT * FROM tab_cb_user_work_hours WHERE col_user='{$escaped_id}';";

        $result = $dbconn->query($query);
        $ret = [];
        while ($row = $dbconn->fetch_assoc($result)) {
            $uwh = new CB_UserWorkHours($row);
            $ret[] = $uwh;
            self::$cache[$row['col_user']][] = $uwh;
        }
        $dbconn->free_result($result);

        return $ret;
    }

    public static function loadAndCache($user_id_list)
    {
        global $G_container_base;
        $dbconn = $G_container_base->getInstance("dbconn");
        $query = cb_queryf($dbconn,
            "SELECT * FROM tab_cb_user_work_hours WHERE col_user IN (@S)",
            implode(',', $user_id_list));
        $result = $dbconn->query($query);
        while ($row = $dbconn->fetch_assoc($result)) {
            self::$cache[$row['col_user']][] = new CB_UserWorkHours($row);
        }
        $dbconn->free_result($result);
    }

}

class CB_BaseManager
{
    const BASE_CSV_BASE_NAME_LINE = 0;
    const BASE_CSV_BASE_CODE_LINE = 1;
    const BASE_CSV_WORKDAY_SUNDAY_LINE = 2;
    const BASE_CSV_WORKDAY_MONDAY_LINE = 3;
    const BASE_CSV_WORKDAY_TUESDAY_LINE = 4;
    const BASE_CSV_WORKDAY_WEDNESDAY_LINE = 5;
    const BASE_CSV_WORKDAY_THURSDAY_LINE = 6;
    const BASE_CSV_WORKDAY_FRIDAY_LINE = 7;
    const BASE_CSV_WORKDAY_SATURDAY_LINE = 8;
    const BASE_CSV_APPLY_CALENDAR_LINE = 9;
    const BASE_CSV_CALENDAR_CODE_LINE = 10;
    const BASE_CSV_WORK_HOUSR_START_LINE = 11;

    const BASE_NAME_CSV_BASE_CODE_LINE = 0;
    const BASE_NAME_CSV_LANGUAGE_CODE_LINE = 1;
    const BASE_NAME_CSV_BASE_NAME_LINE = 2;

    private static $_base_setting_cache = [];
    private static $_default_base_setting_cache = null;

    /**
     * Set base to user
     *
     * @param $user_id
     * @param $base_id
     */
    public static function setUserBaseSetting($user_id, $base_id)
    {
        $base = null;
        if ( ! is_null($base_id) && strlen($base_id) !== 0) {
            $base = CB_Base::select($base_id);
            if (is_null($base)) {
                cb_throw_error(E_COMMON_BASE_WAS_NOT_FOUND);
            }
        }

        $new_base_setting = null;
        if (is_null($base)) {
            $new_base_setting = self::getDefaultUserBaseSetting();
            $new_base_setting->setId($user_id);
        } else {
            $new_base_setting = new CB_UserBaseSetting([
                '_id'                   => $user_id,
                'col_base'              => $base->getId(),
                'col_workday_sunday'    => $base->getWorkdaySunday(),
                'col_workday_monday'    => $base->getWorkdayMonday(),
                'col_workday_tuesday'   => $base->getWorkdayTuesday(),
                'col_workday_wednesday' => $base->getWorkdayWednesday(),
                'col_workday_thursday'  => $base->getWorkdayThursday(),
                'col_workday_friday'    => $base->getWorkdayFriday(),
                'col_workday_saturday'  => $base->getWorkdaySaturday(),
                'col_apply_calendar'    => $base->getApplyCalendar(),
                'col_calendar'          => $base->getCalendar(),
            ]);
        }
        $user_base_setting = CB_UserBaseSetting::select($user_id);
        if (is_null($user_base_setting)) {
            $new_base_setting->insert();
        } else {
            CB_UserWorkHours::deleteByUserId($user_id);
            $new_base_setting->update();
        }

        self::setUserBaseWorkHours($user_id, $base);
    }

    private static function setUserDefaultWorkHours($user_id)
    {
        $work_hours_list = self::getDefaultUserWorkHours();
        foreach ($work_hours_list as $work_hours) {
            $work_hours->setUser($user_id);
            $work_hours->insert();
        }
    }

    /**
     * Set user work hours by base.
     *
     * @param int     $user_id
     * @param CB_Base $base
     */
    private static function setUserBaseWorkHours($user_id, $base)
    {
        if (is_null($base)) {
            self::setUserDefaultWorkHours($user_id);
        } else {
            $work_hours_list = CB_BaseWorkHours::selectByBaseId($base->getId());
            foreach ($work_hours_list as $work_hours) {
                $new_user_work_hours = new CB_UserWorkHours([
                    'col_user'  => $user_id,
                    'col_start' => $work_hours->getStart(),
                    'col_end'   => $work_hours->getEnd(),
                ]);
                $new_user_work_hours->insert();
            }
        }
    }

    /**
     *
     * @global                      $G_container_base $G_container_base
     *
     * @param string                $offset
     * @param string                $limit
     * @param CB_DatabaseConnection $dbconn
     *
     * @return CB_Base[]
     */
    public static function getBases(
        $offset = null,
        $limit = null,
        CB_DatabaseConnection $dbconn = null
    ) {
        if (is_null($dbconn)) {
            global $G_container_base;
            $dbconn = $G_container_base->getInstance("dbconn");
        }

        $query = "SELECT * FROM tab_cb_base";
        if ( ! is_null($limit)) {
            $escaped_offset = intval($dbconn->escape($offset));
            $escaped_limit = intval($dbconn->escape($limit));
            $query = $dbconn->select_format($query, $escaped_offset,
                $escaped_limit);
        }

        $result = $dbconn->query($query);
        $ret = [];
        while (($row = $dbconn->fetch_assoc($result)) !== false) {
            $ret[$row["_id"]] = new CB_Base($row);
        }

        return $ret;
    }

    /**
     *
     * @param string                $offset
     * @param string                $limit
     * @param CB_DatabaseConnection $dbconn
     *
     * @return CB_Base[]
     */
    public static function getBasesView(
        $offset = null,
        $limit = null,
        CB_DatabaseConnection $dbconn = null
    ) {
        $bases = self::getBases($offset, $limit, $dbconn);
        $ret = [];
        foreach ($bases as $base) {
            $ret[] = $base->toViewArray();
        }

        return $ret;
    }

    /**
     *
     * @global                      $G_container_base $G_container_base
     *
     * @param string                $baseId
     * @param CB_DatabaseConnection $dbconn
     *
     * @return array of CB_BaseLocal
     */
    public static function getBaseNamesByBaseId(
        $baseId,
        CB_DatabaseConnection $dbconn = null
    ) {
        if (is_null($dbconn)) {
            global $G_container_base;
            $dbconn = $G_container_base->getInstance("dbconn");
        }

        $escaped_baseId = $dbconn->escape($baseId);
        $query
            = "SELECT * FROM tab_cb_base_local WHERE _id='{$escaped_baseId}';";

        $result = $dbconn->query($query);
        $ret = [];
        while (($row = $dbconn->fetch_assoc($result)) != false) {
            $ret[CB_LanguageManager::getLanguageCode($row["col_language"])]
                = new CB_BaseLocal($row);
        }
        $dbconn->free_result($result);

        return $ret;
    }

    public static function getBaseNamesByLanguageCode(
        $language_code,
        CB_DatabaseConnection $dbconn = null
    ) {
        if (is_null($dbconn)) {
            global $G_container_base;
            $dbconn = $G_container_base->getInstance("dbconn");
        }

        $language_id = CB_LanguageManager::getLanguageId($language_code);
        if (is_null($language_id)) {
            return [];
        }

        $escaped_languageId = $dbconn->escape($language_id);
        $query
            = "SELECT * FROM tab_cb_base_local WHERE col_language='{$escaped_languageId}';";

        $result = $dbconn->query($query);
        $ret = [];
        while (($row = $dbconn->fetch_assoc($result)) != false) {
            $ret[$row['_id']] = new CB_BaseLocal($row);
        }
        $dbconn->free_result($result);

        return $ret;
    }

    /**
     *
     * @global                      $G_container_base $G_container_base
     *
     * @param string                $base_id
     * @param string                $language
     * @param CB_DatabaseConnection $dbconn
     *
     * @return CB_BaseLocal
     */
    public static function getBaseName(
        $base_id,
        $language,
        CB_DatabaseConnection $dbconn = null
    ) {
        if (is_null($dbconn)) {
            global $G_container_base;
            $dbconn = $G_container_base->getInstance("dbconn");
        }

        if ( ! is_numeric($language)) {
            $language = CB_LanguageManager::getLanguageId($language);
        }

        $escaped_base_id = $dbconn->escape($base_id);
        $escaped_language = $dbconn->escape($language);
        $query
            = "SELECT * FROM tab_cb_base_local WHERE _id='{$escaped_base_id}' AND col_language='{$escaped_language}';";

        $result = $dbconn->query($query);
        $row = $dbconn->fetch_assoc($result);
        $dbconn->free_result($result);

        if ($row === false) {
            return null;
        }

        return new CB_BaseLocal($row);
    }

    /**
     * Parse parameters and return work hours list
     *
     * @param array $params
     */
    public static function parseWorkHoursList($params)
    {
        $work_hours_list = [];
        foreach (array_keys($params) as $key) {
            if (preg_match('/start_work_hours_(?P<number>.*)_hour/', $key,
                $matches)
            ) {
                $number = $matches['number'];
                if ( ! isset($params['start_work_hours_' . $number . '_minute'])
                     || ! isset($params['end_work_hours_' . $number . '_hour'])
                     || ! isset($params['end_work_hours_' . $number
                                        . '_minute'])
                ) {
                    require_once('fw/error_code.csp');
                    cb_throw_error(E_COMMON_INVALID_TIME);
                }

                $start_time = new CB_Time();
                $start_time->hour = $params['start_work_hours_' . $number
                                            . '_hour'];
                $start_time->minute = $params['start_work_hours_' . $number
                                              . '_minute'];
                $end_time = new CB_Time();
                $end_time->hour = $params['end_work_hours_' . $number
                                          . '_hour'];
                $end_time->minute = $params['end_work_hours_' . $number
                                            . '_minute'];

                $work_hours_list[$number] = [];
                $work_hours_list[$number]['start'] = $start_time;
                $work_hours_list[$number]['end'] = $end_time;
            }
        }

        return $work_hours_list;
    }

    /**
     * Get default user base setting
     *
     * @return CB_UserBaseSetting
     */
    public static function getDefaultUserBaseSetting()
    {
        return new CB_UserBaseSetting([
            '_id'                   => null,
            'col_base'              => null,
            'col_workday_sunday'    => 1,
            'col_workday_monday'    => 1,
            'col_workday_tuesday'   => 1,
            'col_workday_wednesday' => 1,
            'col_workday_thursday'  => 1,
            'col_workday_friday'    => 1,
            'col_workday_saturday'  => 1,
            'col_apply_calendar'    => 1,
            'col_calendar'          => GRN_CALENDAR_SYSTEM_DEFAULT,
        ]);
    }

    /**
     * Get default user work hours
     *
     * @return CB_UserWorkHours
     */
    public static function getDefaultUserWorkHours()
    {
        return [
            new CB_UserWorkHours([
                'col_user'  => null,
                'col_start' => '00:00:00',
                'col_end'   => '23:59:59',
            ])
        ];
    }

    public static function getBaseSelectParams($selected = null)
    {
        $bases = self::getBases();
        $bases_param = [];
        $bases_param[] = ['value' => '', 'label' => '----'];
        foreach ($bases as $base_id => $base) {
            $local_name = trim($base->getLocalName());
            if ('' === $local_name) {
                $local_name = $base->getName();
            }

            $bases_param[] = [
                'value'    => $base_id,
                'label'    => $local_name,
                'selected' => $base_id == $selected,
            ];
        }

        return $bases_param;
    }

    /**
     * Get Logger
     *
     * @return CB_Logger
     */
    public static function getLogger()
    {
        require_once('grn/logger.csp');
        $logic = GRN_LoggingLogic::getInstance();

        $logger_manager = CB_LoggerManager::getInstance();
        $log_category = $logic->getLogCategory('common');
        $logger = $logger_manager->getLogger($log_category);

        return $logger;
    }

    public static function importBase($line)
    {
        cb_trim_check($line[self::BASE_CSV_BASE_NAME_LINE],
            E_COMMON_MISSING_MANDATORY);
        cb_trim_check($line[self::BASE_CSV_BASE_CODE_LINE],
            E_COMMON_MISSING_MANDATORY);
        $calendar = GRN_CalendarManager::getInstance()
                                       ->getSystemCalendarByCode($line[self::BASE_CSV_CALENDAR_CODE_LINE]);
        if ( ! $calendar) {
            cb_throw_error(E_GRN_CALENDAR_CALENDAR_NOT_FOUND);
        }

        $code = $line[self::BASE_CSV_BASE_CODE_LINE];
        $base = CB_Base::selectByCode($code);
        if (is_null($base)) {
            $base = new CB_Base([
                'col_name'              => $line[self::BASE_CSV_BASE_NAME_LINE],
                'col_code'              => $line[self::BASE_CSV_BASE_CODE_LINE],
                'col_workday_sunday'    => $line[self::BASE_CSV_WORKDAY_SUNDAY_LINE],
                'col_workday_monday'    => $line[self::BASE_CSV_WORKDAY_MONDAY_LINE],
                'col_workday_tuesday'   => $line[self::BASE_CSV_WORKDAY_TUESDAY_LINE],
                'col_workday_wednesday' => $line[self::BASE_CSV_WORKDAY_WEDNESDAY_LINE],
                'col_workday_thursday'  => $line[self::BASE_CSV_WORKDAY_THURSDAY_LINE],
                'col_workday_friday'    => $line[self::BASE_CSV_WORKDAY_FRIDAY_LINE],
                'col_workday_saturday'  => $line[self::BASE_CSV_WORKDAY_SATURDAY_LINE],
                'col_apply_calendar'    => $line[self::BASE_CSV_APPLY_CALENDAR_LINE],
                'col_calendar'          => $calendar->getOID(),
            ]);
            $base->insert();
        } else {
            $base->setName($line[self::BASE_CSV_BASE_NAME_LINE]);
            $base->setWorkdaySunday($line[self::BASE_CSV_WORKDAY_SUNDAY_LINE]);
            $base->setWorkdayMonday($line[self::BASE_CSV_WORKDAY_MONDAY_LINE]);
            $base->setWorkdayTuesday($line[self::BASE_CSV_WORKDAY_TUESDAY_LINE]);
            $base->setWorkdayWednesday($line[self::BASE_CSV_WORKDAY_WEDNESDAY_LINE]);
            $base->setWorkdayThursday($line[self::BASE_CSV_WORKDAY_THURSDAY_LINE]);
            $base->setWorkdayFriday($line[self::BASE_CSV_WORKDAY_FRIDAY_LINE]);
            $base->setWorkdaySaturday($line[self::BASE_CSV_WORKDAY_SATURDAY_LINE]);
            $base->setApplyCalendar($line[self::BASE_CSV_APPLY_CALENDAR_LINE]);
            $base->setCalendar($calendar->getOID());
            $base->update();
        }

        self::importBaseWorkHours($base, $line);
    }

    public static function modifyBase($base_info, $base_names)
    {
        $base = CB_Base::select($base_info['bid']);
        if (is_null($base)) {
            cb_throw_error(E_COMMON_BASE_WAS_NOT_FOUND);
        }

        $work_hours_list = CB_BaseManager::parseWorkHoursList($base_info);
        if (count($work_hours_list) > 10) {
            cb_throw_error(E_GRN_SYSTEM_OVER_THE_LIMIT);
        }

        $workday_info = [];
        $weekdays = [
            'sunday',
            'monday',
            'tuesday',
            'wednesday',
            'thursday',
            'friday',
            'saturday'
        ];
        foreach ($weekdays as $week) {
            $workday_info[$week] = (isset($base_info[$week])
                                    && $base_info[$week]) ? 1 : 0;
        }

        $calendar_info = [];
        $calendar_info['cid'] = isset($base_info['calendar'])
            ? $base_info['calendar'] : GRN_CALENDAR_SYSTEM_DEFAULT;
        $calendar_info['apply'] = (isset($base_info['apply_calendar'])
                                   && $base_info['apply_calendar']) ? 1 : 0;

        $base->setName($base_names[CB_I18N_DEFUALT_LANGUAGE_CODE]);
        $base->setCode(isset($base_info['base-code']) ? $base_info["base-code"]
            : null);
        $base->setWorkdaySunday($workday_info['sunday']);
        $base->setWorkdayMonday($workday_info['monday']);
        $base->setWorkdayTuesday($workday_info['tuesday']);
        $base->setWorkdayWednesday($workday_info['wednesday']);
        $base->setWorkdayThursday($workday_info['thursday']);
        $base->setWorkdayFriday($workday_info['friday']);
        $base->setWorkdaySaturday($workday_info['saturday']);
        $base->setCalendar($calendar_info['cid']);
        $base->setApplyCalendar($calendar_info['apply']);

        global $G_container_base;
        $dbconn = $G_container_base->getInstance("dbconn");
        $base->update($dbconn);

        CB_BaseManager::updateUsersTableRelatedToBase($base, $workday_info,
            $calendar_info);

        $base_name_objects
            = CB_BaseManager::getBaseNamesByBaseId($base->getID());
        $i18n = CB_I18n::getInstance();
        foreach ($i18n->getAvailableLanguages() as $language_code) {
            if (array_key_exists($language_code, $base_names)) {
                if (array_key_exists($language_code, $base_name_objects)) {
                    $base_name_object = $base_name_objects[$language_code];
                    if ( ! isset($base_names[$language_code])
                         || strlen($base_names[$language_code]) <= 0
                    ) {
                        continue;
                    }
                    $base_name_object->setName(cb_trim($base_names[$language_code]));
                    $base_name_object->update($dbconn);
                } else {
                    if ( ! isset($base_names[$language_code])
                         || strlen(cb_trim($base_names[$language_code])) <= 0
                    ) {
                        continue;
                    }
                    $base_name_object = new CB_BaseLocal([
                        "_id"          => $base->getId(),
                        "col_language" => $language_code,
                        "col_name"     => cb_trim($base_names[$language_code])
                    ]);
                    $base_name_object->insert($dbconn);
                }
            } else {
                if (array_key_exists($language_code, $base_name_objects)) {
                    $base_name_objects[$language_code]->delete();
                }
            }
        }

        CB_BaseWorkHours::deleteByBaseId($base->getId(), $dbconn);
        foreach ($work_hours_list as $work_hours) {
            $new_base_work_hours = new CB_BaseWorkHours([
                'col_base'  => $base->getId(),
                'col_start' => $work_hours['start']->format(),
                'col_end'   => $work_hours['end']->format(),
            ]);
            $new_base_work_hours->insert($dbconn);
        }

    }

    private static function updateUsersTableRelatedToBase(
        CB_Base $base,
        $workday_info,
        $calendar_info
    ) {
        assert(! is_null($base));
        assert(is_array($workday_info) && count($workday_info) === 7);
        assert(is_array($calendar_info) && count($calendar_info) === 2);

        global $G_container_base;
        $db = $G_container_base->getInstance("dbconn");

        $query = "UPDATE tab_cb_user_base_setting SET "
                 . cb_queryf($db, "col_workday_sunday = '@S',",
                $workday_info['sunday'])
                 . cb_queryf($db, "col_workday_monday = '@S',",
                $workday_info['monday'])
                 . cb_queryf($db, "col_workday_tuesday = '@S',",
                $workday_info['tuesday'])
                 . cb_queryf($db, "col_workday_wednesday = '@S',",
                $workday_info['wednesday'])
                 . cb_queryf($db, "col_workday_thursday = '@S',",
                $workday_info['thursday'])
                 . cb_queryf($db, "col_workday_friday = '@S',",
                $workday_info['friday'])
                 . cb_queryf($db, "col_workday_saturday = '@S',",
                $workday_info['saturday'])
                 . cb_queryf($db, "col_apply_calendar = '@S',",
                $calendar_info['apply'])
                 . cb_queryf($db, "col_calendar = '@S'", $calendar_info['cid'])
                 . cb_queryf($db,
                " WHERE col_base = '@S' AND col_is_customize = 0",
                $base->getId());

        $db->query($query);
    }

    private static function importBaseWorkHours($base, $line)
    {
        CB_BaseWorkHours::deleteByBaseId($base->getId());

        $ts = new CB_Time();
        for (
            $i = self::BASE_CSV_WORK_HOUSR_START_LINE; $i < count($line);
            $i += 2
        ) {
            if ($ts->parse($line[$i]) === false || ! cb_date_validate_time($ts)
                || $ts->parse($line[$i + 1]) === false
                || ! cb_date_validate_time($ts)
            ) {
                cb_throw_error(E_COMMON_INVALID_TIME);
            }

            $work_hours = new CB_BaseWorkHours([
                'col_base'  => $base->getId(),
                'col_start' => $line[$i],
                'col_end'   => $line[$i + 1],
            ]);
            $work_hours->insert();
        }
    }

    public static function importBaseLocalName($line)
    {
        $code = $line[self::BASE_NAME_CSV_BASE_CODE_LINE];
        $base = CB_Base::selectByCode($code);
        if (is_null($base)) {
            cb_throw_error(E_COMMON_BASE_WAS_NOT_FOUND);
        }

        $base_local = self::getBaseName($base->getId(),
            $line[self::BASE_NAME_CSV_LANGUAGE_CODE_LINE]);
        if (is_null($base_local)) {
            if ( ! in_array($line[self::BASE_NAME_CSV_LANGUAGE_CODE_LINE],
                CB_LanguageManager::getAvailableLanguages())
            ) {
                cb_throw_error(E_COMMON_CSV_LANGUAGE_CODE_INVALID);
            }

            $new_base_local = new CB_BaseLocal([
                '_id'          => $base->getId(),
                'col_language' => CB_LanguageManager::getLanguageId($line[self::BASE_NAME_CSV_LANGUAGE_CODE_LINE]),
                'col_name'     => cb_trim($line[self::BASE_NAME_CSV_BASE_NAME_LINE]),
            ]);
            $new_base_local->insert();
        } else {
            $base_local->setName(cb_trim($line[self::BASE_NAME_CSV_BASE_NAME_LINE]));
            $base_local->update();
        }
    }

    /**
     * Get user's current base settings
     *
     * @global $G_container_base $G_container_base
     * @return CB_UserBaseSetting
     */
    public static function getCurrentBaseSetting($user_id = null)
    {
        if (is_null($user_id)) {
            global $G_container_base;
            /** @var GRN_Uum $uum */
            $uum = $G_container_base->getInstance('uum');
            $login = $uum->getLoginUser();
            if ($login instanceof CB_User) {
                $user_id = $login->getOID();
            }
        }

        $user_base_setting = self::getUserBaseSettingCache($user_id);

        if (is_null($user_base_setting)) {
            if ( ! is_null($user_id)) {
                require_once('fw/i18n/base.csp');
                $user_base_setting = CB_UserBaseSetting::select($user_id);
            }
            if (is_null($user_base_setting)) {
                $user_base_setting = self::getDefaultUserBaseSettingCache();
                if (is_null($user_base_setting)) {
                    $user_base_setting = self::getDefaultUserBaseSetting();
                    self::setDefaultUserBaseSettingCache($user_base_setting);
                }
            }
            self::setUserBaseSettingCache($user_id, $user_base_setting);
        }

        return $user_base_setting;
    }

    /**
     * Get GRN_SystemCalendar of a user's base setting
     *
     * @param int $user_id
     *
     * @return GRN_SystemCalendar
     */
    public static function getUserCalendar($user_id)
    {
        $user_base_setting = self::getCurrentBaseSetting($user_id);
        $calendar_manager = GRN_CalendarManager::getInstance();
        $calendar
            = $calendar_manager->getSystemCalendar($user_base_setting->getCalendar());
        if ( ! $calendar) {
            $calendar
                = $calendar_manager->getSystemCalendar(GRN_CALENDAR_SYSTEM_DEFAULT);
        }

        return $calendar;
    }

    /**
     * Get cache of base setting by user_id
     *
     * @param int $user_id
     *
     * @return CB_UserBaseSetting or null
     */
    private static function getUserBaseSettingCache($user_id)
    {
        return isset(self::$_base_setting_cache[$user_id])
            ? self::$_base_setting_cache[$user_id] : null;
    }

    /**
     * Set cache
     *
     * @param int                $user_id
     * @param CB_UserBaseSetting $user_base_setting
     */
    private static function setUserBaseSettingCache(
        $user_id,
        $user_base_setting
    ) {
        assert(isset($user_id)
               && ($user_base_setting instanceof CB_UserBaseSetting));
        self::$_base_setting_cache[$user_id] = $user_base_setting;
    }

    private static function getDefaultUserBaseSettingCache()
    {
        return self::$_default_base_setting_cache;
    }

    private static function setDefaultUserBaseSettingCache($user_base_setting)
    {
        assert($user_base_setting instanceof CB_UserBaseSetting);
        self::$_default_base_setting_cache = $user_base_setting;
    }
}
