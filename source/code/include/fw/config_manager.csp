<?php

/**
 * Reads/Writes configuration data to database.
 *
 * @package fw.core
 */
require_once('fw/persistent.csp');
require_once('fw/database.csp');

/**
 * Reads/Writes configuration data to database.
 *
 * @package fw.core
 */
class CB_DBConfigManager extends CB_ConfigManager
{
    /**
     * @access private
     */
    var $_module;

    /**
     * @access private
     */
    var $_module_table = null;

    /**
     * @access private
     */
    var $_section_table = null;

    /**
     * @access private
     */
    var $_attribute_table = null;

    /**
     * @access private
     */
    var $_module_name = null;


    /**
     * @access private
     */
    var $_configcache = false;


    /**
     * @param        $module_name
     * @param string $default_section default section name
     */
    function __construct($module_name, $default_section = '')
    {
        parent::__construct("CB_DBConfigManager", $default_section);
        $this->_module_table = cb_class2table('CB_DBConfigModule');
        $this->_section_table = cb_class2table('CB_DBConfigSection');
        $this->_attribute_table = cb_class2table('CB_DBConfigAttribute');
        $this->_default_section = $default_section;
        $this->_module_name = $module_name;
        if ( ! $this->_configcache) {
            $this->reload();
        }
    }

    /**
     * Reload config data.
     */
    function reload()
    {
        if (is_null($this->_module)) {
            $this->_module = $this->_getModule($this->_module_name);
            if ( ! $this->_module) {
                $this->_module = $this->_addModule($this->_module_name);
            }
        }
        $s_rowset = new CB_RowSet($this->_section_table);
        $s_rowset->setLock(CB_DATABASE_NO_LOCK);
        $condition = sprintf("col_module='%s'", $this->_module->getOID());
        $s_rowset->addCondition($condition);

        $this->_configcache = [];
        while ($s_row = $s_rowset->iterate()) {
            $a_rowset = new CB_RowSet($this->_attribute_table);
            $a_rowset->setLock(CB_DATABASE_NO_LOCK);
            $condition = sprintf("col_section='%s'", $s_row->getOID());
            $a_rowset->addCondition($condition);
            while ($a_row = $a_rowset->iterate()) {
                $this->set($s_row->get('name'), $a_row->get('key'),
                    $a_row->get('value'));
                $this->_configcache[] = [
                    'name'  => $s_row->get('name'),
                    'key'   => $a_row->get('key'),
                    'value' => $a_row->get('value')
                ];
            }
        }
    }


    /**
     * Save config data.
     */
    function save()
    {
        $name = $this->_module_name;
        if (is_null($this->_module)) {
            $this->_module = $this->_getModule($this->_module_name);
        }
        if ($this->_module) {
            $this->_module->delete();
        }
        $this->_module = $this->_addModule($name);

        foreach (array_keys($this->_config) as $section_name) {
            $section = $this->_addSection($section_name);
            foreach ($this->_config[$section_name] as $key => $value) {
                $attribute = $this->_addAttribute($section, $key);
                $attribute->set('value', $value);
            }
        }
    }

    /**
     * @access private
     */
    function _getModule($module_name)
    {
        $rowset = new CB_RowSet($this->_module_table);
        $condition = $rowset->queryf("col_name='@S'", $module_name);
        $rowset->addCondition($condition);
        $rowset->setLock(CB_DATABASE_NO_LOCK);
        $row = $rowset->iterate();

        return $row;
    }

    /**
     * @access private
     */
    function _addModule($module_name)
    {
        $row = $this->_module_table->newRow();
        $row->set('name', $module_name);

        return $row;
    }

    /**
     * @access private
     */
    function _addSection($section_name)
    {
        $row = $this->_section_table->newRow();
        $row->set('module', $this->_module);
        $row->set('name', $section_name);

        return $row;
    }

    /**
     * @access private
     */
    function _addAttribute($section, $key)
    {
        $row = $this->_attribute_table->newRow();
        $row->set('section', $section);
        $row->set('key', $key);

        return $row;
    }
}

/**
 * Represent modules of configuration data.
 *
 * This is implemented as a persistent class to keep module
 * in the database.
 *
 * @package fw.core
 */
class CB_DBConfigModule extends CB_PersistentBase
{
    function __construct($row)
    {
        parent::__construct($row);
    }

    var $col_name
        = [
            'type'    => 'char',
            'length'  => CB_DATABASE_MAX_STRINDEX,
            'notnull' => true
        ];
    var $idx_n = ['cols' => ['name'], 'unique' => true];
}

/**
 * Represent sections of configuration data.
 *
 * This is implemented as a persistent class to keep module
 * in the database.
 *
 * @package fw.core
 */
class CB_DBConfigSection extends CB_PersistentBase
{
    function __construct($row)
    {
        parent::__construct($row);
    }

    var $col_module = ['type' => 'relation', 'to' => 'CB_DBConfigModule'];
    var $col_name
        = [
            'type'    => 'char',
            'length'  => CB_DATABASE_MAX_STRINDEX,
            'notnull' => true
        ];
    var $idx_m_s = ['cols' => ['module', 'name'], 'unique' => true];
}

/**
 * Represent attributes of configuration data.
 *
 * This is implemented as a persistent class to keep module
 * in the database.
 *
 * @package fw.core
 */
class CB_DBConfigAttribute extends CB_PersistentBase
{
    function __construct($row)
    {
        parent::__construct($row);
    }

    var $col_section = ['type' => 'relation', 'to' => 'CB_DBConfigSection'];
    var $col_key = ['type' => 'char', 'notnull' => true];
    var $col_value = ['type' => 'char'];

    var $idx_s_k_v = ['cols' => ['section', 'key', 'value'], 'unique' => true];
}


