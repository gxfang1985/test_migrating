<?php

use grn\system\sandbox\SandboxConstants;

require_once('grn/CBException.csp');
require_once('grn/DAOFactory.csp');
require_once('fw/inspection.csp');
require_once('fw/dao/CbGroupDAO.csp');
require_once('fw/dao/CbGroupLocalDAO.csp');
require_once('fw/dao/CbUserDAO.csp');
require_once('fw/dao/CbRoleDAO.csp');

define('CB_FW_FACADE_DB_STATUS_INSERT', 1);
define('CB_FW_FACADE_DB_STATUS_UPDATE', 2);
define('CB_FW_FACADE_DB_STATUS_DELETE', 3);

class FwFacade
{
    private $_db = null;
    private static $_group_caches = [];
    private $sandbox = SandboxConstants::NO_SANDBOX_MODE;

    public function __construct($sandbox = SandboxConstants::NO_SANDBOX_MODE)
    {
        global $G_container_base;
        $this->_db = $G_container_base->getInstance('dbconn');
        $this->sandbox = $sandbox;
    }

    /** ***************************************************** */
    /** -----                  CbUser               --------- */
    /** ***************************************************** */
    /**
     * @param $inDataObj
     * @param $inUserArray
     *
     * @return CBUser[]
     */
    public function getUserPrimaryGroupListByIds($inDataObj, $inUserArray)
    {
        try {
            $inDataObj['db'] = $this->_db;
            $dao = new CbUserDAO($this->sandbox);
            $resultList = $dao->getUserPrimaryGroupListByIds($inDataObj,
                $inUserArray);

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /** ***************************************************** */
    /** -----                  CbGroup              --------- */
    /** ***************************************************** */

    public function referParentGroupById($inDataObj, $inId)
    {
        try {
            $inDataObj['db'] = $this->_db;
            $inLanguage = (array_key_exists('language', $inDataObj))
                ? $inDataObj['language'] : null;
            $dao = new CbGroupDAO($this->sandbox);
            if (is_null($inLanguage)) {
                return $dao->selectParentGroupById($inDataObj, $inId);
            } else {
                return $dao->selectParentGroupWithLocalById($inDataObj, $inId);
            }
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param $inDataObj
     * @param $inGroupKey
     *
     * @return bool|CbGroup
     */
    public function referGroupByForeignKey($inDataObj, $inGroupKey)
    {
        $inDataObj['db'] = $this->_db;
        $dao = new CbGroupDAO($this->sandbox);
        $result = $dao->selectByForeignKey($inDataObj, $inGroupKey);

        return $result;
    }

    /**
     * @param $inDataObj
     * @param $inId
     *
     * @return bool|CBGroup
     */
    public function referGroupById($inDataObj, $inId)
    {
        $inLanguage = (array_key_exists('language', $inDataObj))
            ? $inDataObj['language'] : null;

        if ( ! isset(self::$_group_caches[$this->sandbox][$inLanguage][$inId])) {
            $inDataObj['db'] = $this->_db;
            $dao = new CbGroupDAO($this->sandbox);


            if (is_null($inLanguage)) {
                self::$_group_caches[$this->sandbox][$inLanguage][$inId]
                    = $dao->selectDefaultById($inDataObj, $inId);
            } else {
                self::$_group_caches[$this->sandbox][$inLanguage][$inId]
                    = $dao->selectLocalById($inDataObj, $inId);
            }
        }

        return self::$_group_caches[$this->sandbox][$inLanguage][$inId];
    }

    /**
     * @param $inDataObj
     *
     * @return CbGroup[]
     */
    public function getGroupList($inDataObj)
    {
        try {
            $inDataObj['db'] = $this->_db;
            $dao = new CbGroupDAO($this->sandbox);
            $inParentId = (array_key_exists('parentId', $inDataObj))
                ? $inDataObj['parentId'] : null;

            if (is_null($inParentId)) {
                $resultList = $dao->getGroupList($inDataObj);
            } else {
                $resultList = $dao->getGroupListByParentId($inDataObj,
                    $inParentId);
            }

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param array       $inDataObj
     * @param string|null $inParentId
     *
     * @return CbGroup[]
     */
    public function getGroupListByParentId($inDataObj, $inParentId)
    {
        try {
            $inDataObj['db'] = $this->_db;
            $dao = new CbGroupDAO($this->sandbox);

            if (is_null($inParentId)) {
                $resultList = $dao->getGroupListByParentIdIsNull($inDataObj);
            } else {
                $resultList = $dao->getGroupListByParentId($inDataObj,
                    $inParentId);
            }

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param $inDataObj
     * @param $inParentId
     *
     * @return CbGroup[]
     */
    public function getGroupListWithNonLocalByParentId($inDataObj, $inParentId)
    {
        try {
            $inDataObj['db'] = $this->_db;
            $dao = new CbGroupDAO($this->sandbox);

            if (is_null($inParentId)) {
                $resultList
                    = $dao->getGroupListWithNonLocalByParentIdIsNull($inDataObj);
            } else {
                $resultList
                    = $dao->getGroupListWithNonLocalByParentId($inDataObj,
                    $inParentId);
            }

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param $inDataObj
     * @param $inUserId
     *
     * @return CbGroup[]
     */
    public function getGroupListByUserId($inDataObj, $inUserId)
    {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getCbGroupDAO();

            $resultList = $dao->getGroupListByAliveUserId($inDataObj,
                $inUserId);

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param $inDataObj
     * @param $inGroupNameArray
     *
     * @return CbGroup[]
     */
    public function getGroupListByNames($inDataObj, $inGroupNameArray)
    {
        try {
            $inDataObj['db'] = $this->_db;
            $inIsAnd = (array_key_exists('isAnd', $inDataObj))
                ? $inDataObj['isAnd'] : true;

            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getCbGroupDAO();

            $resultList = ($inIsAnd) ? $dao->getGroupListByAndNames($inDataObj,
                $inGroupNameArray)
                : $dao->getGroupListByOrNames($inDataObj, $inGroupNameArray);

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param $inDataObj
     * @param $inGroupArray
     *
     * @return CbGroup[]
     */
    public function getGroupListByIds($inDataObj, $inGroupArray)
    {
        try {
            $inDataObj['db'] = $this->_db;
            $dao = new CbGroupDAO($this->sandbox);

            $resultList = $dao->getGroupListByIds($inDataObj, $inGroupArray);

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param $inDataObj
     * @param $inForeignKeyArray
     *
     * @return CbGroup[]
     */
    public function getGroupListByForeignKeys($inDataObj, $inForeignKeyArray)
    {
        try {
            $inDataObj['db'] = $this->_db;
            $inIsIn = (array_key_exists('isIn', $inDataObj))
                ? $inDataObj['isIn'] : true;

            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getCbGroupDAO();

            $resultList = ($inIsIn)
                ? $dao->getGroupListByInForeignKeys($inDataObj,
                    $inForeignKeyArray)
                : $dao->getGroupListByNotInForeignKeys($inDataObj,
                    $inForeignKeyArray);

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param $inDataObj
     * @param $inUserIdArray
     *
     * @return CbGroup[]
     */
    public function getGroupListByUserIds($inDataObj, $inUserIdArray)
    {
        try {
            $inDataObj['db'] = $this->_db;
            $dao = new CbGroupDAO($this->sandbox);
            $inIsAliveUser = (array_key_exists('isAliveUser', $inDataObj))
                ? $inDataObj['isAliveUser'] : true;

            if ($inIsAliveUser) {
                $resultList = $dao->getGroupListByAliveUserIds($inDataObj,
                    $inUserIdArray);
            } else {
                $resultList = $dao->getGroupListByUserIds($inDataObj,
                    $inUserIdArray);
            }

            $inLanguage = (array_key_exists('language', $inDataObj))
                ? $inDataObj['language'] : null;
            foreach ($resultList as $group) {
                self::$_group_caches[$this->sandbox][$inLanguage][$group->getId()]
                    = $group;
            }

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param $inDataObj
     * @param $inUserId
     *
     * @return CbGroup[]
     */
    public function getAuthorityGroupListByUserId($inDataObj, $inUserId)
    {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getCbGroupDAO();

            $resultList = $dao->getAuthorityGroupListByUserId($inDataObj,
                $inUserId);

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param $inDataObj
     * @param $inUserId
     *
     * @return CbGroup[]
     */
    public function getAuthorityGroupListWithNonLocalByUserId(
        $inDataObj,
        $inUserId
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getCbGroupDAO();

            $resultList
                = $dao->getAuthorityGroupListWithNonLocalByUserId($inDataObj,
                $inUserId);

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param $inDataObj
     *
     * @return CbGroup[]
     */
    public function getNestedGroupList($inDataObj)
    {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getCbGroupDAO();

            $resultList = $dao->getNestedGroupList($inDataObj);

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param array  $inDataObj
     * @param string $inLeft
     * @param string $inRight
     *
     * @return CbGroup[]
     */
    public function getNestedGroupListByLeftRight($inDataObj, $inLeft, $inRight)
    {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getCbGroupDAO();
            $inIsDescendants = (array_key_exists('isDescendants', $inDataObj))
                ? $inDataObj['isDescendants'] : true;

            if ($inIsDescendants) {
                $resultList
                    = $dao->getNestedGroupListDescendantsByLeftRight($inDataObj,
                    $inLeft, $inRight);
            } else {
                $resultList
                    = $dao->getNestedGroupListAncestorsByLeftRight($inDataObj,
                    $inLeft, $inRight);
            }

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param $inDataObj
     * @param $inParentId
     *
     * @return int
     */
    public function countGroupByParentId($inDataObj, $inParentId)
    {
        try {
            $inDataObj['db'] = $this->_db;
            $dao = new CBGroupDAO($this->sandbox);

            $resultCount = is_null($inParentId)
                ? $dao->countGroupByParentIdIsNull($inDataObj)
                : $dao->countGroupByParentId($inDataObj, $inParentId);

            return $resultCount;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param $inDataObj
     *
     * @return int
     */
    public function countGroup($inDataObj)
    {
        try {
            $inDataObj['db'] = $this->_db;
            $resultCount
                = (new CbGroupDAO($this->sandbox))->countGroup($inDataObj);

            return $resultCount;
        } catch (CBException $cbe) {

        }
    }


    /** ***************************************************** */
    /** -----                CbGroupLocal           --------- */
    /** ***************************************************** */
    /**
     * @param              $inDataObj
     * @param CbGroupLocal $inGroupLocalObj
     *
     * @return bool|int
     */
    public function insertGroupLocal($inDataObj, $inGroupLocalObj)
    {
        try {
            $inDataObj['db'] = $this->_db;
            $inIsSync = cb_at($inDataObj, "sync", false);
            $dao = new CBGroupLOcalDAO($this->sandbox);
            $inspection = CB_Group_Local_Inspection::getInstance();

            $insertCount = $dao->insert($inDataObj, $inGroupLocalObj);

            if (($inIsSync === false) && ($insertCount > 0)
                && ($inspection->isEnabled())
            ) {
                $messageType = 'group_local_add';
                $message_args = [
                    'gid'           => $inGroupLocalObj->getParentId(),
                    'language_code' => $inGroupLocalObj->getLanguageCode(),
                    'group_name'    => $inGroupLocalObj->getName(),
                ];

                if ($this->sandbox === SandboxConstants::SANDBOX_MODE) {
                    $messageType = "sandbox-" . $messageType;
                }

                $inspection->record($messageType, $message_args);
            }

            return $insertCount;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param              $inDataObj
     * @param CbGroupLocal $inGroupLocalObj
     *
     * @return int
     */
    public function updateGroupLocal($inDataObj, $inGroupLocalObj)
    {
        try {
            $inDataObj['db'] = $this->_db;
            $inIsSync = cb_at($inDataObj, "sync", false);

            $dao = new CbGroupLocalDAO($this->sandbox);
            $inMessageTypeAdd = (array_key_exists('messageTypeAdd',
                $inDataObj)) ? $inDataObj['messageTypeAdd'] : 'group_local_add';
            $inMessageTypeModify = (array_key_exists('messageTypeModify',
                $inDataObj)) ? $inDataObj['messageTypeModify']
                : 'group_local_modify';
            $inspection = CB_Group_Local_Inspection::getInstance();

            $beforGroupLocal = $dao->selectByGroupId_LanguageCode($inDataObj,
                $inGroupLocalObj);
            if ($beforGroupLocal === false) {
                $insertCount = $dao->insert($inDataObj, $inGroupLocalObj);

                if (($inIsSync === false) && ($insertCount > 0)
                    && ($inspection->isEnabled())
                ) {
                    $message_args = [
                        'gid'           => $inGroupLocalObj->getParentId(),
                        'language_code' => $inGroupLocalObj->getLanguageCode(),
                        'group_name'    => $inGroupLocalObj->getName(),
                    ];
                    if ($this->sandbox === SandboxConstants::SANDBOX_MODE) {
                        $inMessageTypeAdd = "sandbox-" . $inMessageTypeAdd;
                    }

                    $inspection->record($inMessageTypeAdd, $message_args);
                }

                return CB_FW_FACADE_DB_STATUS_INSERT;
            } else {
                $updateCount = $dao->update($inDataObj, $inGroupLocalObj);

                //MySQLは変化が無い場合UPDATE結果が0件になる。しかし、現在のGaroonのログ仕様は変化が無くても変更ログを出力しているので、更新件数が0でもログ出力している
                if (($inIsSync === false) && ($updateCount >= 0)
                    && ($inspection->isEnabled())
                ) {
                    $message_args = [
                        'gid'             => $inGroupLocalObj->getParentId(),
                        'language_code'   => $inGroupLocalObj->getLanguageCode(),
                        'prev_group_name' => $beforGroupLocal->getName(),
                        'next_group_name' => $inGroupLocalObj->getName(),
                    ];
                    if ($this->sandbox === SandboxConstants::SANDBOX_MODE) {
                        $inMessageTypeModify = "sandbox-"
                                               . $inMessageTypeModify;
                    }
                    $inspection->record($inMessageTypeModify, $message_args);
                }

                return CB_FW_FACADE_DB_STATUS_UPDATE;
            }
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param              $inDataObj
     * @param CbGroupLocal $inGroupLocalObj
     *
     * @return bool|int
     */
    public function deleteGroupLocal($inDataObj, $inGroupLocalObj)
    {
        try {
            $inDataObj['db'] = $this->_db;
            $inIsSync = cb_at($inDataObj, "sync", false);
            $dao = new CbGroupLocalDAO($this->sandbox);

            $inMessageTypeDelete = (array_key_exists('messageTypeDelete',
                $inDataObj)) ? $inDataObj['messageTypeDelete']
                : 'group_local_delete';
            $inspection = CB_Group_Local_Inspection::getInstance();

            $deleteCount = 0;
            $beforGroupLocal = $dao->selectByGroupId_LanguageCode($inDataObj,
                $inGroupLocalObj);
            if ($beforGroupLocal !== false) {
                $deleteCount = $dao->deleteByParentId_LanguageCode($inDataObj,
                    $inGroupLocalObj);
                if (($inIsSync === false) && ($deleteCount > 0)
                    && ($inspection->isEnabled())
                ) {
                    $message_args = [
                        'gid'           => $inGroupLocalObj->getParentId(),
                        'language_code' => $inGroupLocalObj->getLanguageCode(),
                        'group_name'    => $beforGroupLocal->getName(),
                    ];

                    if ($this->sandbox === SandboxConstants::SANDBOX_MODE) {
                        $inMessageTypeDelete = "sandbox-"
                                               . $inMessageTypeDelete;
                    }

                    $inspection->record($inMessageTypeDelete, $message_args);
                }
            }

            return $deleteCount;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param      $inDataObj
     * @param      $inGroupId
     * @param null $inExportLanguageCodeArray
     *
     * @return CbGroupLocal[]
     */
    public function getGroupLocalListByGroupId_LanguageCodes(
        $inDataObj,
        $inGroupId,
        $inExportLanguageCodeArray = null
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getCbGroupLocalDAO();


            $resultList = [];
            if (is_null($inExportLanguageCodeArray)) {
                $resultList = $dao->getGroupLocalListByGroupId($inDataObj,
                    $inGroupId);
            } else {
                $resultList
                    = $dao->getGroupLocalListByGroupId_LanguageCodes($inDataObj,
                    $inGroupId, $inExportLanguageCodeArray);
            }

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param $inDataObj
     * @param $inGroupId
     *
     * @return CbGroupLocal[]
     */
    public function getGroupLocalListByGroupId($inDataObj, $inGroupId)
    {
        try {
            $inDataObj['db'] = $this->_db;
            require_once('fw/dao/CbGroupLocalDAO.csp');
            $dao = new CbGroupLocalDAO($this->sandbox);
            $resultList = $dao->getGroupLocalListByGroupId($inDataObj,
                $inGroupId);

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /** ***************************************************** */
    /** -----                  CB_Role              --------- */
    /** ***************************************************** */

    /**
     * @param int $inUserId
     *
     * @return array
     */
    public function getRolesByUserId($inUserId)
    {
        return (new CbRoleDAO($this->sandbox))->getRoleByUserId($inUserId);
    }
}

