<?php

class CB_Inspection extends CB_ModuleBase
{
    //Private member variables
    var $_logger = null;

    //Constructor
    function __construct()
    {
        parent::__construct('grn.common');

        require_once('grn/logger.csp');
        $logger_manager = CB_LoggerManager::getInstance();
        $this->_logger = $logger_manager->getLogger($this->getModuleId());
    }

    private static $_instance = null;

    /**
     * Create an instance of GRN_Cabinet_Inspection class
     *
     * @access public
     * @return CB_Inspection
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Check notice priority is enabled or not
     *
     * @access private
     */
    function isNoticeEnabled()
    {
        return $this->_logger->isNoticeEnabled();
    }

    /**
     * Check Info priority is enabled or not
     *
     * @access private
     */
    function isInfoEnabled()
    {
        return $this->_logger->isInfoEnabled();
    }

    /**
     * Write log with notice priority
     *
     * @access private
     */
    function notice($action, $target, $params = [])
    {
        $this->_logger->noticeEx($action, $target, $params);
    }

    /**
     * Write log with info priority
     *
     * @access private
     */
    function info($action, $target, $params = [])
    {
        $this->_logger->infoEx($action, $target, $params);
    }
}

class CB_Group_Local_Inspection extends CB_Inspection
{
    /** Inspection Message Template List **/
    var $_template_list = null;

    /**
     * Constructor
     *
     */
    public function __construct()
    {
        parent::__construct();

        $template_list = [
            'group_local_add'            => [
                'action' => 'create',
                'target' => 'group_local',
            ],
            'group_local_modify'         => [
                'action' => 'modify',
                'target' => 'group_local',
            ],
            'group_local_delete'         => [
                'action' => 'delete',
                'target' => 'group_local',
            ],
            'group_local_add_import'     => [
                'action' => 'import',
                'target' => 'group_local',
            ],
            'group_local_modify_import'  => [
                'action' => 'import',
                'target' => 'group_local',
            ],
            'group_local_delete_import'  => [
                'action' => 'import_delete',
                'target' => 'group_local',
            ],
            'group_local_export'         => [
                'action' => 'export',
                'target' => 'group_local',
            ],
            'sandbox-group_local_add'    => [
                'action' => 'create',
                'target' => 'sandbox-group_local',
            ],
            'sandbox-group_local_modify' => [
                'action' => 'modify',
                'target' => 'sandbox-group_local',
            ],
            'sandbox-group_local_delete' => [
                'action' => 'delete',
                'target' => 'sandbox-group_local',
            ],
        ];

        //Set Template List
        $this->_template_list = $template_list;
    }

    /** @var self */
    private static $_instance = null;

    /**
     * @return CB_Group_Local_Inspection
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    function isEnabled($threshold = 'notice')
    {
        //Check Threshold
        $result = false;
        switch ($threshold) {
            case 'critical':
                $result = $this->_logger->isCriticalEnabled();
                break;
            case 'error':
                $result = $this->_logger->isErrorEnabled();
                break;
            case 'warning':
                $result = $this->_logger->isWarningEnabled();
                break;
            case 'notice':
                $result = $this->_logger->isNoticeEnabled();
                break;
            case 'info':
                $result = $this->_logger->isInfoEnabled();
                break;
            case 'debug':
                $result = $this->_logger->isDebugEnabled();
                break;
            default:
                $result = false;
                break;
        }

        //Return Result
        return $result;
    }

    /**
     * Record Inspection Message
     *
     * $param  string $message_type               //Inspaction Message Type
     * $param  array  $message_args               //Inspaction Message Argument List
     * $return bool   $result                     //Result
     */
    function record($message_type, $message_args = [])
    {
        //Get Inspaction Message Template
        if ( ! array_key_exists($message_type, $this->_template_list)) {
            return false;
        }
        $message_template = $this->_template_list[$message_type];

        $message_action = $message_template['action'];
        $message_target = $message_template['target'];

        $this->_logger->noticeEx($message_action, $message_target,
            $message_args);

        //Return Result
        return true;
    }
}

