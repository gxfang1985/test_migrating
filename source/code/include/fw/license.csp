<?php

/**
 * License Framework.
 *
 * @package fw.core
 */

/**
 * Interface class for license drivers.
 *
 * Note that abstract implementation of each method intentionally
 * die() to avoid license abuse.  You must implement your own driver.
 *
 * @abstract
 * @package fw.core
 */
class CB_LicenseBaseDriver
{
    /**
     * Return the response to the challenge.
     *
     * @return string  Response to the challenge.
     */
    function getResponse($challenge)
    {
        die();
    }

    /**
     * Return the template file name to be inserted into
     * every Smarty page.  To disable insertion, let this
     * return FALSE.
     *
     * @return string  The template file name to be inserted, or FALSE.
     */
    function showWarning()
    {
        die();
    }

    /**
     * Return the page file name to which the request is
     * internally redirected.  To disable redirection, let this
     * return FALSE.
     *
     * Note that the page name will be passed to cb_switch_page()
     * therefore it must be followed by ".csp" .
     *
     * @return string  The page file name to be redirected, or FALSE.
     */
    function forceRedirect()
    {
        die();
    }
}

define('CB_LICENSE_FILE', 'common.lic');
require_once('fw/basic_date.csp');

/**
 * Framework license manager.
 * This is for product global license management rather than
 * for individual applications such as optional workflow, report, etc.
 *
 * @package fw.core
 */
class CB_GlobalLicenseManager
{
    /**
     * @return CB_GlobalLicenseManager  The singleton.
     */
    public static function getInstance($skip = false)
    {
        static $_singleton = null;
        if (is_null($_singleton)) {
            $_singleton = new CB_GlobalLicenseManager($skip);
        }

        return $_singleton;
    }

    /**
     * @access private
     */
    function __construct($skip)
    {
        global $G_config_common;
        if (( ! $skip)) {
            $this->_load();
        }
    }

    /**
     * cached day.
     *
     * @access private
     */
    var $_day = null;

    /**
     * (Re)set the initialization day.
     *
     * @param $day object CB_Date  optional day to be set.
     */
    function setInitDay($day = null)
    {
        $this->_day = $day;
    }

    /**
     * @return object CB_Date  The day when the framework is initialized.
     */
    function getInitDay()
    {
        return $this->_day;
    }

    /**
     * temporary cache of the install id.
     *
     * @access private
     */
    var $_install_id = null;

    /**
     * @access private
     */
    var $_unique = false;

    /**
     * @return string The installation id.
     */
    function getInstallId()
    {
        return $this->_install_id;
    }

    /**
     * @return bool   TRUE if the installation id is unique in the world;
     *                otherwise FALSE.
     */
    function isUniqueId()
    {
        return $this->_unique;
    }

    /**
     * @param string $id       The external installation id.
     * @param bool   $unique   TRUE if $id is unique in the world; otherwise
     *                         FALSE.  The default is FALSE.
     */
    function setInstallId($id, $unique = false)
    {
        $this->_install_id = $id;
        $this->_unique = $unique;
    }

    /**
     * @access private
     */
    function _generateInstallId()
    {
        global $G_config_common;
        $disk_bytes = ((int)disk_free_space($G_config_common->get('Global',
                'tmp_dir'))) & 0xFFFFFFFF;
        $server_ip = 0x7F000001;
        if (array_key_exists('SERVER_ADDR', $_SERVER)) {
            $a = explode('.', $_SERVER['SERVER_ADDR']);
            $server_ip = 0;
            foreach ($a as $n) {
                $server_ip <<= 8;
                $server_ip |= $n;
            }
        }
        $client_ip = 0x0100007F;
        if (array_key_exists('REMOTE_ADDR', $_SERVER)) {
            $a = explode('.', $_SERVER['REMOTE_ADDR']);
            $client_ip = 0;
            foreach (array_reverse($a) as $n) {
                $client_ip <<= 8;
                $client_ip |= $n;
            }
        }
        $ip = ($server_ip ^ $client_ip) & 0xFFFFFFFF;

        $now = gettimeofday();
        $t = (($now['sec'] << 20) | $now['usec']) & 0xFFFFFFFF;
        $this->_install_id = sprintf('%08X%08X%08X', $ip, $t, $disk_bytes);
    }

    /**
     * Initialize framework license.
     */
    function initialize()
    {
        $this->setInitDay(null);
        $this->_generateInstallId();
        $this->save();
    }

    /**
     * Save license data.
     */
    function save()
    {
        assert('! is_null( $this->_install_id )');

        if (is_null($this->_day)) {
            $today = getdate();
            $day = new CB_Date();
            $day->year = $today['year'];
            $day->month = $today['mon'];
            $day->day = $today['mday'];
            $this->_day = $day;
        }

        $lic = cb_basedir() . '/common.lic';
        $fp = fopen($lic, 'w');
        if ($fp === false) {
            cb_throw_error(E_COMMON_FOPEN_WRITE, null, ['file' => $lic]);
        }

        // dummy binary data
        fwrite($fp, pack('c*', 135, 3, 19, 203));
        fwrite($fp, $this->_day->format() . "\n");
        fwrite($fp, pack('c*', 2, 200, 31, 113));
        fwrite($fp, $this->_install_id . "\n");
        fwrite($fp, pack('c*', 5, 173, 56, 21));
        fwrite($fp, md5($this->_day->format() . $this->_install_id
                        . 'edba7iD3Ox 1976d6d7ce1k638 293 1-0c9c2ae11fZc9Ce'));

        fclose($fp);
    }

    /**
     * @access private
     */
    function _load()
    {
        $lic = cb_basedir() . '/common.lic';
        $fp = fopen($lic, 'r');
        if ($fp === false) {
            cb_throw_error(E_COMMON_FOPEN_READ, null, ['file' => $lic]);
        }

        // read date line
        $data = fgets($fp);
        if (($data === false) || (strlen($data) < 4)) {
            cb_throw_error(E_COMMON_FOPEN_READ, null, ['file' => $lic]);
        }
        $day = new CB_Date();
        $day->parse(trim(substr($data, 4)));

        // read install_id
        $data = fgets($fp);
        if (($data === false) || (strlen($data) < 4)) {
            cb_throw_error(E_COMMON_FOPEN_READ, null, ['file' => $lic]);
        }
        $install_id = trim(substr($data, 4));

        // read sum and check validity
        $data = fgets($fp);
        if (($data === false) || (strlen($data) < 4)) {
            cb_throw_error(E_COMMON_FOPEN_READ, null, ['file' => $lic]);
        }
        $sum = trim(substr($data, 4));
        $valid_sum = md5($day->format() . $install_id
                         . 'edba7iD3Ox 1976d6d7ce1k638 293 1-0c9c2ae11fZc9Ce');

        if (strcmp($sum, $valid_sum) != 0) {
            cb_throw_error(E_COMMON_INVALID_LICENSE_FILE);
        }

        fclose($fp);

        $this->_day = $day;
        $this->_install_id = $install_id;
    }
}


