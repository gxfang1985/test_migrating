<?php
/**
 * Interfaces of mail store.
 *
 * @author  Mizuno, Kuniaki     2004/07
 * @auther  Miyabe, Tatsuhiko   2004/09
 * @version 1.0
 * @package fw.mail
 */
require_once('fw/mail_core.csp');
require_once('fw/transaction.csp');

/**
 * Abstract class for mail storage servers.
 * SubClasses should provide actual implementations.
 *
 * @abstract
 * @package fw.mail
 */
class CB_MailStore extends CB_MailService
{
    /**
     * Constructor.
     */
    function __construct()
    {
        parent::__construct();
    }

    /**
     * auto-boot method for the light-weight container.
     */
    function boot()
    {
        $tm = CB_TransactionManager::getInstance();
        $tm->register(CB_TRANSACTION_LEVEL_MAIL_SERVER, $this);
    }

    /**
     * Returns a default folder object.
     *
     * @return object CB_MailFolder Object.
     */
    function getDefaultFolder()
    {
    }

    /**
     * Returns a folder that associated with the name.
     *
     * @return object CB_MailFolder
     */
    function getFolder($name)
    {
    }

    /**
     * Returns all folders.
     *
     * @return array array of array((name of folder) => {@link CB_MailFolder}).
     */
    function getFolders()
    {
    }
}

/**
 * Abstract class for a mail folder.
 * SubClasses should implement protocol specific Folders.
 *
 * @abstract
 * @package fw.mail
 */
class CB_MailFolder
{
    /**
     * keeps the parent CB_MailStore object
     *
     * @access private
     */
    var $_store;

    /**
     * @access private
     */
    var $_logger;

    /**
     * @access private
     */
    var $_listener;

    /**
     * Constructor.
     *
     * @param object CB_MailStore $store
     */
    function __construct($store)
    {
        $this->_store = $store;
        $this->_logger = $store->_logger;
        $this->_listener = $store->_listener;
    }

    /**
     * Returns the mail store that owns this folder object.
     *
     * @return object CB_MailStore
     */
    function getStore()
    {
        return $this->_store;
    }

    /**
     * Return total number of messages in this folder.
     *
     * @return int
     */
    function getMessageCount()
    {
    }

    /**
     * Return the message object corresponding to the given message number.
     * Messages are numberd starting at 0.  Return FALSE if $msgnum is
     * not valid.
     *
     * This will not mark the message as seen.  To mark the message
     * as seen, use getNextUnseenMessage().
     *
     * @param int $msgnum
     *
     * @return mixed {@link CB_MailMessage}, or FALSE.
     */
    function getMessage($msgnum)
    {
    }

    /**
     * Return array of message objects that represent all messages in
     * this folder.  The array may be empty.
     *
     * @return array   Array of {@link CB_MailMessage}
     */
    function getAllMessages()
    {
    }

    /**
     * Return message size in byte.
     *
     * @param int $msgnum
     *
     * @return int
     */
    function getMessageSize($msgnum)
    {
    }

    /**
     * Return the sum total of all messages in byte.
     *
     * @return int
     */
    function getTotalSize()
    {
    }

    /**
     * Return headers for a message.  $header_names is the array of
     * header names to be retrieved.  To retrieve all headers,
     * pass NULL to $header_names.
     *
     * Returned array is a list of CB_MailHeader.
     * e.g., array('0' => CB_MailHeader('To', 'ymmt@...'),
     *             '1' => CB_MailHeader('Cc', 'ymmt@...'),
     *             '2' => CB_MailHeader('Cc', 'mizuno@...')...
     *
     * @param  int   $msgnum
     * @param  mixed $header_names
     *
     * @return array
     */
    function getMessageHeaders($msgnum, $header_names = null)
    {
    }

    /**
     * Return array of headers for all messages.
     * $header_names is the array of header names to be retrieved.
     * To retrieve all headers, pass NULL to $header_names.
     *
     * Returned array will have message number as keys and array of CB_MailHeader.
     *
     * e.g., array( '0' => array('0' => CB_MailHeader('To', 'ymmt@...'),
     *                  '1' => CB_MailHeader('CC', 'ymmt@...'),
     *                  '2' => CB_MailHeader('CC', 'mizuno@...')),
     *              '1' => ... );
     *
     *
     * @return array
     */
    function getAllMessageHeaders($header_names = null)
    {
    }

    /**
     * Delete a message in this folder.
     *
     * If you are using seen/unseen APIs, you MUST use deleteSeenMessages()
     * instead of this, otherwise seen/unseen status may be corruptted.
     *
     * @param int $msgnum
     */
    function deleteMessage($msgnum)
    {
    }

    /**
     * Delete all messages in this folder.
     */
    function deleteAllMessages()
    {
    }

    /**
     * Return array of message numbers for unseen messages.
     * The message number can be passed to methods such as
     * {@link CB_MailFolder::getMessage()} and so on to do further
     * operations.
     *
     * @return array
     */
    function getUnseenMessageNumbers()
    {
    }

    /**
     * Iterate over unseen messages and mark the visited message as seen.
     *
     * Return an array like array('msgnum'=>$msgnum, 'message'=>$message).
     * where $msgnum is the message number which may be passwd to
     * deleteMesssage(), and $message is the mail message object.
     *
     * Return NULL if there are no more unseen messages.
     *
     * @return mixed   array or NULL.
     */
    function getNextUnseenMessage()
    {
    }

    /**
     * Set specified messages to unseen status.
     *
     * @param  array $msgnums
     *
     * @return boolean Success/Failure
     */
    function setUnseen($msgnums)
    {
    }

    /**
     * Delete all seen messages.
     */
    function deleteSeenMessages()
    {
    }

    function isUIDCapable()
    {
    }

    function getMessageNumber($uid)
    {
    }

    function getMessageUID($msgnum)
    {
    }
}


