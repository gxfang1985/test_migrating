<?php
require_once("fw/database.csp");

/**
 *
 * Database for test
 *
 * To rollback all the modification on the database, we need not only to rollback but
 * also reset the auto_increment values of each tables.
 * We can achieve it by calling CbTestDatabaseConnection
 */
class CbTestDatabaseConnection extends CB_DatabaseConnection
{
    private $beforeMaxIdList = [];

    private function setBeforeMaxIdList($tableName, $maxId)
    {
        if ( ! array_key_exists($tableName, $this->beforeMaxIdList)) {
            $this->beforeMaxIdList[$tableName] = $maxId;
        }
    }

    private function getBeforeMaxIdList()
    {
        return $this->beforeMaxIdList;
    }

    private function getMaxId($tableName)
    {
        $result
            = parent::query("SELECT IF(max(_id) IS NULL, 0, max(_id)+1) AS auto_increment FROM {$tableName};");
        $row = parent::fetch_assoc($result);
        $ret = $row["auto_increment"];
        parent::free_result($result);

        return $ret;
    }

    private function hasIdColumn($tableName)
    {
        $result = parent::query("SHOW CREATE TABLE {$tableName}");
        $row = $this->fetch_assoc($result);
        $this->free_result($result);

        if (strpos($row["Create Table"],
                '`_id` bigint(20) NOT NULL AUTO_INCREMENT') !== false
        ) {
            return true;
        }

        return false;
    }

    /**
     * (non-PHPdoc)
     * @see CB_DatabaseConnection::query()
     */
    public function query($query)
    {
        foreach ($this->findTableName($query) as $tableName) {
            if ($this->hasIdColumn($tableName)) {
                $this->setBeforeMaxIdList($tableName,
                    $this->getMaxId($tableName));
            }
        }
        $tmp = parent::query($query);

        return $tmp;
    }

    private function findTableName($query)
    {
        $ret = [];
        if (preg_match_all('/tab_\w+/', $query, $matches)) {
            foreach ($matches as $match) {
                $ret[] = $match[0];
            }
        }

        return $ret;
    }

    public function rollBack()
    {
        parent::query("ROLLBACK;");
        foreach ($this->getBeforeMaxIdList() as $tableName => $maxId) {
            parent::query("ALTER TABLE {$tableName} AUTO_INCREMENT = {$maxId};");
        }
    }

    /**
     * (non-PHPdoc)
     * @see CB_DatabaseConnection::commit()
     */
    public function commit()
    {
        return true;
    }
}
