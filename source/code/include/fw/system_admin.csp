<?php

/**
 * Implements system administration logics.
 *
 * @package fw.core
 */

/**
 * Login type constants.
 */
define('CB_SYSADMIN_LOGIN_USERS', 0);
define('CB_SYSADMIN_LOGIN_GROUP_USERS', 1);
define('CB_SYSADMIN_LOGIN_ACCOUNT', 2);

/**
 * Default cookie lifetime (days).
 */
define('CB_SYSADMIN_COOKIE_LIFETIME', 14);

require_once('fw/module.csp');

/**
 * Manage configurations for system administration.
 *
 * @package fw.core
 */
class CB_SystemAdmin extends CB_ModuleBase
{
    /**
     * @return CB_SystemAdmin
     */
    public static function getInstance()
    {
        static $_singleton = null;
        if (is_null($_singleton)) {
            $_singleton = new CB_SystemAdmin();
        }

        return $_singleton;
    }

    /**
     * @access private
     */
    var $_profile;

    /**
     * @access private
     */
    function __construct()
    {
        parent::__construct('fw.admin');
        $this->_profile = $this->getSystemProfile();
    }

    /**
     * @param integer $type    one of CB_SYSADMIN_LOGIN_USERS,
     *                         CB_SYSADMIN_LOGIN_GROUP_USERS, or
     *                         CB_SYSADMIN_LOGIN_ACCOUNT.
     */
    function setLoginType($type)
    {
        $is_get = $this->_profile->getAttribute('login_type', $value);
        if ($is_get) {
            $this->_profile->updateAttribute('login_type', $type);
        } else {
            $this->_profile->createAttribute('login_type', $type);
        }

        return true;
    }

    /**
     * @return integer     one of CB_SYSADMIN_LOGIN_USERS,
     *                     CB_SYSADMIN_LOGIN_GROUP_USERS, or
     *                     CB_SYSADMIN_LOGIN_ACCOUNT.
     */
    function getLoginType()
    {
        $ret = $this->_profile->getAttribute('login_type', $type);
        if (false === $ret) {
            return CB_SYSADMIN_LOGIN_USERS;
        }

        return $type;
    }

    /**
     * @param integer $days Cookie lifetime.
     */
    function setCookieLifetime($days)
    {
        $is_get = $this->_profile->getAttribute('cookie_lifetime', $value);
        if ($is_get) {
            $this->_profile->updateAttribute('cookie_lifetime', $days);
        } else {
            $this->_profile->createAttribute('cookie_lifetime', $days);
        }

        return true;
    }

    /**
     * @return integer         Cookie lifetime days.
     */
    function getCookieLifetime()
    {
        $ret = $this->_profile->getAttribute('cookie_lifetime', $days);
        if (false === $ret) {
            return CB_SYSADMIN_COOKIE_LIFETIME;
        }

        return $days;
    }
}


