<?php

/**
 * Date/Time types to exchange SQL DATE, TIME, and DATETIME values
 * between applications and SQL databases.
 *
 * @package fw.core
 */

/**
 * Represents SQL DATE type.  In MySQL, date can range from 1000-01-01
 * to 9999-12-31.
 *
 * @package fw.core
 */
class CB_Date
{
    var $year = 0;
    var $month = 0;
    var $day = 0;

    /**
     * @param string[] $args
     *
     * @return CB_Date
     */
    public static function valueOf(...$args)
    {
        if (count($args) === 1) {
            $date_string = $args[0];

            $myself = new self();
            $myself->parse($date_string);

            return $myself;
        }

        if (count($args) === 3) {
            $year = $args[0];
            $month = $args[1];
            $day = $args[2];

            $myself = new self();
            $myself->year = $year;
            $myself->month = $month;
            $myself->day = $day;

            return $myself;
        }

        return false;
    }

    /**
     * Parse "YYYY-MM-DD" format string.
     *
     * @param string $dateString
     *
     * @return boolean
     */
    function parse($dateString)
    {
        if (preg_match('/([0-9]+)-([0-9]+)-([0-9]+)/', $dateString, $regs)) {
            $this->year = intval($regs[1]);
            $this->month = intval($regs[2]);
            $this->day = intval($regs[3]);

            return true;
        }

        return false;
    }

    /**
     * @return string
     */
    function format()
    {
        return sprintf('%04d-%02d-%02d', $this->year, $this->month, $this->day);
    }
}

/**
 * Represents SQL TIME type.  In MySQL, time can range from
 * -838:59:59 to 838:59:59.
 *
 * @package fw.core
 */
class CB_Time
{
    var $hour = 0;
    var $minute = 0;
    var $second = 0;

    /**
     * @param int $hour
     * @param int $minute
     * @param int $second
     *
     * @return CB_Time
     */
    public static function valueOf(int $hour, int $minute, int $second)
    {
        $myself = new self();
        $myself->hour = $hour;
        $myself->minute = $minute;
        $myself->second = $second;

        return $myself;
    }

    /**
     * Parse "HH:MM:SS" format string
     *
     * @param string $timeString
     *
     * @return boolean
     */
    function parse($timeString)
    {
        if (preg_match('/(-*[0-9]+):([0-9]+):([0-9]+)/', $timeString, $regs)) {
            $this->hour = intval($regs[1]);
            $this->minute = intval($regs[2]);
            $this->second = intval($regs[3]);

            return true;
        }

        return false;
    }

    /**
     * @return string
     */
    function format()
    {
        return sprintf('%02d:%02d:%02d', $this->hour, $this->minute,
            $this->second);
    }

    /**
     * @return int
     */
    function toSeconds()
    {
        return ($this->hour * 3600) + ($this->minute * 60) + $this->second;
    }
}

/**
 * Represents SQL DATETIME type.  In MySQL, DATETIME can range
 * '1000-01-01 00:00:00' to '9999-12-31 23:59:59'.
 *
 * @package fw.core
 */
class CB_DateTime
{
    var $year = 0;
    var $month = 0;
    var $day = 0;
    var $hour = 0;
    var $minute = 0;
    var $second = 0;

    /**
     * @param int $year
     * @param int $month
     * @param int $day
     * @param int $hour
     * @param int $minute
     * @param int $second
     *
     * @return CB_DateTime
     */
    public static function valueOf(
        int $year,
        int $month,
        int $day,
        int $hour,
        int $minute,
        int $second
    ) {
        $myself = new self();
        $myself->year = $year;
        $myself->month = $month;
        $myself->day = $day;
        $myself->hour = $hour;
        $myself->minute = $minute;
        $myself->second = $second;

        return $myself;
    }

    /**
     * parse "YYYY-MM-DD HH:MM:SS" format string
     *
     * @param string $datetimeString
     *
     * @return boolean
     */
    function parse($datetimeString)
    {
        if (preg_match('/([0-9]+)-([0-9]+)-([0-9]+) +([0-9]+):([0-9]+):([0-9]+)/',
            $datetimeString, $regs)
        ) {
            $this->year = intval($regs[1]);
            $this->month = intval($regs[2]);
            $this->day = intval($regs[3]);
            $this->hour = intval($regs[4]);
            $this->minute = intval($regs[5]);
            $this->second = intval($regs[6]);

            return true;
        }

        return false;
    }

    /**
     * @return string
     */
    function format()
    {
        return sprintf('%04d-%02d-%02d %02d:%02d:%02d',
            $this->year, $this->month, $this->day,
            $this->hour, $this->minute, $this->second);
    }
}

/**
 * Represents a UNIX timestamp.
 *
 * @package fw.core
 */
class CB_TimeStamp
{
    public $unix_ts = 0;

    /**
     * @param int $unix_ts
     *
     * @return CB_TimeStamp
     */
    public static function valueOf(int $unix_ts)
    {
        $myself = new self();
        $myself->unix_ts = $unix_ts;

        return $myself;
    }
}


