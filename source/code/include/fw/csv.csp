<?php

/**
 * Implement CSV reader and writer.
 *
 * @package fw.core
 */

define('CB_CSV_ERROR_HEADER', 'X-Cybozu-CSVErrorAt: ');
define('CB_CSV_HEART_BEAT', 'X-Cybozu-Heartbeat: ');

class CB_CSVReader extends CB_CSVReader_Core
{
    private $linecount;
    private $_encoder;
    private $_detect_bom;

    public function __construct($charset = null, $file_path = null)
    {
        $this->_detect_bom = false;

        require_once('fw/i18n.csp');
        $i18n = CB_I18N::getInstance();
        $this->_encoder = $i18n->getEncoder($charset);
        if ($this->_encoder !== false) {
            $charset = $this->_encoder->getCharset();
        }
        parent::__construct($charset, $file_path);
    }

    public function readLine()
    {
        $csvline = parent::readLine();
        if ($csvline !== false
            && $this->_encoder instanceof plugin_fw_i18n_tis_620
        ) {
            $csvline = $this->_encoder->convToUTF8Array($csvline);
        }

        // GTM-332 detect remove BOM character
        if ( ! $this->_detect_bom) {
            if (is_array($csvline) && count($csvline) > 0) {
                if (substr($csvline[0], 0, 3) == "\xEF\xBB\xBF") {
                    $csvline[0] = substr($csvline[0], 3);
                }
            }
            $this->_detect_bom = true;
        }

        $this->linecount++;
        print_cb_csv_heartbeat($this->linecount);

        return $csvline;
    }

}

class CB_CSVWriter extends CB_CSVWriter_Core
{
    private $linecount;
    private $_encoder;

    public function __construct($charset = null, $file_path = null)
    {
        require_once('fw/i18n.csp');
        $i18n = CB_I18N::getInstance();
        $this->_encoder = $i18n->getEncoder($charset);
        if ($this->_encoder !== false) {
            $charset = $this->_encoder->getCharset();
        }
        parent::__construct($charset, $file_path);

    }

    public function writeLine($line)
    {
        if ($this->_encoder instanceof plugin_fw_i18n_tis_620) {
            $line = $this->_encoder->convFromUTF8Array($line);
        }
        parent::writeLine($line);

        $this->linecount++;
        print_cb_csv_heartbeat($this->linecount);
    }

}

/**
 *  CSV書き出し時のハートビート用ヘッダを書き出す。
 *  何行読み書きしたらヘッダを出力するかの間隔を common,ini で変更できるようにする。
 *  IEではHTTPレスポンスヘッダは最大255行までしか受け取れないので、応答時間と間隔は環境によって変えられるようにする必要がある。
 */
function print_cb_csv_heartbeat($linecount)
{
    static $heartbeat_interval = null;
    if (is_null($heartbeat_interval)) {
        global $G_config_common;
        $heartbeat_interval = $G_config_common->get('CSV',
            'heartbeat_interval');

        if ((is_null($heartbeat_interval)) || ($heartbeat_interval < 1)) {
            $heartbeat_interval = 100;
        }
    }

    if ( ! headers_sent()) {
        if ($linecount % $heartbeat_interval == $heartbeat_interval - 1) {
            header(CB_CSV_HEART_BEAT . $linecount, false);
        }
    }
}

function cb_csv_error_hook($error_info)
{
    static $called = false;
    if ($called) {
        return null;
    }

    $called = true;
    $line = cb_set_csv_line();
    if ($line == 0) {
        return null;
    }

    // issue error header X-Cybozu-CSVErrorAt
    require_once('fw/i18n.csp');
    if ( ! headers_sent()) {
        header(CB_CSV_ERROR_HEADER . $line);
    }

    return cb_msg('fw.error', 'csvline', ['line' => $line]);
}

// Register error hook function upon loading this file.
require_once('fw/error_handler.csp');
$error_handler = CB_ErrorHandler::getInstance();
$error_handler->addHook('cb_csv_error_hook');
unset($error_handler);


