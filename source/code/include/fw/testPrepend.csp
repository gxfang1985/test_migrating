<?php
require_once("fw/miscFunctions.csp");
require_once("fw/testExitFunctions.csp");

/**
 * get page's display name
 */
function grn_get_page_display_name($page_name, $args = null)
{
    require_once('fw/i18n.csp');
    $page_parts = explode('/', $page_name);

    //-- create id for message
    $message_id = 'grn';
    $page_parts_count = count($page_parts);
    for ($i = 0; $i < $page_parts_count - 1; $i++) {
        $message_id .= '.' . $page_parts[$i];
    }
    $page_name_last = end($page_parts);
    // if $page_name_last begins "command_", remove that pre sting.
    if (substr($page_name_last, 0, 8) == "command_") {
        $page_name_last = substr($page_name_last, 8);
    }

    if ($page_parts_count > 0
        && ($page_parts[0] == 'system'
            || $page_parts[1] == 'system')
        && (is_null($args) || ! array_key_exists('application_name', $args))
    ) {
        require_once('grn/application.csp');
        $locator = GRN_ApplicationLocator::instance();
        $instance = $locator->getInstance($page_parts[0]);

        if ($instance) {
            if (is_null($args)) {
                $args = [];
            }
            $args['application_name'] = $instance->getDefaultName();
        }
    } // set application name to $args
    elseif ($page_parts_count > 0
            && (is_null($args)
                || ! array_key_exists('application_name', $args))
    ) {
        require_once('grn/application.csp');
        $locator = GRN_ApplicationLocator::instance();
        $instance = $locator->getInstance($page_parts[0]);

        if ($instance) {
            if (is_null($args)) {
                $args = [];
            }
            $args['application_name'] = $instance->getName();
        }
    }

    return cb_plain_msg($message_id, $page_name_last, $args);
}

/**
 * get the display name of the current page
 */
function grn_get_current_page_display_name($args = null)
{
    //-- get the current page name
    $page_name = cb_get_pagename();

    return grn_get_page_display_name($page_name, $args);
}


function setup_G_container_base()
{
    require_once('fw/lwc.csp');
    $_dummy = null;
    global $G_config_common;
    $_config = new CB_LWContainerFileConfig($G_config_common->get('LWC',
        'config'));

    global $G_container_base;
    $G_container_base = new CB_LWContainer($_dummy, $_config);
}

function setup_g_config_common()
{
    // Load "common.ini" from the base directory
    $_common_ini = cb_basedir() . '/testCommon.ini';
    if ( ! file_exists($_common_ini)) {
        die($_common_ini . ' is missing. Check your configuration!');
    }

    global $G_config_common;
    $G_config_common = new CB_ConfigManager($_common_ini, 'Global');

}

function setup_g_config_grn()
{
    $_config = cb_basedir() . '/garoon.ini';
    if ( ! file_exists($_config)) {
        die($_config . ' is missing. Check your configuration!');
    }
    global $G_config_grn;
    $G_config_grn = new CB_ConfigManager($_config, 'Global');
    unset($_config);
}

function setup_g_container_grn()
{
    global $G_config_grn, $G_container_base;
    /*
     * ベースサービス用の軽量コンテナの生成
     */
    $_config = $G_config_grn->get('System', 'lwc_config');
    global $G_container_grn;
    $G_container_grn = new CB_LWContainer($G_container_base,
        new CB_LWContainerFileConfig($_config));
    unset($_config);
}

function setup_g_state_set()
{
    global $G_state_set;
    $G_state_set = new CB_StateSet();

    $G_state_set->set('error_occurred', false);
    $G_state_set->set('disable_check_hijack', false);
}

/*
 * アプリケーション用プラグイン軽量コンテナ
 */
function setup_g_container_app()
{
    global $G_container_app, $G_container_grn, $G_config_grn;
    $dir = $G_config_grn->get('System', 'lwc_dir');
    $G_container_app = new CB_LWContainer($G_container_grn,
        new CB_LWContainerDirectoryConfig($dir));
    unset($dir);
}

/**
 * @global object CB_ConfigManager $G_config_common
 */
$G_config_common = null;
setup_g_config_common();

/**
 * The bottom-most container.
 *
 * @global object CB_LWContainer $G_container_base
 * @see CB_LWContainer
 */
$G_container_base = null;
setup_G_container_base();

/*
 * Garoon基本設定
 */
$G_config_grn = null;
setup_g_config_grn();

/*
 * ベースサービス用の軽量コンテナ
 */
$G_container_grn = null;
setup_g_container_grn();

/*
 * アプリケーション用プラグイン軽量コンテナ
 */
$G_container_app = null;
setup_g_container_app();

/**
 * @global object CB_StateSet $G_state_set
 */
$G_state_set = null;
setup_g_state_set();

/**
 *
 * ブラウザからの入力
 */
$G_INPUT = [];

/**
 * @global object CB_StateSet $G_state_set
 */
$G_state_set = new CB_StateSet();

while (ob_get_level() > 0) {
    ob_end_flush();
}
