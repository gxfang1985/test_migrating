<?php

/**
 * @package fw.core
 */

require_once('fw/i18n.csp');

// エラーコード中の数値の長さ
define('CB_ERROR_CODE_LENGTH', 5);

/**
 * エラーメッセージクラス
 *
 * - エラーコードを元に、エラーメッセージを得て、保持する
 *
 * エラーコード自身と、3つのエラーメッセージ(エラー内容、原因、対策)を持つ
 *
 * @package fw.core
 */
class CB_ErrorMessage
{
    /** コンストラクタ */
    function __construct()
    {
    }

    // ----------------------------
    // static関数
    // ----------------------------
    /**
     * エラーメッセージクラスを得るためのファクトリメソッド
     *
     * @param string $errorCode エラーコード文字列 (例: FW00001)
     * @param        $alternativeResources
     *
     * @return CB_ErrorMessage 取得されたエラーメッセージオブジェクト
     */
    public static function getInstance($errorCode, $alternativeResources)
    {
        $i18n = CB_I18N::getInstance();
        $module = substr($errorCode, 0, -CB_ERROR_CODE_LENGTH);
        $key = substr($errorCode, -CB_ERROR_CODE_LENGTH);

        global $G_state_set;
        $error_resource = 'error';
        if ( ! is_null($G_state_set->get('error_resource_type'))) {
            $error_resource = $G_state_set->get('error_resource_type');
        }

        if (is_array($alternativeResources)) {
            $gottenErrorResource = $i18n->getResource($error_resource, $module,
                $key, false);
            if ( ! is_array($gottenErrorResource)) {
                $gottenErrorResource = $alternativeResources;
            }
        } else {
            $gottenErrorResource = $i18n->getResource($error_resource, $module,
                $key);
        }

        $gotten_error_message = new CB_ErrorMessage;
        $gotten_error_message->code = $errorCode;
        $gotten_error_message->diagnosis = $gottenErrorResource[0];
        $gotten_error_message->cause = $gottenErrorResource[1];
        $gotten_error_message->countermeasure = $gottenErrorResource[2];
        $gotten_error_message->developer_info = $gottenErrorResource[3];

        return $gotten_error_message;
    }
    // ----------------------------
    // メンバ変数
    // ----------------------------
    /** システムで一意なエラーコード */
    var $code;
    /** 症状メッセージ */
    var $diagnosis;
    /** 原因メッセージ */
    var $cause;
    /** 対策メッセージ */
    var $countermeasure;
    /** 開発者情報メッセージ */
    var $developer_info;

    // ----------------------------
    // メンバ関数
    // ----------------------------
    /** */
    function getCode()
    {
        return $this->code;
    }

    /** */
    function getDiagnosisMessage()
    {
        return $this->diagnosis;
    }

    /** */
    function getCauseMessage()
    {
        return $this->cause;
    }

    /** */
    function getCounterMeasureMessage()
    {
        return $this->countermeasure;
    }

    /** */
    function getDeveloperInfoMessage()
    {
        return $this->developer_info;
    }

    /**
     * 配列のパラメータをリソース文字列に埋め込む.
     *
     * @param message string 置換指示子を含んだメッセージ
     * @param parameters array|null 置換する文字列の連想配列。
     *                   nullの場合は何もせず元の文を返す
     *
     * @return 置換された文字列
     */
    function _static_setParametersIntoMessage($message, $parameters = null)
    {
        // パラメータ置換子の置き換え
        if (is_null($parameters)) {
            return $message;
        }
        foreach ($parameters as $key => $value) {
            $value = htmlspecialchars($value);
            $message = str_replace("&&${key}&&", $value, $message);
        }

        return $message;
    }

    /**
     * パラメータを埋め込んだ症状メッセージを生成する
     */
    function formatDiagnosisMessage($parameters = null)
    {
        $workingText = $this->getDiagnosisMessage();
        if (is_null($workingText)) {
            return cb_msg('fw.error', 'Default Diagnosis', $parameters);
        } else {
            return CB_ErrorMessage::_static_setParametersIntoMessage($workingText,
                $parameters);
        }

        return $replacedText;
    }

    function formatCauseMessage($parameters = null)
    {
        $workingText = $this->getCauseMessage();
        if (is_null($workingText)) {
            return cb_msg('fw.error', 'Default Cause', $parameters);
        } else {
            return CB_ErrorMessage::_static_setParametersIntoMessage($workingText,
                $parameters);
        }
    }

    function formatCounterMeasureMessage($parameters = null)
    {
        $workingText = $this->getCounterMeasureMessage();
        if (is_null($workingText)) {
            return cb_msg('fw.error', 'Default Counter Measure', $parameters);
        } else {
            return CB_ErrorMessage::_static_setParametersIntoMessage($workingText,
                $parameters);
        }
    }

    function formatDeveloperInfoMessage($parameters = null)
    {
        $workingText = $this->getDeveloperInfoMessage();
        if (is_null($workingText)) {
            return cb_msg('fw.error', 'Default Developer Info', $parameters);
        } else {
            return CB_ErrorMessage::_static_setParametersIntoMessage($workingText,
                $parameters);
        }
    }

    /**
     * @param array  $errorArray
     * @param string $type
     *
     * @return array
     */
    public static function getFullErrorMessage($errorArray, $type = 'plain')
    {
        $msg = CB_ErrorMessage::getInstance($errorArray['code'], null);
        $factory = CB_ErrorMessageFilterFactory::getInstance();
        $filter = $factory->getFilter($type);
        $msgDiag = '';
        $msgCause = '';

        if (array_key_exists('diagnosis', $errorArray)) {
            $msgDiag
                = $filter->filter($msg->formatDiagnosisMessage($errorArray['diagnosis']));
        }
        if (array_key_exists('cause', $errorArray)) {
            $msgCause
                = $filter->filter($msg->formatCauseMessage($errorArray['cause']));
        }

        return [
            'code'      => $errorArray['code'],
            'diagnosis' => $msgDiag,
            'cause'     => $msgCause
        ];

    }

}


