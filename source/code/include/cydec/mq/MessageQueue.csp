<?php

namespace grn\cydec\mq;

/**
 * Class MessageQueue
 *
 * @package grn\cydec\mq
 */
class MessageQueue
{
    const QUEUE_TABLE = '_queue';
    /**
     * MySQLに登録できる文字列最大長は2 ^ 24 -1 B = 16MB
     * 2 ^ 24 -1 = 16777215
     */
    const MYSQL_MEDIUMTEXT_SIZE = 16000000;

    /** @var \CB_DatabaseConnection */
    private $databaseConnection;


    public function __construct()
    {
        $this->setDatabaseConnection(cb_get_app_db("job"));
    }

    /**
     * @param QueueRecordInterface $record
     *
     * @return string
     */
    public function enqueue(QueueRecordInterface $record)
    {

        /**
         * Messageが16MBを超えると不正なJSONになる
         * JobMessageが16MBを超えると不正なJSONになるのでエラーとして扱う
         * BlobIdは1000idまで・Indexデータは10MBまでなので、これを超えるケースは、不正な攻撃が
         * 行われている可能性がある
         *
         * @see BlobRemoveJobMessage::exceedsSize
         * @see FTSIndexJobMessage::exceedsSize
         */
        if (strlen($record->getMessage()) > self::MYSQL_MEDIUMTEXT_SIZE) {
            cb_throw_error();
        }

        $db = $this->getDatabaseConnection();
        $value = cb_queryf($db,
            "('@S', '@S', UTC_TIMESTAMP(), UTC_TIMESTAMP())",
            $record->getMessage(), $record->getJobName());
        $query = "INSERT INTO " . self::QUEUE_TABLE
                 . " (message, jobName, ctime, ptime) VALUES " . $value;
        $db->query($query);

        return $db->get_insert_id();
    }

    /**
     * @param $queueId
     *
     * @return bool
     */
    public function isFinished($queueId)
    {
        $db = $this->getDatabaseConnection();
        $result = $db->query("SELECT (COUNT(id) = 0) is_finished FROM "
                             . self::QUEUE_TABLE
                             . " WHERE id='{$db->escape($queueId)}'");
        $row = $db->fetch_assoc($result);
        $db->free_result($result);

        return (bool)$row['is_finished'];
    }

    /**
     * @return array
     */
    public function getTopQueue()
    {
        $query = "SELECT id, message, jobName, ctime FROM " . self::QUEUE_TABLE
                 . " LIMIT 1";

        return $this->getQueue($query);
    }

    /**
     * @param $id
     * @param $ctime
     *
     * @return array
     */
    public function getParticularQueue($id, $ctime)
    {
        $db = $this->getDatabaseConnection();
        $query = $db->format("SELECT id, message, jobName, ctime FROM "
                             . self::QUEUE_TABLE
                             . " WHERE id='@S' AND ctime='@S'", [$id, $ctime]);

        return $this->getQueue($query);
    }

    /**
     * @param string $query
     *
     * @return array $queue('id' => ID, 'message' => MESSAGE, 'jobName' => JOB_NAME, 'ctime' => CREATE_TIME)
     */
    private function getQueue($query)
    {
        $db = $this->getDatabaseConnection();
        $result = $db->query($query);
        $row = $db->fetch_assoc($result);
        $db->free_result($result);
        $queue = [];
        $queue['id'] = (isset($row['id'])) ? $row['id'] : '';
        $queue['message'] = (isset($row['message'])) ? $row['message'] : '';
        $queue['jobName'] = (isset($row['jobName'])) ? $row['jobName'] : '';
        $queue['ctime'] = (isset($row['ctime'])) ? $row['ctime'] : '';

        return $queue;
    }

    /**
     * @return int
     */
    public function getCountRemainingQueue()
    {
        $db = $this->getDatabaseConnection();
        $result = $db->query("SELECT COUNT(*) AS count FROM "
                             . self::QUEUE_TABLE);
        $row = $db->fetch_assoc($result);
        $db->free_result($result);
        $count = (isset($row['count'])) ? (int)$row['count'] : 0;

        return $count;
    }

    /**
     * @param $id
     * @param $ctime
     *
     * @return bool|int
     */
    public function deleteQueue($id, $ctime)
    {
        $db = $this->getDatabaseConnection();
        $db->query($db->format("DELETE FROM @S WHERE id='@S' AND ctime='@S'",
            [self::QUEUE_TABLE, $id, $ctime]));

        return $db->affected_rows();
    }

    /**
     * @return \CB_DatabaseConnection
     */
    private function getDatabaseConnection()
    {
        return $this->databaseConnection;
    }

    /**
     * @param \CB_DatabaseConnection $db
     */
    private function setDatabaseConnection($db)
    {
        $this->databaseConnection = $db;
    }
}
