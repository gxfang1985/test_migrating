<?php

namespace grn\cydec\mq;

use grn\fts\UpdateService;

/**
 * Class IndexJobMessagePolicy
 * This class express message for FTS index Job
 *
 * @package grn\cydec\mq
 */
class FTSIndexJobMessage extends JobMessage
{
    /**
     * @see http://wiki.dev.cybozu.co.jp/display/gaia2/MS+Message+Format
     * CYDE-Cで推奨されているサイズは、10MB
     */
    const JSON_LENGTH_LIMIT = 10000000;
    const SHARD_KEY_MIN = 0;
    const SHARD_KEY_MAX_DEFAULT = PHP_INT_MAX;
    const FORWARD_KEY_NEW = 'new';
    const FORWARD_KEY_OLD = 'old';
    const FORWARD_KEY_BOTH = 'both';

    private $jobName;
    private $method;

    /** @var string */
    private $forward;

    /** @var array */
    private $forwardValues
        = [
            self::FORWARD_KEY_NEW,
            self::FORWARD_KEY_OLD,
            self::FORWARD_KEY_BOTH,
        ];


    /**
     * @param string $method
     * @param string $jobName
     */
    public function __construct($method, $jobName)
    {
        $this->method = $method;
        $this->jobName = $jobName;
    }

    /**
     * @param array $arguments
     *
     * @return array
     */
    public function constructMessage(array $arguments)
    {

        $shardKey = ($this->method === UpdateService::METHOD_ADD)
            ? $this->generateShardKey() : self::SHARD_KEY_MIN;

        $message = [
            'version'  => 1,
            'method'   => $this->method,
            'shardKey' => $shardKey,
            'arg'      => $arguments,
        ];

        if (in_array($this->forward, $this->forwardValues, true)
            && $this->jobName === JobNameConstants::FTS_BULK_INDEXER
        ) {
            $message['forward'] = $this->forward;
        }

        return $message;
    }

    /**
     * @return int
     */
    private function generateShardKey()
    {
        return abs(rand(self::SHARD_KEY_MIN, self::SHARD_KEY_MAX_DEFAULT));
    }

    /**
     * @param array $argument
     *
     * @return int
     */
    private function calculateMessageLength(array $argument)
    {
        return strlen(json_encode($this->constructMessage($argument),
            JSON_UNESCAPED_UNICODE));
    }

    /**
     * @param array       $argument
     * @param mixed       $nextArgument
     * @param string|null $nextArgumentType
     *
     * @return bool
     */
    public function exceedsSize(
        array $argument,
        $nextArgument,
        $nextArgumentType = null
    ) {
        $messageLength = $this->calculateMessageLength(array_merge($argument,
            $nextArgument));

        return $messageLength > self::JSON_LENGTH_LIMIT;
    }


    /**
     * @param string $forward
     */
    public function setForward($forward)
    {
        $this->forward = $forward;
    }

    /**
     * @return string
     */
    public function getJobName()
    {
        return $this->jobName;
    }
}
