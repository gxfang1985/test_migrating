<?php

namespace grn\cydec\yrmcds;

use yrmcds\Response;
use yrmcds\Client;
use yrmcds\Error;


/**
 * Class YrmcdsSessionClient
 *
 * @see     http://cybozu.github.io/php-yrmcds/html/index.html
 * @see     http://cybozu.github.io/php-yrmcds/
 * @package grn\cydec\yrmcds
 */
class SessionClient
{
    /** @var Client */
    private $client;

    /** @var int */
    private $expire;

    /**
     * @param Client $client
     * @param int    $expire
     */
    public function __construct(Client $client, $expire)
    {
        $this->client = $client;
        $this->expire = $expire;
    }

    /**
     * This method returns that whether the $id session exist.
     * If $is_expire is true, it expires the time of the session by yrmcds touch() method..
     * If $id is blank, it return false. https://bozuman.cybozu.com/k/4731/show#record=15682
     *
     * @param      $id
     * @param bool $is_expire
     *
     * @return bool
     * @throws Error
     */
    public function exist($id, $is_expire = true)
    {
        if (empty($id)) {
            return false;
        }

        if ($is_expire) {
            $serial = $this->client->touch($id, $this->expire);
        } else {
            $serial = $this->client->get($id);
        }

        while (true) {
            /** @var Response $r */
            $r = $this->client->recv();
            if ($r->serial == $serial) {
                break;
            }
        }

        return $r->status === \yrmcds\STATUS_OK;
    }

    /**
     * This method returns session data of id = $id.
     * If $is_expire is true, it expires the time of the session in the exist() method.
     * If $id is blank, it return blank.
     *
     * @param      $id
     * @param bool $is_expire
     *
     * @return string
     * @throws Error
     */
    public function read($id, $is_expire = true)
    {
        if ( ! $this->exist($id, $is_expire)) {
            return "";
        }
        $this->client->get($id);

        /** @var Response $r */
        $r = $this->client->recv();

        return ($r->status === \yrmcds\STATUS_OK) ? $r->data : '';
    }

    /**
     * @param $id
     * @param $data
     * @param $locked
     *
     * @throws Error
     * @return bool
     */
    public function write($id, $data, $locked)
    {
        if (strlen($data) == 0) {
            $this->client->delete($id, true);

            return true;
        }
        if ($locked) {
            $this->client->replaceUnlock(
                $id, $data, 0, $this->expire, true
            );
        } else {
            $this->client->set($id, $data, 0, $this->expire, 0, true);
        }

        return true;
    }

    /**
     * @param string $id
     *
     * @throws Error
     * @return bool
     */
    public function destroy($id)
    {
        $this->client->delete($id, true);

        return true;
    }

    /**
     * @param string $id
     *
     * @throws Error
     * @return Response
     */
    public function lockGet($id)
    {
        $r = null;
        $serial = $this->client->lockGet($id);
        while (true) {
            $r = $this->client->recv();
            if ($r->serial == $serial) {
                break;
            }
        }

        return $r;
    }


    /**
     * @param Response $response
     *
     * @return bool
     */
    public function isStatusOK(Response $response)
    {
        return $response->status === \yrmcds\STATUS_OK;
    }


    /**
     * @param Response $response
     *
     * @return bool
     */
    public function isStatusLocked(Response $response)
    {
        return $response->status === \yrmcds\STATUS_LOCKED;
    }

} 
