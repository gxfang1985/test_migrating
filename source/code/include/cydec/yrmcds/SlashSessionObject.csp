<?php

namespace grn\cydec\yrmcds;

use grn\cydec\yrmcds\exception\SessionKeyNotFoundException;

require_once('fw/cydec.csp');
require_once('fw/date.csp');

/**
 * Class SlashSessionObject
 *
 * @package grn\cydec\yrmcds
 * slash session format sample:
 * { "userId": "123",
 *   "absoluteExpire": "2013-05-24T03:54:59.076Z",
 *   "subkey": "8BBDE3E5E809C50D5E577588EF71118C"
 * }
 */
class SlashSessionObject
{
    /**
     * 認証済のユーザーID
     * Slash User id
     *
     * @var string
     */
    private $userId;
    /**
     * SAML連携をすると値が入る
     * 延長されない認証情報の有効期限.
     * ISO-8601 UTC
     *
     * @var string
     */
    private $absoluteExpire;
    /**
     * 認証時に設定される秘密鍵
     *
     * @var string
     */
    private $subkey;

    /**
     * @param $userId
     * @param $absoluteExpire
     * @param $subKey
     */
    private function __construct($userId, $absoluteExpire, $subKey)
    {
        $this->userId = $userId;
        $this->absoluteExpire = $absoluteExpire;
        $this->subkey = $subKey;
    }

    /**
     * @param string $jsonLiteral
     *
     * @return self
     */
    public static function getInstance($jsonLiteral)
    {
        $json = json_decode($jsonLiteral, true);
        $userId = $absoluteExpire = $subkey = null;
        if ($json) {
            $userId = cb_at($json, "userId");
            $absoluteExpire = cb_at($json, "absoluteExpire");
            $subkey = cb_at($json, "subkey");
        }

        return new self($userId, $absoluteExpire, $subkey);
    }

    /**
     * Session key format:
     * <domainId>/<serviceName>/session/<userId>/<subKey>
     * Session key prefix:
     * <domainId>/<serviceName>
     *
     * @throws exception\SessionKeyNotFoundException
     * @return string
     */
    public function getGaroonSessionKey()
    {
        if (is_null($this->userId) || is_null($this->subkey)) {
            throw new SessionKeyNotFoundException();
        }

        return "{$this->userId}/{$this->subkey}";
    }

    /**
     * @param \Grn_UUM $uum
     *
     * @return \CB_User
     */
    public function getUser(\Grn_UUM $uum)
    {
        $user = $uum->getUserBySlashID($this->userId);

        //if could not get the user with provided slash id (not null) throw error
        if ( ! $user && ! is_null($this->userId)) {
            cb_throw_error(E_COMMON_ACCOUNT_INVALIDATED);
        }

        if (is_null($this->absoluteExpire)) {
            return $user;
        }

        if ( ! \CB_ISO8601Util::isISO8601($this->absoluteExpire)) {
            return false;
        }

        $expire = \CB_ISO8601Util::toUTCDateTime($this->absoluteExpire);
        if ($expire->compare(cb_timestamp_to_datetime(time(), "UTC")) <= 0) {
            return false;
        }

        return $user;
    }

}
