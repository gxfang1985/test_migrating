<?php

namespace grn\cydec\yrmcds;

require_once('fw/cydec.csp');

use grn\cydec\yrmcds\exception\SessionKeyNotFoundException;

/**
 * Class GaroonSessionClient
 *
 * @package grn\cydec\yrmcds
 */
class GaroonSessionClient
{
    static private $instance;
    /** @var \grn\cydec\yrmcds\SlashSessionClient */
    private $slashSessionClient;

    /**
     * @param SessionClient      $client
     * @param SlashSessionClient $slashSessionClient
     */
    private function __construct(
        SessionClient $client,
        SlashSessionClient $slashSessionClient
    ) {
        $this->client = $client;
        $this->slashSessionClient = $slashSessionClient;
    }

    /**
     * @var string $prefix session key prefix
     * session key format: <domainId>/garoon/session/<userId>/<subKey>
     * @see SlashSessionObject::getGaroonSessionKey generate session key
     * @return GaroonSessionClient
     */
    public static function getInstance()
    {
        if (self::$instance instanceof self) {
            return self::$instance;
        }

        $cydec = \CB_CyDECUtil::getInstance();
        $domainId = $cydec->getDomainID();
        $prefix = "{$domainId}/garoon/session/";
        self::$instance = new self($cydec->getYrmcdsSessionClient($prefix),
            SlashSessionClient::getInstance());

        return self::$instance;
    }

    /**
     * SlashSessionObjectを生成し、SessionKeyを算出する
     *
     * @param  string $id
     *
     * @return string
     */
    private function getSessionKey($id)
    {
        //ケータイ認証は、Slashを経由しないでガルーン独自で認証を行う
        //実装背景に関しては、http://wiki.dev.cybozu.co.jp/x/SoMmAQ 特殊な認証を必要とするアプリを参照すること
        if (cb_is_cellular_page()) {
            //キーの衝突を避けるために、cellular prefixを付与する
            return "cellular/{$id}";
        }
        $slashSessionObject = $this->slashSessionClient->getSessionObject($id);

        return $slashSessionObject->getGaroonSessionKey();
    }

    /**
     * @param  string $id
     *
     * @return bool
     */
    public function exist($id)
    {
        try {
            return $this->client->exist($this->getSessionKey($id));
        } catch (SessionKeyNotFoundException $e) {
            return false;
        }
    }

    /**
     * @param  string $id
     *
     * @return string
     */
    public function read($id)
    {
        try {
            return $this->client->read($this->getSessionKey($id));
        } catch (SessionKeyNotFoundException $e) {
            return "";
        }
    }

    /**
     * @param  string $id
     * @param  string $data
     * @param  bool   $locked
     *
     * @return bool
     */
    public function write($id, $data, $locked)
    {
        try {
            return $this->client->write($this->getSessionKey($id), $data,
                $locked);
        } catch (SessionKeyNotFoundException $e) {
            return false;
        }

    }

    /**
     * @param string $id
     *
     * @return bool
     */
    public function destroy($id)
    {
        try {
            return $this->client->destroy($this->getSessionKey($id));
        } catch (SessionKeyNotFoundException $e) {
            return false;
        }
    }

    /**
     * @param string $id
     *
     * @return \yrmcds\Response
     */
    public function lockGet($id)
    {
        $key = $this->getSessionKey($id);

        return $this->client->lockGet($key);
    }

    /**
     * @param \yrmcds\Response $response
     *
     * @return bool
     */
    public function isStatusLocked(\yrmcds\Response $response)
    {
        return $this->client->isStatusLocked($response);
    }

    /**
     * @param \yrmcds\Response $response
     *
     * @return bool
     */
    public function isStatusOK(\yrmcds\Response $response)
    {
        return $this->client->isStatusOK($response);
    }
} 
