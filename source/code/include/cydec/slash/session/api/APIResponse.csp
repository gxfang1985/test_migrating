<?php

namespace grn\cydec\slash\session\api;

use grn\grn\GrnException;

require_once("fw/cookie.csp");

/**
 * @see     http://wiki.dev.cybozu.co.jp/pages/viewpage.action?pageId=19314921
 * API実行後の後処理を担う
 * Class APIResponse
 * @package grn\grn\cydec\slash\api
 */
class APIResponse
{
    /** @var  array */
    private $headers;
    /** @var array */
    private $statusLine;
    /** @var string */
    private $body;

    /**
     * @param \CB_HttpClient $client
     *
     * @return APIResponse
     */
    public static function getInstance(\CB_HttpClient $client)
    {
        return new self($client);
    }

    /**
     * @throws \grn\grn\GrnException
     */
    public function handleLoginResponse()
    {

        if ($this->isSuccessRequest()) {
            $this->setSessionId();

            return;
        }
        $this->throwException();
    }

    /**
     * @throws \grn\grn\GrnException
     */
    public function handleLogoutResponse()
    {
        if ( ! $this->isSuccessRequest()) {
            $this->throwException();
        }
    }

    private function __construct(\CB_HttpClient $client)
    {
        $this->headers = $client->getHeaders();
        $this->statusLine = $client->getStatusLine();
        $this->body = $client->getBody();
    }

    /**
     * @return int
     */
    private function getStatusCode()
    {
        return (int)cb_at($this->statusLine, 'status-code', 500);
    }

    /**
     * @return mixed
     */
    private function getContentType()
    {
        $rawContentTypes = cb_at($this->headers, 'content-type', []);
        $contentTypes = [];
        foreach ($rawContentTypes as $rawContentType) {
            $contentTypes[] = preg_replace('/\s/', "", $rawContentType);
        }

        return $contentTypes;
    }

    /**
     * @throws \grn\grn\GrnException
     */
    private function throwException()
    {
        $body = json_decode($this->body, true);
        if ($body === null) {
            throw new GrnException();
        }

        if (isset($body["code"])) {
            $errorCode = cb_at($body, "code");

            $alternativeResources = [
                /* diagnosis      */
                0 => cb_at($body, "message", ""),
                /* cause          */
                1 => "",
                /* countermeasure */
                2 => "",
                /* developer_info */
                3 => "",
            ];

            cb_throw_error(
                $errorCode, //error code
                null,       // diagnosis
                null,       // cause
                null,       // counter
                null,       // develper
                $alternativeResources
            );
        }
        // スラッシュが返したエラーがよくわからないケース
        cb_throw_error();
    }

    /**
     * @return bool
     */
    private function isSuccessRequest()
    {

        if ($this->getStatusCode() !== 200) {
            return false;
        }

        if ( ! in_array('application/json;charset=utf-8',
            array_map('mb_strtolower', $this->getContentType()))
        ) {
            return false;
        }

        return true;
    }

    /**
     *
     * CB_HttpClientによってパースされたヘッダのset-cookieの中身を取得し、
     * {$sessionName}={$value}となっている$valueを返す.
     * array(
     *  'JSESSIONID=FlH09MdWHGypJGuUP8qWFRYqkNExqcXlKcFCrJNMUtz8JC3UrEFNKdtCfkvvo5nG;Path=/;Secure;HttpOnly',
     *  ' 01-Jan-1970 00:00:10 GMT; Path=/; HttpOnly',
     * )
     *
     * @var string $sessionName
     *
     * @param      $sessionName
     *
     * @throws \grn\grn\GrnException
     * @return \CB_Cookie
     */
    private function getCookieOf($sessionName)
    {
        $cookiesInHeader = cb_at($this->headers, 'set-cookie', []);
        foreach ($cookiesInHeader as $cookieString) {
            $cookie = new \CB_Cookie();
            $cookie->parse(null, null, $cookieString);
            if ($cookie->_name === $sessionName) {
                return $cookie;
            }
        }
        // SlashのAPIレスポンスは成功しているが、cookieの中にJSESSIONIDが存在しないケース
        // 通常は考えられないので、例外として扱う
        throw new GrnException();
    }

    /**
     * @return string
     */
    private function setSessionId()
    {
        $cookie = $this->getCookieOf(session_name());
        \CB_SessionManager::getInstance()->restart($cookie->_value);
    }

} 
