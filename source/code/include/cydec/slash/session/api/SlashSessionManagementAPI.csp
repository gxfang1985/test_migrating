<?php

namespace grn\cydec\slash\session\api;

require_once('fw/cydec.csp');

/**
 * @see     http://wiki.dev.cybozu.co.jp/pages/viewpage.action?pageId=19314921#Slash共通セッション認証独自クライアント-ログアウトAPI
 * Class SlashSessionManagementAPI
 * @package grn\grn\cydec\slash\api
 */
class SlashSessionManagementAPI
{
    private $loginAPIUri = '';
    private $logoutAPIUri = '';
    private $apiTimeout = 10;

    const HTTP_X_FORWARDED_FOR = 'HTTP_X_FORWARDED_FOR';
    const HTTP_X_CYBOZU_SECURE_ID = "HTTP_X_CYBOZU_SECURE_ID";
    const HTTP_USER_AGENT = 'HTTP_USER_AGENT';
    const HTTP_X_CYDEC_ACCESS_FROM = 'HTTP_X_CYDEC_ACCESS_FROM';

    /** @var \CB_HttpClient */
    private $client;
    /** @var string en,zh,ja */
    private $acceptLanguage = "";

    /**
     * @param string $locale en,zh,ja
     *
     * @return SlashSessionManagementAPI
     */
    public static function getInstance($locale)
    {
        global $G_container_base;
        /** @var \CB_HttpClient $httpClient */
        $httpClient = $G_container_base->getInstance('http_client');
        $myself = new self($httpClient);
        $myself->acceptLanguage = $locale;

        return $myself;
    }

    /**
     * @param \CB_HttpClient $client
     */
    private function __construct(\CB_HttpClient $client)
    {
        $forest_config = \CB_ForestUtil::getConfig();
        $host = $forest_config->get('slash', 'host');
        $port = $forest_config->get('slash', 'port');
        $this->loginAPIUri
            = "http://{$host}:{$port}/batch/api/session/federation/v1/login.json";
        $this->logoutAPIUri
            = "http://{$host}:{$port}/batch/api/session/federation/v1/logout.json";

        $this->client = $client;
    }

    /**
     * ログイン・ログアウトに共通するヘッダーを作成する
     *
     * @return array
     */
    private function getAPIHeader()
    {
        return [
            'Content-Type: application/json',
            'X-Forwarded-For: ' . cb_at($_SERVER, self::HTTP_X_FORWARDED_FOR),
            'X-CYDEC-DOMAIN: ' . \CB_CyDECUtil::getInstance()->getDomainID(),
            cb_get_request_id_header(),
            'Accept-Language: ' . $this->acceptLanguage,
        ];
    }

    /**
     * @return array
     */
    private function getLoginAPIHeader()
    {
        return [
            'X-Cybozu-Secure-Id: ' . cb_at($_SERVER,
                self::HTTP_X_CYBOZU_SECURE_ID),
            'User-Agent: ' . cb_at($_SERVER, self::HTTP_USER_AGENT),
            'X-CYDEC-ACCESS-FROM: ' . cb_at($_SERVER,
                self::HTTP_X_CYDEC_ACCESS_FROM),
        ];

    }

    /**
     * @param        $account
     * @param string $password
     */
    public function login($account, $password)
    {
        $headers = array_merge($this->getAPIHeader(),
            $this->getLoginAPIHeader());
        $body = [
            "username" => $account,
            "password" => $password
        ];
        $this->client->setCurlOption(CURLOPT_HTTPHEADER, $headers);
        $this->client->setCurlOption(CURLOPT_POSTFIELDS, json_encode($body));
        $this->client->setCurlOption(CURLOPT_TIMEOUT, $this->apiTimeout);
        if ( ! $this->client->execute($this->loginAPIUri)) {
            cb_throw_error();
        }

        $response = APIResponse::getInstance($this->client);
        $response->handleLoginResponse();
    }


    public function logout()
    {
        $headers = $this->getAPIHeader();
        $this->client->setCurlOption(CURLOPT_COOKIE,
            session_name() . "=" . session_id());
        $this->client->setCurlOption(CURLOPT_HTTPHEADER, $headers);
        $this->client->setCurlOption(CURLOPT_POSTFIELDS,
            json_encode(new \stdClass));
        $this->client->setCurlOption(CURLOPT_TIMEOUT, $this->apiTimeout);
        if ( ! $this->client->execute($this->logoutAPIUri)) {
            cb_throw_error();
        }

        $response = APIResponse::getInstance($this->client);
        $response->handleLogoutResponse();
    }
} 
