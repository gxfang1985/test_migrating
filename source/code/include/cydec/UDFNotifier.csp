<?php

namespace grn\cydec;

require_once('grn/MySQLConfiguration.csp');


use grn\grn\MySQLConfiguration;


class UDFNotifier
{
    /** @var  \CB_DatabaseConnection */
    private $db;

    /**
     * constructor
     *
     * @return UDFNotifier
     */
    public static function create()
    {
        return new self();
    }

    /**
     * prohibit override.
     */
    private function __construct()
    {
        $this->db = cb_get_app_db("job");
    }

    /**
     * @return string name of notifier library file
     * linux   ==> notifier.so
     * windows ==> notifier.dll
     */
    private function nameOfNotifierLibFile()
    {
        return sprintf("notify.%s", PHP_SHLIB_SUFFIX);
    }

    /**
     * @param MySQLConfiguration $configuration
     *
     * @return string getFullPath of notifier library.
     */
    public function getUDFNotifierPath(MySQLConfiguration $configuration)
    {
        return implode(DIRECTORY_SEPARATOR, [
            $configuration->getPluginDirectory(),
            $this->nameOfNotifierLibFile()
        ]);
    }

    /**
     * @param MySQLConfiguration $configuration
     *
     * @return bool check file exists.
     */
    public function validateUDFNotifierExists(MySQLConfiguration $configuration)
    {
        return is_file($this->getUDFNotifierPath($configuration));
    }

    /**
     * @param MySQLConfiguration $configuration
     *
     * @return bool check file readable.
     */
    public function validateUDFNotifierReadable(
        MySQLConfiguration $configuration
    ) {
        return is_readable($this->getUDFNotifierPath($configuration));
    }

    /**
     * execute (multiple) query
     *
     * @param $queries
     */
    private function query(array $queries)
    {
        foreach ($queries as $eachQuery) {
            $this->db->query($eachQuery);
        }
    }

    /**
     * enable UDF notifier
     * install interface UDF, trigger and event.
     */
    public function enable($password)
    {
        $this->dropNotifier($password);
        $query = sprintf('CREATE FUNCTION notify RETURNS int SONAME "%s"',
            $this->nameOfNotifierLibFile());
        $this->db->query_mysqldb($query, "cbroot", $password);
        $sqls = [
            $this->getSqlDisableTrigger(),
            $this->getSqlDisableEvent(),
            $this->getSqlEnableTrigger(),
            $this->getSqlEnableEvent(),
        ];
        $this->query($sqls);
    }

    /**
     * disable UDF notifier
     * delete interface UDF,trigger, and event
     */
    public function disable($password)
    {
        $this->dropNotifier($password);
    }

    /**
     * query of drop notifier,trigger,event
     */
    private function dropNotifier($password)
    {
        $this->db->query_mysqldb("DROP FUNCTION IF EXISTS notify", "cbroot",
            $password);
        $sqls = [
            $this->getSqlDisableTrigger(),
            $this->getSqlDisableEvent(),
        ];
        $this->query($sqls);
    }

    /**
     * @param int $interval_minute
     *
     * @return string
     */
    private function getSqlEnableEvent(int $interval_minute = 5)
    {
        return "
            CREATE EVENT scheduled_notifier
            ON SCHEDULE EVERY $interval_minute MINUTE
            STARTS CURRENT_TIMESTAMP + INTERVAL FLOOR(RAND()*$interval_minute*60) SECOND
            DO
            BEGIN
            SET @ret = notify( DATABASE(), 1 );
            END
        ";
    }

    /**
     * @return string
     */
    private function getSqlDisableEvent()
    {
        return 'DROP EVENT IF EXISTS scheduled_notifier';
    }

    /**
     * @return string
     */
    private function getSqlEnableTrigger()
    {
        return '
            CREATE TRIGGER notify_to_worker BEFORE INSERT ON _queue
            FOR EACH ROW
            BEGIN
            SET @ret = notify( DATABASE() );
            END
        ';
    }

    /**
     * @return string
     */
    private function getSqlDisableTrigger()
    {
        return 'DROP TRIGGER IF EXISTS notify_to_worker';
    }
}
