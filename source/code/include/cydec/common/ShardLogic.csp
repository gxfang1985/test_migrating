<?php

namespace grn\cydec\common;

class ShardLogic
{
    private static $difinitionsCache = [];

    /**
     * @param $path     string  file path (ex. /usr/local/cydec/conf/dev/blob.json)
     * @param $shardKey int
     *
     * @return ShardLocationInterface
     */
    public function getShardLocation($path, $shardKey)
    {
        $definitions = $this->getDefinitions($path);

        return $this->getShardFor($definitions, $shardKey);
    }

    /**
     * @param string $path
     *
     * @return array
     */
    private function getDefinitions($path)
    {
        $definitions = $this->getDefinitionsCache($path);

        if (is_null($definitions)) {
            $json = file_get_contents($path);
            if ($json === false) {
                die("Could not read " . $path);
            }
            $definitions = json_decode($json, true);
            if ($definitions === null
                || ( ! array_key_exists('map', $definitions))
            ) {
                die("Invalid " . $path
                    . " contents: there is no parameter 'map'.");
            }

            ksort($definitions['map'], SORT_NUMERIC);
            $this->setDefinitionsCache($path, $definitions);
        }

        return $definitions;
    }

    /**
     * @param $definitions
     * @param $shardKey
     *
     * @return ShardLocationInterface
     */
    private function getShardFor($definitions, $shardKey)
    {
        assert('0 <= $shardKey');
        assert('$shardKey < 360');

        $keyIndex = 0;
        foreach ($definitions['map'] as $index => $location) {
            if ($keyIndex <= $shardKey && $shardKey < $index) {
                break;
            }
            $keyIndex = $index;
        }

        // TODO: if a shard includes multiple servers
        $definition = $definitions['map'][$keyIndex][0];

        return new ShardLocation($definition['host'], $definition['port']);
    }

    /**
     * @param string $key
     * @param array  $definitions
     */
    private function setDefinitionsCache($key, $definitions)
    {
        self::$difinitionsCache[$key] = $definitions;
    }

    /**
     * @param string $key
     *
     * @return array|null
     */
    private function getDefinitionsCache($key)
    {
        if (isset(self::$difinitionsCache[$key])) {
            return self::$difinitionsCache[$key];
        }

        return null;
    }
}
