<?php
/**
 * @brief    Timecardコントローラユーティリティー
 * @author   Yoshiaki Tanaka
 * @date     2005/03/23
 * @par      Copyright (c) 2004 Cybozu,Inc. All rights reserved .
 * @package  grn.timecard
 */

require_once('grn/controller.csp');


/**
 * @package grn.timecard
 */
class GRN_Timecard_ControllerUtil extends GRN_ControllerUtil
{

    function __construct($page = null)
    {
        parent::__construct($page);
    }

    /**
     * 一覧開始位置を取得する
     */
    function getListOffset()
    {
        if ($this->_page != cb_get_pagename()) {
            // ページが異なる場合は引き数をチェックせず、セッションを参照するだけ
            $session =& $this->getSession();
            $sp = $session->get('current_start_position');
            if ($sp == null) {
                $sp = 0;
            }

            return $sp;
        }

        $sp = $this->getNaviStartPosition();

        // セッションへ記録
        $this->setNaviStartPosition($sp);

        return $sp;
    }

    function getClassOfDay($date)
    {
        switch ($date->getDayOfWeek()) {
            case 0:         // 日曜
                return 's_date_sunday';
                break;
            case 1:         // 月曜
                //return 's_date_monday';
                break;
            case 2:         // 火曜
                //return 's_date_tuesday';
                break;
            case 3:         // 水曜
                //return 's_date_wednesday';
                break;
            case 4:         // 木曜
                //return 's_date_thursday';
                break;
            case 5:         // 金曜
                //return 's_date_friday';
                break;
            case 6:        // 土曜日
                return 's_date_saturday';
                break;
        }

        return 's_date';
    }

    /**
     * 設定値を取得する
     */
    function getConfigValues()
    {
        require_once('timecard/application.csp');
        $app = GRN_Timecard::getInstance();
        $config = $app->getSystemConfig();

        $values = [
            'absence_max'          => $config->getAbsenceMax(),
            'absence_limit'        => $config->getAbsenceLimit(),
            'enable_modify_record' => $config->getEnableModifyRecord(),
            'enable_auto_punchout' => $config->getEnableAutoPunchOut(),
            'offset_day'           => $config->getOffsetDay(),
            'offset_month'         => $config->getOffsetMonth(),
        ];

        $absence_max_list = [];
        for ($i = 0; $i < $values['absence_max']; $i++) {
            $absence_max_list[$i] = $i;
        }

        $values['absence_max_list'] = $absence_max_list;

        $tm = $config->getChangeOfDay();

        $values['change_of_day'] = [
            'hour'   => $tm->hour,
            'minute' => $tm->minute,
            'second' => $tm->second
        ];

        return $values;
    }


    /**
     * サイトポジションをSmarty変数に設定する
     */
    function setSitePosition(& $smarty, $page_path, $current_page = null)
    {
        assert('$smarty');

        if (is_null($current_page)) {
            $page_title = grn_get_current_page_display_name();
        } else {
            if (strncmp($current_page, 'name:', 5) == 0) {
                $page_title = substr($current_page, 5);
            } else {
                $page_title = grn_get_page_display_name($current_page);
            }
        }

        $smarty->assign('app_id', 'timecard');
        $smarty->assign('page_title', $page_title);

        $positions = [];
        if ($page_path) {
            foreach ($page_path as $page => $args) {
                // サイトポジションで一覧に戻るときは常に一覧状態を復元する
                $base = basename($page);
                if ($base == 'index' || strpos($base, 'list') !== false) {
                    $args['sf'] = 1;
                }
                $positions[] = ([
                                    'page' => $page,
                                    'name' => grn_get_page_display_name($page)
                                ] + $args);
            }
        }
        $positions[] = ['page' => "", 'name' => $page_title];

        $smarty->assign('site_position', $positions);
    }

    /**
     * @access private
     */
    function _timestamp2time($ts)
    {
        if ($ts) {
            if ( ! is_a($ts, 'cb_timestampex')) {
                require_once('fw/date.csp');
                $ts = new CB_TimeStampEx($ts);
            }

            return $ts->getTime();
        }
    }

    /**
     * 不在レコードの表示データを取得する
     */
    function getAbsenceRecordView(& $record, $time_value = false)
    {
        if ( ! $record) {
            return null;
        }

        if ($time_value) {
            return [
                'id'      => $record->getOID(),
                'trip'    => $this->_timestamp2time($record->get('out')),
                'trip_ip' => $record->get('reserve_text3'),
                'back'    => $this->_timestamp2time($record->get('in')),
                'back_ip' => $record->get('reserve_text2')
            ];
        }

        return [
            'id'      => $record->getOID(),
            'trip'    => $record->get('out'),
            'trip_ip' => $record->get('reserve_text3'),
            'back'    => $record->get('in'),
            'back_ip' => $record->get('reserve_text2')
        ];
    }

    /**
     * レコードの表示データを取得する
     */
    function getRecordView(& $record, $time_value = false)
    {
        $for_view = [];

        if ( ! is_null($record)) {
            $date = $record->get('date');

            if ($time_value) {
                $for_view = [
                    'date'      => $date->format(),
                    'start'     => $this->_timestamp2time($record->get('in')),
                    'start_ip'  => $record->get('reserve_text2'),
                    'finish'    => $this->_timestamp2time($record->get('out')),
                    'finish_ip' => $record->get('reserve_text3'),
                    'remarks'   => $record->get('description')
                ];
            } else {
                $for_view = [
                    'date'      => $date->format(),
                    'start'     => $record->get('in'),
                    'start_ip'  => $record->get('reserve_text2'),
                    'finish'    => $record->get('out'),
                    'finish_ip' => $record->get('reserve_text3'),
                    'remarks'   => $record->get('description')
                ];
            }
        }

        require_once('timecard/config.csp');
        $config = GRN_Timecard_SystemConfig::getInstance();
        $absence_max = $config->getAbsenceMax();

        if ($absence_max > 0) {
            $absences_for_view = [];

            if ( ! is_null($record)) {
                $absences = $record->listAbsenceRecords();

                foreach (array_keys($absences) as $key) {
                    if (count($absences_for_view) >= $absence_max) {
                        break;
                    }
                    $absences_for_view[]
                        = $this->getAbsenceRecordView($absences[$key],
                        $time_value);
                }
            }

            for ($i = count($absences_for_view); $i < $absence_max; ++$i) {
                //Illegal string offset workaround
                $absences_for_view[] = [];
            }

            $for_view['absences'] = $absences_for_view;
        }

        return $for_view;
    }
}


