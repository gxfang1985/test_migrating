<?php
/**
 * @brief
 * @author   Yoshiaki Tanaka
 * @date     2005/03/23
 * @par      Copyright (c) 2004 Cybozu,Inc. All rights reserved .
 * @package  grn.timecard
 */


require_once('fw/database.csp');
require_once('grn/application.csp');

/**
 * 出社・退社・備考の記録
 *
 * @class    GRN_Timecard_Record
 */
class GRN_Timecard_Record extends CB_PersistentBase
{
    var $_app_id = 'timecard';

    //! レコードの所有ユーザー
    var $col_user
        = [
            'type'                  => 'relation',
            'to'                    => 'CB_User',
            'no_foreign_key_create' => true
        ];

    //! 出社時刻
    var $col_in = ['type' => 'timestamp'];

    //! 退社時刻
    var $col_out = ['type' => 'timestamp'];

    //! 日付
    var $col_date = ['type' => 'date'];

    //! タイムゾーン
    var $col_timezone = ['type' => 'char', 'length' => 100];

    //! 備考
    var $col_description = ['type' => 'char', 'length' => 65355];

    var $idx_u_d = ['cols' => ['user', 'date'], 'unique' => true];

    // 予備カラム
    var $col_reserve_text1 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text2 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text3 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_int1 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int2 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int3 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_blob1 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob2 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob3 = ['type' => 'blob', 'lazy' => true];


    function __construct(& $row)
    {
        parent::__construct($row);
    }


    function getRecordedValues()
    {
        $values = [];

        $values['in'] = $this->get('in');
        $values['out'] = $this->get('out');

        $values['absences'] = [];

        $table =& cb_class2table('GRN_Timecard_AbsenceRecord');
        //for escape
        $db = $table->getDBConnection();
        $rowset = new CB_RowSet($table);
        //$rowset->addCondition( 'col_record = '.$this->getOID() );
        //escape !
        $rowset->addCondition('col_record = \'' . $db->escape($this->getOID())
                              . '\'');
        $rowset->addOrderColumn('col_out', false);

        while ( ! is_null(($row = $rowset->iterate()))) {
            $o = $this->get('out');
            $i = $this->get('in');

            $values['absences'][] = [
                'out' => $row->get('out'),
                'in'  => $row->get('in')
            ];
        }
        $rowset->destroy();

        return $values;
    }


    /**
     * 設定値が正当な値がどうか調べる
     */
    function validate()
    {
        require_once('timecard/validation.csp');

        return grn_timecard_validate_record($this);
    }

    function getNumAbsenceRecors()
    {
        $table =& cb_class2table('GRN_Timecard_AbsenceRecord');
        //for escape
        $db = $table->getDBConnection();
        $rowset = new CB_RowSet($table);
        //$rowset->addCondition( 'col_record = '.$this->getOID() );
        //escape !
        $rowset->addCondition('col_record = \'' . $db->escape($this->getOID())
                              . '\'');
        $rowset->applyGroupFunctions(['count' => 'COUNT(*)']);
        $result = $rowset->iterate();
        $rowset->destroy();

        return $result['count'];
    }

    function listAbsenceRecords($order = false)
    {
        $table = cb_class2table('GRN_Timecard_AbsenceRecord');
        //for escape
        $db = $table->getDBConnection();
        $rowset = new CB_RowSet($table);
        //$rowset->addCondition( 'col_record = '.$this->getOID() );
        //escape !
        $rowset->addCondition('col_record = \'' . $db->escape($this->getOID())
                              . '\'');
        $rowset->addOrderColumn('col_out', $order);

        $absences = [];
        while ( ! is_null(($row = $rowset->iterate()))) {
            $absences[$row->getOID()] = $row;
        }
        $rowset->destroy();

        return $absences;
    }

    function getLastAbsenceRecord()
    {
        $table = cb_class2table('GRN_Timecard_AbsenceRecord');
        //for escape
        $db = $table->getDBConnection();
        $rowset = new CB_RowSet($table);
        //$rowset->addCondition( 'col_record = '.$this->getOID() );
        //escape !
        $rowset->addCondition('col_record = \'' . $db->escape($this->getOID())
                              . '\'');
        $rowset->addOrderColumn('col_out', true);
        $rowset->limit(0, 1);
        $row = $rowset->iterate();
        $rowset->destroy();

        return $row;
    }

    function getAbsenceRecord($ts)
    {
        if (is_null($ts) || ! is_a($ts, 'cb_timestamp')) {
            $___ret = null;

            return $___ret;
        }

        $table = cb_class2table('GRN_Timecard_AbsenceRecord');
        //for escape
        $db = $table->getDBConnection();
        $rowset = new CB_RowSet($table);

        $conditions = [];
        //escape!
        $conditions[] = 'col_record = \'' . $this->getOID() . '\'';
        $conditions[] = 'col_out >= \'' . $ts->unix_ts . '\'';
        $conditions[] = '(col_in IS NULL OR col_in <= \'' . $ts->unix_ts
                        . '\')';

        $rowset->addCondition(implode(' AND ', $conditions));
        $row = $rowset->iterate();
        $rowset->destroy();

        return $row;
    }
}

/**
 * 外出・復帰の記録
 *
 * @class    GRN_Timecard_AbsenceRecord
 */
class GRN_Timecard_AbsenceRecord extends CB_PersistentBase
{
    var $_app_id = 'timecard';

    //! 日付登録へのリレーション
    var $col_record
        = [
            'type'   => 'relation',
            'to'     => 'GRN_Timecard_Record',
            'suffix' => true
        ];

    //! 外出時刻
    var $col_out = ['type' => 'timestamp'];

    //! 復帰時刻
    var $col_in = ['type' => 'timestamp'];

    //! メモ
    var $col_description
        = [
            'type'   => 'char',
            'length' => 65355,
            'lazy'   => true
        ];

    var $idx_i_o = ['cols' => ['in', 'out']];

    // 予備カラム
    var $col_reserve_text1 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text2 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text3 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_int1 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int2 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int3 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_blob1 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob2 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob3 = ['type' => 'blob', 'lazy' => true];


    function __construct(& $row)
    {
        parent::__construct($row);
    }

}


