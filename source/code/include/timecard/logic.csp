<?php
/**
 * @brief    Timecardビジネスロジック
 * @author   Yoshiaki Tanaka
 * @date     2005/03/23
 * @par      Copyright (c) 2004 Cybozu,Inc. All rights reserved .
 * @package  grn.timecard
 */

require_once('timecard/table.csp');
require_once('timecard/application.csp');


define('GRN_TIMECARD_RECORD_IN', 1);
define('GRN_TIMECARD_RECORD_OUT', 2);
define('GRN_TIMECARD_ABSENCE_IN', 4);
define('GRN_TIMECARD_ABSENCE_OUT', 8);
define('GRN_TIMECARD_AUTO_PUNCHOUT', 16);
define('GRN_TIMECARD_RECORD_MODIFY', 32);
define('GRN_TIMECARD_RECORD_DELETE', 64);


/**
 * @package grn.timecard
 */
class GRN_Timecard_Logic
{
    private static $_instance = null;

    /**
     * @static
     * @return GRN_Timecard_Logic
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    function __construct()
    {
    }


    /**
     * 最終アクセス時刻を更新
     */
    function updateLastAccess(& $user, $ts = null)
    {
        require_once('timecard/last_access.csp');
        grn_timecard_update_last_access($user, $ts);
    }


    /**
     * 最終アクセス時刻を取得する
     */
    function getLastAccess($user)
    {
        require_once('timecard/last_access.csp');

        return grn_timecard_get_last_access($user);
    }


    /**
     * タイムスタンプは日付変更時刻を過ぎているか
     */
    function isToday($ts)
    {
        if ( ! is_a($ts, 'CB_TimeStampEx')) {
            assert('is_null($ts)');
            require_once('fw/date.csp');
            $ts = new CB_TimeStampEx($ts);
        }

        static $change_of_day = null;

        if (is_null($change_of_day)) {
            require_once('timecard/config.csp');
            $config = GRN_Timecard_SystemConfig::getInstance();
            $change_of_day = $config->getChangeOfDay();
        }

        $tm = $ts->getTime();

        return $tm->compare($change_of_day) >= 0;
    }


    /**
     * レコードの取得
     */
    function getRecord($user, $date = null, $throw_error = false)
    {
        if ( ! is_a($user, 'CB_User') || ! is_a($date, 'CB_Date')) {
            if ($throw_error) {
                require_once('timecard/error_code.csp');
                cb_throw_error(E_GRN_TIMECARD_INTERNAL);
            }

            {
                $___ret = null;

                return $___ret;
            }
        }

        $table = cb_class2table('GRN_Timecard_Record');
        //for escape!
        $db = $table->getDBConnection();
        $rowset = new CB_RowSet($table);
        //$rowset->addCondition( 'col_user = '.$user->getOID().' AND col_date = \''.$date->format().'\'' );
        //escape!
        $rowset->addCondition('col_user = \'' . $db->escape($user->getOID())
                              . '\' AND col_date = \''
                              . $db->escape($date->format()) . '\'');
        $row = $rowset->iterate();
        $rowset->destroy();

        if (is_null($row)) {
            if ($throw_error) {
                require_once('timecard/error_code.csp');
                cb_throw_error(E_GRN_TIMECARD_RECORD_NOT_FOUND);
            }
        }

        return $row;
    }

    function getPreviousRecord($user, $date)
    {
        if ( ! is_a($user, 'CB_User') || ! is_a($date, 'CB_Date')) {
            {
                $___ret = null;

                return $___ret;
            }
        }

        $table = cb_class2table('GRN_Timecard_Record');
        //for escape
        $db = $table->getDBConnection();
        $rowset = new CB_RowSet($table);
        //$rowset->addCondition( 'col_user = '.$user->getOID().' AND col_date < \''.$date->format().'\'' );
        $rowset->addCondition('col_user = \'' . $user->getOID()
                              . '\' AND col_date < \'' . $date->format()
                              . '\'');
        $rowset->addOrderColumn('col_date', true);
        $rowset->limit(0, 1);
        $rowset->setLock(CB_DATABASE_NO_LOCK);
        $row = $rowset->iterate();
        $rowset->destroy();

        return $row;
    }


    /**
     * レコードの生成
     *
     * @param      $user
     * @param null $ts
     *
     * @return GRN_Timecard_Record
     */
    function createRecord($user, $ts = null)
    {
        if ( ! is_a($user, 'CB_User')) {
            require_once('timecard/error_code.csp');
            cb_throw_error(E_GRN_TIMECARD_INTERNAL);
        }

        $table = cb_class2table('GRN_Timecard_Record');
        $row = $table->newRow();
        $row->set('user', $user);

        require_once('fw/i18n.csp');
        $i18n = CB_I18N::getInstance();
        $row->set('timezone', $i18n->getCurrentTimezone());

        if (is_a($ts, 'cb_date')) {
            $row->set('date', $ts);
        } else {
            if ( ! is_null($ts) && ! is_a($ts, 'CB_TimeStamp')) {
                require_once('timecard/error_code.csp');
                cb_throw_error(E_GRN_TIMECARD_INTERNAL);
            }

            if ( ! is_a($ts, 'CB_TimeStampEx')) {
                require_once('fw/date.csp');
                $ts = new CB_TimeStampEx($ts);
            }

            $date = $ts->getDate();

            if ( ! $this->isToday($ts)) {
                $date->moveDays(-1);
            }

            $row->set('date', $date);
        }

        if (is_a($ts, 'CB_TimeStamp')) {
            $this->_onSetIn($user, $row->get('date'));

            // 出社
            $row->set('in', $ts);
            $row->set('reserve_text2', GRN_Timecard::getIPAddress());

            // 最終アクセス時刻を合わせる
            $this->updateLastAccess($user, $ts);
        }
        $row->registerNow();

        return $row;
    }

    /**
     * 不在レコード生成
     */
    function createAbsenceRecord(& $record, $ts = null, $is_system = false)
    {
        if ( ! $record) {
            require_once('timecard/error_code.csp');
            cb_throw_error(E_GRN_TIMECARD_INTERNAL);
        }

        if (is_null($ts)) {
            $ts = new CB_TimeStamp();
            $ts->unix_ts = time();
        }

        if ( ! is_a($ts, 'CB_TimeStamp')) {
            require_once('timecard/error_code.csp');
            cb_throw_error(E_GRN_TIMECARD_INTERNAL);
        }

        if ( ! is_null($row = $record->getAbsenceRecord($ts))) {
            // 最終アクセス時刻を合わせる
            $user = $record->get('user');
            $this->updateLastAccess($user, $ts);

            return $row;
        }

        $table = cb_class2table('GRN_Timecard_AbsenceRecord');
        $user = $record->get('user');
        $row = $table->newRow();
        $row->set('record', $record);
        $row->set('out', $ts);
        if ( ! $is_system) {
            $row->set('reserve_text3', GRN_Timecard::getIPAddress());
        }
        $row->registerNow();

        // 最終アクセス時刻を合わせる
        //$user =& $record->get('user');
        $this->updateLastAccess($user, $ts);

        return $row;
    }


    /**
     * 出社時刻を打刻したときの処理
     */
    function _onSetIn(& $user, $date)
    {
        assert('is_a($user, "CB_User")');
        assert('is_a($date, "CB_Date")');

        // 前のレコードがなければ何もしない
        if (is_null(($record = $this->getPreviousRecord($user, $date)))) {
            return true;
        }

        // 出社時刻がない場合は何もしない
        if (is_null($record->get('in'))) {
            return true;
        }

        // 退社時刻がある場合は何もしない
        if ( ! is_null($record->get('out'))) {
            return true;
        }

        $ts = $this->getLastAccess($user);

        require_once('fw/date.csp');
        $ts = new CB_TimeStampEx($ts);

        $compare_date = $ts->getDate();

        if ( ! $this->isToday($ts)) {
            $compare_date->moveDays(-1);
        }

        $record_date = $record->get('date');

        // 最終アクセス時刻が最終レコードと同日かどうかチェック
        if ($compare_date->compare($record_date) != 0) {
            return true;
        }


        $this->_onSetOut($record, $ts);

        // 前日の退社時刻を最終アクセス時刻に設定
        $record->set('out', $ts);
        $record->set('reserve_text3', GRN_Timecard::getIPAddress());

        return true;
    }

    /**
     * 退社時刻を打刻したときの処理
     */
    function _onSetOut(& $record, $ts)
    {
        assert('is_a($record, "GRN_Timecard_Record")');

        if (is_null(($last = $record->getLastAbsenceRecord()))) {
            // 外出の記録がなければ何もしない
            return true;
        }

        // 外出から復帰していない場合は退社時刻を復帰時刻にセット
        if ( ! is_null($last->get('out')) && is_null($last->get('in'))) {
            $last->set('in', $ts);
            $last->set('reserve_text2', GRN_Timecard::getIPAddress());
            $user = $record->get('user');
            $this->_loadHooks($user, GRN_TIMECARD_ABSENCE_IN, $record, $last);
        }

        return true;
    }

    /**
     * イベント発生時のプラグイン呼び出し
     */
    function _loadHooks(& $user, $method, & $record, & $absence)
    {
        /*
         * タイムカード打刻でプラグインの呼び出しをしたいならコメントをはずす

        $plugin = new CB_PluginLoader( 'grn.timecard.' );
        $hooks = $plugin->loadHooks();
        foreach( $hooks as $hook ) $hook( $user, $method, $record, $absence );
        */
    }

    function _onEvent(& $record, $method)
    {
        /*
        assert( 'is_a($record, "GRN_Timecard_Record")' );
        $user =& $record->get('user');
        $dummy = null;
        $this->_loadHooks( $user, $method, $record, $dummy );
        */
    }

    /**
     * レコード変更時の呼び出し
     */
    function onModify(& $record)
    {
        $this->_onEvent($record, GRN_TIMECARD_RECORD_MODIFY);
    }

    /**
     * レコード削除時の呼び出し
     */
    function onDelete(& $record)
    {
        $this->_onEvent($record, GRN_TIMECARD_RECORD_DELETE);
    }

    /**
     * 打刻
     */
    function punchOut(& $user, $method = GRN_TIMECARD_AUTO_PUNCHOUT, $ts = null)
    {
        if ( ! $user) {
            return false;
        }

        if ( ! is_a($ts, 'CB_TimeStampEx')) {
            if ( ! is_null($ts) && ! is_a($ts, 'CB_TimeStamp')) {
                require_once('timecard/error_code.csp');
                cb_throw_error(E_GRN_TIMECARD_INTERNAL);
            }

            require_once('fw/date.csp');
            $ts = new CB_TimeStampEx($ts);
        }

        $date = $ts->getDate();

        if ( ! $this->isToday($ts)) {
            $date->moveDays(-1);
        }

        $dummy_absence = null;

        if (is_null(($record = $this->getRecord($user, $date)))) {
            switch ($method) {
                case GRN_TIMECARD_AUTO_PUNCHOUT:       // 自動打刻
                case GRN_TIMECARD_RECORD_IN:           // 出社
                    if (is_null($record = $this->createRecord($user, $ts))) {
                        return false;
                    }
                    $this->_loadHooks($user, GRN_TIMECARD_RECORD_IN, $record,
                        $dummy_absence);
                    break;
                case GRN_TIMECARD_RECORD_OUT:   // 退社
                case GRN_TIMECARD_ABSENCE_OUT:  // 外出
                case GRN_TIMECARD_ABSENCE_IN:   // 復帰
                    break;
                default:
                    return false;
            }
        } else {
            switch ($method) {
                case GRN_TIMECARD_AUTO_PUNCHOUT: // 自動打刻
                case GRN_TIMECARD_RECORD_IN:     // 出社
                    if ( ! $record->get('in')) {
                        $this->_onSetIn($user, $record->get('date'));
                        $record->set('in', $ts);
                        $record->set('reserve_text2',
                            GRN_Timecard::getIPAddress());
                        $this->_loadHooks($user, GRN_TIMECARD_RECORD_IN,
                            $record, $dummy_absence);
                    }
                    break;
                case GRN_TIMECARD_RECORD_OUT:  // 退社

                    if ($record->get('out')) {
                        return false;
                    }

                    $this->_onSetOut($record, $ts);
                    $record->set('out', $ts);
                    $record->set('reserve_text3', GRN_Timecard::getIPAddress());
                    $this->_loadHooks($user, $method, $record, $dummy_absence);
                    break;
                case GRN_TIMECARD_ABSENCE_OUT: // 外出
                    if (is_null(($absence = $record->getLastAbsenceRecord()))) {
                        if (is_null(($absence
                            = $this->createAbsenceRecord($record, $ts)))
                        ) {
                            return false;
                        }
                        $this->_loadHooks($user, $method, $record, $absence);
                    } else {
                        if ( ! is_null($absence->get('in'))) {
                            if (is_null(($absence
                                =& $this->createAbsenceRecord($record, $ts)))
                            ) {
                                return false;
                            }
                            $this->_loadHooks($user, $method, $record,
                                $absence);
                        }
                    }
                    break;
                case GRN_TIMECARD_ABSENCE_IN: // 復帰
                    if ( ! is_null(($absence
                        =& $record->getLastAbsenceRecord()))
                    ) {
                        if (is_null($absence->get('in'))) {
                            $absence->set('in', $ts);
                            $absence->set('reserve_text2',
                                GRN_Timecard::getIPAddress());
                            $this->_loadHooks($user, $method, $record,
                                $absence);
                        }
                    }
                    break;
                default:
                    return false;
            }
        }

        $this->updateLastAccess($user);

        return true;
    }


    /**
     * 指定日付の間で記録をリストアップする
     */
    function listRecords(& $user, $start_date = null, $end_date = null)
    {
        require_once('timecard/list.csp');

        return grn_timecard_list_records($user, $start_date, $end_date);
    }

    /**
     * ユーザーの1ヶ月分の記録を書き出す
     */
    function exportCSV(& $user, & $writer, $start_date = null, $end_date = null)
    {
        require_once('timecard/include_export.csp');

        return grn_timecard_export_csv($user, $writer, $start_date, $end_date);
    }
}


