<?php

/**
 * Inspection for TimeCard
 *
 * @create  2007/06
 * @version 1.0
 * @package grn.timecard
 */
class GRN_Timecard_Inspection extends CB_ModuleBase
{
    private static $_instance = null;

    /**
     * @static
     * @return GRN_Timecard_Inspection
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    var $_logger = null;

    var $_uum = null;

    function __construct()
    {
        require_once('grn/logger.csp');
        $logger_manager = CB_LoggerManager::getInstance();

        parent::__construct('grn.timecard');

        $this->_logger =& $logger_manager->getLogger($this->getModuleId());
        global $G_container_base;
        $this->_uum =& $G_container_base->getInstance('uum');
    }

    function isEnabled()
    {
        return $this->_logger->isNoticeEnabled();
    }

    function record(&$record, $prev_values)
    {
        require_once('fw/date.csp');

        $log_msg = '[modify] record ';
        $log_msg .= "(uid:" . $record->getId('user') . ", id:"
                    . $record->getOID();

        if (($date = $record->get('date'))) {
            $date = sprintf('%02d/%02d/%02d', $date->year % 100,
                $date->month, $date->day);
            $log_msg .= ", date:" . $date;
        }

        $msg1 = $this->_createMessage($prev_values, 'src');
        if ($msg1) {
            $log_msg .= ", " . $msg1;
        }

        $values = $record->getRecordedValues();

        $msg1 = $this->_createMessage($values, 'dst');
        if ($msg1) {
            $log_msg .= ', ' . $msg1;
        }

        $log_msg .= ' )';

        if ($this->isEnabled()) {
            $this->_logger->log(CB_LOGGER_NOTICE, $log_msg, 'modify', 'record');
        }
    }

    function _createMessage($values, $suffix = '')
    {
        require_once('fw/date.csp');

        $a = [];

        $ts = new CB_TimeStampEx();

        if ($values['in']) {
            $ts->unix_ts = $values['in']->unix_ts;
            $t = $ts->getTime();
            $a[] = "in_${suffix}: " . $t->format();
        }
        if ($values['out']) {
            $ts->unix_ts = $values['out']->unix_ts;
            $t = $ts->getTime();
            $a[] = "out_${suffix}: " . $t->format();
        }

        if ($values['absences']) {
            $order = 1;
            foreach ($values['absences'] as $rec) {
                if ((array_key_exists('out', $rec) && $rec['out'])
                    && (array_key_exists('in', $rec) && $rec['in'])
                ) {
                    $ts->unix_ts = $rec['out']->unix_ts;
                    $ot = $ts->getTime();

                    $ts->unix_ts = $rec['in']->unix_ts;
                    $it = $ts->getTime();

                    $a[] = sprintf("absence_out_${suffix}_%s: %s", $order,
                        $ot->format());
                    $a[] = sprintf("absence_in_${suffix}_%s: %s", $order,
                        $it->format());

                    $order += 1;
                }
            }
        }
        $msg = '';
        if (0 < count($a)) {
            $msg = implode(', ', $a);
        }

        return $msg;
    }

    /**
     * write an inspection log
     *
     * @param   string $action action name
     * @param   string $target target name
     * @param   array  $params log list array
     */
    function writeLog($action, $target, $params)
    {
        if ($this->isEnabled()) {
            $this->_logger->noticeEx($action, $target, $params);
        }
    }
}

