<?php

namespace grn;

use grn\favour\service\FavourService;

class AjaxHelper
{
    /**
     * @param \CB_User                     $login
     * @param \GRN_Notification_App|null   $notification_app
     * @param \grn\favour\Application|null $favour_app
     * @param int                          $now_ts
     * @param int                          $update_notification_seconds
     * @param \CB_Session                  $session
     *
     * @return array
     */
    public static function getNumberOfNotification(
        \CB_User $login,
        $notification_app,
        $favour_app,
        $now_ts,
        $update_notification_seconds,
        $session
    ) {
        if ((is_null($notification_app) === true
             && is_null($favour_app) === true)
            || is_numeric($update_notification_seconds) === false
            || $update_notification_seconds === 0
        ) {
            return [
                "number"               => 0,
                "favour_notify_number" => 0,
                "time_update"          => 3600000, // 3600 * 1000
                "eachNumberOfApps"     => 0
            ];
        }

        $last_time_update_ts = $session->get("last_time_update");

        // When $last_time_update is future of $now, rewrite session last_time_update = 0.
        if ($now_ts < $last_time_update_ts) {
            $session->set("last_time_update", 0);

            return [
                "number"               => $session->get("notification_number"),
                "favour_notify_number" => $session->get("favour_notify_number"),
                "time_update"          => $update_notification_seconds * 1000,
                "eachNumberOfApps"     => $session->get("each_notification_number")
            ];
        }

        $num_of_notification = 0;
        $num_of_favour = 0;
        $num_of_each_apps = [];
        if (($now_ts - $last_time_update_ts) >= $update_notification_seconds) {
            if (is_null($notification_app) !== true) {
                $notification_app->updateApplications($login, true);
                $num_of_notification
                    = $notification_app->getDataCountComheader($login);

                $notification_app_list
                    = $notification_app->getApplicationList(false);
                foreach ($notification_app_list as $key => $item) {
                    $num_of_each_apps[$key]
                        = $notification_app->getWhatsNewDataCount($login,
                        'grn.' . $key);
                }
            }
            $session->set("notification_number", $num_of_notification);
            $session->set("last_time_update", $now_ts);
            $session->set("each_notification_number", $num_of_each_apps);

            //favour notification
            if (is_null($favour_app) !== true) {
                $favour_service = new FavourService();
                $num_of_favour
                    = $favour_service->getFavourNotifyCountByUserId($login->getOID());
            }
            $session->set("favour_notify_number", $num_of_favour);
        } else {
            $num_of_notification = $session->get("notification_number");
            $num_of_favour
                = $session->get("favour_notify_number");
            $update_notification_seconds = $update_notification_seconds
                                           - ($now_ts - $last_time_update_ts);
            $num_of_each_apps
                = $session->get("each_notification_number");
        }

        if ( ! $notification_app) {
            $num_of_each_apps = 0;
            $num_of_notification = 0;
        }

        return [
            "number"               => $num_of_notification,
            "favour_notify_number" => $num_of_favour,
            "time_update"          => $update_notification_seconds * 1000,
            "eachNumberOfApps"     => $num_of_each_apps
        ];
    }
}
