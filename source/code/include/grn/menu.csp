<?php

require_once('grn/file.csp');
require_once('fw/i18n.csp');
require_once('system/SystemFacade.csp');
require_once('system/SystemUiLogic.csp');

/**
 * デフォルトのアプリケーションメニュー
 *
 * @package grn.common
 */
class GRN_DefaultApplicationMenu extends CB_PersistentBase
{
    //リンク先ページ
    var $col_location = ['type' => 'char', 'length' => 255, 'notnull' => true];
    //リンク名
    var $col_name = ['type' => 'char'];
    //リンク名(フォーマットの必要あり)
    var $col_name_format = ['type' => 'char'];
    //リンク先ページがGaroon内部の場合はそのapp_id、外部の場合はnull
    var $col_app_id = ['type' => 'char'];
    //アイコンがURL指定の場合はURL、そうでない場合はnull
    var $col_icon_location = ['type' => 'char', 'length' => 255];
    //アイコンがFILE指定の場合はGRN_FileのOID、そうでない場合はnull
    var $col_icon_file = ['type' => 'weak_relation', 'to' => 'GRN_File'];
    //メニューの順番
    var $col_list_index = ['type' => 'list_index'];

    var $idx_list_index = ['cols' => ['list_index']];

    function __construct(& $row)
    {
        parent::__construct($row);
    }
}


/**
 * メニュークラス
 *
 * @package grn.common
 */
class GRN_Menu
{
    var $table = null;
    var $type = 0;
    var $default = 0;

    function __construct($table)
    {
        $this->table = $table;
        $name = $table->getTableName();
        if (strcasecmp($name, 'grn_defaultapplicationmenu') == 0) {
            $this->type = 1;
            $this->default = 1;
        } elseif (strcasecmp($name, 'grn_applicationmenu') == 0) {
            $this->type = 1;
            $this->default = 2;
        } else {
            $this->type = 0;
            $this->default = 0;
        }
    }

    function _format_path(& $row)
    {
        $app_id = $row->get('app_id');
        $location = $row->get('location');
        if ( ! is_null($app_id)) {
            return $app_id . '/' . $location;
        } else {
            return $location;
        }
    }

    function _format_name(& $row)
    {
        $sysUiLogic = new SystemUiLogic();

        return $sysUiLogic->getMenuName($row->get('name'), $row->get('app_id'),
            $row->get('location'));
    }

    function _format_icon_path($row)
    {
        require_once('fw/string_util.csp');

        if ($this->type !== 1) {
            return null;
        }

        $app_id = $row->get('app_id');
        $location = $row->get('icon_location');
        $file = $row->get('icon_file');
        if ( ! is_null($app_id)) {
            require_once('grn/application.csp');
            $app_locator = GRN_ApplicationLocator::instance();
            $app_config = $app_locator->getConfig($app_id);
            if ( ! is_array($app_config)
                 || ! array_key_exists('icon32', $app_config)
            ) {
                return null;
            }

            return $app_config['icon32'];
        } elseif ( ! is_null($location) && strlen(cb_trim($location)) > 0) {
            return $location;
        } elseif ( ! is_null($file)) {
            $body = $file->getCurrentBody();
            $param = [
                'mdefault' => ($this->default === 1 ? 1 : 0),
                'mid'      => $row->getOID(),
                'hash'     => $body->get('hash')
            ];

            return cb_format_url('grn/icon_download', $param, null,
                $body->get('name'));
        } else {
            return null;
        }
    }


    function initialize($initials)
    {
        $this->removeAllMenu();
        foreach ($initials as $item) {
            $name = '';
            $this->_editMenu($item['location'], $name, $item['app_id'], null,
                null, true);
        }
    }


    public function modifyApplicationMenuLink(
        $inMenuId,
        $inLocalNameArray,
        $inLink
    ) {
        $linkArray = explode('/', $inLink);
        if ( ! $this->_checkApplicationMenu($linkArray[0])) {
            cb_throw_error(E_GRN_MENU_NOT_FOUND);
        }

        return $this->_modifyApplicationMenu($inMenuId, $inLocalNameArray,
            $linkArray[1], $linkArray[0], null, true);
    }

    public function modifyApplicationMenuUrl(
        $inMenuId,
        $inLocalNameArray,
        $inLocation,
        $inIconUrl = null,
        $inIconFile = null,
        $inIsDeleteIcon = false
    ) {
        $iconInfoArray = [];

        if (is_null($inIconUrl) === false) {
            $iconInfoArray['location'] = $inIconUrl;
        }

        if (is_null($inIconFile) === false) {
            $iconInfoArray['file'] = $inIconFile;
        }

        if (count($iconInfoArray) < 1) {
            $iconInfoArray = null;
        }

        return $this->_modifyApplicationMenu($inMenuId, $inLocalNameArray,
            $inLocation, null, $iconInfoArray, $inIsDeleteIcon);
    }


    public function addMenuLink($inLocalNameArray, $inLink)
    {
        $linkArray = explode('/', $inLink);
        if ( ! $this->_checkApplicationMenu($linkArray[0])) {
            cb_throw_error(E_GRN_MENU_NOT_FOUND);
        }
        $tableInfo = $this->table;
        $tableName = $tableInfo->getTableName();
        if (strcasecmp($tableName, 'grn_defaultapplicationmenu') == 0) {
            return $this->_addApplicationMenu($inLocalNameArray, $linkArray[1],
                $linkArray[0], null);
        }
    }


    public function addMenuUrl(
        $inLocalNameArray,
        $inLocation,
        $inIconUrl = null,
        $inIconFile = null
    ) {
        $iconInfoArray = [];

        if (is_null($inIconUrl) === false) {
            $iconInfoArray['location'] = $inIconUrl;
        }

        if (is_null($inIconFile) === false) {
            $iconInfoArray['file'] = $inIconFile;
        }

        if (count($iconInfoArray) < 1) {
            $iconInfoArray = null;
        }

        $tableInfo = $this->table;
        $tableName = $tableInfo->getTableName();
        if (strcasecmp($tableName, 'grn_defaultapplicationmenu') == 0) {
            return $this->_addApplicationMenu($inLocalNameArray, $inLocation,
                null, $iconInfoArray);
        }
    }


    private function _editMenu(
        $location,
        $name,
        $app_id = null,
        $icon = null,
        $oid = null,
        $inIsDeleteIcon = false
    ) {
        require_once('fw/string_util.csp');

        $table =& $this->table;

        if (is_null($oid)) {
            $row = $table->newRow();
        } else {
            $row =& $table->getRow($oid);
            if ( ! $row) {
                return false;
            }

            if ($inIsDeleteIcon) {
                require_once('grn/ui.csp');
                $manager = GRN_UIConfigManager::getInstance();
                $menu = $manager->getDefaultApplicationMenu();
                $item = $menu->getMenu($oid);

                if ( ! $item) {
                    cb_throw_error(E_GRN_MENU_NOT_FOUND);
                }

                $iconFile = $item['icon_file'];
                if ($iconFile) {
                    $iconFile->delete();
                }
            }
        }

        $row->set('location', $location);
        $row->set('app_id', $app_id);
        $row->set('name',
            (is_null($name) || (strlen($name) <= 0)) ? null : $name);

        if (is_array($icon) && $this->type === 1) {

            // 削除 or 更新
            if (isset($icon ['file'])) {
                $oldfile = $row->get('icon_file');
                if ($oldfile) {
                    $oldfile->delete();
                }
                $row->set('icon_file', null);
            }

            //set
            if (array_key_exists('file', $icon)) {
                require_once('grn/uum.csp');
                global $G_container_base;
                $uum = $G_container_base->getInstance('uum');
                $file =& grn_create_simple_file($uum->getLoginUser(),
                    $icon['file'],
                    'Icon file added',
                    true);
                $row->set('icon_file', $file);
            }

            $row->set('icon_location', null);
            if (array_key_exists('location', $icon)
                && strlen(cb_trim($icon['location'])) > 0
            ) {
                $row->set('icon_location', $icon['location']);
            }
        }
        $row->updateNow();

        return $row->getOID();
    }


    private function _modifyApplicationMenu(
        $inMenuId,
        $inLocalNameArray,
        $inLocation,
        $inAppId,
        $inIconArray,
        $inIsDeleteIcon
    ) {
        //--------------  default menu modify -------------
        $this->_editMenu($inLocation,
            $inLocalNameArray[CB_I18N_DEFUALT_LANGUAGE_CODE], $inAppId,
            $inIconArray, $inMenuId, $inIsDeleteIcon);


        //--------------  menu local name modify -------------
        require_once('system/bean/GrnDefaultApplicationMenuLocal.csp');
        $dao = new SystemFacade();

        $i18n = CB_I18N::getInstance();
        $availableLanguageArray = $i18n->getAvailableLanguages();
        foreach ($availableLanguageArray as $languageKey) {
            if ((array_key_exists($languageKey, $inLocalNameArray))
                && (strlen(cb_trim($inLocalNameArray[$languageKey])) > 0)
            ) {
                $localName = cb_trim($inLocalNameArray[$languageKey]);

                $dataObj = [];
                $menuLocal = new GrnDefaultApplicationMenuLocal();
                $menuLocal->setParentId($inMenuId);
                $menuLocal->setLanguageCode($languageKey);
                $menuLocal->setName($localName);

                $dao->updateDefaultApplicationMenuLocal($dataObj, $menuLocal);
            } else {
                $dataObj = [];
                $menuLocal = new GrnDefaultApplicationMenuLocal();
                $menuLocal->setParentId($inMenuId);
                $menuLocal->setLanguageCode($languageKey);

                $dao->deleteDefaultApplicationMenuLocal($dataObj, $menuLocal);
            }
        }

        return true;
    }


    private function _addApplicationMenu(
        $inLocalNameArray,
        $inLocation,
        $inAppId,
        $inIconArray
    ) {
        //--------------  default menu add -------------
        $menuId = $this->_editMenu($inLocation,
            $inLocalNameArray[CB_I18N_DEFUALT_LANGUAGE_CODE], $inAppId,
            $inIconArray);


        //--------------  menu local name add -------------
        require_once('system/bean/GrnDefaultApplicationMenuLocal.csp');
        $dao = new SystemFacade();

        $i18n = CB_I18N::getInstance();
        $availableLanguageArray = $i18n->getAvailableLanguages();
        foreach ($availableLanguageArray as $languageKey) {
            if ((array_key_exists($languageKey, $inLocalNameArray))
                && (strlen(cb_trim($inLocalNameArray[$languageKey])) > 0)
            ) {
                $localName = cb_trim($inLocalNameArray[$languageKey]);

                $dataObj = [];
                $dataObj['messageTypeAdd']
                    = 'default_application_menu_local_add';
                $menuLocal
                    = new GrnDefaultApplicationMenuLocal();
                $menuLocal->setParentId($menuId);
                $menuLocal->setLanguageCode($languageKey);
                $menuLocal->setName($localName);

                $dao->insertDefaultApplicationMenuLocal($dataObj, $menuLocal);
            }
        }

        return true;
    }


    function &getMenu($oid, $isUseLocal = true)
    {
        $tableInfo = $this->table;
        $i18n = CB_I18N::getInstance();

        $dao = new SystemFacade();
        $dataObj = [];
        $dataObj['lock'] = $tableInfo->_lock;
        $dataObj['language'] = $isUseLocal ? $i18n->getCurrentLanguage() : null;

        $menuObj = false;
        $tableName = $tableInfo->getTableName();
        if (strcasecmp($tableName, 'grn_defaultapplicationmenu') == 0) {
            $menuObj = $dao->referDefaultApplicationMenuById($dataObj, $oid);
        }

        if ($menuObj === false) {
            return false;
        }

        return $this->_convertMenuDataArray($menuObj);
    }

    //注意　多言語非対応メソッド（削除予定メソッド）
    //2010/12/14現在、バージョンアッププログラムが利用している
    function &getMenuByAppID($app_id)
    {
        $table =& $this->table;

        $rowset = new CB_RowSet($table, 'menu');
        $rowset->addCondition("menu.col_app_id ='{$app_id}'");

        $ret = [];
        while ( ! is_null(($row = $rowset->iterate()))) {
            $menu = [];
            $menu['location'] = $this->_format_path($row);
            $menu['name'] = $this->_format_name($row);
            $menu['app_id'] = $row->get('app_id');
            if ($this->type === 1) {
                $menu['icon'] = $this->_format_icon_path($row);
                $menu['icon_file'] = $row->get('icon_file');
                $menu['icon_location'] = $row->get('icon_location');
                $menu['icon_file_info'] = null;
                if (isset($menu['icon_file'])) {
                    $file = $menu['icon_file'];
                    if ($file) {
                        $body = $file->getCurrentBody();
                        $menu['icon_file_info']
                            = ['name' => $body->get('name')];
                    }
                }
            }
            $ret[$row->getOID()] = $menu;
        }

        return $ret;
    }

    /**
     * @return array
     */
    function &listMenu($offset = 0, $limit = -1)
    {
        $tableInfo = $this->table;
        $i18n = CB_I18N::getInstance();

        $dao = new SystemFacade();
        $dataObj = [];
        $dataObj['lock'] = $tableInfo->_lock;
        $dataObj['offset'] = $offset;
        $dataObj['limit'] = $limit;
        $dataObj['language'] = $i18n->getCurrentLanguage();

        $menuList = [];
        $tableName = $tableInfo->getTableName();
        if (strcasecmp($tableName, 'grn_defaultapplicationmenu') == 0) {
            $menuList = $dao->getDefaultApplicationMenuList($dataObj);
        }

        $ret = [];
        foreach ($menuList as $menuObj) {
            $menu = $this->_convertMenuDataArray($menuObj);
            $ret[$menuObj->getId()] = $menu;
        }

        return $ret;
    }

    function removeMenu($oid)
    {
        $table =& $this->table;

        $row =& $table->getRow($oid);
        if ( ! $row) {
            return false;
        }

        if ($this->type === 1) {
            $oldfile = $row->get('icon_file');
            if ($oldfile) {
                $oldfile->delete();
            }
        }
        $row->delete();
    }

    function removeAllMenu()
    {
        $items = $this->listMenu();
        $ids = array_keys($items);
        foreach ($ids as $id) {
            $this->removeMenu($id);
        }
    }

    function changeMenuOrder($order)
    {
        $table =& $this->table;

        $index = 0;
        foreach ($order as $oid) {
            $row =& $table->getRow($oid);
            if ($row) {
                $row->set('list_index', $index++);
            }
        }
    }

    /**
     * @return array
     */
    private function &_convertMenuDataArray($inMenuObj)
    {
        $tableInfo = $this->table;
        $row = $tableInfo->getRow($inMenuObj->getId(),
            $inMenuObj->convertArray());
        $menuObjId = $row->getOID();

        $menu = [];
        $menu['location'] = $this->_format_path($row);
        $menu['name'] = $this->_format_name($row);
        $menu['app_id'] = $row->get('app_id');

        if ($this->type === 1) {
            $menu['icon'] = $this->_format_icon_path($row);
            $menu['icon_file'] = $row->get('icon_file');
            $menu['icon_location'] = $row->get('icon_location');

            $menu['icon_file_info'] = null;
            if (isset($menu['icon_file'])) {
                $file = $menu['icon_file'];
                if ($file) {
                    $body = $file->getCurrentBody();
                    $menu['icon_file_info'] = ['name' => $body->get('name')];
                }
            }
        }

        return $menu;
    }

    /**
     * check Application ID
     *
     * @param string $appID
     *
     * @return boolean
     */
    private function _checkApplicationMenu($appID)
    {
        static $applications = null;
        if (is_null($applications)) {
            require_once('grn/application.csp');
            $applications = GRN_ApplicationLocator::instance()
                                                  ->getApplicationIds();
        }

        if (false === array_search($appID, $applications)) {
            return false;
        }

        return true;
    }
}


