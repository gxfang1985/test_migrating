<?php
/**
 * Single Sign On Service
 *
 * @author  Yuichi, Nakamura 2005/02
 * @version 1.0
 */

/** Include Files **/
require_once('fw/persistent.csp');
require_once('fw/module.csp');
require_once('fw/uum_core.csp');
require_once('fw/string_util.csp');
require_once('grn/error_code.csp');
require_once('grn/inspection.csp');

/** String Resources **/
//Service Name
define('GRN_SSO', 'grn.common.sso');

//Module ID
define('GRN_SSO_MODULE_ID', 'grn.common.sso');

//Service Name & Loader Name
define('GRN_SSO_SSO', 'grn.common.sso.sso');

//Driver Base Name
define('GRN_SSO_DRIVER_BASE', 'grn.common.sso.sso.driverbase');

//Plugin Prefix
define('GRN_SSO_PLUGIN_PREFIX', 'plugin_grn_common_sso_sso_');

//tables
define('GRN_SSO_TABLE_SSO', 'GRN_SSO_SSO');
define('GRN_SSO_TABLE_USER', 'GRN_SSO_USER');

//properties
define('GRN_SSO_PROPERTY_DISPLAY_NAME', 'display_name');       //Display Name
define('GRN_SSO_PROPERTY_DRIVER_TYPE', 'driver_type');        //Driver Type
define('GRN_SSO_PROPERTY_DRIVER_SETTINGS',
    'driver_settings');    //Driver Settings
define('GRN_SSO_PROPERTY_AVAILABLE_PERSONAL',
    'available_personal'); //Available Personal
define('GRN_SSO_PROPERTY_AVAILABLE_WINDOW',
    'available_window');   //Available Window
define('GRN_SSO_PROPERTY_LIST_INDEX', 'list_index');         //List Index
define('GRN_SSO_PROPERTY_CREATOR', 'creator');            //Creator ID
define('GRN_SSO_PROPERTY_CREATOR_NAME', 'creator_name');       //Creator Name
define('GRN_SSO_PROPERTY_CTIME', 'ctime');              //Create Time
define('GRN_SSO_PROPERTY_MODIFIER', 'modifier');           //Modifier ID
define('GRN_SSO_PROPERTY_MODIFIER_NAME', 'modifier_name');      //Modifier Name
define('GRN_SSO_PROPERTY_MTIME', 'mtime');              //Modify Time
define('GRN_SSO_PROPERTY_USER', 'user');               //User
define('GRN_SSO_PROPERTY_CREDENTIAL', 'credential');         //Credential
define('GRN_SSO_PROPERTY_APPLICATION', 'application');        //Application ID

//identifier
define('GRN_SSO_IDENTIFIER_UUM_ID',
    '%grn.common.uum.user.id%');                //User ID
define('GRN_SSO_IDENTIFIER_ID',
    '%ID%');                                    //User ID (alias)
define('GRN_SSO_IDENTIFIER_UUM_DISPLAY_NAME',
    '%grn.common.uum.user.display_name%');      //User Display Name
define('GRN_SSO_IDENTIFIER_NAME',
    '%Name%');                                  //User Display Name (alias)
define('GRN_SSO_IDENTIFIER_UUM_FOREIGN_KEY',
    '%grn.common.uum.user.foreign_key%');       //User Foreign Key
define('GRN_SSO_IDENTIFIER_ACCOUNT',
    '%Account%');                               //User Foreign Key (alias)
define('GRN_SSO_IDENTIFIER_UUM_EMAIL_ADDRESS',
    '%grn.common.uum.user.email_address%');     //User E-mail Address
define('GRN_SSO_IDENTIFIER_MAIL',
    '%Mail%');                                  //User E-mail Address (alias)
define('GRN_SSO_IDENTIFIER_UUM_PASSWORD',
    '%grn.common.uum.user.password%');          //User Password
define('GRN_SSO_IDENTIFIER_PASSWORD',
    '%Password%');                              //User Password (alias)
define('GRN_SSO_IDENTIFIER_UUM_TELEPHONE_NUMBER',
    '%grn.common.uum.user.telephone_number%');  //User Telephone Number
define('GRN_SSO_IDENTIFIER_TEL',
    '%TEL%');                                   //User Telephone Number (alias)
define('GRN_SSO_IDENTIFIER_UUM_URL',
    '%grn.common.uum.user.url%');               //User URL
define('GRN_SSO_IDENTIFIER_URL',
    '%URL%');                                   //User URL (alias)
define('GRN_SSO_IDENTIFIER_LOGIN_PASSWORD',
    '%Login_Password%');                              //User Password (alias)

//Driver Page Type
define('GRN_SSO_PAGE_TYPE_REQUEST',
    'request');                             //request page
define('GRN_SSO_PAGE_TYPE_VIEW_SYSTEM',
    'view-system');                             //system view page
define('GRN_SSO_PAGE_TYPE_ADD_SYSTEM',
    'add-system');                              //system add page
define('GRN_SSO_PAGE_TYPE_MODIFY_SYSTEM',
    'modify-system');                           //system modify page
define('GRN_SSO_PAGE_TYPE_VIEW_PERSONAL',
    'view-personal');                           //personal view page
define('GRN_SSO_PAGE_TYPE_SET_PERSONAL',
    'set-personal');                            //personal set page

//System Profile

//User Profile
define('GRN_SSO_USER_PROFILE_PARAM_LIST',
    'param_list');                              //User Parameter List

//session
define('GRN_SSO_SESSION_AUTH_USER',
    'auth_user');                               //Auth User
define('GRN_SSO_SESSION_ACCOUNT',
    'account');                                 //Account
define('GRN_SSO_SESSION_PASSWORD',
    'password');                                //Password

//encrypt Key
define('GRN_SSO_DECRYPT_MOD_KEY', 47);

/*** Begin Persistent Classes **/

/**
 * SSO Persistent Class
 *
 * @author  Yuichi, Nakamura 2005/02
 * @version 1.0
 */
class GRN_SSO_SSO extends GRN_InspectionBase
{
    /**
     * Constructor
     */
    function __construct($row)
    {
        parent::__construct($row, 'grn.common.sso');
    }

    /** Application **/
    var $col_application = ['type' => 'char', 'notnull' => true];
    /** Display Name **/
    var $col_display_name = ['type' => 'char', 'notnull' => true];
    /** Driver Type **/
    var $col_driver_type = ['type' => 'char', 'notnull' => true];
    /** Driver Settings **/
    var $col_driver_settings = ['type' => 'char', 'length' => 65535];
    /** Available Personal Setting **/
    var $col_available_personal = ['type' => 'int'];
    /** Available Other Window **/
    var $col_available_window = ['type' => 'int'];
    /** list index **/
    var $col_list_index = ['type' => 'int', 'notnull' => true];
    var $idx_list_index = ['cols' => ['list_index']];

    /** Complex Index **/
    var $idx_application_list_index = ['cols' => ['application', 'list_index']];

    /** reserved columns **/
    var $col_reserve_text1 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text2 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text3 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_int1 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int2 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int3 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_blob1 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob2 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob3 = ['type' => 'blob', 'lazy' => true];
}


/**
 * SSO User Info Persistent Class
 *
 * @author  Yuichi, Nakamura 2005/02
 * @version 1.0
 */
class GRN_SSO_User extends CB_PersistentBase
{
    /**
     * Constructor
     */
    function __construct($row)
    {
        parent::__construct($row);
    }

    /** SSO User **/
    var $col_user = ['type' => 'weak_relation', 'to' => 'CB_User'];
    /** Credential(Encrypt2 Password) **/
    var $col_credential = ['type' => 'char', 'length' => 100];

    /** reserved columns **/
    var $col_reserve_text1 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text2 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text3 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_int1 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int2 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int3 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_blob1 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob2 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob3 = ['type' => 'blob', 'lazy' => true];
}

/*** End Persistent Classes **/

/*** Begin Agent Classes **/

/**
 * SSO Agent Class
 *
 * @author  Yuichi, Nakamura 2005/02
 * @version 1.0
 */
class GRN_SSO_SSO_Agent
{
    /** SSO Object List **/
    var $_sso_list = [];

    /** sso table information **/
    var $_sso_table = null;

    /**
     * Constructor
     */
    function __construct()
    {
        return;
    }

    /**
     * Get GRN_SSO_SSO_Agent Instance
     *
     * @return GRN_SSO_SSO_Agent $instance    //GRN_SSO_SSO_Agent Instance
     */
    private static $_instance = null;

    /**
     *
     * @return GRN_SSO_SSO_Agent
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get SSO Table Information
     *
     * @return object
     */
    function _getTableInfo()
    {
        if ($this->_sso_table === null) {
            global $G_container_base;
            $table_manager = $G_container_base->getInstance('table_manager');
            $this->_sso_table = $table_manager->getTableInfo(GRN_SSO_TABLE_SSO);
        }

        return $this->_sso_table;
    }

    /**
     * Get SSO Object
     *
     * @param  int $sso_id //SSO Object ID
     *
     * @return object   $sso                    //SSO Object
     */
    function get($sso_id)
    {
        //Get SSO Object List
        $sso_list = $this->getList();
        if ( ! is_array($sso_list)) {
            {
                $___ret = false;

                return $___ret;
            }
        }

        //Get SSO Object
        if ( ! array_key_exists($sso_id, $sso_list)) {
            {
                $___ret = false;

                return $___ret;
            }
        }

        //Return SSO Object
        return $sso_list[$sso_id];
    }

    /**
     * Get SSO Object List
     *
     * @return array $sso_list    //SSO Object List
     */
    function &getList($app_id = null, $refresh = false)
    {
        //Check SSO Object List
        $sso_list = &$this->_sso_list;
        if ($app_id) {
            if (array_key_exists($app_id, $this->_sso_list)
                && $refresh !== true
            ) {
                return $this->_sso_list[$app_id];
            } else {
                $this->_sso_list[$app_id] = [];
                $sso_list =& $this->_sso_list[$app_id];
            }
        } else {
            if (array_key_exists('ALL', $this->_sso_list)
                && $refresh !== true
            ) {
                return $this->_sso_list['ALL'];
            } else {
                $this->_sso_list['ALL'] = [];
                $sso_list =& $this->_sso_list['ALL'];
            }
        }

        //Create Rowset
        $table = $this->_getTableInfo();
        $rowset = new CB_RowSet($table);
        if ($app_id) {
            $condition = $rowset->queryf("col_application = '@S'", $app_id);
            $rowset->addCondition($condition);
        }
        $rowset->addOrderColumn('col_list_index');

        //Create SSO Object List
        while ($row = $rowset->iterate()) {
            $sso_list[$row->getOID()] = $row;
        }

        return $sso_list;
    }

    /**
     * Create SSO Object
     *
     * @return object $sso    //SSO Object
     */
    function create()
    {
        //Get SSO Table Information
        $table = $this->_getTableInfo();

        //Create SSO Object
        $sso = $table->newRow();
        $sso->set(GRN_SSO_PROPERTY_LIST_INDEX, $sso->getOID());

        //Add SSO Object List
        //$sso_list =& $this->getList();
        //$sso_list[$sso->getOID()] =& $sso;
        $this->_sso_list = [];

        return $sso;
    }

    /**
     * delete SSO Object
     *
     * @return none    none
     */
    function remove($sso_id)
    {
        //Delete SSO Object
        $sso = $this->get($sso_id);
        $sso->delete();

        //Remove From Cache
        //$sso_list =& $this->getList();
        //unset($sso_list[$sso_id]);
        $this->_sso_list = [];

        return;
    }

    /**
     * Change Order
     *
     * @param array $sso_id_list //SSO ID List
     */
    function changeOrder(& $sso_id_list)
    {
        //Get SSO List
        $sso_list =& $this->getList();

        //Create New List Index
        $object_index = 0;
        $list_indecies = [];
        foreach (array_keys($sso_list) as $sso_id) {
            if ($sso_id !== current($sso_id_list)) {
                $list_indecies[current($sso_id_list)]
                    = $sso_list[$sso_id]->get(GRN_SSO_PROPERTY_LIST_INDEX);
            }
            if ( ! next($sso_id_list)) {
                break;
            }
        }

        //Set New List Index
        foreach ($list_indecies as $sso_id => $list_index) {
            $sso_list[$sso_id]->set(GRN_SSO_PROPERTY_LIST_INDEX, $list_index);
            $sso_list[$sso_id]->updateNow();
        }

        $this->_sso_list = [];

        return;
    }
}

/**
 * SSO User Agent Class
 *
 * @author  Yuichi, Nakamura 2005/02
 * @version 1.0
 */
class GRN_SSO_User_Agent
{
    /** SSO User Object List **/
    var $_sso_user_list = null;

    /** SSO User table information **/
    var $_sso_user_table = null;

    /**
     * Constructor
     */
    function __construct()
    {
        return;
    }

    /**
     * Get GRN_SSO_User_Agent Instance
     *
     * @return object $instance    //GRN_SSO_User_Agent Instance
     */
    private static $_instance = null;

    /**
     * @static
     * @return GRN_SSO_User_Agent
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get SSO Table Information
     *
     * @return object
     */
    function _getTableInfo()
    {
        if ($this->_sso_user_table === null) {
            global $G_container_base;
            $table_manager = $G_container_base->getInstance('table_manager');
            $this->_sso_user_table
                = $table_manager->getTableInfo(GRN_SSO_TABLE_USER);
        }

        return $this->_sso_user_table;
    }

    /**
     * Get SSO User Object
     *
     * @param  int $sso_user_id //SSO User Object ID
     *
     * @return object   $sso_user               //SSO User Object
     */
    function &get($sso_user_id)
    {
        //Get SSO User Object List
        $sso_user_list = &$this->getList();
        if ( ! is_array($sso_user_list)) {
            {
                $___ret = false;

                return $___ret;
            }
        }

        //Get SSO User Object
        if ( ! array_key_exists($sso_user_id, $sso_user_list)) {
            {
                $___ret = false;

                return $___ret;
            }
        }

        //Return SSO User Object
        return $sso_user_list[$sso_user_id];
    }

    /**
     * Get SSO User Object by User
     *
     * @param  int $sso_user_id //SSO User Object ID
     *
     * @return object   $sso_user               //SSO User Object
     */
    function getbyUser($user)
    {
        //Create Condition
        $user_id = "'" . $user->getOID() . "'";
        $condition = 'col_user = ' . $user_id;

        //Create Rowset
        $table = $this->_getTableInfo();
        $rowset = new CB_RowSet($table);
        $rowset->addCondition($condition);

        //Create SSO User Object List
        $sso_user = false;
        while ($row = $rowset->iterate()) {
            $sso_user = $row;
            break;
        }

        return $sso_user;
    }

    /**
     * Get SSO User Object List
     *
     * @return mixed $sso_user_list             //SSO User Object List
     */
    function &getList($refresh = false)
    {
        //Check SSO User Object List
        if ($this->_sso_user_list !== null && $refresh !== true) {
            return $this->_sso_user_list;
        }

        //Create Rowset
        $table = $this->_getTableInfo();
        $rowset = new CB_RowSet($table);

        //Create SSO User Object List
        $this->_sso_user_list = [];
        while ($row = $rowset->iterate()) {
            $this->_sso_user_list[$row->getOID()] = $row;
        }

        return $this->_sso_user_list;
    }

    /**
     * Create SSO User Object
     *
     * @return GRN_SSO_User $sso_user                 //SSO User Object
     */
    function create()
    {
        //Get SSO User Table Information
        $table = $this->_getTableInfo();

        //Create SSO User Object
        $sso_user = $table->newRow();

        //Add SSO User Object List
        if ( ! is_null($this->_sso_user_list)) {
            $this->_sso_user_list[$sso_user->getOID()] = $sso_user;
        }

        return $sso_user;
    }

    /**
     * delete SSO User Object
     *
     * @return none    none
     */
    function remove($sso_user_id)
    {
        //Delete SSO Object
        $sso_user =& $this->get($sso_user_id);
        $sso_user->delete();

        //Remove From Cache
        if ( ! is_null($this->_sso_user_list)) {
            unset($this->_sso_user_list[$sso_user_id]);
        }

        return;
    }
}

/*** End Agent Classes **/

/*** Begin Driver Base Classes **/

/**
 * Driver Base Class
 *
 * @author  Yuichi, Nakamura 2005/02
 * @version 1.0
 */
class GRN_SSO_SSO_DriverBase extends CB_ModuleBase
{
    /** Driver Name **/
    var $_driver_name = null;

    /** Driver Type **/
    var $_driver_type = null;

    /** Driver Page  **/
    var $_driver_page = null;

    /**
     * Constructor
     *
     */
    function __construct($driver_name, $driver_type, $driver_page)
    {
        //Initialize Driver Name and Driver Type
        $this->_driver_name = $driver_name;
        $this->_driver_type = $driver_type;
        $this->_driver_page = $driver_page;
    }

    /**
     * Get Driver Name
     *
     * @return string    driver_type    //Driver Type
     */
    function getName()
    {
        return $this->_driver_name;
    }

    /**
     * Get Driver Type
     *
     * @return string    driver_type    //Driver Type
     */
    function getType()
    {
        return $this->_driver_type;
    }

    /**
     * Set Driver Config
     *
     * @param  array $driver_settings //Driver Settings
     *
     * @return bool     $result
     */
    function setConfig(& $driver_settings)
    {
        /** Must Override In Child Class **/
        return false;
    }

    /**
     * Get Driver Config
     *
     * @return array    $driver_settings        //Driver Settings
     */
    function &getConfig()
    {
        /** Must Override In Child Class **/
        {
            $___ret = false;

            return $___ret;
        }
    }

    /**
     * Get Driver Page
     *
     * @param  string $page_type //Driver Page Type(add-system/modify_system)
     *
     * @return string $config_page              //Driver Config Page Name
     */
    function &getPage($page_type)
    {
        if ( ! array_key_exists($page_type, $this->_driver_page)) {
            {
                $___ret = false;

                return $___ret;
            }
        }

        return $this->_driver_page[$page_type];
    }
}

/*** End Driver Base Classes **/

/*** Begin Loader Classes **/

/**
 * SSO Driver Loader Class
 *
 * @author  Yuichi, Nakamura 2005/02
 * @version 1.0
 */
class GRN_SSO_SSO_Loader
{
    /** Plug-in Loader Instance **/
    var $_loader = null;

    /** Current Driver Instance **/
    var $_currentDriver = null;

    /**
     * Constructor
     *
     */
    function __construct()
    {
        //Create Plugin Loader for SSO Driver
        require_once('fw/plugin.csp');
        $this->_loader = new CB_PluginLoader(GRN_SSO_SSO);
    }

    /**
     * Get Current Driver
     *
     * @access private
     * @return object $currentDriver //Current Driver
     */
    function _getCurrentDriver()
    {
        //Check Current Driver
        if ( ! $this->_currentDriver) {
            //SSO Plag-in Load Failed
            cb_throw_error(E_GRN_CMMN_SSO_LOAD_PLUGIN_FAILED);
        }

        return $this->_currentDriver;
    }

    /**
     * Load Driver
     *
     * @param  string $driver_type     //Driver Type
     * @param  string $driver_settings //Driver Settings
     *
     * @return object  $driver                  //Loaded Driver Object
     */
    function loadDriver($driver_type, &$driver_settings)
    {
        //Get Target Driver
        $driver = $this->getDriver($driver_type);

        //Set Driver Settings
        if ( ! $driver->setConfig($driver_settings)) {
            //Login Plag-in Configuration Failed
            cb_throw_error(E_GRN_CMMN_SSO_CONFIG_PLUGIN_FAILED);
        }

        //Set Current Driver
        $this->_currentDriver = $driver;

        return $driver;
    }

    /**
     * UnLoad Driver
     *
     * @return bool    $result
     */
    function unloadDriver()
    {
        //Set Current Driver NULL
        $null_driver = null;
        $this->_currentDriver =& $null_driver;

        return true;
    }

    /**
     * Get Driver
     *
     * @param  string $driver_type //Driver Type
     *
     * @return object  $driver                  //Driver Object
     */
    function getDriver($driver_type)
    {
        //Replace SSO Module Name
        $driver_type = str_replace(GRN_SSO_SSO . '.', '', $driver_type);

        //Load SSO Driver
        $loader = $this->_loader;
        $driver = $loader->loadDriver($driver_type);
        if ( ! $driver) {
            //Login Plag-in Load Failed
            cb_throw_error(E_GRN_CMMN_SSO_LOAD_PLUGIN_FAILED);
        }

        return $driver;
    }

    /**
     * Get Driver List
     *
     * @return array $driver_list               //Driver List
     */
    function getDriverList()
    {
        //Get SSO Driver File List
        $loader = $this->_loader;
        $driver_file_list = $loader->listFiles();
        if ( ! is_array($driver_file_list)) {
            return null;
        }

        //Get Driver Object
        $driver_list = [];
        foreach ($driver_file_list as $driver_file) {
            //Get Class Name From File Name
            require_once($driver_file);
            $class_name = GRN_SSO_PLUGIN_PREFIX . basename($driver_file,
                    '.csp');
            if (class_exists($class_name)) {
                //Add Driver List
                $driver_list[] = new $class_name;
            }
        }

        //Return Drivers
        return $driver_list;
    }

    /**
     * Call Driver's getConfigPage Method
     *
     * @param  string $page_type //Driver Page Type(add-system/modify_system)
     *
     * @return string $config_page              //Driver Config Page Name
     */
    function getPage($page_type)
    {
        //Call Current Driver's getConfigPage Method
        $current_driver = $this->_getCurrentDriver();

        return $current_driver->getPage($page_type);
    }
}

/*** End Loader Classes **/

/*** Begin Service Class **/

/**
 * Single Sign On Service  Class
 *
 * @author  Yuichi, Nakamura 2005/02
 * @version 1.0
 */
class GRN_SSO_Service extends CB_ModuleBase
{
    /**
     * Constructor
     */
    function __construct()
    {
        //Initialize Parent Class
        parent::__construct(GRN_SSO);
    }

    private static $_instance = null;

    /**
     * Get GRN_SSO_Service Instance
     *
     * @return GRN_SSO_Service $instance                 //GRN_SSO_Service Instance
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /** API for Other Applications **/

    /**
     * Get Application Data identifier
     *  (Other Application -> Authentication Application API)
     *
     * @access  private
     *
     * @params  array $parameter                 //Repalace Target Parameter
     * @params  array $identifier_value_list     //Identifier Value List
     *
     * @return array $replaced_parameter        //Replaced Parameter
     */
    function replaceIdentifierValueList($parameter, $identifier_value_list)
    {
        //Check Arguments
        if (is_null($parameter) || count($identifier_value_list) === 0) {
            return $parameter;
        }

        $replaced_parameter = [];
        if (is_array($parameter)) {
            foreach ($parameter as $parameter_name => $parameter_value) {
                $replaced_parameter[$parameter_name]
                    = $this->replaceIdentifierValueList($parameter_value,
                    $identifier_value_list);
            }
        } else {
            foreach (
                $identifier_value_list as $identifier_name => $identifier_value
            ) {
                $parameter = str_replace($identifier_name, $identifier_value,
                    $parameter);
            }
            $replaced_parameter = $parameter;
        }

        //Return Replaced Driver Setttings
        return $replaced_parameter;
    }

    /**
     * Get Application dentifier value
     *   (Other Application -> Authentication Application API)
     *
     * @access  private
     * @return array $identifier_list           //Application Data Identifier List
     */
    function getIdentifierValueList($app_id = null, $id_list = [])
    {
        $identifier_value_list = [];

        //Get UUM Instance
        $grn_uum = $this->getUumObject();

        if ($app_id === 'uum') {
            //Get UUM Data Identifier Value List
            $identifier_value_list = $grn_uum->getIdentifierValueList($id_list,
                false);
        } else {
            //Get Application Instance
            require_once('grn/application.csp');
            $app_locator = GRN_ApplicationLocator::instance();
            $app = $app_locator->getInstance($app_id);
            if ($app && method_exists($app, 'getIdentifierValueList')) {
                $identifier_value_list = $app->getIdentifierValueList($id_list);
            }
        }

        //Get Login User Infomation
        $login_user = $grn_uum->getLoginUser();
        if ($login_user) {
            //Get Standard UUM Login User Infomation
            $login_id_list = ['login' => 0];
            $login_identifier_value_list
                = $grn_uum->getIdentifierValueList($login_id_list,
                false);
            $identifier_value_list = $identifier_value_list
                                     + $login_identifier_value_list;

            //Get Login User Password from Authentication Service Session(=form input password)
            $session_password = '';
            $authentication_service = GRN_Authentication_Service::getInstance();
            $session = $authentication_service->getSession();
            $auth_user = $session->get(GRN_AUTH_SESSION_AUTH_USER);
            if ($auth_user) {
                $crypt_util = GRN_Authentication_Crypt_Utility::getInstance();
                $session_password
                    = $crypt_util->decrypt2($auth_user[GRN_AUTH_SESSION_PASSWORD]);
            }

            //Get Login User Password from SSO Service User(=uum user password)
            $password = '';
            $sso_user = $this->getSSOUser($login_user);
            if ($sso_user) {
                $credential = $sso_user->get('credential');
                if (strlen($credential) > 0) {
                    $crypt_util
                        = GRN_Authentication_Crypt_Utility::getInstance();
                    $password = $crypt_util->decrypt2($credential);
                }
            }

            //Additional UUM Data Identifier Value List
            $identifier_value_list['%grn.common.login.login.session_password%']
                = $session_password;
//            $identifier_value_list['%session_password%']                        = $session_password;    // alias
            $identifier_value_list['%grn.common.login.login.password%']
                = $password;

            //Ailiases(for Old Garoon)
            $identifier_value_list['%Name%']
                = $identifier_value_list['%grn.common.login.login.display_name%'];
            $identifier_value_list['%ID%']
                = $identifier_value_list['%grn.common.login.login.id%'];
            $identifier_value_list['%Account%']
                = $identifier_value_list['%grn.common.login.login.foreign_key%'];
            $identifier_value_list['%Mail%']
                = $identifier_value_list['%grn.common.login.login.email_address%'];
//            $identifier_value_list['%Password%']    = $identifier_value_list['%grn.common.login.login.password%'];
            $identifier_value_list['%Tel%']
                = $identifier_value_list['%grn.common.login.login.telephone_number%'];
            $identifier_value_list['%URL%']
                = $identifier_value_list['%grn.common.login.login.url%'];

            if ( ! defined('ON_FOREST')) {
                $identifier_value_list['%session_password%']
                    = $session_password;    // alias
                $identifier_value_list['%Password%']
                    = $identifier_value_list['%grn.common.login.login.password%'];
            }
        }

        //Return Application Identifier Value List
        return $identifier_value_list;
    }

    /**
     * Get Application Date Javascript Identifier value
     *     (Other Application -> Authentication Application API)
     *
     * @access  private
     * @return array $javascript_identifier_list    //Application Data Identifier List
     */
    function getJavaScriptIdentifierValueList($app_id = null, $id_list = [])
    {
        $javascript_identifier_value_list = [];

        //Get UUM Instance
        global $G_container_base;
        $grn_uum = $G_container_base->getInstance('uum');

        if ($app_id === 'uum') {
            //Get UUM Data JavaScript Identifier Value List
            $javascript_identifier_value_list
                = $grn_uum->getJavaScriptIdentifierValueList($id_list);
        } else {
            //Get Application Instance
            require_once('grn/application.csp');
            $app_locator = GRN_ApplicationLocator::instance();
            $app = $app_locator->getInstance($app_id);
            if ($app) {
                $javascript_identifier_value_list
                    = $app->getJavaScriptIdentifierValueList($id_list);
            }
        }

        //Get Login User Infomation
        $login_user = $grn_uum->getLoginUser();
        if ($login_user) {
            //Get Standard UUM Login User Infomation
            $login_id_list = ['login' => $login_user->getOID()];
            $javascript_identifier_value_list
                = $javascript_identifier_value_list
                  + $grn_uum->getJavaScriptIdentifierValueList($login_id_list);

            //Ailiases(for Old Garoon)
            $javascript_identifier_value_list['gr_ID']
                = $javascript_identifier_value_list['grn_common_login_login_id'];
            $javascript_identifier_value_list['gr_Name']
                = $javascript_identifier_value_list['grn_common_login_login_display_name'];
            $javascript_identifier_value_list['gr_Account']
                = $javascript_identifier_value_list['grn_common_login_login_foreign_key'];
            $javascript_identifier_value_list['gr_Mail']
                = $javascript_identifier_value_list['grn_common_login_login_email_address'];
            $javascript_identifier_value_list['gr_Tel']
                = $javascript_identifier_value_list['grn_common_login_login_telephone_number'];
            $javascript_identifier_value_list['gr_URL']
                = $javascript_identifier_value_list['grn_common_login_login_url'];
        }

        //Get Additional System Infomation
        require_once('fw/date.csp');
        $timestamp = new CB_TimeStampEx();
        $timestamp->unix_ts = time();
        $date = $timestamp->getDate();
        $date->moveMonths(-1);
        $javascript_identifier_value_list['gr_Date'] = 'new Date(' . $date->year
                                                       . ',' . $date->month
                                                       . ',' . $date->day . ')';

        //Return Application JavaScript Identifier Value List
        return $javascript_identifier_value_list;
    }

    /**
     * Get Application Date Javascript Identifier value
     *     (Other Application -> Authentication Application API)
     *
     * @access  private
     * @return array $javascript_identifier_list    //Application Data Identifier List
     */
    function getJavaScriptIdentifierValueListWithObject($app_id = null, $object)
    {
        $javascript_identifier_value_list = [];

        //Get UUM Instance
        global $G_container_base;
        $grn_uum = $G_container_base->getInstance('uum');

        if ($app_id === 'uum') {
            //Get UUM Data JavaScript Identifier Value List
            $javascript_identifier_value_list
                = $grn_uum->getJavaScriptIdentifierValueListWithObject($object);
        } else {
            //Get Application Instance
            require_once('grn/application.csp');
            $app_locator = GRN_ApplicationLocator::instance();
            $app = $app_locator->getInstance($app_id);
            if ($app) {
                $javascript_identifier_value_list
                    = $app->getJavaScriptIdentifierValueListWithObject($object);
            }
        }

        //Get Login User Infomation
        $login_user = $grn_uum->getLoginUser();
        if ($login_user) {
            //Get Standard UUM Login User Infomation
            $javascript_identifier_value_list
                = $javascript_identifier_value_list
                  + $grn_uum->getJavaScriptIdentifierValueListWithObject($login_user,
                    'login');

            //Ailiases(for Old Garoon)
            $javascript_identifier_value_list['gr_ID']
                = $javascript_identifier_value_list['grn_common_login_login_id'];
            $javascript_identifier_value_list['gr_Name']
                = $javascript_identifier_value_list['grn_common_login_login_display_name'];
            $javascript_identifier_value_list['gr_Account']
                = $javascript_identifier_value_list['grn_common_login_login_foreign_key'];
            $javascript_identifier_value_list['gr_Mail']
                = $javascript_identifier_value_list['grn_common_login_login_email_address'];
            $javascript_identifier_value_list['gr_Tel']
                = $javascript_identifier_value_list['grn_common_login_login_telephone_number'];
            $javascript_identifier_value_list['gr_URL']
                = $javascript_identifier_value_list['grn_common_login_login_url'];
        }

        //Get Additional System Infomation
        require_once('fw/date.csp');
        $timestamp = new CB_TimeStampEx();
        $timestamp->unix_ts = time();
        $date = $timestamp->getDate();
        $date->moveMonths(-1);
        $javascript_identifier_value_list['gr_Date'] = 'new Date(' . $date->year
                                                       . ',' . $date->month
                                                       . ',' . $date->day . ')';

        //Return Application JavaScript Identifier Value List
        return $javascript_identifier_value_list;
    }

    /**
     * Get SSO Identifier List
     *   (Other Application -> Authentication Application API)
     *
     * @access  private
     * @return array $app_id                    //Application ID
     * @return array $sso_identifier_list       //Application Data SSO Identifier List
     */
    function getSSOIdentifierList($app_id)
    {
        $sso_identifier_list = [];

        //Get UUM Data SSO Identifier List
        $grn_uum = $this->getUumObject();
        $uum_identifier_list = $grn_uum->getSSOIdentifierList();
        foreach ($uum_identifier_list as $display_name => $identifier) {
            $identifier_items = explode('.', $identifier);
            if ($identifier_items[2] === 'login') {
                $sso_identifier_list['login'][$display_name] = $identifier;
            } elseif ($app_id === 'uum') {
                $sso_identifier_list['uum'][$display_name] = $identifier;
            }
        }

        //Additional
        $sso_identifier_list['login'][cb_msg('grn.common', '%login%') . ':'
                                      . cb_msg('grn.common',
            '%grn.common.login.login.password%')]
            = '%grn.common.login.login.password%';
        $sso_identifier_list['login'][cb_msg('grn.common', '%login%') . ':'
                                      . cb_msg('grn.common',
            '%grn.common.login.login.session_password%')]
            = '%grn.common.login.login.session_password%';

        //Get Application Instance
        require_once('grn/application.csp');
        $app_locator = GRN_ApplicationLocator::instance();
        $apps
            = $app_locator->getInstancesWithMethod('getSSOIdentifierList',
            false);
        if (is_array($apps)) {
            //Get Application Data Identifier List
            foreach ($apps as $app) {
                if ($app_id == $app->getApplicationId()) {
                    $sso_identifier_list[$app_id]
                        = $app->getSSOIdentifierList();
                }
            }
        }

        //Return Application Data SSO Identifier List
        return $sso_identifier_list;
    }

    /**
     * Get SSO Method List
     *  (Authentication Application -> Other Application API)
     *
     * @access  public
     *
     * @param  string $app_id //Application ID
     *
     * @return array  $sso_method_list          //SSO Method Persistent Object List
     */
    function getSSOMethodList($app_id = null)
    {
        //Create SSO Method Object List
        $sso_agent = GRN_SSO_SSO_Agent::getInstance();
        $sso_method_list =& $sso_agent->getList($app_id);
        if ( ! $sso_method_list) {
            $dummy = [];

            return $dummy;
            //SSO Method List Not Found
            //cb_throw_error(E_GRN_CMMN_SSO_LIST_NOT_FOUND);
        }

        //Return SSO Method List
        return $sso_method_list;
    }

    /*** User SSO Driver Settings ***/

    /**
     * Set User Driver Settings
     *
     * @access  private
     *
     * @param  array $sso_method_id   //SSO Method ID
     * @param  array $driver_settings //User SSO Driver Settings
     *
     * @return none
     */
    function setUserDriverSettings($sso_method_id, &$driver_settings)
    {
        //Check Driver Settings
        if ( ! is_array($driver_settings)) {
            //Not Input Necessary Arguments
            cb_throw_error(E_GRN_CMMN_SSO_NOT_INPUT_NECESSARY);
        }

        //Get GRN_UUM Instance
        global $G_container_base;
        $grn_uum = $G_container_base->getInstance('uum');
        $login_user = $grn_uum->getLoginUser();

        //Maintenance User SSO Method
        $this->_maintenanceUserDriverSettings($login_user);

        //Check SSO Method Available
        $sso_method = $this->getSSOMethod($sso_method_id);

        //Set User Driver Settings
        $param_list = [];
        $user_profile =& parent::getUserProfile($login_user);
        if ( ! $user_profile->getAttribute(GRN_SSO_USER_PROFILE_PARAM_LIST,
            $param_list)
        ) {
            $param_list = [$sso_method_id => $driver_settings];
            $user_profile->createAttribute(GRN_SSO_USER_PROFILE_PARAM_LIST,
                $param_list);
            $user_profile->getAttribute(GRN_SSO_USER_PROFILE_PARAM_LIST,
                $param_list);
        } else {
            $param_list[$sso_method_id] = $driver_settings;
            $user_profile->updateAttribute(GRN_SSO_USER_PROFILE_PARAM_LIST,
                $param_list);
            $user_profile->getAttribute(GRN_SSO_USER_PROFILE_PARAM_LIST,
                $param_list);
        }

        return $param_list;
    }

    /**
     * Reset User Driver Settings
     *
     * @access  private
     *
     * @param  array $sso_method_id //SSO Method ID
     *
     * @return none
     */
    function resetUserDriverSettings($sso_method_id)
    {
        //Get GRN_UUM Instance
        global $G_container_base;
        $grn_uum = $G_container_base->getInstance('uum');
        $login_user = $grn_uum->getLoginUser();

        //Check SSO Method Available
        $sso_method = $this->getSSOMethod($sso_method_id);

        //Reset User SSO Method
        $param_list = [];
        $user_profile =& parent::getUserProfile($login_user);
        if ($user_profile->getAttribute(GRN_SSO_USER_PROFILE_PARAM_LIST,
            $param_list)
        ) {
            unset($param_list[$sso_method_id]);
            $user_profile->updateAttribute(GRN_SSO_USER_PROFILE_PARAM_LIST,
                $param_list);
        }

        return;
    }

    /**
     * Maintenance User Driver Settings
     *
     * @access  private
     *
     * @param  array $user //User Object
     *
     * @return none
     */
    function _maintenanceUserDriverSettings($user)
    {
        //Check SSO Method List
        $sso_method_list = $this->getSSOMethodList();

        //Reset Deleted User Driver Settings
        $param_list = [];
        $user_profile =& parent::getUserProfile($user);
        if ($user_profile->getAttribute(GRN_SSO_USER_PROFILE_PARAM_LIST,
            $param_list)
        ) {
            $deleted_sso_method_id_list
                = array_diff(array_keys($sso_method_list),
                array_keys($param_list));
            foreach ($deleted_sso_method_id_list as $deleted_sso_method_id) {
                unset($param_list[$deleted_sso_method_id]);
            }
            $user_profile->updateAttribute(GRN_SSO_USER_PROFILE_PARAM_LIST,
                $param_list);
        }

        return;
    }

    /**
     * get User Driver Settings
     *
     * @access  private
     *
     * @param  array $sso_method_id //SSO Method ID
     *
     * @return array  $driver_settings          //User SSO Driver Settings
     */
    function getUserDriverSettings($sso_method_id)
    {
        //Get GRN_UUM Instance
        global $G_container_base;
        $grn_uum = $G_container_base->getInstance('uum');
        $login_user = $grn_uum->getLoginUser();

        //Check SSO Method Available
        $sso_method = $this->getSSOMethod($sso_method_id);

        //Get User Driver Settings
        $param_list = [];
        $user_profile =& parent::getUserProfile($login_user);
        if ( ! $user_profile->getAttribute(GRN_SSO_USER_PROFILE_PARAM_LIST,
            $param_list)
        ) {
            $param_list = [];

            return $param_list;
        }
        if ( ! array_key_exists($sso_method_id, $param_list)) {
            $param_list = [];

            return $param_list;
        }

        return $param_list[$sso_method_id];
    }

    /**
     * Replace User Driver Settings
     *
     * @access  private
     *
     * @params  array $user_driver_settings      //driver_settings
     * @params  array $system_driver_settings    //driver_settings
     *
     * @return array $replaced_driver_settings  //Identifier Replaced Driver List
     */
    function replaceDriverSettings(
        $user_driver_settings,
        $system_driver_settings
    ) {
        //Check Arguments
        if (is_null($user_driver_settings)
            || count($user_driver_settings) === 0
        ) {
            return $system_driver_settings;
        }

        $replaced_driver_settings = [];
        foreach (
            array_keys($system_driver_settings) as $system_driver_setting_key
        ) {
            if ( ! array_key_exists($system_driver_setting_key,
                $user_driver_settings)
            ) {
                $replaced_driver_settings[$system_driver_setting_key]
                    = $system_driver_settings[$system_driver_setting_key];
                continue;
            }

            if (is_array($user_driver_settings[$system_driver_setting_key])) {
                $replaced_driver_settings[$system_driver_setting_key]
                    = $this->replaceDriverSettings($user_driver_settings[$system_driver_setting_key],
                    $system_driver_settings[$system_driver_setting_key]);
            } else {
                $replaced_driver_settings[$system_driver_setting_key]
                    = $user_driver_settings[$system_driver_setting_key];
            }
        }

        //Return Replaced Driver Setttings
        return $replaced_driver_settings;
    }

    /*** System SSO Method Setting ***/

    /**
     * Add SSO Method
     *
     * @access  private
     *
     * @param  string $app_id             //Application ID
     * @param  string $display_name       //Dsiplay Name
     * @param  string $driver_type        //SSO Driver Type(Module Name)
     * @param  int    $available_personal //Available Personal Setting Flag
     * @param  int    $available_window   //Available Other Window
     * @param  array  $driver_settings    //SSO Driver Settings
     *
     * @return object $sso_method               //SSO Method Persistent Object
     */
    function addSSOMethod(
        $app_id,
        $display_name,
        $driver_type,
        $available_personal,
        $available_window,
        &$driver_settings
    ) {
        //Not Input Necessary Arguments
        cb_trim_check($app_id, E_GRN_CMMN_SSO_NOT_INPUT_NECESSARY);
        cb_trim_check($display_name, E_GRN_CMMN_SSO_NOT_INPUT_NECESSARY);
        cb_trim_check($driver_type, E_GRN_CMMN_SSO_NOT_INPUT_NECESSARY);

        //Validate SSO Driver
        $sso_loader = new GRN_SSO_SSO_Loader();
        $sso_loader->loadDriver($driver_type, $driver_settings);

        //Create SSO Method Object
        $sso_agent = GRN_SSO_SSO_Agent::getInstance();
        $sso_method = $sso_agent->create();

        //Set SSO Method Properties
        $sso_method->set(GRN_SSO_PROPERTY_APPLICATION, $app_id);
        $sso_method->set(GRN_SSO_PROPERTY_DISPLAY_NAME, $display_name);
        $sso_method->set(GRN_SSO_PROPERTY_DRIVER_TYPE, $driver_type);
        $sso_method->set(GRN_SSO_PROPERTY_AVAILABLE_PERSONAL,
            $available_personal);
        $sso_method->set(GRN_SSO_PROPERTY_AVAILABLE_WINDOW, $available_window);
        $sso_method->set(GRN_SSO_PROPERTY_DRIVER_SETTINGS,
            serialize($driver_settings));

        //Set Creator Infomation
        $this->_setCreator($sso_method);

        //Return SSO Method Object
        return $sso_method;
    }

    /**
     * Modify SSO Method
     *
     * @access  private
     *
     * @param  string $app_id             //Application ID
     * @param  int    $sso_method_id      //SSO Method ID
     * @param  string $display_name       //Dsiplay Name
     * @param  string $driver_type        //SSO Driver Type(Module Name)
     * @param  int    $available_personal //Available Personal Setting Flag
     * @param  int    $available_window   //Available Other Window
     * @param  array  $driver_settings    //SSO Driver Settings
     *
     * @return object $sso_method               //SSO Method Persistent Object
     */
    function modifySSOMethod(
        $sso_method_id,
        $app_id,
        $display_name,
        $driver_type,
        $available_personal,
        $available_window,
        &$driver_settings
    ) {
        //Invalid SSO Method ID
        cb_trim_check($app_id, E_GRN_CMMN_SSO_NOT_INPUT_NECESSARY);
        cb_trim_check($sso_method_id, E_GRN_CMMN_SSO_INVALID_ID);

        //Not Input Necessary Arguments
        cb_trim_check($display_name, E_GRN_CMMN_SSO_NOT_INPUT_NECESSARY);
        cb_trim_check($driver_type, E_GRN_CMMN_SSO_NOT_INPUT_NECESSARY);

        //Validate SSO Driver
        $sso_loader = new GRN_SSO_SSO_Loader();
        $sso_loader->loadDriver($driver_type, $driver_settings);

        //Get SSO Method Object
        $sso_method = $this->getSSOMethod($sso_method_id);

        //Modify SSO Method Properties
        $sso_method->set(GRN_SSO_PROPERTY_APPLICATION, $app_id);
        $sso_method->set(GRN_SSO_PROPERTY_DISPLAY_NAME, $display_name);
        $sso_method->set(GRN_SSO_PROPERTY_DRIVER_TYPE, $driver_type);
        $sso_method->set(GRN_SSO_PROPERTY_AVAILABLE_PERSONAL,
            $available_personal);
        $sso_method->set(GRN_SSO_PROPERTY_AVAILABLE_WINDOW, $available_window);
        $sso_method->set(GRN_SSO_PROPERTY_DRIVER_SETTINGS,
            serialize($driver_settings));

        //Set Modifier Infomation
        $this->_setModifier($sso_method);

        //Return SSO Method Object
        return $sso_method;
    }

    /**
     * Delete SSO Method
     *
     * @access  private
     *
     * @param  int $sso_method_id //SSO Method ID
     *
     * @return none
     */
    function deleteSSOMethod($sso_method_id)
    {
        //Invalid SSO Method ID
        cb_trim_check($sso_method_id, E_GRN_CMMN_SSO_INVALID_ID);

        //Delete SSO Method Object
        $sso_agent = GRN_SSO_SSO_Agent::getInstance();
        $sso_agent->remove($sso_method_id);

        return;
    }

    /**
     * Get SSO Method
     *
     * @access  private
     *
     * @param  int $sso_method_id //SSO Method ID
     *
     * @return object $sso_method               //SSO Method Persistent Object
     */
    function getSSOMethod($sso_method_id)
    {
        //Invalid SSO Method ID
        cb_trim_check($sso_method_id, E_GRN_CMMN_SSO_INVALID_ID);

        //Create SSO Method Object
        $sso_agent = GRN_SSO_SSO_Agent::getInstance();
        $sso_method = $sso_agent->get($sso_method_id);
        if ( ! $sso_method) {
            //SSO Method Not Found
            cb_throw_error(E_GRN_CMMN_SSO_NOT_FOUND);
        }

        //Return SSO Method
        return $sso_method;
    }

    /**
     * Get SSO Driver
     *
     * @access  private
     *
     * @param  string $driver_type //SSO Driver Type
     *
     * @return object $driver                   //SSO Driver Object
     */
    function getSSODriver($driver_type)
    {
        //Get SSO Loader
        $sso_loader = new GRN_SSO_SSO_Loader();

        //Get SSO Driver
        $sso_driver = $sso_loader->getDriver($driver_type);

        //Return SSO Driver
        return $sso_driver;
    }

    /**
     * Get SSO Driver List
     *
     * @access  private
     * @return array  $sso_driver_list          //SSO Driver Object List
     */
    function &getSSODriverList()
    {
        //Get SSO Loader
        $sso_loader = new GRN_SSO_SSO_Loader();

        //Get SSO Driver List
        $sso_driver_list = $sso_loader->getDriverList();

        //Return SSO Driver List
        return $sso_driver_list;
    }

    /*** SSO User Functions ***/

    /**
     * Add SSO User
     *
     * @access  private
     *
     * @param  CB_User $user       //CB_User Object
     * @param  array   $properties //CB_User Properties
     *
     * @return GRN_SSO_User                     //GRN_SSO_User Object
     */
    function addSSOUser($user, &$properties)
    {
        //Create SSO User Object
        $sso_user_agent = GRN_SSO_User_Agent::getInstance();
        $sso_user = $sso_user_agent->create();

        //Encript Password
        $credential = '';
        if (array_key_exists('password', $properties)) {
            if (strlen($properties['password']) > 0) {
                $crypt_util = GRN_Authentication_Crypt_Utility::getInstance();
                $credential = $crypt_util->encrypt2($properties['password']);
            }
        }

        //Set SSO User Properties
        $sso_user->set(GRN_SSO_PROPERTY_USER, $user);
        $sso_user->set(GRN_SSO_PROPERTY_CREDENTIAL, $credential);

        //Return SSO User Object
        return $sso_user;
    }

    /**
     * Modify SSO User
     *
     * @access  private
     *
     * @param  CB_User $user       //CB_User Object
     * @param  array   $properties //CB_User Properties
     *
     * @return GRN_SSO_User                      //GRN_SSO_User Object
     */
    function modifySSOUser($user, &$properties)
    {
        //Create SSO User Object List
        $sso_user_agent = GRN_SSO_User_Agent::getInstance();
        $sso_user = $sso_user_agent->getbyUser($user);
        if ( ! $sso_user) {
            {
                $___ret = false;

                return $___ret;
            }
        }

        //Encript Password
        $credential = '';
        if (array_key_exists('password', $properties)) {
            if (strlen($properties['password']) > 0) {
                $crypt_util = GRN_Authentication_Crypt_Utility::getInstance();
                $credential = $crypt_util->encrypt2($properties['password']);
            }
        }

        //Set SSO User Properties
        $sso_user->set(GRN_SSO_PROPERTY_CREDENTIAL, $credential);

        //Return SSO User Object
        return $sso_user;
    }

    /**
     * Delete SSO User
     *
     * @access  private
     *
     * @param  object $user //CB_User Object
     *
     * @return BOOL   $result
     */
    function deleteSSOUser($user)
    {
        //Create SSO User Object List
        $sso_user_agent = GRN_SSO_User_Agent::getInstance();
        $sso_user = $sso_user_agent->getbyUser($user);
        if ( ! $sso_user) {
            return false;
        }

        //Delete SSO User
        $sso_user_agent->remove($sso_user->getOID());

        return true;
    }

    /**
     * Get SSO User
     *
     * @access  private
     *
     * @param  object $user //CB_User Object
     *
     * @return BOOL   $result
     */
    function getSSOUser($user)
    {
        //Create SSO User Object List
        $sso_user_agent = GRN_SSO_User_Agent::getInstance();
        $sso_user = $sso_user_agent->getbyUser($user);
        if ( ! $sso_user) {
            {
                $___ret = false;

                return $___ret;
            }
        }

        return $sso_user;
    }

    /*** Common Functions ***/

    /**
     * Set Creator
     *
     * @access private
     *
     * @param $object //Object
     *
     * @return None
     *
     */
    function _setCreator($object)
    {
        /** Check Argument **/
        if ( ! $object) {
            return false;
        }

        /** Get Login User **/
        global $G_container_base;
        $grn_uum = $G_container_base->getInstance('uum');
        $login_user = $grn_uum->getLoginUser();

        /** Get Create Time **/
        $ctime = new CB_TimeStamp();
        $ctime->unix_ts = time();

        /** Set Create Infomation **/
        if ($login_user) {
            $login_user_name = $login_user->get(GRN_SSO_PROPERTY_DISPLAY_NAME);
            $object->set(GRN_SSO_PROPERTY_CREATOR,
                $login_user);               //Creator
            $object->set(GRN_SSO_PROPERTY_MODIFIER,
                $login_user);              //Modifier
            $object->set(GRN_SSO_PROPERTY_CREATOR_NAME,
                $login_user_name);     //Creator Name
            $object->set(GRN_SSO_PROPERTY_MODIFIER_NAME,
                $login_user_name);    //Modifier Name
        }
        $object->set(GRN_SSO_PROPERTY_CTIME, $ctime);  //Create Time
        $object->set(GRN_SSO_PROPERTY_MTIME, $ctime);  //Modify Time

        return true;
    }

    /**
     * Set Modofier
     *
     * @access private
     *
     * @param $object //Object
     *
     * @return $result              //Result(BOOL)
     *
     */
    function _setModifier($object)
    {
        /** Check Argument **/
        if ( ! $object) {
            return false;
        }

        /** Get Login User **/
        global $G_container_base;
        $grn_uum = $G_container_base->getInstance('uum');
        $login_user = $grn_uum->getLoginUser();

        /** Get Modofy Time **/
        $mtime = new CB_TimeStamp();
        $mtime->unix_ts = time();

        /** Set Modify Infomation **/
        if ($login_user) {
            $login_user_name = $login_user->get(GRN_SSO_PROPERTY_DISPLAY_NAME);
            $object->set(GRN_SSO_PROPERTY_MODIFIER,
                $login_user);              //Modifier
            $object->set(GRN_SSO_PROPERTY_MODIFIER_NAME,
                $login_user_name);    //Modifier Name

        }
        $object->set(GRN_SSO_PROPERTY_MTIME, $mtime);  //Modify Time

        return true;
    }

    private $uumObject = null;

    public function setUumObject($uumObject)
    {
        $this->uumObject = $uumObject;
    }

    /**
     *
     * @return Grn_Uum
     */
    public function getUumObject()
    {
        if (is_null($this->uumObject)) {
            global $G_container_base;
            $this->setUumObject($G_container_base->getInstance('uum'));
        }

        return $this->uumObject;
    }
}

/** End Service Class **/


