<?php

namespace grn\grn;

use grn\grn\GrnException;

class Validate
{
    /**
     * exception throw
     */
    const EXCEPTION_THROW = true;

    /**
     * exception not throw
     */
    const EXCEPTION_NOT_THROW = false;

    /**
     * empty is enable.
     */
    const ENABLE_EMPTY = true;

    /**
     * empty is disable.
     */
    const DISABLE_EMPTY = false;

    /**
     * コンストラクタ
     *
     * @access  private
     */
    private function __construct()
    {
    }

    /**
     * booleanか検証する
     *
     * @access    public
     *
     * @param     boolean $value
     *
     * @return    boolean       TRUE : $value is boolean
     */
    static public function isBoolean($value)
    {
        if (is_bool($value) === false) {
            return false;
        }

        return true;
    }

    /**
     * 値が0-9のみの組み合わせか検証する
     * 先頭に「-」がある場合も許容する
     *
     * @access    public
     *
     * @param     string $value
     *
     * @return    boolean       TRUE : $value is number
     */
    static public function isNumber($value)
    {
        if ( ! is_null($value) && ! is_string($value) && ! is_int($value)) {
            return false;
        }

        if ( ! is_int($value) && ! ctype_digit($value)
             && ! (strlen($value) > 1
                   && $value[0] == '-'
                   && ctype_digit(substr($value, 1)))
        ) {
            return false;
        }

        return true;
    }

    /**
     * 値が範囲内か検証する
     *
     * @access    public
     *
     * @param     int $value
     * @param     int $startRange
     * @param     int $endRange
     *
     * @return    boolean       TRUE : $value in the range
     */
    static public function isInTheRange($value, $startRange, $endRange)
    {
        if ($startRange > $value || $value > $endRange) {
            return false;
        }

        return true;
    }

    /**
     * 値が指定した配列の中にあるかどうか
     *
     * @access    public
     *
     * @param     string $value
     * @param     array candidates
     *
     * @return    boolean       TRUE : $value in the range
     */
    static public function isIn($value, $candidates = [])
    {
        if ( ! in_array($value, $candidates)) {
            return false;
        }

        return true;
    }

    /**
     * null、空文字か検証する
     *
     * @access    public
     *
     * @param     string $value
     *
     * @return    string       TRUE : $value is null or emtpy   FALSE : $value is not null
     */
    static public function isNull($value)
    {
        if (empty($value) && ! is_array($value) && ! is_object($value)
            && (strlen($value) === 0)
            && $value !== false
        ) {
            return true;
        }

        return false;
    }

    /**
     * 値があるか検証する
     *
     * @access    public
     *
     * @param     string $value
     *
     * @return    string       TRUE : $value is not null    FALSE : $value is null or emtpy
     */
    static public function isNotNull($value)
    {
        return ! Validate::isNull($value);
    }

    /**
     * Return true when the argument is string and its length is longer than $minLength
     *
     * @access public
     *
     * @param string  $value ,
     * @param integer $minLength
     *
     * @return boolean
     */
    static public function isLongerThan($value, $minLength)
    {
        if (is_string($value) && strlen($value) > $minLength) {
            return true;
        }

        return false;
    }

    /**
     * Return true when the argument is string and its length is shorter than $maxLength
     *
     * @access public
     *
     * @param string  $value ,
     * @param integer $maxLength
     *
     * @return boolean
     */
    static public function isShorterThan($value, $maxLength)
    {
        if (is_string($value) && strlen($value) < $maxLength) {
            return true;
        }

        return false;
    }

    /**
     * @param string $version
     *
     * @return bool
     */
    static public function isVersionNumber($version)
    {
        return preg_match('/^[0-9]+\.[0-9]+\.[0-9]+$/', $version) === 1;
    }

    /**
     * @param string $url
     *
     * @return bool
     */
    static public function isURL($url)
    {
        return preg_match("{^http(s)?://[-.!~*'()\\w;/?:@&=+$,%#]+$}i", $url)
               === 1;
    }
}
