<?php
declare(strict_types=1);

namespace grn\grn\command;

require_once('grn/cli.csp');

class CommandChangeApplicationStatus
{
    const STATUS_ACTIVE = 'active';
    const STATUS_DEACTIVE = 'deactive';

    /**
     * @param array $args
     */
    public function execute(array $args)
    {
        $app_id = $args['application'] ?? '';
        $status = $args['status'] ?? '';

        $this->checkArgs($app_id, $status);

        $change_to_activate = ($status === self::STATUS_ACTIVE);

        if ($change_to_activate) {
            cb_get_application_locator()->activate($app_id);
        } else {
            cb_get_application_locator()->deactivate($app_id);
        }

        $this->finish();

        $result_message = $change_to_activate ? ' was activated.'
            : ' was deactivated.';
        $this->logging($app_id . $result_message);
    }

    /**
     * @param string $app_id
     * @param string $status
     */
    public function checkArgs(string $app_id, string $status)
    {
        $usage
            = 'Usage: change_application_status.csp application=[application code] status=[active|deactive]';
        if (empty($app_id)) {
            $this->error($usage);
        }
        if (empty($status)) {
            $this->error($usage);
        }

        if ( ! $this->isAllowedApplication($app_id)) {
            $this->error('ERROR: The specified application code is invalid.');
        }

        if ( ! $this->isAllowedStatus($status)) {
            $this->error('ERROR: The specified status is invalid.');
        }

    }

    /**
     * @param string $app_id
     *
     * @return bool
     */
    public function isAllowedApplication(string $app_id): bool
    {
        $app_ids = cb_get_application_locator()->getApplicationIds();
        $deny_app_ids = ['job'];

        return in_array($app_id, $app_ids)
               && ! in_array($app_id, $deny_app_ids);
    }

    /**
     * @param string $status
     *
     * @return bool
     */
    public function isAllowedStatus(string $status): bool
    {
        $allowed_status = [
            self::STATUS_ACTIVE,
            self::STATUS_DEACTIVE
        ];

        return in_array($status, $allowed_status);
    }

    /**
     * @param string $message
     */
    private function error(string $message)
    {
        $this->logging($message);
        $this->finish(true);
    }

    /**
     * @param bool $is_kill
     */
    private function finish(bool $is_kill = false)
    {
        $this->logging('The process is finished.');

        if ($is_kill) {
            die();
        }
    }

    /**
     * @param string $message
     */
    private function logging(string $message)
    {
        cb_simple_cli_log($message);
    }

}
