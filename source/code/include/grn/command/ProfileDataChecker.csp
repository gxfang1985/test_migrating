<?php

namespace grn\grn\command;

require_once('grn/cli.csp');

class ProfileDataChecker
{
    /** @var \CB_DatabaseConnection */
    private $db;

    /** @var array */
    private $result;

    public function __construct()
    {
        $this->db = cb_get_master_db();
    }

    /**
     */
    private function initResultData()
    {
        $this->result = [];
    }

    /**
     * @param string $tableType
     * @param string $module
     * @param string $name
     */
    private function appendInvalidData($tableType, $module, $name)
    {
        if ( ! array_key_exists($tableType, $this->result)) {
            $this->result[$tableType] = [];
        }

        $tableData = &$this->result[$tableType];

        if ( ! array_key_exists($module, $tableData)) {
            $tableData[$module] = [];
        }

        if ( ! array_key_exists($name, $tableData[$module])) {
            $tableData[$module][$name] = 1;
        } else {
            $tableData[$module][$name]++;
        }
    }

    /**
     * @param string $value
     *
     * @return bool
     */
    private function isInvalidData($value)
    {
        // Fatal error occurs in this case
        if (strpos(strtolower($value), strtolower('O:12:"DateTimeZone":0:{}'))
            !== false
        ) {
            return true;
        }

        // 'b:0;' is serialized to FALSE
        if ($value === 'b:0;') {
            return false;
        }

        //Use unserialize alter cb_unserialize. Because this code only checks that whether received data is valid or not.
        //It is OK that if $value includes any objects.
        return @unserialize($value, ["allowed_classes" => false]) === false;
    }

    /**
     * @param string $tableType
     * @param string $tableName
     */
    private function checkTableData($tableType, $tableName)
    {
        $ret
            = $this->db->query("SELECT col_module, col_name, col_value FROM ${tableName}");
        while ($row = $this->db->fetch_assoc($ret)) {
            if ($this->isInvalidData($row['col_value'])) {
                $this->appendInvalidData($tableType, $row['col_module'],
                    $row['col_name']);
            }
        }
    }

    /**
     * @return array
     */
    public function check()
    {
        $this->initResultData();

        $userTableNum = cb_get_user_tables();
        for ($i = 0; $i < $userTableNum; $i++) {
            $tableName = 'tab_cb_profiledata' . CB_PERSISTENT_NAMESEPARATOR
                         . CB_DATABASE_USER_TABLE_PREFIX . $i;
            $this->checkTableData('personal', $tableName);
        }

        $this->checkTableData('system',
            'tab_cb_profiledata' . CB_PERSISTENT_NAMESEPARATOR . 'system');

        return $this->result;
    }

    /**
     * @param array $result
     */
    public static function printResult($result)
    {
        if (empty($result)) {
            cb_simple_cli_log("No invalid data.");
        } else {
            cb_simple_cli_log("Invalid data is found.");
            foreach ($result as $table => $tableData) {
                foreach ($tableData as $module => $value) {
                    ksort($value);
                    foreach ($value as $name => $count) {
                        cb_simple_cli_log("table: ${table}, module: ${module}, name: ${name}, count: ${count}");
                    }
                }
            }
        }
    }
}
