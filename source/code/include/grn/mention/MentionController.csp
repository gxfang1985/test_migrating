<?php

declare(strict_types=1);

namespace grn\grn\mention;

use grn\grn\dialog\MemberNameWithDialog;
use grn\grn\MemberLogic;
use grn\grn\mention\bean\MentionObject;
use grn\grn\mention\bean\MentionObjectCollection;

class MentionController
{
    private function __construct()
    {
    }

    /**
     * @param array  $args     Request parameters ($G_INPUT)
     * @param string $arg_name Parameter name for Mention
     *
     * @return MentionObjectCollection
     */
    public static function getMentionObjectsFromRequestArgs(
        array $args,
        $arg_name = 'mention'
    ): MentionObjectCollection {
        $mention_json = $args[$arg_name] ?? '';

        if ( ! is_string($mention_json) || empty($mention_json)) {
            return new MentionObjectCollection();
        }

        $mention_objects
            = MentionObjectCollection::createFromJson($mention_json);
        $mention_objects->loadName();

        return $mention_objects;
    }

    /**
     * Get multiple mention data.
     *
     * @param MentionObjectCollection[] $mention_collection_list
     *
     * @param int                       $offset Offset
     * @param int                       $limit  Limit
     *
     * @return array Member after reformatted
     */
    public static function createMemberListsForView(
        array $mention_collection_list,
        $offset = 0,
        $limit = -1
    ) {
        $result = [];
        $members = [];
        $comment_mentions = [];
        foreach ($mention_collection_list as $index => $mention_collection) {
            $mention_list = $mention_collection->subList($offset, $limit);
            $deleted_user_index = 1;
            /** @var MentionObject $mention */
            foreach ($mention_list as $mention) {
                $member = [];
                $member_id = $mention->getValue();
                $member[MemberLogic::MEMBER_ID] = $member_id;
                $member_key = '';
                $member[MemberLogic::MEMBER_TYPE] = $mention->getType();
                switch ($mention->getType()) {
                    case MemberLogic::TYPE_ORGANIZATION:
                        $member_key = MemberLogic::PREFIX_ORGANIZATION
                                      . $member_id;
                        break;
                    case MemberLogic::TYPE_STATIC_ROLE:
                        $member_key = MemberLogic::PREFIX_STATIC_ROLE
                                      . $member_id;
                        break;
                    case MemberLogic::TYPE_USER:
                        $member_key = MemberLogic::PREFIX_USER . $member_id;
                        break;
                }

                // Member is deleted
                if ( ! $member_key) {
                    $member_key = MemberNameWithDialog::PREFIX_DELETED_USER
                                  . $deleted_user_index;
                    $deleted_user_index++;
                }

                $members[$member_key] = $member;
                $comment_mentions[$index][$member_key] = $member;
                $comment_mentions[$index][$member_key]['displayName']
                    = $mention->getName();
                $comment_mentions[$index][$member_key]['id']
                    = $member_id;
            }
        }

        // multiple get members
        $members_for_view = MemberLogic::getInstance()
                                       ->getDisplayMemberList($members);

        foreach ($comment_mentions as $comment_id => $comment_mention) {
            $deleted_user_index = 1;
            foreach ($comment_mention as $member_id => $mention) {
                $member_key = $member_id;

                // if member doesn't exist after get from DB
                if ( ! isset($members_for_view[$member_id])) {
                    $member = $comment_mentions[$comment_id][$member_id];
                    $member['isDeleted'] = true;
                } else {
                    $member = $members_for_view[$member_id];
                }

                // check if member is deleted and add prefix data before use plugin grn_member_name_with_dialog
                if (isset($member['isDeleted']) && $member['isDeleted']) {
                    $member_key = MemberNameWithDialog::PREFIX_DELETED_USER
                                  . $deleted_user_index;
                    $deleted_user_index++;
                    $member = $comment_mentions[$comment_id][$member_id];
                    $member['isDeleted'] = true;
                } else {
                    $member['isDeleted'] = false;
                }
                $result[$comment_id][$member_key] = $member;
            }
        }

        return $result;
    }
}
