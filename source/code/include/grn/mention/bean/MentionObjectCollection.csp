<?php

declare(strict_types=1);

namespace grn\grn\mention\bean;

use grn\grn\collection\BeanCollectionAbstract;
use grn\grn\MemberLogic;
use grn\grn\mention\bean\MentionObject;

class MentionObjectCollection extends BeanCollectionAbstract
{
    protected $allowedClasses = [MentionObject::class];

    public function loadName()
    {
        $ids = $this->getObjectIdsGroupByType();

        $uum = cb_lwc_uum();

        // get information of the objects
        $uum_info = [
            MemberLogic::TYPE_USER         => $uum->getUsersInfo($ids[MemberLogic::TYPE_USER]),
            MemberLogic::TYPE_ORGANIZATION => $uum->getGroupInfoList($ids[MemberLogic::TYPE_ORGANIZATION]),
            MemberLogic::TYPE_STATIC_ROLE  => $uum->getStaticRoleInfoList($ids[MemberLogic::TYPE_STATIC_ROLE]),
        ];

        $column_mapping = [
            MemberLogic::TYPE_USER         => 'col_display_name',
            MemberLogic::TYPE_ORGANIZATION => 'col_name',
            MemberLogic::TYPE_STATIC_ROLE  => 'col_foreign_key',
        ];

        // set name to the objects
        // and remove the objects which are not existing in the system
        $new_objects = [];

        $not_found_data = [];
        foreach ($this as &$object) {
            $id = $object->getValue();
            $type = $object->getType();
            $object_info_list = $uum_info[$type];
            if (array_key_exists($id, $object_info_list)) {
                $column_name = $column_mapping[$type];
                $object->setName($object_info_list[$id][$column_name]);
                $new_objects[] = $object;
            } else {
                $not_found_data[$type] = true;
            }
        }

        if (isset($not_found_data[MemberLogic::TYPE_USER])) {
            cb_throw_error('GRN_CMMN_00105');
        }

        if (isset($not_found_data[MemberLogic::TYPE_ORGANIZATION])) {
            cb_throw_error('GRN_CMMN_00106');
        }

        require_once('grn/system_logic.csp');
        $system = \GRN_System::getInstance();
        if (isset($not_found_data[MemberLogic::TYPE_STATIC_ROLE])
            || ($uum_info[MemberLogic::TYPE_STATIC_ROLE]
                && ! $system->getPermissionToSelectRole())
        ) {
            cb_throw_error('GRN_CMMN_00107');
        }

        $this->_beanCollection = $new_objects;
    }

    /**
     * @return array Format: ['user' => [...], 'group' => [...], 'static_role' => [...] ]
     */
    public function getObjectIdsGroupByType()
    {
        $result = [
            MemberLogic::TYPE_USER         => [],
            MemberLogic::TYPE_ORGANIZATION => [],
            MemberLogic::TYPE_STATIC_ROLE  => []
        ];

        foreach ($this as $object) {
            if ( ! MentionObject::isValidMemberObjectType($object->getType())) {
                continue;
            }

            $result[$object->getType()][] = $object->getValue();
        }

        return $result;
    }

    public function getUserIds(): array
    {
        $ids_grouped = $this->getObjectIdsGroupByType();

        $user_ids = $ids_grouped[MemberLogic::TYPE_USER];
        $org_ids = $ids_grouped[MemberLogic::TYPE_ORGANIZATION];
        $role_ids = $ids_grouped[MemberLogic::TYPE_STATIC_ROLE];

        $uum = cb_lwc_uum();

        $result = [];
        foreach ($user_ids as $id) {
            $result[$id] = $id;
        }

        $group_users = $uum->getGroupsUsers($org_ids);
        /** @var \CB_User $user */
        foreach ($group_users as $user) {
            $result[$user->getOID()] = $user->getOID();
        }

        $role_user_ids = $uum->getRolesUserIds($role_ids);
        foreach ($role_user_ids as $id) {
            $result[$id] = $id;
        }

        return array_values($result);
    }

    /**
     * @return string
     */
    public function toJson(): string
    {
        $objects = [];

        /** @var MentionObject $object */
        foreach ($this as $object) {
            $objects[] = $object->toArray();
        }

        return json_encode($objects);
    }

    /**
     * @param string $json
     *
     * @return MentionObjectCollection
     */
    public static function createFromJson(string $json): MentionObjectCollection
    {
        $mention_objects = new MentionObjectCollection();
        $objects = json_decode($json, true);

        if ( ! is_array($objects)) {
            return $mention_objects;
        }

        foreach ($objects as $object) {
            if ( ! MentionObject::isValidMemberObjectType($object['type'] ??
                                                          '')
            ) {
                continue;
            }

            if ($object['type'] == MemberLogic::TYPE_STATIC_ROLE
                && $object['value'] == MemberLogic::ADMIN_ROLE_ID
            ) {
                continue;
            }
            $mention_objects->appendBean(new MentionObject($object));
        }

        return $mention_objects;
    }

    /**
     * Slide collection
     *
     * @param int $offset
     * @param int $limit
     *
     * @return MentionObjectCollection
     */
    public function subList($offset = 0, $limit = -1)
    {
        if ($limit === -1) {
            $limit = $this->count();
        }
        $mention_objects = $this->getIterator();
        $result = new MentionObjectCollection();
        $count = 0;

        foreach ($mention_objects as $mention_object) {
            $count++;
            if ($count < $offset) {
                continue;
            }
            if ($count > $limit) {
                break;
            }

            $result->appendBean($mention_object);
        }

        return $result;
    }
}
