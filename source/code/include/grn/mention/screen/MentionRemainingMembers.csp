<?php
declare(strict_types=1);

namespace grn\grn\mention\screen;

use grn\grn\MemberLogic;
use grn\grn\mention\MentionMemberNameWithDialog;
use grn\grn\mention\MobileMentionMemberNameWithDialog;
use grn\grn\JSONResponse;
use grn\space\screen\GenericScreenBase;
use GRN_ControllerUtil;

require_once('grn/smarty.csp');

abstract class MentionRemainingMembers
{
    public function fetch()
    {
        global $G_INPUT;
        $smarty = new \GRN_Smarty();
        $offset
            = GenericScreenBase::MAX_NUM_DISPLAY_MEMBER
              + 1;
        $params['members'] = $this->getMembers($offset);
        $params['user_profile_url_array']
            = \GRN_ControllerUtil::createMultiUserProfileUrl($params['members']);
        $params['append_script_file'] = false;
        $params['is_display_deleted_user'] = true;
        $params['has_space_between_item'] = false;
        $params['dialog_name'] = $G_INPUT['dialog_name'] ??
                                 'span-member-dialog-mention';

        if (isset($G_INPUT['is_mobile'])) {
            $dialog_mention = new MobileMentionMemberNameWithDialog($smarty);
        } else {
            $dialog_mention = new MentionMemberNameWithDialog($smarty);
        }
        $dialog_mention->fetch($params);
        $json = JSONResponse::create();
        $json->response(['html' => $dialog_mention->fetch($params)]);
    }

    /**
     * Get member data
     *
     * @param int $offset
     *
     * @return array
     */
    protected function getMembers(int $offset = 0): array
    {
        return [];
    }

    /**
     * Get members for reply all. Members include Creator & Mention members
     * The user is deleted or logged in will be removed
     *
     * @return array
     */
    public function getMembersForReplyAll()
    {
        global $G_INPUT;
        $members = [];
        $creator_id = $G_INPUT['creator_id'] ?? 0;
        $creator = $this->getUser(intval($creator_id));
        if ($creator) {
            $members[$creator_id] = $creator;
        }

        $comment_members = $this->getMembers();
        if ($comment_members) {
            $members = $members + $comment_members;
        }

        foreach ($members as $key => $member) {
            // remove deleted user & login user
            if ((isset($member[MemberLogic::IS_DELETED])
                 && $member[MemberLogic::IS_DELETED])
                || (isset($member[MemberLogic::IS_LOGIN_USER])
                    && $member[MemberLogic::IS_LOGIN_USER])
            ) {
                unset($members[$key]);
            }
        }

        return $this->formatMembers($members);
    }

    /**
     * Get User by Id
     *
     * @param int $id
     *
     * @return array
     */
    public function getUser(int $id)
    {
        if ( ! $id) {
            return [];
        }

        $member = [];
        $member[MemberLogic::MEMBER_ID] = $id;
        $member[MemberLogic::MEMBER_TYPE] = MemberLogic::TYPE_USER;
        $members_for_view = MemberLogic::getInstance()
                                       ->getDisplayMemberList([$member]);

        return $members_for_view[$id] ?? [];
    }

    /**
     * Format member list
     *
     * @param array $members
     *
     * @return array
     */
    protected function formatMembers(array $members)
    {

        $formatted_member = [];
        foreach ($members as $member) {
            $member_id = $member[MemberLogic::MEMBER_ID];
            $result = [];
            $result[MemberLogic::MEMBER_TYPE]
                = $member[MemberLogic::MEMBER_TYPE];
            $result[MemberLogic::MEMBER_NAME_FOR_JS]
                = $member[MemberLogic::DISPLAY_NAME];
            $result[MemberLogic::MEMBER_ID] = $member_id;
            $result[MemberLogic::MEMBER_URL]
                = GRN_ControllerUtil::getUserProfileURL($member_id);
            $formatted_member[] = $result;
        }

        return $formatted_member;
    }
}
