<?php

declare(strict_types=1);

namespace grn\grn\mention\dao;

use grn\grn\MemberLogic;
use grn\grn\mention\bean\MentionObject;
use grn\grn\mention\bean\MentionObjectCollection;

abstract class MentionDAO
{
    protected $dbConn;
    protected $mentionTableName = '';

    /**
     * MentionDAO constructor.
     */
    public function __construct()
    {
        $this->dbConn = cb_get_app_db($this->getAppId());
        $this->mentionTableName = $this->getMentionTableName();
    }

    abstract protected function getMentionTableName();

    abstract protected function getAppId();

    /**
     * @param string                  $comment_id
     * @param MentionObjectCollection $mention_collection
     */
    public function insert(
        string $comment_id,
        MentionObjectCollection $mention_collection
    ) {
        if ($mention_collection->count() < 1) {
            return;
        }
        $query = "INSERT INTO {$this->mentionTableName} VALUES ";
        $insert_values = [];
        foreach ($mention_collection as $mention) {
            $data = $this->prepareInsertData($mention);
            $insert_values[] = cb_queryf($this->dbConn,
                "(DEFAULT, @S, @S, @S, @S, '@S', '@S')",
                $comment_id,
                $data[MemberLogic::TYPE_USER],
                $data[MemberLogic::TYPE_ORGANIZATION],
                $data[MemberLogic::TYPE_STATIC_ROLE],
                $data['name'],
                $data['type']);
        }

        $query .= implode(', ', $insert_values);
        $query .= ';';
        $this->dbConn->query($query);
    }

    /**
     * @param string[] $comment_id_list
     *
     * @return MentionObjectCollection[]
     */
    public function getByCommentIdList(array $comment_id_list): array
    {
        $query
            = "SELECT _id, col_comment, col_type as type, col_name as name,
            (CASE WHEN col_type = '" . MemberLogic::TYPE_USER . "'
                THEN col_user
            WHEN col_type = '" . MemberLogic::TYPE_ORGANIZATION . "'
                THEN col_group
            WHEN col_type = '" . MemberLogic::TYPE_STATIC_ROLE . "'
                THEN col_role
            END) AS value FROM {$this->mentionTableName} WHERE ";
        $query .= cb_queryf($this->dbConn, "col_comment IN (@A);",
            $comment_id_list);
        $result = $this->dbConn->query($query);
        $mention_rows = [];
        while ($row = $this->dbConn->fetch_assoc($result)) {
            $comment_id = $row['col_comment'];
            if ( ! array_key_exists($comment_id, $mention_rows)) {
                $mention_rows[$comment_id] = [];
            }
            $mention_rows[$comment_id][] = $row;
        }
        $this->dbConn->free_result($result);

        $result = [];
        foreach ($mention_rows as $comment_id => $rows) {
            $mention_collection = new MentionObjectCollection();
            foreach ($rows as $row) {
                $mention_collection->appendBean(new MentionObject($row));
            }
            $result[$comment_id] = $mention_collection;
        }

        return $result;
    }

    /**
     * @param MentionObject $mention
     *
     * @return array
     */
    private function prepareInsertData(MentionObject $mention): array
    {
        $result = [
            'type'                         => $mention->getType(),
            'name'                         => $mention->getName(),
            MemberLogic::TYPE_USER         => 'NULL',
            MemberLogic::TYPE_ORGANIZATION => 'NULL',
            MemberLogic::TYPE_STATIC_ROLE  => 'NULL',
        ];

        $result[$mention->getType()] = $mention->getValue();

        return $result;
    }
}
