<?php

/**
 * 監査対象オブジェクトのベースクラスを提供する.
 *
 * @package grn.common
 * @version 1.0
 */

require_once('fw/persistent.csp');
require_once('fw/uum_core.csp');

/**
 * Inspection base class.
 *
 * @abstract
 * @package grn.common
 */
class GRN_InspectionBase extends CB_PersistentBase
{
    /**
     * Module id (not application id).
     *
     * @access private
     */
    var $__module_id;

    function __construct($row, $module_id)
    {
        parent::__construct($row);
        $this->__module_id = $module_id;
    }

    var $col_creator = ['type' => 'weak_relation', 'to' => 'CB_User'];
    var $col_creator_name = ['type' => 'char', 'lazy' => true];
    var $col_creator_foreign_key
        = [
            'type'   => 'char',
            'length' => CB_DATABASE_MAX_STRINDEX,
            'lazy'   => true
        ];
    var $col_ctime = ['type' => 'timestamp'];
    var $col_modifier = ['type' => 'weak_relation', 'to' => 'CB_User'];
    var $col_modifier_name = ['type' => 'char', 'lazy' => true];
    var $col_modifier_foreign_key
        = [
            'type'   => 'char',
            'length' => CB_DATABASE_MAX_STRINDEX,
            'lazy'   => true
        ];
    var $col_mtime = ['type' => 'timestamp'];

    /**
     * Override this to format your own message.
     *
     * @param string $action Action name.
     *
     * @return string
     */
    function getInspectionMessage($action)
    {
        $class_name = strtolower(get_class($this));
        switch ($action) {
            case 'create':
                return "[create] ${class_name}";

            case 'update':
                $oid = $this->getOID();

                return "[update] ${class_name} (id:${oid})";

            case 'delete':
                $oid = $this->getOID();

                return "[delete] ${class_name} (id:${oid})";

            default:
                assert('FALSE');
        }
    }

    /**
     * Override this to your custom logging handler.
     *
     * @param string $action Action name.
     * @param object $logger Logger object.
     */
    function customLog($action, $logger)
    {
        $params = [];
        switch ($action) {
            case 'create':
                break;

            case 'update':
            case 'delete':
                $oid = $this->getOID();
                $params['id'] = $oid;
                break;

            default:
                assert('FALSE');
        }
        $logger->noticeEx($action, strtolower(get_class($this)), $params);
    }

    /**
     * Generic event trigger method.
     *
     * @param string $action Action name.
     */
    function onAction($action)
    {
        require_once('grn/logger.csp');
        $lm = CB_LoggerManager::getInstance();
        $l = $lm->getLogger($this->__module_id);
        $msg = $this->getInspectionMessage($action);
        if (is_array($msg) && count($msg) == 3) {
            $l->noticeEx($msg['action'], $msg['target'], $msg['params']);
        } elseif ($msg === false) {
            $this->customLog($action, $l);
        } else {
            $l->notice($msg);
        }
    }

    /**
     * Initialize creation/modification information, then
     * trigger "create" action (using onAction() method).
     *
     * @param mixed $user {@link CB_User}, or NULL.
     */
    function onCreate($user)
    {
        if ($user) {
            $this->set('creator', $user);
            $this->set('creator_name', $user->get('display_name'));
            $this->set('creator_foreign_key', $user->get('foreign_key'));
            $this->set('modifier', $user);
            $this->set('modifier_name', $user->get('display_name'));
            $this->set('modifier_foreign_key', $user->get('foreign_key'));
        }
        $ts = new CB_TimeStamp();
        $ts->unix_ts = time();
        $this->set('ctime', $ts);
        $this->set('mtime', $ts);

        $this->onAction('create');
    }

    /**
     * Update modification information, then trigger "update"
     * action (using onAction() method).
     *
     * @param mixed $user {@link CB_User}, or NULL.
     * @param       $col_name
     * @param       $write_log
     */
    function onUpdate($user, $col_name = null, $write_log = true)
    {
        if ($user) {
            $this->set('modifier', $user);
            $this->set('modifier_name', $user->get('display_name'));
            $this->set('modifier_foreign_key', $user->get('foreign_key'));
        } else {
            $this->set('modifier', null);
            $this->set('modifier_name', null);
            $this->set('modifier_foreign_key', null);
        }
        $ts = new CB_TimeStamp();
        $ts->unix_ts = time();
        $this->set('mtime', $ts);

        if ($write_log) {
            $this->onAction('update');
        }
    }

    /**
     * Trigger "delete" action.
     */
    function onDelete()
    {
        $this->onAction('delete');
    }
}

/**
 * Inspection base class.
 *
 * @abstract
 * @package grn.common
 */
class GRN_InspectionBaseEx extends CB_PersistentBase
{
    /**
     * Module id (not application id).
     *
     * @access private
     */
    var $__module_id;

    function __construct(& $row, $module_id)
    {
        parent::__construct($row);
        $this->__module_id = $module_id;
    }

    var $col_creator
        = [
            'type'                  => 'weak_relation',
            'to'                    => 'CB_User',
            'no_foreign_key_create' => true
        ];
    var $col_creator_name = ['type' => 'char', 'lazy' => true];
    var $col_creator_foreign_key
        = [
            'type'   => 'char',
            'length' => CB_DATABASE_MAX_STRINDEX,
            'lazy'   => true
        ];
    var $col_ctime = ['type' => 'timestamp'];
    var $col_modifier
        = [
            'type'                  => 'weak_relation',
            'to'                    => 'CB_User',
            'no_foreign_key_create' => true
        ];
    var $col_modifier_name = ['type' => 'char', 'lazy' => true];
    var $col_modifier_foreign_key
        = [
            'type'   => 'char',
            'length' => CB_DATABASE_MAX_STRINDEX,
            'lazy'   => true
        ];
    var $col_mtime = ['type' => 'timestamp'];

    /**
     * Override this to format your own message.
     *
     * @param string $action Action name.
     *
     * @return string
     */
    function getInspectionMessage($action)
    {
        $class_name = strtolower(get_class($this));
        switch ($action) {
            case 'create':
                return "[create] ${class_name}";

            case 'update':
                $oid = $this->getOID();

                return "[update] ${class_name} (id:${oid})";

            case 'delete':
                $oid = $this->getOID();

                return "[delete] ${class_name} (id:${oid})";

            default:
                assert('FALSE');
        }
    }

    /**
     * Override this to your custom logging handler.
     *
     * @param string $action Action name.
     * @param object $logger Logger object.
     */
    function customLog($action, & $logger)
    {
        $params = [];
        switch ($action) {
            case 'create':
                break;

            case 'update':
            case 'delete':
                $oid = $this->getOID();
                $params['id'] = $oid;
                break;

            default:
                assert('FALSE');
        }
        $logger->noticeEx($action, strtolower(get_class($this)), $params);
    }

    /**
     * Generic event trigger method.
     *
     * @param string $action Action name.
     */
    function onAction($action)
    {
        require_once('grn/logger.csp');
        $lm = CB_LoggerManager::getInstance();
        $l =& $lm->getLogger($this->__module_id);
        $msg = $this->getInspectionMessage($action);
        if ($msg === false) {
            $this->customLog($action, $l);
        } else {
            $l->notice($msg);
        }
    }

    /**
     * Initialize creation/modification information, then
     * trigger "create" action (using onAction() method).
     *
     * @param mixed $user {@link CB_User}, or NULL.
     */
    function onCreate(& $user)
    {
        if ($user) {
            $this->set('creator', $user);
            $this->set('creator_name', $user->get('display_name'));
            $this->set('creator_foreign_key', $user->get('foreign_key'));
            $this->set('modifier', $user);
            $this->set('modifier_name', $user->get('display_name'));
            $this->set('modifier_foreign_key', $user->get('foreign_key'));
        }
        $ts = new CB_TimeStamp();
        $ts->unix_ts = time();
        $this->set('ctime', $ts);
        $this->set('mtime', $ts);

        $this->onAction('create');
    }

    /**
     * Update modification information, then trigger "update"
     * action (using onAction() method).
     *
     * @param mixed $user {@link CB_User}, or NULL.
     */
    function onUpdate(& $user)
    {
        if ($user) {
            $this->set('modifier', $user);
            $this->set('modifier_name', $user->get('display_name'));
            $this->set('modifier_foreign_key', $user->get('foreign_key'));
        } else {
            $this->set('modifier', null);
            $this->set('modifier_name', null);
            $this->set('modifier_foreign_key', null);
        }
        $ts = new CB_TimeStamp();
        $ts->unix_ts = time();
        $this->set('mtime', $ts);

        $this->onAction('update');
    }

    /**
     * Trigger "delete" action.
     */
    function onDelete()
    {
        $this->onAction('delete');
    }
}


/**
 * 監査を実行するとともに監査オブジェクトのデータも書き込む
 *
 * @param string $target_name  監査オブジェクトのテーブル名
 * @param array  $append_infos 監査オブジェクトの情報
 * @param array  $condition    条件式
 * @param array  $user_info    ユーザー情報
 * @param string $action       アクション
 */
function grn_set_inspection_state(
    $target_name,
    $append_infos,
    $condition,
    $user_info,
    $action
) {
    global $G_container_base;
    $db = $G_container_base->getInstance('dbconn');

    $_columns = [
        'col_creator'              => null,
        'col_creator_name'         => null,
        'col_creator_foreign_key'  => null,
        'col_ctime'                => null,
        'col_modifier'             => null,
        'col_modifier_name'        => null,
        'col_modifier_foreign_key' => null,
        'col_mtime'                => null
    ];
    switch ($action) {
        case 'create':
            $_columns['col_creator'] = $user_info['_id'];
            $_columns['col_creator_name']
                = $user_info['col_display_name'];
            $_columns['col_creator_foreign_key']
                = $user_info['col_foreign_key'];
            $_columns['col_modifier'] = $user_info['_id'];
            $_columns['col_modifier_name']
                = $user_info['col_display_name'];
            $_columns['col_modifier_foreign_key']
                = $user_info['col_foreign_key'];
            $_columns['col_ctime'] = time();
            $_columns['col_mtime'] = time();
            break;

        case 'update':
            unset($_columns['col_creator']);
            unset($_columns['col_creator_name']);
            unset($_columns['col_creator_foreign_key']);
            unset($_columns['col_ctime']);
            $_columns['col_modifier'] = $user_info['_id'];
            $_columns['col_modifier_name']
                = $user_info['col_display_name'];
            $_columns['col_modifier_foreign_key']
                = $user_info['col_foreign_key'];
            $_columns['col_mtime'] = time();
            break;

        case 'delete':
        default:
            break;
    }
    if (is_array($append_infos)) {
        foreach (array_keys($append_infos) as $key) {
            $_columns['col_' . $key] = $append_infos[$key];
        }
    }

    $query_infos = [];
    foreach (array_keys($_columns) as $key) {
        $data =& $_columns[$key];

        if (is_string($data)) {
            $data = "'" . $db->escape($data) . "'";
        } elseif (is_object($data) && is_a($data, 'CB_PersistentBase')) {
            $data = $data->getOID();
        } elseif (is_null($data)) {
            $data = 'NULL';
        }
        $query_infos[$key] = $data;
    }

    // execute query
    $columns = implode(',', array_keys($query_infos));
    $values = implode(',', $query_infos);

    switch ($action) {
        case 'create':
            $query = sprintf('INSERT INTO %s (%s) VALUES(%s)', $target_name,
                $columns, $values);
            break;
        case 'update':
            $sets = [];
            foreach (array_keys($query_infos) as $key) {
                $sets[] = "{$key}=" . $query_infos[$key];
            }
            $set = implode(',', $sets);
            $query = sprintf('UPDATE %s SET %s WHERE %s', $target_name, $set,
                $condition);
            break;
        case 'delete':
            $query = sprintf('DELETE FROM %s WHERE %s', $target_name,
                $condition);
            break;
    }
    $result = $db->query($query);
    if ($result === false) {
        $db->throwError(['query' => 'query failed: ' . $query]);
    }

    return true;
}

/**
 * 監査のアクションを実行する
 *
 * @param string $module_id  モジュールID
 * @param string $target     ターゲット
 * @param string $action     アクション
 * @param array  $properties プロパティ
 */
function grn_inspection_action($module_id, $target, $action, $properties)
{
    require_once('grn/logger.csp');
    $lm = CB_LoggerManager::getInstance();
    $l = $lm->getLogger($module_id);
    $l->noticeEx($action, $target, $properties);
}


