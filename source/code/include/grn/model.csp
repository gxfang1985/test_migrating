<?php
require_once('grn/application.csp');

/**
 * モデルクラス
 */
class GRN_RModel
{
    /**
     * データベース接続
     *
     * @var CB_DatabaseConnection
     */
    protected $_dbconn = null;

    /**
     * テーブル名
     *
     * @var string
     */
    protected $_table_name = null;

    /**
     * カラム情報一覧
     *
     * @var array
     */
    protected $_columns_info = [];

    /**
     * 別名一覧
     *
     * @var array
     */
    protected $_aliases = [];

    /**
     * コンストラクタ
     *
     * @param   string $table_name テーブル名
     */
    public function __construct($table_name)
    {
        $this->_dbconn = cb_get_master_db();
        $this->_table_name = $table_name;
    }

    /**
     * SELECT句のカラム名一覧を取得
     * （管理するモデルの）テーブルのプライマリキーを必ず_idとして取得
     *
     * @param   array $table_infos   カラム名一覧（テーブル名とカラム名一覧）
     * @param   array $table_aliases テーブルの別名一覧（テーブル名と別名）
     *
     * @return  string  SELECT句のカラム名一覧
     */
    protected function _formatColumns($table_infos, $table_aliases)
    {
        $values = [];
        foreach ($table_infos as $table_name => $column_infos) {
            $table_alias = $table_aliases[$table_name];
            foreach ($column_infos as $column_name => $column_alias) {
                $values[$column_alias]
                    = "{$table_alias}.{$column_name} AS {$column_alias}";
            }
        }

        return implode(',', $values);
    }

    /**
     * レコードを一括挿入
     *
     * @param   array $columns カラム名一覧
     * @param   array $records レコード一覧（プロパティのみ）
     *
     * @return  string 最後に挿入したレコードのプライマリキー
     */
    protected function _insertRecords($columns, $records)
    {
        $values = [];
        foreach ($records as $record) {

            foreach ($record as $key => $value) {
                if (false === array_search($key, $columns)) {
                    unset($record[$key]);
                } else {
                    if (0 < strlen($value)) {
                        $record[$key] = cb_queryf($this->_dbconn, "'@S'",
                            $value);
                    } else {
                        $record[$key] = 'null';
                    }
                }
            }

            $sorted_record = [];
            foreach ($columns as $column) {
                $sorted_record[$column] = $record[$column];
            }

            $value = implode(',', $sorted_record);
            $values[] = "({$value})";
        }

        $query = sprintf("INSERT INTO %s(%s) VALUES%s",
            $this->_table_name,
            implode(',', $columns),
            implode(',', $values));
        if (false === $this->_dbconn->query($query)) {
            $this->_dbconn->throwError(['query' => "failed query on INSERT: {$query}"]);
        }

        return $this->_dbconn->get_insert_id();
    }

    /**
     * レコードを一括変更
     *
     * @param   string $condition  検索条件文
     * @param   array  $properties プロパティ一覧（カラム名とプロパティ）
     */
    protected function _updateRecords($condition, $properties)
    {
        foreach ($properties as $key => $value) {
            if (array_key_exists($key, $properties) && 0 < strlen($value)) {
                $properties[$key] = cb_queryf($this->_dbconn, "{$key}='@S'",
                    $value);
            } else {
                $properties[$key] = "{$key}=null";

            }
        }
        $query = sprintf('UPDATE %s SET %s WHERE (%s);',
            $this->_table_name,
            implode(',', $properties),
            $condition);
        if (false === $this->_dbconn->query($query)) {
            $this->_dbconn->throwError(['query' => "failed query on UPDATE: {$query}"]);
        }
    }

    /**
     * レコードを一括削除
     *
     * @param   string $condition 検索条件文
     */
    protected function _deleteRecords($condition = null)
    {
        if (0 < strlen($condition)) {
            $condition = " WHERE ({$condition})";
        }

        $query = "DELETE FROM {$this->_table_name}{$condition}";
        if (false === $this->_dbconn->query($query)) {
            $this->_dbconn->throwError(['query' => "failed query on DELETE: {$query}"]);
        }
    }
}


