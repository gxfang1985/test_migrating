<?php

/**
 * Logging utilities.
 *
 * @package grn.common
 */
require_once('fw/logger.csp');
require_once('fw/module.csp');
require_once('fw/config_manager.csp');
require_once('fw/i18n.csp');

define('GRN_LOGGER_THRESHOLD_DEBUG', 'debug');
define('GRN_LOGGER_THRESHOLD_INFO', 'info');
define('GRN_LOGGER_THRESHOLD_NOTICE', 'notice');
define('GRN_LOGGER_THRESHOLD_WARNING', 'warning');
define('GRN_LOGGER_THRESHOLD_ERROR', 'error');
define('GRN_LOGGER_THRESHOLD_CRITICAL', 'critical');
define('GRN_LOGGER_DBLOGGING_ENABLE', '1');
define('GRN_LOGGER_DBLOGGING_DISABLE', '0');

/**
 * Syslog utility.
 *
 * This is managed by the light-weight container (garoon_lwc.ini),
 * and is used by the code/plugin/fw/logger/syslog.csp plugin.
 *
 * @package grn.common
 */
class GRN_Syslog
{
    function __construct()
    {
    }

    /**
     * set by LWC.
     */
    var $_facility;

    function boot()
    {
        global $G_config_common;
        $ident = $G_config_common->get('Global', 'app_name');

        $facility = constant($this->_facility);
        openlog($ident, LOG_CONS | LOG_ODELAY | LOG_PID, $facility);
    }

    function shutdown()
    {
        closelog();
    }

    function log($priority, $msg)
    {
        syslog($priority, $msg);
    }
}

/**
 * Logger config for Ogre.
 *
 * @package grn.common
 */
class GRN_LoggerConfig extends CB_LoggerConfig
{
    /**
     * @var CB_DBConfigManager
     * @access private
     */
    var $_config = null;

    /**
     * This method is automatically called by LWC.
     */
    public function boot()
    {
        $this->_config = new CB_DBConfigManager('grn.common.logger_25');
    }

    /**
     * @access private
     */
    function &_get($logger_category, $key)
    {
        $fail = false;

        $sections = $this->_config->getSections();

        $categories = explode('.', $logger_category);
        $count = count($categories);
        for ($i = 0; $i < $count; $i++) {
            $category = implode('.', $categories);
            $item = $this->_config->get($category, $key);
            if ($item !== false) {
                return $item;
            }
            if (in_array($category, $sections)) {
                return $fail;
            }

            array_pop($categories);
        }

        return $fail;
    }

    /**
     * @return array   Associative array of configuration for named logger.
     */
    function getConfig($logger_name)
    {
        $sections = $this->_config->getSections();

        $categories = explode('.', $logger_name);
        $count = count($categories);
        for ($i = 0; $i < $count; $i++) {
            $category = implode('.', $categories);

            if (in_array($category, $sections)) {
                return $this->_config->getSection($category);
            }

            array_pop($categories);
        }

        return [];
    }

    /**
     * カテゴリーを削除する
     * (指定されたカテゴリーの子も削除する)
     *
     * @param string $logger_category ログカテゴリー
     */
    function removeCategory($logger_category)
    {
        $sections = $this->_config->getSections();
        foreach ($sections as $section) {
            if (strpos($section, $logger_category) === 0) {
                $this->_config->unsetSection($section);
            }
        }
    }

    /**
     * 指定された優先度のログターゲット設定する。
     *
     * @access private
     *
     * @param string $logger_category ログカテゴリー
     * @param string $priority        優先度
     * @param array  $target_names    ターゲット名
     */
    function _setTargets($logger_category, $priority, $target_names)
    {
        $value = implode(',', $target_names);
        $this->_config->set($logger_category, $priority, $value);
    }

    /**
     * 指定された優先度のログターゲットを取得する。
     *
     * @access private
     *
     * @param string $logger_category ログカテゴリー
     * @param string $priority        優先度
     *
     * @return  ターゲット名の配列
     */
    function &_getTargets($logger_category, $priority)
    {
        $value = $this->_get($logger_category, $priority);
        if ($value) {
            if (strlen(trim($value)) > 0) {
                $ret = explode(',', $value);

                return $ret;
            }
        }
        $ret = [];

        return $ret;
    }

    /**
     * 指定された優先度のログターゲットを削除する。
     *
     * @access private
     *
     * @param string $logger_category ログカテゴリー
     * @param string $priority        優先度
     */
    function _removeTargets($logger_category, $priority)
    {
        $this->_config->unset_by($logger_category, $priority);
    }

    /**
     * 優先度:debugのログターゲット設定する。
     *
     * @param string $logger_category ログカテゴリー
     * @param array  $target_names    ターゲット名
     */
    function setDebug($logger_category, $target_names)
    {
        $this->_setTargets($logger_category, GRN_LOGGER_THRESHOLD_DEBUG,
            $target_names);
    }

    /**
     * 優先度:debugのログターゲットを取得する。
     *
     * @param string $logger_category ログカテゴリー
     *
     * @return  ターゲット名
     */
    function getDebug($logger_category)
    {
        return $this->_getTargets($logger_category, GRN_LOGGER_THRESHOLD_DEBUG);
    }

    /**
     * 優先度:debugのログターゲットを削除する。
     *
     * @param string $logger_category ログカテゴリー
     */
    function removeDebug($logger_category)
    {
        $this->_removeTargets($logger_category, GRN_LOGGER_THRESHOLD_DEBUG);
    }

    /**
     * 優先度:infoのログターゲット設定する。
     *
     * @param string $logger_category ログカテゴリー
     * @param array  $target_names    ターゲット名
     */
    function setInfo($logger_category, $target_names)
    {
        $this->_setTargets($logger_category, GRN_LOGGER_THRESHOLD_INFO,
            $target_names);
    }

    /**
     * 優先度:infoのログターゲットを取得する。
     *
     * @param string $logger_category ログカテゴリー
     *
     * @return  ターゲット名
     */
    function getInfo($logger_category)
    {
        return $this->_getTargets($logger_category, GRN_LOGGER_THRESHOLD_INFO);
    }

    /**
     * 優先度:infoのログターゲットを削除する。
     *
     * @param string $logger_category ログカテゴリー
     */
    function removeInfo($logger_category)
    {
        $this->_removeTargets($logger_category, GRN_LOGGER_THRESHOLD_INFO);
    }

    /**
     * 優先度:noticeのログターゲット設定する。
     *
     * @param string $logger_category ログカテゴリー
     * @param array  $target_names    ターゲット名
     */
    function setNotice($logger_category, $target_names)
    {
        $this->_setTargets($logger_category, GRN_LOGGER_THRESHOLD_NOTICE,
            $target_names);
    }

    /**
     * 優先度:noticeのログターゲットを取得する。
     *
     * @param string $logger_category ログカテゴリー
     *
     * @return  ターゲット名
     */
    function getNotice($logger_category)
    {
        return $this->_getTargets($logger_category,
            GRN_LOGGER_THRESHOLD_NOTICE);
    }

    /**
     * 優先度:noticeのログターゲットを削除する。
     *
     * @param string $logger_category ログカテゴリー
     */
    function removeNotice($logger_category)
    {
        $this->_removeTargets($logger_category, GRN_LOGGER_THRESHOLD_NOTICE);
    }

    /**
     * 優先度:warningのログターゲット設定する。
     *
     * @param string $logger_category ログカテゴリー
     * @param array  $target_names    ターゲット名
     */
    function setWarning($logger_category, $target_names)
    {
        $this->_setTargets($logger_category, GRN_LOGGER_THRESHOLD_WARNING,
            $target_names);
    }

    /**
     * 優先度:warningのログターゲットを取得する。
     *
     * @param string $logger_category ログカテゴリー
     *
     * @return  ターゲット名
     */
    function getWarning($logger_category)
    {
        return $this->_getTargets($logger_category,
            GRN_LOGGER_THRESHOLD_WARNING);
    }

    /**
     * 優先度:warningのログターゲットを削除する。
     *
     * @param string $logger_category ログカテゴリー
     */
    function removeWarning($logger_category)
    {
        $this->_removeTargets($logger_category, GRN_LOGGER_THRESHOLD_WARNING);
    }

    /**
     * 優先度:errorのログターゲット設定する。
     *
     * @param string $logger_category ログカテゴリー
     * @param array  $target_names    ターゲット名
     */
    function setError($logger_category, $target_names)
    {
        $this->_setTargets($logger_category, GRN_LOGGER_THRESHOLD_ERROR,
            $target_names);
    }

    /**
     * 優先度:errorのログターゲットを取得する。
     *
     * @param string $logger_category ログカテゴリー
     *
     * @return  ターゲット名
     */
    function getError($logger_category)
    {
        return $this->_getTargets($logger_category, GRN_LOGGER_THRESHOLD_ERROR);
    }

    /**
     * 優先度:errorのログターゲットを削除する。
     *
     * @param string $logger_category ログカテゴリー
     */
    function removeError($logger_category)
    {
        $this->_removeTargets($logger_category, GRN_LOGGER_THRESHOLD_ERROR);
    }

    /**
     * 優先度:criticalのログターゲット設定する。
     *
     * @param string $logger_category ログカテゴリー
     * @param array  $target_names    ターゲット名
     */
    function setCritical($logger_category, $target_names)
    {
        $this->_setTargets($logger_category, GRN_LOGGER_THRESHOLD_CRITICAL,
            $target_names);
    }

    /**
     * 優先度:criticalのログターゲットを取得する。
     *
     * @param string $logger_category ログカテゴリー
     *
     * @return  ターゲット名
     */
    function getCritical($logger_category)
    {
        return $this->_getTargets($logger_category,
            GRN_LOGGER_THRESHOLD_CRITICAL);
    }

    /**
     * 優先度:criticalのログターゲットを削除する。
     *
     * @param string $logger_category ログカテゴリー
     */
    function removeCritical($logger_category)
    {
        $this->_removeTargets($logger_category, GRN_LOGGER_THRESHOLD_CRITICAL);
    }

    /**
     * データを保存する。
     */
    function save()
    {
        $this->_config->save();
    }
}

/**
 * ロギングロジッククラス
 *
 * @package grn.common
 */
class GRN_LoggingLogic extends CB_ModuleBase
{
    /**
     * シングルトンインスタンスを取得する
     *
     * @return object GRN_LoggingLogic
     */
    private static $_instance = null;

    /**
     * @static
     * @return GRN_LoggingLogic
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * コンストラクタ
     */
    function __construct()
    {
        parent::__construct('grn.common.logger');
    }

    /**
     * システム、アプリケーションのカテゴリーをログカテゴリーに変換する。
     *
     * @param string $category システム、アプリケーションのカテゴリー
     *
     * @return string   ログカテゴリー名
     */
    function getLogCategory($category)
    {
        $log_category = 'grn';
        if (strlen($category) > 0) {
            $log_category = $log_category . '.' . $category;
        }

        return $log_category;
    }

    /**
     * ログカテゴリーをカテゴリー名に変換する。
     *
     * @param string $logger_category ログカテゴリー
     * @param string $locale          locale for category name
     *
     * @return mixed FALSE or カテゴリー名
     */
    function getCategoryName($logger_category, $locale = null)
    {
        $categories = explode('.', $logger_category);
        $count = count($categories);
        if ($categories > 0) {
            if ($categories[0] == 'grn') {
                if ($count == 1) {
                    return $this->getMessage('root', null, $locale);
                } elseif ($count == 2) {
                    if ($categories[1] == 'common') {
                        return $this->getMessage('system', null, $locale);
                    } elseif ($categories[1] == 'cbdnet') {
                        return $this->getMessage('cybozu_net', null, $locale);
                    } else {
                        require_once('grn/application.csp');
                        $locator = GRN_ApplicationLocator::instance();
                        $app = $locator->getInstance($categories[1]);
                        if ($app) {
                            return $app->getDefaultName($locale);
                        }
                    }
                } else {
                    return false;
                }
            }
        }

        return false;
    }

    /**
     * 閾値を閾値名に変換する。
     *
     * @param string $logger_category ログカテゴリー
     *
     * @return string   閾値名
     */
    function getThresholdName($threshold)
    {
        $key = 'threshold_' . $threshold;

        return $this->getMessage($key);
    }

    /**
     * 表示用閾値（数値）のリストを取得する。
     *
     * @return array   閾値名配列
     */
    function getPriorityConditList($priority = 0)
    {
        $priorities = [];

        $priority_table = [//CB_LOGGER_DEBUG,
                           CB_LOGGER_INFO,
                           CB_LOGGER_NOTICE,
                           CB_LOGGER_WARNING,
                           CB_LOGGER_ERROR
        ];
        //CB_LOGGER_CRITICAL);

        //////////////////////////////////////////////////////
        // 致命的エラー、警告に関しては出力はないものとする。
        //////////////////////////////////////////////////////

        $priorities[] = [
            'value'    => 0,
            'label'    => $this->getMessage('threshold_all'),
            'selected' => ($priority == 0)
        ];
        foreach ($priority_table as $p) {
            $priorities[] = [
                'value'    => $p,
                'label'    => $this->getThresholdName($p),
                'selected' => ($p == $priority)
            ];
        }

        return $priorities;
    }

    /**
     * 表示用閾値のリストを取得する。
     *
     * @return array   閾値名配列
     */
    function getThresholdList()
    {
        $thresholds = [];

        //////////////////////////////////////////////////////
        // 致命的エラー、警告に関しては出力はないものとする。
        //////////////////////////////////////////////////////
        /*
        $thresholds[GRN_LOGGER_THRESHOLD_CRITICAL] = array( 'value' => GRN_LOGGER_THRESHOLD_CRITICAL,
                                                            'label' => $this->getThresholdName( CB_LOGGER_CRITICAL ) );
        */
        $thresholds[GRN_LOGGER_THRESHOLD_ERROR] = [
            'value' => GRN_LOGGER_THRESHOLD_ERROR,
            'label' => $this->getThresholdName(CB_LOGGER_ERROR)
        ];
        $thresholds[GRN_LOGGER_THRESHOLD_WARNING] = [
            'value' => GRN_LOGGER_THRESHOLD_WARNING,
            'label' => $this->getThresholdName(CB_LOGGER_WARNING)
        ];
        $thresholds[GRN_LOGGER_THRESHOLD_NOTICE] = [
            'value' => GRN_LOGGER_THRESHOLD_NOTICE,
            'label' => $this->getThresholdName(CB_LOGGER_NOTICE)
        ];
        $thresholds[GRN_LOGGER_THRESHOLD_DEBUG] = [
            'value' => GRN_LOGGER_THRESHOLD_DEBUG,
            'label' => $this->getThresholdName(CB_LOGGER_DEBUG)
        ];

        return $thresholds;
    }

    /**
     * カテゴリ表示用のリストを取得する。
     *
     * @return array   カテゴリ表示用配列
     */
    function getLogCategoryList($selected_id = null)
    {
        $children = [];
        $selected = false;
        if ($selected_id === 'common') {
            $selected = true;
        }
        $category = $this->getLogCategory('common');
        $children[$category] = [
            'value'    => 'common',
            'label'    => $this->getCategoryName($category),
            'selected' => $selected
        ];

        require_once('grn/application.csp');
        $locator = GRN_ApplicationLocator::instance();
        $apps = $locator->getActiveApplicationIds();

        foreach ($apps as $id) {
            $app = $locator->getInstance($id);
            if ($app) {
                $category = $this->getLogCategory($id);

                $selected = false;
                if ($selected_id === $id) {
                    $selected = true;
                }

                $children[$category] = [
                    'value'    => $id,
                    'label'    => $app->getDefaultName(),
                    'selected' => $selected
                ];
            }
        }

        $selected = false;
        if ($selected_id === '') {
            $selected = true;
        }

        $category = $this->getLogCategory('');
        $categories[$category] = [
            'value'    => '',
            'label'    => $this->getCategoryName($category),
            'selected' => $selected,
            'child'    => $children
        ];

        return $categories;
    }

    /**
     * データの絞込みの検索条件を生成する
     *
     * @param string $keyword キーワード文字列
     * @param array  $columns カラムリスト
     *
     * @return string   検索条件
     */
    function createSearchCondition($keyword, $columns)
    {
        if (count($columns) == 0) {
            return false;
        }
        if (strlen($keyword) <= 0) {
            return false;
        }

        global $G_container_base;
        $db =& $G_container_base->getInstance('dbconn');

        require_once('fw/string_util.csp');
        $words = cb_parse_search_text($keyword);
        if (count($words) <= 0) {
            return false;
        }

        $query = '';
        $conditions = [];
        foreach ($columns as $column) {
            $format = '(' . $column . " LIKE '%@L%'" . ')';
            $querys = [];
            foreach ($words as $word) {
                $querys[] = cb_queryf($db, $format, $word);
            }
            $query = implode('AND', $querys);
            $conditions[] = "( $query )";
        }
        $condition = implode('OR', $conditions);

        return '(' . $condition . ')';
    }

    /**
     * ソート検索条件を生成する
     *
     * @param string $sort ソートタイプ
     *
     * @return string   ソート条件
     */
    function createSortCondition($sort)
    {
        $condition = '';
        if ($sort == 'du') {
            //$condition = 'col_timestamp asc, col_priority asc, _id asc';
            $condition = 'col_timestamp asc';
        } /*else if( $sort == 'pd' )
        {
            $condition = 'col_priority asc, col_timestamp asc, _id asc';
        }
        else if( $sort == 'pu' )
        {
            $condition = 'col_priority desc, col_timestamp asc, _id asc';
        }*/
        else {
            // dd
            //$condition = 'col_timestamp desc, col_priority asc, _id desc';
            $condition = 'col_timestamp desc';
        }

        return $condition;
    }

    /**
     * 日付の絞込みの検索条件を生成する
     *
     * @param object CB_DateTime $start     開始時刻
     * @param object CB_DateTime $end       終了時刻
     *
     * @return string   検索条件
     */
    function createDateCondition($start, $end)
    {
        assert('is_a( $start, \'cb_datetime\' )');
        assert('is_a( $end, \'cb_datetime\' )');

        $start_ts = mktime($start->hour, $start->minute, $start->second,
            $start->month, $start->day, $start->year);
        $end_ts = mktime($end->hour, $end->minute, $end->second, $end->month,
            $end->day, $end->year);

        return "( col_timestamp >= $start_ts AND col_timestamp <= $end_ts )";
    }

    /**
     * 日付の絞込みの検索条件を生成する
     * ( ある日付以前のデータ検出用 )
     *
     * @param object CB_Date    $term     日付
     *
     * @return string   検索条件
     */
    function createDateCondition2($term)
    {
        assert('is_a( $term, \'cb_date\' )');
        $ts = mktime(0, 0, 0, $term->month, $term->day, $term->year);

        return "( col_timestamp < $ts )";
    }

    /**
     * タイムスタンプから日付時刻に変換する。
     *
     * @param object CB_Timestamp       タイムスタンプ
     *
     * @return object CB_DateTime       日付時刻
     */
    function timestamp_to_datetime($ts)
    {
        assert('is_a( $ts, \'cb_timestamp\' )');

        $d = getdate($ts->unix_ts);
        $dt = new CB_DateTime;
        $dt->year = $d['year'];
        $dt->month = $d['mon'];
        $dt->day = $d['mday'];
        $dt->hour = $d['hours'];
        $dt->minute = $d['minutes'];
        $dt->second = $d['seconds'];

        return $dt;
    }

    /**
     * Check category input
     *
     * @param  string $category
     */
    function checkCategoryInput(& $category)
    {
        require_once('grn/application.csp');
        $locator = GRN_ApplicationLocator::instance();
        $apps = $locator->getActiveApplicationIds();
        if ( ! in_array($category, $apps) && strcmp($category, 'common') != 0) {
            $category = '';
        }
    }
}

class GRN_Logging_SystemConfig
{
    private static $_instance = null;

    var $_profile = null;

    var $_readonly = true;

    /**
     * @return GRN_Logging_SystemConfig
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    function __construct()
    {
        require_once('fw/profile.csp');
        $this->_profile =& cb_get_system_profile('grn.logging');

        global $G_common_set;

        global $G_container_app;
        $uum =& $G_container_app->getInstance('uum');

        if (($login =& $uum->getLoginUser())) {
            require_once('grn/system_logic.csp');
            $system = GRN_System::getInstance();
            if ($system->isSuperAdmin($login)) {
                $this->_readonly = false;
            }
        }
    }

    function _set($attr_name, $value)
    {
        if ($this->_readonly) {
            return false;
        }

        if ( ! $this->_profile->updateAttribute($attr_name, $value)) {
            return $this->_profile->createAttribute($attr_name, $value);
        }

        return true;
    }

    function getRetentionPeriod()
    {
        $value = 3; //3 years
        $this->_profile->getAttribute('retention_period', $value);

        return $value;
    }

    function setRetentionPediod($value)
    {
        //value 1 - 10 years
        $this->_set('retention_period', $value);
    }

    function getExportFormat()
    {
        $value = "xlsx";
        $this->_profile->getAttribute('export_format', $value);

        return $value;
    }

    function setExportFormat($value)
    {
        //xlsx, csv(utf-8), csv(s-jis)
        $this->_set('export_format', $value);
    }

    function getExportDay()
    {
        $value = 6; //saturday
        $this->_profile->getAttribute('export_day', $value);

        return $value;
    }

    function setExportDay($value)
    {
        //value 0 -> 6
        $this->_set('export_day', $value);
    }

    function getExportHour()
    {
        $value = 15;
        $this->_profile->getAttribute('export_hour', $value);

        return $value;
    }

    function setExportHour($value)
    {
        //value 0 -> 23
        $this->_set('export_hour', $value);
    }

    function getExportMinute()
    {
        $value = 0;
        $this->_profile->getAttribute('export_minute', $value);

        return $value;
    }

    function setExportMinute($value)
    {
        //value 0 -> 59
        $this->_set('export_minute', $value);
    }
}
