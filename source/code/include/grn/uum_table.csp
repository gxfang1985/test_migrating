<?php

require_once('fw/persistent.csp');
require_once('fw/uum_core.csp');
require_once('grn/inspection.csp');

/**
 * My Group.
 *
 * @package grn.common
 */
class GRN_MyGroup extends GRN_InspectionBase
{
    var $col_owner
        = [
            'type'    => 'relation',
            'to'      => 'CB_User',
            'notnull' => true
        ];
    var $col_name = ['type' => 'char', 'notnull' => true];
    var $col_description
        = [
            'type'   => 'char',
            'length' => 65535,
            'lazy'   => true
        ];
    var $col_list_index = ['type' => 'list_index'];
    var $idx_list_index1 = ['cols' => ['list_index', null]];
    var $idx_list_index2 = ['cols' => ['owner', 'list_index', null]];

    // There's no need to create the index for "owner", because
    // the "owner" column is defined as relation that will be
    // automatically indexed.

    private $added_users_mygroup = [];
    private $added_facilities_mygroup = [];

    public function getAddedUsersMygroup()
    {
        return $this->added_users_mygroup;
    }

    public function setAddedUsersMygroup($added_users)
    {
        $this->added_users_mygroup = $added_users;
    }

    public function getAddedFacilitiesMygroup()
    {
        return $this->added_facilities_mygroup;
    }

    public function setAddedFacilitiesMygroup($added_facilities)
    {
        $this->added_facilities_mygroup = $added_facilities;
    }

    function __construct(& $row)
    {
        parent::__construct($row, 'grn.common');
    }

    /**
     * @param string $action
     *
     * @return mixed
     */
    function getInspectionMessage($action)
    {
        return false;
    }

    /**
     * @param string $action
     * @param object $logger
     */
    function customLog($action, $logger)
    {
        $owner = $this->get('owner');

        switch ($action) {
            case 'create':
                break;
            case 'update':
                $action = 'modify';
                break;
            case 'delete':
                break;
            default:
                parent::getInspectionMessage($action);

                return;
        }

        $params = [
            'mgid'  => $this->getOID(),
            'owner' => $owner->getOID(),
            'name'  => $this->get('name'),
            'memo'  => $this->get('description'),
            'uids'  => implode(",", $this->getAddedUsersMygroup()),
            'faids' => implode(",", $this->getAddedFacilitiesMygroup())
        ];
        $logger->noticeEx($action, 'mygroup', $params);
    }
}

/**
 * My Group <-> User relation.
 *
 * @package grn.common
 */
class GRN_MyGroupUserRelation extends CB_PersistentBase
{
    var $col_mygroup
        = [
            'type'    => 'relation',
            'to'      => 'GRN_MyGroup',
            'notnull' => true
        ];
    var $col_user
        = [
            'type'    => 'relation',
            'to'      => 'CB_User',
            'notnull' => true
        ];
    var $col_list_index = ['type' => 'list_index'];

    var $idx_mygroups = ['cols' => ['user', 'list_index', null]];
    var $idx_usermygroup = ['cols' => ['user', 'mygroup'], 'unique' => 'TRUE'];

    // There's no need to create the index for "mygroup", because
    // the "mygroup" column is defined as relation that will be
    // automatically indexed.

    function __construct(& $row)
    {
        parent::__construct($row);
    }
}

/**
 * @package grn.common
 */
class GRN_UserInfo extends GRN_InspectionBase
{
    var $col_user = ['type' => 'relation', 'to' => 'CB_User', 'lazy' => true];
    var $col_primary_group
        = [
            'type' => 'weak_relation',
            'to'   => 'CB_UserGroupRelation',
            'lazy' => true
        ];
    var $col_image
        = [
            'type' => 'weak_relation',
            'to'   => 'GRN_File',
            'lazy' => true
        ];
    var $col_post = ['type' => 'char', 'length' => 100];
    var $col_password_expired = ['type' => 'timestamp'];

    function __construct(& $row)
    {
        parent::__construct($row, 'grn.common');
    }

    /**
     * @param string $action
     *
     * @return string
     */
    function getInspectionMessage($action)
    {
        $user =& $this->get('user');
        assert(! is_null($user));

        switch ($action) {
            case 'create':
                return sprintf('[create] user (id:%s, name:%s, account:%s)',
                    $user->getOID(),
                    $user->get('display_name'),
                    $user->get('foreign_key'));

            case 'update':
                return sprintf('[update] user (id:%s, name:%s, account:%s)',
                    $user->getOID(),
                    $user->get('display_name'),
                    $user->get('foreign_key'));

            case 'delete':
                return sprintf('[delete] user (id:%s, name:%s, account:%s)',
                    $user->getOID(),
                    $user->get('display_name'),
                    $user->get('foreign_key'));

            case 'password':
                return sprintf('[update] user password (id:%s, name:%s, account:%s)',
                    $user->getOID(),
                    $user->get('display_name'),
                    $user->get('foreign_key'));

            default:
                return parent::getInspectionMessage($action);
        }
    }

    /**
     * @param string $action
     */
    function onAction($action)
    {
    }
}

/**
 * @package grn.common
 */
class GRN_GroupInfo extends GRN_InspectionBase
{
    var $col_group = ['type' => 'relation', 'to' => 'CB_Group', 'lazy' => true];
    var $col_left = ['type' => 'int', 'unsigned' => false];
    var $col_right = ['type' => 'int', 'unsigned' => false];

    function __construct(& $row)
    {
        parent::__construct($row, 'grn.common');
    }

    /**
     * @param string $action
     *
     * @return string
     */
    function getInspectionMessage($action)
    {
        $group =& $this->get('group');
        assert(! is_null($group));

        switch ($action) {
            case 'create':
                return sprintf('[create] group (id:%s, name:%s, key:%s)',
                    $group->getOID(),
                    $group->get('name'),
                    $group->get('foreign_key'));

            case 'update':
                return sprintf('[update] group (id:%s, name:%s, key:%s)',
                    $group->getOID(),
                    $group->get('name'),
                    $group->get('foreign_key'));

            case 'delete':
                return sprintf('[delete] group (id:%s, name:%s, key:%s)',
                    $group->getOID(),
                    $group->get('name'),
                    $group->get('foreign_key'));

            default:
                return parent::getInspectionMessage($action);
        }
    }

    /**
     * @param string $action
     */
    function onAction($action)
    {
    }


    /**
     * @param string $col_name
     *
     * @return CB_Row|mixed
     */
    public function get($col_name)
    {
        $result = false;

        $table_info = $this->getTableInfo();
        $col_info = $table_info->getColumnInfo($col_name);
        if (is_null($col_info)) {
            return $result;
        }


        if ($col_name == 'group') {
            $isKeyExists = array_key_exists(CB_DATABASE_COLUMN_PREFIX
                                            . $col_name,
                $this->__row->_rawdata);
            $id = $isKeyExists
                ? $this->__row->_rawdata[CB_DATABASE_COLUMN_PREFIX . $col_name]
                : null;

            if ( ! is_null($id)) {
                require_once('fw/FwFacade.csp');
                require_once('fw/i18n.csp');

                $i18n = CB_I18N::getInstance();
                $table_info = $this->getTableInfo();
                $tableManager = $table_info->getTableManager();
                $relationTableName = $col_info['to'];
                $relationTableInfo
                    = $tableManager->getTableInfo($relationTableName);
                $relationTableLock = $relationTableInfo->_lock;

                $dao = new FwFacade();
                $dataObj = [];
                $dataObj['lock'] = $relationTableLock;
                $dataObj['language'] = $i18n->getCurrentLanguage();

                $groupData = $dao->referGroupById($dataObj, $id);
                $result = $relationTableInfo->getRow($groupData->getId(),
                    $groupData->convertArray());
            } else {
                $result = parent::get($col_name);
            }
        } else {
            $result = parent::get($col_name);
        }

        return $result;
    }
}

/**
 * @package grn.common
 */
class GRN_RoleInfo extends GRN_InspectionBase
{
    var $col_role = ['type' => 'relation', 'to' => 'CB_Role', 'lazy' => true];

    function __construct(& $row)
    {
        parent::__construct($row, 'grn.common');
    }

    /**
     * @param string $action
     *
     * @return string
     */
    function getInspectionMessage($action)
    {
        $role =& $this->get('role');
        assert(! is_null($role));

        switch ($action) {
            case 'create':
                return sprintf('[create] role (id:%s, name:%s)',
                    $role->getOID(),
                    $role->get('foreign_key'));

            case 'update':
                return sprintf('[update] role (id:%s, name:%s)',
                    $role->getOID(),
                    $role->get('foreign_key'));

            case 'delete':
                return sprintf('[delete] role (id:%s, name:%s)',
                    $role->getOID(),
                    $role->get('foreign_key'));

            default:
                return parent::getInspectionMessage($action);
        }
    }

    /**
     * @param string $action
     */
    function onAction($action)
    {
    }
}

/**
 * 拡張項目基礎クラス
 *
 * @package grn.common
 */
class GRN_ItemBase extends CB_PersistentBase
{
    function __construct(& $row)
    {
        parent::__construct($row);
    }

    /** 表示名 */
    var $col_display_name = ['type' => 'char', 'length' => 100];
    /** 識別子（%書式やJavaScriptの変数で参照するときの） */
    var $col_id = ['type' => 'char', 'length' => 100, 'notnull' => true];
    /** 拡張項目の種類（文字列（1行）, 文字列（複数）, ファイル, ...） */
    var $col_type = ['type' => 'char', 'length' => 100];
    /** ユーザー変更不可フラグ */
    var $col_not_modify = ['type' => 'int'];
    /** 必須フラグ */
    var $col_necessary = ['type' => 'int'];
    /** 拡張項目の表示順番 */
    var $col_list_index = ['type' => 'list_index'];
    /** 使用するかどうか */
    var $col_use = ['type' => 'int'];
    /** 詳細表示フラグ */
    var $col_show = ['type' => 'int'];
    /** 一覧表示フラグ */
    var $col_display = ['type' => 'int'];
    /** シングルサインオン */
    var $col_sso = ['type' => 'int'];
    /** ケータイでの表示 */
    var $col_cellular = ['type' => 'int'];

    var $col_slash = ['type' => 'int', 'length' => 20, 'lazy' => true];

    // reserved columns 
    var $col_reserve_text1 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text2 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text3 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_int1 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int2 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int3 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_blob1 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob2 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob3 = ['type' => 'blob', 'lazy' => true];

    var $idx_l = ['cols' => ['list_index']];
}

/**
 * ユーザー情報拡張項目クラス
 *
 * @package grn.common
 */
class GRN_UserItem extends GRN_ItemBase
{
    function __construct(& $row)
    {
        parent::__construct($row);
    }

    var $col_search = ['type' => 'int'];

    /** インデックス */
    var $idx_i = ['cols' => ['id'], 'unique' => true];
}

/**
 * ユーザー情報拡張項目とユーザーの関連付けクラス
 *
 * @package grn.common
 */
class GRN_ItemUserRelation extends CB_PersistentBase
{
    function __construct(& $row)
    {
        parent::__construct($row);
    }

    /** 文字列データ */
    var $col_string = ['type' => 'char', 'length' => 65535];
    /** ファイルID */
    var $col_file
        = [
            'type' => 'weak_relation',
            'to'   => 'GRN_File',
            'lazy' => true
        ];
    /** ユーザー情報拡張項目ID */
    var $col_item = ['type' => 'relation', 'to' => 'GRN_UserItem'];
    /** ユーザーID */
    var $col_user = ['type' => 'relation', 'to' => 'CB_User'];

    // reserved columns 
    var $col_reserve_text1 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text2 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text3 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_int1 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int2 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int3 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_blob1 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob2 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob3 = ['type' => 'blob', 'lazy' => true];

    /** インデックス */
    var $idx_i_u = ['cols' => ['item', 'user'], 'unique' => true];
}


class GRN_User_GroupHistory extends CB_PersistentBase
{
    function __construct(& $row)
    {
        parent::__construct($row);
    }

    var $col_target = ['type' => 'relation', 'to' => 'CB_Group'];
    var $col_user = ['type' => 'relation', 'to' => 'CB_User'];
    var $col_last_selected = ['type' => 'timestamp'];
    var $idx_user_target = ['cols' => ['user', 'target'], 'unique' => true];
    var $idx_user_last_target
        = [
            'cols'   => [
                'user',
                'last_selected',
                'target'
            ],
            'unique' => false
        ];

    /**
     * @param string $col_name
     *
     * @return bool|CB_Row|mixed
     */
    public function get($col_name)
    {
        $result = false;

        $table_info = $this->getTableInfo();
        $col_info = $table_info->getColumnInfo($col_name);
        if (is_null($col_info)) {
            return $result;
        }


        if ($col_name == 'target') {
            $isKeyExists = array_key_exists(CB_DATABASE_COLUMN_PREFIX
                                            . $col_name,
                $this->__row->_rawdata);
            $id = $isKeyExists
                ? $this->__row->_rawdata[CB_DATABASE_COLUMN_PREFIX . $col_name]
                : null;

            if ( ! is_null($id)) {
                require_once('fw/FwFacade.csp');
                require_once('fw/i18n.csp');

                $i18n = CB_I18N::getInstance();
                $table_info = $this->getTableInfo();
                $tableManager = $table_info->getTableManager();
                $relationTableName = $col_info['to'];
                $relationTableInfo
                    = $tableManager->getTableInfo($relationTableName);
                $relationTableLock = $relationTableInfo->_lock;

                $dao = new FwFacade();
                $dataObj = [];
                $dataObj['lock'] = $relationTableLock;
                $dataObj['language'] = $i18n->getCurrentLanguage();

                $groupData = $dao->referGroupById($dataObj, $id);
                $result = $relationTableInfo->getRow($groupData->getId(),
                    $groupData->convertArray());
            } else {
                $result = parent::get($col_name);
            }
        } else {
            $result = parent::get($col_name);
        }

        return $result;
    }
}

class GRN_User_UserHistory extends CB_PersistentBase
{
    function __construct(& $row)
    {
        parent::__construct($row);
    }

    var $col_target = ['type' => 'relation', 'to' => 'CB_User'];
    var $col_user = ['type' => 'relation', 'to' => 'CB_User'];
    var $col_last_selected = ['type' => 'timestamp'];
    var $idx_user_target = ['cols' => ['user', 'target'], 'unique' => true];
    var $idx_user_last_target
        = [
            'cols'   => [
                'user',
                'last_selected',
                'target'
            ],
            'unique' => false
        ];
}

class GRN_User_OftenusedGroups extends CB_PersistentBase
{
    function GRN_User_OftenusedGroup(& $row)
    {
        parent::__construct($row);
    }

    var $col_target = ['type' => 'relation', 'to' => 'CB_Group'];
    var $col_user = ['type' => 'relation', 'to' => 'CB_User'];
    var $col_order = ['type' => 'list_index'];

    var $idx_user_target = ['cols' => ['user', 'target'], 'unique' => true];
    var $idx_user_order_target
        = [
            'cols'   => ['user', 'order', 'target'],
            'unique' => false
        ];

    /**
     * @param string $col_name
     *
     * @return bool|CB_Row|mixed
     */
    public function get($col_name)
    {
        $result = false;

        $table_info = $this->getTableInfo();
        $col_info = $table_info->getColumnInfo($col_name);
        if (is_null($col_info)) {
            return $result;
        }


        if ($col_name == 'target') {
            $isKeyExists = array_key_exists(CB_DATABASE_COLUMN_PREFIX
                                            . $col_name,
                $this->__row->_rawdata);
            $id = $isKeyExists
                ? $this->__row->_rawdata[CB_DATABASE_COLUMN_PREFIX . $col_name]
                : null;

            if ( ! is_null($id)) {
                require_once('fw/FwFacade.csp');
                require_once('fw/i18n.csp');

                $i18n = CB_I18N::getInstance();
                $table_info = $this->getTableInfo();
                $tableManager = $table_info->getTableManager();
                $relationTableName = $col_info['to'];
                $relationTableInfo
                    = $tableManager->getTableInfo($relationTableName);
                $relationTableLock = $relationTableInfo->_lock;

                $dao = new FwFacade();
                $dataObj = [];
                $dataObj['lock'] = $relationTableLock;
                $dataObj['language'] = $i18n->getCurrentLanguage();

                $groupData = $dao->referGroupById($dataObj, $id);
                $result = $relationTableInfo->getRow($groupData->getId(),
                    $groupData->convertArray());
            } else {
                $result = parent::get($col_name);
            }
        } else {
            $result = parent::get($col_name);
        }

        return $result;
    }
}

