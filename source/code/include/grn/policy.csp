<?php

/**
 * Manage configuration for policy.
 *
 * @package policy
 */
class GRN_PolicyConfig extends CB_ConfigManager
{
    /**
     * Constructor.
     *
     * @param string $file_name The absolute path to the config file.
     */
    function __construct($file_name)
    {
        parent::__construct($file_name);
    }

    /**
     * Return default configuration information.
     *
     * @return array Associative array of default policy configurations.
     */
    function getDefaultConfig()
    {
        $cfg = $this->getDefaultSection();

        return ($cfg === false) ? [] : $cfg;
    }

    /**
     * Return configuration information for named module.
     *
     * @param string $module_id identifier of module.
     *
     * @return array Associative array of policy configurations.
     */
    function getConfig($module_id)
    {
        $cfg = $this->getSection($module_id);
        if ($cfg === false) {
            $cfg = $this->getDefaultConfig();
        }

        return $cfg;
    }
}

/**
 * Policy class.
 *
 * @package policy
 * @abstract
 */
class GRN_Policy
{
    function __construct()
    {
    }

    function getPolicy($module_id, $type)
    {
    }
}

/**
 * INI file policy class.
 *
 * @package policy
 */
class GRN_INIPolicy extends GRN_Policy
{
    /**
     * @access private
     */
    var $_cfg = null;

    /**
     * Constructor
     */
    function __construct()
    {
        global $G_config_grn;

        $file_name = $G_config_grn->get('Policy', 'config');
        assert('$file_name !== FALSE');
        $this->_cfg = new GRN_PolicyConfig($file_name);
    }

    /**
     * Get policy,
     *
     * @param string $type Type of polycy
     */
    function getPolicy($module_id, $type)
    {
        $cfg = $this->_cfg->getConfig($module_id);
        if (array_key_exists($type, $cfg)) {
            return $cfg[$type];
        }

        return null;
    }

}


