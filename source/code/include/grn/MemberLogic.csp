<?php

namespace grn\grn;

use grn\grn\access\service\AppAccess;
use grn\schedule\ScheduleFacilityApprovalSetting;

require_once("grn/application.csp");
require_once("grn/controller.csp");
require_once("grn/ui.csp");
require_once("grn/system_logic.csp");
require_once("schedule/facility_system_logic.csp");
require_once('schedule/facility_privilege.csp');

class MemberLogic
{
    const PREFIX_USER = '';
    const PREFIX_ORGANIZATION = 'g';
    const PREFIX_STATIC_ROLE = 'r';
    const PREFIX_DYNAMIC_ROLE = 'dr';
    const PREFIX_FACILITY = 'f';

    const TYPE_OMITTED = 'omitted';
    const TYPE_USER = 'user';
    const TYPE_ORGANIZATION = 'group';
    const TYPE_STATIC_ROLE = 'static_role';
    const TYPE_DYNAMIC_ROLE = 'dynamic_role';
    const TYPE_FACILITY = 'facility';
    const TYPE_ITEM = 'item';

    const MEMBER_ID = 'id';
    const MEMBER_CODE = 'code';
    const MEMBER_TYPE = 'type';
    const GENERAL_GROUP_ID = 'gid';
    const FOREIGN_KEY = 'foreignKey';
    const DISPLAY_NAME = 'displayName';
    const MEMBER_CODE_FOR_JS = 'code';
    const MEMBER_NAME_FOR_JS = 'name';
    const PRIMARY_GROUP_NAME = 'primaryGroupName';
    const FOREST_USER_URL = 'forestUserUrl';
    const IMAGE = 'image';
    const IS_INVALID_USER = 'isInvalidUser';
    const IS_NOT_USING_APP = 'isNotUsingApp';
    const IS_LOGIN_USER = 'isLoginUser';
    const IS_DELETED = 'isDeleted';
    const CODE = 'code';
    const REPEAT = 'repeat';
    const APPROVAL = 'approval';
    const ANCESTORS = 'ancestors';

    const OMITTED_USER_ID = 0;

    const EMPTY_ID = 0;
    const ROLE_ID_EVERYONE = 'Everyone';
    const ROLE_ID_LOGINUSER = 'LoginUser';
    const MEMBER_URL = 'url';
    const ADMIN_ROLE_ID = 1;
    const ICON_SIZE_NAME_SMALL = 'small';
    const ICON_SIZE_NAME_LARGE = 'large';

    const USER_IDS = 'USER_IDS';
    const USER_CODES = 'USER_CODES';

    private static $instance = null;

    /**
     * Constructor
     */
    private function __construct()
    {

    }

    /**
     * Get Instance(Singleton pattern)
     *
     * @return MemberLogic $instance
     */
    public static function getInstance()
    {
        if ( ! isset(self::$instance)) {
            $c = __CLASS__;
            self::$instance = new $c;
        }

        return self::$instance;
    }

    /**
     * ユーザーのロール選択を取得
     *
     * @return int 0|1
     */
    public function isAllowedRole()
    {
        return \GRN_System::getInstance()->getPermissionToSelectRole();
    }

    /**
     * ユーザーの所属する組織のIDを取得する
     *
     * @param string  $user_id
     * @param boolean $include_deleted
     *
     * @return array
     */
    public function getUserGroupIds($user_id, $include_deleted = false)
    {
        $uum = cb_lwc_uum();
        $groups_info = $uum->getUserGroupsInfo($user_id, $include_deleted);
        if (is_array($groups_info) && count($groups_info) > 0) {
            return array_keys($groups_info);
        }

        return [];
    }

    /**
     * ユーザーの所属するロールのIDを取得する
     *
     * @param string  $user_id
     * @param boolean $include_deleted
     *
     * @return array
     */
    public function getUserRoleIds($user_id, $include_deleted = false)
    {
        $uum = cb_lwc_uum();
        $roles_info = $uum->getUserRolesInfo($user_id, $include_deleted);
        if (is_array($roles_info) && count($roles_info) > 0) {
            return array_keys($roles_info);
        }

        return [];
    }

    /**
     * メンバーのTYPEとIDを取得して返す
     *
     * @param array $target_ids
     *
     * @return array
     */
    public function getPickoutMemberTypeIdFromParam(array $target_ids)
    {
        $type_id_array = [];
        if ( ! (is_array($target_ids) && count($target_ids) > 0)) {
            return $type_id_array;
        }
        foreach ($target_ids as $target_id) {
            if (mb_strlen($target_id) == 0) {
                continue;
            }

            $member_info = explode(":", $target_id);
            $member = $member_info[0];
            if (mb_strcut($member, 0, 1) == self::PREFIX_FACILITY) {
                $type = self::TYPE_FACILITY;
                $id
                    = mb_substr($target_id, 1);
                $type_id_array[self::PREFIX_FACILITY . $id]
                    = [
                    self::MEMBER_TYPE => $type,
                    self::MEMBER_ID   => $id
                ];
            } elseif (mb_strcut($member, 0, 1) == self::PREFIX_STATIC_ROLE) {
                $type = self::TYPE_STATIC_ROLE;
                $id
                    = mb_substr($target_id, 1);
                $type_id_array[self::PREFIX_STATIC_ROLE . $id]
                    = [
                    self::MEMBER_TYPE => $type,
                    self::MEMBER_ID   => $id
                ];
            } elseif (mb_strcut($member, 0, 1) == self::PREFIX_ORGANIZATION) {
                $type = self::TYPE_ORGANIZATION;
                $id
                    = mb_substr($target_id, 1);
                $type_id_array[self::PREFIX_ORGANIZATION . $id]
                    = [
                    self::MEMBER_TYPE => $type,
                    self::MEMBER_ID   => $id
                ];
            } elseif (mb_strcut($member, 0, 2) == self::PREFIX_DYNAMIC_ROLE) {
                $type = self::TYPE_DYNAMIC_ROLE;
                $id
                    = mb_substr($target_id, 2);
                $type_id_array[self::PREFIX_DYNAMIC_ROLE . $id]
                    = [
                    self::MEMBER_TYPE => $type,
                    self::MEMBER_ID   => $id
                ];
            } elseif (is_numeric($member)) {
                $type = self::TYPE_USER;
                $id = $member;
                $type_id_array[self::PREFIX_USER . $id]
                    = [
                    self::MEMBER_TYPE => $type,
                    self::MEMBER_ID   => $id
                ];
            }
        }

        return $type_id_array;
    }

    /**
     * ユーザー／組織／ロール／施設のオブジェクトから、画面表示用のデータを取得する
     *
     * @param object  $member
     * @param string  $app_id
     * @param boolean $isMobile
     *
     * @return array
     */
    public function getDisplayMember($member, $app_id = null, $isMobile = false)
    {
        $target_member_list = [];
        if (is_a($member, 'CB_User')) {
            $target_member_list[self::PREFIX_USER . $member->getOID()] = [
                self::MEMBER_TYPE => self::TYPE_USER,
                self::MEMBER_ID   => $member->getOID()
            ];
        } elseif (is_a($member, 'CB_Group')) {
            $target_member_list[self::PREFIX_ORGANIZATION . $member->getOID()]
                = [
                self::MEMBER_TYPE => self::TYPE_ORGANIZATION,
                self::MEMBER_ID   => $member->getOID()
            ];
        } elseif (is_a($member, 'CB_Role')) {
            $target_member_list[self::PREFIX_STATIC_ROLE . $member->getOID()]
                = [
                self::MEMBER_TYPE => self::TYPE_STATIC_ROLE,
                self::MEMBER_ID   => $member->getOID()
            ];
        } elseif (is_a($member, 'GRN_Facility_Facility')) {
            $target_member_list[self::PREFIX_FACILITY . $member->getOID()] = [
                self::MEMBER_TYPE => self::TYPE_FACILITY,
                self::MEMBER_ID   => $member->getOID()
            ];
        }

        return $this->getDisplayMemberList($target_member_list, $app_id,
            $isMobile);
    }

    /**
     * ユーザーIDの配列から、画面表示用のデータを取得する
     *
     * @param array   $user_ids
     * @param string  $app_id
     * @param boolean $isMobile
     * @param boolean $is_include_deleted_users
     * @param boolean $use_foreign_key_public_setting
     *
     * @return array
     */
    public function getDisplayUsersByUserIds(
        array $user_ids,
        $app_id = null,
        $isMobile = false,
        $is_include_deleted_users = true,
        $use_foreign_key_public_setting = false
    ) {
        $target_member_list = [];
        if ( ! (is_array($user_ids) && count($user_ids) > 0)) {
            return $target_member_list;
        }
        foreach ($user_ids as $user_id) {
            $target_member = [
                self::MEMBER_TYPE => self::TYPE_USER,
                self::MEMBER_ID   => $user_id
            ];
            $target_member_list[self::PREFIX_USER . $user_id] = $target_member;
        }

        return $this->getDisplayMemberList($target_member_list, $app_id, $isMobile, false,
            $is_include_deleted_users, $use_foreign_key_public_setting);
    }

    /**
     * 組織IDから、画面表示用のデータを取得する
     *
     * @param string  $group_id
     * @param string  $app_id
     * @param boolean $isMobile
     *
     * @return array
     */
    public function getDisplayGroupByGroupID(
        $group_id,
        $app_id = null,
        $isMobile = false
    ) {
        $target_member_list = [];
        $target_member_list[self::PREFIX_ORGANIZATION . $group_id] = [
            self::MEMBER_TYPE => self::TYPE_ORGANIZATION,
            self::MEMBER_ID   => $group_id
        ];

        return $this->getDisplayMemberList($target_member_list, $app_id,
            $isMobile);
    }

    /**
     * TypeとIDの配列から、画面表示用のデータを取得する
     *
     * @param array $target_type_id_list [ [ "type"="user", "id"=>""], [ "type"="group", "id"=>""], ... ] )
     * @param null  $app_id
     * @param bool  $isMobile
     * @param bool  $is_include_ancestors
     * @param bool  $is_include_deleted_users
     * @param bool  $use_foreign_key_public_setting
     *
     * @return array
     */
    public function getDisplayMemberList(
        array $target_type_id_list,
        $app_id = null,
        $isMobile = false,
        $is_include_ancestors = false,
        $is_include_deleted_users = true,
        $use_foreign_key_public_setting = false
    ) {
        $login_user = \cb_get_login_user();
        $login_user_id = $login_user->getOID();

        $display_member_list = [];
        if (count($target_type_id_list) === 0) {
            return $display_member_list;
        }

        $uum = cb_lwc_uum();

        $config = \GRN_UIConfigManager::getInstance()
                                      ->getUserConfig($login_user);
        $isShowPriorityGroup = $config->getShowPriorityGroup();

        $user_ids = [];
        $group_ids = [];
        $static_role_ids = [];
        $facility_ids = [];
        foreach ($target_type_id_list as $type_id_array) {
            $member_id = $type_id_array[self::MEMBER_ID];
            $member_type = $type_id_array[self::MEMBER_TYPE];
            switch ($member_type) {
                case self::TYPE_USER :
                    $user_ids[$member_id] = $member_id;
                    break;
                case self::TYPE_ORGANIZATION :
                    $group_ids[$member_id] = $member_id;
                    break;
                case self::TYPE_STATIC_ROLE :
                    $static_role_ids[$member_id] = $member_id;
                    break;
                case self::TYPE_FACILITY :
                    $facility_ids[$member_id] = $member_id;
                    break;
            }
        }

        $user_info_list
            = \GRN_ControllerUtil::getUserInfoToShowUserName($user_ids,
            $login_user, $app_id);
        $group_info_list
            = \GRN_ControllerUtil::getGroupInfoToShowGroupName($group_ids,
            $app_id);
        $static_role_info_list
            = \GRN_ControllerUtil::getRoleInfoToShowRoleName($static_role_ids,
            $app_id);

        $facility_info_list = [];
        $checkRepeatAndApproval = [];
        $privilege_facilities = [];
        $ancestors = [];
        if (count($facility_ids) > 0) {
            $facility_logic = \GRN_Facility_SystemLogic::getInstance();
            $facility_info_list
                = $facility_logic->getFacilitiesInfo($facility_ids);
            $checkRepeatAndApproval
                = $facility_logic->getSettingsOfFacilities($facility_ids,
                ['approval', 'regulary']);
            $facility_privilege
                = \GRN_Facility_Privilege_Logic::getInstance();
            $privilege_facilities
                = $facility_privilege->getFacilitiesWithAuthority($login_user);
            if ($is_include_ancestors) {
                $ancestors = \GRN_Facility_SystemLogic::getInstance()
                                                      ->getAllAncestors($facility_info_list);
            }
        }

        foreach ($target_type_id_list as $type_id_array) {
            $member_id = $type_id_array[self::MEMBER_ID];
            $member_type = $type_id_array[self::MEMBER_TYPE];
            switch ($member_type) {
                case self::TYPE_USER :
                    $user_info = \cb_at($user_info_list, $member_id);
                    $member_view = [self::MEMBER_TYPE => self::TYPE_USER];
                    if ($user_info) {
                        $member_view[self::MEMBER_ID] = $member_id;
                        if (!$use_foreign_key_public_setting || cb_lwc_uum()->isForeignKeyPublic()) {
                            $member_view[self::FOREIGN_KEY] = $user_info["col_foreign_key"];
                        }
                        if ($isMobile) {
                            $member_view[self::DISPLAY_NAME]
                                = \GRN_ControllerUtil::getUserNameText($login_user_id,
                                $member_id, $user_info_list,
                                true);
                            if ($isShowPriorityGroup
                                && isset($user_info["primary_group"])
                            ) {
                                $member_view[self::GENERAL_GROUP_ID]
                                    = $user_info["primary_group"]["_id"];
                                $member_view[self::PRIMARY_GROUP_NAME]
                                    = $user_info["primary_group"]["col_name"];
                            }
                            $member_view[self::IMAGE]
                                = \GRN_ControllerUtil::getUserIconPath(\GRN_ControllerUtil::ICON_SIZE_LARGE,
                                $member_id);
                        } else {
                            $member_view[self::DISPLAY_NAME]
                                = \GRN_ControllerUtil::getUserNameText($login_user_id,
                                $member_id, $user_info_list,
                                false);
                        }
                        if (cb_is_forest()) {
                            $member_view[self::FOREST_USER_URL]
                                = \GRN_ControllerUtil::getForestUserProfileURL($user_info["col_foreign_key"]);
                        }
                        $member_view[self::IS_INVALID_USER]
                            = isset($user_info["col_valid"])
                            ? true : false;
                        $member_view[self::IS_NOT_USING_APP]
                            = isset($user_info["col_using_app"])
                            ? false : true;
                        $member_view[self::IS_LOGIN_USER] = ($login_user_id
                                                             == $member_id)
                            ? true : false;
                    } else {
                        if ($member_id === self::OMITTED_USER_ID) {
                            $member_view = $this->getOmittedData();
                        } else {
                            $deleted_user_info = $uum->getUserInfo($member_id,
                                ["col_display_name"], 0, 1, null, true);
                            $member_view[self::DISPLAY_NAME]
                                = \GRN_ControllerUtil::getDeletedUserNameText($deleted_user_info["col_display_name"]);
                            $member_view[self::IS_DELETED] = true;

                            if ( ! $is_include_deleted_users) {
                                break;
                            }
                        }
                    }
                    $display_member_list[self::PREFIX_USER . $member_id]
                        = $member_view;
                    break;
                case self::TYPE_ORGANIZATION :
                    $group_info = \cb_at($group_info_list, $member_id);
                    if ($group_info) {
                        $member_view = [];
                        $member_view[self::MEMBER_ID] = $member_id;
                        $member_view[self::MEMBER_TYPE]
                            = self::TYPE_ORGANIZATION;
                        $member_view[self::FOREIGN_KEY]
                            = $group_info["col_foreign_key"];
                        $member_view[self::DISPLAY_NAME]
                            = $group_info["col_name"];
                        if ($isMobile) {
                            $member_view[self::GENERAL_GROUP_ID] = $member_id;
                        }
                        $member_view[self::IS_NOT_USING_APP]
                            = isset($group_info["col_using_app"]) ? false
                            : true;
                        $display_member_list[self::PREFIX_ORGANIZATION
                                             . $member_id]
                            = $member_view;
                    }
                    break;
                case self::TYPE_STATIC_ROLE :
                    $static_role_info = \cb_at($static_role_info_list,
                        $member_id);
                    if ($static_role_info) {
                        $member_view = [];
                        $member_view[self::MEMBER_ID] = $member_id;
                        $member_view[self::MEMBER_TYPE]
                            = self::TYPE_STATIC_ROLE;
                        $member_view[self::FOREIGN_KEY]
                            = $static_role_info["col_foreign_key"];
                        $member_view[self::DISPLAY_NAME]
                            = $static_role_info["col_foreign_key"];
                        if ($isMobile) {
                            $member_view[self::GENERAL_GROUP_ID] = $member_id;
                        }
                        $member_view[self::IS_NOT_USING_APP]
                            = isset($static_role_info["col_using_app"]) ? false
                            : true;
                        $display_member_list[self::PREFIX_STATIC_ROLE
                                             . $member_id]
                            = $member_view;
                    }
                    break;
                case self::TYPE_DYNAMIC_ROLE :
                    $member_view = [];
                    $member_view[self::MEMBER_ID] = $member_id;
                    $member_view[self::MEMBER_TYPE] = self::TYPE_DYNAMIC_ROLE;
                    $member_view[self::FOREIGN_KEY] = $member_id;
                    $member_view[self::DISPLAY_NAME] = $member_id;
                    if ($isMobile) {
                        $member_view[self::GENERAL_GROUP_ID] = $member_id;
                    }
                    $member_view[self::IS_NOT_USING_APP] = true;
                    $display_member_list[self::PREFIX_DYNAMIC_ROLE . $member_id]
                        = $member_view;
                    break;
                case self::TYPE_FACILITY :
                    $facility_info = \cb_at($facility_info_list, $member_id);
                    if ($facility_info) {
                        $member_view = [];
                        $member_view[self::MEMBER_ID] = $member_id;
                        $member_view[self::MEMBER_TYPE]
                            = self::TYPE_FACILITY;
                        $member_view[self::FOREIGN_KEY]
                            = $facility_info["col_foreign_key"];
                        $member_view[self::DISPLAY_NAME]
                            = $facility_info["col_name"];
                        $member_view[self::MEMBER_CODE_FOR_JS]
                            = $facility_info['col_foreign_key'];
                        $member_view[self::MEMBER_NAME_FOR_JS]
                            = $facility_info['col_name'];
                        $member_view[self::REPEAT]
                            = ($checkRepeatAndApproval[$member_id]['regulary']
                               || array_key_exists($member_id,
                                $privilege_facilities)) ? "1" : "0";
                        $member_view[self::APPROVAL]
                            = ($checkRepeatAndApproval[$member_id]['approval'])
                            ? "1" : "0";
                        $ancestor
                            = cb_at($ancestors,
                            $member_id);
                        $member_view[self::ANCESTORS] = is_array($ancestor)
                            ? self::getAncestorsName($ancestor) : '';
                        $display_member_list[self::PREFIX_FACILITY . $member_id]
                            = $member_view;
                    }
                    break;
            }
        }

        return $display_member_list;
    }

    private function getAncestorsName(array $ancestors)
    {
        $ancestors_column = array_column($ancestors, 'col_name');
        $ancestors_name = join(" > ", $ancestors_column);

        return $ancestors_name;
    }

    /**
     *
     * @param array       $member_object_list
     * @param array|null  $access_plugin
     * @param string|null $app_id
     *
     * @return \CB_User[]
     */
    public function getUsersOfBelongToMembersWithObjects(
        array $member_object_list,
        $access_plugin = null,
        $app_id = null
    ) {
        $all_users = [];
        if (count($member_object_list) === 0) {
            return $all_users;
        }

        $uum = cb_lwc_uum();

        $user_ids = [];
        $group_ids = [];
        $static_role_ids = [];
        foreach ($member_object_list as $member) {
            if (is_a($member, 'CB_User')) {
                $user_ids[$member->getOID()] = $member->getOID();
            } elseif (is_a($member, 'CB_Group')) {
                $group_ids[$member->getOID()] = $member->getOID();
            } elseif (is_a($member, 'CB_Role')) {
                $static_role_ids[$member->getOID()] = $member->getOID();
            }
        }

        if (count($user_ids) > 0) {
            $additional_condition = "_id IN('" . implode("','", $user_ids)
                                    . "')";
            $all_users = $uum->getUsers(0, -1, 'col_position, _id',
                $additional_condition);
        }
        if (count($group_ids) > 0) {
            $all_users = $all_users + $uum->getGroupsUsers($group_ids);
        }
        if (count($static_role_ids) > 0) {
            $all_users = $all_users + $uum->getRolesUsers($static_role_ids);
        }

        $target_ids = array_keys($all_users);
        $allow_target_ids = $this->getAccessEvalUsersWithAllowAppId($target_ids,
            $access_plugin, $app_id);
        $not_allow_ids = array_diff($target_ids, $allow_target_ids);

        foreach ($not_allow_ids as $not_allow_id) {
            unset($all_users[$not_allow_id]);
        }

        return $all_users;
    }

    /**
     *
     * @param array       $target_ids
     * @param array|null  $access_plugin
     * @param string|null $app_id
     *
     * @return array
     */
    public function getAccessEvalUsersWithAllowAppId(
        array $target_ids,
        $access_plugin,
        $app_id = null
    ) {
        if ( ! is_array($target_ids) || count($target_ids) == 0) {
            return $target_ids;
        }

        if (isset($access_plugin["name"]) && isset($access_plugin["params"])) {
            $loader = new \CB_PluginLoader("grn.common.user.select");
            if ($plugin = $loader->loadDriver($access_plugin["name"])) {
                $target_ids = $plugin->evalUsers($target_ids,
                    $access_plugin["params"]);
            }
        } elseif ($app_id) {
            $target_ids
                = AppAccess::filterUserIdsInternalAccessByAppId($target_ids,
                $app_id);
        }

        $target_ids_fill_keys = [];
        foreach ($target_ids as $target_id) {
            $target_ids_fill_keys[$target_id] = $target_id;
        }

        return $target_ids_fill_keys;
    }


    /**
     *
     * @param string     $org_id
     * @param array|null $access_plugin
     *
     * @return string|boolean
     */
    public function getAccessEvalGroupById($org_id, $access_plugin)
    {
        if ( ! $org_id) {
            return false;
        }
        $target_ids = [];
        $target_ids[$org_id] = $org_id;
        $target_ids = $this->getAccessEvalGroups($target_ids,
            $access_plugin);
        if ( ! isset($target_ids[$org_id])) {
            return false;
        }

        return $org_id;
    }

    /**
     *
     * @param array      $target_ids
     * @param array|null $access_plugin
     *
     * @return array
     */
    public function getAccessEvalGroups(array $target_ids, $access_plugin)
    {
        if ( ! is_array($target_ids) || count($target_ids) == 0) {
            return $target_ids;
        }

        if (isset($access_plugin["name"]) && isset($access_plugin["params"])) {
            $loader = new \CB_PluginLoader("grn.common.user.select");
            if ($plugin = $loader->loadDriver($access_plugin["name"])) {
                $target_ids = $plugin->evalGroups($target_ids,
                    $access_plugin["params"]);
            }
        }

        return $target_ids;
    }

    /**
     *
     * @param string     $role_id
     * @param array|null $access_plugin
     *
     * @return string|boolean
     */
    public function getAccessEvalRoleById($role_id, $access_plugin)
    {
        if ( ! $role_id) {
            return false;
        }
        $target_ids = [];
        $target_ids[$role_id] = $role_id;
        $target_ids = $this->getAccessEvalRoles($target_ids,
            $access_plugin);
        if ( ! isset($target_ids[$role_id])) {
            return false;
        }

        return $role_id;
    }

    /**
     *
     * @param array      $target_ids
     * @param array|null $access_plugin
     *
     * @return array
     */
    public function getAccessEvalRoles(array $target_ids, $access_plugin)
    {
        if ( ! is_array($target_ids) || count($target_ids) == 0) {
            return $target_ids;
        }

        if (isset($access_plugin["name"]) && isset($access_plugin["params"])) {
            $loader = new \CB_PluginLoader("grn.common.user.select");
            if ($plugin = $loader->loadDriver($access_plugin["name"])) {
                $target_ids = $plugin->evalRoles($target_ids,
                    $access_plugin["params"]);
            }
        }

        return $target_ids;
    }

    /**
     *
     * @param array|null $target_member_list
     *
     * @return array
     */
    public function getObjectMembersByTypeIdArray($target_member_list)
    {
        $checked_target_member_list = [];
        if (is_array($target_member_list) && count($target_member_list) > 0) {
            $uum = cb_lwc_uum();
            $db = cb_get_master_db();

            $user_condition = [];
            $group_ids = [];
            $role_condition = [];

            foreach ($target_member_list as $key => $member_info) {
                $id = $member_info[self::MEMBER_ID];
                $type = $member_info[self::MEMBER_TYPE];
                switch ($type) {
                    case self::TYPE_USER :
                        $user_condition[] = cb_queryf($db, "'@S'", $id);
                        break;
                    case self::TYPE_ORGANIZATION :
                        $group_ids[] = $id;
                        break;
                    case self::TYPE_STATIC_ROLE :
                        $role_condition[] = cb_queryf($db, "'@S'", $id);
                        break;
                }
            }
            unset($db);

            $users = [];
            if (count($user_condition) > 0) {
                $user_condition = '_id IN (' . implode(',', $user_condition)
                                  . ')';
                $users = $uum->getUsers(0, -1, null, $user_condition);
            }
            $groups = [];
            if (count($group_ids) > 0) {
                $groups = $uum->getGroupListByIds($group_ids);
            }
            $roles = [];
            if (count($role_condition) > 0) {
                $role_condition = 'tab_cb_role._id IN (' . implode(',',
                        $role_condition) . ')';
                $roles = $uum->getStaticRoles(0, -1, null,
                    $role_condition);
            }

            foreach ($target_member_list as $key => $member_info) {
                $id = $member_info[self::MEMBER_ID];
                $type = $member_info[self::MEMBER_TYPE];
                switch ($type) {
                    case self::TYPE_USER :
                        if (isset($users[$id])) {
                            $checked_target_member_list[$key] = $users[$id];
                        }
                        break;
                    case self::TYPE_ORGANIZATION :
                        if (isset($groups[$id])) {
                            $checked_target_member_list[$key] = $groups[$id];
                        }
                        break;
                    case self::TYPE_STATIC_ROLE :
                        if (isset($roles[$id])) {
                            $checked_target_member_list[$key] = $roles[$id];
                        }
                        break;
                }
            }
        }

        return $checked_target_member_list;
    }

    public function getOmittedData()
    {
        return [
            self::MEMBER_ID        => self::OMITTED_USER_ID,
            self::MEMBER_TYPE      => self::TYPE_OMITTED,
            self::FOREIGN_KEY      => cb_msg('grn.workflow', 'skip'),
            self::DISPLAY_NAME     => cb_msg('grn.workflow', 'skip'),
            self::IS_INVALID_USER  => false,
            self::IS_NOT_USING_APP => false,
            self::IS_LOGIN_USER    => false,
        ];
    }

    /**
     * @param $gid
     * @param $access_plugin
     * @param $app_id
     *
     * @return array
     */
    public function getUserIdsByGroupId($gid, $access_plugin, $app_id)
    {
        $uum = \cb_lwc_uum();
        $users_info = $uum->getGroupUsersInfo($gid);

        $user_ids
            = $this->getAccessEvalUsersWithAllowAppId(array_keys($users_info),
            $access_plugin, $app_id);

        return $user_ids;
    }

    /**
     * @param $rid
     * @param $access_plugin
     * @param $app_id
     *
     * @return array
     */
    public function getUserIdsByRoleId($rid, $access_plugin, $app_id)
    {
        $uum = \cb_lwc_uum();
        $users_info = $uum->getRoleUsersInfo($rid);

        $user_ids
            = $this->getAccessEvalUsersWithAllowAppId(array_keys($users_info),
            $access_plugin, $app_id);

        return $user_ids;

    }

    /**
     * @param array $members_array   Array containing the member codes or IDs (one or both) and their type.
     *                               For example:
     *                               $members_array = [
     *                               ['type'=>'user', 'id'=>'1'],
     *                               ['type'=>'user', 'code'=>'user2'],
     *                               ['type'=>'user', 'id'=>'3', 'code'=>'user3']],
     *                               ['type'=>'group', 'code'=>'group2'],
     *                               ['type'=>'static_role', 'code'=>'role3'],
     *                               ...
     *                               ]
     *
     * @return array Array containing the member ids and their type.
     * For example:
     * [
     *      ['type'=>'user', 'id'=>'1'],
     *      ['type'=>'group', 'id'=>'2'],
     *      ['type'=>'static_role', 'id'=>'3'],
     *      ...
     * ]
     */
    public function getMemberTypeIdArrayByMembersArray(array $members_array)
    {
        $member_type_id_array = [];
        $members_info
            = $this->convertMembersArrayToMembersInfo($members_array);
        $users = $this->getUsersInfo($members_info);

        $uum = cb_lwc_uum();
        $formatted_groups = [];
        $groups
            = $uum->getGroupInfoListByForeignKeys($members_info[self::TYPE_ORGANIZATION]);
        foreach ($groups as $group) {
            $formatted_groups[$group['col_foreign_key']] = $group;
        }

        $formatted_static_roles = [];
        if (count($members_info[self::TYPE_STATIC_ROLE]) > 0) {
            $db = cb_get_app_db('dbconn');
            $role_condition = cb_queryf($db,
                "tab_cb_role.col_foreign_key IN (@A)",
                $members_info[self::TYPE_STATIC_ROLE]);

            $static_roles = $uum->getStaticRoles(0, -1, null, $role_condition);
            foreach ($static_roles as $static_role) {
                $formatted_static_roles[$static_role->get('foreign_key')]
                    = $static_role;
            }
        }

        foreach ($members_array as $member_array) {
            $member_type = $member_array[self::MEMBER_TYPE];
            switch ($member_type) {
                case self::TYPE_USER :
                    $user_info = $this->getUserInfoFromMemberArray($member_array, $users);
                    if ($user_info) {
                        $member_type_id_array[] = [
                            self::MEMBER_TYPE => self::TYPE_USER,
                            self::MEMBER_ID   => $user_info['_id']
                        ];
                    }
                    break;
                case self::TYPE_ORGANIZATION :
                    $member_code = $member_array[self::MEMBER_CODE];
                    $group_info = $formatted_groups[$member_code] ?? null;
                    if ($group_info) {
                        $member_type_id_array[] = [
                            self::MEMBER_TYPE => self::TYPE_ORGANIZATION,
                            self::MEMBER_ID   => $group_info['_id']
                        ];
                    }
                    break;
                case self::TYPE_STATIC_ROLE :
                    $member_code = $member_array[self::MEMBER_CODE];
                    $static_role_info = $formatted_static_roles[$member_code] ??
                                        null;
                    if ($static_role_info) {
                        $member_type_id_array[] = [
                            self::MEMBER_TYPE => self::TYPE_STATIC_ROLE,
                            self::MEMBER_ID   => $static_role_info->getOID()
                        ];
                    }
                    break;
            }
        }

        return $member_type_id_array;
    }

    /**
     * @param $input
     * @param $users
     *
     * @return array|bool
     */
    private function getUserInfoFromMemberArray($input, $users)
    {
        $member_id = $input[self::MEMBER_ID] ?? '';
        $user_info = $users[$member_id] ?? [];
        if ($user_info) {
            return $user_info;
        }

        $member_code = $input[self::MEMBER_CODE] ?? '';
        if (empty($member_code)) {
            return false;
        }

        foreach ($users as $user) {
            if ($user['col_foreign_key'] === $member_code) {
                return $user;
            }
        }

        return false;
    }

    /**
     * @param array $members_info
     *
     * @return array
     */
    private function getUsersInfo($members_info): array
    {
        $uum = cb_lwc_uum();
        $users = $members_info[self::TYPE_USER] ?? [];

        if (count($users) === 0) {
            return [];
        }

        $user_ids = $users[self::USER_IDS] ?? [];
        $users_from_id = $uum->getUsersInfo(
            $user_ids,
            ['_id', 'col_foreign_key']);

        if ( ! $uum->isForeignKeyPublic()) {
            return $users_from_id;
        }

        $user_codes = $users[self::USER_CODES] ?? [];
        $users_from_code = $uum->getUsersInfo(
            $user_codes,
            ['_id', 'col_foreign_key'],
            0,
            -1,
            null,
            null,
            'col_foreign_key');

        $users_from_code_to_id = [];
        foreach ($users_from_code as $user_from_code) {
            $users_from_code_to_id[$user_from_code['_id']] = $user_from_code;
        }

        return $users_from_id + $users_from_code_to_id;
    }

    /**
     * @param array $members_array   Array containing the member codes or IDs (one or both) and their type.
     *                               For example:
     *                               $members_array = [
     *                               ['type'=>'user', 'id'=>'1'],
     *                               ['type'=>'user', 'code'=>'user2'],
     *                               ['type'=>'user', 'id'=>'3', 'code'=>'user3']],
     *                               ['type'=>'group', 'code'=>'group2'],
     *                               ['type'=>'static_role', 'code'=>'role3'],
     *                               ...
     *                               ]
     *
     * @return array
     * For example:
     * [
     *      'user'=> [
     *              'ids' => [
     *                ['1'=>'1'],
     *                ['2'=>'2']
     *              ],
     *              'codes' => [
     *                ['user3'=>'user3'],
     *                ['user4'=>'user4']
     *              ]
     *            ]
     *      'group'=>['group2'=> 'group2'],
     *      'static_role'=>['role3'=>'role3']
     * ]
     */
    private function convertMembersArrayToMembersInfo(array $members_array)
    {
        $user_ids = [];
        $user_codes = [];
        $group_codes = [];
        $static_role_codes = [];
        foreach ($members_array as $member_array) {
            $member_type = $member_array[self::MEMBER_TYPE];
            switch ($member_type) {
                case self::TYPE_USER :
                    if (isset($member_array[self::MEMBER_ID])) {
                        $member_id = $member_array[self::MEMBER_ID];
                        $user_ids[$member_id] = $member_id;
                    } elseif (isset($member_array[self::MEMBER_CODE])) {
                        $member_code = $member_array[self::MEMBER_CODE];
                        $user_codes[$member_code] = $member_code;
                    }
                    break;
                case self::TYPE_ORGANIZATION :
                    $member_code = $member_array[self::MEMBER_CODE];
                    $group_codes[$member_code] = $member_code;
                    break;
                case self::TYPE_STATIC_ROLE :
                    $member_code = $member_array[self::MEMBER_CODE];
                    $static_role_codes[$member_code] = $member_code;
                    break;
            }
        }

        $member_codes = [];
        $member_codes[self::TYPE_USER] = [self::USER_IDS => $user_ids, self::USER_CODES => $user_codes];
        $member_codes[self::TYPE_ORGANIZATION] = $group_codes;
        $member_codes[self::TYPE_STATIC_ROLE] = $static_role_codes;

        return $member_codes;
    }

    /**
     * @param array $type_id_array
     *
     * @return array
     */
    public function convertTypeIdArrayToMemberIds(array $type_id_array)
    {
        $member_ids = [];
        $user_ids = [];
        $group_ids = [];
        $static_role_ids = [];
        foreach ($type_id_array as $type_id) {
            $member_code = $type_id[self::MEMBER_ID];
            $member_type = $type_id[self::MEMBER_TYPE];
            switch ($member_type) {
                case self::TYPE_USER :
                    $user_ids[$member_code] = $member_code;
                    break;
                case self::TYPE_ORGANIZATION :
                    $group_ids[$member_code] = $member_code;
                    break;
                case self::TYPE_STATIC_ROLE :
                    $static_role_ids[$member_code] = $member_code;
                    break;
            }
        }

        $member_ids[self::TYPE_USER] = $user_ids;
        $member_ids[self::TYPE_ORGANIZATION] = $group_ids;
        $member_ids[self::TYPE_STATIC_ROLE] = $static_role_ids;

        return $member_ids;
    }

    /**
     * Get user's name separate by comma
     *
     * @param array $user_ids User IDs
     *
     * @return string
     */
    public static function getCommaSeparatedUserNames(array $user_ids)
    {
        $users = [];

        foreach ($user_ids as $user_id) {
            $user = [
                MemberLogic::MEMBER_ID   => $user_id,
                MemberLogic::MEMBER_TYPE => MemberLogic::TYPE_USER
            ];
            $users[$user_id] = $user;
        }
        $users = MemberLogic::getInstance()->getDisplayMemberList($users);

        $names = '';
        $total = count($users);
        $i = 0;
        foreach ($users as $user) {
            $i++;
            $names .= $user[MemberLogic::DISPLAY_NAME];
            if ($i < $total) {
                $names .= ", ";
            }
        }

        return $names;
    }
}
