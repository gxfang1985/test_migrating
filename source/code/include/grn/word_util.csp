<?php

/**
 * ereg系の正規表現文字列をエスケープする。
 * デフォルトでエスケープされる文字列： .\!+*?[]^$()=!<>|:
 *
 * @package   grn.common
 *
 * @param     $str     string   エスケープ対象文字列
 * @param     $meta    string   エスケープ対象メタ文字
 *
 * @return    string   エスケープされた文字列
 */
function grn_common_ereg_escape($str, $meta = '.\!+*?[]^$()=!<>|:')
{
    $pattern = addcslashes($meta, $meta);
    $escaped = mb_ereg_replace("[" . $pattern . "]", '\\\\0', $str);

    return $escaped;
}

/**
 * 禁則処理
 *
 * @author    Eiji TAEN   2006/03
 * @package   grn.common
 */
class GRN_FoldWords
{
    // 1行の幅(byte)
    var $_line_width = 80;
    // エスケープ対象メタ文字
    var $_meta_str = '.\!+*?[]^$()=!<>|:';
    // ワードラップ対象文字
    var $_word_wrap_str = "[:alnum:]";
    // 行頭禁止文字
    var $_no_begin = "\!%\),\.\:;\?\]\}'￠’”‰′″℃、。々〉》」』】〕ぁぃぅぇぉっゃゅょゎ゛゜ゝゞァィゥェォッャュョヮヵヶｧｨｩｪｫｯｬｭｮ・ーヽヾ！％），．：；？］｝";
    // 行末禁止文字
    var $_no_end = "\$\(\[\{￡‘“〈《「『【〔＄（［｛￥";
    // ぶら下げ文字数(byte)
    var $_extend_num = 3;
    // 追い出し文字数(byte)
    var $_shorten_num = 9;
    // ぶら下げた文字数
    var $_current_extend_num = 0;
    // 追い出した文字数
    var $_current_shorten_num = 0;

    /**
     * コンストラクタ
     */
    function __construct()
    {
    }

    /**
     * 行幅を取得する
     */
    function getLineWidth()
    {
        return $this->_line_width;
    }

    /**
     * 行幅を指定する
     * マイナスが指定された場合は1となる
     *
     * @param   int $num 行幅(byte)
     */
    function setLineWidth($num)
    {
        if ($num < 1) {
            $num = 1;
        }
        $this->_line_width = $num;
    }

    /**
     * 正規表現エスケープ対象メタ文字を取得する
     */
    function getEscapeMeta()
    {
        return $this->_meta_str;
    }

    /**
     * 正規表現エスケープ対象メタ文字を指定する
     */
    function setEscapeMeta($str)
    {
        $this->_meta_str = $str;
    }

    /**
     * ワードラップ対処文字列を取得する
     */
    function getWordWrap()
    {
        return $this->_word_wrap_str;
    }

    /**
     * ワードラップ対処文字列を指定する
     *
     * @param   string $str ワードラップ対象文字列
     */
    function setWordWrap($str)
    {
        $this->_word_wrap_str = $str;
    }

    /**
     * 行頭禁止文字を取得する
     */
    function getNoBegin()
    {
        return $this->_no_begin;
    }

    /**
     * 行頭禁止文字を指定する
     *
     * @param   string $str 行頭禁止文字列
     */
    function setNoBegin($str)
    {
        $this->_no_begin = $str;
    }

    /**
     * 行末禁止文字を取得する
     */
    function getNoEnd()
    {
        return $this->_no_end;
    }

    /**
     * 行末禁止文字を指定する
     *
     * @param   string $str 行末禁止文字列
     */
    function setNoEnd($str)
    {
        $this->_no_end = $str;
    }

    /**
     * ぶら下げ文字数を取得する
     */
    function getExtendNum()
    {
        return $this->_extend_num;
    }

    /**
     * ぶら下げ文字数を指定する。
     * マイナスが指定された場合には 0 となる。
     * 行幅以上の値が指定された場合は行幅と等しくなる。
     *
     * @param   int $num ぶら下げ文字数(byte)
     */
    function setExtendNum($num)
    {
        if ($num < 0) {
            $num = 0;
        }
        if ($num > $this->_line_width) {
            $num = $this->_line_width;
        }
        $this->_extend_num = $num;
    }

    /**
     * 追い出し文字数を取得する
     */
    function getShortenNum()
    {
        return $this->_shorten_num;
    }

    /**
     * 追い出し文字数を指定する。
     * マイナスが指定された場合には 0 となる。
     * 行幅以上の値が指定された場合は行幅と等しくなる。
     *
     * @param   int $num 追い出し文字数(byte)
     */
    function setShortenNum($num)
    {
        if ($num < 0) {
            $num = 0;
        }
        if ($num > $this->_line_width) {
            $num = $this->_line_width;
        }
        $this->_shorten_num = $num;
    }

    /**
     * 禁則処理を行う
     *
     * @param    $data    string   禁則処理対象文字列
     *
     * @return   string   禁則処理後文字列
     */
    function fold($data)
    {
        $folded_data = '';
        $pos = 0;

        mb_ereg_search_init($data, "\n");
        while (($reg_array = mb_ereg_search_pos()) !== false) {
            $this->_current_extend_num = 0;
            $this->_current_shorten_num = 0;

            // 改行までを切り出し
            $line = mb_strcut($data, $pos, $reg_array[0] - $pos);
            $pos = $reg_array[0] + 1;
            $folded_array = $this->_fold($line);
            if (strlen($folded_data) > 0) {
                $folded_data .= "\n";
            }
            $folded_data .= $folded_array[0];
            if (strlen($folded_array[1]) > 0) {
                $folded_data .= "\n" . $folded_array[1];
            }
        }

        // 最終行
        if ($pos !== 0) {
            $data = mb_strcut($data, $pos);
        }
        $this->_current_extend_num = 0;
        $this->_current_shorten_num = 0;
        $folded_array = $this->_fold($data);
        if (strlen($folded_data) > 0) {
            $folded_data .= "\n";
        }
        $folded_data .= $folded_array[0];
        if (strlen($folded_array[1]) > 0) {
            $folded_data .= "\n" . $folded_array[1];
        }

        return $folded_data;
    }

    /**
     * @access   private
     */
    function _fold($line)
    {
        $ret = false;

        // 指定幅できる
        $substr = mb_strcut($line, 0, $this->_line_width);
        // 切られた残り
        $remained = mb_strcut($line, $this->_line_width);

        if (strlen($remained) > 0) // 折りたたみあり
        {
            // 行頭禁則処理
            if (strlen($this->_no_begin) > 0
                && mb_ereg("^[" . $this->_no_begin . "]", $remained) !== false
            ) {
                $wrap_array = $this->_word_wrap($substr, $remained,
                    $this->_no_begin, true);
                if ($wrap_array !== false) {
                    $substr = $wrap_array[0];
                    $remained = $wrap_array[1];
                }
            }

            // 行末禁則処理
            if (strlen($this->_no_end) > 0
                && mb_ereg("[" . $this->_no_end . "]$", $substr) !== false
            ) {
                $wrap_array = $this->_word_wrap($substr, $remained,
                    $this->_no_end,
                    false, true);
                if ($wrap_array !== false) {
                    $substr = $wrap_array[0];
                    $remained = $wrap_array[1];
                }
            }

            // ワードラップ処理
            if (strlen($this->_word_wrap_str) > 0
                && mb_ereg("[" . $this->_word_wrap_str . "]$", $substr)
                   !== false
                && mb_ereg("^[" . $this->_word_wrap_str . "]", $remained)
                   !== false
            ) {
                $wrap_array = $this->_word_wrap($substr, $remained,
                    $this->_word_wrap_str);
                if ($wrap_array !== false) {
                    $substr = $wrap_array[0];
                    $remained = $wrap_array[1];
                }
            }

            // 一旦初期化
            $this->_current_extend_num = 0;
            $this->_current_shorten_num = 0;

            // 折りたたまれた文字列に対して禁則処理
            $remained_array = $this->_fold($remained);
            if (strlen($remained_array[0]) !== 0) {
                $substr .= "\n" . $remained_array[0];
            }
            $remained = $remained_array[1];
        }

        $ret = [$substr, $remained];

        return $ret;
    }

    /**
     * @access   private
     */
    function _word_wrap(
        $current,
        $next,
        $pattern,
        $no_begin = false,
        $no_end = false
    ) {
        $ret = false;

        if (strlen($current) === 0 || strlen($next) === 0
            || strlen($pattern) === 0
        ) {
            return $ret;
        }

        // ぶら下げ処理
        $ret = $this->_word_extend($current, $next, $pattern, $no_end);
        if ($ret !== false) {
            return $ret;
        }

        // 追い出し処理
        $ret = $this->_word_shorten($current, $next, $pattern, $no_begin);
        if ($ret !== false) {
            return $ret;
        }

        return $ret;
    }

    /**
     * ぶら下げ処理
     *
     * @access   private
     */
    function _word_extend($current, $next, $pattern, $no_end = false)
    {
        $ret = false;

        if ($this->_extend_num > 0) {
            $matched_str = '';

            // パターンマッチングした行頭文字列
            mb_ereg("^[" . $pattern . "]*", $next, $regs);
            if ( ! empty($regs) && $regs[0] !== false) {
                $matched_str = $regs[0];
            }

            // 行末禁則処理の場合にはマッチした文字列+1文字を追い出す
            if ($no_end === true) {
                mb_ereg("^(" . grn_common_ereg_escape($matched_str,
                        $this->_meta_str) . ").", $next,
                    $regs);
                if ( ! empty($regs) && $regs[0] !== false) {
                    $matched_str = $regs[0];
                }
            }

            // ぶら下げ文字数以下の文字列がマッチしたか
            // ぶら下げ文字数より多くの文字列がマッチした場合にはぶら下げない
            $matched_str_len = strlen($matched_str);
            if ($matched_str_len > 0
                && ($this->_current_extend_num + $matched_str_len)
                   <= $this->_extend_num
            ) {
                $this->_current_extend_num += $matched_str_len;

                $next_array = mb_split("^("
                                       . grn_common_ereg_escape($matched_str,
                        $this->_meta_str) . ")",
                    $next);

                $ret = [$current . $matched_str, $next_array[1]];
            }
        }

        return $ret;
    }

    /**
     * 追い出し処理
     *
     * @access   private
     */
    function _word_shorten($current, $next, $pattern, $no_begin = false)
    {
        $ret = false;

        if ($this->_shorten_num > 0) {
            $matched_str = '';

            // パターンマッチングした行末文字列
            mb_ereg("[" . $pattern . "]*$", $current, $regs);
            if ( ! empty($regs) && $regs[0] !== false) {
                $matched_str = $regs[0];
            }

            // 行頭禁則処理の場合にはマッチした文字列+1文字を追い出す
            if ($no_begin === true) {
                mb_ereg(".(" . grn_common_ereg_escape($matched_str,
                        $this->_meta_str) . ")$", $current,
                    $regs);
                if ( ! empty($regs) && $regs[0] !== false) {
                    $matched_str = $regs[0];
                }
            }

            // 追い出し文字数以下の文字列がマッチしたか
            // 追い出し文字数より多くの文字列がマッチした場合には追い出さない
            $matched_str_len = strlen($matched_str);
            if ($matched_str_len > 0
                && ($this->_current_shorten_num + $matched_str_len)
                   <= $this->_shorten_num
                && strcmp($current, $matched_str) !== 0
            ) {
                $this->_current_shorten_num += $matched_str_len;

                $current_array = mb_split("("
                                          . grn_common_ereg_escape($matched_str,
                        $this->_meta_str) . ")$",
                    $current);
                $ret = [$current_array[0], $matched_str . $next];
            }
        }

        return $ret;
    }

}


