<?php

/**
 * Utilities for UUM View-Controller.
 *
 * @version 1.0
 * @package grn.common
 */

require_once('fw/i18n.csp');
require_once('fw/module.csp');
require_once('grn/error_code.csp');

define('GRN_COMMON_MEMBER_SELECTION_NORMAL', 0);
define('GRN_COMMON_MEMBER_SELECTION_SYSTEM', 1);
define('GRN_COMMON_MEMBER_SELECTION_SCHEDULE', 2);

define('GRN_COMMON_SCORE_SELECTED', 5);
define('GRN_COMMON_SCORE_UNSELECTED', 1);
define('GRN_COMMON_SCORE_UPPER', 100);
define('GRN_COMMON_SCORE_INITIAL', 50);

define('GRN_UUM_USERTITLE_SHOW_MAIL', 'mail');
define('GRN_UUM_USERTITLE_SHOW_LOGINNAME', 'login');

/**
 * 最近選択したユーザの最大数
 */
define('GRN_COMMON_FREQUENT_USER_MAX', 20);

/**
 * 最近選択した組織の最大数
 */
define('GRN_COMMON_FREQUENT_GROUP_MAX', 10);

/**
 * よく利用するユーザの最大数
 */
define('GRN_COMMON_OFTENUSED_USER_MAX', 20);

/**
 * よく利用する組織の最大数
 */
define('GRN_COMMON_OFTENUSED_GROUP_MAX', 10);

/**
 * Provide utility methods over GRN_Uum for View-Controller.
 *
 * @package grn.common
 */
class GRN_UumUtil extends CB_ModuleBase
{
    const INVALID_PASSWORD = '***************';

    /**
     * @return GRN_UumUtil
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_UumUtil();
        }

        return $_instance;
    }

    /**
     * @var GRN_Uum
     * @access private
     */
    var $_uum;

    /**
     * @var CB_DatabaseConnection
     * @access private
     */
    var $_db;

    /**
     * @access private
     */
    function __construct()
    {
        parent::__construct('grn.common.uum_util');

        global $G_container_base;
        $this->_uum = $G_container_base->getInstance('uum');

        global $G_container_base;
        $this->_db = $G_container_base->getInstance('dbconn');
    }

    //////////////////////////////////////////////////////////////
    // このメソッドに関しては廃止します。今後使用しないでください。
    //////////////////////////////////////////////////////////////
    function getUsers(
        $offset = 0,
        $limit = -1,
        $order_by = 'col_position, _id',
        $additional_condition = null
    ) {
        return $this->_uum->getUsers($offset, $limit, $order_by,
            $additional_condition);
    }

    function getTitleInfo($info, $show_type)
    {
        return htmlspecialchars($this->_getTitleInfo($info, $show_type));
    }

    /**
     * @access private
     */
    function _getTitleInfo($info, $show_type)
    {
        $str = '';
        switch ($show_type) {
            case GRN_UUM_USERTITLE_SHOW_MAIL:
                $str = sprintf("%s(%s)", $info['col_display_name'],
                    $info['col_email_address']);
                break;
            case GRN_UUM_USERTITLE_SHOW_LOGINNAME:
                $str = sprintf("%s(%s)", $info['col_display_name'],
                    $info['col_foreign_key']);
                break;
            default:
                $str = $info['col_display_name'];
                break;
        }

        return $str;
    }

    /**
     * @access private
     */
    function _getUserItemInfo(
        $total_id,
        $group_info,
        $title_key,
        &$access_evaluator,
        $show_user_type,
        $show_group_name,
        $ignore_user_ids,
        $params
    ) {
        $title = cb_msg('grn.common', $title_key,
            ['name' => $group_info['col_name']]);

        $info = [
            'id'    => $total_id,
            'oid'   => $group_info['_id'],
            'title' => $title
        ];

        $users = [];
        if ($show_group_name) {
            $id = 'g' . $group_info['_id'];
            $name = '[' . $group_info['col_name'] . ']';
            $users[$id] = $name;
        }

        $users_in_group = $this->_uum->getGroupUsersInfo($group_info['_id']);
        if ($access_evaluator) {
            $users_in_group = $access_evaluator->evalUsers($users_in_group,
                $params);
        }

        if (is_array($users_in_group)) {
            foreach ($users_in_group as $user_info) {
                $users[$user_info['_id']] = $this->_getTitleInfo($user_info,
                    $show_user_type);
            }

            if (is_array($ignore_user_ids)) {
                foreach ($ignore_user_ids as $id) {
                    unset($users[$id]);
                }
            }
            $info['users'] = $users;
        }

        return $info;
    }

    /**
     * ユーザーの頻度情報を更新する.
     */
    function selectUsers(& $login_user, $array_target_user_ids)
    {
        $user_id = $login_user->getOID();

        require_once('grn/history.csp');
        $history_manager = GRN_Uum_HistoryManager::getInstance();
        $history_manager->selectUsers($user_id, $array_target_user_ids);
    }

    /**
     * グループの頻度情報を更新する.
     */
    function selectGroups(& $login_user, $array_target_group_ids)
    {
        $user_id = $login_user->getOID();

        require_once('grn/history.csp');
        $history_manager = GRN_Uum_HistoryManager::getInstance();
        $history_manager->selectGroups($user_id, $array_target_group_ids);

    }

    function listDynamicRoles()
    {
        require_once('fw/i18n.csp');
        static $dynamic_roles = ['Everyone', 'LoginUser'];

        $roles = [];
        foreach ($dynamic_roles as $role) {
            $roles[$role] = [
                'is_dynamic' => true,
                'name'       => cb_msg('grn.role', $role)
            ];
        }

        return $roles;
    }

    /**
     * ダイナミック、スタティック両ロールの一覧を返す.
     * ロールキーが配列のキーで、値は
     *    array( 'is_dynamic' => (ダイナミックならTRUE, スタティックならFALSE),
     *           'name'       => (表示名) )
     */
    function listAllRoles()
    {
        $roles = $this->listDynamicRoles();
        $static_roles = $this->_uum->listStaticRoles();
        foreach (array_keys($static_roles) as $id) {
            $role =& $static_roles[$id];
            $key = $role->get('foreign_key');
            $roles[$key] = [
                'is_dynamic' => false,
                'name'       => $key
            ];
        }

        return $roles;
    }

    function getGroupPath($gid)
    {
        $group =& $this->_uum->getGroup($gid);
        $path = [];

        while ($group) {
            $path = [$group->getOID() => & $group] + $path;
            $group =& $group->get('parent');
        }

        return $path;
    }

    function getGroupPathString($gid, $delm = '>')
    {
        $group =& $this->_uum->getGroup($gid);

        $path = null;

        while ($group) {
            // GRN2-3258
            $group_info = $this->_uum->getGroupInfo($group->getOID());
            if ($path) {
                $path = $group_info['col_name'] . $delm . $path;
            } else {
                $path = $group_info['col_name'];
            }

            $group =& $group->get('parent');
        }

        // GRN2-3258
        return $path;
    }


    function registerFile($key, & $file)
    {
        if ($file['error'] != UPLOAD_ERR_OK) {
            return false;
        }

        $ss =& $this->getSession();
        $files = $ss->getFiles($key);
        if (is_array($files)) {
            foreach (array_keys($files) as $id) {
                $ss->unsetFile($key, $id);
            }
        }

        $id = $ss->addFile($key, $file);
    }

    function cleanRegisteredFile($key)
    {
        $ss =& $this->getSession();
        $files = $ss->getFiles($key);
        if (is_array($files)) {
            foreach (array_keys($files) as $id) {
                $ss->unsetFile($key, $id);
            }
        }
    }

    function &unregisterFile($key)
    {
        $ss = $this->getSession();
        $files = $ss->getFiles($key);
        if ( ! is_array($files)) {
            $___ret = false;

            return $___ret;
        }

        foreach (array_keys($files) as $id) {
            return $files[$id];
        }
    }

    /**
     * this function is recursive function, used only in getEntireGroupTree()
     *
     * @author M.Oomori
     * @date   7/11/2004
     */
    function _getSubTree($groups, & $tree)
    {
        foreach (array_keys($groups) as $gid) {
            $group = &$groups[$gid];
            $child_groups = $this->_uum->getChildGroups($gid);
            $children_tree = [];
            $this->_getSubTree($child_groups, $children_tree);
            $tree[$gid] = [
                'oid'      => $gid,
                'code'     => $group->get('foreign_key'),
                'title'    => $group->get('name'),
                'memo'     => $group->get('description'),
                'children' => $children_tree
            ];
        }
    }

    /**
     * get entire tree of groups
     *
     * @author M.Oomori
     * @date   7/11/2004
     *
     * @return array of the tree of groups
     */
    function getEntireGroupTree()
    {
        $root_groups = $this->_uum->getRootGroups();
        $tree = [];
        $this->_getSubTree($root_groups, $tree);

        return $tree;
    }

    function getGroupSelectionTree($gid)
    {
        /**
         * グループ選択UIに対応した組織階層データを取得する
         *
         * 1つの組織は以下のような配列で返される
         *
         * $organize['oid']    選択されている組織ID
         * $organize['code']   選択されている組織コード
         * $organize['title']  選択されている組織名
         * $organize['memo']   選択されている組織のメモ
         * $organize['child']  選択されている組織が子組織を持つ場合にはTRUE
         *
         * 返されるデータの構造は以下の通り
         *
         * $result['oid']       選択されている組織ID
         * $result['code']      選択されている組織コード
         * $result['title']     選択されている組織名
         * $result['memo']      選択されている組織のメモ
         * $result['children']     選択されている組織の子組織（組織IDをキーとして組織データを格納）
         * $result['ancestors']    選択されている組織までのパス（組織IDをキーとして組織データを格納）
         * $result['siblings'] 選択されている組織の兄弟組織（組織IDをキーとして組織データを格納）
         *
         * $result['parent'] に選択されている組織は含まれない
         * $result['organizes'] に選択されている組織は含まれる
         */
        if ( ! $gid) {
            // 組織IDの指定がない場合はトップの組織を「organizes」に入れて返す
            $roots = $this->_uum->getChildGroupsInfo(null);

            $organizes = [];
            foreach (array_keys($roots) as $gid) {
                $root = $roots[$gid];
                $has_child = $this->_uum->hasChild($gid);
                $organizes[$gid] = [
                    'oid'   => $gid,
                    'code'  => $root['col_foreign_key'],
                    'title' => $root['col_name'],
                    'memo'  => $root['col_description'],
                    'child' => $has_child
                ];
            }

            return ['siblings' => $organizes];
        }

        // Construct "parent", "organizes", "child" in order.
        $group =& $this->_uum->getGroup($gid);
        if ($group === false) {
            return false;
        }

        // "parent"
        $parent = [];
        $pgroup =& $group->get('parent');

        while ($pgroup) {
            $info = [
                'oid'   => $pgroup->getOID(),
                'code'  => $pgroup->get('foreign_key'),
                'title' => $pgroup->get('name'),
                'memo'  => $pgroup->get('description'),
                'child' => true
            ];

            $parent = [$pgroup->getOID() => $info] + $parent;
            $pgroup =& $pgroup->get('parent');
        }

        // "organizes"
        $organizes = [];
        $pgroup =& $group->get('parent');

        $gid = null;
        if ($pgroup) {
            $gid = $pgroup->getOID();
        }

        $groups = $this->_uum->getChildGroupsInfo($gid);
        foreach ($groups as $key => $value) {
            $has_child = $this->_uum->hasChild($key);
            $organizes[$key] = [
                'oid'   => $key,
                'code'  => $value['col_foreign_key'],
                'title' => $value['col_name'],
                'memo'  => $value['col_description'],
                'child' => $has_child
            ];
        }

        // "child"
        $children = [];
        $groups = $this->_uum->getChildGroupsInfo($group->getOID());
        foreach ($groups as $key => $value) {
            $has_child = $this->_uum->hasChild($key);
            $children[$key] = [
                'oid'   => $key,
                'code'  => $value['col_foreign_key'],
                'title' => $value['col_name'],
                'memo'  => $value['col_description'],
                'child' => $has_child
            ];
        }

        // Construct result array
        $result['ancestors'] = $parent;
        $result['siblings'] = $organizes;
        $result['children'] = $children;

        $result['oid'] = $group->getOID();
        $result['code'] = $group->get('foreign_key');
        $result['title'] = $group->get('name');
        $result['memo'] = $group->get('description');

        return $result;
    }

    /**
     * @name isValidPassword
     * @description return false if $password is not valid, such as '***************'
     */
    function isValidPassword($password)
    {
        if ($password == self::INVALID_PASSWORD) {
            return false;
        }

        return true;
    }

    function isStrongPassword($password, &$user)
    {
        require_once('grn/system_logic.csp');
        $system = GRN_System::getInstance();
        $setting = $system->getPasswordComplex();
        if (isset($setting['enable']) && $setting['enable']) {
            $strong_pwd_options = $setting['options'];

            require_once('grn/strong_password.csp');
            $pwd_validator = new GRN_StrongPasswordValidator();
            $pwd_validator->setOptions($strong_pwd_options);

            if (($strong_pwd_options & GRN_STRONG_PASSWD_OPTION_BANNEDWORDS)
                == GRN_STRONG_PASSWD_OPTION_BANNEDWORDS
            ) {
                $banned_words = [
                    $user->get('foreign_key'),
                    $user->get('display_name')
                ];

                $pwd_validator->setOptions($strong_pwd_options, $banned_words);
            }

            $ret = $pwd_validator->validate($password);

            return $ret;
        }

        return true;
    }

    function searchUsersInfo($keyword, $system_flg = false)
    {
        require_once('fw/string_util.csp');
        if (strlen(cb_trim($keyword)) <= 0) {
            return [];
        }

        // LIKE節用エスケープ
        global $G_container_base;
        $db =& $G_container_base->getInstance('dbconn');
        //$keyword = $db->escapeLike( $keyword );
        $query = 'LIKE ';

        $texts = cb_parse_search_text($keyword);
        //$texts = explode( ' ', $keyword );
        $conditions = [];
        foreach ($texts as $text) {
            if (0 < strlen($text)) {
                $format
                    = "( col_display_name @S '%@L%' ) OR ( col_email_address @S '%@L%' ) OR ( col_normalized_sort_key @S '%@L%' )";
                if ($system_flg) {
                    $format .= " OR ( col_foreign_key @S '%@L%' )";
                    $format = "( " . $format . " )";
                    $conditions[] = cb_queryf($db, $format, $query, $text,
                        $query, $text, $query, cb_normalize_sort_key($text),
                        $query, $text);
                } else {
                    $format = "( " . $format . " )";
                    $conditions[] = cb_queryf($db, $format, $query, $text,
                        $query, $text, $query, cb_normalize_sort_key($text));
                }
            }
        }

        $condition = implode(' AND ', $conditions);
        $users = $this->_uum->getUsersInfo(null, null, 0, -1, null,
            $condition);

        return $users;
    }

    public function getPropertiesForAddUser()
    {
        return [
            'display_name'          => 'display_name',
            'foreign_key'           => 'foreign_key',
            'display_name_language' => 'display_name_language',
            'nickname'              => 'nickname'
        ];
    }
}

function get_user_import_column_list()
{
    require_once("fw/i18n/system_config.csp");

    require_once("grn/bean/GrnCsvColumn.csp");
    global $G_container_base;
    /** @var GRN_Uum $uum */
    $uum = $G_container_base->getInstance('uum');
    $columns = [];
    $count = 1;

    $columns[$count++] = new GrnCsvColumn([
        "name" => cb_msg('grn.common', 'user_key'),
        "new"  => false
    ]);
    $columns[$count++] = new GrnCsvColumn([
        "name" => cb_msg('grn.common', 'user_display_name'),
        "new"  => false
    ]);
    if (CB_I18N_SystemConfig::isNickname()) {
        $columns[$count++] = new GrnCsvColumn([
            "name" => cb_msg('grn.common', 'user_display_name_language'),
            "new"  => true
        ]);
        $columns[$count++] = new GrnCsvColumn([
            "name" => cb_msg('grn.common', 'user_nickname'),
            "new"  => true
        ]);
    }
    $columns[$count++] = new GrnCsvColumn([
        "name" => cb_msg('grn.common', 'user_foreign_key'),
        "new"  => false
    ]);
    $columns[$count++] = new GrnCsvColumn([
        "name" => cb_msg('grn.common', 'user_password'),
        "new"  => false
    ]);
    $columns[$count++] = new GrnCsvColumn([
        "name" => cb_msg('grn.common', 'user_locale'),
        "new"  => true
    ]);
    $columns[$count++] = new GrnCsvColumn([
        "name" => cb_msg('grn.common', 'user_base'),
        "new"  => true
    ]);
    $columns[$count++] = new GrnCsvColumn([
        "name" => cb_msg('grn.common', 'user_position'),
        "new"  => false
    ]);
    $columns[$count++] = new GrnCsvColumn([
        "name" => cb_msg('grn.common', 'user_valid'),
        "new"  => false
    ]);
    $columns[$count++] = new GrnCsvColumn([
        "name" => cb_msg('grn.common', 'user_delete_flag'),
        "new"  => false
    ]);

    $item_values = $uum->getDefaultDisplayItemProperties();
    foreach ($item_values as $id => $properties) {
        if ($id === 'display_name' || $id === 'foreign_key') {
            continue;
        }

        if ( ! $properties['use']) {
            continue;
        }

        if ($properties['type'] === 'file'
            || $properties['type'] === 'primary_group'
            || $properties['type'] === 'usergroups'
            || $properties['type'] === 'attendee'
            || $properties['type'] === 'locale'
            || $properties['type'] === 'base'
        ) {
            continue;
        }

        $columns[$count++]
            = new GrnCsvColumn([
            "name" => $uum->getRealDefaultItemName($id),
            "new"  => false
        ]);
    }

    $extension_columns = $uum->listItems();
    $keys = array_keys($extension_columns);
    foreach ($keys as $id) {
        $column =& $extension_columns[$id];
        $use = $column->get('use');
        $type = $column->get('type');
        $display_name = $column->get('display_name');
        if ( ! $use) {
            continue;
        }
        if ($type === 'file') {
            continue;
        }
        $columns[$count++] = new GrnCsvColumn([
            "name" => $display_name,
            "new"  => false
        ]);
    }

    return $columns;
}


