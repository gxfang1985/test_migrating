<?php

namespace grn\grn\background;

/**
 */
class BackgroundJobLogger
{
    const LOG_INFO = 4;
    const LOG_NOTICE = 3;
    const LOG_WARNING = 2;
    const LOG_ERROR = 1;
    const LOG_CRITICAL = 0;

    private $logConfig;
    private $logLevel;
    private $textLogger;

    /**
     * @return BackgroundJobLogger
     */
    public static function create()
    {
        global $G_config_common;
        $logConfig = $G_config_common->get("BackgroundJob", "log");
        $logLevel = $G_config_common->get("BackgroundJob", "log_level");

        return new BackgroundJobLogger($logConfig, $logLevel);
    }

    /**
     * @param $logConfig string
     * @param $logLevel
     */
    public function __construct($logConfig, $logLevel)
    {
        $this->logConfig = $logConfig;
        $this->logLevel = $logLevel;
        $this->textLogger = new \grn\grn\TextLogger("background_job",
            $logConfig);
    }

    /**
     * @param $logLevel
     * @param $content
     */
    public function log($logLevel, $content)
    {
        if ($this->logLevel < $logLevel) {
            return;
        }

        if ( ! $this->logConfig) {
            return;
        }

        if ( ! is_numeric($this->logLevel)) {
            return;
        }

        $time = gmdate("M d Y H:i:s", time());
        $this->textLogger->log("[{$time} (GMT)]" . $content);
    }

    public function logException(\Exception $e)
    {
        $class = get_class($e);
        $message = $e->getMessage();
        $trace = $e->getTraceAsString();
        $ln = PHP_EOL;
        $this->log(BackgroundJobLogger::LOG_ERROR,
            "{$ln} exception:{$class}{$ln} message:{$message}{$ln} trace:{$trace}{$ln}");
    }

}
