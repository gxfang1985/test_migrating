<?php

namespace grn\grn\background;

class BackgroundJobActionLogger
{
    static private $_instance = null;
    private $actionLog;

    const ACTION_TYPE_ADD = 'add';
    const ACTION_TYPE_UPDATE = 'update';
    const ACTION_TYPE_EXECUTE = 'exec';

    private function __construct()
    {
        global $G_config_common;
        $actionLog = $G_config_common->get('BackgroundJob', 'action_log');
        if (defined('ON_FOREST') && $actionLog !== '1') {
            require_once('fw/forest_util.csp');
            $config = \CB_ForestUtil::getConfig();
            $actionLog = $config->get('BackgroundJob', 'action_log');
        }

        if ($actionLog === '1') {
            $this->actionLog = true;
        } else {
            $this->actionLog = false;
        }
    }

    public static function getInstance()
    {
        if (is_null(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    public function log(
        BackgroundJobDTO $dto,
        $action,
        $ctime = '',
        $ptime = '',
        $ntime = ''
    ) {
        if ($this->actionLog && ! is_null($dto)) {
            require_once('fw/miscFunctions.csp');
            $log = 'background job log:' .
                   ' [' . \CB_CyDECUtil::getInstance()->getDomainID() . ']' .
                   ' [' . getmypid() . ']' .
                   ' [' . cb_get_request_id() . ']';

            switch ($action) {
                case BackgroundJobActionLogger::ACTION_TYPE_ADD:
                    break;
                case BackgroundJobActionLogger::ACTION_TYPE_UPDATE:
                    break;
                case BackgroundJobActionLogger::ACTION_TYPE_EXECUTE:
                    break;
                default:
                    return;
            }
            $log .= ' [' . $action . ']';

            $module = '';
            switch ($dto->getJobName()) {
                case BackgroundJobName::SEND_NOTIFICATION:
                    $log .= ' [notification]';
                    $message = json_decode($dto->getMessage(), true);
                    if (isset($message['notifyData']['col_module_id'])) {
                        $module
                            = substr($message['notifyData']['col_module_id'],
                            4);
                    }
                    break;
                case BackgroundJobName::MAIL_AUTOMATIC_EVENT:
                    $log .= ' [mail]';
                    break;
            }
            $log .= ' id:' . $dto->getId();

            if ($ctime != '') {
                $log .= ' ctimeï¼š"' . $ctime . '"';
            }
            if ($ptime != '') {
                $log .= ' ptime:"' . $ptime . '"';
            }
            if ($ntime != '') {
                $log .= ' ntime:"' . $ntime . '"';
            }
            if ($module != '') {
                $log .= ' module:' . $module;
            }

            syslog(LOG_INFO, $log);
        }
    }

}
