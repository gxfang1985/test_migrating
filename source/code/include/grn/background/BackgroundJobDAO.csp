<?php

namespace grn\grn\background;

/**
 */
class BackgroundJobDAO implements IBackgroundJobDAO
{
    private $db;

    /**
     * @param \CB_DatabaseConnection $connection
     */
    public function __construct(\CB_DatabaseConnection $connection)
    {
        $this->db = $connection;
    }

    /**
     * @param BackgroundJobDTO[] $data
     */
    public function addJobs(array $data)
    {
        if (empty($data)) {
            return;
        }
        foreach ($data as $dto) {
            $this->addJob($dto);
        }
    }

    /**
     * @param BackgroundJobDTO $dto
     */
    public function addJob(BackgroundJobDTO $dto)
    {
        $query = " INSERT INTO tab_grn_background_job"
                 . " (col_job_name, col_message, col_ctime, col_ptime)"
                 . " VALUES ";
        $this->db->query($query . $this->generateValuesStatement($dto) . ";");
        $dto->setId($this->db->get_insert_id());
        BackgroundJobActionLogger::getInstance()->log($dto,
            BackgroundJobActionLogger::ACTION_TYPE_ADD,
            $dto->getCreateTime(),
            $dto->getPublishTime(),
            time());
    }

    /**
     * @param BackgroundJobDTO $dto
     *
     * @return string
     */
    private function generateValuesStatement(BackgroundJobDTO $dto)
    {
        return $this->db->format(
            "('@S', '@S', FROM_UNIXTIME('@S'), FROM_UNIXTIME('@S'))",
            [
                $dto->getJobName(),
                $dto->getMessage(),
                $dto->getCreateTime(),
                $dto->getPublishTime()
            ]
        );
    }


    /**
     * @return BackgroundJobDTO[]
     */
    public function getJobs()
    {
        $query = "SELECT _id AS id,"
                 . " col_message AS message,"
                 . " col_job_name AS jobName,"
                 . " UNIX_TIMESTAMP(col_ctime) as createTimestamp,"
                 . " UNIX_TIMESTAMP(col_ptime) as publishTimestamp,"
                 . " col_ctime as ctime,"
                 . " col_ptime as ptime,"
                 . " UNIX_TIMESTAMP() as ntime"
                 . " FROM tab_grn_background_job"
                 . " WHERE UNIX_TIMESTAMP(col_ptime) < UNIX_TIMESTAMP()"
                 . " LIMIT 1";
        $jobs = [];
        $result = $this->db->query($query);

        while (($row = $this->db->fetch_assoc($result)) !== false) {
            $dto = new BackgroundJobDTO($row["jobName"], $row["message"],
                $row["createTimestamp"], $row["publishTimestamp"]);
            $dto->setId($row["id"]);
            $jobs[] = $dto;
            BackgroundJobActionLogger::getInstance()->log($dto,
                BackgroundJobActionLogger::ACTION_TYPE_EXECUTE,
                $row['ctime'] . '(' . $row["createTimestamp"] . ')',
                $row['ptime'] . '(' . $row["publishTimestamp"] . ')',
                $row['ntime']);
        }

        return $jobs;
    }

    /**
     * @return int
     */
    public function numOfJobs()
    {
        $query
            = "SELECT _id AS id FROM tab_grn_background_job WHERE UNIX_TIMESTAMP(col_ptime) < UNIX_TIMESTAMP() LIMIT 10";
        $result = $this->db->query($query);
        $num = $this->db->num_rows($result);
        $this->db->free_result($result);

        return $num;
    }


    /**
     * @param BackgroundJobDTO $dto
     *
     * @throws \InvalidArgumentException
     * @return void
     */
    public function removeJob(BackgroundJobDTO $dto)
    {
        if (is_null($dto->getId())) {
            throw new \InvalidArgumentException("_id is null.");
        }
        $query = "DELETE FROM tab_grn_background_job WHERE _id='@S'";
        $this->db->query($this->db->format($query, [$dto->getId()]));
    }

    /**
     * @param BackgroundJobDTO $dto
     *
     * @throws \InvalidArgumentException
     */
    public function updateJobMessageById(BackgroundJobDTO $dto)
    {
        if (is_null($dto->getId())) {
            throw new \InvalidArgumentException("_id is null.");
        }
        $query
            = "UPDATE tab_grn_background_job SET col_message='@S' WHERE _id='@S'";
        $this->db->query($this->db->format($query,
            [$dto->getMessage(), $dto->getId()]));
        $this->db->query('COMMIT');
        BackgroundJobActionLogger::getInstance()->log($dto,
            BackgroundJobActionLogger::ACTION_TYPE_UPDATE);
    }
}
