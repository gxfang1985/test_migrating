<?php

require_once('fw/server_file.csp');
require_once('grn/mime.csp');

/**
 * ServerFile for Ogre.
 *
 * @package grn.common
 */
class GRN_ServerFile extends CB_ServerFile
{
    /**
     * コンストラクタ
     */
    function __construct(&$row)
    {
        parent::__construct($row);
    }

    /**
     * ダウンロード前処理を実行する
     * ( システムのMIMEマッピングを利用してダウンロード処理をする。)
     *
     * @param bool   $allow_inline
     * @param string $mime
     *
     * @return bool
     */
    function download($allow_inline = true, $mime = null)
    {
        if (is_null($mime)) {
            $mime = $this->getMIMEType();
            if (( ! is_null($this->get('charset'))) and (strpos($mime, 'text/')
                                                         === 0)
            ) {
                $mime .= '; charset=' . $this->get('charset');
            }
        }

        return parent::download($allow_inline, $mime);
    }

    /**
     * 拡張子を取得する
     *
     * @return string 拡張子
     */
    function getExtension()
    {
        $path = $this->get('name');

        return strtolower(substr(strrchr($path, '.'), 1));
    }

    /**
     * MIMEタイプを取得する
     *
     * @return string MIMEタイプ
     */
    function getMIMEType()
    {
        $mcm = GRN_MIMEConfigManager::getInstance();
        $mime = $mcm->getMIMEType($this->getExtension());
        if (false === $mime) {
            //$mime = $this->get( 'mime' );
            $mime = parent::get('mime');
            if (false === $mime) {
                $mime = null;
            }
        }

        return $mime;
    }

    /**
     * カラム取得
     *
     * @param string $col_name
     *
     * @return CB_Row|mixed|null
     */
    function &get($col_name)
    {
        if ($col_name === 'mime') {
            // 永続化レイヤーのメソッド上書きし、
            // DBに保存した値を正確に取得できるのはこのクラス内のみとした

            $mcm = GRN_MIMEConfigManager::getInstance();
            $mime = $mcm->getMIMEType($this->getExtension());
            if (false === $mime) {
                $mime = parent::get('mime');
                if (false === $mime) {
                    $mime = null;
                }
            }

            return $mime;
        }
        $ret = parent::get($col_name);

        return $ret;
    }

    /**
     * @param array|CB_ServerFile|string $file
     * @param bool                       $throw_error
     *
     * @return bool
     */
    public static function validateFileSize($file, $throw_error = true)
    {
        if ( ! defined('ON_FOREST')) {
            if (is_string($file)) {
                if (strpos($file, '/logging/log')) {
                    return true;
                }
            }
        }
        require_once('grn/file.csp');
        $config = GRN_FileManagerConfig::getInstance();
        $max = $config->getMaxFileSize();

        $size = 0;
        if (is_array($file)) {
            $size = $file['size'];
        } elseif (is_a($file, 'CB_ServerFile')) {
            $size = $file->get('size');
        } else {
            assert('is_string( $file )');
            $size = filesize($file);
        }

        if ((0 < $max) && ($max < $size)) {
            if ($throw_error) {
                cb_throw_error(E_GRN_FILE_MAX_SIZE, null,
                    ['limit' => grn_get_filesize_format($max)]);
            }

            return false;
        }

        return true;
    }

    /**
     * @return bool|string
     */
    public function getContents()
    {
        $file_manager = cb_lwc_file_manager();

        return $file_manager->getContents($this->getPath());
    }
}


