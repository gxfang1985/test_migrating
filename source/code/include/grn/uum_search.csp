<?php

use grn\system\sandbox\SandboxConstants;

class GRN_Uum_Search extends GRN_Uum
{
    function __construct()
    {
        parent::__construct();
    }

    /**
     * @return GRN_Uum
     */
    protected function getUum()
    {
        return cb_lwc_uum();
    }

    /**
     *
     * @param null $condition
     *
     * @return mixed
     * (Note) Support Sandbox mode.
     */
    function getUserInfoCountWithCondition($condition = null)
    {
        $table = $this->getUserTable();
        $rowset = new CB_RowSet($table);
        $rowset->addCondition($this->_getLiveUserCondition());
        //outer join with userInfo table
        $table_userInfo = $this->_getInfoTable('user');
        $rowset->addJoin($table_userInfo,
            "tab_cb_user._id = tab_grn_userinfo.col_user");

        if (is_string($condition) && 0 < strlen($condition)) {
            $rowset->addCondition($condition);
        }
        $rowset->applyGroupFunctions(['count' => 'COUNT(*)']);
        $rowset->setLock(CB_DATABASE_NO_LOCK);

        $row = $rowset->iterate();

        return $row['count'];
    }


    /**
     * @param null|string $condition
     *
     * @return string
     */
    function getDeactiveUserInfoCountWithCondition($condition = null)
    {
        $table = $this->getUserTable();
        $rowset = new CB_RowSet($table);
        $rowset->addCondition($this->_getDeactiveUserCondition());
        $rowset->addCondition($this->_getLiveUserCondition());
        $table_userInfo = $this->_getInfoTable('user');
        $rowset->addJoin($table_userInfo,
            "tab_cb_user._id = tab_grn_userinfo.col_user");

        if (is_string($condition) && 0 < strlen($condition)) {
            $rowset->addCondition($condition);
        }
        $rowset->applyGroupFunctions(['count' => 'COUNT(*)']);
        $rowset->setLock(CB_DATABASE_NO_LOCK);

        $row = $rowset->iterate();

        return $row['count'];
    }

    /**
     * @param string|null $additional_condition
     *
     * @return string
     */
    function getNoGroupUserInfoCount($additional_condition = null)
    {
        $p = $this->sandbox === SandboxConstants::SANDBOX_MODE ? "_sandbox"
            : "";

        $db = cb_get_master_db();
        $query = "SELECT COUNT(*) AS count "
                 . "FROM tab_cb_user "
                 . "LEFT JOIN tab_cb_usergrouprelation{$p} "
                 . "ON tab_cb_usergrouprelation{$p}.col_user = tab_cb_user._id "
                 . "INNER JOIN tab_grn_userinfo "
                 . "ON tab_cb_user._id = tab_grn_userinfo.col_user "
                 . "WHERE "
                 . " tab_cb_usergrouprelation{$p}.col_group IS NULL "
                 . " AND tab_cb_user.col_deleted IS NULL";

        if (is_string($additional_condition)
            && 0 < strlen($additional_condition)
        ) {
            $query .= " AND {$additional_condition}";
        }

        $result = $db->query($query);
        $row = $db->fetch_assoc($result);
        $db->free_result($result);

        return $row['count'];
    }

    /**
     * @param int|string  $gid
     * @param null|string $additional_condition
     *
     * @return string
     */
    function getGroupUserInfoCount($gid, $additional_condition = null)
    {
        $uum = $this->getUum();
        $group =& $uum->getGroup($gid);
        if ($group === false) {
            return false;
        }
        $p = $this->sandbox === SandboxConstants::SANDBOX_MODE ? "_sandbox"
            : "";

        $db = cb_get_master_db();
        $query = "SELECT COUNT(*) AS count "
                 . "FROM tab_cb_user "
                 . "INNER JOIN tab_cb_usergrouprelation{$p} "
                 . "ON tab_cb_usergrouprelation{$p}.col_user = tab_cb_user._id "
                 . "AND tab_cb_user.col_deleted IS NULL "
                 . "INNER JOIN tab_grn_userinfo "
                 . "ON tab_cb_user._id = tab_grn_userinfo.col_user "
                 . "WHERE col_group = '@S'";
        $query = $db->format($query, [$group->getOID()]);

        if (is_string($additional_condition)
            && 0 < strlen($additional_condition)
        ) {
            $query .= " AND {$additional_condition}";
        }

        $result = $db->query($query);
        $row = $db->fetch_assoc($result);
        $db->free_result($result);

        return $row['count'];
    }

    function getGroupsUserInfoCount($gids, $additional_condition = null)
    {
        if (count($gids) == 0) {
            return 0;
        }

        $table =& $this->getUserTable();
        $rowset = new CB_RowSet($table);
        $rowset->addCondition($this->_getLiveUserCondition());

        $rowset->addJoin($this->_getUserGroupTable(),
            'tab_cb_usergrouprelation.col_user=tab_cb_user._id');

        //outer join with userInfo table
        $table_userInfo =  &$this->_getInfoTable('user');
        $rowset->addJoin($table_userInfo,
            "tab_cb_user._id = tab_grn_userinfo.col_user");

        $tmp_group = [];
        foreach ($gids as $gid) {
            $group =& $this->getGroup($gid);
            if ($group === false) {
                return false;
            }

            $tmp_group[] = "'" . $group->getOID() . "'";
        }
        $rowset->addCondition('tab_cb_usergrouprelation.col_group in('
                              . implode(',', $tmp_group) . ') ');
        if (is_string($additional_condition)
            && 0 < strlen($additional_condition)
        ) {
            $rowset->addCondition($additional_condition);
        }
        $rowset->applyGroupFunctions(['count' => 'COUNT(DISTINCT(tab_cb_user._id))']);
        $rowset->setLock(CB_DATABASE_NO_LOCK);

        $row =& $rowset->iterate();

        return $row['count'];
    }

    /**
     * @param int         $offset
     * @param int         $limit
     * @param string      $order_by
     * @param string|null $additional_condition
     *
     * @return CB_User[]
     */
    function getUserInfos(
        $offset = 0,
        $limit = -1,
        $order_by = 'col_position, _id',
        $additional_condition = null
    ) {
        $db = cb_get_master_db();
        $columns = $this->getInstanceColumnsOfCbUser('tab_cb_user');
        $query = "SELECT "
                 . implode(',', $columns) . " "
                 . "FROM (tab_cb_user "
                 . "INNER JOIN tab_grn_userinfo "
                 . "ON tab_cb_user._id = tab_grn_userinfo.col_user) "
                 . "WHERE (tab_cb_user.col_deleted IS NULL) ";

        if (is_string($additional_condition)
            && 0 < strlen($additional_condition)
        ) {
            $query .= "AND (" . $additional_condition . ") ";
        }
        $query .= "ORDER BY " . $order_by;
        $query = $db->select_format($query, $offset, $limit,
            CB_DATABASE_NO_LOCK);

        $result = $db->query($query);
        $users = [];
        $table = $this->getUserTable();
        while (($row = $result->fetch_assoc())) {
            $id = $row["_id"];
            $users[$id] = $table->getRow($id, $row);
        }

        return $users;
    }

    /**
     * @param string|null $additional_condition
     *
     * @return array
     *
     * Return User IDs who match the $additional_condition.
     * Deleted user is not extracted by this function.
     */
    function getUserIds($additional_condition = null)
    {
        $db = cb_get_master_db();
        $query = "SELECT DISTINCT "
                 . "tab_cb_user._id, tab_cb_user.col_position "
                 . "FROM tab_cb_user "
                 . "INNER JOIN tab_grn_userinfo ON tab_cb_user._id = tab_grn_userinfo.col_user "
                 . "WHERE (tab_cb_user.col_deleted IS NULL) ";

        if (0 < strlen($additional_condition)) {
            $query .= "AND (" . $additional_condition . ") ";
        }
        $query .= 'ORDER BY tab_cb_user.col_position, tab_cb_user._id';

        $users = [];
        $result = $db->query($query);
        while (($row = $result->fetch_assoc())) {
            $users[] = $row["_id"];
        };

        return $users;
    }

    /**
     * @param string|null $additional_condition
     *
     * @return array
     */
    function getDeactiveUserIds($additional_condition = null)
    {
        $add_condition_list = [];
        if (0 < strlen($additional_condition)) {
            $add_condition_list[] = '( ' . $additional_condition . ' )';
        }
        $add_condition_list[] = $this->_getDeactiveUserCondition();
        $additional_condition = implode(' AND ', $add_condition_list);

        return $this->getUserIds($additional_condition);
    }

    function getDeactiveUserInfos(
        $offset = 0,
        $limit = -1,
        $order_by = 'tab_cb_user.col_position, tab_cb_user._id',
        $add_condition = null
    ) {
        $add_conditions = [];
        if (0 < strlen($add_condition)) {
            $add_conditions[] = '( ' . $add_condition . ' )';
        }
        $add_conditions[] = $this->_getDeactiveUserCondition();
        $add_condition = implode(' AND ', $add_conditions);

        return $this->getUserInfos($offset, $limit, $order_by, $add_condition);
    }

    /**
     * @param int         $offset
     * @param int         $limit
     * @param string      $order_by Only 'tab_cb_user.col_position, tab_cb_user._id'
     * @param string|null $additional_condition
     *
     * @return CB_User[]
     */
    function getNoGroupUserInfos(
        $offset = 0,
        $limit = -1,
        $order_by = 'tab_cb_user.col_position, tab_cb_user._id',
        $additional_condition = null
    ) {
        $db = cb_get_master_db();
        $columns = $this->getInstanceColumnsOfCbUser('tab_cb_user');
        $query = "SELECT "
                 . implode(',', $columns) . " "
                 . "FROM (tab_cb_user "
                 . "LEFT JOIN tab_cb_usergrouprelation "
                 . "ON tab_cb_user._id = tab_cb_usergrouprelation.col_user) "
                 . "INNER JOIN tab_grn_userinfo "
                 . "ON tab_cb_user._id = tab_grn_userinfo.col_user "
                 . "WHERE (tab_cb_user.col_deleted IS NULL) "
                 . "AND (tab_cb_usergrouprelation.col_group IS NULL) ";

        if (is_string($additional_condition)
            && 0 < strlen($additional_condition)
        ) {
            $query .= "AND (" . $additional_condition . ") ";
        }
        $query .= "ORDER BY " . $order_by;
        $query = $db->select_format($query, $offset, $limit,
            CB_DATABASE_NO_LOCK);

        $result = $db->query($query);
        $users = [];
        $table = $this->getUserTable();
        while (($row = $result->fetch_assoc())) {
            $id = $row["_id"];
            $users[$id] = $table->getRow($id, $row);
        }

        return $users;
    }

    /**
     * @param string|null $additional_condition
     *
     * @return array
     */
    function getNoGroupUserIds($additional_condition = null)
    {
        $db = cb_get_master_db();
        $query = "SELECT DISTINCT "
                 . "tab_cb_user._id, tab_cb_user.col_position "
                 . "FROM (tab_cb_user "
                 . "LEFT JOIN tab_cb_usergrouprelation ON tab_cb_user._id = tab_cb_usergrouprelation.col_user) "
                 . "INNER JOIN tab_grn_userinfo ON tab_cb_user._id = tab_grn_userinfo.col_user "
                 . "WHERE (tab_cb_user.col_deleted IS NULL) AND (tab_cb_usergrouprelation.col_group IS NULL) ";

        if (0 < strlen($additional_condition)) {
            $query .= "AND (" . $additional_condition . ") ";
        }
        $query .= "ORDER BY tab_cb_user.col_position, tab_cb_user._id";
        $users = [];
        $result = $db->query($query);
        while (($row = $result->fetch_assoc())) {
            $users[] = $row["_id"];
        };

        return $users;
    }

    /**
     * @param string      $gid
     * @param int         $offset
     * @param int         $limit
     * @param string      $order_by
     * @param string|null $additional_condition
     *
     * @return \CB_User[]|false
     */
    function getGroupUserInfos(
        $gid,
        $offset = 0,
        $limit = -1,
        $order_by = 'tab_cb_user.col_position, tab_cb_user._id',
        $additional_condition = null
    ) {
        $group =& $this->getGroup($gid);
        if ($group === false) {
            return false;
        }

        $db = cb_get_master_db();
        $columns = $this->getInstanceColumnsOfCbUser('tab_cb_user');
        $query = cb_queryf($db, "SELECT "
                                . implode(',', $columns) . " "
                                . "FROM (tab_cb_user "
                                . "LEFT JOIN tab_cb_usergrouprelation "
                                . "ON tab_cb_user._id = tab_cb_usergrouprelation.col_user) "
                                . "INNER JOIN tab_grn_userinfo "
                                . "ON tab_cb_user._id = tab_grn_userinfo.col_user "
                                . "WHERE (tab_cb_user.col_deleted IS NULL) "
                                . "AND (tab_cb_usergrouprelation.col_group = '@S' ) ",
            $gid);
        if (is_string($additional_condition)
            && 0 < strlen($additional_condition)
        ) {
            $query .= "AND (" . $additional_condition . ") ";
        }

        $query .= "ORDER BY " . $order_by;
        $query = $db->select_format($query, $offset, $limit,
            CB_DATABASE_NO_LOCK);

        $result = $db->query($query);
        $users = [];
        $table = $this->getUserTable();
        while (($row = $result->fetch_assoc())) {
            $id = $row["_id"];
            $users[$id] = $table->getRow($id, $row);
        }

        return $users;
    }

    /**
     * @param string      $gid
     * @param string|null $additional_condition
     *
     * @return array|bool
     */
    function getGroupUserIds($gid, $additional_condition = null)
    {
        $group = $this->getGroup($gid);
        if ($group === false) {
            return false;
        }

        $db = cb_get_master_db();
        $query = cb_queryf($db, "SELECT "
                                . "tab_cb_user._id, tab_cb_user.col_position "
                                . "FROM (tab_cb_user "
                                . "LEFT JOIN tab_cb_usergrouprelation "
                                . "ON tab_cb_user._id = tab_cb_usergrouprelation.col_user) "
                                . "INNER JOIN tab_grn_userinfo "
                                . "ON tab_cb_user._id = tab_grn_userinfo.col_user "
                                . "WHERE (tab_cb_user.col_deleted IS NULL) "
                                . "AND (tab_cb_usergrouprelation.col_group = '@S' ) ",
            $gid);
        if (is_string($additional_condition)
            && 0 < strlen($additional_condition)
        ) {
            $query .= "AND (" . $additional_condition . ") ";
        }

        $query .= "ORDER BY tab_cb_user.col_position, tab_cb_user._id";
        $result = $db->query($query);
        $user_ids = [];
        while (($row = $result->fetch_assoc())) {
            $user_ids[] = $row["_id"];
        }

        return $user_ids;
    }

    /**
     * @param string[]    $gids
     * @param int         $offset
     * @param int         $limit
     * @param string      $order_by
     * @param string|null $additional_condition
     *
     * @return CB_User[]|bool
     */
    function getGroupsUserInfos(
        array $gids,
        $offset = 0,
        $limit = -1,
        $order_by = 'tab_cb_user.col_position, tab_cb_user._id',
        $additional_condition = null
    ) {
        if (count($gids) == 0) {
            return [];
        }
        $group_ids = [];
        foreach ($gids as $gid) {
            $group = $this->getGroup($gid);
            if ($group === false) {
                return false;
            }
            $group_ids[] = $group->getOID();
        }

        $db = cb_get_master_db();
        $columns = $this->getInstanceColumnsOfCbUser('tab_cb_user');
        $query = cb_queryf($db, "SELECT "
                                . implode(',', $columns) . " "
                                . "FROM (tab_cb_user "
                                . "INNER JOIN tab_cb_usergrouprelation "
                                . "ON tab_cb_usergrouprelation.col_user = tab_cb_user._id) "
                                . "INNER JOIN tab_grn_userinfo "
                                . "ON tab_cb_user._id = tab_grn_userinfo.col_user "
                                . "WHERE (tab_cb_user.col_deleted IS NULL) "
                                . "AND "
                                . "(tab_cb_usergrouprelation.col_group in( @A ) )",
            $group_ids);
        if (is_string($additional_condition)
            && 0 < strlen($additional_condition)
        ) {
            $query .= "AND (" . $additional_condition . ") ";
        }
        $query .= "ORDER BY " . $order_by;
        $query = $db->select_format($query, $offset, $limit,
            CB_DATABASE_NO_LOCK);

        $result = $db->query($query);
        $users = [];
        $table = $this->getUserTable();
        while (($row = $result->fetch_assoc())) {
            $id = $row["_id"];
            $users[$id] = $table->getRow($id, $row);
        }

        return $users;
    }

    /**
     * 複数ユーザー情報を取得する
     *
     * @param string[]      $uids
     * @param string[]|null $columns
     * @param int           $offset
     * @param int           $limit
     * @param string|null   $order_by
     * @param string|null   $add_condition
     * @param string        $type
     * @param bool          $include_deleted
     *
     * @return array
     */
    function getUsersInfo(
        $uids = null,
        $columns = null,
        $offset = 0,
        $limit = -1,
        $order_by = null,
        $add_condition = null,
        $type = '_id',
        $include_deleted = false
    ) {
        if (is_array($uids) && count($uids) === 0) {
            return [];
        }

        if (is_null($columns)) {
            $columns = [];
            $columns[] = 'col_display_name';
            $columns[] = 'col_foreign_key';
        }
        $columns[] = $this->_user_table_name . '._id';
        $columns = implode(',', $columns);

        if (is_null($order_by)) {
            $order_by = 'ORDER BY col_position, _id';
        }
        $condition = '';
        if (is_array($uids) && count($uids) > 0) {
            foreach ($uids as $key => $value) {
                $uids[$key] = cb_queryf($this->_db, "'@S'", $value);
            }
            $where_type = $type;
            if ($type == '_id') {
                $where_type = $this->_user_table_name . '._id';
            }
            $condition = sprintf("WHERE ( {$where_type} IN ( %s ) ) ",
                implode(',', $uids));
        }

        if ( ! $include_deleted) {
            if (strlen($condition) > 0) {
                $condition .= 'AND ';
            } else {
                $condition .= 'WHERE ';
            }
            $condition .= 'tab_cb_user.col_deleted IS NULL ';
        }

        if (strlen($add_condition) > 0) {
            if (strlen($condition) > 0) {
                $condition .= "AND (${add_condition})";
            } else {
                $condition .= "WHERE (${add_condition})";
            }
        }

        $query
            = sprintf('SELECT %s FROM %s INNER JOIN %s ON %s._id = %s.col_user %s %s',
            $columns,
            $this->_user_table_name,
            $this->_user_info_table_name,
            $this->_user_table_name,
            $this->_user_info_table_name,
            $condition, $order_by);
        $query = $this->_db->select_format($query, $offset, $limit,
            CB_DATABASE_NO_LOCK);
        $result = $this->_db->query($query);
        if ($result === false) {
            $this->_db->throwError(['query' => 'query failed: ' . $query]);
        }

        $users = [];
        $n = $this->_db->num_rows($result);

        for ($i = 0; $i < $n; $i++) {
            $r = $this->_db->fetch_assoc($result);
            $users[$r[$type]] = $r;
        }
        $this->_db->free_result($result);

        return $users;
    }

    /**
     * @param string[]|null $uids
     * @param int           $offset
     * @param int           $limit
     * @param string|null   $order_by
     * @param string|null   $add_condition
     * @param string        $type
     * @param bool          $include_deleted
     *
     * @return string[]
     */
    function getUsersId(
        $uids = null,
        $offset = 0,
        $limit = -1,
        $order_by = null,
        $add_condition = null,
        $type = '_id',
        $include_deleted = false
    ) {
        if (is_array($uids) && count($uids) === 0) {
            return [];
        }

        $columns = $this->_user_table_name . '._id';

        if (is_null($order_by)) {
            $order_by = 'ORDER BY col_position, _id';
        }
        $condition = '';
        if (is_array($uids) && count($uids) > 0) {
            foreach ($uids as $key => $value) {
                $uids[$key] = cb_queryf($this->_db, "'@S'", $value);
            }
            $where_type = $type;
            if ($type == '_id') {
                $where_type = $this->_user_table_name . '._id';
            }
            $condition = sprintf("WHERE ( {$where_type} IN ( %s ) ) ",
                implode(',', $uids));
        }

        if ( ! $include_deleted) {
            if (strlen($condition) > 0) {
                $condition .= 'AND ';
            } else {
                $condition .= 'WHERE ';
            }
            $condition .= 'tab_cb_user.col_deleted IS NULL ';
        }

        if (strlen($add_condition) > 0) {
            if (strlen($condition) > 0) {
                $condition .= "AND (${add_condition})";
            } else {
                $condition .= "WHERE (${add_condition})";
            }
        }

        $query
            = sprintf('SELECT %s FROM %s INNER JOIN %s ON %s._id = %s.col_user %s %s',
            $columns,
            $this->_user_table_name,
            $this->_user_info_table_name,
            $this->_user_table_name,
            $this->_user_info_table_name,
            $condition, $order_by);
        $query = $this->_db->select_format($query, $offset, $limit,
            CB_DATABASE_NO_LOCK);
        $result = $this->_db->query($query);
        if ($result === false) {
            $this->_db->throwError(['query' => 'query failed: ' . $query]);
        }

        $users_id = [];
        $n = $this->_db->num_rows($result);

        for ($i = 0; $i < $n; $i++) {
            $r = $this->_db->fetch_assoc($result);
            $users_id[] = $r['_id'];
        }
        $this->_db->free_result($result);

        return $users_id;
    }

    /**
     * @param string      $mygid
     * @param int         $offset
     * @param int         $limit
     * @param string      $order_by
     * @param string|null $additional_condition
     *
     * @return CB_User[]|bool
     */
    function getMyGroupUserInfos(
        $mygid,
        $offset = 0,
        $limit = -1,
        $order_by = 'tab_cb_user.col_position, tab_cb_user._id',
        $additional_condition = null
    ) {
        $mygroup = $this->getMyGroup($mygid);
        if (is_null($mygroup)) {
            return false;
        }

        $db = cb_get_master_db();
        $columns = $this->getInstanceColumnsOfCbUser('tab_cb_user');
        $query = cb_queryf($db, "SELECT "
                                . implode(',', $columns) . " "
                                . "FROM (tab_grn_mygroupuserrelation "
                                . "INNER JOIN tab_cb_user "
                                . "ON tab_grn_mygroupuserrelation.col_user = tab_cb_user._id "
                                . "AND (tab_cb_user.col_deleted IS NULL)) "
                                . "INNER JOIN tab_grn_userinfo "
                                . "ON tab_cb_user._id = tab_grn_userinfo.col_user "
                                . "WHERE (tab_grn_mygroupuserrelation . col_mygroup = '@S') ",
            $mygroup->getOID());

        if (is_string($additional_condition)
            && 0 < strlen($additional_condition)
        ) {
            $query .= " AND ( " . $additional_condition . " ) ";
        }

        $query .= "ORDER BY " . $order_by;
        $query = $db->select_format($query, $offset, $limit,
            CB_DATABASE_NO_LOCK);

        $result = $db->query($query);
        $users = [];
        $table = $this->getUserTable();
        while (($row = $result->fetch_assoc())) {
            $id = $row["_id"];
            $users[$id] = $table->getRow($id, $row);
        }

        return $users;
    }

    /**
     * @param string      $mygid
     * @param string|null $additional_condition
     *
     * @return string[]|bool
     */
    function getMyGroupUserIds($mygid, $additional_condition = null)
    {
        $mygroup = $this->getMyGroup($mygid);
        if ($mygroup === false) {
            return false;
        }

        $db = cb_get_master_db();
        $query = cb_queryf($db, "SELECT "
                                . "tab_cb_user._id "
                                . "FROM (tab_grn_mygroupuserrelation "
                                . "INNER JOIN tab_cb_user "
                                . "ON tab_grn_mygroupuserrelation.col_user = tab_cb_user._id "
                                . "AND (tab_cb_user.col_deleted IS NULL)) "
                                . "INNER JOIN tab_grn_userinfo "
                                . "ON tab_cb_user._id = tab_grn_userinfo.col_user "
                                . "WHERE (tab_grn_mygroupuserrelation . col_mygroup = '@S' ) ",
            $mygroup->getOID());

        if (is_string($additional_condition)
            && 0 < strlen($additional_condition)
        ) {
            $query .= " AND ( " . $additional_condition . " ) ";
        }

        $query .= "ORDER BY tab_cb_user.col_position, tab_cb_user._id";

        $result = $db->query($query);
        $users = [];
        while (($row = $result->fetch_assoc())) {
            $users[] = $row["_id"];
        }

        return $users;
    }
}


