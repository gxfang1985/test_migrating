<?php

/**
 * @package grn.common
 */

use grn\grn\access\service\AppAccess;
use grn\grn\access\utility\AppAvailabilityUtil;

require_once('fw/module.csp');
define('XML_HTMLSAX3', dirname(__FILE__) . "/safehtml/");
require_once('safehtml/safehtml.php');
require_once('grn/error_code.csp');

/**
 * @package grn.common
 */
class GRN_ControllerUtil extends CB_ModuleBase
{
    /**
     * @access private
     */
    var $_page;

    /**
     * @access private
     * @var GRN_Uum
     */
    private $uumObject;
    /**
     * @access private
     */
    var $_uum_util;
    /**
     * @access private
     */
    var $_sso_service;

    // image icon size
    const ICON_SIZE_SMALL = 'SIZE_30'; // width:30px; height:30px;
    const ICON_SIZE_LARGE = 'SIZE_50'; // width:50px; height:50px;
    const THUMBNAIL_SMALL = 30;
    const THUMBNAIL_LARGE = 50;

    /**
     * Instantiate new controller util for the named page.
     * Assume cb_get_pagename() value for the page name if $page is NULL.
     */
    function __construct($page = null)
    {
        if (is_null($page)) {
            $page = cb_get_pagename();
        }
        $this->_page = $page;

        $this->_uum_util = $this->getUumUtilObject();

        $sub_module = str_replace('/', '.', $page);
        parent::__construct('grn.common.controller.' . $sub_module);

        require_once('grn/sso.csp');
        $this->_sso_service = GRN_SSO_Service::getInstance();
    }

    public function setUumObject($uumObject)
    {
        $this->uumObject = $uumObject;
    }

    /**
     *
     * @return Grn_Uum
     */
    public static function getUumObject()
    {
        return cb_lwc_uum();
    }

    /**
     * @return GRN_UumUtil
     */
    protected function getUumUtilObject()
    {
        require_once('grn/uum_util.csp');

        return GRN_UumUtil::getInstance();
    }

    /**
     * Return N-navi start position.
     */
    function getNaviStartPosition()
    {
        global $G_INPUT;

        // from parameter
        if (array_key_exists('sp', $G_INPUT)) {
            if ((int)$G_INPUT['sp'] < 0) {
                return 0;
            }

            return (int)$G_INPUT['sp'];
        }

        // session flag
        if ( ! array_key_exists('sf', $G_INPUT) || ! $G_INPUT['sf']) {
            return 0;
        }

        // from session
        $session = $this->getSession();
        $current_start_position = $session->get('current_start_position');
        if ($current_start_position == null || $current_start_position < 0) {
            $current_start_position = 0;
        }

        return $current_start_position;
    }

    /**
     * Save N-navi start position into the current session.
     */
    function setNaviStartPosition($pos)
    {
        // from session
        $session = $this->getSession();
        $session->set('current_start_position', (int)$pos);
    }

    function makeSimpleNaviInformation(
        $offset,
        $limit,
        $count,
        $isExistsNextPage,
        $params = null,
        $prefix = null
    ) {
        assert('is_int($offset)');
        assert('is_int($limit)');
        assert('is_int($count)');
        assert('is_bool($isExistsNextPage)');
        assert('$offset >= 0');
        assert('$limit  >= 0');
        assert('$count  >= 0');
        assert('$limit  >= $count');

        $previous_page_start_position = null;
        if ($offset <= 0) {
            $previous_page_start_position = -1;
        } elseif ($offset - $limit >= 0) {
            $previous_page_start_position = $offset - $limit;
        } elseif ($offset - $limit < 0) {
            $previous_page_start_position = 0;
        }

        $ret = [
            'count'       => -1,
            'offset'      => $offset,
            'limit'       => $limit,
            'start_count' => $offset + ! ! $count,
            'end_count'   => $offset + $count,
            'navi'        => [
                'number_on_page'               => $limit,
                'previous_page_start_position' => $previous_page_start_position,
                'next_page_start_position'     => ($isExistsNextPage) ? $offset
                                                                        + $limit
                    : -1,
                'params'                       => $params
            ]
        ];

        if ( ! is_null($prefix)) {
            assert('is_string($prefix)');
            $ret['navi']['prefix'] = $prefix;
        }

        return $ret;
    }

    /**
     * This method is used to render Pagination by javascript
     *
     * @param int        $offset
     * @param int        $limit
     * @param int        $count
     * @param bool       $has_next_page
     * @param array|null $params
     * @param null       $prefix
     *
     * @return array
     */
    public function makePaginationInfoForJS(
        $offset,
        $limit,
        $count,
        $has_next_page,
        $params = null,
        $prefix = null
    ) {
        $navigation_info = $this->makeSimpleNaviInformation($offset, $limit,
            $count, $has_next_page, $params, $prefix);

        return [
            'previousPageOffset' => $navigation_info['navi']['previous_page_start_position'],
            'nextPageOffset'     => $navigation_info['navi']['next_page_start_position'],
            'rangeNumberStart'   => $navigation_info['start_count'],
            'rangeNumberEnd'     => $navigation_info['end_count']
        ];
    }

    /**
     * Make N-navi information for the view.
     *
     * @param $offset      int
     * @param $limit       int
     * @param $total_count int
     * @param $params      array
     *
     * @return array
     */
    function makeNaviInformation($offset, $limit, $total_count, $params = null)
    {
        if ($total_count < $offset) {
            $offset = 0;
        }

        $start_position = $offset + 1;

        $end_position = $offset + $limit;
        if ($total_count < $end_position) {
            $end_position = $total_count;
        }

        if ($start_position > $end_position) {
            $start_position = 0;
            $end_position = 0;
        }

        if (0 < $offset) {
            $prev_position = $offset - $limit;
            if (0 > $prev_position) {
                $prev_position = 0;
            }
        } else {
            $prev_position = -1;
        }

        if ($total_count > $offset + $limit) {
            $next_position = $offset + $limit;
        } else {
            $next_position = -1;
        }

        return [
            'count'       => $total_count,
            'offset'      => $offset,
            'limit'       => $limit,
            'start_count' => $start_position,
            'end_count'   => $end_position,
            'navi'        => [
                'number_on_page'               => $limit,
                'previous_page_start_position' => $prev_position,
                'next_page_start_position'     => $next_position,
                'params'                       => $params
            ]
        ];
    }

    function makeSitePosition($page_path, $page_infos, $args = null)
    {
        $pages = [];
        foreach ($page_infos as $page_id => $page_info) {
            $page = [];
            $page['page'] = $page_path . $page_id;
            if ('grn/' == $page_path) {
                $page['name'] = grn_get_page_display_name('common/' . $page_id,
                    $args);
            } else {
                $page['name'] = grn_get_page_display_name($page['page'], $args);
            }

            if (is_null($page_info)) {
                $page['page'] = '';
            } else {
                foreach ($page_info as $key => $value) {
                    $page[$key] = $value;
                }
            }
            $pages[] = $page;
        }

        return $pages;
    }

    /**
     * 一覧ソート
     */
    function getSortParameter()
    {
        global $G_INPUT;

        // from parameter
        if (array_key_exists('sort', $G_INPUT)) {
            return $G_INPUT['sort'];
        }

        // session flag
        if ( ! array_key_exists('sf', $G_INPUT) || ! $G_INPUT['sf']) {
            return null;
        }

        // from session
        $session = $this->getSession();
        $current_sort = $session->get('current_sort');

        return $current_sort;
    }

    function setSortParameter($param)
    {
        $session = $this->getSession();
        $session->set('current_sort', $param);
    }


    /**
     * 作成者データを取得する
     *
     * @param mixed $object プロパティーとしてcreator,creator_uid,creator_nameを持っていること
     * @param array $buffer データの格納先配列
     */
    function getCreatorView($object, & $buffer)
    {
        $creator = $object->get('creator');

        if ( ! $creator) {
            $buffer['creator_uid'] = 0;
            $buffer['creator_name'] = $object->get('creator_name');
        } else {
            $buffer['creator_uid'] = $creator->getOID();
            $buffer['creator_name'] = $creator->get('display_name');
        }
        $buffer['ctime'] = $object->get('ctime');
    }

    /**
     * 更新者データを取得する
     *
     * @param mixed $object プロパティーとしてmodifier,modifier_uid,modifier_nameを持っていること
     * @param array $buffer データの格納先配列
     */
    function getModifierView($object, & $buffer)
    {
        $modifier = $object->get('modifier');

        if ( ! $modifier) {
            $buffer['modifier_uid'] = 0;
            $buffer['modifier_name'] = $object->get('modifier_name');
        } else {
            $buffer['modifier_uid'] = $modifier->getOID();
            $buffer['modifier_name'] = $modifier->get('display_name');
        }
        $buffer['mtime'] = $object->get('mtime');
    }

    /**
     * ファイルリンク表示に必要なデータをオブジェクトから取得する
     *
     * @param object GRN_File $file  表示ファイル
     *
     * @return array
     */
    public function getFileLinkView($file)
    {
        if ( ! $file) {
            return null;
        }

        $body = $file->getCurrentBody();
        $view = $this->getFileBodyLinkView($body);
        $view['id'] = $file->getOID();

        return $view;
    }

    /**
     * Get data for file link view from file body object
     *
     * @param CB_ServerFile $body
     *
     * @return array
     */
    public function getFileBodyLinkView(CB_ServerFile $body)
    {
        return [
            'name' => $body->get('name'),
            'mime' => $body->get('mime'),
            'size' => $body->get('size'),
            'hash' => $body->get('hash')
        ];
    }

    /**
     * ファイル本体の詳細表示用のデータをオブジェクトから取得する
     * このデータに履歴は含まれない
     *
     * @param object GRN_File $file  表示ファイル
     *
     * @return array
     */
    function getFileView($file)
    {
        if ( ! $file) {
            return null;
        }

        $body = $file->getCurrentBody();

        $file_for_view = [
            'id'          => $file->getOID(),
            'title'       => $file->getTitle(),
            'filename'    => $body->get('name'),
            'mime'        => $body->get('mime'),
            'size'        => $body->get('size'),
            'memo'        => $file->getDescription(),
            'version'     => $body->get('version'),
            'max_version' => $file->getMaxVersion(),
        ];

        $this->getCreatorView($file, $file_for_view);
        $this->getModifierView($file, $file_for_view);

        //GTM-1136
        if ($file instanceof GRN_Schedule_File) {
            return $file_for_view;
        }
        //End GTM-1136

        $lock = $file->getLockObject();
        $lock_status = $lock->isLocked();

        if ($lock_status == 1) {
            $lock_owner = $lock->get('lock_owner');
            $file_for_view['locked'] = 'other';
            $file_for_view['locked_owner_uid'] = $lock_owner->getOID();
            $file_for_view['locked_owner_name']
                = $lock_owner->get('display_name');
        } elseif ($lock_status == 2) {
            $file_for_view['locked'] = 'login';
        }

        return $file_for_view;
    }


    /**
     * ファイル履歴表示用のデータを取得する
     *
     * @param object GRN_FileLog $log  ファイルログ
     *
     * @return array
     */
    function getFileLogView($log)
    {
        if ( ! $log) {
            return null;
        }

        $log_for_view = [];
        $log_for_view['id'] = $log->getOID();
        $log_for_view['filename'] = $log->get('filename');
        $log_for_view['version'] = $log->get('version');

        $op_code = $log->get('operation');

        if ($op_code == GRN_FILE_OPERATION_CREATE) {
            $log_for_view['operation'] = 'create';
        } elseif ($op_code == GRN_FILE_OPERATION_UPDATE) {
            $log_for_view['operation'] = 'update';
        } elseif ($op_code == GRN_FILE_OPERATION_RESTORE) {
            $log_for_view['operation'] = 'restore';
        } else {
            $log_for_view['operation'] = '';
        }

        $log_for_view['restore_version'] = $log->get('restore_version');
        $log_for_view['comment'] = $log->get('comment');
        $log_for_view['file_exists'] = $log->fileExists();
        $log_for_view['ctime'] = $log->get('record_time');

        if (($creator = $log->get('recorder'))) {
            $log_for_view['creator_name'] = $creator->get('display_name');
            $log_for_view['creator_uid'] = $creator->getOID();
        } else {
            $log_for_view['creator_name'] = $log->get('recorder_name');
            $log_for_view['creator_uid'] = 0;
        }

        return $log_for_view;
    }


    /**
     * ファイル復活時の表示データを取得する
     *
     * @param object GRN_File $file  ファイル
     * @param int $ver 復活されるバージョン番号
     *
     * @return array
     */
    function getFileRestoreView($file, $ver)
    {
        global $G_container_base;
        $db = $G_container_base->getInstance('dbconn');

        $rowset = $file->getLogSet();
        $rowset->addCondition('col_version = \'' . $db->escape($ver) . '\'');
        $log = $rowset->iterate();
        $rowset->destroy();

        if ( ! $log) {
            return false;
        }

        $file_for_view = $this->getFileView($file);
        $log_for_view = $this->getFileLogView($log);

        return ['file' => $file_for_view, 'log' => $log_for_view];
    }


    /**
     * ファイルの詳細表示用のデータをオブジェクトから取得する
     *
     * @param object GRN_File $file  表示ファイル
     * @param int    $log_offset      履歴一覧の先頭位置
     * @param int    $log_limit       履歴一覧件数
     * @param string $log_sort_column ソートカラム
     * @param bool   $log_sort_order  ソート順序
     *
     * @return array( 'id'            => ファイルID,
     *                'title'         => タイトル,
     *                'filename'      => ファイル名,
     *                'mime'          => MIMEタイプ,
     *                'size'          => ファイルサイズ,
     *                'memo'          => メモ,
     *                'version'       => バージョン番号,
     *                'max_version'   => バージョン管理数,
     *                'creator_uid'   => 登録者ID,
     *                'creator_name'  => 登録者名,
     *                'ctime'         => 登録タイムスタンプ,
     *                'modifier_uid'  => 更新者ID,
     *                'modifier_name' => 更新者名,
     *                'mtime'         => 更新タイムスタンプ,
     *                'logs'          => array( ログID => array( 'id'              => ログID,
     *                                                           'filename'        => ファイル名,
     *                                                           'version'         => バージョン番号,
     *                                                           'operation'       => 更新操作,
     *                                                           'restore_version' => 復活元バージョン,
     *                                                           'comment'         => 更新コメント,
     *                                                           'file_exists'     => 実ファイルの存在フラグ,
     *                                                           'creator_uid'     => 登録者ID,
     *                                                           'creator_name'    => 登録者名,
     *                                                           'ctime'           => 登録タイムスタンプ,
     *                                                         ),
     *                                           ...
     *                                   ),
     *                'sort' => $log_sort,
     *                'navi' => $this->makeNaviInformation()
     *             )
     *
     */
    function getFileDetailView(
        $file,
        $log_offset,
        $log_limit,
        $log_sort_column = null,
        $log_sort_order = false
    ) {
        assert('! is_null($file)');

        $file_for_view = $this->getFileView($file);

        $rowset = $file->getLogSet();

        if ( ! is_null($log_sort_column)) {
            $rowset->addOrderColumn('col_' . $log_sort_column, $log_sort_order);
        }
        $rowset->addOrderColumn(null, $log_sort_order);

        $rowset->limit($log_offset, $log_limit);

        $logs_for_view = [];

        while ( ! is_null(($log = $rowset->iterate()))) {
            $logs_for_view[$log->getOID()] = $this->getFileLogView($log);
        }
        $rowset->destroy();

        $file_for_view['sort_column'] = $log_sort_column;
        $file_for_view['sort_order'] = $log_sort_order;

        $file_for_view['logs'] = $logs_for_view;

        $rowset = $file->getLogSet();
        $total_count = $rowset->count();
        $rowset->destroy();

        $file_for_view['navi'] = $this->makeNaviInformation($log_offset,
            $log_limit, $total_count);

        return $file_for_view;
    }

    function getFileMaxVersionMenu($default = 0)
    {
        require_once('grn/file.csp');

        $fmc = GRN_FileManagerConfig::getInstance();
        $max_version = $fmc->getMaxVersion();

        $options_for_view = [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            GRN_FILE_CONFIG_VERSION_INFINITE
        ];

        if (is_numeric($max_version)
            && $max_version != GRN_FILE_CONFIG_VERSION_INFINITE
        ) {
            $options_for_view = [];
            for ($i = 0; $i <= $max_version; ++$i) {
                $options_for_view[] = $i;
            }
            if (count($options_for_view) < 1) {
                $options_for_view[] = 0;
            }
        }

        $options = ['options' => $options_for_view, 'current' => $default];

        if ($max_version != GRN_FILE_CONFIG_VERSION_INFINITE) {
            if ($default == GRN_FILE_CONFIG_VERSION_INFINITE
                || $default > $max_version
            ) {
                $default = $max_version;
            }
        }

        $options['default'] = $default;

        return $options;
    }


    /**
     * ターゲットを追加する
     *
     * @param $module_id  string  モジュールID
     * @param $session_id string  セッションID
     * @param $input_key  string  入力フォームキー
     */
    function addTargetSession($module_id, $session_id, $input_key)
    {
        global $G_INPUT;
        if (array_key_exists($input_key, $G_INPUT)) {
            require_once('fw/session_manager.csp');

            $session_manager = CB_SessionManager::getInstance();
            $session = $session_manager->getSession($module_id);

            $session_ids = $session->get($session_id);
            if ( ! is_array($session_ids)) {
                $session_ids = [];
            }
            $ids = array_merge($session_ids, $G_INPUT[$input_key]);
            $ids = array_unique($ids);
            sort($ids);
            $session->set($session_id, $ids);
        }
    }

    /**
     * ターゲットを削除する
     *
     * @param $module_id  string  モジュールID
     * @param $session_id string  セッションID
     * @param $input_key  string  入力フォームキー
     */
    function deleteTargetSession($module_id, $session_id, $input_key)
    {
        global $G_INPUT;
        if (array_key_exists($input_key, $G_INPUT)) {
            require_once('fw/session_manager.csp');

            $session_manager = CB_SessionManager::getInstance();
            $session = $session_manager->getSession($module_id);

            $session_ids = $session->get($session_id);
            $ids = $G_INPUT[$input_key];
            foreach ($ids as $id) {
                unset($session_ids[array_search($id, $session_ids)]);
            }
            $session->set($session_id, $session_ids);
        }
    }

    /**
     * すべてのターゲットを削除する
     *
     * @param $module_id  string  モジュールID
     * @param $session_id string  セッションID
     */
    function deleteAllTargetSession($module_id, $session_id)
    {
        //Get Session Manager
        require_once('fw/session_manager.csp');
        $session_manager = CB_SessionManager::getInstance();
        $session = $session_manager->getSession($module_id);

        //Delete All Session ID
        $session->unset_by($session_id);
    }

    function getTermTimeStamp($time = null)
    {
        global $G_INPUT;
        require_once('fw/date.csp');
        $timestamp = new CB_TimeStampEx(new CB_TimeStamp());
        $datetime = new CB_DateTime();
        $datetime->year = intval(@ $G_INPUT['term_year']);
        $datetime->month = intval(@ $G_INPUT['term_month']);
        $datetime->day = intval(@ $G_INPUT['term_day']);
        $datetime = new CB_DateTimeEx($datetime);
        if ( ! is_null($time)) {
            $datetime->setTime($time);
        }
        $timestamp->setDateTime($datetime);

        return $timestamp;
    }

    /**
     * @param CB_User $user
     *
     * @return array
     */
    function listBuiltinItems($user)
    {
        $uum = static::getUumObject();
        $builtin_items = $uum->getDefaultItemProperties();
        // if Presence app is stopped, not display attendee
        require_once('presence/logic.csp');
        $presence_logic = GRN_Presence_Logic::getInstance();
        $presence_view
            = $presence_logic->isActivePresence()
            ? 1 : 0;
        $builtin_items['attendee']['use'] = $presence_view;
        $builtin_items['attendee']['show'] = $presence_view;
        $builtin_items['attendee']['display'] = $presence_view;

        $sso_list = $this->_sso_service->getSSOMethodList('uum');

        foreach (array_keys($builtin_items) as $item_id) {
            $builtin_item =& $builtin_items[$item_id];

            $data = $uum->getDefaultItemData($user, $item_id);

            $builtin_item['display_name'] = cb_msg('grn/common',
                $item_id . '_realname');
            $builtin_item['type'] = $data['type'];

            if ( ! array_key_exists($builtin_item['sso'], $sso_list)) {
                $builtin_item['sso'] = GRN_UUM_SSO_DEFAULT;
            }

            if ('attendee' === $data['type']) {
                $presence_info = $presence_logic->getPresence($user->getOID());
                $builtin_item['value']['value'] = $presence_info['info'];
                $builtin_item['value']['timestamp'] = $presence_info['mtime'];
            } elseif ('file' == $data['type']) {
                if ( ! is_null($data['value'])) {
                    $file = $data['value'];
                    $builtin_item['value']
                        = $this->getFileLinkView($file);
                    $builtin_item['value']['oid'] = $file->getOID();
                }
            } else {
                $builtin_item['value'] = @ $data['value'];
            }
        }

        $groups = $builtin_items['usergroups']['value'];
        $primary_group = null;
        $primary_group_id = '';
        $primary_group_name = '';
        $primary_group_foreign_key = '';
        $primary_group_path = '';
        if ($builtin_items['primary_group']['value']) {
            /** @var CB_Group $primary_group */
            $primary_group = $builtin_items['primary_group']['value'];
            $primary_group_id = $primary_group->getOID();
            $primary_group_name = $primary_group->get('name');
            $primary_group_foreign_key = $primary_group->get('foreign_key');
            $primary_group_path
                = $this->_uum_util->getGroupPathString($primary_group_id);
        }
        $groups_for_view = [];
        $group_options = [];
        foreach (array_keys($groups) as $group_id) {
            $group = $groups[$group_id];
            $foreign_key = $group->get('foreign_key');
            $path
                = $this->_uum_util->getGroupPathString($group_id);
            $selected = ($group_id == $primary_group_id);
            $groups_for_view[$foreign_key] = [
                'oid'   => $group_id,
                'title' => $group->get('name'),
                'path'  => $path
            ];
            $group_options[] = [
                'value'    => $group_id,
                'label'    => $group->get('name') . ' （' .
                              str_replace('>', ' > ', $path) .
                              '）',
                'selected' => $selected
            ];
        }
        $builtin_items['usergroups']['value'] = $groups_for_view;

        $primary_group_for_view = [];
        if ($primary_group) {
            $primary_group_for_view[$primary_group_foreign_key] = [
                'oid'           => $primary_group_id,
                'title'         => $primary_group_name,
                'path'          => $primary_group_path,
                'group_options' => $group_options
            ];
        }
        $builtin_items['primary_group']['value'] = $primary_group_for_view;

        return $builtin_items;
    }

    function listExtendedItems($user)
    {
        $uum = static::getUumObject();
        $sso_list = $this->_sso_service->getSSOMethodList('uum');

        $extended_items = [];
        $datas =& $uum->getAllExtensionItemData($user);
        foreach (array_keys($datas) as $item_id) {
            $data =& $datas[$item_id];

            $extended_items[$item_id] = [];
            $extended_item =& $extended_items[$item_id];

            $extended_item['oid'] = $data['item']->getOID();
            $extended_item['display_name'] = $data['item']->get('display_name');
            $extended_item['id'] = $data['item']->get('id');
            $extended_item['type'] = $data['item']->get('type');
            $extended_item['setting'] = $data['item']->get('setting');
            $extended_item['not_modify'] = $data['item']->get('not_modify');
            $extended_item['necessary'] = $data['item']->get('necessary');
            $extended_item['use'] = $data['item']->get('use');
            $extended_item['show'] = $data['item']->get('show');
            $extended_item['display'] = $data['item']->get('display');
            $extended_item['cellular'] = $data['item']->get('cellular');
            $extended_item['sso'] = $data['item']->get('sso');
            $extended_item['extended'] = 1;

            if ( ! array_key_exists($extended_item['sso'], $sso_list)) {
                $extended_item['sso'] = GRN_UUM_SSO_DEFAULT;
            }

            if ('file' == $extended_item['type']) {
                if ( ! is_null($data['value'])) {
                    $file = $data['value'];
                    $body = $file->getCurrentBody();
                    $extended_item['value'] = [
                        'oid'  => $file->getOID(),
                        'name' => $body->get('name'),
                        'mime' => $body->get('mime')
                    ];
                }
            } else {
                $extended_item['value'] = @ $data['value'];
            }
        }

        return $extended_items;
    }

    function setBuiltinItemProperties($builtin_items, $user, $properties)
    {
        $uum = self::getUumObject();
        foreach (array_keys($builtin_items) as $item_id) {
            if (array_key_exists($item_id, $properties)) {
                $value = $properties[$item_id];
                if ('file' == $builtin_items[$item_id]['type']) {
                    $file = $uum->getDefaultItemData($user, $item_id);
                    $is_delete = @ $properties['file_delete'][$item_id];
                    if (UPLOAD_ERR_OK != $value['error']) {
                        if ( ! is_null($file['value'])) {
                            if ($is_delete) {
                                $value = null;
                            } else {
                                continue;
                            }
                        } elseif (0 == strlen($value['name'])) {
                            $value = null;
                        }
                    }
                    $uum->setDefaultItemData($user, $item_id, $value);
                } elseif ('locale' == $builtin_items[$item_id]['type']) {
                    // ユーザーの設定と、変更するロケールが同じ時は実行しない。
                    if (array_key_exists('value', $builtin_items[$item_id])
                        && $value == $builtin_items[$item_id]['value']['_id']
                    ) {
                        continue;
                    }

                    $uum->setDefaultItemData($user, $item_id, $value);
                } elseif ('base' == $builtin_items[$item_id]['type']) {
                    // ユーザーの設定と、変更する拠点が同じ時は実行しない。
                    if (array_key_exists('value', $builtin_items[$item_id])
                        && isset($builtin_items[$item_id]['value']['_id'])
                        && $value == $builtin_items[$item_id]['value']['_id']
                    ) {
                        continue;
                    }

                    $uum->setDefaultItemData($user, $item_id, $value);
                } else {
                    $uum->setDefaultItemData($user, $item_id, $value);
                }
            }
        }
    }

    function setExtendedItemProperties($extended_items, $user, $properties)
    {
        $uum = self::getUumObject();
        foreach (array_keys($extended_items) as $item_id) {
            $extended_key = "extended_" . $item_id;
            if (array_key_exists($extended_key, $properties)) {
                $value = $properties[$extended_key];
                if ('file' == $extended_items[$item_id]['type']) {
                    $file =& $uum->getExtensionItemData($user, $item_id);
                    $is_delete = @ $properties['file_delete'][$extended_key];
                    if (UPLOAD_ERR_OK != $value['error']) {
                        if ( ! is_null($file['value'])) {
                            if ($is_delete) {
                                $value = null;
                            } else {
                                continue;
                            }
                        } elseif (0 == strlen($value['name'])) {
                            $value = null;
                        }
                    }
                    $uum->setExtensionItemData($user, $item_id, $value);
                } elseif ('password' == $extended_items[$item_id]['type']) {
                    require_once('grn/uum_util.csp');
                    $uum_util = GRN_UumUtil::getInstance();
                    if ($uum_util->isValidPassword($value)) {
                        $uum->setExtensionItemData($user, $item_id, $value);
                    }
                } else {
                    $uum->setExtensionItemData($user, $item_id, $value);
                }
            }
        }
    }

    function hasModifyItem(& $builtin_items, & $extended_items)
    {
        foreach ($builtin_items as $item_id => $item) {
            if ($item['use'] && ! $item['not_modify']) {
                return true;
            }
        }

        foreach ($extended_items as $item_id => $item) {
            if ($item['use'] && ! $item['not_modify']) {
                return true;
            }
        }

        return false;
    }

    function hasSmartyValidateItem(& $builtin_items, & $extended_items)
    {
        foreach ($builtin_items as $item_id => $item) {
            if ($item['use'] && ! $item['not_modify']) {
                if ($item['necessary'] || 'image_url' == $item['type']) {
                    return true;
                }
            }
        }

        foreach ($extended_items as $item_id => $item) {
            if ($item['use'] && ! $item['not_modify']) {
                if ($item['necessary'] || 'image_url' == $item['type']) {
                    return true;
                }
            }
        }

        return false;
    }

    public static function getGroupInfoToShowGroupName(
        $group_ids,
        $input_app_id = null
    ) {
        if ( ! (is_array($group_ids) && count($group_ids) > 0)) {
            return [];
        }
        $group_ids = array_filter($group_ids);

        $uum = cb_lwc_uum();
        $groups_info = $uum->getGroupInfoList($group_ids);

        if ($input_app_id == null) {
            $page_path = strtolower(cb_get_pagename());
            $page_parts = explode('/', $page_path);
            $app_id = $page_parts[0];
        } else {
            $app_id = $input_app_id;
        }
        if ( ! ($app_id == "portal" || $app_id == "notification")) {
            $apps_id_stand = AppAvailabilityUtil::getAppIdsSupportPrivilege();

            $flag = in_array($app_id, $apps_id_stand);
            foreach ($group_ids as $gid) {
                if (isset($groups_info[$gid])) {
                    if ($flag) {
                        $groups_info[$gid]['col_using_app'] = 1;
                    } else {
                        $groups_info[$gid]['col_using_app'] = null;
                    }
                }
            }
        }

        return $groups_info;
    }

    public static function getRoleInfoToShowRoleName(
        $role_ids,
        $input_app_id = null
    ) {
        if ( ! (is_array($role_ids) && count($role_ids) > 0)) {
            return [];
        }
        $role_ids = array_filter($role_ids);

        $uum = cb_lwc_uum();
        $roles_info = $uum->getStaticRoleInfoList($role_ids);

        if ($input_app_id == null) {
            $page_path = strtolower(cb_get_pagename());
            $page_parts = explode('/', $page_path);
            $app_id = $page_parts[0];
        } else {
            $app_id = $input_app_id;
        }
        if ( ! ($app_id == "portal" || $app_id == "notification")) {
            $apps_id_stand = AppAvailabilityUtil::getAppIdsSupportPrivilege();

            $flag = in_array($app_id, $apps_id_stand);
            foreach ($role_ids as $role_id) {
                if (isset($roles_info[$role_id])) {
                    if ($flag) {
                        $roles_info[$role_id]['col_using_app'] = 1;
                    } else {
                        $roles_info[$role_id]['col_using_app'] = null;
                    }
                }
            }
        }

        return $roles_info;
    }

    public static function getUserInfoToShowUserName(
        $users_id,
        $login_user,
        $input_app_id = null,
        $get_slash = false
    ) {

        if ( ! is_array($users_id) || count($users_id) == 0) {
            return [];
        }

        $uum = static::getUumObject();
        $columns = [
            'col_display_name',
            'col_valid',
            'col_display_name_language',
            'col_nickname',
            'col_position',
            'col_foreign_key'
        ];
        if ($get_slash) {
            $columns[] = 'col_slash';
        }
        $users_info = $uum->getUsersInfo($users_id, $columns);
        //GTM-529 Tuning
        if ($input_app_id == null) {
            $page_path = strtolower(cb_get_pagename());
            $page_parts = explode('/', $page_path);
            $app_id = $page_parts[0];
        } else {
            $app_id = $input_app_id;
        }

        if ($app_id != 'portal' && $app_id != 'notification') {
            $users_id = array_filter($users_id);
            $users_id_allow
                = AppAccess::filterUserIdsInternalAccessByAppId(array_values($users_id),
                $app_id);
            $apps_id_stand
                = AppAvailabilityUtil::getAppIdsSupportPrivilege();
            $users_id_not_allow = array_diff($users_id, $users_id_allow);

            $flag = in_array($app_id, $apps_id_stand);
            foreach ($users_id as $uid) {
                if (array_key_exists($uid,
                    $users_info)
                ) // if user was deleted, then dont set "col_using_app" flag.
                {
                    if ($flag && in_array($uid, $users_id_not_allow)) {
                        $users_info[$uid]['col_using_app']
                            = null; //there is no using privilege
                    } elseif ($flag) {
                        $users_info[$uid]['col_using_app'] = 1;
                    }
                }
            }
        }
        //end GTM-529

        require_once('grn/ui.csp');
        $manager = GRN_UIConfigManager::getInstance();
        $config = $manager->getUserConfig($login_user);
        if ($config->getShowPriorityGroup()) {
            $priority_group = $uum->getManyUserPrimaryGroupInfoList($users_id);
            foreach ($priority_group as $uid => $param) {
                if (array_key_exists($uid, $users_info)) {
                    $users_info[$uid]['primary_group'] = $param;
                }
            }
        }

        return $users_info;
    }

    /**
     * @static
     *
     * @param string $login_user_id
     * @param string $target_user_id
     * @param array  $users_info
     *
     * @return string
     */
    public static function getUserNameText(
        $login_user_id,
        $target_user_id,
        $users_info = [],
        $force_hide_primary_group = false
    ) {
        $result = "";
        require_once('grn/ui.csp');
        $manager = GRN_UIConfigManager::getInstance();

        $uum = static::getUumObject();
        $login_user = $uum->getUser($login_user_id);

        if ( ! array_key_exists($target_user_id, $users_info)) {
            $users_info = static::getUserInfoToShowUserName([$target_user_id],
                $login_user);
        }


        $user_info = $users_info[$target_user_id];

        $result .= $uum->getNameOf($login_user, $user_info);

        $config = $manager->getUserConfig($login_user);
        if ($force_hide_primary_group === false
            && $config->getShowPriorityGroup()
            && array_key_exists('primary_group', $user_info)
        ) {
            $primary_group = $user_info["primary_group"];
            if ($primary_group !== false && isset($primary_group['col_name'])) {
                $result .= '; ' . $primary_group['col_name'];
            }

        }

        return $result;
    }

    /**
     * @static
     *
     * @param int   $login_user_id
     * @param array $target_user_ids
     * @param bool  $force_hide_primary_group
     *
     * @return array
     */
    public static function getUserNamesText(
        $login_user_id,
        $target_user_ids = [],
        $force_hide_primary_group = false
    ) {
        $result = [];
        if ( ! is_array($target_user_ids) || count($target_user_ids) === 0) {
            return $result;
        }

        $uum = cb_lwc_uum();
        $login_user = $uum->getUser($login_user_id);

        $users_info = static::getUserInfoToShowUserName($target_user_ids,
            $login_user);

        foreach ($target_user_ids as $user_id) {
            if ( ! array_key_exists($user_id, $users_info)) {
                continue;
            }

            $result[$user_id] = self::getUserNameText($login_user_id, $user_id,
                $users_info, $force_hide_primary_group);
        }

        return $result;
    }

    /**
     * Get deleted user name strings.
     *
     * @param string $name User display name
     *
     * @return string        $name(deleted user)
     */
    public static function getDeletedUserNameText($name)
    {
        return $name . cb_msg('grn.common', 'deleted_user');
    }

    /**
     * @param string $uid    User ID
     * @param bool   $system System Flag
     * @param bool   $full   Returns a full URL
     *
     * @return string
     */
    public static function getUserProfileURL(
        $uid,
        $system = false,
        $full = false
    ) {
        if (defined('ON_FOREST')) {
            global $G_container_base;
            $uum = $G_container_base->getInstance('uum');
            $user = $uum->getUser($uid);
            if ($user === false) {
                return '';
            }

            return self::getForestUserProfileURL($user->get('foreign_key'));
        }

        return self::getGrnUserProfileURL($uid, $system, $full);
    }

    /**
     * @param array $user_info User Info
     * @param bool  $system    System Flag
     *
     * @return string
     */
    public static function getPopupUserProfileURL($user_info, $system = false)
    {
        if (defined('ON_FOREST')) {
            // TODO: if the user-profile page for a pop-up screen is implemented on Slash, replace this.
            return self::getForestUserProfileURL($user_info['col_foreign_key']);
        }

        $url = self::getGrnUserProfileURL($user_info['_id'], $system);

        return "javascript:popupWin('{$url}','user_view',500,480,0,0,0,1,0,1)";
    }

    public static function getPopupUserProfileURLById(
        $userId = null,
        $system = false,
        $userInfo = null
    ) {
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $login = $uum->getLoginUser();

        if (is_null($userId)) {
            $userId = $login->getOID();
        }

        if (is_null($userInfo) || ! isset($userInfo['_id'])
            || ! isset($userInfo['col_foreign_key'])
        ) {
            $usersInfo
                = GRN_ControllerUtil::getUserInfoToShowUserName([$userId],
                $login);
            $userInfo = $usersInfo[$userId];
        }

        return self::getPopupUserProfileURL($userInfo, $system);
    }

    /**
     * @param string $foreign_key Login Name
     *
     * @return string
     */
    public static function getForestUserProfileURL($foreign_key)
    {
        require_once('fw/slash_util.csp');

        return CB_SlashUtil::getSlashProfileURL($foreign_key);
    }

    /**
     * @param string $uid    User ID
     * @param bool   $system System Flag
     *
     * @return string
     */
    private static function getGrnUserProfileURL(
        $uid,
        $system = false,
        $full = false
    ) {
        $pageurl = 'grn/user_view';
        $method = $full ? 'cb_get_full_url' : 'cb_pageurl';
        if ($system) {
            return $method($pageurl, ['uid' => $uid, 'system' => 1]);
        }

        return $method($pageurl, ['uid' => $uid]);
    }

    /**
     * @param CB_User $login
     *
     * @return int
     */
    public static function getUserIconFormat(CB_User $login = null)
    {
        if (is_null($login)) {
            global $G_container_base;
            /** @var $uum GRN_Uum */
            $uum = $G_container_base->getInstance('uum');
            $login = $uum->getLoginUser();
        }
        require_once('grn/ui.csp');
        $uiConfigManager = GRN_UIConfigManager::getInstance();
        $systemConfig = $uiConfigManager->getSystemConfig();
        $personalConfig = $uiConfigManager->getUserConfig($login);

        $systemIconSetting = $systemConfig->getUserIconFormat(); // 0 or 1
        $personalIconSetting = $personalConfig->getUserIconFormat(); // 0 or 1

        // If both personal setting and system setting are 1, profile image is used for icons.
        return $personalIconSetting & $systemIconSetting;
    }

    private static $_ticket = null;

    /**
     * @static
     *
     * @param string $size
     * @param string $userId
     *
     * @return string
     */
    public static function getUserIconPath($size, $userId)
    {
        // get thumbnail path
        if (defined('ON_FOREST')) {
            require_once('fw/slash_util.csp');
            /** @var $slashDb CB_SlashDB */
            $slashDb = CB_SlashDB::getInstance();
            $link = $slashDb->getUserImageLink($size, $userId);
        } else {
            global $G_container_base;
            /** @var $uum GRN_Uum */
            $uum = $G_container_base->getInstance('uum');
            $link = $uum->getUserImageLink($size, $userId);
        }

        // IE6 & IE7 are need download ticket.
        if (strlen($link) > 0 && cb_is_need_download_ticket()) {
            if (is_null(self::$_ticket)) {
                global $G_container_base;
                /** @var $uum GRN_Uum */
                $uum = $G_container_base->getInstance('uum');
                require_once('grn/ticket.csp');
                self::$_ticket = GRN_Ticket::create($uum->getLoginUser()
                                                        ->getOID());
            }
            $link .= "&ticket=" . self::$_ticket;
        }

        return $link;
    }

    /**
     * refer to $users_info made by getUserInfoToShowUserName()
     * add 'photoUrl' from self::getUserIconPath()
     *
     * @static
     *
     * @param array  $users_info
     * @param string $size
     *
     * @return array
     */
    public static function addPhotoUrlForUsersInfo($users_info, $size)
    {
        foreach ($users_info as $userId => $userInfo) {
            $photoUrl = self::getUserIconPath($size, $userId);
            if (strlen($photoUrl) > 0) {
                $users_info[$userId]['photoUrl'] = $photoUrl;
            }
        }

        return $users_info;
    }

    public static function addPhotoUrlForMultiUserByUsersInfo(
        $users_info,
        $size
    ) {
        $usersId = array_keys($users_info);
        // get thumbnail path
        if (defined('ON_FOREST')) {
            require_once('fw/slash_util.csp');
            /** @var $slashDb CB_SlashDB */
            $slashDb = CB_SlashDB::getInstance();
            $users_info
                = $slashDb->addPhotoUrlForMultiUserByUsersInfoFromSlash($size,
                $users_info);
        } else {
            global $G_container_base;
            /** @var $uum GRN_Uum */
            $uum = $G_container_base->getInstance('uum');
            $arr_link = $uum->getUsersImageLink($size, $usersId);

            foreach ($users_info as $userId => $userInfo) {
                if (array_key_exists($userId, $arr_link)) {
                    $link = $arr_link[$userId];
                    // IE6 & IE7 are need download ticket.
                    if (strlen($link) > 0 && cb_is_need_download_ticket()) {
                        if (is_null(self::$_ticket)) {
                            global $G_container_base;
                            /** @var $uum GRN_Uum */
                            $uum = $G_container_base->getInstance('uum');
                            require_once('grn/ticket.csp');
                            self::$_ticket
                                = GRN_Ticket::create($uum->getLoginUser()
                                                         ->getOID());
                        }
                        $link .= "&ticket=" . self::$_ticket;
                    }
                    $users_info[$userId]['photoUrl'] = $link;
                }
            }
        }

        return $users_info;
    }

    /**
     * @param integer $facility_id Facility id
     *
     * @return string
     */
    public static function getPopupFacilityDetailURL($facility_id)
    {
        $url = cb_pageurl('schedule/facility_info', ['faid' => $facility_id]);

        return "javascript:popupWin('{$url}','help',500,480,0,0,0,1,0,1)";
    }

    /**
     * @param array $user_info_list User info list Item with format [id, type, foreignKey, displayName,  ...]
     *
     * @return array User profile URL list
     */
    public static function createMultiUserProfileUrl(array $user_info_list)
    {
        $result = [];
        foreach ($user_info_list as $user_info) {
            if ($user_info['type'] === \grn\grn\MemberLogic::TYPE_USER) {
                $user_id = $user_info['id'] ?? '';
                $foreign_key = $user_info['foreignKey'] ?? '';
                $result[$user_id] = self::createUserProfileUrl($user_id,
                    $foreign_key);
            }
        }

        return $result;
    }

    /**
     * Get single user profile url
     *
     * @param string $user_id     User ID
     * @param string $foreign_key username
     *
     * @return string profile URL
     */
    public static function createUserProfileUrl(
        string $user_id,
        string $foreign_key
    ) {
        $userInfo = [
            '_id'             => $user_id,
            'col_foreign_key' => $foreign_key
        ];
        require_once('grn/controller.csp');

        return self::getPopupUserProfileURLById($user_id, false, $userInfo);
    }

    /**
     * Get User profile photo small size. (Related with task GTM-4832)
     *
     * @return string
     */
    public static function getUserProfilePhotoSmallSize()
    {
        if (defined('ON_FOREST')) {
            require_once('fw/slash_util.csp');

            return CB_SlashDB::CONVERTER_SLASH_SIZE['MEDIUM'];
        } else {
            return GRN_ControllerUtil::ICON_SIZE_SMALL;
        }
    }

    /**
     * Get User profile photo large size. (Related with task GTM-4832)
     *
     * @return string
     */
    public static function getUserProfilePhotoLargeSize()
    {
        if (defined('ON_FOREST')) {
            require_once('fw/slash_util.csp');

            return CB_SlashDB::CONVERTER_SLASH_SIZE['MEDIUM'];
        } else {
            return GRN_ControllerUtil::ICON_SIZE_LARGE;
        }
    }
}

/**
 * データ作成画面での添付ファイル表示データを生成
 */
function grn_make_attached_file_info($file, $app_id = '')
{
    if (is_array($file)) {
        return $file;
    }

    $controller = new GRN_ControllerUtil();

    if (is_a($file, 'GRN_File')) {
        return $controller->getFileLinkView($file);
    } elseif (is_a($file, 'CB_ServerFile')) {
        return $controller->getFileBodyLinkView($file);
    }

    $dir_name = (strlen($app_id) > 0) ? $app_id : 'grn';
    require_once($dir_name . '/file.csp');
    $infix_name = (strlen($app_id) > 0) ? '_' . $app_id : '';
    $table = cb_class2table('GRN' . $infix_name . '_File');
    $row = $table->getRow($file);

    if ( ! $row) {
        return null;
    }

    return $controller->getFileLinkView($row);
}

/**
 * データ作成画面で添付ファイルの表示データを初期化
 *
 * @param string $session_id セッションキー（画面名など)
 * @param array  $files      初期添付ファイル
 * @param bool   $no_copy    初期添付ファイルをセッションへコピーしない場合TRUE
 */
function grn_init_attached_file(
    $session_id,
    $files = null,
    $no_copy = false,
    $app_id = ''
) {
    require_once('fw/session_manager.csp');
    $session_manager = CB_SessionManager::getInstance();
    $session = $session_manager->getSession($session_id);

    // 前回のファイルを掃除
    $stored_files = $session->getFiles('attached_session_file');
    foreach (array_keys($stored_files) as $id) {
        $session->unsetFile('attached_session_file', $id);
    }
    $session->set('attached_file', null);

    $files_for_view = [];
    $attached_file = [];

    if ( ! is_null($files)) {
        foreach (array_keys($files) as $id) {
            $file = $files[$id];

            if (is_a($file, 'GRN_File')) {
                $body = $file->getCurrentBody();
                if ( ! is_a($body, 'CB_ServerFile') || ! $body->exists()) {
                    continue;
                }

                if ($no_copy) {
                    $attached_file[$file->getOID()] = $file->getOID();
                } else {
                    $body = $file->getCurrentBody();
                    $id
                        = $session->addFile('attached_session_file',
                        $body);
                    $attached_file[$id] = null;
                }
            } else {
                $id = $session->addFile('attached_session_file',
                    $file);
                $attached_file[$id] = null;
            }

            $files_for_view[$id] = grn_make_attached_file_info($file, $app_id);
        }
    }
    $session->set('attached_file', $attached_file);

    return $files_for_view;
}

function __grn_get_attached_session_files($session)
{
    $files = $session->get('attached_file');
    $session_files = $session->getFiles('attached_session_file');

    global $G_INPUT;

    if (array_key_exists('fids', $G_INPUT) && is_array($G_INPUT['fids'])) {
        $keep = [];
        foreach ($G_INPUT['fids'] as $id) {
            if (array_key_exists($id, $session_files)) {
                $keep[$id] =& $session_files[$id];
                unset($session_files[$id]);
            } elseif (is_array($files) && array_key_exists($id, $files)) {
                if ($files[$id] == $id) {
                    $keep[$id] = $id;
                }
            }
        }

        if (count($session_files) > 0) {
            // POST されこなかった添付ファイルをクリア

            foreach (array_keys($session_files) as $id) {
                $session->unsetFile('attached_session_file', $id);
            }

            $attached_file = [];
            foreach (array_keys($keep) as $id) {
                if (is_object($keep[$id])) {
                    $attached_file[$id] = null;
                } else {
                    $attached_file[$id] = $id;
                }
            }
            $session->set('attached_file', $attached_file);
        }

        $files = $keep;
    } else {
        foreach (array_keys($session_files) as $id) {
            $session->unsetFile('attached_session_file', $id);
        }
        $session->set('attached_file', null);

        $files = [];
    }

    return $files;
}

/**
 * 添付ファイルの表示情報を取得
 *
 * @param string $session_id セッションキー（画面名など)
 *
 * @return array
 */
function grn_get_attached_file_info($session_id, $app_id = '')
{
    require_once('fw/session_manager.csp');
    $session_manager = CB_SessionManager::getInstance();
    $session = $session_manager->getSession($session_id);

    $files = __grn_get_attached_session_files($session);

    $files_for_view = [];

    // 既に添付されているファイルの情報を生成
    foreach (array_keys($files) as $id) {
        $file =& $files[$id];
        $files_for_view[$id] = grn_make_attached_file_info($file, $app_id);
    }

    $files = $session->get('attached_file');

    global $G_INPUT;
    if (array_key_exists("html5", $G_INPUT)) {
        $use_html5 = true;
    } else {
        $use_html5 = false;
    }

    if ( ! $use_html5) {
        // 新たに添付されたファイルを保存し、情報を生成
        foreach ($_FILES as $key => $file) {
            if ($file['error'] != UPLOAD_ERR_OK) {
                continue;
            }

            $id = $session->addFile('attached_session_file', $file);

            $files_for_view[$id] = grn_make_attached_file_info($file, $app_id);
            $files[$id] = null;
        }
    }
    $session->set('attached_file', $files);

    return $files_for_view;
}

/**
 * 添付ファイルを取得
 *
 * @param string $session_id セッションキー（画面名など)
 *
 * @return array
 */
function grn_get_attached_files(
    $session_id,
    $app_id = '',
    $attached_file = false
) {
    require_once('fw/session_manager.csp');
    $session_manager = CB_SessionManager::getInstance();
    $session = $session_manager->getSession($session_id);

    $files = __grn_get_attached_session_files($session);

    $dir_name = (strlen($app_id) > 0) ? $app_id : 'grn';
    require_once($dir_name . '/file.csp');
    $infix_name = (strlen($app_id) > 0) ? '_' . $app_id : '';
    $table = cb_class2table('GRN' . $infix_name . '_File');
    foreach (array_keys($files) as $key) {
        if (is_object($files[$key])) {
            continue;
        }

        $row = $table->getRow($key);
        if ( ! $row) {
            unset($files[$key]);
            continue;
        }
        $body = $row->getCurrentBody();
        if ( ! $body) {
            unset($files[$key]);
            continue;
        }
        $files[$key] = clone $body;
    }

    global $G_INPUT;
    if (array_key_exists("html5", $G_INPUT)) {
        $use_html5 = true;
    } else {
        $use_html5 = false;
    }

    if ( ! $use_html5 && $attached_file) {
        foreach ($_FILES as $key => $file) {
            if ($file['error'] != UPLOAD_ERR_OK) {
                continue;
            }

            $files[$key] = $file;
        }
    }

    return $files;
}

/**
 * Get the unique number for session name
 */
function grn_get_temporary_key($default_value = false)
{
    global $G_INPUT;

    static $tmp_key = '';

    if (array_key_exists('tmp_key', $G_INPUT) && strlen($G_INPUT['tmp_key']) > 0
        && ctype_digit($G_INPUT['tmp_key'])
    ) {
        $tmp_key = $G_INPUT['tmp_key'];
    } elseif (strlen($tmp_key) == 0) {
        if ($default_value === false) {
            $tmp_key = time();
        } else {
            $tmp_key = $default_value;
        }
    }

    return $tmp_key;
}

function grn_strip_tags($html_content)
{
    $br2nl = preg_replace('#<br[[:space:]]*/{0,1}>#i', "\n", $html_content);
    $data = strip_tags($br2nl);

    return grn_html_entity_decode($data);
}

function grn_html_entity_decode($encode)
{
    $trans_tbl = get_html_translation_table();
    $trans_tbl[" "] = "&nbsp;";

    return strtr($encode, array_flip($trans_tbl));
}

/**
 * @package grn.common
 */

function grn_wash_script($html_content, $no_pict = 0)
{
    $safehtml = new GRN_SafeHtml();

    if ($no_pict) {
        $safehtml->addDeleteTag('img');
    }

    $result = $safehtml->parse($html_content);

    return $result;
}

function grn_wash_script_without_style_attribute($html_content, $no_pict = 0)
{
    $safehtml = new GRN_SafeHtml();

    if ($no_pict) {
        $safehtml->addDeleteTag('img');
    }

    if (in_array('style', $safehtml->attributes)) {
        $key = array_search('style', $safehtml->attributes);
        unset($safehtml->attributes[$key]);
    }

    $result = $safehtml->parse($html_content);

    return $result;
}

function grn_safe_url($url)
{
    $retval = '';
    $templink = '<a href="' . $url . '"></a>';
    $templink = grn_wash_script($templink);

    $pattern = '/<a href="(.*)">/';
    if (preg_match($pattern, $templink, $matches)) {
        $retval = $matches[1];
    }

    return $retval;
}

function grn_prevent_tag_script($str)
{
    $index = 0;
    $convert_str = $str;
    while ($index < strlen($convert_str)
           && strpos($convert_str, "<script", $index) !== false) {
        $begPos = strpos($convert_str, "<script", $index);
        if ($begPos === false) {
            break;
        } //all tags were found & replaced.
        $endPos = strpos($convert_str, "script>", $begPos + strlen("<script"));
        $end = $endPos + strlen("script>");

        $convert_str = substr_replace($convert_str,
            htmlspecialchars(substr($convert_str, $begPos,
                $endPos + strlen("script>"))), $begPos, $end);
        $index = $end + 1;
    };

    return $convert_str;
}

class GRN_SafeHtml extends SafeHTML
{

    /**
     * List of dangerous CSS keywords
     *
     * Whole style="" attribute will be removed, if parser will find one of
     * these keywords
     *
     * url と @i を追加
     *
     * @var array
     * @access public
     */
    var $cssKeywords
        = [
            'absolute',
            'behavior',
            'behaviour',
            'content',
            'expression',
            'fixed',
            'include-source',
            'moz-binding',
            'url',
            '@i',
            'script',
            'AlphaImageLoader',
        ];

    /**
     * List of dangerous attributes
     *
     * "style"を追加
     *
     * @var array
     * @access public
     */
    var $attributes = ['dynsrc', 'id', 'name', 'style', 'formaction'];

    /**
     * List of dangerous tags (such tags will be deleted)
     *
     * @var array
     * @access public
     */
    var $deleteTags
        = [
            'applet',
            'base',
            'basefont',
            'bgsound',
            'blink',
            'body',
            'embed',
            'frame',
            'frameset',
            'head',
            'html',
            'ilayer',
            'iframe',
            'layer',
            'link',
            'meta',
            'object',
            'style',
            'title',
            'script',
            'form',
            'noscript',
            'noframes',
            'noembed',
            'nolayer',
            'input',
            'button',
            'svg',
        ];

    function addDeleteTag($tag)
    {
        if ( ! array_key_exists($tag, $this->deleteTags)) {
            $this->deleteTags[] = $tag;
        }
    }

    /**
     * Main parsing fuction
     *
     * @param string $doc HTML document for processing
     *
     * @return string Processed (X)HTML document
     * @access public
     */
    function parse($doc)
    {
        // Replace invalid xml tags
        $doc = preg_replace('#<\?xml(.[^/]*)/>#', "<?xml\\1?>", $doc);

        return parent::parse($doc);
    }

    /**
     * Override this method to ignore UTF-7 decoding
     *
     * @param string $str
     *
     * @return string
     */
    function repackUTF7($str)
    {
        return $str;
    }
}

/**
 * @param array $builtin_items
 * @param array $extended_items
 *
 * @return array
 */
function grn_wash_input_data(
    array $builtin_items,
    array $extended_items = null,
    $extended_prefix = ''
) {
    global $G_INPUT;
    // 組み込み項目
    $properties = [];
    foreach ($builtin_items as $key => $item) {
        if ($item['type'] === 'file') {
            $file = cb_at($_FILES, $key, false);
            if (false !== $file && UPLOAD_ERR_OK === $file['error']) {
                $properties[$key] = $file;
            } else {
                $properties[$key] = [
                    'error' => UPLOAD_ERR_NO_FILE,
                    'name'  => ''
                ];
            }
        } else {
            $value = cb_at($G_INPUT, $key, false);
            if (false !== $value) {
                $properties[$key] = $value;
            }
        }
    }

    // 拡張項目
    foreach ($extended_items as $key => $item) {
        $key = $extended_prefix . $key;
        if ($item['type'] === 'file') {
            $file = cb_at($_FILES, $key, false);
            if (false !== $file && UPLOAD_ERR_OK === $file['error']) {
                $properties[$key] = $file;
            } else {
                $properties[$key] = [
                    'error' => UPLOAD_ERR_NO_FILE,
                    'name'  => ''
                ];
            }
        } else {
            $value = cb_at($G_INPUT, $key, false);
            if (false !== $value) {
                $properties[$key] = $value;
            }
        }
    }
    if (isset($G_INPUT['file_exist'])) {
        $properties['file_exist'] = $G_INPUT['file_exist'];
    }
    if (isset($G_INPUT['file_delete'])) {
        $properties['file_delete'] = $G_INPUT['file_delete'];
    }

    return $properties;
}
