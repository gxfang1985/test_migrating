<?php

namespace grn\grn;

/**
 * Class TextLogger
 *
 * @package grn\grn
 */
class TextLogger implements \CB_Transactional
{

    private $shouldCleanUp = true;
    private $logDir;
    private $fileName;
    private $baseFileName;
    private $rotate;

    /**
     * @param $identifier
     * @param $baseFileName
     */
    public function __construct($identifier, $baseFileName)
    {

        $this->setDirName($identifier);
        $this->setRotate();
        $this->setDefaultFileName($baseFileName);
        $transactionManager = \CB_TransactionManager::getInstance();
        $transactionManager->register(CB_TRANSACTION_LEVEL_AUDIT, $this);
    }

    /**
     * @param $identifier
     * @param $fileName
     *
     * @return TextLogger
     */
    public static function createInstanceForceUseLogFileName(
        $identifier,
        $fileName
    ) {
        $myself = new self($identifier, "");
        $myself->forceUseFileName($fileName);

        return $myself;
    }

    /**
     * @param $baseFileName
     */
    private function setDefaultFileName($baseFileName)
    {
        $prefix = gmdate("Y-m-d");
        $this->fileName = "{$prefix}.{$baseFileName}";
        $this->baseFileName = $baseFileName;
    }

    /**
     * @param $identifier
     * set path of directory name.
     * ON_FOREST ($dir)/($domainId)/($identifier)
     * other     ($dir)/($identifier)
     */
    private function setDirName($identifier)
    {
        global $G_config_common;
        $dir = $G_config_common->get("TextLog", "dir");
        if ( ! $dir || empty($dir)) {
            $dir = cb_basedir();
        }
        $dirs = [$dir, "logs"];

        if (defined('ON_FOREST')) {
            $domain = \CB_CyDECUtil::getInstance()->getDomainID();
            $dirs[] = $domain;
        }

        $dirs[] = $identifier;

        $this->logDir = implode($dirs, DIRECTORY_SEPARATOR);
        cb_mkdir($this->logDir, 0777, true, true);
    }

    /**
     * set rotate value
     */
    private function setRotate()
    {
        global $G_config_common;
        $rotate = $G_config_common->get("TextLog", "rotate");
        if ( ! $rotate
             || ! is_numeric($rotate)
             || ! (0 < $rotate && $rotate < 31)
        ) {
            $rotate = 10;
        }
        $this->rotate = $rotate;
    }

    /**
     * @return array
     */
    private function getLogFileListInLogDir()
    {
        $files = scandir($this->logDir, 1);
        $logFiles = [];
        foreach ($files as $file) {
            if (mb_strpos($file, $this->baseFileName) === false) {
                continue;
            }
            $logFiles[] = $file;
        }

        return $logFiles;
    }

    /**
     * clean up obsolete log files
     *
     * @return bool    TRUE if the commit succeeds; otherwise FALSE.
     */
    public function commit()
    {
        if ( ! $this->shouldCleanUp) {
            return true;
        }

        $logFiles = $this->getLogFileListInLogDir();
        foreach (array_slice($logFiles, $this->rotate) as $removeFileName) {
            unlink(
                implode(
                    [$this->logDir, $removeFileName], DIRECTORY_SEPARATOR)
            );
        }

        return true;
    }

    /**
     * Abort and discard changes.  Implementers must be aware that
     * this may be called many times during the process request.
     */
    public function abort()
    {
        // do nothing
    }

    /**
     * @param string|LogMessageInterface $contents
     */
    public function log($contents)
    {
        $fileName = implode(
            [$this->logDir, "{$this->fileName}"], DIRECTORY_SEPARATOR
        );
        if ($contents instanceof LogMessageInterface) {
            $log_message = $contents->createFormattedLogMessage();
        } else {
            $log_message = $contents;
        }
        file_put_contents($fileName, $log_message . PHP_EOL, FILE_APPEND);
    }

    /**
     * set file to use forcibility
     * When this function called, date prefix is ignored.
     *
     * @param $fileName
     */
    private function forceUseFileName($fileName)
    {
        $this->fileName = $fileName;
    }

    /**
     * When this function called,
     * instance would not clean up log file
     */
    public function shouldNotCleanUp()
    {
        $this->shouldCleanUp = false;
    }
}
