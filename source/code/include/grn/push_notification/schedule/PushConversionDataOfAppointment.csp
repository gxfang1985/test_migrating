<?php
declare(strict_types=1);

namespace grn\grn\push_notification\schedule;

use grn\grn\push_notification\PushNotificationUtil;
use grn\grn\push_notification\bean\PushUser;
use grn\grn\push_notification\bean\Receiver;
use grn\grn\push_notification\bean\Receivers;

class PushConversionDataOfAppointment extends SchedulePushConversionData
{
    /** @var \CB_User[] */
    private $membersWithOperation = [];

    /** @var \CB_User */
    private $sender;

    /** @var bool */
    private $senderInvisible;

    /** @var array */
    private $notificationUsersInfo = [];

    /**
     * @param \GRN_Schedule_EventBase $event
     * @param array                   $members_with_operation
     * @param \CB_User                $sender
     * @param bool                    $sender_invisible
     * @param \CB_Date|\CB_DateTime   $bdate
     * @param string|NULL             $temporary_id
     */
    public function __construct(
        \GRN_Schedule_EventBase $event,
        array $members_with_operation,
        \CB_User $sender,
        bool $sender_invisible,
        $bdate,
        string $temporary_id = null
    ) {
        parent::__construct($event, $temporary_id,
            $this->convertCbDateTimeToCbDate($bdate));

        $this->membersWithOperation = $members_with_operation;
        $this->sender = $sender;
        $this->senderInvisible = $sender_invisible;

        $this->initData();
    }

    private function initData()
    {
        $this->makeNotificationUsersInfo();
    }

    private function makeNotificationUsersInfo()
    {
        $notification_users_info = [];
        foreach ($this->membersWithOperation as $operation => $members) {
            $push_user_list
                = PushNotificationUtil::createPushUsersByReceivers($members,
                GRN_SCHEDULE_APPLICATION_ID);
            $notification_users_info[$operation] = $push_user_list;
        }
        $this->notificationUsersInfo = $notification_users_info;
    }

    /**
     * @param int    $operation
     * @param string $locale
     *
     * @return string
     */
    private function getEventOperationName(
        int $operation,
        string $locale
    ): string {
        $operation_key = '';
        switch ($operation) {
            case GRN_SCHEDULE_NOTIFY_ENTRY:
                $operation_key = 'push_message_entry';
                break;
            case GRN_SCHEDULE_NOTIFY_MODIFY:
                $operation_key = 'push_message_modify';
                break;
            case GRN_SCHEDULE_NOTIFY_DELETE:
                $operation_key = 'push_message_delete';
                break;
            case GRN_SCHEDULE_NOTIFY_FIX:
                $operation_key = 'push_message_fix';
                break;
            default:
                assert(false);
        }

        $operation_name = $this->localeMessage($operation_key, null, $locale);

        return $operation_name;
    }

    /**
     * @param string $locale
     *
     * @return string
     */
    public function getTitle(string $locale): string
    {
        return self::ANDROID_KUNAI_TITLE;
    }

    /**
     * @param string $locale
     *
     * @return string
     */
    public function getBody(string $locale): string
    {
        $body = '';

        $app_name
            = PushNotificationUtil::getApplicationName(GRN_SCHEDULE_APPLICATION_ID,
            $locale);
        $operation_name
            = PushNotificationUtil::getPlaceHolderToReplaceKey(self::PLACE_HOLDER_OPERATION);
        $subject
            = PushNotificationUtil::truncateText($this->event->getTitle(),
            self::MAX_TEXT_OF_SHORT_LENGTH);
        $body .= $this->localeMessage(
            'push_message_app_name_and_operation_and_subject',
            [
                'app_name'       => $app_name,
                'operation_name' => $operation_name,
                'subject'        => $subject
            ],
            $locale);
        $body .= self::NEW_LINE_CODE;

        $body .= PushNotificationUtil::getPlaceHolderToReplaceKey(self::PLACE_HOLDER_DATETIME);
        $body .= self::NEW_LINE_CODE;

        $facility_names = $this->getFacilityNames($locale);
        if ($facility_names) {
            $facility_names
                = PushNotificationUtil::truncateText($facility_names,
                self::MAX_TEXT_OF_MIDDLE_LENGTH);
            $body .= $facility_names;
            $body .= self::NEW_LINE_CODE;
        }

        $body .= PushNotificationUtil::getPlaceHolderToReplaceKey(self::PLACE_HOLDER_OPERATOR_NAME);

        return $body;
    }

    /**
     * @return string
     */
    public function getUrl(): string
    {
        $page_name = 'schedule/mobile/view';
        $url_parameters = [];
        $url_parameters['uid']
            = PushNotificationUtil::getPlaceHolderToReplaceKey(self::PLACE_HOLDER_GAROON_USER_ID);
        $url_parameters['event'] = $this->event->id;
        $url_parameters['bdate'] = $this->bdate->format();

        return PushNotificationUtil::getKunaiURL($page_name, $url_parameters);
    }

    /**
     * @return Receivers
     */
    public function getReceivers(): Receivers
    {
        $sender = $this->getSender();

        $receivers = new Receivers();
        foreach ($this->notificationUsersInfo as $operation => $push_user_list) {
            /** @var PushUser $push_user */
            foreach ($push_user_list as $push_user) {
                $user_locale = $push_user->getLanguageCode();

                $place_holder
                    = PushNotificationUtil::createPlaceHolderByPushUser($push_user);
                $place_holder->{self::PLACE_HOLDER_GAROON_USER_ID}
                    = $push_user->getGaroonUserId();
                $place_holder->{self::PLACE_HOLDER_DATETIME}
                    = $this->getEventDateTime($push_user, $sender);
                $place_holder->{self::PLACE_HOLDER_OPERATION}
                    = $this->getEventOperationName($operation, $user_locale);
                $place_holder->{self::PLACE_HOLDER_OPERATOR_NAME}
                    = PushNotificationUtil::getDisplayUserName(
                    $push_user, $sender, GRN_SCHEDULE_APPLICATION_ID);
                $receiver
                    = new Receiver($push_user->getSlashUserId(), $place_holder);

                $receivers->appendReceiver($user_locale, $receiver);
            }
        }

        return $receivers;
    }

    /**
     * @return PushUser
     */
    public function getSender(): PushUser
    {
        return PushNotificationUtil::createPushUserByUser($this->sender);
    }

    /**
     * @return bool
     */
    public function getSenderInvisible(): bool
    {
        return $this->senderInvisible;
    }

    /**
     * @param \CB_Date|\CB_DateTime $date
     *
     * @return \CB_Date
     */
    private function convertCbDateTimeToCbDate($date): \CB_Date
    {
        if (is_a($date, \CB_Date::class)) {
            return $date;
        }

        return \CB_Date::valueOf($date->year, $date->month, $date->day);
    }
}
