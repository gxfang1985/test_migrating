<?php
declare(strict_types=1);

namespace grn\grn\push_notification\schedule;

use grn\grn\push_notification\PushNotificationUtil;
use grn\grn\push_notification\bean\PushUser;
use grn\grn\push_notification\bean\Receiver;
use grn\grn\push_notification\bean\Receivers;

class PushConversionDataOfFacilityResponse extends SchedulePushConversionData
{
    /** @var int */
    private $facilityId;

    /** @var bool */
    private $isApproval;

    /** @var \CB_User */
    private $sender;

    /** @var array */
    private $notificationUsersInfo = [];

    /**
     * @param \GRN_Schedule_EventBase $event
     * @param int                     $facility_id
     * @param bool                    $is_approval
     * @param \CB_User                $sender
     */
    public function __construct(
        \GRN_Schedule_EventBase $event,
        int $facility_id,
        bool $is_approval,
        \CB_User $sender
    ) {
        parent::__construct($event, null);

        $this->facilityId = $facility_id;
        $this->isApproval = $is_approval;
        $this->sender = $sender;

        $this->initData();
    }

    private function initData()
    {
        $this->makeNotificationUsersInfo();
    }

    private function makeNotificationUsersInfo()
    {
        $receivers = [$this->event->creator];
        $this->notificationUsersInfo
            = PushNotificationUtil::createPushUsersByReceivers($receivers,
            GRN_SCHEDULE_APPLICATION_ID);
    }

    /**
     * @param string $locale
     *
     * @return string
     */
    private function getApplicationNameForFacilityResponse(string $locale
    ): string {
        $operation_key = 'push_message_facility_reservation_settings';
        $operation_name = $this->localeMessage($operation_key, null, $locale);

        return $operation_name;
    }

    /**
     * @param string $locale
     *
     * @return string
     */
    private function getEventOperationName(string $locale): string
    {
        $operation_key = $this->isApproval ?
            'push_message_facility_approve'
            : 'push_message_facility_result_reject';

        $operation_name = $this->localeMessage($operation_key, null, $locale);

        return $operation_name;
    }

    /**
     * @param string $locale
     *
     * @return string
     */
    public function getTitle(string $locale): string
    {
        return self::ANDROID_KUNAI_TITLE;
    }

    /**
     * @param string $locale
     *
     * @return string
     */
    public function getBody(string $locale): string
    {
        $app_name = $this->getApplicationNameForFacilityResponse($locale);
        $facility_name = $this->getFacilityNameById($this->facilityId,
            $locale);
        $operation_name = $this->getEventOperationName($locale);
        $body
            = $this->localeMessage('push_message_app_name_and_operation_and_subject',
            [
                'app_name'       => $app_name,
                'operation_name' => $operation_name,
                'subject'        => $facility_name
            ], $locale);
        $body .= self::NEW_LINE_CODE;

        $body .= PushNotificationUtil::getPlaceHolderToReplaceKey(self::PLACE_HOLDER_DATETIME);
        $body .= self::NEW_LINE_CODE;

        $body .= PushNotificationUtil::getPlaceHolderToReplaceKey(self::PLACE_HOLDER_OPERATOR_NAME);

        return $body;
    }

    /**
     * @return string
     */
    public function getUrl(): string
    {
        $page_name = 'schedule/mobile/view';
        $url_parameters = [];
        $url_parameters['uid']
            = PushNotificationUtil::getPlaceHolderToReplaceKey(self::PLACE_HOLDER_GAROON_USER_ID);
        $url_parameters['event'] = $this->event->id;
        $timestamp = new \CB_TimeStampEx();
        /** @var \CB_Date $today */
        $today = $timestamp->getDate();
        $date = $this->event->getFirstDate($today);
        $url_parameters['bdate'] = $date->format();

        return PushNotificationUtil::getKunaiURL($page_name, $url_parameters);
    }

    /**
     * @return Receivers
     */
    public function getReceivers(): Receivers
    {
        $sender = $this->getSender();

        $receivers = new Receivers();
        /** @var PushUser $push_user */
        foreach ($this->notificationUsersInfo as $push_user) {
            $place_holder
                = PushNotificationUtil::createPlaceHolderByPushUser($push_user);
            $place_holder->{self::PLACE_HOLDER_GAROON_USER_ID}
                = $push_user->getGaroonUserId();
            $place_holder->{self::PLACE_HOLDER_DATETIME}
                = $this->getEventDateTime($push_user, $sender);
            $place_holder->{self::PLACE_HOLDER_OPERATOR_NAME}
                = PushNotificationUtil::getDisplayUserName(
                $push_user, $sender, GRN_SCHEDULE_APPLICATION_ID);
            $receiver
                = new Receiver($push_user->getSlashUserId(), $place_holder);

            $receivers->appendReceiver($push_user->getLanguageCode(),
                $receiver);
        }

        return $receivers;
    }

    /**
     * @return PushUser
     */
    public function getSender(): PushUser
    {
        return PushNotificationUtil::createPushUserByUser($this->sender);
    }

    /**
     * @return bool
     */
    public function getSenderInvisible(): bool
    {
        return true;
    }
}
