<?php
declare(strict_types=1);

namespace grn\grn\push_notification\schedule;

use grn\grn\push_notification\PushConversionDataInterface;
use grn\grn\push_notification\bean\PushUser;

use grn\schedule\ScheduleFacilityApprovalSetting;

require_once('fw/i18n.csp');
require_once('grn/controller.csp');
require_once('grn/locale.csp');
require_once('schedule/facility_system_logic.csp');
require_once('schedule/resources.csp');
require_once('schedule/view_util.csp');

abstract class SchedulePushConversionData implements PushConversionDataInterface
{
    const START_DATETIME = 'start_datetime';
    const END_DATETIME = 'end_datetime';
    const FACILITY_NAME_OF_TEMPORARY = 'facility_name_of_temporary';

    /** @var \GRN_Schedule_EventBase */
    protected $event;

    /** @var string */
    protected $temporaryId;

    /** @var DateTimeSet */
    protected $dateTimeSet;

    /** @var array */
    protected $temporaryDatetimeList = [];

    /** @var string[] */
    protected $facilities = [];

    /** @var \CB_Date */
    protected $bdate;

    /**
     * SchedulePushConversionData constructor.
     *
     * @param \GRN_Schedule_EventBase $event
     * @param string|NULL             $temporaryId
     * @param \CB_Date|NULL           $bdate
     */
    public function __construct(
        \GRN_Schedule_EventBase $event,
        string $temporaryId = null,
        \CB_Date $bdate = null
    ) {
        $this->event = $event;

        /**
         * This property is used only temporary event is set.
         */
        $this->temporaryId = $temporaryId;

        /**
         * This property is used only for PushConversionDateOfAppointment
         */
        $this->bdate = $bdate;

        $this->initData();
    }

    private function initData()
    {
        $this->setEventDateTime();
    }

    private function setEventDateTime()
    {
        $event = $this->event;
        if ($event instanceof \GRN_Schedule_BannerEvent) {
            $this->setBannerEventDateTime($event);

            return;
        }

        if ($event instanceof \GRN_Schedule_RepeatEvent) {
            $this->setRepeatEventDateTime($event);

            return;
        }

        if ($event instanceof \GRN_Schedule_TemporaryEvent) {
            $this->setTemporaryEventDateTime($event);

            return;
        }
        /** @var \GRN_Schedule_NormalEvent $event */
        $this->setNormalEventDateTime($event);
    }

    /**
     * @param int    $facility_id
     * @param string $locale
     *
     * @return string
     */
    protected function getFacilityNameById(
        int $facility_id,
        string $locale
    ): string {
        $facility_ids = [$facility_id];
        $facility_logic = \GRN_Facility_SystemLogic::getInstance();
        $facility_list = $facility_logic->getFacilityListByIds($facility_ids,
            $locale, CB_DATABASE_NO_LOCK);
        $facility_name = '';
        if (count($facility_list) > 0) {
            $facility = current($facility_list);
            $facility_name = $facility->get('name');
        }

        return $facility_name;
    }

    /**
     * @param string $locale
     *
     * @return string
     */
    protected function getFacilityNames(string $locale): string
    {
        $facility_ids = $this->getFacilityIDs();
        if (count($facility_ids) === 0) {
            return '';
        }
        $facility_names = [];
        $facility_logic = \GRN_Facility_SystemLogic::getInstance();
        $facility_list = $facility_logic->getFacilityListByIds($facility_ids,
            $locale, CB_DATABASE_NO_LOCK);
        foreach ($facility_list as $facility) {
            $facility_names[] = $facility->get('name');
        }

        return join(',', $facility_names);
    }

    /**
     * @return array
     */
    protected function getFacilityIDs(): array
    {
        if ($this->facilities && is_array($this->facilities)) {
            return $this->facilities;
        }
        $event = $this->event;
        if (is_null($event->facilities) || ! is_array($event->facilities)) {
            return [];
        }

        $facility_ids = [];
        /* @var \GRN_Facility_Facility $facility */
        foreach ($event->facilities as $facility) {
            if (is_a($facility, 'GRN_Facility_Facility')) {
                $facility_ids[] = $facility->getOID();
            }
        }

        return $facility_ids;
    }

    /**
     * @param int $facility_id
     *
     * @return array
     */
    protected function getFacilityRequestProcessors(int $facility_id)
    {
        $schedule_facility_approval_setting
            = new ScheduleFacilityApprovalSetting();

        return $schedule_facility_approval_setting->getOperationalAdministrators($facility_id);
    }

    /**
     * @param PushUser $push_user
     * @param PushUser $sender
     *
     * @return string
     */
    protected function getEventDateTime(
        PushUser $push_user,
        PushUser $sender
    ): string {
        if ($this->event instanceof \GRN_Schedule_TemporaryEvent
            && is_null($this->temporaryId)
        ) {
            $message_lines = [];

            /** @var FacilityAndDateSetsOfTemporaryEvent $facility_and_date_sets */
            foreach ($this->temporaryDatetimeList as $facility_and_date_sets) {
                if ( ! is_null($facility_and_date_sets->getFacilityId())) {
                    $message_lines[] = $this->getFacilityNameById(
                        $facility_and_date_sets->getFacilityId(),
                        $push_user->getLanguageCode());
                }
                foreach (
                    $facility_and_date_sets->getDateTimeSets() as $date_time_set
                ) {
                    $date_time_message_converter
                        = new DateTimeMessageConverter($date_time_set,
                        $push_user, $sender, $this->event);
                    $message_lines[]
                        = $date_time_message_converter->toMessage();
                }
            }

            return join(PushConversionDataInterface::NEW_LINE_CODE,
                $message_lines);
        }

        //The event is NOT temporary event
        //The event is set temporary event.
        $date_time_message_converter
            = new DateTimeMessageConverter($this->dateTimeSet, $push_user,
            $sender, $this->event);

        return $date_time_message_converter->toMessage();

    }

    /**
     * @param PushUser $push_user
     * @param PushUser $sender
     *
     * @return bool
     */
    protected function isSameTimezone(
        PushUser $push_user,
        PushUser $sender
    ): bool {
        return $push_user->getTimezone() === $sender->getTimezone();
    }

    /**
     * @param string      $resource_key
     * @param array|NULL  $args
     * @param string|NULL $locale
     *
     * @return string
     */
    protected function localeMessage(
        string $resource_key,
        array $args = null,
        string $locale = null
    ): string {
        $args['noescape'] = 'true';

        return cb_msg(GRN_SCHEDULE_MODULE_ID, $resource_key, $args, $locale);
    }

    /**
     * @param \GRN_Schedule_BannerEvent $event
     */
    private function setBannerEventDateTime(\GRN_Schedule_BannerEvent $event)
    {
        $start_date = new \CB_Date();
        $start_date->parse($event->setdate->format());
        $end_date = new \CB_Date();
        $end_date->parse($event->enddate->format());
        $start_time = \GRN_Schedule_View_Util::getAlldayStartTime();
        $end_time = \GRN_Schedule_View_Util::getAlldayEndTime();

        $this->dateTimeSet = new DateTimeSet(
            \CB_DateTimeEx::createByDateAndTime($start_date, $start_time),
            \CB_DateTimeEx::createByDateAndTime($end_date, $end_time)
        );
    }

    /**
     * @param \GRN_Schedule_RepeatEvent $event
     */
    private function setRepeatEventDateTime(\GRN_Schedule_RepeatEvent $event)
    {
        // Caution:
        // In the case of repeating appointment,
        // If the start date is in the past, the latest start date is displayed.
        $timestamp = new \CB_TimeStampEx();
        /** @var \CB_Date $today */
        $today = $timestamp->getDate();
        $latest_start_date = $this->event->getFirstDate($today);
        // If the event is deleted, getFirstDate() returns FALSE.
        if ($latest_start_date === false) {
            $latest_start_date = $this->bdate ?? $event->setdate;
        }

        $end_date = $event->enddate;
        $start_time = $event->settime;
        if (is_null($start_time)) {
            $start_time = \GRN_Schedule_View_Util::getAlldayStartTime();
        }
        $end_time = $event->endtime;
        if (is_null($end_time)) {
            $end_time = \GRN_Schedule_View_Util::getAlldayEndTime();
        }

        $this->dateTimeSet = new DateTimeSet(
            \CB_DateTimeEx::createByDateAndTime($latest_start_date,
                $start_time),
            \CB_DateTimeEx::createByDateAndTime($end_date, $end_time)
        );
    }

    /**
     * @param \GRN_Schedule_TemporaryEvent $event
     */
    private function setTemporaryEventDateTime(
        \GRN_Schedule_TemporaryEvent $event
    ) {
        $temporary_id = $this->temporaryId;

        if (is_null($temporary_id)) {
            if ($this->hasTemporaryEventFacility()) {
                foreach ($event->setdates as $setdate) {
                    // facility name
                    /** @var  \GRN_Facility_Facility $facility */
                    $facility = $setdate['facility'];
                    $facility_and_date_sets
                        = new FacilityAndDateSetsOfTemporaryEvent((int)$facility->getOID());
                    $facility_and_date_sets->addDateTimeSets($setdate['dates']);
                    $this->temporaryDatetimeList[] = $facility_and_date_sets;
                }
            } else {
                $facility_and_date_sets
                    = new FacilityAndDateSetsOfTemporaryEvent();
                $facility_and_date_sets->addDateTimeSets($event->setdates);
                $this->temporaryDatetimeList[] = $facility_and_date_sets;
            }
        } else {
            //If user pushed the "set" button
            $this->dateTimeSet = new DateTimeSet($event->setdatetime,
                $event->enddatetime);
            if ($event->isORSearch()) {
                foreach ($event->setdates as $facility_dates) {
                    if (isset($facility_dates['dates'][$temporary_id])) {
                        /** @var \GRN_Facility_Facility $facility */
                        $facility = $facility_dates["facility"];
                        $this->facilities[] = $facility->getOID();
                        break;
                    }
                }
            }
        }
    }

    /**
     * @return bool
     */
    private function hasTemporaryEventFacility(): bool
    {
        if ( ! is_a($this->event, \GRN_Schedule_TemporaryEvent::class)) {
            return false;
        }
        /**
         * @var \GRN_Schedule_TemporaryEvent $event
         */
        $event = $this->event;
        $first_set_date = $event->setdates[0] ?? [];

        return array_key_exists('facility', $first_set_date)
               && is_a($first_set_date['facility'],
                \GRN_Facility_Facility::class);
    }

    /**
     * @param \GRN_Schedule_NormalEvent $event
     */
    private function setNormalEventDateTime(\GRN_Schedule_NormalEvent $event)
    {
        if (DateTimeMessageConverter::isKindOfEventType($event,
            GRN_SCHEDULE_EVENT_TYPE_ALLDAY)
        ) {
            $start_date = new \CB_Date();
            $start_date->parse($event->setdatetime->format());
            $end_date = new \CB_Date();
            $end_date->parse($event->enddatetime->format());
            $start_time = \GRN_Schedule_View_Util::getAlldayStartTime();
            $end_time = \GRN_Schedule_View_Util::getAlldayEndTime();

            $this->dateTimeSet = new DateTimeSet(
                \CB_DateTimeEx::createByDateAndTime($start_date, $start_time),
                \CB_DateTimeEx::createByDateAndTime($end_date, $end_time)
            );
        } else {
            $this->dateTimeSet = new DateTimeSet($event->setdatetime,
                $event->enddatetime);
        }
    }
}
