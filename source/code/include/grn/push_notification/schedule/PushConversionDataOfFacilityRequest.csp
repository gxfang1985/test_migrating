<?php
declare(strict_types=1);

namespace grn\grn\push_notification\schedule;

use grn\grn\push_notification\PushNotificationUtil;
use grn\grn\push_notification\bean\PushUser;
use grn\grn\push_notification\bean\Receiver;
use grn\grn\push_notification\bean\Receivers;

class PushConversionDataOfFacilityRequest extends SchedulePushConversionData
{
    /** @var int */
    private $facilityId;

    /** @var \CB_User */
    private $sender;

    /** @var array */
    private $notificationUsersInfo = [];

    /**
     * @param \GRN_Schedule_EventBase $event
     * @param int                     $facility_id
     * @param \CB_User                $sender
     */
    public function __construct(
        \GRN_Schedule_EventBase $event,
        int $facility_id,
        \CB_User $sender
    ) {
        parent::__construct($event, null);

        $this->facilityId = $facility_id;
        $this->sender = $sender;

        $this->initData();
    }

    private function initData()
    {
        $this->makeNotificationUsersInfo();
    }

    private function makeNotificationUsersInfo()
    {
        $request_processors
            = $this->getFacilityRequestProcessors($this->facilityId);
        $this->notificationUsersInfo
            = PushNotificationUtil::createPushUsersByReceivers($request_processors,
            GRN_SCHEDULE_APPLICATION_ID);
    }

    /**
     * @param string $locale
     *
     * @return string
     */
    private function getApplicationNameForFacilityRequest(string $locale
    ): string {
        $operation_key = 'push_message_facility_reservation_settings';
        $operation_name = $this->localeMessage($operation_key, null, $locale);

        return $operation_name;
    }

    /**
     * @param string $locale
     *
     * @return string
     */
    public function getTitle(string $locale): string
    {
        return self::ANDROID_KUNAI_TITLE;
    }

    /**
     * @param string $locale
     *
     * @return string
     */
    public function getBody(string $locale): string
    {
        $body = $this->getFirstLine($locale);
        $body .= self::NEW_LINE_CODE;

        $body .= PushNotificationUtil::getPlaceHolderToReplaceKey(self::PLACE_HOLDER_DATETIME);
        $body .= self::NEW_LINE_CODE;

        $body .= PushNotificationUtil::getPlaceHolderToReplaceKey(self::PLACE_HOLDER_OPERATOR_NAME);

        return $body;
    }

    /**
     * @param string $locale
     *
     * @return string
     */
    public function getFirstLine(string $locale): string
    {
        $app_name = $this->getApplicationNameForFacilityRequest($locale);
        $facility_name = $this->getFacilityNameById($this->facilityId, $locale);

        return $this->localeMessage(
            'push_message_app_name_and_facility',
            ['app_name' => $app_name, 'facility_name' => $facility_name],
            $locale);
    }

    /**
     * @return string
     */
    public function getUrl(): string
    {
        $page_name = 'schedule/mobile/operation/facility_approve';
        $url_parameters = [];
        $url_parameters['event'] = $this->event->id;
        $url_parameters['faid'] = $this->facilityId;

        return PushNotificationUtil::getKunaiURL($page_name, $url_parameters);
    }

    /**
     * @return Receivers
     */
    public function getReceivers(): Receivers
    {
        $receivers = new Receivers();
        /** @var PushUser $push_user */
        foreach ($this->notificationUsersInfo as $push_user) {
            $place_holder = $this->createPlaceHolder($push_user);
            $receiver = new Receiver($push_user->getSlashUserId(),
                $place_holder);
            $receivers->appendReceiver($push_user->getLanguageCode(),
                $receiver);
        }

        return $receivers;
    }

    /**
     * @param PushUser $push_user
     *
     * @return \stdClass
     */
    public function createPlaceHolder($push_user): \stdClass
    {
        $sender = $this->getSender();
        $place_holder
            = PushNotificationUtil::createPlaceHolderByPushUser($push_user);
        $place_holder->{self::PLACE_HOLDER_DATETIME}
            = $this->getEventDateTime($push_user, $sender);
        $place_holder->{self::PLACE_HOLDER_OPERATOR_NAME}
            = PushNotificationUtil::getDisplayUserName(
            $push_user, $sender, GRN_SCHEDULE_APPLICATION_ID);

        return $place_holder;
    }

    /**
     * @return PushUser
     */
    public function getSender(): PushUser
    {
        return PushNotificationUtil::createPushUserByUser($this->sender);
    }

    /**
     * @return bool
     */
    public function getSenderInvisible(): bool
    {
        return false;
    }
}
