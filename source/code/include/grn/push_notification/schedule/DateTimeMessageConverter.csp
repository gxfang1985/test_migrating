<?php
declare(strict_types=1);

namespace grn\grn\push_notification\schedule;

use grn\grn\push_notification\bean\PushUser;

require_once('schedule/resources.csp');

class DateTimeMessageConverter
{
    const DATETIME_FORMAT_START_DATE = 'push_message_start_date';
    const DATETIME_FORMAT_START_DATE_END_DATE = 'push_message_start_date_end_date';
    const DATETIME_FORMAT_START_DATETIME = 'push_message_start_datetime';
    const DATETIME_FORMAT_START_DATETIME_END_TIME = 'push_message_start_datetime_end_time';
    const DATETIME_FORMAT_START_DATETIME_END_DATETIME = 'push_message_start_datetime_end_datetime';

    /** @var DateTimeSet */
    protected $dateTimeSet;

    /** @var  PushUser */
    protected $pushUser;

    /** @var  PushUser */
    protected $sender;

    /** @var \GRN_Schedule_EventBase */
    protected $event;

    public function __construct(
        DateTimeSet $date_time_set,
        PushUser $push_user,
        PushUser $sender,
        \GRN_Schedule_EventBase $event
    ) {
        $this->dateTimeSet = $date_time_set;
        $this->pushUser = $push_user;
        $this->sender = $sender;
        $this->event = $event;
    }

    /**
     *
     * @return string
     */
    public function toMessage(): string
    {
        $date_time_set = $this->dateTimeSet;

        $datetime_info = [
            'start_date' => $this->getDateFormat($date_time_set->getStartDatetime()),
            'start_time' => $this->getTimeFormat($date_time_set->getStartDatetime()),
            'end_date'   => $this->getDateFormat($date_time_set->getEndDatetime()),
            'end_time'   => $this->getTimeFormat($date_time_set->getEndDatetime())
        ];

        $datetime_format = $this->getDateTimeFormat($date_time_set->isSameDay(),
            $this->isSameTimezone());

        return $this->localeMessage($datetime_format, $datetime_info);
    }

    /**
     * @param \CB_DateTime|NULL $datetime
     *
     * @return string
     */
    protected function getDateFormat(\CB_DateTime $datetime = null): string
    {
        if (is_null($datetime)) {
            return '';
        }
        $push_user = $this->pushUser;

        $user_id = $push_user->getGaroonUserId();
        $user_locale = $push_user->getLanguageCode();
        $user_timezone = $push_user->getTimezone();
        $user_date_format = $push_user->getShortDateFormat();

        $event_timezone = $this->event->timezone;

        return cb_date_format(
            $user_date_format,
            \CB_I18N::translateDatetimeTimezone($datetime, $event_timezone,
                $user_timezone),
            $user_id,
            null,
            $user_locale);
    }

    /**
     * @param \CB_DateTime|NULL $datetime
     *
     * @return string
     */
    protected function getTimeFormat(\CB_DateTime $datetime = null): string
    {
        if (is_null($datetime)) {
            return '';
        }

        $push_user = $this->pushUser;
        $user_id = $push_user->getGaroonUserId();
        $user_locale = $push_user->getLanguageCode();
        $user_timezone = $push_user->getTimezone();
        $user_time_format = $push_user->getTimeFormat();

        $event_timezone = $this->event->timezone;

        return cb_date_format(
            $user_time_format,
            \CB_I18N::translateDatetimeTimezone($datetime, $event_timezone,
                $user_timezone),
            $user_id,
            null,
            $user_locale);
    }

    /**
     *
     * @return bool
     */
    protected function isSameTimezone(): bool
    {
        return $this->pushUser->getTimezone() === $this->event->timezone;
    }

    /**
     * @param string $resource_key
     * @param array  $args
     *
     * @return string
     */
    protected function localeMessage(string $resource_key, array $args): string
    {
        $locale = $this->pushUser->getLanguageCode();

        return cb_msg(GRN_SCHEDULE_MODULE_ID, $resource_key, $args, $locale);
    }

    /**
     * @param bool $is_same_day
     * @param bool $is_same_timezone
     *
     * @return string
     */
    private function getDateTimeFormat(
        bool $is_same_day,
        bool $is_same_timezone
    ): string {
        $event = $this->event;
        if ($event instanceof \GRN_Schedule_RepeatEvent) {
            if (self::isKindOfEventType($event,
                GRN_SCHEDULE_EVENT_TYPE_ALLDAY)
            ) {
                if ($is_same_timezone) {
                    return self::DATETIME_FORMAT_START_DATE;
                }
            }

            return self::DATETIME_FORMAT_START_DATETIME_END_TIME;
        }

        if (self::isKindOfEventType($event, GRN_SCHEDULE_EVENT_TYPE_ALLDAY)
            || $event instanceof \GRN_Schedule_BannerEvent
        ) {
            if ($is_same_timezone) {
                if ($is_same_day) {
                    return self::DATETIME_FORMAT_START_DATE;
                }

                return self::DATETIME_FORMAT_START_DATE_END_DATE;
            }

            if ($is_same_day) {
                return self::DATETIME_FORMAT_START_DATETIME_END_TIME;
            }

            return self::DATETIME_FORMAT_START_DATETIME_END_DATETIME;
        }

        if (self::isKindOfEventType($event, GRN_SCHEDULE_EVENT_TYPE_START)) {
            return self::DATETIME_FORMAT_START_DATETIME;
        }

        //Only care event which has specified start date time and end date time.
        if ($is_same_day) {
            return self::DATETIME_FORMAT_START_DATETIME_END_TIME;
        } else {
            return self::DATETIME_FORMAT_START_DATETIME_END_DATETIME;
        }
    }

    /**
     * @param \GRN_Schedule_EventBase $event
     * @param int                     $event_type
     * Defined on include/schedule/resources.csp
     *
     * GRN_SCHEDULE_EVENT_TYPE_NORMAL     , 1
     * GRN_SCHEDULE_EVENT_TYPE_REPEAT     , 2
     * GRN_SCHEDULE_EVENT_TYPE_TEMPORARY  , 4
     * GRN_SCHEDULE_EVENT_TYPE_START      , 16
     * GRN_SCHEDULE_EVENT_TYPE_ALLDAY     , 32
     * GRN_SCHEDULE_EVENT_TYPE_BANNER     , 64
     * GRN_SCHEDULE_EVENT_TYPE_DAILYEVENT , 256
     *
     * @return bool
     */
    public static function isKindOfEventType(
        \GRN_Schedule_EventBase $event,
        int $event_type
    ): bool {
        $target_event_type = $event->getEventType();
        if ($target_event_type !== false) {
            return ($target_event_type & $event_type) === $event_type;
        }

        return false;
    }
}
