<?php
declare(strict_types=1);

namespace grn\grn\push_notification\schedule;

use grn\grn\push_notification\PushNotificationUtil;
use grn\grn\push_notification\bean\PushUser;
use grn\grn\push_notification\bean\Receiver;
use grn\grn\push_notification\bean\Receivers;
use grn\schedule\bean\AttendanceStatus;

class PushConversionDataOfAttendanceConfirm extends SchedulePushConversionData
{
    /** @var \CB_User */
    private $sender;

    /** @var \CB_User */
    private $receiver;

    /** @var string */
    private $status;

    /** @var string */
    private $message;

    /** @var \CB_Date|NULL */
    protected $bdate;

    /** @var array */
    private $notificationUsersInfo = [];

    /**
     * @param \GRN_Schedule_EventBase $event
     * @param \CB_User                $sender
     * @param \CB_User                $receiver
     * @param string                  $status
     * @param string                  $message
     * @param \CB_Date|NULL           $bdate
     */
    public function __construct(
        \GRN_Schedule_EventBase $event,
        \CB_User $sender,
        \CB_User $receiver,
        string $status,
        string $message,
        $bdate = null
    ) {
        parent::__construct($event, null);

        $this->sender = $sender;
        $this->receiver = $receiver;
        $this->status = $status;
        $this->message = $message;
        $this->bdate = $bdate;

        $this->initData();
    }

    private function initData()
    {
        $this->makeNotificationUsersInfo();
    }

    private function makeNotificationUsersInfo()
    {
        $receivers = [$this->receiver];
        $this->notificationUsersInfo
            = PushNotificationUtil::createPushUsersByReceivers($receivers,
            GRN_SCHEDULE_APPLICATION_ID);
    }

    /**
     * @param string $locale
     *
     * @return string
     */
    private function getEventOperationName(string $locale): string
    {
        $operation_key = '';
        $operation = $this->status;
        switch ($operation) {
            case AttendanceStatus::STATUS_ABSENT:
                $operation_key = 'push_message_attendance_declined';
                break;
            case AttendanceStatus::STATUS_ATTENDANT:
                $operation_key = 'push_message_attendance_accepted';
                break;
            default:
                assert(false);
        }

        $operation_name = $this->localeMessage($operation_key, null, $locale);

        return $operation_name;
    }

    /**
     * @param string $locale
     *
     * @return string
     */
    public function getTitle(string $locale): string
    {
        return self::ANDROID_KUNAI_TITLE;
    }

    /**
     * @param string $locale
     *
     * @return string
     */
    public function getBody(string $locale): string
    {
        $body = $this->getFirstLine($locale);
        $body .= self::NEW_LINE_CODE;

        $body .= PushNotificationUtil::getPlaceHolderToReplaceKey(self::PLACE_HOLDER_DATETIME);
        $body .= self::NEW_LINE_CODE;

        $facility_names = $this->getFacilityNames($locale);
        if ($facility_names) {
            $body .= PushNotificationUtil::truncateText($facility_names,
                self::MAX_TEXT_OF_MIDDLE_LENGTH);
            $body .= self::NEW_LINE_CODE;
        }

        $body .= PushNotificationUtil::getPlaceHolderToReplaceKey(self::PLACE_HOLDER_OPERATOR_NAME);

        return $body;
    }

    /**
     * @return string
     */
    public function getUrl(): string
    {
        $page_name = 'schedule/mobile/view';
        $url_parameters = [];
        $url_parameters['uid']
            = PushNotificationUtil::getPlaceHolderToReplaceKey(self::PLACE_HOLDER_GAROON_USER_ID);
        $url_parameters['event'] = $this->event->id;
        if ($this->bdate
            && (is_a($this->bdate, 'CB_Date'))
        ) {
            $url_parameters['bdate'] = $this->bdate->format();
        }

        return PushNotificationUtil::getKunaiURL($page_name, $url_parameters);
    }

    /**
     * @return Receivers
     */
    public function getReceivers(): Receivers
    {
        $receivers = new Receivers();
        /** @var PushUser $push_user */
        foreach ($this->notificationUsersInfo as $push_user) {
            $place_holder = $this->createPlaceHolder($push_user);
            $receiver = new Receiver($push_user->getSlashUserId(),
                $place_holder);
            $receivers->appendReceiver($push_user->getLanguageCode(),
                $receiver);
        }

        return $receivers;
    }

    /**
     * @param PushUser $push_user
     *
     * @return \stdClass
     */
    public function createPlaceHolder($push_user): \stdClass
    {
        $sender = $this->getSender();
        $place_holder
            = PushNotificationUtil::createPlaceHolderByPushUser($push_user);
        $place_holder->{self::PLACE_HOLDER_GAROON_USER_ID}
            = $push_user->getGaroonUserId();
        $place_holder->{self::PLACE_HOLDER_DATETIME}
            = $this->getEventDateTime($push_user, $sender);
        $place_holder->{self::PLACE_HOLDER_OPERATOR_NAME}
            = PushNotificationUtil::getDisplayUserName(
            $push_user, $sender, GRN_SCHEDULE_APPLICATION_ID);

        return $place_holder;
    }

    /**
     * @return PushUser
     */
    public function getSender(): PushUser
    {
        return PushNotificationUtil::createPushUserByUser($this->sender);
    }

    /**
     * @return bool
     */
    public function getSenderInvisible(): bool
    {
        return true;
    }

    /**
     * @param string $locale
     *
     * @return string
     */
    public function getFirstLine(string $locale): string
    {
        $app_name
            = PushNotificationUtil::getApplicationName(GRN_SCHEDULE_APPLICATION_ID,
            $locale);
        $operation_name = $this->getEventOperationName($locale);
        $subject
            = PushNotificationUtil::truncateText($this->event->getTitle(),
            self::MAX_TEXT_OF_SHORT_LENGTH);

        return $this->localeMessage(
            'push_message_app_name_and_operation_and_subject',
            [
                'app_name'       => $app_name,
                'operation_name' => $operation_name,
                'subject'        => $subject
            ],
            $locale);
    }
}
