<?php
declare(strict_types=1);

namespace grn\grn\push_notification\workflow;

use grn\grn\push_notification\bean\PushUser;
use grn\grn\push_notification\bean\Receiver;
use grn\grn\push_notification\bean\Receivers;
use grn\grn\push_notification\PushConversionDataInterface;
use grn\grn\push_notification\PushNotificationUtil;

require_once('workflow/properties.csp');
require_once('workflow/resources.csp');

class PushConversionData implements PushConversionDataInterface
{
    /** @var array $petition */
    private $petition;

    /** @var \CB_User $sender */
    private $sender;

    /** @var \CB_User[] $receivers */
    private $receivers;

    /** @var int[] $receiver_ids */
    private $receiver_ids;

    /** @var array $folders */
    private $folders;

    /**
     * PushConversionData constructor.
     *
     * @param array      $petition
     * @param \CB_User   $sender
     * @param \CB_User[] $receivers
     * @param int[]      $receiver_ids
     * @param array      $folders
     */
    public function __construct(
        array $petition,
        \CB_User $sender,
        array $receivers,
        array $receiver_ids,
        array $folders
    ) {
        $this->petition = $petition;
        $this->sender = $sender;
        $this->receivers = $receivers;
        $this->receiver_ids = $receiver_ids;
        $this->folders = $folders;
    }

    /**
     * @param string $locale
     *
     * @return string
     */
    public function getBody(string $locale): string
    {
        $body = '';

        $app_name
            = PushNotificationUtil::getApplicationName(GRN_WORKFLOW_APPLICATION_ID,
            $locale);
        $operation_name
            = $this->convertStatusToDisplayMessage($this->petition['col_status'],
            $locale);
        $body .= $this->localeMessage('push_message_app_name_and_operation',
            [
                'app_name'       => $app_name,
                'operation_name' => $operation_name,
                'noenocode'      => true
            ], $locale);

        if ($this->petition['col_priority'] == '1') {
            $body .= $this->localeMessage('push_priority_flag', null, $locale);
        }

        $body .= PushNotificationUtil::truncateText(
            $this->petition['col_form_name'], self::MAX_TEXT_OF_SHORT_LENGTH);
        $body .= self::NEW_LINE_CODE;

        $body .= PushNotificationUtil::truncateText(
            $this->petition['col_name'], self::MAX_TEXT_OF_MIDDLE_LENGTH);
        $body .= self::NEW_LINE_CODE;

        $body .= PushNotificationUtil::getPlaceHolderToReplaceKey(self::PLACE_HOLDER_OPERATOR_NAME);

        return $body;
    }

    /**
     * @param string $status
     * @param string $locale
     *
     * @return string
     */
    private function convertStatusToDisplayMessage(
        string $status,
        string $locale
    ): string {
        $display_status = '';
        switch ($status) {
            case GRN_WORKFLOW_STATUS_UNPROCESSING:
            case GRN_WORKFLOW_STATUS_IN_PROCESS:
                $display_status = $this->localeMessage('push_status_in_process',
                    null, $locale);
                break;
            case GRN_WORKFLOW_STATUS_ACCEPTANCE:
                $display_status
                    = $this->localeMessage('push_status_in_acceptance', null,
                    $locale);
                break;
            case GRN_WORKFLOW_STATUS_REJECTION:
                $display_status
                    = $this->localeMessage('push_status_in_rejection', null,
                    $locale);
                break;
            case GRN_WORKFLOW_STATUS_REMAND:
                $display_status = $this->localeMessage('push_status_in_remand',
                    null, $locale);
                break;
            case GRN_WORKFLOW_STATUS_FINISHED:
                $display_status
                    = $this->localeMessage('push_status_in_finished', null,
                    $locale);
                break;
        }

        return $display_status;
    }

    /**
     * @return string
     */
    public function getUrl(): string
    {
        $page_name = 'workflow/mobile/view';
        $url_parameters = [];
        $url_parameters['pid'] = $this->petition['_id'];
        $url_parameters['fid']
            = PushNotificationUtil::getPlaceHolderToReplaceKey(self::PLACE_HOLDER_FOLDER_ID);

        return PushNotificationUtil::getKunaiURL($page_name, $url_parameters);
    }

    /**
     * @param string $locale
     *
     * @return string
     */
    public function getTitle(string $locale): string
    {
        return self::ANDROID_KUNAI_TITLE;
    }

    /**
     * @return PushUser
     */
    public function getSender(): PushUser
    {
        return PushNotificationUtil::createPushUserByUser($this->sender);
    }

    /**
     * @return Receivers
     */
    public function getReceivers(): Receivers
    {
        $receivers = new Receivers();

        $push_users = PushNotificationUtil::createPushUsersByReceivers(
            $this->receivers, GRN_WORKFLOW_APPLICATION_ID);

        $user_folder_relation = $this->makeUserFolderRelation();

        foreach ($push_users as $push_user) {
            $place_holder
                = PushNotificationUtil::createPlaceHolderByPushUser($push_user);
            $place_holder->{self::PLACE_HOLDER_FOLDER_ID}
                = $user_folder_relation[$push_user->getGaroonUserId()];
            $place_holder->{self::PLACE_HOLDER_OPERATOR_NAME}
                = $this->getOperatorName($push_user);
            $push_receiver
                = new Receiver($push_user->getSlashUserId(), $place_holder);
            $receivers->appendReceiver($push_user->getLanguageCode(),
                $push_receiver);
        }

        return $receivers;
    }

    /**
     * @param PushUser $operator
     *
     * @return string
     */
    private function getOperatorName(PushUser $operator): string
    {
        $target_user_id = $this->petition['col_user'];
        $target_user = cb_lwc_uum()->getUser($target_user_id);
        if ($target_user) {
            $target_user
                = PushNotificationUtil::createPushUserByUser($target_user);
            $operator_name = PushNotificationUtil::getDisplayUserName(
                $operator, $target_user, GRN_WORKFLOW_APPLICATION_ID);
        } else {
            $operator_name = $this->petition['col_user_name'];
        }

        return $operator_name;

    }

    /**
     * @return array
     */
    private function makeUserFolderRelation(): array
    {
        $user_folder_relation = [];
        foreach ($this->folders as $folder) {
            if ( ! isset($folder['col_user'])) {
                continue;
            }
            if ( ! isset($folder['_id'])) {
                continue;
            }

            $user_id = (int)$folder['col_user'];
            $folder_id = (int)$folder['_id'];
            $user_folder_relation[$user_id] = $folder_id;
        }

        return $user_folder_relation;
    }

    /**
     * @return bool
     */
    public function getSenderInvisible(): bool
    {
        return false;
    }

    /**
     * @param string      $resource_key
     * @param array|NULL  $args
     * @param string|NULL $locale
     *
     * @return string
     */
    protected function localeMessage(
        string $resource_key,
        array $args = null,
        string $locale = null
    ): string {
        $args['noescape'] = 'true';

        return cb_msg(GRN_WORKFLOW_MODULE_ID, $resource_key, $args, $locale);
    }

}
