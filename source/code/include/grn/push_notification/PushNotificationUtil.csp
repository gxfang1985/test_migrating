<?php
declare(strict_types=1);

namespace grn\grn\push_notification;

use grn\grn\access\service\AppAccess;
use grn\grn\push_notification\bean\PushUser;

require_once('grn/application.csp');
require_once('grn/controller.csp');
require_once('grn/locale.csp');
require_once('fw/i18n.csp');

class PushNotificationUtil
{
    const TRIM_MARKER = "...";

    /**
     * @param string $app_id
     * @param string $locale
     *
     * @return string
     */
    public static function getApplicationName(
        string $app_id,
        string $locale
    ): string {
        $app_locator = \GRN_ApplicationLocator::instance();
        $application_name = $app_locator->getName($app_id, $locale);

        return $application_name;
    }

    /**
     * @param PushUser $operator
     * @param PushUser $target_user
     * @param null     $app_id
     * @param bool     $only_display_one_name
     * @param bool     $not_use_setting
     *
     * @return string
     */
    public static function getDisplayUserName(
        PushUser $operator,
        PushUser $target_user,
        $app_id = null,
        $only_display_one_name = true,
        $not_use_setting = true
    ): string {
        $user = cb_lwc_uum()->getUser($operator->getGaroonUserId());
        $target_user_id = $target_user->getGaroonUserId();

        $user_name = '';
        $users_info = \GRN_ControllerUtil::getUserInfoToShowUserName(
            [$target_user_id], $user, $app_id);
        if (isset($users_info[$target_user_id])) {
            $user_name = cb_lwc_uum()->getNameOf(
                $user,
                $users_info[$target_user_id],
                $only_display_one_name,
                $not_use_setting);
        }

        return $user_name;
    }


    /**
     * @param \CB_User $user
     *
     * @return PushUser
     */
    public static function createPushUserByUser(\CB_User $user): PushUser
    {
        $sender_id = $user->getOID();

        $push_user = new PushUser();
        $push_user->setGaroonUserId((int)$sender_id);
        $push_user->setSlashUserId((int)$user->get('slash'));
        $push_user->setForeignKey($user->get('foreign_key'));
        $push_user->setTimezone(\CB_I18n::getUserTimezone($user));
        $push_user->setLanguageCode(\CB_LocaleManager::getCurrentLanguage($sender_id));
        $push_user->setLongDateFormat(\CB_LocaleManager::getCurrentLongDateFormat($sender_id));
        $push_user->setShortDateFormat(\CB_LocaleManager::getCurrentShortDateFormat($sender_id));
        $push_user->setTimeFormat(\CB_LocaleManager::getCurrentTimeFormat($sender_id));

        return $push_user;
    }

    /**
     * @param PushUser $receiver
     *
     * @return \stdClass $place_holder
     */
    public static function createPlaceHolderByPushUser(PushUser $receiver
    ): \stdClass {
        $user_code = $receiver->getForeignKey();

        $place_holder = new \stdClass();
        $place_holder->{PushConversionDataInterface::PLACE_HOLDER_USER_CODE}
            = $user_code;

        return $place_holder;
    }

    /**
     * @param \CB_User[] $receivers
     * @param string     $app_id
     *
     * @return PushUser[]
     */
    public static function createPushUsersByReceivers(
        array $receivers,
        string $app_id
    ): array {
        $check_target_users = [];
        foreach ($receivers as $receiver) {
            $is_valid = $receiver->get('valid');
            if (isset($is_valid)) {
                continue;
            }
            $user_id = $receiver->getOID();
            $check_target_users[$user_id] = $receiver;
        }

        $check_target_user_ids = array_keys($check_target_users);
        $access_allowed_user_ids
            = AppAccess::filterUserIdsInternalAccessByAppId($check_target_user_ids,
            $app_id);

        $push_user_list = [];
        foreach ($access_allowed_user_ids as $user_id) {
            $user = $check_target_users[$user_id];
            $push_user = self::createPushUserByUser($user);
            $push_user_list[$user_id] = $push_user;
        }

        return $push_user_list;
    }

    /**
     * @param string $place_holder_key
     *
     * @return string
     */
    public static function getPlaceHolderToReplaceKey(string $place_holder_key
    ): string {
        return "%%{$place_holder_key}%%";
    }

    /**
     * @param string $page_name
     * @param array  $url_parameters
     *
     * @return string
     */
    public static function getKunaiURL(
        string $page_name,
        array $url_parameters = []
    ): string {
        $extension = cb_get_page_extension();
        $url = '/' . $page_name . $extension;

        // Caution:
        // In Garoon notification,
        // when transitioning from the notification URL to the screen,
        // For deleted records, there are cases where deleted screens are displayed without cb_throw_error().
        // In the Garoon PUSH notification,
        // In accordance with the Garoon notification, 1 is set to the nid item.
        $url_parameters['nid'] = 1;

        if (count($url_parameters) > 0) {
            $url_key_value_list = [];
            foreach ($url_parameters as $key => $value) {
                $url_key_value_list[] = "{$key}={$value}";
            }
            $url .= "?" . join('&', $url_key_value_list);
        }

        return $url;
    }

    /**
     * @param string $string
     *
     * @return string
     */
    public static function replaceLineBreaksAndTabs(string $string): string
    {
        return mb_ereg_replace('\r\n|\r|\n|\t+', ' ', $string);
    }

    /**
     * @param string $string
     * @param int    $max_string_length
     * @param string $trim_marker
     *
     * @return string
     */
    public static function truncateText(
        string $string,
        int $max_string_length,
        string $trim_marker = self::TRIM_MARKER
    ): string {
        return mb_strimwidth(html_entity_decode($string), 0, $max_string_length,
            $trim_marker);
    }
}
