<?php
declare(strict_types=1);

namespace grn\grn\push_notification\phonemessage;

use grn\grn\push_notification\bean\PushUser;
use grn\grn\push_notification\bean\Receiver;
use grn\grn\push_notification\bean\Receivers;
use grn\grn\push_notification\PushConversionDataInterface;
use grn\grn\push_notification\PushNotificationUtil;

require_once('phonemessage/resources.csp');

class PushConversionData implements PushConversionDataInterface
{
    /** @var string $client_name */
    private $client_name;

    /** @var string $matter */
    private $matter;

    /** @var string $message */
    private $message;

    /** @var \CB_User $receiver */
    private $receiver;

    /** @var \CB_User $sender */
    private $sender;

    /** @var string $telephone_number */
    private $telephone_number;

    /** @var array */
    private $notificationUsersInfo = [];

    /**
     * PushConversionData constructor.
     *
     * @param string   $client_name
     * @param string   $matter
     * @param string   $message
     * @param \CB_User $receiver
     * @param \CB_User $sender
     * @param string   $telephone_number
     */
    public function __construct(
        string $client_name,
        string $matter,
        string $message,
        \CB_User $receiver,
        \CB_User $sender,
        string $telephone_number
    ) {
        $this->client_name = $client_name;
        $this->matter = $matter;
        $this->message = $message;
        $this->receiver = $receiver;
        $this->sender = $sender;
        $this->telephone_number = $telephone_number;
        $this->initData();
    }

    private function initData()
    {
        $this->makeNotificationUsersInfo();
    }

    private function makeNotificationUsersInfo()
    {
        $this->notificationUsersInfo
            = PushNotificationUtil::createPushUsersByReceivers(
            [$this->receiver], GRN_PHONEMESSAGE_APPLICATION_ID);
    }

    /**
     * @param string $locale
     *
     * @return string
     */
    public function getBody(string $locale): string
    {
        $body = '';
        $app_name
            = PushNotificationUtil::getApplicationName(GRN_PHONEMESSAGE_APPLICATION_ID,
            $locale);
        if ($this->client_name) {
            $client_name
                = PushNotificationUtil::truncateText($this->client_name,
                self::MAX_TEXT_OF_SHORT_LENGTH);
            $body .= $this->localeMessage(
                'push_message_app_name_and_client',
                ['app_name' => $app_name, 'client_name' => $client_name],
                $locale);
        } else {
            $body .= $this->localeMessage(
                'push_message_app_name_and_no_client',
                ['app_name' => $app_name],
                $locale);
        }
        $body .= self::NEW_LINE_CODE;

        $matter_message_key = 'push_message_' . $this->matter;
        $body .= $this->localeMessage(
            $matter_message_key,
            null,
            $locale);
        if ($this->telephone_number) {
            $body .= $this->telephone_number;
        }
        $body .= self::NEW_LINE_CODE;

        if ($this->message) {
            $replaced_message
                = PushNotificationUtil::replaceLineBreaksAndTabs($this->message);
            $body .= PushNotificationUtil::truncateText($replaced_message,
                self::MAX_TEXT_OF_MIDDLE_LENGTH);

            $body .= self::NEW_LINE_CODE;
        }

        $body .= PushNotificationUtil::getPlaceHolderToReplaceKey(self::PLACE_HOLDER_OPERATOR_NAME);

        return $body;
    }

    /**
     * @return string
     */
    public function getUrl(): string
    {
        $page_name = 'phonemessage/history';
        $url_parameters = [];
        $url_parameters['uid']
            = PushNotificationUtil::getPlaceHolderToReplaceKey(self::PLACE_HOLDER_GAROON_USER_ID);

        return PushNotificationUtil::getKunaiURL($page_name, $url_parameters);
    }

    /**
     * @param string $locale
     *
     * @return string
     */
    public function getTitle(string $locale): string
    {
        return self::ANDROID_KUNAI_TITLE;
    }

    /**
     * @return string
     */
    public function getClientName(): string
    {
        return $this->client_name;
    }

    /**
     * @return string
     */
    public function getMatter(): string
    {
        return $this->matter;
    }

    /**
     * @return string
     */
    public function getMessage(): string
    {
        return $this->message;
    }

    /**
     * @return Receivers
     */
    public function getReceivers(): Receivers
    {
        $receivers = new Receivers();
        $sender = $this->getSender();
        foreach ($this->notificationUsersInfo as $push_user) {
            $place_holder
                = PushNotificationUtil::createPlaceHolderByPushUser($push_user);
            $place_holder->{self::PLACE_HOLDER_GAROON_USER_ID}
                = $push_user->getGaroonUserId();
            $place_holder->{self::PLACE_HOLDER_OPERATOR_NAME}
                = PushNotificationUtil::getDisplayUserName(
                $push_user, $sender, GRN_PHONEMESSAGE_APPLICATION_ID);
            $receiver
                = new Receiver($push_user->getSlashUserId(), $place_holder);

            $receivers->appendReceiver($push_user->getLanguageCode(),
                $receiver);
        }

        return $receivers;
    }

    /**
     * @return PushUser
     */
    public function getSender(): PushUser
    {
        return PushNotificationUtil::createPushUserByUser($this->sender);
    }

    /**
     * @return bool
     */
    public function getSenderInvisible(): bool
    {
        return true;
    }

    /**
     * @param string      $resource_key
     * @param array|NULL  $args
     * @param string|NULL $locale
     *
     * @return string
     */
    protected function localeMessage(
        string $resource_key,
        array $args = null,
        string $locale = null
    ): string {
        $args['noescape'] = 'true';

        return cb_msg(GRN_PHONEMESSAGE_MODULE_ID, $resource_key, $args,
            $locale);
    }
}
