<?php
declare(strict_types=1);

namespace grn\grn\push_notification;

use grn\cydec\mq\PushJobMessage;
use grn\cydec\mq\MessageQueue;
use grn\cydec\mq\QueueRecord;
use grn\cydec\mq\PushQueueRecordBuilder;

class PushNotificationRegister
{
    const SYSTEM_PROFILE_MODULE_NAME = 'grn.common.push_notifications';
    const SYSTEM_PROFILE_FORCE_DISABLE_KEY = 'force_disabled';

    /**
     * @var MessageQueue
     */
    private $messageQueue;

    /**
     * @var \Closure
     */
    private $onBuildFunction;

    /**
     * @var PushQueueRecordBuilder
     */
    private $pushBuilder;

    /**
     * @return bool
     */
    public function isAvailable(): bool
    {
        if (cb_is_forest()) {
            return ! $this->isForceDisabled();
        }

        return false;
    }

    /**
     * @return bool
     */
    public function isForceDisabled(): bool
    {
        $profile = cb_get_system_profile(self::SYSTEM_PROFILE_MODULE_NAME);

        $is_disabled = false;
        $profile->getAttribute(self::SYSTEM_PROFILE_FORCE_DISABLE_KEY,
            $is_disabled);

        return $is_disabled;
    }

    /**
     * PushNotificationRegister constructor.
     */
    public function __construct()
    {
        $this->messageQueue = new MessageQueue();
        $this->onBuildFunction = function (array $records) {
            $this->enqueue($records);
        };
        $this->pushBuilder
            = new PushQueueRecordBuilder(new PushJobMessage(),
            $this->onBuildFunction);
    }

    /**
     * @param PushConversionDataInterface $push_conversion_data
     */
    public function enqueuePushRequest(
        PushConversionDataInterface $push_conversion_data
    ) {
        $push_message = new PushMessage($push_conversion_data);
        $envelope_list = $push_message->getEnvelopeWithReceiversUnit();
        if (count($envelope_list) === 0) {
            return;
        }

        foreach ($envelope_list as $envelope) {
            $this->pushBuilder->addEnvelope($envelope);
        }
        $this->pushBuilder->build();
    }

    /**
     * @param QueueRecord[] $queueRecords
     */
    private function enqueue(array $queueRecords)
    {
        foreach ($queueRecords as $record) {
            $this->messageQueue->enqueue($record);
        }
    }
}
