<?php
declare(strict_types=1);

namespace grn\grn\push_notification;

use grn\grn\push_notification\bean\APNSContent;
use grn\grn\push_notification\bean\Aps;
use grn\grn\push_notification\bean\Data;
use grn\grn\push_notification\bean\FCMContent;
use grn\grn\push_notification\bean\PushUser;
use grn\grn\push_notification\bean\Receivers;

class PushMessage implements PushMessageInterface
{
    const MAX_STRING_LENGTH_OF_TITLE = 100;
    const MAX_STRING_LENGTH_OF_BODY = 1000;

    /**
     * @var PushConversionDataInterface
     */
    protected $pushConversionData;

    /**
     * PushMessage constructor.
     *
     * @param PushConversionDataInterface $push_conversion_data
     */
    function __construct(PushConversionDataInterface $push_conversion_data)
    {
        $this->pushConversionData = $push_conversion_data;
    }

    /**
     * @param string $locale
     *
     * @return APNSContent
     */
    public function getAPNSContent(string $locale): APNSContent
    {
        $url = $this->pushConversionData->getUrl();

        $alert = $this->pushConversionData->getBody($locale);
        $alert_truncated = PushNotificationUtil::truncateText($alert,
            self::MAX_STRING_LENGTH_OF_BODY);
        $aps = new Aps($alert_truncated, self::SOUND);

        $apns_content = new APNSContent($url, $aps, self::APS_PAYLOAD_VERSION);

        return $apns_content;
    }

    /**
     * @param string $locale
     *
     * @return FCMContent
     */
    public function getFCMContent(string $locale): FCMContent
    {
        $title = $this->pushConversionData->getTitle($locale);
        $title_truncated = PushNotificationUtil::truncateText($title,
            self::MAX_STRING_LENGTH_OF_TITLE);
        $body = $this->pushConversionData->getBody($locale);
        $body_truncated = PushNotificationUtil::truncateText($body,
            self::MAX_STRING_LENGTH_OF_BODY);

        $url = $this->pushConversionData->getUrl();
        $domain = $this->getDomain();
        $user_code = PushNotificationUtil::getPlaceHolderToReplaceKey(
            PushConversionDataInterface::PLACE_HOLDER_USER_CODE);

        $version = self::FCM_PAYLOAD_VERSION;

        $data = new Data(
            $title_truncated,
            $body_truncated,
            $url,
            $domain,
            self::SERVICE,
            $user_code,
            $version);

        $fcm_content = new FCMContent($data);

        return $fcm_content;
    }

    /**
     * @return Receivers
     */
    public function getReceivers(): Receivers
    {
        $receivers = $this->pushConversionData->getReceivers();
        if ($this->getSenderInvisible()) {
            $sender_user_id = $this->getSender()->getSlashUserId();
            foreach (array_keys($receivers->getList()) as $locale) {
                $receivers->removeReceiver($locale, $sender_user_id);
            }
        }

        return $receivers;
    }

    /**
     * @return PushUser
     */
    public function getSender(): PushUser
    {
        return $this->pushConversionData->getSender();
    }

    /**
     * @return bool
     */
    public function getSenderInvisible(): bool
    {
        return $this->pushConversionData->getSenderInvisible();
    }

    /**
     * @return PushPayload[]
     */
    public function getEnvelopeWithReceiversUnit(): array
    {
        $envelope_list = [];
        $receivers_list = $this->getReceivers()->getList();
        foreach ($receivers_list as $locale => $receivers) {
            $apns_content = $this->getAPNSContent($locale);
            $fcm_content = $this->getFCMContent($locale);

            foreach (
                array_chunk($receivers, self::RECEIVERS_CHUNK_MAX_SIZE) as
                $receivers_chunk
            ) {
                $push_payload = new PushPayload(
                    self::APPLICATION_NAME,
                    self::CYDEC_MESSAGE_VERSION,
                    $apns_content,
                    $fcm_content,
                    $receivers_chunk);
                $envelope_list[] = $push_payload;
            }
        }

        return $envelope_list;
    }

    /**
     * @return string
     */
    private function getDomain(): string
    {
        $url_prefix = cb_get_url_prefix(true);
        $schema = cb_is_https() ? 'https' : 'http';
        $domain = substr($url_prefix, strlen($schema . '://'));

        return $domain;
    }
}
