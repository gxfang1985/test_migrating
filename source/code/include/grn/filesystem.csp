<?php

/**
 * ファイルシステムクラス
 *
 * @version     1.0
 * @package     grn.common
 */
class GRN_FileSystem
{
    /**
     * シングルトンインスタンスを取得する
     *
     * @return GRN_FileSystem
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_FileSystem;
        }

        return $_instance;
    }

    /**
     * ディレクトリをコピーする。
     *
     * @param string $source コピー元
     * @param string $dest   コピー先
     * @param string $mode   コピー属性( windowsでは無視 )
     *
     * @return bool
     */
    function copyDir($source, $dest, $mode = '755')
    {
        cb_mkdir($dest, $mode, false, true);

        $dh = opendir($source);
        if ( ! $dh) {
            return false;
        }

        while ($r = readdir($dh)) {
            if (($r != '.') && ($r != '..')) {
                $source_child = "$source/$r";
                $dest_child = "$dest/$r";

                if (is_dir($source_child)) {
                    $this->copyDir($source_child, $dest_child);
                } else {
                    if ( ! copy($source_child, $dest_child)) {
                        return false;
                    }
                }
            }
        }

        return true;
    }

    /**
     * ディレクトリを削除する。
     *
     * @param string $dir            削除ディレクトリ
     * @param string $is_root        ルートディレクトリを削除するか( TRUE=削除する )
     * @param string $condition_func 削除条件
     *
     * @return bool
     */
    function deleteDir($dir, $is_root, $condition_func = null)
    {
        if ($dh = @opendir($dir)) {
            while ($r = @readdir($dh)) {
                if (($r != '.') && ($r != '..')) {
                    $child = "$dir/$r";
                    if (is_dir($child)) {
                        $this->deleteDir($child, false, $condition_func);
                    } else {
                        if (is_null($condition_func)) {
                            @unlink($child);
                        } else {
                            if (call_user_func($condition_func, $child)) {
                                @unlink($child);
                            }
                        }
                    }
                }
            }
            @closedir($dh);

            if ($this->isEmptyDir($dir) && ! $is_root) {
                @rmdir($dir);
            }
        }
    }

    /**
     * ディレクトリの空判定
     *
     * @param string $dir ディレクトリ
     *
     * @return bool     空かどうか？
     */
    function isEmptyDir($dir)
    {
        $ret = true;
        if ($dh = @opendir($dir)) {
            while ($file = @readdir($dh)) {
                if (($file != '.') && ($file != '..')) {
                    $ret = false;
                    break;
                }
            }
        }
        @closedir($dh);

        return $ret;
    }

    /**
     * マッチ条件にヒットするファイルを削除する
     *
     * @param string $dir   ディレクトリ
     * @param string $regex マッチ条件
     *
     * @return bool
     */
    function deleteFile($dir, $regex)
    {
        if ($dh = @opendir($dir)) {
            while ($r = @readdir($dh)) {
                if (($r != '.') && ($r != '..')) {
                    $file = "$dir/$r";
                    if (is_file($file)
                        && preg_match('#' . $regex . '#', basename($file))
                    ) {
                        @unlink($file);
                    }
                }
            }
        }

        return true;
    }
}


