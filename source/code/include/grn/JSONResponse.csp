<?php

namespace grn\grn;

/**
 * This class use for reponse with JSON Response.
 * This aim for protect from XSS Security hole.
 **/
class JSONResponse
{
    const METHOD = 'REQUEST_METHOD';
    const E_CODE = 'FW00043';
    const X_REQUEST = 'HTTP_X_REQUESTED_WITH';
    const JSON_HEADER = 'Content-Type: application/json; charset=utf-8';

    //GTM-1136
    const JSON_HEADER_TEXT = 'Content-Type: text/plain; charset=utf-8';
    public static $json_header = false;

    /* PHP can not understand bellow token, and I use alternative expression.
       const A = B | C | D | E ;
       ENCODE_OPTION means JSON_HEX_QUOT | JSON_HEX_TAG  | 
                           JSON_HEX_AMP  | JSON_HEX_APOS | JSON_FORCE_OBJECT */

    const ENCODE_OPTION = 31;//alternative expression

    /**
     * purpose:create JSONResponse Object.
     * This method shuld be called by JSONResponse::create
     * in product code.(When Testing fake it!)
     *
     * @param array $server | SuperGlobal $_SERVER (check REQUEST HEADER)
     **/

    public function __construct(array $server)
    {
        $this->server = $server;
    }

    /**
     *  This class should be called in prouduct code when this class contruct.
     *  This aim is for Dependency inject, easy testing.
     **/
    public static function create()
    {
        return new self($_SERVER);
    }

    /**
     * validateAjaxAccess if access from GET or not AJAX Request,
     * Throw Error;
     **/
    public function validateAjaxAccess()
    {
        $server = $this->server;
        $throw_error = false;
        if ( ! isset($server[self::METHOD])
             || strcasecmp($server[self::METHOD], 'POST') != 0
        ) {
            $throw_error = true;
        }

        if ( ! isset($server[self::X_REQUEST])
             || $server[self::X_REQUEST] !== 'XMLHttpRequest'
        ) {
            $throw_error = true;
        }

        if ($throw_error) {
            cb_throw_error(self::E_CODE, null, null, null,
                ['page' => cb_get_pagename()]);
        }
    }

    /** outputHeader. This method is called by JSONEncode::response
     *  purpose: for Mock.
     *
     **/
    public function putoutHeader($contents)
    {
        header($contents);
    }

    /**
     * encode array to json format with encode option.
     * why add escape options? This is a cause of XSS security hole.
     *
     * @param array $array   input of json
     * @param int   $options json_encode option
     *
     * @return string
     */
    public function encode(array $array, $options = self::ENCODE_OPTION)
    {

        return json_encode($array, $options);
    }

    /**
     * response JSON Format response.
     *
     * @param array   $array       input of json response.
     * @param boolean $need_header need a 'application/json' Response Header or not.
     * @param string  $contents
     * @param int     $options     json_encode option
     */
    public function response(
        $array,
        $need_header = true,
        $contents = self::JSON_HEADER,
        $options = self::ENCODE_OPTION
    ) {
        $this->validateAjaxAccess();
        if ($need_header) {
            if (self::$json_header) {
                $this->putoutHeader(self::JSON_HEADER_TEXT);
            } else {
                $this->putoutHeader($contents);
            }
        }

        echo $this->encode($array, $options);
    }

}
