<?php

namespace grn\grn;

use grn\grn\GrnException;
use grn\grn\Validate;
use grn\grn\access\service\AppAccess;

class GrnGenericScreenBase
{
    const MAX_NUM_DISPLAY_MEMBER = 10;
    const DEFAULT_OFFSET_DISPLAY_MEMBER = 0;

    private $input;

    public function __construct($input)
    {
        $this->setInput($input);
    }

    public function getInput()
    {
        return $this->input;
    }

    protected function setInput($input)
    {
        $this->input = $input;
    }

    /**
     * @return string
     */
    public function fetch()
    {
        throw new GrnException();
    }

    public function post($input)
    {
        throw new GrnException();
    }

    /**
     * @return string
     */
    public function getTitle()
    {
        throw new GrnException();
    }

    /**
     * @return array
     */
    public function getSitePosition()
    {
        throw new GrnException();
    }

    /**
     * Function has been removed.
     *
     * Because there are a lot of classes use this function, so keep this function.
     * But the new writing class, please use cb_get_login_user(), thank you!
     *
     * @return \CB_User
     */
    protected function getLoginUser()
    {
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');

        return $uum->getLoginUser();
    }

    /**
     * Get login user id
     *
     * @return string UserId
     */
    protected function getLoginUserId()
    {
        $login_user = cb_get_login_user();
        assert('$login_user');

        return $login_user->getOID();
    }

    /**
     * get user obj
     *
     * @return \CB_User
     */
    protected function getUserInfo($user_id)
    {
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');

        return $uum->getUser($user_id);
    }

    /**
     * Function has been removed.
     *
     * Because there are a lot of classes use this function, so keep this function.
     * But the new writing class, please use cb_at(), thank you!
     *
     * @param string $key
     * @param array  $input
     *
     * @return mixed
     */
    protected function getArrayValue($key, $input)
    {
        return cb_at($input, $key);
    }

    /**
     * Get session object by session_key
     *
     * @param string $session_key
     *
     * @return \CB_Session
     */
    protected function getSession($session_key)
    {
        require_once('fw/session_manager.csp');
        $sm = \CB_SessionManager::getInstance();

        return $sm->getSession($session_key);
    }



    // ****** Following functions are used in Mobile view ******
    // ****** When using these functions, please be careful! ******

    const MORE_VIEW_COUNT = 20;

    private $_new_offset = -1;
    private $_mobile_application_id = null;
    private $_mobile_operate_menu = [];
    private $_mobile_footer_bar = [];

    /**
     * Set new offset (Mobile View)
     *
     * @param int $offset
     * @param int $limit
     * @param int $total_count
     */
    protected function setNewOffset($offset, $limit, $total_count)
    {
        require_once('grn/controller.csp');
        $controllerUtil = new \GRN_ControllerUtil();
        $navi_for_view = $controllerUtil->makeNaviInformation($offset,
            $limit, $total_count);
        $this->_new_offset = $navi_for_view['navi']['next_page_start_position'];
    }

    /**
     * Get new offset (Mobile View)
     *
     * @return int
     */
    public function getNewOffset()
    {
        return $this->_new_offset;
    }

    /**
     * Set application id in subclass to load specific CSS file. (Mobile View)
     * For example: bulletin, report, mail, etc.
     *
     * @param string $app_id
     */
    protected function setMobileApplicationId($app_id)
    {
        $this->_mobile_application_id = $app_id;
    }

    /**
     * Get application id (Mobile View)
     *
     * @return string
     */
    public function getMobileApplicationId()
    {
        return $this->_mobile_application_id;
    }

    /**
     * Get "remove_footer", if needed, override it in subclass to remove footer of TPL. (Mobile View)
     *
     * @return boolean $remove_footer  TRUE: remove the footer; FALSE: leave the footer
     */
    public function getRemoveFooter()
    {
        return false;
    }

    protected function initMobileView()
    {
        global $G_state_set;
        $G_state_set->set('html_should_be_closed', false);
        $G_state_set->set('copyright_should_be_written', false);
    }

    /**
     * Assign the information of UPPER PAGE to TPL, 'breadcrumb_upper_page' => array( 'name' => 'xxx', 'page' => 'xxx', 'params' => 'xxx')
     *
     * @param \GRN_Smarty $smarty
     * @param string      $name            the name of upper page
     * @param string      $page_path       For example: bulletin/mobile/view
     * @param array       $params          page URL parameters
     * @param bool        $is_history_back If it's true, upper page link will become "javascript:history.back();"
     */
    public function assignBreadcrumbUpperPage(
        $smarty,
        $name,
        $page_path,
        $params = [],
        $is_history_back = false
    ) {
        assert($smarty instanceof \GRN_Smarty);

        $smarty->assign('breadcrumb_upper_page', [
            'name'            => $name,
            'page'            => $page_path,
            'params'          => $params,
            'is_history_back' => $is_history_back
        ]);
    }

    /**
     * Assign the information of CURRENT PAGE to TPL, 'breadcrumb_current_page' => array( 'app_id' => 'xxx', 'name' => 'xxx', 'icon' => 'xxx')
     *
     * @param \GRN_Smarty $smarty
     * @param string      $name      the name of current page
     * @param string      $icon_path /cbgrn/grn/image/...    cbgrn is Garoon identifier name
     * @param string      $app_id
     */
    public function assignBreadcrumbCurrentPage(
        $smarty,
        $name,
        $icon_path = null,
        $app_id = null
    ) {
        assert($smarty instanceof \GRN_Smarty);

        if (Validate::isNull($app_id)) {
            $app_id = $this->getMobileApplicationId();
        }

        $smarty->assign('breadcrumb_current_page',
            ['app_id' => $app_id, 'name' => $name, 'icon' => $icon_path]);

        global $G_state_set;
        $is_breadcrumb_show = $G_state_set->get('is_cybozu_browser') ? false
            : true;
        $smarty->assign('is_breadcrumb_show', $is_breadcrumb_show);
    }

    /**
     * @param \GRN_Smarty $smarty
     * @param string      $page_path   e.g. mail/mobile/view
     * @param array       $up_params   e.g. array('aid'=>1, 'cid'=>2, 'mid'=>43)
     * @param array       $down_params e.g. array('aid'=>1, 'cid'=>2, 'mid'=>45)
     * @param boolean     $up_disable
     * @param boolean     $down_disable
     */
    public function assignPageUpDownButton(
        $smarty,
        $page_path,
        $up_params = [],
        $down_params = [],
        $up_disable = false,
        $down_disable = false
    ) {
        assert($smarty instanceof \GRN_Smarty);

        $page_up_down = [
            'page'         => $page_path,
            'up_params'    => $up_params,
            'down_params'  => $down_params,
            'up_disable'   => $up_disable,
            'down_disable' => $down_disable
        ];
        $smarty->assign('page_up_down', $page_up_down);
    }

    /**
     * Get application menu (Mobile View)
     *
     * @return array
     */
    public function getMobileApplicationMenu()
    {
        require_once('grn/application.csp');
        $app_locator = \GRN_ApplicationLocator::instance();
        $logged_in_id = cb_get_login_user()->getOID();
        $available_apps
            = AppAccess::getAllAppIdsAvailableByUserId($logged_in_id);

        //set app url
        $app_menus = [];
        $app_array = [
            'notification' => [
                'url'    => 'notification/mobile/index',
                'params' => []
            ],
            'space'        => ['url' => 'space/mobile/index', 'params' => []],
            'schedule'     => [
                'url'    => 'schedule/mobile/index',
                'params' => []
            ],
            'message'      => ['url' => 'message/mobile/index', 'params' => []],
            'bulletin'     => [
                'url'    => 'notification/mobile/index',
                'params' => ['module_id' => 'grn.bulletin']
            ],
            'mail'         => ['url' => 'mail/mobile/index', 'params' => []],
            'workflow'     => [
                'url'    => 'notification/mobile/index',
                'params' => ['module_id' => 'grn.workflow']
            ],
            'report'       => [
                'url'    => 'notification/mobile/index',
                'params' => ['module_id' => 'grn.report']
            ]
        ];
        foreach ($available_apps as $app_id) {
            if (array_key_exists($app_id, $app_array)) {
                $app = $app_locator->getInstance($app_id);
                $app_menus[$app_id] = array_merge($app_array[$app_id],
                    ['name' => $app->getName()]);
            }
        }

        return $app_menus;
    }

    /**
     * Set operate menu (Mobile View)
     *
     * @param array $operate_info
     *                     For example: array( array( 'page' => "space/add" , 'name' => 'Add', 'params' => array('spid' => '1','cid'=>'2')),
     *                     array( 'page' => "space/edit" , 'name' => 'index', 'params' => array())
     *                     );
     */
    public function setMobileOperateMenu($operate_info)
    {
        $operate_menus = [];
        if (is_array($operate_info) && count($operate_info) > 0) {
            $operate_menus = $operate_info;
        }
        $this->_mobile_operate_menu = $operate_menus;
    }

    /**
     * Get operate menu (Mobile View)
     *
     * @return string
     */
    public function getMobileOperateMenu()
    {
        return $this->_mobile_operate_menu;
    }

    /**
     * Set footer bar (Mobile View)
     *
     * @param array $custom_footer_bar_info need set two element
     *                                      For example: array( "edit"  => array( 'page' => 'mail/mobile/edit', 'params' => array('mid' => '1','cid'=>'2')),
     *                                      "trash" => array(),
     *                                      );
     *                                      $custom_footer_bar_info array key list:add_spacetodo, comment, add, trash, reply, edit
     * @param bool  $need_notify
     * @param bool  $need_operate
     * @param bool  $need_appmenu
     */
    public function setMobileFooterBar(
        $custom_footer_bar_info = [],
        $need_notify = true,
        $need_operate = true,
        $need_appmenu = true
    ) {

        $mobile_footer_bar = [];

        global $G_state_set;
        if ( ! $G_state_set->get('is_cybozu_browser')) {
            if ( ! is_array($custom_footer_bar_info)) {
                $custom_footer_bar_info = [];
            }

            if (count($custom_footer_bar_info) > 2) {
                $custom_footer_bar_info = array_slice($custom_footer_bar_info,
                    0, 2, true);
            }

            $count = 5 - count($custom_footer_bar_info) - ($need_notify ? 1 : 0)
                     - ($need_operate ? 1 : 0) - ($need_appmenu ? 1 : 0);
            if ($count > 0 && $count < 5) {
                for ($i = 0; $i < $count; $i++) {
                    $mobile_footer_bar[] = ['name' => 'nobar'];
                }
            }

            foreach ($custom_footer_bar_info as $name => $footer_bar) {
                if (is_array($footer_bar) && count($footer_bar) > 0) {
                    $mobile_footer_bar[] = array_merge(['class' => $name],
                        $footer_bar);
                } else {
                    $mobile_footer_bar[] = ['class' => $name];
                }
            }

            if ($need_notify) {
                if (AppAccess::isAppAvailableInternalAccess('notification')) {
                    $mobile_footer_bar[] = [
                        'class'  => 'notify',
                        'page'   => 'notification/mobile/index',
                        'params' => ['module_id' => 'all']
                    ];
                } else {
                    $mobile_footer_bar[] = ['name' => 'nobar'];
                }
            }

            if ($need_operate) {
                $mobile_footer_bar[] = ['class' => 'menu'];
            }

            if ($need_appmenu) {
                $mobile_footer_bar[] = ['class' => 'appmenu'];
            }

            $footer_bar_name = ['a', 'b', 'c', 'd', 'e'];

            foreach ($mobile_footer_bar as $k => $v) {
                if ( ! array_key_exists('name', $v)) {
                    $mobile_footer_bar[$k]
                        = array_merge(['name' => $footer_bar_name[$k]],
                        $mobile_footer_bar[$k]);
                }
            }
        }

        $this->_mobile_footer_bar = $mobile_footer_bar;
    }

    /**
     * Get footer bar (Mobile View)
     *
     * @return string
     */
    public function getMobileFooterBar()
    {
        return $this->_mobile_footer_bar;
    }
    // ****** End of Mobile view functions ******

}
