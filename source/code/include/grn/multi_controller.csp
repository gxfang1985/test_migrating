<?php

/**
 * @package grn.common
 */

require_once('grn/controller.csp');

/**
 * @package grn.common
 */
class GRN_MultiControllerUtil extends GRN_ControllerUtil
{
    /**
     * Return N-navi start position.
     * overwrite.
     */
    function getNaviStartPosition($prefix = '')
    {
        global $G_INPUT;
        // skip session check flag
        $sscf = true;

        // from parameter
        if (array_key_exists('sp', $G_INPUT)) {
            $sp = $G_INPUT['sp'];
            if ($prefix != '') {
                if (strpos($sp, $prefix) !== false) {
                    $pattern = "/^$prefix/";
                    $sp = preg_replace($pattern, '', $sp);

                    return (int)$sp;
                }
                $sscf = false;
            } else {
                return (int)$sp;
            }
        }

        if ($sscf) {
            // session flag
            if ( ! array_key_exists('sf', $G_INPUT) || ! $G_INPUT['sf']) {
                return 0;
            }
        }

        // from session
        $session =& $this->getSession();
        $current_start_position = $session->get($prefix
                                                . 'current_start_position');
        if ($current_start_position == null) {
            $current_start_position = 0;
        }

        return $current_start_position;
    }

    /**
     * Save N-navi start position into the current session.
     * overwrite.
     */
    function setNaviStartPosition($pos, $prefix = '')
    {
        // from session
        $session = $this->getSession();
        $session->set($prefix . 'current_start_position', (int)$pos);
    }

    /**
     * Make N-navi information for the view.
     * overwrite.
     *
     * @param $offset      int
     * @param $limit       int
     * @param $total_count int
     * @param $params      array
     * @param $prefix      string
     *
     * @return array
     */
    function makeNaviInformation(
        $offset,
        $limit,
        $total_count,
        $params = null,
        $prefix = ''
    ) {
        $start_position = $offset + 1;

        $end_position = $offset + $limit;
        if ($total_count < $end_position) {
            $end_position = $total_count;
        }

        if ($start_position > $end_position) {
            $start_position = 0;
            $end_position = 0;
        }

        if (0 < $offset) {
            $prev_position = $offset - $limit;
            if (0 > $prev_position) {
                $prev_position = 0;
            }
        } else {
            $prev_position = -1;
        }

        if ($total_count > $offset + $limit) {
            $next_position = $offset + $limit;
        } else {
            $next_position = -1;
        }

        return [
            'count'       => $total_count,
            'offset'      => $offset,
            'limit'       => $limit,
            'start_count' => $start_position,
            'end_count'   => $end_position,
            'navi'        => [
                'number_on_page'               => $limit,
                'previous_page_start_position' => $prev_position,
                'next_page_start_position'     => $next_position,
                'params'                       => $params,
                'prefix'                       => $prefix,
            ]
        ];
    }
}

