<?php

namespace grn\grn\screen;

require_once("grn/screen/UserSelectScreen.csp");

use grn\grn\MemberLogic;

/**
 * Class AbstractMemberSelectScreen
 *
 * @package grn\grn\screen
 */
abstract class AbstractMemberSelectScreen extends UserSelectScreen
{
    /** @var $class_name An instance of the loaded class, or FALSE. */
    protected $plugin = null;

    /** @var array */
    protected $plugin_param = null;

    /**
     *
     * @param $input
     */
    public function __construct($input)
    {
        parent::__construct($input);

        $plugin_datas = parent::getPluginDatas();
        $this->plugin = $plugin_datas['plugin'];
        $this->plugin_param = $plugin_datas['plugin_param'];

        $this->setTabName();
    }

    /**
     * @return string
     */
    protected function getTemplateName()
    {
        return 'grn/popup_member_select.tpl';
    }

    protected function browse()
    {
        parent::browse();
    }

    protected function setTabName()
    {
        // User Tab
        $is_allow_select_role = $this->permission_to_select_role
                                && $this->parameter->require_role_tab;
        $is_allow_select_group = $this->parameter->include_org
                                 && $this->showGroupRole();
        if ($is_allow_select_group || $is_allow_select_role) {
            $user_tab_name = cb_msg('grn.grn',
                'grn.member_select.tab_user_enable_role');
        } else {
            $user_tab_name = cb_msg('grn.grn', 'grn.member_select.tab_user');
        }

        $this->smarty->assign('user_tab_name', $user_tab_name);

        // Role Tab
        $this->smarty->assign('role_tab_name',
            cb_msg('grn.grn', 'grn.member_select.tab_role'));
    }

    /**
     *
     * @return string
     */
    protected function getPageTitle()
    {
        if ( ! $this->parameter->include_org) {
            $page_title = grn_get_page_display_name('common/popup_user_select');
        } else {
            if ($this->permission_to_select_role
                && $this->parameter->require_role_tab
            ) {
                $page_title
                    = grn_get_page_display_name('common/popup_member_select_all');
            } else {
                $page_title
                    = grn_get_page_display_name('common/popup_member_select_disable_role');
            }
        }

        return $page_title;
    }

    /**
     *
     * @param $members array (candidate or selected)
     *
     * @return array
     */
    protected function getMemberItemOptions($members)
    {
        $target_ids = [];
        foreach ($members as $member) {
            $target_ids[] = $member['id'];
        }
        $target_type_id_list = MemberLogic::getInstance()
                                          ->getPickoutMemberTypeIdFromParam($target_ids);

        $targets = MemberLogic::getInstance()
                              ->getDisplayMemberList($target_type_id_list,
                                  $this->parameter->app_id);

        //Do not check the Application user access right if app_id is 'grn.common'
        if ($this->parameter->app_id === 'grn.common') {
            foreach ($targets as $user_id => $user_info) {
                $targets[$user_id][MemberLogic::IS_NOT_USING_APP] = false;
            }
        }

        return $targets;
    }

    /**
     * Assign To candidate_item_options.
     */
    protected function setCandidate()
    {
        $candidate_item_options
            = $this->makeMembersItemOptions($this->candidate);
        $this->smarty->assign('candidate_item_options',
            $candidate_item_options);
    }

    /**
     * Assign To selected_item_options.
     */
    protected function setSelected()
    {
        $selected_item_options = $this->makeMembersItemOptions($this->selected);
        $this->smarty->assign('selected_item_options', $selected_item_options);
    }

    /**
     * get candidate list with item options
     *
     * @return array
     */
    protected function getCandidateWithItemOptions()
    {
        return $this->makeMembersItemOptions($this->candidate);
    }

    /**
     * @param array $members
     *
     * @return array
     */
    private function makeMembersItemOptions(array $members)
    {
        $tmp_members = [];
        // $member is user or group
        foreach ($members as $member) {
            $member_info = explode(':', $member['id']);
            $member_id = $member_info[0];

            $tmp_members[$member_id] = $member;

            if (isset($member_info[1])) {
                $tmp_members[$member_id]['group'] = str_replace('g', '',
                    $member_info[1]);
            }
        }

        $tmp_options = $this->getMemberItemOptions($tmp_members);

        $result = [];

        foreach ($tmp_options as $key => $item_option) {
            if (preg_match('/^g([0-9]+)$/', $key, $regs)
                || preg_match('/^r([0-9]+)$/', $key, $regs)
                || preg_match('/^dr(.*)$/', $key, $regs)
            ) {
                $result[$key] = $item_option;
            } else {
                $member_id = $tmp_options[$key]['id'] ?? null;
                if (is_null($member_id)) {
                    continue;
                }

                if (isset($tmp_members[$member_id]['group'])) {
                    $group_id = $tmp_members[$member_id]['group'];
                    $result[$member_id . ':' . $group_id] = $item_option;
                } else {
                    $result[$member_id] = $item_option;
                }
            }
        }

        return $result;
    }

}
