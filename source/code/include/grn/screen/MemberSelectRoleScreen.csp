<?php

namespace grn\grn\screen;

use grn\grn\MemberLogic;

require_once('grn/screen/AbstractMemberSelect.csp');

/**
 * Class MemberSelectRoleScreen
 *
 * @package grn\grn\screen
 */
class MemberSelectRoleScreen extends AbstractMemberSelectScreen
{
    /**
     * browse.
     */
    protected function browse()
    {
        parent::setTabName();
        $this->setCandidate();
        parent::setSelected();

        $this->assignRoleList();
    }

    /**
     * @see GRN_PopupUserSelect::add()
     */
    protected function add()
    {
        parent::add();

        $this->setCandidate();
        parent::setSelected();

        $this->assignRoleList();
    }

    /**
     * @see GRN_PopupUserSelect::remove()
     */
    protected function remove()
    {
        parent::remove();

        $this->setCandidate();
        parent::setSelected();

        $this->assignRoleList();
    }

    /**
     * @see GRN_PopupUserSelect::apply()
     */
    protected function apply()
    {
        parent::apply();

        $this->setCandidate();
        parent::setSelected();

        $this->assignRoleList();
    }

    /**
     * SetCandidate.
     */
    protected function setCandidate()
    {
        $this->candidate = [];
        $role_id = $this->parameter->s_rid;
        $is_dynamic_role = $role_id == MemberLogic::ROLE_ID_EVERYONE
                           || $role_id == MemberLogic::ROLE_ID_LOGINUSER;

        if ($this->parameter->require_dynamic_roles && $is_dynamic_role) {
            $this->setDynamicRole($role_id);
        } elseif (0 < $role_id) {
            $this->setRoleUsers($role_id);
        } elseif ($role_id == -1) {
            $this->searchRoleUsers();
        } elseif ($role_id == 0 && $this->showGroupRole()) {
            $this->setAllRoles();
        }

        $candidate_item_options = $this->getMemberItemOptions($this->candidate);
        $this->smarty->assign('candidate_item_options',
            $candidate_item_options);
    }

    /**
     * Set Dynamic role users.
     *
     * @param string $role_id
     */
    private function setDynamicRole(string $role_id)
    {
        if (parent::showGroupRole()) {
            $this->candidate[]
                = [
                MemberLogic::MEMBER_ID => MemberLogic::PREFIX_DYNAMIC_ROLE
                                          . $role_id
            ];
        }
    }

    /**
     * Set role users.
     *
     * @param $role_id
     */
    private function setRoleUsers($role_id)
    {
        if (parent::showGroupRole()) {
            $role = $this->getRole($role_id);
            if ($role) {
                $this->candidate[]
                    = [
                    MemberLogic::MEMBER_ID => MemberLogic::PREFIX_STATIC_ROLE
                                              . $role->getOID()
                ];
            }
        }
        $role_count = count($this->candidate);
        // Role affiliation user
        $role_users = $this->getRoleUsersId($role_id);
        foreach ($role_users as $uid) {
            $this->candidate[] = [MemberLogic::MEMBER_ID => $uid];
        }
        $this->limitMemberSelectList($role_count);
    }

    /**
     * Set All Roles.
     */
    private function setAllRoles()
    {
        if ($this->parameter->require_dynamic_roles) {
            $dynamic_roles = $this->uum_util->listDynamicRoles();
            foreach (array_keys($dynamic_roles) as $rid) {
                $this->candidate[]
                    = [
                    MemberLogic::MEMBER_ID => MemberLogic::PREFIX_DYNAMIC_ROLE
                                              . $rid
                ];
            }
        }

        $static_roles = $this->uum->listStaticRoles();

        $static_role_list = $this->getAccessEvalRoles($static_roles);
        foreach (array_keys($static_role_list) as $rid) {
            if ($rid == GRN_UUM_ADMINISTRATION_ROLE
                && ! $this->parameter->require_administrator_role
            ) {
                continue;
            }
            $this->candidate[]
                = [
                MemberLogic::MEMBER_ID => MemberLogic::PREFIX_STATIC_ROLE . $rid
            ];
        }
        $this->is_need_scroll = false;
    }

    /**
     * Get role.
     *
     * @param $role_id
     *
     * @return CB_Role|bool
     */
    private function getRole($role_id)
    {
        if ($role_id == GRN_UUM_ADMINISTRATION_ROLE
            && ! $this->parameter->require_administrator_role
        ) {
            cb_throw_error(E_GRN_USER_ROLE_ADMINISTRATORS_DISABLED);
        }
        $role = $this->uum->getStaticRole($role_id);

        if ( ! $role) {
            cb_throw_error(E_GRN_ROLE_NOT_FOUND);
        }

        $role_ids = [];
        $role_ids[$role->getOID()] = $role->getOID();
        $role_ids = $this->getAccessEvalRoles($role_ids);
        if (count($role_ids) == 0) {
            return false;
        }

        return $role;
    }

    /**
     * Get role users id.
     *
     * @param $role_id
     *
     * @return array
     */
    private function getRoleUsersId($role_id)
    {
        $role_users = $this->uum->getRoleUsersInfo($role_id);

        $user_ids = [];
        foreach (array_keys($role_users) as $uid) {
            $user_ids[] = $uid;
        }

        if ($this->plugin) {
            $all_user_ids = $user_ids;
            $user_ids = $this->plugin->evalUsers($user_ids,
                $this->plugin_param);
            $this->setInvalidAppUsers($all_user_ids, $user_ids);
        }

        return $user_ids;
    }

    /**
     * Search role users.
     */
    private function searchRoleUsers()
    {
        if ($this->showGroupRole()) {
            $this->searchRole();
        }
        $role_count = count($this->candidate);
        parent::userSearch($this->plugin, $this->plugin_param, true);
        $this->limitMemberSelectList($role_count);
    }

    /**
     * searchRole.
     */
    private function searchRole()
    {
        require_once('grn/org_util.csp');
        require_once('grn/org_util_search.csp');
        $searched_roles =& grn_search_role_list($this->parameter->searchword);

        if ($this->parameter->require_dynamic_roles) {
            $dynamic_role_list = $searched_roles['dynamic_role_list'];
            foreach (array_keys($dynamic_role_list) as $rid) {
                $this->candidate[]
                    = [
                    MemberLogic::MEMBER_ID => MemberLogic::PREFIX_DYNAMIC_ROLE
                                              . $rid
                ];
            }
        }

        $static_role_list = $searched_roles['static_role_list'];
        $static_role_list = $this->getAccessEvalRoles($static_role_list);
        foreach (array_keys($static_role_list) as $rid) {

            if ($rid == GRN_UUM_ADMINISTRATION_ROLE
                && ! $this->parameter->require_administrator_role
            ) {
                continue;
            }

            $this->candidate[]
                = [
                MemberLogic::MEMBER_ID => MemberLogic::PREFIX_STATIC_ROLE . $rid
            ];
        }
    }

    /**
     * Get access eval roles.
     *
     * @param $role_list
     *
     * @return array
     */
    private function getAccessEvalRoles($role_list)
    {
        $app_id = $this->parameter->app_id;
        $params = $this->plugin_param;
        if ( ! isset($app_id) && ! isset($params)) {
            return $role_list;
        }

        $access_plugin = [];
        $access_plugin['name'] = $app_id;
        $access_plugin['params'] = $params;

        return MemberLogic::getInstance()
                          ->getAccessEvalRoles($role_list, $access_plugin);
    }

    /**
     * assignRoleList.
     */
    private function assignRoleList()
    {
        $dynamic_role_list = [];
        $role_list = [];

        if ($this->showGroupRole()) {
            $role_list[0] = [
                'id'          => 0,
                'foreign_key' => cb_msg('grn.grn', 'all_roles')
            ];
        }

        if ($this->parameter->require_dynamic_roles) {
            $dynamic_roles = $this->uum_util->listDynamicRoles();
            foreach (array_keys($dynamic_roles) as $id) {
                // Role is foreign_key equals display_name
                $role_list[$id] = [
                    'id'          => $id,
                    'foreign_key' => $id
                ];
            }
        }

        $static_roles = $this->uum->listStaticRoles();
        foreach (array_keys($static_roles) as $id) {
            if ($id == GRN_UUM_ADMINISTRATION_ROLE
                && ! $this->parameter->require_administrator_role
            ) {
                continue;
            }
            // Role is foreign_key equals display_name
            $foreign_key = $static_roles[$id]->get('foreign_key');
            $role_list[$id] = [
                'id'          => $id,
                'foreign_key' => $foreign_key
            ];
        }

        $this->smarty->assign('role_list', $role_list);

        $exists_role = 1 < count($role_list);
        $no_select = ($this->parameter->s_rid < 0
                      || ! is_numeric($this->parameter->s_rid))
                     && $this->parameter->s_rid
                        != MemberLogic::ROLE_ID_EVERYONE
                     && $this->parameter->s_rid
                        != MemberLogic::ROLE_ID_LOGINUSER;
        if ($exists_role && $no_select) {
            reset($role_list);
            $head_rid = key($role_list);
            if ($this->parameter->s_rid != -1) {
                $this->parameter->s_rid = $head_rid;
                // Set again the candidate since changed the s_rid
                $this->setCandidate();
            }
        }

    }

    /**
     * limit member select users
     *
     * @param int $role_count
     */
    private function limitMemberSelectList($role_count)
    {
        $limit = $this->parameter->more_user_limit;
        if ($limit != -1) {
            $limit = $role_count + $this->parameter->more_user_limit;
            $all_users_count = count($this->candidate) - $role_count;
            $this->setIsNeedScroll($all_users_count);
            $this->candidate = array_slice($this->candidate,
                $this->parameter->more_user_offset, $limit);
        }
    }

    /**
     * Get candidate when scroll the search list or click select all
     *
     * @return array
     */
    public function ajaxGetCandidate()
    {
        $this->candidate = [];
        $role_id = $this->parameter->s_rid;
        if ($this->parameter->more_user_limit == -1) {
            $is_dynamic_role = $role_id == MemberLogic::ROLE_ID_EVERYONE
                               || $role_id == MemberLogic::ROLE_ID_LOGINUSER;
            if ($this->parameter->require_dynamic_roles && $is_dynamic_role) {
                $this->setDynamicRole($role_id);
            } elseif (0 < $role_id) {
                $this->setRoleUsers($role_id);
            } elseif ($role_id == -1) {
                $this->searchRoleUsers();
            } elseif ($role_id == 0 && $this->showGroupRole()) {
                $this->setAllRoles();
            }
        } else {
            if ($role_id == -1) {
                parent::userSearch($this->plugin, $this->plugin_param, true);
            }
            if (0 < $role_id) {
                $role_users = $this->getRoleUsersId($role_id);
                foreach ($role_users as $uid) {
                    $this->candidate[] = [MemberLogic::MEMBER_ID => $uid];
                }
            }
            $this->setIsNeedScroll(count($this->candidate));
            $this->candidate = array_slice($this->candidate,
                $this->parameter->more_user_offset,
                $this->parameter->more_user_limit);
        }

        $candidate_item_options = $this->getMemberItemOptions($this->candidate);

        return $candidate_item_options;
    }
}
