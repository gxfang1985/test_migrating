<?php

namespace grn\grn;

class ThumbnailUtil
{
    const ASPECT_RATIO_VARIABLE = 0;
    const ASPECT_RATIO_FIX = 1;
    const ASPECT_RATIO_SQUARE = 2;

    /** @var null|string */
    private $saveFilePath;

    /** @var int */
    private $aspectRatio;

    /** @var bool */
    private $forcePng;

    public function __construct()
    {
        $this->saveFilePath = null;
        $this->aspectRatio = self::ASPECT_RATIO_VARIABLE;
        $this->forcePng = false;
    }

    /**
     * @param string $filePath
     * @param int    $width
     * @param int    $height
     *
     * @return bool
     */
    public function makeThumbnailByFile($filePath, $width, $height)
    {
        $imageInfo = @getimagesize($filePath);
        if ( ! $this->validateImageInfo($imageInfo)) {
            return false;
        }
        $image = $this->makeImageFromPath($imageInfo[2], $filePath);

        return $this->makeThumbnail($image, $imageInfo, $width, $height);
    }

    /**
     * @param string $imageData
     * @param int    $width
     * @param int    $height
     *
     * @return bool
     */
    public function makeThumbnailByImageData($imageData, $width, $height)
    {
        $imageInfo = @getimagesizefromstring($imageData);
        if ( ! $this->validateImageInfo($imageInfo)) {
            return false;
        }
        $image = @imagecreatefromstring($imageData);

        return $this->makeThumbnail($image, $imageInfo, $width, $height);
    }

    /**
     * @param array|bool $imageInfo
     *
     * @return bool
     */
    private function validateImageInfo($imageInfo)
    {
        return is_array($imageInfo)
               && isset($imageInfo[0])
               && $imageInfo[0] !== 0
               && isset($imageInfo[1])
               && $imageInfo[1] !== 0
               && isset($imageInfo[2])
               && ($imageInfo[2] === IMAGETYPE_JPEG
                   || $imageInfo[2] === IMAGETYPE_GIF
                   || $imageInfo[2] === IMAGETYPE_PNG);
    }

    /**
     * @param resource $image
     * @param array    $imageInfo
     * @param int      $width
     * @param int      $height
     *
     * @return bool
     */
    public function makeThumbnail($image, $imageInfo, $width, $height)
    {
        if ( ! $image) {
            return false;
        }

        $src_width = $imageInfo[0];
        $src_height = $imageInfo[1];
        $imageType = $imageInfo[2];
        $src_x = 0;
        $src_y = 0;

        if ($this->aspectRatio === self::ASPECT_RATIO_FIX) {
            $this->equalProportionSetting($width, $height, $src_width,
                $src_height);
        } elseif ($this->aspectRatio === self::ASPECT_RATIO_SQUARE) {
            $this->resampledSetting($src_x, $src_y, $src_width, $src_height);
        }

        // サムネイル用の基盤画像作成
        $thumbnail = @imagecreatetruecolor($width, $height);
        if ($thumbnail === false) {
            return false;
        }

        // 透過情報
        if ($imageType === IMAGETYPE_GIF || $imageType === IMAGETYPE_PNG) {
            $this->makeTransferThumbnail($thumbnail, $image, $imageType);
        }
        if ($thumbnail === false) {
            return false;
        }

        // リサンプル
        @imagecopyresampled($thumbnail, $image, 0, 0, $src_x, $src_y, $width,
            $height, $src_width, $src_height);
        if ($thumbnail === false) {
            return false;
        }

        return ($this->forcePng) ? $this->exportPNG($thumbnail,
            $this->saveFilePath)
            : $this->exportImage($thumbnail, $imageType, $this->saveFilePath);
    }

    /**
     * @param null|string $saveFilePath
     */
    public function setSaveFilePath($saveFilePath)
    {
        $this->saveFilePath = $saveFilePath;
    }

    /**
     * @param int $aspectRatio
     */
    public function setAspectRatio($aspectRatio)
    {
        $this->aspectRatio = $aspectRatio;
    }

    /**
     * @param boolean $forcePng
     */
    public function setForcePng($forcePng)
    {
        $this->forcePng = $forcePng;
    }

    /**
     * @param int    $imageType
     * @param string $path
     *
     * @return null|resource
     */
    private function makeImageFromPath($imageType, $path)
    {
        switch ($imageType) {
            case IMAGETYPE_JPEG:
                $image = @imagecreatefromjpeg($path);
                break;
            case IMAGETYPE_GIF:
                $image = @imagecreatefromgif($path);
                break;
            case IMAGETYPE_PNG:
                $image = @imagecreatefrompng($path);
                break;
            default:
                return null;
        }

        return $image;
    }

    /**
     * 透過画像処理
     *
     * @param resource $image
     * @param resource $originalImage
     * @param int      $imageType
     */
    private function makeTransferThumbnail(& $image, $originalImage, $imageType)
    {
        $index = @imagecolortransparent($originalImage);
        if ($index >= 0
            && $index < @imagecolorstotal($originalImage)
        ) // 透過GIF、透過PNGの処理
        {
            $color = @imagecolorsforindex($originalImage, $index);
            $colorId = @imagecolorallocate($image, $color['red'],
                $color['green'], $color['blue']);
            if ($colorId !== false) {
                @imagefill($image, 0, 0, $colorId);
                @imagecolortransparent($image, $colorId);
            }
        } elseif ($imageType === IMAGETYPE_PNG) // アルファPNGの処理
        {
            @imagealphablending($image, false);
            $color = @imagecolorallocatealpha($image, 0, 0, 0, 127);
            if ($color !== false) {
                @imagefill($image, 0, 0, $color);
                @imagesavealpha($image, true);
            }
        }
    }

    /**
     * @param int $src_x
     * @param int $src_y
     * @param int $src_width
     * @param int $src_height
     */
    private function resampledSetting(
        & $src_x,
        & $src_y,
        & $src_width,
        & $src_height
    ) {
        if ($src_width >= $src_height) {
            $side = $src_height;
            $src_x = ceil(($src_width - $src_height) / 2);
            $src_y = 0;
            $src_width = $side;
        } else {
            $side = $src_width;
            $src_x = 0;
            $src_y = ceil(($src_height - $src_width) / 2);
            $src_height = $side;
        }
    }

    /**
     * @param resource    $image
     * @param int         $imageType
     * @param string|null $tmpPath
     *
     * @return bool
     */
    private function exportImage(& $image, $imageType, $tmpPath)
    {
        switch ($imageType) {
            case IMAGETYPE_JPEG:
                $success = @imagejpeg($image, $tmpPath);
                break;
            case IMAGETYPE_GIF:
                $success = @imagegif($image, $tmpPath);
                break;
            case IMAGETYPE_PNG:
                $success = @imagepng($image, $tmpPath);
                break;
            default:
                $success = false;
        }

        return $success;
    }

    /**
     * @param $image
     * @param $tmpPath
     *
     * @return bool
     */
    private function exportPNG(& $image, $tmpPath)
    {
        return @imagepng($image, $tmpPath);
    }

    /**
     * @param int $width
     * @param int $height
     * @param int $src_width
     * @param int $src_height
     */
    private function equalProportionSetting(
        & $width,
        & $height,
        $src_width,
        $src_height
    ) {
        if ($src_width > $width || $src_height > $height) {
            if ($src_width / $src_height >= $width / $height) {
                $height = ceil(($src_height * $width) / $src_width);
            } else {
                $width = ceil(($src_width * $height) / $src_height);
            }
        } else {
            $width = $src_width;
            $height = $src_height;
        }
    }

    /**
     * @return string
     */
    static public function isEnableInlineThumbnail()
    {
        require_once('grn/ui.csp');
        $manager = \GRN_UIConfigManager::getInstance();
        $config = $manager->getSystemConfig();

        return $config->isEnableInlineThumbnail();
    }
}
