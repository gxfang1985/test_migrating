<?php
/**
 * GRN_UUM Default Service Provider
 *
 * @author  Yuichi, Nakamura 2005/02
 * @version 1.0
 */

//Includes
require_once('fw/uum_spi.csp');
require_once('grn/uum_core.csp');
require_once('grn/authentication.csp');

/**
 * Default Service Provider for GRN_UUM
 */
class GRN_UumDefaultServiceProvider extends CB_UumDefaultServiceProvider
{
    /**
     * Constructor
     */
    function __construct()
    {
        //Initialize Parent Class
        parent::__construct('grn.uum.service_provider');

        //Attach UUM Core API
        $this->_core = GRN_UumCoreAPI::getInstance();
    }

    /**
     * Require Login User
     */
    function _requireLoginUser()
    {
        //Check Login User
        if ( ! $this->_isPasswordExpired() && $this->_login_user !== false) {
            return;
        }

        //Challenge Login
        $service = GRN_Authentication_Service::getInstance();
        if ( ! $service->login()) {
            global $G_INPUT;
            $system = null;
            $system = @ $G_INPUT['_system'];

            if ($this->_isPasswordExpired()) {
                //Get Password Expired Page
                $login_page = $service->getPwdExpiredPage();
                if ( ! $login_page || $system == 2) {
                    cb_throw_error(E_COMMON_ACCOUNT_INVALIDATED);
                }
            } else {
                //Get Login Page
                $login_page = $service->getLoginPage();
                if ( ! $login_page || $system == 1) {
                    cb_throw_error(E_COMMON_AUTHENTICATION_FAILED);
                }
                //Display Login Page
                header('X-CybozuLogin: 1');
            }


            cb_switch_page($login_page);
        }

        if ( ! $this->_isPasswordExpired()) {
            // run login triggers.
            $this->_loadHook('addTriggerOnLogin');
            $this->_runHook($this->_login_triggers, $this->_login_user);

            // G_INPUTに_account,_password,_system,_uidが入ったままだと受け取ったパラメータを
            // そのまま引き継ぐようなロジックで問題が出るのでunsetしておく。
            // login triggersの後に実行しているのは、grn_set_cookieで_accountを使うため。
            global $G_INPUT;
            unset($G_INPUT['_system']);
            unset($G_INPUT['_uid']);
            unset($G_INPUT['_account']);
            unset($G_INPUT['_password']);
            // パスワードの有効期限切れの時にはこっちも問題が出るので念のため毎回外す
            unset($G_INPUT['_exec']);
            unset($G_INPUT['_retype']);
            unset($G_INPUT['_pwd_ticket']);
        }

        return;
    }

    /**
     * Get Login  User
     *
     * @return CB_User or FALSE
     */
    function getLoginUser()
    {

        //Check Login User
        if ($this->_login_user !== false) {
            static $result = null;
            if (is_null($result)) {
                $result = $this->_login_user;
                if ($this->_isPasswordExpired()) {
                    $result = false;
                }
            }

            return $result;
        }

        //Check Command-Line Flag
        global $G_INPUT, $G_state_set;
        if ($G_state_set->get('command_line')) {
            {
                $___ret = false;

                return $___ret;
            }
        }

        if (isset($G_INPUT[CB_UUMSPI_SYSTEMPARAM])) {
            {
                $___ret = false;

                return $___ret;
            }
        }

        //Check Recurecive Flag
        static $_recur = false;
        if ($_recur) {
            {
                $___ret = false;

                return $___ret;
            }
        }
        $_recur = true;

        //Challenge Authentication
        $service = GRN_Authentication_Service::getInstance();
        if ( ! $service->authenticate()) {
            //Return FALSE
            {
                $___ret = false;

                return $___ret;
            }
        }

        // return login user.
        $_recur = false;
        $ret = $this->_login_user;

        return $ret;
    }

    /**
     * Login
     *
     * @return bool
     */
    function login()
    {
        //Challenge Login
        $service = GRN_Authentication_Service::getInstance();
        if ( ! $service->login()) {
            return false;
        }

        if ( ! $this->_isPasswordExpired()) {
            // run login triggers.
            $this->_loadHook('addTriggerOnLogin');
            $this->_runHook($this->_login_triggers, $this->_login_user);

            // G_INPUTに_account,_password,_system,_uidが入ったままだと受け取ったパラメータを
            // そのまま引き継ぐようなロジックで問題が出るのでunsetしておく。
            // login triggersの後に実行しているのは、grn_set_cookieで_accountを使うため。
            global $G_INPUT;
            unset($G_INPUT['_system']);
            unset($G_INPUT['_uid']);
            unset($G_INPUT['_account']);
            unset($G_INPUT['_password']);
            // パスワードの有効期限切れの時にはこっちも問題が出るので念のため毎回外す
            unset($G_INPUT['_exec']);
            unset($G_INPUT['_retype']);
            unset($G_INPUT['_pwd_ticket']);
        }

        return true;
    }

    /**
     * Login as the specified user.
     *
     * @param CB_User $user
     */
    function loginAs($user)
    {
        assert('is_a($user, "CB_User")');

        // keep login user in memory and session.
        $this->_login_user = $user;
        global $G_state_set;
        if ($G_state_set->get('command_line') === false) {
            $service = GRN_Authentication_Service::getInstance();
            $account = $user->get('foreign_key');
            $service->setCredential($account, null);

            // run login triggers.
            $this->_loadHook('addTriggerOnLogin');
            $this->_runHook($this->_login_triggers, $user);

            // G_INPUTに_account,_password,_system,_uidが入ったままだと受け取ったパラメータを
            // そのまま引き継ぐようなロジックで問題が出るのでunsetしておく。
            // login triggersの後に実行しているのは、grn_set_cookieで_accountを使うため。
            global $G_INPUT;
            unset($G_INPUT['_system']);
            unset($G_INPUT['_uid']);
            unset($G_INPUT['_account']);
            unset($G_INPUT['_password']);
            // パスワードの有効期限切れの時にはこっちも問題が出るので念のため毎回外す
            unset($G_INPUT['_exec']);
            unset($G_INPUT['_retype']);
            unset($G_INPUT['_pwd_ticket']);
        }
    }

    /**
     * Logout.
     */
    function logout()
    {
        // get login user for triggers.
        $tmp_user = null;
        $login = $this->getLoginUser();
        if ($login) {
            $tmp_user = $this->_core->getUser($login->getOID());
        }

        //Clear All Credentials
        $service = GRN_Authentication_Service::getInstance();
        $service->logout();

        if ($tmp_user) {
            // run logout triggers.
            $this->_loadHook('addTriggerOnLogout');
            $this->_runHook($this->_logout_triggers, $tmp_user);
        }

        return;
    }

    /**
     * User Authentication
     *
     * @param CB_User $user       //Target User
     * @param string  $credential //Authentication Credential for Target User
     *
     * @return bool
     */
    function authenticate($user, $credential)
    {
        if (defined('ON_FOREST')) {
            require_once('fw/forest_util.csp');

            return CB_ForestUtil::validatePassword($user, $credential);
        }

        //Init  Authentication Result
        $result = false;

        //Get Garoon Old Version Password
        $old_password = $user->get('reserve_blob1');
        if ( ! is_null($old_password)) {
            //Try Authentication for Old Version Password
            require_once('grn/passwd_util.csp');
            $result = GRN_PasswordUtil::validatePassword($credential,
                $old_password);
        } else {
            //Try Authentication for  Current Version Password
            $result = parent::authenticate($user, $credential);
        }

        //Return Authentication Result
        return $result;
    }

    /**
     * _isPasswordExpired
     *
     * @return bool        TRUE if password was expired
     */
    function _isPasswordExpired()
    {
        $service = GRN_Authentication_Service::getInstance();

        return is_array($service->getPasswordExpiredInfo());

    }
}
