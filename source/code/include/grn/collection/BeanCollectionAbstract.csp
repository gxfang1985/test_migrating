<?php

namespace grn\grn\collection;

use grn\grn\Validate;
use grn\grn\bean\BeanAbstract;
use grn\grn\GrnException;

/**
 * BeanCollectionAbstractクラス
 * あるBeanオブジェクトの集合を表現する抽象クラス
 *
 * Copy from grn\space\common\data\collection\BeanCollectionAbstract
 *
 * @package grn\grn\collection
 * @access  public
 **/
abstract class BeanCollectionAbstract implements \IteratorAggregate, \Countable
{
    /**
     * Available types of the object which can be add to the bean collection.
     *
     * @var array e.g. [ Foo::class, Bar::class ]
     */
    protected $allowedClasses;

    /**
     * Beanオブジェクトを保持する配列
     */
    protected $_beanCollection;

    /**
     * For a SELECT with a LIMIT clause, the number of rows that would be returned were there no LIMIT clause
     */
    private $_countNoLimt;

    /**
     * コンストラクタ
     *
     * @access    public
     */
    public function __construct()
    {
        $this->_beanCollection = [];
    }

    public function remove($index)
    {
        assert(0 <= $index);
        assert($index < $this->count());
        unset($this->_beanCollection[$index]);
    }

    /**
     * 保持するBeanオブジェクト配列の長さを返す
     *
     * @access    public
     * @return    int        array elements count
     */
    public function count()
    {
        return count($this->_beanCollection);
    }

    /**
     * 保持するBeanオブジェクト配列に、Beanオブジェクトを追加する
     *
     * @access    public
     *
     * @param     \grn\grn\bean\BeanAbstract $bean
     */
    public function appendBean(BeanAbstract $bean)
    {
        if ( ! $this->isValidElementType($bean)) {
            $message = get_class($this)
                       . ' only accepts elements of types ' . implode(',',
                    $this->allowedClasses) . '. ';
            throw new \InvalidArgumentException($message);
        }

        $this->_beanCollection[] = $bean;
    }

    /**
     * 保持するBeanオブジェクト配列から、指定要素のBeanオブジェクトを返す
     *
     * @access    public
     *
     * @param     int $index Number of elements
     *
     * @return    \grn\grn\bean\BeanAbstract
     */
    public function getBean($index)
    {
        return $this->_beanCollection[$index];
    }

    /**
     * Beanオブジェクトを数え上げるクラスを生成する
     *
     * @access    public
     * @return    \ArrayIterator
     */
    public function getIterator()
    {
        return new \ArrayIterator($this->_beanCollection);
    }

    /**
     * set of record count of no LIMIT clause
     * LIMIT句を無視したレコード件数をセットする
     *
     * @access    public
     *
     * @param     int $value record count
     */
    public function setCountNoLimit($value)
    {
        $this->_countNoLimt = $value;
    }

    /**
     * get of record count of no LIMIT clause
     * LIMIT句を無視したレコード件数を取得する
     *
     * @access    public
     * @return    int       record count
     */
    public function getCountNoLimit()
    {
        return $this->_countNoLimt;
    }

    /**
     * get difference between two collection
     * 2つのコレクションの差分をとる
     * 引数のコレクションに存在しない要素をコレクションとして返す
     *
     * @param   \grn\grn\collection\BeanCollectionAbstract $otherCollection
     *
     * @return  \grn\grn\collection\BeanCollectionAbstract
     * @throws  GrnException
     */
    public function getNotIn(BeanCollectionAbstract $otherCollection)
    {
        if ( ! ($otherCollection instanceof static)) {
            $e = new GrnException();
            throw $e;
        }
        $collectionType = get_class($otherCollection);
        $diffCollection = new $collectionType();

        foreach ($this as $selfObj) {
            foreach ($otherCollection as $otherObj) {
                if ($selfObj->equalRecord($otherObj)) {
                    continue 2;
                }
            }
            $diffCollection->appendBean($selfObj);
        }

        return $diffCollection;
    }

    /**
     * @param $element
     *
     * @return bool
     */
    protected function isValidElementType($element)
    {
        if ( ! is_array($this->allowedClasses)) {
            return true;
        }

        foreach ($this->allowedClasses as $allowed_type) {
            if ($element instanceof $allowed_type) {
                return true;
            }
        }

        return false;
    }
}
