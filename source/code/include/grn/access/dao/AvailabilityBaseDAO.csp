<?php

namespace grn\grn\access\dao;

use grn\grn\access\bean\Availability;

abstract class AvailabilityBaseDAO
{
    protected $table;
    protected $tableRelation;
    protected $dbConn;
    protected $targetColumn;
    protected $relationColumn;

    function __construct()
    {
        /** @var \CB_DatabaseConnection dbConn */
        $this->dbConn = cb_get_master_db();
    }

    /**
     * @return Availability[]
     */
    public function getAll()
    {
        $availability_list = [];
        $query
            = "SELECT * FROM {$this->table} ORDER BY {$this->targetColumn};";
        $result = $this->dbConn->query($query);
        while ($rawData = $this->dbConn->fetch_assoc($result)) {
            $availability = $this->convertArrayToBean($rawData);
            $availability_list[] = $availability;
        }
        $this->dbConn->free_result($result);

        return $availability_list;
    }

    /**
     * @param array $raw_data
     *
     * @return Availability
     */
    protected function convertArrayToBean(array $raw_data)
    {
        $availability = new Availability();
        $availability->setId($raw_data['_id']);
        $availability_setting = json_decode($raw_data['col_app'],
                true)['availability'] ?? [];
        $availability_setting = is_array($availability_setting)
            ? $availability_setting : [];
        $availability->setAppsAvailability($availability_setting);
        $availability->setCreationTime($raw_data['col_ctime']);
        $availability->setTarget($raw_data[$this->targetColumn]);

        return $availability;
    }

    /**
     * @param int|string $target_id
     *
     * @return Availability
     */
    public function getByTargetId($target_id)
    {
        $query = "SELECT * FROM {$this->table}";
        $query .= cb_queryf($this->dbConn,
            " WHERE " . $this->targetColumn . " = '@S'", $target_id);

        $result = $this->dbConn->query($query);
        $rawData = $this->dbConn->fetch_assoc($result);
        $this->dbConn->free_result($result);
        if (is_array($rawData)) {
            return $this->convertArrayToBean($rawData);
        }

        return new Availability();
    }

    /**
     * @param array $user_ids
     *
     * @return Availability[]
     */
    public function getByUserIds($user_ids)
    {
        $query
            = "SELECT r._id, r.col_app, u.col_user, r.col_ctime, r.{$this->targetColumn}"
              . " FROM {$this->table} AS r"
              . " LEFT JOIN {$this->tableRelation} AS u ON r.{$this->targetColumn} = u.{$this->relationColumn}";
        $query .= cb_queryf($this->dbConn,
            " WHERE u.col_user IN (@A) ORDER BY {$this->targetColumn};",
            $user_ids);

        $availability_list = [];
        $result = $this->dbConn->query($query);
        while ($rawData = $this->dbConn->fetch_assoc($result)) {
            $availability = $this->convertArrayToBean($rawData);
            $availability->setTarget($rawData['col_user']);
            if (array_key_exists($availability->getTarget(),
                $availability_list)
            ) {
                $availability_list[$availability->getTarget()][]
                    = $availability;
            } else {
                $availability_list[$availability->getTarget()]
                    = [$availability];
            }
        }
        $this->dbConn->free_result($result);

        return $availability_list;
    }

    public function insert(Availability $availability)
    {
        $query = "INSERT INTO " . $this->table . "(col_ctime, "
                 . $this->targetColumn . ", col_app)";
        $query .= cb_queryf($this->dbConn, "VALUES ( '@S', '@S', '@S');",
            $availability->getCreationTime(),
            $availability->getTarget(),
            json_encode($availability->getAppsAvailability())
        );
        $this->dbConn->query($query);

        return $this->dbConn->affected_rows();
    }

    /**
     * @param Availability[] $availabilities
     *
     * @return bool|int
     */
    public function insertTargets($availabilities)
    {
        if ( ! is_array($availabilities)) {
            assert('FALSE');
        }
        $affected_rows = 0;
        $query
            = "INSERT INTO {$this->table} (col_ctime, {$this->targetColumn}, col_app) VALUES ";
        $query_values = [];
        foreach ($availabilities as $availability) {
            $query_values[] = cb_queryf($this->dbConn, "('@S', '@S', '@S')",
                $availability->getCreationTime(),
                $availability->getTarget(),
                json_encode($availability->getAppsAvailability())
            );
        }
        if (count($query_values) > 0) {
            $query .= implode(",", $query_values);
            $this->dbConn->query($query);
            $affected_rows = $this->dbConn->affected_rows();
        }

        return $affected_rows;
    }

    /**
     * @param int $id
     *
     * @return bool|int
     */
    public function delete($id)
    {
        $query = "DELETE FROM " . $this->table . " WHERE ";
        $query .= cb_queryf($this->dbConn, " _id='@S';", $id);
        $this->dbConn->query($query);

        return $this->dbConn->affected_rows();
    }

    /**
     * @param int|string $target_id
     *
     * @return bool|int
     */
    public function deleteByTargetId($target_id)
    {
        return $this->deleteByTargetIds([$target_id]);
    }

    /**
     * @param array $target_ids
     *
     * @return bool|int
     */
    public function deleteByTargetIds($target_ids)
    {
        $query = cb_queryf($this->dbConn,
            "DELETE FROM {$this->table} WHERE {$this->targetColumn} IN(@A)",
            $target_ids);
        $this->dbConn->query($query);

        return $this->dbConn->affected_rows();
    }

    /**
     * @return bool|int
     */
    public function deleteAll()
    {
        $query = "DELETE FROM " . $this->table . ";";
        $this->dbConn->query($query);

        return $this->dbConn->affected_rows();
    }

    /**
     * @return int
     */
    public function getCount()
    {
        $query = "SELECT COUNT(_id) as total FROM {$this->table};";
        $result = $this->dbConn->query($query);
        $row = $this->dbConn->fetch_assoc($result);

        return $row['total'];
    }
}
