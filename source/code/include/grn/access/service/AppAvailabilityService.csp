<?php

namespace grn\grn\access\service;

use grn\grn\access\logic\AvailabilitySettingLogic;
use grn\grn\access\utility\AppAvailabilityUtil;
use grn\grn\access\bean\Availability;

class AppAvailabilityService
{
    public function __construct()
    {
    }

    /**
     * This function is used in Garoon and Uploader.
     * refs. http://wiki.dev.cybozu.co.jp/pages/viewpage.action?pageId=26624442#GTM-3406Support4.6.0forUploader-forestconvert.csp
     * Please test with Garoon and Uploader when modify specifications.
     *
     * @param bool $is_required_logging
     */
    public function initializeTheRemoteAccessRule($is_required_logging = true)
    {
        $setting_value = AvailabilitySettingLogic::ACCESS_TYPE_UNRESTRICTED;
        AvailabilitySettingLogic::setExternalAccessSetting($setting_value);

        if ($is_required_logging) {
            require_once('grn/logger.csp');
            $logger_manager = \CB_LoggerManager::getInstance();
            $logger = $logger_manager->getLogger('grn.common');
            $settings = [
                AvailabilitySettingLogic::ACCESS_TYPE_UNRESTRICTED   => AvailabilitySettingLogic::NOT_USE,
                AvailabilitySettingLogic::ACCESS_TYPE_REMOTE_SERVICE => AvailabilitySettingLogic::USE_RSM,
                AvailabilitySettingLogic::ACCESS_TYPE_INTERNAL       => AvailabilitySettingLogic::USE_INTERNAL_ADDRESS
            ];

            $setting_mode = AvailabilitySettingLogic::NOT_USE;
            if (in_array($setting_value, $settings)) {
                $setting_mode = $settings[intval($setting_value)];
            }
            $log_string = '[modify] external_use_permit(mode:' . $setting_mode
                          . ')';
            $logger->noticeEx('modify', 'external_use_permit', $log_string);
        }

        $target_types = [
            Availability::USER,
            Availability::GROUP,
            Availability::DYNAMIC_ROLE,
            Availability::STATIC_ROLE
        ];

        $availability_setting_logic = new AvailabilitySettingLogic();
        foreach ($target_types as $target_type) {
            $availabilities = $availability_setting_logic->getAll($target_type);
            if (count($availabilities) > 0) {
                foreach ($availabilities as $availability) {
                    $apps = $availability->getAppsAvailability();
                    if (null !== $apps) {
                        foreach ($apps as $app => $value) {
                            if ($value['internal']
                                == AppAvailabilityUtil::ACCESS_ALLOWED
                            ) {
                                $apps[$app]['external']
                                    = AppAvailabilityUtil::ACCESS_ALLOWED;
                            } else {
                                $apps[$app]['external']
                                    = AppAvailabilityUtil::ACCESS_DENIED;
                            }
                            $availability->setCreationTime(time());
                            $availability->setAppsAvailability(['availability' => $apps]);
                        }
                    }
                }

                $availability_setting_logic->deleteAll($target_type);
                $availability_setting_logic->insertTargets($availabilities,
                    $target_type);
            }
        }
    }
}
