<?php
require_once('grn/org_privilege.csp');
$logic = GRN_OrganizationPrivilegeLogic::getInstance();
$is_admin = $logic->isAdmin();

require_once('fw/i18n.csp');
$charset = @$G_INPUT['charset'];
if ( ! $charset) {
    global $G_config_common;
    $charset = $G_config_common->get('I18N', 'default_external_encoding');
}
$put_title = @$G_INPUT['title'];

require_once('fw/csv.csp');
$csv = new CB_CSVWriter($charset);
$uum =& $G_container_base->getInstance('uum');

require_once('grn/uum_util.csp');
$uum_util = GRN_UumUtil::getInstance();

$out = [];
$max = 0;

if ($is_admin) {
    $root_groups = $uum->getRootGroups();
} else {
    $root_groups = $logic->getRootGroupsWithAuthority($uum->getLoginUser());
}
foreach (array_keys($root_groups) as $root_id) {
    $root =& $root_groups[$root_id];
    $tmp = write_group_recursive($out, $root, $uum, $max);
    $max = $max < $tmp ? $tmp : $max;
}

$args = 3;
if ($put_title) {
    $line = [];
    $line[] = cb_msg('grn.common', 'organization_code');
    for ($i = 0; $i < $args; $i++) {
        $line[] = cb_msg('grn.common', 'user_loginname') . ($i + 1);
    }
    $line[] = cb_msg('grn.common', 'valist');

    $csv->writeLine($line);
}

foreach ($out as $line) {
    $csv->writeLine($line);
    $key = array_shift($line);
    $uum->execInspection('group', 'export_user',
        ['group' => $key, 'users' => implode(',', $line)]);
}

$csv->close();
/**
 * @param          $out
 * @param CB_Group $group
 * @param GRN_Uum  $uum
 * @param          $max
 *
 * @return int|void
 */
function write_group_recursive(& $out, & $group, &$uum, $max)
{
    $line = [];
    $users = $uum->getGroupUsers($group->getOID());
    $user_keys = array_keys($users);

    $line[] = $group->get('foreign_key');
    $max1 = $max < count($users) ? count($users) : $max;
    foreach ($user_keys as $user_key) {
        $line[] = $users[$user_key]->get('foreign_key');
    }
    $out[] = $line;

    $children = $uum->getChildGroups($group->getOID());
    if ($children !== false) {
        foreach (array_keys($children) as $cgid) {
            $child =& $children[$cgid];
            $max2 = write_group_recursive($out, $child, $uum, $max1);
            $max1 = $max1 < $max2 ? $max2 : $max1;
        }
    }

    return $max1;
}


