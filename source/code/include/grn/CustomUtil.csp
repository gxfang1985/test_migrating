<?php
//GTM-129 for server side customization

// directory where customized files are placed
define('CB_CUSTOMIZED_DIR', '/usr/local/garoon_custom');

require_once('fw/cydec.csp');

/*
 * Handling customization information of Garoon.com
 */

class GRN_Custom_Util
{
    private static $_instance = null;

    private function __construct()
    {
        $cydecutil = CB_CyDECUtil::getInstance();
        $customini = $cydecutil->getGaroonConfig('custom.ini');

        if (file_exists($customini)) {
            $this->_domain_id = $cydecutil->getDomainID();

            // incase of getDomainID was failed, it returns 'cb'
            if ($this->_domain_id !== 'cb') {
                // Set customized path at the top of include path
                $incpath = CB_CUSTOMIZED_DIR . "/" . $this->_domain_id
                           . "/code/include"
                           . PATH_SEPARATOR . cb_basedir() . "/code/include"
                           . PATH_SEPARATOR . CB_CUSTOMIZED_DIR . "/"
                           . $this->_domain_id . "/code/pear"
                           . PATH_SEPARATOR . cb_basedir() . "/code/pear"
                           . PATH_SEPARATOR . CB_CUSTOMIZED_DIR . "/"
                           . $this->_domain_id . "/code/smarty/libs"
                           . PATH_SEPARATOR . cb_basedir()
                           . "/code/smarty/libs";

                set_include_path($incpath);

                $this->_customized = true;
            }
        }

    }

    //customization is enabled
    private $_customized = false;

    //domain ID of forest
    //'cb' is the default value of CB_CyDECUtil::getDomainID()
    private $_domain_id = 'cb';

    /**
     * @return GRN_Custom_Util
     */
    public static function getInstance()
    {
        if (is_null(self::$_instance)) {
            self::$_instance = new GRN_Custom_Util();
        }

        return self::$_instance;
    }

    // It is working on the customized mode
    public function isCustomized()
    {
        return $this->_customized;
    }

    // get customized domain ID
    public function getDomainId()
    {
        return $this->_domain_id;
    }

    // when the customized file exists, include it
    public function loadCustomCsp($pagename)
    {
        // make a customized file name with full path
        $custompage = CB_CUSTOMIZED_DIR . "/" . $this->getDomainId()
                      . "/code/doc_root/" . $pagename;
        if (is_readable($custompage) === false) {
            return false;
        }

        $this->changeDir($pagename);
        // in case of the customized file exists, include customized file
        include $custompage;

        return true;
    }

    // when the customized resource exists, return the directory template string
    // otherwise return null
    public function getCustomResourceFile($type, $module)
    {
        if ($this->isCustomized() === true) {
            //confirm the target directory is existed on customized directory
            $chkdir = CB_CUSTOMIZED_DIR . "/" . $this->getDomainId()
                      . '/locale';
            if (file_exists($chkdir) === true) {
                return $chkdir . '/%s/' . $type . '/' . $module;;
            }
        }

        return null;
    }

    // when the customized template exists, return the serch path list of template file
    public function addCustomizedPageDir(&$dirlist)
    {
        if ($this->isCustomized() === true) {
            //customized templates take first priority
            $dirlist[0] = CB_CUSTOMIZED_DIR . "/" . $this->getDomainId()
                          . "/page";
            $dirlist[1] = cb_basedir() . '/page';
        }
    }

    // move to the directory of application's doc_root
    private function changeDir($pagename)
    {
        $page = cb_basedir() . "/code/doc_root/" . $pagename;
        $currentDir = substr($page, 0, strrpos($page, "/"));
        if (is_dir($currentDir) === false) {
            // Is not error
            return;
        }
        chdir($currentDir);
    }
}
