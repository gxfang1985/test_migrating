<?php

namespace grn\grn;

class UnsupportedWarning
{
    private $isShow = true;
    private $showInFirstTimes = true;
    private $result = [];

    public function __construct()
    {
        if ($this->showInFirstTimes) {
            $this->isShow = false;
            $session_manager = \CB_SessionManager::getInstance();
            $session
                = $session_manager->getSession('unsupported_warning');
            if ( ! $session->get("has_showed_warning_first_times")) {
                $this->isShow = true;
                $session->set('has_showed_warning_first_times', 1);
            }
        }

        $this->setDefaultResult();
    }

    /**
     * Set default result
     */
    private function setDefaultResult()
    {
        $this->result = [
            'is_show'     => $this->isShow,
            'invalid_ie'  => false,
            'invalid_tls' => false
        ];
    }

    private function getTLS_Header()
    {
        return [
            'TLS_protocal' => cb_at($_SERVER, 'HTTP_X_CYBOZU_TLS_PROTOCOL'),
            'TLS_cipher'   => cb_at($_SERVER, 'HTTP_X_CYBOZU_TLS_CIPHER')
        ];
    }

    /**
     * @return $this
     */
    public function checkIE_Version()
    {
        $this->result['invalid_ie'] = true;

        return $this;
    }

    /**
     * @return $this
     */
    public function checkTLS()
    {
        $headers = $this->getTLS_Header();
        $invalid_TLS = strtolower($headers['TLS_protocal']) === 'tlsv1';
        $invalid_DES = strtolower($headers['TLS_cipher']) === 'des-cbc3-sha';
        if ($invalid_TLS || $invalid_DES) {
            $this->result['invalid_tls'] = true;
        }

        return $this;
    }

    /**
     * Define result
     */
    public function run()
    {
        define('UNSUPPORTED_WARNING_PARAMS', json_encode($this->result));
    }
}
