<?php

use grn\grn\access\service\AppAccess;
use grn\grn\access\utility\AppAvailabilityUtil;

/**
 * 通知サービス
 *
 * @author  IKEDA, Atsushi 2004/10
 * @version 1.0
 * @package grn.notification_service
 */
require_once('fw/persistent.csp');
require_once('fw/module.csp');
require_once('fw/uum_core.csp');
require_once('grn/error_code.csp');
require_once('grn/table_util.csp');

//////////////////////////////////////////////////////////////////////////////
// 文字列定義

// 永続化クラス名
define("GRN_NOTIFICATION_NOTIFY_TABLE", "grn_notification_notify");
define("GRN_NOTIFICATION_HISTORY_TABLE", "grn_notification_history");

define("GRN_NOTIFICATION_NOTIFY_TO_ME_TABLE", "grn_notification_to_me");
define("GRN_NOTIFICATION_TO_ME_HISTORY_TABLE",
    "grn_notification_to_me_history");

define("GRN_NOTIFICATION_ACTION_GENERAL_ID", "general");
define("GRN_NOTIFICATION_ACTION_GENERAL_NAME", cb_msg('grn.notification',
    'notification_action_general'));        //garoon2/2_6/source  リビジョン626 で追加　文言「アプリ全体」から置き換えているが、リソースには追加されていない

define("GRN_NOTIFICATION_ACTION_CREATE_ID", "create");
define("GRN_NOTIFICATION_ACTION_UPDATE_ID", "update");
define("GRN_NOTIFICATION_ACTION_DELETE_ID", "delete");
define("GRN_NOTIFICATION_ACTION_FIXED_ID", "fixed");
define("GRN_NOTIFICATION_ACTION_STATUS_RESPONSE_ID", "response");
define("GRN_NOTIFICATION_ACTION_FACILITY_APPROVED_ID", "approved");
define("GRN_NOTIFICATION_ACTION_FACILITY_REJECTED_ID", "rejected");
define("GRN_NOTIFICATION_ACTION_FACILITY_REQUESTED_ID", "requested");

define("GRN_NOTIFICATION_SUBJECT_MAXLEN", 128);
define("GRN_NOTIFICATION_ABSTRACT_MAXLEN", 128);
define("GRN_NOTIFICATION_SENDER_MAXLEN", 128);
define("GRN_NOTIFICATION_STATUS_MAXLEN", 128);
define("GRN_NOTIFICATION_URL_MAXLEN", 255);
define("GRN_NOTIFICATION_SPACE_MAXLEN", 255);

// GRN_Notification_Dataで使用する通知データのキー文字列
define("GRN_NOTIFICATION_DATA_KEY_MODULE_ID", "module_id");
define("GRN_NOTIFICATION_DATA_KEY_ACTION_ID", "action_id");
define("GRN_NOTIFICATION_DATA_KEY_UNIQUE_ID", "unique_id");
define("GRN_NOTIFICATION_DATA_KEY_ORG_DATA", "org_data");
define("GRN_NOTIFICATION_DATA_KEY_SUBJECT", "subject");
define("GRN_NOTIFICATION_DATA_KEY_SUBJECT_FRONT", "subject_f");
define("GRN_NOTIFICATION_DATA_KEY_SUBJECT_BACK", "subject_b");
define("GRN_NOTIFICATION_DATA_KEY_ABSTRACT", "abstract");
define("GRN_NOTIFICATION_DATA_KEY_ABSTRACT_FRONT", "abstract_f");
define("GRN_NOTIFICATION_DATA_KEY_ABSTRACT_BACK", "abstract_b");
define("GRN_NOTIFICATION_DATA_KEY_SENDER_NAME", "sender_name");
define("GRN_NOTIFICATION_DATA_KEY_SENDER_ID", "sender_id");
define("GRN_NOTIFICATION_DATA_KEY_SENDER_URL", "sender_url");
define("GRN_NOTIFICATION_DATA_KEY_SUBJECT_URL", "subject_url");
define("GRN_NOTIFICATION_DATA_KEY_SUBJECT_ICON", "subject_icon");
define("GRN_NOTIFICATION_DATA_KEY_ABSTRACT_URL", "abstract_url");
define("GRN_NOTIFICATION_DATA_KEY_ABSTRACT_ICON", "abstract_icon");
define("GRN_NOTIFICATION_DATA_KEY_GROUP_NAME", "group_name");
define("GRN_NOTIFICATION_DATA_KEY_TIMESTAMP", "timestamp");
define("GRN_NOTIFICATION_DATA_KEY_STATUS", "status");
define('GRN_NOTIFICATION_DATA_KEY_READ', "read");
define("GRN_NOTIFICATION_DATA_KEY_POPUP", "popup");
define("GRN_NOTIFICATION_DATA_KEY_ATTACHED", "attached");
define("GRN_NOTIFICATION_DATA_KEY_AUTO_CONFIRM", "auto_confirm");
define("GRN_NOTIFICATION_DATA_KEY_CONFIRM_REQUIRED", "confirm_required");
define("GRN_NOTIFICATION_DATA_KEY_SUB_MODULE_ID", "sub_module_id");
define("GRN_NOTIFICATION_DATA_KEY_SPACE_ID", "space_id");
define("GRN_NOTIFICATION_DATA_KEY_SPACE_NAME", "space_name");
define("GRN_NOTIFICATION_DATA_KEY_EVENT_START_TS", "event_start_ts");

define("GRN_NOTIFICATION_DATA_STATUS_CONFIRM", "confirmed");
define("GRN_NOTIFICATION_DATA_STATUS_UNREAD", "unread");
define("GRN_NOTIFICATION_DATA_STATUS_UPDATE", "update");
define("GRN_NOTIFICATION_DATA_STATUS_READ", "read");

// デフォルト値
define("GRN_NOTIFICATION_DEFAULT_SYSTEM_SAVEDAYS", 30);
define("GRN_NOTIFICATION_DEFAULT_PERSONAL_SAVEDAYS", 30);
define("GRN_NOTIFICATION_DEFAULT_SUB_MODULE_ID", '');
define('GRN_NOTIFICATION_WHATSNEW_DATA_LIMIT', 100);
define('GRN_NOTIFICATION_WHATSNEW_LIMIT_OVER_DISPLAY',
    (GRN_NOTIFICATION_WHATSNEW_DATA_LIMIT - 1));

// タイプ
define("GRN_NOTIFICATION_TYPE_NOTIFY", "notify");
define("GRN_NOTIFICATION_TYPE_HISTORY", "history");
define("GRN_NOTIFICATION_TYPE_WHATSNEW", "whatsnew");

define("GRN_NOTIFICATION_MERGED_TABLE_AMOUNT", 1);

/**
 * @param array $notify_sections
 * @param int   $uid
 *
 * @return null|string
 */
function _getNotifyConnectionNameOfIdInRanges(array $notify_sections, int $uid)
{
    foreach ($notify_sections as $key => $connection) {
        $match = preg_match("/connection[0-9]+\-[0-9]*\z/", $key);

        if ($match === 0 || $match === false) {
            continue;
        }

        $between = substr($key, strlen('connection'));
        list($begin, $end) = explode('-', $between);

        if ( ! empty($end)) {
            if ($begin <= $uid && $uid <= $end) {
                return $connection;
            }
        } else {
            if ($begin <= $uid) {
                return $connection;
            }
        }
    }

    return null;
}

/**
 * @return CB_DatabaseConnection[]
 */
function grn_notification_get_connections()
{
    global $G_config_grn;
    global $G_container_base;

    $connections = [];

    $notify_section = $G_config_grn->getSection('Notification');
    if ($notify_section === false) {
        $connections['dbconn'] = $G_container_base->getInstance('dbconn');

        return $connections;
    }

    if (array_key_exists('connection', $notify_section)) {
        $connections[$notify_section['connection']]
            = $G_container_base->getInstance($notify_section['connection']);

        return $connections;
    }

    $is_dbconn_required_implicitly = false;
    foreach ($notify_section as $key => $val) {
        $match = preg_match("/connection[0-9]+\-[0-9]*\z/", $key);

        if ($match === 0 || $match === false) {
            continue;
        }

        $connections[$val] = $G_container_base->getInstance($val);

        $between = substr($key, strlen('connection'));
        list($begin, $end) = explode('-', $between);

        $sections = $notify_section;
        unset($sections[$key]);
        if ( ! $is_dbconn_required_implicitly && $begin != 1) {
            $left = $begin - 1;
            $is_dbconn_required_implicitly
                = is_null(_getNotifyConnectionNameOfIdInRanges($sections,
                $left));
        }

        if ( ! $is_dbconn_required_implicitly && ! empty($end)) {
            $right = $end + 1;
            $is_dbconn_required_implicitly
                = is_null(_getNotifyConnectionNameOfIdInRanges($sections,
                $right));
        }
    }

    if ($is_dbconn_required_implicitly) {
        $connections['dbconn'] = $G_container_base->getInstance('dbconn');
    }

    return $connections;
}

/**
 * @param int $uid
 *
 * @return CB_DatabaseConnection
 */
function grn_notification_get_connection($uid = null)
{
    global $G_container_base;
    if (is_null($uid)) {
        $dbconn = $G_container_base->getInstance('dbconn');

        return $dbconn;
    }

    global $G_config_grn;
    $connection_name = false;
    $connections = $G_config_grn->getSection('Notification');

    if ($connections === false) {
        $dbconn = $G_container_base->getInstance('dbconn');

        return $dbconn;
    }

    if (array_key_exists('connection', $connections)) {
        $connection_name = $connections['connection'];
    } else {
        foreach ($connections as $key => $connection) {
            // ex)connection1-1000 or connection1-
            $match = preg_match("/connection[0-9]+\-[0-9]*\z/", $key);

            if ($match === 0 || $match === false) {
                continue;
            }

            $between = substr($key, strlen('connection'));
            list($begin, $end) = explode('-', $between);

            if ( ! empty($end)) {
                if ($begin <= $uid && $uid <= $end) {
                    $connection_name = $connection;
                    break;
                }
            } else {
                if ($begin <= $uid) {
                    $connection_name = $connection;
                    break;
                }
            }
        }
    }

    if ($connection_name === false) {
        $connection_name = 'dbconn';
    }

    $dbconn = $G_container_base->getInstance($connection_name);

    return $dbconn;
}

/**
 * @param string|null $uid
 *
 * @return CB_TableManager
 */
function grn_notification_get_table_manager($uid = null)
{
    global $G_container_base;
    if (is_null($uid)) {
        $table_manager = $G_container_base->getInstance('table_manager');

        return $table_manager;
    }

    global $G_config_grn;
    $table_manager_name = false;
    $table_managers = $G_config_grn->getSection('Notification');

    if ($table_managers === false) {
        $table_manager = $G_container_base->getInstance('table_manager');

        return $table_manager;
    }

    if (array_key_exists('table_manager', $table_managers)) {
        $table_manager_name = $table_managers['table_manager'];
    } else {
        foreach ($table_managers as $key => $table_manager) {
            // ex)table_manager1-1000 or table_manager1-
            $match = preg_match("/table_manager[0-9]+\-[0-9]*\z/", $key);

            if ($match === 0 || $match === false) {
                continue;
            }

            $between = substr($key, strlen('table_manager'));
            list($begin, $end) = explode('-', $between);

            if ( ! empty($end)) {
                if ($begin <= $uid && $uid <= $end) {
                    $table_manager_name = $table_manager;
                    break;
                }
            } else {
                if ($begin <= $uid) {
                    $table_manager_name = $table_manager;
                    break;
                }
            }
        }
    }

    if ($table_manager_name === false) {
        $table_manager_name = 'table_manager';
    }

    $table_manager = $G_container_base->getInstance($table_manager_name);

    return $table_manager;
}

/**
 * 通知データ永続化クラス
 *
 * @author  IKEDA, Atsushi 2004/10
 * @version 1.0
 * @package grn.notification
 */
class GRN_Notification_Notify extends CB_PersistentBase
{
    function __construct(& $row)
    {
        parent::__construct($row);
    }

    /**
     * プロパティ
     */
    var $col_user
        = [
            'type'    => 'int',
            'length'  => 20,
            'notnull' => true
        ];  // ユーザーリレーション
    var $col_module_id
        = [
            'type'    => 'char',
            'length'  => 64,
            'notnull' => true
        ]; // モジュールID
    var $col_action_id
        = [
            'type'    => 'char',
            'length'  => 64,
            'notnull' => true
        ]; // アプリのアクションID
    var $col_unique_id
        = [
            'type'    => 'char',
            'length'  => 64,
            'notnull' => true
        ]; // 一意なID
    var $col_org_data
        = [
            'type'   => 'char',
            'length' => 65535
        ];               // 任意データ(serialize)

    var $col_subject
        = [
            'type'   => 'char',
            'length' => GRN_NOTIFICATION_SUBJECT_MAXLEN
        ];   // 標題
    var $col_subject_f
        = [
            'type'   => 'char',
            'length' => GRN_NOTIFICATION_SUBJECT_MAXLEN
        ];   // 標題サブ（前）
    var $col_subject_b
        = [
            'type'   => 'char',
            'length' => GRN_NOTIFICATION_SUBJECT_MAXLEN
        ];   // 標題サブ（後）
    var $col_abstract
        = [
            'type'   => 'char',
            'length' => GRN_NOTIFICATION_ABSTRACT_MAXLEN
        ];  // 内容
    var $col_abstract_f
        = [
            'type'   => 'char',
            'length' => GRN_NOTIFICATION_ABSTRACT_MAXLEN
        ];  // 内容サブ（前）
    var $col_abstract_b
        = [
            'type'   => 'char',
            'length' => GRN_NOTIFICATION_ABSTRACT_MAXLEN
        ];  // 内容サブ（後）
    var $col_sender_name
        = [
            'type'   => 'char',
            'length' => GRN_NOTIFICATION_SENDER_MAXLEN
        ];    // 名前
    var $col_sender_id
        = [
            'type'   => 'char',
            'length' => GRN_NOTIFICATION_SENDER_MAXLEN
        ];    // ユーザーID
    var $col_sender_url
        = [
            'type'   => 'char',
            'length' => GRN_NOTIFICATION_URL_MAXLEN
        ];       // 名前URL
    var $col_group_name
        = [
            'type'   => 'char',
            'length' => GRN_NOTIFICATION_SENDER_MAXLEN
        ];    // 組織名（拡張用）
    var $col_subject_url
        = [
            'type'   => 'char',
            'length' => GRN_NOTIFICATION_URL_MAXLEN
        ];       // 標題URL
    var $col_subject_icon
        = [
            'type'   => 'char',
            'length' => GRN_NOTIFICATION_SUBJECT_MAXLEN
        ];   // 標題アイコン
    var $col_abstract_url
        = [
            'type'   => 'char',
            'length' => GRN_NOTIFICATION_URL_MAXLEN
        ];       // 内容URL
    var $col_abstract_icon
        = [
            'type'   => 'char',
            'length' => GRN_NOTIFICATION_ABSTRACT_MAXLEN
        ];  // 内容アイコン
    var $col_timestamp
        = [
            'type'    => 'timestamp',
            'notnull' => true
        ];                        // 通知日時
    var $col_status
        = [
            'type'   => 'char',
            'length' => GRN_NOTIFICATION_STATUS_MAXLEN
        ];    // 確認状況('read'/'unread'/'update')
    var $col_read = ['type' => 'int'];

    var $col_attached = ['type' => 'int'];                                   // 添付ファイルフラグ
    var $col_popup = ['type' => 'int'];                                   // ポップアップ表示フラグ
    var $col_auto_confirm = ['type' => 'int'];                                   // 開くと同時に確認済みとするフラグ（外部システムで使用）
    var $col_confirm_required = ['type' => 'int'];                                   // 確認処理が必要(チェックして既読が不可)

    /**
     * インデックス
     */
    var $idx_user_module_unique_id
        = [
            'cols'   => [
                'user',
                'module_id',
                'unique_id'
            ],
            'unique' => true
        ];
    var $idx_user_module_ts = ['cols' => ['user', 'module_id', 'timestamp']];
    var $idx_user_module_read_ts_n
        = [
            'cols' => [
                'user',
                'module_id',
                'read',
                'timestamp',
                null
            ]
        ];

    var $idx_user_ts_n = ['cols' => ['user', 'timestamp', null]];
    var $idx_user_read_ts_n = ['cols' => ['user', 'read', 'timestamp', null]];

    var $idx_ts = ['cols' => ['timestamp']];

    var $idx_unique_id_module_user
        = [
            'cols'   => [
                'unique_id',
                'module_id',
                'user'
            ],
            'unique' => true
        ];
}

//////////////////////////////////////////////////////////////////////////////

/**
 * 通知履歴データ永続化クラス
 *
 * @author  IKEDA, Atsushi 2004/10
 * @version 1.0
 * @package grn.notification
 */
class GRN_Notification_History extends CB_PersistentBase
{
    function __construct(& $row)
    {
        parent::__construct($row);
    }

    /**
     * プロパティ
     */
    var $col_user
        = [
            'type'    => 'int',
            'length'  => 20,
            'notnull' => true
        ];  // ユーザーリレーション
    var $col_module_id
        = [
            'type'    => 'char',
            'length'  => 64,
            'notnull' => true
        ]; // モジュールID
    var $col_action_id
        = [
            'type'    => 'char',
            'length'  => 64,
            'notnull' => true
        ]; // アプリのアクションID
    var $col_unique_id
        = [
            'type'    => 'char',
            'length'  => 64,
            'notnull' => true
        ]; // 一意なID
    var $col_org_data
        = [
            'type'   => 'char',
            'length' => 65535
        ];               // 任意データ(serialize)

    var $col_subject
        = [
            'type'   => 'char',
            'length' => GRN_NOTIFICATION_SUBJECT_MAXLEN
        ];   // 標題
    var $col_subject_f
        = [
            'type'   => 'char',
            'length' => GRN_NOTIFICATION_SUBJECT_MAXLEN
        ];   // 標題サブ（前）
    var $col_subject_b
        = [
            'type'   => 'char',
            'length' => GRN_NOTIFICATION_SUBJECT_MAXLEN
        ];   // 標題サブ（後）
    var $col_abstract
        = [
            'type'   => 'char',
            'length' => GRN_NOTIFICATION_ABSTRACT_MAXLEN
        ];  // 内容
    var $col_abstract_f
        = [
            'type'   => 'char',
            'length' => GRN_NOTIFICATION_ABSTRACT_MAXLEN
        ];  // 内容サブ（前）
    var $col_abstract_b
        = [
            'type'   => 'char',
            'length' => GRN_NOTIFICATION_ABSTRACT_MAXLEN
        ];  // 内容サブ（後）
    var $col_sender_name
        = [
            'type'   => 'char',
            'length' => GRN_NOTIFICATION_SENDER_MAXLEN
        ];    // 名前
    var $col_sender_id
        = [
            'type'   => 'char',
            'length' => GRN_NOTIFICATION_SENDER_MAXLEN
        ];    // ユーザーID
    var $col_sender_url
        = [
            'type'   => 'char',
            'length' => GRN_NOTIFICATION_URL_MAXLEN
        ];       // 名前URL
    var $col_subject_url
        = [
            'type'   => 'char',
            'length' => GRN_NOTIFICATION_URL_MAXLEN
        ];       // 標題URL
    var $col_subject_icon
        = [
            'type'   => 'char',
            'length' => GRN_NOTIFICATION_SUBJECT_MAXLEN
        ];   // 標題アイコン
    var $col_abstract_url
        = [
            'type'   => 'char',
            'length' => GRN_NOTIFICATION_URL_MAXLEN
        ];       // 内容URL
    var $col_abstract_icon
        = [
            'type'   => 'char',
            'length' => GRN_NOTIFICATION_ABSTRACT_MAXLEN
        ];  // 内容アイコン
    var $col_group_name
        = [
            'type'   => 'char',
            'length' => GRN_NOTIFICATION_SENDER_MAXLEN
        ];    // 組織名（拡張用）
    var $col_timestamp
        = [
            'type'    => 'timestamp',
            'notnull' => true
        ];                        // 通知日時
    var $col_status
        = [
            'type'   => 'char',
            'length' => GRN_NOTIFICATION_STATUS_MAXLEN
        ];    // 確認状況('read'/'unread'/'update')
    var $col_read = ['type' => 'int'];

    var $col_attached = ['type' => 'int'];                                   // 添付ファイルフラグ
    var $col_popup = ['type' => 'int'];                                   // ポップアップ表示フラグ

    /**
     * インデックス
     */
    var $idx_user_module_unique_id
        = [
            'cols'   => [
                'user',
                'module_id',
                'unique_id'
            ],
            'unique' => true
        ];
    var $idx_user_module_ts = ['cols' => ['user', 'module_id', 'timestamp']];

    var $idx_user_ts = ['cols' => ['user', 'timestamp']];

    var $idx_ts = ['cols' => ['timestamp']];
    var $idx_unique_id = ['cols' => ['unique_id']];

    var $idx_unique_id_module_user
        = [
            'cols'   => [
                'unique_id',
                'module_id',
                'user'
            ],
            'unique' => true
        ];
}

//////////////////////////////////////////////////////////////////////////////

/**
 * 通知データプロパティクラス
 *
 * @author  IKEDA, Atsushi 2004/10
 * @version 1.0
 * @package grn.notification
 *
 * 通知データ、通知履歴データのプロパティを保持するクラス。
 * 通知サービスおよび通知アプリケーションでの値の受け渡しのために使用する。
 * 特殊文字のHTMLエンティティへの変換等（htmlspecialchars）は行わない。単純に格納するだけである。
 * アイコン名に拡張子は含めてはならない（'.gif'固定）。
 * Viewへ渡されるため、データオブジェクトを格納してはならない。
 *
 *  +----------------------+-------------------+-------------------------------------------+---------------+----+
 *  |内容                  |キー               |データ                                     |データ型       |必須|
 *  +======================+===================+===========================================+===============+====+
 *  |モジュール名          |"module_id"        |モジュールID                               |string         |○  |
 *  |                      |"sub_module_id"    |サブモジュールID                           |string         |○  |
 *  +----------------------+-------------------+-------------------------------------------+---------------+----+
 *  |通知元データ情報      |"unique_id"        |モジュールが定義する一意となるID           |string         |○  |
 *  |                      |"org_data"         |モジュールが自由に使用できるデータ         |array          |    |
 *  +----------------------+-------------------+-------------------------------------------+---------------+----+
 *  |標題データ            |"subject"          |表示する文字列                             |string         |    |
 *  |                      |"subject_f"        |表示するサブ文字列・前(リンクされない)     |string         |    |
 *  |                      |"subject_b"        |表示するサブ文字列・後(リンクされない)     |string         |    |
 *  |                      |"subject_url"      |URL                                        |string         |    |
 *  |                      |"subject_icon"     |アイコン名（またはURL）                    |string         |    |
 *  +----------------------+-------------------+-------------------------------------------+---------------+----+
 *  |内容データ            |"abstract"         |表示する文字列                             |string         |    |
 *  |                      |"abstract_f"       |表示するサブ文字列・前(リンクされない)     |string         |    |
 *  |                      |"abstract_b"       |表示するサブ文字列・後(リンクされない)     |string         |    |
 *  |                      |"abstract_url"     |URL                                        |string         |    |
 *  |                      |"abstract_icon"    |アイコン名（またはURL）                    |string         |    |
 *  +----------------------+-------------------+-------------------------------------------+---------------+----+
 *  |送信者データ          |"sender_name"      |表示する文字列                             |string         |    |
 *  |                      |"sender_id"        |ユーザーID                                 |string         |    |
 *  |                      |"sender_url"       |URL                                        |string         |    |
 *  |                      |"group_name"       |組織名                                     |string         |    |
 *  +----------------------+-------------------+-------------------------------------------+---------------+----+
 *  |日時データ            |"timestamp"        |表示するタイムスタンプ                     |CB_TimeStamp   |○  |
 *  +----------------------+-------------------+-------------------------------------------+---------------+----+
 *  |状態データ            |"status"           |確認状況('read'/'unread'/'update')         |string         |    |
 *  |                      |                   |アプリごとに定義しても良い                 |               |    |
 *  +----------------------+-------------------+-------------------------------------------+---------------+----+
 *  |別ウィンドウで開く    |"popup"            |別ウィンドウで表示するフラグ               |boolean        |    |
 *  +----------------------+-------------------+-------------------------------------------+---------------+----+
 *  |添付ファイルデータ    |"attached"         |添付ファイルフラグ                         |boolean        |    |
 *  +----------------------+-------------------+-------------------------------------------+---------------+----+
 *  |自動確認処理          |"auto_confirm"     |開くと同時に確認済みとする(外部通知で使用) |boolean        |    |
 *  +----------------------+-------------------+-------------------------------------------+---------------+----+
 *  |確認必須              |"confirm_required" |確認処理が必要(チェックして既読が不可)     |boolean        |    |
 *  +----------------------+-------------------+-------------------------------------------+---------------+----+
 *  |スペース関係          |"space_id"         |スペースID                                 |int            |    |
 *  |                      |"space_name"       |最終更新時のスペース標準名                 |string         |    |
 *  +----------------------+-------------------+-------------------------------------------+---------------+----+
 *  |イベント開始時        |"event_start_ts"   |予定の開始時間のタイムスタンプ             |CB_TimeStamp   |    |
 *  +----------------------+-------------------+-------------------------------------------+---------------+----+
 *
 */
class GRN_Notification_Data
{
    /**
     * コンストラクタ
     */
    function __construct()
    {
        $this->initData();
        $this->setId(null);
        $this->setUserId(null);
    }

    /**
     * @access private
     */
    var $_notify_data = null;                         // 通知データ

    private $_id;

    private $userId;

    private $isToMe = false;

    /**
     * 通知データをクリアする
     *
     * @access private
     * @return mixed    通知データ
     */
    function initData()
    {
        $this->_notify_data = [];
        // Some old applications do not use actionID in notification, so initialize the default value here
        $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_ACTION_ID]
            = GRN_NOTIFICATION_ACTION_GENERAL_ID;
        $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_SUB_MODULE_ID]
            = GRN_NOTIFICATION_DEFAULT_SUB_MODULE_ID;
    }

    /**
     * 通知データを返す
     *
     * @access private
     * @return mixed    通知データ
     */
    function &getData()
    {
        return $this->_notify_data;
    }

    /**
     * @return array
     */
    function export()
    {
        $subject_data = $this->getSubjectData();
        $abstract_data = $this->getAbstractData();
        $sender_data = $this->getSenderData();
        $timestamp = $this->getTimeStampData();

        return [
            'col_module_id'        => $this->getModuleId(),
            'col_sub_module_id'    => $this->getSubModuleId(),
            'col_action_id'        => $this->getActionId(),
            'col_unique_id'        => $this->getUniqueId(),
            'col_org_data'         => $this->getOrgDataString(),
            'col_subject'          => $subject_data[0],
            'col_subject_f'        => $subject_data['front'],
            'col_subject_b'        => $subject_data['back'],
            'col_subject_url'      => $subject_data['url'],
            'col_subject_icon'     => $subject_data['icon'],
            'col_abstract'         => $abstract_data[0],
            'col_abstract_f'       => $abstract_data['front'],
            'col_abstract_b'       => $abstract_data['back'],
            'col_abstract_url'     => $abstract_data['url'],
            'col_abstract_icon'    => $abstract_data['icon'],
            'col_sender_name'      => $sender_data['name'],
            'col_sender_id'        => $sender_data['id'],
            'col_sender_url'       => $sender_data['url'],
            'col_group_name'       => $sender_data['group_name'],
            'col_timestamp'        => $timestamp->unix_ts,
            'col_status'           => $this->getStatusData(),
            'col_read'             => $this->getReadFlag(),
            'col_popup'            => $this->getPopupFlag(),
            'col_attached'         => $this->getAttachedFlag(),
            'col_auto_confirm'     => $this->getAutoConfirmFlag(),
            'col_confirm_required' => $this->getConfirmRequiredFlag(),
            'col_space_id'         => $this->getSpaceId(),
            'col_space_name'       => $this->getSpaceName(),
            'col_event_start_ts'   => $this->getEventStartTs()
        ];
    }

    /**
     * @param $data
     */
    function import($data)
    {
        $this->setModuleId($data['col_module_id']);
        $this->setSubModuleId($data['col_sub_module_id']);
        $this->setUniqueId($data['col_unique_id']);
        $this->setActionId($data['col_action_id']);
        $this->setOrgDataString($data['col_org_data']);

        $this->setSubjectData($data['col_subject'], $data['col_subject_f'],
            $data['col_subject_b'], $data['col_subject_url']);
        $this->setAbstractData($data['col_abstract'], $data['col_subject_f'],
            $data['col_subject_b'], $data['col_subject_url']);
        $this->setSenderData($data['col_sender_name'], $data['col_sender_id'],
            $data['col_sender_url'], $data['col_group_name']);
        $timestamp = new CB_TimeStamp();
        $timestamp->unix_ts = $data['col_timestamp'];
        $this->setTimeStampData($timestamp);
        $this->setStatusData($data['col_status']);
        $this->setReadFlag($data['col_read']);
        $this->setPopupFlag($data['col_popup']);
        $this->setAttachedFlag($data['col_attached']);
        $this->setAutoConfirmFlag($data['col_auto_confirm']);
        $this->setConfirmRequiredFlag($data['col_confirm_required']);
        $this->setSpaceId($data['col_space_id']);
        $this->setSpaceName($data['col_space_name']);
        $this->setEventStartTs($data['col_event_start_ts']);
    }

    /**
     * @param $data
     *
     * @return bool
     */
    function isValid($data)
    {
        $toInspection = array_keys($data);
        $neededKeys = [
            'col_module_id',
            'col_sub_module_id',
            'col_action_id',
            'col_unique_id',
            'col_org_data',
            'col_subject',
            'col_subject_f',
            'col_subject_b',
            'col_subject_url',
            'col_subject_icon',
            'col_abstract',
            'col_abstract_f',
            'col_abstract_b',
            'col_abstract_url',
            'col_abstract_icon',
            'col_sender_name',
            'col_sender_id',
            'col_sender_url',
            'col_group_name',
            'col_timestamp',
            'col_status',
            'col_read',
            'col_popup',
            'col_attached',
            'col_auto_confirm',
            'col_confirm_required',
            'col_space_id',
            'col_space_name',
            'col_event_start_ts'
        ];

        foreach ($neededKeys as $key) {
            if (in_array($key, $toInspection) === false) {
                return false;
            }
        }

        return true;
    }

    /**
     * operate sequence id
     *
     * @param string $id
     */
    public function setId($id)
    {
        $this->_id = $id;
    }

    public function getId()
    {
        return $this->_id;
    }

    /**
     * operate user id in notification data
     *
     * @param string $userId
     */
    public function setUserId($userId)
    {
        $this->userId = $userId;
    }

    public function getUserId()
    {
        return $this->userId;
    }

    /**
     * 通知データにモジュールデータを追加
     *
     * @param   string $module_id モジュールID
     */
    function setModuleId($module_id)
    {
        $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_MODULE_ID] = $module_id;
    }

    /**
     * 通知データからモジュールデータを取得
     *
     * @return string|null
     */
    function getModuleId()
    {
        if (isset($this->_notify_data[GRN_NOTIFICATION_DATA_KEY_MODULE_ID])) {
            return $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_MODULE_ID];
        }

        return null;
    }

    /**
     * 通知データにサブモジュールデータを追加
     *
     * @param   string $sub_module_id サブモジュールID
     */
    function setSubModuleId($sub_module_id)
    {
        $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_SUB_MODULE_ID]
            = $sub_module_id;
    }

    /**
     * 通知データからサブモジュールデータを取得
     *
     * @return string|null
     */
    function getSubModuleId()
    {
        if (isset($this->_notify_data[GRN_NOTIFICATION_DATA_KEY_SUB_MODULE_ID])) {
            return $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_SUB_MODULE_ID];
        }

        return null;
    }

    /**
     * 通知データにアクションデータを追加
     *
     * @param   string $action_id モジュールID
     */
    function setActionId($action_id)
    {
        $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_ACTION_ID] = $action_id;
    }

    /**
     * 通知データからアクションデータを取得
     *
     * @return string|null
     */
    function getActionId()
    {
        if (isset($this->_notify_data[GRN_NOTIFICATION_DATA_KEY_ACTION_ID])) {
            return $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_ACTION_ID];
        }

        return null;
    }

    /**
     * 通知データにユニークIDを追加
     *
     * @param   string $unique_id モジュールが定義する一意となるID
     */
    function setUniqueId($unique_id)
    {
        $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_UNIQUE_ID] = $unique_id;
    }

    /**
     * 通知データからユニークIDを取得
     *
     * @return string|null
     */
    function getUniqueId()
    {
        if (isset($this->_notify_data[GRN_NOTIFICATION_DATA_KEY_UNIQUE_ID])) {
            return $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_UNIQUE_ID];
        }

        return null;
    }

    /**
     * モジュールが自由に使用できるデータを追加
     * serializeして格納される
     *
     * @param   array       org_data        通知元データ情報
     */
    function setOrgData($org_data)
    {
        if ( ! is_array($org_data)) {
            // データ不正
            assert('FALSE');

            return;
        }

        $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_ORG_DATA]
            = serialize($org_data);
    }

    /**
     * モジュールが自由に使用できるデータを追加
     * serializeせずに格納される
     *
     * @param   string $org_data 通知元データ情報（あらかじめserializeされたもの）
     */
    function setOrgDataString($org_data)
    {
        $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_ORG_DATA] = $org_data;
    }

    /**
     * モジュールが自由に使用できるデータを取得
     * シリアライズを戻してから返す
     *
     * @return  mixed   固有データ配列 or null
     */
    function getOrgData()
    {
        if ( ! isset($this->_notify_data[GRN_NOTIFICATION_DATA_KEY_ORG_DATA])
             || is_null($this->_notify_data[GRN_NOTIFICATION_DATA_KEY_ORG_DATA])
        ) {
            return null;
        }

        return cb_unserialize($this->_notify_data[GRN_NOTIFICATION_DATA_KEY_ORG_DATA],
            ["allowed_classes" => false]);
    }

    /**
     * モジュールが自由に使用できるデータを取得
     * unserializeせずに返す
     *
     * @return  mixed   固有データ文字列 or null
     */
    function getOrgDataString()
    {
        if (isset($this->_notify_data[GRN_NOTIFICATION_DATA_KEY_ORG_DATA])) {
            return $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_ORG_DATA];
        }

        return null;
    }

    /**
     * 通知データに標題データを追加
     *
     * @param string $subject       標題文字列
     * @param string $subject_front 標題サブ（前）
     * @param string $subject_back  標題サブ（後）
     * @param string $subject_url   標題URL
     * @param string $subject_icon  標題アイコン
     */
    function setSubjectData(
        $subject,
        $subject_front = null,
        $subject_back = null,
        $subject_url = null,
        $subject_icon = null
    ) {
        $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_SUBJECT]
            = mb_strimwidth($subject, 0, GRN_NOTIFICATION_SUBJECT_MAXLEN, '');
        $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_SUBJECT_FRONT]
            = mb_strimwidth($subject_front, 0, GRN_NOTIFICATION_SUBJECT_MAXLEN,
            '');
        $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_SUBJECT_BACK]
            = mb_strimwidth($subject_back, 0, GRN_NOTIFICATION_SUBJECT_MAXLEN,
            '');
        $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_SUBJECT_URL]
            = mb_strimwidth($subject_url, 0, GRN_NOTIFICATION_URL_MAXLEN, '');
        $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_SUBJECT_ICON]
            = mb_strimwidth($subject_icon, 0, GRN_NOTIFICATION_SUBJECT_MAXLEN,
            '');
    }

    /**
     * 通知データから標題データを取得
     *
     * @return  mixed   標題と標題サブ前後とURL、アイコン名の配列（キーはそれぞれ 0, 'front', 'back', 'url', 'icon'） or null
     */
    function getSubjectData()
    {
        $subject_data = [];

        // 標題
        if (isset($this->_notify_data[GRN_NOTIFICATION_DATA_KEY_SUBJECT])) {
            $subject_data[0]
                = $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_SUBJECT];
        } else {
            $subject_data[0] = null;
        }

        // 標題サブ（前）
        if (isset($this->_notify_data[GRN_NOTIFICATION_DATA_KEY_SUBJECT_FRONT])) {
            $subject_data['front']
                = $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_SUBJECT_FRONT];
        } else {
            $subject_data['front'] = null;
        }

        // 標題サブ（後）
        if (isset($this->_notify_data[GRN_NOTIFICATION_DATA_KEY_SUBJECT_BACK])) {
            $subject_data['back']
                = $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_SUBJECT_BACK];
        } else {
            $subject_data['back'] = null;
        }

        // 標題URL
        if (isset($this->_notify_data[GRN_NOTIFICATION_DATA_KEY_SUBJECT_URL])) {
            $subject_data['url']
                = $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_SUBJECT_URL];
        } else {
            $subject_data['url'] = null;
        }

        // 標題アイコン
        if (isset($this->_notify_data[GRN_NOTIFICATION_DATA_KEY_SUBJECT_ICON])) {
            $subject_data['icon']
                = $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_SUBJECT_ICON];
        } else {
            $subject_data['icon'] = null;
        }

        return $subject_data;
    }

    /**
     * 通知データに内容データを追加
     *
     * @param string $abstract       内容文字列
     * @param string $abstract_front 内容サブ（前）
     * @param string $abstract_back  内容サブ（後）
     * @param string $abstract_url   内容URL
     * @param string $abstract_icon  内容アイコン
     */
    function setAbstractData(
        $abstract,
        $abstract_front = null,
        $abstract_back = null,
        $abstract_url = null,
        $abstract_icon = null
    ) {
        $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_ABSTRACT]
            = mb_strimwidth($abstract, 0, GRN_NOTIFICATION_ABSTRACT_MAXLEN, '');
        $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_ABSTRACT_FRONT]
            = mb_strimwidth($abstract_front, 0,
            GRN_NOTIFICATION_ABSTRACT_MAXLEN, '');
        $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_ABSTRACT_BACK]
            = mb_strimwidth($abstract_back, 0, GRN_NOTIFICATION_ABSTRACT_MAXLEN,
            '');
        $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_ABSTRACT_URL]
            = mb_strimwidth($abstract_url, 0, GRN_NOTIFICATION_URL_MAXLEN, '');
        $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_ABSTRACT_ICON]
            = mb_strimwidth($abstract_icon, 0, GRN_NOTIFICATION_ABSTRACT_MAXLEN,
            '');
    }

    /**
     * 通知データから内容データを取得
     *
     * @return  mixed   内容と内容サブ前後、URLとアイコン名の配列（キーはそれぞれ 0, 'front', 'back', 'url', 'icon'） or null
     */
    function &getAbstractData()
    {
        if ( ! isset($this->_notify_data[GRN_NOTIFICATION_DATA_KEY_ABSTRACT])
             &&
             ! isset($this->_notify_data[GRN_NOTIFICATION_DATA_KEY_ABSTRACT_FRONT])
             &&
             ! isset($this->_notify_data[GRN_NOTIFICATION_DATA_KEY_ABSTRACT_BACK])
             &&
             ! isset($this->_notify_data[GRN_NOTIFICATION_DATA_KEY_ABSTRACT_URL])
             &&
             ! isset($this->_notify_data[GRN_NOTIFICATION_DATA_KEY_ABSTRACT_ICON])
        ) {
            $ret = null;

            return $ret;
        }

        $abstract_data = [];

        // 内容
        if (isset($this->_notify_data[GRN_NOTIFICATION_DATA_KEY_ABSTRACT])) {
            $abstract_data[0]
                = $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_ABSTRACT];
        } else {
            $abstract_data[0] = null;
        }

        // 内容サブ（前）
        if (isset($this->_notify_data[GRN_NOTIFICATION_DATA_KEY_ABSTRACT_FRONT])) {
            $abstract_data['front']
                = $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_ABSTRACT_FRONT];
        } else {
            $abstract_data['front'] = null;
        }

        // 内容サブ（後）
        if (isset($this->_notify_data[GRN_NOTIFICATION_DATA_KEY_ABSTRACT_BACK])) {
            $abstract_data['back']
                = $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_ABSTRACT_BACK];
        } else {
            $abstract_data['back'] = null;
        }

        // 内容URL
        if (isset($this->_notify_data[GRN_NOTIFICATION_DATA_KEY_ABSTRACT_URL])) {
            $abstract_data['url']
                = $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_ABSTRACT_URL];
        } else {
            $abstract_data['url'] = null;
        }

        // 内容アイコン
        if (isset($this->_notify_data[GRN_NOTIFICATION_DATA_KEY_ABSTRACT_ICON])) {
            $abstract_data['icon']
                = $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_ABSTRACT_ICON];
        } else {
            $abstract_data['icon'] = null;
        }

        return $abstract_data;
    }

    /**
     * Set isToMe
     *
     * @param bool $is_to_me
     */
    function setIsToMe(bool $is_to_me)
    {
        $this->isToMe = $is_to_me;
    }

    /**
     * Get isToMe
     */
    function getIsToMe()
    {
        return $this->isToMe;
    }

    /**
     * 通知データに送信者データを追加
     *
     * @param string $sender_name 名前
     * @param string $sender_id   ユーザーID（Ogre内データの場合）
     * @param string $sender_url  名前URL
     * @param string $group_name  組織名
     */
    function setSenderData(
        $sender_name,
        $sender_id,
        $sender_url = null,
        $group_name = null
    ) {
        if ( ! is_null($sender_name)) {
            $sender_name = mb_strimwidth($sender_name, 0,
                GRN_NOTIFICATION_SENDER_MAXLEN, '');
        }
        if ( ! is_null($sender_id)) {
            $sender_id = mb_strimwidth($sender_id, 0,
                GRN_NOTIFICATION_SENDER_MAXLEN, '');
        }
        if ( ! is_null($sender_url)) {
            $sender_url = mb_strimwidth($sender_url, 0,
                GRN_NOTIFICATION_URL_MAXLEN, '');
        }
        if ( ! is_null($group_name)) {
            $group_name = mb_strimwidth($group_name, 0,
                GRN_NOTIFICATION_SENDER_MAXLEN, '');
        }

        $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_SENDER_NAME]
            = $sender_name;
        $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_SENDER_ID] = $sender_id;
        $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_SENDER_URL] = $sender_url;
        $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_GROUP_NAME] = $group_name;
    }

    /**
     * 通知データから送信者データを取得
     *
     * @return  mixed   送信者名、送信者ID、名前URL、組織名の配列（キーはそれぞれ 'name', 'id', 'url', 'group_name'） or null
     */
    function getSenderData()
    {
        if ( ! isset($this->_notify_data[GRN_NOTIFICATION_DATA_KEY_SENDER_NAME])
             &&
             ! isset($this->_notify_data[GRN_NOTIFICATION_DATA_KEY_SENDER_ID])
             &&
             ! isset($this->_notify_data[GRN_NOTIFICATION_DATA_KEY_SENDER_URL])
             &&
             ! isset($this->_notify_data[GRN_NOTIFICATION_DATA_KEY_GROUP_NAME])
        ) {
            return null;
        }

        $sender_data = [];

        // 名前
        if (isset($this->_notify_data[GRN_NOTIFICATION_DATA_KEY_SENDER_NAME])) {
            $sender_data['name']
                = $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_SENDER_NAME];
        } else {
            $sender_data['name'] = null;
        }

        // ID
        if (isset($this->_notify_data[GRN_NOTIFICATION_DATA_KEY_SENDER_ID])) {
            $sender_data['id']
                = $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_SENDER_ID];
        } else {
            $sender_data['id'] = null;
        }

        // URL
        if (isset($this->_notify_data[GRN_NOTIFICATION_DATA_KEY_SENDER_URL])) {
            $sender_data['url']
                = $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_SENDER_URL];
        } else {
            $sender_data['url'] = null;
        }

        // 組織名
        if (isset($this->_notify_data[GRN_NOTIFICATION_DATA_KEY_GROUP_NAME])) {
            $sender_data['group_name']
                = $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_GROUP_NAME];
        } else {
            $sender_data['group_name'] = null;
        }

        return $sender_data;
    }

    /**
     * 通知データにタイムスタンプデータを追加
     *
     * @param   CB_TimeStamp $timestamp タイムスタンプ
     */
    function setTimeStampData($timestamp)
    {
        if ( ! ($timestamp instanceof CB_TimeStamp)) {
            // データ不正
            assert('FALSE');

            return;
        }

        $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_TIMESTAMP] = $timestamp;
    }

    /**
     * 通知データからタイムスタンプデータを取得
     *
     * @return  CB_TimeStamp    タイムスタンプ
     */
    function getTimeStampData()
    {
        $ret = null;
        if (isset($this->_notify_data[GRN_NOTIFICATION_DATA_KEY_TIMESTAMP])) {
            $ret = $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_TIMESTAMP];
        }

        return $ret;
    }

    /**
     * 通知データに状態データを追加
     *
     * @param string $status 状態
     */
    function setStatusData($status)
    {
        $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_STATUS]
            = mb_strimwidth($status, 0, GRN_NOTIFICATION_STATUS_MAXLEN, '');
    }

    function setReadFlag($flag)
    {
        $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_READ] = $flag;
    }

    /**
     * 通知データの状態を確認済みにする
     *
     */
    function setStatusToConfirm()
    {
        $this->setStatusData(GRN_NOTIFICATION_DATA_STATUS_CONFIRM);
        $this->setReadFlag(1);
    }

    /**
     * 通知データの状態を未確認にする
     *
     */
    function setStatusToUnread()
    {
        $this->setStatusData(GRN_NOTIFICATION_DATA_STATUS_UNREAD);
        $this->setReadFlag(0);
    }

    /**
     * 通知データの状態を更新にする
     *
     */
    function setStatusToUpdate()
    {
        $this->setStatusData(GRN_NOTIFICATION_DATA_STATUS_UPDATE);
        $this->setReadFlag(0);
    }

    /**
     * 通知データから状態データを取得
     *
     * @return  mixed   状態文字列 or null
     */
    function getStatusData()
    {
        if (isset($this->_notify_data[GRN_NOTIFICATION_DATA_KEY_STATUS])) {
            return $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_STATUS];
        }

        return null;
    }

    function getReadFlag()
    {
        if ( ! isset($this->_notify_data[GRN_NOTIFICATION_DATA_KEY_STATUS])) {
            return null;
        }

        if ('unread' == $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_STATUS]
            || 'update' == $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_STATUS]
        ) {
            return 0;
        }

        return 1;
    }

    /**
     * 通知データの状態が確認済みか
     *
     * @return  boolean   確認済みフラグ
     */
    function isStatusConfirmed()
    {
        $status = $this->getStatusData();
        if (is_null($status)
            || (strcmp($status, GRN_NOTIFICATION_DATA_STATUS_CONFIRM) !== 0)
        ) {
            // 状態データが格納されていない場合は未確認
            return false;
        }

        return true;
    }

    /**
     * 通知データの状態が未確認か
     *
     * @return  boolean   未確認フラグ
     */
    function isStatusUnread()
    {
        $status = $this->getStatusData();
        if (is_null($status)
            || (strcmp($status, GRN_NOTIFICATION_DATA_STATUS_UNREAD) === 0)
        ) {
            // 状態データが格納されていない場合は未確認
            return true;
        }

        return false;
    }

    /**
     * 通知データの状態が更新か
     *
     * @return  boolean    更新フラグ
     */
    function isStatusUpdated()
    {
        $status = $this->getStatusData();
        if (is_null($status)
            || (strcmp($status, GRN_NOTIFICATION_DATA_STATUS_UPDATE) !== 0)
        ) {
            // 状態データが格納されていない場合は未確認
            return false;
        }

        return true;
    }

    /**
     * 通知データに別ウィンドウで開くかどうかを設定
     *
     * @param boolean $b_popup ポップアップで開く
     */
    function setPopupFlag($b_popup)
    {
        $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_POPUP] = intval($b_popup);
    }

    /**
     * 通知データから別ウィンドウで開くかどうかの設定を取得
     *
     * @return boolean  ポップアップで開くフラグ
     */
    function getPopupFlag()
    {
        if (isset($this->_notify_data[GRN_NOTIFICATION_DATA_KEY_POPUP])) {
            return $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_POPUP];
        }

        return false;
    }

    /**
     * 通知データに添付ファイル有無を設定
     *
     * @param boolean $b_attached 添付ファイルあり
     */
    function setAttachedFlag($b_attached)
    {
        $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_ATTACHED]
            = intval($b_attached);
    }

    /**
     * 通知データから添付ファイル有無を取得
     *
     * @return boolean  添付ファイルありかフラグ
     */
    function getAttachedFlag()
    {
        if (isset($this->_notify_data[GRN_NOTIFICATION_DATA_KEY_ATTACHED])) {
            return $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_ATTACHED];
        }

        return false;
    }

    /**
     * 通知データに開くと同時に確認済みとするかどうかを設定
     * 外部通知で使用、通知履歴では使われない
     *
     * @param boolean $b_auto 開くと同時に確認済みとする
     */
    function setAutoConfirmFlag($b_auto)
    {
        $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_AUTO_CONFIRM]
            = intval($b_auto);
    }

    /**
     * 通知データから開くと同時に確認済みとするかどうかの設定を取得
     *
     * @return boolean  開くと同時に確認済みとするフラグ
     */
    function getAutoConfirmFlag()
    {
        if (isset($this->_notify_data[GRN_NOTIFICATION_DATA_KEY_AUTO_CONFIRM])) {
            return $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_AUTO_CONFIRM];
        }

        return false;
    }

    /**
     * 確認処理が必要かどうかを設定
     * チェックして既読が不可となる。通知履歴では使われない
     *
     * @param boolean $b_required 確認処理が必要とする
     */
    function setConfirmRequiredFlag($b_required)
    {
        $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_CONFIRM_REQUIRED]
            = intval($b_required);
    }

    /**
     * 確認処理が必要かどうかの設定を取得
     *
     * @return boolean  確認処理が必要とするフラグ
     */
    function getConfirmRequiredFlag()
    {
        if (isset($this->_notify_data[GRN_NOTIFICATION_DATA_KEY_CONFIRM_REQUIRED])) {
            return $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_CONFIRM_REQUIRED];
        }

        return false;
    }

    /**
     * スペースIDを設定する
     *
     * @param   int $space_id スペースアプリの通知振り分けに利用する
     */
    public function setSpaceId($space_id)
    {
        $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_SPACE_ID] = $space_id;
    }

    /**
     * スペースIDを取得する
     *
     * @return  mixed   $space_id or null
     */
    public function getSpaceId()
    {
        if (isset($this->_notify_data[GRN_NOTIFICATION_DATA_KEY_SPACE_ID])) {
            return $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_SPACE_ID];
        }

        return null;
    }

    /**
     * スケジュールのイベント開始時刻のタイムスタンプを設定する
     *
     * @param   int $event_start_ts イベントの通知をタイムゾーン対応するために利用する
     */
    public function setEventStartTs($event_start_ts)
    {
        $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_EVENT_START_TS]
            = $event_start_ts;
    }

    /**
     * スケジュールのイベント開始時刻のタイムスタンプを取得する
     *
     * @return  mixed   $event_start_ts or null
     */
    public function getEventStartTs()
    {
        if (isset($this->_notify_data[GRN_NOTIFICATION_DATA_KEY_EVENT_START_TS])) {
            return $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_EVENT_START_TS];
        }

        return null;
    }

    /**
     * @param string $space_name
     */
    public function setSpaceName($space_name)
    {
        $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_SPACE_NAME] = $space_name;
    }

    /**
     * @return mixed $space_name or null
     */
    public function getSpaceName()
    {
        if (isset($this->_notify_data[GRN_NOTIFICATION_DATA_KEY_SPACE_NAME])) {
            return $this->_notify_data[GRN_NOTIFICATION_DATA_KEY_SPACE_NAME];
        }

        return null;
    }
}

/**
 * 通知ユーティリティクラス
 *
 * @author  IKEDA, Atsushi 2004/10
 * @version 1.0
 * @package grn.notification
 */
class GRN_Notification_Utility
{
    /**
     * @access private
     */
    var $_table_infos = [];
    /** @var CB_TableManager */
    var $_table_manager = null;

    /**
     * コンストラクタ
     */
    function __construct()
    {
        global $G_container_base;
        $this->_table_manager = $G_container_base->getInstance('table_manager');
    }

    /**
     * テーブル情報を取得する
     *
     * @param   string $class_name 取得するテーブル情報のクラス名
     *
     * @return  object  CB_TableInfo
     */
    function getTableInfo($class_name)
    {
        if ( ! array_key_exists($class_name, $this->_table_infos)) {
            $this->_table_infos[$class_name]
                = $this->_table_manager->getTableInfo($class_name);
        }

        return $this->_table_infos[$class_name];
    }
}

//////////////////////////////////////////////////////////////////////////////

/**
 * Garoon Notification Service.
 *
 * 通知を扱うクラス
 *
 * @author  IKEDA, Atsushi 2004/10
 * @version 1.0
 * @package grn.notification
 */
class GRN_Notification_Service extends CB_ModuleBase
{
    // メンバ変数
    /**
     * @access private
     */
    var $_utility = null;                               // ユーティリティクラス
    var $_system_config = null;                         // 通知サービスシステム設定ロジック
    var $_personal_config = [];                    // 通知サービス個人設定ロジック（ユーザーIDごと）
    var $_facilities_name_cached = [];

    /**
     * Return singleton.
     *
     * @return GRN_Notification_Service
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Notification_Service();
        }

        return $_instance;
    }

    function __construct()
    {
        parent::__construct('grn.common.notification');

        $this->_utility = new GRN_Notification_Utility();
    }

    //////////////////////////////////////////////////////////////////////////
    // private method

    /**
     * @param array                 $data_ary
     * @param GRN_Notification_Data $data_obj
     * @param bool                  $is_history
     *
     * @return mixed
     */
    function _setNotifyDataProperties(
        & $data_ary,
        $data_obj,
        $is_history = false
    ) {
        if ( ! is_array($data_ary) || 0 == count($data_ary)
             ||
             ! ($data_obj instanceof GRN_Notification_Data)
        ) {
            return;
        }

        $data_ary['col_module_id'] = $data_obj->getModuleId();
        $data_ary['col_sub_module_id'] = $data_obj->getSubModuleId();
        $data_ary['col_unique_id'] = $data_obj->getUniqueId();
        $data_ary['col_action_id'] = $data_obj->getActionId();
        $data_ary['col_org_data'] = $data_obj->getOrgDataString();

        $data = $data_obj->getSubjectData();
        $data_ary['col_subject'] = $data[0];
        $data_ary['col_subject_f'] = $data['front'];
        $data_ary['col_subject_b'] = $data['back'];
        $data_ary['col_subject_url'] = $data['url'];
        $data_ary['col_subject_icon'] = $data['icon'];

        $data = $data_obj->getAbstractData();
        $data_ary['col_abstract'] = $data[0];
        $data_ary['col_abstract_f'] = $data['front'];
        $data_ary['col_abstract_b'] = $data['back'];
        $data_ary['col_abstract_url'] = $data['url'];
        $data_ary['col_abstract_icon'] = $data['icon'];

        $data = $data_obj->getSenderData();
        $data_ary['col_sender_name'] = $data['name'];
        $data_ary['col_sender_id'] = $data['id'];
        $data_ary['col_sender_url'] = $data['url'];
        $data_ary['col_group_name'] = $data['group_name'];

        $data = $data_obj->getTimeStampData();
        $data_ary['col_timestamp'] = $data->unix_ts;
        $data_ary['col_status'] = $data_obj->getStatusData();
        $data_ary['col_read'] = $data_obj->getReadFlag();

        $data_ary['col_attached'] = $data_obj->getAttachedFlag();
        $data_ary['col_popup'] = $data_obj->getPopupFlag();
        $data_ary['col_space_id'] = $data_obj->getSpaceId();
        $data_ary['col_space_name'] = $data_obj->getSpaceName();
        $data_ary['col_event_start_ts'] = $data_obj->getEventStartTs();
        if ( ! $is_history) {
            $data_ary['col_auto_confirm'] = $data_obj->getAutoConfirmFlag();
            $data_ary['col_confirm_required']
                = $data_obj->getConfirmRequiredFlag();
        }
    }

    /**
     * 指定された通知データ/通知履歴データオブジェクトのプロパティから通知情報を取得（高速化バージョン）
     *
     * @access private
     *
     * @param   string       $data_type
     * @param   array        $row DBから取得した生の行データ
     * @param   CB_User|null $user
     *
     * @return  array|null   通知データ or null
     */
    function _getNotifyDataProperties(
        $data_type,
        $row,
        $user = null,
        $is_merge_schedule_subject_with_time = true
    ) {
        if ( ! is_array($row) || 0 == count($row)) {
            return null;
        }

        $org_data = null;
        if (0 < strlen($row['col_org_data'])) {
            /* GRN2-6285(parent GRN2-5204) */
            // correspondence of invalid data("****")
            $data_new = mb_ereg_replace("^['\"]+|['\"]+$", '',
                $row['col_org_data']);
            /* GRN2-6285(parent GRN2-5204) */
            $org_data = cb_unserialize($data_new, ["allowed_classes" => false]);
        }

        $sender_name = $row['col_sender_name'];
        if ( ! is_null($sender_name)) {
            $sender_name = mb_strimwidth($sender_name, 0,
                GRN_NOTIFICATION_SENDER_MAXLEN, '');
        }
        $sender_id = $row['col_sender_id'];
        if ( ! is_null($sender_id)) {
            $sender_id = mb_strimwidth($sender_id, 0,
                GRN_NOTIFICATION_SENDER_MAXLEN, '');
        }
        $sender_url = $row['col_sender_url'];
        if ( ! is_null($sender_url)) {
            $sender_url = mb_strimwidth($sender_url, 0,
                GRN_NOTIFICATION_URL_MAXLEN, '');
        }
        $group_name = $row['col_group_name'];
        if ( ! is_null($group_name)) {
            $group_name = mb_strimwidth($group_name, 0,
                GRN_NOTIFICATION_SENDER_MAXLEN, '');
        }

        $timestamp = new CB_TimeStamp();
        $timestamp->unix_ts = intval($row['col_timestamp']);

        $read = null;
        switch ($row['col_status']) {
            case GRN_NOTIFICATION_DATA_STATUS_UPDATE:
                $status = 'update';
                $read = 0;
                break;
            case GRN_NOTIFICATION_DATA_STATUS_UNREAD:
                $status = 'unread';
                $read = 0;
                break;
            default:
                $status = 'read';
                $read = 1;
                break;
        }

        if ('history' == $data_type) {
            $auto_confirm = null;
            $confirm_required = null;
        } else {
            $auto_confirm = intval($row['col_auto_confirm']);
            $confirm_required = intval($row['col_confirm_required']);
        }
        switch ($row["col_action_id"]) {
            // GTM-1624 [Attendance Check] Notifications
            case GRN_NOTIFICATION_ACTION_STATUS_RESPONSE_ID:
                if (is_array($org_data)
                    && cb_at($org_data,
                        \grn\schedule\bean\AttendanceStatus::STATUS_ATTENDANT,
                        false)
                ) {
                    $row['col_abstract'] = cb_msg(GRN_NOTIFICATION_MODULE_ID,
                        GRN_NOTIFICATION_SCHEDULE_ATTENDANCE_RESPONSE);
                }
                break;
            // End GTM-1624
            // GTM-1680 [Facility approval] Notifications
            case GRN_NOTIFICATION_ACTION_FACILITY_REJECTED_ID:
                if (is_array($org_data)
                    && cb_at($org_data,
                        GRN_NOTIFICATION_ACTION_FACILITY_REJECTED_ID, false)
                ) {
                    $row['col_abstract'] = cb_msg(GRN_NOTIFICATION_MODULE_ID,
                        GRN_NOTIFICATION_SCHEDULE_FACILITY_REJECTED);
                }
                break;
            case GRN_NOTIFICATION_ACTION_FACILITY_APPROVED_ID:
                if (is_array($org_data)
                    && cb_at($org_data,
                        GRN_NOTIFICATION_ACTION_FACILITY_APPROVED_ID, false)
                ) {
                    $row['col_abstract'] = cb_msg(GRN_NOTIFICATION_MODULE_ID,
                        GRN_NOTIFICATION_SCHEDULE_FACILITY_APPROVED);
                }
                break;
            case GRN_NOTIFICATION_ACTION_FACILITY_REQUESTED_ID:
                if (is_array($org_data)
                    && cb_at($org_data,
                        GRN_NOTIFICATION_ACTION_FACILITY_REQUESTED_ID, false)
                ) {
                    $row['col_abstract'] = cb_msg(GRN_NOTIFICATION_MODULE_ID,
                        GRN_NOTIFICATION_SCHEDULE_FACILITY_REQUESTED);
                    $row['col_subject_icon'] = "facility20";

                    // Get the facility name by language of login user
                    $eventId = intval(cb_at($org_data, "event", 0));
                    $facilityId = intval(cb_at($org_data, "faid", 0));
                    if ( ! isset($this->_facilities_name_cached[$facilityId])) {
                        $i18n = CB_I18N::getInstance();
                        $inDataObj
                            = ["language" => $i18n->getCurrentLanguage()];
                        require_once("schedule/FacilityFacade.csp");
                        $facilityFacade = new \FacilityFacade();
                        $facilities
                            = $facilityFacade->referFacilitiesByEventId($inDataObj,
                            $eventId);
                        if (is_array($facilities) && count($facilities) > 0) {
                            foreach ($facilities as $facility) {
                                if ( ! array_key_exists($facility->getId(),
                                    $this->_facilities_name_cached)
                                ) {
                                    $this->_facilities_name_cached[$facility->getId()]
                                        = $facility->getName();
                                }
                            }
                        }
                        if ( ! isset($this->_facilities_name_cached[$facilityId])) {
                            $facility
                                = $facilityFacade->referFacilityById($inDataObj,
                                $facilityId);
                            if ($facility instanceof GrnFacilityFacility) {
                                $this->_facilities_name_cached[$facility->getId()]
                                    = $facility->getName();
                            }
                        }
                    }
                    $facilityName = cb_at($this->_facilities_name_cached,
                        $facilityId, "");
                    if (strlen($facilityName) > 0) {
                        $row["col_subject"] = $facilityName;
                    }
                }
                break;
            // End GTM-1680
        }

        //GRN35-357
        require_once('schedule/resources.csp');
        if ($is_merge_schedule_subject_with_time && $user instanceof CB_User
            && $row['col_module_id'] == GRN_SCHEDULE_MODULE_ID
            && ! empty($row['col_event_start_ts'])
        ) {
            $eventStartTs = new CB_Timestamp();
            $eventStartTs->unix_ts = $row['col_event_start_ts'];

            require_once('fw/i18n.csp');
            $timezone = CB_I18n::getUserTimezone($user);

            $eventStartTsEx = new CB_TimestampEx($eventStartTs, $timezone);
            $setDateTime = $eventStartTsEx->getDateTime();

            $createTimeEx = new CB_TimestampEx($timestamp, $timezone);
            $createDate = $createTimeEx->getDate();

            if ($createDate->compare($setDateTime) === 0) {
                if (isset($org_data['type']) && $setDateTime->hour === 0
                    && $setDateTime->minute === 0
                    && $setDateTime->second === 0
                ) {
                    if (($org_data['type'] & GRN_SCHEDULE_EVENT_TYPE_ALLDAY)
                        !== GRN_SCHEDULE_EVENT_TYPE_ALLDAY
                        && ($org_data['type'] & GRN_SCHEDULE_EVENT_TYPE_BANNER)
                           !== GRN_SCHEDULE_EVENT_TYPE_BANNER
                    ) {
                        $str = cb_date_format('TimeShort_HM', $setDateTime,
                            $user->getOID());
                    }
                } else {
                    $str = cb_date_format('TimeShort_HM', $setDateTime,
                        $user->getOID());
                }
            } else {
                $str = cb_date_format('DateShort_MD', $setDateTime,
                    $user->getOID());
            }
            if (isset($str)) {
                $subject = $str . " " . $row['col_subject'];
                $row['col_subject'] = $subject;
            }
        }

        //GRN35-357

        return [
            'id'               => $row['_id'],
            'module_id'        => $row['col_module_id'],
            'sub_module_id'    => $row['col_sub_module_id'],
            'unique_id'        => $row['col_unique_id'],
            'org_data'         => $org_data,
            'subject'          => mb_strimwidth($row['col_subject'], 0,
                GRN_NOTIFICATION_SUBJECT_MAXLEN, ''),
            'subject_f'        => mb_strimwidth($row['col_subject_f'], 0,
                GRN_NOTIFICATION_SUBJECT_MAXLEN, ''),
            'subject_b'        => mb_strimwidth($row['col_subject_b'], 0,
                GRN_NOTIFICATION_SUBJECT_MAXLEN, ''),
            'subject_url'      => mb_strimwidth($row['col_subject_url'], 0,
                GRN_NOTIFICATION_URL_MAXLEN, ''),
            'subject_icon'     => mb_strimwidth($row['col_subject_icon'], 0,
                GRN_NOTIFICATION_SUBJECT_MAXLEN, ''),
            'abstract'         => mb_strimwidth($row['col_abstract'], 0,
                GRN_NOTIFICATION_ABSTRACT_MAXLEN, ''),
            'abstract_f'       => mb_strimwidth($row['col_abstract_f'], 0,
                GRN_NOTIFICATION_ABSTRACT_MAXLEN, ''),
            'abstract_b'       => mb_strimwidth($row['col_abstract_b'], 0,
                GRN_NOTIFICATION_ABSTRACT_MAXLEN, ''),
            'abstract_url'     => mb_strimwidth($row['col_abstract_url'], 0,
                GRN_NOTIFICATION_URL_MAXLEN, ''),
            'abstract_icon'    => mb_strimwidth($row['col_abstract_icon'], 0,
                GRN_NOTIFICATION_ABSTRACT_MAXLEN, ''),
            'sender_name'      => $sender_name,
            'sender_id'        => $sender_id,
            'sender_url'       => $sender_url,
            'group_name'       => $group_name,
            'timestamp'        => $timestamp,
            'status'           => $status,
            'read'             => $read,
            'attached'         => intval($row['col_attached']),
            'popup'            => intval($row['col_popup']),
            'auto_confirm'     => $auto_confirm,
            'confirm_required' => $confirm_required,
            'action_id'        => $row['col_action_id'],
            'space_id'         => $row['col_space_id'],
            'space_name'       => mb_strimwidth($row['col_space_name'], 0,
                GRN_NOTIFICATION_SPACE_MAXLEN, ''),
            'event_start_ts'   => $row['col_event_start_ts']
        ];
    }

    /**
     * @param  CB_User $user
     * @param  string  $module_id
     * @param  string  $sub_module_id
     * @param  string  $unique_id
     * @param  bool    $is_to_me
     *
     * @return array|null
     */
    private function _getNotifyDataRow(
        $user,
        $module_id,
        $sub_module_id,
        $unique_id,
        bool $is_to_me = false
    ) {
        if ( ! ($user instanceof CB_User) || 0 == strlen($module_id)
             || 0 == strlen($unique_id)
        ) {
            return null;
        }

        $user_id = $user->getOID();

        $dbconn = grn_notification_get_connection($user_id);

        require_once('fw/i18n/locale.csp');
        require_once('space/GrnSpaceApplication.csp');

        global $G_container_base;
        /** @var GRN_Uum $uum */
        $uum = $G_container_base->getInstance('uum');
        $login = $uum->getLoginUser();
        if ($user === $login) {
            $i18n = CB_I18N::getInstance();
            $defaultLanguage = $i18n->getCurrentLanguage();
        } else {
            $defaultLanguage = CB_LocaleManager::getDefaultLanguage();
        }

        $welcomeSpaceMessage = cb_msg(GrnSpaceApplication::GRN_SPACE_MODULE_ID,
            'notify_subject', null, $defaultLanguage);

        $query = cb_queryf($dbconn,
            "SELECT " .
            "n._id, n.col_module_id, n.col_action_id, n.col_unique_id, n.col_org_data, "
            .
            "IF( n.col_module_id ='grn.space' AND n.col_sub_module_id = '', '@S', n.col_subject) AS col_subject, "
            .
            "n.col_subject_f, n.col_subject_b, n.col_abstract, n.col_abstract_f, n.col_abstract_b, "
            .
            "n.col_sender_name, n.col_sender_id, n.col_sender_url, n.col_subject_url, "
            .
            "n.col_subject_icon, n.col_abstract_url, n.col_abstract_icon, n.col_group_name, n.col_timestamp, "
            .
            "n.col_status, n.col_read, n.col_popup, n.col_attached, n.col_auto_confirm, "
            .
            "n.col_confirm_required, n.col_sub_module_id, " .
            "n.col_space_id, n.col_space_name, n.col_event_start_ts, n.col_user "
            .
            "FROM " .
            grn_get_personal_tablename($user_id,
                $is_to_me ? 'tab_grn_notification_to_me'
                    : 'tab_grn_notification_notify') . ' AS n ' .
            "WHERE (n.col_user='@S') AND (n.col_module_id='@S') AND (n.col_sub_module_id='@S') AND (n.col_unique_id='@S')",
            $welcomeSpaceMessage, $user_id, $module_id, $sub_module_id,
            $unique_id);

        $query = $dbconn->select_format($query, 0, 1, CB_DATABASE_NO_LOCK);

        if (cb_is_db_result($result = $dbconn->query($query))) {
            $row = $dbconn->fetch_assoc($result);
            if (is_array($row) && 0 < count($row)) {
                return $row;
            }
        }

        return null;
    }

    /**
     * @param  CB_User[] $users
     * @param  string    $module_id
     * @param  string    $sub_module_id
     * @param  string    $unique_id
     * @param  string    $key
     *
     * @return array|null
     */
    private function _getNotifyDataRowListByUser(
        $users,
        $module_id,
        $sub_module_id,
        $unique_id,
        $key
    ) {
        if ( ! is_array($users) || 0 == count($users) || 0 == strlen($module_id)
             || 0 == strlen($unique_id)
        ) {
            return null;
        }

        $i18n = CB_I18N::getInstance();
        require_once('fw/i18n/locale.csp');
        require_once('space/GrnSpaceApplication.csp');

        $rows = [];
        foreach ($users as $user) {
            $dbconn = grn_notification_get_connection($user->getOID());
            $languageCode = $i18n->getCurrentLanguage($user->getOID());

            $welcomeSpaceMessage
                = cb_msg(GrnSpaceApplication::GRN_SPACE_MODULE_ID,
                'notify_subject', null, $languageCode);

            $query = cb_queryf($dbconn,
                "SELECT " .
                "n._id, n.col_module_id, n.col_action_id, " .
                "n.col_unique_id, n.col_org_data, " .
                "IF( n.col_module_id ='grn.space' AND n.col_sub_module_id = '', '@S', n.col_subject) AS col_subject, "
                .
                "n.col_subject_f, n.col_subject_b, n.col_abstract, " .
                "n.col_abstract_f, n.col_abstract_b, n.col_sender_name, " .
                "n.col_sender_id, n.col_sender_url, n.col_subject_url, " .
                "n.col_subject_icon, n.col_abstract_url, n.col_abstract_icon, "
                .
                "n.col_group_name, n.col_timestamp, n.col_status, " .
                "n.col_read, n.col_popup, n.col_attached, " .
                "n.col_auto_confirm, " .
                "n.col_confirm_required, " .
                "n.col_sub_module_id, " .
                "n.col_space_id, " .
                "n.col_space_name, " .
                "n.col_event_start_ts, " .
                "n.col_user " .
                "FROM " .
                grn_get_personal_tablename($user->getOID(),
                    'tab_grn_notification_notify') . ' AS n ' .
                "WHERE (n.col_user='@S') AND (n.col_module_id='@S') AND (n.col_sub_module_id='@S') AND (n.col_unique_id='@S')",
                $welcomeSpaceMessage, $user->getOID(), $module_id,
                $sub_module_id, $unique_id);

            $query = $dbconn->select_format($query, 0, -1,
                CB_DATABASE_NO_LOCK);
            $result = $dbconn->query($query);

            if (cb_is_db_result($result)) {
                $row = $dbconn->fetch_assoc($result);
                if ( ! is_array($row) || 0 == count($row)) {
                    continue;
                }
                $rows[$row[$key]] = $row;
            }
        }

        return $rows;
    }

    /**
     * @param  CB_User               $user
     * @param  GRN_Notification_Data $data_obj
     * @param  string                $command
     *
     * @return bool
     */
    private function _setNotifyData($user, $data_obj, $command)
    {
        if ( ! ($user instanceof CB_User)
             ||
             ! ($data_obj instanceof GRN_Notification_Data)
        ) {
            cb_throw_error(E_GRN_CMMN_NTFC_FAILED_TO_ADD_NOTIFY_DATA);
        }

        $user_id = $user->getOID();

        $dbconn = grn_notification_get_connection($user_id);

        $data_ary = $data_obj->getData();
        $tmp = $data_ary;
        $insert_column = '';
        $insert_value = '';
        $tmp['timestamp'] = $tmp['timestamp']->unix_ts;
        $tmp['user'] = $user_id;
        foreach ($tmp as $key => $value) {
            $column = 'col_' . $key;
            $value = $dbconn->escape($value);
            if ($insert_column === '') {
                $insert_column = $column;
            } else {
                $insert_column .= ', ' . $column;
            }
            if ($insert_value === '') {
                $insert_value = '\'' . $value . '\'';
            } else {
                $insert_value .= ', \'' . $value . '\'';
            }
        }

        $mapping_name = grn_get_personal_tablename($user_id,
            'tab_grn_notification_notify');
        $query_format = $command . ' ' . $mapping_name . ' (%s) values (%s);';
        $query = sprintf($query_format, $insert_column, $insert_value);

        $dbconn->query($query);

        return true;
    }

    /**
     * @param array                 $add_user_id_list
     * @param GRN_Notification_Data $data_obj
     * @param string                $command
     */
    private function _setNotifyDataListByUser(
        $add_user_id_list,
        $data_obj,
        $command
    ) {
        if ( ! is_array($add_user_id_list)
             ||
             ! ($data_obj instanceof GRN_Notification_Data)
        ) {
            cb_throw_error(E_GRN_CMMN_NTFC_FAILED_TO_ADD_NOTIFY_DATA);
        }

        if (0 < count($add_user_id_list)) {
            $dbconn = grn_notification_get_connection();

            $data_ary = $data_obj->getData();
            $tmp = $data_ary;
            $insert_column = '';
            $insert_value = '';
            $tmp['timestamp'] = $tmp['timestamp']->unix_ts;
            foreach ($tmp as $key => $value) {
                $column = 'col_' . $key;
                $value = $dbconn->escape($value);
                if ($insert_column === '') {
                    $insert_column = $column;
                } else {
                    $insert_column .= ', ' . $column;
                }
                if ($insert_value === '') {
                    $insert_value = '\'' . $value . '\'';
                } else {
                    $insert_value .= ', \'' . $value . '\'';
                }
            }

            foreach ($add_user_id_list as $user_id) {
                $insert_column_tmp = $insert_column;
                $insert_value_tmp = $insert_value;
                $insert_column_tmp .= ', col_user';
                $insert_value_tmp .= ', ' . $dbconn->escape($user_id);

                $dbconn = grn_notification_get_connection($user_id);
                $mapping_name = grn_get_personal_tablename($user_id,
                    'tab_grn_notification_notify');
                $query_format = $command . ' ' . $mapping_name
                                . ' (%s) values (%s);';
                $query = sprintf($query_format, $insert_column_tmp,
                    $insert_value_tmp);

                $dbconn->query($query);
            }
        }
    }

    /**
     * @param CB_User $user
     * @param array   $add_data_ary_list
     * @param string  $command
     */
    private function _setNotifyDataListByUniqueId(
        & $user,
        & $add_data_ary_list,
        $command
    ) {
        if ( ! ($user instanceof CB_User)) {
            cb_throw_error(E_GRN_CMMN_NTFC_FAILED_TO_ADD_NOTIFY_DATA);
        }

        $user_id = $user->getOID();
        $dbconn = grn_notification_get_connection($user_id);

        $insert_columns = [];
        $insert_values = [];
        foreach ($add_data_ary_list as $data_ary) {
            $tmp = $data_ary;
            $insert_value = [];
            $tmp['col_user'] = $user_id;
            foreach ($tmp as $key => $value) {
                $insert_columns[$key] = $key;
                $insert_value[$key] = $dbconn->escape($value);
            }
            $insert_values[] = $insert_value;
        }

        $insert_values_string = '';
        $insert_columns_string = '';
        foreach ($insert_values as $insert_value) {
            if ($insert_values_string !== '') {
                $insert_values_string .= ', ';
            }
            $insert_value_string = '';
            $insert_columns_string = '';
            foreach ($insert_columns as $column_name) {
                if ($insert_value_string !== '') {
                    $insert_value_string .= ', ';
                }
                if ($insert_columns_string !== '') {
                    $insert_columns_string .= ', ';
                }
                $insert_columns_string .= $column_name;
                if (array_key_exists($column_name, $insert_value)) {
                    $insert_value_string .= '\'' . $insert_value[$column_name]
                                            . '\'';
                } else {
                    $insert_value_string .= 'NULL';
                }
            }
            $insert_values_string .= '( ' . $insert_value_string . ' )';
        }
        $mapping_name = grn_get_personal_tablename($user_id,
            'tab_grn_notification_notify');
        $query_format = $command . ' ' . $mapping_name . ' (%s) values %s;';
        $query = sprintf($query_format, $insert_columns_string,
            $insert_values_string);

        $dbconn->query($query);
    }

    /**
     * @param CB_User               $user
     * @param array                 $data_array
     * @param GRN_Notification_Data $data_obj
     * @param bool                  $is_to_me
     * @param string                $operate
     */
    private function _updateNotifyData(
        $user,
        $data_array,
        $data_obj,
        $operate,
        bool $is_to_me = false
    ) {
        $tmp = $data_array;
        unset($tmp['_id']);
        $tmp['col_user'] = $user->getOID();
        $this->_setNotifyDataProperties($tmp, $data_obj);

        $dbconn = grn_notification_get_connection($tmp['col_user']);

        $table = $is_to_me ? 'tab_grn_notification_to_me'
            : 'tab_grn_notification_notify';
        $mapping_name = grn_get_personal_tablename($tmp['col_user'], $table);

        $format = 'update ' . $mapping_name . ' set %s where (%s) ';
        $values = [];
        foreach ($tmp as $key => $value) {
            if (is_null($value)) {
                $values[] = "${key}=NULL";
            } else {
                $values[] = cb_queryf($dbconn, "${key}='@S'", $value);
            }
        }
        $values = implode(',', $values);
        $condition = cb_queryf($dbconn, "_id='@S'", $data_array['_id']);
        $query = sprintf($format, $values, $condition);

        if ($operate == 'modify' || $operate == 'confirm') {
            $dbconn->query($query);
        }
    }

    /**
     * @param CB_User                    $user
     * @param array                      $data_array
     * @param string[]                   $notify_id_list
     * @param string                     $operate
     * @param GRN_Notification_Data|null $data_obj
     */
    private function _updateNotifyDataListByUser(
        $user,
        $data_array,
        $notify_id_list,
        $operate,
        $data_obj = null
    ) {
        $dbconn = grn_notification_get_connection($user->getOID());

        $mapping_name = grn_get_personal_tablename($user->getOID(),
            'tab_grn_notification_notify');
        $format = 'update ' . $mapping_name . ' set %s where (%s) ';
        $values = [];
        foreach ($data_array as $key => $value) {
            if (is_null($value)) {
                $values[] = "${key}=NULL";
            } else {
                $values[] = cb_queryf($dbconn, "${key}='@S'", $value);
            }
        }
        $values = implode(',', $values);
        $condition = [];
        foreach ($notify_id_list as $notify_id) {
            $condition[] = cb_queryf($dbconn, "(_id='@S')", $notify_id);
        }
        $condition = implode(' or ', $condition);

        $query = sprintf($format, $values, $condition);

        if ($operate == 'modify' || $operate == 'confirm') {
            $dbconn->query($query);
        }
    }

    /**
     * @param  CB_User $user
     * @param  string  $module_id
     * @param  string  $sub_module_id
     * @param  string  $unique_id
     * @param  bool    $is_to_me Filter by category "To me" or not. By default, "To me" notification is not filtered
     *
     * @return array|null
     */
    private function _getHistoryDataRow(
        & $user,
        $module_id,
        $sub_module_id,
        $unique_id,
        bool $is_to_me = false
    ) {
        if ( ! ($user instanceof CB_User) || 0 == strlen($module_id)
             || 0 == strlen($unique_id)
        ) {
            return null;
        }

        $user_id = $user->getOID();

        $dbconn = grn_notification_get_connection($user_id);

        require_once('fw/i18n/locale.csp');
        require_once('space/GrnSpaceApplication.csp');
        global $G_container_base;
        /** @var GRN_Uum $uum */
        $uum = $G_container_base->getInstance('uum');
        $login = $uum->getLoginUser();

        if ($user === $login) {
            $i18n = CB_I18N::getInstance();
            $defaultLanguage = $i18n->getCurrentLanguage();
        } else {
            $defaultLanguage = CB_LocaleManager::getDefaultLanguage();
        }
        $welcomeSpaceMessage = cb_msg(GrnSpaceApplication::GRN_SPACE_MODULE_ID,
            'notify_subject', null, $defaultLanguage);
        $history_table = $is_to_me ? 'tab_grn_notification_to_me_history'
            : 'tab_grn_notification_history';
        $query = cb_queryf($dbconn,
            'SELECT ' .
            'h._id, h.col_module_id, h.col_action_id, h.col_unique_id, ' .
            'h.col_org_data, ' .
            "IF( h.col_module_id ='grn.space' AND h.col_sub_module_id = '', '@S', h.col_subject) AS col_subject, "
            .
            'h.col_subject_f, h.col_subject_b, h.col_abstract, ' .
            'h.col_abstract_f, h.col_abstract_b, h.col_sender_name, ' .
            'h.col_sender_id, h.col_sender_url, h.col_subject_url, ' .
            'h.col_subject_icon, h.col_abstract_url, h.col_abstract_icon, ' .
            'h.col_group_name, h.col_timestamp, h.col_status, ' .
            'h.col_read, h.col_popup, h.col_attached, ' .
            'h.col_sub_module_id, h.col_space_id, h.col_space_name, ' .
            'h.col_event_start_ts, h.col_user ' .
            'FROM ' .
            grn_get_personal_tablename($user_id, $history_table) . ' AS h ' .
            "WHERE (h.col_user='@S') AND (h.col_module_id='@S') AND (h.col_sub_module_id='@S') AND (h.col_unique_id='@S')",
            $welcomeSpaceMessage, $user_id, $module_id, $sub_module_id,
            $unique_id);

        $query = $dbconn->select_format($query, 0, 1, CB_DATABASE_NO_LOCK);

        if (cb_is_db_result($result = $dbconn->query($query))) {
            $row = $dbconn->fetch_assoc($result);
            if (is_array($row) && 0 < count($row)) {
                return $row;
            }
        }

        return null;
    }

    /**
     * @param CB_User[] $users
     * @param string    $module_id
     * @param string    $sub_module_id
     * @param string    $unique_id
     * @param string    $key
     *
     * @return array|null
     */
    private function _getHistoryDataRowListByUser(
        $users,
        $module_id,
        $sub_module_id,
        $unique_id,
        $key
    ) {
        if ( ! is_array($users) || 0 == count($users) || 0 == strlen($module_id)
             || 0 == strlen($unique_id)
        ) {
            return null;
        }
        // スペース招待通知の多言語対応のため、SELECT文にIF文＋CASE文を埋める
        // WHERE句も対応する
        require_once('fw/i18n/locale.csp');
        require_once('space/GrnSpaceApplication.csp');

        $i18n = CB_I18N::getInstance();
        $rows = [];
        foreach ($users as $user) {
            $dbconn = grn_notification_get_connection($user->getOID());
            $defaultLanguage = $i18n->getCurrentLanguage($user->getOID());

            $welcomeSpaceMessage
                = cb_msg(GrnSpaceApplication::GRN_SPACE_MODULE_ID,
                'notify_subject', null, $defaultLanguage);

            $query = cb_queryf($dbconn,
                'SELECT ' .
                'h._id, h.col_module_id, h.col_action_id, h.col_unique_id, ' .
                'h.col_org_data, ' .
                "IF( h.col_module_id ='grn.space' AND h.col_sub_module_id = '', '@S', h.col_subject) AS col_subject, "
                .
                'h.col_subject_f, h.col_subject_b, h.col_abstract, h.col_abstract_f, '
                .
                'h.col_abstract_b, h.col_sender_name, h.col_sender_id, h.col_sender_url, '
                .
                'h.col_subject_url, h.col_subject_icon, h.col_abstract_url, ' .
                'h.col_abstract_icon, h.col_group_name, h.col_timestamp, ' .
                'h.col_status, h.col_read, h.col_popup, h.col_attached, ' .
                'h.col_sub_module_id, h.col_space_id, h.col_space_name, ' .
                'h.col_event_start_ts, h.col_user ' .
                'FROM ' .
                grn_get_personal_tablename($user->getOID(),
                    'tab_grn_notification_history') . ' AS h ' .
                "WHERE (h.col_user='@S') AND (h.col_module_id='@S') AND (h.col_sub_module_id='@S') AND (h.col_unique_id='@S')",
                $welcomeSpaceMessage, $user->getOID(), $module_id,
                $sub_module_id, $unique_id);
            $query = $dbconn->select_format($query, 0, -1,
                CB_DATABASE_NO_LOCK);
            $result = $dbconn->query($query);

            if (cb_is_db_result($result)) {
                $row = $dbconn->fetch_assoc($result);
                if ( ! is_array($row) || 0 == count($row)) {
                    continue;
                }
                $rows[$row[$key]] = $row;
            }
        }

        return $rows;
    }

    /**
     * @param CB_User               $user
     * @param GRN_Notification_Data $data_obj
     * @param string                $command
     * @param bool                  $is_to_me Filter by category "To me" or not. By default, "To me" notification is not filtered
     *
     */
    private function _setHistoryData(
        & $user,
        & $data_obj,
        $command,
        bool $is_to_me = false
    ) {
        if ( ! ($user instanceof CB_User)
             ||
             ! ($data_obj instanceof GRN_Notification_Data)
        ) {
            cb_throw_error(E_GRN_CMMN_NTFC_FAILED_TO_ADD_HISTORY_DATA);
        }

        $user_id = $user->getOID();
        $dbconn = grn_notification_get_connection($user_id);

        $data_ary = $data_obj->getData();
        $tmp = $data_ary;
        $insert_column = '';
        $insert_value = '';
        $tmp['timestamp'] = $tmp['timestamp']->unix_ts;
        $tmp['user'] = $user_id;
        unset($tmp['auto_confirm']);
        unset($tmp['confirm_required']);
        foreach ($tmp as $key => $value) {
            $column = 'col_' . $key;
            if (is_null($value)) {
                $value = 'NULL';
            } else {
                $value = '\'' . $dbconn->escape($value) . '\'';
            }
            if ($insert_column === '') {
                $insert_column = $column;
            } else {
                $insert_column .= ', ' . $column;
            }
            if ($insert_value === '') {
                $insert_value = $value;
            } else {
                $insert_value .= ', ' . $value;
            }
        }

        $mapping_name = grn_get_personal_tablename($tmp['user'],
            $is_to_me ? 'tab_grn_notification_to_me_history'
                : 'tab_grn_notification_history');
        $query_format = $command . ' ' . $mapping_name . ' (%s) values (%s);';
        $query = sprintf($query_format, $insert_column, $insert_value);

        $dbconn->query($query);
    }

    /**
     * @param string[]              $add_user_id_list
     * @param GRN_Notification_Data $data_obj
     * @param string                $command
     * @param bool                  $is_to_me Filter by category "To me" or not. By default, "To me" notification is not filtered
     */
    private function _setHistoryDataListByUser(
        $add_user_id_list,
        & $data_obj,
        $command,
        bool $is_to_me = false
    ) {
        if ( ! is_array($add_user_id_list)
             ||
             ! ($data_obj instanceof GRN_Notification_Data)
        ) {
            cb_throw_error(E_GRN_CMMN_NTFC_FAILED_TO_ADD_HISTORY_DATA);
        }

        if (0 < count($add_user_id_list)) {
            $dbconn = grn_notification_get_connection();

            $data_ary = $data_obj->getData();
            $tmp = $data_ary;
            $insert_column = '';
            $insert_value = '';
            $tmp['timestamp'] = $tmp['timestamp']->unix_ts;
            unset($tmp['auto_confirm']);
            unset($tmp['confirm_required']);
            foreach ($tmp as $key => $value) {
                $column = 'col_' . $key;
                if (is_null($value)) {
                    $value = 'NULL';
                } else {
                    $value = '\'' . $dbconn->escape($value) . '\'';
                }
                if ($insert_column === '') {
                    $insert_column = $column;
                } else {
                    $insert_column .= ', ' . $column;
                }
                if ($insert_value === '') {
                    $insert_value = $value;
                } else {
                    $insert_value .= ', ' . $value;
                }
            }
            //GRN2-1347 Fix
            global $G_container_base;
            /** @var GRN_Uum $uum */
            $uum = $G_container_base->getInstance('uum');
            //GRN2-1347 Fix
            foreach ($add_user_id_list as $user_id) {
                //GRN2-1347 Fix
                $user = $uum->getUser($user_id);
                $row = $this->_getHistoryDataRow($user, $data_ary['module_id'],
                    $data_ary['sub_module_id'], $data_ary['unique_id'],
                    $is_to_me);
                if ($row['col_user'] == $user_id
                    && $row['col_unique_id'] == $data_ary['unique_id']
                    && $row['col_module_id'] == $data_ary['module_id']
                    && $row['col_sub_module_id'] == $data_ary['sub_module_id']
                ) {
                    continue;
                }
                //GRN2-1347 Fix
                $insert_column_tmp = $insert_column;
                $insert_value_tmp = $insert_value;
                $insert_column_tmp .= ', col_user';
                $insert_value_tmp .= ', ' . $dbconn->escape($user_id);

                $dbconn = grn_notification_get_connection($user_id);
                $history_table = $is_to_me
                    ? "tab_grn_notification_to_me_history"
                    : "tab_grn_notification_history";
                $mapping_name = grn_get_personal_tablename($user_id,
                    $history_table);
                $query_format = $command . ' ' . $mapping_name
                                . ' (%s) values (%s);';
                $query = sprintf($query_format, $insert_column_tmp,
                    $insert_value_tmp);

                $dbconn->query($query);
            }
        }
    }

    /**
     * @param CB_User               $user
     * @param array                 $data_ary
     * @param GRN_Notification_Data $data_obj
     * @param bool                  $is_to_me Filter by category "To me" or not. By default, "To me" notification is not filtered
     */
    private function _updateHistoryData(
        $user,
        $data_ary,
        $data_obj,
        bool $is_to_me = false
    ) {
        $tmp = $data_ary;
        unset($tmp['_id']);
        $this->_setNotifyDataProperties($tmp, $data_obj, true);
        $history_table = $is_to_me ? "tab_grn_notification_to_me_history"
            : "tab_grn_notification_history";
        $dbconn = grn_notification_get_connection($user->getOID());

        $mapping_name = grn_get_personal_tablename($user->getOID(),
            $history_table);
        $format
            = "update ${mapping_name} set %s where (_id='${data_ary['_id']}')";
        $values = [];
        foreach ($tmp as $key => $value) {
            if (is_null($value)) {
                $values[] = "${key}=NULL";
            } else {
                $values[] = cb_queryf($dbconn, "${key}='@S'", $value);
            }
        }
        $values = implode(',', $values);
        $query = sprintf($format, $values);

        $dbconn->query($query);
    }

    private function _updateHistoryDataListByUser(
        $uid,
        $data_ary,
        $data_obj,
        bool $is_to_me = false
    ) {
        $tmp = $data_ary;
        unset($tmp['_id']);
        unset($tmp['col_user']);
        $this->_setNotifyDataProperties($tmp, $data_obj, true);

        $dbconn = grn_notification_get_connection($uid);
        $history_table = $is_to_me ? 'tab_grn_notification_to_me_history'
            : 'tab_grn_notification_history';
        $mapping_name = grn_get_personal_tablename($uid, $history_table);
        $format = 'update ' . $mapping_name . ' set %s where (%s)';
        $values = [];
        foreach ($tmp as $key => $value) {
            if (is_null($value)) {
                $values[] = "${key}=NULL";
            } else {
                $values[] = cb_queryf($dbconn, "${key}='@S'", $value);
            }
        }
        $values = implode(',', $values);
        $condition = [];
        $condition[] = cb_queryf($dbconn, "(_id='@S')", $data_ary['_id']);
        $condition = implode(' or ', $condition);
        $query = sprintf($format, $values, $condition);

        $dbconn->query($query);
    }
    ////////////////////////////////////////////////////////////////////////
    // public method

    /**
     * 通知サービスシステム設定ロジックを取得
     *
     * @return object  通知サービスシステム設定ロジック
     */
    function getSystemConfig()
    {
        if (is_null($this->_system_config)) {
            $this->_system_config
                = GRN_Notification_ServiceSystemConfig::getInstance();
        }

        return $this->_system_config;
    }

    /**
     * 通知サービス個人設定ロジックを取得
     *
     * @param  CB_User $user ユーザーオブジェクト
     *
     * @return GRN_Notification_ServicePersonalConfig  通知アプリ個人設定ロジック
     */
    function getPersonalConfig($user)
    {
        if ( ! is_object($user)) {
            $___ret = null;

            return $___ret;
        }

        $user_id = $user->getOID();
        if ( ! array_key_exists($user_id, $this->_personal_config)) {
            $this->_personal_config[$user_id]
                = new GRN_Notification_ServicePersonalConfig($user);
        }

        return $this->_personal_config[$user_id];
    }

    ////////////////////////////////////////////////////////////////////////
    // 通知サービス API

    /**
     * 通知データのプロパティを取得
     *
     * @param   object $user      通知先ユーザーオブジェクト(CB_User)
     * @param   string $module_id モジュールID
     * @param   string $unique_id ユニークID
     * @param   string $sub_module_id
     *
     * @return  GRN_Notification_Data|null  通知データプロパティ（GRN_Notification_Data）or 登録されてない場合はnull
     */
    function getNotifyDataProperties(
        & $user,
        $module_id,
        $unique_id,
        $sub_module_id = ''
    ) {
        if ( ! ($user instanceof CB_User) || is_null($module_id)
             || (strlen($module_id) == 0)
             || is_null($unique_id)
             || (strlen($unique_id) == 0)
        ) {
            // データ不正
            assert('FALSE');

            return null;
        }

        $row = $this->_getNotifyDataRow($user, $module_id, $sub_module_id,
            $unique_id);
        if ( ! is_array($row)) {
            return null;
        }

        // 通知データプロパティを取得
        return $this->_getNotifyDataPropertiesObject($row);
    }

    function getNotifyDataPropertiesFast(
        $user,
        $module_id,
        $unique_id,
        $sub_module_id = ''
    ) {
        if ( ! ($user instanceof CB_User) || 0 == strlen($module_id)
             || 0 == strlen($unique_id)
        ) {
            return null;
        }

        $data_ary = $this->_getNotifyDataRow($user, $module_id, $sub_module_id,
            $unique_id);
        if ( ! is_array($data_ary) || 0 == count($data_ary)) {
            return null;
        }

        return $data_ary;
    }

    function getNotifyDataListPropertiesByUser(
        $users,
        $module_id,
        $unique_id,
        $sub_module_id = ''
    ) {
        if ( ! is_array($users) || 0 == count($users) || 0 == strlen($module_id)
             || 0 == strlen($unique_id)
        ) {
            return null;
        }

        $data_ary_list = $this->_getNotifyDataRowListByUser($users, $module_id,
            $sub_module_id, $unique_id, 'col_user');
        if ( ! is_array($data_ary_list) || 0 == count($data_ary_list)) {
            return null;
        }

        return $data_ary_list;
    }

    /**
     * 指定されたIDの通知データのプロパティを取得
     *
     * @param   string $notify_id 通知データID
     * @param   string $user_id
     * @param boolean  $is_to_me  Filter by category "To me" or not. By default, "To me" notification is not filtered
     *
     * @return  GRN_Notification_Data|null  通知データプロパティ（GRN_Notification_Data）or 登録されてない場合はnull
     */
    function getNotifyDataPropertiesByNotifyId(
        $notify_id,
        $user_id,
        bool $is_to_me = false
    ) {
        $ret = null;
        if (is_null($notify_id) || (strlen($notify_id) == 0)
            || is_null($user_id)
            || (strlen($user_id) == 0)
        ) {
            // データ不正
            assert('FALSE');

            return $ret;
        }
        // 通知データの取得
        $rowlist = $this->getDataRowListByNotifyIdList([$notify_id], $user_id,
            $is_to_me);
        if (count($rowlist) == 0) {
            return $ret;
        }
        $row = $rowlist[$notify_id];

        // 通知データプロパティを取得
        $ret = $this->_getNotifyDataPropertiesObject($row, $is_to_me);

        return $ret;
    }

    /**
     * 通知データをDBに登録
     * すでに存在していた場合は何もしない
     *
     * @param   CB_User               $user             ユーザーオブジェクト(CB_User)
     * @param   GRN_Notification_Data $data_object      通知内容(GRN_Notification_Data)
     * @param   boolean               $b_no_add_history 通知履歴未登録フラグ
     */
    function addNotifyData($user, $data_object, $b_no_add_history = false)
    {
        if ( ! ($user instanceof CB_User)
             ||
             ! ($data_object instanceof GRN_Notification_Data)
        ) {
            return;
        }

        $module_id = $data_object->getModuleId();
        $unique_id = $data_object->getUniqueId();
        if (0 == strlen($module_id) || 0 == strlen($unique_id)) {
            return;
        }

        $savedays = null;
        $result = false;
        $personal_config = $this->getPersonalConfig($user);
        $personal_config->getSaveDays('notify', $savedays);
        $delete_unread = $personal_config->getDeleteUnread();
        if ( ! $delete_unread) {
            if ($savedays == 0 && $data_object->isStatusConfirmed()) {
                $result = true;
            } else {
                $result = $this->_setNotifyData($user, $data_object,
                    'insert ignore into');
            }
        } else {
            $timestamp = $data_object->getTimestampData();
            $timestamp_now = new CB_TimeStamp();
            $timestamp_now->unix_ts = time();
            if ((intval($savedays) >= 0
                 && $timestamp_now->unix_ts - $timestamp->unix_ts
                    < intval($savedays) * 86400)
                || intval($savedays) === -1
            ) {
                $result = $this->_setNotifyData($user, $data_object,
                    'insert ignore into');
            }
        }

        if ( ! $b_no_add_history && $result == true) {
            if ($data_object->isStatusConfirmed()) {
                $timestamp = $data_object->getTimeStampData();
                $old_timestamp = $timestamp->unix_ts;
                $old_status = $data_object->getStatusData();

                $timestamp = new CB_TimeStamp();
                $timestamp->unix_ts = time();
                $data_object->setTimeStampData($timestamp);
                $data_object->setStatusToUnread();
                $this->modifyHistoryData($user, $data_object, true);

                $timestamp->unix_ts = $old_timestamp;
                $data_object->setTimeStampData($timestamp);
                $data_object->setStatusData($old_status);
            }
        }
    }

    /**
     * @param CB_User $user
     * @param array   $data_array_list
     * @param bool    $b_no_add_history
     */
    function addNotifyDataListByUniqueId(
        $user,
        $data_array_list,
        $b_no_add_history = false
    ) {
        if ( ! ($user instanceof CB_User)
             ||
             ! is_array($data_array_list)
             || 0 == count($data_array_list)
        ) {
            return;
        }

        $ret = null;
        $add_data_ary_list = [];
        $user_id = $user->getOID();
        foreach ($data_array_list as $unique_id => $data_ary) {
            $savedays = null;
            $personal_config = $this->getPersonalConfig($user);
            $delete_unread = $personal_config->getDeleteUnread();
            $personal_config->getSaveDays('notify', $savedays);
            if ($delete_unread && intval($savedays) >= 0) {
                $timestamp_notified = $data_ary['col_timestamp'];
                $timestamp_now = new CB_TimeStamp();
                $timestamp_now->unix_ts = time();
                if ($timestamp_now->unix_ts - $timestamp_notified
                    >= intval($savedays) * 86400
                ) {
                    continue;
                }
            }
            $add_data_ary_list[$unique_id] = $data_ary;
        }

        if (is_array($add_data_ary_list) && count($add_data_ary_list) > 0) {
            $this->_setNotifyDataListByUniqueId($user, $add_data_ary_list,
                'insert ignore into');
            $ret = true;
        }

        if ( ! $b_no_add_history && $ret) {
            $data_object = new GRN_Notification_Data();
            $timestamp = new CB_TimeStamp();

            foreach ($data_array_list as $data_array) {
                if (GRN_NOTIFICATION_DATA_STATUS_CONFIRM
                    == $data_array['col_status']
                ) {
                    $timestamp->unix_ts = $data_array['col_timestamp'];

                    $data_object->setModuleId($data_array['col_module_id']);
                    $data_object->setSubModuleId($data_array['col_sub_module_id']);
                    $data_object->setUniqueId($data_array['col_unique_id']);
                    $data_object->setOrgDataString($data_array['col_org_data']);

                    $data_object->setSubjectData($data_array['col_subject'],
                        $data_array['col_subject_f'],
                        $data_array['col_subject_b'],
                        $data_array['col_subject_url'],
                        $data_array['col_subject_icon']);
                    $data_object->setAbstractData($data_array['col_abstract'],
                        $data_array['col_abstract_f'],
                        $data_array['col_abstract_b'],
                        $data_array['col_abstract_url'],
                        $data_array['col_abstract_icon']);
                    $data_object->setSenderData($data_array['col_sender_name'],
                        $data_array['col_sender_id'],
                        $data_array['col_sender_url'],
                        $data_array['col_group_name']);
                    $data_object->setTimeStampData($timestamp);
                    $data_object->setStatusToUnread();

                    $data_object->setAttachedFlag($data_array['col_attached']);
                    $data_object->setPopupFlag($data_array['col_popup']);
                    $data_object->setSpaceId($data_array['col_space_id']);
                    $data_object->setSpaceName($data_array['col_space_name']);
                    $data_object->setEventStartTs($data_array['col_event_start_ts']);

                    $this->modifyHistoryData($user, $data_object, true);
                }
            }
        }
    }

    /**
     * @param GRN_Notification_Data $data
     * @param                       $notifyList
     */
    public function sendNotificationData(
        GRN_Notification_Data $data,
        $notifyList
    ) {
        if (count($notifyList) === 0) {
            return;
        }

        require_once("notification/dao/GrnNotificationDAO.csp");
        $dao = new GrnNotificationNotifyDAO();
        $dao->sendNotificationData($data, $notifyList);
    }

    /**
     * 通知データを更新
     * 存在していなかった場合に追加するかどうか指定できる
     * 確認済み以外から確認済みに変更する際、自動的に通知履歴データを追加する
     * 　通知履歴への追加をしたくないときはフラグで指定できる
     *
     * @param   CB_User               $user             通知先ユーザーオブジェクト(CB_User)
     * @param   GRN_Notification_Data $data_object      通知内容(GRN_Notification_Data)
     * @param   boolean               $b_add            存在しない場合に追加するか
     * @param   boolean               $b_no_add_history 通知履歴自動追加を行わない
     *
     * @return  mixed       通知データのアップデートが成功すればTRUE or 通知データがなければnull or 通知フィルターにより追加に失敗するとFALSE
     */
    function modifyNotifyData(
        $user,
        $data_object,
        $b_add,
        $b_no_add_history = true
    ) {
        if ( ! ($user instanceof CB_User)
             || ! ($data_object instanceof GRN_Notification_Data)
        ) {
            return null;
        }

        $module_id = $data_object->getModuleId();
        $unique_id = $data_object->getUniqueId();
        $sub_module_id = $data_object->getSubModuleId();

        if (0 == strlen($module_id)
            || 0 == strlen($unique_id)
        ) {
            return null;
        }

        $data_array = $this->_getNotifyDataRow($user, $module_id,
            $sub_module_id, $unique_id);
        if ( ! is_null($data_array)) {
            $data_array['col_action_id'] = $data_object->getActionId();
        }

        $notify_savedays = null;
        $history_savedays = null;
        $personal_config = $this->getPersonalConfig($user);
        $personal_config->getSaveDays('notify', $notify_savedays);
        $personal_config->getSaveDays('history', $history_savedays);
        $delete_unread = $personal_config->getDeleteUnread();

        $to_me_data_array = $this->_getNotifyDataRow($user, $module_id,
            $sub_module_id, $unique_id, true);

        $to_me_data_object = null;
        if (is_array($to_me_data_array) && $to_me_data_array) {
            $to_me_data_object
                = $this->_getNotifyDataPropertiesObject($to_me_data_array,
                true);
            $to_me_data_object->setStatusToConfirm();
        }

        $ret = null;
        $old_data_array = null;
        $old_to_me_data_array = null;

        if (is_null($data_array)) {
            if ($b_add) {
                if ($delete_unread && intval($notify_savedays) >= 0) {
                    $timestamp_notified = $data_object->getTimeStampData();
                    $timestamp_now = new CB_TimeStamp();
                    $timestamp_now->unix_ts = time();
                    if ($timestamp_now->unix_ts - $timestamp_notified->unix_ts
                        < intval($notify_savedays) * 86400
                    ) {
                        $ret = $this->_setNotifyData($user, $data_object,
                            'insert into');
                    } else {
                        $b_no_add_history = true;
                    }
                } else {
                    $ret = $this->_setNotifyData($user, $data_object,
                        'insert into');
                }
            }
        } elseif ($history_savedays == 0 && $data_object->isStatusConfirmed()) {
            $data_array['col_status'] = 'confirmed';
            $this->_updateNotifyData($user, $data_array, $data_object,
                'modify');

            if ($to_me_data_object) {
                $to_me_data_array['col_status'] = 'confirmed';
                $this->_updateNotifyData($user, $to_me_data_array,
                    $to_me_data_object, 'modify', true);
            }

            $ret = true;
        } else {
            if ( ! $b_no_add_history) {
                $old_data_array = $data_array;
            }

            $this->_updateNotifyData($user, $data_array, $data_object,
                'modify');

            if ($to_me_data_object) {
                if ( ! $b_no_add_history) {
                    $old_to_me_data_array = $to_me_data_array;
                }

                $this->_updateNotifyData($user, $to_me_data_array,
                    $to_me_data_object, 'modify', true);
            }

            $ret = true;
        }

        if ( ! $b_no_add_history) {
            if ($data_object->isStatusConfirmed()) {
                $timestamp = $data_object->getTimeStampData();
                $old_timestamp = $timestamp->unix_ts;
                $old_status = $data_object->getStatusData();

                $timestamp = new CB_TimeStamp();
                $timestamp->unix_ts = time();
                $data_object->setTimeStampData($timestamp);

                if ( ! is_null($old_data_array)) {
                    $data_object->setStatusData($old_data_array['col_status']);
                } else {
                    $data_object->setStatusToUnread();
                }

                $this->modifyHistoryData($user, $data_object, true);

                $timestamp->unix_ts = $old_timestamp;
                $data_object->setTimeStampData($timestamp);
                $data_object->setStatusData($old_status);
            }

            if ($to_me_data_object) {
                $timestamp = $to_me_data_object->getTimeStampData();
                $old_timestamp = $timestamp->unix_ts;
                $old_status = $to_me_data_object->getStatusData();

                $timestamp = new CB_TimeStamp();
                $timestamp->unix_ts = time();
                $to_me_data_object->setTimeStampData($timestamp);

                if ( ! is_null($old_to_me_data_array)) {
                    $to_me_data_object->setStatusData($old_to_me_data_array['col_status']);
                } else {
                    $to_me_data_object->setStatusToUnread();
                }

                $this->modifyHistoryData($user, $to_me_data_object, true, true);

                $timestamp->unix_ts = $old_timestamp;
                $to_me_data_object->setTimeStampData($timestamp);
                $to_me_data_object->setStatusData($old_status);
            }
        }

        return $ret;
    }

    /**
     * @param CB_User[]             $users
     * @param GRN_Notification_Data $data_obj
     * @param bool                  $b_add
     * @param bool                  $b_no_add_history
     *
     * @return bool|null
     */
    function modifyNotifyDataListByUser(
        $users,
        $data_obj,
        $b_add,
        $b_no_add_history = true
    ) {
        if ( ! is_array($users) || 0 == count($users)
             ||
             ! ($data_obj instanceof GRN_Notification_Data)
        ) {
            return null;
        }

        $module_id = $data_obj->getModuleId();
        $unique_id = $data_obj->getUniqueId();
        $sub_module_id = $data_obj->getSubModuleId();
        if (0 == strlen($module_id) || 0 == strlen($unique_id)) {
            return null;
        }

        $data_ary_list = $this->_getNotifyDataRowListByUser($users, $module_id,
            $sub_module_id, $unique_id, 'col_user');

        $add_users = [];
        /** @var CB_User[] $delete_users */
        $delete_users = [];
        /** @var CB_User[] $update_users */
        $update_users = [];
        $add_history_users = [];

        $delete_data_ary_list = [];
        $update_data_ary_list = [];

        $user_ids = array_keys($users);

        foreach ($user_ids as $user_id) {
            $user = $users[$user_id];
            if ( ! ($user instanceof CB_User)) {
                return null;
            }

            $history_savedays = null;
            $notify_savedays = null;
            $personal_config = $this->getPersonalConfig($user);
            $personal_config->getSaveDays('history', $history_savedays);
            $personal_config->getSaveDays('notify', $notify_savedays);
            $delete_unread = $personal_config->getDeleteUnread();

            if ( ! array_key_exists($user_id, $data_ary_list)) {
                if ($delete_unread && intval($notify_savedays) >= 0) {
                    $timestamp_notified = $data_obj->getTimestampData();
                    $timestamp_now = new CB_TimeStamp();
                    $timestamp_now->unix_ts = time();
                    if ($timestamp_now->unix_ts - $timestamp_notified->unix_ts
                        < intval($notify_savedays) * 86400
                    ) {
                        $add_users[$user_id] = $user;
                    }
                } else {
                    $add_users[$user_id] = $user;
                }
            } elseif (0 == $history_savedays
                      && $data_obj->isStatusConfirmed()
            ) {
                $delete_users[$user_id] = $user;
                $data_ary
                    = $data_ary_list[$user_id];
                $delete_data_ary_list[$user_id][$data_ary['_id']] = $data_ary;
            } else {
                $update_users[$user_id] = $user;
                $data_ary
                    = $data_ary_list[$user_id];
                $update_data_ary_list[$user_id][$data_ary['_id']] = $data_ary;
            }

            if (array_key_exists($user_id, $data_ary_list)) {
                $status = $data_ary_list[$user_id]['col_status'];
                $add_history_users[$status][$user_id] = $user;
            } else {
                $add_history_users['unread'][$user_id] = $user;
            }
        }

        $ret = null;
        if (is_array($add_users) && 0 < count($add_users)) {
            if ($b_add) {
                $add_user_id_list = [];
                if ($data_obj->isStatusConfirmed()) {
                    foreach (array_keys($add_users) as $user_id) {
                        $user = $users[$user_id];
                        if ( ! ($user instanceof CB_User)) {
                            cb_throw_error(E_GRN_CMMN_NTFC_FAILED_TO_ADD_NOTIFY_DATA);
                        }
                        $add_user_id_list[] = $user_id;
                    }
                } else {
                    $add_user_id_list = array_keys($add_users);
                }

                $this->_setNotifyDataListByUser($add_user_id_list, $data_obj,
                    'insert into');
                $ret = true;
            }
        }

        if (is_array($delete_users) && 0 < count($delete_users)) {
            foreach ($delete_users as $delete_user) {
                $this->deleteNotifyDataByNotifyIdListByUser($delete_user->getOID(),
                    array_keys($delete_data_ary_list[$delete_user->getOID()]));
            }
        }

        if (is_array($update_users) && 0 < count($update_users)) {
            foreach ($update_users as $update_user) {
                $up_uid = $update_user->getOID();

                $notify_id_list = array_keys($update_data_ary_list[$up_uid]);
                $data_ary
                    = $update_data_ary_list[$up_uid][$notify_id_list[0]];
                $tmp = $data_ary;

                unset($tmp['_id']);
                unset($tmp['col_user']);
                $this->_setNotifyDataProperties($tmp, $data_obj);

                $this->_updateNotifyDataListByUser($update_user, $tmp,
                    $notify_id_list, 'modify', $data_obj);
            }
            $ret = true;
        }

        if ( ! $b_no_add_history) {
            if ($data_obj->isStatusConfirmed()) {
                $timestamp = new CB_TimeStamp();
                $timestamp->unix_ts = time();
                $data_obj->setTimeStampData($timestamp);

                foreach (array_keys($add_history_users) as $status) {
                    $data_obj->setStatusData($status);

                    $this->modifyHistoryDataListByUser($add_history_users[$status],
                        $data_obj, true);
                }
            }
        }

        return $ret;
    }

    /**
     * 指定されたデータの通知データを全ユーザー分一括削除する
     * 存在していなかった場合は何もしない
     *
     * @param   string $module_id     モジュールID
     * @param   string $unique_id     ユニークID
     * @param   string $sub_module_id サブモジュールID
     *
     * @return  boolean     削除した、または存在しなかったらTRUE
     */
    function deleteNotifyDataForAllUser(
        $module_id,
        $unique_id,
        $sub_module_id = ''
    ) {
        if (is_null($module_id) || (strlen($module_id) == 0)
            || is_null($unique_id)
            || (strlen($unique_id) == 0)
        ) {
            assert('FALSE');

            return false;
        }

        $connections = grn_notification_get_connections();
        $connection_keys = array_keys($connections);

        foreach ($connection_keys as $connection_key) {
            $dbconn = $connections[$connection_key];

            $format = "SHOW TABLES LIKE '@S'";
            if (grn_check_table_merged()) {
                $condition = $dbconn->escapeLike('tab_grn_notification_notify');
            } else {
                $condition = $dbconn->escapeLike('tab_grn_notification_notify'
                                                 . CB_PERSISTENT_NAMESEPARATOR)
                             . '%';
            }
            $query = cb_queryf($dbconn, $format, $condition);
            $result = $dbconn->query($query);

            $user_tables = [];
            while ($row = $dbconn->fetch_row($result)) {
                $user_tables[] = $row[0];
            }

            foreach ($user_tables as $table) {
                $format
                    = "delete from ${table} where ((col_module_id='@S') and (col_sub_module_id='@S') and (col_unique_id='@S'))";
                $query = cb_queryf($dbconn, $format, $module_id, $sub_module_id,
                    $unique_id);

                $dbconn->query($query);
            }
        }

        return true;
    }

    /**
     * 指定されたユーザーの指定されたデータの通知データを削除
     * 存在していなかった場合は何もしない
     *
     * @param   CB_User $user          ユーザーオブジェクト(CB_User)
     * @param   string  $module_id     モジュールID
     * @param   string  $unique_id     ユニークID
     * @param   string  $sub_module_id サブモジュールID
     *
     * @return  boolean     削除した、または存在しなかったらTRUE
     */
    function deleteNotifyData(
        $user,
        $module_id,
        $unique_id,
        $sub_module_id = ''
    ) {
        if ( ! ($user instanceof CB_User) || 0 == strlen($module_id)
             || 0 == strlen($unique_id)
        ) {
            return false;
        }

        $dbconn = grn_notification_get_connection($user->getOID());

        $user_id = $user->getOID();
        $noti_tables = [
            'tab_grn_notification_notify',
            'tab_grn_notification_to_me'
        ];
        foreach ($noti_tables as $noti_table) {
            $mapping_name = grn_get_personal_tablename($user_id, $noti_table);
            $format
                = "delete from ${mapping_name} where ((col_user='@S') and (col_module_id='@S') and (col_unique_id='@S'))";
            $query = cb_queryf($dbconn, $format, $user_id, $module_id,
                $unique_id);

            $dbconn->query($query);
        }

        return true;
    }

    function deleteNotifyDataListByUser(
        $users,
        $module_id,
        $unique_id,
        $sub_module_id = ''
    ) {
        $uids = array_keys($users);

        $condition_format
            = "(col_user = '@S') AND (col_module_id='@S') AND (col_sub_module_id='@S') AND (col_unique_id='@S')";
        $format = "delete from %s where (%s)";

        $deleted_count = 0;
        foreach ($uids as $uid) {
            $dbconn = grn_notification_get_connection($uid);
            $condition = cb_queryf($dbconn, $condition_format, $uid,
                $module_id, $sub_module_id, $unique_id);
            $mapping_name = grn_get_personal_tablename($uid,
                'tab_grn_notification_notify');
            $query = sprintf($format, $mapping_name, $condition);
            $dbconn->query($query);
            $deleted_count += $dbconn->affected_rows();
        }

        return $deleted_count;
    }

    function deleteNotifyDataByNotifyId(
        $notify_id,
        $user_id,
        bool $is_to_me = false
    ) {
        if (0 == strlen($notify_id) || 0 == strlen($user_id)) {
            return false;
        }

        $dbconn = grn_notification_get_connection($user_id);
        $table = $is_to_me ? 'tab_grn_notification_to_me'
            : 'tab_grn_notification_notify';
        $mapping_name = grn_get_personal_tablename($user_id, $table);
        $format = "delete from ${mapping_name} where (_id='@S')";
        $query = cb_queryf($dbconn, $format, $notify_id);

        $dbconn->query($query);

        return true;
    }

    function deleteNotifyDataByNotifyIdListByUser($user_id, $notify_id_list)
    {
        if ( ! is_array($notify_id_list) || 0 == count($notify_id_list)
             || is_null($user_id)
             || 0 == strlen($user_id)
        ) {
            return false;
        }

        $dbconn = grn_notification_get_connection($user_id);

        $condition = [];
        foreach ($notify_id_list as $notify_id) {
            $condition[] = cb_queryf($dbconn, "(_id='@S')", $notify_id);
        }
        $condition = implode(' or ', $condition);

        $mapping_name = grn_get_personal_tablename($user_id,
            'tab_grn_notification_notify');
        $format = "delete from ${mapping_name} where (%s)";
        $query = sprintf($format, $condition);

        $dbconn->query($query);

        return true;
    }

    /**
     * @param CB_User      $user
     * @param CB_TimeStamp $start_ts
     */
    function deleteQueriedNotifyData($user, $start_ts)
    {
        assert('$start_ts instanceof CB_TimeStamp');

        if ($user instanceof CB_User) {
            $dbconn = grn_notification_get_connection($user->getOID());
            $condition = cb_queryf($dbconn,
                "col_user = '@S' AND col_timestamp < '@S'",
                $user->getOID(),
                $start_ts->unix_ts);
            $mapping_name = grn_get_personal_tablename($user->getOID(),
                'tab_grn_notification_notify');
            $format = "delete from ${mapping_name} where (%s)";
            $query = sprintf($format, $condition);
            $dbconn->query($query);
        } else {
            $connections = grn_notification_get_connections();
            $connection_keys = array_keys($connections);

            foreach ($connection_keys as $connection_key) {
                $dbconn = $connections[$connection_key];

                $format = "SHOW TABLES LIKE '@S'";
                if (grn_check_table_merged()) {
                    $like_condition
                        = $dbconn->escapeLike('tab_grn_notification_notify');
                } else {
                    $like_condition
                        = $dbconn->escapeLike('tab_grn_notification_notify'
                                              . CB_PERSISTENT_NAMESEPARATOR)
                          . '%';
                }
                $query = cb_queryf($dbconn, $format, $like_condition);
                $result = $dbconn->query($query);
                $user_tables = [];
                while ($row = $dbconn->fetch_row($result)) {
                    $user_tables[] = $row[0];
                }
                $condition = cb_queryf($dbconn, "col_timestamp < '@S'",
                    $start_ts->unix_ts);

                foreach ($user_tables as $table) {
                    $format = "delete from ${table} where (%s)";
                    $query = sprintf($format, $condition);
                    $dbconn->query($query);
                }
            }
        }
    }

    /**
     * @param CB_User      $user
     * @param CB_TimeStamp $start_ts
     */
    function deleteQueriedHistoryData($user, $start_ts)
    {
        assert('$start_ts instanceof CB_TimeStamp');

        if ($user instanceof cb_user) {
            $dbconn = grn_notification_get_connection($user->getOID());
            $condition = cb_queryf($dbconn,
                "col_user = '@S' AND col_timestamp < '@S'",
                $user->getOID(),
                $start_ts->unix_ts);
            $mapping_name = grn_get_personal_tablename($user->getOID(),
                'tab_grn_notification_history');
            $format = "delete from ${mapping_name} where (%s)";
            $query = sprintf($format, $condition);

            $dbconn->query($query);
        } else {
            $connections = grn_notification_get_connections();
            $connection_keys = array_keys($connections);

            foreach ($connection_keys as $connection_key) {
                $dbconn = $connections[$connection_key];

                $format = "SHOW TABLES LIKE '@S'";
                if (grn_check_table_merged()) {
                    $like_condition
                        = $dbconn->escapeLike('tab_grn_notification_history');
                } else {
                    $like_condition
                        = $dbconn->escapeLike('tab_grn_notification_history'
                                              . CB_PERSISTENT_NAMESEPARATOR)
                          . '%';
                }
                $query = cb_queryf($dbconn, $format, $like_condition);
                $result = $dbconn->query($query);
                $condition = cb_queryf($dbconn, "col_timestamp < '@S'",
                    $start_ts->unix_ts);

                $user_tables = [];
                while ($row = $dbconn->fetch_row($result)) {
                    $user_tables[] = $row[0];
                }

                foreach ($user_tables as $table) {
                    $format = "delete from ${table} where (%s)";
                    $query = sprintf($format, $condition);
                    $dbconn->query($query);
                }
            }
        }
    }

    /**
     * Confirm notification by notification row
     *
     * @param array        $data_row       Notification data row
     * @param CB_TimeStamp $timestamp      Time view notification record
     * @param CB_User      $user
     * @param string       $action_id      Notification action ID
     * @param bool         $is_add_history Is add data to table history
     * @param bool         $is_to_me       Filter by category "To me" or not. By default, "To me" notification is not filtered
     *
     * @return null|GRN_Notification_Data
     */
    private function confirmNotifyDataByNotifyRow
    (
        array $data_row,
        CB_TimeStamp $timestamp,
        CB_User $user,
        string $action_id = null,
        bool $is_add_history = false,
        bool $is_to_me = false
    ) {
        /**
         * @var GRN_Notification_Data $notification_data
         */
        $notification_data = $this->_getNotifyDataPropertiesObject($data_row);
        if ( ! $notification_data) {
            return null;
        }

        $notification_data->setStatusToConfirm();
        if ( ! is_null($action_id)) {
            $notification_data->setActionId($action_id);
        }

        $save_days = null;
        $personal_config = $this->getPersonalConfig($user);
        $personal_config->getSaveDays('notify', $save_days);
        $delete_unread = $personal_config->getDeleteUnread();
        $user_id = $user->getOID();
        $can_delete = false;
        $can_update = false;

        if ($delete_unread) {
            if (intval($save_days) >= 0
                && $timestamp->unix_ts - $data_row['col_timestamp']
                   >= intval($save_days) * 86400
            ) {
                $can_delete = true;
            } else {
                $can_update = true;
            }
        } else {
            if (0 == $save_days) {
                $can_delete = true;
            } else {
                $can_update = true;
            }
        }

        $notification_data_related = null;
        $module_id = $notification_data->getModuleId();
        $sub_module_id = $notification_data->getSubModuleId();
        $unique_id = $notification_data->getUniqueId();
        $row_related = $this->_getNotifyDataRow($user, $module_id,
            $sub_module_id, $unique_id, ! $is_to_me);

        if (($can_update || $can_delete) && is_array($row_related)
            && $row_related
        ) {
            $notification_data_related
                = $this->_getNotifyDataPropertiesObject($row_related,
                ! $is_to_me);
            $notification_data_related->setStatusToConfirm();
        }

        if ($can_delete) {
            $this->deleteNotifyDataByNotifyId($data_row['_id'], $user_id,
                $is_to_me);
            if ($notification_data_related) {
                $this->deleteNotifyDataByNotifyId($notification_data_related->getId(),
                    $user_id, ! $is_to_me);
            }
        }

        if ($can_update) {
            $this->_updateNotifyData($user, $data_row, $notification_data,
                'confirm', $is_to_me);
            if ($notification_data_related) {
                $this->_updateNotifyData($user, $row_related,
                    $notification_data_related, 'confirm', ! $is_to_me);
            }
        }
        if ($is_add_history) {
            if ($notification_data) {
                $status = $data_row["col_status"];
                $action_id = $data_row["col_action_id"];
                $this->addNotificationHistory($user, $notification_data,
                    $timestamp, $status, $action_id, $is_to_me);
            }

            if ($notification_data_related) {
                $status = $row_related["col_status"];
                $action_id = $row_related["col_action_id"];
                $this->addNotificationHistory($user, $notification_data_related,
                    $timestamp, $status, $action_id, ! $is_to_me);
            }
        }

        return $notification_data;
    }

    /**
     * Add notification history
     *
     * @param CB_User               $user
     * @param GRN_Notification_Data $notification_data Notification data object
     * @param CB_TimeStamp          $timestamp         Time view notification record
     * @param string|NULL           $status            Notification status
     * @param string|NULL           $action            Notification action
     * @param bool                  $is_to_me          Filter by category "To me" or not. By default, "To me" notification is not filtered
     */
    private function addNotificationHistory(
        CB_User $user,
        GRN_Notification_Data $notification_data,
        CB_TimeStamp $timestamp,
        string $status = null,
        string $action = null,
        bool $is_to_me = false
    ) {
        $notification_data->setTimeStampData($timestamp);
        if ( ! is_null($status)) {
            $notification_data->setStatusData($status);
        } else {
            $notification_data->setStatusToUnread();
        }

        if ( ! is_null($action)) {
            $notification_data->setActionId($action);
        }

        $this->modifyHistoryData($user, $notification_data, true, $is_to_me);
    }

    /**
     * 通知データの確認処理
     * 閲覧等された場合に状態を確認済みにする
     *
     * @param   CB_User      $user             通知先ユーザーオブジェクト(CB_User)
     * @param   string       $module_id        モジュールID
     * @param   string       $unique_id        ユニークID
     * @param   CB_TimeStamp $timestamp        確認（閲覧）処理日時（CB_TimeStamp）
     * @param   boolean      $b_no_add_history 通知履歴自動追加を行わない
     * @param   string       $sub_module_id    サブモジュールID
     *
     * @return  mixed       通知データID or null
     */
    function confirmNotifyData(
        $user,
        $module_id,
        $unique_id,
        $timestamp,
        $b_no_add_history = false,
        $sub_module_id = ''
    ) {
        if ( ! ($user instanceof CB_User) || is_null($module_id)
             || (strlen($module_id) == 0)
             || is_null($unique_id)
             || (strlen($unique_id) == 0)
        ) {
            // データ不正
            assert('FALSE');

            return null;
        }

        // 通知データの取得
        $row = $this->_getNotifyDataRow($user, $module_id, $sub_module_id,
            $unique_id);
        if ( ! is_array($row)) {
            return null;
        }

        $action_id = GRN_NOTIFICATION_ACTION_GENERAL_ID;
        switch ($row["col_action_id"]) {
            case GRN_NOTIFICATION_ACTION_STATUS_RESPONSE_ID:
                $action_id = GRN_NOTIFICATION_ACTION_STATUS_RESPONSE_ID;
                break;

            case GRN_NOTIFICATION_ACTION_FACILITY_REJECTED_ID:
                $action_id = GRN_NOTIFICATION_ACTION_FACILITY_REJECTED_ID;
                break;

            case GRN_NOTIFICATION_ACTION_FACILITY_APPROVED_ID:
                $action_id = GRN_NOTIFICATION_ACTION_FACILITY_APPROVED_ID;
                break;

            case GRN_NOTIFICATION_ACTION_FACILITY_REQUESTED_ID:
                $action_id = GRN_NOTIFICATION_ACTION_FACILITY_REQUESTED_ID;
                break;
        }

        $this->confirmNotifyDataByNotifyRow($row, $timestamp, $user, $action_id,
            ! $b_no_add_history);

        return $row['_id'];
    }

    /**
     * 指定されたIDの通知データの確認処理
     *
     * @param   string       $notify_id        通知データID
     * @param   CB_TimeStamp $timestamp        確認（閲覧）処理日時（CB_TimeStamp）
     * @param   string       $user_id
     * @param   boolean      $b_no_add_history 通知履歴自動追加を行わない
     * @param bool           $is_to_me         Filter by category "To me" or not. By default, "To me" notification is not filtered
     *
     * @return  boolean     成功したらTRUE、存在しなかったらFALSE
     */
    function confirmNotifyDataByNotifyId(
        $notify_id,
        & $timestamp,
        $user_id,
        $b_no_add_history = false,
        bool $is_to_me = false
    ) {
        if (is_null($notify_id) || (strlen($notify_id) == 0)
            || is_null($user_id)
            || (strlen($user_id) == 0)
        ) {
            // データ不正
            assert('FALSE');

            return false;
        }
        // 通知データの取得
        $row_list = $this->getDataRowListByNotifyIdList([$notify_id], $user_id,
            $is_to_me);
        if (count($row_list) == 0 || ! is_array($row_list[$notify_id])) {
            return false;
        }

        $row = $row_list[$notify_id];

        global $G_container_base;
        /** @var GRN_Uum $uum */
        $uum = $G_container_base->getInstance('uum');
        $user = $uum->getUser($user_id);
        $this->confirmNotifyDataByNotifyRow($row, $timestamp, $user, null,
            ! $b_no_add_history, $is_to_me);

        return true;
    }

    /**
     * 通知履歴データのプロパティを取得
     *
     * @param   object $user          通知先ユーザーオブジェクト(CB_User)
     * @param   string $module_id     モジュールID
     * @param   string $unique_id     ユニークID
     * @param   string $sub_module_id サブモジュールID
     *
     * @return  object      通知履歴データプロパティ（GRN_Notification_Data）or 登録されてない場合はnull
     */
    function getHistoryDataProperties(
        $user,
        $module_id,
        $unique_id,
        $sub_module_id = ''
    ) {
        if ( ! ($user instanceof CB_User) || is_null($module_id)
             || (strlen($module_id) == 0)
             || is_null($unique_id)
             || (strlen($unique_id) == 0)
        ) {
            // データ不正
            assert('FALSE');

            return null;
        }

        // 通知履歴データの取得
        $row = $this->_getHistoryDataRow($user, $module_id, $sub_module_id,
            $unique_id);
        if ( ! is_array($row)) {
            return null;
        }

        // 通知履歴データプロパティを取得
        return $this->_getNotifyDataPropertiesObject($row);
    }

    /**
     *
     * @param   string $notify_history_id
     * @param   string $user_id
     *
     * @return  GRN_Notification_Data|null
     */
    function getHistoryDataPropertiesById($notify_history_id, $user_id)
    {
        $ret = null;
        if (is_null($notify_history_id) || (strlen($notify_history_id) == 0)
            || is_null($user_id)
            || (strlen($user_id) == 0)
        ) {
            // データ不正
            assert('FALSE');

            return $ret;
        }
        // 通知データの取得
        $rowlist
            = $this->getHistoryDataRowListByNotifyIdList([$notify_history_id],
            $user_id);
        if (count($rowlist) == 0) {
            return $ret;
        }
        $row = $rowlist[$notify_history_id];

        // 通知データプロパティを取得
        $ret = $this->_getNotifyDataPropertiesObject($row);

        return $ret;
    }

    /**
     * 通知履歴データを更新
     * 存在していなかった場合に追加するかどうか指定する
     *
     * @param   CB_User               $user     通知先ユーザーオブジェクト(CB_User)
     * @param   GRN_Notification_Data $data_obj 通知内容(GRN_Notification_Data)
     * @param   boolean               $b_add    存在しない場合に追加するか
     * @param   bool                  $is_to_me Filter by category "To me" or not. By default, "To me" notification is not filtered
     *
     * @return  mixed       通知履歴データID or null
     *
     */
    function modifyHistoryData($user, $data_obj, $b_add, bool $is_to_me = false)
    {
        if ( ! ($user instanceof CB_User)
             ||
             ! ($data_obj instanceof GRN_Notification_Data)
        ) {
            return null;
        }

        $module_id = $data_obj->getModuleId();
        $unique_id = $data_obj->getUniqueId();
        $sub_module_id = $data_obj->getSubModuleId();
        if (0 == strlen($module_id) || 0 == strlen($unique_id)) {
            return null;
        }

        $data_ary = $this->_getHistoryDataRow($user, $module_id, $sub_module_id,
            $unique_id, $is_to_me);

        // データの保存期間取得
        $savedays = null;
        $personal_config = $this->getPersonalConfig($user);
        $personal_config->getSaveDays('history', $savedays);
        if (is_null($data_ary)) {
            if ($b_add && (intval($savedays) != 0 || is_null($savedays))) {
                $this->_setHistoryData($user, $data_obj, 'insert ignore into',
                    $is_to_me);
            }
            $ret = true;
        } else {
            $this->_updateHistoryData($user, $data_ary, $data_obj, $is_to_me);
            $ret = true;
        }

        return $ret;
    }

    /**
     * @param CB_User[]             $users
     * @param GRN_Notification_Data $data_obj
     * @param bool                  $b_add
     *
     * @return bool|null
     */
    function modifyHistoryDataListByUser($users, $data_obj, $b_add)
    {
        if ( ! is_array($users) || 0 == count($users)
             ||
             ! ($data_obj instanceof GRN_Notification_Data)
        ) {
            return null;
        }

        $module_id = $data_obj->getModuleId();
        $unique_id = $data_obj->getUniqueId();
        $sub_module_id = $data_obj->getSubModuleId();
        if (0 == strlen($module_id) || 0 == strlen($unique_id)) {
            return null;
        }

        $data_ary_list = $this->_getHistoryDataRowListByUser($users, $module_id,
            $sub_module_id, $unique_id, 'col_user');

        if ($b_add) {
            $add_user_id_list = [];
            if ( ! is_array($data_ary_list) || 0 == count($data_ary_list)) {
                foreach ($users as $user_id => $user) {
                    if ( ! ($user instanceof CB_User)) {
                        cb_throw_error(E_GRN_CMMN_NTFC_FAILED_TO_ADD_HISTORY_DATA);
                    }

                    $savedays = null;
                    $personal_config = $this->getPersonalConfig($user);
                    $personal_config->getSaveDays('history', $savedays);
                    if (is_null($savedays) || 0 != intval($savedays)) {
                        $add_user_id_list[] = $user_id;
                    }
                }
                $this->_setHistoryDataListByUser($add_user_id_list, $data_obj,
                    'insert into');
            } else {
                $add_user_id_list = array_keys($users);

                $this->_setHistoryDataListByUser($add_user_id_list, $data_obj,
                    'insert into');
            }
        }

        if (is_array($data_ary_list) && 0 < count($data_ary_list)) {
            foreach ($data_ary_list as $uid => $data_ary) {
                $this->_updateHistoryDataListByUser($uid, $data_ary, $data_obj);
            }
        }

        return true;
    }

    /**
     * 指定されたユーザーの指定されたデータの通知履歴データを削除
     * 存在していなかった場合は何もしない
     *
     * @param   CB_User $user          ユーザーオブジェクト(CB_User)
     * @param   string  $module_id     モジュールID
     * @param   string  $unique_id     ユニークID
     * @param   string  $sub_module_id サブモジュールID
     *
     * @return  boolean     削除した、または存在しなかったらTRUE
     */
    function deleteHistoryData(
        $user,
        $module_id,
        $unique_id,
        $sub_module_id = ''
    ) {
        if ( ! ($user instanceof CB_User) || 0 == strlen($module_id)
             || 0 == strlen($unique_id)
        ) {
            return false;
        }

        $dbconn = grn_notification_get_connection($user->getOID());

        $user_id = $user->getOID();
        $mapping_name = grn_get_personal_tablename($user_id,
            'tab_grn_notification_history');
        $format
            = "delete from ${mapping_name} where ((col_user='@S') and (col_module_id='@S') and (col_unique_id='@S'))";
        $query = cb_queryf($dbconn, $format, $user_id, $module_id,
            $unique_id);

        $dbconn->query($query);

        return true;
    }

    /**
     * 指定されたIDの通知履歴データを削除
     * 存在していなかった場合は何もしない
     *
     * @param   string $history_id 通知履歴データID
     * @param   string $user_id
     *
     * @return  boolean     削除した、または存在しなかったらTRUE
     */
    function deleteHistoryDataByHistoryId($history_id, $user_id)
    {

        if (is_null($history_id) || (strlen($history_id) == 0)
            || is_null($user_id)
            || (strlen($user_id) == 0)
        ) {
            // データ不正
            assert('FALSE');

            return false;
        }

        $dbconn = grn_notification_get_connection($user_id);

        $mapping_name = grn_get_personal_tablename($user_id,
            'tab_grn_notification_history');
        $format
            = "delete from ${mapping_name} where (_id='@S'  AND col_user = '@S' )";
        $query = cb_queryf($dbconn, $format, $history_id, $user_id);

        $dbconn->query($query);

        return true;
    }


    /**
     * ユーザーの通知データ一覧のデータ数を取得
     *
     * @param   string   $data_type              データタイプ（通知データ：'notify', 通知履歴データ：'history', 最新情報データ:'whatsnew')
     * @param   CB_User  $user                   ユーザーオブジェクト
     * @param   string   $module_id              取得するモジュールID。デフォルト:null
     * @param   object   $start_ts               データ検索範囲の開始日時（この値自体を含む）。nullで指定なし。デフォルト:null
     * @param   object   $last_ts                データ検索範囲の終了日時（この値自体は含まれない）。nullで指定なし。デフォルト:null
     * @param   string   $sub_query              サブ検索条件文。デフォルト:null
     * @param   string[] $exclude_sub_module_ids list of sub_module_id to exclude notifications
     * @param   bool     $is_to_me               Filter by category "To me" or not. By default, "To me" notification is not filtered
     *
     * @return  mixed                 データ数
     */
    function getDataCount(
        $data_type,
        $user,
        $module_id = null,
        $start_ts = null,
        $last_ts = null,
        $sub_query = null,
        $exclude_sub_module_ids = [],
        bool $is_to_me = false
    ) {
        if ( ! is_object($user)) {
            // アクセス権チェック
            cb_throw_error(E_COMMON_ACCESS_DENIED);
        }

        if (is_null($data_type)) {
            // データ不正
            assert('FALSE');

            return 0;
        }

        // 通知データテーブルのローセット
        switch ($data_type) {
            case 'notify':
                $table_name = GRN_NOTIFICATION_NOTIFY_TABLE;
                break;

            case 'history':
                $table_name = $is_to_me ? GRN_NOTIFICATION_TO_ME_HISTORY_TABLE
                    : GRN_NOTIFICATION_HISTORY_TABLE;
                break;

            case 'whatsnew':
                $table_name = GRN_NOTIFICATION_NOTIFY_TABLE;
                break;

            default:
                // データ不正
                assert('FALSE');

                return 0;

        }

        $table_name = grn_get_personal_tablename($user->getOID(), $table_name);

        $dbconn = grn_notification_get_connection($user->getOID());

        $condition = [];
        // 指定されたユーザーのみ
        if ($user instanceof CB_User) {
            $condition[] = cb_queryf($dbconn, "col_user = '@S'",
                $user->getOID());
        }
        // 指定されたモジュールIDのみ
        if ( ! is_null($module_id) && (strlen($module_id) > 0)) {
            $condition[] = cb_queryf($dbconn, "col_module_id = '@S'",
                $module_id);
        }

        // Add a search condition of sub_module_id
        if ( ! empty($exclude_sub_module_ids)) {
            $condition[] = cb_queryf($dbconn, "col_sub_module_id NOT IN (@A)",
                $exclude_sub_module_ids);
        }

        // 最新情報は未読または更新状態のみ
        if ($data_type === 'whatsnew') {
            $condition[] = "col_read = 0";
        }

        // データ検索範囲の条件を追加
        if ($start_ts instanceof CB_TimeStamp) {
            $condition[] = sprintf("col_timestamp >= '%d'", $start_ts->unix_ts);
        }
        if ($last_ts instanceof CB_TimeStamp) {
            $condition[] = sprintf("col_timestamp < '%d'", $last_ts->unix_ts);
        }
        // サブ検索条件文を追加
        if ( ! is_null($sub_query) && 0 < strlen($sub_query)) {
            $condition[] = '( ' . $sub_query . ' )';
        }

        $query = '';
        if (count($condition) > 0) {
            $condition = implode(' and ', $condition);
            $format = "select COUNT(*) from " . "tab_" . $table_name
                      . " where (%s)";
            $query = sprintf($format, $condition);
        } else {
            $format = "select COUNT(*) from " . "tab_" . $table_name . ";";
            $query = $format;
        }

        if (cb_is_db_result($result = $dbconn->query($query))) {
            $row = $dbconn->fetch_row($result);
            if ( ! is_array($row) || 0 == count($row)) {
                return 0;
            }

            return $row[0];
        }

        return 0;
    }

    /**
     * @param CB_User     $user
     * @param string|null $module_id
     * @param int         $limit
     * @param bool        $is_to_me Filter by category "To me" or not. By default, "To me" notification is not filtered
     *
     * @return int
     */
    function getWhatsNewDataCount(
        $user,
        $module_id = null,
        $limit = GRN_NOTIFICATION_WHATSNEW_DATA_LIMIT,
        bool $is_to_me = false
    ) {
        $table = $is_to_me ? GRN_NOTIFICATION_NOTIFY_TO_ME_TABLE
            : GRN_NOTIFICATION_NOTIFY_TABLE;
        $table_name = grn_get_personal_tablename($user->getOID(), $table);

        $dbconn = grn_notification_get_connection($user->getOID());
        $condition = [];
        $condition[] = cb_queryf($dbconn, "col_user = '@S'", $user->getOID());
        $force_index = 'idx_user_read_ts_n';

        // 指定されたモジュールIDのみ
        if ( ! is_null($module_id) && (strlen($module_id) > 0)) {
            $condition[] = cb_queryf($dbconn, "col_module_id = '@S'",
                $module_id);
            $force_index = 'idx_user_module_read_ts_n';
        }

        $app_not_available = $this->getConditionApplicationNotAvailable($user);
        if (count($app_not_available) > 0) {
            $app_not_available = "(" . implode(',', $app_not_available) . ")";
            $condition[] = sprintf("col_module_id NOT IN %s",
                $app_not_available);
            $force_index = 'idx_user_module_read_ts_n';
        }

        $condition[] = "col_read = 0";
        $condition = implode(' and ', $condition);

        $format = 'select _id from tab_' . $table_name . ' force index('
                  . $force_index . ') where (%s)';
        $query = sprintf($format, $condition);
        $query = $dbconn->select_format($query, 0, $limit,
            CB_DATABASE_NO_LOCK);

        if (cb_is_db_result($result = $dbconn->query($query))) {
            return $row = $dbconn->num_rows($result);
        }

        return 0;
    }

    /**
     * ユーザーの通知データ一覧の取得
     *
     * @param   string       $data_type              データタイプ（通知データ：'notify', 通知履歴データ：'history', 最新情報データ:'whatsnew')
     * @param   CB_User      $user                   ユーザーオブジェクト
     * @param   string       $module_id              取得するモジュールID。デフォルト:null
     * @param   string       $sort                   ソートキー（'time'/'sender_name'）。デフォルト:'time'
     * @param   boolean      $reverse                ソート順。デフォルト:TRUE
     * @param   int          $offset                 表示位置。デフォルト:0
     * @param   int          $limit                  表示件数。デフォルト:20
     * @param   CB_TimeStamp $start_ts               データ検索範囲の開始日時（この値自体を含む）。nullで指定なし。デフォルト:null
     * @param   CB_TimeStamp $last_ts                データ検索範囲の終了日時（この値自体は含まれない）。nullで指定なし。デフォルト:null
     * @param   string       $sub_query              サブ検索条件文。デフォルト:null
     * @param   string[]     $exclude_sub_module_ids list of sub_module_id to exclude notifications
     *
     * @return  array   通知データのリスト
     */
    function &getDataList(
        $data_type,
        $user,
        $module_id = null,
        $sort = 'time',
        $reverse = true,
        $offset = 0,
        $limit = 20,
        $start_ts = null,
        $last_ts = null,
        $sub_query = null,
        $exclude_sub_module_ids = []
    ) {
        $order_by = 'col_timestamp';
        if ((strcmp($sort, 'name') == 0)
            || (strcmp($sort, 'sender_name') == 0)
        ) {
            // 名前でソート
            $order_by = 'col_sender_name';
        }
        $order_by .= $reverse ? ' DESC' : '';
        $order_by .= ', _id';
        $order_by .= $reverse ? ' DESC' : '';
        $add_condition = $sub_query;

        if ( ! ($user instanceof CB_User)) {
            // アクセス権を判定する
            cb_throw_error(E_COMMON_ACCESS_DENIED);
        }

        $datas = [];
        if (0 == strlen($data_type)) {
            return $datas;
        }

        $dbconn = grn_notification_get_connection($user->getOID());

        $conditions = [];
        switch ($data_type) {
            case 'notify':
                $table_name = grn_get_personal_tablename($user->getOID(),
                    'tab_grn_notification_notify');
                break;
            case 'history':
                $table_name = grn_get_personal_tablename($user->getOID(),
                    'tab_grn_notification_history');
                break;
            case 'whatsnew':
                if ( ! is_null($module_id) && (strlen($module_id) > 0)) {
                    $table_name = grn_get_personal_tablename($user->getOID(),
                            'tab_grn_notification_notify')
                                  . ' force index(idx_user_module_read_ts_n)';
                } else {
                    $table_name = grn_get_personal_tablename($user->getOID(),
                            'tab_grn_notification_notify')
                                  . ' force index(idx_user_read_ts_n)';
                }
                $conditions[] = '(col_read = 0)';
                break;
            default:
                {
                    $___ret = null;

                    return $___ret;
                }
        }

        // ユーザーIDを検索条件に追加する
        if ($user instanceof CB_User) {
            $conditions[] = cb_queryf($dbconn, "( col_user = '@S' )",
                $user->getOID());
        }
        // モジュールIDを検索条件を追加する
        if ( ! is_null($module_id) && (strlen($module_id) > 0)) {
            $conditions[] = cb_queryf($dbconn, "( col_module_id = '@S' )",
                $module_id);
        }
        // Add a search condition of sub_module_id
        if ( ! empty($exclude_sub_module_ids)) {
            $conditions[] = cb_queryf($dbconn,
                "( col_sub_module_id NOT IN (@A) )", $exclude_sub_module_ids);
        }

        // 検索期間を検索条件に追加する
        if ($start_ts instanceof CB_TimeStamp) {
            $conditions[] = sprintf("( col_timestamp >= '%d' )",
                $start_ts->unix_ts);
        }
        if ($last_ts instanceof CB_TimeStamp) {
            $conditions[] = sprintf("( col_timestamp < '%d' )",
                $last_ts->unix_ts);
        }

        // ユーザー検索条件を検索条件に追加する
        if (is_string($add_condition) && 0 < strlen($add_condition)) {
            $conditions[] = '( ' . $add_condition . ' )';
        }

        // クエリをフォーマットする
        if (count($conditions) > 0) {
            $query_format = 'SELECT * FROM %s WHERE ( %s ) ORDER BY %s';
            $query = sprintf($query_format, $table_name,
                implode(' AND ', $conditions),
                $order_by);
        } else {
            $query_format = 'SELECT * FROM %s ORDER BY %s';
            $query = sprintf($query_format, $table_name,
                $order_by);
        }
        $query = $dbconn->select_format($query, $offset, $limit,
            CB_DATABASE_NO_LOCK);

        // DBにクエリを発行する
        if (cb_is_db_result($result = $dbconn->query($query))) {
            // DBから結果の行数を取得する
            $row_count = $dbconn->num_rows($result);
            for ($i = 0; $i < $row_count; $i++) {
                // DBから1行取得し連想配列に展開する
                $row = $dbconn->fetch_assoc($result);
                if (is_array($row) && 0 < count($row)) {
                    $datas[$row['_id']]
                        = $this->_getNotifyDataPropertiesObject($row);
                }
            }
        }

        return $datas;
    }

    /**
     * ユーザーの通知データ一覧の取得（高速化バージョン）
     *
     * @param   string       $data_type     データタイプ（通知データ：'notify', 通知履歴データ：'history', 最新情報データ:'whatsnew')
     * @param   CB_User      $user          ユーザーオブジェクト
     * @param   string       $module_id     取得するモジュールID。デフォルト:null
     * @param   int          $offset        表示位置。デフォルト:0
     * @param   int          $limit         表示件数。デフォルト:20
     * @param   string       $order_by      ソート順。デフォルト：col_timestamp, _id
     * @param   CB_TimeStamp $start_ts      データ検索範囲の開始日時（この値自体を含む）。nullで指定なし。デフォルト:null
     * @param   CB_TimeStamp $last_ts       データ検索範囲の終了日時（この値自体は含まれない）。nullで指定なし。デフォルト:null
     * @param   string       $add_condition サブ検索条件文。デフォルト:null
     * @param   bool         $is_to_me      Filter by category "To me" or not. By default, "To me" notification is not filtered
     *
     * @return  array   通知データのリスト
     */
    function &getDataListFast(
        $data_type,
        $user,
        $module_id = null,
        $offset = 0,
        $limit = -1,
        $order_by = 'col_timestamp, _id',
        $start_ts = null,
        $last_ts = null,
        $add_condition = null,
        $is_merge_schedule_subject_with_time = true,
        bool $is_to_me = false
    ) {
        if ( ! ($user instanceof CB_User)) {
            // アクセス権を判定する
            cb_throw_error(E_COMMON_ACCESS_DENIED);
        }

        $datas = [];
        if (0 == strlen($data_type)) {
            return $datas;
        }

        $dbconn = grn_notification_get_connection($user->getOID());
        $table = $is_to_me ? 'tab_grn_notification_to_me'
            : 'tab_grn_notification_notify';

        $conditions = [];
        switch ($data_type) {
            case GRN_NOTIFICATION_TYPE_WHATSNEW:
                $conditions[] = '( n.col_read = 0 )';
                $table_name = grn_get_personal_tablename($user->getOID(),
                    $table);
                break;
            case GRN_NOTIFICATION_TYPE_NOTIFY:
                $table_name = grn_get_personal_tablename($user->getOID(),
                    $table);
                // GRB-16602
                $ignore_index = 'idx_user_read_ts_n, idx_user_module_read_ts_n';
                break;
            case GRN_NOTIFICATION_TYPE_HISTORY:
                $table_name = grn_get_personal_tablename($user->getOID(),
                    $is_to_me ? 'tab_grn_notification_to_me_history'
                        : 'tab_grn_notification_history');
                break;
            default:
                {
                    $___ret = null;

                    return $___ret;
                }
        }

        // ユーザーIDを検索条件に追加する
        if ($user instanceof CB_User) {
            $conditions[] = cb_queryf($dbconn, "( n.col_user = '@S' )",
                $user->getOID());
        }
        // モジュールIDを検索条件を追加する
        if ( ! is_null($module_id) && (strlen($module_id) > 0)) {
            $conditions[] = cb_queryf($dbconn, "( n.col_module_id = '@S' )",
                $module_id);
        }

        // 検索期間を検索条件に追加する
        if ($start_ts instanceof CB_TimeStamp) {
            $conditions[] = sprintf("( n.col_timestamp >= '%d' )",
                $start_ts->unix_ts);
        }
        if ($last_ts instanceof CB_TimeStamp) {
            $conditions[] = sprintf("( n.col_timestamp < '%d' )",
                $last_ts->unix_ts);
        }

        // ユーザー検索条件を検索条件に追加する
        if (is_string($add_condition) && 0 < strlen($add_condition)) {
            $conditions[] = '( ' . $add_condition . ' )';
        }

        // Don't get Notification data of application,
        // which user doesn't have the using privilege on it.
        $app_not_available = $this->getConditionApplicationNotAvailable($user);
        if (count($app_not_available) > 0) {
            $app_not_available = "(" . implode(',', $app_not_available) . ")";
            $conditions[] = sprintf("col_module_id NOT IN %s",
                $app_not_available);
        }

        // スペース招待通知の多言語対応のため、SELECT文にIF文＋CASE文を埋める
        // WHERE句も対応する
        require_once('fw/i18n/locale.csp');
        require_once('space/GrnSpaceApplication.csp');

        $i18n = CB_I18N::getInstance();
        $defaultLanguage = $i18n->getCurrentLanguage($user->getOID());

        $query = cb_queryf($dbconn,
            'SELECT ' .
            'n._id, ' .
            'n.col_module_id, ' .
            'n.col_action_id, ' .
            'n.col_unique_id, ' .
            'n.col_org_data, ' .
            "IF( n.col_module_id ='grn.space' AND n.col_sub_module_id = '', '@S' , n.col_subject) AS col_subject, "
            .
            'n.col_subject_f, ' .
            'n.col_subject_b, ' .
            'n.col_abstract, ' .
            'n.col_abstract_f, ' .
            'n.col_abstract_b, ' .
            'n.col_sender_name, ' .
            'n.col_sender_id, ' .
            'n.col_sender_url, ' .
            'n.col_subject_url, ' .
            'n.col_subject_icon, ' .
            'n.col_abstract_url, ' .
            'n.col_abstract_icon, ' .
            'n.col_group_name, ' .
            'n.col_timestamp, ' .
            'n.col_status, ' .
            'n.col_read, ' .
            'n.col_popup, ' .
            'n.col_attached, ',
            cb_msg(GrnSpaceApplication::GRN_SPACE_MODULE_ID, 'notify_subject',
                null, $defaultLanguage));

        if ($data_type == GRN_NOTIFICATION_TYPE_NOTIFY
            || $data_type == GRN_NOTIFICATION_TYPE_WHATSNEW
        ) {
            $query .= 'n.col_auto_confirm, ' .
                      'n.col_confirm_required, ';
        }
        $query .= 'n.col_sub_module_id, ' .
                  'n.col_space_id, ' .
                  'n.col_space_name, ' .
                  'n.col_event_start_ts, ' .
                  'n.col_user ' .
                  'FROM ' .
                  $table_name . ' AS n ';

        if (isset($ignore_index)) {
            $query .= ' IGNORE INDEX(' . $ignore_index . ') ';
        }

        // クエリをフォーマットする
        if (count($conditions) > 0) {
            $query .= " WHERE ( " . implode(" AND ", $conditions) . ") ";
        }
        $query .= " ORDER BY {$order_by}";

        $query = $dbconn->select_format($query, $offset, $limit,
            CB_DATABASE_NO_LOCK);

        // DBにクエリを発行する
        if (cb_is_db_result($result = $dbconn->query($query))) {
            // DBから結果の行数を取得する
            $row_count = $dbconn->num_rows($result);

            for ($i = 0; $i < $row_count; $i++) {
                // DBから1行取得し連想配列に展開する
                $row = $dbconn->fetch_assoc($result);
                if (is_array($row) && 0 < count($row)) {
                    $datas[$row['_id']]
                        = $this->_getNotifyDataProperties($data_type, $row,
                        $user, $is_merge_schedule_subject_with_time);
                }
            }
        }

        return $datas;
    }

    /**
     * @param    $module_id    grn.schedule | grn.message | grn.mail | grn.cabinet | grn.report
     *
     * @return   boolean    TRUE: have privilege | FALSE: do not have privilege
     */
    function isAvailableFor($user, $module_id)
    {
        $app = explode('.', $module_id);
        if ($app[0] == 'grn' && count($app) == 2) {
            return AppAccess::isAppAvailable($app[1], $user->getOID());
        }

        return true;
    }

    function getConditionApplicationNotAvailable($user)
    {
        $arr_app_not_available = [];
        $app_ids
            = array_fill_keys(AppAvailabilityUtil::getAppIdsSupportPrivilege(),
            AppAvailabilityUtil::ACCESS_DENIED);
        $available_apps
            = AppAccess::getAvailableAppIdsInternalByUserId($user->getOID());
        $availability_apps
            = AppAccess::getAvailabilityExternalAppIdsByUserId($user->getOID(),
            $available_apps);
        $result = array_merge($app_ids, $availability_apps);

        foreach ($result as $app_id => $value) {
            if ( ! $value
                 || $result[$app_id] === AppAvailabilityUtil::ACCESS_DENIED
            ) {
                $arr_app_not_available[] = "'grn." . $app_id . "'";
            }
        }

        return $arr_app_not_available;
    }

    /**
     * アプリごとの最終更新日時を保存
     *
     * @param   object $user      ユーザーオブジェクト
     * @param   string $module_id 取得するモジュールID
     * @param   object $timestamp 最終更新日時
     *
     * @return  boolean 成否
     */
    function setLastUpdateTimeStamp(& $user, $module_id, & $timestamp)
    {
        if (is_null($module_id) || (strlen($module_id) == 0)
            || is_null($timestamp)
        ) {
            // データ不正
            assert('FALSE');

            return false;
        }
        require_once('fw/profile.csp');
        if (is_null($user)) {
            $profile = cb_get_system_profile($module_id);
        } else {
            $profile = cb_get_user_profile($user, $module_id);
        }
        $success = $profile->updateAttribute('notification_updateinformation',
            $timestamp->unix_ts);
        if ($success === false) {
            $success
                = $profile->createAttribute('notification_updateinformation',
                $timestamp->unix_ts);
        }

        return $success;
    }

    /**
     *  アプリごとの最終更新日時を取得。
     *  ただし以下の場合にはユーザーの作成日時を返す。
     *  ・最終更新日時が未設定（null）
     *  ・最終更新日時 < ユーザーの作成日時
     *
     * @param CB_User $user
     * @param string  $module_id
     *
     * @return CB_TimeStamp
     */
    function getLastUpdateTimeStamp($user, $module_id)
    {
        $last_timestamp = $this->_getLastUpdateTimeStamp($user, $module_id);
        $user_ctime = $user->get('ctime');
        if (( ! $last_timestamp)
            || ($last_timestamp->unix_ts < $user_ctime->unix_ts)
        ) {
            return $user_ctime;
        }

        return $last_timestamp;
    }

    /**
     * アプリごとの最終更新日時を取得
     *
     * @param   CB_User $user      ユーザーオブジェクト
     * @param   string  $module_id 取得するモジュールID
     *
     * @return  mixed   最終更新日時 or null
     */
    function _getLastUpdateTimeStamp($user, $module_id)
    {
        if (is_null($user) || is_null($module_id)
            || (strlen($module_id) == 0)
        ) {
            // データ不正
            assert('FALSE');

            return null;
        }
        require_once('fw/profile.csp');
        $profile = cb_get_user_profile($user, $module_id);
        $profile_system = cb_get_system_profile($module_id);
        $unix_ts = null;
        $unix_ts_exists
            = $profile->getAttribute('notification_updateinformation',
            $unix_ts);
        $unix_ts_system = null;
        $unix_ts_system_exists
            = $profile_system->getAttribute('notification_updateinformation',
            $unix_ts_system);
        if ($unix_ts_exists && $unix_ts_system_exists) {
            $ts = $unix_ts > $unix_ts_system ? $unix_ts : $unix_ts_system;
        } elseif ($unix_ts_exists) {
            $ts = $unix_ts;
        } elseif ($unix_ts_system_exists) {
            $ts = $unix_ts_system;
        } else {
            return null;
        }
        $timestamp = new CB_TimeStamp();
        $timestamp->unix_ts = $ts;

        return $timestamp;
    }

    function _getNotifyDataPropertiesObject(& $row, bool $is_to_me = false)
    {
        if ( ! is_array($row)) {
            // データ不正
            assert('FALSE');

            return null;
        }

        // 通知情報オブジェクト生成
        $notify_data = new GRN_Notification_Data;

        // プロパティセット
        $notify_data->setId($row['_id']);
        $notify_data->setUserId($row['col_user']);
        $notify_data->setModuleId($row['col_module_id']);
        $notify_data->setActionId($row['col_action_id']);
        $notify_data->setSubModuleId($row['col_sub_module_id']);
        $notify_data->setUniqueId($row['col_unique_id']);
        $notify_data->setOrgDataString($row['col_org_data']);

        $notify_data->setSubjectData($row['col_subject'],
            $row['col_subject_f'],
            $row['col_subject_b'],
            $row['col_subject_url'],
            $row['col_subject_icon']);

        $notify_data->setAbstractData($row['col_abstract'],
            $row['col_abstract_f'],
            $row['col_abstract_b'],
            $row['col_abstract_url'],
            $row['col_abstract_icon']);

        $notify_data->setSenderData($row['col_sender_name'],
            $row['col_sender_id'],
            $row['col_sender_url'],
            $row['col_group_name']);

        $timestamp = new CB_TimeStamp();
        $timestamp->unix_ts = $row['col_timestamp'];
        $notify_data->setTimeStampData($timestamp);
        $notify_data->setStatusData($row['col_status']);
        $notify_data->setReadFlag($row['col_read']);

        $notify_data->setAttachedFlag($row['col_attached']);
        $notify_data->setPopupFlag($row['col_popup']);
        if (array_key_exists('col_auto_confirm', $row)) {
            $notify_data->setAutoConfirmFlag($row['col_auto_confirm']);
        }
        if (array_key_exists('col_confirm_required', $row)) {
            $notify_data->setConfirmRequiredFlag($row['col_confirm_required']);
        }
        $notify_data->setSpaceId($row['col_space_id']);
        $notify_data->setSpaceName($row['col_space_name']);
        $notify_data->setEventStartTs($row['col_event_start_ts']);
        $notify_data->setIsToMe($is_to_me);

        return $notify_data;
    }

    /**
     *
     * @param $notify_id_list
     * @param $user_id
     * @param $is_to_me         Filter by category "To me" or not. By default, "To me" notification is not filtered
     *
     * @return array
     */
    private function getDataRowListByNotifyIdList(
        $notify_id_list,
        $user_id,
        bool $is_to_me = false
    ) {
        $dbconn = grn_notification_get_connection($user_id);
        $i18n = CB_I18N::getInstance();
        $defaultLanguage = $i18n->getCurrentLanguage($user_id);
        require_once("space/GrnSpaceApplication.csp");
        $welcomeSpaceMessage = cb_msg(GrnSpaceApplication::GRN_SPACE_MODULE_ID,
            'notify_subject', null, $defaultLanguage);
        $table_name = $is_to_me ? 'tab_grn_notification_to_me'
            : 'tab_grn_notification_notify';
        $query = cb_queryf($dbconn,
            'SELECT ' .
            'n._id, ' .
            'n.col_module_id, ' .
            'n.col_action_id, ' .
            'n.col_unique_id, ' .
            'n.col_org_data, ' .
            "IF( n.col_module_id ='grn.space' AND n.col_sub_module_id = '', '@S', n.col_subject) AS col_subject, "
            .
            'n.col_subject_f, ' .
            'n.col_subject_b, ' .
            'n.col_abstract, ' .
            'n.col_abstract_f, ' .
            'n.col_abstract_b, ' .
            'n.col_sender_name, ' .
            'n.col_sender_id, ' .
            'n.col_sender_url, ' .
            'n.col_subject_url, ' .
            'n.col_subject_icon, ' .
            'n.col_abstract_url, ' .
            'n.col_abstract_icon, ' .
            'n.col_group_name, ' .
            'n.col_timestamp, ' .
            'n.col_status, ' .
            'n.col_read, ' .
            'n.col_popup, ' .
            'n.col_attached, ' .
            'n.col_auto_confirm, ' .
            'n.col_confirm_required, ' .
            'n.col_sub_module_id, ' .
            'n.col_space_id, ' .
            'n.col_space_name, ' .
            'n.col_event_start_ts, ' .
            'n.col_user ' .
            'FROM ' .
            grn_get_personal_tablename($user_id, $table_name) . ' AS n ' .
            "WHERE " .
            "( n._id IN (@A) AND n.col_user = '@S'  )",
            $welcomeSpaceMessage, $notify_id_list, $user_id);

        $result = $dbconn->query($query);

        $retval = [];
        while ($row = $dbconn->fetch_assoc($result)) {
            $retval[$row["_id"]] = $row;
        }
        $dbconn->free_result($result);

        return $retval;
    }

    /**
     *
     * @param      $notify_history_ids
     * @param      $user_id
     * @param bool $is_to_me Filter by category "To me" or not. By default, "To me" notification is not filtered
     *
     * @return array
     */
    private function getHistoryDataRowListByNotifyIdList(
        $notify_history_ids,
        $user_id,
        bool $is_to_me = false
    ) {
        $dbconn = grn_notification_get_connection($user_id);
        $i18n = CB_I18N::getInstance();
        $defaultLanguage = $i18n->getCurrentLanguage();
        require_once("space/GrnSpaceApplication.csp");
        $welcomeSpaceMessage = cb_msg(GrnSpaceApplication::GRN_SPACE_MODULE_ID,
            'notify_subject', null, $defaultLanguage);
        $history_table = $is_to_me ? 'tab_grn_notification_to_me_history'
            : 'tab_grn_notification_history';
        $query = cb_queryf($dbconn,
            'SELECT ' .
            'h._id, h.col_module_id, h.col_action_id, h.col_unique_id, ' .
            'h.col_org_data, ' .
            "IF( h.col_module_id ='grn.space' AND h.col_sub_module_id = '', '@S', h.col_subject) AS col_subject, "
            .
            'h.col_subject_f, h.col_subject_b, h.col_abstract, ' .
            'h.col_abstract_f, h.col_abstract_b, h.col_sender_name, ' .
            'h.col_sender_id, h.col_sender_url, h.col_subject_url, ' .
            'h.col_subject_icon, h.col_abstract_url, h.col_abstract_icon, ' .
            'h.col_group_name, h.col_timestamp, h.col_status, ' .
            'h.col_read, h.col_popup, h.col_attached, ' .
            'h.col_sub_module_id, h.col_space_id, h.col_space_name, ' .
            'h.col_event_start_ts, h.col_user ' .
            'FROM ' .
            grn_get_personal_tablename($user_id, $history_table) . ' AS h ' .
            "WHERE ( h._id IN (@A) AND h.col_user = '@S' )",
            $welcomeSpaceMessage, $notify_history_ids, $user_id);

        $query = $dbconn->select_format($query, 0, 1, CB_DATABASE_NO_LOCK);
        $result = $dbconn->query($query);

        $retval = [];
        while ($row = $dbconn->fetch_assoc($result)) {
            $retval[$row["_id"]] = $row;
        }
        $dbconn->free_result($result);

        return $retval;
    }

    /*
     * 通知の格納されているテーブルすべてに対してコールバック関数を実行する
     * コールバック関数には、データベースのコネクションとテーブル番号を引数として渡している
     * @param Closure $callback
     */
    private function execForAllTables(Closure $callback)
    {
        $notify_db_list = grn_notification_get_connections();
        foreach ($notify_db_list as $db) {
            if (grn_check_table_merged()) {
                $user_tables = GRN_NOTIFICATION_MERGED_TABLE_AMOUNT;
            } else {
                $user_tables = cb_get_user_tables();
            }
            for ($table_num = 0; $table_num < $user_tables; $table_num++) {
                $callback($db, $table_num);
            }
        }
    }

    /*
     * $ts以前の期間の全通知データの数を数える
     * @param  string       $target        'notify' or 'history'
     * @param  CB_TimeStamp $ts
     * @param  string       $add_condition 検索式の末尾につけられる検索条件
     * @return int
     */
    private function countNotification(
        $target,
        CB_TimeStamp $ts,
        $add_condition = null
    ) {
        $count = 0;
        if ($add_condition) {
            $add_condition = " and (" . $add_condition . " )";
        }
        $this->execForAllTables(function ($db, $table_num) use (
            &$count,
            $target,
            $ts,
            $add_condition
        ) {
            $condition = cb_queryf($db, "col_timestamp < '@S'", $ts->unix_ts);
            $condition .= $add_condition;
            if (grn_check_table_merged()) {
                $query = sprintf("SELECT COUNT(*) FROM tab_%s WHERE %s ",
                    $target, $condition);
            } else {
                $query = sprintf("SELECT COUNT(*) FROM tab_%s___p%s WHERE %s ",
                    $target, $table_num, $condition);
            }
            if (cb_is_db_result($result = $db->query($query))) {
                if (count($row = $db->fetch_row($result)) != 0) {
                    $count += $row[0];
                }
            }
        });

        return $count;
    }

    /**
     * 全てのテーブルのデータを削除する。
     *
     * @param string $target        'notify' or 'confirmed'
     * @param int    $ts            このタイムスタンプより以前のデータを対象とする。
     * @param string $add_condition 検索式の末尾につけられる検索条件
     */
    public function deleteAllNotificationData($target, $ts, $add_condition = '')
    {
        if ($target == 'confirmed') {
            $target = 'history';
        }

        if ($add_condition != '') {
            $add_condition = " AND ( " . $add_condition . " )";
        }

        $notify_db_list = grn_notification_get_connections();
        foreach ($notify_db_list as $db) {
            $table_name = cb_queryf($db, "tab_grn_notification_@S", $target);
            $condition = cb_queryf($db, "col_timestamp < '@S'", $ts)
                         . $add_condition;

            if (grn_check_table_merged()) {
                $delete_query = sprintf("DELETE FROM %s WHERE %s ", $table_name,
                    $condition);
                $db->query($delete_query);
            } else {
                $user_tables = cb_get_user_tables();
                for ($i = 0; $i < $user_tables; $i++) {
                    $delete_query = sprintf("DELETE FROM %s___p%s WHERE %s ",
                        $table_name, $i, $condition);
                    $db->query($delete_query);
                }

            }
        }
    }

    public function getDataListByNotifyIdList(
        $notify_id_list,
        $user_id,
        bool $is_to_me = false
    ) {
        $rows = $this->getDataRowListByNotifyIdList($notify_id_list, $user_id,
            $is_to_me);

        $retval = [];
        foreach ($notify_id_list as $notify_id) {
            if (array_key_exists($notify_id, $rows)) {
                $retval[$notify_id]
                    = $this->_getNotifyDataProperties(GRN_NOTIFICATION_DATA_TYPE_WHATSNEW,
                    $rows[$notify_id]);
            }
            unset($rows[$notify_id]);
        }

        return $retval;
    }
}

//////////////////////////////////////////////////////////////////////////////

/**
 * 通知サービスシステムロジック
 *
 * @author  IKEDA, Atsushi 2004/11
 * @version 1.0
 * @package grn.notification
 */
class GRN_Notification_ServiceSystemConfig extends CB_ModuleBase
{
    /**
     * Return singleton.
     *
     * @return GRN_Notification_ServiceSystemConfig
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Notification_ServiceSystemConfig();
        }

        return $_instance;
    }

    function __construct()
    {
        parent::__construct('grn.common.notification.system');
    }

    //////////////////////////////////////////////////////////////////////////
    // メンバ変数
    /**
     * @access private
     */
    var $_savedays = [];                       // 通知データの保存期間

    //////////////////////////////////////////////////////////////////////////
    // private method

    /**
     * システムプロファイルを更新
     *
     * @access private
     *
     * @param CB_Profile $profile
     * @param string     $name
     * @param mixed      $value
     *
     * @return boolean
     */
    function _updateProfile(& $profile, $name, $value)
    {
        if (is_null($profile)) {
            // データ不正
            cb_throw_error(E_GRN_CMMN_NTFC_FAILED_TO_UPDATE_PROFILE_DATA);
        }

        $old_value = null;
        if ( ! $profile->getAttribute($name, $old_value)) {
            // 見つからない場合は追加
            if ( ! $profile->createAttribute($name, $value)) {
                // プロファイルデータ更新失敗
                cb_throw_error(E_GRN_CMMN_NTFC_FAILED_TO_UPDATE_PROFILE_DATA);
            }
        } else {
            // 見つかった場合は更新
            if ( ! $profile->updateAttribute($name, $value)) {
                // プロファイルデータ更新失敗
                cb_throw_error(E_GRN_CMMN_NTFC_FAILED_TO_UPDATE_PROFILE_DATA);
            }
        }
        {
            $___ret = true;

            return $___ret;
        }
    }

    //////////////////////////////////////////////////////////////////////////
    // public method

    /**
     * データの保存期間の設定を保存
     *
     * @param   string $data_type データタイプ（通知データ：'notify', 通知履歴データ：'history')
     * @param   int    $save_days 保存する期間（日）
     *
     * @return  boolean 成否
     */
    function setSaveDays($data_type, $save_days)
    {
        // 通知アプリのシステムプロファイルを取得する
        $profile = $this->getSystemProfile();
        if (is_null($profile)) {
            // プロファイルデータ更新失敗
            cb_throw_error(E_GRN_CMMN_NTFC_FAILED_TO_UPDATE_PROFILE_DATA);
        }

        if ((($data_type !== 'notify') && ($data_type !== 'history'))
            || is_null($save_days)
            || ($save_days < -1)
        ) {
            // データ不正
            assert('FALSE');

            return false;
        }

        // 設定の保存
        $name = $data_type . '.save_days';
        if ( ! $this->_updateProfile($profile, $name, $save_days)) {
            // プロファイルデータ更新失敗
            cb_throw_error(E_GRN_CMMN_NTFC_FAILED_TO_UPDATE_PROFILE_DATA);
        }

        // キャッシュ更新
        $this->_savedays[$data_type] = $save_days;

        return true;
    }

    /**
     * データの保存期間の設定を保存
     *
     * @param   string $data_type データタイプ（通知データ：'notify', 通知履歴データ：'history')
     * @param   null   $save_days 保存する期間（日）を受け取る（設定されていない場合は-1）
     *
     * @return  boolean 成否
     */
    function getSaveDays($data_type, & $save_days)
    {
        if (($data_type !== 'notify') && ($data_type !== 'history')) {
            // データ不正
            assert('FALSE');

            return false;
        }

        // キャッシュチェック
        if (array_key_exists($data_type, $this->_savedays)) {
            $save_days = $this->_savedays[$data_type];

            return true;
        }

        // デフォルト設定
        $save_days = GRN_NOTIFICATION_DEFAULT_SYSTEM_SAVEDAYS;

        // 通知アプリのシステムプロファイルを取得する
        $profile = $this->getSystemProfile();
        if (is_null($profile)) {
            // まだ設定されていない
            $this->_savedays[$data_type] = $save_days;

            return true;
        }

        // 設定の取得
        $value = null;
        $name = $data_type . '.save_days';
        if ($profile->getAttribute($name, $value)) {
            // 設定済み
            $save_days = $value;
        }

        // キャッシュ更新
        $this->_savedays[$data_type] = $save_days;

        // まだ設定されていない
        return true;
    }
}

//////////////////////////////////////////////////////////////////////////////

/**
 * 通知サービス個人設定ロジック
 *
 * @author  IKEDA, Atsushi 2004/11
 * @version 1.0
 * @package grn.notification
 */
class GRN_Notification_ServicePersonalConfig extends CB_ModuleBase
{
    function __construct(& $user)
    {
        parent::__construct('grn.common.notification.personal');

        $this->_user = $user;
        assert('! is_null( $this->_user )');
    }

    //////////////////////////////////////////////////////////////////////////
    // メンバ変数
    /**
     * @access private
     */
    var $_user = null;
    var $_system_config = null;                         // 通知サービスシステム設定ロジック
    var $_savedays = [];                           // 通知データの保存期間
    var $_delete_unread = null;

    //////////////////////////////////////////////////////////////////////////
    // private method

    /**
     * 通知サービスシステム設定ロジックを取得
     *
     * @return GRN_Notification_ServiceSystemConfig  通知アプリシステム設定ロジック
     */
    function _getSystemConfig()
    {
        if (is_null($this->_system_config)) {
            $this->_system_config
                = GRN_Notification_ServiceSystemConfig::getInstance();
        }

        return $this->_system_config;
    }

    /**
     * ユーザープロファイルオブジェクトを取得
     *
     * @access private
     * @return CB_Profile
     */
    function &_getProfile()
    {
        // 通知アプリのユーザープロファイルを取得する
        $ret = $this->getUserProfile($this->_user);

        return $ret;
    }

    /**
     * ユーザープロファイルを更新
     *
     * @access private
     *
     * @param CB_Profile $profile
     * @param string     $name
     * @param mixed      $value
     *
     * @return boolean
     */
    function &_updateProfile(& $profile, $name, $value)
    {
        if (is_null($profile)) {
            // データ不正
            cb_throw_error(E_GRN_CMMN_NTFC_FAILED_TO_UPDATE_PROFILE_DATA);
        }

        $old_value = null;
        if ( ! $profile->getAttribute($name, $old_value)) {
            // 見つからない場合は追加
            if ( ! $profile->createAttribute($name, $value)) {
                // プロファイルデータ更新失敗
                cb_throw_error(E_GRN_CMMN_NTFC_FAILED_TO_UPDATE_PROFILE_DATA);
            }
        } else {
            // 見つかった場合は更新
            if ( ! $profile->updateAttribute($name, $value)) {
                // プロファイルデータ更新失敗
                cb_throw_error(E_GRN_CMMN_NTFC_FAILED_TO_UPDATE_PROFILE_DATA);
            }
        }
        {
            $___ret = true;

            return $___ret;
        }
    }

    //////////////////////////////////////////////////////////////////////////
    // public method

    /**
     * データの保存期間の設定を保存
     *
     * @param   string $data_type データタイプ（通知データ：'notify', 通知履歴データ：'history')
     * @param   int    $save_days 保存する期間（日）
     *
     * @return  boolean 成否
     */
    function setSaveDays($data_type, $save_days)
    {
        // 通知アプリのユーザープロファイルを取得する
        $profile = $this->_getProfile();
        if (is_null($profile)) {
            // プロファイルデータ更新失敗
            cb_throw_error(E_GRN_CMMN_NTFC_FAILED_TO_UPDATE_PROFILE_DATA);
        }

        if ((($data_type !== 'notify') && ($data_type !== 'history'))
            || is_null($save_days)
            || ($save_days < -1)
        ) {
            // データ不正
            assert('FALSE');

            return false;
        }

        // システム設定値取得
        $system_value = null;
        $system_config = $this->_getSystemConfig();
        if ($system_config->getSaveDays($data_type, $system_value) === true) {
            if (( ! is_null($system_value) && (intval($system_value) >= 0))
                && ((intval($save_days) == -1)
                    || (intval($save_days) > intval($system_value)))
            ) {
                // システム設定より大きい場合はエラー
                cb_throw_error(E_GRN_CMMN_NTFC_INVALID_PERSONAL_SAVEDAYS_VALUE);
            }
        }

        // 設定の保存
        $name = $data_type . '.save_days';
        if ( ! $this->_updateProfile($profile, $name, $save_days)) {
            // プロファイルデータ更新失敗
            cb_throw_error(E_GRN_CMMN_NTFC_FAILED_TO_UPDATE_PROFILE_DATA);
        }

        // キャッシュ更新
        $this->_savedays[$data_type] = $save_days;

        return true;
    }

    /**
     * データの保存期間の設定を取得
     *
     * @param   string $data_type データタイプ（通知データ：'notify', 未確認通知データ：'whatsnew', 通知履歴データ：'history')
     * @param   null   $save_days 保存する期間（日）を受け取る
     *
     * @return  boolean 成否
     */
    function getSaveDays($data_type, & $save_days)
    {
        if ($data_type == 'whatsnew') {
            $data_type = 'notify';
        }

        if (($data_type !== 'notify') && ($data_type !== 'history')) {
            // データ不正
            assert('FALSE');

            return false;
        }

        // キャッシュチェック
        if (array_key_exists($data_type, $this->_savedays)) {
            $save_days = $this->_savedays[$data_type];

            return true;
        }

        // システム設定値取得
        $system_value = null;
        $system_config = $this->_getSystemConfig();
        if (($system_config->getSaveDays($data_type, $system_value) !== true)
            || is_null($system_value)
        ) {
            // エラー
            cb_throw_error(E_GRN_CMMN_NTFC_FAILED_TO_GET_PROFILE_DATA);
        }

        // intに変換
        $system_value = intval($system_value);

        // 通知サービスのユーザープロファイルを取得する
        $profile = $this->_getProfile();
        if (is_null($profile)) {
            // 個人設定はまだ設定されていない
            if (($system_value >= 0)
                && ($system_value < GRN_NOTIFICATION_DEFAULT_PERSONAL_SAVEDAYS)
            ) {
                // システム設定値をセット
                $save_days = $system_value;
            } else {
                // デフォルト
                $save_days = GRN_NOTIFICATION_DEFAULT_PERSONAL_SAVEDAYS;
            }

            // キャッシュ更新
            $this->_savedays[$data_type] = $save_days;

            return true;
        }

        // 個人設定の取得
        $value = null;
        $name = $data_type . '.save_days';
        if ($profile->getAttribute($name, $value)) {
            $save_days = $value;
        } else {
            // デフォルト
            $save_days = GRN_NOTIFICATION_DEFAULT_PERSONAL_SAVEDAYS;
        }

        assert('! is_null( $save_days )');
        if (($system_value >= 0)
            && ((intval($save_days) > $system_value)
                || (intval($save_days) == -1))
        ) {
            // システム設定の方が小さい場合はそれを返す
            $save_days = $system_value;
        }

        // キャッシュ更新
        $this->_savedays[$data_type] = $save_days;

        return true;
    }

    /**
     * データの自動削除を行ったタイムスタンプを保存
     *
     * @param   string $data_type データタイプ（通知データ：'notify', 通知履歴データ：'history')
     * @param   object $timestamp 自動削除を行ったタイムスタンプ（CB_TimeStamp）
     *
     * @return  boolean 成否
     */
    function setLastCleaningTime($data_type, & $timestamp)
    {
        // 通知アプリのユーザープロファイルを取得する
        $profile = $this->_getProfile();
        if (is_null($profile)) {
            // プロファイルデータ更新失敗
            cb_throw_error(E_GRN_CMMN_NTFC_FAILED_TO_UPDATE_PROFILE_DATA);
        }

        if ((($data_type !== 'notify') && ($data_type !== 'history'))
            || ! ($timestamp instanceof CB_TimeStamp)
        ) {
            // データ不正
            assert('FALSE');

            return false;
        }

        // 設定の保存
        $name = $data_type . '.last_cleaning_ts';
        if ( ! $this->_updateProfile($profile, $name, $timestamp)) {
            // プロファイルデータ更新失敗
            cb_throw_error(E_GRN_CMMN_NTFC_FAILED_TO_UPDATE_PROFILE_DATA);
        }

        return true;
    }

    /**
     * データの自動削除を行ったタイムスタンプを取得
     *
     * @param   string $data_type データタイプ（通知データ：'notify', 通知履歴データ：'history')
     * @param   mixed  $timestamp 自動削除を行ったタイムスタンプを受け取る（CB_TimeStamp or null）
     *
     * @return  boolean 成否
     */
    function getLastCleaningTime($data_type, & $timestamp)
    {
        if (($data_type !== 'notify') && ($data_type !== 'history')) {
            // データ不正
            assert('FALSE');

            return false;
        }

        // デフォルト
        $timestamp = null;

        // 通知サービスのユーザープロファイルを取得する
        $profile = $this->_getProfile();
        if (is_null($profile)) {
            // 個人設定はまだ設定されていない
            return true;
        }

        // 個人設定の取得
        $value = null;
        $name = $data_type . '.last_cleaning_ts';
        if ($profile->getAttribute($name, $value)) {
            $timestamp = $value;
        }

        return true;
    }

    /**
     * GRN2-2159
     * 未確認通知の自動削除フラグを保存する
     * 成功すればTRUE、失敗すればFALSE
     *
     * @param    boolean $delete_unread 未確認通知削除フラグ
     *
     * @return   boolean
     */
    public function setDeleteUnread($delete_unread)
    {
        // 通知アプリのユーザープロファイルを取得する
        $profile = $this->_getProfile();
        if (is_null($profile)) {
            // プロファイルデータ更新失敗
            cb_throw_error(E_GRN_CMMN_NTFC_FAILED_TO_UPDATE_PROFILE_DATA);
        }

        // 設定がない場合，初期値を設定する
        if (is_null($delete_unread)) {
            $delete_unread = false;
        }

        if ($delete_unread == false
            || $delete_unread == GRN_NOTIFICATION_INSPECTION_DELETE_UNREAD
        ) {
            // 設定の保存
            if ( ! $this->_updateProfile($profile, 'notify.delete_unread',
                $delete_unread)
            ) {
                return false;
            }
        } else {
            return false;
        }

        // キャッシュ更新
        $this->_delete_unread = $delete_unread;

        return true;
    }

    /**
     * This function returns always FALSE.
     * See https://bozuman.cybozu.com/k/15435/show#record=84
     *
     * @return FALSE
     */
    public function getDeleteUnread()
    {
        // 通知サービスのユーザープロファイルを取得する
        $profile = $this->_getProfile();
        if (is_null($profile)) {
            // デフォルト値のFALSEを返す
            return false;
        }

        // キャッシュチェック
        if ( ! is_null($this->_delete_unread)) {
            $delete_unread = $this->_delete_unread;

            return $delete_unread;
        }

        // 個人設定の取得
        $value = null;
        if ($profile->getAttribute('notify.delete_unread', $value)) {
            $delete_unread = $value;

            // キャッシュ更新
            $this->_delete_unread = $delete_unread;
        } else {
            // キャッシュ更新
            $this->_delete_unread = false;

            // デフォルト値のFALSEを返す
            return false;
        }

        return $delete_unread;
    }
}


function grn_drop_personal_notify($uid, $except_admin = true)
{
    if (is_null($uid) || 0 == strlen($uid)) {
        return false;
    }
    $user_id = $uid;
    if ($except_admin == true && $user_id == 1) {
        return true;
    }

    $tm = grn_notification_get_table_manager($user_id);

    $table_name = grn_get_personal_tablename($user_id,
        GRN_NOTIFICATION_HISTORY_TABLE);
    $table = $tm->getTableInfo($table_name);
    $rowset = new CB_RowSet($table);
    $rowset->addCondition($rowset->queryf("col_user = '@S'", $uid));
    $rowset->deleteAllMatched();

    $table_name = grn_get_personal_tablename($user_id,
        GRN_NOTIFICATION_NOTIFY_TABLE);
    $table = $tm->getTableInfo($table_name);
    $rowset = new CB_RowSet($table);
    $rowset->addCondition($rowset->queryf("col_user = '@S'", $uid));
    $rowset->deleteAllMatched();
}

function grn_notification_get_connection_name($uid = null)
{
    if (is_null($uid)) {
        return 'dbconn';
    }

    global $G_config_grn;
    $connection_name = false;
    $connections = $G_config_grn->getSection('Notification');

    if ($connections === false) {
        return 'dbconn';
    }

    if (array_key_exists('connection', $connections)) {
        $connection_name = $connections['connection'];
    } else {
        foreach ($connections as $key => $connection) {
            // ex)connection1-1000 or connection1-
            $match = preg_match("/connection[0-9]+\-[0-9]*\z/", $key);

            if ($match === 0 || $match === false) {
                continue;
            }

            $between = substr($key, strlen('connection'));
            list($begin, $end) = explode('-', $between);

            if ( ! empty($end)) {
                if ($begin <= $uid && $uid <= $end) {
                    $connection_name = $connection;
                    break;
                }
            } else {
                if ($begin <= $uid) {
                    $connection_name = $connection;
                    break;
                }
            }
        }
    }

    if ($connection_name === false) {
        $connection_name = 'dbconn';
    }

    return $connection_name;
}


