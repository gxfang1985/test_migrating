<?php

/**
 * MIMEの設定を管理する
 *
 * @package grn.common
 */
require_once('fw/persistent.csp');
require_once('fw/database.csp');

/**
 * MIMEの設定を管理する
 *
 * @package grn.common
 */
class GRN_MIMEConfigManager
{
    /**
     * @access private
     */
    var $_cache = [];

    /**
     * @access private
     */
    var $_table = null;

    private $inline_mimes
        = [
            'image/gif',
            'image/jpeg',
            'image/pjpeg',
            'image/png'
        ];

    /**
     * @access private
     */
    function _setRow(&$row, $extension, $mime)
    {
        $extension = strtolower($extension);
        $row->set('extension', $extension);
        $row->set('mime', $mime);
        $row->updateNow();

        return true;
    }

    /**
     * @access private
     */
    function _getRow($extension)
    {
        $extension = strtolower($extension);
        $rowset = new CB_RowSet($this->_table);
        $condition = $rowset->queryf("col_extension='@S'", $extension);
        $rowset->addCondition($condition);
        $row = $rowset->iterate();

        return $row;
    }

    /**
     * @access private
     */
    function &_getCache($extension)
    {
        $ret = false;
        if (array_key_exists($extension, $this->_cache)) {
            $ret = $this->_cache[$extension];
        }

        return $ret;
    }

    /**
     * @access private
     */
    function _addCache($extension, $mime)
    {
        $this->_cache[$extension] = $mime;
    }

    /**
     * @access private
     */
    function _removeCache($extension)
    {
        unset($this->_cache[$extension]);
    }

    /**
     * @access private
     */
    function __construct()
    {
        $this->_table = cb_class2table('GRN_MIMEType');
    }

    /**
     * シングルトンインスタンスを取得する
     *
     * @access private
     * @return GRN_MIMEConfigManager
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_MIMEConfigManager;
        }

        return $_instance;
    }

    /**
     * MIMEテーブルを取得する
     *
     * @return object CB_TableInfo
     */
    function getMIMETable()
    {
        return $this->_table;
    }

    /**
     * MIMEタイプを追加する
     *
     * @param string $extension 拡張子
     * @param string $mime      MIMEタイプ
     *
     * @return bool
     */
    function addMIMEType($extension, $mime)
    {
        if ( ! is_string($extension) || strlen($extension) <= 0) {
            return false;
        }
        $extension = strtolower($extension);

        $row =& $this->_getRow($extension);
        if ( ! is_null($row)) {
            cb_throw_error(E_GRN_REGISTERED_MIMETYPE);
        }

        $row =& $this->_table->newRow();
        $this->_addCache($extension, $mime);

        return $this->_setRow($row, $extension, $mime);
    }

    /**
     * MIMEタイプを設定する
     *
     * @param string $extension 拡張子
     * @param string $mime      MIMEタイプ
     *
     * @return bool
     */
    function setMIMEType($extension, $mime)
    {
        if ( ! is_string($extension) || strlen($extension) <= 0) {
            return false;
        }
        $extension = strtolower($extension);

        $row =& $this->_getRow($extension);
        if (is_null($row)) {
            $row =& $this->_table->newRow();
        }

        $this->_addCache($extension, $mime);

        return $this->_setRow($row, $extension, $mime);
    }

    /**
     * MIMEタイプを取得する
     *
     * @param string $extension 拡張子
     *
     * @return mixed MIMEタイプ or FALSE
     */
    function getMIMEType($extension)
    {
        if ( ! is_string($extension) || strlen($extension) <= 0) {
            return false;
        }

        $mime = $this->_getCache($extension);
        if ($mime) {
            return $mime;
        }

        $row = $this->_getRow($extension);
        if ( ! is_null($row)) {
            $this->_addCache($row->get('extension'),
                $row->get('mime'));

            return $row->get('mime');
        }

        return false;
    }

    /**
     * IDでMIMEタイプを取得する
     *
     * @param string $id オブジェクトID
     *
     * @return mixed        MIME情報(array) or FALSE
     */
    function &getMIMETypeById($id)
    {
        $fail = false;
        $row =& $this->_table->getRow($id);
        if ($row !== false) {
            $this->_addCache($row->get('extension'),
                $row->get('mime'));
            $ret = [
                'extension' => $row->get('extension'),
                'mime'      => $row->get('mime')
            ];

            return $ret;
        }

        return $fail;
    }

    /**
     * MIMEタイプを削除する
     *
     * @param string $extension 拡張子
     *
     * @return bool
     */
    function removeMIMEType($extension)
    {
        if ( ! is_string($extension) || strlen($extension) <= 0) {
            return false;
        }

        $row =& $this->_getRow($extension);
        if ( ! is_null($row)) {
            $this->_removeCache($extension);

            return $row->delete();
        }

        return true;
    }

    /**
     * IDでMIMEタイプを削除する
     *
     * @param string $id オブジェクトID
     *
     * @return bool
     */
    function removeMIMETypeById($id)
    {
        $row =& $this->_table->getRow($id);
        if ($row !== false) {
            $this->_removeCache($row->get('extension'));

            return $row->delete();
        }

        return true;
    }

    /**
     * ソート条件を取得する
     *
     * @param string $sort ソート
     *
     * @return string   ソート条件
     */
    function createSortCondition($sort)
    {
        $condition = '';
        if ($sort == 'ed') {
            $condition = 'col_extension asc';
        } else {
            $condition = 'col_extension desc';
        }

        return $condition;
    }

    /**
     * Get whether $mime is inline image mime type.
     *
     * @param string $mime
     *
     * @return bool
     */
    public function isInlineImageMimeType($mime)
    {
        return in_array($mime, $this->inline_mimes);
    }
}

/**
 * MIMEタイプを表現するクラス
 *
 * @package grn.common
 */
class GRN_MIMEType extends CB_PersistentBase
{
    var $col_extension = ['type' => 'char', 'notnull' => true];
    var $col_mime = ['type' => 'char'];
    var $idx_e = ['cols' => ['extension']];

    function __construct(&$row)
    {
        parent::__construct($row);
    }
}


