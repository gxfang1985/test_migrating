<?php
declare(strict_types=1);

namespace grn\grn;

class PrototypeJsLoadPage
{
    const NOT_BELONGED_APPLICATION_PAGES = 'root';

    private $whitelistApplications
        = [
            'cbwebsrv',
            'cellular',
            'grn',
            'kunai',
            'portal',
            'schedule',
            self::NOT_BELONGED_APPLICATION_PAGES
        ];

    private $blacklistPathsOfApplications
        = [
            'cbwebsrv'                           => [],
            'cellular'                           => [],
            'grn'                                => [],
            'kunai'                              => [],
            'portal'                             => [],
            'schedule'                           => [],
            self::NOT_BELONGED_APPLICATION_PAGES => []
        ];

    /**
     * @param string $page_name
     *
     * @return bool
     */
    public function isLoadPage(string $page_name): bool
    {

        $application_name
            = $this->extractApplicationNameFromPageName($page_name);

        if ( ! in_array($application_name, $this->whitelistApplications)) {
            return false;
        }

        $path = $this->extractPathFromPageName($page_name, $application_name);

        foreach (
            $this->blacklistPathsOfApplications[$application_name] as
            $disallowed_path
        ) {
            if (strpos($path, $disallowed_path) === 0) {
                return false;
            }
        }

        return true;
    }

    /**
     * @param string $page_name
     * @param string $application_name
     *
     * @return string
     */
    private function extractPathFromPageName(
        string $page_name,
        string $application_name
    ): string {
        if ($application_name != self::NOT_BELONGED_APPLICATION_PAGES) {
            return substr($page_name, strlen($application_name) + 1);
        } else {
            return $page_name;
        }
    }

    /**
     * @param string $page_name
     *
     * @return string
     */
    private function extractApplicationNameFromPageName(string $page_name
    ): string {
        $path_hierarchy = explode('/', $page_name);

        if (count($path_hierarchy) < 2) {

            return self::NOT_BELONGED_APPLICATION_PAGES;
        } else {
            return $path_hierarchy[0];
        }
    }

    /**
     * @param array $customized_whitelist_applications
     */
    public function setWhitelistApplications(
        array $customized_whitelist_applications
    ) {
        $this->whitelistApplications = $customized_whitelist_applications;
    }

    /**
     * @param array $customized_blacklist_paths
     */
    public function setBlacklistPathsOfApplications(
        array $customized_blacklist_paths
    ) {
        $this->blacklistPathsOfApplications = $customized_blacklist_paths;
    }

}
