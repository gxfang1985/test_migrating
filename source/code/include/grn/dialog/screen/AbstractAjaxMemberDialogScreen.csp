<?php

namespace grn\grn\dialog\screen;

use grn\grn\MemberLogic;

/**
 * Class AbstractAjaxMemberDialogScreen
 *
 * @package grn\grn\dialog\screen
 */
abstract class AbstractAjaxMemberDialogScreen
{
    const DISPLAY_MODE_MEMBERS_LIST = '1';
    const DISPLAY_MODE_SUB_MEMBERS_LIST = '2';
    const COMMAND_TYPE_SEARCH_SUB_MEMBERS = 'search_sub_members';
    const COMMAND_TYPE_GO_BACK = 'go_back';
    const SWITCH_TAB_ID_1 = '1';
    const SWITCH_TAB_ID_2 = '2';

    const LINE_PREFIX_USER = 'u';
    const LINE_PREFIX_GROUP = 'g';
    const LINE_PREFIX_DYNAMIC_ROLE = 'dr';
    const LINE_PREFIX_STATIC_ROLE = 'sr';

    const CLASS_TYPE_USER = 'cb_user';
    const CLASS_TYPE_GROUP = 'cb_group';
    const CLASS_TYPE_DYNAMIC_ROLE = 'dynamic_role';
    const CLASS_TYPE_STATIC_ROLE = 'cb_role';

    const ROLE_ID_EVERYONE = 'Everyone';
    const ROLE_ID_LOGINUSER = 'LoginUser';

    const AUTHORITY_TYPE_READ = 'read';

    const PRIMARY_KEY_ID = '_id';
    const MEMBER_ITEM_ID = 'id';
    const MEMBER_ITEM_USE_DRILL_DOWN = 'use_drill_down';

    /** @var \GRN_Smarty */
    protected $smarty;

    /** @var \GRN_Uum */
    protected $uum;

    /** @var  \CB_User */
    protected $login_user;

    /** @var boolean, whether display no privilege user */
    protected $keep_no_privilege_user = false;

    /** @var int */
    private $display_limit;

    /** @var array ID of all members to be displayed on the screen */
    private $display_members_id = [];

    /** @var array of all users to be displayed on the screen */
    private $display_users_id = [];

    /** @var array of all groups to be displayed on the screen */
    private $display_groups_id = [];

    /** @var array of all static roles to be displayed on the screen */
    private $display_static_roles_id = [];

    /** @var array of all dynamic roles to be displayed on the screen */
    private $display_dynamic_roles_id = [];

    /** @var string */
    private $command_type;

    /** @var string */
    private $display_mode;

    /** @var string */
    private $sub_primary_key;

    /** @var int */
    private $switch_tab_id;

    /** @var string */
    private $prev_switch_tab_id;

    /** @var string */
    private $prev_current_page_number;

    /** @var string */
    private $prev_search_word;

    /** @var string $dialog_name Dialog name */
    private $dialog_name = 'member_list_dialog';

    /**
     * AjaxMemberListDialogScreen constructor.
     *
     * @param $input
     */
    public function __construct($input)
    {
        // Turn off the extra information
        global $G_state_set;
        $G_state_set->set('html_should_be_closed', false);
        $G_state_set->set('copyright_should_be_written', false);
        $G_state_set->set('error_page_type', 'json');

        // Initialize properties necessary
        require_once("grn/smarty.csp");
        $this->smarty = new \GRN_Smarty();

        $this->smarty->assign('dialog_name', $this->getDialogName());

        global $G_container_base;
        $this->uum = $G_container_base->getInstance('uum');
        $this->login_user = $this->uum->getLoginUser();

        require_once('grn/ui.csp');
        $ui_config_manager = \GRN_UIConfigManager::getInstance();
        $ui_config
            =& $ui_config_manager->getUserConfig($this->login_user);
        $this->display_limit = $ui_config->getListMax();

        $this->command_type = cb_at($input, 'command_type', '');
        $this->display_mode = cb_at($input, 'display_mode', '');
        $this->sub_primary_key = cb_at($input, 'sub_primary_key', '');
        $this->switch_tab_id = cb_at($input, 'switch_tab_id',
            self::SWITCH_TAB_ID_1);
        $this->prev_switch_tab_id = cb_at($input, 'prev_switch_tab_id',
            self::SWITCH_TAB_ID_1);
        $this->prev_search_word = cb_at($input, 'prev_search_word', '');
        $this->prev_current_page_number = cb_at($input,
            'prev_current_page_number', '0');

        if ($this->command_type == ""
            || $this->command_type == self::COMMAND_TYPE_GO_BACK
        ) {
            $this->display_mode = self::DISPLAY_MODE_MEMBERS_LIST;
            $this->sub_primary_key = '';
        } elseif ($this->command_type
                  == self::COMMAND_TYPE_SEARCH_SUB_MEMBERS
        ) {
            $this->display_mode = self::DISPLAY_MODE_SUB_MEMBERS_LIST;
        }

        if (isset($input['dialog_name'])) {
            $this->dialog_name = $input['dialog_name'];
        }
        $this->smarty->assign('dialog_name', $this->getDialogName());
        $this->smarty->assign('is_ajax', $input['use_ajax'] ?? false);
    }

    /**
     * @param bool $include_search
     */
    abstract protected function _setDisplayMembersId($include_search = false);

    /**
     * @return int
     */
    abstract protected function getWantPage();

    /**
     * @return string
     */
    abstract protected function getSearchWord();

    /**
     * @return string
     */
    abstract protected function getPrimaryKey();

    /**
     * @return boolean
     */
    abstract protected function useSearchItem();

    /**
     * @return mixed
     */
    abstract protected function getAccessPlugin();

    /**
     * @return string
     */
    abstract protected function getAppId();

    /**
     * @return boolean
     */
    abstract protected function isSearch();

    /**
     * @return string
     */
    abstract protected function createDialogTitle();

    /**
     * @return string
     */
    protected function getDialogName()
    {
        return $this->dialog_name;
    }

    /**
     * @return boolean
     */
    public function useBackButton()
    {
        return false;
    }

    /**
     * @return string
     */
    public function getDialogTitle()
    {
        return $this->createDialogTitle();
    }

    /**
     * @param $tpl_name
     *
     * @return mixed|string|void
     */
    public function fetch($tpl_name)
    {
        // Get the whole always first.(For the access judgment)
        $this->getDisplayMembersId(true);

        $this->assignMembers();
        $this->assignSearchItem();
        $this->assignPageNavigation();
        $this->assignUsersInfo();
        $this->assignDisplayInfo();

        return $this->smarty->fetch($tpl_name);
    }

    /**
     * @param bool $include_search
     *
     * @return array|mixed
     */
    protected function getDisplayMembersId($include_search = false)
    {
        $this->_setDisplayMembersId($include_search);

        if (count($this->display_users_id) > 0) {
            $access_plugin = $this->getAccessPlugin();
            $app_id = $this->getAppId();

            if ($this->keep_no_privilege_user) {
                $app_id = null;
            }
            $users_id = array_keys($this->display_users_id);
            $use_app_users = MemberLogic::getInstance()
                                        ->getAccessEvalUsersWithAllowAppId($users_id,
                                            $access_plugin, $app_id);

            foreach (array_values($users_id) as $uid) {
                if ( ! array_key_exists($uid, $use_app_users)) {
                    unset($this->display_users_id[$uid]);
                    unset($this->display_members_id[self::LINE_PREFIX_USER . '_'
                                                    . $uid]);
                }
            }
        }

        return $this->display_members_id;
    }

    /**
     * @param $search_id
     *
     * @return array
     */
    protected function searchIncludeUsers($search_id)
    {
        require_once('grn/org_util.csp');
        require_once('grn/org_util_search.csp');
        $condition = grn_get_user_info_search_condition($search_id,
            $this->getSearchWord());
        $search_hit_user_ids = grn_search_user_ids($search_id, $condition);

        return $search_hit_user_ids;
    }

    /**
     * @param $search_id
     * @param $include_search
     */
    protected function searchGroupUsers($search_id, $include_search)
    {
        $group = $this->uum->getGroup($search_id);
        if ( ! $group) {
            cb_throw_error(E_GRN_GROUP_NOT_FOUND);
        }

        // To get all first
        $group_users = $this->getGroupUsersInfo($search_id);

        // Search
        $is_search = false;
        $search_hit_user_ids = [];
        if ($this->isSearch() && $include_search) {
            $search_hit_user_ids = $this->searchIncludeUsers($search_id);
            $is_search = true;
        }

        foreach ($group_users as $user) {
            $uid = $user[self::PRIMARY_KEY_ID];
            if ($is_search) {
                if (in_array($uid, $search_hit_user_ids)) {
                    $this->addUser($uid);
                }
            } else {
                $this->addUser($uid);
            }
        }
    }

    /**
     * @param $search_id
     * @param $include_search
     */
    protected function searchRoleUsers($search_id, $include_search)
    {
        // Check for the existence of the role
        $role = $this->uum->getStaticRole($search_id);
        if ( ! $role) {
            cb_throw_error(E_GRN_ROLE_NOT_FOUND);
        }

        // To get all first
        $role_users = $this->getRoleUsersInfo($search_id);

        // Search
        $search_hit_user_ids = [];
        $is_search = false;
        if ($this->isSearch() && $include_search) {
            $search_hit_user_ids = $this->searchIncludeUsers("");
            $is_search = true;
        }

        foreach ($role_users as $user) {
            $uid = $user[self::PRIMARY_KEY_ID];
            if ($is_search) {
                if (in_array($uid, $search_hit_user_ids)) {
                    $this->addUser($uid);
                }
            } else {
                $this->addUser($uid);
            }
        }
    }

    /**
     * @param $search_id
     *
     * @return array
     */
    protected function getGroupUsersInfo($search_id)
    {
        return $this->uum->getGroupUsersInfo($search_id);
    }

    /**
     * @param $search_id
     *
     * @return array
     */
    protected function getRoleUsersInfo($search_id)
    {
        return $this->uum->getRoleUsersInfo($search_id);
    }

    /**
     * @return string
     */
    protected function getSubPrimaryKey()
    {
        return $this->sub_primary_key;
    }

    /**
     * @return int|mixed
     */
    protected function getSwitchTabID()
    {
        return $this->switch_tab_id;
    }

    /**
     * @return boolean
     */
    protected function useSwitchTab()
    {
        return false;
    }

    /**
     * @return array()
     */
    protected function getSwitchTabCaption()
    {
        return null;
    }

    /**
     * @param      $id
     * @param bool $use_drill_down
     */
    protected function addUser($id, $use_drill_down = false)
    {
        $this->display_users_id[$id] = [
            self::MEMBER_ITEM_ID             => $id,
            self::MEMBER_ITEM_USE_DRILL_DOWN => $use_drill_down
        ];
        $this->display_members_id[self::LINE_PREFIX_USER . '_' . $id] = $id;
    }

    /**
     * @param      $id
     * @param bool $use_drill_down
     */
    protected function addGroup($id, $use_drill_down = true)
    {
        $this->display_groups_id[$id] = [
            self::MEMBER_ITEM_ID             => $id,
            self::MEMBER_ITEM_USE_DRILL_DOWN => $use_drill_down
        ];
        $this->display_members_id[self::LINE_PREFIX_GROUP . '_' . $id] = $id;
    }

    /**
     * @param      $id
     * @param bool $use_drill_down
     */
    protected function addStaticRole($id, $use_drill_down = true)
    {
        $this->display_static_roles_id[$id] = [
            self::MEMBER_ITEM_ID             => $id,
            self::MEMBER_ITEM_USE_DRILL_DOWN => $use_drill_down
        ];
        $this->display_members_id[self::LINE_PREFIX_STATIC_ROLE . '_' . $id]
            = $id;
    }

    /**
     * @param      $id
     * @param bool $use_drill_down
     */
    protected function addDynamicRole($id, $use_drill_down = true)
    {
        $this->display_dynamic_roles_id[$id] = [
            self::MEMBER_ITEM_ID             => $id,
            self::MEMBER_ITEM_USE_DRILL_DOWN => $use_drill_down
        ];
        $this->display_members_id[self::LINE_PREFIX_DYNAMIC_ROLE . '_' . $id]
            = $id;
    }

    /**
     * @return int
     */
    protected function getUserCount()
    {
        return count($this->display_users_id);
    }

    /**
     * @return array
     */
    protected function getDisplayUserIds(): array
    {
        return array_keys($this->display_users_id);
    }

    /**
     * @return int
     */
    protected function getGroupCount()
    {
        return count($this->display_groups_id);
    }

    /**
     * @return int
     */
    protected function getRoleCount()
    {
        return count($this->display_static_roles_id)
               + count($this->display_dynamic_roles_id);
    }

    /**
     * assign Search Item
     */
    private function assignSearchItem()
    {
        $use_search = $this->useSearchItem();
        $this->smarty->assign('use_search', $use_search);
        if ($use_search) {
            $this->smarty->assign('search_word', $this->getSearchWord());
        }

        if ($this->isMainDialog()) {
            $this->smarty->assign('prev_search_word', $this->getSearchWord());
        } elseif ($this->isSubDialog()) {
            $this->smarty->assign('prev_search_word', $this->prev_search_word);
        }
    }

    /**
     * assign members
     */
    private function assignMembers()
    {
        $no_exists_result = false;
        if (count($this->display_members_id) <= 0) {
            $no_exists_result = true;
            if ($this->isSearch()) {
                $no_exists_message = cb_msg('grn.grn',
                    'grn.member_list_dialog.no_exists_message_no_search_result');
            } else {
                $no_exists_message = $this->getNoExistsMessage();

            }
        }
        $this->smarty->assign('no_exists_result', $no_exists_result);

        if ($no_exists_result) {
            $this->smarty->assign('no_exists_message', $no_exists_message);
        }

        $offset = $this->display_limit * ($this->getWantPage() - 1);

        $display_members_id = array_slice($this->display_members_id, $offset,
            $this->display_limit);

        $this->smarty->assign('display_members_id', $display_members_id);

    }

    /**
     * @return string
     */
    protected function getNoExistsMessage()
    {
        return cb_msg('grn.grn',
            'grn.member_list_dialog.no_exists_message_no_affiliation_user');
    }

    /**
     * assign page navigation
     */
    private function assignPageNavigation()
    {

        $total_count = count($this->display_members_id);
        $max_page = ceil($total_count / $this->display_limit);
        $current_page = $this->getWantPage();

        $top_page_on = false;
        $prev_page_on = false;
        $next_page_on = false;
        if ($current_page != 1) {
            $top_page_on = true;
            $prev_page_on = true;
        }
        if ($current_page < $max_page) {
            $next_page_on = true;
        }

        $page_navigation = [];
        $page_navigation['top_page_on'] = $top_page_on;
        $page_navigation['prev_page_on'] = $prev_page_on;
        $page_navigation['next_page_on'] = $next_page_on;

        if ($top_page_on) {
            $page_navigation['top_page_number'] = 1;
        }
        if ($prev_page_on) {
            $page_navigation['prev_page_number'] = $current_page - 1;
        }
        if ($next_page_on) {
            $page_navigation['next_page_number'] = $current_page + 1;
        }

        $page_navigation['display_limit'] = $this->display_limit;

        $start_num = $this->display_limit * ($current_page - 1) + 1;
        if ($total_count == 0) {
            $start_num = 0;
        }
        $end_num = $this->display_limit * $current_page;
        if ($total_count < $end_num) {
            $end_num = $total_count;
        }

        $page_navigation['start_num'] = $start_num;
        $page_navigation['end_num'] = $end_num;
        $page_navigation['display_limit'] = $this->display_limit;

        $this->smarty->assign('page_navigation', $page_navigation);

        if ($this->isMainDialog()) {
            $this->smarty->assign('prev_current_page_number', $current_page);
        } elseif ($this->isSubDialog()) {
            $this->smarty->assign('prev_current_page_number',
                $this->prev_current_page_number);
        }
    }

    /**
     * assign users info
     */
    private function assignUsersInfo()
    {
        $users_id = [];
        foreach (array_keys($this->display_users_id) as $uid) {
            $users_id[] = $uid;
        }

        $columns = [];
        $columns[] = 'col_display_name';
        $columns[] = 'col_foreign_key';
        $columns[] = 'col_valid';
        $users_info = $this->uum->getUsersInfo($users_id, $columns);

        $image_icon = \GRN_ControllerUtil::getUserIconFormat($this->login_user);
        if ($image_icon) {
            $users_info = \GRN_ControllerUtil::addPhotoUrlForUsersInfo($users_info,
                \GRN_ControllerUtil::getUserProfilePhotoSmallSize());
        }

        if ($this->keep_no_privilege_user) {
            $app_id = $this->getAppId();
            $this->smarty->assign('app_id', $app_id);
        }
        $this->smarty->assign('login_user_id', $this->login_user->getOID());
        $this->smarty->assign('users_info', $users_info);
    }

    /**
     * assign display info
     */
    private function assignDisplayInfo()
    {
        $this->smarty->assign('groups_info', $this->display_groups_id);
        $this->smarty->assign('static_roles_info',
            $this->display_static_roles_id);
        $this->smarty->assign('dynamic_roles_info',
            $this->display_dynamic_roles_id);

        $this->smarty->assign('display_mode', $this->display_mode);
        $this->smarty->assign('sub_primary_key', $this->getSubPrimaryKey());

        $this->smarty->assign('switch_tab_id', $this->switch_tab_id);
        if ($this->isMainDialog()) {
            $this->smarty->assign('prev_switch_tab_id', $this->switch_tab_id);
        } elseif ($this->isSubDialog()) {
            $this->smarty->assign('prev_switch_tab_id',
                $this->prev_switch_tab_id);
        }
        $this->smarty->assign('switch_tab_caption',
            $this->getSwitchTabCaption());
        $this->smarty->assign('use_switch_tab', $this->useSwitchTab());
    }

    /**
     * @return bool
     */
    protected function isMainDialog()
    {
        return $this->display_mode == self::DISPLAY_MODE_MEMBERS_LIST;
    }

    /**
     * @return bool
     */
    protected function isSubDialog()
    {
        return $this->display_mode == self::DISPLAY_MODE_SUB_MEMBERS_LIST;
    }
}
