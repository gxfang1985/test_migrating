<?php

namespace grn\grn\dialog;

use grn\grn\MemberLogic;

class MemberNameWithDialog
{

    private $param_app_id;
    private $param_user_profile_url_array;
    private $param_limit_display_count;
    private $param_append_script_file;
    private $param_has_space_between_item;
    protected $param_is_display_deleted_user;
    protected $param_id;
    protected $param_dialog_name;
    protected $param_list_wrap_begin;
    protected $param_list_wrap_end;
    protected $param_is_expand_with_ajax = false;

    /* @var \GRN_Uum */
    private $uum;

    /** @var  \CB_User */
    private $login_user;

    /** @var \GRN_Smarty */
    protected $smarty;

    const PREFIX_DELETED_USER = 'd';

    /**
     * MemberNameWithDialog constructor.
     *
     * @param $smarty
     */
    function __construct(&$smarty)
    {
        $this->uum = cb_lwc_uum();

        $this->login_user = $this->uum->getLoginUser();

        $this->smarty = $smarty;

    }

    /**
     * @param array $params
     *
     * @return string
     */
    public function fetch(array $params)
    {
        // Parameters
        $members = cb_at($params, 'members', []);
        $this->param_app_id = cb_at($params, 'app_id', null);
        $this->param_user_profile_url_array = cb_at($params,
            'user_profile_url_array', []);
        $this->param_limit_display_count = cb_at($params,
            'limit_display_count', false);
        $this->param_id = cb_at($params, 'id', 'member');
        $this->param_append_script_file = cb_at($params,
            'append_script_file', true);
        $this->param_is_display_deleted_user = cb_at($params,
            'is_display_deleted_user', false);
        $this->param_dialog_name = cb_at($params, 'dialog_name',
            'span-member-dialog');
        $this->param_list_wrap_begin = $params['list_wrap_begin'] ?? '';
        $this->param_list_wrap_end = $params['list_wrap_end'] ?? '';
        $this->param_is_expand_with_ajax = cb_at($params,
            'is_expand_with_ajax', false);
        $this->param_has_space_between_item = cb_at($params,
            'has_space_between_item', true);
        $total_member = cb_at($params, 'total_member',
            0);

        $result = $this->createDisplayMembers($members, $total_member);
        if ($this->param_append_script_file) {
            $result .= $this->createDialogDisplayScript();
        }

        return $result;
    }

    /**
     * @param array $members
     * @param int   $total_member
     *
     * @return string
     */
    private function createDisplayMembers(array $members, int $total_member = 0)
    {
        $users_id = [];
        $groups_id = [];
        $roles_id = [];
        $deleted_users_info = [];
        $deleted_user_index = 1;
        foreach ($members as $member_id => $member) {
            $prefix = mb_substr($member_id, 0, 1);
            switch ($prefix) {
                case MemberLogic::PREFIX_STATIC_ROLE:
                    $role_id = mb_substr($member_id, 1);
                    $roles_id[$role_id] = $role_id;
                    break;
                case MemberLogic::PREFIX_ORGANIZATION:
                    $group_id = mb_substr($member_id, 1);
                    $groups_id[$group_id] = $group_id;
                    break;
                case self::PREFIX_DELETED_USER:
                    $deleted_users_info[$deleted_user_index][MemberLogic::MEMBER_ID]
                        = $deleted_user_index;
                    $deleted_users_info[$deleted_user_index][MemberLogic::DISPLAY_NAME]
                        = $member[MemberLogic::DISPLAY_NAME];
                    $deleted_user_index++;
                    break;
                default:
                    $user_id = $member_id;
                    $users_id[$user_id] = $user_id;
                    break;
            }
        }
        require_once("grn/controller.csp");
        $users_info = \GRN_ControllerUtil::getUserInfoToShowUserName($users_id,
            $this->login_user);
        $groups_info = $this->uum->getGroupInfoList($groups_id);
        $roles_info = $this->getRolesInfo($roles_id);
        $result = $this->param_list_wrap_begin;
        $member_count = 0;
        $add_space = false;
        // Order to reproduce the sort order , one by one processing
        foreach (array_keys($members) as $member_id) {
            // show expand button
            if ( ! $this->param_is_expand_with_ajax
                 && $this->param_limit_display_count
                 && $member_count == $this->param_limit_display_count
            ) {
                $result .= $this->createMoreDisplayScript("prepend");
            }

            if ($add_space && $this->param_has_space_between_item) {
                // Layout adjustment
                $result .= ' ';
            }
            $add_space = true;

            $result .= $this->createShowMember($member_id, $groups_info,
                $roles_info, $users_info,
                $deleted_users_info);

            $member_count++;
        }

        // show shorter button
        if ( ! $this->param_is_expand_with_ajax
             && $this->param_limit_display_count
             && $member_count > $this->param_limit_display_count
        ) {
            $result .= $this->createMoreDisplayScript("append");
        }

        if ($this->param_limit_display_count && $this->param_is_expand_with_ajax
            && $total_member > $this->param_limit_display_count
        ) {
            $result .= $this->createMoreDisplayScriptWithAjax();
        }

        return $result . $this->param_list_wrap_end;

    }


    /**
     * @param string $member_id
     * @param array  $groups_info
     * @param array  $roles_info
     * @param array  $users_info
     * @param array  $deleted_users_info
     *
     * @return string
     */
    private function createShowMember(
        $member_id,
        array $groups_info,
        array $roles_info,
        array $users_info,
        array $deleted_users_info
    ) {
        $result = '';
        $prefix = mb_substr($member_id, 0, 1);
        switch ($prefix) {
            case MemberLogic::PREFIX_STATIC_ROLE:
                $role_id = mb_substr($member_id, 1);
                $result .= $this->createShowRoleName($role_id, $roles_info);
                break;
            case MemberLogic::PREFIX_ORGANIZATION:
                $group_id = mb_substr($member_id, 1);
                $result .= $this->createShowGroupName($group_id,
                    $groups_info);
                break;
            case self::PREFIX_DELETED_USER:
                $deleted_user_index = mb_substr($member_id, 1);
                $result .= $this->renderDeletedMember($deleted_user_index,
                    $deleted_users_info);
                break;
            default:
                $user_id = $member_id;
                $result .= $this->createShowUserName($user_id, $users_info);
                break;
        }

        return $result;
    }

    /**
     * @param array $roles_id
     *
     * @return array|\CB_Role[]
     */
    private function getRolesInfo(array $roles_id)
    {
        if (count($roles_id) == 0) {
            return [];
        }

        $role_condition = 'tab_cb_role._id IN (' . implode(',', $roles_id)
                          . ')';
        $roles_info = $this->uum->getStaticRoles(0, -1, null,
            $role_condition);

        return $roles_info;
    }

    /**
     * @param       $user_id
     * @param array $users_info
     *
     * @return string
     */
    private function createShowUserName($user_id, array $users_info)
    {
        $result = '';

        if ( ! array_key_exists($user_id, $users_info)) {
            return $result;
        }

        $user_info = $this->createUserInfoToRender($user_id, $users_info);
        $result = $this->renderUser($user_info);

        return $result;
    }

    /**
     * Create user info to render html
     *
     * @param       $user_id
     * @param array $users_info
     *
     * @return array
     */
    protected function createUserInfoToRender($user_id, array $users_info)
    {
        $user_info = [];
        $user_info['name']
            = \GRN_ControllerUtil::getUserNameText($this->login_user->getOID(),
            $user_id, $users_info);
        $user_info['status'] = $users_info[$user_id]["status"] ?? null;
        $user_info['image'] = $this->getUserImage($user_id, $users_info);
        $user_info['url'] = $this->param_user_profile_url_array[$user_id];
        $user_info['id'] = $user_id;

        return $user_info;
    }

    /**
     * Render show user HTML
     *
     * @param array $user_info
     *
     * @return string
     */
    protected function renderUser(array $user_info)
    {
        $wrap_class = isset($user_info['status']) ? 'user-grn '
                                                    . $user_info['status']
            : 'user-grn';
        $target = cb_is_forest() ? ' target="_blank"' : '';
        $result = '<nobr>';
        $anchor = $user_info['image']
                  . htmlspecialchars($user_info['name']);
        $url = $user_info['url'];
        $result .= sprintf("<span class='%s'><a href=\"%s\" %s>%s</a></span>\r\n",
            $wrap_class, $url, $target,
            $anchor);
        $result .= '</nobr>';

        return $result;
    }

    /**
     * @param int   $deleted_user_index
     * @param array $deleted_users_info
     *
     * @return string
     */
    protected function renderDeletedMember(
        $deleted_user_index,
        array $deleted_users_info
    ) {
        $result = '';

        if ( ! $this->param_is_display_deleted_user) {
            return $result;
        }

        if ( ! array_key_exists($deleted_user_index, $deleted_users_info)) {
            return $result;
        }

        $image = $this->getNormalUserImage();
        $user_name
            = $deleted_users_info[$deleted_user_index][MemberLogic::DISPLAY_NAME];

        $result = '<span class="user-grn">' . $image
                  . htmlspecialchars($user_name) . '</span>';

        return '<nobr>' . $result . '</nobr>';
    }

    /**
     * @param       $group_id
     * @param array $groups_info
     *
     * @return mixed|string
     */
    private function createShowGroupName($group_id, array $groups_info)
    {
        if ( ! array_key_exists($group_id, $groups_info)) {
            return '';
        }

        return $this->renderGroup($group_id,
            $groups_info[$group_id]['col_name']);

    }

    /**
     * Render show Group
     *
     * @param string $group_id   Group ID
     * @param string $group_name Group name
     *
     * @return string
     */
    protected function renderGroup(string $group_id, string $group_name): string
    {
        require_once $this->smarty->_get_plugin_filepath('function',
            'grn_member_dialog');
        $result = '<nobr>';
        $result .= smarty_function_grn_member_dialog([
            'dialog_link_tpl_name' => 'grn/group_dialog_link.tpl',
            'link_name'            => $group_name,
            'anchor_id'            => $this->param_id
                                      . '_dialog_link_group_' . $group_id,
            'want_page'            => 1,
            'dialog_name'          => $this->param_dialog_name
        ], $this->smarty);

        return $result . '</nobr>';
    }

    /**
     * @param       $role_id
     * @param array $roles_info
     *
     * @return mixed|string
     */
    private function createShowRoleName($role_id, array $roles_info)
    {
        if ( ! array_key_exists($role_id, $roles_info)) {
            return '';
        }
        $role_foreign_key = $roles_info[$role_id]->get('foreign_key');

        return $this->renderRole($role_id, $role_foreign_key);

    }

    /**
     * Render show role
     *
     * @param string $role_id          Role ID
     * @param string $role_foreign_key Role foreign key
     *
     * @return string
     */
    protected function renderRole(
        string $role_id,
        string $role_foreign_key
    ): string {
        require_once $this->smarty->_get_plugin_filepath('function',
            'grn_member_dialog');
        $result = '<nobr>';
        $anchor_id = $this->param_id . '_dialog_link_role_' . $role_id;
        $result .= smarty_function_grn_member_dialog([
            'dialog_link_tpl_name' => 'grn/role_dialog_link.tpl',
            'link_name'            => $role_foreign_key,
            'anchor_id'            => $anchor_id,
            'want_page'            => 1,
            'dialog_name'          => $this->param_dialog_name
        ], $this->smarty);

        return $result . '</nobr>';
    }

    /**
     * @param       $user_id
     * @param array $users_info
     *
     * @return string
     */
    private function getUserImage($user_id, array $users_info)
    {
        require_once $this->smarty->_get_plugin_filepath('function',
            'grn_image');

        if ($user_id == $this->login_user->getOID()) {
            $image = smarty_function_grn_image(['image' => 'loginuser20.gif'],
                $this->smarty);
        } elseif ( ! is_null($users_info[$user_id]['col_valid'])) {
            $image = smarty_function_grn_image(['image' => 'invaliduser20.gif'],
                $this->smarty);
        } elseif ( ! isset($users_info[$user_id]['col_using_app'])
                   || ! $users_info[$user_id]['col_using_app']
        ) {
            $image
                = smarty_function_grn_image(['image' => 'invalid_app_user20.png'],
                $this->smarty);
        } else {
            $image = $this->getNormalUserImage();
        }

        return $image;
    }

    /**
     * @return string
     */
    private function getNormalUserImage()
    {
        require_once $this->smarty->_get_plugin_filepath('function',
            'grn_image');

        return smarty_function_grn_image(['image' => 'user20.gif'],
            $this->smarty);
    }

    /**
     * @return string
     */
    private function createDialogDisplayScript()
    {
        $smarty = new \GRN_Smarty();

        $smarty->assign('url', cb_pageurl('grn/ajax/member_list_dialog'));
        $smarty->assign('access_plugin_encoded', null);
        $smarty->assign('app_id', $this->param_app_id);

        return $smarty->fetch('grn/ajax/member_list_dialog_script.tpl');
    }

    /**
     * @param $case
     *
     * @return string
     */
    private function createMoreDisplayScript($case)
    {
        $smarty = new \GRN_Smarty();

        $smarty->assign('id', $this->param_id);
        $smarty->assign('case', $case);

        return $smarty->fetch('grn/ajax/member_list_dialog_more_display.tpl');
    }

    protected function createMoreDisplayScriptWithAjax()
    {
        $smarty = new \GRN_Smarty();

        return $smarty->fetch('grn/ajax/member_list_dialog_more_display_with_ajax.tpl');
    }
}
