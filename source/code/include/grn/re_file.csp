<?php
/**
 * This package manages attachment files uploaded from the RichEditor.
 *
 * @auther  Yuichi, Nakamura  2005/04
 * @version 1.0
 * @package re
 */
require_once('re/re_file.csp');

/**
 * An implementation of GRN_REFileBunderManager using the database.
 *
 * @package re
 */
class GRN_REFileBinder_DB extends CB_REFileBinder_DB
{
    /**
     * Constructor
     *
     * @access private
     */
    function __construct()
    {
        parent::__construct();
    }

    /**
     * Get Server File List
     *
     * @access public
     *
     * @param  string $doc_id  //Document ID
     * @param  int    $user_id //Document Creator ID
     *
     * @return mixed  $server_file_list           //Server File List
     */
    function getServerFileList($doc_id, $user_id = null)
    {
        assert('is_string($doc_id)');

        //Create RowSet
        $rowset = new CB_RowSet($this->_table);

        //Create Condition
        $query = null;
        if ($user_id == null) {
            $query = sprintf("(col_user IS NULL) AND (col_document_id = '%s')",
                $doc_id);
        } else {
            $query
                = sprintf("(col_user IS NULL OR col_user = '%d') AND (col_document_id = '%s')",
                $user_id, $doc_id);
        }
        $rowset->addCondition($query);

        //Get Server File List
        $server_file_list = [];
        while ( ! is_null($row = $rowset->iterate())) {
            $server_file_list[$row->getOID()] = $row;
        }

        //Return Server Filoe List
        return $server_file_list;
    }

    /**
     * Add File
     *
     * @access public
     *
     * @param  mixed $file //File Information or CB_Server_File
     *
     * @return int|null              //Server File ID
     */
    function addFile(&$file)
    {
        //Maintenance Old Server File
        $this->deleteExpiredFiles();

        if ( ! $this->isValidFile($file)) {
            cb_throw_error(E_GRN_UPLOADING_FAILED);
        }

        //Add Server File
        $binder = new CB_REFileBinder_DB_Internal($this->_table);
        $ret = $binder->addFile($file);

        return $ret;
    }

    /**
     * @param $file
     *
     * @return bool
     */
    public function isValidFile($file)
    {
        if (is_array($file)) {
            if ($file['error'] !== UPLOAD_ERR_OK) {
                cb_throw_error(E_GRN_UPLOADING_FAILED);
            }
            if (filesize($file['tmp_name']) <= 0) {
                cb_throw_error(E_GRN_UPLOADING_FAILED);
            }
        }

        return $this->isValidImageType($file);
    }

    /**
     * @var array
     */
    private $valid_mime_types
        = [
            'image/gif',
            'image/jpeg',
            'image/pjpeg', // IE
            'image/png',
            'image/x-png', // IE
            'image/bmp'
        ];

    /**
     * @var array
     */
    private $valid_image_types
        = [
            IMAGETYPE_GIF,
            IMAGETYPE_JPEG,
            IMAGETYPE_PNG,
            IMAGETYPE_BMP
        ];

    /**
     * @param $file
     *
     * @return bool
     */
    private function isValidImageType($file)
    {
        $file_mime = null;
        $file_tmp_name = null;
        if (is_object($file) && is_a($file, 'CB_ServerFile')) {
            /*  @var CB_ServerFile $file */
            $file_mime = $file->get('mime');
            $file_tmp_name = $file->getTmpName();
        } elseif (is_array($file)) {
            /* @var array $file */
            $file_mime = $file['type'];
            $file_tmp_name = $file['tmp_name'];
        } else {
            return false;
        }

        return (in_array($file_mime, $this->valid_mime_types)
                && in_array(exif_imagetype($file_tmp_name),
                $this->valid_image_types));
    }
}


