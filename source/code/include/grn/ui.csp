<?php

/**
 * Common UI preference configurations.
 *
 * @package grn.common
 */

require_once('fw/module.csp');

use grn\grn\access\service\AppAccess;

define('GRN_UI_EXENAME', 'grn');

/**
 * UI configuration object manager.
 *
 * @package grn.common
 */
class GRN_UIConfigManager extends CB_ModuleBase
{
    /**
     * Return the singleton.
     *
     * @return GRN_UIConfigManager
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_UIConfigManager();
        }

        return $_instance;
    }

    /**
     * @access private
     */
    function __construct()
    {
        parent::__construct('grn.common.ui');
    }

    /**
     * @access private
     */
    var $_sysconf = null;

    /**
     * @access private
     */
    var $_userconf = [];

    /**
     * Get system-wide UI configuration object.
     *
     * @return GRN_UIConfig
     */
    function getSystemConfig()
    {
        if (is_null($this->_sysconf)) {
            $dummy = null;
            $this->_sysconf = new GRN_UIConfig($dummy, $this);
        }

        return $this->_sysconf;
    }

    /**
     * Get per-user UI configuration object.
     *
     * @param $user
     *
     * @return GRN_UIConfig
     */
    function getUserConfig($user)
    {
        $oid = $user->getOID();
        if ( ! array_key_exists($oid, $this->_userconf)) {
            $this->_userconf[$oid] = new GRN_UIConfig($user, $this);
        }

        return $this->_userconf[$oid];
    }

    /**
     * Get default value for UI configuration object.
     */
    public static function static_getUIConfigDefaultParameter()
    {
        static $init = [
            'inline'                   => true,
            'list_max'                 => 20,
            'follow_max'               => 20,
            'subject_width'            => 30,
            'truncate_width'           => 20,
            'name_width'               => 20,
            'area_width'               => 50,
            'area_height'              => 15,
            'file_lockable'            => true,
            'display_application_menu' => true,
            'application_menu_style'   => 'Small',
            'mailto_application'       => null,
            'export_charset'           => null,
            'design'                   => null,
            'can_user_change_headers'  => false,
            'user_name_format'         => 0,
            'show_priority_group'      => 0,
        ];

        return $init;
    }

    function getLinkMenu($app_id = '')
    {
        require_once('grn/application.csp');
        $app_locator = GRN_ApplicationLocator::instance();
        if ($app_id) {
            $apps = [$app_id];
        } else {
            $apps = $app_locator->getActiveApplicationIds();
        }
        $menu = [];

        foreach ($apps as $app_id) {
            $i = 0;
            $config = $app_locator->getConfig($app_id);
            while (array_key_exists('link_menu' . $i, $config)) {
                $menu[] = [
                    'location' => $config['link_menu' . $i],
                    'app_id'   => $app_id
                ];
                $i++;
            }
        }

        return $menu;
    }

    public function setupDefaultMenu()
    {
        $this->getDefaultApplicationMenu();
    }

    /**
     * @return array
     */
    protected function getInitialApplicationMenuIds()
    {
        require_once('grn/application.csp');
        $app_locator = GRN_ApplicationLocator::instance();
        $apps = $app_locator->getActiveApplicationIds();

        return $apps;
    }

    /**
     * @return array
     */
    function &getInitialApplicationMenu()
    {
        require_once('grn/application.csp');
        $app_locator = GRN_ApplicationLocator::instance();
        $apps = $this->getInitialApplicationMenuIds();
        $menu = [];

        foreach ($apps as $app_id) {
            $config = $app_locator->getConfig($app_id);
            if (array_key_exists('index', $config)) {
                $link_array = explode('/', $config['index']);
                $menu[] = [
                    'location' => $link_array[1],
                    'app_id'   => $app_id
                ];
            }
        }

        return $menu;
    }

    /**
     * @return GRN_Menu
     */
    function getDefaultApplicationMenu()
    {
        require_once('grn/menu.csp');
        $profile = $this->getSystemProfile();
        $menu = new GRN_Menu(cb_class2table('GRN_DefaultApplicationMenu'));
        $value = true;
        if ( ! $profile->getAttribute('ap_menu_initialized', $value)) {
            $profile->createAttribute('ap_menu_initialized', $value);
            $initial =& $this->getInitialApplicationMenu();
            $menu->initialize($initial);
        }

        return $menu;
    }

    function turnApplicationMenuToInitial()
    {
        $profile = $this->getSystemProfile();
        $profile->removeAttribute('ap_menu_initialized');
    }

    /**
     * @return GRN_IconManager
     */
    function getIconManager()
    {
        $ret = new GRN_IconManager();

        return $ret;
    }
}


/**
 * @package grn.common
 */
class GRN_UIConfig extends CB_ModuleBase
{
    /**
     * width space name column
     */
    const MAX_SPACE_WIDTH = 20;

    static public $LIST_MAX
        = [
            5,
            10,
            15,
            20,
            25,
            30,
            40,
            50,
            60,
            70,
            80,
            90,
            100
        ];
    static public $FOLLOW_MAX
        = [
            5,
            10,
            15,
            20,
            25,
            30,
            40,
            50,
            60,
            70,
            80,
            90,
            100
        ];

    /**
     * @access private
     */
    var $_settings = [];

    /**
     * @access private
     */
    var $_profile;

    /**
     * @access private
     */
    var $_session = null;

    /**
     * @access private
     */
    var $_manager = null;

    /**
     * @access private
     */
    var $_user = null;

    /**
     * @access private
     */
    function _getProfile()
    {
        $ret = null;
        if ($this->_user) {
            $ret = $this->getUserProfile($this->_user);
        } else {
            $ret = $this->getSystemProfile();
        }

        return $ret;
    }

    function __construct($user, $manager)
    {
        parent::__construct('grn.common.ui');

        $this->_user = $user;
        $this->_manager = $manager;

        global $G_state_set;
        if ( ! $G_state_set->get('command_line')) {
            // ユーザー設定の場合、セッションの取得
            if ($user) {
                $this->_session = $this->getSession();
            }

            // システム設定、またはユーザー設定だがキャッシュされていない場合
            // 初期化が必要かを確認して処理する
            if (is_null($user) || ($user && ! $this->_session->get('cached'))) {
                $default = null;
                if ($user) {
                    $default = $this->getSystemProfile();
                }
                $this->_initialize($default);
            }

            // ユーザーの設定の場合、セッションにキャッシュする
            if ($user) {
                $this->_loadSessionCache();
            }
        } else {
            $default = null;
            if ($user) {
                $default = $this->getSystemProfile();
            }
            $this->_initialize($default);
        }
    }

    /**
     * @access private
     */
    function _loadSessionCache()
    {
        $session = $this->_session;
        if ( ! $session) {
            return;
        }

        if ( ! $session->get('cached')) {
            $session->set('cached', true);
            $this->_profile = $this->_getProfile();
            $attributes = $this->_profile->getAttributes();
            foreach ($attributes as $key => $value) {
                $session->set($key, $value);
            }
        }

        $init = GRN_UIConfigManager::static_getUIConfigDefaultParameter();
        foreach (array_keys($init) as $key) {
            $this->_settings[$key] = $session->get($key);
        }
    }

    /**
     * セッションデータを更新する
     */
    function updateSessionCache()
    {
        if ( ! $this->_session) {
            return;
        }
        $this->_session->set('cached', null);
        $this->_loadSessionCache();
    }


    /**
     * @access private
     */
    function _initialize($default)
    {
        $this->_profile = $this->_getProfile();

        if ($this->_profile->getAttribute('init', $dummy) !== false) {
            return;
        }

        $init = GRN_UIConfigManager::static_getUIConfigDefaultParameter();
        if (is_null($default)) {
            foreach ($init as $key => $value) {
                $this->_profile->createAttribute($key, $value);
            }
        } else {
            foreach (array_keys($init) as $key) {
                $this->_copy($key, $default);
            }
        }

        $this->_profile->createAttribute('init', true);
    }

    /**
     * @access private
     */
    function _copy($name, $default)
    {
        $this->_profile = $this->_getProfile();

        if ($default->getAttribute($name, $value) === false) {
            $init = GRN_UIConfigManager::static_getUIConfigDefaultParameter();
            if (array_key_exists($name, $init)) {
                $value = $init[$name];
            }
        }
        $this->_profile->createAttribute($name, $value);
    }

    /**
     * @access private
     */
    function &_get($name)
    {
        if (array_key_exists($name, $this->_settings)) {
            return $this->_settings[$name];
        }

        $setting = null;

        $this->_profile = $this->_getProfile();
        $this->_profile->getAttribute($name, $setting);

        $this->_settings[$name] = $setting;

        global $G_state_set;
        if ( ! $G_state_set->get('command_line')) {
            if ($this->_session) {
                $this->_session->set($name, $setting);
            }
        }

        return $setting;
    }

    /**
     * @access private
     */
    function _set($name, $value)
    {
        $this->_profile = $this->_getProfile();

        $this->_settings[$name] = $value;

        global $G_state_set;
        if ( ! $G_state_set->get('command_line')) {
            if ($this->_session) {
                $this->_session->set($name, $value);
            }
        }
        if ($this->_profile->updateAttribute($name, $value) === false) {
            $this->_profile->createAttribute($name, $value);
        }
    }

    /**
     * 画像のインライン表示を許可/不許可
     *
     * @return bool
     */
    public function getInlineSetting()
    {
        return $this->_get('inline');
    }

    /**
     * @param bool $setting
     */
    public function setInlineSetting($setting)
    {
        $this->_set('inline', $setting);
    }

    /**
     * 一覧表示の件数(N-件)
     *
     * @return int
     */
    public function getListMax()
    {
        return $this->_get('list_max');
    }

    /**
     * @param int $setting
     */
    public function setListMax($setting)
    {
        if ( ! in_array($setting, self::$LIST_MAX)) {
            cb_throw_error(E_GRN_SYSTEM_INVALID_FORM_DATA);
        }
        $this->_set('list_max', $setting);
    }

    /**
     * フォローの一覧表示の件数
     *
     * @return int
     */
    public function getFollowMax()
    {
        return $this->_get('follow_max');
    }

    /**
     * @param int $setting
     */
    public function setFollowMax($setting)
    {
        if ( ! in_array($setting, self::$FOLLOW_MAX)) {
            cb_throw_error(E_GRN_SYSTEM_INVALID_FORM_DATA);
        }
        $this->_set('follow_max', $setting);
    }

    /**
     * 標題を表示する幅
     *
     * @return int
     */
    public function getSubjectWidth()
    {
        return $this->_get('subject_width');
    }

    /**
     * @param int $setting
     */
    public function setSubjectWidth($setting)
    {
        $this->_set('subject_width', $setting);
    }

    /**
     * 本文やフォローの先頭を表示する幅
     *
     * @return int
     */
    public function getTruncateWidth()
    {
        return $this->_get('truncate_width');
    }

    /**
     * @param int $setting
     */
    public function setTruncateWidth($setting)
    {
        $this->_set('truncate_width', $setting);
    }

    /**
     * 受取人/差出人等を表示する幅
     *
     * @return int
     */
    public function getNameWidth()
    {
        return $this->_get('name_width');
    }

    /**
     * @param int $setting
     */
    public function setNameWidth($setting)
    {
        $this->_set('name_width', $setting);
    }

    /**
     * スペース名を表示する幅
     *
     * @return  int
     */
    public function getSpaceWidth()
    {
        return self::MAX_SPACE_WIDTH;
    }

    /**
     * テキストエリアの幅
     *
     * @return int
     */
    public function getAreaWidth()
    {
        return $this->_get('area_width');
    }

    /**
     * @param int $width
     */
    public function setAreaWidth($width)
    {
        return $this->_set('area_width', $width);
    }

    /**
     * テキストエリアの高さ
     *
     * @return int
     */
    public function getAreaHeight()
    {
        return $this->_get('area_height');
    }

    /**
     * @param int $height
     */
    public function setAreaHeight($height)
    {
        return $this->_set('area_height', $height);
    }

    /**
     * ファイル操作時にロックをとれるか否か
     */
    function getFileLockable()
    {
        return $this->_get('file_lockable');
    }

    function setFileLockable($setting)
    {
        $this->_set('file_lockable', $setting);
    }

    /**
     * ヘッダ、フッタの設定画面での設定項目をユーザが変更できるか否か
     */
    function getCanUserChangeHeaders()
    {
        return $this->_get('can_user_change_headers');
    }

    function setCanUserChangeHeaders($setting)
    {
        return $this->_set('can_user_change_headers', $setting);
    }

    /**
     * アプリケーションメニューを表示するか否か
     */
    function getDisplayApplicationMenu()
    {
        return $this->_get('display_application_menu');
    }

    function setDisplayApplicationMenu($setting)
    {
        $this->_set('display_application_menu', $setting);
    }

    /**
     * アプリケーションメニューの表示形式
     */
    function getApplicationMenuStyle()
    {
        return $this->_get('application_menu_style');
    }

    function setApplicationMenuStyle($setting)
    {
        $this->_set('application_menu_style', $setting);
    }

    /**
     * メールアドレスと連携させるアプリケーションID(NULLの場合は通常のmailto:リンク)
     */
    function getMailToApplication()
    {
        return $this->_get('mailto_application');
    }

    function setMailToApplication($setting)
    {
        $this->_set('mailto_application', $setting);
    }

    /**
     * ファイルへ書き出す際の文字コード（NULLの場合は文字コードを選択させる）
     */
    function getExportCharset()
    {
        return $this->_get('export_charset');
    }

    function setExportCharset($setting)
    {
        $this->_set('export_charset', $setting);
    }

    /**
     * 画面デザイン設定
     */
    function getDesign()
    {
        $design = $this->_get('design');

        switch ($design) {
            //keep old 5 designes
            case "Design-aquablue" :
            case "Design-aquapink" :
            case "Design-global" :
            case "Design-japanesestyle" :
            case "Design-simple" :
                //new design from F2.0
            case "Design-aquagreen" :
            case "Design-aquaorange" :
            case "Design-silver" :
            case "Design-black" :
            case "Design-chocolate" :
            case "Design-paris" :
            case "Design-sea" :
            case "Design-bear" :
            case "Design-classic2005" :
            case "Design-classic2011" :
                //new design from F3.0
            case "Design-spacedesign" :
            case "Design-inkpaint" :
            case "Design-dragon" :
            case "Design-ocean" :
            case "Design-bozuman" :
                //new design from F4.0
            case "Design-modern" :
            case "Design-mtfuji" :
            case "Design-orange" :
            case "Design-relax" :
                //new design from F5.0
            case "Design-fireworks" :
            case "Design-cat" :
            case "Design-sweets" :
                //new design from F6.0
            case "Design-modernred" :
            case "Design-moderngreen" :
            case "Design-moderngray" :
            case "Design-polarbear" :
            case "Design-bubble" :
            case "Design-forest" :
                //new design from F7.0
            case "Design-modernbrown" :
            case "Design-pixel" :
            case "Design-geometric" :
            case "Design-americancomic" :
                //new design from F8.0
            case "Design-bluewave" :
            case "Design-yellowwave" :
            case "Design-circles" :
                //new design More Modern F13.0
            case "Design-mm" :
                break;
            default :
                $design = "Design-mm";
        }

        return $design;
    }

    function setDesign($setting)
    {
        $this->_set('design', $setting);
    }

    /**
     *
     * ユーザー名の後に優先する組織を表示するか
     */
    public function getShowPriorityGroup()
    {
        return $this->_get('show_priority_group');
    }

    public function setShowPriorityGroup($setting)
    {
        $this->_set('show_priority_group', $setting);
    }

    static public $SHOW_USER_NAME_ONLY = 0;
    static public $SHOW_USER_NAME_NICKNAME = 1;

    public function getUserNameFormat()
    {
        $ret = $this->_get('user_name_format');
        if ( ! in_array($ret,
            [self::$SHOW_USER_NAME_ONLY, self::$SHOW_USER_NAME_NICKNAME])
        ) {
            return self::$SHOW_USER_NAME_ONLY;
        }

        return $ret;
    }

    public function setUserNameFormat($setting)
    {
        $this->_set('user_name_format', $setting);
    }

    /**
     * ユーザーアイコン
     */
    static public $USE_SIMPLE_ICON = 0;
    static public $USE_PROFILE_IMAGE_ICON = 1;

    public function getUserIconFormat()
    {
        $ret = $this->_get('user_icon');
        if (is_null($ret)) {
            $ret = self::$USE_PROFILE_IMAGE_ICON;
        }

        return (int)$ret;
    }

    public function setUserIconFormat($setting)
    {
        $this->_set('user_icon', $setting);
    }

    /**
     * 最近選択した組織の表示件数
     */
    function getMaxHistoryGroup()
    {
        return $this->_getHistoryProperty('max_history_group', 10);
    }

    function setMaxHistoryGroup($setting)
    {
        $this->_set('max_history_group', $setting);
    }

    /**
     * 最近選択したユーザーの表示件数
     */
    function getMaxHistoryUser()
    {
        return $this->_getHistoryProperty('max_history_user', 10);
    }

    function setMaxHistoryUser($setting)
    {
        $this->_set('max_history_user', $setting);
    }

    /**
     * 最近選択した施設グループの表示件数
     */
    function getMaxHistoryFacilityGroup()
    {
        return $this->_getHistoryProperty('max_history_facilitygroup', 10);
    }

    function setMaxHistoryFacilityGroup($setting)
    {
        $this->_set('max_history_facilitygroup', $setting);
    }

    /**
     * 最近選択した施設グループの表示件数
     */
    function getMaxHistoryFacility()
    {
        return $this->_getHistoryProperty('max_history_facility', 10);
    }

    function setMaxHistoryFacility($setting)
    {
        $this->_set('max_history_facility', $setting);
    }

    /**
     * Myグループの表示位置
     */
    function getMyGroupPosition()
    {
        return $this->_getHistoryProperty('my_group_position', 'upper');
    }

    function setMyGroupPosition($setting)
    {
        if ($setting == 'upper' || $setting == 'lower') {
            $this->_set('my_group_position', $setting);
        }
    }

    function _getHistoryProperty($property_name, $default)
    {
        if (is_null($this->_user)) {
            $ret = $this->_get($property_name);
            if (is_null($ret)) {
                return $default;
            }

            return $ret;
        }

        if (is_null($ret = $this->_get($property_name))
            || ! $this->getCanUserChangeHistory()
        ) {
            $system_config = $this->_manager->getSystemConfig();

            return $system_config->_getHistoryProperty($property_name,
                $default);
        }

        return $ret;
    }

    /**
     * 最近選択した〜〜をユーザーが変更できるかどうか
     */
    function getCanUserChangeHistory()
    {
        if ( ! is_null($this->_user)) {
            $system_config = $this->_manager->getSystemConfig();

            return $system_config->getCanUserChangeHistory();
        }

        return $this->_get('can_user_change_history');
    }

    function setCanUserChangeHistory($setting)
    {
        return $this->_set('can_user_change_history', $setting);
    }

    /**
     * @return string
     */
    public function isEnableInlineThumbnail()
    {
        $setting = $this->_get('inline_thumbnail');

        return is_null($setting) ? "0" : $setting;
    }

    /**
     * @param string $setting
     */
    public function setInlineThumbnail($setting)
    {
        assert('$setting=="1"||$setting=="0"');
        if ('$setting=="1"||$setting=="0"') {
            $this->_set('inline_thumbnail', $setting);
        }
    }

    /**
     * mobile view ON OFF
     */
    public function isEnableMobileView()
    {
        $ret = $this->_get('mobile_view');
        if (is_null($ret)) {
            $ret = 0;
        }

        return (int)$ret;
    }

    /**
     * @param int $setting
     */
    public function setMobileView($setting)
    {
        if (is_null($setting) || (int)$setting == 0) {
            $this->_set('mobile_view', 0);
        } else {
            $this->_set('mobile_view', 1);
        }
    }
    
}

/**
 * 自動リンクフィルターの実装
 *
 * @param  string $string 入力
 * @param  string $popup  外部リンクをポップアップ
 *
 * @return string
 */
function grn_autolink($string, $popup = false)
{
    if (0 == strlen($string)) {
        return $string;
    }

    require_once('grn/uum.csp');
    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');
    $login = $uum->getLoginUser();

    $app_id = null;
    if ($login) {
        require_once('grn/ui.csp');
        $manager = GRN_UIConfigManager::getInstance();
        $config = $manager->getUserConfig($login);
        $app_id = $config->getMailToApplication();
    }

    $page_array = null;
    $custom_mailer = null;
    if ($app_id) {
        require_once('grn/application.csp');
        $locator = GRN_ApplicationLocator::instance();
        //custom mailer
        if (strpos($app_id, 'custom:') !== false) {
            require_once('grn/webmailerlink_logic.csp');
            $mailer_logic = GRN_WebMailerLinkLogic::getInstance();
            $ids = explode(':', $app_id);
            $custom_mailer_tmp = $mailer_logic->getMailer($ids[1], false);
            if ($custom_mailer_tmp) {
                $custom_mailer = $custom_mailer_tmp['url'];
                $app_id = 'custom';
            } else {
                $app_id = null;
            }
        } elseif (AppAccess::isAppAvailable($app_id)) {
            $app = $locator->getInstance($app_id);
            if (is_a($app, 'GRN_ApplicationBase')
                && in_array('getutility',
                    array_map("strtolower", get_class_methods(get_class($app))))
            ) {
                $utility = $app->getUtility();
                $system = $utility->getSystemConfig();
                $system->getGeneralSetting($general_settings);
                if ( ! $general_settings['disable_mail']) {
                    $page_array = $app->getMailPageInfo('send');
                }
            }
        }
    }

    $suffix = (strncasecmp(php_uname('s'), 'WIN', 3) === 0) ? 'exe'
        : 'cgi';
    $exe_pattern = GRN_UI_EXENAME . '\\.' . $suffix
                   . '(/(([a-zA-Z0-9_.%+\\-]+/)*[a-zA-Z0-9_.%+\\-]+)(/-/[a-zA-Z0-9/_.%+\\-]+)?(\\?([a-zA-Z0-9/_.&;=+%\\-]+((#[a-zA-Z0-9_.%+\\-]+)?))?)?)?';
    $url_pattern = "(https?://[a-zA-Z0-9/_.\[\]()'*!|?#&;=$+:@%~,\\-]+)";
    $popup_string = $popup ? ' target="_blank"' : '';

    $matches = [];
    mb_ereg_search_init($string, $exe_pattern);
    while (($ret = mb_ereg_search_pos()) !== false) {
        $regs = mb_ereg_search_getregs();
        $matches[$ret[0]] = ['type' => 0, 'len' => $ret[1], 'regs' => $regs];
    }

    // UNIX系の場合
    if (strncasecmp(php_uname('s'), 'WIN', 3) !== 0) {
        $cgi_pattern = GRN_UI_EXENAME
                       . '\\.exe(/(([a-zA-Z0-9_.%+\\-]+/)*[a-zA-Z0-9_.%+\\-]+)(/-/[a-zA-Z0-9/_.%+\\-]+)?(\\?([a-zA-Z0-9/_.&;=+%\\-]+((#[a-zA-Z0-9_.%+\\-]+)?))?)?)?';
        mb_ereg_search_init($string, $cgi_pattern);
        while (($ret = mb_ereg_search_pos()) !== false) {
            $regs = mb_ereg_search_getregs();
            $matches[$ret[0]] = [
                'type' => 0,
                'len'  => $ret[1],
                'regs' => $regs
            ];
        }
    }

    mb_ereg_search_init($string, $url_pattern);
    while (($ret = mb_ereg_search_pos()) !== false) {
        $regs = mb_ereg_search_getregs();
        $matches[$ret[0]] = ['type' => 1, 'len' => $ret[1], 'regs' => $regs];
    }

    require_once('grn/regexp_pattern.csp');
    mb_ereg_search_init($string, GRN_EMAIL_REGEXP_PATTERN);
    while (($ret = mb_ereg_search_pos()) !== false) {
        $regs = mb_ereg_search_getregs();
        $matches[$ret[0]] = ['type' => 2, 'len' => $ret[1], 'regs' => $regs];
    }
    ksort($matches);
    $matches[strlen($string)] = ['type' => 3, 'len' => 0, 'regs' => null];
    $ptr = 0;
    $ret_string = '';
    foreach ($matches as $start => $info) {
        if ($start < $ptr) {
            continue;
        }

        $type = $info['type'];
        $len = $info['len'];
        $regs = $info['regs'];
        $ret_string .= htmlspecialchars(substr($string, $ptr, $start - $ptr));

        switch ($info['type']) {
            case 0:
                $link = cb_format_url($regs[2]);
                if ($regs[4] || $regs[5]) {
                    $link = substr($link, 0, strlen($link) - 1);
                }
                $link = '<a href="' . $link . $regs[4] . $regs[5] . '">' .
                        htmlspecialchars($regs[0]) . '</a>';
                $ret_string .= $link;
                break;
            case 1:
                if (cb_is_forest()) {
                    $domain = trim(cb_get_domain());
                    $pos = strrpos($domain, ".");
                    if ($pos === false) {
                        $replacement_format = 'https://$1%s.cybozu$2.com';
                    } else {
                        $replacement_format = 'https://$1%s.' . substr($domain,
                                0, $pos) . '$2.' . substr($domain, $pos + 1);
                    }
                    $replacement = sprintf($replacement_format,
                        cb_is_secure_access() ? '.s' : '');
                    $url
                        = preg_replace(grn_ui_get_skylab_fqdn_pattern(),
                        $replacement, $regs[0]);
                } else {
                    $url = $regs[0];
                }
                $link = '<a href="' . htmlspecialchars($url) . '"'
                        . $popup_string . '>' .
                        htmlspecialchars($regs[0]) . '</a>';
                $ret_string .= $link;
                break;
            case 2:
                //custom mailer
                if ($app_id === 'custom') {
                    $custom_mailer_url = str_replace('%email%', $regs[0],
                        $custom_mailer);
                    $pattern = "/[\\\\<>\"\s]/";
                    $custom_mailer_url = preg_replace($pattern, "",
                        $custom_mailer_url);
                    require_once('grn/controller.csp');
                    $custom_mailer_url = grn_safe_url($custom_mailer_url);
                    $link = '<a href="' . $custom_mailer_url . '">'
                            . htmlspecialchars($regs[0]) . '</a>';
                    $ret_string .= $link;
                } elseif ( ! is_array($page_array)
                           ||
                           ! array_key_exists('rcpt_param_name', $page_array)
                ) {
                    $link = '<a href="mailto:' . $regs[0] . '">' .
                            htmlspecialchars($regs[0]) . '</a>';
                    $ret_string .= $link;
                } else {
                    if (array_key_exists('params', $page_array)) {
                        $params = $page_array['params'];
                    } else {
                        $params = [];
                    }
                    $params[$page_array['rcpt_param_name']] = $regs[0];
                    $url
                        = cb_format_url($page_array['page'],
                        $params);
                    $link = '<a href="' . $url
                            . '">' .
                            htmlspecialchars($regs[0])
                            . '</a>';
                    $ret_string .= $link;
                }
                break;
        }

        $ptr = $start + $len;
    }

    return $ret_string;
}

/**
 * URL系パラメーターの共通処理関数
 *
 * @param  array  $params original parameters
 * @param  string $function_name
 * @param  object $smarty smarty object
 *
 * @return array
 */
function grn_ui_url_params($params, $function_name, $smarty)
{
    $url_params = $params;
    unset($url_params['page']);
    unset($url_params['fragment']);
    unset($url_params['postfix']);
    unset($url_params['params']);
    unset($url_params['element_id']);

    if (array_key_exists('params', $params)) {
        $rest_params = (array)$params['params'];
    } else {
        $rest_params = [];
    }

    $url_params = $url_params + $rest_params;
    $params['url_params'] = $url_params;

    return $params;
}

/**
 * LINK系パラメーターの共通処理関数
 *
 * @param  array  $params original parameters
 * @param  string $function_name
 * @param  object $smarty smarty object
 *
 * @return array
 */
function grn_ui_link_params($params, $function_name, $smarty)
{
    $params = grn_ui_url_params($params, $function_name, $smarty);

    if (array_key_exists('url_params', $params)) {
        $url_params = (array)$params['url_params'];
    } else {
        $url_params = [];
    }

    unset($url_params['caption']);
    unset($url_params['truncated_caption']);
    unset($url_params['caption_module']);
    unset($url_params['caption_key']);
    unset($url_params['class']);
    unset($url_params['image']);
    unset($url_params['image_direct']);
    unset($url_params['alt']);
    unset($url_params['target']);
    unset($url_params['title']);
    unset($url_params['disabled']);
    unset($url_params['unread']);
    unset($url_params['script']);
    unset($url_params['wrapper_class']);
    $params['url_params'] = $url_params;

    $truncated_caption = (array_key_exists('truncated_caption', $params)
        ? (int)$params['truncated_caption'] : null);
    if (array_key_exists('caption', $params)) {
        $caption = $params['caption'];
        if ($truncated_caption) {
            $caption = mb_strimwidth($caption, 0, $truncated_caption, '...');
        }
        $caption = htmlspecialchars($caption);
    } else {
        $caption_module = $params['caption_module'];
        $caption_key = $params['caption_key'];
        $caption = cb_msg($caption_module, $caption_key);
    }
    $params['caption'] = $caption;

    if (array_key_exists('target', $params)) {
        $target = $params['target'];
    } else {
        $target = null;
    }

    $target_area = $target ? (' target="' . $target . '"') : '';
    $params['target_area'] = $target_area;

    if (array_key_exists('title', $params)) {
        $title = $params['title'];
    } else {
        $title = null;
    }

    $title_area = $title ? (' title="' . htmlspecialchars($title)
                            . '"') : '';
    $params['title_area'] = $title_area;

    if (array_key_exists('alt', $params)) {
        $alt = $params['alt'];
        if (strlen($alt) > 0) {
            $alt = htmlspecialchars($alt);
        }
    } else {
        $alt = null;
    }

    $params['alt'] = $alt;

    if (array_key_exists('script', $params)) {
        $script = $params['script'];
        if (strlen($script) > 0) {
            $script = htmlspecialchars($script);
        }
    } else {
        $script = null;
    }

    $params['script'] = $script;

    return $params;
}

/**
 * IMAGE系パラメーターの共通処理関数
 *
 * @param  array  $params original parameters
 * @param  string $function_name
 * @param  object $smarty smarty object
 *
 * @return array
 */
function grn_ui_image_params($params, $function_name, $smarty)
{
    $alt = '';
    if (array_key_exists('alt', $params)) {
        $alt = htmlspecialchars($params['alt']);
    }
    $params['alt'] = $alt;

    $class = '';
    if (array_key_exists('class', $params)) {
        $class = htmlspecialchars($params['class']);
    }
    $params['class'] = $class;

    return $params;
}

/**
 * ファイルに出力する文字コードを取得する
 *
 * @param object $user     ユーザー
 * @param string $page     ファイルへ出力するデータの表示画面名
 * @param array  $position データ表示画面のサイトポジション
 *
 * @return string
 *
 * @see code/doc_root/grn/export_charset.csp
 * @see code/doc_root/grn/command_export_charset.csp
 */
function grn_ui_export_charset($user, $page, $position)
{
    if (is_null($user)) {
        return null;
    }

    global $G_config_common;

    // 出力文字コード固定ならその値を返す
    if ($G_config_common->get('I18N', 'fix_external_encoding')) {
        return $G_config_common->get('I18N', 'default_external_encoding');
    }

    global $G_INPUT;

    if (array_key_exists('charset', $G_INPUT)
        && strlen($G_INPUT['charset']) > 0
    ) {
        // 文字コードを選択した場合にファイル出力画面へ文字コードの指定が
        // 引数に付加される

        $charset = $G_INPUT['charset'];

        // 直打ち対策
        require_once('fw/i18n.csp');
        $i18n = CB_I18N::getInstance();
        $encodings = $i18n->getEncodingNames();

        if ( ! array_key_exists($charset, $encodings)) {
            return $G_config_common->get('I18N', 'default_external_encoding');
        }

        return $charset;
    }

    $ucm = GRN_UIConfigManager::getInstance();
    $uc = $ucm->getUserConfig($user);

    $charset = $uc->getExportCharset();

    if ($charset) {
        return $charset;
    }

    // 出力時に選択する場合

    if (is_null($page)) {
        return $G_config_common->get('I18N', 'default_external_encoding');
    }

    $curr_page = str_replace('/', '.', cb_get_pagename());

    require_once('fw/session_manager.csp');
    $session_manager = CB_SessionManager::getInstance();
    $session = $session_manager->getSession('grn.common.ui');

    $session->set($curr_page, $G_INPUT);
    $session->set($curr_page . '._page', $page);
    $session->set($curr_page . '._position', $position);

    // 文字コード選択画面へ
    cb_redirect('grn/export_charset', ['page' => $curr_page]);
}

// LF -> CRLF
function __grn_ui_lf2crlf($template_output, $smarty)
{
    return preg_replace('/(?<!\x0D)\x0A/', "\x0D\x0A", $template_output);
}

// CRLF -> LF
function __grn_ui_crlf2lf($template_output, $smarty)
{
    return preg_replace('/\x0D\x0A/', "\x0A", $template_output);
}

function grn_ui_export_content(
    $smarty,
    $page,
    $output_charset,
    $input_charset = null
) {
    if (is_null($input_charset)) {
        $input_charset = mb_internal_encoding();
    }

    if (preg_match('/SJIS/i', $output_charset)
        && ! preg_match('/SJIS/i', $input_charset)
    ) {
        $smarty->register_outputfilter("__grn_ui_lf2crlf");
    } else {
        $smarty->register_outputfilter("__grn_ui_crlf2lf");
    }

    require_once('fw/i18n.csp');
    $i18n = CB_I18N::getInstance();
    $encoder = $i18n->getEncoder($output_charset);
    $content = $smarty->fetch($page . ".tpl");
    if ($encoder instanceof CB_I18N_EncoderBase) {
        $content = $encoder->convFromUTF8($smarty->fetch($page . ".tpl"));
    } else {
        $content = mb_convert_encoding($smarty->fetch($page . ".tpl"),
            $output_charset, $input_charset);
    }

    return $content;
}


/**
 * determine user agent
 * return array(
 *              'app' => '[ ie | netscape | firefox | opera ]',
 *              'ver' => (version_number),
 *              'os'  => '[ windows | mac | unknown ]',
 *              'id'  => HTTP_USER_AGENT,
 *             )
 */
function grn_ui_get_user_agent()
{
    if ( ! array_key_exists('HTTP_USER_AGENT', $_SERVER)) {
        return [];
    }

    $client = [];

    $id = $_SERVER['HTTP_USER_AGENT'];

    if (preg_match('/^Mozilla\/.+\(compatible; MSIE .+;.+\)/', $id)) {
        // internet explorer

        $match = [];
        if (preg_match('/Opera ([0-9\.]+)/', $id, $match)) {
            $client['app'] = 'opera';
            $client['ver'] = $match[0];
        } else {
            $client['app'] = 'ie';
            $pos = strpos($id, 'MSIE');
            $end = strpos($id, ';', $pos + 5);
            $client['ver'] = substr($id, $pos + 5, $end - ($pos + 5));
        }

    } elseif (preg_match('/^Mozilla\/5/', $id)
              && strpos($id, 'MSIE') === false
    ) {
        if (preg_match('/Safari/i', $id)) {
            $client['app'] = 'safari';
            if (preg_match('/AppleWebKit\/([0-9]+)\./', $id, $match)) {
                $webkit_build = $match[1];
                if ($webkit_build < 400) {
                    $client['ver'] = 1;
                } elseif ($webkit_build >= 400 && $webkit_build < 500) {
                    $client['ver'] = 2;
                } elseif ($webkit_build >= 500) {
                    $client['ver'] = 3;
                } else {
                    $client['ver'] = null;
                }
            } else {
                $client['ver'] = null;
            }
        } elseif (preg_match('/Firefox/i', $id)) {
            $client['app'] = 'firefox';
            if (preg_match('/Firefox\/([0-9]+)\./', $id, $match)) {
                $client['ver'] = $match[1];
            } else {
                $client['ver'] = null;
            }
        } elseif (preg_match('/Netscape\/6/i', $id)) {
            $client['app'] = 'netscape';
            $client['ver'] = 6;
        } else {
            $client['app'] = 'netscape';
            $client['ver'] = 7;
        }
    } elseif (preg_match('/^Mozilla\/4/', $id)
              && strpos($id, 'MSIE') === false
    ) {
        $client['app'] = 'netscape';
        $client['ver'] = 4;
    } elseif (preg_match('/^Mozilla\/3/', $id)
              && strpos($id, 'MSIE') === false
    ) {
        $client['app'] = 'netscape';
        $client['ver'] = 3;
    } else {
        $client['app'] = 'unknown';
        $client['ver'] = null;
    }

    if (preg_match('/Windows/i', $id)) {
        $client['os'] = 'windows';
    } elseif (preg_match('/Mac/i', $id) || preg_match('/Macintosh/i', $id)) {
        $client['os'] = 'mac';
    } else {
        $client['os'] = 'unknown';
    }

    $client['id'] = $id;

    return $client;
}

/**
 * ヘッダとフッタに関する設定を取得する関数
 * ユーザによる上書きが許可されていてユーザが何か設定していれば、ログインユーザによる設定を返し、
 *　そうでなければシステムの設定を返す。
 */
function getHeaderSettingFromConfig($method)
{
    $manager = GRN_UIConfigManager::getInstance();
    $system_config = $manager->getSystemConfig();
    $ret = $system_config->$method();

    // ログインユーザーを取得する
    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');
    $login = $uum->getLoginUser();

    if ($system_config->getCanUserChangeHeaders() === true && $login != false) {
        $user_config = $manager->getUserConfig($login);
        $user_setting = $user_config->$method();
        if ( ! is_null($user_setting)) {
            $ret = $user_setting;
        }
    }

    return $ret;
}

function _grn_follow_autolink(
    $string,
    $popup = false,
    $link_to_target,
    $module,
    $cid = null,
    $rid = null
) {
    if (0 == strlen($string)) {
        return $string;
    }
    require_once('grn/uum.csp');
    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');
    $login = $uum->getLoginUser();
    $app_id = null;
    if ($login) {
        require_once('grn/ui.csp');
        $manager = GRN_UIConfigManager::getInstance();
        $config = $manager->getUserConfig($login);
        $app_id = $config->getMailToApplication();
    }
    $page_array = null;
    $custom_mailer = null;
    if ($app_id) {
        require_once('grn/application.csp');
        $locator = GRN_ApplicationLocator::instance();
        //custom mailer
        if (strpos($app_id, 'custom:') !== false) {
            require_once('grn/webmailerlink_logic.csp');
            $mailer_logic = GRN_WebMailerLinkLogic::getInstance();
            $ids = explode(':', $app_id);
            $custom_mailer_tmp = $mailer_logic->getMailer($ids[1], false);
            if ($custom_mailer_tmp) {
                $custom_mailer = $custom_mailer_tmp['url'];
                $app_id = 'custom';
            } else {
                $app_id = null;
            }
        } elseif (AppAccess::isAppAvailable($app_id)) {
            $app = $locator->getInstance($app_id);
            if (is_a($app, 'GRN_ApplicationBase')
                && in_array('getutility',
                    array_map("strtolower", get_class_methods(get_class($app))))
            ) {
                $utility = $app->getUtility();
                $system = $utility->getSystemConfig();
                $system->getGeneralSetting($general_settings);
                if ( ! $general_settings['disable_mail']) {
                    $page_array = $app->getMailPageInfo('send');
                }
            }
        }
    }
    $suffix = (strncasecmp(php_uname('s'), 'WIN', 3) === 0) ? 'exe'
        : 'cgi';
    $exe_pattern = GRN_UI_EXENAME . '\\.' . $suffix
                   . '(/(([a-zA-Z0-9_.%+\\-]+/)*[a-zA-Z0-9_.%+\\-]+)(/-/[a-zA-Z0-9/_.%+\\-]+)?(\\?([a-zA-Z0-9/_.&;=+%\\-]+((#[a-zA-Z0-9_.%+\\-]+)?))?)?)?';
    $url_pattern = "(https?://[a-zA-Z0-9/_.\[\]()'*!|?#&;=$+:@%~,\\-]+)";
    if ($module == 'message') {
        $follow_pattern = GRN_MESSAGE_FOLLOW_AUTOLINK_SYMBOL . "(\d+)";
    } else {
        $follow_pattern = ">>(\d+)";
    }
    $popup_string = $popup ? ' target="_blank"' : '';
    $matches = [];
    mb_ereg_search_init($string, $exe_pattern);
    while (($ret = mb_ereg_search_pos()) !== false) {
        $regs = mb_ereg_search_getregs();
        $matches[$ret[0]] = ['type' => 0, 'len' => $ret[1], 'regs' => $regs];
    }
    // UNIX系の場合
    if (strncasecmp(php_uname('s'), 'WIN', 3) !== 0) {
        $cgi_pattern = GRN_UI_EXENAME
                       . '\\.exe(/(([a-zA-Z0-9_.%+\\-]+/)*[a-zA-Z0-9_.%+\\-]+)(/-/[a-zA-Z0-9/_.%+\\-]+)?(\\?([a-zA-Z0-9/_.&;=+%\\-]+((#[a-zA-Z0-9_.%+\\-]+)?))?)?)?';
        mb_ereg_search_init($string, $cgi_pattern);
        while (($ret = mb_ereg_search_pos()) !== false) {
            $regs = mb_ereg_search_getregs();
            $matches[$ret[0]] = [
                'type' => 0,
                'len'  => $ret[1],
                'regs' => $regs
            ];
        }
    }
    mb_ereg_search_init($string, $url_pattern);
    while (($ret = mb_ereg_search_pos()) !== false) {
        $regs = mb_ereg_search_getregs();
        $matches[$ret[0]] = ['type' => 1, 'len' => $ret[1], 'regs' => $regs];
    }
    mb_ereg_search_init($string, $follow_pattern);
    while (($ret = mb_ereg_search_pos()) !== false) {
        $regs = mb_ereg_search_getregs();
        $matches[$ret[0]] = ['type' => 4, 'len' => $ret[1], 'regs' => $regs];
    }
    require_once('grn/regexp_pattern.csp');
    mb_ereg_search_init($string, GRN_EMAIL_REGEXP_PATTERN);
    while (($ret = mb_ereg_search_pos()) !== false) {
        $regs = mb_ereg_search_getregs();
        $matches[$ret[0]] = ['type' => 2, 'len' => $ret[1], 'regs' => $regs];
    }
    ksort($matches);
    $matches[strlen($string)] = ['type' => 3, 'len' => 0, 'regs' => null];
    $ptr = 0;
    $ret_string = '';
    foreach ($matches as $start => $info) {
        if ($start < $ptr) {
            continue;
        }
        $type = $info['type'];
        $len = $info['len'];
        $regs = $info['regs'];
        $ret_string .= htmlspecialchars(substr($string, $ptr, $start - $ptr));
        switch ($info['type']) {
            case 0:
                $link = cb_format_url($regs[2]);
                if ($regs[4] || $regs[5]) {
                    $link = substr($link, 0, strlen($link) - 1);
                }
                $link = '<a href="' . $link . $regs[4] . $regs[5] . '">' .
                        htmlspecialchars($regs[0]) . '</a>';
                $ret_string .= $link;
                break;
            case 1:
                if (cb_is_forest()) {
                    $domain = trim(cb_get_domain());
                    $pos = strrpos($domain, ".");
                    if ($pos === false) {
                        $replacement_format = 'https://$1%s.cybozu$2.com';
                    } else {
                        $replacement_format = 'https://$1%s.' . substr($domain,
                                0, $pos) . '$2.' . substr($domain, $pos + 1);
                    }
                    $replacement = sprintf($replacement_format,
                        cb_is_secure_access() ? '.s' : '');
                    $url
                        = preg_replace(grn_ui_get_skylab_fqdn_pattern(),
                        $replacement, $regs[0]);
                } else {
                    $url = $regs[0];
                }
                $link = '<a href="' . htmlspecialchars($url) . '"'
                        . $popup_string . '>' .
                        htmlspecialchars($regs[0]) . '</a>';
                $ret_string .= $link;
                break;
            case 2:
                //custom mailer
                if ($app_id === 'custom') {
                    $custom_mailer_url = str_replace('%email%', $regs[0],
                        $custom_mailer);
                    $pattern = "/[\\\\<>\"\s]/";
                    $custom_mailer_url = preg_replace($pattern, "",
                        $custom_mailer_url);
                    require_once('grn/controller.csp');
                    $custom_mailer_url = grn_safe_url($custom_mailer_url);
                    $link = '<a href="' . $custom_mailer_url . '">'
                            . htmlspecialchars($regs[0]) . '</a>';
                    $ret_string .= $link;
                } elseif ( ! is_array($page_array)
                           ||
                           ! array_key_exists('rcpt_param_name', $page_array)
                ) {
                    $link = '<a href="mailto:' . $regs[0] . '">' .
                            htmlspecialchars($regs[0]) . '</a>';
                    $ret_string .= $link;
                } else {
                    if (array_key_exists('params', $page_array)) {
                        $params = $page_array['params'];
                    } else {
                        $params = [];
                    }
                    $params[$page_array['rcpt_param_name']] = $regs[0];
                    $url
                        = cb_format_url($page_array['page'],
                        $params);
                    $link = '<a href="' . $url
                            . '">' .
                            htmlspecialchars($regs[0])
                            . '</a>';
                    $ret_string .= $link;
                }
                break;
            case 4://follow auto link
                if ($module == 'message') {
                    $url = cb_pageurl('message/view', [
                        'cid'       => $cid,
                        'rid'       => $rid,
                        'mid'       => $link_to_target,
                        'follow_id' => $regs[1]
                    ]);
                    $link = '<a href=' . $url . '#follow' . $popup_string . '>'
                            . htmlspecialchars($regs[0]) . '</a>';
                } elseif ($module == 'report') {
                    $url = cb_pageurl('report/view', [
                        'cid'       => $cid,
                        'rid'       => $rid,
                        'follow_id' => $regs[1]
                    ]);
                    $link = '<a href=' . $url . '#follow' . $popup_string . '>'
                            . htmlspecialchars($regs[0]) . '</a>';
                } elseif ($module == 'space_thread') {
                    $url = cb_pageurl('space/application/discussion/index',
                        ['spid' => $cid],
                        'tid=' . $link_to_target . '&cmno=' . $regs[1]);
                    $link = '<a href=' . $url . '>' . htmlspecialchars($regs[0])
                            . '</a>';
                } elseif ($module == 'space_todo') {
                    $url = cb_pageurl('space/application/todo/view', [
                        'spid' => $cid,
                        'tdid' => $link_to_target,
                        'cmno' => $regs[1],
                        'from' => $rid
                    ]);
                    $link = '<a href=' . $url . '>' . htmlspecialchars($regs[0])
                            . '</a>';
                } else //buletting
                {
                    $url = cb_pageurl('bulletin/view', [
                        'cid'                => $cid,
                        'aid'                => $link_to_target,
                        'follow_id_autolink' => $regs[1]
                    ]);
                    $link = '<a href=' . $url . '#follow' . $popup_string . '>'
                            . htmlspecialchars($regs[0]) . '</a>';
                }
                $ret_string .= $link;
                break;
        }
        $ptr = $start + $len;
    }

    return $ret_string;
}

/**
 * Replace content contain mask symbol to Link
 *
 * @param $content
 * @param $mark    : symbol  >>. ex: >>2 : auto link to follow 2
 * @param $baseUrl : include mid, rid, cid or some thing esle
 *
 * @return String
 */
function makeAutoLinkForHtmlEditor($string, $mask, $baseUrl, $module = null)
{
    $regex = "<a href(.*?)>(.*?)</a>";
    $matches = [];
    mb_ereg_search_init($string, $regex);
    while (($ret = mb_ereg_search_pos()) !== false) {
        $regs = mb_ereg_search_getregs();
        $matches[$ret[0]] = ['len' => $ret[1], 'regs' => $regs];
    }
    $matches[strlen($string)] = ['len' => 0, 'regs' => null];
    $ptr = 0;
    $ret_string = '';
    foreach ($matches as $start => $info) {
        if ($start < $ptr) {
            continue;
        }
        $len = $info['len'];
        $regs = $info['regs'];
        $temp = substr($string, $ptr, $start - $ptr);
        $temp = _replaceCharToUrl($temp, $mask, $baseUrl, $module);
        $ret_string .= $temp;
        $link = $regs[0];
        $ret_string .= $link;
        $ptr = $start + $len;
    }

    return $ret_string;
}

function _replaceCharToUrl($content, $mask, $baseUrl, $module = null)
{
    $pattern = "/$mask(\d+)/";
    if ('space_thread' == $module || 'space_todo' == $module) {
        $replace = "<a href= '$baseUrl\${1}'> $mask\\1</a>";
    } else {
        $replace = "<a href= '$baseUrl\${1}#follow'> $mask\\1</a>";
    }
    $result = preg_replace($pattern, $replace, $content);

    return $result;
}

/**
 * @param string|null $host
 * @param string|null $domain
 *
 * @return string
 */
function grn_ui_get_skylab_fqdn_pattern($host = null, $domain = null)
{
    $host = $host ?? $_SERVER['HTTP_HOST'] ?? '';
    $tokens = explode(".", $host);
    $domain = $domain ?? trim(cb_get_domain());
    $pos = strrpos($domain, ".");
    if ($pos === false) {
        $pattern = '/^https:\\/\\/(' . $tokens[0]
                   . ')(?:\\.s)?\\.cybozu(-dev)?\\.com/i';
    } else {
        $pattern = '/^https:\\/\\/(' . $tokens[0] . ')(?:\\.s)?\\.'
                   . substr($domain, 0, $pos) . '\\.' . substr($domain,
                $pos + 1) . '/i';
    }

    return $pattern;
}

function grn_get_build_date($build_date = null)
{
    if ( ! is_null($build_date)) {
        return $build_date;
    }

    global $G_config_common, $G_config_grn;
    $is_debug = ($G_config_common->get('Global', 'debug')
                 & ERROR_TRACE_LOG_FLAG_213);
    if ( ! $G_config_grn || $is_debug) {
        $build_date = time();
    } else {
        $build_date = $G_config_grn->get('System', 'build_date');
    }
    $build_date .= '.text';

    return $build_date;
}
