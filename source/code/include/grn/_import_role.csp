<?php

$charset = @$G_INPUT['charset'];
$skip = @$G_INPUT['skip'] ? intval($G_INPUT['skip']) : 0;

if ( ! $charset) {
    global $G_config_common;
    $charset = $G_config_common->get('I18N', 'default_external_encoding');
}

//項目情報の取得
$column_properties = [];
$column_properties['foreign_key'] = [
    'type'      => 'string',
    'name'      => cb_msg('grn.common', 'role_foreign_key'),
    'trim'      => true,
    'necessary' => true
];
$column_properties['description'] = [
    'type'      => 'multiple_string',
    'name'      => cb_msg('grn.common', 'role_description'),
    'trim'      => false,
    'necessary' => false
];

global $G_container_base;
$uum =& $G_container_base->getInstance('uum');

// エラーフックの登録
require_once('fw/csv.csp');
$csv = new CB_CSVReader($charset, $filepath);
$uum =& $G_container_base->getInstance('uum');

//読み込み
require_once("fw/string_util.csp");
while (($line = $csv->readLine()) !== false) {
    if ($skip > 0) {
        $skip--;
        continue;
    }

    //値の取得
    $column_count = 0;
    $column_values = [];
    $keys = array_keys($column_properties);
    foreach ($keys as $key) {
        $prop =& $column_properties[$key];
        if (array_key_exists($column_count++, $line)) {
            if (array_key_exists('trim', $prop) && $prop['trim']) {
                $column_values[$key] = cb_trim($line[$column_count - 1]);
            } else {
                $column_values[$key] = $line[$column_count - 1];
            }
        } else {
            $column_values[$key] = '';
        }
        if (array_key_exists('type', $prop)
            && $prop['type'] === 'multiple_string'
        ) {
            if (mb_strlen($column_values[$key]) > 65535) {
                cb_throw_error(E_GRN_CSV_TOO_LONG_ROLE_PROPERTY,
                    null,
                    [
                        'property' => $prop['name'],
                        'max'      => 65535
                    ]);
            }
        } else {
            if (mb_strlen($column_values[$key]) > 100) {
                cb_throw_error(E_GRN_CSV_TOO_LONG_ROLE_PROPERTY,
                    null,
                    [
                        'property' => $prop['name'],
                        'max'      => 100
                    ]);
            }
        }
        if (array_key_exists('necessary', $prop) && $prop['necessary']) {
            if (strlen($column_values[$key]) === 0) {
                cb_throw_error(E_GRN_CSV_EMPTY_ROLE_KEY,
                    ['property' => $prop['name']],
                    ['property' => $prop['name']]);
            }
        }
    }

    $role =& $uum->getStaticRoleByForeignKey($column_values['foreign_key']);
    if ($role) {
        // 存在する場合更新
        $uum->setStaticRoleProperties($role->getOID(), $column_values);
    } else {
        //ロールを作成
        if ( ! ($role =& $uum->addStaticRole($column_values))) {
            cb_throw_error(E_GRN_CSV_FAILED_ROLE_CREATE);
        }
    }

    $roles[] = $role->getOID();

    $uum->execInspection('role', 'import', [
        'rid'         => $role->getOID(),
        'foreign_key' => $column_values['foreign_key']
    ]);
}


