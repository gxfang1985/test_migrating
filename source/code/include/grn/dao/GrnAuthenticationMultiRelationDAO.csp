<?php

namespace grn\grn\dao;

require_once('grn/authentication.csp');

class GrnAuthenticationMultiRelationDAO
{
    /**
     * @param $parent_id
     *
     * @return array
     */
    public function getChildIdsByParentId($parent_id)
    {
        $db = cb_get_master_db();
        $query = $db->format(
            'SELECT ' .
            'relation.col_child ' .
            'FROM tab_grn_authentication_repository AS repository ' .
            'INNER JOIN tab_grn_authentication_multi_repository_relation AS relation '
            .
            'ON repository._id = relation.col_child ' .
            'WHERE relation.col_parent="@S" ' .
            'ORDER BY repository.col_driver_type="@S", ' .
            'repository.col_list_index, repository._id',
            [$parent_id, GRN_AUTH_REPOSITORY_DEFAULT]
        );

        $ret = $db->query($query);

        $child_ids = [];
        while ($row = $db->fetch_assoc($ret)) {
            $child_ids[] = $row['col_child'];
        }
        $db->free_result($ret);

        return $child_ids;
    }

    /**
     * @param $parent_id
     */
    public function deleteByParentId($parent_id)
    {
        $db = cb_get_master_db();
        $query = cb_queryf(
            $db,
            'DELETE FROM tab_grn_authentication_multi_repository_relation WHERE col_parent="@S"',
            $parent_id
        );
        $db->query($query);
    }

    /**
     * @param $parent_id
     * @param $child_id
     */
    public function add($parent_id, $child_id)
    {
        $db = cb_get_master_db();
        $query = cb_queryf(
            $db,
            'INSERT INTO tab_grn_authentication_multi_repository_relation (col_parent, col_child) VALUES ("@S", "@S")',
            $parent_id, $child_id
        );
        $db->query($query);
    }
}
