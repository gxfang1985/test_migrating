<?php

namespace grn\grn;

use grn\grn\MemberSelectCondition;
use grn\grn\MemberLogic;

require_once("fw/session_manager.csp");
require_once("grn/application.csp");
require_once("grn/org_tree.csp");
require_once("grn/org_util.csp");
require_once("grn/org_util_search.csp");
require_once("grn/smarty.csp");

/**
 *
 * @package grn.grn
 */
class MemberSelectAdd
{
    const ARG_SELECT_MENU = "menu";
    const ARG_SELECT_ORGANIZATION_ID = "poid";
    const ARG_SELECT_ROLE_ID = "prid";
    const ARG_IS_SEARCH = "is_search";
    const ARG_SEARCH_KEYWORD = "searchword";
    const ARG_IS_SEARCH_RESULT = "is_search_result";
    const ARG_IS_ADD = "add";
    const ARG_ADDED_IDS = "aid";
    const ARG_IS_RESET = "reset";
    const ARG_IS_REMOVE = "remove";
    const ARG_REMOVE_IDS = "rids";
    const ARG_OFFSET = "more_user_offset";
    const ARG_LIMIT = "more_user_limit";


    const MEMBER_SELECT_LIMIT = 100;
    const SESSION_KEY_TARGET_IDS = "target_ids";
    const MENU_ROLE = "role";

    private $condition;
    private $input;

    private $select_menu;
    private $select_org_id;
    private $select_role_id;
    private $is_search;
    private $search_keyword;
    private $is_search_result;
    private $is_add;
    private $added_ids;
    private $is_reset;
    private $is_remove;
    private $remove_ids;
    private $is_need_scroll = true;

    /**
     * Constructor
     *
     * @param MemberSelectCondition $memberSelectCondition
     * @param array                 $input
     */
    public function __construct(
        MemberSelectCondition $memberSelectCondition,
        array $input
    ) {
        $this->condition = $memberSelectCondition;
        $this->input = $input;

        $this->uum = \cb_lwc_uum();

        $this->select_menu = \cb_at($input, self::ARG_SELECT_MENU);
        $this->select_org_id = \cb_at($input,
            self::ARG_SELECT_ORGANIZATION_ID);
        $this->select_role_id = \cb_at($input, self::ARG_SELECT_ROLE_ID);
        $this->search_keyword = \cb_at($input, self::ARG_SEARCH_KEYWORD, "");
        $this->is_search = \cb_at($input, self::ARG_IS_SEARCH, '0');
        $this->is_search_result = \cb_at($input, self::ARG_IS_SEARCH_RESULT,
            '0');
        $this->is_add = array_key_exists(self::ARG_IS_ADD, $input)
            ? true : false;
        $this->added_ids = cb_at($input, self::ARG_ADDED_IDS, []);
        $this->is_reset = \cb_at($input, self::ARG_IS_RESET, false);
        $this->is_remove = array_key_exists(self::ARG_IS_REMOVE, $input)
            ? true : false;
        $this->remove_ids = \cb_at($input, self::ARG_REMOVE_IDS, []);
        $this->more_user_offset = \cb_at($input, self::ARG_OFFSET, 0);
        $this->more_user_limit = \cb_at($input, self::ARG_LIMIT,
            self::MEMBER_SELECT_LIMIT);
    }

    private function getSessionTargetIds()
    {
        //-- setup the list of selected groups
        $page_name = $this->condition->getSessionName();
        $session_manager = \CB_SessionManager::getInstance();
        $session = $session_manager->getSession($page_name);
        $target_ids = $session->get(self::SESSION_KEY_TARGET_IDS);
        if ( ! is_array($target_ids)) {
            $target_ids = [];
        }

        if ($this->is_reset) {
            //--reset selected user list
            $target_ids = [];
            $session_manager->destroy($page_name);
            $session = $session_manager->getSession($page_name);
        } elseif ($this->is_add) {
            //--added user list
            $added_ids = $this->added_ids;
            if (is_array($added_ids) && count($added_ids) > 0) {
                foreach ($added_ids as $added_id) {
                    $target_ids[$added_id] = 1;
                }
            }
        } elseif ($this->is_remove) {
            //--removed user list
            $remove_ids = $this->remove_ids;
            if (is_array($remove_ids) && count($remove_ids) > 0) {
                foreach ($remove_ids as $remove_id) {
                    unset($target_ids[$remove_id]);
                }
            }
        }
        //--set selected organization list to session
        $session->set(self::SESSION_KEY_TARGET_IDS, $target_ids);

        $selected_target_ids = [];
        foreach (array_keys($target_ids) as $target_id) {
            $ids = explode(':', $target_id);
            if (count($ids) < 2) {
                continue;
            }
            $id = $ids[1];
            switch ($ids[0]) {
                case MemberLogic::TYPE_USER :
                    $selected_target_ids[] = MemberLogic::PREFIX_USER . $id;
                    break;
                case MemberLogic::TYPE_ORGANIZATION :
                    $selected_target_ids[] = MemberLogic::PREFIX_ORGANIZATION
                                             . $id;
                    break;
                case MemberLogic::TYPE_STATIC_ROLE :
                    $selected_target_ids[] = MemberLogic::PREFIX_STATIC_ROLE
                                             . $id;
                    break;
            }
        }

        return $selected_target_ids;
    }

    /**
     *
     * @param array $target_ids
     *
     * @return array
     */
    private function getDisplayItemOptions(array $target_ids)
    {
        $type_id_array = MemberLogic::getInstance()
                                    ->getPickoutMemberTypeIdFromParam($target_ids);

        return MemberLogic::getInstance()->getDisplayMemberList($type_id_array,
            $this->condition->getAppId());
    }

    /**
     *
     * @param \GRN_Smarty $smarty
     */
    private function setCandidateOptionWithRole(\GRN_Smarty & $smarty)
    {
        $role_id = $this->select_role_id;
        $show_group_role = $this->condition->showGroupRole();
        $smarty->assign("show_group_role", $show_group_role);

        // Set Role List
        $role_list = grn_get_user_or_role_list(self::MENU_ROLE, null, null);
        // not use the administration role and dynamic role.
        $category_role_list = $role_list["static_role_list"];
        unset($category_role_list[GRN_UUM_ADMINISTRATION_ROLE]);

        if ($show_group_role) {
            array_unshift($category_role_list, [
                'rid'         => 0,
                'foreign_key' => cb_msg('grn.grn', 'all_roles')
            ]);
        }

        // set default role id.
        if (is_null($role_id) || empty($role_id) || ! is_numeric($role_id)
            || $role_id < 0
        ) {
            if ($first_role = reset($category_role_list)) {
                $role_id = $first_role["rid"];
                $this->select_role_id = $role_id;
            }
        }
        $smarty->assign("role_list", $category_role_list);

        $candidate_item_options = $this->getCandidateOptionWithRole();

        if ($this->is_search) {
            $smarty->assign(self::ARG_SEARCH_KEYWORD, $this->search_keyword);
            if ( ! empty($this->search_keyword)) {
                $smarty->assign(self::ARG_IS_SEARCH_RESULT, 1);
            }
            $smarty->assign("s_rid", -1);
        } elseif ($role_id > 0 || ($role_id == 0 && $show_group_role)) {
            $smarty->assign("s_rid", $role_id);
            $smarty->assign("role_id", $role_id);
        }

        $smarty->assign("candidate_item_options", $candidate_item_options);
    }

    /**
     * @param \GRN_Smarty $smarty
     */
    private function setCandidateOptionWithGroup(\GRN_Smarty & $smarty)
    {
        $org_id = $this->select_org_id;

        //-- initialize organization tree view
        $page_name = $this->condition->getSessionName();
        $util = \GRN_OrgTreeUtil::getInstance();
        $tree = $util->getTree($page_name);
        if (array_key_exists("top", $this->input)
            || is_null($tree->getRoot())
        ) {
            $tree->initialize();
            $org_id = null;
        }
        $tree->setSelectedNode($org_id);
        $util->setTree($page_name, $tree);
        $tree_org = $tree->getRoot();
        $smarty->assign("tree_org", $tree_org);
        $smarty->assign("page_name", $page_name);

        if (0 > $org_id) {
            $org_row = null;
            $org["oid"] = -2;
            $org["name"] = cb_msg("grn.system", "nogroup_users");
            $org["foreign_key"] = null;
            $org["description"] = null;
            $org["children"] = [];
            $org["child_count"] = 0;
        } else {
            $org_row = grn_get_org_row($org_id);
            $org = grn_get_org_info($org_row, false, true);
            //--child groups
            $org["children"] = grn_get_org_children($org_id, true);
            $org["child_count"] = count($org["children"]);
        }
        //--ancestors group list
        $org["ancestors"] = grn_get_org_ancestors($org_row);
        $smarty->assign("org", $org);
        $smarty->assign("is_root", ! $org_id);
        $smarty->assign("org_id", $org_id);

        $candidate_item_options = $this->getCandidateOptionWithGroup();
        if ($this->is_search) {
            $smarty->assign(self::ARG_SEARCH_KEYWORD, $this->search_keyword);
            if ( ! empty($this->search_keyword)) {
                $smarty->assign(self::ARG_IS_SEARCH_RESULT, 1);
            }
            $smarty->assign("s_oid", -1);
        } elseif ($org_id) {
            $smarty->assign("s_oid", $org_id);
        }

        $smarty->assign("candidate_item_options", $candidate_item_options);
    }

    /**
     *
     * @param \GRN_Smarty $smarty
     */
    public function assignMemberSelectAdd(\GRN_Smarty & $smarty)
    {
        if ($this->condition->isCanSelectRole()) {
            $smarty->assign("permission_to_select_role", true);
        } else {
            $smarty->assign("permission_to_select_role", false);
        }

        if ($this->condition->isCanSelectRole()
            && $this->select_menu == self::MENU_ROLE
        ) {
            $smarty->assign("selected_tab", true);
            $this->setCandidateOptionWithRole($smarty);
        } else {
            $smarty->assign("selected_tab", false);
            $this->setCandidateOptionWithGroup($smarty);
        }

        $smarty->assign(self::ARG_SELECT_MENU, $this->select_menu);
        $smarty->assign(self::ARG_SELECT_ORGANIZATION_ID, $this->select_org_id);
        if ( ! $this->is_search) {
            $smarty->assign(self::ARG_SELECT_ROLE_ID, $this->select_role_id);
        }

        $app_id = $this->condition->getAppId();
        $offset = $this->more_user_offset + $this->more_user_limit;
        $smarty->assign('is_need_scroll', $this->is_need_scroll);
        $smarty->assign('more_user_offset', $offset);
        $smarty->assign('more_user_limit', $this->more_user_limit);
        $smarty->assign('app_id', $app_id);
        $smarty->assign(self::ARG_IS_SEARCH, $this->is_search);
        $smarty->assign('user_tab_name', $this->getUserTabName());
        $smarty->assign('role_tab_name', $this->getRoleTabName());
        $smarty->assign("target", $this->select_menu);

        $target_ids = $this->getSessionTargetIds();
        $selected_item_options = $this->getDisplayItemOptions($target_ids);
        $smarty->assign("selected_item_options", $selected_item_options);
    }

    /**
     * @return string
     */
    private function getUserTabName()
    {

        if ($this->condition->isCanSelectRole()) {
            return cb_msg('grn.grn', 'grn.member_select.tab_user_enable_role');
        } else {
            return cb_msg('grn.grn', 'grn.member_select.tab_user');
        }

    }

    /**
     * @return string
     */
    private function getRoleTabName()
    {

        return cb_msg('grn.grn', 'grn.member_select.tab_role');
    }

    /**
     * get Candidate Option With Role
     *
     * @return array
     */
    private function getCandidateOptionWithRole()
    {
        $role_id = $this->select_role_id;
        $access_plugin = $this->condition->getAccessPlugin();
        $app_id = $this->condition->getAppId();
        $show_group_role = $this->condition->showGroupRole();
        $role_candidate_ids = [];
        $user_ids = [];
        if ($this->is_search) {
            if ($show_group_role
                && ( ! array_key_exists("use_ajax", $this->input)
                     || $this->more_user_limit == -1)
            ) {
                $search_role_list = grn_search_role_list($this->search_keyword);

                $search_role_list = $search_role_list["static_role_list"];
                unset($search_role_list[GRN_UUM_ADMINISTRATION_ROLE]);

                $search_role_list = MemberLogic::getInstance()
                                               ->getAccessEvalRoles($search_role_list,
                                                   $access_plugin);
                foreach ($search_role_list as $_role_id => $_role_info) {
                    $role_candidate_ids[] = MemberLogic::PREFIX_STATIC_ROLE
                                            . $_role_id;
                }
            }

            $condition = grn_get_user_info_search_condition("",
                $this->search_keyword, $this->condition->isSystem());
            $user_ids = grn_search_user_ids("", $condition);

            $this->select_role_id = -1;
        } elseif ($role_id > 0) {
            if ($role_id == GRN_UUM_ADMINISTRATION_ROLE) {
                cb_throw_error(E_GRN_USER_ROLE_ADMINISTRATORS_DISABLED);
            }
            $role = $this->uum->getStaticRole($role_id);
            if ( ! $role) {
                cb_throw_error(E_GRN_ROLE_NOT_FOUND);
            }
            $access_eval_role_id = MemberLogic::getInstance()
                                              ->getAccessEvalRoleById($role_id,
                                                  $access_plugin);
            if ($access_eval_role_id && $show_group_role
                && ( ! array_key_exists("use_ajax", $this->input)
                     || $this->more_user_limit == -1)
            ) {
                $role_candidate_ids[] = MemberLogic::PREFIX_STATIC_ROLE
                                        . $role_id;
            }
            $user_ids = $this->uum->getRoleUsersId($role_id);
        } elseif ($role_id == 0 && $show_group_role) {
            $roles = $this->uum->listStaticRoles();
            $static_role_list = MemberLogic::getInstance()
                                           ->getAccessEvalRoles($roles,
                                               $access_plugin);
            foreach (array_keys($static_role_list) as $rid) {
                if ($rid == GRN_UUM_ADMINISTRATION_ROLE) {
                    continue;
                }
                $role_candidate_ids[] = MemberLogic::PREFIX_STATIC_ROLE . $rid;
            }
        }

        $user_ids = MemberLogic::getInstance()
                               ->getAccessEvalUsersWithAllowAppId($user_ids,
                                   $access_plugin, $app_id);

        $this->setIsNeedScroll(count($user_ids));

        if ($this->more_user_limit != -1) {
            $user_ids = array_slice($user_ids, $this->more_user_offset,
                $this->more_user_limit);
        }

        foreach ($user_ids as $user_id) {
            $role_candidate_ids[] = MemberLogic::PREFIX_USER . $user_id;
        }

        $candidate_item_options
            = $this->getDisplayItemOptions($role_candidate_ids);

        return $candidate_item_options;
    }

    /**
     * get Candidate Option With Group
     *
     * @return array
     */
    private function getCandidateOptionWithGroup()
    {
        $user_ids = [];
        $candidate_item_options = [];
        $org_id = $this->select_org_id;
        $app_id = $this->condition->getAppId();
        $access_plugin = $this->condition->getAccessPlugin();
        if ($this->is_search) {
            $search_org_id = $org_id == -2 ? -1 : $org_id;
            $condition = grn_get_user_info_search_condition($search_org_id,
                $this->search_keyword,
                $this->condition->isSystem());
            $user_ids = grn_search_user_ids($search_org_id, $condition);
        } elseif ($org_id) {
            $access_eval_org_id = MemberLogic::getInstance()
                                             ->getAccessEvalGroupById($org_id,
                                                 $access_plugin);
            if ($access_eval_org_id && $this->condition->showGroupRole()
                && ( ! array_key_exists("use_ajax", $this->input)
                     || $this->more_user_limit == -1)
            ) {
                $candidate_item_options[] = MemberLogic::PREFIX_ORGANIZATION
                                            . $org_id;
            }
            $search_org_id = $org_id == -2 ? -1 : $org_id;
            $user_ids = grn_get_user_ids($search_org_id);
        }

        $user_ids = MemberLogic::getInstance()
                               ->getAccessEvalUsersWithAllowAppId($user_ids,
                                   $access_plugin, $app_id);
        $this->setIsNeedScroll(count($user_ids));

        if ($this->more_user_limit != -1) {
            $user_ids = array_slice($user_ids, $this->more_user_offset,
                $this->more_user_limit);
        }

        foreach ($user_ids as $user_id) {
            $candidate_item_options[] = MemberLogic::PREFIX_USER . $user_id;
        }

        $candidate_item_options
            = $this->getDisplayItemOptions($candidate_item_options);

        return $candidate_item_options;
    }

    /**
     * set is_need_scroll
     *
     * @param int $all_user_count
     */
    private function setIsNeedScroll($all_user_count)
    {
        $selected_count = $this->more_user_offset + $this->more_user_limit;
        if ($selected_count >= $all_user_count) {
            $this->is_need_scroll = false;
        }
    }

    /**
     * get is_need_scroll
     *
     * @return bool
     */
    public function getIsNeedScroll()
    {
        return $this->is_need_scroll;
    }

    /**
     * get member select add list by ajax
     *
     * @return array
     */
    public function ajaxGetMemberSelectAdd()
    {
        if ($this->condition->isCanSelectRole()
            && $this->select_menu == self::MENU_ROLE
        ) {
            return $this->getCandidateOptionWithRole();
        } else {
            return $this->getCandidateOptionWithGroup();
        }
    }
}
