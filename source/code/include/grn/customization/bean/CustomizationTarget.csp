<?php

namespace grn\grn\customization\bean;

class CustomizationTarget
{
    const TYPE_DYNAMIC_ROLE = 'dynamic_role';
    const TYPE_STATIC_ROLE = 'static_role';
    const TYPE_GROUP = 'group';
    const TYPE_USER = 'user';

    const COLUMN_DYNAMIC_ROLE = 'col_dynamic_role';
    const COLUMN_STATIC_ROLE = 'col_static_role';
    const COLUMN_GROUP = 'col_group';
    const COLUMN_USER = 'col_user';

    const KEY_TYPE = 'type';
    const KEY_TARGET_ID = 'tid';

    const DYNAMIC_ROLES_NAME = ['Everyone', 'LoginUser'];

    /** @var array */
    private $customizationTargetList = [];
    /** @var bool */
    private $alreadySetTarget = false;
    /** @var string|null */
    private $customizationTargetSelected = null;
    /** @var array */
    private $selected_users_info = [];


    /**
     * CustomizationTarget constructor.
     *
     * @param array|NULL $rows_data
     */
    public function __construct($rows_data = null)
    {
        if ( ! is_null($rows_data) && count($rows_data) > 0) {
            $dynamic_role = [];
            $static_role = [];
            $group = [];
            $user = [];
            $dynamic_role_selected = [];
            $static_role_selected = [];
            $group_selected = [];
            $user_selected = [];
            $static_role_array = [];
            $group_array = [];
            $user_array = [];

            foreach ($rows_data as $row) {
                if ( ! empty($row[self::COLUMN_DYNAMIC_ROLE])
                     && in_array($row[self::COLUMN_DYNAMIC_ROLE],
                        self::DYNAMIC_ROLES_NAME)
                ) {
                    $dynamic_role[] = [
                        self::KEY_TYPE      => self::TYPE_DYNAMIC_ROLE,
                        self::KEY_TARGET_ID => $row[self::COLUMN_DYNAMIC_ROLE]
                    ];
                    $dynamic_role_selected[] = 'dr'
                                               . $row[self::COLUMN_DYNAMIC_ROLE];
                } elseif ( ! empty($row[self::COLUMN_STATIC_ROLE])) {
                    $static_role_array[] = $row[self::COLUMN_STATIC_ROLE];
                } elseif ( ! empty($row[self::COLUMN_GROUP])) {
                    $group_array[] = $row[self::COLUMN_GROUP];
                } elseif ( ! empty($row[self::COLUMN_USER])) {
                    $user_array[] = $row[self::COLUMN_USER];
                }
            }

            require_once('grn/uum.csp');
            $uum = new \GRN_Uum();

            $static_roles_info = $uum->getStaticRoleInfoList($static_role_array,
                []);
            foreach ($static_role_array as $static_role_id) {
                if (isset($static_roles_info[$static_role_id])) {
                    $static_role[] = [
                        self::KEY_TYPE      => self::TYPE_STATIC_ROLE,
                        self::KEY_TARGET_ID => $static_role_id
                    ];
                    $static_role_selected[] = 'r' . $static_role_id;
                }
            }

            $groups_info = $uum->getGroupInfoList($group_array);
            foreach ($group_array as $group_id) {
                if (isset($groups_info[$group_id])) {
                    $group[] = [
                        self::KEY_TYPE      => self::TYPE_GROUP,
                        self::KEY_TARGET_ID => $group_id
                    ];
                    $group_selected[] = 'g' . $group_id;
                }
            }

            $users_info = $uum->getUsersInfo($user_array, []);
            foreach ($user_array as $user_id) {
                if (isset($users_info[$user_id])) {
                    $user[] = [
                        self::KEY_TYPE      => self::TYPE_USER,
                        self::KEY_TARGET_ID => $user_id
                    ];
                    $user_selected[] = $user_id;
                }
            }

            $this->customizationTargetList = array_merge($dynamic_role,
                $static_role, $group, $user);
            $this->customizationTargetSelected = implode(',',
                array_merge($dynamic_role_selected,
                    $static_role_selected,
                    $group_selected,
                    $user_selected));
            $login = cb_get_login_user();
            require_once('grn/controller.csp');
            $this->selected_users_info
                = \GRN_ControllerUtil::getUserInfoToShowUserName($user_selected,
                $login);

            $this->alreadySetTarget = true;
        }
    }

    /**
     * @return array
     */
    public function getCustomizationTargetList(): array
    {
        return $this->customizationTargetList;
    }

    /**
     * @param array $targets
     *
     */
    public function setCustomizationTargetList(array $targets)
    {
        $this->customizationTargetList = $targets;
    }

    /**
     * @return bool
     */
    public function getAlreadySetTarget(): bool
    {
        return $this->alreadySetTarget;
    }

    /**
     * @return string|null
     */
    public function getCustomizationTargetSelected()
    {
        return $this->customizationTargetSelected;
    }

    /**
     * @return array
     */
    public function getCustomizationUserSelectedInfo(): array
    {
        return $this->selected_users_info;
    }
}
