<?php
require_once('grn/file.csp');

class GRN_Customization_FileBody_Base extends GRN_ServerFile
{
    const MAX_FILE_SIZE = 5242880; // 5MB
    var $col_timestamp = ['type' => 'timestamp', 'notnull' => true];

    function copy($file, $detect_encoding = true)
    {
        $ts = new CB_TimeStamp();
        $ts->unix_ts = time();
        $this->set('timestamp', $ts);

        $this->checkFileSize($file);

        return parent::copy($file, $detect_encoding);
    }

    /**
     * @param array|CB_ServerFile|string $file
     */
    protected function checkFileSize($file)
    {
        $size = 0;
        if (is_array($file)) {
            $size = $file['size'];
        } elseif (is_a($file, 'CB_ServerFile')) {
            $size = $file->get('size');
        } else {
            assert('is_string( $file )');
            $size = filesize($file);
        }

        if ((self::MAX_FILE_SIZE < $size)) {
            cb_throw_error(E_GRN_FILE_MAX_SIZE, null,
                ['limit' => grn_get_filesize_format(self::MAX_FILE_SIZE)]);

        }
    }
}

class GRN_Workflow_Customization_FileBody
    extends GRN_Customization_FileBody_Base
{
    var $_app_id = 'workflow';
}

class GRN_Schedule_Customization_FileBody
    extends GRN_Customization_FileBody_Base
{
    var $_app_id = 'schedule';
}

/**
 * Class GRN_Customization_FileManager
 */
class GRN_Customization_FileManager
{
    private static $instance = [];
    private $fileBodyTable = null;

    /**
     * @param string $module
     *
     * @return GRN_Customization_FileManager
     */
    public static function getInstance($module)
    {
        if ( ! isset(self::$instance[$module])) {
            $c = __CLASS__;
            self::$instance[$module] = new $c($module);
        }

        return self::$instance[$module];
    }

    /**
     * GRN_Customization_FileManager constructor.
     *
     * @param string $module
     */
    function __construct($module)
    {
        $app_locator = GRN_ApplicationLocator::instance();
        $manager = $app_locator->getTableManager($module);
        $this->fileBodyTable
            = $manager->getTableInfo("grn_{$module}_customization_filebody");
    }

    /**
     * @param array $file_ids
     *
     * @return string
     */
    function _makeCondition($file_ids = [])
    {
        $query = '';

        $db = $this->fileBodyTable->getDBConnection();

        if ( ! empty($file_ids)) {
            $query .= cb_queryf($db, "_id IN (@A)", $file_ids);
        }

        return $query;
    }

    /**
     * @param GRN_File $file
     *
     * @return bool|CB_Row|mixed
     */
    function addFile(& $file)
    {
        if ( ! $file) {
            return false;
        }

        /** @var GRN_Workflow_Customization_FileBody $file_body */
        $file_body = $this->fileBodyTable->newRow();

        $file_body->copy($file);
        $file_body->set('file', $this);
        $file_body->set('hash', sha1_file($file->getPath()));

        $file_body->registerNow();

        return $file_body;
    }

    /**
     * @param int $file_id
     *
     * @return GRN_Customization_FileBody_Base|null
     */
    function getFile($file_id)
    {
        $file_ids = [$file_id];
        $files = $this->getFiles($file_ids);
        if (count($files)) {
            return array_shift($files);
        }

        return null;
    }

    /**
     * @param array $file_ids
     *
     * @return GRN_Customization_FileBody_Base[]
     */
    function getFiles($file_ids)
    {
        $files = [];
        if (empty($file_ids)) {
            return $files;
        }

        $condition = $this->_makeCondition($file_ids);

        $row_set = new CB_RowSet($this->fileBodyTable);
        $row_set->addCondition($condition);

        while ( ! is_null(($row = $row_set->iterate()))) {
            $files[$row->getOID()] = $row;
        }

        $row_set->destroy();

        return $files;
    }

    /**
     * @param array $file_ids
     *
     * @return bool
     */
    function deleteFiles($file_ids)
    {
        $files = $this->getFiles($file_ids);

        foreach ($files as $file) {
            $file->delete();
        }
    }
}
