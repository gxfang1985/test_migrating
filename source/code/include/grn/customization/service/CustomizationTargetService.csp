<?php

namespace grn\grn\customization\service;

use grn\grn\customization\bean\CustomizationTarget;
use grn\grn\customization\logic\CustomizationTargetLogic;

class CustomizationTargetService
{
    const POST_KEY_DYNAMIC_ROLE = 'selected_dynamic_roles_UID';
    const POST_KEY_STATIC_ROLE = 'selected_roles_UID';
    const POST_KEY_GROUP = 'selected_groups_UID';
    const POST_KEY_USER = 'selected_users_sUID';

    private $module;
    private $customizationTargetLogic;

    /**
     * @param string $module
     */
    public function __construct(string $module)
    {
        $this->customizationTargetLogic = new CustomizationTargetLogic($module);
        $this->module = $module;
    }

    /**
     * @param string $group_id
     *
     * @return \grn\grn\customization\bean\CustomizationTarget|null
     */
    public function getCustomizationTarget(string $group_id)
    {
        return $this->customizationTargetLogic->getCustomizationTarget($group_id);
    }

    /**
     * @param string $group_id
     *
     * @return array
     */
    public function getCustomizationTargetValue(string $group_id): array
    {
        $targets = $this->getCustomizationTarget($group_id);

        $dynamic_role = [];
        $static_role = [];
        $group = [];
        $user = [];

        foreach ($targets->getCustomizationTargetList() as $target) {
            $type = $target[CustomizationTarget::KEY_TYPE];
            $tid = $target[CustomizationTarget::KEY_TARGET_ID];
            switch ($type) {
                case CustomizationTarget::TYPE_DYNAMIC_ROLE:
                    array_push($dynamic_role, $tid);
                    break;
                case CustomizationTarget::TYPE_STATIC_ROLE:
                    array_push($static_role, $tid);
                    break;
                case CustomizationTarget::TYPE_GROUP:
                    array_push($group, $tid);
                    break;
                case CustomizationTarget::TYPE_USER:
                    array_push($user, $tid);
                    break;
            }
        }

        return [
            CustomizationTarget::TYPE_DYNAMIC_ROLE => implode(':',
                $dynamic_role),
            CustomizationTarget::TYPE_STATIC_ROLE  => implode(':',
                $static_role),
            CustomizationTarget::TYPE_GROUP        => implode(':', $group),
            CustomizationTarget::TYPE_USER         => implode(':', $user)
        ];
    }

    /**
     * @param string                                          $group_id
     * @param \grn\grn\customization\bean\CustomizationTarget $customization_targets
     *
     * @return bool
     */
    public function updateCustomizationTarget(
        string $group_id,
        CustomizationTarget $customization_targets
    ): bool {
        if ($customization_targets->getAlreadySetTarget()) {
            $this->customizationTargetLogic->deleteTarget($group_id);
        }

        return $this->customizationTargetLogic->updateTarget($group_id,
            $customization_targets);
    }

    /**
     * @param string|NULL $dynamic_role_value
     * @param string|NULL $static_role_value
     * @param string|NULL $group_value
     * @param string|NULL $user_value
     *
     * @return array
     */
    public function formatCustomizationTargetValue(
        $dynamic_role_value = null,
        $static_role_value = null,
        $group_value = null,
        $user_value = null
    ): array {
        $dynamic_role_array = explode(':', $dynamic_role_value);
        $static_role_array = explode(':', $static_role_value);
        $group_array = explode(':', $group_value);
        $user_array = explode(':', $user_value);

        $dynamic_role = [];
        $static_role = [];
        $group = [];
        $user = [];

        require_once('grn/uum.csp');
        $uum = new \GRN_Uum();

        foreach ($dynamic_role_array as $dynamic_role_id) {
            if ( ! empty($dynamic_role_id)
                 && in_array($dynamic_role_id,
                    CustomizationTarget::DYNAMIC_ROLES_NAME)
            ) {
                $dynamic_role[] = [
                    CustomizationTarget::KEY_TYPE      => CustomizationTarget::TYPE_DYNAMIC_ROLE,
                    CustomizationTarget::KEY_TARGET_ID => $dynamic_role_id
                ];
            }
        }

        $static_roles_info = $uum->getStaticRoleInfoList($static_role_array,
            []);
        foreach ($static_role_array as $static_role_id) {
            if (isset($static_roles_info[$static_role_id])) {
                $static_role[] = [
                    CustomizationTarget::KEY_TYPE      => CustomizationTarget::TYPE_STATIC_ROLE,
                    CustomizationTarget::KEY_TARGET_ID => $static_role_id
                ];
            }
        }

        $groups_info = $uum->getGroupInfoList($group_array);
        foreach ($group_array as $group_id) {
            if (isset($groups_info[$group_id])) {
                $group[] = [
                    CustomizationTarget::KEY_TYPE      => CustomizationTarget::TYPE_GROUP,
                    CustomizationTarget::KEY_TARGET_ID => $group_id
                ];
            }
        }

        $users_info = $uum->getUsersInfo($user_array, []);
        foreach ($user_array as $user_id) {
            if (isset($users_info[$user_id])) {
                $user[] = [
                    CustomizationTarget::KEY_TYPE      => CustomizationTarget::TYPE_USER,
                    CustomizationTarget::KEY_TARGET_ID => $user_id
                ];
            }
        }

        return array_merge($dynamic_role, $static_role, $group, $user);
    }
}
