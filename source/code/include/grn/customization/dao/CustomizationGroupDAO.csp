<?php

namespace grn\grn\customization\dao;

use grn\grn\customization\bean\CustomizationGroup;

class CustomizationGroupDAO
{
    private $dbConn;
    private $module;

    /**
     * Constructor
     *
     * @param string $module
     */
    function __construct($module)
    {
        $this->dbConn = cb_get_app_db($module);
        $this->module = $module;
    }

    /**
     * @return string
     */
    function getTableName()
    {
        return 'tab_grn_' . $this->module . '_customization_group';
    }

    /**
     * @param string $id
     *
     * @return CustomizationGroup|null
     */
    public function select($id)
    {
        $query_format
            = <<<SQL
SELECT
 _id,
 col_name,
 col_is_active,
 col_order,
 col_creator,
 col_creator_foreign_key,
 col_creator_name,
 col_ctime,
 col_modifier,
 col_modifier_foreign_key,
 col_modifier_name,
 col_mtime
FROM
 @S 
WHERE
 _id = '@S'
SQL;

        $query = $this->dbConn->format($query_format,
            [$this->getTableName(), $id]);
        $query = $this->dbConn->select_format($query, 0, -1,
            CB_DATABASE_DEFAULT_LOCK);
        $result = $this->dbConn->query($query);

        $row = $this->dbConn->fetch_assoc($result);
        $this->dbConn->free_result($result);

        if ( ! $row) {
            return null;
        }

        return new CustomizationGroup($row);
    }

    /**
     * @return CustomizationGroup[]
     */
    public function selectAll()
    {
        $query_format
            = <<<SQL
SELECT
 _id,
 col_name,
 col_is_active,
 col_order,
 col_creator,
 col_creator_foreign_key,
 col_creator_name,
 col_ctime,
 col_modifier,
 col_modifier_foreign_key,
 col_modifier_name,
 col_mtime
FROM
 @S 
ORDER BY
 col_order ASC
SQL;

        $query = $this->dbConn->format($query_format, [$this->getTableName()]);
        $query = $this->dbConn->select_format($query, 0, -1,
            CB_DATABASE_DEFAULT_LOCK);
        $result = $this->dbConn->query($query);

        $rows = [];
        while ($row = $this->dbConn->fetch_assoc($result)) {
            $rows[$row["_id"]] = new CustomizationGroup($row);
        }
        $this->dbConn->free_result($result);

        return $rows;
    }

    /**
     * @return CustomizationGroup[]
     */
    public function selectWithValidStatus()
    {
        $query_format
            = <<<SQL
SELECT
 _id,
 col_name,
 col_is_active,
 col_order,
 col_creator,
 col_creator_foreign_key,
 col_creator_name,
 col_ctime,
 col_modifier,
 col_modifier_foreign_key,
 col_modifier_name,
 col_mtime
FROM
 @S 
WHERE
 col_is_active = 1
ORDER BY
 col_order ASC
SQL;

        $query = $this->dbConn->format($query_format, [$this->getTableName()]);
        $query = $this->dbConn->select_format($query, 0, -1,
            CB_DATABASE_DEFAULT_LOCK);
        $result = $this->dbConn->query($query);

        $rows = [];
        while ($row = $this->dbConn->fetch_assoc($result)) {
            $rows[$row["_id"]] = new CustomizationGroup($row);
        }
        $this->dbConn->free_result($result);

        return $rows;
    }

    /**
     * @param CustomizationGroup $customization_group
     *
     * @return string
     */
    public function insert(CustomizationGroup $customization_group)
    {
        $query_format
            = <<<SQL
INSERT INTO @S
  (col_name, col_is_active, col_order, col_creator, col_creator_foreign_key, col_creator_name, col_ctime, col_modifier, col_modifier_foreign_key, col_modifier_name, col_mtime)
  VALUE
  ('@S', '@S', '@S', '@S', '@S', '@S', UNIX_TIMESTAMP(), '@S', '@S', '@S', UNIX_TIMESTAMP())
SQL;

        $query = $this->dbConn->format($query_format,
            [
                $this->getTableName(),
                $customization_group->getName(),
                $customization_group->isActive(),
                $customization_group->getOrder(),
                $customization_group->getCreator(),
                $customization_group->getCreatorForeignKey(),
                $customization_group->getCreatorName(),
                $customization_group->getModifier(),
                $customization_group->getModifierForeignKey(),
                $customization_group->getModifierName()
            ]);

        $this->dbConn->query($query);

        return $this->dbConn->get_insert_id();
    }

    /**
     * @param CustomizationGroup $customization_group
     *
     * @return bool
     */
    public function update(CustomizationGroup $customization_group)
    {
        $query_format
            = <<<SQL
UPDATE @S
   SET col_name = '@S',
       col_is_active = '@S',
       col_order = '@S',
       col_modifier = '@S',
       col_modifier_foreign_key = '@S',
       col_modifier_name = '@S',
       col_mtime = UNIX_TIMESTAMP()
 WHERE _id = '@S'
SQL;

        $query = $this->dbConn->format($query_format,
            [
                $this->getTableName(),
                $customization_group->getName(),
                $customization_group->isActive(),
                $customization_group->getOrder(),
                $customization_group->getModifier(),
                $customization_group->getModifierForeignKey(),
                $customization_group->getModifierName(),
                $customization_group->getId()
            ]);
        $this->dbConn->query($query);

        return $this->dbConn->affected_rows() === 1;
    }


    /**
     * @param string $id
     * @param int    $apply_status
     *
     * @return bool
     */
    public function updateApplyStatus($id, $apply_status)
    {
        $query_format
            = <<<SQL
UPDATE @S
   SET col_is_active = '@S'
 WHERE _id = '@S'
SQL;

        $query = $this->dbConn->format($query_format,
            [
                $this->getTableName(),
                $apply_status,
                $id
            ]);
        $this->dbConn->query($query);

        return $this->dbConn->affected_rows() === 1;
    }

    /**
     * @param string $id
     * @param int    $index
     *
     * @return bool
     */
    public function updateOrder($id, $index)
    {
        $query_format
            = <<<SQL
UPDATE @S
   SET col_order = '@S'
 WHERE _id = '@S'
SQL;

        $query = $this->dbConn->format($query_format,
            [
                $this->getTableName(),
                $index,
                $id
            ]);
        $this->dbConn->query($query);

        return $this->dbConn->affected_rows() === 1;
    }

    /**
     * @param string $id
     *
     * @return bool
     */
    public function delete($id)
    {
        $query_format
            = <<<SQL
DELETE FROM @S
 WHERE _id = '@S'
SQL;

        $query = $this->dbConn->format($query_format,
            [
                $this->getTableName(),
                $id
            ]);
        $this->dbConn->query($query);

        return $this->dbConn->affected_rows() === 1;
    }
}
