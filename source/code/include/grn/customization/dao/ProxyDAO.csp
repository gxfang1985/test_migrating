<?php

namespace grn\grn\customization\dao;

use grn\grn\customization\bean\Proxy;

class ProxyDAO
{
    private $dbConn;
    private $proxySettingsTableName = 'tab_grn_customization_proxy_setting';

    /**
     * ProxyDAO constructor.
     */
    function __construct()
    {
        $this->dbConn = cb_get_master_db();
    }

    /**
     * @param Proxy $proxy
     *
     * @return string
     */
    public function insert($proxy)
    {
        $data = $this->convertProxyToArray($proxy);
        $query = "INSERT INTO {$this->proxySettingsTableName} VALUES ";
        $query .= cb_queryf($this->dbConn,
            "(DEFAULT, '@S', '@S', '@S', '@S', '@S', '@S', '@S', '@S', '@S', '@S', '@S', '@S','@S');",
            $data['col_code'],
            $data['col_method'],
            $data['col_url'],
            $data['col_params'],
            $data['col_headers'],
            $data['col_body'],
            $data['col_active'],
            $data['col_creator'],
            $data['col_creator_name'],
            $data['col_create_timestamp'],
            $data['col_modifier'],
            $data['col_modifier_name'],
            $data['col_modify_timestamp']);
        $this->dbConn->query($query);

        return $this->dbConn->get_insert_id();
    }

    /**
     * @param Proxy $proxy
     *
     * @return bool|int
     */
    public function update($proxy)
    {
        $data = $this->convertProxyToArray($proxy);
        $query = "UPDATE {$this->proxySettingsTableName} SET ";
        $query .= cb_queryf($this->dbConn,
            "col_code = '@S', col_method = '@S', col_url = '@S', col_params = '@S', "
            .
            "col_headers = '@S', col_body = '@S', col_active = '@S', " .
            "col_modifier = '@S', col_modifier_name = '@S', col_modify_timestamp = '@S' ",
            $data['col_code'],
            $data['col_method'],
            $data['col_url'],
            $data['col_params'],
            $data['col_headers'],
            $data['col_body'],
            $data['col_active'],
            $data['col_modifier'],
            $data['col_modifier_name'],
            $data['col_modify_timestamp']);
        $query .= cb_queryf($this->dbConn, "WHERE _id = '@S';",
            $proxy->getId());
        $this->dbConn->query($query);

        return $this->dbConn->affected_rows();
    }

    /**
     * @param array $proxy_ids
     *
     * @return bool|int
     */
    public function deleteByIds(array $proxy_ids)
    {
        $query = "DELETE FROM {$this->proxySettingsTableName} WHERE ";
        $query .= cb_queryf($this->dbConn, "_id IN (@A);", $proxy_ids);
        $this->dbConn->query($query);

        return $this->dbConn->affected_rows();
    }

    /**
     * @param int $proxy_id
     *
     * @return bool|Proxy
     */
    public function getById($proxy_id)
    {
        $query = "SELECT * FROM {$this->proxySettingsTableName} WHERE ";
        $query .= cb_queryf($this->dbConn, "_id = '@S';", $proxy_id);
        $result = $this->dbConn->query($query);
        $proxy = null;
        if ($row = $this->dbConn->fetch_assoc($result)) {
            $proxy = $this->convertArrayToProxy($row);
        }
        $this->dbConn->free_result($result);

        return $proxy;
    }

    /**
     * @param array $proxy_ids
     *
     * @return array
     */
    public function getByIds(array $proxy_ids)
    {
        $query = "SELECT * FROM {$this->proxySettingsTableName} WHERE ";
        $query .= cb_queryf($this->dbConn, "_id IN (@A);", $proxy_ids);
        $result = $this->dbConn->query($query);
        $proxies = [];
        while ($row = $this->dbConn->fetch_assoc($result)) {
            $proxy = $this->convertArrayToProxy($row);
            $proxies[$proxy->getId()] = $proxy;
        }
        $this->dbConn->free_result($result);

        return $proxies;
    }

    /**
     * @param string $proxy_code
     *
     * @return bool|Proxy
     */
    public function getByCode($proxy_code)
    {
        $query = "SELECT * FROM {$this->proxySettingsTableName} WHERE ";
        $query .= cb_queryf($this->dbConn, "col_code = '@S';", $proxy_code);
        $result = $this->dbConn->query($query);
        $proxy = null;
        if ($row = $this->dbConn->fetch_assoc($result)) {
            $proxy = $this->convertArrayToProxy($row);
        }
        $this->dbConn->free_result($result);

        return $proxy;
    }

    /**
     * @return array
     */
    public function getAll()
    {
        $query
            = "SELECT * FROM {$this->proxySettingsTableName} ORDER BY col_code DESC;";

        $proxies = [];
        $result = $this->dbConn->query($query);
        while ($row = $this->dbConn->fetch_assoc($result)) {
            $proxy = $this->convertArrayToProxy($row);
            $proxies[$proxy->getId()] = $proxy;
        }
        $this->dbConn->free_result($result);

        return $proxies;
    }

    /**
     * @param Proxy $proxy
     *
     * @return array
     */
    public function convertProxyToArray($proxy)
    {
        $data = $proxy->toArray();
        $data['col_params'] = json_encode($data['col_params']);
        $data['col_headers'] = json_encode($data['col_headers']);
        $data['col_body'] = json_encode($data['col_body']);

        return $data;
    }

    /**
     * @param array $data
     *
     * @return Proxy
     */
    public function convertArrayToProxy(array $data)
    {
        $data['col_params'] = json_decode($data['col_params'], true);
        $data['col_headers'] = json_decode($data['col_headers'], true);
        $data['col_body'] = json_decode($data['col_body'], true);
        $proxy = new Proxy($data);

        return $proxy;
    }
}
