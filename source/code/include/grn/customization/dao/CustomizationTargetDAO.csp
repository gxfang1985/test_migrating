<?php

namespace grn\grn\customization\dao;

use grn\grn\customization\bean\CustomizationTarget;

class CustomizationTargetDAO
{

    /* @var \CB_DatabaseConnection $dbConn */
    protected $dbConn;
    protected $module;

    /**
     * CustomizationTargetDAO constructor.
     *
     * @param string $module
     */
    function __construct(string $module)
    {
        $this->dbConn = cb_get_app_db($module);
        $this->module = $module;
    }

    /**
     * @return string
     */
    function getCustomizationTargetTableName(): string
    {
        return 'tab_grn_' . $this->module . '_customization_target';
    }

    /**
     * Get Customization Target By ID
     *
     * @param string $group_id
     *
     * @return CustomizationTarget|null
     */
    public function select(string $group_id)
    {
        $query_format
            = <<<SQL
SELECT
 _id,
 col_customization_group,
 col_dynamic_role,
 col_static_role,
 col_group,
 col_user
FROM
 @S 
WHERE
 col_customization_group = '@S'
SQL;

        $query = $this->dbConn->format($query_format,
            [$this->getCustomizationTargetTableName(), $group_id]);
        $query = $this->dbConn->select_format($query, 0, -1,
            CB_DATABASE_DEFAULT_LOCK);
        $result = $this->dbConn->query($query);

        $rows = [];
        while ($row = $this->dbConn->fetch_assoc($result)) {
            $rows[] = $row;
        }
        $this->dbConn->free_result($result);

        if (count($rows) < 0) {
            return null;
        }

        return new CustomizationTarget($rows);
    }

    /**
     * @param string              $group_id
     * @param CustomizationTarget $customization_targets
     *
     * @return bool
     */
    public function insert(
        string $group_id,
        CustomizationTarget $customization_targets
    ): bool {
        $query
            = "INSERT INTO {$this->getCustomizationTargetTableName()} ( col_customization_group, col_dynamic_role, col_static_role, col_group, col_user ) VALUES ";

        $targets = $customization_targets->getCustomizationTargetList();
        $query_value = [];
        foreach ($targets as $target) {
            $type = $target[CustomizationTarget::KEY_TYPE];
            $tid = $target[CustomizationTarget::KEY_TARGET_ID];
            switch ($type) {
                case CustomizationTarget::TYPE_DYNAMIC_ROLE:
                    $query_value[] = cb_queryf($this->dbConn,
                        "( '@S', '@S', NULL, NULL, NULL )", $group_id, $tid);
                    break;
                case CustomizationTarget::TYPE_STATIC_ROLE:
                    $query_value[] = cb_queryf($this->dbConn,
                        "( '@S', NULL, '@S', NULL, NULL )", $group_id, $tid);
                    break;
                case CustomizationTarget::TYPE_GROUP:
                    $query_value[] = cb_queryf($this->dbConn,
                        "( '@S', NULL, NULL, '@S', NULL )", $group_id, $tid);
                    break;
                case CustomizationTarget::TYPE_USER:
                    $query_value[] = cb_queryf($this->dbConn,
                        "( '@S', NULL, NULL, NULL, '@S' )", $group_id, $tid);
                    break;
            }
        }

        if (count($query_value) > 0) {
            $query .= implode(',', $query_value);
            $this->dbConn->query($query);

            return $this->dbConn->affected_rows() > 0;
        }

        return false;
    }

    /**
     * @param string $group_id
     *
     * @return bool
     */
    public function delete(string $group_id): bool
    {
        $query_format
            = <<<SQL
DELETE FROM @S
 WHERE col_customization_group = '@S'
SQL;

        $query = $this->dbConn->format($query_format,
            [$this->getCustomizationTargetTableName(), $group_id]);
        $this->dbConn->query($query);

        return $this->dbConn->affected_rows() > 0;
    }

    /**
     * @param string $user_id
     * @param string $group_id
     *
     * @return bool
     */
    public function isTargetByUserId(string $user_id, string $group_id)
    {
        $query
            = "SELECT count(*) AS num FROM @S WHERE col_customization_group = '@S' AND col_dynamic_role IS NOT NULL;";

        $query = cb_queryf($this->dbConn, $query,
            $this->getCustomizationTargetTableName(), $group_id);
        $result = $this->dbConn->query($query);
        $row = $this->dbConn->fetch_row($result);
        $this->dbConn->free_result($result);

        $dynamic_target_num = intval($row[0]);
        if ($dynamic_target_num > 0) {
            return true;
        }

        $result = false;
        $query = "SELECT col_user AS id FROM @S" .
                 " WHERE col_user = '@S' AND col_customization_group = '@S'" .
                 " UNION" .
                 " SELECT u._id AS id FROM @S AS ct, tab_cb_user AS u, tab_cb_usergrouprelation AS ug"
                 .
                 " WHERE ct.col_group = ug.col_group AND ug.col_user = u._id AND ct.col_customization_group = '@S' AND u._id = '@S'"
                 .
                 " UNION" .
                 " SELECT u._id AS id FROM @S AS ct, tab_cb_user AS u, tab_cb_userrolerelation AS ur"
                 .
                 " WHERE ct.col_static_role = ur.col_role AND ur.col_user = u._id AND ct.col_customization_group = '@S' AND u._id = '@S';";

        $query = cb_queryf(
            $this->dbConn,
            $query,
            $this->getCustomizationTargetTableName(),
            $user_id,
            $group_id,
            $this->getCustomizationTargetTableName(),
            $group_id,
            $user_id,
            $this->getCustomizationTargetTableName(),
            $group_id,
            $user_id
        );

        $query_result = $this->dbConn->query($query);

        if ($this->dbConn->num_rows($query_result) > 0) {
            $result = true;
        }

        $this->dbConn->free_result($query_result);

        return $result;
    }
}
