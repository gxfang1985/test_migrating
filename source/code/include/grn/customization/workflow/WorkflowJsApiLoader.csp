<?php

namespace grn\grn\customization\workflow;

use grn\grn\customization\JsApiLoaderInterface;
use grn\grn\customization\logic\ResourceLogic;

require_once("grn/customization/file.csp");
require_once("grn/ticket.csp");
require_once('workflow/form_logic.csp');

class WorkflowJsApiLoader implements JsApiLoaderInterface
{
    const MODULE_ID = "workflow";

    /**
     * @var array
     */
    private $customizationTargets = [];

    /**
     * @var array
     */
    private $resourceScriptFile = ["js" => [], "css" => []];

    /**
     * @param string      $form_id
     * @param string|null $petition_id
     * @param string|null $folder_id
     */
    public function __construct(
        $form_id,
        $petition_id = null,
        $folder_id = null
    ) {
        $this->setCustomizationTargets($form_id);
        $this->setResourceScriptFile($petition_id, $folder_id);
    }

    /**
     * @return string
     */
    public function getModuleID(): string
    {
        return self::MODULE_ID;
    }

    /**
     * @return bool
     */
    public function isCustomizationAvailable(): bool
    {
        return count($this->customizationTargets) > 0;
    }

    /**
     * @return array
     */
    public function getApplicationJS(): array
    {
        return [
            "js/dist/js_api_workflow.js",
        ];
    }

    /**
     * @return array
     */
    public function getUserJS(): array
    {
        return $this->resourceScriptFile["js"];
    }

    /**
     * @return array
     */
    public function getUserCSS(): array
    {
        return $this->resourceScriptFile["css"];
    }

    /**
     * @param string|null $petition_id
     * @param string|null $folder_id
     */
    private function setResourceScriptFile(
        $petition_id = null,
        $folder_id = null
    ) {
        if (count($this->customizationTargets) === 0) {
            return;
        }

        $module_id = $this->getModuleID();
        $resource_logic = new ResourceLogic($module_id);
        $resources
            = $resource_logic->getByTargets($this->customizationTargets);

        $fm = \GRN_Customization_FileManager::getInstance($module_id);
        $download_page = $module_id . "/customization/file_download";

        $file_ids = [];
        foreach ($resources as $resource) {
            $file_id = $resource->getFile();
            if ($file_id) {
                $file_ids[] = $file_id;
            }
        }
        $files = $fm->getFiles($file_ids);

        $login_user_id = cb_get_login_user_id();
        $is_need_download_ticket = cb_is_need_download_ticket();
        foreach ($resources as $resource) {
            $url = $resource->getURL();
            $file_id = $resource->getFile();
            if ($file_id) {
                $file = $files[$file_id];
                $file_name = $file->get('name');
                $file_hash = $file->get('hash');
                $file_params = [
                    'fid'  => $file_id,
                    'hash' => $file_hash
                ];
                if ($petition_id) {
                    $file_params['pid'] = $petition_id;
                }
                if ($folder_id) {
                    $file_params['folder_id'] = $folder_id;
                }
                if ($is_need_download_ticket) {
                    $ticket = \GRN_Ticket::create($login_user_id);
                    $file_params['ticket'] = $ticket;
                }
                $url = cb_pageurl($download_page, $file_params, null,
                    $file_name);
            }

            if ($resource->getType() == 'js') {
                $this->resourceScriptFile['js'][] = $url;
            } elseif ($resource->getType() == 'css') {
                $this->resourceScriptFile['css'][] = $url;
            }
        }
    }

    /**
     * @param string $form_id
     */
    private function setCustomizationTargets($form_id)
    {
        $this->customizationTargets[$form_id]
            = \GRN_Workflow_Form_Logic::JS_CSS_CUSTOMIZATION_TARGET . $form_id;
    }
}
