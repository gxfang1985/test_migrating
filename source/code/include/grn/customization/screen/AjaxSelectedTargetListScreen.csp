<?php

namespace grn\grn\customization\screen;

/**
 * Class AjaxSelectedTargetListScreen
 */
class AjaxSelectedTargetListScreen
{
    const TYPE_DYNAMIC_ROLE = 'dynamic_role';
    const TYPE_STATIC_ROLE = 'static_role';
    const TYPE_GROUP = 'group';
    const TYPE_USER = 'user';

    const POST_KEY = 'selected_targets';
    const POST_APP_ID = 'app_id';
    const DYNAMIC_ROLES_NAME = ['Everyone', 'LoginUser'];

    const KEY_TYPE = 'type';
    const KEY_TARGET_ID = 'tid';
    const KEY_TARGET_VALUE = 'target_value';
    const KEY_TARGET_SELECTED = 'target_selected';

    private $input;
    private $selected = [];
    private $selected_users_info = [];
    private $app_id;

    /**
     * AjaxSelectedTargetListScreen constructor.
     *
     * @param $input
     */
    function __construct($input)
    {
        $this->input = $input;
        $this->app_id = cb_at($this->input, self::POST_APP_ID);
    }

    public function fetch()
    {
        require_once('grn/smarty.csp');
        $t = new \GRN_Smarty();

        $customization_selected_targets = $this->getTargets();
        $customization_selected_targets_value
            = $this->getTargetsValue($customization_selected_targets);
        $t->assign("customization_targets", $customization_selected_targets);
        $t->assign("customization_targets_value",
            $customization_selected_targets_value);
        $t->assign("selected_tid", $this->selected);
        $t->assign("users_info", $this->selected_users_info);
        $t->assign("app_id", $this->app_id);

        return $t->fetch("customization/selected_target_list.tpl");
    }

    /**
     * @return  array
     */
    protected function getTargets(): array
    {
        $targets = cb_at($this->input, self::POST_KEY, '');
        $targets_array = explode(':', $targets);
        $dynamic_role = [];
        $static_role = [];
        $group = [];
        $user = [];
        $dynamic_role_selected = [];
        $static_role_selected = [];
        $group_selected = [];
        $user_selected = [];
        $user_ids = [];
        $group_ids = [];
        $static_role_ids = [];

        foreach ($targets_array as $target) {
            if (preg_match('/^([0-9]+)$/', $target, $regs)) {
                $uid = (int)$regs[1];
                $user_ids[] = $uid;
                $user_selected[$uid] = $target;
                $user[$uid] = [
                    self::KEY_TYPE      => self::TYPE_USER,
                    self::KEY_TARGET_ID => $uid
                ];
            } elseif (preg_match('/^g([0-9]+)$/', $target, $regs)) {
                $oid = (int)$regs[1];
                $group_ids[] = $oid;
                $group_selected[$oid] = $target;
                $group[$oid] = [
                    self::KEY_TYPE      => self::TYPE_GROUP,
                    self::KEY_TARGET_ID => $oid
                ];

            } elseif (preg_match('/^r([0-9]+)$/', $target, $regs)) {
                $rid = (int)$regs[1];
                $static_role_ids[] = $rid;
                $static_role_selected[$rid] = $target;
                $static_role[$rid]
                    = [
                    self::KEY_TYPE      => self::TYPE_STATIC_ROLE,
                    self::KEY_TARGET_ID => $rid
                ];

            } elseif (preg_match('/^dr(.*)$/', $target, $regs)) {
                $rid = (string)$regs[1];
                if (in_array($rid, self::DYNAMIC_ROLES_NAME)) {
                    $dynamic_role_selected[] = $target;
                    $dynamic_role[]
                        = [
                        self::KEY_TYPE      => self::TYPE_DYNAMIC_ROLE,
                        self::KEY_TARGET_ID => $rid
                    ];
                }
            }
        }

        require_once('grn/uum.csp');
        $uum = new \GRN_Uum();

        if (count($user_ids) > 0) {
            $users_info = $uum->getUsersInfo($user_ids, []);
            foreach ($user_ids as $id) {
                if ( ! isset($users_info[$id])) {
                    unset($user_selected[$id]);
                    unset($user[$id]);
                }
            }
        }

        if (count($group_ids) > 0) {
            $groups_info = $uum->getGroupInfoList($group_ids);
            foreach ($group_ids as $id) {
                if ( ! isset($groups_info[$id])) {
                    unset($group_selected[$id]);
                    unset($group[$id]);
                }
            }
        }

        if (count($static_role_ids) > 0) {
            $static_roles_info = $uum->getStaticRoleInfoList($static_role_ids,
                []);
            foreach ($static_role_ids as $id) {
                if ( ! isset($static_roles_info[$id])) {
                    unset($static_role_selected[$id]);
                    unset($static_role[$id]);
                }
            }
        }

        $this->selected = implode(',', array_merge($dynamic_role_selected,
            $static_role_selected,
            $group_selected,
            $user_selected));

        $login = cb_get_login_user();
        require_once('grn/controller.csp');
        $this->selected_users_info
            = \GRN_ControllerUtil::getUserInfoToShowUserName($user_ids, $login,
            $this->app_id);

        return array_merge($dynamic_role, $static_role, $group, $user);
    }

    /**
     * @param array
     *
     * @return  array
     */
    protected function getTargetsValue(array $targets): array
    {
        $dynamic_role = [];
        $static_role = [];
        $group = [];
        $user = [];

        foreach ($targets as $target) {
            $type = $target[self::KEY_TYPE];
            $tid = $target[self::KEY_TARGET_ID];
            switch ($type) {
                case self::TYPE_DYNAMIC_ROLE:
                    $dynamic_role[] = $tid;
                    break;
                case self::TYPE_STATIC_ROLE:
                    $static_role[] = $tid;
                    break;
                case self::TYPE_GROUP:
                    $group[] = $tid;
                    break;
                case self::TYPE_USER:
                    $user[] = $tid;
                    break;
            }
        }

        return [
            self::TYPE_DYNAMIC_ROLE => implode(':', $dynamic_role),
            self::TYPE_STATIC_ROLE  => implode(':', $static_role),
            self::TYPE_GROUP        => implode(':', $group),
            self::TYPE_USER         => implode(':', $user)
        ];
    }
}
