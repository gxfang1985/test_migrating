<?php

namespace grn\grn\customization\logic;

use grn\grn\customization\bean\Proxy;
use grn\grn\customization\dao\ProxyDAO;
use grn\grn\ErrorCode;

class ProxySettingLogic
{
    private $proxyDAO;

    const MAX_CODE_LENGTH_CHARACTER = 100;

    /**
     * ProxySettingLogic constructor.
     */
    public function __construct()
    {
        $this->proxyDAO = new ProxyDAO();
    }

    /**
     * @param Proxy $proxy
     *
     * @return Proxy
     */
    public function add($proxy)
    {
        $existing_proxy = $this->proxyDAO->getByCode($proxy->getCode());
        if (isset($existing_proxy)) {
            cb_throw_error(ErrorCode::PROXY_API_SETTING_ALREADY_EXISTED);
        }

        $current_time = time();
        $login_user = cb_get_login_user();
        $login_user_id = $login_user->getOID();
        $login_user_name = $login_user->get('display_name');

        $proxy->setCreator($login_user_id);
        $proxy->setCreatorName($login_user_name);
        $proxy->setCreateTimestamp($current_time);
        $proxy->setModifier($login_user_id);
        $proxy->setModifierName($login_user_name);
        $proxy->setModifyTimestamp($current_time);

        $proxy_id = $this->proxyDAO->insert($proxy);
        $proxy->setId($proxy_id);

        return $proxy;
    }

    /**
     * @param Proxy $proxy
     *
     * @return bool|int
     */
    public function update($proxy)
    {
        $existing_proxy = $this->proxyDAO->getByCode($proxy->getCode());
        if (isset($existing_proxy)
            && ($existing_proxy->getId() != $proxy->getId())
        ) {
            cb_throw_error(ErrorCode::PROXY_API_SETTING_ALREADY_EXISTED);
        }

        $current_time = time();
        $login_user = cb_get_login_user();
        $login_user_id = $login_user->getOID();
        $login_user_name = $login_user->get('display_name');

        $proxy->setModifier($login_user_id);
        $proxy->setModifierName($login_user_name);
        $proxy->setModifyTimestamp($current_time);

        return $this->proxyDAO->update($proxy);
    }

    /**
     * @param array $proxy_ids
     *
     * @return bool|int
     */
    public function deleteMulti(array $proxy_ids)
    {
        return $this->proxyDAO->deleteByIds($proxy_ids);
    }

    /**
     * @param int $proxy_id
     *
     * @return bool|int
     */
    public function delete($proxy_id)
    {
        return $this->proxyDAO->deleteByIds([$proxy_id]);
    }

    /**
     * @return array
     */
    public function getAll()
    {
        return $this->proxyDAO->getAll();
    }

    /**
     * @param int $proxy_id
     *
     * @return Proxy
     */
    public function getById($proxy_id)
    {
        $proxy = $this->proxyDAO->getById($proxy_id);

        return $proxy;
    }

    /**
     * @param array $proxy_ids
     *
     * @return array
     */
    public function getByIds(array $proxy_ids)
    {
        $proxy = $this->proxyDAO->getByIds($proxy_ids);

        return $proxy;
    }

    /**
     * @param string $proxy_code
     *
     * @return bool|Proxy
     */
    public function getByCode($proxy_code)
    {
        $proxy = $this->proxyDAO->getByCode($proxy_code);

        return $proxy;
    }
}
