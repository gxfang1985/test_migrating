<?php

namespace grn\grn\customization\logic;

use grn\grn\customization\bean\CustomizationGroup;
use grn\grn\customization\dao\CustomizationGroupDAO;
use grn\grn\customization\dao\CustomizationTargetDAO;

class CustomizationGroupLogic
{
    const CUSTOMIZATION_TARGET_PREFIX = "customization_group.";

    private $dao;
    private $module;

    /**
     * ResourceLogic constructor.
     *
     * @param string $module
     */
    public function __construct($module)
    {
        $this->module = $module;
        $this->dao = new CustomizationGroupDAO($module);
    }

    /**
     * @param string $id
     * @param bool   $is_throw_error
     *
     * @return CustomizationGroup|null
     */
    public function get($id, $is_throw_error = true)
    {
        $customization_group = $this->dao->select($id);
        if ( ! $customization_group && $is_throw_error) {
            require_once("grn/error_code.csp");
            cb_throw_error(E_GRN_CUSTOMIZATION_GROUP_NOT_FOUND);
        }

        return $customization_group;
    }

    /**
     * @return CustomizationGroup[]
     */
    public function getAll(): array
    {
        return $this->dao->selectAll();
    }

    /**
     * @return CustomizationGroup[]
     */
    public function getAvailableGroupList(): array
    {
        return $this->dao->selectWithValidStatus();
    }

    /**
     * @param CustomizationGroup $customization_group
     *
     * @return string
     */
    public function add(CustomizationGroup $customization_group): string
    {
        return $this->dao->insert($customization_group);
    }

    /**
     * @param CustomizationGroup $customization_group
     *
     * @return bool
     */
    public function modify(CustomizationGroup $customization_group): bool
    {
        return $this->dao->update($customization_group);
    }

    /**
     * @param string $id
     * @param int    $apply_status
     *
     * @return bool
     */
    public function modifyApplyStatus($id, $apply_status): bool
    {
        return $this->dao->updateApplyStatus($id, $apply_status);
    }

    /**
     * @param array $ids
     */
    public function modifyOrder(array $ids)
    {
        $index = 1;
        foreach ($ids as $id) {
            $this->dao->updateOrder($id, $index);
            $index++;
        }
    }

    /**
     * @param string $id
     *
     * @return bool
     */
    public function removeGroup($id): bool
    {
        return $this->dao->delete($id);
    }

    /**
     * @param string $user_id
     * @param string $group_id
     *
     * @return bool
     */
    public function isTargetByUserId(string $user_id, string $group_id): bool
    {
        $customization_target_dao = new CustomizationTargetDAO($this->module);

        return $customization_target_dao->isTargetByUserId($user_id, $group_id);
    }
}
