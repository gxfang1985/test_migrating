<?php

namespace grn\grn\customization\logic;

use grn\grn\customization\bean\CustomizationTarget;

class InspectionUtil
{
    const INSPECTION_APPLY_CUSTOMIZATION = 'applied';
    const INSPECTION_NOT_APPLY_CUSTOMIZATION = 'not applied';
    const TYPE_JS = 'js';
    const TYPE_CSS = 'css';

    const PREFIX_ROLE = 'rid';
    const PREFIX_GROUP = 'oid';
    const PREFIX_USER = 'uid';

    private function __construct()
    {
    }

    /**
     * @param string $apply_status
     *
     * @return string
     */
    public static function getApplyStatusLogValue($apply_status): string
    {
        switch ($apply_status) {
            case ResourceLogic::ACTIVATION_CUSTOMIZATION_ON:
                return self::INSPECTION_APPLY_CUSTOMIZATION;
            case ResourceLogic::ACTIVATION_CUSTOMIZATION_OFF:
                return self::INSPECTION_NOT_APPLY_CUSTOMIZATION;
            default:
                return self::INSPECTION_NOT_APPLY_CUSTOMIZATION;
        }
    }

    /**
     * @param \grn\grn\customization\bean\Resource[] $resources
     * @param array                                  $file_names
     *
     * @return array
     */
    public static function getResourcesLogParams(
        array $resources,
        array $file_names
    ): array {
        $js_count = 0;
        $css_count = 0;

        $params = [];

        foreach ($resources as $resource) {
            $type = $resource->getType();
            $subject = $resource->getURL();
            if ( ! empty($resource->getFile())) {
                $subject = $file_names[$resource->getFile()];
            }

            if ($type == self::TYPE_JS) {
                $js_count++;
                $params[$type . '_' . $js_count] = $subject;
            } elseif ($type == self::TYPE_CSS) {
                $css_count++;
                $params[$type . '_' . $css_count] = $subject;
            }
        }

        return $params;
    }

    /**
     * @param array $targets
     *
     * @return array
     */
    public static function getTargetLogParams(array $targets): array
    {
        $role_count = 0;
        $group_count = 0;
        $user_count = 0;
        $params = [];

        foreach ($targets as $target) {
            $type = $target[CustomizationTarget::KEY_TYPE];
            $tid = $target[CustomizationTarget::KEY_TARGET_ID];
            switch ($type) {
                case CustomizationTarget::TYPE_DYNAMIC_ROLE:
                case CustomizationTarget::TYPE_STATIC_ROLE:
                    $role_count++;
                    $params[self::PREFIX_ROLE . '_' . $role_count] = $tid;
                    break;
                case CustomizationTarget::TYPE_GROUP:
                    $group_count++;
                    $params[self::PREFIX_GROUP . '_' . $group_count] = $tid;
                    break;
                case CustomizationTarget::TYPE_USER:
                    $user_count++;
                    $params[self::PREFIX_USER . '_' . $user_count] = $tid;
                    break;
            }
        }

        return $params;
    }
}
