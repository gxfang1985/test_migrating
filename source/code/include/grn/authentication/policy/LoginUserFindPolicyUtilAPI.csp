<?php

namespace grn\grn\authentication\policy;

require_once('util_api/logic.csp');

/**
 * Class LoginUserFindPolicyUtilAPI
 *
 * @package grn\grn\authentication\policy
 */
class LoginUserFindPolicyUtilAPI implements LoginUserFindPolicyInterface
{
    /** @var \GRN_Uum */
    private $uum;
    /** @var \GRN_Util_Api_Service */
    private $apiService;

    public function __construct(\GRN_Util_Api_Service $utilAPI)
    {
        $this->apiService = $utilAPI;
        global $G_container_base;
        $this->uum = $G_container_base->getInstance('uum');
    }

    /**
     * @return \CB_User|false ログインを試行しているユーザー
     */
    public function findUser()
    {
        return $this->uum->getUserByForeignKey($this->getAccountToken());
    }

    /**
     * ログイン試行時のパスワードを返します
     *
     * @return string|null
     */
    public function getPasswordToken()
    {
        if ($this->apiService->getAction()
            === \GRN_Util_Api_Service::UTIL_LOGIN
        ) {
            $request_params = $this->apiService->getRequestParameters();
            $values
                = $this->apiService->selectNodesValue($request_params,
                'password', false, false);
            if (is_array($values) && count($values) > 0) {
                return $values[0];
            }
        } else {
            return $this->apiService->getPassword();
        }

        return "";
    }

    /**
     * @return string
     */
    public function getAccountToken()
    {
        if ($this->apiService->getAction()
            === \GRN_Util_Api_Service::UTIL_LOGIN
        ) {
            $request_params = $this->apiService->getRequestParameters();
            $values
                = $this->apiService->selectNodesValue($request_params,
                'login_name', true);
            if (is_array($values) && count($values) > 0) {
                return $values[0];
            }
        } else {
            return $this->apiService->getUserName();
        }

        return "";
    }
}
