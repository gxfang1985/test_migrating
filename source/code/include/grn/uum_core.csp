<?php

require_once('fw/uum_core.csp');

define('CB_UUM_USER_GROUPS_RELATION', 1);
define('CB_UUM_USER_ROLES_RELATION', 2);
define('CB_UUM_GROUP_USERS_RELATION', 3);
define('CB_UUM_ROLE_USERS_RELATION', 4);

class GRN_UumCoreAPI extends CB_UumCoreAPI
{
    /**
     * @return GRN_UumCoreAPI
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_UumCoreAPI();
        }

        return $_instance;
    }

    function __construct()
    {
        parent::__construct();

        global $G_container_base;
        $this->_db = $G_container_base->getInstance('dbconn');
    }

    /**
     * @access private
     */
    var $_set_user_roles_triggers = [];

    /**
     * @access private
     */
    var $_set_role_users_triggers = [];

    /**
     * @access private
     */
    var $_set_user_groups_triggers = [];

    /**
     * @access private
     */
    var $_set_group_users_triggers = [];


    function addTriggerOnSetUserRoles($func)
    {
        // to uniquify triggers, we use array KEYS instead of
        // VALUES to store trigger function names.
        $this->_set_user_roles_triggers[$func] = 1;
    }

    function addTriggerOnSetRoleUsers($func)
    {
        // to uniquify triggers, we use array KEYS instead of
        // VALUES to store trigger function names.
        $this->_set_role_users_triggers[$func] = 1;
    }

    function addTriggerOnSetUserGroups($func)
    {
        // to uniquify triggers, we use array KEYS instead of
        // VALUES to store trigger function names.
        $this->_set_user_groups_triggers[$func] = 1;
    }

    function addTriggerOnSetGroupUsers($func)
    {
        // to uniquify triggers, we use array KEYS instead of
        // VALUES to store trigger function names.
        $this->_set_group_users_triggers[$func] = 1;
    }

    /**
     * @param CB_Group $child
     * @param int      $parentId
     * @param bool     $sync
     *
     * @return bool
     */
    public function setParentGroup($child, $parentId, $sync = false)
    {
        if (is_null($parentId) || ($parentId === false)
            || strlen($parentId) === 0
        ) {
            $condition = 'col_parent IS NULL';
        } else {
            $condition = 'col_parent =' . "'" . $this->_db->escape($parentId)
                         . "'";
        }

        if ($sync) {
            // シンクの時は、ここでlist_indexを更新しない。XMLで取得する値をlist_indexに入れる。
            $set = (is_null($parentId) || ($parentId === false)
                    || strlen($parentId) === 0) ? "col_parent=NULL"
                : "col_parent='" . $this->_db->escape($parentId) . "'";
        } else {
            $query
                = "SELECT COUNT(*) as c FROM tab_cb_group WHERE {$condition}";
            $result = $this->_db->query($query);
            if ($result === false) {
                $this->_db->throwError(['query' => 'query failed: ' . $query]);
            }
            $r = $this->_db->fetch_assoc($result);
            $this->_db->free_result($result);
            $last_idx = $r['c'] + 1;

            if (is_null($parentId) || ($parentId === false)
                || strlen($parentId) === 0
            ) {
                $set = sprintf("col_list_index='%s'", $last_idx)
                       . " , col_parent=NULL";
            } else {
                $set = sprintf("col_list_index='%s' , col_parent='%s'",
                    $last_idx, $this->_db->escape($parentId));
            }
        }
        $query = sprintf('UPDATE tab_cb_group SET %s WHERE %s', $set,
            "_id='" . $this->_db->escape($child->getOID()) . "'");
        $result = $this->_db->query($query);
        if ($result === false) {
            $this->_db->throwError(['query' => 'query failed: ' . $query]);
        }

        return true;
    }

    function _setRelation($type, $tid, $tids)
    {
        $add_condition = null;
        $target_ids = [];
        foreach ($tids as $target_id) {
            $target_ids[] = "'" . $this->_db->escape($target_id) . "'";
        }
        $target_ids = implode(",", $target_ids);

        switch ($type) {
            case CB_UUM_USER_GROUPS_RELATION:
                $t = 'tab_cb_usergrouprelation';
                $t1 = 'tab_cb_user';
                $t2 = 'tab_cb_group';
                $list_index = 'col_group_list';
                $column = '_id, col_group as o';
                $condition = "col_user='" . $this->_db->escape($tid) . "'";
                $update_info
                    = "col_user='%s', col_group='%s', col_group_list='%d'";
                $insert_info = 'col_user, col_group, col_group_list';
                $trigger_func = 'addTriggerOnSetUserGroups';
                $prefix = 'set_user_groups_';
                $triggers =& $this->_set_user_groups_triggers;
                $add_condition = 'tab_cb_group._id IN (' . $target_ids . ')';
                break;
            case CB_UUM_USER_ROLES_RELATION:
                $t = 'tab_cb_userrolerelation';
                $t1 = 'tab_cb_user';
                $t2 = 'tab_cb_role';
                $list_index = 'col_role_list';
                $column = '_id, col_role as o';
                $condition = "col_user='" . $this->_db->escape($tid) . "'";
                $update_info
                    = "col_user='%s', col_role='%s', col_role_list='%d'";
                $insert_info = 'col_user, col_role, col_role_list';
                $trigger_func = 'addTriggerOnSetUserRoles';
                $prefix = 'set_user_roles_';
                $triggers =& $this->_set_user_roles_triggers;
                $add_condition = 'tab_cb_role._id IN (' . $target_ids . ')';
                break;
            case CB_UUM_GROUP_USERS_RELATION:
                $t = 'tab_cb_usergrouprelation';
                $t1 = 'tab_cb_group';
                $t2 = 'tab_cb_user';
                $list_index = 'col_user_list';
                $column = '_id, col_user as o';
                $condition = "col_group='" . $this->_db->escape($tid) . "'";
                $update_info
                    = "col_group='%s', col_user='%s', col_user_list='%d'";
                $insert_info = 'col_group, col_user, col_user_list';
                $trigger_func = 'addTriggerOnSetGroupUsers';
                $prefix = 'set_group_users_';
                $triggers =& $this->_set_group_users_triggers;
                $add_condition = 'tab_cb_user._id IN (' . $target_ids
                                 . ') AND tab_cb_user.col_deleted IS NULL';
                break;
            case CB_UUM_ROLE_USERS_RELATION:
                $t = 'tab_cb_userrolerelation';
                $t1 = 'tab_cb_role';
                $t2 = 'tab_cb_user';
                $list_index = 'col_user_list';
                $column = '_id, col_user as o';
                $condition = "col_role='" . $this->_db->escape($tid) . "'";
                $update_info
                    = "col_role='%s', col_user='%s', col_user_list='%d'";
                $insert_info = 'col_role, col_user, col_user_list';
                $trigger_func = 'addTriggerOnSetRoleUsers';
                $prefix = 'set_role_users_';
                $triggers =& $this->_set_role_users_triggers;
                $add_condition = 'tab_cb_user._id IN (' . $target_ids
                                 . ') AND tab_cb_user.col_deleted IS NULL';
                break;
            default:
                assert(false);
        }

        if ( ! $this->findOid($t1, $tid)) {
            return false;
        }

        $exist_ids = [];
        if (count($tids) > 0) {
            $exist_ids = $this->getIds($t2, $add_condition);
        }

        $query = sprintf('SELECT %s FROM %s WHERE %s', $column, $t,
            $condition);
        $result = $this->_db->query($query);
        if ($result === false) {
            $this->_db->throwError(['query' => 'query failed: ' . $query]);
        }

        $oids = [];
        $n = $this->_db->num_rows($result);
        for ($i = 0; $i < $n; $i++) {
            $r = $this->_db->fetch_assoc($result);
            $oids[$r['o']] = $r['_id'];
        }
        $this->_db->free_result($result);

        $lidx = 1;
        foreach ($tids as $id) {
            // Don't find user.
            if ( ! array_key_exists($id, $exist_ids)) {
                continue;
            }

            // User already exists.
            if (array_key_exists($id, $oids)) {
                $set = sprintf($update_info,
                    $this->_db->escape($tid),
                    $this->_db->escape($id),
                    $lidx);

                $condition = "_id='" . $this->_db->escape($oids[$id]) . "'";
                $query = sprintf('UPDATE %s SET %s WHERE %s', $t, $set,
                    $condition);
                $result = $this->_db->query($query);
                if ($result === false) {
                    $this->_db->throwError([
                        'query' => 'query failed: ' . $query
                    ]);
                }
                unset($oids[$id]);
            } else {
                $col = $insert_info;
                $val = sprintf("'%s', '%s', '%s'",
                    $this->_db->escape($tid),
                    $this->_db->escape($id),
                    $lidx);
                $query = sprintf('INSERT INTO %s (%s) VALUES(%s)', $t, $col,
                    $val);
                $result = $this->_db->query($query);
                if ($result === false) {
                    $this->_db->throwError([
                        'query' => 'query failed: ' . $query
                    ]);
                }
            }
            $lidx++;
        }
        // run triggers
        $this->_loadHook($trigger_func, $prefix);
        $params = [$tid, $tids];
        $this->_runHook($triggers, $params);

        if (count($oids) > 0) {
            $tmp_oids = [];
            foreach ($oids as $oid) {
                array_push($tmp_oids, "'" . $oid . "'");
            }

            $condition = sprintf('_id IN ( %s )', implode(',', $tmp_oids));
            $query = sprintf('DELETE FROM %s WHERE %s', $t, $condition);
            $result = $this->_db->query($query);
            if ($result === false) {
                $this->_db->throwError(['query' => 'query failed: ' . $query]);
            }

            // run triggers
            $this->_loadHook($trigger_func, $prefix);
            $params = [$tid, array_keys($oids)];
            $this->_runHook($triggers, $params);

        }

        return true;
    }

    /**
     * @param int   $uid
     * @param int[] $gids
     *
     * @return bool
     */
    function setUserGroups($uid, $gids)
    {
        return $this->_setRelation(CB_UUM_USER_GROUPS_RELATION, $uid, $gids);
    }

    /**
     * @param int   $gid
     * @param int[] $uids
     *
     * @return bool
     */
    function setGroupUsers($gid, $uids)
    {
        return $this->_setRelation(CB_UUM_GROUP_USERS_RELATION, $gid, $uids);
    }

    function setUserRoles($uid, $rids)
    {
        return $this->_setRelation(CB_UUM_USER_ROLES_RELATION, $uid, $rids);
    }

    public function setRoleUsers($role_id, $uids)
    {
        return $this->_setRelation(CB_UUM_ROLE_USERS_RELATION, $role_id, $uids);
    }

    function getIds($table_name, $add_condition = null)
    {
        $query = "SELECT _id FROM {$table_name}";
        if ( ! is_null($add_condition)) {
            $query .= " WHERE {$add_condition}";
        }
        $query = $this->_db->select_format($query, 0, -1, CB_DATABASE_NO_LOCK);
        $result = $this->_db->query($query);
        if ($result === false) {
            $this->_db->throwError(['query' => 'query failed: ' . $query]);
        }

        $ids = [];
        $n = $this->_db->num_rows($result);
        for ($i = 0; $i < $n; $i++) {
            $r = $this->_db->fetch_assoc($result);
            $ids[$r['_id']] = 1;
        }
        $this->_db->free_result($result);

        return $ids;
    }

    function findOid($table_name, $oid)
    {
        $query = ("SELECT _id FROM {$table_name} WHERE _id='"
                  . $this->_db->escape($oid) . "'");
        $query = $this->_db->select_format($query, 0, -1, CB_DATABASE_NO_LOCK);
        $result = $this->_db->query($query);
        if ($result === false) {
            $this->_db->throwError(['query' => 'query failed: ' . $query]);
        }
        $r = $this->_db->fetch_assoc($result);
        if ($r === false) {
            return false;
        }

        return true;
    }

    /*
    function changeUserPassword( $id, $password )
    {
        if( $id === GRN_UUM_ADMINISTRATION_USER )
        {
            global $G_config_common;
            $identifer = $G_config_common->get( 'Global', 'app_name' );
            $guestname = 'user_' . $this->_db->escape( $identifer );
            $dbname = 'cb_' . $this->_db->escape( $identifer );
            $this->_db->query_mysqldb( "GRANT SELECT ON ${dbname}.* TO ${guestname} IDENTIFIED BY '${password}';" );
            $this->_db->query_mysqldb( "FLUSH PRIVILEGES;" );
        }
        
        return parent::changeUserPassword( $id, $password );
    }
    */
}


