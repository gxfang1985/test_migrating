<?php
/**
 * Locale Config Manager
 *
 * @author Tuyen Nguyen 2010/01
 */
require_once('fw/profile.csp');

class GRN_Locale_ConfigManager extends CB_ModuleBase
{
    private static $_instance = null;

    /**
     *
     * @return GRN_Locale_ConfigManager
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    function __construct()
    {
        parent::__construct('grn.common.locale');
    }

    var $_system_config = null;

    function getSystemConfig()
    {
        if (is_null($this->_system_config)) {
            $profile = $this->getSystemProfile();
            $this->_system_config = new GRN_Locale_Config($profile);
        }

        return $this->_system_config;
    }

    var $_personal_config = [];

    /**
     *
     * @param $user
     *
     * @return GRN_Locale_Config
     */
    function getPersonalConfig($user)
    {
        $user_id = $user->getOID();
        if ( ! array_key_exists($user_id, $this->_personal_config)) {
            $profile = $this->getUserProfile($user);
            $profile->user = $user;
            $this->_personal_config[$user_id] = new GRN_Locale_Config($profile);
        }

        return $this->_personal_config[$user_id];
    }

    /**
     * Get locale of users
     *
     * @param  array $uids
     *
     * @return array
     */
    function getUsersLocale($uids)
    {
        $ret = [];
        require_once("fw/i18n/locale.csp");
        foreach ($uids as $uid) {
            $ret[$uid] = CB_LocaleManager::getCurrentLanguage($uid);
        }

        return $ret;
    }

    public function getUserLanguage($user_id)
    {
        require_once("fw/i18n/locale.csp");

        return CB_LocaleManager::getCurrentLanguage($user_id);
    }


    /**
     *  Checking locale support charset
     *
     * @param  string $locale
     * @param  string $charset
     *
     * @return bool     true support, otherwise false.
     */
    function checkingLocaleSupportCharset($locale, $charset)
    {
        if ( ! $charset) {
            return false;
        }

        if ($charset == 'auto') {
            return true;
        }

        global $G_config_common;
        $locale_charset = $G_config_common->get('Mail',
            'resolve_locale_' . $locale);
        if ($locale_charset) {
            $locale_charset = explode(' ', $locale_charset);
        }

        if (is_array($locale_charset) && count($locale_charset) > 0) {
            if (array_search($charset, $locale_charset) === false) {
                return false;
            }
        }

        return true;
    }

    /**
     * get default locale
     */
    function getDefaultLocale()
    {
        return $this->getDefaultLanguage();
//         global $G_config_common;
//         $charset = $G_config_common->get('I18N', 'default_locale');
//         return $charset;
    }

    /**
     *
     * Get the default language.
     */
    public function getDefaultLanguage()
    {
        require_once("fw/i18n/locale.csp");

        return CB_LocaleManager::getDefaultLanguage();
    }
}

/**
 * Locale Config
 */
class GRN_Locale_Config
{
    /** @var CB_Profile */
    var $_profile;

    function __construct($profile)
    {
        $this->_profile = $profile;
    }

    function getAttribute($key)
    {
        $value = null;
        $ret = $this->_profile->getAttribute($key, $value);
        if ($ret) {
            return $value;
        }

        return null;
    }

    function setAttribute($key, $value)
    {
        $profile = $this->_profile;
        if ( ! is_a($profile, 'CB_Profile')) {
            return false;
        }

        $temp = null;
        $ret = $profile->getAttribute($key, $temp);
        if ($ret === false) {
            $ret = $profile->createAttribute($key, $value);
            if ($ret === false) {
                return false;
            }
        }

        return $profile->updateAttribute($key, $value);
    }

    /**
     * get charset for forward mail
     */
    function getReceivingEmailCharset()
    {
        $charset = $this->getAttribute('receiving_email_charset');
        if ($charset === null) {
            $charset = 'auto';
        }

        $user = @$this->_profile->user;
        if (@$user) {
            $locale_manager = GRN_Locale_ConfigManager::getInstance();
            require_once("fw/i18n/locale.csp");
            $current_locale
                = CB_LocaleManager::getCurrentLanguage($user->getOID());
            // locale not support charset return auto
            if ( ! $locale_manager->checkingLocaleSupportCharset($current_locale,
                $charset)
            ) {
                $charset = 'auto';
                $this->setAttribute('receiving_email_charset', $charset);
            }
        }

        return $charset;
    }

    function setReceivingEmailCharset($charset)
    {
        $charset_real = $charset;
        require_once("fw/i18n.csp");
        $i18n = CB_I18n::getInstance();
        $current_locale = $i18n->getCurrentLanguage();

        $locale_manager = GRN_Locale_ConfigManager::getInstance();
        // not support then get default charset for locale
        if ( ! $locale_manager->checkingLocaleSupportCharset($current_locale,
            $charset_real)
        ) {
            $charset_real = 'auto';
        }
        $this->setAttribute('receiving_email_charset', $charset_real);

        return $charset_real;
    }
}

