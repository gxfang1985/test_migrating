<?php

/**
 * UUM wrapper for Ogre.
 *
 * @version 1.0
 * @package grn.common
 */

use grn\grn\access\service\AppAccess;
use grn\grn\ThumbnailUtil;
use grn\system\sandbox\SandboxConstants;

require_once('fw/persistent.csp');
require_once('fw/uum.csp');
require_once('fw/i18n.csp');
require_once('fw/dblist.csp');
require_once('grn/error_code.csp');
require_once('grn/uum_table.csp');
require_once('fw/string_util.csp');
require_once('grn/controller.csp');

define('GRN_UUM_ADMINISTRATION_USER', '1');
define('GRN_UUM_ADMINISTRATION_ROLE', '1');
define('GRN_UUM_USER_MAX_POSITION', 100000000);
define('GRN_UUM_SSO_DEFAULT', 0);

define('GRN_UUM_DELETE_SUCCESS', '0');
define('GRN_UUM_INVALID_PARAMETER', '1');
define('GRN_UUM_INVALID_DELETE_SCHEDULE', '2');
define('GRN_UUM_USER_NOT_DELETED', '3');

define('GRN_UUM_ELEMENT_NAME_ORGANIZATION', 'organizationName');

/**
 * ガルーン用ユーザー管理クラス
 * CB_Uum を拡張したラップクラス.
 *
 * @package grn.common
 */
class GRN_Uum extends CB_Uum
{
    /**
     * @access private
     */
    var $_info_tables = [];
    /**
     * @access private
     */
    var $_profile = null;
    /**
     * @access private
     */
    var $_mygroup_table = null;
    /**
     * @access private
     */
    var $_mygroupuser_table = null;
    /**
     * @access private
     */
    var $_item_table = null;
    /**
     * @access private
     */
    var $_itemuser_table = null;

    /**
     * @access private
     * @var CB_DatabaseConnection
     */
    var $_db = null;

    /**
     * @access private
     * ユーザーの所属グループをキャッシュする
     */
    var $_users_groups = [];

    /**
     * @access private
     * ユーザーの所持ロールをキャッシュする
     */
    var $_users_roles = [];

    /**
     * @access private
     */
    var $_user_table_name = null;
    var $_group_table_name = null;
    var $_role_table_name = null;
    var $_user_group_table_name = null;
    var $_user_role_table_name = null;
    var $_user_info_table_name = null;
    var $_mygroup_table_name = null;
    var $_user_mygroup_table_name = null;
    var $_facility_mygroup_table_name = null;
    var $_user_score_table_name = null;
    var $_group_score_table_name = null;

    protected static $_info_cache = [];
    /** @var CB_Group[] */
    protected static $_primary_group_cache = [];
    protected static $_user_image_cache = [];
    protected static $_extended_item_cache = [];
    protected static $__user_name_cache = [];

    function __construct()
    {
        parent::__construct();

        global $G_container_base;
        $this->_db = $G_container_base->getInstance('dbconn');

        // テーブル名の設定
        $this->_user_table_name = CB_DATABASE_TABLE_PREFIX
                                  . 'cb_user';
        $this->_group_table_name = CB_DATABASE_TABLE_PREFIX
                                   . 'cb_group';
        $this->_role_table_name = CB_DATABASE_TABLE_PREFIX
                                  . 'cb_role';
        $this->_user_group_table_name = CB_DATABASE_TABLE_PREFIX
                                        . 'cb_usergrouprelation';
        $this->_user_role_table_name = CB_DATABASE_TABLE_PREFIX
                                       . 'cb_userrolerelation';
        $this->_user_info_table_name = CB_DATABASE_TABLE_PREFIX
                                       . 'grn_userinfo';
        $this->_mygroup_table_name = CB_DATABASE_TABLE_PREFIX
                                     . 'grn_mygroup';
        $this->_user_mygroup_table_name = CB_DATABASE_TABLE_PREFIX
                                          . 'grn_mygroupuserrelation';
        $this->_facility_mygroup_table_name = CB_DATABASE_TABLE_PREFIX
                                              . 'grn_schedule_mygroupfacilityrelation';
        $this->_user_score_table_name = CB_DATABASE_TABLE_PREFIX
                                        . 'grn_userscore';
        $this->_group_score_table_name = CB_DATABASE_TABLE_PREFIX
                                         . 'grn_groupscore';
    }

    /**
     * @access private
     *
     * @param  string $type
     *
     * @return CB_TableInfo
     */
    function _getInfoTable($type)
    {
        if (array_key_exists($type, $this->_info_tables)) {
            return $this->_info_tables[$type];
        }

        global $G_container_base;
        /** @var CB_TableManager $tm */
        $tm = $G_container_base->getInstance('table_manager');

        switch ($type) {
            case 'user':
            case 'group':
            case 'role':
                $table = $tm->getTableInfo("GRN_${type}Info");
                $this->_info_tables[$type] = $table;

                return $table;
            default:
                assert('FALSE');
        }
    }

    /**
     * @access private
     *
     * @param  string $type
     *
     * @return string
     */
    function _getInfoTableName($type)
    {
        $ret = CB_DATABASE_TABLE_PREFIX . "grn_${type}info";

        return $ret;
    }

    /**
     * ユーザー、組織、ロールの拡張情報を取得する.
     *
     * @param string $target 取得する情報. user, group, role のいずれか.
     * @param int    $oid    取得する対象オブジェクトのID.
     * @param bool   $include_deleted
     * @param bool   $use_cache
     *
     * @return GRN_UserInfo|GRN_GroupInfo|GRN_RoleInfo  Return GRN_($target)Info object
     */
    function _getInfo(
        $target,
        $oid,
        $include_deleted = false,
        $use_cache = false
    ) {
        $cacheKey = $target . "-" . $oid;
        if ($use_cache && array_key_exists($cacheKey, self::$_info_cache)) {
            return self::$_info_cache[$cacheKey];
        }
        global $G_container_base;
        /** @var CB_DatabaseConnection $db */
        $db = $G_container_base->getInstance('dbconn');
        $oid = "'" . $db->escape($oid) . "'";

        $rowset = new CB_RowSet($this->_getInfoTable($target));
        $rowset->addCondition("col_${target}=${oid}");
        if ( ! $include_deleted && strcmp($target, 'user') === 0) {
            $on = sprintf('tab_grn_userinfo.col_user = %s._id AND %s',
                $this->_user_table_name,
                $this->_getLiveUserCondition());
            $rowset->addJoin($this->getUserTable(), $on,
                CB_DATABASE_INNER_JOIN);
        }
        $rowset->setLock(CB_DATABASE_NO_LOCK);
        $info = $rowset->iterate();
        $rowset->destroy();
        if ( ! $info) {
            $info = false;
        }

        if ($use_cache) {
            self::$_info_cache[$cacheKey] = $info;
        }

        return $info;
    }

    /**
     * @param int[] $userIds
     */
    function loadAndCacheUserImage($userIds)
    {
        require_once("grn/file.csp");
        $db = cb_get_master_db();
        $fileTable = GRN_FileManager::getInstance()->getFileTable();
        $query
            = " SELECT tab_grn_file.*, tab_grn_userinfo.col_user AS userId, tab_grn_file._id AS fileId"
              . " FROM tab_grn_file "
              . " INNER JOIN tab_grn_userinfo"
              . " ON tab_grn_file._id = tab_grn_userinfo.col_image "
              . " WHERE "
              . $db->format("tab_grn_userinfo.col_user IN (@A)",
                [$userIds]);
        $result = $db->query($query);

        foreach ($userIds as $userId) {
            self::$_user_image_cache[$userId] = null;
        }

        while ($row = $db->fetch_assoc($result)) {
            self::$_user_image_cache[$row["userId"]]
                = $fileTable->getRow($row["fileId"], $row);
        }
    }

    /**
     * @param       $target
     * @param int[] $id_list
     * @param bool  $include_deleted
     */
    function loadAndCacheInfo($target, $id_list, $include_deleted = false)
    {
        global $G_container_base;
        /** @var CB_DatabaseConnection $db */
        $db = $G_container_base->getInstance('dbconn');
        $rowset = new CB_RowSet($this->_getInfoTable($target));
        $rowset->addCondition($db->format("col_${target} IN (@A)", [$id_list]));

        if ( ! $include_deleted && strcmp($target, 'user') === 0) {
            $on = sprintf('tab_grn_userinfo.col_user = %s._id AND %s',
                $this->_user_table_name,
                $this->_getLiveUserCondition());
            $rowset->addJoin($this->getUserTable(), $on,
                CB_DATABASE_INNER_JOIN);
        }
        $rowset->setLock(CB_DATABASE_NO_LOCK);

        while (($row = $rowset->iterate()) != false) {
            $cacheKey = $target . "-" . $row->getOID();
            self::$_info_cache[$cacheKey] = $row;
        }
        $rowset->destroy();
    }


    function checkImageActive($fileId)
    {
        $hasImage = false;
        $fileId = "'" . $this->_db->escape($fileId) . "'";

        $condition = sprintf(' col_image = %s ', $fileId);

        $query = sprintf('SELECT COUNT(1) as count FROM %s WHERE %s',
            $this->_user_info_table_name, $condition);
        $result = $this->_db->query($query);
        if ($result === false) {
            $this->_db->throwError(['query' => 'query failed: ' . $query]);
        }
        $r = $this->_db->fetch_assoc($result);
        $this->_db->free_result($result);
        if ($r !== false) {
            $hasImage = $r['count'] == 1 ? true : false;
        }

        if ($hasImage) {
            $image = $this->getDefaultItemProperty("image");
            if ($image['show'] == 1 && $image['use'] == 1) {
                return true;
            }
        }

        return false;
    }

    function checkExtensionFileActive($fileId)
    {
        $fileId = "'" . $this->_db->escape($fileId) . "'";

        $query
            = sprintf('SELECT ui.col_show , ui.col_use  FROM tab_grn_itemuserrelation  iur inner join tab_grn_useritem  ui on iur.col_item = ui._id WHERE iur.col_file = %s',
            $fileId);
        $result = $this->_db->query($query);
        if ($result === false) {
            $this->_db->throwError(['query' => 'query failed: ' . $query]);
        }
        $r = $this->_db->fetch_assoc($result);
        $this->_db->free_result($result);
        if ($r !== false) {
            if ($r['col_show'] == 1 && $r['col_use'] == 1) {
                return true;
            }
        }

        return false;
    }

    function checkFileUserActive($fileId)
    {
        if ($this->checkImageActive($fileId)) {
            return true;
        }

        return $this->checkExtensionFileActive($fileId);

    }

    /**
     * ログインユーザーの情報を取得する
     *
     * @return array
     */
    function getLoginUserInfo()
    {
        static $_user_info = null;
        if ($_user_info) {
            return $_user_info;
        }

        $login = $this->getLoginUser();
        if ($login) {
            // CB_Userからuidを取得しているため、削除フラグチェックの必要がない
            $_user_info = $this->getUserInfo($login->getOID(), null, 0, -1,
                null, true);
        } else {
            $_user_info = [
                '_id'              => null,
                'col_display_name' => null,
                'col_foreign_key'  => null
            ];
        }

        return $_user_info;
    }

    /**
     * 監査実行
     *
     * @param string $target     ターゲット
     * @param string $action     アクション
     * @param array  $properties プロパティ
     */
    function execInspection($target, $action, $properties)
    {
        grn_inspection_action('grn.common', $target, $action, $properties);
    }

    /**
     * UUMオブジェクトの変更アクションを実行する
     *
     * @param string $target     ターゲット( user, group, ... )
     * @param string $action     アクション( create, update, ... )
     * @param string $oid        オブジェクトID
     * @param array  $properties オブジェクトプロパティ
     * @param array  $append     追加情報
     * @param bool   $do_persist
     */
    function _changeInfo(
        $target,
        $action,
        $oid,
        $properties,
        $append = null,
        $do_persist = true
    ) {
        if (is_null($append) && $action === 'create') {
            $append = [$target => $oid];
        }

        $_ignore = ['password' => 1];
        if (array_key_exists($target, $_ignore)) {
            $do_persist = false;
        }

        if ($do_persist) {
            $user_info = $this->getLoginUserInfo();
            $condition = null;
            if ($oid) {
                $condition = "col_{$target}='" . $this->_db->escape($oid) . "'";
            }

            // 監査オブジェクトの永続化
            grn_set_inspection_state("tab_grn_{$target}info",
                $append,
                $condition,
                $user_info,
                $action);
        }
    }

    /**
     * ユーザー、組織、ロールの拡張情報を生成する.
     *
     * @access private
     *
     * @param string $target 対象情報. user, group, role のいずれか.
     * @param string $object 対象オブジェクト.
     *
     * @return GRN_UserInfo|GRN_GroupInfo|GRN_RoleInfo  Return GRN_($target)Info object.
     */
    function _createInfo($target, & $object)
    {
        $info_table = $this->_getInfoTable($target);
        /** @var GRN_UserInfo|GRN_GroupInfo|GRN_RoleInfo $info */
        $info = $info_table->newRow();
        $info->set($target, $object);
        $info->onCreate($this->getLoginUser());
        $info->updateNow();

        return $info;
    }

    /**
     * ユーザー、組織、ロールの拡張情報を更新する.
     *
     * @access private
     *
     * @param string $target 対象情報. user, group, role のいずれか.
     * @param string $oid    対象オブジェクトID.
     *
     * @return object GRN_($target)Info
     */
    function _updateInfo($target, $oid)
    {
        $info = $this->_getInfo($target, $oid);
        $info->onUpdate($this->getLoginUser());
        $info->updateNow();

        return $info;
    }

    /**
     * ユーザーの登録者、更新者情報を取得する.
     *
     * @param string $uid ユーザーID.
     *
     * @return GRN_UserInfo|bool      FALSE if $uid is not valid.
     */
    function getUserCreationInfo($uid)
    {
        $ret = $this->_getInfo('user', $uid);

        return $ret;
    }

    function getUserCount()
    {
        return $this->getUserCountWithCondition();
    }

    function getUserCountWithCondition($condition = null)
    {
        $table = $this->getUserTable();
        $rowset = new CB_RowSet($table);

        if (is_string($condition) && 0 < strlen($condition)) {
            $rowset->addCondition($condition);
        }
        $rowset->addCondition($this->_getLiveUserCondition());
        $rowset->applyGroupFunctions(['count' => 'COUNT(*)']);
        $rowset->setLock(CB_DATABASE_NO_LOCK);

        $row = $rowset->iterate();

        return $row['count'];
    }

    /**
     * @private
     * @return string
     */
    function _getLiveUserCondition()
    {
        return sprintf('( %s.col_deleted IS NULL )', $this->_user_table_name);
    }

    /**
     * @private
     * @return string
     */
    function _getDeletedUserCondition()
    {
        return sprintf('( %s.col_deleted IS NOT NULL)',
            $this->_user_table_name);
    }

    /**
     * @private
     * @return string
     */
    function _getActiveUserCondition()
    {
        return sprintf("( %s.col_valid IS NULL )", $this->_user_table_name);
    }

    /**
     * @private
     * @return string
     */
    function _getDeactiveUserCondition()
    {
        return sprintf("( %s.col_valid IS NOT NULL )", $this->_user_table_name);
    }

    function getDeactiveUsers(
        $offset = 0,
        $limit = -1,
        $order_by = 'tab_cb_user.col_position, tab_cb_user._id',
        $add_condition = null
    ) {
        $add_conditions = [];
        if (0 < strlen($add_condition)) {
            $add_conditions[] = '( ' . $add_condition . ' )';
        }
        $add_conditions[] = $this->_getDeactiveUserCondition();
        $add_conditions[] = $this->_getLiveUserCondition();
        $add_condition = implode(' AND ', $add_conditions);

        return $this->getUsers($offset, $limit, $order_by, $add_condition);
    }

    function getDeactiveUserCount()
    {


        $condition = $this->_getDeactiveUserCondition();
        $condition .= ' AND ' . $this->_getLiveUserCondition();

        $query = sprintf('SELECT COUNT(_id) as count FROM %s WHERE %s',
            $this->_user_table_name,
            $condition);
        $result = $this->_db->query($query);
        if ($result === false) {
            $this->_db->throwError(['query' => 'query failed: ' . $query]);
        }
        $r = $this->_db->fetch_assoc($result);
        $this->_db->free_result($result);
        if ($r !== false) {
            return $r['count'];
        }

        return false;
    }

    /**
     * 使用中のユーザー数を取得する
     *
     * @return int or FALSE     ユーザー数
     */
    function getActiveUserCount()
    {
        $condition = $this->_getActiveUserCondition();
        $condition .= ' AND ' . $this->_getLiveUserCondition();

        $query
            = sprintf('SELECT COUNT(_id) as count FROM %s FORCE INDEX(PRIMARY) WHERE %s',
            $this->_user_table_name,
            $condition);

        $result = $this->_db->query($query);
        if ($result === false) {
            $this->_db->throwError(['query' => 'query failed: ' . $query]);
        }
        $r = $this->_db->fetch_assoc($result);
        $this->_db->free_result($result);
        if ($r !== false) {
            return $r['count'];
        }

        return false;
    }

    function checkLincense()
    {
        require_once('grn/license.csp');
        $lm = GRN_LicenseManager::getInstance();
        $license_info = $lm->getLicense(GRN_LICENSE_BASESYSTEM);
        if ($license_info === false) {
            return false;
        }

        if ( ! $lm->isDemoLicense($license_info['type'])) {
            if ($license_info['users'] < $this->getActiveUserCount() - 1) {
                return false;
            }


            if (defined('ON_SAAS')
                && ($this->checkSaasLincense() < $this->getActiveUserCount()
                                                 - 1)
            ) {
                return false;
            }
        }

        return true;
    }

    /**
     * 2011.10.13 Add license check for SaaS
     * Authoer: Atsushi Shima
     *
     * @return int or FALSE     ユーザー数
     */
    function checkSaasLincense()
    {
        $grn_check_query = 'show tables like \'tab_saas_limit\'';
        $grn_saas_check = $this->_db->query($grn_check_query);
        $grn_create_check = $this->_db->fetch_row($grn_saas_check);
        if ($grn_create_check[0]) {
            $grn_query = 'select limit_conut from tab_saas_limit where id = 1';
            $grn_limit = $this->_db->query($grn_query);
            if ($grn_limit === false) {
                $this->_db->throwError([
                    'query' => 'query failed: ' . $grn_query
                ]);
            }
            $grn_limit_license = $this->_db->fetch_row($grn_limit);
            if ($grn_limit_license[0] !== false) {
                return $grn_limit_license[0];
            }

            return false;
        }

        return true;
    }

    /**
     * 使用中のユーザーかを判定する
     *
     * @param  string $uid
     *
     * @return bool
     */
    function isActiveUser($uid)
    {
        $user = $this->getUser($uid);
        if ($user === false) {
            return false;
        }

        return is_null($user->get('valid'));
    }

    /**
     * 全員が使用中のユーザーかどうか判定する
     *
     * @param  string[] $uids
     *
     * @return bool
     */
    function isAllActiveUsers($uids)
    {
        if (count($uids) == 0) {
            return true;
        }

        $query_user = [];
        $query = cb_queryf($this->_db,
            "SELECT COUNT(*) AS count FROM @S WHERE _id IN (@A) AND col_deleted IS NULL;",
            $this->_user_table_name, $uids);
        $result = $this->_db->query($query);
        $row = $this->_db->fetch_assoc($result);
        $this->_db->free_result($result);

        if ($row['count'] == count($uids)) {
            return true;
        }

        return false;
    }

    /**
     * @param $uid
     */
    function activateUser($uid)
    {
        if (GRN_UUM_ADMINISTRATION_USER === $uid) {
            return;
        }
        $this->setUserProperties($uid, ['valid' => null]);
        if ( ! $this->checkLincense()) {
            cb_throw_error(E_GRN_LICENSE_DENY_USER_ACTIVATE);
        }
    }

    function deactivateUser($uid)
    {
        if (GRN_UUM_ADMINISTRATION_USER === $uid) {
            cb_throw_error(E_GRN_DONT_STOP_ADMINISTRATOR);
        }

        $date = new CB_Date;
        $date->year = 1970;
        $date->month = 1;
        $date->day = 1;

        return $this->setUserProperties($uid, ['valid' => $date]);
    }

    function getValidProperty($uid, $valid, &$prop)
    {
        if (is_null($valid) || $valid === '1') {
            $prop = null;
        } else {
            if ( ! defined('ON_FOREST')
                 && GRN_UUM_ADMINISTRATION_USER === $uid
            ) {
                cb_throw_error(E_GRN_DONT_STOP_ADMINISTRATOR);
            }
            $date = new CB_Date;
            $date->year = 1970;
            $date->month = 1;
            $date->day = 1;
            $prop = $date;
        }

        return true;
    }

    ////////////////////
    // 一覧用 API
    ////////////////////

    /**
     * ユーザーの所属するグループ情報を取得する
     *
     * @param string $uid
     * @param bool   $include_deleted
     *
     * @return array
     */
    function getUserGroupsInfo($uid, $include_deleted = false)
    {
        if ( ! $uid) {
            return [];
        }
        $groups = $this->getUsersGroupsInfo([$uid], $include_deleted);
        if (isset($groups[$uid])) {
            return $groups[$uid];
        }

        return [];
    }

    /**
     * 複数ユーザーの所属する組織を一括取得する
     *
     * @param string[] $uids
     * @param bool     $include_deleted
     *
     * @return array
     * return[ 'uid' ][ 'gid' ] = group info
     */
    public function getUsersGroupsInfo($uids = null, $include_deleted = false)
    {
        if (is_array($uids) && count($uids) <= 0) {
            return [];
        }

        //from cache
        $cache = [];
        $new_uids = [];

        if (is_array($uids)) {
            $cached_entry = $this->_users_groups;

            if (is_array($cached_entry) && count($cached_entry) > 0) {
                foreach ($uids as $uid) {
                    $value = false;
                    if (array_key_exists($uid, $cached_entry)) {
                        $value = $this->_users_groups[$uid];
                    }

                    if ($value !== false) {
                        $cache[$uid] = $value;
                    } else {
                        $new_uids[$uid] = $uid;
                    }
                }

                if (count($new_uids) === 0) {
                    return $cache;
                } else {
                    $uids = $new_uids;
                }
            }
        }


        $users = $this->_core->getUserGroupInfoListByUserIds($uids,
            $include_deleted, 0, -1);


        if (is_array($uids)) {
            foreach ($uids as $uid) {
                if ( ! isset($users[$uid])) {
                    $users[$uid] = [];
                }
            }
        }

        foreach ($users as $uid => $groups) {
            $this->_users_groups[$uid] = $groups;
        }


        $users = $users + $cache;
        ksort($users);

        return $users;
    }

    /**
     * ユーザーの所持するロール一覧の取得
     *
     * @param string $uid
     * @param bool   $include_deleted
     *
     * @return array
     */
    function getUserRolesInfo($uid, $include_deleted = false)
    {
        if ( ! $uid) {
            return [];
        }
        $roles = $this->getUsersRolesInfo([$uid], $include_deleted);

        if (isset($roles[$uid])) {
            return $roles[$uid];
        }

        return [];
    }

    /**
     * 複数ユーザーの所持するロール一覧の取得
     *
     * @param string[] $uids
     * @param bool     $include_deleted
     *
     * @return array
     * return[ 'uid' ][ 'rid' ] = role info.
     */
    function getUsersRolesInfo($uids = null, $include_deleted = false)
    {
        if (is_array($uids) && count($uids) <= 0) {
            return [];
        }

        //from cache
        $cache = [];
        $new_uids = [];
        if (is_array($uids)) {
            $cached_entry = $this->_users_roles;
            if (is_array($cached_entry) && count($cached_entry) > 0) {
                foreach ($uids as $uid) {
                    $value = false;
                    if (array_key_exists($uid, $cached_entry)) {
                        $value = $this->_users_roles[$uid];
                    }
                    if ($value !== false) {
                        $cache[$uid] = $value;
                    } else {
                        $new_uids[$uid] = $uid;
                    }
                }
                if (count($new_uids) === 0) {
                    return $cache;
                } else {
                    $uids = $new_uids;
                }
            }
        }

        $urt = $this->_user_role_table_name;
        $rt = $this->_role_table_name;
        $ut = $this->_user_table_name;

        $columns = [];
        $columns[] = "{$rt}.col_foreign_key";
        $columns[] = "{$urt}.col_user";
        $columns[] = "{$rt}._id";

        $condition = '';
        if (is_array($uids)) {
            if (count($uids) === 0) {
                $uids = [];
            }

            $uids_temp = [];
            foreach ($uids as $value) {
                $uids_temp[] = "'" . $this->_db->escape($value) . "'";
            }

            $condition = " WHERE {$urt}.col_user IN (" . implode(',',
                    $uids_temp) . ')';
        }

        $columns = implode(',', $columns);
        $on = sprintf('%s.col_role = %s._id', $urt, $rt);
        if ($include_deleted) {
            $query = sprintf('SELECT %s FROM %s LEFT JOIN %s ON %s%s',
                $columns, $urt, $rt, $on, $condition);
        } else {
            $ut_on = sprintf('%s.col_user = %s._id AND %s', $urt, $ut,
                $this->_getLiveUserCondition());
            $query
                = sprintf('SELECT %s FROM %s LEFT JOIN %s ON %s INNER JOIN %s ON %s%s',
                $columns, $urt, $rt, $on, $ut, $ut_on, $condition);
        }
        $query = $this->_db->select_format($query, 0, -1, CB_DATABASE_NO_LOCK);
        $result = $this->_db->query($query);
        if ($result === false) {
            $this->_db->throwError(['query' => 'query failed: ' . $query]);
        }

        $users = [];
        $n = $this->_db->num_rows($result);
        for ($i = 0; $i < $n; $i++) {
            $r = $this->_db->fetch_assoc($result);
            $uid = $r['col_user'];
            unset($r['col_user']);
            $users[$uid][$r['_id']] = $r;
        }
        $this->_db->free_result($result);

        if (is_array($uids)) {
            foreach ($uids as $uid) {
                if ( ! isset($users[$uid])) {
                    $users[$uid] = [];
                }
            }
        }

        //set cache
        foreach ($users as $uid => $roles) {
            $this->_users_roles[$uid] = $roles;
        }

        $users = $users + $cache;
        ksort($users);

        return $users;
    }

    /**
     * ユーザー情報を取得する
     *
     * @param string        $uid
     * @param string[]|null $columns
     * @param int           $offset
     * @param int           $limit
     * @param string|null   $order_by
     * @param bool          $include_deleted
     *
     * @return array|bool   Return FALSE if the user does not exist.
     */
    function getUserInfo(
        $uid,
        $columns = null,
        $offset = 0,
        $limit = -1,
        $order_by = null,
        $include_deleted = false
    ) {
        if ( ! $uid) {
            return false;
        }

        $users = $this->getUsersInfo([$uid], $columns, $offset, $limit,
            $order_by, null, '_id', $include_deleted);
        if (isset($users[$uid])) {
            return $users[$uid];
        }

        return false;
    }

    /**
     * 外部キーによってユーザー情報を取得する
     *
     * @param string        $foreign_key
     * @param string[]|null $columns
     * @param int           $offset
     * @param int           $limit
     * @param string|null   $order_by
     * @param bool          $include_deleted
     *
     * @return array|bool   Return FALSE if the user does not exist.
     */
    function getUserInfoByForeignKey(
        $foreign_key,
        $columns = null,
        $offset = 0,
        $limit = -1,
        $order_by = null,
        $include_deleted = false
    ) {
        $users = $this->getUsersInfo([$foreign_key], $columns, $offset, $limit,
            $order_by, null, 'col_foreign_key', $include_deleted);
        if (isset($users[$foreign_key])) {
            return $users[$foreign_key];
        }

        return false;
    }

    /**
     * 複数ユーザー情報を取得する
     *
     * @param string[]      $uids
     * @param string[]|null $columns
     * @param int           $offset
     * @param int           $limit
     * @param string|null   $order_by
     * @param string|null   $add_condition
     * @param string        $type
     * @param bool          $include_deleted
     *
     * @return array
     */
    function getUsersInfo(
        $uids = null,
        $columns = null,
        $offset = 0,
        $limit = -1,
        $order_by = null,
        $add_condition = null,
        $type = '_id',
        $include_deleted = false
    ) {
        if (is_array($uids) && count($uids) === 0) {
            return [];
        }

        if (is_null($columns)) {
            $columns = [];
            $columns[] = 'col_display_name';
            $columns[] = 'col_foreign_key';
        }
        $columns[] = '_id';
        $columns = implode(',', $columns);

        if (is_null($order_by)) {
            $order_by = 'ORDER BY col_position, _id';
        }
        $condition = '';
        if (is_array($uids) && count($uids) > 0) {
            $uid_list = [];
            foreach ($uids as $key => $value) {
                $uid_list[$key] = cb_queryf($this->_db, "'@S'", $value);
            }

            $condition = sprintf("WHERE ( {$type} IN ( %s ) ) ",
                implode(',', $uid_list));
        }

        if ( ! $include_deleted) {
            if (strlen($condition) > 0) {
                $condition .= 'AND ';
            } else {
                $condition .= 'WHERE ';
            }
            $condition .= $this->_getLiveUserCondition();
        }

        if (strlen($add_condition) > 0) {
            if (strlen($condition) > 0) {
                $condition .= "AND (${add_condition})";
            } else {
                $condition .= "WHERE (${add_condition})";
            }
        }

        $query = sprintf('SELECT %s FROM %s %s %s',
            $columns,
            $this->_user_table_name,
            $condition, $order_by);
        $query = $this->_db->select_format($query, $offset, $limit,
            CB_DATABASE_NO_LOCK);
        $result = $this->_db->query($query);
        if ($result === false) {
            $this->_db->throwError(['query' => 'query failed: ' . $query]);
        }

        $users = [];
        $n = $this->_db->num_rows($result);

        for ($i = 0; $i < $n; $i++) {
            $r = $this->_db->fetch_assoc($result);
            $users[$r[$type]] = $r;
        }
        $this->_db->free_result($result);

        return $users;
    }

    function getUsersId(
        $uids = null,
        $offset = 0,
        $limit = -1,
        $order_by = null,
        $add_condition = null,
        $type = '_id',
        $include_deleted = false
    ) {
        if (is_array($uids) && count($uids) === 0) {
            return [];
        }

        $columns = '_id';

        if (is_null($order_by)) {
            $order_by = 'ORDER BY col_position, _id';
        }
        $condition = '';
        if (is_array($uids) && count($uids) > 0) {
            $uid_list = [];
            foreach ($uids as $key => $value) {
                $uid_list[$key] = cb_queryf($this->_db, "'@S'", $value);
            }

            $condition = sprintf("WHERE ( {$type} IN ( %s ) ) ",
                implode(',', $uid_list));
        }

        if ( ! $include_deleted) {
            if (strlen($condition) > 0) {
                $condition .= 'AND ';
            } else {
                $condition .= 'WHERE ';
            }
            $condition .= $this->_getLiveUserCondition();
        }

        if (strlen($add_condition) > 0) {
            if (strlen($condition) > 0) {
                $condition .= "AND (${add_condition})";
            } else {
                $condition .= "WHERE (${add_condition})";
            }
        }

        $query = sprintf('SELECT %s FROM %s %s %s',
            $columns,
            $this->_user_table_name,
            $condition, $order_by);
        $query = $this->_db->select_format($query, $offset, $limit,
            CB_DATABASE_NO_LOCK);

        $result = $this->_db->query($query);
        if ($result === false) {
            $this->_db->throwError(['query' => 'query failed: ' . $query]);
        }

        $users_id = [];
        $n = $this->_db->num_rows($result);

        for ($i = 0; $i < $n; $i++) {
            $r = $this->_db->fetch_assoc($result);
            $users_id[] = $r[$type];
        }
        $this->_db->free_result($result);

        return $users_id;
    }

    /**
     * グループ情報を取得する。
     *
     * @param string $gid
     *
     * @return array|bool  Return FALSE if the group does not exist.
     */
    public function getGroupInfo($gid = null)
    {
        $result = is_numeric($gid) ? $this->_core->getGroupInfo($gid) : false;

        return $result;
    }

    public function getGroupInfoByForeignKey($key = null)
    {
        $result = (is_null($key) && strlen($key) <= 0) ? false
            : $this->_core->getGroupInfoByForeignKey($key);

        return $result;
    }

    public function createMultiLanguageValuesArray($inGid)
    {
        $result = is_numeric($inGid)
            ? $this->_core->createMultiLanguageValuesArray($inGid) : [];

        return $result;
    }

    public function getGroupInfoList($gids = null, $offset = 0, $limit = -1)
    {
        if (is_array($gids) && count($gids) === 0) {
            $ret = [];

            return $ret;
        }

        $results = [];

        if (is_null($gids)) {
            $results = $this->_core->getGroupInfoList($offset, $limit);
        } else {
            $results = $this->_core->getGroupInfoListByIds($gids, $offset,
                $limit);
        }

        return $results;
    }

    public function getGroupInfoListByNames(
        $inGroupNameArray,
        $inIsAnd = true,
        $offset = 0,
        $limit = -1
    ) {
        if ( ! is_array($inGroupNameArray) || count($inGroupNameArray) <= 0) {
            return [];
        }

        $groupRowList = $this->_core->getGroupInfoListByNames($inGroupNameArray,
            $inIsAnd, $offset, $limit);

        return $groupRowList;
    }

    public function getGroupInfoListByForeignKeys(
        $inGroupForeignKeyArray,
        $inIsIn = true,
        $offset = 0,
        $limit = -1
    ) {
        if ( ! is_array($inGroupForeignKeyArray)
             || count($inGroupForeignKeyArray) <= 0
        ) {
            return [];
        }

        $groupRowList
            = $this->_core->getGroupInfoListByForeignKeys($inGroupForeignKeyArray,
            $inIsIn, $offset, $limit);

        return $groupRowList;
    }

    /**
     * Get users(array) who don't belong to any groups.
     *
     * @param int           $offset
     * @param int           $limit
     * @param string[]|null $columns
     * @param string|null   $additional_condition
     *
     * @return array
     */
    function getNoGroupUsersInfo(
        $offset = 0,
        $limit = -1,
        $columns = null,
        $additional_condition = null
    ) {
        if (is_null($columns)) {
            $columns[] = "tab_cb_user.col_display_name";
            $columns[] = "tab_cb_user.col_foreign_key";
        }

        $columns[] = "tab_cb_user._id";

        $order_by = 'tab_cb_user.col_position, tab_cb_user._id';

        $query = $this->createNoGroupUsersSelectQuery($columns, $offset, $limit,
            $order_by, $additional_condition);

        $result = $this->_db->query($query);

        $users = [];
        while ($row = $this->_db->fetch_assoc($result)) {
            $users[$row['_id']] = $row;
        }
        $this->_db->free_result($result);

        return $users;
    }

    /**
     * Create a select query to get users who don't belong to any groups.
     *
     * @param string[]    $columns
     * @param int         $offset
     * @param int         $limit
     * @param string|null $order_by
     * @param string|null $additional_condition
     *
     * @return string
     */
    private function createNoGroupUsersSelectQuery(
        array $columns,
        $offset = 0,
        $limit = -1,
        $order_by = 'tab_cb_user.col_position, tab_cb_user._id',
        $additional_condition = null
    ) {
        $condition = sprintf('tab_cb_usergrouprelation.col_user IS NULL AND %s',
            $this->_getLiveUserCondition());
        if (strlen($additional_condition) > 0) {
            $condition = "$condition AND $additional_condition";
        }

        if (is_null($order_by)) {
            $order_by = 'tab_cb_user._id';
        }

        $query = sprintf(
            'SELECT %s FROM tab_cb_user ' .
            'LEFT JOIN tab_cb_usergrouprelation ON tab_cb_user._id = tab_cb_usergrouprelation.col_user '
            .
            'WHERE %s ' .
            'ORDER BY %s',
            implode(',', $columns), $condition, $order_by
        );

        return $this->_db->select_format($query, $offset, $limit,
            CB_DATABASE_NO_LOCK);
    }

    /**
     * 最近選択したユーザーの一覧を取得する
     *
     * @param string        $uid
     * @param int           $limit
     * @param string[]|null $columns
     * @param null          $app_id
     *
     * @return array
     */
    function getFrequentUsersInfo(
        $uid,
        $limit = -1,
        $columns = null,
        $app_id = null
    ) {
        if ( ! $uid) {
            return [];
        }

        if (is_null($columns)) {
            $columns[] = "col_display_name";
            $columns[] = "col_foreign_key";
        }
        $columns[] = "_id";

        require_once('grn/history.csp');
        $hm = GRN_Uum_HistoryManager::getInstance();
        $history_users = $hm->getUserHistory($uid);

        if ($app_id != null) {
            $history_users
                = AppAccess::filterUserIdsInternalAccessByAppId($history_users,
                $app_id);
        }

        $users = $this->getUsersInfo($history_users, $columns, 0, $limit);

        return $users;
    }

    function getFrequentUsersId($uid)
    {
        if ( ! $uid) {
            return [];
        }

        require_once('grn/history.csp');
        $hm = GRN_Uum_HistoryManager::getInstance();
        $history_users = $hm->getUserHistory($uid);

        $history_users = $this->getUsersId($history_users);

        return $history_users;
    }

    /**
     * 最近選択した組織の一覧を取得する
     *
     * @param string $uid
     * @param int    $limit
     *
     * @return array
     */
    function getFrequentGroupsInfo($uid, $limit = -1)
    {
        if ( ! $uid) {
            return [];
        }

        require_once('grn/history.csp');
        $hm = GRN_Uum_HistoryManager::getInstance();

        //所属する組織は除外する
        $exclusive_list = $this->getUserGroupsInfo($uid);
        $exclusive_list = array_keys($exclusive_list);

        //よく使う組織も除外する
        foreach ($hm->getOftenusedGroups($uid) as $ex_id) {
            if ( ! in_array($ex_id, $exclusive_list)) {
                $exclusive_list[] = $ex_id;
            }
        }

        $history_groups = [];
        foreach ($hm->getGroupHistory($uid) as $group_id) {
            if ( ! in_array($group_id, $exclusive_list)) {
                $history_groups[] = $group_id;
                if (count($history_groups) == $limit) {
                    break;
                }
            }
        }

        $groups = $this->getGroupInfoList($history_groups, 0, $limit);
        $ret = [];

        foreach ($history_groups as $order_id) {
            if (array_key_exists($order_id, $groups)) {
                $ret[$order_id] = $groups[$order_id];
            }
        }

        return $ret;
    }

    /**
     * よく使う組織一覧を取得する
     *
     * @param string $uid
     * @param int    $limit
     *
     * @return array
     */
    function getOftenusedGroupsInfo($uid, $limit = -1)
    {
        if ( ! $uid) {
            return [];
        }

        require_once('grn/history.csp');
        $hm = GRN_Uum_HistoryManager::getInstance();

        $oftenused_groups = [];
        foreach ($hm->getOftenusedGroups($uid) as $group_id) {
            $oftenused_groups[] = $group_id;
            if (count($oftenused_groups) == $limit) {
                break;
            }
        }

        $groups = $this->getGroupInfoList($oftenused_groups, 0, $limit);
        $ret = [];

        foreach ($oftenused_groups as $order_id) {
            if (array_key_exists($order_id, $groups)) {
                $ret[$order_id] = $groups[$order_id];
            }
        }

        return $ret;
    }

    /**
     * 子組織の存在有無を確認する
     *
     * @param  string $gid 組織ID
     *
     * @return bool
     */
    function hasChild($gid)
    {
        if ( ! $gid) {
            return false;
        }

        $condition = "{$this->_group_table_name}.col_parent=" . "'"
                     . $this->_db->escape($gid) . "'";
        $query = sprintf('SELECT COUNT(_id) AS count FROM %s WHERE %s',
            $this->_group_table_name, $condition);

        $result = $this->_db->query($query);
        if ($result === false) {
            $this->_db->throwError(['query' => 'query failed: ' . $query]);
        }

        $r = $this->_db->fetch_assoc($result);
        if ($r['count'] > 0) {
            return true;
        }

        return false;
    }

    /**
     * 組織配下にある子組織の数を一括で取得する
     *
     * @return array
     */
    function getChildGroupsCountInfo()
    {
        $column = 'col_parent, COUNT(_id) as c';
        $query = sprintf('SELECT %s FROM %s GROUP BY col_parent', $column,
            $this->_group_table_name);
        $result = $this->_db->query($query);
        if ($result === false) {
            $this->_db->throwError(['query' => 'query failed: ' . $query]);
        }

        $groups = [];
        $n = $this->_db->num_rows($result);
        for ($i = 0; $i < $n; $i++) {
            $r = $this->_db->fetch_assoc($result);
            $groups[$r['col_parent']] = $r['c'];
        }
        $this->_db->free_result($result);

        return $groups;
    }

    /**
     * ある組織の子組織の数を返す
     *
     * @param  string $gid
     *
     * @return string
     */
    function countChildrenOfGroup($gid)
    {
        if (is_null($gid)) {
            $condition = 'col_parent IS NULL';
        } else {
            $condition = 'col_parent=' . "'" . $this->_db->escape($gid) . "'";
        }
        $query = sprintf('SELECT count(*) as num_groups FROM %s WHERE %s',
            $this->_group_table_name, $condition);

        $result = $this->_db->query($query);
        if ($result === false) {
            $this->_db->throwError(['query' => 'query failed: ' . $query]);
        }
        $row = $this->_db->fetch_assoc($result);
        $this->_db->free_result($result);

        return $row['num_groups'];
    }

    function getParentOfGroup($gid)
    {
        $condition = "_id = '" . $this->_db->escape($gid) . "'";
        $query = sprintf("SELECT col_parent FROM %s WHERE %s",
            $this->_group_table_name, $condition);
        $result = $this->_db->query($query);
        if ($result === false) {
            $this->_db->throwError(['query' => 'query failed: ' . $query]);
        }
        $row = $this->_db->fetch_assoc($result);
        $this->_db->free_result($result);

        if (is_array($row)) {
            return $row['col_parent'];
        }

        return -1;
    }

    /**
     * 子組織の情報を取得する
     *
     * @param  string $gid グループID      nullの場合、ルートに対する子組織
     * @param  int    $offset
     * @param  int    $limit
     *
     * @return array
     */
    public function getChildGroupsInfo($gid = null, $offset = 0, $limit = -1)
    {
        $groups = $this->_core->getGroupInfoListByParentId($gid, $offset,
            $limit);

        return $groups;
    }

    /**
     * グループに所属されるユーザー情報を取得する
     *
     * @param  string        $gid
     * @param  int           $offset
     * @param  int           $limit
     * @param  string[]|null $columns
     * @param  string|null   $additional_condition
     * @param null           $app_id
     *
     * @return array
     */
    function getGroupUsersInfo(
        $gid,
        $offset = 0,
        $limit = -1,
        $columns = null,
        $additional_condition = null,
        $app_id = null
    ) {
        if ( ! $gid) {
            return [];
        }

        $user_rows = $this->getGroupUsersId($gid, $offset, $limit, null,
            $additional_condition);

        if ($app_id != null) {
            $user_rows
                = AppAccess::filterUserIdsInternalAccessByAppId($user_rows,
                $app_id);
            $user_rows = array_values($user_rows);
        }

        $users = $this->getUsersInfo($user_rows, $columns, 0, $limit);

        return $users;
    }

    function getGroupUsersId(
        $gid,
        $offset = 0,
        $limit = -1,
        $order_by = 'tab_cb_user.col_position, tab_cb_user._id',
        $additional_condition = null
    ) {
        if ( ! $gid) {
            return [];
        }

        $ugt = $this->_user_group_table_name;
        $ut = $this->_user_table_name;

        $columns = "{$ut}._id";

        $on = sprintf('%s.col_user = %s._id AND %s', $ugt, $ut,
            $this->_getLiveUserCondition());
        $condition = sprintf("%s.col_group='%s'", $ugt,
            $this->_db->escape($gid));

        if (is_string($additional_condition)
            && 0 < strlen($additional_condition)
        ) {
            $condition = "$condition AND ($additional_condition)";
        }

        if ($order_by == null) {
            $order_by = "ORDER BY {$ut}.col_position, {$ut}._id";
        } else {
            $order_by = "ORDER BY " . $order_by;
        }

        $query = sprintf('SELECT %s FROM %s INNER JOIN %s ON %s WHERE %s %s',
            $columns, $ugt, $ut, $on, $condition, $order_by);
        $query = $this->_db->select_format($query, $offset, $limit,
            CB_DATABASE_NO_LOCK);


        $result = $this->_db->query($query);
        if ($result === false) {
            $this->_db->throwError(['query' => 'query failed: ' . $query]);
        }

        $users_id = [];
        $n = $this->_db->num_rows($result);

        for ($i = 0; $i < $n; $i++) {
            $r = $this->_db->fetch_assoc($result);
            $users_id[] = $r['_id'];

        }
        $this->_db->free_result($result);

        return $users_id;
    }

    /**
     * グループに所属されるユーザー情報を取得する
     *
     * @param string        $role_id
     * @param string[]|null $gids
     * @param int           $offset
     * @param int           $limit
     * @param string[]|null $columns
     *
     * @return array
     */
    function getRoleUsersInfo(
        $role_id,
        $gids = null,
        $offset = 0,
        $limit = -1,
        $columns = null
    ) {
        $ur = $this->_user_role_table_name;
        $ug = $this->_user_group_table_name;
        $u = $this->_user_table_name;

        if ( ! is_array($columns) || 0 == count($columns)) {
            $columns = [];
            $columns[] = "{$u}.col_display_name";
            $columns[] = "{$u}.col_foreign_key";
        }
        $columns[] = "{$u}._id";
        $columns = implode(',', $columns);

        if (is_array($gids) && 0 < count($gids)) {
            foreach ($gids as $key => $value) {
                $gids[$key] = cb_queryf($this->_dbconn, "'@S'", $value);
            }
            $gids = implode(',', $gids);

            $from
                = "({$ur} INNER JOIN {$ug} ON ({$ur}.col_user={$ug}.col_user) AND ({$ug}.col_group IN ({$gids})))"
                  . "INNER JOIN tab_cb_user ON (${ug}.col_user={$u}._id AND "
                  . $this->_getLiveUserCondition() . ')';
        } else {
            $from = "{$ur} INNER JOIN {$u} ON {$ur}.col_user={$u}._id" . ' AND '
                    . $this->_getLiveUserCondition();
        }

        $condition = cb_queryf($this->_dbconn, "{$ur}.col_role='@S'", $role_id);

        $order_by = " ORDER BY {$u}.col_position,{$u}._id";

        $query = sprintf('SELECT %s FROM %s WHERE (%s)%s', $columns, $from,
            $condition, $order_by);
        $query = $this->_db->select_format($query, $offset, $limit,
            CB_DATABASE_NO_LOCK);

        $result = $this->_db->query($query);
        if (false === $result) {
            $this->_db->throwError(['query' => "query failed: {$query}"]);
        }

        $rows = [];
        while ($row = $this->_db->fetch_assoc($result)) {
            $rows[$row['_id']] = $row;
        }

        return $rows;
    }

    public function getManyUserPrimaryGroupInfoList($inUserIdArray = [])
    {
        if ( ! is_array($inUserIdArray) || count($inUserIdArray) == 0) {
            return [];
        }

        return $this->_core->getUserPrimaryGroupListByIds($inUserIdArray);
    }

    /**
     * 優先する組織の組織情報を取得する。
     *
     * @param  string $uid ユーザーID
     * @param  bool   $include_deleted
     *
     * @return array|bool  Return FALSE if the user does not exist.
     */
    public function getUserPrimaryGroupInfo($uid, $include_deleted = false)
    {
        if ( ! $uid) {
            return false;
        }

        /** @var CB_Row $groupRow */
        $groupRow = $this->getUserPrimaryGroup($uid, $include_deleted, true);

        if ($groupRow === false) {
            return false;
        }

        $result = [];
        $result['_id'] = $groupRow->getOID();
        $result['col_foreign_key'] = $groupRow->get('foreign_key');
        $result['col_name'] = $groupRow->get('name');

        return $result;
    }

    /**
     * @param string $uid
     * @param string $type The specifiable values are "user", "facility" and blank string "".
     *
     * @return array
     */
    function getMyGroupsInfo($uid, $type = "")
    {
        if ( ! $uid) {
            return [];
        }

        $columns_list = [
            "{$this->_mygroup_table_name}.col_name",
            "{$this->_mygroup_table_name}._id"
        ];
        $columns = implode(',', $columns_list);
        $order_by = "{$this->_mygroup_table_name}.col_list_index, "
                    . "{$this->_mygroup_table_name}._id";

        $dbconn = $this->_db;
        if ($type == 'user') {
            $columns .= ", {$this->_mygroup_table_name}.col_list_index";
            $mygroup_user_join_condition = "{$this->_mygroup_table_name}._id="
                                           . "{$this->_user_mygroup_table_name}.col_mygroup";
            $user_join_condition
                = "{$this->_user_mygroup_table_name}.col_user="
                  . "{$this->_user_table_name}._id AND "
                  . $this->_getLiveUserCondition();
            $query = cb_queryf(
                $dbconn,
                "SELECT DISTINCT @S FROM @S INNER JOIN @S ON @S INNER JOIN @S ON @S WHERE @S.col_owner='@S' ORDER BY @S",
                $columns,
                $this->_mygroup_table_name,
                $this->_user_mygroup_table_name,
                $mygroup_user_join_condition,
                $this->_user_table_name,
                $user_join_condition,
                $this->_mygroup_table_name,
                $uid,
                $order_by);
        } elseif ($type == 'facility') {
            $dbconn = cb_get_app_db("schedule");
            $sub_query
                = "SELECT {$this->_facility_mygroup_table_name}.col_mygroup FROM {$this->_facility_mygroup_table_name}";
            $query = cb_queryf(
                $dbconn,
                "SELECT @S FROM @S WHERE @S.col_owner='@S' AND @S._id IN ( @S ) ORDER BY @S",
                $columns,
                $this->_mygroup_table_name,
                $this->_mygroup_table_name,
                $uid,
                $this->_mygroup_table_name,
                $sub_query,
                $order_by);
        } else {
            $query = cb_queryf(
                $dbconn,
                "SELECT @S FROM @S WHERE col_owner='@S' ORDER BY @S",
                $columns,
                $this->_mygroup_table_name,
                $uid,
                $order_by);
        }

        $result = $dbconn->query($query);
        $groups = [];
        $n = $dbconn->num_rows($result);
        for ($i = 0; $i < $n; $i++) {
            $r = $dbconn->fetch_assoc($result);
            $groups[$r['_id']] = $r;
        }
        $dbconn->free_result($result);

        return $groups;
    }

    /**
     * Myグループに属するユーザーの一覧を取得する
     *
     * @param string        $mgid
     * @param string[]|null $columns
     * @param int           $offset
     * @param int           $limit
     * @param string|null   $add_condition
     * @param string|null   $uid
     * @param null          $app_id
     *
     * @return array
     */
    function getMyGroupUsersInfo(
        $mgid,
        $columns = null,
        $offset = 0,
        $limit = -1,
        $add_condition = null,
        $uid = null,
        $app_id = null
    ) {
        if ( ! $mgid) {
            return [];
        }

        $user_rows = $this->getMyGroupUsersId($mgid, $offset, $limit,
            $add_condition, $uid);

        if ($app_id != null) {
            $user_rows
                = AppAccess::filterUserIdsInternalAccessByAppId($user_rows,
                $app_id);
            $user_rows = array_values($user_rows);
        }

        $users = $this->getUsersInfo($user_rows, $columns, 0, $limit);
        $ret = [];
        foreach ($user_rows as $key => $user_id) {
            $ret[$user_id] = $users[$user_id];
        }

        return $ret;
    }

    /**
     * @param             $mygroup_id
     * @param int         $offset
     * @param             $limit
     * @param string|null $additional_condition
     * @param mixed|null  $uid
     *
     * @return array|bool
     */
    function getMyGroupUsersId(
        $mygroup_id,
        $offset = 0,
        $limit = -1,
        $additional_condition = null,
        $uid = null
    ) {
        assert('! is_null( $mygroup_id ) && 0 < strlen( $mygroup_id )');

        if (is_null($uid)) {
            $login_user = $this->getLoginUser();
            $uid = $login_user->getOID();
        }

        if ( ! ($mygroup = $this->getMyGroup($mygroup_id, $uid))) {
            return false;
        }

        /** @var CB_DatabaseConnection $dbconn */
        $dbconn = $this->_db;

        $query = cb_queryf($dbconn,
            "SELECT tab_grn_mygroupuserrelation.col_user" .
            " FROM tab_grn_mygroupuserrelation" .
            " INNER JOIN tab_cb_user ON tab_grn_mygroupuserrelation.col_user=tab_cb_user._id AND "
            . $this->_getLiveUserCondition() .
            " WHERE (tab_grn_mygroupuserrelation.col_mygroup='@S')",
            $mygroup->getOID());
        if ( ! is_null($additional_condition)) {
            $query .= ' AND (' . $additional_condition . ')';
        }
        $query .= " ORDER BY tab_grn_mygroupuserrelation.col_list_index, tab_grn_mygroupuserrelation._id";
        $query = $dbconn->select_format($query, $offset, $limit,
            CB_DATABASE_NO_LOCK);

        $result = $dbconn->query($query);

        $users_id = [];
        while ($r = $dbconn->fetch_assoc($result)) {
            $users_id[] = $r['col_user'];
        }
        $dbconn->free_result($result);

        return $users_id;
    }

    /**
     * @param string      $mygroup_id
     * @param int         $offset
     * @param int         $limit
     * @param string|null $additional_condition
     * @param mixed|null  $uid
     *
     * @return array|bool
     */
    function getMyGroupFacilitiesId(
        $mygroup_id,
        $offset = 0,
        $limit = -1,
        $additional_condition = null,
        $uid = null
    ) {
        if (is_null($uid)) {
            $login_user = $this->getLoginUser();
            $uid = $login_user->getOID();
        }
        if ( ! ($mygroup = $this->getMyGroup($mygroup_id, $uid))) {
            return false;
        }

        $dbconn = cb_get_app_db("schedule");
        $query = cb_queryf($dbconn,
            "SELECT tab_grn_schedule_mygroupfacilityrelation.col_facility" .
            " FROM tab_grn_schedule_mygroupfacilityrelation" .
            " WHERE (tab_grn_schedule_mygroupfacilityrelation.col_mygroup='@S')",
            $mygroup->getOID());
        if ( ! is_null($additional_condition)) {
            $query .= ' AND (' . $additional_condition . ')';
        }
        $query .= " ORDER BY tab_grn_schedule_mygroupfacilityrelation.col_list_index";
        $query = $dbconn->select_format($query, $offset, $limit,
            CB_DATABASE_NO_LOCK);

        $result = $dbconn->query($query);

        $facility_ids = [];
        while ($r = $dbconn->fetch_assoc($result)) {
            $facility_ids[$r['col_facility']] = $r['col_facility'];
        }
        $dbconn->free_result($result);

        return $facility_ids;
    }

    /**
     * @param string $mygroup_id
     * @param array  $facility_ids
     *
     * @return bool|int
     */
    function setMyGroupFacilities($mygroup_id, $facility_ids = [])
    {
        $dbconn = cb_get_app_db("schedule");

        /*
         * The checking code below is used for the case of adding new mygroup
         * In large-scale version, the facility table is in schedule DB (slave) and mygroup table is in master DB
         * In case we added mygroup to master DB, but if it is not sync to slave DB by the time adding facilities to mygroup
         * The error will occur, so we throw a new error E_GRN_PERSONAL_MYGROUP_CANNOT_ADD_MEMBER.
         * */
        $query_mygroup = cb_queryf(
            $dbconn,
            "SELECT COUNT(*) FROM @S WHERE _id = '@S';",
            $this->_mygroup_table_name,
            $mygroup_id);
        $result = $dbconn->query($query_mygroup);
        $row = $dbconn->fetch_assoc($result);
        if ($row['COUNT(*)'] == 0) {
            cb_throw_error(E_GRN_PERSONAL_MYGROUP_CANNOT_ADD_MEMBER);
        }

        $query = cb_queryf(
            $dbconn,
            "DELETE FROM @S WHERE col_mygroup='@S'",
            $this->_facility_mygroup_table_name,
            $mygroup_id);
        $dbconn->query($query);

        require_once('schedule/facility_system_logic.csp');
        $facility_logic = GRN_Facility_SystemLogic::getInstance();

        $facilities_info = $facility_logic->getFacilitiesInfo($facility_ids,
            CB_DATABASE_NO_LOCK);
        foreach ($facility_ids as $key => $facility_id) {
            if ( ! array_key_exists($facility_id, $facilities_info)) {
                unset($facility_ids[$key]);
            }
        }

        if (is_array($facility_ids) && count($facility_ids) > 0) {
            $query = cb_queryf(
                $dbconn,
                "INSERT INTO @S(col_list_index, col_mygroup, col_facility) VALUES ",
                $this->_facility_mygroup_table_name);
            $values = [];
            $list_index = 1;
            foreach ($facility_ids as $facility_id) {
                $values[] = cb_queryf($dbconn, " ('@S', '@S', '@S') ",
                    $list_index, $mygroup_id, $facility_id);
                $list_index++;
            }
            $query .= implode(",", $values);
            $dbconn->query($query);

            return $dbconn->affected_rows();
        }
    }

    /**
     * Myグループの一覧を取得する
     *
     * @param string[]|null $columns
     * @param int           $offset
     * @param int           $limit
     * @param string|null   $add_condition
     *
     * @return array
     */
    function listStaticRolesInfo(
        $columns = null,
        $offset = 0,
        $limit = -1,
        $add_condition = null
    ) {
        if (is_null($columns)) {
            $columns[] = 'col_foreign_key';
            $columns[] = 'col_description';
        }
        $columns[] = '_id';
        $columns = implode(',', $columns);
        if (is_string($add_condition) && 0 < strlen($add_condition)) {
            $add_condition = ' WHERE ' . $add_condition;
        }
        $order_by = ' ORDER BY col_list_index';
        $query = sprintf('SELECT %s FROM %s%s%s',
            $columns, $this->_role_table_name, $add_condition, $order_by);
        $query = $this->_db->select_format($query, $offset, $limit,
            CB_DATABASE_NO_LOCK);

        if ( ! ($result = $this->_db->query($query))) {
            $this->_db->throwError(['query' => 'query failed: ' . $query]);
        }

        $row_count = $this->_db->num_rows($result);

        $roles = [];
        for ($i = 0; $i < $row_count; $i++) {
            $row = $this->_db->fetch_assoc($result);
            if (is_array($row) && 0 < count($row)) {
                $roles[$row['_id']] = $row;
            }
        }
        $this->_db->free_result($result);

        return $roles;
    }

    /**
     * ID指定によるユーザー取得API
     * (これはIDベースにするための過渡的なAPIです。)
     *
     * @param  string[] $uids
     *
     * @return CB_User[]
     */
    function getUserObjects($uids)
    {
        if ( ! is_array($uids) || count($uids) <= 0) {
            return [];
        }

        global $G_container_base;
        /** @var CB_DatabaseConnection $dbconn */
        $dbconn = $G_container_base->getInstance('dbconn');

        $tmp_uids = [];
        foreach ($uids as $uid) {
            array_push($tmp_uids, "'" . $dbconn->escape($uid) . "'");
        }

        $ids = implode(',', $tmp_uids);
        $condition = sprintf("_id IN ( %s )", $ids);

        $rowset = new CB_RowSet($this->getUserTable());
        $rowset->addCondition($condition);
        $rowset->addCondition($this->_getLiveUserCondition());

        $rowset->addOrderColumn('col_position');
        $rowset->addOrderColumn('_id');
        $rowset->setLock(CB_DATABASE_NO_LOCK);

        $users = [];
        while ($row = $rowset->iterate()) {
            $users[$row->getOID()] = $row;
        }

        return $users;
    }

    /**
     * Ogre標準の、グループ所属ユーザー一覧ルーチン.
     * 標準では position カラムでソートする要件.
     *
     * You may restrict user list by $additional_condition.
     * The condition can refer the CB_User table (by "tab_cb_user." prefix).
     * For example, to retrieve those who have e-mail addresses, give
     *     "tab_cb_user.col_email_address IS NOT NULL"
     * as the additional condition.
     *
     * @param string      $gid
     * @param int         $offset
     * @param int         $limit
     * @param string      $order_by
     * @param string|null $additional_condition
     * @param null        $app_id
     *
     * @return CB_User[]
     */
    function getGroupUsers(
        $gid,
        $offset = 0,
        $limit = -1,
        $order_by = 'tab_cb_user.col_position, tab_cb_user._id',
        $additional_condition = null,
        $app_id = null
    ) {
        if ( ! $gid) {
            return [];
        }

        $user_rows = $this->getGroupUsersId($gid, $offset, $limit, $order_by,
            $additional_condition);

        if ($app_id != null) {
            $user_rows
                = AppAccess::filterUserIdsInternalAccessByAppId($user_rows,
                $app_id);
            $user_rows = array_values($user_rows);
        }
        $users = [];
        $count_loop = count($user_rows);
        for ($i = 0; $i < $count_loop; $i++) {
            $uid = $user_rows[$i];
            $users[$uid] = $this->getUser($uid);
        }

        return $users;
    }

    /**
     * Get users(CB_User) who belong to one or more groups in specified groups.
     *
     * @param string[]    $gids
     * @param int         $offset
     * @param int         $limit
     * @param string|null $order_by
     * @param string|null $additional_condition
     *
     * @return CB_User[]|bool
     */
    function getGroupsUsers(
        $gids,
        $offset = 0,
        $limit = -1,
        $order_by = 'tab_cb_user.col_position, tab_cb_user._id',
        $additional_condition = null
    ) {
        if (count($gids) == 0) {
            return [];
        }

        foreach ($gids as $gid) {
            if ($this->getGroup($gid) === false) {
                return false;
            }
        }

        $query = $this->createGroupUsersSelectQuery($gids, $offset, $limit,
            $order_by, $additional_condition);

        $result = $this->_db->query($query);

        $user_table_info = $this->getUserTable();
        $users = [];
        while ($row = $this->_db->fetch_assoc($result)) {
            $oid = $row['_id'];
            $users[$oid] = $user_table_info->getRow($oid, $row);
        }

        return $users;
    }

    /**
     * @param string[]    $gids
     * @param int         $offset
     * @param int         $limit
     * @param string|null $order_by
     * @param string|null $additional_condition
     *
     * @return string|bool
     */
    private function createGroupUsersSelectQuery(
        $gids,
        $offset,
        $limit,
        $order_by,
        $additional_condition
    ) {
        $condition
            = $this->_db->format('tab_cb_usergrouprelation.col_group IN (@A)',
            [$gids]);
        $condition .= 'AND ' . $this->_getLiveUserCondition();
        if (strlen($additional_condition) > 0) {
            $condition .= " AND $additional_condition";
        }

        if (is_null($order_by)) {
            $order_by = 'tab_cb_user._id';
        }

        $columns = $this->getInstanceColumnsOfCbUser('tab_cb_user');

        $query = sprintf(
            'SELECT %s FROM tab_cb_user ' .
            'LEFT JOIN tab_cb_usergrouprelation ON tab_cb_user._id = tab_cb_usergrouprelation.col_user '
            .
            'WHERE %s ' .
            'GROUP BY tab_cb_user._id ' .
            'ORDER BY %s',
            implode(',', $columns), $condition, $order_by
        );

        $query = $this->_db->select_format($query, $offset, $limit,
            CB_DATABASE_NO_LOCK);

        return $query;
    }


    /**
     * Get users(CB_User) who don't belong to any groups.
     *
     * You may restrict user list by $additional_condition.
     * The condition can refer the CB_User table (by "tab_cb_user." prefix).
     * For example, to retrieve those who have e-mail addresses, give
     *     "tab_cb_user.col_email_address IS NOT NULL"
     * as the additional condition.
     *
     * @param int         $offset
     * @param int         $limit
     * @param string|null $order_by
     * @param string|null $additional_condition
     *
     * @return CB_User[]
     */
    function getNoGroupUsers(
        $offset = 0,
        $limit = -1,
        $order_by = 'tab_cb_user.col_position, tab_cb_user._id',
        $additional_condition = null
    ) {
        $columns = $this->getInstanceColumnsOfCbUser('tab_cb_user');

        $query = $this->createNoGroupUsersSelectQuery($columns, $offset,
            $limit, $order_by, $additional_condition);
        $result = $this->_db->query($query);

        $user_table_info = $this->getUserTable();
        $users = [];
        while ($row = $this->_db->fetch_assoc($result)) {
            $oid = $row['_id'];
            $users[$oid] = $user_table_info->getRow($oid, $row);
        }
        $this->_db->free_result($result);

        return $users;
    }

    /**
     * Get list of ID of users who don't belong to any groups.
     *
     * @param int    $offset
     * @param int    $limit
     * @param string $order_by
     * @param null   $additional_condition
     *
     * @return string[]
     */
    function getNoGroupIdUsers(
        $offset = 0,
        $limit = -1,
        $order_by = 'tab_cb_user.col_position, tab_cb_user._id',
        $additional_condition = null
    ) {
        $columns = ['tab_cb_user._id'];

        $query = $this->createNoGroupUsersSelectQuery($columns, $offset,
            $limit, $order_by, $additional_condition);
        $result = $this->_db->query($query);

        $user_ids = [];
        while ($row = $this->_db->fetch_assoc($result)) {
            $user_ids[] = $row['_id'];
        }
        $this->_db->free_result($result);

        return $user_ids;
    }

    /**
     * 組織の登録者、更新者情報を取得する.
     *
     * @param string $gid 組織ID.
     *
     * @return GRN_UserInfo|bool       FALSE if $uid is not valid; otherwise {@link GRN_UserInfo} object.
     */
    function getGroupCreationInfo($gid)
    {
        $ret = $this->_getInfo('group', $gid);

        return $ret;
    }

    /**
     * 組織の数を取得する
     *
     * @return int      組織数
     *
     */
    public function getGroupCount()
    {
        $groupCount = $this->_core->countGroup();

        return $groupCount;
    }

    /**
     * Get the number of users who don't belong to any groups.
     *
     * @param  string|null $additional_condition
     *
     * @return int
     */
    function getNoGroupUserCount($additional_condition = null)
    {
        $p = ($this->sandbox === SandboxConstants::SANDBOX_MODE ? "_sandbox"
            : "");

        $db = cb_get_master_db();
        $query = "SELECT COUNT(*) AS count FROM tab_cb_user "
                 . " LEFT JOIN tab_cb_usergrouprelation{$p} "
                 . " ON tab_cb_usergrouprelation{$p}.col_user = tab_cb_user._id "
                 . " WHERE (col_group IS NULL) AND ( tab_cb_user.col_deleted IS NULL )";
        if (is_string($additional_condition)
            && 0 < strlen($additional_condition)
        ) {
            $query .= " AND (" . $additional_condition . ")";
        }

        $result = $db->query($query);
        $count = $db->fetch_assoc($result)["count"];
        $db->free_result($result);

        return $count;
    }

    /**
     * 組織に所属するユーザー数を取得する
     *
     * @param  string      $gid 組織ID.
     * @param  string|null $additional_condition
     *
     * @return int         組織に所属するユーザー数
     */
    function getGroupUserCount($gid, $additional_condition = null)
    {
        $group = $this->getGroup($gid);
        if ($group === false) {
            return false;
        }

        $p = ($this->sandbox === SandboxConstants::SANDBOX_MODE ? "_sandbox"
            : "");

        $db = cb_get_master_db();
        $query = "SELECT COUNT(*) AS count FROM tab_cb_usergrouprelation{$p} " .
                 "INNER JOIN tab_cb_user ON tab_cb_usergrouprelation{$p}.col_user = tab_cb_user._id AND ( tab_cb_user.col_deleted IS NULL )"
                 .
                 $db->format(" WHERE (col_group='@S')", [$group->getOID()]);
        if (is_string($additional_condition)
            && 0 < strlen($additional_condition)
        ) {
            $query .= " AND (" . $additional_condition . ")";
        }
        $result = $db->query($query);
        $count = $db->fetch_assoc($result)["count"];
        $db->free_result($result);

        return $count;
    }

    /**
     * 複数組織に所属するユーザー数を取得する
     *
     * @param string[]    $gids 組織ID.
     * @param string|null $additional_condition
     *
     * @return int         組織に所属するユーザー数
     */
    function getGroupsUserCount($gids, $additional_condition = null)
    {
        if (count($gids) == 0) {
            return 0;
        }

        $table = $this->getUserTable();
        $rowset = new CB_RowSet($table);

        $rowset->addJoin($this->_getUserGroupTable(),
            'tab_cb_usergrouprelation.col_user=tab_cb_user._id');

        $tmp_group = [];
        foreach ($gids as $gid) {
            $group = $this->getGroup($gid);
            if ($group === false) {
                return false;
            }

            $tmp_group[] = "'" . $group->getOID() . "'";
        }
        $rowset->addCondition('tab_cb_usergrouprelation.col_group in('
                              . implode(',', $tmp_group) . ') ');
        $rowset->addCondition($this->_getLiveUserCondition());
        if (is_string($additional_condition)
            && 0 < strlen($additional_condition)
        ) {
            $rowset->addCondition($additional_condition);
        }

        $rowset->applyGroupFunctions(['count' => 'COUNT(DISTINCT(tab_cb_user._id))']);
        $rowset->setLock(CB_DATABASE_NO_LOCK);

        $row = $rowset->iterate();

        return $row['count'];
    }

    /**
     * 組織を取得する
     *
     * @param  int $offset
     * @param  int $limit
     *
     * @return CB_Group[]
     */
    public function getGroupList($offset = 0, $limit = -1)
    {
        $groupRowList = $this->_core->getGroupList($offset, $limit);

        return $groupRowList;
    }

    /**
     * @param     $inGroupIdArray
     * @param int $offset
     * @param     $limit
     *
     * @return CB_Group[]
     */
    public function getGroupListByIds($inGroupIdArray, $offset = 0, $limit = -1)
    {
        if ( ! is_array($inGroupIdArray) || count($inGroupIdArray) <= 0) {
            return [];
        }

        $groupRowList = $this->_core->getGroupListByIds($inGroupIdArray,
            $offset, $limit);

        return $groupRowList;
    }

    /**
     * @param string[] $inGroupForeignKeyArray
     * @param bool     $inIsIn
     * @param int      $offset
     * @param int      $limit
     *
     * @return CB_Group[]
     */
    public function getGroupListByForeignKeys(
        $inGroupForeignKeyArray,
        $inIsIn = true,
        $offset = 0,
        $limit = -1
    ) {
        if ( ! is_array($inGroupForeignKeyArray)
             || count($inGroupForeignKeyArray) <= 0
        ) {
            return [];
        }

        $groupRowList
            = $this->_core->getGroupListByForeignKeys($inGroupForeignKeyArray,
            $inIsIn, $offset, $limit);

        return $groupRowList;
    }

    public function getGroupListByNames(
        $inGroupNameArray,
        $inIsAnd = true,
        $offset = 0,
        $limit = -1
    ) {
        if ( ! is_array($inGroupNameArray) || count($inGroupNameArray) <= 0) {
            return [];
        }

        $groupRowList = $this->_core->getGroupListByNames($inGroupNameArray,
            $inIsAnd, $offset, $limit);

        return $groupRowList;
    }

    // Role

    function getRoleInfo($role_id)
    {
        $role = $this->getStaticRole($role_id);
        if ($role === false) {
            return false;
        }
        $role_info = [];
        $role_info["_id"] = $role->getOID();
        $role_info["col_ctime"] = $role->get("ctime");
        $role_info["col_description"] = $role->get("description");
        $role_info["col_foreign_key"] = $role->get("foreign_key");
        $role_info["col_list_index"] = $role->get("list_index");
        $role_info["col_mtime"] = $role->get("mtime")->unix_ts;
        $role_info["col_reserve_blob1"] = $role->get("reserve_blob1");
        $role_info["col_reserve_blob2"] = $role->get("reserve_blob2");
        $role_info["col_reserve_int1"] = $role->get("reserve_int1");
        $role_info["col_reserve_int2"] = $role->get("reserve_int2");
        $role_info["col_reserve_text1"] = $role->get("reserve_text1");
        $role_info["col_reserve_text2"] = $role->get("reserve_text2");
        $role_info["col_slash"] = $role->get("slash");

        return $role_info;
    }

    public function getRoleUsersId(
        $rid,
        $offset = 0,
        $limit = -1,
        $order_by = 'tab_cb_user.col_position, tab_cb_user._id',
        $additional_condition = null
    ) {
        if ( ! $rid) {
            return [];
        }

        $urt = $this->_user_role_table_name;
        $ut = $this->_user_table_name;

        $columns = "{$ut}._id";

        $on = sprintf('%s.col_user = %s._id AND %s', $urt, $ut,
            $this->_getLiveUserCondition());
        $condition = sprintf("%s.col_role='%s'", $urt,
            $this->_db->escape($rid));

        if (is_string($additional_condition)
            && 0 < strlen($additional_condition)
        ) {
            $condition = "$condition AND ($additional_condition)";
        }

        if ($order_by == null) {
            $order_by = "ORDER BY {$ut}.col_position, {$ut}._id";
        } else {
            $order_by = "ORDER BY " . $order_by;
        }

        $query = sprintf('SELECT %s FROM %s INNER JOIN %s ON %s WHERE %s %s',
            $columns, $urt, $ut, $on, $condition, $order_by);
        $query = $this->_db->select_format($query, $offset, $limit,
            CB_DATABASE_NO_LOCK);

        $result = $this->_db->query($query);
        if ($result === false) {
            $this->_db->throwError(['query' => 'query failed: ' . $query]);
        }

        $users_id = [];
        $n = $this->_db->num_rows($result);

        for ($i = 0; $i < $n; $i++) {
            $r = $this->_db->fetch_assoc($result);
            $users_id[] = $r['_id'];
        }
        $this->_db->free_result($result);

        return $users_id;
    }

    /**
     * Ogre標準の、ロール付与ユーザー一覧ルーチン.
     * 付与された順にソートする要件.
     *
     * @param  string $rid
     * @param  int    $offset
     * @param  int    $limit
     *
     * @return array|bool
     */
    function getRoleUsers($rid, $offset = 0, $limit = -1)
    {
        $table = $this->_getUserRoleTable();
        $rowset = new CB_RowSet($table);

        $role = $this->getStaticRole($rid);
        if ($role === false) {
            return false;
        }

        $tmp_role = "'" . $role->getOID() . "'";

        $rowset->addCondition('col_role=' . $tmp_role);
        $on = sprintf('%s.col_user = %s._id AND %s',
            $this->_user_role_table_name, $this->_user_table_name,
            $this->_getLiveUserCondition());
        $rowset->addJoin($this->getUserTable(), $on, CB_DATABASE_INNER_JOIN);
        $rowset->limit($offset, $limit);
        $rowset->setLock(CB_DATABASE_NO_LOCK);

        $users = [];
        while ( ! is_null(($row = $rowset->iterate()))) {
            $user = $row->get('user');
            $users[$user->getOID()] = $user;
        }

        return $users;
    }

    /**
     * @param  array $rids
     * @param  int   $offset
     * @param  int   $limit
     *
     * @return CB_User[]|bool
     */
    function getRolesUsers($rids, $offset = 0, $limit = -1)
    {
        if (count($rids) == 0) {
            return [];
        }

        $table = $this->_getUserRoleTable();
        $rowset = new CB_RowSet($table);

        $tmp_role = [];
        foreach ($rids as $rid) {
            $role = $this->getStaticRole($rid);
            if ($role === false) {
                return false;
            }
            $tmp_role[] = "'" . $role->getOID() . "'";
        }

        $rowset->addCondition('col_role in(' . implode(',', $tmp_role) . ') ');
        $on = sprintf('%s.col_user = %s._id AND %s',
            $this->_user_role_table_name, $this->_user_table_name,
            $this->_getLiveUserCondition());
        $rowset->addJoin($this->getUserTable(), $on, CB_DATABASE_INNER_JOIN);
        $rowset->limit($offset, $limit);
        $rowset->setLock(CB_DATABASE_NO_LOCK);

        $users = [];
        while ( ! is_null(($row = $rowset->iterate()))) {
            $user = $row->get('user');
            $users[$user->getOID()] = $user;
        }

        return $users;
    }

    /**
     * @param  array $rids
     * @param  int   $offset
     * @param  int   $limit
     *
     * @return string[]
     */
    function getRolesUserIds($rids, $offset = 0, $limit = -1)
    {
        if (count($rids) == 0) {
            return [];
        }

        $query
            = <<<"EOT"
SELECT DISTINCT
    tab_cb_userrolerelation.col_user
FROM
    tab_cb_userrolerelation
        INNER JOIN
    tab_cb_user ON tab_cb_userrolerelation.col_user = tab_cb_user._id
        AND (tab_cb_user.col_deleted IS NULL)
WHERE
    (col_role IN (@A))
EOT;

        $query = cb_queryf($this->_db, $query, $rids);
        $query = $this->_db->select_format($query, $offset, $limit);
        $result = $this->_db->query($query);

        $users = [];
        while ($row = $this->_db->fetch_assoc($result)) {
            $uid = $row["col_user"];
            $users[$uid] = $uid;
        }
        $this->_db->free_result($result);

        return $users;
    }

    /**
     * ロールの登録者、更新者情報を取得する.
     *
     * @param int $role_id ロールID
     *
     * @return GRN_RoleInfo|bool       FALSE if $uid is not valid; otherwise {@link GRN_RoleInfo} object.
     */
    function getStaticRoleCreationInfo($role_id)
    {
        $ret = $this->_getInfo('role', $role_id);

        return $ret;
    }

    function getStaticRoleCount()
    {
        $table = $this->getRoleTable();

        return $table->countRows();
    }

    /**
     * ロールの付与されたユーザー数を取得する
     *
     * @param string $rid ロールID.
     *
     * @return int         ロールの付与されたユーザー数
     */
    function getRoleUserCount($rid)
    {
        $table = $this->_getUserRoleTable();
        $rowset = new CB_RowSet($table);

        $role = $this->getStaticRole($rid);
        if ($role === false) {
            return false;
        }

        $tmp_role = "'" . $role->getOID() . "'";

        $on = 'tab_cb_userrolerelation.col_user = tab_cb_user._id AND '
              . $this->_getLiveUserCondition();
        $rowset->addJoin($this->getUserTable(), $on, CB_DATABASE_INNER_JOIN);
        $rowset->addCondition('col_role=' . $tmp_role);
        $rowset->applyGroupFunctions(['count' => 'COUNT(*)']);
        $rowset->setLock(CB_DATABASE_NO_LOCK);

        $row = $rowset->iterate();

        return $row['count'];
    }

    /**
     * ユーザーの優先組織を取得する.
     *
     * @param int  $uid ユーザーID.
     * @param bool $include_deleted
     * @param bool $use_cache
     *
     * @return bool|CB_Group
     */
    function getUserPrimaryGroup(
        $uid,
        $include_deleted = false,
        $use_cache = false
    ) {
        $user = $this->getUser($uid, $include_deleted);
        if ( ! $user) {
            cb_throw_error(E_GRN_USER_NOT_FOUND);
        }
        // Try to find the user's primary group from cache
        if ($use_cache && array_key_exists($uid, self::$_primary_group_cache)) {
            return self::$_primary_group_cache[$uid];
        }

        $primaryGroup = $this->getManyUserPrimaryGroupInfoList([$uid]);
        if (count($primaryGroup) == 0) {
            return false;
        }
        $group = $this->getGroup($primaryGroup[$uid]['_id']);
        self::$_primary_group_cache[$uid] = $group;

        return $group;
    }

    /**
     * @param string $uid
     *
     * @return CB_Group|null
     */
    private function getFirstGroupThatUserBelongTo($uid)
    {
        $db = cb_get_master_db();

        $query_format
            = <<<SQL
SELECT col_group FROM tab_cb_usergrouprelation
WHERE col_user = '@S'
ORDER BY col_group_list
LIMIT 0, 1
SQL;

        $query = $db->format($query_format, [$uid]);
        $result = $db->query($query);
        $row = $db->fetch_assoc($result);
        $db->free_result($result);

        if ( ! $row) {
            return null;
        }

        $gid = $row['col_group'];

        return $this->getGroup($gid);
    }


    /**
     * Before you call this,
     * you should call GRN_Uum::loadAndCacheUserGroups
     *
     * @see CB_UUM::loadAndCacheUserGroups;
     *
     * @param int[] $usersId
     */
    public function loadAndCacheUserPrimaryGroup($usersId)
    {
        $query
            = " SELECT tab_cb_group.*, tab_grn_userinfo.col_user AS userId, tab_cb_group._id AS groupId"
              . " FROM  tab_cb_user"
              . " INNER JOIN tab_grn_userinfo"
              . " ON tab_cb_user._id=tab_grn_userinfo.col_user"
              . " LEFT JOIN tab_cb_usergrouprelation "
              . " ON tab_cb_usergrouprelation._id = tab_grn_userinfo.col_primary_group"
              . " LEFT JOIN tab_cb_group"
              . " ON tab_cb_usergrouprelation.col_group=tab_cb_group._id"
              . " WHERE " . $this->_db->format(" tab_cb_user._id IN (@A)",
                [$usersId])
              . " AND tab_cb_user.col_deleted IS NULL/** GRN_Uum::loadAndCacheUserPrimaryGroup */";
        $result = $this->_db->query($query);


        while ($row = $this->_db->fetch_assoc($result)) {
            $groupId = $row["groupId"];
            $userId = $row["userId"];
            if ( ! is_null($groupId)) {
                self::$_primary_group_cache[$userId] = $this->getGroupTable()
                                                            ->getRow($row["groupId"],
                                                                $row);
                continue;
            }
            $primary_group_array = $this->getManyUserPrimaryGroupInfoList([$userId]);
            $group = $primary_group_array[$userId] ?? false;
            if ($group !== false) {
                $primaryGroup = $this->getGroup($group['_id']);
                self::$_primary_group_cache[$userId] = $primaryGroup;
            }

        }
    }

    /**
     * @param $userIds
     */
    public function loadAndCacheExtendedItems($userIds)
    {
        //Join Both Table
        require_once("grn/file.csp");
        //Get Extension Item and Data Table
        $item_table = $this->getItemTable();
        $item_user_relation_table = $this->getItemUserRelationTable();
        $rowset = new CB_MultiRowSet($item_table);
        $rowset->addJoin($item_user_relation_table,
            'tab_grn_useritem._id = tab_grn_itemuserrelation.col_item'
        );
        $rowset->addJoin($this->getUserTable(),
            'tab_grn_itemuserrelation.col_user=tab_cb_user._id'
        );
        $condition
            = $this->_db->format('tab_cb_user._id IN (@A)/** GRN_UUM::loadAndCacheExtendedItems */',
            [$userIds]);

        $rowset->addCondition($condition);
        $rowset->addOrderColumn('tab_grn_useritem.col_list_index');
        while ( ! is_null($row = $rowset->iterate())) {
            /** @var GRN_UserItem $item */
            $item = $row['grn_useritem'];
            /** @var GRN_ItemUserRelation $data */
            $data = $row['grn_itemuserrelation'];
            /** @var CB_User $user */
            $user = $row["cb_user"];
            self::$_extended_item_cache[$user->getOID()][$item->get("id")]
                = $this->_getExtensionItemData(null, $item, $data);
        }

        foreach ($userIds as $userId) {
            if (isset(self::$_extended_item_cache[$userId])) {
                continue;
            }
            self::$_extended_item_cache[$userId] = [];
        }
    }

    /**
     * ユーザーの画像ファイルを取得する.
     *
     * @param string $uid ユーザーID.
     *
     * @return GRN_File|null
     */
    function getUserImage($uid)
    {
        if (array_key_exists($uid, self::$_user_image_cache)) {
            return self::$_user_image_cache[$uid];
        }

        $info = $this->_getInfo('user', $uid, true, true);

        if ( ! $info) {
            cb_throw_error(E_GRN_USER_NOT_FOUND);
        }


        require_once 'grn/file.csp';
        if (($gfile = $info->get('image'))) {
            return $gfile;
        }
        {
            $___ret = null;

            return $___ret;
        }
    }

    /**
     * ユーザーの役職を取得する.
     *
     * @param string $uid ユーザーID.
     *
     * @return string or NULL.
     */
    function getUserPost($uid)
    {
        $info = $this->_getInfo('user', $uid, false, true);
        if ( ! $info) {
            cb_throw_error(E_GRN_USER_NOT_FOUND);
        }

        return $info->get('post');
    }

    /**
     * 在席情報を取得する
     *
     * @param int $user_id ユーザーID
     *
     * @return array|null nullのときは失敗、それ以外は在席情報
     */
    function getAttendee($user_id)
    {
        require_once('presence/logic.csp');
        $presence_logic = GRN_Presence_Logic::getInstance();
        $presence_info = $presence_logic->getPresence($user_id);

        if ( ! $presence_info['status'] || ! $presence_info['memo']) {
            return null;
        }

        $attendee['value'] = $presence_info['info'];
        $attendee['timestamp'] = $presence_info['mtime'];

        return $attendee;
    }

    /**
     * パスワード有効期限を取得する
     *
     * @param  string $uid
     *
     * @return string|null
     */
    function getPasswordExpired($uid)
    {
        if (defined('ON_FOREST')) {
            return null;
        }

        $info = $this->_getInfo('user', $uid);
        if ( ! $info) {
            cb_throw_error(E_GRN_USER_NOT_FOUND);
        }

        return $info->get('password_expired');
    }

    // User

    /**
     * ユーザーの画像ファイルを設定する.
     *
     * @param string     $id    ユーザーID.
     * @param array|NULL $image アップロードファイル情報.
     *
     * @return object {@link GRN_File}.
     */
    function setUserImage($id, $image)
    {
        $file = null;
        $this->deleteUserThumbnail($id);
        if ($image) {
            require_once 'grn/file.csp';
            $file = grn_create_simple_file($this->getLoginUser(),
                $image,
                'User\'s image file',
                true);
            $this->setUserThumbnail($id, $image['tmp_name']);
        }

        $info = $this->_getInfo('user', $id);
        if ( ! $info) {
            cb_throw_error(E_GRN_USER_NOT_FOUND);
        }

        $info->onUpdate($this->getLoginUser());
        /** @var CB_ServerFile $oldfile */
        $oldfile = $info->get('image');
        if ($oldfile) {
            $oldfile->delete();
        }
        $info->set('image', $file);

        return $file;
    }

    /**
     * ユーザーの役職を設定する.
     *
     * @param string      $id   ユーザーID.
     * @param string|NULL $post 役職.
     * @param bool        $sync
     */
    function setUserPost($id, $post, $sync = false)
    {
        if ( ! $sync && 100 < mb_strlen($post)) {
            cb_throw_error(E_GRN_TOO_LONG_PROPERTY, null,
                ['property' => $post]);
        }

        $info = $this->_getInfo('user', $id);
        if ( ! $info) {
            cb_throw_error(E_GRN_USER_NOT_FOUND);
        }
        $info->onUpdate($this->getLoginUser());
        $info->set('post', $post);
        if ($sync) {
            $info->updateNow();
        }
    }

    /**
     * パスワード有効期限を設定する
     *
     * @param string $id      User ID
     * @param string $expired パスワード有効期限
     */
    function setPasswordExpired($id, $expired)
    {
        $info = $this->_getInfo('user', $id);
        if ( ! $info) {
            cb_throw_error(E_GRN_USER_NOT_FOUND);
        }
        $user = false;
        global $G_state_set;
        if ( ! $G_state_set->get('command_line')) {
            $user = $this->getLoginUser();
            if ( ! $user) {
                $user = $info->get('user');
            }
        }

        $info->onUpdate($user);
        $info->set('password_expired', $expired);
    }

    /**
     * @param array  $properties
     * @param string $id
     * @param bool   $sync
     *
     * @return CB_User
     */
    function addUser($properties, $id = null, $sync = false)
    {
        require_once('fw/string_util.csp');
        $display_name = null;
        if (isset($properties['display_name'])) {
            $display_name = $properties['display_name'];
        }
        $foreign_key = null;
        if (isset($properties['foreign_key'])) {
            $foreign_key = $properties['foreign_key'];
        }
        $display_name = $sync ? cb_trim($display_name)
            : cb_trim_check($display_name, E_GRN_MISSING_MANDATORY);
        $foreign_key = $sync ? cb_trim($foreign_key)
            : cb_trim_check($foreign_key, E_GRN_MISSING_MANDATORY);

        $properties['display_name'] = $display_name;
        $properties['foreign_key'] = $foreign_key;
        $properties['deleted'] = null;

        if ( ! $sync && 100 < mb_strlen($properties['display_name'])) {
            cb_throw_error(E_GRN_TOO_LONG_PROPERTY, null,
                ['property' => $properties['display_name']]);
        }
        if ( ! $sync && 100 < mb_strlen($properties['foreign_key'])) {
            cb_throw_error(E_GRN_TOO_LONG_PROPERTY, null,
                ['property' => $properties['foreign_key']]);
        }

        $this->validateProperties($id, $properties, $sync);

        if ($this->getUserByForeignKey($foreign_key) !== false) {
            cb_throw_error(E_GRN_COLLISION_USER_KEY);
        }

        if (array_key_exists('valid', $properties)) {
            $valid = null;
            $this->getValidProperty(null, $properties['valid'], $valid);
            $properties['valid'] = $valid;
        }
        if ( ! isset($properties['display_name_language'])) {
            $properties['display_name_language']
                = CB_LanguageManager::getLanguageId(CB_LocaleManager::getDefaultLanguage());
        }
        if ( ! isset($properties['timezone'])) {
            $properties['timezone'] = CB_I18N::getInstance()
                                             ->getDefaultTimezone();
        }

        $user = parent::addUser($properties, $id);
        if ($user) {
            $uid = $user->getOID();
            $user_info = [];
            $user_info['_id'] = $uid;
            $user_info['col_display_name'] = $user->get('display_name');
            $user_info['col_foreign_key'] = $user->get('foreign_key');
            $this->_changeInfo('user', 'create', $uid, $user_info);
        }

        //Add SSO User
        if ($user) {
            require_once('grn/sso.csp');
            $sso_service = GRN_SSO_Service::getInstance();
            $sso_user = $sso_service->addSSOUser($user, $properties);
            $sso_user->registerNow();
        }

        if ( ! $sync && ! $this->checkLincense()) {
            cb_throw_error(E_GRN_LICENSE_DENY_USER_ADD);
        }

        // Set profile data as TRUE: grn.bulletin::notification_is_last_pulled
        if ($user) {
            require_once('bulletin/application.csp');
            $bulletin_app = new GRN_Bulletin();
            $bulletin_app->setTrueToLastPulledNotificationAttribute($user);
        }

        return $user;
    }

    /**
     * @param string $id
     * @param array  $properties
     * @param bool   $sync
     */
    public function validateProperties($id, &$properties, $sync = false)
    {
        if ( ! $sync && isset($properties['sort_key'])
             && 100 < mb_strlen($properties['sort_key'])
        ) {
            cb_throw_error(E_GRN_TOO_LONG_PROPERTY, null,
                ['property' => $properties['sort_key']]);
        }

        if ( ! $sync && isset($properties['email_address'])
             && 100 < mb_strlen($properties['email_address'])
        ) {
            cb_throw_error(E_GRN_TOO_LONG_PROPERTY, null,
                ['property' => $properties['email_address']]);
        }

        if (isset($properties['position'])
            && strlen(cb_trim($properties['position'])) === 0
        ) {
            $properties['position'] = GRN_UUM_USER_MAX_POSITION;
        }
        if ( ! $sync && $id === GRN_UUM_ADMINISTRATION_USER) {
            $properties['position'] = 0;
        }

        if (isset($properties['display_name_language'])) {
            $language_id
                = CB_LanguageManager::getLanguageId($properties['display_name_language']);
            if (is_null($language_id)) {
                $this->throwDisplayNameLanguageWasntFound();
            }
            $properties['display_name_language'] = $language_id;
        }
        if (isset($properties['timezone'])) {
            if ( ! CB_I18N::isAvailableTimezone($properties['timezone'])) {
                cb_throw_error(E_COMMON_MISSING_TIMEZONE, null, null,
                    ['timezone' => $properties['timezone']]);
            }
        }
    }

    /**
     * @param int    $offset
     * @param int    $limit
     * @param string $order_by
     * @param string $additional_condition
     * @param bool   $include_deleted
     *
     * @return CB_User[]
     */
    function getUsers(
        $offset = 0,
        $limit = -1,
        $order_by = 'col_position, _id',
        $additional_condition = null,
        $include_deleted = false
    ) {
        $rowset = new CB_RowSet($this->getUserTable());
        if ( ! $include_deleted) {
            $rowset->addCondition($this->_getLiveUserCondition());
        }
        if (0 < strlen($additional_condition)) {
            $rowset->addCondition($additional_condition);
        }
        $rowset->addOrderColumn($order_by);
        $rowset->limit($offset, $limit);
        $rowset->setLock(CB_DATABASE_NO_LOCK);

        $users = [];
        while ( ! is_null(($row = $rowset->iterate()))) {
            $users[$row->getOID()] = $row;

        }

        return $users;
    }

    /**
     * @param array $userIds
     *
     * @return \CB_User[]
     */
    public function getUsersById(array $userIds)
    {
        $db = cb_get_master_db();
        $condition = $db->format(" _id IN (@A)", [$userIds]);

        return $this->getUsers(0, -1, 'col_position, _id', $condition);
    }

    /**
     * @param  int         $offset
     * @param  int         $limit
     * @param  string      $order_by
     * @param  string|null $additional_condition
     *
     * @return CB_Group[]
     */
    public function getGroups(
        $offset = 0,
        $limit = -1,
        $order_by = 'col_list_index, _id',
        $additional_condition = null
    ) {
        $rowset = new CB_RowSet($this->getGroupTable());
        if (strlen($additional_condition) > 0) {
            $rowset->addCondition($additional_condition);
        }
        $rowset->addOrderColumn($order_by);
        $rowset->limit($offset, $limit);
        $rowset->setLock(CB_DATABASE_NO_LOCK);

        $groups = [];
        while ( ! is_null(($row = $rowset->iterate()))) {
            $groups[$row->getOID()] = $row;
        }

        return $groups;
    }

    /**
     * @param int         $offset
     * @param int         $limit
     * @param string      $order_by
     * @param string|null $additional_condition
     *
     * @return CB_Role[]
     */
    public function getStaticRoles(
        $offset = 0,
        $limit = -1,
        $order_by = 'col_list_index, col_slash, _id',
        $additional_condition = null
    ) {
        $rowset = new CB_RowSet($this->getRoleTable());
        if (strlen($additional_condition) > 0) {
            $rowset->addCondition($additional_condition);
        }
        $rowset->addOrderColumn($order_by);
        $rowset->limit($offset, $limit);
        $rowset->setLock(CB_DATABASE_NO_LOCK);

        $roles = [];
        while ( ! is_null(($row = $rowset->iterate()))) {
            $roles[$row->getOID()] = $row;
        }

        return $roles;
    }

    public function getStaticRoleInfoList(
        $rids = null,
        $columns = null,
        $offset = 0,
        $limit = -1,
        $order_by = 'col_list_index, col_slash, _id'
    ) {
        if ( ! (is_array($rids) && count($rids) > 0)) {
            return [];
        }

        $rt = $this->_role_table_name;
        if (is_null($columns)) {
            $columns = [];
            $columns[] = "col_foreign_key";
            $columns[] = "col_description";
        }
        $columns[] = "_id";
        $columns = implode(",", $columns);

        foreach ($rids as $key => $value) {
            $rids[$key] = cb_queryf($this->_db, "'@S'", $value);
        }
        $condition = sprintf("WHERE _id IN ( %s )", implode(',', $rids));

        if ($order_by) {
            $order_by = "ORDER BY " . $order_by;
        }

        $query = sprintf('SELECT %s FROM %s %s %s',
            $columns,
            $rt,
            $condition,
            $order_by);
        $query = $this->_db->select_format($query, $offset, $limit,
            CB_DATABASE_NO_LOCK);
        $result = $this->_db->query($query);
        if ($result === false) {
            $this->_db->throwError(['query' => "query failed: {$query}"]);
        }

        $rows = [];
        while ($row = $this->_db->fetch_assoc($result)) {
            $rows[$row['_id']] = $row;
        }

        return $rows;
    }

    function changePassword(
        $uid,
        $oldPassword,
        $newPassword,
        $force = false,
        $reset_expired = false
    ) {
        $user_info = $this->getUserInfo($uid);
        if ($user_info) {
            $this->_changeInfo('password', 'update', $uid, $user_info);
        }

        $user = $this->getUser($uid);
        require_once('fw/passwd_util.csp');
        $same_password = CB_PasswordUtil::validatePassword($newPassword,
            $user->get('salt'), $user->get('password'));

        if ( ! parent::changePassword($uid, $oldPassword, $newPassword,
            $force)
        ) {
            return false;
        }

        //modify SSO User
        if ($user) {
            require_once('grn/sso.csp');
            $properties = [];
            $properties['password'] = $newPassword;
            $sso_service = GRN_SSO_Service::getInstance();
            $sso_user = $sso_service->modifySSOUser($user,
                $properties);
            $sso_user->updateNow();

            //Delete Garoon Old Version Password
            $condition = '_id = ' . "'" . $this->_db->escape($uid) . "'";
            $query
                = sprintf('UPDATE %s SET col_reserve_blob1=NULL WHERE %s',
                $this->_user_table_name,
                $condition);
            $result = $this->_db->query($query);
            if ($result === false) {
                $this->_db->throwError(['query' => 'query failed: ' . $query]);
            }

            if ( ! $same_password || $reset_expired) {
                // Update Password Expired
                $expired = null;
                require_once('grn/system_logic.csp');
                $system = GRN_System::getInstance();

                $interval = $system->getPasswordExpirationInterval();
                if ($interval > 0) {
                    $expired = new CB_TimeStamp();
                    $expired->unix_ts = time() + ($interval * 60 * 60 * 24);

                }
                $this->setPasswordExpired($uid, $expired);
            }
        }

        return true;
    }

    function setHashedPassword($uid, $password_salt, $password_hashed)
    {
        $user_info = $this->getUserInfo($uid);
        if ($user_info) {
            $this->_changeInfo('password', 'update', $uid, $user_info);
        }

        if ( ! parent::setHashedPassword($uid, $password_salt,
            $password_hashed)
        ) {
            return false;
        }

        $user = $this->getUser($uid);
        if ($user) {
            // Update Password Expired
            $expired = null;
            require_once('grn/system_logic.csp');
            $system = GRN_System::getInstance();

            $interval = $system->getPasswordExpirationInterval();
            if ($interval > 0) {
                $expired = new CB_TimeStamp();
                $expired->unix_ts = time() + ($interval * 60 * 60 * 24);
            }
            $this->setPasswordExpired($uid, $expired);
        }

        return true;
    }

    /**
     * パスワード有効期限をリセットする
     */
    function resetPasswordExpired()
    {
        $expired = null;
        require_once('grn/system_logic.csp');
        $system = GRN_System::getInstance();

        $interval = $system->getPasswordExpirationInterval();
        if ($interval > 0) {
            $expired = new CB_TimeStamp();
            $expired->unix_ts = time() + ($interval * 60 * 60 * 24);

            $query = sprintf('UPDATE %s SET col_password_expired=%u',
                $this->_user_info_table_name,
                $expired->unix_ts);
        } else {
            $query = sprintf('UPDATE %s SET col_password_expired=NULL',
                $this->_user_info_table_name);
        }

        $result = $this->_db->query($query);
        if ($result === false) {
            $this->_db->throwError(['query' => 'query failed: ' . $query]);
        }

    }

    /**
     * 優先する組織は 'primary_group' をキー、値を GID (or NULL) で指定
     *
     * @param  string   $uid
     * @param  string[] $properties
     * @param  bool     $license_check
     * @param  bool     $sync
     *
     * @return bool
     */
    function setUserProperties(
        $uid,
        $properties,
        $license_check = true,
        $sync = false
    ) {
        $user_info = $this->getUserInfo($uid);
        if (false === $user_info) {
            cb_throw_error(E_GRN_USER_NOT_FOUND);
        }
        require_once('fw/string_util.csp');
        if (array_key_exists('display_name', $properties)) {
            $properties['display_name'] = $sync
                ? cb_trim($properties['display_name'])
                : cb_trim_check($properties['display_name'],
                    E_GRN_MISSING_MANDATORY);
        }

        if (array_key_exists('foreign_key', $properties)) {
            $properties['foreign_key'] = $sync
                ? cb_trim($properties['foreign_key'])
                : cb_trim_check($properties['foreign_key'],
                    E_GRN_MISSING_MANDATORY);
            $curr_key = $user_info['col_foreign_key'];
            if ($curr_key !== $properties['foreign_key']) {
                if ($this->getUserByForeignKey($properties['foreign_key'])
                    !== false
                ) {
                    cb_throw_error(E_GRN_COLLISION_USER_KEY);
                }
            }
        }
        if ( ! $sync && isset($properties['display_name'])
             && 100 < mb_strlen($properties['display_name'])
        ) {
            cb_throw_error(E_GRN_TOO_LONG_PROPERTY, null,
                ['property' => $properties['display_name']]);
        }
        if ( ! $sync && isset($properties['foreign_key'])
             && 100 < mb_strlen($properties['foreign_key'])
        ) {
            cb_throw_error(E_GRN_TOO_LONG_PROPERTY, null,
                ['property' => $properties['foreign_key']]);
        }

        $this->validateProperties($uid, $properties, $sync);

        $primary_group = false;

        if (array_key_exists('primary_group', $properties)) {
            $primary_group = $properties['primary_group'];
            unset($properties['primary_group']);
        }

        if (array_key_exists('valid', $properties)) {
            $valid = null;
            $this->getValidProperty($uid, $properties['valid'], $valid);
            $properties['valid'] = $valid;
        }

        if (parent::setUserProperties($uid, $properties)) {
            if ($primary_group !== false) {
                $this->setUserPrimaryGroup($uid, $primary_group);
            }

            $this->_changeInfo('user', 'update', $uid, $user_info);

            return true;
        }

        if ($license_check && ! $this->checkLincense()) {
            cb_throw_error(E_GRN_LICENSE_DENY_USER_ACTIVATE);
        }

        return false;
    }


    private function throwDisplayNameLanguageWasntFound()
    {
        require_once("fw/i18n/locale.csp");
        cb_throw_error(E_GRN_DISPLAY_NAME_LANGUAGE_WAS_NOT_FOUND, null,
            [
                'languages' => implode(", ",
                    CB_LanguageManager::getAvailableLanguages())
            ],
            [
                'languages' => implode(", ",
                    CB_LanguageManager::getAvailableLanguages())
            ]);
    }

    function deleteUserFromName($name)
    {
        $info = $this->getUsersInfo([$name],
            ['_id', 'col_foreign_key', 'col_deleted'], 0, -1, null, null,
            'col_foreign_key', true);

        if ( ! array_key_exists($name, $info)) {
            return E_GRN_USER_NOT_FOUND;
        }

        $uid = $info[$name]['_id'];

        $user_info = [
            'login_name' => $name,
            'uid'        => $uid
        ];

        if ($uid == GRN_UUM_ADMINISTRATION_USER) {
            return E_GRN_DONT_DELETE_ADMINISTRATOR;
        }

        if (is_null($info[$name]['col_deleted'])) {
            return GRN_UUM_USER_NOT_DELETED;
        }

        require_once('fw/plugin.csp');
        $loader = new CB_PluginLoader('grn.common.user.delete');

        foreach ($loader->loadHooks() as $hook) {
            call_user_func($hook, $user_info);
        }

        return $this->deleteActualUserData($uid);
    }

    function deleteUserPermanently($uid)
    {
        if ($uid == GRN_UUM_ADMINISTRATION_USER) {
            return E_GRN_DONT_DELETE_ADMINISTRATOR;
        }

        $user = $this->getUser($uid, true);

        if ( ! $user) {
            return E_GRN_USER_NOT_FOUND;
        }

        if ( ! $user->get('deleted')) {
            return E_GRN_USER_NOT_DELETED;
        }

        require_once('fw/plugin.csp');
        $loader = new CB_PluginLoader('grn.common.user.delete');

        $user_info = [
            'login_name' => $user->get('foreign_key'),
            'uid'        => $uid
        ];

        foreach ($loader->loadHooks() as $hook) {
            call_user_func($hook, $user_info);
        }

        return $this->deleteActualUserData($uid);
    }

    function deleteActualUserData($uid)
    {
        if ($uid == GRN_UUM_ADMINISTRATION_USER) {
            return E_GRN_DONT_DELETE_ADMINISTRATOR;
        }

        $user = $this->getUser($uid, true);

        if ( ! $user) {
            return E_GRN_USER_NOT_FOUND;
        }

        $oldfile = $this->getUserImage($uid);
        if ($oldfile) {
            $oldfile->delete();
        }

        $useritems = $this->listUserItems($user);
        $keys = array_keys($useritems);
        foreach ($keys as $key) {
            $useritem = $useritems[$key];
            $oldfile = $useritem->get('file');
            if ($oldfile) {
                $oldfile->delete();
            }
        }

        // GRREQ-380
        if ( ! defined("ON_FOREST")) {
            $this->deleteUserThumbnail($uid);
        }


        //Delete SSO User
        if ($user) {
            require_once('grn/sso.csp');
            $sso_service = GRN_SSO_Service::getInstance();
            $sso_service->deleteSSOUser($user);
        }

        $user_info = $this->getUserInfo($uid, null, 0, -1, null, true);
        if ($user_info) {
            $this->_changeInfo('user', 'delete', $uid, $user_info);
        }

        return parent::deleteActualUserData($uid);
    }

    function removeUser($uid)
    {
        if ($uid == GRN_UUM_ADMINISTRATION_USER) {
            return false;
        }

        $user = $this->getUser($uid);

        if ( ! $user || $user->get('deleted') == 1) {
            return false;
        }

        return parent::removeUser($uid);
    }

    function restoreUser($uid)
    {
        $user = $this->getUser($uid, true);

        if ( ! $user) {
            return E_GRN_USER_NOT_FOUND;
        }

        if ( ! $user->get('deleted')) {
            return E_GRN_USER_NOT_DELETED;
        }

        return parent::restoreUser($uid);
    }

    // Group

    public function addGroup(
        $inLocalNameArray,
        $inForeignKey,
        $inMemo,
        $inParentOrgId = null
    ) {
        //--------------  default group modify -------------
        $properties = [
            'name'        => $inLocalNameArray[CB_I18N_DEFUALT_LANGUAGE_CODE]
            ,
            'foreign_key' => $inForeignKey
            ,
            'description' => $inMemo
        ];

        $group = $this->addGroupDefaultOnly($properties, $inParentOrgId);

        $this->execInspection('group', 'create', [
            'gid'         => $group->getOID()
            ,
            'name'        => $inLocalNameArray[CB_I18N_DEFUALT_LANGUAGE_CODE]
            ,
            'foreign_key' => $inForeignKey
            ,
            'memo'        => $inMemo
        ]);

        //--------------  group local name add -------------
        $this->addGroupLocals($group->getOID(), $inLocalNameArray);

        return $group;
    }

    /**
     * @param array $properties
     * @param bool  $sync
     *
     * @return array
     */
    public function validateAddGroupDefaultOnly(
        array $properties,
        $sync = false
    ) {
        require_once('fw/string_util.csp');
        $name = null;
        if (isset($properties['name'])) {
            $name = $sync ? cb_trim($properties['name'])
                : cb_trim_check($properties['name'], E_GRN_MISSING_MANDATORY);
        }
        $foreign_key = null;
        if (isset($properties['name'])) {
            $foreign_key = $sync
                ? cb_trim($properties['foreign_key'])
                : cb_trim_check($properties['foreign_key'],
                    E_GRN_MISSING_MANDATORY);
        }

        $properties['name'] = $name;
        $properties['foreign_key'] = $foreign_key;

        if ($this->getGroupInfoByForeignKey($foreign_key) !== false) {
            cb_throw_error(E_GRN_COLLISION_GROUP_KEY);
        }

        return $properties;
    }

    /**
     * @param string[] $properties
     * @param null     $parentId
     * @param null     $id
     * @param bool     $sync
     *
     * @return CB_Group
     */
    public function addGroupDefaultOnly(
        $properties,
        $parentId = null,
        $id = null,
        $sync = false
    ) {
        // set modification timestamp
        if ($parentId) {
            $this->setGroupProperties($parentId, []);
        }
        $properties = $this->validateAddGroupDefaultOnly($properties, $sync);

        $group = parent::addGroupDefaultOnly($properties, $parentId, $id,
            $sync);
        if ($group) {
            $group_info = [
                '_id'             => $group->getOID(),
                'col_name'        => $group->get('name'),
                'col_foreign_key' => $group->get('foreign_key')
            ];
            $this->_changeInfo('group', 'create', $group->getOID(),
                $group_info);

            require_once('grn/nested_set_model.csp');
            $nested_group = GRN_NestedGroup::getInstance();
            $nested_group->add($parentId, $group->getOID());
        }

        return $group;
    }

    /**
     * @param $inOrgId
     * @param $inLocalNameArray
     * @param $inForeignKey
     * @param $inMemo
     *
     * @return bool
     */
    public function modifyGroup(
        $inOrgId,
        $inLocalNameArray,
        $inForeignKey,
        $inMemo
    ) {
        //--------------  default group modify -------------
        $properties = [
            'name'        => $inLocalNameArray[CB_I18N_DEFUALT_LANGUAGE_CODE]
            ,
            'foreign_key' => $inForeignKey
            ,
            'description' => $inMemo
        ];

        $this->setGroupProperties($inOrgId, $properties);

        $this->execInspection('group', 'modify', [
            'gid'         => $inOrgId
            ,
            'name'        => $inLocalNameArray[CB_I18N_DEFUALT_LANGUAGE_CODE]
            ,
            'foreign_key' => $inForeignKey
            ,
            'memo'        => $inMemo
        ]);

        //--------------  group local name modify -------------
        $this->modifyGroupLocals($inOrgId, $inLocalNameArray);

        return true;
    }

    function setGroupProperties($gid, $properties, $sync = false)
    {
        $group_info = $this->getGroupInfo($gid);
        if ($group_info === false) {
            cb_throw_error(E_GRN_GROUP_NOT_FOUND);
        }

        require_once('fw/string_util.csp');

        if (array_key_exists('name', $properties)) {
            $properties['name'] = $sync ? cb_trim($properties['name'])
                : cb_trim_check($properties['name'], E_GRN_MISSING_MANDATORY);
        }

        if (array_key_exists('foreign_key', $properties)) {
            $properties['foreign_key'] = $sync
                ? cb_trim($properties['foreign_key'])
                : cb_trim_check($properties['foreign_key'],
                    E_GRN_MISSING_MANDATORY);
            $curr_key = $group_info['col_foreign_key'];
            if ($curr_key !== $properties['foreign_key']) {
                if ($this->getGroupInfoByForeignKey($properties['foreign_key'])
                    !== false
                ) {
                    cb_throw_error(E_GRN_COLLISION_GROUP_KEY);
                }
            }
        }

        if (parent::setGroupProperties($gid, $properties)) {
            $group_info = [
                '_id'             => $gid,
                'col_name'        => $group_info['col_name'],
                'col_foreign_key' => $group_info['col_foreign_key']
            ];

            $this->_changeInfo('group', 'update', $gid, $group_info);

            return true;
        }

        return false;
    }

    /**
     * @param string $gid
     * @param string $parentId
     * @param bool   $sync
     * @param bool   $updateMtime
     *
     * @return bool
     */
    function setParentGroup($gid, $parentId, $sync = false, $updateMtime = true)
    {
        $src_parentId = null;
        if ($gid) {
            $src_parentId = $this->getParentOfGroup($gid);
        }

        $result = parent::setParentGroup($gid, $parentId, $sync, $updateMtime);
        if ($result) {
            require_once('grn/nested_set_model.csp');
            $nested_group = GRN_NestedGroup::getInstance();
            $nested_group->move($parentId, $gid);
            if ($src_parentId != $parentId) {
                if ($updateMtime) {
                    // set modification timestamp
                    if ($src_parentId) {
                        $this->setGroupProperties($src_parentId, []);
                    }
                    if ($parentId) {
                        $this->setGroupProperties($parentId, []);
                    }
                }
            }
        }

        return $result;
    }

    function setGroupOrder($parentId, $order_list)
    {
        // set modification timestamp
        if ($parentId) {
            $this->setGroupProperties($parentId, []);
        }

        foreach ($order_list as $key => $value) {
            if ( ! $this->setGroupProperties($key, $value)) {
                continue;
            }

            $order_list[$key] = $value['list_index'];
        }

        return true;
    }

    /**
     * Remove Group By Group ID
     *
     * @param int $gid
     *
     * @return bool
     */
    function removeGroup($gid)
    {
        // remove all descendants
        $children = $this->getChildGroupsInfo($gid);
        foreach ($children as $child) {
            $this->removeGroup($child['_id']);
        }

        // remove myself
        /** @var GRN_GroupInfo $info */
        $info = $this->_getInfo('group', $gid);
        if ($info) {
            require_once('grn/nested_set_model.csp');
            $nested_group = GRN_NestedGroup::getInstance();
            $nested_group->remove($gid);
            $info->onDelete();
        }

        // remove workflow path condition
        require_once('workflow/path_condition.csp');
        $path_condition_logic = GRN_Workflow_PathConditions::getInstance();
        $path_condition_logic->removeListByGroupId($gid);

        return parent::removeGroup($gid);
    }

    /**
     * Get all child group ids by the given group id.
     *
     * @param  array  $gids
     * @param  string $gid OID of the primary group.
     */
    function getChildGroupIdsAll(& $gids, $gid)
    {
        cb_trim_check($gid, E_GRN_GROUP_NOT_FOUND);

        if ($this->hasChild($gid)) {
            $groupsInfo = $this->getChildGroupsInfo($gid);
            foreach ($groupsInfo as $key => $value) {
                array_push($gids, $key);
                $this->getChildGroupIdsAll($gids, $key);
            }
        }
    }

    /**
     * @param  string      $uid
     * @param  string|null $gid OID of the primary group, or NULL to unset.
     * @param  bool        $updateMtime
     * @param  bool        $sync
     *
     * @return bool
     */
    function setUserPrimaryGroup($uid, $gid, $updateMtime = true, $sync = false)
    {
        $info = $this->_getInfo('user', $uid);
        if ( ! $info) {
            cb_throw_error(E_GRN_USER_NOT_FOUND);
        }

        if (is_null($gid)) {
            if ($updateMtime) {
                $info->onUpdate($this->getLoginUser());
            }
            $info->set('primary_group', null);

            return true;
        }

        $relation = $this->getUserGroupRelation($uid, $gid);
        if ($relation === false) {
            cb_throw_error(E_GRN_INVALID_PRIMARY_GROUP);
        }

        if ($updateMtime) {
            $info->onUpdate($this->getLoginUser());
        }
        $info->set('primary_group', $relation);
        if ($sync) {
            $info->updateNow();
        }

        return true;
    }

    /**
     * @param string $uid User ID
     * @param string $gid Group ID
     *
     * @return CB_UserGroupRelation  return FALSE if not exist
     */
    public function getUserGroupRelation($uid, $gid)
    {
        $db = $this->_dbconn;
        $uid = "'" . $db->escape($uid) . "'";
        $gid = "'" . $db->escape($gid) . "'";

        // get relation
        $rowset = new CB_RowSet($this->_getUserGroupTable());
        $rowset->addCondition("col_user=${uid} AND col_group=${gid}");
        $relation = $rowset->iterate();
        $rowset->destroy();

        if (is_null($relation)) {
            return false;
        }

        return $relation;
    }

    function setUserGroups($uid, $gids, $updateMtime = true)
    {
        if ($updateMtime) {
            // set modification timestamp
            if ($this->setUserProperties($uid, [])) {
                $ogids = $this->getUserGroupsInfo($uid);
                $add_array = [];
                $diff_array = [];
                if (is_array($ogids) && is_array($gids)) {
                    $add_array = array_merge(array_keys($ogids), $gids);
                    $diff_array = array_intersect(array_keys($ogids), $gids);
                }
                $group_ids = array_diff($add_array, $diff_array);
                foreach ($group_ids as $group_id) {
                    $this->setGroupProperties($group_id, []);
                }
            }
        }

        return parent::setUserGroups($uid, $gids);
    }

    function setGroupUsers($gid, $uids, $updateMtime = true)
    {
        if ($updateMtime) {
            // set modification timestamp
            if ($this->setGroupProperties($gid, [])) {
                $ouids = $this->getGroupUsersInfo($gid);
                $add_array = [];
                $diff_array = [];
                if (is_array($ouids) && is_array($uids)) {
                    $add_array = array_merge(array_keys($ouids), $uids);
                    $diff_array = array_intersect(array_keys($ouids), $uids);
                }
                $user_ids = array_diff($add_array, $diff_array);
                foreach ($user_ids as $user_id) {
                    $this->setUserProperties($user_id, []);
                }
            }
        }

        return parent::setGroupUsers($gid, $uids);
    }


    /**
     * @param string   $uid
     * @param string[] $role_ids
     *
     * @return bool
     */
    function setUserRoles($uid, $role_ids)
    {
        $role_ids = $this->addAdministratorRoleIfUserIsAdministrator($uid,
            $role_ids);

        return parent::setUserRoles($uid, $role_ids);
    }

    /**
     * @param $uid
     * @param $role_ids
     *
     * @return array
     */
    public function addAdministratorRoleIfUserIsAdministrator($uid, $role_ids)
    {
        if (($uid == GRN_UUM_ADMINISTRATION_USER)
            && ( ! in_array(GRN_UUM_ADMINISTRATION_ROLE, $role_ids))
        ) {
            $role_ids[] = GRN_UUM_ADMINISTRATION_ROLE;
        }

        return $role_ids;
    }

    function setRoleUsers($role_id, $uids, $remove = false)
    {
        return parent::setRoleUsers($role_id, $uids, $remove);
    }

    /**
     * @param array  $properties
     * @param string $id
     * @param bool   $sync
     *
     * @return CB_Role
     */
    function addStaticRole($properties, $id = null, $sync = false)
    {
        require_once('fw/string_util.csp');

        $foreign_key = $sync
            ? cb_trim($properties['foreign_key'])
            : cb_trim_check(@$properties['foreign_key'],
                E_GRN_MISSING_MANDATORY);
        $properties['foreign_key'] = $foreign_key;

        if ($this->getStaticRoleByForeignKey($foreign_key) !== false) {
            cb_throw_error(E_GRN_COLLISION_ROLE_KEY);
        }

        $role = parent::addStaticRole($properties, $id);
        if ($role) {
            $this->_createInfo('role', $role);
        }

        return $role;
    }

    function setStaticRoleProperties($role_id, $properties, $sync = false)
    {
        if ( ! ($role = $this->getStaticRole($role_id))) {
            cb_throw_error(E_GRN_ROLE_NOT_FOUND);
        }

        require_once('fw/string_util.csp');

        if (array_key_exists('foreign_key', $properties)) {
            $properties['foreign_key'] = $sync
                ? cb_trim($properties['foreign_key'])
                : cb_trim_check($properties['foreign_key'],
                    E_GRN_MISSING_MANDATORY);
            $curr_key = $role->get('foreign_key');
            if ($curr_key !== $properties['foreign_key']) {
                if ($this->getStaticRoleByForeignKey($properties['foreign_key'])
                    !== false
                ) {
                    cb_throw_error(E_GRN_COLLISION_ROLE_KEY);
                }
            }
        }

        if (parent::setStaticRoleProperties($role_id, $properties)) {
            $this->_updateInfo('role', $role_id);

            return true;
        }

        return false;
    }

    function setOrderStaticRole($role_ids)
    {
        assert('is_array( $role_ids )');
        $final = [];
        foreach ($role_ids as $role_id) {
            assert('is_numeric( $role_id )');
            if ( ! ($role = $this->getStaticRole($role_id))) {
                cb_throw_error(E_GRN_ROLE_NOT_FOUND);
            }
            $final[] = $role_id;
        }
        $this->orderStaticRoles($final);
    }

    function removeStaticRole($role_id)
    {
        if ($role_id == GRN_UUM_ADMINISTRATION_ROLE) {
            return false;
        }

        if (($info = $this->_getInfo('role', $role_id))) {
            $info->onDelete();
        }

        return parent::removeStaticRole($role_id);
    }

    //// My Group

    /**
     * @return CB_TableInfo
     */
    function getMyGroupTable()
    {
        if (is_null($this->_mygroup_table)) {
            $this->_mygroup_table = cb_class2table('GRN_MyGroup');
        }

        return $this->_mygroup_table;
    }

    /**
     * @return CB_TableInfo
     */
    function _getMyGroupUserTable()
    {
        if (is_null($this->_mygroupuser_table)) {
            $this->_mygroupuser_table
                = cb_class2table('GRN_MyGroupUserRelation');
        }

        return $this->_mygroupuser_table;
    }

    /**
     * @param  CB_User $user
     *
     * @return GRN_MyGroup[]
     */
    function listMyGroups($user)
    {
        $rowset = new CB_RowSet($this->getMyGroupTable());

        $tmp_owner = "'" . $user->getOID() . "'";

        $rowset->addCondition('col_owner=' . $tmp_owner);
        $rowset->addOrderColumn('col_list_index,_id');
        $rowset->setLock(CB_DATABASE_NO_LOCK);

        $mygroups = [];
        while ( ! is_null($row = $rowset->iterate())) {
            $mygroups[$row->getOID()] = $row;
        }

        return $mygroups;
    }

    /**
     * @param  CB_User     $owner
     * @param  array       $properties
     * @param  string|null $uid
     *
     * @return GRN_MyGroup
     */
    function addMyGroup($owner, $properties, $uid = null)
    {
        assert('is_object( $owner ) && is_a( $owner, \'CB_User\' )');
        assert('is_array( $properties ) && 0 < count( $properties )');

        if (is_null($uid)) {
            $user = $this->getLoginUser();
        } else {
            $user = $this->getUser($uid);
        }

        $table = $this->getMyGroupTable();
        /** @var GRN_MyGroup $row */
        $row = $table->newRow();
        $row->set('owner', $owner);
        $row->set('name', @ $properties['name']);
        foreach ($properties as $key => $value) {
            $row->set($key, $value);
        }
        $row->registerNow();
        $row->onCreate($user);

        return $row;
    }

    function setMyGroupProperties($mygroup_id, $properties, $uid = null)
    {
        if (is_null($uid)) {
            $user = $this->getLoginUser();
        } else {
            $user = $this->getUser($uid);
        }

        $table = $this->getMyGroupTable();
        $table->setLock(CB_DATABASE_NO_LOCK);
        /** @var GRN_MyGroup $row */
        if (($row = $table->getRow($mygroup_id)) === false) {
            cb_throw_error(E_GRN_PERSONAL_INVALID_MYGROUP_ID);
        }

        foreach ($properties as $key => $value) {
            if ($key == "selected_users") {
                $user_ids = $value;
            } elseif ($key == "selected_facilities") {
                $facility_ids = $value;
            } else {
                $row->set($key, $value);
            }
        }
        $row->updateNow();

        if (isset($user_ids)) {
            $row->setAddedUsersMygroup($user_ids);
            $this->setMyGroupUsers($row->getOID(), $user_ids);
        } else {
            $user_ids = [];
        }

        if (isset($facility_ids)) {
            $row->setAddedFacilitiesMygroup($facility_ids);
            $this->setMyGroupFacilities($row->getOID(), $facility_ids);
        } else {
            $facility_ids = [];
        }

        unset($properties['selected_users']);
        unset($properties['selected_facilities']);
        if (count($properties) > 0) {
            $row->onUpdate($user);
        } else {
            $this->execInspection('mygroup', 'user_assign', [
                'mgid'  => $mygroup_id,
                'uids'  => implode(',', $user_ids),
                'faids' => implode(',', $facility_ids)
            ]);
        }

        return true;
    }

    /**
     * @param  string      $mygroup_id
     * @param  string|null $uid
     *
     * @return GRN_MyGroup
     */
    function getMyGroup($mygroup_id, $uid = null)
    {
        if (is_null($uid)) {
            $user = $this->getLoginUser();
            $uid = $user->getOID();
        }

        global $G_container_base;
        /** @var CB_DatabaseConnection $dbconn */
        $dbconn = $G_container_base->getInstance('dbconn');

        $table = $this->getMyGroupTable();
        $rowset = new CB_RowSet($table);
        $condition = $rowset->queryf("( _id = '@S' ) AND ( col_owner = '@S' )",
            $dbconn->escape($mygroup_id), $dbconn->escape($uid));
        $rowset->addCondition($condition);
        $rowset->setLock(CB_DATABASE_NO_LOCK);
        $row = $rowset->iterate();

        return $row;
    }

    /**
     * @param             $mygroup_id
     * @param int         $offset
     * @param int         $limit
     * @param string|null $additional_condition
     * @param int|null    $uid
     * @param string|null $app_id
     *
     * @return CB_User[]|bool
     */
    function getMyGroupUsers(
        $mygroup_id,
        $offset = 0,
        $limit = -1,
        $additional_condition = null,
        $uid = null,
        $app_id = null
    ) {
        assert('! is_null( $mygroup_id ) && 0 < strlen( $mygroup_id )');

        if (is_null($uid)) {
            $login_user = $this->getLoginUser();
            $uid = $login_user->getOID();
        }

        $user_rows = $this->getMyGroupUsersId($mygroup_id, $offset, $limit,
            $additional_condition, $uid);
        if ($user_rows === false) {
            return false;
        }

        if ($app_id != null) {
            $user_rows
                = AppAccess::filterUserIdsInternalAccessByAppId($user_rows,
                $app_id);
            $user_rows = array_values($user_rows);
        }

        $users = [];
        $count_loop = count($user_rows);
        for ($i = 0; $i < $count_loop; $i++) {
            $uid = $user_rows[$i];
            $users[$uid] = $this->getUser($uid);
        }

        return $users;
    }

    function getMyGroupUserCount(
        $mygroup_id,
        $additional_condition = null,
        $uid = null
    ) {
        if (is_null($uid)) {
            $user = $this->getLoginUser();
            $uid = $user->getOID();
        }

        if ( ! ($mygroup = $this->getMyGroup($mygroup_id, $uid))) {
            return false;
        }

        $table = $this->_getMyGroupUserTable();
        $rowset = new CB_RowSet($table);
        unset($table);

        $table = $this->getUserTable();
        $on = 'tab_grn_mygroupuserrelation.col_user = tab_cb_user._id';
        $on .= ' AND ' . $this->_getLiveUserCondition();
        $rowset->addJoin($table, $on, CB_DATABASE_INNER_JOIN);

        global $G_container_base;
        /** @var CB_DatabaseConnection $dbconn */
        $dbconn = $G_container_base->getInstance('dbconn');
        $tmp_mygroup = $rowset->queryf("'@S'",
            $dbconn->escape($mygroup->getOID()));
        $rowset->addCondition('tab_grn_mygroupuserrelation.col_mygroup = '
                              . $tmp_mygroup);

        if (is_string($additional_condition)
            && 0 < strlen($additional_condition)
        ) {
            $rowset->addCondition($additional_condition);
        }
        $rowset->applyGroupFunctions(['count' => 'COUNT(*)']);
        $rowset->setLock(CB_DATABASE_NO_LOCK);

        $row = $rowset->iterate();

        return $row['count'];
    }

    function removeMyGroup($mygroup_id, $uid = null)
    {
        if (is_null($uid)) {
            $user = $this->getLoginUser();
        } else {
            $user = $this->getUser($uid);
        }

        $mygroup = $this->getMyGroup($mygroup_id, $uid);
        if ( ! is_object($mygroup) || ! is_a($mygroup, 'GRN_MyGroup')) {
            return false;
        }

        $mygroup->onDelete($user);
        $mygroup->delete();

        return true;
    }

    function setUserMyGroups($user_id, $mygroup_ids)
    {
        $table = $this->_getMyGroupUserTable();

        $user = $this->getUser($user_id);
        if ( ! $user) {
            return false;
        }

        $rowset = new CB_RowSet($table);

        $tmp_user = "'" . $user->getOID() . "'";

        $rowset->addCondition('col_user=' . $tmp_user);
        /** @var GRN_MyGroupUserRelation[] $mygroup_relations */
        $mygroup_relations = [];
        while ( ! is_null($row = $rowset->iterate())) {
            $mygroup = $row->get('mygroup');
            $mygroup_relations[$mygroup->getOID()] = $row;
        }

        $list_index = 0;
        foreach ($mygroup_ids as $mygroup_id) {
            $mygroup = $this->getMyGroup($mygroup_id);
            if ( ! $mygroup) {
                continue;
            }
            $row = null;
            if (array_key_exists($mygroup->getOID(), $mygroup_relations)) {
                $row = $mygroup_relations[$mygroup->getOID()];
                unset($mygroup_relations[$mygroup->getOID()]);
            } else {
                $row = $table->_newRow();
                $row->set('user', $user);
                $row->set('mygroup', $mygroup);
            }

            $list_index = $list_index + 1;
            $row->set('list_index', $list_index);
            $row->updateNow();
        }

        foreach (array_keys($mygroup_relations) as $mygroup_id) {
            $row = $mygroup_relations[$mygroup_id];
            $row->delete();
        }
        $this->execInspection('user', 'assign_mygroup', [
            'uid'   => $user_id,
            'mgids' => implode(',', $mygroup_ids)
        ]);

        return true;
    }

    function setMyGroupUsers($mygroup_id, $user_ids)
    {
        $table = $this->_getMyGroupUserTable();

        $mygroup = $this->getMyGroup($mygroup_id);
        if ( ! $mygroup) {
            return false;
        }

        $rowset = new CB_RowSet($table);

        $tmp_mygroup = "'" . $mygroup->getOID() . "'";
        $rowset->addCondition('col_mygroup=' . $tmp_mygroup);
        $on
            = "{$this->_user_mygroup_table_name}.col_user = {$this->_user_table_name}._id AND "
              . $this->_getLiveUserCondition();
        $rowset->addJoin($this->getUserTable(), $on, CB_DATABASE_INNER_JOIN);
        /** @var GRN_MyGroupUserRelation[] $user_relations */
        $user_relations = [];
        while ( ! is_null($row = $rowset->iterate())) {
            $user = $row->get('user');
            $user_relations[$user->getOID()] = $row;
        }

        $list_index = 0;
        foreach ($user_ids as $user_id) {
            $user = $this->getUser($user_id);
            if ( ! $user) {
                continue;
            }

            $row = null;
            if (array_key_exists($user->getOID(), $user_relations)) {
                $row = $user_relations[$user->getOID()];
                unset($user_relations[$user->getOID()]);
            } else {
                $row = $table->newRow();
                $row->set('user', clone $user);
                $row->set('mygroup', $mygroup);
            }

            $list_index = $list_index + 1;
            $row->set('list_index', $list_index);
            $row->updateNow();
        }

        foreach (array_keys($user_relations) as $user_id) {
            $row = $user_relations[$user_id];
            $row->delete();
        }

        return true;
    }

    function getUserInfoTable()
    {
        $ret = $this->_getInfoTable('user');

        return $ret;
    }

    /**
     * @return CB_TableInfo
     */
    function getItemTable()
    {
        if (is_null($this->_item_table)) {
            $this->_item_table = cb_class2table('GRN_UserItem');
        }

        return $this->_item_table;
    }

    /**
     * @return CB_TableInfo
     */
    function getItemUserRelationTable()
    {
        if (is_null($this->_itemuser_table)) {
            $this->_itemuser_table = cb_class2table('GRN_ItemUserRelation');
        }

        return $this->_itemuser_table;
    }

    function &getItem($item_id)
    {
        assert('! is_null( $item_id ) && 0 < strlen( $item_id )');

        $table = $this->getItemTable();
        $table->setLock(CB_DATABASE_NO_LOCK);
        $ret = $table->getRow($item_id);

        return $ret;
    }

    function &getItemByKey($item_key)
    {
        assert('! is_null($item_key) && 0 < strlen( $item_key)');

        //Get Extension Item Table
        $table = $this->getItemTable();

        //Search Extensionm Item By Key
        $rowset = new CB_RowSet($table);

        $rowset->addCondition($rowset->queryf("col_id = '@S'", $item_key));
        $rowset->setLock(CB_DATABASE_NO_LOCK);
        $item = $rowset->iterate();
        $rowset->destroy();

        //Return Extension Item
        return $item;
    }

    /**
     * @param mixed $condition
     *
     * @return CB_Row[]
     */
    function listItems($condition = null)
    {
        $rowset = new CB_RowSet($this->getItemTable());
        if ( ! is_null($condition)) {
            $rowset->addCondition($condition);
        }
        $rowset->addOrderColumn('col_list_index');
        $rowset->setLock(CB_DATABASE_NO_LOCK);

        $items = [];
        while ( ! is_null($row = $rowset->iterate())) {
            $items[$row->getOID()] = $row;
        }

        return $items;
    }

    function addItem($properties)
    {
        assert('is_array( $properties ) && 0 < count( $properties )');
        assert('array_key_exists( \'display_name\', $properties )');
        assert('! is_null( $properties[\'display_name\'] ) && 0 < strlen( $properties[\'display_name\'] )');
        assert('array_key_exists( \'id\', $properties )');
        assert('! is_null( $properties[\'id\'] ) && 0 < strlen( $properties[\'id\'] )');
        assert('array_key_exists( \'type\', $properties )');
        assert('! is_null( $properties[\'type\'] ) && 0 < strlen( $properties[\'type\'] )');

        //validation
        if ( ! preg_match("/^[A-Za-z0-9_]+$/", $properties['id'])) {
            cb_throw_error(E_GRN_INVALID_USER_COLUMN_ID, null,
                ['id' => $properties['id']]);
        }

        //識別子の重複チェック
        $default_items = $this->listDefaultItemIds();
        if (array_key_exists($properties['id'], $default_items)) {
            cb_throw_error(E_GRN_DUPLICATE_USER_COLUMN_ID, null,
                ['id' => $properties['id']]);
        }
        $condition = cb_queryf($this->_dbconn, 'col_id = \'@S\'',
            $properties['id']);
        $items = $this->listItems($condition);
        if (count($items) > 0) {
            cb_throw_error(E_GRN_DUPLICATE_USER_COLUMN_ID, null,
                ['id' => $properties['id']]);
        }

        $table = $this->getItemTable();
        $row = $table->newRow();
        $type = @$properties['type'];
        if ($type == 'password') {
            $properties['show'] = 0;
            $properties['display'] = 0;
        }
        foreach ($properties as $key => $value) {
            $row->set($key, $value);
        }
        $row->registerNow();

        return $row;
    }

    function setItemProperties($item_id, $properties)
    {
        assert('! is_null( $item_id ) && 0 < strlen( $item_id )');
        assert('is_array( $properties ) && 0 < count( $properties )');

        //識別子の重複チェック
        if (array_key_exists('id', $properties)) {
            //validation
            if ( ! preg_match("/^[A-Za-z0-9_]+$/", $properties['id'])) {
                cb_throw_error(E_GRN_INVALID_USER_COLUMN_ID, null,
                    ['id' => $properties['id']]);
            }

            $default_items = $this->listDefaultItemIds();
            if (array_key_exists($properties['id'], $default_items)) {
                cb_throw_error(E_GRN_DUPLICATE_USER_COLUMN_ID, null,
                    ['id' => $properties['id']]);
            }
            $condition = cb_queryf($this->_dbconn,
                '_id <> @S AND col_id = \'@S\'',
                $item_id, $properties['id']);
            $items = $this->listItems($condition);
            if (count($items) > 1
                || (count($items) === 1
                    && ! array_key_exists($item_id, $items))
            ) {
                cb_throw_error(E_GRN_DUPLICATE_USER_COLUMN_ID, null,
                    ['id' => $properties['id']]);
            }
        }

        $table = $this->getItemTable();
        if (false === ($row = $table->getRow($item_id))) {
            return false;
        }

        $type = @$row->get('type');
        if ($type == 'password') {
            $properties['show'] = 0;
            $properties['display'] = 0;
            $properties['search'] = 0;
        }
        foreach ($properties as $key => $value) {
            $row->set($key, $value);
        }
        $row->updateNow();

        return true;
    }

    function removeItem($item_id)
    {
        assert('! is_null( $item_id ) && 0 < strlen( $item_id )');

        $item = $this->getItem($item_id);
        if ( ! is_object($item) || ! is_a($item, 'GRN_UserItem')) {
            return false;
        }

        // 削除する項目がファイル項目なら関連するファイルを削除
        if (strcmp($item->get('type'), 'file') === 0) {
            require_once('grn/file.csp');
            $file = cb_class2table('GRN_File');
            $itemuserrel = $this->getItemUserRelationTable();
            $rowset = new CB_RowSet($file, 'f');
            $rowset->addJoin($itemuserrel, 'f._id = iu.col_file',
                CB_DATABASE_LEFT_JOIN, 'iu');
            $rowset->addCondition($rowset->queryf("iu.col_item = '@S'",
                $item_id));
            while ( ! is_null($row = $rowset->iterate())) {
                $row->delete();
            }
        }

        $item->delete();

        return true;
    }

    /**
     * @param  CB_User $user
     *
     * @return GRN_ItemUserRelation[]
     */
    function listUserItems($user)
    {
        assert('is_object( $user ) && is_a( $user, \'CB_User\' )');

        $db = cb_get_master_db();

        $query_format
            = <<<SQL
SELECT iu._id
     , iu.col_string
     , iu.col_item
     , iu.col_user
     , i.col_id AS item_code
FROM tab_grn_itemuserrelation AS iu
INNER JOIN tab_grn_useritem AS i
  ON iu.col_item = i._id
WHERE iu.col_user = '@S'
ORDER BY i.col_list_index
SQL;
        $query = $db->format($query_format, [$user->getOID()]);
        $result = $db->query($query);

        $useritems = [];

        $item_user_relation_table_info = $this->getItemUserRelationTable();

        while ($row = $db->fetch_assoc($result)) {
            $item_code = $row['item_code'];

            // Clear unnecessary value for creating a row object
            unset($row['item_code']);

            $useritems[$item_code]
                = $item_user_relation_table_info->getRow($row['_id'], $row);
        }

        return $useritems;
    }

    /**
     * @param  CB_User       $user
     * @param  string        $item_id
     * @param  string[]|null $properties
     * @param  bool          $sync
     *
     * @return GRN_ItemUserRelation
     */
    function addUserItem($user, $item_id, $properties = null, $sync = false)
    {
        assert('is_object( $user ) && is_a( $user, \'CB_User\' )');
        assert('! is_null( $item_id ) && 0 < strlen( $item_id )');

        $item = $this->getItem($item_id);

        $table = $this->getItemUserRelationTable();
        $row = $table->newRow();
        $row->set('item', $item);
        $row->set('user', $user);
        if ( ! is_null($properties)) {
            foreach ($properties as $key => $value) {
                $row->set($key, $value);
            }
        }
        if ($sync) {
            $row->registerNow();
        }

        return $row;
    }

    /**
     * 組み込み項目IDをカテゴリ別に取得する
     *
     * @param string or NULL $category カテゴリ名
     *
     * @return array $ret['user'] CB_Userのカラムに値が存在するもの
     *               $ret['group'] グループ関連
     *               $ret['userinfo'] GRN_UserInfoのカラムに値が存在するもの
     *               $ret[int] $categoryが指定されている場合
     */
    function listDefaultItemIdsWithCategory($category = null)
    {
        $default_items = [
            "user"     => [
                'display_name',             // 表示名
                'display_name_language',    // Language of display_name
                'nickname',                 // Nickname
                'foreign_key',              // ログイン名
                'sort_key',                 // よみ
                'email_address',           // E-mailアドレス
                'telephone_number',         // 電話番号
                'url',                      // URL
                'description',              // メモ
                'valid',                    // 有効無効
                'position',                 // 表示優先度
            ],
            "group"    => [
                'usergroups',      // 所属する組織
            ],
            "userinfo" => [
                'primary_group',   // 優先する組織
                'post',            // 役職
                'image',          // 画像ファイル
                'attendee',        // 在籍情報
            ],
            "locale"   => [
                "locale",          // ロケール
            ],
            "base"     => [
                "base",            // 拠点
            ],
        ];

        if (array_key_exists($category, $default_items)) {
            return $default_items[$category];
        } else {
            return $default_items;
        }
    }

    /**
     * 組み込み項目IDのリストを取得する.
     *
     * @return array $ret[int]
     */
    function &listDefaultItemIds()
    {
        $list = [
            'display_name'          => 1,       // 表示名
            'display_name_language' => 1,      // language of display_name
            'nickname'              => 1,           // Nickname
            'foreign_key'           => 1,        // ログイン名
            'locale'                => 1,             // ロケール
            'base'                  => 1,               // 拠点
            'usergroups'            => 1,         // 所属する組織
            'primary_group'         => 1,      // 優先する組織
            'attendee'              => 1,           // 在籍情報
            'sort_key'              => 1,           // よみ
            'email_address'         => 1,      // E-mailアドレス
            'description'           => 1,        // メモ
            'post'                  => 1,               // 役職
            'telephone_number'      => 1,   // 電話番号
            'url'                   => 1,                // URL
            'image'                 => 1,              // 画像ファイル
        ];

        require_once("fw/i18n/system_config.csp");
        if ( ! CB_I18N_SystemConfig::isNickname()) {
            if (array_key_exists("display_name_language", $list)) {
                unset($list["display_name_language"]);
            }
            if (array_key_exists("nickname", $list)) {
                unset($list["nickname"]);
            }
        }

        return $list;
    }

    /**
     * カスタマイズ項目型IDのリストを取得する.
     *
     * @return array $ret[int]
     */
    function listItemTypes()
    {
        return [
            'string',             // 文字列（1行）
            'multiple_string',    // 文字列（複数行）
            'url',                // URL
            'image_url',          // 画像URL
            'email_address',      // E-mailアドレス
            'file',               // ファイル
            'callto',             // VoIP
            'password'
        ];         // パスワード

    }

    function isSSOType($type)
    {
        if (strcmp($type, 'url') !== 0 && strcmp($type, 'image_url') !== 0
            && strcmp($type, 'file') !== 0
            && strcmp($type, 'password') !== 0
        ) {
            return true;
        } else {
            return false;
        }
    }

    private function _initialProperties($id)
    {
        switch ($id) {
            case 'display_name':
                return [
                    'use'        => true,
                    'show'       => true,
                    'sso'        => 0, // Why 0? why not false?
                    'display'    => true,
                    'necessary'  => true,
                    'not_modify' => false,
                    'cellular'   => true,
                    'search'     => true,
                ];
            case 'display_name_language':
                return [
                    'use'        => true,
                    'show'       => true,
                    'sso'        => 0, // Why 0? why not false?
                    'display'    => false,
                    'necessary'  => true,
                    'not_modify' => false,
                    'cellular'   => false,
                    'search'     => false,
                ];
            case 'nickname':
                return [
                    'use'        => true,
                    'show'       => true,
                    'sso'        => 0, // Why 0? why not false?
                    'display'    => false,
                    'necessary'  => false,
                    'not_modify' => false,
                    'cellular'   => false,
                    'search'     => true,
                ];
            case 'locale':
            case 'base':
                return [
                    'use'        => true,
                    'show'       => true,
                    'sso'        => 0, // Why 0? why not false?
                    'display'    => true,
                    'necessary'  => false,
                    'not_modify' => false,
                    'cellular'   => false,
                    'search'     => false,
                ];
            case 'foreign_key':
                return [
                    'use'        => true,
                    'show'       => true,
                    'sso'        => 0, // Why 0? why not false?
                    'display'    => false,
                    'necessary'  => true,
                    'not_modify' => true,
                    'cellular'   => false,
                    'search'     => true,
                ];
            case 'usergroups':
            case 'attendee':
                return [
                    'use'        => true,
                    'show'       => true,
                    'sso'        => 0, // Why 0? why not false?
                    'display'    => false,
                    'necessary'  => false,
                    'not_modify' => true,
                    'cellular'   => false,
                    'search'     => false,
                ];
            case 'sort_key':
            case 'email_address':
            case 'post':
                return [
                    'use'        => true,
                    'show'       => true,
                    'sso'        => 0,
                    'display'    => false,
                    'necessary'  => false,
                    'not_modify' => false,
                    'cellular'   => false,
                    'search'     => true,
                ];
            default:
                return [
                    'use'        => true,
                    'show'       => true,
                    'sso'        => 0, // Why 0? why not false?
                    'display'    => false,
                    'necessary'  => false,
                    'not_modify' => false,
                    'cellular'   => false,
                    'search'     => false,
                ];
        }
    }

    private function _staticProperties($id)
    {
        switch ($id) {
            case 'display_name':
                return [
                    'use_disabled'        => true,
                    'necessary_disabled'  => true,
                    'not_modify_disabled' => false,
                    'show_disabled'       => true,
                    'display_disabled'    => true,
                    'sso_disabled'        => true,
                    'cellular_disabled'   => true,
                    'search_disabled'     => true,
                    'type'                => 'string',
                ];
            case 'display_name_language':
            case 'nickname':
                return [
                    'use_disabled'        => true,
                    'necessary_disabled'  => true,
                    'not_modify_disabled' => false,
                    'show_disabled'       => true,
                    'display_disabled'    => true,
                    'sso_disabled'        => false,
                    'cellular_disabled'   => true,
                    'search_disabled'     => true,
                    'type'                => 'string',
                ];
            case 'foreign_key':
                return [
                    'use_disabled'        => true,
                    'necessary_disabled'  => true,
                    'not_modify_disabled' => false,
                    'show_disabled'       => false,
                    'display_disabled'    => false,
                    'sso_disabled'        => false,
                    'cellular_disabled'   => false,
                    'search_disabled'     => true,
                    'type'                => 'string',
                ];
            case 'locale':
            case 'base':
                return [
                    'use_disabled'        => true,
                    'necessary_disabled'  => true,
                    'not_modify_disabled' => false,
                    'show_disabled'       => false,
                    'display_disabled'    => false,
                    'sso_disabled'        => false,
                    'cellular_disabled'   => true,
                    'search_disabled'     => true,
                    'type'                => $id,
                ];
            case 'usergroups':
                return [
                    'use_disabled'        => true,
                    'necessary_disabled'  => true,
                    'not_modify_disabled' => true,
                    'show_disabled'       => false,
                    'display_disabled'    => false,
                    'sso_disabled'        => false,
                    'cellular_disabled'   => false,
                    'search_disabled'     => true,
                    'type'                => $id,
                ];
            case 'primary_group':
                return [
                    'use_disabled'        => true,
                    'necessary_disabled'  => true,
                    'not_modify_disabled' => false,
                    'show_disabled'       => false,
                    'display_disabled'    => false,
                    'sso_disabled'        => false,
                    'cellular_disabled'   => false,
                    'search_disabled'     => true,
                    'type'                => $id,
                ];
            case 'attendee':
                return [
                    'use_disabled'        => true,
                    'necessary_disabled'  => true,
                    'not_modify_disabled' => true,
                    'show_disabled'       => false,
                    'display_disabled'    => false,
                    'sso_disabled'        => false,
                    'cellular_disabled'   => false,
                    'search_disabled'     => true,
                    'type'                => $id,
                ];
            case 'sort_key':
            case 'post':
            case 'telephone_number':
                return [
                    'use_disabled'        => false,
                    'necessary_disabled'  => false,
                    'not_modify_disabled' => false,
                    'show_disabled'       => false,
                    'display_disabled'    => false,
                    'sso_disabled'        => false,
                    'cellular_disabled'   => false,
                    'search_disabled'     => true,
                    'type'                => "string",
                ];
            case 'email_address':
                return [
                    'use_disabled'        => false,
                    'necessary_disabled'  => false,
                    'not_modify_disabled' => false,
                    'show_disabled'       => false,
                    'display_disabled'    => false,
                    'sso_disabled'        => false,
                    'cellular_disabled'   => false,
                    'search_disabled'     => true,
                    'type'                => $id,
                ];
            case 'description':
                return [
                    'use_disabled'        => false,
                    'necessary_disabled'  => false,
                    'not_modify_disabled' => false,
                    'show_disabled'       => false,
                    'display_disabled'    => false,
                    'sso_disabled'        => false,
                    'cellular_disabled'   => false,
                    'search_disabled'     => true,
                    'type'                => 'multiple_string',
                ];
            case 'url':
                return [
                    'use_disabled'        => false,
                    'necessary_disabled'  => false,
                    'not_modify_disabled' => false,
                    'show_disabled'       => false,
                    'display_disabled'    => false,
                    'sso_disabled'        => true,
                    'cellular_disabled'   => false,
                    'search_disabled'     => true,
                    'type'                => $id,
                ];
            case 'image':
                return [
                    'use_disabled'        => false,
                    'necessary_disabled'  => false,
                    'not_modify_disabled' => false,
                    'show_disabled'       => false,
                    'display_disabled'    => false,
                    'sso_disabled'        => true,
                    'cellular_disabled'   => false,
                    'search_disabled'     => true,
                    'type'                => 'file',
                ];
            default:
                cb_throw_error(E_GRN_USER_COLUMN_NOT_FOUND);
        }
    }

    private static $_item_property_cache = [];

    /**
     * 組み込み項目の設定を取得する.
     *
     * @param string $item_id 対象項目の名前(ID)
     *
     * @return array $ret['cellular'] ケータイ表示するかどうか(bool)
     *               $ret['cellular_disabled'] cellular設定を変更可能かどうか(bool)
     *               $ret['necessary'] 必須項目かどうか(bool)
     *               $ret['necessary_disabled'] necessary設定を変更可能かどうか(bool)
     *               $ret['show'] 公開するかどうか(bool)
     *               $ret['show_disabled'] show設定を変更可能かどうか(bool)
     *               $ret['sso'] SSOで使用するかどうか(bool)
     *               $ret['sso_disabled'] sso設定を変更可能かどうか(bool)
     *               $ret['use'] 使用するかどうか(bool)
     *               $ret['use_disabled'] use設定を変更可能かどうか(bool)
     *               $ret['not_modify'] ユーザーが変更可能かどうか(bool)
     *               $ret['not_modify_disabled'] not_modify設定を変更可能かどうか(bool)
     *               $ret['display'] 一覧表示に使用するかどうか(bool)
     *               $ret['display_disabled'] display設定を変更可能かどうか(bool)
     *               $ret['type'] 項目の型(string)
     */
    function &getDefaultItemProperty($item_id)
    {
        if (isset(self::$_item_property_cache[$item_id])) {
            return self::$_item_property_cache[$item_id];
        }

        $items = $this->listDefaultItemIds();
        $profile = $this->getSystemProfile();

        if (array_key_exists($item_id, $items)) {
            if ($profile->getAttribute("${item_id}", $val)) {
                $initial_prop = $this->_initialProperties($item_id);
                ksort($initial_prop);
                ksort($val);
                if (array_keys($val)
                    !== array_keys($initial_prop)
                )// DB に設定が保存されているが、_initialProperties の戻り値と設定項目が違う = バージョンアップの直後
                {
                    $profile->removeAttribute("${item_id}");
                    $val = $val + $initial_prop;
                    $profile->createAttribute("${item_id}", $val);
                }
                $ret = array_merge($val, $this->_staticProperties($item_id));
            } else {
                // DB に設定が保存されていない = インストール直後
                $profile->removeAttribute("${item_id}");
                $profile->createAttribute("${item_id}",
                    $this->_initialProperties($item_id));
                $ret = array_merge($this->_initialProperties($item_id),
                    $this->_staticProperties($item_id));
            }

            // force attendee
            if (strcmp($item_id, 'attendee') === 0) {
                $ret['show'] = 1;
                $ret['display'] = 1;
            }

            if (strcmp($item_id, 'locale') === 0) {
                $ret['not_modify']
                    = ! CB_I18N_SystemConfig::isUserChangeableLocale();
            }

            if (strcmp($item_id, 'base') === 0) {
                $ret['not_modify']
                    = ! CB_I18N_SystemConfig::isUserChangeableBase();
            }

            if (defined('ON_FOREST')) {
                $display_items = [
                    'display_name',
                    'usergroups',
                    'email_address',
                    'attendee',
                    'telephone_number'
                ];
                $necessary_items = ['display_name', 'foreign_key'];
                $not_modify_items = [
                    'display_name',
                    'foreign_key',
                    'usergroups',
                    'attendee'
                ];
                $cellular_items = [
                    'display_name',
                    'primary_group',
                    'telephone_number'
                ];

                $ret['use'] = true;
                $ret['show'] = true;
                $ret['display'] = in_array($item_id, $display_items) ? true
                    : false;
                $ret['necessary'] = in_array($item_id, $necessary_items) ? true
                    : false;
                $ret['not_modify'] = in_array($item_id, $not_modify_items)
                    ? true : false;
                $ret['cellular'] = in_array($item_id, $cellular_items) ? true
                    : false;
            }

            self::$_item_property_cache[$item_id] = $ret;

            return $ret;

        } else {
            cb_throw_error(E_GRN_USER_COLUMN_NOT_FOUND);
        }
    }

    /**
     * 組み込み項目を設定する.
     *
     * @param string $item_id 対象項目の名前(ID)
     * @param array  $value   設定値
     *                        $value['necessary'] 必須項目かどうか(bool)
     *                        $value['use'] 使用するかどうか(bool)
     *                        $value['not_modify'] ユーザーが変更可能かどうか(bool)
     *                        $value['display'] 一覧表示に使用するかどうか(bool)
     */
    function setDefaultItemProperty($item_id, $value)
    {
        $items = $this->listDefaultItemIds();
        $profile = $this->getSystemProfile();
        if (array_key_exists($item_id, $items)) {

            $current = $this->getDefaultItemProperty($item_id);
            $initial = $this->_initialProperties($item_id);
            $static = $this->_staticProperties($item_id);
            $keys = array_keys($initial);

            $val = [];
            foreach ($keys as $key) {
                if ($static["${key}_disabled"]) {
                    $val[$key] = $initial[$key];
                } elseif (array_key_exists($key, $value)) {
                    $val[$key] = $value[$key];
                } else {
                    $val[$key] = $current[$key];
                }
            }

            if ( ! $profile->updateAttribute("${item_id}", $val)) {
                $profile->createAttribute("${item_id}", $val);
            }

            if (strcmp($item_id, 'locale') === 0) {
                CB_I18N_SystemConfig::setUserChangeableLocale(! $value['not_modify']);
            }
            if (strcmp($item_id, 'base') === 0) {
                CB_I18N_SystemConfig::setUserChangeableBase(! $value['not_modify']);
            }
        } else {
            cb_throw_error(E_GRN_USER_COLUMN_NOT_FOUND);
        }
    }

    /**
     * 全組み込み表示項目の設定を取得する.
     *
     * @return array $ret[項目ID(string)]['necessary'] 必須項目かどうか(bool)
     *               $ret[項目ID(string)]['necessary_disable'] necessary設定を変更可能かどうか(bool)
     *               $ret[項目ID(string)]['use'] 使用するかどうか(bool)
     *               $ret[項目ID(string)]['use_disable'] use設定を変更可能かどうか(bool)
     *               $ret[項目ID(string)]['display'] 一覧表示に使用するかどうか(bool)
     *               $ret[項目ID(string)]['display_disable'] display設定を変更可能かどうか(bool)
     */
    function getDefaultDisplayItemProperties()
    {
        $items = $this->listDefaultItemIds();
        $ret = [];
        foreach (array_keys($items) as $item_id) {
            //現時点で表示項目でないものは"display_name_language"と"nickname"の2つ
            //表示項目でないものは、利用する、しないに関わらず取得しない。
            if ($item_id == "display_name_language" || $item_id == "nickname") {
                continue;
            }

            $ret[$item_id] = $this->getDefaultItemProperty($item_id);
        }

        return $ret;
    }

    /**
     * 全組み込み項目の設定を取得する.
     *
     * @return array $ret[項目ID(string)]['necessary'] 必須項目かどうか(bool)
     *               $ret[項目ID(string)]['necessary_disable'] necessary設定を変更可能かどうか(bool)
     *               $ret[項目ID(string)]['use'] 使用するかどうか(bool)
     *               $ret[項目ID(string)]['use_disable'] use設定を変更可能かどうか(bool)
     *               $ret[項目ID(string)]['display'] 一覧表示に使用するかどうか(bool)
     *               $ret[項目ID(string)]['display_disable'] display設定を変更可能かどうか(bool)
     */
    function getDefaultItemProperties()
    {
        $items = $this->listDefaultItemIds();
        $ret = [];

        foreach (array_keys($items) as $item_id) {
            $ret[$item_id] = $this->getDefaultItemProperty($item_id);
        }

        return $ret;
    }

    /**
     * 全組み込み項目を設定する.
     *
     * @param array $values 設定値
     *                      $value[項目ID(string)]['necessary'] 必須項目かどうか(bool)
     *                      $value[項目ID(string)]['use'] 使用するかどうか(bool)
     *                      $value[項目ID(string)]['display'] 一覧表示に使用するかどうか(bool)
     */
    function setDefaultItemProperties($values)
    {
        foreach ($values as $item_id => $value) {
            $this->setDefaultItemProperty($item_id, $value);
        }
    }

    /**
     * 組み込み項目の表示名を取得する.
     *
     * @param string $id 項目ID
     *
     * @return string 表示名
     */
    function getRealDefaultItemName($id)
    {
        $items = $this->listDefaultItemIds();

        /*
        foreach( array_keys( $items ) as $item_id ) {
            if ( strcmp( $item_id, $id ) === 0 ) {
                return cb_msg( 'grn.common', "${item_id}_realname" );
            }
        }
        */
        if (array_key_exists($id, $items)) {
            return cb_msg('grn.common', "${id}_realname");
        }

        cb_throw_error(E_GRN_USER_COLUMN_NOT_FOUND);
    }

    /**
     * カスタマイズ項目型の表示名を取得する.
     *
     * @param  string $type 項目型
     *
     * @return string 表示名
     */
    function getRealItemTypeName($type)
    {
        $types = $this->listItemTypes();

        foreach ($types as $type_name) {
            if (strcmp($type_name, $type) === 0) {
                return cb_msg('grn.common', "${type_name}_typename");
            }
        }

        cb_throw_error(E_GRN_INVALID_COLUMN_TYPE);
    }

    /**
     * 項目識別子の自動値('userinfo[1-9][0-9]*')を取得する.
     *
     * @return string 自動値
     */
    function getAutoItemId()
    {
        $items = $this->listItems();
        $keys = array_keys($items);
        $suffix = 1;
        foreach ($keys as $key) {
            $id = $items[$key]->get('id');
            if (preg_match('/(userinfo)([1-9][0-9]*)/', $id, $regs)) {
                if ($suffix <= $regs[2]) {
                    $suffix = (int)$regs[2] + 1;
                }
            }
        }

        return "userinfo$suffix";
    }

    /**
     * 存在するカスタマイズ項目の数を取得する.
     *
     * @return int 数
     */
    function getItemCount()
    {
        $rowset = new CB_RowSet($this->getItemTable());
        $rowset->applyGroupFunctions(['count' => 'COUNT(*)']);
        $rowset->setLock(CB_DATABASE_NO_LOCK);
        $row =& $rowset->iterate();
        $rowset->destroy();

        return $row['count'];
    }

    /**
     * 存在するカスタマイズ項目を全て削除する.
     */
    function removeAllItems()
    {
        $rowset = new CB_RowSet($this->getItemTable());
        $rowset->deleteAllMatched();
    }

    /**
     * カスタマイズ項目の表示順を変更する.
     *
     * @param array $ids 表示順にならんだ項目OIDのリスト
     *                   $ids[int] CB_UserItemのOID
     */
    function changeItemsListIndex($ids)
    {
        assert('is_array( $ids )');

        $final = [];
        foreach ($ids as $id) {
            assert('is_numeric( $id )');

            $item = $this->getItem($id);
            if ( ! $item) {
                cb_throw_error(E_GRN_USER_COLUMN_NOT_FOUND);
            }

            $final[] = $id;
        }

        cb_set_list_index($final, 'list_index', $this->getItemTable(), true);
    }

    /**
     * ユーザの組み込み項目の値を設定する.
     *
     * @param CB_User $user    ユーザ
     * @param string  $item_id 項目ID
     * @param mixed   $value   ファイルを登録する場合はファイル情報の配列
     *                         文字列を登録する場合は文字列
     *                         組織を登録する場合はCB_GroupのOIDのリスト
     *                         ロケールの場合は CB_Locale の ID
     *                         リセットする場合はNULL
     */
    function setDefaultItemData($user, $item_id, $value)
    {
        $default_items = $this->listDefaultItemIdsWithCategory();

        if (in_array($item_id, $default_items['user'])) {
            $this->setUserProperties($user->getOID(), [$item_id => $value]);
        } elseif (in_array($item_id, $default_items['userinfo'])) {
            if (strcmp($item_id, 'post') === 0) {
                $this->setUserPost($user->getOID(), $value);
            } elseif (strcmp($item_id, 'image') === 0) {
                $this->setUserImage($user->getOID(), $value);
            } elseif (strcmp($item_id, 'primary_group') === 0) {
                $this->setUserPrimaryGroup($user->getOID(), $value);
            }
        } elseif (in_array($item_id, $default_items['group'])) {
            $this->setUserGroups($user->getOID(), $value);
        } elseif (in_array($item_id, $default_items['locale'])) {
            require_once("fw/i18n/locale.csp");
            CB_LocaleManager::setUserLocaleSetting($user->getOID(), $value);
        } elseif (in_array($item_id, $default_items['base'])) {
            require_once("fw/i18n/base.csp");
            CB_BaseManager::setUserBaseSetting($user->getOID(), $value);
        } else {
            cb_throw_error(E_GRN_USER_COLUMN_NOT_FOUND);
        }
    }

    function setDefaultItemDatas($user_info, $items)
    {
        if ( ! is_array($user_info)) {
            return false;
        }

        $uid = $user_info['_id'];
        $default_items = $this->listDefaultItemIdsWithCategory();

        $basic_propertis = [];
        $belong_groups = null;

        foreach (array_keys($items) as $id) {
            if (in_array($id, $default_items['userinfo'])) {
                if (strcmp($id, 'post') === 0) {
                    $this->setUserPost($uid, $items[$id]);
                } elseif (strcmp($id, 'image') === 0) {
                    $this->setUserImage($uid, $items[$id]);
                } elseif (strcmp($id, 'primary_group') === 0) {
                    $this->setUserPrimaryGroup($uid, $items[$id]);
                }
            } elseif (in_array($id, $default_items['group'])) {
                $belong_groups = $items[$id];
            } elseif (in_array($id, $default_items['user'])) {
                $basic_propertis[$id] = $items[$id];
            }
            // skip
        }

        $this->setUserProperties($uid, $basic_propertis);
        if ($belong_groups) {
            $this->setUserGroups($uid, $belong_groups);
        }
    }

    /**
     * @param                      $user
     * @param GRN_UserItem         $item
     * @param GRN_ItemUserRelation $data
     * @param                      $value
     * @param bool                 $sync
     */
    function _setExtensionItemData(& $user, $item, $data, $value, $sync = false)
    {
        if ( ! $item) {
            cb_throw_error(E_GRN_USER_COLUMN_NOT_FOUND);
        }

        $_value = null;
        $_file = false;
        if (strcmp($item->get('type'), 'file') === 0) {
            if ($value) {
                require_once('grn/file.csp');
                $_value = grn_create_simple_file($this->getLoginUser(),
                    $value,
                    'User\'s extension data file',
                    false);
            }
            $_file = true;
        } else {
            $_value = $value;
        }

        if ( ! $data) {
            if ($_file) {
                $this->addUserItem($user, $item->getOID(), ['file' => $_value],
                    $sync);
            } else {
                $this->addUserItem($user, $item->getOID(),
                    ['string' => $_value], $sync);
            }
        } else {
            if ($_file) {
                $oldfile = $data->get('file');
                if ($oldfile) {
                    $oldfile->delete();
                }
                $data->set('file', $_value);
            } else {
                $data->set('string', $_value);
            }
            if ($sync) {
                $data->updateNow();
            }
        }
    }

    /**
     * ユーザのカスタマイズ項目の値を設定する.
     *
     * @param CB_User $user   ユーザ
     * @param string  $key    項目を特定するためのキー
     * @param mixed   $value  ファイルを登録する場合はファイル情報の配列
     *                        文字列を登録する場合は文字列
     *                        リセットする場合はNULL
     * @param boolean $use_id $keyを識別子の値にする場合はTRUE,OIDの値にする場合はFALSE
     * @param bool    $sync
     */
    function setExtensionItemData(
        & $user,
        $key,
        $value,
        $use_id = false,
        $sync = false
    ) {
        $item_data = $this->getExtensionItemData($user, $key, $use_id);
        $this->_setExtensionItemData($user, $item_data['item'],
            $item_data['data'], $value, $sync);
    }

    /**
     * ユーザの組み込み項目の値を取得する.
     *
     * @param CB_User $user    ユーザ
     * @param string  $item_id 項目ID
     *
     * @return array $ret['value'] GRN_Fileオブジェクトか文字列かCB_GroupのOIDリストかNULL
     *               $ret['type'] 型がファイルの場合は'file',文字列の場合は'string',組織の場合は'groups',ロケールの場合は'locale'
     */
    function getDefaultItemData(& $user, $item_id)
    {
        $default_items = $this->listDefaultItemIdsWithCategory();
        $property = $this->getDefaultItemProperty($item_id);

        $ret = [];
        $ret['type'] = $property['type'];

        if (in_array($item_id, $default_items['user'])) {
            if ($item_id == "display_name_language") {
                $ret['value']
                    = CB_LanguageManager::getLanguageCode($user->get($item_id));
            } else {
                $ret['value'] = $user->get($item_id);
            }
        } elseif (in_array($item_id, $default_items['userinfo'])) {
            if (strcmp($item_id, 'post') === 0) {
                $ret['value'] = $this->getUserPost($user->getOID());
            } elseif (strcmp($item_id, 'image') === 0) {
                $ret['value'] = $this->getUserImage($user->getOID());
            } elseif (strcmp($item_id, 'attendee') === 0) {
                $ret['value'] = $this->getAttendee($user->getOID());
            } elseif (strcmp($item_id, 'primary_group') === 0) {
                $groupObj = $this->getUserPrimaryGroup($user->getOID(),
                    false, true);
                $ret['value'] = ($groupObj === false) ? null : $groupObj;
            }
        } elseif (in_array($item_id, $default_items['group'])) {
            $ret['value'] = $this->getUserGroups($user->getOID());
        } elseif (in_array($item_id, $default_items['locale'])) {
            require_once("fw/i18n/locale.csp");
            $user_locale_setting
                = CB_UserLocaleSetting::select($user->getOID());
            if (is_null($user_locale_setting)) {
                $ret['value'] = CB_UserLocaleSetting::$LOCALE_IS_NOT_RELATED;
            } else {
                $locale = CB_Locale::select($user_locale_setting->getLocale());
                if (is_null($locale)) {
                    $ret['value']
                        = CB_UserLocaleSetting::$LOCALE_IS_NOT_RELATED;
                } else {
                    $ret['value'] = $locale->toArray();
                    $ret['value']['localname'] = $locale->getLocalName();
                }
            }
        } elseif (in_array($item_id, $default_items['base'])) {
            require_once('fw/i18n/base.csp');
            $user_base_setting = $this->getBaseSettingByUser($user);
            $ret['value'] = [];
            if ( ! is_null($user_base_setting)) {
                $base = CB_Base::select($user_base_setting->getBase());
                $ret['value']['_id'] = is_null($base) ? null
                    : $base->getId();
                $ret['value']['code'] = is_null($base) ? null
                    : $base->getCode();
                $ret['value']['local_name'] = is_null($base) ? null
                    : trim($base->getLocalName());
                if ('' === $ret['value']['local_name']) {
                    $ret['value']['local_name'] = $base->getName();
                }
            }
        } else {
            cb_throw_error(E_GRN_USER_COLUMN_NOT_FOUND);
        }

        return $ret;
    }

    /**
     * @param CB_User $user
     *
     * @return CB_UserBaseSetting|null
     */
    public function getBaseSettingByUser(CB_User $user)
    {
        require_once('fw/i18n/base.csp');

        return CB_UserBaseSetting::select($user->getOID());
    }

    /**
     * @param CB_User              $user
     * @param GRN_UserItem         $item
     * @param GRN_ItemUserRelation $data
     * @param bool                 $hide_password
     *
     * @return array
     */
    function _getExtensionItemData($user, $item, $data, $hide_password = true)
    {
        //Check Extension Item
        if ( ! $item) {
            //Extension Item Not Found
            cb_throw_error(E_GRN_USER_COLUMN_NOT_FOUND);
        }

        //Get Extension Item Value
        $result = [];
        $result['value'] = null;
        if ($item->get('type') === 'file') {
            //Extension Data Type: File
            $result['type'] = 'file';
            if ($data) {
                $result['value'] = $data->get('file');
            }
        } elseif ($hide_password && $item->get('type') === 'password') {
            $result['type'] = 'string';
            if ($data) {
                $result['value'] = '***************';
            }
        } else {
            //Extension Data Type: String
            $result['type'] = 'string';
            if ($data) {
                $result['value'] = $data->get('string');
            }
        }

        //Get Extension Item and Data
        $result['item'] = $item;
        $result['data'] = $data;
        $static_extension_propeties = $this->staticExtensionProperties([$item]);
        $result['static'] = $static_extension_propeties[0];

        return $result;
    }

    /**
     * カスタマイズ項目で編集できない項目を設定する。
     *
     * @param  GRN_UserItem[] $items
     *
     * @return array
     */
    function staticExtensionProperties($items)
    {
        $disabled_types = [
            'cellular' => ['file' => 1, 'image_url' => 1],
            'show'     => ['password' => 1],
            'display'  => ['password' => 1],
            'search'   => ['file' => 1, 'password' => 1],
        ];
        $column_names = [
            'use',
            'necessary',
            'not_modify',
            'show',
            'display',
            'sso',
            'cellular',
            'search'
        ];
        $ret = [];
        foreach ($items as $key => $item) {
            if (is_a($item, 'GRN_UserItem')) {
                $type_name = $item->get('type');
            } elseif (is_string($item)) {
                $type_name = $item;
            } else {
                cb_throw_error(E_GRN_INVALID_COLUMN_TYPE);
            }

            $ret[$key] = [];

            foreach ($column_names as $column_name) {
                if ( ! array_key_exists($column_name, $disabled_types)) {
                    $ret[$key]["{$column_name}_disabled"] = false;
                } else {
                    if ( ! array_key_exists($type_name,
                        $disabled_types[$column_name])
                    ) {
                        $ret[$key]["{$column_name}_disabled"] = false;
                    } else {
                        $ret[$key]["{$column_name}_disabled"] = true;
                    }
                }
            }
        }

        return $ret;
    }

    /**
     * ユーザのカスタマイズ項目の値を取得する.
     *
     * @param CB_User $user          ユーザ
     * @param string  $key           項目を特定するためのキー
     * @param boolean $use_id        $keyを識別子の値にする場合はFALSE,OIDの値にする場合はTRUE
     * @param boolean $hide_password パスワード項目を隠す
     *
     * @return array  $result['value'] GRN_Fileオブジェクトか文字列かNULL
     *                 $result['type'] データ型(file/string/null)
     *                 $result['item'] 項目情報(GRN_UserItemテーブルのrow)
     *                 $result['data'] 項目値情報(GRN_ItemUserRelationテーブルのrow)
     */
    function &getExtensionItemData(
        $user,
        $key,
        $use_id = false,
        $hide_password = true
    ) {
        //Get Extension Item
        if ($use_id) {
            //Get Extension Item by Object ID
            $item = $this->getItem($key);
        } else {
            //Get Extension Item by Unique Key
            $item = $this->getItemByKey($key);
        }
        if ( ! $item) {
            //Extension Item Not Found
            cb_throw_error(E_GRN_USER_COLUMN_NOT_FOUND);
        }

        //Get Extension Data
        $rowset = new CB_RowSet($this->getItemUserRelationTable());

        $tmp_user = "'" . $user->getOID() . "'";
        $tmp_item = "'" . $item->getOID() . "'";

        $rowset->addCondition('col_user = ' . $tmp_user . ' AND col_item = '
                              . $tmp_item);
        $rowset->setLock(CB_DATABASE_NO_LOCK);
        /** @var GRN_ItemUserRelation $data */
        $data = $rowset->iterate();
        $rowset->destroy();

        $ret = $this->_getExtensionItemData($user, $item, $data,
            $hide_password);

        return $ret;
    }

    /**
     * ユーザの全カスタマイズ項目の値を取得する.
     *
     * @param CB_User $user ユーザ
     *
     * @return array  $result['value'] GRN_Fileオブジェクトか文字列かNULL
     *                 $result['type'] データ型(file/string/null)
     *                 $result['item'] 項目情報(GRN_UserItemテーブルのrow)
     *                 $result['data'] 項目値情報(GRN_ItemUserRelationテーブルのrow)
     */
    function &getAllExtensionItemData($user)
    {
        if (isset(self::$_extended_item_cache[$user->getOID()])) {
            return self::$_extended_item_cache[$user->getOID()];
        }
        require_once("grn/file.csp");
        //Get Extension Item and Data Table
        $item_table = $this->getItemTable();
        $item_user_relation_table = $this->getItemUserRelationTable();

        //Join Both Table
        $rowset = new CB_MultiRowSet($item_table, 'item');
        $rowset->addJoin($item_user_relation_table,
            $this->_db->format('item._id = data.col_item AND data.col_user = "@S"',
                [$user->getOID()]),
            CB_DATABASE_LEFT_JOIN,
            'data'
        );
        $rowset->addOrderColumn('item.col_list_index');
        $rowset->setLock(CB_DATABASE_NO_LOCK);

        //get All Extension Item Data
        $ret = [];
        while ( ! is_null($row = $rowset->iterate())) {
            /** @var GRN_UserItem $item */
            $item = $row['item'];
            $data = $row['data'];
            $ret[$item->get("id")] = $this->_getExtensionItemData($user, $item,
                $data);

        }
        $rowset->destroy();

        return $ret;
    }

    /**
     * %...%形式の識別子リストを返す
     *
     * @return array $identifier_list           //%...% Identifier List
     */
    function getIdentifierList()
    {
        //Set Standard Identifier List
        $identifier_list = [
            //from Login User
            '%grn.common.login.login.id%',
            '%grn.common.login.login.display_name%',
            '%grn.common.login.login.foreign_key%',
            '%grn.common.login.login.sort_key%',
            '%grn.common.login.login.email_address%',
            '%grn.common.login.login.telephone_number%',
            '%grn.common.login.login.url%',
            '%grn.common.login.login.description%',
            //from CB_User
            '%grn.common.uum.user.id%',
            '%grn.common.uum.user.display_name%',
            '%grn.common.uum.user.foreign_key%',
            '%grn.common.uum.user.sort_key%',
            '%grn.common.uum.user.email_address%',
            '%grn.common.uum.user.telephone_number%',
            '%grn.common.uum.user.url%',
            '%grn.common.uum.user.description%',
            //from CB_Group
            '%grn.common.uum.group.id%',
            '%grn.common.uum.group.name%',
            '%grn.common.uum.group.foreign_key%',
            '%grn.common.uum.group.description%',
            //from CB_Role
            '%grn.common.uum.role.id%',
            '%grn.common.uum.role.foreign_key%',
            '%grn.common.uum.role.description%',
        ];


        //from User Info
        $userinfo_list = $this->listDefaultItemIdsWithCategory('userinfo');

        //"position" is not used in SSO.
        $userinfo_list = array_diff($userinfo_list, ["position"]);

        foreach ($userinfo_list as $userinfo_key) {
            if ($userinfo_key != 'image' && $userinfo_key != 'primary_group'
                && $userinfo_key != 'attendee'
            ) {
                $identifier_list[] = '%grn.common.login.login.userinfo.'
                                     . $userinfo_key . '%';
                $identifier_list[] = '%grn.common.uum.user.userinfo.'
                                     . $userinfo_key . '%';
            }
        }

        //from GRN_UserItem (Extension Item)
        $item_list = $this->listItems();
        foreach (array_keys($item_list) as $item_id) {
            if ($item_list[$item_id]->get('type') !== 'file') {
                $item_key = $item_list[$item_id]->get('id');
                $identifier_list[] = '%grn.common.login.login.extension.'
                                     . $item_key . '%';
                $identifier_list[] = '%grn.common.uum.user.extension.'
                                     . $item_key . '%';
            }
        }

        return $identifier_list;
    }

    /**
     * %...%形式の識別子とその値のリストを返す（OID版）
     *
     * @param  string $id_list       //Object ID List
     * @param  bool   $hide_password //Hide Password
     *
     * @return array  $identifier_value_list    //Identifier Value List
     */
    function getIdentifierValueList($id_list = null, $hide_password = true)
    {
        $identifier_value_list = [];
        if (is_array($id_list)) {
            foreach ($id_list as $id_name => $id_value) {
                //Get Target Object
                switch ($id_name) {
                    case 'login':
                        $object = $this->getLoginUser();
                        $target_class = 'login';
                        break;
                    case 'user':
                        $object = $this->getUser($id_value);
                        $target_class = 'user';
                        break;
                    case 'group':
                        $isUseLocal = false;
                        $object = $this->getGroup($id_value, $isUseLocal);
                        $target_class = 'group';
                        break;
                    case 'role':
                        $object = $this->getStaticRole($id_value);
                        $target_class = 'role';
                        break;
                    default:
                        $object = null;
                        $target_class = null;
                        break;
                }

                //Call Identifier Value List With Object
                if (is_object($object)) {
                    $identifier_value_list
                        = $identifier_value_list
                          + $this->getIdentifierValueListWithObject($object,
                            $target_class, $hide_password);
                }
            }
        }

        //Return Identifier Value
        return $identifier_value_list;
    }


    /**
     * %...%形式の識別子とその値のリストを返す（Object版）
     *
     * @param  CB_User|CB_Group|CB_Role $object        //Object
     * @param  string|null              $object_type
     * @param  bool                     $hide_password //Hide Password
     *
     * @return array                                              //Identifier Value List
     */
    function getIdentifierValueListWithObject(
        $object,
        $object_type = null,
        $hide_password = true
    ) {
        //Check Target Object
        $class_name = strtolower(get_class($object));
        switch ($class_name) {
            case 'cb_user':
                $target_class = 'user';
                if ($object_type === 'login') {
                    $target_class = 'login';
                }
                break;
            case 'cb_group':
                $target_class = 'group';
                break;
            case 'cb_role':
                $target_class = 'role';
                break;
            default:
                $target_class = null;
                break;
        }

        //Get Target Object Property List
        $identifier_value_list = [];
        $identifier_list = $this->getIdentifierlist();

        foreach ($identifier_list as $identifier) {
            $identifier_items = explode('.', $identifier);
            if ($identifier_items[3] === $target_class) {
                switch ($identifier_items[4]) {
                    case 'extension':
                        //Extention Item
                        $identifier_items[5] = str_replace('%', '',
                            $identifier_items[5]);
                        $extension_item_data
                            = $this->getExtensionItemData($object,
                            $identifier_items[5], false, $hide_password);
                        $identifier_value_list[$identifier]
                            = $extension_item_data['value'];
                        break;
                    case 'userinfo':
                        //Extention Item
                        $identifier_items[5] = str_replace('%', '',
                            $identifier_items[5]);
                        $userinfo_item_data
                            = $this->getDefaultItemData($object,
                            $identifier_items[5]);
                        $identifier_value_list[$identifier]
                            = $userinfo_item_data['value'];
                        break;
                    default:
                        //Default Item
                        $identifier_items[4] = str_replace('%', '',
                            $identifier_items[4]);
                        if ($identifier_items[4] === 'id') {
                            $identifier_value_list[$identifier]
                                = $object->getOID();
                        } else {
                            if ($identifier_items[4]
                                == "display_name_language"
                            ) {
                                $identifier_value_list[$identifier]
                                    = CB_LanguageManager::getLanguageCode($object->get($identifier_items[4]));
                            } else {
                                $identifier_value_list[$identifier]
                                    = $object->get($identifier_items[4]);
                            }
                        }
                        break;
                }
            }
        }

        //Return Identifier Value
        return $identifier_value_list;
    }

    /**
     * JavaScript形式の識別子リストを返す
     *
     * @return array $javascript_identifier_list    //JavaScript Identifier List
     */
    function getJavaScriptIdentifierList()
    {
        //Get Identifier List
        $identifier_list = $this->getIdentifierList();

        //Remove "%" Character and Replace "." Character
        $javascript_identifier_list = [];
        foreach ($identifier_list as $identifier_value) {
            $javascript_identifier_value = str_replace('%', '',
                $identifier_list[$identifier_value]);
            $javascript_identifier_list[] = $javascript_identifier_value;
        }

        //Return JavaScript Identifier List
        return $javascript_identifier_list;
    }

    /**
     * JavaScript形式の識別子とその値のリストを返す(OID版)
     *
     * @param  string $id_list //Object ID List
     *
     * @return array  $javascript_identifier_value_list    //JavaScript Identifier Value List
     */
    function getJavaScriptIdentifierValueList($id_list = null)
    {
        //Get Identifier Value List
        $identifier_value_list = $this->getIdentifierValueList($id_list);

        //Remove "%" Character and Replace "." Character From Key
        $javascript_identifier_value_list = [];
        foreach (array_keys($identifier_value_list) as $identifier_value_key) {
            if ( ! is_object($identifier_value_list[$identifier_value_key])) {
                $javascript_identifier_value_key = str_replace('%', '',
                    $identifier_value_key);
                $javascript_identifier_value_key = str_replace('.', '_',
                    $javascript_identifier_value_key);
                $str
                    = htmlspecialchars($identifier_value_list[$identifier_value_key]);
                $str = mb_ereg_replace("\\\\",
                    "\\\\", $str);
                $str = mb_ereg_replace("\r\n",
                    '\r\n', $str);
                $str = mb_ereg_replace("\r", '\r',
                    $str);
                $str = mb_ereg_replace("\n", '\n',
                    $str);
                $javascript_identifier_value_list[$javascript_identifier_value_key]
                    = '"' . $str . '"';
            }
        }

        //Return JavaScript Identifier Value List
        return $javascript_identifier_value_list;
    }

    /**
     * JavaScript形式の識別子とその値のリストを返す(Object版)
     *
     * @param  object $object      //Target Object
     * @param  string $object_type //Optional Object Type
     *
     * @return array  $javascript_identifier_value_list    //JavaScript Identifier Value List
     */
    function getJavaScriptIdentifierValueListWithObject(
        &$object,
        $object_type = null
    ) {
        //Get Identifier Value List
        $identifier_value_list
            = $this->getIdentifierValueListWithObject($object, $object_type);

        //Remove "%" Character and Replace "." Character From Key
        $javascript_identifier_value_list = [];
        foreach (array_keys($identifier_value_list) as $identifier_value_key) {
            if ( ! is_object($identifier_value_list[$identifier_value_key])) {
                $javascript_identifier_value_key = str_replace('%', '',
                    $identifier_value_key);
                $javascript_identifier_value_key = str_replace('.', '_',
                    $javascript_identifier_value_key);
                $str
                    = htmlspecialchars($identifier_value_list[$identifier_value_key]);
                $str = mb_ereg_replace("\\\\",
                    "\\\\", $str);
                $str = mb_ereg_replace("\r\n",
                    '\r\n', $str);
                $str = mb_ereg_replace("\r", '\r',
                    $str);
                $str = mb_ereg_replace("\n", '\n',
                    $str);
                $javascript_identifier_value_list[$javascript_identifier_value_key]
                    = '"' . $str . '"';
            }
        }

        //Return JavaScript Identifier Value List
        return $javascript_identifier_value_list;
    }

    /**
     * SSO用の%...%形式の識別子リストを返す(表示名付き)
     *
     * @return array $identifier_list           //%...% Identifier List
     */
    function getSSOIdentifierList()
    {
        //Get Standard Identifier List
        $identifier_list = $this->getIdentifierList();
        //Create Extension Item Name List
        $extention_name_list = [];
        $item_list = $this->listItems();
        foreach (array_keys($item_list) as $item_id) {
            if ($item_list[$item_id]->get('type') !== 'file') {
                $item_key = $item_list[$item_id]->get('id');
                $item_name
                    = $item_list[$item_id]->get('display_name');
                $extention_name_list[$item_key] = $item_name;
            }
        }

        //Create UserInfo Item Name List
        $userinfo_name_list = [];
        $userinfo_list = $this->listDefaultItemIdsWithCategory('userinfo');
        //"position" is not used in SSO.
        $userinfo_list = array_diff($userinfo_list, ["position"]);

        foreach ($userinfo_list as $userinfo_key) {
            if ($userinfo_key != 'image' && $userinfo_key != 'primary_group'
                && $userinfo_key != 'attendee'
            ) {
                $userinfo_name_list[$userinfo_key]
                    = $this->getRealDefaultItemName($userinfo_key);
            }
        }

        //Create SSO Identifier List
        $sso_identifier_list = [];
        foreach ($identifier_list as $identifier) {
            $identifier_items = explode('.', $identifier);
            switch ($identifier_items[4]) {
                case 'extension':
                    //Extention Item
                    $extention_identifier = str_replace('%', '',
                        $identifier_items[5]);
                    $sso_identifier_list[cb_msg('grn.common',
                        '%' . $identifier_items[3] . '%') . ':'
                                         . $extention_name_list[$extention_identifier]]
                        = $identifier;
                    break;
                case 'userinfo':
                    //User Info Item
                    $userinfo_identifier = str_replace('%', '',
                        $identifier_items[5]);
                    $sso_identifier_list[cb_msg('grn.common',
                        '%' . $identifier_items[3] . '%') . ':'
                                         . $userinfo_name_list[$userinfo_identifier]]
                        = $identifier;
                    break;
                default:
                    //Default Item
                    $sso_identifier_list[cb_msg('grn.common',
                        '%' . $identifier_items[3] . '%') . ':'
                                         . cb_msg('grn.common', $identifier)]
                        = $identifier;
                    break;
            }
        }

        //Return SSO Identifier List
        return $sso_identifier_list;
    }

    /**
     * @param  CB_User $loginUserRow
     * @param  array   $target_user_info
     * @param  bool    $only_display_one_name
     * @param  bool    $not_use_setting
     *
     * @return string
     */
    public function getNameOf(
        $loginUserRow,
        $target_user_info,
        $only_display_one_name = false,
        $not_use_setting = false
    ) {
        require_once("fw/i18n/system_config.csp");
        if ( ! CB_I18N_SystemConfig::isNickname()) {
            return $target_user_info["col_display_name"];
        }

        if ( ! array_key_exists($loginUserRow->getOID(),
            static::$__user_name_cache)
        ) {
            require_once("fw/i18n/locale.csp");
            static::$__user_name_cache[$loginUserRow->getOID()] = [];
            $userNameLanguages
                = CB_LocaleManager::getUserNameLanguages($loginUserRow->getOID(),
                $not_use_setting, $only_display_one_name);
            foreach ($userNameLanguages as $userNameLanguage) {
                static::$__user_name_cache[$loginUserRow->getOID()][]
                    = $userNameLanguage->getLanguage();
            }
        }

        if (in_array($target_user_info["col_display_name_language"],
                static::$__user_name_cache[$loginUserRow->getOID()])
            || mb_strlen($target_user_info["col_nickname"]) == 0
        ) {
            if ($only_display_one_name) {
                return $target_user_info["col_display_name"];
            }

            require_once('grn/ui.csp');
            $manager = GRN_UIConfigManager::getInstance();
            $config = $manager->getUserConfig($loginUserRow);
            switch ($config->getUserNameFormat()) {
                case GRN_UIConfig::$SHOW_USER_NAME_ONLY:
                    return $target_user_info["col_display_name"];
                case GRN_UIConfig::$SHOW_USER_NAME_NICKNAME:
                    if (mb_strlen($target_user_info['col_nickname']) > 0) {
                        return "{$target_user_info['col_display_name']} ({$target_user_info['col_nickname']})";
                    }

                    return $target_user_info["col_display_name"];
                default:
                    return $target_user_info["col_display_name"];
            }
        } else {
            return $target_user_info["col_nickname"];
        }
    }

    /**
     * Login
     *
     * @return bool
     */
    function login()
    {
        return $this->_sp->login();
    }

    /**
     * The logic execute and return Ids array users temporary delete
     *
     * @return array
     */
    function getUserIdsTmpDelete()
    {
        $query = sprintf('SELECT _id FROM %s WHERE col_deleted IS NOT NULL ',
            $this->_user_table_name);
        $query = $this->_db->select_format($query, CB_DATABASE_NO_LOCK);
        $result = $this->_db->query($query);
        if ($result === false) {
            $this->_db->throwError(['query' => 'query failed: ' . $query]);
        }
        $users = [];
        $n = $this->_db->num_rows($result);

        for ($i = 0; $i < $n; $i++) {
            $r = $this->_db->fetch_assoc($result);
            $users[] = $r["_id"];
        }
        $this->_db->free_result($result);

        return $users;
    }

    function getUserIdsDelete($userIdsCompares)
    {
        if (is_array($userIdsCompares) && count($userIdsCompares) > 0) {
            $query = sprintf('SELECT _id FROM %s WHERE _id in(%s) ',
                $this->_user_table_name, implode(", ", $userIdsCompares));
            $query = $this->_db->select_format($query, CB_DATABASE_NO_LOCK);
            $result = $this->_db->query($query);
            if ($result === false) {
                $this->_db->throwError(['query' => 'query failed: ' . $query]);
            }
            $users = [];
            $n = $this->_db->num_rows($result);

            for ($i = 0; $i < $n; $i++) {
                $r = $this->_db->fetch_assoc($result);
                $users[] = $r["_id"];
            }
            $this->_db->free_result($result);

            return array_diff($userIdsCompares, $users);
        }

        return null;
    }

    /**
     * @param string $size
     * @param string $userId
     *
     * @return string
     */
    public function getUserImageLink($size, $userId)
    {
        $format
            = "SELECT thumb.col_file AS fileId, file.col_hash AS hash, file.col_name AS fileName, file.col_mime AS mime FROM tab_grn_user_thumbnail AS thumb LEFT JOIN tab_grn_filebody AS file ON thumb.col_file = file.col_file WHERE thumb.col_user='@S' AND thumb.col_size='@S'";
        $query = $this->_db->format($format, [$userId, $size]);
        $result = $this->_db->query($query);
        $url = "";
        if ($row = $this->_db->fetch_assoc($result)) {
            $extension = substr($row['fileName'],
                strpos($row['fileName'], '.'));
            // GRB-16824
            $prefix_url = cb_pageurl("grn/file_download");
            if ($prefix_url{strlen($prefix_url) - 1} == "?") {
                $prefix_url = substr($prefix_url, 0, strlen($prefix_url) - 1);
            }
            $url = $prefix_url
                   . "/-/{$row['fileName']}?uid={$userId}&fid={$row['fileId']}&mime={$row['mime']}&hash={$row['hash']}&{$extension}";
            // end GRB-16824
        }

        return $url;
    }

    /**
     * @param string $size
     * @param array  $usersId
     *
     * @return string
     */
    public function getUsersImageLink($size, $usersId)
    {
        $ret = [];
        if (is_array($usersId) && count($usersId) > 0) {
            $condition = cb_queryf($this->_dbconn,
                " WHERE thumb.col_user IN (@A) ", $usersId);
            $condition .= cb_queryf($this->_dbconn,
                "  AND thumb.col_size='@S' ", $size);

            $format
                = "SELECT thumb.col_user as userId, thumb.col_file AS fileId, file.col_hash AS hash, file.col_name AS fileName, file.col_mime AS mime FROM tab_grn_user_thumbnail AS thumb LEFT JOIN tab_grn_filebody AS file ON thumb.col_file = file.col_file ";

            $query = $format . $condition;
            $result = $this->_db->query($query);
            while ($row = $this->_dbconn->fetch_assoc($result)) {
                $url = "";
                $extension = substr($row['fileName'],
                    strpos($row['fileName'], '.'));
                // GRB-16824
                $prefix_url = cb_pageurl("grn/file_download");
                if ($prefix_url{strlen($prefix_url) - 1} == "?") {
                    $prefix_url = substr($prefix_url, 0,
                        strlen($prefix_url) - 1);
                }
                $url = $prefix_url
                       . "/-/{$row['fileName']}?uid={$row['userId']}&fid={$row['fileId']}&mime={$row['mime']}&hash={$row['hash']}&{$extension}";
                // end GRB-16824
                $ret[$row['userId']] = $url;
            }
        }

        return $ret;
    }

    /**
     * @param $userId
     * @param $path
     *
     * @return void
     */
    private function setUserThumbnail($userId, $path)
    {
        $this->setSmallUserThumbnail($userId, $path);
        $this->setLargeUserThumbnail($userId, $path);
    }

    /**
     * @param $userId
     * @param $path
     */
    private function setSmallUserThumbnail($userId, $path)
    {
        $util = new ThumbnailUtil();
        $util->setAspectRatio(ThumbnailUtil::ASPECT_RATIO_SQUARE);
        $util->setForcePng(true);
        $tmpPath = cb_tmpdir() . "/" . GRN_ControllerUtil::ICON_SIZE_SMALL . "_"
                   . $userId . '.png';
        $util->setSaveFilePath($tmpPath);
        $ret = $util->makeThumbnailByFile($path,
            GRN_ControllerUtil::THUMBNAIL_SMALL,
            GRN_ControllerUtil::THUMBNAIL_SMALL);
        $size = ($ret) ? strlen(file_get_contents($tmpPath)) : 0;
        if ($size === 0) {
            return;
        }
        $image = [
            'name'     => GRN_ControllerUtil::ICON_SIZE_SMALL . '.png',
            'type'     => 'image/png',
            'tmp_name' => $tmpPath,
            'error'    => 0,
            'size'     => $size
        ];
        $file = grn_create_simple_file($this->getLoginUser(), $image,
            'User\'s small thumbnail', true);
        $this->setUserThumbnailRelation($userId, $file->getOID(),
            GRN_ControllerUtil::ICON_SIZE_SMALL);
    }

    /**
     * @param $userId
     * @param $path
     */
    private function setLargeUserThumbnail($userId, $path)
    {
        $util = new ThumbnailUtil();
        $util->setAspectRatio(ThumbnailUtil::ASPECT_RATIO_SQUARE);
        $util->setForcePng(true);
        $tmpPath = cb_tmpdir() . "/" . GRN_ControllerUtil::ICON_SIZE_LARGE . "_"
                   . $userId . '.png';
        $util->setSaveFilePath($tmpPath);
        $ret = $util->makeThumbnailByFile($path,
            GRN_ControllerUtil::THUMBNAIL_LARGE,
            GRN_ControllerUtil::THUMBNAIL_LARGE);
        $size = ($ret) ? strlen(file_get_contents($tmpPath)) : 0;
        if ($size === 0) {
            return;
        }
        $image = [
            'name'     => GRN_ControllerUtil::ICON_SIZE_LARGE . '.png',
            'type'     => 'image/png',
            'tmp_name' => $tmpPath,
            'error'    => 0,
            'size'     => $size
        ];
        $file = grn_create_simple_file($this->getLoginUser(), $image,
            'User\'s large thumbnail', true);
        $this->setUserThumbnailRelation($userId, $file->getOID(),
            GRN_ControllerUtil::ICON_SIZE_LARGE);
    }

    /**
     * @param $userId
     */
    public function deleteUserThumbnail($userId)
    {
        $this->deleteUserThumbnailFile($userId);
        $this->deleteUserThumbnailRelation($userId);
    }

    private function deleteAllThumbnail()
    {
        $this->deleteAllThumbnailFile();
        $this->deleteAllThumbnailRelation();
    }

    /**
     * @param $userId
     */
    private function deleteUserThumbnailFile($userId)
    {
        $thumbnailFileIds = $this->getUserThumbnailIds($userId);
        $this->deleteThumbnailFile($thumbnailFileIds);
    }

    private function deleteAllThumbnailFile()
    {
        $thumbnailIds = $this->getAllThumbnailIds();
        $this->deleteThumbnailFile($thumbnailIds);
    }

    /**
     * @param array $ids
     */
    private function deleteThumbnailFile($ids)
    {
        assert('is_array($ids)');
        foreach ($ids as $id) {
            require_once('grn/file.csp');
            $fileManager = GRN_FileManager::getInstance();
            /** @var $fileTable GRN_TableInfo */
            $fileTable = $fileManager->getFileTable();
            $file = $fileTable->getRow($id);
            if ($file) {
                $file->delete();
            }
        }
    }

    /**
     * @param $userId
     */
    private function deleteUserThumbnailRelation($userId)
    {
        $format = "DELETE FROM tab_grn_user_thumbnail WHERE col_user='@S'";
        $query = $this->_db->format($format, [$userId]);
        $this->_db->query($query);
    }

    private function deleteAllThumbnailRelation()
    {
        $this->_db->query("DELETE FROM tab_grn_user_thumbnail");
    }

    /**
     * @param $userId
     * @param $fileId
     * @param $size
     */
    private function setUserThumbnailRelation($userId, $fileId, $size)
    {
        $format
            = "INSERT INTO tab_grn_user_thumbnail SET col_user='@S', col_file='@S', col_size='@S'";
        $query = $this->_db->format($format, [$userId, $fileId, $size]);
        $this->_db->query($query);
    }

    private function getAllThumbnailIds()
    {
        $result
            = $this->_db->query("SELECT col_file FROM tab_grn_user_thumbnail");
        $thumbnailFileIds = [];
        while ($row = $this->_db->fetch_assoc($result)) {
            $thumbnailFileIds[] = $row['col_file'];
        }

        return $thumbnailFileIds;
    }

    public function initializeThumbnail()
    {
        // 全サムネイルの削除
        $this->deleteAllThumbnail();
        // 全員分のプロフィール画像(ユーザー情報)取得
        $usersInfo = $this->getAllUsersInfo(['image']);
        // プロフィール画像が設定されていれば、サムネイル作成
        foreach ($usersInfo as $userId => $userInfo) {
            /** @var $image GRN_File */
            $image = $userInfo['image'];
            if ( ! $image) {
                continue;
            }
            $file = $image->getCurrentBody();
            assert('! is_null($file)');
            $this->setUserThumbnail($userId, $file->getPath());
        }
    }

    /**
     * @param array $columns
     *
     * @return array
     */
    private function getAllUsersInfo($columns)
    {
        assert('is_array($columns)');
        $table = $this->_getInfoTable('user');
        $rowset = new CB_RowSet($table);
        $ret = [];
        while ($row = $rowset->iterate()) {
            $user = $row->get('user');
            if ( ! $user) {
                continue;
            }
            $id = $user->getOID();
            if (array_key_exists($id, $ret)) {
                continue;
            }
            foreach ($columns as $column) {
                $ret[$id][$column] = $row->get($column);
            }
        }

        return $ret;
    }

    /**
     * @param string $userId
     *
     * @return array
     */
    public function getUserThumbnailIds($userId)
    {
        $format
            = "SELECT col_file FROM tab_grn_user_thumbnail WHERE col_user='@S'";
        $query = $this->_db->format($format, [$userId]);
        $result = $this->_db->query($query);
        $thumbnailFileIds = [];
        while ($row = $this->_db->fetch_assoc($result)) {
            $thumbnailFileIds[] = $row['col_file'];
        }

        return $thumbnailFileIds;
    }

    /**
     * @param CB_User $user
     *
     * @return string
     */
    public function getOnlyOneNameByUserObject(CB_User $user)
    {
        $user_info_format = [
            'col_display_name'          => 'display_name',
            'col_display_name_language' => 'display_name_language',
            'col_nickname'              => 'nickname',
        ];

        $user_info = [];
        foreach ($user_info_format as $col => $val) {
            $user_info[$col] = $user->get($val);
        }

        return $this->getNameOf($this->getLoginUser(), $user_info, true);
    }

    /**
     * Get list of columns which should be obtained
     * when instantiate CB_User object by using CB_TableInfo->get() method.
     *
     * @param string $table_alias_name
     *
     * @return string[]
     */
    protected function getInstanceColumnsOfCbUser($table_alias_name)
    {
        $columns = [
            '_id',
            'col_display_name',
            'col_deleted',
            'col_foreign_key',
            'col_nickname',
            'col_display_name_language',
            'col_email_address',
            'col_slash'
        ];

        $columns_with_table_alias = [];
        foreach ($columns as $column) {
            $columns_with_table_alias[] = $table_alias_name . '.' . $column;
        }

        return $columns_with_table_alias;
    }

    /**
     * @return bool
     */
    public function isForeignKeyPublic(): bool
    {
        return (bool)$this->getDefaultItemProperty('foreign_key')['show'];
    }
}
