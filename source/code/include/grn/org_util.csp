<?php

/**
 *  ビュー生成用の組織/ユーザー情報取得API
 *
 * @version    1.0
 * @package    grn.common
 * @author     HATA,Shinya
 */

use grn\system\sandbox\GRN_ControllerUtilSandbox;
use grn\system\sandbox\GRN_Uum_Sandbox;
use grn\system\sandbox\GRN_UumUtil_Sandbox;
use grn\system\sandbox\GRN_Uum_SearchSandbox;
use grn\system\sandbox\SandboxConstants;
use grn\grn\access\service\AppAccess;

/**
 *  組織オブジェクトを取得
 *
 * @param  string  org_id  組織ID
 *
 * @return object          組織オブジェクト
 */
function grn_get_org_row($org_id, $sandbox = SandboxConstants::NO_SANDBOX_MODE)
{
    if ( ! $org_id) {
        $ret = null;

        return $ret;
    }

    if ($sandbox === SandboxConstants::NO_SANDBOX_MODE) {
        $uum = cb_lwc_uum();
    } else {
        $uum = GRN_Uum_Sandbox::getInstance();
    }

    $row = $uum->getGroup($org_id);
    if ( ! $row) {
        cb_throw_error(E_GRN_GROUP_NOT_FOUND);
    }

    return $row;
}

/**
 *  組織情報（連想配列）を取得
 *
 * @param  CB_Group $org_row  組織オブジェクト
 * @param  boolean  $get_path 組織名（フルパス）の取得の可否
 * @param  boolean  $get_full 組織コード、メモの取得の可否
 * @param int       $sandbox
 *
 * @return array               組織情報（連想配列）
 *
 *  org['oid']          組織ID
 *  org['name']         組織名
 *  org['path']         組織名（フルパス）、例：事業推進部>開発部>PG
 *  org['foreign_key']  組織コード
 *  org['description']  メモ
 */
function &grn_get_org_info(
    $org_row,
    $get_path = false,
    $get_full = false,
    $sandbox = SandboxConstants::NO_SANDBOX_MODE
) {
    if ($sandbox === SandboxConstants::NO_SANDBOX_MODE) {
        require_once('grn/uum_util.csp');
        $uum_util = GRN_UumUtil::getInstance();
    } else {
        $uum_util = GRN_UumUtil_Sandbox::getInstance();
    }

    $org = [];

    if ( ! $org_row) {
        return $org;
    }

    $org_id = $org_row->getOID();
    $org['oid'] = $org_id;
    $org['name'] = $org_row->get('name');
    if ($get_path) {
        $org['path'] = $uum_util->getGroupPathString($org_id);
    }
    if ($get_full) {
        $org['foreign_key'] = $org_row->get('foreign_key');
        $org['description'] = $org_row->get('description');
    }

    return $org;
}

/**
 *  先祖組織一覧を取得
 *
 * @param  CB_Group $org_row 組織オブジェクト
 *
 * @return array               先祖組織一覧（先頭は（ルート））
 *
 *  ancestors[]['oid']          先祖組織ID
 *  ancestors[]['name']         先祖組織名
 *  連想配列ではなく単純配列なので、先祖組織IDがキーとなっていない
 */
function &grn_get_org_ancestors($org_row)
{
    $ancestors = [];

    if ( ! $org_row) {
        return $ancestors;
    }

    $parent = $org_row;
    while ($parent = $parent->getParent()) {
        $item = ['oid' => $parent->getOID(), 'name' => $parent->get('name')];
        array_unshift($ancestors, $item);
    }

    return $ancestors;
}

/**
 *  子組織一覧を取得
 *
 * @param  string  $org_id          組織ID
 * @param  boolean $get_child_count 子組織の子組織数の取得の可否
 * @param int      $sandbox
 *
 * @return array                   子組織一覧
 *
 *  children[(oid)]['oid']          子組織ID
 *  children[(oid)]['name']         子組織名
 *  children[(oid)]['child_count']  子組織の子組織数
 */
function &grn_get_org_children(
    $org_id,
    $get_child_count = false,
    $sandbox = SandboxConstants::NO_SANDBOX_MODE
) {
    if ($sandbox === SandboxConstants::NO_SANDBOX_MODE) {
        $uum = cb_lwc_uum();
    } else {
        $uum = GRN_Uum_Sandbox::getInstance();
    }

    if ($org_id) {
        // (for non-root)
        $child_rows = $uum->getChildGroupsInfo($org_id);
    } else {
        // (for root)
        $child_rows = $uum->getChildGroupsInfo();
    }

    $groups_have_childs = [];
    if ($get_child_count) {
        $groups_have_childs = $uum->getChildGroupsCountInfo();
    }

    $children = [];
    foreach (array_keys($child_rows) as $id) {
        $children[$id] = [
            'oid'  => $child_rows[$id]['_id'],
            'name' => $child_rows[$id]['col_name']
        ];
        if ($get_child_count) {
            if (array_key_exists($id, $groups_have_childs)) {
                $children[$id]['child_count'] = $groups_have_childs[$id];
            }
        }
    }

    return $children;
}

/**
 *  親組織を取得
 *
 * @param  CB_Group $org_row 組織オブジェクト
 * @param  boolean get_path    組織名（フルパス）の取得の可否
 *
 * @return array
 *
 *  parent['oid']               親組織ID
 *  parent['name']              親組織名
 *  parent['path']              親組織名（フルパス）
 */
function &grn_get_org_parent(
    $org_row,
    $get_path = false,
    $sandbox = SandboxConstants::NO_SANDBOX_MODE
) {
    if ( ! $org_row) {
        $ret = null;

        return $ret;
    }

    $parent_row = $org_row->getParent();
    if ( ! $parent_row) {
        $ret = null;

        return $ret;
    }

    $parent_oid = $parent_row->getOID();
    $parent = [
        'oid'  => $parent_oid,
        'name' => $parent_row->get('name'),
    ];
    if ($get_path) {
        if ($sandbox === SandboxConstants::SANDBOX_MODE) {
            $uum_util = GRN_UumUtil_Sandbox::getInstance();
        } else {
            require_once('grn/uum_util.csp');
            $uum_util = GRN_UumUtil::getInstance();
        }
        $parent['path'] = $uum_util->getGroupPathString($parent_oid);
    }

    return $parent;
}

/**
 *  組織の所属ユーザーのN件ナビゲーション情報を取得
 *
 * @param  string $org_id         組織ID
 * @param  array  $params         CGIパラメータ
 * @param  int    $number_on_page 一覧表示件数
 * @param int     $sandbox        組織の時限反映モードかどうか
 *
 * @return array                   N件ナビゲーション情報
 *
 *  navigation_info['count']        総件数
 *  navigation_info['offset']       開始位置
 *  navigation_info['limit']        一覧表示件数
 */
function grn_get_user_list_info(
    $org_id,
    $params,
    $number_on_page = null,
    $sandbox = SandboxConstants::NO_SANDBOX_MODE
) {
    if ($sandbox === SandboxConstants::NO_SANDBOX_MODE) {
        $uum = cb_lwc_uum();
    } else {
        $uum = GRN_Uum_Sandbox::getInstance();
    }

    // count of user belonging to the selected group
    if (-2 == $org_id) {
        $group_user_count = $uum->getDeactiveUserCount();
    } elseif (0 > $org_id) {
        $group_user_count = $uum->getNoGroupUserCount();
    } else {
        $group_user_count = $uum->getGroupUserCount($org_id);
    }
    if (false === $group_user_count) {
        cb_throw_error(E_GRN_GROUP_NOT_FOUND);
    }

    return grn_get_user_navigation_info($group_user_count, $params,
        $number_on_page);
}

/**
 *  組織の所属ユーザー一覧を取得
 *
 * @param  string $org_id          組織ID（'-1'の場合、組織に未所属のユーザー一覧）
 * @param  array  $navigation_info N件ナビゲーション情報
 * @param null    $app_id
 * @param int     $sandbox
 *
 * @return array                       所属ユーザー一覧
 *
 *  user_list[(uid)]['uid']             ユーザーID
 *  user_list[(uid)]['display_name']    ユーザー名
 *  user_list[(uid)]['position']        表示優先度
 *  user_list[(uid)]['foreign_key']     ログイン名
 *  user_list[(uid)]['row']             ユーザーオブジェクト
 */
function grn_get_user_list(
    $org_id,
    & $navigation_info,
    $app_id = null,
    $sandbox = SandboxConstants::NO_SANDBOX_MODE
) {
    if ($sandbox === SandboxConstants::NO_SANDBOX_MODE) {
        $uum = cb_lwc_uum();
    } else {
        $uum = GRN_Uum_Sandbox::getInstance();
    }

    $login_user = cb_get_login_user();

    if (-2 == $org_id) {
        $user_rows = $uum->getDeactiveUsers($navigation_info['offset'],
            $navigation_info['limit']);
    } elseif (0 > $org_id) {
        $user_rows = $uum->getNoGroupUsers($navigation_info['offset'],
            $navigation_info['limit']);
    } else {
        $user_rows = $uum->getGroupUsers($org_id, $navigation_info['offset'],
            $navigation_info['limit']);
    }
    if (false === $user_rows) {
        cb_throw_error(E_GRN_GROUP_NOT_FOUND);
    }

    require_once("grn/controller.csp");
    if ($sandbox === SandboxConstants::NO_SANDBOX_MODE) {
        $users_info
            = GRN_ControllerUtil::getUserInfoToShowUserName(array_keys($user_rows),
            $login_user, $app_id);
    } else {
        $users_info
            = GRN_ControllerUtilSandbox::getUserInfoToShowUserName(array_keys($user_rows),
            $login_user, $app_id);
    }

    $user_list = [];
    $login_id = $login_user->getOID();
    foreach (array_keys($user_rows) as $id) {
        $user = $user_rows[$id];

        if ($app_id != null && array_key_exists($id, $users_info)
            && array_key_exists("col_using_app", $users_info[$id])
            && is_null($users_info[$id]["col_using_app"])
        ) {
            continue;
        }

        if ($sandbox === SandboxConstants::NO_SANDBOX_MODE) {
            $display_name = GRN_ControllerUtil::getUserNameText($login_id, $id,
                $users_info);
        } else {
            $display_name
                = GRN_ControllerUtilSandbox::getUserNameText($login_id, $id,
                $users_info);
        }

        $user_list[$id] = [
            'uid'          => $id,
            'display_name' => $display_name,
            'position'     => $users_info[$id]['col_position'],
            'foreign_key'  => $users_info[$id]['col_foreign_key'],
            'valid'        => is_null($users_info[$id]['col_valid']) ? true
                : false,
            'row'          => $user,
        ];
    }

    return $user_list;
}

function grn_get_group_by_application(
    $org_id,
    $app_id = null,
    $params,
    $number_on_page = null,
    & $navigation_info
) {
    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');
    $login_user = $uum->getLoginUser();
    $login_id = $login_user->getOID();

    if (0 > $org_id) {
        $user_rows = $uum->getNoGroupIdUsers();
    } else {
        $user_rows = $uum->getGroupUsersId($org_id);
    }
    if (false === $user_rows) {
        cb_throw_error(E_GRN_GROUP_NOT_FOUND);
    }

    if (isset($app_id)) {
        $user_rows = AppAccess::filterUserIdsInternalAccessByAppId($user_rows,
            $app_id);
    }

    require_once("grn/controller.csp");

    $navigation_info = grn_get_user_navigation_info(count($user_rows), $params,
        $number_on_page);
    $user_rows = array_values($user_rows);
    $result = [];
    if ($navigation_info['count'] > 0) {
        $uid_list = array_slice($user_rows,
            $navigation_info['start_count'] - 1,
            $navigation_info['end_count'] - 1);
        $users_info = GRN_ControllerUtil::getUserInfoToShowUserName($uid_list,
            $login_user);

        $count_loop = $navigation_info['end_count'];
        for ($i = $navigation_info['start_count'] - 1; $i < $count_loop; $i++) {
            $uid = $user_rows[$i];
            $user = $uum->getUser($uid);
            $result[$uid] = [
                'uid'          => $uid,
                'display_name' => GRN_ControllerUtil::getUserNameText($login_id,
                    $uid, $users_info),
                'position'     => $user->get('position'),
                'foreign_key'  => $user->get('foreign_key'),
                'valid'        => is_null($user->get('valid')) ? true : false,
                'row'          => $user,
            ];
        }
    }

    return $result;
}

/***
 * @param $org_id specify a group id
 * @param $app_id required param, this is an application id
 *
 * @return array return array users info
 */
function grn_get_users_by_group_id_and_app_id($org_id, $app_id)
{
    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');
    $login_user = $uum->getLoginUser();
    $users_info = [];
    if ($org_id < 0) {
        $user_rows = $uum->getNoGroupIdUsers();
    } else {
        $user_rows = $uum->getGroupUsersId($org_id);
    }
    if ($user_rows === false) {
        cb_throw_error(E_GRN_GROUP_NOT_FOUND);
    }
    if ( ! isset($app_id) || empty($app_id)) {
        return $users_info;
    }
    $user_ids = AppAccess::filterUserIdsInternalAccessByAppId($user_rows,
        $app_id);
    if (count($user_ids) > 0) {
        $user_ids = array_values($user_ids);
        $users_info = GRN_ControllerUtil::getUserInfoToShowUserName($user_ids,
            $login_user);
    }

    return $users_info;
}

/**
 *  ユーザー検索条件式（SQL用）を取得
 *
 * @param  string  $org_id      組織ID
 * @param  string  $search_text 検索文字列
 * @param  boolean $system_flg  検索対象にログイン名を含むかどうか
 *
 * @return string              検索条件式（SQL用）
 */
function grn_get_user_search_condition(
    $org_id,
    $search_text,
    $system_flg = false
) {
    global $G_container_base;
    $dbconn = $G_container_base->getInstance('dbconn');

    $query = 'LIKE ';

    require_once('fw/string_util.csp');
    $texts = cb_parse_search_text($search_text);
    //$texts = explode( ' ', $search_text );
    $conditions = [];
    foreach ($texts as $text) {
        if (0 < strlen($text)) {
            $format
                = "( tab_cb_user.col_display_name @S '%@L%' ) OR ( tab_cb_user.col_email_address @S '%@L%' ) OR ( tab_cb_user.col_normalized_sort_key @S '%@L%' )";
            if ($system_flg) {
                $format .= " OR ( tab_cb_user.col_foreign_key @S '%@L%' )";
                $format = "( " . $format . " )";
                $conditions[] = cb_queryf($dbconn, $format, $query, $text,
                    $query, $text, $query, cb_normalize_sort_key($text), $query,
                    $text);
            } else {
                $format = "( " . $format . " )";
                $conditions[] = cb_queryf($dbconn, $format, $query, $text,
                    $query, $text, $query, cb_normalize_sort_key($text));
            }
        }
    }
    $condition = implode(' AND ', $conditions);

    return $condition;
}

/**
 *  ユーザー検索のヒット件数を取得
 *
 * @param  string $org_id    組織ID
 * @param  string $condition 検索条件式
 *
 * @return int                 ヒット件数
 */
function grn_get_user_search_count($org_id, $condition)
{
    require_once('fw/string_util.csp');
    if (strlen(cb_trim($condition)) < 1) {
        return 0;
    }

    $uum = cb_lwc_uum();

    if (is_array($org_id)) {
        return $uum->getGroupsUserCount($org_id, $condition);
    } elseif (0 == strlen($org_id)) {
        return $uum->getUserCountWithCondition($condition);
    } elseif (0 > $org_id) {
        return $uum->getNoGroupUserCount($condition);
    } else {
        return $uum->getGroupUserCount($org_id, $condition);
    }
}

/**
 *  ユーザー一覧のN件ナビゲーション情報を取得
 *
 * @param  int   $user_count     ユーザー数
 * @param  array $params         CGIパラメータ
 * @param  int   $number_on_page 一覧件数
 *
 * @return array                   N件ナビゲーション情報
 *
 *  navigation_info['count']        総件数
 *  navigation_info['offset']       開始位置
 *  navigation_info['limit']        一覧表示件数
 */
function grn_get_user_navigation_info(
    $user_count,
    $params,
    $number_on_page = null
) {
    //--number on page
    if (is_null($number_on_page)) {
        $login = cb_get_login_user();

        require_once('grn/ui.csp');
        $ucm = GRN_UIConfigManager::getInstance();
        $uc = $ucm->getUserConfig($login);
        $number_on_page = $uc->getListMax();
    }

    //--N-navigation
    require_once('grn/controller.csp');
    $controller_util = new GRN_ControllerUtil();
    assert('! is_null( $controller_util )');

    //--current position
    $current_start_position = $controller_util->getNaviStartPosition();
    //--save to session
    $controller_util->setNaviStartPosition($current_start_position);

    // n件ナビゲーション情報を取得する
    return $controller_util->makeNaviInformation($current_start_position,
        $number_on_page, $user_count, $params);
}

/**
 *  組織情報、および所属ユーザー一覧、もしくはロール一覧を取得
 *
 * @param  string $poid   組織ID or 'role'
 * @param  array  $params CGIパラメータ
 * @param         $number_on_page
 *
 * @return array               一覧情報
 */
function &grn_get_user_or_role_list($poid, $params, $number_on_page)
{
    $org = [];

    if ($poid == 'role') {
        //(for role list)

        require_once('grn/uum_util.csp');
        $uum_util = GRN_UumUtil::getInstance();
        $dynamic_roles = $uum_util->listDynamicRoles();
        $org['dynamic_role_list'] = [];
        foreach (array_keys($dynamic_roles) as $id) {
            $org['dynamic_role_list'][$id] = [
                'rid'         => $id,
                'foreign_key' => $id
            ];
        }

        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $static_roles = $uum->listStaticRoles();
        $org['static_role_list'] = [];
        foreach (array_keys($static_roles) as $id) {
            $org['static_role_list'][$id] = [
                'rid'         => $id,
                'foreign_key' => $static_roles[$id]->get('foreign_key')
            ];
        }
    } elseif (0 > $poid) {
        //(for nogroup users)
        //--N-navigation
        $org['navi_info'] = grn_get_user_list_info($poid, $params,
            $number_on_page);
        //--user list
        $org['user_list'] = grn_get_user_list($poid, $org['navi_info']);
    } else {
        //(for organization (include root))
        $org_row = grn_get_org_row($poid);
        $org =& grn_get_org_info($org_row, true);
        $org['ancestors'] =& grn_get_org_ancestors($org_row);
        $org['children'] =& grn_get_org_children($poid);

        // user list
        if ($poid) {
            //--N-navigation
            $org['navi_info'] = grn_get_user_list_info($poid, $params,
                $number_on_page);
            //--user list
            $org['user_list'] = grn_get_user_list($poid, $org['navi_info']);
        }
    }

    return $org;
}

/**
 * ロール一覧を取得  GTM-2226
 *
 * @param  string $role_search_text
 *
 * @return array  ロール一覧情報
 */
function &grn_search_role_list($role_search_text)
{
    $org = [];
    //DynamicRolesList
    require_once('grn/uum_util.csp');
    $uum_util = GRN_UumUtil::getInstance();
    $dynamic_roles = $uum_util->listDynamicRoles();
    $org['dynamic_role_list'] = [];
    $texts = cb_parse_search_text($role_search_text);
    foreach (array_keys($dynamic_roles) as $id) {
        $is_matched = true;
        foreach ($texts as $text) {
            if (0 < strlen($text)) {
                if (stristr($id, $text) == "") {
                    $is_matched = false;
                }
            }
        }
        if ($is_matched) {
            $org['dynamic_role_list'][$id] = [
                'rid'         => $id,
                'foreign_key' => $id
            ];
        }
    }
    //StaticRolesList
    require_once('grn/uum_util_search.csp');
    $uum_util = GRN_UumUtil_Search::getInstance();
    $org['static_role_list'] = $uum_util->searchStaticRole($role_search_text);

    return $org;
}

/**
 * @param string $org_id
 * @param int    $sandbox
 *
 * @return array
 */
function grn_get_user_ids($org_id, $sandbox = SandboxConstants::NO_SANDBOX_MODE)
{
    if ($sandbox === SandboxConstants::NO_SANDBOX_MODE) {
        require_once('grn/uum_search.csp');
        $uum_search = new GRN_Uum_Search();
    } else {
        $uum_search = new GRN_Uum_SearchSandbox();
    }

    $from_all_users = (0 == strlen($org_id));
    $from_deactive_users = (0 == strlen($org_id));
    $from_no_group_users = (0 > $org_id);
    $from_my_group_users = (mb_substr($org_id, 0, 1) == 'm');

    if ($from_all_users) {
        $user_ids = $uum_search->getUserIds();
    } elseif ($from_deactive_users) {
        $user_ids = $uum_search->getDeactiveUserIds();
    } elseif ($from_no_group_users) {
        $user_ids = $uum_search->getNoGroupUserIds();
    } elseif ($from_my_group_users) {
        $my_group_id = mb_substr($org_id, 1);
        $user_ids = $uum_search->getMyGroupUserIds($my_group_id);
    } else {
        $user_ids = $uum_search->getGroupUserIds($org_id);
    }

    if ( ! is_array($user_ids)) {
        $user_ids = [];
    }

    return $user_ids;
}
