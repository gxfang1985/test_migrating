<?php

/**
 * The base system configuration logics.
 *
 * The purposes of this are:
 *  1) to structure the base system management,
 *  2) to provide the unit of privileges over the system management,
 *  3) and to structure the system help.
 *
 * @package grn.common
 */

use grn\grn\customization\CustomizationJsCssLoader;

require_once('fw/module.csp');
require_once('fw/persistent.csp');

define('GRN_SYSTEM_PRODUCTID_PREFIX', 'gr2');

define('GRN_SYSTEM_NOT_WARNING_BEFORE', '0');
define('GRN_SYSTEM_UNLIMITED_PASSWORD_EXPIRATION', '0');

/**
 * ACL table for subsystem administration.
 */
class GRN_SystemAdmin_SubSystem_User extends CB_PersistentBase
{
    function __construct(& $row)
    {
        parent::__construct($row);
    }

    var $col_user = ['type' => 'relation', 'to' => 'CB_User'];
}

class GRN_SystemAdmin_SubSystem_User_ACL extends CB_PersistentBase
{
    function __construct(& $row)
    {
        parent::__construct($row);
    }

    var $col_subsystem
        = [
            'type'   => 'char',
            'length' => CB_DATABASE_MAX_STRINDEX
        ];
    var $col_user
        = [
            'type' => 'relation',
            'to'   => 'GRN_SystemAdmin_SubSystem_User'
        ];
    var $idx_system_user = ['cols' => ['user', 'subsystem'], 'unique' => true];
}

class GRN_SystemAdmin_SubSystem_Group extends CB_PersistentBase
{
    function __construct(& $row)
    {
        parent::__construct($row);
    }

    var $col_group = ['type' => 'relation', 'to' => 'CB_Group'];

    /**
     * @param string $col_name
     *
     * @return bool|CB_Row|mixed
     */
    public function get($col_name)
    {
        $result = false;

        $table_info = $this->getTableInfo();
        $col_info = $table_info->getColumnInfo($col_name);
        if (is_null($col_info)) {
            return $result;
        }


        if ($col_name == 'group') {
            $isKeyExists = array_key_exists(CB_DATABASE_COLUMN_PREFIX
                                            . $col_name,
                $this->__row->_rawdata);
            $id = $isKeyExists
                ? $this->__row->_rawdata[CB_DATABASE_COLUMN_PREFIX . $col_name]
                : null;

            if ( ! is_null($id)) {
                require_once('fw/FwFacade.csp');
                require_once('fw/i18n.csp');

                $i18n = CB_I18N::getInstance();
                $table_info = $this->getTableInfo();
                $tableManager = $table_info->getTableManager();
                $relationTableName = $col_info['to'];
                $relationTableInfo
                    = $tableManager->getTableInfo($relationTableName);
                $relationTableLock = $relationTableInfo->_lock;

                $dao = new FwFacade();
                $dataObj = [];
                $dataObj['lock'] = $relationTableLock;
                $dataObj['language'] = $i18n->getCurrentLanguage();

                $groupData = $dao->referGroupById($dataObj, $id);
                $result = $relationTableInfo->getRow($groupData->getId(),
                    $groupData->convertArray());
            } else {
                $result = parent::get($col_name);
            }
        } else {
            $result = parent::get($col_name);
        }

        return $result;
    }
}

class GRN_SystemAdmin_SubSystem_Group_ACL extends CB_PersistentBase
{
    function __construct(& $row)
    {
        parent::__construct($row);
    }

    var $col_subsystem
        = [
            'type'   => 'char',
            'length' => CB_DATABASE_MAX_STRINDEX
        ];
    var $col_group
        = [
            'type' => 'relation',
            'to'   => 'GRN_SystemAdmin_SubSystem_Group'
        ];
    var $idx_system_group
        = [
            'cols'   => ['group', 'subsystem'],
            'unique' => true
        ];
}

class GRN_SystemAdmin_SubSystem_Role extends CB_PersistentBase
{
    function __construct(& $row)
    {
        parent::__construct($row);
    }

    var $col_role = ['type' => 'relation', 'to' => 'CB_Role'];
}

class GRN_SystemAdmin_SubSystem_Role_ACL extends CB_PersistentBase
{
    function __construct(& $row)
    {
        parent::__construct($row);
    }

    var $col_subsystem
        = [
            'type'   => 'char',
            'length' => CB_DATABASE_MAX_STRINDEX
        ];
    var $col_role
        = [
            'type' => 'relation',
            'to'   => 'GRN_SystemAdmin_SubSystem_Role'
        ];
    var $idx_system_role = ['cols' => ['role', 'subsystem'], 'unique' => true];
}

/**
 * ACL table for application administration.
 */
class GRN_SystemAdmin_Application_User extends CB_PersistentBase
{
    function __construct(& $row)
    {
        parent::__construct($row);
    }

    var $col_user = ['type' => 'relation', 'to' => 'CB_User'];
}

class GRN_SystemAdmin_Application_User_ACL extends CB_PersistentBase
{
    function __construct(& $row)
    {
        parent::__construct($row);
    }

    var $col_application
        = [
            'type'   => 'char',
            'length' => CB_DATABASE_MAX_STRINDEX
        ];
    var $col_user
        = [
            'type' => 'relation',
            'to'   => 'GRN_SystemAdmin_Application_User'
        ];
    var $idx_system_user
        = [
            'cols'   => ['user', 'application'],
            'unique' => true
        ];
}

class GRN_SystemAdmin_Application_Group extends CB_PersistentBase
{
    function __construct(& $row)
    {
        parent::__construct($row);
    }

    var $col_group = ['type' => 'relation', 'to' => 'CB_Group'];

    /**
     * @param string $col_name
     *
     * @return bool|CB_Row|mixed
     */
    public function get($col_name)
    {
        $result = false;

        $table_info = $this->getTableInfo();
        $col_info = $table_info->getColumnInfo($col_name);
        if (is_null($col_info)) {
            return $result;
        }


        if ($col_name == 'group') {
            $isKeyExists = array_key_exists(CB_DATABASE_COLUMN_PREFIX
                                            . $col_name,
                $this->__row->_rawdata);
            $id = $isKeyExists
                ? $this->__row->_rawdata[CB_DATABASE_COLUMN_PREFIX . $col_name]
                : null;

            if ( ! is_null($id)) {
                require_once('fw/FwFacade.csp');
                require_once('fw/i18n.csp');

                $i18n = CB_I18N::getInstance();
                $table_info = $this->getTableInfo();
                $tableManager = $table_info->getTableManager();
                $relationTableName = $col_info['to'];
                $relationTableInfo
                    = $tableManager->getTableInfo($relationTableName);
                $relationTableLock = $relationTableInfo->_lock;

                $dao = new FwFacade();
                $dataObj = [];
                $dataObj['lock'] = $relationTableLock;
                $dataObj['language'] = $i18n->getCurrentLanguage();

                $groupData = $dao->referGroupById($dataObj, $id);
                $result = $relationTableInfo->getRow($groupData->getId(),
                    $groupData->convertArray());
            } else {
                $result = parent::get($col_name);
            }
        } else {
            $result = parent::get($col_name);
        }

        return $result;
    }
}

class GRN_SystemAdmin_Application_Group_ACL extends CB_PersistentBase
{
    function __construct(& $row)
    {
        parent::__construct($row);
    }

    var $col_application
        = [
            'type'   => 'char',
            'length' => CB_DATABASE_MAX_STRINDEX
        ];
    var $col_group
        = [
            'type' => 'relation',
            'to'   => 'GRN_SystemAdmin_Application_Group'
        ];
    var $idx_system_group
        = [
            'cols'   => ['group', 'application'],
            'unique' => true
        ];
}

class GRN_SystemAdmin_Application_Role extends CB_PersistentBase
{
    function __construct(& $row)
    {
        parent::__construct($row);
    }

    var $col_role = ['type' => 'relation', 'to' => 'CB_Role'];
}

class GRN_SystemAdmin_Application_Role_ACL extends CB_PersistentBase
{
    function __construct(& $row)
    {
        parent::__construct($row);
    }

    var $col_application
        = [
            'type'   => 'char',
            'length' => CB_DATABASE_MAX_STRINDEX
        ];
    var $col_role
        = [
            'type' => 'relation',
            'to'   => 'GRN_SystemAdmin_Application_Role'
        ];
    var $idx_system_role
        = [
            'cols'   => ['role', 'application'],
            'unique' => true
        ];
}

/**
 * Abstract base class for base system configuration objects.
 *
 * @abstract
 * @package grn.common
 */
class GRN_SystemLogicBase extends CB_ModuleBase
{
    /**
     * @access private
     */
    var $_id;

    function __construct($id)
    {
        parent::__construct('grn.common.system.' . $id);
        $this->_id = $id;
    }

    function getId()
    {
        return $this->_id;
    }

    function getName()
    {
        return $this->getMessage('name');
    }

    /**
     * Return array of system configuration categories, and
     * contents of each category.  If the logic does not provide
     * any system configuration, this will return FALSE.
     *
     * "icon" may be omitted; in such case the system will use
     * "general32" icon.
     *
     * For each category key, you need to provide an I18N message
     * resource (for "grn.common.system.$id" module).
     * WARNING: You cannot use "name" as a category key, because
     *          "name" is reserved for the logic name string.
     *
     * The return value will look like:
     *   array( 'general' => array(  // array of pages
     *                               array('page'=>'system/$id/general1',
     *                                     'icon'=>'general32'),
     *                               array('page'=>'system/$id/general2',
     *                                     'icon'=>'general32'),
     *                                 ... ),
     *          'foobar'  => array(  array('page'=>'system/$id/foobar1',
     *                                     'icon'=>'general32'),
     *                               array('page'=>'system/$id/foobar2',
     *                                     'icon'=>'general32'),
     *                               ... ),
     *          ...);
     *
     * @return mixed   array, or FALSE if no system configuration.
     */
    function getConfigArray()
    {
        return false;
    }
}

/**
 *
 * @package grn.common
 */
class GRN_System extends CB_ModuleBase
{
    var $application_user_acl = null;
    var $subsystem_user_acl = null;

    function __construct()
    {
        $this->subsystem_user
            = cb_class2table('GRN_SystemAdmin_SubSystem_User');
        $this->subsystem_user_acl
            = cb_class2table('GRN_SystemAdmin_SubSystem_User_ACL');
        $this->application_user
            = cb_class2table('GRN_SystemAdmin_Application_User');
        $this->application_user_acl
            = cb_class2table('GRN_SystemAdmin_Application_User_ACL');

        $this->subsystem_group
            = cb_class2table('GRN_SystemAdmin_SubSystem_Group');
        $this->subsystem_group_acl
            = cb_class2table('GRN_SystemAdmin_SubSystem_Group_ACL');
        $this->application_group
            = cb_class2table('GRN_SystemAdmin_Application_Group');
        $this->application_group_acl
            = cb_class2table('GRN_SystemAdmin_Application_Group_ACL');

        $this->subsystem_role
            = cb_class2table('GRN_SystemAdmin_SubSystem_Role');
        $this->subsystem_role_acl
            = cb_class2table('GRN_SystemAdmin_SubSystem_Role_ACL');
        $this->application_role
            = cb_class2table('GRN_SystemAdmin_Application_Role');
        $this->application_role_acl
            = cb_class2table('GRN_SystemAdmin_Application_Role_ACL');
        parent::__construct('grn.common.system');
    }

    /**
     * @return GRN_System
     */
    public static function getInstance()
    {
        $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_System();
        }

        return $_instance;
    }

    /**
     * Initialize profile entries for the entire system.
     * This should be called during the system initialization process.
     */
    function initialize()
    {
        global $G_config_grn;
        $this->setVersion($G_config_grn->get('System', 'version'));
        $this->_setSystemProfile('delete_user_schedule',
            ['start' => 23, 'end' => 3, 'disable' => false]);

        // initialize password policy.
        $this->initializePasswordPolicy();
    }

    function _setSystemProfile($key, $value)
    {
        $profile = $this->getSystemProfile();
        if ( ! $profile->getAttribute($key, $dummy)) {
            $profile->createAttribute($key, $value);
        } else {
            $profile->updateAttribute($key, $value);
        }
    }

    function _getSystemProfile($key)
    {
        $profile = $this->getSystemProfile();
        if ($profile->getAttribute($key, $value)) {
            return $value;
        }

        return false;
    }

    public function getVersion()
    {
        $profile = $this->getSystemProfile();
        if ($profile->getAttribute('version', $value)) {
            return $value;
        }

        return false;
    }

    public function setVersion($version)
    {
        return $this->_setSystemProfile('version', $version);
    }

    public function initializePasswordPolicy()
    {
        $this->setPasswordEmptyLogin(true);
        $this->setPasswordLength(0);
        $this->setPasswordEnablePersonalConfig(true);
        $this->setPasswordExpirationInterval(0);
        $this->setPasswordWarningBefore(0);
    }

    public function setPasswordEmptyLogin($on_off)
    {
        $this->_setSystemProfile('password_empty_login', $on_off);
    }

    /**
     * @return bool
     */
    public function getPasswordEmptyLogin()
    {
        $value = null;
        $profile = $this->getSystemProfile();
        if ($profile->getAttribute('password_empty_login', $value)
            && ! defined('ON_FOREST')
        ) {
            return $value;
        }

        // default
        return true;
    }

    public function setPasswordLength($length)
    {
        $this->_setSystemProfile('password_length', $length);
    }

    /**
     * @return int
     */
    public function getPasswordLength()
    {
        $length = $this->_getSystemProfile('password_length');
        if ($length === false || defined('ON_FOREST')) {
            // default
            $length = 0;
        }

        return $length;
    }

    public function setPasswordEnablePersonalConfig($on_off)
    {
        $this->_setSystemProfile('password_personal_config', $on_off);
    }

    /**
     * @return bool
     */
    public function getPasswordEnablePersonalConfig()
    {
        $value = null;
        $profile = $this->getSystemProfile();
        if ($profile->getAttribute('password_personal_config', $value)) {
            return $value;
        }

        // default
        return true;
    }

    public function setPasswordExpirationInterval($interval)
    {
        $this->_setSystemProfile('password_expiration_interval', $interval);
    }

    /**
     * @return int
     */
    public function getPasswordExpirationInterval()
    {
        $interval = $this->_getSystemProfile('password_expiration_interval');
        if ($interval === false || defined('ON_FOREST')) {
            // default
            $interval = GRN_SYSTEM_UNLIMITED_PASSWORD_EXPIRATION;
        }

        return $interval;
    }

    public function setPasswordWarningBefore($days)
    {
        $this->_setSystemProfile('password_warning_before', $days);
    }

    /**
     * @return int
     */
    public function getPasswordWarningBefore()
    {
        $days = $this->_getSystemProfile('password_warning_before');
        if ($days === false || defined('ON_FOREST')) {
            //default
            $days = GRN_SYSTEM_NOT_WARNING_BEFORE;
        }

        return $days;
    }

    public function setPasswordComplex($on_off, $options)
    {
        $setting = ['enable' => $on_off, 'options' => $options];
        $this->_setSystemProfile('password_complex', $setting);
    }

    public function getPasswordComplex()
    {
        if (defined('ON_FOREST')) {
            return false;
        }

        return $this->_getSystemProfile('password_complex');
    }

    /**
     * @return string "on" or "off" for password autocomplete setting
     */
    public function getPasswordAutocomplete()
    {
        global $G_config_common;
        $autocomplete = $G_config_common->get('Browser',
            'password_autocomplete');
        $autocomplete = $autocomplete === '0' ? 'off' : 'on';

        return $autocomplete;
    }

    public function setDeleteUserSchedule(
        $start_hour,
        $end_hour,
        $disable,
        $start_minute = null,
        $end_minute = null
    ) {
        if ( ! is_null($start_minute) && ! is_null($end_minute)) {
            $schedule = [
                'start'        => $start_hour,
                'start_minute' => $start_minute,
                'end'          => $end_hour,
                'end_minute'   => $end_minute,
                'disable'      => $disable,
            ];
        } else {
            $schedule = [
                'start'   => $start_hour,
                'end'     => $end_hour,
                'disable' => $disable,
            ];
        }

        return $this->_setSystemProfile('delete_user_schedule', $schedule);
    }

    /**
     * @return array
     */
    public function getDeleteUserSchedule()
    {
        $schedule = $this->_getSystemProfile('delete_user_schedule');
        if ($schedule === false) {
            // default
            $schedule = [
                'start'   => 23,
                'end'     => 3,
                'disable' => false,
            ];
        }

        return $schedule;
    }

    /**
     * @param int $permission_to_select_role
     */
    public function setPermissionToSelectRole($permission_to_select_role)
    {
        $this->_setSystemProfile('permission_to_select_role',
            $permission_to_select_role);
    }

    /**
     * @return int $permission_to_select_role
     */
    public function getPermissionToSelectRole()
    {
        return $this->_getSystemProfile('permission_to_select_role');
    }

    var $_productId = null;

    function getProductId($prefix = null)
    {
        if ( ! is_null($this->_productId)) {
            return $this->_productId;
        }

        $uuid = $this->getSystemUUID();

        if ( ! is_null($prefix)) {
            $uuid = $prefix . '-' . $uuid;
        }
        $this->_productId = sprintf('%-048s', $uuid . "-");

        return $this->_productId;
    }

    function getSystemUUID()
    {
        $profile = $this->getSystemProfile();
        $uuid = null;
        if ( ! $profile->getAttribute("uuid", $uuid)) {
            require_once('fw/misc.csp');
            $uuid_token = explode('-', cb_get_uuid());
            $uuid = array_pop($uuid_token);
            $profile->createAttribute("uuid", $uuid);
        }

        return $uuid;
    }

    /**
     * @param  CB_User $user
     *
     * @return bool
     */
    function isSuperAdmin(& $user)
    {
        if (( ! is_object($user)) || ( ! is_a($user, 'CB_User'))) {
            return false;
        }

        if ($user->getOID() === GRN_UUM_ADMINISTRATION_USER) {
            return true;
        }

        global $G_container_base;
        /** @var GRN_Uum $uum */
        $uum = $G_container_base->getInstance('uum');
        $roles = $uum->getUserRoles($user->getOID());

        return array_key_exists(GRN_UUM_ADMINISTRATION_ROLE, $roles);
    }


    /**
     *
     * @param object CB_User $user
     * @param array $groups
     * @param array $roles
     *
     * @return boolean
     */
    public function isSubsystemAdmin(CB_User $user, array $groups, array $roles)
    {
        if (( ! is_object($user)) || ( ! is_a($user, 'CB_User'))) {
            return false;
        }

        global $G_container_base;
        $db = $G_container_base->getInstance('dbconn');

        $query = cb_queryf($db,
            'SELECT _id FROM tab_grn_systemadmin_subsystem_user_acl WHERE col_user ='
            .
            ' (SELECT _id FROM tab_grn_systemadmin_subsystem_user WHERE col_user = \'@S\')'
            .
            ' LIMIT 0, 1', $user->getOID());

        $result = $db->query($query);
        if ($result) {
            $r = $db->fetch_assoc($result);
            $db->free_result($result);
            if ($r) {
                return true;
            }
        }

        if (is_array($groups) && count($groups)) {
            $query = cb_queryf($db,
                'SELECT _id FROM tab_grn_systemadmin_subsystem_group_acl WHERE col_group IN'
                .
                ' (SELECT _id FROM tab_grn_systemadmin_subsystem_group WHERE col_group IN (@A))'
                .
                ' LIMIT 0, 1', array_keys($groups));

            $result = $db->query($query);
            if ($result) {
                $r = $db->fetch_assoc($result);
                $db->free_result($result);
                if ($r) {
                    return true;
                }
            }
        }

        if (is_array($roles) && count($roles)) {
            $query = cb_queryf($db,
                'SELECT _id FROM tab_grn_systemadmin_subsystem_role_acl WHERE col_role IN'
                .
                ' (SELECT _id FROM tab_grn_systemadmin_subsystem_role WHERE col_role IN (@A))'
                .
                ' LIMIT 0, 1', array_keys($roles));

            $result = $db->query($query);
            if ($result) {
                $r = $db->fetch_assoc($result);
                $db->free_result($result);
                if ($r) {
                    return true;
                }
            }
        }

        $profile = $this->getSystemProfile();
        $val = null;
        if ($profile->getAttribute("Everyone_subsystem", $val)) {
            if (count($val)) {
                return true;
            }
        }
        if ($profile->getAttribute("LoginUser_subsystem", $val)) {
            if (count($val)) {
                return true;
            }
        }

        return false;
    }

    /**
     * @param object CB_User $user
     * @param array $groups
     * @param array $roles
     *
     * @return boolean
     */
    public function isApplicationAdmin(
        CB_User $user,
        array $groups,
        array $roles
    ) {
        if (( ! is_object($user)) || ( ! is_a($user, 'CB_User'))) {
            return false;
        }

        global $G_container_base;
        $db = $G_container_base->getInstance('dbconn');

        $applicationLocator = GRN_ApplicationLocator::instance();
        $activeApplications = $applicationLocator->getActiveApplicationIds();

        $query = cb_queryf($db,
            'SELECT col_application as app FROM tab_grn_systemadmin_application_user_acl WHERE col_user ='
            .
            ' (SELECT _id FROM tab_grn_systemadmin_application_user WHERE col_user = \'@S\')',
            $user->getOID());

        $result = $db->query($query);
        $ret = false;
        if ($result) {
            while ($r = $db->fetch_assoc($result)) {
                if (in_array($r['app'], $activeApplications)) {
                    $ret = true;
                    break;
                }
            }
            $db->free_result($result);
            if ($ret) {
                return true;
            }
        }

        if (is_array($groups) && count($groups)) {
            $query = cb_queryf($db,
                'SELECT DISTINCT col_application as app FROM tab_grn_systemadmin_application_group_acl WHERE col_group IN'
                .
                ' (SELECT _id FROM tab_grn_systemadmin_application_group WHERE col_group IN (@A))',
                array_keys($groups));

            $result = $db->query($query);
            if ($result) {
                while ($r = $db->fetch_assoc($result)) {
                    if (in_array($r['app'], $activeApplications)) {
                        $ret = true;
                        break;
                    }
                }
                $db->free_result($result);
                if ($ret) {
                    return true;
                }
            }
        }

        if (is_array($roles) && count($roles)) {
            $query = cb_queryf($db,
                'SELECT DISTINCT col_application as app FROM tab_grn_systemadmin_application_role_acl WHERE col_role IN'
                .
                ' (SELECT _id FROM tab_grn_systemadmin_application_role WHERE col_role IN (@A))',
                array_keys($roles));

            $result = $db->query($query);
            if ($result) {
                while ($r = $db->fetch_assoc($result)) {
                    if (in_array($r['app'], $activeApplications)) {
                        $ret = true;
                        break;
                    }
                }
                $db->free_result($result);
                if ($ret) {
                    return true;
                }
            }
        }

        $profile = $this->getSystemProfile();
        $val = null;
        if ($profile->getAttribute("Everyone_application", $val)) {
            if (is_array($val) && array_intersect($val, $activeApplications)) {
                return true;
            }
        }
        if ($profile->getAttribute("LoginUser_application", $val)) {
            if (is_array($val) && array_intersect($val, $activeApplications)) {
                return true;
            }
        }

        return false;
    }

    function _isAvailable(
        $id,
        & $actor,
        & $acltable,
        & $admintable,
        $actor_col_name,
        $subject_col_name
    ) {
        $actor_id = $actor->getOID();
        $rowset = new CB_RowSet($admintable, 'admin');
        $rowset->addJoin($acltable,
            "admin.${actor_col_name} = ${actor_id} AND admin._id = acl.${actor_col_name}",
            CB_DATABASE_INNER_JOIN,
            'acl');
        $rowset->addCondition($rowset->queryf("acl.${subject_col_name} = '@S'",
            $id));
        $ret = false;
        if ($rowset->iterate()) {
            $ret = true;
        }

        return $ret;
    }

    function _isSubSystemAvailableForUser($subsystem, & $user)
    {
        $ret = $this->_isAvailable($subsystem, $user, $this->subsystem_user_acl,
            $this->subsystem_user, 'col_user', 'col_subsystem');
        if ($ret) {
            return true;
        }

        global $G_container_base;
        /** @var GRN_Uum $uum */
        $uum = $G_container_base->getInstance('uum');

        $groups = $uum->getUserGroups($user->getOID());
        $keys = array_keys($groups);
        foreach ($keys as $key) {
            $ret = $this->_isAvailable($subsystem, $groups[$key],
                $this->subsystem_group_acl, $this->subsystem_group, 'col_group',
                'col_subsystem');
            if ($ret) {
                return true;
            }
        }

        $roles = $uum->getUserRoles($user->getOID());
        $keys = array_keys($roles);
        foreach ($keys as $key) {
            $ret = $this->_isAvailable($subsystem, $roles[$key],
                $this->subsystem_role_acl, $this->subsystem_role, 'col_role',
                'col_subsystem');
            if ($ret) {
                return true;
            }
        }

        $profile = $this->getSystemProfile();
        $val = null;
        if ($profile->getAttribute("Everyone_subsystem", $val)) {
            if (is_array($val) && in_array($subsystem, $val)) {
                return true;
            }
        }
        $val = null;
        if ($profile->getAttribute("LoginUser_subsystem", $val)) {
            if (is_array($val) && in_array($subsystem, $val)) {
                return true;
            }
        }

        return false;
    }

    function _isApplicationAvailableForUser($application, & $user)
    {
        $ret = $this->_isAvailable($application, $user,
            $this->application_user_acl, $this->application_user, 'col_user',
            'col_application');
        if ($ret) {
            return true;
        }

        global $G_container_base;
        /** @var GRN_Uum $uum */
        $uum = $G_container_base->getInstance('uum');

        $groups = $uum->getUserGroups($user->getOID());
        $keys = array_keys($groups);
        foreach ($keys as $key) {
            $ret = $this->_isAvailable($application, $groups[$key],
                $this->application_group_acl, $this->application_group,
                'col_group', 'col_application');
            if ($ret) {
                return true;
            }
        }

        $roles = $uum->getUserRoles($user->getOID());
        $keys = array_keys($roles);
        foreach ($keys as $key) {
            $ret = $this->_isAvailable($application, $roles[$key],
                $this->application_role_acl, $this->application_role,
                'col_role', 'col_application');
            if ($ret) {
                return true;
            }
        }

        $profile = $this->getSystemProfile();
        $val = null;
        if ($profile->getAttribute("Everyone_application", $val)) {
            if (is_array($val) && in_array($application, $val)) {
                return true;
            }
        }
        $val = null;
        if ($profile->getAttribute("LoginUser_application", $val)) {
            if (is_array($val) && in_array($application, $val)) {
                return true;
            }
        }

        return false;
    }

    /**
     * @param  string $subsystem subsystem to be administered
     * @param  object CB_User $user   potential administrator for $subsystem
     *
     * @return bool
     */
    function adminSubSystem($subsystem, & $user)
    {
        if ( ! $user) {
            return false;
        }

        if ($this->isSuperAdmin($user)) {
            return true;
        }

        if ($this->_isSubSystemAvailableForUser($subsystem, $user)) {
            return true;
        }

        return false;
    }

    /**
     * @param  string $app_id application to be administered
     * @param  object CB_User $user   potential administrator for $app_id
     *
     * @return bool
     */
    function adminApplication($app_id, & $user)
    {
        if ( ! $user) {
            return false;
        }

        if ($this->isSuperAdmin($user)) {
            return true;
        }

        if ($this->_isApplicationAvailableForUser($app_id, $user)) {
            return true;
        }

        return false;
    }

    function _getAvailable(& $system_user, & $table, $col_name, $content_name)
    {
        $ret = [];
        $sid = "'" . $system_user->getOID() . "'";
        $rowset = new CB_RowSet($table, 'acl');
        $rowset->addCondition("acl.${col_name} = ${sid}");
        $rowset->addOrderColumn('acl._id');
        while ( ! is_null($row = $rowset->iterate())) {
            $ret[] = $row->get($content_name);
        }
        $rowset->destroy();

        return $ret;
    }

    function &getAvailableSubSystemForUser($sid)
    {
        $rowset = new CB_RowSet($this->subsystem_user, 's');
        global $G_container_base;
        /** @var GRN_Uum $uum */
        $uum = $G_container_base->getInstance('uum');
        $rowset->addJoin($uum->getUserTable(),
            "s.col_user = u._id AND u.col_deleted IS NULL",
            CB_DATABASE_INNER_JOIN,
            'u');
        $rowset->addCondition($rowset->queryf("s._id = '@S'", $sid));
        $system_user = $rowset->iterate();

        if ( ! $system_user) {
            cb_throw_error(E_GRN_SYSTEM_SUBSYSTEM_ADMIN_USER_NOT_FOUND);
        }
        $ret = $this->_getAvailable($system_user, $this->subsystem_user_acl,
            'col_user', 'subsystem');

        return $ret;
    }

    function &getAvailableSubSystemForGroup($sid)
    {
        $group_table = $this->subsystem_group;
        $system_group = $group_table->getRow($sid);
        if ( ! $system_group) {
            cb_throw_error(E_GRN_SYSTEM_SUBSYSTEM_ADMIN_GROUP_NOT_FOUND);
        }
        $ret = $this->_getAvailable($system_group, $this->subsystem_group_acl,
            'col_group', 'subsystem');

        return $ret;
    }

    function &getAvailableSubSystemForRole($sid)
    {
        if (is_numeric($sid)) {
            $role_table = $this->subsystem_role;
            $system_role = $role_table->getRow($sid);
            if ( ! $system_role) {
                cb_throw_error(E_GRN_SYSTEM_SUBSYSTEM_ADMIN_ROLE_NOT_FOUND);
            }
            $ret = $this->_getAvailable($system_role, $this->subsystem_role_acl,
                'col_role', 'subsystem');

            return $ret;

        } else {
            $profile = $this->getSystemProfile();
            $val = null;
            if ( ! $profile->getAttribute("${sid}_subsystem", $val)) {
                cb_throw_error(E_GRN_SYSTEM_SUBSYSTEM_ADMIN_ROLE_NOT_FOUND);
            }
            if ( ! is_array($val)) {
                $ret = [];

                return $ret;
            } else {
                return $val;
            }
        }
    }

    function &getAvailableApplicationForUser($sid)
    {
        $rowset = new CB_RowSet($this->application_user, 'a');
        global $G_container_base;
        /** @var GRN_Uum $uum */
        $uum = $G_container_base->getInstance('uum');
        $rowset->addJoin($uum->getUserTable(),
            "a.col_user = u._id AND u.col_deleted IS NULL",
            CB_DATABASE_INNER_JOIN,
            'u');
        $rowset->addCondition($rowset->queryf("a._id = '@S'", $sid));
        $system_user = $rowset->iterate();

        if ( ! $system_user) {
            cb_throw_error(E_GRN_SYSTEM_APPLICATION_ADMIN_USER_NOT_FOUND);
        }
        $ret = $this->_getAvailable($system_user, $this->application_user_acl,
            'col_user', 'application');

        return $ret;

    }

    function &getAvailableApplicationForGroup($sid)
    {
        $group_table = $this->application_group;
        $system_group = $group_table->getRow($sid);
        if ( ! $system_group) {
            cb_throw_error(E_GRN_SYSTEM_APPLICATION_ADMIN_GROUP_NOT_FOUND);
        }
        $ret = $this->_getAvailable($system_group, $this->application_group_acl,
            'col_group', 'application');

        return $ret;
    }

    function &getAvailableApplicationForRole($sid)
    {
        if (is_numeric($sid)) {
            $role_table = $this->application_role;
            $system_role = $role_table->getRow($sid);
            if ( ! $system_role) {
                cb_throw_error(E_GRN_SYSTEM_APPLICATION_ADMIN_ROLE_NOT_FOUND);
            }
            $ret = $this->_getAvailable($system_role,
                $this->application_role_acl, 'col_role', 'application');

            return $ret;

        } else {
            $profile = $this->getSystemProfile();
            $val = null;
            if ( ! $profile->getAttribute("${sid}_application", $val)) {
                cb_throw_error(E_GRN_SYSTEM_APPLICATION_ADMIN_ROLE_NOT_FOUND);
            }
            if ( ! is_array($val)) {
                $ret = [];

                return $ret;
            } else {
                return $val;
            }
        }
    }

    function _removeACL(& $system_obj, & $table, $col_name)
    {
        global $G_container_base;
        $dbconn = $G_container_base->getInstance('dbconn');
        $tablename = 'tab_' . $dbconn->escape($table->getTableName());
        $sid = "'" . $system_obj->getOID() . "'";
        $query = "DELETE FROM $tablename WHERE $col_name = $sid";
        $result = $dbconn->query($query);
        if ($result === false) {
            $dbconn->throwError(['query' => 'failed query: ' . $query]);
        }
    }

    function _insertACL(
        $list,
        & $system_obj,
        & $table,
        $col_name,
        $content_name
    ) {
        global $G_container_base;
        $dbconn = $G_container_base->getInstance('dbconn');
        $tablename = 'tab_' . $dbconn->escape($table->getTableName());
        $sid = "'" . $system_obj->getOID() . "'";
        foreach ($list as $content) {
            $content = $dbconn->escape($content);
            $query
                = "INSERT INTO $tablename (${col_name},col_${content_name}) VALUES ($sid,'${content}')";
            $result = $dbconn->query($query);
            if ($result === false) {
                $dbconn->throwError(['query' => 'failed query: ' . $query]);
            }
        }
    }

    function _setAvailable(
        $list,
        & $system_obj,
        & $table,
        $col_name,
        $content_name
    ) {
        $this->_removeACL($system_obj, $table, $col_name);
        $this->_insertACL($list, $system_obj, $table, $col_name, $content_name);
    }

    function setAvailableSubSystemForUser($sid, $subsystem_list)
    {
        $rowset = new CB_RowSet($this->subsystem_user, 's');
        global $G_container_base;
        /** @var GRN_Uum $uum */
        $uum = $G_container_base->getInstance('uum');
        $rowset->addJoin($uum->getUserTable(),
            "s.col_user = u._id AND u.col_deleted IS NULL",
            CB_DATABASE_INNER_JOIN,
            'u');
        $rowset->addCondition($rowset->queryf("s._id = '@S'", $sid));
        $system_user = $rowset->iterate();

        if ( ! $system_user) {
            cb_throw_error(E_GRN_SYSTEM_SUBSYSTEM_ADMIN_USER_NOT_FOUND);
        }
        $this->_setAvailable(
            $subsystem_list,
            $system_user,
            $this->subsystem_user_acl,
            'col_user',
            'subsystem'
        );
    }

    function setAvailableSubSystemForGroup($sid, $subsystem_list)
    {
        $group_table = $this->subsystem_group;
        $system_group = $group_table->getRow($sid);
        if ( ! $system_group) {
            cb_throw_error(E_GRN_SYSTEM_SUBSYSTEM_ADMIN_GROUP_NOT_FOUND);
        }
        $this->_setAvailable(
            $subsystem_list,
            $system_group,
            $this->subsystem_group_acl,
            'col_group',
            'subsystem'
        );
    }

    function setAvailableSubSystemForRole($sid, $subsystem_list)
    {
        if (is_numeric($sid)) {
            $role_table = $this->subsystem_role;
            $system_role = $role_table->getRow($sid);
            if ( ! $system_role) {
                cb_throw_error(E_GRN_SYSTEM_SUBSYSTEM_ADMIN_ROLE_NOT_FOUND);
            }
            $this->_setAvailable(
                $subsystem_list,
                $system_role,
                $this->subsystem_role_acl,
                'col_role',
                'subsystem'
            );
        } else {
            $profile = $this->getSystemProfile();
            if ( ! $profile->updateAttribute("${sid}_subsystem",
                $subsystem_list)
            ) {
                cb_throw_error(E_GRN_SYSTEM_SUBSYSTEM_ADMIN_ROLE_NOT_FOUND);
            }
        }
    }

    function setAvailableApplicationForUser($sid, $application_list)
    {
        $rowset = new CB_RowSet($this->application_user, 'a');
        global $G_container_base;
        /** @var GRN_Uum $uum */
        $uum = $G_container_base->getInstance('uum');
        $rowset->addJoin($uum->getUserTable(),
            "a.col_user = u._id AND u.col_deleted IS NULL",
            CB_DATABASE_INNER_JOIN,
            'u');
        $rowset->addCondition($rowset->queryf("a._id = '@S'", $sid));
        $system_user = $rowset->iterate();

        if ( ! $system_user) {
            cb_throw_error(E_GRN_SYSTEM_APPLICATION_ADMIN_USER_NOT_FOUND);
        }
        $this->_setAvailable(
            $application_list,
            $system_user,
            $this->application_user_acl,
            'col_user',
            'application'
        );
    }

    function setAvailableApplicationForGroup($sid, $application_list)
    {
        $group_table = $this->application_group;
        $system_group = $group_table->getRow($sid);
        if ( ! $system_group) {
            cb_throw_error(E_GRN_SYSTEM_APPLICATION_ADMIN_GROUP_NOT_FOUND);
        }
        $this->_setAvailable(
            $application_list,
            $system_group,
            $this->application_group_acl,
            'col_group',
            'application'
        );
    }

    function setAvailableApplicationForRole($sid, $application_list)
    {
        if (is_numeric($sid)) {
            $role_table = $this->application_role;
            $system_role = $role_table->getRow($sid);
            if ( ! $system_role) {
                cb_throw_error(E_GRN_SYSTEM_APPLICATION_ADMIN_ROLE_NOT_FOUND);
            }
            $this->_setAvailable(
                $application_list,
                $system_role,
                $this->application_role_acl,
                'col_role',
                'application'
            );
        } else {
            $profile = $this->getSystemProfile();
            if ( ! $profile->updateAttribute("${sid}_application",
                $application_list)
            ) {
                cb_throw_error(E_GRN_SYSTEM_APPLICATION_ADMIN_ROLE_NOT_FOUND);
            }
        }
    }

    function _getAdministrators(
        $offset,
        $limit,
        & $admintable,
        & $srctable,
        $col_name,
        $condition = null
    ) {
        $join_on = '';
        if (strcasecmp($srctable->getTableName(), 'CB_User') == 0) {
            $join_on = ' AND src.col_deleted IS NULL';
        }

        $rowset = new CB_MultiRowSet($admintable, 'admin');
        $rowset->addJoin(
            $srctable,
            "admin.${col_name} = src._id" . $join_on,
            CB_DATABASE_INNER_JOIN,
            'src'
        );
        if ( ! is_null($condition)) {
            $rowset->addCondition($condition);
        }
        $rowset->addOrderColumn('admin._id ');
        $rowset->limit($offset, $limit);

        $administrators = [];
        while ( ! is_null($row =& $rowset->iterate())) {
            $administrators[$row['src']->getOID()] = [
                'sid' => $row['admin']->getOID(),
                'row' => $row['src']
            ];
        }

        $rowset->destroy();

        return $administrators;
    }

    function _addAdministrators(
        $target_list,
        & $admintable,
        & $srctable,
        $obj_name
    ) {
        $keys = array_keys($target_list);
        foreach ($keys as $key) {
            $value = $target_list[$key];
            $oid = "'" . $value->getOID() . "'";
            $exists = $this->_getAdministrators(0, -1, $admintable, $srctable,
                'col_' . $obj_name, "src._id = $oid");

            if (count($exists) < 1) {
                $row = $admintable->newRow();
                $row->set($obj_name, $value);
            }
        }
    }

    function _removeAdministrators($sid_list, & $admintable)
    {
        if (count($sid_list) < 1) {
            return;
        }

        global $G_container_base;
        $dbconn = $G_container_base->getInstance('dbconn');
        $tablename = 'tab_' . $dbconn->escape($admintable->getTableName());
        $query = "DELETE FROM $tablename";
        $delim = ' WHERE ';
        foreach ($sid_list as $sid) {
            $query .= $delim . "_id = '" . $dbconn->escape($sid) . "'";
            $delim = ' OR ';
        }
        $result = $dbconn->query($query);
        if ($result === false) {
            $dbconn->throwError(['query' => 'failed query: ' . $query]);
        }
    }

    function _removeAllAdministrators(& $admintable)
    {
        global $G_container_base;
        $dbconn = $G_container_base->getInstance('dbconn');
        $tablename = 'tab_' . $dbconn->escape($admintable->getTableName());
        $query = "DELETE FROM $tablename";
        $result = $dbconn->query($query);
        if ($result === false) {
            $dbconn->throwError(['query' => 'failed query: ' . $query]);
        }
    }

    function _countAdministrators(& $admintable)
    {
        $rowset = new CB_RowSet($admintable);
        $rowset->applyGroupFunctions(['count' => 'COUNT(*)']);
        $row = $rowset->iterate();

        return $row['count'];
    }

    function _countAdministratorsUsers(& $admintable)
    {
        $rowset = new CB_RowSet($admintable, 'a');
        global $G_container_base;
        /** @var GRN_Uum $uum */
        $uum = $G_container_base->getInstance('uum');
        $rowset->addJoin($uum->getUserTable(),
            "a.col_user = u._id AND u.col_deleted IS NULL",
            CB_DATABASE_INNER_JOIN,
            'u');
        $rowset->applyGroupFunctions(['count' => 'COUNT(*)']);
        $row = $rowset->iterate();

        return $row['count'];
    }

    function &getSubSystemUsers($offset = 0, $limit = -1)
    {
        global $G_container_base;
        /** @var GRN_Uum $uum */
        $uum = $G_container_base->getInstance('uum');
        $user_table = $uum->getUserTable();
        $ret = $this->_getAdministrators($offset, $limit,
            $this->subsystem_user, $user_table, 'col_user');

        return $ret;
    }

    function &getApplicationUsers($offset = 0, $limit = -1)
    {
        global $G_container_base;
        /** @var GRN_Uum $uum */
        $uum = $G_container_base->getInstance('uum');
        $user_table = $uum->getUserTable();
        $ret = $this->_getAdministrators($offset, $limit,
            $this->application_user, $user_table, 'col_user');

        return $ret;
    }

    function &getSubSystemGroups($offset = 0, $limit = -1)
    {
        global $G_container_base;
        /** @var GRN_Uum $uum */
        $uum = $G_container_base->getInstance('uum');
        $group_table = $uum->getGroupTable();
        $ret = $this->_getAdministrators($offset, $limit,
            $this->subsystem_group, $group_table, 'col_group');

        return $ret;
    }

    function &getApplicationGroups($offset = 0, $limit = -1)
    {
        global $G_container_base;
        /** @var GRN_Uum $uum */
        $uum = $G_container_base->getInstance('uum');
        $group_table = $uum->getGroupTable();
        $ret = $this->_getAdministrators($offset, $limit,
            $this->application_group, $group_table, 'col_group');

        return $ret;
    }

    function &getSubSystemRoles($offset = 0, $limit = -1)
    {
        global $G_container_base;
        /** @var GRN_Uum $uum */
        $uum = $G_container_base->getInstance('uum');

        $dynamics = [];
        $profile = $this->getSystemProfile();
        $val = null;
        if ($profile->getAttribute('Everyone_subsystem', $val)) {
            $dynamics['Everyone'] = cb_msg('grn.role', 'Everyone');
        }
        if ($profile->getAttribute('LoginUser_subsystem', $val)) {
            $dynamics['LoginUser'] = cb_msg('grn.role', 'LoginUser');
        }

        if ($offset >= count($dynamics)) {
            $role_table = $uum->getRoleTable();
            $ret = $this->_getAdministrators($offset - count($dynamics),
                $limit, $this->subsystem_role, $role_table, 'col_role');

            return $ret;
        } elseif ($limit <= count($dynamics) - $offset && $limit > -1) {
            $ret = array_slice($dynamics, $offset, $limit);

            return $ret;
        } else {
            for ($i = 0; $i < $offset; $i++) {
                array_shift($dynamics);
            }
            if ($limit > -1) {
                $limit = $limit - count($dynamics);
            }
            $role_table = $uum->getRoleTable();
            $ret = $dynamics + $this->_getAdministrators(0, $limit,
                    $this->subsystem_role, $role_table, 'col_role');

            return $ret;
        }
    }

    function &getApplicationRoles($offset = 0, $limit = -1)
    {
        global $G_container_base;
        /** @var GRN_Uum $uum */
        $uum = $G_container_base->getInstance('uum');

        $dynamics = [];
        $profile = $this->getSystemProfile();
        $val = null;
        if ($profile->getAttribute('Everyone_application', $val)) {
            $dynamics['Everyone'] = cb_msg('grn.role', 'Everyone');
        }
        if ($profile->getAttribute('LoginUser_application', $val)) {
            $dynamics['LoginUser'] = cb_msg('grn.role', 'LoginUser');
        }

        if ($offset >= count($dynamics)) {
            $role_table = $uum->getRoleTable();
            $ret = $this->_getAdministrators($offset - count($dynamics),
                $limit, $this->application_role, $role_table, 'col_role');

            return $ret;
        } elseif ($limit <= count($dynamics) - $offset && $limit > -1) {
            $ret = array_slice($dynamics, $offset, $limit);

            return $ret;
        } else {
            for ($i = 0; $i < $offset; $i++) {
                array_shift($dynamics);
            }
            if ($limit > -1) {
                $limit = $limit - count($dynamics);
            }
            $role_table = $uum->getRoleTable();
            $ret = $dynamics + $this->_getAdministrators(0, $limit,
                    $this->application_role, $role_table, 'col_role');

            return $ret;
        }
    }

    function addSubSystemUsers($ids)
    {
        global $G_container_base;
        /** @var GRN_Uum $uum */
        $uum = $G_container_base->getInstance('uum');
        $list = [];
        foreach ($ids as $id) {
            $user = $uum->getUser($id);
            if ( ! $user) {
                cb_throw_error(E_GRN_SYSTEM_USER_NOT_FOUND);
            }
            $list[] = $user;
        }

        $role_table = $uum->getUserTable();
        $this->_addAdministrators($list, $this->subsystem_user, $role_table,
            'user');
    }

    function addApplicationUsers($ids)
    {
        global $G_container_base;
        /** @var GRN_Uum $uum */
        $uum = $G_container_base->getInstance('uum');
        $list = [];
        foreach ($ids as $id) {
            $user = $uum->getUser($id);
            if ( ! $user) {
                cb_throw_error(E_GRN_SYSTEM_USER_NOT_FOUND);
            }
            $list[] = $user;
        }

        $user_table = $uum->getUserTable();
        $this->_addAdministrators($list, $this->application_user, $user_table,
            'user');
    }

    function addSubSystemGroups($ids)
    {
        global $G_container_base;
        /** @var GRN_Uum $uum */
        $uum = $G_container_base->getInstance('uum');
        $list = [];
        foreach ($ids as $id) {
            $group = $uum->getGroup($id);
            if ( ! $group) {
                cb_throw_error(E_GRN_SYSTEM_GROUP_NOT_FOUND);
            }
            $list[] = $group;
        }

        $group_table = $uum->getGroupTable();
        $this->_addAdministrators($list, $this->subsystem_group, $group_table,
            'group');
    }

    function addApplicationGroups($ids)
    {
        global $G_container_base;
        /** @var GRN_Uum $uum */
        $uum = $G_container_base->getInstance('uum');
        $list = [];
        foreach ($ids as $id) {
            $group = $uum->getGroup($id);
            if ( ! $group) {
                cb_throw_error(E_GRN_SYSTEM_GROUP_NOT_FOUND);
            }
            $list[] = $group;
        }

        $group_table = $uum->getGroupTable();
        $this->_addAdministrators($list, $this->application_group, $group_table,
            'group');
    }

    function addSubSystemRoles($ids)
    {
        global $G_container_base;
        /** @var GRN_Uum $uum */
        $uum = $G_container_base->getInstance('uum');
        $list = [];
        foreach ($ids as $id) {
            if (is_numeric($id)) {
                $role = $uum->getStaticRole($id);
                if ( ! $role) {
                    cb_throw_error(E_GRN_SYSTEM_ROLE_NOT_FOUND);
                }
                $list[] = $role;
            } else {
                if (strcmp($id, 'Everyone') !== 0
                    && strcmp($id, 'LoginUser') !== 0
                ) {
                    cb_throw_error(E_GRN_SYSTEM_ROLE_NOT_FOUND);
                }
                $profile = $this->getSystemProfile();
                $val = null;
                if ( ! $profile->getAttribute("${id}_subsystem", $val)) {
                    $profile->createAttribute("${id}_subsystem", $val);
                }
            }
        }
        $role_table = $uum->getRoleTable();
        $this->_addAdministrators($list, $this->subsystem_role, $role_table,
            'role');
    }

    function addApplicationRoles($ids)
    {
        global $G_container_base;
        /** @var GRN_Uum $uum */
        $uum = $G_container_base->getInstance('uum');
        $list = [];
        foreach ($ids as $id) {
            if (is_numeric($id)) {
                $role = $uum->getStaticRole($id);
                if ( ! $role) {
                    cb_throw_error(E_GRN_SYSTEM_ROLE_NOT_FOUND);
                }
                $list[] = $role;
            } else {
                if (strcmp($id, 'Everyone') !== 0
                    && strcmp($id, 'LoginUser') !== 0
                ) {
                    cb_throw_error(E_GRN_SYSTEM_ROLE_NOT_FOUND);
                }
                $profile = $this->getSystemProfile();
                $val = null;
                if ( ! $profile->getAttribute("${id}_application", $val)) {
                    $profile->createAttribute("${id}_application", $val);
                }
            }
        }

        $role_table = $uum->getRoleTable();
        $this->_addAdministrators($list, $this->application_role, $role_table,
            'role');
    }

    function removeSubSystemUsers($sid_list)
    {
        if (is_array($sid_list)) {
            $this->_removeAdministrators($sid_list, $this->subsystem_user);
        } elseif ($sid_list === true) {
            $this->_removeAllAdministrators($this->subsystem_user);
        }
    }

    function removeApplicationUsers($sid_list)
    {
        if (is_array($sid_list)) {
            $this->_removeAdministrators($sid_list, $this->application_user);
        } elseif ($sid_list === true) {
            $this->_removeAllAdministrators($this->application_user);
        }
    }

    function removeSubSystemGroups($sid_list)
    {
        if (is_array($sid_list)) {
            $this->_removeAdministrators($sid_list, $this->subsystem_group);
        } elseif ($sid_list === true) {
            $this->_removeAllAdministrators($this->subsystem_group);
        }
    }

    function removeApplicationGroups($sid_list)
    {
        if (is_array($sid_list)) {
            $this->_removeAdministrators($sid_list, $this->application_group);
        } elseif ($sid_list === true) {
            $this->_removeAllAdministrators($this->application_group);
        }
    }

    function removeSubSystemRoles($sid_list)
    {
        $profile = $this->getSystemProfile();
        if (is_array($sid_list)) {
            $temp = [];
            foreach ($sid_list as $id) {
                if (is_numeric($id)) {
                    array_push($temp, $id);
                } else {
                    $profile->removeAttribute("${id}_subsystem");
                }
            }
            $this->_removeAdministrators($temp, $this->subsystem_role);
        } elseif ($sid_list === true) {
            $this->_removeAllAdministrators($this->subsystem_role);
            $profile->removeAttribute("Everyone_subsystem");
            $profile->removeAttribute("LoginUser_subsystem");
        }
    }

    function removeApplicationRoles($sid_list)
    {
        $profile = $this->getSystemProfile();
        if (is_array($sid_list)) {
            $temp = [];
            foreach ($sid_list as $id) {
                if (is_numeric($id)) {
                    array_push($temp, $id);
                } else {
                    $profile->removeAttribute("${id}_application");
                }
            }
            $this->_removeAdministrators($temp, $this->application_role);
        } elseif ($sid_list === true) {
            $this->_removeAllAdministrators($this->application_role);
            $profile->removeAttribute("Everyone_application");
            $profile->removeAttribute("LoginUser_application");
        }
    }

    function countSubSystemUsers()
    {
        return $this->_countAdministratorsUsers($this->subsystem_user);
    }

    function countApplicationUsers()
    {
        return $this->_countAdministratorsUsers($this->application_user);
    }

    function countSubSystemGroups()
    {
        return $this->_countAdministrators($this->subsystem_group);
    }

    function countApplicationGroups()
    {
        return $this->_countAdministrators($this->application_group);
    }

    function countSubSystemRoles()
    {
        $count = 0;
        $profile = $this->getSystemProfile();
        $val = null;
        if ($profile->getAttribute("Everyone_subsystem", $val)) {
            $count++;
        }
        if ($profile->getAttribute("LoginUser_subsystem", $val)) {
            $count++;
        }

        return ($this->_countAdministrators($this->subsystem_role) + $count);
    }

    function countApplicationRoles()
    {
        $count = 0;
        $profile = $this->getSystemProfile();
        $val = null;
        if ($profile->getAttribute("Everyone_application", $val)) {
            $count++;
        }
        if ($profile->getAttribute("LoginUser_application", $val)) {
            $count++;
        }

        return ($this->_countAdministrators($this->application_role) + $count);
    }

    /**
     * @access private
     */
    var $_ids = null;

    /**
     * @access private
     */
    var $_id_map = null;

    /**
     * @access private
     */
    function _constructIdMap()
    {
        $this->_ids = [];
        $this->_id_map = [];

        $path = cb_basedir() . '/code/plugin/grn/common/system';
        $dir = @opendir($path);
        if ($dir === false) {
            require_once('grn/error_code.csp');
            cb_throw_error(E_GRN_SYSTEM_NO_LOGIC_DIR, null,
                ['dir' => $path]);
        }
        while (($file = readdir($dir)) !== false) {
            if (preg_match('#^([0-9][0-9])(.*)\\.csp$#', $file, $regs)) {
                $this->_id_map[$regs[2]] = $regs[1] . $regs[2];
                $this->_ids[$regs[1] . $regs[2]] = $regs[2];
            }
        }

        // GRN35-316
        if (defined('ON_FOREST')) {
            $unset_ids = [
                'customer'         => '01customer',
                'authentication'   => '05authentication',
                'sso'              => '06sso',
                'logging'          => '11logging',
                'license'          => '12license',
                'queue_monitoring' => '16queue_monitoring'
            ];
            foreach ($unset_ids as $key => $value) {
                if (array_key_exists($key, $this->_id_map)) {
                    unset($this->_id_map[$key]);
                }
                if (array_key_exists($value, $this->_ids)) {
                    unset($this->_ids[$value]);
                }
            }
        }

        if ( ! \grn\fts\Application::isAvailable()
             && ! isset($unset_ids['queue_monitoring'])
        ) {
            unset($this->_id_map['queue_monitoring']);
            unset($this->_ids['16queue_monitoring']);
        }

        $is_licensed = CustomizationJsCssLoader::getInstance()
                                               ->isAvailableLicense();

        if ( ! $is_licensed) {
            unset($this->_id_map['api']);
            unset($this->_ids['20api']);
        }

        // GRN35-316
        closedir($dir);
        ksort($this->_ids);
    }

    /**
     * @return array
     */
    function getLogicIds()
    {
        if (is_null($this->_ids)) {
            $this->_constructIdMap();
        }

        return $this->_ids;
    }

    /**
     * @return array
     */
    function getAvailableLogicIds()
    {
        $ids = $this->getLogicIds();
        $availables = [];

        global $G_container_base;
        /** @var GRN_Uum $uum */
        $uum = $G_container_base->getInstance('uum');
        $login = $uum->getLoginUser();

        foreach ($ids as $key => $id) {
            if ($this->adminSubSystem($id, $login)) {
                $availables[$key] = $id;
            }
        }

        return $availables;
    }

    /**
     * Return a system logic object.
     *
     * @return mixed {@link GRN_SystemLogicBase}, or FALSE if $id is not valid.
     */
    function getLogic($id)
    {
        if (is_null($this->_id_map)) {
            $this->_constructIdMap();
        }

        if ( ! array_key_exists($id, $this->_id_map)) {
            $___ret = false;

            return $___ret;
        }

        $real_id = $this->_id_map[$id];
        $loader = $this->getPluginLoader();
        $logic = $loader->loadDriver($real_id);
        assert('(!is_object($logic)) || is_a($logic, "GRN_SystemLogicBase")');

        return $logic;
    }

}


