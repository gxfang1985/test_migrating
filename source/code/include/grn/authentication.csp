<?php

use grn\cydec\slash\session\api\SlashSessionManagementAPI;
use grn\grn\dao\GrnAuthenticationMultiRelationDAO;

/**
 * Authentication Service
 */

/** Include Files **/
require_once('fw/persistent.csp');
require_once('fw/module.csp');
require_once('fw/uum_core.csp');
require_once('fw/string_util.csp');
require_once('grn/error_code.csp');
require_once('grn/inspection.csp');

/** String Resources **/

//Service Name
define('GRN_AUTH', 'grn.common.authentication');
//Module ID
define('GRN_AUTH_MODULE_ID', 'grn.common.authentication');
//Loader Name
define('GRN_AUTH_LOGIN', 'grn.common.authentication.login');
define('GRN_AUTH_AUTHENTICATE', 'grn.common.authentication.authenticate');
define('GRN_AUTH_REPOSITORY', 'grn.common.authentication.repository');
define('GRN_AUTH_APPLICATION', 'grn.common.authentication.application');
//Driver Base Name
define('GRN_AUTH_DRIVER_BASE', 'grn.common.authentication.driverbase');
define('GRN_AUTH_LOGIN_DRIVER_BASE',
    'grn.common.authentication.login.driverbase');
define('GRN_AUTH_AUTHENTICATE_DRIVER_BASE',
    'grn.common.authentication.authenticate.driverbase');
define('GRN_AUTH_REPOSITORY_DRIVER_BASE',
    'grn.common.authentication.repository.driverbase');

//Plugin Prefix
define('GRN_AUTH_LOGIN_PLUGIN_PREFIX',
    'plugin_grn_common_authentication_login_');
define('GRN_AUTH_AUTHENTICATE_PLUGIN_PREFIX',
    'plugin_grn_common_authentication_authenticate_');
define('GRN_AUTH_REPOSITORY_PLUGIN_PREFIX',
    'plugin_grn_common_authentication_repository_');
define('GRN_AUTH_APPLICATION_PLUGIN_PREFIX',
    'plugin_grn_common_application_repository_');

//tables
define('GRN_AUTH_TABLE_LOGIN_AUTHENTICATE',
    'GRN_Authentication_Login_Authenticate');
define('GRN_AUTH_TABLE_REPOSITORY', 'GRN_Authentication_Repository');

//properties
define('GRN_AUTH_PROPERTY_DISPLAY_NAME', 'display_name');    //Display Name
define('GRN_AUTH_PROPERTY_TYPE', 'type');            //Type
define('GRN_AUTH_PROPERTY_DRIVER_TYPE', 'driver_type');     //Driver Type
define('GRN_AUTH_PROPERTY_DRIVER_SETTINGS',
    'driver_settings'); //Driver Settings
define('GRN_AUTH_PROPERTY_REPOSITORY', 'repository');      //User Repository ID
define('GRN_AUTH_PROPERTY_IS_ACTIVE', 'is_active');       //Is Active
define('GRN_AUTH_PROPERTY_LIST_INDEX', 'list_index');      //List Index
define('GRN_AUTH_PROPERTY_CREATOR', 'creator');         //Creator ID
define('GRN_AUTH_PROPERTY_CREATOR_NAME', 'creator_name');    //Creator Name
define('GRN_AUTH_PROPERTY_CREATOR_FOREIGN_KEY',
    'creator_foreign_key');    //Creator Name
define('GRN_AUTH_PROPERTY_CTIME', 'ctime');           //Create Time
define('GRN_AUTH_PROPERTY_MODIFIER', 'modifier');        //Modifier ID
define('GRN_AUTH_PROPERTY_MODIFIER_NAME', 'modifier_name');   //Modifier Name
define('GRN_AUTH_PROPERTY_MODIFIER_FOREIGN_KEY',
    'modifier_foreign_key');    //Creator Name
define('GRN_AUTH_PROPERTY_MTIME', 'mtime');           //Modify Time
define('GRN_AUTH_PROPERTY_FOREIGN_KEY', 'foreign_key');     //foreign key

//Login Authentication Driver Types
define('GRN_AUTH_LOGIN_DEFAULT', 'grn.common.authentication.login.default');
define('GRN_AUTH_LOGIN_SYSTEM', 'grn.common.authentication.login.system');
define('GRN_AUTH_LOGIN_ENVIRONMENT',
    'grn.common.authentication.login.environment');
define('GRN_AUTH_LOGIN_CELLULAR', 'grn.common.authentication.login.cellular');
define('GRN_AUTH_LOGIN_CBAPI', 'grn.common.authentication.login.cbapi');
define('GRN_AUTH_LOGIN_UTIL_API', 'grn.common.authentication.login.util_api');
define('GRN_AUTH_LOGIN_DESKTOP_API_V1', 'grn.common.authentication.login.v1');
define('GRN_AUTH_LOGIN_REST_API_V1', 'grn.common.authentication.login.api');
define('GRN_AUTH_LOGIN_DRIVERS_DEPENDING_ON_DEFAULT', [
    'grn.common.authentication.login.util_api',
    'grn.common.authentication.login.v1',
    'grn.common.authentication.login.api'
]);

//Session Authentication Driver Types
define('GRN_AUTH_AUTHENTICATE_DEFAULT',
    'grn.common.authentication.authenticate.default');
define('GRN_AUTH_AUTHENTICATE_SYSTEM',
    'grn.common.authentication.authenticate.system');
define('GRN_AUTH_AUTHENTICATE_ENVIRONMENT',
    'grn.common.authentication.authenticate.environment');
define('GRN_AUTH_AUTHENTICATE_CYBOZU',
    'grn.common.authentication.authenticate.cybozu');
define('GRN_AUTH_AUTHENTICATE_OPEN',
    'grn.common.authentication.authenticate.open');
define('GRN_AUTH_AUTHENTICATE_CELLULAR',
    'grn.common.authentication.authenticate.cellular');
define('GRN_AUTH_AUTHENTICATE_CBAPI',
    'grn.common.authentication.authenticate.cbapi');
define('GRN_AUTH_AUTHENTICATE_UTIL_API',
    'grn.common.authentication.authenticate.util_api');
define('GRN_AUTH_AUTHENTICATE_DESKTOP_API_V1',
    'grn.common.authentication.authenticate.v1');
define('GRN_AUTH_AUTHENTICATE_REST_API_V1',
    'grn.common.authentication.authenticate.api');

//Repository Driver Types
define('GRN_AUTH_REPOSITORY_DEFAULT',
    'grn.common.authentication.repository.default');
define('GRN_AUTH_REPOSITORY_LDAP', 'grn.common.authentication.repository.ldap');
define('GRN_AUTH_REPOSITORY_MULTI',
    'grn.common.authentication.repository.multi');

//Driver Page Type
define('GRN_AUTH_PAGE_TYPE_LOGIN', 'login');          //login page
define('GRN_AUTH_PAGE_TYPE_VIEW_SYSTEM', 'view-system');    //system view page
define('GRN_AUTH_PAGE_TYPE_ADD_SYSTEM', 'add-system');     //system add page
define('GRN_AUTH_PAGE_TYPE_MODIFY_SYSTEM',
    'modify-system');  //system modify page
define('GRN_AUTH_PAGE_TYPE_VIEW_PERSONAL',
    'view-personal');  //personal view page
define('GRN_AUTH_PAGE_TYPE_ADD_PERSONAL', 'add-personal');   //personal add page
define('GRN_AUTH_PAGE_TYPE_MODIFY_PERSONAL',
    'modify-personal');//personal modify page
define('GRN_AUTH_PAGE_TYPE_PWD_EXPIRED',
    'pwd_expired');    //password expired page

//System Profile
define('GRN_AUTH_SYSTEM_PROFILE_CURRENT_LOGIN',
    'current_login');    //Current Login Method

//session
define('GRN_AUTH_SESSION_AUTH_USER', 'auth_user');      //Auth User
define('GRN_AUTH_SESSION_ACCOUNT', 'account');        //Account
define('GRN_AUTH_SESSION_PASSWORD', 'password');       //Password
define('GRN_AUTH_SESSION_FIRST_LOGIN', 'first_login');    //First Login Status
define('GRN_AUTH_SESSION_FIRST_LOGOUT', 'first_logout');   //First Logout Status
define('GRN_AUTH_SESSION_PWD_EXPIRED', 'pwd_expired');    //Password expired

//encrypt Key
define('GRN_AUTH_DECRYPT_MOD_KEY', 47);

define('GRN_AUTH_PASSWORD_TICKET', '_pwd_ticket');

// cookie name
define('GRN_AUTH_OPEN2_COOKIE', 'CB_OPENAUTH');

// cookie mode
define('GRN_AUTH_OPEN2_COOKIE_MODE', '1');

// クラウド環境のケータイのみで使われるクッキー名 see fw/prepend.csp
define('GRN_AUTH_GAROON_COM_CELLULAR_COOKIE', 'CBSESSID');

/** Global Variables **/
global $G_authentication_force_driver;           //Force Authentication Driver

/*** Begin Persistent Classes **/

/**
 * Repository Persistent  Class
 */
class GRN_Authentication_Repository extends GRN_InspectionBase
{
    /**
     * Constructor
     */
    function __construct($row)
    {
        parent::__construct($row, 'grn.common.authentication');
    }

    /** Display Name **/
    var $col_display_name = ['type' => 'char', 'notnull' => true];
    /** Driver Type **/
    var $col_driver_type = ['type' => 'char', 'notnull' => true];
    /** Driver Settings **/
    var $col_driver_settings
        = [
            'type'   => 'char',
            'length' => 65535,
            'lazy'   => true
        ];
    /** list index **/
    var $col_list_index = ['type' => 'int', 'notnull' => true];
    var $idx_list_index = ['cols' => ['list_index']];

    /** reserved columns **/
    var $col_reserve_text1 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text2 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text3 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_int1 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int2 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int3 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_blob1 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob2 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob3 = ['type' => 'blob', 'lazy' => true];

    /**
     * @return bool
     */
    public function isMultiRepository()
    {
        return $this->get(GRN_AUTH_PROPERTY_DRIVER_TYPE)
               === GRN_AUTH_REPOSITORY_MULTI;
    }

    /**
     * @return bool
     */
    public function isDefaultRepository()
    {
        return $this->get(GRN_AUTH_PROPERTY_DRIVER_TYPE)
               === GRN_AUTH_REPOSITORY_DEFAULT;
    }

    /**
     * @return string
     */
    public function getName()
    {
        $display_name = $this->get(GRN_AUTH_PROPERTY_DISPLAY_NAME);
        if ( ! $display_name) {
            $driver_type = $this->get(GRN_AUTH_PROPERTY_DRIVER_TYPE);
            $driver_type_elements = explode('.', $driver_type);
            $display_name = cb_msg($driver_type,
                $driver_type_elements[4]);
        }

        return $display_name;
    }

    /**
     * @return string
     */
    public function getDriverType()
    {
        return $this->get(GRN_AUTH_PROPERTY_DRIVER_TYPE);
    }
}


/**
 * Login / Authentication Persistent Class
 */
class GRN_Authentication_Login_Authenticate extends GRN_InspectionBase
{
    /**
     * Constructor
     *
     * @param CB_Row $row
     */
    function __construct($row)
    {
        parent::__construct($row, 'grn.common.authentication');
    }

    /** Display Name **/
    var $col_display_name = ['type' => 'char', 'notnull' => true];
    /** login or authenticate Type **/
    var $col_type = ['type' => 'char', 'notnull' => true];
    /** Driver Type **/
    var $col_driver_type = ['type' => 'char', 'notnull' => true];
    /** Driver Settings **/
    var $col_driver_settings
        = [
            'type'   => 'char',
            'length' => 65535,
            'lazy'   => true
        ];
    /** User Repository **/
    var $col_repository
        = [
            'type' => 'weak_relation',
            'to'   => 'GRN_Authentication_Repository'
        ];
    /** Is Active **/
    var $col_is_active = ['type' => 'int', 'notnull' => true];
    /** list index **/
    var $col_list_index = ['type' => 'int', 'notnull' => true];

    /** Complex Index **/
    var $idx_type_list_index = ['cols' => ['type', 'list_index']];
    var $idx_type_is_active_list_index
        = [
            'cols' => [
                'type',
                'is_active',
                'list_index'
            ]
        ];

    /** reserved columns **/
    var $col_reserve_text1 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text2 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text3 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_int1 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int2 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int3 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_blob1 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob2 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob3 = ['type' => 'blob', 'lazy' => true];

    /**
     * @return GRN_Authentication_Repository
     */
    public function getRepositoryMethod()
    {
        return $this->get(GRN_AUTH_PROPERTY_REPOSITORY);
    }

    /**
     * @return string
     */
    public function getName()
    {
        $display_name = $this->get(GRN_AUTH_PROPERTY_DISPLAY_NAME);
        if ( ! $display_name) {
            $driver_type = $this->get(GRN_AUTH_PROPERTY_DRIVER_TYPE);
            $driver_type_elements = explode('.', $driver_type);
            $display_name = cb_msg($driver_type,
                $driver_type_elements[4]);
        }

        return $display_name;
    }

    /**
     * @return string
     */
    public function getDriverType()
    {
        return $this->get(GRN_AUTH_PROPERTY_DRIVER_TYPE);
    }
}

/*** End Persistent Classes **/

/*** Begin Utility Classes **/

/**
 * Crypt Utility Class
 */
class GRN_Authentication_Crypt_Utility
{

    //Randam Array A
    var $_randKeyA
        = [
            13,
            19,
            23,
            13,
            19,
            13,
            37,
            31,
            17,
            11,
            17,
            29,
            29,
            37,
            31,
            13,
            11,
            37,
            11,
            31,
            11,
            19,
            17,
            19,
        ];

    //Randam Array B
    var $_randKeyB
        = [
            5,
            2,
            3,
            7,
            5,
            3,
            2,
            5,
            3,
            7,
            2,
            2,
            5,
            3,
            3,
            2,
            7,
            2,
            3,
            5,
            7,
            3,
            7,
            5,
        ];

    /**
     * Constructor
     */
    function __construct()
    {
        return;
    }

    /**
     * Get GRN_Authentication_Crypt_Utility Instance
     *
     * @return GRN_Authentication_Crypt_Utility
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Authentication_Crypt_Utility();
        }

        return $_instance;
    }

    /**
     * Encript String
     *
     * @param  string $encrypt EnCrypt String
     * @param  int    $key     EnCrypt Key
     *
     * @return string EnCrypted String
     */
    function encrypt2($encrypt, $key = -1)
    {

        $length = strlen($encrypt);

        $src = [];

        for ($i = 0; $i < $length; $i++) {

            $ch1 = (ord($encrypt[$i]) >> 4) & 0x0f;
            $ch2 = ord($encrypt[$i]) & 0x0f;

            $src[] = ($ch1 < 0x0a) ? (ord('0') + $ch1)
                : (ord('A') + $ch1 - 0x0a);
            $src[] = ($ch2 < 0x0a) ? (ord('0') + $ch2)
                : (ord('A') + $ch2 - 0x0a);
        }


        if ($key < 0) {
            $key = srand(time());
            $key = rand() % 24;
        } else {
            $key = $key % 24;
        }

        $nSum = 0;
        $nSrc = 0;
        $dst = '';
        $length = count($src);
        $nResult = null;
        for ($i = $key; $nSrc < $length; $i++, $nSrc++) {

            if ($i >= 24) {
                $i = 0;
            }

            $nSum += $src[$nSrc];
            $src[$nSrc]++;

            $nResult = ($this->_randKeyA[$i] * ($src[$nSrc] - ord('0')) +
                        $this->_randKeyB[$i]) % GRN_AUTH_DECRYPT_MOD_KEY;

            $dst .= $this->_convertNumToChar($nResult);
        }

        $dst .= $this->_convertNumToChar($nSum % GRN_AUTH_DECRYPT_MOD_KEY);
        $dst .= $this->_convertNumToChar($key);

        return $dst;
    }

    /**
     * DeCrypt String
     *
     * @param  string $encrypted EnCrypted String
     *
     * @return string DeCrypted String
     */
    function decrypt2($encrypted)
    {
        //Check EnCrypted String Length
        $length = strlen($encrypted);
        if ($length < 2 || $length % 2 != 0) {
            return false;
        }
        if ($length == 2) {
            return '';
        }

        //Get EnCrypt Key
        $key = $this->_convertCharToNum($encrypted{$length - 1});
        if ($key < 0 || $key >= 24) {
            return false;
        }

        $sum = 0;   //Initialize Check Sum
        $buf = '';  //Initialize Buffer
        $dest = ''; //Initialize Distination Buffer
        for ($i = $key, $src = 0; $src + 2 < $length; $i++, $src++) {
            if ($i >= 24) {
                $i = 0;
            }

            for ($j = 2; ; $j++) {
                if (($this->_randKeyA[$i] * $j) % GRN_AUTH_DECRYPT_MOD_KEY
                    == 1
                ) {
                    break;
                }
            }

            $result = $this->_convertCharToNum($encrypted{$src});
            if ($result == -1) {
                return false;
            }

            $result += GRN_AUTH_DECRYPT_MOD_KEY;
            $result = (($result - $this->_randKeyB[$i]) * $j)
                      % GRN_AUTH_DECRYPT_MOD_KEY;

            $buf_ord = $result + ord('0') - 1;
            $buf .= chr($buf_ord);
            $sum += $buf_ord;
            if (strlen($buf) == 2) {
                $ch = sscanf($buf, '%x');
                if ( ! is_array($ch) || count($ch) <= 0) {
                    return false;
                }
                $dest .= chr($ch[0]);
                $buf = '';
            }
        }

        //Search Check Sum
        if ($this->_convertNumToChar($sum % GRN_AUTH_DECRYPT_MOD_KEY)
            != $encrypted{$src}
        ) {
            return false;
        }

        return $dest;
    }

    /**
     * Convert Integer To Char
     *
     * @param int $src_ord
     *
     * @return string
     * @access private
     */
    function _convertNumToChar($src_ord)
    {
        $dest_ord = ($src_ord < 26) ? ($src_ord + ord('A'))
            : ($src_ord - 26 + ord('a'));
        $dest_ch = chr($dest_ord);
        if ($dest_ch == 'I') {
            return 'v';
        } elseif ($dest_ch == 'O') {
            return 'w';
        } elseif ($dest_ch == 'l') {
            return 'x';
        }

        return $dest_ch;
    }

    // 

    /**
     * Convert Char To Interger
     *
     * @param string $src_ch
     *
     * @return int
     * @access private
     */
    function _convertCharToNum($src_ch)
    {
        $src_ord = ord($src_ch);
        if (ord('A') <= $src_ord && $src_ord <= ord('Z')) {
            return $src_ord - ord('A');
        } elseif (ord('a') <= $src_ord && $src_ord <= ord('u')) {
            return ($src_ord - ord('a')) + 26;
        } elseif ($src_ch == 'v') {
            return ord('I') - ord('A');
        } elseif ($src_ch == 'w') {
            return ord('O') - ord('A');
        } elseif ($src_ch == 'x') {
            return ord('l') - ord('a') + 26;
        }

        return -1;
    }
}

/*** End Utility Classes **/

/*** Begin Agent Classes **/

/**
 * Login Agent Class
 */
class GRN_Authentication_Login_Agent
{
    /** Login Object List **/
    var $_login_list = null;

    /** Active Login Object List **/
    var $_active_login_list = null;

    /** login / autneticate table information **/
    var $_login_authenticate_table = null;

    /**
     * Constructor
     */
    function __construct()
    {
        return;
    }

    /**
     * Get GRN_Authentication_Login_Agent Instance
     *
     * @return GRN_Authentication_Login_Agent
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Authentication_Login_Agent();
        }

        return $_instance;
    }

    /**
     * Get Login / Authenticate Table Information
     *
     * @return CB_TableInfo
     */
    function _getTableInfo()
    {
        if ($this->_login_authenticate_table === null) {
            global $G_container_base;
            $table_manager = $G_container_base->getInstance('table_manager');
            $this->_login_authenticate_table
                = $table_manager->getTableInfo(GRN_AUTH_TABLE_LOGIN_AUTHENTICATE);
        }

        return $this->_login_authenticate_table;
    }

    /**
     * Get Login Object
     *
     * @param  int $login_id
     *
     * @return GRN_Authentication_Login_Authenticate|false
     */
    function get($login_id)
    {
        //Get Login Object List
        $login_list = $this->getList();
        if ( ! is_array($login_list)) {
            {
                $___ret = false;

                return $___ret;
            }
        }

        //Get Login Object
        if ( ! array_key_exists($login_id, $login_list)) {
            {
                $___ret = false;

                return $___ret;
            }
        }

        //Return Login Object
        return $login_list[$login_id];
    }

    /**
     * Get Login Object List
     *
     * @param bool $refresh
     *
     * @return GRN_Authentication_Login_Authenticate[]
     */
    function getList($refresh = false)
    {
        //Check Login Object List
        $login_list = $this->_login_list;
        if ($login_list !== null && $refresh !== true) {
            return $login_list;
        }
        //Create Rowset
        $query = "col_type = 'login'";
        $table = $this->_getTableInfo();
        $rowset = new CB_RowSet($table);
        $rowset->addCondition($query);
        $rowset->addOrderColumn('col_list_index');

        //Create Login Object List
        $login_list = [];
        while ($row = $rowset->iterate()) {
            $login_list[$row->getOID()] = $row;
        }

        return $login_list;
    }

    /**
     * Get Active Login Object List
     *
     * @param bool $refresh
     *
     * @return GRN_Authentication_Login_Authenticate[]
     */
    function getActiveList($refresh = false)
    {
        //Check Active Login Object List
        $active_login_list = $this->_active_login_list;
        if ($active_login_list !== null && $refresh !== true) {
            return $active_login_list;
        }

        //Create Rowset
        $query = "col_type = 'login' and col_is_active = 1";
        $table = $this->_getTableInfo();
        $rowset = new CB_RowSet($table);
        $rowset->addCondition($query);
        $rowset->addOrderColumn('col_list_index');

        //Create Active Login Object List
        $active_login_list = [];
        while ($row = $rowset->iterate()) {
            $active_login_list[$row->getOID()] = $row;
        }

        return $active_login_list;
    }

    /**
     * Get Null Login Object List
     *
     * @param  bool $refresh
     *
     * @return GRN_Authentication_Login_Authenticate[]
     */
    function getNullList($refresh = false)
    {
        //Create Rowset
        $query = "col_type = 'login' and col_repository is null";
        $table = $this->_getTableInfo();
        $rowset = new CB_RowSet($table);
        $rowset->addCondition($query);
        $rowset->addOrderColumn('col_list_index');

        //Create Null Authenticate Object List
        $null_login_list = [];
        while ($row = $rowset->iterate()) {
            $null_login_list[$row->getOID()] = $row;
        }

        return $null_login_list;
    }

    /**
     * Create Login Object
     *
     * @return GRN_Authentication_Login_Authenticate
     */
    function create()
    {
        //Get Login / Authenticate Table Information
        $table = $this->_getTableInfo();

        //Create Login Object
        $login = $table->newRow();
        $login_id = $login->getOID();
        $login->set(GRN_AUTH_PROPERTY_TYPE, 'login');
        $login->set(GRN_AUTH_PROPERTY_LIST_INDEX, $login_id);
        $login->updateNow();
        $login_list = $this->getList();
        $login = $login_list[$login_id];

        return $login;
    }

    /**
     * delete Login Object
     *
     * @param int $login_id
     */
    function remove($login_id)
    {
        //Delete Login Object
        $login = $this->get($login_id);
        $login->delete();
    }

    /**
     * Change Order
     *
     * @param array $login_id_list
     */
    function changeOrder(& $login_id_list)
    {
        //Get Login List
        $login_list = $this->getList();

        //Create New List Index
        $object_index = 0;
        $list_indecies = [];
        foreach (array_keys($login_list) as $login_id) {
            if ($login_id !== current($login_id_list)) {
                $list_indecies[current($login_id_list)]
                    = $login_list[$login_id]->get(GRN_AUTH_PROPERTY_LIST_INDEX);
            }
            if ( ! next($login_id_list)) {
                break;
            }
        }

        //Set New List Index
        foreach ($list_indecies as $login_id => $list_index) {
            $login_list[$login_id]->set(GRN_AUTH_PROPERTY_LIST_INDEX,
                $list_index);
        }

        return;
    }
}

/**
 * Authenticate Agent Class
 */
class GRN_Authentication_Authenticate_Agent
{
    /** Authenticate Object List **/
    var $_authenticate_list = null;

    /** Active Authenticate Object List **/
    var $_active_authenticate_list = null;

    /** login / autneticate table information **/
    var $_login_authenticate_table = null;

    /**
     * Constructor
     */
    function __construct()
    {
        return;
    }

    /**
     * Get GRN_Authentication_Authenticate_Agent Instance
     *
     * @return GRN_Authentication_Authenticate_Agent
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Authentication_Authenticate_Agent();
        }

        return $_instance;
    }

    /**
     * Get Login / Authenticate Table Information
     *
     * @return CB_TableInfo
     */
    function _getTableInfo()
    {
        global $G_container_base;
        $table_manager = $G_container_base->getInstance('table_manager');
        $ret
            = $table_manager->getTableInfo(GRN_AUTH_TABLE_LOGIN_AUTHENTICATE);

        return $ret;
    }

    /**
     * Get Authenticate Object
     *
     * @param  int $authenticate_id
     *
     * @return GRN_Authentication_Login_Authenticate|false
     */
    function get($authenticate_id)
    {
        //Get Authenticate Object List
        $authenticate_list = $this->getList();
        if ( ! is_array($authenticate_list)) {
            {
                $___ret = false;

                return $___ret;
            }
        }

        //Get Authenticate Object
        if ( ! array_key_exists($authenticate_id, $authenticate_list)) {
            {
                $___ret = false;

                return $___ret;
            }
        }

        //Return Authenticate Object
        return $authenticate_list[$authenticate_id];
    }

    /**
     * Get Authenticate Object List
     *
     * @param bool $refresh
     *
     * @return GRN_Authentication_Login_Authenticate[]
     */
    function getList($refresh = false)
    {
        //Check Authenticate Object List
        $authenticate_list = $this->_authenticate_list;
        if ($authenticate_list !== null && $refresh !== true) {
            return $authenticate_list;
        }

        //Create Rowset
        $query = "col_type = 'authenticate'";
        $table = $this->_getTableInfo();
        $rowset = new CB_RowSet($table);
        $rowset->addCondition($query);
        $rowset->addOrderColumn('col_list_index');
        $rowset->setLock(CB_DATABASE_NO_LOCK);

        //Create Authenticate Object List
        $authenticate_list = [];
        while ($row = $rowset->iterate()) {
            $authenticate_list[$row->getOID()] = $row;
        }

        return $authenticate_list;
    }

    /**
     * Get Active Authenticate Object List
     *
     * @param  bool $refresh
     *
     * @return GRN_Authentication_Login_Authenticate[]
     */
    function getActiveList($refresh = false)
    {
        //Check Active Authenticate Object List
        $active_authenticate_list = $this->_active_authenticate_list;
        if ($active_authenticate_list !== null && $refresh !== true) {
            return $active_authenticate_list;
        }

        //Create Rowset
        $query = "col_type = 'authenticate' and col_is_active = 1";
        $table = $this->_getTableInfo();
        $rowset = new CB_RowSet($table);
        $rowset->addCondition($query);
        $rowset->addOrderColumn('col_list_index');
        $rowset->setLock(CB_DATABASE_NO_LOCK);

        //Create Active Authenticate Object List
        $active_authenticate_list = [];
        while ($row = $rowset->iterate()) {
            $active_authenticate_list[$row->getOID()] = $row;
        }

        return $active_authenticate_list;
    }

    /**
     * Get Null Authenticate Object List
     *
     * @param bool $refresh
     *
     * @return GRN_Authentication_Login_Authenticate[]
     */
    function getNullList($refresh = false)
    {
        //Create Rowset
        $query = "col_type = 'authenticate' and col_repository is null";
        $table = $this->_getTableInfo();
        $rowset = new CB_RowSet($table);
        $rowset->addCondition($query);
        $rowset->addOrderColumn('col_list_index');
        $rowset->setLock(CB_DATABASE_NO_LOCK);

        //Create Null Authenticate Object List
        $null_authenticate_list = [];
        while ($row = $rowset->iterate()) {
            $null_authenticate_list[$row->getOID()] = $row;
        }

        return $null_authenticate_list;
    }

    /**
     * Create Authenticate Object
     *
     * @return GRN_Authentication_Login_Authenticate
     */
    function create()
    {
        //Get Login / Authenticate Table Information
        $table = $this->_getTableInfo();

        //Create Authenticate Object
        $authenticate = $table->newRow();
        $authenticate_id = $authenticate->getOID();
        $authenticate->set(GRN_AUTH_PROPERTY_TYPE, 'authenticate');
        $authenticate->set(GRN_AUTH_PROPERTY_LIST_INDEX, $authenticate_id);
        $authenticate->updateNow();
        $authenticate_list = $this->getList();
        $authenticate = $authenticate_list[$authenticate_id];

        //Return Authenticate Object
        return $authenticate;
    }

    /**
     * Delete Authenticate Object
     *
     * @param int $authenticate_id
     */
    function remove($authenticate_id)
    {
        //Delete Authenticate Object
        $authenticate = $this->get($authenticate_id);
        $authenticate->delete();
    }

    /**
     * Change Order
     *
     * @param array $authenticate_id_list Authenticate ID List
     */
    function changeOrder(& $authenticate_id_list)
    {
        //Get Authenticate List
        $authenticate_list = $this->getList();

        //Create New List Index
        $object_index = 0;
        $list_indecies = [];
        foreach (array_keys($authenticate_list) as $authenticate_id) {
            if ($authenticate_id !== current($authenticate_id_list)) {
                $list_indecies[current($authenticate_id_list)]
                    = $authenticate_list[$authenticate_id]->get(GRN_AUTH_PROPERTY_LIST_INDEX);
            }
            if ( ! next($authenticate_id_list)) {
                break;
            }
        }

        //Set New List Index
        foreach ($list_indecies as $authenticate_id => $list_index) {
            $authenticate_list[$authenticate_id]->set(GRN_AUTH_PROPERTY_LIST_INDEX,
                $list_index);
        }

        return;
    }
}

/**
 * Repository Agent  Class
 */
class GRN_Authentication_Repository_Agent
{
    /** Repository Object List **/
    var $_repository_list = null;
    /** Repository table information **/
    var $_repository_table = null;

    /**
     * Constructor
     */
    function __construct()
    {
        return;
    }

    /**
     * Get GRN_Authentication_Repository_Agent Instance
     *
     * @return GRN_Authentication_Repository_Agent
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Authentication_Repository_Agent();
        }

        return $_instance;
    }

    /**
     * Get Repository Table Information
     *
     * @return CB_TableInfo
     */
    function _getTableInfo()
    {
        global $G_container_base;
        $table_manager = $G_container_base->getInstance('table_manager');
        $ret
            = $table_manager->getTableInfo(GRN_AUTH_TABLE_REPOSITORY);

        return $ret;
    }

    /**
     * Get Repository Object
     *
     * @param  int $repository_id
     *
     * @return GRN_Authentication_Repository|false
     */
    function get($repository_id)
    {
        //Get Repository Object List
        $repository_list = $this->getList();
        if ( ! is_array($repository_list)) {
            {
                $___ret = false;

                return $___ret;
            }
        }

        //Get Repository Object
        if ( ! array_key_exists($repository_id, $repository_list)) {
            {
                $___ret = false;

                return $___ret;
            }
        }

        //Return Repository Object
        return $repository_list[$repository_id];
    }

    /**
     * Get User Repository Object List
     *
     * @param  bool $refresh
     *
     * @return GRN_Authentication_Repository[]
     */
    function getList($refresh = false)
    {
        //Check User Repository Object List
        $repository_list = $this->_repository_list;
        if ($repository_list !== null && $refresh !== true) {
            return $repository_list;
        }

        //Create Rowset
        $table = $this->_getTableInfo();
        $rowset = new CB_RowSet($table);
        $rowset->addOrderColumn('col_list_index');
        $rowset->addOrderColumn('_id');
        $rowset->setLock(CB_DATABASE_NO_LOCK);

        //Create Authenticate Object List
        $repository_list = [];
        while ($row = $rowset->iterate()) {
            $repository_list[$row->getOID()] = $row;
        }

        return $repository_list;
    }

    /**
     * Create User Repository Object
     *
     * @return GRN_Authentication_Repository
     */
    function create()
    {
        //Get User Repository Table Information
        $table = $this->_getTableInfo();

        //Create User Repository Object
        $repository = $table->newRow();
        $repository_id = $repository->getOID();
        $repository->set(GRN_AUTH_PROPERTY_LIST_INDEX, 0x7FFFFFFF);
        $repository->updateNow();
        $repository_list = $this->getList();
        $repository = $repository_list[$repository_id];

        //Return User Repository Object
        return $repository;
    }

    /**
     * @param int $repository_id
     */
    function remove($repository_id)
    {
        //Delete User Repository Object
        $repository = $this->get($repository_id);
        $repository->delete();
    }

    /**
     * Change Order
     *
     * @param array $ordered_ids
     */
    function changeOrder(array $ordered_ids)
    {
        $repository_method_list = $this->getList();

        foreach ($repository_method_list as $repository_method) {
            if ($repository_method->isDefaultRepository()) {
                // Default repository always be at the top.
                $repository_method->set(GRN_AUTH_PROPERTY_LIST_INDEX, 1);
                break;
            }
        }

        $list_index = 2;
        foreach ($ordered_ids as $id) {
            if ( ! array_key_exists($id, $repository_method_list)) {
                cb_throw_error(E_GRN_CMMN_AUTH_REPOSITORY_NOT_FOUND);
            }

            $repository_method = $repository_method_list[$id];

            if ($repository_method->isMultiRepository()
                || $repository_method->isDefaultRepository()
            ) {
                continue;
            }

            $repository_method->set(GRN_AUTH_PROPERTY_LIST_INDEX, $list_index);
            $list_index++;
        }
    }
}

/*** End Agent Classes **/

/*** Begin Driver Base Classes **/

/**
 * Driver Base Class
 */
class GRN_Authentication_DriverBase extends CB_ModuleBase
{
    /** Driver Type **/
    var $_driver_name = null;
    var $_driver_type = null;

    /** Driver Page  **/
    var $_driver_page = null;

    /** Authenticate User **/
    var $_account = null;
    var $_password = null;

    /**
     * Constructor
     *
     * @param string $driver_name
     * @param string $driver_type
     * @param array  $driver_page
     */
    function __construct($driver_name, $driver_type, $driver_page)
    {
        $this->_driver_name = $driver_name;
        $this->_driver_type = $driver_type;
        $this->_driver_page = $driver_page;
    }

    /**
     * Get DriverName
     *
     * @return string
     */
    function getName()
    {
        return $this->_driver_name;
    }

    /**
     * Get Driver Type
     *
     * @return string
     */
    function getType()
    {
        return $this->_driver_type;
    }

    /**
     * Get Driver Config
     *
     * @return array Driver Settings
     */
    function getConfig()
    {
        /** Must Override In Child Class **/
        {
            $___ret = false;

            return $___ret;
        }
    }

    /**
     * Set Authenticated Account
     *
     * @param  string $account Authenticated Account
     */
    function setAccount($account)
    {
        $this->_account = $account;

        return;
    }

    /**
     * Get Authenticated Account
     *
     * @return string Authenticated Account
     */
    function getAccount()
    {
        return $this->_account;
    }

    /**
     * Set Authenticated Password
     *
     * @param  string $password Authenticated Password
     */
    function setPassword($password)
    {
        $this->_password = $password;

        return;
    }

    /**
     * Get Authenticated Password
     *
     * @return string Authenticated Password
     */
    function getPassword()
    {
        return $this->_password;
    }

    /**
     * Get Driver Page
     *
     * @param  string $page_type Driver Page Type(login/add-system/modify_system/add-personal/modify-personal)
     *
     * @return string
     */
    function getPage($page_type)
    {
        if ( ! array_key_exists($page_type, $this->_driver_page)) {
            {
                $___ret = false;

                return $___ret;
            }
        }

        return $this->_driver_page[$page_type];
    }

    /**
     * @return bool
     */
    public function canViewOnAuthenticationPages()
    {
        $page = $this->getPage(GRN_AUTH_PAGE_TYPE_VIEW_SYSTEM);

        return ! is_null($page) && $page !== false;
    }

    /**
     * @return bool
     */
    public function canAddOnAuthenticationPages()
    {
        $page = $this->getPage(GRN_AUTH_PAGE_TYPE_ADD_SYSTEM);

        return ! is_null($page) && $page !== false;
    }

    /**
     * @return bool
     */
    public function canDeleteOnAuthenticationPages()
    {
        return $this->canAddOnAuthenticationPages();
    }

    /**
     * @return bool
     */
    public function canModifyOnAuthenticationPages()
    {
        $page = $this->getPage(GRN_AUTH_PAGE_TYPE_MODIFY_SYSTEM);

        return ! is_null($page) && $page !== false;
    }
}

/**
 * Login Driver Base Class
 */
abstract class GRN_Authentication_Login_DriverBase
    extends GRN_Authentication_DriverBase
{
    /**
     * Constructor
     *
     * @param string $driver_name
     * @param string $driver_type
     * @param array  $driver_page
     */
    function __construct($driver_name, $driver_type, $driver_page)
    {
        //Initialize Parent Class
        parent::__construct($driver_name, $driver_type, $driver_page);
    }

    /**
     * Set Driver Config
     *
     * @param array  $driver_settings
     * @param object $repository
     *
     * @return bool
     */
    function setConfig(& $driver_settings, $repository)
    {
        /** Must Override In Child Class **/
        return false;
    }

    /**
     * Login
     *
     * @return bool    $result
     */
    function login()
    {
        /** Must Override In Child Class **/
        return false;
    }

    /**
     * getPasswordExpirationDays
     *
     * @param  int $uid User ID
     *
     * @return int $expiration_days
     */
    function getPasswordExpirationDays($uid)
    {
        /** Must Override In Child Class **/
        return true;
    }

    /**
     */
    function setState()
    {
    }

    /**
     * @return void
     */
    public function logout()
    {
    }

    /**
     * オンプレ環境では、SlashのログアウトAPIの実行は行わない
     *
     * @return bool
     */
    protected function executeLogoutAPI()
    {
        if ( ! defined('ON_FOREST')) {
            return;
        }
        $locale = \CB_I18N::getInstance()->getCurrentLanguage();
        $sessionManagementAPI = SlashSessionManagementAPI::getInstance($locale);
        $sessionManagementAPI->logout();
    }

    /**
     * Return whether the login driver can use multiple repository or not.
     *
     * @return bool
     */
    public abstract function canUseMultipleRepository();
}

/**
 * Authenticate Driver Base Class
 */
class GRN_Authentication_Authenticate_DriverBase
    extends GRN_Authentication_DriverBase
{
    /**
     * Constructor
     *
     * @param string $driver_name
     * @param string $driver_type
     * @param string $driver_page
     */
    function __construct($driver_name, $driver_type, $driver_page)
    {
        //Initialize Parent Class
        parent::__construct($driver_name, $driver_type, $driver_page);
    }

    /**
     * Set Driver Config
     *
     * @param array  $driver_settings
     * @param object $repository
     *
     * @return bool
     */
    function setConfig(& $driver_settings, $repository)
    {
        /** Must Override In Child Class **/
        return false;
    }

    /**
     * Authenticate
     *
     * @return bool User Infomation(array(account,password))
     */
    function authenticate()
    {
        /** Must Override In Child Class **/
        return false;
    }

    /**
     * Set Credential
     *
     * @param  string $account
     * @param  string $password
     *
     * @return bool
     */
    function setCredential($account, $password)
    {
        /** Must Override In Child Class **/
        return false;
    }

    /**
     * Update Credential
     *
     * @param CB_User $login_user
     *
     * @return bool
     */
    function updateCredential($login_user)
    {
        /** Must Override In Child Class **/
        return false;
    }

    /**
     * Get Credential
     *
     * @param  int $user_id
     *
     * @return bool|string
     */
    function getCredential($user_id = null)
    {
        /** Must Override In Child Class **/
        return false;
    }

    /**
     * Reset Credential
     *
     * @return bool
     */
    function resetCredential()
    {
        /** Must Override In Child Class **/
        return false;
    }
}

/**
 * User Repository Driver  Base Class
 */
class GRN_Authentication_Repository_DriverBase
    extends GRN_Authentication_DriverBase
{
    /**
     * Constructor
     *
     * @param string $driver_name
     * @param string $driver_type
     * @param array  $driver_page
     */
    function __construct($driver_name, $driver_type, $driver_page)
    {
        //Initialize Parent Class
        parent::__construct($driver_name, $driver_type, $driver_page);
    }

    /**
     * Set Driver Config
     *
     * @param  array $driver_settings
     *
     * @return bool
     */
    function setConfig(& $driver_settings)
    {
        /** Must Override In Child Class **/
        return false;
    }

    /**
     * Authenticate
     *
     * @param  string $account  User Acount
     * @param  string $password User Password
     *
     * @return bool
     */
    function authenticate($account, $password)
    {
        /** Must Override In Child Class **/
        return false;
    }

    /**
     * getPasswordExpirationDays
     *
     * @param  int $uid User ID
     *
     * @return int $expiration_days
     */
    function getPasswordExpirationDays($uid)
    {
        /** Must Override In Child Class **/
        return false;
    }

    /**
     * @param $account
     *
     * @return bool
     */
    public function accountIsMatched($account)
    {
        return true;
    }
}

/*** End Driver Base Classes **/

/*** Begin Loader Classes **/

/**
 * Login Driver Loader Class
 */
class GRN_Authentication_Login_Loader
{
    /** Plug-in Loader Instance **/
    var $_loader = null;

    /** @var GRN_Authentication_Login_DriverBase
     *  one of code/plugin/grn/common/authentication/login/xxx.csp
     **/
    var $_currentDriver = null;

    /** @var GRN_Authentication_Repository_DriverBase Instance
     *  one of code/plugin/grn/common/authentication/repository/xxx.csp
     **/
    var $_currentRepositoryDriver = null;

    /**
     * Constructor
     */
    function __construct()
    {
        //Create Plugin Loader for Authentication Driver
        require_once('fw/plugin.csp');
        $this->_loader = new CB_PluginLoader(GRN_AUTH_LOGIN);
    }

    /**
     * Get Current Driver
     *
     * @access private
     * @return GRN_Authentication_Login_DriverBase
     */
    function _getCurrentDriver()
    {
        //Check Current Driver
        if ( ! $this->_currentDriver) {
            //Login Plag-in Load Failed
            cb_throw_error(E_GRN_CMMN_AUTH_LOGIN_LOAD_PLUGIN_FAILED);
        }

        return $this->_currentDriver;
    }

    /**
     * Get Current Repository Driver
     *
     * @access private
     * @return GRN_Authentication_Repository $currentRepositoryDriver
     */
    function _getCurrentRepositoryDriver()
    {
        //Check Current Repository Driver
        if ( ! $this->_currentRepositoryDriver) {
            //User Repository Plag-in Load Failed
            cb_throw_error(E_GRN_CMMN_AUTH_REPOSITORY_LOAD_PLUGIN_FAILED);
        }

        return $this->_currentRepositoryDriver;
    }

    /**
     * Load Driver
     *
     * @param  string                                   $driver_type
     * @param  array                                    $driver_settings
     * @param  GRN_Authentication_Repository_DriverBase $repository
     *
     * @return GRN_Authentication_Login_DriverBase $driver
     */
    function loadDriver($driver_type, &$driver_settings, $repository)
    {
        //Get Target Driver
        $driver = $this->getDriver($driver_type);

        //Set Driver Settings
        if ( ! $driver->setConfig($driver_settings, $repository)) {
            //Login Plag-in Configuration Failed
            cb_throw_error(E_GRN_CMMN_AUTH_LOGIN_CONFIG_PLUGIN_FAILED);
        }

        //Set Current Driver & Current Repository Driver
        $this->_currentDriver = $driver;
        $this->_currentRepositoryDriver = $repository;

        return $driver;
    }

    /**
     * UnLoad Driver
     *
     * @return bool
     */
    function unloadDriver()
    {
        //Set Current Driver NULL
        $null_driver = null;
        $this->_currentDriver = $null_driver;
        $this->_currentRepositoryDriver = $null_driver;

        return true;
    }

    /**
     * Get Driver
     *
     * @param  string $driver_type //Driver Type
     *
     * @return GRN_Authentication_Login_DriverBase
     */
    function getDriver($driver_type)
    {
        //Replace Login Module Name
        $driver_type = str_replace(GRN_AUTH_LOGIN . '.', '', $driver_type);

        //Load User Repository Driver
        $loader = $this->_loader;
        $driver = $loader->loadDriver($driver_type);
        if ( ! $driver) {
            //Login Plag-in Load Failed
            cb_throw_error(E_GRN_CMMN_AUTH_LOGIN_LOAD_PLUGIN_FAILED);
        }

        return $driver;
    }

    /**
     * Get Driver List
     *
     * @return GRN_Authentication_Login_DriverBase[]|null
     */
    function getDriverList()
    {
        //Get Authentication Driver File List
        $loader = $this->_loader;
        $driver_file_list = $loader->listFiles();
        if ( ! is_array($driver_file_list)) {
            return null;
        }

        //Get Driver Object
        $driver_list = [];
        foreach ($driver_file_list as $driver_file) {
            //Get Class Name From File Name
            require_once($driver_file);
            $class_name = GRN_AUTH_LOGIN_PLUGIN_PREFIX . basename($driver_file,
                    '.csp');
            if (class_exists($class_name)) {
                //Add Driver List
                $driver_list[] = new $class_name;
            }
        }

        //Return Drivers
        return $driver_list;
    }

    /**
     * Call Driver's getAccount Method
     *
     * @return string Authenticated Account
     */
    function getAccount()
    {
        //Call Current Driver's getAccount Method
        $current_driver = $this->_getCurrentDriver();

        return $current_driver->getAccount();
    }

    /**
     * Call Driver's getPassword Method
     *
     * @return string Authenticated Password
     */
    function getPassword()
    {
        //Call Current Driver's getPassword Method
        $current_driver = $this->_getCurrentDriver();

        return $current_driver->getPassword();
    }

    /**
     * Get Driver's Configuration Page
     *
     * @param string $page_type Driver Page Type
     *
     * @return string Configuration Page Path
     */
    function getConfigPage($page_type)
    {
        //Call Current Driver's getConfigPage Method
        $current_driver = $this->_getCurrentDriver();

        return $current_driver->getPage($page_type);
    }

    /**
     * Call Driver's getLoginPage Method
     *
     * @return string Login Page Path
     */
    function getLoginPage()
    {
        //Call Current Driver's getLoginPage Method
        $current_driver = $this->_getCurrentDriver();

        return $current_driver->getPage(GRN_AUTH_PAGE_TYPE_LOGIN);
    }

    /**
     * Call Driver's getPwdExpiredPage Method
     *
     * @return string Password Expired Page Path
     */
    function getPwdExpiredPage()
    {
        $current_driver = $this->_getCurrentDriver();

        return $current_driver->getPage(GRN_AUTH_PAGE_TYPE_PWD_EXPIRED);
    }

    /**
     * Call Driver's Login Method
     *
     * @return bool
     */
    function login()
    {
        //Call Current Driver's Login Method
        $current_driver = $this->_getCurrentDriver();

        return $current_driver->login();
    }

    /**
     * Call Driver's Logout Method
     *
     * @return bool
     */
    function logout()
    {
        //Call Current Driver's Logout Method
        $current_driver = $this->_getCurrentDriver();

        return $current_driver->logout();
    }

    /**
     * getPasswordExpirationDays
     *
     * @param  int $uid
     *
     * @return int $result
     */
    function getPasswordExpirationDays($uid)
    {
        //Call Current Driver's Logout Method
        $current_driver = $this->_getCurrentDriver();

        return $current_driver->getPasswordExpirationDays($uid);
    }

    /**
     */
    function setState()
    {
        //Call Current Driver's SetState Method
        $current_driver = $this->_getCurrentDriver();

        return $current_driver->setState();
    }

    /**
     * getCurrentDriverName
     *
     * @return string    $result
     */
    function getCurrentDriverName()
    {
        return strtolower(get_class($this->_getCurrentDriver()));
    }
}

/**
 * Authenticate Driver Loader Class
 */
class GRN_Authentication_Authenticate_Loader
{
    /** Plug-in Loader Instance **/
    var $_loader = null;

    /** Current Driver Instance **/
    var $_currentDriver = null;

    /** Current Repository Driver Instance **/
    var $_currentRepositoryDriver = null;

    /**
     * Constructor
     */
    function __construct()
    {
        //Create Plugin Loader for Authentication Driver
        require_once('fw/plugin.csp');
        $this->_loader = new CB_PluginLoader(GRN_AUTH_AUTHENTICATE);
    }

    /**
     * Get Current Driver
     *
     * @access private
     * @return GRN_Authentication_Authenticate_DriverBase
     */
    function _getCurrentDriver()
    {
        //Check Current Driver
        if ( ! $this->_currentDriver) {
            //Authenticate Plag-in Load Failed
            cb_throw_error(E_GRN_CMMN_AUTH_AUTHENTICATE_LOAD_PLUGIN_FAILED);
        }

        return $this->_currentDriver;
    }

    /**
     * Get Current Repository Driver
     *
     * @access private
     * @return GRN_Authentication_Authenticate_DriverBase
     */
    function _getCurrentRepositoryDriver()
    {
        //Check Current Repository Driver
        if ( ! $this->_currentrepositoryDriver) {
            //User Repository Plag-in Load Failed
            cb_throw_error(E_GRN_CMMN_AUTH_REPOSITORY_LOAD_PLUGIN_FAILED);
        }

        return $this->_currentRepositoryDriver;
    }

    /**
     * Load Driver
     *
     * @param  string                                   $driver_type
     * @param  array                                    $driver_settings
     * @param  GRN_Authentication_Repository_DriverBase $repository
     *
     * @return GRN_Authentication_Authenticate_DriverBase
     */
    function loadDriver($driver_type, &$driver_settings, $repository)
    {
        //Get Target Driver
        $driver = $this->getDriver($driver_type);

        //Set Driver Settings
        if ( ! $driver->setConfig($driver_settings, $repository)) {
            //Authenticate Plag-in Config Failed
            cb_throw_error(E_GRN_CMMN_AUTH_AUTHENTICATE_CONFIG_PLUGIN_FAILED);
        }

        //Set Current Driver & Current Repository Driver
        $this->_currentDriver = $driver;
        $this->_currentRepositoryDriver = $repository;

        return $driver;
    }

    /**
     * UnLoad Driver
     *
     * @return bool
     */
    function unloadDriver()
    {
        //Set Current Driver NULL
        $null_driver = null;
        $this->_currentDriver = $null_driver;
        $this->_currentRepositoryDriver = $null_driver;

        return true;
    }

    /**
     * Get Driver
     *
     * @param  string $driver_type
     *
     * @return GRN_Authentication_Authenticate_DriverBase
     */
    function getDriver($driver_type)
    {
        //Replace Authenticate Module Name
        $driver_type = str_replace(GRN_AUTH_AUTHENTICATE . '.', '',
            $driver_type);

        //Load User Authenticate Driver
        $loader = $this->_loader;
        $driver = $loader->loadDriver($driver_type);
        if ( ! $driver) {
            //Authenticate Plag-in Load Failed
            cb_throw_error(E_GRN_CMMN_AUTH_AUTHENTICATE_LOAD_PLUGIN_FAILED);
        }

        return $driver;
    }

    /**
     * Get Driver List
     *
     * @return GRN_Authentication_Authenticate_DriverBase[]|null
     */
    function getDriverList()
    {
        //Get Authentication Driver File List
        $loader = $this->_loader;
        $driver_file_list = $loader->listFiles();
        if ( ! is_array($driver_file_list)) {
            return null;
        }

        //Get Driver Object
        $driver_list = [];
        foreach ($driver_file_list as $driver_file) {
            //Get Class Name From File Name
            require_once($driver_file);
            $class_name = GRN_AUTH_AUTHENTICATE_PLUGIN_PREFIX
                          . basename($driver_file, '.csp');
            if (class_exists($class_name)) {
                //Add Driver List
                $driver_list[] = new $class_name;
            }
        }

        //Return Drivers
        return $driver_list;
    }

    /**
     * Get Driver's Configuration Page
     *
     * @param  string $page_type Driver Page Type
     *
     * @return string Configuration Page Path
     */
    function getConfigPage($page_type)
    {
        //Call Current Driver's getConfigPage Method
        $current_driver = $this->_getCurrentDriver();

        return $current_driver->getPage($page_type);
    }

    /**
     * Call Driver's getAccount Method
     *
     * @return string Authenticated Account
     */
    function getAccount()
    {
        //Call Current Driver's getAccount Method
        $current_driver = $this->_getCurrentDriver();

        return $current_driver->getAccount();
    }

    /**
     * Call Driver's getPassword Method
     *
     * @return string Authenticated Password
     */
    function getPassword()
    {
        //Call Current Driver's getPassword Method
        $current_driver = $this->_getCurrentDriver();

        return $current_driver->getPassword();
    }

    /**
     * Call Driver's Authenticate Method
     *
     * @return bool    $result
     */
    function authenticate()
    {
        //Call Current Driver's authenticate Method
        $current_driver = $this->_getCurrentDriver();

        return $current_driver->authenticate();
    }

    /**
     * Call Driver's SetCredential Method
     *
     * @param string $account
     * @param string $password
     *
     * @return bool    $result
     */
    function setCredential($account, $password)
    {
        //Call Current Driver's setCredential Method
        $current_driver = $this->_getCurrentDriver();

        return $current_driver->setCredential($account, $password);
    }

    /**
     * Call Driver's updateCredential Method
     *
     * @param CB_User $login_user
     *
     * @return bool
     */
    function updateCredential($login_user)
    {
        //Call Current Driver's setCredential Method
        $current_driver = $this->_getCurrentDriver();

        return $current_driver->updateCredential($login_user);
    }

    /**
     * Call Driver's getCredential Method
     *
     * @return bool    $result
     */
    function getCredential()
    {
        //Call Current Driver's setCredential Method
        $current_driver = $this->_getCurrentDriver();

        return $current_driver->getCredential();
    }

    /**
     * Reset Credential
     *
     * @return bool    $result
     */
    function resetCredential()
    {
        //Call Current Driver's resetCredential Method
        $current_driver = $this->_getCurrentDriver();

        return $current_driver->resetCredential();
    }
}

/**
 * Repository Driver  Loader Class
 */
class GRN_Authentication_Repository_Loader
{
    /** Plug-in Loader Instance **/
    var $_loader = null;

    /** Current Driver Instance **/
    var $_currentDriver = null;

    /**
     * Constructor
     */
    function __construct()
    {
        //Create Plugin Loader for Authentication Driver
        require_once('fw/plugin.csp');
        $this->_loader = new CB_PluginLoader(GRN_AUTH_REPOSITORY);
    }

    /**
     * Get Current Driver
     *
     * @access private
     * @return GRN_Authentication_Repository_DriverBase
     */
    function _getCurrentDriver()
    {
        //Check Current Driver
        if ( ! $this->_currentDriver) {
            //User Repository Plag-in Load Failed
            cb_throw_error(E_GRN_CMMN_AUTH_REPOSITORY_LOAD_PLUGIN_FAILED);
        }

        return $this->_currentDriver;
    }

    /**
     * Load Driver
     *
     * @param  string $driver_type
     * @param  array  $driver_settings
     *
     * @return GRN_Authentication_Repository_DriverBase
     */
    function loadDriver($driver_type, &$driver_settings)
    {
        //Get Target Driver
        $driver = $this->getDriver($driver_type);

        //Set Driver Settings
        if ( ! $driver->setConfig($driver_settings)) {
            //User Repository Plag-in Config Failed
            cb_throw_error(E_GRN_CMMN_AUTH_REPOSITORY_CONFIG_PLUGIN_FAILED);
        }

        //Set Current Driver
        $this->_currentDriver = $driver;

        return $driver;
    }

    /**
     * UnLoad Driver
     *
     * @return bool
     */
    function unloadDriver()
    {
        //Set Current Driver NULL
        $null_driver = null;
        $this->_currentDriver = $null_driver;

        return true;
    }

    /**
     * Get Driver
     *
     * @param  string $driver_type
     *
     * @return GRN_Authentication_Repository_DriverBase
     */
    function getDriver($driver_type)
    {
        //Replace Repository Module Name
        $driver_type = str_replace(GRN_AUTH_REPOSITORY . '.', '', $driver_type);

        //Load User Repository Driver
        $loader = $this->_loader;
        $driver = $loader->loadDriver($driver_type);
        if ( ! $driver) {
            //User Repository Plag-in Load Failed
            cb_throw_error(E_GRN_CMMN_AUTH_REPOSITORY_LOAD_PLUGIN_FAILED);
        }

        return $driver;
    }

    /**
     * Get Driver List
     *
     * @return GRN_Authentication_Repository_DriverBase[]|null
     */
    function getDriverList()
    {
        //Get Authentication Driver File List
        $loader = $this->_loader;
        $driver_file_list = $loader->listFiles();
        if ( ! is_array($driver_file_list)) {
            return null;
        }

        //Get Driver Object
        $driver_list = [];
        foreach ($driver_file_list as $driver_file) {
            //Get Class Name From File Name
            require_once($driver_file);
            $class_name = GRN_AUTH_REPOSITORY_PLUGIN_PREFIX
                          . basename($driver_file, '.csp');
            if (class_exists($class_name)) {
                //Add Driver List
                $driver_list[] = new $class_name;
            }
        }

        //Return Drivers
        return $driver_list;
    }

    /**
     * Get Driver's Configuration Page
     *
     * @param  string $page_type Driver Page Type
     *
     * @return string Configuration Page Path
     */
    function getConfigPage($page_type)
    {
        //Call Current Driver's getConfigPage Method
        $current_driver = $this->_getCurrentDriver();

        return $current_driver->getPage($page_type);
    }

    /**
     * Call Driver's Authenticate Method
     *
     * @param  string $account  User Account
     * @param  string $password User Password
     *
     * @return bool    $result
     */
    function authenticate($account, $password)
    {
        //Call Current Driver's authenticate Method
        $current_driver = $this->_getCurrentDriver();

        return $current_driver->authenticate($account, $password);
    }
}

/**
 * Application Hook Loader Class
 */
class GRN_Authentication_Application_Loader
{
    /** Plug-in Loader Instance **/
    var $_loader = null;

    /** Current Hook Instance **/
    var $_currentHook = null;

    /**
     * Constructor
     */
    function __construct()
    {
        //Create Plugin Loader for Application Hook
        require_once('fw/plugin.csp');
        $this->_loader = new CB_PluginLoader(GRN_AUTH_APPLICATION);
    }

    /**
     * Load Hook
     *
     * @param  string $hook_type
     *
     * @return string  Loaded Hook Function
     */
    function loadHook($hook_type)
    {
        //Replace Application Module Name
        $hook_type = str_replace(GRN_AUTH_APPLICATION . '.', '', $hook_type);

        //Load Application Hook
        $loader = $this->_loader;
        $hook = $loader->loadHooks($hook_type);
        if (count($hook) !== 1) {
            return false;
        }

        //Set Current Hook
        $this->_currentHook = current($hook);

        return $hook;
    }

    /**
     * UnLoad Hook
     *
     * @return bool
     */
    function unloadHook()
    {
        //Set Current Hook NULL
        $this->_currentHook = null;

        return true;
    }

    /**
     * Get Login/Autenticate Driver Name
     *
     * @param  array $page_parts URL Page Path Parts
     *
     * @return string $driver_name
     */
    function getDriverName($page_parts)
    {
        //Call Current Hook Function
        $current_hook = $this->_currentHook;

        /** @var $current_hook Closure */
        return $current_hook($page_parts);
    }

    /**
     * @param string $app_id
     * @param array  $page_parts
     *
     * @return string|null
     */
    public function getAuthenticationForceDriverName($app_id, $page_parts)
    {
        /**
         * When access application is cbpapi,sysapi,util_api, force load,
         * load code/plugin/grn/common/authentication/application/util_api.csp
         */
        if (in_array($app_id, ["cbpapi", "sysapi", "util_api"])) {
            $this->loadHook("util_api");

            return $this->getDriverName($page_parts);
        }

        /**
         * load and execute function
         * in code/plugin/grn/common/authentication/application/${app_id}.csp
         */
        $driverName = null;
        if ($this->loadHook($app_id)) {
            $driverName = $this->getDriverName($page_parts);
        }

        /**
         * When there system in PATH_INFO, use system authenticate driver
         */
        if (is_null($driverName) && in_array('system', $page_parts)) {
            return "system";
        }

        return $driverName;
    }

}

/*** End Loader Classes **/

/*** Begin Service Class **/

/**
 * Authentication Service Class
 */
class GRN_Authentication_Service extends CB_ModuleBase
{
    /**
     * Constructor
     */
    function __construct()
    {
        //Initialize Parent Class
        parent::__construct(GRN_AUTH);
    }

    /**
     * Get GRN_Authentication_Service Instance
     *
     * @return GRN_Authentication_Service
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Authentication_Service();
        }

        return $_instance;
    }

    /** Login and Authenticate Function **/

    /**
     * Login
     *
     * @return bool
     */
    function login()
    {
        //Get Current Login Loader
        $current_login_loader = $this->getCurrentLoginLoader();
        $session = parent::getSession();
        global $G_INPUT;

        // Set Output Style for Cellular
        $current_login_loader->setState();

        //Try to Change Password
        $this->_changePassword();

        //Challenge Current Login Loader Login
        if ( ! $current_login_loader->login()) {
            //Login Failed
            return false;
        }

        if ( ! defined('ON_FOREST') || cb_is_cellular_page()) {
            CB_SessionManager::getInstance()->restart();
            $session = parent::getSession();
        }
        //

        //Get Account & Password
        $account = $current_login_loader->getAccount();
        $password = $current_login_loader->getPassword();

        //Get Login User
        global $G_container_base;
        /** @var GRN_Uum $grn_uum */
        $grn_uum = $G_container_base->getInstance('uum');
        $login_user = $grn_uum->getUserByForeignKey($account);
        if ( ! $login_user) {
            return false;
        }

        if (defined('ON_FOREST')) {
            require_once('fw/slash_util.csp');
            if ( ! CB_SlashUtil::isIgnorePasswordExpire($login_user)
                 && CB_SlashUtil::isPasswordExpired($login_user)
            ) {
                cb_throw_error(E_GRN_PASSWORD_EXPIRED);
            }
        }

        $uid = $login_user->getOID();
        $days = $current_login_loader->getPasswordExpirationDays($uid);

        $clear_expired = true;

        if ($days === false) {
            return false;
        } elseif ($days !== true) {
            require_once('grn/system_logic.csp');
            $system = GRN_System::getInstance();
            $warning_before = $system->getPasswordWarningBefore();

            if ($days <= 0
                || ($warning_before > 0
                    && $days <= $warning_before
                    && ! array_key_exists(GRN_AUTH_PASSWORD_TICKET, $G_INPUT))
            ) {
                $crypt_util = GRN_Authentication_Crypt_Utility::getInstance();

                $pwd_expired = [
                    'uid'             => $uid,
                    'password'        => $crypt_util->encrypt2($password),
                    'account'         => $account,
                    'expiration_days' => $days,
                    'ticket'          => md5(uniqid(rand(), true))
                ];

                $clear_expired = false;
                $session->set(GRN_AUTH_SESSION_PWD_EXPIRED, $pwd_expired);

                if ($current_login_loader->getCurrentDriverName()
                    != 'plugin_grn_common_authentication_login_cbapi'
                ) {
                    //リモートの場合は正常終了とする
                    return false;
                }
            }
        }

        if ($clear_expired) {
            $session->set(GRN_AUTH_SESSION_PWD_EXPIRED, null);
        }

        //Validate Login User
        $valid = $login_user->get('valid');
        if ( ! is_null($valid)) {
            $today = getdate();
            if (($valid->year < $today['year'])
                || ($valid->year == $today['year']
                    && $valid->month < $today['mon'])
                || ($valid->year == $today['year']
                    && $valid->month == $today['mon']
                    && $valid->day < $today['mday'])
            ) {
                cb_throw_error(E_COMMON_ACCOUNT_INVALIDATED);
            }
        }

        //Set Login User
        $grn_uum->_sp->_login_user = $login_user;

        //  Print HTTP Header for CBAPI
        header('X-Cybozu-User: ' . $login_user->getOID());
        //Save Login User Information to Session
        $crypt_util = GRN_Authentication_Crypt_Utility::getInstance();
        $auth_user = [
            GRN_AUTH_SESSION_ACCOUNT  => $account,
            GRN_AUTH_SESSION_PASSWORD => $crypt_util->encrypt2($password),
        ];
        $session = parent::getSession();
        $session->set(GRN_AUTH_SESSION_AUTH_USER, $auth_user);

        //Save First Login Information to Session
        $session->set(GRN_AUTH_SESSION_FIRST_LOGIN, 1);
        $session->set(GRN_AUTH_SESSION_FIRST_LOGOUT, 0);

        //Set All Credential
        $this->setCredential($account, $password);

        //  システム設定用の認証でログインしたなら、v2認証Cookieも更新する
        //  システム画面ではシステム設定用の認証Cookieしか更新されないが、v2Cookieの中の古いユーザーも新しく更新しなければならない。
        //  これをしないと、システム管理画面からユーザー画面へ遷移した時にユーザーが入れ替わることがある。
        if (strcmp($current_login_loader->getCurrentDriverName(),
                'plugin_grn_common_authentication_login_system') === 0
        ) {
            require_once(cb_basedir()
                         . '/code/plugin/grn/common/authentication/authenticate/cybozu.csp');
            $v2
                = plugin_grn_common_authentication_authenticate_cybozu::static_getV2AuthDriver(true);
            if ( ! is_null($v2)) {
                $v2->updateCredential($login_user);
            }
        }

        //  アクセスユーザーを更新する
        require_once(cb_basedir()
                     . '/code/plugin/grn/common/authentication/authenticate/cybozu.csp');
        plugin_grn_common_authentication_authenticate_cybozu::static_storeLoginUser($login_user);

        //Login Success
        return true;
    }

    function _changePassword()
    {
        global $G_INPUT;
        $pwd_expired = $this->getPasswordExpiredInfo();
        $exec = @$G_INPUT['_exec'];

        if (array_key_exists(GRN_AUTH_PASSWORD_TICKET, $G_INPUT)) {
            if ( ! is_array($pwd_expired)) {
                cb_throw_error($exec > 0
                    ?
                    E_GRN_CAN_NOT_CHANGE_PASSWORD
                    :
                    E_GRN_CAN_NOT_LOGIN_WITHOUT_CHANGE);
            }

            $crypt_util = GRN_Authentication_Crypt_Utility::getInstance();

            if ($pwd_expired['ticket'] == $G_INPUT[GRN_AUTH_PASSWORD_TICKET]
                && $pwd_expired['uid'] == $G_INPUT['_uid']
            ) {
                if ($exec > 0) {
                    $password = @$G_INPUT['_password'];
                    $retype = @$G_INPUT['_retype'];

                    if (is_null($password) || $password != $retype) {
                        cb_throw_error(E_GRN_PASSWORD_NOT_MATCH);
                    }

                    if ($password
                        == $crypt_util->decrypt2($pwd_expired['password'])
                    ) {
                        cb_throw_error(E_GRN_CAN_NOT_SET_SAME_PASSWORD);
                    }

                    require_once('grn/system_logic.csp');
                    $system = GRN_System::getInstance();
                    $password_length = $system->getPasswordLength();
                    if (strlen($password) < $password_length) {
                        cb_throw_error(E_GRN_PASSWORD_INVALID_LENGTH, null,
                            ['length' => $password_length],
                            ['length' => $password_length]);
                    }

                    //-- modify user password
                    global $G_container_base;
                    /** @var GRN_Uum $uum */
                    $uum = $G_container_base->getInstance('uum');
                    require_once('grn/uum_util.csp');
                    $uum_util = GRN_UumUtil::getInstance();

                    $uid = $pwd_expired['uid'];
                    $user = $uum->getUser($uid);

                    if ($uum_util->isValidPassword($password)) {
                        // check strong password
                        $this->checkStrongPassword($password, $user);
                        $uum->changePassword($uid, null, $password, true);
                    }

                    require_once('grn/logger.csp');
                    $lm = CB_LoggerManager::getInstance();
                    $logger = $lm->getLogger('grn.common');
                    $logger->_user_name = $user->get('display_name');
                    $logger->_user_account = $user->get('foreign_key');
                    $params = [
                        'uid'     => $uid,
                        'name'    => $user->get('display_name'),
                        'account' => $user->get('foreign_key')
                    ];
                    $logger->noticeEx('change', 'password', $params);

                    return true;
                } else {
                    $G_INPUT['_uid'] = $pwd_expired['uid'];
                    $G_INPUT['_account'] = $pwd_expired['account'];
                    $G_INPUT['_password']
                        = $crypt_util->decrypt2($pwd_expired['password']);
                }
            }
        }

        return false;
    }

    function checkStrongPassword($password, $user)
    {
        require_once('grn/uum_util.csp');
        $uum_util = GRN_UumUtil::getInstance();
        $errorOptions = $uum_util->isStrongPassword($password, $user);
        if ($errorOptions === true) {
            $errorOptions = null;
        }
        if (count($errorOptions) == 0) {
            return;
        }

        $solution = '';
        require_once('grn/system_logic.csp');
        $system = GRN_System::getInstance();
        $setting = $system->getPasswordComplex();
        if (isset($setting['enable']) && $setting['enable']) {
            $strong_pwd_options = $setting['options'];
            require_once('grn/strong_password.csp');
            $pwd_validator = new GRN_StrongPasswordValidator();
            $pwd_validator->setOptions($strong_pwd_options);
            $optionsArray = $pwd_validator->getOptionsArray();
            if (count($optionsArray) > 0) {
                $solution = cb_msg('grn.personal.user',
                    'GRN_PRS_US-PASSWD_EXPLAN_1');
                foreach ($optionsArray as $item_id => $value) {
                    if ($item_id == 'alpha' && ! @$optionsArray['alphamix']) {
                        $solution .= "\n" . cb_msg('grn.personal.user',
                                'GRN_PRS_US-PASSWD_EXPLAN_2_ALPHA');
                    }
                    if ($item_id == 'alphamix') {
                        $solution .= "\n" . cb_msg('grn.personal.user',
                                'GRN_PRS_US-PASSWD_EXPLAN_3_ALPHAMIX');
                        $solution = str_replace('<br>', "\n", $solution);
                    }
                    if ($item_id == 'numeral') {
                        $solution .= "\n" . cb_msg('grn.personal.user',
                                'GRN_PRS_US-PASSWD_EXPLAN_4_NUMERAL');
                    }
                    if ($item_id == 'symbol') {
                        $solution .= "\n" . cb_msg('grn.personal.user',
                                'GRN_PRS_US-PASSWD_EXPLAN_5_SYMBOL');
                    }
                    if ($item_id == 'bannedwords') {
                        $solution .= "\n" . cb_msg('grn.personal.user',
                                'GRN_PRS_US-PASSWD_EXPLAN_6_BANNED_WORDS');
                    }
                }
            }
        }

        cb_throw_error(E_GRN_PASSWORD_RESTRICTION_FAIL, null, null,
            ['solution' => $solution]);
    }

    /**
     * Get Login Page
     *
     * @return string
     */
    function getLoginPage()
    {
        //Get Current Login Loader
        $current_login_loader = $this->getCurrentLoginLoader();

        //Challenge Current Login Loader Login
        $login_page = $current_login_loader->getLoginPage();
        if ( ! $login_page) {
            //Login Page Not Found
            {
                $___ret = false;

                return $___ret;
            }
        }

        //Return Login Page
        return $login_page;
    }

    /**
     * Call Driver's getPwdExpiredPage Method
     *
     * @return string Password Expired Page Path
     */
    function getPwdExpiredPage()
    {
        //Get Current Login Loader
        $current_login_loader = $this->getCurrentLoginLoader();

        //Challenge Current Login Loader PwdExpiredPage
        $login_page = $current_login_loader->getPwdExpiredPage();
        if ( ! $login_page) {
            //Page Not Found
            {
                $___ret = false;

                return $___ret;
            }
        }

        //Return Page
        return $login_page;
    }

    /**
     * Logout
     *
     * @return bool   $result
     */
    function logout()
    {
        //Get UUM
        global $G_container_base;
        /** @var GRN_Uum $grn_uum */
        $grn_uum = $G_container_base->getInstance('uum');
        if ($grn_uum->_sp->_login_user) {
            //Delete Login User Information from Session
            $session = parent::getSession();
            $session->set(GRN_AUTH_SESSION_AUTH_USER, null);
            $session->set(GRN_AUTH_SESSION_PWD_EXPIRED, null);

            //Delete First Login Information to Session
            $session->set(GRN_AUTH_SESSION_FIRST_LOGIN, 0);
        }

        //Reset All Credentials
        if ( ! $this->resetCredential()) {
            return false;
        }
        //Set Login User
        $grn_uum->_sp->_login_user = false;
        if ( ! isset($session)) {
            $session = parent::getSession();
        }

        $session->set(GRN_AUTH_SESSION_FIRST_LOGOUT, 1);
        $this->getCurrentLoginLoader()->logout();

        return true;
    }

    /**
     * Authenticate
     *
     * @return bool   $result
     */
    function authenticate()
    {
        //Get Current Authenticate Loader List
        $current_authenticate_loader_list
            = $this->getCurrentAuthenticateLoaderList();

        //  オープン統合認証v2で認証するかを判定する
        //  V2が有効で、かつそのCookieを受け取ったときのみ認証を行う
        foreach (
            $current_authenticate_loader_list as $id =>
            $current_authenticate_loader
        ) {
            $driver = $current_authenticate_loader->_getCurrentDriver();
            if ((is_a($driver,
                    'plugin_grn_common_authentication_authenticate_cybozu'))
                && ($driver->isOpen2Mode())
                && (array_key_exists($driver->_driver_settings['cookie_name'],
                    $_COOKIE))
            ) {
                $v2 = [$id => $current_authenticate_loader];
                //  v2を実行するので、他の連携認証は使わない
                foreach (
                    $current_authenticate_loader_list as $id =>
                    $current_authenticate_loader
                ) {
                    $driver = $current_authenticate_loader->_getCurrentDriver();

                    //  標準認証は残す
                    if (is_a($driver,
                        'plugin_grn_common_authentication_authenticate_default')
                    ) {
                        continue;
                    }

                    //  他は除外する
                    unset($current_authenticate_loader_list[$id]);
                }
                $current_authenticate_loader_list = array_merge($v2,
                    $current_authenticate_loader_list);
                break;
            }
        }

        //Challenge All Authenticate Loaders Authenticate
        foreach (
            array_keys($current_authenticate_loader_list) as
            $current_authenticate_loader_index
        ) {
            if ($current_authenticate_loader_list[$current_authenticate_loader_index]->authenticate()) {
                //Get Account & Password
                $account
                    = $current_authenticate_loader_list[$current_authenticate_loader_index]->getAccount();
                $password
                    = $current_authenticate_loader_list[$current_authenticate_loader_index]->getPassword();

                //Get Login User
                global $G_container_base;
                /** @var GRN_Uum $grn_uum */
                $grn_uum = $G_container_base->getInstance('uum');
                $login_user = $grn_uum->getUserByForeignKey($account);
                if ( ! $login_user) {
                    return false;
                }

                //Vaqlidate Login User
                $valid = $login_user->get('valid');
                if ( ! is_null($valid)) {
                    $today = getdate();
                    if (($valid->year < $today['year'])
                        || ($valid->year == $today['year']
                            && $valid->month < $today['mon'])
                        || ($valid->year == $today['year']
                            && $valid->month == $today['mon']
                            && $valid->day < $today['mday'])
                    ) {
                        cb_throw_error(E_COMMON_ACCOUNT_INVALIDATED);
                    }
                }

                require_once(cb_basedir()
                             . '/code/plugin/grn/common/authentication/authenticate/cybozu.csp');
                $v2
                    = plugin_grn_common_authentication_authenticate_cybozu::static_getV2AuthDriver(true);

                //Check Logout
                global $G_INPUT;
                if (cb_get_pagename() !== 'command_logout') {
                    //Set Login User
                    $grn_uum->_sp->_login_user = $login_user;

                    //Set All Credential
                    $this->updateCredential($login_user);

                    //  システム設定用の認証でログインしたなら、v2認証Cookieも更新する
                    //  システム画面ではシステム設定用の認証Cookieしか更新されないが、v2Cookieの中の古いユーザーも新しく更新しなければならない。
                    //  これをしないと、システム管理画面からユーザー画面へ遷移した時にユーザーが入れ替わることがある。
                    if (is_a($current_authenticate_loader_list[$current_authenticate_loader_index]->_getcurrentDriver(),
                        'plugin_grn_common_authentication_authenticate_system')
                    ) {
                        if ( ! is_null($v2)) {
                            $v2_action = $v2->getAction();
                            if (strcmp($v2_action, 'logout') === 0) {
                                //  システム管理画面でもシングルサインアウトする
                                global $G_container_base;
                                $grn_uum
                                    = $G_container_base->getInstance('uum');
                                $grn_uum->logout();
                                cb_switch_page('system_login.csp');
                            } else {
                                $v2->updateCredential($login_user);
                            }
                        }
                    }

                    //Check First Login
                    $session = parent::getSession();
                    $first_login = $session->get(GRN_AUTH_SESSION_FIRST_LOGIN);
                    if ($first_login !== 1) {
                        // Reset the CBSESSID with Onpremise edition or Cellular for the first login
                        if ( ! defined('ON_FOREST') || cb_is_cellular_page()) {
                            // Only reset the session when active the session authentication with method OpenAuthV2 or Environment Variable.
                            if ( ! is_null($v2)
                                 || is_a($current_authenticate_loader_list[$current_authenticate_loader_index]->_getcurrentDriver(),
                                    'plugin_grn_common_authentication_authenticate_open')
                                 || is_a($current_authenticate_loader_list[$current_authenticate_loader_index]->_getcurrentDriver(),
                                    'plugin_grn_common_authentication_authenticate_environment')
                                 || is_a($current_authenticate_loader_list[$current_authenticate_loader_index]->_getcurrentDriver(),
                                    'plugin_grn_common_authentication_authenticate_cybozu')
                            ) {
                                CB_SessionManager::getInstance()->restart();
                                $session = parent::getSession();
                            }
                        }
                        //Run Login Triggers
                        $grn_uum->_sp->_loadHook('addTriggerOnLogin');
                        $grn_uum->_sp->_runHook($grn_uum->_sp->_login_triggers,
                            $grn_uum->_sp->_login_user);

                        // G_INPUTに_account,_password,_system,_uidが入ったままだと受け取ったパラメータを
                        // そのまま引き継ぐようなロジックで問題が出るのでunsetしておく。
                        // login triggersの後に実行しているのは、grn_set_cookieで_accountを使うため。
                        unset($G_INPUT['_system']);
                        unset($G_INPUT['_uid']);
                        unset($G_INPUT['_account']);
                        unset($G_INPUT['_password']);
                        // パスワードの有効期限切れの時にはこっちも問題が出るので念のため毎回外す
                        unset($G_INPUT['_exec']);
                        unset($G_INPUT['_retype']);
                        unset($G_INPUT['_pwd_ticket']);

                        //Set First Login Information to Session
                        $session->set(GRN_AUTH_SESSION_FIRST_LOGIN, 1);
                    }
                    $session->set(GRN_AUTH_SESSION_FIRST_LOGOUT, 0);

                    plugin_grn_common_authentication_authenticate_cybozu::static_storeLoginUser($login_user);
                } else {
                    $session = parent::getSession();
                    $first_logout
                        = $session->get(GRN_AUTH_SESSION_FIRST_LOGOUT);

                    if ($first_logout !== 1) {
                        $grn_uum_spi = $grn_uum->_sp;
                        $grn_uum_spi->_loadHook('addTriggerOnLogout');
                        $grn_uum_spi->_runHook($grn_uum_spi->_logout_triggers,
                            $login_user);
                        $session->set(GRN_AUTH_SESSION_FIRST_LOGOUT, 1);
                    }
                }

                //Authenticate Success
                return true;
            }
        }

        //Authenticate Failed
        return false;
    }

    /**
     * Set Credential
     *
     * @param  string $account  //Account
     * @param  string $password //Password
     *
     * @return bool   $result
     */
    function setCredential($account, $password)
    {
        //Get Current Authenticate Loader List
        $current_authenticate_loader_list
            = $this->getCurrentAuthenticateLoaderList();

        //Set All Active Authenticate Loaders Credential
        foreach (
            array_keys($current_authenticate_loader_list) as
            $current_authenticate_loader_index
        ) {
            $current_authenticate_loader_list[$current_authenticate_loader_index]->setCredential($account,
                $password);
        }

        return true;
    }

    /**
     * Update Credential
     *
     * @param CB_User $login_user
     *
     * @return bool
     */
    function updateCredential($login_user)
    {
        //Get Current Authenticate Loader List
        $current_authenticate_loader_list
            = $this->getCurrentAuthenticateLoaderList();

        //Set All Active Authenticate Loaders Credential
        foreach (
            array_keys($current_authenticate_loader_list) as
            $current_authenticate_loader_index
        ) {
            $current_authenticate_loader_list[$current_authenticate_loader_index]->updateCredential($login_user);
        }

        return true;
    }

    /**
     * Reset Credential
     *
     * @return bool    $result
     */
    function resetCredential()
    {
        //Get Current Authenticate Loader List
        $current_authenticate_loader_list
            = $this->getCurrentAuthenticateLoaderList();

        //Reset All Active Authenticate Loaders Credential
        foreach (
            array_keys($current_authenticate_loader_list) as
            $current_authenticate_loader_index
        ) {
            $current_authenticate_loader_list[$current_authenticate_loader_index]->resetCredential();
        }

        return true;
    }

    /*** Login Method Setting ***/

    /**
     * Set Login Method
     *
     * @param int $login_method_id
     *
     * @return GRN_Authentication_Login_Authenticate
     */
    function setCurrentLoginMethod($login_method_id)
    {
        //Invalid Login Method ID
        cb_trim_check($login_method_id, E_GRN_CMMN_AUTH_LOGIN_INVALID_ID);

        //Reset Previous Active Login Method List
        $active_login_method_list = $this->getActiveLoginMethodList();
        if ($active_login_method_list) {
            foreach (
                array_keys($active_login_method_list) as $active_login_method_id
            ) {
                $active_login_method_list[$active_login_method_id]->set(GRN_AUTH_PROPERTY_IS_ACTIVE,
                    0);
            }
        }

        //Set Active Login Method
        $active_login_method = $this->getLoginMethod($login_method_id);
        $active_login_method->set(GRN_AUTH_PROPERTY_IS_ACTIVE, 1);

        //Return Active Login Method
        return $active_login_method;
    }

    /**
     * Get Current Login Method
     *
     * @return GRN_Authentication_Login_Authenticate|null
     */
    function getCurrentLoginMethod()
    {
        //Check Authentication Target Application
        global $G_authentication_force_driver;
        if (is_null($G_authentication_force_driver)) {
            //Get Active Login Method List
            $active_login_method_list = $this->getActiveLoginMethodList();
            if ( ! $active_login_method_list) {
                //Get Default Login Method
                $default_login_method = $this->getDefaultLoginMethod();
                $active_login_method_list[$default_login_method->getOID()]
                    = $default_login_method;
            }
        } else {
            //Get Default Login Method
            $default_login_method = $this->getDefaultLoginMethod();
            $active_login_method_list = [];
            $active_login_method_list[$default_login_method->getOID()]
                = $default_login_method;
        }

        $active_login_method = null;

        //Get First Active Login Method
        foreach (
            array_keys($active_login_method_list) as $active_login_method_id
        ) {
            $active_login_method
                = $active_login_method_list[$active_login_method_id];
            if (is_object($active_login_method)) {
                break;
            }
        }

        //Return Active Login Method
        return $active_login_method;
    }

    /**
     * Get Current Login Loader
     *
     * @return GRN_Authentication_Login_Loader
     */
    function getCurrentLoginLoader()
    {
        $current_login_loader = null;

        if (defined('ON_FOREST')) {
            return $this->getForestLoginLoader();
        }

        $current_login_method = $this->getCurrentLoginMethod();

        return $this->createLoginLoader($current_login_method);
    }

    /**
     * @param string $driver_type
     *
     * @return GRN_Authentication_Login_DriverBase|null
     */
    public function getActiveLoginDriver($driver_type)
    {
        $active_login_method_list = $this->getActiveLoginMethodList();

        if ( ! $active_login_method_list) {
            return null;
        }

        foreach ($active_login_method_list as $login_method) {
            if ($login_method->get(GRN_AUTH_PROPERTY_DRIVER_TYPE)
                === $driver_type
            ) {
                $loader = $this->createLoginLoader($login_method);

                return $loader->_getCurrentDriver();
            }
        }

        return null;
    }

    /**
     * @param GRN_Authentication_Login_Authenticate $login_authenticate_row
     *
     * @return GRN_Authentication_Login_Loader
     */
    private function createLoginLoader(
        GRN_Authentication_Login_Authenticate $login_authenticate_row
    ) {
        // Get Login Driver Settings
        $driver_type
            = $login_authenticate_row->get(GRN_AUTH_PROPERTY_DRIVER_TYPE);
        $driver_settings
            = cb_unserialize($login_authenticate_row->get(GRN_AUTH_PROPERTY_DRIVER_SETTINGS),
            ["allowed_classes" => false]);
        $repository_row
            = $login_authenticate_row->get(GRN_AUTH_PROPERTY_REPOSITORY);

        // Get Repository Driver Settings
        $repository_driver_type
            = $repository_row->get(GRN_AUTH_PROPERTY_DRIVER_TYPE);
        $repository_driver_settings
            = cb_unserialize($repository_row->get(GRN_AUTH_PROPERTY_DRIVER_SETTINGS),
            ["allowed_classes" => false]);

        // Load Repository Driver
        $repositoryLoader = new GRN_Authentication_Repository_Loader();
        $repository_driver
            = $repositoryLoader->loadDriver($repository_driver_type,
            $repository_driver_settings);

        // Create Login Loader
        $login_loader = new GRN_Authentication_Login_Loader();
        $login_loader->loadDriver($driver_type, $driver_settings,
            $repository_driver);

        return $login_loader;
    }

    /**
     * Get the current login loader for forest.
     *
     * @return GRN_Authentication_Login_Loader
     */
    private function getForestLoginLoader()
    {
        $default_repository = $this->getDefaultRepositoryDriver();
        $current_login_loader = new GRN_Authentication_Login_Loader();

        require_once('fw/forest_util.csp');
        $config = CB_ForestUtil::getConfig();
        global $G_authentication_force_driver;
        $login_type = is_null($G_authentication_force_driver)
            ? $config->get('Login', 'type') : $G_authentication_force_driver;
        $type = GRN_AUTH_LOGIN . '.' . $login_type;
        /**
         * In Forest environment, deny authentication via cbapi(remote service)
         */
        switch ($type) {
            case GRN_AUTH_LOGIN_DEFAULT:
            case GRN_AUTH_LOGIN_SYSTEM:
            case GRN_AUTH_LOGIN_CELLULAR:
            case GRN_AUTH_LOGIN_UTIL_API:
            case GRN_AUTH_LOGIN_DESKTOP_API_V1:
            case GRN_AUTH_LOGIN_REST_API_V1:
                $settings = [];
                $current_login_loader->loadDriver($type, $settings,
                    $default_repository);
                break;
            case GRN_AUTH_LOGIN_ENVIRONMENT:
                $settings = [
                    'variable_name'     => $config->get('Login', 'name'),
                    'credential_format' => $config->get('Login', 'format'),
                    'credential_prefix' => $config->get('Login', 'prefix'),
                    'credential_suffix' => $config->get('Login', 'suffix'),
                ];
                $current_login_loader->loadDriver($type, $settings,
                    $default_repository);
                break;
            default:
                assert('FALSE');
                break;
        }

        return $current_login_loader;
    }


    /**
     * Add Login Method
     *
     * @param  string                        $display_name
     * @param  string                        $driver_type Login Driver Type(Module Name)
     * @param  array                         $driver_settings
     * @param  GRN_Authentication_Repository $repository_method
     *
     * @return GRN_Authentication_Login_Authenticate $login_method
     */
    function addLoginMethod(
        $display_name,
        $driver_type,
        &$driver_settings,
        GRN_Authentication_Repository $repository_method
    ) {
        //Check Arguments
        cb_trim_check($display_name, E_GRN_CMMN_AUTH_LOGIN_NOT_INPUT_NECESSARY);
        cb_trim_check($driver_type, E_GRN_CMMN_AUTH_LOGIN_NOT_INPUT_NECESSARY);

        $repository_driver = $this->loadRepositoryDriver($repository_method);

        //Validate Login Driver
        $login_loader = new GRN_Authentication_Login_Loader();
        $login_driver = $login_loader->loadDriver($driver_type,
            $driver_settings, $repository_driver);

        //Validate Repository Method
        if ($repository_method->isMultiRepository()
            && ! $login_driver->canUseMultipleRepository()
        ) {
            cb_throw_error(E_GRN_CMMN_AUTH_REPOSITORY_NOT_FOUND);
        }

        //Create Login Method Object
        $login_agent = GRN_Authentication_Login_Agent::getInstance();
        $login_method = $login_agent->create();

        //Set Login Method Properties
        $login_method->set(GRN_AUTH_PROPERTY_DISPLAY_NAME, $display_name);
        $login_method->set(GRN_AUTH_PROPERTY_DRIVER_TYPE, $driver_type);
        $login_method->set(GRN_AUTH_PROPERTY_DRIVER_SETTINGS,
            serialize($driver_settings));
        $login_method->set(GRN_AUTH_PROPERTY_REPOSITORY, $repository_method);

        //Set Creator Infomation
        $this->_setCreator($login_method);

        //Return Login Method Object
        return $login_method;
    }

    /**
     * Modify Login Method
     *
     * @param  int                           $login_method_id
     * @param  string                        $display_name
     * @param  array                         $driver_settings
     * @param  GRN_Authentication_Repository $repository_method
     *
     * @return GRN_Authentication_Login_Authenticate
     */
    function modifyLoginMethod(
        $login_method_id,
        $display_name,
        &$driver_settings,
        GRN_Authentication_Repository $repository_method
    ) {
        //Invalid Login Method ID
        cb_trim_check($login_method_id, E_GRN_CMMN_AUTH_LOGIN_INVALID_ID);

        //Not Input Necessary Arguments
        cb_trim_check($display_name, E_GRN_CMMN_AUTH_LOGIN_NOT_INPUT_NECESSARY);

        $login_method = $this->getLoginMethod($login_method_id);
        $repository_driver = $this->loadRepositoryDriver($repository_method);

        //Validate Login Driver
        $login_loader = new GRN_Authentication_Login_Loader();
        $login_driver
            = $login_loader->loadDriver($login_method->get(GRN_AUTH_PROPERTY_DRIVER_TYPE),
            $driver_settings, $repository_driver);

        //Validate Repository Method
        if ($repository_method->isMultiRepository()
            && ! $login_driver->canUseMultipleRepository()
        ) {
            cb_throw_error(E_GRN_CMMN_AUTH_REPOSITORY_NOT_FOUND);
        }

        //Modify Login Method Properties
        $login_method->set(GRN_AUTH_PROPERTY_DISPLAY_NAME, $display_name);
        $login_method->set(GRN_AUTH_PROPERTY_DRIVER_SETTINGS,
            serialize($driver_settings));
        $login_method->set(GRN_AUTH_PROPERTY_REPOSITORY, $repository_method);

        //Set Modifier Infomation
        $this->_setModifier($login_method);

        //Return Login Method Object
        return $login_method;
    }

    /**
     * Delete Login Method
     *
     * @param  int $login_method_id
     */
    function deleteLoginMethod($login_method_id)
    {
        //Check Arguments
        cb_trim_check($login_method_id, E_GRN_CMMN_AUTH_LOGIN_INVALID_ID);

        //Get Login Method
        $login_agent = GRN_Authentication_Login_Agent::getInstance();

        //Get Active Status
        $login_method = $login_agent->get($login_method_id);
        $is_active = $login_method->get(GRN_AUTH_PROPERTY_IS_ACTIVE);

        //Delete Login Method Object
        $login_agent->remove($login_method_id);

        //Check Delete Active Login Method
        if ($is_active == 1) {
            //Clear Force Driver
            global $G_authentication_force_driver;
            $backup = $G_authentication_force_driver;
            $G_authentication_force_driver = null;

            //Activate Default Driver
            $default_login_method = $this->getDefaultLoginMethod();
            $default_login_method->set(GRN_AUTH_PROPERTY_IS_ACTIVE, $is_active);

            //Restore Force Driver
            $G_authentication_force_driver = $backup;
        }

        return;
    }

    /**
     * Get Login Method
     *
     * @param  int $login_method_id
     *
     * @return GRN_Authentication_Login_Authenticate
     */
    function getLoginMethod($login_method_id)
    {
        //Check Arguments
        cb_trim_check($login_method_id, E_GRN_CMMN_AUTH_LOGIN_INVALID_ID);

        //Create Login Method Object
        $login_agent = GRN_Authentication_Login_Agent::getInstance();
        $login_method = $login_agent->get($login_method_id);
        if ( ! $login_method) {
            //Login Method Not Found
            cb_throw_error(E_GRN_CMMN_AUTH_LOGIN_NOT_FOUND);
        }

        //Return Login Method
        return $login_method;
    }

    /**
     * Get Default Login Method
     *
     * @return GRN_Authentication_Login_Authenticate
     */
    function getDefaultLoginMethod()
    {
        //Get Default Login Driver
        $default_driver = $this->getDefaultLoginDriver();

        //Get Login Method Object
        $login_method = null;
        $login_agent = GRN_Authentication_Login_Agent::getInstance();
        $login_method_list = $login_agent->getList(true);
        if (count($login_method_list) !== 0) {
            foreach (array_keys($login_method_list) as $login_method_id) {
                $driver_type
                    = $login_method_list[$login_method_id]->get(GRN_AUTH_PROPERTY_DRIVER_TYPE);
                if ($default_driver->getType() === $driver_type) {
                    $login_method = $login_method_list[$login_method_id];
                    break;
                }
            }
        }

        //Create Login Method Object
        if ( ! $login_method) {
            unset($display_name);
            unset($driver_type);
            $display_name = $default_driver->getName();
            $driver_type = $default_driver->getType();


            if (in_array($driver_type, GRN_AUTH_LOGIN_DRIVERS_DEPENDING_ON_DEFAULT)) {
                $default_login_method = $this->getSingleLoginMethod(GRN_AUTH_LOGIN_DEFAULT);
                $repository_id = $default_login_method->getId(GRN_AUTH_PROPERTY_REPOSITORY);
                $repository_method = $this->getRepositoryMethod($repository_id);
            } else {
                $repository_method = $this->getDefaultRepositoryMethod();
            }

            //Create Default Login Method Object
            $dummy_settings = [];
            $login_method = $this->addLoginMethod($display_name, $driver_type,
                $dummy_settings,
                $repository_method);

            //Set Display Name Null
            $login_method->set(GRN_AUTH_PROPERTY_DISPLAY_NAME, '');

            //Set Active Status
            if ($driver_type === GRN_AUTH_LOGIN_DEFAULT) {
                $login_method->set(GRN_AUTH_PROPERTY_IS_ACTIVE, 1);
            }
        }

        //Return Login Method
        return $login_method;
    }

    /**
     * Get Login Method List
     *
     * @return GRN_Authentication_Login_Authenticate[]
     */
    function getLoginMethodList()
    {
        //Create Login Method Object List
        $login_agent = GRN_Authentication_Login_Agent::getInstance();
        $login_method_list =& $login_agent->getList();
        if ( ! $login_method_list) {
            //Login Method List Not Found
            return false;
        }

        //Return Login Method List
        return $login_method_list;
    }

    /**
     * Get Active Login Method List
     *
     * @return GRN_Authentication_Login_Authenticate[]|bool
     */
    function getActiveLoginMethodList()
    {
        //Create Login Method Object List
        $login_agent = GRN_Authentication_Login_Agent::getInstance();
        $active_login_method_list = $login_agent->getActiveList();
        if ( ! $active_login_method_list) {
            //Active Login Method List Not Found
            return false;
        }

        //Return Active Login Method List
        return $active_login_method_list;
    }

    /*** Login Driver Setting ***/

    /**
     * Get Login Driver
     *
     * @param  string $driver_type
     *
     * @return GRN_Authentication_Login_DriverBase
     */
    function getLoginDriver($driver_type)
    {
        //Get Login Loader
        $login_loader = new GRN_Authentication_Login_Loader();

        //Get Login Driver
        $login_driver = $login_loader->getDriver($driver_type);

        //Return Login Driver
        return $login_driver;
    }

    /**
     * Get Default Login Driver
     *
     * @return GRN_Authentication_Login_DriverBase
     */
    function getDefaultLoginDriver()
    {
        //Get Login Loader
        $login_loader = new GRN_Authentication_Login_Loader();

        //Get Login Driver
        global $G_authentication_force_driver;
        if (is_null($G_authentication_force_driver)) {
            //Default Authentication
            $driver_type = GRN_AUTH_LOGIN_DEFAULT;
        } else {
            //Special Authentication
            $driver_type = GRN_AUTH_LOGIN . '.'
                           . $G_authentication_force_driver;
        }
        $login_driver = $login_loader->getDriver($driver_type);

        //Return Login Driver
        return $login_driver;
    }

    /**
     * Get Login Driver List
     *
     * @return array
     */
    function getLoginDriverList()
    {
        //Get Login Loader
        $login_loader = new GRN_Authentication_Login_Loader();

        //Get Login Driver List
        $login_driver_list = $login_loader->getDriverList();

        //Return Login Driver List
        return $login_driver_list;
    }

    /*** Authenticate Method Setting ***/

    /**
     * Change Authentication Method Active Status
     *
     * @param  int $authenticate_method_id
     *
     * @return GRN_Authentication_Login_Authenticate
     */
    function changeAuthenticateMethodActiveStatus($authenticate_method_id)
    {
        //Check Arguments
        cb_trim_check($authenticate_method_id,
            E_GRN_CMMN_AUTH_AUTHENTICATE_INVALID_ID);

        //Get Authenticate Method Object
        $authenticate_method
            = $this->getAuthenticateMethod($authenticate_method_id);

        //Change Authenticate Method Active Status
        $is_active = $authenticate_method->get(GRN_AUTH_PROPERTY_IS_ACTIVE);
        if ($is_active === '1') {
            $authenticate_method->set(GRN_AUTH_PROPERTY_IS_ACTIVE, 0);
        } else {
            $authenticate_method->set(GRN_AUTH_PROPERTY_IS_ACTIVE, 1);
        }

        //Set Modifier Infomation
        $this->_setModifier($authenticate_method);

        //Return Authenticate Method Object
        return $authenticate_method;
    }

    /**
     * Get Current Authenticate Loader List
     *
     * @return GRN_Authentication_Authenticate_Loader[]
     */
    function getCurrentAuthenticateLoaderList()
    {
        if (defined('ON_FOREST')) {
            return $this->getForestAuthenticateLoaderList();
        }

        //Get Authentication Target Application
        global $G_authentication_force_driver;

        //Get Active Authenticate Method List
        if (is_null($G_authentication_force_driver)) {
            $active_authenticate_method_list
                = $this->getActiveAuthenticateMethodList();
            if ( ! $active_authenticate_method_list) {
                //Add Default Authenticate Method to Active Authenticate Method List
                $default_authenticate_method
                    = $this->getDefaultAuthenticateMethod();
                $active_authenticate_method_list[$default_authenticate_method->getOID()]
                    = $default_authenticate_method;
            }
        } else {
            //Add Default Authenticate Method to Active Authenticate Method List
            $default_authenticate_method
                = $this->getDefaultAuthenticateMethod();
            $active_authenticate_method_list[$default_authenticate_method->getOID()]
                = $default_authenticate_method;
        }

        //Crerate Authenticate Loader List
        $count = 0;
        $current_authenticate_loader_list = [];
        foreach (
            array_keys($active_authenticate_method_list) as
            $active_authenticate_method_id
        ) {
            //Get Authenticate Driver Settings
            $active_authenticate_method
                = $active_authenticate_method_list[$active_authenticate_method_id];
            $driver_type
                = $active_authenticate_method->get(GRN_AUTH_PROPERTY_DRIVER_TYPE);
            $driver_settings
                = cb_unserialize($active_authenticate_method->get(GRN_AUTH_PROPERTY_DRIVER_SETTINGS),
                ["allowed_classes" => false]);
            $repository
                = $active_authenticate_method->get(GRN_AUTH_PROPERTY_REPOSITORY);

            //Get Repository Driver Settings
            $repository_driver_type
                = $repository->get(GRN_AUTH_PROPERTY_DRIVER_TYPE);
            $repository_driver_settings
                = cb_unserialize($repository->get(GRN_AUTH_PROPERTY_DRIVER_SETTINGS),
                ["allowed_classes" => false]);

            //Load Repository Driver
            $repository_loader = new GRN_Authentication_Repository_Loader();
            $repository_driver
                = $repository_loader->loadDriver($repository_driver_type,
                $repository_driver_settings);

            //Create Authenticate Loader
            $current_authenticate_loader
                = new GRN_Authentication_Authenticate_Loader();
            $current_authenticate_loader->loadDriver($driver_type,
                $driver_settings, $repository_driver);

            //Add Authenticate Loader List
            $current_authenticate_loader_list[$count]
                = $current_authenticate_loader;
            unset($current_authenticate_loader);
            $count++;
        }

        //Return Current Authenticate Loader List
        return $current_authenticate_loader_list;
    }

    /**
     * @return GRN_Authentication_Authenticate_Loader[]
     */
    private function getForestAuthenticateLoaderList()
    {
        global $G_authentication_force_driver;

        $loader_list = [];

        $repository_driver = $this->getDefaultRepositoryDriver();
        /**
         * In Forest environment, deny access via cbapi(remote service)
         */
        $force_drivers = ['cellular', 'util_api', 'v1', 'api'];
        if (in_array($G_authentication_force_driver, $force_drivers)) {
            $force_settings = [];
            $force_loader = new GRN_Authentication_Authenticate_Loader();
            $force_loader->loadDriver(GRN_AUTH_AUTHENTICATE . '.'
                                      . $G_authentication_force_driver,
                $force_settings, $repository_driver);
            $loader_list[] = $force_loader;

            return $loader_list;
        }

        $default_settings = [];
        $default_loader = new GRN_Authentication_Authenticate_Loader();
        $default_loader->loadDriver(GRN_AUTH_AUTHENTICATE_DEFAULT,
            $default_settings, $repository_driver);
        $loader_list[] = $default_loader;

        return $loader_list;
    }

    /**
     * Add Authenticate Method
     *
     * @param string                        $display_name
     * @param string                        $driver_type Authenticate Driver Type(Module Name)
     * @param array                         $driver_settings
     * @param GRN_Authentication_Repository $repository_method
     *
     * @return GRN_Authentication_Login_Authenticate
     */
    function addAuthenticateMethod(
        $display_name,
        $driver_type,
        &$driver_settings,
        GRN_Authentication_Repository $repository_method
    ) {
        //Not Input Necessary Arguments
        cb_trim_check($display_name,
            E_GRN_CMMN_AUTH_AUTHENTICATE_NOT_INPUT_NECESSARY);
        cb_trim_check($driver_type,
            E_GRN_CMMN_AUTH_AUTHENTICATE_NOT_INPUT_NECESSARY);

        $repository_driver = $this->loadRepositoryDriver($repository_method);

        //Validate Authenticate Driver
        $authenticate_loader = new GRN_Authentication_Authenticate_Loader();
        $authenticate_loader->loadDriver($driver_type, $driver_settings,
            $repository_driver);

        //Check Repository Method
        if ($repository_method->isMultiRepository()) {
            cb_throw_error(E_GRN_CMMN_AUTH_REPOSITORY_NOT_FOUND);
        }

        //Create Authenticate Method Object
        $authenticate_agent
            = GRN_Authentication_Authenticate_Agent::getInstance();
        $authenticate_method = $authenticate_agent->create();

        //Set Authenticate Method Properties
        $authenticate_method->set(GRN_AUTH_PROPERTY_DISPLAY_NAME,
            $display_name);
        $authenticate_method->set(GRN_AUTH_PROPERTY_DRIVER_TYPE, $driver_type);
        $authenticate_method->set(GRN_AUTH_PROPERTY_DRIVER_SETTINGS,
            serialize($driver_settings));
        $authenticate_method->set(GRN_AUTH_PROPERTY_REPOSITORY,
            $repository_method);

        //Set Creator Infomation
        $this->_setCreator($authenticate_method);

        //Return Authenticate Method Object
        return $authenticate_method;
    }

    /**
     * Modify Authenticate Method
     *
     * @param  int                           $authenticate_method_id
     * @param  string                        $display_name
     * @param  array                         $driver_settings
     * @param  GRN_Authentication_Repository $repository_method
     *
     * @return GRN_Authentication_Login_Authenticate
     */
    function modifyAuthenticateMethod(
        $authenticate_method_id,
        $display_name,
        &$driver_settings,
        GRN_Authentication_Repository $repository_method
    ) {
        //Invalid Authenticate Method ID
        cb_trim_check($authenticate_method_id,
            E_GRN_CMMN_AUTH_AUTHENTICATE_INVALID_ID);

        //Not Input Necessary Arguments
        cb_trim_check($display_name,
            E_GRN_CMMN_AUTH_AUTHENTICATE_NOT_INPUT_NECESSARY);

        $authenticate_method
            = $this->getAuthenticateMethod($authenticate_method_id);
        $repository_driver = $this->loadRepositoryDriver($repository_method);

        //Validate Authenticate Driver
        $authenticate_loader = new GRN_Authentication_Authenticate_Loader();
        $authenticate_loader->loadDriver(
            $authenticate_method->get(GRN_AUTH_PROPERTY_DRIVER_TYPE),
            $driver_settings, $repository_driver
        );

        //Check Repository Method
        if ($repository_method->isMultiRepository()) {
            cb_throw_error(E_GRN_CMMN_AUTH_REPOSITORY_NOT_FOUND);
        }

        //Modify Authenticate Method Properties
        $authenticate_method->set(GRN_AUTH_PROPERTY_DISPLAY_NAME,
            $display_name);
        $authenticate_method->set(GRN_AUTH_PROPERTY_DRIVER_SETTINGS,
            serialize($driver_settings));
        $authenticate_method->set(GRN_AUTH_PROPERTY_REPOSITORY,
            $repository_method);

        //Set Modifier Infomation
        $this->_setModifier($authenticate_method);

        //Return Authenticate Method Object
        return $authenticate_method;
    }

    /**
     * Delete Authenticate Method
     *
     * @param  int $authenticate_method_id
     */
    function deleteAuthenticateMethod($authenticate_method_id)
    {
        //Invalid Authenticate Method ID
        cb_trim_check($authenticate_method_id,
            E_GRN_CMMN_AUTH_AUTHENTICATE_INVALID_ID);

        //Delete Authenticate Method Object
        $authenticate_agent
            = GRN_Authentication_Authenticate_Agent::getInstance();
        $authenticate_agent->remove($authenticate_method_id);

        return;
    }

    /**
     * Get Authenticate Method
     *
     * @param  int $authenticate_method_id
     *
     * @return GRN_Authentication_Login_Authenticate
     */
    function getAuthenticateMethod($authenticate_method_id)
    {
        //Invalid Authenticate Method ID
        cb_trim_check($authenticate_method_id,
            E_GRN_CMMN_AUTH_AUTHENTICATE_INVALID_ID);

        //Create Authenticate Method Object
        $authenticate_agent
            = GRN_Authentication_Authenticate_Agent::getInstance();
        $authenticate_method
            = $authenticate_agent->get($authenticate_method_id);
        if ( ! $authenticate_method) {
            //Authenticate Method Not Found
            cb_throw_error(E_GRN_CMMN_AUTH_AUTHENTICATE_NOT_FOUND);
        }

        //Return Authenticate Method
        return $authenticate_method;
    }

    /**
     * Get Authenticate Method List
     *
     * @return GRN_Authentication_Login_Authenticate[]|false
     */
    function getAuthenticateMethodList()
    {
        //Create Authenticate Method Object List
        $authenticate_agent
            = GRN_Authentication_Authenticate_Agent::getInstance();
        $authenticate_method_list = $authenticate_agent->getList();
        if ( ! $authenticate_method_list) {
            //Authenticate Method List Not Found
            //cb_throw_error(E_GRN_CMMN_AUTH_AUTHENTICATE_LIST_NOT_FOUND);            
            $ret = false;

            return $ret;
        }

        //Return Authenticate Method List
        return $authenticate_method_list;
    }

    /**
     * Get Default Authenticate Method
     *
     * @return GRN_Authentication_Login_Authenticate
     */
    function getDefaultAuthenticateMethod()
    {
        //Get Default Authenticate Driver
        $default_driver = $this->getDefaultAuthenticateDriver();

        //Get Authenticate Method Object
        $authenticate_method = null;
        $authenticate_agent
            = GRN_Authentication_Authenticate_Agent::getInstance();
        $authenticate_method_list = $authenticate_agent->getList();
        if (count($authenticate_method_list) !== 0) {
            foreach (
                array_keys($authenticate_method_list) as $authenticate_method_id
            ) {
                $driver_type
                    = $authenticate_method_list[$authenticate_method_id]->get(GRN_AUTH_PROPERTY_DRIVER_TYPE);
                if ($default_driver->getType() === $driver_type) {
                    $authenticate_method
                        = $authenticate_method_list[$authenticate_method_id];
                    break;
                }
            }
        }

        if ( ! $authenticate_method) {
            //Get Default Repository Method
            $default_repository_method = $this->getDefaultRepositoryMethod();

            unset($display_name);
            unset($driver_type);
            $display_name = $default_driver->getName();
            $driver_type = $default_driver->getType();

            //Create Default Authenticate Method Object
            $dummy_settings = [];
            $authenticate_method = $this->addAuthenticateMethod($display_name,
                $driver_type, $dummy_settings,
                $default_repository_method);

            //Set Display Name Null
            $authenticate_method->set(GRN_AUTH_PROPERTY_DISPLAY_NAME, '');

            //Set Active Status
            if ($driver_type === GRN_AUTH_AUTHENTICATE_DEFAULT) {
                $authenticate_method->set(GRN_AUTH_PROPERTY_IS_ACTIVE, 1);
            }
        }

        //Return Authenticate Method
        return $authenticate_method;
    }

    /**
     * Get Active Authenticate Method List
     *
     * @return GRN_Authentication_Login_Authenticate[]|false
     */
    function getActiveAuthenticateMethodList()
    {
        //Create Active Authenticate Method Object List
        $authenticate_agent
            = GRN_Authentication_Authenticate_Agent::getInstance();
        $active_authenticate_method_list = $authenticate_agent->getActiveList();
        if ( ! $active_authenticate_method_list) {
            //Active Authenticate Method List Not Found
            return false;
        }

        //Return Active Authenticate Method List
        return $active_authenticate_method_list;
    }

    /*** Authenticate Loader Setting ***/

    /*** Authenticate Driver Setting ***/

    /**
     * Get Authenticate Driver
     *
     * @param  string $driver_type
     *
     * @return GRN_Authentication_Authenticate_DriverBase
     */
    function getAuthenticateDriver($driver_type)
    {
        //Get Authenticate Loader
        $authenticate_loader = new GRN_Authentication_Authenticate_Loader();

        //Get Authenticate Driver
        $authenticate_driver = $authenticate_loader->getDriver($driver_type);

        //Return Authenticate Driver
        return $authenticate_driver;
    }

    /**
     * Get Default Authenticate Driver
     *
     * @return GRN_Authentication_Authenticate_DriverBase
     */
    function getDefaultAuthenticateDriver()
    {
        //Get Authenticate Loader
        $authenticate_loader = new GRN_Authentication_Authenticate_Loader();

        //Get Authenticate Driver
        global $G_authentication_force_driver;
        if (is_null($G_authentication_force_driver)) {
            //Default Authentication
            $driver_type = GRN_AUTH_AUTHENTICATE_DEFAULT;
        } else {
            //Special Authentication
            $driver_type = GRN_AUTH_AUTHENTICATE . '.'
                           . $G_authentication_force_driver;
        }
        $authenticate_driver = $authenticate_loader->getDriver($driver_type);

        //Return Authenticate Driver
        return $authenticate_driver;
    }

    /**
     * Get Authenticate Driver List
     *
     * @return GRN_Authentication_Authenticate_DriverBase[]|null
     */
    function getAuthenticateDriverList()
    {
        //Get Authenticate Loader
        $authenticate_loader = new GRN_Authentication_Authenticate_Loader();

        //Get Authenticate Driver List
        $authenticate_driver_list = $authenticate_loader->getDriverList();

        //Return Authenticate Driver List
        return $authenticate_driver_list;
    }

    /*** Repository Driver Setting ***/

    /**
     * Add Repository Method
     *
     * @param  string $display_name    //Dsiplay Name
     * @param  string $driver_type     //Repository Driver Type(Module Name)
     * @param  array  $driver_settings //Repository Driver Settings
     *
     * @return GRN_Authentication_Repository //Repository Method Persistent Object
     */
    function addRepositoryMethod($display_name, $driver_type, &$driver_settings)
    {
        //Not Input Necessary Arguments
        cb_trim_check($display_name,
            E_GRN_CMMN_AUTH_REPOSITORY_NOT_INPUT_NECESSARY);
        cb_trim_check($driver_type,
            E_GRN_CMMN_AUTH_REPOSITORY_NOT_INPUT_NECESSARY);

        //Validate Repository Driver
        $repository_loader = new GRN_Authentication_Repository_Loader();
        $repository_loader->loadDriver($driver_type, $driver_settings);

        //Create Repository Method Object
        $repository_agent = GRN_Authentication_Repository_Agent::getInstance();
        $repository_method = $repository_agent->create();

        //Set Repository Method Properties
        $repository_method->set(GRN_AUTH_PROPERTY_DISPLAY_NAME, $display_name);
        $repository_method->set(GRN_AUTH_PROPERTY_DRIVER_TYPE, $driver_type);
        $repository_method->set(GRN_AUTH_PROPERTY_DRIVER_SETTINGS,
            serialize($driver_settings));

        //Set Creator Infomation
        $this->_setCreator($repository_method);

        //Return Repository Method Object
        return $repository_method;
    }

    /**
     * @return GRN_Authentication_Repository
     */
    function addMultiRepositoryMethod()
    {
        $driver_type = GRN_AUTH_REPOSITORY_MULTI;

        //Create Repository Method Object
        $repository_agent = GRN_Authentication_Repository_Agent::getInstance();
        $repository_method = $repository_agent->create();

        //Generate driver settings
        $driver_settings = ['id' => $repository_method->getOID()];

        //Set Repository Method Properties
        $repository_method->set(GRN_AUTH_PROPERTY_DRIVER_TYPE, $driver_type);
        $repository_method->set(GRN_AUTH_PROPERTY_DRIVER_SETTINGS,
            serialize($driver_settings));

        //Set Creator Infomation
        $this->_setCreator($repository_method);

        //Return Repository Method Object
        return $repository_method;
    }

    /**
     * Modify Repository Method
     *
     * @param  int    $repository_method_id //Repository Method ID
     * @param  string $display_name         //Dsiplay Name
     * @param  array  $driver_settings      //Repository Driver Settings
     *
     * @return GRN_Authentication_Repository //Repository Method Persistent Object
     */
    function modifyRepositoryMethod(
        $repository_method_id,
        $display_name,
        &$driver_settings
    ) {
        //Invalid Repository Method ID
        cb_trim_check($repository_method_id,
            E_GRN_CMMN_AUTH_REPOSITORY_INVALID_ID);

        //Not Input Necessary Arguments
        cb_trim_check($display_name,
            E_GRN_CMMN_AUTH_REPOSITORY_NOT_INPUT_NECESSARY);

        //Get Repository Method Object
        $repository_method = $this->getRepositoryMethod($repository_method_id);

        //Validate Repository Driver
        $repository_loader = new GRN_Authentication_Repository_Loader();
        $repository_loader->loadDriver($repository_method->get(GRN_AUTH_PROPERTY_DRIVER_TYPE),
            $driver_settings);

        //Modify Repository Method Properties
        $repository_method->set(GRN_AUTH_PROPERTY_DISPLAY_NAME, $display_name);
        $repository_method->set(GRN_AUTH_PROPERTY_DRIVER_SETTINGS,
            serialize($driver_settings));

        //Set Modifier Infomation
        $this->_setModifier($repository_method);

        //Return Repository Method Object
        return $repository_method;
    }

    /**
     * Delete Repository Method
     *
     * @param  int $repository_method_id
     */
    function deleteRepositoryMethod($repository_method_id)
    {
        //Invalid Repository Method ID
        cb_trim_check($repository_method_id,
            E_GRN_CMMN_AUTH_REPOSITORY_INVALID_ID);

        //Delete Repository Method Object
        $repository_agent = GRN_Authentication_Repository_Agent::getInstance();
        $repository_agent->remove($repository_method_id);

        //Ger Default Repository Method
        $default_repository_method = $this->getDefaultRepositoryMethod();

        //Set Default Repository Method to Null Login Method
        $login_agent = GRN_Authentication_Login_Agent::getInstance();
        $null_login_method_list = $login_agent->getNullList();
        foreach (array_keys($null_login_method_list) as $null_login_method_id) {
            $null_login_method_list[$null_login_method_id]->set(GRN_AUTH_PROPERTY_REPOSITORY,
                $default_repository_method);
        }

        //Set Default Repository Method to Null Authenticate Method
        $authenticate_agent
            = GRN_Authentication_Authenticate_Agent::getInstance();
        $null_authenticate_method_list = $authenticate_agent->getNullList();
        foreach (
            array_keys($null_authenticate_method_list) as
            $null_authenticate_method_id
        ) {
            $null_authenticate_method_list[$null_authenticate_method_id]->set(GRN_AUTH_PROPERTY_REPOSITORY,
                $default_repository_method);
        }

        return;
    }

    /**
     * @param string[] $ordered_ids
     */
    public function changeRepositoryMethodListOrder(array $ordered_ids)
    {
        $repository_agent = GRN_Authentication_Repository_Agent::getInstance();
        $repository_agent->changeOrder($ordered_ids);
    }

    /**
     * Get Default Repository Method
     *
     * @return GRN_Authentication_Repository
     */
    function getDefaultRepositoryMethod()
    {
        //Get Repository Method Object
        $repository_method = null;
        $repository_agent
            = GRN_Authentication_Repository_Agent::getInstance();
        $repositry_method_list = $repository_agent->getList();
        if (count($repositry_method_list) !== 0) {
            foreach (
                array_keys($repositry_method_list) as $repository_method_id
            ) {
                $driver_type
                    = $repositry_method_list[$repository_method_id]->get(GRN_AUTH_PROPERTY_DRIVER_TYPE);
                if ($driver_type === GRN_AUTH_REPOSITORY_DEFAULT) {
                    $repository_method
                        = $repositry_method_list[$repository_method_id];
                    break;
                }
            }
        }

        if ( ! $repository_method) {
            //Create Repository Method Object
            $dummy_settings = [];
            $repository_method = $this->addRepositoryMethod(cb_msg(GRN_AUTH,
                'default'), GRN_AUTH_REPOSITORY_DEFAULT, $dummy_settings);

            //Set Display Name Null
            $repository_method->set(GRN_AUTH_PROPERTY_DISPLAY_NAME, '');
        }

        //Return Repository Method
        return $repository_method;
    }

    /**
     * Get Repository Method
     *
     * @param  int $repository_method_id
     *
     * @return GRN_Authentication_Repository
     */
    function getRepositoryMethod($repository_method_id)
    {
        //Invalid Repository Method ID
        cb_trim_check($repository_method_id,
            E_GRN_CMMN_AUTH_REPOSITORY_INVALID_ID);

        //Create Repository Method Object
        $repository_agent = GRN_Authentication_Repository_Agent::getInstance();
        $repository_method = $repository_agent->get($repository_method_id);
        if ( ! $repository_method) {
            //Repository Method Not Found
            cb_throw_error(E_GRN_CMMN_AUTH_REPOSITORY_NOT_FOUND);
        }

        //Return Repository Method
        return $repository_method;
    }

    /**
     * Get Repository Method List.
     * Note that the list doesn't contain multi repository.
     *
     * @return GRN_Authentication_Repository[]|false
     */
    function getRepositoryMethodList()
    {
        //Create Repository Method Object List
        $repository_agent = GRN_Authentication_Repository_Agent::getInstance();
        $repository_method_list = $repository_agent->getList();
        if ( ! $repository_method_list) {
            //Repository Method List Not Found
            //cb_throw_error(E_GRN_CMMN_AUTH_REPOSITORY_LIST_NOT_FOUND);
            $ret = false;

            return $ret;
        }

        $repository_method_list = array_filter($repository_method_list,
            function ($repository_method) {
                /** @var $repository_method GRN_Authentication_Repository */
                return ! $repository_method->isMultiRepository();
            }
        );

        return $repository_method_list;
    }

    /**
     * @param $repository_method_id
     *
     * @return GRN_Authentication_Repository[]
     */
    public function getChildRepositoryMethodsByParentId($repository_method_id)
    {
        $dao = $this->getGrnAuthenticationMultiRelationDAO();
        $child_ids = $dao->getChildIdsByParentId($repository_method_id);

        $repository_methods = [];
        foreach ($child_ids as $child_id) {
            $repository_methods[] = $this->getRepositoryMethod($child_id);
        }

        return $repository_methods;
    }

    /**
     * @param       $repository_method_id
     * @param array $child_repository_ids
     */
    public function updateMultiRepositoryRelations(
        $repository_method_id,
        array $child_repository_ids
    ) {
        $dao = $this->getGrnAuthenticationMultiRelationDAO();
        $dao->deleteByParentId($repository_method_id);

        foreach ($child_repository_ids as $child_repository_id) {
            $child_repository_method
                = $this->getRepositoryMethod($child_repository_id);
            if ($child_repository_method->get(GRN_AUTH_PROPERTY_DRIVER_TYPE)
                === GRN_AUTH_REPOSITORY_MULTI
            ) {
                cb_throw_error(E_GRN_CMMN_AUTH_REPOSITORY_NOT_FOUND);
            }
            if ($repository_method_id == $child_repository_method->getOID()) {
                cb_throw_error(E_GRN_CMMN_AUTH_REPOSITORY_NOT_FOUND);
            }
            $dao->add($repository_method_id,
                $child_repository_method->getOID());
        }
    }

    /**
     * Get Default Repository Driver
     *
     * @return GRN_Authentication_Repository_DriverBase
     */
    function getDefaultRepositoryDriver()
    {
        //Get Repository Loader
        $repository_loader = new GRN_Authentication_Repository_Loader();

        //Get Repository Driver
        $repository_driver
            = $repository_loader->getDriver(GRN_AUTH_REPOSITORY_DEFAULT);

        //Return Repository Driver
        return $repository_driver;
    }

    /**
     * Get Repository Driver
     *
     * @param  string $driver_type //Repository Driver Type
     *
     * @return GRN_Authentication_Repository_DriverBase
     */
    function getRepositoryDriver($driver_type)
    {
        //Get Repository Loader
        $repository_loader = new GRN_Authentication_Repository_Loader();

        //Get Repository Driver
        $repository_driver = $repository_loader->getDriver($driver_type);

        //Return Repository Driver
        return $repository_driver;
    }

    /**
     * Get Repository Driver List
     *
     * @return GRN_Authentication_Repository_DriverBase[]|null
     */
    function getRepositoryDriverList()
    {
        //Get Repository Loader
        $repository_loader = new GRN_Authentication_Repository_Loader();

        //Get Repository Driver List
        $repository_driver_list = $repository_loader->getDriverList();

        //Return Repository Driver List
        return $repository_driver_list;
    }

    /*** Common Functions ***/

    /**
     * Set Creator
     *
     * @access private
     *
     * @param CB_PersistentBase $object
     *
     * @return bool
     */
    function _setCreator($object)
    {
        /** Check Argument **/
        if ( ! $object) {
            return false;
        }

        /** Get Login User **/
        global $G_container_base;
        /** @var GRN_Uum $grn_uum */
        $grn_uum = $G_container_base->getInstance('uum');
        $login_user = $grn_uum->getLoginUser();

        /** Get Create Time **/
        $ctime = new CB_TimeStamp();
        $ctime->unix_ts = time();

        /** Set Create Infomation **/
        if ($login_user) {
            $login_user_name = $login_user->get(GRN_AUTH_PROPERTY_DISPLAY_NAME);
            $login_user_foreign_key
                = $login_user->get(GRN_AUTH_PROPERTY_FOREIGN_KEY);
            $object->set(GRN_AUTH_PROPERTY_CREATOR,
                $login_user);               //Creator
            $object->set(GRN_AUTH_PROPERTY_MODIFIER,
                $login_user);              //Modifier
            $object->set(GRN_AUTH_PROPERTY_CREATOR_NAME,
                $login_user_name);     //Creator Name
            $object->set(GRN_AUTH_PROPERTY_MODIFIER_NAME,
                $login_user_name);    //Modifier Name
            $object->set(GRN_AUTH_PROPERTY_CREATOR_FOREIGN_KEY,
                $login_user_foreign_key);     //Creator Name
            $object->set(GRN_AUTH_PROPERTY_MODIFIER_FOREIGN_KEY,
                $login_user_foreign_key);    //Modifier Name
        }
        $object->set(GRN_AUTH_PROPERTY_CTIME, $ctime);  //Create Time
        $object->set(GRN_AUTH_PROPERTY_MTIME, $ctime);  //Modify Time

        return true;
    }

    /**
     * Set Modifier
     *
     * @access private
     *
     * @param CB_PersistentBase $object
     *
     * @return bool
     */
    function _setModifier($object)
    {
        /** Check Argument **/
        if ( ! $object) {
            return false;
        }

        /** Get Login User **/
        global $G_container_base;
        /** @var GRN_Uum $grn_uum */
        $grn_uum = $G_container_base->getInstance('uum');
        $login_user = $grn_uum->getLoginUser();

        /** Get Modofy Time **/
        $mtime = new CB_TimeStamp();
        $mtime->unix_ts = time();

        /** Set Modify Infomation **/
        if ($login_user) {
            $login_user_name = $login_user->get(GRN_AUTH_PROPERTY_DISPLAY_NAME);
            $login_user_foreign_key
                = $login_user->get(GRN_AUTH_PROPERTY_FOREIGN_KEY);
            $object->set(GRN_AUTH_PROPERTY_MODIFIER,
                $login_user);              //Modifier
            $object->set(GRN_AUTH_PROPERTY_MODIFIER_NAME,
                $login_user_name);    //Modifier Name
            $object->set(GRN_AUTH_PROPERTY_MODIFIER_FOREIGN_KEY,
                $login_user_foreign_key);    //Modifier Name
        }
        $object->set(GRN_AUTH_PROPERTY_MTIME, $mtime);  //Modify Time

        return true;
    }

    /**
     * getPasswordExpiredInfo
     *
     * @return array        password expired information
     */
    function getPasswordExpiredInfo()
    {
        $session = parent::getSession();

        $result =& $session->get(GRN_AUTH_SESSION_PWD_EXPIRED);

        return $result;

    }

    /**
     * @return GrnAuthenticationMultiRelationDAO
     */
    protected function getGrnAuthenticationMultiRelationDAO()
    {
        return new GrnAuthenticationMultiRelationDAO();
    }

    /**
     * Update repository for the login authentication and return it.
     *
     * @param GRN_Authentication_Repository $current_repository
     * @param bool                          $use_multi_repository Use multi repository or not
     * @param string|null                   $single_repository_id Repository id of the single repository
     * @param array                         $child_repository_ids Child repository ids of the multi repository
     *
     * @return GRN_Authentication_Repository
     */
    public function updateLoginMethodRepository(
        GRN_Authentication_Repository $current_repository,
        $use_multi_repository,
        $single_repository_id,
        array $child_repository_ids = []
    ) {
        if ( ! $use_multi_repository) {
            if ($current_repository->isMultiRepository()) {
                $this->deleteRepositoryMethod($current_repository->getOID());
            }

            $single_repository
                = $this->getRepositoryMethod($single_repository_id);
            if ($single_repository->isMultiRepository()) {
                cb_throw_error(E_GRN_CMMN_AUTH_REPOSITORY_NOT_FOUND);
            }

            return $single_repository;
        } else {
            if ($current_repository->isMultiRepository()) {
                $multi_repository = $current_repository;
            } else {
                $multi_repository = $this->addMultiRepositoryMethod();
            }
            $this->updateMultiRepositoryRelations($multi_repository->getOID(),
                $child_repository_ids);

            return $multi_repository;
        }
    }

    /**
     * @param GRN_Authentication_Repository $repository_method
     *
     * @return GRN_Authentication_Repository_DriverBase
     */
    private function loadRepositoryDriver(
        GRN_Authentication_Repository $repository_method
    ) {
        $driver_type = $repository_method->get(GRN_AUTH_PROPERTY_DRIVER_TYPE);
        $settings
            = cb_unserialize($repository_method->get(GRN_AUTH_PROPERTY_DRIVER_SETTINGS),
            ["allowed_classes" => false]);

        $loader = new GRN_Authentication_Repository_Loader();

        return $loader->loadDriver($driver_type, $settings);
    }

    /**
     * Get the login method which always exists only one in the system.
     *
     * @param string $driver_type
     *
     * @return GRN_Authentication_Login_Authenticate|null
     */
    public function getSingleLoginMethod($driver_type)
    {
        $login_method_list = $this->getLoginMethodList();
        if ( ! $login_method_list) {
            $login_method_list = [];
        }

        foreach ($login_method_list as $login_method) {
            if ($driver_type
                === $login_method->get(GRN_AUTH_PROPERTY_DRIVER_TYPE)
            ) {
                return $login_method;
            }
        }

        cb_throw_error(E_GRN_CMMN_AUTH_LOGIN_NOT_FOUND);
    }
}

/** End Service Class **/
