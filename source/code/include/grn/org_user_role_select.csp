<?php

/**
 *  複数組織/ユーザー/ロール選択テンプレート用の初期化コード、およびAPI
 *
 * @version    1.0
 * @package    grn
 * @author     lijia
 *
 *  インクルード元からの引き渡しを想定している変数：
 *  session_name    セッション名（例：'system.user.org_user_assign', 'system.user.role_user_vest'）
 *  ous_params      N件ナビゲーション引き渡し用CGIパラメータ
 *  G_INPUT['reset']初期化の可否
 *
 *  本コード実行後に設定されるSmarty変数：
 *  poid            組織ID
 *  org             組織情報
 *  is_root         （ルート）かどうか
 *  is_nogroups     未所属ユーザーかどうか
 *  is_search       検索結果かどうか
 *  user_list       ユーザー一覧
 *  navi_info       N件ナビゲーション情報
 *  selected_list   選択されたユーザーの一覧
 */
if ( ! isset($app_id)) {
    $page = cb_get_pagename();
    $parts = explode('/', $page);

    require_once('grn/application.csp');
    $app_locator = GRN_ApplicationLocator::instance();
    $array_app
        = \grn\grn\access\utility\AppAvailabilityUtil::getActiveAppIds();

    $app_id = array_search($parts[0], $array_app) ? $parts[0] : null;
}
$target = @ $G_INPUT['menu'];
$org_id = @ $G_INPUT['poid'];

//-- prepare uum
global $G_container_base;
$uum = $G_container_base->getInstance('uum');

require_once('grn/org_util.csp');
require_once('grn/org_util_search.csp');

//get user page list num
require_once('grn/ui.csp');
$ucm = GRN_UIConfigManager::getInstance();
$login = $uum->getLoginUser();
$uc = $ucm->getUserConfig($login);
$number_on_page = $uc->getListMax();

//--group information structure
$is_target_role = false;
if ($can_select_role && $target == 'role') {
    //(for target 'role')
    $is_target_role = true;

    $role_list = [];
    //GTM-2226
    $is_role_search = array_key_exists('role_search_text', $G_INPUT);
    if ($is_role_search) {
        $role_search_text = $G_INPUT['role_search_text'];
        $t->assign('role_search_text', $role_search_text);
    }
    if ($is_role_search && $role_search_text != "") {
        $role_list =& grn_search_role_list($role_search_text);
    } else {
        $role_list =& grn_get_user_or_role_list($target, $ous_params,
            $number_on_page);
    }

    $number_on_page = count($role_list['dynamic_role_list'])
                      + count($role_list['static_role_list']);
    $navigation_info = [
        'navi' => [
            'number_on_page'               => $number_on_page,
            'previous_page_start_position' => -1,
            'next_page_start_position'     => -1,
        ],
    ];
} else {
    //-- initialize organization tree view
    require_once('grn/org_tree.csp');

    $page_name = cb_get_pagename();

    $util = GRN_OrgTreeUtil::getInstance();
    $tree = $util->getTree($page_name);
    if (is_null($org_id)) {
        $org_id = $tree->getSelectedNode();

        if (array_key_exists('top', $G_INPUT) || is_null($tree->getRoot())
            || is_null($org_id)
        ) {
            $user_list = [];
        } else {
            $navi_params = $ous_params;
            $navi_params['poid'] = $org_id;
            if ($app_id == null) {
                $navigation_info = grn_get_user_list_info($org_id, $navi_params,
                    $number_on_page);

                //--user list
                $user_list = grn_get_user_list($org_id, $navigation_info,
                    $app_id);
            } else {
                if ($app_id == 'portal') {
                    $user_list_message = grn_get_group_by_application($org_id,
                        'message', $navi_params, $number_on_page,
                        $navigation_info);
                    $user_list_mail = grn_get_group_by_application($org_id,
                        'mail', $navi_params, $number_on_page,
                        $navigation_info);
                    $user_list = $user_list_message + $user_list_mail;
                } else {
                    $user_list = grn_get_group_by_application($org_id, $app_id,
                        $navi_params, $number_on_page, $navigation_info);
                }
            }
        }
    }

    if (array_key_exists('top', $G_INPUT) || is_null($tree->getRoot())) {
        $tree->initialize();
        $org_id = null;
    }

    $tree->setSelectedNode($org_id);
    $util->setTree($page_name, $tree);
    $tree_org = $tree->getRoot();
    $t->assign('tree_org', $tree_org);
    $t->assign('page_name', $page_name);
    //--

    if (0 > $org_id) {
        $org_row = null;

        $org['oid'] = -1;
        $org['name'] = cb_msg('grn.system', 'nogroup_users');
        $org['foreign_key'] = null;
        $org['description'] = null;
        $org['children'] = [];
        $org['child_count'] = 0;
    } else {
        $org_row = grn_get_org_row($org_id);
        $org =& grn_get_org_info($org_row, false, true);

        //--child groups
        $org['children'] =& grn_get_org_children($org_id, true);
        $org['child_count'] = count($org['children']);
    }

    //--ancestors group list
    $org['ancestors'] =& grn_get_org_ancestors($org_row);

    $is_search = array_key_exists('search_text', $G_INPUT);
    if ($is_search) {
        //search

        //--N-navigation
        $search_text = $G_INPUT['search_text'];

        $condition = grn_get_user_info_search_condition($org_id,
            $search_text, $search_login_name);
        $navi_params = $ous_params;
        $navi_params['poid'] = $org_id;
        $navi_params['search_text'] = $search_text;

        if ($app_id == null) {
            $count = grn_get_user_info_search_count($org_id, $condition);


            $navigation_info = grn_get_user_navigation_info($count,
                $navi_params, $number_on_page);

            //user list
            $user_list =& grn_search_user_info($org_id, $condition,
                $navigation_info, false, $app_id);
        } else {
            if ($app_id == 'portal') {
                $user_list_message
                    =& grn_search_user_info_by_application($org_id,
                    $condition, $navigation_info, false, $navi_params,
                    $number_on_page, 'message');
                $user_list_mail =& grn_search_user_info_by_application($org_id,
                    $condition, $navigation_info, false, $navi_params,
                    $number_on_page, 'mail');
                $user_list = $user_list_message + $user_list_mail;
            } else {
                $user_list =& grn_search_user_info_by_application($org_id,
                    $condition, $navigation_info, false, $navi_params,
                    $number_on_page, $app_id);
            }
        }

        $t->assign('search_text', $search_text);
    } elseif ($org_id) {
        //list

        //--N-navigation
        $navi_params = $ous_params;
        $navi_params['poid'] = $org_id;
        if ($app_id == null) {
            $navigation_info = grn_get_user_list_info($org_id, $navi_params,
                $number_on_page);

            //--user list
            $user_list = grn_get_user_list($org_id, $navigation_info, $app_id);
        } else {
            if ($app_id == 'portal') {
                $user_list_message = grn_get_group_by_application($org_id,
                    'message', $navi_params, $number_on_page, $navigation_info);
                $user_list_mail = grn_get_group_by_application($org_id,
                    'mail', $navi_params, $number_on_page, $navigation_info);
                $user_list = $user_list_message + $user_list_mail;
            } else {
                $user_list = grn_get_group_by_application($org_id, $app_id,
                    $navi_params, $number_on_page, $navigation_info);
            }
        }
    } else {
        $navigation_info = [
            'navi' => [
                'number_on_page'               => $number_on_page,
                'previous_page_start_position' => -1,
                'next_page_start_position'     => -1,
            ],
        ];
    }
}

//-- setup the list of selected groups
require_once('fw/session_manager.csp');
$session_manager = CB_SessionManager::getInstance();
$session = $session_manager->getSession($session_name);
$target_ids = $session->get('target_ids');
if ( ! is_array($target_ids)) {
    $target_ids = [];
}

//--reset selected user list
if (@ $G_INPUT['reset']) {
    $target_ids = [];
} //--added user list
elseif (@ $G_INPUT['add']) {
    $aids = @ $G_INPUT['aid'];
    if (is_array($aids) && count($aids)) {
        foreach ($aids as $aid) {
            $target_ids[$aid] = 1;
        }
        $t->assign('add', true);
    }
} //--removed user list
elseif (@ $G_INPUT['remove']) {
    $rids = @ $G_INPUT['rid'];
    if (is_array($rids) && count($rids)) {
        foreach ($rids as $rid) {
            unset($target_ids[$rid]);
        }
    }
}

//--set selected organization list to session
$session->set('target_ids', $target_ids);

// create $users_info to show users' names in proper format. 
$users_info = [];
foreach (array_keys($target_ids) as $id) {
    $id_pair = explode(":", $id);
    if (count($id_pair) != 2) {
        continue;
    }
    if ($id_pair[0] == 'user' && is_numeric($id_pair[1]) && $id_pair[1] > 0) {
        $users_info[] = $id_pair[1];
    }
}
require_once("grn/controller.csp");
$users_info = GRN_ControllerUtil::getUserInfoToShowUserName($users_info,
    $login);

//--construct selected user list
$selected_list = [];
foreach (array_keys($target_ids) as $id) {
    $id_pair = explode(':', $id);
    if (count($id_pair) != 2) {
        continue;
    }

    $target_id = $id_pair[1];
    switch ($id_pair[0]) {
        case 'user':
            if (is_numeric($target_id) && $target_id > 0) {
                $user =& $uum->getUser($target_id);
                if ($user) {
                    $selected_list[$id] = [
                        'id'           => "user:{$target_id}",
                        'type'         => 'user',
                        'uid'          => $target_id,
                        'display_name' => GRN_ControllerUtil::getUserNameText($login->getOID(),
                            $target_id, $users_info),
                        'foreign_key'  => $user->get('foreign_key'),
                    ];
                }
            }
            break;

        case 'group':
            if (is_numeric($target_id) && $target_id > 0) {
                $group = $uum->getGroup($target_id);
                if ($group) {
                    $selected_list[$id] = [
                        'id'           => "group:{$target_id}",
                        'type'         => 'group',
                        'gid'          => $target_id,
                        'display_name' => $group->get('name'),
                        'foreign_key'  => $group->get('foreign_key'),
                    ];
                    continue;
                }
            }
            break;

        case 'dynamic_role':
            require_once('grn/uum_util.csp');
            $uum_util = GRN_UumUtil::getInstance();
            $dynamic_roles = array_keys($uum_util->listDynamicRoles());
            if (in_array(strtolower($target_id),
                array_map('strtolower', $dynamic_roles))
            ) {
                $selected_list[$id] = [
                    'id'          => "dynamic_role:{$target_id}",
                    'type'        => 'dynamic_role',
                    'foreign_key' => $target_id,
                ];
            }
            break;
        case 'static_role':
            if (is_numeric($target_id) && $target_id > 0) {
                $static_role = &$uum->getStaticRole($target_id);
                if ($static_role) {
                    $selected_list[$id] = [
                        'id'          => "static_role:{$target_id}",
                        'type'        => 'static_role',
                        'foreign_key' => $static_role->get('foreign_key'),
                    ];
                }
            }
            break;
        case 'applicant':
            $selected_list[$id] = [
                'id'          => '',
                'type'        => 'applicant',
                'foreign_key' => '',
            ];
            break;
    }
}

//-- set variables for view
$t->assign('target', $target);
$t->assign('poid', $org_id);
if ($is_target_role) {
    if (isset($w_applicant_self)) {
        $t->assign('self', $w_applicant_self == '1');
    }
    //GTM-2226
    $t->assign('is_role_search', $is_role_search);
    $t->assign('role_list', $role_list);
} else {
    $t->assign('org', $org);
    $t->assign('is_root', ! $org_id);
    $t->assign('is_nogroups', $org_id == '-1');
    if (isset($no_need_groups)) {
        $t->assign('no_needgroups', $no_need_groups == '1');
    }
    if (isset($no_need_users)) {
        $t->assign('no_needusers', $no_need_users == '1');
    }
    $t->assign('is_search', $is_search);
    $t->assign('user_list', @$user_list);
}
$t->assign('navi_info', @ $navigation_info);
$t->assign('selected_list', $selected_list);

