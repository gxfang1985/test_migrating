<?php
/*
 *  ユーザー削除専用 ログ出力クラス
 */

require_once('grn/cli.csp');

class GRN_DeleteUserLogger
{
    var $_logfile = null;

    /**
     * @return GRN_DeleteUserLogger
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_DeleteUserLogger();
        }

        return $_instance;
    }

    /*
     *  コンストラクタ
     *  ログファイルをオープンし、ロックをかける
     */
    function __construct()
    {
        if (array_key_exists('REQUEST_METHOD', $_SERVER)) {
            return;
        }

        $filepath = cb_basedir() . DIRECTORY_SEPARATOR . 'delete_user.log';
        if (defined('ON_FOREST')) {
            global $G_config_common;
            $dir = $G_config_common->get("TextLog", "dir");
            if ( ! $dir || empty($dir)) {
                $dir = cb_basedir();
            }
            $dirs = [$dir, "logs"];
            $domain = \CB_CyDECUtil::getInstance()->getDomainID();
            $dirs[] = $domain;
            $log_dir = implode($dirs, DIRECTORY_SEPARATOR);
            cb_mkdir($log_dir, 0777, true, true);
            $filepath = $log_dir . DIRECTORY_SEPARATOR . 'delete_user.log';
        }

        $this->_logfile = fopen($filepath, 'a');
        if ( ! $this->_logfile) {
            require_once('fw/error_code.csp');
            cb_throw_error(E_COMMON_FOPEN_WRITE, null, ['file' => $filepath]);
        }

        $ret = flock($this->_logfile, LOCK_EX | LOCK_NB, $block);

        // windowsではブロックされても、$blockはFALSEで、flockの返り値がfalseとなる
        if ($block == true || $ret == false) {
            fclose($this->_logfile);
            require_once('grn/error_code.csp');
            cb_throw_error(E_GRN_SCRIPT_ALREADY_RUNNING);
        }

        global $_cb_cli_log_file;
        $_cb_cli_log_file = $this->_logfile;
    }

    /*
     * エラーメッセージを生成する
     *  @param     string    $error_code    削除結果を示すステータス
     *  @param     string    $login_name    削除対象のユーザー名
     *  @return    string                   生成されたエラーメッセージ
     */
    function getErrMsg($error_code, $login_name)
    {
        require_once('grn/uum.csp');

        if ($error_code === GRN_UUM_DELETE_SUCCESS) {
            $message = "Deleted user \"$login_name\"";
        } else {
            switch ($error_code) {
                case E_GRN_USER_NOT_FOUND:
                    $message = "'$login_name' not found.";
                    break;
                case E_GRN_DONT_DELETE_ADMINISTRATOR:
                    $message = "Cannot delete Administrator.";
                    break;
                case GRN_UUM_USER_NOT_DELETED:
                    $message = "'$login_name' not deleted.";
                    break;
                case GRN_UUM_INVALID_PARAMETER:
                    $message = "Passed invalid parameters.";
                    break;
                case GRN_UUM_INVALID_DELETE_SCHEDULE:
                    $message = "Invalid scheduling setting.";
                    break;
                default:
                    $message = "An unexpected error occurred.";
            }
        }

        return $message;
    }

    /*
     *  削除結果をログファイルに出力する
     *  @param     int       $error_code    削除結果を示すステータス
     *  @param     string    $login_name    削除対象のユーザー名
     *  @return    bool                     書き込みが成功したか
     */
    function log($msg)
    {
        // PHP command line mode detection
        if (array_key_exists('REQUEST_METHOD', $_SERVER)) {
            return;
        }

        cb_cli_log($msg);
    }


    /*
     *  ログファイルに最終行を出力し、ロックを開放する
     *  @param     int $deleted    削除に成功したユーザー数
     *  @return                    なし
     */
    function release()
    {
        flock($this->_logfile, LOCK_UN);
    }
}

?>

