<?php

namespace grn\favour\screen\mobile;

use grn\favour\data\bean\Favour;
use grn\favour\data\bean\FavourNotify;
use grn\favour\exception\FavourErrorCode;
use grn\favour\exception\FavourException;
use grn\favour\service\FavourService;
use grn\grn\access\service\AppAccess;
use grn\space\common\exception\GrnInvalidPermissionException;

require_once('grn/error_code.csp');

class FavourScreen extends MobileFavourScreenBase
{
    public function post($input)
    {
        $input = $this->getInput();
        $params = [
            self::ARG_MODULE,
            self::ARG_SUB_MODULE,
            self::ARG_TYPE,
            self::ARG_VALUE
        ];
        $this->checkArgs($input, $params);

        if (strcasecmp($this->getModuleId(), 'grn.space') == 0) {
            AppAccess::checkAccess(\GrnSpaceApplication::GRN_SPACE_APPLICATION_ID);
        }

        try {
            $notify_data = $this->getNotifyDataWithAuthority($input);
        } catch (GrnInvalidPermissionException $e) {
            throw new FavourException($e->getErrorCode());
        }

        $service = new FavourService();
        $favour = $service->getFavour($this->getLoginUserId(),
            $this->getModuleId(), $this->getType(), $this->getTypeValue(),
            $this->getSubModuleId());
        if ($favour->getId()) {
            $service->cancelFavour($favour);
            //delete notify
            $favour_notify = $service->getFavourNotify($this->getLoginUserId(),
                $notify_data->getUser(), $this->getModuleId(), $this->getType(),
                $this->getTypeValue(), $this->getSubModuleId());
            if ($favour_notify->getId()) {
                $service->deleteFavourNotify($favour_notify);
            }
        } else {
            $favour = new Favour();
            $favour->setModuleId($this->getModuleId());
            $favour->setSubModuleId($this->getSubModuleId());
            $favour->setType($this->getType());
            $favour->setValue($this->getTypeValue());
            $favour->setFavourerId($this->getLoginUserId());
            $favour->setFavourerName($this->getLoginUserName());
            $service->addFavour($favour);
            //notify
            if ($this->checkNotifyUserAuthority($input)
                && $notify_data->getUser()
            ) {
                $favour_notify_apps
                    = $service->getFavourNotifyApplicationList();
                $app_id = mb_substr($this->getModuleId(), 4);
                if (array_key_exists($app_id, $favour_notify_apps)
                    && $notify_data->getUser() != $this->getLoginUserId()
                ) {
                    $notify_data->setFavourerId($this->getLoginUserId());
                    $notify_data->setFavourerName($this->getLoginUserName());
                    $notify_data->setModuleId($this->getModuleId());
                    $notify_data->setSubModuleId($this->getSubModuleId());
                    $notify_data->setType($this->getType());
                    $notify_data->setValue($this->getTypeValue());
                    $service->sendFavourNotify($notify_data);
                }
            }
        }
        $this->setCount($service->getFavourerCount($this->getModuleId(),
            $this->getType(), $this->getTypeValue(), $this->getSubModuleId()));
    }

    public function fetchFavourWord()
    {
        $service = new FavourService();
        $favour = $service->getFavour($this->getLoginUserId(),
            $this->getModuleId(), $this->getType(), $this->getTypeValue(),
            $this->getSubModuleId());

        require_once('grn/smarty.csp');
        $smarty = new \GRN_Smarty();
        $smarty->assign('is_favoured', $favour->getId());

        return $smarty->fetch('favour/favour_word.tpl');
    }

    public function fetchFavourCount()
    {
        require_once('grn/smarty.csp');
        $smarty = new \GRN_Smarty();
        $smarty->assign('favour_count', $this->getCount());

        return $smarty->fetch('favour/favour_count.tpl');
    }
}
