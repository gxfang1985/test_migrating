<?php

namespace grn\favour\screen\mobile;

use grn\favour\service\FavourService;
use grn\favour\exception\FavourException;
use grn\grn\access\service\AppAccess;
use grn\grn\Validate;
use grn\grn\mobile\MobileDisplayUserList;
use grn\space\common\exception\GrnInvalidPermissionException;

require_once('space/GrnSpaceApplication.csp');
require_once('message/application.csp');
require_once('bulletin/application.csp');

class FavourUserList extends MobileFavourScreenBase
{
    const CREATE_TIME = 'createTime';

    private $_is_from_ajax;
    private $_is_from_ajax_popup;


    public function __construct($input)
    {
        parent::__construct($input);

        $params = [
            self::ARG_MODULE,
            self::ARG_SUB_MODULE,
            self::ARG_TYPE,
            self::ARG_VALUE
        ];
        $this->checkArgs($input, $params);

        $app_id = explode('.', $this->getModuleId());
        if (count($app_id) == 2) {
            AppAccess::checkAccess($app_id[1]);
            $this->setMobileApplicationId($app_id[1]);
        }

        $this->setMobileFooterBar();
    }

    public function fetch()
    {
        $input = $this->getInput();
        $limit = self::MORE_VIEW_COUNT;

        try {
            $auth = $this->checkLoginUserAuthority($input);
        } catch (GrnInvalidPermissionException $e) {
            throw new FavourException($e->getErrorCode());
        }
        if ( ! $auth) {
            throw new FavourException();
        }

        $offset = $this->getArrayValue(self::ARG_NAVI_TAG, $input);
        if ( ! Validate::isNumber($offset)) {
            $offset = 0;
        }

        $favour_service = new FavourService();
        $favour_collection
            = $favour_service->getFavourCollection($this->getModuleId(),
            $this->getType(), $this->getTypeValue(), $this->getSubModuleId(),
            $limit + $offset);

        require_once('fw/date.csp');
        $create_times = [];
        $users_id = [];
        foreach ($favour_collection as $eachFavour) {
            $favourerId = $eachFavour->getFavourerId();
            $users_id[] = $favourerId;
            $timestamp = $eachFavour->getTimestamp();
            if ($timestamp) {
                $create_times[$favourerId]
                    = cb_timestamp_to_datetime($timestamp);
            } else {
                $create_times[$favourerId] = null;
            }
        }

        $displayInfo = MobileDisplayUserList::constructUserList($users_id);
        foreach ($users_id as $id) {
            if (array_key_exists($id, $displayInfo)
                && array_key_exists($id, $create_times)
            ) {
                $displayInfo[$id][self::CREATE_TIME] = $create_times[$id];
            }
        }

        $this->setNewOffset($offset, $limit,
            $favour_collection->getCountNoLimit());

        require_once('grn/smarty.csp');
        $t = new \GRN_Smarty();
        $t->assign('count', $favour_collection->getCountNoLimit());
        $t->assign(MobileDisplayUserList::USER_INFO_LIST, $displayInfo);

        //set Breadcrumb
        $upper_page_name = '';
        $upper_page_url = '';
        $upper_page_params = [];
        if ($this->getModuleId() == \GrnSpaceApplication::GRN_SPACE_MODULE_ID) {
            switch ($this->getType()) {
                case \GrnSpaceApplication::FAVOUR_DISCUSSION_BODY:
                    $upper_page_name = cb_msg('grn.mobile', 'body');
                    $upper_page_url
                        = 'space/mobile/application/discussion/body';
                    $upper_page_params = [
                        'spid' => cb_at($input, 'spid'),
                        'tid'  => $this->getTypeValue()
                    ];
                    break;
                case \GrnSpaceApplication::FAVOUR_DISCUSSION_COMMENT:
                    $upper_page_name = cb_msg('grn.mobile',
                        'comment_detail_title');
                    $upper_page_url
                        = 'space/mobile/application/discussion/comment_detail';
                    $upper_page_params = [
                        'spid' => cb_at($input, 'spid'),
                        'tid'  => cb_at($input, 'tid'),
                        'cmid' => $this->getTypeValue()
                    ];
                    break;
                case \GrnSpaceApplication::FAVOUR_TODO_BODY:
                    $upper_page_name = cb_msg('grn.mobile', 'detail_title');
                    $upper_page_url = 'space/mobile/application/todo/detail';
                    $upper_page_params = [
                        'spid' => cb_at($input, 'spid'),
                        'tdid' => $this->getTypeValue()
                    ];
                    break;
                case \GrnSpaceApplication::FAVOUR_TODO_COMMENT:
                    $upper_page_name = cb_msg('grn.mobile',
                        'comment_detail_title');
                    $upper_page_url
                        = 'space/mobile/application/todo/comment_detail';
                    $upper_page_params = [
                        'spid' => cb_at($input, 'spid'),
                        'tdid' => cb_at($input, 'tdid'),
                        'cmid' => $this->getTypeValue()
                    ];
                    break;
            }
        }

        $this->assignBreadcrumbCurrentPage($t, $this->getTitle());
        $this->assignBreadcrumbUpperPage($t, $upper_page_name, $upper_page_url,
            $upper_page_params);

        if ($this->_is_from_ajax) {
            return $t->fetch('grn/mobile_userinfo_list.tpl');
        } elseif ($this->getIsFromAjaxPopup()) {
            $t->assign('offset', $this->getNewOffset());
            $t->assign('more_view_args', $input);

            return $t->fetch('favour/mobile/favour_list_popup.tpl');
        } else {
            $t->assign('offset', $this->getNewOffset());
            $t->assign('more_view_args', $input);

            return $t->fetch('favour/mobile/favour_user_index.tpl');
        }
    }

    public function setIsFromAjax($is_from_ajax)
    {
        $this->_is_from_ajax = $is_from_ajax;
    }

    public function getIsFromAjax()
    {
        return $this->_is_from_ajax;
    }

    /**
     * @param $is_from_ajax_popup
     */
    public function setIsFromAjaxPopup($is_from_ajax_popup)
    {
        $this->_is_from_ajax_popup = $is_from_ajax_popup;
    }

    /**
     * @return mixed
     */
    public function getIsFromAjaxPopup()
    {
        return $this->_is_from_ajax_popup;
    }

    public function getTitle()
    {
        return grn_get_page_display_name('favour/user_view');
    }
}
