<?php

namespace grn\favour\screen;

use grn\favour\data\bean\FavourNotify;
use grn\favour\exception\FavourErrorCode;
use grn\favour\exception\FavourException;
use grn\favour\Application;
use grn\grn\access\service\AppAccess;
use grn\grn\GrnGenericScreenBase;
use grn\grn\Validate;
use grn\space\common\exception\GrnInvalidPermissionException;

class FavourScreenBase extends GrnGenericScreenBase
{
    const ARG_MODULE = 'module';
    const ARG_SUB_MODULE = 'sub_module';
    const ARG_TYPE = 'type';
    const ARG_VALUE = 'value';

    private $_module_id;
    private $_sub_module_id = '';
    private $_type;
    private $_value;
    private $_count;

    private $_app_infos = [];

    protected function setModuleId($value)
    {
        $this->_module_id = $value;
    }

    public function getModuleId()
    {
        return $this->_module_id;
    }

    protected function setSubModuleId($value)
    {
        $this->_sub_module_id = $value;
    }

    public function getSubModuleId()
    {
        return $this->_sub_module_id;
    }

    protected function setType($value)
    {
        $this->_type = $value;
    }

    public function getType()
    {
        return $this->_type;
    }

    protected function setTypeValue($value)
    {
        $this->_value = $value;
    }

    public function getTypeValue()
    {
        return $this->_value;
    }

    protected function setCount($value)
    {
        $this->_count = $value;
    }

    public function getCount()
    {
        return $this->_count;
    }

    public function checkArgs($input, $params)
    {
        foreach ($params as $param) {
            switch ($param) {
                case self::ARG_MODULE :
                    if ( ! Validate::isIn(@$input[self::ARG_MODULE],
                        $this->getModules())
                    ) {
                        throw new FavourException(FavourErrorCode::GRN_FAVOUR_WRONG_APPLICATION,
                            FavourException::getArrayForErrMsg(),
                            FavourException::getArrayForErrMsg());
                    }
                    $this->setModuleId($input[self::ARG_MODULE]);
                    break;
                case self::ARG_SUB_MODULE :
                    if ( ! Validate::isIn(@$input[self::ARG_SUB_MODULE],
                        $this->getSubModules(@$input[self::ARG_MODULE]))
                    ) {
                        throw new FavourException(FavourErrorCode::GRN_FAVOUR_WRONG_APPLICATION,
                            FavourException::getArrayForErrMsg(),
                            FavourException::getArrayForErrMsg());
                    }
                    if (Validate::isNull(@$input[self::ARG_SUB_MODULE])) {
                        $this->setSubModuleId('');
                    } else {
                        $this->setSubModuleId($input[self::ARG_SUB_MODULE]);
                    }
                    break;
                case self::ARG_TYPE :
                    if ( ! Validate::isIn(@$input[self::ARG_TYPE],
                        $this->getTypes(@$input[self::ARG_MODULE]))
                    ) {
                        throw new FavourException(FavourErrorCode::GRN_FAVOUR_WRONG_APPLICATION,
                            FavourException::getArrayForErrMsg(),
                            FavourException::getArrayForErrMsg());
                    }
                    $this->setType($input[self::ARG_TYPE]);
                    break;
                case self::ARG_VALUE :
                    if (Validate::isNull(@$input[self::ARG_VALUE])) {
                        throw new FavourException(FavourErrorCode::GRN_FAVOUR_WRONG_APPLICATION,
                            FavourException::getArrayForErrMsg(),
                            FavourException::getArrayForErrMsg());
                    }
                    $this->setTypeValue($input[self::ARG_VALUE]);
                    break;
            }
        }
    }

    public function checkLoginUserAuthority(array $params = [])
    {
        $loginId = cb_get_login_user()->getOID();
        if ($app = $this->getApp()) {
            /** @var $app \grn\favour\FavourApplicationBaseInterface */
            try {
                $app->checkLoginUserAuthorityForFavour($loginId,
                    $this->getType(), $this->getTypeValue(), $params,
                    $this->getSubModuleId());
            } catch (GrnInvalidPermissionException $exception) {
                throw $exception;
            }

            return true;
        }

        return false;
    }

    /**
     * Check the authority and get notification data for favour.
     *
     * @param  array $params
     *
     * @throws \grn\space\common\exception\GrnInvalidPermissionException
     * @return \grn\favour\data\bean\FavourNotify
     */
    public function getNotifyDataWithAuthority(array $params = [])
    {
        $loginId = cb_get_login_user()->getOID();
        if ($app = $this->getApp()) {
            if ($this->checkLoginUserAuthority($params)) {
                return $app->getNotifyDataForFavour($loginId, $this->getType(),
                    $this->getTypeValue(), $params, $this->getSubModuleId());
            } else {
                return new FavourNotify();
            }
        }

        return new FavourNotify();
    }

    /**
     * @param array $params
     *
     * @return bool
     */
    public function checkNotifyUserAuthority(array $params = [])
    {
        $loginId = cb_get_login_user()->getOID();
        if ($app = $this->getApp()) {
            return $app->checkNotifyUserAuthorityForFavour($loginId,
                $this->getType(), $this->getTypeValue(), $params,
                $this->getSubModuleId());
        }

        return false;
    }

    /**
     * @return \GRN_ApplicationBase|bool
     */
    private function getApp()
    {
        $app_list = Application::getApplicationList(false);
        $id_array = explode('.', $this->getModuleId());
        if ( ! is_array($id_array) || strcasecmp($id_array[0], 'grn') !== 0
             || count($id_array) <= 1
        ) {
            return false;
        }
        $app_id = $id_array[1];

        return (array_key_exists($app_id, $app_list)) ? $app_list[$app_id]
            : false;
    }

    private function getApplicationInfo()
    {
        if (count($this->_app_infos) == 0) {
            $app_list = Application::getApplicationList(false);
            /** @var $app \GRN_ApplicationBase */
            foreach ($app_list as $app) {
                $app_info[self::ARG_MODULE] = $app->getModuleId();
                if (method_exists($app, 'getSubModuleId')) {
                    $app_info[self::ARG_SUB_MODULE] = $app->getSubModuleId();
                } else {
                    $app_info[self::ARG_SUB_MODULE] = [];
                }
                $app_info[self::ARG_TYPE] = $app->getFavourType();
                $this->_app_infos[$app->getModuleId()] = $app_info;
            }
        }

        return $this->_app_infos;
    }

    protected function getModules()
    {
        $modules = [];
        $app_infos = $this->getApplicationInfo();
        foreach ($app_infos as $app_info) {
            $modules[] = $app_info[self::ARG_MODULE];
        }

        return $modules;
    }

    protected function getSubModules($module)
    {
        $app_infos = $this->getApplicationInfo();
        if (array_key_exists($module, $app_infos)) {
            return $app_infos[$module][self::ARG_SUB_MODULE];
        }

        return [];
    }

    protected function getTypes($module)
    {
        $app_infos = $this->getApplicationInfo();
        if (array_key_exists($module, $app_infos)) {
            return $app_infos[$module][self::ARG_TYPE];
        }

        return [];
    }

    protected function getLoginUserName()
    {
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $use_info = $uum->getLoginUserInfo();

        return $use_info['col_display_name'];
    }

    protected function checkInternalAccess()
    {
        $app_id = explode('.', strtolower($this->getModuleId()));
        if (count($app_id) == 2) {
            AppAccess::checkAccess($app_id[1]);
        }
    }
}
