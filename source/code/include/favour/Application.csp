<?php

namespace grn\favour;

use grn\grn\access\service\AppAccess;

require_once('grn/application.csp');

class Application extends \GRN_ApplicationBase
{
    const APPLICATION_ID = 'favour';
    const GRN_FAVOUR_MODULE_ID = 'grn.favour';

    static private $_app_list = [];
    static private $_notify_app_list = [];

    public function __construct()
    {
        parent::__construct(self::APPLICATION_ID);
    }

    /**
     * 「いいね」対応アプリケーション一覧の取得
     *
     * @param   boolean $available_only ログインユーザーが利用可能かどうかもチェックするか
     *
     * @return  mixed    「いいね」対応アプリのリスト
     */
    static public function getApplicationList($available_only)
    {
        $key = ($available_only == true ? 1 : 0);
        if ( ! array_key_exists($key, self::$_app_list)) {
            $app_locator = \GRN_ApplicationLocator::instance();
            self::$_app_list[$key]
                = $app_locator->getInstancesWithMethod('getFavourType',
                $available_only);
        }

        return self::$_app_list[$key];
    }

    /**
     * 「いいね」通知対応アプリケーション一覧の取得
     *
     * @param   boolean $available_only ログインユーザーが利用可能かどうかもチェックするか
     *
     * @return  array    「いいね」通知対応アプリのリスト
     */
    static public function getFavourNotifyApplicationList($available_only)
    {
        $key = ($available_only === true ? 1 : 0);
        if ( ! array_key_exists($key, self::$_notify_app_list)) {
            self::$_notify_app_list[$key] = [];
            $app_list
                = self::getApplicationList($available_only);
            foreach ($app_list as $id => $app) {
                if ( ! method_exists($app, 'getFavourNotifyPageInfo')) {
                    continue;
                }

                if ( ! AppAccess::isAppAvailable($id)) {
                    continue;
                }

                self::$_notify_app_list[$key][$id] = $app;
            }
        }

        return self::$_notify_app_list[$key];
    }

    /**
     * @return array
     */
    function getSystemConfigArray()
    {
        return [
            'favour_config' =>
                [
                    [
                        'page' => 'favour/system/common_set',
                        'icon' => 'general32'
                    ],
                ],
        ];
    }

    /**
     * clean up the data
     */
    public function cleanup()
    {
        /** Delete a notification 30 days has elapsed */
        $db = cb_get_app_db(self::APPLICATION_ID);
        $thirtyDaysAgo = time() - (30 * 24 * 60 * 60);
        $query
            = $db->format("DELETE FROM tab_grn_favour_notify WHERE col_timestamp < '@S'",
            [(string)$thirtyDaysAgo]);
        $db->query($query);
        /** End */
    }
}
