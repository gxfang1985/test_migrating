<?php

namespace grn\favour\service;

use grn\favour\Application;
use grn\favour\data\bean\Favour;
use grn\favour\data\bean\FavourNotify;
use grn\favour\data\collection\FavourCollection;
use grn\favour\data\collection\FavourNotifyCollection;
use grn\favour\exception\FavourErrorCode;
use grn\favour\exception\FavourException;
use grn\favour\logic\FavourLogic;
use grn\favour\logic\FavourNotifyLogic;
use grn\grn\Validate;

class FavourService
{
    const ALLOW_APPLICATIONS_RESPOND = 'allow_applications_respond';
    private $profile;
    static $appsCheckingRespond = ['message', 'bulletin'];
    static $appsIdPrefix = ['message' => 'mssg', 'bulletin' => 'bllt'];

    /**
     * get favour application system profile
     *
     * @return   \CB_Profile
     */
    private function getSystemProfile()
    {
        if (is_null($this->profile)) {
            $application = new Application();
            $this->profile = $application->getSystemProfile();
        }

        return $this->profile;
    }

    /**
     * get specified attribute
     *
     * @param    string $attribute_name attribute name
     * @param           $default_value
     *
     * @return   string specified attribute. if it doesn't exist, return $default_value
     */
    private function getSystemProfileAttribute($attribute_name, $default_value)
    {
        $profile = $this->getSystemProfile();

        if ( ! $profile->getAttribute($attribute_name, $value)) {
            return $default_value;
        }

        return $value;
    }

    /**
     * set specified attribute
     *
     * @param    string $attribute_name
     * @param           $value
     *
     * @return   boolean TRUE: success setting attribute, FALSE: fail
     */
    private function setSystemProfileAttribute($attribute_name, $value)
    {
        $profile = $this->getSystemProfile();

        if ( ! $profile->getAttribute($attribute_name, $dummy)) {
            if ( ! $profile->createAttribute($attribute_name, $value)) {
                return false;
            }
        } else {
            if ( ! $profile->updateAttribute($attribute_name, $value)) {
                return false;
            }
        }

        return true;
    }

    /**
     * @return string | bool
     */
    public function getAllowApplicationsRespond()
    {
        return $this->getSystemProfileAttribute(self::ALLOW_APPLICATIONS_RESPOND,
            false);
    }

    /**
     * @param $permission_value
     *
     * @return bool
     */
    public function setAllowApplicationsRespond($permission_value)
    {
        return $this->setSystemProfileAttribute(self::ALLOW_APPLICATIONS_RESPOND,
            $permission_value);
    }

    /**
     * @param $app
     *
     * @return bool
     */
    public function isAppAllowedRespond($app)
    {
        if ( ! in_array($app, self::$appsCheckingRespond)) {
            return true;
        } else {
            $favour_system_setting
                = $this->getSystemProfileAttribute(self::ALLOW_APPLICATIONS_RESPOND,
                false);
            if ($favour_system_setting === false) {
                return false;
            } else {
                return cb_at($favour_system_setting, $app) === 1;
            }
        }
    }

    public function getFavour(
        $favourer_id,
        $module_id,
        $type,
        $value,
        $sub_module_id = ''
    ) {
        if (Validate::isNull($module_id) || Validate::isNull($type)
            || Validate::isNull($value)
            ||
            ! Validate::isNumber($favourer_id)
        ) {
            throw new FavourException(FavourErrorCode::GRN_FAVOUR_WRONG_APPLICATION,
                FavourException::getArrayForErrMsg(),
                FavourException::getArrayForErrMsg());
        }
        $favourLogic = new FavourLogic();

        return $favourLogic->getFavour($favourer_id, $module_id, $type, $value,
            $sub_module_id);
    }

    public function addFavour(Favour $favour)
    {
        if ($favour->isValidData(Favour::VALID_TYPE_CREATE,
            Favour::EXCEPTION_NOT_THROW)
        ) {
            $favourLogic = new FavourLogic();
            $favourLogic->addFavour($favour);
        }
    }

    public function cancelFavour(Favour $favour)
    {
        if ($favour->isValidData(Favour::VALID_TYPE_SELECT,
            Favour::EXCEPTION_NOT_THROW)
        ) {
            $favourLogic = new FavourLogic();
            $favourLogic->cancelFavour($favour);
        }
    }

    public function deleteMultiFavour(
        $module_id,
        $type,
        array $values,
        $sub_module_id = ''
    ) {
        if (Validate::isNull($module_id) || Validate::isNull($type)) {
            throw new FavourException(FavourErrorCode::GRN_FAVOUR_WRONG_APPLICATION,
                FavourException::getArrayForErrMsg(),
                FavourException::getArrayForErrMsg());
        }
        foreach ($values as $value) {
            if (Validate::isNull($value)) {
                throw new FavourException(FavourErrorCode::GRN_FAVOUR_WRONG_APPLICATION,
                    FavourException::getArrayForErrMsg(),
                    FavourException::getArrayForErrMsg());
            }
        }
        $favourLogic = new FavourLogic();
        $favourLogic->deleteMultiFavour($module_id, $type, $values,
            $sub_module_id);
    }

    /**
     * Get favour collection
     *
     * @param string $module_id
     * @param string $type
     * @param string $value
     * @param string $sub_module_id
     * @param int    $limit
     *
     * @return \grn\favour\data\collection\FavourCollection
     */
    public function getFavourCollection(
        $module_id,
        $type,
        $value,
        $sub_module_id = '',
        $limit = -1
    ) {
        if (Validate::isNull($module_id) || Validate::isNull($type)
            || Validate::isNull($value)
        ) {
            return new FavourCollection();
        }
        $logic = new FavourLogic();

        return $logic->getFavourCollection($module_id, $type, $value,
            $sub_module_id, $limit);
    }

    /**
     * Construct favour information
     *
     * @param string $module_id
     * @param string $type
     * @param string $value
     * @param int    $user_id
     * @param array  $params
     * @param string $sub_module_id
     *
     * @throws \grn\favour\exception\FavourException
     * @return array
     */
    public function constructFavourInfo(
        $module_id,
        $type,
        $value,
        $user_id,
        array $params = [],
        $sub_module_id = ''
    ) {
        if (Validate::isNull($module_id) || Validate::isNull($type)
            || Validate::isNull($value)
        ) {
            throw new FavourException();
        }
        $favour_info = [];
        $favour_logic = new FavourLogic();
        $favour_collection = $favour_logic->getFavourCollection($module_id,
            $type, $value, $sub_module_id);
        $count = $favour_collection->getCountNoLimit();
        if (Validate::isNull($count)) {
            $count = 0;
        }
        $favour_info['count'] = $count;

        $favour_info['is_favoured'] = false;
        /** @var $favour Favour */
        foreach ($favour_collection as $favour) {
            if ($user_id == $favour->getFavourerId()) {
                $favour_info['is_favoured'] = true;
                break;
            }
        }

        $favour_info['module_id'] = $module_id;
        $favour_info['sub_module_id'] = $sub_module_id;
        $favour_info['type'] = $type;
        $favour_info['type_value'] = $value;
        $favour_info['params'] = $params;

        return $favour_info;
    }

    /**
     * Get the count of favourer
     *
     * @param string $module_id
     * @param string $type
     * @param string $value
     * @param string $sub_module_id
     *
     * @return int
     */
    public function getFavourerCount(
        $module_id,
        $type,
        $value,
        $sub_module_id = ''
    ) {
        if (Validate::isNull($module_id) || Validate::isNull($type)
            || Validate::isNull($value)
        ) {
            return 0;
        }
        $favour_logic = new FavourLogic();
        $favour_collection = $favour_logic->getFavourCollection($module_id,
            $type, $value, $sub_module_id, 0);
        $count = $favour_collection->getCountNoLimit();
        if (Validate::isNull($count)) {
            $count = 0;
        }

        return $count;
    }

    /**
     * Get the count of favourers
     *
     * @param int    $user_id
     * @param string $module_id
     * @param string $type
     * @param array  $value
     * @param string $sub_module_id
     *
     * @return array
     */
    public function getFavourersCount(
        $user_id,
        $module_id,
        $type,
        $values,
        $sub_module_id = ''
    ) {
        if (Validate::isNull($module_id) || Validate::isNull($type)
            ||
            ! is_array($values)
            ||
            ! Validate::isNumber($user_id)
        ) {
            return [];
        }
        $favour_logic = new FavourLogic();

        return $favour_logic->getFavourersCount($user_id, $module_id, $type,
            $values, $sub_module_id);
    }

    /**
     * Get the count of favour notification by user id
     *
     * @param int $user_id
     *
     * @return int
     */
    public function getFavourNotifyCountByUserId($user_id)
    {
        if ( ! Validate::isNumber($user_id)) {
            return 0;
        }
        $favour_notify_logic = new FavourNotifyLogic();
        $favour_notify_collection
            = $favour_notify_logic->getFavourNotifyListByUserId($user_id,
            array_keys($this->getFavourNotifyApplicationList()), 0);
        $count
            = $favour_notify_collection->getCountNoLimit();
        if (Validate::isNull($count)) {
            $count = 0;
        }

        return $count;
    }

    /**
     * Get favour notification list by user id
     *
     * @param int   $user_id
     * @param array $app_ids
     * @param int   $limit
     *
     * @return \grn\favour\data\collection\FavourNotifyCollection
     */
    public function getFavourNotifyListByUserId(
        $user_id,
        array $app_ids = [],
        $limit = -1
    ) {
        if ( ! Validate::isNumber($user_id)) {
            return new FavourNotifyCollection();
        }
        $favour_notify_logic = new FavourNotifyLogic();
        $favour_notify_collection
            = $favour_notify_logic->getFavourNotifyListByUserId($user_id,
            $app_ids, $limit);

        return $favour_notify_collection;
    }

    /**
     * Get favour notification list for specific comment or body
     *
     * @param string $user_id
     * @param string $module_id
     * @param string $type
     * @param string $value
     * @param string $sub_module_id
     *
     * @return \grn\favour\data\collection\FavourNotifyCollection
     */
    public function getSpecificFavourNotifyCollection(
        $user_id,
        $module_id,
        $type,
        $value,
        $sub_module_id = ''
    ) {
        if ( ! Validate::isNumber($user_id)
             || Validate::isNull($module_id)
             || Validate::isNull($type)
             || Validate::isNull($value)
        ) {
            return new FavourNotifyCollection();
        }
        $favour_notify_logic = new FavourNotifyLogic();

        return $favour_notify_logic->selectSpecificFavourNotifyCollection($user_id,
            $module_id, $type, $value, $sub_module_id);
    }

    /**
     * Get favour notify application list
     *
     * @return mixed    application_id => application object
     */
    public function getFavourNotifyApplicationList()
    {
        $apps_list = Application::getFavourNotifyApplicationList(false);
        $apps_allowed = [];
        foreach ($apps_list as $app_id => $app) {
            if ($this->isAppAllowedRespond($app_id)) {
                $apps_allowed[$app_id] = $app;
            }
        }

        return $apps_allowed;
    }

    /**
     * add one favour notify
     *
     * @param \grn\favour\data\bean\FavourNotify $favour_notify
     */
    public function sendFavourNotify(FavourNotify $favour_notify)
    {
        $favour_notify_logic = new FavourNotifyLogic();
        if ($favour_notify->isValidData(FavourNotify::VALID_TYPE_CREATE,
            FavourNotify::EXCEPTION_NOT_THROW)
        ) {
            $favour_notify_logic->addFavourNotify($favour_notify);
        }
    }

    /**
     * Get favour notify
     *
     * @param string $favourer_id
     * @param string $user_id
     * @param string $module_id
     * @param string $type
     * @param string $value
     * @param string $sub_module_id
     *
     * @return \grn\favour\data\bean\FavourNotify
     */
    public function getFavourNotify(
        $favourer_id,
        $user_id,
        $module_id,
        $type,
        $value,
        $sub_module_id = ''
    ) {
        if ( ! Validate::isNumber($user_id)
             ||
             ! Validate::isNumber($favourer_id)
             || Validate::isNull($module_id)
             || Validate::isNull($type)
             || Validate::isNull($value)
        ) {
            return new FavourNotify();
        }
        $favour_notify_logic = new FavourNotifyLogic();

        return $favour_notify_logic->selectFavourNotify($favourer_id, $user_id,
            $module_id, $type, $value, $sub_module_id);
    }

    /**
     * Delete favour notify
     *
     * @param \grn\favour\data\bean\FavourNotify $favour_notify
     */
    public function deleteFavourNotify(FavourNotify $favour_notify)
    {
        $favour_notify_logic = new FavourNotifyLogic();
        $favour_notify_logic->deleteFavourNotify($favour_notify);
    }

    /**
     * Is the favour application active
     *
     * @return bool アクティブな場合にTRUE、それ以外でFALSEを返す
     */
    public function isFavourAppActive()
    {
        require_once('grn/application.csp');
        $app_locator = \GRN_ApplicationLocator::instance();

        return $app_locator->isActive(Application::APPLICATION_ID);
    }

    /**
     * Set user's favour notification status as read
     *
     * @param string $user_id
     * @param array  $app_ids
     *
     * @return bool
     */
    public function setFavourNotifyReadByUserId($user_id, array $app_ids = [])
    {
        if ( ! Validate::isNumber($user_id)) {
            return false;
        }

        $favour_notify_logic = new FavourNotifyLogic();
        $favour_notify_logic->setFavourNotifyReadByUserId($user_id, $app_ids);

        return true;
    }
}
