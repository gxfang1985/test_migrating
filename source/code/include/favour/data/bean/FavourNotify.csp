<?php

namespace grn\favour\data\bean;

use grn\grn\Validate;

class FavourNotify extends FavourCommonBean
{
    const ABS = 'col_abstract';
    const DATA = 'col_org_data';
    const READ = 'col_read';
    const USER = 'col_user';

    /**
     * @var string
     * abstract
     */
    private $_abstract;

    /**
     * @var string|array
     * other useful parameter
     */
    private $_org_data;

    /**
     * @var int
     * read status, 0: not read, 1: read
     */
    private $_read;

    /**
     * @var string
     * receiver's id
     */
    private $_user;

    /**
     * @param array   $init_data initial data
     * @param boolean $is_input_check
     */
    public function __construct(
        array $init_data = null,
        $is_input_check = self::CHECK_INPUT
    ) {
        parent::__construct($init_data, $is_input_check);

        if (is_null($init_data)) {
            $this->setAbstract('');
            $this->setOrgData('');
            $this->setRead(0);
            $this->setUser('');
        } else {
            $this->setAbstract((array_key_exists(self::ABS, $init_data))
                ? $init_data[self::ABS] : '');
            $this->setOrgData((array_key_exists(self::DATA, $init_data))
                ? $init_data[self::DATA] : '');
            $this->setRead((array_key_exists(self::READ, $init_data))
                ? $init_data[self::READ] : 0);
            $this->setUser((array_key_exists(self::USER, $init_data))
                ? $init_data[self::USER] : '');
        }
    }

    /**
     * @return array
     */
    public function convertArray()
    {
        $result = parent::convertArray();

        $result[self::ABS] = $this->getAbstract();
        $result[self::DATA] = $this->getOrgData();
        $result[self::READ] = $this->getRead();
        $result[self::USER] = $this->getUser();

        return $result;
    }

    /**
     * @return string
     */
    public function getAbstract()
    {
        return $this->_abstract;
    }

    /**
     * @param string $value
     */
    public function setAbstract($value)
    {
        $this->_abstract = $value;
    }

    /**
     * @return string|array
     */
    public function getOrgData()
    {
        return $this->_org_data;
    }

    /**
     * @param string|array $value
     */
    public function setOrgData($value)
    {
        $this->_org_data = $value;
    }

    /**
     * @return int
     */
    public function getRead()
    {
        return $this->_read;
    }

    /**
     * @param int $value
     */
    public function setRead($value)
    {
        $this->_read = $value;
    }

    /**
     * @return string
     */
    public function getUser()
    {
        return $this->_user;
    }

    /**
     * @param string $value
     */
    public function setUser($value)
    {
        $this->isInputNumber($value);
        $this->_user = $value;
    }

    /**
     * @param     int $valid_type VALID_TYPE_CREATE, VALID_TYPE_MODIFY, VALID_TYPE_SELECT
     *
     * @return    boolean       TRUE : valid   FALSE: invalid
     */
    protected function checkValidate($valid_type)
    {
        if (parent::checkValidate($valid_type) === false) {
            return false;
        }
        if ( ! Validate::isNumber($this->getUser())) {
            return false;
        }
        if ($valid_type == self::VALID_TYPE_CREATE) {
            global $G_container_base;
            $uum = $G_container_base->getInstance('uum');
            if ( ! $uum->getUser($this->getUser())) {
                return false;
            }
        }

        return true;
    }
}
