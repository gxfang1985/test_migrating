<?php

namespace grn\favour\data\bean;

use grn\grn\bean\BeanAbstract;
use grn\grn\Validate;

class FavourCommonBean extends BeanAbstract
{
    const MODULED_ID = 'col_module_id';
    const SUB_MODULE_ID = 'col_sub_module_id';
    const TYPE = 'col_type';
    const VALUE = 'col_value';
    const FAVOURER_ID = 'col_favourer_id';
    const FAVOURER_NAME = 'col_favourer_name';
    const TIMESTAMP = 'col_timestamp';

    private $_moduleId;
    private $_subModuleId;
    private $_type;
    private $_value;
    private $_favourerId;
    private $_favourerName;
    private $_timestamp;

    public function __construct(
        array $dataArray = null,
        $isInputCheck = self::CHECK_INPUT
    ) {
        parent::__construct($dataArray, $isInputCheck);

        if (is_null($dataArray)) {
            $this->setModuleId('');
            $this->setSubModuleId('');
            $this->setType('');
            $this->setValue('');
            $this->setFavourerId('');
            $this->setFavourerName('');
            $this->setTimeStamp(time());
        } else {
            $this->setModuleId(array_key_exists(self::MODULED_ID, $dataArray)
                ? $dataArray[self::MODULED_ID] : '');
            $this->setSubModuleId(array_key_exists(self::SUB_MODULE_ID,
                $dataArray) ? $dataArray[self::SUB_MODULE_ID] : '');
            $this->setType(array_key_exists(self::TYPE, $dataArray)
                ? $dataArray[self::TYPE] : '');
            $this->setValue(array_key_exists(self::VALUE, $dataArray)
                ? $dataArray[self::VALUE] : '');
            $this->setFavourerId(array_key_exists(self::FAVOURER_ID, $dataArray)
                ? $dataArray[self::FAVOURER_ID] : '');
            $this->setFavourerName(array_key_exists(self::FAVOURER_NAME,
                $dataArray) ? $dataArray[self::FAVOURER_NAME] : '');
            $this->setTimestamp(array_key_exists(self::TIMESTAMP, $dataArray)
                ? $dataArray[self::TIMESTAMP] : time());
        }
    }

    public function convertArray()
    {
        $result = parent::convertArray();
        $result[self::MODULED_ID] = $this->getModuleId();
        $result[self::SUB_MODULE_ID] = $this->getSubModuleId();
        $result[self::TYPE] = $this->getType();
        $result[self::VALUE] = $this->getValue();
        $result[self::FAVOURER_ID] = $this->getFavourerId();
        $result[self::FAVOURER_NAME] = $this->getFavourerName();
        $result[self::TIMESTAMP] = $this->getTimestamp();

        return $result;
    }

    public function getModuleId()
    {
        return $this->_moduleId;
    }

    public function setModuleId($value)
    {
        $this->_moduleId = $value;
    }

    public function getSubModuleId()
    {
        return $this->_subModuleId;
    }

    public function setSubModuleId($value)
    {
        $this->_subModuleId = $value;
    }

    public function getType()
    {
        return $this->_type;
    }

    public function setType($value)
    {
        $this->_type = $value;
    }

    public function getValue()
    {
        return $this->_value;
    }

    public function setValue($value)
    {
        $this->_value = $value;
    }

    public function getFavourerId()
    {
        return $this->_favourerId;
    }

    public function setFavourerId($value)
    {
        $this->isInputNumber($value);
        $this->_favourerId = $value;
    }

    public function getFavourerName()
    {
        return $this->_favourerName;
    }

    public function setFavourerName($value)
    {
        $this->_favourerName = $value;
    }

    public function getTimestamp()
    {
        return $this->_timestamp;
    }

    public function setTimestamp($value)
    {
        $this->isInputNumber($value);
        $this->_timestamp = $value;
    }

    /**
     * @param     int $valid_type VALID_TYPE_CREATE, VALID_TYPE_MODIFY, VALID_TYPE_SELECT
     *
     * @return    boolean       TRUE : valid   FALSE: invalid
     */
    protected function checkValidate($valid_type)
    {
        if (parent::checkValidate($valid_type) === false) {
            return false;
        }
        if ( ! Validate::isNumber($this->getFavourerId())) {
            return false;
        }
        if (Validate::isNull($this->getModuleId())) {
            return false;
        }
        if (Validate::isNull($this->getType())) {
            return false;
        }
        if (Validate::isNull($this->getValue())) {
            return false;
        }

        return true;
    }
}
