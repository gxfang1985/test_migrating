<?php

namespace grn\favour\db\dao;

use grn\favour\data\bean\Favour;
use grn\favour\data\collection\FavourCollection;
use grn\favour\db\dao\AbstractFavourBaseDAO;
use grn\favour\exception\FavourException;

class FavourDao extends AbstractFavourBaseDAO
{
    public function getFavour(
        $favourer_id,
        $module_id,
        $type,
        $value,
        $sub_module_id = ''
    ) {
        try {
            $db = $this->getDatabaseConnection();
            $query = "SELECT "
                     . " _id,"
                     . " col_favourer_id,"
                     . " col_favourer_name,"
                     . " col_module_id,"
                     . " col_sub_module_id,"
                     . " col_timestamp,"
                     . " col_type,"
                     . " col_value "
                     . "FROM tab_grn_favour "
                     . "WHERE col_module_id = '" . $db->escape($module_id)
                     . "' "
                     . "  AND col_sub_module_id = '"
                     . $db->escape($sub_module_id) . "' "
                     . "  AND col_type = '" . $db->escape($type) . "' "
                     . "  AND col_value = '" . $db->escape($value) . "' "
                     . "  AND col_favourer_id = '" . $db->escape($favourer_id)
                     . "';";
            $result = $db->query($query);
            if ($row = $db->fetch_assoc($result)) {
                $favour = new Favour($row, Favour::NOT_CHECK_INPUT);
            } else {
                $favour = new Favour();
            }
            $db->free_result($result);

            return $favour;
        } catch (FavourException $e) {
            throw $e;
        }
    }

    public function addFavour(Favour $favour)
    {
        try {
            $db = $this->getDatabaseConnection();
            $query = "INSERT INTO tab_grn_favour SET"
                     . " col_module_id = '"
                     . $db->escape($favour->getModuleId()) . "',"
                     . " col_sub_module_id = '"
                     . $db->escape($favour->getSubModuleId()) . "',"
                     . " col_type = '" . $db->escape($favour->getType()) . "',"
                     . " col_value = '" . $db->escape($favour->getValue())
                     . "',"
                     . " col_favourer_id = '"
                     . $db->escape($favour->getFavourerId()) . "',"
                     . " col_favourer_name = '"
                     . $db->escape($favour->getFavourerName()) . "',"
                     . " col_timestamp = '"
                     . $db->escape($favour->getTimestamp()) . "';";
            $db->query($query);
        } catch (FavourException $e) {
            throw $e;
        }
    }

    public function cancelFavour(Favour $favour)
    {
        try {
            $db = $this->getDatabaseConnection();
            $query = "DELETE FROM tab_grn_favour "
                     . "WHERE col_module_id = '"
                     . $db->escape($favour->getModuleId()) . "' "
                     . "  AND col_sub_module_id = '"
                     . $db->escape($favour->getSubModuleId()) . "' "
                     . "  AND col_type = '" . $db->escape($favour->getType())
                     . "' "
                     . "  AND col_value = '" . $db->escape($favour->getValue())
                     . "' "
                     . "  AND col_favourer_id = '"
                     . $db->escape($favour->getFavourerId()) . "' "
                     . "  AND _id = '" . $db->escape($favour->getId()) . "';";
            $db->query($query);
        } catch (FavourException $e) {
            throw $e;
        }
    }

    public function deleteMultiFavour(
        $module_id,
        $type,
        array $values,
        $sub_module_id = ''
    ) {
        try {
            if (count($values) <= 0) {
                return false;
            }
            $db = $this->getDatabaseConnection();
            $query = "DELETE FROM tab_grn_favour ";
            $query .= "WHERE col_module_id = '{$db->escape($module_id)}' ";
            $query .= "  AND col_sub_module_id = '{$db->escape($sub_module_id)}' ";
            $query .= "  AND col_type = '{$db->escape($type)}' ";
            foreach ($values as $k => $value) {
                $values[$k] = "'{$db->escape($value)}'";
            }
            $query .= "  AND col_value IN (" . implode(",", $values) . ");";
            $db->query($query);
        } catch (FavourException $e) {
            throw $e;
        }
    }

    public function getFavourCollection(
        $module_id,
        $type,
        $value,
        $sub_module_id = '',
        $limit = -1
    ) {
        try {
            $db = $this->getDatabaseConnection();
            $query = "SELECT SQL_CALC_FOUND_ROWS "
                     . " favour._id,"
                     . " favour.col_favourer_id,"
                     . " favour.col_favourer_name,"
                     . " favour.col_module_id,"
                     . " favour.col_sub_module_id,"
                     . " favour.col_timestamp,"
                     . " favour.col_type,"
                     . " favour.col_value "
                     . "FROM tab_grn_favour AS favour, tab_cb_user AS user "
                     . "WHERE favour.col_module_id = '"
                     . $db->escape($module_id) . "' "
                     . "  AND favour.col_sub_module_id = '"
                     . $db->escape($sub_module_id) . "' "
                     . "  AND favour.col_type = '"
                     . $db->escape($type) . "' "
                     . "  AND favour.col_value = '"
                     . $db->escape($value) . "' "
                     . "  AND favour.col_favourer_id = user._id "
                     . "  AND user.col_deleted IS NULL "
                     . "ORDER BY col_timestamp DESC";
            $query = $db->select_format($query, 0, $limit);
            $result = $db->query($query);
            $favour_collection = new FavourCollection();
            while ($row = $db->fetch_assoc($result)) {
                $favour_collection->appendBean(new Favour($row,
                    Favour::NOT_CHECK_INPUT));
            }
            $db->free_result($result);

            $query = "SELECT FOUND_ROWS() AS count;";
            $result = $db->query($query);
            if ($row = $db->fetch_assoc($result)) {
                $favour_collection->setCountNoLimit($row['count']);
            }
            $db->free_result($result);
        } catch (FavourException $e) {
            throw $e;
        }

        return $favour_collection;
    }

    public function getFavourersCount(
        $favourer_id,
        $module_id,
        $type,
        $values,
        $sub_module_id = ''
    ) {
        $db = $this->getDatabaseConnection();
        $query = cb_queryf($db, "SELECT favour.col_value as type_value"
                                . ",COUNT(favour.col_value) as count"
                                . ", SUM(IF(col_favourer_id = '@S', 1, 0 )) as is_favoured"
                                . " FROM tab_grn_favour AS favour, tab_cb_user AS user"
                                . " WHERE favour.col_module_id = '@S'"
                                . " AND favour.col_sub_module_id = '@S'"
                                . " AND favour.col_type = '@S'"
                                . " AND favour.col_value IN (@A)"
                                . " AND favour.col_favourer_id = user._id"
                                . " AND user.col_deleted IS NULL"
                                . " GROUP BY favour.col_value",
            $favourer_id,
            $module_id,
            $sub_module_id,
            $type,
            $values
        );
        $result = $db->query($query);
        $favourers_list = [];
        while ($row = $db->fetch_assoc($result)) {
            $favourers_list[$row['type_value']] = $row;
        }
        $db->free_result($result);

        return $favourers_list;
    }
}
