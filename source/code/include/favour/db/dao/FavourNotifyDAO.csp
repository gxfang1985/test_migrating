<?php

namespace grn\favour\db\dao;

use grn\favour\data\bean\FavourNotify;
use grn\favour\data\collection\FavourNotifyCollection;
use grn\favour\db\dao\AbstractFavourBaseDAO;
use grn\favour\exception\FavourException;

class FavourNotifyDAO extends AbstractFavourBaseDAO
{
    private $empty_abstract = "...";

    /**
     * Select notification by user id.
     *
     * @param int   $user_id
     * @param array $app_ids
     * @param int   $limit
     *
     * @throws \Exception|\grn\favour\exception\FavourException
     * @return \grn\favour\data\collection\FavourNotifyCollection
     */
    public function selectFavourNotifyCollectionByUserId(
        $user_id,
        array $app_ids = [],
        $limit = -1
    ) {
        $favour_notify_collection = new FavourNotifyCollection();
        if (count($app_ids) == 0) {
            $favour_notify_collection->setCountNoLimit(0);

            return $favour_notify_collection;
        }

        $dbConn = $this->getDatabaseConnection();
        $query = "SELECT ";
        $query .= " _id, ";
        $query .= " CASE WHEN col_abstract = '' THEN '{$this->empty_abstract}' ";
        $query .= "      WHEN col_abstract IS NULL THEN '{$this->empty_abstract}' ";
        $query .= "      ELSE col_abstract END as col_abstract , ";
        $query .= " col_favourer_id,";
        $query .= " col_favourer_name,";
        $query .= " col_module_id,";
        $query .= " col_org_data,";
        $query .= " col_read,";
        $query .= " col_sub_module_id,";
        $query .= " col_timestamp,";
        $query .= " col_type,";
        $query .= " col_user,";
        $query .= " col_value";
        $query .= " FROM tab_grn_favour_notify";
        $query .= " WHERE _id IN";
        $query .= "  (SELECT MAX(_id)";
        $query .= "   FROM tab_grn_favour_notify";
        $query .= "   WHERE col_user = '{$dbConn->escape($user_id)}'";

        $module_ids = [];
        foreach ($app_ids as $app_id) {
            $module_ids[] = "grn.{$app_id}";
        }
        $query_in_module_ids = cb_queryf($dbConn, " AND col_module_id IN (@A)",
            $module_ids);
        $query .= $query_in_module_ids;

        $query .= "   GROUP BY col_module_id, col_sub_module_id, col_type, col_value)";
        $query .= " ORDER BY _id DESC";
        $query = $dbConn->select_format($query, 0, $limit);

        $result = $dbConn->query($query);
        while ($row = $dbConn->fetch_assoc($result)) {
            $row['col_org_data'] = @cb_unserialize($row['col_org_data'],
                ["allowed_classes" => false]);
            $favour_notify_collection->appendBean(new FavourNotify($row,
                FavourNotify::NOT_CHECK_INPUT));
        }
        $dbConn->free_result($result);

        $query
            = "SELECT COUNT(DISTINCT col_module_id, col_sub_module_id, col_type, col_value) AS count "
              . "FROM tab_grn_favour_notify "
              . "WHERE col_user='{$dbConn->escape($user_id)}' AND col_read='0' ";
        $query .= $query_in_module_ids;

        $result = $dbConn->query($query);
        if ($row = $dbConn->fetch_assoc($result)) {
            $favour_notify_collection->setCountNoLimit($row['count']);
        }
        $dbConn->free_result($result);

        return $favour_notify_collection;
    }

    /**
     * Select favour notify collection for specific comment or body
     *
     * @param string $user_id
     * @param string $module_id
     * @param string $type
     * @param string $value
     * @param string $sub_module_id
     *
     * @throws \Exception|\grn\favour\exception\FavourException
     * @return \grn\favour\data\collection\FavourNotifyCollection
     */
    public function selectSpecificFavourNotifyCollection(
        $user_id,
        $module_id,
        $type,
        $value,
        $sub_module_id = ''
    ) {
        try {
            $dbConn = $this->getDatabaseConnection();
            $query = "SELECT SQL_CALC_FOUND_ROWS";
            $query .= " _id, ";
            $query .= " CASE WHEN col_abstract = '' THEN '{$this->empty_abstract}' ";
            $query .= "      WHEN col_abstract IS NULL THEN '{$this->empty_abstract}' ";
            $query .= "      ELSE col_abstract END as col_abstract , ";
            $query .= " col_favourer_id, ";
            $query .= " col_favourer_name, ";
            $query .= " col_module_id, ";
            $query .= " col_org_data, ";
            $query .= " col_read, ";
            $query .= " col_sub_module_id, ";
            $query .= " col_timestamp, ";
            $query .= " col_type, ";
            $query .= " col_user, ";
            $query .= " col_value ";
            $query .= "FROM";
            $query .= " tab_grn_favour_notify ";
            $query .= "WHERE col_module_id = '{$dbConn->escape($module_id)}' ";
            $query .= " AND col_sub_module_id = '{$dbConn->escape($sub_module_id)}' ";
            $query .= " AND col_type = '{$dbConn->escape($type)}' ";
            $query .= " AND col_user = '{$dbConn->escape($user_id)}' ";
            $query .= " AND col_value = '{$dbConn->escape($value)}' ";

            $result = $dbConn->query($query);
            $favour_notify_collection = new FavourNotifyCollection();
            while ($row = $dbConn->fetch_assoc($result)) {
                $row['col_org_data'] = @cb_unserialize($row['col_org_data'],
                    ["allowed_classes" => false]);
                $favour_notify_collection->appendBean(new FavourNotify($row,
                    FavourNotify::NOT_CHECK_INPUT));
            }
            $dbConn->free_result($result);

            $query = "SELECT FOUND_ROWS() AS count;";
            $result = $dbConn->query($query);
            if ($row = $dbConn->fetch_assoc($result)) {
                $favour_notify_collection->setCountNoLimit($row['count']);
            }
            $dbConn->free_result($result);
        } catch (FavourException $e) {
            throw $e;
        }

        return $favour_notify_collection;
    }

    /**
     * Select one favour notify
     *
     * @param string $favourer_id
     * @param string $user_id
     * @param string $module_id
     * @param string $type
     * @param string $value
     * @param string $sub_module_id
     *
     * @throws \Exception|\grn\favour\exception\FavourException
     * @return \grn\favour\data\bean\FavourNotify
     */
    public function selectFavourNotify(
        $favourer_id,
        $user_id,
        $module_id,
        $type,
        $value,
        $sub_module_id = ''
    ) {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "SELECT";
            $query .= " _id, ";
            $query .= " CASE WHEN col_abstract = '' THEN '{$this->empty_abstract}' ";
            $query .= "      WHEN col_abstract IS NULL THEN '{$this->empty_abstract}' ";
            $query .= "      ELSE col_abstract END as col_abstract , ";
            $query .= " col_favourer_id, ";
            $query .= " col_favourer_name, ";
            $query .= " col_module_id, ";
            $query .= " col_org_data, ";
            $query .= " col_read, ";
            $query .= " col_sub_module_id, ";
            $query .= " col_timestamp, ";
            $query .= " col_type, ";
            $query .= " col_user, ";
            $query .= " col_value ";
            $query .= "FROM";
            $query .= " tab_grn_favour_notify ";
            $query .= "WHERE col_module_id = '{$dbConn->escape($module_id)}' ";
            $query .= " AND col_sub_module_id = '{$dbConn->escape($sub_module_id)}' ";
            $query .= " AND col_type = '{$dbConn->escape($type)}' ";
            $query .= " AND col_user = '{$dbConn->escape($user_id)}' ";
            $query .= " AND col_value = '{$dbConn->escape($value)}' ";
            $query .= " AND col_favourer_id = '{$dbConn->escape($favourer_id)}' ";

            $result = $dbConn->query($query);
            if ($row = $dbConn->fetch_assoc($result)) {
                $row['col_org_data'] = @cb_unserialize($row['col_org_data'],
                    ["allowed_classes" => false]);
                $favour_notify = new FavourNotify($row,
                    FavourNotify::NOT_CHECK_INPUT);
            } else {
                $favour_notify = new FavourNotify();
            }
            $dbConn->free_result($result);
        } catch (FavourException $e) {
            throw $e;
        }

        return $favour_notify;
    }

    /**
     * Add a notification into DB
     *
     * @param \grn\favour\data\bean\FavourNotify $favour_notify
     *
     * @throws \Exception|\grn\favour\exception\FavourException
     */
    public function insertFavourNotify(FavourNotify $favour_notify)
    {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "INSERT INTO tab_grn_favour_notify SET";
            $query .= "  col_abstract = '{$dbConn->escape( $favour_notify->getAbstract() )}'";
            $query .= ", col_favourer_id = '{$dbConn->escape( $favour_notify->getFavourerId() )}'";
            $query .= ", col_favourer_name = '{$dbConn->escape( $favour_notify->getFavourerName() )}'";
            $query .= ", col_module_id = '{$dbConn->escape( $favour_notify->getModuleId() )}'";
            if (is_array($favour_notify->getOrgData())) {
                $query .= ", col_org_data = '{$dbConn->escape( serialize($favour_notify->getOrgData()) )}'";
            }
            $query .= ", col_read = '{$dbConn->escape( $favour_notify->getRead() )}'";
            $query .= ", col_sub_module_id = '{$dbConn->escape( $favour_notify->getSubModuleId() )}'";
            $query .= ", col_timestamp = '{$dbConn->escape( $favour_notify->getTimestamp() )}'";
            $query .= ", col_type = '{$dbConn->escape( $favour_notify->getType() )}'";
            $query .= ", col_user = '{$dbConn->escape( $favour_notify->getUser() )}'";
            $query .= ", col_value = '{$dbConn->escape( $favour_notify->getValue() )}'";

            $dbConn->query($query);
        } catch (FavourException $e) {
            throw $e;
        }
    }

    /**
     * Update all user's notification, set them as read
     *
     * @param string $user_id
     * @param array  $app_ids
     *
     * @throws \Exception|\grn\favour\exception\FavourException
     */
    public function updateFavourNotifyReadByUserId(
        $user_id,
        array $app_ids = []
    ) {
        try {
            if (count($app_ids) == 0) {
                return;
            }

            $dbConn = $this->getDatabaseConnection();

            $query = "UPDATE tab_grn_favour_notify SET";
            $query .= "  col_read = '1'";
            $query .= " WHERE col_user = '{$dbConn->escape($user_id)}'";

            if (count($app_ids) > 0) {
                $query .= " AND col_module_id IN (";
                $tempIsNeedComma = false;
                foreach ($app_ids as $app_id) {
                    if ($tempIsNeedComma) {
                        $query .= ", ";
                    }
                    $query .= "'grn.{$dbConn->escape($app_id)}'";
                    $tempIsNeedComma = true;
                }
                $query .= ") ";
            }

            $dbConn->query($query);
        } catch (FavourException $e) {
            throw $e;
        }
    }

    /**
     * Delete one notification
     *
     * @param \grn\favour\data\bean\FavourNotify $favour_notify
     *
     * @throws \Exception|\grn\favour\exception\FavourException
     */
    public function deleteFavourNotify(FavourNotify $favour_notify)
    {
        try {
            $dbConn = $this->getDatabaseConnection();
            $query
                = "DELETE FROM tab_grn_favour_notify WHERE _id = '{$dbConn->escape($favour_notify->getId())}'";
            $query .= " AND col_module_id = '{$dbConn->escape($favour_notify->getModuleId())}'";
            $query .= " AND col_sub_module_id = '{$dbConn->escape($favour_notify->getSubModuleId())}'";
            $query .= " AND col_type = '{$dbConn->escape($favour_notify->getType())}'";
            $query .= " AND col_value = '{$dbConn->escape($favour_notify->getValue())}'";
            $dbConn->query($query);
        } catch (FavourException $e) {
            throw $e;
        }
    }
}
