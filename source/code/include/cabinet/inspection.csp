<?php

define('GRN_CABINET_ROOT_ID', '0');
define('GRN_CABINET_ROOT_PATH', '(Root)');
define('GRN_CABINET_STR_UNLIMITED_VERSION', 'unlimited');
define('GRN_CABINET_UNLIMITED_VERSION', '-1');

/**
 * Inspestion API
 * aggregate your class which needs inspection features
 *
 * @package grn.cabinet
 *
 */
require_once('fw/module.csp');
require_once('cabinet/table.csp');

class GRN_Cabinet_Inspection extends CB_ModuleBase
{
    //Private member variables
    var $_logger = null;

    //Constructor
    function __construct()
    {
        parent::__construct('grn.cabinet');

        require_once('grn/logger.csp');
        $logger_manager = CB_LoggerManager::getInstance();
        $this->_logger = $logger_manager->getLogger($this->getModuleId());
    }

    /**
     * Create an instance of GRN_Cabinet_Inspection class
     *
     * @access public
     */
    private static $_instance = null;

    /**
     * @static
     * @return GRN_Cabinet_Inspection
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Check notice priority is enabled or not
     *
     * @access private
     */
    function isNoticeEnabled()
    {
        return $this->_logger->isNoticeEnabled();
    }

    /**
     * Check Info priority is enabled or not
     *
     * @access private
     */
    function isInfoEnabled()
    {
        return $this->_logger->isInfoEnabled();
    }

    /**
     * Write log with notice priority
     *
     * @access private
     */
    function notice($action, $target, $params = [])
    {
        $this->_logger->noticeEx($action, $target, $params);
    }

    /**
     * Write log with info priority
     *
     * @access private
     */
    function info($action, $target, $params = [])
    {
        $this->_logger->infoEx($action, $target, $params);
    }

    /**
     * Write log for folder
     *
     * @param  : action string
     * @param  : folder: instance of GRN_Cabinet_FolderEntity class
     * @param  : id of folder object
     *
     * @access public
     */
    function writeLogFolder($action, $folder, $oldParent = null)
    {
        $target = 'folder';
        $folder_id = null;
        $folder_title = null;
        $operation = null;
        $params = null;
        if (is_object($folder) && $action != "import") {
            if ($action == 'delete' || $action == 'permanent delete'
                || $action == 'restore'
            ) {
                $folder_id = ['did' => $folder->getOID()];
            } else {
                $folder_id = ['hid' => $folder->getOID()];
            }
            $folder_title = ['folder' => $folder->get('name')];
        }
        $params = $folder_id + $folder_title;
        switch ($action) {
            case "move":
                $parent = &$folder->get('parent');
                if ( ! is_null($parent)) {
                    $parent = $parent->getOID();
                } else {
                    $parent = 0;
                }
                if ($oldParent != null) {
                    $params = $folder_id + [
                            'src_hid' => $oldParent,
                            'dst_hid' => $parent
                        ] + $folder_title;
                }
                break;
            case "import":
            case "export":
                $params = null;
                break;
            case "import_operation_create":
                $action = "import";
                $params = $params + ['operation' => 'create'];
                break;
            case "import_operation_update":
                $action = "import";
                $params = $params + ['operation' => 'update'];
                break;
            //GTM-528
            case "delete":
                $params = $params + ['pdid' => $oldParent];
                break;
            case "permanent delete":
                $params = $params + ['pdid' => $oldParent];
                break;
            case "restore":
                $params = $params + ['pdid' => $oldParent];
                break;
        }
        if ($this->isNoticeEnabled()) {
            $this->notice($action, $target, $params);
        }
    }

    /**
     * Write log for folder
     *
     * @param  : action string
     * @param  : folder: instance of GRN_Cabinet_Folder class
     * @param  : instance of CB_Uer or CB_Group or CB_Role or a string
     * @param  : array authorities
     *
     * @access public
     */
    function writeLogAccess($action, $object, $target, $authorities)
    {
        $targetName = "access";
        $params = [];
        if ( ! is_null($object)) {
            $params = ['hid' => $object->getOID()];
        }
        require_once('cabinet/access.csp');
        $access_manager = GRN_Cabinet_AccessManager::getInstance();
        //Get  security model
        $model
            = ['security_model' => $access_manager->getSecurityModelString($object)];

        //folder Name
        $folder_title = [];
        if (is_a($object, 'GRN_Cabinet_Folder')) {
            $folder_title = ['folder' => $object->get('name')];
        }
        //target : user or role or group
        if ($target instanceof CB_User) {
            $target = ['uid' => $target->getOID()];
        } elseif ($target instanceof CB_Group) {
            $target = ['oid' => $target->getOID()];
        } elseif ($target instanceof CB_Role) {
            $target = ['rid' => $target->getOID()];
        } elseif (is_string($target)) {
            $target = ['rid' => $target];
        } else {
            $target = [];
        }
        //Authorities
        $auth = [];
        if ( ! is_null($authorities)) {
            $avail = [];
            foreach (array_keys($authorities) as $key) {
                if ($authorities[$key]) {
                    $avail[] = $key;
                }
            }
            $auth = ['auth' => implode('/', $avail)];
        }
        switch ($action) {
            case "create":
            case "delete":
            case "modify":
            case "import_access":
                $params = array_merge($params, $target, $folder_title, $model,
                    $auth);
                if ($action == "import_access") {
                    $action = "import";
                }
                break;
            case "delete_all":
            case "modify_model":
                $params = array_merge($params, $folder_title);
                if ($action == "modify_model") {
                    $action = "modify";
                    $params = array_merge($params, $model);
                }
                break;
        }
        //write log
        if ($this->isNoticeEnabled()) {
            $this->notice($action, $targetName, $params);
        }
    }

    function writeLogFile($action, $file, $folder, $src_folder = null)
    {
        $target = "file";
        $params = [];
        $file_id = [];
        $file_name = [];
        $version_setting = [];
        $version = [];
        $move = [];
        if (is_object($folder)) {
            $params = ['hid' => $folder->getOID()];
            if ($action == 'move') {
                $params = ['dst_hid' => $folder->getOID()];
            }
            $move = array_merge(['src_hid' => $src_folder], $params);
        } else {
            $params = ['hid' => $folder];
            if ($action == 'move') {
                $params = ['dst_hid' => $folder];
            }
            $move = array_merge(['src_hid' => $src_folder], $params);
        }
        if (is_object($file)) {
            $file_id = ['fid' => $file->getOID()];
            $body = $file->getCurrentBody();
            $file_name = [
                'file_name' => $body->get('name'),
                'title'     => $file->getTitle() != '' ? $file->getTitle()
                    : $body->get('name')
            ];
            $version = ['version' => $file->getVersion()];
            $version_setting = ['version_setting' => $file->getMaxVersion()];
        }
        switch ($action) {
            case "download":
            case "update":
            case "restore":
                $params = array_merge($params, $file_id, $file_name, $version);
                break;
            case "download_compress":
                $params = array_merge($params, $file_id, $file_name, $version,
                    ['compress' => 1]);
                $action = "download";
                break;
            case "create":
            case "delete":
            case "modify":
                $params = array_merge($params, $file_id, $file_name);
                if ($action == "create" || $action == "modify") {
                    $params = array_merge($params, $version_setting);
                }
                if ($action == "modify") {
                    $target = "file_information";
                }
                break;
            case "move":
                $params = array_merge($file_id, $move, $file_name);
                break;
        }
        if ($action == "download" && $this->isInfoEnabled()) {
            $this->info($action, $target, $params);
        } elseif ($this->isNoticeEnabled()) {
            $this->notice($action, $target, $params);
        }
    }

    function writeLogPrivilege($action, $folder, $target, $object)
    {
        $params = ['fid' => $folder->getOID()];

        if ($target instanceof CB_User) {
            $params = $params + ['uid' => $target->getOID()];
        } elseif ($target instanceof CB_Group) {
            $params = $params + ['gid' => $target->getOID()];
        } elseif ($target instanceof CB_Role) {
            $params = $params + ['rid' => $target->getOID()];
        } elseif (is_string($target)) {
            if ($action == "delete_all") {
                if (strncasecmp($target, 'cb_', 3) == 0) {
                    $target = substr($target, 3);
                    $params = $params + ['target' => $target];
                } else {
                    $params = $params + ['target' => $target];
                }
            } else {
                $params = $params + ['dynamic_role' => $target];
            }
        }

        //write log
        if ($this->isNoticeEnabled()) {
            $this->notice($action, $object, $params);
        }
    }
}

class GRN_Cabinet_Folder_Local_Inspection extends GRN_Cabinet_Inspection
{
    /** Inspacetion Message Template List **/
    var $_template_list = null;

    /**
     * Constructor
     *
     */
    public function __construct()
    {
        parent::__construct();

        $template_list = [
            'folder_local_add'           => [
                'action' => 'create',
                'target' => 'folder_local',
            ],
            'folder_local_modify'        => [
                'action' => 'modify',
                'target' => 'folder_local',
            ],
            'folder_local_delete'        => [
                'action' => 'delete',
                'target' => 'folder_local',
            ],
            'folder_local_add_import'    => [
                'action' => 'import',
                'target' => 'folder_local',
            ],
            'folder_local_modify_import' => [
                'action' => 'import',
                'target' => 'folder_local',
            ],
            'folder_local_delete_import' => [
                'action' => 'import_delete',
                'target' => 'folder_local',
            ],
            'folder_local_export'        => [
                'action' => 'export',
                'target' => 'folder_local',
            ],
        ];

        //Set Template List
        $this->_template_list = $template_list;
    }

    /**
     * Get Instance
     *
     * return object $instance                   //Instance of GRN_Cabinet_Folder_Local_Inspection
     */
    private static $_instance = null;

    /**
     * @static
     * @return GRN_Cabinet_Folder_Local_Inspection
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    function isEnabled($threshold = 'notice')
    {
        //Check Threshold
        $result = false;
        switch ($threshold) {
            case 'critical':
                $result = $this->_logger->isCriticalEnabled();
                break;
            case 'error':
                $result = $this->_logger->isErrorEnabled();
                break;
            case 'warning':
                $result = $this->_logger->isWarningEnabled();
                break;
            case 'notice':
                $result = $this->_logger->isNoticeEnabled();
                break;
            case 'info':
                $result = $this->_logger->isInfoEnabled();
                break;
            case 'debug':
                $result = $this->_logger->isDebugEnabled();
                break;
            default:
                $result = false;
                break;
        }

        //Return Result
        return $result;
    }

    /**
     * Record Inspection Message
     *
     * $param  string $message_type               //Inspaction Message Type
     * $param  array  $message_args               //Inspaction Message Argument List
     * $return bool   $result                     //Result
     */
    function record($message_type, $message_args = [])
    {
        //Get Inspaction Message Template
        if ( ! array_key_exists($message_type, $this->_template_list)) {
            return false;
        }
        $message_template = $this->_template_list[$message_type];

        $message_action = $message_template['action'];
        $message_target = $message_template['target'];

        $this->_logger->noticeEx($message_action, $message_target,
            $message_args);

        //Return Result
        return true;
    }
}

