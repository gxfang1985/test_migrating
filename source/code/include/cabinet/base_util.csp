<?php

require_once('fw/database.csp');
require_once('grn/application.csp');

/**
 * 一覧クラスのベースクラス
 *
 * @package grn.cabinet
 */
class GRN_Cabinet_ListBase
{
    /**
     * @access protected
     */
    var $_rowset = null;


    function __construct()
    {
        // construct
    }

    function getTableInfo($name)
    {
        static $_tm = null;

        if (is_null($_tm)) {
            $app_locator = GRN_ApplicationLocator::instance();
            $_tm = $app_locator->getTableManager('cabinet');
        }

        if (is_null($_tm)) {
            $ret = null;

            return $ret;
        }

        $ret = $_tm->getTableInfo($name);

        return $ret;
    }

    /**
     * @access protected
     */
    var $_offset = 0;

    /**
     * 一覧の先頭位置を設定する
     *
     * @param integer $offset
     *
     * @return boolean
     */
    function setOffset($offset)
    {
        if ($this->_rowset) {
            return false;
        }
        $this->_offset = $offset;

        return true;
    }

    /**
     * 一覧の先頭位置を取得する
     *
     * @return integer
     */
    function getOffset()
    {
        return $this->_offset;
    }

    /**
     * @access protected
     */
    var $_limit = -1;

    /**
     * 一覧件数を設定する
     *
     * @param integer $limit
     *
     * @return boolean
     */
    function setLimit($limit)
    {
        if ($this->_rowset) {
            return false;
        }
        $this->_limit = $limit;

        return true;
    }

    /**
     * 一覧件数を取得する
     *
     * @return integer
     */
    function getLimit()
    {
        return $this->_limit;
    }

    /**
     * @access private
     */
    var $_lock_mode = CB_DATABASE_DEFAULT_LOCK;

    /**
     * ロックモードを設定する
     *
     * @param integer $lock
     */
    function setLock($lock)
    {
        $this->_lock_mode = $lock;
    }

    /**
     * ロックモードを取得する
     *
     * @return integer
     */
    function getLock()
    {
        return $this->_lock_mode;
    }


    // Order

    /**
     * @access protected
     */
    var $_order_columns = [];

    /**
     * 一覧のソートカラムを追加する
     *
     * @param string  $column
     * @param boolean $order
     *
     * @return boolean
     */
    function addOrderColumn($column, $order)
    {
        if ($this->_rowset) {
            return false;
        }

        if ($column) {
            $app_locator = GRN_ApplicationLocator::instance();
            $db = $app_locator->getConnection('cabinet');

            if ( ! strncmp('col_', $column, 4)) {
                $column = substr($column, 4);
            }

            $column = $db->escape($column);
        }
        if (is_null($column)) {
            $column = '_id';
        }

        $this->_order_columns[$column] = $order;

        return true;
    }

    /**
     * 一覧のソートカラムを取得する
     *
     * @param integer $index
     *
     * @return mixed
     */
    function getOrderColumn($index)
    {
        $columns = array_keys($this->_order_columns);

        if ($index < 0 || $index >= count($columns)) {
            return null;
        }

        return [$columns[$index] => $this->_order_columns[$columns[$index]]];
    }

    /**
     * 内部状態のクリア
     */
    function destroy()
    {
        if ($this->_rowset) {
            $this->_rowset->destroy();
        }
        $this->_rowset = null;
    }

    /**
     * ソートカラム名から検索時のテーブルエイリアスを取得する
     *
     * @param string $column
     *
     * @return string
     */
    function _getAliasByColumn($column)
    {
        return null;
    }

    /**
     * ソートカラム名からエイリアスを含むカラム名を取得する
     *
     * @param string $column
     *
     * @return string
     */
    function _getColumnName($column)
    {
        if (is_null($column)) {
            $column = '_id';
        }

        $alias = $this->_getAliasByColumn($column);

        if ($alias) {
            $alias .= '.';
        }

        if ($column == '_id') {
            return $alias . $column;
        }

        return $alias . 'col_' . $column;
    }

    /**
     * オブジェクトからソートカラムで指定された値を取得する
     *
     * @param object $object データ
     * @param string $column
     *
     * @return mixed
     */
    function _getColumnValue(& $object, $column)
    {
        if (is_null($column) || $column == '_id') {
            return $object->getOID();
        }

        return $object->get($column);
    }


    function _isNotNullColumn($column)
    {
        return false;
    }

    /**
     * OIDのソート順序を取得する
     */
    function _getDefaultOrder()
    {
        $order_columns_keys = array_keys($this->_order_columns);
        $first_column = array_shift($order_columns_keys);

        if (is_null($first_column)) {
            return true;
        }

        return $this->_order_columns[$first_column];
    }


    /**
     * 一覧の検索条件と順序が設定されたRowSetを返す、Order、Limitは設定されていない
     *
     * @return mixed CB_RowSet or CB_MultiRowSet
     * @access protected
     */
    function _createRowSet()
    {
        $ret = null;

        return $ret;
    }


    /**
     * 一覧件数を取得する
     */
    function count()
    {
        if ( ! ($rowset = $this->_createRowSet())) {
            return 0;
        }

        $rowset->limit(0, -1);
        $rowset->applyGroupFunctions(['count' => 'COUNT(*)']);
        $rowset->setLock($this->_lock_mode);
        $result = $rowset->iterate();
        $rowset->destroy();

        return $result['count'];
    }

    /**
     * 検索行からオブジェクトを取得する
     *
     * @access protected
     */
    function &_row2object(& $row)
    {
        return $row;
    }

    /**
     * 一覧初期化
     *
     * @access protected
     */
    function _initialize()
    {
        if ($this->_rowset) {
            return false;
        }

        if ( ! ($this->_rowset = $this->_createRowSet())) {
            return false;
        }

        $this->_setOrderColumn($this->_rowset, false);
        $this->_rowset->limit($this->_offset, $this->_limit);
        $this->_rowset->setLock($this->_lock_mode);

        return true;
    }

    /**
     * 要素を取り出す
     */
    function &iterate()
    {
        if ( ! $this->_rowset) {
            if ( ! $this->_initialize()) {
                $ret = null;

                return $ret;
            }
        }

        if (($row =& $this->_rowset->iterate())) {
            $ret =& $this->_row2object($row);

            return $ret;
        }

        $this->destroy();
        $ret = null;

        return $ret;
    }

    /**
     * RowSetへOrderを設定する
     *
     * @param boolean $inverse 逆順の場合TRUE
     *
     * @return boolean
     */
    function _setOrderColumn(& $rowset, $inverse = false)
    {
        assert('! is_null($rowset)');

        if ( ! $rowset || $inverse === -1) {
            return false;
        }

        foreach ($this->_order_columns as $column => $order) {
            if ($inverse) {
                $order = $order ? false : true;
            }

            $rowset->addOrderColumn($this->_getColumnName($column), $order);
        }

        if ( ! array_key_exists('_id', $this->_order_columns)) {
            $order = $this->_getDefaultOrder();

            if ($inverse) {
                $order = $order ? false : true;
            }

            $rowset->addOrderColumn($this->_getColumnName('_id'), $order);
        }

        return true;
    }


    /**
     * 特定データの特定カラムを順序づけする検索文字列を取得する
     *
     * @param object $db       DBコネクション
     * @param object $object   データ
     * @param string $column   ソートカラム名（col_は含まない）
     * @param string $operator 検索すべき順序を示す文字列、'<' or '=' or '>'
     *
     * @return string
     */
    function _makeOrderCondition(& $db, & $object, $column, $operator)
    {
        $col_name = $this->_getColumnName($column);
        $col_value = $this->_getColumnValue($object, $column);

        if (is_object($col_value)) {
            if ( ! is_a($col_value, 'cb_timestamp')) {
                return null;
            }

            $col_value = $col_value->unix_ts;
        }

        $condition = null;

        if ($operator == '=') {
            if ( ! is_null($col_value)) {
                $condition = $col_name . ' ' . $operator . ' \''
                             . $db->escape($col_value) . '\'';
            } else {
                $condition = $col_name . ' IS NULL';
            }
        } elseif ( ! is_null($col_value)) {
            $condition = $col_name . ' ' . $operator . ' \''
                         . $db->escape($col_value) . '\'';

            if ($operator == '<'
                && ( ! is_null($column) && $column != '_id'
                     && ! $this->_isNotNullColumn($column))
            ) {
                $condition = '(' . $col_name . ' IS NULL OR ' . $condition
                             . ')';
            }
        } elseif ($operator == '>') {
            $condition = $col_name . ' IS NOT NULL';
        } else {
            // 値がNULLの場合、未満の判定はできない
        }

        return $condition;
    }

    /**
     * 指定データの前後を取得する検索条件を生成する
     *
     * @param boolean $previous 直前のデータを検索する場合にTRUE
     * @param object  $object   中心となるオブジェクト
     *
     * @access protected
     */
    function _makeNeighborCondition($previous, & $object)
    {
        $app_locator = GRN_ApplicationLocator::instance();
        $db =& $app_locator->getConnection('cabinet');

        assert('!is_null($db)');

        $previous_columns = [];
        $conditions = [];

        foreach ($this->_order_columns as $column => $order) {
            $col_conditions = [];

            foreach ($previous_columns as $col_name) {
                if (($c = $this->_makeOrderCondition($db, $object, $col_name,
                    '='))
                ) {
                    $col_conditions[] = $c;
                }
            }

            if ($previous) {
                if ($order) {
                    $ope = '>';
                } else {
                    $ope = '<';
                }
            } else {
                if ($order) {
                    $ope = '<';
                } else {
                    $ope = '>';
                }
            }

            if (($c = $this->_makeOrderCondition($db, $object, $column,
                $ope))
            ) {
                $col_conditions[] = $c;
                $conditions[] = '(' . implode(' AND ', $col_conditions)
                                . ')';
            }

            $previous_columns[] = $column;
        }

        if ( ! array_key_exists('_id', $this->_order_columns)) {
            $col_conditions = [];

            foreach ($previous_columns as $col_name) {
                if (($c = $this->_makeOrderCondition($db, $object, $col_name,
                    '='))
                ) {
                    $col_conditions[] = $c;
                }
            }

            if ($previous) {
                if ($this->_getDefaultOrder()) {
                    $col_conditions[] = $this->_makeOrderCondition($db, $object,
                        null, '>');
                } else {
                    $col_conditions[] = $this->_makeOrderCondition($db, $object,
                        null, '<');
                }
            } else {
                if ($this->_getDefaultOrder()) {
                    $col_conditions[] = $this->_makeOrderCondition($db, $object,
                        null, '<');
                } else {
                    $col_conditions[] = $this->_makeOrderCondition($db, $object,
                        null, '>');
                }
            }

            $conditions[] = '(' . implode(' AND ', $col_conditions) . ')';
        }

        return implode(' OR ', $conditions);
    }

    /**
     * 設定された一覧順序で指定データの直前のデータIDを取得する
     *
     * @param object $object データ
     *
     * @return string
     */
    function getPreviousID(& $object)
    {
        if ( ! $object) {
            return false;
        }

        if ( ! ($rowset =& $this->_createRowSet())) {
            return false;
        }

        $this->_setOrderColumn($rowset, true);

        if (($c = $this->_makeNeighborCondition(true, $object))) {
            $rowset->addCondition($c);
        } else {
            assert('FALSE');
        }
        $rowset->limit(0, 1);
        $row =& $rowset->iterate();
        $rowset->destroy();

        if ( ! is_object($row)) {
            $f =& $this->_row2object($row);

            return $f ? $f->getOID() : false;
        }

        return $row ? $row->getOID() : false;
    }

    /**
     * 設定された一覧順序で指定データまでのオフセットを取得する
     *
     * @param object $object データ
     *
     * @return ineter
     */
    function getPreviousOffset(& $object)
    {
        if ( ! $object) {
            return -1;
        }

        if ( ! ($rowset =& $this->_createRowSet())) {
            return -1;
        }

        //$this->_setOrderColumn( $rowset, FALSE );

        if (($c = $this->_makeNeighborCondition(true, $object))) {
            $rowset->addCondition($c);
        } else {
            assert('FALSE');
        }
        $rowset->applyGroupFunctions(['count' => 'COUNT(*)']);
        $rowset->setLock($this->_lock_mode);
        $result =& $rowset->iterate();
        $rowset->destroy();

        return $result['count'];
    }

    /**
     * 設定された一覧順序で指定データの直後のデータIDを取得する
     *
     * @param object $object データ
     *
     * @return string
     */
    function getNextID(& $object)
    {
        if ( ! $object) {
            return false;
        }

        if ( ! ($rowset =& $this->_createRowSet())) {
            return false;
        }

        $this->_setOrderColumn($rowset, false);

        if (($c = $this->_makeNeighborCondition(false, $object))) {
            $rowset->addCondition($c);
        } else {
            assert('FALSE');
        }
        $rowset->limit(0, 1);
        $rowset->setLock($this->_lock_mode);
        $row =& $rowset->iterate();
        $rowset->destroy();

        if ( ! is_object($row)) {
            $f =& $this->_row2object($row);

            return $f ? $f->getOID() : false;
        }

        return $row ? $row->getOID() : false;
    }
}


