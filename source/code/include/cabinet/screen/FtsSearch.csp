<?php

namespace grn\cabinet\screen;

use grn\fts\filter\LanguageFilter;
use grn\fts\SearchQueryInterface;
use grn\fts\SearchTarget;
use grn\fts\SortOrder;
use grn\fts\Application as FtsApplication;

require_once('grn/smarty.csp');
require_once('cabinet/controller.csp');

class FtsSearch
{
    const TEMPLATE_PATH = 'cabinet/search_fts.tpl';

    /** @var string */
    private $text = '';
    /** @var int */
    private $folderId = null;
    /** @var \grn\fts\SortOrder */
    private $sortOrder;
    /** @var string */
    private $scopeItem = '';
    /** @var string */
    private $fileType = '';
    /** @var string */
    private $modifier = '';
    /** @var string */
    private $dateLower = SearchQueryInterface::DATE_NOT_SPECIFIED;
    /** @var string */
    private $dateUpper = SearchQueryInterface::DATE_NOT_SPECIFIED;
    /** @var string */
    private $language = LanguageFilter::ALL;
    /** @var string */
    private $target = SearchTarget::CURRENT;

    /**
     * @param array $input
     */
    public function __construct(array $input)
    {
        $this->sortOrder = new SortOrder;
        $this->parseInput($input);
    }

    public function fetch()
    {
        $smarty = new \GRN_Smarty();
        $loginUser = cb_get_login_user();
        assert('$loginUser');
        $smarty->assign('text', $this->getText());
        $smarty->assign('sortByDatetime',
            $this->getSortOrder() === SortOrder::DATETIME);
        $smarty->assign('scopeItem', $this->getScopeItem());
        $smarty->assign('fileType', $this->getFileType());
        $smarty->assign('modifier', $this->getModifier());
        $smarty->assign('loginUserId', $loginUser->getOID());
        $smarty->assign('language', $this->getLanguage());
        $smarty->assign('is_elasticsearch',
            FtsApplication::getFtsEngine()->isElasticsearch());

        $folderId = $this->getFolderId();
        require_once('cabinet/folder.csp');
        $manager = \GRN_Cabinet_FolderManager::getInstance();
        if (is_null($folderId)) {
            $folder = $manager->getRootFolder($loginUser);
            $folderId = $folder->getOID();
            $smarty->assign('folderId', $folderId);
        } else {
            $folder = $manager->getFolder($loginUser, $folderId,
                GRN_CABINET_ACCESS_R, false);
            if ($folder) {
                $smarty->assign('folderId', $folderId);
            } else {
                /* invalid folder */
                cb_throw_error(E_GRN_CABINET_FOLDER_NOT_FOUND);
            }
        }

        $target = $this->getTarget();
        $smarty->assign('target', $target);

        $dateLower = $this->getDateLower();
        if ($dateLower !== SearchQueryInterface::DATE_NOT_SPECIFIED) {
            $smarty->assign('dateLower', $dateLower);
        }
        $dateUpper = $this->getDateUpper();
        if ($dateUpper !== SearchQueryInterface::DATE_NOT_SPECIFIED) {
            $smarty->assign('dateUpper', $dateUpper);
        }

        $util = new \GRN_Cabinet_ControllerUtil();
        $util->prepareMakeSitePosition($smarty, $folderId);

        $smarty->assign('runBackgroundSearch',
            FtsApplication::isBackgroundSearchModeEnabled());

        return $smarty->fetch(self::TEMPLATE_PATH);
    }

    /**
     * @param array $input
     */
    private function parseInput(array $input)
    {
        if (isset($input['text'])) {
            $this->setText($input['text']);
        }
        if (isset($input['hid'])) {
            $this->setFolderId($input['hid']);
        }
        if (isset($input['scopeItem'])) {
            $this->setScopeItem($input['scopeItem']);
        }
        if (isset($input['sortOrder'])) {
            $this->setSortOrder($input['sortOrder']);
        }
        if (isset($input['fileType'])) {
            $this->setFileType($input['fileType']);
        }
        if (isset($input['modifier'])) {
            $this->setModifier($input['modifier']);
        }
        if (isset($input['dateLower'])) {
            $this->setDateLower($input['dateLower']);
        }
        if (isset($input['dateUpper'])) {
            $this->setDateUpper($input['dateUpper']);
        }
        if (isset($input['language'])) {
            $this->setLanguage($input['language']);
        }
        if (isset($input['target'])) {
            $this->setTarget($input['target']);
        }
    }

    /**
     * @param string $text
     */
    public function setText($text)
    {
        $this->text = $text;
    }

    /**
     * @return string
     */
    public function getText()
    {
        return $this->text;
    }

    /**
     * @param int $folderId
     */
    public function setFolderId($folderId)
    {
        $this->folderId = $folderId;
    }

    /**
     * @return int
     */
    public function getFolderId()
    {
        return $this->folderId;
    }

    /**
     * @param string $sortOrder
     */
    public function setSortOrder($sortOrder)
    {
        $this->sortOrder->setSortType($sortOrder);
    }

    /**
     * @return string
     */
    public function getSortOrder()
    {
        return $this->sortOrder->getSortType();
    }

    /**
     * @param string $scopeItem
     */
    public function setScopeItem($scopeItem)
    {
        $this->scopeItem = $scopeItem;
    }

    /**
     * @return string
     */
    public function getScopeItem()
    {
        return $this->scopeItem;
    }

    /**
     * @param string $fileType
     */
    public function setFileType($fileType)
    {
        $this->fileType = $fileType;
    }

    /**
     * @return string
     */
    public function getFileType()
    {
        return $this->fileType;
    }

    /**
     * @param string $dateLower
     */
    public function setDateLower($dateLower)
    {
        $this->dateLower = $dateLower;
    }

    /**
     * @return string
     */
    public function getDateLower()
    {
        return $this->dateLower;
    }

    /**
     * @param string $dateUpper
     */
    public function setDateUpper($dateUpper)
    {
        $this->dateUpper = $dateUpper;
    }

    /**
     * @return string
     */
    public function getDateUpper()
    {
        return $this->dateUpper;
    }

    /**
     * @param string $modifier
     */
    public function setModifier($modifier)
    {
        $this->modifier = $modifier;
    }

    /**
     * @return string
     */
    public function getModifier()
    {
        return $this->modifier;
    }

    /**
     * @param string $language
     */
    public function setLanguage($language)
    {
        $this->language = $language;
    }

    /**
     * @return string
     */
    public function getLanguage()
    {
        return $this->language;
    }

    /**
     * @return string
     */
    public function getTarget()
    {
        return $this->target;
    }

    /**
     * @param string $target
     */
    public function setTarget($target)
    {
        $this->target = $target;
    }
}
