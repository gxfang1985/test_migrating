<?php

/**
 * ファイル管理、既読情報
 *
 * @author  Tanaka, Yoshiaki        2005/02
 * @package grn.cabinet
 */


/**
 * @package grn.cabinet
 */
class GRN_Cabinet_FileReadStatus
{
    /** @var self */
    private static $_instance = null;

    /**
     * @return GRN_Cabinet_FileReadStatus
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * @access private
     */
    var $_table = null;
    /**
     * @access private
     */
    var $_cache = [];


    function __construct()
    {
        $app_locator = GRN_ApplicationLocator::instance();
        $tm = $app_locator->getTableManager('cabinet');

        $this->_table = $tm->getTableInfo('grn_cabinet_readstatus');
    }


    function get($user, $file)
    {
        if ( ! $user || ! $file) {
            assert('FALSE');
            $ret = false;

            return $ret;
        }

        $uid = $user->getOID();
        $fid = $file->getOID();

        if (array_key_exists($uid, $this->_cache)) {
            if (array_key_exists($fid, $this->_cache[$uid])) {
                return $this->_cache[$uid][$fid];
            }
        }

        $rowset = new CB_RowSet($this->_table);

        // ユーザーの削除フラグをチェック
        $app_locator = GRN_ApplicationLocator::instance();
        $tm = $app_locator->getTableManager('cabinet');

        $user_table = $tm->getTableInfo('CB_User');
        $table_name = CB_DATABASE_TABLE_PREFIX . $this->_table->getTableName();
        $rowset->addJoin($user_table,
            $table_name . '.col_user = u._id AND u.col_deleted IS NULL',
            CB_DATABASE_INNER_JOIN, 'u');

        $rowset->addCondition('col_user = ' . $uid . ' AND col_file = ' . $fid);
        $rowset->limit(0, 1);
        $row = $rowset->iterate();
        $rowset->destroy();

        if ( ! array_key_exists($uid, $this->_cache)) {
            $this->_cache[$uid] = [];
        }

        $this->_cache[$uid][$fid] =& $row;

        return $row;
    }

    function create($user, $file, $ts)
    {
        if ( ! $user || ! $file || ! $ts) {
            assert('FALSE');
            $ret = null;

            return $ret;
        }

        $row = $this->_table->newRow();
        $row->set('user', $user);
        $row->set('file', $file);

        $row->set('last_timestamp', $ts);

        $this->cache($user, $file, $row);

        return $row;
    }

    function cache(& $user, & $file, & $row)
    {
        if ( ! $user || ! $file) {
            return;
        }

        $uid = $user->getOID();

        if ( ! array_key_exists($uid, $this->_cache)) {
            $this->_cache[$uid] = [];
        }

        $this->_cache[$uid][$file->getOID()] = $row;
    }
}



