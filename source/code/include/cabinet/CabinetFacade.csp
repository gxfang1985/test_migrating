<?php

require_once('grn/application.csp');
require_once('grn/CBException.csp');
require_once('grn/DAOFactory.csp');
require_once('cabinet/error_code.csp');
require_once('cabinet/inspection.csp');

define('CB_CABINET_FACADE_DB_STATUS_INSERT', 1);
define('CB_CABINET_FACADE_DB_STATUS_UPDATE', 2);
define('CB_CABINET_FACADE_DB_STATUS_DELETE', 3);

class CabinetFacade
{
    private $_db = null;
    private $_isCalcFoundRows = false;

    public function __construct()
    {
        $app_locator = GRN_ApplicationLocator::instance();
        $this->_db = $app_locator->getConnection('cabinet');
    }

    public function setCalcFoundRows($value)
    {
        $this->_isCalcFoundRows = $value;
    }

    public function isCalcFoundRows()
    {
        return $this->_isCalcFoundRows;
    }

    /** ***************************************************** */
    /** -----               CalcFoundRows           --------- */
    /** ***************************************************** */
    public function getCalcFoundRows($inDataObj)
    {
        $result = 0;

        if ($this->isCalcFoundRows()) {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnCabinetFolderDAO();

            $result = $dao->getFoundRows($inDataObj);
        }

        return $result;
    }

    /** ***************************************************** */
    /** -----           GrnCabinetFolder       --------- */
    /** ***************************************************** */
    /**
     * @param $inDataObj
     * @param $inFolderKey
     *
     * @return bool|GrnCabinetFolder
     */
    public function referCabinetFolderByForeignKey($inDataObj, $inFolderKey)
    {
        $inDataObj['db'] = $this->_db;
        $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
        $dao = $daoFctry->getGrnCabinetFolderDAO();

        $result = $dao->selectByForeignKey($inDataObj, $inFolderKey);

        return $result;
    }

    /**
     * @param $inDataObj
     * @param $inId
     *
     * @return bool|GrnCabinetFolder
     */
    public function referCabinetFolderById($inDataObj, $inId)
    {
        $inDataObj['db'] = $this->_db;
        $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
        $dao = $daoFctry->getGrnCabinetFolderDAO();

        $inLanguage = (array_key_exists('language', $inDataObj))
            ? $inDataObj['language'] : null;
        if (is_null($inLanguage)) {
            $result = $dao->selectDefaultById($inDataObj, $inId);
        } else {
            $result = $dao->selectLocalById($inDataObj, $inId);
        }

        return $result;
    }

    /**
     * @param array $inDataObj
     *
     * @return GrnCabinetFolder[]
     */
    public function getCabinetFolderList($inDataObj)
    {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnCabinetFolderDAO();
            $inParentId = (array_key_exists('parentId', $inDataObj))
                ? $inDataObj['parentId'] : null;

            if (is_null($inParentId)) {
                $resultList = $dao->getCabinetFolderList($inDataObj);
            } else {
                $resultList = $dao->getCabinetFolderListByParentId($inDataObj,
                    $inParentId);
            }

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param $inDataObj
     *
     * @return array|GrnCabinetFolder[]
     */
    public function getCabinetFolderListWithNonLocal($inDataObj)
    {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnCabinetFolderDAO();
            $inParentId = (array_key_exists('parentId', $inDataObj))
                ? $inDataObj['parentId'] : null;

            if (is_null($inParentId)) {
                $resultList
                    = $dao->getCabinetFolderListWithNonLocal($inDataObj);
            } else {
                $resultList
                    = $dao->getCabinetFolderListByParentIdWithNonLocal($inDataObj,
                    $inParentId);
            }

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param array $inDataObj
     * @param array $inFolderNameArray
     *
     * @return GrnCabinetFolder[]
     */
    public function getCabinetFolderListByNames($inDataObj, $inFolderNameArray)
    {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnCabinetFolderDAO();

            $resultList = $dao->getCabinetFolderListByNames($inDataObj,
                $inFolderNameArray);

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param array $inDataObj
     * @param array $inFolderArray
     *
     * @return GrnCabinetFolder[]
     */
    public function getCabinetFolderListByIds($inDataObj, $inFolderArray)
    {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnCabinetFolderDAO();

            $resultList = $dao->getCabinetFolderListByIds($inDataObj,
                $inFolderArray);

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param $inDataObj
     * @param $inParentIdArray
     *
     * @return GrnCabinetFolder[]
     */
    public function getCabinetFolderListByParentIds(
        $inDataObj,
        $inParentIdArray
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnCabinetFolderDAO();

            $resultList = $dao->getCabinetFolderListByParentIds($inDataObj,
                $inParentIdArray);

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param $inDataObj
     * @param $inFolderArray
     * @param $inFolderNameArray
     *
     * @return GrnCabinetFolder[]
     */
    public function getCabinetFolderListByIds_Names(
        $inDataObj,
        $inFolderArray,
        $inFolderNameArray
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $inDataObj['isCalcFoundRows'] = $this->isCalcFoundRows();
            $daoFctry
                = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnCabinetFolderDAO();

            $resultList = $dao->getCabinetFolderListByIds_Names($inDataObj,
                $inFolderArray, $inFolderNameArray);

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param $inDataObj
     * @param $inParentId
     *
     * @return int
     */
    public function getCountCabinetFolderByParentId($inDataObj, $inParentId)
    {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnCabinetFolderDAO();

            $resultCount = $dao->getCountCabinetFolderByParentId($inDataObj,
                $inParentId);

            return $resultCount;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param $inDataObj
     * @param $inFolderId
     *
     * @return array|bool|null
     */
    public function getCabinetFolderOfFolderId($inDataObj, $inFolderId)
    {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnCabinetFolderDAO();

            $result = $dao->getCabinetFolderOfFolderId($inDataObj, $inFolderId);

            return $result;
        } catch (CBException $cbe) {

        }
    }

    /** ***************************************************** */
    /** -----        GrnCabinetFolderLocal          --------- */
    /** ***************************************************** */
    /**
     * @param                       $inDataObj
     * @param GrnCabinetFolderLocal $inCabinetFolderLocalObj
     *
     * @return bool|int
     */
    public function insertCabinetFolderLocal(
        $inDataObj,
        $inCabinetFolderLocalObj
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnCabinetFolderLocalDAO();
            $inspection
                = GRN_Cabinet_Folder_Local_Inspection::getInstance();

            $insertCount = $dao->insert($inDataObj, $inCabinetFolderLocalObj);

            if (($insertCount > 0) && ($inspection->isEnabled())) {
                $messageType = 'folder_local_add';
                $message_args = [
                    'hid'           => $inCabinetFolderLocalObj->getParentId(),
                    'language_code' => $inCabinetFolderLocalObj->getLanguageCode(),
                    'folder_name'   => $inCabinetFolderLocalObj->getName(),
                ];

                $inspection->record($messageType, $message_args);
            }

            return $insertCount;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param                       $inDataObj
     * @param GrnCabinetFolderLocal $inCabinetFolderLocalObj
     *
     * @return int
     */
    public function updateCabinetFolderLocal(
        $inDataObj,
        $inCabinetFolderLocalObj
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnCabinetFolderLocalDAO();

            $inMessageTypeAdd = (array_key_exists('messageTypeAdd',
                $inDataObj)) ? $inDataObj['messageTypeAdd']
                : 'folder_local_add';
            $inMessageTypeModify = (array_key_exists('messageTypeModify',
                $inDataObj)) ? $inDataObj['messageTypeModify']
                : 'folder_local_modify';
            $inspection
                = GRN_Cabinet_Folder_Local_Inspection::getInstance();

            $beforCabinetFolderLocal
                = $dao->selectByFolderId_LanguageCode($inDataObj,
                $inCabinetFolderLocalObj);
            if ($beforCabinetFolderLocal === false) {
                $insertCount = $dao->insert($inDataObj,
                    $inCabinetFolderLocalObj);

                if (($insertCount > 0) && ($inspection->isEnabled())) {
                    $message_args = [
                        'hid'           => $inCabinetFolderLocalObj->getParentId(),
                        'language_code' => $inCabinetFolderLocalObj->getLanguageCode(),
                        'folder_name'   => $inCabinetFolderLocalObj->getName(),
                    ];

                    $inspection->record($inMessageTypeAdd, $message_args);
                }

                return CB_CABINET_FACADE_DB_STATUS_INSERT;
            } else {
                $updateCount = $dao->update($inDataObj,
                    $inCabinetFolderLocalObj);

                //MySQLは変化が無い場合UPDATE結果が0件になる。しかし、現在のGaroonのログ仕様は変化が無くても変更ログを出力しているので、更新件数が0でもログ出力している
                if (($updateCount >= 0) && ($inspection->isEnabled())) {
                    $message_args = [
                        'hid'              => $inCabinetFolderLocalObj->getParentId(),
                        'language_code'    => $inCabinetFolderLocalObj->getLanguageCode(),
                        'prev_folder_name' => $beforCabinetFolderLocal->getName(),
                        'next_folder_name' => $inCabinetFolderLocalObj->getName(),
                    ];

                    $inspection->record($inMessageTypeModify, $message_args);
                }

                return CB_CABINET_FACADE_DB_STATUS_UPDATE;
            }
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param                       $inDataObj
     * @param GrnCabinetFolderLocal $inCabinetFolderLocalObj
     *
     * @return bool|int
     */
    public function deleteCabinetFolderLocal(
        $inDataObj,
        $inCabinetFolderLocalObj
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnCabinetFolderLocalDAO();

            $inMessageTypeDelete = (array_key_exists('messageTypeDelete',
                $inDataObj)) ? $inDataObj['messageTypeDelete']
                : 'folder_local_delete';
            $inspection
                = GRN_Cabinet_Folder_Local_Inspection::getInstance();

            $deleteCount = 0;
            $beforCabinetFolderLocal
                = $dao->selectByFolderId_LanguageCode($inDataObj,
                $inCabinetFolderLocalObj);
            if ($beforCabinetFolderLocal !== false) {
                $deleteCount = $dao->deleteByParentId_LanguageCode($inDataObj,
                    $inCabinetFolderLocalObj);
                if (($deleteCount > 0) && ($inspection->isEnabled())) {
                    $message_args = [
                        'hid'           => $inCabinetFolderLocalObj->getParentId(),
                        'language_code' => $inCabinetFolderLocalObj->getLanguageCode(),
                        'folder_name'   => $beforCabinetFolderLocal->getName(),
                    ];

                    $inspection->record($inMessageTypeDelete, $message_args);
                }
            }

            return $deleteCount;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param array  $inDataObj
     * @param string $inFolderId
     *
     * @return GrnCabinetFolderLocal[]
     */
    public function getCabinetFolderLocalListByFolderId($inDataObj, $inFolderId)
    {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnCabinetFolderLocalDAO();
            $resultList
                = $dao->getCabinetFolderLocalListByFolderId($inDataObj,
                $inFolderId);

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param array      $inDataObj
     * @param array|null $inExportLanguageCodeArray
     *
     * @return GrnCabinetFolderLocal[]
     */
    public function getCabinetFolderLocalListByLanguageCodes(
        $inDataObj,
        $inExportLanguageCodeArray = null
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnCabinetFolderLocalDAO();


            if (is_null($inExportLanguageCodeArray)) {
                $resultList = $dao->getCabinetFolderLocalList($inDataObj);
            } else {
                $resultList
                    = $dao->getCabinetFolderLocalListByLanguageCodes($inDataObj,
                    $inExportLanguageCodeArray);
            }

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /** ***************************************************** */
    /** -----              GrnCabinetFile           --------- */
    /** ***************************************************** */
    /**
     * @param $inDataObj
     * @param $inFolderArray
     * @param $inConditionBean
     *
     * @return array
     */
    public function getCabinetFileListByIds_Condition(
        $inDataObj,
        $inFolderArray,
        $inConditionBean
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $inDataObj['isCalcFoundRows'] = $this->isCalcFoundRows();
            $daoFctry
                = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnCabinetFileDAO();

            $resultList = $dao->getCabinetFileListByIds_Condition($inDataObj,
                $inFolderArray, $inConditionBean);

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /** ***************************************************** */
    /** -----              GrnCabinetDisplayOrder   --------- */
    /** ***************************************************** */
    /**
     * @param array  $inDataObj
     * @param string $inFolderId
     *
     * @return GrnCabinetDisplayOrder
     */
    public function getCabinetDisplayOrderByFolderId($inDataObj, $inFolderId)
    {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnCabinetDisplayOrderDAO();
            $result
                = $dao->getCabinetDisplayOrderByFolderId($inDataObj,
                $inFolderId);

            return $result;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param                        $inDataObj
     * @param GrnCabinetDisplayOrder $inCabinetDisplayOrderObj
     *
     * @return int
     */
    public function addCabinetDisplayOrder(
        $inDataObj,
        $inCabinetDisplayOrderObj
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnCabinetDisplayOrderDAO();

            $insertCount = $dao->insert($inDataObj, $inCabinetDisplayOrderObj);

            return CB_CABINET_FACADE_DB_STATUS_INSERT;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param                        $inDataObj
     * @param GrnCabinetDisplayOrder $inCabinetDisplayOrderObj
     *
     * @return int
     */
    public function updateCabinetDisplayOrder(
        $inDataObj,
        $inCabinetDisplayOrderObj
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnCabinetDisplayOrderDAO();

            $updateCount = $dao->update($inDataObj, $inCabinetDisplayOrderObj);

            return CB_CABINET_FACADE_DB_STATUS_UPDATE;
        } catch (CBException $cbe) {

        }
    }
}

