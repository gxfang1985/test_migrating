<?php

/**
 * @author  Tanaka, Yoshiaki        2005/01
 * @package grn.cabinet
 */

require_once('cabinet/table.csp');
require_once('grn/application.csp');

define('GRN_CABINET_MAX_SUBSCRIBE_USERS', 1);


/**
 * @package grn.cabinet
 */
class GRN_Cabinet_SubscribeFolders
{
    private static $_instance = null;

    /**
     * @static
     * @return GRN_Cabinet_SubscribeFolders
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * @access private
     */
    var $_cache = [];


    function __construct()
    {
    }


    /**
     * @access private
     */
    function &get(& $user)
    {
        if ( ! $user) {
            assert('FALSE');
            $ret = [];

            return $ret;
        }

        $uid = $user->getOID();

        if (array_key_exists($uid, $this->_cache)) {
            $accessible = $this->_cache[$uid];

            return $accessible;
        }

        $app_locator = GRN_ApplicationLocator::instance();
        $db = $app_locator->getConnection('cabinet');

        $query
            = "SELECT s.col_folder FROM tab_grn_cabinet_subscribefolder AS s INNER JOIN tab_cb_user AS u ON s.col_user = u._id AND u.col_deleted IS NULL WHERE s.col_user = $uid;";
        $result = $db->query($query);

        $folder_ids = [];
        if (cb_is_db_result($result)) {
            $n = $db->num_rows($result);
            for ($i = 0; $i < $n; $i++) {
                $row = $db->fetch_row($result);
                $folder_ids[$row[0]] = 1;
            }
            $db->free_result($result);
        }

        require_once('cabinet/access.csp');
        $acc = GRN_Cabinet_AccessManager::getInstance();

        $accessible = $acc->evaluateFolders($user, $folder_ids,
            GRN_CABINET_ACCESS_R);

        if (count($this->_cache) >= GRN_CABINET_MAX_SUBSCRIBE_USERS) {
            $cache_keys = array_keys($this->_cache);
            $idx = array_shift($cache_keys);
            unset($this->_cache[$idx]);
        }

        $this->_cache[$uid] = $accessible;

        return $accessible;
    }

    function exists(& $user, & $folder)
    {
        if ( ! $user || ! $folder) {
            assert('FALSE');

            return false;
        }

        $cache = $this->get($user);

        if (is_object($folder)) {
            return array_key_exists($folder->getOID(), $cache);
        }

        return array_key_exists($folder, $cache);
    }


    function set(& $user, & $folder, $onoff)
    {
        if ( ! $user || ! $folder) {
            assert('FALSE');

            return false;
        }

        $table =& cb_class2table('GRN_Cabinet_SubscribeFolder');
        $rowset = new CB_RowSet($table);

        // ユーザーの削除フラグチェック
        $app_locator = GRN_ApplicationLocator::instance();
        $tm = &$app_locator->getTableManager('cabinet');
        $user_table = &$tm->getTableInfo('CB_User');
        $table_name = CB_DATABASE_TABLE_PREFIX . $table->getTableName();

        $on = $table_name . '.col_user= u._id AND u.col_deleted IS NULL';
        $rowset->addJoin($user_table, $on, CB_DATABASE_INNER_JOIN, 'u');

        $rowset->addCondition('col_user = ' . $user->getOID()
                              . ' AND col_folder = ' . $folder->getOID());
        $rowset->limit(0, 1);
        $row =& $rowset->iterate();
        $rowset->destroy();

        $uid = $user->getOID();
        $cid = $folder->getOID();

        if ($row) {
            if ( ! $onoff) {
                $row->delete();

                if (array_key_exists($uid, $this->_cache)) {
                    if (array_key_exists($cid, $this->_cache[$uid])) {
                        unset($this->_cache[$uid][$cid]);
                    }
                }
            }
        } else {
            if ($onoff) {
                $row =& $table->newRow();
                $row->set('user', $user);

                if (is_a($folder, 'cb_persistentbase')) {
                    $row->set('folder', $folder);
                } else {
                    $row->set('folder', $folder->_getRow());
                }

                //$row->registerNow();

                if (array_key_exists($uid, $this->_cache)) {
                    $this->_cache[$uid][$cid] = 1;
                }
            }
        }

        return true;
    }
}


