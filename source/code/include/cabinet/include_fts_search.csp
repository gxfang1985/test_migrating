<?php

/**
 * フォルダ全文検索
 *
 * @author  panfeng     2015/10
 * @version 1.0
 * @package grn.cabinet
 */
require_once('grn/application.csp');
require_once('fw/i18n.csp');
require_once('cabinet/CabinetFacade.csp');
require_once('cabinet/functions.csp');

class GRN_Cabinet_FtsSearchBase
{
    /**
     * @var CB_TableInfo|GRN_TableInfo|null
     */
    private $_tab_folder = null;
    /**
     * @var int
     */
    private $_count = 0;
    /**
     * @var GrnCabinetFolderCondition $_cabinetConditionBean
     */
    private $_cabinetConditionBean = null;

    /**
     * @param GrnCabinetFolderCondition $inConditionBean
     */
    protected function __construct($inConditionBean)
    {
        $this->setCabinetConditionBean($inConditionBean);

        $app_locator = GRN_ApplicationLocator::instance();
        $tm = $app_locator->getTableManager('cabinet');

        $this->_tab_folder = $tm->getTableInfo('GRN_Cabinet_FolderEntity');
    }

    /**
     * @return CB_TableInfo|GRN_TableInfo|null
     */
    protected function getFolderTableInfo()
    {
        return $this->_tab_folder;
    }

    /**
     * @param  GrnCabinetFolderCondition $value
     */
    private function setCabinetConditionBean($value)
    {
        $this->_cabinetConditionBean = $value;
    }

    /**
     * @return GrnCabinetFolderCondition
     */
    protected function getCabinetConditionBean()
    {
        return $this->_cabinetConditionBean;
    }

    // GrnCabinetFolderCondition accessor adapter   start
    protected function getUser()
    {
        return $this->getCabinetConditionBean()->getUser();
    }

    protected function getFolderId()
    {
        return $this->getCabinetConditionBean()->getFolderId();
    }

    protected function getSearchWords()
    {
        return $this->getCabinetConditionBean()->getSearchWords();
    }

    protected function isSearchAll()
    {
        return $this->getCabinetConditionBean()->isSearchAll();
    }

    protected function getOffset()
    {
        return $this->getCabinetConditionBean()->getOffset();
    }

    protected function getLimit()
    {
        return $this->getCabinetConditionBean()->getLimit();
    }
    // GrnCabinetFolderCondition accessor adapter   end

    /**
     * @param int $value
     */
    protected function setCount($value)
    {
        $this->_count = $value;
    }

    /**
     * @return int
     */
    public function count()
    {
        return $this->_count;
    }

    /**
     * 検索対象フォルダーを取得
     *
     * @return array array( [ObjectID] => 1 )
     * @access private
     */
    protected function _getSearchTargetFolderIds()
    {
        $folderIds = [];

        $i18n = CB_I18N::getInstance();
        $table_info = $this->getFolderTableInfo();

        $dao = new CabinetFacade();
        $dataObj = [];
        $dataObj['lock'] = $table_info->_lock;
        $dataObj['language'] = $i18n->getCurrentLanguage();

        $start_folder_id = $this->isSearchAll() ? GRN_CABINET_ROOT_FOLDER_ID
            : $this->getFolderId();
        $folder = $dao->referCabinetFolderById($dataObj,
            $start_folder_id);
        if ($folder === false) {
            return $folderIds;
        }

        $folderIds[$folder->getId()] = 1;
        $this->_getSubFoldersRecursive($folderIds, $folderIds);

        require_once('cabinet/access.csp');
        $am = GRN_Cabinet_AccessManager::getInstance();
        $user = $this->getUser();
        $folderIds = $am->evaluateFolders($user, $folderIds,
            GRN_CABINET_ACCESS_R);

        return array_keys($folderIds);
    }

    /**
     * 再帰で親フォルダから全ての子フォルダを取得
     *
     * @param $inFolderIds
     * @param $outFolderIds
     */
    private function _getSubFoldersRecursive($inFolderIds, & $outFolderIds)
    {
        $childFolderIds = $this->_getSubFolders($inFolderIds, $outFolderIds);

        if (count($childFolderIds) < 1) {
            return;
        }

        $this->_getSubFoldersRecursive($childFolderIds, $outFolderIds);
    }

    /**
     * 親フォルダIDより子フォルダを取得
     *
     * @param $inFolderIds
     * @param $outFolderIds
     *
     * @return array
     */
    private function _getSubFolders($inFolderIds, & $outFolderIds)
    {
        if ( ! is_array($inFolderIds) || count($inFolderIds) === 0) {
            return [];
        }

        $i18n = CB_I18N::getInstance();
        $table_info = $this->getFolderTableInfo();

        $dao = new CabinetFacade();
        $dataObj = [];
        $dataObj['lock'] = $table_info->_lock;
        $dataObj['language'] = $i18n->getCurrentLanguage();
        $folderIdArray = array_keys($inFolderIds);

        $folderList = $dao->getCabinetFolderListByParentIds($dataObj,
            $folderIdArray);

        $childFolderIds = [];
        foreach ($folderList as $folder) {
            $childFolderIds[$folder->getId()] = 1;
            $outFolderIds[$folder->getId()] = 1;
        }

        return $childFolderIds;
    }
}

class GRN_Cabinet_FolderFtsSearch extends GRN_Cabinet_FtsSearchBase
{

    public function __construct($inConditionBean)
    {
        parent::__construct($inConditionBean);
    }

    /**
     * Like検索でフォルダ全文検索を行う
     *
     * @return array
     */
    public function searchExecute()
    {
        $i18n = CB_I18N::getInstance();
        $table_info = $this->getFolderTableInfo();

        $dataObj = [];
        $dataObj['lock'] = $table_info->_lock;
        $dataObj['language'] = $i18n->getCurrentLanguage();
        $dataObj['offset'] = $this->getOffset();
        $dataObj['limit'] = $this->getLimit();

        //Create Cabinet Condition
        $folderNameArray = $this->getSearchWords();
        $folderIdArray = $this->_getSearchTargetFolderIds();

        //現時点では検索対象項目は名称固定仕様となっている
        $dao = new CabinetFacade();
        $folderList = $dao->getCabinetFolderListByIds_Names($dataObj,
            $folderIdArray, $folderNameArray);

        $app_path = cb_get_app_path();
        $result_docs = [];
        foreach ($folderList as $folder) {
            $current_folder = $table_info->getRow($folder->getId(),
                $folder->convertArray());

            $doc = [];
            $doc['folder_id'] = $folder->getId();
            $doc['folder_name'] = htmlspecialchars($folder->getName());
            $doc['folder_icon'] = $app_path
                                  . "/grn/image/cybozu/image-app-search/category16.png";
            $doc['folder_link'] = self::getFolderLinkUrl($folder->getId());;

            $parent_folder = $current_folder->get('parent');
            if ($parent_folder) {
                $parent_folder_id = $parent_folder->getOID();
                $doc['parent_folder_path']
                    = htmlspecialchars(grn_cabinet_get_folder_path_string($parent_folder));
                $doc['parent_folder_link']
                    = self::getFolderLinkUrl($parent_folder_id);
                $doc['app_icon'] = $app_path . "/grn/image/cybozu/file20.gif";
            } else {
                $doc['parent_folder_path'] = '';
                $doc['parent_folder_link'] = '';
                $doc['app_icon'] = '';
            }

            $result_docs[] = $doc;
        }

        return $result_docs;
    }

    private function getFolderLinkUrl($folder_id)
    {
        $param_key = $folder_id == GRN_CABINET_ROOT_FOLDER_ID ? 'top' : 'hid';

        return cb_pageurl('cabinet/index', [$param_key => $folder_id]);
    }
}
