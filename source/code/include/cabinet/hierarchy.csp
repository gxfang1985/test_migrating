<?php

/**
 * @author  Tanaka, Yoshiaki
 * @date    2005/03/12
 * @package grn.cabinet
 */

require_once('cabinet/folder.csp');


/**
 * ファイル管理フォルダのAPIオブジェクトを生成
 * アクセス権のチェックはないのでロジック内部でのみの利用とすること
 *
 * @package grn.cabinet
 */
class GRN_Cabinet_Hierarchy
{
    /** @var GRN_Cabinet_Hierarchy */
    private static $_instance = null;

    /**
     * @return GRN_Cabinet_Hierarchy
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * @access private
     */
    var $_mgr_folder = null;
    var $_mgr_access = null;
    var $_mgr_privilege = null;


    function __construct()
    {
        require_once('cabinet/folder.csp');
        $this->_mgr_folder = GRN_Cabinet_FolderManager::getInstance();
        require_once('cabinet/access.csp');
        $this->_mgr_access = GRN_Cabinet_AccessManager::getInstance();
        require_once('cabinet/privilege.csp');
        $this->_mgr_privilege = GRN_Cabinet_PrivilegeManager::getInstance();
    }


    /**
     * @access private
     */
    private $_subscription = false;

    function setSubscriptionFolders($view_subscription)
    {
        $this->_subscription = $view_subscription;
    }

    /**
     * @access private
     */
    private $_notification = false;

    function setNotificationFolders($view_notification)
    {
        $this->_notification = $view_notification;
    }

    /**
     * @access private
     */
    private $_checkbox = false;
    private $_system = false;

    function setCheckBoxCategories($view_checkbox, $system)
    {
        $this->_checkbox = $view_checkbox;
        $this->_system = $system;
    }

    /**
     * @access private
     */
    var $_path_string = false;

    function setEnablePathString($enable)
    {
        $this->_path_string = $enable;
    }

    function getEnablePathString()
    {
        return $this->_path_string;
    }

    /**
     * @access private
     */
    var $_delimiter = null;

    function setDelimiter($delimiter)
    {
        $this->_delimiter = $delimiter;
    }

    function getDelimiter()
    {
        return $this->_delimiter;
    }

    /**
     * @access private
     */
    var $_privileges = null;

    function setPrivileges($privileges)
    {
        $this->_privileges = $privileges;
    }

    function getPrivileges()
    {
        return $this->_privileges;
    }

    /**
     * @access private
     */
    var $_access_mode = GRN_CABINET_ACCESS_R;

    function setAccessMode($mode)
    {
        $this->_access_mode = $mode;
    }

    function getAccessMode()
    {
        return $this->_access_mode;
    }

    function addNotificationInfo(& $user, & $info)
    {
        if ( ! is_array($info) || ! array_key_exists('hid', $info)) {
            assert('FALSE');
        }

        // 購読フォルダを取得
        if ($this->_subscription && ! is_array($this->_subscription)) {
            require_once('cabinet/notification.csp');
            $nm = GRN_Cabinet_NotificationManager::getInstance();
            $this->_subscription = $nm->getSubscribedFolderIds($user);
        }
        // 通知フォルダを取得
        $notification = null;
        if ($this->_notification) {
            if (is_array($this->_notification)) {
                $notification = $this->_notification;
            } else {
                require_once('cabinet/notification.csp');
                $nf = GRN_Cabinet_NotifyFolder::getInstance();
                $notification = $nf->get($user, [$info['hid'] => 1]);
            }
        }

        if (is_array($this->_subscription)) {
            if (array_key_exists($info['hid'], $this->_subscription)) {
                $info['subscribed'] = true;
            } else {
                $info['subscribed'] = false;
            }
        }
        if (is_array($notification)) {
            if (array_key_exists($info['hid'], $notification)) {
                $info['notified'] = true;
            } else {
                $info['notified'] = false;
            }
        }
    }

    function addCheckBoxInfo(& $user, & $info)
    {
        if ($this->_checkbox) {
            // システム設定画面でない場合、運用管理権限があるかどうかチェックする
            $info['checkbox'] = $this->_system
                ? true
                : $this->_mgr_privilege->privileged($user, $info['hid'],
                    ['operation']);
        }
    }

    /**
     * @access private
     */
    function createNode(& $user, & $folder)
    {
        $data = [
            'nid'         => $folder->getOID(), // UI部品で利用しているID
            'hid'         => $folder->getOID(),
            'name'        => $folder->get('name'),
            'foreign_key' => $folder->get('foreign_key'),
            'child_count' => $folder->getNumFolders($user, $this->_access_mode),
        ];

        $this->addNotificationInfo($user, $data);
        $this->addCheckBoxInfo($user, $data);

        return $data;
    }

    /**
     * ルートまで親をたどる
     *
     * @access private
     */
    function _buildAncestors(& $user, $hid, & $ancestors)
    {
        if ( ! $hid) {
            return;
        }

        if (is_array($this->_privileges)) {
            if ( ! $this->_mgr_privilege->privileged($user, $hid,
                $this->_privileges)
            ) {
                if ($this->_access_mode == GRN_CABINET_ACCESS_R) {
                    return;
                }

                if ( ! $this->_mgr_access->access($user, $hid,
                    $this->_access_mode)
                ) {
                    return;
                }
            }
        }

        $info = $this->_mgr_folder->getFolderInfo($user, $hid,
            GRN_CABINET_ACCESS_R, true);
        $this->addNotificationInfo($user, $info[$hid]);
        $this->addCheckBoxInfo($user, $info[$hid]);

        $ancestors = $info + $ancestors;

        $this->_buildAncestors($user, $info[$hid]['parent'], $ancestors);
    }

    /**
     * 生成された階層データに各ノードのパス文字列をセットする
     *
     * @access private
     */
    function _makePathString(& $build_hierarchy)
    {
        $path = null;

        if (is_null($this->_delimiter)) {
            require_once('fw/i18n.csp');
            $this->_delimiter = cb_msg('grn.cabinet', 'path_delimiter');
        }

        // 親までのパス文字列を生成
        if (array_key_exists('ancestors', $build_hierarchy)) {
            foreach (array_keys($build_hierarchy['ancestors']) as $id) {
                $node =& $build_hierarchy['ancestors'][$id];

                if ($path) {
                    $path .= $this->_delimiter;
                }
                $path .= $node['name'];
                $node['path_string'] = $path;
            }
        }

        // 現在のフォルダを追加
        if (array_key_exists('name', $build_hierarchy)) {
            if ($path) {
                $path .= $this->_delimiter;
            }
            $path .= $build_hierarchy['name'];

            $build_hierarchy['path_string'] = $path;
        }

        // サブフォルダのパス文字列をセットする
        if (array_key_exists('children', $build_hierarchy)) {
            foreach (array_keys($build_hierarchy['children']) as $id) {
                $node =& $build_hierarchy['children'][$id];

                if ($path) {
                    $node['path_string'] = $path . $this->_delimiter
                                           . $node['name'];
                } else {
                    $node['path_string'] = $node['name'];
                }
            }
        }
    }

    function build(& $user, & $folder)
    {
        // フォルダ指定のない場合はルートフォルダがデフォルト
        if ( ! $folder) {
            $folder =& $this->_mgr_folder->getRootFolder($user,
                $this->_access_mode);
        }

        if (is_array($this->_privileges)) {
            if ( ! $folder->privileged($user, $this->_privileges)) {
                if ($this->_access_mode == GRN_CABINET_ACCESS_R) {
                    return [];
                }

                if ( ! $folder->access($user, $this->_access_mode)) {
                    return [];
                }
            }
        }

        $info = $this->_mgr_folder->getFolderInfo($user, $folder->getOID());

        $this->addNotificationInfo($user, $info[$folder->getOID()]);
        $this->addCheckBoxInfo($user, $info[$folder->getOID()]);

        $hierarchy = $info[$folder->getOID()];
        $hierarchy['memo'] = $folder->get('description');
        $hierarchy['auth'] = $folder->getAuthorities($user);

        if ( ! is_null($this->_privileges)) {
            $hierarchy['privileges'] = $folder->getPrivileges($user);
        }


        if (($pid = $folder->getId('parent'))) {
            // 親フォルダがあれば選択フォルダまでのパス上のフォルダ情報を取得
            $ancestors = [];
            $this->_buildAncestors($user, $pid, $ancestors);
            $hierarchy['ancestors'] = $ancestors;

            if (count($ancestors) > 0) {
                $hierarchy['parent'] = $ancestors[$pid];
            } elseif (isset($hierarchy['parent'])) {
                unset($hierarchy['parent']);
            }
        }

        if (is_array($this->_privileges)) {
            /**
             * 管理権限をチェックする場合、選択中のフォルダに管理権限があれば
             * それ以下のフォルダに対しても権限を持つのでアクセス権はREADのみを評価
             */
            $children = $this->_mgr_folder->getSubFolderInfo($user,
                $folder->getOID(), GRN_CABINET_ACCESS_R);

            foreach (array_keys($children) as $id) {
                $this->addNotificationInfo($user, $children[$id]);
                $this->addCheckBoxInfo($user, $children[$id]);
            }
        } else {
            $children = $this->_mgr_folder->getSubFolderInfo($user,
                $folder->getOID(), $this->_access_mode);

            foreach (array_keys($children) as $id) {
                $this->addNotificationInfo($user, $children[$id]);
                $this->addCheckBoxInfo($user, $children[$id]);
            }
        }

        $hierarchy['children'] = $children;
        $hierarchy['child_count'] = count($children);

        if ($this->_path_string) {
            $this->_makePathString($hierarchy);
        }

        return $hierarchy;
    }

    function buildUsingTree($user, $folder, $tree)
    {
        // フォルダ指定のない場合はルートフォルダがデフォルト
        if ( ! $folder) {
            $folder =& $this->_mgr_folder->getRootFolder($user,
                $this->_access_mode);
        }

        if (is_array($this->_privileges)) {
            if ( ! $folder->privileged($user, $this->_privileges)) {
                if ($this->_access_mode == GRN_CABINET_ACCESS_R) {
                    return [];
                }

                if ( ! $folder->access($user, $this->_access_mode)) {
                    return [];
                }
            }
        }

        $info = $this->_mgr_folder->getFolderInfo($user, $folder->getOID());

        $this->addNotificationInfo($user, $info[$folder->getOID()]);
        $this->addCheckBoxInfo($user, $info[$folder->getOID()]);

        $hierarchy = $info[$folder->getOID()];
        $hierarchy['memo'] = $folder->get('description');
        $hierarchy['auth'] = $folder->getAuthorities($user);

        if ( ! is_null($this->_privileges)) {
            $hierarchy['privileges'] = $folder->getPrivileges($user);
        }


        if (($pid = $folder->getId('parent'))) {
            // 親フォルダがあれば選択フォルダまでのパス上のフォルダ情報を取得
            $ancestors = [];
            $this->_buildAncestors($user, $pid, $ancestors);
            $hierarchy['ancestors'] = $ancestors;

            if (count($ancestors) > 0) {
                $hierarchy['parent'] = $ancestors[$pid];
            } elseif (isset($hierarchy['parent'])) {
                unset($hierarchy['parent']);
            }
        }

        $children = $tree->getSavedChildrenFolder($folder->getOID());
        $hierarchy['children'] = $children;
        $hierarchy['child_count'] = count($children);

        if ($this->_path_string) {
            $this->_makePathString($hierarchy);
        }

        return $hierarchy;
    }

    // Huy add @ 2009/11
    function getSubFoldersForTreeView(& $user, & $folder)
    {
        $children = [];
        // カテゴリ指定のない場合はルートカテゴリがデフォルト
        if ( ! $folder) {
            $folder =& $this->_mgr_folder->getRootFolder($user,
                $this->_access_mode);
        }

        $children = $this->_mgr_folder->getSubFolderInfo($user,
            $folder->getOID(), GRN_CABINET_ACCESS_R);

        foreach (array_keys($children) as $id) {
            $this->addNotificationInfo($user, $children[$id]);
            $this->addCheckBoxInfo($user, $children[$id]);
        }

        return $children;
    }

    /**
     * @return array
     */
    function &getAncestors(&$folder)
    {
        $ret = [];

        while ($folder) {
            $ret[$folder->getOID()] =& $folder;
            $folder =& $folder->get('parent');
        }

        $ret = array_reverse($ret, true);

        return $ret;
    }
    // end: Huy add @ 2009/11
}

