<?php

/**
 * ファイル管理ユーティリティ
 *
 * @author  Tanaka, Yoshiaki        2004/11
 * @package grn.cabinet
 */

require_once('grn/controller.csp');


class GRN_Cabinet_ControllerUtil extends GRN_ControllerUtil
{

    function __construct($page = null)
    {
        parent::__construct($page);
    }

    function isCurrentPage()
    {
        return $this->_page == cb_get_pagename();
    }

    function getSystemConfig()
    {
        require_once('grn/ui.csp');
        $um = GRN_UIConfigManager::getInstance();
        $ret = $um->getSystemConfig();

        return $ret;
    }

    function getUserConfig(& $user)
    {
        require_once('grn/ui.csp');
        $um = GRN_UIConfigManager::getInstance();
        $ret = $um->getUserConfig($user);

        return $ret;
    }

    function getNaviStartPosition($param_name = 'sp', $force_session = false)
    {
        global $G_INPUT;

        if ($force_session) {
            $session =& $this->getSession();
            if ($param_name == 'sp') {
                $start_position = $session->get('current_start_position');
            } else {
                $start_position = $session->get('current_start_position.'
                                                . $param_name);
            }

            if ($start_position == null) {
                $start_position = 0;
            }

            return $start_position;
        }

        // from parameter
        if (array_key_exists($param_name, $G_INPUT)) {
            return (int)$G_INPUT[$param_name];
        }

        // session flag
        if ( ! array_key_exists('sf', $G_INPUT) || ! $G_INPUT['sf']) {
            return 0;
        }

        $session =& $this->getSession();
        if ($param_name == 'sp') {
            $start_position = $session->get('current_start_position');
        } else {
            $start_position = $session->get('current_start_position.'
                                            . $param_name);
        }

        if ($start_position == null) {
            $start_position = 0;
        }

        return $start_position;
    }

    function setNaviStartPosition($pos, $param_name = 'sp')
    {
        $session = $this->getSession();
        if ($param_name == 'sp') {
            $session->set('current_start_position', (int)$pos);
        } else {
            $session->set('current_start_position.' . $param_name, (int)$pos);
        }
    }

    /**
     * 一覧開始位置を取得する、自動でセッションへ保存する
     *
     * @return integer
     */
    function getListOffset($param_name = 'sp')
    {
        if ( ! $this->isCurrentPage()) {
            return $this->getNaviStartPosition($param_name, true);
        }

        $sp = $this->getNaviStartPosition($param_name);
        $this->setNaviStartPosition($sp);

        return $sp;
    }

    /**
     * @access private
     */
    var $_order_param = null;

    /**
     * 一覧ソートパラメータを取得する、自動でセッションへ保存する
     *
     * @param string $default ソートパラメータの初期値
     *
     * @return string
     */
    function getListOrderParam($default = 'md')
    {
        if ( ! is_null($this->_order_param)) {
            return $this->_order_param;
        }

        global $G_INPUT;

        if ($this->isCurrentPage()) {
            if (array_key_exists('sort', $G_INPUT)) {
                $this->_order_param = $G_INPUT['sort'];
                if ( ! $this->_order_param) {
                    $this->_order_param = $default;
                }

                $session =& $this->getSession();
                $session->set('current_sort', $this->_order_param);

                return $this->_order_param;
            }
            /*
            if( ! array_key_exists( 'sf', $G_INPUT ) || ! $G_INPUT['sf'] )
            {
                $this->_order_param = $default;

                $session =& $this->getSession();
                $session->set( 'current_sort', $this->_order_param );

                return $this->_order_param;
            }
            */
        }

        $session = $this->getSession();
        $current_sort = $session->get('current_sort');
        if ($current_sort == null) {
            $current_sort = $default;
        }

        $this->_order_param = $current_sort;

        return $current_sort;
    }

    /**
     * get the order setting key
     *
     * @param string $order
     *
     * @return string
     */
    public function getListOrderArg($order)
    {
        switch ($order['orderby']) {
            case "1"://タイトル
                $order_arg = $order['order'] == 1 ? 'ftu' : 'ftd';
                break;
            case "2"://ファイル名
                $order_arg = $order['order'] == 1 ? 'fnu' : 'fnd';
                break;
            case "3"://更新日時
                $order_arg = $order['order'] == 1 ? 'mtu' : 'mtd';
                break;
            default:
                $order_arg = 'mtd';
                break;
        }

        return $order_arg;
    }

    /**
     * 一覧ソートのカラム情報を取得する
     *
     * @param string $arg     ソートパラメータ
     * @param string $default ソートパラメータの初期値
     *
     * @return array
     */
    function getListOrderColumn($arg = null, $default = 'mtd')
    {
        $params = [
            'ftu' => [
                'param'  => 'ftu',
                'column' => 'title_sort_key',
                'order'  => false
            ],
            // タイトル昇順
            'ftd' => [
                'param'  => 'ftd',
                'column' => 'title_sort_key',
                'order'  => true
            ],
            // タイトル降順
            'fnu' => ['param' => 'fnu', 'column' => 'name', 'order' => false],
            // ファイル名昇順
            'fnd' => ['param' => 'fnd', 'column' => 'name', 'order' => true],
            // ファイル名降順
            'cuu' => [
                'param'  => 'cuu',
                'column' => 'creator_name',
                'order'  => false
            ],
            // 更新者名昇順
            'cud' => [
                'param'  => 'cud',
                'column' => 'creator_name',
                'order'  => true
            ],
            // 更新者名降順
            'muu' => [
                'param'  => 'muu',
                'column' => 'modifier_name',
                'order'  => false
            ],
            // 更新者名昇順
            'mud' => [
                'param'  => 'mud',
                'column' => 'modifier_name',
                'order'  => true
            ],
            // 更新者名降順
            'ctu' => ['param' => 'ctu', 'column' => 'ctime', 'order' => false],
            // 更新日時昇順
            'ctd' => ['param' => 'ctd', 'column' => 'ctime', 'order' => true],
            // 更新日時降順
            'mtu' => ['param' => 'mtu', 'column' => 'mtime', 'order' => false],
            // 更新日時昇順
            'mtd' => ['param' => 'mtd', 'column' => 'mtime', 'order' => true],
            // 更新日時降順
            'fsu' => ['param' => 'fsu', 'column' => 'size', 'order' => false],
            // ファイルサイズ昇順
            'fsd' => ['param' => 'fsd', 'column' => 'size', 'order' => true],
            // ファイルサイズ降順
            'tu'  => [
                'param'  => 'tu',
                'column' => 'record_time',
                'order'  => false
            ],
            // 履歴時刻昇順
            'td'  => [
                'param'  => 'td',
                'column' => 'record_time',
                'order'  => true
            ],
            // 履歴時刻降順
            'uu'  => [
                'param'  => 'uu',
                'column' => 'recorder_name',
                'order'  => false
            ],
            // 履歴更新者昇順
            'ud'  => [
                'param'  => 'ud',
                'column' => 'recorder_name',
                'order'  => true
            ],
            // 履歴更新者降順
            'nu'  => [
                'param'  => 'nu',
                'column' => 'filename',
                'order'  => false
            ],
            // ファイル名昇順
            'nd'  => ['param' => 'nd', 'column' => 'filename', 'order' => true],
            // ファイル名降順
        ];

        if (is_null($arg)) {
            $arg = $this->getListOrderParam($default);
        }

        if ( ! $arg || ! array_key_exists($arg, $params)) {
            $arg = 'mtd';
        }

        return $params[$arg];
    }

    /**
     *
     * @param object $user
     * @param object $file
     * @param bool   $folder_view
     *
     * @return array
     * @access public
     */
    function getFileListView(& $user, & $file, $folder_view = false)
    {
        $body = $file->getCurrentBody();

        $title = $file->getTitle();
        if (is_null($title) || strlen($title) < 1) {
            $title = $body->get('name');
        }

        $file_for_view = [
            'id'       => $file->getOID(),
            'title'    => $title,
            'filename' => $body->get('name'),
            'size'     => $body->get('size'),
            'mtime'    => $body->get('mtime'),
        ];

        if ($user) {
            require_once('cabinet/notification.csp');
            $nm = GRN_Cabinet_NotificationManager::getInstance();
            $file_for_view['unread'] = $nm->getReadStatus($user, $file);
        }

        $this->getCreatorView($file, $file_for_view);
        $this->getModifierView($file, $file_for_view);

        if ($folder_view) {
            require_once('cabinet/file.csp');
            $filemgr = GRN_Cabinet_FileManager::getInstance();
            if (($folder =& $filemgr->getFolder($file))) {
                $file_for_view['hid'] = $folder->getOID();
                $file_for_view['folder_name'] = $folder->get('name');
            }
        }

        $lock = $file->getLockObject();

        switch ($lock->isLocked()) {
            case 1:
                $lock_owner =& $lock->get('lock_owner');
                $file_for_view['locked'] = 'other';
                $file_for_view['locked_owner_uid'] = $lock_owner->getOID();
                $file_for_view['locked_owner_name']
                    = $lock_owner->get('display_name');
                break;
            case 2:
                $file_for_view['locked'] = 'login';
                break;
            default:
                break;
        }

        return $file_for_view;
    }

    function setBreadcrumbsList(& $smarty_object, $page_path)
    {
        $page_title = grn_get_current_page_display_name();
        $smarty_object->assign('app_id', 'cabinet');
        $smarty_object->assign('page_title', $page_title);

        $positions = [];
        if ($page_path) {
            foreach ($page_path as $node) {
                $page = $node['page'];
                unset($node['page']);

                $positions[] = ([
                                    'page' => $page,
                                    'name' => grn_get_page_display_name($page)
                                ] + $node);
            }
        }
        $positions[] = ['page' => "", 'name' => $page_title];

        $smarty_object->assign('site_position', $positions);
    }

    function prepareMakeSitePosition(
        $smarty,
        $hid = null,
        $fid = null,
        $folder_id_operation = null,
        $acces_list_id = null,
        $poid_acces_list = null,
        $notify_id = null,
        $poid_notify_list = null,
        $privilege_list_id = null
    ) {
        require_once('cabinet/folder.csp');
        $cabinet_manager = new GRN_Cabinet_FolderManager();

        $list = null;
        if ($hid) {
            $list = $cabinet_manager->getListFolderIdAncestor($hid);
        }

        if ($list) {
            global $G_container_base;
            $uum = $G_container_base->getInstance('uum');
            $login = $uum->getLoginUser();

            require_once("fw/i18n.csp");
            require_once("fw/i18n/locale.csp");
            $i18n = CB_I18N::getInstance();
            $default_locale
                = CB_LocaleManager::getCurrentLanguage($login->getOID());
            $locale_id = CB_LocaleManager::getLanguageId($default_locale);

            $page_path = [];
            if ($notify_id) {
                $page_path[] = [
                    'cabinet/operation/notify_list' => [
                        'nid'   => $notify_id,
                        'reset' => 1,
                        'poid'  => $poid_notify_list,
                        'name'  => grn_get_page_display_name(
                            'cabinet/operation/notify_list'
                        )
                    ]
                ];
            }

            if ($acces_list_id) {
                $page_path[] = [
                    'cabinet/operation/access_list' => [
                        'nid'  => $acces_list_id,
                        'poid' => $poid_acces_list,
                        'name' => grn_get_page_display_name(
                            'cabinet/operation/access_list'
                        )
                    ]
                ];
            }

            if ($privilege_list_id) {
                $page_path[] = [
                    'cabinet/operation/privilege_list' => [
                        'nid'  => $privilege_list_id,
                        'name' => grn_get_page_display_name(
                            'cabinet/operation/privilege_list'
                        )
                    ]
                ];
            }

            if ($folder_id_operation) {
                $page_path[] = [
                    'cabinet/operation/folder_view' => [
                        'hid'  => $folder_id_operation,
                        'name' => grn_get_page_display_name(
                            'cabinet/operation/folder_view'
                        )
                    ]
                ];
            }

            if ($fid) {
                $page_path[] = [
                    'cabinet/view' => [
                        'hid'  => $hid,
                        'fid'  => $fid,
                        'name' => grn_get_page_display_name('cabinet/view')
                    ]
                ];
            }

            foreach ($list as $value) {
                if (isset($value['language'][$locale_id])) {
                    $value['name'] = $value['language'][$locale_id]['name'];
                }
                $page_path[] = [
                    'cabinet/index' => [
                        'hid'  => $value['id'],
                        'name' => $value['name']
                    ]
                ];
            }
            $page_path[] = [
                'cabinet/index' => [
                    'sf'   => '1',
                    'name' => grn_get_page_display_name('cabinet/index') . '('
                              . cb_msg(
                                  'grn.cabinet', 'root_folder_name', null,
                                  $default_locale
                              ) . ')'
                ]
            ];
            $page_path = array_reverse($page_path);
            $this->setSitePosition($smarty, $page_path, null, true);
        } else {
            $page_path = [
                'cabinet/index' => ['hid' => $hid]
            ];
            $this->setSitePosition($smarty, $page_path);
        }
    }

    function setSitePosition(
        & $smarty,
        $page_path,
        $resource_args = null,
        $bread_crumb = false
    ) {
        assert('$smarty');

        $page_title = grn_get_current_page_display_name($resource_args);

        $smarty->assign('app_id', 'cabinet');

        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $login = $uum->getLoginUser();

        require_once("fw/i18n.csp");
        require_once("fw/i18n/locale.csp");
        $i18n = CB_I18N::getInstance();
        $default_locale
            = CB_LocaleManager::getCurrentLanguage($login->getOID());

        $smarty->assign('page_title', $page_title);

        require_once('grn/application.csp');
        $locator = GRN_ApplicationLocator::instance();
        $app = $locator->getInstance('cabinet');
        $smarty->assign('app_name', $app->getName());

        $positions = [];
        if ($page_path) {
            if (count($page_path) > 1 && $bread_crumb) {
                foreach ($page_path as $key => $path) {
                    foreach ($path as $page_name => $args) {
                        // サイトポジションで一覧に戻るときは常に一覧状態を復元する
                        $base = basename($page_name);
                        switch ($base) {
                            case 'index':
                            case 'view':
                            case 'folder_list':
                                $args['sf'] = 1;
                                break;
                        }

                        $positions[] = ([
                                            'page' => $page_name,
                                            'name' => $args['name']
                                        ] + $args);

                    }
                }
            } else {
                foreach ($page_path as $page_name => $args) {
                    // サイトポジションで一覧に戻るときは常に一覧状態を復元する
                    $base = basename($page_name);
                    switch ($base) {
                        case 'index':
                        case 'view':
                        case 'folder_list':
                            $args['sf'] = 1;
                            break;
                    }

                    if ($base == 'index') {
                        $positions[] = ([
                                            'page' => $page_name,
                                            'name' => grn_get_page_display_name($page_name,
                                                    $resource_args) . '('
                                                      . cb_msg('grn.cabinet',
                                                    'root_folder_name', null,
                                                    $default_locale)
                                                      . ')'
                                        ] + $args);
                    } else {
                        $positions[] = ([
                                            'page' => $page_name,
                                            'name' => grn_get_page_display_name($page_name,
                                                $resource_args)
                                        ]
                                        + $args);
                    }
                }
            }
        }

        $positions[] = ['page' => "", 'name' => $page_title];

        $smarty->assign('site_position', $positions);
    }


    /**
     * 表示に必要な設定値を取得する
     *
     * @param object $user ユーザー
     *
     * @return array
     */
    function getConfigValues(& $user)
    {
        require_once('grn/ui.csp');
        $um = GRN_UIConfigManager::getInstance();
        $uc = $um->getUserConfig($user);

        if ( ! $uc) {
            return false;
        }

        $config = [
            'subject_width'  => $uc->getSubjectWidth(),
            'truncate_width' => $uc->getTruncateWidth(),
            'name_width'     => $uc->getNameWidth(),
            'inline'         => $uc->getInlineSetting(),
        ];

        return $config;
    }

    /**
     * 一覧上で隣接する前後のファイルのIDを取得する
     *
     * @param object $user         ユーザー
     * @param object $file         ファイル
     * @param object $folder       フォルダ
     * @param string $default_sort ソートの初期値
     *
     * @return array
     */
    function getNeighborsView(
        & $user,
        & $file,
        & $folder,
        $default_sort = 'mtd'
    ) {
        // 詳細画面から呼ばれること前提
        $view_page = cb_get_pagename();

        $hid = $folder ? $folder->getOID() : null;

        require_once('cabinet/file_util.csp');
        $flist = new GRN_Cabinet_FileList($user, $folder);

        // ソートパラメータのセット

        $order_column = $this->getListOrderColumn(null, $default_sort);
        $flist->addOrderColumn($order_column['column'], $order_column['order']);

        $result = [];

        if (($id = $flist->getPreviousID($file)) > 0) {
            //assert( '$id != $file->getOID()' );
            $result['prev'] = [
                'page'        => $view_page,
                'page_params' => ['hid' => $hid, 'fid' => $id]
            ];
        }
        if (($id = $flist->getNextID($file)) > 0) {
            //assert( '$id != $file->getOID()' );
            $result['next'] = [
                'page'        => $view_page,
                'page_params' => ['hid' => $hid, 'fid' => $id]
            ];
        }

        return $result;
    }

}


