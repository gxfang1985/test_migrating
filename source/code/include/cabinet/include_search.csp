<?php

/**
 * Cabinet Search Logic
 *
 * @author  Mizuno, Kuniaki     2004/12
 * @version 1.0
 * @package grn.cabinet
 */
require_once('grn/application.csp');
require_once('fw/i18n.csp');
require_once('cabinet/CabinetFacade.csp');
require_once('cabinet/functions.csp');

define('GRN_CABINET_ROW_LIMIT', 20);

class GRN_Cabinet_SearchBase
{
    private $_tab_folder = null;
    private $_count = 0;
    private $_cabinetConditionBean = null;


    protected function __construct($inConditionBean)
    {
        $this->setCabinetConditionBean($inConditionBean);

        $app_locator = GRN_ApplicationLocator::instance();
        $tm = $app_locator->getTableManager('cabinet');

        $this->_tab_folder = $tm->getTableInfo('GRN_Cabinet_FolderEntity');
    }

    protected function getFolderTableInfo()
    {
        return $this->_tab_folder;
    }

    private function setCabinetConditionBean($value)
    {
        $this->_cabinetConditionBean = $value;
    }

    protected function getCabinetConditionBean()
    {
        return $this->_cabinetConditionBean;
    }

    // CabinetFolderConditionBean accessor adapter   start
    protected function getUser()
    {
        return $this->getCabinetConditionBean()->getUser();
    }

    protected function getFolderId()
    {
        return $this->getCabinetConditionBean()->getFolderId();
    }

    protected function getSearchWords()
    {
        return $this->getCabinetConditionBean()->getSearchWords();
    }

    protected function isEnableSubfolder()
    {
        return $this->getCabinetConditionBean()->isEnableSubfolder();
    }

    protected function isSensitive()
    {
        return $this->getCabinetConditionBean()->isSensitive();
    }

    protected function getOffset()
    {
        return $this->getCabinetConditionBean()->getOffset();
    }

    protected function getLimit()
    {
        return $this->getCabinetConditionBean()->getLimit();
    }

    // CabinetFolderConditionBean accessor adapter   end


    protected function setCount($value)
    {
        $this->_count = $value;
    }

    public function count()
    {
        return $this->_count;
    }


    /**
     * 検索対象フォルダーを取得
     * acquires the folder which belongs to the specified folder.
     *                         FALSE specified folder only.
     *
     * @return array array( [ObjectID] => 1 )
     * @access private
     */
    protected function _getSearchTargetFolderIds($isFolderSearch = false)
    {
        $folderIds = [];

        $i18n = CB_I18N::getInstance();
        $table_info = $this->getFolderTableInfo();

        $dao = new CabinetFacade();
        $dataObj = [];
        $dataObj['lock'] = $table_info->_lock;
        $dataObj['language'] = $i18n->getCurrentLanguage();

        if (is_null($this->getFolderId())) {
            $dataObj['offset'] = 0;
            $dataObj['limit'] = -1;
            $folderList = $dao->getCabinetFolderList($dataObj);

            foreach ($folderList as $folder) {
                $folderIds[$folder->getId()] = 1;
            }
        } else {
            $folder = $dao->referCabinetFolderById($dataObj,
                $this->getFolderId());
            if ($folder === false) {
                return $folderIds;
            }

            $childFolderIds = [];
            $folderIds[$folder->getId()] = 1;

            if ($this->isEnableSubfolder() || $isFolderSearch) {
                $childFolderIds = $this->_getSubFolders($folderIds, $folderIds);
            }

            if ($this->isEnableSubfolder() && count($childFolderIds) > 0) {
                $this->_getSubFoldersRecursive($childFolderIds, $folderIds);
            }
        }

        require_once('cabinet/access.csp');
        $am = GRN_Cabinet_AccessManager::getInstance();
        $user = $this->getUser();
        $folderIds = $am->evaluateFolders($user, $folderIds,
            GRN_CABINET_ACCESS_R);

        return array_keys($folderIds);
    }

    private function _getSubFoldersRecursive($inFolderIds, & $outFolderIds)
    {
        $childFolderIds = $this->_getSubFolders($inFolderIds, $outFolderIds);

        if (count($childFolderIds) < 1) {
            return;
        }

        $this->_getSubFoldersRecursive($childFolderIds, $outFolderIds);
    }

    private function _getSubFolders($inFolderIds, & $outFolderIds)
    {
        if ( ! is_array($inFolderIds) || count($inFolderIds) === 0) {
            return [];
        }

        $i18n = CB_I18N::getInstance();
        $table_info = $this->getFolderTableInfo();

        $dao = new CabinetFacade();
        $dataObj = [];
        $dataObj['lock'] = $table_info->_lock;
        $dataObj['language'] = $i18n->getCurrentLanguage();
        $dataObj['offset'] = 0;
        $dataObj['limit'] = -1;
        $folderIdArray = array_keys($inFolderIds);

        $folderList = $dao->getCabinetFolderListByParentIds($dataObj,
            $folderIdArray);

        $childFolderIds = [];
        foreach ($folderList as $folder) {
            $childFolderIds[$folder->getId()] = 1;
            $outFolderIds[$folder->getId()] = 1;
        }

        return $childFolderIds;
    }
}


class GRN_Cabinet_FolderSearch extends GRN_Cabinet_SearchBase
{
    public function __construct($inConditionBean)
    {
        parent::__construct($inConditionBean);
    }

    public function searchExecute()
    {
        $i18n = CB_I18N::getInstance();
        $table_info = $this->getFolderTableInfo();

        $dao = new CabinetFacade();
        $dao->setCalcFoundRows(true);

        $dataObj = [];
        $dataObj['lock'] = $table_info->_lock;
        $dataObj['language'] = $i18n->getCurrentLanguage();
        $dataObj['offset'] = $this->getOffset();
        $dataObj['limit'] = $this->getLimit();
        $dataObj['isSensitive'] = $this->isSensitive();

        //Create Cabinet Condition
        $folderNameArray = $this->getSearchWords();
        $folderIdArray = $this->_getSearchTargetFolderIds(true);

        //現時点では検索対象項目は名称固定仕様となっている
        $folderList = $dao->getCabinetFolderListByIds_Names($dataObj,
            $folderIdArray, $folderNameArray);
        $folderSearchAllCount = $dao->getCalcFoundRows($dataObj);

        $this->setCount($folderSearchAllCount);

        $results = [];
        foreach ($folderList as $folder) {
            $row = $table_info->getRow($folder->getId(),
                $folder->convertArray());
            $results[] = [
                'folder_id'  => $folder->getId(),
                'foldername' => $folder->getName(),
                'path'       => grn_cabinet_get_folder_path_string($row),
            ];
        }

        return $results;
    }
}


class GRN_Cabinet_FileSearch extends GRN_Cabinet_SearchBase
{
    var $_tab_file_rel;
    var $_tab_file;
    var $_tab_file_body;


    public function __construct($inConditionBean)
    {
        parent::__construct($inConditionBean);

        require_once('cabinet/file.csp');
        $app_locator = GRN_ApplicationLocator::instance();
        $tm = $app_locator->getTableManager('cabinet');
        $fm = new GRN_Cabinet_FileManager_Core();

        $this->_tab_file_rel = $tm->getTableInfo('GRN_Cabinet_FileRelation');
        $this->_tab_file = $fm->getFileTable();
        $this->_tab_file_body = $fm->getBodyTable();
    }

    private function getSearchColumns()
    {
        return $this->getCabinetConditionBean()->getSearchColumns();
    }

    /**
     * @return array
     */
    public function searchExecute()
    {
        $results = [];

        if (count($this->getSearchWords()) < 1
            || count($this->getSearchColumns()) < 1
        ) {
            return $results;
        }

        $i18n = CB_I18N::getInstance();
        $table_info = $this->getFolderTableInfo();

        $dao = new CabinetFacade();
        $dao->setCalcFoundRows(true);

        $conditionBean = $this->getCabinetConditionBean();

        $dataObj = [];
        $dataObj['lock'] = $table_info->_lock;
        $dataObj['language'] = $i18n->getCurrentLanguage();
        $dataObj['offset'] = $conditionBean->getOffset();
        $dataObj['limit'] = $conditionBean->getLimit();
        $dataObj['isSensitive'] = $conditionBean->isSensitive();

        //Create Cabinet Condition
        $folderIdArray = $this->_getSearchTargetFolderIds(false);

        $fileList = $dao->getCabinetFileListByIds_Condition($dataObj,
            $folderIdArray, $conditionBean);
        $fileSearchAllCount = $dao->getCalcFoundRows($dataObj);

        $this->setCount($fileSearchAllCount);

        foreach ($fileList as $file) {
            $results[] = [
                'folder_id'     => $file->getFolderId(),
                'foldername'    => $file->getFolderName(),
                'file_id'       => $file->getId(),
                'filename'      => $file->getFileName(),
                'title'         => $file->getTitle(),
                'creator_uid'   => $file->getCreator(),
                'creator_name'  => $file->getCreatorName(),
                'modifier_uid'  => $file->getModifier(),
                'modifier_name' => $file->getModifierName(),
                'date'          => $file->getMtimeObj()
            ];
        }

        return $results;
    }
}
