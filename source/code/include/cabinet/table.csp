<?php

require_once('grn/inspection.csp');
require_once('cabinet/file.csp');
require_once('grn/access_table.csp');

require_once('cabinet/error_code.csp');

define('GRN_CABINET_ACCESS_R', 1);
define('GRN_CABINET_ACCESS_W', 2);
define('GRN_CABINET_ACCESS_RW', 3);

define('GRN_CABINET_SECURITY_MODEL_GRANT', 0);
define('GRN_CABINET_SECURITY_MODEL_REVOKE', 1);

// TENTATIVE
define('GRN_CABINET_SECURITY_MODEL_DEFAULT', 0);

define('GRN_CABINET_ROOT_FOLDER_ID', 1);


/**
 * フォルダーの実体
 *
 * @package grn.cabinet
 */
class GRN_Cabinet_FolderEntity extends GRN_InspectionBase
{
    var $_app_id = 'cabinet';

    // フォルダー名
    var $col_name = ['type' => "char", 'length' => 100];
    // フォルダー説明
    var $col_description
        = [
            'type'   => "char",
            'length' => 65535,
            'lazy'   => true
        ];

    // フォルダコード
    var $col_foreign_key
        = [
            'type'    => 'char',
            'length'  => CB_DATABASE_MAX_STRINDEX,
            'notnull' => true
        ];
    var $idx_foreign_key = ['cols' => 'foreign_key', 'unique' => true];

    // 親フォルダー
    var $col_parent
        = [
            'type' => 'weak_relation',
            'to'   => 'GRN_Cabinet_FolderEntity'
        ];

    // 親フォルダー内での順序
    var $col_list_index = ['type' => 'list_index'];

    // セキュリティーモデル
    var $col_security_model = ['type' => 'int'];

    // 強制通知フラグ
    var $col_force_notify = ['type' => 'int'];

    var $idx_l_id = ['cols' => ['list_index', null]];

    // 予備カラム
    var $col_reserve_text1 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text2 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text3 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_int1 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int2 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int3 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_blob1 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob2 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob3 = ['type' => 'blob', 'lazy' => true];


    function __construct($row)
    {
        parent::__construct($row, 'grn.cabinet');
    }

    /**
     * 初期化
     *
     * @param object CB_User $user        操作しているユーザー
     * @param array $properties プロパティー値
     *                          $propertiss['name']         フォルダー名、必須
     *                          $propertiss['description']  フォルダーの説明
     *
     * @param bool  成功の場合にTRUE、それ以外の場合にFALSEを返す
     */
    function initialize($user, $properties)
    {
        $this->set('name', @ $properties['name']);
        $this->set('description', @ $properties['description']);
        $this->set('foreign_key', @ $properties['foreign_key']);
        $this->set('force_notify', @ $properties['force_notify']);

        // TENTATIVE
        global $G_container_app;
        $policy = $G_container_app->getInstance('common_policy');

        if ($policy
            && ('revoke' == $policy->getPolicy('cabinet', 'security_model'))
        ) {
            $this->set('security_model', GRN_CABINET_SECURITY_MODEL_REVOKE);
        } else {
            $this->set('security_model', GRN_CABINET_SECURITY_MODEL_DEFAULT);
        }

        $this->updateNow();

        return true;
    }

    function set($prop_name, $prop_value)
    {
        if ($prop_name == 'name') {
            require_once('fw/string_util.csp');
            $prop_value = cb_trim_check($prop_value,
                E_COMMON_MISSING_MANDATORY);
        }

        return parent::set($prop_name, $prop_value);
    }

    /**
     * @param string $col_name
     *
     * @return CB_Row|mixed
     */
    public function get($col_name)
    {
        $result = false;

        $table_info = $this->getTableInfo();
        $col_info = $table_info->getColumnInfo($col_name);
        if (is_null($col_info)) {
            return $result;
        }

        if ($col_name == 'parent') {
            $isKeyExists = array_key_exists(CB_DATABASE_COLUMN_PREFIX
                                            . $col_name,
                $this->__row->_rawdata);
            $id = $isKeyExists
                ? $this->__row->_rawdata[CB_DATABASE_COLUMN_PREFIX . $col_name]
                : null;

            if ( ! is_null($id)) {
                require_once('cabinet/CabinetFacade.csp');
                require_once('fw/i18n.csp');

                $i18n = CB_I18N::getInstance();
                $table_info = $this->getTableInfo();
                $tableManager = $table_info->getTableManager();
                $relationTableName = $col_info['to'];
                $relationTableInfo
                    = $tableManager->getTableInfo($relationTableName);
                $relationTableLock = $relationTableInfo->_lock;

                $dao = new CabinetFacade();
                $dataObj = [];
                $dataObj['lock'] = $relationTableLock;
                $dataObj['language'] = $i18n->getCurrentLanguage();

                $cabinetFolderData = $dao->referCabinetFolderById($dataObj,
                    $id);
                $result
                    = $relationTableInfo->getRow($cabinetFolderData->getId(),
                    $cabinetFolderData->convertArray());
            } else {
                $result = parent::get($col_name);
            }
        } else {
            $result = parent::get($col_name);
        }

        return $result;
    }

    /**
     * Generic event trigger method.
     *
     * @param string $action Action name.
     */
    function onAction($action)
    {
    }
}


class GRN_CabinetFolderBase extends CB_PersistentBase
{
    var $_app_id = 'cabinet';

    var $col_folder
        = [
            'type' => 'relation',
            'to'   => 'GRN_Cabinet_FolderEntity'
        ];

    function __construct($row)
    {
        parent::__construct($row);
    }

    /**
     * @param string $col_name
     *
     * @return CB_Row|mixed
     */
    public function get($col_name)
    {
        $result = false;

        $table_info = $this->getTableInfo();
        $col_info = $table_info->getColumnInfo($col_name);
        if (is_null($col_info)) {
            return $result;
        }

        if ($col_name == 'folder') {
            $isKeyExists = array_key_exists(CB_DATABASE_COLUMN_PREFIX
                                            . $col_name,
                $this->__row->_rawdata);
            $id = $isKeyExists
                ? $this->__row->_rawdata[CB_DATABASE_COLUMN_PREFIX . $col_name]
                : null;

            if ( ! is_null($id)) {
                require_once('cabinet/CabinetFacade.csp');
                require_once('fw/i18n.csp');

                $i18n = CB_I18N::getInstance();
                $table_info = $this->getTableInfo();
                $tableManager = $table_info->getTableManager();
                $relationTableName = $col_info['to'];
                $relationTableInfo
                    = $tableManager->getTableInfo($relationTableName);
                $relationTableLock = $relationTableInfo->_lock;

                $dao = new CabinetFacade();
                $dataObj = [];
                $dataObj['lock'] = $relationTableLock;
                $dataObj['language'] = $i18n->getCurrentLanguage();

                $cabinetFolderData = $dao->referCabinetFolderById($dataObj,
                    $id);
                $result
                    = $relationTableInfo->getRow($cabinetFolderData->getId(),
                    $cabinetFolderData->convertArray());
            } else {
                $result = parent::get($col_name);
            }
        } else {
            $result = parent::get($col_name);
        }

        return $result;
    }
}

/**
 * 掲示、フォローと添付ファイルの関連付け
 *
 * @package grn.cabinet
 */
class GRN_Cabinet_FileRelation extends CB_PersistentBase
{
    var $_app_id = 'cabinet';

    var $col_folder
        = [
            'type' => 'weak_relation',
            'to'   => 'GRN_Cabinet_FolderEntity'
        ];
    var $col_file = ['type' => 'relation', 'to' => 'GRN_Cabinet_File'];


    function __construct($row)
    {
        parent::__construct($row);
    }

    /**
     * @param string $col_name
     *
     * @return CB_Row|mixed
     */
    public function get($col_name)
    {
        $result = false;

        $table_info = $this->getTableInfo();
        $col_info = $table_info->getColumnInfo($col_name);
        if (is_null($col_info)) {
            return $result;
        }

        if ($col_name == 'folder') {
            $isKeyExists = array_key_exists(CB_DATABASE_COLUMN_PREFIX
                                            . $col_name,
                $this->__row->_rawdata);
            $id = $isKeyExists
                ? $this->__row->_rawdata[CB_DATABASE_COLUMN_PREFIX . $col_name]
                : null;

            if ( ! is_null($id)) {
                require_once('cabinet/CabinetFacade.csp');
                require_once('fw/i18n.csp');

                $i18n = CB_I18N::getInstance();
                $table_info = $this->getTableInfo();
                $tableManager = $table_info->getTableManager();
                $relationTableName = $col_info['to'];
                $relationTableInfo
                    = $tableManager->getTableInfo($relationTableName);
                $relationTableLock = $relationTableInfo->_lock;

                $dao = new CabinetFacade();
                $dataObj = [];
                $dataObj['lock'] = $relationTableLock;
                $dataObj['language'] = $i18n->getCurrentLanguage();

                $cabinetFolderData = $dao->referCabinetFolderById($dataObj,
                    $id);
                $result
                    = $relationTableInfo->getRow($cabinetFolderData->getId(),
                    $cabinetFolderData->convertArray());
            } else {
                $result = parent::get($col_name);
            }
        } else {
            $result = parent::get($col_name);
        }

        return $result;
    }
}


/**
 * 購読フォルダー
 *
 * @package grn.cabinet
 */
class GRN_Cabinet_SubscribeFolder extends GRN_CabinetFolderBase
{
    var $col_user = ['type' => 'relation', 'to' => 'CB_User'];

    function __construct($row)
    {
        parent::__construct($row);
    }
}


/**
 * 通知先設定
 *
 * @package grn.cabinet
 */
class GRN_Cabinet_UserNotification extends GRN_CabinetFolderBase
{
    var $col_user = ['type' => 'relation', 'to' => 'CB_User', 'lazy' => true];

    function __construct($row)
    {
        parent::__construct($row);
    }
}

/**
 * 通知先設定
 *
 * @package grn.cabinet
 */
class GRN_Cabinet_GroupNotification extends GRN_CabinetFolderBase
{
    var $col_group = ['type' => 'relation', 'to' => 'CB_Group'];

    function __construct($row)
    {
        parent::__construct($row);
    }

    /**
     * @param string $col_name
     *
     * @return bool|CB_Row|mixed
     */
    public function get($col_name)
    {
        $result = false;

        $table_info = $this->getTableInfo();
        $col_info = $table_info->getColumnInfo($col_name);
        if (is_null($col_info)) {
            return $result;
        }


        if ($col_name == 'group') {
            $isKeyExists = array_key_exists(CB_DATABASE_COLUMN_PREFIX
                                            . $col_name,
                $this->__row->_rawdata);
            $id = $isKeyExists
                ? $this->__row->_rawdata[CB_DATABASE_COLUMN_PREFIX . $col_name]
                : null;

            if ( ! is_null($id)) {
                require_once('fw/FwFacade.csp');
                require_once('fw/i18n.csp');

                $i18n = CB_I18N::getInstance();
                $table_info = $this->getTableInfo();
                $tableManager = $table_info->getTableManager();
                $relationTableName = $col_info['to'];
                $relationTableInfo
                    = $tableManager->getTableInfo($relationTableName);
                $relationTableLock = $relationTableInfo->_lock;

                $dao = new FwFacade();
                $dataObj = [];
                $dataObj['lock'] = $relationTableLock;
                $dataObj['language'] = $i18n->getCurrentLanguage();

                $groupData = $dao->referGroupById($dataObj, $id);
                $result = $relationTableInfo->getRow($groupData->getId(),
                    $groupData->convertArray());
            } else {
                $result = parent::get($col_name);
            }
        } else {
            $result = parent::get($col_name);
        }

        return $result;
    }
}

/**
 * 通知先設定
 *
 * @package grn.cabinet
 */
class GRN_Cabinet_RoleNotification extends GRN_CabinetFolderBase
{
    var $col_role = ['type' => 'relation', 'to' => 'CB_Role', 'lazy' => true];

    function __construct($row)
    {
        parent::__construct($row);
    }
}

/**
 * 通知先設定
 *
 * @package grn.cabinet
 */
class GRN_Cabinet_DynamicRoleNotification extends GRN_CabinetFolderBase
{
    var $col_dynamic_role
        = [
            'type'   => 'char',
            'length' => CB_DATABASE_MAX_STRINDEX
        ];

    function GRN_Cabinet_RoleNotification($row)
    {
        parent::__construct($row);
    }
}

/**
 * 既読情報
 *
 * @package grn.cabinet
 */
class GRN_Cabinet_ReadStatus extends CB_PersistentBase
{
    var $_app_id = 'cabinet';

    var $col_user = ['type' => 'relation', 'to' => 'CB_User'];
    var $col_file = ['type' => 'relation', 'to' => 'GRN_Cabinet_File'];
    var $col_last_timestamp = ['type' => 'timestamp'];
    var $idx_last_timestamp = ['cols' => ['last_timestamp']];

    var $idx_u_f = ['cols' => ['user', 'file']];

    // 予備カラム
    var $col_reserve_text1 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text2 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text3 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_int1 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int2 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int3 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_blob1 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob2 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob3 = ['type' => 'blob', 'lazy' => true];


    function __construct($row)
    {
        parent::__construct($row);
    }
}


