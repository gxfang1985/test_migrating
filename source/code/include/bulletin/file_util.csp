<?php

require_once('bulletin/table.csp');
require_once('bulletin/base_util.csp');
require_once('bulletin/file.csp');

class GRN_Bulletin_FileList extends GRN_Bulletin_ListBase
{
    /**
     * @access private
     */
    var $_article = null;


    function __construct(& $article)
    {
        parent::__construct();
        $this->_article =& $article;
    }

    /**
     * @access private
     */
    var $_follow_files = true;

    // フォローの添付ファイルも一覧するかどうか
    function setListFollowFiles($onoff)
    {
        if ($this->_rowset) {
            return false;
        }
        $this->_follow_files = $onoff;

        return true;
    }

    function getListFollowFiles()
    {
        return $this->_follow_files;
    }

    /**
     * @access private
     */
    var $_default_order = true;

    function setOrder($order)
    {
        if ($this->_rowset) {
            return false;
        }

        $this->_default_order = $order;

        return true;
    }

    function getOrder()
    {
        return $this->_default_order;
    }

    /**
     * override
     */
    protected function _getDefaultOrder()
    {
        return $this->_default_order;
    }

    /**
     * @access private
     */
    function _getAlias($type)
    {
        $type2alias = ['file' => 'f', 'body' => 'b', 'relation' => 'r'];

        if (array_key_exists($type, $type2alias)) {
            return $type2alias[$type];
        }

        return $type2alias['file'];
    }

    /**
     * @param string $column
     *
     * @return string
     */
    function _getAliasByColumn($column)
    {
        $column2type = [
            'title' => 'file',
            'ctime' => 'file',
            'mtime' => 'file',
            'name'  => 'body',
            'size'  => 'body',
            'mime'  => 'body',
        ];

        if (array_key_exists($column, $column2type)) {
            return $this->_getAlias($column2type[$column]);
        }

        return $this->_getAlias('file');
    }

    /**
     * @param string $column
     *
     * @return boolean
     */
    protected function _isNotNullColumn($column)
    {
        return $column != 'title';
    }

    /**
     * override
     *
     * @access private
     */
    function _createRowSet()
    {
        if ( ! $this->_article) {
            $ret = null;

            return $ret;
        }

        $alias = $this->_getAlias('relation');

        $table =& $this->getTableInfo('GRN_Bulletin_FileRelation');

        $rowset = new CB_MultiRowSet($table, $alias);

        if ( ! $this->_follow_files) {
            $rowset->addCondition($rowset->queryf($alias
                                                  . ".col_article = '@S' AND "
                                                  . $alias
                                                  . '.col_follow IS NULL',
                $this->_article->getOID()));
        } else {
            $rowset->addCondition($rowset->queryf($alias
                                                  . ".col_article = '@S'",
                $this->_article->getOID()));
        }

        // JOIN GRN_Bulletin_File

        $tab_file =& $this->getTableInfo('GRN_Bulletin_File');

        $fa = $this->_getAlias('file');

        $rowset->addJoin($tab_file,
            $alias . '.col_file = ' . $fa . '._id',
            CB_DATABASE_INNER_JOIN, $fa);

        // JOIN GRN_Bulletin_FileBody

        $tab_body =& $this->getTableInfo('GRN_Bulletin_FileBody');

        $ba = $this->_getAlias('body');

        $rowset->addJoin($tab_body,
            $fa . '._id = ' . $ba . '.col_file AND ' . $fa . '.col_version = '
            . $ba . '.col_version',
            CB_DATABASE_INNER_JOIN, $ba);


        return $rowset;
    }

    /**
     * override
     *
     * @access private
     */
    function &_row2object(& $row)
    {
        $ra = $this->_getAlias('relation');
        $fa = $this->_getAlias('file');
        $ba = $this->_getAlias('body');

        $result = ['file' => null, 'article' => null, 'follow' => null];

        if (array_key_exists($fa, $row)) {
            if (array_key_exists($ba, $row)) {
                $row[$fa]->_current =& $row[$ba];
            }
            $result['file'] =& $row[$fa];
        }
        $result['article'] =& $row[$ra]->get('article');
        $result['follow'] =& $row[$ra]->get('follow');

        return $result;
    }

    /**
     * override
     */
    function &iterate()
    {
        if ( ! $this->_rowset) {
            if ( ! ($this->_rowset =& $this->_createRowSet())) {
                $ret = null;

                return $ret;
            }

            $this->_setOrderColumn($this->_rowset, false);
            $this->_rowset->limit($this->getOffset(), $this->getLimit());
        }

        if (($row =& $this->_rowset->iterate())) {
            $ret = $this->_row2object($row);

            return $ret;
        }

        $this->destroy();
        $ret = null;

        return $ret;
    }

}


