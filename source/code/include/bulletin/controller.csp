<?php

/**
 * 掲示板の表示用ユーティリティ
 *
 * @author  Tanaka, Yoshiaki        2004/11
 * @package grn.bulletin
 */


require_once('grn/controller.csp');


class GRN_Bulletin_ControllerUtil extends GRN_ControllerUtil
{
    function __construct($page = null)
    {
        parent::__construct($page);
    }

    function isCurrentPage()
    {
        return $this->_page == cb_get_pagename();
    }

    function getSystemConfig()
    {
        require_once('grn/ui.csp');
        $um = GRN_UIConfigManager::getInstance();
        $ret = $um->getSystemConfig();

        return $ret;
    }

    function getUserConfig($user)
    {
        require_once('grn/ui.csp');
        $um = GRN_UIConfigManager::getInstance();
        $ret = $um->getUserConfig($user);

        return $ret;
    }

    function getNaviStartPosition($param_name = 'sp', $force_session = false)
    {
        global $G_INPUT;

        if ($force_session) {
            $session = $this->getSession();
            if ($param_name == 'sp') {
                $start_position = $session->get('current_start_position');
            } else {
                $start_position = $session->get('current_start_position.'
                                                . $param_name);
            }

            if ($start_position == null) {
                $start_position = 0;
            }

            return $start_position;
        }

        // from parameter
        if (array_key_exists($param_name, $G_INPUT)) {
            return (int)$G_INPUT[$param_name];
        }

        // session flag
        if ( ! array_key_exists('sf', $G_INPUT) || ! $G_INPUT['sf']) {
            return 0;
        }

        $session = $this->getSession();
        if ($param_name == 'sp') {
            $start_position = $session->get('current_start_position');
        } else {
            $start_position = $session->get('current_start_position.'
                                            . $param_name);
        }

        if ($start_position == null) {
            $start_position = 0;
        }

        return $start_position;
    }

    function setNaviStartPosition($pos, $param_name = 'sp')
    {
        $session = $this->getSession();
        if ($param_name == 'sp') {
            $session->set('current_start_position', (int)$pos);
        } else {
            $session->set('current_start_position.' . $param_name, (int)$pos);
        }
    }

    /**
     * 一覧開始位置を取得する、自動でセッションへ保存する
     *
     * @param string $param_name
     *
     * @return integer
     */
    function getListOffset($param_name = 'sp')
    {
        if ( ! $this->isCurrentPage()) {
            return $this->getNaviStartPosition($param_name, true);
        }

        $sp = $this->getNaviStartPosition($param_name);
        $this->setNaviStartPosition($sp);

        return $sp;
    }

    /**
     * @access private
     */
    var $_order_param = null;

    /**
     * 一覧ソートパラメータを取得する、自動でセッションへ保存する
     *
     * @param string $default ソートパラメータの初期値
     *
     * @return string
     */
    private function getListOrderParam($default = null)
    {
        if ( ! is_null($this->_order_param)) {
            return $this->_order_param;
        }

        global $G_INPUT;

        if ($this->isCurrentPage()) {
            if (array_key_exists('sort', $G_INPUT)) {
                $this->_order_param = $G_INPUT['sort'];
                if ( ! $this->_order_param) {
                    $this->_order_param = $default;
                }

                $session = $this->getSession();
                $session->set('current_sort', $this->_order_param);

                return $this->_order_param;
            }
            /*
            if( ! array_key_exists( 'sf', $G_INPUT ) || ! $G_INPUT['sf'] )
            {
                $this->_order_param = $default;

                $session =& $this->getSession();
                $session->set( 'current_sort', $this->_order_param );

                return $this->_order_param;
            }
            */
        }

        $session = $this->getSession();
        $current_sort = $session->get('current_sort');
        if ($current_sort == null) {
            $current_sort = $default;
        }

        $this->_order_param = $current_sort;

        return $current_sort;
    }

    /**
     * 一覧ソートのカラム情報を取得する
     *
     * @param string $arg     ソートパラメータ
     * @param string $default ソートパラメータの初期値
     *
     * @return array
     */
    function getListOrderColumn($arg = null, $default = 'mtd')
    {
        $params = [
            'ctu' => ['param' => 'ctu', 'column' => 'ctime', 'order' => false],
            // 作成時刻昇順
            'ctd' => ['param' => 'ctd', 'column' => 'ctime', 'order' => true],
            // 作成時刻降順
            'mtu' => ['param' => 'mtu', 'column' => 'mtime', 'order' => false],
            // 更新時刻昇順
            'mtd' => ['param' => 'mtd', 'column' => 'mtime', 'order' => true],
            // 更新時刻降順
            'ntu' => ['param' => 'ntu', 'column' => 'ntime', 'order' => false],
            // 通知時刻昇順
            'ntd' => ['param' => 'ntd', 'column' => 'ntime', 'order' => true],
            // 通知時刻降順
            'cuu' => [
                'param'  => 'cuu',
                'column' => 'creator_name',
                'order'  => false
            ],
            // 作成者名昇順
            'cud' => [
                'param'  => 'cud',
                'column' => 'creator_name',
                'order'  => true
            ],
            // 作成者名降順
            'muu' => [
                'param'  => 'muu',
                'column' => 'modifier_name',
                'order'  => false
            ],
            // 更新者名昇順
            'mud' => [
                'param'  => 'mud',
                'column' => 'modifier_name',
                'order'  => true
            ],
            // 更新者名降順
            'cyu' => [
                'param'  => 'cyu',
                'column' => 'category',
                'order'  => false
            ],
            // カテゴリ名昇順
            'cyd' => [
                'param'  => 'cyd',
                'column' => 'category',
                'order'  => true
            ],
            // カテゴリ名降順
            'stu' => [
                'param'  => 'stu',
                'column' => 'start_timestamp',
                'order'  => false
            ],
            // 公開日昇順
            'std' => [
                'param'  => 'std',
                'column' => 'start_timestamp',
                'order'  => true
            ],
            // 公開日降順
            'tu'  => [
                'param'  => 'tu',
                'column' => 'record_time',
                'order'  => false
            ],
            // ファイル履歴時刻昇順
            'td'  => [
                'param'  => 'td',
                'column' => 'record_time',
                'order'  => true
            ],
            // ファイル履歴時刻降順
            'uu'  => [
                'param'  => 'uu',
                'column' => 'recorder_name',
                'order'  => false
            ],
            // ファイル更新者昇順
            'ud'  => [
                'param'  => 'ud',
                'column' => 'recorder_name',
                'order'  => true
            ],
            // ファイル更新者降順
            'nu'  => [
                'param'  => 'nu',
                'column' => 'filename',
                'order'  => false
            ],
            // ファイル名昇順
            'nd'  => ['param' => 'nd', 'column' => 'filename', 'order' => true],
            // ファイル名降順
            'suu' => [
                'param'  => 'suu',
                'column' => 'col_subject',
                'order'  => false
            ],
            'sud' => [
                'param'  => 'sud',
                'column' => 'col_subject',
                'order'  => true
            ],
            'guu' => ['param' => 'guu', 'column' => 'name', 'order' => false],
            'gud' => ['param' => 'gud', 'column' => 'name', 'order' => true],
        ];

        if (is_null($arg)) {
            $arg = $this->getListOrderParam($default);
        }

        if ( ! $arg || ! array_key_exists($arg, $params)) {
            $arg = 'mtd';
        }

        return $params[$arg];
    }

    /**
     * 最終通知ユーザー情報を取得する
     *
     * @param GRN_Bulletin_Article $object データオブジェクト
     * @param array                $data   情報を格納する配列
     */
    function getNotifierView($object, & $data)
    {
        if (($notifier = $object->get('notifier'))) {
            $data['notifier_uid'] = $notifier->getOID();
            $data['notifier_name'] = $notifier->get('display_name');
        } else {
            $data['notifier_uid'] = 0;
            $data['notifier_name'] = $object->get('notifier_name');
        }
        $data['ntime'] = $object->get('ntime');
    }


    /**
     * カテゴリ情報を取得する
     *
     * @param CB_User              $user    ユーザー
     * @param GRN_Bulletin_Article $article 掲示
     * @param array                $data    情報を格納する配列
     */
    function getArticleCategoryView($user, $article, & $data)
    {
        $category = $article->get('category');

        if ($category) {
            $category_auth = $category->getAuthorities($user);
            $data['category_auth'] = $category_auth;
            $data['cid'] = $category->getOID();

            if ($category_auth['read']) {
                $data['category_name'] = $category->get('name');
            }
        } else {
            $data['cid'] = 'deleted';
        }
    }


    /**
     * 記事の表示データを取得する
     *
     * @param CB_User              $user       ユーザー
     * @param GRN_Bulletin_Article $article    記事
     * @param bool                 $read_state whether to get a read status of the article
     *
     * @return array
     */
    function getArticleListView($user, $article, $read_state = false)
    {
        $for_view = [
            'aid'                   => $article->getOID(),
            'title'                 => $article->get('subject'),
            'stime'                 => $this->getTermStartDate($article),
            'etime'                 => $this->getTermEndDate($article),
            'data'                  => $article->get('data'),
            'file_attached'         => $article->getNumFiles(),
            'group_name'            => $this->getArticleUserGroup($article),
            'manually_enter_sender' => $article->get('manually_enter_sender')
        ];

        $this->getArticleCategoryView($user, $article, $for_view);
        $this->getCreatorView($article, $for_view);
        $this->getModifierView($article, $for_view);
        $this->getNotifierView($article, $for_view);

        if ($article instanceof GRN_Bulletin_Article) {
            $for_view['published'] = $article->isPublished();
            $for_view['expired'] = $article->isExpired();
        }

        if ($user && $read_state) {
            $for_view['unread'] = $article->getReadStatus($user);
        }

        return $for_view;
    }


    /**
     * 記事の表示データを取得する
     *
     * @param CB_User              $user        ユーザー
     * @param GRN_Bulletin_Article $article     記事
     * @param bool                 $read_status 既読情報などユーザーに対する状態を含む場合はTRUE
     *
     * @return array
     */
    function getArticleView($user, $article, $read_status = false)
    {
        assert('!is_null($article) && $article !== FALSE');

        if ( ! is_object($article)) {
            require_once('bulletin/error_code.csp');
            cb_throw_error(E_GRN_BULLETIN_ARTICLE_NOT_FOUND);
        }
        // use for Mobile API return group id
        //----------------
        $group_id = null;
        $user_group = $article->get('creator_group');
        if ( ! is_null($user_group)) {
            $group_id = $user_group->getOID();
        }
        //----------------
        //reserve_int1 field is use GRREQ-136
        $for_view = [
            'aid'                   => $article->getOID(),
            'title'                 => $article->get('subject'),
            'stime'                 => $this->getTermStartDate($article),
            'etime'                 => $this->getTermEndDate($article),
            'start_is_datetime'     => $article->get('start_is_datetime'),
            'end_is_datetime'       => $article->get('end_is_datetime'),
            'data'                  => $article->get('data'),
            'html'                  => $article->get('html'),
            'can_follow'            => $article->get('can_follow'),
            'creator_group_id'      => $group_id,
            'group_name'            => $this->getArticleUserGroup($article),
            'reserve_int1'          => $article->get('reserve_int1'),
            'manually_enter_sender' => $article->get('manually_enter_sender'),
        ];

        if ($article instanceof GRN_Bulletin_Article) {
            $for_view['published'] = $article->isPublished();
            $for_view['expired'] = $article->isExpired();
        }

        $this->getArticleCategoryView($user, $article, $for_view);
        $this->getCreatorView($article, $for_view);
        $this->getModifierView($article, $for_view);
        $this->getNotifierView($article, $for_view);

        if ($user && $read_status) {
            if ($article instanceof GRN_Bulletin_Article
                && $article->isPublished()
            ) {
                // 公開されている場合だけ通知、既読情報を追加

                $notify = [];
                $notify['enable_unsubscribe'] = true;
                $notify['notified'] = false;

                if ( ! ($category = $article->get('category'))) {
                    cb_throw_error(E_GRN_BULLETIN_CATEGORY_NOT_FOUND);
                }

                if ($category->isNotified($user)) {
                    $notify['notified'] = true;

                    if ($category->get('force_notify')) {
                        $notify['enable_unsubscribe'] = false;
                    }
                } elseif ($category->isSubscribed($user)) {
                    $notify['notified'] = true;
                }

                $notify['subscribed'] = $article->isSubscribed($user);

                // 通知情報
                $for_view['notify'] = $notify;
                // 既読情報
                $for_view['unread'] = $article->getReadStatus($user);
            }

        }

        // 添付ファイル

        $files = $article->getFiles();
        $files_for_view = [];

        foreach (array_keys($files) as $fid) {
            $file =& $files[$fid];
            $files_for_view[$fid] = $this->getFileLinkView($file);
        }

        $for_view['attach_files'] = $files_for_view;

        return $for_view;
    }

    /**
     * 表示用の掲示開始日を取得する
     *
     * @param GRN_Bulletin_Article $article 記事
     *
     * @return object CB_Date
     */
    function getTermStartDate($article)
    {
        require_once('fw/date.csp');

        if ( ! ($stime = $article->get('start_timestamp'))) {
            // 終了日が設定されている場合は、作成日を開始日として表示する
            //$stime = $article->get( 'ctime' );
            return null;
        }

        return cb_timestamp_to_datetime($stime->unix_ts);
    }

    /**
     * 表示用の掲示終了日を取得する
     * 内部データは１日ずれて持っているのでこの中で調整している
     *
     * @param GRN_Bulletin_Article $article 記事
     *
     * @return object CB_Date
     */
    function getTermEndDate($article)
    {
        if ( ! ($etime = $article->get('end_timestamp'))) {
            return null;
        }

        $end_is_datetime = $article->get('end_is_datetime');

        require_once('fw/date.csp');
        $dt = cb_timestamp_to_datetime($etime->unix_ts);

        if ( ! $end_is_datetime && ! $dt->hour) {
            cb_date_move_days($dt, -1);
        }

        return $dt;
    }

    /**
     * フォローの表示データを取得する
     *
     * @param CB_User             $user   ユーザー
     * @param GRN_Bulletin_Follow $follow フォロー
     *
     * @return array
     */
    function getFollowView($user, $follow)
    {
        $follow_for_view = [
            'follow_id' => $follow->getOID(),
            'id'        => $follow->get('follow_id'),
            'data'      => $follow->get('data'),
            'html'      => $follow->get('html'),
        ];

        $this->getCreatorView($follow, $follow_for_view);

        if ($user) {
            $follow_for_view['unread'] = $follow->isRead($user) ? false
                : true;
            $follow_for_view['deletable'] = $follow->isDeletable($user);
        }

        $files = $follow->getFiles();

        $files_for_view = [];

        foreach (array_keys($files) as $fid) {
            $file =& $files[$fid];
            $files_for_view[$fid] = $this->getFileLinkView($file);
        }

        $follow_for_view['attach_files'] = $files_for_view;

        return $follow_for_view;
    }

    /**
     * 一覧表示用フォローデータを取得する
     *
     * @param CB_User             $user
     * @param GRN_Bulletin_Follow $follow
     * @param bool                $read_state
     *
     * @return array
     */
    function getFollowListView($user, $follow, $read_state = true)
    {
        $article = $follow->get('article');

        $for_view = [
            'aid'           => $article->getOID(),
            'title'         => $article->get('subject'),
            'stime'         => $this->getTermStartDate($article),
            'etime'         => $this->getTermEndDate($article),
            'file_attached' => $article->getNumFiles(),
        ];

        $this->getArticleCategoryView($user, $article, $for_view);
        $this->getModifierView($article, $for_view);
        $this->getNotifierView($article, $for_view);

        if ($user && $read_state) {
            $for_view['unread'] = $article->getReadStatus($user);
        }

        $for_view['data'] = $follow->get('data');
        $for_view['follow_id'] = $follow->getOID();
        $for_view['id'] = $follow->get('follow_id');

        $this->getCreatorView($follow, $for_view);

        return $for_view;
    }

    /**
     * This function help to make path_info for building site position with breadcrumb
     *
     * @param $smarty                         GRN_Smarty
     * @param $cid                            int         category id
     * @param $aid                            int         article id
     * @param $bu_cate_view_id                int         make path for page operation/category_view
     * @param $bu_list_id                     int         make path for page operation/bulletin_list
     * @param $bu_access_id                   int         make path for page operation/access_list
     * @param $bu_access_pid                  int
     * @param $bu_notify_id                   int         make path for page operation/notify_list
     * @param $bu_notify_pid                  int
     * @param $bu_view_id                     int         make path for page operation/file_view
     * @param $bu_view_article_id             int         article id of page operation/file_view
     * @param $file_view_id                   int         file is of page operation/file_view
     * @param $follow_id                      int         follow id
     * @param $file_user_view_id              int         make path for page file_view
     * @param $flag_no_use_set_siteposition   boolean     using function setSitePosition or not (use in case page export)
     * @param $view_page                      string      current page
     * @param $bu_privilege_id                int         make path for page operation/privilege_list
     *
     * @return array|void
     */
    function prepareMakeSitePosition(
        $smarty,
        $cid = null,
        $aid = null,
        $bu_cate_view_id = null,
        $bu_list_id = null,
        $bu_access_id = null,
        $bu_access_pid = null,
        $bu_notify_id = null,
        $bu_notify_pid = null,
        $bu_view_id = null,
        $bu_view_article_id = null,
        $file_view_id = null,
        $follow_id = null,
        $file_user_view_id = null,
        $flag_no_use_set_siteposition = false,
        $view_page = null,
        $bu_privilege_id = null
    ) {
        require_once('bulletin/category.csp');
        $category_manager = new GRN_Bulletin_CategoryManager();

        $list = null;
        if ($cid) {
            $list = $category_manager->getListCategoryIdAncestor($cid);
        }

        if ($list) {
            global $G_container_base;
            /* @var GRN_Uum $uum */
            $uum = $G_container_base->getInstance('uum');
            $login = $uum->getLoginUser();

            require_once("fw/i18n.csp");
            require_once("fw/i18n/locale.csp");
            $i18n = CB_I18N::getInstance();
            $default_locale
                = CB_LocaleManager::getCurrentLanguage($login->getOID());
            $locale_id = CB_LocaleManager::getLanguageId($default_locale);

            $page_path = [];

            if ($file_user_view_id) {
                $page_path[] = [
                    'bulletin/file_view' => [
                        'cid'       => $cid,
                        'aid'       => $aid,
                        'follow_id' => $follow_id,
                        'fid'       => $file_user_view_id,
                        'name'      => grn_get_page_display_name('bulletin/file_view')
                    ]
                ];
            }

            if ($file_view_id) {
                $page_path[] = [
                    'bulletin/operation/file_view' => [
                        'cid'       => $bu_view_id,
                        'aid'       => $bu_view_article_id,
                        'follow_id' => $follow_id,
                        'fid'       => $file_view_id,
                        'name'      => grn_get_page_display_name(
                            'bulletin/operation/file_view'
                        )
                    ]
                ];
            }

            if ($bu_notify_id) {
                $page_path[] = [
                    'bulletin/operation/notify_list' => [
                        'nid'  => $bu_notify_id,
                        'poid' => $bu_notify_pid,
                        'name' => grn_get_page_display_name(
                            'bulletin/operation/notify_list'
                        )
                    ]
                ];
            }

            if ($bu_access_id) {
                $page_path[] = [
                    'bulletin/operation/access_list' => [
                        'nid'  => $bu_access_id,
                        'poid' => $bu_access_pid,
                        'name' => grn_get_page_display_name(
                            'bulletin/operation/access_list'
                        )
                    ]
                ];
            }

            if ($bu_privilege_id) {
                $page_path[] = [
                    'bulletin/operation/privilege_list' => [
                        'nid'  => $bu_privilege_id,
                        'name' => grn_get_page_display_name(
                            'bulletin/operation/privilege_list'
                        )
                    ]
                ];
            }

            if ($bu_view_id) {
                $page_path[] = [
                    'bulletin/operation/bulletin_view' => [
                        'cid'       => $bu_view_id,
                        'aid'       => $bu_view_article_id,
                        'follow_id' => $follow_id,
                        'name'      => grn_get_page_display_name(
                            'bulletin/operation/bulletin_view'
                        )
                    ]
                ];
            }

            if ($bu_list_id) {
                $page_path[] = [
                    'bulletin/operation/bulletin_list' => [
                        'cid'  => $bu_list_id,
                        'name' => grn_get_page_display_name(
                            'bulletin/operation/bulletin_list'
                        )
                    ]
                ];
            }

            if ($bu_cate_view_id) {
                $page_path[] = [
                    'bulletin/operation/category_view' => [
                        'cid'  => $bu_cate_view_id,
                        'name' => grn_get_page_display_name(
                            'bulletin/operation/category_view'
                        )
                    ]
                ];
            }

            if ($aid) {
                $page_path[] = [
                    'bulletin/view' => [
                        'cid'       => $cid,
                        'aid'       => $aid,
                        'follow_id' => $follow_id,
                        'name'      => grn_get_page_display_name('bulletin/view')
                    ]
                ];
            }

            foreach ($list as $value) {
                if (isset($value['language'][$locale_id])) {
                    $value['name'] = $value['language'][$locale_id]['name'];
                }
                $page_path[] = [
                    'bulletin/index' => [
                        'cid'  => $value['id'],
                        'name' => $value['name']
                    ]
                ];
            }
            $page_path[] = [
                'bulletin/index' => [
                    'sf'   => '1',
                    'name' => grn_get_page_display_name('bulletin/index') . '('
                              . cb_msg(
                                  'grn.bulletin', 'root_category_name', null,
                                  $default_locale
                              ) . ')'
                ]
            ];
            $page_path = array_reverse($page_path);

            if ($flag_no_use_set_siteposition) {
                return $this->makeSitePosition(null, $page_path, null, true);
            } else {
                $this->setSitePosition($smarty, $page_path, null, true);
            }
        } else {
            $page_path = [
                'bulletin/index' => ['cid' => $cid]
            ];
            $this->setSitePosition($smarty, $page_path);
        }
    }

    /**
     * サイトポジションの生成
     *
     * @param string     $current_page
     * @param array      $page_path
     * @param array|null $resource_args
     * @param bool       $bread_crumb
     *
     * @return array
     */
    function makeSitePosition(
        $current_page,
        $page_path,
        $resource_args = null,
        $bread_crumb = false
    ) {
        $positions = [];
        if ($page_path) {
            if (count($page_path) > 1 && $bread_crumb) {
                foreach ($page_path as $path) {
                    foreach ($path as $page_name => $args) {
                        // サイトポジションで一覧に戻るときは常に一覧状態を復元する
                        $base = basename($page_name);
                        if ($base == 'index'
                            || strpos($base, 'file_view') !== false
                            || strpos($base, 'list') !== false
                        ) {
                            $args['sf'] = 1;
                        }

                        $positions[] = ([
                                            'page' => $page_name,
                                            'name' => $args['name']
                                        ] + $args);

                    }
                }
            } else {
                foreach ($page_path as $page_name => $args) {
                    // サイトポジションで一覧に戻るときは常に一覧状態を復元する
                    $base = basename($page_name);
                    if ($base == 'index' || strpos($base, 'file_view') !== false
                        || strpos($base, 'list') !== false
                    ) {
                        $args['sf'] = 1;
                    }

                    if ($base == 'index') {
                        global $G_container_base;
                        /* @var GRN_Uum $uum */
                        $uum = $G_container_base->getInstance('uum');
                        $login = $uum->getLoginUser();

                        require_once("fw/i18n/locale.csp");
                        $default_locale
                            = CB_LocaleManager::getCurrentLanguage($login->getOID());

                        $positions[] = ([
                                            'page' => $page_name,
                                            'name' => grn_get_page_display_name($page_name,
                                                    $resource_args) . '('
                                                      . cb_msg(
                                                          'grn.bulletin',
                                                          'root_category_name',
                                                          null, $default_locale
                                                      ) . ')'
                                        ] + $args);
                    } else {
                        $positions[] = ([
                                            'page' => $page_name,
                                            'name' => grn_get_page_display_name($page_name,
                                                $resource_args)
                                        ]
                                        + $args);
                    }
                }
            }
        }

        if (is_null($current_page)) {
            $current_page = cb_get_pagename();
        }
        if (strpos($current_page, 'export') === false) {
            $positions[] = [
                'page' => "",
                'name' => grn_get_page_display_name($current_page,
                    $resource_args)
            ];
        }

        return $positions;
    }

    /**
     * Smartyにサイトポジションをセットする
     *
     * @param GRN_Smarty $smarty
     * @param array      $page_path
     * @param array|null $resource_args
     * @param bool       $bread_crumb
     */
    function setSitePosition(
        $smarty,
        $page_path,
        $resource_args = null,
        $bread_crumb = false
    ) {
        assert('$smarty');

        $page_title = grn_get_current_page_display_name($resource_args);

        $smarty->assign('app_id', 'bulletin');
        if ( ! $page_path) {
            global $G_container_base;
            /* @var GRN_Uum $uum */
            $uum = $G_container_base->getInstance('uum');
            $login = $uum->getLoginUser();

            $smarty->assign('page_title', $page_title);
        } else {
            $smarty->assign('page_title', $page_title);
        }

        $locator = GRN_ApplicationLocator::instance();
        $app = $locator->getInstance('bulletin');
        $smarty->assign('app_name', $app->getName());

        $smarty->assign('site_position',
            $this->makeSitePosition(null, $page_path, $resource_args,
                $bread_crumb));
    }

    /**
     * 入力に関するUI設定値を取得
     *
     * @param CB_User $user
     *
     * @return array|bool
     */
    function getInputConfigValues($user)
    {
        require_once('grn/application.csp');
        $locator = GRN_ApplicationLocator::instance();
        /* @var GRN_Bulletin $app */
        $app = $locator->getInstance('bulletin');
        $sconf = $app->getSystemConfig($user);

        if ( ! $sconf) {
            return false;
        }

        $config = [];
        $config['enable_follow']
            = $sconf->getEnableFollow();
        $config['enable_htmleditor']
            = $sconf->getEnableHtmlEditor();
        $config['enable_follow_autolink']
            = $sconf->getEnableFollowAutoLink();
        $config['enable_acknowledgement']
            = $sconf->getEnableAcknowledgement();
        $config['enable_manually_enter_sender']
            = $sconf->getEnableManuallyEnterSender();
        $config['default_value_from']
            = $sconf->getDefaultValueFrom();
        $config['enable_confirm_authority_read_and_notification_users']
            = $sconf->getEnableConfirmAuthorityReadAndNotificationUsers();
        require_once('grn/ui.csp');
        $um = GRN_UIConfigManager::getInstance();
        $uc = $um->getUserConfig($user);

        if ( ! $uc) {
            return $config;
        }

        $config['area_width'] = $uc->getAreaWidth();
        $config['area_height'] = $uc->getAreaHeight();

        return $config;
    }

    /**
     * UI設定値を取得
     *
     * @param CB_User $user
     * @param bool    $input
     *
     * @return array|bool
     */
    function getConfigValues($user, $input = false)
    {
        require_once('grn/ui.csp');
        $um = GRN_UIConfigManager::getInstance();
        $uc = $um->getUserConfig($user);

        if ( ! $uc) {
            return false;
        }

        $config = [
            'subject_width'  => $uc->getSubjectWidth(),
            'truncate_width' => $uc->getTruncateWidth(),
            'name_width'     => $uc->getNameWidth(),
            'inline'         => $uc->getInlineSetting(),
        ];

        if ($input) {
            $config += $this->getInputConfigValues($user);
        }

        return $config;
    }


    /**
     * 一覧上で隣接する前後の記事のIDを取得する
     *
     * @param CB_User                                 $user         ユーザー
     * @param GRN_Bulletin_Article|GRN_Bulletin_Draft $article      記事
     * @param string                                  $default_sort ソートの初期値
     *
     * @return array  array( 'prev'=>前の記事ID, 'next'=>後の記事ID )
     */
    function getNeighborsView($user, $article, $default_sort = 'mtd')
    {
        $coll = null;
        $view_page = null;

        // ページ名から一覧オブジェクトを生成する

        if ($this->_page == 'bulletin/draft_list') {
            require_once('bulletin/draft_util.csp');
            $coll = new GRN_Bulletin_DraftList($user);
            $view_page = 'bulletin/draft_view';
        } elseif ($this->_page == 'bulletin/wait_list') {
            $order_column = $this->getListOrderColumn(null, $default_sort);

            require_once('bulletin/article_util.csp');
            require_once('bulletin/bean/GrnBulletinArticleCondition.csp');

            $conditionObj = new GrnBulletinArticleCondition();
            $conditionObj->setUser($user);
            $conditionObj->setArticleTerm('before');
            $conditionObj->addSort($order_column['column'],
                $order_column['order']);
            $conditionObj->setArticle($article);
            $conditionObj->setPersonal(true);

            $coll = new GRN_Bulletin_ArticleBeforeList($conditionObj);
            $view_page = 'bulletin/wait_view';
        } elseif ($this->_page == 'bulletin/system/wait_list') {
            global $G_INPUT;
            if ($G_INPUT['cid']) {
                require_once('bulletin/category.csp');
                $cm = GRN_Bulletin_CategoryManager::getInstance();
                $category = $cm->getCategory($user, $G_INPUT['cid']);
            } else {
                $category = null;
            }

            $order_column = $this->getListOrderColumn(null, $default_sort);

            require_once('bulletin/article_util.csp');
            require_once('bulletin/bean/GrnBulletinArticleCondition.csp');

            $conditionObj = new GrnBulletinArticleCondition();
            $conditionObj->setUser($user);
            $conditionObj->setCategory($category);
            $conditionObj->setArticleTerm('before');
            $conditionObj->addSort($order_column['column'],
                $order_column['order']);
            $conditionObj->setArticle($article);

            $coll = new GRN_Bulletin_ArticleBeforeList($conditionObj);

            $view_page = 'bulletin/system/wait_view';
        } elseif ($this->_page == 'bulletin/system/bulletin_list') {
            global $G_INPUT;
            if ($G_INPUT['cid']) {
                require_once('bulletin/category.csp');
                $cm = GRN_Bulletin_CategoryManager::getInstance();
                $category = $cm->getCategory($user, $G_INPUT['cid']);
            } else {
                $category = null;
            }

            $order_column = $this->getListOrderColumn(null, $default_sort);

            require_once('bulletin/article_util.csp');
            require_once('bulletin/bean/GrnBulletinArticleCondition.csp');

            $conditionObj = new GrnBulletinArticleCondition();
            $conditionObj->setUser($user);
            $conditionObj->setCategory($category);
            $conditionObj->setArticleTerm('not_before');
            $conditionObj->addSort($order_column['column'],
                $order_column['order']);
            $conditionObj->setArticle($article);

            $coll = new GRN_Bulletin_ArticleList($conditionObj);
            $view_page = 'bulletin/system/bulletin_view';
        } else {
            $category = $article->get('category');
            $order_column = $this->getListOrderColumn(null, $default_sort);

            require_once('bulletin/article_util.csp');
            require_once('bulletin/bean/GrnBulletinArticleCondition.csp');

            $conditionObj = new GrnBulletinArticleCondition();
            $conditionObj->setUser($user);
            $conditionObj->setCategory($category);
            $conditionObj->addSort($order_column['column'],
                $order_column['order']);
            $conditionObj->setArticle($article);

            $coll = new GRN_Bulletin_ArticleList($conditionObj);
            $view_page = 'bulletin/view';
        }

        $result = [];

        // 前に記事IDを取得
        if (($id = $coll->getPreviousID($article)) > 0) {
            $result['prev'] = [
                'page'        => $view_page,
                'page_params' => ['aid' => $id]
            ];
        }
        // 後の記事IDを取得
        if (($id = $coll->getNextID($article)) > 0) {
            $result['next'] = [
                'page'        => $view_page,
                'page_params' => ['aid' => $id]
            ];
        }

        return $result;
    }

    /**
     * @param GRN_Bulletin_Article $article
     *
     * @return string
     */
    function getArticleUserGroup($article)
    {
        $group_name = null;
        $user_group = $article->get('creator_group');
        if ( ! is_null($user_group)) {
            $group_name = $user_group->get('name');
        }

        return $group_name;
    }

    public static function getUsersInArticle($article_for_view)
    {
        $result = [];
        $userIdIndeces = ["creator_uid", "modifier_uid", "notifier_uid"];
        foreach ($article_for_view as $key => $value) {
            if (in_array($key, $userIdIndeces, true)) {
                $result[$value] = 1;
            } elseif (is_array($value)) {
                $ret = static::getUsersInArticle($value);
                foreach (array_keys($ret) as $uid) {
                    $result[$uid] = 1;
                }
            }
        }

        return $result;
    }

    public static function makeUsersListFromOrgList($login_user, $org, $list)
    {
        $users_id = [];
        if (array_key_exists('user_list', $org)) {
            foreach ($org['user_list'] as $user_item) {
                $users_id[] = $user_item['uid'];
            }
        }
        foreach ($list['list'] as $list_item) {
            if ($list_item['type'] == GRN_ACCESS_TARGET_TYPE_USER) {
                $users_id[] = $list_item["tid"];
            }
        }
        $users_id = array_unique($users_id);

        return static::getUserInfoToShowUserName($users_id, $login_user);
    }


}


