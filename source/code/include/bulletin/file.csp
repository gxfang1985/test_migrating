<?php

use grn\fts\Application as FtsApplication;
use grn\fts\bulletin\IndexService;

/**
 * 掲示板添付ファイル管理クラス
 *
 * @author  Tanaka, Yoshiaki        2004/11
 * @package grn.bulletin
 */
require_once('grn/file.csp');
require_once('bulletin/table.csp');
require_once('grn/application.csp');

class GRN_Bulletin_FileBody extends GRN_FileBody
{
    var $_app_id = 'bulletin';

    var $col_file
        = [
            'type' => 'weak_relation',
            'to'   => 'GRN_Bulletin_File',
            'lazy' => true
        ];

    function __construct(& $row)
    {
        parent::__construct($row);
    }
}

class GRN_Bulletin_FileLog extends GRN_FileLog
{
    var $_app_id = 'bulletin';

    var $col_file
        = [
            'type' => 'relation',
            'to'   => 'GRN_Bulletin_File',
            'lazy' => true
        ];
    var $col_body
        = [
            'type' => 'weak_relation',
            'to'   => 'GRN_Bulletin_FileBody'
        ];

    function __construct(& $row)
    {
        parent::__construct($row);
    }
}

class GRN_Bulletin_FileLock extends GRN_FileLock
{
    var $_app_id = 'bulletin';

    var $col_file
        = [
            'type'   => 'relation',
            'to'     => 'GRN_Bulletin_File',
            'unique' => true
        ];

    function __construct(& $row)
    {
        parent::__construct($row);
    }
}

class GRN_Bulletin_File extends GRN_File
{
    var $_app_id = 'bulletin';
    var $_body_table_name = 'GRN_Bulletin_FileBody';
    var $_log_table_name = 'GRN_Bulletin_FileLog';
    var $_lock_table_name = 'GRN_Bulletin_FileLock';

    /**
     * @access private
     */
    var $_triggers = null;

    function __construct(& $row)
    {
        parent::__construct($row, 'grn.bulletin');
    }

    /**
     * invoke hooks on create, update or delete event
     *
     * @access public
     *
     * @param string $action action
     */
    function runHook($action)
    {
        if (is_null($this->_triggers)) {
            $loader = new CB_PluginLoader('grn.bulletin.file');
            $this->_triggers = $loader->loadHooks();
        }

        foreach ($this->_triggers as $hook) {
            call_user_func($hook, $this, $action);
        }
    }

    // override
    function setTitle($title)
    {
        parent::setTitle($title);
        $this->runHook('update');
    }

    /**
     * ファイルボディを更新してバージョンを上げる.
     *
     * @param mixed  $user    {@link CB_User}, or NULL.
     * @param mixed  $file    {@link GRN_ServerFile}, or an element of
     *                          $_FILES, or a path string of a file.
     * @param string $comment comment on this operation.
     *
     * @return bool             TRUE if success, FALSE otherwise.
     */
    function update($user, $file, $comment)
    {
        parent::update($user, $file, $comment);
        $this->runHook('update');
    }

    /**
     * ファイル実体を過去のバージョンから復活させる.
     *
     * @param mixed  $user            {@link CB_User}, or NULL.
     * @param int    $restore_version 復活するバージョン
     * @param string $comment         comment on this operation.
     *
     * @return bool             TRUE if success, FALSE otherwise.
     */
    function restore($user, $restore_version, $comment)
    {
        parent::restore($user, $restore_version, $comment);
        $this->runHook('update');
    }
}

class GRN_Bulletin_FileManager_Core extends GRN_FileManager
{
    function __construct()
    {
        $this->_file_table = cb_class2table('GRN_Bulletin_File');
        $this->_body_table = cb_class2table('GRN_Bulletin_FileBody');
    }
}

/**
 * 掲示板の添付ファイル管理クラス
 *
 * @package grn.bulletin
 */
class GRN_Bulletin_FileManager
{
    private static $_instance = null;

    /**
     * @static
     * @return GRN_Bulletin_FileManager
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * @access private
     */
    var $_tab_file = null;


    function __construct()
    {
        $app_locator = GRN_ApplicationLocator::instance();
        $tm = $app_locator->getTableManager('bulletin');
        $this->_tab_file = $tm->getTableInfo('GRN_Bulletin_FileRelation');
    }

    /**
     * @param int|null                                                    $id
     * @param GRN_Bulletin_Article|GRN_Bulletin_Follow|GRN_Bulletin_Draft $object
     *
     * @return string
     */
    function _makeCondition($id, $object)
    {
        $query = '';

        $app_locator = GRN_ApplicationLocator::instance();
        $database = $app_locator->getConnection('bulletin');

        if ($id) {
            $query = cb_queryf($database, "col_file = '@S' AND ", $id);
        }

        if ($object instanceof GRN_Bulletin_Article) {
            $query .= cb_queryf($database,
                "col_article = '@S' AND col_follow IS NULL", $object->getOID());
        } elseif ($object instanceof GRN_Bulletin_Follow) {
            $article = $object->get('article');
            /* @var GRN_Bulletin_Article $article */
            $query .= cb_queryf($database,
                "col_article = '@S' AND col_follow = '@S'", $article->getOID(),
                $object->getOID());
        } elseif ($object instanceof GRN_Bulletin_Draft) {
            $query .= cb_queryf($database, "col_draft = '@S'",
                $object->getOID());
        } else {
            assert('FALSE');

            return null;
        }

        return $query;
    }


    /**
     * 記事の本文に添付されたファイル数を取得する
     *
     * @param GRN_Bulletin_Article $object 記事
     *
     * @return int|FALSE  添付ファイル数
     */
    function getNumFiles($object)
    {
        if ( ! $object) {
            return 0;
        }

        $app_locator = GRN_ApplicationLocator::instance();
        $db = $app_locator->getConnection('bulletin');

        if ( ! ($condition = $this->_makeCondition(null, $object))) {
            return 0;
        }

        $result
            = $db->query("SELECT COUNT(*) FROM tab_grn_bulletin_filerelation where "
                         . $condition);
        if (cb_is_db_result($result)
            && ($row =& $db->fetch_row($result)) !== false
        ) {
            $db->free_result($result);

            return $row[0];
        }

        return false;
    }

    /**
     * 記事の本文に添付されたファイル数を取得する（直クエリ版）
     *
     * @param int $object_id 記事ID
     *
     * @return int  添付ファイル数
     */
    function getNumFileInfos($object_id)
    {
        if ( ! $object_id) {
            return 0;
        }

        $app_locator = GRN_ApplicationLocator::instance();
        $database = $app_locator->getConnection('bulletin');

        $condition = cb_queryf($database,
            "col_article = '@S' AND col_follow IS NULL", $object_id);
        $result
            = $database->query("SELECT COUNT(*) FROM tab_grn_bulletin_filerelation where "
                               . $condition);
        if (cb_is_db_result($result)
            && ($row =& $database->fetch_row($result)) !== false
        ) {
            $database->free_result($result);

            return $row[0];
        }

        return false;
    }

    /**
     * 記事またはフォローの添付ファイルを取得する
     *
     * @param GRN_Bulletin_Article|GRN_Bulletin_Follow|GRN_Bulletin_Draft $object 記事
     * @param string                                                      $id     ファイルID
     *
     * @return GRN_File 存在しない場合はFALSEを返す
     */
    function getFile($object, $id)
    {
        if ( ! $object) {
            $ret = false;

            return $ret;
        }

        $db = $this->_tab_file->getDBConnection();
        $id = $db->escape($id);

        $rowset = new CB_RowSet($this->_tab_file);

        if ( ! ($condition = $this->_makeCondition($id, $object))) {
            $ret = false;

            return $ret;
        }

        $rowset->addCondition($condition);
        $row = $rowset->iterate();
        $rowset->destroy();

        if ( ! $row) {
            $ret = false;

            return $ret;
        }

        $ret = $row->get('file');

        return $ret;
    }

    /**
     * 記事またはフォローに添付されたファイルを全て取得する
     *
     * @param GRN_Bulletin_Article|GRN_Bulletin_Follow|GRN_Bulletin_Draft $object 記事
     *
     * @return GRN_File[]
     */
    function getFiles($object)
    {
        if ( ! $object) {
            return [];
        }

        $rowset = new CB_RowSet($this->_tab_file);

        if ( ! ($condition = $this->_makeCondition(null, $object))) {
            return [];
        }
        $rowset->addCondition($condition);

        $files = [];
        while ( ! is_null(($row = $rowset->iterate()))) {
            $files[$row->getId('file')] = $row->get('file');
        }

        return $files;
    }

    /**
     * 記事とフォローに添付された全てのファイルを取得する
     *
     * @param GRN_Bulletin_Article $article 記事
     *
     * @return array  array( $aid => & GRN_File, ... ,
     *                       'follow' => array( $fid => & GRN_File, ... ) )
     */
    function getAllAttachedFiles($article)
    {
        if ( ! $article) {
            return [];
        }

        $rowset = new CB_RowSet($this->_tab_file);
        $rowset->addCondition($rowset->queryf("col_article = '@S'",
            $article->getOID()));

        $files = [];
        while ( ! is_null(($row = $rowset->iterate()))) {
            $file = $row->get('file');

            if ( ! ($follow = $row->get('follow'))) {
                $files[$file->getOID()] = $file;
            } else {
                if ( ! array_key_exists('follow', $files)) {
                    $files['follow'] = [];
                }

                if ( ! array_key_exists($follow->getOID(), $files['follow'])) {
                    $files['follow'][$follow->getOID()] = [];
                }

                $files['follow'][$follow->getOID()][$file->getOID()] = $file;
            }
        }

        return $files;
    }

    /**
     * @param GRN_Bulletin_Article|GRN_Bulletin_Follow|GRN_Bulletin_Draft $object
     *
     * @return array
     */
    function _makeLogMessage($object)
    {
        $log = [];

        if ($object instanceof GRN_Bulletin_Article) {
            $log = ['aid' => $object->getOID()];
        } elseif ($object instanceof GRN_Bulletin_Follow) {
            $article = $object->get('article');
            $log = [
                'aid'       => $article->getOID(),
                'follow_id' => $object->getOID()
            ];
        } elseif ($object instanceof GRN_Bulletin_Draft) {
            $log = ['aid(draft)' => $object->getOID()];
        }

        return $log;
    }


    /**
     * ファイルを添付する
     *
     * @param CB_User                                                     $user   操作ユーザー
     * @param GRN_Bulletin_Article|GRN_Bulletin_Follow|GRN_Bulletin_Draft $object 記事またはフォロー
     * @param array|GRN_File                                              $file   ファイル、$_FILESの中身かGRN_Fileオブジェクト
     *
     * @return GRN_File 失敗の場合はFALSEを返す
     */
    function addFile($user, $object, & $file)
    {
        if ( ! $object || ! $file) {
            $ret = false;

            return $ret;
        }

        $object->access($user, GRN_BULLETIN_ACCESS_W, false);

        require_once('grn/file.csp');
        $fm = new GRN_Bulletin_FileManager_Core();

        $dbfile = null;

        if ($file instanceof GRN_File) {
            if ( ! ($dbfile = $fm->duplicateFile($user, $file, null))) {
                $ret = false;

                return $ret;
            }
        } else {
            if ( ! ($dbfile = $fm->createFile($user, $file, null))) {
                $ret = false;

                return $ret;
            }
        }
        /* @var GRN_Bulletin_File $dbfile */

        $row = $this->_tab_file->newRow();

        if ($object instanceof GRN_Bulletin_Article) {
            $row->set('article', $object->_getRow());
        } elseif ($object instanceof GRN_Bulletin_Follow) {
            $article = $object->get('article');
            $row->set('article', $article->_getRow());
            $row->set('follow', $object->_getRow());
        } elseif ($object instanceof GRN_Bulletin_Draft) {
            $row->set('draft', $object->_getRow());
        } else {
            $row->delete();
            $ret = false;

            return $ret;
        }

        $row->set('file', $dbfile);
        $row->updateNow();

        // logging
        $log = $this->_makeLogMessage($object);
        grn_bulletin_write_log('create', 'file',
            $log + ['fid' => $dbfile->getOID()]);

        $dbfile->runHook('create');

        $this->createFileIndex($row, $dbfile);

        return $dbfile;
    }

    /**
     * @param GRN_Bulletin_FileRelation $row
     * @param GRN_Bulletin_File         $dbfile
     */
    private function createFileIndex($row, $dbfile)
    {
        if (FtsApplication::isAvailable() && is_null($row->get('draft'))) {
            $fileBody = $dbfile->getBody($dbfile->get('version'));
            $searchService = new IndexService();
            $searchService->createFileIndex(new GRN_Bulletin_File($dbfile),
                $fileBody, $row);
        }
    }

    /**
     * @param CB_User                                                     $user
     * @param GRN_Bulletin_Article|GRN_Bulletin_Follow|GRN_Bulletin_Draft $object
     * @param                                                             $file
     *
     * @return bool|GRN_File
     */
    function attachFile($user, $object, & $file)
    {
        if ( ! $object || ! $file) {
            $ret = false;

            return $ret;
        }

        $object->access($user, GRN_BULLETIN_ACCESS_W, true);

        require_once('grn/file.csp');
        $fm = new GRN_Bulletin_FileManager_Core();

        $dbfile = null;
        if ($file instanceof GRN_File) {
            $dbfile = $file;
        } else {
            if ( ! ($dbfile = $fm->createFile($user, $file, null))) {
                $ret = false;

                return $ret;
            }
        }
        /* @var GRN_Bulletin_File $dbfile */

        $row = $this->_tab_file->newRow();

        if ($object instanceof GRN_Bulletin_Article) {
            $row->set('article', $object->_getRow());
        } elseif ($object instanceof GRN_Bulletin_Follow) {
            $article = $object->get('article');
            $row->set('article', $article->_getRow());
            $row->set('follow', $object->_getRow());
        } elseif ($object instanceof GRN_Bulletin_Draft) {
            $row->set('draft', $object->_getRow());
        } else {
            $row->delete();
            $ret = false;

            return $ret;
        }

        $row->set('file', $dbfile);

        $row->updateNow();

        $dbfile->runHook('update');

        $this->createFileIndex($row, $dbfile);

        return $dbfile;
    }

    /**
     * @param CB_User                                                     $user
     * @param GRN_Bulletin_Article|GRN_Bulletin_Follow|GRN_Bulletin_Draft $object
     * @param string                                                      $id
     *
     * @return bool
     */
    function deleteFile($user, $object, $id)
    {
        if ( ! $object) {
            return false;
        }

        $object->isDeletable($user, true);

        $db = $this->_tab_file->getDBConnection();
        $id = $db->escape($id);

        $rowset = new CB_RowSet($this->_tab_file);

        if ( ! ($condition = $this->_makeCondition($id, $object))) {
            return false;
        }

        $rowset->addCondition($condition);
        $row = $rowset->iterate();
        $rowset->destroy();

        if ( ! $row) {
            return false;
        }

        if (($f = $row->get('file'))) {
            /* @var GRN_Bulletin_File $f */
            // logging
            $log = $this->_makeLogMessage($object);
            $id = $f->getOID();
            grn_bulletin_write_log('delete', 'file', $log + ['fid' => $id]);

            //force release lock file when $object can be deleted by $user
            $lock = $f->getLockObject();
            /* @var GRN_Bulletin_FileLock $lock */
            $lock->releaseLock(true);

            $f->delete();

            if (FtsApplication::isAvailable()) {
                $searchService = new IndexService();
                $searchService->deleteIndexByFileId($id);
            }
        }

        $row->delete();

        return true;
    }

    /**
     * @param CB_User                                $user
     * @param GRN_Bulletin_Draft|GRN_Bulletin_Follow $object
     *
     * @return bool
     */
    function deleteFiles($user, $object)
    {
        if ( ! $object) {
            return false;
        }

        $object->isDeletable($user, true);

        $rowset = new CB_RowSet($this->_tab_file);

        if ( ! ($condition = $this->_makeCondition(null, $object))) {
            return false;
        }

        $rowset->addCondition($condition);

        $log = $this->_makeLogMessage($object);

        while ( ! is_null($row = $rowset->iterate())) {
            if (($f = $row->get('file'))) {
                /* @var GRN_Bulletin_File $f */
                grn_bulletin_write_log('delete', 'file',
                    $log + ['fid' => $f->getOID()]);

                //force release lock file when $object can be deleted by $user
                $lock = $f->getLockObject();
                /* @var GRN_Bulletin_FileLock $lock */
                $lock->releaseLock(true);

                $f->delete();
            }
            $row->delete();
        }
        $rowset->destroy();

        return true;
    }

    /**
     * @param CB_User              $user
     * @param GRN_Bulletin_Article $article
     *
     * @return bool
     */
    function deleteAllAttachedFiles($user, $article)
    {
        if ( ! $article) {
            return false;
        }

        $article->isDeletable($user, true);

        $rowset = new CB_RowSet($this->_tab_file);
        $rowset->addCondition($rowset->queryf("col_article = '@S'",
            $article->getOID()));

        $log = $this->_makeLogMessage($article);

        while ( ! is_null(($row = $rowset->iterate()))) {
            /** @var $row GRN_Bulletin_FileRelation */
            if (($f = $row->get('file'))) {
                /* @var GRN_Bulletin_File $f */
                grn_bulletin_write_log('delete', 'file',
                    $log + ['fid' => $f->getOID()]);

                //force release lock file when $article can be deleted by $user
                /* @var GRN_Bulletin_FileLock $lock */
                $lock = $f->getLockObject();
                $lock->releaseLock(true);
                $f->delete();
            }
            $row->delete();
        }

        return true;
    }

    /**
     * @param CB_User            $user
     * @param GRN_Bulletin_Draft $object
     *
     * @return bool
     */
    function releaseFiles($user, $object)
    {
        if ( ! $object) {
            return false;
        }

        $object->access($user, GRN_BULLETIN_ACCESS_W, true);

        $rowset = new CB_RowSet($this->_tab_file);

        if ( ! ($condition = $this->_makeCondition(null, $object))) {
            return false;
        }

        $rowset->addCondition($condition);

        while ( ! is_null($row = $rowset->iterate())) {
            $row->delete();
        }
        $rowset->destroy();

        return true;
    }

    /**
     * @param CB_User                                  $user
     * @param GRN_Bulletin_Article|GRN_Bulletin_Follow $owner
     * @param                                          $file
     * @param bool                                     $throw_error
     *
     * @return bool
     */
    function isDeletable($user, $owner, $file, $throw_error = false)
    {
        if ( ! $user || ! $owner || ! $file) {
            if ($throw_error) {
                require_once('bulletin/error_code.csp');
                cb_throw_error(E_GRN_BULLETIN_ACCESS_DENY_DELETE);
            }

            return false;
        }

        if ($owner instanceof GRN_Bulletin_Article
            || $owner instanceof GRN_Bulletin_Follow
        ) {
            if ( ! $owner->isDeletable($user, $throw_error)) {
                return false;
            }
        }

        return true;
    }

    /**
     * @param CB_User                                                     $user
     * @param GRN_Bulletin_Article|GRN_Bulletin_Follow|GRN_Bulletin_Draft $owner
     * @param GRN_Bulletin_File                                           $file
     * @param bool                                                        $throw_error
     *
     * @return bool
     */
    function isModifiable($user, $owner, $file, $throw_error = false)
    {
        if ( ! $user || ! $owner || ! $file) {
            if ($throw_error) {
                require_once('bulletin/error_code.csp');
                cb_throw_error(E_GRN_BULLETIN_ACCESS_DENY_WRITE);
            }

            return false;
        }

        if ($owner instanceof GRN_Bulletin_Article
            || $owner instanceof GRN_Bulletin_Follow
        ) {
            return $owner->isModifiable($user, $throw_error);
        }

        if ($user->getOID() != $file->getId('creator')) {
            if ($throw_error) {
                require_once('bulletin/error_code.csp');
                cb_throw_error(E_GRN_BULLETIN_ACCESS_DENY_WRITE);
            }

            return false;
        }

        return true;
    }

    /**
     * @param int $fileId
     *
     * @return int|bool return FALSE if the file doesn't exist or its related article was deleted.
     */
    public function getArticleId($fileId)
    {
        $relation = $this->getRelationRow($fileId);

        if ( ! $relation) {
            return false;
        }

        $article = $relation->get('article');
        if ( ! $article) {
            return false;
        }

        /** @var CB_Row $article */

        return $article->getOID();
    }

    /**
     * @param int $fileId
     *
     * @return int|bool return FALSE if the file doesn't exist or its related follow doesn't exist.
     */
    public function getFollowId($fileId)
    {
        $relation = $this->getRelationRow($fileId);

        if ( ! $relation) {
            return false;
        }

        $follow = $relation->get('follow');
        if ( ! $follow) {
            return false;
        }

        /** @var CB_Row $follow */

        return $follow->getOID();
    }

    /**
     * @param $fileId
     *
     * @return CB_Row|null  return null if the file's relation doesn't exist.
     */
    private function getRelationRow($fileId)
    {
        $app_locator = GRN_ApplicationLocator::instance();
        $database = $app_locator->getConnection('bulletin');

        $rowset = new CB_RowSet($this->_tab_file);
        $rowset->addCondition(cb_queryf($database, "col_file = '@S'",
            (int)$fileId));
        $relation = $rowset->iterate();
        $rowset->destroy();

        return $relation;
    }
}
