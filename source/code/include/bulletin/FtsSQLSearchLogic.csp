<?php

namespace grn\bulletin;

use grn\fts\api\SearchApiParameter;
use grn\fts\SearchQuery;
use grn\fts\SearchTarget;
use grn\fts\SQLSearchLogicInterface;

class FtsSQLSearchLogic implements SQLSearchLogicInterface
{
    /** @var SearchApiParameter */
    private $parameter;

    private function __construct(SearchApiParameter $parameter)
    {
        $this->parameter = $parameter;
    }

    /**
     * @param SearchApiParameter $parameter
     *
     * @return FtsSQLSearchLogic
     */
    public static function create($parameter)
    {
        return new self($parameter);
    }

    /**
     * @return \Iterator
     */
    public function iterator()
    {
        if (is_null($this->parameter->getKeyword())
            || strlen($this->parameter->getKeyword()) == 0
        ) {
            return;
        }

        $search_result = $this->search();

        foreach ($search_result as $item) {
            yield $item;
        }
    }

    /**
     * @return array
     */
    private function search()
    {
        require_once('bulletin/include_fts_search.csp');
        require_once('bulletin/bean/GrnBulletinCategoryCondition.csp');
        require_once('bulletin/category.csp');

        $search_category_condition = new \GrnBulletinCategoryCondition();

        $login_user = cb_get_login_user();

        $cm = \GRN_Bulletin_CategoryManager::getInstance();
        $base_category = $cm->getCategory(
            $login_user, $this->parameter->getBulletinCategoryId(),
            GRN_BULLETIN_ACCESS_R, true
        );
        if ( ! $base_category) {
            cb_throw_error(E_GRN_BULLETIN_CATEGORY_NOT_FOUND);
        }

        $search_category_condition->setCategoryId($base_category);
        $search_category_condition->setOffset($this->parameter->getStart());
        $search_category_condition->setLimit(SearchQuery::DEFAULT_SIZE + 1);
        $search_category_condition->setText($this->parameter->getKeyword());
        $search_category_condition->setSearchAll($this->parameter->getTarget()
                                                 == SearchTarget::ALL);

        $search = new \GRN_Bulletin_CategoryFtsSearch($login_user,
            $search_category_condition);

        return $search->searchExecute();
    }

    /**
     * @param $parameter \grn\fts\api\SearchApiParameter
     */
    public function setOptionalCondition($parameter)
    {
    }
}
