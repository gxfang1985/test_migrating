<?php

/**
 * 掲示板 既読情報
 *
 * @author  Tanaka, Yoshiaki        2005/02
 * @package grn.bulletin
 */
require_once('grn/application.csp');

/**
 * @package grn.bulletin
 */
class GRN_Bulletin_ArticleReadStatus
{
    private static $_instance = null;

    /**
     * @return GRN_Bulletin_ArticleReadStatus
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * @access private
     */
    var $_table = null;
    /**
     * @access private
     */
    var $_cache = [];
    /**
     * @access private
     */
    var $_cache_info = [];

    function __construct()
    {
        $app_locator = GRN_ApplicationLocator::instance();
        $tm = $app_locator->getTableManager('bulletin');

        $this->_table = $tm->getTableInfo('grn_bulletin_readstatus');
    }

    function get($user, & $article)
    {
        if ( ! $user || ! $article) {
            assert('FALSE');
            $ret = false;

            return $ret;
        }

        $uid = $user->getOID();
        $aid = $article->getOID();

        if (array_key_exists($uid, $this->_cache)) {
            if (array_key_exists($aid, $this->_cache[$uid])) {
                return $this->_cache[$uid][$aid];
            }
        }

        $rowset = new CB_RowSet($this->_table);
        $rowset->addCondition($rowset->queryf("col_user = '@S' AND col_article = '@S'",
            $uid, $aid));
        $rowset->limit(0, 1);
        $row = $rowset->iterate();
        $rowset->destroy();

        if ( ! array_key_exists($uid, $this->_cache)) {
            $this->_cache[$uid] = [];
        }

        $this->_cache[$uid][$aid] = $row;

        return $row;
    }

    function get2($user, $article)
    {
        $uid = $user->getOID();
        $aid = $article->getOID();

        if (array_key_exists($uid, $this->_cache)) {
            if (array_key_exists($aid, $this->_cache[$uid])) {
                $row =& $this->_cache[$uid][$aid];
                if ( ! $row) {
                    return false;
                }

                $info = [
                    '_id'             => $row->getOID(),
                    'first_timestamp' => $row->get('first_timestamp'),
                    'last_timestamp'  => $row->get('last_timestamp')
                ];

                return $info;

            }
        }

        $app_locator = GRN_ApplicationLocator::instance();
        $db = $app_locator->getConnection('bulletin');

        $condition = cb_queryf($db, "col_user = '@S'  AND col_article = '@S'",
            $user->getOID(), $article->getOID());
        $tablename = 'tab_' . $this->_table->getTableName();

        $query
            = sprintf('SELECT _id, col_first_timestamp, col_last_timestamp FROM %s WHERE %s;',
            $tablename, $condition);
        $result = $db->query($query);

        if (cb_is_db_result($result)
            && ($row = $db->fetch_row($result)) !== false
        ) {
            $db->free_result($result);
            $info = [
                '_id'             => $row[0],
                'first_timestamp' => $row[1],
                'last_timestamp'  => $row[2]
            ];

            return $info;
        }

        return false;
    }

    function getCountReadByArticle($article)
    {
        $app_locator = GRN_ApplicationLocator::instance();
        $db = $app_locator->getConnection('bulletin');

        $condition = cb_queryf($db, " col_article = '@S'", $article->getOID());
        $tablename = 'tab_' . $this->_table->getTableName();

        $query = sprintf('SELECT count(_id) FROM %s WHERE %s;', $tablename,
            $condition);
        $result = $db->query($query);

        if (cb_is_db_result($result)
            && ($row = $db->fetch_row($result)) !== false
        ) {
            $db->free_result($result);

            return $row[0];
        }
    }

    // Get user list have confirm
    function getUsersByArticle($article, $ids)
    {
        if (isset($ids) && strlen($ids) > 0) {
            $app_locator = GRN_ApplicationLocator::instance();
            $db = $app_locator->getConnection('bulletin');
            $conditions = cb_queryf($db, " col_article = '@S' ", $article);
            $tablename = 'tab_' . $this->_table->getTableName();
            $query
                = sprintf('SELECT _id, col_user, col_first_timestamp FROM %s WHERE %s and col_user in (%s) order by col_user ASC; ',
                $tablename, $conditions, $ids);
            $result = $db->query($query);
            $rows = [];
            while ($row = $db->fetch_assoc($result)) {
                $ts = new CB_TimeStamp();
                $ts->unix_ts = $row['col_first_timestamp'];
                $tsex = new CB_TimeStampEx($ts);
                $first_timestamp = $tsex->getDateTime();
                $uid = $row['col_user'];
                $info = [
                    '_id'             => $row['_id'],
                    'col_user'        => $uid,
                    'first_timestamp' => $first_timestamp,
                    'first_time'      => $row['col_first_timestamp']
                ];//$first_timestamp
                $rows[$uid] = $info;
            }

            return $rows;
        } else {
            return null;
        }

    }

    /**
     * @return array
     */
    function &getInfo($user, $article_info)
    {
        $retf = false;

        if ( ! $user || ! $article_info) {
            assert('FALSE');

            return $retf;
        }

        $uid = $user->getOID();
        $aid = $article_info['_id'];

        if (array_key_exists($uid, $this->_cache_info)) {
            if (array_key_exists($aid, $this->_cache_info[$uid])) {
                return $this->_cache_info[$uid][$aid];
            }
        }

        $app_locator = GRN_ApplicationLocator::instance();
        $database =& $app_locator->getConnection('bulletin');

        $condition = cb_queryf($database,
            "col_user = '@S' AND col_article = '@S'", $user->getOID(),
            $article_info['_id']);
        $tablename = 'tab_' . $this->_table->getTableName();

        $query
            = sprintf('SELECT _id, col_first_timestamp, col_last_timestamp FROM %s WHERE %s;',
            $tablename, $condition);
        $result = $database->query($query);
        if ($result === false) {
            return $retf;
        }

        //Update Article Information List
        $row_info = $database->fetch_assoc($result);
        $database->free_result($result);

        if ($row_info === false) {
            return $retf;
        }

        if ( ! array_key_exists($uid, $this->_cache_info)) {
            $this->_cache_info[$uid] = [];
        }

        $this->_cache_info[$uid][$aid] = $row_info;

        return $row_info;
    }

    function create($user, $article, $ts)
    {
        if ( ! $user || ! $article || ! $ts) {
            assert('FALSE');
            $ret = null;

            return $ret;
        }

        $row = $this->_table->newRow();
        $row->set('user', $user);
        $row->set('article', $article->_getRow());

        $row->set('first_timestamp', $ts);
        $row->set('last_timestamp', $ts);

        $this->cache($user, $article, $row);

        return $row;
    }

    function cache(& $user, & $article, & $row)
    {
        if ( ! $user || ! $article) {
            return;
        }

        $uid = $user->getOID();

        if ( ! array_key_exists($uid, $this->_cache)) {
            $this->_cache[$uid] = [];
        }

        $this->_cache[$uid][$article->getOID()] = $row;
    }

    function cacheInfo($user_id, $article_info, $row_info)
    {
        if ( ! $user_id || ! $article_info) {
            return;
        }

        if ( ! array_key_exists($user_id, $this->_cache_info)) {
            $this->_cache_info[$user_id] = [];
        }

        if ( ! $row_info) {
            if (array_key_exists($article_info['_id'],
                $this->_cache_info[$user_id])
            ) {
                unset($this->_cache_info[$user_id][$article_info['_id']]);
            }
        } else {
            if (array_key_exists($article_info['_id'],
                $this->_cache_info[$user_id])
            ) {
                unset($this->_cache_info[$user_id][$article_info['_id']]);
            }

            $this->_cache_info[$user_id][$article_info['_id']] = $row_info;
        }
    }
}


