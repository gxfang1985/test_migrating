<?php

require_once('fw/database.csp');
require_once('bulletin/bean/GrnBulletinArticle.csp');
require_once('bulletin/bean/GrnBulletinFollow.csp');
require_once('bulletin/bean/GrnBulletinReadStatus.csp');

define('CB_BULLETIN_FACADE_READ_STATUS', "r");
define('CB_BULLETIN_FACADE_FOLLOW', "f");
define('CB_BULLETIN_FACADE_ARTICLE', "a");

define('CB_BULLETIN_ARTICLE_DAO_ORDER_BY_CTIME', 'ctime');
define('CB_BULLETIN_ARTICLE_DAO_ORDER_BY_MTIME', 'mtime');
define('CB_BULLETIN_ARTICLE_DAO_ORDER_BY_NTIME', 'ntime');
define('CB_BULLETIN_ARTICLE_DAO_ORDER_BY_CREATOR_NAME', 'creator_name');
define('CB_BULLETIN_ARTICLE_DAO_ORDER_BY_MODIFIER_NAME', 'modifier_name');
define('CB_BULLETIN_ARTICLE_DAO_ORDER_BY_START_TIMESTAMP', 'start_timestamp');
define('CB_BULLETIN_ARTICLE_DAO_ORDER_BY_RECORD_TIME', 'record_time');
define('CB_BULLETIN_ARTICLE_DAO_ORDER_BY_RECORDER_NAME', 'recorder_name');
define('CB_BULLETIN_ARTICLE_DAO_ORDER_BY_FILENAME', 'filename');
define('CB_BULLETIN_ARTICLE_DAO_ORDER_BY_SUBJECT', 'col_subject');
define('CB_BULLETIN_ARTICLE_DAO_ORDER_BY_ID', '_id');
define('CB_BULLETIN_ARTICLE_DAO_ORDER_BY_GROUP_NAME', 'name');
define('CB_BULLETIN_ARTICLE_DAO_ORDER_BY_CATEGORY_NAME', 'category');

class GrnBulletinArticleDAO
{
    /**
     * @param $inDataObj
     *
     * @return mixed
     */
    public function getFountRows($inDataObj)
    {
        /* @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];

        $result = $inDb->query("SELECT FOUND_ROWS() AS count;");

        $row = $inDb->fetch_assoc($result);
        $resultCount = $row['count'];

        $inDb->free_result($result);

        return $resultCount;
    }

    /**
     * @param                             $inDataObj
     * @param GrnBulletinArticleCondition $inConditionObj
     *
     * @return bool|GrnBulletinArticle
     */
    public function selectRowNumArticleByCondition($inDataObj, $inConditionObj)
    {

        /* @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj)) ? $inDataObj['lock']
            : null;

        $inArticleId = $inConditionObj->getArticleId();

        //ユーザ変数の評価順序はmysqlでは定義されておらず、order byした場合は意図しない結果になる可能性がある。
        //FROM句でサブクエリを行うことで評価順序の問題が回避出来た（ただし動作確認した範囲内でという程度）。
        //サブクエリを2重にしているのは、まず検索一覧結果全てにrownumが振られた後に、目的レコードを取得したいため。
        //2重にしない場合、rownumが必ず1になってしまう（期待するrownum値は、結果一覧における目的レコードの位置）。
        //下層のselectでorder byを確定させる
        //中層のselectでorder by後のリストにrownumを振る（備考：変数の定義も中層で行っている）
        //上層のselectでレコードを1つに絞る
        $query = "SELECT main.*";
        $query .= " FROM (";
        $query .= "SELECT @rownum := @rownum + 1 rownum, sub.*";
        $query .= " FROM (";
        $query .= $this->_makeArticleListQuery($inDataObj, $inConditionObj,
            true);
        $query .= ") AS sub";
        $query .= ", (SELECT @rownum:=0) AS dummy";
        $query .= ") AS main";
        $query .= " WHERE main._id = '" . $inDb->escape($inArticleId) . "'";

        $query = $inDb->select_format($query, 0, -1, $inLock);

        $result = $inDb->query($query);

        if (($result === false) || ($inDb->num_rows($result) != 1)) {
            if ($result) {
                $inDb->free_result($result);
            }

            return false;
        }

        $rawdata = $inDb->fetch_assoc($result);
        $inDb->free_result($result);

        $grnArticle = new GrnBulletinArticle($rawdata);

        return $grnArticle;
    }

    /**
     * @param                             $inDataObj
     * @param GrnBulletinArticleCondition $inConditionObj
     * @param                             $inRowNum
     *
     * @return bool|GrnBulletinArticle
     */
    public function selectRowNumArticleByCondition_RowNum(
        $inDataObj,
        $inConditionObj,
        $inRowNum
    ) {
        /* @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj)) ? $inDataObj['lock']
            : null;

        //ユーザ変数の評価順序はmysqlでは定義されておらず、order byした場合は意図しない結果になる可能性がある。
        //FROM句でサブクエリを行うことで評価順序の問題が回避出来た（ただし動作確認した範囲内でという程度）。
        //サブクエリを2重にしているのは、まず検索一覧結果全てにrownumが振られた後に、目的レコードを取得したいため。
        //2重にしない場合、rownumが必ず1になってしまう（期待するrownum値は、結果一覧における目的レコードの位置）。
        //下層のselectでorder byを確定させる
        //中層のselectでorder by後のリストにrownumを振る（備考：変数の定義も中層で行っている）
        //上層のselectでレコードを1つに絞る
        $query = "SELECT main.*";
        $query .= " FROM (";
        $query .= "SELECT @rownum := @rownum + 1 rownum, sub.*";
        $query .= " FROM (";
        $query .= $this->_makeArticleListQuery($inDataObj, $inConditionObj,
            true);
        $query .= ") AS sub";
        $query .= ", (SELECT @rownum:=0) AS dummy";
        $query .= ") AS main";
        $query .= " WHERE main.rownum = '" . $inDb->escape($inRowNum) . "'";

        $query = $inDb->select_format($query, 0, -1, $inLock);

        $result = $inDb->query($query);

        if (($result === false) || ($inDb->num_rows($result) != 1)) {
            if ($result) {
                $inDb->free_result($result);
            }

            return false;
        }

        $rawdata = $inDb->fetch_assoc($result);
        $inDb->free_result($result);

        $grnArticle = new GrnBulletinArticle($rawdata);

        return $grnArticle;
    }

    /**
     * @param                             $inDataObj
     * @param GrnBulletinArticleCondition $inConditionObj
     *
     * @return GrnBulletinArticle[]
     */
    public function getBulletinArticleListByCondition(
        $inDataObj,
        $inConditionObj
    ) {
        /* @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj)) ? $inDataObj['lock']
            : null;

        $inOffset = $inConditionObj->getOffset();
        $inLimit = $inConditionObj->getLimit();

        $query = $this->_makeArticleListQuery($inDataObj, $inConditionObj);

        if ( ! is_null($inOffset)) {
            $query = $inDb->select_format($query, $inOffset, $inLimit, $inLock);
        }

        $result = $inDb->query($query);

        if ($result === false) {
            //Throw Query Error
            $inDb->throwError(['query' => 'query failed: ' . $query]);
        }

        $grnArticleArray = [];
        while ($rawdata = $inDb->fetch_assoc($result)) {
            $grnArticle = new GrnBulletinArticle($rawdata);
            $grnArticleArray[] = $grnArticle;
        }
        $inDb->free_result($result);
        $result = false;

        return $grnArticleArray;
    }

    /**
     * @param                             $inDataObj
     * @param GrnBulletinArticleCondition $inConditionObj
     *
     * @return GrnBulletinFollow[]
     */
    public function getBulletinArticleAndFollowListDetailSearchByCondition(
        $inDataObj,
        $inConditionObj
    ) {
        /* @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inIsCalcFoundRows = $inDataObj['isCalcFoundRows'];
        $inLock = (array_key_exists('lock', $inDataObj))
            ? $inDataObj['lock'] : null;

        $inOffset = $inConditionObj->getOffset();
        $inLimit = $inConditionObj->getLimit();
        $inLanguage = (array_key_exists('language', $inDataObj))
            ? $inDataObj['language'] : null;
        $inIsSensitive = (array_key_exists('isSensitive', $inDataObj))
            ? $inDataObj['isSensitive'] : false;

        $inSortArray = $inConditionObj->getSortArray();
        $inUserId = $inConditionObj->getUserId();
        $inNowUnixTime = $inConditionObj->getNowUnixTime();
        $inArticleTerm = $inConditionObj->getArticleTerm();
        $inIsPersonal = $inConditionObj->isPersonal();

        $inSearchColumnArray = $inConditionObj->getItems();
        $inSearchColumnArray = array_keys($inSearchColumnArray);
        $inSearchKeywordArray = $inConditionObj->getText();
        $inLimitColumn = $inConditionObj->getLimitColumn('column');
        $inLimitColumnValue = $inConditionObj->getLimitColumn('value');
        $inLimitColumnOperator = $inConditionObj->getLimitColumn('operator');
        $inStartTime = $inConditionObj->getStartTime();
        $inEndTime = $inConditionObj->getEndTime();
        $inChiledCategoryIds = $inConditionObj->getChiledCategoryIds();

        $query = ($inIsCalcFoundRows) ? "SELECT SQL_CALC_FOUND_ROWS *"
            : "SELECT *";
        $query .= " FROM (";
        $query .= "SELECT";
        $query .= "  a._id, a.col_can_follow, a.col_category, a.col_creator";
        $query .= ", a.col_creator_foreign_key, a.col_creator_group";
        $query .= ", IFNULL(m.col_sender_name, a.col_creator_name) as col_creator_name";
        $query .= ", a.col_ctime, a.col_data, a.col_dirty_timestamp, a.col_end_is_datetime";
        $query .= ", a.col_end_timestamp, a.col_html, a.col_last_follow_id, a.col_modifier";
        $query .= ", a.col_modifier_foreign_key, a.col_modifier_name, a.col_mtime";
        $query .= ", a.col_notifier, a.col_notifier_name, a.col_ntime";
        $query .= ", a.col_reserve_blob1, a.col_reserve_blob2, a.col_reserve_blob3";
        $query .= ", a.col_reserve_int1, a.col_reserve_int2, a.col_reserve_int3";
        $query .= ", a.col_reserve_text1, a.col_reserve_text2, a.col_reserve_text3";
        $query .= ", a.col_start_is_datetime, a.col_start_timestamp, a.col_subject, a.col_manually_enter_sender";
        $query .= ", IFNULL(gl.col_name, g.col_name) AS group_name";
        $query .= ", IFNULL(cl.col_name, c.col_name) AS category_name";
        $query .= ", r._id AS read_id";
        $query .= ", r.col_first_timestamp AS first_read_timestamp";
        $query .= ", r.col_last_timestamp AS read_timestamp";
        $query .= ", f._id AS follow_id";
        $query .= ", f.col_article AS follow_article";
        $query .= ", f.col_creator AS follow_creator";
        $query .= ", f.col_ctime AS follow_ctime";
        $query .= ", f.col_data AS follow_data";
        $query .= ", f.col_follow_id AS follow_follow_id";
        $query .= ", f.col_html AS follow_html";
        $query .= ", f.col_modifier AS follow_modifier";
        $query .= ", f.col_mtime AS follow_mtime";
        $query .= ", u.col_display_name";
        $query .= ", u.col_nickname";
        $query .= ", m.col_sender_name";

        $query .= " FROM tab_grn_bulletin_articleentity AS a ";
        $query .= " LEFT JOIN (tab_cb_group AS g                    LEFT JOIN (tab_cb_group_local gl                    INNER JOIN tab_cb_language_status l1 ON gl.language_id = l1._id AND l1.col_language = '"
                  . $inDb->escape($inLanguage)
                  . "') ON g._id = gl.parent_id) ON a.col_creator_group = g._id";
        $query .= " LEFT JOIN (tab_grn_bulletin_categoryentity AS c LEFT JOIN (tab_grn_bulletin_categoryentity_local cl INNER JOIN tab_cb_language_status l2 ON cl.language_id = l2._id AND l2.col_language = '"
                  . $inDb->escape($inLanguage)
                  . "') ON c._id = cl.parent_id) ON a.col_category = c._id";
        $query .= " LEFT JOIN tab_grn_bulletin_readstatus AS r ON a._id = r.col_article AND r.col_user = '"
                  . $inDb->escape($inUserId) . "'";
        $query .= " LEFT JOIN tab_cb_user AS u ON a.col_creator = u._id";
        $query .= " LEFT JOIN tab_grn_bulletin_manually_enter_sender AS m ON a.col_manually_enter_sender = m._id";

        $followLikeCondition = '';
        if (count($inSearchKeywordArray) > 0) {
            $tempConditions = [];
            foreach ($inSearchKeywordArray as $word) {
                $tempConditions[] = cb_queryf($inDb, "(f.col_data LIKE '%@L%')",
                    $word);
            }

            if (count($tempConditions) > 0) {
//不具合。ORとなっているため、フォローだけOR条件で検索されてしまう。本来の仕様ではAND条件。
//この問題はGaroon全体で問題になっているので、ここだけ修正する訳にはいかず、現状のままにしています。
//検索条件の見直しを行う時に修正する予定。→　下記のORをANDに変えるだけ　→　と思ったけど、AND条件にするということは、followも他の検索条件と同じになるので、
//下の方のWHERE句でfollow独自の処理が不要になりそう。検索対象がfollowの場合は main.col_data  LIKE BINARY '%hoge%'で済みそう。
//さらに、LEFT JOIN　のWHERE句の　LIKE条件も要らなくなりそう
                $followLikeCondition = implode(" OR ", $tempConditions);
            }
        }
        $query .= " LEFT JOIN tab_grn_bulletin_followentity AS f ON a._id = f.col_article";
        $query .= " AND (" . $followLikeCondition . ")";


        $query .= " WHERE a._id != '" . GRN_BULLETIN_NULL_OBJECT_ID . "'";

        if ($inIsPersonal) {
            $query .= " AND a.col_creator = '" . $inDb->escape($inUserId) . "'";
        }


        if ( ! is_null($inLimitColumnValue)) {
            // カラム指定の絞り込み
            $query .= " AND a.col_" . $inLimitColumn . " "
                      . $inLimitColumnOperator . " " . $inLimitColumnValue;
        }


        // limit start and end time
        if ( ! is_null($inStartTime)) {
            $query .= " AND a.col_ntime >= " . $inStartTime->unix_ts;
        }

        if ( ! is_null($inEndTime)) {
            $query .= " AND a.col_ntime <= " . $inEndTime->unix_ts;
        }


        switch ($inArticleTerm) {
            case 'all' :            //すべて
                if (count($inChiledCategoryIds) > 0) {
                    $query .= " AND a.col_category IN (" . implode(',',
                            $inChiledCategoryIds) . ")";
                }
                break;

            case 'published' :      //公開中
                $query .= " AND ( a.col_start_timestamp IS NULL OR a.col_start_timestamp <= '"
                          . $inDb->escape($inNowUnixTime) . "')";
                $query .= " AND ( a.col_end_timestamp IS NULL OR a.col_end_timestamp > '"
                          . $inDb->escape($inNowUnixTime) . "')";

                if (count($inChiledCategoryIds) > 0) {
                    $query .= " AND a.col_category IN (" . implode(',',
                            $inChiledCategoryIds) . ")";
                }

                break;

            case 'before' :         //掲示開始待ち
                $query .= " AND a.col_start_timestamp > '"
                          . $inDb->escape($inNowUnixTime) . "'";

                if ($inIsPersonal === false) {
                    if (count($inChiledCategoryIds) > 0) {
                        $query .= " AND a.col_category IN (" . implode(',',
                                $inChiledCategoryIds) . ")";
                    }
                }

                break;

            case 'expired' :        //期間切れ
                $query .= " AND a.col_end_timestamp  < '"
                          . $inDb->escape($inNowUnixTime) . "'";

                if (count($inChiledCategoryIds) > 0) {
                    $query .= " AND a.col_category IN (" . implode(',',
                            $inChiledCategoryIds) . ")";
                }

                break;

            default :               //すべて
                if (count($inChiledCategoryIds) > 0) {
                    $query .= " AND a.col_category IN (" . implode(',',
                            $inChiledCategoryIds) . ")";
                }
                break;
        }

        $query .= ") AS main";
        $query .= " WHERE main._id = main._id";

        foreach ($inSearchKeywordArray as $word) {
            $tempConditions = [];
            foreach ($inSearchColumnArray as $column) {
                if ($column == 'creator_name') {
                    $tempConditions[] = ($inIsSensitive)
                        ? cb_queryf($inDb,
                            "(main.col_sender_name LIKE BINARY '%@L%')", $word)
                        : cb_queryf($inDb, "(main.col_sender_name LIKE '%@L%')",
                            $word);
                    $tempConditions[] = ($inIsSensitive)
                        ? cb_queryf($inDb,
                            "(main.col_manually_enter_sender IS NULL AND (main.col_display_name LIKE BINARY '%@L%' OR main.col_nickname LIKE BINARY '%@L%'))",
                            $word, $word)
                        : cb_queryf($inDb,
                            "(main.col_manually_enter_sender IS NULL AND (main.col_display_name LIKE '%@L%' OR main.col_nickname LIKE '%@L%'))",
                            $word, $word);
                    $tempConditions[] = ($inIsSensitive)
                        ? cb_queryf($inDb,
                            "(main.group_name LIKE BINARY '%@L%')", $word)
                        : cb_queryf($inDb, "(main.group_name LIKE '%@L%')",
                            $word);
                    $tempConditions[] = ($inIsSensitive)
                        ? cb_queryf($inDb,
                            "(main.col_creator IS NULL AND main.col_creator_name LIKE BINARY '%@L%')", $word)
                        : cb_queryf($inDb, "(main.col_creator IS NULL AND main.col_creator_name LIKE '%@L%')",
                            $word);
                } else {
                    $tempConditions[] = ($inIsSensitive)
                        ? cb_queryf($inDb,
                            "(main.col_" . $column . " LIKE BINARY '%@L%')",
                            $word)
                        : cb_queryf($inDb,
                            "(main.col_" . $column . " LIKE '%@L%')", $word);
                }
            }


            if ($inIsSensitive) {
                $tempConditions[]
                    = " exists ( select * FROM tab_grn_bulletin_followentity fa where main._id = fa.col_article AND "
                      . cb_queryf($inDb, "(fa.col_data LIKE BINARY '%@L%')",
                        $word) . ")";
            } else {
                $tempConditions[]
                    = " exists ( select * FROM tab_grn_bulletin_followentity fa where main._id = fa.col_article AND "
                      . cb_queryf($inDb, "(fa.col_data LIKE '%@L%')", $word)
                      . ")";
            }


            $query .= " AND (" . implode(" OR ", $tempConditions) . ")";
        }


        //ORDER BY
        $isFirstOrder = true;
        foreach ($inSortArray as $sortName => $isDesc) {
            $query .= $isFirstOrder ? ' ORDER BY ' : ', ';
            $query .= $this->_getSortColmunName($sortName, 'main');
            $query .= $isDesc ? ' DESC' : ' ASC';

            $isFirstOrder = false;
        }

        if ( ! is_null($inOffset)) {
            $query = $inDb->select_format($query, $inOffset, $inLimit, $inLock);
        }

        $result = $inDb->query($query);

        if ($result === false) {
            //Throw Query Error
            $inDb->throwError(['query' => 'query failed: ' . $query]);
        }

        $resultArray = [];
        while ($rawdata = $inDb->fetch_assoc($result)) {
            $grnReadStatus = new GrnBulletinReadStatus($rawdata);
            $grnArticle = new GrnBulletinArticle($rawdata);

            $multiObjArray = [];
            $multiObjArray[CB_BULLETIN_FACADE_READ_STATUS] = $grnReadStatus;
            $multiObjArray[CB_BULLETIN_FACADE_ARTICLE] = $grnArticle;

            if (strlen($rawdata['follow_id']) > 0) {
                $grnFollow = new GrnBulletinFollow($rawdata);
                $multiObjArray[CB_BULLETIN_FACADE_FOLLOW] = $grnFollow;
            }

            $resultArray[] = $multiObjArray;
        }

        $inDb->free_result($result);
        $result = false;

        return $resultArray;
    }

    /**
     * @param                             $inDataObj
     * @param GrnBulletinArticleCondition $inConditionObj
     *
     * @return array "r" => GrnBulletinReadStatus
     *               "a" => GrnBulletinArticle
     */
    public function getBulletinArticleListDetailSearchByCondition(
        $inDataObj,
        $inConditionObj
    ) {
        /* @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inIsCalcFoundRows = $inDataObj['isCalcFoundRows'];
        $inLock = (array_key_exists('lock', $inDataObj))
            ? $inDataObj['lock'] : null;
        $inLanguage = (array_key_exists('language', $inDataObj))
            ? $inDataObj['language'] : null;
        $inIsSensitive = (array_key_exists('isSensitive', $inDataObj))
            ? $inDataObj['isSensitive'] : false;

        $inOffset = $inConditionObj->getOffset();
        $inLimit = $inConditionObj->getLimit();
        $inSortArray = $inConditionObj->getSortArray();
        $inUserId = $inConditionObj->getUserId();
        $inNowUnixTime = $inConditionObj->getNowUnixTime();
        $inArticleTerm = $inConditionObj->getArticleTerm();
        $inIsPersonal = $inConditionObj->isPersonal();
        $inSearchColumnArray = $inConditionObj->getItems();
        $inSearchColumnArray = array_keys($inSearchColumnArray);
        $inSearchKeywordArray = $inConditionObj->getText();
        $inLimitColumn = $inConditionObj->getLimitColumn('column');
        $inLimitColumnValue = $inConditionObj->getLimitColumn('value');
        $inLimitColumnOperator = $inConditionObj->getLimitColumn('operator');
        $inStartTime = $inConditionObj->getStartTime();
        $inEndTime = $inConditionObj->getEndTime();
        $inChiledCategoryIds = $inConditionObj->getChiledCategoryIds();

        $query = ($inIsCalcFoundRows) ? "SELECT SQL_CALC_FOUND_ROWS *"
            : "SELECT *";
        $query .= " FROM (";
        $query .= "SELECT";
        $query .= "  a._id, a.col_can_follow, a.col_category, a.col_creator";
        $query .= ", a.col_creator_foreign_key, a.col_creator_group";
        $query .= ", IFNULL(m.col_sender_name, a.col_creator_name) as col_creator_name";
        $query .= ", a.col_ctime, a.col_data, a.col_dirty_timestamp, a.col_end_is_datetime";
        $query .= ", a.col_end_timestamp, a.col_html, a.col_last_follow_id, a.col_modifier";
        $query .= ", a.col_modifier_foreign_key, a.col_modifier_name, a.col_mtime";
        $query .= ", a.col_notifier, a.col_notifier_name, a.col_ntime";
        $query .= ", a.col_reserve_blob1, a.col_reserve_blob2, a.col_reserve_blob3";
        $query .= ", a.col_reserve_int1, a.col_reserve_int2, a.col_reserve_int3";
        $query .= ", a.col_reserve_text1, a.col_reserve_text2, a.col_reserve_text3";
        $query .= ", a.col_start_is_datetime, a.col_start_timestamp, a.col_subject, a.col_manually_enter_sender";
        $query .= ", IFNULL(gl.col_name, g.col_name) AS group_name";
        $query .= ", IFNULL(cl.col_name, c.col_name) AS category_name";
        $query .= ", r._id AS read_id";
        $query .= ", r.col_first_timestamp AS first_read_timestamp";
        $query .= ", r.col_last_timestamp AS read_timestamp";
        $query .= ", u.col_display_name";
        //GRN2-3462
        $query .= ", u.col_nickname";
        //GRN2-3462
        $query .= ", m.col_sender_name";

        $query .= " FROM tab_grn_bulletin_articleentity AS a ";
        $query .= " LEFT JOIN (tab_cb_group AS g                    LEFT JOIN (tab_cb_group_local gl                    INNER JOIN tab_cb_language_status l1 ON gl.language_id = l1._id AND l1.col_language = '"
                  . $inDb->escape($inLanguage)
                  . "') ON g._id = gl.parent_id) ON a.col_creator_group = g._id";
        $query .= " LEFT JOIN (tab_grn_bulletin_categoryentity AS c LEFT JOIN (tab_grn_bulletin_categoryentity_local cl INNER JOIN tab_cb_language_status l2 ON cl.language_id = l2._id AND l2.col_language = '"
                  . $inDb->escape($inLanguage)
                  . "') ON c._id = cl.parent_id) ON a.col_category = c._id";
        $query .= " LEFT JOIN tab_grn_bulletin_readstatus AS r ON a._id = r.col_article AND r.col_user = '"
                  . $inDb->escape($inUserId) . "'";
        $query .= " LEFT JOIN tab_cb_user AS u ON a.col_creator = u._id";
        $query .= " LEFT JOIN tab_grn_bulletin_manually_enter_sender AS m ON a.col_manually_enter_sender = m._id";

        $query .= " WHERE a._id != '" . GRN_BULLETIN_NULL_OBJECT_ID . "'";


        if ($inIsPersonal) {
            $query .= " AND a.col_creator = '" . $inDb->escape($inUserId) . "'";
        }


        if ( ! is_null($inLimitColumnValue)) {
            // カラム指定の絞り込み
            $query .= " AND a.col_" . $inLimitColumn . " "
                      . $inLimitColumnOperator . " " . $inLimitColumnValue;
        }


        // limit start and end time
        if ( ! is_null($inStartTime)) {
            $query .= " AND a.col_ntime >= " . $inStartTime->unix_ts;
        }

        if ( ! is_null($inEndTime)) {
            $query .= " AND a.col_ntime <= " . $inEndTime->unix_ts;
        }


        switch ($inArticleTerm) {
            case 'all' :            //すべて
                if (count($inChiledCategoryIds) > 0) {
                    $query .= " AND a.col_category IN (" . implode(',',
                            $inChiledCategoryIds) . ")";
                }
                break;

            case 'published' :      //公開中
                $query .= " AND ( a.col_start_timestamp IS NULL OR a.col_start_timestamp <= '"
                          . $inDb->escape($inNowUnixTime) . "')";
                $query .= " AND ( a.col_end_timestamp IS NULL OR a.col_end_timestamp > '"
                          . $inDb->escape($inNowUnixTime) . "')";

                if (count($inChiledCategoryIds) > 0) {
                    $query .= " AND a.col_category IN (" . implode(',',
                            $inChiledCategoryIds) . ")";
                }

                break;

            case 'before' :         //掲示開始待ち
                $query .= " AND a.col_start_timestamp > '"
                          . $inDb->escape($inNowUnixTime) . "'";

                if ($inIsPersonal === false) {
                    if (count($inChiledCategoryIds) > 0) {
                        $query .= " AND a.col_category IN (" . implode(',',
                                $inChiledCategoryIds) . ")";
                    }
                }

                break;

            case 'expired' :        //期間切れ
                $query .= " AND a.col_end_timestamp  < '"
                          . $inDb->escape($inNowUnixTime) . "'";

                if (count($inChiledCategoryIds) > 0) {
                    $query .= " AND a.col_category IN (" . implode(',',
                            $inChiledCategoryIds) . ")";
                }

                break;

            default :               //すべて
                if (count($inChiledCategoryIds) > 0) {
                    $query .= " AND a.col_category IN (" . implode(',',
                            $inChiledCategoryIds) . ")";
                }
                break;
        }

        $query .= ") AS main";
        $query .= " WHERE main._id = main._id";

        $conditions = [];
        foreach ($inSearchKeywordArray as $word) {
            $tempConditions = [];
            foreach ($inSearchColumnArray as $column) {
                if ($column == 'creator_name') {
                    $tempConditions[] = ($inIsSensitive)
                        ? cb_queryf($inDb,
                            "(main.col_sender_name LIKE BINARY '%@L%')", $word)
                        : cb_queryf($inDb, "(main.col_sender_name LIKE '%@L%')",
                            $word);
                    $tempConditions[] = ($inIsSensitive)
                        ? cb_queryf($inDb,
                            "(main.col_manually_enter_sender IS NULL AND (main.col_display_name LIKE BINARY '%@L%' OR main.col_nickname LIKE BINARY '%@L%'))",
                            $word, $word)
                        : cb_queryf($inDb,
                            "(main.col_manually_enter_sender IS NULL AND (main.col_display_name LIKE '%@L%' OR main.col_nickname LIKE '%@L%'))",
                            $word, $word);
                    $tempConditions[] = ($inIsSensitive)
                        ? cb_queryf($inDb,
                            "(main.group_name LIKE BINARY '%@L%')", $word)
                        : cb_queryf($inDb, "(main.group_name LIKE '%@L%')",
                            $word);
                    $tempConditions[] = ($inIsSensitive)
                        ? cb_queryf($inDb,
                            "(main.col_creator IS NULL AND main.col_creator_name LIKE BINARY '%@L%')", $word)
                        : cb_queryf($inDb,
                            "(main.col_creator IS NULL AND main.col_creator_name LIKE '%@L%')", $word);
                } else {
                    $tempConditions[] = ($inIsSensitive)
                        ? cb_queryf($inDb,
                            "(main.col_" . $column . " LIKE BINARY '%@L%')",
                            $word)
                        : cb_queryf($inDb,
                            "(main.col_" . $column . " LIKE '%@L%')", $word);
                }
            }

            if (count($tempConditions) > 0) {
                $query .= " AND (" . implode(" OR ", $tempConditions) . ")";
            }
        }


        //ORDER BY
        $isFirstOrder = true;
        foreach ($inSortArray as $sortName => $isDesc) {
            $query .= $isFirstOrder ? ' ORDER BY ' : ', ';
            $query .= $this->_getSortColmunName($sortName, 'main');
            $query .= $isDesc ? ' DESC' : ' ASC';

            $isFirstOrder = false;
        }


        if ( ! is_null($inOffset)) {
            $query = $inDb->select_format($query, $inOffset, $inLimit, $inLock);
        }

        $result = $inDb->query($query);

        if ($result === false) {
            //Throw Query Error
            $inDb->throwError(['query' => 'query failed: ' . $query]);
        }

        $resultArray = [];
        while ($rawdata = $inDb->fetch_assoc($result)) {
            $grnReadStatus = new GrnBulletinReadStatus($rawdata);
            $grnArticle = new GrnBulletinArticle($rawdata);

            $multiObjArray = [];
            $multiObjArray[CB_BULLETIN_FACADE_READ_STATUS] = $grnReadStatus;
            $multiObjArray[CB_BULLETIN_FACADE_ARTICLE] = $grnArticle;

            $resultArray[] = $multiObjArray;
        }

        $inDb->free_result($result);
        $result = false;

        return $resultArray;
    }

    /**
     * @param                             $inDataObj
     * @param GrnBulletinArticleCondition $inConditionObj
     *
     * @return int
     */
    public function getBulletinArticleCountByCondition(
        $inDataObj,
        $inConditionObj
    ) {
        /* @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj)) ? $inDataObj['lock']
            : null;

        $inOffset = $inConditionObj->getOffset();
        $inLimit = $inConditionObj->getLimit();
        $inUserId = $inConditionObj->getUserId();
        $inCategoryId = $inConditionObj->getCategoryId();
        $inRefUnixTime = $inConditionObj->getReferenceUnixTime();
        $inNowUnixTime = $inConditionObj->getNowUnixTime();
        $inArticleTerm = $inConditionObj->getArticleTerm();
        $inIsPersonal = $inConditionObj->isPersonal();

        $query = "SELECT COUNT(*) AS count";

        $query .= " FROM tab_grn_bulletin_articleentity a";
        $query .= " WHERE a._id != '" . GRN_BULLETIN_NULL_OBJECT_ID . "'";

        if (strlen($inCategoryId) > 0) {
            $query .= " AND a.col_category = '" . $inDb->escape($inCategoryId)
                      . "'";
        }

        if ($inIsPersonal) {
            $query .= " AND a.col_creator = '" . $inDb->escape($inUserId) . "'";
        }

        switch ($inArticleTerm) {
            case 'all' :            //すべて
                break;

            case 'published' :      //公開中
                $query .= " AND ( a.col_start_timestamp IS NULL OR a.col_start_timestamp <= '"
                          . $inDb->escape($inRefUnixTime) . "')";
                $query .= " AND ( a.col_end_timestamp IS NULL OR a.col_end_timestamp > '"
                          . $inDb->escape($inRefUnixTime) . "')";
                break;

            case 'before_last_updated' :      //最終更新日（が指定日）より前
                $query .= " AND a.col_ntime < '" . $inDb->escape($inRefUnixTime)
                          . "'";
                break;

            case 'before' :         //掲示開始待ち
                $query .= " AND a.col_start_timestamp > '"
                          . $inDb->escape($inRefUnixTime) . "'";
                break;

            case 'not_before' :     //掲示開始待ち以外
                $query .= " AND a.col_start_timestamp IS NULL OR a.col_start_timestamp <= '"
                          . $inDb->escape($inRefUnixTime) . "'";
                break;

            case 'expired' :        //期間切れ
                $query .= " AND a.col_end_timestamp  < '"
                          . $inDb->escape($inRefUnixTime) . "'";
                break;

            case 'derelict' :
                $query .= " AND ( a.col_start_timestamp IS NULL OR a.col_start_timestamp <= '"
                          . $inDb->escape($inNowUnixTime) . "')";
                $query .= " AND ( a.col_end_timestamp IS NULL OR a.col_end_timestamp > '"
                          . $inDb->escape($inNowUnixTime) . "')";
                $query .= " AND a.col_ntime < '" . $inDb->escape($inRefUnixTime)
                          . "'";
                break;

            default :
                break;
        }

        if ( ! is_null($inOffset)) {
            $query = $inDb->select_format($query, $inOffset, $inLimit, $inLock);
        }

        $result = $inDb->query($query);

        if (($result === false) || ($inDb->num_rows($result) != 1)) {
            //Throw Query Error
            $inDb->throwError(['query' => 'query failed: ' . $query]);
        }

        $row = $inDb->fetch_assoc($result);
        $resultCount = $row['count'];

        $inDb->free_result($result);

        return $resultCount;
    }

    /**
     * @param                             $inDataObj
     * @param GrnBulletinArticleCondition $inConditionObj
     *
     * @return string
     */
    private function _makeArticleListQuery(
        $inDataObj,
        $inConditionObj,
        $rownum = false
    ) {
        /* @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inIsCalcFoundRows = (array_key_exists('isCalcFoundRows', $inDataObj))
            ? $inDataObj['isCalcFoundRows'] : false;
        $inLanguage = (array_key_exists('language', $inDataObj))
            ? $inDataObj['language'] : null;

        $inSortArray = $inConditionObj->getSortArray();
        $inUserId = $inConditionObj->getUserId();
        $inCategoryId = $inConditionObj->getCategoryId();
        $inCategoryIds = $inConditionObj->getCategoryIds();
        $inRefUnixTime = $inConditionObj->getReferenceUnixTime();
        $inNowUnixTime = $inConditionObj->getNowUnixTime();
        $inArticleTerm = $inConditionObj->getArticleTerm();
        $inIsPersonal = $inConditionObj->isPersonal();
        $inAcknowledgement = $inConditionObj->getAcknowledgement();
        if ($rownum) {
            $query = ($inIsCalcFoundRows) ? "SELECT SQL_CALC_FOUND_ROWS"
                : "SELECT";
            $query .= "  a._id ";
            $query .= ", IFNULL(m.col_sender_name, a.col_creator_name) as col_creator_name";
            $query .= ", IFNULL(gl.col_name, g.col_name) AS group_name";
            $query .= ", IFNULL(cl.col_name, c.col_name) AS category_name";

            $query .= " FROM tab_grn_bulletin_articleentity AS a ";
            $query .= " LEFT JOIN (tab_cb_group AS g                    LEFT JOIN (tab_cb_group_local gl                    INNER JOIN tab_cb_language_status l1 ON gl.language_id = l1._id AND l1.col_language = '"
                      . $inDb->escape($inLanguage)
                      . "') ON g._id = gl.parent_id) ON a.col_creator_group = g._id";
            $query .= " LEFT JOIN (tab_grn_bulletin_categoryentity AS c LEFT JOIN (tab_grn_bulletin_categoryentity_local cl INNER JOIN tab_cb_language_status l2 ON cl.language_id = l2._id AND l2.col_language = '"
                      . $inDb->escape($inLanguage)
                      . "') ON c._id = cl.parent_id) ON a.col_category = c._id";
            $query .= " LEFT JOIN tab_grn_bulletin_manually_enter_sender AS m ON a.col_manually_enter_sender = m._id";
        } else {
            $query = ($inIsCalcFoundRows) ? "SELECT SQL_CALC_FOUND_ROWS"
                : "SELECT";
            $query .= "  a._id, a.col_can_follow, a.col_category, a.col_creator";
            $query .= ", a.col_creator_foreign_key, a.col_creator_group";
            $query .= ", IFNULL(m.col_sender_name, a.col_creator_name) as col_creator_name";
            $query .= ", a.col_ctime, a.col_data, a.col_dirty_timestamp, a.col_end_is_datetime";
            $query .= ", a.col_end_timestamp, a.col_html, a.col_last_follow_id, a.col_modifier";
            $query .= ", a.col_modifier_foreign_key, a.col_modifier_name, a.col_mtime";
            $query .= ", a.col_notifier, a.col_notifier_name, a.col_ntime";
            $query .= ", a.col_reserve_blob1, a.col_reserve_blob2, a.col_reserve_blob3";
            $query .= ", a.col_reserve_int1, a.col_reserve_int2, a.col_reserve_int3";
            $query .= ", a.col_reserve_text1, a.col_reserve_text2, a.col_reserve_text3";
            $query .= ", a.col_start_is_datetime, a.col_start_timestamp, a.col_subject, a.col_manually_enter_sender";
            $query .= ", IFNULL(gl.col_name, g.col_name) AS group_name";
            $query .= ", IFNULL(cl.col_name, c.col_name) AS category_name";
            $query .= ", r.col_last_timestamp AS read_timestamp";
            $query .= ", m.col_sender_name";

            $query .= " FROM tab_grn_bulletin_articleentity AS a ";
            $query .= " LEFT JOIN (tab_cb_group AS g                    LEFT JOIN (tab_cb_group_local gl                    INNER JOIN tab_cb_language_status l1 ON gl.language_id = l1._id AND l1.col_language = '"
                      . $inDb->escape($inLanguage)
                      . "') ON g._id = gl.parent_id) ON a.col_creator_group = g._id";
            $query .= " LEFT JOIN (tab_grn_bulletin_categoryentity AS c LEFT JOIN (tab_grn_bulletin_categoryentity_local cl INNER JOIN tab_cb_language_status l2 ON cl.language_id = l2._id AND l2.col_language = '"
                      . $inDb->escape($inLanguage)
                      . "') ON c._id = cl.parent_id) ON a.col_category = c._id";
            $query .= " LEFT JOIN tab_grn_bulletin_readstatus AS r ON a._id = r.col_article AND r.col_user = '"
                      . $inDb->escape($inUserId) . "'";
            $query .= " LEFT JOIN tab_grn_bulletin_manually_enter_sender AS m ON a.col_manually_enter_sender = m._id";
        }

        $query .= " WHERE a._id != '" . GRN_BULLETIN_NULL_OBJECT_ID . "'";

        if (strlen($inCategoryId) > 0) {
            $query .= " AND a.col_category = '" . $inDb->escape($inCategoryId)
                      . "'";
        } elseif (is_array($inCategoryIds) && count($inCategoryIds) > 0) {
            $query .= " AND a.col_category in (" . $inDb->escape(implode(',',
                    $inCategoryIds)) . ")";
        }
        if ($inAcknowledgement == true) {
            $query .= " AND a.col_reserve_int1 = '1'"; // This is acknowledgement field
            $query .= " AND a._id NOT IN (select a1._id from tab_grn_bulletin_articleentity a1 JOIN tab_grn_bulletin_readstatus as r1 on a1._id = r1.col_article where r1.col_first_timestamp IS NOT NULL AND r1.col_last_timestamp IS NOT NULL AND r1.col_user = '"
                      . $inDb->escape($inUserId) . "')";
        }
        if ($inIsPersonal) {
            $query .= " AND a.col_creator = '" . $inDb->escape($inUserId) . "'";
        }


        switch ($inArticleTerm) {
            case 'all' :            //すべて
                break;

            case 'published' :      //公開中
                $query .= " AND ( a.col_start_timestamp IS NULL OR a.col_start_timestamp <= '"
                          . $inDb->escape($inRefUnixTime) . "')";
                $query .= " AND ( a.col_end_timestamp IS NULL OR a.col_end_timestamp > '"
                          . $inDb->escape($inRefUnixTime) . "')";
                break;

            case 'before_last_updated' :      //最終更新日（が指定日）より前
                $query .= " AND a.col_ntime < '" . $inDb->escape($inRefUnixTime)
                          . "'";
                break;

            case 'before' :         //掲示開始待ち
                $query .= " AND a.col_start_timestamp > '"
                          . $inDb->escape($inRefUnixTime) . "'";
                break;

            case 'not_before' :     //掲示開始待ち以外
                $query .= " AND a.col_start_timestamp IS NULL OR a.col_start_timestamp <= '"
                          . $inDb->escape($inRefUnixTime) . "'";
                break;

            case 'expired' :        //期間切れ
                $query .= " AND a.col_end_timestamp  < '"
                          . $inDb->escape($inRefUnixTime) . "'";
                break;

            case 'derelict' :       //更新されていない掲示
                $query .= " AND ( a.col_start_timestamp IS NULL OR a.col_start_timestamp <= '"
                          . $inDb->escape($inNowUnixTime) . "')";
                $query .= " AND ( a.col_end_timestamp IS NULL OR a.col_end_timestamp > '"
                          . $inDb->escape($inNowUnixTime) . "')";
                $query .= " AND a.col_ntime < '" . $inDb->escape($inRefUnixTime)
                          . "'";
                break;

            default :
                break;
        }


        //ORDER BY
        $isFirstOrder = true;
        foreach ($inSortArray as $sortName => $isDesc) {
            $query .= $isFirstOrder ? ' ORDER BY ' : ', ';
            $query .= $this->_getSortColmunName($sortName);
            $query .= $isDesc ? ' DESC' : ' ASC';

            $isFirstOrder = false;
        }

        return $query;
    }


    private function _getSortColmunName($inSortName, $inAsName = null)
    {
        switch ($inSortName) {
            case CB_BULLETIN_ARTICLE_DAO_ORDER_BY_CTIME :
                return is_null($inAsName) ? 'a.col_ctime'
                    : $inAsName . '.col_ctime';
                break;

            case CB_BULLETIN_ARTICLE_DAO_ORDER_BY_MTIME :
                return is_null($inAsName) ? 'a.col_mtime'
                    : $inAsName . '.col_mtime';
                break;

            case CB_BULLETIN_ARTICLE_DAO_ORDER_BY_NTIME :
                return is_null($inAsName) ? 'a.col_ntime'
                    : $inAsName . '.col_ntime';
                break;

            case CB_BULLETIN_ARTICLE_DAO_ORDER_BY_CREATOR_NAME :
                return is_null($inAsName) ? 'col_creator_name'
                    : $inAsName . '.col_creator_name';
                break;

            case CB_BULLETIN_ARTICLE_DAO_ORDER_BY_MODIFIER_NAME :
                return is_null($inAsName) ? 'a.col_modifier_name'
                    : $inAsName . '.col_modifier_name';
                break;

            case CB_BULLETIN_ARTICLE_DAO_ORDER_BY_START_TIMESTAMP :
                return is_null($inAsName) ? 'a.col_start_timestamp'
                    : $inAsName . '.col_start_timestamp';
                break;

            case CB_BULLETIN_ARTICLE_DAO_ORDER_BY_RECORD_TIME :
                return is_null($inAsName) ? 'a.col_record_time'
                    : $inAsName . '.col_record_time';
                break;

            case CB_BULLETIN_ARTICLE_DAO_ORDER_BY_FILENAME :
                return is_null($inAsName) ? 'a.col_filename'
                    : $inAsName . '.col_filename';
                break;

            case CB_BULLETIN_ARTICLE_DAO_ORDER_BY_SUBJECT :
                return is_null($inAsName) ? 'a.col_subject'
                    : $inAsName . '.col_subject';
                break;

            case CB_BULLETIN_ARTICLE_DAO_ORDER_BY_ID :
                return is_null($inAsName) ? 'a._id' : $inAsName . '._id';
                break;

            case CB_BULLETIN_ARTICLE_DAO_ORDER_BY_GROUP_NAME :
                return is_null($inAsName) ? 'group_name'
                    : $inAsName . '.group_name';
                break;

            case CB_BULLETIN_ARTICLE_DAO_ORDER_BY_CATEGORY_NAME :
                return is_null($inAsName) ? 'category_name'
                    : $inAsName . '.category_name';
                break;

            default :
                return is_null($inAsName) ? 'a._id' : $inAsName . '._id';
                break;
        }
    }
}
