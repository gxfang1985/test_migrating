<?php
/**
 * Bulletin Tree View
 *
 * @author: Huy Nguyen - 2009/11
 */

require_once('grn/org_tree.csp');

class GRN_Bulletin_FolderTree extends GRN_OrgTree
{
    // システムページ
    var $_system = false;
    // 通知情報を強制的に表示しない
    var $_force_hide_notification = false;
    // チェックボックス表示
    var $_checkbox = false;
    var $_locale = null;
    private $_saved_children_folder = null;

    function __construct($params)
    {
        if (isset($params['system'])) {
            $this->_system = $params['system'];
        }
        if (isset($params['force_hide_notification'])) {
            $this->_force_hide_notification
                = $params['force_hide_notification'];
        }
        if (isset($params['checkbox'])) {
            $this->_checkbox = $params['checkbox'];
        }
        $this->_groups_have_childs = [];
    }

    /**
     * @param   int $oid
     *
     * @return  array
     */
    function _getChildren($oid)
    {
        global $G_bulletin_login;
        $folder = null;
        $ret = [];

        if (is_null($oid)) {
            $oid = 1;   //root folder ID

            if ( ! $this->_system && ! $this->_force_hide_notification) {
                $ret = [
                    -1 => [
                        '_id'      => -1,
                        'col_name' => cb_msg('grn.bulletin', 'wait_list'),
                        'link_url' => cb_pageurl('bulletin/wait_list')
                    ],
                    -2 => [
                        '_id'      => -2,
                        'col_name' => cb_msg('grn.bulletin', 'draft_list'),
                        'link_url' => cb_pageurl('bulletin/draft_list')
                    ],
                ];
            }
        }

        require_once('bulletin/category.csp');
        $cat_man = GRN_Bulletin_CategoryManager::getInstance();
        $folder = $cat_man->getCategory($G_bulletin_login, $oid,
            GRN_BULLETIN_ACCESS_R, false);

        $sub_folders = [];
        if ($folder) {
            require_once('bulletin/hierarchy.csp');
            $hierarchy = GRN_Bulletin_Hierarchy::getInstance();

            if ( ! $this->_system && ! $this->_force_hide_notification) {
                $hierarchy->setSubscriptionCategories(true);
                $hierarchy->setNotificationCategories(true);
            }

            if ($this->_checkbox) {
                $hierarchy->setCheckBoxCategories(true, $this->_system);
            }

            // フォルダツリーの表示データを生成
            $sub_folders
                = $hierarchy->getSubCategoryForTreeView($G_bulletin_login,
                $folder);
        }
        unset($folder);

        // save children
        $this->_saved_children_folder[$oid] = $sub_folders;

        foreach ($sub_folders as $fid => $folder) {
            $ret[$fid] = [
                '_id'      => $fid,
                'col_name' => $folder['name']
            ];

            $subscribed = null;
            if (array_key_exists('subscribed', $folder)) {
                $subscribed = $folder['subscribed'];
            }
            if (array_key_exists('notified', $folder)) {
                $subscribed = $subscribed || $folder['notified'];
            }
            $ret[$fid]['subscribed'] = $subscribed;

            $checkbox = null;
            if (array_key_exists('checkbox', $folder)) {
                $checkbox = $folder['checkbox'];
            }
            $ret[$fid]['checkbox'] = $checkbox;

            $this->_groups_have_childs[$fid] = $folder['child_count'];
        }
        $this->_groups_have_childs[$oid] = count($sub_folders);

        return $ret;
    }

    /**
     * @param int $oid
     *
     * @return  array associated array
     */
    function &_getAncestors($oid)
    {
        global $G_bulletin;
        global $G_bulletin_login;

        $folder = $G_bulletin->getCategory($G_bulletin_login, $oid,
            GRN_BULLETIN_ACCESS_R, false);
        $retval = [];
        if ($folder) {
            require_once('bulletin/hierarchy.csp');
            $hierarchy = GRN_Bulletin_Hierarchy::getInstance();
            $retval =& $hierarchy->getAncestors($folder);
        }

        return $retval;
    }

    function _onCreateChild(&$child, &$child_row)
    {
        if (array_key_exists('subscribed', $child_row)) {
            $child['subscribed'] = $child_row['subscribed'];
        }
        if (array_key_exists('link_url', $child_row)) {
            $child['link_url'] = $child_row['link_url'];
        }
        if (array_key_exists('checkbox', $child_row)) {
            $child['checkbox'] = $child_row['checkbox'];
        }
    }

    function &getRoot()
    {
        $tree =& $this->_tree;
        if (is_null($tree)) {
            return $tree;
        }

        // update caption of special folders when current locale is changed
        require_once('fw/i18n.csp');
        $i18n = CB_I18N::getInstance();
        $locale = strtolower($i18n->getCurrentLanguage());

        if (strcasecmp($this->_locale, $locale)) {
            foreach (array_keys($tree) as $key) {
                $folder =& $tree[$key];
                switch ($key) {
                    case -1:
                        $folder['name'] = cb_msg('grn.bulletin', 'wait_list');
                        break;
                    case -2:
                        $folder['name'] = cb_msg('grn.bulletin', 'draft_list');
                        break;
                }
            }
        }

        $this->_locale = $locale;

        return $tree;
    }

    function getSelectedNode()
    {
        global $G_bulletin;
        global $G_bulletin_login;

        if ($this->_uid !== $G_bulletin_login->getOID()) {
            $this->_selectedNode = null;
            $this->initialize();
        }

        if ( ! $this->_system && ! $this->_force_hide_notification
             && ($this->_selectedNode == -1 || $this->_selectedNode == -2)
        ) //'掲示開始待ち' and '下書き'
        {
            return $this->_selectedNode;
        }

        if ( ! is_null($this->_selectedNode)
             && $G_bulletin->getCategory($G_bulletin_login,
                $this->_selectedNode, GRN_BULLETIN_ACCESS_R, false) === false
        ) {
            $this->_selectedNode = null;
            $this->initialize();
        }

        return $this->_selectedNode;
    }

    /**
     * @param int  $parent_oid
     * @param bool $expanded
     * @param bool $force
     *
     * @return array|bool
     */
    function buildChild($parent_oid, $expanded = false, $force = true)
    {
        return $this->_buildChild($parent_oid, $expanded, $force);
    }

    /*
     * get children folder when they are got
    */
    function getSavedChildrenFolder($oid)
    {
        $children = array_key_exists($oid, $this->_saved_children_folder)
            ? $this->_saved_children_folder[$oid] : [];

        return $children;
    }

    /**
     * @param GRN_Bulletin_Category $category
     * @param bool                  $is_system
     * @param string                $tree_name
     * @param string                $on_select
     *
     * @return array
     */
    public function getTreeForView(
        $category,
        $is_system,
        $tree_name,
        $on_select
    ) {
        $category_id = $category->getOID();
        $util = GRN_OrgTreeUtil::getInstance();
        $this->_nodes = [];
        $this->_tree = [];
        $this->_buildChild($category_id, false, true, true);
        $this->init_time = time();
        $this->check_init = true;

        $this->setSelectedNode($category_id);
        $util->setTree($tree_name, $this);

        $tree_for_view = [
            'page_name'    => $tree_name,
            'tree_name'    => $tree_name,
            'root'         => $this->getRoot(),
            'async_url'    => $is_system ? 'bulletin/system/folder_json'
                : 'bulletin/folder_json',
            'link_url'     => null,
            'selected_oid' => $category_id,
            'root_caption' => $category->get('name'),
            'on_select'    => $on_select,
            'no_top'       => true,
        ];

        return $tree_for_view;
    }
}

////////// Utitity function //////////

function grn_bulletin_rebuild_folder_tree(
    $list_page,
    $expand_oid = null,
    $params = null
) {
    $util = GRN_OrgTreeUtil::getInstance();
    $tree =& $util->getTree($list_page, 'GRN_Bulletin_FolderTree', $params);
    $tree->rebuild();

    // update init time
    $util->updateInitPageList($list_page, $tree);

    if ( ! is_null($expand_oid)) {
        global $G_bulletin;
        global $G_bulletin_login;

        $folder = $G_bulletin->getCategory($G_bulletin_login, $expand_oid,
            GRN_BULLETIN_ACCESS_R, false);
        if ($folder) {
            require_once('bulletin/hierarchy.csp');
            $hierarchy = GRN_Bulletin_Hierarchy::getInstance();
            $ancestors =& $hierarchy->getAncestors($folder);

            $ancestors = array_keys($ancestors);
            foreach ($ancestors as $fid) {
                $tree->buildChild($fid);
            }
        }
    }
    $util->setTree($list_page, $tree);
}


