<?php

/**
 * 掲示板検索ロジック
 *
 * @author  Tanaka, Yoshiaki        2005/01
 * @package grn.bulletin
 */
require_once('grn/application.csp');
require_once('bulletin/bean/GrnBulletinCategoryCondition.csp');
require_once('bulletin/bean/GrnBulletinArticleCondition.csp');

class GRN_Bulletin_SearchBase
{
    private $_tab_category = null;

    private $_rowset = null;
    private $_user = null;

    private $_count = 0;
    private $_bulletinConditionBean = null;


    protected function __construct($inUser, $inConditionBean)
    {
        $this->_tab_category = cb_class2table('grn_bulletin_categoryentity');
        $this->setUser($inUser);
        $this->setBulletinConditionBean($inConditionBean);
    }

    protected function getCategoryTableInfo()
    {
        return $this->_tab_category;
    }

    protected function setUser($value)
    {
        $this->_user = $value;
    }

    protected function getUser()
    {
        return $this->_user;
    }

    private function setBulletinConditionBean($value)
    {
        $this->_bulletinConditionBean = $value;
    }

    protected function getBulletinConditionBean()
    {
        return $this->_bulletinConditionBean;
    }


    // BulletinCategoryConditionBean accessor adapter   start
    protected function setCategoryId($category)
    {
        $this->getBulletinConditionBean()->setCategoryId($category);
    }

    protected function getCategoryId()
    {
        return $this->getBulletinConditionBean()->getCategoryId();
    }

    protected function setText($text)
    {
        $this->getBulletinConditionBean()->setText($text);
    }

    protected function getText()
    {
        return $this->getBulletinConditionBean()->getText();
    }

    protected function setItems($items)
    {
        $this->getBulletinConditionBean()->setItems($items);
    }

    protected function getItems()
    {
        return $this->getBulletinConditionBean()->getItems();
    }

    protected function getItem($key)
    {
        return $this->getBulletinConditionBean()->getItem($key);
    }

    protected function setEnableSubcategory($enable)
    {
        $this->getBulletinConditionBean()->setEnableSubcategory($enable);
    }

    protected function isEnableSubcategory()
    {
        return $this->getBulletinConditionBean()->isEnableSubcategory();
    }

    protected function setSensitive($enable)
    {
        $this->getBulletinConditionBean()->setSensitive($enable);
    }

    protected function isSensitive()
    {
        return $this->getBulletinConditionBean()->isSensitive();
    }

    protected function setOffset($offset)
    {
        $this->getBulletinConditionBean()->setOffset($offset);
    }

    protected function getOffset()
    {
        return $this->getBulletinConditionBean()->getOffset();
    }

    protected function setLimit($limit)
    {
        $this->getBulletinConditionBean()->setLimit($limit);
    }

    protected function getLimit()
    {
        return $this->getBulletinConditionBean()->getLimit();
    }

    // BulletinCategoryConditionBean accessor adapter   end


    protected function setCount($value)
    {
        $this->_count = $value;
    }

    public function count()
    {
        return $this->_count;
    }

    /**
     * 繰り返しメソッド。
     */
    public function iterate()
    {
        if ( ! $this->_rowset) {
            if ( ! $this->_initialize()) {
                $ret = null;

                return $ret;
            }
        }

        if (($row = $this->_rowset->iterate())) {
            if ($this->count() == 0) {
                $this->setCount($this->_rowset->countAllMatched());
            }

            return $this->_iterateProcess($row);
        }

        $this->_destroy();
        $ret = null;

        return $ret;
    }

    /**
     * 繰り返しメソッドの具体的な処理。派生クラスが必ず定義しなければいけない
     */
    protected function _iterateProcess($inRow)
    {
        return null;
    }

    /**
     * 検索用RowSetの生成、派生クラスが必ず定義しなければいけない
     */
    protected function _createRowSet($inUser)
    {
        $ret = null;

        return $ret;
    }

    /**
     * @access private
     */
    protected function _makeKeywordCondition($word)
    {
        static $_db = null;

        if (is_null($_db)) {
            $app_locator = GRN_ApplicationLocator::instance();
            $_db = $app_locator->getConnection('bulletin');
        }

        if ($this->isSensitive()) {
            $format = ' LIKE BINARY \'%@L%\'';
        } else {
            $format = ' LIKE \'%@L%\'';
        }

        return cb_queryf($_db, $format, $word);
    }

    /**
     * カテゴリの検索条件を生成
     *
     * @access private
     */
    protected function _makeCategoryCondition($inUser, $column_name)
    {
        $app_locator = GRN_ApplicationLocator::instance();
        $database = $app_locator->getConnection('bulletin');

        assert('strlen($column_name) > 0');

        $categories = $this->_getSearchTargetCategoryList($inUser,
            $this->getCategoryId());

        if ( ! $categories) {
            return null;
        }

        $escape_cids = [];
        foreach (array_keys($categories) as $cid) {
            $key = cb_queryf($database, "'@S'", $cid);
            $value = $key;
            $escape_cids[$key] = $value;
        }

        $resultCategoryCondition = $column_name . ' IN (' . implode(',',
                array_keys($escape_cids)) . ')';

        return $resultCategoryCondition;
    }

    /**
     * 検索対象カテゴリを取得
     */
    protected function _getSearchTargetCategoryList(
        $inUser,
        $inStartingPointCategoryId,
        $isCategorySearch = false
    ) {
        $categoryArray = [];

        require_once('bulletin/category.csp');
        $factory = GRN_Bulletin_CategoryFactory::getInstance();

        if ( ! $inStartingPointCategoryId) {
            require_once('bulletin/BulletinFacade.csp');
            require_once('fw/i18n.csp');

            $i18n = CB_I18N::getInstance();
            $table_info = $this->getCategoryTableInfo();

            $dao = new BulletinFacade();
            $dataObj = [];
            $dataObj['lock'] = $table_info->_lock;
            $dataObj['language'] = $i18n->getCurrentLanguage();
            $dataObj['offset'] = 0;
            $dataObj['limit'] = -1;

            $categoryList = $dao->getBulletinCategoryList($dataObj);

            foreach ($categoryList as $category) {
                $row = $table_info->getRow($category->getId(),
                    $category->convertArray());
                $categoryId = $row->getOID();
                $categoryArray[$categoryId] = $factory->row2object($row);
            }
        } else {
            if ( ! ($category = $factory->get($inStartingPointCategoryId))) {
                return null;
            }

            $childCategoryArray = [];
            $categoryArray[$inStartingPointCategoryId] = $category;

            if ($isCategorySearch || $this->isEnableSubcategory()) {
                $childCategoryArray = $this->_getSubCategories($categoryArray,
                    $categoryArray);
            }

            if (count($childCategoryArray) > 0
                && $this->isEnableSubcategory()
            ) {
                $this->_getSubCategoriesRecursive($childCategoryArray,
                    $categoryArray);
            }
        }

        require_once('bulletin/access.csp');
        $acc = GRN_Bulletin_AccessManager::getInstance();

        return $acc->evaluateCategories($inUser, $categoryArray,
            GRN_BULLETIN_ACCESS_R);
    }

    private function _getSubCategories($inCategoryIds, & $outCategories)
    {
        if ( ! $inCategoryIds) {
            return [];
        }

        require_once('bulletin/BulletinFacade.csp');
        require_once('fw/i18n.csp');
        require_once('bulletin/category.csp');

        $i18n = CB_I18N::getInstance();
        $table_info = $this->getCategoryTableInfo();

        $dao = new BulletinFacade();
        $dataObj = [];
        $dataObj['lock'] = $table_info->_lock;
        $dataObj['language'] = $i18n->getCurrentLanguage();
        $dataObj['offset'] = 0;
        $dataObj['limit'] = -1;
        $categoryIdArray = array_keys($inCategoryIds);

        $categoryList = $dao->getBulletinCategoryListByParentIds($dataObj,
            $categoryIdArray);

        $factory = GRN_Bulletin_CategoryFactory::getInstance();
        $childCategoryArray = [];
        foreach ($categoryList as $category) {
            $row = $table_info->getRow($category->getId(),
                $category->convertArray());
            $categoryId = $row->getOID();
            $outCategories[$categoryId] = $factory->row2object($row);
            $childCategoryArray[$categoryId] = 1;
        }

        return $childCategoryArray;
    }

    /**
     * 再帰的にサブカテゴリを取得
     *
     * @access private
     */
    private function _getSubCategoriesRecursive(
        $inCategoryIds,
        & $outCategories
    ) {
        if ( ! is_array($inCategoryIds) || count($inCategoryIds) < 1) {
            return;
        }

        $childCategoryArray = $this->_getSubCategories($inCategoryIds,
            $outCategories);

        if (count($childCategoryArray) < 1) {
            return;
        }

        $this->_getSubCategoriesRecursive($childCategoryArray, $outCategories);
    }

    private function _destroy()
    {
        if ($this->_rowset) {
            $this->_rowset->destroy();
            $this->_rowset = null;
        }
    }

    private function _initialize()
    {
        $this->_destroy();
        $this->setCount(0);

        if (is_null(($this->_rowset
            = $this->_createRowSet($this->getUser())))
        ) {
            return false;
        }

        return true;
    }
}


/**
 * リファクタリングの途中。スーパークラスで必ず定義と記載されているメソッドがあるが、
 * GRN_Bulletin_CategorySearchはこれに従っていない。
 * リファクタリング後は実装仕様を変えたため。
 * 他のサブクラスも順次修正するつもりだが、今回の修正内容の範疇を超えるため、次の機会に修正したいと思う。
 */
class GRN_Bulletin_CategorySearch extends GRN_Bulletin_SearchBase
{
    public function __construct($inUser, $inConditionBean)
    {
        parent::__construct($inUser, $inConditionBean);
    }

    public function searchExecute()
    {
        require_once('bulletin/BulletinFacade.csp');
        require_once('fw/i18n.csp');
        require_once('bulletin/category.csp');

        $i18n = CB_I18N::getInstance();
        $table_info = $this->getCategoryTableInfo();
        $conditionBean = $this->getBulletinConditionBean();

        $dao = new BulletinFacade();
        $dao->setCalcFoundRows(true);

        $dataObj = [];
        $dataObj['lock'] = $table_info->_lock;
        $dataObj['language'] = $i18n->getCurrentLanguage();
        $dataObj['offset'] = $conditionBean->getOffset();
        $dataObj['limit'] = $conditionBean->getLimit();
        $dataObj['isSensitive'] = $conditionBean->isSensitive();

        //Create Category Condition
        $categoryNameArray = $conditionBean->getText();
        $categoryIdArray = [];
        $searchCategoryList
            = $this->_getSearchTargetCategoryList($this->getUser(),
            $conditionBean->getCategoryId(), true);
        if (is_array($searchCategoryList) && count($searchCategoryList) > 0) {
            foreach ($searchCategoryList as $id => $category) {
                $categoryIdArray[] = $id;
            }
        }

        //現時点では検索対象項目は名称固定仕様となっており、$inConditionBean->getItemsの値は使ってない
        $categoryList = $dao->getBulletinCategoryListByIds_Names($dataObj,
            $categoryIdArray, $categoryNameArray);
        $categorySearchAllCount = $dao->getCalcFoundRows($dataObj);

        $this->setCount($categorySearchAllCount);

        $factory = GRN_Bulletin_CategoryFactory::getInstance();
        $results = [];
        foreach ($categoryList as $category) {
            $row = $table_info->getRow($category->getId(),
                $category->convertArray());
            $categoryId = $row->getOID();
            $results[$categoryId] = $factory->row2object($row);
        }

        return $results;
    }
}


/**
 * リファクタリングの途中。スーパークラスで必ず定義と記載されているメソッドがあるが、
 * GRN_Bulletin_ArticleSearchはこれに従っていない。
 * リファクタリング後は実装仕様を変えたため。
 * 他のサブクラスも順次修正するつもりだが、今回の修正内容の範疇を超えるため、次の機会に修正したいと思う。
 */
class GRN_Bulletin_ArticleSearch extends GRN_Bulletin_SearchBase
{
    private $_articleTableInfo = null;
    private $_followTableInfo = null;
    private $_readStatusTableInfo = null;


    public function __construct($inUser, $inConditionBean)
    {
        parent::__construct($inUser, $inConditionBean);

        $app_locator = GRN_ApplicationLocator::instance();
        $tm = $app_locator->getTableManager('bulletin');
        $this->_articleTableInfo
            = $tm->getTableInfo('GRN_Bulletin_ArticleEntity');
        $this->_readStatusTableInfo
            = $tm->getTableInfo('GRN_Bulletin_ReadStatus');
        $this->_followTableInfo
            = $tm->getTableInfo('GRN_Bulletin_FollowEntity');
    }

    public function searchExecute()
    {
        $conditionBean = $this->getBulletinConditionBean();
        $userObj = $conditionBean->getUser();

        //--- 実行前CHECK ---
        if (is_null($userObj)) {
            assert('FALSE');

            return [];
        }


        if ($conditionBean->getArticleTerm() == 'all') {
            require_once('bulletin/access.csp');
            $acc = GRN_Bulletin_AccessManager::getInstance();

            if ( ! $acc->isSuperAdmin($userObj)) {
                if ($conditionBean->getCategoryId()) {
                    require_once('bulletin/category.csp');
                    $cm = GRN_Bulletin_CategoryManager::getInstance();
                    if (($category = $cm->getCategory($userObj,
                        $conditionBean->getCategoryId()))
                    ) {
                        if ( ! $acc->isAdmin($userObj, $category)) {
                            return [];
                        }
                    } else {
                        return [];
                    }
                } else {
                    return [];
                }
            }
        }

        //検索文字列がない場合は検索をしない
        if (is_null($conditionBean->getText())) {
            return [];
        }


        //検索項目を有効なものだけにする
        //フォローは特別処理が必要なので別にする
        $enableItems = [];
        $isFollowExists = false;
        foreach ($conditionBean->getItems() as $name => $enable) {
            if ( ! $enable) {
                continue;
            }

            if ($name == 'follow') {
                $isFollowExists = true;
            } else {
                $enableItems[$name] = 1;
            }
        }

        //検索対象項目がひとつもない場合は検索をしない
        if (($isFollowExists === false) && (count($enableItems) <= 0)) {
            return [];
        }


        $searchCategoryList = $this->_getSearchTargetCategoryList($userObj,
            $conditionBean->getCategoryId());
        if (($conditionBean->isPersonal() === false)
            && (count($searchCategoryList) <= 0)
        ) {
            // 記事指定もカテゴリ指定もできない場合は管理者権限をチェック
            require_once('bulletin/access.csp');
            $acc = GRN_Bulletin_AccessManager::getInstance();
            if ( ! $acc->isSuperAdmin($userObj)) {
                return [];
            }
        }


        //--- 検索条件の追加 ---
        //検索対象カテゴリの設定
        foreach ($searchCategoryList as $id => $category) {
            $conditionBean->addChiledCategoryId($id);
        }

        //チェックボックスにチェックが入った検索対象項目の設定（フォローだけ特別処理が必要なのでフォローを除外されている）
        $conditionBean->setItems($enableItems);


        //ソートキーの設定
        if ($conditionBean->getArticleTerm() == 'before') {
            $isDesc = false;
            $conditionBean->addSort(CB_BULLETIN_ARTICLE_DAO_ORDER_BY_START_TIMESTAMP,
                $isDesc);
        } else {
            $isDesc = true;
            $conditionBean->addSort(CB_BULLETIN_ARTICLE_DAO_ORDER_BY_NTIME,
                $isDesc);
        }

        $isDesc = true;
        $conditionBean->addSort(CB_BULLETIN_ARTICLE_DAO_ORDER_BY_ID, $isDesc);

        if ($isFollowExists) {
            $isDesc = true;
            $conditionBean->addSort(CB_BULLETIN_ARTICLE_DAO_ORDER_BY_CTIME,
                $isDesc);
        }


        //--- 検索 ---
        require_once('bulletin/BulletinFacade.csp');
        require_once('fw/i18n.csp');
        require_once('bulletin/category.csp');

        $i18n = CB_I18N::getInstance();
        $table_info = $this->_articleTableInfo;

        $dao = new BulletinFacade();
        $dao->setCalcFoundRows(true);

        $dataObj = [];
        $dataObj['lock'] = $table_info->_lock;
        $dataObj['language'] = $i18n->getCurrentLanguage();
        $dataObj['offset'] = $conditionBean->getOffset();
        $dataObj['limit'] = $conditionBean->getLimit();
        $dataObj['isSensitive'] = $conditionBean->isSensitive();

        $multiObjList = [];
        if ($isFollowExists) {
            $multiObjList
                = $dao->getBulletinArticleAndFollowListDetailSearchByCondition($dataObj,
                $conditionBean);
        } else {
            $multiObjList
                = $dao->getBulletinArticleListDetailSearchByCondition($dataObj,
                $conditionBean);
        }


        //--- 検索ヒット数 ---
        $articleSearchAllCount = $dao->getCalcFoundRows($dataObj);
        $this->setCount($articleSearchAllCount);


        //--- 検索結果の整形 ---
        $results = [];
        $factory = GRN_Bulletin_CategoryFactory::getInstance();
        foreach ($multiObjList as $multiObj) {
            $articleObj = $multiObj[CB_BULLETIN_FACADE_ARTICLE];
            $articleRow = $this->_articleTableInfo->getRow($articleObj->getId(),
                $articleObj->convertArray());

            $readStatusObj = $multiObj[CB_BULLETIN_FACADE_READ_STATUS];
            $readStatusRow
                = $this->_readStatusTableInfo->getRow($readStatusObj->getId(),
                $readStatusObj->convertArray());

            require_once('bulletin/readstatus.csp');
            $rs = GRN_Bulletin_ArticleReadStatus::getInstance();
            $rs->cache($userObj, $articleRow, $readStatusRow);

            if (array_key_exists(CB_BULLETIN_FACADE_FOLLOW, $multiObj)) {
                $followObj = $multiObj[CB_BULLETIN_FACADE_FOLLOW];
                $followRow
                    = $this->_followTableInfo->getRow($followObj->getId(),
                    $followObj->convertArray());

                require_once('bulletin/follow.csp');
                $factory = GRN_Bulletin_FollowFactory::getInstance();
                $ret = $factory->row2object($followRow);
                $results[] = $ret;
            } else {
                require_once('bulletin/article.csp');
                $factory = GRN_Bulletin_ArticleFactory::getInstance();
                $ret = $factory->row2object($articleRow);
                $results[] = $ret;
            }
        }

        return $results;
    }
}


class GRN_Bulletin_DraftSearch extends GRN_Bulletin_SearchBase
{
    private $_tab_draft = null;


    public function __construct($inUser, $inConditionBean)
    {
        parent::__construct($inUser, $inConditionBean);

        $app_locator = GRN_ApplicationLocator::instance();
        $tm = $app_locator->getTableManager('bulletin');
        $this->_tab_draft = $tm->getTableInfo('GRN_Bulletin_DraftEntity');
    }

    protected function _iterateProcess($inRow)
    {
        require_once('bulletin/draft.csp');
        $factory = GRN_Bulletin_DraftFactory::getInstance();
        $ret = $factory->row2object($inRow);

        return $ret;
    }

    protected function _createRowSet($inUser)
    {
        if ( ! ($condition = $this->_makeCondition($inUser))) {
            $ret = null;

            return $ret;
        }

        $rowset = new CB_RowSet($this->_tab_draft, 'a');

        $rowset->addCondition($condition);
        $rowset->addOrderColumn('a.col_mtime', true);
        $rowset->addOrderColumn('a._id', true);

        $rowset->limit($this->getOffset(), $this->getLimit());
        $rowset->setLock(CB_DATABASE_NO_LOCK);
        $rowset->setCalcAllMatched(true);

        return $rowset;
    }

    /**
     * 指定されたカラムの検索条件を生成
     *
     * @access private
     */
    private function _makeColumnCondition()
    {
        if ( ! $this->getItems()) {
            return null;
        }
        if ( ! $this->getText()) {
            return null;
        }

        $column_names = [];
        foreach ($this->getItems() as $name => $enable) {
            if ( ! $enable) {
                continue;
            }

            $column_names[] = $name;
        }

        if (count($column_names) < 1) {
            return null;
        }


        $conditions = [];
        foreach ($this->getText() as $word) {
            $format = $this->_makeKeywordCondition($word);

            $column_conditions = [];

            foreach ($column_names as $column) {
                $column_conditions[] = 'a.col_' . $column . $format;
            }

            if ($column_conditions) {
                if (count($column_conditions) > 1) {
                    $conditions[] = '(' . implode(' OR ', $column_conditions)
                                    . ')';
                } else {
                    $conditions[] = $column_conditions[0];
                }
            }
        }

        if ( ! $conditions) {
            return null;
        }

        return '(' . implode(' AND ', $conditions) . ')';
    }

    private function _makeCondition($inUser)
    {
        if ( ! $inUser) {
            assert('FALSE');

            return null;
        }

        $conditions = [];

        $app_locator = GRN_ApplicationLocator::instance();
        $database = $app_locator->getConnection('bulletin');

        $conditions[] = cb_queryf($database, "a.col_creator = '@S'",
            $inUser->getOID());

        // 下書きの場合はカテゴリが削除されている場合がある
        if (($c = $this->_makeCategoryCondition($inUser, 'a.col_category'))) {
            $conditions[] = '(a.col_category IS NULL OR ' . $c . ')';
        } else {
            $conditions[] = 'a.col_category IS NULL';
        }

        if (($c = $this->_makeColumnCondition())) {
            $conditions[] = $c;
        } else {
            return null;
        }

        $c = implode(' AND ', $conditions);

        return $c;
    }
}


