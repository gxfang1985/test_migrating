<?php

class GRN_Bulletin_Inspection extends CB_ModuleBase
{
    //Private member variables
    var $_logger = null;

    //Constructor
    function __construct()
    {
        parent::__construct('grn.bulletin');

        require_once('grn/logger.csp');
        $logger_manager = CB_LoggerManager::getInstance();
        $this->_logger = &$logger_manager->getLogger($this->getModuleId());
    }

    /**
     * Create an instance of GRN_Cabinet_Inspection class
     *
     * @access public
     */
    private static $_instance = null;

    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Check notice priority is enabled or not
     *
     * @access private
     */
    function isNoticeEnabled()
    {
        return $this->_logger->isNoticeEnabled();
    }

    /**
     * Check Info priority is enabled or not
     *
     * @access private
     */
    function isInfoEnabled()
    {
        return $this->_logger->isInfoEnabled();
    }

    /**
     * Write log with notice priority
     *
     * @access private
     */
    function notice($action, $target, $params = [])
    {
        $this->_logger->noticeEx($action, $target, $params);
    }

    /**
     * Write log with info priority
     *
     * @access private
     */
    function info($action, $target, $params = [])
    {
        $this->_logger->infoEx($action, $target, $params);
    }

    /**
     * Write log: System (access manager, privilege manager and notify)
     *
     * @param : action of logging
     * @param : category object
     * @param : instance of classes : CB_User, CB_Group, CB_Role or string or an array
     * @param : array of authorities
     *
     * @access: public
     */
    function writeLogSystem($action, $category, $target, $object, $authorities)
    {
        $params = ['cid' => $category->getOID()];
        $model = [];
        if ($object == "access") {
            require_once('bulletin/access.csp');
            $access_manager = GRN_Bulletin_AccessManager::getInstance();
            //Get  security model
            $model
                = ['security_model' => $access_manager->getSecurityModelString($category)];
            if ($action != "delete_all") {
                $params = $params + $model;
            }
        }
        if ($target instanceof CB_User) {
            $params = $params + ['uid' => $target->getOID()];
        } elseif ($target instanceof CB_Group) {
            $params = $params + ['gid' => $target->getOID()];
        } elseif ($target instanceof CB_Role) {
            $params = $params + ['rid' => $target->getOID()];
        } elseif (is_string($target)) {
            if ($action == "delete_all") {
                if (strncasecmp($target, 'cb_', 3) == 0) {
                    $target = substr($target, 3);
                    $params = $params + ['target' => $target];
                } else {
                    $params = $params + ['target' => $target];
                }
            } else {
                $params = $params + ['dynamic_role' => $target];
            }
        }
        //Authorities
        $auth = [];
        if ( ! is_null($authorities)) {
            $avail = [];
            foreach (array_keys($authorities) as $key) {
                if ($authorities[$key]) {
                    $avail[] = $key;
                }
            }
            $auth = ['auth' => implode('/', $avail)];
            if ($object == "access") {
                $params = $params + $auth;
            }
        }
        //write log
        if ($this->isNoticeEnabled()) {
            $this->notice($action, $object, $params);
        }
    }
}

class GRN_Bulletin_Category_Local_Inspection extends GRN_Bulletin_Inspection
{
    /** Inspacetion Message Template List **/
    var $_template_list = null;

    /**
     * Constructor
     *
     */
    public function __construct()
    {
        parent::__construct();

        $template_list = [
            'category_local_add'           => [
                'action' => 'create',
                'target' => 'category_local',
            ],
            'category_local_modify'        => [
                'action' => 'modify',
                'target' => 'category_local',
            ],
            'category_local_delete'        => [
                'action' => 'delete',
                'target' => 'category_local',
            ],
            'category_local_add_import'    => [
                'action' => 'import',
                'target' => 'category_local',
            ],
            'category_local_modify_import' => [
                'action' => 'import',
                'target' => 'category_local',
            ],
            'category_local_delete_import' => [
                'action' => 'import_delete',
                'target' => 'category_local',
            ],
            'category_local_export'        => [
                'action' => 'export',
                'target' => 'category_local',
            ],
        ];

        //Set Template List
        $this->_template_list = $template_list;
    }

    private static $_instance = null;

    /**
     * @static
     * @return GRN_Bulletin_Category_Local_Inspection
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    function isEnabled($threshold = 'notice')
    {
        //Check Threshold
        $result = false;
        switch ($threshold) {
            case 'critical':
                $result = $this->_logger->isCriticalEnabled();
                break;
            case 'error':
                $result = $this->_logger->isErrorEnabled();
                break;
            case 'warning':
                $result = $this->_logger->isWarningEnabled();
                break;
            case 'notice':
                $result = $this->_logger->isNoticeEnabled();
                break;
            case 'info':
                $result = $this->_logger->isInfoEnabled();
                break;
            case 'debug':
                $result = $this->_logger->isDebugEnabled();
                break;
            default:
                $result = false;
                break;
        }

        //Return Result
        return $result;
    }

    /**
     * Record Inspection Message
     *
     * $param  string $message_type               //Inspaction Message Type
     * $param  array  $message_args               //Inspaction Message Argument List
     * $return bool   $result                     //Result
     */
    function record($message_type, $message_args = [])
    {
        //Get Inspaction Message Template
        if ( ! array_key_exists($message_type, $this->_template_list)) {
            return false;
        }
        $message_template = $this->_template_list[$message_type];

        $message_action = $message_template['action'];
        $message_target = $message_template['target'];

        $this->_logger->noticeEx($message_action, $message_target,
            $message_args);

        //Return Result
        return true;
    }
}

