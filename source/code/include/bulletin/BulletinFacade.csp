<?php

use grn\bulletin\bean\GrnBulletinOperator;
use grn\grn\MemberLogic;
use grn\grn\Validate;

require_once('grn/application.csp');
require_once('grn/CBException.csp');
require_once('grn/DAOFactory.csp');
require_once('bulletin/error_code.csp');
require_once('bulletin/inspection.csp');
require_once('bulletin/dao/GrnBulletinArticleDAO.csp');
require_once('bulletin/dao/GrnBulletinCategoryDAO.csp');

define('CB_BULLETIN_FACADE_DB_STATUS_INSERT', 1);
define('CB_BULLETIN_FACADE_DB_STATUS_UPDATE', 2);
define('CB_BULLETIN_FACADE_DB_STATUS_DELETE', 3);

class BulletinFacade
{
    private $_db = null;
    private $_isCalcFoundRows = false;

    public function __construct()
    {
        $app_locator = GRN_ApplicationLocator::instance();
        $this->_db = $app_locator->getConnection('bulletin');
    }

    public function setCalcFoundRows($value)
    {
        $this->_isCalcFoundRows = $value;
    }

    public function isCalcFoundRows()
    {
        return $this->_isCalcFoundRows;
    }

    /** ***************************************************** */
    /** -----             GrnBulletinArticle        --------- */
    /** ***************************************************** */
    /**
     * @param $inDataObj
     * @param $inConditionObj
     *
     * @return int
     */
    public function getBulletinArticleCountByCondition(
        $inDataObj,
        $inConditionObj
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnBulletinArticleDAO();

            $resultCount = $dao->getBulletinArticleCountByCondition($inDataObj,
                $inConditionObj);

            return $resultCount;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param                             $inDataObj
     * @param GrnBulletinArticleCondition $inConditionObj
     *
     * @return GrnBulletinArticle[]
     */
    public function getBulletinArticleListByCondition(
        $inDataObj,
        $inConditionObj
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $inDataObj['isCalcFoundRows'] = $this->isCalcFoundRows();
            $daoFctry
                = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao
                = $daoFctry->getGrnBulletinArticleDAO();

            if ($inConditionObj->isExistsSortKey(CB_BULLETIN_ARTICLE_DAO_ORDER_BY_ID)
                === false
            ) {
                //昇順、降順は第1ソートキーに合わせる。
                $localSortArray = $inConditionObj->getSortArray();
                $isDesc = true;
                if (count($localSortArray) > 0) {
                    $sortValues = array_values($localSortArray);
                    $isDesc = $sortValues[0];
                }

                $inConditionObj->addSort(CB_BULLETIN_ARTICLE_DAO_ORDER_BY_ID,
                    $isDesc);
            }

            $resultList = $dao->getBulletinArticleListByCondition($inDataObj,
                $inConditionObj);

            return $resultList;
        } catch (CBException $cbe) {

        }
    }


    /**
     * @param $inDataObj
     * @param $inConditionObj
     *
     * @return GrnBulletinFollow[]
     */
    public function getBulletinArticleAndFollowListDetailSearchByCondition(
        $inDataObj,
        $inConditionObj
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $inDataObj['isCalcFoundRows'] = $this->isCalcFoundRows();
            $daoFctry
                = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao
                = $daoFctry->getGrnBulletinArticleDAO();

            $resultList
                = $dao->getBulletinArticleAndFollowListDetailSearchByCondition($inDataObj,
                $inConditionObj);

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param $inDataObj
     * @param $inConditionObj
     *
     * @return array
     */
    public function getBulletinArticleListDetailSearchByCondition(
        $inDataObj,
        $inConditionObj
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $inDataObj['isCalcFoundRows'] = $this->isCalcFoundRows();
            $daoFctry
                = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao
                = $daoFctry->getGrnBulletinArticleDAO();

            $resultList
                = $dao->getBulletinArticleListDetailSearchByCondition($inDataObj,
                $inConditionObj);

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param                             $inDataObj
     * @param GrnBulletinArticleCondition $inConditionObj
     *
     * @return bool|GrnBulletinArticle
     */
    public function referBulletinPreviousArticleByCondition(
        $inDataObj,
        $inConditionObj
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnBulletinArticleDAO();

            if ($inConditionObj->isExistsSortKey(CB_BULLETIN_ARTICLE_DAO_ORDER_BY_ID)
                === false
            ) {
                //昇順、降順は第1ソートキーに合わせる。
                $localSortArray = $inConditionObj->getSortArray();
                $isDesc = true;
                if (count($localSortArray) > 0) {
                    $sortValues = array_values($localSortArray);
                    $isDesc = $sortValues[0];
                }

                $inConditionObj->addSort(CB_BULLETIN_ARTICLE_DAO_ORDER_BY_ID,
                    $isDesc);
            }

            // 対象掲示のrowNumを取得
            $tempArticle = $dao->selectRowNumArticleByCondition($inDataObj,
                $inConditionObj);
            if ($tempArticle !== false) {
                $rowNum = $tempArticle->getRowNum();
            } else {
                require_once('bulletin/error_code.csp');
                cb_throw_error(E_GRN_BULLETIN_ACCESS_DENY_READ);
            }

            $rowNum = $rowNum - 1;  //直前の掲示

            $result = $dao->selectRowNumArticleByCondition_RowNum($inDataObj,
                $inConditionObj, $rowNum);

            return $result;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param                             $inDataObj
     * @param GrnBulletinArticleCondition $inConditionObj
     *
     * @return bool|GrnBulletinArticle
     */
    public function referBulletinNextArticleByCondition(
        $inDataObj,
        $inConditionObj
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnBulletinArticleDAO();

            if ($inConditionObj->isExistsSortKey(CB_BULLETIN_ARTICLE_DAO_ORDER_BY_ID)
                === false
            ) {
                //昇順、降順は第1ソートキーに合わせる。
                $localSortArray = $inConditionObj->getSortArray();
                $isDesc = true;
                if (count($localSortArray) > 0) {
                    $sortValues = array_values($localSortArray);
                    $isDesc = $sortValues[0];
                }

                $inConditionObj->addSort(CB_BULLETIN_ARTICLE_DAO_ORDER_BY_ID,
                    $isDesc);
            }

            // 対象掲示のrowNumを取得
            $tempArticle = $dao->selectRowNumArticleByCondition($inDataObj,
                $inConditionObj);
            $rowNum = $tempArticle->getRowNum();

            $rowNum = $rowNum + 1;  //直後の掲示

            $result = $dao->selectRowNumArticleByCondition_RowNum($inDataObj,
                $inConditionObj, $rowNum);

            return $result;
        } catch (CBException $cbe) {

        }
    }

    /** ***************************************************** */
    /** -----               CalcFoundRows           --------- */
    /** ***************************************************** */
    public function getCalcFoundRows($inDataObj)
    {
        $result = 0;

        if ($this->isCalcFoundRows()) {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnBulletinCategoryDAO();

            $result = $dao->getFountRows($inDataObj);
        }

        return $result;
    }

    /** ***************************************************** */
    /** -----           GrnBulletinCategory       --------- */
    /** ***************************************************** */
    /**
     * @param $inDataObj
     * @param $inCategoryKey
     *
     * @return bool|GrnBulletinCategory
     */
    public function referBulletinCategoryByForeignKey(
        $inDataObj,
        $inCategoryKey
    ) {
        $inDataObj['db'] = $this->_db;
        $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
        $dao = $daoFctry->getGrnBulletinCategoryDAO();

        $result = $dao->selectByForeignKey($inDataObj, $inCategoryKey);

        return $result;
    }

    /**
     * @param $inDataObj
     * @param $inId
     *
     * @return bool|GrnBulletinCategory
     */
    public function referBulletinCategoryById($inDataObj, $inId)
    {
        $inDataObj['db'] = $this->_db;
        $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
        $dao = $daoFctry->getGrnBulletinCategoryDAO();

        $inLanguage = (array_key_exists('language', $inDataObj))
            ? $inDataObj['language'] : null;
        if (is_null($inLanguage)) {
            $result = $dao->selectDefaultById($inDataObj, $inId);
        } else {
            $result = $dao->selectLocalById($inDataObj, $inId);
        }

        return $result;
    }

    /**
     * @param array $inDataObj
     *
     * @return GrnBulletinCategory[]
     */
    public function getBulletinCategoryList($inDataObj)
    {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnBulletinCategoryDAO();
            $inParentId = (array_key_exists('parentId', $inDataObj))
                ? $inDataObj['parentId'] : null;

            if (is_null($inParentId)) {
                $resultList = $dao->getBulletinCategoryList($inDataObj);
            } else {
                $resultList
                    = $dao->getBulletinCategoryListByParentId($inDataObj,
                    $inParentId);
            }

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param array $inDataObj
     *
     * @return GrnBulletinCategory[]
     */
    public function getBulletinCategoryListWithNonLocal($inDataObj)
    {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnBulletinCategoryDAO();
            $inParentId = (array_key_exists('parentId', $inDataObj))
                ? $inDataObj['parentId'] : null;

            if (is_null($inParentId)) {
                $resultList
                    = $dao->getBulletinCategoryListWithNonLocal($inDataObj);
            } else {
                $resultList
                    = $dao->getBulletinCategoryListByParentIdWithNonLocal($inDataObj,
                    $inParentId);
            }

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param array $inDataObj
     * @param array $inCategoryNameArray
     *
     * @return GrnBulletinCategory[]
     */
    public function getBulletinCategoryListByNames(
        $inDataObj,
        $inCategoryNameArray
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnBulletinCategoryDAO();

            $resultList = $dao->getBulletinCategoryListByNames($inDataObj,
                $inCategoryNameArray);

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param array $inDataObj
     * @param array $inCategoryArray
     *
     * @return GrnBulletinCategory[]
     */
    public function getBulletinCategoryListByIds($inDataObj, $inCategoryArray)
    {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnBulletinCategoryDAO();

            $resultList = $dao->getBulletinCategoryListByIds($inDataObj,
                $inCategoryArray);

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    public function getBulletinCategoryListByParentIds(
        $inDataObj,
        $inParentIdArray
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnBulletinCategoryDAO();

            $resultList = $dao->getBulletinCategoryListByParentIds($inDataObj,
                $inParentIdArray);

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param $inDataObj
     * @param $inCategoryArray
     * @param $inCategoryNameArray
     *
     * @return GrnBulletinCategory[]
     */
    public function getBulletinCategoryListByIds_Names(
        $inDataObj,
        $inCategoryArray,
        $inCategoryNameArray
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $inDataObj['isCalcFoundRows'] = $this->isCalcFoundRows();
            $daoFctry
                = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao
                = $daoFctry->getGrnBulletinCategoryDAO();

            $resultList = $dao->getBulletinCategoryListByIds_Names($inDataObj,
                $inCategoryArray, $inCategoryNameArray);

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param $inDataObj
     * @param $inParentId
     *
     * @return int
     */
    public function getCountBulletinCategoryByParentId($inDataObj, $inParentId)
    {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnBulletinCategoryDAO();

            $resultCount = $dao->getCountBulletinCategoryByParentId($inDataObj,
                $inParentId);

            return $resultCount;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param $inDataObj
     * @param $inCategoryId
     *
     * @return array|bool|null
     */
    public function getBulletinCategoryOfCategoryId($inDataObj, $inCategoryId)
    {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnBulletinCategoryDAO();

            $result = $dao->getBulletinCategoryOfCategoryId($inDataObj,
                $inCategoryId);

            return $result;
        } catch (CBException $cbe) {

        }
    }

    /** ***************************************************** */
    /** -----        GrnBulletinCategoryLocal    --------- */
    /** ***************************************************** */
    /**
     * @param                          $inDataObj
     * @param GrnBulletinCategoryLocal $inBulletinCategoryLocalObj
     *
     * @return bool|int
     */
    public function insertBulletinCategoryLocal(
        $inDataObj,
        $inBulletinCategoryLocalObj
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnBulletinCategoryLocalDAO();
            $inspection
                = GRN_Bulletin_Category_Local_Inspection::getInstance();

            $insertCount = $dao->insert($inDataObj,
                $inBulletinCategoryLocalObj);

            if (($insertCount > 0) && ($inspection->isEnabled())) {
                $messageType = 'category_local_add';
                $message_args = [
                    'cid'           => $inBulletinCategoryLocalObj->getParentId(),
                    'language_code' => $inBulletinCategoryLocalObj->getLanguageCode(),
                    'category_name' => $inBulletinCategoryLocalObj->getName(),
                ];

                $inspection->record($messageType, $message_args);
            }

            return $insertCount;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param                          $inDataObj
     * @param GrnBulletinCategoryLocal $inBulletinCategoryLocalObj
     *
     * @return int
     */
    public function updateBulletinCategoryLocal(
        $inDataObj,
        $inBulletinCategoryLocalObj
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnBulletinCategoryLocalDAO();

            $inMessageTypeAdd = (array_key_exists('messageTypeAdd',
                $inDataObj)) ? $inDataObj['messageTypeAdd']
                : 'category_local_add';
            $inMessageTypeModify = (array_key_exists('messageTypeModify',
                $inDataObj)) ? $inDataObj['messageTypeModify']
                : 'category_local_modify';
            $inspection
                = GRN_Bulletin_Category_Local_Inspection::getInstance();

            $beforBulletinCategoryLocal
                = $dao->selectByCategoryId_LanguageCode($inDataObj,
                $inBulletinCategoryLocalObj);
            if ($beforBulletinCategoryLocal === false) {
                $insertCount = $dao->insert($inDataObj,
                    $inBulletinCategoryLocalObj);

                if (($insertCount > 0) && ($inspection->isEnabled())) {
                    $message_args = [
                        'cid'           => $inBulletinCategoryLocalObj->getParentId(),
                        'language_code' => $inBulletinCategoryLocalObj->getLanguageCode(),
                        'category_name' => $inBulletinCategoryLocalObj->getName(),
                    ];

                    $inspection->record($inMessageTypeAdd, $message_args);
                }

                return CB_BULLETIN_FACADE_DB_STATUS_INSERT;
            } else {
                $updateCount = $dao->update($inDataObj,
                    $inBulletinCategoryLocalObj);

                //MySQLは変化が無い場合UPDATE結果が0件になる。しかし、現在のGaroonのログ仕様は変化が無くても変更ログを出力しているので、更新件数が0でもログ出力している
                if (($updateCount >= 0) && ($inspection->isEnabled())) {
                    $message_args = [
                        'cid'                => $inBulletinCategoryLocalObj->getParentId(),
                        'language_code'      => $inBulletinCategoryLocalObj->getLanguageCode(),
                        'prev_category_name' => $beforBulletinCategoryLocal->getName(),
                        'next_category_name' => $inBulletinCategoryLocalObj->getName(),
                    ];

                    $inspection->record($inMessageTypeModify, $message_args);
                }

                return CB_BULLETIN_FACADE_DB_STATUS_UPDATE;
            }
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param                          $inDataObj
     * @param GrnBulletinCategoryLocal $inBulletinCategoryLocalObj
     *
     * @return bool|int
     */
    public function deleteBulletinCategoryLocal(
        $inDataObj,
        $inBulletinCategoryLocalObj
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnBulletinCategoryLocalDAO();

            $inMessageTypeDelete = (array_key_exists('messageTypeDelete',
                $inDataObj)) ? $inDataObj['messageTypeDelete']
                : 'category_local_delete';
            $inspection
                = GRN_Bulletin_Category_Local_Inspection::getInstance();

            $deleteCount = 0;
            $beforBulletinCategoryLocal
                = $dao->selectByCategoryId_LanguageCode($inDataObj,
                $inBulletinCategoryLocalObj);
            if ($beforBulletinCategoryLocal !== false) {
                $deleteCount = $dao->deleteByParentId_LanguageCode($inDataObj,
                    $inBulletinCategoryLocalObj);
                if (($deleteCount > 0) && ($inspection->isEnabled())) {
                    $message_args = [
                        'cid'           => $inBulletinCategoryLocalObj->getParentId(),
                        'language_code' => $inBulletinCategoryLocalObj->getLanguageCode(),
                        'category_name' => $beforBulletinCategoryLocal->getName(),
                    ];

                    $inspection->record($inMessageTypeDelete, $message_args);
                }
            }

            return $deleteCount;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param $inDataObj
     * @param $inCategoryId
     *
     * @return GrnBulletinCategoryLocal[]
     */
    public function getBulletinCategoryLocalListByCategoryId(
        $inDataObj,
        $inCategoryId
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnBulletinCategoryLocalDAO();
            $resultList
                = $dao->getBulletinCategoryLocalListByCategoryId($inDataObj,
                $inCategoryId);

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param array      $inDataObj
     * @param null|array $inExportLanguageCodeArray
     *
     * @return GrnBulletinCategoryLocal[]
     */
    public function getBulletinCategoryLocalListByLanguageCodes(
        $inDataObj,
        $inExportLanguageCodeArray = null
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnBulletinCategoryLocalDAO();


            if (is_null($inExportLanguageCodeArray)) {
                $resultList = $dao->getBulletinCategoryLocalList($inDataObj);
            } else {
                $resultList
                    = $dao->getBulletinCategoryLocalListByLanguageCodes($inDataObj,
                    $inExportLanguageCodeArray);
            }

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param int[]  $parentIds
     * @param string $userId
     *
     * @return int[]
     */
    public function getSubCategoryIdsRecursively(array $parentIds, $userId)
    {
        $dao = new GrnBulletinCategoryDAO();
        $ids = $dao->getSubCategoryIdsWithEvaluateAccess($parentIds, $userId);
        if (count($ids) > 0) {
            $ids = array_merge($ids,
                $this->getSubCategoryIdsRecursively($ids, $userId));
        }

        return $ids;
    }

    /**
     * @param array               $in_data_obj
     * @param GrnBulletinOperator $operator
     *
     * @return bool
     */
    public function insertBulletinOperator(
        $in_data_obj,
        GrnBulletinOperator $operator
    ) {
        try {
            $in_data_obj['db'] = $this->_db;
            $dao_fctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $dao_fctry->getGrnBulletinOperatorDAO();

            $result = $dao->insertOperator($in_data_obj, $operator);

            return $result;
        } catch (CBException $cbe) {
        }
    }

    /**
     * @param array               $in_data_obj
     * @param GrnBulletinOperator $operator
     *
     * @return bool
     */
    public function isBulletinOperator(
        $in_data_obj,
        GrnBulletinOperator $operator
    ) {
        try {
            $in_data_obj['db'] = $this->_db;
            $dao_fctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $dao_fctry->getGrnBulletinOperatorDAO();

            $result = $dao->isOperator($in_data_obj, $operator);

            return $result;
        } catch (CBException $cbe) {
        }
    }

    /**
     * @param array $in_data_obj
     * @param int   $article_id
     * @param bool  $is_draft
     *
     * @return array
     */
    public function getOperatorListByArticleId(
        $in_data_obj,
        $article_id,
        $is_draft = false
    ) {
        try {
            $in_data_obj['db'] = $this->_db;
            $dao_fctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $dao_fctry->getGrnBulletinOperatorDAO();

            $result = $dao->getOperatorListByArticleID($in_data_obj,
                $article_id, $is_draft);

            return $result;
        } catch (CBException $cbe) {
        }
    }

    /**
     * @param GrnBulletinOperator[] $operatorList
     * @param bool                  $isMobile
     * @param bool                  $is_include_deleted_users
     *
     * @return array
     */
    public function getOperatorListForView(
        $operatorList,
        $isMobile = false,
        $is_include_deleted_users = true
    ) {
        if (is_array($operatorList) && count($operatorList) === 0) {
            return [];
        }

        return MemberLogic::getInstance()->getDisplayUsersByUserIds(
            array_keys($operatorList),
            GRN_Bulletin::GRN_BULLETIN_APPLICATION_ID,
            $isMobile,
            $is_include_deleted_users
        );
    }

    /**
     * @param array $in_data_obj
     * @param int   $article_id
     * @param bool  $is_draft
     *
     * @return mixed
     */
    public function deleteAllOperatorByArticleId(
        $in_data_obj,
        $article_id,
        $is_draft = false
    ) {
        try {
            $in_data_obj['db'] = $this->_db;
            $dao_fctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $dao_fctry->getGrnBulletinOperatorDAO();

            $result = $dao->deleteAllOperatorByArticleId($in_data_obj,
                $article_id, $is_draft);

            return $result;
        } catch (CBException $cbe) {
        }
    }

    /**
     * @param int $manually_enter_sender_id
     *
     * @return string
     */
    public function getSenderNameById($manually_enter_sender_id)
    {
        try {
            $dao_factory = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $dao_factory->getGrnBulletinManuallyEnterSenderDAO();
            $result = $dao->getSenderNameById($this->_db,
                $manually_enter_sender_id);

            return $result;
        } catch (CBException $cbe) {
        }
    }

    /**
     * @param string $sender_name
     *
     * @return array
     */
    public function searchManuallyEnterSenderIdsBySenderName($sender_name)
    {
        try {
            $dao_factory = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao
                = $dao_factory->getGrnBulletinManuallyEnterSenderDAO();
            $manually_enter_sender_ids = $dao->getIdsBySenderName($this->_db,
                $sender_name, true);

            return $manually_enter_sender_ids;
        } catch (CBException $cbe) {
        }
    }

    /**
     * @param string $sender_name
     *
     * @return int|null
     */
    public function insertManuallyEnterSender($sender_name)
    {
        try {
            $dao_factory = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $dao_factory->getGrnBulletinManuallyEnterSenderDAO();
            $insert_id = $dao->insertManuallyEnterSender($this->_db,
                $sender_name);

            if ( ! Validate::isNumber($insert_id) || $insert_id < 1) {
                $ids = $dao->getIdsBySenderName($this->_db, $sender_name);
                $insert_id = count($ids) > 0 ? $ids[0] : null;
            }

            return $insert_id;
        } catch (CBException $cbe) {
        }
    }

    /**
     * @return bool
     */
    public function cleanManuallyEnterSender()
    {
        try {
            $dao_factory = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $dao_factory->getGrnBulletinManuallyEnterSenderDAO();

            $result = $dao->cleanManuallyEnterSender($this->_db);

            return $result;
        } catch (CBException $cbe) {
        }
    }

    /**
     * @param array $category_ids
     * @param array $dao_params
     *
     * @return array
     */
    public function selectDynamicRolesNotificationCategory(
        array $category_ids,
        $dao_params = []
    ) {
        $dao_params['db'] = $this->_db;
        $dao_factory = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
        $dao = $dao_factory->getBulletinAdjustSubscribeDAO();

        return $dao->selectDynamicRolesNotificationCategory($category_ids,
            $dao_params);
    }

    /**
     * @param array $category_ids
     * @param array $dao_params
     *
     * @return array
     */
    public function selectRolesNotificationCategory(
        array $category_ids,
        $dao_params = []
    ) {
        $dao_params['db'] = $this->_db;
        $dao_factory = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
        $dao = $dao_factory->getBulletinAdjustSubscribeDAO();

        return $dao->selectRolesNotificationCategory($category_ids,
            $dao_params);
    }

    /**
     * @param array $category_ids
     * @param array $dao_params
     *
     * @return array
     */
    public function selectGroupsNotificationCategory(
        array $category_ids,
        $dao_params = []
    ) {
        $dao_params['db'] = $this->_db;
        $dao_factory = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
        $dao = $dao_factory->getBulletinAdjustSubscribeDAO();

        return $dao->selectGroupsNotificationCategory($category_ids,
            $dao_params);
    }

    /**
     * @param array $category_ids
     * @param array $dao_params
     *
     * @return array
     */
    public function selectUsersNotificationCategory(
        array $category_ids,
        $dao_params = []
    ) {
        $dao_params['db'] = $this->_db;
        $dao_factory = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
        $dao = $dao_factory->getBulletinAdjustSubscribeDAO();

        return $dao->selectUsersNotificationCategory($category_ids,
            $dao_params);
    }

    /**
     * @param array $category_ids
     * @param array $dao_params
     *
     * @return array
     */
    public function selectCategoryForceNotify(
        array $category_ids,
        $dao_params = []
    ) {
        $dao_params['db'] = $this->_db;
        $dao_factory = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
        $dao = $dao_factory->getBulletinAdjustSubscribeDAO();

        return $dao->selectCategoryForceNotify($category_ids, $dao_params);
    }

    /**
     * @param string $category_id
     * @param array  $dao_params
     *
     * @return array
     */
    public function selectCategorySubscribeByCategoryId(
        $category_id,
        $dao_params = []
    ) {
        $dao_params['db'] = $this->_db;
        $dao_factory = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
        $dao = $dao_factory->getBulletinSubscribeCategoryDAO();

        return $dao->selectCategorySubscribeByCategoryId($category_id,
            $dao_params);
    }

    /**
     * @param string $category_id
     * @param array  $user_ids
     * @param array  $dao_params
     *
     * @return array
     */
    public function insertFromParentCategorySubscribe(
        $category_id,
        array $user_ids,
        $dao_params = []
    ) {
        $dao_params['db'] = $this->_db;
        $dao_factory = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
        $dao = $dao_factory->getBulletinSubscribeCategoryDAO();

        return $dao->insertFromParentCategorySubscribe($category_id, $user_ids,
            $dao_params);
    }

    /**
     * @param string $category_id
     * @param array  $not_in_user_ids
     * @param array  $dao_params
     *
     * @return array
     */
    public function insertFromParentCategorySubscribeAllUser(
        $category_id,
        array $not_in_user_ids,
        $dao_params = []
    ) {
        $dao_params['db'] = $this->_db;
        $dao_factory = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
        $dao = $dao_factory->getBulletinSubscribeCategoryDAO();

        return $dao->insertFromParentCategorySubscribeAllUser($category_id,
            $not_in_user_ids, $dao_params);
    }

    /**
     * @param string $category_id
     * @param array  $dao_params
     *
     * @return array
     */
    public function selectUnSubscribeCategoryUserByCategoryId(
        $category_id,
        $dao_params = []
    ) {
        $dao_params['db'] = $this->_db;
        $dao_factory = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
        $dao = $dao_factory->getBulletinUnSubscribeCategoryDAO();

        return $dao->selectUnSubscribeCategoryUserByCategoryId($category_id,
            $dao_params);
    }

    /**
     * @param string $user_id
     * @param array  $dao_params
     *
     * @return array
     */
    public function selectUnSubscribeCategoryByUserId(
        $user_id,
        $dao_params = []
    ) {
        $dao_params['db'] = $this->_db;
        $dao_factory = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
        $dao = $dao_factory->getBulletinUnSubscribeCategoryDAO();

        return $dao->selectUnSubscribeCategoryByUserId($user_id, $dao_params);
    }

    /**
     * @param string $user_id
     * @param string $category_id
     * @param array  $dao_params
     *
     * @return array
     */
    public function insertUnscribeUserCategory(
        $user_id,
        $category_id,
        $dao_params = []
    ) {
        $dao_params['db'] = $this->_db;
        $dao_factory = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
        $dao = $dao_factory->getBulletinUnSubscribeCategoryDAO();

        return $dao->insertUnscribeUserCategory($user_id, $category_id,
            $dao_params);
    }

    /**
     * @param string $user_id
     * @param string $category_id
     * @param array  $dao_params
     *
     * @return array
     */
    public function selectUnscribeUserCategory(
        $user_id,
        $category_id,
        $dao_params = []
    ) {
        $dao_params['db'] = $this->_db;
        $dao_factory = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
        $dao = $dao_factory->getBulletinUnSubscribeCategoryDAO();

        return $dao->selectUnscribeUserCategory($user_id, $category_id,
            $dao_params);
    }

    /**
     * @param string $user_id
     * @param string $category_id
     * @param array  $dao_params
     *
     * @return array
     */
    public function deleteUnscribeUserCategory(
        $user_id,
        $category_id,
        $dao_params = []
    ) {
        $dao_params['db'] = $this->_db;
        $dao_factory = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
        $dao = $dao_factory->getBulletinUnSubscribeCategoryDAO();

        return $dao->deleteUnscribeUserCategory($user_id, $category_id,
            $dao_params);
    }

    /**
     * @param string $user_id
     * @param int    $adjust_subscribe
     * @param array  $dao_params
     *
     * @return array
     */
    public function insertPersonalAdjustSubscribe(
        $user_id,
        $adjust_subscribe,
        $dao_params = []
    ) {
        $dao_params['db'] = $this->_db;
        $dao_factory = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
        $dao = $dao_factory->getBulletinProfileDataDAO();

        return $dao->insertPersonalAdjustSubscribe($user_id, $adjust_subscribe,
            $dao_params);
    }

    /**
     * @param string $user_id
     * @param array  $dao_params
     *
     * @return array
     */
    public function selectPersonalAdjustSubscribe($user_id, $dao_params = [])
    {
        $dao_params['db'] = $this->_db;
        $dao_factory = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
        $dao = $dao_factory->getBulletinProfileDataDAO();

        return $dao->selectPersonalAdjustSubscribe($user_id, $dao_params);
    }

    /**
     * @param $article_id
     * @param $acknowledgement_user_ids
     *
     * @return bool
     */
    public function insertAcknowledgement(
        $article_id,
        $acknowledgement_user_ids
    ) {
        $dao_factory = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
        $dao = $dao_factory->getGrnBulletinReadstatusDAO();

        $result = $dao->insertAcknowledgement($this->_db, $article_id,
            $acknowledgement_user_ids);

        return $result;
    }

    /**
     * @param int $article_id
     * @param int $limit
     * @param int $offset
     *
     * @return array
     */
    public function getAcknowledgementList($article_id, $limit, $offset)
    {
        $dao_factory = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
        $dao = $dao_factory->getGrnBulletinReadstatusDAO();

        $result = $dao->getAcknowledgementList($this->_db, $article_id, $limit,
            $offset);

        return $result;
    }

    /**
     * @param int  $article_id
     * @param bool $is_read
     *
     * @return mixed
     */
    public function getAcknowledgementNum($article_id, $is_read = false)
    {
        $dao_factory = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
        $dao = $dao_factory->getGrnBulletinReadstatusDAO();

        $result = $dao->getAcknowledgementNum($this->_db, $article_id,
            $is_read);

        return $result;

    }
}
