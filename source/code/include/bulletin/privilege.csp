<?php

/**
 * 掲示板特権管理
 *
 * @date    2005/03/08
 * @author  Y.Tanaka
 * @package grn.bulletin
 */

require_once('bulletin/uum_evaluation.csp');
require_once('grn/application.csp');

/**
 * 特権管理クラス
 *
 * @package grn.bulletin
 */
class GRN_Bulletin_PrivilegeManager extends GRN_Bulletin_UumEvaluation
{
    private static $_instance = null;

    /**
     * @static
     * @return GRN_Bulletin_PrivilegeManager
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * コンストラクタ
     */
    function __construct()
    {
        parent::__construct();

        $this->_table_prefix = 'prv';
        $this->_column_prefix = 'authority_';
        $this->_auth_columns = ['operation' => 0];
    }


    /**
     * レコードイベント処理
     */
    function onAction($action, & $object, & $target, $authorities)
    {
        require_once('inspection.csp');
        $inspection = GRN_Bulletin_Inspection::getInstance();
        $inspection->writeLogSystem($action, $object, $target, 'privilege',
            $authorities);
    }

    /**
     * @access private
     */
    var $_parent_cache = [];

    /**
     * カテゴリに対してユーザーが持つ権限を取得する
     *
     * @param object $user     アクセスするユーザー
     * @param object $category カテゴリ
     *
     * @return array  array( 'read'=>[0,1], 'write'=>[0,1], 'follow'=>[0,1] )
     */
    function getPrivileges(& $user, & $category)
    {
        if (is_object($category)) {
            $cid = $category->getOID();
        } else {
            $cid = $category;
        }

        if ( ! $cid) {
            return [];
        }

        $hierarchy = [];

        $current = $cid;

        $app_locator = GRN_ApplicationLocator::instance();
        $db = $app_locator->getConnection('bulletin');

        while ( ! is_null($current)) {
            $hierarchy = [$current => 1] + $hierarchy;
            if (array_key_exists($current, $this->_parent_cache)) {
                $current = $this->_parent_cache[$current];
            } else {
                $query = cb_queryf($db,
                    "SELECT col_parent FROM tab_@S WHERE _id ='@S';",
                    $this->_object_class_name, $current);
                $result = $db->query($query);
                if (cb_is_db_result($result)) {
                    $row = $db->fetch_row($result);
                    $this->_parent_cache[$current] = $row[0];;
                    $current = $row[0];
                    $db->free_result($result);
                } else {
                    $current = null;
                }
            }
        }

        $privileges = $this->evaluateUserObjects($user, $hierarchy);

        if ( ! $privileges) {
            return [];
        }

        $privileges_keys = array_keys($privileges);
        $idx = array_pop($privileges_keys);
        $result = $privileges[$idx];
        unset($privileges[$idx]);

        foreach (array_keys($privileges) as $oid) {
            $auth = $privileges[$oid];

            foreach (array_keys($auth) as $key) {
                if ( ! array_key_exists($key, $result)) {
                    $result[$key] = $auth[$key];
                } else {
                    $result[$key] |= $auth[$key];
                }
            }
        }

        return $result;
    }

    function privileged(& $user, & $category, $privileges)
    {
        if ( ! $privileges) {
            return false;
        }

        if ( ! is_array($privileges)) {
            if ( ! is_string($privileges)) {
                return false;
            }

            $privileges = [$privileges];
        }

        $auth = $this->getPrivileges($user, $category);

        foreach ($privileges as $key) {
            if ( ! @ $auth[$key]) {
                return false;
            }
        }

        return true;
    }

    /**
     * カテゴリの権限を評価して、権限を有するカテゴリリストを取得
     *
     * @param object  $user       ユーザー
     * @param array   $categories 評価するカテゴリのリスト
     * @param integer $privileges 評価する権限のリスト
     *
     * @return array
     */
    function evaluateCategories(
        & $user,
        $categories,
        $privileges,
        $parent_id = null
    ) {
        if ( ! $user || ! $categories || ! $privileges) {
            return [];
        }

        if ( ! is_null($parent_id)) {
            if ( ! $this->privileged($user, $parent_id, $privileges)) {
                return [];
            }
        }

        // cache privileges
        $authorities = $this->evaluateUserObjects($user, $categories);

        if ( ! is_array($privileges)) {
            if ( ! is_string($privileges)) {
                return [];
            }

            $privileges = [$privileges];
        }

        $granted = [];
        foreach ($privileges as $key) {
            $granted[$key] = 1;
        }

        foreach (array_keys($categories) as $id) {
            if ( ! is_null($parent_id)) {
                $this->_parent_cache[$id] = $parent_id;

                if ($authorities[$id] != $granted) {
                    unset($categories[$id]);
                }
            } else {
                if ( ! $this->privileged($user, $id, $privileges)) {
                    unset($categories[$id]);
                }
            }
        }

        return $categories;
    }
}


