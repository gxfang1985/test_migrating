<?php

use grn\bulletin\bean\GrnBulletinOperator;

/**
 * @author  Tanaka, Yoshiaki        2004/11
 * @package grn.bulletin
 */

require_once('bulletin/table.csp');


/**
 * 下書きオブジェクトを生成
 *
 * @package grn.bulletin
 */
class GRN_Bulletin_DraftFactory
{
    /**
     * @access private
     */
    var $_tab_draft = null;
    /**
     * @access private
     */
    var $_cache = [];

    /** @var self */
    private static $_instance = null;

    /**
     * @return GRN_Bulletin_DraftFactory
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    function __construct()
    {
        $app_locator = GRN_ApplicationLocator::instance();
        $tm = $app_locator->getTableManager('bulletin');
        $this->_tab_draft = $tm->getTableInfo('GRN_Bulletin_DraftEntity');
    }

    /**
     * @param GRN_Bulletin_Draft $draft
     */
    function _cache($draft)
    {
        assert('is_a( $draft, "GRN_Bulletin_Draft" )');

        $this->_cache[$draft->getOID()] = $draft;
    }

    /**
     * @return GRN_Bulletin_Draft or FALSE
     */
    function _get($id)
    {
        $ret = false;
        if (array_key_exists($id, $this->_cache)) {
            $ret = $this->_cache[$id];
        }

        return $ret;
    }

    /**
     * テープルオブジェクトからAPIオブジェクトを生成する
     *
     * @param GRN_Bulletin_DraftEntity
     *
     * @return GRN_Bulletin_Draft
     */
    function row2object(& $row)
    {
        if ( ! $row) {
            $ret = false;

            return $ret;
        }

        if ( ! ($object = $this->_get($row->getOID()))) {
            $object = new GRN_Bulletin_Draft($row);
            $this->_cache($object);
        }

        return $object;
    }
}

/**
 * 下書きオブジェクト
 *
 * @package grn.bulletin
 */
class GRN_Bulletin_Draft
{
    /**
     * @access private
     */
    var $_draft = null;

    /**
     * @access private
     */
    function _getDraftTable()
    {
        static $_tab_draft = null;
        if (is_null($_tab_draft)) {
            $app_locator = GRN_ApplicationLocator::instance();
            $tm = $app_locator->getTableManager('bulletin');
            $_tab_draft = $tm->getTableInfo('GRN_Bulletin_DraftEntity');
        }

        return $_tab_draft;
    }

    /**
     * @access private
     * @return GRN_Bulletin_DraftEntity
     */
    function _getRow()
    {
        return $this->_draft;
    }


    /**
     * コンストラクタ
     *
     * @param object GRN_Bulletin_DraftEntity $row
     */
    function __construct($row)
    {
        $this->_draft = clone $row;
    }


    /**
     * アクセス権をチェックする
     *
     * @param CB_User $user        ユーザー
     * @param integer $acc_mode    アクセスモード
     * @param bool    $throw_error アクセス拒否でエラーを発生する場合にTRUE
     *
     * @return bool
     */
    function access(& $user, $acc_mode, $throw_error = false)
    {
        // フォロー書き込みは全て拒否
        if (intval($acc_mode) & GRN_BULLETIN_ACCESS_F) {
            if ($throw_error) {
                cb_throw_error(E_GRN_BULLETIN_ACCESS_DENY_FOLLOW);
            }

            return false;
        }

        // 管理者のチェックは行われない
        // 作成者本人だけが何でもあり

        $owner =& $this->get('owner');
        assert('$owner');

        if ( ! $user || $user->getOID() != $owner->getOID()) {
            if ($throw_error) {
                if ($acc_mode == GRN_BULLETIN_ACCESS_R) {
                    cb_throw_error(E_GRN_BULLETIN_ACCESS_DENY_READ);
                }

                cb_throw_error(E_GRN_BULLETIN_ACCESS_DENY_WRITE);
            }

            return false;
        }

        return true;
    }

    /**
     * ユーザーの下書きに対する権限情報を取得する
     *
     * @param CB_User $user ユーザー
     *
     * @return array  array( $authority_name => [0,1], ... )
     */
    function getAuthorities(& $user)
    {
        if ($user && $this->getId('owner') == $user->getOID()) {
            return ['read' => 1, 'follow' => 0, 'write' => 1];
        }

        return ['read' => 0, 'follow' => 0, 'write' => 0];
    }

    function isDeletable(& $user, $throw_error = false)
    {
        if ($this->access($user, GRN_BULLETIN_ACCESS_W, false)) {
            return true;
        }

        if ($throw_error) {
            cb_throw_error(E_GRN_BULLETIN_ACCESS_DENY_DELETE);
        }

        return false;
    }

    /**
     * 下書きを削除する、同時に添付ファイルも削除される
     */
    function delete(& $user)
    {
        $this->access($user, GRN_BULLETIN_ACCESS_W, true);

        require_once('bulletin/file.csp');
        $fm = GRN_Bulletin_FileManager::getInstance();

        $fm->deleteFiles($user, $this);

        $this->_draft->delete();
        $this->_draft = null;

        return true;
    }

    function isMovable(& $user, $throw_error = false)
    {
        if ($throw_error) {
            cb_throw_error(E_GRN_BULLETIN_ACCESS_DENY_MOVE);
        }

        return false;
    }

    /**
     * 無効なオブジェクトか調べる
     *
     * @return bool  有効の場合にTRUE、それ以外の場合でFALSE
     */
    function isValid()
    {
        $row =& $this->_getRow();

        return ! is_null($row);
    }

    /**
     * オブジェクトIDを取得する
     *
     * @return string
     */
    function getOID()
    {
        $row = $this->_getRow();

        return $row->getOID();
    }

    /**
     * リレーションオブジェクトのIDを取得する
     *
     * @param $prop_name
     *
     * @return string
     */
    function getId($prop_name)
    {
        $row =& $this->_getRow();

        return $row->getId($prop_name);
    }

    /**
     * プロパティを取得する
     *
     * @param string $property_name プロパティ名
     *
     * @return mixed  プロパティ値
     */
    function &get($property_name)
    {
        $row = $this->_getRow();

        if ($property_name == 'category') {
            require_once('bulletin/category.csp');
            $factory = GRN_Bulletin_CategoryFactory::getInstance();
            $ret = $factory->row2object($row->get('category'));

            return $ret;
        }

        $ret = $row->get($property_name);

        return $ret;
    }

    /**
     * プロパティを設定する
     *
     * @param CB_User $user       ユーザー
     * @param array   $properties プロパティ名をキーとする配列
     *
     * @return bool
     */
    function setProperties(& $user, $properties)
    {
        $this->access($user, GRN_BULLETIN_ACCESS_W, true);

        $row =& $this->_getRow();

        $prop = [
            'subject'               => 1,
            'data'                  => 1,
            'html'                  => 1,
            'can_follow'            => 1,
            'start_timestamp'       => 1,
            'end_timestamp'         => 1,
            'start_is_datetime'     => 1,
            'end_is_datetime'       => 1,
            'reserve_int1'          => 1,
            'manually_enter_sender' => 1,
        ];

        foreach (array_keys($prop) as $name) {
            if (array_key_exists($name, $properties)) {
                $row->set($name, $properties[$name]);
            }
        }
        $group = null;
        if (isset($properties['creator_group'])) {
            require_once('application.csp');
            require_once('grn/error_code.csp');
            $app = new GRN_Bulletin();
            $groups = [];
            $user_groups = $app->getUserGroups($user->getOID(), $groups);
            if ( ! array_key_exists($properties['creator_group'], $groups)) {
                cb_throw_error(E_GRN_GROUP_NOT_FOUND);
            }
            $group = $groups[$properties['creator_group']];
        }
        $row->set('creator_group', $group);

        // update maintainers
        $this->setDraftOperator($properties, $this->get('creator'),
            $this->get('category'), false);

        $row->onUpdate($user);

        return true;
    }

    /**
     * カテゴリを設定する
     *
     * @param object CB_User               $user
     * @param object GRN_Bulletin_Category $category
     *
     * @return bool
     */
    function setCategory(& $user, & $category)
    {
        $this->access($user, GRN_BULLETIN_ACCESS_W, true);

        $row =& $this->_getRow();

        if ($category) {
            $row->set('category', $category->_getRow());
            $row->onUpdate($user);

            return true;
        }

        // 下書きなのでカテゴリ設定なしを許可している

        $row->set('category', null);
        $row->onUpdate($user);

        return true;
    }

    /**
     * 添付ファイルを追加する
     *
     * @param                $user
     * @param GRN_File|array $file $_FILESの要素またはGRN_File
     *
     * @return bool
     */
    function addFile(& $user, & $file)
    {
        $this->access($user, GRN_BULLETIN_ACCESS_W, true);

        require_once('bulletin/file.csp');
        $fm = GRN_Bulletin_FileManager::getInstance();
        $ret = $fm->addFile($user, $this, $file);

        return $ret;
    }

    /**
     * 添付ファイルを取得する
     *
     * @param string $id 添付ファイルID
     *
     * @return GRN_File|false ファイルがない場合はFALSE
     */
    function getFile($id)
    {
        require_once('bulletin/file.csp');
        $fm = GRN_Bulletin_FileManager::getInstance();
        $ret = $fm->getFile($this, $id);

        return $ret;
    }

    /**
     * 添付ファイル数を取得する
     *
     * @return integer
     */
    function getNumFiles()
    {
        require_once('bulletin/file.csp');
        $fm = GRN_Bulletin_FileManager::getInstance();

        return $fm->getNumFiles($this);
    }


    /**
     * 添付ファイルの一覧を取得する
     *
     * @return array  array( $id => & GRN_File, ... )
     */
    function getFiles()
    {
        require_once('bulletin/file.csp');
        $fm = GRN_Bulletin_FileManager::getInstance();

        return $fm->getFiles($this);
    }

    /**
     * 添付ファイルを削除する
     *
     * @param CB_User $user
     * @param string  $id 添付ファイルID
     *
     * @return bool
     */
    function deleteFile(& $user, $id)
    {
        $this->access($user, GRN_BULLETIN_ACCESS_W, true);
        require_once('bulletin/file.csp');
        $fm = GRN_Bulletin_FileManager::getInstance();

        return $fm->deleteFile($user, $this, $id);
    }

    /**
     * @param CB_User $user
     *
     * @return bool
     */
    function releaseFiles(& $user)
    {
        $this->access($user, GRN_BULLETIN_ACCESS_W, true);
        require_once('bulletin/file.csp');
        $fm = GRN_Bulletin_FileManager::getInstance();

        return $fm->releaseFiles($user, $this);
    }

    /**
     * @param array                 $properties
     * @param CB_User               $creator
     * @param GRN_Bulletin_Category $category
     * @param bool                  $is_new
     */
    function setDraftOperator($properties, $creator, $category, $is_new = true)
    {
        require_once('bulletin/BulletinFacade.csp');
        $dao = new BulletinFacade();
        $original_maintainer_list = [];
        if ( ! $is_new) {
            $original_maintainer_list = $dao->getOperatorListByArticleId([],
                $this->getOID(), true);
        }

        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');

        $insert_maintainer_id_list = cb_at($properties, 'maintainer_id_list',
            []);
        $insert_maintainer_list = [];
        $insert_maintainers_info
            = $uum->getUsersById($insert_maintainer_id_list);
        foreach ($insert_maintainer_id_list as $insert_maintainer_id) {
            if ( ! array_key_exists($insert_maintainer_id,
                    $insert_maintainers_info)
                 || ($creator->getOID() === $insert_maintainer_id)
            ) {
                continue;
            }

            $m_user = $insert_maintainers_info[$insert_maintainer_id];

            $maintainer = new GrnBulletinOperator();
            $maintainer->setUser($insert_maintainer_id);
            $maintainer->setUserName($m_user->get('display_name'));
            $maintainer->setDraft($this->getOID());
            $insert_maintainer_list[] = $maintainer;

            if (($category instanceof GRN_Bulletin_Category)
                && ! array_key_exists($insert_maintainer_id,
                    $original_maintainer_list)
            ) {
                $access_status
                    = $category->checkMaintainerUsersAccess([$insert_maintainer_id]);
                if (count($access_status) === 0) {
                    cb_throw_error(E_GRN_BULLETIN_MAINTAINER_NO_CATEGORY_PERMISSION);
                }
            }
        }

        if ( ! $is_new) {
            $dao->deleteAllOperatorByArticleId([], $this->getOID(), true);
        }

        foreach ($insert_maintainer_list as $insert_maintainer) {
            $dao->insertBulletinOperator([], $insert_maintainer);
        }
    }
}


/**
 * @package grn.bulletin
 */
class GRN_Bulletin_DraftManager
{
    /** @var self */
    private static $_instance = null;

    /**
     * @return GRN_Bulletin_DraftManager
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * @access private
     */
    var $_tab_draft = null;


    /**
     * コンストラクタ
     */
    function __construct()
    {
        $app_locator = GRN_ApplicationLocator::instance();
        $tm = $app_locator->getTableManager('bulletin');
        $this->_tab_draft = $tm->getTableInfo('GRN_Bulletin_DraftEntity');
    }


    /**
     * 下書きを保存する
     *
     * @param CB_User               $user       ユーザー
     * @param GRN_Bulletin_Category $category   カテゴリ
     * @param array                 $properties 内容の値
     * @param array                 $files      添付ファイル
     *
     * @return mixed  成功の場合は下書きオブジェクト、それ以外の場合はFALSE
     */
    function createDraft($user, $category, $properties, $files)
    {
        $row = $this->_tab_draft->newRow();

        $row->set('owner', $user);

        $props = [
            'subject'               => 1,
            'data'                  => 1,
            'html'                  => 1,
            'can_follow'            => 1,
            'start_timestamp'       => 1,
            'end_timestamp'         => 1,
            'start_is_datetime'     => 1,
            'end_is_datetime'       => 1,
            'reserve_int1'          => 1,
            'manually_enter_sender' => 1,
        ];

        foreach (array_keys($properties) as $key) {
            if (array_key_exists($key, $props)) {
                $row->set($key, $properties[$key]);
            }
        }

        if ($category) {
            $row->set('category', $category->_getRow());
        }
        $group = null;
        if (isset($properties['creator_group'])) {
            require_once('application.csp');
            require_once('grn/error_code.csp');
            $app = new GRN_Bulletin();
            $groups = [];
            $user_groups = $app->getUserGroups($user->getOID(), $groups);
            if ( ! array_key_exists($properties['creator_group'], $groups)) {
                cb_throw_error(E_GRN_GROUP_NOT_FOUND);
            }
            $group = $groups[$properties['creator_group']];
        }
        $row->set('creator_group', $group);
        $factory = GRN_Bulletin_DraftFactory::getInstance();
        $draft = $factory->row2object($row);

        if ($files) {
            foreach (array_keys($files) as $fn) {
                if (is_array($files[$fn])
                    && $files[$fn]['error'] != UPLOAD_ERR_OK
                ) {
                    continue;
                }

                $draft->addFile($user, $files[$fn]);
            }
        }

        // add maintainer
        $draft->setDraftOperator($properties, $user, $category);

        $row->onCreate($user);

        return $draft;
    }

    /**
     * 下書きオブジェクトを取得する
     *
     * @param CB_User $user ユーザー
     * @param int     $did  下書きID
     * @param int     $acc_mode
     *
     * @return mixed  成功の場合は下書きオブジェクト、ID不正な場合はFALSEを返す
     */
    function getDraft(& $user, $did, $acc_mode = GRN_BULLETIN_ACCESS_R)
    {
        $db = $this->_tab_draft->getDBConnection();
        $did = $db->escape($did);

        if ( ! ($row = $this->_tab_draft->getRow($did))) {
            $ret = false;

            return $ret;
        }

        $factory = GRN_Bulletin_DraftFactory::getInstance();
        $draft = $factory->row2object($row);

        $draft->access($user, $acc_mode, true);

        return $draft;
    }
}
 

