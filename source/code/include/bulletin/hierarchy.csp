<?php

/**
 * @author  Tanaka, Yoshiaki
 * @date    2005/03/12
 * @package grn.bulletin
 */

require_once('bulletin/category.csp');

/**
 * ファイル管理カテゴリのAPIオブジェクトを生成
 * アクセス権のチェックはないのでロジック内部でのみの利用とすること
 *
 * @package grn.bulletin
 */
class GRN_Bulletin_Hierarchy
{
    private static $_instance = null;

    /**
     * @return GRN_Bulletin_Hierarchy
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * @access private
     */
    var $_mgr_category = null;
    var $_mgr_access = null;
    var $_mgr_privilege = null;


    function __construct()
    {
        require_once('bulletin/category.csp');
        $this->_mgr_category = GRN_Bulletin_CategoryManager::getInstance();
        require_once('bulletin/access.csp');
        $this->_mgr_access = GRN_Bulletin_AccessManager::getInstance();
        require_once('bulletin/privilege.csp');
        $this->_mgr_privilege = GRN_Bulletin_PrivilegeManager::getInstance();
    }


    /**
     * @access private
     */
    private $_subscription = false;

    function setSubscriptionCategories($view_subscription)
    {
        $this->_subscription = $view_subscription;
    }

    /**
     * @access private
     */
    private $_notification = false;

    function setNotificationCategories($view_notification)
    {
        $this->_notification = $view_notification;
    }

    /**
     * @access private
     */
    private $_checkbox = false;
    private $_system = false;

    function setCheckBoxCategories($view_checkbox, $system)
    {
        $this->_checkbox = $view_checkbox;
        $this->_system = $system;
    }

    /**
     * @access private
     */
    var $_path_string = false;

    function setEnablePathString($enable)
    {
        $this->_path_string = $enable;
    }

    function getEnablePathString()
    {
        return $this->_path_string;
    }

    /**
     * @access private
     */
    var $_delimiter = null;

    function setDelimiter($delimiter)
    {
        $this->_delimiter = $delimiter;
    }

    function getDelimiter()
    {
        return $this->_delimiter;
    }

    /**
     * @access private
     */
    var $_privileges = null;

    function setPrivileges($privileges)
    {
        $this->_privileges = $privileges;
    }

    function getPrivileges()
    {
        return $this->_privileges;
    }

    /**
     * @access private
     */
    var $_access_mode = GRN_BULLETIN_ACCESS_R;

    function setAccessMode($mode)
    {
        $this->_access_mode = $mode;
    }

    function getAccessMode()
    {
        return $this->_access_mode;
    }


    function addNotificationInfo(& $user, & $info)
    {
        if ( ! is_array($info) || ! array_key_exists('cid', $info)) {
            assert('FALSE');
        }

        // 購読カテゴリを取得
        if ($this->_subscription && ! is_array($this->_subscription)) {
            require_once('bulletin/notification.csp');
            $nm = GRN_Bulletin_NotificationManager::getInstance();
            $this->_subscription = $nm->getSubscribedCategoryIds($user);
        }
        // 通知カテゴリを取得
        if ($this->_notification && ! is_array($this->_notification)) {
            require_once('bulletin/notification.csp');
            $nm = GRN_Bulletin_NotificationManager::getInstance();
            $this->_notification = $nm->getNotifiedCategoryIds($user);
        }

        if (is_array($this->_subscription)) {
            if (array_key_exists($info['cid'], $this->_subscription)) {
                $info['subscribed'] = true;
            } else {
                $info['subscribed'] = false;
            }
        }
        if (is_array($this->_notification)) {
            if (array_key_exists($info['cid'], $this->_notification)) {
                $info['notified'] = true;
            } else {
                $info['notified'] = false;
            }
        }
    }

    function addCheckBoxInfo(& $user, & $info)
    {
        if ($this->_checkbox) {
            // システム設定画面でない場合、運用管理権限があるかどうかチェックする
            $info['checkbox'] = $this->_system
                ? true
                : $this->_mgr_privilege->privileged($user, $info['cid'],
                    ['operation']);
        }
    }

    /**
     * カテゴリ情報を生成する
     *
     * @access private
     */
    function createNode(& $user, & $category)
    {
        $data = [
            'nid'         => $category->getOID(), // UI部品で利用しているID
            'cid'         => $category->getOID(),
            'name'        => $category->get('name'),
            'foreign_key' => $category->get('foreign_key'),
            'child_count' => $category->getNumCategories($user,
                $this->_access_mode),
        ];

        $this->addNotificationInfo($user, $data);
        $this->addCheckBoxInfo($user, $data);

        return $data;
    }

    /**
     * ルートまで親をたどる
     *
     * @access private
     */
    function _buildAncestors(& $user, $cid, & $ancestors)
    {
        if ( ! $cid) {
            return;
        }

        if (is_array($this->_privileges)) {
            if ( ! $this->_mgr_privilege->privileged($user, $cid,
                $this->_privileges)
            ) {
                return;
            }
        }

        $info = $this->_mgr_category->getCategoryInfo($user, $cid,
            GRN_BULLETIN_ACCESS_R, true);
        $this->addNotificationInfo($user, $info[$cid]);
        $this->addCheckBoxInfo($user, $info[$cid]);

        $ancestors = $info + $ancestors;

        $this->_buildAncestors($user, $info[$cid]['parent'], $ancestors);
    }


    /**
     * 生成された階層データに各ノードのパス文字列をセットする
     *
     * @access private
     */
    function _makePathString(& $build_hierarchy)
    {
        $path = null;

        if (is_null($this->_delimiter)) {
            require_once('fw/i18n.csp');
            $this->_delimiter = cb_msg('grn.bulletin', 'path_delimiter');
        }

        // 親までのパス文字列を生成
        if (array_key_exists('ancestors', $build_hierarchy)) {
            foreach (array_keys($build_hierarchy['ancestors']) as $id) {
                $node =& $build_hierarchy['ancestors'][$id];

                if ($path) {
                    $path .= $this->_delimiter;
                }
                $path .= $node['name'];
                $node['path_string'] = $path;
            }
        }

        // 現在のカテゴリを追加
        if (array_key_exists('name', $build_hierarchy)) {
            if ($path) {
                $path .= $this->_delimiter;
            }
            $path .= $build_hierarchy['name'];

            $build_hierarchy['path_string'] = $path;
        }

        // サブカテゴリのパス文字列をセットする
        if (array_key_exists('children', $build_hierarchy)) {
            foreach (array_keys($build_hierarchy['children']) as $id) {
                $node =& $build_hierarchy['children'][$id];

                if ($path) {
                    $node['path_string'] = $path . $this->_delimiter
                                           . $node['name'];
                } else {
                    $node['path_string'] = $node['name'];
                }
            }
        }
    }

    function build(& $user, & $category)
    {
        // カテゴリ指定のない場合はルートカテゴリがデフォルト
        if ( ! $category) {
            $category =& $this->_mgr_category->getRootCategory($user,
                $this->_access_mode);
        }

        if (is_array($this->_privileges)) {
            if ( ! $category->privileged($user, $this->_privileges)) {
                return [];
            }
        }

        $info = $this->_mgr_category->getCategoryInfo($user,
            $category->getOID());

        $this->addNotificationInfo($user, $info[$category->getOID()]);
        $this->addCheckBoxInfo($user, $info[$category->getOID()]);

        $hierarchy = $info[$category->getOID()];
        $hierarchy['memo'] = $category->get('description');
        $hierarchy['auth'] = $category->getAuthorities($user);

        if ( ! is_null($this->_privileges)) {
            $hierarchy['privileges'] = $category->getPrivileges($user);
        }


        if (($pid = $category->getId('parent'))) {
            // 親カテゴリがあれば選択カテゴリまでのパス上のカテゴリ情報を取得
            $ancestors = [];
            $this->_buildAncestors($user, $pid, $ancestors);
            $hierarchy['ancestors'] = $ancestors;

            if (count($ancestors) > 0) {
                $hierarchy['parent'] = $ancestors[$pid];
            } elseif (isset($hierarchy['parent'])) {
                unset($hierarchy['parent']);
            }
        }

        if (is_array($this->_privileges)) {
            /**
             * 管理権限をチェックする場合、選択中のカテゴリに管理権限があれば
             * それ以下のカテゴリに対しても権限を持つのでアクセス権はREADのみを評価
             */
            $children = $this->_mgr_category->getSubCategoryInfo($user,
                $category->getOID(), GRN_BULLETIN_ACCESS_R);

            foreach (array_keys($children) as $id) {
                $this->addNotificationInfo($user, $children[$id]);
                $this->addCheckBoxInfo($user, $children[$id]);
            }
        } else {
            $children = $this->_mgr_category->getSubCategoryInfo($user,
                $category->getOID(), $this->_access_mode);

            foreach (array_keys($children) as $id) {
                $this->addNotificationInfo($user, $children[$id]);
                $this->addCheckBoxInfo($user, $children[$id]);
            }
        }

        $hierarchy['children'] = $children;
        $hierarchy['child_count'] = count($children);

        if ($this->_path_string) {
            $this->_makePathString($hierarchy);
        }

        return $hierarchy;
    }

    function buildUsingTree($user, $category, $tree)
    {
        // カテゴリ指定のない場合はルートカテゴリがデフォルト
        if ( ! $category) {
            $category =& $this->_mgr_category->getRootCategory($user,
                $this->_access_mode);
        }

        if (is_array($this->_privileges)) {
            if ( ! $category->privileged($user, $this->_privileges)) {
                return [];
            }
        }

        $info = $this->_mgr_category->getCategoryInfo($user,
            $category->getOID());

        $this->addNotificationInfo($user, $info[$category->getOID()]);
        $this->addCheckBoxInfo($user, $info[$category->getOID()]);

        $hierarchy = $info[$category->getOID()];
        $hierarchy['memo'] = $category->get('description');
        $hierarchy['auth'] = $category->getAuthorities($user);

        if ( ! is_null($this->_privileges)) {
            $hierarchy['privileges'] = $category->getPrivileges($user);
        }


        if (($pid = $category->getId('parent'))) {
            // 親カテゴリがあれば選択カテゴリまでのパス上のカテゴリ情報を取得
            $ancestors = [];
            $this->_buildAncestors($user, $pid, $ancestors);
            $hierarchy['ancestors'] = $ancestors;

            if (count($ancestors) > 0) {
                $hierarchy['parent'] = $ancestors[$pid];
            } elseif (isset($hierarchy['parent'])) {
                unset($hierarchy['parent']);
            }
        }

        $children = $tree->getSavedChildrenFolder($category->getOID());
        $hierarchy['children'] = $children;
        $hierarchy['child_count'] = count($children);

        if ($this->_path_string) {
            $this->_makePathString($hierarchy);
        }

        return $hierarchy;
    }

    // Huy add @ 2009/11
    function getSubCategoryForTreeView(& $user, & $category)
    {
        $children = [];
        // カテゴリ指定のない場合はルートカテゴリがデフォルト
        if ( ! $category) {
            $category =& $this->_mgr_category->getRootCategory($user,
                $this->_access_mode);
        }

        $children = $this->_mgr_category->getSubCategoryInfo($user,
            $category->getOID(), GRN_BULLETIN_ACCESS_R);

        foreach (array_keys($children) as $id) {
            $this->addNotificationInfo($user, $children[$id]);
            $this->addCheckBoxInfo($user, $children[$id]);
        }

        return $children;
    }

    /**
     * @return array
     */
    function &getAncestors(&$category)
    {
        $ret = [];

        while ($category) {
            $ret[$category->getOID()] =& $category;
            $category = $category->get('parent');
        }

        $ret = array_reverse($ret, true);

        return $ret;
    }
    // end: Huy add @ 2009/11

    /**
     * @param array $category_list
     * @param array $force_notify_ids
     * @param array $checked_ids
     *
     * @return array
     */
    public function buildCategoryListInfo(
        array $category_list,
        array $force_notify_ids,
        array $checked_ids
    ) {
        $category_relation_list = [];
        $top_category_list = [];
        foreach ($category_list as $category) {
            $parent_id = $category["col_parent"];
            $category_id = $category["_id"];
            if ($parent_id) {
                $category_relation_list[$parent_id][$category_id] = $category;
            }

            if ($parent_id == GRN_BULLETIN_ROOT_CATEGORY_ID) {
                $top_category_list[$category_id] = $category;
            }
        }

        $category_list_sort = [];
        $category_list_sort[GRN_BULLETIN_ROOT_CATEGORY_ID]
            = $category_list[GRN_BULLETIN_ROOT_CATEGORY_ID];
        foreach ($top_category_list as $top_category_id => $top_category) {
            $category_list_sort[$top_category_id] = $top_category;
            if (isset($category_relation_list[$top_category_id])) {
                $this->buildArrayCategoryList($category_relation_list[$top_category_id],
                    $category_relation_list, $category_list_sort);
            }
        }

        $list_for_view = [];
        $list_for_view["list_name"] = "subscribe_category_list";
        $list_for_view["on_click"]
            = "grn.component.category_list.get_instance('"
              . $list_for_view["list_name"]
              . "').onClickTreeCheckbox";
        $list_for_view["list"] = [];
        $root_page_url = cb_pageurl('bulletin/index',
            ['top' => 1]);
        $user = \cb_get_login_user();
        foreach ($category_list_sort as $category_id => $category) {
            if ( ! isset($checked_ids[$category_id])) {
                continue;
            }
            $category_view = [];
            $category_view["category_id"] = $category_id;
            $category_view["name"] = $category["col_name"];
            if (isset($force_notify_ids[$category_id])) {
                $category_view["force_notify"] = true;
            }
            if ($category_id == GRN_BULLETIN_ROOT_CATEGORY_ID) {
                $category_view["page_url"] = $root_page_url;
            } else {
                $category_view["page_url"] = cb_pageurl("bulletin/index",
                    ["cid" => $category_id]);
            }

            $parent_category_id = $category["col_parent"];
            if ($parent_category_id
                && $parent_category = $this->_mgr_category->getCategory($user,
                    $parent_category_id)
            ) {
                $category_view["parent_category_id"] = $parent_category_id;
                if ($parent_category_id == GRN_BULLETIN_ROOT_CATEGORY_ID) {
                    $category_view["parent_page_url"] = $root_page_url;
                } else {
                    $category_view["parent_page_url"]
                        = cb_pageurl("bulletin/index",
                        ["cid" => $parent_category_id]);
                }
                $category_view["parent_category_path"]
                    = grn_bulletin_get_category_path_string($parent_category);
            }
            $list_for_view["list"][$category_id] = $category_view;
        }

        return $list_for_view;
    }

    /**
     * @param array $child_categories
     * @param array $category_relation_list
     * @param array $category_list_sort
     */
    public function buildArrayCategoryList(
        array $child_categories,
        array $category_relation_list,
        array &$category_list_sort
    ) {
        foreach ($child_categories as $child_category_id => $child_category) {
            $category_list_sort[$child_category_id] = $child_category;
            if (isset($category_relation_list[$child_category_id])) {
                $this->buildArrayCategoryList($category_relation_list[$child_category_id],
                    $category_relation_list, $category_list_sort);
            }
        }
    }

    /**
     * @param array  $category_list
     * @param array  $force_notify_ids
     * @param array  $checked_ids
     * @param string $selected_oid
     *
     * @return array
     */
    public function buildCategoryTreeInfo(
        array $category_list,
        array $force_notify_ids,
        array $checked_ids,
        $selected_oid
    ) {
        $category_relation_list = [];
        $top_category_list = [];
        foreach ($category_list as $category) {
            $parent_id = $category["col_parent"];
            $category_id = $category["_id"];
            if ($parent_id) {
                $category_relation_list[$parent_id][$category_id] = $category;
            }

            if ($parent_id == GRN_BULLETIN_ROOT_CATEGORY_ID) {
                $top_category_list[$category_id] = $category;
            }
        }

        $tree_for_view = [];
        $root = [];
        foreach ($top_category_list as $top_category_id => $top_category) {
            $root[$top_category_id]
                = self::buildArrayCategoryTree($top_category,
                $category_relation_list);
        }
        $tree_for_view["tree_name"] = "subscribe_category_tree";
        $tree_for_view["root"] = $root;
        $tree_for_view["root_caption"]
            = $category_list[GRN_BULLETIN_ROOT_CATEGORY_ID]["col_name"];
        $check_info = [
            "id_prefix" => "ids_",
            "name"      => "ids[]",
            "on_click"  => "grn.component.category_picker.get_instance('"
                           . $tree_for_view["tree_name"]
                           . "').onClickTreeCheckbox"
        ];
        $tree_for_view["check_info"] = $check_info;
        $tree_for_view["checked_ids"] = $checked_ids;
        $tree_for_view["force_notify_ids"] = $force_notify_ids;
        $tree_for_view["on_select"]
            = "grn.component.category_picker.get_instance('"
              . $tree_for_view["tree_name"]
              . "').onClickCategoryName";
        $tree_for_view["selected_oid"] = $selected_oid;

        return $tree_for_view;
    }

    /**
     * @param array $top_category
     * @param array $category_relation_list
     *
     * @return array
     */
    static private function buildArrayCategoryTree(
        array $top_category,
        array $category_relation_list
    ) {
        $children_category_list = [];
        $category_id = $top_category["_id"];
        $category_name = $top_category["col_name"];
        $category_parent_id = $top_category["col_parent"];
        $expanded = 1;
        $checkbox = 1;

        if (isset($category_relation_list[$category_id])) {
            $child_categories = $category_relation_list[$category_id];
            foreach ($child_categories as $child_category) {
                $child_category_id = $child_category["_id"];
                $children_category_list[$child_category_id]
                    = self::buildArrayCategoryTree($child_category,
                    $category_relation_list);
            }
        }

        return [
            "oid"      => $category_id,
            "name"     => $category_name,
            "parent"   => $category_parent_id,
            "expanded" => $expanded,
            "count"    => count($children_category_list),
            "children" => $children_category_list,
            "checkbox" => $checkbox,
        ];
    }

}

