<?php


/**
 * HTMLデータからテキストのみを取り出す
 *
 * @param string $html_content HTMLデータ
 *
 * @return string
 */
function grn_bulletin_get_plain_content($html_content)
{
    $content = str_replace("<BR>", "\n", $html_content);
    $content = str_replace("<br>", "\n", $content);

    return strip_tags($content);
}

/**
 * ユーザーの所属組織を取得する
 *
 * @param string $uid ユーザーID
 *
 * @return array
 */
function grn_bulletin_get_user_groups($uid)
{
    static $__user_groups = [];

    if ( ! array_key_exists($uid, $__user_groups)) {
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');

        $__user_groups[$uid] = $uum->getUserGroups($uid);
    }

    return $__user_groups[$uid];
}

/**
 * ユーザーの所持ロールを取得する
 *
 * @param string $uid ユーザーID
 *
 * @return array
 */
function grn_bulletin_get_user_roles($uid)
{
    static $__user_roles = [];

    if ( ! array_key_exists($uid, $__user_roles)) {
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');

        $__user_roles[$uid] = $uum->getUserRoles($uid);
    }

    return $__user_roles[$uid];
}

/**
 * ユーザーの動的ロールを取得する
 *
 * @param string $uid ユーザーID
 *
 * @return array
 */
function grn_bulletin_get_user_dynamic_roles($uid)
{
    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');

    $login = $uum->getLoginUser($uid);

    $roles = [];

    if ($login->getOID() == $uid) {
        $roles = $uum->listGrantedRoles();
    }

    $roles['Everyone'] = 1;

    return $roles;
}

/**
 * @access private
 */
function __grn_bulletin_get_category_path_string(
    & $category,
    & $path,
    $delimiter
) {
    if ($category) {
        $path = $category->get('name') . $delimiter . $path;
        if (($parent = $category->get('parent'))) {
            __grn_bulletin_get_category_path_string($parent, $path, $delimiter);
        }
    }
}

/**
 * 指定カテゴリのパス文字列を取得
 */
function grn_bulletin_get_category_path_string(& $category, $delimiter = null)
{
    if ( ! $category) {
        return null;
    }

    if (is_null($delimiter)) {
        static $_default_delimiter = null;
        if (is_null($_default_delimiter)) {
            require_once('fw/i18n.csp');
            $_default_delimiter = cb_msg('grn.bulletin', 'path_delimiter');
        }
        $delimiter = $_default_delimiter;
    }

    $path = $category->get('name');
    if (($parent = $category->get('parent'))) {
        __grn_bulletin_get_category_path_string($parent, $path, $delimiter);
    }

    return $path;
}

/**
 * @access private
 */
function __grn_bulletin_get_category_path_array(& $category, & $path)
{
    if ($category) {
        $node = [
            $category->getOID() => [
                'title' => $category->get('name'),
                'name'  => $category->get('name'),
                'cid'   => $category->getOID()
            ]
        ];

        $path = $node + $path;
        if (($parent =& $category->get('parent'))) {
            __grn_bulletin_get_category_path_array($parent, $path);
        }
    }
}

/**
 * 指定カテゴリまでのカテゴリ階層を取得する
 */
function grn_bulletin_get_category_path_array(& $category)
{
    if ( ! $category) {
        return null;
    }

    $path = [
        $category->getOID() => [
            'title' => $category->get('name'),
            'name'  => $category->get('name'),
            'cid'   => $category->getOID()
        ]
    ];

    if (($parent =& $category->get('parent'))) {
        __grn_bulletin_get_category_path_array($parent, $path);
    }

    return $path;
}


function grn_bulletin_get_term($start_prefix, $end_prefix, $is_modify = false)
{
    global $G_INPUT;
    $result = [
        'start'             => null,
        'end'               => null,
        'start_is_datetime' => null,
        'end_is_datetime'   => null
    ];

    $start_datetime = new CB_DateTime();
    $end_datetime = new CB_DateTime();

    // 開始日

    if (array_key_exists($start_prefix . '_year', $G_INPUT)) {
        $start_datetime->year = intval($G_INPUT[$start_prefix . '_year']);
    } else {
        $start_datetime->year = 0;
    }

    if (array_key_exists($start_prefix . '_month', $G_INPUT)) {
        $start_datetime->month = intval($G_INPUT[$start_prefix . '_month']);
    } else {
        $start_datetime->month = 0;
    }

    if (array_key_exists($start_prefix . '_day', $G_INPUT)) {
        $start_datetime->day = intval($G_INPUT[$start_prefix . '_day']);
    } else {
        $start_datetime->day = 0;
    }

    //Add start Time    
    if (array_key_exists($start_prefix . '_minute', $G_INPUT)
        && array_key_exists($start_prefix . '_hour', $G_INPUT)
    ) {
        if (strlen($G_INPUT[$start_prefix . '_minute']) == 0
            && strlen($G_INPUT[$start_prefix . '_hour']) == 0
        ) {
            $result['start_is_datetime'] = 0;
        } else {
            $result['start_is_datetime'] = 1;
        }
    }
    if (array_key_exists($start_prefix . '_hour', $G_INPUT)) {
        $start_datetime->hour = intval($G_INPUT[$start_prefix . '_hour']);
    } else {
        $start_datetime->hour = 0;
    }

    if (array_key_exists($start_prefix . '_minute', $G_INPUT)) {
        $start_datetime->minute = intval($G_INPUT[$start_prefix . '_minute']);
    } else {
        $start_datetime->minute = 0;
    }

    $start_datetime->second = 0;

    if ($start_datetime->year) {
        if ( ! $start_datetime->month || ! $start_datetime->day) {
            cb_throw_error(E_GRN_BULLETIN_INVALID_TERM);
        }
    } elseif ($start_datetime->month || $start_datetime->day) {
        cb_throw_error(E_GRN_BULLETIN_INVALID_TERM);
    }

    // 終了日

    if (array_key_exists($end_prefix . '_year', $G_INPUT)) {
        $end_datetime->year = intval($G_INPUT[$end_prefix . '_year']);
    } else {
        $end_datetime->year = 0;
    }

    if (array_key_exists($end_prefix . '_month', $G_INPUT)) {
        $end_datetime->month = intval($G_INPUT[$end_prefix . '_month']);
    } else {
        $end_datetime->month = 0;
    }

    if (array_key_exists($end_prefix . '_day', $G_INPUT)) {
        $end_datetime->day = intval($G_INPUT[$end_prefix . '_day']);
    } else {
        $end_datetime->day = 0;
    }

    //add end Time
    if (array_key_exists($end_prefix . '_minute', $G_INPUT)
        && array_key_exists($end_prefix . '_hour', $G_INPUT)
    ) {
        if (strlen($G_INPUT[$end_prefix . '_minute']) == 0
            && strlen($G_INPUT[$end_prefix . '_hour']) == 0
        ) {
            $result['end_is_datetime'] = 0;
        } else {
            $result['end_is_datetime'] = 1;
        }
    }
    if (array_key_exists($end_prefix . '_hour', $G_INPUT)) {
        $end_datetime->hour = intval($G_INPUT[$end_prefix . '_hour']);
    } else {
        $end_datetime->hour = 0;
    }

    if (array_key_exists($end_prefix . '_minute', $G_INPUT)) {
        $end_datetime->minute = intval($G_INPUT[$end_prefix . '_minute']);
    } else {
        $end_datetime->minute = 0;
    }

    $end_datetime->second = 0;

    if ($end_datetime->year) {
        if ( ! $end_datetime->month || ! $end_datetime->day) {
            cb_throw_error(E_GRN_BULLETIN_INVALID_TERM);
        }
    } elseif ($end_datetime->month || $end_datetime->day) {
        cb_throw_error(E_GRN_BULLETIN_INVALID_TERM);
    }

    require_once('fw/date.csp');

    if (cb_date_validate_datetime($start_datetime)) {
        $start = new CB_TimeStampEx();
        $start->setDateTime($start_datetime);

        // 変更の場合は開始日と本日との比較は行わない
        if ( ! $is_modify) {
            $now = new CB_TimeStampEx();
            $start_time = $start->getTime();
            if (strlen($G_INPUT[$start_prefix . '_minute']) > 0
                || strlen($G_INPUT[$start_prefix . '_hour']) > 0
            ) {
                if ($start->compare($now) <= 0) {
                    // 開始日は現在より過去にはならない               
                    cb_throw_error(E_GRN_BULLETIN_INVALID_TERM);
                }
            }
        }
        if (cb_date_validate_datetime($end_datetime)) {
            $end = new CB_DateTimeEx($end_datetime);

            // 終了日を1日進める（0時を境に掲示期間の判定を行うため）
            // 開始日と終了日に同日が設定されている場合にその日1日の掲示となる
            if (array_key_exists($end_prefix . '_hour', $G_INPUT)
                && strlen($G_INPUT[$end_prefix . '_hour']) == 0
            ) {
                $end->moveDays(1);
            }

            $ts = new CB_TimeStampEx();
            $ts->setDateTime($end);
            $now = new CB_TimeStampEx();
            if ($start->compare($ts) >= 0 || $ts->compare($now) <= 0) {
                // 開始日は終了日以降
                cb_throw_error(E_GRN_BULLETIN_INVALID_TERM);
            }
            $ts->setDateTime($end);
            $result['end'] = $ts;
        }

        $result['start'] = $start;
    } elseif (cb_date_validate_datetime($end_datetime)) {
        $end = new CB_DateTimeEx($end_datetime);

        // 終了日を1日進める（0時を境に掲示期間の判定を行うため）
        // 開始日と終了日に同日が設定されている場合にその日1日の掲示となる
        if (array_key_exists($end_prefix . '_hour', $G_INPUT)
            && strlen($G_INPUT[$end_prefix . '_hour']) == 0
        ) {
            $end->moveDays(1);
        }

        $ts = new CB_TimeStampEx();
        $ts->setDateTime($end);

        $now = new CB_TimeStampEx();

        if ($ts->compare($now) < 0) {
            // 終了日は現在より過去にはならない
            cb_throw_error(E_GRN_BULLETIN_INVALID_TERM);
        }
        $ts->setDateTime($end);
        $result['end'] = $ts;
    }

    return $result;
}


