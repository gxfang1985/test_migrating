<?php

/**
 * 掲示板アプリケーションクラス
 *
 * @author  Tanaka, Yoshiaki        2004/11
 * @package grn.bulletin
 */

use grn\favour\data\bean\FavourNotify;
use grn\favour\service\FavourService;
use grn\favour\exception\FavourErrorCode;
use grn\favour\exception\FavourException;

require_once('grn/application.csp');
require_once('grn/ui.csp');

require_once('bulletin/table.csp');


class GRN_Bulletin_SystemConfig
{
    /**
     * @access protected
     */
    var $_profile;

    /**
     * @access private
     */
    var $_readonly = true;


    function __construct($profile)
    {
        $this->_profile = $profile;

        $dummy = null;
        if ($profile->getAttribute('init', $dummy) === false) {
            $this->_initialize();
        }
    }

    /**
     * @access private
     */
    function _initialize()
    {
        $this->_profile->createAttribute('enable_follow', true);
        $this->_profile->createAttribute('enable_htmleditor', true);
        $this->_profile->createAttribute('init', true);
        $this->_profile->createAttribute('enable_follow_autolink', true);
        $this->_profile->createAttribute('enable_acknowledgement', false);
    }

    /**
     * @access protected
     *
     * @param string $name
     * @param object $default
     */
    function _copy($name, $default)
    {
        $this->_profile->createAttribute($name, $default->_get($name));
    }

    /**
     * @access protected
     */
    var $_settings = [];

    /**
     * @access protected
     *
     * @param string $name
     *
     * @return $setting
     */
    function &_get($name)
    {
        if (array_key_exists($name, $this->_settings)) {
            return $this->_settings[$name];
        }

        $setting = null;
        $this->_profile->getAttribute($name, $setting);
        $this->_settings[$name] = $setting;

        return $setting;
    }

    /**
     * @access protected
     *
     * @param string $name
     * @param        $value
     */
    function _set($name, $value)
    {
        $this->_settings[$name] = $value;
        $this->_profile->updateAttribute($name, $value);
    }

    /**
     * フォロー書き込みの初期値
     *
     * @return bool
     */
    function getEnableFollow()
    {
        return $this->_get('enable_follow');
    }

    function setEnableFollow($setting)
    {
        if ($this->_readonly) {
            return false;
        }

        $this->_set('enable_follow', $setting);

        return true;
    }

    function getEnableAcknowledgement()
    {
        $EnableFollowAutoLink = $this->_get('enable_acknowledgement');
        if ( ! isset($EnableFollowAutoLink)) {
            $EnableFollowAutoLink = true;
        }

        return $EnableFollowAutoLink;
    }

    function setEnableAcknowledgement($setting)
    {
        if ($this->_readonly) {
            return false;
        }
        $this->_settings['enable_acknowledgement'] = $setting;
        $resultUpdate
            = $this->_profile->updateAttribute('enable_acknowledgement',
            $setting);
        if ( ! $resultUpdate) {
            $this->_profile->createAttribute('enable_acknowledgement',
                $setting);
        }

        return true;
    }

    /**
     * リッチエディタの利用可否
     *
     * @return bool
     */
    function getEnableHtmlEditor()
    {
        return $this->_get('enable_htmleditor');
    }

    function setEnableHtmlEditor($setting)
    {
        if ($this->_readonly) {
            return false;
        }

        $this->_set('enable_htmleditor', $setting);

        return true;
    }

    /**
     * get enable/disable autolink function in comment bulletin
     *
     * @return Boolean
     */
    function getEnableFollowAutoLink()
    {
        $EnableFollowAutoLink = $this->_get('enable_follow_autolink');
        if ( ! isset($EnableFollowAutoLink)) {
            $EnableFollowAutoLink = true;
        }

        return $EnableFollowAutoLink;
    }

    function setEnableFollowAutoLink($setting)
    {
        if ($this->_readonly) {
            return false;
        }
        $this->_settings['enable_follow_autolink'] = $setting;
        $resultUpdate
            = $this->_profile->updateAttribute('enable_follow_autolink',
            $setting);
        if ( ! $resultUpdate) {
            $this->_profile->createAttribute('enable_follow_autolink',
                $setting);
        }

        return true;
    }

    /**
     * @return bool
     */
    public function getEnableManuallyEnterSender()
    {
        $enable_manually_enter_sender
            = $this->_get('enable_manually_enter_sender');
        if ( ! isset($enable_manually_enter_sender)) {
            $enable_manually_enter_sender = false;
        }

        return $enable_manually_enter_sender;
    }

    /**
     * @param $setting
     *
     * @return bool
     */
    public function setEnableManuallyEnterSender($setting)
    {
        if ($this->_readonly) {
            return false;
        }
        $this->_settings['enable_manually_enter_sender'] = $setting;
        $resultUpdate
            = $this->_profile->updateAttribute('enable_manually_enter_sender',
            $setting);
        if ( ! $resultUpdate) {
            $this->_profile->createAttribute('enable_manually_enter_sender',
                $setting);
        }

        return true;
    }

    /**
     * @return int    0 or 1
     */
    public function getDefaultValueFrom()
    {
        $default_value_from = $this->_get('default_value_from');
        if ( ! isset($default_value_from)) {
            require_once('bulletin/resources.csp');
            $default_value_from = GRN_BULLETIN_DEFAULT_VALUE_FROM_USER;
        }

        return $default_value_from;
    }

    /**
     * @param $setting
     *
     * @return bool
     */
    public function setDefaultValueFrom($setting)
    {
        if ($this->_readonly) {
            return false;
        }
        $this->_settings['default_value_from'] = $setting;
        $resultUpdate
            = $this->_profile->updateAttribute('default_value_from',
            $setting);
        if ( ! $resultUpdate) {
            $this->_profile->createAttribute('default_value_from', $setting);
        }

        return true;
    }

    /**
     * @return  int    0 or 1
     */
    public function getEnableConfirmAuthorityReadAndNotificationUsers()
    {
        $enable_confirm_authority_read_and_notification_users
            = $this->_get('enable_confirm_authority_read_and_notification_users');
        if ( ! isset($enable_confirm_authority_read_and_notification_users)) {
            $enable_confirm_authority_read_and_notification_users = false;
        }

        return $enable_confirm_authority_read_and_notification_users;
    }

    /**
     * @param $setting
     *
     * @return bool
     */
    public function setEnableConfirmAuthorityReadAndNotificationUsers($setting)
    {
        if ($this->_readonly) {
            return false;
        }
        $this->_settings['enable_confirm_authority_read_and_notification_users']
            = $setting;
        $result_update
            = $this->_profile->updateAttribute('enable_confirm_authority_read_and_notification_users',
            $setting);
        if ( ! $result_update) {
            $this->_profile->createAttribute('enable_confirm_authority_read_and_notification_users',
                $setting);
        }

        return true;
    }
}

class GRN_Bulletin_PersonalConfig
{
    /**
     * @var CB_Profile
     */
    var $_profile;

    public function __construct($profile)
    {
        $this->_profile = $profile;
    }

    /**
     * @return bool
     */
    public function isLastPulledNotificationAttribute()
    {
        $value = false;
        if ( ! $this->_profile->getAttribute('notification_is_last_pulled',
            $value)
        ) {
            return false;
        }

        return $value;
    }

    /**
     * @param bool $is_pulled
     *
     * @return bool
     */
    public function setLastPulledNotificationAttribute($is_pulled)
    {
        if ( ! $this->_profile->getAttribute('notification_is_last_pulled',
            $dummy)
        ) {
            if ( ! $this->_profile->createAttribute('notification_is_last_pulled',
                $is_pulled)
            ) {
                return false;
            }
        } else {
            if ( ! $this->_profile->updateAttribute('notification_is_last_pulled',
                $is_pulled)
            ) {
                return false;
            }
        }

        return true;
    }
}


/**
 * @package grn.bulletin
 */
class GRN_Bulletin extends GRN_ApplicationBase
{
    function __construct()
    {
        parent::__construct('bulletin');
    }

    const GRN_BULLETIN_APPLICATION_ID = "bulletin";
    const GRN_BULLETIN_MODULE_ID = "grn.bulletin";
    const GRN_BULLETIN_SUB_MODULE_ID = "";
    const FAVOUR_BULLETIN_BODY = 'bulletin_body';
    const FAVOUR_BULLETIN_COMMENT = 'bulletin_comment';

    /**
     * @access private
     */
    var $_system_config = null;

    /**
     * システム設定オブジェクトの取得
     *
     * @param CB_User $user
     *
     * @return GRN_Bulletin_SystemConfig
     */
    function getSystemConfig($user)
    {
        if (is_null($this->_system_config)) {
            $profile = $this->getSystemProfile();
            $this->_system_config = new GRN_Bulletin_SystemConfig($profile);
        }

        require_once('bulletin/access.csp');
        $acc = GRN_Bulletin_AccessManager::getInstance();

        if ($acc->isSuperAdmin($user)) {
            $this->_system_config->_readonly = false;
        }

        return $this->_system_config;
    }


    /**
     * カテゴリを作成する
     *
     * @param CB_User $user       作成ユーザー
     * @param string  $parent_cid 親カテゴリID、ルートに作成する場合は null
     * @param array   $properties カテゴリの内容
     *
     * @return mixed  成功の場合に GRN_Bulletin_Category、失敗の場合にFALSE
     */
    function createCategory($user, $parent_cid, $properties)
    {
        require_once('bulletin/category.csp');
        $cm = GRN_Bulletin_CategoryManager::getInstance();
        $ret = $cm->createCategory($user, $parent_cid, $properties);

        return $ret;
    }

    /**
     * ルートカテゴリを取得する
     *
     * @param CB_User $user 操作ユーザー
     * @param int     $acc_mode
     *
     * @return object
     */
    function getRootCategory($user, $acc_mode = GRN_BULLETIN_ACCESS_R)
    {
        require_once('bulletin/category.csp');
        $cm = GRN_Bulletin_CategoryManager::getInstance();
        $ret = $cm->getRootCategory($user, $acc_mode);

        return $ret;
    }

    /**
     * カテゴリを取得する
     *
     * @param CB_User $user 操作ユーザー
     * @param string  $cid  カテゴリID
     * @param int     $acc_mode
     * @param bool    $throw_error
     *
     * @return GRN_Bulletin_Category
     */
    function getCategory(
        $user,
        $cid,
        $acc_mode = GRN_BULLETIN_ACCESS_R,
        $throw_error = true
    ) {
        require_once('bulletin/category.csp');
        $cm = GRN_Bulletin_CategoryManager::getInstance();
        $ret = $cm->getCategory($user, $cid, $acc_mode, $throw_error);

        return $ret;
    }

    /**
     * 記事を取得する
     *
     * @param CB_User $user        操作ユーザー
     * @param string  $aid         カテゴリID
     * @param int     $acc_mode    記事ID
     * @param bool    $throw_error エラー発生フラグ
     * @param int     $lock_mode   DBロックモード
     *
     * @return GRN_Bulletin_Article
     */
    function getArticle(
        $user,
        $aid,
        $acc_mode = GRN_BULLETIN_ACCESS_R,
        $throw_error = true,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        require_once('bulletin/article.csp');
        $am = GRN_Bulletin_ArticleManager::getInstance();
        $ret = $am->getArticle($user, $aid, $acc_mode, $throw_error,
            $lock_mode);

        return $ret;
    }

    /**
     * @param string $aid Article ID
     *
     * @return GRN_Bulletin_Article
     */
    function getArticleWithoutAccessCheck($aid)
    {
        require_once('bulletin/article.csp');
        $am = GRN_Bulletin_ArticleManager::getInstance();
        $ret = $am->getArticleWithoutAccessCheck($aid);

        return $ret;
    }

    /**
     * 書きかけの記事を取得する
     *
     * @param CB_User $user 操作ユーザー
     * @param string  $id   書きかけのID
     *
     * @return GRN_Bulletin_Draft 、取得できない場合はFALSE
     */
    function getDraft($user, $id)
    {
        require_once('bulletin/draft.csp');
        $dm = GRN_Bulletin_DraftManager::getInstance();
        $ret = $dm->getDraft($user, $id);

        return $ret;
    }

    /**
     * 記事を送信する
     *
     * @param CB_User               $user       送信ユーザー
     * @param GRN_Bulletin_Category $category   送信カテゴリ
     * @param array                 $properties 記事プロパティ
     * @param array                 $files      添付ファイル（$_FILES)
     *
     * @return GRN_Bulletin_Article
     */
    function sendArticle($user, $category, $properties, $files)
    {
        require_once('bulletin/article.csp');

        $amgr = GRN_Bulletin_ArticleManager::getInstance();
        $article = $amgr->send($user, $category, $properties, $files);

        return $article;
    }

    /**
     * @param $user
     * @param $category
     * @param $properties
     * @param $files
     *
     * @return mixed
     */
    function createDraft($user, $category, $properties, $files)
    {
        require_once('bulletin/draft.csp');

        $dmgr = GRN_Bulletin_DraftManager::getInstance();
        $draft = $dmgr->createDraft($user, $category, $properties, $files);

        return $draft;
    }

    /**
     * システム設定
     *
     * @return array
     */
    function getSystemConfigArray()
    {
        $ret = [
            'bulletin_config' =>
                [
                    [
                        'page' => 'bulletin/system/common_set',
                        'icon' => 'general32'
                    ],
                    [
                        'page' => 'bulletin/system/category_list',
                        'icon' => 'category32'
                    ],
                    [
                        'page' => 'bulletin/system/access_index',
                        'icon' => 'access32'
                    ],
                    [
                        'page' => 'bulletin/system/privilege_index',
                        'icon' => 'manager32'
                    ],
                    [
                        'page' => 'bulletin/system/notify_index',
                        'icon' => 'notify32'
                    ],
                    [
                        'page' => 'bulletin/system/bulletin_list',
                        'icon' => 'bulletin32'
                    ],
                    [
                        'page' => 'bulletin/system/import_index',
                        'icon' => 'import32'
                    ],
                    [
                        'page' => 'bulletin/system/export_index',
                        'icon' => 'export32'
                    ],
                ],
        ];

        return $ret;
    }

    /**
     * personal settings
     */
    function getPersonalConfigArray()
    {
        $bulletin_config = [];
        $bulletin_config[] = [
            'page' => 'bulletin/personal/adjust_subscribe',
            'icon' => 'notifyfolder32'
        ];

        return ['bulletin_config' => $bulletin_config];
    }

    /**
     * 通知の更新
     *
     * @param CB_User      $user
     * @param CB_TimeStamp $last_timestamp
     * @param CB_TimeStamp $new_timestamp
     *
     * @return bool
     */
    function updateNotificationData($user, $last_timestamp, & $new_timestamp)
    {
        // After upgraded to F8.0, do the last PULL, only run once.
        $personal_config
            = new GRN_Bulletin_PersonalConfig($this->getUserProfile($user));
        if ($personal_config->isLastPulledNotificationAttribute() === true) {
            return true;
        }

        require_once('bulletin/notification.csp');
        $nm = GRN_Bulletin_NotificationManager::getInstance();
        $nm->updateNotification($user, $last_timestamp, $new_timestamp);

        // Finish the last PULL
        $personal_config->setLastPulledNotificationAttribute(true);
    }

    /**
     * @param CB_User      $user
     * @param string       $module_id
     * @param string       $unique_id
     * @param array        $org_data
     * @param CB_TimeStamp $timestamp
     *
     * @return bool
     */
    function confirmApplicationData(
        $user,
        $module_id,
        $unique_id,
        $org_data,
        $timestamp
    ) {
        if ($article = $this->getArticle($user, $unique_id)) {
            $article->read($user, $timestamp);
        }

        return true;
    }

    public function setTrueToLastPulledNotificationAttribute($user)
    {
        $personal_config
            = new GRN_Bulletin_PersonalConfig($this->getUserProfile($user));
        $personal_config->setLastPulledNotificationAttribute(true);
    }

    /**
     * 通知リンク情報
     *
     * @param CB_User $user
     * @param string  $app_id
     * @param string  $unique_id
     * @param array   $org_data
     * @param string  $status
     * @param string  $action_id
     * @param string  $sub_module_id
     *
     * @return array $info
     */
    function getNotificationPageInfo(
        $user,
        $app_id,
        $unique_id,
        $org_data,
        $status,
        $action_id,
        $sub_module_id
    ) {
        $info = [];
        $info['subject_page'] = 'bulletin/view';

        if (array_key_exists('files', $org_data) && $org_data['files']) {
            if ($status == 'update' && $action_id == 'update') {
                if (array_key_exists('follow', $org_data)) {
                    $info['subject_icon'] = cb_msg(GRN_NOTIFICATION_MODULE_ID,
                        GRN_NOTIFICATION_BULLETIN_CLIPFILE_ICON_CODE_FOLLOW);
                } else {
                    $info['subject_icon'] = cb_msg(GRN_NOTIFICATION_MODULE_ID,
                        GRN_NOTIFICATION_BULLETIN_CLIPFILE_ICON_CODE_MOD);
                }
            } else {
                $info['subject_icon'] = cb_msg(GRN_NOTIFICATION_MODULE_ID,
                    GRN_NOTIFICATION_BULLETIN_CLIPFILE_ICON_CODE_ADD);
            }
        } else {
            if ($status == 'update' && $action_id == 'update') {
                if (array_key_exists('follow', $org_data)) {
                    $info['subject_icon'] = cb_msg(GRN_NOTIFICATION_MODULE_ID,
                        GRN_NOTIFICATION_BULLETIN_ICON_CODE_FOLLOW);
                } else {
                    $info['subject_icon'] = cb_msg(GRN_NOTIFICATION_MODULE_ID,
                        GRN_NOTIFICATION_BULLETIN_ICON_CODE_MOD);
                }
            } else {
                $info['subject_icon'] = cb_msg(GRN_NOTIFICATION_MODULE_ID,
                    GRN_NOTIFICATION_BULLETIN_ICON_CODE_ADD);
            }
        }

        if (array_key_exists("cid", $org_data)) {
            $info['url_params'] = [
                'aid' => $unique_id,
                'cid' => $org_data['cid']
            ];
        } else {
            $info['url_params'] = ['aid' => $unique_id];
        }

        if ($status == 'update' && array_key_exists('follow', $org_data)) {
            //$info['url_params']['follow_id'] = $org_data['follow'];
            $info['subject_fragment'] = 'follow';
        }

        return $info;
    }

    function getNotificationPageInfo_cellular(
        $user,
        $app_id,
        $unique_id,
        $org_data,
        $status
    ) {
        $info = [];
        $info['subject_page'] = 'bulletin/cellular/look1';
        $info['url_params'] = ['aid' => $unique_id];

        if ($status == 'update' && @ $org_data['follow']) {
            //$info['subject_page']  = 'bulletin/cellular/look2';
            //$info['url_params']['fid'] = $org_data['follow'];
        }

        return $info;
    }

    /**
     * ケータイトップページ通知表示用
     */
    function getNotificationIndexPageInfo_cellular($user, $app_id)
    {
        $info = [];
        $info['caption_module'] = 'grn.bulletin.cellular';
        $info['caption_key'] = 'index';
        $info['icon'] = 'eye';

        return $info;
    }

    /**
     * ポートレット
     */
    function &getPortletList()
    {
        $portletList = [];
        $portlet = [
            'name'             => '掲示板',
            //名前
            'type'             => 'grn.bulletin.portlet',
            //種別
            'version'          => '1.0',
            //バージョン
            'set_template'     => 'bulletin/portlet/settings.csp',
            //設定用テンプレート名
            'command_template' => 'bulletin/portlet/command_settings.csp',
            //設定用テンプレート名
            'view_template'    => 'bulletin/portlet/view.csp'
            //表示用テンプレート名
        ];
        $portletList[] = $portlet;
        $portlet_acknowledgement = [
            'name'             => cb_msg('grn.bulletin',
                'porlet_view_acknowledgement'),
            //名前
            'type'             => 'grn.bulletin.portlet.acknowledgement',
            //種別
            'version'          => '1.0',
            //バージョン
            'set_template'     => 'bulletin/portlet/settings_acknowledgement.csp',
            //設定用テンプレート名
            'command_template' => 'bulletin/portlet/command_settings_acknowledgement.csp',
            //設定用テンプレート名
            'view_template'    => 'bulletin/portlet/view_acknowledgement.csp'
            //表示用テンプレート名
        ];
        $portletList[] = $portlet_acknowledgement;

        return $portletList;
    }

    function getUserGroupOptions($inUid, $inArticleGroup)
    {
        require_once('fw/FwFacade.csp');
        require_once('fw/i18n.csp');

        $i18n = CB_I18N::getInstance();
        $dataObj = [];
        $dataObj['lock'] = CB_DATABASE_NO_LOCK;
        $dataObj['language'] = $i18n->getCurrentLanguage();

        $dao = new FwFacade();
        $groupObjList = $dao->getGroupListByUserId($dataObj, $inUid);

        $user_groups = [];
        if (count($groupObjList) > 0) {
            foreach ($groupObjList as $groupObj) {
                $user_groups[$groupObj->getId()] = $groupObj->getName();

            }
        } else {
            return [['value' => '', 'label' => '']];
        }

        // get user info
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $user_info = $uum->_getInfo('user', $inUid);
        $primary_usergroup = $user_info->get('primary_group');

        $primary_group = null;
        if ( ! is_null($primary_usergroup)) {
            $primary_group = $primary_usergroup->get('group');
        }

        if (is_object($inArticleGroup)
            && ! array_key_exists($inArticleGroup->getOID(), $user_groups)
        ) {
            $inArticleGroup = null;
        }

        $group_options = [];
        foreach ($user_groups as $group_id => $group_name) {
            if ( ! is_null($inArticleGroup)) {
                if (is_object($inArticleGroup)
                    && $inArticleGroup->getOID() == $group_id
                ) {
                    $group_options[] = [
                        'value'    => $group_id,
                        'label'    => $group_name,
                        'selected' => true
                    ];
                } elseif (is_string($inArticleGroup)
                          && $inArticleGroup == $group_id
                ) {
                    $group_options[] = [
                        'value'    => $group_id,
                        'label'    => $group_name,
                        'selected' => true
                    ];
                } else {
                    $group_options[] = [
                        'value' => $group_id,
                        'label' => $group_name
                    ];
                }
            } else {
                if ( ! is_null($primary_group)
                     && $primary_group->getOID() == $group_id
                ) {
                    $group_options[] = [
                        'value'    => $group_id,
                        'label'    => $group_name,
                        'selected' => true
                    ];
                } else {
                    $group_options[] = [
                        'value' => $group_id,
                        'label' => $group_name
                    ];
                }
            }
        }

        if (count($group_options) == 0) {
            $group_options[] = ['value' => '', 'label' => ''];
        }

        return $group_options;
    }

    function getUserGroups($uid, &$groups)
    {
        require_once 'fw/database.csp';
        global $G_container_base;
        $db = $G_container_base->getInstance('dbconn');
        $uum = $G_container_base->getInstance('uum');
        $uid = $db->escape($uid);

        $rowset = new CB_RowSet($uum->_getUserGroupTable());
        $rowset->addCondition('col_user="' . $uid . '"');
        $rowset->addOrderColumn('col_group_list');
        $rowset->setLock(CB_DATABASE_NO_LOCK);

        $user_groups = [];
        while ( ! is_null($row = $rowset->iterate())) {
            $user_groups[$row->getOID()] = $row;
            $group = $row->get('group');
            $groups[$group->getOID()] = $group;
        }

        return $user_groups;
    }

    /**
     * アプリケーションのデータをクリーンアップする
     */
    function cleanup()
    {
        $this->_cleanup_bulletin_draft();
        $this->cleanupTrashyManuallyEnterSender();
    }

    /**
     * 削除されたユーザーの掲示板下書きの添付ファイルを削除
     *
     * @access private
     */
    function _cleanup_bulletin_draft()
    {
        global $G_container_base;
        $logger = $G_container_base->getInstance('cleanup_logger');

        $app_locator = GRN_ApplicationLocator::instance();
        $manager = $app_locator->getTableManager('bulletin');

        require_once('bulletin/file.csp');
        $tab_file = $manager->getTableInfo('GRN_Bulletin_File');
        $tab_filerelation = $manager->getTableInfo('GRN_Bulletin_FileRelation');

        $rowset = new CB_RowSet($tab_file, 'file');
        $rowset->addJoin($tab_filerelation, 'file._id = rel.col_file',
            CB_DATABASE_LEFT_JOIN, 'rel');
        $rowset->addCondition('rel.col_article IS NULL AND rel.col_draft IS NULL AND rel.col_follow IS NULL');

        while ( ! is_null($file = $rowset->iterate())) {
            $file_id = $file->getOID();
            $logger->log('[delete] bulletin file(fid:' . $file_id . ')');
            $file->delete();
        }

        $rowset->destroy();
        unset($tab_filerelation, $tab_file, $rowset, $manager, $app_locator, $logger);
    }

    private function cleanupTrashyManuallyEnterSender()
    {
        require_once('bulletin/BulletinFacade.csp');
        $facade = new BulletinFacade();
        $facade->cleanManuallyEnterSender();
    }

    /**
     * @param $user
     * @param $article
     * @param $type
     *
     * @return GRN_Star_Data
     */
    function _getStarData($user, $article, $type)
    {
        assert('is_object($article)');

        require_once('bulletin/controller.csp');
        $utility = new GRN_Bulletin_ControllerUtil();
        $article_for_view = $utility->getArticleView($user, $article);

        require_once('star/logic.csp');
        $data = new GRN_Star_Data();

        $data->setModuleId('grn.bulletin');
        $unique_id = $article_for_view['aid'];
        if (strlen($type) > 0 && strcmp('draft', $type) == 0) {
            $unique_id = "{$type}_" . $unique_id;
            //GRN2-1943
            $data->setUniqueId($unique_id);
            $data->setSubjectData($article_for_view['title']);
            $org_data = [
                'cid'  => $article_for_view['cid'],
                'aid'  => $article_for_view['aid'],
                'type' => $type,
            ];
            $data->setOrgData($org_data);
            //GRN2-1943
        } else {
            $data->setUniqueId($unique_id);
            $data->setSubjectData($article_for_view['title']);
            $org_data = [
                'cid'  => $article_for_view['cid'],
                'aid'  => $article_for_view['aid'],
                'type' => $type,
            ];
            $data->setOrgData($org_data);
        }

        return $data;
    }

    /*
     * Get data for FAVORIITE application
     * @return    object    GRN_Star_Data
     */
    function getStarData($user, $params)
    {
        assert('is_array($params) && count($params) > 0');
        $article = null;
        $type = @$params['type'];
        if ($type == 'draft') {
            $aid = @$params['aid'];  // draft_id
            if ( ! ($article = $this->getDraft($user, $aid))) {
                cb_throw_error(E_GRN_BULLETIN_DRAFT_NOT_FOUND);
            }
        } else {
            $aid = @$params['aid'];  // article_id
            if ( ! ($article = $this->getArticle($user, $aid))) {
                cb_throw_error(E_GRN_BULLETIN_ARTICLE_NOT_FOUND);
            }
        }
        $data = $this->_getStarData($user, $article, $type);

        return $data;
    }

    /*
     * Update FAVORIITE data (a callback function)
     */
    function updateStarData($user)
    {
        require_once('star/logic.csp');
        $star_logic = GRN_Star_StarLogic::getInstance();
        $star_list = $star_logic->getList($user, 'grn.bulletin', 0, -1);
        if (is_array($star_list)) {
            $delete_items = [];
            foreach ($star_list as $key => $data) {
                $org_data =& $data['org_data'];
                $aid = $org_data['aid'];
                $type = $org_data['type'];
                $article = null;
                if ($type == 'draft') {
                    if ( ! ($article = $this->getDraft($user, $aid))) {
                        $delete_items[] = $key;
                        continue;
                    }
                } else {
                    if ( ! ($article = $this->getArticle($user, $aid,
                        GRN_BULLETIN_ACCESS_R, false))
                    ) {
                        $delete_items[] = $key;
                        continue;
                    }
                    $type = ! ($article->isPublished()) ? 'wait' : '';
                }
                $data = $this->_getStarData($user, $article, $type);
                $star_logic->modify($user, $data);
            }
            // delete stared items.
            $star_logic->removeByIds($user, $delete_items);
        }
    }

    /**
     * @return array
     */
    public function getFavourType()
    {
        return [self::FAVOUR_BULLETIN_BODY, self::FAVOUR_BULLETIN_COMMENT];
    }

    /**
     * @return array
     */
    public function getSubModuleId()
    {
        return [self::GRN_BULLETIN_SUB_MODULE_ID];
    }

    /**
     * @param string $login_id
     * @param string $type
     * @param string $value
     * @param array  $params
     * @param string $sub_module
     */
    public function checkLoginUserAuthorityForFavour(
        $login_id,
        $type,
        $value,
        array $params = [],
        $sub_module = ''
    ) {
        $favour_service = new FavourService();
        if ( ! $favour_service->isAppAllowedRespond('bulletin')) {
            throw new FavourException(FavourErrorCode::GRN_FAVOUR_NOT_ALLOW_APP,
                FavourException::getArrayForErrMsg(),
                FavourException::getArrayForErrMsg());
        }

        $article_id = cb_at($params, 'aid');
        $follow_id = cb_at($params, 'follow_id');
        $is_system = cb_at($params, 'is_system');

        $login = cb_get_login_user();

        if (self::FAVOUR_BULLETIN_BODY == $type) {
            if ( ! $is_system) {
                if ( ! $this->getArticle($login, $article_id)) {
                    cb_throw_error(E_GRN_BULLETIN_ARTICLE_NOT_FOUND);
                }
            } else {
                if ( ! $this->getArticleWithoutAccessCheck($article_id)) {
                    cb_throw_error(E_GRN_BULLETIN_ARTICLE_NOT_FOUND);
                }
            }
        } elseif (self::FAVOUR_BULLETIN_COMMENT == $type) {
            if ( ! $is_system) {
                if ( ! ($article = $this->getArticle($login, $article_id))) {
                    cb_throw_error(E_GRN_BULLETIN_ARTICLE_NOT_FOUND);
                }
            } else {
                if ( ! ($article
                    = $this->getArticleWithoutAccessCheck($article_id))
                ) {
                    cb_throw_error(E_GRN_BULLETIN_ARTICLE_NOT_FOUND);
                }
            }

            if ( ! $article->getFollow($follow_id)) {
                cb_throw_error(E_GRN_BULLETIN_FOLLOW_NOT_FOUND);
            }
        } else {
            cb_throw_error(E_COMMON_INTERNAL);
        }
    }

    /**
     * @param $type
     * @param $value
     * @param $org_data
     * @param $sub_module_id
     *
     * @return array
     */
    public function getFavourNotifyPageInfo(
        $type,
        $value,
        $org_data,
        $sub_module_id
    ) {
        $page_info = [];

        $page_info['subject_page'] = 'bulletin/view';
        if ($type == self::FAVOUR_BULLETIN_BODY) {
            $page_info['url_params'] = [
                'cid' => $org_data['cid'],
                'aid' => $org_data['aid']
            ];
        } elseif ($type == self::FAVOUR_BULLETIN_COMMENT) {
            $page_info['url_params'] = [
                'cid'       => $org_data['cid'],
                'aid'       => $org_data['aid'],
                'follow_id' => $org_data['follow_id']
            ];
            $page_info['subject_fragment'] = 'follow';
        }

        $page_info['subject_icon'] = 'icon_bulletin_grn';
        $page_info['subject_icon_label'] = cb_msg(self::GRN_BULLETIN_MODULE_ID,
            'application_name');

        return $page_info;
    }

    /**
     * @param string $loginId
     * @param string $type
     * @param string $value
     * @param array  $params
     * @param string $sub_module
     *
     * @return bool
     */
    public function checkNotifyUserAuthorityForFavour(
        $loginId,
        $type,
        $value,
        array $params = [],
        $sub_module = ''
    ) {
        $article_id = cb_at($params, 'aid');
        $follow_id = cb_at($params, 'follow_id');

        $login = cb_get_login_user();

        if (self::FAVOUR_BULLETIN_BODY == $type) {
            if ( ! ($article = $this->getArticle($login, $article_id))) {
                return false;
            }

            $creator = $article->get('creator');
            if ( ! $creator) {
                return false;
            }

            if ( ! $article->access($creator, GRN_BULLETIN_ACCESS_R)) {
                if ($this->checkNotifyUserAccess($creator->getOID(),
                    $article->getId('category'))
                ) {
                    return true;
                }

                return false;
            }
        } elseif (self::FAVOUR_BULLETIN_COMMENT == $type) {
            if ( ! ($article = $this->getArticle($login, $article_id))) {
                return false;
            }

            if ( ! ($follow = $article->getFollow($follow_id))) {
                return false;
            }

            $creator = $follow->get('creator');
            if ( ! $creator) {
                return false;
            }

            if ( ! $follow->access($creator, GRN_BULLETIN_ACCESS_R)) {
                if ($this->checkNotifyUserAccess($creator->getOID(),
                    $article->getId('category'))
                ) {
                    return true;
                }

                return false;
            }
        } else {
            return false;
        }

        return true;
    }


    /**
     * @param string $userId
     * @param string $categoryId
     *
     * @return bool
     */
    function checkNotifyUserAccess($userId, $categoryId)
    {
        $notify_user_list = [];
        $notify_user_list[] = $userId;
        $hierarchy = [];
        require_once('bulletin/category.csp');
        $category_factory = GRN_Bulletin_CategoryFactory::getInstance();
        $current = $category_factory->get($categoryId);
        while ($current) {
            $hierarchy[] = $current;
            $current = $current->get('parent');
        }

        $app_locator = GRN_ApplicationLocator::instance();
        $dbconn = $app_locator->getConnection('bulletin');
        foreach ($hierarchy as $category) {
            $temp_user = [];
            $category_id = $category->getOID();
            $query = cb_queryf($dbconn,
                "SELECT col_target FROM tab_grn_bulletin_categoryentity_acl_dynamic_role"
                .
                " WHERE col_authority_read = 1 AND col_target IN ( 'LoginUser', 'Everyone' ) AND col_object = '@S';",
                $category_id);

            $result = $dbconn->query($query);
            if ($row = $dbconn->fetch_assoc($result)) {
                $uum = cb_lwc_uum();
                $temp_user = $uum->getUsersId();
            } else {
                $query = cb_queryf(
                    $dbconn,
                    "SELECT col_target AS id FROM tab_grn_bulletin_categoryentity_acl_cb_user AS bua"
                    .
                    " WHERE bua.col_authority_read = 1 AND bua.col_object = '@S'"
                    .
                    " UNION " .
                    "SELECT ug.col_user AS id FROM tab_grn_bulletin_categoryentity_acl_cb_group AS bga, tab_cb_usergrouprelation AS ug"
                    .
                    " WHERE bga.col_target = ug.col_group AND bga.col_authority_read = 1 AND bga.col_object = '@S'"
                    .
                    " UNION " .
                    "SELECT ur.col_user AS id FROM tab_grn_bulletin_categoryentity_acl_cb_role AS bra, tab_cb_userrolerelation AS ur"
                    .
                    " WHERE bra.col_target = ur.col_role AND bra.col_authority_read = 1 AND bra.col_object = '@S';",
                    $category_id, $category_id, $category_id
                );
                $result_temp = $dbconn->query($query);
                while ($row = $dbconn->fetch_assoc($result_temp)) {
                    $temp_user[] = $row['id'];
                }
                $dbconn->free_result($result_temp);
            }
            $dbconn->free_result($result);

            $security_model = $category->get('security_model');
            if ($security_model == 1)//REVOKE
            {
                $notify_user_list = array_diff($notify_user_list, $temp_user);
            } else {
                $notify_user_list = array_intersect($temp_user,
                    $notify_user_list);
            }

            if (count($notify_user_list) == 0) {
                return false;
            }
        }

        return true;
    }

    /**
     * Check the authority and get notification data for favour.
     *
     * @param string $loginId
     * @param string $type
     * @param string $value
     * @param array  $params
     * @param string $sub_module
     *
     * @return \grn\favour\data\bean\FavourNotify
     */
    public function getNotifyDataForFavour(
        $loginId,
        $type,
        $value,
        array $params = [],
        $sub_module = ''
    ) {
        $category_id = cb_at($params, 'cid');
        $article_id = cb_at($params, 'aid');
        $follow_id = cb_at($params, 'follow_id');

        $data = new FavourNotify();

        $login = cb_get_login_user();
        $article = $this->getArticle($login, $article_id);
        if (self::FAVOUR_BULLETIN_BODY == $type) {
            $data->setAbstract($article->getTitle());

            $creator = $article->get('creator');
            if ($creator) {
                $data->setUser($creator->getOID());
            }

            $data->setOrgData([
                'cid' => $category_id,
                'aid' => $article_id
            ]);
        } elseif (self::FAVOUR_BULLETIN_COMMENT == $type) {
            $follow = $article->getFollow($value);
            require_once('grn/controller.csp');
            $data->setAbstract($follow->get('data'));

            $creator = $follow->get('creator');
            if ($creator) {
                $data->setUser($creator->getOID());
            }

            $data->setOrgData([
                'cid'       => $category_id,
                'aid'       => $article_id,
                'follow_id' => $follow_id
            ]);
        }

        return $data;
    }
}
