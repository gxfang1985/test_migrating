<?php

use grn\bulletin\logic\BulletinAdjustSubscribeLogic;

/**
 * @author  Tanaka, Yoshiaki        2004/11
 * @package grn.bulletin
 */

require_once('fw/i18n.csp');
require_once('bulletin/table.csp');
require_once('bulletin/BulletinFacade.csp');
require_once('grn/application.csp');

define('GRN_BULLETIN_CATEGORY_CSV_PARENT_FOREIGNKEY', 0);
define('GRN_BULLETIN_CATEGORY_CSV_FOREIGNKEY', 1);
define('GRN_BULLETIN_CATEGORY_CSV_NAME', 2);
define('GRN_BULLETIN_CATEGORY_CSV_DESCRIPTION', 3);


/**
 * カテゴリオブジェクトを生成
 * アクセス権のチェックはないのでロジック内部でのみの利用とすること
 *
 * @package grn.bulletin
 */
class GRN_Bulletin_CategoryFactory
{
    /**
     * @access private
     */
    var $_tab_category = null;
    /**
     * @access private
     */
    var $_cache = [];


    private static $_instance = null;

    /**
     * @static
     * @return GRN_Bulletin_CategoryFactory
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    function __construct()
    {
        $app_locator = GRN_ApplicationLocator::instance();
        $tm = $app_locator->getTableManager('bulletin');
        $this->_tab_category = $tm->getTableInfo('GRN_Bulletin_CategoryEntity');
    }

    /**
     * @access private
     *
     * @param GRN_Bulletin_Category $category
     */
    function _cache($category)
    {
        $this->_cache[$category->getOID()] = $category;
    }

    /**
     * @access private
     *
     * @param int $id
     *
     * @return GRN_Bulletin_Category
     */
    function _get($id)
    {
        if (array_key_exists($id, $this->_cache)) {
            return $this->_cache[$id];
        }
        $ret = false;

        return $ret;
    }

    /**
     * テープルオブジェクトからAPIオブジェクトを生成する
     *
     * @param GRN_Bulletin_CategoryEntity $row
     *
     * @return GRN_Bulletin_Category
     */
    function row2object($row)
    {
        if ( ! $row) {
            $ret = false;

            return $ret;
        }

        assert('is_a( $row, "GRN_Bulletin_CategoryEntity" )');

        if ( ! ($object = $this->_get($row->getOID()))) {
            $object = new GRN_Bulletin_Category($row);
            $this->_cache($object);
        }

        return $object;
    }

    function get($oid, $auto_load = true)
    {
        $db = $this->_tab_category->getDBConnection();
        $oid = $db->escape($oid);

        if ( ! ($object = $this->_get($oid))) {
            if ( ! $auto_load) {
                $ret = false;

                return $ret;
            }

            $i18n = CB_I18N::getInstance();
            $table_info = $this->_tab_category;

            $dao = new BulletinFacade();
            $dataObj = [];
            $dataObj['lock'] = $table_info->_lock;
            $dataObj['language'] = $i18n->getCurrentLanguage();

            $category = $dao->referBulletinCategoryById($dataObj, $oid);
            if ($category === false) {
                return false;
            }

            $row = $table_info->getRow($category->getId(),
                $category->convertArray());
            $ret = $this->row2object($row);

            return $ret;
        }

        if ( ! $object->isValid()) {
            unset($this->_cache[$oid]);
            $ret = false;

            return $ret;
        }

        return $object;
    }

}


/**
 * カテゴリオブジェクト
 *
 * @package grn.bulletin
 */
class GRN_Bulletin_Category
{
    /**
     * @access private
     * @var GRN_Bulletin_CategoryEntity
     */
    var $_category = null;

    var $_triggers = null;

    /**
     * @access private
     * @return CB_TableInfo
     */
    function _getCategoryTable()
    {
        static $_tab_category = null;
        if (is_null($_tab_category)) {
            $app_locator = GRN_ApplicationLocator::instance();
            $tm = $app_locator->getTableManager('bulletin');
            $_tab_category = $tm->getTableInfo('GRN_Bulletin_CategoryEntity');
        }

        return $_tab_category;
    }

    function _getRow()
    {
        return $this->_category;
    }

    /**
     * @access private
     *
     * @param string $action
     */
    function runHook($action)
    {
        if (is_null($this->_triggers)) {
            $loader = new CB_PluginLoader('grn.bulletin.acl');
            $this->_triggers = $loader->loadHooks();
        }

        foreach ($this->_triggers as $hook) {
            call_user_func($hook, $this->_getRow(), $action);
        }
    }

    /**
     * コンストラクタ
     *
     * @param GRN_Bulletin_CategoryEntity $row カテゴリの実体
     */
    function __construct($row)
    {
        $this->_category = $row;
    }


    function isDeletable($user, $throw_error = false)
    {
        // ルートは削除できない
        if ($this->getOID() == GRN_BULLETIN_ROOT_CATEGORY_ID) {
            if ($throw_error) {
                cb_throw_error(E_GRN_BULLETIN_ACCESS_DENY_DELETE);
            }

            return false;
        }

        require_once('bulletin/access.csp');
        $acc = GRN_Bulletin_AccessManager::getInstance();

        // 管理者以外には許可しない
        if ( ! $acc->isAdmin($user, $this)) {
            if ($throw_error) {
                cb_throw_error(E_GRN_BULLETIN_ACCESS_DENY_DELETE);
            }

            return false;
        }

        // アクセス権を考慮せず、サブカテゴリ数をカウントする
        $table_info = $this->_getCategoryTable();
        $dao = new BulletinFacade();
        $dataObj = [];
        $dataObj['lock'] = $table_info->_lock;
        $resultCount = $dao->getCountBulletinCategoryByParentId($dataObj,
            $this->getOID());

        // サブカテゴリがあると削除できない
        if ($resultCount > 0) {
            if ($throw_error) {
                cb_throw_error(E_GRN_BULLETIN_CATEGORY_NOT_EMPTY);
            }

            return false;
        }

        // 掲示開始待ちまたは公開掲示があると削除できない
        if ($this->getNumArticles(false, false) > 0) {
            if ($throw_error) {
                cb_throw_error(E_GRN_BULLETIN_CATEGORY_NOT_EMPTY);
            }

            return false;
        }

        return true;
    }

    /**
     * カテゴリを削除する
     *
     * @param CB_User $user 操作ユーザー
     *
     * @return bool  削除できた場合にTRUE、それ以外の場合でFALSE
     */
    function delete($user)
    {
        $this->isDeletable($user, true);

        require_once('bulletin/article.csp');
        $am = GRN_Bulletin_ArticleManager::getInstance();
        $am->deleteCategoryArticles($user, $this);

        $this->_category->delete();
        $this->_category = null;

        return true;
    }

    /**
     * 有効なオブジェクトか調べる
     *
     * @return bool  有効な場合にTRUE、既に削除された無効オブジェクトの場合にFALSE
     */
    function isValid()
    {
        $row = $this->_getRow();

        return ! is_null($row);
    }

    /**
     * ユーザーのカテゴリに対するアクセス権を判定する
     *
     * @param CB_User $user     ユーザー
     * @param integer $acc_mode アクセスモード
     * @param bool    $throw_error
     *
     * @return bool  許可ならばTRUE、それ以外でFALSE
     */
    function access($user, $acc_mode, $throw_error = false)
    {
        require_once('bulletin/access.csp');
        $acc = GRN_Bulletin_AccessManager::getInstance();

        if ( ! $acc->access($user, $this, $acc_mode)) {
            if ($throw_error) {
                if ($acc_mode == GRN_BULLETIN_ACCESS_R) {
                    cb_throw_error(E_GRN_BULLETIN_ACCESS_DENY_READ);
                }
                if (intval($acc_mode) & GRN_BULLETIN_ACCESS_W) {
                    cb_throw_error(E_GRN_BULLETIN_ACCESS_DENY_WRITE);
                }

                cb_throw_error(E_GRN_BULLETIN_ACCESS_DENY_FOLLOW);
            }

            return false;
        }

        return true;
    }

    /**
     * @access private
     * @var array
     */
    var $_authorities = null;

    /**
     * ユーザーのカテゴリに対する権限情報を取得する
     *
     * @param CB_User $user ユーザー
     *
     * @return array  array( $authority_name => [0,1], ... )
     */
    function getAuthorities($user)
    {
        if (is_null($this->_authorities)
            || ! array_key_exists($user->getOID(), $this->_authorities)
        ) {
            require_once('bulletin/access.csp');
            $acc = GRN_Bulletin_AccessManager::getInstance();
            $this->_authorities
                = [
                $user->getOID() => $acc->getAuthorities($user, $this)
            ];
        }

        return $this->_authorities[$user->getOID()];
    }


    /**
     * ユーザーが特権を与えられているか調べる
     *
     * @param CB_User $user       ユーザー
     * @param array   $privileges 特権リスト
     * @param bool    $throw_error
     *
     * @return boolean
     */
    function privileged($user, $privileges, $throw_error = false)
    {
        require_once('bulletin/privilege.csp');
        $pm = GRN_Bulletin_PrivilegeManager::getInstance();
        if ( ! $pm->privileged($user, $this, $privileges)) {
            if ($throw_error) {
                cb_throw_error(E_GRN_BULLETIN_OPERATION_NOT_GRANTED);
            }

            return false;
        }

        return true;
    }

    /**
     * ユーザーのカテゴリに対する特権を取得
     *
     * @param object $user ユーザー
     *
     * @return array
     */
    function getPrivileges($user)
    {
        require_once('bulletin/privilege.csp');
        $pm = GRN_Bulletin_PrivilegeManager::getInstance();

        return $pm->getPrivileges($user, $this);
    }

    /**
     * ルートカテゴリかどうか問い合わせる
     *
     * @return bool  ルートカテゴリの場合にTRUE、それ以外でFALSE
     */
    function isRoot()
    {
        return $this->getId('parent') ? false : true;
    }

    /**
     * カテゴリのOIDを取得する
     *
     * @return string  カテゴリID
     */
    function getOID()
    {
        $row = $this->_getRow();

        return $row->getOID();
    }

    /**
     * リレーションオブジェクトのIDを取得する
     *
     * @param string $prop_name
     *
     * @return string  オブジェクトID
     */
    function getId($prop_name)
    {
        $row = $this->_getRow();

        return $row->getId($prop_name);
    }

    /**
     * 作成者かどうか調べる
     *
     * @param CB_User $user
     *
     * @return bool
     */
    function isCreator($user)
    {
        return $user && $user->getOID() == $this->getId('creator');
    }


    /**
     * カテゴリのプロパティを取得する
     *
     * @param string $property_name 取得するプロパティ名
     *
     * @return GRN_Bulletin_Category|mixed  プロパティ値
     */
    function get($property_name)
    {
        $row = $this->_getRow();

        if ($property_name == 'parent') {
            $parent_id = $row->getId('parent');

            if ( ! $parent_id) {
                $ret = null;

                return $ret;
            }

            $factory = GRN_Bulletin_CategoryFactory::getInstance();
            $ret = $factory->get($parent_id);

            return $ret;
        }
        $ret = $row->get($property_name);

        return $ret;
    }

    /**
     * プロパティを設定する
     *
     * @param CB_User $user
     * @param array   $properties
     *
     * @return bool  成功の場合にTRUE、それ以外の場合にFALSE
     */
    function setProperties($user, $properties)
    {
        $this->access($user, GRN_BULLETIN_ACCESS_R, true);
        $row = $this->_getRow();

        if (array_key_exists('foreign_key', $properties)) {
            // カテゴリコードの重複をチェック
            $cm = GRN_Bulletin_CategoryManager::getInstance();
            $cm->checkForeignKey($properties['foreign_key'], $row->getOID());
        }

        $row->prepareLogging();

        foreach (array_keys($properties) as $key) {
            $row->set($key, $properties[$key]);
        }

        $row->onUpdate($user);

        $row->updateNow();

        return true;
    }


    /**
     * ユーザーがカテゴリを移動可能か調べる
     *
     * @param CB_User $user ユーザー
     * @param bool    $throw_error
     *
     * @return boolean
     */
    function isMovable($user, $throw_error = false)
    {
        // ルートは移動できない
        if ($this->getOID() == GRN_BULLETIN_ROOT_CATEGORY_ID
            || ! $this->getId('parent')
        ) {
            if ($throw_error) {
                cb_throw_error(E_GRN_BULLETIN_ACCESS_DENY_MOVE);
            }

            return false;
        }

        $parent = $this->get('parent');

        require_once('bulletin/access.csp');
        $acc = GRN_Bulletin_AccessManager::getInstance();

        // 親に管理権限を持っていなければいけない
        if ( ! $acc->isAdmin($user, $parent)) {
            if ($throw_error) {
                cb_throw_error(E_GRN_BULLETIN_ACCESS_DENY_MOVE);
            }

            return false;
        }

        return true;
    }

    /**
     * 移動先になるカテゴリが存在するかどうか調べる
     *
     * @param CB_User $user ユーザー
     * @param bool    $throw_error
     *
     * @return boolean
     */
    function existDestination($user, $throw_error = false)
    {
        // ルートは移動できない
        if ($this->getOID() == GRN_BULLETIN_ROOT_CATEGORY_ID
            || ! $this->getId('parent')
        ) {
            if ($throw_error) {
                cb_throw_error(E_GRN_BULLETIN_NO_DESTINATION_CATEGORY);
            }

            return false;
        }

        $parent = $this->get('parent');

        // 自分以外のサブカテゴリの存在を確認

        if ($parent->getNumCategories($user) < 2) {
            // サブカテゴリがなければ更に上の親カテゴリの下に移動できるか

            if ( ! ($grand_parent = $parent->get('parent'))) {
                if ($throw_error) {
                    cb_throw_error(E_GRN_BULLETIN_NO_DESTINATION_CATEGORY);
                }

                return false;
            }

            require_once('bulletin/access.csp');
            $acc = GRN_Bulletin_AccessManager::getInstance();

            if ( ! $acc->isAdmin($user, $parent)) {
                if ($throw_error) {
                    cb_throw_error(E_GRN_BULLETIN_NO_DESTINATION_CATEGORY);
                }

                return false;
            }
        }

        return true;
    }

    /**
     * 指定カテゴリへ移動可能か調べる
     *
     * @param CB_User               $user        ユーザー
     * @param GRN_Bulletin_Category $destination 移動先
     * @param bool                  $throw_error 例外で終了する場合はTRUE
     *
     * @return bool
     */
    function canMoveTo($user, $destination, $throw_error = false)
    {
        // ルートあるいは自分自身には移動できない
        if ( ! $destination || $this->getOID() == $destination->getOID()) {
            if ($throw_error) {
                cb_throw_error(E_GRN_BULLETIN_ACCESS_DENY_MOVE);
            }

            return false;
        }

        // ルートは移動できない
        if ($this->getOID() == GRN_BULLETIN_ROOT_CATEGORY_ID
            || ! $this->getId('parent')
        ) {
            if ($throw_error) {
                cb_throw_error(E_GRN_BULLETIN_ACCESS_DENY_MOVE);
            }

            return false;
        }

        require_once('bulletin/access.csp');
        $acc = GRN_Bulletin_AccessManager::getInstance();

        // 移動先に管理権限が必要
        if ( ! $acc->isAdmin($user, $destination)) {
            if ($throw_error) {
                cb_throw_error(E_GRN_BULLETIN_ACCESS_DENY_MOVE);
            }

            return false;
        }

        $parent = $this->get('parent');

        // 親カテゴリに管理権限が必要
        if ( ! $acc->isAdmin($user, $parent)) {
            if ($throw_error) {
                cb_throw_error(E_GRN_BULLETIN_ACCESS_DENY_MOVE);
            }

            return false;
        }

        return true;
    }

    /**
     * 指定カテゴリが自分の親になっているか調べる
     *
     * @param GRN_Bulletin_Category $category
     *
     * @return bool  親に見つかった場合はTRUE、それ以外でFALSEを返す
     */
    function isParent($category)
    {
        if ($this->getOID() == $category->getOID()) {
            return true;
        }

        $parent = $this->get('parent');
        $cid = $category->getOID();

        while ( ! is_null($parent)) {
            if ($cid == $parent->getOID()) {
                return true;
            }
            $parent = $parent->get('parent');
        }

        return false;
    }

    /**
     * @access private
     *
     * @param CB_User               $user
     * @param GRN_Bulletin_Category $category
     * @param int                   $list_index
     *
     * @return bool
     */
    function _setParent($user, $category, $list_index = null)
    {

        $row = $this->_getRow();

        $row->prepareLogging();

        if ( ! $category) {
            $factory = GRN_Bulletin_CategoryFactory::getInstance();
            if (($current = $factory->get($row->getId('parent'), false))) {
                $current->_subcache = [];
            }
            $row->set('parent', null);
        } else {
            $row->set('parent', $category->_getRow());
            $category->_subcache = [];
        }

        if ( ! is_null($list_index)) {
            $row->set('list_index', $list_index);
        } else {
            $row->set('list_index', 0x7FFFFFFF);
        }

        $row->onMove($user);

        $row->updateNow();

        return true;
    }

    /**
     * 親カテゴリを設定する（カテゴリを移動する）
     *
     * @param CB_User               $user
     * @param GRN_Bulletin_Category $category 親に設定するカテゴリ、null の場合はルートカテゴリになる
     * @param int                   $list_index
     *
     * @return bool  成功の場合にTRUE、それ以外の場合にFALSE
     */
    function setParent($user, $category, $list_index = null)
    {
        if ($category && $category->isParent($this)) {
            cb_throw_error(E_GRN_BULLETIN_INVALID_PARENT_CATEGORY);
        }

        $this->canMoveTo($user, $category, true);

        $__ret = $this->_setParent($user, $category, $list_index);

        $this->runHook('update');

        return $__ret;
    }

    /**
     * カテゴリ内の掲示を取得する
     *
     * @param string $id 掲示ID
     *
     * @return mixed 掲示があれば掲示オブジェクト、なければFALSEを返す
     */
    function getArticle($id)
    {
        require_once('bulletin/article.csp');
        $am = GRN_Bulletin_ArticleManager::getInstance();
        $ret = $am->getCategoryArticle($this, $id);

        return $ret;
    }

    /**
     * カテゴリ内の掲示の数を取得する
     *
     * @param bool $published
     * @param bool $expired
     *
     * @return integer
     */
    function getNumArticles($published = true, $expired = true)
    {
        require_once('bulletin/article.csp');
        $am = GRN_Bulletin_ArticleManager::getInstance();

        return $am->getNumArticles($this, $published, $expired);
    }

    /**
     * サブカテゴリを設定する
     *
     * @param CB_User $user
     * @param array   $category_ids サブカテゴリIDの配列
     *
     * @return bool  成功の場合にTRUE、それ以外の場合にFALSE
     */
    function setCategories($user, $category_ids)
    {
        $current = $this->getCategories($user);

        $factory = GRN_Bulletin_CategoryFactory::getInstance();
        $table = $this->_getCategoryTable();

        $dao = new BulletinFacade();
        $i18n = CB_I18N::getInstance();
        $dataObj = [];
        $dataObj['lock'] = $table->_lock;
        $dataObj['language'] = $i18n->getCurrentLanguage();

        $lidx = 0;
        foreach ($category_ids as $id) {
            $child = null;
            if (array_key_exists($id, $current)) {
                $child = $current[$id];
                unset($current[$id]);
            } else {
                $category = $dao->referBulletinCategoryById($dataObj, $id);
                if ($category === false) {
                    cb_throw_error(E_GRN_BULLETIN_CATEGORY_NOT_FOUND);
                }

                $row = $table->getRow($category->getId(),
                    $category->convertArray());
                $child = $factory->row2object($row);

                if ( ! $child) {
                    cb_throw_error(E_GRN_BULLETIN_CATEGORY_NOT_FOUND);
                }
            }

            $child->canMoveTo($user, $this, true);

            $lidx = $lidx + 1;
            $child->_setParent($user, $this, $lidx);
        }

        foreach (array_keys($current) as $id) {
            $row = $current[$id]->_getRow();
            /* @var GRN_Bulletin_CategoryEntity $row */
            $lidx = $lidx + 1;
            $row->set('list_index', $lidx);
            $row->onUpdate($user);
        }

        // サブカテゴリキャッシュクリア
        $this->_subcache = [];

        return true;
    }

    /**
     * サブカテゴリのキャッシュ
     * 1ユーザーに対するアクセス権評価後のカテゴリをキャッシュしている
     *
     * @access private
     */
    var $_subcache = [];


    /**
     * サブカテゴリを取得する
     *
     * @param CB_User $user 操作ユーザー
     * @param int     $acc_mode
     * @param bool    $isUseLocal
     *
     * @return GRN_Bulletin_Category[]  array( $cid => & GRN_Bulletin_Category, ... )
     */
    function getCategories(
        $user,
        $acc_mode = GRN_BULLETIN_ACCESS_R,
        $isUseLocal = true
    ) {
        if ($user) {
            $uid = $user->getOID();

            if (array_key_exists($uid, $this->_subcache)) {
                if (array_key_exists($acc_mode, $this->_subcache[$uid])) {
                    return $this->_subcache[$uid][$acc_mode];
                }
            }
        }

        $i18n = CB_I18N::getInstance();
        $table_info = $this->_getCategoryTable();

        $dao = new BulletinFacade();
        $dataObj = [];
        $dataObj['lock'] = $table_info->_lock;
        $dataObj['offset'] = 0;
        $dataObj['limit'] = -1;
        $dataObj['parentId'] = $this->getOID();
        $dataObj['language'] = $i18n->getCurrentLanguage();

        $categoryList = ($isUseLocal) ? $dao->getBulletinCategoryList($dataObj)
            : $dao->getBulletinCategoryListWithNonLocal($dataObj);

        $factory = GRN_Bulletin_CategoryFactory::getInstance();
        $categories = [];
        foreach ($categoryList as $category) {
            $row = $table_info->getRow($category->getId(),
                $category->convertArray());
            /* @var GRN_Bulletin_CategoryEntity $row */
            $categoryId = $row->getOID();
            $categories[$categoryId] = $factory->row2object($row);
        }

        if (count($categories) <= 0) {
            return $categories;
        }

        require_once('bulletin/access.csp');
        $acc = GRN_Bulletin_AccessManager::getInstance();

        $categories = $acc->evaluateCategories($user, $categories, $acc_mode,
            $this->getOID());

        if ($user) {
            $uid = $user->getOID();

            if ( ! array_key_exists($uid, $this->_subcache)) {
                // キャッシュは1ユーザーに対する評価結果のみとする
                $this->_subcache = [];
                $this->_subcache[$uid] = [];
            }
            $this->_subcache[$uid][$acc_mode] = $categories;
        }

        return $categories;
    }

    /**
     * サブカテゴリ数を取得する
     *
     * @param CB_User $user     ユーザー
     * @param integer $acc_mode アクセスモード
     *
     * @return integer
     */
    function getNumCategories($user, $acc_mode = GRN_BULLETIN_ACCESS_R)
    {
        $categories = $this->getCategories($user, $acc_mode);
        $c = count($categories);
        unset($categories);

        return $c;
    }


    // 購読設定

    /**
     * このカテゴリを購読する
     * この操作でカテゴリの通知設定は考慮しない
     *
     * @param CB_User $user  購読設定するユーザー
     * @param bool    $onoff 購読する場合にTRUE、解除の場合にFALSE
     *
     * @return bool  成功の場合にTRUE、それ以外でFALSE
     */
    function subscribe($user, $onoff)
    {
        require_once('bulletin/notification.csp');
        $nm = GRN_Bulletin_NotificationManager::getInstance();

        return $nm->subscribe($user, $this, $onoff);
    }

    /**
     * @param CB_User $user
     * @param boolean $onoff
     *
     * @return boolean
     */
    function unsubscribe(CB_User $user, $onoff)
    {
        require_once('bulletin/notification.csp');
        $nm = GRN_Bulletin_NotificationManager::getInstance();

        return $nm->unsubscribe($user, $this, $onoff);
    }

    /**
     * ユーザーの購読状態を取得する、通知設定は考慮されない
     *
     * @param CB_User $user 対象ユーザー
     *
     * @return bool  指定ユーザーが購読している場合にはTRUE、そうでない場合はFALSE
     */
    function isSubscribed($user)
    {
        require_once('bulletin/notification.csp');
        $nm = GRN_Bulletin_NotificationManager::getInstance();

        return $nm->isSubscribed($user, $this);
    }

    // 通知設定

    /**
     * 通知先を設定する
     *
     * @param mixed $target 通知を受信する対象、ユーザー、組織、ロールのいずれか
     * @param bool  $onoff  通知する場合にはTRUE、解除する場合はFALSE
     *
     * @return bool
     */
    function setNotificationTarget($target, $onoff)
    {
        require_once('bulletin/notification.csp');
        $nm = GRN_Bulletin_NotificationManager::getInstance();

        return $nm->setNotificationTarget($this, $target, $onoff);
    }

    /**
     * 通知先かどうか調べる
     *
     * @param mixed $target 通知を受信する対象、ユーザー、組織、ロールのいずれか
     *
     * @return bool
     */
    function isNotificationTarget($target)
    {
        require_once('bulletin/notification.csp');
        $nm = GRN_Bulletin_NotificationManager::getInstance();

        return $nm->isNotificationTarget($this, $target);
    }

    /**
     * 通知先オブジェクトを取得する
     *
     * @param string $target "user" or "group" or "role"
     *
     * @return array  array( $oid => & $object, ... )
     */
    function getNotificationTargets($target)
    {
        require_once('bulletin/notification.csp');
        $nm = GRN_Bulletin_NotificationManager::getInstance();

        return $nm->getNotificationTargets($this, $target);
    }

    /**
     * 通知対象かどうか調べる、通知設定、購読設定の両方を考慮する
     *
     * @param CB_User $user 対象ユーザー
     *
     * @return bool
     */
    function isNotified($user)
    {
        require_once('bulletin/notification.csp');
        $nm = GRN_Bulletin_NotificationManager::getInstance();

        return $nm->isNotified($user, $this);
    }

    /**
     * @param array $user_ids array( userId, userId, ···)
     *
     * @return array
     */
    public function checkMaintainerUsersAccess($user_ids = [])
    {
        if ( ! is_array($user_ids) || count($user_ids) === 0) {
            return [];
        }

        $users = $user_ids;
        $app_locator = GRN_ApplicationLocator::instance();
        $db = $app_locator->getConnection('bulletin');

        $hierarchy = [];
        $hierarchy[] = $this;
        $parent_category = $this->get('parent');
        while ($parent_category) {
            $hierarchy[] = $parent_category;
            $parent_category = $parent_category->get('parent');
        }

        foreach ($hierarchy as $key => $category) {
            $obj = $category->getOID();
            $temp_user = [];
            $authority_obj = 'col_authority_write';
            if ($key !== 0) {
                $authority_obj = 'col_authority_read';
            }

            $query = cb_queryf(
                $db,
                "SELECT col_target FROM tab_grn_bulletin_categoryentity_acl_dynamic_role WHERE "
                . $authority_obj
                . " = 1 AND col_target IN ( 'LoginUser', 'Everyone' ) AND col_object = '@S';",
                $obj
            );
            $result = $db->query($query);
            if ($row = $db->fetch_assoc($result)) {
                $uum = cb_lwc_uum();
                $temp_user = $uum->getUsersId();
            } else {
                $query = cb_queryf(
                    $db,
                    "SELECT col_target AS id FROM tab_grn_bulletin_categoryentity_acl_cb_user AS bua"
                    .
                    " WHERE bua." . $authority_obj
                    . " = 1 AND bua.col_object = '@S'" .
                    " UNION " .
                    "SELECT ug.col_user AS id FROM tab_grn_bulletin_categoryentity_acl_cb_group AS bga, tab_cb_usergrouprelation AS ug"
                    .
                    " WHERE bga.col_target = ug.col_group AND bga."
                    . $authority_obj . " = 1 AND bga.col_object = '@S'" .
                    " UNION " .
                    "SELECT ur.col_user AS id FROM tab_grn_bulletin_categoryentity_acl_cb_role AS bra, tab_cb_userrolerelation AS ur"
                    .
                    " WHERE bra.col_target = ur.col_role AND bra."
                    . $authority_obj . " = 1 AND bra.col_object = '@S';",
                    $obj, $obj, $obj
                );
                $result_temp = $db->query($query);
                while ($row = $db->fetch_assoc($result_temp)) {
                    $temp_user[] = $row['id'];
                }
                $db->free_result($result_temp);
            }

            $security_model = $category->get('security_model');
            if ($security_model == 1)//REVOKE
            {
                $users = array_diff($users,
                    $temp_user);// user exists array A, not exits array B
            } else {
                $users = array_intersect($temp_user,
                    $users);// user exists two array
            }

            if (count($users) === 0) {
                break;
            }
        }

        return $users;
    }

}


/**
 * カテゴリ管理クラス
 *
 * @package grn.bulletin
 */
class GRN_Bulletin_CategoryManager
{

    private static $_instance = null;

    /**
     * @static
     * @return GRN_Bulletin_CategoryManager
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * @access private
     */
    var $_tab_category = null;


    function __construct()
    {
        $app_locator = GRN_ApplicationLocator::instance();
        $tm = $app_locator->getTableManager('bulletin');
        $this->_tab_category = $tm->getTableInfo('GRN_Bulletin_CategoryEntity');
    }


    /**
     * カテゴリを作成する
     *
     * @param CB_User $user       操作ユーザー
     * @param string  $parent_cid 親カテゴリID
     * @param array   $properties カテゴリプロパティ
     * @param int     $category_id
     *
     * @return object GRN_Bulletin_Category
     */
    function createCategory(
        $user,
        $parent_cid,
        $properties,
        $category_id = null
    ) {
        require_once('bulletin/access.csp');
        $acc = GRN_Bulletin_AccessManager::getInstance();

        $parent = null;

        if ($parent_cid) {
            if ( ! ($parent = $this->getCategory($user, $parent_cid))) {
                cb_throw_error(E_GRN_BULLETIN_CATEGORY_NOT_FOUND);
            }
        } else {
            if ( ! ($parent = $this->getCategory($user,
                GRN_BULLETIN_ROOT_CATEGORY_ID))
            ) {
                cb_throw_error(E_GRN_BULLETIN_CATEGORY_NOT_FOUND);
            }
        }

        // カテゴリの作成には管理者権限が必要
        if ( ! $acc->isAdmin($user, $parent)) {
            cb_throw_error(E_GRN_BULLETIN_OPERATION_NOT_GRANTED);
        }

        $row = $this->_tab_category->newRow($category_id);
        /* @var GRN_Bulletin_CategoryEntity $row */

        // カテゴリコードは必須項目
        if ( ! array_key_exists('foreign_key', $properties)
             || strlen($properties['foreign_key']) < 1
        ) {
            cb_throw_error(E_COMMON_MISSING_MANDATORY);
        }

        // カテゴリコードの重複は許可しない
        $this->checkForeignKey($properties['foreign_key'], 0);

        $row->prepareLogging();

        foreach (array_keys($properties) as $key) {
            $row->set($key, $properties[$key]);
        }

        if ($parent) {
            $row->set('parent', $parent->_getRow());
        }

        $row->onCreate($user);

        $factory = GRN_Bulletin_CategoryFactory::getInstance();

        $category = $factory->row2object($row);

        return $category;
    }

    public function addCategory(
        $inUser,
        $inLocalNameArray,
        $inForeignKey,
        $inMemo,
        $inParentCategoryId
    ) {
        require_once('bulletin/bean/GrnBulletinCategoryLocal.csp');
        $dao = new BulletinFacade();


        //--------------  default category add -------------
        $properties = [
            'name'        => $inLocalNameArray[CB_I18N_DEFUALT_LANGUAGE_CODE],
            'description' => $inMemo,
            'foreign_key' => $inForeignKey
        ];

        //Add New Category
        $category = $this->createCategory($inUser, $inParentCategoryId,
            $properties);


        //--------------  category local name add -------------
        //Add System Portal
        $categoryId = $category->getOID();
        $i18n = CB_I18N::getInstance();
        $availableLanguageArray = $i18n->getAvailableLanguages();
        foreach ($availableLanguageArray as $languageKey) {
            if ((array_key_exists($languageKey, $inLocalNameArray))
                && strlen(cb_trim($inLocalNameArray[$languageKey])) > 0
            ) {
                $localName = cb_trim($inLocalNameArray[$languageKey]);

                $dataObj = [];
                $dataObj['messageTypeAdd'] = 'category_local_add';
                $categoryLocal = new GrnBulletinCategoryLocal();
                $categoryLocal->setParentId($categoryId);
                $categoryLocal->setLanguageCode($languageKey);
                $categoryLocal->setName($localName);

                $dao->insertBulletinCategoryLocal($dataObj, $categoryLocal);
            }
        }

        return true;
    }

    public function modifyCategory(
        $inUser,
        $inCategoryId,
        $inLocalNameArray,
        $inForeignKey,
        $inMemo
    ) {
        require_once('bulletin/bean/GrnBulletinCategoryLocal.csp');
        $dao = new BulletinFacade();


        //--------------  default category modify -------------
        global $G_bulletin;
        $category = $G_bulletin->getCategory($inUser, $inCategoryId);

        if ( ! $category) {
            cb_throw_error(E_GRN_BULLETIN_CATEGORY_NOT_FOUND);
        }

        $properties = [
            'name'        => $inLocalNameArray[CB_I18N_DEFUALT_LANGUAGE_CODE],
            'description' => $inMemo,
            'foreign_key' => $inForeignKey
        ];

        $category->setProperties($inUser, $properties);


        //--------------  category local name modify -------------
        $i18n = CB_I18N::getInstance();
        $availableLanguageArray = $i18n->getAvailableLanguages();
        foreach ($availableLanguageArray as $languageKey) {
            if ((array_key_exists($languageKey, $inLocalNameArray))
                && strlen(cb_trim($inLocalNameArray[$languageKey])) > 0
            ) {
                $localName = cb_trim($inLocalNameArray[$languageKey]);

                $dataObj = [];
                $categoryLocal = new GrnBulletinCategoryLocal();
                $categoryLocal->setParentId($inCategoryId);
                $categoryLocal->setLanguageCode($languageKey);
                $categoryLocal->setName($localName);

                $dao->updateBulletinCategoryLocal($dataObj, $categoryLocal);
            } else {
                $dataObj = [];
                $categoryLocal = new GrnBulletinCategoryLocal();
                $categoryLocal->setParentId($inCategoryId);
                $categoryLocal->setLanguageCode($languageKey);

                $dao->deleteBulletinCategoryLocal($dataObj, $categoryLocal);
            }
        }

        return true;
    }

    /**
     * @access private
     *
     * @param int  $inCategoryId
     * @param bool $isUseLocal
     *
     * @return bool|GRN_Bulletin_Category
     */
    private function _getCategory($inCategoryId, $isUseLocal = true)
    {
        if (is_null($inCategoryId) || $inCategoryId <= 0) {
            return false;
        }

        $i18n = CB_I18N::getInstance();
        $table_info = $this->_tab_category;

        $dao = new BulletinFacade();
        $dataObj = [];
        $dataObj['lock'] = $table_info->_lock;
        if ($isUseLocal) {
            $dataObj['language'] = $i18n->getCurrentLanguage();
        }

        $category = $dao->referBulletinCategoryById($dataObj, $inCategoryId);
        if ($category === false) {
            return false;
        }

        $row = $table_info->getRow($category->getId(),
            $category->convertArray());

        $factory = GRN_Bulletin_CategoryFactory::getInstance();
        $resultCategory = $factory->row2object($row);

        return $resultCategory;
    }


    /**
     * カテゴリを取得する
     *
     * @param CB_User $user 操作ユーザー
     * @param string  $cid  カテゴリID
     * @param int     $acc_mode
     * @param bool    $throw_error
     * @param bool    $isUseLocal
     *
     * @return GRN_Bulletin_Category
     */
    function getCategory(
        $user,
        $cid,
        $acc_mode = GRN_BULLETIN_ACCESS_R,
        $throw_error = true,
        $isUseLocal = true
    ) {
        $category = $this->_getCategory($cid, $isUseLocal);

        if ($category) {
            if ($category->access($user, $acc_mode, $throw_error) === false) {
                $category = false;
            }

        }

        return $category;
    }

    /**
     *Get all categories from tab_grn_bulletin_categoryentity
     *
     * @return array
     */
    function &getAllCategories()
    {
        $i18n = CB_I18N::getInstance();
        //GRN35-438
        $table_info = $this->_tab_category;
        //GRN35-438

        $dao = new BulletinFacade();
        $dataObj = [];
        $dataObj['lock'] = CB_DATABASE_NO_LOCK;
        $dataObj['language'] = $i18n->getCurrentLanguage();
        $dataObj['offset'] = 0;
        $dataObj['limit'] = -1;

        $categoryList = $dao->getBulletinCategoryList($dataObj);

        $categories = [];
        foreach ($categoryList as $category) {
            $row = $table_info->getRow($category->getId(),
                $category->convertArray());
            /* @var GRN_Bulletin_CategoryEntity $row */
            $categoryId = $row->getOID();
            $categories[$categoryId] = $row;
        }

        return $categories;
    }

    private function _getCategoryByForeignKey($key)
    {
        if ( ! $key && strlen($key) < 1) {
            $ret = null;

            return $ret;
        }

        $i18n = CB_I18N::getInstance();
        $table_info = $this->_tab_category;

        $dao = new BulletinFacade();
        $dataObj = [];
        $dataObj['lock'] = $table_info->_lock;
        $dataObj['language'] = $i18n->getCurrentLanguage();

        $category = $dao->referBulletinCategoryByForeignKey($dataObj, $key);
        if ($category === false) {
            $ret = null;

            return $ret;
        }
        $row = $table_info->getRow($category->getId(),
            $category->convertArray());

        $factory = GRN_Bulletin_CategoryFactory::getInstance();
        $category = $factory->row2object($row);

        return $category;
    }

    /**
     * カテゴリコードの重複をチェックする
     * 指定したカテゴリコードのカテゴリが存在しないか、指定されたカテゴリIDと一致する
     * 場合に重複なしとする
     *
     * @param string $key         カテゴリコード
     * @param string $cid         カテゴリID
     * @param bool   $throw_error 重複を見つけた場合にエラーを発生するならTRUE
     *
     * @return bool  重複のある場合にFALSE、それ以外でTRUE
     */
    function checkForeignKey($key, $cid, $throw_error = true)
    {
        $category = $this->_getCategoryByForeignKey($key);

        if (is_null($category) || $category === false) {
            return true;
        }

        if ($category->getOID() == $cid) {
            return true;
        }

        if ($throw_error) {
            cb_throw_error(E_GRN_BULLETIN_DUPLICATE_FOREIGN_KEY);
        }

        return false;
    }


    /**
     * カテゴリコードからカテゴリオブジェクトを取得する
     *
     * @param CB_User $user     ユーザー
     * @param string  $key      カテゴリコード
     * @param integer $acc_mode カテゴリへのアクセスモード
     *
     * @return object GRN_Bulletin_Category
     */
    function getCategoryByForeignKey(
        $user,
        $key,
        $acc_mode = GRN_BULLETIN_ACCESS_R
    ) {
        $category = $this->_getCategoryByForeignKey($key);

        if ($category) {
            $category->access($user, $acc_mode, true);
        }

        return $category;
    }

    /**
     * @param CB_User $user
     * @param int     $acc_mode
     * @param bool    $isUseLocal
     *
     * @return GRN_Bulletin_Category
     */
    function getRootCategory(
        $user,
        $acc_mode = GRN_BULLETIN_ACCESS_R,
        $isUseLocal = true
    ) {
        $ret = $this->getCategory($user, GRN_BULLETIN_ROOT_CATEGORY_ID,
            $acc_mode, true, $isUseLocal);

        return $ret;
    }

    function importCategory($user, $line)
    {
        require_once('bulletin/access.csp');
        $acc = GRN_Bulletin_AccessManager::getInstance();

        if ( ! $acc->isSuperAdmin($user)) {
            $ret = null;

            return $ret;
        }

        /**
         * $line[0] : 親カテゴリコード
         * $line[1] : カテゴリコード
         * $line[2] : カテゴリ名
         * $line[3] : メモ
         **/

        $parent_category = null;

        $parent_foreign_key
            = $line[GRN_BULLETIN_CATEGORY_CSV_PARENT_FOREIGNKEY];

        if (strlen($parent_foreign_key) > 0) {
            if ( ! ($parent_category
                = $this->_getCategoryByForeignKey($parent_foreign_key))
            ) {
                cb_throw_error(E_GRN_BULLETIN_PARENT_CATEGORY_NOT_FOUND);
            }
        }

        $category = null;
        $foreign_key = $line[GRN_BULLETIN_CATEGORY_CSV_FOREIGNKEY];

        // カテゴリ
        if (strlen($foreign_key) > 0) {
            $category = $this->_getCategoryByForeignKey($foreign_key);
        }

        $properties = [];

        require_once('fw/string_util.csp');

        if (array_key_exists(GRN_BULLETIN_CATEGORY_CSV_FOREIGNKEY, $line)) {
            $properties['foreign_key']
                = cb_trim($line[GRN_BULLETIN_CATEGORY_CSV_FOREIGNKEY]);
        }

        $properties['name']
            = cb_trim_check($line[GRN_BULLETIN_CATEGORY_CSV_NAME]);

        if (array_key_exists(GRN_BULLETIN_CATEGORY_CSV_DESCRIPTION, $line)) {
            $properties['description']
                = $line[GRN_BULLETIN_CATEGORY_CSV_DESCRIPTION];
        }

        $adjust_subscribe_logic = BulletinAdjustSubscribeLogic::getInstance();
        if ( ! $category) {
            if ( ! $parent_category) {
                cb_throw_error(E_GRN_BULLETIN_PARENT_CATEGORY_NOT_FOUND);
            }
            $category = $this->createCategory($user, $parent_category->getOID(),
                $properties);
            $adjust_subscribe_logic->applySubscribeFromParentCategory($category->getOID(),
                $parent_category->getOID());
        } else {
            if ($parent_category) {
                if ($category->getId('parent') != $parent_category->getOID()) {
                    $category->setParent($user, $parent_category);
                    $adjust_subscribe_logic->applySubscribeFromParentCategory($category->getOID(),
                        $parent_category->getOID());
                }
            } elseif ($category->getOID() != GRN_BULLETIN_ROOT_CATEGORY_ID) {
                cb_throw_error(E_GRN_BULLETIN_PARENT_CATEGORY_NOT_FOUND);
            }

            $category->setProperties($user, $properties);
        }

        return $category;
    }

    /**
     * @param CB_CSVWriter          $csv
     * @param GRN_Bulletin_Category $category
     */
    function _exportCategory($csv, $category)
    {
        if ( ! $csv || ! $category) {
            assert('FALSE');
            cb_throw_error();
        }

        $line = [];

        if (($parent_category = $category->get('parent'))) {
            $line[GRN_BULLETIN_CATEGORY_CSV_PARENT_FOREIGNKEY]
                = $parent_category->get('foreign_key');
        } else {
            $line[GRN_BULLETIN_CATEGORY_CSV_PARENT_FOREIGNKEY] = '';
        }

        $line[GRN_BULLETIN_CATEGORY_CSV_FOREIGNKEY]
            = $category->get('foreign_key');
        $line[GRN_BULLETIN_CATEGORY_CSV_NAME] = $category->get('name');
        $line[GRN_BULLETIN_CATEGORY_CSV_DESCRIPTION]
            = $category->get('description');

        $csv->writeLine($line);
    }

    /**
     * @param CB_User $user
     *
     * @return array
     */
    function getSubscribeCategories(CB_User $user)
    {
        $i18n = CB_I18N::getInstance();
        $table_info = $this->_tab_category;

        $dao = new BulletinFacade();
        $dao_params = [];
        $dao_params['lock'] = CB_DATABASE_NO_LOCK;
        $dao_params['language'] = $i18n->getCurrentLanguage();
        $dao_params['lock'] = $table_info->_lock;
        $dao_params['offset'] = 0;
        $dao_params['limit'] = -1;

        $category_list = $dao->getBulletinCategoryList($dao_params);

        $categories = [];
        foreach ($category_list as $category) {
            $categories[$category->getId()] = $category->convertArray();
        }

        require_once('bulletin/access.csp');
        $acc = GRN_Bulletin_AccessManager::getInstance();

        return $acc->evaluateCategories($user, $categories,
            GRN_BULLETIN_ACCESS_R);
    }

    /**
     * @param CB_User               $user
     * @param CB_CSVWriter          $csv
     * @param GRN_Bulletin_Category $category
     */
    function exportCategory($user, $csv, $category)
    {
        if ( ! $csv || ! $category) {
            assert('FALSE');
            cb_throw_error();
        }

        $this->_exportCategory($csv, $category);
        $children = $category->getCategories($user, GRN_BULLETIN_ACCESS_R,
            false);
        foreach (array_keys($children) as $cid) {
            $child = $children[$cid];
            $this->exportCategory($user, $csv, $child);
        }
    }

    function createCategoryNameCSV(
        $inCharset,
        $inIsExportHeader,
        $inExportLanguageCodeArray = null
    ) {
        /// テンポラリのファイルを作成
        $tempdir = cb_tmpdir();
        $tempFilename = tempnam($tempdir, 'bl_');
        require_once('fw/csv.csp');
        $csv = new CB_CSVWriter($inCharset, $tempFilename);

        // 項目名の書き出し
        if ($inIsExportHeader) {
            $header = [];
            $header[] = cb_msg('grn.bulletin.system', 'category_csv_code');
            $header[] = cb_msg('grn.bulletin.system',
                'category_csv_language_code');
            $header[] = cb_msg('grn.bulletin.system', 'category_csv_name');

            $csv->writeLine($header);
        }

        // 内容の書き出し
        require_once('bulletin/inspection.csp');
        $dao = new BulletinFacade();
        $dataObj = [];
        $objectList
            = $dao->getBulletinCategoryLocalListByLanguageCodes($dataObj,
            $inExportLanguageCodeArray);

        $inspection = GRN_Bulletin_Category_Local_Inspection::getInstance();

        foreach ($objectList as $categoryLocal) {
            $line = [];
            $line[0] = $categoryLocal->getParentCode();
            $line[1] = $categoryLocal->getLanguageCode();
            $line[2] = $categoryLocal->getName();
            $csv->writeLine($line);

            //Check Inspection Message Enabled
            if ($inspection->isEnabled()) {
                //Write Inspection Message
                $message_type = 'category_local_export';
                $message_args = [
                    'cid'           => $categoryLocal->getParentId(),
                    'languageCode'  => $categoryLocal->getLanguageCode(),
                    'category_name' => $categoryLocal->getName()
                ];
                $inspection->record($message_type, $message_args);
            }
        }

        $csv->close();

        return $tempFilename;
    }

    /**
     * CSV read lines
     *
     * @access  public
     *
     * @param  string   inFilePath      //CSV FilePath
     * @param  string   inCharset       //read charset
     * @param  int      inSkipLineCount //read charset
     *
     * @return boolean  success:TRUE
     */
    public function importCategoryNameWithCSV(
        $inFilePath,
        $inCharset,
        $inSkipLineCount = 0
    ) {
        if ( ! $inCharset) {
            global $G_config_common;
            $inCharset = $G_config_common->get('I18N',
                'default_external_encoding');
        }

        require_once('fw/csv.csp');
        $csv = new CB_CSVReader($inCharset, $inFilePath);

        // 先頭行をスキップ
        for ($i = 0; $i < $inSkipLineCount; ++$i) {
            $csv->readLine();
        }

        require_once('bulletin/bean/GrnBulletinCategoryLocal.csp');
        $dao = new BulletinFacade();
        $dataObj = [];
        $dataObj['messageTypeAdd'] = 'category_local_add_import';
        $dataObj['messageTypeModify'] = 'category_local_modify_import';
        $dataObj['messageTypeDelete'] = 'category_local_delete_import';

        $i18n = CB_I18N::getInstance();
        $table_info = $this->_tab_category;
        $categoryDataObj = [];
        $categoryDataObj['lock'] = $table_info->_lock;
        $categoryDataObj['language'] = $i18n->getCurrentLanguage();
        $availableLanguageArray = $i18n->getAvailableLanguages();

        while (($line = $csv->readLine()) !== false) {
            require_once('bulletin/resources.csp');
            if ( ! is_array($line)
                 || (count($line) < GRN_BULLETIN_CATEGORY_NAME_CSV_LINE_LENGTH)
            ) {
                require_once('grn/error_code.csp');
                cb_throw_error(E_GRN_INVALID_CSV_COLUMNS);
            }
            //カテゴリコードからカテゴリIDを求める
            if (is_null($line[0]) || (strlen($line[0]) <= 0)) {
                continue;
            }
            $category
                = $dao->referBulletinCategoryByForeignKey($categoryDataObj,
                $line[0]);
            if ($category === false) {
                continue;
            }

            if ( ! in_array($line[1], $availableLanguageArray)) {
                cb_throw_error(E_COMMON_CSV_LANGUAGE_CODE_INVALID);
            }
            //インポートデータの取り込み
            $categoryLocal = new GrnBulletinCategoryLocal();
            $categoryLocal->setParentId($category->getId());
            $categoryLocal->setLanguageCode($line[1]);
            $categoryLocal->setName(cb_trim($line[2]));

            if (is_null($categoryLocal->getName())
                || (strlen($categoryLocal->getName()) <= 0)
            ) {
                $dao->deleteBulletinCategoryLocal($dataObj, $categoryLocal);
            } else {
                $dao->updateBulletinCategoryLocal($dataObj, $categoryLocal);
            }
        }

        $csv->close();

        return true;
    }

    function importCategoryAccess($user, $line)
    {
        require_once('bulletin/access.csp');
        $acc = GRN_Bulletin_AccessManager::getInstance();

        if ( ! $acc->isSuperAdmin($user)) {
            return;
        }

        /**
         * $line[0] : カテゴリコード
         * $line[1] : 設定項目
         * $line[2] : 設定値
         * $line[3] : 設定対象
         **/

        $category = null;

        require_once('bulletin/access.csp');

        $foreign_key = $line[GRN_BULLETIN_ACCESS_CSV_FOREINKEY];

        if ( ! is_null($foreign_key) && strlen($foreign_key) > 0) {
            require_once('fw/string_util.csp');
            $foreign_key = cb_trim($foreign_key);

            if (strlen($foreign_key) > 0) {
                $category = $this->_getCategoryByForeignKey($foreign_key);
            }
        }

        if ( ! $category) {
            cb_throw_error(E_GRN_BULLETIN_INVALID_CATEGORY_CODE);
        }

        return $acc->importCSV($user, $category, $line);
    }

    /**
     * @param CB_User               $user
     * @param CB_CSVWriter          $csv
     * @param GRN_Bulletin_Category $category
     */
    function exportCategoryAccess($user, $csv, $category)
    {
        if ( ! $csv || ! $category) {
            assert('FALSE');
            cb_throw_error();
        }

        require_once('bulletin/access.csp');
        $acc = GRN_Bulletin_AccessManager::getInstance();

        $acc->exportCSV($category, $csv);

        $children = $category->getCategories($user);
        foreach (array_keys($children) as $cid) {
            $child = $children[$cid];
            $this->exportCategoryAccess($user, $csv, $child);
        }
    }

    /**
     * @param GRN_Bulletin_Category $category
     * @param int                   $cid
     *
     * @return bool
     */
    function isParent($category, $cid)
    {
        if ($category->getOID() == $cid) {
            return false;
        }

        $p = $category->get('parent');
        while ($p) {
            if ($cid == $p->getOID()) {
                return true;
            }
            $p = $p->get('parent');
        }

        return false;
    }

    /**
     * @param CB_User  $user
     * @param          $text
     * @param int      $acc_mode
     * @param null|int $cid
     *
     * @return array
     */
    function search(
        $user,
        $text,
        $acc_mode = GRN_BULLETIN_ACCESS_R,
        $cid = null
    ) {
        require_once('fw/string_util.csp');
        $categoryNameArray = cb_parse_search_text($text);

        if ( ! $user || count($categoryNameArray) < 1) {
            return [];
        }

        $i18n = CB_I18N::getInstance();
        $table_info = $this->_tab_category;

        $dao = new BulletinFacade();
        $dataObj = [];
        $dataObj['lock'] = $table_info->_lock;
        $dataObj['language'] = $i18n->getCurrentLanguage();
        $dataObj['offset'] = 0;
        $dataObj['limit'] = -1;

        $categoryList = $dao->getBulletinCategoryListByNames($dataObj,
            $categoryNameArray);

        $factory = GRN_Bulletin_CategoryFactory::getInstance();
        $categories = [];
        foreach ($categoryList as $category) {
            $categoryEntityRow = $table_info->getRow($category->getId(),
                $category->convertArray());
            /* @var GRN_Bulletin_CategoryEntity $categoryEntityRow */
            $categoryId = $categoryEntityRow->getOID();
            $categoryRow = $factory->row2object($categoryEntityRow);

            if (( ! is_null($cid))
                && ( ! $this->isParent($categoryEntityRow, $cid))
            ) {
                continue;
            }

            $categories[$categoryId] = $categoryRow;
        }

        require_once('bulletin/access.csp');
        $acc = GRN_Bulletin_AccessManager::getInstance();

        return $acc->evaluateCategories($user, $categories, $acc_mode, $cid);
    }


    /**
     * オブジェクトを生成せずにカテゴリ情報を取得する
     *
     * @param CB_User $user         ユーザー
     * @param mixed   $category_ids 取得するフォルダのID
     * @param int     $acc_mode     アクセスモード
     * @param bool    $no_children
     *
     * @return array
     */
    function getCategoryInfo(
        $user,
        $category_ids,
        $acc_mode = GRN_BULLETIN_ACCESS_R,
        $no_children = false
    ) {
        if ( ! $user
             || ( ! is_array($category_ids)
                  && ! is_string($category_ids)
                  && ! is_numeric($category_ids))
        ) {
            return [];
        }

        if ( ! is_array($category_ids)) {
            $category_ids = [$category_ids => 1];
        } elseif (count($category_ids) < 1) {
            return [];
        }

        $app_locator = GRN_ApplicationLocator::instance();
        $db = $app_locator->getConnection('bulletin');
        /* @var CB_DatabaseConnection $db */

        $ids = [];
        foreach (array_keys($category_ids) as $id) {
            $ids[$db->escape($id)] = 1;
        }

        require_once('bulletin/access.csp');
        $acc = GRN_Bulletin_AccessManager::getInstance();

        $accessible = $acc->evaluateCategories($user, $ids, $acc_mode);

        if (count($accessible) < 1) {
            return [];
        }

        $i18n = CB_I18N::getInstance();
        $table_info = $this->_tab_category;

        $dao = new BulletinFacade();
        $dataObj = [];
        $dataObj['lock'] = $table_info->_lock;
        $dataObj['language'] = $i18n->getCurrentLanguage();
        $dataObj['offset'] = 0;
        $dataObj['limit'] = -1;
        $categoryIdArray = array_keys($accessible);

        $categoryList = $dao->getBulletinCategoryListByIds($dataObj,
            $categoryIdArray);

        $categories = [];
        foreach ($categoryList as $category) {
            $categoryId = $category->getId();
            $categories[$categoryId] = [
                'cid'         => $categoryId,
                'nid'         => $categoryId,
                'name'        => $category->getName(),
                'foreign_key' => $category->getForeignKey(),
                'parent'      => $category->getParent()
            ];
        }

        if ( ! $no_children) {
            foreach (array_keys($categories) as $id) {
                $query = cb_queryf($db,
                    "SELECT _id FROM tab_grn_bulletin_categoryentity WHERE col_parent = '@S' ORDER BY col_list_index,_id;",
                    $id);
                $result = $db->query($query);
                if (cb_is_db_result($result)) {
                    $n = $db->num_rows($result);
                    $children = [];
                    for ($i = 0; $i < $n; $i++) {
                        $row = $db->fetch_row($result);
                        $children[$row[0]] = 1;
                    }
                    $db->free_result($result);

                    $accessible = $acc->evaluateCategories($user, $children,
                        GRN_BULLETIN_ACCESS_R, $id);

                    $categories[$id]['child_count'] = count($accessible);
                }
            }
        }

        return $categories;
    }

    /**
     * オブジェクトを生成せずにサブカテゴリ情報を取得する
     *
     * @param CB_User $user     ユーザー
     * @param int     $cid      取得するフォルダのID
     * @param int     $acc_mode アクセスモード
     * @param bool    $no_children
     *
     * @return array
     */
    function getSubCategoryInfo(
        $user,
        $cid,
        $acc_mode = GRN_BULLETIN_ACCESS_R,
        $no_children = false
    ) {
        if ( ! $user || ! $cid) {
            return [];
        }

        $i18n = CB_I18N::getInstance();
        $table_info = $this->_tab_category;

        $dao = new BulletinFacade();
        $dataObj = [];
        $dataObj['lock'] = $table_info->_lock;
        $dataObj['language'] = $i18n->getCurrentLanguage();
        $dataObj['offset'] = 0;
        $dataObj['limit'] = -1;
        $dataObj['parentId'] = $cid;

        $categoryList = $dao->getBulletinCategoryList($dataObj);

        $categories = [];
        foreach ($categoryList as $category) {
            $categoryId = $category->getId();
            $categories[$categoryId] = [
                'cid'         => $categoryId,
                'nid'         => $categoryId,
                'name'        => $category->getName(),
                'foreign_key' => $category->getForeignKey(),
                'parent'      => $cid
            ];
        }

        $app_locator = GRN_ApplicationLocator::instance();
        $db = $app_locator->getConnection('bulletin');
        /* @var CB_DatabaseConnection $db */

        require_once('bulletin/access.csp');
        $acc = GRN_Bulletin_AccessManager::getInstance();

        $categories = $acc->evaluateCategories($user, $categories, $acc_mode,
            $cid);

        if ( ! $no_children) {
            foreach (array_keys($categories) as $id) {
                $query = cb_queryf($db,
                    "SELECT _id FROM tab_grn_bulletin_categoryentity WHERE col_parent = '@S' ORDER BY col_list_index, _id",
                    $id);
                $result = $db->query($query);
                if (cb_is_db_result($result)) {
                    $n = $db->num_rows($result);
                    $children = [];
                    for ($i = 0; $i < $n; $i++) {
                        $row = $db->fetch_row($result);
                        $children[$row[0]] = 1;
                    }
                    $db->free_result($result);

                    $children = $acc->evaluateCategories($user, $children,
                        GRN_BULLETIN_ACCESS_R, $id);

                    $categories[$id]['child_count'] = count($children);
                }
            }
        }

        return $categories;
    }

    /**
     * @param CB_User               $user
     * @param CB_CSVWriter          $csv
     * @param GRN_Bulletin_Category $category
     */
    function exportNotifyCategory($user, $csv, $category)
    {
        if ( ! $csv || ! $category) {
            assert('FALSE');
            cb_throw_error();
        }
        require_once('bulletin/notification.csp');
        $notify = GRN_Bulletin_NotificationManager::getInstance();
        $notify->exportNotify($csv, $category);
        $children = $category->getCategories($user);
        foreach (array_keys($children) as $cid) {
            $child = $children[$cid];
            $this->exportNotifyCategory($user, $csv, $child);
        }
    }

    function importNotifyCategory($user, $line)
    {
        require_once('bulletin/notification.csp');
        $notify = GRN_Bulletin_NotificationManager::getInstance();

        $category = null;
        $foreign_key = $line[GRN_BULLETIN_NOTIFY_CSV_CATEGORY_FOREIGNKEY];
        if ( ! is_null($foreign_key) && strlen($foreign_key) > 0) {
            require_once('fw/string_util.csp');
            $foreign_key = cb_trim($foreign_key);
            if (strlen($foreign_key) > 0) {
                $category = $this->_getCategoryByForeignKey($foreign_key);
            }
        }
        if ( ! $category) {
            cb_throw_error(E_GRN_BULLETIN_CATEGORY_NOT_FOUND);
        }

        $notify->importNotify($user, $line, $category);
    }

    public function createMultiLanguageValuesArray($inCategoryId)
    {
        $resultArray = [];

        $dao = new BulletinFacade();

        $dataObj = [];
        $category
            = $dao->referBulletinCategoryById($dataObj,
            $inCategoryId);
        $resultArray[CB_I18N_DEFUALT_LANGUAGE_CODE] = $category->getName();

        $dataObj = [];
        $categoryLocalList
            = $dao->getBulletinCategoryLocalListByCategoryId($dataObj,
            $inCategoryId);
        foreach ($categoryLocalList as $categoryLocal) {
            $resultArray[$categoryLocal->getLanguageCode()]
                = $categoryLocal->getName();
        }

        return $resultArray;
    }

    // this function get list id category from category id to last ancestor
    public function getListCategoryIdAncestor($categoryId)
    {
        $table_info = $this->_tab_category;

        $dao = new BulletinFacade();
        $dataObj = [];
        $dataObj['lock'] = $table_info->_lock;

        $result = [];
        $cate_id = $categoryId;
        while ($category = $dao->getBulletinCategoryOfCategoryId($dataObj,
            $cate_id)) {
            $result[] = $category;
            $cate_id = $category['parent'];
        }

        return $result;
    }

    /**
     * @param string $parentId
     * @param string $userId
     *
     * @return int[]  include $parentId
     */
    public function getSubCategoryIdsRecursively($parentId, $userId)
    {
        $facade = new BulletinFacade();

        return $facade->getSubCategoryIdsRecursively([$parentId], $userId);
    }
}
