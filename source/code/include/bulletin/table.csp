<?php

use grn\grn\Validate;

require_once('grn/inspection.csp');
require_once('grn/file.csp');

require_once('bulletin/error_code.csp');
require_once('bulletin/file.csp');

define('GRN_BULLETIN_ACCESS_R', 1);
define('GRN_BULLETIN_ACCESS_F', 2);
define('GRN_BULLETIN_ACCESS_W', 4);
define('GRN_BULLETIN_ACCESS_RF', 3);
define('GRN_BULLETIN_ACCESS_RW', 5);
define('GRN_BULLETIN_ACCESS_RFW', 7);


define('GRN_BULLETIN_SECURITY_MODEL_GRANT', 0);
define('GRN_BULLETIN_SECURITY_MODEL_REVOKE', 1);


// TENTATIVE
define('GRN_BULLETIN_SECURITY_MODEL_DEFAULT', 0);

define('GRN_BULLETIN_NULL_OBJECT_ID', 1);
define('GRN_BULLETIN_ROOT_CATEGORY_ID', 1);


function __grn_bulletin_string_value(& $row, $prop_name)
{
    $table = $row->getTableInfo();
    $info = $table->getColumnInfo($prop_name);

    switch ($info['type']) {
        case 'relation':
        case 'weak_relation':
        case 'reference':
            return $row->getId($prop_name);
        case 'date':
        case 'time':
        case 'datetime':
            $d = $row->get($prop_name);

            return $d->format();
        case 'timestamp':
            $d = $row->get($prop_name);

            return is_null($d) ? null : $d->unix_ts;
        default:
            break;
    }
    $prop_value = $row->get($prop_name);
    if ($prop_name == "security_model") {
        if ($prop_value) {
            $prop_value = "revoke";
        } else {
            $prop_value = "grant";
        }
    }

    return $prop_value;
}

function grn_bulletin_write_log($action, $target, $params = null, $type = null)
{
    static $_logger = null;
    if (is_null($_logger)) {
        require_once('grn/logger.csp');
        $logger_manager = CB_LoggerManager::getInstance();
        $_logger = $logger_manager->getLogger('grn.bulletin');
    }
    if ($type != null) {
        $_logger->infoEx($action, $target, $params);
    } else {
        $_logger->noticeEx($action, $target, $params);
    }


}


/**
 * カテゴリのベース
 *
 * @package grn.bulletin
 */
class GRN_BulletinCategoryBase extends CB_PersistentBase
{
    var $_app_id = 'bulletin';

    var $col_category
        = [
            'type' => 'relation',
            'to'   => 'GRN_Bulletin_CategoryEntity'
        ];

    public function __construct($row)
    {
        parent::__construct($row);
    }

    /**
     * @param string $col_name
     *
     * @return CB_Row|mixed
     */
    public function get($col_name)
    {
        $result = false;

        $table_info = $this->getTableInfo();
        $col_info = $table_info->getColumnInfo($col_name);
        if (is_null($col_info)) {
            return $result;
        }

        if ($col_name == 'category') {
            $isKeyExists = array_key_exists(CB_DATABASE_COLUMN_PREFIX
                                            . $col_name,
                $this->__row->_rawdata);
            $id = $isKeyExists
                ? $this->__row->_rawdata[CB_DATABASE_COLUMN_PREFIX . $col_name]
                : null;

            if ( ! is_null($id)) {
                require_once('bulletin/BulletinFacade.csp');
                require_once('fw/i18n.csp');

                $i18n = CB_I18N::getInstance();
                $table_info = $this->getTableInfo();
                $tableManager = $table_info->getTableManager();
                $relationTableName = $col_info['to'];
                $relationTableInfo
                    = $tableManager->getTableInfo($relationTableName);
                $relationTableLock = $relationTableInfo->_lock;

                $dao = new BulletinFacade();
                $dataObj = [];
                $dataObj['lock'] = $relationTableLock;
                $dataObj['language'] = $i18n->getCurrentLanguage();

                $bulletinCategoryData
                    = $dao->referBulletinCategoryById($dataObj, $id);
                $result
                    = $relationTableInfo->getRow($bulletinCategoryData->getId(),
                    $bulletinCategoryData->convertArray());
            } else {
                $result = parent::get($col_name);
            }
        } else {
            $result = parent::get($col_name);
        }

        return $result;
    }
}


/**
 * カテゴリの実体
 *
 * @package grn.bulletin
 */
class GRN_Bulletin_CategoryEntity extends GRN_InspectionBase
{

    var $_app_id = 'bulletin';

    // カテゴリ名
    var $col_name = ['type' => "char", 'length' => 100];
    // カテゴリ説明
    var $col_description
        = [
            'type'   => "char",
            'length' => 65535,
            'lazy'   => true
        ];

    // カテゴリコード
    var $col_foreign_key
        = [
            'type'    => 'char',
            'length'  => CB_DATABASE_MAX_STRINDEX,
            'notnull' => true
        ];
    var $idx_foreign_key = ['cols' => 'foreign_key', 'unique' => true];

    // 親カテゴリ
    var $col_parent
        = [
            'type' => 'weak_relation',
            'to'   => 'GRN_Bulletin_CategoryEntity'
        ];

    // 親カテゴリ内での順序
    var $col_list_index = ['type' => 'list_index'];

    // セキュリティ・モデル
    var $col_security_model = ['type' => 'int'];

    // 強制通知フラグ
    var $col_force_notify = ['type' => 'int'];

    var $idx_l_id = ['cols' => ['list_index', null]];


    // 予備カラム
    var $col_reserve_text1 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text2 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text3 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_int1 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int2 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int3 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_blob1 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob2 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob3 = ['type' => 'blob', 'lazy' => true];


    function __construct(& $row)
    {
        parent::__construct($row, 'grn.bulletin');
    }

    function delete()
    {
        $this->onAction('delete');
        parent::delete();
    }

    function set($prop_name, $prop_value)
    {
        if ($prop_name == 'name') {
            require_once('fw/string_util.csp');
            $prop_value = cb_trim_check($prop_value,
                E_COMMON_MISSING_MANDATORY);
        } elseif ($prop_name == 'security_model') {
            assert('$prop_value === GRN_BULLETIN_SECURITY_MODEL_GRANT || $prop_value === GRN_BULLETIN_SECURITY_MODEL_REVOKE');
        }

        if ( ! is_null($this->_prop_cache)) {
            static $_logging_props = [
                'name'           => 1,
                'foreign_key'    => 1,
                'parent'         => 1,
                'list_index'     => 1,
                'security_model' => 1,
                'force_notify'   => 1,
            ];

            if (array_key_exists($prop_name, $_logging_props)) {
                $this->_prop_cache[$prop_name] = 1;
            }
        }

        return parent::set($prop_name, $prop_value);
    }

    /**
     * @param string $col_name
     *
     * @return bool|CB_Row|mixed
     */
    public function get($col_name)
    {
        $result = false;

        $table_info = $this->getTableInfo();
        $col_info = $table_info->getColumnInfo($col_name);
        if (is_null($col_info)) {
            return $result;
        }

        if ($col_name == 'parent') {
            $isKeyExists = array_key_exists(CB_DATABASE_COLUMN_PREFIX
                                            . $col_name,
                $this->__row->_rawdata);
            $id = $isKeyExists
                ? $this->__row->_rawdata[CB_DATABASE_COLUMN_PREFIX . $col_name]
                : null;

            if ( ! is_null($id)) {
                require_once('bulletin/BulletinFacade.csp');
                require_once('fw/i18n.csp');

                $i18n = CB_I18N::getInstance();
                $table_info = $this->getTableInfo();
                $tableManager = $table_info->getTableManager();
                $relationTableName = $col_info['to'];
                $relationTableInfo
                    = $tableManager->getTableInfo($relationTableName);
                $relationTableLock = $relationTableInfo->_lock;

                $dao = new BulletinFacade();
                $dataObj = [];
                $dataObj['lock'] = $relationTableLock;
                $dataObj['language'] = $i18n->getCurrentLanguage();

                $bulletinCategoryData
                    = $dao->referBulletinCategoryById($dataObj, $id);
                $result
                    = $relationTableInfo->getRow($bulletinCategoryData->getId(),
                    $bulletinCategoryData->convertArray());

                // cache
                $relationTableInfo->_cache($result);
            } else {
                $result = parent::get($col_name);
            }
        } else {
            $result = parent::get($col_name);
        }

        return $result;
    }

    /**
     * @access private
     */
    var $_prop_cache = null;

    function prepareLogging()
    {
        $this->_prop_cache = [];
    }

    function makePropertyLogMessage()
    {
        $prop = ["cid" => $this->getOID()];

        if ( ! is_null($this->_prop_cache)) {
            foreach (array_keys($this->_prop_cache) as $key) {
                $value = __grn_bulletin_string_value($this, $key);
                $prop[$key] = $value;
            }
        }

        return $prop;
    }

    /**
     *
     * @param string $action Action name.
     *
     * @return string
     */
    function getInspectionMessage($action)
    {
        $params = $this->makePropertyLogMessage();
        $inspection = [];
        $inspection['action'] = $action;
        $inspection['target'] = "category";
        $inspection['params'] = $params;

        return $inspection;
    }

    /**
     * @param mixed $user {@link CB_User}, or NULL.
     *
     * override grn_inspectionbase
     */
    function onCreate($user)
    {
        if ($this->get('security_model') === false) {
            // デフォルトのセキュリティ・モデルを取得
            global $G_container_app;
            $policy = $G_container_app->getInstance('common_policy');

            if ($policy
                && ('revoke' == $policy->getPolicy('bulletin',
                        'security_model'))
            ) {
                $this->set('security_model',
                    GRN_BULLETIN_SECURITY_MODEL_REVOKE);
            } else {
                $this->set('security_model',
                    GRN_BULLETIN_SECURITY_MODEL_DEFAULT);
            }
        }
        unset($this->_prop_cache['security_model']);
        parent::onCreate($user);
    }

    function onMove(& $user)
    {
        if ($user) {
            $this->set('modifier', $user);
            $this->set('modifier_name', $user->get('display_name'));
            $this->set('modifier_foreign_key', $user->get('foreign_key'));
        } else {
            $this->set('modifier', null);
            $this->set('modifier_name', null);
            $this->set('modifier_foreign_key', null);
        }
        $ts = new CB_TimeStamp();
        $ts->unix_ts = time();
        $this->set('mtime', $ts);

        $this->onAction('move');
    }


    /**
     * Generic event trigger method.
     *
     * @param string $action Action name.
     */
    function onAction($action)
    {
        if ($action == 'update') {
            $action = 'modify';
        }
        parent::onAction($action);
    }
}


/**
 * 添付ファイルの関連付け
 *
 * @package grn.bulletin
 */
class GRN_Bulletin_FileRelation extends CB_PersistentBase
{
    var $_app_id = 'bulletin';

    var $col_article
        = [
            'type' => 'weak_relation',
            'to'   => 'GRN_Bulletin_ArticleEntity',
            'lazy' => true
        ];
    var $col_follow
        = [
            'type' => 'weak_relation',
            'to'   => 'GRN_Bulletin_FollowEntity',
            'lazy' => true
        ];
    var $col_draft
        = [
            'type' => 'weak_relation',
            'to'   => 'GRN_Bulletin_DraftEntity',
            'lazy' => true
        ];
    var $col_file
        = [
            'type' => 'relation',
            'to'   => 'GRN_Bulletin_File',
            'lazy' => true
        ];

    function __construct(& $row)
    {
        parent::__construct($row);
    }
}


/**
 * 記事ベースクラス
 *
 * @package grn.bulletin
 */
class GRN_Bulletin_ArticleEntityBase extends GRN_InspectionBase
{
    var $_app_id = 'bulletin';

    // 標題
    var $col_subject = ['type' => 'char', 'length' => 100];
    // 本文
    var $col_data = ['type' => 'char', 'length' => 1048575];
    // 書式
    var $col_html = ['type' => 'char', 'length' => 1048575, 'lazy' => true];

    // 掲示開始日
    var $col_start_timestamp = ['type' => 'timestamp'];
    // 掲示終了日
    var $col_end_timestamp = ['type' => 'timestamp'];

    // フォロー許可フラグ 
    var $col_can_follow = ['type' => 'int'];

    var $idx_term = ['cols' => ['start_timestamp', 'end_timestamp']];

    var $idx_ctime = ['cols' => ['ctime']];
    var $idx_mtime = ['cols' => ['mtime']];

    // 予備カラム
    var $col_reserve_text1 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text2 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text3 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_int1 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int2 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int3 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_blob1 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob2 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob3 = ['type' => 'blob', 'lazy' => true];

    var $col_creator_group = ['type' => 'weak_relation', 'to' => 'CB_Group'];

    var $col_start_is_datetime = ['type' => 'int'];
    var $col_end_is_datetime = ['type' => 'int'];

    var $col_manually_enter_sender
        = [
            'type' => 'relation',
            'to'   => 'GRN_Bulletin_Manually_Enter_Sender'
        ];

    function __construct($row)
    {
        parent::__construct($row, 'grn.bulletin');
    }

    function delete()
    {
        $this->onAction('delete');
        parent::delete();
    }

    function set($prop_name, $prop_value)
    {
        if ($prop_name == 'subject') {
            require_once('fw/string_util.csp');
            $prop_value = cb_trim_check($prop_value,
                E_COMMON_MISSING_MANDATORY);
        } elseif ($prop_name == 'html') {
            require_once('grn/controller.csp');
            $prop_value = grn_wash_script_without_style_attribute($prop_value);
        } elseif ($prop_name == 'manually_enter_sender') {
            if ($prop_value !== null) {
                require_once('bulletin/BulletinFacade.csp');
                $dao = new BulletinFacade();
                $id = $dao->insertManuallyEnterSender($prop_value);

                $table_info = $this->getTableInfo();
                $col_info
                    = $table_info->getColumnInfo($prop_name);
                $table_manager
                    = $table_info->getTableManager();
                $manually_enter_sender_table_info
                    = $table_manager->getTableInfo($col_info['to']);
                $prop_value
                    = $manually_enter_sender_table_info->getRow($id);
            } else {
                $this->__row->_rawdata[CB_DATABASE_COLUMN_PREFIX . $prop_name]
                    = null;
            }
        }

        if ( ! is_null($this->_prop_cache)) {
            static $_logging_props = [
                'subject'         => 1,
                'start_timestamp' => 1,
                'end_timestamp'   => 1,
                'can_follow'      => 1,
                'reserve_int1'    => 1,
            ];
            if (array_key_exists($prop_name, $_logging_props)) {
                $this->_prop_cache[$prop_name] = 1;
            }
        }

        return parent::set($prop_name, $prop_value);
    }

    /**
     * @param string $col_name
     *
     * @return CB_Row|mixed
     */
    public function get($col_name)
    {
        $result = false;

        $table_info = $this->getTableInfo();
        $col_info = $table_info->getColumnInfo($col_name);
        if (is_null($col_info)) {
            return $result;
        }

        if ($col_name == 'category') {
            $isKeyExists = array_key_exists(CB_DATABASE_COLUMN_PREFIX
                                            . $col_name,
                $this->__row->_rawdata);
            $id = $isKeyExists
                ? $this->__row->_rawdata[CB_DATABASE_COLUMN_PREFIX . $col_name]
                : null;

            if ( ! is_null($id)) {
                require_once('bulletin/BulletinFacade.csp');
                require_once('fw/i18n.csp');

                $i18n = CB_I18N::getInstance();
                $table_info = $this->getTableInfo();
                $tableManager = $table_info->getTableManager();
                $relationTableName = $col_info['to'];
                $relationTableInfo
                    = $tableManager->getTableInfo($relationTableName);
                $relationTableLock = $relationTableInfo->_lock;

                $dao = new BulletinFacade();
                $dataObj = [];
                $dataObj['lock'] = $relationTableLock;
                $dataObj['language'] = $i18n->getCurrentLanguage();

                $bulletinCategoryData
                    = $dao->referBulletinCategoryById($dataObj, $id);
                $result
                    = $relationTableInfo->getRow($bulletinCategoryData->getId(),
                    $bulletinCategoryData->convertArray());
            } else {
                $result = parent::get($col_name);
            }
        } elseif ($col_name == 'creator_group') {
            $isKeyExists = array_key_exists(CB_DATABASE_COLUMN_PREFIX
                                            . $col_name,
                $this->__row->_rawdata);
            $id = $isKeyExists
                ? $this->__row->_rawdata[CB_DATABASE_COLUMN_PREFIX . $col_name]
                : null;

            if ( ! is_null($id)) {
                require_once('fw/FwFacade.csp');
                require_once('fw/i18n.csp');

                $i18n = CB_I18N::getInstance();
                $table_info = $this->getTableInfo();
                $tableManager = $table_info->getTableManager();
                $relationTableName = $col_info['to'];
                $relationTableInfo
                    = $tableManager->getTableInfo($relationTableName);
                $relationTableLock = $relationTableInfo->_lock;

                $dao = new FwFacade();
                $dataObj = [];
                $dataObj['lock'] = $relationTableLock;
                $dataObj['language'] = $i18n->getCurrentLanguage();

                $groupData = $dao->referGroupById($dataObj, $id);
                $result = $relationTableInfo->getRow($groupData->getId(),
                    $groupData->convertArray());
            } else {
                $result = parent::get($col_name);
            }
        } elseif ($col_name == 'manually_enter_sender') {
            $is_key_exists = array_key_exists(CB_DATABASE_COLUMN_PREFIX
                                              . $col_name,
                $this->__row->_rawdata);
            $id = $is_key_exists
                ? $this->__row->_rawdata[CB_DATABASE_COLUMN_PREFIX . $col_name]
                : null;

            if ( ! is_null($id)) {
                $table_info = $this->getTableInfo();
                $table_manager = $table_info->getTableManager();
                $relation_table_info
                    = $table_manager->getTableInfo($col_info['to']);
                $relation_row = $relation_table_info->getRow($id);
                $result = $relation_row->get('sender_name');
            } else {
                $result = parent::get($col_name);
            }
        } else {
            $result = parent::get($col_name);
        }

        return $result;
    }

    /**
     * @access private
     */
    var $_prop_cache = null;

    var $_add_log_information = [];

    function prepareLogging()
    {
        $this->_prop_cache = [];
    }

    function makePropertyLogMessage($action = null)
    {
        $prop = ["aid" => $this->getOID()];

        if ( ! is_null($this->_prop_cache)) {
            if (strcasecmp($action, 'delete') !== 0) {
                $prop['creator_name']
                    = Validate::isNull($this->get('manually_enter_sender'))
                    ? $this->get('creator_name')
                    : $this->get('manually_enter_sender');
            }

            foreach (array_keys($this->_prop_cache) as $key) {
                $value = __grn_bulletin_string_value($this, $key);
                if ($key === 'reserve_int1') {
                    $prop['enable_acknowledgement'] = $value;
                } else {
                    $prop[$key] = $value;
                }
            }
        }

        return $prop;
    }

    /**
     * Override this to format your own message.
     *
     * @param string $action Action name.
     *
     * @return string
     */
    function getInspectionMessage($action)
    {
        $params = $this->makePropertyLogMessage($action);

        if ( ! is_null($action) && strcasecmp($action, 'delete') === 0) {
            $params['subject'] = $this->get('subject');
        }
        foreach ($this->_add_log_information as $key => $value) {
            $params[$key] = $value;
        }
        $inspection = [];
        $inspection['action'] = $action;
        $inspection['target'] = "article";
        $inspection['params'] = $params;

        return $inspection;
    }

    /**
     * Generic event trigger method.
     *
     * @param string $action Action name.
     */
    function onAction($action)
    {
        if ($action == 'update') {
            $action = 'modify';
        }

        parent::onAction($action);
    }

    /**
     * @param array $information
     */
    public function addLogInformation($information = [])
    {
        foreach ($information as $key => $value) {
            $this->_add_log_information[$key] = $value;
        }
    }
}


/**
 * 記事クラス
 *
 * @package grn.bulletin
 */
class GRN_Bulletin_ArticleEntity extends GRN_Bulletin_ArticleEntityBase
{
    // カテゴリ
    var $col_category
        = [
            'type' => 'relation',
            'to'   => 'GRN_Bulletin_CategoryEntity'
        ];

    // フォロー番号
    var $col_last_follow_id = ['type' => 'int', 'notnull' => true];

    // データが更新された時刻（最新フォロー削除でも更新される）
    // 通知処理を実行する基準時刻となる
    var $col_dirty_timestamp = ['type' => 'timestamp'];
    var $idx_dirty_timestamp = ['cols' => ['dirty_timestamp']];

    // 通知対象操作が行われた時刻（最新フォロー削除で戻される）
    var $col_ntime = ['type' => 'timestamp'];
    var $idx_ntime = ['cols' => ['ntime']];
    // 通知対象操作を行ったユーザー
    var $col_notifier = ['type' => 'weak_relation', 'to' => 'CB_User'];
    var $col_notifier_name = ['type' => 'char'];
    var $col_reserve_int1 = ['type' => 'int'];//GRREQ-136

    var $idx_nt_id = ['cols' => ['ntime', null]];
    var $idx_cn_id = ['cols' => ['creator_name', null]];


    function __construct(& $row)
    {
        parent::__construct($row);
    }

    function set($prop_name, $prop_value)
    {
        if ( ! is_null($this->_prop_cache)) {
            if ($prop_name == 'category') {
                $this->_prop_cahe[$prop_name] = 1;
            }
        }

        return parent::set($prop_name, $prop_value);
    }

    function onMove(& $user)
    {
        if ($user) {
            $this->set('modifier', $user);
            $this->set('modifier_name', $user->get('display_name'));
            $this->set('modifier_foreign_key', $user->get('foreign_key'));
        } else {
            $this->set('modifier', null);
            $this->set('modifier_name', null);
            $this->set('modifier_foreign_key', null);
        }
        $ts = new CB_TimeStamp();
        $ts->unix_ts = time();
        $this->set('mtime', $ts);

        $this->onAction('move');
    }
}

/**
 * 下書きクラス
 *
 * @package grn.bulletin
 */
class GRN_Bulletin_DraftEntity extends GRN_Bulletin_ArticleEntityBase
{
    // ユーザー削除と同時に消去される
    var $col_owner = ['type' => 'relation', 'to' => 'CB_User'];

    // カテゴリ削除では下書きは残る
    var $col_category
        = [
            'type' => 'weak_relation',
            'to'   => 'GRN_Bulletin_CategoryEntity'
        ];

    var $idx_o_mt_id = ['cols' => ['owner', 'mtime', null]];
    var $col_reserve_int1 = ['type' => 'int'];


    function __construct(& $row)
    {
        parent::__construct($row);
    }

    function set($prop_name, $prop_value)
    {
        if ( ! is_null($this->_prop_cache)) {
            if ($prop_name == 'category') {
                $this->_prop_cahe[$prop_name] = 1;
            }
        }

        return parent::set($prop_name, $prop_value);
    }

    /**
     * Override this to format your own message.
     *
     * @param string $action Action name.
     *
     * @return string
     */
    function getInspectionMessage($action)
    {
        $params = $this->makePropertyLogMessage();
        $inspection = [];
        $inspection['action'] = $action;
        $inspection['target'] = "draft";
        $inspection['params'] = $params;

        return $inspection;
    }
}


/**
 * フォローの実体
 *
 * @package grn.bulletin
 */
class GRN_Bulletin_FollowEntity extends GRN_InspectionBase
{
    var $_app_id = 'bulletin';

    var $col_data = ['type' => 'char', 'length' => 1048575];

    var $col_html = ['type' => 'char', 'length' => 1048575];

    var $col_article
        = [
            'type' => 'relation',
            'to'   => 'GRN_Bulletin_ArticleEntity'
        ];

    var $col_follow_id = ['type' => 'int', 'notnull' => true];

    var $idx_ctime = ['cols' => ['ctime', null]];

    var $idx_id_article = ['cols' => [null, 'article']];

    // 予備カラム
    var $col_reserve_text1 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text2 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text3 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_int1 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int2 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int3 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_blob1 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob2 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob3 = ['type' => 'blob', 'lazy' => true];


    function __construct(& $row)
    {
        parent::__construct($row, 'grn.bulletin');
    }

    function delete()
    {
        $this->onAction('delete');
        parent::delete();
    }

    function set($prop_name, $prop_value)
    {
        if ($prop_name == 'html') {
            require_once('grn/controller.csp');
            $prop_value = grn_wash_script_without_style_attribute($prop_value);
        }

        return parent::set($prop_name, $prop_value);
    }

    /**
     * @access private
     */
    var $_prop_cache = null;

    function prepareLogging()
    {
        $this->_prop_cache = [];
    }

    function makePropertyLogMessage()
    {
        $prop = [
            "aid"       => $this->getId('article'),
            "follow_id" => $this->getOID()
        ];
        if ( ! is_null($this->_prop_cache)) {
            foreach (array_keys($this->_prop_cache) as $key) {
                $prop[$key] = __grn_bulletin_string_value($this, $key);
            }
        }

        return $prop;
    }

    /**
     * override grn_inspectionbase
     *
     * @param string $action
     *
     * @return mixed
     */
    function getInspectionMessage($action)
    {
        $params = $this->makePropertyLogMessage();
        $inspection = [];
        $inspection['action'] = $action;
        $inspection['target'] = "follow";
        $inspection['params'] = $params;

        return $inspection;
    }

    /**
     * Generic event trigger method.
     *
     * @param string $action Action name.
     */
    function onAction($action)
    {
        if ($action == 'update') {
            $action = 'modify';
        }

        parent::onAction($action);
    }
}


/**
 * 購読カテゴリ
 *
 * @package grn.bulletin
 */
class GRN_Bulletin_SubscribeCategory extends GRN_BulletinCategoryBase
{
    var $_app_id = 'bulletin';

    var $col_user = ['type' => 'relation', 'to' => 'CB_User', 'lazy' => true];

    function __construct($row)
    {
        parent::__construct($row);
    }
}

/**
 * 購読解除掲示
 *
 * @package grn.bulletin
 */
class GRN_Bulletin_UnsubscribeArticle extends CB_PersistentBase
{
    var $_app_id = 'bulletin';

    var $col_user = ['type' => 'relation', 'to' => 'CB_User', 'lazy' => true];
    var $col_article
        = [
            'type' => 'relation',
            'to'   => 'GRN_Bulletin_ArticleEntity',
            'lazy' => true
        ];

    function __construct(& $row)
    {
        parent::__construct($row);
    }
}

/**
 * 通知先設定
 *
 * @package grn.bulletin
 */
class GRN_Bulletin_UserNotification extends GRN_BulletinCategoryBase
{
    var $_app_id = 'bulletin';

    var $col_user = ['type' => 'relation', 'to' => 'CB_User', 'lazy' => true];

    function __construct($row)
    {
        parent::__construct($row);
    }
}

/**
 * 通知先設定
 *
 * @package grn.bulletin
 */
class GRN_Bulletin_GroupNotification extends GRN_BulletinCategoryBase
{
    var $_app_id = 'bulletin';

    var $col_group = ['type' => 'relation', 'to' => 'CB_Group'];

    function __construct($row)
    {
        parent::__construct($row);
    }

    /**
     * @param string $col_name
     *
     * @return bool|CB_Row|mixed
     */
    public function get($col_name)
    {
        $result = false;

        $table_info = $this->getTableInfo();
        $col_info = $table_info->getColumnInfo($col_name);
        if (is_null($col_info)) {
            return $result;
        }


        if ($col_name == 'group') {
            $isKeyExists = array_key_exists(CB_DATABASE_COLUMN_PREFIX
                                            . $col_name,
                $this->__row->_rawdata);
            $id = $isKeyExists
                ? $this->__row->_rawdata[CB_DATABASE_COLUMN_PREFIX . $col_name]
                : null;

            if ( ! is_null($id)) {
                require_once('fw/FwFacade.csp');
                require_once('fw/i18n.csp');

                $i18n = CB_I18N::getInstance();
                $table_info = $this->getTableInfo();
                $tableManager = $table_info->getTableManager();
                $relationTableName = $col_info['to'];
                $relationTableInfo
                    = $tableManager->getTableInfo($relationTableName);
                $relationTableLock = $relationTableInfo->_lock;

                $dao = new FwFacade();
                $dataObj = [];
                $dataObj['lock'] = $relationTableLock;
                $dataObj['language'] = $i18n->getCurrentLanguage();

                $groupData = $dao->referGroupById($dataObj, $id);
                $result = $relationTableInfo->getRow($groupData->getId(),
                    $groupData->convertArray());
            } else {
                $result = parent::get($col_name);
            }
        } else {
            $result = parent::get($col_name);
        }

        return $result;
    }
}

/**
 * 通知先設定
 *
 * @package grn.bulletin
 */
class GRN_Bulletin_RoleNotification extends GRN_BulletinCategoryBase
{
    var $_app_id = 'bulletin';

    var $col_role = ['type' => 'relation', 'to' => 'CB_Role', 'lazy' => true];

    function __construct($row)
    {
        parent::__construct($row);
    }
}

/**
 * 通知先設定
 *
 * @package grn.bulletin
 */
class GRN_Bulletin_DynamicRoleNotification extends GRN_BulletinCategoryBase
{
    var $_app_id = 'bulletin';

    var $col_dynamic_role
        = [
            'type'   => 'char',
            'length' => CB_DATABASE_MAX_STRINDEX
        ];

    function __construct($row)
    {
        parent::__construct($row);
    }
}

/**
 * 既読情報
 *
 * @package grn.bulletin
 */
class GRN_Bulletin_ReadStatus extends CB_PersistentBase
{
    var $_app_id = 'bulletin';

    var $col_user = ['type' => 'relation', 'to' => 'CB_User', 'lazy' => true];
    var $col_article
        = [
            'type' => 'relation',
            'to'   => 'GRN_Bulletin_ArticleEntity',
            'lazy' => true
        ];

    var $idx_u_a = ['cols' => ['user', 'article'], 'unique' => true];


    // 最初に閲覧した時刻
    var $col_first_timestamp = ['type' => 'timestamp'];
    // 最後に閲覧した時刻
    var $col_last_timestamp = ['type' => 'timestamp'];
    var $idx_last_timestamp = ['cols' => ['last_timestamp']];

    var $col_acknowledgement = ['type' => 'int', 'lazy' => true];

    function __construct(& $row)
    {
        parent::__construct($row);
    }
}

/**
 * manually enter sender
 */
class GRN_Bulletin_Manually_Enter_Sender extends CB_PersistentBase
{
    var $_app_id = 'bulletin';

    var $col_sender_name_bin = ['type' => 'char', 'length' => 100];
    var $col_sender_name = ['type' => 'char', 'length' => 100];

    /**
     * GRN_Bulletin_Manually_Enter_Sender constructor.
     *
     * @param CB_Row $row
     */
    function __construct(& $row)
    {
        parent::__construct($row);
    }
}
