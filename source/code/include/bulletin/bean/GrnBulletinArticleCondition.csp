<?php
require_once('bulletin/bean/GrnBulletinCondition.csp');
require_once('bulletin/dao/GrnBulletinArticleDAO.csp');

class GrnBulletinArticleCondition extends GrnBulletinCondition
{
    private $_article = null;
    private $_articleId = null;
    private $_article_term = '';
    private $_limit_params
        = [
            'column'   => 'ctime',
            'value'    => null,
            'operator' => '>='
        ];
    private $_personal_search = false;
    private $_reference_date_time = null;
    private $_start_time = null;
    private $_end_time = null;
    private $_sort_array = [];
    private $_chiledCategoryArray = [];


    public function __construct()
    {
        parent::__construct();

        $this->setArticleTerm('published');
        $this->setLimitColumn([
            'column'   => 'ctime',
            'value'    => null,
            'operator' => '>='
        ]);
        $this->setPersonal(false);
        $this->setSortArray([]);
        $this->setArticle(null);
        $this->setArticleId(null);
        $this->setArticleTerm('published');
        $this->setStartTime(null);
        $this->setEndTime(null);

        $now = new CB_TimeStampEx();
        $term = $now->getDateTime();
        $this->setReferenceDate($term->year, $term->month, $term->day,
            $term->hour, $term->minute, $term->second);
    }

    public function setArticle($article)
    {
        $this->_article = $article;
        $this->setArticleId($article);
    }

    public function getArticle()
    {
        return $this->_article;
    }

    public function setArticleId($article)
    {
        $cid = $article ? $article->getOID() : null;

        if ($this->_articleId != $cid) {
            $this->_articleId = $cid;

            return true;
        }

        return false;
    }

    public function getArticleId()
    {
        return $this->_articleId;
    }

    public function setArticleTerm($term)
    {
        $this->_article_term = $term;
    }

    public function getArticleTerm()
    {
        return $this->_article_term;
    }

    public function setLimitColumn($params)
    {
        if ( ! $params) {
            $this->_limit_params['value'] = null;
        } else {
            if (array_key_exists('value', $params)) {
                if ( ! is_null($params['value'])) {
                    if (is_a($params['value'], 'CB_TimeStamp')) {
                        $params['value'] = $params['value']->unix_ts;
                    } else {
                        $params['value'] = $params['value'];
                    }
                }
            }

            foreach ($params as $k => $v) {
                $this->_limit_params[$k] = $v;
            }
        }
    }

    public function getLimitColumn($key)
    {
        return $this->_limit_params[$key];
    }

    public function setPersonal($onoff)
    {
        $this->_personal_search = $onoff;
    }

    public function isPersonal()
    {
        return $this->_personal_search;
    }

    public function getNowUnixTime()
    {
        return time();
    }

    public function getReferenceDate()
    {
        return $this->_reference_date_time;
    }

    public function getReferenceUnixTime()
    {
        require_once('fw/date.csp');
        $timestamp = new CB_TimeStampEx(new CB_TimeStamp());
        $timestamp->setDateTime($this->getReferenceDate());

        return $timestamp->unix_ts;
    }

    public function setReferenceDate(
        $year,
        $month,
        $day,
        $hour = 0,
        $minute = 0,
        $second = 0
    ) {
        require_once('fw/date.csp');
        $dt = new CB_DateTime();
        $dt->year = $year;
        $dt->month = $month;
        $dt->day = $day;
        $dt->hour = $hour;
        $dt->minute = $minute;
        $dt->second = $second;

        $this->_reference_date_time = $dt;
    }

    /**
     * @return null|CB_Timestamp
     */
    public function getStartTime()
    {
        return $this->_start_time;
    }

    public function setStartTime($start)
    {
        $this->_start_time = $start;
    }

    /**
     * @return null|CB_Timestamp
     */
    public function getEndTime()
    {
        return $this->_end_time;
    }

    public function setEndTime($end)
    {
        $this->_end_time = $end;
    }

    public function setSortArray($value)
    {
        $this->_sort_array = $value;
    }

    /**
     * @param      $key
     * @param bool $value TRUE => DESC   FALSE => ASC
     */
    public function addSort($key, $value)
    {
        $isDesc = $value;
        $this->_sort_array[$key] = $isDesc;

        if ($key == CB_BULLETIN_ARTICLE_DAO_ORDER_BY_GROUP_NAME) {
            $this->_sort_array[CB_BULLETIN_ARTICLE_DAO_ORDER_BY_CREATOR_NAME]
                = $isDesc;
        }
    }

    public function getSortArray()
    {
        return $this->_sort_array;
    }

    public function isExistsSortKey($key)
    {
        return array_key_exists($key, $this->getSortArray());
    }

    public function getChiledCategoryIds()
    {
        return $this->_chiledCategoryArray;
    }

    public function setChiledCategoryIds($idArray)
    {
        $this->_chiledCategoryArray = $idArray;
    }

    public function addChiledCategoryId($id)
    {
        $this->_chiledCategoryArray[] = $id;
    }
}
