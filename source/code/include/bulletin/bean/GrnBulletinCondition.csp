<?php

class GrnBulletinCondition
{
    private $_user = null;
    private $_userId = null;
    private $_category = null;
    private $_categoryId = null;
    private $_categoryIds = null;
    private $_keywords = null;
    private $_items = [];
    private $_subcategory = true;
    private $_sensitive = false;
    private $_offset = 0;
    private $_limit = -1;
    private $_acknowledgement = false;


    public function __construct()
    {
        $this->setUser(null);
        $this->setUserId(null);
        $this->setCategory(null);
        $this->setCategoryId(null);
        $this->setText(null);
        $this->setItems([]);
        $this->setEnableSubcategory(true);
        $this->setSensitive(false);
        $this->setOffset(0);
        $this->setLimit(-1);
    }

    public function setUser($user)
    {
        $this->_user = $user;
        $this->setUserId($user);
    }

    public function getUser()
    {
        return $this->_user;
    }

    public function setUserId($user)
    {
        $cid = $user ? $user->getOID() : null;

        if ($this->_userId != $cid) {
            $this->_userId = $cid;

            return true;
        }

        return false;
    }

    public function getUserId()
    {
        return $this->_userId;
    }

    public function setCategory($category)
    {
        $this->_category = $category;
        if (is_array($category) && count($category) > 0) {
            $this->setCategoryIds($category);
        } else {
            $this->setCategoryId($category);
        }
    }

    public function getCategory()
    {
        return $this->_category;
    }

    public function setCategoryId($category)
    {
        $cid = $category ? $category->getOID() : null;

        if ($this->_categoryId != $cid) {
            $this->_categoryId = $cid;

            return true;
        }

        return false;
    }

    public function getCategoryId()
    {
        return $this->_categoryId;
    }

    public function setCategoryIds($category)
    {
        if (is_array($category) && count($category) > 0) {
            $this->_categoryIds = $category;

            return true;
        }

        return false;
    }

    public function getCategoryIds()
    {
        return $this->_categoryIds;
    }

    public function setAcknowledgement($acknowledgement)
    {
        $this->_acknowledgement = $acknowledgement;
    }

    public function getAcknowledgement()
    {
        return $this->_acknowledgement;
    }

    public function setText($text)
    {
        if ( ! is_null($text) && strlen($text) > 0) {
            require_once('fw/string_util.csp');
            $this->_keywords = cb_parse_search_text($text);
        } else {
            $this->_keywords = null;
        }
    }

    public function getText()
    {
        return $this->_keywords;
    }

    public function setItems($items)
    {
        if ($this->_items != $items) {
            $this->_items = $items;

            return true;
        }

        return false;
    }

    public function getItems()
    {
        return $this->_items;
    }

    public function getItem($key)
    {
        return $this->_items[$key];
    }

    public function setEnableSubcategory($enable)
    {
        if ($this->_subcategory != $enable) {
            $this->_subcategory = $enable;

            return true;
        }

        return false;
    }

    public function isEnableSubcategory()
    {
        return $this->_subcategory;
    }

    public function setSensitive($enable)
    {
        if ($this->_sensitive != $enable) {
            $this->_sensitive = $enable;

            return true;
        }

        return false;
    }

    public function isSensitive()
    {
        return $this->_sensitive;
    }

    public function setOffset($offset)
    {
        $this->_offset = $offset;
    }

    public function getOffset()
    {
        return $this->_offset;
    }

    public function setLimit($limit)
    {
        $this->_limit = $limit;
    }

    public function getLimit()
    {
        return $this->_limit;
    }
}
