<?php

namespace grn\bulletin\screen;

require_once("fw/session_manager.csp");
require_once("grn/application.csp");
require_once("grn/smarty.csp");
require_once("bulletin/category.csp");
require_once("bulletin/controller.csp");
require_once("bulletin/error_code.csp");
require_once("bulletin/folder_tree.csp");
require_once("bulletin/hierarchy.csp");
require_once("bulletin/notification.csp");

class Subscribe
{
    const ARG_CATEGORY_ID = "cid";
    const ARG_SELECTED_TAB = "selected_tab";
    const TEMPLATE_PATH = "bulletin/subscribe.tpl";
    const BULLETIN_SUBSCRIBE_SESSION_KEY = "grn.bulletin.subscribe";
    const SESSION_KEY_SUBSCRIBE_CHECKBOX = "session_key";
    const ARG_CATEGORY_CHECKBOX_ID = "id";
    const ARG_CATEGORY_CHECKBOX_CHECKED = "checked";

    /** @var string */
    private $categoryId = \GRN_BULLETIN_ROOT_CATEGORY_ID;
    /** @var int */
    private $selectedTab = 0;

    /**
     * @param array $input
     *
     * @return \grn\bulletin\screen\Subscribe
     */
    public function __construct(array $input)
    {
        $this->parseInput($input);
        $this->checkInput();
    }

    /**
     * @return string
     * @return bool|mixed|string
     */
    public function fetch()
    {
        $smarty = new \GRN_Smarty();
        $login_user = \cb_get_login_user();
        $category_id = $this->getCategoryId();
        $selected_tab = $this->getSelectedTab();
        $session_key = $this->getSessionKey();

        $notification_manager
            = \GRN_Bulletin_NotificationManager::getInstance();
        $notified_category_info
            = $notification_manager->getNotifiedCategoryInfo($login_user);
        $force_notify_ids = $notified_category_info["force_notify_ids"];
        $checked_ids = $notified_category_info["checked_ids"];

        $category_manager = \GRN_Bulletin_CategoryManager::getInstance();
        $subscribe_categories
            = $category_manager->getSubscribeCategories($login_user);
        if ($selected_tab) {
            $hierarchy = \GRN_Bulletin_Hierarchy::getInstance();
            $list_for_view
                = $hierarchy->buildCategoryListInfo($subscribe_categories,
                $force_notify_ids, $checked_ids);

            $list_for_view["session_url"] = "bulletin/ajax/session_manager";
            $list_for_view["params"] = [
                self::SESSION_KEY_SUBSCRIBE_CHECKBOX => $session_key
            ];

            $button_disabled = count($list_for_view["list"]) === 0 ? true
                : false;
            $button_submit_onclick
                = "grn.component.category_list.get_instance('"
                  . $list_for_view["list_name"]
                  . "').onClickSubmit(this)";

            $smarty->assign('list_for_view', $list_for_view);
        } else {
            $hierarchy = \GRN_Bulletin_Hierarchy::getInstance();
            $tree_for_view
                = $hierarchy->buildCategoryTreeInfo($subscribe_categories,
                $force_notify_ids, $checked_ids,
                $category_id);

            $tree_for_view["incremental_search"] = true;
            $tree_for_view["incremental_search_url"]
                = "bulletin/ajax/search_category";
            $tree_for_view["incremental_search_picker_css"]
                = "cb-category-picker";
            $tree_for_view["incremental_search_session_url"]
                = "bulletin/ajax/session_manager";
            $tree_for_view["incremental_search_params"] = [
                self::SESSION_KEY_SUBSCRIBE_CHECKBOX => $session_key
            ];

            $button_disabled = count($tree_for_view) === 0 ? true : false;
            $button_submit_onclick
                = "grn.component.category_picker.get_instance('"
                  . $tree_for_view["tree_name"]
                  . "').onClickSubmit(this)";
            $smarty->assign('tree_for_view', $tree_for_view);
        }

        $smarty->assign('category_id', $category_id);
        $smarty->assign(self::ARG_SELECTED_TAB, $selected_tab);
        $smarty->assign(self::SESSION_KEY_SUBSCRIBE_CHECKBOX, $session_key);
        $smarty->assign('button_disabled', $button_disabled);
        $smarty->assign('button_submit_onclick', $button_submit_onclick);

        $util = new \GRN_Bulletin_ControllerUtil();
        $util->prepareMakeSitePosition($smarty, $category_id);

        return $smarty->fetch(self::TEMPLATE_PATH);
    }

    /**
     * @param string $session_key
     */
    public function post($session_key)
    {
        $login_user = \cb_get_login_user();

        $notification_manager
            = \GRN_Bulletin_NotificationManager::getInstance();
        $notified_category_info
            = $notification_manager->getNotifiedCategoryInfo($login_user);
        $category_notify_ids
            = $notified_category_info["category_notify_ids"];
        $force_notify_ids = $notified_category_info["force_notify_ids"];
        $user_notify_ids = $notified_category_info["user_notify_ids"];
        $user_unnotify_ids = $notified_category_info["user_unnotify_ids"];

        $category_manager = \GRN_Bulletin_CategoryManager::getInstance();
        $category_check_info
            = $this->getCategoryCheckBoxFromSessionKey($session_key);
        foreach ($category_check_info as $category_id => $subscribe) {
            $category = $category_manager->getCategory($login_user,
                $category_id);
            if ( ! $category || isset($force_notify_ids[$category_id])) {
                continue;
            }

            if ($subscribe) {
                if ( ! isset($user_notify_ids[$category_id])) {
                    $category->subscribe($login_user, true);
                }
                if (isset($user_unnotify_ids[$category_id])) {
                    $category->unsubscribe($login_user, false);
                }
            } else {
                if (isset($user_notify_ids[$category_id])) {
                    $category->subscribe($login_user, false);
                }

                if (isset($category_notify_ids[$category_id])) {
                    if ( ! isset($user_unnotify_ids[$category_id])) {
                        $category->unsubscribe($login_user, true);
                    }
                } else {
                    if (isset($user_unnotify_ids[$category_id])) {
                        $category->unsubscribe($login_user, false);
                    }
                }
            }
            $this->rebuildFolderTree($category_id);
        }
        $this->clearSession($session_key);
    }

    /**
     *
     * @param string $category_id
     */
    private function rebuildFolderTree($category_id)
    {
        $list_page = 'bulletin/index';
        grn_bulletin_rebuild_folder_tree($list_page, $category_id);
    }

    /**
     * @return string $session_key
     */
    private function getSessionKey()
    {
        $session_key = md5(uniqid(rand(), true));

        return $session_key;
    }

    /**
     * @return \CB_Session $session
     */
    private function getSession()
    {
        $sm = \CB_SessionManager::getInstance();
        $session = $sm->getSession(self::BULLETIN_SUBSCRIBE_SESSION_KEY);

        return $session;
    }

    /**
     * @param $session_key
     */
    private function clearSession($session_key)
    {
        $session = $this->getSession();
        $session->unset_by($session_key);
    }

    /**
     * @param string $session_key
     *
     * @return array
     */
    public function getCategoryCheckBoxFromSessionKey($session_key)
    {
        $session = $this->getSession();
        $category_check_info = $session->get($session_key);
        if ( ! is_array($category_check_info)) {
            $category_check_info = [];
        }

        return $category_check_info;
    }

    /**
     * @param string $session_key
     * @param string $id
     * @param int    $checked 1:checked, 0:unchecked
     */
    public function setSessionWithCategoryCheckBox($session_key, $id, $checked)
    {
        $session = $this->getSession();
        $category_check_info
            = $this->getCategoryCheckBoxFromSessionKey($session_key);
        $category_check_info[$id] = $checked;
        $session->set($session_key, $category_check_info);
    }

    /**
     * @param array $input
     */
    private function parseInput(array $input)
    {
        $category_id = \cb_at($input, self::ARG_CATEGORY_ID);
        if ($category_id) {
            $this->setCategoryId($category_id);
        }

        $selected_tab = \cb_at($input, self::ARG_SELECTED_TAB);
        if ($selected_tab) {
            $this->setSelectedTab($selected_tab);
        }
    }

    private function checkInput()
    {
        $category_id = $this->getCategoryId();
        if ($category_id > 0) {
            global $G_bulletin;
            $login_user = \cb_get_login_user();
            $category = $G_bulletin->getCategory($login_user, $category_id);
            if ( ! $category) {
                cb_throw_error(E_GRN_BULLETIN_CATEGORY_NOT_FOUND);
            }
        }
    }

    /**
     * @param int $category_id
     */
    public function setCategoryId($category_id)
    {
        $this->categoryId = $category_id;
    }

    /**
     * @return int
     */
    public function getCategoryId()
    {
        return $this->categoryId;
    }

    /**
     * @param int $selected_tab
     */
    public function setSelectedTab($selected_tab)
    {
        $this->selectedTab = $selected_tab;
    }

    /**
     * @return int
     */
    public function getSelectedTab()
    {
        return $this->selectedTab;
    }
}
