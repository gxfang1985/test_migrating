<?php

namespace grn\bulletin\screen;

use grn\grn\dialog\screen\AbstractAjaxMemberDialogScreen;

/**
 * Class AjaxNotificationUserDialogScreen
 *
 * @package grn\bulletin\screen
 */
class AjaxNotificationUserDialogScreen extends AbstractAjaxMemberDialogScreen
{
    /** Input parameter : Primary key for search */
    private $input_primary_key;
    /** Input parameter : Display page number */
    private $input_want_page;
    /** Input parameter : Search word */
    private $input_search_word;
    /** Input parameter : Access plugin */
    private $input_access_plugin;
    /** Input parameter : Application ID */
    private $input_app_id;

    /**
     * @var bool
     */
    private $use_back_button = false;

    /**
     * AjaxMaintainerDialogScreen constructor.
     *
     * @param $input
     */
    function __construct($input)
    {
        parent::__construct($input);

        $this->setInput($input);
    }

    /**
     * Set Input.
     *
     * @param $input array
     */
    private function setInput($input)
    {
        $anchor_id = cb_at($input, 'anchor_id', '');
        $this->input_primary_key = str_replace('user_list_dialog_notification_',
            '', $anchor_id);

        $this->input_want_page = cb_at($input, 'want_page', 1);
        $this->input_search_word = cb_at($input, 'search_word', '');
        $this->input_app_id = cb_at($input, 'app_id', '');
    }

    /**
     * @return int
     */
    protected function getWantPage()
    {
        return $this->input_want_page;
    }

    /**
     * @return string
     */
    protected function getSearchWord()
    {
        return $this->input_search_word;
    }

    /**
     * @return string
     */
    protected function getPrimaryKey()
    {
        return $this->input_primary_key;
    }

    /**
     * @return mixed
     */
    protected function getAccessPlugin()
    {
        return $this->input_access_plugin;
    }

    /**
     * @return string
     */
    protected function getAppId()
    {
        return $this->input_app_id;
    }

    /**
     * @return boolean
     */
    protected function useSearchItem()
    {
        return true;
    }

    /**
     * @return bool
     */
    public function useBackButton()
    {
        return $this->use_back_button;
    }

    /**
     * @return bool
     */
    protected function useSwitchTab()
    {
        if ($this->isSubDialog()) {
            return false;
        } else {
            return true;
        }
    }

    /**
     * @return boolean
     */
    protected function isSearch()
    {
        if (strlen($this->input_search_word) > 0) {
            return true;
        }

        return false;
    }

    /**
     * @return array()
     */
    protected function getSwitchTabCaption()
    {
        return [
            cb_msg('grn.bulletin', 'user_list_dialog_title_caption1'),
            cb_msg('grn.bulletin', 'user_list_dialog_title_caption2')
        ];
    }

    /**
     * @param bool $include_search
     *
     * @return mixed|void
     */
    protected function _setDisplayMembersId($include_search = false)
    {
        if ($this->isMainDialog()) {
            $search_key = explode('_', $this->getPrimaryKey());
            $category_id = $search_key[0];
            $article_id = $search_key[1];

            if ($this->getSwitchTabID() == self::SWITCH_TAB_ID_2) {
                $this->searchNonNotificationMembers($category_id, $article_id,
                    $include_search);
            } else {
                $this->searchNotificationMembers($category_id, $include_search);
            }
        } elseif ($this->isSubDialog()) {
            $this->use_back_button = true;
            $search_key = explode('_', $this->getSubPrimaryKey());
            $line_prefix = $search_key[0];
            $search_id = $search_key[1];

            switch ($line_prefix) {
                case self::LINE_PREFIX_GROUP:
                    $this->searchGroupUsers($search_id, $include_search);
                    break;
                case self::LINE_PREFIX_DYNAMIC_ROLE:
                case self::LINE_PREFIX_STATIC_ROLE:
                    $this->searchRoleUsers($search_id, $include_search);
                    break;
            }
        }
    }

    /**
     * @return string
     */
    protected function getNoExistsMessage()
    {
        if ($this->isMainDialog()) {
            return cb_msg('grn.grn',
                'grn.member_list_dialog.no_exists_message_no_user');
        } elseif ($this->isSubDialog()) {
            return parent::getNoExistsMessage();
        }
    }

    /**
     * @return string
     */
    protected function createDialogTitle()
    {
        if ($this->isSubDialog()) {
            $search_key = explode('_', $this->getSubPrimaryKey());
            $line_prefix = $search_key[0];
            $search_id = $search_key[1];

            switch ($line_prefix) {
                case self::LINE_PREFIX_GROUP:
                    $name = $this->uum->getGroup($search_id)->get('name');

                    return cb_msg('grn.grn', 'grn.member_list_dialog.title',
                        ['name' => $name, 'count' => $this->getUserCount()]);
                    break;
                case self::LINE_PREFIX_DYNAMIC_ROLE:
                case self::LINE_PREFIX_STATIC_ROLE:
                    $name = $this->uum->getStaticRole($search_id)
                                      ->get('foreign_key');

                    return cb_msg('grn.grn', 'grn.member_list_dialog.title',
                        ['name' => $name, 'count' => $this->getUserCount()]);
                    break;
            }
        } else {
            return cb_msg('grn.bulletin',
                'user_list_dialog_title_notification');
        }
    }

    /**
     * @param $category_id
     * @param $include_search
     */
    private function searchNotificationMembers($category_id, $include_search)
    {
        require_once('grn/application.csp');
        $locator = \GRN_ApplicationLocator::instance();
        if ( ! ($G_bulletin = $locator->getInstance('bulletin'))) {
            cb_throw_error(E_GRN_BULLETIN_DEACTIVATED);
        }
        if ( ! ($category =& $G_bulletin->getCategory($this->login_user,
            $category_id))
        ) {
            cb_throw_error(E_GRN_BULLETIN_CATEGORY_NOT_FOUND);
        }

        // Search
        $is_search = false;
        $search_hit_user_ids = [];
        if ($this->isSearch() && $include_search) {
            $search_hit_user_ids = $this->searchIncludeUsers("");
            $is_search = true;
        } else {
            $targets = $category->getNotificationTargets('dynamic_role');
            foreach (array_keys($targets) as $id) {
                if ($id == self::ROLE_ID_EVERYONE
                    || $id == self::ROLE_ID_LOGINUSER
                ) {
                    $this->addDynamicRole($id, false);
                } else {
                    $this->addDynamicRole($id);
                }
            }

            $targets = $category->getNotificationTargets('role');
            foreach (array_keys($targets) as $id) {
                $this->addStaticRole($id);
            }

            $targets = $category->getNotificationTargets('group');
            foreach (array_keys($targets) as $id) {
                $this->addGroup($id);
            }
        }

        $user_ids = [];
        foreach (array_keys($category->getNotificationTargets('user')) as $id) {
            $user_ids[$id] = $id;
        }

        require_once('bulletin/include_subscribe.csp');
        $subscribe = \GRN_Bulletin_SubscribeCategories::getInstance();
        foreach (
            array_keys($subscribe->getCategorySubscribeUsers($category_id)) as
            $id
        ) {
            $user_ids[$id] = $id;
        }
        $this->addDisplayUsers($user_ids, $is_search, $search_hit_user_ids);

    }

    /**
     * @param $category_id
     * @param $article_id
     * @param $include_search
     */
    private function searchNonNotificationMembers(
        $category_id,
        $article_id,
        $include_search
    ) {
        $is_search = false;
        $search_hit_user_ids = [];
        if ($this->isSearch() && $include_search) {
            $search_hit_user_ids = $this->searchIncludeUsers("");
            $is_search = true;
        }

        require_once('bulletin/include_subscribe.csp');
        $subscribe = \GRN_Bulletin_SubscribeArticles::getInstance();
        $user_ids = $subscribe->getCategoryUnsubscribeUsers($category_id,
            $article_id);
        $this->addDisplayUsers($user_ids, $is_search, $search_hit_user_ids);

    }

    /**
     * @param array $user_ids
     * @param bool  $is_search
     * @param array $search_hit_user_ids
     */
    private function addDisplayUsers(
        $user_ids,
        $is_search,
        $search_hit_user_ids
    ) {
        foreach (array_keys($user_ids) as $id) {
            if ($is_search) {
                if (in_array($id, $search_hit_user_ids)) {
                    $this->addUser($id);
                }
            } else {
                $this->addUser($id);
            }
        }
    }

}
