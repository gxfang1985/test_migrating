<?php

namespace grn\bulletin\screen\mobile;

use grn\grn\GrnGenericScreenBase;
use grn\grn\Validate;

require_once('bulletin/error_code.csp');

class MobileBulletinScreenBase extends GrnGenericScreenBase
{
    const ARG_CATEGORY_ID = 'cid';
    const ARG_ARTICLE_ID = 'aid';
    const ARG_FILE_ID = 'fid';
    const ARG_FOLLOW_ID = 'follow_id';
    const ARG_NAVI_TAG = 'sp';

    const URL_BULLETIN_DETAIL = "bulletin/mobile/view";

    private $_categoryId;
    private $_articleId;
    private $_fileId;
    private $_followId;
    private $_article;
    private $_follows = [];

    public function __construct($input)
    {
        parent::__construct($input);

        $this->initMobileView();
        $this->setMobileApplicationId('bulletin');
    }

    public function getCategoryId()
    {
        return $this->_categoryId;
    }

    public function setCategoryId($value)
    {
        $this->_categoryId = $value;
    }

    public function getArticleId()
    {
        return $this->_articleId;
    }

    protected function setArticleId($value)
    {
        $this->_articleId = $value;
    }

    public function getFileId()
    {
        return $this->_fileId;
    }

    protected function setFileId($value)
    {
        $this->_fileId = $value;
    }

    public function getFollowId()
    {
        return $this->_followId;
    }

    protected function setFollowId($value)
    {
        $this->_followId = $value;
    }

    public function getArticle()
    {
        return $this->_article;
    }

    protected function setArticle($value)
    {
        $this->_article = $value;
    }

    /**
     * @return \GRN_Bulletin_Article
     */
    protected function getArticleById($user, $article_id)
    {
        require_once('grn/application.csp');
        $locator = \GRN_ApplicationLocator::instance();
        $bulletin = null;
        if ( ! ($bulletin =& $locator->getInstance('bulletin'))) {
            cb_throw_error(E_GRN_BULLETIN_DEACTIVATED);
        }
        if ( ! ($article =& $bulletin->getArticle($user, $article_id,
            GRN_BULLETIN_ACCESS_R, true, CB_DATABASE_NO_LOCK))
        ) {
            $input = $this->getInput();
            if (array_key_exists('nid', $input)
                || array_key_exists('nhid', $input)
            ) {
                require_once('grn/notification.csp');
                $notify_service = \GRN_Notification_Service::getInstance();
                if (array_key_exists('nid', $input)) {
                    $prop = $notify_service->getNotifyDataPropertiesFast($user,
                        'grn.bulletin', $article_id);
                    if ($prop) {
                        $notify_service->deleteNotifyData($user, 'grn.bulletin',
                            $article_id);
                    }
                } elseif (array_key_exists('nhid', $input)) {
                    $prop = $notify_service->getHistoryDataProperties($user,
                        'grn.bulletin', $article_id);
                    if ($prop) {
                        $notify_service->deleteHistoryData($user,
                            'grn.bulletin', $article_id);
                    }
                }
                $this->displayErrorPage();
            }
            cb_throw_error(E_GRN_BULLETIN_ARTICLE_NOT_FOUND);
        }
        if ( ! $article->isPublished()) {
            cb_throw_error(E_GRN_BULLETIN_ARTICLE_NOT_FOUND);
        }

        return $article;
    }

    protected function getCommentViewById($follow_id)
    {
        if ( ! array_key_exists($follow_id, $this->_follows)) {
            $article = $this->getArticle();
            if (Validate::isNull($article)) {
                cb_throw_error(E_GRN_BULLETIN_FOLLOW_NOT_FOUND);
            }

            if ( ! $follow = $article->getFollow($follow_id)) {
                cb_throw_error(E_GRN_BULLETIN_FOLLOW_NOT_FOUND);
            }

            require_once('bulletin/controller.csp');
            $utility = new \GRN_Bulletin_ControllerUtil();
            $comment_for_view = $utility->getFollowView(cb_get_login_user(),
                $follow);

            $this->_follows[$follow_id] = $comment_for_view;
        }

        return $this->_follows[$follow_id];
    }

    private function displayErrorPage()
    {
        require_once('fw/error_message.csp');
        $msg = \CB_ErrorMessage::getInstance(E_GRN_BULLETIN_ARTICLE_NOT_FOUND,
            null);

        global $G_state_set;
        $type = $G_state_set->get('error_page_type');

        require_once('fw/error_handler.csp');
        $factory = \CB_ErrorMessageFilterFactory::getInstance();
        $filter = $factory->getFilter($type);

        $msgDiag = $filter->filter($msg->formatDiagnosisMessage(null));
        $msgCause = $filter->filter($msg->formatCauseMessage(null));
        $msgCounter = $filter->filter($msg->formatCounterMeasureMessage(null));
        $msgDev = $filter->filter($msg->formatDeveloperInfoMessage(null));

        require_once('grn/smarty.csp');
        $t = new \GRN_Smarty();
        $t->skipWarning();  // disable license warning
        $t->assign('ErrorNumber', E_GRN_BULLETIN_ARTICLE_NOT_FOUND);
        $t->assign('ErrorDiag', $msgDiag);
        $t->assign('ErrorCause', $msgCause);
        $t->assign('ErrorCounterMeasure', $msgCounter);
        $t->assign('ErrorDeveloperInfo', $msgDev);
        $t->display('error_html.tpl');
        echo '<div class="credit">' . cb_get_copyright(CB_TYPE_HTML)
             . '</div></body></html>';
        cb_safe_exit(CB_EXIT_ERROR);
    }

    protected function getUsersInfoType($users_info)
    {
        foreach ($users_info as $user_id => $user) {
            if (is_array($user) && Validate::isNotNull($user['col_valid'])) {
                $users_info[$user_id]['valid'] = 'invalid_user';
            } elseif (is_array($user)
                      && array_key_exists('col_using_app', $user)
                      && Validate::isNull($user['col_using_app'])
            ) {
                $users_info[$user_id]['valid'] = 'invalidApp_user';
            } elseif ($user_id == $this->getLoginUserId()) {
                $users_info[$user_id]['valid'] = 'login_user';
            } else {
                $users_info[$user_id]['valid'] = 'unlogin_user';
            }
        }

        return $users_info;
    }

    /**
     * Check argument of $G_INPUT
     *
     * @param  array $paraArr ( aid, fid, follow_id )
     * @param  array $input
     *
     * @throws E_GRN_BULLETIN_ARTICLE_NOT_FOUND
     */
    protected function checkArgFromInput(array $paraArr, array $input)
    {
        foreach ($paraArr as $para) {
            switch ($para) {
                case self::ARG_CATEGORY_ID:
                    if (Validate::isNumber(@$input[self::ARG_CATEGORY_ID])) {
                        $this->setCategoryId($input[self::ARG_CATEGORY_ID]);
                    } else {
                        cb_throw_error(E_GRN_BULLETIN_CATEGORY_NOT_FOUND);
                    }
                    break;
                case self::ARG_ARTICLE_ID:
                    if (Validate::isNumber(@$input[self::ARG_ARTICLE_ID])) {
                        $this->setArticleId($input[self::ARG_ARTICLE_ID]);
                    } else {
                        cb_throw_error(E_GRN_BULLETIN_ARTICLE_NOT_FOUND);
                    }
                    break;
                case self::ARG_FILE_ID:
                    if (Validate::isNumber(@$input[self::ARG_FILE_ID])) {
                        $this->setFileId($input[self::ARG_FILE_ID]);
                    } else {
                        cb_throw_error(E_GRN_BULLETIN_FILE_NOT_FOUND);
                    }
                    break;
                case self::ARG_FOLLOW_ID:
                    if (Validate::isNumber(@$input[self::ARG_FOLLOW_ID])) {
                        $this->setFollowId($input[self::ARG_FOLLOW_ID]);
                    } else {
                        cb_throw_error(E_GRN_BULLETIN_FOLLOW_NOT_FOUND);
                    }
                    break;
            }
        }

        return;
    }

    static public function redirectMobilePage($input)
    {
        if (array_key_exists(self::ARG_ARTICLE_ID, $input)) {
            cb_redirect(self::URL_BULLETIN_DETAIL, $input);
        }
    }
}
