<?php

namespace grn\bulletin\screen;

use grn\fts\Application as FtsApplication;
use grn\fts\filter\LanguageFilter;
use grn\fts\SearchQueryInterface;
use grn\fts\SearchTarget;
use grn\fts\SortOrder;

require_once('grn/smarty.csp');
require_once('bulletin/controller.csp');
require_once('bulletin/category.csp');

class FtsSearch
{
    const TEMPLATE_PATH = 'bulletin/search_fts.tpl';

    /** @var string */
    private $text = '';
    /** @var string */
    private $categoryId = null;
    /** @var \grn\fts\SortOrder */
    private $sortOrder;
    /** @var string */
    private $scopeItem = '';
    /** @var bool */
    private $fileOnly = false;
    /** @var string */
    private $fileType = '';
    /** @var bool */
    private $titleFilter = false;
    /** @var string */
    private $modifier = '';
    /** @var string */
    private $dateLower = SearchQueryInterface::DATE_NOT_SPECIFIED;
    /** @var string */
    private $dateUpper = SearchQueryInterface::DATE_NOT_SPECIFIED;
    /** @var string */
    private $categoryTarget = SearchTarget::CURRENT;
    /** @var string */
    private $language = LanguageFilter::ALL;

    /**
     * @param array $input
     */
    public function __construct(array $input)
    {
        $this->sortOrder = new SortOrder;
        $this->parseInput($input);
    }

    /**
     * @return string
     * @return bool|mixed|string
     */
    public function fetch()
    {
        $smarty = new \GRN_Smarty();
        $smarty->assign('text', $this->getText());
        $smarty->assign('sortByDatetime',
            $this->getSortOrder() === SortOrder::DATETIME);
        $smarty->assign('scopeItem', $this->getScopeItem());
        $smarty->assign('fileOnly', $this->getFileOnly());
        $smarty->assign('fileType', $this->getFileType());
        $smarty->assign('titleFilter', $this->getTitleFilter());
        $smarty->assign('modifier', $this->getModifier());
        $smarty->assign('language', $this->getLanguage());
        $smarty->assign('is_elasticsearch',
            FtsApplication::getFtsEngine()->isElasticsearch());

        $categoryId = $this->getCategoryId();
        $manager = \GRN_Bulletin_CategoryManager::getInstance();
        if ( ! is_null($categoryId)) {
            $category = $manager->getCategory(cb_get_login_user(), $categoryId,
                GRN_BULLETIN_ACCESS_R, false);
            if ($category) {
                $smarty->assign('categoryId', $categoryId);
            } else {
                /* invalid category */
                cb_throw_error(E_GRN_BULLETIN_CATEGORY_NOT_FOUND);
            }
        } else {
            $category = $manager->getRootCategory(cb_get_login_user());
            $categoryId = $category->getOID();
            $smarty->assign('categoryId', $categoryId);
        }

        $target = $this->getCategoryTarget();
        $smarty->assign('target', $target);

        $dateLower = $this->getDateLower();
        if ($dateLower !== SearchQueryInterface::DATE_NOT_SPECIFIED) {
            $smarty->assign('dateLower', $dateLower);
        }
        $dateUpper = $this->getDateUpper();
        if ($dateUpper !== SearchQueryInterface::DATE_NOT_SPECIFIED) {
            $smarty->assign('dateUpper', $dateUpper);
        }

        $util = new \GRN_Bulletin_ControllerUtil();
        $util->prepareMakeSitePosition($smarty, $categoryId);

        $smarty->assign('runBackgroundSearch',
            FtsApplication::isBackgroundSearchModeEnabled());

        return $smarty->fetch(self::TEMPLATE_PATH);
    }

    /**
     * @param array $input
     */
    private function parseInput(array $input)
    {
        if (isset($input['text'])) {
            $this->setText($input['text']);
        }
        if (isset($input['cid'])) {
            $this->setCategoryId((int)$input['cid']);
        }
        if (isset($input['scopeItem'])) {
            $this->setScopeItem($input['scopeItem']);
        }
        if (isset($input['sortOrder'])) {
            $this->setSortOrder($input['sortOrder']);
        }
        if (isset($input['fileOnly']) && $input['fileOnly']) {
            $this->setFileOnly(true);
        }
        if (isset($input['fileType'])) {
            $this->setFileType($input['fileType']);
        }
        if (isset($input['titleFilter']) && $input['titleFilter']) {
            $this->setTitleFilter(true);
        }
        if (isset($input['modifier'])) {
            $this->setModifier($input['modifier']);
        }
        if (isset($input['dateLower'])) {
            $this->setDateLower($input['dateLower']);
        }
        if (isset($input['dateUpper'])) {
            $this->setDateUpper($input['dateUpper']);
        }
        if (isset($input['target'])) {
            $this->setCategoryTarget($input['target']);
        }
        if (isset($input['language'])) {
            $this->setLanguage($input['language']);
        }
    }

    /**
     * @param string $text
     */
    public function setText($text)
    {
        $this->text = $text;
    }

    /**
     * @return string
     */
    public function getText()
    {
        return $this->text;
    }

    /**
     * @param int $categoryId
     */
    public function setCategoryId($categoryId)
    {
        $this->categoryId = $categoryId;
    }

    /**
     * @return int
     */
    public function getCategoryId()
    {
        return $this->categoryId;
    }

    /**
     * @param string $scopeItem
     */
    public function setScopeItem($scopeItem)
    {
        $this->scopeItem = $scopeItem;
    }

    /**
     * @return string
     */
    public function getScopeItem()
    {
        return $this->scopeItem;
    }

    /**
     * @param string $sortOrder
     */
    public function setSortOrder($sortOrder)
    {
        $this->sortOrder->setSortType($sortOrder);
    }

    /**
     * @return string
     */
    public function getSortOrder()
    {
        return $this->sortOrder->getSortType();
    }

    /**
     * @param string $dateLower
     */
    public function setDateLower($dateLower)
    {
        $this->dateLower = $dateLower;
    }

    /**
     * @return string
     */
    public function getDateLower()
    {
        return $this->dateLower;
    }

    /**
     * @param string $dateUpper
     */
    public function setDateUpper($dateUpper)
    {
        $this->dateUpper = $dateUpper;
    }

    /**
     * @return string
     */
    public function getDateUpper()
    {
        return $this->dateUpper;
    }

    /**
     * @param string $modifier
     */
    public function setModifier($modifier)
    {
        $this->modifier = $modifier;
    }

    /**
     * @return string
     */
    public function getModifier()
    {
        return $this->modifier;
    }

    /**
     * @param boolean $fileOnly
     */
    public function setFileOnly($fileOnly)
    {
        $this->fileOnly = $fileOnly;
    }

    /**
     * @return boolean
     */
    public function getFileOnly()
    {
        return $this->fileOnly;
    }

    /**
     * @param string $fileType
     */
    public function setFileType($fileType)
    {
        $this->fileType = $fileType;
    }

    /**
     * @return string
     */
    public function getFileType()
    {
        return $this->fileType;
    }

    /**
     * @param string $categoryTarget
     */
    public function setCategoryTarget($categoryTarget)
    {
        $this->categoryTarget = $categoryTarget;
    }

    /**
     * @return string
     */
    public function getCategoryTarget()
    {
        return $this->categoryTarget;
    }

    /**
     * @param string $language
     */
    public function setLanguage($language)
    {
        $this->language = $language;
    }

    /**
     * @return string
     */
    public function getLanguage()
    {
        return $this->language;
    }

    /**
     * @return boolean
     */
    public function getTitleFilter()
    {
        return $this->titleFilter;
    }

    /**
     * @param boolean $titleFilter
     */
    public function setTitleFilter($titleFilter)
    {
        $this->titleFilter = $titleFilter;
    }
}
