<?php

namespace grn\bulletin\screen;

use grn\grn\dialog\screen\AbstractAjaxMemberDialogScreen;

/**
 * Class AjaxAuthorityReadUserDialogScreen
 *
 * @package grn\bulletin\screen
 */
class AjaxAuthorityReadUserDialogScreen extends AbstractAjaxMemberDialogScreen
{
    /** Input parameter : Primary key for search */
    private $input_primary_key;
    /** Input parameter : Display page number */
    private $input_want_page;
    /** Input parameter : Search word */
    private $input_search_word;
    /** Input parameter : Access plugin */
    private $input_access_plugin;
    /** Input parameter : Application ID */
    private $input_app_id;

    /**
     * @var string
     */
    private $security_model;

    /**
     * @var bool
     */
    private $use_back_button = false;

    /**
     * AjaxMaintainerDialogScreen constructor.
     *
     * @param $input
     */
    function __construct($input)
    {
        parent::__construct($input);

        $this->setInput($input);
    }

    /**
     * Set Input.
     *
     * @param $input array
     */
    private function setInput($input)
    {
        $anchor_id = cb_at($input, 'anchor_id', '');
        $this->input_primary_key
            = str_replace('user_list_dialog_authority_read_', '',
            $anchor_id);

        $this->input_want_page = cb_at($input, 'want_page', 1);
        $this->input_search_word = cb_at($input, 'search_word', '');
        $this->input_app_id = cb_at($input, 'app_id', '');
    }

    /**
     * @return int
     */
    protected function getWantPage()
    {
        return $this->input_want_page;
    }

    /**
     * @return string
     */
    protected function getSearchWord()
    {
        return $this->input_search_word;
    }

    /**
     * @return string
     */
    protected function getPrimaryKey()
    {
        return $this->input_primary_key;
    }

    /**
     * @return mixed
     */
    protected function getAccessPlugin()
    {
        return $this->input_access_plugin;
    }

    /**
     * @return string
     */
    protected function getAppId()
    {
        return $this->input_app_id;
    }

    /**
     * @return boolean
     */
    protected function useSearchItem()
    {
        return true;
    }

    /**
     * @return bool
     */
    public function useBackButton()
    {
        return $this->use_back_button;
    }

    /**
     * @return boolean
     */
    protected function isSearch()
    {
        if (strlen($this->input_search_word) > 0) {
            return true;
        }

        return false;
    }

    /**
     * @param bool $include_search
     *
     * @return mixed|void
     */
    protected function _setDisplayMembersId($include_search = false)
    {
        if ($this->isMainDialog()) {
            require_once('grn/application.csp');
            $locator = \GRN_ApplicationLocator::instance();
            if ( ! ($G_bulletin = $locator->getInstance('bulletin'))) {
                cb_throw_error(E_GRN_BULLETIN_DEACTIVATED);
            }
            if ( ! ($node_row =& $G_bulletin->getCategory($this->login_user,
                $this->getPrimaryKey()))
            ) {
                cb_throw_error(E_GRN_BULLETIN_CATEGORY_NOT_FOUND);
            }

            $this->getTargetMembers($include_search, $node_row);

        } elseif ($this->isSubDialog()) {
            $this->use_back_button = true;
            $search_key = explode('_', $this->getSubPrimaryKey());
            $line_prefix = $search_key[0];
            $search_id = $search_key[1];

            switch ($line_prefix) {
                case self::LINE_PREFIX_GROUP:
                    $this->searchGroupUsers($search_id, $include_search);
                    break;
                case self::LINE_PREFIX_DYNAMIC_ROLE:
                case self::LINE_PREFIX_STATIC_ROLE:
                    $this->searchRoleUsers($search_id, $include_search);
                    break;
            }
        }
    }

    /**
     * @return string
     */
    protected function getNoExistsMessage()
    {
        if ($this->isMainDialog()) {
            return cb_msg('grn.grn',
                'grn.member_list_dialog.no_exists_message_no_user');
        } elseif ($this->isSubDialog()) {
            return parent::getNoExistsMessage();
        }
    }

    /**
     * @return string
     */
    protected function createDialogTitle()
    {
        if ($this->isSubDialog()) {
            $search_key = explode('_', $this->getSubPrimaryKey());
            $line_prefix = $search_key[0];
            $search_id = $search_key[1];
            switch ($line_prefix) {
                case self::LINE_PREFIX_GROUP:
                    $name = $this->uum->getGroup($search_id)->get('name');

                    return cb_msg('grn.grn', 'grn.member_list_dialog.title',
                        ['name' => $name, 'count' => $this->getUserCount()]);
                    break;
                case self::LINE_PREFIX_DYNAMIC_ROLE:
                case self::LINE_PREFIX_STATIC_ROLE:
                    $name = $this->uum->getStaticRole($search_id)
                                      ->get('foreign_key');

                    return cb_msg('grn.grn', 'grn.member_list_dialog.title',
                        ['name' => $name, 'count' => $this->getUserCount()]);
                    break;
            }
        } else {
            $title_member = cb_msg('grn.bulletin',
                'user_list_dialog_title_member',
                [
                    'role_count'  => $this->getRoleCount(),
                    'group_count' => $this->getGroupCount(),
                    'user_count'  => $this->getUserCount()
                ]);
            switch ($this->security_model) {
                case 'grant':
                    $title_prefix = cb_msg('grn.bulletin',
                        'user_list_dialog_title_authority_read_permit');
                    break;
                case 'revoke':
                    $title_prefix = cb_msg('grn.bulletin',
                        'user_list_dialog_title_authority_read_deny');
                    break;
            }

            return $title_prefix . $title_member;
        }
    }

    /**
     * @param bool                  $include_search
     * @param GRN_Bulletin_Category $category
     */
    private function getTargetMembers($include_search, $category)
    {
        require_once('bulletin/access.csp');
        $am = \GRN_Bulletin_AccessManager::getInstance();
        $this->security_model = $am->getSecurityModelString($category);
        require_once('grn/access_resources.csp');

        // Search
        $is_search = false;
        $search_hit_user_ids = [];
        if ($this->isSearch() && $include_search) {
            $search_hit_user_ids = $this->searchIncludeUsers("");
            $is_search = true;
            $target_classes = [self::CLASS_TYPE_USER => null];
        } else {
            $target_classes = [
                self::CLASS_TYPE_DYNAMIC_ROLE => null,
                self::CLASS_TYPE_STATIC_ROLE  => null,
                self::CLASS_TYPE_GROUP        => null,
                self::CLASS_TYPE_USER         => null
            ];
        }

        $targets = $am->getTargets($category, $target_classes);
        foreach ($targets as $class_type => $accesses) {
            switch ($class_type) {
                case self::CLASS_TYPE_USER:
                    $this->addDisplayUsers($accesses, $is_search,
                        $search_hit_user_ids);
                    break;
                case self::CLASS_TYPE_GROUP:
                    $this->addDisplayGroups($accesses);
                    break;
                case self::CLASS_TYPE_STATIC_ROLE:
                    $this->addStaticRoles($accesses);
                    break;
                default:
                    $this->addDynamicRoles($accesses);
                    break;
            }
        }
    }

    /**
     * @param array $accesses
     * @param bool  $is_search
     * @param array $search_hit_user_ids
     */
    private function addDisplayUsers(
        $accesses,
        $is_search,
        $search_hit_user_ids
    ) {
        foreach ($accesses as $id => $authorities) {
            if ( ! $this->hasReadAuthority($authorities)) {
                continue;
            }

            if ($is_search) {
                if (in_array($id, $search_hit_user_ids)) {
                    $this->addUser($id);
                }
            } else {
                $this->addUser($id);
            }
        }
    }

    /**
     * @param array $accesses
     */
    private function addDisplayGroups($accesses)
    {
        foreach ($accesses as $id => $authorities) {
            if ( ! $this->hasReadAuthority($authorities)) {
                continue;
            }

            $this->addGroup($id);
        }
    }

    /**
     * @param array $accesses
     */
    private function addStaticRoles($accesses)
    {
        foreach ($accesses as $id => $authorities) {
            if ( ! $this->hasReadAuthority($authorities)) {
                continue;
            }

            $this->addStaticRole($id);
        }
    }

    /**
     * @param array $accesses
     */
    private function addDynamicRoles($accesses)
    {
        foreach ($accesses as $id => $authorities) {
            if ( ! $this->hasReadAuthority($authorities)) {
                continue;
            }

            if ($id == self::ROLE_ID_EVERYONE
                || $id == self::ROLE_ID_LOGINUSER
            ) {
                $this->addDynamicRole($id, false);
            } else {
                $this->addDynamicRole($id);
            }
        }
    }

    /**
     * @param $authorities
     *
     * @return bool
     */
    private function hasReadAuthority($authorities)
    {
        return $authorities[self::AUTHORITY_TYPE_READ] == 1;
    }
}
