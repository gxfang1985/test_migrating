<?php

/**
 * Application for DezieLink.
 *
 * @author  Huy Nguyen 2009/02
 * @version 1.0
 * @package grn.dezielink
 */

require_once('grn/application.csp');
require_once('dezielink/resources.csp');

class GRN_DezieLink_Application extends GRN_ApplicationBase
{
    function __construct()
    {
        parent::__construct(GRN_CONNECTOR_APPLICATION_ID);
    }

    public function initialize()
    {
        parent::initialize();

        // Remove Sync User schedule(DezieLink)
        require_once('dezielink/system_logic.csp');
        $system_logic_dz = GRN_DezieLink_SystemLogic::getInstance();
        $system_logic_dz->unregisterSyncUserEvent();

        // Set default value for expire time of portlet cache
        $system_logic_dz->setPortletCacheExpire(GRN_DZLK_PORTLET_CACHE_EXPIRE_DEFAULT_VALUE);
        unset($system_logic_dz);

        // Remove Sync User schedule(OfficeLink)
        require_once('dezielink/system_logic.csp');
        $system_logic_of = GRN_OfficeLink_SystemLogic::getInstance();
        $system_logic_of->unregisterSyncUserEvent();
        unset($system_logic_of);

        // Remove OfficeLink System Profile
        cb_get_system_profile(GRN_OFLK_MODULE_ID
                              . '.system')->removeAttributes();
    }

    /**
     * @return array
     */
    function getSystemConfigArray()
    {
        $config = [
            [
                'page' => 'dezielink/system/dz_link_view',
                'icon' => 'dezie_coop32'
            ],
            [
                'page' => 'dezielink/system/of_link_view',
                'icon' => 'office_coop32'
            ]
        ];

        return ['dz_link_config' => $config];
    }

    /**
     * @return array
     */
    function &getPortletList()
    {
        require_once('dezielink/system_logic.csp');
        $dezie_system_logic = GRN_DezieLink_SystemLogic::getInstance();
        $ret = [];
        require_once(cb_basedir()
                     . '/code/plugin/grn/common/authentication/authenticate/cybozu.csp');
        $auth_v2
            = plugin_grn_common_authentication_authenticate_cybozu::static_getV2AuthMethod();
        if (( ! is_null($auth_v2))
            && (strcmp($auth_v2->get('is_active'), '1') === 0)
        ) {
            // check DezieLink application and portlet availble 
            if ($dezie_system_logic->getConnectorAvailable()
                && $dezie_system_logic->getPortletAvailable()
            ) {
                $portlet = [
                    'name'             => $this->getName(),
                    'type'             => 'grn.dezielink.portlet',
                    'version'          => '1.0',
                    'set_template'     => 'dezielink/portlet/settings.csp',
                    'command_template' => 'dezielink/portlet/command_settings.csp',
                    'view_template'    => 'dezielink/portlet/view.csp'
                ];
                $ret = [$portlet];
            }
        }

        return $ret;
    }

    function cleanup()
    {
        $this->_deletePorletCache();
    }

    function _deletePorletCache()
    {
        global $G_container_base;

        // get DB connection
        require_once('grn/application.csp');
        $app_locator = GRN_ApplicationLocator::instance();
        $portal_db =& $app_locator->getConnection('portal');
        $dzlink_db =& $app_locator->getConnection('dezielink');

        // get list of Dezie porlet
        $query = 'SELECT pl._id FROM tab_grn_portal_portletlayout pl ' .
                 'INNER JOIN tab_grn_portal_portlet p ON pl.col_portlet = p._id '
                 .
                 'WHERE p.col_type="grn.dezielink.portlet"';

        $result = $portal_db->query($query);
        if ($portal_db->query($query) === false) {
            // throw query error
            $portal_db->throwError(['query' => 'query failed: ' . $query]);
        }

        $dz_portlet_ids = [];
        $count = $portal_db->num_rows($result);
        for ($i = 0; $i < $count; $i++) {
            $row = $portal_db->fetch_assoc($result);
            $dz_portlet_ids[] = $row['_id'];
        }

        $portal_db->free_result($result);

        // detele cache of Dezie porlet not in use
        $query = 'DELETE FROM tab_grn_dezielink_porlet_cache';
        if ($count > 0) {
            $conditions = implode(',', $dz_portlet_ids);
            $query .= ' WHERE col_portlet NOT IN (' . $conditions . ')';
        }
        if ($dzlink_db->query($query) === false) {
            // throw query error
            $dzlink_db->throwError(['query' => 'query failed: ' . $query]);
        }
    }

    /**
     * @param  object CB_User $user
     *
     * @return bool
     */
    public function isAvailableFor($user)
    {
        if (defined('ON_FOREST')) {
            return false;
        }

        return parent::isAvailableFor($user);
    }
}


