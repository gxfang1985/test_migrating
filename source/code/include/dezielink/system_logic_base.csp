<?php

/**
 * Dezie/Office Link System Logic Base
 */

require_once('fw/profile.csp');
require_once('dezielink/resources.csp');


/**
 * Class For Dezie/Office Link System Logic Base
 */
class GRN_Connector_SystemLogicBase extends CB_ModuleBase
{
    protected $_module_id;

    protected $_available;

    protected $_task_name;

    protected $_task_file;

    function __construct()
    {
        parent::__construct($this->_module_id . '.system');
    }

    /**
     * @return GRN_Connector_SystemLogicBase
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_Connector_SystemLogicBase();
        }

        return $_instance;
    }

    /**
     * @param CB_Profile $profile
     * @param string     $profile_key
     *
     * @return bool
     */
    private function createAttribute(& $profile, $profile_key)
    {
        if ( ! is_a($profile, 'CB_Profile')) {
            return false;
        }

        return $profile->createAttribute($profile_key, '');
    }

    /**
     * @param CB_Profile $profile
     * @param string     $profile_key
     * @param string     $value
     *
     * @return bool
     */
    private function updateAttribute(& $profile, $profile_key, $value)
    {
        $temp = null;
        $ret = $profile->getAttribute($profile_key, $temp);

        if ($ret === false) {
            $ret = $this->createAttribute($profile, $profile_key);
            if ($ret === false) {
                return false;
            }
        }

        return $profile->updateAttribute($profile_key, $value);
    }

    /**
     * @param CB_User $creator Creator Of Configure Dezie/Office Connector
     *
     * @return bool
     */
    public function setCreator(CB_User $creator)
    {
        $profile = $this->getSystemProfile();

        $creation_info = [
            'user'  => [
                'uid'          => $creator->getOID(),
                'foreign_key'  => $creator->get('foreign_key'),
                'display_name' => $creator->get('display_name')
            ],
            'ctime' => time(),
        ];

        return $this->updateAttribute($profile, GRN_CONNECTOR_CREATION_INFO,
            $creation_info);
    }

    /**
     * @return bool|array  $value  Creator Data Array Of Configure Dezie/Office Connector
     */
    public function getCreator()
    {
        $profile = $this->getSystemProfile();

        $value = null;
        $ret = $profile->getAttribute(GRN_CONNECTOR_CREATION_INFO, $value);
        if ( ! $ret) {
            return false;
        }

        $ctime = new CB_TimeStampEx();
        $ctime->unix_ts = $value['ctime'];
        $value['ctime'] = $ctime;

        return $value;
    }

    /**
     * @param CB_User $modifier Modifier Of Configure Dezie/Office Connector
     *
     * @return bool
     */
    public function setModifier(CB_User $modifier)
    {
        $profile = $this->getSystemProfile();

        $modification_info = [
            'user'  => [
                'uid'          => $modifier->getOID(),
                'foreign_key'  => $modifier->get('foreign_key'),
                'display_name' => $modifier->get('display_name')
            ],
            'mtime' => time()
        ];

        return $this->updateAttribute($profile, GRN_CONNECTOR_MODIFICATION_INFO,
            $modification_info);
    }

    /**
     * @return bool|array  $value  Modifier Data Array Of Configure Dezie/Office Connector
     */
    public function getModifier()
    {
        $profile = $this->getSystemProfile();

        $value = null;
        $ret = $profile->getAttribute(GRN_CONNECTOR_MODIFICATION_INFO,
            $value);
        if ( ! $ret) {
            return false;
        }

        $mtime = new CB_TimeStampEx();
        $mtime->unix_ts = $value['mtime'];
        $value['mtime'] = $mtime;

        return $value;
    }

    /**
     * @param string $url
     *
     * @return bool
     */
    public function setURL($url)
    {
        $profile = $this->getSystemProfile();

        return $this->updateAttribute($profile, GRN_CONNECTOR_URL, $url);
    }

    /**
     * @return bool|string  $value  URL
     */
    public function getURL()
    {
        $profile = $this->getSystemProfile();

        $value = null;
        $ret = $profile->getAttribute(GRN_CONNECTOR_URL, $value);
        if ( ! $ret) {
            return false;
        }

        return $value;
    }

    /**
     * @param bool $flag true: available, false: not available
     *
     * @return bool
     */
    public function setPortletAvailable($flag)
    {
        assert(is_bool($flag));
        $profile = $this->getSystemProfile();

        return $this->updateAttribute($profile, GRN_DZLK_PORTLET_AVAILABLE,
            $flag);
    }

    /**
     * @return bool  $value  true: available, false: not available
     */
    public function getPortletAvailable()
    {
        $profile = $this->getSystemProfile();

        $value = null;
        $ret = $profile->getAttribute(GRN_DZLK_PORTLET_AVAILABLE, $value);
        if ( ! $ret) {
            return false;
        }

        return $value;
    }

    /**
     * @param bool $flag true: available, false: not available
     *
     * @return bool
     */
    public function setSyncUserAvailable($flag)
    {
        assert(is_bool($flag));
        $profile = $this->getSystemProfile();

        return $this->updateAttribute($profile,
            GRN_CONNECTOR_SYNC_USER_AVAILABLE, $flag);
    }

    /**
     * @return bool  $value  true: available, false: not available
     */
    public function getSyncUserAvailable()
    {
        $profile = $this->getSystemProfile();

        $value = null;
        $ret = $profile->getAttribute(GRN_CONNECTOR_SYNC_USER_AVAILABLE,
            $value);
        if ( ! $ret) {
            return false;
        }

        return $value;
    }

    /**
     * @param array $period                 Array: ['type']  => int   period type,
     *                                      ['value'] => int
     *
     * @return bool
     */
    public function setSyncUserPeriod($period)
    {
        $profile = $this->getSystemProfile();

        return $this->updateAttribute($profile, GRN_CONNECTOR_SYNC_USER_PERIOD,
            $period);
    }

    /**
     * @return bool|array  $value  Array: ['type']  => int   period type,
     *                                    ['value'] => int
     */
    public function getSyncUserPeriod()
    {
        $profile = $this->getSystemProfile();

        $value = null;
        $ret = $profile->getAttribute(GRN_CONNECTOR_SYNC_USER_PERIOD, $value);
        if ( ! $ret) {
            return false;
        }

        return $value;
    }

    /**
     * @param CB_Time $time
     *
     * @return bool
     */
    public function setSyncUserTime(CB_Time $time)
    {
        $profile = $this->getSystemProfile();

        return $this->updateAttribute($profile, GRN_CONNECTOR_SYNC_USER_TIME,
            $time);
    }

    /**
     * @return bool|CB_Time  $value
     */
    public function getSyncUserTime()
    {
        $profile = $this->getSystemProfile();

        $value = null;
        $ret = $profile->getAttribute(GRN_CONNECTOR_SYNC_USER_TIME, $value);
        if ( ! $ret) {
            return false;
        }

        return $value;
    }

    /**
     * @param bool $flag true: available, false: not available
     *
     * @return bool
     */
    public function setConnectorAvailable($flag)
    {
        assert(is_bool($flag));
        $profile = $this->getSystemProfile();

        return $this->updateAttribute($profile, $this->_available, $flag);
    }

    /**
     * @return bool  $value  true: available, false: not available
     */
    public function getConnectorAvailable()
    {
        $profile = $this->getSystemProfile();

        $value = null;
        $ret = $profile->getAttribute($this->_available, $value);
        if ( ! $ret) {
            return false;
        }

        return $value;
    }

    /**
     * @param array   $period
     * @param CB_Time $time
     *
     * @return bool
     */
    public function registerSyncUserEvent($period, CB_Time $time)
    {
        assert(isset($period['type']));

        require_once('fw/schedule.csp');
        $scheduling = CB_SchedulingService::getInstance();

        $command = $time->minute . ' ' . $time->hour . ' ';

        $args = null;
        switch ($period['type']) {
            case GRN_CONNECTOR_SYNC_USER_PERIOD_TYPE_DAILY:
                $command .= '* * *';
                break;
            case GRN_CONNECTOR_SYNC_USER_PERIOD_TYPE_WEEKLY:
                $command .= '* * ' . $period['value'];
                break;
            case GRN_CONNECTOR_SYNC_USER_PERIOD_TYPE_MONTHLY:
                if (intval($period['value']) === 0) {
                    $command .= '* * *';
                    $args = 'last_day_of_month';
                } else {
                    $command .= $period['value'] . ' * *';
                }
                break;
            default:
                // unknown period type
                assert(false);

                return false;
        }

        return $scheduling->registerRepeatEvent($this->_task_name,
            $this->_task_file,
            $command, $args);
    }

    /**
     * @return bool
     */
    public function unregisterSyncUserEvent()
    {
        require_once('fw/schedule.csp');
        $scheduling = CB_SchedulingService::getInstance();

        return $scheduling->unregisterEvent($this->_task_name);
    }

    /**
     * @param int $value Expire time of portlet cache in minute
     *
     * @return bool
     */
    public function setPortletCacheExpire($value)
    {
        $profile = $this->getSystemProfile();

        return $this->updateAttribute($profile, GRN_DZLK_PORTLET_CACHE_EXPIRE,
            $value);
    }

    /**
     * @return int  $value
     */
    public function getPortletCacheExpire()
    {
        $profile = $this->getSystemProfile();

        $value = null;
        $ret = $profile->getAttribute(GRN_DZLK_PORTLET_CACHE_EXPIRE, $value);
        if ( ! $ret) {
            return GRN_DZLK_PORTLET_CACHE_EXPIRE_DEFAULT_VALUE;
        }

        return $value;
    }

    /**
     * @return bool  $retval
     */
    public function isUsingPortletCache()
    {
        $retval = ! ($this->getPortletCacheExpire() == 0);

        return $retval;
    }

    /**
     * @param GRN_Authentication_Login_Authenticate $authenticate_method
     *
     * @return bool
     */
    private function isV2AuthMethod(&$authenticate_method)
    {
        if (strcmp($authenticate_method->get(GRN_AUTH_PROPERTY_DRIVER_TYPE),
                'grn.common.authentication.authenticate.cybozu') === 0
        ) {
            $config
                = cb_unserialize($authenticate_method->get(GRN_AUTH_PROPERTY_DRIVER_SETTINGS),
                ["allowed_classes" => false]);
            if (isset($config['cookie_mode'])
                && strcmp($config['cookie_mode'], '1') === 0
            ) {
                return true;
            }
        }

        return false;
    }

    /**
     * @param GRN_Authentication_Login_Authenticate $authenticate_method authentication method
     * @param bool                                  $force_off           true: force remove sync user scheduling service
     */
    public function onOffAutoSyncUser(&$authenticate_method, $force_off = false)
    {
        if ($this->isV2AuthMethod($authenticate_method)) {
            if ($force_off) {
                $this->unregisterSyncUserEvent();

                return;
            }

            if ($this->getConnectorAvailable()
                && strcmp($authenticate_method->get(GRN_AUTH_PROPERTY_IS_ACTIVE),
                    '1') === 0
            ) {
                $this->registerSyncUserEvent($this->getSyncUserPeriod(),
                    $this->getSyncUserTime());
            } else {
                $this->unregisterSyncUserEvent();
            }
        }
    }

    /**
     * Get V2Auth Available
     *
     * @return bool
     */
    public function getAuthAvailable()
    {
        require_once(cb_basedir()
                     . '/code/plugin/grn/common/authentication/authenticate/cybozu.csp');
        $auth_v2
            = plugin_grn_common_authentication_authenticate_cybozu::static_getV2AuthMethod();
        if (( ! is_null($auth_v2))
            && (strcmp($auth_v2->get('is_active'), '1') === 0)
        ) {
            return true;
        } else {
            return false;
        }
    }


    /**
     * @param array   $sync_period
     * @param CB_Time $sync_time
     *
     * @return array  $condition
     */
    public function getPeriodDataCondition($sync_period, $sync_time)
    {
        $condition = [
            'day'       => '',
            'prefix'    => '',
            'suffix'    => '',
            'separator' => '',
            'time'      => ''
        ];

        if (is_array($sync_period)) {
            switch ($sync_period['type']) {
                case GRN_CONNECTOR_SYNC_USER_PERIOD_TYPE_DAILY:
                    $condition['prefix'] = cb_msg('grn.dezielink', 'everyday');
                    break;
                case GRN_CONNECTOR_SYNC_USER_PERIOD_TYPE_WEEKLY:
                    $condition['prefix'] = cb_msg('grn.dezielink', 'everyweek');
                    switch (intval($sync_period['value'])) {
                        case 0:
                            $condition['suffix'] = cb_msg('grn.dezielink',
                                'sunday');
                            break;
                        case 1:
                            $condition['suffix'] = cb_msg('grn.dezielink',
                                'monday');
                            break;
                        case 2:
                            $condition['suffix'] = cb_msg('grn.dezielink',
                                'tuesday');
                            break;
                        case 3:
                            $condition['suffix'] = cb_msg('grn.dezielink',
                                'wednesday');
                            break;
                        case 4:
                            $condition['suffix'] = cb_msg('grn.dezielink',
                                'thursday');
                            break;
                        case 5:
                            $condition['suffix'] = cb_msg('grn.dezielink',
                                'friday');
                            break;
                        case 6:
                            $condition['suffix'] = cb_msg('grn.dezielink',
                                'saturday');
                            break;
                    }
                    break;
                case GRN_CONNECTOR_SYNC_USER_PERIOD_TYPE_MONTHLY:
                    if ($sync_period['value'] == 0) {
                        $condition['prefix'] = cb_msg('grn.dezielink',
                            'everylastdayofmonth');
                    } else {
                        $condition['prefix'] = cb_msg('grn.dezielink',
                            'everymonth');
                        $condition['suffix'] = cb_msg('grn.dezielink',
                            'day');
                        $condition['day'] = (string)$sync_period['value'];
                        $condition['separator'] = ' ';
                    }
                    break;
            }
        }

        if (is_a($sync_time, 'CB_Time')) {
            $condition['time'] = cb_date_format('TimeShort_HM',
                $sync_time);
            $condition['separator'] = ' ';
        }

        return $condition;
    }

    /**
     * @return bool
     */
    public function isLastDayOfMonth()
    {
        $ts = new CB_TimeStampEx();
        $ts->unix_ts = time();

        $today = $ts->getDate();
        $lastday = $ts->getDate();

        $lastday->moveMonths(1);
        $lastday->day = 1;
        $lastday->moveDays(-1);

        $ret = ($today->day === $lastday->day);

        return $ret;
    }
}
