<?php

/**
 * DezieLink Portlet Cacher
 *
 * @author  Huy Nguyen 2009/04
 * @package grn.dezielink
 */

require_once('dezielink/table.csp');

class GRN_DezieLink_Porlet_Cacher
{
    var $_table_info = null;
    var $_cached_rows = [];

    function __construct()
    {
        $app_locator = GRN_ApplicationLocator::instance();
        $tm
            =& $app_locator->getTableManager(GRN_CONNECTOR_APPLICATION_ID);
        $this->_table_info =& $tm->getTableInfo('GRN_DezieLink_Porlet_Cache');
    }

    private static $_instance = null;

    /**
     * @return GRN_DezieLink_Porlet_Cacher
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Get portlet cache
     *
     * @param   CB_User                  $user
     * @param   GRN_Portal_PortletLayout $portlet
     * @param   int                      $expired_time expire time in minute
     *
     * @return  string                      cached content of portlet
     */
    function get(&$user, &$portlet, $expired_time = 5)
    {
        $retval = null;

        if ( ! is_null($row =& $this->_getRow($user, $portlet))) {
            $cache_ts = $row->get('cachetime');
            if ($expired_time * 60 >= (time() - $cache_ts->unix_ts)) {
                $retval = $row->get('data');
            }
        }

        return $retval;
    }

    /**
     * Save portlet to cache
     *
     * @param   CB_User                  $user
     * @param   GRN_Portal_PortletLayout $portlet
     * @param   string                      content of portlet
     */
    function set(&$user, &$portlet, $data)
    {
        if (is_null($row =& $this->_getRow($user, $portlet))) {
            $row =& $this->_table_info->newRow();
        }

        $row->set('user', $user);
        $row->set('portlet', $portlet->getOID());
        $row->set('data', $data);

        $ts = new CB_TimeStamp();
        $ts->unix_ts = time();
        $row->set('cachetime', $ts);
    }

    /**
     * Clear cache of specified porlet
     *
     * @param   GRN_Portal_PortletLayout $portlet
     */
    function clearByPortlet(&$portlet)
    {
        $rowset = new CB_RowSet($this->_table_info);
        $conditions = $rowset->queryf("col_portlet = '@S'", $portlet->getOID());
        $rowset->addCondition($conditions);

        return $rowset->deleteAllMatched();
    }

    /**
     * Clear cache of all portlets
     */
    function clearAll()
    {
        $db =& $this->_table_info->getDBConnection();
        $query = 'DELETE FROM tab_' . $this->_table_info->getTableName();
        if ($db->query($query) === false) {
            //Throw Query Error
            $db->throwError(['query' => 'query failed: ' . $query]);
        }
    }

    /**
     * Get portlet cache row
     *
     * @access  private
     *
     * @param   CB_User                  $user
     * @param   GRN_Portal_PortletLayout $portlet
     *
     * @return  CB_Row                      row object of portlet cache
     */
    function _getRow($user, $portlet)
    {
        $row = null;
        $uid = $user->getOID();
        $plid = $portlet->getOID();

        if (array_key_exists($uid, $this->_cached_rows)
            && array_key_exists($plid, $this->_cached_rows[$uid])
        ) {
            $row =& $this->_cached_rows[$uid][$plid];

            return $row;
        }

        $rowset = new CB_RowSet($this->_table_info);

        $conditions = [];
        $conditions[] = $rowset->queryf("col_user = '@S'", $uid);
        $conditions[] = $rowset->queryf("col_portlet = '@S'", $plid);

        $rowset->addCondition(implode(' AND ', $conditions));
        $rowset->limit(0, 1);

        if ( ! is_null($row = $rowset->iterate())) {
            $this->_cached_rows[$uid][$plid] = clone $row;
        }

        return $row;
    }

}

