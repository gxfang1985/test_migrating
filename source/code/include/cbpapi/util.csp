<?php

/**
 * Convert ISO8601 datetime format to CB_DateTime
 */
function grn_cbpapi_parse_iso8601($str_datetime)
{
    require_once('util_api/util.csp');

    return grn_util_api_parse_iso8601($str_datetime);
}

/**
 * Convert datetime to ISO8601
 *
 * @param   $datetime           mixed   support following types:
 *                              CB_DateTime, CB_DateTimeEx, CB_TimeStamp, CB_TimeStampEx
 * @param   $UTC                boolean TRUE: return UTC format, e.g: 2009-05-30T10:20:00Z
 *                              FALSE: return orther timezone format, e.g: 2009-07-03T16:05:27+09:00
 * @param   $timezone           string
 */
function grn_cbpapi_iso8601($datetime, $UTC = true, $timezone = null)
{
    require_once('util_api/util.csp');

    return grn_util_api_iso8601($datetime, $UTC, $timezone);
}

function grn_cbpapi_parse_item_versions(&$request, $item_name)
{
    $result = [];
    if ( ! isset($request['children'])) {
        return $result;
    }

    $params = &$request['children'];

    foreach (array_keys($params) as $key) {
        if (strcmp($params[$key]['node_name'], $item_name) == 0) {
            $item =& $params[$key];

            if ( ! isset($item['attributes']['id'])) {
                require_once('cbpapi/error_code.csp');
                cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
                    ['param' => 'id']);
            } else {
                require_once('cbpapi/error_code.csp');
                cbpapi_trim_check($item['attributes']['id'],
                    E_GRN_CBPAPI_EMPTY_PARAMETER_VALUE, 'id');
            }
            if ( ! isset($item['attributes']['version'])) {
                require_once('cbpapi/error_code.csp');
                cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
                    ['param' => 'version']);
            } else {
                require_once('cbpapi/error_code.csp');
                cbpapi_trim_check($item['attributes']['version'],
                    E_GRN_CBPAPI_EMPTY_PARAMETER_VALUE, 'version');
            }
            require_once('fw/string_util.csp');
            $item_id = cb_trim($item['attributes']['id']);
            $result[$item_id] = $item['attributes'];
        }
    }

    return $result;
}

function grn_cbpapi_compare_item_versions(
    $item_versions,
    $candidate_item_versions
) {
    assert('is_array($item_versions)');
    assert('is_array($candidate_item_versions)');

    $result = [];

    foreach (
        array_intersect(array_keys($candidate_item_versions),
            array_keys($item_versions)) as $key
    ) {
        $span = intval($candidate_item_versions[$key]['version'])
                - intval($item_versions[$key]['version']);
        if ($span != 0) {
            $result[$key] = $candidate_item_versions[$key];
            $result[$key]['operation'] = 'modify';
        }
    }

    foreach (
        array_diff(array_keys($item_versions),
            array_keys($candidate_item_versions)) as $key
    ) {
        $result[$key] = $item_versions[$key];
        $result[$key]['operation'] = 'remove';
        $result[$key]['version'] = '0';
    }

    foreach (
        array_diff(array_keys($candidate_item_versions),
            array_keys($item_versions)) as $key
    ) {
        $result[$key] = $candidate_item_versions[$key];
        $result[$key]['operation'] = 'add';
    }

    return $result;
}

function grn_cbpapi_get_users_by_id_list($user_id_list)
{
    if ( ! is_array($user_id_list) || count($user_id_list) == 0) {
        cb_throw_error(E_GRN_USER_NOT_FOUND);
    }

    require_once('cbpapi/uum_logic.csp');
    $logic = GRN_CBPApi_Uum_Logic::getInstance();

    return $logic->getUsers($user_id_list);
}

function _grn_cbpapi_create_user_info($user)
{
    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');

    require_once('grn/controller.csp');
    $controller_util = new GRN_ControllerUtil();
    $builtin_items = $controller_util->listBuiltinItems($user);

    $user_info = [];
    $attributes = [];

    //ATTRIBUTES
    $attributes['key'] = $user->getOID();
    $attributes['name'] = $user->get('display_name');
    $attributes['login_name'] = $user->get('foreign_key');
    $attributes['order'] = $user->get('position');

    //get version
    $mtime = $user->get('mtime');
    $attributes['version'] = $mtime->unix_ts;

    if ($user->get('sort_key')) {
        $attributes['reading'] = $user->get('sort_key');
    }
    if ($user->get('url')) {
        $attributes['url'] = $user->get('url');
    }
    if ($user->get('email_address')) {
        $attributes['email'] = $user->get('email_address');
    }
    if ($user->get('telephone_number')) {
        $attributes['phone'] = $user->get('telephone_number');
    }
    if ($user->get('birthdate')) {
        $attributes['birth_date'] = $user->get('birthdate');
    }
    if ($user->get('description')) {
        $attributes['description'] = $user->get('description');
    }

    //get status
    if ($user->get('deleted')) {
        $attributes['status'] = '2';
    } elseif ( ! ($uum->isActiveUser($user->getOID()))) {
        $attributes['status'] = '1';
    } else {
        $attributes['status'] = '0';
    }

    //get title
    if ( ! ($user->get('deleted'))) {
        if (array_key_exists('value', $builtin_items['post'])) {
            $attributes['title'] = $builtin_items['post']['value'];
        }
    }

    //get primary_group
    require_once('grn/org_util.csp');
    $primary_group = $uum->getUserPrimaryGroupInfo($user->getOID());
    if ($primary_group !== false) {
        $attributes['primary_organization'] = $primary_group['_id'];
    }

    $user_info['attributes'] = $attributes;


    //ORGANIZATION
    $groups = $uum->getUserGroupsInfo($user->getOID());
    if (is_array($groups) && count($groups) > 0) {
        foreach (array_keys($groups) as $key) {
            $user_info['groups'][$key] = $groups[$key]['_id'];
        }
    }

    //PHOTO
    if ( ! ($user->get('deleted'))) {
        if (array_key_exists('value', $builtin_items['image'])) {
            $image = [];

            //get content
            $fid = $builtin_items['image']['value']['oid'];
            require_once('grn/file.csp');
            $file_manager = GRN_FileManager::getInstance();
            $table_info = $file_manager->getFileTable();
            $file = $table_info->getRow($fid);
            if ( ! is_object($file) || ! is_a($file, 'GRN_File')) {
                cb_throw_error(E_GRN_USERFILE_NOT_FOUND);
            }
            $body = $file->getCurrentBody();
            $image['id'] = $fid;
            $image['version'] = $mtime->unix_ts;
            $image['name'] = $builtin_items['image']['value']['name'];
            $image['size'] = $body->get('size');
            $image['mime_type'] = $builtin_items['image']['value']['mime'];

            $user_info['photo'] = $image;
        }
    }

    $user_info['builtin_items'] = $builtin_items;

    return $user_info;
}

/**
 * Get user info by uid.
 */
function grn_cbpapi_get_user_by_id($user_id, $include_deleted = true)
{
    if (0 == strlen($user_id) || ! is_numeric($user_id)) {
        cb_throw_error(E_GRN_USER_NOT_FOUND);
    }

    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');
    $user = $uum->getUser($user_id, true);

    if ( ! is_object($user) || ! is_a($user, 'CB_User')) {
        cb_throw_error(E_GRN_USER_NOT_FOUND);
    }

    if ($user->get('deleted') && ! $include_deleted) {
        return false;
    }

    return _grn_cbpapi_create_user_info($user);
}

/**
 * Get user info by uid.
 */
function grn_cbpapi_get_user_by_login_name($login_name)
{
    if (0 == strlen($login_name)) {
        cb_throw_error(E_GRN_USER_NOT_FOUND);
    }

    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');
    $user = $uum->getUserByForeignKey($login_name);

    if ( ! is_object($user) || ! is_a($user, 'CB_User')) {
        cb_throw_error(E_GRN_USER_NOT_FOUND);
    }
    $user_id = $user->getOID();

    require_once('grn/controller.csp');
    $controller_util = new GRN_ControllerUtil();
    $builtin_items = $controller_util->listBuiltinItems($user);

    $user_info = [];
    $attributes = [];

    //ATTRIBUTES
    $attributes['key'] = $user_id;
    $attributes['name'] = $user->get('display_name');
    $attributes['login_name'] = $user->get('foreign_key');
    $attributes['order'] = $user->get('position');

    //get version
    $mtime = $user->get('mtime');
    $attributes['version'] = $mtime->unix_ts;

    if ($user->get('sort_key')) {
        $attributes['reading'] = $user->get('sort_key');
    }
    if ($user->get('url')) {
        $attributes['url'] = $user->get('url');
    }
    if ($user->get('email_address')) {
        $attributes['email'] = $user->get('email_address');
    }
    if ($user->get('telephone_number')) {
        $attributes['phone'] = $user->get('telephone_number');
    }
    if ($user->get('birthdate')) {
        $attributes['birth_date'] = $user->get('birthdate');
    }
    if ($user->get('description')) {
        $attributes['description'] = $user->get('description');
    }

    //get status
    if ($user->get('deleted')) {
        $attributes['status'] = '2';
    } elseif ( ! ($uum->isActiveUser($user_id))) {
        $attributes['status'] = '1';
    } else {
        $attributes['status'] = '0';
    }

    //get title
    if ( ! ($user->get('deleted'))) {
        if (array_key_exists('value', $builtin_items['post'])) {
            $attributes['title'] = $builtin_items['post']['value'];
        }
    }

    //get primary_group
    require_once('grn/org_util.csp');
    $primary_group = $uum->getUserPrimaryGroupInfo($user_id);
    if ($primary_group !== false) {
        $attributes['primary_organization'] = $primary_group['_id'];
    }

    $user_info['attributes'] = $attributes;


    //ORGANIZATION
    $groups = $uum->getUserGroupsInfo($user_id);
    if (is_array($groups) && count($groups) > 0) {
        foreach (array_keys($groups) as $key) {
            $user_info['groups'][$key] = $groups[$key]['_id'];
        }
    }

    //PHOTO
    if ( ! ($user->get('deleted'))) {
        if (array_key_exists('value', $builtin_items['image'])) {
            $image = [];

            //get content
            $fid = $builtin_items['image']['value']['oid'];
            require_once('grn/file.csp');
            $file_manager = GRN_FileManager::getInstance();
            $table_info = $file_manager->getFileTable();
            $file = $table_info->getRow($fid);
            if ( ! is_object($file) || ! is_a($file, 'GRN_File')) {
                cb_throw_error(E_GRN_USERFILE_NOT_FOUND);
            }
            $body = $file->getCurrentBody();
            $image['id'] = $fid;
            $image['version'] = $mtime->unix_ts;
            $image['name'] = $builtin_items['image']['value']['name'];
            $image['size'] = $body->get('size');
            $image['mime_type'] = $builtin_items['image']['value']['mime'];

            $user_info['photo'] = $image;
        }
    }

    $user_info['builtin_items'] = $builtin_items;

    return $user_info;
}

/**
 * Create temp file in 'upload_tmp_dir' directory
 *
 * @param     array   file to upload.
 *                           Array: [name],
 *                           [mime_type],
 *                           [content],
 *                           [size]
 *
 * @return    array   file info
 */
function cbpapi_upload_file($file)
{
    $upload_error = UPLOAD_ERR_OK;
    $tmp_file_name = '';

    if ( ! isset($file['name']) || ! isset($file['content'])) {
        $upload_error = UPLOAD_ERR_NO_FILE;
    } else {
        $upload_dir = ini_get('upload_tmp_dir');
        if (empty($upload_dir)) {
            $upload_error = UPLOAD_ERR_NO_TMP_DIR;
        } else {
            $tmp_file_name = tempnam($upload_dir, 'tmp');
            $tmp_file = @fopen($tmp_file_name, 'wb');
            if ($tmp_file === false) {
                $upload_error = UPLOAD_ERR_CANT_WRITE;
            } else {
                $bytes = @fputs($tmp_file, base64_decode($file['content']));
                if ($bytes === false) {
                    $upload_error = UPLOAD_ERR_CANT_WRITE;
                } else {
                    $max_size = cbpapi_ini_get_upload_max_filesize();
                    if ( ! isset($file['size']) || ! is_numeric($file['size'])
                         || $file['size'] != $bytes
                    ) {
                        $file['size'] = $bytes;
                    }
                    if ($file['size'] > $max_size) {
                        $upload_error = UPLOAD_ERR_INI_SIZE;
                    }
                }
                @fclose($tmp_file);
            }
        }
    }

    // register temp file to global state for cleaning up later
    global $G_state_set;
    $upload_tmp_files = $G_state_set->get('cbpapi.upload_tmp_files');
    if ( ! is_array($upload_tmp_files)) {
        $upload_tmp_files = [];
    }
    $upload_tmp_files[] = $tmp_file_name;
    $G_state_set->set('cbpapi.upload_tmp_files', $upload_tmp_files);

    // create file info
    $file_info = [
        'name'     => @$file['name'],
        'type'     => @$file['mime_type'],
        'size'     => @$file['size'],
        'tmp_name' => $tmp_file_name,
        'error'    => $upload_error
    ];

    return $file_info;
}

/**
 * Clean up upload temp files
 * NOTICE: only use in "commit" plugin, and "error/hook" plugin.
 */
function cbpapi_cleanup_upload_temp_file()
{
    global $G_state_set;
    $upload_tmp_files = $G_state_set->get('cbpapi.upload_tmp_files');
    if (is_array($upload_tmp_files)) {
        foreach ($upload_tmp_files as $file) {
            @unlink($file);
        }
    }
}

/**
 * Return max upload file size in bytes
 */
function cbpapi_ini_get_upload_max_filesize()
{
    // get max file size in config file
    $max_size
        = ini_get('upload_max_filesize'); //e.g: 500K, 2M, 1G or 2048 (byte)
    if ( ! $max_size) {
        $max_size = '2M';
    }          //2 megabytes

    $KB = 1024;
    $MB = $KB * 1024;
    $GB = $MB * 1024;

    $type = strtoupper($max_size[strlen($max_size) - 1]);
    $value = intval(substr($max_size, 0, strlen($max_size) - 1));

    // convert value to bytes
    switch ($type) {
        case 'K':
            $max_size = $value * $KB;
            break;
        case 'M':
            $max_size = $value * $MB;
            break;
        case 'G':
            $max_size = $value * $GB;
            break;
        default:
            $max_size = intval($max_size);
    }

    return $max_size;
}

/**
 * Convert datetime from UTC timezone to local timezone.
 *
 * @param   $obj_date   CB_DateTime
 *
 * @return  $timestamp  CB_DateTime
 */
function grn_cbpapi_convert_utc_to_local($obj_date)
{
    require_once('util_api/util.csp');

    return grn_util_api_convert_utc_to_local($obj_date);
}

/**
 * Throw an error iff trimmed string of <var>$s</var> is empty.
 *
 * @param string $s          The string to be checked.
 * @param string $error_code Error code to be thrown.
 *
 * @return string            Trimmed string, if not empty.
 */
function cbpapi_trim_check($s, $error_code, $item)
{
    require_once('util_api/util.csp');

    return util_api_trim_check($s, $error_code, $item);
}


