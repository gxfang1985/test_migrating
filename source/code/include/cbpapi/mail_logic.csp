<?php
require_once('mail/mail.csp');
require_once('mail/resources.csp');

use grn\grn\access\service\AppAccess;

class GRN_CBPApi_Mail_Logic extends GRN_Mail_MailLogic
{
    /**
     * @return GRN_CBPApi_Mail_Logic
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_CBPApi_Mail_Logic();
        }

        return $_instance;
    }

    var $_dbconn = null;

    function &_getDBConnection()
    {
        if (is_null($this->_dbconn)) {
            $app_locator = GRN_ApplicationLocator::instance();
            $this->_dbconn = $app_locator->getConnection('mail');
        }

        return $this->_dbconn;
    }

    function getMailForViewByIds(&$login, $mail_ids)
    {
        if ( ! is_array($mail_ids) || count($mail_ids) <= 0) {
            return [];
        }
        $mails_for_view = [];
        foreach ($mail_ids as $key => $mail_id) {
            $mail_for_view = [];
            require_once('mail/utility.csp');
            require_once('fw/mail_message.csp');
            $utility = GRN_Mail_Utility::getInstance();
            $mail_logic = $utility->getMailLogic();
            $folder_logic = $utility->getFolderLogic();
            $mail_data = $this->getMailData($mail_id, true, true, false);
            // parse from           
            $from = array_key_exists('from', $mail_data)
                ? $mail_data['from'] : '';
            $from_list =& CB_MailAddress::static_parse_list([$from]);
            $from_address_view = [];
            foreach (array_keys($from_list) as $key) {
                $from_obj =& $from_list[$key];
                $from_name = $from_obj->name;
                $from_address = $from_obj->address;
                $from_address_view[$key] = [
                    'name'    => $from_name,
                    'address' => $from_address
                ];
            }

            // parse to           
            $to = array_key_exists('to', $mail_data)
                ? $mail_data['to'] : '';
            $to_list =& CB_MailAddress::static_parse_list([$to]);
            $to_address_view = [];
            foreach (array_keys($to_list) as $key) {
                $to_obj =& $to_list[$key];
                $to_name = $to_obj->name;
                $to_address = $to_obj->address;
                $to_address_view[$key] = [
                    'name'    => $to_name,
                    'address' => $to_address
                ];
            }

            // parse cc
            $cc = array_key_exists('cc', $mail_data)
                ? $mail_data['cc'] : '';
            $cc_list =& CB_MailAddress::static_parse_list([$cc]);
            $cc_address_view = [];
            foreach (array_keys($cc_list) as $key) {
                $cc_obj =& $cc_list[$key];
                $cc_name = $cc_obj->name;
                $cc_address = $cc_obj->address;
                $cc_address_view[$key] = [
                    'name'    => $cc_name,
                    'address' => $cc_address
                ];
            }

            // parse bcc
            $bcc = array_key_exists('bcc', $mail_data)
                ? $mail_data['bcc'] : '';
            $bcc_list =& CB_MailAddress::static_parse_list([$bcc]);
            $bcc_address_view = [];
            foreach (array_keys($bcc_list) as $key) {
                $bcc_obj =& $bcc_list[$key];
                $bcc_name = $bcc_obj->name;
                $bcc_address = $bcc_obj->address;
                $bcc_address_view[$key] = [
                    'name'    => $bcc_name,
                    'address' => $bcc_address
                ];
            }

            // parse confirmation_to
            $confirmation_to = array_key_exists('confirmation_to',
                $mail_data) ? $mail_data['confirmation_to'] : '';
            $confirmation_to_list
                =& CB_MailAddress::static_parse_list([$confirmation_to]);
            $confirmation_to_address_view = [];
            foreach (array_keys($confirmation_to_list) as $key) {
                $confirmation_to_obj =& $confirmation_to_list[$key];
                $confirmation_to_name
                    = $confirmation_to_obj->name;
                $confirmation_to_address
                    = $confirmation_to_obj->address;
                $confirmation_to_address_view[$key]
                    = [
                    'name'    => $confirmation_to_name,
                    'address' => $confirmation_to_address
                ];
            }

            $category_id = $mail_data['folder_id'];
            $folder_data = $folder_logic->getFolderData($category_id);
            $account_id = $folder_data['account_id'];
            require_once('cbpapi/util.csp');
            // send date
            $date = grn_cbpapi_iso8601($mail_data['send_ts']);

            $read = null;
            if ($mail_data['read_ts']->unix_ts != 0) {
                // read date
                $read = grn_cbpapi_iso8601($mail_data['read_ts']);
            }
            // mail draft
            $draft = $mail_data['draft'];
            if ($draft) {
                $draft = 'true';
            } else {
                $draft = 'false';
            }
            // mail body
            $data = $mail_data['data'];
            $files = [];
            if (array_key_exists('files', $mail_data)) {
                $files = $mail_data['files'];
            }
            $confirmation_status = array_key_exists('confirmation_status',
                $mail_data) ? $mail_data['confirmation_status'] : null;
            $is_sent_disposition_notification = null;
            if (isset($mail_data['confirmation_request'])
                && $mail_data['confirmation_request']
            ) {
                if (strncasecmp($confirmation_status, 'sent', 4) == 0) {
                    // 開封確認返信済み
                    $is_sent_disposition_notification = '1';
                }
                if (is_null($confirmation_status)
                    || strcasecmp($confirmation_status, 'opened') == 0
                ) {
                    // 送信しない
                    $is_sent_disposition_notification = '0';
                }
            }
            // メール情報
            $mail_for_view = [
                'aid'                              => $account_id,
                //user_acount_ID
                'cid'                              => $category_id,
                //category_ID
                'mid'                              => $mail_id,
                'from'                             => $from_address_view,
                'date'                             => $date,
                //送信日時
                'read'                             => $read,
                'version'                          => $mail_data['mtime']->unix_ts,
                'to'                               => $to_address_view,
                'cc'                               => $cc_address_view,
                'bcc'                              => $bcc_address_view,
                'subject'                          => $mail_data['subject'],
                'data'                             => $data,
                'draft'                            => $draft,
                'html_data'                        => $mail_data['html_data'],
                'sender'                           => $mail_data['sent'],
                'source'                           => $mail_data['source'],
                'status'                           => $mail_data['status'],
                'size'                             => $mail_data['size'],
                'files'                            => $files,
                'confirmation_request'             => $mail_data['confirmation_request'],
                'confirmation_to'                  => $confirmation_to_address_view,
                'confirmation_response'            => $mail_data['confirmation_response'],
                'is_sent_disposition_notification' => $is_sent_disposition_notification,
            ];

            $mails_for_view[$mail_id] = $mail_for_view;
        }

        return $mails_for_view;
    }

    /**
     * ユーザーのメールデータ一覧の取得
     *
     * @param   object $user           ユーザーオブジェクト
     * @param   object $start_ts       データ検索範囲の開始日時（この値自体を含む）。nullで指定なし。デフォルト:null
     * @param   object $last_ts        データ検索範囲の終了日時（この値自体は含まれない）。nullで指定なし。デフォルト:null
     * @param   array  $folder_id_list データ検索対象のフォルダIDのリスト。nullで指定なし。デフォルト:null
     *
     * @return  mixed   メールデータのリスト
     **/
    function getMailDataListByAPI(
        & $user,
        $start_ts,
        $last_ts = null,
        $folder_id_list = null
    ) {
        if ( ! AppAccess::isAppAvailableExternalAccess(GRN_MAIL_APP_ID,
            $user->getOId())
        ) {
            return null;
        }

        if ( ! is_object($user)) {
            return null;
        }

        $dbconn = &$this->_getDBConnection();

        $table_name = grn_mail_get_personal_tablename($user->getOID(),
            GRN_MAIL_MESSAGE_TABLE);
        $from = 'tab_' . $table_name . ' m';
        // 検索条件
        $condition = ' WHERE ';
        if (is_a($start_ts, 'CB_TimeStamp')) {
            $condition .= sprintf(" col_send_ts >= '%d'", $start_ts->unix_ts);
        }
        if (is_a($last_ts, 'CB_TimeStamp')) {
            $condition .= sprintf(" AND col_send_ts <= '%d'",
                $last_ts->unix_ts);
        }
        if (count($folder_id_list) > 0) {
            $folder_id_list_escaped = [];
            foreach ($folder_id_list as $folder_id) {
                $folder_id_list_escaped[] = "'" . $dbconn->escape($folder_id)
                                            . "'";
            }
            if ( ! is_null($start_ts)) {
                $condition .= ' AND m.col_folder IN (' . implode(', ',
                        $folder_id_list_escaped) . ') ';
            } else {
                $condition .= ' m.col_folder IN (' . implode(', ',
                        $folder_id_list_escaped) . ') ';
            }
        } else {
            if ( ! is_null($start_ts)) {
                $condition .= " AND ";
            }
            $condition .= sprintf(" m.col_user = '%s' ", $user->getOID());
        }

        // 取得するカラム
        $columns = [
            'm._id mid',
            'm.col_mtime',
        ];
        // クエリ発行
        $query = sprintf('SELECT %s FROM %s %s ORDER BY m._id',
            implode(',', $columns), $from, $condition);
        $query = $dbconn->select_format($query, 0, -1);
        $result = $dbconn->query($query);
        if ($result === false) {
            $dbconn->throwError([
                'query' => 'failed query on SELECT: ' . $query
            ]);
        }
        $mails = [];
        while ($row = $dbconn->fetch_assoc($result)) {
            $mail = [];
            $mail['id'] = $row['mid'];
            $mail['version'] = $row['col_mtime'];
            $mails[$row['mid']] = $mail;
        }

        return $mails;
    }

    function getAccountListByUserID(&$login, $account_ids = [])
    {
        if ( ! is_object($login)) {
            return null;
        }

        $dbconn = &$this->_getDBConnection();
        $table_name = 'tab_' . GRN_MAIL_ACCOUNT_TABLE;
        $condition = ' col_user = \'' . $login->getOID() . '\'';
        if (count($account_ids) > 0) {
            $account_id_list_escaped = [];
            foreach ($account_ids as $account_id) {
                $account_id_list_escaped[] = "'" . $dbconn->escape($account_id)
                                             . "'";
            }
            $condition .= ' AND a._id IN (' . implode(', ',
                    $account_id_list_escaped) . ') ';
        }

        $query_format
            = 'SELECT a._id, a.col_foreign_key, a.col_mtime, a.col_user, a.col_server, a.col_email, a.col_list_index, a.col_retrieve_account, col_retrieve_password, u.col_deleted '
              .
              'FROM %s AS a LEFT JOIN tab_cb_user u ON a.col_user = u._id AND u.col_deleted IS NULL WHERE %s ORDER BY a._id ';
        $query = sprintf($query_format, $table_name, $condition);
        $query = $dbconn->select_format($query, 0, -1, CB_DATABASE_NO_LOCK);
        $result = $dbconn->query($query);
        if ($result === false) {
            $dbconn->throwError([
                'query' => 'failed query on SELECT: ' . $query
            ]);
        }
        $accounts = [];
        while ($row = $dbconn->fetch_assoc($result)) {
            if ( ! is_null($row['col_deleted'])) {
                continue;
            }
            $account = [];
            $account['id'] = $row['_id'];
            $account['key'] = $row['col_foreign_key'];
            $account['version'] = intval($row['col_mtime']);
            $account['user_id'] = $row['col_user'];
            $account['server_id'] = $row['col_server'];
            $account['email'] = $row['col_email'];
            $account['username'] = $row['col_retrieve_account'];
            $account['password'] = $row['col_retrieve_password'];
            $account['order'] = $row['col_list_index'];
            $accounts[$row['_id']] = $account;
        }

        // 結果の開放
        $dbconn->free_result($result);

        return $accounts;
    }

    function getMailAccountForViewByIds(&$login, $account_ids)
    {
        if ( ! is_array($account_ids) || count($account_ids) <= 0) {
            return [];
        }
        require_once('mail/utility.csp');
        $utility = GRN_Mail_Utility::getInstance();
        $personal_config = $utility->getPersonalConfig($login);
        $accounts_result = [];
        $accounts_data = $this->getAccountListByUserID($login, $account_ids);
        foreach (array_keys($accounts_data) as $account_id) {
            $account = [];
            $account['id'] = $accounts_data[$account_id]['id'];
            $account['version'] = $accounts_data[$account_id]['version'];
            $account['server_id'] = $accounts_data[$account_id]['server_id'];
            $account['password'] = $accounts_data[$account_id]['password'];
            $account['order'] = $accounts_data[$account_id]['order'];
            $account['email'] = $accounts_data[$account_id]['email'];
            $account['user_id'] = $accounts_data[$account_id]['user_id'];
            $account['username'] = $accounts_data[$account_id]['username'];

            //get filter data list
            $filter_list = $personal_config->getFilterDataList($account_id,
                true);
            if (is_array($filter_list) && count($filter_list) > 0) {
                foreach (array_keys($filter_list) as $filter_key) {
                    $folder_id = $filter_list[$filter_key]['folder_id'];
                    if (strlen($folder_id) > 0) {
                        $folder_logic =& $utility->getFolderLogic();
                        $folder_name
                            = $folder_logic->getFolderName($folder_id);
                        $filter_list[$filter_key]['folder_name'] = $folder_name;
                    }
                    require_once('mail/status.csp');
                    $status = $filter_list[$filter_key]['status_id'];
                    $filter_list[$filter_key]['status']
                        = grn_mail_get_status($status);
                    if (array_key_exists('conditions',
                        $filter_list[$filter_key])
                    ) {
                        $conditions = $filter_list[$filter_key]['conditions'];
                        if (is_array($conditions) && count($conditions) > 0) {
                            foreach (array_keys($conditions) as $key) {
                                $type = $conditions[$key]['type'];
                                $expr = $conditions[$key]['expr'];
                                $target = '';
                                $method = '';
                                switch ($type) {
                                    case 'SB':
                                        $target = 'Subject';
                                        break;
                                    case 'FR':
                                        $target = 'From';
                                        break;
                                    case 'TO':
                                        $target = 'To';
                                        break;
                                    case 'CC':
                                        $target = 'CC';
                                        break;
                                    case 'HD':
                                        $target = 'Header';
                                        break;
                                }
                                switch ($expr) {
                                    case 'CO':
                                        $method = 'Including';
                                        break;
                                    case 'NCO':
                                        $method = 'Excluding';
                                        break;
                                    case 'SA':
                                        $method = 'Equal';
                                        break;
                                    case 'NSA':
                                        $method = 'NotEqual';
                                        break;
                                    case 'BE':
                                        $method = 'Begin';
                                        break;
                                }
                                if ($type == 'SZ') {
                                    if ($expr == 'GE') {
                                        $method = 'GreaterThanOrEqual';
                                    } elseif ($expr == 'LE') {
                                        $method = 'LessThanOrEqual';
                                    }
                                }
                                $filter_list[$filter_key]['conditions'][$key]['target']
                                    = $target;
                                $filter_list[$filter_key]['conditions'][$key]['method']
                                    = $method;
                            }
                        }
                    }
                }
            }
            $account['filters'] = $filter_list;

            // アカウントの署名設定リストを取得
            $signature_list
                = $personal_config->getSignatureDataList($account_id,
                true);
            $account['signatures'] = $signature_list;

            $accounts_result[$account_id] = $account;
        }

        return $accounts_result;
    }

    function getFolderListByAccount(&$login, $account_id)
    {
        if ( ! is_object($login)) {
            return null;
        }

        $dbconn = &$this->_getDBConnection();
        $table_name = 'tab_' . GRN_MAIL_FOLDER_TABLE;
        $condition = ' col_user = \'' . $login->getOID() . '\'';

        if (strlen($account_id) > 0) {
            $condition .= " AND col_account='" . $dbconn->escape($account_id)
                          . "'";
        }
        $query_format
            = 'SELECT f.*, u.col_deleted FROM %s AS f LEFT JOIN tab_cb_user u ON f.col_user = u._id AND u.col_deleted IS NULL WHERE %s ORDER BY f._id ';
        $query = sprintf($query_format, $table_name, $condition);
        $query = $dbconn->select_format($query, 0, -1, CB_DATABASE_NO_LOCK);
        $result = $dbconn->query($query);
        if ($result === false) {
            $dbconn->throwError([
                'query' => 'failed query on SELECT: ' . $query
            ]);
        }
        $folders = [];
        while ($row = $dbconn->fetch_assoc($result)) {
            if ( ! is_null($row['col_deleted'])) {
                continue;
            }
            $folder = [];
            $folder['id'] = $row['_id'];
            $folder['account'] = $row['col_account'];
            $folder['code'] = $row['col_code'];
            $folder['memo'] = $row['col_memo'];
            $folder['name'] = $row['col_name'];
            $folder['order'] = $row['col_list_index'];
            $folder['subscribed'] = $row['col_subscribed'];
            $folders[$row['_id']] = $folder;
        }
        // 結果の開放
        $dbconn->free_result($result);

        return $folders;
    }

    function getInputParamerters($raw_params)
    {
        $param = [];
        $mail = array_key_exists('children', $raw_params)
            ? $raw_params['children'] : null;
        if (0 >= count($mail)) {
            require_once('cbpapi/error_code.csp');
            cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
                ['param' => 'mail']);
        }
        $remove_file_ids = [];
        $file_contents = [];
        foreach (array_keys($mail) as $mail_key) {
            $node = $mail[$mail_key]['node_name'];
            if ($node == 'mail') {
                $required_fields = [
                    'key',
                    'subject',
                    'version',
                    'body',
                    'folder_key'
                ];
                $attributes = array_key_exists('attributes',
                    $mail[$mail_key]) ? $mail[$mail_key]['attributes'] : [];
                foreach ($required_fields as $field) {
                    if ( ! array_key_exists($field, $attributes)) {
                        require_once('cbpapi/error_code.csp');
                        cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
                            ['param' => $field]);
                    }
                }
                $param['mid'] = $attributes['key'];
                $param['cid'] = $attributes['folder_key'];
                $param['version'] = $attributes['version'];
                $param['subject'] = $attributes['subject'];
                $param['data'] = $attributes['body'];
                $html_body = '';
                if (array_key_exists('html_body', $attributes)) {
                    $html_body = $attributes['html_body'];
                }
                $param['html_body'] = $html_body;

                $elements_children = [];
                if (array_key_exists('children', $mail[$mail_key])) {
                    $elements_children = $mail[$mail_key]['children'];
                }
                $files = [];
                foreach (array_keys($elements_children) as $children_key) {
                    $element = $elements_children[$children_key];
                    $node_name = $element['node_name'];
                    if ($node_name == 'file') {
                        $file_attrs = array_key_exists('attributes', $element)
                            ? $element['attributes'] : [];
                        $size = array_key_exists('size', $file_attrs)
                            ? $file_attrs['size'] : null;
                        $mime_type = array_key_exists('mime_type', $file_attrs)
                            ? $file_attrs['mime_type'] : null;
                        if ( ! array_key_exists('id', $file_attrs)) {
                            require_once('cbpapi/error_code.csp');
                            cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
                                ['param' => 'id']);
                        }
                        if ( ! array_key_exists('name', $file_attrs)) {
                            require_once('cbpapi/error_code.csp');
                            cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
                                ['param' => 'name']);
                        }
                        $files[$file_attrs['id']] = [
                            'file_id'   => $file_attrs['id'],
                            'name'      => $file_attrs['name'],
                            'size'      => $size,
                            'mime_type' => $mime_type
                        ];
                    }
                }
                $param['files'] = $files;

            }

            if ($node == 'remove_file_id') {
                if (array_key_exists('text', $mail[$mail_key])) {
                    $file_id = $mail[$mail_key]['text'];
                    $remove_file_ids[$file_id] = $file_id;
                }
            }

            $param['remove_file_ids'] = $remove_file_ids;

            if ($node == 'file') {
                $file_attrs = $mail[$mail_key]['attributes'];
                if ( ! array_key_exists('id', $file_attrs)) {
                    require_once('cbpapi/error_code.csp');
                    cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
                        ['param' => 'id']);
                }
                $file_id = $file_attrs['id'];
                $file_child = [];
                if (isset($mail[$mail_key]['children'][0])) {
                    $file_child = $mail[$mail_key]['children'][0];
                }
                if (is_array($file_child)
                    && array_key_exists('text', $file_child)
                ) {
                    $content_value = $file_child['text'];
                    $file_contents[$file_id] = $content_value;
                }
            }

            $this->_getFilesContentInput($param, $file_contents);
        }

        return $param;
    }

    function _getFilesContentInput(&$param, $file_content)
    {
        $contents = [];
        if (count($file_content) <= 0) {
            return $param;
        }
        foreach ($param as $key => $file_info) {
            if ((strcasecmp($key, 'files') == 0)) {
                foreach (array_keys($file_content) as $file_id) {
                    if (is_array($file_info) && count($file_info) > 0) {
                        foreach (array_keys($file_info) as $file_key) {
                            if ($file_info[$file_key]['file_id'] == $file_id) {
                                $param['files'][$file_key]['content']
                                    = $file_content[$file_id];
                            }
                        }
                    }
                }
            }
        }

        return $param;
    }

    // for check NonBlankStringType
    function _checkNonBlankStringType($value, $name)
    {
        if ( ! isset($value)) {
            require_once('cbpapi/error_code.csp');
            cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
                ['param' => $name]);
        } else {
            require_once('cbpapi/error_code.csp');
            cbpapi_trim_check($value, E_GRN_CBPAPI_EMPTY_PARAMETER_VALUE,
                $name);
        }
    }

    // for check missing parameter
    function _checkMissingParameter($value, $name)
    {
        if ( ! isset($value)) {
            require_once('cbpapi/error_code.csp');
            cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
                ['param' => $name]);
        }
    }

    function getMailServerParamerters($cbpapi_service, $raw_params)
    {
        require_once('cbpapi/error_code.csp');
        $mail_servers = array_key_exists('children', $raw_params)
            ? $raw_params['children'] : null;
        if (count($mail_servers) <= 0) {
            cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
                ['param' => 'server']);
        }

        $params = [];
        foreach ($mail_servers as $mail_server) {
            $node = $mail_server['node_name'];
            if ($node == 'server') {
                $param = [];
                // mail server id
                $id = @$mail_server['attributes']['id'];
                $this->_checkMissingParameter($id, 'id');
                $param['id'] = $id;

                // server code
                $server_code = @$mail_server['attributes']['server_code'];
                $this->_checkNonBlankStringType($server_code, 'server_code');
                $param['foreign_key'] = $server_code;

                // server name
                $server_name = @$mail_server['attributes']['server_name'];
                $this->_checkNonBlankStringType($server_name, 'server_name');
                $param['name'] = $server_name;

                $mail_server_children = array_key_exists('children',
                    $mail_server) ? $mail_server['children'] : [];

                // check outgoing
                $outgoing = $cbpapi_service->selectNodes($mail_server,
                    'outgoing');
                if ( ! isset($outgoing)) {
                    cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
                        ['param' => 'outgoing']);
                }

                // get outgoing and incoming
                $server_info = new GRN_Mail_ServerInfo();
                foreach ($mail_server_children as $server) {
                    $node_name = @$server['node_name'];
                    $attributes = @$server['attributes'];
                    $server_name = @$attributes['server_name'];
                    $port_number = @$attributes['port_number'];
                    $use_ssl = 0;
                    $use_tls = 0;
                    if (array_key_exists('encrypted_connection', $attributes)) {
                        $use_ssl = @$attributes['encrypted_connection']
                                   === 'SSL' ? 1 : 0;
                        $use_tls = @$attributes['encrypted_connection']
                                   === 'TLS' ? 1 : 0;
                    } else {
                        $use_ssl = @$attributes['use_ssl'] === 'true' ? 1 : 0;
                    }

                    // timeout_period
                    $timeout_values = [
                        10,
                        20,
                        30,
                        40,
                        50,
                        60,
                        70,
                        80,
                        90,
                        100,
                        110,
                        120
                    ];
                    $timeout = @$attributes['timeout'];
                    if (array_search($timeout, $timeout_values) === false) {
                        $timeout = 10;
                    }

                    // outgoing
                    if ($node_name == 'outgoing') {
                        // server name
                        $this->_checkNonBlankStringType($server_name,
                            'outgoing-server_name');

                        // check port number
                        $this->_checkMissingParameter($port_number,
                            'outgoing-port_number');
                        // default cho smtp
                        if ( ! is_numeric($port_number) || $port_number < 1
                             || $port_number > 65535
                        ) {
                            if ($use_ssl) {
                                $port_number = 465;
                            } elseif ($use_tls) {
                                $port_number = 587;
                            } else {
                                $port_number = 25;
                            }
                        }

                        // smtp auth
                        $smtp_auth_values = [
                            'NONE',
                            'PLAIN',
                            'LOGIN',
                            'CRAM-MD5',
                            'DIGEST-MD5'
                        ];
                        $smtp_auth = @$attributes['smtp_auth'];
                        if (array_search($smtp_auth, $smtp_auth_values)
                            === false
                        ) {
                            $smtp_auth = 'NONE';
                        }

                        // account_for_send
                        $account_for_send = @$attributes['account_for_send']
                                            === 'true' ? 1 : 0;

                        // pop_before_smtp
                        $pop_before_smtp = @$attributes['pop_before_smtp']
                                           === 'true' ? 1 : 0;
                        $pop_before_smtp_wait_time
                            = @$attributes['pop_before_smtp_wait_time'];
                        if ( ! is_numeric($pop_before_smtp_wait_time)) {
                            $pop_before_smtp_wait_time = 0;
                        } else {
                            if ($pop_before_smtp_wait_time < 0) {
                                $pop_before_smtp_wait_time = 0;
                            } elseif ($pop_before_smtp_wait_time > 10) {
                                $pop_before_smtp_wait_time = 10;
                            }
                        }

                        $server_info->smtp = $server_name;
                        $server_info->smtp_port = $port_number;
                        $server_info->smtp_ssl = $use_ssl;
                        $server_info->smtp_tls = $use_tls;
                        $server_info->smtp_auth = $smtp_auth;
                        $server_info->smtp_set_account = $account_for_send;
                        $server_info->pop_before_smtp = $pop_before_smtp;
                        $server_info->pbsmtp_wait_sec
                            = $pop_before_smtp_wait_time;
                        $server_info->smtp_timeout_sec = $timeout;
                    } // incoming
                    elseif ($node_name == 'incoming') {
                        // receive protocol
                        $receive_protocol = @$attributes['receive_protocol'];
                        $this->_checkMissingParameter($receive_protocol,
                            'incoming-receive_protocol');
                        $receive_protocol_values = ['POP3', 'IMAP4'];
                        if (array_search($receive_protocol,
                                $receive_protocol_values) === false
                        ) {
                            $receive_protocol = 'POP3';
                        }

                        // server name
                        $this->_checkNonBlankStringType($server_name,
                            'incoming-server_name');

                        // check port number
                        $this->_checkMissingParameter($port_number,
                            'incoming-port_number');
                        if ( ! is_numeric($port_number) || $port_number < 1
                             || $port_number > 65535
                        ) {
                            // default port
                            if ($receive_protocol == 'POP3') {
                                $port_number = $use_ssl ? 995 : 110;
                            } elseif ($receive_protocol == 'IMAP4') {
                                $port_number = $use_ssl ? 993 : 143;
                            }
                        }
                        $apop_auth_for_pop3 = @$attributes['apop_auth_for_pop3']
                                              === 'true' ? 1 : 0;

                        $server_info->retrieve = $server_name;
                        $server_info->retrieve_port = $port_number;
                        $server_info->retrieve_ssl = $use_ssl;
                        $server_info->retrieve_auth
                            = ($apop_auth_for_pop3
                               == 1) ? 'APOP'
                            : 'USER';
                        $server_info->retrieve_protocol = $receive_protocol;
                        $server_info->retrieve_timeout_sec = $timeout;
                    }
                }

                //check incoming
                $incoming = $cbpapi_service->selectNodes($mail_server,
                    'incoming');
                if ( ! isset($incoming)) {
                    cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
                        ['param' => 'incoming']);
                }

                $param['server_info'] = $server_info;
                $params[] = $param;
            }
        }

        return $params;
    }

    function getMailServerForViewByIds($ids)
    {
        require_once('mail/system_config.csp');
        $system_config = GRN_Mail_SystemConfig::getInstance();

        $ret = [];
        foreach ($ids as $id) {
            $server_data = $system_config->getServerData($id);
            $ret[] = $this->_createMailServerInfoType($server_data);
        }

        return $ret;
    }

    function _createMailServerInfoType($server_data)
    {
        $server_info = $server_data['server_info'];
        $server = [];
        $server['id'] = $server_data['id'];
        $server['server_code'] = $server_data['foreign_key'];
        $server['server_name'] = $server_data['name'];

        $server['outgoing'] = [];
        $outgoing = &$server['outgoing'];
        $outgoing['server_name'] = $server_info->smtp;
        $outgoing['port_number'] = $server_info->smtp_port;
        if ($server_info->smtp_ssl) {
            $outgoing['encrypted_connection'] = 'SSL';
        } elseif ($server_info->smtp_tls) {
            $outgoing['encrypted_connection'] = 'TLS';
        } else {
            $outgoing['encrypted_connection'] = cb_msg('grn.mail.lang',
                'unused_encrypted');
        }
        $outgoing['smtp_auth'] = $server_info->smtp_auth;
        $outgoing['account_for_send'] = $server_info->smtp_set_account
            ? 'true' : 'false';
        $outgoing['pop_before_smtp'] = $server_info->pop_before_smtp
            ? 'true' : 'false';
        $outgoing['pop_before_smtp_wait_time'] = $server_info->pbsmtp_wait_sec
            ? $server_info->pbsmtp_wait_sec : 0;
        $outgoing['timeout']
            = $server_info->getSmtpTimeoutTime();

        $server['incoming'] = [];
        $incoming = &$server['incoming'];
        $incoming['receive_protocol'] = $server_info->retrieve_protocol;
        $incoming['server_name'] = $server_info->retrieve;
        $incoming['port_number'] = $server_info->retrieve_port;
        $incoming['use_ssl'] = $server_info->retrieve_ssl ? 'true'
            : 'false';
        $incoming['apop_auth_for_pop3'] = ($server_info->retrieve_auth
                                           == 'APOP') ? 'true' : 'false';
        $incoming['timeout']
            = $server_info->getRetrieveTimeoutTime();

        return $server;
    }

    function escapeDisplayName($address_string)
    {
        require_once('fw/mail_message.csp');
        $address = [];
        $address_list = CB_MailAddress::static_parse_list($address_string, null,
            true, true, true);
        foreach ($address_list as $address_obj) {
            $address[] = sprintf('"%s" <%s>',
                GRN_Mail_Utility::static_escapeDisplayName($address_obj->name),
                $address_obj->address);
        }

        return implode(", ", $address);
    }

    function mailReceive(& $user)
    {
        if ( ! $user) {
            return false;
        }

        $user_id = $user->getOID();

        require_once('mail/utility.csp');
        $utility = GRN_Mail_Utility::getInstance();
        $recv_logic = $utility->getRecvLogic();
        $personal_config = $utility->getPersonalConfig($user);
        $system_config = $utility->getSystemConfig();
        $locator = GRN_ApplicationLocator::instance();

        //check mail app active
        if ( ! $locator->isActive(GRN_MAIL_APP_ID)) {
            return false;
        }

        //check mail app available
        if ( ! AppAccess::isAppAvailable(GRN_MAIL_APP_ID, $user_id)) {
            return false;
        }
        //check user can receiving E-mail
        if ( ! $system_config->canUseMail()) {
            return false;
        }

        // メールのサイズ制限に対するチェック
        // 現在の保存メールサイズ
        $mail_size = $personal_config->getMailSize(null);
        // システムで設定されている保存メールサイズの取得
        $system_config->getSizeUserLimitSetting($size_settings, $user_id);
        // 既に受信している保存メールサイズが、制限値をオーバーしているかチェック
        if (($size_settings['user_limit_' . $user_id] >= 0)
            && ($mail_size >= $size_settings['user_limit_' . $user_id] * 1024
                              * 1024)
        ) {
            return false;
        }

        $app = $utility->getMailApp();
        $max_receive_count
            = $app->getMaxReceiveCount();                // 最大受信件数

        // 外部通知設定取得
        require_once('notification/application.csp');
        $use_notify_mail = false;
        $notify_app = $locator->getInstance(GRN_NOTIFICATION_APP_ID);
        if ( ! is_null($notify_app)) {
            $temp = false;
            $notify_config = $notify_app->getPersonalConfig($user);
            $notify_config->getNotUseNotify($temp);
            if ( ! is_null($notify_config)
                 && $notify_config->getNotUseNotify($temp)
            ) {
                $use_notify_mail = ! $temp;
            }
        }

        $account_list = $personal_config->getAccountDataList(false);
        if (is_array($account_list)) {
            foreach (array_keys($account_list) as $temp_account_id) {
                // 受信可能なアカウントかチェック
                $no_account = $no_server = true;
                if ($personal_config->checkAccountForReceive($temp_account_id,
                    $no_account, $no_server)
                ) {
                    $remaining = 0;
                    // メール受信
                    $mail_ids = $recv_logic->recvMails($user,
                        $temp_account_id, $use_notify_mail, $max_receive_count,
                        $remaining, $tmp_notify_received_num);
                    $received_count = is_array($mail_ids) ? count($mail_ids)
                        : 0;
                    $max_receive_count -= $received_count;
                }

                if ($max_receive_count <= 0) {
                    // 最大受信件数に達した
                    break;
                }
            }
        }

        return true;
    }
}


require('mail/include_search.csp');

class GRN_CBPApi_Mail_SearchLogic extends GRN_Mail_SearchLogic
{
    /**
     * Return singleton.
     *
     * @return object GRN_Mail_SearchLogic
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_CBPApi_Mail_SearchLogic();
        }

        return $_instance;
    }

    /**
     *
     * @param object $user
     * @param array  $items
     * @param string $keyword
     * @param int    $offset
     * @param int    $limit
     * @param string $sort（ 'rtime'/'timestamp'/'send_ts'/'dtime'/'data'/'from'/'to'/'size'）。デフォルト:'send_ts'
     * @param object $start_ts
     * @param object $last_ts
     * @param string $hid
     * @param bool   $subfolder
     *
     * @return array
     * @access public
     */
    function getSearchItemsForMobileAPI(
        &$user,
        $items,
        $keyword,
        $offset,
        $limit,
        $sort = 'send_ts',
        $start_ts = null,
        $last_ts = null,
        $aid = '-1',
        $hid = '-1',
        $subfolder = true
    ) {
        $cids = $this->_getTargetFolders($user->getOID(), $aid, $hid,
            $subfolder);

        if (count($cids) === 0) {
            return [];
        }

        $rowset = $this->_getRowSet($cids, $items, $keyword,
            $sort, $start_ts, $last_ts,
            false, $offset, $limit);
        if ($rowset === false) {
            return [];
        }

        $ret = [];
        while ( ! is_null($rs =& $rowset->iterate())) {
            $mail_id = $rs['m']->getOID();
            $ret[$mail_id] = $mail_id;
        }
        $rowset->destroy();

        return $ret;
    }
}
