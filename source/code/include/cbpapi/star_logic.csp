<?php

use grn\grn\access\service\AppAccess;
use grn\grn\access\utility\AppAvailabilityUtil;

require_once('star/table.csp');

class GRN_CBPApi_StarLogic
{
    /**
     * @return GRN_CBPApi_StarLogic
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_CBPApi_StarLogic();
        }

        return $_instance;
    }

    var $_dbconn = null;

    function _getDBConnection()
    {
        if (is_null($this->_dbconn)) {
            $app_locator = GRN_ApplicationLocator::instance();
            $this->_dbconn = $app_locator->getConnection('star');
        }

        return $this->_dbconn;
    }

    function removeStarByUniqueIDs(&$user, $module_id, $unique_ids)
    {
        assert('is_array($unique_ids) && count($unique_ids) > 0');

        $db = $this->_getDBConnection();
        $query = "DELETE FROM tab_"
                 . grn_get_personal_tablename_star($user->getOID(), GRN_STAR);
        $query .= " WHERE col_user='@S' AND col_module_id='@S' AND col_unique_id IN (@A)";
        $query = cb_queryf($db, $query, $user->getOID(), $module_id,
            $unique_ids);
        $result = $db->query($query);
        if ($result === false) {
            $db->throwError(['query' => 'failed query on SELECT: ' . $query]);
        }

        return true;
    }

    function getStarsForView(&$user, $module_id, $unique_ids)
    {
        $stars_for_view = [];
        if ( ! is_array($unique_ids)) {
            return $star_for_view;
        }
        $columns = [
            "_id id",
            "col_subject subject",
            "col_timestamp timestamp",
            "col_org_data org_data",
            "col_sender_name sender_name",
            "col_sender_id sender_id",
            "col_ctime ctime",
            "col_mtime mtime",
            "col_module_id module_id",
            "col_unique_id unique_id"
        ];
        $query = "SELECT " . implode(", ", $columns) . " FROM ";
        $query .= "tab_" . grn_get_personal_tablename_star($user->getOID(),
                GRN_STAR);
        $query .= " WHERE col_user='@S' AND col_module_id='@S' AND col_unique_id IN (@A)";
        $db = $this->_getDBConnection();
        $query = cb_queryf($db, $query, $user->getOID(), $module_id,
            $unique_ids);
        $result = $db->query($query);
        if ($result === false) {
            $db->throwError(['query' => 'failed query on SELECT: ' . $query]);
        }
        $appid_list_allow_external_access
            = AppAccess::getAvailabilityExternalAppIdsByUserId($user->getOID(),
            AppAvailabilityUtil::getActiveAppIds());
        while ($row = $db->fetch_assoc($result)) {
            $app_id = cb_get_app_id($row['module_id']);
            if ( ! $this->isActive($row['module_id'])
                 || ! $this->isAvailableFor($user, $row['module_id'])
                 || $appid_list_allow_external_access[$app_id]
                    === AppAvailabilityUtil::ACCESS_DENIED
            ) {
                continue;
            }
            $org_data = cb_unserialize($row['org_data'],
                ["allowed_classes" => false]);
            $row['org_data'] = $org_data;
            $stars_for_view[$row['id']] = $row;
        }
        $db->free_result($result);

        return $stars_for_view;
    }

    function getStarsForViewByIDs(&$user, $star_ids)
    {
        $stars_for_view = [];
        if ( ! is_array($star_ids)) {
            return $star_for_view;
        }
        $columns = [
            "_id id",
            "col_subject subject",
            "col_timestamp timestamp",
            "col_org_data org_data",
            "col_sender_name sender_name",
            "col_sender_id sender_id",
            "col_ctime ctime",
            "col_mtime mtime",
            "col_module_id module_id",
            "col_unique_id unique_id"
        ];
        $db = $this->_getDBConnection();
        foreach (array_keys($star_ids) as $key) {
            $unique_id =& $star_ids[$key];
            $unique_id = $db->escape($unique_id);
        }
        $conditions = [
            'col_user=\'' . $db->escape($user->getOID()) . '\'',
            '_id IN (\'' . implode("', '", $star_ids) . '\')'
        ];
        $query = "SELECT " . implode(", ", $columns) . " FROM ";
        $query .= "tab_" . grn_get_personal_tablename_star($user->getOID(),
                GRN_STAR);
        $query .= ' WHERE ' . implode(' AND ', $conditions);
        $result = $db->query($query);
        if ($result === false) {
            $db->throwError(['query' => 'failed query on SELECT: ' . $query]);
        }
        $appid_list_allow_external_access
            = AppAccess::getAvailabilityExternalAppIdsByUserId($user->getOID(),
            AppAvailabilityUtil::getActiveAppIds());
        while ($row = $db->fetch_assoc($result)) {
            $app_id = cb_get_app_id($row['module_id']);
            if ( ! $this->isActive($row['module_id'])
                 || ! $this->isAvailableFor($user, $row['module_id'])
                 || $appid_list_allow_external_access[$app_id]
                    === AppAvailabilityUtil::ACCESS_DENIED
            ) {
                continue;
            }

            $org_data = cb_unserialize($row['org_data'],
                ["allowed_classes" => false]);
            $row['org_data'] = $org_data;
            $stars_for_view[$row['id']] = $row;
        }
        $db->free_result($result);

        return $stars_for_view;
    }

    function getStarList(&$user)
    {
        assert('is_a($user, \'cb_user\')');

        $columns = [
            '_id id',
            'col_module_id',
            'col_unique_id',
            'col_subject',
            'col_mtime',
            'col_timestamp',
        ];
        $query = "SELECT " . implode(", ", $columns) . " FROM ";
        $query .= "tab_" . grn_get_personal_tablename_star($user->getOID(),
                GRN_STAR);
        $query .= " WHERE col_user='@S'";
        $db = $this->_getDBConnection();
        $query = cb_queryf($db, $query, $user->getOID());
        $result = $db->query($query);
        if ($result === false) {
            $db->throwError(['query' => 'failed query on SELECT: ' . $query]);
        }
        $star_items = [];
        $appid_list_allow_external_access
            = AppAccess::getAvailabilityExternalAppIdsByUserId($user->getOID(),
            AppAvailabilityUtil::getActiveAppIds());
        while ($row = $db->fetch_assoc($result)) {
            $app_id = cb_get_app_id($row['col_module_id']);
            $evaluate_access = cb_at($appid_list_allow_external_access, $app_id,
                AppAvailabilityUtil::ACCESS_ALLOWED);
            if ( ! $this->isActive($row['col_module_id'])
                 || ! $this->isAvailableFor($user, $row['col_module_id'])
                 || $evaluate_access === AppAvailabilityUtil::ACCESS_DENIED
            ) {
                continue;
            }
            $star = [];
            $star['id'] = $row['id'];
            $star['module_id'] = $row['col_module_id'];
            $star['unique_id'] = $row['col_unique_id'];
            $star['subject'] = $row['col_subject'];
            $star['mtime'] = $row['col_mtime'];
            $star['timestamp'] = $row['col_timestamp'];
            $star['version'] = $row['col_mtime'];

            $star_items[$row['id']] = $star;
        }
        $db->free_result($result);

        return $star_items;
    }

    function saveNow()
    {
        $app_locator = GRN_ApplicationLocator::instance();
        $manager = $app_locator->getTableManager('star');
        $manager->registerNowAndUpdateNowAll();
    }

    /**
     * @param    $module_id    grn.schedule | grn.message | grn.mail | grn.cabinet | grn.report
     *
     * @return   boolean    TRUE: active | FALSE: inactive
     */
    function isActive($module_id)
    {
        $app_locator = GRN_ApplicationLocator::instance();
        $app = explode('.', $module_id);
        assert('count($app)==2');

        return $app_locator->isActive($app[1]);
    }

    /**
     * @param    $module_id    grn.schedule | grn.message | grn.mail | grn.cabinet | grn.report
     *
     * @return   boolean    TRUE: have privilege | FALSE: do not have privilege
     */
    function isAvailableFor($user, $module_id)
    {
        $app = explode('.', $module_id);
        assert('count($app)==2');

        return AppAccess::isAppAvailable($app[1], $user->getOID());
    }
}


