<?php
require_once('report/search_logic.csp');
require_once('report/resources.csp');
require_once('report/table_manager.csp');
require_once('report/controller_util.csp');
require_once('report/member_manager.csp');
require_once('report/notification_manager.csp');

class GRN_CBPApi_Report_Logic
{
    /**
     * @return GRN_CBPApi_Report_Logic
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_CBPApi_Report_Logic();
        }

        return $_instance;
    }

    function getFilterdReportList($user, $filter_id)
    {
        $criteria = new GRN_Report_Search_Criteria($user);
        $criteria->filter_id = $filter_id;
        $criteria->target = GRN_REPORT_SEARCH_TARGET_ALL;
        $report_list = GRN_Report_Search_Logic::search($criteria);

        $report_list_for_view = $this->_getView($report_list);

        $item_data_util = GRN_Report_ItemData_Controller_Utility::getInstance();

        //Create Parameter Translation Map
        $translation_map_item_data = [
            //Item Data Information
            'iid'                => 'itemdata_id',
            //Item Data ID
            'display_name'       => 'itemdata_display_name',
            //Item Data Display Name
            'type'               => 'itemdata_type',
            //Item Data Type
            'option_string'      => 'itemdata_option_string',
            //Item Data Option String
            'option_string_type' => 'itemdata_option_string_type',
            //Item Data Option String Type
            'data_type'          => 'itemdata_data_type',
            //Item Data data_type
            'settings'           => 'itemdata_settings',
            //Item Data Settings
            'required'           => 'itemdata_required',
            //Item Data Reuired Flag
            'list_index'         => 'itemdata_list_index',
            //Item Data List Index
            'number'             => 'itemdata_number',
            //Item Data Number Value
            'text'               => 'itemdata_text',
            //Item Data text Value
            //Item Data File Information
            'fid'                => 'filerelation_id',
            //Item Data File ID
            'file'               => 'filerelation_file',
            //Item Data File ID
            'files'              => 'itemdata_files',
            //Item Data File ID List
        ];

        //TODO 報告書毎にSQLを発行してるので一発で取得できるような処理に変更する
        foreach ($report_list_for_view as $rid => $report) {
            //Get Item Data List for view
            $item_data_list
                = $item_data_util->getListViewEx($translation_map_item_data,
                $rid);
            $report_list_for_view[$rid]['items'] = $item_data_list;
        }

        return $report_list_for_view;
    }

    function getReportListByIdList($user, $report_id_list)
    {
        if ( ! $report_id_list || count($report_id_list) == 0) {
            return;
        }

        $criteria = new GRN_Report_Search_Criteria($user);
        $criteria->report_id_list = $report_id_list;
        $criteria->target = GRN_REPORT_SEARCH_TARGET_AVAILABLE;
        $report_list = GRN_Report_Search_Logic::search($criteria);

        require_once('report/controller_util.csp');
        $item_data_util = GRN_Report_ItemData_Controller_Utility::getInstance();
        $member_util
            = GRN_Report_Member_Controller_Utility::getInstance();
        $notification_util
            = GRN_Report_Notification_Controller_Utility::getInstance();

        //Create Parameter Translation Map
        $translation_map_item_data = [
            //Item Data Information
            'iid'                => 'itemdata_id',
            //Item Data ID
            'display_name'       => 'itemdata_display_name',
            //Item Data Display Name
            'type'               => 'itemdata_type',
            //Item Data Type
            'option_string'      => 'itemdata_option_string',
            //Item Data Option String
            'option_string_type' => 'itemdata_option_string_type',
            //Item Data Option String Type
            'data_type'          => 'itemdata_data_type',
            //Item Data data_type
            'settings'           => 'itemdata_settings',
            //Item Data Settings
            'required'           => 'itemdata_required',
            //Item Data Reuired Flag
            'list_index'         => 'itemdata_list_index',
            //Item Data List Index
            'number'             => 'itemdata_number',
            //Item Data Number Value
            'text'               => 'itemdata_text',
            //Item Data text Value
            'html'               => 'itemdata_html',
            //Item Data File Information
            'fid'                => 'filerelation_id',
            //Item Data File ID
            'file'               => 'filerelation_file',
            //Item Data File ID
            'files'              => 'itemdata_files',
            //Item Data File ID List
        ];

        $report_list_for_view = $this->_getView($report_list);
        foreach ($report_list_for_view as $rid => $report) {
            //Get Item Data List for view
            $item_data_list
                = $item_data_util->getListViewEx($translation_map_item_data,
                $rid);

            foreach ($item_data_list as $key => $itemdata) {
                $item_data_list[$key]['view_str']
                    = $this->getViewString($itemdata);
            }
            $report_list_for_view[$rid]['items'] = $item_data_list;

            $members_for_view = [];
            $notification_for_view = [];
            $operators_for_view = [];

            //Get Members
            $members = $member_util->getDetailView($rid, $report['creator'],
                []);
            foreach ($members as $user) {
                $members_for_view[$user['id']] = [];
                $members_for_view[$user['id']]['id'] = $user['id'];
                $members_for_view[$user['id']]['name'] = $user['name'];
                if ($user['is_operator']) {
                    $operators_for_view[$user['id']]['id'] = $user['id'];
                    $operators_for_view[$user['id']]['name'] = $user['name'];
                }
            }
            $report_list_for_view[$rid]['members'] = $members_for_view;

            //Get Notify User
            $notification = $notification_util->getDetailView($rid,
                $report['creator'], []);
            foreach ($notification as $user) {
                $notification_for_view[$user['id']] = [];
                $notification_for_view[$user['id']]['id'] = $user['id'];
                $notification_for_view[$user['id']]['name'] = $user['name'];
                if ($user['is_operator']) {
                    $operators_for_view[$user['id']]['id'] = $user['id'];
                    $operators_for_view[$user['id']]['name'] = $user['name'];
                }
            }
            $report_list_for_view[$rid]['notifyusers'] = $notification_for_view;
            $report_list_for_view[$rid]['operators'] = $operators_for_view;

            require_once('cbpapi/util.csp');
            // create date
            $ctime = new CB_TimeStamp();
            $ctime->unix_ts = $report['ctime'];
            $create_date
                = grn_cbpapi_iso8601($ctime);
            $report_list_for_view[$rid]['creator_date'] = $create_date;
            // modify date
            $mtime = new CB_TimeStamp();
            $modify_date = $report['ctime'];
            if ( ! is_null($report['mtime'])) {
                $modify_date = $report['mtime'];
            }
            $mtime->unix_ts = $modify_date;
            $modify_date
                = grn_cbpapi_iso8601($mtime);
            $report_list_for_view[$rid]['modifier_date'] = $modify_date;

        }

        return $report_list_for_view;
    }

    function getLastTimestamps($user_id, $report_id_list)
    {
        $database = GRN_Report_Table_Manager::getDataBase();
        $query
            = "SELECT * FROM tab_grn_report_readstatus AS rstatus WHERE col_user = "
              . cb_queryf($database, "@S", $user_id);

        $result = $database->query($query);
        if ($result === false) {
            $this->_db->throwError([
                'query' => 'failed query on SELECT: ' . $query
            ]);
        }
        //echo $query;
        $ret = [];
        while ($row = $database->fetch_assoc($result)) {
            $ret[$row['_id']] = $row['col_last_timestamp'];
        }
        $database->free_result($result);

        return $ret;
    }

    function getReportList($user, $target, $start_datetime, $end_datetime)
    {
        $util = GRN_Report_Report_Controller_Utility::getInstance();

        //Create Parameter Translation Map
        $translation_map = [
            'id'                   => '_id',
            //Report ID
            'name'                 => 'name',
            //Report Name
            'form'                 => 'form',
            //Report Form ID
            'form_name'            => 'form_name',
            //Report Form Name
            'creator'              => 'creator',
            //Report Creator
            //'creator_name'          =>  'creator_name',         //Report Creator Name
            'creator_foreign_key'  => 'creator_foreign_key',
            //Report Creator Foreign Key
            'modifier'             => 'modifier',
            //Report Modifier
            // 'modifier_name'         =>  'modifier_name',        //Report Modifier Name
            'modifier_foreign_key' => 'modifier_foreign_key',
            //Report Modifier Foreign Key
            'ctime'                => 'ctime',
            //Report Create Time
            'mtime'                => 'mtime',
            //Report Modify Time
            'private'              => 'private',
            //Report Private
            'draft'                => 'draft',
            //Draft
        ];

        $option = [];
        if (is_numeric($start_datetime) || is_numeric($end_datetime)) {
            $option['date']['start'] = $start_datetime;
            $option['date']['end'] = $end_datetime;
        }

        $reports = [];
        switch ($target) {
            case GRN_REPORT_SEARCH_TARGET_DRAFT:
                $reports = $util->getDraftList($user, $translation_map,
                    $option);
                break;
            case GRN_REPORT_SEARCH_TARGET_RECEIVED:
                $reports = $util->getReceiveList($user, $translation_map,
                    $option);
                break;
            case GRN_REPORT_SEARCH_TARGET_SEND:
                $reports = $util->getSendList($user, $translation_map, $option);
                break;
            case GRN_REPORT_SEARCH_TARGET_ALL:
            default:
                $reports = $util->getAllList($user, $translation_map, $option);
                break;
        }

        //Get Report and Item Data Controller Utility
        require_once('report/controller_util.csp');
        $item_data_util = GRN_Report_ItemData_Controller_Utility::getInstance();

        //Create Parameter Translation Map
        $translation_map_item_data = [
            //Item Data Information
            'iid'                => 'itemdata_id',
            //Item Data ID
            'display_name'       => 'itemdata_display_name',
            //Item Data Display Name
            'type'               => 'itemdata_type',
            //Item Data Type
            'option_string'      => 'itemdata_option_string',
            //Item Data Option String
            'option_string_type' => 'itemdata_option_string_type',
            //Item Data Option String Type
            'data_type'          => 'itemdata_data_type',
            //Item Data data_type
            'settings'           => 'itemdata_settings',
            //Item Data Settings
            'required'           => 'itemdata_required',
            //Item Data Reuired Flag
            'list_index'         => 'itemdata_list_index',
            //Item Data List Index
            'number'             => 'itemdata_number',
            //Item Data Number Value
            'text'               => 'itemdata_text',
            //Item Data text Value
            'html'               => 'itemdata_html',
            //Item Data html Value
            //Item Data File Information
            'fid'                => 'filerelation_id',
            //Item Data File ID
            'file'               => 'filerelation_file',
            //Item Data File ID
            'files'              => 'itemdata_files',
            //Item Data File ID List
        ];

        //TODO 報告書毎にSQLを発行してるので一発で取得できるような処理に変更する
        foreach ($reports as $rid => $report) {
            //Get Item Data List for view
            $item_data_list
                = $item_data_util->getListViewEx($translation_map_item_data,
                $rid);
            $reports[$rid]['items'] = $item_data_list;
        }

        return $reports;
    }

    private function _getReportCriteriaColumns(
        array $columns,
        $column_prefix = null
    ) {
        $column_name_list = [];
        foreach ($columns as $column_name) {
            if (strpos($column_name, 'col_') === 0) {
                if (is_null($column_prefix)) {
                    $column_name_list[] = $column_name;
                } else {
                    $column_name_list[] = sprintf('%s.%s', $column_prefix,
                        $column_name);
                }
            }
        }

        if (is_null($column_prefix)) {
            $column_name_list[] = '_id';
        } else {
            $column_name_list[] = sprintf('%s._id', $column_prefix);
        }

        return $column_name_list;
    }

    function search($user, $target, $keyword, $index = null, $count = null)
    {
        $criteria = new GRN_Report_Search_Criteria($user);
        $criteria->target = $target;
        $criteria->and_or = GRN_REPORT_FILTER_OR;

        $criteria->addCondition(GRN_REPORT_FILTER_TYPE_FORM_NAME, $keyword,
            GRN_REPORT_FILTER_CONDITION_INCLUDE);
        $criteria->addCondition(GRN_REPORT_FILTER_TYPE_REPORT_NAME, $keyword,
            GRN_REPORT_FILTER_CONDITION_INCLUDE);
        $criteria->addCondition(GRN_REPORT_FILTER_TYPE_ITEMDATA, $keyword,
            GRN_REPORT_FILTER_CONDITION_INCLUDE);
        $criteria->addCondition(GRN_REPORT_FILTER_TYPE_CREATOR, $keyword,
            GRN_REPORT_FILTER_CONDITION_INCLUDE);
        $criteria->addCondition(GRN_REPORT_FILTER_TYPE_FOLLOW, $keyword,
            GRN_REPORT_FILTER_CONDITION_INCLUDE);

        $criteria_columns = [
            GRN_REPORT_COLUMN_FORM_NAME,
            GRN_REPORT_COLUMN_NAME,
            GRN_REPORT_COLUMN_DRAFT,
            GRN_REPORT_COLUMN_CREATOR,
            GRN_REPORT_COLUMN_CREATOR_NAME,
            GRN_REPORT_COLUMN_MODIFIER,
            GRN_REPORT_COLUMN_MODIFIER_NAME,
            GRN_REPORT_COLUMN_CTIME,
            GRN_REPORT_COLUMN_MTIME,
        ];
        $criteria->columns = $this->_getReportCriteriaColumns($criteria_columns,
            'report');

        $report_list = GRN_Report_Search_Logic::search($criteria);
        $report_list_for_view = $this->_getView($report_list,
            $this->_getReportCriteriaColumns($criteria_columns));
        $report_ids = [];
        foreach ($report_list_for_view as $report_id => $report) {
            $report_ids[$report_id] = $report_id;
            $ctime
                = new CB_TimeStamp();
            $ctime->unix_ts
                = $report['ctime'];
            $report_list_for_view[$report_id]['creator_date']
                = grn_cbpapi_iso8601($ctime);

            $mtime = new CB_TimeStamp();
            $mtime->unix_ts
                = $report['mtime'];
            $report_list_for_view[$report_id]['modifier_date']
                = grn_cbpapi_iso8601($mtime);
        }

        $member_util = GRN_Report_Member_Controller_Utility::getInstance();
        $notification_util
            = GRN_Report_Notification_Controller_Utility::getInstance();
        foreach (array_keys($report_list_for_view) as $key) {
            $notification_for_view = $notification_util->getDetailView($key,
                $report['creator'], []);
            $members_for_view = $member_util->getDetailView($key,
                $report['creator'], []);

            $members = [];
            $operators = [];
            foreach ($members_for_view as $user) {
                $members[$user['id']] = [
                    'name' => $user['name'],
                    'id'   => $user['id']
                ];
                if ($user['is_operator']) {
                    $operators[$user['id']] = [
                        'name' => $user['name'],
                        'id'   => $user['id']
                    ];
                }
            }
            $notification = [];
            foreach ($notification_for_view as $user) {
                $notification[$user['id']] = [
                    'name' => $user['name'],
                    'id'   => $user['id']
                ];
                if ($user['is_operator']) {
                    $operators[$user['id']] = [
                        'name' => $user['name'],
                        'id'   => $user['id']
                    ];
                }
            }

            $report_list_for_view[$key]['members'] = $members;
            $report_list_for_view[$key]['notifyusers'] = $notification;
            $report_list_for_view[$key]['operators'] = $operators;
        }

        //Get Report and Item Data Controller Utility
        require_once('report/controller_util.csp');
        $item_data_util = GRN_Report_ItemData_Controller_Utility::getInstance();

        //Create Parameter Translation Map
        $translation_map_item_data = [
            //Item Data Information
            'iid'                => 'itemdata_id',
            //Item Data ID
            'report'             => 'itemdata_report',
            //Item Data Report ID
            'display_name'       => 'itemdata_display_name',
            //Item Data Display Name
            'type'               => 'itemdata_type',
            //Item Data Type
            'option_string'      => 'itemdata_option_string',
            //Item Data Option String
            'option_string_type' => 'itemdata_option_string_type',
            //Item Data Option String Type
            'data_type'          => 'itemdata_data_type',
            //Item Data data_type
            'settings'           => 'itemdata_settings',
            //Item Data Settings
            'required'           => 'itemdata_required',
            //Item Data Reuired Flag
            'list_index'         => 'itemdata_list_index',
            //Item Data List Index
            'number'             => 'itemdata_number',
            //Item Data Number Value
            'text'               => 'itemdata_text',
            //Item Data text Value
            'html'               => 'itemdata_html',
            //Item Data html Value
            //Item Data File Information
            'fid'                => 'filerelation_id',
            //Item Data File ID
            'file'               => 'filerelation_file',
            //Item Data File ID
            'files'              => 'itemdata_files',
            //Item Data File ID List
        ];

        $report_item_data_list
            = $item_data_util->getReportsListViewEx($translation_map_item_data,
            $report_ids);

        foreach ($report_item_data_list as $report_id => $item_data_list) {
            foreach ($item_data_list as $key => $item_data) {
                $report_item_data_list[$report_id][$key]
                    = $item_data_util->_getViewEx($item_data,
                    $translation_map_item_data);
                $report_item_data_list[$report_id][$key]['view_str']
                    = $this->getViewString($report_item_data_list[$report_id][$key]);
            }
            $report_list_for_view[$report_id]['items']
                =& $report_item_data_list[$report_id];
        }

        return $report_list_for_view;
    }

    function _getView($reports, $column_list = null)
    {
        $report_list_for_view = [];

        if (is_null($column_list)) {
            $column_list
                = GRN_Report_Table_Manager::getColumnList(GRN_REPORT_TABLE_REPORT);
        }
        foreach ($reports as $id => $report) {
            $report_list_for_view[$id]['id'] = $report['_id'];
            foreach ($column_list as $column) {
                $name = $column;
                if (strpos($column, 'col_') === 0) {
                    $name = substr($column, 4, strlen($column));
                }
                $report_list_for_view[$id][$name] = $report[$column];
            }
        }

        return $report_list_for_view;
    }

    function getFollows($report_id, $index = null, $count = null)
    {
        $follow_util = GRN_Report_Follow_Controller_Utility::getInstance();
        $option = [
            'list' => [
                'offset' => $index,
                'limit'  => $count,
            ]
        ];

        //Create Parameter Translation Map for Follow
        $translation_map_follow = [
            'id'                  => '_id',
            'creator'             => 'creator',
            'creator_foreign_key' => 'creator_foreign_key',
            'creator_name'        => 'creator_name',
            'ctime'               => 'ctime',
            'data'                => 'data',
            'follow_id'           => 'follow_id',
            'html'                => 'html',
            'report'              => 'report',
        ];
        $follow_list
            = $follow_util->getListView($translation_map_follow,
            $report_id, $option);

        return $follow_list;
    }

    function writeFollow($user, $report_id, $follow, $files)
    {
        require_once('report/follow_logic.csp');
        $follow_logic = GRN_Report_Follow_Logic::getInstance();

        if (isset($follow['data'])) {
            $follow['col_data'] = $follow['data'];
            unset($follow['data']);
        }

        if (isset($follow['html'])) {
            $follow['col_html'] = $follow['html'];
        }
        if (isset($follow['format_type'])) {
            $follow['col_format_type'] = $follow['format_type'];
        }
        if (isset($follow['data'])) {
            $follow['col_data'] = $follow['data'];
        }

        $follow_id = $follow_logic->add($report_id, $follow, $files);

        return $follow_id;
    }

    function deleteFollow($user, $follow_id)
    {
        require_once('report/follow_logic.csp');
        $follow_logic = GRN_Report_Follow_Logic::getInstance();

        $follow = $follow_logic->get($follow_id);

        if ($follow['col_creator'] == $user->getOID()) {
            $follow_logic->delete($follow_id, $follow['col_report']);
        } else {
            cb_throw_error(E_GRN_RPRT_FOLLOW_NOT_REMOVABLE);
        }

        return $follow_id;
    }

    function deleteReport($report_id)
    {
        require_once('report/report_logic.csp');
        $logic = GRN_Report_Report_Logic::getInstance();
        $logic->delete($report_id);

        return true;
    }

    function getViewString($itemdata)
    {
        $view_str = "";
        switch ($itemdata['data_type']) {
            case 'grn.report.string_single':
            case 'grn.report.menu_string':
            case 'grn.report.radio':
                $view_str = $itemdata['text'];
                break;
            case 'grn.report.string_multiple':
                if (strlen($itemdata['html']) > 0) {
                    $view_str = $itemdata['html'];
                } else {
                    $view_str = $itemdata['text'];
                }
                break;
            case 'grn.report.file':
                break;
            case 'grn.report.checkbox':
                $view_str = isset($itemdata['number']) ? $itemdata['number']
                    : 0;
                break;
            case 'grn.report.numeric':
                if ('' !== trim($itemdata['number'])) {
                    $rank_splitter = $itemdata['settings']['split_rank']
                        ? ',' : '';
                    $itemdata['number'] = number_format(
                        floatval($itemdata['number']),
                        $itemdata['settings']['effective_figures'],
                        '.',
                        $rank_splitter
                    );
                    //Format Minus Type
                    $minus_char = cb_msg(GRN_REPORT_MODULE_ID,
                        'minus_type_' . $itemdata['settings']['minus_type']);
                    $itemdata['number'] = str_replace('-', $minus_char,
                        $itemdata['number']);
                }
                $view_str = $itemdata['number'];
                break;
            case 'grn.report.date':
                if ('' !== trim($itemdata['number'])) {
                    $ts = new CB_TimeStamp();
                    $ts->unix_ts = $itemdata['number'];
                    $tsex = new CB_TimeStampEx($ts);
                    $date = $tsex->getDate();
                    $view_str = $date->year . cb_msg('grn.report',
                            'item_date_year_unit') . $date->month
                                . cb_msg('grn.report',
                            'item_date_month_unit') . $date->day
                                . cb_msg('grn.report', 'item_date_day_unit');
                } else {
                    $view_str = ' ' . cb_msg('grn.report',
                            'item_date_year_unit') . ' ' . cb_msg('grn.report',
                            'item_date_month_unit') . ' ' . cb_msg('grn.report',
                            'item_date_day_unit');
                }
                break;
            case 'grn.report.time':
                if ( ! is_null($itemdata['number'])) {
                    require_once('report/item_resources.csp');
                    $item_util = grn_report_get_item_util('grn.report.time');
                    $item = ['col_number' => $itemdata['number']];
                    $time = $item_util->getItemData($item);
                    $view_str = cb_date_format("DateTimeCompact", $time, null,
                        null, null);
                }
                break;
        }

        return $view_str;
    }
}

