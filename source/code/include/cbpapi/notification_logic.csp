<?php

use grn\grn\access\service\AppAccess;
use grn\grn\access\utility\AppAvailabilityUtil;

require_once('grn/notification.csp');
require_once('grn/controller.csp');

class GRN_CBPApi_Notification_Logic
{
    const GRN_DISCUSSION_SUB_MODULE_ID_SUFFIX = 'discussion';
    const GRN_TODO_SUB_MODULE_ID_SUFFIX = 'todo';
    const GRN_FACILITY_APPROVAL_SUB_MODULE_ID_SUFFIX = 'facility_approval';

    const GRN_EXTERNAL_MODULE_ID_DISCUSSION = "grn.space.discussion";
    const GRN_EXTERNAL_MODULE_ID_TODO = "grn.space.todo";
    const GRN_EXTERNAL_MODULE_ID_FACILITY_APPROVAL = "grn.schedule.facility_approval";

    /**
     * @return GRN_CBPApi_Notification_Logic
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_CBPApi_Notification_Logic();
        }

        return $_instance;
    }

    function getNotificationForView(
        &$login,
        $raw_module_id,
        $unique_id,
        $data_type
    ) {
        if (strlen($raw_module_id) <= 0 || strlen($unique_id) <= 0) {
            return [];
        }

        $app_not_available = $this->getConditionApplicationNotAvailable($login);
        if (count($app_not_available) > 0
            && in_array("'" . $raw_module_id . "'", $app_not_available)
        ) {
            return null;
        }

        $notification_for_view = [];
        $sub_module_id = $this->getSubModuleId($raw_module_id);

        $module_id = (empty($sub_module_id)) ? $raw_module_id
            : substr($raw_module_id, 0, strrpos($raw_module_id, '.'));

        $notify = [];
        $notify = $this->getNotifyDataPropertiesFast($login, $module_id,
            $unique_id, $data_type, $sub_module_id);
        if (is_null($notify)) {
            return null;
        }
        $app_id = '';
        // <module id>
        $notification_for_view['module_id'] = $raw_module_id;

        //item
        $notification_for_view['item'] = $unique_id;

        $notifyTimestamp = array_key_exists('col_timestamp', $notify)
            ? $notify['col_timestamp'] : null;
        $utc_datetime = null;
        if ($notifyTimestamp) {
            $ts = new CB_TimeStamp();
            $ts->unix_ts = $notifyTimestamp;
            require_once('cbpapi/util.csp');
            $utc_datetime = grn_cbpapi_iso8601($ts);
        }

        $status = 'create';

        if ($data_type == 'notify') {
            //is_not_history
            $notification_for_view['is_history'] = 'false';

            //receive_datetime            
            $notification_for_view['receive_datetime'] = $utc_datetime;

            $read_status = array_key_exists('col_status', $notify)
                ? $notify['col_status'] : null;

            if ($read_status == 'confirmed') {
                $timestamp = $this->getTimestamp($login, $module_id,
                    $unique_id, 'notify', $sub_module_id);
                $read_timestamp = isset($timestamp['col_timestamp'])
                    ? $timestamp['col_timestamp'] : null;
                $utc_read_datetime = null;
                if ($read_timestamp) {
                    $ts = new CB_TimeStamp();
                    $ts->unix_ts = $read_timestamp;
                    require_once('cbpapi/util.csp');
                    $utc_read_datetime = grn_cbpapi_iso8601($ts);
                }
                //read_datetime
                $notification_for_view['read_datetime'] = $utc_read_datetime;

                // history status
                $history_status = isset($timestamp['col_status'])
                    ? $timestamp['col_status'] : null;
                if ($history_status == 'update') {
                    $status = 'update';
                } else {
                    $status = 'create';
                }

                //is_not_history
                $notification_for_view['is_history'] = 'true';
            } elseif ($read_status == 'update') {
                $status = 'update';
            } elseif ($read_status == 'unread') {
                $status = 'create';
            }
            $notification_for_view['type'] = 'notification';
        }
        if ($data_type == 'history') {
            //read_datetime
            $notification_for_view['read_datetime'] = $utc_datetime;

            $timestamp = $this->getTimestamp($login, $module_id, $unique_id,
                'history', $sub_module_id);
            // read status
            $read_status = isset($timestamp['col_status'])
                ? $timestamp['col_status'] : null;
            if ($read_status == 'confirmed') {
                // history status
                $history_status = array_key_exists('col_status', $notify)
                    ? $notify['col_status'] : null;
                if ($history_status == 'update') {
                    $status = 'update';
                } else {
                    $status = 'create';
                }
            } elseif ($read_status == 'update') {
                $status = 'update';
            } elseif ($read_status == 'unread') {
                $status = 'create';
            }
            $receive_timestamp = isset($timestamp['col_timestamp'])
                ? $timestamp['col_timestamp'] : null;
            $utc_receive_datetime = null;
            if ($receive_timestamp) {
                $ts = new CB_TimeStamp();
                $ts->unix_ts = $receive_timestamp;
                require_once('cbpapi/util.csp');
                $utc_receive_datetime = grn_cbpapi_iso8601($ts);
            }
            //read_datetime
            $notification_for_view['receive_datetime'] = $utc_receive_datetime;

            //is_history
            $notification_for_view['is_history'] = 'true';
            $notification_for_view['type'] = 'notification_history';
        }

        //org_data
        $col_org_data = (array_key_exists('col_org_data', $notify))
            ? $notify['col_org_data'] : null;
        $org_data = cb_unserialize($col_org_data,
            ["allowed_classes" => false]);

        //subject
        $subject = array_key_exists('col_subject', $notify)
            ? $notify['col_subject'] : '';
        //Start GRN35-357
        require_once('schedule/resources.csp');
        if ($login instanceof CB_User
            && $notify['col_module_id'] == GRN_SCHEDULE_MODULE_ID
            && ! empty($notify['col_event_start_ts'])
        ) {
            $eventStartTs = new CB_Timestamp();
            $eventStartTs->unix_ts = $notify['col_event_start_ts'];

            require_once('fw/i18n.csp');
            $timezone = CB_I18n::getUserTimezone($login);

            $eventStartTsEx = new CB_TimestampEx($eventStartTs, $timezone);
            $setDateTime = $eventStartTsEx->getDateTime();

            $createTimeTs = new CB_TimeStamp();
            $createTimeTs->unix_ts = $notifyTimestamp;

            $createTimeEx = new CB_TimestampEx($createTimeTs, $timezone);
            $createDate = $createTimeEx->getDate();

            if ($createDate->compare($setDateTime) === 0) {
                if (isset($org_data['type']) && $setDateTime->hour === 0
                    && $setDateTime->minute === 0
                    && $setDateTime->second === 0
                ) {
                    if (($org_data['type'] & GRN_SCHEDULE_EVENT_TYPE_ALLDAY)
                        !== GRN_SCHEDULE_EVENT_TYPE_ALLDAY
                        && ($org_data['type'] & GRN_SCHEDULE_EVENT_TYPE_BANNER)
                           !== GRN_SCHEDULE_EVENT_TYPE_BANNER
                    ) {
                        $str = cb_date_format('TimeShort_HM', $setDateTime,
                            $login->getOID());
                    }
                } else {
                    $str = cb_date_format('TimeShort_HM', $setDateTime,
                        $login->getOID());
                }
            } else {
                $str = cb_date_format('DateShort_MD', $setDateTime,
                    $login->getOID());
            }
        }
        if ( ! empty($subject) && isset($str)) {
            $notification_for_view['subject'] = $str . " " . $subject;
        } else {
            $notification_for_view['subject'] = $subject;
        }
        //End GRN35-357

        //subject_icon
        $subject_icon = array_key_exists('col_subject_icon',
            $notify) ? $notify['col_subject_icon'] : '';
        $notification_for_view['subject_icon'] = $subject_icon;

        //subject_url
        $subject_url = array_key_exists('col_subject_url', $notify)
            ? $notify['col_subject_url'] : '';
        //GRN2-2167
        $notify_status = (array_key_exists('col_status', $notify))
            ? $notify['col_status'] : null;
        $id_array = explode('.',
            $module_id);//Ex:grn.message --> [0] => grn ; [1] : message
        $app_id = $id_array[1] ?? null;
        $app_full_id = substr($module_id, 4);
        require_once 'grn/application.csp';
        $app_locator = GRN_ApplicationLocator::instance();
        require_once('notification/application.csp');
        /** @var GRN_Notification_App $notification_app */
        $notification_app = $app_locator->getInstance(GRN_NOTIFICATION_APP_ID);
        assert('! is_null( $notification_app )');
        $apps =& $notification_app->getApplicationList(false);
        $action_id = null;
        $page_info = [];
        if (is_array($apps) && array_key_exists($app_id, $apps)
            && ! is_null($apps[$app_id])
        ) {
            $action_id = array_key_exists('col_action_id', $notify)
                ? $notify['col_action_id'] : null;
            $page_info = $apps[$app_id]->getNotificationPageInfo($login,
                $app_full_id, $unique_id, $org_data, $notify_status, $action_id,
                $sub_module_id);

            if (strlen($notification_for_view['subject_icon']) <= 0) {
                $notification_for_view['subject_icon']
                    = $notify['col_subject_icon'];
            }
        }
        if ($subject_url == '' && isset($page_info['url_params'])
            && isset($page_info['subject_page'])
        ) {
            $page_info['url_params']['nid'] = $notify['_id'];
            $fragment = @ $page_info['subject_fragment'];
            $subject_url
                = cb_get_full_url($page_info['subject_page'],
                $page_info['url_params'], $fragment);
        }

        if ($module_id === GRN_NOTIFICATION_CYBOZU_INFORMATION) {
            $subject_url = cb_get_full_url('notification/notify_redirect',
                ['nid' => $notify['_id'], 'ct' => 's']);
        }

        //GRN2-2167
        $notification_for_view['subject_url'] = $subject_url;

        //abstract
        //$abstractについて　本来であれば$page_info['isBlankDisplayAbstract']を評価して$abstractの値を操作するのだが、社外向けに公開している既存インタフェースは変えない方針なので　ここでは評価しない
        $abstract = array_key_exists('col_abstract',
            $notify) ? $notify['col_abstract'] : '';
        $notification_for_view['abstract'] = $abstract;

        if (strcmp($module_id, 'grn.schedule') === 0) {
            switch ($action_id) {
                case 'create':
                    $status = 'create';
                    break;
                case 'update':
                    $status = 'update';
                    break;
                case 'delete':
                    $status = 'delete';
                    break;
            }
        }

        //status
        $notification_for_view['status'] = $status;

        //abstract_url
        $abstract_url = array_key_exists('col_abstract_url', $notify)
            ? $notify['col_abstract_url'] : '';
        //GRN2-2167
        if ($abstract_url == '') {
            if (isset($org_data['follow']) || isset($org_data['follow_id'])) {
                $abstract_url = cb_get_full_url($page_info['subject_page'],
                    $page_info['url_params']);
                $abstract_url .= "#follow";
            } else {
                $abstract_url = $subject_url;
            }
        }
        //GRN2-2167
        $notification_for_view['abstract_url'] = $abstract_url;

        //abstract_icon
        $abstract_icon = array_key_exists('col_abstract_icon',
            $notify) ? $notify['col_abstract_icon'] : '';
        $notification_for_view['abstract_icon'] = $abstract_icon;

        //sender_name
        $sender_name = array_key_exists('col_sender_name',
            $notify) ? $notify['col_sender_name'] : '';
        $notification_for_view['sender_name'] = $sender_name;

        //sender_id
        $sender_id = array_key_exists('col_sender_id',
            $notify) ? $notify['col_sender_id'] : '';
        $notification_for_view['sender_id'] = $sender_id;

        //sender_url
        $sender_url = array_key_exists('col_sender_url', $notify)
            ? $notify['col_sender_url'] : '';
        //GRN2-2167
        if ($sender_url == '') {
            if ($sender_id == '' && $sender_name <> ''
                && strcmp($module_id, 'grn.mail') === 0
            ) {
                $name = explode(' ', $sender_name);
                $string_name = htmlentities($name[0]);
                $string_name = preg_replace("/&([a-z])[a-z]+;/i", "",
                    $string_name);
                global $G_container_base;
                $uum =& $G_container_base->getInstance('uum');
                $user_obj = $uum->getUserByForeignKey($string_name);
                if ( ! is_null($user_obj) && is_a($user_obj, 'CB_user')) {
                    $sender_id = $user_obj->getOID();
                } else {
                    require_once('sysapi/logic.csp');
                    $sender_id = GRN_SYSAPI_INVALID_USERID;
                }
            }
            $sender_url = GRN_ControllerUtil::getUserProfileURL($sender_id,
                false, true);
        }
        //GRN2-2167
        $notification_for_view['sender_url'] = $sender_url;

        //group_name
        $group_name = array_key_exists('col_group_name',
            $notify) ? $notify['col_group_name'] : '';
        $notification_for_view['group_name'] = $group_name;

        //attached
        $attached = 'false';
        $org_data = array_key_exists('col_org_data', $notify)
            ? $notify['col_org_data'] : null;
        if (0 < strlen($org_data)) {
            $org_data = cb_unserialize($org_data, ["allowed_classes" => false]);
            switch ($module_id) {
                case 'grn.message':
                    if (array_key_exists('file', $org_data)
                        && $org_data['file']
                    ) {
                        $attached = 'true';
                    }
                    break;
                case 'grn.bulletin':
                    if (array_key_exists('files', $org_data)
                        && $org_data['files']
                    ) {
                        $attached = 'true';
                    }
                    break;
                case 'grn.mail':
                    if (array_key_exists('attached', $org_data)
                        && $org_data['attached']
                    ) {
                        $attached = 'true';
                    }
                    break;
            }
        }
        $notification_for_view['attached'] = $attached;

        //version
        $version = array_key_exists('col_timestamp',
            $notify) ? $notify['col_timestamp'] : null;
        $notification_for_view['version'] = $version;

        return $notification_for_view;
    }

    function getNotifyDataPropertiesFast(
        & $user,
        $module_id,
        $unique_id,
        $data_type,
        $sub_module_id = ''
    ) {
        if ( ! ($user instanceof CB_User) || 0 == strlen($module_id)
             || 0 == strlen($unique_id)
        ) {
            return null;
        }

        $data_ary = $this->_getNotifyDataRow($user, $module_id, $sub_module_id,
            $unique_id, $data_type);
        if ( ! is_array($data_ary) || 0 == count($data_ary)) {
            return null;
        }

        return $data_ary;
    }

    private function _getNotifyDataRow(
        & $user,
        $module_id,
        $sub_module_id,
        $unique_id,
        $data_type
    ) {
        if ( ! ($user instanceof CB_User) || 0 == strlen($module_id)
             || 0 == strlen($unique_id)
        ) {
            return null;
        }

        if ( ! $this->isAvailableFor($user, $module_id)
             || ! AppAccess::isAppAvailableExternalAccess($module_id,
                $user->getOID())
        ) {
            return null;
        }
        $user_id = $user->getOID();

        $dbconn = grn_notification_get_connection($user_id);

        require_once('fw/i18n/locale.csp');
        require_once('space/GrnSpaceApplication.csp');
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $login = $uum->getLoginUser();

        require_once("fw/i18n.csp");
        $i18n = CB_I18N::getInstance();
        $defaultLanguage = $i18n->getCurrentLanguage($user_id);
        $welcomeSpaceMessage = cb_msg(GrnSpaceApplication::GRN_SPACE_MODULE_ID,
            'notify_subject', null, $defaultLanguage);

        // Notify data type
        switch ($data_type) {
            case GRN_NOTIFICATION_TYPE_NOTIFY:
                $table_name = GRN_NOTIFICATION_NOTIFY_TABLE;
                break;
            case GRN_NOTIFICATION_TYPE_HISTORY:
                $table_name = GRN_NOTIFICATION_HISTORY_TABLE;
                break;
            default:
                // データ不正
                assert('null');

                return 0;
        }
        $query = 'SELECT ' .
                 'n._id, ' .
                 'n.col_module_id, ' .
                 'n.col_action_id, ' .
                 'n.col_unique_id, ' .
                 'n.col_org_data, ' .
                 "IF( n.col_module_id ='grn.space' AND n.col_sub_module_id = '', '@S', n.col_subject) AS col_subject, "
                 .
                 'n.col_subject_f, ' .
                 'n.col_subject_b, ' .
                 'n.col_abstract, ' .
                 'n.col_abstract_f, ' .
                 'n.col_abstract_b, ' .
                 'n.col_sender_name, ' .
                 'n.col_sender_id, ' .
                 'n.col_sender_url, ' .
                 'n.col_subject_url, ' .
                 'n.col_subject_icon, ' .
                 'n.col_abstract_url, ' .
                 'n.col_abstract_icon, ' .
                 'n.col_group_name, ' .
                 'n.col_timestamp, ' .
                 'n.col_status, ' .
                 'n.col_read, ' .
                 'n.col_popup, ' .
                 'n.col_attached, ';
        if ($data_type == GRN_NOTIFICATION_TYPE_NOTIFY) {
            $query .= 'n.col_auto_confirm, ' .
                      'n.col_confirm_required, ';
        }
        $query .= 'n.col_sub_module_id, ' .
                  'n.col_space_id, ' .
                  'n.col_space_name, ' .
                  'n.col_event_start_ts, ' .
                  'n.col_user ' .
                  'FROM ' .
                  grn_get_personal_tablename($user_id, 'tab_' . $table_name)
                  . ' AS n ' .
                  "WHERE ((n.col_user='@S') AND (n.col_module_id='@S') AND (n.col_sub_module_id='@S') AND (n.col_unique_id='@S'))";

        $query = cb_queryf($dbconn, $query, $welcomeSpaceMessage, $user_id,
            $module_id, $sub_module_id, $unique_id);
        $query = $dbconn->select_format($query, 0, 1, CB_DATABASE_NO_LOCK);

        if (cb_is_db_result($result = $dbconn->query($query))) {
            $row = $dbconn->fetch_assoc($result);
            if (is_array($row) && 0 < count($row)) {
                return $row;
            }
        }

        return null;
    }

    function getTimestamp(
        & $user,
        $module_id,
        $unique_id,
        $data_type,
        $sub_module_id = ''
    ) {
        if ( ! ($user instanceof CB_User) || 0 == strlen($module_id)
             || 0 == strlen($unique_id)
        ) {
            return null;
        }

        $user_id = $user->getOID();

        $dbconn = grn_notification_get_connection($user_id);

        $format
            = "(col_user='@S') AND (col_module_id='@S') AND (col_sub_module_id='@S') AND (col_unique_id='@S')";
        $condition = cb_queryf($dbconn, $format, $user_id, $module_id,
            $sub_module_id, $unique_id);
        // Notify data type
        switch ($data_type) {
            case GRN_NOTIFICATION_TYPE_NOTIFY:
                $table_name = GRN_NOTIFICATION_NOTIFY_TABLE;
                break;
            case GRN_NOTIFICATION_TYPE_HISTORY:
                $table_name = GRN_NOTIFICATION_HISTORY_TABLE;
                break;
            default:
                // データ不正
                assert('null');

                return 0;

        }
        $mapping_name = grn_get_personal_tablename($user_id,
            'tab_' . $table_name);
        $format = 'SELECT col_timestamp, col_status FROM ' . $mapping_name
                  . ' WHERE (%s)';
        $query = sprintf($format, $condition);
        $query = $dbconn->select_format($query, 0, 1,
            CB_DATABASE_NO_LOCK);
        if (cb_is_db_result($result = $dbconn->query($query))) {
            $row = $dbconn->fetch_assoc($result);
            if (is_array($row) && 0 < count($row)) {
                return $row;
            }
        }

        return null;
    }

    /**
     * ユーザーの通知データ一覧の取得
     *
     * @param   string $data_type データタイプ（通知データ：'notify', 通知履歴データ：'history')
     * @param   object $user      ユーザーオブジェクト
     * @param   object $start_ts  データ検索範囲の開始日時（この値自体を含む）。nullで指定なし。デフォルト:null
     * @param   object $last_ts   データ検索範囲の終了日時（この値自体は含まれない）。nullで指定なし。デフォルト:null
     *
     * @return  array   通知データのリスト
     */
    function getDataList(
        $data_type,
        & $user,
        $start_ts = null,
        $last_ts = null,
        $module_id = null
    ) {
        $order_by = ' n.col_timestamp DESC ';
        if ( ! ($user instanceof CB_User)) {
            // アクセス権を判定する
            cb_throw_error(E_COMMON_ACCESS_DENIED);
        }

        $notify_list = [];
        if (0 == strlen($data_type)) {
            return $notify_list;
        }

        $dbconn = grn_notification_get_connection($user->getOID());

        $conditions = [];
        switch ($data_type) {
            case GRN_NOTIFICATION_TYPE_NOTIFY:
                $table_name = grn_get_personal_tablename($user->getOID(),
                    'tab_grn_notification_notify');
                break;
            case GRN_NOTIFICATION_TYPE_HISTORY:
                $table_name = grn_get_personal_tablename($user->getOID(),
                    'tab_grn_notification_history');
                break;
            default:
                {
                    $___ret = null;

                    return $___ret;
                }
        }

        $tables = $table_name
                  . ' n LEFT JOIN tab_cb_user u ON n.col_user = u._id AND u.col_deleted IS NULL ';

        // ユーザーIDを検索条件に追加する
        $conditions[] = cb_queryf($dbconn, "( col_user = '@S' )",
            $user->getOID());

        // 検索期間を検索条件に追加する
        if ($start_ts instanceof CB_TimeStamp) {
            $conditions[] = sprintf("( col_timestamp >= '%d' )",
                $start_ts->unix_ts);
        }
        if ($last_ts instanceof CB_TimeStamp) {
            $conditions[] = sprintf("( col_timestamp <= '%d' )",
                $last_ts->unix_ts);
        }
        if ( ! is_null($module_id)) {
            $conditions[] = cb_queryf($dbconn, "( col_module_id = '@S')",
                $module_id);
        }

        $app_not_available = $this->getConditionApplicationNotAvailable($user);
        if (count($app_not_available) > 0) {
            $app_not_available = "(" . implode(',', $app_not_available) . ")";
            $conditions[] = sprintf("col_module_id NOT IN %s",
                $app_not_available);
        }

        $query = '';
        // クエリをフォーマットする
        if (count($conditions) > 0) {
            $query_format
                = 'SELECT n.*, u.col_deleted FROM %s WHERE ( %s ) ORDER BY %s';
            $query = sprintf($query_format, $tables,
                implode(' AND ', $conditions),
                $order_by);
        } else {
            return $notify_list;
        }
        $query = $dbconn->select_format($query, 0, -1, CB_DATABASE_NO_LOCK);
        $result = $dbconn->query($query);
        if ($result === false) {
            $dbconn->throwError([
                'query' => 'failed query on SELECT: ' . $query
            ]);
        }

        while ($row = $dbconn->fetch_assoc($result)) {
            if ( ! is_null($row['col_deleted'])) {
                continue;
            }
            $notify = [];
            $notify['id'] = $row['_id'];
            $module_id = $row['col_module_id'];
            $sub_module_id = $row['col_sub_module_id'];
            // GRN35-750
            if (empty ($sub_module_id)) {
                $notify['module_id'] = $module_id;
            } else {
                require_once('space/GrnSpaceApplication.csp');
                require_once('schedule/resources.csp');
                switch ($sub_module_id) {
                    case GrnSpaceApplication::GRN_DISCUSSION_SUB_MODULE_ID :
                        $notify['module_id'] = $module_id . '.'
                                               . self::GRN_DISCUSSION_SUB_MODULE_ID_SUFFIX;
                        break;
                    case GrnSpaceApplication::GRN_TODO_SUB_MODULE_ID :
                        $notify['module_id'] = $module_id . '.'
                                               . self::GRN_TODO_SUB_MODULE_ID_SUFFIX;
                        break;
                    case GRN_FACILITY_APPROVAL_SUB_MODULE_ID :
                        $notify['module_id'] = $module_id . '.'
                                               . self::GRN_FACILITY_APPROVAL_SUB_MODULE_ID_SUFFIX;
                        break;
                    default:
                        $notify['module_id'] = $module_id;
                }
            }
            $unique_id = $row['col_unique_id'];
            $version = $row['col_timestamp'];
            if ($data_type == 'notify') {
                // get read status
                $status = $row['col_status'];
                if ($status == 'confirmed') {
                    $timestamp = $this->getTimestamp($user, $module_id,
                        $unique_id, 'history', $sub_module_id);
                    if (is_array($timestamp)) {
                        $read_timestamp = array_key_exists('col_timestamp',
                            $timestamp) ? $timestamp['col_timestamp'] : null;
                        $version = $read_timestamp;
                    }
                }
            }
            $notify['version'] = $version;
            $notify['unique_id'] = $unique_id;
            $key = $notify['module_id'] . $unique_id;
            $notify_list[$key] = $notify;
        }
        // 結果の開放
        $dbconn->free_result($result);

        return $notify_list;
    }

    function getConditionApplicationNotAvailable($user)
    {
        $internal_app_ids
            = AppAccess::getAvailabilityAppIdsInternalByUserId($user->getOID());
        $external_app_ids
            = AppAccess::getAvailabilityExternalAppIdsByUserId($user->getOID(),
            array_keys($internal_app_ids));
        $arr_app_not_available = [];
        foreach ($internal_app_ids as $app_id => $availability) {
            $is_external_access = cb_at($external_app_ids, $app_id,
                AppAvailabilityUtil::ACCESS_DENIED);
            if ( ! $availability
                 || $is_external_access == AppAvailabilityUtil::ACCESS_DENIED
            ) {
                $arr_app_not_available[] = "'grn." . $app_id . "'";
            }
        }

        return $arr_app_not_available;
    }

    /**
     * @param    $module_id    grn.schedule | grn.message | grn.mail | grn.cabinet | grn.report
     *
     * @return   boolean    TRUE: have privilege | FALSE: do not have privilege
     */
    function isAvailableFor($user, $module_id)
    {
        require_once("grn/notification.csp");

        return GRN_Notification_Service::getInstance()
                                       ->isAvailableFor($user, $module_id);
    }

    /**
     * @param   string $module_id モジュールID
     *
     * @return  string  sub_module_id
     */
    public function getSubModuleId($module_id)
    {
        require_once('space/GrnSpaceApplication.csp');
        require_once('schedule/resources.csp');
        $suffix = substr($module_id, strrpos($module_id, '.') + 1);
        switch ($suffix) {
            case self::GRN_DISCUSSION_SUB_MODULE_ID_SUFFIX:
                $sub_module_id
                    = GrnSpaceApplication::GRN_DISCUSSION_SUB_MODULE_ID;
                break;
            case self::GRN_TODO_SUB_MODULE_ID_SUFFIX:
                $sub_module_id = GrnSpaceApplication::GRN_TODO_SUB_MODULE_ID;
                break;
            case self::GRN_FACILITY_APPROVAL_SUB_MODULE_ID_SUFFIX:
                $sub_module_id = GRN_FACILITY_APPROVAL_SUB_MODULE_ID;
                break;
            default :
                $sub_module_id = '';
        }

        return $sub_module_id;
    }

    public function convertToInternalModuleId($externalModuleId)
    {
        if ($externalModuleId == self::GRN_EXTERNAL_MODULE_ID_DISCUSSION
            || $externalModuleId == self::GRN_EXTERNAL_MODULE_ID_TODO
        ) {
            require_once("space/GrnSpaceApplication.csp");

            return GrnSpaceApplication::GRN_SPACE_MODULE_ID;
        }
        if ($externalModuleId
            == self::GRN_EXTERNAL_MODULE_ID_FACILITY_APPROVAL
        ) {
            require_once('schedule/resources.csp');

            return GRN_SCHEDULE_MODULE_ID;
        }

        return $externalModuleId;
    }
}

function compare_item_versions($item_versions, $candidate_item_versions)
{
    assert('is_array($item_versions)');
    assert('is_array($candidate_item_versions)');

    $result = [];

    foreach (
        array_intersect(array_keys($candidate_item_versions),
            array_keys($item_versions)) as $key
    ) {
        $span = intval($candidate_item_versions[$key]['version'])
                - intval($item_versions[$key]['version']);
        if ($span != 0) {
            $result[$key]['version']
                = $candidate_item_versions[$key]['version'];
            $result[$key]['module_id']
                = $candidate_item_versions[$key]['module_id'];
            $result[$key]['item']
                = $candidate_item_versions[$key]['unique_id'];
            $result[$key]['operation'] = 'modify';
        }
    }

    foreach (
        array_diff(array_keys($item_versions),
            array_keys($candidate_item_versions)) as $key
    ) {
        $result[$key]['module_id'] = $item_versions[$key]['module_id'];
        $result[$key]['item'] = $item_versions[$key]['item'];
        $result[$key]['operation'] = 'remove';
        $result[$key]['version'] = '0';
    }

    foreach (
        array_diff(array_keys($candidate_item_versions),
            array_keys($item_versions)) as $key
    ) {
        $result[$key]['version'] = $candidate_item_versions[$key]['version'];
        $result[$key]['module_id']
            = $candidate_item_versions[$key]['module_id'];
        $result[$key]['item']
            = $candidate_item_versions[$key]['unique_id'];
        $result[$key]['operation'] = 'add';
    }

    return $result;
}


