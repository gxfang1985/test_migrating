<?php

namespace grn\cbpapi\screen;

require_once("workflow/resources.csp");
require_once('cbpapi/util.csp');

class WorkflowGetRequest
{
    /**
     * @param mixed $path_step (array or FALSE)
     *
     * @return null | \CB_Timestamp
     */
    function getLastApprovedTime($path_step)
    {
        if ( ! isset($path_step["users"])) {
            return null;
        }

        $approve_time = null;
        foreach ($path_step['users'] as $user) {
            if ( ! isset($user['col_ptime'])) {
                continue;
            }

            if ($this->approvalTimeUpdateIsNeeded($approve_time, $user,
                $path_step['col_acceptance_type'])
            ) {
                $approve_time = $user['col_ptime'];
            }

        }

        return $approve_time;
    }

    /**
     * @param \CB_TimeStamp $time
     * @param array         $approval_user
     * @param               $acceptance_type
     *
     * @return bool
     */
    private function approvalTimeUpdateIsNeeded(
        $time,
        array $approval_user,
        $acceptance_type
    ) {
        if (is_null($time)) {
            return true;
        }

        assert('$time instanceof CB_TimeStamp');
        if ($acceptance_type === GRN_WORKFLOW_ACCEPTANCE) {
            return $time->unix_ts < $approval_user['col_ptime']->unix_ts;
        } else {
            return $time->unix_ts > $approval_user['col_ptime']->unix_ts;
        }

    }

    /**
     * @return string
     */
    private function getCurrentTimeZone()
    {
        $I18N = \CB_I18N::getInstance();
        $timezone = $I18N->getCurrentTimezone();

        return $timezone;
    }

    /**
     * @return \CB_TimeStampEx
     */
    private function getTimeStampExUsingUTC()
    {
        $timestamp = new \CB_TimeStampEx();
        $timestamp->setTimeZone('UTC');

        return $timestamp;
    }

    /**
     * @param $obj_date
     *
     * @return \CB_TimeStampEx
     */
    function convert_utc_to_local($obj_date)
    {
        $timezone = $this->getCurrentTimeZone();
        $timestamp = $this->getTimeStampExUsingUTC();

        if ($obj_date instanceof \CB_DateTime) {
            $timestamp->setDateTime($obj_date);
        }
        $timestamp->setTimeZone($timezone);

        return $timestamp;
    }
}
