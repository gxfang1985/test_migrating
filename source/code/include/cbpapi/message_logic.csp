<?php
require_once('message/message_logic.csp');

class GRN_CBPApi_Message_Logic extends GRN_Message_Logic
{
    /**
     * @return GRN_CBPApi_Message_Logic
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_CBPApi_Message_Logic();
        }

        return $_instance;
    }

    function getMessageForViewByIds(&$login, $message_ids, $is_search = false)
    {
        if ( ! is_array($message_ids) || count($message_ids) <= 0) {
            return [];
        }
        $messages_for_view = [];
        foreach ($message_ids as $key => $message_id) {
            $message_for_view = [];
            if ( ! $is_search) {
                $my_message = $this->hasPrivilege($login, $message_id);
                if ($my_message === false) {
                    require_once('message/error_code.csp');
                    cb_throw_error(E_GRN_MESSAGE_MESSAGE_NOT_FOUND,
                        [
                            'app_name' => cb_msg(GRN_MESSAGE_MODULEID,
                                'application_name')
                        ],
                        [
                            'app_name' => cb_msg(GRN_MESSAGE_MODULEID,
                                'application_name')
                        ],
                        [
                            'app_name' => cb_msg(GRN_MESSAGE_MODULEID,
                                'application_name')
                        ]);
                }

                $category_id = $my_message['cid'];
                $relation_id = $my_message['rid'];
                $message_id = $my_message['mid'];
            } else {
                $relation_id = $key;
            }
            $message = $this->getMessageByApi($login, $relation_id, $message_id,
                false);
            // メッセージ本文
            $assign_message_map = [
                'mid'           => 'message_id',
                'data'          => 'data',
                'html_data'     => 'html_data',
                'subscribe'     => 'subscription',
                'creator_uid'   => 'creator_id',
                'creator_name'  => 'creator_name',
                'ctime'         => 'ctime',
                'mtime'         => 'mtime',
                'last_mtime'    => 'last_mtime',
                'last_otime'    => 'last_otime',
                'cid'           => 'folder_id',
                'modifier_uid'  => 'modifier_id',
                'modifier_name' => 'modifier_name',
                'need_confirm'  => 'need_confirm',
                'confirmed'     => 'confirmed',
                'type'          => 'message_type',
                'is_snapshot'   => 'is_snapshot',
                'delete_time'   => 'delete_time',
            ];

            $uids = [];
            $message_for_view = [];
            foreach ($assign_message_map as $view_name => $data_name) {
                $message_for_view[$view_name] = $message[$data_name];
            }
            $message_for_view['subject'] = array_key_exists('subject', $message)
                ? $message['subject'] : '';
            $version = $message['ctime']->unix_ts;
            if ( ! is_null($message['last_mtime'])) {
                $version = $message['last_mtime']->unix_ts;
            }
            if ( ! is_null($message['last_otime'])
                 && $version < $message['last_otime']->unix_ts
            ) {
                $version = $message['last_otime']->unix_ts;
            }
            require_once('cbpapi/util.csp');
            // send date
            $create_date = grn_cbpapi_iso8601($message['ctime']);
            $message_for_view['creator_date'] = $create_date;
            // modify date
            $modify_date = $message['ctime'];
            if ( ! is_null($message['mtime'])) {
                $modify_date = $message['mtime'];
            }
            $modify_date = grn_cbpapi_iso8601($modify_date);
            $message_for_view['modifier_date'] = $modify_date;

            $uids[] = isset($message_for_view['creator_uid'])
                ? $message_for_view['creator_uid'] : false;
            $uids[] = isset($message_for_view['modifier_id'])
                ? $message_for_view['modifier_id'] : false;

            //folders
            $folders = $this->getFoldersMessageRelation($login,
                $message_id);
            $message_for_view['folders'] = $folders;

            // attached files
            $file_list = $message['files'];
            if (count($file_list) > 0) {
                $file_info = _grn_message_attached_files($file_list);
                $message_for_view['attach_files'] = $file_info['files'];
                $message_for_view['del_file_num'] = $file_info['del_file_num'];
            }

            // addressees
            $addressee_list = $message['addressees'];
            $all_addressees = count($addressee_list);
            if ($all_addressees > 0) {
                $is_sender = false;
                $addressees = [];
                foreach ($addressee_list as $addressee) {
                    $_addressee = [];
                    $_addressee['id'] = $addressee['id'];
                    $_addressee['name'] = $addressee['name'];
                    $_addressee['deleted'] = $addressee['delete_flag'];
                    $_addressee['confirmed'] = $addressee['confirmed'];
                    if ($addressee['dtime']->unix_ts == 0) {
                        $_addressee['delete_flag'] = 'false';
                    } else {
                        $_addressee['delete_flag'] = 'true';
                    }

                    $addressees[] = $_addressee;

                    if ($message['creator_id'] == $addressee['id']) {
                        $is_sender = true;
                    }

                    if ($addressee['rtime'] instanceof CB_TimeStamp
                        && $version < $addressee['rtime']->unix_ts
                    ) {
                        $version = $addressee['rtime']->unix_ts;
                    }
                }

                $message_for_view['addressees'] = $addressees;
                $message_for_view['all_addressees'] = $all_addressees;
                $voices = $this->getVoices($login,
                    $relation_id, $message_id);
                $voice_num = 0;
                if (is_array($voices) && count($voices) > 0) {
                    foreach ($voices as $voice) {
                        if ( ! $is_sender
                             && $voice['user_id'] == $message['creator_id']
                        ) {
                            continue;
                        }

                        if (array_key_exists('data', $voice)) {
                            $voice_num++;
                        }
                    }
                }

                $message_for_view['follow_write_num'] = $voice_num;
                $message_for_view['version'] = $version;
            }

            // フォロー
            $follow_list = $message['follows'];
            if (count($follow_list) > 0) {
                $assign_follow_map = [
                    'creator_uid'  => 'creator_id',
                    'creator_name' => 'creator_name',
                    'ctime'        => 'ctime',
                    'data'         => 'data',
                    'html_data'    => 'html_data',
                    'id'           => 'id',
                ];

                $message_for_view['follow'] = [];
                foreach ($follow_list as $follow_id => $follow_data) {
                    $follow = [];
                    $follow['follow_id'] = $follow_id;
                    foreach ($assign_follow_map as $view_name => $data_name) {
                        $follow[$view_name] = $follow_data[$data_name];
                    }
                    // attached files
                    $message_for_view['follow'][] = $follow;

                    $uids[] = $follow['creator_uid'];
                }
            }

            if ( ! $is_search) {
                $messages_for_view[$message_id] = $message_for_view;
            } else {
                $messages_for_view[$relation_id] = $message_for_view;
            }
        }

        return $messages_for_view;
    }

    /**
     * check having a privilege for accessing specified message
     *
     * @param    object $user
     * @param    string $message_id
     * @param    string $relation_id  For suspending signature mismatch inheritance
     * @param    bool   $strict_match For suspending signature mismatch inheritance
     *
     * @return   mixed    message information array
     *                    if cannot access specified message, return FALSE
     *
     * return_array['cid'] => folder id
     *             ['rid'] => relation id
     *             ['mid'] => message id
     */
    function hasPrivilege(
        $user,
        $message_id,
        $relation_id = null,
        $strict_match = false
    ) {
        $user_id = $user->getOID();

        // 受信メッセージ→送信メッセージの優先順位で返す
        $table_name = grn_get_personal_tablename_message($user_id,
            GRN_MESSAGE_FOLDERMESSAGERELATIONS);
        $table = $this->_manager->getTableInfo($table_name);
        $rowset = new CB_MultiRowSet($table, 'relation');
        $rowset->addJoin(
            $this->_manager->getTableInfo(GRN_MESSAGE_FOLDERS),
            "relation.col_folder=folder._id",
            CB_DATABASE_INNER_JOIN,
            'folder'
        );
        $rowset->addJoin(
            $this->_manager->getTableInfo('cb_user'),
            "relation.col_user=u._id",
            CB_DATABASE_INNER_JOIN,
            'u'
        );

        $rowset->addCondition($rowset->queryf("relation.col_user = '@S' AND relation.col_message = '@S'",
            $user_id,
            $message_id));
        $rowset->addOrderColumn('relation.col_sent_message_flag', true);

        $message = [];
        $msgs = [];
        while ( ! is_null($row =& $rowset->iterate())) {
            $folder = $row['folder'];
            $relation = $row['relation'];
            $message_type = $relation->get('sent_message_flag');
            //GRN2-1457
            $message_data = $relation->get('message');
            //GRN2-1457
            $msg = [];

            $msg['cid'] = $folder->getOID();
            $msg['rid'] = $relation->getOID();
            $msg['mid'] = $message_id;
            $msg['message_type'] = $message_type;

            //GRN2-1457
            //GRN2-3329
            if ( ! is_null($message_data->get('creator'))) {
                $msg['creator'] = $message_data->get('creator')->getOID();
            }
            //GRN2-3329
            $msg['folder_type'] = $folder->get('folder_type');
            //GRN2-1457
            $msgs[$folder->get('folder_type')] = $msg;
        }

        $rowset->destroy();

        if (count($message) == 0) {
            $folder_type_order = [
                GRN_MESSAGE_GARBAGEFOLDER,
                GRN_MESSAGE_SENDINGFOLDER
            ];

            foreach ($folder_type_order as $folder_type) {
                if (array_key_exists($folder_type, $msgs)) {
                    $message = $msgs[$folder_type];
                    unset($msgs[$folder_type]);
                }
            }
            foreach ($msgs as $msg) {
                $message = $msg;
            }
        }
        if (count($message) > 0) {
            return $message;
        }

        // snapshotのIDも受理し、オリジナルに正規化
        $rowset = new CB_RowSet($table);
        $rowset->addCondition($rowset->queryf("col_user = '@S' AND col_snapshot_message = '@S'",
            $user_id,
            $message_id));
        //  $user は CB_User なので、UUMが削除フラグチェック済み。

        $message = [];
        while ( ! is_null($row = $rowset->iterate())) {
            $folder = $row->get('folder');
            $original = $row->get('message');
            $message_type = $original->get('message_type');
            $message['cid'] = $folder->getOID();
            $message['rid'] = $row->getOID();
            $message['mid'] = $original->getOID();
            $message['message_type'] = $message_type;
        }
        $rowset->destroy();

        if (count($message) > 0) {
            return $message;
        }

        return false;
    }

    /**
     * メッセージを取得する
     *
     * @param    object $user        メッセージ閲覧者 CB_User オブジェクト
     * @param    string $relation_id リレーションID
     * @param    string $message_id  メッセージID
     *
     * @option   boolean   $from_history   通知履歴からの参照フラグ(TRUE: Yes)
     * @return   mixed     メッセージ
     *                     if specified message doesn't exist, return FALSE.
     */
    function getMessageByApi(
        & $user,
        $relation_id,
        $message_id,
        $get_follow_files = false
    ) {
        $message_row = $this->_getMessageByApi($user, $relation_id, $message_id,
            $message);

        if ($message_row === false) {
            $ret = false;

            return $ret;
        }

        // フォロー取得
        $message['follows'] = $this->_getFollowsByApi($message_id, $message_row,
            0, -1, $get_follow_files);

        return $message;
    }


    function _getMessageByApi(& $user, $relation_id, $message_id, &$message)
    {
        if ( ! $user) {
            $ret = false;

            return $ret;
        }

        $user_id = $user->getOID();

        $table_name = grn_get_personal_tablename_message($user_id,
            GRN_MESSAGE_FOLDERMESSAGERELATIONS);
        $table = $this->_manager->getTableInfo($table_name);
        $relation_row = $table->getRow($relation_id);

        if ( ! $relation_row) {
            $ret = false;

            return $ret;
        }

        // check privilege
        $relation_owner = $relation_row->get('user');
        if (is_null($relation_owner)) {
            $ret = false;

            return $ret;
        } else {
            if ($user_id != $relation_owner->getOID()) {
                $ret = false;

                return $ret;
            }
        }

        // getting snapshot message
        $snapshot = $this->_getMessageRow($relation_row);
        $snapshot_row = $snapshot['message'];
        $snapshot_id = $snapshot_row->getOID();

        $message = [];
        $message['is_snapshot'] = $snapshot['is_snapshot'];

        // この後最終閲覧日時を更新するためここでは参照ではなくコピー
        $last_vtime = clone $relation_row->get('last_vtime');

        $last_modifier = $snapshot_row->get('last_modifier');
        if ( ! is_null($last_modifier)) {
            $last_modifier_id = $last_modifier->getOID();
        } else {
            $last_modifier_id = '';
        }
        $read = false;
        if ($last_vtime->unix_ts == 0 || $user_id == $last_modifier_id) {
            $read = true;
        }
        $message['message_id'] = $snapshot_id;
        $creator = $snapshot_row->get('creator');
        if ( ! is_null($creator)) {
            $message['creator_id'] = $creator->getOID();
        } else {
            $message['creator_id'] = '';
        }
        $message['creator_name'] = $snapshot_row->get('creator_name');
        $message['ctime'] = $snapshot_row->get('ctime');
        $modifier = $snapshot_row->get('modifier');
        if ( ! is_null($modifier)) {
            $message['modifier_id'] = $modifier->getOID();
        } else {
            $message['modifier_id'] = $message['creator_id'];
        }
        if ( ! is_null($snapshot_row->get('modifier_name'))) {
            $message['modifier_name'] = $snapshot_row->get('modifier_name');
        } else {
            $message['modifier_name'] = $snapshot_row->get('creator_name');
        }
        $message['mtime'] = $snapshot_row->get('mtime');
        $message['last_mtime'] = $snapshot_row->get('last_mtime');
        $message['last_otime'] = $snapshot_row->get('last_otime');
        $message['delegator_name'] = $snapshot_row->get('delegator_name');
        $message['dtime'] = $snapshot_row->get('dtime');
        $message['subject'] = $snapshot_row->get('subject');

        // body
        $message['data'] = $snapshot_row->get('data');
        $message['html_data'] = $snapshot_row->get('html_data');

        // get deleted time
        $rowset = new CB_RowSet($this->_addressees);
        $rowset->addCondition($rowset->queryf("col_message = '@S' AND col_addressee = '@S'",
            $snapshot['original']->getOID(), $user->getOID()));
        $rowset->limit(0, 1);
        $addressee = $rowset->iterate();
        if ( ! is_null($addressee)) {
            $delete_time = $addressee->get('dtime');
        } else {
            $time = new CB_TimeStamp();
            $time->unix_ts = time();
            $delete_time = $time;
        }
        require_once('cbpapi/util.csp');
        $message['delete_time'] = grn_cbpapi_iso8601($delete_time);
        $message['subscription'] = $relation_row->get('subscription_flag');

        $message['files'] = $this->getMessageFiles($snapshot_id);

        // 宛先取得
        $addressee_list = $this->getAddressees($user, $snapshot_id);
        $addressees = [];
        foreach ($addressee_list as $addressee) {
            if ($addressee['dtime']->unix_ts == 0
                && $addressee['delete_flag'] == 0
            ) {
                $addressees[$addressee['id']] = $addressee;
            }

        }
        $message['addressees'] = $addressees;

        // confirm
        $message['need_confirm'] = 0;
        $message['confirmed'] = 0;
        $message['need_confirm'] = $snapshot_row->get('confirm');
        foreach ($message['addressees'] as $addressee) {
            if ($user_id == $addressee['id']) // user is addressee
            {
                $message['confirmed'] = $addressee['confirmed'];
            }
        }

        $message['message_type'] = $relation_row->get('sent_message_flag');

        // get folder id
        // there's a possibility that folder id was changed.
        $folder = $relation_row->get('folder');
        $message['folder_id'] = $folder->getOID();

        // return $message;
        return $snapshot_row;
    }

    /**
     * get follows
     *
     * @access   private
     *
     * @param    string $message_id  message id
     * @param    object $message_row message CB_Row object
     *
     * @option   int       $offset        start position
     * @option   int       $limit         follow number you wanna get
     * @return   array     follow list
     */
    function _getFollowsByApi(
        $message_id,
        & $message_row,
        $offset = 0,
        $limit = -1,
        $get_follow_files = true
    ) {
        $follows = [];

        // get an original message
        $original_message_row = $this->_getOriginalMessage($message_row);
        $original_message_id = $original_message_row->getOID();

        // compare ctime and last_mtime for snapshot
        $db = $this->_getDBConnection();

        //  宛先ユーザーのID一覧を取り出す
        $conditions = [];
        $query = cb_queryf($db,
            "SELECT f._id,f.col_message,f.col_id,f.col_creator,f.col_creator_name,f.col_ctime,f.col_data,f.col_html_data, u._id as u_id FROM tab_grn_message_follows as f LEFT JOIN tab_cb_user u ON f.col_creator = u._id WHERE (f.col_message = '@S' AND f.col_id <= '@S') ORDER BY f.col_id DESC",
            $original_message_id, $message_row->get('last_follow_id'));
        $query = $db->select_format($query, $offset, $limit,
            CB_DATABASE_NO_LOCK);
        $result = $db->query($query);
        if ($result === false) {
            $db->throwError(['query' => 'failed query on SELECT: ' . $query]);
        }
        while ($row = $db->fetch_assoc($result)) {
            $id = $row['_id'];
            $follows[$id] = [];
            $creator_row = $row['u_id'];
            if ( ! is_null($creator_row)) {
                $creator_id = $creator_row;
            } else {
                $creator_id = '';
            }
            $follows[$id]['creator_id'] = $creator_id;
            $follows[$id]['creator_name'] = $row['col_creator_name'];
            $ts = new CB_TimeStamp();
            $ts->unix_ts = $row['col_ctime'];
            $follows[$id]['ctime'] = $ts;
            $follows[$id]['data'] = $row['col_data'];
            $follows[$id]['html_data'] = $row['col_html_data'];
            $follows[$id]['id'] = $row['col_id'];
        }
        $db->free_result($result);

        // attached files
        if (true === $get_follow_files) {
            $attached_files = $this->_getFollowsFiles($message_id,
                array_keys($follows));
            foreach ($follows as $key => $follow) {
                if (isset($attached_files[$key])
                    && is_array($attached_files[$key])
                ) {
                    $follows[$key]['files'] = $attached_files[$key];
                }
            }
        }

        return $follows;
    }

    public function _getFollowsFiles($message_id, $follows)
    {
        $db = $this->_getDBConnection();

        $query = cb_queryf($db,
            "SELECT a._id as a_id,a.col_follow,a.col_file, b.col_hash, b._id as b_id,b.col_mime,b.col_name,b.col_size FROM tab_grn_message_attachedfiles a LEFT JOIN tab_grn_message_filebody b ON a.col_file = b.col_file WHERE a.col_message = '@S' AND a.col_follow IN (@A) ORDER BY a._id",
            $message_id, $follows);
        $result = $db->query($query);
        if ($result === false) {
            $db->throwError(['query' => 'failed query on SELECT: ' . $query]);
        }
        $attached_files = [];
        $mimetypes = [];
        while ($row = $db->fetch_assoc($result)) {
            if (is_null($row['b_id'])) {
                continue;
            }

            $fid = $row['col_follow'];
            if ( ! isset($attached_files[$fid])) {
                $attached_files[$fid] = [];
            }
            $extension = strtolower(substr(strrchr($row['col_name'],
                '.'), 1));
            $attached_files[$fid][$row['a_id']] = [
                'mime'      => $row['col_mime'],
                'name'      => $row['col_name'],
                'size'      => $row['col_size'],
                'hash'      => $row['col_hash'],
                'extension' => $extension,
            ];
            $mimetypes[$extension] = $row['col_mime'];
        }
        $db->free_result($result);

        // mimetypeをDBからとってくる
        $query = cb_queryf($db,
            "SELECT col_extension,col_mime FROM tab_grn_mimetype WHERE col_extension IN (@A)",
            array_keys($mimetypes));
        $result = $db->query($query);
        if ($result === false) {
            $db->throwError(['query' => 'failed query on SELECT: ' . $query]);
        }
        while ($row = $db->fetch_assoc($result)) {
            $mimetypes[$row['col_extension']] = $row['col_mime'];
        }
        $db->free_result($result);

        foreach ($attached_files as $fid => $files) {
            foreach ($files as $key => $file) {
                $attached_files[$fid][$key]['mime']
                    = $mimetypes[$attached_files[$fid][$key]['extension']];
            }
        }

        return $attached_files;
    }

    /**
     * get follows by thread id(relation id)
     *
     * @param    object $user       CB_User object
     * @param    string $message_id thread id(relation id)
     * @param    int    $offset     start position
     * @param    int    $limit      follow number you wanna get
     *
     * @return   array     follow list
     */
    function getFollows(&$user, $message_id, $offset = 0, $limit = -1)
    {
        if ( ! $user) {
            $ret = false;

            return $ret;
        }
        $msg_owner = $this->hasPrivilege($user, $message_id);
        if ($msg_owner === false) {
            $app_name = cb_msg(GRN_MESSAGE_MODULEID, 'application_name');
            require_once('message/error_code.csp');
            cb_throw_error(E_GRN_MESSAGE_MESSAGE_NOT_FOUND,
                ['app_name' => $app_name],
                ['app_name' => $app_name],
                ['app_name' => $app_name]);
        }
        $relation_id = $msg_owner['rid'];
        $table_name = grn_get_personal_tablename_message($user->getOID(),
            GRN_MESSAGE_FOLDERMESSAGERELATIONS);
        $table = $this->_manager->getTableInfo($table_name);
        $relation_row = $table->getRow($relation_id);

        if ( ! $relation_row) {
            $ret = false;

            return $ret;
        }

        // check privilege
        $relation_owner = $relation_row->get('user');
        if (is_null($relation_owner)) {
            $ret = false;

            return $ret;
        } else {
            if ($user->getOID() != $relation_owner->getOID()) {
                $ret = false;

                return $ret;
            }
        }
        $snapshot = $this->_getMessageRow($relation_row);
        $message_row = $snapshot['message'];
        if ( ! $message_row) {
            $ret = false;

            return $ret;
        }
        $message_id = $message_row->getOID();

        return $this->_getFollowsByApi($message_id, $message_row, $offset,
            $limit);
    }

    /**
     * ユーザーのメールデータ一覧の取得（高速版）
     *
     * @param   object $user           ユーザーオブジェクト
     * @param   mixed  $folder_id_list folder list ID
     * @param   object $start_ts       データ検索範囲の開始日時（この値自体を含む）。nullで指定なし。デフォルト:null
     * @param   object $last_ts        データ検索範囲の終了日時（この値自体は含まれない）。nullで指定なし。デフォルト:null
     *
     * @return  mixed   メールデータのリスト
     **/
    function getThreadDataList(
        & $login,
        $folder_id_list,
        $start_ts = null,
        $last_ts = null
    ) {
        if ( ! is_object($login)) {
            return null;
        }
        $user_id = $login->getOID();
        $dbconn = $this->_getDBConnection();

        $table_name
            = strtolower(grn_get_personal_tablename_message($login->getOID(),
            GRN_MESSAGE_FOLDERMESSAGERELATIONS));
        $tables = 'tab_' . $table_name
                  . ' r INNER JOIN tab_grn_message_messages m on r.col_message = m._id '
                  .
                  'LEFT JOIN tab_grn_message_messages s on r.col_snapshot_message = s._id';
        // 取得するカラム
        $columns = [
            'm._id mid',
            'r._id rid',
            'r.col_mtime rmtime',
            'r.col_snapshot_message snapshot_message',
            'm.col_last_mtime last_mtime',
            'm.col_last_otime last_otime'
        ];

        // 検索条件
        $conditions[] = sprintf("r.col_user = '%s'", $dbconn->escape($user_id));

        if (count($folder_id_list) > 0) {
            $folder_id_list_escaped = [];
            foreach ($folder_id_list as $folder_id) {
                $folder_id_list_escaped[] = "'" . $dbconn->escape($folder_id)
                                            . "'";
            }
            $conditions[] = sprintf("r.col_folder IN ( %s )",
                implode(', ', $folder_id_list_escaped));
        }
        if ( ! is_null($start_ts)) {
            $conditions[] = 'm.col_last_mtime >= \''
                            . $dbconn->escape($start_ts->unix_ts) . '\'';
        }
        if ( ! is_null($last_ts)) {
            $conditions[] = 'm.col_last_mtime <= \''
                            . $dbconn->escape($last_ts->unix_ts) . '\'';
        }

        $query = sprintf('SELECT %s FROM %s WHERE %s', implode(',', $columns),
            $tables,
            implode(' AND ', $conditions));

        $query = $dbconn->select_format($query, 0, -1);
        $result = $dbconn->query($query);
        if ($result === false) {
            $dbconn->throwError([
                'query' => 'failed query on SELECT: ' . $query
            ]);
        }
        $threads = [];
        while ($row = $dbconn->fetch_assoc($result)) {
            $thread = [];
            $is_snapshot = false;
            $thread_id = $row['mid'];
            $thread['id'] = $thread_id;
            $version = $row['last_mtime'];
            if ( ! is_null($row['last_otime'])
                 && $row['last_mtime'] < $row['last_otime']
            ) {
                $version = $row['last_otime'];
            }
            $thread['version'] = $version;
            if ( ! is_null($row['snapshot_message'])
                 && intval($row['snapshot_message']) > 0
            ) {
                $is_snapshot = true;
                $thread['is_snapshot'] = $is_snapshot;
            }
            $threads[$thread_id] = $thread;

            // get snapshot message
            if ($is_snapshot) {
                $snapshot_id = $row['snapshot_message'];
                $message = $this->_messages->getRow($snapshot_id);
                if ( ! $message) {
                    continue;
                }
                $snapshot['id'] = $message->getOID();
                $ctime = $message->get('ctime');
                $version = $ctime->unix_ts;
                $last_mtime = $message->get('last_mtime');
                if ( ! is_null($last_mtime)) {
                    $version = $last_mtime->unix_ts;
                }
                $last_otime = $message->get('last_otime');
                if ( ! is_null($last_otime)
                     && $version < $last_otime->unix_ts
                ) {
                    $version = $last_otime->unix_ts;
                }
                $snapshot['version'] = $version;
                $threads[$snapshot_id] = $snapshot;
            }
        }
        $dbconn->free_result($result);

        $confirms = $this->getLastConfirmTime(array_keys($threads));
        if (is_array($confirms)) {
            foreach ($confirms as $key => $value) {
                if ($threads[$key]['version'] < $value['rtime']) {
                    $threads[$key]['version'] = $value['rtime'];
                }
            }
        }

        return $threads;
    }


    function getFolderList(&$login)
    {
        if ( ! is_object($login)) {
            return null;
        }

        $dbconn = $this->_getDBConnection();
        $conditions = '';
        $conditions .= ' col_user = \'' . $login->getOID() . '\'';

        // 取得するカラム
        $columns = [
            'f._id fid',
            'f.col_folder_name',
            'f.col_memo',
            'f.col_mtime',
            'u.col_deleted'
        ];

        $table_name = strtolower('tab_' . GRN_MESSAGE_FOLDERS);
        $tables = $table_name
                  . ' f LEFT JOIN tab_cb_user u ON f.col_user = u._id AND u.col_deleted IS NULL ';

        $query = sprintf('SELECT %s FROM %s WHERE %s', implode(',', $columns),
            $tables, $conditions);
        $query = $dbconn->select_format($query, 0, -1, CB_DATABASE_NO_LOCK);
        $result = $dbconn->query($query);
        if ($result === false) {
            $dbconn->throwError([
                'query' => 'failed query on SELECT: ' . $query
            ]);
        }
        $folders = [];
        while ($row = $dbconn->fetch_assoc($result)) {
            if ( ! is_null($row['col_deleted'])) {
                continue;
            }
            $folder = [];
            $folder['id'] = $row['fid'];
            $folder['memo'] = $row['col_memo'];
            $folder['name'] = $row['col_folder_name'];
            $folder['version'] = $row['col_mtime'];
            $folders[$row['fid']] = $folder;
        }
        // 結果の開放
        $dbconn->free_result($result);

        return $folders;
    }

    function getSentMessageRelation(&$login, $message_id)
    {
        if ( ! is_object($login)) {
            return null;
        }

        $dbconn = $this->_getDBConnection();
        $conditions = '';
        $conditions .= ' col_user = \'' . $login->getOID() . '\'';
        $conditions .= ' AND col_message = \'' . $dbconn->escape($message_id)
                       . '\'';
        $conditions .= ' AND col_sent_message_flag = \'1\'';

        // 取得するカラム
        $columns = [
            'r._id rid'
        ];

        $table_name
            = strtolower(grn_get_personal_tablename_message($login->getOID(),
            GRN_MESSAGE_FOLDERMESSAGERELATIONS));
        $tables = 'tab_' . $table_name
                  . ' r INNER JOIN tab_grn_message_messages m on r.col_message = m._id '
                  .
                  'LEFT JOIN tab_grn_message_messages s on r.col_snapshot_message = s._id';

        $query = sprintf('SELECT %s FROM %s WHERE %s', implode(',', $columns),
            $tables, $conditions);
        $query = $dbconn->select_format($query, 0, 1, CB_DATABASE_NO_LOCK);
        if (cb_is_db_result($result = $dbconn->query($query))) {
            $row = $dbconn->fetch_assoc($result);
            // 結果の開放
            $dbconn->free_result($result);
            if (is_array($row) && 0 < count($row)) {
                return $row;
            }
        }

        return null;
    }

    function getFoldersMessageRelation(&$login, $message_id)
    {
        if ( ! is_object($login)) {
            return null;
        }

        $dbconn = $this->_getDBConnection();
        $conditions = '';
        $conditions .= ' col_user = \'' . $login->getOID() . '\'';
        $conditions .= ' AND col_message = \'' . $dbconn->escape($message_id)
                       . '\'';

        // 取得するカラム
        $columns = [
            'r._id rid',
            'r.col_folder fid'
        ];

        $table_name
            = strtolower(grn_get_personal_tablename_message($login->getOID(),
            GRN_MESSAGE_FOLDERMESSAGERELATIONS));
        $tables = 'tab_' . $table_name
                  . ' r INNER JOIN tab_grn_message_messages m on r.col_message = m._id '
                  .
                  'LEFT JOIN tab_grn_message_messages s on r.col_snapshot_message = s._id';

        $query = sprintf('SELECT %s FROM %s WHERE %s', implode(',', $columns),
            $tables, $conditions);
        $query = $dbconn->select_format($query, 0, -1, CB_DATABASE_NO_LOCK);
        $result = $dbconn->query($query);
        if ($result === false) {
            $dbconn->throwError([
                'query' => 'failed query on SELECT: ' . $query
            ]);
        }
        $folders = [];
        while ($row = $dbconn->fetch_assoc($result)) {
            $folder = [];
            $folder['rid'] = $row['rid'];
            $folder['fid'] = $row['fid'];
            $folders[$row['rid']] = $folder;
        }
        // 結果の開放
        $dbconn->free_result($result);

        return $folders;
    }

    function modifyMessageByApi(
        $user,
        $message_id,
        $subject,
        $data,
        $format,
        & $files,
        $addressees
    ) {
        // update message data
        $message_row = $this->_modifyMessage($user, $message_id, $subject,
            $data, $format, $files);
        if ($message_row === false) {
            return false;
        }

        $addressees = $this->_setOldMaintainer($user, $message_id, $addressees);

        // modify addresses
        $ret = $this->modifyAddressees($user, $message_id, $addressees);
        if ( ! $ret) {
            require_once('message/error_code.csp');
            cb_throw_error(E_GRN_MESSAGE_MESSAGE_NOT_FOUND,
                [
                    'app_name' => cb_msg(GRN_MESSAGE_MODULEID,
                        'application_name')
                ],
                [
                    'app_name' => cb_msg(GRN_MESSAGE_MODULEID,
                        'application_name')
                ],
                [
                    'app_name' => cb_msg(GRN_MESSAGE_MODULEID,
                        'application_name')
                ]);
        }

        return $message_row;
    }

    /**
     * @param CB_User $user
     * @param array   $message
     * @param array   $addressees
     * @param array   $files
     *
     * @return bool
     */
    function saveDraft($user, $message, $addressees, & $files)
    {
        // initializeのタイミング
        // ・フォルダツリー参照
        // ・メッセージ送信画面オープン
        // ・メッセージ受信
        // ・ポートレット表示
        // *****
        $this->_folderlogic->initialize($user);

        // message
        $message_row = $this->_insertMessage($user, $message,
            GRN_MESSAGE_TYPE_DRAFT);

        $rowset = new CB_RowSet($this->_folders);
        $rowset->addCondition($rowset->queryf("col_user = '@S' AND col_folder_type = '@S'",
            $user->getOID(), GRN_MESSAGE_DRAFTFOLDER));
        //  $user は CB_User なので、UUMが削除フラグチェック済み。

        $draft_folder = $rowset->iterate();
        if (is_null($draft_folder)) {
            return false;
        }

        // relations
        $this->_insertRelations($message_row, $user, $draft_folder, 2);

        // addressees
        if (count($addressees) > 0) {
            foreach ($addressees as $addressee) {
                $user_row = $this->_uum->getUser($addressee['addressee_id']);
                if ($user_row !== false) {
                    $this->_insertAddressees($message_row, $user_row,
                        $addressee['addressee_order']);
                }
            }
        }

        // attached files
        $ret = $this->_addMessageFiles($user, $message_row, $files);
        if ($ret === false) {
            return false;
        }

        return $message_row;
    }

    function modifyDraft($user, $message_id, $message, $addressees, & $files)
    {
        //  get messsage data
        $message_row = $this->_messages->getRow($message_id);

        if ($message_row === false) {
            return false;
        }

        // current attached files
        $table_manager = GRN_Message_TableManager::getInstance();
        $files_tbl
            = $table_manager->getTableInfo('GRN_Message_AttachedFiles');

        $rowset = new CB_RowSet($files_tbl);
        $rowset->addCondition($rowset->queryf("col_message = '@S' AND col_follow IS NULL",
            $message_id));

        // delete attached files
        while ( ! is_null($row = $rowset->iterate())) {
            if ($row->get('publicly') == '0') // closed file
            {
                $file = $row->get('file');
                $file->delete();
                $row->delete();
            }
        }
        $message_row->set('file_num', 0);
        $message_row->set('file_size', 0);

        // update message data
        $message_row = $this->_modifyMessage($user, $message_id,
            $message['subject'],
            $message['data'], $message['format_type'],
            $files,
            $message['confirm']);

        // addressees
        $addressees_tbl
            = $table_manager->getTableInfo('GRN_Message_Addressees');
        $rowset = new CB_RowSet($addressees_tbl);
        $rowset->addCondition($rowset->queryf("col_message = '@S'",
            $message_id));

        while ( ! is_null($row = $rowset->iterate())) {
            $addressee_row = $row->get('addressee');

            if (is_null($addressee_row)) {
                $row->delete();
                continue;
            }

            $addressee_id = $addressee_row->getOID();

            $delete = true;
            if (is_array($addressees)) {
                foreach ($addressees as $key => $addressee) {
                    if ($addressee_id == $addressee['addressee_id']) {
                        $row->set('view_order', $addressee['addressee_order']);
                        $addressees[$key]['nochange'] = 1;
                        $delete = false;
                        break;
                    }
                }
            }

            if ($delete) {
                $row->delete();
            }
        }

        if (is_array($addressees)) {
            foreach ($addressees as $addressee) {
                if ( ! array_key_exists('nochange', $addressee)) {
                    $user_row
                        =& $this->_uum->getUser($addressee['addressee_id']);
                    $this->_insertAddressees($message_row, $user_row,
                        $addressee['addressee_order']);
                }
            }
        }

        return $message_row;
    }

    function getInputParamerters(
        &$cbpapi_service,
        $raw_params,
        $is_draft = false
    ) {
        $param = [];
        $thread = array_key_exists('children', $raw_params)
            ? $raw_params['children'] : null;
        if (0 >= count($thread)) {
            require_once('cbpapi/error_code.csp');
            cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
                ['param' => 'thread']);
        }
        $remove_file_ids = [];
        $file_contents = [];
        foreach (array_keys($thread) as $thread_key) {
            $node = $thread[$thread_key]['node_name'];
            if ($node == 'thread') {
                $required_fields = ['id', 'subject', 'version', 'confirm'];
                if (array_key_exists('attributes', $thread[$thread_key])) {
                    $attributes = $thread[$thread_key]['attributes'];
                    foreach ($required_fields as $field) {
                        if ( ! array_key_exists($field, $attributes)) {
                            require_once('cbpapi/error_code.csp');
                            cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
                                ['param' => $field]);
                        }
                    }
                    $param['id'] = $attributes['id'];
                    $param['version'] = $attributes['version'];
                    $param['confirm'] = $attributes['confirm'];
                    $param['subject'] = $attributes['subject'];
                }

                $node_content
                    = $cbpapi_service->selectSingleNode($thread[$thread_key],
                    'content');
                if ( ! $node_content) {
                    require_once('cbpapi/error_code.csp');
                    cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
                        ['param' => 'content']);
                }
                $elements_children = array_key_exists('children',
                    $thread[$thread_key]) ? $thread[$thread_key]['children']
                    : [];
                $files = [];
                $sUID = [];
                foreach (array_keys($elements_children) as $children_key) {
                    $element = $elements_children[$children_key];
                    $node_name = $element['node_name'];

                    if ($node_name == 'addressee') {
                        $attrs = array_key_exists('attributes', $element)
                            ? $element['attributes'] : [];
                        $user_id = '';
                        if (array_key_exists('user_id', $attrs)) {
                            $user_id = $attrs['user_id'];
                        }
                        if ( ! array_key_exists('name', $attrs)) {
                            require_once('cbpapi/error_code.csp');
                            cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
                                ['param' => 'name']);
                        }
                        if ( ! array_key_exists('deleted', $attrs)) {
                            require_once('cbpapi/error_code.csp');
                            cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
                                ['param' => 'deleted']);
                        }
                        $sUID[] = $user_id;
                    }

                    if ($node_name == 'content') {
                        $attrs = array_key_exists('attributes', $element)
                            ? $element['attributes'] : [];
                        $body = '';
                        if ( ! array_key_exists('body', $attrs)) {
                            require_once('cbpapi/error_code.csp');
                            cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
                                ['param' => 'body']);
                        } else {
                            $body = $attrs['body'];
                        }
                        $param['data'] = $body;
                        if (array_key_exists('html_body', $attrs)) {
                            $html_body = $attrs['html_body'];
                            $param['html_body'] = $html_body;
                        }

                        $content_children = array_key_exists('children',
                            $element) ? $element['children'] : [];
                        foreach (array_keys($content_children) as $file_key) {
                            $file_element = $content_children[$file_key];
                            $node_name = $file_element['node_name'];
                            if ($node_name == 'file') {
                                $file_attrs = array_key_exists('attributes',
                                    $file_element) ? $file_element['attributes']
                                    : [];
                                // GRN2-1714 : For using return value of fputs() and getMIMEType()
                                //$size = array_key_exists( 'size', $file_attrs ) ? $file_attrs['size'] : null; 
                                //$mime_type = array_key_exists('mime_type', $file_attrs) ? $file_attrs['mime_type'] : null;
                                if ( ! array_key_exists('id', $file_attrs)) {
                                    require_once('cbpapi/error_code.csp');
                                    cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER,
                                        null, ['param' => 'id']);
                                }
                                if ( ! array_key_exists('name', $file_attrs)) {
                                    require_once('cbpapi/error_code.csp');
                                    cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER,
                                        null, ['param' => 'name']);
                                }
                                $files[$file_attrs['id']] = [
                                    'file_id'   => $file_attrs['id'],
                                    'name'      => $file_attrs['name'],
                                    'size'      => null,//$size,
                                    'mime_type' => null//$mime_type
                                ];
                            }
                        }

                    }
                }
                $param['sUID'] = $sUID;
                $param['files'] = $files;
            }

            if ($node == 'remove_file_id') {
                if (array_key_exists('text', $thread[$thread_key])) {
                    $file_id = $thread[$thread_key]['text'];
                    $remove_file_ids[$file_id] = $file_id;
                }
            }

            $param['remove_file_ids'] = $remove_file_ids;

            if ($node == 'file') {
                $file_attrs = $thread[$thread_key]['attributes'];
                if ( ! array_key_exists('id', $file_attrs)) {
                    require_once('cbpapi/error_code.csp');
                    cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
                        ['param' => 'id']);
                }
                $file_id = $file_attrs['id'];
                $file_child = [];
                if (isset($thread[$thread_key]['children'][0])) {
                    $file_child = $thread[$thread_key]['children'][0];
                }
                if (is_array($file_child)
                    && array_key_exists('text', $file_child)
                ) {
                    $content_value = $file_child['text'];
                    $file_contents[$file_id] = $content_value;
                }
            }
            $this->_getFilesContentInput($param, $file_contents);
        }

        return $param;
    }

    function _getFilesContentInput(&$param, $file_content)
    {
        if (count($file_content) <= 0) {
            return $param;
        }
        foreach ($param as $key => $file_info) {
            if ((strcasecmp($key, 'files') == 0)) {
                foreach (array_keys($file_content) as $file_id) {
                    if (is_array($file_info) && count($file_info) > 0) {
                        foreach (array_keys($file_info) as $file_key) {
                            if ($file_info[$file_key]['file_id'] == $file_id) {
                                $param['files'][$file_key]['content']
                                    = $file_content[$file_id];
                            }
                        }
                    }
                }
            }
        }

        return $param;
    }

    function saveNow()
    {
        $locator = GRN_ApplicationLocator::instance();
        $manager = $locator->getTableManager('message');
        $manager->registerNowAndUpdateNowAll();
    }

    function _setOldMaintainer(&$user, $message_id, $addressees)
    {
        $old_addressees = $this->getAddressees($user, $message_id);

        foreach ($old_addressees as $i => $old_addressee) {
            if (array_key_exists($old_addressee['id'], $addressees)) {
                $addressees[$old_addressee['id']]['addressee_is_operator']
                    = $old_addressee['is_operator'];
            }
        }
        foreach ($addressees as $i => $addressee) {
            if ( ! array_key_exists('addressee_is_operator', $addressee)) {
                $addressees[$i]['addressee_is_operator'] = 0;
            }
        }

        return $addressees;
    }

    //GRN2-1457
    public function getRelationID($login, $messageID, $folderID)
    {
        if ( ! is_object($login)) {
            return null;
        }
        $db = $this->_getDBConnection();
        //GRN2-4466
        $table_message_name = "tab_"
                              . grn_get_personal_tablename_message($login->getOID(),
                GRN_MESSAGE_FOLDERMESSAGERELATIONS);
        //GRN2-4466
        $table_message_name = strtolower($table_message_name);

        $sql_string
            = "select a._id,b.col_creator,c.col_folder_type from %s as a,tab_grn_message_messages as b,tab_grn_message_folders as c where a.col_message=%d and a.col_folder = %d and a.col_user=%d and b._id = a.col_message and a.col_folder = c._id order by a._id desc";
        $sql = sprintf($sql_string, $table_message_name, $messageID,
            $folderID, $login->getOID());
        $ret = $db->query($sql);
        $relation = [];
        while ($row = $db->fetch_assoc($ret)) {
            $relation = [
                "rid"         => $row['_id'],
                "creator_id"  => $row['col_creator'],
                "folder_type" => $row['col_folder_type']
            ];
        }
        $db->free_result($ret);

        return $relation;
    }
    //GRN2-1457

    /**
     * @param array $message_ids
     *
     * @return array
     */
    private function getLastConfirmTime(array $message_ids)
    {
        $db = $this->_getDBConnection();
        $query = cb_queryf($db,
            'SELECT ' .
            'col_message,' .
            'MAX(col_rtime) as rtime' .
            ' from tab_grn_message_addressees' .
            ' WHERE col_message IN(@A)' .
            ' GROUP BY col_message',
            $message_ids);
        $result = $db->query($query);
        $retVal = [];
        while ($row = $db->fetch_assoc($result)) {
            $retVal[$row['col_message']] = [
                'mid'   => $row['col_message'],
                'rtime' => $row['rtime']
            ];
        }
        $db->free_result($result);

        return $retVal;
    }
}
