<?php
declare(strict_types=1);

namespace grn\api\dev\request;

use grn\api\http\response\Record;
use grn\api\RestApi;
use grn\api\ResponseEntity;
use grn\api\http\HttpMethod;
use grn\api\http\HttpStatus;

class ConcurrencyLimit extends RestApi
{
    public function execute(array $params): ResponseEntity
    {
        $input = $this->getInput();
        $body = array_merge(
            ["REQUEST_METHOD" => HttpMethod::getRequestMethod()],
            ["ROUTES_PARAMETER" => $params],
            ["POST_DATA" => $input]
        );

        $sleep = (int)($params["sleep"] ?? 0);
        if (0 < $sleep) {
            sleep($sleep);
        }

        $sleep = (int)($input["sleep"] ?? 0);
        if (0 < $sleep) {
            sleep($sleep);
        }

        switch ($body["REQUEST_METHOD"]) {
            case HttpMethod::POST:
                $http_status = new HttpStatus(HttpStatus::CREATED,
                    "Garoon API");
                break;
            case HttpMethod::PUT:
                $http_status = new HttpStatus(HttpStatus::OK, "Garoon API");
                break;
            case HttpMethod::PATCH:
                $http_status = new HttpStatus(HttpStatus::OK, "Garoon API");
                break;
            case HttpMethod::DELETE:
                $http_status = new HttpStatus(HttpStatus::NO_CONTENT,
                    "Garoon API");
                break;
            default :
                $http_status = new HttpStatus(HttpStatus::OK, "Garoon API");
                break;
        }

        $response_entity = new ResponseEntity(new Record($body), $http_status);

        return $response_entity;
    }
}
