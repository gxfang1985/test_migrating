<?php
declare(strict_types=1);

namespace grn\api\validator\schedule;

use grn\api\validator\CheckerBase;
use grn\api\exception\ErrorCode;
use grn\api\exception\validation\ValidationFailedException;
use grn\api\validator\StringLengthChecker;

require_once("schedule/system_logic.csp");

class AttachmentsChecker extends CheckerBase
{
    const EXIST_KEYS = ['name', 'content'];

    /**
     * @param string $param_name
     * @param array  $input
     *
     * @return bool
     * @throws ValidationFailedException
     */
    public function check($param_name, array $input): bool
    {
        $name = 'name';
        $content = 'content';
        $attachments = $this->getValue($param_name, $input);

        if (is_null($attachments)) {
            return true;
        }

        $system_logic = \GRN_Schedule_SystemLogic::getInstance();
        if ( ! $system_logic->getAllowFileAttachment()) {
            throw new ValidationFailedException(E_GRN_SCHD_CAN_NOT_USE_ATTACHEMENTS, $param_name);
        }

        if ( ! is_array($attachments)) {
            throw new ValidationFailedException(ErrorCode::INVALID_ITEM_TYPE, $param_name);
        }

        foreach ($attachments as $attachment) {
            if ( ! is_array($attachment)) {
                throw new ValidationFailedException(ErrorCode::INVALID_ITEM_TYPE, $param_name);
            }

            if ( ! $this->isKeyExists($attachment)) {
                throw new ValidationFailedException(
                    ErrorCode::MISSING_REQUIRED_KEY_IN_PARAM, $param_name,
                    null, ['key_options' => join(', ', self::EXIST_KEYS)]);
            }

            $name_checker = new StringLengthChecker(1, 255);
            try {
                $name_checker->check($name, $attachment);
            } catch (ValidationFailedException $e) {
                throw new ValidationFailedException($e->getErrorCode(), $param_name);
            }

            $content_checker = new StringLengthChecker(1, null);
            try {
                $content_checker->check($content, $attachment);
            } catch (ValidationFailedException $e) {
                throw new ValidationFailedException($e->getErrorCode(), $param_name);
            }

            if ($this->isInvalidFileName($attachment[$name])) {
                throw new ValidationFailedException(ErrorCode::INVALID_FILE_NAME, $param_name);
            }

        }

        return true;
    }

    /**
     * @param $value
     *
     * @return bool
     */
    private function isKeyExists($value): bool
    {
        foreach (self::EXIST_KEYS as $each_exist_key) {
            if ( ! isset($value[$each_exist_key])) {
                return false;
            }
        }

        return true;
    }

    /**
     * @param $value
     *
     * @return bool
     */
    private function isInvalidFileName($value): bool
    {
        $invalid_filename_pattern = '/[\/\\\\:*?"<>|]/';

        if (preg_match($invalid_filename_pattern, $value, $matches)) {
            return true;
        }

        return false;
    }
}
