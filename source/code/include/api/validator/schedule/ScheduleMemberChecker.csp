<?php
declare(strict_types=1);

namespace grn\api\validator\schedule;

use grn\api\exception\ErrorCode;
use grn\api\validator\CheckerBase;
use grn\api\exception\validation\ValidationFailedException;
use grn\schedule\api\model\Member;
use grn\api\validator\TypeChecker;

class ScheduleMemberChecker extends CheckerBase
{
    /** @var bool */
    private $isForeignKeyPublic;

    /** @var TypeChecker */
    private $typeChecker;

    /**
     * ScheduleMemberChecker constructor.
     *
     * @param array $allow_types
     * @param bool  $is_foreign_key_public
     */
    public function __construct(array $allow_types, bool $is_foreign_key_public = false)
    {
        $this->isForeignKeyPublic = $is_foreign_key_public;
        $this->typeChecker = new TypeChecker($allow_types);
    }

    /**
     * @param array|string $param_name
     * @param array        $input
     *
     * @return bool
     * @throws ValidationFailedException
     */
    public function check($param_name, array $input): bool
    {
        $this->checkAllowTypes($param_name, $input);

        $members = $this->getValue($param_name, $input);
        if (is_null($members)) {
            return true;
        }

        if ( ! is_array($members)) {
            throw new ValidationFailedException(ErrorCode::INVALID_ITEM_TYPE, $param_name);
        }

        foreach ($members as $member) {
            if ( ! is_array($member)) {
                throw new ValidationFailedException(ErrorCode::INVALID_ITEM_TYPE, $param_name);
            }
            $this->checkKeyExists($member, $param_name);
        }

        return true;
    }

    /**
     * @param string $param_name
     * @param array  $input
     *
     * @throws ValidationFailedException
     */
    private function checkAllowTypes($param_name, array $input)
    {
        $this->typeChecker->check($param_name, $input);
    }

    /**
     * @param $member
     * @param $param_name
     *
     * @throws ValidationFailedException
     */
    private function checkKeyExists($member, $param_name)
    {
        $type = $member[Member::TYPE] ?? '';

        $valid_keys = [Member::ID];
        if ($this->isForeignKeyPublic || $type !== Member::MEMBER_TYPE_USER) {
            $valid_keys[] = Member::CODE;
        }

        foreach ($valid_keys as $valid_key) {
            if (isset($member[$valid_key])) {
                return;
            }
        }

        throw new ValidationFailedException(
            ErrorCode::MISSING_REQUIRED_KEY_IN_PARAM,
            $param_name,
            null,
            ["key_options" => join(', ', $valid_keys)]
        );
    }

}
