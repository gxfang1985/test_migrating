<?php
declare(strict_types=1);

namespace grn\api\validator\schedule;

use grn\api\validator\CheckerBase;
use grn\api\exception\ErrorCode;
use grn\api\exception\validation\ValidationFailedException;
use grn\schedule\api\model\Event;
use grn\schedule\rest_api\EventParamsBuilder;

class EventsCorrelationChecker extends CheckerBase
{
    const CHECK_POST_PARAMS = 1;
    const CHECK_PATCH_PARAMS = 2;

    /** @var int */
    private $checkType;

    /**
     * EventCorrelationChecker constructor.
     *
     * @param int $check_type
     */
    public function __construct(int $check_type)
    {
        $this->checkType = $check_type;
    }

    /**
     * @param string $param_name
     * @param array  $input
     *
     * @return bool
     * @throws ValidationFailedException
     */
    public function check($param_name, array $input): bool
    {
        switch ($this->checkType) {
            case self::CHECK_POST_PARAMS:
                $this->checkPostParams($input);
                break;
            case self::CHECK_PATCH_PARAMS:
                $this->checkPostParams($input);
                break;
        }

        return true;
    }

    /**
     * @param array $input
     *
     * @return bool
     * @throws ValidationFailedException
     */
    private function checkPostParams(array $input): bool
    {
        $start_only
            = EventParamsBuilder::convertToBool($this->getValue(Event::START_ONLY, $input) ?? false);
        $all_day
            = EventParamsBuilder::convertToBool($this->getValue(Event::ALL_DAY, $input) ?? false);

        if ($start_only && $all_day) {
            throw new ValidationFailedException(ErrorCode::BOTH_OF_SCHEDULE_OPTIONS_ARE_TRUE);
        }

        if ( ! $start_only) {
            $end_datetime = $this->getValue(Event::END, $input);
            if (is_null($end_datetime)) {
                throw new ValidationFailedException(ErrorCode::CANNOT_JUDGE_SCHEDULE_TYPE);
            }
        }

        return true;
    }
}
