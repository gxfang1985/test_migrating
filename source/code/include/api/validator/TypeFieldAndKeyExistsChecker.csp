<?php
declare(strict_types=1);

namespace grn\api\validator;

use grn\api\exception\ErrorCode;
use grn\api\exception\validation\ValidationFailedException;

class TypeFieldAndKeyExistsChecker extends CheckerBase
{
    /** @var string */
    const KEY_TYPE = 'type';

    /** @var array */
    private $existKeys;

    /** @var TypeChecker */
    private $typeChecker;

    /**
     * TypeAndExistKeysChecker constructor.
     *
     * @param array $allow_types
     * @param array $exist_keys
     */
    public function __construct(array $allow_types, array $exist_keys)
    {
        $this->existKeys = $exist_keys;
        $this->typeChecker = new TypeChecker($allow_types);
    }

    /**
     * @param string $param_name
     * @param array  $input
     *
     * @return bool
     * @throws ValidationFailedException
     */
    public function check($param_name, array $input): bool
    {
        $this->checkAllowTypes($param_name, $input);

        $value = $this->getValue($param_name, $input);
        if (is_null($value)) {
            return true;
        }

        if ( ! (is_array($value)) || ! $this->checkExistKeys($value, $param_name)) {
            throw new ValidationFailedException(ErrorCode::INVALID_ITEM_TYPE, $param_name);
        }

        return true;
    }

    /**
     * @param array  $values
     * @param string $param_name
     *
     * @return bool
     * @throws ValidationFailedException
     */
    private function checkExistKeys(array $values, $param_name): bool
    {
        foreach ($values as $each_value) {
            if ( ! is_array($each_value)) {
                return false;
            }
            $this->checkKeyExists($each_value, $param_name);
        }

        return true;
    }

    /**
     * @param string $param_name
     * @param array  $input
     *
     * @throws ValidationFailedException
     */
    private function checkAllowTypes($param_name, array $input)
    {
        $this->typeChecker->check($param_name, $input);
    }

    /**
     * @param array  $value
     * @param string $param_name
     *
     * @throws ValidationFailedException
     */
    private function checkKeyExists($value, $param_name): void
    {
        foreach ($this->existKeys as $each_exist_key) {
            if (isset($value[$each_exist_key])) {
                return;
            }
        }
        throw new ValidationFailedException(
            ErrorCode::MISSING_REQUIRED_KEY_IN_PARAM, $param_name,
            null, ["key_options" => join(', ', $this->existKeys)]);
    }
}
