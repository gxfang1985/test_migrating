<?php
declare(strict_types=1);

namespace grn\api\validator;

use grn\api\exception\ErrorCode;
use grn\api\exception\validation\ValidationFailedException;

class OrderByChecker extends CheckerBase
{
    const ORDER_BY_SYNTAX = ["asc", "desc"];

    /** @var array */
    private $allowFields;

    /**
     * OrderByChecker constructor.
     *
     * @param array $allow_fields
     */
    public function __construct(array $allow_fields)
    {
        $this->allowFields = $allow_fields;
    }

    /**
     * @param string $param_name
     * @param array  $input
     *
     * @return bool
     * @throws ValidationFailedException
     */
    public function check($param_name, array $input): bool
    {
        $value = $this->getValue($param_name, $input);
        if (is_null($value)) {
            return true;
        }

        if ( ! is_string($value)
             || ! $this->checkOrderBy($value)
        ) {
            throw new ValidationFailedException(
                ErrorCode::INVALID_ITEM_TYPE, $param_name);
        }

        return true;
    }

    /**
     * @param string $value
     *
     * @return bool
     */
    private function checkOrderBy(string $value): bool
    {
        $separated_value = explode(" ", cb_trim($value));
        if (2 !== count($separated_value)) {
            return false;
        }

        $column = $separated_value[0];
        if ( ! in_array($column, $this->allowFields, true)) {
            return false;
        }

        $syntax = $separated_value[1];
        if ( ! in_array($syntax, self::ORDER_BY_SYNTAX, true)) {
            return false;
        }

        return true;
    }

}
