<?php
declare(strict_types=1);

namespace grn\api\validator;

use grn\api\exception\ErrorCode;
use grn\api\exception\validation\ValidationFailedException;

require_once('fw/date.csp');

class DatetimeRFC3339Checker extends CheckerBase
{
    private $innerParamName;

    private $requireTimezoneOffset = false;

    /**
     * DatetimeRFC3339Checker constructor.
     *
     * @param string|null $inner_param_name
     * @param bool        $require_timezone_offset
     */
    public function __construct(
        $inner_param_name = null,
        $require_timezone_offset = false
    ) {
        $this->innerParamName = $inner_param_name;
        $this->requireTimezoneOffset = $require_timezone_offset;
    }

    /**
     * @param string $param_name
     * @param array  $input
     *
     * @return bool
     * @throws ValidationFailedException
     */
    public function check($param_name, array $input): bool
    {
        $value = $this->getValue($param_name, $input);
        if (is_null($value)) {
            return true;
        }

        if (is_array($value) && $this->innerParamName) {
            $value = $value[$this->innerParamName] ?? null;
        }

        if ( ! is_string($value)) {
            throw new ValidationFailedException(ErrorCode::INVALID_ITEM_TYPE,
                $param_name);
        }

        if ( ! $this->checkDateTime($value)) {
            throw new ValidationFailedException(ErrorCode::INVALID_DATETIME,
                $param_name);
        }

        return true;
    }

    /**
     * @param string $value
     *
     * @return bool
     */
    private function checkDateTime(string $value)
    {
        $datetime = \CB_ISO8601Util::toUTCDateTime($value,
            $this->requireTimezoneOffset);

        return $datetime !== false;
    }
}
