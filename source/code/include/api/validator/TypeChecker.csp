<?php
declare(strict_types=1);

namespace grn\api\validator;

use grn\api\exception\ErrorCode;
use grn\api\exception\validation\ValidationFailedException;

class TypeChecker extends CheckerBase
{
    /** @var string */
    const KEY_TYPE = 'type';

    /** @var array */
    private $allowTypes;

    /**
     * TypeAndExistKeysChecker constructor.
     *
     * @param array $allow_types
     */
    public function __construct(array $allow_types)
    {
        $this->allowTypes = $allow_types;
    }

    /**
     * @param string $param_name
     * @param array  $input
     *
     * @return bool
     * @throws ValidationFailedException
     */
    public function check($param_name, array $input): bool
    {
        $values = $this->getValue($param_name, $input);
        if (is_null($values)) {
            return true;
        }

        if ( ! (is_array($values))) {
            throw new ValidationFailedException(ErrorCode::INVALID_ITEM_TYPE, $param_name);
        }

        foreach ($values as $value) {
            if ( ! is_array($value)) {
                throw new ValidationFailedException(ErrorCode::INVALID_ITEM_TYPE, $param_name);
            }
            $this->checkAllowType($value, $param_name);
        }

        return true;
    }

    /**
     * @param array  $value
     * @param string $param_name
     *
     * @throws ValidationFailedException
     */
    private function checkAllowType($value, $param_name): void
    {
        if (count($this->allowTypes) === 0) {
            return;
        }

        $type = $value[self::KEY_TYPE] ?? null;

        if ( ! in_array($type, $this->allowTypes, true)) {
            throw new ValidationFailedException(
                ErrorCode::UNAVAILABLE_OPTION_TYPE,
                $param_name,
                null,
                ["type_options" => join(', ', $this->allowTypes)]);
        }

    }

}
