<?php
declare(strict_types=1);

namespace grn\api\validator;

use grn\api\exception\ErrorCode;
use grn\api\exception\validation\ValidationFailedException;

class InArrayChecker extends CheckerBase
{
    /** @var array */
    private $allowValues;

    /**
     * InArrayChecker constructor.
     *
     * @param array $allow_values
     */
    public function __construct(array $allow_values)
    {
        $this->allowValues = $allow_values;
    }

    /**
     * @param string $param_name
     * @param array  $input
     *
     * @return bool
     * @throws ValidationFailedException
     */
    public function check($param_name, array $input): bool
    {
        $value = $this->getValue($param_name, $input);
        if (is_null($value)) {
            return true;
        }

        if ( ! (is_string($value) || is_numeric($value))) {
            throw new ValidationFailedException(ErrorCode::INVALID_ITEM_TYPE,
                $param_name);
        }

        if ( ! $this->checkInArray($value)) {
            throw new ValidationFailedException(
                ErrorCode::UNAVAILABLE_OPTION_VALUE, $param_name,
                null, ["enum_options" => join(', ', $this->allowValues)]);
        }

        return true;
    }

    /**
     * @param string|int $value
     *
     * @return bool
     */
    private function checkInArray($value): bool
    {
        $verify = in_array($value, $this->allowValues, true);

        return $verify;
    }
}
