<?php
declare(strict_types=1);

namespace grn\api\validator;

use grn\api\exception\ErrorCode;
use grn\api\exception\validation\ValidationFailedException;

class IntegerRangeChecker extends CheckerBase
{
    /** @var int */
    private $minLength;
    /** @var int */
    private $maxLength;

    /**
     * IntegerRangeChecker constructor.
     *
     * When each argument is given NULL, the minimum or maximum length is not checked.
     *
     * @param int|null $min_length
     * @param int|null $max_length
     */
    public function __construct($min_length, $max_length)
    {
        $this->minLength = $min_length;
        $this->maxLength = $max_length;
    }

    /**
     * @param string $param_name
     * @param array  $input
     *
     * @return bool
     * @throws ValidationFailedException
     */
    public function check($param_name, array $input): bool
    {
        $value = $this->getValue($param_name, $input);
        if (is_null($value)) {
            return true;
        }

        if ( ! ctype_digit($value)) {
            throw new ValidationFailedException(ErrorCode::INVALID_ITEM_TYPE,
                $param_name);
        }

        if ( ! $this->checkMinLength($value)) {
            throw new ValidationFailedException(ErrorCode::SMALLER_THAN_LIMIT,
                $param_name);
        }

        if ( ! $this->checkMaxLength($value)) {
            throw new ValidationFailedException(ErrorCode::LARGER_THAN_LIMIT,
                $param_name);
        }

        return true;
    }

    /**
     * @param string|int $value
     *
     * @return bool
     */
    private function checkMinLength($value): bool
    {
        if ( ! is_null($this->minLength)) {
            $length = intval($value);

            return $this->minLength <= $length;
        }

        return true;
    }

    /**
     * @param string|int $value
     *
     * @return bool
     */
    private function checkMaxLength($value): bool
    {
        if ( ! is_null($this->maxLength)) {
            $length = intval($value);

            return $length <= $this->maxLength;
        }

        return true;
    }

}
