<?php
declare(strict_types=1);

namespace grn\api\validator;

use grn\api\exception\ErrorCode;
use grn\api\exception\validation\ValidationFailedException;

require_once('fw/i18n.csp');

class TimeZoneChecker extends CheckerBase
{
    private $innerParamName;

    /**
     * TimeZoneChecker constructor.
     *
     * @param string|null $inner_param_name
     */
    public function __construct($inner_param_name = null)
    {
        $this->innerParamName = $inner_param_name;
    }

    /**
     * @param string $param_name
     * @param array  $input
     *
     * @return bool
     * @throws ValidationFailedException
     */
    public function check($param_name, array $input): bool
    {
        $value = $this->getValue($param_name, $input);
        if (is_null($value)) {
            return true;
        }

        if (is_array($value) && $this->innerParamName) {
            $value = $value[$this->innerParamName] ?? null;
        }

        if ( ! is_string($value)) {
            throw new ValidationFailedException(ErrorCode::INVALID_ITEM_TYPE,
                $param_name);
        }

        if ( ! $this->checkTimeZone($value)) {
            throw new ValidationFailedException(ErrorCode::INVALID_TIMEZONE,
                $param_name);
        }

        return true;
    }

    /**
     * @param string $value
     *
     * @return bool
     */
    private function checkTimeZone(string $value)
    {
        $verify = \CB_I18N::isAvailableTimezone($value);

        return $verify;
    }
}
