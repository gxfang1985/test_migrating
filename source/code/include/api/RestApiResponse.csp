<?php
declare(strict_types=1);

namespace grn\api;

use grn\api\http\HttpHeaders;
use grn\api\http\HttpStatus;

class RestApiResponse
{
    const JSON_ENCODE_OPTIONS = JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES;

    public function __construct()
    {
        $this->setOutputStates();
    }

    private function setOutputStates()
    {
        global $G_state_set;
        $G_state_set->set('copyright_should_be_written', false);
        $G_state_set->set('html_should_be_closed', false);
    }

    /**
     * @param array|NULL $value
     *
     * @return string
     */
    public function jsonEncode($value): string
    {
        if (is_null($value)) {
            return "";
        }
        $json = json_encode($value, self::JSON_ENCODE_OPTIONS);
        if ($json === false) {
            $json = "";
        }

        return $json;
    }

    /**
     * @param ResponseEntity $response_entity
     *
     * @return string
     */
    public function buildSuccessResponse(ResponseEntity $response_entity
    ): string {
        $http_status = $response_entity->getHttpStatus();
        HttpHeaders::setSuccessHeaders($http_status);

        $body = $response_entity->getBody();
        $message = $body->getMessage();

        $body_json = $this->jsonEncode($message);

        return $body_json;
    }

    /**
     * @param string      $error_code
     * @param string      $message
     * @param string      $cause
     * @param object|null $counter_measure
     * @param object|null $developer_info
     * @param object|null $backtrace
     * @param object|null $input
     *
     * @return string
     */
    public function buildFailureResponse(
        string $error_code,
        string $message,
        string $cause,
        $counter_measure = null,
        $developer_info = null,
        $backtrace = null,
        $input = null
    ): string {
        $http_status = HttpStatus::getFailureStatus($error_code);
        HttpHeaders::setFailureHeaders($http_status, $error_code);

        $body = $this->buildFailureBody(
            $error_code,
            $message,
            $cause,
            $counter_measure,
            $developer_info,
            $backtrace,
            $input);
        $body_json = $this->jsonEncode($body);

        return $body_json;
    }

    /**
     * @param string      $error_code
     * @param string      $message
     * @param string      $cause
     * @param object|null $counter_measure
     * @param object|null $developer_info
     * @param object|null $backtrace
     * @param object|null $input
     *
     * @return array
     */
    public function buildFailureBody(
        string $error_code,
        string $message,
        string $cause,
        $counter_measure = null,
        $developer_info = null,
        $backtrace = null,
        $input = null
    ): array {
        $response = [];
        $response["errorCode"] = $error_code;
        $response["message"] = $message;

        if ($cause) {
            $response["cause"] = $cause;
        }

        if (cb_is_display_error_details_mode()) {
            $response["cause"] = $cause;
            $response["counterMeasure"] = $counter_measure;
            $response["developerInfo"] = $developer_info;
            $response["backtrace"] = $backtrace;
            $response["input"] = $input;
        }

        return ["error" => $response];
    }
}
