<?php
declare(strict_types=1);

namespace grn\api;

class Fields
{
    /**
     * @var array $fields
     */
    private $fields = [];

    const DELIMITER = ",";

    /**
     * ResponseFilter constructor.
     *
     * @param string $comma_separated_params
     */
    public function __construct(string $comma_separated_params)
    {
        $this->fields = $this->parseFields($comma_separated_params);
    }

    /**
     * @param string $comma_separated_params
     *
     * @return array
     */
    private function parseFields(string $comma_separated_params): array
    {
        if ($comma_separated_params === "") {
            return [];
        }
        $explode_result = explode(self::DELIMITER, $comma_separated_params);

        $fields = [];
        foreach ($explode_result as $field) {
            $trimmed_field = trim($field);
            if (is_numeric($trimmed_field)) {
                continue;
            }
            $fields[] = $trimmed_field;
        }

        return array_merge(array_unique($fields));
    }

    /**
     * @return array
     */
    public function getFields(): array
    {
        return $this->fields;
    }

    /**
     * @param array $message
     *
     * @return array|\stdClass
     */
    public function convertFieldsToMessage(array $message)
    {
        if (empty($this->fields)) {
            return $this->keepJsonObject($message);
        }

        $converted_message = [];
        foreach ($this->fields as $field) {
            if (array_key_exists($field, $message)) {
                $converted_message[$field] = $message[$field];
            }
        }

        return $this->keepJsonObject($converted_message);
    }

    /**
     * @param array $message
     *
     * @return \stdClass|array
     *
     * PHP key value format array(ex. ["key"=>"value"]) is converted to json Object({"key": "value"}) by json_encode.
     * On the other hand, Empty PHP array([ ]) is converted to json array([ ]) by json_encoding.
     * To return Json object at all times, this methods return stdClass if message is empty.
     */
    private function keepJsonObject(array $message)
    {
        if (empty($message)) {
            return new \stdClass();
        }

        return $message;
    }
}
