<?php
declare(strict_types=1);

namespace grn\api;

use grn\api\http\HttpMethod;

abstract class RestApi
{
    const PARAM_LIMIT = "limit";
    const PARAM_OFFSET = "offset";
    const PARAM_ORDER_BY = "orderBy";
    const PARAM_FIELDS = "fields";

    /** @var array $input */
    private $input = [];

    /** @var string $httpMethod */
    private $httpMethod = HttpMethod::GET;

    /**
     * @param string $method
     */
    public function setHttpMethod(string $method)
    {
        $this->httpMethod = $method;
    }

    /**
     * @param $input
     */
    public function setInput($input)
    {
        $this->input = $input;
    }

    /**
     * @param array $params
     *
     * @return ResponseEntity
     */
    abstract public function execute(array $params): ResponseEntity;

    /**
     * @return array
     */
    public function getInput()
    {
        return $this->input;
    }

    /**
     * @return string
     */
    public function getHttpMethod()
    {
        return $this->httpMethod;
    }

    /**
     * @param string|array $key
     * @param string|null  $default_value
     *
     * @return string|array|null
     */
    public function getParam($key, $default_value = null)
    {
        if ( ! is_array($key)) {
            $param = $this->input[$key] ?? $default_value;

            return $param;
        }
        if (count($key) === 0) {
            return $default_value;
        }

        $current_param = $this->input;
        foreach ($key as $current_key) {
            if ( ! isset($current_param[$current_key])) {
                return $default_value;
            }
            $current_param = $current_param[$current_key];
        }

        return $current_param;
    }


    /**
     * @return int $limit
     */
    public function getParamLimit(): int
    {
        return intval($this->getParam(self::PARAM_LIMIT, "100"));
    }

    /**
     * @return int $offset
     */
    public function getParamOffset(): int
    {
        return intval($this->getParam(self::PARAM_OFFSET, "0"));
    }

    /**
     * @param string $default_field e.g.: "created"
     * @param string $default_order e.g.: "asc"
     *
     * @return array[string] $order_by eg: [ "created", "asc" ]
     */
    public function getParamOrderBy(string $default_field, string $default_order): array
    {
        $str_order_by = $this->getParam(self::PARAM_ORDER_BY,
            $default_field . " " . $default_order);

        return explode(" ", $str_order_by);
    }
}
