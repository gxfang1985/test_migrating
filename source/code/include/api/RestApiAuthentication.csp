<?php
declare(strict_types=1);

namespace grn\api;

use grn\api\exception\authentication\NotAuthenticatedException;
use grn\api\exception\RestApiException;

class RestApiAuthentication
{
    /**
     * @throws NotAuthenticatedException
     * @throws \Exception
     */
    public static function authenticate(): void
    {
        // Ensure that authentications are performed in the following order:
        // 1. Password Authentication
        // 2. API Token Authentication (Not implemented yet)
        // 3. Session Authentication

        // 1. Password Authentication
        if ( ! self::passwordAuthentication()) {
            // 3. Session Authentication
            self::sessionAuthentication();
        }
    }

    /**
     * @return bool
     * @throws \Exception
     */
    private static function passwordAuthentication()
    {
        try {
            $ret = cb_lwc_uum()->login();
        } catch (\Exception $thrown_exception) {
            try {
                // This line prevents getLoginUser() from raising an exception in the error handler.
                cb_lwc_uum()->getLoginUser();
            } catch (\Exception $ignored_exception) {
                // Ignore the exception
            }

            throw $thrown_exception;
        }

        return $ret;
    }

    /**
     * @throws NotAuthenticatedException
     */
    private static function sessionAuthentication()
    {
        $login_user = cb_lwc_uum()->getLoginUser();
        if ( ! $login_user) {
            throw new NotAuthenticatedException();
        }
    }
}
