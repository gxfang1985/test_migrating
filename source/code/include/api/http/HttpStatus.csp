<?php
declare(strict_types=1);

namespace grn\api\http;

use grn\api\exception\ErrorCode;
use grn\grn\ForestServerErrorStatus;

require_once('fw/error_code.csp');
require_once('schedule/error_code.csp');
require_once('cbpapi/error_code.csp');

class HttpStatus
{
    // --- 2xx Success ---
    const OK = 200;
    const CREATED = 201;
    const NO_CONTENT = 204;

    // --- 4xx Client Error ---
    const BAD_REQUEST = 400;
    const UNAUTHORIZED = 401;
    const FORBIDDEN = 403;
    const NOT_FOUND = 404;
    const METHOD_NOT_ALLOWED = 405;
    const UNSUPPORTED_MEDIA_TYPE = 415;
    const TOO_MANY_REQUESTS = 429;

    // --- 5xx Server Error ---
    // Caution:
    //  In Forest, it is necessary to divide Internal Server Error to 500 and 520,
    //  because 500 is monitored by SRE team.
    const INTERNAL_SERVER_ERROR_MONITORED = 500;
    const INTERNAL_SERVER_ERROR_NOT_MONITORED = 520;

    const INTERNAL_SERVER_ERROR_MESSAGE = 'Garoon Error';

    const ERROR_CODE_TABLE_4xx
        = [
            // Rest API common
            ErrorCode::INVALID_AUTHORIZATION_VALUE    => self::UNAUTHORIZED, // GRN_REST_API_00001
            ErrorCode::NO_X_REQUESTED_WITH_HEADER     => self::UNAUTHORIZED, // GRN_REST_API_00002
            ErrorCode::NOT_AUTHENTICATED              => self::UNAUTHORIZED, // GRN_REST_API_00003
            ErrorCode::LICENCE_EXPIRED                => self::FORBIDDEN, // GRN_REST_API_00004
            ErrorCode::METHOD_NOT_ALLOWED             => self::METHOD_NOT_ALLOWED, // GRN_REST_API_00102
            ErrorCode::UNSUPPORTED_MEDIA_TYPE         => self::UNSUPPORTED_MEDIA_TYPE, // GRN_REST_API_00103
            ErrorCode::TOO_MANY_REQUESTS              => self::TOO_MANY_REQUESTS, // GRN_REST_API_00104

            // System Common
            E_GRN_APPLICATION_NOT_ACTIVE              => self::FORBIDDEN, // GRN_CMMN_00003
            E_GRN_APPLICATION_NOT_AVAILABLE           => self::FORBIDDEN, // GRN_CMMN_00004
            E_GRN_FILE_MAX_SIZE                       => self::BAD_REQUEST, // GRN_CMMN_00201
            E_GRN_CMMN_AUTH_LOGIN_NOT_INPUT_NECESSARY => self::BAD_REQUEST, // GRN_CMMN_00401
            E_GRN_USER_ROLE_CAN_NOT_USED              => self::BAD_REQUEST, // GRN_CMMN_02901
            E_GRN_USER_ROLE_ADMINISTRATORS_DISABLED   => self::BAD_REQUEST, // GRN_CMMN_02902

            // Schedule
            E_GRN_SCHD_NOTFOUND_EVENT                 => self::NOT_FOUND, // GRN_SCHD_13001
            E_GRN_SCHD_ACCESSDENY_EVENT               => self::FORBIDDEN, // GRN_SCHD_13002
            E_GRN_SCHD_ACCESSDENY_ENTRY               => self::FORBIDDEN, // GRN_SCHD_13043
            E_GRN_SCHD_ACCESSDENY_DELETE              => self::FORBIDDEN, // GRN_SCHD_13045
            E_GRN_FCLT_DENY_MODIFY                    => self::FORBIDDEN, // GRN_SCHD_13215
            E_GRN_SCHD_ACCESSDENY_MODIFY              => self::FORBIDDEN, // GRN_SCHD_13044
        ];
    private const APPLICATION_ERROR_PREFIX_LIST
        = [
            "GRN_ADDR_",
            "GRN_BLLT_",
            "GRN_CBNT_",
            "GRN_CBWS_",
            "GRN_DZLK_",
            "GRN_FAVOUR_",
            "GRN_KINTONE_",
            "GRN_KUNAI_",
            "GRN_LINK_",
            "GRN_MAIL_",
            "GRN_MEMO_",
            "GRN_MOBILE_",
            "GRN_MSSG_",
            "GRN_NTFC_",
            "GRN_PHNM_",
            "GRN_PRSC_",
            "GRN_PRTL_",
            "GRN_REST_API_",
            "GRN_RPRT_",
            "GRN_RSS_",
            "GRN_SCHD_",
            "GRN_SPACE_",
            "GRN_SPACE_DISCUSSION_",
            "GRN_SPACE_FILE_",
            "GRN_SPACE_TODO_",
            "GRN_STAR_",
            "GRN_TMCR_",
            "GRN_TODO_",
            "GRN_WRKF_",
        ];

    /**
     * @var int
     */
    private $statusCode;
    /**
     * @var string|null
     */
    private $statusMessage;

    /**
     * HttpStatus constructor.
     *
     * @param int         $status_code
     * @param string|null $status_message
     */
    public function __construct(int $status_code, $status_message = null)
    {
        $this->statusCode = $status_code;
        $this->statusMessage = $status_message;
    }

    /**
     * @return int
     */
    public function getStatusCode(): int
    {
        return $this->statusCode;
    }

    /**
     * @return string|null
     */
    public function getStatusMessage()
    {
        return $this->statusMessage;
    }

    /**
     * @param HttpStatus $http_status
     *
     * @return bool
     */
    public function equal(HttpStatus $http_status): bool
    {
        $is_code_matched = ($this->getStatusCode() === $http_status->getStatusCode());
        $is_message_matched = ($this->getStatusMessage() === $http_status->getStatusMessage());

        return $is_code_matched && $is_message_matched;
    }

    /**
     * @param string $error_code
     *
     * @return HttpStatus
     */
    static public function getFailureStatus(string $error_code): HttpStatus
    {
        $class = __CLASS__;

        if (self::is500StatusError($error_code)) {
            return new $class(self::INTERNAL_SERVER_ERROR_MONITORED, self::INTERNAL_SERVER_ERROR_MESSAGE);
        }

        if (self::is4xxStatusError($error_code)) {
            return new $class(self::ERROR_CODE_TABLE_4xx[$error_code]);
        }

        if (self::isApplicationError($error_code)) {
            return new $class(self::BAD_REQUEST);
        }

        return new $class(self::INTERNAL_SERVER_ERROR_NOT_MONITORED, self::INTERNAL_SERVER_ERROR_MESSAGE);
    }

    /**
     * @param string $error_code
     *
     * @return bool
     */
    static public function is500StatusError(string $error_code): bool
    {
        $forest_server_error_status = new ForestServerErrorStatus($error_code);

        return $forest_server_error_status->isInA500StatusErrorList();
    }

    /**
     * @param string $error_code
     *
     * @return bool
     */
    static public function is4xxStatusError(string $error_code): bool
    {
        return array_key_exists($error_code, self::ERROR_CODE_TABLE_4xx);
    }

    /**
     * @param string $error_code
     *
     * @return bool
     */
    static public function isApplicationError(string $error_code): bool
    {
        $prefix = self::extractErrorPrefix($error_code);

        return in_array($prefix, self::APPLICATION_ERROR_PREFIX_LIST);
    }

    /**
     * @param string $error_code
     *
     * @return string
     */
    static public function extractErrorPrefix(string $error_code): string
    {
        $matches = [];
        if (preg_match("/^(\w+?)\d*$/", $error_code, $matches) === 1) {
            return $matches[1];
        }

        return "";
    }
}
