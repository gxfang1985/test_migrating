<?php
declare(strict_types=1);

namespace grn\api\http;

class HttpHeaders
{
    const ALLOWED_CONTENT_TYPE = 'application/json';

    /**
     * @param string $header
     * @param bool   $replace
     */
    private static function setHeader(string $header, $replace = true)
    {
        if ( ! headers_sent()) {
            header($header, $replace);
        }
    }

    /**
     * @param $http_status
     */
    public static function setSuccessHeaders($http_status)
    {
        self::setContentType();

        self::sendHttpStatus($http_status);
    }

    /**
     * @param $http_status
     * @param $error_code
     */
    public static function setFailureHeaders($http_status, $error_code)
    {
        self::setContentType();
        self::setCBError($error_code);

        self::sendHttpStatus($http_status);
    }

    /**
     *
     * @param HttpStatus $http_status
     */
    private static function sendHttpStatus(HttpStatus $http_status)
    {
        if (headers_sent()) {
            return;
        }

        $status_code = $http_status->getStatusCode();
        $status_message = $http_status->getStatusMessage();

        $status_line = $status_code;
        if (!is_null($status_message)){
            $status_line .= " " . $status_message;
        }

        http_response_code($status_code);
        self::setHeader("Status: $status_line");

        if (cb_is_onpremises_distributed_database()) {
            self::setHeader("HTTP/1.1 $status_line");
        }
    }

    /**
     * @param int $limit
     * @param int $thread_count
     */
    public static function setConcurrencyLimit(int $limit, int $thread_count)
    {
        self::setHeader("X-ConcurrencyLimit-Limit: " . $limit);
        self::setHeader("X-ConcurrencyLimit-Running: " . $thread_count);
    }

    private static function setContentType()
    {
        self::setHeader("Content-Type: application/json; charset=utf-8");
    }

    /**
     * @param string $error_code
     */
    private static function setCBError(string $error_code)
    {
        self::setHeader("X-Cybozu-Error: " . $error_code);
    }

    /**
     * @return string
     */
    public static function getContentType(): string
    {
        $content_type = $_SERVER["CONTENT_TYPE"] ?? "";
        $content_type = strtolower(cb_trim($content_type));

        return $content_type;
    }

    /**
     * @return bool
     */
    public static function isAllowedContentType(): bool
    {
        $content_type = self::getContentType();
        if ($content_type === self::ALLOWED_CONTENT_TYPE) {
            return true;
        }

        return false;
    }
}
