<?php

namespace grn\kunai\data\bean\log;

use grn\space\common\data\LogInterface;

class KunaiAvailabilityDeleteMultiLog implements LogInterface
{
    const ACTION_DELETE = 'delete';
    const OBJECT_AVAILABILITY_DELETE_MULTI = 'availability_user_delete_multi';

    /**
     * @var string
     */
    private $_action;

    /**
     * @var string
     */
    private $_object;

    /**
     * @var array
     */
    private $_items;

    public function __construct()
    {
        $this->setAction(self::ACTION_DELETE);
        $this->setObject(self::OBJECT_AVAILABILITY_DELETE_MULTI);
        $this->_items = [];
    }

    /**
     * @param string $action
     */
    public function setAction($action)
    {
        $this->_action = $action;
    }

    /**
     * @return string
     */
    public function getAction()
    {
        return $this->_action;
    }

    /**
     * @param string $object
     */
    public function setObject($object)
    {
        $this->_object = $object;
    }

    /**
     * @return string
     */
    public function getObject()
    {
        return $this->_object;
    }

    /**
     * @param string $type
     * @param array  $items
     */
    public function setItems($type, array $items)
    {
        if (array_key_exists($type, $this->_items)) {
            $this->_items[$type] = array_merge($this->_items[$type], $items);
        } else {
            $this->_items[$type] = $items;
        }
    }

    /**
     * @return array
     */
    public function getItems()
    {
        return $this->_items;
    }

    public function getParameters()
    {
        $retval = [];
        $items = $this->getItems();
        foreach ($items as $key => $item) {
            $ids = '';
            $temp = false;
            foreach ($item as $item_id) {
                $ids .= ($temp ? ', ' : '') . $item_id;
                $temp = true;
            }
            $retval[$key] = $ids;
        }

        return $retval;
    }
}
