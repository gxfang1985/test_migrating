<?php

namespace grn\kunai\data\bean\log;

use grn\space\common\data\LogInterface;

class KunaiAvailabilityImportLog implements LogInterface
{
    const ACTION_IMPORT = 'import';
    const OBJECT_AVAILABILITY_IMPORT = 'availability_user_import';

    /**
     * @var string
     */
    private $_action;

    /**
     * @var string
     */
    private $_object;

    /**
     * @var array
     */
    private $_item;

    /**
     * @var array
     */
    private $_foreign_key;

    /**
     * @var array
     */
    private $_availability;

    public function __construct()
    {
        $this->setAction(self::ACTION_IMPORT);
        $this->setObject(self::OBJECT_AVAILABILITY_IMPORT);
        $this->_item = [];
        $this->_foreign_key = [];
        $this->_availability = [];
    }

    /**
     * @param string $action
     */
    public function setAction($action)
    {
        $this->_action = $action;
    }

    /**
     * @return string
     */
    public function getAction()
    {
        return $this->_action;
    }

    /**
     * @param string $object
     */
    public function setObject($object)
    {
        $this->_object = $object;
    }

    /**
     * @return string
     */
    public function getObject()
    {
        return $this->_object;
    }

    /**
     * @param string $key
     * @param string $item
     */
    public function setItem($key, $item)
    {
        $this->_item[$key] = $item;
    }

    /**
     * @param  string $key
     *
     * @return string
     */
    public function getItem($key)
    {
        return $this->_item[$key];
    }

    /**
     * @param string $key
     * @param string $foreign_key
     */
    public function setForeignKey($key, $foreign_key)
    {
        $this->_foreign_key[$key] = $foreign_key;
    }

    /**
     * @param  string $key
     *
     * @return string
     */
    public function getForeignKey($key)
    {
        return $this->_foreign_key[$key];
    }

    /**
     * @param string $key
     * @param object $availability
     */
    public function setAvailability($key, $availability)
    {
        $this->_availability[$key] = $availability;
    }

    /**
     * @param  string $key
     *
     * @return object
     */
    public function getAvailability($key)
    {
        return $this->_availability[$key];
    }

    public function getParameters()
    {
        $retval = [];
        foreach ($this->_availability as $key => $availability) {
            $retval['availability_' . $key] = $this->getItem($key) . ':'
                                              . $this->getForeignKey($key);
            $app_status = $availability->getAppStatus();
            foreach ($app_status as $app => $status) {
                $status = $status ? 1 : 0;
                $retval['availability_' . $key] .= ', ' . $app . ':' . $status;
            }
        }

        return $retval;
    }
}
