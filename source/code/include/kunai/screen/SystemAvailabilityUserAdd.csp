<?php

namespace grn\kunai\screen;

use grn\kunai\data\bean\KunaiAvailabilityUser;
use grn\kunai\data\bean\KunaiAvailabilityStaticRole;
use grn\kunai\data\bean\KunaiAvailabilityGroup;
use grn\kunai\data\bean\KunaiAvailabilityDynamicRole;
use grn\kunai\data\bean\log\KunaiAvailabilityAddLog;
use grn\kunai\service\KunaiService;

class SystemAvailabilityUserAdd extends KunaiScreenBase
{
    const SESSION_KEY = 'kunai/system/availability_user_add';

    public function fetch()
    {
        $input = $this->getInput();
        $page_name = $this->getPageName();
        $target = $this->getArrayValue('menu', $input);
        $org_id = $this->getArrayValue('poid', $input);
        $list_max = $this->getUserConfig()->getListMax();

        require_once('grn/org_util.csp');
        require_once('grn/org_util_search.csp');
        $is_target_role = false;
        if ($target == 'role') {
            $is_target_role = true;
            //GTM-2226
            $is_role_search = array_key_exists('role_search_text', $input);
            if ($is_role_search) {
                $role_search_text = $input['role_search_text'];
            }
            if ($is_role_search && $role_search_text != "") {
                $role_list =& grn_search_role_list($role_search_text);
            } else {
                $role_list = &grn_get_user_or_role_list($target, [], $list_max);
            }
        } else {
            $tree_org = $this->getTreeOrg($org_id);

            $org = $this->constructOrg($org_id);

            // get user list and navigation
            $is_search = array_key_exists('search_text', $input);
            if ($is_search) {
                $search_text = $input['search_text'];
                $condition = grn_get_user_info_search_condition($org_id,
                    $search_text, true);
                $count = grn_get_user_info_search_count($org_id,
                    $condition);

                $navi_params = [];
                $navi_params['poid'] = $org_id;
                $navi_params['search_text'] = $search_text;
                $navigation_info
                    = grn_get_user_navigation_info($count,
                    $navi_params, $list_max);

                $user_list = &grn_search_user_info($org_id, $condition,
                    $navigation_info);
            } elseif ($org_id) {
                $navi_params = [];
                $navi_params['poid'] = $org_id;
                $navigation_info = grn_get_user_list_info($org_id,
                    $navi_params, $list_max);

                $user_list = grn_get_user_list($org_id, $navigation_info);
            } else {
                $user_list = [];
                $navigation_info = [
                    'navi' => [
                        'number_on_page'               => $list_max,
                        'previous_page_start_position' => -1,
                        'next_page_start_position'     => -1,
                    ],
                ];
            }
        }

        // set target ids into session
        $session = $this->getSession(self::SESSION_KEY);
        $target_ids = $session->get('target_ids');
        if ( ! is_array($target_ids)) {
            $target_ids = [];
        }

        if ($this->getArrayValue('reset', $input)) {
            $target_ids = [];
        } elseif ($this->getArrayValue('add', $input)) {
            $aids = $this->getArrayValue('aid', $input);
            if (is_array($aids) && count($aids)) {
                foreach ($aids as $aid) {
                    $id_pair = explode(':', $aid);
                    if (count($id_pair) != 2
                        || preg_match('/[ ]+/', $id_pair[1])
                    ) {
                        continue;
                    }
                    if ($id_pair[0] == 'user' || $id_pair[0] == 'group'
                        || $id_pair[0] == 'static_role'
                    ) {
                        if (preg_match('/^[1-9][0-9]{0,19}$/', $id_pair[1])
                            && is_numeric($id_pair[1])
                            && $id_pair[1] > 0
                            && intval($id_pair[1])
                        ) {
                            $aid = $id_pair[0] . ':'
                                   . intval($id_pair[1]);
                            $target_ids[$aid] = 1;
                        }
                    } elseif ($id_pair[0] == 'dynamic_role') {
                        $target_ids[$aid] = 1;
                    }
                }
            }
        } elseif ($this->getArrayValue('remove', $input)) {
            $rids = $this->getArrayValue('rid', $input);
            if (is_array($rids) && count($rids)) {
                foreach ($rids as $rid) {
                    unset($target_ids[$rid]);
                }
            }
        }
        $session->set('target_ids', $target_ids);

        $selected_list = $this->getSelectedList($target_ids);

        require_once('grn/smarty.csp');
        $smarty = new \GRN_Smarty();
        $smarty->assign('target', $target);
        $smarty->assign('poid', $org_id);
        if ($is_target_role) {
            //GTM-2226
            $smarty->assign('is_role_search', $is_role_search);
            $smarty->assign('role_search_text',
                $this->getArrayValue('role_search_text', $input));
            $smarty->assign('role_list', $role_list);
        } else {
            $smarty->assign('page_name', $page_name);
            $smarty->assign('tree_org', $tree_org);
            $smarty->assign('org', $org);
            $smarty->assign('is_root', ! $org_id);
            $smarty->assign('is_nogroups', $org_id == '-1');
            $smarty->assign('is_search', $is_search);
            $smarty->assign('search_text',
                $this->getArrayValue('search_text', $input));
            $smarty->assign('user_list', $user_list);
            $smarty->assign('navi_info', $navigation_info);
        }
        $smarty->assign('selected_list', $selected_list);
        $smarty->assign('apps', KunaiService::getActiveControlledApps());

        return $smarty->fetch($page_name . '.tpl');
    }

    public function post($input)
    {
        // set app status
        $apps = KunaiService::getActiveControlledApps();
        $app_status = [];
        foreach ($apps as $app) {
            $status = $this->getArrayValue($app, $input);
            if ($status) {
                $app_status = array_merge($app_status, [$app => true]);
            } else {
                $app_status = array_merge($app_status, [$app => false]);
            }
        }

        // log
        $availability_add_log = new KunaiAvailabilityAddLog();
        $index = 1;

        $service = new KunaiService();

        $session = $this->getSession(self::SESSION_KEY);
        $aid = $session->get('target_ids');
        foreach (array_keys($aid) as $item) {
            $ids = explode(':', $item);
            if (count($ids) < 2) {
                continue;
            }

            switch ($ids[0]) {
                case KunaiService::DYNAMIC_ROLE :
                    $availability = new KunaiAvailabilityDynamicRole();
                    $availability->setDynamicRole($ids[1]);
                    $availability->setAppStatus($app_status);
                    $result
                        = $service->addOrModifyAvailability(KunaiService::DYNAMIC_ROLE,
                        $availability);
                    break;
                case KunaiService::GROUP :
                    $availability = new KunaiAvailabilityGroup();
                    $availability->setGroupId($ids[1]);
                    $availability->setAppStatus($app_status);
                    $result
                        = $service->addOrModifyAvailability(KunaiService::GROUP,
                        $availability);
                    break;
                case KunaiService::STATIC_ROLE :
                    $availability = new KunaiAvailabilityStaticRole();
                    $availability->setStaticRoleId($ids[1]);
                    $availability->setAppStatus($app_status);
                    $result
                        = $service->addOrModifyAvailability(KunaiService::STATIC_ROLE,
                        $availability);
                    break;
                case KunaiService::USER :
                    $availability = new KunaiAvailabilityUser();
                    $availability->setUserId($ids[1]);
                    $availability->setAppStatus($app_status);
                    $result
                        = $service->addOrModifyAvailability(KunaiService::USER,
                        $availability);
                    break;
                default :
                    $result = false;
            }

            //Log
            if ($result) {
                $availability_add_log->setTargetType($index, $ids[0]);
                $availability_add_log->setTargetId($index, $ids[1]);
                $availability_add_log->setAvailability($index, $availability);
                $index++;
            }
        }

        //Log
        $service->getKunaiLogLogic()->notice($availability_add_log);
    }

    private function getTreeOrg(& $org_id)
    {
        $input = $this->getInput();
        $page_name = $this->getPageName();

        require_once('grn/org_tree.csp');
        $util = \GRN_OrgTreeUtil::getInstance();
        $tree = $util->getTree($page_name);

        if (is_null($org_id)) {
            $org_id = $tree->getSelectedNode();
        }

        if (array_key_exists('top', $input) || is_null($tree->getRoot())) {
            $tree->initialize();
            $org_id = null;
        }

        $tree->setSelectedNode($org_id);
        $util->setTree($page_name, $tree);
        $tree_org = $tree->getRoot();

        return $tree_org;
    }

    private function constructOrg($org_id)
    {
        require_once('grn/org_util.csp');
        if (0 > $org_id) {
            $org_row = null;
            $org['oid'] = -1;
            $org['name'] = cb_msg('grn.system', 'nogroup_users');
            $org['foreign_key'] = null;
            $org['description'] = null;
            $org['children'] = [];
            $org['child_count'] = 0;
        } else {
            $org_row = grn_get_org_row($org_id);
            $org = &grn_get_org_info($org_row, false, true);
            $org['children'] = &grn_get_org_children($org_id, true);
            $org['child_count'] = count($org['children']);
        }
        $org['ancestors'] = &grn_get_org_ancestors($org_row);

        return $org;
    }

    private function getSelectedList($target_ids)
    {
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $login = $this->getLoginUser();

        $users_info = [];
        foreach (array_keys($target_ids) as $id) {
            $id_pair = explode(':', $id);
            if (count($id_pair) == 2) {
                if ($id_pair[0] == 'user'
                    && preg_match('/^[1-9][0-9]{0,19}$/', $id_pair[1])
                    && is_numeric($id_pair[1])
                    && $id_pair[1] > 0
                    && intval($id_pair[1])
                ) {
                    $users_info[] = intval($id_pair[1]);
                }
            }
        }
        require_once('grn/controller.csp');
        $users_info
            = \GRN_ControllerUtil::getUserInfoToShowUserName($users_info,
            $login);

        $selected_list = [];
        foreach (array_keys($target_ids) as $id) {
            $id_pair = explode(':', $id);
            if (count($id_pair) != 2 || preg_match('/[ ]+/', $id_pair[1])) {
                continue;
            }
            $target_id = $id_pair[1];
            switch ($id_pair[0]) {
                case 'user':
                    if (preg_match('/^[1-9][0-9]{0,19}$/', $target_id)
                        && is_numeric($target_id)
                        && $target_id > 0
                        && intval($target_id)
                    ) {
                        $target_id = intval($target_id);
                        $user = $uum->getUser($target_id);
                        if ($user) {
                            $selected_list[$id] = [
                                'id'           => "user:{$target_id}",
                                'type'         => 'user',
                                'uid'          => $target_id,
                                'display_name' => \GRN_ControllerUtil::getUserNameText($login->getOID(),
                                    $target_id, $users_info),
                                'foreign_key'  => $user->get('foreign_key'),
                            ];
                        }
                    }
                    break;
                case 'group':
                    if (preg_match('/^[1-9][0-9]{0,19}$/', $target_id)
                        && is_numeric($target_id)
                        && $target_id > 0
                        && intval($target_id)
                    ) {
                        $target_id = intval($target_id);
                        $group = $uum->getGroup($target_id);
                        if ($group) {
                            $selected_list[$id] = [
                                'id'           => "group:{$target_id}",
                                'type'         => 'group',
                                'gid'          => $target_id,
                                'display_name' => $group->get('name'),
                                'foreign_key'  => $group->get('foreign_key'),
                            ];
                        }
                    }
                    break;
                case 'dynamic_role':
                    require_once('grn/uum_util.csp');
                    $uum_util = \GRN_UumUtil::getInstance();
                    $dynamic_roles = $uum_util->listDynamicRoles();
                    if (array_key_exists($target_id, $dynamic_roles)) {
                        $selected_list[$id] = [
                            'id'          => "dynamic_role:{$target_id}",
                            'type'        => 'dynamic_role',
                            'foreign_key' => $target_id,
                        ];
                    }
                    break;
                case 'static_role':
                    if (preg_match('/^[1-9][0-9]{0,19}$/', $target_id)
                        && is_numeric($target_id)
                        && $target_id > 0
                        && intval($target_id)
                    ) {
                        $target_id = intval($target_id);
                        $static_role = $uum->getStaticRole($target_id);
                        if ($static_role) {
                            $selected_list[$id] = [
                                'id'          => "static_role:{$target_id}",
                                'type'        => 'static_role',
                                'foreign_key' => $static_role->get('foreign_key'),
                            ];
                        }
                    }
                    break;
            }
        }

        return $selected_list;
    }

    public function getSitePosition()
    {
        $page_infos = [
            'availability_user_list' => [],
            'availability_user_add'  => null
        ];

        return $this->makeSitePosition(self::PATH_SYSTEM, $page_infos);
    }
}
