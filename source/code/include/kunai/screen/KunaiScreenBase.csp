<?php

namespace grn\kunai\screen;

use grn\grn\GrnGenericScreenBase;

class KunaiScreenBase extends GrnGenericScreenBase
{
    const PATH_SYSTEM = 'kunai/system/';

    private $smarty;

    public function getTitle()
    {
        return grn_get_current_page_display_name();
    }

    public function getPageName()
    {
        return cb_get_pagename();
    }

    protected function makeSitePosition($page_path, $page_infos)
    {
        require_once('grn/controller.csp');
        $controller_util = new \GRN_ControllerUtil($this->getPageName());

        return $controller_util->makeSitePosition($page_path, $page_infos);
    }

    public function needHeader()
    {
        return true;
    }

    public function needFooter()
    {
        return true;
    }

    protected function getSmarty()
    {
        return $this->smarty;
    }

    protected function setSmarty(\GRN_Smarty $smarty)
    {
        $this->smarty = $smarty;
    }

    protected function getUserConfig()
    {
        require_once('grn/ui.csp');
        $ucm = \GRN_UIConfigManager::getInstance();

        return $ucm->getUserConfig($this->getLoginUser());
    }

    protected function getCharset()
    {
        $input = $this->getInput();
        $charset = null;
        if (array_key_exists('charset', $input)) {
            $charset = $input['charset'];
        }
        if (0 == strlen($charset)) {
            global $G_config_common;
            $charset = $G_config_common->get('I18N',
                'default_external_encoding');
        }

        return $charset;
    }

    protected function isSkip()
    {
        $input = $this->getInput();
        if (array_key_exists('skip', $input) && $input['skip']) {
            return true;
        }

        return false;
    }

}
