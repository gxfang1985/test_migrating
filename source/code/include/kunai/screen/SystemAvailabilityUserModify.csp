<?php

namespace grn\kunai\screen;

use grn\grn\Validate;
use grn\kunai\data\bean\log\KunaiAvailabilityModifyLog;
use grn\kunai\exception\KunaiErrorCode;
use grn\kunai\exception\KunaiException;
use grn\kunai\service\KunaiService;

class SystemAvailabilityUserModify extends KunaiScreenBase
{
    const ARG_ITEM_TYPE = 'itype';
    const ARG_ITEM_TYPE_ID = 'itid';

    public function fetch()
    {
        $input = $this->getInput();
        $itype = $this->getArrayValue(self::ARG_ITEM_TYPE, $input);
        $itid = $this->getArrayValue(self::ARG_ITEM_TYPE_ID, $input);

        if ( ! Validate::isIn($itype, [
            KunaiService::DYNAMIC_ROLE,
            KunaiService::GROUP,
            KunaiService::STATIC_ROLE,
            KunaiService::USER
        ])
        ) {
            throw new KunaiException(KunaiErrorCode::GRN_KUNAI_INVALID_ITEM_TYPE);
        }

        $service = new KunaiService();
        $availability = $service->getAvailability($itype, $itid);
        if ( ! $availability || ! $availability->getId()) {
            throw new KunaiException(KunaiErrorCode::GRN_KUNAI_INVALID_ITEM_ID);
        }

        $page_name = $this->getPageName();
        require_once('grn/smarty.csp');
        $t = new \GRN_Smarty();
        $t->assign('itype', $itype);
        $t->assign('itid', $itid);
        $t->assign('apps', KunaiService::getActiveControlledApps());
        $t->assign('availability', $availability);

        return $t->fetch($page_name . '.tpl');
    }

    public function post($input)
    {
        $itype = $this->getArrayValue(self::ARG_ITEM_TYPE, $input);
        $itid = $this->getArrayValue(self::ARG_ITEM_TYPE_ID, $input);

        if ( ! Validate::isIn($itype, [
            KunaiService::DYNAMIC_ROLE,
            KunaiService::GROUP,
            KunaiService::STATIC_ROLE,
            KunaiService::USER
        ])
        ) {
            throw new KunaiException(KunaiErrorCode::GRN_KUNAI_INVALID_ITEM_TYPE);
        }

        $service = new KunaiService();
        $availability = $service->getAvailability($itype, $itid);
        if ( ! $availability || ! $availability->getId()) {
            throw new KunaiException(KunaiErrorCode::GRN_KUNAI_INVALID_ITEM_ID);
        }

        $app_status = [];
        $apps = KunaiService::getActiveControlledApps();
        foreach ($apps as $app) {
            $status = $this->getArrayValue($app, $input);
            if ($status) {
                $app_status = array_merge($app_status, [$app => true]);
            } else {
                $app_status = array_merge($app_status, [$app => false]);
            }
        }
        $availability->setAppStatus($app_status);
        $result = $service->editAvailability($itype, $availability);

        // Log
        if ($result) {
            $availability_modify_log = new KunaiAvailabilityModifyLog();
            $availability_modify_log->setTargetType($itype);
            $availability_modify_log->setTargetId($itid);
            $availability_modify_log->setAvailability($availability);
            $service->getKunaiLogLogic()->notice($availability_modify_log);
        }
    }

    public function getSitePosition()
    {
        $page_infos = [
            'availability_user_list'   => [],
            'availability_user_modify' => null
        ];

        return $this->makeSitePosition(self::PATH_SYSTEM, $page_infos);
    }
}
