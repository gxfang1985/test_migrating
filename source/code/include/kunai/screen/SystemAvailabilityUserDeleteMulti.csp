<?php

namespace grn\kunai\screen;

use grn\kunai\data\bean\log\KunaiAvailabilityDeleteMultiLog;
use grn\kunai\service\KunaiService;

class SystemAvailabilityUserDeleteMulti extends KunaiScreenBase
{
    const ARG_CHECKBOX_NAME = 'eid';

    public function fetch()
    {
        $input = $this->getInput();
        $page_name = $this->getPageName();

        require_once('grn/smarty.csp');
        $smarty = new \GRN_Smarty();

        $selected_dynamic_roles = "";
        if (array_key_exists('selected_dynamic_roles', $input)
            && array_key_exists('string', $input['selected_dynamic_roles'])
        ) {
            $selected_dynamic_roles
                = trim($input['selected_dynamic_roles']['string']);
        }
        $smarty->assign('selected_dynamic_roles', $selected_dynamic_roles);

        $selected_static_roles = "";
        if (array_key_exists('selected_static_roles', $input)
            && array_key_exists('string', $input['selected_static_roles'])
        ) {
            $selected_static_roles
                = trim($input['selected_static_roles']['string']);
        }
        $smarty->assign('selected_static_roles', $selected_static_roles);

        $selected_groups = "";
        if (array_key_exists('selected_groups', $input)
            && array_key_exists('string', $input['selected_groups'])
        ) {
            $selected_groups = trim($input['selected_groups']['string']);
        }
        $smarty->assign('selected_groups', $selected_groups);

        $selected_users = "";
        if (array_key_exists('selected_users', $input)
            && array_key_exists('string', $input['selected_users'])
        ) {
            $selected_users = trim($input['selected_users']['string']);
        }
        $smarty->assign('selected_users', $selected_users);

        $selected_dynamic_roles_number = ($selected_dynamic_roles == "") ? 0
            : count(explode(":", $selected_dynamic_roles));
        $selected_static_roles_number = ($selected_static_roles == "") ? 0
            : count(explode(":", $selected_static_roles));
        $selected_groups_number = ($selected_groups == "") ? 0
            : count(explode(":", $selected_groups));
        $selected_users_number = ($selected_users == "") ? 0
            : count(explode(":", $selected_users));

        $smarty->assign('count',
            $selected_dynamic_roles_number + $selected_static_roles_number
            + $selected_groups_number + $selected_users_number);

        return $smarty->fetch($page_name . '.tpl');
    }

    public function post($input)
    {
        require_once('grn/multi_select_utility.csp');
        $input = grn_deploy_selected_users('selected_dynamic_roles',
            'selected_dynamic_roles', $input);
        $input = grn_deploy_selected_users('selected_static_roles',
            'selected_static_roles', $input);
        $input = grn_deploy_selected_users('selected_groups', 'selected_groups',
            $input);
        $input = grn_deploy_selected_users('selected_users', 'selected_users',
            $input);

        $this->setInput($input);

        $dynamic_roles = [];
        if (array_key_exists('selected_dynamic_roles', $input)
            && is_array($input['selected_dynamic_roles'])
        ) {
            $dynamic_roles = $input['selected_dynamic_roles'];
        }
        $group_ids = [];
        if (array_key_exists('selected_groups', $input)
            && is_array($input['selected_groups'])
        ) {
            $group_ids = $input['selected_groups'];
        }
        $static_role_ids = [];
        if (array_key_exists('selected_static_roles', $input)
            && is_array($input['selected_static_roles'])
        ) {
            $static_role_ids = $input['selected_static_roles'];
        }
        $user_ids = [];
        if (array_key_exists('selected_users', $input)
            && is_array($input['selected_users'])
        ) {
            $user_ids = $input['selected_users'];
        }

        //Log
        $availability_delete_multi_log = new KunaiAvailabilityDeleteMultiLog();

        $kunai_service = new KunaiService();
        if (count($dynamic_roles) > 0) {
            $result
                = $kunai_service->deleteMultiAvailability(KunaiService::DYNAMIC_ROLE,
                $dynamic_roles);
            if ($result) {
                $availability_delete_multi_log->setItems(KunaiService::DYNAMIC_ROLE,
                    $dynamic_roles);
            }
        }
        if (count($group_ids) > 0) {
            $result
                = $kunai_service->deleteMultiAvailability(KunaiService::GROUP,
                $group_ids);
            if ($result) {
                $availability_delete_multi_log->setItems(KunaiService::GROUP,
                    $group_ids);
            }
        }
        if (count($static_role_ids) > 0) {
            $result
                = $kunai_service->deleteMultiAvailability(KunaiService::STATIC_ROLE,
                $static_role_ids);
            if ($result) {
                $availability_delete_multi_log->setItems(KunaiService::STATIC_ROLE,
                    $static_role_ids);
            }
        }
        if (count($user_ids) > 0) {
            $result
                = $kunai_service->deleteMultiAvailability(KunaiService::USER,
                $user_ids);
            if ($result) {
                $availability_delete_multi_log->setItems(KunaiService::USER,
                    $user_ids);
            }
        }

        //Log
        $kunai_service->getKunaiLogLogic()
                      ->notice($availability_delete_multi_log);
    }

    public function getSitePosition()
    {
        $page_infos = [
            'availability_user_list'         => [],
            'availability_user_delete_multi' => null
        ];

        return $this->makeSitePosition(self::PATH_SYSTEM, $page_infos);
    }
}
