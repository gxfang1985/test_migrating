<?php

namespace grn\kunai\screen;

use grn\kunai\service\KunaiService;

class SystemAvailabilityUserImport1 extends KunaiScreenBase
{
    const SESSION_KEY = 'kunai/system/availability_user_import1';

    const PATH_INFO = 'kunai/system/availability_user_import1';

    const IMPORT_FILES_KEY = 'import_files';

    const NEXT_PATH_INFO = 'kunai/system/availability_user_import2';

    public function __construct($input)
    {
        parent::__construct($input);

        require_once('grn/smarty.csp');
        $this->setSmarty(new \GRN_Smarty());
    }

    public function fetch()
    {
        $smarty = $this->getSmarty();
        $smarty->setPageInfo(self::PATH_INFO);

        require_once('SmartyValidate.class.php');
        \SmartyValidate::connect($smarty);
        \SmartyValidate::register_form(self::PATH_INFO, true);

        $smarty->assign('charset', $this->getCharset());
        $smarty->assign('skip', $this->isSkip());
        $smarty->assign('available_apps',
            KunaiService::getActiveControlledApps());
        $smarty->assign('form_name', self::PATH_INFO);
        $smarty->assign('page_title', $this->getTitle());
        $smarty->assign('site_position', $this->getSitePosition());

        return $smarty->fetch(self::PATH_INFO . '.tpl');
    }

    public function getSitePosition()
    {
        $page_infos = ['availability_user_import1' => null];

        return $this->makeSitePosition(self::PATH_SYSTEM, $page_infos);
    }

    public function post($input)
    {
        $this->setInput($input);
        $smarty = $this->getSmarty();

        require_once('SmartyValidate.class.php');
        \SmartyValidate::connect($smarty);
        \SmartyValidate::register_form(self::PATH_INFO);
        $formSmarty = $this->getInput();
        if (\SmartyValidate::is_valid($formSmarty, self::PATH_INFO)) {
            $session = $this->getSession(self::SESSION_KEY);

            //Clear all the file stored in this session
            $file_infos = $session->getFiles(self::IMPORT_FILES_KEY);
            if (is_array($file_infos)) {
                foreach (array_keys($file_infos) as $id) {
                    $session->unsetFile(self::IMPORT_FILES_KEY, $id);
                }
            }

            //Get new CSV file.
            global $_FILES;
            $file = $_FILES['file'];

            if ($file['error']) {
                require_once('grn/error_code.csp');
                cb_throw_error(E_GRN_CSV_FILE_NOT_FOUND);
            }

            //Store the file into this session.
            $fileId = $session->addFile(self::IMPORT_FILES_KEY, $file);

            // the validation session is finished
            \SmartyValidate::unregister_form(self::PATH_INFO);

            return [
                self::NEXT_PATH_INFO,
                [
                    'charset' => $this->getCharset(),
                    'skip'    => $this->isSkip(),
                    'file_id' => $fileId
                ]
            ];
        }

        return false;
    }

    public function needHeader()
    {
        return false;
    }

    public function needFooter()
    {
        return false;
    }
}
