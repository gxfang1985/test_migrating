<?php

namespace grn\kunai\screen;

use grn\kunai\service\KunaiService;
use grn\kunai\data\bean\KunaiAvailabilityDynamicRole;
use grn\kunai\data\bean\KunaiAvailabilityGroup;
use grn\kunai\data\bean\KunaiAvailabilityStaticRole;
use grn\kunai\data\bean\KunaiAvailabilityUser;
use grn\kunai\data\bean\log\KunaiAvailabilityExportLog;

class SystemAvailabilityUserExport extends KunaiScreenBase
{
    public function fetch()
    {
        $page_name = $this->getPageName();
        require_once('grn/smarty.csp');
        $smarty = new \GRN_Smarty();

        $smarty->assign('available_apps',
            KunaiService::getActiveControlledApps());

        return $smarty->fetch($page_name . '.tpl');
    }

    public function getSitePosition()
    {
        $page_infos = ['availability_user_export' => null];

        return $this->makeSitePosition(self::PATH_SYSTEM, $page_infos);
    }

    public function post($input)
    {
        $this->setInput($input);

        require_once('grn/smarty.csp');
        $smarty = new \GRN_Smarty();

        $tempFileName = tempnam(cb_tmpdir(), "kunai_");

        require_once("fw/csv.csp");
        $csvWriter = new \CB_CSVWriter($this->getCharset(), $tempFileName);

        //Write header.
        $availableApps = KunaiService::getActiveControlledApps();
        $item_name = $this->getArrayValue('item_name', $input);
        if ($item_name) {
            require_once('fw/i18n.csp');

            $header = [];
            $header[] = cb_msg('grn.kunai.system', 'setting_item');
            $header[] = cb_msg('grn.kunai.system', 'setting_target');

            foreach ($availableApps as $value) {
                $header[] = cb_msg('grn.kunai.system', $value);
            }
            $csvWriter->writeLine($header);
        }

        //Write body.
        $kunaiService = new KunaiService();
        $availability_items = [
            KunaiService::DYNAMIC_ROLE,
            KunaiService::STATIC_ROLE,
            KunaiService::GROUP,
            KunaiService::USER
        ];
        foreach ($availability_items as $availability_type) {
            $availability_collection
                = $kunaiService->getAllAvailability($availability_type);
            foreach ($availability_collection as $availability_object) {
                if (KunaiService::DYNAMIC_ROLE == $availability_type) {
                    $availability_target
                        = $availability_object->getDynamicRole();
                } else {
                    global $G_container_base;
                    $uum = $G_container_base->getInstance('uum');
                    switch ($availability_type) {
                        case KunaiService::STATIC_ROLE :
                            $target
                                = $uum->getStaticRole($availability_object->getStaticRoleId());
                            break;
                        case KunaiService::GROUP :
                            $target
                                = $uum->getGroup($availability_object->getGroupId());
                            break;
                        case KunaiService::USER :
                            $target
                                = $uum->getUser($availability_object->getUserId());
                            break;
                    }
                    $availability_target = $target ? $target->get('foreign_key')
                        : null;
                }
                if ($availability_target) {
                    $line = [];
                    $line[] = $availability_type;
                    $line[] = $availability_target;
                    $app_status = $availability_object->getAppStatus();
                    foreach ($availableApps as $status) {
                        $line[] = $app_status[$status] ? 1 : null;
                    }
                    $csvWriter->writeLine($line);
                }
            }
        }
        $csvWriter->close();

        //Log
        $kunaiService->getKunaiLogLogic()
                     ->notice(new KunaiAvailabilityExportLog());

        //Make the temporary file downloaded.
        cb_prepare_download('kunai_users.csv', 'application/csv', false);
        $fp = fopen($tempFileName, 'rb');
        $filesize = filesize($tempFileName);
        $data = '';
        if ($filesize > 0) {
            $data = fread($fp, $filesize);
        }
        fclose($fp);

        unlink($tempFileName);

        return $data;
    }
}
