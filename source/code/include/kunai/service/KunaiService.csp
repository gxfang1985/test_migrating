<?php

namespace grn\kunai\service;

use grn\grn\Validate;
use grn\kunai\Application;
use grn\kunai\data\bean\KunaiAvailabilityDynamicRole;
use grn\kunai\data\bean\KunaiAvailabilityGroup;
use grn\kunai\data\bean\KunaiAvailabilityStaticRole;
use grn\kunai\data\bean\KunaiAvailabilityUser;
use grn\kunai\exception\KunaiException;
use grn\kunai\logic\KunaiLogic;
use grn\kunai\logic\KunaiLogLogic;

class KunaiService
{
    const DISABLE_OLD_VERSION = 'disable_old_version';

    const DYNAMIC_ROLE = 'dynamic_role';
    const GROUP = 'group';
    const STATIC_ROLE = 'static_role';
    const USER = 'user';

    private $_profile;

    /**
     * get kunai application system profile
     *
     * @return   \CB_Profile
     */
    private function _getSystemProfile()
    {
        if (is_null($this->_profile)) {
            $application = new Application();
            $this->_profile = $application->getSystemProfile();
        }

        return $this->_profile;
    }

    /**
     * get specified attribute
     *
     * @param    $attribute_name     string   attribute name
     * @param    $default_value      string   default value
     *
     * @return   string              specified attribute.
     *                               if it doesn't exist, return $default_value
     */
    private function _getSystemProfileAttribute($attribute_name, $default_value)
    {
        $profile = $this->_getSystemProfile();

        if ( ! $profile->getAttribute($attribute_name, $value)) {
            return $default_value;
        }

        return $value;
    }

    /**
     * set specified attribute
     *
     * @param    $attribute_name   string   attribute name
     * @param    $value            string   attribute value
     *
     * @return   boolean           TRUE: success setting attribute, FALSE: fail
     */
    private function _setSystemProfileAttribute($attribute_name, $value)
    {
        $profile = $this->_getSystemProfile();

        if ( ! $profile->getAttribute($attribute_name, $dummy)) {
            if ( ! $profile->createAttribute($attribute_name, $value)) {
                return false;
            }
        } else {
            if ( ! $profile->updateAttribute($attribute_name, $value)) {
                return false;
            }
        }

        return true;
    }

    /**
     * get attribute "enable old version"
     */
    public function getEnableOldVersion()
    {
        return $this->_getSystemProfileAttribute(self::DISABLE_OLD_VERSION,
            false);
    }

    /**
     * set attribute "enable old version"
     */
    public function setEnableOldVersion($disable_old_version)
    {
        $this->_setSystemProfileAttribute(self::DISABLE_OLD_VERSION,
            $disable_old_version);
    }

    /**
     * Get active application from KUNAI controlled apps
     */
    static public function getActiveControlledApps()
    {
        $application = new Application();

        return $application->getActiveControlledApps();
    }

    /**
     * Decorate availability app status
     *
     * @param  KunaiAvailabilityDynamicRole
     *         KunaiAvailabilityGroup
     *         KunaiAvailabilityStaticRole
     *         KunaiAvailabilityUser
     */
    static public function decorateAvailabilityAppStatus($availability)
    {
        $app_status = $availability->getAppStatus();
        if (Validate::isNotNull($app_status)) {
            $active_apps = self::getActiveControlledApps();
            $app_status = $availability->getAppStatus();
            $app_status_new = [];
            foreach ($active_apps as $active_app) {
                if (array_key_exists($active_app, $app_status)) {
                    $app_status_new[$active_app] = $app_status[$active_app];
                } else {
                    $app_status_new[$active_app] = true;
                }
            }
            $availability->setAppStatus($app_status_new);
        }
    }

    /**
     * Get all availability
     *
     * @param  string $availability_type 'dynamic_role', 'group', 'static_role', 'user'
     *
     * @return KunaiAvailabilityDynamicRoleCollection
     *         KunaiAvailabilityGroupCollection
     *         KunaiAvailabilityStaticRoleCollection
     *         KunaiAvailabilityUserCollection
     */
    public function getAllAvailability($availability_type)
    {
        $kunai_logic = new KunaiLogic();
        switch ($availability_type) {
            case self::DYNAMIC_ROLE :
                $availability_collection
                    = $kunai_logic->getAllAvailabilityDynamicRole();
                break;
            case self::GROUP :
                $availability_collection
                    = $kunai_logic->getAllAvailabilityGroup();
                break;
            case self::STATIC_ROLE :
                $availability_collection
                    = $kunai_logic->getAllAvailabilityStaticRole();
                break;
            case self::USER :
                $availability_collection
                    = $kunai_logic->getAllAvailabilityUser();
                break;
            default :
                $availability_collection = [];
        }
        foreach ($availability_collection as $availability) {
            self::decorateAvailabilityAppStatus($availability);
        }

        return $availability_collection;
    }

    /**
     * Get multi availability
     *
     * @param  string $availability_type    'dynamic_role', 'group', 'static_role', 'user'
     * @param  array  $availability_targets dynamic roles, group ids, static role ids, user ids
     *
     * @return KunaiAvailabilityDynamicRoleCollection
     *         KunaiAvailabilityGroupCollection
     *         KunaiAvailabilityStaticRoleCollection
     *         KunaiAvailabilityUserCollection
     */
    public function getMultiAvailability(
        $availability_type,
        array $availability_targets
    ) {
        $kunai_logic = new KunaiLogic();
        switch ($availability_type) {
            case self::DYNAMIC_ROLE :
                $availability_collection
                    = $kunai_logic->getMultiAvailabilityDynamicRole($availability_targets);
                break;
            case self::GROUP :
                $availability_collection
                    = $kunai_logic->getMultiAvailabilityGroup($availability_targets);
                break;
            case self::STATIC_ROLE :
                $availability_collection
                    = $kunai_logic->getMultiAvailabilityStaticRole($availability_targets);
                break;
            case self::USER :
                $availability_collection
                    = $kunai_logic->getMultiAvailabilityUser($availability_targets);
                break;
            default :
                $availability_collection = [];
        }
        foreach ($availability_collection as $availability) {
            self::decorateAvailabilityAppStatus($availability);
        }

        return $availability_collection;
    }

    /**
     * Get availability
     *
     * @param  string $availability_type   'dynamic_role', 'group', 'static_role', 'user'
     * @param  string $availability_target dynamic roles, group ids, static role ids, user ids
     *
     * @return KunaiAvailabilityDynamicRole
     *         KunaiAvailabilityGroup
     *         KunaiAvailabilityStaticRole
     *         KunaiAvailabilityUser
     */
    public function getAvailability($availability_type, $availability_target)
    {
        $kunai_logic = new KunaiLogic();
        switch ($availability_type) {
            case self::DYNAMIC_ROLE :
                $availability
                    = $kunai_logic->getAvailabilityDynamicRoleByDynamicRole($availability_target);
                break;
            case self::GROUP :
                $availability
                    = $kunai_logic->getAvailabilityGroupByGroupId($availability_target);
                break;
            case self::STATIC_ROLE :
                $availability
                    = $kunai_logic->getAvailabilityStaticRoleByStaticRoleId($availability_target);
                break;
            case self::USER :
                $availability
                    = $kunai_logic->getAvailabilityUserByUserId($availability_target);
                break;
            default :
                $availability = null;
        }
        if ($availability) {
            self::decorateAvailabilityAppStatus($availability);
        }

        return $availability;
    }

    /**
     * Add or modify availability
     * If the availability is not existed in DB, add it.
     * If the availability is already existed in DB, update it.
     *
     * @param string $availability_type 'dynamic_role', 'group', 'static_role', 'user'
     * @param KunaiAvailabilityDynamicRole
     *                                  KunaiAvailabilityGroup
     *                                  KunaiAvailabilityStaticRole
     *                                  KunaiAvailabilityUser
     *                                  $availability
     */
    public function addOrModifyAvailability($availability_type, $availability)
    {
        try {
            $kunai_logic = new KunaiLogic();
            switch ($availability_type) {
                case self::DYNAMIC_ROLE :
                    assert('$availability instanceof grn\\kunai\\data\\bean\\KunaiAvailabilityDynamicRole');
                    $availability_dynamic_role_old
                        = $kunai_logic->getAvailabilityDynamicRoleByDynamicRole($availability->getDynamicRole());
                    $id = $availability_dynamic_role_old->getId();
                    if ($id) {
                        $availability->setId($id);
                        if ( ! $availability->isValidData(KunaiAvailabilityDynamicRole::VALID_TYPE_MODIFY,
                            KunaiAvailabilityDynamicRole::EXCEPTION_NOT_THROW)
                        ) {
                            return false;
                        }
                        $kunai_logic->modifyAvailabilityDynamicRole($availability);
                    } else {
                        if ( ! $availability->isValidData(KunaiAvailabilityDynamicRole::VALID_TYPE_CREATE,
                            KunaiAvailabilityDynamicRole::EXCEPTION_NOT_THROW)
                        ) {
                            return false;
                        }
                        $kunai_logic->addAvailabilityDynamicRole($availability);
                    }
                    break;
                case self::GROUP :
                    assert('$availability instanceof grn\\kunai\\data\\bean\\KunaiAvailabilityGroup');
                    $availability_group_old
                        = $kunai_logic->getAvailabilityGroupByGroupId($availability->getGroupId());
                    $id = $availability_group_old->getId();
                    if ($id) {
                        $availability->setId($id);
                        if ( ! $availability->isValidData(KunaiAvailabilityGroup::VALID_TYPE_MODIFY,
                            KunaiAvailabilityGroup::EXCEPTION_NOT_THROW)
                        ) {
                            return false;
                        }
                        $kunai_logic->modifyAvailabilityGroup($availability);
                    } else {
                        if ( ! $availability->isValidData(KunaiAvailabilityGroup::VALID_TYPE_CREATE,
                            KunaiAvailabilityGroup::EXCEPTION_NOT_THROW)
                        ) {
                            return false;
                        }
                        $kunai_logic->addAvailabilityGroup($availability);
                    }
                    break;
                case self::STATIC_ROLE :
                    assert('$availability instanceof grn\\kunai\\data\\bean\\KunaiAvailabilityStaticRole');
                    $availability_static_role_old
                        = $kunai_logic->getAvailabilityStaticRoleByStaticRoleId($availability->getStaticRoleId());
                    $id = $availability_static_role_old->getId();
                    if ($id) {
                        $availability->setId($id);
                        if ( ! $availability->isValidData(KunaiAvailabilityStaticRole::VALID_TYPE_MODIFY,
                            KunaiAvailabilityStaticRole::EXCEPTION_NOT_THROW)
                        ) {
                            return false;
                        }
                        $kunai_logic->modifyAvailabilityStaticRole($availability);
                    } else {
                        if ( ! $availability->isValidData(KunaiAvailabilityStaticRole::VALID_TYPE_CREATE,
                            KunaiAvailabilityStaticRole::EXCEPTION_NOT_THROW)
                        ) {
                            return false;
                        }
                        $kunai_logic->addAvailabilityStaticRole($availability);
                    }
                    break;
                case self::USER :
                    assert('$availability instanceof grn\\kunai\\data\\bean\\KunaiAvailabilityUser');
                    $availability_user_old
                        = $kunai_logic->getAvailabilityUserByUserId($availability->getUserId());
                    $id = $availability_user_old->getId();
                    if ($id) {
                        $availability->setId($id);
                        if ( ! $availability->isValidData(KunaiAvailabilityUser::VALID_TYPE_MODIFY,
                            KunaiAvailabilityUser::EXCEPTION_NOT_THROW)
                        ) {
                            return false;
                        }
                        $kunai_logic->modifyAvailabilityUser($availability);
                    } else {
                        if ( ! $availability->isValidData(KunaiAvailabilityUser::VALID_TYPE_CREATE,
                            KunaiAvailabilityUser::EXCEPTION_NOT_THROW)
                        ) {
                            return false;
                        }
                        $kunai_logic->addAvailabilityUser($availability);
                    }
                    break;
                default :
                    return false;
            }
        } catch (KunaiException $e) {
            return false;
        }

        return true;
    }

    /**
     * Delete all availability
     */
    public function deleteAllAvailability()
    {
        try {
            $kunai_logic = new KunaiLogic();
            $kunai_logic->deleteAllAvailabilityDynamicRole();
            $kunai_logic->deleteAllAvailabilityGroup();
            $kunai_logic->deleteAllAvailabilityStaticRole();
            $kunai_logic->deleteAllAvailabilityUser();
        } catch (KunaiException $e) {
            return false;
        }

        return true;
    }

    /**
     * Delete multi availability
     *
     * @param string $availability_type    'dynamic_role', 'group', 'static_role', 'user'
     * @param array  $availability_targets dynamic roles, group ids, static role ids, user ids
     */
    public function deleteMultiAvailability(
        $availability_type,
        array $availability_targets
    ) {
        try {
            if (count($availability_targets) > 0) {
                $kunai_logic = new KunaiLogic();
                switch ($availability_type) {
                    case self::DYNAMIC_ROLE :
                        $kunai_logic->deleteMultiAvailabilityDynamicRole($availability_targets);
                        break;
                    case self::GROUP :
                        $kunai_logic->deleteMultiAvailabilityGroup($availability_targets);
                        break;
                    case self::STATIC_ROLE :
                        $kunai_logic->deleteMultiAvailabilityStaticRole($availability_targets);
                        break;
                    case self::USER :
                        $kunai_logic->deleteMultiAvailabilityUser($availability_targets);
                        break;
                }
            }
        } catch (KunaiException $e) {
            return false;
        }

        return true;
    }

    /**
     * Edit availability
     *
     * @param string $availability_type 'dynamic_role', 'group', 'static_role', 'user'
     * @param KunaiAvailabilityDynamicRole
     *                                  KunaiAvailabilityGroup
     *                                  KunaiAvailabilityStaticRole
     *                                  KunaiAvailabilityUser
     *                                  $availability
     */
    public function editAvailability($availability_type, $availability)
    {
        try {
            $kunai_logic = new KunaiLogic();
            switch ($availability_type) {
                case self::DYNAMIC_ROLE :
                    assert('$availability instanceof grn\\kunai\\data\\bean\\KunaiAvailabilityDynamicRole');
                    if ( ! $availability->isValidData(KunaiAvailabilityDynamicRole::VALID_TYPE_MODIFY,
                        KunaiAvailabilityDynamicRole::EXCEPTION_NOT_THROW)
                    ) {
                        return false;
                    }
                    $kunai_logic->modifyAvailabilityDynamicRole($availability);
                    break;
                case self::GROUP :
                    assert('$availability instanceof grn\\kunai\\data\\bean\\KunaiAvailabilityGroup');
                    if ( ! $availability->isValidData(KunaiAvailabilityGroup::VALID_TYPE_MODIFY,
                        KunaiAvailabilityGroup::EXCEPTION_NOT_THROW)
                    ) {
                        return false;
                    }
                    $kunai_logic->modifyAvailabilityGroup($availability);
                    break;
                case self::STATIC_ROLE :
                    assert('$availability instanceof grn\\kunai\\data\\bean\\KunaiAvailabilityStaticRole');
                    if ( ! $availability->isValidData(KunaiAvailabilityStaticRole::VALID_TYPE_MODIFY,
                        KunaiAvailabilityStaticRole::EXCEPTION_NOT_THROW)
                    ) {
                        return false;
                    }
                    $kunai_logic->modifyAvailabilityStaticRole($availability);
                    break;
                case self::USER :
                    assert('$availability instanceof grn\\kunai\\data\\bean\\KunaiAvailabilityUser');
                    if ( ! $availability->isValidData(KunaiAvailabilityUser::VALID_TYPE_MODIFY,
                        KunaiAvailabilityUser::EXCEPTION_NOT_THROW)
                    ) {
                        return false;
                    }
                    $kunai_logic->modifyAvailabilityUser($availability);
                    break;
            }
        } catch (KunaiException $e) {
            return false;
        }

        return true;
    }

    /**
     * Get KUNAI use but do not control apps
     *
     * @return array    ('notification')
     */
    private function _getKunaiUseNotControlledApps()
    {
        return ['notification'];
    }

    /**
     * Get available KUNAI use applications for user
     *
     * @param  int $user_id
     *
     * @return array  ('schedule'=>1, 'message'=>1...)    this is an application list that user can access in KUNAI
     */
    public function getAvailableKunaiUseAppsFor($user_id)
    {
        if ( ! Validate::isNumber($user_id)) {
            return [];
        }

        $availability_apps = [];
        $kunai_use_not_controlled_apps = $this->_getKunaiUseNotControlledApps();
        foreach ($kunai_use_not_controlled_apps as $app_id) {
            $availability_apps[$app_id] = 1;
        }

        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');

        //dynamic_role
        $dynamic_roles = array_keys($uum->listGrantedRoles());
        $availability_dynamic_role_collection
            = $this->getMultiAvailability(self::DYNAMIC_ROLE,
            $dynamic_roles);
        foreach (
            $availability_dynamic_role_collection as $availability_dynamic_role
        ) {
            $app_status = $availability_dynamic_role->getAppStatus();
            foreach ($app_status as $app => $status) {
                if ($status) {
                    $availability_apps[$app] = 1;
                }
            }
        }

        //static_role
        $static_role_ids = array_keys($uum->getUserRoles($user_id));
        if (is_array($static_role_ids) && count($static_role_ids) > 0) {
            $availability_static_role_collection
                = $this->getMultiAvailability(self::STATIC_ROLE,
                $static_role_ids);
            foreach (
                $availability_static_role_collection as
                $availability_static_role
            ) {
                $app_status = $availability_static_role->getAppStatus();
                foreach ($app_status as $app => $status) {
                    if ($status) {
                        $availability_apps[$app] = 1;
                    }
                }
            }
        }

        //group
        $group_ids = array_keys($uum->getUserGroups($user_id));
        if (is_array($group_ids) && count($group_ids) > 0) {
            $availability_group_collection
                = $this->getMultiAvailability(self::GROUP, $group_ids);
            foreach ($availability_group_collection as $availability_group) {
                $app_status = $availability_group->getAppStatus();
                foreach ($app_status as $app => $status) {
                    if ($status) {
                        $availability_apps[$app] = 1;
                    }
                }
            }
        }

        //user
        $availability_user = $this->getAvailability(self::USER, $user_id);
        $app_status = $availability_user->getAppStatus();
        if (Validate::isNotNull($app_status)) {
            foreach ($app_status as $app => $status) {
                if ($status) {
                    $availability_apps[$app] = 1;
                }
            }
        }

        return $availability_apps;
    }

    /**
     * Check whether or not user can access application from KUNAI
     *
     * @param int    $user_id
     * @param string $application_id 'schedule', 'message', 'workflow', 'mail', 'address'...
     */
    public function hasAvailabilityKunaiControlledApp($user_id, $application_id)
    {
        if ( ! Validate::isNumber($user_id)
             || ! Validate::isIn($application_id,
                self::getActiveControlledApps())
        ) {
            return false;
        }

        global $G_container_base;
        $uum = &$G_container_base->getInstance('uum');

        //dynamic_role
        $dynamic_roles = array_keys($uum->listGrantedRoles());
        $availability_dynamic_role_collection
            = $this->getMultiAvailability(self::DYNAMIC_ROLE,
            $dynamic_roles);
        foreach (
            $availability_dynamic_role_collection as $availability_dynamic_role
        ) {
            $app_status = $availability_dynamic_role->getAppStatus();
            if ($app_status[$application_id]) {
                return true;
            }
        }

        //static_role
        $static_role_ids = array_keys($uum->getUserRoles($user_id));
        $availability_static_role_collection
            = $this->getMultiAvailability(self::STATIC_ROLE,
            $static_role_ids);
        foreach (
            $availability_static_role_collection as $availability_static_role
        ) {
            $app_status = $availability_static_role->getAppStatus();
            if ($app_status[$application_id]) {
                return true;
            }
        }

        //group
        $group_ids = array_keys($uum->getUserGroups($user_id));
        $availability_group_collection
            = $this->getMultiAvailability(self::GROUP, $group_ids);
        foreach ($availability_group_collection as $availability_group) {
            $app_status = $availability_group->getAppStatus();
            if ($app_status[$application_id]) {
                return true;
            }
        }

        //user
        $availability_user = $this->getAvailability(self::USER, $user_id);
        $app_status = $availability_user->getAppStatus();
        if (Validate::isNotNull($app_status) && $app_status[$application_id]) {
            return true;
        }

        return false;
    }

    /**
     * @return KunaiLogLogic
     */
    public function getKunaiLogLogic()
    {
        return new KunaiLogLogic(GRN_APPLICATION_PREFIX
                                 . Application::APPLICATION_ID);
    }
}
