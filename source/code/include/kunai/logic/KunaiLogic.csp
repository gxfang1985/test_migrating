<?php

namespace grn\kunai\logic;

use grn\kunai\data\bean\KunaiAvailabilityDynamicRole;
use grn\kunai\data\bean\KunaiAvailabilityGroup;
use grn\kunai\data\bean\KunaiAvailabilityStaticRole;
use grn\kunai\data\bean\KunaiAvailabilityUser;
use grn\kunai\db\KunaiFacade;

class KunaiLogic
{
    /**
     * Get all availability dynamic role
     *
     * @return KunaiAvailabilityDynamicRoleCollection
     */
    public function getAllAvailabilityDynamicRole()
    {
        $kunai_facade = new KunaiFacade();

        return $kunai_facade->getAllAvailabilityDynamicRole();
    }

    /**
     * Get multi availability dynamic role
     *
     * @param array $dynamic_roles
     *
     * @return KunaiAvailabilityDynamicRoleCollection
     */
    public function getMultiAvailabilityDynamicRole(array $dynamic_roles)
    {
        $kunai_facade = new KunaiFacade();

        return $kunai_facade->getMultiAvailabilityDynamicRole($dynamic_roles);
    }

    /**
     * Get availability dynamic role by dynamic role
     *
     * @param  string $dynamic_role
     *
     * @return KunaiAvailabilityDynamicRole
     */
    public function getAvailabilityDynamicRoleByDynamicRole($dynamic_role)
    {
        $kunai_facade = new KunaiFacade();

        return $kunai_facade->getAvailabilityDynamicRoleByDynamicRole($dynamic_role);
    }

    /**
     * Add availability dynamic role
     *
     * @param KunaiAvailabilityDynamicRole $availability_dynamic_role
     */
    public function addAvailabilityDynamicRole(
        KunaiAvailabilityDynamicRole $availability_dynamic_role
    ) {
        $kunai_facade = new KunaiFacade();
        $kunai_facade->addAvailabilityDynamicRole($availability_dynamic_role);
    }

    /**
     * Modify availability dynamic role
     *
     * @param KunaiAvailabilityDynamicRole $availability_dynamic_role
     */
    public function modifyAvailabilityDynamicRole(
        KunaiAvailabilityDynamicRole $availability_dynamic_role
    ) {
        $kunai_facade = new KunaiFacade();
        $kunai_facade->modifyAvailabilityDynamicRole($availability_dynamic_role);
    }

    /**
     * Delete all availability dynamic role
     */
    public function deleteAllAvailabilityDynamicRole()
    {
        $kunai_facade = new KunaiFacade();
        $kunai_facade->deleteAllAvailabilityDynamicRole();
    }

    /**
     * Delete multi availability dynamic role
     *
     * @param array $dynamic_roles
     */
    public function deleteMultiAvailabilityDynamicRole(array $dynamic_roles)
    {
        $kunai_facade = new KunaiFacade();
        $kunai_facade->deleteMultiAvailabilityDynamicRole($dynamic_roles);
    }


    /**
     * Get all availability group
     *
     * @return KunaiAvailabilityGroupCollection
     */
    public function getAllAvailabilityGroup()
    {
        $kunai_facade = new KunaiFacade();

        return $kunai_facade->getAllAvailabilityGroup();
    }

    /**
     * Get multi availability group
     *
     * @param array $group_ids
     *
     * @return KunaiAvailabilityGroupCollection
     */
    public function getMultiAvailabilityGroup(array $group_ids)
    {
        $kunai_facade = new KunaiFacade();

        return $kunai_facade->getMultiAvailabilityGroup($group_ids);
    }

    /**
     * Get availability group by group id
     *
     * @param  int $group_id
     *
     * @return KunaiAvailabilityGroup
     */
    public function getAvailabilityGroupByGroupId($group_id)
    {
        $kunai_facade = new KunaiFacade();

        return $kunai_facade->getAvailabilityGroupByGroupId($group_id);
    }

    /**
     * Add availability group
     *
     * @param KunaiAvailabilityGroup $availability_group
     */
    public function addAvailabilityGroup(
        KunaiAvailabilityGroup $availability_group
    ) {
        $kunai_facade = new KunaiFacade();
        $kunai_facade->addAvailabilityGroup($availability_group);
    }

    /**
     * Modify availability group
     *
     * @param KunaiAvailabilityGroup $availability_group
     */
    public function modifyAvailabilityGroup(
        KunaiAvailabilityGroup $availability_group
    ) {
        $kunai_facade = new KunaiFacade();
        $kunai_facade->modifyAvailabilityGroup($availability_group);
    }

    /**
     * Delete all availability group
     */
    public function deleteAllAvailabilityGroup()
    {
        $kunai_facade = new KunaiFacade();
        $kunai_facade->deleteAllAvailabilityGroup();
    }

    /**
     * Delete multi availability group
     *
     * @param array $group_ids
     */
    public function deleteMultiAvailabilityGroup(array $group_ids)
    {
        $kunai_facade = new KunaiFacade();
        $kunai_facade->deleteMultiAvailabilityGroup($group_ids);
    }


    /**
     * Get all availability static role
     *
     * @return KunaiAvailabilityStaticRoleCollection
     */
    public function getAllAvailabilityStaticRole()
    {
        $kunai_facade = new KunaiFacade();

        return $kunai_facade->getAllAvailabilityStaticRole();
    }

    /**
     * Get multi availability static role
     *
     * @param array $static_role_ids
     *
     * @return KunaiAvailabilityStaticRoleCollection
     */
    public function getMultiAvailabilityStaticRole(array $static_role_ids)
    {
        $kunai_facade = new KunaiFacade();

        return $kunai_facade->getMultiAvailabilityStaticRole($static_role_ids);
    }

    /**
     * Get availability static role by static role id
     *
     * @param  int $static_role_id
     *
     * @return KunaiAvailabilityStaticRole
     */
    public function getAvailabilityStaticRoleByStaticRoleId($static_role_id)
    {
        $kunai_facade = new KunaiFacade();

        return $kunai_facade->getAvailabilityStaticRoleByStaticRoleId($static_role_id);
    }

    /**
     * Add availability static role
     *
     * @param KunaiAvailabilityStaticRole $availability_static_role
     */
    public function addAvailabilityStaticRole(
        KunaiAvailabilityStaticRole $availability_static_role
    ) {
        $kunai_facade = new KunaiFacade();
        $kunai_facade->addAvailabilityStaticRole($availability_static_role);
    }

    /**
     * Modify availability static role
     *
     * @param KunaiAvailabilityStaticRole $availability_static_role
     */
    public function modifyAvailabilityStaticRole(
        KunaiAvailabilityStaticRole $availability_static_role
    ) {
        $kunai_facade = new KunaiFacade();
        $kunai_facade->modifyAvailabilityStaticRole($availability_static_role);
    }

    /**
     * Delete all availability static role
     */
    public function deleteAllAvailabilityStaticRole()
    {
        $kunai_facade = new KunaiFacade();
        $kunai_facade->deleteAllAvailabilityStaticRole();
    }

    /**
     * Delete multi availability static role
     *
     * @param array $static_role_ids
     */
    public function deleteMultiAvailabilityStaticRole(array $static_role_ids)
    {
        $kunai_facade = new KunaiFacade();
        $kunai_facade->deleteMultiAvailabilityStaticRole($static_role_ids);
    }


    /**
     * Get all availability user
     *
     * @return KunaiAvailabilityUserCollection
     */
    public function getAllAvailabilityUser()
    {
        $kunai_facade = new KunaiFacade();

        return $kunai_facade->getAllAvailabilityUser();
    }

    /**
     * Get multi availability user
     *
     * @param array $user_ids
     *
     * @return KunaiAvailabilityUserCollection
     */
    public function getMultiAvailabilityUser(array $user_ids)
    {
        $kunai_facade = new KunaiFacade();

        return $kunai_facade->getMultiAvailabilityUser($user_ids);
    }

    /**
     * Get availability user by user id
     *
     * @param  int $user_id
     *
     * @return KunaiAvailabilityUser
     */
    public function getAvailabilityUserByUserId($user_id)
    {
        $kunai_facade = new KunaiFacade();

        return $kunai_facade->getAvailabilityUserByUserId($user_id);
    }

    /**
     * Add availability user
     *
     * @param KunaiAvailabilityUser $availability_user
     */
    public function addAvailabilityUser(KunaiAvailabilityUser $availability_user
    ) {
        $kunai_facade = new KunaiFacade();
        $kunai_facade->addAvailabilityUser($availability_user);
    }

    /**
     * Modify availability user
     *
     * @param KunaiAvailabilityUser $availability_user
     */
    public function modifyAvailabilityUser(
        KunaiAvailabilityUser $availability_user
    ) {
        $kunai_facade = new KunaiFacade();
        $kunai_facade->modifyAvailabilityUser($availability_user);
    }

    /**
     * Delete all availability user
     */
    public function deleteAllAvailabilityUser()
    {
        $kunai_facade = new KunaiFacade();
        $kunai_facade->deleteAllAvailabilityUser();
    }

    /**
     * Delete multi availability user
     *
     * @param array $user_ids
     */
    public function deleteMultiAvailabilityUser(array $user_ids)
    {
        $kunai_facade = new KunaiFacade();
        $kunai_facade->deleteMultiAvailabilityUser($user_ids);
    }
}
