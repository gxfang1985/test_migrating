<?php

namespace grn\kunai\db\dao;

use grn\kunai\data\bean\KunaiAvailabilityUser;
use grn\kunai\data\collection\KunaiAvailabilityUserCollection;
use grn\kunai\db\dao\AbstractKunaiBaseDAO;
use grn\kunai\exception\KunaiException;

class KunaiAvailabilityUserDAO extends AbstractKunaiBaseDAO
{
    /**
     * Select all or multi records
     *
     * @param  array $user_ids
     *         If you want to select many records, you can set this parameter.
     *
     * @return KunaiAvailabilityUserCollection    $availability_user_collection
     */
    public function selectAllOrMulti(array $user_ids = [])
    {
        try {
            $dbConn = $this->getDatabaseConnection();
            $query = "SELECT" .
                     " au._id, " .
                     " au.col_ctime, " .
                     " au.col_user, " .
                     " au.col_app_status ";
            $query .= "FROM" .
                      " tab_grn_kunai_availability_user AS au " .
                      "LEFT JOIN" .
                      " tab_cb_user AS u " .
                      " ON au.col_user = u._id ";

            $query .= "WHERE ";
            if (count($user_ids) > 0) {
                $query .= "au.col_user IN (";
                $tempIsNeedComma = false;
                foreach ($user_ids as $user_id) {
                    if ($tempIsNeedComma) {
                        $query .= ", ";
                    }
                    $query .= "'{$dbConn->escape($user_id)}'";
                    $tempIsNeedComma = true;
                }
                $query .= ") AND ";
            }
            $query .= "u.col_deleted IS NULL ";

            $query .= "ORDER BY _id ASC";
            $query .= ";";
            $result = $dbConn->query($query);
            $availability_user_collection
                = new KunaiAvailabilityUserCollection();
            while ($row = $dbConn->fetch_assoc($result)) {
                $row['col_app_status'] = cb_unserialize($row['col_app_status'],
                    ["allowed_classes" => false]);
                $availability_user_collection->appendBean(new KunaiAvailabilityUser($row,
                    KunaiAvailabilityUser::NOT_CHECK_INPUT));
            }
            $dbConn->free_result($result);

            $availability_user_collection->setCountNoLimit(count($availability_user_collection));
        } catch (KunaiException $e) {
            throw $e;
        }

        return $availability_user_collection;
    }

    /**
     * Delete multi records
     *
     * @param array $user_ids
     */
    public function deleteMulti(array $user_ids)
    {
        try {
            $dbConn = $this->getDatabaseConnection();
            $query
                = "DELETE FROM tab_grn_kunai_availability_user WHERE col_user IN (";
            $tempIsNeedComma = false;
            foreach ($user_ids as $user_id) {
                if ($tempIsNeedComma) {
                    $query .= ", ";
                }
                $query .= "'{$dbConn->escape($user_id)}'";
                $tempIsNeedComma = true;
            }
            $query .= ");";
            $dbConn->query($query);
        } catch (KunaiException $e) {
            throw $e;
        }
    }

    /**
     * Delete all records
     */
    public function deleteAll()
    {
        try {
            $dbConn = $this->getDatabaseConnection();
            $query = "DELETE FROM tab_grn_kunai_availability_user;";
            $dbConn->query($query);
        } catch (KunaiException $e) {
            throw $e;
        }
    }

    /**
     * Insert one record
     *
     * @param KunaiAvailabilityUser $availability_user
     */
    public function insert(KunaiAvailabilityUser $availability_user)
    {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "INSERT INTO tab_grn_kunai_availability_user SET";
            $query .= "  col_ctime = '{$dbConn->escape( $availability_user->getCreateTime() )}'";
            $query .= ", col_user = '{$dbConn->escape( $availability_user->getUserId() )}'";
            $query .= ", col_app_status = '{$dbConn->escape( serialize($availability_user->getAppStatus()) )}'";
            $query .= ";";

            $dbConn->query($query);
        } catch (KunaiException $e) {
            throw $e;
        }
    }

    /**
     * Update one record
     *
     * @param KunaiAvailabilityUser $availability_user
     */
    public function update(KunaiAvailabilityUser $availability_user)
    {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "UPDATE tab_grn_kunai_availability_user SET";
            $query .= "  col_app_status = '{$dbConn->escape( serialize($availability_user->getAppStatus()) )}'";
            $query .= " WHERE ";
            $query .= "  col_user = '{$dbConn->escape( $availability_user->getUserId() )}'";
            $query .= " AND ";
            $query .= "  _id = '{$dbConn->escape( $availability_user->getId() )}'";
            $query .= ";";

            $dbConn->query($query);
        } catch (KunaiException $e) {
            throw $e;
        }
    }

    /**
     * Select one record by user id
     *
     * @param  string $user_id
     *
     * @return KunaiAvailabilityUser    $availability_user
     */
    public function selectByUserId($user_id)
    {
        try {
            $dbConn = $this->getDatabaseConnection();
            $query = "SELECT";
            $query .= " _id, ";
            $query .= " col_ctime, ";
            $query .= " col_user, ";
            $query .= " col_app_status ";
            $query .= "FROM";
            $query .= " tab_grn_kunai_availability_user ";
            $query .= "WHERE ";
            $query .= " col_user = '{$dbConn->escape( $user_id )}' ";
            $query .= "ORDER BY _id ASC";
            $query .= ";";
            $result = $dbConn->query($query);
            if ($row = $dbConn->fetch_assoc($result)) {
                $row['col_app_status'] = cb_unserialize($row['col_app_status'],
                    ["allowed_classes" => false]);
                $availability_user = new KunaiAvailabilityUser($row,
                    KunaiAvailabilityUser::NOT_CHECK_INPUT);
            } else {
                $availability_user = new KunaiAvailabilityUser();
            }
            $dbConn->free_result($result);
        } catch (KunaiException $e) {
            throw $e;
        }

        return $availability_user;
    }

}
