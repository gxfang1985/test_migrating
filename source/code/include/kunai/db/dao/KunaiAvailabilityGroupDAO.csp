<?php

namespace grn\kunai\db\dao;

use grn\kunai\data\bean\KunaiAvailabilityGroup;
use grn\kunai\data\collection\KunaiAvailabilityGroupCollection;
use grn\kunai\db\dao\AbstractKunaiBaseDAO;
use grn\kunai\exception\KunaiException;

class KunaiAvailabilityGroupDAO extends AbstractKunaiBaseDAO
{
    /**
     * Select all or multi records
     *
     * @param  array $group_ids
     *         If you want to select many records, you can set this parameter.
     *
     * @return KunaiAvailabilityGroupCollection    $availability_group_collection
     */
    public function selectAllOrMulti(array $group_ids = [])
    {
        try {
            $dbConn = $this->getDatabaseConnection();
            $query = "SELECT";
            $query .= " _id, ";
            $query .= " col_ctime, ";
            $query .= " col_group, ";
            $query .= " col_app_status ";
            $query .= "FROM";
            $query .= " tab_grn_kunai_availability_group ";

            if (count($group_ids) > 0) {
                $query .= "WHERE col_group IN (";
                $tempIsNeedComma = false;
                foreach ($group_ids as $group_id) {
                    if ($tempIsNeedComma) {
                        $query .= ", ";
                    }
                    $query .= "'{$dbConn->escape($group_id)}'";
                    $tempIsNeedComma = true;
                }
                $query .= ") ";
            }

            $query .= "ORDER BY _id ASC";
            $query .= ";";
            $result = $dbConn->query($query);
            $availability_group_collection
                = new KunaiAvailabilityGroupCollection();
            while ($row = $dbConn->fetch_assoc($result)) {
                $row['col_app_status'] = cb_unserialize($row['col_app_status'],
                    ["allowed_classes" => false]);
                $availability_group_collection->appendBean(new KunaiAvailabilityGroup($row,
                    KunaiAvailabilityGroup::NOT_CHECK_INPUT));
            }
            $dbConn->free_result($result);

            $availability_group_collection->setCountNoLimit(count($availability_group_collection));
        } catch (KunaiException $e) {
            throw $e;
        }

        return $availability_group_collection;
    }

    /**
     * Delete multi records
     *
     * @param array $group_ids
     */
    public function deleteMulti(array $group_ids)
    {
        try {
            $dbConn = $this->getDatabaseConnection();
            $query
                = "DELETE FROM tab_grn_kunai_availability_group WHERE col_group IN (";
            $tempIsNeedComma = false;
            foreach ($group_ids as $group_id) {
                if ($tempIsNeedComma) {
                    $query .= ", ";
                }
                $query .= "'{$dbConn->escape($group_id)}'";
                $tempIsNeedComma = true;
            }
            $query .= ");";
            $dbConn->query($query);
        } catch (KunaiException $e) {
            throw $e;
        }
    }

    /**
     * Delete all records
     */
    public function deleteAll()
    {
        try {
            $dbConn = $this->getDatabaseConnection();
            $query = "DELETE FROM tab_grn_kunai_availability_group;";
            $dbConn->query($query);
        } catch (KunaiException $e) {
            throw $e;
        }
    }

    /**
     * Insert one record
     *
     * @param KunaiAvailabilityGroup $availability_group
     */
    public function insert(KunaiAvailabilityGroup $availability_group)
    {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "INSERT INTO tab_grn_kunai_availability_group SET";
            $query .= "  col_ctime = '{$dbConn->escape( $availability_group->getCreateTime() )}'";
            $query .= ", col_group = '{$dbConn->escape( $availability_group->getGroupId() )}'";
            $query .= ", col_app_status = '{$dbConn->escape( serialize($availability_group->getAppStatus()) )}'";
            $query .= ";";

            $dbConn->query($query);
        } catch (KunaiException $e) {
            throw $e;
        }
    }

    /**
     * Update one record
     *
     * @param KunaiAvailabilityGroup $availability_group
     */
    public function update(KunaiAvailabilityGroup $availability_group)
    {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "UPDATE tab_grn_kunai_availability_group SET";
            $query .= "  col_app_status = '{$dbConn->escape( serialize($availability_group->getAppStatus()) )}'";
            $query .= " WHERE ";
            $query .= "  col_group = '{$dbConn->escape( $availability_group->getGroupId() )}'";
            $query .= " AND ";
            $query .= "  _id = '{$dbConn->escape( $availability_group->getId() )}'";
            $query .= ";";

            $dbConn->query($query);
        } catch (KunaiException $e) {
            throw $e;
        }
    }

    /**
     * Select one record by group id
     *
     * @param  int $group_id
     *
     * @return KunaiAvailabilityGroup    $availability_group
     */
    public function selectByGroupId($group_id)
    {
        try {
            $dbConn = $this->getDatabaseConnection();
            $query = "SELECT";
            $query .= " _id, ";
            $query .= " col_ctime, ";
            $query .= " col_group, ";
            $query .= " col_app_status ";
            $query .= "FROM";
            $query .= " tab_grn_kunai_availability_group ";
            $query .= "WHERE ";
            $query .= " col_group = '{$dbConn->escape( $group_id )}' ";
            $query .= "ORDER BY _id ASC";
            $query .= ";";
            $result = $dbConn->query($query);
            if ($row = $dbConn->fetch_assoc($result)) {
                $row['col_app_status'] = cb_unserialize($row['col_app_status'],
                    ["allowed_classes" => false]);
                $availability_group = new KunaiAvailabilityGroup($row,
                    KunaiAvailabilityGroup::NOT_CHECK_INPUT);
            } else {
                $availability_group = new KunaiAvailabilityGroup();
            }
            $dbConn->free_result($result);
        } catch (KunaiException $e) {
            throw $e;
        }

        return $availability_group;
    }

}
