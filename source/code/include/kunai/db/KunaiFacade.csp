<?php

namespace grn\kunai\db;

use grn\kunai\data\bean\KunaiAvailabilityDynamicRole;
use grn\kunai\data\bean\KunaiAvailabilityGroup;
use grn\kunai\data\bean\KunaiAvailabilityStaticRole;
use grn\kunai\data\bean\KunaiAvailabilityUser;
use grn\kunai\db\dao\KunaiAvailabilityDynamicRoleDAO;
use grn\kunai\db\dao\KunaiAvailabilityGroupDAO;
use grn\kunai\db\dao\KunaiAvailabilityStaticRoleDAO;
use grn\kunai\db\dao\KunaiAvailabilityUserDAO;

class KunaiFacade
{
    /**
     * Get all availability dynamic role
     *
     * @return KunaiAvailabilityDynamicRoleCollection
     */
    public function getAllAvailabilityDynamicRole()
    {
        $kunai_availability_dynamic_role_dao
            = new KunaiAvailabilityDynamicRoleDAO();

        return $kunai_availability_dynamic_role_dao->selectAllOrMulti();
    }

    /**
     * Get multi availability dynamic role
     *
     * @param array $dynamic_roles
     *
     * @return KunaiAvailabilityDynamicRoleCollection
     */
    public function getMultiAvailabilityDynamicRole(array $dynamic_roles)
    {
        $kunai_availability_dynamic_role_dao
            = new KunaiAvailabilityDynamicRoleDAO();

        return $kunai_availability_dynamic_role_dao->selectAllOrMulti($dynamic_roles);
    }

    /**
     * Get availability dynamic role by dynamic role
     *
     * @param  string $dynamic_role
     *
     * @return KunaiAvailabilityDynamicRole
     */
    public function getAvailabilityDynamicRoleByDynamicRole($dynamic_role)
    {
        $kunai_availability_dynamic_role_dao
            = new KunaiAvailabilityDynamicRoleDAO();

        return $kunai_availability_dynamic_role_dao->selectByDynamicRole($dynamic_role);
    }

    /**
     * Add availability dynamic role
     *
     * @param KunaiAvailabilityDynamicRole $availability_dynamic_role
     */
    public function addAvailabilityDynamicRole(
        KunaiAvailabilityDynamicRole $availability_dynamic_role
    ) {
        $kunai_availability_dynamic_role_dao
            = new KunaiAvailabilityDynamicRoleDAO();
        $kunai_availability_dynamic_role_dao->insert($availability_dynamic_role);
    }

    /**
     * Modify availability dynamic role
     *
     * @param KunaiAvailabilityDynamicRole $availability_dynamic_role
     */
    public function modifyAvailabilityDynamicRole(
        KunaiAvailabilityDynamicRole $availability_dynamic_role
    ) {
        $kunai_availability_dynamic_role_dao
            = new KunaiAvailabilityDynamicRoleDAO();
        $kunai_availability_dynamic_role_dao->update($availability_dynamic_role);
    }

    /**
     * Delete all availability dynamic role
     */
    public function deleteAllAvailabilityDynamicRole()
    {
        $kunai_availability_dynamic_role_dao
            = new KunaiAvailabilityDynamicRoleDAO();
        $kunai_availability_dynamic_role_dao->deleteAll();
    }

    /**
     * Delete multi availability dynamic role
     *
     * @param array $dynamic_roles
     */
    public function deleteMultiAvailabilityDynamicRole(array $dynamic_roles)
    {
        $kunai_availability_dynamic_role_dao
            = new KunaiAvailabilityDynamicRoleDAO();
        $kunai_availability_dynamic_role_dao->deleteMulti($dynamic_roles);
    }


    /**
     * Get all availability group
     *
     * @return KunaiAvailabilityGroupCollection
     */
    public function getAllAvailabilityGroup()
    {
        $kunai_availability_group_dao = new KunaiAvailabilityGroupDAO();

        return $kunai_availability_group_dao->selectAllOrMulti();
    }

    /**
     * Get multi availability group
     *
     * @param array $group_ids
     *
     * @return KunaiAvailabilityGroupCollection
     */
    public function getMultiAvailabilityGroup(array $group_ids)
    {
        $kunai_availability_group_dao = new KunaiAvailabilityGroupDAO();

        return $kunai_availability_group_dao->selectAllOrMulti($group_ids);
    }

    /**
     * Get availability group by group id
     *
     * @param  int $group_id
     *
     * @return KunaiAvailabilityGroup
     */
    public function getAvailabilityGroupByGroupId($group_id)
    {
        $kunai_availability_group_dao = new KunaiAvailabilityGroupDAO();

        return $kunai_availability_group_dao->selectByGroupId($group_id);
    }

    /**
     * Add availability group
     *
     * @param KunaiAvailabilityGroup $availability_group
     */
    public function addAvailabilityGroup(
        KunaiAvailabilityGroup $availability_group
    ) {
        $kunai_availability_group_dao = new KunaiAvailabilityGroupDAO();
        $kunai_availability_group_dao->insert($availability_group);
    }

    /**
     * Modify availability group
     *
     * @param KunaiAvailabilityGroup $availability_group
     */
    public function modifyAvailabilityGroup(
        KunaiAvailabilityGroup $availability_group
    ) {
        $kunai_availability_group_dao = new KunaiAvailabilityGroupDAO();
        $kunai_availability_group_dao->update($availability_group);
    }

    /**
     * Delete all availability group
     */
    public function deleteAllAvailabilityGroup()
    {
        $kunai_availability_group_dao = new KunaiAvailabilityGroupDAO();
        $kunai_availability_group_dao->deleteAll();
    }

    /**
     * Delete multi availability group
     *
     * @param array $group_ids
     */
    public function deleteMultiAvailabilityGroup(array $group_ids)
    {
        $kunai_availability_group_dao = new KunaiAvailabilityGroupDAO();
        $kunai_availability_group_dao->deleteMulti($group_ids);
    }


    /**
     * Get all availability static role
     *
     * @return KunaiAvailabilityStaticRoleCollection
     */
    public function getAllAvailabilityStaticRole()
    {
        $kunai_availability_static_role_dao
            = new KunaiAvailabilityStaticRoleDAO();

        return $kunai_availability_static_role_dao->selectAllOrMulti();
    }

    /**
     * Get multi availability static role
     *
     * @param array $static_role_ids
     *
     * @return KunaiAvailabilityStaticRoleCollection
     */
    public function getMultiAvailabilityStaticRole(array $static_role_ids)
    {
        $kunai_availability_static_role_dao
            = new KunaiAvailabilityStaticRoleDAO();

        return $kunai_availability_static_role_dao->selectAllOrMulti($static_role_ids);
    }

    /**
     * Get availability static role by static role id
     *
     * @param  int $static_role_id
     *
     * @return KunaiAvailabilityStaticRole
     */
    public function getAvailabilityStaticRoleByStaticRoleId($static_role_id)
    {
        $kunai_availability_static_role_dao
            = new KunaiAvailabilityStaticRoleDAO();

        return $kunai_availability_static_role_dao->selectByStaticRoleId($static_role_id);
    }

    /**
     * Add availability static role
     *
     * @param KunaiAvailabilityStaticRole $availability_static_role
     */
    public function addAvailabilityStaticRole(
        KunaiAvailabilityStaticRole $availability_static_role
    ) {
        $kunai_availability_static_role_dao
            = new KunaiAvailabilityStaticRoleDAO();
        $kunai_availability_static_role_dao->insert($availability_static_role);
    }

    /**
     * Modify availability static role
     *
     * @param KunaiAvailabilityStaticRole $availability_static_role
     */
    public function modifyAvailabilityStaticRole(
        KunaiAvailabilityStaticRole $availability_static_role
    ) {
        $kunai_availability_static_role_dao
            = new KunaiAvailabilityStaticRoleDAO();
        $kunai_availability_static_role_dao->update($availability_static_role);
    }

    /**
     * Delete all availability static role
     */
    public function deleteAllAvailabilityStaticRole()
    {
        $kunai_availability_static_role_dao
            = new KunaiAvailabilityStaticRoleDAO();
        $kunai_availability_static_role_dao->deleteAll();
    }

    /**
     * Delete multi availability static role
     *
     * @param array $static_role_ids
     */
    public function deleteMultiAvailabilityStaticRole(array $static_role_ids)
    {
        $kunai_availability_static_role_dao
            = new KunaiAvailabilityStaticRoleDAO();
        $kunai_availability_static_role_dao->deleteMulti($static_role_ids);
    }


    /**
     * Get all availability user
     *
     * @return KunaiAvailabilityUserCollection
     */
    public function getAllAvailabilityUser()
    {
        $kunai_availability_user_dao = new KunaiAvailabilityUserDAO();

        return $kunai_availability_user_dao->selectAllOrMulti();
    }

    /**
     * Get multi availability user
     *
     * @param array $user_ids
     *
     * @return KunaiAvailabilityUserCollection
     */
    public function getMultiAvailabilityUser(array $user_ids)
    {
        $kunai_availability_user_dao = new KunaiAvailabilityUserDAO();

        return $kunai_availability_user_dao->selectAllOrMulti($user_ids);
    }

    /**
     * Get availability user by user id
     *
     * @param  int $user_id
     *
     * @return KunaiAvailabilityUser
     */
    public function getAvailabilityUserByUserId($user_id)
    {
        $kunai_availability_user_dao = new KunaiAvailabilityUserDAO();

        return $kunai_availability_user_dao->selectByUserId($user_id);
    }

    /**
     * Add availability user
     *
     * @param KunaiAvailabilityUser $availability_user
     */
    public function addAvailabilityUser(KunaiAvailabilityUser $availability_user
    ) {
        $kunai_availability_user_dao = new KunaiAvailabilityUserDAO();
        $kunai_availability_user_dao->insert($availability_user);
    }

    /**
     * Modify availability user
     *
     * @param KunaiAvailabilityUser $availability_user
     */
    public function modifyAvailabilityUser(
        KunaiAvailabilityUser $availability_user
    ) {
        $kunai_availability_user_dao = new KunaiAvailabilityUserDAO();
        $kunai_availability_user_dao->update($availability_user);
    }

    /**
     * Delete all availability user
     */
    public function deleteAllAvailabilityUser()
    {
        $kunai_availability_user_dao = new KunaiAvailabilityUserDAO();
        $kunai_availability_user_dao->deleteAll();
    }

    /**
     * Delete multi availability user
     *
     * @param array $user_ids
     */
    public function deleteMultiAvailabilityUser(array $user_ids)
    {
        $kunai_availability_user_dao = new KunaiAvailabilityUserDAO();
        $kunai_availability_user_dao->deleteMulti($user_ids);
    }
}
