<?php

class GrnNotificationNotifyDAO
{
    /**
     * @param                                $inDataObj
     * @param GrnNotificationSearchCondition $inSearchCondition
     * @param                                $number_of_all
     *
     * @return array
     */
    public function searchForNotification(
        $inDataObj,
        $inSearchCondition,
        & $number_of_all
    ) {
        /* @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj["db"];
        $inLimit = $inSearchCondition->getLimit();
        $inOffset = $inSearchCondition->getOffset();

        $mainTableFactor = $this->getMainTableFactor($inSearchCondition);
        $tablename = substr($mainTableFactor, 0,
            strpos($mainTableFactor, " "));

        $userId = $inSearchCondition->getUserId();
        require_once('fw/i18n/locale.csp');
        $language = CB_LocaleManager::getCurrentLanguage($userId);

        $query = "SELECT SQL_CALC_FOUND_ROWS " .
                 "n.* " .
                 "FROM " .
                 "( SELECT " .
                 "_id, col_module_id, col_action_id, col_unique_id, col_org_data,"
                 .
                 " IF(col_module_id = 'grn.space' AND col_sub_module_id='', '" .
                 $inDb->escape(cb_msg(GrnSpaceApplication::GRN_SPACE_MODULE_ID,
                     'notify_subject', null, $language)) .
                 "', col_subject) AS col_subject, col_subject_f, col_subject_b, "
                 .
                 "col_abstract, col_abstract_f, col_abstract_b, " .
                 "col_sender_name, col_sender_id, col_sender_url, " .
                 "col_subject_url, col_subject_icon, col_abstract_url, col_abstract_icon, "
                 .
                 "col_group_name, col_timestamp, col_status, col_read, col_popup, col_attached, ";
        if ($inSearchCondition->getDataType()
            != GRN_NOTIFICATION_TYPE_HISTORY
        ) {
            $query .= "col_auto_confirm, col_confirm_required, ";
        }
        $query .= "col_sub_module_id, col_space_id, col_space_name, col_event_start_ts, col_user "
                  .
                  "FROM " .
                  "{$tablename} " .
                  "WHERE ";
        $query .= "col_user='" . $inDb->escape($userId) . "' ";
        if ( ! is_null($inSearchCondition->getModuleId())) {
            $query .= "AND " .
                      "col_module_id='"
                      . $inDb->escape($inSearchCondition->getModuleId()) . "' ";
        }
        if ( ! is_null($inSearchCondition->getStartDateTime())) {
            $query .= "AND " .
                      "col_timestamp >='"
                      . $inDb->escape($inSearchCondition->getStartDateTime())
                      . "' ";
        }
        if ( ! is_null($inSearchCondition->getEndDateTime())) {
            $query .= "AND " .
                      "col_timestamp <='"
                      . $inDb->escape($inSearchCondition->getEndDateTime())
                      . "' ";
        }
        if ( ! is_null($inSearchCondition->getIsRead())) {
            $query .= "AND " .
                      cb_queryf($inDb, "col_read = @X ",
                          $inSearchCondition->getIsRead());
        }
        $query .= ") AS n " .
                  "LEFT JOIN " .
                  "tab_cb_user AS u " .
                  "ON " .
                  "n.col_sender_id = u._id ";
        if (count($inSearchCondition->getItemList()) > 0
            && count($inSearchCondition->getKeywordList()) > 0
        ) {
            $query .= "WHERE ";
            foreach ($inSearchCondition->getKeywordList() as $keyword) {
                $itemConditions = [];
                foreach ($inSearchCondition->getItemList() as $itemName) {
                    if ($itemName
                        == GrnNotificationSearchCondition::$ITEM_SPACE_NAME
                    ) {
                        if (count($inSearchCondition->getSpaceIdList() > 0)) {
                            foreach (
                                $inSearchCondition->getSpaceIdList() as $spaceId
                            ) {
                                $itemConditions[] = "(n.col_space_id='"
                                                    . $inDb->escape($spaceId)
                                                    . "') ";
                            }
                        }
                    } else {
                        $itemConditions[] = "n.col_" . $inDb->escape($itemName)
                                            . " LIKE '%"
                                            . $inDb->escape($keyword) . "%'";
                        if ($itemName
                            == GrnNotificationSearchCondition::$ITEM_SENDER_NAME
                        ) {
                            $itemConditions[] = "u.col_nickname LIKE '%"
                                                . $inDb->escape($keyword)
                                                . "%'";
                        }
                    }
                }
                if (empty($itemConditions)) {
                    $itemConditions = ['NULL'];
                }
            }
            $query .= "(" . implode(") OR (", $itemConditions) . ")";
        }

        $query .= " ORDER BY n.col_timestamp DESC, n._id DESC ";
        $query = $inDb->select_format($query, $inOffset, $inLimit,
            CB_DATABASE_NO_LOCK);

        $retval = [];
        $result = $inDb->query($query);
        while ($row = $inDb->fetch_assoc($result)) {
            $retval[$row["_id"]] = $row;
        }
        $inDb->free_result($result);

        $result = $inDb->query("SELECT FOUND_ROWS();");
        $count = $inDb->fetch_assoc($result);
        $inDb->free_result($result);
        $number_of_all = intval($count['FOUND_ROWS()']);

        return $retval;
    }

    /**
     *
     * Get main table_factor
     *
     * @param GrnNotificationSearchCondition $inSearchCondition
     *
     * @return string
     */
    private function getMainTableFactor($inSearchCondition, $noForce = false)
    {
        $table = $inSearchCondition->getIsToMe() ? 'tab_grn_notification_to_me'
            : 'tab_grn_notification_notify';

        $table_history = $inSearchCondition->getIsToMe()
            ? 'tab_grn_notification_to_me_history' : 'tab_grn_notification_history';
        switch ($inSearchCondition->getDataType()) {
            case GRN_NOTIFICATION_DATA_TYPE_NOTIFY:
                return grn_get_personal_tablename($inSearchCondition->getUserId(),
                        $table) . " AS n";

            case GRN_NOTIFICATION_DATA_TYPE_HISTORY:
                return grn_get_personal_tablename($inSearchCondition->getUserId(),
                        $table_history) . " AS n";

            case GRN_NOTIFICATION_DATA_TYPE_WHATSNEW:
                $tableFactor
                    = grn_get_personal_tablename($inSearchCondition->getUserId(),
                        $table) . " AS n";
                if ( ! $noForce) {
                    if (is_null($inSearchCondition->getModuleId())) {
                        $tableFactor .= " FORCE INDEX(idx_user_read_ts_n) ";
                    } else {
                        $tableFactor .= " FORCE INDEX(idx_user_module_read_ts_n) ";
                    }
                }

                return $tableFactor;
            default:
                assert(false);
        }
    }

    /**
     * GRN35-479
     *
     * @param   array  $inDataObj         DBconnection object array
     * @param   object $inSearchCondition Search condition
     *
     * @return  array   $space_ids          Array of space id within notification data
     */
    public function getSpaceIdWithinNotification($inDataObj, $inSearchCondition)
    {
        /* @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj["db"];

        $user_id = $inSearchCondition->getUserId();
        $mainTableFactor = $this->getMainTableFactor($inSearchCondition, true);

        $query = "SELECT DISTINCT col_space_id ";
        $query .= "FROM {$mainTableFactor} ";
        $query .= "WHERE col_user={$user_id} AND col_module_id = 'grn.space';";

        $space_ids = [];
        if (cb_is_db_result($result = $inDb->query($query))) {
            while ($row = $inDb->fetch_assoc($result)) {
                $space_ids[] = $row['col_space_id'];
            }
        }
        $inDb->free_result($result);

        return $space_ids;
    }

    /**
     * 通知テーブルから、通知更新時間の新しい順に通知IDを取得します。
     *
     * @param array                          $inDataObj         DBconnection object array
     * @param GrnNotificationSearchCondition $inSearchCondition Search condition
     *
     * @return  array                       Array of space id which have unread notification data
     */
    public function getSpaceNotifyIds($inDataObj, $inSearchCondition)
    {
        /* @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj["db"];

        $userId = $inSearchCondition->getUserId();
        $limit = $inSearchCondition->getLimit();
        $mainTableFactor = $this->getMainTableFactor($inSearchCondition, true);
        $query = "SELECT "
                 . "_id "
                 . " FROM "
                 . $mainTableFactor
                 . " WHERE"
                 . " col_module_id = 'grn.space'"
                 . " AND col_user = " . $inDb->escape($userId)
                 . " AND col_read = 0"
                 . " ORDER BY"
                 . " col_timestamp DESC ";

        $query = $inDb->select_format($query, 0, $limit,
            CB_DATABASE_NO_LOCK);
        $notifyIds = [];
        if (cb_is_db_result($result = $inDb->query($query))) {
            while ($row = $inDb->fetch_assoc($result)) {
                $notifyIds[] = $row['_id'];
            }
        }
        $inDb->free_result($result);

        return $notifyIds;
    }

    /**
     * @param GRN_Notification_Data $data
     * @param array                 $notifyList
     */
    public function sendNotificationData(
        GRN_Notification_Data $data,
        array $notifyList
    ) {
        if (grn_check_table_merged()) {
            $this->sendNotificationDataSimpleVersion($data, $notifyList);
        } else {
            $this->sendNotificationDataDistributedVersion($data, $notifyList);
        }
    }

    /**
     * @param GRN_Notification_Data $data
     * @param array                 $notifyList
     */
    private function sendNotificationDataSimpleVersion(
        GRN_Notification_Data $data,
        array $notifyList
    ) {
        require_once("notification/resources.csp");
        $db = cb_get_app_db(GRN_NOTIFICATION_APP_ID);
        $table = $data->getIsToMe() ? 'tab_grn_notification_to_me'
            : 'tab_grn_notification_notify';

        $query = sprintf(
            "REPLACE INTO $table (%s) VALUES %s;",
            implode($this->getNotificationNotifyColumnList(), ","),
            $this->getNotificationNotifyValuesStatement($notifyList, $data,
                $db));
        $db->query($query);

    }

    /**
     * @param GRN_Notification_Data $data
     * @param array                 $notifyList
     */
    private function sendNotificationDataDistributedVersion(
        GRN_Notification_Data $data,
        array $notifyList
    ) {
        require_once("grn/table_util.csp");
        $eachConnectionNotifyList = [];
        foreach ($notifyList as $eachUserId) {
            $connectionName = grn_notification_get_connection_name($eachUserId);
            $eachConnectionNotifyList[$connectionName][grn_get_personal_suffix($eachUserId)][]
                = $eachUserId;
        }

        $table = $data->getIsToMe() ? 'tab_grn_notification_to_me___'
            : 'tab_grn_notification_notify___';

        global $G_container_base;
        foreach (
            $eachConnectionNotifyList as $connectionName =>
            $userTablePartitionInfo
        ) {
            $db = $G_container_base->getInstance($connectionName);
            foreach ($userTablePartitionInfo as $partitionKey => $mappedUserIds) {

                $query = sprintf(
                    "REPLACE INTO $table%s (%s) VALUES %s;",
                    $partitionKey,
                    implode($this->getNotificationNotifyColumnList(), ","),
                    $this->getNotificationNotifyValuesStatement($mappedUserIds,
                        $data, $db)
                );
                $db->query($query);
            }
        }
    }

    /**
     * @param array                 $userIds
     * @param GRN_Notification_Data $data
     * @param CB_DatabaseConnection $db
     *
     * @return string
     */
    private function getNotificationNotifyValuesStatement(
        array $userIds,
        GRN_Notification_Data $data,
        CB_DatabaseConnection $db
    ) {
        $valueFormat = $this->getNotificationNotifyValueFormat();
        $dataList = [];
        foreach ($userIds as $eachUser) {
            $dataList[] = $this->formatNotificationNotifyData($eachUser, $data,
                $db, $valueFormat);
        }

        return implode($dataList, ",");
    }

    /**
     * @param                       $userId
     * @param GRN_Notification_Data $data
     * @param CB_DatabaseConnection $db
     * @param                       $value_format
     */
    private function formatNotificationNotifyData(
        $userId,
        GRN_Notification_Data $data,
        CB_DatabaseConnection $db,
        $value_format
    ) {
        $subject_data = $data->getSubjectData();
        $abstract_data = $data->getAbstractData();
        $sender_data = $data->getSenderData();
        $timestamp = $data->getTimeStampData();

        return $db->format($value_format,
            [
                $data->getModuleId(),
                $data->getSubModuleId(),
                $data->getActionId(),
                $data->getUniqueId(),
                $data->getOrgDataString(),
                $subject_data[0],
                $subject_data['front'],
                $subject_data['back'],
                $subject_data['url'],
                $subject_data['icon'],
                $abstract_data[0],
                $abstract_data['front'],
                $abstract_data['back'],
                $abstract_data['url'],
                $abstract_data['icon'],
                $sender_data['name'],
                $sender_data['id'],
                $sender_data['url'],
                $sender_data['group_name'],
                $timestamp->unix_ts,
                $data->getStatusData(),
                $data->getReadFlag(),
                $data->getPopupFlag(),
                $data->getAttachedFlag(),
                $data->getAutoConfirmFlag(),
                $data->getConfirmRequiredFlag(),
                $data->getSpaceId(),
                $data->getSpaceName(),
                $data->getEventStartTs(),
                $userId
            ]);
    }

    /**
     * @return string
     */
    private function getNotificationNotifyValueFormat()
    {
        $format = [];
        for (
            $i = 0, $l = count($this->getNotificationNotifyColumnList());
            $i < $l; $i++
        ) {
            $format[] = "'@S'";
        }

        return sprintf("(%s)", implode($format, ","));
    }

    /**
     * @return array
     */
    private function getNotificationNotifyColumnList()
    {
        return [
            'col_module_id',
            'col_sub_module_id',
            'col_action_id',
            'col_unique_id',
            'col_org_data',
            'col_subject',
            'col_subject_f',
            'col_subject_b',
            'col_subject_url',
            'col_subject_icon',
            'col_abstract',
            'col_abstract_f',
            'col_abstract_b',
            'col_abstract_url',
            'col_abstract_icon',
            'col_sender_name',
            'col_sender_id',
            'col_sender_url',
            'col_group_name',
            'col_timestamp',
            'col_status',
            'col_read',
            'col_popup',
            'col_attached',
            'col_auto_confirm',
            'col_confirm_required',
            'col_space_id',
            'col_space_name',
            'col_event_start_ts',
            'col_user'
        ];
    }
}

