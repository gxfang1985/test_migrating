<?php

namespace grn\notification\background\job;

use grn\grn\background\BackgroundJob;
use grn\grn\background\BackgroundJobDto;
use grn\notification\background\JobMessageConverter;
use grn\grn\background\BackgroundJobLogger;

require_once("grn/notification.csp");

/**
 */
class Notifier implements BackgroundJob
{

    private $notificationService;
    private $converter;
    private $logger;

    /**
     *
     */
    public function __construct()
    {
        $this->converter = new JobMessageConverter();
        $this->notificationService = \GRN_Notification_Service::getInstance();
        $this->logger = BackgroundJobLogger::create();
    }

    /**
     * method for testing
     *
     * @param \GRN_Notification_Service $service
     */
    public function setNotificationService(\GRN_Notification_Service $service)
    {
        $this->notificationService = $service;
    }

    /**
     * @param BackgroundJobDto $dto
     *
     * @return void
     */
    public function run(BackgroundJobDto $dto)
    {
        try {
            $data = $this->converter->convertToArray($dto);
            $userList = $data["notifyList"];
            /** @var $notifyData \GRN_Notification_Data */
            $notifyData = $data["notifyData"];
            $isToMe = isset($data['isToMe']) && $data['isToMe'] == true;
            $notifyData->setIsToMe($isToMe);
            $senderData = $notifyData->getSenderData();
            $addresses = [];
            foreach ($userList as $userId) {
                if (is_null($userId) || $userId === ''
                    || (int)$userId === (int)$senderData["id"]
                ) {
                    continue;
                }
                $addresses[] = $userId;
            }
            $this->logger->log(BackgroundJobLogger::LOG_INFO,
                "sendNotificationData");
            $this->notificationService->sendNotificationData($notifyData,
                $addresses);
        } catch (\Exception $e) {
            $this->logger->logException($e);
        }
    }

}
