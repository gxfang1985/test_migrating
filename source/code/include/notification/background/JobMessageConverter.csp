<?php

namespace grn\notification\background;

use grn\grn\background\BackgroundJobDTO;
use grn\grn\background\exception\InvalidDataException;

/**
 */
class JobMessageConverter
{
    /**
     * @param \grn\grn\background\BackgroundJobDTO $dto
     *
     * @throws \grn\grn\background\exception\InvalidDataException
     * @return array
     */
    public function convertToArray(BackgroundJobDTO $dto)
    {
        $convertedData = [];
        $message = $this->convertFromJSON($dto);
        if ( ! $message) {
            throw new InvalidDataException("json data is invalid");
        }
        $convertedData["notifyData"] = $this->getNotifyData($message);
        $convertedData["notifyList"] = $this->getNotifyList($message);
        $convertedData["senderId"] = $this->getSender($message);
        $convertedData['isToMe'] = $this->getIsToMe($message);

        return $convertedData;
    }

    /**
     * @param \GRN_Notification_Data $notificationData
     * @param                        $senderId
     * @param array                  $notifyList
     *
     * @return string
     */
    public function convertToJSON(
        \GRN_Notification_Data $notificationData,
        $senderId,
        array $notifyList
    ) {
        $toJson = [];
        $toJson["notifyData"] = $notificationData->export();
        $toJson["notifyList"] = $notifyList;
        $toJson["senderId"] = $senderId;
        $toJson['isToMe'] = $notificationData->getIsToMe();

        return json_encode($toJson);
    }

    /**
     * @param array $message
     *
     * @throws \grn\grn\background\exception\InvalidDataException
     * @return \GRN_Notification_Data
     */
    private function getNotifyData(array $message)
    {
        $notificationData = new \GRN_Notification_Data();
        if ( ! isset($message["notifyData"])) {
            throw new InvalidDataException("notifyData is not set");
        }

        if ( ! $notificationData->isValid($message["notifyData"])) {
            throw new InvalidDataException("notifyData is not valid");
        }

        $notificationData->import($message["notifyData"]);

        return $notificationData;
    }

    /**
     * @param array $message
     *
     * @throws \grn\grn\background\exception\InvalidDataException
     * @return array
     */
    private function getNotifyList(array $message)
    {
        if ( ! isset($message["notifyList"])) {
            throw new InvalidDataException("notifyList is not set");
        }


        if ( ! is_array($message["notifyList"])) {
            throw new InvalidDataException("notifyList is not array");
        }

        return $message["notifyList"];
    }

    /**
     * @param array $message
     *
     * @throws \grn\grn\background\exception\InvalidDataException
     * @return int
     */
    private function getSender(array $message)
    {

        if ( ! isset($message["senderId"])) {
            throw new InvalidDataException("senderId is not set");
        }

        if ( ! is_numeric($message["senderId"])) {
            throw new InvalidDataException("senderId is not numeric");
        }

        return $message["senderId"];
    }

    /**
     * @param array $message
     *
     * @throws \grn\grn\background\exception\InvalidDataException
     * @return boolean
     */
    private function getIsToMe(array $message)
    {
        if ( ! isset($message['isToMe'])) {
            throw new InvalidDataException('isToMe is not set');
        }

        if ( ! is_bool($message['isToMe'])) {
            throw new InvalidDataException('isToMe is not boolean');
        }

        return $message['isToMe'];
    }

    /**
     * @param \grn\grn\background\BackgroundJobDTO $dto
     *
     * @return array
     */
    private function convertFromJSON(BackgroundJobDTO $dto)
    {
        return json_decode($dto->getMessage(), true);
    }
}
