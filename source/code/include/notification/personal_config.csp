<?php

/**
 * 通知アプリ個人設定ロジック
 *
 * @package grn.notification
 * @author  Ikeda, ATSUSHI 2004/11
 * @version 1.0
 */

require_once('fw/uum_core.csp');
require_once('fw/module.csp');
require_once('grn/ui.csp');
require_once('notification/error_code.csp');
require_once('notification/resources.csp');

//////////////////////////////////////////////////////////////////////////////

/**
 * 通知アプリ個人設定ロジック
 *
 * @author  IKEDA, Atsushi 2004/11
 * @version 1.0
 * @package grn.notification
 */
class GRN_Notification_PersonalConfig extends CB_ModuleBase
{
    function __construct(& $user)
    {
        parent::__construct(GRN_NOTIFICATION_PERSONAL_MODULE_ID);

        $this->_user =& $user;

        // UI Config オブジェクト
//        $default = null;
//        $this->_ui_config = new GRN_UIConfig( $this->_getProfile(), $default );
        $ui_config_manager = GRN_UIConfigManager::getInstance();
        $this->_ui_config = $ui_config_manager->getUserConfig($user);
    }

    //////////////////////////////////////////////////////////////////////////
    // メンバ変数
    /**
     * @access private
     */
    var $_user = null;
    var $_ui_config = null;

    //////////////////////////////////////////////////////////////////////////
    // private method

    /**
     * ユーザープロファイルオブジェクトを取得
     *
     * @access private
     * @return object CB_Profile
     */
    function _getProfile()
    {
        // 通知アプリのユーザープロファイルを取得する
        $ret = $this->getUserProfile($this->_user);

        return $ret;
    }

    /**
     * ユーザープロファイルを更新
     *
     * @access private
     * @return boolean
     */
    function _updateProfile(& $profile, $name, $value)
    {
        if (is_null($profile)) {
            // データ不正
            cb_throw_error(E_GRN_NTFC_FAILED_TO_UPDATE_PROFILE_DATA);
        }

        $old_value = null;
        if ( ! $profile->getAttribute($name, $old_value)) {
            // 見つからない場合は追加
            if ( ! $profile->createAttribute($name, $value)) {
                // プロファイルデータ更新失敗
                cb_throw_error(E_GRN_NTFC_FAILED_TO_UPDATE_PROFILE_DATA);
            }
        } else {
            // 見つかった場合は更新
            if ( ! $profile->updateAttribute($name, $value)) {
                // プロファイルデータ更新失敗
                cb_throw_error(E_GRN_NTFC_FAILED_TO_UPDATE_PROFILE_DATA);
            }
        }
        {
            $___ret = true;

            return $___ret;
        }
    }

    //////////////////////////////////////////////////////////////////////////
    // public method

    /**
     * データ一覧画面のソート設定を保存
     *
     * @param   string $data_type データタイプ（通知データ：'notify', 未確認通知データ：'whatsnew', 通知履歴データ：'history')
     * @param   string $sort      ソートキー（日時：'time', 名前：'name')
     * @param   string $reverse   ソート順（1/0)
     *
     * @return  boolean 成否
     */
    function setSortCondition($data_type, $sort, $reverse)
    {
        // 通知アプリのユーザープロファイルを取得する
        $profile =& $this->_getProfile();
        if (is_null($profile)) {
            // プロファイルデータ更新失敗
            cb_throw_error(E_GRN_NTFC_FAILED_TO_UPDATE_PROFILE_DATA);
        }

        if (($data_type !== 'notify') && ($data_type !== 'whatsnew')
            && ($data_type !== 'history')
        ) {
            // データ不正
            assert('FALSE');

            return false;
        }

        // ソートキーの設定
        if (is_null($sort) || ! $sort) {
            $sort = 'time';
        } elseif (($sort !== 'time') && ($sort !== 'name')) {
            // データ不正
            assert('FALSE');

            return false;
        }

        $name = $data_type . '_index.sort.key';
        if ( ! $this->_updateProfile($profile, $name, $sort)) {
            // プロファイルデータ更新失敗
            cb_throw_error(E_GRN_NTFC_FAILED_TO_UPDATE_PROFILE_DATA);
        }

        // ソート順の設定
        if (is_null($reverse)) {
            $reverse = true;
        }
        $name = $data_type . '_index.sort.reverse';
        if ( ! $this->_updateProfile($profile, $name, $reverse)) {
            // プロファイルデータ更新失敗
            cb_throw_error(E_GRN_NTFC_FAILED_TO_UPDATE_PROFILE_DATA);
        }

        return true;
    }

    /**
     * データ一覧画面のソート設定を取得
     *
     * @param   string $data_type データタイプ（通知データ：'notify', 未確認通知データ：'whatsnew', 通知履歴データ：'history')
     * @param   string $sort      ソートキー（日時：'time', 名前：'name')を受け取る
     * @param   string $reverse   ソート順（1/0)を受け取る
     *
     * @return  boolean 成否
     */
    function getSortCondition($data_type, & $sort, & $reverse)
    {
        if (($data_type !== 'notify') && ($data_type !== 'whatsnew')
            && ($data_type !== 'history')
        ) {
            // データ不正
            assert('FALSE');

            return false;
        }

        // デフォルト
        $sort = GRN_NOTIFICATION_DEFAULT_SORT_KEY;
        $reverse = GRN_NOTIFICATION_DEFAULT_SORT_REVERSE;

        // 通知アプリのユーザープロファイルを取得する
        $profile = $this->_getProfile();
        if (is_null($profile)) {
            return true;
        }

        // ソートキーの取得
        $value = null;
        $name = $data_type . '_index.sort.key';
        if ($profile->getAttribute($name, $value)) {
            $sort = $value;
        }

        // ソート順の取得
        $name = $data_type . '_index.sort.reverse';
        if ($profile->getAttribute($name, $value)) {
            $reverse = $value;
        }

        return true;
    }

    /**
     * 一覧に表示する件数を設定
     *
     * @param   int $rows 表示する件数
     *
     * @return  boolean 成否
     */
    function setNumberOfDisplay($rows)
    {
        if ( ! is_int($rows) || ($rows < 0)) {
            // データ不正
            assert('FALSE');

            return false;
        }

        // UI設定
        $this->_ui_config->setListMax($rows);

        return true;
    }

    /**
     * 一覧に表示する件数を取得
     *
     * @param   int $rows 表示する件数を受け取る
     *
     * @return  boolean 成否
     */
    function getNumberOfDisplay(& $rows)
    {
        // UI設定取得
        $rows = $this->_ui_config->getListMax();

        return true;
    }

    /**
     * 表示する文字数の設定
     *
     * @param   int $subject_cols  標題欄の最大文字列長
     * @param   int $abstract_cols 内容欄の最大文字列長
     * @param   int $name_cols     名前欄の最大文字列長
     *
     * @return  boolean 成否
     */
    function setMaxLength($subject_cols, $abstract_cols, $name_cols)
    {
        if ( ! is_int($subject_cols) || ($subject_cols < 0)
             ||
             ! is_int($abstract_cols)
             || ($abstract_cols < 0)
             ||
             ! is_int($name_cols)
             || ($name_cols < 0)
        ) {
            // データ不正
            assert('FALSE');

            return false;
        }

        // UI設定
        $this->_ui_config->setSubjectWidth($subject_cols);
        $this->_ui_config->setTruncateWidth($abstract_cols);
        $this->_ui_config->setNameWidth($name_cols);

        return true;
    }

    /**
     * 一覧で表示する最大文字列長を取得
     *
     * @param   int $subject_cols  標題欄の最大文字列長を受け取る
     * @param   int $abstract_cols 内容欄の最大文字列長を受け取る
     * @param   int $name_cols     名前欄の最大文字列長を受け取る
     * @param   int $space_cols    スペース名欄の最大文字列長を受け取る
     *
     * @return  boolean 成否
     */
    function getMaxLength(
        & $subject_cols,
        & $abstract_cols,
        & $name_cols,
        & $space_cols
    ) {
        // UI設定取得
        $subject_cols = $this->_ui_config->getSubjectWidth();
        $abstract_cols = $this->_ui_config->getTruncateWidth();
        $name_cols = $this->_ui_config->getNameWidth();
        $space_cols = $this->_ui_config->getSpaceWidth();

        return true;
    }

    /**
     * 外部通知を使用しないフラグを設定する
     *
     * @param  boolean $not_use 外部通知を使用しないフラグ
     */
    function setNotUseNotify($not_use)
    {
        $profile =& $this->_getProfile();
        if (is_null($profile)) {
            cb_throw_error(E_GRN_CMMN_NTFC_FAILED_TO_UPDATE_PROFILE_DATA);
        }

        if ( ! $this->_updateProfile($profile, 'not_use', $not_use)) {
            cb_throw_error(E_GRN_CMMN_NTFC_FAILED_TO_UPDATE_PROFILE_DATA);
        }
    }

    /**
     * 外部通知を使用しないフラグを取得する
     *
     * @param  boolean $not_use 外部通知を使用しないフラグ
     *
     * @return boolean 成否
     */
    function getNotUseNotify(& $not_use)
    {
        $profile = $this->_getProfile();
        if (is_null($profile)) {
            cb_throw_error(E_GRN_CMMN_NTFC_FAILED_TO_UPDATE_PROFILE_DATA);
        }

        $value = false;
        $profile->getAttribute('not_use', $value);
        $not_use = $value;

        return true;
    }

}


