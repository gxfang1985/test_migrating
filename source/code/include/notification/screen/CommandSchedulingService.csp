<?php

namespace grn\notification\screen;

class CommandSchedulingService
{
    private $command;

    /**
     * @param $input
     */
    public function __construct($input)
    {
        assert('isset($input["scheduling_time_hour"])');
        assert('isset($input["scheduling_time_minute"])');
        $this->command = $this->getCommandTime($input["scheduling_time_minute"],
            $input["scheduling_time_hour"]);
    }

    /**
     *
     */
    public function post()
    {
        require_once('fw/schedule.csp');
        $sched = \CB_SchedulingService::getInstance();
        $sched->registerRepeatEvent('delete_old_notification',
            'delete_old_notification.csp', $this->command);
    }

    /**
     * @param string $minute
     * @param string $hour
     *
     * @return string
     */
    private function getCommandTime($minute, $hour)
    {
        $utc_time = $this->getUTCTime($minute, $hour);
        $command_time = [
            'minute' => $utc_time->minute,
            'hour'   => $utc_time->hour,
            'day'    => '*',
            'month'  => '*',
            'week'   => '*',
        ];

        return implode(' ', $command_time);
    }

    /**
     * @param $minute
     * @param $hour
     *
     * @return \CB_DateTime|object
     */
    private function getUTCTime($minute, $hour)
    {
        global $G_container_base;
        /** @var $uum \GRN_Uum */
        $uum = $G_container_base->getInstance('uum');
        require_once('fw/i18n.csp');
        $date_time = new \CB_DateTime();
        $I18N = \CB_I18N::getInstance();
        $today = getdate();
        $date_time->year = $today['year'];
        $date_time->month = $today['mon'];
        $date_time->day = $today['mday'];
        $date_time->hour = $hour;
        $date_time->minute = $minute;
        require_once('schedule/view_util.csp');

        return grn_schedule_convert_datetime_tz1_to_tz2($date_time,
            $I18N::getUserTimezone($uum->getLoginUser()), 'UTC');
    }
}
