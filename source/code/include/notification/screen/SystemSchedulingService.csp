<?php

namespace grn\notification\screen;

class SystemSchedulingService
{
    private $smarty;

    public function __construct()
    {
        require_once("grn/smarty.csp");
        $this->smarty = new \GRN_Smarty;
    }

    public function fetch()
    {
        $time = null;
        $utc_time = $this->getUTCTimeOfDeleteNotification();
        if ( ! is_null($utc_time)) {
            $utc_view = [];
            $utc_view['hour'] = sprintf("%02d", $utc_time->hour);
            $utc_view['minute'] = sprintf("%02d", $utc_time->minute);
            $this->smarty->assign('utc_time', $utc_view);
            $time = $this->getTime($utc_time->minute, $utc_time->hour);
        }
        $scheduled_times = [
            'minute_interval' => 5,
            'default_value'   => $time
        ];
        $this->smarty->assign('scheduled_times', $scheduled_times);

        $page_title = grn_get_current_page_display_name();
        $this->smarty->assign('page_title', $page_title);

        // site position
        $this->smarty->assign('site_position',
            [['page' => '', 'name' => $page_title]]);

        $this->smarty->display(cb_get_pagename() . ".tpl");
    }

    /**
     * @return \CB_Time|null
     */
    private function getUTCTimeOfDeleteNotification()
    {
        require_once('fw/schedule.csp');
        $sched = \CB_SchedulingService::getInstance();
        $event = $sched->getEvent('delete_old_notification');
        $time = ($event) ? $this->createTimeByCommand($event->get('command'))
            : null;

        return $time;
    }

    /**
     * @param string $command
     *
     * @return \CB_Time
     */
    private function createTimeByCommand($command)
    {
        require_once('fw/date.csp');
        $time = new \CB_Time();
        $command_array = explode(' ', $command);

        $time->minute = $command_array[0];

        $hour = explode(',', $command_array[1]);
        if (count($hour) > 1) {
            $command_array[1] = $hour[0];
        }
        $time->hour = $command_array[1];

        return $time;
    }

    private function getTime($minute, $hour)
    {
        global $G_container_base;
        /** @var $uum \GRN_Uum */
        $uum = $G_container_base->getInstance('uum');
        require_once('fw/i18n.csp');
        $date_time = new \CB_DateTime();
        $I18N = \CB_I18N::getInstance();
        $today = getdate();
        $date_time->year = $today['year'];
        $date_time->month = $today['mon'];
        $date_time->day = $today['mday'];
        $date_time->hour = $hour;
        $date_time->minute = $minute;
        require_once('schedule/view_util.csp');

        return grn_schedule_convert_datetime_tz1_to_tz2($date_time, 'UTC',
            $I18N::getUserTimezone($uum->getLoginUser()));
    }
}
