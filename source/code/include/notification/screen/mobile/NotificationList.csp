<?php
declare(strict_types=1);

namespace grn\notification\screen\mobile;

require_once('fw/basic_date.csp');
require_once('mail/utility.csp');

class NotificationList extends MobileNotificationScreenBase
{
    private $totalUnreadToMe = 0;

    private $totalUnreadAll = 0;

    private $showHasUnreadAll = false;

    /**
     * @return bool
     */
    public function isShowHasUnreadAll(): bool
    {
        return $this->showHasUnreadAll;
    }

    /**
     * @param bool $showHasUnreadAll
     */
    public function setShowHasUnreadAll(bool $showHasUnreadAll)
    {
        $this->showHasUnreadAll = $showHasUnreadAll;
    }

    /**
     * @param int $totalUnreadToMe
     */
    public function setTotalUnreadToMe(int $totalUnreadToMe)
    {
        $this->totalUnreadToMe = $totalUnreadToMe;
    }

    /**
     * @return int
     */
    public function getTotalUnreadToMe(): int
    {
        return $this->totalUnreadToMe;
    }

    /**
     * @param int $totalUnreadAll
     */
    public function setTotalUnreadAll(int $totalUnreadAll)
    {
        $this->totalUnreadAll = $totalUnreadAll;
    }

    /**
     * @return int
     */
    public function getTotalUnreadAll(): int
    {
        return $this->totalUnreadAll;
    }

    /**
     * @return array
     */
    private function getArgumentCheckList()
    {
        return [
            self::ARG_MODULE_ID,
            self::ARG_START_POSITION,
            self::ARG_IS_SHOW_SINGLE,
            self::ARG_LAST_DATA_ID,
            self::ARG_IS_READ,
            self::ARG_IS_TO_ME
        ];
    }

    public function setNotificationList()
    {
        $this->setNotificationApp();

        // 通知更新処理対応アプリケーションの更新処理呼び出し
        $logged_in_user = cb_get_login_user();
        $this->getNotificationApp()->updateApplications($logged_in_user, true);

        // 通知対応アプリ列挙
        $this->setAppsList();

        if ($this->isRead()) {
            $this->setDataType('history');
            $this->setIsShowSingle(1);
            $this->setNotificationDataListForView($this->getModuleId());
        } else {
            $this->setDataType('whatsnew');
            if ( ! $this->getModuleId()) {
                $this->setIsShowSingle(0);
                $this->getAllNotificationData();
            } else {
                $this->setIsShowSingle(1);
                $this->getSingleNotificationData();
            }
        }

        $this->setTotalUnreadNotification();

        $this->setUsersInfo($this->getDataList());

        if ( ! $this->isRead() && $this->isToMe() && $this->getTotalUnreadAll()
             && ! $this->getTotalUnreadToMe()
        ) {
            $this->setShowHasUnreadAll(true);
        }
    }

    public function assignData($smarty)
    {
        $smarty->assign('data_list', $this->getDataList());
        $smarty->assign('apps_list', $this->getAppInfos());
        $smarty->assign('users_info', $this->getUsersInfo());
        $smarty->assign('uid', $this->getLoginUserId());
        $smarty->assign('is_show_single', $this->getIsShowSingle());
        $smarty->assign('selected_app_info', $this->getSelectedAppInfos());
        $smarty->assign('is_to_me', $this->isToMe());
        $smarty->assign('is_history_list', $this->isRead() ? true : false);
        $smarty->assign('show_has_unread_all', $this->isShowHasUnreadAll());
    }

    public function fetch()
    {
        require_once('grn/smarty.csp');
        $smarty = new \GRN_Smarty();

        $this->assignBreadcrumbCurrentPage($smarty,
            $this->getMobileApplicationName());

        $this->checkArgFromInput($this->getArgumentCheckList(),
            $this->getInput());

        $this->setNotificationList();

        $this->assignData($smarty);

        $data_notification = [
            'moduleId'        => $this->getModuleId(),
            'isToMe'          => $this->isToMe(),
            'isRead'          => $this->isRead(),
            'totalUnreadToMe' => $this->getTotalUnreadToMe(),
            'totalUnreadAll'  => $this->getTotalUnreadAll(),
        ];

        $smarty->assign('data_notification', $data_notification);

        return $smarty->fetch('notification/mobile/notification_list.tpl');
    }

    public function ajaxFetch()
    {
        require_once('grn/smarty.csp');
        $smarty = new \GRN_Smarty();

        $this->checkArgFromInput($this->getArgumentCheckList(),
            $this->getInput());

        // 通知アプリ取得
        $this->setNotificationApp();

        $this->setNotificationList();

        $this->assignData($smarty);

        //Display Smarty Template
        $doc_name = 'notification/mobile/_data_list.tpl';

        return [
            'content'         => $smarty->fetch($doc_name),
            'totalUnreadToMe' => $this->getTotalUnreadToMe(),
            'totalUnreadAll'  => $this->getTotalUnreadAll()
        ];
    }

    public function getAllNotificationData()
    {
        foreach (array_keys($this->getAppsList()) as $apps_id) {
            $apps = $this->getAppsList()[$apps_id];
            foreach (array_keys($apps) as $app_id) {
                /** @var $app \GRN_ApplicationBase */
                $app = $apps[$app_id];
                $module_id = $app->getModuleId();
                $this->setNotificationDataListForView($module_id);
            }
        }
    }

    public function getSingleNotificationData(
        $last_time = null,
        $add_condition = null
    ) {
        $this->setNotificationDataListForView($this->getModuleId(), $last_time,
            $add_condition);
    }

    public function setTotalUnreadNotification()
    {
        $logged_in_user = cb_get_login_user();

        $total_unread_to_me = $this->getNotificationApp()
                                   ->getWhatsNewDataCount($logged_in_user,
                                       $this->getModuleId(),
                                       GRN_NOTIFICATION_WHATSNEW_DATA_LIMIT,
                                       true);
        $this->setTotalUnreadToMe($total_unread_to_me);

        $total_unread_all = $this->getNotificationApp()
                                 ->getWhatsNewDataCount($logged_in_user,
                                     $this->getModuleId(),
                                     GRN_NOTIFICATION_WHATSNEW_DATA_LIMIT,
                                     false);
        $this->setTotalUnreadAll($total_unread_all);
    }
}
