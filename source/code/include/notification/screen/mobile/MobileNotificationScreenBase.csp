<?php

namespace grn\notification\screen\mobile;

use grn\grn\access\service\AppAccess;
use grn\grn\GrnException;
use grn\grn\GrnGenericScreenBase;
use grn\grn\Validate;
use grn\schedule\FacilityApprovalLogic;

require_once('notification/resources.csp');
require_once('fw/basic_date.csp');

class MobileNotificationScreenBase extends GrnGenericScreenBase
{
    private $_users_info = [];

    public function __construct($input)
    {
        parent::__construct($input);
        $this->initMobileView();
        $this->setMobileApplicationId(GRN_NOTIFICATION_APP_ID);
        $this->setMobileFooterBar();
    }

    const ARG_MODULE_ID = 'module_id';
    const ARG_START_POSITION = 'sp';
    const ARG_NOTIFICATION_ID = 'nid';
    const ARG_IS_SHOW_SINGLE = 'is_show_single';
    const ARG_LAST_DATA_ID = 'ldid';
    const ARG_IS_READ = 'is_read';
    const ARG_IS_TO_ME = 'is_to_me';

    const ABSTRACT_MAX_LENGTH = 100;

    private $_module_id = null;
    private $_start_position;
    private $_notification_id;
    private $_data_type;
    private $_is_show_single = 0;
    private $_last_data_id;
    private $isRead = false;
    private $isToMe = false;
    private $_notification_data_list = [];

    /** @var $_notification_app \GRN_Notification_App */
    private $_notification_app;

    private $_apps_list = [];

    public function getMobileApplicationName()
    {
        require_once('fw/i18n.csp');

        return cb_msg('grn.notification', 'application_name');
    }

    protected function checkArgFromInput(array $paraArr, array $input)
    {
        foreach ($paraArr as $para) {
            switch ($para) {
                case self::ARG_MODULE_ID:
                    $module_id = cb_at($input, self::ARG_MODULE_ID);
                    if (Validate::isNull($module_id)
                        || $module_id == GRN_NOTIFICATION_MODULE_ID
                        || $module_id == 'all'
                    ) {
                        $this->setModuleId(null);
                    } else {
                        $this->setModuleId($module_id);
                    }
                    break;
                case self::ARG_START_POSITION:
                    $start_position = cb_at($input, self::ARG_START_POSITION);
                    if (Validate::isNumber($start_position)
                        && $start_position > 0
                    ) {
                        $this->setStartPosition($start_position);
                    } else {
                        $this->setStartPosition(null);
                    }
                    break;
                case self::ARG_NOTIFICATION_ID:
                    $notification_id = cb_at($input, self::ARG_NOTIFICATION_ID);
                    if (Validate::isNumber($notification_id)
                        && $notification_id > 0
                    ) {
                        $this->setNotificationId($notification_id);
                    } else {
                        require_once('notification/error_code.csp');
                        throw new GrnException(E_GRN_NTFC_NOT_FOUND);
                    }
                    break;
                case self::ARG_IS_SHOW_SINGLE:
                    $is_show_single = cb_at($input, self::ARG_IS_SHOW_SINGLE);
                    if (Validate::isNumber($is_show_single)) {
                        $this->setIsShowSingle($is_show_single);
                    }
                    break;
                case self::ARG_LAST_DATA_ID:
                    $last_data_id = cb_at($input, self::ARG_LAST_DATA_ID);
                    if (Validate::isNumber($last_data_id)) {
                        $this->setLastDataId($last_data_id);
                    } else {
                        $this->setLastDataId(null);
                    }
                    break;
                case self::ARG_IS_READ:
                    $this->isRead = cb_at($input, self::ARG_IS_READ, 0);
                    break;
                case self::ARG_IS_TO_ME:
                    $this->isToMe = cb_at($input, self::ARG_IS_TO_ME, 0);
                    break;
                default:
                    break;
            }
        }
    }

    /**
     * 通知アプリ取得
     *
     * @throws \grn\grn\GrnException
     */
    protected function setNotificationApp()
    {
        $app_locator = \GRN_ApplicationLocator::instance();
        $this->_notification_app
            = $app_locator->getInstance(GRN_NOTIFICATION_APP_ID);
        if (Validate::isNull($this->_notification_app)) {
            // 使用不可状態
            throw new GrnException(E_GRN_NTFC_NOT_AVAILABLE);
        }
    }

    /**
     * @return \GRN_Notification_App
     */
    public function getNotificationApp()
    {
        return $this->_notification_app;
    }

    protected function setAppsList()
    {
        $this->_apps_list[]
            = $this->_notification_app->getApplicationList(false);

        // 外部アプリケーション管理ロジックを取得する
        /** @var $app_manager \GRN_Notification_ApplicationManager */
        $app_manager = $this->_notification_app->getOutsideApplicationManager();
        $this->_apps_list[] = $app_manager->getAllList();
    }

    /**
     * @return array    通知対応APPリスト
     */
    public function getAppsList()
    {
        return $this->_apps_list;
    }

    /**
     * Get application info list for Filter
     *
     * @return array
     */
    public function getAppInfos()
    {
        $app_infos = [];
        foreach (array_keys($this->getAppsList()) as $apps_id) {
            $selected = ( ! $this->getModuleId()) ? true : false;
            $app_infos[0] = [
                'value'    => 'all',
                'label'    => cb_msg(GRN_NOTIFICATION_MODULE_ID, 'setting_all'),
                'selected' => $selected
            ];

            $apps =& $this->getAppsList()[$apps_id];
            foreach (array_keys($apps) as $app_id) {
                /** @var $app \GRN_ApplicationBase */
                $app = $apps[$app_id];
                if ( ! ($app instanceof \GRN_ApplicationBase)) {
                    continue;
                }
                $temp_module_id = $app->getModuleId();

                $selected = ($this->_module_id
                             == $temp_module_id) ? true
                    : false;
                $app_infos[$temp_module_id] = [
                    'value'    => $temp_module_id,
                    'label'    => $app->getName(),
                    'selected' => $selected
                ];
            }
        }

        return $app_infos;
    }

    /**
     * Get selected application info for Filter
     *
     * @param array
     */
    public function getSelectedAppInfos()
    {
        $app_info = [];
        foreach ($this->getAppInfos() as $key => $value) {
            if ($value['selected']) {
                $app_info = $value;
            }
        }

        return $app_info;
    }

    protected function setUsersInfo($data_list)
    {
        $users_id = [];
        foreach ($data_list as $value) {
            foreach ($value['list'] as $item) {
                $users_id[] = $item['sender_id'];
            }
        }
        require_once('grn/controller.csp');
        $this->_users_info
            = \GRN_ControllerUtil::getUserInfoToShowUserName($users_id,
            cb_get_login_user());
    }

    public function getUsersInfo()
    {
        return $this->_users_info;
    }

    /**
     * @return int
     */
    public function getNumberOnPage()
    {
        if ($this->_data_type == GRN_NOTIFICATION_TYPE_HISTORY) {
            return self::MORE_VIEW_COUNT;
        } else {
            return ($this->_is_show_single == 1) ? self::MORE_VIEW_COUNT : 10;
        }
    }

    /**
     * 表示するデータ種別
     *
     * @return string    'whatsnew', 'history'
     */
    public function getDataType()
    {
        return $this->_data_type;
    }

    protected function setDataType($value)
    {
        $this->_data_type = $value;
    }

    /**
     * Get notification id. (From $G_INPUT)
     *
     * @return int
     */
    public function getNotificationId()
    {
        return $this->_notification_id;
    }

    protected function setNotificationId($value)
    {
        $this->_notification_id = $value;
    }

    /**
     * Get module id. (From $G_INPUT)
     * e.g.    grn.space, grn.bulletin
     *
     * @return string
     */
    public function getModuleId()
    {
        return $this->_module_id;
    }

    protected function setModuleId($value)
    {
        $this->_module_id = $value;
    }

    /**
     * Get notification last data time(timestamp). (From $G_INPUT)
     *
     * @return int
     */
    public function getStartPosition()
    {
        return $this->_start_position;
    }

    protected function setStartPosition($value)
    {
        $this->_start_position = $value;
    }

    /**
     *  Get is_show_single(0 or 1).
     *
     * @return int
     */
    public function getIsShowSingle()
    {
        return $this->_is_show_single;
    }

    protected function setIsShowSingle($value)
    {
        $this->_is_show_single = $value;
    }

    /**
     *  Get notification last data id(int). (From $G_INPUT)
     *
     * @return int
     */
    public function getLastDataId()
    {
        return $this->_last_data_id;
    }

    protected function setLastDataId($value)
    {
        $this->_last_data_id = $value;
    }

    /**
     * @return bool
     */
    public function isRead()
    {
        return $this->isRead;
    }

    /**
     * @return bool
     */
    public function isToMe()
    {
        return $this->isToMe;
    }

    /**
     * @return bool          Space利用可能な場合にTRUE、それ以外でFALSEを返す
     */
    protected function getAvailableSpace()
    {
        require_once('space/GrnSpaceApplication.csp');

        return AppAccess::isAppAvailable(\GrnSpaceApplication::GRN_SPACE_APPLICATION_ID);
    }

    /**
     * @param string $module_id
     * @param \CB_TimeStamp() $last_time
     * @param string $add_condition
     */
    protected function setNotificationDataListForView(
        $module_id,
        $last_time = null,
        $add_condition = null
    ) {
        $logged_in_user = cb_get_login_user();
        $data_list = $this->getNotificationApp()->getDataListFast(
            $this->getDataType(), $logged_in_user, $module_id,
            'time', true, 0, $this->getNumberOnPage() + 1, null, $last_time,
            $add_condition, false, $this->isToMe()
        );

        $isExistsNextPage = count($data_list) > $this->getNumberOnPage();

        if ($isExistsNextPage) {
            array_pop($data_list);
        }

        // スペース情報を追加する
        if ($this->getAvailableSpace()) {
            $this->getNotificationApp()
                 ->addSpaceInfoForDataList($data_list, $this->getLoginUserId());
        }
        $this->setOtherUnreadNotificationInfo($data_list);

        if (Validate::isNull($module_id)) {
            $module_id = 0;
            $id_array = ['', 'all_data'];
        } else {
            $id_array = explode('.', $module_id);
        }
        if (count($data_list) > 0 && count($id_array) > 1) {
            $last_data = array_pop($data_list);
            $last_data_time = $last_data['timestamp']->unix_ts;
            $last_data_id = $last_data['id'];
            $data_list[$last_data_id] = $last_data;
            if ($module_id === GRN_SCHEDULE_MODULE_ID || $module_id === 0) {
                $this->modifyAbstractFieldForItemFacilityApprovalInvalid($data_list);
            }
            $this->_notification_data_list[$module_id] = [
                'label'      => $this->getAppInfos()[$module_id]['label'],
                'short_id'   => $id_array[1],
                'more'       => $isExistsNextPage,
                'sp'         => $last_data_time,
                'lastDataId' => $last_data_id,
                'list'       => $data_list
            ];
        }
    }

    public function getDataList()
    {
        return $this->_notification_data_list;
    }

    /***
     * The method modify data list and add new attribute in the case the facility approval invalid
     *
     * @param $data_list
     */
    private function modifyAbstractFieldForItemFacilityApprovalInvalid(
        &$data_list
    ) {
        require_once("schedule/eventfactory.csp");
        $eventFactory = \GRN_Schedule_EventFactory::getInstance();

        $facilityApprovalLogic = new FacilityApprovalLogic();
        $facilityLogic = new \GRN_Facility_SystemLogic();
        $loginUser = cb_get_login_user();

        $listEvent = [];
        $listFacility = [];

        foreach ($data_list as $key => $item) {
            if (array_key_exists('sub_module_id', $item)
                && $item['sub_module_id'] == 'grn.facility_approval'
            ) {
                $facilityId = $item['org_data']['faid'];
                $eventId = $item['org_data']['event'];

                if ( ! array_key_exists($eventId, $listEvent)) {
                    $normalEvent = $eventFactory->getEvent($eventId);
                    $listEvent[$eventId] = $normalEvent;
                } else {
                    $normalEvent = $listEvent[$eventId];
                }

                if ( ! array_key_exists($facilityId, $listFacility)) {
                    $facility = $facilityLogic->getFacility($facilityId);
                    $listFacility[$facilityId] = $facility;
                } else {
                    $facility = $listFacility[$facilityId];
                }

                $validateResult
                    = $facilityApprovalLogic->validateEventSupportFacilityApproval
                (
                    $normalEvent, $facility, $loginUser,
                    ['post' => false, 'reject' => false], true
                );

                if ($validateResult === false) {
                    $data_list[$key]['facility_approval_invalid'] = true;
                    $data_list[$key]['abstract']
                        = cb_msg('grn.schedule.operation',
                        'facility_approval_invalid');
                }

            }
        }

    }

    /**
     * @param $data_list    array( <notification_id> => array( ... ) )
     */
    public function setOtherUnreadNotificationInfo(& $data_list)
    {
        foreach ($data_list as $key => $item) {
            $id_array = explode('.', $item['module_id']);
            $subject_icon_css = 'mobile_icon_notifyother';
            if (is_array($id_array) && count($id_array) > 1) {
                if (strcasecmp($id_array[0], 'grn') == 0) {
                    $subject_icon_css = 'mobile_icon_app' . $id_array[1];
                    $sub_id_array = explode('.', $item['sub_module_id']);
                    if (is_array($sub_id_array) && count($sub_id_array) > 1
                        && (strcasecmp($sub_id_array[0], 'grn') == 0)
                    ) {
                        $subject_icon_css = $subject_icon_css
                                            . $sub_id_array[1];
                    }

                    $app_id = $id_array[1];
                    $app_full_id = substr($item['module_id'], 4);
                    $apps = $this->getAppsList()[0];
                    if (is_array($apps) && isset($apps[$app_id])) {
                        $unique_id = (array_key_exists('unique_id', $item))
                            ? $item['unique_id'] : null;
                        $org_data = (array_key_exists('org_data', $item))
                            ? $item['org_data'] : [];
                        $status = (array_key_exists('status', $item))
                            ? $item['status'] : null;
                        $action_id = (array_key_exists('action_id', $item))
                            ? $item['action_id'] : null;
                        $sub_module_id = (array_key_exists('sub_module_id',
                            $item)) ? $item['sub_module_id'] : '';
                        $logged_in_user = cb_get_login_user();
                        $page_info
                            = $apps[$app_id]->getNotificationPageInfo($logged_in_user,
                            $app_full_id, $unique_id,
                            $org_data, $status, $action_id, $sub_module_id);

                        if ("workflow" == $app_id) {
                            if (array_key_exists('url_params', $page_info)
                                && is_array($page_info['url_params'])
                                && (count($page_info['url_params']) > 0)
                            ) {
                                $data_list[$key]['org_data']
                                    = $page_info['url_params'];
                                $data_list[$key]['org_data']['nid']
                                    = $item['id'];
                                if (array_key_exists('priority', $org_data)
                                    && $org_data['priority'] == "1"
                                ) {
                                    $data_list[$key]['org_data']['priority']
                                        = '1';
                                } else {
                                    $data_list[$key]['org_data']['priority']
                                        = '0';
                                }
                            }
                        }

                        if (array_key_exists('isBlankDisplayAbstract',
                                $page_info)
                            && $page_info['isBlankDisplayAbstract']
                        ) {
                            $data_list[$key]['abstract'] = '';
                        }

                        if (cb_at($page_info, 'subject_fragment') == 'follow') {
                            $data_list[$key]['fragment'] = 'comment_top';
                        } else {
                            $data_list[$key]['fragment'] = null;
                        }
                    }
                } elseif (strcasecmp($id_array[0], 'x') == 0) {
                    require_once('mail/notification_mail.csp');
                    require_once('grn/rss.csp');
                    if (strcasecmp($item['subject_icon'],
                            GRN_MAIL_NOTTIFICATION_NOTIFY_ICON_DEZIE) == 0
                    ) {
                        $subject_icon_css = 'mobile_icon_notifydezie';
                    } elseif (strcasecmp($item['subject_icon'],
                            GRN_MAIL_NOTTIFICATION_NOTIFY_ICON_MAILWISE) == 0
                    ) {
                        $subject_icon_css = 'mobile_icon_notifymailwise';
                    } elseif (strcasecmp($item['subject_icon'],
                            GRN_MAIL_NOTTIFICATION_NOTIFY_ICON_COLLABOREX) == 0
                    ) {
                        $subject_icon_css = 'mobile_icon_notifycollaborex';
                    } elseif (strcasecmp($item['subject_icon'],
                            GRN_MAIL_NOTTIFICATION_NOTIFY_ICON_DOTSALES) == 0
                    ) {
                        $subject_icon_css = 'mobile_icon_notifydotsales';
                    } elseif (strcasecmp($item['subject_icon'],
                            GRN_MAIL_NOTTIFICATION_NOTIFY_ICON_BLOG) == 0
                    ) {
                        $subject_icon_css = 'mobile_icon_notifyblog';
                    } elseif (strcasecmp($item['subject_icon'],
                            GRN_RSS_CYBOZU_ICON) == 0
                    ) {
                        $subject_icon_css = 'mobile_icon_notifycybozu';
                    }
                }

                if ((strcasecmp($id_array[1], 'space') == 0)
                    || (strcasecmp($id_array[1], 'schedule') == 0)
                    || (strcasecmp($id_array[1], 'message') == 0)
                    || (strcasecmp($id_array[1], 'bulletin') == 0)
                    || (strcasecmp($id_array[1], 'mail') == 0)
                    || (strcasecmp($id_array[1], 'workflow') == 0)
                    || (strcasecmp($id_array[1], 'report') == 0)
                ) {
                    $data_list[$key]['has_mobile_view'] = true;
                } else {
                    $data_list[$key]['has_mobile_view'] = false;
                }

                if ((strcasecmp($id_array[1], 'workflow') == 0)
                    || (strcasecmp($id_array[1], 'phonemessage') == 0)
                ) {
                    $data_list[$key]['has_read_btn'] = false;
                } else {
                    $data_list[$key]['has_read_btn'] = true;
                }
            }
            $data_list[$key]['subject_icon_css'] = $subject_icon_css . 's_grn';

            if ($item['module_id'] == 'grn.schedule') {
                $new_event_start_ts = new \CB_TimeStamp();
                $new_event_start_ts->unix_ts = $item['event_start_ts'];
                $data_list[$key]['event_start_ts'] = $new_event_start_ts;
            }

            //Remove line breaks
            $data_list[$key]['abstract'] = str_replace(["\r", "\n", "\t"], ' ',
                $data_list[$key]['abstract']);
            if (mb_strwidth($data_list[$key]['abstract'])
                > self::ABSTRACT_MAX_LENGTH
            ) {
                $data_list[$key]['abstract']
                    = mb_strimwidth($data_list[$key]['abstract'], 0,
                        self::ABSTRACT_MAX_LENGTH) . '...';
            }

        }
    }

    public function getTitle()
    {
        return grn_get_page_display_name('notification/index');
    }
}
