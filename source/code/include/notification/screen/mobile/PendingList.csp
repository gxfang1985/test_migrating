<?php

namespace grn\notification\screen\mobile;

require_once('fw/basic_date.csp');
require_once('mail/utility.csp');

class PendingList extends MobileNotificationScreenBase
{
    public function ajaxFetch()
    {
        require_once('grn/smarty.csp');
        $smarty = new \GRN_Smarty();

        $this->checkArgFromInput([
            self::ARG_MODULE_ID,
            self::ARG_START_POSITION,
            self::ARG_IS_SHOW_SINGLE,
            self::ARG_LAST_DATA_ID
        ], $this->getInput());

        // 表示するデータ種別
        $this->setDataType('whatsnew');

        // 通知アプリ取得
        $this->setNotificationApp();

        // 通知更新処理対応アプリケーションの更新処理呼び出し
        $logged_in_user = cb_get_login_user();
        $this->getNotificationApp()->updateApplications($logged_in_user, true);

        // 通知対応アプリ列挙
        $this->setAppsList();

        // 通知データリストの取得
        if ( ! is_null($this->getLastDataId())) {
            $last_time = null;
            if ($this->getStartPosition()) {
                $last_time = new \CB_TimeStamp();
                $last_time->unix_ts = $this->getStartPosition() + 1;
            }

            global $G_container_base;
            $db = $G_container_base->getInstance('dbconn');

            $add_condition = cb_queryf($db, "n.col_timestamp = '@S'",
                $this->getStartPosition());
            $logged_in_user = cb_get_login_user();
            $data_list = $this->getNotificationApp()->getDataListFast(
                $this->getDataType(), $logged_in_user, $this->getModuleId(),
                'time', true, 0, -1, null, $last_time, $add_condition, false
            );

            $had_show_ids = [];
            foreach (array_keys($data_list) as $key) {
                if ($key >= $this->getLastDataId()) {
                    $had_show_ids[] = $key;
                }
            }
            $add_condition = cb_queryf($db, "n._id NOT IN (@A)", $had_show_ids);

            if (count($data_list) > 0) {
                $this->getSingleNotificationData($last_time, $add_condition);
            } else {
                $this->getSingleNotificationData($last_time);
            }
        }

        $this->setUsersInfo($this->getDataList());

        $smarty->assign('data_list', $this->getDataList());
        $smarty->assign('users_info', $this->getUsersInfo());
        $smarty->assign('uid', $this->getLoginUserId());

        return $smarty->fetch('notification/mobile/ajax/more_notification_list.tpl');
    }

    public function ajaxConfirmNotification()
    {
        $this->checkArgFromInput([self::ARG_NOTIFICATION_ID, self::ARG_IS_TO_ME], $this->getInput());

        $this->setNotificationApp();

        $notification_id_array = [];
        $notification_id_array[] = $this->getNotificationId();
        $logged_in_user = cb_get_login_user();
        $this->getNotificationApp()
             ->confirmDatas($logged_in_user, $notification_id_array, $this->isToMe());

        return true;
    }

    public function getSingleNotificationData(
        $last_time = null,
        $add_condition = null
    ) {
        $this->setNotificationDataListForView($this->getModuleId(), $last_time,
            $add_condition);
    }
}
