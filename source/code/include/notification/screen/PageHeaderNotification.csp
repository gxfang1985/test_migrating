<?php

namespace grn\notification\screen;

use grn\grn\access\service\AppAccess;
use GRN_ApplicationLocator;
use GRN_ControllerUtil;
use CB_SessionManager;
use GRN_UIConfigManager;
use GRN_Smarty;

require_once("grn/smarty.csp");
require_once("notification/application.csp");
require_once('space/GrnSpaceApplication.csp');
require_once("grn/controller.csp");
require_once("grn/ui.csp");
require_once('fw/session_manager.csp');
require_once('mail/utility.csp');

class PageHeaderNotification
{
    CONST SESSION_ID = "notification_header_view";
    CONST MAX_NOTIFICATION_ITEM = 20;
    private $isRead = false;
    private $isToMe = false;
    private $isJson = false;

    public function __construct(array $input = [])
    {
        global $G_state_set;
        $G_state_set->set('copyright_should_be_written', false);
        $G_state_set->set('html_should_be_closed', false);
        $G_state_set->set('error_page_type', 'json');

        $sm = \CB_SessionManager::getInstance();
        $session = $sm->getSession(self::SESSION_ID);
        $is_read = $session->get('isRead');
        $is_to_me = $session->get('isToMe');

        if (isset($input['read'])) {
            $this->isRead = intval($input['read']) == 1 ? true : false;
        } elseif ($is_read !== null) {
            $this->isRead = $is_read;
        }

        if (isset($input['is_to_me'])) {
            $this->isToMe = intval($input['is_to_me']) == 1 ? true : false;
        } elseif ($is_to_me !== null) {
            $this->isToMe = $is_to_me;
        }

        $session->set('isRead', $this->isRead);
        $session->set('isToMe', $this->isToMe);

        if (isset($input['is_json'])) {
            $this->isJson = intval($input['is_json']) == 1 ? true : false;
        }
    }

    public function isRead()
    {
        return $this->isRead;
    }

    public function isToMe()
    {
        return $this->isToMe;
    }

    public function isJson()
    {
        return $this->isJson;
    }

    /**
     * Get Total unread notification
     *
     * @param string $module_id Module ID
     * @param bool   $is_to_me  Filter by category "To me" or not. By default, "To me" notification is not filtered
     *
     * @return int
     */
    public function getTotalUnread(
        string $module_id = null,
        bool $is_to_me = false
    ) {
        $login = cb_lwc_uum()->getLoginUser();
        $limit = GRN_NOTIFICATION_WHATSNEW_DATA_LIMIT;

        return $this->getNotificationApp()
                    ->getWhatsNewDataCount($login, $module_id, $limit,
                        $is_to_me);
    }

    /**
     * Get portlet Data Screen for Unread notification
     *
     * @param string $template_name template name in folder notification/ajax
     *
     * @return array
     */
    public function getNotification(string $template_name = 'page_header'
    ): array {
        $login = cb_lwc_uum()->getLoginUser();
        $t = new GRN_Smarty();
        $notification_app = $this->getNotificationApp();

        if ($notification_app == null) {
            return [
                'content'            => '',
                'total_unread_to_me' => 0,
                'total_unread_all'   => 0
            ];
        }

        // GRN2-3902
        $available_space
            = AppAccess::isAppAvailableInternalAccess(\GrnSpaceApplication::GRN_SPACE_APPLICATION_ID);
        $t->assign('available_space', $available_space);

        $controller_util = new GRN_ControllerUtil();
        $current_start_position = $controller_util->getNaviStartPosition();

        $notification_app->updateApplications($login, true);
        $data_list = $this->getDataList($current_start_position,
            self::MAX_NOTIFICATION_ITEM + 1);
        if ($available_space) {
            $notification_app->addSpaceInfoForDataList($data_list,
                $login->getOID());
        }

        $flag_more = false;

        //GRN2-3997
        $apps = $notification_app->getApplicationList(false);

        //GRN2-3954
        foreach ($data_list as $key => $item) {
            $id_array = explode('.',
                $item['module_id']);
            $subject_icon = null;
            $data_list[$key]['subject_icon_alt'] = ''; //Default alt value.

            if (is_array($id_array)
                && (strcasecmp($id_array[0], 'grn') === 0)
            ) {
                if (count($id_array) > 1) {
                    $app_id = $id_array[1];
                    $app_full_id = substr($item['module_id'], 4);
                    if (is_array($apps) && isset($apps[$app_id])) {
                        $unique_id = array_key_exists('unique_id', $item)
                            ? $item['unique_id'] : null;
                        $org_data = array_key_exists('org_data', $item)
                            ? $item['org_data'] : null;
                        $status = array_key_exists('status', $item)
                            ? $item['status'] : null;
                        $action_id = array_key_exists('action_id', $item)
                            ? $item['action_id'] : null;
                        $sub_module_id = array_key_exists('sub_module_id',
                            $item) ? $item['sub_module_id'] : '';
                        $page_info = $apps[$app_id]
                            ->getNotificationPageInfo($login, $app_full_id,
                                $unique_id, $org_data, $status, $action_id,
                                $sub_module_id);
                        if ($app_id == "workflow") {
                            if (is_array($apps) && isset($apps[$app_id])) {
                                if (array_key_exists('url_params', $page_info)
                                    && is_array($page_info['url_params'])
                                    && (count($page_info['url_params']) > 0)
                                ) {
                                    $data_list[$key]['org_data']
                                        = $page_info['url_params'];
                                    $data_list[$key]['org_data']['nid']
                                        = $item['id'];
                                }
                            }
                        }
                        if (array_key_exists('isBlankDisplayAbstract',
                                $page_info)
                            && $page_info['isBlankDisplayAbstract']
                        ) {
                            $data_list[$key]['abstract'] = '';
                        }
                        if (isset($page_info['subject_page'])
                            && isset($page_info['subject_icon'])
                        ) {
                            if (strcmp(strrchr($page_info['subject_icon'], "/"),
                                    "") != 0
                            ) {
                                $subject_icon
                                    = substr(strrchr($page_info['subject_icon'],
                                    "/"), 1);
                            } else {
                                $subject_icon = $page_info['subject_icon'];
                            }
                            $data_list[$key]['subject_icon_alt']
                                = $apps[$app_id]->getName();
                        }
                    }

                }
            }

            if (is_null($subject_icon)) {
                $subject_icon = 'spacer20';
            }

            $image = null;
            $image_direct = false;
            if (isset($data_list[$key]['subject_icon'])
                && is_string($data_list[$key]['subject_icon'])
                && 0 < strlen($data_list[$key]['subject_icon'])
            ) {
                $parsed_url = parse_url($data_list[$key]['subject_icon']);
                if (array_key_exists('scheme', $parsed_url)) {
                    $subject_icon = null;
                    if ('http' == $parsed_url['scheme']
                        || 'https' == $parsed_url['scheme']
                    ) {
                        $image
                            = htmlspecialchars($data_list[$key]['subject_icon']);
                        $image_direct = true;
                    }
                } else {
                    $subject_icon
                        = htmlspecialchars($data_list[$key]['subject_icon']);
                }
            }
            if (substr($subject_icon, -3, 3) == "png") {
                $data_list[$key]['subject_icon'] = $image ? $image
                    : "{$subject_icon}";
            } else {
                $data_list[$key]['subject_icon'] = $image ? $image
                    : "{$subject_icon}.gif";
            }

            $data_list[$key]['image_direct'] = $image_direct;

            $parsed_url = parse_url($data_list[$key]['subject_url']);
            if ($this->isRead()
                && isset($parsed_url['scheme'])
                && ('http' == $parsed_url['scheme']
                    || 'https' == $parsed_url['scheme'])
            ) {
                $data_list[$key]['url_direct']
                    = htmlspecialchars($data_list[$key]['subject_url']);
            }
        }
        //GRN2-3954
        //GRN2-3997
        if (count($data_list) > self::MAX_NOTIFICATION_ITEM) {
            $flag_more = true;
            $i = 0;
            $data_list_temp = [];
            foreach ($data_list as $key => $item) {
                if ($i < self::MAX_NOTIFICATION_ITEM) {
                    $data_list_temp[$key] = $item;
                }
                $i = $i + 1;
            }
            $data_list = $data_list_temp;
        }

        $session_manager = CB_SessionManager::getInstance();
        $session = $session_manager->getSession('notification');

        $total_unread_to_me = $this->getTotalUnread(null, true);
        $total_unread_all = $this->getTotalUnread(null, false);

        //GRN35-838
        $session->set('notification_number', $total_unread_all);

        $t->assign('data', $data_list);
        $t->assign('uid', $login->getOID());

        //GRN2-4024
        $ui_config_manager = GRN_UIConfigManager::getInstance();
        $ui_config = $ui_config_manager->getUserConfig($login);
        $subject_cols = $ui_config->getSubjectWidth();
        $name_cols = $ui_config->getNameWidth();
        $t->assign(
            'characters', [
                'subject' => $subject_cols,
                'name'    => $name_cols
            ]
        );
        $data_notification = [
            'isToMe'          => $this->isToMe(),
            'isRead'          => $this->isRead(),
            'totalUnreadToMe' => $total_unread_to_me,
            'totalUnreadAll'  => $total_unread_all,
            'hasMore'         => $flag_more,
            'hasNotification' => $data_list ? true : false,
            'maxItem'         => self::MAX_NOTIFICATION_ITEM,
        ];

        $t->assign('data_notification', $data_notification);
        $t->assign('notification_app_name', $notification_app->getName());
        $doc_name = 'notification/ajax/' . $template_name . '.tpl';

        $data_notification['content'] = $t->fetch($doc_name);

        return $data_notification;
    }

    /**
     * Get notification app instance
     *
     * @return \GRN_Notification_App
     */
    private function getNotificationApp()
    {
        $app_locator = GRN_ApplicationLocator::instance();
        $notification_app = $app_locator->getInstance(GRN_NOTIFICATION_APP_ID);

        return $notification_app;
    }

    /**
     * Get Notification by module ID with limit item
     *
     * @param int $offset
     * @param int $limit
     *
     * @return mixed
     */
    private function getDataList(int $offset, int $limit)
    {
        $notification_app = $this->getNotificationApp();
        $login = cb_lwc_uum()->getLoginUser();
        $is_to_me = $this->isToMe();
        $data_type = $this->isRead() ? 'history' : 'whatsnew';
        $data_list = $notification_app->getDataListFast(
            $data_type, $login, null, 'time', true, $offset, $limit, null, null,
            null, true, $is_to_me
        );

        return $data_list;
    }
}
