<?php
declare(strict_types=1);

namespace grn\notification\screen;

require_once('portal/error_code.csp');
require_once("grn/smarty.csp");
require_once('SmartyValidate.class.php');
require_once 'fw/i18n.csp';
require_once('notification/application.csp');

use grn\grn\access\utility\AppAvailabilityUtil;
use grn\grn\access\service\AppAccess;
use GRN_Smarty;
use SmartyValidate;
use GRN_ApplicationLocator;
use GRN_ControllerUtil;

class NotificationList
{
    private $isRead = false;
    private $isToMe = false;
    private $moduleId;
    private $dataType;
    private $sort;
    private $reverse;
    private $input;

    public function __construct($input)
    {
        $this->setInput($input);
        $this->setSetting($input);
    }

    public function getInput(): array
    {
        return $this->input;
    }

    public function setInput(array $input)
    {
        $this->input = $input;
    }

    public function getRead(): bool
    {
        return $this->isRead;
    }

    public function setRead(bool $value)
    {
        $this->isRead = $value;
    }

    public function getIsToMe(): bool
    {
        return $this->isToMe;
    }

    public function setIsToMe(bool $value)
    {
        $this->isToMe = $value;
    }

    public function getModuleId()
    {
        return $this->moduleId;
    }

    public function setModuleId(string $value)
    {
        $this->moduleId = $value;
    }

    public function getDataType()
    {
        return $this->dataType;
    }

    public function setDataType(string $value)
    {
        $this->dataType = $value;
    }

    public function getSort()
    {
        return $this->sort;
    }

    public function setSort(string $value)
    {
        $this->sort = $value;
    }

    public function getReverse()
    {
        return $this->reverse;
    }

    public function setReverse(bool $value)
    {
        $this->reverse = $value;
    }

    /**
     * Set user selection setting
     *
     * @param array $input
     */
    public function setSetting(array $input = [])
    {
        $input = $this->getInput();

        if (isset($input['read'])) {
            $this->setRead(intval($input['read']) === 1);
        }

        if (isset($input['is_to_me'])) {
            $this->setIsToMe(intval($input['is_to_me']) === 1);
        }

        if ( ! empty($input['module_id'])) {
            $this->setModuleId($input['module_id']);
        }

        if (isset($input['data_type'])) {
            $this->setDataType($input['data_type']);
        }

        if ( ! empty($input['sort'])) {
            $this->setSort($input['sort']);
        }

        if (isset($input['reverse'])) {
            $reverse = intval($input['reverse']);
            if ($reverse === 1 || $reverse === 0) {
                $this->setReverse(boolval($reverse));
            }
        }
    }

    /**
     * Get portlet Data Screen for Unread notification
     *
     * @param string $data_type     accepts three values
     *                              notify: GRN_NOTIFICATION_DATA_TYPE_NOTIFY
     *                              history: GRN_NOTIFICATION_DATA_TYPE_HISTORY
     *                              whatsnew: GRN_NOTIFICATION_DATA_TYPE_WHATSNEW
     * @param string $template_name template name in folder notification
     *
     * @return array
     */
    public function getNotificationList(
        $data_type,
        string $template_name
    ): array {
        /** @var \CB_User $login */
        $login = cb_lwc_uum()->getLoginUser();
        if ( ! is_object($login)) {
            cb_throw_error(E_COMMON_ACCOUNT_INVALIDATED);
        }

        $notification_service = \GRN_Notification_Service::getInstance();
        if (is_null($notification_service)) {
            cb_throw_error(E_GRN_CMMN_NTFC_NOT_AVAILABLE);
        }

        $notification_app = $this->getNotificationApp();
        $notification_app->updateApplications($login, true);

        $service_personal_config
            = $notification_service->getPersonalConfig($login);
        $personal_config = $notification_app->getPersonalConfig($login);

        $module_id = $this->getModuleId();
        $sort = $this->getSort();
        $reverse = $this->getReverse();
        if ($sort !== null || $reverse !== null) {
            $personal_config->setSortCondition($data_type, $sort, $reverse);
        } else {
            $personal_config->getSortCondition($data_type, $sort, $reverse);
        }

        $ui_config_manager = \GRN_UIConfigManager::getInstance();
        $ui_user_config = $ui_config_manager->getUserConfig($login);
        $number_on_page = $ui_user_config->getListMax();
        $personal_config->getMaxLength($subject_cols, $abstract_cols,
            $name_cols, $space_cols);

        $savedays = null;
        $result = $service_personal_config->getSaveDays($data_type,
            $savedays);
        if ($result !== true) {
            cb_throw_error(E_GRN_CMMN_NTFC_FAILED_TO_GET_PROFILE_DATA);
        }

        $delete_unread = null;
        if ($data_type !== GRN_NOTIFICATION_DATA_TYPE_HISTORY) {
            $delete_unread = $service_personal_config->getDeleteUnread();
        }

        require_once("grn/controller.csp");
        $controller_util = new GRN_ControllerUtil("notification/index");
        $current_start_position = $controller_util->getNaviStartPosition();
        $controller_util->setNaviStartPosition($current_start_position);
        $data_list = $notification_app->getDataListFast($data_type, $login,
            $module_id, $sort,
            $reverse, $current_start_position, $number_on_page + 1, null, null,
            null, true, $this->getIsToMe());

        require_once('space/GrnSpaceApplication.csp');
        $available_space
            = AppAccess::isAppAvailableInternalAccess(\GrnSpaceApplication::GRN_SPACE_APPLICATION_ID);

        $is_exists_next_page = count($data_list) > $number_on_page;
        if ($is_exists_next_page) {
            array_pop($data_list);
        }

        if ($available_space) {
            $notification_app->addSpaceInfoForDataList($data_list,
                $login->getOID());
        }

        $users_id = [];
        $applications_id = [];
        foreach ($data_list as $d) {
            $user_id = cb_at($d, 'sender_id');
            if ($user_id) {
                $users_id[] = $user_id;
            }
            preg_match("/^grn.(.*)/i", $d['module_id'], $matches);//GRB-15046
            if (count($matches) > 0) {
                $applications_id[] = $matches[1];
            }
        }
        $users_id = array_unique($users_id);
        $app_ids_unique
            = array_intersect(AppAvailabilityUtil::getAppIdsSupportPrivilege(),
            array_unique($applications_id));
        $availability_user_ids_apps
            = AppAccess::getAvailabilityAppIdsInternalByUserIds($users_id,
            $app_ids_unique);

        require_once("grn/controller.csp");
        $users_info = GRN_ControllerUtil::getUserInfoToShowUserName($users_id,
            $login);
        foreach ($users_info as $user_info) {
            $user_id = $user_info['_id'];
            $users_info[$user_id]['col_using_apps']
                = $availability_user_ids_apps[$user_id];
        }

        $params = ['module_id' => $module_id];
        if (isset($category_id)) {
            $params['cid'] = $category_id;
        }

        $pagination_info
            = $controller_util->makePaginationInfoForJS($current_start_position,
            $number_on_page, count($data_list), $is_exists_next_page, $params);
        $personal_config->getMaxLength($subject_cols, $abstract_cols,
            $name_cols, $space_cols);
        $total_unread_to_me = $notification_app->getWhatsNewDataCount($login,
            $module_id, GRN_NOTIFICATION_WHATSNEW_DATA_LIMIT, true);
        $total_unread_all
            = $notification_app->getWhatsNewDataCount($login,
            $module_id);
        $show_no_notification_message = false;
        $show_has_unread_all = false;
        if ( ! $this->getRead()) {
            if ( ! $total_unread_all) {
                $show_no_notification_message = true;
            } elseif ($this->getIsToMe() && ! $total_unread_to_me) {
                $show_no_notification_message = true;
                $show_has_unread_all = true;
            }
        }

        //Get Smarty Instance
        $t = new GRN_Smarty;
        $t->assign(
            'notify_list', [
                'pagination_info' => $pagination_info,
                'data_list'       => $data_list
            ]
        );
        $t->assign('module_id', $module_id);
        $t->assign('sort', $sort);
        $t->assign('reverse', $reverse);
        $t->assign('savedays', $savedays);
        $t->assign('delete_unread', $delete_unread);
        $t->assign('users_info', $users_info);
        $t->assign('subject_cols', $subject_cols);
        $t->assign('abstract_cols', $abstract_cols);
        $t->assign('name_cols', $name_cols);
        $t->assign('space_cols', $space_cols);
        $t->assign('available_space', $available_space);
        $t->assign('total_unread_to_me', $total_unread_to_me);
        $t->assign('total_unread_all', $total_unread_all);
        $t->assign('is_to_me', $this->getIsToMe());
        $t->assign('is_read', $this->getRead());
        $t->assign('data_type', $data_type);
        $t->assign('form_name', 'notification/index');
        $t->assign('show_no_notification_message',
            $show_no_notification_message);
        $t->assign('show_has_unread_all', $show_has_unread_all);
        $t->skipWarning();

        $doc_name = 'notification/' . $template_name . '.tpl';

        return [
            'content'         => $t->fetch($doc_name),
            'totalUnreadToMe' => $total_unread_to_me,
            'totalUnreadAll'  => $total_unread_all,
            'paginationInfo'  => $pagination_info
        ];
    }

    /**
     * Get Data of notification
     *
     * @return array
     */
    public function getHTML(): array
    {
        if ($this->getRead()) {
            return $this->getNotificationList(GRN_NOTIFICATION_DATA_TYPE_HISTORY,
                '_notification_list');
        }

        return $this->getNotificationList(GRN_NOTIFICATION_DATA_TYPE_WHATSNEW,
            '_notification_list');
    }

    /**
     * Get notification app instance
     *
     * @return \GRN_Notification_App
     */
    private function getNotificationApp()
    {
        $app_locator = GRN_ApplicationLocator::instance();
        $notification_app = $app_locator->getInstance(GRN_NOTIFICATION_APP_ID);
        if (is_null($notification_app)) {
            cb_throw_error(E_GRN_NTFC_NOT_AVAILABLE);
        }

        return $notification_app;
    }

    /**
     * @param array $input
     */
    public function post($input)
    {
        $notification_app = $this->getNotificationApp();
        /** @var \CB_User $login */
        $login = cb_lwc_uum()->getLoginUser();
        if ( ! is_object($login)) {
            cb_throw_error(E_COMMON_ACCOUNT_INVALIDATED);
        }

        $notification = $input['notification'];
        if (is_array($notification) && (count($notification) > 0)) {
            $is_to_me = isset($input['is_to_me']) ? boolval($input['is_to_me'])
                : false;
            $notification_app->confirmDatas($login, $notification, $is_to_me);
        }
    }
}
