<?php

/**
 * 通知アプリシステムロジック
 *
 * @package grn.notification
 * @author  Ikeda, ATSUSHI 2004/11
 * @version 1.0
 */

require_once('fw/uum_core.csp');
require_once('fw/module.csp');
require_once('notification/resources.csp');

//////////////////////////////////////////////////////////////////////////////

/**
 * 通知アプリシステムロジック
 *
 * @author  IKEDA, Atsushi 2004/11
 * @version 1.0
 * @package grn.notification
 */
class GRN_Notification_SystemConfig extends CB_ModuleBase
{
    private static $_instance = null;

    /**
     * Return singleton.
     *
     * @return GRN_Notification_SystemConfig
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    function __construct()
    {
        parent::__construct(GRN_NOTIFICATION_SYSTEM_MODULE_ID);
    }

    //////////////////////////////////////////////////////////////////////////
    // メンバ変数

    //////////////////////////////////////////////////////////////////////////
    // private method

    /**
     * ユーザープロファイルを更新
     *
     * @access private
     * @return boolean
     */
    function _updateProfile(& $profile, $name, $value)
    {
        if (is_null($profile)) {
            // データ不正
            cb_throw_error(E_GRN_NTFC_FAILED_TO_UPDATE_PROFILE_DATA);
        }

        $old_value = null;
        if ( ! $profile->getAttribute($name, $old_value)) {
            // 見つからない場合は追加
            if ( ! $profile->createAttribute($name, $value)) {
                // プロファイルデータ更新失敗
                cb_throw_error(E_GRN_NTFC_FAILED_TO_UPDATE_PROFILE_DATA);
            }
        } else {
            // 見つかった場合は更新
            if ( ! $profile->updateAttribute($name, $value)) {
                // プロファイルデータ更新失敗
                cb_throw_error(E_GRN_NTFC_FAILED_TO_UPDATE_PROFILE_DATA);
            }
        }
        {
            $___ret = true;

            return $___ret;
        }
    }

    //////////////////////////////////////////////////////////////////////////
    // public method

    /**
     * 最新情報ポートレットの強制設定を保存
     *
     * @param   string  $module_id    モジュールID
     * @param   boolean $set          設定するフラグ
     * @param   string  $display_type 表示する形式
     *
     * @return  boolean 成否
     */
    function setWhatsNewPortletForceSetting($module_id, $set, $display_type)
    {
        // 通知アプリのシステムプロファイルを取得する
        $profile =& $this->getSystemProfile();
        if (is_null($profile)) {
            // プロファイルデータ更新失敗
            cb_throw_error(E_GRN_NTFC_FAILED_TO_UPDATE_PROFILE_DATA);
        }

        if (is_null($module_id)) {
            // データ不正
            assert('FALSE');

            return false;
        }

        if (is_null($set)) {
            $set = false;
        }
        if (is_null($display_type)) {
            $display_type = 'index';
        }

        // 設定の保存
        $name = 'whatsnew_portlet.force.set:' . $module_id;
        if ( ! $this->_updateProfile($profile, $name, $set)) {
            // プロファイルデータ更新失敗
            cb_throw_error(E_GRN_NTFC_FAILED_TO_UPDATE_PROFILE_DATA);
        }

        $name = 'whatsnew_portlet.force.display_type:' . $module_id;
        if ( ! $this->_updateProfile($profile, $name, $display_type)) {
            // プロファイルデータ更新失敗
            cb_throw_error(E_GRN_NTFC_FAILED_TO_UPDATE_PROFILE_DATA);
        }

        return true;
    }

    /**
     * 最新情報ポートレットの強制設定を取得
     *
     * @param   string $module_id モジュールID
     * @param   array  $settings  最新情報ポートレットのデフォルト設定を受け取るモジュールIDがキーの配列
     *
     * @return  boolean 成否
     */
    function getWhatsNewPortletForceSetting($module_id, & $setting)
    {
        $setting = [];

        // 通知アプリのシステムプロファイルを取得する
        $profile = $this->getSystemProfile();
        if (is_null($profile)) {
            // まだ設定されていない
            $setting['set'] = false;
            $setting['display_type'] = null;

            return true;
        }

        // 設定の取得

        // 設定するフラグ
        $value = null;
        $name = 'whatsnew_portlet.force.set:' . $module_id;
        if ( ! $profile->getAttribute($name, $value)) {
            // デフォルト
            $value = false;
        }
        $setting['set'] = $value;

        // 表示する形式
        $value = null;
        $name = 'whatsnew_portlet.force.display_type:' . $module_id;
        if ( ! $profile->getAttribute($name, $value)) {
            // デフォルト
            $value = null;
        }
        $setting['display_type'] = $value;

        return true;
    }

    /**
     * システムプロファイルに保存
     *
     * @param   string $name  属性名
     * @param   mixed  $value 属性値
     *
     * @return  boolean  成否
     */
    function _setProfile($name, $value)
    {
        // 通知アプリのシステムプロファイルを取得する
        $profile = $this->getSystemProfile();
        if (is_null($profile)) {
            cb_throw_error(E_GRN_CMMN_NTFC_FAILED_TO_UPDATE_PROFILE_DATA);
        }

        // システムプロファイルに設定を保存する
        if ( ! $this->_updateProfile($profile, $name, $value)) {
            cb_throw_error(E_GRN_CMMN_NTFC_FAILED_TO_UPDATE_PROFILE_DATA);
        }

        return true;
    }

    /**
     * システムプロファイルから取得
     *
     * @param   string $name  属性名
     * @param   mixed  $value 属性値
     *
     * @return  boolean  成否
     */
    function _getProfile($name, & $value)
    {
        // システムプロファイルから設定を取得する
        $profile = $this->getSystemProfile();
        if (is_null($profile)) {
            $ret = true;

            return $ret;
        }

        $tmp = null;
        if ($profile->getAttribute($name, $tmp)) {
            $value = $tmp;
        }

        $ret = true;

        return $ret;
    }

    /**
     * 最新情報ポートレットの表示しない項目の初期選択値を保存
     *
     * @param   array $not_display_items 表示しない項目の初期選択値
     *
     * @return  boolean  成否
     */
    function setWhatsNewPortletNotDisplayItems($not_display_items)
    {
        $name = 'whatsnew_portlet.not_display_items';

        return $this->_setProfile($name, $not_display_items);
    }

    /**
     * 最新情報ポートレットの表示しない項目の初期選択値を取得
     *
     * @param   array $not_display_items 表示しない項目の初期選択値
     *
     * @return  boolean  成否
     */
    function getWhatsNewPortletNotDisplayItems(& $not_display_items)
    {
        $name = 'whatsnew_portlet.not_display_items';
        $not_display_items = [];

        return $this->_getProfile($name, $not_display_items);
    }

    /**
     * 最新情報ポートレットの表示の初期選択値を保存する
     *
     * @param   string $module_id モジュールID
     * @param   array  $setting   表示の初期選択値
     *
     * @return  boolean 成否
     */
    function setWhatsNewPortletDisplaySetting($module_id, $setting)
    {
        assert('! is_null( $module_id ) && 0 < strlen( $module_id )');

        $name = 'whatsnew_portlet.display_settings:' . $module_id;

        return $this->_setProfile($name, $setting);
    }

    /**
     * 最新情報ポートレットの表示の初期選択値を取得する
     *
     * @param   string $module_id モジュールID
     * @param   array  $setting   表示の初期選択値
     *
     * @return  boolean 成否
     */
    function getWhatsNewPortletDisplaySetting($module_id, & $setting)
    {
        assert('! is_null( $module_id ) && 0 < strlen( $module_id )');

        $name = 'whatsnew_portlet.display_settings:' . $module_id;
        $setting = ['count' => 5];

        return $this->_getProfile($name, $setting);
    }

    /**
     * 通知履歴ポートレットの表示しない項目の初期選択値の設定を保存
     *
     * @param   array $not_display_items 表示しない項目の初期選択値
     *
     * @return  boolean  成否
     */
    function setHistoryPortletNotDisplayItems($not_display_items)
    {
        $name = 'history_portlet.not_display_items';

        return $this->_setProfile($name, $not_display_items);
    }

    /**
     * 通知履歴ポートレットの表示しない項目の初期選択値の設定を取得
     *
     * @param   array $not_display_items 表示しない項目の初期選択値
     *
     * @return  boolean  成否
     */
    function getHistoryPortletNotDisplayItems(& $not_display_items)
    {
        $name = 'history_portlet.not_display_items';
        $not_display_items = [];

        return $this->_getProfile($name, $not_display_items);
    }

    /**
     * 通知履歴ポートレットの表示の初期選択値を保存する
     *
     * @param   array $setting 表示の初期選択値
     *
     * @return  boolean 成否
     */
    function setHistoryPortletDisplaySetting($setting)
    {
        $name = 'history_portlet.display_settings';

        return $this->_setProfile($name, $setting);
    }

    /**
     * 通知履歴ポートレットの表示の初期選択値を取得する
     *
     * @param   array $setting 表示の初期選択値
     *
     * @return  boolean 成否
     */
    function getHistoryPortletDisplaySetting(& $setting)
    {
        $name = 'history_portlet.display_settings';
        $setting = ['count' => 5];

        return $this->_getProfile($name, $setting);
    }

    /**
     * 一覧に表示する件数を取得
     *
     * @param   int $rows 表示する件数を受け取る
     *
     * @return  boolean 成否
     */
    function getNumberOfDisplay(& $rows)
    {
        $rows = 20;

        return true;
    }

    /**
     * 外部アプリケーション設定を保存する
     *
     * @param   array $setting 表示の初期選択値
     *
     * @return  boolean 成否
     */
    function setOutsideApplicationSetting($setting)
    {
        $name = 'outside_app.settings';

        return $this->_setProfile($name, $setting);
    }

    /**
     * 外部アプリケーション設定を取得する
     *
     * @param   array $setting 表示の初期選択値
     *
     * @return  boolean 成否
     */
    function getOutsideApplicationSetting(& $setting)
    {
        $name = 'outside_app.settings';
        $setting = ['is_receive' => false];

        return $this->_getProfile($name, $setting);
    }

}


