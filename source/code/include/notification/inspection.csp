<?php

/**
 * Inspection for Notification.
 *
 * @author  YOSHIDA, Hideyasu 2005/05
 * @version 1.0
 * @package grn.notification
 */

require_once('notification/error_code.csp');
require_once('notification/resources.csp');

class GRN_Notification_Inspection extends CB_ModuleBase
{
    private static $_instance = null;

    /**
     * シングルトンを取得する
     *
     * @return GRN_Notification_Inspection
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * @access private
     */
    var $_logger = null;
    /**
     * @access private
     */
    var $_uum = null;

    /**
     * コンストラクタ
     */
    function __construct()
    {
        parent::__construct(GRN_NOTIFICATION_MODULE_ID);

        // ロガーを取得する
        require_once('grn/logger.csp');
        $logger_manager = CB_LoggerManager::getInstance();
        $this->_logger =& $logger_manager->getLogger($this->getModuleId());

        // UUMを取得する
        global $G_container_base;
        $this->_uum =& $G_container_base->getInstance('uum');
    }

    /**
     * 監査できるか判定する
     */
    function isEnabled()
    {
        return $this->_logger->isNoticeEnabled();
    }

    function _getInspectionMessage(
        $action,
        $target,
        $params = [],
        $informations = []
    ) {
        $temp = [];
        if (is_array($params)) {
            foreach ($params as $key => $value) {
                $temp[] = $key . ':' . $value;
            }
        }

        $messages = [];
        if (0 < count($temp)) {
            $messages[] = implode(', ', $temp);
        }

        $temp = [];
        if (is_array($informations)) {
            foreach ($informations as $key => $value) {
                $temp[] = $key . ':' . $value;
            }
        }

        if (0 < count($temp)) {
            $messages[] = implode(', ', $temp);
        }

        $message = sprintf('[%s] %s ', $action, $target);
        if (0 < count($messages)) {
            $message .= '(' . implode(', ', $messages) . ')';
        }

        return $message;
    }

    /**
     * 監査を記録する
     */
    function record($action, $target, $params = [], $informations = [])
    {
        if ( ! is_array($params)) {
            $params = (array)$params;
        }
        $information_list = array_merge($params, $informations);
        $this->_logger->noticeEx($action, $target, $information_list);
    }
}


