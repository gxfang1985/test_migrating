<?php

use grn\space\data\condition\SpaceSearchCondition;
use grn\space\data\collection\SpaceCollection;
use grn\space\service\SpaceService;
use grn\space\common\utility\IconUtility;
use grn\space\common\data\bean\Authority;
use grn\grn\access\service\AppAccess;
use grn\grn\access\utility\AppAvailabilityUtil;
use grn\fw\DistributorDBConvert;

/**
 * 通知アプリケーションロジック
 *
 * @package grn.notification
 * @author  Ikeda, ATSUSHI 2004/11
 * @version 1.0
 */
require_once('fw/uum_core.csp');
require_once('grn/application.csp');
require_once('grn/notification.csp');
require_once('grn/outside_application.csp');
require_once('notification/error_code.csp');
require_once('notification/resources.csp');
require_once('space/GrnSpaceApplication.csp');
//////////////////////////////////////////////////////////////////////////////

/**
 * 通知アプリモジュール
 *
 * @author  IKEDA, Atsushi 2004/11
 * @version 1.0
 * @package grn.notification
 */
class GRN_Notification_App extends GRN_ApplicationBase
{

    CONST SEARCH_FIELDS
        = [
            'subject'     => 'subject', // Subject
            'space_name'  => 'space_name', // Space Name
            'abstract'    => 'abstract', // Contents
            'sender_name' => 'sender_name' // Name
        ];
    //////////////////////////////////////////////////////////////////////////
    // メンバ変数
    /**
     * @access private
     */
    var $_utility = null;                           // ユーティリティクラス
    var $_notification_service = null;              // 通知サービスロジック
    var $_app_manager = null;                       // アプリケーション管理ロジック
    var $_system_config = null;                     // 通知アプリ個人設定ロジック
    var $_personal_config = [];                // 通知アプリ個人設定ロジック（ユーザーIDごと）
    var $_portlet_logic = null;                     // ポートレットロジック
    private $_searchSpaceIds = null;                // 検索対象スペースID

    /**
     * コンストラクタ
     */
    function __construct()
    {
        parent::__construct(GRN_NOTIFICATION_APP_ID);

        $this->_utility = new GRN_Notification_Utility();
    }

    public function initializeDatabase()
    {
        parent::initializeDatabase();
        $distributor = new DistributorDBConvert();
        $distributor->convertNotification();
    }

    protected function initializeUserProfile()
    {
        parent::initializeUserProfile();

        global $G_container_base;
        /** @var $uum GRN_Uum */
        $uum = $G_container_base->getInstance('uum');
        $table_info = $uum->getUserTable();
        $rowset = new CB_RowSet($table_info);
        while ( ! is_null($row = $rowset->iterate())) {
            cb_get_user_profile($row,
                'grn.common.notification.personal')->removeAttributes();
        }
    }

    /**
     * @param string $name optional configuration name.
     *
     * @return mixed         array of configurations if $name is NULL;
     *                       or any value if $name is not null.
     *                       FALSE if no configuration is available.
     */
    function getConfig($name = null)
    {
        if ($name == "system_index") {
            return parent::getConfig($name);
        } elseif ($name == "personal_index") {
            return parent::getConfig($name);
        }

        return parent::getConfig($name);
    }

    //////////////////////////////////////////////////////////////////////////
    // private method

    //////////////////////////////////////////////////////////////////////////
    // public method

    /**
     * 通知サービスロジックを取得
     *
     * @return GRN_Notification_Service  通知サービスロジック
     */
    function getNotificationService()
    {
        if (is_null($this->_notification_service)) {
            $this->_notification_service
                = GRN_Notification_Service::getInstance();
        }

        return $this->_notification_service;
    }

    /**
     * 外部アプリケーション管理ロジックを取得する
     *
     * @return GRN_Notification_ApplicationManager  外部アプリケーション管理ロジック
     */
    function getOutsideApplicationManager()
    {
        if (is_null($this->_app_manager)) {
            $this->_app_manager
                = GRN_Notification_ApplicationManager::getInstance();
        }

        return $this->_app_manager;
    }

    /**
     * 通知アプリシステム設定ロジックを取得
     *
     * @return object  通知アプリシステム設定ロジック
     */
    function getSystemConfig()
    {
        if (is_null($this->_system_config)) {
            require_once('notification/system_config.csp');
            $this->_system_config
                = GRN_Notification_SystemConfig::getInstance();
        }

        return $this->_system_config;
    }

    /**
     * 通知アプリ個人設定ロジックを取得
     *
     * @param  CB_User $user ユーザーオブジェクト
     *
     * @return GRN_Notification_PersonalConfig|null  通知アプリ個人設定ロジック
     */
    function getPersonalConfig(& $user)
    {
        if ( ! is_object($user)) {
            $___ret = null;

            return $___ret;
        }

        $user_id = $user->getOID();
        if ( ! array_key_exists($user_id, $this->_personal_config)) {
            require_once('notification/personal_config.csp');
            $this->_personal_config[$user_id]
                = new GRN_Notification_PersonalConfig($user);
        }

        return $this->_personal_config[$user_id];
    }

    /**
     * 通知アプリ個人設定ロジックを取得
     *
     * @return GRN_Notification_PortletLogic  通知アプリ個人設定ロジック
     */
    function getPortletLogic()
    {
        if (is_null($this->_portlet_logic)) {
            require_once('notification/portlet_logic.csp');
            $this->_portlet_logic
                = GRN_Notification_PortletLogic::getInstance();
        }

        return $this->_portlet_logic;
    }

    /**
     * 指定されたモジュールIDからガルーン内アプリケーションかどうか返す
     *
     * @param   string $module_id 取得するモジュールID
     *
     * @return  boolean ガルーン内アプリケーションか
     */
    function &isGaroonApplication($module_id)
    {
        if (is_string($module_id)
            && (strncasecmp($module_id, 'grn.', 4) === 0)
        ) {
            {
                $___ret = true;

                return $___ret;
            }
        }

        {
            $___ret = false;

            return $___ret;
        }
    }

    /**
     * Get list of sub_module_id to exclude notifications on cellular app.
     *
     * @param $module_id
     *
     * @return string[]
     */
    public function getExcludeSubModuleIdsOnCellular($module_id)
    {
        $exclude_sub_module_ids = [];
        if ($module_id == GRN_SCHEDULE_MODULE_ID) {
            require_once('schedule/resources.csp');
            $exclude_sub_module_ids[] = GRN_FACILITY_APPROVAL_SUB_MODULE_ID;
        }

        return $exclude_sub_module_ids;
    }

    /**
     * ユーザーの通知データ一覧のデータ数を取得
     *
     * @param   string   $data_type             データタイプ（通知データ：'notify', 通知履歴データ：'history', 最新情報データ:'whatsnew')
     * @param   CB_User  $user                  ユーザーオブジェクト
     * @param   string   $module_id             取得するモジュールID。デフォルト:null
     * @param   object   $start_ts              データ検索範囲の開始日時（この値自体を含む）。nullで指定なし。デフォルト:null
     * @param   object   $last_ts               データ検索範囲の終了日時（この値自体は含まれない）。nullで指定なし。デフォルト:null
     * @param   string[] $ignore_sub_module_ids list of sub_module_id to ignore notifications
     * @param   bool     $is_to_me              Filter by category "To me" or not. By default, "To me" notification is not filtered
     *
     * @return  int     データ数
     */
    function getDataCount(
        $data_type,
        & $user,
        $module_id = null,
        $start_ts = null,
        $last_ts = null,
        $ignore_sub_module_ids = [],
        bool $is_to_me = false
    ) {
        if ( ! is_object($user)) {
            // アクセス権チェック
            cb_throw_error(E_COMMON_ACCOUNT_INVALIDATED);
        }

        // 通知データ数取得
        $notification_service = $this->getNotificationService();

        return $notification_service->getDataCount($data_type, $user,
            $module_id, $start_ts, $last_ts, null, $ignore_sub_module_ids,
            $is_to_me);
    }

    //Get total number(limit 100) on Comheader
    function getDataCountComheader($user)
    {
        return $this->getWhatsNewDataCount($user);
    }

    //Get total number(limit 100) on Comheader
    function getWhatsNewDataCount(
        $user,
        $module_id = null,
        $limit = GRN_NOTIFICATION_WHATSNEW_DATA_LIMIT,
        bool $is_to_me = false
    ) {
        if ( ! is_object($user)) {
            // アクセス権チェック
            cb_throw_error(E_COMMON_ACCOUNT_INVALIDATED);
        }
        $notification_service = $this->getNotificationService();

        return $notification_service->getWhatsNewDataCount($user, $module_id,
            $limit, $is_to_me);
    }

    /**
     * ユーザーの通知データ一覧の取得
     *
     * @param   string   $data_type              データタイプ（通知データ：'notify', 通知履歴データ：'history', 最新情報データ:'whatsnew')
     * @param   object   $user                   ユーザーオブジェクト
     * @param   string   $module_id              取得するモジュールID。デフォルト:null
     * @param   string   $sort                   ソートキー（'time'/'sender_name'）。デフォルト:'time'
     * @param   int      $offset                 表示位置。デフォルト:0
     * @param   int      $limit                  表示件数。デフォルト:20
     * @param   boolean  $reverse                ソート順。デフォルト:TRUE
     * @param   object   $start_ts               データ検索範囲の開始日時（この値自体を含む）。nullで指定なし。デフォルト:null
     * @param   object   $last_ts                データ検索範囲の終了日時（この値自体は含まれない）。nullで指定なし。デフォルト:null
     * @param   string[] $exclude_sub_module_ids list of sub_module_id to ignore notifications
     *
     * @return  mixed   通知データのリスト
     */
    function &getDataList(
        $data_type,
        & $user,
        $module_id = null,
        $sort = 'time',
        $reverse = true,
        $offset = 0,
        $limit = 20,
        $start_ts = null,
        $last_ts = null,
        $exclude_sub_module_ids = []
    ) {
        if ( ! is_object($user)) {
            // アクセス権チェック
            cb_throw_error(E_COMMON_ACCOUNT_INVALIDATED);
        }

        // 通知データリスト取得
        $notification_service = $this->getNotificationService();
        $data_list =& $notification_service->getDataList($data_type,
            $user, $module_id, $sort, $reverse, $offset, $limit, $start_ts,
            $last_ts, null, $exclude_sub_module_ids);

        $notify_datas = [];
        foreach ($data_list as $id => $data) {
            /** @var $data GRN_Notification_Data */
            $subject_data = $data->getSubjectData();
            $abstract_data = $data->getAbstractData();
            $sender_data = $data->getSenderData();
            if ($data->isStatusUpdated()) {
                $status = 'update';
            } elseif ($data->isStatusUnread()) {
                $status = 'unread';
            } else {
                $status = 'read';
            }

            $notify_datas[$id] = [
                'id'               => $id,
                'module_id'        => $data->getModuleId(),
                'unique_id'        => $data->getUniqueId(),
                'org_data'         => $data->getOrgData(),
                'subject'          => $subject_data[0],
                'subject_f'        => $subject_data['front'],
                'subject_b'        => $subject_data['back'],
                'subject_url'      => $subject_data['url'],
                'subject_icon'     => $subject_data['icon'],
                'abstract'         => $abstract_data[0],
                'abstract_f'       => $abstract_data['front'],
                'abstract_b'       => $abstract_data['back'],
                'abstract_url'     => $abstract_data['url'],
                'abstract_icon'    => $abstract_data['icon'],
                'sender_name'      => $sender_data['name'],
                'sender_id'        => $sender_data['id'],
                'sender_url'       => $sender_data['url'],
                'group_name'       => $sender_data['group_name'],
                'timestamp'        => $data->getTimeStampData(),
                'status'           => $status,
                'attached'         => $data->getAttachedFlag(),
                'popup'            => $data->getPopupFlag(),
                'auto_confirm'     => $data->getAutoConfirmFlag(),
                'confirm_required' => $data->getConfirmRequiredFlag()
            ];
        }

        return $notify_datas;
    }

    /**
     * ユーザーの通知データ一覧の取得（高速化バージョン）
     *
     * @param   string  $data_type データタイプ（通知データ：'notify', 通知履歴データ：'history', 最新情報データ:'whatsnew')
     * @param   CB_User $user      ユーザーオブジェクト
     * @param   string  $module_id 取得するモジュールID。デフォルト:null
     * @param   string  $sort      ソートキー（'time'/'sender_name'）。デフォルト:'time'
     * @param   int     $offset    表示位置。デフォルト:0
     * @param   int     $limit     表示件数。デフォルト:20
     * @param   boolean $reverse   ソート順。デフォルト:TRUE
     * @param   object  $start_ts  データ検索範囲の開始日時（この値自体を含む）。nullで指定なし。デフォルト:null
     * @param   object  $last_ts   データ検索範囲の終了日時（この値自体は含まれない）。nullで指定なし。デフォルト:null
     * @param   boolean $is_to_me  Filter by category "To me" or not. By default, "To me" notification is not filtered
     *
     * @return  mixed   通知データのリスト
     */
    public function &getDataListFast(
        $data_type,
        & $user,
        $module_id = null,
        $sort = 'time',
        $reverse = true,
        $offset = 0,
        $limit = 20,
        $start_ts = null,
        $last_ts = null,
        $add_condition = null,
        $is_merge_schedule_subject_with_time = true,
        bool $is_to_me = false
    ) {
        // ソート順を決定する
        switch ($sort) {
            default:
            case 'time':        // 日時で
                $order_by = 'col_timestamp, _id';
                if ($reverse) {
                    $order_by = 'col_timestamp DESC, _id DESC';
                }
                break;
            case 'name':        // 名前で
            case 'sender_name':
                $order_by = 'col_sender_name, _id';
                if ($reverse) {
                    $order_by = 'col_sender_name DESC, _id DESC';
                }
                break;
        }

        // 通知一覧を取得する
        $service = $this->getNotificationService();
        $ret =& $service->getDataListFast($data_type, $user, $module_id,
            $offset, $limit, $order_by, $start_ts, $last_ts, $add_condition,
            $is_merge_schedule_subject_with_time, $is_to_me);

        return $ret;
    }

    /**
     * ユーザーの通知データ一覧の取得（高速化バージョン）
     *
     * @param   string  $dataType       データタイプ（通知データ：'notify', 通知履歴データ：'history', 最新情報データ:'whatsnew')
     * @param   CB_User $user           ユーザーオブジェクト
     * @param   string  $moduleId       取得するモジュールID。デフォルト:null
     * @param   int     $offset         表示位置。デフォルト:0
     * @param   int     $limit          表示件数。デフォルト:20
     * @param   object  $startTimestamp データ検索範囲の開始日時（この値自体を含む）。nullで指定なし。デフォルト:null
     * @param   object  $endTimestamp   データ検索範囲の終了日時（この値自体は含まれない）。nullで指定なし。デフォルト:null
     * @param   array   $searchItemList 検索キー。デフォルト:null
     * @param   string  $keywordText    検索文字列。デフォルト:null
     * @param           $number_of_all
     *
     * @return  mixed   通知データのリスト
     */
    function getQueriedDataListFast(
        $dataType,
        $user,
        $moduleId,
        $offset,
        $limit,
        $startTimestamp,
        $endTimestamp,
        $searchItemList,
        $keywordText,
        & $number_of_all
    ) {
        if ( ! is_object($user)) {
            cb_throw_error(E_COMMON_ACCOUNT_INVALIDATED);
        }

        $keywordList = cb_parse_search_text($keywordText);
        if (empty($keywordList) || empty($searchItemList)) {
            return [];
        }

        require_once("notification/bean/GrnNotificationSearchCondition.csp");
        $condition = new GrnNotificationSearchCondition();
        $condition->setUserId($user->getOID());
        $condition->setDataType($dataType);

        $userId = $condition->getUserId();

        if ( ! is_null($startTimestamp)) {
            $condition->setStartDateTime($startTimestamp->unix_ts);
        }

        if ( ! is_null($endTimestamp)) {
            $condition->setEndDateTime($endTimestamp->unix_ts);
        }

        require_once("notification/NotificationFacade.csp");
        $facade = new NotificationFacade();

        // GRN35-479
        if (in_array('space_name', $searchItemList)) {
            if (is_null($this->_searchSpaceIds)) {
                $searchSpaceIds = $this->getSearchSpaceIdList($userId,
                    $facade, $condition, $keywordList);
                $this->_searchSpaceIds = $searchSpaceIds;
            } else {
                $searchSpaceIds = $this->_searchSpaceIds;
            }
            if ( ! empty($searchSpaceIds)) {
                $condition->setSpaceIdList($searchSpaceIds);
            }
        }
        $condition->setItemList($searchItemList);

        $condition->setKeywordList($keywordList);

        if (strlen($moduleId) > 0) {
            $condition->setModuleId($moduleId);
        }
        if ($condition->getDataType() == GRN_NOTIFICATION_DATA_TYPE_WHATSNEW) {
            $condition->setIsRead(GRN_NOTIFICATION_READ_STATUS_UNREAD);
        }
        $condition->setLimit($limit);
        $condition->setOffset($offset);

        $rows = $facade->searchForNotificationByCondition($userId,
            $condition, $number_of_all);
        $service = $this->getNotificationService();
        $retval = [];
        $appid_list_allow_external_access
            = AppAccess::getAvailabilityExternalAppIdsByUserId($user->getOID(),
            AppAvailabilityUtil::getActiveAppIds());
        foreach ($rows as $rowId => $row) {
            $available_access = $service->isAvailableFor($user,
                $row['col_module_id']);
            $app = explode('.', $row['col_module_id']);

            if ($available_access && $app[0] == 'grn' && count($app) == 2) {
                if ($appid_list_allow_external_access[$app[1]]
                    === AppAvailabilityUtil::ACCESS_ALLOWED
                ) {
                    $available_access = true;
                }
            }

            if ($available_access) {
                $retval[$rowId] = $service->_getNotifyDataProperties($dataType,
                    $row, $user);
            }
        }

        return $retval;
    }

    /**
     * 指定された通知データの確認処理（チェックして既読）
     *
     * @param   CB_User $user     ユーザーオブジェクト
     * @param   array   $data_ids 確認処理を行う通知データIDのリスト
     * @param bool      $is_to_me Filter by category "To me" or not. By default, "To me" notification is not filtered
     */
    function confirmDatas(& $user, & $data_ids, bool $is_to_me = false)
    {
        assert('is_array( $data_ids )');
        if ( ! is_object($user)) {
            // アクセス権チェック
            cb_throw_error(E_COMMON_ACCOUNT_INVALIDATED);
        }

        if (is_array($data_ids) && (count($data_ids) > 0)) {
            // 通知サービス取得
            $notification_service = $this->getNotificationService();

            // 確認処理対応アプリ列挙
            $apps =& $this->getConfirmApplicationList(true);

            $user_id = $user->getOID();

            $timestamp = new CB_TimeStamp;
            foreach ($data_ids as $id) {
                $result = true;
                $timestamp->unix_ts = time();
                $old_status = null;

                // 通知データプロパティを取得
                $data
                    = $notification_service->getNotifyDataPropertiesByNotifyId($id,
                    $user_id, $is_to_me);
                if ( ! is_null($data)) {
                    // ガルーン内アプリかチェック
                    $module_id = $data->getModuleId();
                    if ($this->isGaroonApplication($module_id)) {
                        $app_id = substr($module_id, 4);

                        if (array_key_exists($app_id, $apps)
                            && ! is_null($apps[$app_id])
                        ) {
                            // アプリケーションの確認処理
                            /**
                             * @var $app GRN_Schedule_Application|GRN_Message_Application|GRN_Bulletin|GRN_Cabinet|GRN_Mail_App|GRN_Report_Application
                             */
                            $app = $apps[$app_id];
                            $unique_id = $data->getUniqueId();
                            $org_data = $data->getOrgData();
                            $result = $app->confirmApplicationData($user,
                                $module_id, $unique_id, $org_data, $timestamp);
                        }
                    }
                }

                if ($result === true) {
                    // 指定されたIDの通知データを既読にする
                    $notification_service->confirmNotifyDataByNotifyId($id,
                        $timestamp, $user_id, false, $is_to_me);
                }
            }
        }
    }

    /**
     * 通知対応アプリケーション一覧の取得
     *
     * @param   boolean $available_only ログインユーザーが利用可能かどうかもチェックするか
     *
     * @return  \GRN_ApplicationBase[] 通知対応アプリのリスト
     */
    function &getApplicationList($available_only)
    {
        static $_app_list = [];
        $key = ($available_only == true) ? 1 : 0;
        if ( ! array_key_exists($key, $_app_list)) {
            $_app_list[$key] = [];
            $app_locator = GRN_ApplicationLocator::instance();
            $ids = $app_locator->getActiveApplicationIds();

            global $G_container_base;
            $uum = $G_container_base->getInstance('uum');
            $login = $uum->getLoginUser();

            // tuning GRB-15157
            $app_ids_internal
                = array_filter(AppAccess::getAvailableAppIdsInternalByUserId($login->getOID()));
            $app_ids
                = array_filter(AppAccess::getAvailabilityExternalAppIdsByUserId($login->getOID(),
                $app_ids_internal));

            foreach ($ids as $id) {
                $instance = $app_locator->getInstance($id);
                if (is_null($instance)) {
                    continue;
                }

                if ( ! array_key_exists($id, $app_ids)
                     || ($app_ids[$id] === 0)
                ) {
                    continue;
                }

                if ( ! method_exists($instance, 'getNotificationPageInfo')) {
                    continue;
                }

                $_app_list[$key][$id] = $instance;
            }
        }

        return $_app_list[$key];
    }

    /**
     * 通知更新処理対応アプリケーション一覧の取得
     *
     * @param   boolean $available_only ログインユーザーが利用可能かどうかもチェックするか
     *
     * @return  mixed   通知更新対応アプリのリスト
     */
    function &getUpdateApplicationList($available_only)
    {
        static $_app_list = [];
        $key = ($available_only == true) ? 1 : 0;
        if ( ! array_key_exists($key, $_app_list)) {
            $app_locator = GRN_ApplicationLocator::instance();
            $_app_list[$key]
                = $app_locator->getInstancesWithMethod('updateNotificationData',
                $available_only);
        }

        return $_app_list[$key];
    }

    /**
     * 確認処理対応アプリケーション一覧の取得
     *
     * @param   boolean $available_only ログインユーザーが利用可能かどうかもチェックするか
     *
     * @return  mixed   確認処理対応アプリのリスト
     */
    function &getConfirmApplicationList($available_only)
    {
        static $_app_list = [];
        $key = ($available_only == true) ? 1 : 0;
        if ( ! array_key_exists($key, $_app_list)) {
            $app_locator = GRN_ApplicationLocator::instance();
            $_app_list[$key]
                = $app_locator->getInstancesWithMethod('confirmApplicationData',
                $available_only);
        }

        return $_app_list[$key];
    }

    /**
     * 外部アプリケーション一覧を取得する
     *
     * @param int $offset 表示位置。デフォルト:0
     * @param int $limit  表示件数。デフォルト:20
     *
     * @return array  キーに（アプリケーション管理が決める）アプリケーションID、
     *  値に外部アプリケーション情報を持つ連想配列
     */
    function getOutsideApplicationList($offset = 0, $limit = 20)
    {
        $app_manager = $this->getOutsideApplicationManager();
        $apps =& $app_manager->getList($offset, $limit);

        $app_infos = [];
        foreach (array_keys($apps) as $app_id) {
            /** @var $app GRN_Notification_Application */
            $app = $apps[$app_id];

            $app_infos[$app_id] = [
                'app_id' => $app_id,
                'id'     => $app->getId(),
                'name'   => $app->getName()
            ];
        }

        return $app_infos;
    }

    /**
     * 外部アプリケーションを取得する
     *
     * @param int $app_id （アプリケーション管理が決める）アプリケーションID
     *
     * @return array  外部アプリケーション情報
     */
    function &getOutsideApplication($app_id)
    {
        $app_manager = $this->getOutsideApplicationManager();
        $app = $app_manager->get($app_id);
        if ( ! is_object($app)
             || ! is_a($app, 'GRN_Notification_Application')
        ) {
            cb_throw_error(E_GRN_NTFC_OUTSIDE_NOT_FOUND);
        }

        $app_info = [];
        $app_info['app_id'] = $app_id;
        $app_info['id'] = $app->getId();
        $app_info['name'] = $app->getName();
        $app_info['urlpattern'] = implode("\n", $app->getURLPatterns());

        return $app_info;
    }

    /**
     * 通知更新処理対応アプリケーションの更新処理呼び出し
     *
     * @param CB_User $user           対象となるユーザー
     * @param boolean $available_only ログインユーザーが利用可能かどうかもチェックするか
     */
    function updateApplications(& $user, $available_only)
    {
        // 更新処理済みアプリフラグ
        static $_updated_applications = [];

        if ( ! is_object($user)) {
            return;
        }

        // 1プロセスで1回しか更新処理は行わない
        $uid = $user->getOID();
        $key = ($available_only == true) ? 1 : 0;
        if (array_key_exists($uid, $_updated_applications)) {
            if (array_key_exists($key, $_updated_applications[$uid])) {
                // すでに更新処理済み
                return;
            }
        } else {
            $_updated_applications[$uid] = [];
        }

        // 更新処理済みフラグON
        $_updated_applications[$uid][$key] = true;

        // 通知サービス取得
        $notification_service = $this->getNotificationService();

        $apps =& $this->getUpdateApplicationList($available_only);
        foreach ($apps as $app) {
            /** @var $app GRN_ApplicationBase */
            // 最終更新日時取得
            $last_timestamp
                = $notification_service->getLastUpdateTimeStamp($user,
                $app->getModuleId());

            // 通知状態の更新処理
            $new_timestamp = null;
            $app->updateNotificationData($user, $last_timestamp,
                $new_timestamp);

            // 新たな更新タイムスタンプがセットされていなければ最終更新日時を現在日時で更新
            if ( ! is_object($new_timestamp)) {
                // 現在日時で更新
                $new_timestamp = new CB_TimeStamp;
                $new_timestamp->unix_ts = time();
            }

            // 最終更新日時保存
            $notification_service->setLastUpdateTimeStamp($user,
                $app->getModuleId(), $new_timestamp);
            unset($new_timestamp);
        }
    }

    /**
     * アプリケーションポートレットリストの取得
     *
     * @return array $portlet_list
     *          このアプリケーションが持つ
     *          アプリケーションポートレット情報を返します
     */
    function &getPortletList()
    {
        $portlet_logic = $this->getPortletLogic();
        $ret = $portlet_logic->getPortletList();

        return $ret;
    }

    /**
     * システム設定
     */
    function getSystemConfigArray()
    {
        $general_conf_item = [
            [
                'page' => 'notification/system/whatsnew_display_set',
                'icon' => 'display32'
            ],
            [
                'page' => 'notification/system/notifyinfo_list',
                'icon' => 'notify_outer32'
            ],
            [
                'page' => 'notification/system/notify_set',
                'icon' => 'notify_unknown32'
            ],
        ];
        if ( ! $this->isOnForest()) {
            $general_conf_item[] = [
                'page' => 'notification/system/scheduling_service',
                'icon' => 'deletetime32'
            ];
        }

        return [
            'general_config' => $general_conf_item,
            'portlet_config' =>
                [
                    [
                        'page' => 'notification/system/whatsnew_portlet_set',
                        'icon' => 'portlet32'
                    ],
                    [
                        'page' => 'notification/system/history_portlet_set',
                        'icon' => 'portlet32'
                    ],
                ],
        ];
    }

    /**
     * 個人設定
     */
    function getPersonalConfigArray()
    {
        $config_array[] = [
            'page' => 'notification/personal/notify_set',
            'icon' => 'notify_outer32'
        ];

        return ['personal_config' => $config_array];
    }

    /**
     * GRN2-2158
     * 通知一覧ポートレットに表示するモジュールの順番をソート
     * リストの順番情報を持っていないモジュールは末尾に追加
     *
     * @param    array $apps_list 通知可能アプリケーション一覧
     * @param    array $portlet   個人設定情報
     *
     * @return   array
     */
    function orderApplicationList($apps_list, $portlet)
    {
        $tmp_apps_list_for_view = [];
        foreach ($apps_list as $notification_apps_list) {
            foreach ($notification_apps_list as $app) {
                /** @var $app GRN_ApplicationBase */
                $module_id = $app->getModuleId();
                if (isset($portlet['settings']['application'][$module_id])) {
                    $list_index
                        = @ $portlet['settings']['application'][$module_id]['list_index'];
                    if (is_null($list_index)) {
                        continue;
                    }
                    $tmp_apps_list_for_view[$list_index] = [$module_id => $app];
                }
            }
        }
        ksort($tmp_apps_list_for_view);
        foreach ($apps_list as $notification_apps_list) {
            foreach ($notification_apps_list as $app) {
                $module_id = $app->getModuleId();
                if (isset($portlet['settings']['application'][$module_id])) {
                    if ( ! isset($portlet['settings']['application'][$module_id]['list_index'])) {
                        array_push($tmp_apps_list_for_view,
                            [$module_id => $app]);
                    }
                } else {
                    array_push($tmp_apps_list_for_view, [$module_id => $app]);
                }
            }
        }
        $apps_list_for_view = [];
        foreach ($tmp_apps_list_for_view as $tmp_apps) {
            foreach ($tmp_apps as $module_id => $app_for_view) {
                $apps_list_for_view[$module_id] = $app_for_view;
            }
        }
        unset($tmp_apps_list_for_view, $tmp_apps);

        return $apps_list_for_view;
    }

    /**
     * GRN2-2158
     * 通知アプリの名前とIDの配列を返す
     *
     * @param    array $apps_list_for_view 表示順通知可能アプリケーション一覧
     *
     * @return   false or array
     */
    function displayApplicationList($apps_list_for_view)
    {
        if ( ! isset($apps_list_for_view)) {
            return false;
        }
        $apps_list_for_display = [];
        foreach ($apps_list_for_view as $key => $app) {
            /** @var $app GRN_ApplicationBase */
            $apps_list_for_display[$key] = $app->getName();
        }

        return $apps_list_for_display;
    }

    /**
     * GRN35-179
     * Get notification for Space application
     *
     * @param   CB_User $user
     * @param   string  $module_id  default is 'grn.space'
     * @param   string  $data_limit Maximum number of notifications for each Space
     * @param   bool    $is_to_me   Filter by category "To me" or not. By default, "To me" notification is not filtered
     *
     * @return  mixed   notification data list of Space application
     */
    public function getDataListSpace(
        $user,
        $module_id = GrnSpaceApplication::GRN_SPACE_MODULE_ID,
        $data_limit = '5',
        bool $is_to_me = false
    ) {
        require_once('space/data/condition/SpaceSearchCondition.csp');
        require_once('space/service/SpaceService.csp');
        require_once('grn/notification.csp');
        require_once('fw/i18n/locale.csp');

        $user_id = $user->getOID();
        $notify_ids = $this->getSpaceNotifyIds($user_id, $data_limit,
            GRN_NOTIFICATION_DATA_TYPE_WHATSNEW, $is_to_me);
        if (empty($notify_ids)) {
            return [];
        }
        $notification_service = GRN_Notification_Service::getInstance();
        $data_list
            = $notification_service->getDataListByNotifyIdList($notify_ids,
            $user_id, $is_to_me);
        $space_ids = [];
        foreach ($data_list as $data) {
            $space_ids[$data['space_id']] = 1;
        }
        $space_ids = array_keys($space_ids);

        // Set search condition
        $search_condition = new SpaceSearchCondition();
        $search_condition->setSearchSpaceIdArray($space_ids);
        $search_condition->setOrderSortArray([SpaceSearchCondition::SORT_MODIFY_TIME_DESC]);
        $search_condition->setLanguageCode(CB_LocaleManager::getCurrentLanguage($user_id));
        $spaceService = SpaceService::getInstance();
        // アクセス権は無視してすべてを表示するため、アクセス権は考慮しない
        $spaceCollection
            = $spaceService->searchSpaceBySearchCondition($search_condition,
            $user_id, false, CB_LocaleManager::getCurrentLanguage($user_id));

        IconUtility::constructionSpaceCollectionIconPath($spaceCollection);

        $space_list = [];
        foreach ($spaceCollection as $space_obj) {
            /** @var $space_obj \grn\space\data\bean\Space */
            // スペース名とアイコン情報を与える。
            $space_list[$space_obj->getId()]['name']
                = $space_obj->getSpaceName();
            $space_list[$space_obj->getId()]['icon']
                = $space_obj->getDisplayIconPath();
        }
        global $G_config_common;
        // Set notification data to space_list order by update time
        $view_space_list = [];
        foreach ($space_ids as $space_id) {
            foreach ($data_list as $data) {
                // スペースIDをみて、space_listに振り分ける
                if ($space_id == $data['space_id']) {
                    $space_list[$space_id]['data'][$data['id']] = $data;
                    if ( ! isset($space_list[$space_id]['name'])) {
                        // スペースが取得できなかったときに、通知データがもつスペース名を表示する
                        $space_list[$space_id]['name'] = $data['space_name'];
                    }
                    if ( ! isset($space_list[$space_id]['icon'])) {
                        // 上と同様に、デフォルトのアイコンを表示する
                        $space_list[$space_id]['icon']
                            = $G_config_common->get("Global", "app_path")
                              . "/grn/image/cybozu/space20.png";
                    }
                }
            }
            //space_idsの順番に入れ替える
            $view_space_list[$space_id] = $space_list[$space_id];
        }

        return $view_space_list;
    }

    /**
     * @param   string                         $userId
     * @param   NotificationFacade             $facade
     * @param   GrnNotificationSearchCondition $condition   search condition of notification data
     * @param   array                          $keywordList array of search keywords
     *
     * @return  array
     */
    private function getSearchSpaceIdList(
        $userId,
        $facade,
        $condition,
        $keywordList
    ) {
        $spaceIds = $facade->getSpaceIdWithinNotification($userId, $condition);
        require_once('space/data/condition/SpaceSearchCondition.csp');
        require_once('space/service/SpaceService.csp');
        require_once('fw/i18n/locale.csp');
        $spaceCondition = new SpaceSearchCondition();
        $spaceCondition->setSearchParticipantUserId($userId);
        $spaceCondition->setOffset(0);
        $spaceCondition->setSearchSpaceIdArray($spaceIds);
        $spaceCondition->setSearchStringArray($keywordList);
        $spaceCondition->setSearchItemBit(SpaceSearchCondition::SEARCH_ITEM_SPACE_NAME);
        $spaceCondition->setLanguageCode(CB_LocaleManager::getCurrentLanguage($userId));
        $searchSpaceIds = [];
        $spaceService = SpaceService::getInstance();

        //Do not need ACL check because joining space is always accessible.
        if (($result
                = $spaceService->searchSpaceBySearchCondition($spaceCondition,
                $userId)) instanceof SpaceCollection
        ) {
            foreach ($result as $spaceObj) {
                /** @var $spaceObj \grn\space\data\bean\Space */
                $searchSpaceIds[] = $spaceObj->getId();
            }
        }

        return $searchSpaceIds;
    }

    /**
     * Add space icon and space name to notification data
     *
     * @param   array  $data_list list of notification data
     * @param   string $user_id   user id
     */
    public function addSpaceInfoForDataList(& $data_list, $user_id)
    {
        //通知データ内のスペースID抜きだし
        $space_ids = [];
        foreach ($data_list as $data) {
            if (isset($data['space_id'])) {
                $space_ids[] = $data['space_id'];
            }
        }

        if (count($space_ids) === 0) {
            return;
        }

        //スペースアイコンパスを取得
        require_once('space/data/condition/SpaceSearchCondition.csp');
        require_once('space/service/SpaceService.csp');
        require_once('space/common/utility/IconUtility.csp');
        require_once('fw/i18n/locale.csp');
        $spaceCondition = new SpaceSearchCondition();
        $spaceCondition->setOffset(0);
        $spaceCondition->setSearchSpaceIdArray(array_unique($space_ids));
        $spaceCondition->setLanguageCode(CB_LocaleManager::getCurrentLanguage($user_id));
        $spaceCondition->setCalcFoundRows(false);
        $spaceService = SpaceService::getInstance();

        //Do not need ACL check because joining space is always accessible.
        $spaceCollection
            = $spaceService->searchSpaceBySearchCondition($spaceCondition,
            $user_id);
        IconUtility::constructionSpaceCollectionIconPath($spaceCollection);
        //通知データに情報として持たせる

        foreach ($data_list as & $data) {
            if (isset($data['space_id'])) {
                foreach ($spaceCollection as $space) {
                    /** @var $space \grn\space\data\bean\Space */
                    if ($data['space_id'] == $space->getId()) {
                        $data['space_icon_url'] = $space->getDisplayIconPath();
                        $data['space_name'] = $space->getSpaceName();
                        $data['space_page_url'] = "space/top";
                        break;
                    }
                }
                if ( ! array_key_exists('space_page_url', $data)) {
                    $data['space_page_url'] = "space/top";
                }
            }
        }
        unset($data);
    }

    private function getSpaceNotifyIds(
        $userId,
        $limit,
        $dataType,
        bool $is_to_me = false
    ) {
        require_once("notification/NotificationFacade.csp");
        require_once("notification/bean/GrnNotificationSearchCondition.csp");
        $facade = new NotificationFacade();
        $condition = new GrnNotificationSearchCondition();
        $condition->setUserId($userId);
        $condition->setLimit($limit);
        $condition->setDataType($dataType);
        $condition->setIsToMe($is_to_me);

        return $notifyIds = $facade->getSpaceNotifyIds($userId, $condition);

    }

    /**
     * @param GRN_Notification_Application|GRN_ApplicationBase $app
     *
     * @return string
     */
    public function getNotificationAppIcon($app)
    {
        if ( ! $app instanceof GRN_Notification_Application) {
            return GRN_NOTTIFICATION_NOTIFY_ICON_DEFAULT;
        }

        $app_code = $app->getId();
        switch ($app_code) {
            case GRN_NOTTIFICATION_CYBOZU_APP_CODE_CYBOZU:
                $app_icon = GRN_NOTTIFICATION_NOTIFY_ICON_CYBOZU;
                break;
            case GRN_NOTTIFICATION_CYBOZU_APP_CODE_DEZIE:
                $app_icon = GRN_NOTTIFICATION_NOTIFY_ICON_DEZIE;
                break;
            case GRN_NOTTIFICATION_CYBOZU_APP_CODE_MAILWISE:
                $app_icon = GRN_NOTTIFICATION_NOTIFY_ICON_MAILWISE;
                break;
            case GRN_NOTTIFICATION_CYBOZU_APP_CODE_COLLABOREX:
                $app_icon = GRN_NOTTIFICATION_NOTIFY_ICON_COLLABOREX;
                break;
            case GRN_NOTTIFICATION_CYBOZU_APP_CODE_DOTSALES:
                $app_icon = GRN_NOTTIFICATION_NOTIFY_ICON_DOTSALES;
                break;
            case GRN_NOTTIFICATION_CYBOZU_APP_CODE_BLOG:
                $app_icon = GRN_NOTTIFICATION_NOTIFY_ICON_BLOG;
                break;
            case GRN_NOTTIFICATION_CYBOZU_APP_CODE_EASYLEARNING:
                $app_icon = GRN_NOTTIFICATION_NOTIFY_ICON_EASYLEARNING;
                break;
            case GRN_NOTTIFICATION_CYBOZU_APP_CODE_LIVE:
                $app_icon = GRN_NOTTIFICATION_NOTIFY_ICON_LIVE;
                break;
            default:
                $app_icon = GRN_NOTTIFICATION_NOTIFY_ICON_DEFAULT;
        }

        return $app_icon;
    }
}
