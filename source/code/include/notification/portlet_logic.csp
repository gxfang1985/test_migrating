<?php

/**
 * 通知アプリポートレットロジック
 *
 * @package grn.notification
 * @author  Ikeda, ATSUSHI 2004/11
 * @version 1.0
 */

require_once('notification/application.csp');

//////////////////////////////////////////////////////////////////////////////

/**
 * 通知アプリポートレットロジック
 *
 * @author  IKEDA, Atsushi 2004/11
 * @version 1.0
 * @package grn.notification
 */
class GRN_Notification_PortletLogic
{
    private static $_instance = null;

    /**
     * Return singleton.
     *
     * @return GRN_Notification_PortletLogic
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    function __construct()
    {
        // 通知アプリ取得
        $app_locator = GRN_ApplicationLocator::instance();
        $this->_notification_app
            = $app_locator->getInstance(GRN_NOTIFICATION_APP_ID);
        if (is_null($this->_notification_app)) {
            // 通知アプリ使用不可
            cb_throw_error(E_GRN_NTFC_NOT_AVAILABLE);
        }
    }

    //////////////////////////////////////////////////////////////////////////
    // メンバ変数
    /**
     * @var GRN_Notification_App
     *
     * @access private
     */
    var $_notification_app = null;                  // 通知アプリ

    /**
     * @access private
     */
    var $_system_config = null;

    //////////////////////////////////////////////////////////////////////////
    // private method


    //////////////////////////////////////////////////////////////////////////
    // public method

    function &getPortletList()
    {
        // 最新情報アプリケーションポートレットの定義
        require_once('fw/i18n.csp');
        $whatsnew_portlet = [
            'name'             => cb_msg('grn.notification',
                'portlet_whatsnew'),
            //名前
            'type'             => 'grn.notification.whatsnew',
            //種別
            'version'          => '1.0',
            //バージョン
            'set_template'     => 'notification/portlet/set_whatsnew.csp',
            //設定用テンプレート名
            'command_template' => 'notification/portlet/command_set_whatsnew.csp',
            //設定用テンプレート名
            'view_template'    => 'notification/portlet/view_whatsnew.csp'
            //表示用テンプレート名
        ];

        // 通知履歴アプリケーションポートレットの定義
        $history_portlet = [
            'name'             => cb_msg('grn.notification', 'portlet_history'),
            //名前
            'type'             => 'grn.notification.history',
            //種別
            'version'          => '1.0',
            //バージョン
            'set_template'     => 'notification/portlet/set_history.csp',
            //設定用テンプレート名
            'command_template' => 'notification/portlet/command_set_history.csp',
            //設定用テンプレート名
            'view_template'    => 'notification/portlet/view_history.csp'
            //表示用テンプレート名
        ];

        //アプリケーションポートレットリストの生成
        $portlet_list = [];
        $portlet_list[] = $whatsnew_portlet;
        $portlet_list[] = $history_portlet;

        return $portlet_list;
    }

    /**
     * ポートレットに表示する一覧データの件数のデフォルトを取得
     *
     * @param   boolean $abstract    デフォルト内容表示設定
     * @param   boolean $sender_name デフォルト名前表示設定
     * @param   boolean $timestamp   デフォルト日時表示設定
     *
     */
    function getDefaultDisplayItem(& $abstract, & $sender_name, & $timestamp)
    {
        $abstract = $sender_name = $timestamp = true;
    }

    /**
     * ポートレットに表示する一覧データの件数のデフォルトを取得
     *
     * @return  int     デフォルト件数
     *
     */
    function getDefaultRows()
    {
        return 5;
    }

    /**
     * ポートレットに表示する表示形式のデフォルトを取得
     *
     * @return  string      デフォルト表示形式
     *
     */
    function getDefaultDisplayType()
    {
        return 'index';
    }

    /**
     * 最新情報データリストの取得
     *
     * @param   string $module_id モジュールID
     * @param   int    $limit     リスト取得件数
     * @param bool     $is_to_me  Filter by category "To me" or not. By default, "To me" notification is not filtered
     *
     * @return  mixed   最新情報データリスト
     *
     */
    function &getWhatsNewDataList($module_id, $limit, $is_to_me = false)
    {
        // ログインユーザーの取得
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $login = $uum->getLoginUser();
        if ( ! $login) {
            // アクセス権チェック
            cb_throw_error(E_COMMON_ACCOUNT_INVALIDATED);
        }

        require_once("space/GrnSpaceApplication.csp");
        // 最新情報リストの取得
        if ($module_id === GrnSpaceApplication::GRN_SPACE_MODULE_ID) {
            $data_list = $this->_notification_app->getDataListSpace($login,
                $module_id, $limit, $is_to_me);
        } else {
            $data_list =& $this->_notification_app->getDataListFast('whatsnew',
                $login, $module_id, 'time', true, 0,
                $limit, null, null, null, true, $is_to_me);
        }

        //GRB-18758 When module id is external notification ID, the notification's from 'Cybozu Information' are also displayed.
        if ($module_id === 'x.1') {
            $cybozu_information
                = $this->_notification_app->getDataListFast('whatsnew',
                $login, GRN_NOTIFICATION_CYBOZU_INFORMATION,
                'time', true, 0, $limit);
            $data_list = array_replace($data_list, $cybozu_information);
        }

        return $data_list;
    }

    /**
     * 最新情報データ数の取得
     *
     * @param   string $module_id モジュールID
     * @param bool     $is_to_me  Filter by category "To me" or not. By default, "To me" notification is not filtered
     *
     * @return  int     最新情報データ数
     *
     */
    function getWhatsNewDataCount($module_id, $is_to_me = false)
    {
        // ログインユーザーの取得
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $login = $uum->getLoginUser();
        if ( ! $login) {
            // アクセス権チェック
            cb_throw_error(E_COMMON_ACCOUNT_INVALIDATED);
        }

        // 最新情報データ数の取得
        return $this->_notification_app->getWhatsNewDataCount($login,
            $module_id, GRN_NOTIFICATION_WHATSNEW_DATA_LIMIT, $is_to_me);
    }

    /**
     * 最新情報ポートレットに表示する一覧データの件数のデフォルトを取得
     *
     * @param   boolean $abstract    デフォルト内容表示設定
     * @param   boolean $sender_name デフォルト名前表示設定
     * @param   boolean $timestamp   デフォルト日時表示設定
     *
     */
    function getWhatsNewDefaultDisplayItem(
        & $abstract,
        & $sender_name,
        & $timestamp
    ) {
        $not_display_items = [];

        if (is_null($system_config = $this->_system_config)) {
            $system_config = $this->_notification_app->getSystemConfig();
            $this->_system_config = $system_config;
        }
        $system_config->getWhatsNewPortletNotDisplayItems($not_display_items);

        $abstract = false === array_search('abstract', $not_display_items);
        $sender_name = false === array_search('sender_name',
                $not_display_items);
        $timestamp = false === array_search('timestamp', $not_display_items);
    }

    /**
     * 最新情報ポートレットに表示する一覧データの件数のデフォルトを取得
     *
     * @param   string $module_id モジュールID
     *
     * @return  int     デフォルト件数
     *
     */
    function getWhatsNewDefaultRows($module_id)
    {
        $setting = [];

        if (is_null($system_config = $this->_system_config)) {
            $system_config = $this->_notification_app->getSystemConfig();
            $this->_system_config = $system_config;
        }
        $system_config->getWhatsNewPortletDisplaySetting($module_id, $setting);

        return $setting['count'];
    }

    /**
     * 通知履歴データリストの取得
     *
     * @param   string $module_id モジュールID
     * @param   int    $limit     リスト取得件数
     * @param bool     $is_to_me  Filter by category "To me" or not. By default, "To me" notification is not filtered
     *
     * @return  mixed   通知履歴データリスト
     *
     */
    function &getHistoryDataList($module_id, $limit, $is_to_me = false)
    {
        // ログインユーザーの取得
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $login = $uum->getLoginUser();
        if ( ! $login) {
            // アクセス権チェック
            cb_throw_error(E_COMMON_ACCOUNT_INVALIDATED);
        }

        // 通知履歴リストの取得
        $data_list =& $this->_notification_app->getDataListFast('history',
            $login,
            $module_id, 'time', true, 0, $limit, null, null, null, true,
            $is_to_me);

        return $data_list;
    }

    /**
     * 通知履歴データ数の取得
     *
     * @param   string $module_id モジュールID
     * @param   bool   $is_to_me  $is_to_me Filter by category "To me" or not. By default, "To me" notification is not filtered
     *
     * @return  int     通知履歴データ数
     *
     */
    function getHistoryDataCount($module_id, bool $is_to_me = false)
    {
        // ログインユーザーの取得
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $login = $uum->getLoginUser();
        if ( ! $login) {
            // アクセス権チェック
            cb_throw_error(E_COMMON_ACCOUNT_INVALIDATED);
        }

        // 通知履歴データ数の取得
        return $this->_notification_app->getDataCount('history', $login,
            $module_id, null, null, [], $is_to_me);
    }

    /**
     * 通知履歴ポートレットに表示する一覧データの件数のデフォルトを取得
     *
     * @param   boolean $abstract    デフォルト内容表示設定
     * @param   boolean $sender_name デフォルト名前表示設定
     * @param   boolean $timestamp   デフォルト日時表示設定
     *
     */
    function getHistoryDefaultDisplayItem(
        & $space_name,
        & $abstract,
        & $sender_name,
        & $timestamp
    ) {
        $not_display_items = [];

        if (is_null($system_config = $this->_system_config)) {
            $system_config = $this->_notification_app->getSystemConfig();
            $this->_system_config = $system_config;
        }
        $system_config->getHistoryPortletNotDisplayItems($not_display_items);

        $space_name = false === array_search('space_name', $not_display_items);
        $abstract = false === array_search('abstract', $not_display_items);
        $sender_name = false === array_search('sender_name',
                $not_display_items);
        $timestamp = false === array_search('timestamp', $not_display_items);
    }

    /**
     * 通知履歴ポートレットに表示する一覧データの件数のデフォルトを取得
     *
     * @param   string $module_id モジュールID
     *
     * @return  int     デフォルト件数
     *
     */
    function getHistoryDefaultRows()
    {
        $setting = [];

        if (is_null($system_config = $this->_system_config)) {
            $system_config = $this->_notification_app->getSystemConfig();
            $this->_system_config = $system_config;
        }
        $system_config->getHistoryPortletDisplaySetting($setting);

        return $setting['count'];
    }
}


