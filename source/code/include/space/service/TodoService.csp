<?php

namespace grn\space\service;

require_once('fw/uum_core.csp');

use CB_User;
use grn\favour\service\FavourService;
use grn\grn\MemberLogic;
use grn\space\common\data\bean\Application;
use grn\space\common\data\bean\Authority;
use grn\space\common\data\bean\LanguageStatus;
use grn\space\common\data\bean\SpaceMember;
use grn\space\common\data\collection\SpaceFileCollection;
use grn\space\common\data\collection\SpaceMemberCollection;
use grn\space\common\data\bean\Comment;
use grn\space\common\data\bean\SpaceFile;
use grn\space\common\data\collection\CommentCollection;
use grn\space\common\data\condition\CommentSearchCondition;
use grn\space\common\data\condition\SpaceFileSearchCondition;
use grn\space\common\exception\GrnDatabaseException;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\common\exception\GrnInvalidArgumentException;
use grn\space\common\exception\GrnInvalidPermissionException;
use grn\space\common\exception\ErrorCode;
use grn\space\common\exception\GrnRequiredDataIsNotException;
use grn\space\common\logic\CommentLogic;
use grn\space\common\logic\CategoryLogic;
use grn\space\common\logic\SpaceFileLogic;
use grn\space\common\service\InternalApplicationServiceAbstract;
use grn\space\common\utility\ValidateUtility;
use grn\space\common\utility\SpaceMemberUtility;
use grn\space\data\bean\Space;
use grn\space\data\bean\Thread;
use grn\space\data\bean\TodoUser;
use grn\space\data\bean\Todo;
use grn\space\data\bean\log\CreateSharedTodoFollowLog;
use grn\space\data\bean\log\CreateSharedTodoFollowFileLog;
use grn\space\data\bean\log\CreateSharedTodoLog;
use grn\space\data\bean\log\CreateSharedTodoFileLog;
use grn\space\data\bean\log\DeleteSharedTodoFollowLog;
use grn\space\data\bean\log\DeleteSharedTodoFollowFileLog;
use grn\space\data\bean\log\DeleteSharedTodoLog;
use grn\space\data\bean\log\DeleteSharedTodoFileLog;
use grn\space\data\bean\log\FinishSharedTodoLog;
use grn\space\data\bean\log\ModifySharedTodoLog;
use grn\space\data\collection\TodoCollection;
use grn\space\data\collection\TodoUserCollection;
use grn\space\data\condition\SpaceSearchCondition;
use grn\space\data\condition\TodoSearchCondition;
use grn\space\logic\SpaceAccessControlListLogic;
use grn\space\logic\SpaceLogic;
use grn\space\logic\SpaceNotificationLogic;
use grn\space\logic\ThreadLogic;
use grn\space\logic\TodoLogic;
use grn\fts\Application as FtsApplication;
use grn\fts\space\IndexService;

/**
 * アプリケーションサービス層
 * この層は、クライアント層からの要求を、ビジネスロジック層を利用して実現する
 *
 * Todoサービスクラス
 * クライアント層からのToDoアプリケーションに対する全ての要求を引き受ける
 */
class TodoService extends InternalApplicationServiceAbstract
{
    private static $_instance = null;

    /**
     * コンストラクタ
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Get Instance(Singleton pattern)
     *
     * @return TodoService $_instance
     */
    public static function getInstance()
    {
        if (is_null(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    //***************************************************************************************************************
    //**********************************             relation              ******************************************
    //***************************************************************************************************************
    /**
     * Does a specified argument has the relation?
     *
     * Access control is not used.
     *
     * @param     string $spaceId        space sequence id
     * @param     string $threadId       thread sequence id
     * @param     string $todoCategoryId category sequence id
     *
     * @throws    GrnDatabaseException  Any error in the database.
     * @return    boolean       TRUE:has relation    FALSE:do not has a relation
     */
    private function _hasRelationSpaceThreadTodoCategory(
        $spaceId,
        $threadId,
        $todoCategoryId
    ) {
        try {
            $categoryLogic = CategoryLogic::getInstance();
            $categoryLogic->getCategoryBySpaceIdThreadIdTodoCategoryId($spaceId,
                $threadId, $todoCategoryId,
                LanguageStatus::STANDARD_LANGUAGE_CODE);
        } catch (GrnDataNotFoundException $exception) {
            return false;
        }

        return true;
    }

    /**
     * Does a specified argument has the relation?
     *
     * Access control is not used.
     *
     * @param     string $spaceId  space sequence id
     * @param     string $threadId thread sequence id
     * @param     string $todoId   todo sequence id
     *
     * @throws    GrnDatabaseException  Any error in the database.
     * @return    boolean       TRUE:has relation    FALSE:do not has a relation
     */
    private function _hasRelationSpaceThreadTodo($spaceId, $threadId, $todoId)
    {
        try {
            $todoLogic = TodoLogic::getInstance();
            $todoLogic->getTodoBySpaceIdThreadIdTodoId($spaceId, $threadId,
                $todoId);
        } catch (GrnDataNotFoundException $exception) {
            return false;
        }

        return true;
    }

    /**
     * Does a specified argument has the relation?
     *
     * Access control is not used.
     *
     * @param     string $spaceId   space sequence id
     * @param     string $threadId  thread sequence id
     * @param     string $todoId    todo sequence id
     * @param     string $commentId comment sequence id
     *
     * @throws    GrnDatabaseException  Any error in the database.
     * @return    boolean       TRUE:has relation    FALSE:do not has a relation
     */
    private function _hasRelationSpaceThreadTodoComment(
        $spaceId,
        $threadId,
        $todoId,
        $commentId
    ) {
        $commentLogic = CommentLogic::getInstance();

        return $commentLogic->isExistsCommentBySpaceIdThreadIdTodoIdCommentId($spaceId,
            $threadId, $todoId,
            $commentId);
    }

    //****************************************************************************************************************
    //**********************************             authority              ******************************************
    //****************************************************************************************************************
    /**
     * As for target TODO-CATEGORY, is access control possible on the condition of arguments?
     *
     * @param     string $authorityCode   The constant has been defined in Authority class
     * @param     string $spaceId         space sequence id
     * @param     string $threadId        thread sequence id
     * @param     string $todoCategoryId  category sequence id
     * @param     string $operationUserId user sequence id
     *
     * @throws    GrnInvalidArgumentException       authorityCode is not constant. or spaceId is not number. or threadId is not number. or todoCategoryId is not number. or operationUserId is not number.
     * @throws    GrnDatabaseException              Any error in the database.
     * @return    boolean       TRUE:It has the access control.     FALSE:It doesn't have the access control.
     */
    public function hasTodoCategoryAccessControl(
        $authorityCode,
        $spaceId,
        $threadId,
        $todoCategoryId,
        $operationUserId
    ) {
        //input check
        ValidateUtility::isIn($authorityCode
            , [
                Authority::AUTHORITY_CODE_READ_SUMMARY
                ,
                Authority::AUTHORITY_CODE_READ_DETAIL
                ,
                Authority::AUTHORITY_CODE_WRITE
                ,
                Authority::AUTHORITY_CODE_SYSTEM_PRIVILEGE
                ,
                Authority::AUTHORITY_CODE_OPERATION_PRIVILEGE
            ]
            , ValidateUtility::DISABLE_EMPTY);
        ValidateUtility::isNumber($spaceId);
        ValidateUtility::isNumber($threadId);
        ValidateUtility::isNumber($todoCategoryId);
        ValidateUtility::isNumber($operationUserId);

        if ($this->_hasRelationSpaceThreadTodoCategory($spaceId, $threadId,
                $todoCategoryId) === false
        ) {
            return false;
        }

        $spaceAclLogic = SpaceAccessControlListLogic::getInstance();
        $hasSpaceAccessControl
            = $spaceAclLogic->hasSpaceAccessControl($authorityCode,
            $spaceId, $operationUserId);

        if ($hasSpaceAccessControl === false) {
            if (($authorityCode == Authority::AUTHORITY_CODE_READ_DETAIL)
                || ($authorityCode
                    == Authority::AUTHORITY_CODE_SYSTEM_PRIVILEGE)
            ) {
                $hasSpaceAccessControl
                    = $this->_isSpaceAdministrator($operationUserId);
            }
        }

        //今後カテゴリにアクセス権が含まれた場合は、
        //ここで、スペースカテゴリ、スペース、スレッドカテゴリの各アクセス権を個別にチェック後に、
        //それぞれのアクセス権の論理積の結果を返す。

        return $hasSpaceAccessControl;
    }

    /**
     * As for target TODO, is access control possible on the condition of arguments?
     *
     * @param     string $authorityCode   The constant has been defined in Authority class
     * @param     string $spaceId         space sequence id
     * @param     string $threadId        thread sequence id
     * @param     string $todoId          todo sequence id
     * @param     string $operationUserId user sequence id
     *
     * @throws    GrnInvalidArgumentException       authorityCode is not constant. or spaceId is not number. or threadId is not number. or todoId is not number. or operationUserId is not number.
     * @throws    GrnDatabaseException              Any error in the database.
     * @return    boolean       TRUE:It has the access control.     FALSE:It doesn't have the access control.
     */
    public function hasTodoAccessControl(
        $authorityCode,
        $spaceId,
        $threadId,
        $todoId,
        $operationUserId
    ) {
        //input check
        ValidateUtility::isIn($authorityCode
            , [
                Authority::AUTHORITY_CODE_READ_SUMMARY
                ,
                Authority::AUTHORITY_CODE_READ_DETAIL
                ,
                Authority::AUTHORITY_CODE_WRITE
                ,
                Authority::AUTHORITY_CODE_SYSTEM_PRIVILEGE
                ,
                Authority::AUTHORITY_CODE_OPERATION_PRIVILEGE
            ]
            , ValidateUtility::DISABLE_EMPTY);
        ValidateUtility::isNumber($spaceId);
        ValidateUtility::isNumber($threadId);
        ValidateUtility::isNumber($todoId);
        ValidateUtility::isNumber($operationUserId);

        if ($this->_hasRelationSpaceThreadTodo($spaceId, $threadId, $todoId)
            === false
        ) {
            return false;
        }

        $spaceAclLogic = SpaceAccessControlListLogic::getInstance();
        $hasSpaceAccessControl
            = $spaceAclLogic->hasSpaceAccessControl($authorityCode,
            $spaceId, $operationUserId);

        if ($hasSpaceAccessControl === false) {
            if (($authorityCode == Authority::AUTHORITY_CODE_READ_DETAIL)
                || ($authorityCode
                    == Authority::AUTHORITY_CODE_SYSTEM_PRIVILEGE)
            ) {
                $hasSpaceAccessControl
                    = $this->_isSpaceAdministrator($operationUserId);
            }
        }

        //今後カテゴリにアクセス権が含まれた場合は、
        //ここで、スペースカテゴリ、スペース、スレッドカテゴリ、TODO(登録者か？くらいだが必要かどうか要確認)の各アクセス権を個別にチェック後に、
        //それぞれのアクセス権の論理積の結果を返す。

        return $hasSpaceAccessControl;
    }

    /**
     * As for target COMMENT, is access control possible on the condition of arguments?
     *
     * @param     string $authorityCode   The constant has been defined in Authority class
     * @param     string $spaceId         space sequence id
     * @param     string $threadId        thread sequence id
     * @param     string $todoId          todo sequence id
     * @param     string $commentId       comment sequence id
     * @param     string $operationUserId user sequence id
     *
     * @throws    GrnInvalidArgumentException       authorityCode is not constant. or spaceId is not number. or threadId is not number. or todoId is not number. or commentId is not number. or operationUserId is not number.
     * @throws    GrnDatabaseException              Any error in the database.
     * @return    boolean       TRUE:It has the access control.     FALSE:It doesn't have the access control.
     */
    public function hasTodoCommentAccessControl(
        $authorityCode,
        $spaceId,
        $threadId,
        $todoId,
        $commentId,
        $operationUserId
    ) {
        //input check
        ValidateUtility::isIn($authorityCode
            , [
                Authority::AUTHORITY_CODE_READ_SUMMARY
                ,
                Authority::AUTHORITY_CODE_READ_DETAIL
                ,
                Authority::AUTHORITY_CODE_WRITE
                ,
                Authority::AUTHORITY_CODE_SYSTEM_PRIVILEGE
                ,
                Authority::AUTHORITY_CODE_OPERATION_PRIVILEGE
            ]
            , ValidateUtility::DISABLE_EMPTY);
        ValidateUtility::isNumber($spaceId);
        ValidateUtility::isNumber($threadId);
        ValidateUtility::isNumber($commentId);
        ValidateUtility::isNumber($operationUserId);

        if ($this->_hasRelationSpaceThreadTodoComment($spaceId, $threadId,
                $todoId, $commentId) === false
        ) {
            return false;
        }

        //コメントの仕様は「閲覧権限があれば書込が可能」。
        //この仕様を実現するために、以下の制御を行っている。
        //READ権限チェック時    閲覧、登録が出来る
        //WRITE権限チェック時   自分が登録したものだけが削除が出来る
        $spaceAuthorityCode = ($authorityCode
                               == Authority::AUTHORITY_CODE_WRITE)
            ? Authority::AUTHORITY_CODE_READ_DETAIL
            : $authorityCode;
        $spaceAclLogic = SpaceAccessControlListLogic::getInstance();
        $hasSpaceAccessControl
            = $spaceAclLogic->hasSpaceAccessControl($spaceAuthorityCode,
            $spaceId, $operationUserId);

        if ($hasSpaceAccessControl === false) {
            if (($spaceAuthorityCode == Authority::AUTHORITY_CODE_READ_DETAIL)
                || ($spaceAuthorityCode
                    == Authority::AUTHORITY_CODE_SYSTEM_PRIVILEGE)
            ) {
                $hasSpaceAccessControl
                    = $this->_isSpaceAdministrator($operationUserId);
            }
        }

        //今後カテゴリにアクセス権が含まれた場合は、
        //ここで、スペースカテゴリ、スペース、スレッドカテゴリの各アクセス権を個別にチェック後に、
        //それぞれのアクセス権の論理積の結果を返す。


        //引数が書込の場合、登録者でない時は無効
        if ((Authority::AUTHORITY_CODE_WRITE == $authorityCode)
            && $hasSpaceAccessControl
        ) {
            //対象コメントを取得
            try {
                $commentLogic = CommentLogic::getInstance();
                $comment = $commentLogic->getComment($commentId);

                if ($comment->getCreatorId() != $operationUserId) {
                    $hasSpaceAccessControl = false;
                }
            } catch (GrnDataNotFoundException $e) {
                $hasSpaceAccessControl = false;
            }
        }

        return $hasSpaceAccessControl;
    }


    //***********************************************************************************************************
    //**********************************             user              ******************************************
    //***********************************************************************************************************
    /**
     * TodoCollectionオブジェクト内の担当者、登録者、更新者オブジェクトにユーザー情報を加える
     *
     * @param     TodoCollection $todoCollection
     *
     * @throws    GrnInvalidArgumentException                   OperationUserId is not number. or LanguageCode is invalid.
     * @throws    GrnDatabaseException
     */
    public function addTodoCollectionUserInfo(TodoCollection $todoCollection)
    {
        $spaceMemberCollection = new SpaceMemberCollection();

        /** @var Todo $todo */
        foreach ($todoCollection as $todo) {
            $spaceMemberCollection->appendBean($todo->getCreator(), false);
            $spaceMemberCollection->appendBean($todo->getModifier(), false);

            $todoUserCollection = $todo->getTodoUserCollection();
            foreach ($todoUserCollection as $todoUser) {
                $spaceMemberCollection->appendBean($todoUser);
            }
        }

        $this->addSimpleUserInfo($spaceMemberCollection, true);
    }


    //****************************************************************************************************************
    //**********************************              todo              **********************************************
    //****************************************************************************************************************
    /**
     * search TODO by condition with access control
     *
     * TODO that exceeds THREAD cannot be retrieved.
     *
     * @param     string              $authorityCode   The constant has been defined in Authority class
     * @param     TodoSearchCondition $searchCondition
     * @param     string              $operationUserId user sequence id
     * @param     boolean             $is_mobile
     *
     * @throws    GrnRequiredDataIsNotException     There is no information necessary for searchCondition.
     * @throws    GrnInvalidArgumentException       authorityCode not a constant. or operationUserId is not number.
     * @throws    GrnDatabaseException              Any error in the database.
     * @return    TodoCollection
     */
    public function searchTodoBySearchConditionWithAccessControl(
        $authorityCode,
        TodoSearchCondition $searchCondition,
        $operationUserId,
        $getThreadInfo = true,
        $getParticipantInfo = true,
        $is_mobile = false
    ) {
        //input data check
        ValidateUtility::isIn($authorityCode
            , [
                Authority::AUTHORITY_CODE_READ_SUMMARY
                ,
                Authority::AUTHORITY_CODE_READ_DETAIL
                ,
                Authority::AUTHORITY_CODE_WRITE
                ,
                Authority::AUTHORITY_CODE_SYSTEM_PRIVILEGE
                ,
                Authority::AUTHORITY_CODE_OPERATION_PRIVILEGE
            ]
            , ValidateUtility::DISABLE_EMPTY);
        ValidateUtility::isNumber($operationUserId);
        $searchCondition->isValidData(TodoSearchCondition::VALID_TYPE_SELECT);

        $spaceLogic = SpaceLogic::getInstance();
        $space
            = $spaceLogic->getSpaceByApplicationCategoryId($searchCondition->getSearchCategoryId(),
            LanguageStatus::STANDARD_LANGUAGE_CODE);
        $spaceAclLogic = SpaceAccessControlListLogic::getInstance();
        $hasSpaceAccessControl
            = $spaceAclLogic->hasSpaceAccessControl($authorityCode,
            $space->getId(), $operationUserId);

        if ($hasSpaceAccessControl === false) {
            if (($authorityCode == Authority::AUTHORITY_CODE_READ_DETAIL)
                || ($authorityCode
                    == Authority::AUTHORITY_CODE_SYSTEM_PRIVILEGE)
            ) {
                $hasSpaceAccessControl
                    = $this->_isSpaceAdministrator($operationUserId);
            }
        }

        $todoLogic = TodoLogic::getInstance();
        /** @var Todo $todo */
        if ($hasSpaceAccessControl) {
            $resultTodoCollection = $todoLogic->searchTodo($searchCondition,
                $is_mobile);

            //set thread object
            if (count($resultTodoCollection) > 0 && $getThreadInfo) {
                $threadLogic = ThreadLogic::getInstance();
                $threadCollection
                    = $threadLogic->getThreadCollectionByTodoCollection($resultTodoCollection);

                /** @var Thread $thread */
                foreach ($threadCollection as $thread) {
                    foreach ($resultTodoCollection as $todo) {
                        if ($thread->getId() == $todo->getParentThreadId()) {
                            $todo->setParentThread($thread);
                        }
                    }
                }
            }
        } else {
            $resultTodoCollection = new TodoCollection();
        }

        //Todo参加者
        if (count($resultTodoCollection) > 0 && $getParticipantInfo) {
            $todoUserCollectionArray
                = $todoLogic->getTodoUserCollectionsArray($resultTodoCollection);
            foreach ($resultTodoCollection as $todo) {
                if (isset($todoUserCollectionArray[$todo->getId()])) {
                    $todo->setTodoUserCollection($todoUserCollectionArray[$todo->getId()]);
                }
            }

        }

        return $resultTodoCollection;
    }

    /**
     * Todoを検索する
     *
     * Attention: Use the method of checking the authority because it doesn't check the authority internally beforehand.
     *
     * TODO that exceeds THREAD cannot be retrieved.
     *
     * @param     TodoSearchCondition $searchCondition
     * @param     string              $operationUserId user sequence id
     *
     * @throws    GrnRequiredDataIsNotException     There is no information necessary for searchCondition.
     * @throws    GrnInvalidArgumentException       operationUserId is not number.
     * @throws    GrnDatabaseException              Any error in the database.
     * @return    TodoCollection
     */
    public function searchTodoBySearchCondition(
        TodoSearchCondition $searchCondition,
        $operationUserId
    ) {
        //input data check
        ValidateUtility::isNumber($operationUserId);
        $searchCondition->isValidData(TodoSearchCondition::VALID_TYPE_SELECT);

        //Todo検索
        $todoLogic = TodoLogic::getInstance();
        $todoCollection = $todoLogic->searchTodo($searchCondition);

        //Todo参加者検索（ここでやるかどうか検討が必要）

        return $todoCollection;
    }

    /**
     * get TODO-Collection by condition with access control
     *
     * @param     string $authorityCode   The constant has been defined in Authority class
     * @param     string $operationUserId user sequence id
     * @param     string $languageCode    dispaly language code. The standard is display at STANDARD_LANGUAGE_CODE.
     *
     * @throws    GrnInvalidArgumentException       authorityCode not a constant. or operationUserId is not number.
     * @throws    GrnDatabaseException              Any error in the database.
     * @return    TodoCollection
     */
    public function getMyTodoCollectionByIncompleteWithAccessControl(
        $authorityCode,
        $operationUserId,
        $languageCode = LanguageStatus::STANDARD_LANGUAGE_CODE
    ) {
        //input data check
        ValidateUtility::isIn($authorityCode
            , [
                Authority::AUTHORITY_CODE_READ_SUMMARY
                ,
                Authority::AUTHORITY_CODE_READ_DETAIL
                ,
                Authority::AUTHORITY_CODE_WRITE
                ,
                Authority::AUTHORITY_CODE_SYSTEM_PRIVILEGE
                ,
                Authority::AUTHORITY_CODE_OPERATION_PRIVILEGE
            ]
            , ValidateUtility::DISABLE_EMPTY);
        ValidateUtility::isNumber($operationUserId);


        //参加スペースを検索
        $searchCondition = new SpaceSearchCondition();
        $searchCondition->setSearchParticipantUserId($operationUserId);
        $searchCondition->setSearchParticipantGroupIds(SpaceMemberUtility::getLoginUserGroupIds());
        $searchCondition->setSearchParticipantRoleIds(SpaceMemberUtility::getLoginUserRoleIds());
        $searchCondition->setSearchSpaceExpirationDate(SpaceSearchCondition::SEARCH_SPACE_NOT_EXPIRED);
        $spaceLogic = SpaceLogic::getInstance();
        $spaceCollection = $spaceLogic->searchSpace($searchCondition);

        //結果が0ならここで終了
        if (count($spaceCollection) == 0) {
            return new TodoCollection();
        }

        $hasSpaceAccessControl = false;
        if (($authorityCode == Authority::AUTHORITY_CODE_READ_DETAIL)
            || ($authorityCode == Authority::AUTHORITY_CODE_SYSTEM_PRIVILEGE)
        ) {
            $hasSpaceAccessControl
                = $this->_isSpaceAdministrator($operationUserId);
        }

        if ($hasSpaceAccessControl === false) {
            //Filter the spaceCollection with access control
            //アクセスコントロールでspaceCollectionをフィルタする
            $spaceAclLogic = SpaceAccessControlListLogic::getInstance();
            $spaceCollection
                = $spaceAclLogic->filterSpaceCollectionWithAccessControl($authorityCode,
                $spaceCollection,
                $operationUserId);


            //結果が0ならここで終了
            if (count($spaceCollection) == 0) {
                return new TodoCollection();
            }
        }


        //権限を持つスペースの範囲内から検索
        $spaceIdArray = [];
        /** @var Space $space */
        foreach ($spaceCollection as $space) {
            $spaceIdArray[] = $space->getId();
        }

        $todoLogic = TodoLogic::getInstance();
        $resultTodoCollection
            = $todoLogic->searchIncompleteTodoBySpaceIdsUserId($spaceIdArray,
            $operationUserId, $languageCode);

        return $resultTodoCollection;
    }

    /**
     * get TODO-Collection by condition
     *
     * @param     string $operationUserId user sequence id
     * @param     string $languageCode    dispaly language code.
     *
     * @throws    GrnInvalidArgumentException       authorityCode not a constant. or operationUserId is not number.
     * @throws    GrnDatabaseException              Any error in the database.
     * @return    TodoCollection
     */
    public function getMyAssignedTodoCollectionByIncomplete(
        $operationUserId,
        $languageCode = LanguageStatus::STANDARD_LANGUAGE_CODE
    ) {
        //input data check
        ValidateUtility::isNumber($operationUserId);

        $todoLogic = TodoLogic::getInstance();
        $resultTodoCollection
            = $todoLogic->searchAssignedIncompleteTodoByUserId($operationUserId,
            $languageCode);

        return $resultTodoCollection;
    }

    /**
     * Todoを参照する
     *
     * Attention: Use the method of checking the authority because it doesn't check the authority internally beforehand.
     *
     * @param     string $todoId          todo sequence id
     * @param     string $operationUserId user sequence id
     *
     * @throws    GrnInvalidArgumentException       todoId is not number. or operationUserId is not number.
     * @throws    GrnDataNotFoundException          There is no TODO.
     * @throws    GrnDatabaseException              Any error in the database.
     * @return    Todo                              refer todo object.
     */
    public function getTodo($todoId, $operationUserId)
    {
        //input data check
        ValidateUtility::isNumber($todoId);
        ValidateUtility::isNumber($operationUserId);

        //Todo検索
        $todoLogic = TodoLogic::getInstance();
        $resultTodo = $todoLogic->getTodo($todoId);

        //Todo担当者
        $todoUserCollection
            = $todoLogic->getTodoUserCollectionByTodoId($resultTodo->getId());
        $resultTodo->setTodoUserCollection($todoUserCollection);

        //set attached files
        $searchCondition = new SpaceFileSearchCondition();
        $searchCondition->setSearchScopeType(SpaceFileSearchCondition::SEARCH_SCOPE_TYPE_TODO);
        $searchCondition->setSearchScopeValue($resultTodo->getId());
        $fileLogic = SpaceFileLogic::getInstance();
        $resultFileCollection
            = $fileLogic->getSpaceFileCollection($searchCondition);

        $resultTodo->setSpaceFileCollection($resultFileCollection);

        //Todo既読ステータス登録

        return $resultTodo;
    }

    /**
     * ToDoを作成する
     *
     * Attention: Use the method of checking the authority because it doesn't check the authority internally beforehand.
     *
     * @param     Todo               $todo
     * @param     TodoUserCollection $todoUserCollection
     * @param     CB_User            $operationUser \CB_User
     * @param     array              $fileArray     Optional    \GRN_File, or \GRN_ServerFile, or an element of $_FILES, or a path string of a file.
     * @param     string             $threadId      thread sequence id
     *
     * @throws    GrnInvalidArgumentException           threadId is not number.
     * @throws    GrnRequiredDataIsNotException         There is no information necessary for todo or todoUserCollection.
     * @throws    GrnDatabaseException                  Any error in the database.
     * @return    Todo                                  (Added todo object.)
     */
    public function createTodo(
        Todo $todo,
        TodoUserCollection $todoUserCollection,
        CB_User $operationUser,
        array $fileArray = [],
        $threadId
    ) {
        //input data check
        ValidateUtility::isNumber($threadId);
        $todo->isValidData(Todo::VALID_TYPE_CREATE);
        /** @var TodoUser $todoUser */
        foreach ($todoUserCollection as $todoUser) {
            $todoUser->isValidData(TodoUser::VALID_TYPE_CREATE);
        }

        //Completion Information(情報の補完)
        $todo->setModifierId($todo->getCreatorId());
        $todo->setModifierName($todo->getCreatorName());

        $todoLogic = TodoLogic::getInstance();
        $spaceLogic = SpaceLogic::getInstance();

        //Todo登録
        $resultTodo = $todoLogic->createTodo($todo);

        //Todo担当者登録
        if (count($todoUserCollection) > 0) {
            $todoUserCollection
                = $todoLogic->createTodoUsers($resultTodo->getId(),
                $todoUserCollection);
            $resultTodo->setTodoUserCollection($todoUserCollection);
        }

        //TodoとThreadの関連付け
        $todoLogic->createTodoThread($resultTodo->getId(), $threadId);

        //This is for logging
        $space = $spaceLogic->getSpaceByTodoId($resultTodo->getId(),
            LanguageStatus::STANDARD_LANGUAGE_CODE);


        //attached files
        $resultFileCollection = new SpaceFileCollection();
        $fileLogic = SpaceFileLogic::getInstance();
        foreach ($fileArray as $grnMixedFile) {
            $resultSpaceFile = $fileLogic->createSpaceFile($grnMixedFile,
                $operationUser);

            if (is_object($resultSpaceFile)) {
                //Todoと添付ファイルの関連付けを登録
                $todoLogic->createTodoFileReletion($resultTodo->getId(),
                    $resultSpaceFile->getId());
                $resultSpaceFile->setParentApplicationType(SpaceFile::PARENT_APPLICATION_TYPE_TODO);
                $resultSpaceFile->setParentApplicationId($resultTodo->getId());

                //Todo添付登録ログ出力
                //Log CreateSharedTodoFileLog
                $createSharedTodoFileLog = new CreateSharedTodoFileLog();
                $createSharedTodoFileLog->setFileId($resultSpaceFile->getId());
                $createSharedTodoFileLog->setFileName($resultSpaceFile->getGrnSpaceFileObject()
                                                                      ->getCurrentBody()
                                                                      ->get('name'));
                $createSharedTodoFileLog->setSharedTodoId($resultTodo->getId());
                $createSharedTodoFileLog->setSharedTodoName($resultTodo->getTitle());
                $createSharedTodoFileLog->setSpaceId($space->getId());
                $createSharedTodoFileLog->setSpaceName($space->getSpaceName());
                $this->getSpaceLogLogic()->info($createSharedTodoFileLog);

                $resultFileCollection->appendBean($resultSpaceFile);
            }
        }
        $resultTodo->setSpaceFileCollection($resultFileCollection);

        //space and thread component modify timestamp update
        $space = $spaceLogic->modifySpaceComponentModifyTimestamp($space);
        $threadLogic = ThreadLogic::getInstance();
        $thread = $threadLogic->getThreadByTodoId($resultTodo->getId());
        $threadLogic->modifyThreadComponentModifyTimestamp($thread);

        //Todo通知設定登録（参加メンバー全員と登録者を通知設定する）

        //Todo既読ステータス登録（登録者は既読扱いにしたいため）

        //通知処理（Todoの通知設定者が対象）
        if (count($todoUserCollection) > 0) {
            // Get Notification destination
            $notification_user_ids = [];
            foreach ($todoUserCollection as $todoUser) {
                $notification_user_ids[$todoUser->getMemberID()]
                    = $todoUser->getMemberID();
            }

            require_once('grn/notification.csp');
            $spaceNotificationLogic = SpaceNotificationLogic::getInstance();
            $spaceNotificationLogic->sendTodoNotification($operationUser->getOID(),
                \GRN_NOTIFICATION_ACTION_CREATE_ID,
                $todo, $space, $notification_user_ids);
        }

        //Todo追加ログ出力
        //Log CreateSharedTodoLog
        $createSharedTodoLog = new CreateSharedTodoLog();
        $createSharedTodoLog->setSharedTodoId($resultTodo->getId());
        $createSharedTodoLog->setSharedTodoName($resultTodo->getTitle());
        $createSharedTodoLog->setSpaceId($space->getId());
        $createSharedTodoLog->setSpaceName($space->getSpaceName());

        $this->addUserInfo(
            $todoUserCollection,
            $operationUser->getOID(),
            SpaceMemberUtility::SYSTEM_DOESNT_USE_ENGLISH,
            SpaceMemberUtility::ENGLISH_DOESNT_DISPLAY_AFTER_NAME,
            SpaceMemberUtility::ORGANIZATION_DOESNT_DISPLAY_AFTER_NAME
        );

        $assignedUserNameList = [];
        /** @var TodoUser $eachUser */
        foreach ($todoUserCollection as $eachUser) {
            $assignedUserNameList[] = $eachUser->getDisplayName();
        }
        $createSharedTodoLog->setAssignList($assignedUserNameList);
        $this->getSpaceLogLogic()->info($createSharedTodoLog);

        //Full Text Search
        if (FtsApplication::isAvailable()) {
            $searchService = new IndexService();
            $searchService->updateSpaceIndex($space, $operationUser->getOID());
            $searchService->updateDiscussionIndex($space, $thread);
            $searchService->createTodoIndex($space, $thread, $todo);
            foreach ($resultFileCollection as $spaceFile) {
                $searchService->createFileIndex($space, $spaceFile, $thread,
                    $todo, null);
            }
        }

        return $resultTodo;
    }


    /**
     * Todoを変更する
     *
     * Attention: Use the method of checking the authority because it doesn't check the authority internally beforehand.
     *
     * @param     Todo               $todo
     * @param     TodoUserCollection $todoUserCollection
     * @param     CB_User            $operationUser \CB_User
     * @param     array              $fileArray     Optional    \GRN_File, or \GRN_ServerFile, or an element of $_FILES, or a path string of a file.
     *
     * @throws    GrnRequiredDataIsNotException         There is no information necessary for todo or todoUserCollection.
     * @throws    GrnDataNotFoundException              There is no TODO.
     * @throws    GrnDatabaseException                  Any error in the database.
     * @return    Todo                                  (modified todo object.)
     */
    public function modifyTodo(
        Todo $todo,
        TodoUserCollection $todoUserCollection,
        CB_User $operationUser,
        array $fileArray = []
    ) {
        //input data check
        $todo->isValidData(Todo::VALID_TYPE_MODIFY);
        /** @var TodoUser $todoUser */
        foreach ($todoUserCollection as $todoUser) {
            $todoUser->isValidData(TodoUser::VALID_TYPE_MODIFY);
        }

        $todoLogic = TodoLogic::getInstance();
        $spaceLogic = SpaceLogic::getInstance();

        //Todo変更
        $resultTodo = $todoLogic->modifyTodo($todo);

        $space = $spaceLogic->getSpaceByTodoId($resultTodo->getId(),
            LanguageStatus::STANDARD_LANGUAGE_CODE);

        //Todo担当者の変更
        $oldTodoUserCollection
            = $todoLogic->getTodoUserCollectionByTodoId($resultTodo->getId());
        $deleteTodoUserCollection
            = $oldTodoUserCollection->getNotIn($todoUserCollection);

        if (count($deleteTodoUserCollection) > 0) {
            $todoLogic->deleteTodoUsersByTodoIdTodoUserCollection($resultTodo->getId(),
                $deleteTodoUserCollection);
        }
        if (count($todoUserCollection) > 0) {
            $todoLogic->createUpdateTodoUsersByTodoUserCollection($resultTodo->getId(),
                $todoUserCollection);
        }
        $resultTodo->setTodoUserCollection($todoUserCollection);

        //Todo完了フラグの更新
        $todoLogic->modifyCompleteTodo($resultTodo->getId());

        //### modifiy attached files ### start
        $searchCondition = new SpaceFileSearchCondition();
        $searchCondition->setSearchScopeType(SpaceFileSearchCondition::SEARCH_SCOPE_TYPE_TODO);
        $searchCondition->setSearchScopeValue($resultTodo->getId());
        $fileLogic = SpaceFileLogic::getInstance();

        //An unnecessary file is deleted.
        $beforeFileCollection
            = $fileLogic->getSpaceFileCollection($searchCondition);
        /** @var SpaceFile $spaceFile */
        foreach ($beforeFileCollection as $spaceFile) {
            $key = $spaceFile->getId();
            if (array_key_exists($key, $fileArray)) {
                unset($fileArray[$key]);
            } else {
                //Log DeleteSharedTodoFileLog
                $deleteSharedTodoFileLog = new DeleteSharedTodoFileLog();
                $deleteSharedTodoFileLog->setFileId($spaceFile->getId());
                $deleteSharedTodoFileLog->setFileName($spaceFile->getGrnSpaceFileObject()
                                                                ->getCurrentBody()
                                                                ->get('name'));
                $deleteSharedTodoFileLog->setSharedTodoId($resultTodo->getId());
                $deleteSharedTodoFileLog->setSharedTodoName($resultTodo->getTitle());
                $deleteSharedTodoFileLog->setSpaceId($space->getId());
                $deleteSharedTodoFileLog->setSpaceName($space->getSpaceName());

                $fileLogic->deleteSpaceFile($spaceFile);

                $this->getSpaceLogLogic()->info($deleteSharedTodoFileLog);
                //Todo添付削除ログ出力
            }
        }

        //The file newly added is registered. 
        if (is_array($fileArray)) {
            foreach ($fileArray as $grnMixedFile) {
                $resultSpaceFile = $fileLogic->createSpaceFile($grnMixedFile,
                    $operationUser);

                //Todo添付登録ログ出力
                //Log CreateSharedTodoFileLog
                $createSharedTodoFileLog = new CreateSharedTodoFileLog();
                $createSharedTodoFileLog->setFileId($resultSpaceFile->getId());
                $createSharedTodoFileLog->setFileName($resultSpaceFile->getGrnSpaceFileObject()
                                                                      ->getCurrentBody()
                                                                      ->get('name'));
                $createSharedTodoFileLog->setSharedTodoId($resultTodo->getId());
                $createSharedTodoFileLog->setSharedTodoName($resultTodo->getTitle());
                $createSharedTodoFileLog->setSpaceId($space->getId());
                $createSharedTodoFileLog->setSpaceName($space->getSpaceName());
                $this->getSpaceLogLogic()->info($createSharedTodoFileLog);

                if (is_object($resultSpaceFile)) {
                    //Todoと添付ファイルの関連付けを登録
                    $todoLogic->createTodoFileReletion($resultTodo->getId(),
                        $resultSpaceFile->getId());
                }
            }
        }

        $afterFileCollection
            = $fileLogic->getSpaceFileCollection($searchCondition);
        $resultTodo->setSpaceFileCollection($afterFileCollection);
        //### modifiy attached files ### end

        //space and thread component modify timestamp update
        $space = $spaceLogic->modifySpaceComponentModifyTimestamp($space);
        $threadLogic = ThreadLogic::getInstance();
        $thread = $threadLogic->getThreadByTodoId($resultTodo->getId());
        $threadLogic->modifyThreadComponentModifyTimestamp($thread);


        //Todo既読ステータス更新（登録者以外を未読に変更）

        //通知処理（Todoの通知設定者が対象）
        $allTodoUserCollection = new TodoUserCollection();
        foreach ($todoUserCollection as $todoUser) {
            $allTodoUserCollection->appendBean($todoUser);
        }
        foreach ($deleteTodoUserCollection as $todoUser) {
            $allTodoUserCollection->appendBean($todoUser);
        }
        // 登録者がスペースにいるかどうか
        if (ValidateUtility::isNotNull($todo->getCreatorId())) {
            $spaceSearchCondition = new SpaceSearchCondition();
            $spaceService = SpaceService::getInstance();
            $spaceSearchCondition->addSearchSpaceId($space->getId());
            $spaceSearchCondition->setSearchParticipantUserId($todo->getCreatorId());
            $spaceSearchCondition->setSearchParticipantGroupIds(SpaceMemberUtility::getLoginUserGroupIds());
            $spaceSearchCondition->setSearchParticipantRoleIds(SpaceMemberUtility::getLoginUserRoleIds());
            $spaceCollection
                = $spaceService->searchSpaceBySearchCondition($spaceSearchCondition,
                $operationUser->getOID());
            if (count($spaceCollection) > 0) {
                //スペースメンバーにいるので、通知対象に含める
                $creator = new TodoUser();
                $creator->setMemberID($todo->getCreatorId());
                $creator->setMemberType(MemberLogic::TYPE_USER);
                $allTodoUserCollection->appendBean($creator);
            }
        }

        // Get Notification destination
        $notification_user_ids = [];
        foreach ($allTodoUserCollection as $todoUser) {
            $notification_user_ids[$todoUser->getMemberID()]
                = $todoUser->getMemberID();
        }

        $spaceNotificationLogic = SpaceNotificationLogic::getInstance();
        $spaceNotificationLogic->sendTodoNotification($operationUser->getOID(),
            \GRN_NOTIFICATION_ACTION_UPDATE_ID,
            $resultTodo, $space, $notification_user_ids);

        //Todo更新ログ出力
        //Log ModifySharedTodoLog
        $modifySharedTodoLog = new ModifySharedTodoLog();
        $modifySharedTodoLog->setSharedTodoId($resultTodo->getId());
        $modifySharedTodoLog->setSharedTodoName($resultTodo->getTitle());
        $modifySharedTodoLog->setSpaceId($space->getId());
        $modifySharedTodoLog->setSpaceName($space->getSpaceName());

        $this->addUserInfo(
            $todoUserCollection,
            $operationUser->getOID(),
            SpaceMemberUtility::SYSTEM_DOESNT_USE_ENGLISH,
            SpaceMemberUtility::ENGLISH_DOESNT_DISPLAY_AFTER_NAME,
            SpaceMemberUtility::ORGANIZATION_DOESNT_DISPLAY_AFTER_NAME
        );

        $assignedUserNameList = [];
        /** @var TodoUser $eachUser */
        $is_initialize = false;
        foreach ($todoUserCollection as $eachUser) {
            $assignedUserNameList[] = $eachUser->getDisplayName();
            $is_initialize = $eachUser->isInitialize();
        }
        $modifySharedTodoLog->setAssignList($assignedUserNameList);
        $modifySharedTodoLog->setAssigneesStatusInitialize($is_initialize);
        $this->getSpaceLogLogic()->info($modifySharedTodoLog);

        //Full Text Search
        if (FtsApplication::isAvailable()) {
            $searchService = new IndexService();
            $searchService->updateSpaceIndex($space, $operationUser->getOID());
            $searchService->updateDiscussionIndex($space, $thread);
            $searchService->updateTodoIndex($space, $thread, $todo);
            foreach ($afterFileCollection as $spaceFile) {
                $searchService->createFileIndex($space, $spaceFile, $thread,
                    $todo);
            }
        }

        return $resultTodo;
    }

    /**
     * Todoを完了にする
     *
     * Attention: Use the method of checking the authority because it doesn't check the authority internally beforehand.
     *
     * @param     string      $todoId        todo sequence id
     * @param     string      $todoUserId    user sequence id
     * @param     SpaceMember $operationUser user member object
     *
     * @throws    GrnInvalidArgumentException   todoId is not number. or todoUserId is not number.
     * @throws    GrnDataNotFoundException      There is no TODO. or There is no todo user.
     * @throws    GrnDatabaseException          Any error in the database.
     * @return    Todo
     */
    public function completedTodo(
        $todoId,
        $todoUserId,
        SpaceMember $operationUser
    ) {
        //input data check
        ValidateUtility::isNumber($todoId);
        ValidateUtility::isNumber($todoUserId);

        $todoLogic = TodoLogic::getInstance();
        $spaceLogic = SpaceLogic::getInstance();

        //Todoの取得
        $todo = $todoLogic->getTodo($todoId);
        $space = $spaceLogic->getSpaceByTodoId($todoId,
            LanguageStatus::STANDARD_LANGUAGE_CODE);

        //Todo変更(個人完了フラグを立てる)
        $modTodoUser = $todoLogic->getTodoUser($todoUserId, $todoId);
        $modTodoUser->setComplete(true);
        $todoLogic->modifyTodoUser($modTodoUser);


        //Todo変更(参加者全員が完了だったらTodo完了フラグを立てる)
        $isTodoComplete = true;
        $todoUserCollection
            = $todoLogic->getTodoUserCollectionByTodoId($todoId);
        /** @var TodoUser $todoUser */
        foreach ($todoUserCollection as $todoUser) {
            $isTodoComplete = $isTodoComplete && $todoUser->isComplete();
        }

        $todo->setComplete($isTodoComplete ? true : false);
        $todo->setModifier($operationUser);
        $resultTodo = $todoLogic->modifyTodo($todo);

        //Todo参加者を設定
        $resultTodo->setTodoUserCollection($todoUserCollection);

        //space and thread component modify timestamp update
        $space = $spaceLogic->modifySpaceComponentModifyTimestamp($space);
        $threadLogic = ThreadLogic::getInstance();
        $thread = $threadLogic->getThreadByTodoId($todoId);
        $threadLogic->modifyThreadComponentModifyTimestamp($thread);

        //Todo既読ステータス更新（登録者以外を未読に変更）

        //通知処理（Todoの通知設定者が対象）
        if (ValidateUtility::isNotNull($todo->getCreatorId())) {
            // 登録者がスペースにいるかどうか
            $spaceSearchCondition = new SpaceSearchCondition();
            $spaceService = SpaceService::getInstance();
            $spaceSearchCondition->addSearchSpaceId($space->getId());
            $spaceSearchCondition->setSearchParticipantUserId($todo->getCreatorId());
            $spaceSearchCondition->setSearchParticipantGroupIds(SpaceMemberUtility::getLoginUserGroupIds());
            $spaceSearchCondition->setSearchParticipantRoleIds(SpaceMemberUtility::getLoginUserRoleIds());
            $spaceCollection
                = $spaceService->searchSpaceBySearchCondition($spaceSearchCondition,
                $operationUser->getMemberID());
            if (count($spaceCollection) > 0) {
                //スペースメンバーにいるので、通知対象に含める
                $creator = new TodoUser();
                $creator->setMemberID($todo->getCreatorId());
                $creator->setMemberType(MemberLogic::TYPE_USER);
                $todoUserCollection->appendBean($creator);
            }
        }

        // Get Notification destination
        $notification_user_ids = [];
        foreach ($todoUserCollection as $todoUser) {
            $notification_user_ids[$todoUser->getMemberID()]
                = $todoUser->getMemberID();
        }

        $spaceNotificationLogic = SpaceNotificationLogic::getInstance();
        if ($isTodoComplete) {
            // 全員が完了したとき
            $spaceNotificationLogic->sendTodoNotification($operationUser->getMemberID(),
                \GRN_NOTIFICATION_ACTION_UPDATE_ID, $todo, $space,
                $notification_user_ids, null, false,
                $isTodoComplete);
        } else {
            // 一部の人が完了したときは、変更通知をする
            $spaceNotificationLogic->sendTodoNotification($operationUser->getMemberID(),
                \GRN_NOTIFICATION_ACTION_UPDATE_ID, $todo, $space,
                $notification_user_ids);
        }

        //Todo更新ログ出力
        if ($todo->isComplete()) {
            //Log FinishSharedTodoLog
            $finishSharedTodoLog = new FinishSharedTodoLog();
            $finishSharedTodoLog->setSharedTodoId($resultTodo->getId());
            $finishSharedTodoLog->setSharedTodoName($resultTodo->getTitle());
            $finishSharedTodoLog->setSpaceId($space->getId());
            $finishSharedTodoLog->setSpaceName($space->getSpaceName());
            $this->getSpaceLogLogic()->info($finishSharedTodoLog);
        }

        //Full Text Search
        if (FtsApplication::isAvailable()) {
            $searchService = new IndexService();
            $searchService->updateSpaceIndex($space,
                $operationUser->getMemberID());
            $searchService->updateDiscussionIndex($space, $thread);
            $searchService->updateTodoIndex($space, $thread, $todo);
        }

        return $resultTodo;
    }

    /**
     * complete Todos
     *
     * This method check the authorities
     *
     * @param     array       $todoIds       todo sequence ids
     * @param     int         $todoUserId    user sequence id
     * @param     SpaceMember $operationUser user member object
     *
     * @throws    GrnInvalidPermissionException
     */
    public function completeTodos(
        array $todoIds,
        $todoUserId,
        SpaceMember $operationUser
    ) {
        $threadLogic = ThreadLogic::getInstance();
        $spaceLogic = SpaceLogic::getInstance();

        foreach ($todoIds as $todoId) {
            $thread = $threadLogic->getThreadByTodoId($todoId);
            $space = $spaceLogic->getSpaceByThreadId($thread->getId(),
                LanguageStatus::STANDARD_LANGUAGE_CODE);
            if ( ! $this->hasTodoAccessControl(Authority::AUTHORITY_CODE_WRITE,
                $space->getId(), $thread->getId(),
                $todoId, $operationUser->getMemberID())
            ) {
                throw new GrnInvalidPermissionException(ErrorCode::GRN_TODO_NO_STATUS_MODIFY_PERMISSION);
            }
            $this->completedTodo($todoId, $todoUserId, $operationUser);
        }
    }

    /**
     * Todoを未完了にする
     *
     * Attention: Use the method of checking the authority because it doesn't check the authority internally beforehand.
     *
     * @param     string      $todoId        todo sequence id
     * @param     string      $todoUserId    user sequence id
     * @param     SpaceMember $operationUser user member object
     *
     * @throws    GrnInvalidArgumentException   todoId is not number. or todoUserId is not number.
     * @throws    GrnDataNotFoundException      There is no TODO. or There is no todo user.
     * @throws    GrnDatabaseException          Any error in the database.
     * @return    Todo                          (completed todo object.)
     */
    public function incompletedTodo(
        $todoId,
        $todoUserId,
        SpaceMember $operationUser
    ) {
        //input data check
        ValidateUtility::isNumber($todoId);
        ValidateUtility::isNumber($todoUserId);

        //Todoの取得
        $todoLogic = TodoLogic::getInstance();
        $todo = $todoLogic->getTodo($todoId);

        //Spaceの取得
        $spaceLogic = SpaceLogic::getInstance();
        $space = $spaceLogic->getSpaceByTodoId($todoId,
            LanguageStatus::STANDARD_LANGUAGE_CODE);

        //Todo変更(個人完了フラグを落とす)
        $modTodoUser = $todoLogic->getTodoUser($todoUserId, $todoId);
        $modTodoUser->setComplete(false);
        $todoLogic->modifyTodoUser($modTodoUser);

        //Todo変更(Todo完了フラグを落とす)
        $todo->setComplete(false);
        $todo->setModifier($operationUser);
        $resultTodo = $todoLogic->modifyTodo($todo);

        //Todo担当者を設定
        $todoUserCollection
            = $todoLogic->getTodoUserCollectionByTodoId($todoId);
        $resultTodo->setTodoUserCollection($todoUserCollection);

        //space and thread component modify timestamp update
        $space = $spaceLogic->modifySpaceComponentModifyTimestamp($space);
        $threadLogic = ThreadLogic::getInstance();
        $thread = $threadLogic->getThreadByTodoId($todoId);
        $threadLogic->modifyThreadComponentModifyTimestamp($thread);

        //Todo既読ステータス更新（登録者以外を未読に変更）

        //通知処理（Todoの通知設定者が対象）
        if (ValidateUtility::isNotNull($todo->getCreatorId())) {
            // 登録者がスペースにいるかどうか
            $spaceSearchCondition = new SpaceSearchCondition();
            $spaceService = SpaceService::getInstance();
            $spaceSearchCondition->addSearchSpaceId($space->getId());
            $spaceSearchCondition->setSearchParticipantUserId($todo->getCreatorId());
            $spaceSearchCondition->setSearchParticipantGroupIds(SpaceMemberUtility::getLoginUserGroupIds());
            $spaceSearchCondition->setSearchParticipantRoleIds(SpaceMemberUtility::getLoginUserRoleIds());

            $spaceCollection
                = $spaceService->searchSpaceBySearchCondition($spaceSearchCondition,
                $operationUser->getMemberID());
            if (count($spaceCollection) > 0) {
                //スペースメンバーにいるので、通知対象に含める
                $creator = new TodoUser();
                $creator->setId($todo->getCreatorId());
                $todoUserCollection->appendBean($creator);
            }
        }
        // Get Notification destination
        $notification_user_ids = [];
        foreach ($todoUserCollection as $todoUser) {
            $notification_user_ids[$todoUser->getMemberID()]
                = $todoUser->getMemberID();
        }

        $spaceNotificationLogic = SpaceNotificationLogic::getInstance();
        $spaceNotificationLogic->sendTodoNotification($operationUser->getMemberID(),
            \GRN_NOTIFICATION_ACTION_UPDATE_ID, $todo, $space,
            $notification_user_ids);

        //Todo更新ログ出力
        //TODO

        //Full Text Search
        if (FtsApplication::isAvailable()) {
            $searchService = new IndexService();
            $searchService->updateSpaceIndex($space,
                $operationUser->getMemberID());
            $searchService->updateDiscussionIndex($space, $thread);
            $searchService->updateTodoIndex($space, $thread, $todo);
        }

        return $resultTodo;
    }

    /**
     * Todoを削除する
     *
     * Attention: Use the method of checking the authority because it doesn't check the authority internally beforehand.
     *
     * @param     string $todoId          todo sequence id
     * @param     string $operationUserId user sequence id
     *
     * @throws    GrnInvalidArgumentException       todoId is not number. or operationUserId is not number.
     * @throws    GrnDataNotFoundException          There is no TODO.
     * @throws    GrnDatabaseException              Any error in the database.
     * @return    Todo                              (deleted todo object.)
     */
    public function deleteTodo($todoId, $operationUserId)
    {
        //input data check
        ValidateUtility::isNumber($todoId);
        ValidateUtility::isNumber($operationUserId);

        //Logic
        $todoLogic = TodoLogic::getInstance();
        $spaceLogic = SpaceLogic::getInstance();
        $commentLogic = CommentLogic::getInstance();

        $this->delAllFavourInTodo([$todoId]);
        //Todoの取得
        $todo = $todoLogic->getTodo($todoId);
        $space = $spaceLogic->getSpaceByTodoId($todoId,
            LanguageStatus::STANDARD_LANGUAGE_CODE);

        //Todo添付ファイル削除
        //要件次第では個別削除ではなく一括削除を行う可能性がある
        $searchCondition = new SpaceFileSearchCondition();
        $searchCondition->setSearchScopeType(SpaceFileSearchCondition::SEARCH_SCOPE_TYPE_TODO_ALL);
        $searchCondition->setSearchScopeValue($todoId);
        $fileLogic = SpaceFileLogic::getInstance();
        $resultFileCollection
            = $fileLogic->getSpaceFileCollection($searchCondition);
        foreach ($resultFileCollection as $spaceFile) {
            $fileLogic->deleteSpaceFile($spaceFile);

            //Todo添付ファイル削除ログ出力
            //If you want to write logs marking that the files related to this Todo are also removed,
            //you need to write the logic here.
            //But at now, such a log is not required.
        }

        //Todoコメント削除
        $commentLogic->deleteCommentByTodoId([$todo->getId()]);

        //Todoとスレッドの関連付けを削除
        //これはDELETE CASCADEで消えるので不要

        //Log DeleteSharedTodoLog
        $deleteSharedTodoLog = new DeleteSharedTodoLog();
        $deleteSharedTodoLog->setSharedTodoId($todo->getId());
        $deleteSharedTodoLog->setSharedTodoName($todo->getTitle());
        $deleteSharedTodoLog->setSpaceId($space->getId());
        $deleteSharedTodoLog->setSpaceName($space->getSpaceName());

        //通知処理（Todoの通知設定者が対象　　Todo通知設定削除前にやる必要がある。もしくは、あらかじめTodo通知設定を取得しておくとか）
        //完了済みのTodoは通知しない。
        if ( ! $todo->isComplete()) {
            $todoUserCollection
                = $todoLogic->getTodoUserCollectionByTodoId($todoId);

            // 登録者がスペースにいるかどうか
            if (ValidateUtility::isNotNull($todo->getCreatorId())) {
                $spaceSearchCondition = new SpaceSearchCondition();
                $spaceService = SpaceService::getInstance();
                $spaceSearchCondition->addSearchSpaceId($space->getId());
                $spaceSearchCondition->setSearchParticipantUserId($todo->getCreatorId());
                $spaceSearchCondition->setSearchParticipantGroupIds(SpaceMemberUtility::getLoginUserGroupIds());
                $spaceSearchCondition->setSearchParticipantRoleIds(SpaceMemberUtility::getLoginUserRoleIds());

                $spaceCollection
                    = $spaceService->searchSpaceBySearchCondition($spaceSearchCondition,
                    $operationUserId);
                if (count($spaceCollection) > 0) {
                    //スペースメンバーにいるので、通知対象に含める
                    $creator = new TodoUser();
                    $creator->setMemberID($todo->getCreatorId());
                    $creator->setMemberType(MemberLogic::TYPE_USER);
                    $todoUserCollection->appendBean($creator);
                }
            }

            // Get Notification destination
            $notification_user_ids = [];
            foreach ($todoUserCollection as $todoUser) {
                $notification_user_ids[$todoUser->getMemberID()]
                    = $todoUser->getMemberID();
            }

            $spaceNotificationLogic = SpaceNotificationLogic::getInstance();
            $spaceNotificationLogic->sendTodoNotification($operationUserId,
                \GRN_NOTIFICATION_ACTION_DELETE_ID, $todo,
                $space, $notification_user_ids);
        }

        //delete todo
        $resultTodo = $todoLogic->deleteTodo($todo);
        $this->getSpaceLogLogic()->info($deleteSharedTodoLog);

        //スレッド削除ログ出力

        //Full Text Search
        if (FtsApplication::isAvailable()) {
            $searchService = new IndexService();
            $searchService->deleteIndexByTodoId($todoId);
        }

        return $resultTodo;
    }


    /**
     *
     * @param Todo $todo
     *
     * @return CommentCollection
     */
    private function getCommentOfTodo($todo)
    {
        $commentSearchCondition = new CommentSearchCondition();
        $commentSearchCondition->setSearchScopeType(CommentSearchCondition::SEARCH_SCOPE_TYPE_TODO);
        $commentSearchCondition->setSearchScopeValue($todo->getId());

        $commentLogic = CommentLogic::getInstance();

        return $commentLogic->searchComment($commentSearchCondition);
    }

    //****************************************************************************************************************
    //**********************************             comment            **********************************************
    //****************************************************************************************************************
    /**
     * Create a todo comment.
     *
     * Attention: Use the method of checking the authority because it doesn't check the authority internally beforehand.
     *
     * @param     Comment $comment
     * @param     string  $todoId    Relationship todo sequence id
     * @param     CB_User $operationUser
     * @param     array   $fileArray Optional    \GRN_File, or \GRN_ServerFile, or an element of $_FILES, or a path string of a file.
     *
     * @throws    GrnInvalidArgumentException       todoId is not number.
     * @throws    GrnDataNotFoundException          There is no SPACE. or There is no TODO. or There is no THREAD. or There is no PARENT-COMMENT.
     * @throws    GrnDatabaseException              Any error in the database.
     * @return    Comment                           (Added comment object.)
     */
    public function createTodoComment(
        Comment $comment,
        $todoId,
        CB_User $operationUser,
        array $fileArray = []
    ) {
        //input check
        if (count($fileArray) == 0
            && ValidateUtility::isNull($comment->getContent())
        ) {
            throw new GrnInvalidArgumentException();
        }
        ValidateUtility::isNumber($todoId);

        $threadLogic = ThreadLogic::getInstance();
        $commentLogic = CommentLogic::getInstance();
        $spaceLogic = SpaceLogic::getInstance();
        $todoLogic = TodoLogic::getInstance();

        //#####   Completion Information(情報の補完)  ##### start
        $thread = $threadLogic->getThreadByTodoId($todoId);
        $newCommentNo
            = $commentLogic->incrementCommentSequenceNo($thread->getCommentSequenceNoId());
        $comment->setCommentNo($newCommentNo->getLastNo());

        $comment->setModifierId($comment->getCreatorId());
        $comment->setModifierName($comment->getCreatorName());
        //#####   Completion Information(情報の補完)  ##### end

        //This is for logging
        $space = $spaceLogic->getSpaceByThreadId($thread->getId(),
            LanguageStatus::STANDARD_LANGUAGE_CODE);
        $todo = $todoLogic->getTodo($todoId);

        //create comment
        $resultComment = $this->createComment($comment,
            $operationUser->getOID());

        //attached files
        $resultFileCollection = new SpaceFileCollection();
        $fileLogic = SpaceFileLogic::getInstance();
        $commentLogic = CommentLogic::getInstance();
        foreach ($fileArray as $grnMixedFile) {
            $resultSpaceFile = $fileLogic->createSpaceFile($grnMixedFile,
                $operationUser);

            if (is_object($resultSpaceFile)) {
                //コメントと添付ファイルの関連付けを登録
                $commentLogic->createCommentFileReletion($resultComment->getId(),
                    $resultSpaceFile->getId());
                $resultSpaceFile->setParentApplicationType(SpaceFile::PARENT_APPLICATION_TYPE_TODO_COMMENT);
                $resultSpaceFile->setParentApplicationId($resultComment->getId());

                //ToDoコメント添付登録ログ出力
                //Log CreateSharedTodoFollowFile
                $createSharedTodoFollowFileLog
                    = new CreateSharedTodoFollowFileLog();
                $createSharedTodoFollowFileLog->setFileId($resultSpaceFile->getId());
                $createSharedTodoFollowFileLog->setFileName($resultSpaceFile->getGrnSpaceFileObject()
                                                                            ->getCurrentBody()
                                                                            ->get('name'));
                $createSharedTodoFollowFileLog->setSharedTodoId($todo->getId());
                $createSharedTodoFollowFileLog->setSharedTodoName($todo->getTitle());
                $createSharedTodoFollowFileLog->setFollowId($resultComment->getId());
                $this->getSpaceLogLogic()->info($createSharedTodoFollowFileLog);

                $resultFileCollection->appendBean($resultSpaceFile);
            }
        }
        $resultComment->setSpaceFileCollection($resultFileCollection);


        //コメントとTodoの関連付けを登録
        $todoLogic = TodoLogic::getInstance();
        $todoLogic->createTodoCommentReletion($todoId, $resultComment->getId());

        //space and thread component modify timestamp update
        $space = $spaceLogic->modifySpaceComponentModifyTimestamp($space);
        $threadLogic->modifyThreadComponentModifyTimestamp($thread);

        //Todoコメント既読ステータス登録（登録者は既読扱いにしたいため）


        //通知処理（Todoの通知設定者が対象）
        $commentFlag = true;
        $todoUserCollection
            = $todoLogic->getTodoUserCollectionByTodoId($todoId);
        // 登録者がスペースにいるかどうか
        if (ValidateUtility::isNotNull($todo->getCreatorId())) {
            $spaceSearchCondition = new SpaceSearchCondition();
            $spaceService = SpaceService::getInstance();
            $spaceSearchCondition->addSearchSpaceId($space->getId());
            $spaceSearchCondition->setSearchParticipantUserId($todo->getCreatorId());
            $spaceSearchCondition->setSearchParticipantGroupIds(SpaceMemberUtility::getLoginUserGroupIds());
            $spaceSearchCondition->setSearchParticipantRoleIds(SpaceMemberUtility::getLoginUserRoleIds());

            $spaceCollection
                = $spaceService->searchSpaceBySearchCondition($spaceSearchCondition,
                $operationUser->getOID());
            if (count($spaceCollection) > 0) {
                //スペースメンバーにいるので、通知対象に含める
                $creator = new TodoUser();
                $creator->setMemberID($todo->getCreatorId());
                $creator->setMemberType(MemberLogic::TYPE_USER);
                $todoUserCollection->appendBean($creator);
            }
        }

        // Get Notification destination
        $notification_user_ids = [];
        foreach ($todoUserCollection as $todoUser) {
            $notification_user_ids[$todoUser->getMemberID()]
                = $todoUser->getMemberID();
        }

        $spaceNotificationLogic = SpaceNotificationLogic::getInstance();
        $spaceNotificationLogic->sendTodoNotification($operationUser->getOID(),
            \GRN_NOTIFICATION_ACTION_UPDATE_ID,
            $todo, $space, $notification_user_ids, $resultComment,
            $commentFlag);

        //ToDoコメント登録ログ出力
        //Log CreateSharedTodoFollowLog
        $createSharedTodoFollowLog = new CreateSharedTodoFollowLog();
        $createSharedTodoFollowLog->setFollowId($resultComment->getId());
        $createSharedTodoFollowLog->setSpaceId($space->getId());
        $createSharedTodoFollowLog->setSpaceName($space->getSpaceName());
        $createSharedTodoFollowLog->setSharedTodoId($todo->getId());
        $createSharedTodoFollowLog->setSharedTodoName($todo->getTitle());
        $this->getSpaceLogLogic()->info($createSharedTodoFollowLog);

        //Full Text Search
        if (FtsApplication::isAvailable()) {
            $searchService = new IndexService();
            $searchService->updateSpaceIndex($space, $operationUser->getOID());
            $searchService->updateDiscussionIndex($space, $thread);
            $searchService->createTodoCommentIndex($space, $thread, $todo,
                $resultComment);
            foreach ($resultFileCollection as $spaceFile) {
                $searchService->createFileIndex($space, $spaceFile, $thread,
                    $todo, $comment);
            }
        }

        return $resultComment;
    }


    /**
     * Todoコメントを削除する
     *
     * Attention: Use the method of checking the authority because it doesn't check the authority internally beforehand.
     *
     * @param     string      $commentId     comment sequence id
     * @param     string      $todoId        todo sequence id
     * @param     SpaceMember $operationUser SpaceMember
     *
     * @throws    GrnInvalidArgumentException       todoId is not number. or todoId is not number.
     * @throws    GrnDataNotFoundException          There is no COMMENT. (ToDoコメントの範囲内を条件に付ける。他のアプリコメントをこのメソッドから削除させないようにするため)
     * @throws    GrnDatabaseException              Any error in the database.
     * @return    Comment                           (deleted comment object.)
     */
    public function deleteTodoComment(
        $commentId,
        $todoId,
        SpaceMember $operationUser
    ) {
        //input check
        ValidateUtility::isNumber($commentId);
        ValidateUtility::isNumber($todoId);

        $this->delFavourInComment([$commentId]);
        //ToDoコメント添付ファイル削除
        $searchCondition = new SpaceFileSearchCondition();
        $searchCondition->setSearchScopeType(SpaceFileSearchCondition::SEARCH_SCOPE_TYPE_COMMENT);
        $searchCondition->setSearchScopeValue($commentId);
        $fileLogic = SpaceFileLogic::getInstance();
        $resultFileCollection
            = $fileLogic->getSpaceFileCollection($searchCondition);
        foreach ($resultFileCollection as $spaceFile) {
            $fileLogic->deleteSpaceFile($spaceFile);

            //ToDoコメント添付ファイル削除ログ出力
            //If you want to write logs marking that the files related to this Comment are also removed,
            //you need to write the logic here.
            //But at now, such a log is not required.

        }

        //delete comment
        $resultComment = $this->deleteComment($commentId, $operationUser);

        //通知処理（Todoの通知設定者が対象）

        //コメント削除ログ出力
        //Log DeleteSharedTodoFollowLog
        $spaceLogic = SpaceLogic::getInstance();
        $space = $spaceLogic->getSpaceByTodoId($todoId,
            LanguageStatus::STANDARD_LANGUAGE_CODE);
        $todoLogic = TodoLogic::getInstance();
        $todo = $todoLogic->getTodo($todoId);

        $deleteSharedTodoFollowLog = new DeleteSharedTodoFollowLog();
        $deleteSharedTodoFollowLog->setFollowId($resultComment->getId());
        $deleteSharedTodoFollowLog->setSharedTodoId($todo->getId());
        $deleteSharedTodoFollowLog->setSharedTodoName($todo->getTitle());
        $deleteSharedTodoFollowLog->setSpaceId($space->getId());
        $deleteSharedTodoFollowLog->setSpaceName($space->getSpaceName());
        $this->getSpaceLogLogic()->info($deleteSharedTodoFollowLog);

        //Full Text Search
        if (FtsApplication::isAvailable()) {
            $searchService = new IndexService();
            $searchService->deleteIndexByCommentId($commentId);
        }

        return $resultComment;
    }


    //***************************************************************************************************************
    //**********************************           space file             *******************************************
    //***************************************************************************************************************
    /**
     * Delete the todo file
     *
     * Attention: Use the method of checking the authority because it doesn't check the authority internally beforehand.
     *
     * @param     string  $todoId todo sequence id
     * @param     string  $fileId file sequence id
     * @param     CB_User $operationUser
     *
     * @throws    GrnInvalidArgumentException       todoId is not number. or fileId is not number
     * @throws    GrnDataNotFoundException          There is no todo. or There is no space-file
     * @throws    GrnDatabaseException              Any error in the database.
     */
    public function deleteTodoFile($todoId, $fileId, CB_User $operationUser)
    {
        //input check
        ValidateUtility::isNumber($todoId);
        ValidateUtility::isNumber($fileId);


        //スペースファイルを取得
        $fileLogic = SpaceFileLogic::getInstance();
        $spaceFile = $fileLogic->getSpaceFile($fileId);

        //対象Todoを取得
        $todoLogic = TodoLogic::getInstance();
        $todo = $todoLogic->getTodo($todoId);

        //in order to output log, 
        $spaceLogic = SpaceLogic::getInstance();
        $space = $spaceLogic->getSpaceByTodoId($todo->getId(),
            LanguageStatus::STANDARD_LANGUAGE_CODE);

        //Completion Information(情報の補完)
        $todo->setModifierId($operationUser->getOID());
        $todo->setModifierName($operationUser->get('display_name'));
        $todo = $todoLogic->modifyTodo($todo);

        //Log DeleteSharedTodoFollowFile
        $deleteSharedTodoFile = new DeleteSharedTodoFileLog();
        $deleteSharedTodoFile->setFileId($spaceFile->getId());
        $deleteSharedTodoFile->setFileName($spaceFile->getGrnSpaceFileObject()
                                                     ->getCurrentBody()
                                                     ->get('name'));
        $deleteSharedTodoFile->setSharedTodoId($todo->getId());
        $deleteSharedTodoFile->setSharedTodoName($todo->getTitle());
        $deleteSharedTodoFile->setSpaceId($space->getId());
        $deleteSharedTodoFile->setSpaceName($space->getSpaceName());

        //Todo添付ファイル削除
        $fileLogic->deleteSpaceFile($spaceFile);

        //通知処理（Todoの通知設定者が対象）必要なのかPMに要確認
        //TODO

        //Todo添付ファイル削除ログ出力
        $this->getSpaceLogLogic()->info($deleteSharedTodoFile);

        //Full Text Search
        if (FtsApplication::isAvailable()) {
            $threadLogic = ThreadLogic::getInstance();
            $thread = $threadLogic->getThreadByTodoId($todoId);
            $searchService = new IndexService();
            $searchService->updateTodoIndex($space, $thread, $todo);
        }
    }


    /**
     * Delete the comment file
     *
     * Attention: Use the method of checking the authority because it doesn't check the authority internally beforehand.
     *
     * @param     string $commentId comment sequence id
     * @param     string $fileId    file sequence id
     *
     * @throws    GrnInvalidArgumentException       commentId is not number. or fileId is not number
     * @throws    GrnDataNotFoundException          There is no space-file
     * @throws    GrnDatabaseException              Any error in the database.
     */
    public function deleteTodoCommentFile($commentId, $fileId)
    {
        //input check
        ValidateUtility::isNumber($commentId);
        ValidateUtility::isNumber($fileId);

        $spaceLogic = SpaceLogic::getInstance();
        $todoLogic = TodoLogic::getInstance();
        $fileLogic = SpaceFileLogic::getInstance();

        //スペースファイルを取得
        $spaceFile = $fileLogic->getSpaceFile($fileId);
        $todo = $todoLogic->getTodoByCommentId($commentId);
        $space = $spaceLogic->getSpaceByTodoId($todo->getId(),
            LanguageStatus::STANDARD_LANGUAGE_CODE);

        //必要なのかPMに要確認
        //コメント添付ファイル削除したときに、コメントの更新日時をUPDATEする必要がある場合は、ここにコメント更新処理を追加する。
        //もし追加する場合、画面側にはコメントの更新機能は無いので$this->updateComment()は不要。$commentLogic->updateComment()を追加する。

        //Log DeleteSharedTodoFollowFileLog
        $deleteSharedTodoFollowFileLog = new DeleteSharedTodoFollowFileLog();
        $deleteSharedTodoFollowFileLog->setFileId($spaceFile->getId());
        $deleteSharedTodoFollowFileLog->setFileName($spaceFile->getGrnSpaceFileObject()
                                                              ->getCurrentBody()
                                                              ->get('name'));
        $deleteSharedTodoFollowFileLog->setFollowId($commentId);
        $deleteSharedTodoFollowFileLog->setSharedTodoId($todo->getId());
        $deleteSharedTodoFollowFileLog->setSharedTodoName($todo->getTitle());
        $deleteSharedTodoFollowFileLog->setSpaceId($space->getId());
        $deleteSharedTodoFollowFileLog->setSpaceName($space->getSpaceName());

        //コメント添付ファイル削除
        $fileLogic->deleteSpaceFile($spaceFile);

        //Todoコメント添付ファイル削除ログ出力
        $this->getSpaceLogLogic()->info($deleteSharedTodoFollowFileLog);
    }

    /**
     * check whether the notification is confirmed.
     *
     * @param   string $userId
     * @param   string $todoId
     *
     * @return  boolean
     */
    public function isNotConfirmedTodoNotification($userId, $todoId)
    {
        return $this->isNotConfirmedNotification($userId,
            \GrnSpaceApplication::GRN_TODO_SUB_MODULE_ID, $todoId);
    }

    /**
     * confirm the notification of todo application.
     *
     * @param   string $userId
     * @param   Todo   $todo
     *
     */
    public function confirmTodoNotification($userId, Todo $todo)
    {
        $timestamp = new \CB_TimeStamp();
        $timestamp->unix_ts = time();

        $subModuleId = \GrnSpaceApplication::GRN_TODO_SUB_MODULE_ID;

        $spaceNotificationLogic = SpaceNotificationLogic::getInstance();
        $spaceNotificationLogic->confirmNotification($userId, $todo->getId(),
            $timestamp, $subModuleId);
    }

    /**
     * @param array $discussionIds
     *
     * @return array
     */
    public function getTodoIdByDiscussionId(array $discussionIds)
    {
        $logic = TodoLogic::getInstance();

        return $logic->getTodoIdByDiscussionId($discussionIds);
    }

    /**
     * Delete favours in todo body and comment.
     *
     * @param  array $todoIds
     */
    public function delAllFavourInTodo(array $todoIds)
    {
        $favourService = new FavourService();
        $favourService->deleteMultiFavour(\GrnSpaceApplication::GRN_SPACE_MODULE_ID,
            \GrnSpaceApplication::FAVOUR_TODO_BODY,
            $todoIds,
            \GrnSpaceApplication::GRN_TODO_SUB_MODULE_ID);

        $logic = TodoLogic::getInstance();
        $todoCmtIds = $logic->getTodoCommentIdByTodoId($todoIds);
        $this->delFavourInComment($todoCmtIds);
    }

    /**
     * Delete the favour in comment.
     *
     * @param  array $commentIds
     */
    public function delFavourInComment(array $commentIds)
    {
        $favourService = new FavourService();
        $favourService->deleteMultiFavour(\GrnSpaceApplication::GRN_SPACE_MODULE_ID,
            \GrnSpaceApplication::FAVOUR_TODO_COMMENT,
            $commentIds,
            \GrnSpaceApplication::GRN_TODO_SUB_MODULE_ID);
    }

    /**
     * @param $todo_id_list
     * @param $target_category_id
     *
     * @return bool|\mysqli_result
     */
    public function moveTodoList($todo_id_list, $target_category_id)
    {
        $todoLogic = TodoLogic::getInstance();

        return $todoLogic->moveTodoList($todo_id_list, $target_category_id);
    }

    /**
     * @param $space_id
     * @param $login_id
     *
     * @return array
     */
    public function getNoSpaceMemberIds($space_id, $login_id)
    {
        $space_service = SpaceService::getInstance();
        $todo_logic = TodoLogic::getInstance();

        $category_id = $this->getTodoRootCategoryId($space_id);

        $condition = new TodoSearchCondition();
        $condition->setSearchCategoryId($category_id);
        $all_todos = $this->searchTodoBySearchCondition($condition, $login_id);

        $logical_deleted_user_ids = $this->getLogicalDeletedUserIds();
        $now_space_member_ids
            = $space_service->getSpaceUserIdsArrayOfUserOnly($space_id,
            $login_id);

        $result = [];


        $todo_user_ids
            = $todo_logic->getTodoUserIDsFromTodoCollection($all_todos);
        /** @var TodoUser $todo_user */
        foreach ($todo_user_ids as $member_id) {
            $is_logical_deleted = isset($logical_deleted_user_ids[$member_id]);
            $is_deleted = empty($member_id);
            if ($is_logical_deleted || $is_deleted) {
                continue;
            }

            $is_out_of_space_member
                = ! isset($now_space_member_ids[$member_id]);
            if ($is_out_of_space_member) {
                $result[$member_id] = $member_id;
            }
        }

        return $result;
    }

    /**
     * @return array
     */
    protected function getLogicalDeletedUserIds()
    {
        return array_flip(cb_lwc_uum()->getUserIdsTmpDelete());
    }

    /**
     * @param $space_id
     *
     * @return string
     */
    public function getTodoRootCategoryId($space_id)
    {
        return $this->getApplicationRootCategory($space_id,
            Application::APPLICATION_CODE_TODO)->getId();
    }

    /**
     * @param array[] $todo_users
     * @param string  $space_id
     * @param string  $operation_user_id
     *
     * @return array
     */
    public function getTodoMemberCollectionArrayOfJudgedIfMember(
        $todo_users,
        $space_id,
        $operation_user_id
    ) {
        $todo_logic = TodoLogic::getInstance();

        return $todo_logic->getTodoMemberCollectionArrayOfJudgedIfMember($todo_users,
            $space_id, $operation_user_id);
    }

    /**
     * @param TodoUserCollection $todo_user_collection
     * @param                    $space_id
     *
     * @return TodoUserCollection
     */
    public function filterByCurrentSpaceMemberOnly(
        TodoUserCollection $todo_user_collection,
        $space_id
    ) {
        $login_user_id = cb_get_login_user_id();
        $now_member_ids = SpaceService::getInstance()
                                      ->getSpaceUserIdsArrayOfUserOnly($space_id,
                                          $login_user_id);

        $result = new TodoUserCollection();
        /** @var TodoUser $todo_user */
        foreach ($todo_user_collection as $todo_user) {
            if (isset($now_member_ids[$todo_user->getMemberID()])) {
                $result->appendBean($todo_user);
            }
        }

        return $result;
    }
}
