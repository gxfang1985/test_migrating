<?php

namespace grn\space\service;

use grn\grn\MemberLogic;
use grn\space\common\logic\SpaceMemberLogic;
use grn\space\data\bean\SpaceUser;
use grn\space\data\collection\ThreadCollection;
use grn\space\data\collection\FolderCollection;
use grn\space\data\bean\MemberOpenStatus;
use grn\space\common\exception\GrnKintoneException;
use grn\space\data\condition\FolderSearchCondition;
use grn\space\data\condition\SpaceWithFileSearchCondition;
use grn\space\common\data\collection\ApplicationLocalCollection;
use grn\space\common\logic\CommentLogic;
use grn\space\data\bean\log\ExportCategoryLog;
use grn\space\data\bean\log\ExportCategoryLocalLog;
use grn\space\data\bean\log\ImportModifyCategoryLocalLog;
use grn\space\data\bean\log\ImportCategoryLocalLog;
use grn\space\data\bean\log\ImportDeleteCategoryLocalLog;
use grn\space\data\bean\log\ImportCategoryLog;
use grn\space\data\bean\log\MoveSpaceLog;
use grn\space\data\bean\Folder;
use grn\space\common\exception\GrnIllegalOperationException;
use grn\space\common\exception\GrnInvalidArgumentException;
use grn\space\data\bean\log\MoveCategoryLog;
use grn\space\data\bean\log\DeleteCategoryLog;
use grn\space\data\bean\log\ModifyCategoryLocalLog;
use grn\space\data\bean\log\DeleteCategoryLocalLog;
use grn\space\data\bean\log\ModifyCategoryLog;
use grn\space\data\bean\log\CreateCategoryLocalLog;
use grn\space\data\bean\log\CreateCategoryLog;
use grn\space\data\bean\log\DeleteAppManageLog;
use grn\space\data\bean\log\DeleteSpaceLog;
use grn\space\data\bean\log\ModifySpaceLocalLog;
use grn\space\data\bean\log\DeleteSpaceLocalLog;
use grn\space\data\bean\log\ModifySpaceLog;
use grn\space\logic\ThreadLogic;
use grn\space\logic\TodoLogic;
use grn\space\data\bean\Thread;
use grn\space\data\bean\log\CreateThreadLog;
use grn\space\data\bean\log\CreateSpaceLocalLog;
use grn\space\common\utility\SpaceMemberUtility;
use grn\space\common\logic\legacy\SpaceLogLogic;
use grn\space\data\bean\log\CreateSpaceLog;
use grn\space\logic\ApplicationTemplateLogic;
use grn\space\data\collection\SpaceLocalCollection;
use grn\space\data\bean\SpaceMemoOpenStatus;
use grn\space\common\logic\IconLogic;
use grn\space\common\service\ServiceAbstract;
use grn\space\common\data\bean\Authority;
use grn\space\common\data\bean\Application;
use grn\space\common\data\bean\Category;
use grn\space\common\data\bean\CategoryLocal;
use grn\space\common\data\bean\LanguageStatus;
use grn\space\common\data\bean\SpaceMember;
use grn\space\common\data\bean\SpaceRole;
use grn\space\common\data\collection\IconCollection;
use grn\space\common\data\collection\CategoryCollection;
use grn\space\common\data\collection\CategoryLocalCollection;
use grn\space\common\data\collection\SpaceMemberCollection;
use grn\space\common\data\condition\CategorySearchCondition;
use grn\space\common\data\condition\IconSearchCondition;
use grn\space\common\data\condition\ApplicationSearchCondition;
use grn\space\common\logic\AccessControlListLogic;
use grn\space\common\logic\CategoryLogic;
use grn\space\common\logic\SpaceFileLogic;
use grn\space\common\utility\ValidateUtility;
use grn\space\data\bean\Space;
use grn\space\data\bean\SpaceAccessControlList;
use grn\space\data\bean\SpaceApplication;
use grn\space\data\bean\SpaceMemo;
use grn\space\data\collection\SpaceAccessControlListCollection;
use grn\space\data\collection\SpaceCollection;
use grn\space\data\collection\SpaceUserCollection;
use grn\space\data\condition\SpaceApplicationSearchCondition;
use grn\space\data\condition\SpaceSearchCondition;
use grn\space\data\condition\SpaceUserSearchCondition;
use grn\space\data\condition\ThreadSearchCondition;
use grn\space\logic\SpaceLogic;
use grn\space\logic\SpaceAccessControlListLogic;
use grn\space\logic\ApplicationLogic;
use grn\space\logic\SpaceApplicationLogic;
use grn\space\logic\SpaceNotificationLogic;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\common\exception\ErrorCode;
use grn\fts\Application as FtsApplication;
use grn\fts\space\IndexService;
use grn\space\logic\FolderLogic;

/**
 * アプリケーションサービス層
 * この層は、クライアント層からの要求を、ビジネスロジック層を利用して実現する
 *
 * スペースサービスクラス
 * クライアント層からのスペースアプリケーションに対する全ての要求を引き受ける
 */
class SpaceService extends ServiceAbstract implements SpaceCategorySearch
{
    /**
     * category name is necessary.
     */
    const   CATEGORY_NAME_IS_NECESSARY = true;

    /**
     * category name is unnecessary.
     */
    const   CATEGORY_NAME_IS_UNNECESSARY = false;

    /**
     * Search result authority disregard.
     */
    const   AUTHORITY_DISREGARD = true;

    /**
     * refer to the authority.
     */
    const   AUTHORITY_UNDISREGARD = false;

    /**
     *  memo open
     */
    const   SPACE_MEMO_OPEN = true;

    /**
     *  memo close
     */
    const   SPACE_MEMO_CLOSE = false;

    private static $_instance = null;

    const   UNCATEGORIED = -1;

    /**
     * コンストラクタ
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Get Instance(Singleton pattern)
     *
     * @return SpaceService $_instance
     */
    public static function getInstance()
    {
        if (is_null(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    //***************************************************************************************************************
    //**********************************             relation              ******************************************
    //***************************************************************************************************************
    /**
     * Does a specified argument has the relation?
     *
     * Access control is not used.
     *
     * @param     string $spaceId       space sequence id
     * @param     string $applicationId application sequence id
     * @param     string $language      language code
     *
     * @throws    GrnInvalidArgumentException   spaceId is not number. or applicationId is not number
     * @throws    \grn\space\common\exception\GrnDatabaseException
     * @return    boolean       TRUE:has relation    FALSE:do not has a relation
     */
    public function hasRelationSpaceApplication(
        $spaceId,
        $applicationId,
        $language
    ) {
        ValidateUtility::isNumber($spaceId);
        ValidateUtility::isNumber($applicationId);

        try {
            $logic = SpaceApplicationLogic::getInstance();
            $logic->get($spaceId, $applicationId, $language);
        } catch (GrnDataNotFoundException $exception) {
            return false;
        }

        return true;
    }

    /**
     * Does a specified argument has the relation?
     *
     * Access control is not used.
     *
     * @param     string $categoryId      category sequence id
     * @param     string $operationUserId user sequence id
     *
     * @throws    \grn\space\common\exception\GrnDatabaseException
     * @return    boolean       TRUE:has relation    FALSE:do not has a relation
     */
    private function _hasRelationSpaceCategory($categoryId, $operationUserId)
    {
        try {
            $rootCategory = $this->getSpaceRootCategory($operationUserId);
            $categoryLogic = CategoryLogic::getInstance();
            $categoryLogic->getCategoryByAncestorCategoryIdDescendantCategoryId($rootCategory->getId(),
                $categoryId, LanguageStatus::STANDARD_LANGUAGE_CODE);
        } catch (GrnDataNotFoundException $exception) {
            return false;
        }

        return true;
    }

    //****************************************************************************************************************
    //**********************************             authority              ******************************************
    //****************************************************************************************************************
    /**
     * As for target SPACE-CATEGORY, is access control possible on the condition of arguments?
     *
     * @param     string $authorityCode   The constant has been defined in Authority class
     * @param     string $spaceCategoryId category sequence id
     * @param     string $operationUserId user sequence id
     *
     * @throws    GrnInvalidArgumentException       authorityCode is not constant. or spaceCategoryId is not number. or operationUserId is not number.
     * @throws    \grn\space\common\exception\GrnDatabaseException              Any error in the database.
     * @return    boolean       TRUE:It has the access control.     FALSE:It doesn't have the access control.
     */
    public function hasSpaceCategoryAccessControl(
        $authorityCode,
        $spaceCategoryId,
        $operationUserId
    ) {
        return true;
    }


    /**
     * As for target SPACE, is access control possible on the condition of arguments?
     *
     * @param     string $authorityCode   The constant has been defined in Authority class
     * @param     string $spaceId         space sequence id
     * @param     string $operationUserId user sequence id
     *
     * @throws    GrnInvalidArgumentException       authorityCode is not constant. or spaceId is not number. or operationUserId is not number.
     * @throws    \grn\space\common\exception\GrnDatabaseException              Any error in the database.
     * @return    boolean       TRUE:It has the access control.     FALSE:It doesn't have the access control.
     */
    public function hasSpaceAccessControl(
        $authorityCode,
        $spaceId,
        $operationUserId
    ) {
        //input check
        ValidateUtility::isIn($authorityCode
            , [
                Authority::AUTHORITY_CODE_READ_SUMMARY
                ,
                Authority::AUTHORITY_CODE_READ_DETAIL
                ,
                Authority::AUTHORITY_CODE_WRITE
                ,
                Authority::AUTHORITY_CODE_SYSTEM_PRIVILEGE
                ,
                Authority::AUTHORITY_CODE_OPERATION_PRIVILEGE
            ]
            , ValidateUtility::DISABLE_EMPTY);
        ValidateUtility::isNumber($spaceId);
        ValidateUtility::isNumber($operationUserId);


        //運用管理
        //  前提条件：スペース閲覧条件が満たされていること（決めの問題で不要になる：不要例：施設グループ）
        //  ※3.5.0では設定画面がない。設定画面があった場合、システム管理者が運用管理者の閲覧権限を削除出来る。
        //    現在は前提条件が不要を想定して何もしていない。必要な場合はこのメソッド内で対応する必要がある
        //書込
        //  前提条件：スペース閲覧条件が満たされていること
        //  ※3.5.0では設定画面がない。設定画面があったとしても「閲覧なし、書込あり」の状態を登録できないようにしているので、この前提条件をプログラムに含む必要はない
        $spaceAclLogic = SpaceAccessControlListLogic::getInstance();
        $hasAccessControl
            = $spaceAclLogic->hasSpaceAccessControl($authorityCode,
            $spaceId, $operationUserId);

        if ($hasAccessControl === false) {
            if (($authorityCode == Authority::AUTHORITY_CODE_READ_DETAIL)
                || ($authorityCode
                    == Authority::AUTHORITY_CODE_SYSTEM_PRIVILEGE)
            ) {
                $hasAccessControl
                    = $this->_isSpaceAdministrator($operationUserId);
            }
        }

        return $hasAccessControl;
    }



    //****************************************************************************************************************
    //**********************************             other              **********************************************
    //****************************************************************************************************************
    /**
     * Searches for the icon.
     *
     * @param     \grn\space\common\data\condition\IconSearchCondition $iconSearchCondition
     * @param     string                                               $operationUserId user sequence id
     *
     * @throws    \grn\space\common\exception\GrnRequiredDataIsNotException    There is no information necessary for searchConditionObj.
     * @throws    GrnInvalidArgumentException        operationUserId is not number.
     * @throws    \grn\space\common\exception\GrnDatabaseException
     * @return    IconCollection
     */
    public function searchIconBySearchCondition(
        IconSearchCondition $iconSearchCondition,
        $operationUserId
    ) {
        ValidateUtility::isNumber($operationUserId);

        $iconLogic = IconLogic::getInstance();

        return $iconLogic->searchForIcons($iconSearchCondition);
    }


    //****************************************************************************************************************
    //**********************************           category             **********************************************
    //****************************************************************************************************************
    /**
     * Get to the root category of Space.
     *
     * Attention: Use the method of checking the authority because it doesn't check the authority internally beforehand.
     *
     * @param     string $operationUserId user sequence id
     * @param     string $languageCode    dispaly language code. The standard is display at STANDARD_LANGUAGE_CODE.
     *
     * @throws    GrnInvalidArgumentException       languageCode is not language code.
     * @throws GrnDataNotFoundException             When the specified category is not found.
     * @throws \grn\space\common\exception\GrnDatabaseException                 Any error in the database.
     * @return    Category
     */
    public function getSpaceRootCategory(
        $operationUserId,
        $languageCode = LanguageStatus::STANDARD_LANGUAGE_CODE
    ) {
        ValidateUtility::isNumber($operationUserId);
        ValidateUtility::isLanguageCode($languageCode);

        require_once('fw/profile.csp');
        $applicationProfile = cb_get_system_profile('grn.common.application');
        $applicationProfile->getAttribute('space_root_category',
            $spaceRootCategoryCode);

        $categoryObj
            = $this->_getSpaceCategoryByCategoryCode($spaceRootCategoryCode,
            $operationUserId, $languageCode);

        return $categoryObj;
    }

    /**
     * Get to the category of Space.
     *
     * Attention: Because it is private, all is not checked.
     *
     * @param     string $categoryCode    category code.
     * @param     string $operationUserId user sequence id
     * @param     string $languageCode    display language code.
     *
     * @throws GrnDataNotFoundException             When the specified category is not found.
     * @throws \grn\space\common\exception\GrnDatabaseException                 Any error in the database.
     * @return    Category
     */
    private function _getSpaceCategoryByCategoryCode(
        $categoryCode,
        $operationUserId,
        $languageCode
    ) {
        //スレッド参照
        $categoryLogic = CategoryLogic::getInstance();
        $categoryObj
            = $categoryLogic->getCategoryByCategoryCode($categoryCode,
            $operationUserId, $languageCode);

        return $categoryObj;
    }


    /**
     * Update(create or modify or delete) to the category local of Space.
     *
     * Attention: Use the method of checking the authority because it doesn't check the authority internally beforehand.
     *
     * @param     string                                    $categoryCode  category code
     * @param     \grn\space\common\data\bean\CategoryLocal $categoryLocal CategoryLocal
     * @param     \grn\space\common\data\bean\SpaceMember   $operationUser user member object
     *
     * @throws    GrnInvalidArgumentException               categoryCode is null. or operationUserId is not number.
     * @throws    GrnDataNotFoundException                  There is no category.
     * @throws    \grn\space\common\exception\GrnDatabaseException                      Any error in the database.
     * @return    CategoryLocal(modified category local object)
     */
    public function updateSpaceCategoryLocalForCSV(
        $categoryCode,
        CategoryLocal $categoryLocal,
        SpaceMember $operationUser
    ) {
        //input check
        if (ValidateUtility::isNull($categoryCode)) {
            throw new GrnInvalidArgumentException();
        }
        if (ValidateUtility::isNull($categoryLocal->getCategoryName())) {
            if ( ! ValidateUtility::isLanguageCode($categoryLocal->getLanguageCode(),
                ValidateUtility::DISABLE_EMPTY,
                ValidateUtility::EXCEPTION_NOT_THROW)
            ) {
                throw new GrnInvalidArgumentException();
            }
        } else {
            $categoryLocal->isValidData(CategoryLocal::VALID_TYPE_CREATE);
        }


        //Completion Information(情報の補完)
        $categoryLogic = CategoryLogic::getInstance();
        $category
            = $categoryLogic->getCategoryByCategoryCode($categoryCode,
            LanguageStatus::STANDARD_LANGUAGE_CODE);
        $category->setModifier($operationUser);
        $categoryLocal->setCategoryId($category->getId());

        $categoryLogic->modifyCategory($category);

        if (ValidateUtility::isNull($categoryLocal->getCategoryName())) {
            //delete
            $categoryLocalCollection = new CategoryLocalCollection();
            $categoryLocalCollection->appendBean($categoryLocal);
            $categoryLogic->deleteCategoryLocal($categoryLocalCollection);

            //Log ImportDeleteCategoryLocalLog
            $importDeleteCategoryLocalLog = new ImportDeleteCategoryLocalLog();
            $importDeleteCategoryLocalLog->setCategoryId($category->getId());
            $importDeleteCategoryLocalLog->setCategoryName($category->getCategoryName());
            $importDeleteCategoryLocalLog->setLanguageCode($categoryLocal->getLanguageCode());
            $this->getSpaceLogLogic()->notice($importDeleteCategoryLocalLog);
        } else {
            //insert/update SpaceLocal
            $result = $categoryLogic->setupCategoryLocal($categoryLocal);

            switch ($result) {
                case CategoryLocal::SETUP_INSERTED:
                    $importCategoryLocalLog = new ImportCategoryLocalLog();
                    $importCategoryLocalLog->setCategoryId($category->getId());
                    $importCategoryLocalLog->setCategoryName($categoryLocal->getCategoryName());
                    $importCategoryLocalLog->setLanguageCode($categoryLocal->getLanguageCode());
                    $this->getSpaceLogLogic()->notice($importCategoryLocalLog);
                    break;

                case CategoryLocal::SETUP_UPDATED:
                    $importModifyCategoryLocalLog
                        = new ImportModifyCategoryLocalLog();
                    $importModifyCategoryLocalLog->setCategoryId($category->getid());
                    $importModifyCategoryLocalLog->setCategoryName($categoryLocal->getCategoryName());
                    $importModifyCategoryLocalLog->setLanguageCode($categoryLocal->getLanguageCode());
                    $importModifyCategoryLocalLog->setPreviousCategoryName($category->getCategoryName());
                    $this->getSpaceLogLogic()
                         ->notice($importModifyCategoryLocalLog);
                    break;
            }
        }

        return $categoryLocal;
    }


    /**
     * Create to the category of Space.
     *
     * Attention: Use the method of checking the authority because it doesn't check the authority internally beforehand.
     *
     * @param     \grn\space\common\data\bean\Category $category        Category
     * @param     string                               $operationUserId user sequence id
     *
     * @throws    GrnInvalidArgumentException               operationUserId is not number.
     * @throws    \grn\space\common\exception\GrnRequiredDataIsNotException             There is no information necessary for categoryObject.
     * @throws    \grn\space\common\exception\GrnDatabaseException                      Any error in the database.
     * @return    Category(created category object)
     */
    public function createSpaceCategoryForCSV(
        Category $category,
        $operationUserId
    ) {
        $resultCategory = $this->_createSpaceCategory($category,
            new CategoryLocalCollection(), $operationUserId);

        //Log ImportCategoryLog
        $importCategoryLog = new ImportCategoryLog();
        $importCategoryLog->setCategoryId($resultCategory->getId());
        $importCategoryLog->setCategoryName($category->getCategoryName());
        $importCategoryLog->setForeignKey($category->getCategoryCode());
        $importCategoryLog->setOperation(ImportCategoryLog::OPERATION_CREATE);
        $this->getSpaceLogLogic()->notice($importCategoryLog);

        return $resultCategory;
    }

    /**
     * Create to the category of Space.
     *
     * Attention: Use the method of checking the authority because it doesn't check the authority internally beforehand.
     *
     * @param     \grn\space\common\data\bean\Category                      $category                Category
     * @param     \grn\space\common\data\collection\CategoryLocalCollection $categoryLocalCollection CategoryLocalCollection
     * @param     string                                                    $operationUserId         user sequence id
     *
     * @throws    GrnInvalidArgumentException               operationUserId is not number.
     * @throws    \grn\space\common\exception\GrnRequiredDataIsNotException             There is no information necessary for categoryObject.
     * @throws    \grn\space\common\exception\GrnDatabaseException                      Any error in the database.
     * @return    Category(created category object)
     */
    public function createSpaceCategory(
        Category $category,
        CategoryLocalCollection $categoryLocalCollection,
        $operationUserId
    ) {
        $resultCategory = $this->_createSpaceCategory($category,
            $categoryLocalCollection, $operationUserId);

        //Log CreateCategoryLog
        $parentCategory
            = $this->getSpaceCategory($resultCategory->getParentCategoryId(),
            $operationUserId);
        $createCategoryLog = new CreateCategoryLog();
        $createCategoryLog->setCategoryId($resultCategory->getId());
        $createCategoryLog->setCategoryName($resultCategory->getCategoryName());
        $createCategoryLog->setForeignKey($resultCategory->getCategoryCode());
        $createCategoryLog->setParentId($parentCategory->getId());
        $createCategoryLog->setParentName($parentCategory->getCategoryName());
        $this->getSpaceLogLogic()->info($createCategoryLog);

        //Log CreateCategoryLocalLog
        /** @var \grn\space\common\data\bean\CategoryLocal $eachLocal */
        foreach ($categoryLocalCollection as $eachLocal) {
            $createCategoryLocalLog = new CreateCategoryLocalLog();
            $createCategoryLocalLog->setCategoryId($resultCategory->getId());
            $createCategoryLocalLog->setCategoryName($eachLocal->getCategoryName());
            $createCategoryLocalLog->setLanguageCode($eachLocal->getLanguageCode());
            $this->getSpaceLogLogic()->info($createCategoryLocalLog);
        }

        return $resultCategory;
    }

    /**
     * Create to the category of Space.
     *
     * Attention: Use the method of checking the authority because it doesn't check the authority internally beforehand.
     *
     * @param     \grn\space\common\data\bean\Category                      $category                Category
     * @param     \grn\space\common\data\collection\CategoryLocalCollection $categoryLocalCollection CategoryLocalCollection
     * @param     string                                                    $operationUserId         user sequence id
     *
     * @throws    GrnInvalidArgumentException               operationUserId is not number. OR The parent category is illegal. OR The parent category is not space category.
     * @throws    \grn\space\common\exception\GrnRequiredDataIsNotException             There is no information necessary for categoryObject.
     * @throws    \grn\space\common\exception\GrnDatabaseException                      Any error in the database.
     * @return    Category(created category object)
     */
    private function _createSpaceCategory(
        Category $category,
        CategoryLocalCollection $categoryLocalCollection,
        $operationUserId
    ) {
        //input check
        ValidateUtility::isNumber($operationUserId);
        $category->isValidData(Category::VALID_TYPE_CREATE);
        /** @var \grn\space\common\data\bean\CategoryLocal $categoryLocal */
        foreach ($categoryLocalCollection as $categoryLocal) {
            $categoryLocal->isValidData(CategoryLocal::VALID_TYPE_CREATE);
        }

        //overlap category code check
        $categoryLogic = CategoryLogic::getInstance();
        try {
            $rootCategory = $this->getSpaceRootCategory($operationUserId);
            $overlapCategory
                = $categoryLogic->getCategoryByAncestorCategoryIdCategoryCode($rootCategory->getId(),
                $category->getCategoryCode(),
                LanguageStatus::STANDARD_LANGUAGE_CODE);
            throw new GrnInvalidArgumentException();
        } catch (GrnDataNotFoundException $exception) {
            //Check OK. this is unique category code.
        }

        //category relation check
        if ($this->_hasRelationSpaceCategory($category->getParentCategoryId(),
                $operationUserId) === false
        ) {
            throw new GrnInvalidArgumentException();
        }


        //##### start Completion Information(情報の補完)  #####
        $category->setModifierId($category->getCreatorId());
        $category->setModifierName($category->getCreatorName());

        $parentCategory
            = $categoryLogic->getCategory($category->getParentCategoryId(),
            LanguageStatus::STANDARD_LANGUAGE_CODE);
        $category->setHierarchyLevel($categoryLogic->calcChildHierarchyLevel($parentCategory));
        //##### end Completion Information(情報の補完)  ##### 

        $resultCategory = $categoryLogic->createCategory($category,
            $categoryLocalCollection);

        return $resultCategory;
    }


    /**
     * Move Category
     *
     * @param string $targetCategoryId
     * @param string $newParentCategoryId
     * @param string $operationUserId
     *
     * @return \grn\space\common\data\bean\Category
     * @throws GrnDataNotFoundException
     * @throws GrnInvalidArgumentException
     */
    public function moveSpaceCategory(
        $targetCategoryId,
        $newParentCategoryId,
        $operationUserId
    ) {
        ValidateUtility::isNumber($operationUserId);
        ValidateUtility::isNumber($targetCategoryId);
        ValidateUtility::isNumber($newParentCategoryId);

        $categoryLogic = CategoryLogic::getInstance();

        //These can throw GrnDataNotFoundException
        $targetCategory = $categoryLogic->getCategory($targetCategoryId,
            LanguageStatus::STANDARD_LANGUAGE_CODE);
        $newParentCategory = $categoryLogic->getCategory($newParentCategoryId,
            LanguageStatus::STANDARD_LANGUAGE_CODE);
        $prevParentCategory
            = $categoryLogic->getCategory($targetCategory->getParentCategoryId(),
            LanguageStatus::STANDARD_LANGUAGE_CODE);

        //category relation check
        if ($this->_hasRelationSpaceCategory($newParentCategoryId,
                $operationUserId) === false
        ) {
            throw new GrnInvalidArgumentException();
        }

        $targetCategory->setParentCategoryId($newParentCategoryId);
        $targetCategory->setHierarchyLevel($categoryLogic->calcChildHierarchyLevel($newParentCategory));
        $resultCategory = $categoryLogic->modifyCategory($targetCategory);

        //Log MoveCategoryLog
        $moveCategoryLog = new MoveCategoryLog();
        $moveCategoryLog->setCategoryId($targetCategoryId);
        $moveCategoryLog->setCategoryName($targetCategory->getCategoryName());
        $moveCategoryLog->setParentId($newParentCategoryId);
        $moveCategoryLog->setParentName($newParentCategory->getCategoryName());
        $moveCategoryLog->setSourceCategoryId($prevParentCategory->getId());
        $this->getSpaceLogLogic()->info($moveCategoryLog);

        return $resultCategory;
    }


    /**
     * Modify to the category of Space.
     *
     * Attention: Use the method of checking the authority because it doesn't check the authority internally beforehand.
     *
     * @param     \grn\space\common\data\bean\Category $category        Category
     * @param     string                               $operationUserId user sequence id
     *
     * @throws    GrnInvalidArgumentException               operationUserId is not number. OR overlap category code.
     * @throws    \grn\space\common\exception\GrnRequiredDataIsNotException             There is no information necessary for categoryObject.
     * @throws    GrnDataNotFoundException                  There is no category.
     * @throws    \grn\space\common\exception\GrnDatabaseException                      Any error in the database.
     * @throws    GrnIllegalOperationException
     * @return    Category(modified category object)
     */
    public function modifySpaceCategoryForCSV(
        Category $category,
        $operationUserId
    ) {
        //input check
        ValidateUtility::isNumber($operationUserId);
        $category->isValidData(Category::VALID_TYPE_MODIFY);
        require_once('fw/profile.csp');
        $applicationProfile = cb_get_system_profile('grn.common.application');
        $applicationProfile->getAttribute('space_root_category',
            $spaceRootCategoryCode);
        if ($category->getCategoryCode() == $spaceRootCategoryCode) {
            throw new GrnIllegalOperationException(ErrorCode::GRN_SPACE_CSV_ROOT_CATRGORY_FOREIGN_KEY);
        }

        $categoryLogic = CategoryLogic::getInstance();

        $beforeCategory = $categoryLogic->getCategory($category->getId(),
            LanguageStatus::STANDARD_LANGUAGE_CODE);

        //Category code must not be changed by this method.
        if ($beforeCategory->getCategoryCode()
            != $category->getCategoryCode()
        ) {
            throw new GrnIllegalOperationException();
        }

        $newParentCategory
            = $categoryLogic->getCategory($category->getParentCategoryId(),
            LanguageStatus::STANDARD_LANGUAGE_CODE);
        if ($categoryLogic->isParent($category, $newParentCategory)) {
            throw new GrnIllegalOperationException(ErrorCode::GRN_SPACE_INVALID_PARENT_CATEGORY);
        }
        $category->setHierarchyLevel($categoryLogic->calcChildHierarchyLevel($newParentCategory));
        $resultCategory = $categoryLogic->modifyCategory($category);

        //Log ImprotCategoryLog
        $importCategoryLog = new ImportCategoryLog();
        $importCategoryLog->setCategoryId($resultCategory->getId());
        $importCategoryLog->setCategoryName($resultCategory->getCategoryName());
        $importCategoryLog->setForeignKey($resultCategory->getCategoryCode());
        $importCategoryLog->setOperation(ImportCategoryLog::OPERATION_UPDATE);
        $this->getSpaceLogLogic()->notice($importCategoryLog);

        return $resultCategory;
    }

    /**
     * Modify to the category of Space.
     *
     * Attention: Use the method of checking the authority because it doesn't check the authority internally beforehand.
     *
     * This method throws exception when $category's parent category is changed.
     * If you want to move $categroy, use $this->moveSpaceCategory.
     *
     * @param     \grn\space\common\data\bean\Category                      $category                Category
     * @param     \grn\space\common\data\collection\CategoryLocalCollection $categoryLocalCollection CategoryLocalCollection
     * @param     string                                                    $operationUserId         user sequence id
     *
     * @throws    GrnInvalidArgumentException               operationUserId is not number. OR overlap category code.
     * @throws    \grn\space\common\exception\GrnRequiredDataIsNotException             There is no information necessary for categoryObject.
     * @throws    GrnDataNotFoundException                  There is no category.
     * @throws    \grn\space\common\exception\GrnDatabaseException                      Any error in the database.
     * @throws    GrnIllegalOperationException
     * @return    Category(modified category object)
     */
    public function modifySpaceCategory(
        Category $category,
        CategoryLocalCollection $categoryLocalCollection,
        $operationUserId
    ) {
        //input check
        ValidateUtility::isNumber($operationUserId);
        $category->isValidData(Category::VALID_TYPE_MODIFY);

        /** @var \grn\space\common\data\bean\CategoryLocal $categoryLocal */
        foreach ($categoryLocalCollection as $categoryLocal) {
            $categoryLocal->setId($category->getId());
            $categoryLocal->setCategoryId($category->getId());

            //CategoryLocal class does not support getId. When it is called, GrnIllegalOperationException() is thrown by LanguageStatus::getId()
            //$categoryLocal->isValidData( CategoryLocal::VALID_TYPE_MODIFY );
        }

        $beforeCategory = $this->getSpaceCategory($category->getId(),
            $operationUserId);

        //This method is not for moving Category
        if ($category->getParentCategoryId()
            != $beforeCategory->getParentCategoryId()
        ) {
            throw new GrnIllegalOperationException();
        }

        $categoryLogic = CategoryLogic::getInstance();

        //overlap category code check
        if ($beforeCategory->getCategoryCode()
            != $category->getCategoryCode()
        ) {
            try {
                $rootCategory = $this->getSpaceRootCategory($operationUserId);
                $categoryLogic->getCategoryByAncestorCategoryIdCategoryCode($rootCategory->getId(),
                    $category->getCategoryCode(),
                    LanguageStatus::STANDARD_LANGUAGE_CODE);
                throw new GrnInvalidArgumentException();
            } catch (GrnDataNotFoundException $exception) {
                //Check OK. this is unique category code.
            }
        }

        $resultCategory = $categoryLogic->modifyCategory($category);

        $resultParentCategory
            = $categoryLogic->getCategory($resultCategory->getParentCategoryId(),
            LanguageStatus::STANDARD_LANGUAGE_CODE);

        //Log ModifyCategoryLog
        $modifyCategoryLog = new ModifyCategoryLog();
        $modifyCategoryLog->setCategoryId($resultCategory->getId());
        $modifyCategoryLog->setCategoryName($resultCategory->getCategoryName());
        $modifyCategoryLog->setForeignKey($resultCategory->getCategoryCode());
        $modifyCategoryLog->setParentId($resultParentCategory->getId());
        $modifyCategoryLog->setParentName($resultParentCategory->getCategoryName());
        $this->getSpaceLogLogic()->info($modifyCategoryLog);

        /** @var \grn\space\common\data\bean\CategoryLocal $eachLocal */
        foreach ($categoryLocalCollection as $eachLocal) {
            $eachLocal->setCategoryId($resultCategory->getId());
        }

        $oldLocalCollection
            = $categoryLogic->getCategoryLocalCollection($resultCategory->getId());
        $removedLocalCollection
            = $oldLocalCollection->getNotInLanguage($categoryLocalCollection);
        $createdLocalCollection
            = $categoryLocalCollection->getNotInLanguage($oldLocalCollection);
        $modifiedLocalCollection
            = $categoryLocalCollection->getIntersectionLanguage($oldLocalCollection);

        //insert/update SpaceLocal
        $categoryLogic->setupCategoryLocalCollection($categoryLocalCollection);

        //remove old SpaceLocal
        $removedAvailableLocalCollection
            = $removedLocalCollection->getAvailableLocalLanguage();
        $categoryLogic->deleteCategoryLocal($removedAvailableLocalCollection);

        //Log CreateCategoryLocalLog
        foreach ($createdLocalCollection as $eachLocal) {
            $createCategoryLocalLog = new CreateCategoryLocalLog();
            $createCategoryLocalLog->setCategoryId($eachLocal->getCategoryId());
            $createCategoryLocalLog->setCategoryName($eachLocal->getCategoryName());
            $createCategoryLocalLog->setLanguageCode($eachLocal->getLanguageCode());
            $this->getSpaceLogLogic()->info($createCategoryLocalLog);
        }

        //Log DeleteCategoryLocalLog
        foreach ($removedAvailableLocalCollection as $eachLocal) {
            $deleteCategoryLocalLog = new DeleteCategoryLocalLog();
            $deleteCategoryLocalLog->setCategoryId($eachLocal->getCategoryId());
            $deleteCategoryLocalLog->setCategoryName($eachLocal->getCategoryName());
            $deleteCategoryLocalLog->setLanguageCode($eachLocal->getLanguageCode());
            $this->getSpaceLogLogic()->info($deleteCategoryLocalLog);
        }

        //Log ModifyCategoryLocalLog
        foreach ($modifiedLocalCollection as $eachLocal) {
            /** @var \grn\space\common\data\bean\CategoryLocal $oldLocal */
            foreach ($oldLocalCollection as $oldLocal) {
                if ($eachLocal->getLanguageCode()
                    == $oldLocal->getLanguageCode()
                ) {
                    $modifyCategoryLocalLog = new ModifyCategoryLocalLog();
                    $modifyCategoryLocalLog->setCategoryId($eachLocal->getCategoryId());
                    $modifyCategoryLocalLog->setCategoryName($eachLocal->getCategoryName());
                    $modifyCategoryLocalLog->setLanguageCode($eachLocal->getLanguageCode());
                    $modifyCategoryLocalLog->setPreviousCategoryName($oldLocal->getCategoryName());
                    $this->getSpaceLogLogic()->info($modifyCategoryLocalLog);
                }
            }
        }

        return $resultCategory;
    }


    /**
     * Delete to the category of Space.
     *
     * Attention: Use the method of checking the authority because it doesn't check the authority internally beforehand.
     *
     * @param     string $categoryId      category sequence id
     * @param     string $operationUserId user sequence id
     *
     * @throws    GrnInvalidArgumentException       categoryId is not number. or operationUserId is not number
     * @throws    GrnDataNotFoundException          There is no category.
     * @throws    \grn\space\common\exception\GrnDatabaseException              Any error in the database.
     * @throws    GrnIllegalOperationException      There are either sub-categories or threads in the deleting category or the category is a system category.
     * @return    Category(deleted category object)
     */
    public function deleteSpaceCategory($categoryId, $operationUserId)
    {
        //input check
        ValidateUtility::isNumber($categoryId);
        ValidateUtility::isNumber($operationUserId);

        $categoryLogic = CategoryLogic::getInstance();

        $category = $categoryLogic->getCategory($categoryId,
            LanguageStatus::STANDARD_LANGUAGE_CODE);

        //The category should not be deleted in any of the following cases.
        // - There is a subcategory in the category
        // - There is a thread in the category
        // - The category is a system category.

        $subCategoryCollection
            = $categoryLogic->getChildCategoryList($categoryId,
            LanguageStatus::STANDARD_LANGUAGE_CODE);
        if (count($subCategoryCollection)) {
            throw new GrnIllegalOperationException(ErrorCode::GRN_NO_DELETE_CATEGORY);
        }

        $spaceCollectionInCategory = $this->getSpaceListInCategory($category);
        if (count($spaceCollectionInCategory)) {
            throw new GrnIllegalOperationException(ErrorCode::GRN_NO_DELETE_CATEGORY);
        }

        if ($category->isSystemUse()) {
            throw new GrnIllegalOperationException(ErrorCode::GRN_NO_DELETE_CATEGORY);
        }

        //多言語削除

        //アクセス権削除

        $resultCategory = $categoryLogic->deleteCategory($category);

        //Log DeleteCategoryLog
        $deleteCategoryLog = new DeleteCategoryLog();
        $deleteCategoryLog->setCategoryId($category->getId());
        $deleteCategoryLog->setCategoryName($category->getCategoryName());
        $this->getSpaceLogLogic()->info($deleteCategoryLog);

        return $resultCategory;
    }

    /**
     * Get Spaces in the Category
     *
     * @param \grn\space\common\data\bean\Category $category
     *
     * @return \grn\space\data\collection\SpaceCollection
     */
    private function getSpaceListInCategory(Category $category)
    {
        $spaceSearchCondition = new SpaceSearchCondition();
        $spaceSearchCondition->setSearchCategoryId($category->getId());

        $spaceLogic = SpaceLogic::getInstance();

        return $spaceLogic->searchSpace($spaceSearchCondition);
    }


    /**
     * Get to the category of Space.
     *
     * Attention: Use the method of checking the authority because it doesn't check the authority internally beforehand.
     *
     * @param     string $categoryId      category sequence id
     * @param     string $operationUserId user sequence id
     * @param     string $languageCode    dispaly language code. The standard is display at STANDARD_LANGUAGE_CODE.
     *
     * @return    \grn\space\common\data\bean\Category
     * @throws    GrnInvalidArgumentException       categoryId is not number. or operationUserId is not number. or languageCode is not language code.
     * @throws    GrnDataNotFoundException          When the specified category is not found.
     * @throws    \grn\space\common\exception\GrnDatabaseException              Any error in the database.
     */
    public function getSpaceCategory(
        $categoryId,
        $operationUserId,
        $languageCode = LanguageStatus::STANDARD_LANGUAGE_CODE
    ) {
        ValidateUtility::isNumber($categoryId);
        ValidateUtility::isNumber($operationUserId);
        ValidateUtility::isLanguageCode($languageCode);

        //TODO::Spaceのカテゴリなのか？チェックが必要

        //スレッド参照
        $categoryLogic = CategoryLogic::getInstance();
        $categoryObj = $categoryLogic->getCategory($categoryId,
            $languageCode);

        //TODO::操作ユーザーの通知情報を取得

        return $categoryObj;
    }

    /**
     * Get the Category whose category code is $categoryCode
     *
     * @param string $categoryCode
     * @param string $operationUserId
     * @param string $languageCode
     *
     * @return \grn\space\common\data\bean\Category
     * @throws GrnInvalidArgumentException
     */
    public function getSpaceCategoryByCategoryCode(
        $categoryCode,
        $operationUserId,
        $languageCode = LanguageStatus::STANDARD_LANGUAGE_CODE
    ) {
        ValidateUtility::isNotNull($categoryCode);
        ValidateUtility::isNumber($operationUserId);
        ValidateUtility::isLanguageCode($languageCode);

        //スレッド参照
        $categoryLogic = CategoryLogic::getInstance();
        $categoryObj
            = $categoryLogic->getCategoryByCategoryCode($categoryCode,
            $languageCode);

        //category relation check
        if ($this->_hasRelationSpaceCategory($categoryObj->getId(),
                $operationUserId) === false
        ) {
            throw new GrnInvalidArgumentException();
        }

        return $categoryObj;
    }

    /**
     * Get default space category
     *
     * @param string $operationUserId
     * @param string $languageCode
     *
     * @return \grn\space\common\data\bean\Category
     * @throws GrnDataNotFoundException
     */
    public function getSpaceDefaultCategory(
        $operationUserId,
        $languageCode = LanguageStatus::STANDARD_LANGUAGE_CODE
    ) {
        ValidateUtility::isLanguageCode($languageCode);

        $categoryLogic = CategoryLogic::getInstance();

        require_once('fw/profile.csp');
        $applicationProfile = cb_get_system_profile('grn.common.application');
        $applicationProfile->getAttribute('space_root_category',
            $spaceRootCategoryCode);

        $spaceRootCategory
            = $this->_getSpaceCategoryByCategoryCode($spaceRootCategoryCode,
            $operationUserId, LanguageStatus::STANDARD_LANGUAGE_CODE);

        return $categoryLogic->getCategoryByCategoryCodeAncestorId(Category::DEFAULT_SPACE_CATEGORY_CODE,
            $spaceRootCategory->getId(), $languageCode);
    }

    /**
     * Searches for the SPACE category.
     *
     * Attention: Use the method of checking the authority because it doesn't check the authority internally beforehand.
     *
     * @param     \grn\space\common\data\condition\CategorySearchCondition $searchConditionObj CategorySearchCondition
     * @param     string                                                   $operationUserId    user sequence id
     * @param     string                                                   $languageCode       dispaly language code. The standard is display at STANDARD_LANGUAGE_CODE.
     *
     * @throws    \grn\space\common\exception\GrnRequiredDataIsNotException         There is no information necessary for searchConditionObj.
     * @throws    GrnInvalidArgumentException           operationUserId is not number. or languageCode is not language code.
     * @throws    \grn\space\common\exception\GrnDatabaseException                  Any error in the database.
     * @return    \grn\space\common\data\collection\CategoryCollection
     */
    public function searchSpaceCategoryBySearchCondition(
        CategorySearchCondition $searchConditionObj,
        $operationUserId,
        $languageCode = LanguageStatus::STANDARD_LANGUAGE_CODE
    ) {
        //input check
        $searchConditionObj->isValidData(CategorySearchCondition::VALID_TYPE_SELECT);
        ValidateUtility::isNumber($operationUserId);
        ValidateUtility::isLanguageCode($languageCode);

        $searchConditionObj->setLanguageCode($languageCode);

        //TODO::指定のカテゴリがスペースのカテゴリかチェック

        $categoryLogic = CategoryLogic::getInstance();
        $categoryCollection
            = $categoryLogic->searchCategory($searchConditionObj);

        return $categoryCollection;
    }

    /**
     * Get All the Space Categories with logging
     *
     * @param string $operationUserId
     *
     * @return \grn\space\common\data\collection\CategoryCollection
     */
    public function getSpaceCategoryCollectionForCSV($operationUserId)
    {
        ValidateUtility::isNumber($operationUserId);

        $categoryLogic = CategoryLogic::getInstance();

        require_once('fw/profile.csp');
        $applicationProfile = cb_get_system_profile('grn.common.application');
        $applicationProfile->getAttribute('space_root_category',
            $spaceRootCategoryCode);

        $spaceRootCategory
            = $this->_getSpaceCategoryByCategoryCode($spaceRootCategoryCode,
            $operationUserId, LanguageStatus::STANDARD_LANGUAGE_CODE);
        $categorySearchCondition = new CategorySearchCondition();
        $categorySearchCondition->setSearchCategoryId($spaceRootCategory->getId());
        $categorySearchCondition->setSearchScopeType(CategorySearchCondition::SEARCH_SCOPE_CATEGORY_DESCENDANT);
        $categorySearchCondition->setLanguageCode(LanguageStatus::STANDARD_LANGUAGE_CODE);
        $categorySearchCondition->setOrderSortArray([CategorySearchCondition::SORT_ID_ASC]);

        $categoryCollection
            = $categoryLogic->searchCategory($categorySearchCondition);

        $removedRootCollection = new CategoryCollection();
        /** @var \grn\space\common\data\bean\Category $eachCategory */
        foreach ($categoryCollection as $eachCategory) {
            if ($eachCategory->getCategoryCode() != $spaceRootCategoryCode) {
                $removedRootCollection->appendBean($eachCategory);

                //Log ExportCategoryLog
                $exportLog = new ExportCategoryLog();
                $exportLog->setCategoryId($eachCategory->getId());
                $exportLog->setCategoryName($eachCategory->getCategoryName());
                $exportLog->setForeignKey($eachCategory->getCategoryCode());
                $this->getSpaceLogLogic()->notice($exportLog);
            }
        }

        return $removedRootCollection;
    }

    /**
     * Get all the CategoryLocal records of Categories used in Space
     *
     * @param string $operationUserId
     * @param array  $languageCodeArray <string>
     *
     * @return CategoryLocalCollection
     */
    public function getSpaceCategoryLocalCollectionForCSV(
        $operationUserId,
        $languageCodeArray
    ) {
        ValidateUtility::isNumber($operationUserId);

        require_once('fw/profile.csp');
        $applicationProfile = cb_get_system_profile('grn.common.application');
        $applicationProfile->getAttribute('space_root_category',
            $spaceRootCategoryCode);

        $categoryLogic = CategoryLogic::getInstance();
        $categoryLocalCollection
            = $categoryLogic->getCategoryLocalCollectionForCSV($spaceRootCategoryCode,
            $languageCodeArray);

        /** @var \grn\space\common\data\bean\CategoryLocal $eachCategoryLocal */
        foreach ($categoryLocalCollection as $eachCategoryLocal) {
            //Log ExportCategoryLocalLog
            $exportCategoryLocalLog = new ExportCategoryLocalLog();
            $exportCategoryLocalLog->setCategoryId($eachCategoryLocal->getCategoryId());
            $exportCategoryLocalLog->setLanguageCode($eachCategoryLocal->getLanguageCode());
            $exportCategoryLocalLog->setCategoryName($eachCategoryLocal->getCategoryName());
            $this->getSpaceLogLogic()->notice($exportCategoryLocalLog);
        }

        return $categoryLocalCollection;
    }

    /**
     * Select CategoryLocal by Category Code
     *
     * @param string $categoryCode
     * @param string $operationUserId
     *
     * @return CategoryLocalCollection
     * @throws GrnInvalidArgumentException
     */
    public function getCategoryLocalCollectionByCategoryCode(
        $categoryCode,
        $operationUserId
    ) {
        if (ValidateUtility::isNull($categoryCode)) {
            throw new GrnInvalidArgumentException();
        }
        ValidateUtility::isNumber($operationUserId);

        $categoryLogic = CategoryLogic::getInstance();

        return $categoryLogic->getCategoryLocalCollectionByCategoryCode($categoryCode);
    }



    //****************************************************************************************************************
    //**********************************             SPACE              **********************************************
    //****************************************************************************************************************
    /**
     * search SPACE by condition with access control
     *
     * @param     string                                         $authorityCode             The constant has been defined in Authority class
     * @param     \grn\space\data\condition\SpaceSearchCondition $searchConditionObj        SpaceSearchCondition
     * @param     string                                         $operationUserId           user sequence id
     * @param     boolean                                        $isCategoryNameIsNecessary TRUE: category name is necessary.  FALSE: category name is unnecessary.
     *
     * @throws    \grn\space\common\exception\GrnRequiredDataIsNotException     There is no information necessary for searchConditionObj.
     * @throws    GrnInvalidArgumentException       authorityCode not a constant. or operationUserId is not number. or isCategoryNameIsNecessary is not boolean. or isSearchResultAuthorityDisregard is not boolean. or languageCode is not language code.
     * @throws    \grn\space\common\exception\GrnDatabaseException              Any error in the database.
     * @return    SpaceCollection
     */
    public function searchSpaceBySearchConditionWithAccessControl(
        $authorityCode,
        SpaceSearchCondition $searchConditionObj,
        $operationUserId,
        $isCategoryNameIsNecessary = self::CATEGORY_NAME_IS_UNNECESSARY
    ) {
        //input check
        ValidateUtility::isIn($authorityCode
            , [
                Authority::AUTHORITY_CODE_READ_SUMMARY
                ,
                Authority::AUTHORITY_CODE_READ_DETAIL
                ,
                Authority::AUTHORITY_CODE_WRITE
                ,
                Authority::AUTHORITY_CODE_SYSTEM_PRIVILEGE
                ,
                Authority::AUTHORITY_CODE_OPERATION_PRIVILEGE
            ]
            , ValidateUtility::DISABLE_EMPTY);
        ValidateUtility::isNumber($operationUserId);
        ValidateUtility::isBoolean($isCategoryNameIsNecessary);

        //@todo at now, this method don't care for $isCategoryNameIsNecessary. Category name is always fetched.


        $spaceLogic = SpaceLogic::getInstance();
        $copySearchConditionObj = clone $searchConditionObj;
        $accessSearchConditionObj = clone $searchConditionObj;

        $isSpaceAdministrator = false;
        if (($authorityCode == Authority::AUTHORITY_CODE_READ_DETAIL)
            || ($authorityCode == Authority::AUTHORITY_CODE_SYSTEM_PRIVILEGE)
        ) {
            $isSpaceAdministrator
                = $this->_isSpaceAdministrator($operationUserId);
        }

        //検索範囲に応じてアクセス権を持つspaceIdの取得ロジックを変える。
        //$isSpaceAdministratorが真の場合はアクセス権チェック不要
        //検索対象にカテゴリが無い場合はクエリで制御する手法（ユーザーがアクセス権持つ全てのスペースを取得するので重くなる恐れがあるため）
        //検索対象がカテゴリで絞られる場合はロジックで制御する手法（上記の理由の為、絞られてる場合はロジックの方が早いだろうという想定）
        if ($isSpaceAdministrator) {
            //LIMIT制限無しで検索
            $accessSearchConditionObj->setOffset('0');
            $accessSearchConditionObj->setLimit('18446744073709551615');
            $spaceCollection
                = $spaceLogic->searchSpace($accessSearchConditionObj);

            //結果が0ならここで終了
            if (count($spaceCollection) == 0) {
                return $spaceCollection;
            }

            $spaceIdArray = [];
            /** @var \grn\space\data\bean\Space $space */
            foreach ($spaceCollection as $space) {
                $spaceIdArray[] = $space->getId();
            }
        } elseif (ValidateUtility::isNull($copySearchConditionObj->getSearchCategoryId())) {
            //権限を持つspaceIDを全て取得する
            $spaceAclLogic = SpaceAccessControlListLogic::getInstance();
            $spaceIdArray
                = $spaceAclLogic->getSpaceIdArrayWithSpaceAccessControl($authorityCode,
                $operationUserId);

            //結果が0ならここで終了
            if (count($spaceIdArray) == 0) {
                return new SpaceCollection();
            }
        } else {
            //LIMIT制限無しで検索
            $accessSearchConditionObj->setOffset('0');
            $accessSearchConditionObj->setLimit('18446744073709551615');
            $spaceCollection
                = $spaceLogic->searchSpace($accessSearchConditionObj);

            //結果が0ならここで終了
            if (count($spaceCollection) == 0) {
                return $spaceCollection;
            }


            //Filter the spaceCollection with access control
            //アクセスコントロールでspaceCollectionをフィルタする
            $spaceAclLogic = SpaceAccessControlListLogic::getInstance();
            $spaceCollection
                = $spaceAclLogic->filterSpaceCollectionWithAccessControl($authorityCode,
                $spaceCollection, $operationUserId);

            //結果が0ならここで終了
            if (count($spaceCollection) == 0) {
                return $spaceCollection;
            }

            $spaceIdArray = [];
            /** @var \grn\space\data\bean\Space $space */
            foreach ($spaceCollection as $space) {
                $spaceIdArray[] = $space->getId();
            }
        }

        //元々の検索条件に権限を持つスペース群を追加して検索
        $copySearchConditionObj->setSearchSpaceIdArray($spaceIdArray);
        $resultSpaceCollection
            = $spaceLogic->searchSpace($copySearchConditionObj);

        if (count($resultSpaceCollection) > 0) {
            $spaceLogic->appendSpaceUserCount($resultSpaceCollection);
        }

        return $resultSpaceCollection;
    }

    /**
     * Searches for the SPACE.
     *
     * Attention: Use the method of checking the authority because it doesn't check the authority internally beforehand.
     *
     * @param     \grn\space\data\condition\SpaceSearchCondition $searchConditionObj        SpaceSearchCondition
     * @param     string                                         $operationUserId           user sequence id
     * @param     boolean                                        $isCategoryNameIsNecessary TRUE: category name is necessary.  FALSE: category name is unnecessary.
     * @param     string                                         $languageCode              dispaly language code. The standard is display at STANDARD_LANGUAGE_CODE.
     *
     * @throws    \grn\space\common\exception\GrnRequiredDataIsNotException    There is no information necessary for searchConditionObj.
     * @throws    GrnInvalidArgumentException      operationUserId is not number. or isCategoryNameIsNecessary is not boolean. or isSearchResultAuthorityDisregard is not boolean. or languageCode is not language code.
     * @throws    \grn\space\common\exception\GrnDatabaseException             Any error in the database.
     * @return    SpaceCollection
     */
    public function searchSpaceBySearchCondition(
        SpaceSearchCondition $searchConditionObj,
        $operationUserId,
        $isCategoryNameIsNecessary = self::CATEGORY_NAME_IS_UNNECESSARY,
        $languageCode = LanguageStatus::STANDARD_LANGUAGE_CODE
    ) {
        ValidateUtility::isNumber($operationUserId);
        ValidateUtility::isBoolean($isCategoryNameIsNecessary);
        ValidateUtility::isLanguageCode($languageCode);

        //@todo at now, this method don't care for $isCategoryNameIsNecessary. Category name is always fetched.

        $spaceLogic = SpaceLogic::getInstance();
        $spaceCollection = $spaceLogic->searchSpace($searchConditionObj);
        if (count($spaceCollection) > 0) {
            $spaceLogic->appendSpaceUserCount($spaceCollection);
        }

        return $spaceCollection;
    }

    /**
     * Refer to the SPACE.
     *
     * Attention: Use the method of checking the authority because it doesn't check the authority internally beforehand.
     *
     * @param     string $spaceId         space sequence id
     * @param     string $operationUserId user sequence id
     * @param     string $languageCode    dispaly language code. The standard is display at STANDARD_LANGUAGE_CODE.
     *
     * @throws    GrnInvalidArgumentException    spaceId is not number. or operationUserId is not number.
     * @throws    GrnDataNotFoundException      There is no SPACE.
     * @throws    \grn\space\common\exception\GrnDatabaseException
     * @return    \grn\space\data\bean\Space   (Added SPACE object.)
     */
    public function getSpace(
        $spaceId,
        $operationUserId,
        $languageCode = LanguageStatus::STANDARD_LANGUAGE_CODE
    ) {
        ValidateUtility::isNumber($spaceId);
        ValidateUtility::isNumber($operationUserId);

        //Space検索
        $spaceLogic = SpaceLogic::getInstance();
        $space = $spaceLogic->getSpace($spaceId, $languageCode);

        //Search for the members of the space to set up $space->countMembers
        $spaceUserSearchCondition = new SpaceUserSearchCondition();
        $spaceUserSearchCondition->setSearchSpaceId($spaceId);
        $spaceUserSearchCondition->setOrderSortArray([SpaceUserSearchCondition::SORT_DISPLAY_ORDER_ASC]);
        $spaceUserCollection
            = $spaceLogic->searchSpaceUsers($spaceUserSearchCondition,
            $operationUserId);
        $space->setCountMembers($spaceUserCollection->getCountNoLimit());

        return $space;
    }

    /**
     * Create a SPACE
     *
     * Attention: Use the method of checking the authority because it doesn't check the authority internally beforehand.
     *
     * @param     \grn\space\data\bean\Space                      $space
     * @param     \grn\space\data\collection\SpaceLocalCollection $spaceLocalCollection Localized names of the Space
     * @param     \grn\space\data\collection\SpaceUserCollection  $spaceUserCollection
     * @param     \grn\space\data\collection\SpaceUserCollection  $spaceOperatorCollection
     * @param     string                                          $operationUserId      user sequence id
     * @param     string                                          $operationUserLanguageCode
     *
     * @throws    \grn\space\common\exception\GrnRequiredDataIsNotException     There is no information necessary for spaceObject or spaceMemberCollection.
     * @throws    GrnInvalidArgumentException       operationUserId is not number. OR overlap space code. OR The category is not space category.
     * @throws    GrnDataNotFoundException          authrority is not found
     * @throws    \grn\space\common\exception\GrnDatabaseException              Any error in the database.
     * @return    \grn\space\data\bean\Space   (Added SPACE object.)
     */
    public function createSpace(
        Space $space,
        SpaceLocalCollection $spaceLocalCollection,
        SpaceUserCollection $spaceUserCollection,
        SpaceUserCollection $spaceOperatorCollection,
        $operationUserId,
        $operationUserLanguageCode
    ) {
        ValidateUtility::isNumber($operationUserId);
        $space->isValidData(Space::VALID_TYPE_CREATE);

        $creator = $space->getCreator();

        // Complemenet information
        $space->setModifierId($creator->getMemberID());
        $space->setModifierName($creator->getUserName());

        if ($space->getSpaceCode() == "") {
            $space->setSpaceCode(uniqid());
        }
        $spaceLogic = SpaceLogic::getInstance();

        if ($space->getIsUnlimitedExpirationDate()
            && ! $spaceLogic->isAllowedToUseUnlimitedExpirationDate()
        ) {
            throw new GrnInvalidArgumentException(ErrorCode::GRN_INVALID_EXPIRATION_DATE_TIME);
        }
        //overlap space code check
        $spaceCollection
            = $spaceLogic->getSpaceCollectionBySpaceCode($space->getSpaceCode(),
            LanguageStatus::STANDARD_LANGUAGE_CODE);
        if (count($spaceCollection) > 0) {
            throw new GrnInvalidArgumentException();
        }

        //category relation check
        if ($this->_hasRelationSpaceCategory($space->getCategoryId(),
                $operationUserId) === false
        ) {
            throw new GrnInvalidArgumentException();
        }

        //confirm that the category of the space is not the root category.
        $categoryLogic = CategoryLogic::getInstance();
        $rootCategory = $this->getSpaceRootCategory($operationUserId);
        if ($space->getCategoryId() == $rootCategory->getId()) {
            throw new GrnInvalidArgumentException();
        }

        //validate the input
        $iconLogic = IconLogic::getInstance();
        $spaceLogLogic = $this->getSpaceLogLogic();

        //These may throw GrnDataNotFoundException
        $category = $categoryLogic->getCategory($space->getCategoryId(),
            LanguageStatus::STANDARD_LANGUAGE_CODE);
        $icon = $iconLogic->getIcon($space->getBuiltinIconId());

        $applicationTemplateId
            = "This value should be given as a parameter of this method when the template .";

        //空のメモを作成
        $spaceMemo = new SpaceMemo();
        $spaceMemo->setMemo("");
        $spaceMemo->setCreatorId($creator->getMemberID());
        $spaceMemo->setCreatorName($creator->getUserName());
        $spaceMemo->setCreateTimestamp($space->getCreateTimestamp());
        $spaceMemo->setModifierId($creator->getMemberID());
        $spaceMemo->setModifierName($creator->getUserName());
        $spaceMemo->setModifyTimestamp($space->getModifyTimestamp());


        //Create Space
        $spaceLogic->createSpace($space, $spaceLocalCollection, $spaceMemo);

        //Log CreateSpaceLog
        $createSpaceLog = new CreateSpaceLog();
        $createSpaceLog->setCategoryName($category->getCategoryName());
        $createSpaceLog->setIcon($icon->getIconName());
        $createSpaceLog->setSpaceName($space->getSpaceName());
        $createSpaceLog->setSpaceId($space->getId());
        $createSpaceLog->setPrivacy($space->isPublic()
            ? ModifySpaceLog::PRIVACY_PUBLIC : ModifySpaceLog::PRIVACY_PRIVATE);
        $createSpaceLog->setJoinLeave($space->isAllowJoinLeave()
            ? CreateSpaceLog::ALLOW_JOIN_LEAVE
            : CreateSpaceLog::NOT_ALLOW_JOIN_LEAVE);
        if ( ! $space->getIsUnlimitedExpirationDate()) {
            $createSpaceLog->setLimitExpirationDate($space->getExpirationDateTimestamp());
        }

        // Register space members
        $spaceLogic->createSpaceUsers($space, $spaceUserCollection);

        $spaceMemberNames = [];
        $this->addUserInfo(
            $spaceUserCollection,
            $operationUserId,
            SpaceMemberUtility::SYSTEM_DOESNT_USE_ENGLISH,
            SpaceMemberUtility::ENGLISH_DOESNT_DISPLAY_AFTER_NAME,
            SpaceMemberUtility::ORGANIZATION_DOESNT_DISPLAY_AFTER_NAME,
            $operationUserLanguageCode,
            false
        );
        /** @var \grn\space\data\bean\SpaceUser $eachSpaceUser */
        foreach ($spaceUserCollection as $eachSpaceUser) {
            $spaceMemberNames[] = $eachSpaceUser->getDisplayName();
        }
        $createSpaceLog->setMemberNameList($spaceMemberNames);
        $spaceOperatorNames = [];
        $this->addUserInfo(
            $spaceOperatorCollection,
            $operationUserId,
            SpaceMemberUtility::SYSTEM_DOESNT_USE_ENGLISH,
            SpaceMemberUtility::ENGLISH_DOESNT_DISPLAY_AFTER_NAME,
            SpaceMemberUtility::ORGANIZATION_DOESNT_DISPLAY_AFTER_NAME,
            $operationUserLanguageCode
        );
        /** @var \grn\space\data\bean\SpaceUser $eachOperatorUser */
        foreach ($spaceOperatorCollection as $eachOperatorUser) {
            $spaceOperatorNames[] = $eachOperatorUser->getDisplayName();
        }
        $createSpaceLog->setAdminNameList($spaceOperatorNames);
        $spaceLogLogic->info($createSpaceLog);


        //Log CreateSpaceLocalLog
        /** @var \grn\space\data\bean\SpaceLocal $eachSpaceLocal */
        foreach ($spaceLocalCollection as $eachSpaceLocal) {
            $createSpaceLocalLog = new CreateSpaceLocalLog();
            $createSpaceLocalLog->setSpaceId($space->getId());
            $createSpaceLocalLog->setLanguageCode($eachSpaceLocal->getLanguageCode());
            $createSpaceLocalLog->setSpaceName($eachSpaceLocal->getSpaceName());
            $spaceLogLogic->info($createSpaceLocalLog);
        }

        //Create default space-application relations based on $applicationTemplateId.
        //But at now, $applicationTemplateId does not make any difference.
        $applicationTemplateLogic = ApplicationTemplateLogic::getInstance();
        $applicationCollection
            = $applicationTemplateLogic->getApplicationCollection($applicationTemplateId);

        $spaceApplicationLogic = SpaceApplicationLogic::getInstance();
        foreach ($applicationCollection as $eachApplication) {
            $spaceApplication = new SpaceApplication();
            $spaceApplication->setApplicationMaster($eachApplication);
            $spaceApplication->setSpaceId($space->getId());
            $spaceApplication->setCreator($creator);
            $spaceApplication->setModifier($creator);
            $eachSpaceApplication
                = $spaceApplicationLogic->createSpaceApplication($spaceApplication);
            $this->initializeSpaceApplication($space, $eachSpaceApplication);
        }

        //### Create access control ### start
        //Create acl
        $aclLogic = AccessControlListLogic::getInstance();
        $systemPriAcl
            = $aclLogic->createAclByAuthorityCode(Authority::AUTHORITY_CODE_SYSTEM_PRIVILEGE);
        $operationPriAcl
            = $aclLogic->createAclByAuthorityCode(Authority::AUTHORITY_CODE_OPERATION_PRIVILEGE);
        $readSummaryAcl
            = $aclLogic->createAclByAuthorityCode(Authority::AUTHORITY_CODE_READ_SUMMARY);
        $readDetailAcl
            = $aclLogic->createAclByAuthorityCode(Authority::AUTHORITY_CODE_READ_DETAIL);
        $writeAcl
            = $aclLogic->createAclByAuthorityCode(Authority::AUTHORITY_CODE_WRITE);

        //Create role and user and acl relation
        $aclLogic->createAclRoleByRoleId($systemPriAcl->getId(),
            SpaceRole::ROLE_ID_ADMINISTRATOR);
        if ($spaceOperatorCollection->count() > 0) {
            $aclLogic->createAclUsers($operationPriAcl->getId(),
                $spaceOperatorCollection);
        }
        $aclLogic->createAclUsers($writeAcl->getId(), $spaceUserCollection);

        if ($space->isPublic() === false) {
            $aclLogic->createAclUsers($readSummaryAcl->getId(),
                $spaceUserCollection);
            $aclLogic->createAclUsers($readDetailAcl->getId(),
                $spaceUserCollection);
            $aclLogic->createAclRoleByRoleId($readDetailAcl->getId(),
                SpaceRole::ROLE_ID_ADMINISTRATOR);
        }

        //Create space and acl relation
        $spaceAclCollection = new SpaceAccessControlListCollection();
        $spaceAcl = new SpaceAccessControlList();
        $spaceAcl->setId($systemPriAcl->getId());
        $spaceAcl->setSpaceId($space->getId());
        $spaceAcl->setGrant(SpaceAccessControlList::GRANT);
        $spaceAclCollection->appendBean($spaceAcl);

        $spaceAcl = new SpaceAccessControlList();
        $spaceAcl->setId($operationPriAcl->getId());
        $spaceAcl->setSpaceId($space->getId());
        $spaceAcl->setGrant(SpaceAccessControlList::GRANT);
        $spaceAclCollection->appendBean($spaceAcl);

        $spaceAcl = new SpaceAccessControlList();
        $spaceAcl->setId($readSummaryAcl->getId());
        $spaceAcl->setSpaceId($space->getId());
        $spaceAcl->setGrant(($space->isPublic())
            ? SpaceAccessControlList::REVOKE : SpaceAccessControlList::GRANT);
        $spaceAclCollection->appendBean($spaceAcl);

        $spaceAcl = new SpaceAccessControlList();
        $spaceAcl->setId($readDetailAcl->getId());
        $spaceAcl->setSpaceId($space->getId());
        $spaceAcl->setGrant(($space->isPublic())
            ? SpaceAccessControlList::REVOKE : SpaceAccessControlList::GRANT);
        $spaceAclCollection->appendBean($spaceAcl);

        $spaceAcl = new SpaceAccessControlList();
        $spaceAcl->setId($writeAcl->getId());
        $spaceAcl->setSpaceId($space->getId());
        $spaceAcl->setGrant(SpaceAccessControlList::GRANT);
        $spaceAclCollection->appendBean($spaceAcl);

        $spaceAclLogic = SpaceAccessControlListLogic::getInstance();
        $spaceAclLogic->createSpaceAcls($spaceAclCollection);
        //### Create access control ### end


        //通知処理（Spaceの参加者が対象）
        $notification_user_ids
            = $spaceLogic->getSpaceUserMemberIds($spaceUserCollection,
            $space->getId());
        $notificationLogic = SpaceNotificationLogic::getInstance();
        $notificationLogic->sendSpaceNotification($operationUserId, $space,
            $notification_user_ids);

        //Full text Search
        if (FtsApplication::isAvailable()) {
            $searchService = new IndexService();
            $searchService->createSpaceIndex($space, $spaceMemo);
        }

        return $space;
    }

    /**
     * Reuse Space
     *
     * @param Space                $space
     * @param SpaceLocalCollection $spaceLocalCollection
     * @param SpaceUserCollection  $spaceUserCollection
     * @param SpaceUserCollection  $spaceOperatorCollection
     * @param FolderCollection     $folderCollection
     * @param ThreadCollection     $discCollection
     * @param SpaceMemo            $memo
     * @param                      $operationUserId
     * @param                      $operationUserLanguageCode
     *
     * @return Space
     * @throws GrnInvalidArgumentException
     */
    public function reuseSpace(
        Space $space,
        SpaceLocalCollection $spaceLocalCollection,
        SpaceUserCollection $spaceUserCollection,
        SpaceUserCollection $spaceOperatorCollection,
        FolderCollection $folderCollection,
        ThreadCollection $discCollection,
        SpaceMemo $memo,
        $operationUserId,
        $operationUserLanguageCode
    ) {
        $newSpace = $this->createSpace($space, $spaceLocalCollection,
            $spaceUserCollection, $spaceOperatorCollection, $operationUserId,
            $operationUserLanguageCode);
        //Add discussion
        $categoryLogic = CategoryLogic::getInstance();
        $discRootCategory
            = $categoryLogic->getCategoryBySpaceIdApplicationCode($newSpace->getId(),
            Application::APPLICATION_CODE_DISCUSSION,
            LanguageStatus::STANDARD_LANGUAGE_CODE);
        $folderLogic = new FolderLogic();
        $discLogic = ThreadLogic::getInstance();

        $folderIdList = [];
        /** @var \grn\space\data\bean\Folder $folder */
        foreach ($folderCollection as $folder) {
            $folder->setSpaceId($newSpace->getId());
            $folderIdList[$folder->getId()]
                = $folderLogic->createFolder($folder);
        }

        /** @var \grn\space\data\bean\Thread $discussion */
        foreach ($discCollection as $discussion) {
            $folderId = $discussion->getFolderId();
            if (array_key_exists($folderId, $folderIdList)) {
                $discussion->setFolderId($folderIdList[$folderId]);
            } else {
                $discussion->setFolderId(0);
            }

            $discussion->setCategoryId($discRootCategory->getId());
            $discussion->setContent("");
            $discussion->setRichText(false);
            $discussion->setSystemUse(false);
            $discussion->setCreatorId($newSpace->getCreatorId());
            $discussion->setCreatorName($newSpace->getCreatorName());
            $discussion->setModifierId($newSpace->getModifierId());
            $discussion->setModifierName($newSpace->getModifierName());
            $discLogic->createThread($discussion);
        }
        //Add memo
        $memo->setId($newSpace->getId());
        $this->modifySpaceMemo($memo, $operationUserId);

        return $newSpace;
    }

    /**
     * Initialize each Application for the $space
     *
     * @param \grn\space\data\bean\Space            $space
     * @param \grn\space\data\bean\SpaceApplication $spaceApplication has to contain its Application object and return it via getApplicationMaster method.
     *
     * @return \grn\space\data\bean\SpaceApplication
     * @todo Title and Content of the WELCOME THRAD
     */
    private function initializeSpaceApplication(
        Space $space,
        SpaceApplication $spaceApplication
    ) {
        switch ($spaceApplication->getApplicationCode()) {
            case Application::APPLICATION_CODE_DISCUSSION:
                //Create a WELCOME THREAD in the root category
                $thread = new Thread();
                $thread->setCategoryId($spaceApplication->getRootCategoryId());
                $thread->setTitle($space->getSpaceName());
                $thread->setContent("");
                $thread->setRichText(false);
                $thread->setSystemUse(true);
                $thread->setCreatorId($space->getCreatorId());
                $thread->setCreatorName($space->getCreatorName());
                $thread->setModifierId($space->getModifierId());
                $thread->setModifierName($space->getModifierName());

                $threadLogic = ThreadLogic::getInstance();
                $threadLogic->createThread($thread);

                //Full Text Search
                if (FtsApplication::isAvailable()) {
                    $searchService = new IndexService();
                    $searchService->createDiscussionIndex($space, $thread);
                }

                //Log
                $createThreadLog = new CreateThreadLog();
                $createThreadLog->setSpaceId($space->getId());
                $createThreadLog->setSpaceName($space->getSpaceName());
                $createThreadLog->setThreadId($thread->getId());
                $createThreadLog->setThreadName($thread->getTitle());

                require_once("space/GrnSpaceApplication.csp");
                $spaceLogic
                    = new SpaceLogLogic(\GrnSpaceApplication::GRN_SPACE_MODULE_ID);
                $spaceLogic->info($createThreadLog);

                return $spaceApplication;
            default:
                // no reach here?
                return $spaceApplication;
        }
    }

    /**
     * Modify the SPACE
     *
     * Attention: Use the method of checking the authority because it doesn't check the authority internally beforehand.
     *
     * @param     \grn\space\data\bean\Space                      $space
     * @param     \grn\space\data\collection\SpaceLocalCollection $spaceLocalCollection
     * @param     \grn\space\data\collection\SpaceUserCollection  $spaceUserCollection
     * @param     \grn\space\data\collection\SpaceUserCollection  $spaceOperatorCollection
     * @param     string                                          $operationUserId user sequence id
     * @param     string                                          $operationUserLanguageCode
     *
     * @return    \grn\space\data\bean\Space    (modified space)
     * @throws    \grn\space\common\exception\GrnRequiredDataIsNotException    There is no information necessary for spaceObject or spaceMemberCollection.
     * @throws    GrnInvalidArgumentException        operationUserId is not number. OR overlap space code. OR The category is not space category.
     * @throws    GrnDataNotFoundException          There is no SPACE.
     * @throws    \grn\space\common\exception\GrnDatabaseException
     */
    public function modifySpace(
        Space $space,
        SpaceLocalCollection $spaceLocalCollection,
        SpaceUserCollection $spaceUserCollection,
        SpaceUserCollection $spaceOperatorCollection,
        $operationUserId,
        $operationUserLanguageCode
    ) {
        ValidateUtility::isNumber($operationUserId);
        $space->isValidData(Space::VALID_TYPE_MODIFY);

        //Adjust data
        /** @var \grn\space\data\bean\SpaceUser $eachSpaceUser */
        foreach ($spaceUserCollection as $eachSpaceUser) {
            $eachSpaceUser->setSpaceId($space->getId());
        }

        $spaceLogic = SpaceLogic::getInstance();
        $categoryLogic = CategoryLogic::getInstance();
        $iconLogic = IconLogic::getInstance();
        $spaceLogLogic = $this->getSpaceLogLogic();

        $oldSpace = $spaceLogic->getSpace($space->getId(),
            LanguageStatus::STANDARD_LANGUAGE_CODE);

        //overlap space code check
        $spaceLogic = SpaceLogic::getInstance();
        if ($oldSpace->getSpaceCode() != $space->getSpaceCode()) {
            $spaceCollection
                = $spaceLogic->getSpaceCollectionBySpaceCode($space->getSpaceCode(),
                LanguageStatus::STANDARD_LANGUAGE_CODE);
            if (count($spaceCollection) > 0) {
                throw new GrnInvalidArgumentException();
            }
        }

        if ($space->getIsUnlimitedExpirationDate()
            && ! $spaceLogic->isAllowedToUseUnlimitedExpirationDate()
        ) {
            throw new GrnInvalidArgumentException(ErrorCode::GRN_INVALID_EXPIRATION_DATE_TIME);
        }

        //confirm that the category of the space is not the root category.
        $rootCategory = $this->getSpaceRootCategory($operationUserId);
        if ($space->getCategoryId() == $rootCategory->getId()) {
            throw new GrnInvalidArgumentException();
        }


        //category relation check
        if ($oldSpace->getCategoryId() != $space->getCategoryId()) {
            if ($this->_hasRelationSpaceCategory($space->getCategoryId(),
                    $operationUserId) === false
            ) {
                throw new GrnInvalidArgumentException();
            }
        }

        //These may throw GrnDataNotFoundException
        $category = $categoryLogic->getCategory($space->getCategoryId(),
            LanguageStatus::STANDARD_LANGUAGE_CODE);
        $icon = $iconLogic->getIcon($space->getBuiltinIconId());

        //Space変更
        $space = $spaceLogic->modifySpace($space);

        if (FtsApplication::isAvailable()) {
            $searchService = new IndexService();
            $searchService->updateSpaceIndex($space, $operationUserId);
        }

        //Space参加者変更
        $spaceUserSearchCondition = new SpaceUserSearchCondition();
        $spaceUserSearchCondition->setSearchSpaceId($space->getId());
        $spaceUserSearchCondition->setOrderSortArray([SpaceUserSearchCondition::SORT_DISPLAY_ORDER_ASC]);

        $oldSpaceUserCollection
            = $spaceLogic->searchSpaceUsers($spaceUserSearchCondition,
            $operationUserId);
        /** @var SpaceUserCollection $removedSpaceUserCollection */
        $removedSpaceUserCollection
            = $oldSpaceUserCollection->getNotIn($spaceUserCollection);
        $this->_modifySpaceUser($space, $spaceUserCollection,
            $oldSpaceUserCollection, $removedSpaceUserCollection,
            $operationUserId, $operationUserLanguageCode, $spaceLogic,
            $categoryLogic);

        //remove non-space user following discussion when space is private
        if ( ! $space->isPublic()) {
            $discussionLogic = ThreadLogic::getInstance();
            $discussionId
                = $discussionLogic->getAllDiscussionIdBySpaceId($space->getId());
            $discussionLogic->deleteDiscussionNotificationByDiscussionId($discussionId);
        }

        //Log ModifySpaceLog
        $modifySpaceLog = new ModifySpaceLog();
        $modifySpaceLog->setIcon($icon->getIconName());
        $modifySpaceLog->setSpaceName($space->getSpaceName());
        $modifySpaceLog->setSpaceId($space->getId());
        $modifySpaceLog->setCategoryName($category->getCategoryName());
        $modifySpaceLog->setPrivacy($space->isPublic()
            ? ModifySpaceLog::PRIVACY_PUBLIC : ModifySpaceLog::PRIVACY_PRIVATE);
        $modifySpaceLog->setJoinLeave($space->isAllowJoinLeave()
            ? ModifySpaceLog::ALLOW_JOIN_LEAVE
            : ModifySpaceLog::NOT_ALLOW_JOIN_LEAVE);
        if ( ! $space->getIsUnlimitedExpirationDate()) {
            $modifySpaceLog->setLimitExpirationDate($space->getExpirationDateTimestamp());
        }
        $spaceMemberNames = [];
        $this->addUserInfo(
            $spaceUserCollection,
            $operationUserId,
            SpaceMemberUtility::SYSTEM_DOESNT_USE_ENGLISH,
            SpaceMemberUtility::ENGLISH_DOESNT_DISPLAY_AFTER_NAME,
            SpaceMemberUtility::ORGANIZATION_DOESNT_DISPLAY_AFTER_NAME,
            $operationUserLanguageCode
        );
        foreach ($spaceUserCollection as $eachSpaceUser) {
            $spaceMemberNames[] = $eachSpaceUser->getDisplayName();
        }
        $modifySpaceLog->setMemberNameList($spaceMemberNames);
        $spaceOperatorNames = [];
        $this->addUserInfo(
            $spaceOperatorCollection,
            $operationUserId,
            SpaceMemberUtility::SYSTEM_DOESNT_USE_ENGLISH,
            SpaceMemberUtility::ENGLISH_DOESNT_DISPLAY_AFTER_NAME,
            SpaceMemberUtility::ORGANIZATION_DOESNT_DISPLAY_AFTER_NAME,
            $operationUserLanguageCode
        );
        /** @var \grn\space\data\bean\SpaceUser $eachOperatorUser */
        foreach ($spaceOperatorCollection as $eachOperatorUser) {
            $spaceOperatorNames[] = $eachOperatorUser->getDisplayName();
        }
        $modifySpaceLog->setAdminNameList($spaceOperatorNames);
        $spaceLogLogic->info($modifySpaceLog);


        $oldSpaceLocalCollection
            = $spaceLogic->getSpaceLocalCollection($space->getId());

        $removedSpaceLocalCollection
            = $oldSpaceLocalCollection->getNotInLanguage($spaceLocalCollection);
        $insertedSpaceLocalCollection
            = $spaceLocalCollection->getNotInLanguage($oldSpaceLocalCollection);
        $updatedSpaceLocalCollection
            = $spaceLocalCollection->getIntersectionLanguage($oldSpaceLocalCollection);

        //insert/update SpaceLocal
        $spaceLogic->modifySpaceLocal($space, $spaceLocalCollection);

        //remove old SpaceLocal
        $removedAvailableLocalSpaceCollection
            = $removedSpaceLocalCollection->getAvailableLocalLanguage();
        $spaceLogic->deleteSpaceLocal($removedAvailableLocalSpaceCollection);

        /** @var \grn\space\data\bean\SpaceLocal $eachLocal */
        //log CreateSpaceLocalLog
        foreach ($insertedSpaceLocalCollection as $eachLocal) {
            $createSpaceLocalLog = new CreateSpaceLocalLog();
            $createSpaceLocalLog->setLanguageCode($eachLocal->getLanguageCode());
            $createSpaceLocalLog->setSpaceName($eachLocal->getSpaceName());
            $createSpaceLocalLog->setSpaceId($space->getId());
            $spaceLogLogic->info($createSpaceLocalLog);
        }

        //Log DeleteSpaceLocalLog
        foreach ($removedSpaceLocalCollection as $eachLocal) {
            $deleteSpaceLocalLog = new DeleteSpaceLocalLog();
            $deleteSpaceLocalLog->setLanguageCode($eachLocal->getLanguageCode());
            $deleteSpaceLocalLog->setSpaceName($eachLocal->getSpaceName());
            $deleteSpaceLocalLog->setSpaceId($space->getId());
            $spaceLogLogic->info($deleteSpaceLocalLog);
        }

        //Log ModifySpaceLocalLog
        foreach ($updatedSpaceLocalCollection as $eachLocal) {
            /** @var \grn\space\data\bean\SpaceLocal $eachOldLocal */
            foreach ($oldSpaceLocalCollection as $eachOldLocal) {
                if ($eachLocal->getLanguageCode()
                    == $eachOldLocal->getLanguageCode()
                ) {
                    $modifySpaceLocalLog = new ModifySpaceLocalLog();
                    $modifySpaceLocalLog->setLanguageCode($eachLocal->getLanguageCode());
                    $modifySpaceLocalLog->setSpaceName($eachLocal->getSpaceName());
                    $modifySpaceLocalLog->setPreviousSpaceName($eachOldLocal->getSpaceName());
                    $modifySpaceLocalLog->setSpaceId($space->getId());
                    $spaceLogLogic->info($modifySpaceLocalLog);
                }
            }
        }

        //Spaceアクセス権変更（公開フラグを見てgrantフラグを立てるか判断。新規追加参加者は登録する。削除参加者は削除する）
        $this->_modifySpaceAcl($space, $oldSpace, $spaceUserCollection,
            $oldSpaceUserCollection, $removedSpaceUserCollection,
            $spaceOperatorCollection);

        //スレッドの通知設定変更（新規追加参加者は登録する。削除参加者は削除する（強制フラグは無視））

        //Sync Access Privilege
        $kintoneService = KintoneService::getInstance();
        try {
            $kintoneService->sync($space->getId(), $operationUserId);
        } catch (GrnKintoneException $e) {
            $this->catchKintoneException($e, $space, $operationUserId);
        }

        return $space;
    }

    /**
     * Modify the expiration date of SPACE
     *
     * @param     \grn\space\data\bean\Space $space
     * @param     string                     $operationUserId user sequence id
     * @param     string                     $operationUserLanguageCode
     *
     * @return    \grn\space\data\bean\Space    (modified space)
     * @throws    GrnInvalidArgumentException
     */
    public function modifyExpirationDate(
        Space $space,
        string $operationUserId,
        string $operationUserLanguageCode
    ) {
        $spaceLogic = SpaceLogic::getInstance();
        if ($space->getIsUnlimitedExpirationDate()
            && ! $spaceLogic->isAllowedToUseUnlimitedExpirationDate()
        ) {
            throw new GrnInvalidArgumentException(ErrorCode::GRN_INVALID_EXPIRATION_DATE_TIME);
        }

        $space = $spaceLogic->modifySpace($space);

        $categoryLogic = CategoryLogic::getInstance();
        $iconLogic = IconLogic::getInstance();
        $spaceLogLogic = $this->getSpaceLogLogic();

        $category = $categoryLogic->getCategory($space->getCategoryId(),
            LanguageStatus::STANDARD_LANGUAGE_CODE);
        $icon = $iconLogic->getIcon($space->getBuiltinIconId());

        $modifySpaceLog = new ModifySpaceLog();
        $modifySpaceLog->setIcon($icon->getIconName());
        $modifySpaceLog->setSpaceName($space->getSpaceName());
        $modifySpaceLog->setSpaceId($space->getId());
        $modifySpaceLog->setCategoryName($category->getCategoryName());
        $modifySpaceLog->setPrivacy($space->isPublic()
            ? ModifySpaceLog::PRIVACY_PUBLIC
            : ModifySpaceLog::PRIVACY_PRIVATE);
        $modifySpaceLog->setJoinLeave($space->isAllowJoinLeave()
            ? ModifySpaceLog::ALLOW_JOIN_LEAVE
            : ModifySpaceLog::NOT_ALLOW_JOIN_LEAVE);
        if ( ! $space->getIsUnlimitedExpirationDate()) {
            $modifySpaceLog->setLimitExpirationDate($space->getExpirationDateTimestamp());
        }

        $spaceMemberNames = [];
        $spaceUserCollection = $this->getSpaceUserCollection($space->getId(),
            $operationUserId);
        $this->addUserInfo(
            $spaceUserCollection,
            $operationUserId,
            SpaceMemberUtility::SYSTEM_DOESNT_USE_ENGLISH,
            SpaceMemberUtility::ENGLISH_DOESNT_DISPLAY_AFTER_NAME,
            SpaceMemberUtility::ORGANIZATION_DOESNT_DISPLAY_AFTER_NAME,
            $operationUserLanguageCode
        );
        /** @var \grn\space\data\bean\SpaceUser $eachSpaceUser */
        foreach ($spaceUserCollection as $eachSpaceUser) {
            $spaceMemberNames[] = $eachSpaceUser->getDisplayName();
        }
        $modifySpaceLog->setMemberNameList($spaceMemberNames);
        $spaceOperatorNames = [];
        $spaceOperatorCollection
            = $this->getSpaceUserCollectionAccordingToAuthorityCode($spaceUserCollection,
            Authority::AUTHORITY_CODE_OPERATION_PRIVILEGE, $space->getId());
        $this->addUserInfo(
            $spaceOperatorCollection,
            $operationUserId,
            SpaceMemberUtility::SYSTEM_DOESNT_USE_ENGLISH,
            SpaceMemberUtility::ENGLISH_DOESNT_DISPLAY_AFTER_NAME,
            SpaceMemberUtility::ORGANIZATION_DOESNT_DISPLAY_AFTER_NAME,
            $operationUserLanguageCode
        );
        /** @var \grn\space\data\bean\SpaceUser $eachOperatorUser */
        foreach ($spaceOperatorCollection as $eachOperatorUser) {
            $spaceOperatorNames[] = $eachOperatorUser->getDisplayName();
        }
        $modifySpaceLog->setAdminNameList($spaceOperatorNames);
        $spaceLogLogic->info($modifySpaceLog);

        return $space;
    }

    /**
     * Move Space
     *
     * @param  string                                  $spaceId
     * @param  string                                  $targetCategoryId
     * @param  \grn\space\common\data\bean\SpaceMember $operationUser
     *
     * @throws GrnDataNotFoundException
     * @throws GrnInvalidArgumentException
     * @throws \grn\space\common\exception\GrnDatabaseException
     * @return \grn\space\data\bean\Space
     */
    public function moveSpace(
        $spaceId,
        $targetCategoryId,
        SpaceMember $operationUser
    ) {
        ValidateUtility::isNumber($spaceId, ValidateUtility::DISABLE_EMPTY);
        ValidateUtility::isNumber($targetCategoryId,
            ValidateUtility::DISABLE_EMPTY);
        $categoryLogic = CategoryLogic::getInstance();
        $spaceLogic = SpaceLogic::getInstance();
        $spaceLogLogic = $this->getSpaceLogLogic();

        //These can throw GrnDataNotFoundException
        $space = $spaceLogic->getSpace($spaceId,
            LanguageStatus::STANDARD_LANGUAGE_CODE);
        $targetCategory = $categoryLogic->getCategory($targetCategoryId,
            LanguageStatus::STANDARD_LANGUAGE_CODE);
        $oldParentCategory
            = $categoryLogic->getCategory($space->getCategoryId(),
            LanguageStatus::STANDARD_LANGUAGE_CODE);

        //category relation check
        if ($oldParentCategory->getId() != $targetCategory->getId()) {
            if ($this->_hasRelationSpaceCategory($targetCategory->getId(),
                    $operationUser->getMemberID()) === false
            ) {
                throw new GrnInvalidArgumentException();
            }
        }

        //confirm that the category of the space is not the root category.
        $rootCategory
            = $this->getSpaceRootCategory($operationUser->getMemberID());
        if ($targetCategoryId == $rootCategory->getId()) {
            throw new GrnInvalidArgumentException();
        }

        $space->setCategoryId($targetCategoryId);
        $space->setModifier($operationUser);
        $result = $spaceLogic->modifySpace($space);

        //Log MoveSpaceLog
        $moveSpaceLog = new MoveSpaceLog();
        $moveSpaceLog->setSpaceId($space->getId());
        $moveSpaceLog->setSpaceName($space->getSpaceName());
        $moveSpaceLog->setCategoryId($targetCategory->getId());
        $moveSpaceLog->setCategoryName($targetCategory->getCategoryName());
        $moveSpaceLog->setSourceCategoryId($space->getCategoryId());
        $moveSpaceLog->setSourceCategoryName($oldParentCategory->getCategoryName());
        $spaceLogLogic->info($moveSpaceLog);

        return $result;
    }


    /**
     * Delete the SPACE
     *
     * Attention: Use the method of checking the authority because it doesn't check the authority internally beforehand.
     *
     * @param     string $spaceId         spacesequence id
     * @param     string $operationUserId user sequence id
     *
     * @throws    GrnInvalidArgumentException    spaceId is not number. or operationUserId is not number.
     * @throws    GrnDataNotFoundException      There is no SPACE.
     * @throws    \grn\space\common\exception\GrnDatabaseException
     * @return    boolean (at now, always true)
     */
    public function deleteSpace($spaceId, $operationUserId)
    {
        ValidateUtility::isNumber($spaceId);
        ValidateUtility::isNumber($operationUserId);

        $spaceLogic = SpaceLogic::getInstance();
        $spaceLogLogic = $this->getSpaceLogLogic();

        $discussionService = DiscussionService::getInstance();
        $discussionIds
            = $discussionService->getAllDiscussionIdBySpaceId($spaceId);
        $discussionService->delAllFavourInDiscussion($discussionIds);
        //This maybe throws GrnDataNotFoundException
        $space = $spaceLogic->getSpace($spaceId,
            LanguageStatus::STANDARD_LANGUAGE_CODE);

        //Delete Kintone-related Data
        $this->deleteExternalApplicationBySpace($space);

        $applicationCategoryCollection
            = $spaceLogic->getApplicationCategoryListBySpaceId($spaceId);

        //Delete updated files
        $spaceFileLogic = SpaceFileLogic::getInstance();
        $spaceFileLogic->deleteFilesByCategoryCollection($applicationCategoryCollection);

        //Delete all Comment
        $commentLogic = CommentLogic::getInstance();
        $commentLogic->deleteCommentByCategoryCollection($applicationCategoryCollection);
        $commentLogic->deleteCommentSequenceNoByCategoryCollection($applicationCategoryCollection);

        //Delete all Category
        //  When the categories are deleted, 
        //  the threads and the todoes in them are also deleted.
        $categoryLogic = CategoryLogic::getInstance();
        $categoryLogic->deleteCategoryByCategoryCollection($applicationCategoryCollection);

        //ACL of the Space
        $aclLogic = AccessControlListLogic::getInstance();
        $aclLogic->deleteAclsBySpaceId($spaceId);

        //Delete Space it self
        $retval = $spaceLogic->deleteSpace($spaceId);

        //Log DeleteSpaceLog
        $deleteSpaceLog = new DeleteSpaceLog();
        $deleteSpaceLog->setSpaceId($spaceId);
        $deleteSpaceLog->setSpaceName($space->getSpaceName());
        $spaceLogLogic->info($deleteSpaceLog);

        //OriginalIconFileを削除（3.5.0では不要）

        //Full Text Search
        if (FtsApplication::isAvailable()) {
            $searchService = new IndexService();
            $searchService->deleteIndexBySpaceId($spaceId);
        }

        return $retval;
    }

    /**
     * Delete all the external(Kintone) applications related to $space.
     *
     * @param \grn\space\data\bean\Space $space
     */
    private function deleteExternalApplicationBySpace(Space $space)
    {
        ValidateUtility::isNumber($space->getId());

        $spaceLogic = SpaceLogic::getInstance();
        $spaceApplicationLogic = SpaceApplicationLogic::getInstance();
        $applicationLogic = ApplicationLogic::getInstance();
        $spaceLogLogic = $this->getSpaceLogLogic();

        //Get applications belonging to this Space
        $spaceApplicationSearchCondition
            = new SpaceApplicationSearchCondition();
        $spaceApplicationSearchCondition->setSearchSpaceId($space->getId());
        $spaceApplicationSearchCondition->setSearchApplicationType(SpaceApplication::APPLICATION_TYPE_EXTERNAL_KINTONE);

        $spaceApplicationCollection
            = $spaceApplicationLogic->search($spaceApplicationSearchCondition);

        /** @var \grn\space\data\bean\SpaceApplication $eachSpaceApplication */
        foreach ($spaceApplicationCollection as $eachSpaceApplication) {
            if ($eachSpaceApplication->isExternalApplicationOwner()) {
                $removalSearchCondition = new SpaceApplicationSearchCondition();
                $removalSearchCondition->setSearchApplicationId($eachSpaceApplication->getId());
                $removalSearchCondition->setSearchExternalApplicationOwner(SpaceApplication::EXTERNAL_APPLICATION_OWNER_NOT_OWNER);
                $removalSearchCondition->setSearchApplicationType(SpaceApplication::APPLICATION_TYPE_EXTERNAL_KINTONE);
                $removalSpaceApplicationCollection
                    = $spaceApplicationLogic->search($removalSearchCondition);

                /** @var \grn\space\data\bean\SpaceApplication $eachRemovalSpaceApplication */
                foreach (
                    $removalSpaceApplicationCollection as
                    $eachRemovalSpaceApplication
                ) {
                    // for logging
                    $tmpSpace
                        = $spaceLogic->getSpace($eachRemovalSpaceApplication->getSpaceId(),
                        LanguageStatus::STANDARD_LANGUAGE_CODE);

                    if ( ! $eachRemovalSpaceApplication->isExternalApplicationOwner()) {
                        //Log DeleteAppManageLog
                        $deleteAppManageLog = new DeleteAppManageLog();
                        $deleteAppManageLog->setSpaceId($eachRemovalSpaceApplication->getSpaceId());
                        $deleteAppManageLog->setSpaceName($tmpSpace->getSpaceName());
                        $deleteAppManageLog->setExternalAppName($eachRemovalSpaceApplication->getApplicationName());
                        $deleteAppManageLog->setExternalId($eachRemovalSpaceApplication->getExternalApplicationId());
                        $deleteAppManageLog->setExternalDeleteType(DeleteAppManageLog::EXTERNAL_DELETE_TYPE_LINK);
                        $spaceLogLogic->info($deleteAppManageLog);
                    }
                }
                $spaceApplicationLogic->deleteSpaceApplicationByApplicationId($eachSpaceApplication->getId());

                try {
                    $applicationLogic->delete($eachSpaceApplication);

                    //Log DeleteAppManageLog
                    $deleteAppManageLog = new DeleteAppManageLog();
                    $deleteAppManageLog->setSpaceId($space->getId());
                    $deleteAppManageLog->setSpaceName($space->getSpaceName());
                    $deleteAppManageLog->setExternalAppName($eachSpaceApplication->getApplicationName());
                    $deleteAppManageLog->setExternalId($eachSpaceApplication->getExternalApplicationId());
                    $deleteAppManageLog->setExternalDeleteType(DeleteAppManageLog::EXTERNAL_DELETE_TYPE_OBJECT);
                    $spaceLogLogic->info($deleteAppManageLog);
                } catch (GrnKintoneException $exception) {
                    //@todo
                    // When GrnKintoneException occurs, ...
                    //   - the details of the exception should be logged.
                    //   - this exception should not be thrown again because this transaction must succeed regardress of the Kintone status.
                    //   - the related record was removed from table "tab_grn_space_application" and it is as specification.
                }
            } else {
                $spaceApplicationLogic->delete($eachSpaceApplication->getSpaceId(),
                    $eachSpaceApplication->getId());

                //Log DeleteAppManage
                $deleteAppManageLog = new DeleteAppManageLog();
                $deleteAppManageLog->setSpaceId($space->getId());
                $deleteAppManageLog->setSpaceName($space->getSpaceName());
                $deleteAppManageLog->setExternalAppName($eachSpaceApplication->getApplicationName());
                $deleteAppManageLog->setExternalId($eachSpaceApplication->getExternalApplicationId());
                $deleteAppManageLog->setExternalDeleteType(DeleteAppManageLog::EXTERNAL_DELETE_TYPE_LINK);
                $spaceLogLogic->info($deleteAppManageLog);

            }
        }
    }

    //*********************************************************************************************************
    //**********************************           SPACE memo          ****************************************
    //*********************************************************************************************************
    /**
     * Refer the SPACE memo.
     *
     * Attention: Use the method of checking the authority because it doesn't check the authority internally beforehand.
     *
     * @param     string $spaceId         SPACE sequence id
     * @param     string $operationUserId user sequence id
     *
     * @throws    GrnInvalidArgumentException    spaceId is not number. or operationUserId is not number.
     * @throws    GrnDataNotFoundException      There is no SPACE.
     * @throws    \grn\space\common\exception\GrnDatabaseException
     * @return    \grn\space\data\bean\SpaceMemo
     */
    public function getSpaceMemo($spaceId, $operationUserId)
    {
        ValidateUtility::isNumber($spaceId);
        ValidateUtility::isNumber($operationUserId);

        $spaceLogic = SpaceLogic::getInstance();

        return $spaceLogic->getSpaceMemoWithStatus($spaceId, $operationUserId);
    }

    /**
     * Modify the SPACE memo.
     *
     * Attention: Use the method of checking the authority because it doesn't check the authority internally beforehand.
     *
     * @param     \grn\space\data\bean\SpaceMemo $spaceMemo
     * @param     string                         $operationUserId user sequence id
     *
     * @return    \grn\space\data\bean\SpaceMemo
     * @throws    GrnInvalidArgumentException        operationUserId is not number.
     * @throws    \grn\space\common\exception\GrnDatabaseException
     */
    public function modifySpaceMemo(SpaceMemo $spaceMemo, $operationUserId)
    {
        ValidateUtility::isNumber($operationUserId);

        //confirm the required parameter is valid
        $spaceMemo->isValidData(SpaceMemo::VALID_TYPE_MODIFY);

        //Edit SpaceMemo
        $spaceLogic = SpaceLogic::getInstance();
        $spaceMemo = $spaceLogic->updateSpaceMemo($spaceMemo);

        //space component modify timestamp update
        $space = $spaceLogic->getSpace($spaceMemo->getId(),
            LanguageStatus::STANDARD_LANGUAGE_CODE);
        $spaceLogic->modifySpaceComponentModifyTimestamp($space);

        //Open the memo field
        $spaceLogic->openMemoFieldForAllUsers($spaceMemo->getId());

        //Full text search
        if (FtsApplication::isAvailable()) {
            $searchService = new IndexService();
            $searchService->updateSpaceIndex($space, $operationUserId);
        }

        return $spaceMemo;
    }


    /**
     * change the state (open/close) of SPACE Memo.
     *
     * Attention: Use the method of checking the authority because it doesn't check the authority internally beforehand.
     *
     * @param     string  $spaceId         SPACE sequence id
     * @param     string  $operationUserId user sequence id
     * @param     boolean $isOpen          The constant has been defined in oneself.     SPACE_MEMO_OPEN: memo open    SPACE_MEMO_CLOSE: memo close
     *
     * @throws    GrnInvalidArgumentException   spaceId is not number. or operationUserId is not number. or isOpen is not boolean.
     * @throws    GrnDataNotFoundException     There is no SPACE.
     * @throws    \grn\space\common\exception\GrnDatabaseException
     * @return    \grn\space\data\bean\SpaceMemoOpenStatus
     */
    public function toggleSpaceMemoOpenStatus(
        $spaceId,
        $operationUserId,
        $isOpen
    ) {
        ValidateUtility::isNumber($spaceId);
        ValidateUtility::isNumber($operationUserId);
        ValidateUtility::isBoolean($isOpen);

        //権限チェック（SpaceMemo単位には持っていない。カテゴリの権限をチェック）
        //必須情報チェック

        //SpaceMemo開閉状態を参照
        $spaceLogic = SpaceLogic::getInstance();

        // Confirm that the Space and its memo is exists.
        $spaceLogic->getSpaceMemoWithStatus($spaceId, $operationUserId);

        $spaceMemoOpenStatus = new SpaceMemoOpenStatus();
        $spaceMemoOpenStatus->setId($spaceId);
        $spaceMemoOpenStatus->setUserId($operationUserId);
        $spaceMemoOpenStatus->setIsMemoOpen($isOpen);

        return $spaceLogic->toggleSpaceMemoOpenStatus($spaceMemoOpenStatus);
    }

    /**
     * @param        $spaceId
     * @param        $operationUserId
     * @param string $offset
     * @param string $limit
     *
     * @return SpaceUserCollection
     */
    public function getSpaceUserCollection(
        $spaceId,
        $operationUserId,
        $offset = '0',
        $limit = '18446744073709551615'
    ) {
        return $this->getSpaceUserCollectionByDetailCondition($spaceId,
            $operationUserId, $offset, $limit);
    }

    /**
     * @param        $spaceId
     * @param        $operationUserId
     * @param string $offset
     * @param string $limit
     *
     * @return SpaceUserCollection
     */
    public function getSpaceUserCollectionOfUserOnly(
        $spaceId,
        $operationUserId,
        $offset = '0',
        $limit = '18446744073709551615'
    ) {
        return $this->getSpaceUserCollectionByDetailCondition($spaceId,
            $operationUserId, $offset, $limit, true);
    }

    /**
     * @param string $spaceId
     * @param string $operationUserId
     * @param string $offset
     * @param string $limit
     *
     * @return array
     */
    public function getSpaceUserIdsArrayOfUserOnly(
        $spaceId,
        $operationUserId,
        $offset = '0',
        $limit = '18446744073709551615'
    ) {
        $space_user_collection
            = $this->getSpaceUserCollectionOfUserOnly($spaceId,
            $operationUserId, $offset, $limit);

        $result = [];
        /** @var SpaceUser $space_user */
        foreach ($space_user_collection as $space_user) {
            $member_id = $space_user->getMemberID();
            $result[$member_id] = $member_id;
        }

        return $result;
    }

    //*********************************************************************************************************
    //**********************************           SPACE user          ****************************************
    //*********************************************************************************************************
    /**
     * Spaceの参加者IDを取得する
     *
     * Attention: Use the method of checking the authority because it doesn't check the authority internally beforehand.
     *
     * @param     string $spaceId         SPACE sequence id
     * @param     string $operationUserId user sequence id
     * @param     string $offset          offset for searchSpaceUsers
     * @param     string $limit           limit for searchSpaceUsers
     * @param     bool   $is_users_only   Is Search users only
     *
     * @throws    GrnInvalidArgumentException    spaceId is not number. or operationUserId is not number.
     * @throws    GrnDataNotFoundException      There is no SPACE.
     * @throws    \grn\space\common\exception\GrnDatabaseException
     * @return    \grn\space\data\collection\SpaceUserCollection
     */
    private function getSpaceUserCollectionByDetailCondition(
        $spaceId,
        $operationUserId,
        $offset = '0',
        $limit = '18446744073709551615',
        $is_users_only = false
    ) {
        ValidateUtility::isNumber($spaceId);
        ValidateUtility::isNumber($operationUserId);

        $spaceUserSearchCondition = new SpaceUserSearchCondition();
        $spaceUserSearchCondition->setSearchSpaceId($spaceId);
        $spaceUserSearchCondition->setOrderSortArray([SpaceUserSearchCondition::SORT_DISPLAY_ORDER_ASC]);
        $spaceUserSearchCondition->setOffset($offset);
        $spaceUserSearchCondition->setLimit($limit);
        $spaceUserSearchCondition->setIsSearchUsersOnly($is_users_only);

        $spaceLogic = SpaceLogic::getInstance();
        $searchSpaceUsers
            = $spaceLogic->searchSpaceUsers($spaceUserSearchCondition,
            $operationUserId);

        return $searchSpaceUsers;
    }


    /**
     * Searches for the SPACE-User.
     *
     * Attention: Use the method of checking the authority because it doesn't check the authority internally beforehand.
     *
     * @param     \grn\space\data\condition\SpaceUserSearchCondition $searchCondition SpaceUserSearchCondition
     * @param     string                                             $operationUserId user sequence id
     *
     * @throws    \grn\space\common\exception\GrnRequiredDataIsNotException         There is no information necessary for searchConditionObj.
     * @throws    GrnInvalidArgumentException           operationUserId is not number
     * @throws    \grn\space\common\exception\GrnDatabaseException                  Any error in the database.
     * @return    \grn\space\data\collection\SpaceUserCollection
     */
    public function searchSpaceUserBySearchCondition(
        SpaceUserSearchCondition $searchCondition,
        $operationUserId
    ) {
        $searchCondition->isValidData(CategorySearchCondition::VALID_TYPE_SELECT);
        ValidateUtility::isNumber($operationUserId);

        $spaceLogic = SpaceLogic::getInstance();

        return $spaceLogic->searchSpaceUsers($searchCondition,
            $operationUserId);
    }



    //****************************************************************************************************************
    //**********************************           SPACE application          ****************************************
    //****************************************************************************************************************
    /**
     * SpaceApplicationを検索する
     *
     * @param     \grn\space\data\condition\SpaceApplicationSearchCondition $condition
     * @param     string                                                    $operationUserId user sequence id
     *
     * @throws    GrnInvalidArgumentException    operationUserId is not number. or languageCode is not language code.
     * @throws    \grn\space\common\exception\GrnDatabaseException
     * @return    \grn\space\data\collection\SpaceApplicationCollection
     */
    public function searchSpaceApplicationBySearchCondition(
        SpaceApplicationSearchCondition $condition,
        $operationUserId
    ) {
        ValidateUtility::isNumber($operationUserId);

        //必須情報チェック
        //アプリ検索
        $logic = SpaceApplicationLogic::getInstance();
        $result = $logic->search($condition);

        return $result;
    }

    /**
     * SpaceApplicationを参照する
     *
     * @param     string $applicationId   application sequence id
     * @param     string $spaceId         SPACE sequence id
     * @param     string $operationUserId user sequence id
     * @param     string $languageCode
     *
     * @return    \grn\space\data\bean\SpaceApplication
     * @throws    GrnInvalidArgumentException    applicationId is not number. or spaceId is not number. or operationUserId is not number.
     * @throws    GrnDataNotFoundException      There is no SPACE APPLICATION.
     * @throws    \grn\space\common\exception\GrnDatabaseException
     */
    public function getSpaceApplication(
        $applicationId,
        $spaceId,
        $operationUserId,
        $languageCode = LanguageStatus::STANDARD_LANGUAGE_CODE
    ) {
        ValidateUtility::isNumber($applicationId);
        ValidateUtility::isNumber($spaceId);
        ValidateUtility::isNumber($operationUserId);


        //SpaceApplication検索
        $logic = SpaceApplicationLogic::getInstance();
        $result = $logic->get($spaceId, $applicationId, $languageCode);

        return $result;
    }

    /**
     * SpaceApplicationを作成する
     *
     * @param     \grn\space\data\bean\SpaceApplication $application
     * @param     string                                $operationUserId user sequence id
     *
     * @throws    GrnInvalidArgumentException        operationUserId is not number.
     * @throws    \grn\space\common\exception\GrnDatabaseException
     * @return    \grn\space\data\bean\SpaceApplication(Added application object.)
     */
    public function createSpaceApplication(
        SpaceApplication $application,
        $operationUserId
    ) {
        ValidateUtility::isNumber($operationUserId);

        //必須情報チェック
        //Applicationの存在チェック
        //Applicationに無い場合はApplication登録してIDを取得
        //Applicationがある場合は該当ApplicationのIDを取得
        //SpaceApplication登録
        $logic = SpaceApplicationLogic::getInstance();
        $result = $logic->save($application);

        //外部連携先のアプリ作成はどうする？

        return $result;
    }


    /**
     * SpaceApplicationを削除する
     *
     * @param     string $applicationId   application sequence id
     * @param     string $spaceId         SPACE sequence id
     * @param     string $operationUserId user sequence id
     *
     * @throws    \grn\space\common\exception\GrnIllegalOperationException   An internal application cannot be deleted.
     * @throws    GrnInvalidArgumentException    applicationId is not number. or spaceId is not number. or operationUserId is not number.
     * @throws    GrnDataNotFoundException      There is no SPACE APPLICATION.
     * @throws    \grn\space\common\exception\GrnDatabaseException
     *
     * @return    bool
     */
    public function deleteSpaceApplication(
        $applicationId,
        $spaceId,
        $operationUserId
    ) {
        ValidateUtility::isNumber($applicationId);
        ValidateUtility::isNumber($spaceId);
        ValidateUtility::isNumber($operationUserId);

        //内部アプリだったらエラー
        //必須情報チェック
        $logic = SpaceApplicationLogic::getInstance();
        $result = $logic->delete($spaceId, $applicationId);

        //外部アプリの所有者だった場合
        //アプリケーションテンプレートに登録したアプリケーションの関連レコードを全て削除
        //スペースアプリケーションの関連レコードを全て削除
        //SpaceApplication多言語をすべて削除
        //SpaceApplication削除
        //外部連携先のアプリ削除はどうする？

        //外部アプリの利用者だった場合
        //テンプレートでも利用されておらず、今回対象となっているSPACEが最後の利用者だった場合
        //アプリケーションテンプレートに登録したアプリケーションの関連レコードを全て削除
        //スペースアプリケーションの関連レコードを全て削除
        //SpaceApplication多言語をすべて削除
        //SpaceApplication削除

        //テンプレートで利用している、または、今回対象となっているSPACE以外でも利用者している場合
        //スペースアプリケーションの関連レコードを削除（自身のSPACEのみ）

        return $result;
    }

    //****************************************************************************************************************
    //*****************           It doesn't refer from doc_root for the present.           **************************
    //****************************************************************************************************************
    //****************************************************************************************************************
    //**********************************           application          **********************************************
    //****************************************************************************************************************
    /**
     * applicationを検索する
     *
     * @param     \grn\space\common\data\condition\ApplicationSearchCondition $condition
     * @param     string                                                      $operationUserId user sequence id
     * @param     string                                                      $languageCode    dispaly language code. The standard is display at STANDARD_LANGUAGE_CODE.
     *
     * @throws    GrnInvalidArgumentException        operationUserId is not number. or languageCode is not language code.
     * @throws    \grn\space\common\exception\GrnDatabaseException
     * @return    \grn\space\common\data\bean\Application
     */
    public function searchApplicationBySearchCondition(
        ApplicationSearchCondition $condition,
        $operationUserId,
        $languageCode = LanguageStatus::STANDARD_LANGUAGE_CODE
    ) {
        ValidateUtility::isNumber($operationUserId);
        ValidateUtility::isLanguageCode($languageCode);

        //必須情報チェック
        //アプリ検索
        $logic = ApplicationLogic::getInstance();
        $result = $logic->search($condition);

        return $result;
    }

    /**
     * applicationを参照する
     *
     * @param     string $applicationId   application sequence id
     * @param     string $languageCode    language code
     * @param     string $operationUserId user sequence id
     *
     * @throws    GrnInvalidArgumentException    applicationId is not number. or operationUserId is not number.
     * @throws    GrnDataNotFoundException      There is no APPLICATION.
     * @throws    \grn\space\common\exception\GrnDatabaseException
     * @return    \grn\space\common\data\bean\Application   (refer application object.)
     */
    public function getApplication(
        $applicationId,
        $operationUserId,
        $languageCode = LanguageStatus::STANDARD_LANGUAGE_CODE
    ) {
        ValidateUtility::isNumber($applicationId);
        ValidateUtility::isNumber($operationUserId);

        //Application検索
        $logic = ApplicationLogic::getInstance();
        $result = $logic->get($applicationId, $languageCode);

        return $result;
    }

    /**
     * Create Application
     *
     * This method does not call any API of external applications.
     *
     * @param     \grn\space\common\data\bean\Application                      $application     Application
     * @param     \grn\space\common\data\collection\ApplicationLocalCollection $applicationLocalCollection
     * @param     string                                                       $operationUserId user sequence id
     *
     * @throws    GrnInvalidArgumentException        operationUserId is not number.
     * @throws    \grn\space\common\exception\GrnDatabaseException
     * @return    Application(Added application object.)
     */
    public function createApplication(
        Application $application,
        ApplicationLocalCollection $applicationLocalCollection,
        $operationUserId
    ) {
        ValidateUtility::isNumber($operationUserId);
        $application->isValidData(Application::VALID_TYPE_CREATE);

        //adjust data
        if (strlen($application->getModifierId()) == 0) {
            $application->setModifier($application->getCreator());
            $application->setModifyTimestamp($application->getCreateTimestamp());
        }

        //Application登録
        $logic = ApplicationLogic::getInstance();
        $result = $logic->save($application, $applicationLocalCollection);

        return $result;
    }


    /**
     * Modify Application.
     *
     * This method does not call any API of external applications.
     *
     * @param     \grn\space\common\data\bean\Application                      $application
     * @param     \grn\space\common\data\collection\ApplicationLocalCollection $applicationLocalCollection
     * @param     string                                                       $operationUserId user sequence id
     *
     * @throws    GrnInvalidArgumentException        operationUserId is not number.
     * @throws    \grn\space\common\exception\GrnIllegalOperationException       An internal application cannot be changed.
     * @throws    GrnDataNotFoundException          There is no APPLICATION.
     * @throws    \grn\space\common\exception\GrnDatabaseException
     * @return    \grn\space\common\data\bean\Application   (modified application object.)
     */
    public function modifyApplication(
        Application $application,
        ApplicationLocalCollection $applicationLocalCollection,
        $operationUserId
    ) {
        ValidateUtility::isNumber($operationUserId);
        $application->isValidData(Application::VALID_TYPE_MODIFY);

        //内部アプリだったらエラー
        //必須情報チェック
        //Application変更
        //先にこちらから変更することは無い（変更画面が無い）ので、外部連携先のアプリ変更の考慮は不要
        $logic = ApplicationLogic::getInstance();
        $result = $logic->update($application);

        $oldLocalCollection
            = $logic->getApplicationLocalCollection($application->getId());

        $removedLocalCollection
            = $oldLocalCollection->getNotInLanguage($applicationLocalCollection);

        //insert/update SpaceLocal
        $logic->modifyApplicationLocal($applicationLocalCollection);

        //remove old SpaceLocal
        $logic->deleteApplicationLocal($removedLocalCollection);

        return $result;
    }

    /**
     * Applicationを削除する
     *
     * @param     \grn\space\common\data\bean\Application $application     application
     * @param     string                                  $operationUserId user sequence id
     *
     * @throws    \grn\space\common\exception\GrnIllegalOperationException   An internal application cannot be deleted.
     * @throws    GrnInvalidArgumentException    applicationId is not number. or spaceId is not number. or operationUserId is not number.
     * @throws    GrnDataNotFoundException      There is no APPLICATION.
     * @throws    \grn\space\common\exception\GrnDatabaseException
     * @return    bool
     */
    public function deleteApplication(
        Application $application,
        $operationUserId
    ) {
        ValidateUtility::isNumber($operationUserId);

        //内部アプリだったらエラー
        //必須情報チェック

        //アプリケーションテンプレートに登録したアプリケーションの関連レコードを全て削除
        //スペースアプリケーションの関連レコードを全て削除
        //Application多言語をすべて削除
        //Application削除

        //外部連携先のアプリ削除はどうする？
        $logic = ApplicationLogic::getInstance();
        $result = $logic->delete($application);

        return $result;
    }

    /**
     * @param $userID
     * @param $spaceID
     * @param $operationUserID
     *
     * @return bool
     */
    public function isSpaceMember($userID, $spaceID, $operationUserID)
    {
        $memberList = $this->getSpaceUserCollectionByDetailCondition($spaceID,
            $operationUserID, '0', '18446744073709551615', true);
        /** @var \grn\space\data\bean\SpaceUser $member */
        foreach ($memberList as $member) {
            if ($member->getMemberID() == $userID) {
                return true;
            }
        }

        return false;
    }

    /**
     * Get SpaceLocal by Space ID
     *
     * @param string $spaceId
     *
     * @return \grn\space\data\collection\SpaceLocalCollection
     */
    public function getSpaceLocalCollection($spaceId)
    {
        $spaceLogic = SpaceLogic::getInstance();

        return $spaceLogic->getSpaceLocalCollection($spaceId);
    }

    /**
     * check whether the notification is confirmed.
     *
     * @param   string $userId
     * @param   string $spaceId
     *
     * @return  boolean
     */
    public function isNotConfirmedSpaceNotification($userId, $spaceId)
    {
        return $this->isNotConfirmedNotification($userId,
            \GrnSpaceApplication::GRN_SPACE_SUB_MODULE_ID, $spaceId);
    }

    /**
     * confirm notification
     *
     * @param                            $userId
     * @param \grn\space\data\bean\Space $space
     */
    public function confirmSpaceNotification($userId, Space $space)
    {
        $timestamp = new \CB_Timestamp();
        $timestamp->unix_ts = $space->getModifyTimestamp();
        $sub_module_id = \GrnSpaceApplication::GRN_SPACE_SUB_MODULE_ID;

        $spaceNotificationLogic = SpaceNotificationLogic::getInstance();
        $spaceNotificationLogic->confirmNotification($userId, $space->getId(),
            $timestamp, $sub_module_id);
    }


    /**
     * Add the amount of file usage
     *
     * @param \grn\space\data\collection\SpaceCollection $spaceCollection
     *
     * @return string
     */
    public function addFileUsage(SpaceCollection $spaceCollection)
    {
        $fileLogic = SpaceFileLogic::getInstance();

        return $fileLogic->addFileUsage($spaceCollection);
    }

    /**
     * Select child categories of the category whose ID is $parentCategoryId
     *
     * @param string $parentCategoryId
     * @param string $languageCode
     *
     * @return \grn\space\common\data\collection\CategoryCollection
     */
    public function getChildCategoryList(
        $parentCategoryId,
        $languageCode = LanguageStatus::STANDARD_LANGUAGE_CODE
    ) {
        ValidateUtility::isNumber($parentCategoryId);
        ValidateUtility::isLanguageCode($languageCode);

        $categoryLogic = CategoryLogic::getInstance();

        return $categoryLogic->getChildCategoryList($parentCategoryId,
            $languageCode);
    }

    /**
     * @param $categoryIdList
     * @param $operationUserID
     */
    public function reorderSpaceCategory($categoryIdList, $operationUserID)
    {
        $logic = CategoryLogic::getInstance();
        foreach ($categoryIdList as $order => $cid) {
            $category = $this->getSpaceCategory($cid, $operationUserID);
            $category->setDisplayOrder((int)$order);
            $logic->modifyCategory($category);
        }
    }

    /**
     * Calculate the file size consumed by this category.
     *
     * This function walks into its descendant categories with ignoring access rights and sum them up.
     *
     * @param string $categoryId
     *
     * @return string amount size
     */
    public function getFileUsageOfCategory($categoryId)
    {
        $logic = SpaceFileLogic::getInstance();

        return $logic->getFileUsageOfCategory($categoryId);
    }

    /**
     * Get space list with the disk space which is consumed by each space.
     *
     *
     * @param \grn\space\data\condition\SpaceWithFileSearchCondition $condition
     * @param                                                        $operationUserId
     *
     * @return \grn\space\data\collection\SpaceCollection
     */
    public function getSpaceListWithFileUsage(
        SpaceWithFileSearchCondition $condition,
        $operationUserId
    ) {
        ValidateUtility::isNumber($operationUserId,
            ValidateUtility::DISABLE_EMPTY);
        $condition->isValidData(SpaceWithFileSearchCondition::VALID_TYPE_SELECT);

        $logic = SpaceLogic::getInstance();

        return $logic->getSpaceListWithFileUsage($condition);
    }


    /**
     *
     * @param \grn\space\data\bean\MemberOpenStatus $memberOpenStatus
     *
     * @return boolean
     */
    public function isMemberFieldOpen(MemberOpenStatus $memberOpenStatus)
    {
        $memberOpenStatus->isValidData(MemberOpenStatus::VALID_TYPE_SELECT);

        $spaceLogic = SpaceLogic::getInstance();

        return $spaceLogic->isMemberFieldOpen($memberOpenStatus);
    }

    /**
     *
     * @param \grn\space\data\bean\MemberOpenStatus $memberOpenStatus
     *
     * @return MemberOpenStatus
     */
    public function closeMemberField(MemberOpenStatus $memberOpenStatus)
    {
        $memberOpenStatus->isValidData(MemberOpenStatus::VALID_TYPE_MODIFY);

        $spaceLogic = SpaceLogic::getInstance();

        return $spaceLogic->closeMemberField($memberOpenStatus);
    }

    /**
     *
     * @param \grn\space\data\bean\MemberOpenStatus $memberOpenStatus
     */
    public function openMemberField(MemberOpenStatus $memberOpenStatus)
    {
        $memberOpenStatus->isValidData(MemberOpenStatus::VALID_TYPE_MODIFY);

        $spaceLogic = SpaceLogic::getInstance();
        $spaceLogic->openMemberField($memberOpenStatus);
    }

    /**
     * @param \grn\space\common\exception\GrnKintoneException $exception
     * @param \grn\space\data\bean\Space                      $space
     * @param string                                          $operationUserId
     *
     * @throws \grn\space\common\exception\GrnKintoneException
     */
    private function catchKintoneException(
        GrnKintoneException $exception,
        Space $space,
        $operationUserId
    ) {
        if (\GRN_Kintone_Logic::isAvailable()) {
            throw $exception;
        } else {
            // kintone が解約されていた場合、kintone連携アプリをスペースから外す
            $condition = new SpaceApplicationSearchCondition();
            $condition->setSearchSpaceId($space->getId());
            $condition->setSearchApplicationType(Application::APPLICATION_TYPE_EXTERNAL_KINTONE);
            $kintoneAppCollection
                = $this->searchSpaceApplicationBySearchCondition($condition,
                $operationUserId);
            foreach ($kintoneAppCollection as $app) {
                /** @var $app SpaceApplication */
                $kintoneService = KintoneService::getInstance();
                $kintoneService->unlinkKintoneApplication($space, $app);
            }
        }
    }

    /**
     * Modify space user and space access control list.
     *
     * @param Space               $space
     * @param SpaceUserCollection $spaceUserCollection
     * @param SpaceUserCollection $spaceOperatorCollection
     * @param string              $operationUserId
     * @param string              $operationUserLanguageCode
     *
     * @throws GrnInvalidArgumentException
     */
    public function modifySpaceUser(
        Space $space,
        SpaceUserCollection $spaceUserCollection,
        SpaceUserCollection $spaceOperatorCollection,
        $operationUserId,
        $operationUserLanguageCode
    ) {
        ValidateUtility::isNumber($operationUserId);
        $space->isValidData(Space::VALID_TYPE_MODIFY);

        //Adjust data
        /** @var \grn\space\data\bean\SpaceUser $eachSpaceUser */
        foreach ($spaceUserCollection as $eachSpaceUser) {
            $eachSpaceUser->setSpaceId($space->getId());
        }

        $spaceLogic = SpaceLogic::getInstance();
        $oldSpace = $spaceLogic->getSpace($space->getId(),
            LanguageStatus::STANDARD_LANGUAGE_CODE);

        //overlap space code check
        $spaceLogic = SpaceLogic::getInstance();
        if ($oldSpace->getSpaceCode() != $space->getSpaceCode()) {
            $spaceCollection
                = $spaceLogic->getSpaceCollectionBySpaceCode($space->getSpaceCode(),
                LanguageStatus::STANDARD_LANGUAGE_CODE);
            if (count($spaceCollection) > 0) {
                throw new GrnInvalidArgumentException();
            }
        }

        //confirm that the category of the space is not the root category.
        $rootCategory = $this->getSpaceRootCategory($operationUserId);
        if ($space->getCategoryId() == $rootCategory->getId()) {
            throw new GrnInvalidArgumentException();
        }
        $spaceUserSearchCondition = new SpaceUserSearchCondition();
        $spaceUserSearchCondition->setSearchSpaceId($space->getId());
        $spaceUserSearchCondition->setOrderSortArray([SpaceUserSearchCondition::SORT_DISPLAY_ORDER_ASC]);
        $oldSpaceUserCollection
            = $spaceLogic->searchSpaceUsers($spaceUserSearchCondition,
            $operationUserId);
        /** @var SpaceUserCollection $removedSpaceUserCollection */
        $removedSpaceUserCollection
            = $oldSpaceUserCollection->getNotIn($spaceUserCollection);
        $this->_modifySpaceUser($space, $spaceUserCollection,
            $oldSpaceUserCollection, $removedSpaceUserCollection,
            $operationUserId, $operationUserLanguageCode);
        $this->_modifySpaceAcl($space, $oldSpace, $spaceUserCollection,
            $oldSpaceUserCollection, $removedSpaceUserCollection,
            $spaceOperatorCollection);
    }

    /**
     * Modify space user only.
     *
     * @param Space               $space
     * @param SpaceUserCollection $spaceUserCollection
     * @param SpaceUserCollection $oldSpaceUserCollection
     * @param SpaceUserCollection $removedSpaceUserCollection
     * @param string              $operationUserId
     * @param string              $operationUserLanguageCode
     * @param SpaceLogic          $spaceLogic
     * @param CategoryLogic       $categoryLogic
     */
    public function _modifySpaceUser(
        Space $space,
        SpaceUserCollection $spaceUserCollection,
        SpaceUserCollection $oldSpaceUserCollection,
        SpaceUserCollection $removedSpaceUserCollection,
        $operationUserId,
        $operationUserLanguageCode,
        SpaceLogic $spaceLogic = null,
        CategoryLogic $categoryLogic = null
    ) {
        if (is_null($spaceLogic)) {
            $spaceLogic = SpaceLogic::getInstance();
        }

        $spaceAclLogic = new SpaceAccessControlListLogic();
        /*$removedSpaceUserIds = $spaceAclLogic->getRemovedSpaceUserIds($oldSpaceUserCollection, $removedSpaceUserCollection);*/
        $removedSpaceUserIds
            = $spaceAclLogic->getRemovedSpaceUserIds($spaceUserCollection,
            $removedSpaceUserCollection);

        //Rewrite $spaceUserCollection
        for ($i = 0; $i < count($spaceUserCollection); $i++) {
            /** @var \grn\space\data\bean\SpaceUser $eachSpaceUser */
            $eachSpaceUser = $spaceUserCollection->getBean($i);
            $eachSpaceUser->setDisplayOrder($i
                                            + 1); // DisplayOrder starts from 1
        }

        //remove old SpaceUser
        $spaceLogic->deleteSpaceUserAll($space->getId());
        //insert SpaceUser
        $spaceLogic->createSpaceUsers($space, $spaceUserCollection);

        if (is_null($categoryLogic)) {
            $categoryLogic = CategoryLogic::getInstance();
        }

        $discussionRootCategory
            = $categoryLogic->getCategoryBySpaceIdApplicationCode($space->getId(),
            Application::APPLICATION_CODE_DISCUSSION,
            LanguageStatus::STANDARD_LANGUAGE_CODE);
        $discussionSearchCondition = new ThreadSearchCondition();
        $discussionSearchCondition->setSearchCategoryId($discussionRootCategory->getId());
        $discussionLogic = ThreadLogic::getInstance();
        $discussionCollection
            = $discussionLogic->searchThread($discussionSearchCondition);
        if (count($removedSpaceUserIds) > 0) {
            //remove DiscussionNonNotificationUser
            $discussionLogic->deleteAllDiscussionNonNotification($discussionCollection,
                $removedSpaceUserIds);
        }
        //Spaceの新規参加者が対象
        /** @var SpaceUserCollection $diffUserCollection */
        $diffUserCollection
            = $spaceUserCollection->getNotIn($oldSpaceUserCollection);
        $notification_user_ids
            = $spaceLogic->getSpaceUserMemberIds($diffUserCollection,
            $space->getId());
        if (count($diffUserCollection) > 0) {
            //remove DiscussionNotificationUser
            $discussionLogic->deleteMultiDiscussionNotification($discussionCollection,
                $diffUserCollection);
        }

        //remove TodoUser
        $todoLogic = TodoLogic::getInstance();
        if (count($removedSpaceUserIds) > 0) {
            $todoLogic->deleteTodoUsersBySpaceIdSpaceMemberCollection($space->getId(),
                $removedSpaceUserIds);
        }

        //update is_complete of Todo
        $todoRootCategory
            = $categoryLogic->getCategoryBySpaceIdApplicationCode($space->getId(),
            Application::APPLICATION_CODE_TODO,
            LanguageStatus::STANDARD_LANGUAGE_CODE);
        $todoLogic->modifyCompleteTodosByCategoryId($todoRootCategory->getId());

        //通知処理（Spaceの新規参加者が対象）
        $notificationLogic = SpaceNotificationLogic::getInstance();
        $timestamp = new \CB_Timestamp;
        $timestamp->unix_ts = time();
        $notificationLogic->sendSpaceNotification($operationUserId, $space,
            $notification_user_ids, $timestamp);
    }

    /**
     * Modify space access control list only.
     *
     * @param Space               $space
     * @param Space               $oldSpace
     * @param SpaceUserCollection $spaceUserCollection
     * @param SpaceUserCollection $oldSpaceUserCollection
     * @param SpaceUserCollection $removedSpaceUserCollection
     * @param SpaceUserCollection $spaceOperatorCollection
     */
    public function _modifySpaceAcl(
        Space $space,
        Space $oldSpace,
        SpaceUserCollection $spaceUserCollection,
        SpaceUserCollection $oldSpaceUserCollection,
        SpaceUserCollection $removedSpaceUserCollection,
        SpaceUserCollection $spaceOperatorCollection
    ) {
        //##### アクセス権の変更 ##### start
        /** @var SpaceUserCollection $newSpaceUserCollection */
        $newSpaceUserCollection
            = $spaceUserCollection->getNotIn($oldSpaceUserCollection);
        $spaceAclLogic = SpaceAccessControlListLogic::getInstance();
        $aclLogic = AccessControlListLogic::getInstance();

        //閲覧---s
        $readSummaryAcl
            = $spaceAclLogic->getSpaceAcl(Authority::AUTHORITY_CODE_READ_SUMMARY,
            $space->getId());
        $readDetailAcl
            = $spaceAclLogic->getSpaceAcl(Authority::AUTHORITY_CODE_READ_DETAIL,
            $space->getId());

        if ($space->isPublic() <> $oldSpace->isPublic()) {
            //公開、非公開を変えた場合は閲覧のアクセス権を全削除して再登録
            $aclLogic->deleteAclRelations($readSummaryAcl->getId());
            $aclLogic->deleteAclRelations($readDetailAcl->getId());

            if ($space->isPublic()) {
                $readSummaryAcl->setGrant(SpaceAccessControlList::REVOKE);
                $readDetailAcl->setGrant(SpaceAccessControlList::REVOKE);
            } else {
                $readSummaryAcl->setGrant(SpaceAccessControlList::GRANT);
                $readDetailAcl->setGrant(SpaceAccessControlList::GRANT);
                $aclLogic->createAclUsers($readSummaryAcl->getId(),
                    $spaceUserCollection);
                $aclLogic->createAclUsers($readDetailAcl->getId(),
                    $spaceUserCollection);
                $aclLogic->createAclRoleByRoleId($readDetailAcl->getId(),
                    SpaceRole::ROLE_ID_ADMINISTRATOR);
            }
            $spaceAclLogic->modifySpaceAcl($readSummaryAcl);
            $spaceAclLogic->modifySpaceAcl($readDetailAcl);
        } else {
            if ($space->isPublic() === false) {
                if (count($newSpaceUserCollection) > 0) {
                    $aclLogic->createAclUsers($readSummaryAcl->getId(),
                        $newSpaceUserCollection);
                    $aclLogic->createAclUsers($readDetailAcl->getId(),
                        $newSpaceUserCollection);
                }

                if (count($removedSpaceUserCollection) > 0) {
                    $aclLogic->deleteAclUsers($readSummaryAcl->getId(),
                        $removedSpaceUserCollection);
                    $aclLogic->deleteAclUsers($readDetailAcl->getId(),
                        $removedSpaceUserCollection);
                }
            }
        }
        //閲覧---e

        //書込、運用管理---s
        $oldOperatorCollection
            = $this->getSpaceUserCollectionAccordingToAuthorityCode($oldSpaceUserCollection,
            Authority::AUTHORITY_CODE_OPERATION_PRIVILEGE, $space->getId());
        /** @var SpaceUserCollection $removedOperatorCollection */
        $removedOperatorCollection
            = $oldOperatorCollection->getNotIn($spaceOperatorCollection);
        /** @var SpaceUserCollection $newOperatorCollection */
        $newOperatorCollection
            = $spaceOperatorCollection->getNotIn($oldOperatorCollection);
        $writeSpaceAcl
            = $spaceAclLogic->getSpaceAcl(Authority::AUTHORITY_CODE_WRITE,
            $space->getId());
        $spaceOperationPriAcl
            = $spaceAclLogic->getSpaceAcl(Authority::AUTHORITY_CODE_OPERATION_PRIVILEGE,
            $space->getId());

        //remove old SpaceUser
        if (count($removedSpaceUserCollection) > 0) {
            $aclLogic->deleteAclUsers($writeSpaceAcl->getId(),
                $removedSpaceUserCollection);
        }
        if (count($removedOperatorCollection) > 0) {
            $aclLogic->deleteAclUsers($spaceOperationPriAcl->getId(),
                $removedOperatorCollection);
        }

        //insert SpaceUser
        if (count($newSpaceUserCollection) > 0) {
            $aclLogic->createAclUsers($writeSpaceAcl->getId(),
                $newSpaceUserCollection);
        }
        if (count($newOperatorCollection) > 0) {
            $aclLogic->createAclUsers($spaceOperationPriAcl->getId(),
                $newOperatorCollection);
        }
        //書込、運用管理---e
        //##### アクセス権の変更 ##### end
    }

    /**
     * Get collection of the space users according to specified authority code.It is a subset of the given collection.
     *
     * @param SpaceUserCollection $spaceMembers
     * @param string              $authorityCode
     * @param string              $spaceId
     *
     * @return SpaceUserCollection
     */
    public function getSpaceUserCollectionAccordingToAuthorityCode(
        SpaceUserCollection $spaceMembers,
        $authorityCode,
        $spaceId
    ) {
        ValidateUtility::isIn($authorityCode
            , [
                Authority::AUTHORITY_CODE_READ_SUMMARY
                ,
                Authority::AUTHORITY_CODE_READ_DETAIL
                ,
                Authority::AUTHORITY_CODE_WRITE
                ,
                Authority::AUTHORITY_CODE_SYSTEM_PRIVILEGE
                ,
                Authority::AUTHORITY_CODE_OPERATION_PRIVILEGE
            ]
            , ValidateUtility::DISABLE_EMPTY);
        ValidateUtility::isNumber($spaceId);

        $result = new SpaceUserCollection();
        if ($spaceMembers->count() == 0) {
            return $result;
        }

        $aclLogic = AccessControlListLogic::getInstance();

        $space_members_array = $spaceMembers->toArrayWithMemberUniqueId();

        // Not Change Order
        // Display is this order
        $group_ids
            = $aclLogic->getGroupIdArrayAccordingToAuthorityCode($authorityCode,
            $spaceId);
        foreach ($group_ids as $group_id) {
            $group_id = SpaceMemberUtility::createMemberUniqueId($group_id,
                MemberLogic::TYPE_ORGANIZATION);
            if (isset($space_members_array[$group_id])) {
                $space_operator = $space_members_array[$group_id];
                $result->appendBean($space_operator);
            }
        }

        $role_ids
            = $aclLogic->getRoleIdArrayAccordingToAuthorityCode($authorityCode,
            $spaceId);
        foreach ($role_ids as $role_id) {
            $role_id = SpaceMemberUtility::createMemberUniqueId($role_id,
                MemberLogic::TYPE_STATIC_ROLE);
            if (isset($space_members_array[$role_id])) {
                $space_operator = $space_members_array[$role_id];
                $result->appendBean($space_operator);
            }
        }

        $user_ids
            = $aclLogic->getUserIdArrayAccordingToAuthorityCode($authorityCode,
            $spaceId);
        foreach ($user_ids as $user_id) {
            $user_id = SpaceMemberUtility::createMemberUniqueId($user_id,
                MemberLogic::TYPE_USER);
            if (isset($space_members_array[$user_id])) {
                $space_operator = $space_members_array[$user_id];
                $result->appendBean($space_operator);
            }
        }

        $result->setCountNoLimit($result->count());

        return $result;
    }

    /**
     * @param Folder $folder
     *
     * @return int
     */
    public function addFolder(Folder $folder)
    {
        $folderLogic = new FolderLogic();

        return $folderLogic->createFolder($folder);
    }

    /**
     * @param Folder $folder
     */
    public function modifyFolder(Folder $folder)
    {
        $folderLogic = new FolderLogic();
        $folderLogic->modify($folder);
    }

    /**
     * @param $folderIdList
     */
    public function deleteFolderList($folderIdList)
    {
        $folderLogic = new FolderLogic();
        $folderLogic->deleteFolderList($folderIdList);
    }

    /**
     * @param $folderId
     *
     * @return Folder
     */
    public function getFolder($folderId)
    {
        $folderLogic = new FolderLogic();
        $folder = $folderLogic->getFolder($folderId);

        return $folder;
    }

    /**
     * @param FolderSearchCondition $folderCondition
     *
     * @return FolderCollection
     */
    public function getFolderListByCondition(
        FolderSearchCondition $folderCondition
    ) {
        $folderLogic = new FolderLogic();

        return $folderLogic->getListByCondition($folderCondition);
    }

    /**
     * @param array $folderId_list - The folder Id list
     *
     * @return array
     */
    public function getThreadListByFolderIdList($folderId_list)
    {
        $threadLogic = ThreadLogic::getInstance();

        return $threadLogic->getThreadListByFolderIdList($folderId_list);
    }

    /**
     * @param $spaceId
     * @param $folderId
     * @param $operationUserId
     * @param $operationUserLanguageCode
     *
     * @return Folder
     * @throws GrnDataNotFoundException
     */
    public function verifySpaceFolder(
        $spaceId,
        $folderId,
        $operationUserId,
        $operationUserLanguageCode
    ) {
        $space = $this->getSpace($spaceId, $operationUserId,
            $operationUserLanguageCode);
        if ( ! is_null($folderId)) {
            $folder = $this->getFolder($folderId);
            if ($folder->getSpaceId() != $spaceId) {
                throw new GrnDataNotFoundException(ErrorCode::GRN_FOLDER_INVALID_ID);
            }

            return $folder;
        }

        $unCategoryFolder = new Folder();
        $unCategoryFolder->setId(null);
        $unCategoryFolder->setFolderName('');

        return $unCategoryFolder;
    }

    /**
     * @param Space               $space
     * @param SpaceUser           $removed_user
     * @param bool                $is_space_operator
     * @param SpaceUserCollection $space_user_collection
     */
    public function removeSpaceUser(
        Space $space,
        SpaceUser $removed_user,
        $is_space_operator,
        SpaceUserCollection $space_user_collection
    ) {
        $space_logic = SpaceLogic::getInstance();
        $category_logic = CategoryLogic::getInstance();

        $space_user_collection_removed = new SpaceUserCollection();
        $space_user_collection_removed->appendBean($removed_user);

        $space_acl_logic = SpaceAccessControlListLogic::getInstance();;
        $space_user_removed_ids
            = $space_acl_logic->getRemovedSpaceUserIds($space_user_collection,
            $space_user_collection_removed);

        $space_logic->deleteSpaceUser($space_user_collection_removed);

        $discussion_root_category
            = $category_logic->getCategoryBySpaceIdApplicationCode(
            $space->getId(),
            Application::APPLICATION_CODE_DISCUSSION,
            LanguageStatus::STANDARD_LANGUAGE_CODE
        );
        $discussion_search_condition = new ThreadSearchCondition();
        $discussion_search_condition->setSearchCategoryId($discussion_root_category->getId());
        $discussion_logic = ThreadLogic::getInstance();
        $discussion_collection
            = $discussion_logic->searchThread($discussion_search_condition);

        $todo_logic = TodoLogic::getInstance();
        if (count($space_user_removed_ids) > 0) {
            // remove DiscussionNonNotificationUser
            $discussion_logic->deleteAllDiscussionNonNotification($discussion_collection,
                $space_user_removed_ids);

            //remove TodoUser
            $todo_logic->deleteTodoUsersBySpaceIdSpaceMemberCollection($space->getId(),
                $space_user_removed_ids);
        }

        //update is_complete of to_do
        $todo_root_category
            = $category_logic->getCategoryBySpaceIdApplicationCode(
            $space->getId(),
            Application::APPLICATION_CODE_TODO,
            LanguageStatus::STANDARD_LANGUAGE_CODE
        );
        $todo_logic->modifyCompleteTodosByCategoryId($todo_root_category->getId());

        $acl_logic = AccessControlListLogic::getInstance();
        $space_write_acl
            = $space_acl_logic->getSpaceAcl(Authority::AUTHORITY_CODE_WRITE,
            $space->getId());
        $space_operation_pri_acl
            = $space_acl_logic->getSpaceAcl(Authority::AUTHORITY_CODE_OPERATION_PRIVILEGE,
            $space->getId());

        $summary_read_acl
            = $space_acl_logic->getSpaceAcl(Authority::AUTHORITY_CODE_READ_SUMMARY,
            $space->getId());
        $detail_read_acl
            = $space_acl_logic->getSpaceAcl(Authority::AUTHORITY_CODE_READ_DETAIL,
            $space->getId());

        if ($space->isPublic() === false) {
            $acl_logic->deleteAclUsers($summary_read_acl->getId(),
                $space_user_collection_removed);
            $acl_logic->deleteAclUsers($detail_read_acl->getId(),
                $space_user_collection_removed);
        }

        $acl_logic->deleteAclUsers($space_write_acl->getId(),
            $space_user_collection_removed);

        if ($is_space_operator) {
            $acl_logic->deleteAclUsers($space_operation_pri_acl->getId(),
                $space_user_collection_removed);
        }
    }

    /**
     * @param Space     $space
     * @param SpaceUser $new_user
     * @param int       $operation_user_id
     */
    public function addSpaceUser(
        Space $space,
        SpaceUser $new_user,
        $operation_user_id
    ) {
        $space_logic = SpaceLogic::getInstance();

        $space_user_collection = $this->getSpaceUserCollection($space->getId(),
            $operation_user_id);
        $space_user_collection->appendBean($new_user);

        $new_user_collection = new SpaceUserCollection();
        $new_user_collection->appendBean($new_user);

        //Rewrite $space_user_collection in order to set the consequent display order ID.
        $space_user_collection_count = count($space_user_collection);
        for ($i = 0; $i < $space_user_collection_count; $i++) {
            /** @var \grn\space\data\bean\SpaceUser $each_space_user */
            $each_space_user = $space_user_collection->getBean($i);
            $each_space_user->setDisplayOrder($i + 1);
        }

        //insert/update SpaceUser
        $space_logic->modifySpaceUser($space_user_collection);

        $category_logic = CategoryLogic::getInstance();
        $discussion_root_category
            = $category_logic->getCategoryBySpaceIdApplicationCode(
            $space->getId(),
            Application::APPLICATION_CODE_DISCUSSION,
            LanguageStatus::STANDARD_LANGUAGE_CODE
        );
        $discussion_search_condition = new ThreadSearchCondition();
        $discussion_search_condition->setSearchCategoryId($discussion_root_category->getId());
        $discussion_logic = ThreadLogic::getInstance();
        $discussion_collection
            = $discussion_logic->searchThread($discussion_search_condition);

        //remove DiscussionNotificationUser
        $discussion_logic->deleteMultiDiscussionNotification($discussion_collection,
            $new_user_collection);

        $space_acl_logic = SpaceAccessControlListLogic::getInstance();
        $acl_logic = AccessControlListLogic::getInstance();

        $summary_read_acl
            = $space_acl_logic->getSpaceAcl(Authority::AUTHORITY_CODE_READ_SUMMARY,
            $space->getId());
        $detail_read_acl
            = $space_acl_logic->getSpaceAcl(Authority::AUTHORITY_CODE_READ_DETAIL,
            $space->getId());

        if ($space->isPublic() === false) {
            $acl_logic->createAclUsers($summary_read_acl->getId(),
                $new_user_collection);
            $acl_logic->createAclUsers($detail_read_acl->getId(),
                $new_user_collection);
        }

        $space_write_acl
            = $space_acl_logic->getSpaceAcl(Authority::AUTHORITY_CODE_WRITE,
            $space->getId());
        $acl_logic->createAclUsers($space_write_acl->getId(),
            $new_user_collection);
    }

    /**
     * @param SpaceMemberCollection $spaceMembersCollection
     *
     * @return array
     */
    public function getUserProfileUrlArray(
        SpaceMemberCollection $spaceMembersCollection
    ) {
        $result = [];
        /** @var $spaceMember SpaceMember */
        foreach ($spaceMembersCollection->getIterator() as $spaceMember) {
            if ( ! $spaceMember->isTypeEqualsUser()) {
                continue;
            }

            $id = $spaceMember->getMemberID();
            $result[$id] = \GRN_ControllerUtil::createUserProfileUrl($id,
                $spaceMember->getForeignKey());
        }

        return $result;
    }

    /**
     * @param string $gid Group Id
     *
     * @return array
     */
    public function getUserIdsByGroupId($gid)
    {
        $user_ids = MemberLogic::getInstance()
                               ->getUserIdsByGroupId($gid, [], null);

        return $user_ids;
    }

    /**
     * @param string $rid Role Id
     *
     * @return array
     */
    public function getUserIdsByRoleId($rid)
    {
        $user_ids = MemberLogic::getInstance()
                               ->getUserIdsByRoleId($rid, [], null);

        return $user_ids;
    }

    /**
     * 連携可能なスペース情報を返す
     *
     * @return array $relation_space_ids
     */
    public function getAvailabilityRelationSpaceIDS()
    {
        static $relation_space_ids = null;

        if ( ! is_array($relation_space_ids)) {
            $login = \cb_get_login_user();
            $login_id = $login->getOID();

            $spaceSearchCondition = new SpaceSearchCondition();
            $spaceSearchCondition->setSearchParticipantUserId($login_id);
            $spaceSearchCondition->setSearchParticipantGroupIds(SpaceMemberUtility::getLoginUserGroupIds());
            $spaceSearchCondition->setSearchParticipantRoleIds(SpaceMemberUtility::getLoginUserRoleIds());
            $spaceSearchCondition->setSearchSpaceExpirationDate(SpaceSearchCondition::SEARCH_SPACE_NOT_EXPIRED);

            $spaceCollection
                = self::searchSpaceBySearchConditionWithAccessControl(
                Authority::AUTHORITY_CODE_READ_SUMMARY, $spaceSearchCondition,
                $login_id, SpaceService::CATEGORY_NAME_IS_NECESSARY);

            $relation_space_ids = [];
            foreach ($spaceCollection as $space) {
                $space_id = $space->getID();
                $relation_space_ids[$space_id] = $space_id;
            }
        }

        return $relation_space_ids;
    }

}
