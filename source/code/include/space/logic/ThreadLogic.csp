<?php

namespace grn\space\logic;

use grn\notification\bean\CategorizedNotificationUsers;
use grn\space\common\data\bean\Category;
use grn\space\common\exception\GrnDatabaseException;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\common\logic\CommentLogic;
use grn\space\common\data\bean\CommentSequenceNo;
use grn\space\common\exception\GrnInvalidArgumentException;
use grn\space\common\utility\SpaceMemberUtility;
use grn\space\data\bean\Space;
use grn\space\data\bean\SpaceUser;
use grn\space\data\bean\Thread;
use grn\space\data\collection\SpaceUserCollection;
use grn\space\data\collection\SynthesisThreadCommentCollection;
use grn\space\data\collection\ThreadCollection;
use grn\space\data\collection\TodoCollection;
use grn\space\data\condition\SynthesisThreadCommentSearchCondition;
use grn\space\data\condition\ThreadSearchCondition;
use grn\space\db\ThreadFacade;

/**
 * Business Logic Layer
 * This layer achieves the demand from the application service layer by using the DB layer.
 *
 * Thread logic class
 * All demands for the THREAD are undertaken from the application service layer.
 **/
class ThreadLogic
{
    private static $_instance = null;

    /**
     * コンストラクタ
     */
    public function __construct()
    {
    }

    /**
     * Get Instance(Singleton pattern)
     *
     * @return ThreadLogic $_instance
     */
    public static function getInstance()
    {
        if (is_null(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    //*****************************************************************************************
    //***********************************        thread       *********************************
    //*****************************************************************************************
    /**
     * Create thread
     *
     * @param \grn\space\data\bean\Thread $thread Thread
     *
     * @throws GrnDatabaseException    Any error in the database.
     * @return \grn\space\data\bean\Thread
     */
    public function createThread(Thread $thread)
    {
        //create comment sequence no
        //Set comment sequence no object id
        $commentLogic = CommentLogic::getInstance();
        $commentSequenceNo
            = $commentLogic->createCommentSequenceNo(new CommentSequenceNo());
        $thread->setCommentSequenceNoId($commentSequenceNo->getId());


        //Set current time
        $thread->setCreateTimestamp(time());
        if ( ! is_null($thread->getModifierId())) {
            $thread->setModifyTimestamp($thread->getCreateTimestamp());
        }
        $thread->setComponentModifyTimestamp($thread->getCreateTimestamp());

        // Set new thread id
        $threadDBFacade = new ThreadFacade();
        $thread->setId($threadDBFacade->getThreadNextSequenceId());

        //call database facade
        $resultThread = $threadDBFacade->insertThread($thread);

        return $resultThread;
    }

    /**
     * Modify thread
     *
     * @param \grn\space\data\bean\Thread $thread Thread
     *
     * @throws GrnDatabaseException     Any error in the database.
     * @return \grn\space\data\bean\Thread
     */
    public function modifyThread(Thread $thread)
    {
        //Set current time
        $thread->setModifyTimestamp(time());
        $thread->setComponentModifyTimestamp($thread->getModifyTimestamp());

        //call database facade
        $threadDBFacade = new ThreadFacade();
        $resultThread = $threadDBFacade->updateThread($thread);

        return $resultThread;
    }


    /**
     * Update Thread component modify timestamp
     *
     * @param \grn\space\data\bean\Thread $thread Thread
     *
     * @throws GrnDatabaseException     Any error in the database.
     * @return \grn\space\data\bean\Thread
     */
    public function modifyThreadComponentModifyTimestamp(Thread $thread)
    {
        $thread->setComponentModifyTimestamp(time());

        $threadFacade = new ThreadFacade();
        $threadFacade->updateThreadComponentModifyTimestamp($thread);

        return $thread;
    }


    /**
     *
     * Delete thread
     *
     * @param \grn\space\data\bean\Thread $thread Thread
     *
     * @throws GrnDataNotFoundException     There is no thread or commentSequenceNo.
     * @throws GrnDatabaseException         Any error in the database.
     * @return \grn\space\data\bean\Thread
     */
    public function deleteThread(Thread $thread)
    {
        $threadDBFacade = new ThreadFacade();
        $resultThread = $threadDBFacade->deleteThread($thread);

        //delete comment sequence no
        $commentLogic = CommentLogic::getInstance();
        $commentSequenceNo
            = $commentLogic->getCommentSequenceNo($resultThread->getCommentSequenceNoId());
        $commentLogic->deleteCommentSequenceNo($commentSequenceNo);

        return $resultThread;
    }

    /**
     * Get the thread
     *
     * @param string  $threadId          thread sequence id
     * @param boolean $need_html_content TRUE: need html contnet, FALSE: don't need html content. This parameter is valid only when thread is a RichText.
     *
     * @throws GrnDataNotFoundException     When the specified thread is not found.
     * @throws GrnDatabaseException         Any error in the database.
     * @return \grn\space\data\bean\Thread
     */
    public function getThread($threadId, $need_html_content = true)
    {
        $threadDBFacade = new ThreadFacade();
        $thread = $threadDBFacade->selectThread($threadId,
            $need_html_content);

        return $thread;
    }

    /**
     * Get the thread
     *
     * @param string $todoId todo sequence id
     *
     * @throws GrnDataNotFoundException     When the specified thread is not found.
     * @throws GrnDatabaseException         Any error in the database.
     * @return \grn\space\data\bean\Thread
     */
    public function getThreadByTodoId($todoId)
    {
        $threadDBFacade = new ThreadFacade();
        $thread = $threadDBFacade->selectThreadByTodoId($todoId);

        return $thread;
    }

    /**
     * Get the thread
     *
     * @param string $commentId Comment sequence id
     *
     * @throws GrnDataNotFoundException     When the specified thread is not found.
     * @throws GrnDatabaseException         Any error in the database.
     * @return \grn\space\data\bean\Thread
     */
    public function getThreadByCommentId($commentId)
    {
        $threadDBFacade = new ThreadFacade();
        $thread = $threadDBFacade->selectThreadByCommentId($commentId);

        return $thread;
    }

    /**
     * Get the thread
     *
     * @param string $spaceId  space sequence id
     * @param string $threadId thread sequence id
     *
     * @throws GrnDataNotFoundException     When the specified thread is not found.
     * @throws GrnDatabaseException         Any error in the database.
     * @return \grn\space\data\bean\Thread
     */
    public function getThreadBySpaceIdThreadId($spaceId, $threadId)
    {
        $threadDBFacade = new ThreadFacade();
        $thread
            = $threadDBFacade->selectThreadBySpaceIdThreadId($spaceId,
            $threadId);

        return $thread;
    }

    /**
     * Search thread
     *
     * @param \grn\space\data\collection\TodoCollection $todoCollection TodoCollection
     *
     * @throws GrnDatabaseException         Any error in the database.
     * @return \grn\space\data\collection\ThreadCollection
     */
    public function getThreadCollectionByTodoCollection(
        TodoCollection $todoCollection
    ) {
        $threadDBFacade = new ThreadFacade();

        return $threadDBFacade->selectThreadListByTodoCollection($todoCollection);
    }

    /**
     * Search thread
     *
     * @param \grn\space\data\condition\ThreadSearchCondition $threadSearchCondition ThreadSearchCondition
     *
     * @throws GrnDatabaseException            Any error in the database.
     * @return \grn\space\data\collection\ThreadCollection
     */
    public function searchThread(ThreadSearchCondition $threadSearchCondition)
    {
        $threadDBFacade = new ThreadFacade();

        return $threadDBFacade->selectThreadList($threadSearchCondition);
    }


    //*************************************************************************************************
    //***********************************        thread comment       *********************************
    //*************************************************************************************************
    /**
     * Create thread-comment-relation
     *
     * @param string $threadId  thread sequence id
     * @param string $commentId comment sequence id
     *
     * @throws GrnDatabaseException     Any error in the database.
     */
    public function createThreadCommentReletion($threadId, $commentId)
    {
        $threadDBFacade = new ThreadFacade();
        $threadDBFacade->insertThreadCommentReletion($threadId, $commentId);
    }

    //**********************************************************************************************
    //***********************************        thread file       *********************************
    //**********************************************************************************************
    /**
     * Create thread-file-relation
     *
     * @param string $threadId thread sequence id
     * @param string $fileId   file sequence id
     *
     * @throws GrnDatabaseException     Any error in the database.
     */
    public function createThreadFileReletion($threadId, $fileId)
    {
        $threadDBFacade = new ThreadFacade();
        $threadDBFacade->insertThreadFileReletion($threadId, $fileId);
    }


    //************************************************************************************************************
    //***********************************        thread and thread comment       *********************************
    //************************************************************************************************************
    /**
     * Searches for the thread, and thread comment.
     *
     * @param \grn\space\data\condition\SynthesisThreadCommentSearchCondition $searchCondition SynthesisThreadCommentSearchCondition
     *
     * @throws GrnDatabaseException         Any error in the database.
     * @return SynthesisThreadCommentCollection
     */
    public function searchSynthesisThreadComment(
        SynthesisThreadCommentSearchCondition $searchCondition
    ) {
        $threadDBFacade = new ThreadFacade();

        return $threadDBFacade->selectSynthesisThreadCommentList($searchCondition);
    }


    //*****************************************************************************************************
    //***********************************        thread read status       *********************************
    //*****************************************************************************************************
    /**
     * Create threadReadStatus
     *
     * @param string $threadId thread sequence id
     * @param string $userId   user sequence id
     *
     * @throws GrnDatabaseException     Any error in the database.
     */
    public function createThreadReadStatus($threadId, $userId)
    {
        $threadDBFacade = new ThreadFacade();
        $threadDBFacade->insertOnDuplicateUpdateThreadReadStatus($threadId,
            $userId);
    }

    /**
     * Create or Modify threadReadStatus
     *
     * @param string $threadId thread sequence id
     * @param string $userId   user sequence id
     *
     * @throws GrnDatabaseException     Any error in the database.
     */
    public function createOrModifyThreadReadStatus($threadId, $userId)
    {
        $threadDBFacade = new ThreadFacade();
        $threadDBFacade->insertOnDuplicateUpdateThreadReadStatus($threadId,
            $userId);
    }

    /**
     * Delete threadReadStatus
     *
     * @param string $threadId thread sequence id
     *
     * @throws GrnDatabaseException     Any error in the database.
     */
    public function deleteThreadReadStatusByThreadId($threadId)
    {
        $threadDBFacade = new ThreadFacade();
        $threadDBFacade->deleteThreadReadStatusByThreadId($threadId);
    }

    /**
     * Get threadReadStatusCollection
     *
     * @param \grn\space\data\collection\ThreadCollection $threadCollection ThreadCollection
     * @param string                                      $userId           user sequence id
     *
     * @throws \grn\space\common\exception\GrnInvalidArgumentException
     * @return \grn\space\data\collection\ThreadReadStatusCollection
     */
    public function getThreadReadStatusCollection(
        ThreadCollection $threadCollection,
        $userId
    ) {
        if (count($threadCollection) == 0) {
            throw new GrnInvalidArgumentException();
        }

        $threadDBFacade = new ThreadFacade();

        return $threadDBFacade->selectThreadReadStatusCollection($threadCollection,
            $userId);
    }

    /**
     * Get threadUnreadStatusCollection
     *
     * @param \grn\space\data\collection\ThreadCollection $threadCollection ThreadCollection
     * @param string                                      $userId           user sequence id
     *
     * @throws \grn\space\common\exception\GrnInvalidArgumentException
     * @return \grn\space\data\collection\ThreadUnreadStatusCollection
     */
    public function getThreadUnreadStatusCollectionUnderThreThreads(
        ThreadCollection $threadCollection,
        $userId
    ) {
        if (count($threadCollection) == 0) {
            throw new GrnInvalidArgumentException();
        }

        $threadDBFacade = new ThreadFacade();

        return $threadDBFacade->selectThreadUnreadStatusCollectionUnderThreThreads($threadCollection,
            $userId);
    }

    /**
     * @param int $startId
     * @param int $endId
     * @param int $maxLength
     *
     * @return array
     */
    public function getAllThreadForFtsFullIndexer($startId, $endId, $maxLength)
    {
        $threadFacade = new ThreadFacade();

        return $threadFacade->getAllThreadForFtsFullIndexer($startId, $endId,
            $maxLength);
    }

    /**
     * @param int $startId
     * @param int $endId
     * @param int $maxLength
     *
     * @return array
     */
    public function getAllThreadCommentForFtsFullIndexer(
        $startId,
        $endId,
        $maxLength
    ) {
        $threadFacade = new ThreadFacade();

        return $threadFacade->getAllThreadCommentForFtsFullIndexer($startId,
            $endId, $maxLength);
    }

    /**
     * @param Space|NULL              $space
     * @param array                   $space_user_ids
     * @param                         $discussion_id
     * @param array                   $to_me_user_ids
     *
     * @return CategorizedNotificationUsers
     */
    public function getDiscussionCategorizedNotificationUsers(
        Space $space = null,
        array $space_user_ids,
        $discussion_id,
        array $to_me_user_ids
    ): CategorizedNotificationUsers {
        $ntf_to_all_user_ids = [];
        $non_notification_user_ids
            = $this->getNonNotificationList($discussion_id);

        foreach ($space_user_ids as $user_id) {
            if ( ! isset($non_notification_user_ids[$user_id])) {
                $ntf_to_all_user_ids[$user_id] = $user_id;
            }
        }

        $non_space_user_ids
            = $this->getDiscussionNotificationUserId($discussion_id);
        foreach ($non_space_user_ids as $user_id) {
            $ntf_to_all_user_ids[$user_id] = $user_id;
        }

        $ntf_to_me_user_ids = [];
        foreach ($to_me_user_ids as $user_id) {
            if ($space && ! $space->isPublic()
                && ! isset($ntf_to_all_user_ids[$user_id])
            ) {
                continue;
            }

            $ntf_to_me_user_ids[$user_id] = $user_id;
        }

        $ntf_to_all_user_ids = array_merge($ntf_to_all_user_ids,
            $ntf_to_me_user_ids);

        $categorized_ntf_users = new CategorizedNotificationUsers();
        $categorized_ntf_users->setAll($ntf_to_all_user_ids);
        $categorized_ntf_users->setToMe($ntf_to_me_user_ids);

        return $categorized_ntf_users;
    }

    /**
     * get all notification user collection
     *
     * @param  array $spaceUserIds
     * @param  int   $discussionId
     * @param  int   $operationUserId
     *
     * @return array
     */
    public function getDiscussionNotificationUserCollection(
        array $spaceUserIds,
        $discussionId,
        $operationUserId
    ) {
        $notification_user_ids
            = $this->getDiscussionCategorizedNotificationUsers(
            null, $spaceUserIds, $discussionId, [])
                   ->getAll();

        return $notification_user_ids;
    }

    /**
     * @param SpaceUserCollection $space_user_collection
     * @param string              $discussion_id
     *
     * @return array
     */
    public function getNotificationMemberCollection(
        $space_user_collection,
        $discussion_id
    ) {
        $notification_user_ids = [];
        $non_notification_user_ids
            = $this->getNonNotificationList($discussion_id);

        /** @var SpaceUser $space_user */
        foreach ($space_user_collection as $space_user) {
            $member_id
                = SpaceMemberUtility::createMemberUniqueId($space_user->getMemberID(),
                $space_user->getMemberType());

            $is_notification_member
                = ! isset($non_notification_user_ids[$member_id]);
            if ($is_notification_member) {
                $notification_user_ids[$member_id] = $member_id;
            }
        }

        return $notification_user_ids;
    }

    /**
     * @param string $discussion_id
     *
     * @return array
     */
    public function getNonNotificationList($discussion_id)
    {

        $result = [];

        $threadDBFacade = new ThreadFacade();
        $discussion_non_notification_list
            = $threadDBFacade->selectDiscussionNonNotificationCollectionByDiscussionId($discussion_id);
        foreach (
            $discussion_non_notification_list as $discussion_non_notification
        ) {
            $user_id = $discussion_non_notification->getUserId();
            $result[$user_id] = $user_id;
        }

        return $result;
    }

    /**
     * @param  int $discussionId
     * @param  int $userId
     *
     * @return \grn\space\data\bean\DiscussionNonNotification
     */
    public function selectDiscussionNonNotification($discussionId, $userId)
    {
        $threadDBFacade = new ThreadFacade();

        return $threadDBFacade->selectDiscussionNonNotification($discussionId,
            $userId);
    }

    /**
     * @param  int $discussionId
     * @param  int $userId
     */
    public function insertOnDuplicateUpdateDiscussionNonNotification(
        $discussionId,
        $userId
    ) {
        $threadDBFacade = new ThreadFacade();
        $threadDBFacade->insertOnDuplicateUpdateDiscussionNonNotification($discussionId,
            $userId);
    }

    /**
     * @param int $discussionId
     * @param int $userId
     */
    public function deleteDiscussionNonNotification($discussionId, $userId)
    {
        $threadDBFacade = new ThreadFacade();
        $threadDBFacade->deleteDiscussionNonNotification($discussionId,
            $userId);
    }

    /**
     * Delete all record in discussion_non_notification_user when remove user from space member.
     *
     * @param \grn\space\data\collection\ThreadCollection $discussionCollection
     * @param array                                       $removedSpaceUserIds
     */
    public function deleteAllDiscussionNonNotification(
        ThreadCollection $discussionCollection,
        array $removedSpaceUserIds
    ) {
        $threadDBFacade = new ThreadFacade();
        $threadDBFacade->deleteAllDiscussionNonNotification($discussionCollection,
            $removedSpaceUserIds);
    }

    /**
     * @param array $discussionIds
     *
     * @return array
     */
    public function getDiscussionCommentIdByDiscussionId(array $discussionIds)
    {
        $facade = new ThreadFacade();

        return $facade->getDiscussionCommentIdByDiscussionId($discussionIds);
    }

    /**
     * @param int $spaceId
     *
     * @return array
     */
    public function getAllDiscussionIdBySpaceId($spaceId)
    {
        $facade = new ThreadFacade();

        return $facade->getAllDiscussionIdBySpaceId($spaceId);
    }

    /**
     * @param $discussionId
     * @param $userId
     *
     * @return \grn\space\data\bean\DiscussionNotification
     */
    public function selectDiscussionNotification($discussionId, $userId)
    {
        $facade = new ThreadFacade();

        return $facade->selectDiscussionNotification($discussionId, $userId);
    }

    /**
     * @param $discussionId
     * @param $userId
     */
    public function insertOnDuplicateUpdateDiscussionNotification(
        $discussionId,
        $userId
    ) {
        $facade = new ThreadFacade();
        $facade->insertOnDuplicateUpdateDiscussionNotification($discussionId,
            $userId);
    }

    /**
     * @param $discussionId
     * @param $userId
     */
    public function deleteDiscussionNotification($discussionId, $userId)
    {
        $facade = new ThreadFacade();
        $facade->deleteDiscussionNotification($discussionId, $userId);
    }

    /**
     * @param $discussionId
     *
     * @return array
     */
    public function getDiscussionNotificationUserId($discussionId)
    {
        $facade = new ThreadFacade();

        return $facade->getDiscussionNotificationUserId($discussionId);
    }

    /**
     * @param $discussionCollection
     * @param $spaceUserCollection
     */
    public function deleteMultiDiscussionNotification(
        $discussionCollection,
        $spaceUserCollection
    ) {
        $facade = new ThreadFacade();
        $facade->deleteMultiDiscussionNotification($discussionCollection,
            $spaceUserCollection);
    }

    /**
     * @param array $discussionId
     */
    public function deleteDiscussionNotificationByDiscussionId(
        array $discussionId
    ) {
        $facade = new ThreadFacade();
        $facade->deleteDiscussionNotificationByDiscussionId($discussionId);
    }

    /**
     * @param $folderId_list
     *
     * @return array
     */
    public function getThreadListByFolderIdList($folderId_list)
    {
        $threadFacade = new ThreadFacade();

        return $threadFacade->getThreadListByFolderIdList($folderId_list);

    }

    /**
     * @param $threadCollection
     * @param $target_category_id
     * @param $target_folder_id
     *
     * @return bool|\mysqli_result
     */
    public function moveThreadList(
        $threadCollection,
        $target_category_id,
        $target_folder_id
    ) {
        $threadFacade = new ThreadFacade();

        return $threadFacade->moveThreadList($threadCollection,
            $target_category_id, $target_folder_id);

    }

    /**
     * @param Category $rootCategory
     * @param          $folder_id
     * @param array    $thread_id_list
     *
     * @return ThreadCollection
     */
    public function selectThreadListByFolderIdThreadIdList(
        Category $rootCategory,
        $folder_id,
        array $thread_id_list
    ) {
        $threadFacade = new ThreadFacade();

        return $threadFacade->selectThreadListByFolderIdThreadIdList($rootCategory,
            $folder_id, $thread_id_list);
    }

    /**
     * @param ThreadSearchCondition $threadSearchCondition
     *
     * @return ThreadCollection
     */
    public function selectThreadListByCondition(
        ThreadSearchCondition $threadSearchCondition
    ) {
        $threadFacade = new ThreadFacade();

        return $threadFacade->selectThreadListByCondition($threadSearchCondition);
    }
}
