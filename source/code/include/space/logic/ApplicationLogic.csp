<?php

namespace grn\space\logic;

use grn\space\db\SpaceFacade;

use grn\space\common\data\collection\ApplicationLocalCollection;

use grn\space\common\logic\CategoryLogic;

use grn\space\common\data\collection\CategoryLocalCollection;

use grn\space\common\data\bean\Category;

use grn\space\common\exception\GrnKintoneException;
use grn\space\common\data\bean\Application;
use grn\space\common\data\condition\ApplicationSearchCondition;
use grn\space\db\ApplicationFacade;
use grn\space\common\data\bean\LanguageStatus;

/**
 * Class ApplicationLogic
 */
class ApplicationLogic
{
    private static $_instance = null;

    /**
     * コンストラクタ
     */
    public function __construct()
    {
    }

    /**
     * Get Instance(Singleton pattern)
     *
     * @return ApplicationLogic $_instance
     */
    public static function getInstance()
    {
        if (is_null(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * @param string $applicationId
     * @param string $languageCode
     *
     * @return \grn\space\common\data\bean\Application
     */
    public function get(
        $applicationId,
        $languageCode = LanguageStatus::STANDARD_LANGUAGE_CODE
    ) {
        $facade = new ApplicationFacade();
        $result = $facade->select($applicationId, $languageCode);

        return $result;
    }

    /**
     * @param \grn\space\common\data\condition\ApplicationSearchCondition $condition
     * @param string                                                      $languageCode
     *
     * @return \grn\space\common\data\bean\Application
     */
    public function search(
        ApplicationSearchCondition $condition,
        $languageCode = LanguageStatus::STANDARD_LANGUAGE_CODE
    ) {
        $facade = new ApplicationFacade();
        $result = $facade->search($condition, $languageCode);

        return $result;
    }

    /**
     * @param \grn\space\common\data\bean\Application                      $application
     * @param \grn\space\common\data\collection\ApplicationLocalCollection $applicationLocalCollection
     *
     * @return \grn\space\common\data\bean\Application
     */
    public function save(
        Application $application,
        ApplicationLocalCollection $applicationLocalCollection
    ) {
        $facade = new ApplicationFacade();

        //insert into tab_grn_space_application
        $result = $facade->insert($application);

        /** @var \grn\space\common\data\bean\ApplicationLocal $applicationLocal */
        foreach ($applicationLocalCollection as $applicationLocal) {
            $applicationLocal->setApplicationId($result->getId());
            $facade->insertOnDuplicateUpdateApplicationLocal($applicationLocal);
        }

        return $result;
    }

    /**
     * @param \grn\space\common\data\bean\Application $application
     *
     * @return bool
     */
    function delete(Application $application)
    {
        $facade = new ApplicationFacade();
        $result = $facade->delete($application->getId());

        if ($application->getApplicationType()
            == Application::APPLICATION_TYPE_EXTERNAL_KINTONE
        ) {
            $logic = KintoneLogic::getInstance();
            if ($logic->isAvailable()) {
                require_once('kintone/AppAPILogic.csp');
                $logic = new \GRN_Kintone_AppAPILogic();
                $logic->delete($application->getExternalApplicationId());
            }
        }

        return $result;
    }

    /**
     * @param \grn\space\common\data\bean\Application $application
     *
     * @return \grn\space\common\data\bean\Application
     */
    public function update(Application $application)
    {
        //set modify time
        $application->setModifyTimestamp(time());

        $facade = new ApplicationFacade();
        $result = $facade->update($application);

        return $result;
    }

    /**
     * Insert/Update ApplicationLocal
     *
     * @param \grn\space\common\data\collection\ApplicationLocalCollection $applicationLocalCollection
     *
     * @return bool
     *
     */
    public function modifyApplicationLocal(
        ApplicationLocalCollection $applicationLocalCollection
    ) {
        $facade = new ApplicationFacade();
        foreach ($applicationLocalCollection as $eachLocal) {
            $facade->insertOnDuplicateUpdateApplicationLocal($eachLocal);
        }

        return true;
    }

    /**
     * Delete ApplicationLocal
     *
     * @param \grn\space\common\data\collection\ApplicationLocalCollection $applicationLocalCollection
     *
     * @return bool
     */
    public function deleteApplicationLocal(
        ApplicationLocalCollection $applicationLocalCollection
    ) {
        $spaceFacade = new SpaceFacade();
        $langaugeTableArray = $spaceFacade->getLanguageTableArray();

        $applicationFacade = new ApplicationFacade();
        /** @var \grn\space\common\data\bean\ApplicationLocal $eachLocal */
        foreach ($applicationLocalCollection as $eachLocal) {
            $applicationFacade->deleteApplicationLocal($eachLocal,
                $langaugeTableArray[$eachLocal->getLanguageCode()]);
        }

        return true;
    }

    /**
     * Select single Application by Application Code
     *
     * This method returns only one Application object even when there are many record whose application code is $applicationCode
     *
     * @param string $applicationCode
     * @param string $languageCode
     *
     * @return \grn\space\common\data\bean\Application
     */
    public function selectByApplicationCode(
        $applicationCode,
        $languageCode = LanguageStatus::STANDARD_LANGUAGE_CODE
    ) {
        $facade = new ApplicationFacade();

        return $facade->selectByApplicationCode($applicationCode,
            $languageCode);
    }

    /**
     * Select ApplicationLocalCollection by ApplicationId
     *
     * @param string $applicationId
     *
     * @return \grn\space\common\data\collection\ApplicationLocalCollection
     */
    public function getApplicationLocalCollection($applicationId)
    {
        $facade = new ApplicationFacade();

        return $facade->searchApplicationLocalByApplicationId($applicationId);
    }
}
