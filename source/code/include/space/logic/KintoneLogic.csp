<?php

namespace grn\space\logic;

/**
 * Class KintoneLogic
 */
class KintoneLogic
{
    private static $_instance = null;

    /**
     * コンストラクタ
     */
    public function __construct()
    {
    }

    /**
     * Get Instance(Singleton pattern)
     *
     * @return KintoneLogic $_instance
     */
    public static function getInstance()
    {
        if (is_null(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Set Kintone relation availability.
     *
     * @param $availability
     */
    public function setAvailable($availability)
    {
        assert('is_bool($availability)');

        require_once('fw/profile.csp');
        $profile = cb_get_system_profile('grn.space.kintone');

        if ($profile->getAttribute('available', $dummy)) {
            $profile->updateAttribute('available', $availability);
        } else {
            $profile->createAttribute('available', $availability);
        }
    }

    /**
     * Return to Kintone relation availability.
     *
     * @return bool availability true:available.
     */
    public function isAvailable()
    {
        if (defined('ON_FOREST')) {
            require_once('fw/profile.csp');
            $profile = cb_get_system_profile('grn.space.kintone');

            if ($profile->getAttribute('available', $value)) {
                return $value;
            } else {
                $profile->createAttribute('available', true);

                return true;
            }
        } else {
            global $G_config_common;

            return $G_config_common->get('Kintone', 'url') ? true : false;
        }
    }
}
