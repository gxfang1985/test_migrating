<?php

namespace grn\space\logic;

/**
 * Class SpaceSystemLogic
 */
class SpaceSystemLogic
{
    CONST ALLOW_UNLIMITED = 'allow_unlimited';
    CONST DEFAULT_EXPIRATION_DATE = 'default_expiration_date';
    CONST DEFAULT_PUBLIC_LIMITED = 'default_public_limited';
    private $_my_module_id = 'grn.space';
    CONST DEFAULT_DAYS_EXPIRATION_DATE = 0;
    /**
     * @var null $_instance
     */
    private static $_instance = null;

    /**
     * @return SpaceSystemLogic $_instance
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * コンストラクタ
     */
    public function __construct()
    {
    }

    /**
     * @return \CB_Profile
     */
    function getSystemProfile()
    {
        require_once('fw/profile.csp');
        $profile = cb_get_system_profile($this->_my_module_id);

        return $profile;
    }


    /**
     * @param bool $isPublic
     */
    public function setDefaultPrivacy($isPublic)
    {
        assert('is_bool($isPublic)');

        $profile = $this->getSystemProfile();

        if ($profile->getAttribute('privacy_default', $dummy)) {
            $profile->updateAttribute('privacy_default', $isPublic);
        } else {
            $profile->createAttribute('privacy_default', $isPublic);
        }
    }

    /**
     * @return bool
     */
    public function getDefaultPrivacy()
    {
        require_once('fw/profile.csp');
        $profile = $this->getSystemProfile();

        if ($profile->getAttribute('privacy_default', $value)) {
            return $value;
        } else {
            return true;
        }
    }

    /**
     * @param bool $is_unlimited_expiration_date
     */
    public function setIsUnlimitedExpirationDate(
        bool $is_unlimited_expiration_date
    ) {
        $profile = $this->getSystemProfile();

        if ($profile->getAttribute(self::ALLOW_UNLIMITED, $dummy)) {
            $profile->updateAttribute(self::ALLOW_UNLIMITED,
                $is_unlimited_expiration_date);
        } else {
            $profile->createAttribute(self::ALLOW_UNLIMITED,
                $is_unlimited_expiration_date);
        }
    }

    /**
     * Limit public period
     *
     * @return bool
     */
    public function getIsUnlimitedExpirationDate()
    {
        require_once('fw/profile.csp');
        $profile = $this->getSystemProfile();
        $is_unlimited = true;
        if ($profile->getAttribute(self::ALLOW_UNLIMITED, $value)) {
            $is_unlimited = $value;
        }

        return $is_unlimited;
    }

    /**
     * @return bool
     */
    public function getDefaultExpirationDateType()
    {
        require_once('fw/profile.csp');
        $profile = $this->getSystemProfile();

        if ($profile->getAttribute(self::DEFAULT_EXPIRATION_DATE, $value)) {
            return $value;
        } else {
            return true;
        }
    }

    /**
     * @param bool $is_limit_expiration_date
     */
    public function setDefaultExpirationDateType(bool $is_limit_expiration_date)
    {
        $profile = $this->getSystemProfile();

        if ($profile->getAttribute(self::DEFAULT_EXPIRATION_DATE, $dummy)) {
            $profile->updateAttribute(self::DEFAULT_EXPIRATION_DATE,
                $is_limit_expiration_date);
        } else {
            $profile->createAttribute(self::DEFAULT_EXPIRATION_DATE,
                $is_limit_expiration_date);
        }
    }

    /**
     * @param int $default_public_limited
     */
    public function setDefaultDaysExpirationDate(int $default_public_limited)
    {
        $profile = $this->getSystemProfile();

        if ($profile->getAttribute(self::DEFAULT_PUBLIC_LIMITED, $dummy)) {
            $profile->updateAttribute(self::DEFAULT_PUBLIC_LIMITED,
                $default_public_limited);
        } else {
            $profile->createAttribute(self::DEFAULT_PUBLIC_LIMITED,
                $default_public_limited);
        }
    }

    /**
     * @return int
     */
    public function getDefaultDaysExpirationDate()
    {
        require_once('fw/profile.csp');
        $profile = $this->getSystemProfile();

        if ($profile->getAttribute(self::DEFAULT_PUBLIC_LIMITED, $value)) {
            return $value;
        }

        return self::DEFAULT_DAYS_EXPIRATION_DATE;
    }
}
