<?php

namespace grn\space\logic;

use grn\space\common\utility\ValidateUtility;

use grn\space\db\dao\TodoDAO;

use grn\space\common\logic\CommentLogic;
use grn\space\common\logic\SpaceMemberLogic;
use grn\space\common\data\bean\CommentSequenceNo;
use grn\space\common\data\collection\CommentCollection;
use grn\space\common\data\collection\SpaceMemberCollection;
use grn\space\data\bean\Todo;
use grn\space\data\bean\TodoUser;
use grn\space\data\collection\TodoCollection;
use grn\space\data\collection\TodoUserCollection;
use grn\space\data\condition\TodoSearchCondition;
use grn\space\db\TodoFacade;
use grn\space\service\SpaceService;
use grn\space\service\TodoService;

/**
 * Business Logic Layer
 * This layer achieves the demand from the application service layer by using the DB layer.
 *
 * Todo logic class
 * All demands for the THREAD are undertaken from the application service layer.
 **/
class TodoLogic
{
    private static $_instance = null;

    /**
     * コンストラクタ
     */
    public function __construct()
    {
    }

    /**
     * Get Instance(Singleton pattern)
     *
     * @return TodoLogic $_instance
     */
    public static function getInstance()
    {
        if (is_null(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Create todo
     *
     * @param  \grn\space\data\bean\Todo $todo
     *
     * @throws \grn\space\common\exception\GrnDatabaseException     Any error in the database.
     * @return \grn\space\data\bean\Todo
     */
    public function createTodo(Todo $todo)
    {
        //Set current time
        $todo->setCreateTimestamp(time());
        if ( ! is_null($todo->getModifierId())) {
            $todo->setModifyTimestamp($todo->getCreateTimestamp());
        }

        // Set new todo id
        $todoDBFacade = new TodoFacade();
        $todo->setId($todoDBFacade->getTodoNextSequenceId());

        //call database facade
        $resultTodo = $todoDBFacade->insertTodo($todo);

        return $resultTodo;
    }

    /**
     * Modify todo
     *
     * @param \grn\space\data\bean\Todo $todo
     *
     * @throws \grn\space\common\exception\GrnDatabaseException     Any error in the database.
     * @return \grn\space\data\bean\Todo
     */
    public function modifyTodo(Todo $todo)
    {
        //Set current time
        $todo->setModifyTimestamp(time());

        //call database facade
        $todoDBFacade = new TodoFacade();
        $resultTodo = $todoDBFacade->updateTodo($todo);

        return $resultTodo;
    }

    /**
     * Modify of is_complete of todo.
     *
     * @param string $todoId todo sequence id
     *
     * @throws \grn\space\common\exception\GrnDatabaseException     Any error in the database.
     */
    public function modifyCompleteTodo($todoId)
    {
        $todoDBFacade = new TodoFacade();
        $todoDBFacade->updateCompleteTodo($todoId);
    }

    /**
     * Modify of is_complete of todo.
     *
     * @param string $categoryId category sequence id
     *
     * @throws \grn\space\common\exception\GrnDatabaseException     Any error in the database.
     */
    public function modifyCompleteTodosByCategoryId($categoryId)
    {
        $todoDBFacade = new TodoFacade();
        $todoDBFacade->updateCompleteTodosByCategoryId($categoryId);
    }

    /**
     *
     * Delete todo
     *
     * @param  \grn\space\data\bean\Todo $todo
     *
     * @throws \grn\space\common\exception\GrnDataNotFoundException     There is no todo or commentSequenceNo.
     * @throws \grn\space\common\exception\GrnDatabaseException         Any error in the database.
     * @return \grn\space\data\bean\Todo
     */
    public function deleteTodo(Todo $todo)
    {
        $todoDBFacade = new TodoFacade();
        $resultTodo = $todoDBFacade->deleteTodo($todo);

        return $resultTodo;
    }

    /**
     * Delete Todos by Thread ID array
     *
     * @param array $threadIdArray
     *
     * @return resource
     */
    public function deleteTodoByThreadId(array $threadIdArray)
    {
        $todoFacade = new TodoFacade();

        return $todoFacade->deleteTodoByThreadId($threadIdArray);
    }

    /**
     * Get the todo
     *
     * @param string $todoId todo sequence id
     *
     * @throws \grn\space\common\exception\GrnDataNotFoundException     When the specified todo is not found.
     * @throws \grn\space\common\exception\GrnDatabaseException         Any error in the database.
     * @return \grn\space\data\bean\Todo
     */
    public function getTodo($todoId)
    {
        $todoDBFacade = new TodoFacade();
        $todo = $todoDBFacade->selectTodo($todoId);

        return $todo;
    }

    /**
     * Get the todo
     *
     * @param     string $spaceId  space sequence id
     * @param     string $threadId thread sequence id
     * @param     string $todoId   todo sequence id
     *
     * @throws    \grn\space\common\exception\GrnDataNotFoundException     When the specified todo is not found.
     * @throws    \grn\space\common\exception\GrnDatabaseException         Any error in the database.
     * @return    \grn\space\data\bean\Todo
     */
    public function getTodoBySpaceIdThreadIdTodoId($spaceId, $threadId, $todoId)
    {
        $todoDBFacade = new TodoFacade();
        $todo
            = $todoDBFacade->selectTodoBySpaceIdThreadIdTodoId($spaceId,
            $threadId, $todoId);

        return $todo;
    }

    /**
     * Search todo
     *
     * @param \grn\space\data\condition\TodoSearchCondition $todoSearchCondition
     * @param boolean                                       $is_mobile
     *
     * @throws \grn\space\common\exception\GrnDatabaseException             Any error in the database.
     * @return \grn\space\data\collection\TodoCollection
     */
    public function searchTodo(
        TodoSearchCondition $todoSearchCondition,
        $is_mobile = false
    ) {
        $todoDBFacade = new TodoFacade();

        return $todoDBFacade->selectTodoList($todoSearchCondition, $is_mobile);
    }

    /**
     * Search todo
     *
     * @param  \grn\space\common\data\collection\CommentCollection $commentCollection
     *
     * @throws \grn\space\common\exception\GrnDatabaseException             Any error in the database.
     * @return \grn\space\data\collection\TodoCollection
     */
    public function searchTodoByCommentCollection(
        CommentCollection $commentCollection
    ) {
        $todoDBFacade = new TodoFacade();

        return $todoDBFacade->selectTodoListByCommentCollection($commentCollection);
    }

    /**
     * Search todo
     *
     * @param  array  $spaceIdArray    spaceId array
     * @param  string $operationUserId user sequence id
     * @param  string $languageCode    dispaly language code.
     *
     * @throws \grn\space\common\exception\GrnDatabaseException         Any error in the database.
     * @return \grn\space\data\collection\TodoCollection
     */
    public function searchIncompleteTodoBySpaceIdsUserId(
        array $spaceIdArray,
        $operationUserId,
        $languageCode
    ) {
        $todoDBFacade = new TodoFacade();

        return $todoDBFacade->selectIncompleteTodoListBySpaceIdsUserId($spaceIdArray,
            $operationUserId, $languageCode);
    }

    /**
     * Search todo
     *
     * @param  string $operationUserId user sequence id
     * @param  string $languageCode    dispaly language code.
     *
     * @throws \grn\space\common\exception\GrnDatabaseException         Any error in the database.
     * @return \grn\space\data\collection\TodoCollection
     */
    public function searchAssignedIncompleteTodoByUserId(
        $operationUserId,
        $languageCode
    ) {
        $todoDBFacade = new TodoFacade();

        return $todoDBFacade->selectAssignedIncompleteTodoListByUserId($operationUserId,
            $languageCode);
    }

    /**
     * Get the Todo
     *
     * @param string $commentId Comment sequence ID
     *
     * @throws \grn\space\common\exception\GrnDataNotFoundException     When the specified Todo is not found.
     * @return \grn\space\data\bean\Todo
     */
    public function getTodoByCommentId($commentId)
    {
        $todoFacade = new TodoFacade();

        return $todoFacade->selectTodoByCommentId($commentId);
    }

    //*************************************************************************************************
    //***********************************        todo user       **************************************
    //*************************************************************************************************
    /**
     * Create todo user
     *
     * @param string                                        $todoId todo sequence id
     * @param \grn\space\data\collection\TodoUserCollection $todoUserCollection
     *
     * @throws \grn\space\common\exception\GrnDatabaseException     Any error in the database.
     * @return \grn\space\data\collection\TodoUserCollection
     */
    public function createTodoUsers(
        $todoId,
        TodoUserCollection $todoUserCollection
    ) {
        $displayOrder = TodoUser::DEFAULT_DISPALY_ORDER;

        /** @var \grn\space\data\bean\TodoUser $todoUser */
        foreach ($todoUserCollection as $todoUser) {
            $todoUser->setTodoId($todoId);
            $todoUser->setDisplayOrder($displayOrder);
            $todoUser->setComplete(false);

            $displayOrder += TodoUser::DEFAULT_DISPALY_ORDER;
        }

        //call database facade
        $todoDBFacade = new TodoFacade();
        $resultTodoUserCollection
            = $todoDBFacade->insertTodoUsers($todoUserCollection);

        return $resultTodoUserCollection;
    }

    /**
     * Create todo user
     *
     * @param string                                        $todoId todo sequence id
     * @param \grn\space\data\collection\TodoUserCollection $todoUserCollection
     *
     * @throws \grn\space\common\exception\GrnDatabaseException     Any error in the database.
     * @return \grn\space\data\collection\TodoUserCollection
     */
    public function createUpdateTodoUsersByTodoUserCollection(
        $todoId,
        TodoUserCollection $todoUserCollection
    ) {
        $displayOrder = TodoUser::DEFAULT_DISPALY_ORDER;

        /** @var \grn\space\data\bean\TodoUser $todoUser */
        foreach ($todoUserCollection as $todoUser) {
            $todoUser->setTodoId($todoId);
            $todoUser->setDisplayOrder($displayOrder);
            $todoUser->setComplete(false);

            $displayOrder += TodoUser::DEFAULT_DISPALY_ORDER;
        }

        //call database facade
        $todoDBFacade = new TodoFacade();
        $resultTodoUserCollection
            = $todoDBFacade->insertOnDuplicateUpdateTodoUsers($todoUserCollection);

        return $resultTodoUserCollection;
    }

    /**
     * Modify todo user
     *
     * @param \grn\space\data\bean\TodoUser $todoUser
     *
     * @throws \grn\space\common\exception\GrnDatabaseException     Any error in the database.
     * @return Todo
     */
    public function modifyTodoUser(TodoUser $todoUser)
    {
        $todoDBFacade = new TodoFacade();
        $resultTodoUser = $todoDBFacade->updateTodoUser($todoUser);

        return $resultTodoUser;
    }

    /**
     * Delete todo users
     *
     * @param string $todoId todo sequence id
     *
     * @throws \grn\space\common\exception\GrnDataNotFoundException     When the specified todo user is not found.
     * @throws \grn\space\common\exception\GrnDatabaseException         Any error in the database.
     */
    public function deleteTodoUsersByTodoId($todoId)
    {
        //call database facade
        $todoDBFacade = new TodoFacade();
        $todoDBFacade->deleteTodoUsersByTodoId($todoId);
    }

    /**
     * Delete todo users
     *
     * @param string                                        $todoId todo sequence id
     * @param \grn\space\data\collection\TodoUserCollection $todoUserCollection
     *
     * @throws \grn\space\common\exception\GrnDataNotFoundException     When the specified todo user is not found.
     * @throws \grn\space\common\exception\GrnDatabaseException         Any error in the database.
     */
    public function deleteTodoUsersByTodoIdTodoUserCollection(
        $todoId,
        TodoUserCollection $todoUserCollection
    ) {
        //call database facade
        $todoDBFacade = new TodoFacade();
        $todoDBFacade->deleteTodoUsersByTodoIdTodoUserCollection($todoId,
            $todoUserCollection);
    }

    /**
     * Delete todo users
     *
     * @param string $spaceId space sequence id
     * @param array  $removedSpaceUserIds
     *
     * @throws \grn\space\common\exception\GrnDataNotFoundException     When the specified todo user is not found.
     * @throws \grn\space\common\exception\GrnDatabaseException         Any error in the database.
     */
    public function deleteTodoUsersBySpaceIdSpaceMemberCollection(
        $spaceId,
        array $removedSpaceUserIds
    ) {
        //call database facade
        $todoDBFacade = new TodoFacade();
        $todoDBFacade->deleteTodoUsersBySpaceIdSpaceMemberCollection($spaceId,
            $removedSpaceUserIds);
    }

    /**
     * Get the todo user
     *
     * @param string $userId user sequence id
     * @param string $todoId todo sequence id
     *
     * @throws \grn\space\common\exception\GrnDataNotFoundException     When the specified todo user is not found.
     * @throws \grn\space\common\exception\GrnDatabaseException         Any error in the database.
     * @return \grn\space\data\bean\TodoUser
     */
    public function getTodoUser($userId, $todoId)
    {
        $todoDBFacade = new TodoFacade();
        $todoUser = $todoDBFacade->selectTodoUser($userId, $todoId);

        return $todoUser;
    }

    /**
     * Get todo users
     *
     * @param string $todoId todo sequence id
     *
     * @throws \grn\space\common\exception\GrnDatabaseException     Any error in the database.
     * @return \grn\space\data\collection\TodoUserCollection
     */
    public function getTodoUserCollectionByTodoId($todoId)
    {
        $todoDBFacade = new TodoFacade();

        return $todoDBFacade->selectTodoUserListByTodoId($todoId);
    }

    /**
     * Get the array with TodoUserCollection of each todoId
     *
     * @param \grn\space\data\collection\TodoCollection $todoCollection
     *
     * @throws \grn\space\common\exception\GrnDatabaseException        Any error in the database.
     * @return array {todo sequence id, TodoUserCollection}
     */
    public function getTodoUserCollectionsArray(TodoCollection $todoCollection)
    {
        $todoDBFacade = new TodoFacade();
        $resultTodoUserCollectionArray
            = $todoDBFacade->selectTodoUserListByTodoCollection($todoCollection);

        return $resultTodoUserCollectionArray;
    }


    public function getTodoUserIDsFromTodoCollection(
        TodoCollection $todoCollection
    ) {
        $todoDBFacade = new TodoFacade();
        $todo_user_ids
            = $todoDBFacade->selectTodoUserIDsFromTodoCollection($todoCollection);

        return $todo_user_ids;
    }

    //***************************************************************************************************
    //***********************************        todo thread       **************************************
    //***************************************************************************************************
    /**
     * Create todo thread
     *
     * @param string $todoId   todo sequence id
     * @param string $threadId thread sequence id
     *
     * @throws \grn\space\common\exception\GrnDatabaseException     Any error in the database.
     */
    public function createTodoThread($todoId, $threadId)
    {
        $todoDBFacade = new TodoFacade();
        $todoDBFacade->insertTodoThread($todoId, $threadId);
    }


    //*************************************************************************************************
    //***********************************        todo comment       *********************************
    //*************************************************************************************************
    /**
     * Create todo-comment-relation
     *
     * @param string $todoId    todo sequence id
     * @param string $commentId comment sequence id
     *
     * @throws \grn\space\common\exception\GrnDatabaseException     Any error in the database.
     */
    public function createTodoCommentReletion($todoId, $commentId)
    {
        $todoDBFacade = new TodoFacade();
        $todoDBFacade->insertTodoCommentReletion($todoId, $commentId);
    }


    /**
     * Get all the Comment in the given Todo.
     *
     * @param \grn\space\data\bean\Todo $todo
     *
     * @return \grn\space\common\data\collection\CommentCollection
     */
    public function getCommentByTodo(Todo $todo)
    {
        $commentSearchCondition = new CommentSearchCondition();
        $commentSearchCondition->setSearchScopeType(CommentSearchCondition::SEARCH_SCOPE_TYPE_TODO);
        $commentSearchCondition->setSearchScopeValue($todo->getId());

        $commentLogic = CommentLogic::getInstance();

        return $commentLogic->searchComment($commentSearchCondition);
    }

    //********************************************************************************************
    //***********************************        todo file       *********************************
    //********************************************************************************************
    /**
     * Create todo-file-relation
     *
     * @param string $todoId todo sequence id
     * @param string $fileId file sequence id
     *
     * @throws \grn\space\common\exception\GrnDatabaseException     Any error in the database.
     */
    public function createTodoFileReletion($todoId, $fileId)
    {
        $todoDBFacade = new TodoFacade();
        $todoDBFacade->insertTodoFileReletion($todoId, $fileId);
    }

    /**
     * @param int $startId
     * @param int $endId
     * @param int $maxLength
     *
     * @return array
     */
    public function getAllTodoForFtsFullIndexer($startId, $endId, $maxLength)
    {
        $todoFacade = new TodoFacade();

        return $todoFacade->getAllTodoForFtsFullIndexer($startId, $endId,
            $maxLength);
    }

    /**
     * @param int $startId
     * @param int $endId
     * @param int $maxLength
     *
     * @return array
     */
    public function getAllTodoCommentForFtsFullIndexer(
        $startId,
        $endId,
        $maxLength
    ) {
        $todoFacade = new TodoFacade();

        return $todoFacade->getAllTodoCommentForFtsFullIndexer($startId, $endId,
            $maxLength);
    }

    /**
     * @param array $discussionIds
     *
     * @return array
     */
    public function getTodoIdByDiscussionId(array $discussionIds)
    {
        $todoFacade = new TodoFacade();

        return $todoFacade->getTodoIdByDiscussionId($discussionIds);
    }

    /**
     * @param array $todoIds
     *
     * @return array
     */
    public function getTodoCommentIdByTodoId(array $todoIds)
    {
        $todoFacade = new TodoFacade();

        return $todoFacade->getTodoCommentIdByTodoId($todoIds);
    }

    /**
     * @param $todo_id_list
     * @param $target_category_id
     *
     * @return bool|\mysqli_result
     */
    public function moveTodoList($todo_id_list, $target_category_id)
    {
        $todoFacade = new TodoFacade();

        return $todoFacade->moveTodoList($todo_id_list, $target_category_id);
    }

    /**
     * @param array[] $todo_users
     * @param string  $space_id
     * @param string  $operation_user_id
     *
     * @return array
     */
    public function getTodoMemberCollectionArrayOfJudgedIfMember(
        array $todo_users,
        $space_id,
        $operation_user_id
    ) {
        $out_of_space_member_ids = TodoService::getInstance()
                                              ->getNoSpaceMemberIds($space_id,
                                                  $operation_user_id);

        $todo_member_collection = new SpaceMemberCollection();
        $todo_member_collection_of_no_space_member
            = new SpaceMemberCollection();

        /** @var $todo_user TodoUser */
        foreach ($todo_users as $todo_user) {
            if ($todo_user->isDeleted()) {
                $todo_member_collection->appendBean($todo_user);
                continue;
            }

            if (isset($out_of_space_member_ids[$todo_user->getMemberID()])) {
                $todo_member_collection_of_no_space_member->appendBean($todo_user);
            } else {
                $todo_member_collection->appendBean($todo_user);
            }

        }

        $result = [];
        $result[SpaceMemberLogic::SPACE_MEMBERS] = $todo_member_collection;
        $result[SpaceMemberLogic::NO_SPACE_MEMBERS]
            = $todo_member_collection_of_no_space_member;

        return $result;
    }

    /**
     * @param array $user_ids
     * @param       $space_id
     * @param       $operation_user_id
     *
     * @return array
     */
    public function filteringOutOfSpaceMember(
        array $user_ids,
        $space_id,
        $operation_user_id
    ) {
        $space_user_ids = SpaceService::getInstance()
                                      ->getSpaceUserIdsArrayOfUserOnly($space_id,
                                          $operation_user_id);

        $result = [];
        foreach ($user_ids as $index => $user_id) {
            if (in_array($user_id, $space_user_ids)) {
                $result[$index] = $user_id;
            }
        }

        return $result;
    }

}
