<?php

namespace grn\space\logic;

use grn\space\data\bean\Thread;
use grn\space\data\bean\Space;
use grn\space\data\bean\Todo;
use grn\space\common\data\bean\Comment;
use grn\notification\background\NotificationJobRegisterService;
use grn\grn\background\BackgroundJobName as JobName;

/**
 * Class SpaceNotificationLogic
 */
class SpaceNotificationLogic
{
    /**
     * const org_data keys
     */
    const ORG_DATA_KEY_COMMENT = 'comment';
    const ORG_DATA_KEY_FILE = 'file';
    const ORG_DATA_KEY_COMPLETE = 'complete';
    const ORG_DATA_KEY_SPACE_ID = 'spaceId';

    /**
     * @var \CB_Uum
     */
    private $_uum = null;

    /**
     * @var NotificationJobRegisterService
     */
    private $_service = null;

    private static $_instance = null;

    /**
     * コンストラクタ
     */
    public function __construct()
    {
        global $G_container_base;
        $this->_uum = $G_container_base->getInstance('uum');
        require_once('space/GrnSpaceApplication.csp');
        require_once('grn/notification.csp');
        $this->_service = NotificationJobRegisterService::create();
    }

    /**
     * Get Instance(Singleton pattern)
     *
     * @return SpaceNotificationLogic $_instance
     */
    public static function getInstance()
    {
        if (is_null(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * create and send the notification of space generic
     *
     * @param   string                   $senderId
     * @param \grn\space\data\bean\Space $space Space
     * @param array                      $notification_user_ids
     * @param null                       $timestamp
     */
    public function sendSpaceNotification(
        $senderId,
        Space $space,
        array $notification_user_ids,
        $timestamp = null
    ) {
        $notification_user_ids
            = self::getNotificationUserIdsNoDeleted($notification_user_ids);
        if (count($notification_user_ids) == 0) {
            return;
        }


        $data = new \GRN_Notification_Data;

        $sender = $this->_uum->getUser($senderId);

        if ( ! ($timestamp instanceof \CB_Timestamp)) {
            $timestamp = new \CB_Timestamp;
            $timestamp->unix_ts = $space->getCreateTimestamp();
        }
        require_once('fw/i18n/locale.csp');
        $data->setSubjectData(
            cb_msg(
                \GrnSpaceApplication::GRN_SPACE_MODULE_ID, 'notify_subject',
                null,
                \CB_LocaleManager::getDefaultLanguage()
            )
        );
        $data->setModuleId(\GrnSpaceApplication::GRN_SPACE_MODULE_ID);
        $data->setSubModuleId(\GrnSpaceApplication::GRN_SPACE_SUB_MODULE_ID);
        $data->setUniqueId($space->getId());
        $data->setSpaceId($space->getId());
        $data->setActionId(GRN_NOTIFICATION_ACTION_CREATE_ID);
        $data->setSenderData($sender->get('display_name'), $senderId);
        $data->setTimeStampData($timestamp);
        $data->setStatusToUnread();
        $data->setSpaceName($space->getSpaceName());

        $data->setStatusToUpdate();
        $this->_service->register(JobName::SEND_NOTIFICATION, $data, $sender,
            $notification_user_ids);
    }

    /**
     * create and send the notification of discussion
     *
     * @param string                              $senderId
     * @param string                              $action             'create' or 'update'
     * @param \grn\space\data\bean\Thread         $thread             Thread
     * @param \grn\space\data\bean\Space          $space              Space
     * @param array                               $ntf_all_user_ids   User IDs of "All" notification
     * @param \grn\space\common\data\bean\Comment $comment            Comment
     * @param array                               $ntf_to_me_user_ids User IDs of "To Me" notification
     */
    public function sendThreadNotification(
        $senderId,
        $action,
        Thread $thread,
        Space $space,
        array $ntf_all_user_ids,
        Comment $comment = null,
        array $ntf_to_me_user_ids = []
    ) {
        $ntf_all_user_ids
            = self::getNotificationUserIdsNoDeleted($ntf_all_user_ids);
        if (count($ntf_all_user_ids) == 0) {
            return;
        }

        $data = new \GRN_Notification_Data;

        $sender = $this->_uum->getUser($senderId);

        $timestamp = new \CB_Timestamp;
        $timestamp->unix_ts = $thread->getComponentModifyDatetime()
                                     ->getTimestamp();

        $data->setModuleId(\GrnSpaceApplication::GRN_SPACE_MODULE_ID);
        $data->setSubModuleId(\GrnSpaceApplication::GRN_DISCUSSION_SUB_MODULE_ID);
        $data->setUniqueId($thread->getId());
        $data->setSubjectData($thread->getTitle());
        $data->setSpaceId($space->getId());
        $data->setActionId($action);
        $data->setSenderData($sender->get('display_name'), $senderId);
        $data->setTimeStampData($timestamp);
        $data->setSpaceName($space->getSpaceName());

        $org_data = [];
        $abstract = null;

        require_once('grn/controller.csp');
        if (is_null($comment)) {
            if ($thread->isRichText()) {
                $abstract = grn_strip_tags($thread->getContent());
            } else {
                $abstract = $thread->getContent();
            }
        } else {
            if ($comment->isRichText()) {
                $abstract = grn_strip_tags($comment->getContent());
            } else {
                $abstract = $comment->getContent();
            }
            $org_data[self::ORG_DATA_KEY_COMMENT] = $comment->getId();
        }
        $data->setAbstractData($abstract);

        $spaceFileCollection = $thread->getSpaceFileCollection();
        if ($count = count($spaceFileCollection) > 0) {
            $org_data[self::ORG_DATA_KEY_FILE] = $count;
        }
        $org_data[self::ORG_DATA_KEY_SPACE_ID] = $space->getId();
        $data->setOrgData($org_data);
        $data->setStatusToUpdate();
        $this->_service->register(JobName::SEND_NOTIFICATION, $data, $sender,
            $ntf_all_user_ids);

        // Notification: To Me
        if (count($ntf_to_me_user_ids) == 0) {
            return;
        }

        $to_me_data = clone $data;
        $to_me_data->setIsToMe(true);
        $this->_service->register(JobName::SEND_NOTIFICATION, $to_me_data,
            $sender, $ntf_to_me_user_ids);
    }

    /**
     * send the notification of Todo application
     *
     * @param   string                            $senderId
     * @param   string                            $action
     * @param \grn\space\data\bean\Todo           $todo    Todo
     * @param \grn\space\data\bean\Space          $space   Space
     * @param array                               $notification_user_ids
     * @param \grn\space\common\data\bean\Comment $comment Comment
     * @param   boolean                           $commentFlag
     * @param   boolean                           $complete
     */
    public function sendTodoNotification(
        $senderId,
        $action,
        Todo $todo,
        Space $space,
        array $notification_user_ids,
        Comment $comment = null,
        $commentFlag = false,
        $complete = false
    ) {
        $notification_user_ids
            = self::getNotificationUserIdsNoDeleted($notification_user_ids);
        $notification_user_ids
            = $this->filteringOutOfSpaceMember($notification_user_ids,
            $space->getId(), $senderId);
        if (count($notification_user_ids) == 0) {
            return;
        }

        $data = new \GRN_Notification_Data;

        $sender = $this->_uum->getUser($senderId);

        $timestamp = new \CB_Timestamp;
        if ($commentFlag && ! is_null($comment)) {
            $timestamp->unix_ts = $comment->getModifyTimestamp();
        } else {
            $timestamp->unix_ts = $todo->getModifyTimestamp();
        }

        $data->setModuleId(\GrnSpaceApplication::GRN_SPACE_MODULE_ID);
        $data->setSubModuleId(\GrnSpaceApplication::GRN_TODO_SUB_MODULE_ID);
        $data->setUniqueId($todo->getId());
        $data->setSubjectData($todo->getTitle());
        $data->setSpaceId($space->getId());
        $data->setActionId($action);
        $data->setSenderData($sender->get('display_name'), $senderId);
        $data->setTimeStampData($timestamp);
        $data->setSpaceName($space->getSpaceName());

        $org_data = [];
        $org_data[self::ORG_DATA_KEY_SPACE_ID] = $space->getId();
        $spaceFileCollection
            = $todo->getSpaceFileCollection();
        if ($count = count($spaceFileCollection) > 0) {
            $org_data[self::ORG_DATA_KEY_FILE] = $count;
        }
        if ($commentFlag && ! is_null($comment)) {
            $org_data[self::ORG_DATA_KEY_COMMENT] = $comment->getId();
        }
        if ($complete) {
            // abstract is null
            $org_data[self::ORG_DATA_KEY_COMPLETE] = $todo->getId();
        }
        $data->setOrgData($org_data);

        $abstract = null;
        if ( ! is_null($comment)) {
            if ($comment->isRichText()) {
                require_once('grn/controller.csp');
                $abstract = grn_strip_tags($comment->getContent());
            } else {
                $abstract = $comment->getContent();
            }
        }
        $data->setAbstractData($abstract);
        $data->setStatusToUpdate();
        $this->registerBackgroundNotification($data, $sender,
            $notification_user_ids);
    }

    /**
     * @param array $user_ids
     * @param       $space_id
     * @param       $sender_id
     *
     * @return array
     */
    private function filteringOutOfSpaceMember(
        array $user_ids,
        $space_id,
        $sender_id
    ) {
        $todo_logic = TodoLogic::getInstance();

        return $todo_logic->filteringOutOfSpaceMember($user_ids, $space_id,
            $sender_id);
    }

    /**
     * confirm notification of space
     *
     * @param   string        $userId
     * @param   string        $unique_id     spaceId or threadId or todoId
     * @param   \CB_TimeStamp $timestamp
     * @param   string        $sub_module_id '' or 'grn.discussion' or 'grn.todo'
     */
    public function confirmNotification(
        $userId,
        $unique_id,
        $timestamp,
        $sub_module_id
    ) {
        $user = $this->_uum->getUser($userId);
        $module_id = \GrnSpaceApplication::GRN_SPACE_MODULE_ID;
        $b_no_add_history = false;
        $notificationService = \GRN_Notification_Service::getInstance();
        $notificationService->confirmNotifyData(
            $user, $module_id, $unique_id, $timestamp, $b_no_add_history,
            $sub_module_id
        );
    }

    /**
     * @param \GRN_Notification_Data $data
     * @param \CB_User               $sender
     * @param array                  $notification_user_ids
     */
    private function registerBackgroundNotification(
        \GRN_Notification_Data $data,
        \CB_User $sender,
        array $notification_user_ids
    ) {
        $notifyList = array_filter($notification_user_ids, 'strlen');
        $notifyList = array_unique($notifyList);
        if (($key = array_search($sender->getOID(), $notifyList)) !== false) {
            unset($notifyList[$key]);
        }
        $this->_service->register(JobName::SEND_NOTIFICATION, $data, $sender,
            $notifyList);
    }

    /**
     * @param $notification_user_ids
     *
     * @return array
     */
    private function getNotificationUserIdsNoDeleted($notification_user_ids)
    {
        if (is_null($notification_user_ids) || empty($notification_user_ids)) {
            return [];
        }

        $new_user_ids = [];
        foreach ($notification_user_ids as $user_id) {
            if ( ! is_null($user_id)) {
                $new_user_ids[] = $user_id;
            }
        }

        return $new_user_ids;
    }
}


