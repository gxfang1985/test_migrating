<?php

namespace grn\space\logic;

use grn\grn\MemberLogic;
use grn\space\common\data\condition\AccessControlListSearchCondition;
use grn\space\common\logic\AccessControlListLogic;
use grn\space\db\SpaceAccessControlListFacade;
use grn\space\data\bean\SpaceAccessControlList;
use grn\space\data\collection\SpaceAccessControlListCollection;
use grn\space\data\collection\SpaceCollection;
use grn\space\data\collection\SpaceUserCollection;
use grn\space\data\condition\SpaceAccessControlListSearchCondition;

/**
 * Business Logic Layer
 * This layer achieves the demand from the application service layer by using the DB layer.
 *
 * AccessControlList logic class
 * All demands for the SpaceAccessControlList are undertaken from the application service layer.
 **/
class SpaceAccessControlListLogic
{
    private static $_cache = [];
    private static $_instance = null;

    /**
     * コンストラクタ
     */
    public function __construct()
    {
    }

    /**
     * Get Instance(Singleton pattern)
     *
     * @return SpaceAccessControlListLogic $_instance
     */
    public static function getInstance()
    {
        if (is_null(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Create space access control list
     *
     * @param  SpaceAccessControlListCollection $spaceAclCollection SpaceAccessControlListCollection
     *
     * @throws \grn\space\common\exception\GrnDatabaseException             Any error in the database.
     */
    public function createSpaceAcls(
        SpaceAccessControlListCollection $spaceAclCollection
    ) {
        $spaceAclFacade = new SpaceAccessControlListFacade();
        $spaceAclFacade->insertSpaceAccessControleLists($spaceAclCollection);
    }


    /**
     *
     * Modify space access control list
     *
     * @param  SpaceAccessControlList $spaceAcl SpaceAccessControlList
     *
     * @throws \grn\space\common\exception\GrnDataNotFoundException     When the specified category is not found.
     * @throws \grn\space\common\exception\GrnDatabaseException         Any error in the database.
     */
    public function modifySpaceAcl(SpaceAccessControlList $spaceAcl)
    {
        $spaceAclFacade = new SpaceAccessControlListFacade();
        $spaceAclFacade->updateSpaceAccessControleList($spaceAcl);
    }


    /**
     * Get the space access control list
     *
     * @param     string $authorityCode The constant has been defined in Authority class
     * @param     string $spaceId       space sequence id
     *
     * @throws    \grn\space\common\exception\GrnDataNotFoundException          When the specified space access control list is not found.
     * @throws    \grn\space\common\exception\GrnDatabaseException              Any error in the database.
     * @return    SpaceAccessControlList
     */
    public function getSpaceAcl($authorityCode, $spaceId)
    {
        if (isset(self::$_cache['getSpaceAcl'][$authorityCode][$spaceId])) {
            return self::$_cache['getSpaceAcl'][$authorityCode][$spaceId];
        }

        $spaceAclFacade = new SpaceAccessControlListFacade();
        $ret
            = $spaceAclFacade->selectSpaceAccessControleList($authorityCode,
            $spaceId);

        self::$_cache['getSpaceAcl'][$authorityCode][$spaceId] = $ret;

        return $ret;
    }


    /**
     * As for target SPACE, is access control possible on the condition of arguments?
     *
     * @param     string $authorityCode   The constant has been defined in Authority class
     * @param     string $spaceId         space sequence id
     * @param     string $operationUserId user sequence id
     *
     * @throws    \grn\space\common\exception\GrnDatabaseException              Any error in the database.
     * @return    boolean       TRUE:It has the access control.     FALSE:It doesn't have the access control.
     */
    public function hasSpaceAccessControl(
        $authorityCode,
        $spaceId,
        $operationUserId
    ) {
        if (isset(self::$_cache['hasSpaceAccessControl'][$authorityCode][$spaceId][$operationUserId])) {
            return self::$_cache['hasSpaceAccessControl'][$authorityCode][$spaceId][$operationUserId];
        }

        $spaceAclSearchCondition = new SpaceAccessControlListSearchCondition();
        $spaceAclSearchCondition->setSearchAuthorityCode($authorityCode);
        $spaceAclSearchCondition->addSearchSpaceId($spaceId);
        $spaceAclSearchCondition->setSearchUserId($operationUserId);

        //grant(許可の対象を登録されてる)かrevoke(制限の対象が登録されてる)かACL毎に取得する
        $spaceAclDBFacade = new SpaceAccessControlListFacade();
        $spaceAclCollection
            = $spaceAclDBFacade->searchSpaceAccessControlList($spaceAclSearchCondition);
        if (count($spaceAclCollection) === 0) {
            $ret = false;
            self::$_cache['hasSpaceAccessControl'][$authorityCode][$spaceId][$operationUserId]
                = $ret;

            return $ret;
        }

        //各ACL毎のアクセス権設定を取得する
        $aclCondition = new AccessControlListSearchCondition();
        /** @var \grn\space\data\bean\SpaceAccessControlList $spaceAcl */
        foreach ($spaceAclCollection as $spaceAcl) {
            $aclCondition->addSearchAccessControlListId($spaceAcl->getId());
        }
        $aclCondition->setSearchUserId($operationUserId);

        $aclLogic = AccessControlListLogic::getInstance();
        $aclCollection = $aclLogic->searchAccessControlList($aclCondition);

        //spaceAclCollectionとaclCollectionを使ってアクセス権チェックする
        //システム管理
        //  自身に持っていれば有効
        //運用管理
        //  前提条件：スペース閲覧条件が満たされていること（決めの問題で不要になる：不要例：施設グループ）
        //  ※前提条件は要件なのでロジックに含まない。ビジネスロジックの仕事は「運用管理」の有無を返すのみ
        //  自身に持っていれば有効
        //閲覧
        //  自身に持っていれば有効
        //書込
        //  前提条件：スペース閲覧条件が満たされていること
        //  ※前提条件は要件なのでロジックに含まない。ビジネスロジックの仕事は「書込」の有無を返すのみ
        //  自身に持っていれば有効
        foreach ($spaceAclCollection as $spaceAcl) {
            if ($spaceAcl->isGrant()) {
                //grantの場合、レコードが見つかった場合はアクセス可能
                $aclId = $spaceAcl->getId();
                /** @var \grn\space\common\data\bean\AccessControlList $acl */
                foreach ($aclCollection as $acl) {
                    if ($acl->getId() === $aclId) {
                        $ret = true;
                        self::$_cache['hasSpaceAccessControl'][$authorityCode][$spaceId][$operationUserId]
                            = $ret;

                        return $ret;
                    }
                }
            } else {
                //revokeの場合、レコードが見つからなかった場合はアクセス可能
                $aclId = $spaceAcl->getId();
                foreach ($aclCollection as $acl) {
                    if ($acl->getId() === $aclId) {
                        continue 2;
                    }
                }
                $ret = true;
                self::$_cache['hasSpaceAccessControl'][$authorityCode][$spaceId][$operationUserId]
                    = $ret;

                return $ret;
            }
        }

        $ret = false;
        self::$_cache['hasSpaceAccessControl'][$authorityCode][$spaceId][$operationUserId]
            = $ret;

        return $ret;
    }


    /**
     * Filter the spaceCollection with access control
     *
     * @param     string          $authorityCode   The constant has been defined in Authority class
     * @param     SpaceCollection $spaceCollection SpaceCollection
     * @param     string          $operationUserId user sequence id
     *
     * @throws    \grn\space\common\exception\GrnDatabaseException              Any error in the database.
     * @return            SpaceCollection
     */
    public function filterSpaceCollectionWithAccessControl(
        $authorityCode,
        SpaceCollection $spaceCollection,
        $operationUserId
    ) {
        $spaceIdArray = [];
        /** @var \grn\space\data\bean\Space $space */
        foreach ($spaceCollection as $space) {
            $spaceIdArray[] = $space->getId();
        }

        $spaceAclSearchCondition = new SpaceAccessControlListSearchCondition();
        $spaceAclSearchCondition->setSearchAuthorityCode($authorityCode);
        $spaceAclSearchCondition->setSearchSpaceIdArray($spaceIdArray);
        $spaceAclSearchCondition->setSearchUserId($operationUserId);


        //grant(許可の対象を登録されてる)かrevoke(制限の対象が登録されてる)かACL毎に取得する
        $spaceAclDBFacade = new SpaceAccessControlListFacade();
        $spaceAclCollection
            = $spaceAclDBFacade->searchSpaceAccessControlList($spaceAclSearchCondition);
        assert('count($spaceAclCollection) > 0');


        //各ACL毎のアクセス権設定を取得する
        $aclCondition = new AccessControlListSearchCondition();
        /** @var \grn\space\data\bean\SpaceAccessControlList $spaceAcl */
        foreach ($spaceAclCollection as $spaceAcl) {
            $aclCondition->addSearchAccessControlListId($spaceAcl->getId());
        }
        $aclCondition->setSearchUserId($operationUserId);

        $aclLogic = AccessControlListLogic::getInstance();
        $aclCollection = $aclLogic->searchAccessControlList($aclCondition);


        //アクセス権を持つspaceだけを$resultSpaceCollectionに集める
        $resultSpaceCollection = new SpaceCollection();
        foreach ($spaceCollection as $space) {
            //spaceAclCollectionとaclCollectionを使ってアクセス権チェックする
            //システム管理
            //  自身に持っていれば有効
            //運用管理
            //  前提条件：スペース閲覧条件が満たされていること（決めの問題で不要になる：不要例：施設グループ）
            //  ※前提条件は要件なのでロジックに含まない。ビジネスロジックの仕事は「運用管理」の有無を返すのみ
            //  自身に持っていれば有効
            //閲覧
            //  自身に持っていれば有効
            //書込
            //  前提条件：スペース閲覧条件が満たされていること
            //  ※前提条件は要件なのでロジックに含まない。ビジネスロジックの仕事は「書込」の有無を返すのみ
            //  自身に持っていれば有効
            foreach ($spaceAclCollection as $spaceAcl) {
                if ($space->getId() === $spaceAcl->getSpaceId()) {
                    if ($spaceAcl->isGrant()) {
                        //grantの場合、レコードが見つかった場合はアクセス可能
                        $aclId = $spaceAcl->getId();
                        /** @var \grn\space\common\data\bean\AccessControlList $acl */
                        foreach ($aclCollection as $acl) {
                            if ($acl->getId() === $aclId) {
                                $resultSpaceCollection->appendBean($space);
                            }
                        }
                    } else {
                        //revokeの場合、レコードが見つからなかった場合はアクセス可能
                        $aclId = $spaceAcl->getId();
                        foreach ($aclCollection as $acl) {
                            if ($acl->getId() === $aclId) {
                                continue 2;
                            }
                        }

                        $resultSpaceCollection->appendBean($space);
                    }
                }
            }
        }

        return $resultSpaceCollection;
    }

    /**
     * Get the array of spaceId with spaceACL
     *
     * @param string $authorityCode   The constant has been defined in Authority class
     * @param string $operationUserId user sequence id
     *
     * @throws \grn\space\common\exception\GrnDatabaseException             Any error in the database.
     * @return array
     */
    public function getSpaceIdArrayWithSpaceAccessControl(
        $authorityCode,
        $operationUserId
    ) {
        if (isset(self::$_cache['getSpaceIdArrayWithSpaceAccessControl'][$authorityCode][$operationUserId])) {
            return self::$_cache['getSpaceIdArrayWithSpaceAccessControl'][$authorityCode][$operationUserId];
        }

        $spaceAclDBFacade = new SpaceAccessControlListFacade();
        $ret
            = $spaceAclDBFacade->getSpaceIdArrayWithSpaceAccessControl($authorityCode,
            $operationUserId);

        self::$_cache['getSpaceIdArrayWithSpaceAccessControl'][$authorityCode][$operationUserId]
            = $ret;

        return $ret;
    }

    /**
     * Get the array of removed SpaceUsersId
     *
     * @param \grn\space\data\collection\SpaceUserCollection $current_members_id
     * @param \grn\space\data\collection\SpaceUserCollection $removed_members_id
     *
     * @return array $result
     */
    public function getRemovedSpaceUserIds(
        SpaceUserCollection $current_members_id,
        SpaceUserCollection $removed_members_id
    ) {
        $current_users = [];
        $current_groups = [];
        $current_roles = [];
        for ($i = 0; $i < count($current_members_id); $i++) {
            /** @var \grn\space\data\bean\SpaceUser $eachSpaceUser */
            $eachSpaceUser = $current_members_id->getBean($i);
            switch ($eachSpaceUser->getMemberType()) {
                case MemberLogic::TYPE_USER :
                    $current_users[$eachSpaceUser->getMemberID()]
                        = $eachSpaceUser->getMemberID();
                    break;
                case MemberLogic::TYPE_ORGANIZATION :
                    $current_groups[$eachSpaceUser->getMemberID()]
                        = $eachSpaceUser->getMemberID();
                    break;
                case MemberLogic::TYPE_STATIC_ROLE :
                    $current_roles[$eachSpaceUser->getMemberID()]
                        = $eachSpaceUser->getMemberID();
                    break;
            }
        }
        $current_users = self::_geUsersByGroups($current_users,
            $current_groups);
        $current_users = self::_getUsersByRoles($current_users, $current_roles);

        $removed_users = [];
        $removed_groups = [];
        $removed_roles = [];
        for ($i = 0; $i < count($removed_members_id); $i++) {
            $eachSpaceUser = $removed_members_id->getBean($i);
            switch ($eachSpaceUser->getMemberType()) {
                case MemberLogic::TYPE_USER :
                    $removed_users[$eachSpaceUser->getMemberID()]
                        = $eachSpaceUser->getMemberID();
                    break;
                case MemberLogic::TYPE_ORGANIZATION :
                    $removed_groups[$eachSpaceUser->getMemberID()]
                        = $eachSpaceUser->getMemberID();
                    break;
                case MemberLogic::TYPE_STATIC_ROLE :
                    $removed_roles[$eachSpaceUser->getMemberID()]
                        = $eachSpaceUser->getMemberID();
                    break;
            }
        }

        $removed_users = self::_geUsersByGroups($removed_users,
            $removed_groups);
        $removed_users = self::_getUsersByRoles($removed_users, $removed_roles);

        array_unique($removed_users);

        $result = [];
        foreach ($removed_users as $removed_user) {
            if ( ! in_array($removed_user, $current_users)) {
                $result[$removed_user] = $removed_user;
            }
        }

        return $result;
    }

    private function _geUsersByGroups(array $spaceUserIds, $group_ids)
    {
        if ( ! is_array($group_ids) || 0 == count($group_ids)) {
            return $spaceUserIds;
        }

        /*
         * @rewrite GRN_Uum->getGroupsUsers()
         */
        $gids = implode(',', $group_ids);

        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');

        $table = $uum->getUserTable();
        $rowset = new \CB_RowSet($table);

        $rowset->addJoin($uum->_getUserGroupTable(),
            'tab_cb_usergrouprelation.col_user=tab_cb_user._id');

        $rowset->addCondition('tab_cb_usergrouprelation.col_group in(' . $gids
                              . ') ');
        $rowset->addCondition($uum->_getLiveUserCondition());
        $order_by = 'tab_cb_user.col_position, tab_cb_user._id';
        $rowset->addOrderColumn($order_by);
        $rowset->limit(0, -1);
        $rowset->setLock(CB_DATABASE_NO_LOCK);

        while ( ! is_null($row = $rowset->iterate())) {
            $user_id = $row->getOID();
            $spaceUserIds[$user_id] = $user_id;
        }

        return $spaceUserIds;
    }

    private function _getUsersByRoles(array $spaceUserIds, $role_ids)
    {
        if ( ! is_array($role_ids) || 0 == count($role_ids)) {
            return $spaceUserIds;
        }

        /*
         * @rewrite GRN_Uum->getRoleUsersInfo()
        */
        $rids = implode(',', $role_ids);

        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');

        $table = $uum->getUserTable();
        $rowset = new \CB_RowSet($table);

        $rowset->addJoin($uum->_getUserRoleTable(),
            'tab_cb_userrolerelation.col_user=tab_cb_user._id');

        $rowset->addCondition('tab_cb_userrolerelation.col_role in(' . $rids
                              . ') ');
        $rowset->addCondition($uum->_getLiveUserCondition());
        $order_by = 'tab_cb_user.col_position, tab_cb_user._id';
        $rowset->addOrderColumn($order_by);
        $rowset->limit(0, -1);
        $rowset->setLock(CB_DATABASE_NO_LOCK);

        while ( ! is_null($row = $rowset->iterate())) {
            $user_id = $row->getOID();
            $spaceUserIds[$user_id] = $user_id;
        }

        return $spaceUserIds;
    }
}
