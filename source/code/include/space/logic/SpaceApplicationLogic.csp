<?php

namespace grn\space\logic;

use grn\space\common\data\bean\LanguageStatus;

use grn\space\common\utility\ValidateUtility;

use grn\space\common\data\bean\SpaceMember;

use grn\space\common\data\collection\CategoryLocalCollection;

use grn\space\data\collection\SpaceApplicationCollection;

use grn\space\common\exception\GrnInvalidArgumentException;
use grn\space\data\bean\Thread;
use grn\space\common\data\bean\Application;
use grn\space\data\bean\Space;
use grn\space\common\data\bean\Category;
use grn\space\data\bean\SpaceApplication;
use grn\space\data\condition\SpaceApplicationSearchCondition;
use grn\space\db\SpaceApplicationFacade;
use grn\space\common\logic\CategoryLogic;

/**
 * Class SpaceApplicationLogic
 */
class SpaceApplicationLogic
{
    private static $_instance = null;

    /**
     * コンストラクタ
     */
    public function __construct()
    {
    }

    /**
     * Get Instance(Singleton pattern)
     *
     * @return SpaceApplicationLogic $_instance
     */
    public static function getInstance()
    {
        if (is_null(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * @param string $spaceID
     * @param string $applicationID
     * @param string $language
     *
     * @return \grn\space\data\bean\SpaceApplication
     */
    public function get($spaceID, $applicationID, $language)
    {
        $facade = new SpaceApplicationFacade();
        $result = $facade->select($spaceID, $applicationID, $language);

        return $result;
    }

    /**
     * @param SpaceApplication $application
     *
     * @return SpaceApplication
     */
    public function save(SpaceApplication $application)
    {
        $facade = new SpaceApplicationFacade();
        $result = $facade->insert($application);

        return $result;
    }

    /**
     * @param $spaceID
     * @param $applicationID
     *
     * @return bool
     */
    public function delete($spaceID, $applicationID)
    {
        $facade = new SpaceApplicationFacade();
        $result = $facade->delete($spaceID, $applicationID);

        return $result;
    }

    /**
     * @param SpaceApplicationSearchCondition $condition
     *
     * @return SpaceApplicationCollection
     */
    public function search(SpaceApplicationSearchCondition $condition)
    {
        $facade = new SpaceApplicationFacade();
        $result = $facade->search($condition);

        return $result;
    }

    /**
     * Create space application
     *
     * @param \grn\space\data\bean\SpaceApplication $spaceApplication
     *
     * @return \grn\space\data\bean\SpaceApplication  returns Application object when its getApplicationMaster method is called.
     */
    public function createSpaceApplication(SpaceApplication $spaceApplication)
    {
        if (ValidateUtility::isNull($spaceApplication->getCreateTimestamp())) {
            $spaceApplication->setCreateTimestamp(time());
        }
        if (ValidateUtility::isNull($spaceApplication->getModifyTimestamp())) {
            $spaceApplication->setModifyTimestamp(time());
        }

        $categoryLogic = CategoryLogic::getInstance();

        //Create root category for Discussion application.
        $rootCategory = new Category();
        $rootCategory->setCategoryCode(uniqid());
        $rootCategory->setCategoryName("Root");
        $rootCategory->setHierarchyLevel('1');
        $rootCategory->setSystemUse(true);
        $rootCategory->setCreator($spaceApplication->getCreator());
        $rootCategory->setCreateTimestamp($spaceApplication->getCreateTimestamp());
        $rootCategory->setModifier($spaceApplication->getCreator());
        $rootCategory->setModifyTimestamp($spaceApplication->getModifyTimestamp());

        //Insert the category
        $rootCategory = $categoryLogic->createCategory($rootCategory,
            new CategoryLocalCollection());

        $spaceApplication->setRootCategoryId($rootCategory->getId());

        //Insert the relation.
        $spaceApplicationLogic = SpaceApplicationLogic::getInstance();
        $spaceApplicationLogic->save($spaceApplication);

        return $spaceApplication;
    }

    /**
     * Delete SpaceApplication(s) by Application ID
     *
     * @param string $applicationId
     *
     * @return boolean Always true
     */
    public function deleteSpaceApplicationByApplicationId($applicationId)
    {
        $facade = new SpaceApplicationFacade();

        return $facade->deleteByApplicationId($applicationId);
    }
}
