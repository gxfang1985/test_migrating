<?php

namespace grn\space\utility;

require_once('fw/uum_core.csp');

use grn\space\data\collection\SynthesisThreadCommentCollection;

/**
 * Importance!! : Use ServiceClass or neither LogicClass nor DBClass from UtilityClass.
 * But, the DB access is exceptionally generated because this class is using legacy code.
 *
 * スレッドユーティリティクラス
 * スレッドを必要な形に加工するクラス
 *
 * This code uses the legacy of the past.
 */
class ThreadUtility
{

    /**
     * トリムを行った時のマーク
     */
    const TRIM_MAKER = '...';

    /**
     * トランケートするデフォルトの長さ
     */
    const DEFAULT_TRUNCATE_LENGTH = 30;


    /**
     * コンストラクタ
     *
     */
    private function __construct()
    {

    }

    /**
     * SynthesisThreadCommentCollectionが持つBeanオブジェクトの値をユーザー設定に従って切り詰める
     *
     * @param SynthesisThreadCommentCollection $collection
     * @param \CB_User                         $operationUser
     */
    static public function constructionThreadCommentTruncateUsingUserConfig(
        SynthesisThreadCommentCollection $collection,
        \CB_User $operationUser
    ) {
        require_once('grn/ui.csp');
        $um = \GRN_UIConfigManager::getInstance();
        $uc = $um->getUserConfig($operationUser);

        $subjectWidth = ($uc) ? $uc->getSubjectWidth()
            : self::DEFAULT_TRUNCATE_LENGTH;
        $truncateWidth = ($uc) ? $uc->getTruncateWidth()
            : self::DEFAULT_TRUNCATE_LENGTH;
        $nameWidth = ($uc) ? $uc->getNameWidth()
            : self::DEFAULT_TRUNCATE_LENGTH;
        $startOffset = 0;

        /** @var \grn\space\data\bean\SynthesisThreadComment $synthesisThreadComment */
        foreach ($collection as $synthesisThreadComment) {
            $title = $synthesisThreadComment->getTitle();
            $content = $synthesisThreadComment->getContent();
            $is_rich_text = $synthesisThreadComment->isRichText();
            if ($is_rich_text) {
                require_once('grn/controller.csp');
                $content = grn_strip_tags($content);
            }
            $creatorName = $synthesisThreadComment->getCreatorDisplayName();
            $modifierName = $synthesisThreadComment->getModifierDisplayName();

            $title = mb_strimwidth($title, $startOffset, $subjectWidth,
                self::TRIM_MAKER);
            $content = mb_strimwidth($content, $startOffset,
                $truncateWidth, self::TRIM_MAKER);
            $creatorName = mb_strimwidth($creatorName, $startOffset,
                $nameWidth, self::TRIM_MAKER);
            $modifierName = mb_strimwidth($modifierName, $startOffset,
                $nameWidth, self::TRIM_MAKER);

            $synthesisThreadComment->setTitle($title);
            $synthesisThreadComment->setContent($content);
            $synthesisThreadComment->setCreatorDisplayName($creatorName);
            $synthesisThreadComment->setModifierDisplayName($modifierName);
        }
    }
}

