<?php

namespace grn\space\utility;

use grn\space\data\bean\Space;

/**
 * Class TodoUtility
 *
 * @package grn\space\utility
 */
class TodoUtility
{

    const SEARCH_BIT_INCREMENT = 1;
    const SEARCH_BIT_USER_SEARCH = 2;
    const SEARCH_BIT_USER_SEARCH_ALL = 4;

    /**
     * @param $search_bit
     *
     * @return bool
     */
    public static function isSearchTodoAssignees($search_bit)
    {
        return (self::isSearchIncremental($search_bit)
                || self::isSearchUser($search_bit)
                || self::isSearchUserAll($search_bit));
    }

    /**
     * @param $search_bit
     *
     * @return bool
     */
    public static function isSearchIncremental($search_bit)
    {
        return self::isMatchSearchBit($search_bit, self::SEARCH_BIT_INCREMENT);
    }

    /**
     * @param $search_bit
     *
     * @return bool
     */
    public static function isSearchUser($search_bit)
    {
        return self::isMatchSearchBit($search_bit,
            self::SEARCH_BIT_USER_SEARCH);
    }

    /**
     * @param $search_bit
     *
     * @return bool
     */
    public static function isSearchUserAll($search_bit)
    {
        return self::isMatchSearchBit($search_bit,
            self::SEARCH_BIT_USER_SEARCH_ALL);
    }

    /**
     * @param $target_bit
     * @param $expected_bit
     *
     * @return bool
     */
    public static function isMatchSearchBit($target_bit, $expected_bit)
    {
        return ((int)$target_bit & $expected_bit) == $expected_bit;
    }

    /**
     * @param \CB_DateTime $todo_datetime
     * @param Space        $space
     *
     * @return bool
     */
    public static function isValidWithExpirationDate(
        \CB_DateTime $todo_datetime,
        Space $space
    ) {
        if ( ! cb_date_validate_datetime($todo_datetime)) {
            return false;
        }

        $due_date_todo = new \CB_TimeStampEx();
        $due_date_todo->setDateTime($todo_datetime);

        if ($due_date_todo->unix_ts > $space->getExpirationDateTimestamp()) {
            return false;
        }

        return true;
    }
}

