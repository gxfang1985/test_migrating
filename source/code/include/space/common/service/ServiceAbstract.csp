<?php

namespace grn\space\common\service;

use grn\grn\MemberLogic;
use grn\space\common\data\bean\InspectionAbstract;
use grn\space\common\data\bean\LanguageStatus;
use grn\space\common\data\bean\SpaceMember;
use grn\space\common\data\collection\SpaceMemberCollection;
use grn\space\common\data\collection\InspectionCollectionAbstract;
use grn\space\common\data\condition\AccessControlListSearchCondition;
use grn\space\common\exception\GrnInvalidArgumentException;
use grn\space\common\logic\AccessControlListLogic;
use grn\space\common\logic\legacy\SpaceLogLogic;
use grn\space\common\logic\SpaceMemberLogic;
use grn\space\common\utility\SpaceMemberUtility;
use grn\space\common\utility\ValidateUtility;
use grn\space\data\bean\TodoUser;
use GRN_ControllerUtil;

/**
 * アプリケーションサービス層。
 * この層は、クライアント層からの要求を、ビジネスロジック層を利用して実現する
 *
 * ガルーンサービスクラス
 * サービスクラスで共通に利用する処理を定義した抽象クラス
 **/
abstract class ServiceAbstract
{
    /**
     * コンストラクタ
     */
    public function __construct()
    {

    }



    //****************************************************************************************************************
    //**********************************             authority              ******************************************
    //****************************************************************************************************************
    /**
     * Specified user is SPACE-administrator?
     *
     * スペースで実装したアクセス権以外にも、アプリケーション管理者権限という権限が存在する。
     * このメソッドはシステム管理権限または、アプリケーション管理者権限を持つかチェックする。
     *
     * @param     string $operationUserId user sequence id
     *
     * @return    boolean       TRUE: It is SPACE-administrator.     FALSE: Is is not SPACE-administrator.
     */
    public function _isSpaceAdministrator($operationUserId)
    {
        require_once('grn/system_logic.csp');
        global $G_container_base;
        $grnUum = $G_container_base->getInstance('uum');
        $systemLogic = \GRN_System::getInstance();
        $user = $grnUum->getUser($operationUserId);

        return $systemLogic->adminApplication('space', $user);
    }



    //***********************************************************************************************************
    //**********************************             user              ******************************************
    //***********************************************************************************************************
    /**
     * InspectionAbstractオブジェクト内の登録者、更新者オブジェクトにユーザー情報を加える
     *
     * @param     \grn\space\common\data\bean\InspectionAbstract $inspection
     * @param     string                                         $operationUserId                user sequence id
     * @param     boolean                                        $isSystemUseEnglish             TRUE: Enable "English spelling"     FALSE: Disable "English spelling"
     * @param     boolean                                        $isEnglishDisplayAfterName      TRUE:"English spelling" to display after Names          FALSE:It doesn't display it.
     * @param     boolean                                        $isOrganizationDisplayAfterName TRUE:"Priority organizations" to display after Names    FALSE:It doesn't display it.
     * @param     string                                         $languageCode                   dispaly language code. The standard is display at STANDARD_LANGUAGE_CODE.
     *
     * @throws    GrnInvalidArgumentException                   OperationUserId is not number. or LanguageCode is invalid.
     * @throws    \grn\space\common\exception\GrnDatabaseException
     */
    public function addInspectionUserInfo(
        InspectionAbstract $inspection,
        $operationUserId,
        $isSystemUseEnglish,
        $isEnglishDisplayAfterName,
        $isOrganizationDisplayAfterName,
        $languageCode = LanguageStatus::STANDARD_LANGUAGE_CODE
    ) {
        $spaceMemberCollection = new SpaceMemberCollection();

        $spaceMemberCollection->appendBean($inspection->getCreator(), false);
        $spaceMemberCollection->appendBean($inspection->getModifier(), false);

        $this->addUserInfo($spaceMemberCollection, $operationUserId,
            $isSystemUseEnglish, $isEnglishDisplayAfterName,
            $isOrganizationDisplayAfterName, $languageCode);
    }

    /**
     * InspectionCollectionAbstractオブジェクト内の登録者、更新者オブジェクトにユーザー情報を加える
     *
     * @param     \grn\space\common\data\collection\InspectionCollectionAbstract $inspectionCollection
     * @param     string                                                         $operationUserId                user sequence id
     * @param     boolean                                                        $isSystemUseEnglish             TRUE: Enable "English spelling"     FALSE: Disable "English spelling"
     * @param     boolean                                                        $isEnglishDisplayAfterName      TRUE:"English spelling" to display after Names          FALSE:It doesn't display it.
     * @param     boolean                                                        $isOrganizationDisplayAfterName TRUE:"Priority organizations" to display after Names    FALSE:It doesn't display it.
     * @param     string                                                         $languageCode                   dispaly language code. The standard is display at STANDARD_LANGUAGE_CODE.
     *
     * @throws    GrnInvalidArgumentException                   OperationUserId is not number. or LanguageCode is invalid.
     * @throws    \grn\space\common\exception\GrnDatabaseException
     */
    public function addInspectionCollectionUserInfo(
        InspectionCollectionAbstract $inspectionCollection,
        $operationUserId,
        $isSystemUseEnglish,
        $isEnglishDisplayAfterName,
        $isOrganizationDisplayAfterName,
        $languageCode = LanguageStatus::STANDARD_LANGUAGE_CODE
    ) {
        $spaceMemberCollection = new SpaceMemberCollection();

        foreach ($inspectionCollection as $inspectionObj) {
            $spaceMemberCollection->appendBean($inspectionObj->getCreator(),
                false);
            $spaceMemberCollection->appendBean($inspectionObj->getModifier(),
                false);
        }

        $this->addUserInfo($spaceMemberCollection, $operationUserId,
            $isSystemUseEnglish, $isEnglishDisplayAfterName,
            $isOrganizationDisplayAfterName, $languageCode);
    }


    /**
     * SpaceMemberCollectionオブジェクト内のユーザーオブジェクトにユーザー情報を加える
     *
     * @param     \grn\space\common\data\collection\SpaceMemberCollection $spaceMemberCollection
     * @param     string                                                  $operationUserId                user sequence id
     * @param     boolean                                                 $isSystemUseEnglish             TRUE: Enable "English spelling"     FALSE: Disable "English spelling"
     * @param     boolean                                                 $isEnglishDisplayAfterName      TRUE:"English spelling" to display after Names          FALSE:It doesn't display it.
     * @param     boolean                                                 $isOrganizationDisplayAfterName TRUE:"Priority organizations" to display after Names    FALSE:It doesn't display it.
     * @param     string                                                  $languageCode                   dispaly language code. The standard is display at STANDARD_LANGUAGE_CODE.
     * @param     boolean                                                 $usePrefixId                    TRUE:group prefix 'g'+groupId, role prefix 'r'+roleId   FALSE:origin
     *
     * @throws    GrnInvalidArgumentException                   OperationUserId is not number. or LanguageCode is invalid.
     * @throws    \grn\space\common\exception\GrnDatabaseException
     */
    public function addUserInfo(
        SpaceMemberCollection $spaceMemberCollection,
        $operationUserId,
        $isSystemUseEnglish,
        $isEnglishDisplayAfterName,
        $isOrganizationDisplayAfterName,
        $languageCode = LanguageStatus::STANDARD_LANGUAGE_CODE,
        $usePrefixId = false
    ) {
        ValidateUtility::isNumber($operationUserId);
        ValidateUtility::isLanguageCode($languageCode);
        ValidateUtility::isBoolean($isSystemUseEnglish);
        ValidateUtility::isBoolean($isEnglishDisplayAfterName);
        ValidateUtility::isBoolean($isOrganizationDisplayAfterName);

        $spaceMemberLogic = SpaceMemberLogic::getInstance();
        $spaceMemberLogic->addUserInfo($spaceMemberCollection, $languageCode);

        require_once("fw/i18n/locale.csp");
        $tmpUserNameLanguages
            = \CB_LocaleManager::getUserNameLanguages($operationUserId);
        $displayLanguageArray = [];

        foreach ($tmpUserNameLanguages as $eachLanguageRow) {
            $displayLanguageArray[] = $eachLanguageRow->getLanguageCode();
        }
        SpaceMemberUtility::constructionUserDisplayName(
            $spaceMemberCollection,
            $operationUserId,
            $isSystemUseEnglish,
            $isEnglishDisplayAfterName,
            $isOrganizationDisplayAfterName,
            $displayLanguageArray,
            $languageCode,
            $usePrefixId);
    }

    /**
     * @param SpaceMemberCollection $space_member_collection
     * @param bool                  $is_include_deleted_users
     *
     * @return SpaceMemberCollection
     */
    public function addSimpleUserInfo(
        SpaceMemberCollection $space_member_collection,
        $is_include_deleted_users = false
    ) {
        $user_ids = $space_member_collection->toArrayMembers();
        if ($is_include_deleted_users) {
            $display_user_info_array = SpaceMemberLogic::getInstance()
                                                       ->getDisplayMemberListIncludeDeletedUsers($user_ids);
        } else {
            $display_user_info_array = SpaceMemberLogic::getInstance()
                                                       ->getDisplayMemberListOfNotDeletedUsers($user_ids);
        }

        /** @var SpaceMember $space_member */
        foreach ($space_member_collection as $space_member) {
            $user_id = $space_member->getMemberID();
            $user_type = $space_member->getMemberType();
            $member_id = SpaceMemberUtility::createMemberUniqueId($user_id,
                $user_type);

            if ($space_member instanceof TodoUser
                && ValidateUtility::isNull($member_id)
            ) {
                $display_name = $space_member->getUserName();
                $display_name
                    = GRN_ControllerUtil::getDeletedUserNameText($display_name);
                $space_member->setDisplayName($display_name);
                $space_member->setDeleted(true);
            } elseif (array_key_exists($member_id, $display_user_info_array)) {
                $display_info = $display_user_info_array[$member_id];

                $space_member->setMemberType($display_info[MemberLogic::MEMBER_TYPE]);
                $space_member->setDisplayName($display_info[MemberLogic::DISPLAY_NAME]);

                if ( ! array_key_exists(MemberLogic::IS_DELETED,
                    $display_info)
                ) {
                    $space_member->setMemberID($display_info[MemberLogic::MEMBER_ID]);
                    $space_member->setForeignKey($display_info[MemberLogic::FOREIGN_KEY]);
                    $space_member->setIsNotUsingApp($display_info[MemberLogic::IS_NOT_USING_APP]);

                    if ($user_type === MemberLogic::TYPE_USER) {
                        $space_member->setIsInvalidUser($display_info[MemberLogic::IS_INVALID_USER]);
                        $space_member->setIsLoginUser($display_info[MemberLogic::IS_LOGIN_USER]);
                    }
                } else {
                    $space_member->setDeleted($display_info[MemberLogic::IS_DELETED]);
                }
            }
        }

        return $space_member_collection;
    }

    /**
     *
     * @return SpaceLogLogic
     */
    public function getSpaceLogLogic()
    {
        require_once("space/GrnSpaceApplication.csp");

        return new SpaceLogLogic(\GrnSpaceApplication::GRN_SPACE_MODULE_ID);
    }

    /*
     * check whether the notification is confirmed
     *
     * @param   string  $userId
     * @param   string  $subModuleId
     * @param   string  $uniqueId
     * @return  boolean
     */
    protected function isNotConfirmedNotification(
        $userId,
        $subModuleId,
        $uniqueId
    ) {
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $user = $uum->getUser($userId);
        require_once('grn/notification.csp');
        $notificationService = \GRN_Notification_Service::getInstance();
        $notifyData
            = $notificationService->getNotifyDataProperties($user,
            \GrnSpaceApplication::GRN_SPACE_MODULE_ID, $uniqueId, $subModuleId);

        if (is_null($notifyData)) {
            return false;
        }

        return ($notifyData->isStatusConfirmed()) ? false : true;
    }
}
