<?php

namespace grn\space\common\data\collection;

use grn\space\common\utility\ValidateUtility;
use grn\space\common\data\bean\BeanAbstract;
use grn\space\common\exception\GrnInvalidArgumentException;

/**
 * BeanCollectionAbstractクラス
 * あるBeanオブジェクトの集合を表現する抽象クラス
 */
abstract class BeanCollectionAbstract implements \IteratorAggregate, \Countable
{
    /**
     * Beanオブジェクトを保持する配列
     */
    private $_beanCollection;

    /**
     * For a SELECT with a LIMIT clause, the number of rows that would be returned were there no LIMIT clause
     */
    private $_countNoLimt;


    /**
     * コンストラクタ
     *
     */
    public function __construct()
    {
        $this->_beanCollection = [];
    }

    /**
     * @param int $index
     */
    public function remove($index)
    {
        assert(0 <= $index);
        assert($index < $this->count());
        unset($this->_beanCollection[$index]);
    }

    /**
     * 保持するBeanオブジェクト配列の長さを返す
     *
     * @return    int        array elements count
     */
    public function count()
    {
        return count($this->_beanCollection);
    }

    /**
     * 保持するBeanオブジェクト配列に、Beanオブジェクトを追加する
     *
     * @param     \grn\space\common\data\bean\BeanAbstract $bean
     */
    public function appendBean(BeanAbstract $bean)
    {
        $this->_beanCollection[] = $bean;
    }

    /**
     * 保持するBeanオブジェクト配列から、指定要素のBeanオブジェクトを返す
     *
     * @param     int $index Number of elements
     *
     * @return    \grn\space\common\data\bean\BeanAbstract
     */
    public function getBean($index)
    {
        return $this->_beanCollection[$index];
    }

    /**
     * Beanオブジェクトを数え上げるクラスを生成する
     *
     * @return    \ArrayIterator
     */
    public function getIterator()
    {
        return new \ArrayIterator($this->_beanCollection);
    }

    /**
     * set of record count of no LIMIT clause
     * LIMIT句を無視したレコード件数をセットする
     *
     * @param     int $value record count
     */
    public function setCountNoLimit($value)
    {
        $this->_countNoLimt = $value;
    }

    /**
     * @return array
     */
    public function toArray()
    {
        $array = [];
        foreach ($this->_beanCollection as $bean) {
            /** @var $bean BeanAbstract */
            $array[] = $bean->getId();
        }

        return $array;
    }

    /**
     * get of record count of no LIMIT clause
     * LIMIT句を無視したレコード件数を取得する
     *
     * @return    int       record count
     */
    public function getCountNoLimit()
    {
        return $this->_countNoLimt;
    }

    /**
     * get difference between two collection
     * 2つのコレクションの差分をとる
     * 引数のコレクションに存在しない要素をコレクションとして返す
     *
     * @param   \grn\space\common\data\collection\BeanCollectionAbstract $otherCollection
     *
     * @return  \grn\space\common\data\collection\BeanCollectionAbstract
     * @throws  GrnInvalidArgumentException     otherCollection is different class
     */
    public function getNotIn(BeanCollectionAbstract $otherCollection)
    {
        if ( ! ($otherCollection instanceof static)) {
            $e = new GrnInvalidArgumentException();
            throw $e;
        }
        $collectionType = get_class($otherCollection);
        $diffCollection = new $collectionType();
        $method_name = $this->getUniqueIdMethodName();

        $self_arr = [];
        foreach ($this as $selfObj) {
            $self_arr[$selfObj->$method_name()] = $selfObj;
        }

        $other_arr = [];
        foreach ($otherCollection as $otherObj) {
            $other_arr[$otherObj->$method_name()] = $otherObj;
        }

        $diff_arr = array_diff_key($self_arr, $other_arr);
        foreach ($diff_arr as $diffObj) {
            $diffCollection->appendBean($diffObj);
        }

        return $diffCollection;
    }

    /**
     * @return string
     */
    protected function getUniqueIdMethodName()
    {
        return 'getId';
    }

}
