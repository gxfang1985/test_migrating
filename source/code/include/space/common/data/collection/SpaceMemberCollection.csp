<?php

namespace grn\space\common\data\collection;

use grn\grn\MemberLogic;
use grn\space\common\data\collection\BeanCollectionAbstract;
use grn\space\common\data\bean\SpaceMember;
use grn\space\common\data\bean\BeanAbstract;
use grn\space\common\logic\SpaceMemberLogic;
use grn\space\common\utility\SpaceMemberUtility;

/**
 * SpaceMemberCollectionクラス
 * SpaceMemberオブジェクトの集合を表現するクラス
 */
class SpaceMemberCollection extends BeanCollectionAbstract
{
    const MEMBER_CHECKED_ALLOW_USING = 1;

    private $countUsers = 0;

    private $countGroups = 0;

    private $countRoles = 0;

    private $member_check_bits;

    /**
     * コンストラクタ
     *
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * 保持するBeanオブジェクト配列に、SpaceMemberオブジェクトを追加する
     *
     * @param     BeanAbstract $bean Object that implements SpaceMember
     * @param     bool         $is_count
     */
    public function appendBean(BeanAbstract $bean, $is_count = true)
    {
        assert('is_subclass_of($bean, "grn\space\common\data\bean\SpaceMember")
                || $bean instanceof grn\space\common\data\bean\SpaceMember');
        parent::appendBean($bean);

        if ($is_count) {
            switch ($bean->getMemberType()) {
                case MemberLogic::TYPE_USER :
                    $this->countUsers += 1;
                    break;
                case MemberLogic::TYPE_ORGANIZATION :
                    $this->countGroups += 1;
                    break;
                case MemberLogic::TYPE_STATIC_ROLE :
                    $this->countRoles += 1;
                    break;
            }
        }
    }

    /**
     * @return    int        Number of user members
     */
    public function countUsers()
    {
        return $this->countUsers;
    }

    /**
     * @return    int        Number of group members
     */
    public function countGroups()
    {
        return $this->countGroups;
    }

    /**
     * @return    int        Number of role members
     */
    public function countRoles()
    {
        return $this->countRoles;
    }

    /**
     * @param  number $bit
     *
     * @return boolean
     */
    public function isSetCheckBit($bit)
    {
        return (($this->member_check_bits & $bit) == $bit);
    }

    /**
     * @param number  $bit
     * @param boolean $value
     */
    public function setCheckBit($bit, $value)
    {
        if ($value) {
            $this->member_check_bits |= $bit;
        } else {
            $this->member_check_bits &= ~$bit;
        }
    }

    /**
     * @return array
     */
    public function toArrayMembers()
    {
        $result = [];
        $iterator = $this->getIterator();
        /** @var $spaceMember SpaceMember */
        foreach ($iterator as $spaceMember) {
            $key
                = SpaceMemberUtility::createMemberUniqueId($spaceMember->getMemberID(),
                $spaceMember->getMemberType());
            $result[$key] = $spaceMember->getDisplayMemberArray();
        }

        return $result;
    }

    /**
     * @return array
     */
    public function toArrayWithMemberUniqueId()
    {
        $result = [];
        $iterator = $this->getIterator();
        /** @var $space_member SpaceMember */
        foreach ($iterator as $space_member) {
            $key
                = SpaceMemberUtility::createMemberUniqueId($space_member->getMemberID(),
                $space_member->getMemberType());
            $result[$key] = $space_member;
        }

        return $result;
    }

    /**
     * @param $target_member_id
     *
     * @return bool|SpaceMember
     */
    public function getSpaceMember($target_member_id)
    {
        $allMember = $this->getIterator();
        /** @var $member SpaceMember */
        foreach ($allMember as $member) {
            $key
                = SpaceMemberUtility::createMemberUniqueId($member->getMemberID(),
                $member->getMemberType());
            if ($key == $target_member_id) {
                return $member;
            }
        }

        return false;
    }

    /**
     * @return array
     */
    public function getSpaceUsersArray()
    {
        $result = [];

        $allMember = $this->getIterator();
        /** @var $member SpaceMember */
        foreach ($allMember as $member) {
            if ($member->isTypeEqualsUser()) {
                $result[$member->getMemberID()] = $member;
            }
        }

        return $result;

    }

    /**
     * @return array
     */
    public function getSpaceGroupArray()
    {
        $result = [];

        $allMember = $this->getIterator();
        /** @var $member SpaceMember */
        foreach ($allMember as $member) {
            if ($member->isTypeEqualsOrganization()) {
                $result[$member->getMemberID()] = $member;
            }
        }

        return $result;
    }

    /**
     * @return array
     */
    public function getSpaceRoleArray()
    {
        $result = [];

        $allMember = $this->getIterator();
        /** @var $member SpaceMember */
        foreach ($allMember as $member) {
            if ($member->isTypeEqualsRole()) {
                $result[$member->getMemberID()] = $member;
            }
        }

        return $result;
    }

    /**
     * @return array
     */
    public function getSpaceUserIdsOfOnlyUser()
    {
        return array_keys($this->getSpaceUsersArray());
    }

    /**
     * @return string
     */
    protected function getUniqueIdMethodName()
    {
        return 'getUniqueId';
    }

    /**
     * @return array
     */
    public function getUserIds()
    {
        $user_ids = [];
        $group_ids = [];
        $role_ids = [];

        $all_member = $this->getIterator();
        /** @var SpaceMember $member */
        foreach ($all_member as $member) {
            $id = $member->getMemberID();
            switch ($member->getMemberType()) {
                case MemberLogic::TYPE_USER:
                    $user_ids[$id] = $id;
                    break;
                case MemberLogic::TYPE_ORGANIZATION:
                    $group_ids[$id] = $id;
                    break;
                case MemberLogic::TYPE_STATIC_ROLE:
                    $role_ids[$id] = $id;
                    break;
            }
        }

        $all_user_ids = [];

        foreach ($user_ids as $user_id) {
            $all_user_ids[$user_id] = $user_id;
        }

        $uum = cb_lwc_uum();

        if (count($group_ids) > 0) {
            $groups_users = array_keys($uum->getGroupsUsers($group_ids));
            $groups_users = SpaceMemberLogic::getInstance()
                                            ->filterUserIdsInternalAccess($groups_users);
            foreach ($groups_users as $user_id) {
                $all_user_ids[$user_id] = $user_id;
            }
        }

        if (count($role_ids) > 0) {
            $roles_users = array_keys($uum->getRolesUserIds($role_ids));
            $roles_users = SpaceMemberLogic::getInstance()
                                           ->filterUserIdsInternalAccess($roles_users);
            foreach ($roles_users as $user_id) {
                $all_user_ids[$user_id] = $user_id;
            }
        }

        return $all_user_ids;
    }

}

