<?php

namespace grn\space\common\data\collection;

use grn\space\common\data\bean\BeanAbstract;
use grn\space\common\data\bean\LanguageStatus;
use grn\space\common\data\collection\BeanCollectionAbstract;

/**
 * SpaceLocalCollection
 * Collection of LanguageStatus object
 */
class LanguageStatusCollection extends BeanCollectionAbstract
{
    /**
     * コンストラクタ
     *
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * 保持するBeanオブジェクト配列に、LanguageStatusオブジェクトを追加する
     *
     * @param     BeanAbstract $bean
     */
    public function appendBean(BeanAbstract $bean)
    {
        assert('is_subclass_of($bean, "grn\space\common\data\bean\LanguageStatus")
                || $bean instanceof grn\space\common\data\bean\LanguageStatus');
        parent::appendBean($bean);
    }

    /**
     * @param LanguageStatusCollection $otherCollection
     *
     * @return mixed
     */
    public function getNotInLanguage(LanguageStatusCollection $otherCollection)
    {
        $collectionType = get_class($otherCollection);
        $result = new $collectionType();

        foreach ($this as $selfObject) {
            foreach ($otherCollection as $eachObject) {
                if ($selfObject->getLanguageCode()
                    == $eachObject->getLanguageCode()
                ) {
                    continue 2;
                }
            }
            $result->appendBean($selfObject);
        }

        return $result;
    }

    /**
     * @param LanguageStatusCollection $otherCollection
     *
     * @return mixed
     */
    public function getIntersectionLanguage(
        LanguageStatusCollection $otherCollection
    ) {
        $collectionType = get_class($otherCollection);
        $result = new $collectionType();

        foreach ($this as $selfObject) {
            foreach ($otherCollection as $eachObject) {
                if ($selfObject->getLanguageCode()
                    == $eachObject->getLanguageCode()
                ) {
                    $result->appendBean($selfObject);
                }
            }
        }

        return $result;
    }

    /**
     * @return LanguageStatusCollection
     */
    public function getAvailableLocalLanguage(): LanguageStatusCollection
    {
        $collectionType = get_class($this);
        $result = new $collectionType();

        require_once("fw/i18n/locale.csp");
        $languageCodes = \CB_LanguageManager::getAvailableLanguages();

        foreach ($this as $selfObject) {
            if (in_array($selfObject->getLanguageCode(), $languageCodes)) {
                $result->appendBean($selfObject);
            }
        }

        return $result;
    }

}

