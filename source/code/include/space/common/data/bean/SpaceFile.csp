<?php

namespace grn\space\common\data\bean;

require_once('space/common/data/bean/legacy/GrnSpaceFile.csp');

use grn\space\common\data\bean\InspectionAbstract;
use grn\space\common\utility\ValidateUtility;

/**
 * SPACEファイル情報クラス.
 * ひとつのSpaceFileを表すデータクラス
 *
 * This code uses the legacy of the past.
 * このコードは過去の遺産（永続化オブジェクト）を使っています。
 */
class SpaceFile extends InspectionAbstract
{
    /**
     * Constant that shows that this parent object is unknown.
     * このオブジェクトの親が未定であることを表す定数
     */
    const PARENT_APPLICATION_TYPE_UNKNOWN = 0;

    /**
     * Constant that shows that this parent object is thread.
     * このオブジェクトの親がスレッドであることを表す定数
     */
    const PARENT_APPLICATION_TYPE_THREAD = 1;

    /**
     * Constant that shows that this parent object is todo.
     * このオブジェクトの親がTODOであることを表す定数
     */
    const PARENT_APPLICATION_TYPE_TODO = 2;

    /**
     * Constant that shows that this parent object is thread-comment.
     * このオブジェクトの親がTHREAD-COMMENTであることを表す定数
     */
    const PARENT_APPLICATION_TYPE_THREAD_COMMENT = 3;

    /**
     * Constant that shows that this parent object is todo-comment.
     * このオブジェクトの親がTODO-COMMENTであることを表す定数
     */
    const PARENT_APPLICATION_TYPE_TODO_COMMENT = 4;


    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const PARENT_APPLICATION_TYPE = "parent_application_type";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const PARENT_APPLICATION_ID = "parent_application_id";


    /**
     * 親アプリケーションタイプを保持する
     */
    private $_parentApplicationType;

    /**
     * 親アプリケーションIDを保持する
     */
    private $_parentApplicationId;

    /**
     * ファイル永続化オブジェクトを保持する
     */
    private $_grnSpaceFileObject;


    /**
     * コンストラクタ
     * オブジェクト配列を引数で受け取った場合は、受け取った配列でオブジェクトを初期化する
     * 引数がnullの場合は各データクラスのデフォルト値で初期化する
     *
     * @param     array $dataArray initial data
     * @param     bool  $isCheckInput
     */
    public function __construct(
        array $dataArray = null,
        $isCheckInput = self::CHECK_INPUT
    ) {
        parent::__construct($dataArray, self::INSPECTION_INIT, $isCheckInput);

        if (is_null($dataArray)) {
            $this->setParentApplicationType(self::PARENT_APPLICATION_TYPE_UNKNOWN);
            $this->setParentApplicationId('');
        } else {
            $this->setParentApplicationType((array_key_exists(self::PARENT_APPLICATION_TYPE,
                $dataArray)) ? $dataArray[self::PARENT_APPLICATION_TYPE]
                : self::PARENT_APPLICATION_TYPE_UNKNOWN);
            $this->setParentApplicationId((array_key_exists(self::PARENT_APPLICATION_ID,
                $dataArray)) ? $dataArray[self::PARENT_APPLICATION_ID] : '');
        }
    }

    /**
     * オプジェクトデータを配列に変換する
     * 配列のキーはconst定数を使用
     *
     * @return    array         key:constant value:string or boolean or number
     */
    public function convertArray()
    {
        $result = parent::convertArray();

        return $result;
    }


    /**
     * 親アプリケーションタイプを取得
     *
     * @return    int           The constant has been defined in oneself.
     */
    public function getParentApplicationType()
    {
        return $this->_parentApplicationType;
    }

    /**
     * 親アプリケーションタイプを設定
     * システムが自動的に設定するので、利用側はこのメソッドを意識しなくてよい
     * System automatically sets this method, the user not use this.
     *
     * @param     int $value The constant has been defined in oneself.
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException       It is not constant.
     * @throws    \grn\space\common\exception\GrnArgumentOutOfRangeException    It specified it excluding the constant.
     */
    public function setParentApplicationType($value)
    {
        $this->isInputNumber($value);
        ValidateUtility::isInTheRange($value,
            self::PARENT_APPLICATION_TYPE_UNKNOWN,
            self::PARENT_APPLICATION_TYPE_TODO_COMMENT);

        $this->_parentApplicationType = $value;
    }

    /**
     * 親アプリケーションIDを取得
     *
     * @return    string        parent application sequence id
     */
    public function getParentApplicationId()
    {
        return $this->_parentApplicationId;
    }

    /**
     * 親アプリケーションIDを設定
     *
     * @param     string $value parent application sequence id
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException   It is not number.
     */
    public function setParentApplicationId($value)
    {
        $this->isInputNumber($value);

        $this->_parentApplicationId = $value;
    }

    /**
     * 親アプリケーションオブジェクトを取得
     *
     * @return    \GRN_Space_File
     */
    public function getGrnSpaceFileObject()
    {
        return $this->_grnSpaceFileObject;
    }

    /**
     * 親アプリケーションオブジェクトを設定
     *
     * @param     \GRN_Space_File $value
     *
     */
    public function setGrnSpaceFileObject(\GRN_Space_File $value)
    {
        $this->_grnSpaceFileObject = $value;
    }


    /**
     * 検査の実行(オーバーライド)
     * Performing Validation is override
     *
     * @param     int $validType VALID_TYPE_CREATE, VALID_TYPE_MODIFY, VALID_TYPE_SELECT
     *
     * @return    boolean       TRUE : valid   FALSE: Invalid
     */
    protected function checkValidate($validType)
    {
        if (parent::checkValidate($validType) === false) {
            return false;
        }

        return true;
    }
}

