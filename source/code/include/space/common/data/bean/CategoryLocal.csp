<?php

namespace grn\space\common\data\bean;

use grn\space\common\data\bean\LanguageStatus;
use grn\space\common\utility\ValidateUtility;

/**
 * カテゴリ多言語マスタクラス
 * ひとつのカテゴリ多言語マスタを表すデータクラス
 */
class CategoryLocal extends LanguageStatus
{


    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const CATEGORY_ID = "col_category";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const CATEGORY_NAME = "col_category_name";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const CATEGORY_CODE = "categoryCode";


    /**
     * カテゴリIDの値を保持する
     */
    private $_categoryId;


    /**
     * カテゴリ多言語名の値を保持する
     */
    private $_categoryName;


    /**
     * Category Code
     *
     * @var string
     */
    private $_categoryCode;


    /**
     * コンストラクタ
     * オブジェクト配列を引数で受け取った場合は、受け取った配列でオブジェクトを初期化する
     * 引数がnullの場合は各データクラスのデフォルト値で初期化する
     *
     * @param     array $dataArray initial data
     * @param     bool  $isInputCheck
     */
    public function __construct(
        array $dataArray = null,
        $isInputCheck = self::CHECK_INPUT
    ) {
        parent::__construct($dataArray, $isInputCheck);

        if (is_null($dataArray)) {
            $this->setCategoryId('');
            $this->setCategoryName('');
            $this->setCategoryCode('');
        } else {
            $this->setCategoryId((array_key_exists(self::CATEGORY_ID,
                $dataArray)) ? $dataArray[self::CATEGORY_ID] : '');
            $this->setCategoryName((array_key_exists(self::CATEGORY_NAME,
                $dataArray)) ? $dataArray[self::CATEGORY_NAME] : '');
            $this->setCategoryCode((array_key_exists(self::CATEGORY_CODE,
                $dataArray)) ? $dataArray[self::CATEGORY_CODE] : '');
        }
    }

    /**
     * オプジェクトデータを配列に変換する
     * 配列のキーはconst定数を使用
     *
     * @return    array         key:constant value:string or boolean or number
     */
    public function convertArray()
    {
        $result = parent::convertArray();

        $result[self::CATEGORY_ID] = $this->getCategoryId();
        $result[self::CATEGORY_NAME] = $this->getCategoryName();

        return $result;
    }

    /**
     * カテゴリIDを取得
     *
     * @return    string        category id
     */
    public function getCategoryId()
    {
        return $this->_categoryId;
    }

    /**
     * カテゴリIDを設定
     *
     * @param     string $value category id
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException   It is not number.
     */
    public function setCategoryId($value)
    {
        $this->isInputNumber($value);
        $this->_categoryId = $value;
    }


    /**
     * カテゴリ多言語名を取得
     *
     * @return    string        language code
     */
    public function getCategoryName()
    {
        return $this->_categoryName;
    }

    /**
     * カテゴリ多言語名を設定
     *
     * @param     string $value language code
     */
    public function setCategoryName($value)
    {
        $this->_categoryName = $value;
    }

    /**
     * Get CategoryCode
     *
     * @return string
     */
    public function getCategoryCode()
    {
        return $this->_categoryCode;
    }

    /**
     * Set Category Code
     *
     * @param string $categoryCode
     */
    public function setCategoryCode($categoryCode)
    {
        $this->_categoryCode = $categoryCode;
    }

    /**
     * 検査の実行(オーバーライド)
     * Performing Validation is override
     *
     * @param     int $validType VALID_TYPE_CREATE, VALID_TYPE_MODIFY, VALID_TYPE_SELECT
     *
     * @return    boolean       TRUE : valid   FALSE: Invalid
     */
    protected function checkValidate($validType)
    {
        if (parent::checkValidate($validType) === false) {
            return false;
        }

        switch ($validType) {
            case self::VALID_TYPE_CREATE:
            case self::VALID_TYPE_MODIFY:
                if (ValidateUtility::isNull($this->getCategoryName())) {
                    return false;
                }
                break;
        }

        return true;
    }
}

