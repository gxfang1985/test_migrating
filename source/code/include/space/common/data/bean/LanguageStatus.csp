<?php

namespace grn\space\common\data\bean;

use grn\space\common\exception\GrnIllegalOperationException;

use grn\space\common\data\bean\BeanAbstract;
use grn\space\common\utility\ValidateUtility;

/**
 * 言語クラス
 * ひとつの言語を表すデータクラス
 */
class LanguageStatus extends BeanAbstract
{
    //the number of the affected rows by INSERT ON DUPLICATE UPDATE query.
    const SETUP_NOT_CHANGED = 0;
    const SETUP_INSERTED = 1;
    const SETUP_UPDATED = 2;

    /**
     * どの言語でもなく標準を使用する場合
     */
    const STANDARD_LANGUAGE_CODE = "standard";


    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const LANGUAGE_CODE = "col_language";


    /**
     * 言語コードの値を保持する
     */
    private $_languageCode;


    /**
     * コンストラクタ
     * オブジェクト配列を引数で受け取った場合は、受け取った配列でオブジェクトを初期化する
     * 引数がnullの場合は各データクラスのデフォルト値で初期化する
     *
     * @param     array $dataArray initial data
     * @param     bool  $isInputCheck
     */
    public function __construct(
        array $dataArray = null,
        $isInputCheck = self::CHECK_INPUT
    ) {
        parent::__construct($dataArray, $isInputCheck);

        if (is_null($dataArray)) {
            $this->setLanguageCode(self::STANDARD_LANGUAGE_CODE);
        } else {
            $this->setLanguageCode((array_key_exists(self::LANGUAGE_CODE,
                $dataArray)) ? $dataArray[self::LANGUAGE_CODE]
                : self::STANDARD_LANGUAGE_CODE);
        }
    }

    /**
     * (non-PHPdoc)
     * @see grn\space\common\data\bean.BeanAbstract::getId()
     */
    public function getId()
    {
        //This method should not be used because 
        //SpaceLocal does not have a single primary key named "_id".
        throw new GrnIllegalOperationException();
    }

    /**
     * オプジェクトデータを配列に変換する
     * 配列のキーはconst定数を使用
     *
     * @return    array         key:constant value:string or boolean or number
     */
    public function convertArray()
    {
        $result = parent::convertArray();

        $result[self::LANGUAGE_CODE] = $this->getLanguageCode();

        return $result;
    }

    /**
     * 言語コードを取得
     *
     * @return    string        language code
     */
    public function getLanguageCode()
    {
        return $this->_languageCode;
    }

    /**
     * 言語コードを設定
     *
     * @param     string $value language code
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException   It is not language code.
     */
    public function setLanguageCode($value)
    {
        parent::isInputLanguageCode($value);
        $this->_languageCode = $value;
    }


    /**
     * 検査の実行(オーバーライド)
     * Performing Validation is override
     *
     * @param     int $validType VALID_TYPE_CREATE, VALID_TYPE_MODIFY, VALID_TYPE_SELECT
     *
     * @return    boolean       TRUE : valid   FALSE: Invalid
     */
    protected function checkValidate($validType)
    {
        if (parent::checkValidate($validType) === false) {
            //LanguageStatusではidではなく、codeで処理が行われるので変更時でも不正扱いしない。
            if (self::VALID_TYPE_MODIFY != $validType) {
                return false;
            }
        }

        switch ($validType) {
            case self::VALID_TYPE_CREATE:
            case self::VALID_TYPE_MODIFY:
                if ( ! ValidateUtility::isLanguageCode($this->getLanguageCode(),
                    ValidateUtility::DISABLE_EMPTY,
                    ValidateUtility::EXCEPTION_NOT_THROW)
                ) {
                    return false;
                }
                break;
        }

        return true;
    }

}

