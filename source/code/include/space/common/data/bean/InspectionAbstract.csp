<?php

namespace grn\space\common\data\bean;

use grn\grn\MemberLogic;
use grn\space\common\data\bean\BeanAbstract;
use grn\space\common\data\bean\SpaceMember;

/**
 * InspectionAbstractクラス
 * あるひとつのデータを登録者情報、更新者情報付きで表現する抽象クラス
 */
abstract class InspectionAbstract extends BeanAbstract
{
    /**
     * InspectionAbstractオブジェクトを初期化する（Initialization of normal）
     */
    const INSPECTION_INIT = true;

    /**
     * InspectionAbstractオブジェクトを初期化しない（block of infinite loop）
     */
    const INSPECTION_NON_INIT = false;


    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const CREATOR_ID = "col_creator";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const CREATOR_NAME = "col_creator_name";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const CREATOR_DISPLAY_NAME = "cname";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const CREATE_TIME = "col_create_timestamp";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const CREATE_DISPLAY_DATETIME = "createDisplayDatetime";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const MODIFIER_ID = "col_modifier";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const MODIFIER_NAME = "col_modifier_name";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const MODIFIER_DISPLAY_NAME = "modifyDisplayDatetime";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const MODIFY_TIME = "col_modify_timestamp";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const MODIFY_DISPLAY_DATETIME = "modifyDisplayDatetime";


    /**
     * 作成者 SpaceMember
     */
    private $_creator;

    /**
     * 作成日時 SpaceDatetime
     */
    private $_createDatetime;

    /**
     * 更新者 SpaceMember
     */
    private $_modifier;

    /**
     * 更新日時 SpaceDatetime
     */
    private $_modifyDatetime;


    /**
     * コンストラクタ
     * オブジェクト配列を引数で受け取った場合は、受け取った配列でオブジェクトを初期化する
     * 引数がnullの場合は各データクラスのデフォルト値で初期化する
     *
     * @param     array $dataArray initial data
     * @param     bool  $isInspectionInit
     * @param     bool  $isInputCheck
     */
    public function __construct(
        array $dataArray = null,
        $isInspectionInit = self::INSPECTION_INIT,
        $isInputCheck = self::CHECK_INPUT
    ) {
        parent::__construct($dataArray, $isInputCheck);

        //自身が持つ登録者、更新者のSpaceMemberオブジェクトを生成する時に、再帰呼び出しにならないようにする
        if ($isInspectionInit) {
            if (is_null($dataArray)) {
                $this->setCreator(new SpaceMember(null, $isInputCheck));
                $this->setCreateDatetime(new \grn\space\common\data\bean\SpaceDatetime(null,
                    $isInputCheck));
                $this->setModifier(new SpaceMember(null, $isInputCheck));
                $this->setModifyDatetime(new \grn\space\common\data\bean\SpaceDatetime(null,
                    $isInputCheck));
            } else {
                $this->setCreator(new SpaceMember(null, $isInputCheck));
                $this->setCreatorId((array_key_exists(self::CREATOR_ID,
                    $dataArray)) ? $dataArray[self::CREATOR_ID] : '');
                $this->setCreatorName((array_key_exists(self::CREATOR_NAME,
                    $dataArray)) ? $dataArray[self::CREATOR_NAME] : '');
                $this->setCreateDatetime(new \grn\space\common\data\bean\SpaceDatetime(null,
                    $isInputCheck));
                $this->setCreateTimestamp((array_key_exists(self::CREATE_TIME,
                    $dataArray)) ? $dataArray[self::CREATE_TIME] : '');
                $this->setModifier(new SpaceMember(null, $isInputCheck));
                $this->setModifierId((array_key_exists(self::MODIFIER_ID,
                    $dataArray)) ? $dataArray[self::MODIFIER_ID] : '');
                $this->setModifierName((array_key_exists(self::MODIFIER_NAME,
                    $dataArray)) ? $dataArray[self::MODIFIER_NAME] : '');
                $this->setModifyDatetime(new \grn\space\common\data\bean\SpaceDatetime(null,
                    $isInputCheck));
                $this->setModifyTimestamp((array_key_exists(self::MODIFY_TIME,
                    $dataArray)) ? $dataArray[self::MODIFY_TIME] : '');
            }
        }
    }


    /**
     * オプジェクトデータを配列に変換する
     * 配列のキーはconst定数を使用
     *
     * @return    array         key:constant value:string or boolean or number
     */
    public function convertArray()
    {
        $result = parent::convertArray();

        $result[self::CREATOR_ID] = $this->getCreatorId();
        $result[self::CREATOR_DISPLAY_NAME] = $this->getCreatorDisplayName();
        $result[self::CREATE_TIME] = $this->getCreateTimestamp();
        $result[self::CREATE_DISPLAY_DATETIME]
            = $this->getCreateDisplayDatetime();
        $result[self::MODIFIER_ID] = $this->getModifierId();
        $result[self::MODIFIER_DISPLAY_NAME]
            = $this->getModifierDisplayName();
        $result[self::MODIFY_TIME] = $this->getModifyTimestamp();
        $result[self::MODIFY_DISPLAY_DATETIME]
            = $this->getModifyDisplayDatetime();

        return $result;
    }

    /**
     * 登録ユーザーを取得
     *
     * @return    SpaceMember
     */
    public function getCreator()
    {
        return $this->_creator;
    }

    /**
     * 登録ユーザーを設定
     *
     * @param     SpaceMember $value
     */
    public function setCreator(SpaceMember $value)
    {
        $this->_creator = $value;
    }

    /**
     * 登録ユーザーIDを取得
     *
     * @return    string        user sequence id
     */
    public function getCreatorId()
    {
        return $this->getCreator()->getMemberID();
    }

    /**
     * 登録ユーザーIDを設定
     *
     * @param     string $value user sequence id
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not number.
     */
    public function setCreatorId($value)
    {
        $this->getCreator()->setMemberID($value);
        $this->getCreator()->setMemberType(MemberLogic::TYPE_USER);
    }

    /**
     * 登録ユーザー名を取得
     *
     * @return string
     */
    public function getCreatorName()
    {
        return $this->getCreator()->getUserName();
    }

    /**
     * 登録ユーザー名を設定
     *
     * @param     string $value user name
     */
    public function setCreatorName($value)
    {
        $this->getCreator()->setUserName($value);
    }

    /**
     * 登録ユーザー表示名を取得
     *
     * @return    string        user display name
     */
    public function getCreatorDisplayName()
    {
        return $this->getCreator()->getDisplayName();
    }

    /**
     * 登録ユーザー表示名を設定
     *
     * @param     string $value user display name
     */
    public function setCreatorDisplayName($value)
    {
        $this->getCreator()->setDisplayName($value);
    }

    /**
     * 登録日時を取得
     *
     * @return    SpaceDatetime
     */
    public function getCreateDatetime()
    {
        return $this->_createDatetime;
    }

    /**
     * 登録日時を設定
     *
     * @param     \grn\space\common\data\bean\SpaceDatetime $value
     */
    public function setCreateDatetime(
        \grn\space\common\data\bean\SpaceDatetime $value
    ) {
        $this->_createDatetime = $value;
    }

    /**
     * 登録タイムスタンプを取得
     *
     * @return    string        timestamp
     */
    public function getCreateTimestamp()
    {
        return $this->getCreateDatetime()->getTimestamp();
    }

    /**
     * 登録タイムスタンプを設定
     *
     * @param     string $value timestamp
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not number.
     */
    public function setCreateTimestamp($value)
    {
        $this->getCreateDatetime()->setTimestamp($value);
    }

    /**
     * 登録表示日時を取得
     *
     * @return string
     */
    public function getCreateDisplayDatetime()
    {
        return $this->getCreateDatetime()->getDisplayDatetime();
    }

    /**
     * 更新ユーザーを取得
     *
     * @return    SpaceMember
     */
    public function getModifier()
    {
        return $this->_modifier;
    }

    /**
     * 更新ユーザーを設定
     *
     * @param     SpaceMember $value
     */
    public function setModifier(SpaceMember $value)
    {
        $this->_modifier = $value;
    }

    /**
     * 更新ユーザーIDを取得
     *
     * @return    string        user sequence id
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not number.
     */
    public function getModifierId()
    {
        return $this->getModifier()->getMemberID();
    }

    /**
     * 更新ユーザーIDを設定
     *
     * @param     string $value user sequence id
     */
    public function setModifierId($value)
    {
        $this->getModifier()->setMemberID($value);
        $this->getModifier()->setMemberType(MemberLogic::TYPE_USER);
    }

    /**
     * 更新ユーザー名を取得
     *
     * @return string
     */
    public function getModifierName()
    {
        return $this->getModifier()->getUserName();
    }

    /**
     * 更新ユーザー名を設定
     *
     * @param     string $value user name
     */
    public function setModifierName($value)
    {
        $this->getModifier()->setUserName($value);
    }

    /**
     * 更新ユーザー表示名を取得
     *
     * @return    string        user display name
     */
    public function getModifierDisplayName()
    {
        return $this->getModifier()->getDisplayName();
    }

    /**
     * 更新ユーザー表示名を取得
     *
     * @param     string $value user display name
     */
    public function setModifierDisplayName($value)
    {
        return $this->getModifier()->setDisplayName($value);
    }

    /**
     * 更新日時を取得
     *
     * @return    SpaceDatetime
     */
    public function getModifyDatetime()
    {
        return $this->_modifyDatetime;
    }

    /**
     * 更新日時を設定
     *
     * @param     \grn\space\common\data\bean\SpaceDatetime $value
     */
    public function setModifyDatetime(
        \grn\space\common\data\bean\SpaceDatetime $value
    ) {
        $this->_modifyDatetime = $value;
    }

    /**
     * 更新タイムスタンプを取得
     *
     * @return    string        timestamp
     */
    public function getModifyTimestamp()
    {
        return $this->getModifyDatetime()->getTimestamp();
    }

    /**
     * 更新タイムスタンプを設定
     *
     * @param     string $value timestamp
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not number.
     */
    public function setModifyTimestamp($value)
    {
        $this->getModifyDatetime()->setTimestamp($value);
    }

    /**
     * 更新表示日時を取得
     *
     * @return string
     */
    public function getModifyDisplayDatetime()
    {
        return $this->getModifyDatetime()->getDisplayDatetime();
    }


    /**
     * 検査の実行(オーバーライド)
     * Performing Validation is override
     *
     * @param     int $validType VALID_TYPE_CREATE, VALID_TYPE_MODIFY, VALID_TYPE_SELECT
     *
     * @return    boolean       TRUE : valid   FALSE: Invalid
     */
    protected function checkValidate($validType)
    {
        if (parent::checkValidate($validType) === false) {
            return false;
        }

        if ($validType == InspectionAbstract::VALID_TYPE_CREATE) {
            if (is_null($this->getCreatorId())) {
                return false;
            }
        }

        if ($validType == InspectionAbstract::VALID_TYPE_MODIFY) {
            if (is_null($this->getModifierId())
                && '' === trim($this->getModifierName())
            ) {
                return false;
            }
        }

        return true;
    }

}

