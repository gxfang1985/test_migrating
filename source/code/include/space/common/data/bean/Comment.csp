<?php

namespace grn\space\common\data\bean;

use grn\grn\mention\bean\MentionObjectCollection;
use grn\space\common\data\bean\InspectionAbstract;
use grn\space\common\data\collection\SpaceFileCollection;
use grn\space\common\utility\ValidateUtility;

/**
 * コメントクラス
 * ひとつのコメントを表すデータクラス
 */
class Comment extends InspectionAbstract
{
    /**
     * Constant that shows that this parent object is thread.
     * このオブジェクトの親がスレッドであることを表す定数
     */
    const PARENT_APPLICATION_TYPE_THREAD = 1;

    /**
     * Constant that shows that this parent object is todo.
     * このオブジェクトの親がTODOであることを表す定数
     */
    const PARENT_APPLICATION_TYPE_TODO = 2;


    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const COMMENT_NO = "col_comment_no";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const CONTENT = "col_content";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const IS_RICH_TEXT = "col_is_rich_text";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const HIERARCHY_LEVEL = "col_hierarchy_level";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const PARENT_COMMENT_ID = "col_parent";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const PARENT_COMMENT_NO = "parent_comment_no";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const IS_LOGICAL_DELETE = "col_is_logical_delete";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const MENTION = "col_mention";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const PARENT_APPLICATION_TYPE = "parent_application_type";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const PARENT_APPLICATION_ID = "parent_application_id";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const IS_UNREAD = "isUnread";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const READ_TIMESTAMP = "readTimestamp";


    /**
     * コメントNoの値を保持する
     */
    private $_commentNo;

    /**
     * 内容の値を保持する
     */
    private $_content;

    /**
     * リッチテキストフラグの値を保持する
     */
    private $_isRichText;

    /**
     * 階層レベルの値を保持する
     */
    private $_hierarchyLevel;

    /**
     * 親コメントIDを保持する
     */
    private $_parentCommentId;

    /**
     * 論理削除フラグを保持する
     */
    private $_isLogicalDelete;

    /**
     * コメントのステータスの値を保持する
     */
    private $_statusCode;


    /**
     * 親コメントNoを保持する
     */
    private $_parentCommentNo;

    /**
     * 未読フラグ（対象ユーザー）の値を保持する
     */
    private $_isUnread;

    /**
     * 既読日時（対象ユーザー）の値を保持する
     */
    private $_readTimestamp;

    /**
     * コメントが持つ添付ファイルの集合を保持する
     */
    private $_spaceFileCollection;

    /**
     * 親アプリケーションタイプを保持する
     */
    private $_parentApplicationType;

    /**
     * 親アプリケーションIDを保持する
     */
    private $_parentApplicationId;

    /**
     * 親アプリケーションオブジェクトを保持する
     */
    private $_parentApplicationObject;

    /**
     * Mention objects
     *
     * @var MentionObjectCollection
     */
    private $mention;

    /**
     * コンストラクタ
     * オブジェクト配列を引数で受け取った場合は、受け取った配列でオブジェクトを初期化する
     * 引数がnullの場合は各データクラスのデフォルト値で初期化する
     *
     * @param     array $dataArray initial data
     * @param     bool  $isInputCheck
     */
    public function __construct(
        array $dataArray = null,
        $isInputCheck = self::CHECK_INPUT
    ) {
        parent::__construct($dataArray, self::INSPECTION_INIT, $isInputCheck);

        if (is_null($dataArray)) {
            $this->setCommentNo('');
            $this->setContent('');
            $this->setRichText(false);
            $this->setHierarchyLevel('1');
            $this->setParentCommentId('');
            $this->setParentCommentNo('');
            $this->setUnread(true);
            $this->setReadTimestamp('');
            $this->setLogicalDelete(false);
            $this->setParentApplicationType('');
            $this->setParentApplicationId('');
            $this->setSpaceFileCollection(new SpaceFileCollection());
            $this->setMention(new MentionObjectCollection());
        } else {
            $this->setCommentNo((array_key_exists(self::COMMENT_NO, $dataArray))
                ? $dataArray[self::COMMENT_NO] : '');
            $this->setContent((array_key_exists(self::CONTENT, $dataArray))
                ? $dataArray[self::CONTENT] : '');
            $this->setRichText((array_key_exists(self::IS_RICH_TEXT,
                $dataArray)) ? (($dataArray[self::IS_RICH_TEXT] === null
                                 || $dataArray[self::IS_RICH_TEXT] == 0) ? false
                : true) : false);
            $this->setHierarchyLevel((array_key_exists(self::HIERARCHY_LEVEL,
                $dataArray)) ? $dataArray[self::HIERARCHY_LEVEL] : '1');
            $this->setParentCommentId((array_key_exists(self::PARENT_COMMENT_ID,
                $dataArray)) ? $dataArray[self::PARENT_COMMENT_ID] : '');
            $this->setParentCommentNo((array_key_exists(self::PARENT_COMMENT_NO,
                $dataArray)) ? $dataArray[self::PARENT_COMMENT_NO] : '');
            $this->setUnread((array_key_exists(self::IS_UNREAD, $dataArray))
                ? (($dataArray[self::IS_UNREAD] === null
                    || $dataArray[self::IS_UNREAD] == 1) ? true : false)
                : true);
            $this->setReadTimestamp((array_key_exists(self::READ_TIMESTAMP,
                $dataArray)) ? $dataArray[self::READ_TIMESTAMP] : '');
            $this->setLogicalDelete((array_key_exists(self::IS_LOGICAL_DELETE,
                $dataArray)) ? (($dataArray[self::IS_LOGICAL_DELETE] === null
                                 || $dataArray[self::IS_LOGICAL_DELETE] == 0)
                ? false : true) : false);
            $this->setParentApplicationType((array_key_exists(self::PARENT_APPLICATION_TYPE,
                $dataArray)) ? $dataArray[self::PARENT_APPLICATION_TYPE] : '');
            $this->setParentApplicationId((array_key_exists(self::PARENT_APPLICATION_ID,
                $dataArray)) ? $dataArray[self::PARENT_APPLICATION_ID] : '');
            $this->setSpaceFileCollection(new SpaceFileCollection());
            $this->setMention($dataArray[self::MENTION] ??
                              new MentionObjectCollection());
        }
    }

    /**
     * オプジェクトデータを配列に変換する
     * 配列のキーはconst定数を使用
     *
     * @return    array         key:constant value:string or boolean or number
     */
    public function convertArray()
    {
        $result = parent::convertArray();

        $result[self::COMMENT_NO] = $this->getCommentNo();
        $result[self::CONTENT] = $this->getContent();
        $result[self::IS_RICH_TEXT] = $this->isRichText();
        $result[self::HIERARCHY_LEVEL] = $this->getHierarchyLevel();
        $result[self::PARENT_COMMENT_ID] = $this->getParentCommentId();
        $result[self::PARENT_COMMENT_NO] = $this->getParentCommentNo();
        $result[self::IS_UNREAD] = $this->isUnread();
        $result[self::READ_TIMESTAMP] = $this->getReadTimestamp();
        $result[self::IS_LOGICAL_DELETE] = $this->isLogicalDelete();
        $result[self::MENTION] = $this->getMention();

        return $result;
    }


    /**
     * コメントNoを取得
     *
     * @return    string        comment no
     */
    public function getCommentNo()
    {
        return $this->_commentNo;
    }

    /**
     * コメントNoを設定
     *
     * @param     string $value comment no
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not number.
     */
    public function setCommentNo($value)
    {
        $this->isInputNumber($value);

        $this->_commentNo = $value;
    }

    /**
     * 内容を取得
     *
     * @return    string        content
     */
    public function getContent()
    {
        return $this->_content;
    }

    /**
     * 内容を設定
     *
     * @param     string $value content
     */
    public function setContent($value)
    {
        $this->_content = $value;
    }

    /**
     * リッチテキストフラグを取得
     *
     * @return    boolean       TRUE : rich text    FALSE : plain text
     */
    public function isRichText()
    {
        return $this->_isRichText;
    }

    /**
     * リッチテキストフラグを設定
     *
     * @param     boolean       TRUE : rich text    FALSE : plain text
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not boolean.
     */
    public function setRichText($value)
    {
        $this->isInputBoolean($value);

        $this->_isRichText = $value;
    }

    /**
     * 階層レベルを取得
     *
     * @return    string        hierarchy level
     */
    public function getHierarchyLevel()
    {
        return $this->_hierarchyLevel;
    }

    /**
     * 階層レベルを設定
     *
     * @param     string $value hierarchy level
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not number.
     */
    public function setHierarchyLevel($value)
    {
        $this->isInputNumber($value);

        $this->_hierarchyLevel = $value;
    }

    /**
     * 親コメントIDを取得
     *
     * @return    string        comment sequence id
     */
    public function getParentCommentId()
    {
        return $this->_parentCommentId;
    }

    /**
     * 親コメントIDを設定
     *
     * @param     string $value comment sequence id
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException   It is not number.
     */
    public function setParentCommentId($value)
    {
        $this->isInputNumber($value);

        $this->_parentCommentId = $value;
    }

    /**
     * 親コメントNoを取得
     *
     * @return    string        comment no
     */
    public function getParentCommentNo()
    {
        return $this->_parentCommentNo;
    }

    /**
     * 親コメントNoを設定
     *
     * @param     string $value comment no
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException   It is not number.
     */
    public function setParentCommentNo($value)
    {
        $this->isInputNumber($value);

        $this->_parentCommentNo = $value;
    }

    /**
     * 論理削除フラグを取得
     *
     * @return    boolean       TRUE : logical deleted    FALSE : active
     */
    public function isLogicalDelete()
    {
        return $this->_isLogicalDelete;
    }

    /**
     * 論理削除フラグを設定
     *
     * @param     boolean       TRUE : logical deleted    FALSE : active
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not boolean.
     */
    public function setLogicalDelete($value)
    {
        $this->isInputBoolean($value);

        $this->_isLogicalDelete = $value;
    }

    /**
     * 親アプリケーションタイプを取得
     *
     * @return    int           The constant has been defined in oneself.
     */
    public function getParentApplicationType()
    {
        return $this->_parentApplicationType;
    }

    /**
     * 親アプリケーションタイプを設定
     * システムが自動的に設定するので、利用側はこのメソッドを意識しなくてよい
     * System automatically sets this method, the user not use this.
     *
     * @param     int $value The constant has been defined in oneself.
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException       It is not constant.
     * @throws    \grn\space\common\exception\GrnArgumentOutOfRangeException    It specified it excluding the constant.
     */
    public function setParentApplicationType($value)
    {
        $this->isInputNumber($value);
        ValidateUtility::isInTheRange($value,
            self::PARENT_APPLICATION_TYPE_THREAD,
            self::PARENT_APPLICATION_TYPE_TODO);

        $this->_parentApplicationType = $value;
    }

    /**
     * 親アプリケーションIDを取得
     *
     * @return    string        parent application sequence id
     */
    public function getParentApplicationId()
    {
        return $this->_parentApplicationId;
    }

    /**
     * 親アプリケーションIDを設定
     *
     * @param     string $value parent application sequence id
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException   It is not number.
     */
    public function setParentApplicationId($value)
    {
        $this->isInputNumber($value);

        $this->_parentApplicationId = $value;
    }

    /**
     * 親アプリケーションオブジェクトを取得
     *
     * Can be obtained only when the getParentApplicationType() == PARENT_APPLICATION_TYPE_TODO
     * getParentApplicationType() == PARENT_APPLICATION_TYPE_TODO の時だけ取得できる
     *
     * @return            BeanAbstract
     */
    public function getParentApplicationObject()
    {
        return $this->_parentApplicationObject;
    }

    /**
     * 親アプリケーションオブジェクトを設定
     *
     * @param     BeanAbstract $value
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException   It is not number.
     */
    public function setParentApplicationObject(BeanAbstract $value)
    {
        $this->_parentApplicationObject = $value;
    }

    /**
     * 未読フラグを取得
     *
     * @return    boolean       TRUE : unread      FALSE : read
     */
    public function isUnread()
    {
        return $this->_isUnread;
    }

    /**
     * 未読フラグを設定
     *
     * @param     boolean       TRUE : unread      FALSE : read
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not boolean.
     */
    public function setUnread($value)
    {
        $this->isInputBoolean($value);

        $this->_isUnread = $value;
    }

    /**
     * 既読日時を取得
     *
     * @return    string        timestamp
     */
    public function getReadTimestamp()
    {
        return $this->_readTimestamp;
    }

    /**
     * 既読日時を設定
     *
     * @param     string $value timestamp
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not number.
     */
    public function setReadTimestamp($value)
    {
        $this->isInputNumber($value);

        $this->_readTimestamp = $value;
    }

    /**
     * 添付ファイル(\GRN_Space_File)の配列を取得
     *
     * @return    array         {\GRN_Space_File->getOID(), \GRN_Space_File}
     */
    public function getGrnSpaceFileArray()
    {
        $resultArray = [];

        foreach ($this->getSpaceFileCollection() as $file) {
            /** @var \grn\space\common\data\bean\SpaceFile $file */
            $resultArray[$file->getId()] = $file->getGrnSpaceFileObject();
        }

        return $resultArray;
    }

    /**
     * 添付ファイルコレクションオブジェクトを取得
     *
     * @return    SpaceFileCollection
     */
    public function getSpaceFileCollection()
    {
        return $this->_spaceFileCollection;
    }

    /**
     * 添付ファイルコレクションオブジェクトを設定
     *
     * @param     $value          SpaceFileCollection
     */
    public function setSpaceFileCollection(SpaceFileCollection $value)
    {
        $this->_spaceFileCollection = $value;
    }

    /**
     * @return MentionObjectCollection
     */
    public function getMention(): MentionObjectCollection
    {
        return $this->mention;
    }

    /**
     * @param MentionObjectCollection $collection
     */
    public function setMention(MentionObjectCollection $collection)
    {
        $this->mention = $collection;
    }

    /**
     * 検査の実行(オーバーライド)
     * Performing Validation is override
     *
     * @param     int $validType VALID_TYPE_CREATE, VALID_TYPE_MODIFY, VALID_TYPE_SELECT
     *
     * @return    boolean       TRUE : valid   FALSE: Invalid
     */
    protected function checkValidate($validType)
    {
        if (parent::checkValidate($validType) === false) {
            return false;
        }

        return true;
    }

}

