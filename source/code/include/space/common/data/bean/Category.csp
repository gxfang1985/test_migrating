<?php

namespace grn\space\common\data\bean;

require_once('space/common/data/bean/InspectionAbstract.csp');
require_once('space/common/utility/ValidateUtility.csp');

use grn\space\common\data\bean\InspectionAbstract;
use grn\space\common\utility\ValidateUtility;

/**
 * カテゴリークラス
 * ひとつのカテゴリを表すデータクラス
 */
class Category extends InspectionAbstract
{
    /**
     * 表示順デフォルト値
     */
    const DEFAULT_DISPLAY_ORDER = "100";

    const DEFAULT_SPACE_CATEGORY_CODE = "default_space_category";

    const ROOT_ID = 1;


    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const CATEGORY_CODE = "col_category_code";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const CATEGORY_NAME = "col_category_name";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const MEMO = "col_memo";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const HIERARCHY_LEVEL = "col_hierarchy_level";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const PARENT_CATEGORY_ID = "col_parent";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const IS_SYSTEM_USE = "col_is_system_use";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const DISPLAY_ORDER = "col_display_order";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const COUNT_CHILDLEN = "count_childlen";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const IS_NOTIFICATION = "isNotification";


    /**
     * カテゴリコードの値を保持する
     */
    private $_categoryCode;

    /**
     * カテゴリ名の値を保持する
     */
    private $_categoryName;

    /**
     * メモの値を保持する
     */
    private $_memo;

    /**
     * 階層レベルの値を保持する
     */
    private $_hierarchyLevel;

    /**
     * 親カテゴリIDを保持する
     */
    private $_parentCategoryId;

    /**
     * システム利用フラグを保持する
     */
    private $_isSystemUse;

    /**
     * 表示順を保持する
     */
    private $_displayOrder;

    /**
     * 子カテゴリ数
     */
    private $_countChildlen;

    /**
     * 通知フラグ(対象ユーザー)の値を保持する
     */
    private $_isNotification;   //When acquiring it with the collection, it is always FALSE.  (コレクションで取得する時は常にFALSE)


    /**
     * コンストラクタ
     * オブジェクト配列を引数で受け取った場合は、受け取った配列でオブジェクトを初期化する
     * 引数がnullの場合は各データクラスのデフォルト値で初期化する
     *
     * @param     array $dataArray initial data
     * @param     bool  $isInputCheck
     */
    public function __construct(
        array $dataArray = null,
        $isInputCheck = self::CHECK_INPUT
    ) {
        parent::__construct($dataArray, self::INSPECTION_INIT, $isInputCheck);

        if (is_null($dataArray)) {
            $this->setCategoryCode('');
            $this->setCategoryName('');
            $this->setMemo('');
            $this->setHierarchyLevel('1');
            $this->setParentCategoryId('');
            $this->setSystemUse(false);
            $this->setDisplayOrder(self::DEFAULT_DISPLAY_ORDER);
            $this->setCountChildlen('0');
            $this->setNotification(false);
        } else {
            $this->setCategoryCode((array_key_exists(self::CATEGORY_CODE,
                $dataArray)) ? $dataArray[self::CATEGORY_CODE] : '');
            $this->setCategoryName((array_key_exists(self::CATEGORY_NAME,
                $dataArray)) ? $dataArray[self::CATEGORY_NAME] : '');
            $this->setMemo((array_key_exists(self::MEMO, $dataArray))
                ? $dataArray[self::MEMO] : '');
            $this->setHierarchyLevel((array_key_exists(self::HIERARCHY_LEVEL,
                $dataArray)) ? $dataArray[self::HIERARCHY_LEVEL] : '');
            $this->setParentCategoryId((array_key_exists(self::PARENT_CATEGORY_ID,
                $dataArray)) ? $dataArray[self::PARENT_CATEGORY_ID] : '');
            $this->setSystemUse((array_key_exists(self::IS_SYSTEM_USE,
                $dataArray)) ? (($dataArray[self::IS_SYSTEM_USE] === null
                                 || $dataArray[self::IS_SYSTEM_USE] == 0)
                ? false : true) : false);
            $this->setDisplayOrder((array_key_exists(self::DISPLAY_ORDER,
                $dataArray)) ? $dataArray[self::DISPLAY_ORDER]
                : self::DEFAULT_DISPLAY_ORDER);
            $this->setCountChildlen((array_key_exists(self::COUNT_CHILDLEN,
                $dataArray)) ? $dataArray[self::COUNT_CHILDLEN] : '0');
            $this->setNotification((array_key_exists(self::IS_NOTIFICATION,
                $dataArray)) ? false : true);
        }
    }

    /**
     * オプジェクトデータを配列に変換する
     * 配列のキーはconst定数を使用
     *
     * @return    array         key:constant value:string or boolean or number
     */
    public function convertArray()
    {
        $result = parent::convertArray();

        $result[self::CATEGORY_CODE] = $this->getCategoryCode();
        $result[self::CATEGORY_NAME] = $this->getCategoryName();
        $result[self::MEMO] = $this->getMemo();
        $result[self::HIERARCHY_LEVEL] = $this->getHierarchyLevel();
        $result[self::PARENT_CATEGORY_ID] = $this->getParentCategoryId();
        $result[self::IS_SYSTEM_USE] = $this->isSystemUse();
        $result[self::DISPLAY_ORDER] = $this->getDisplayOrder();
        $result[self::COUNT_CHILDLEN] = $this->countChildlen();
        $result[self::IS_NOTIFICATION] = $this->isNotification();

        return $result;
    }

    /**
     * カテゴリコードを取得
     *
     * @return    string        category code
     */
    public function getCategoryCode()
    {
        return $this->_categoryCode;
    }

    /**
     * カテゴリコードを設定
     *
     * @param     string $value category code
     */
    public function setCategoryCode($value)
    {
        $this->_categoryCode = $value;
    }

    /**
     * カテゴリ名を取得
     *
     * @return    string        category name
     */
    public function getCategoryName()
    {
        return $this->_categoryName;
    }

    /**
     * カテゴリ名を設定
     *
     * @param     string $value category name
     */
    public function setCategoryName($value)
    {
        $this->_categoryName = $value;
    }

    /**
     * メモを取得
     *
     * @return    string        memo
     */
    public function getMemo()
    {
        return $this->_memo;
    }

    /**
     * メモを設定
     *
     * @param     string $value memo
     */
    public function setMemo($value)
    {
        $this->_memo = $value;
    }

    /**
     * 階層レベルを取得
     *
     * @return    string        hierarchy level
     */
    public function getHierarchyLevel()
    {
        return $this->_hierarchyLevel;
    }

    /**
     * 階層レベルを設定
     *
     * @param     string $value hierarchy level
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not number.
     */
    public function setHierarchyLevel($value)
    {
        $this->isInputNumber($value);

        $this->_hierarchyLevel = $value;
    }

    /**
     * 親カテゴリIDを取得
     *
     * @return    string        category sequence id
     */
    public function getParentCategoryId()
    {
        return $this->_parentCategoryId;
    }

    /**
     * 親カテゴリIDを設定
     *
     * @param     string $value category sequence id
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException   It is not number.
     */
    public function setParentCategoryId($value)
    {
        $this->isInputNumber($value);

        $this->_parentCategoryId = $value;
    }

    /**
     * システム利用フラグを取得
     *
     * @return    boolean       TRUE : Applications that use the system     FALSE : Applications that use USER
     */
    public function isSystemUse()
    {
        return $this->_isSystemUse;
    }

    /**
     * システム利用フラグを設定(Users can not be maintained.)
     *
     * @param     boolean       TRUE : Applications that use the system     FALSE : Applications that use USER
     */
    public function setSystemUse($value)
    {
        $this->_isSystemUse = $value;
    }

    /**
     * 表示順の取得
     *
     * @return    string        Number of members
     */
    public function getDisplayOrder()
    {
        return $this->_displayOrder;
    }

    /**
     * 表示順を設定
     *
     * @param     string       Number of members
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not number.
     */
    public function setDisplayOrder($value)
    {
        $this->isInputNumber($value);

        $this->_displayOrder = $value;
    }

    /**
     * 子カテゴリ数の取得
     *
     * @return    string        Number of members
     */
    public function countChildlen()
    {
        return $this->_countChildlen;
    }

    /**
     * 子カテゴリ数を設定
     *
     * @param     string       Number of members
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not number.
     */
    public function setCountChildlen($value)
    {
        $this->isInputNumber($value);

        $this->_countChildlen = $value;
    }

    /**
     * 通知フラグを取得
     *
     * @return    boolean       TRUE : notification      FALSE : non notification
     */
    public function isNotification()
    {
        return $this->_isNotification;
    }

    /**
     * 通知フラグを設定
     *
     * @param     boolean       TRUE : notification      FALSE : non notification
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not boolean.
     */
    public function setNotification($value)
    {
        $this->isInputBoolean($value);

        $this->_isNotification = $value;
    }

    /**
     * 検査の実行(オーバーライド)
     * Performing Validation is override
     *
     * @param     int $validType VALID_TYPE_CREATE, VALID_TYPE_MODIFY, VALID_TYPE_SELECT
     *
     * @return    boolean       TRUE : valid   FALSE: Invalid
     */
    protected function checkValidate($validType)
    {
        if (parent::checkValidate($validType) === false) {
            return false;
        }

        switch ($validType) {
            case self::VALID_TYPE_CREATE:
            case self::VALID_TYPE_MODIFY:
                if (ValidateUtility::isNull($this->getCategoryCode())) {
                    return false;
                }
                if (ValidateUtility::isNull($this->getCategoryName())) {
                    return false;
                }
                break;
        }

        return true;
    }
}

