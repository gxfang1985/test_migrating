<?php

namespace grn\space\common\data\bean;

use grn\space\common\data\ValidatableInterface;
use grn\space\common\exception\GrnRequiredDataIsNotException;
use grn\space\common\utility\ValidateUtility;
use grn\space\common\exception\GrnInvalidArgumentException;

/**
 * BeanAbstractクラス
 * あるひとつのデータを表現するクラス
 */
abstract class BeanAbstract implements ValidatableInterface
{
    const CHECK_INPUT = true;

    const NOT_CHECK_INPUT = false;

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const ID = "_id";

    /**
     * シーケンスIDの値を保持する
     */
    private $_id;

    /**
     * @var boolean
     */
    private $_isInputCheck;

    /**
     * コンストラクタ
     * オブジェクト配列を引数で受け取った場合は、受け取った配列でオブジェクトを初期化する
     * 引数がnullの場合は各データクラスのデフォルト値で初期化する
     *
     * @param     array $dataArray initial data
     * @param     bool  $isInputCheck
     */
    public function __construct(
        array $dataArray = null,
        $isInputCheck = self::CHECK_INPUT
    ) {
        if (is_null($dataArray) || ( ! isset($dataArray[self::ID]))) {
            $this->setId(null);
        } else {
            $this->setId($dataArray[self::ID]);
        }

        $this->setInputCheck($isInputCheck);
    }

    /**
     * @param bool $isInputCheck
     */
    private function setInputCheck($isInputCheck)
    {
        $this->_isInputCheck = $isInputCheck;
    }

    /**
     * @return bool
     */
    private function isInputCheck()
    {
        return $this->_isInputCheck;
    }

    /**
     * @param int  $value
     * @param bool $isEnableEmpty
     * @param bool $isThrow
     *
     * @return bool
     * @throws GrnInvalidArgumentException
     */
    protected function isInputNumber(
        $value,
        $isEnableEmpty = ValidateUtility::ENABLE_EMPTY,
        $isThrow = ValidateUtility::EXCEPTION_THROW
    ) {
        if ($this->isInputCheck()) {
            return ValidateUtility::isNumber($value, $isEnableEmpty, $isThrow);
        }

        return true;
    }

    /**
     * @param bool $value
     * @param bool $isEnableEmpty
     * @param bool $isThrow
     *
     * @return bool
     * @throws GrnInvalidArgumentException
     */
    protected function isInputBoolean(
        $value,
        $isEnableEmpty = ValidateUtility::ENABLE_EMPTY,
        $isThrow = ValidateUtility::EXCEPTION_THROW
    ) {
        if ($this->isInputCheck()) {
            return ValidateUtility::isBoolean($value, $isEnableEmpty, $isThrow);
        }

        return true;
    }

    /**
     * @param bool $value
     * @param bool $isEnableEmpty
     * @param bool $isThrow
     *
     * @return bool
     * @throws GrnInvalidArgumentException
     */
    protected function isInputLanguageCode(
        $value,
        $isEnableEmpty = ValidateUtility::ENABLE_EMPTY,
        $isThrow = ValidateUtility::EXCEPTION_THROW
    ) {
        if ($this->isInputCheck()) {
            return ValidateUtility::isLanguageCode($value, $isEnableEmpty,
                $isThrow);
        }

        return true;
    }

    /**
     * 検査する（オーバーライド）
     * Validity check is override
     *
     * @param     int     $validType VALID_TYPE_CREATE, VALID_TYPE_MODIFY, VALID_TYPE_SELECT
     * @param     boolean $isThrow   EXCEPTION_THROW:exception throw   EXCEPTION_NOT_THROW:exception not throw
     *
     * @throws    \grn\space\common\exception\GrnArgumentOutOfRangeException        validType is out of range.
     * @throws    GrnRequiredDataIsNotException         Do not have the required data.
     * @return    boolean       TRUE : $value is internal application   if isThrow = EXCEPTION_NOT_THROW then FALSE: external applicaton
     */
    public function isValidData($validType, $isThrow = self::EXCEPTION_THROW)
    {
        \grn\space\common\utility\ValidateUtility::isInTheRange($validType,
            self::VALID_TYPE_SELECT, self::VALID_TYPE_MODIFY);

        if ($this->checkValidate($validType)) {
            return true;
        }

        if ($isThrow) {
            throw new GrnRequiredDataIsNotException();
        } else {
            return false;
        }
    }

    /**
     * 検査の実行
     * Performing Validation
     *
     * @param     int $validType VALID_TYPE_CREATE, VALID_TYPE_MODIFY, VALID_TYPE_SELECT
     *
     * @return    boolean       TRUE : valid   FALSE: Invalid
     */
    protected function checkValidate($validType)
    {
        if ($validType == BeanAbstract::VALID_TYPE_MODIFY) {
            if (is_null($this->getId())) {
                return false;
            }
        }

        return true;
    }


    /**
     * オプジェクトデータを配列に変換する
     * 配列のキーはconst定数を使用
     *
     * @return    array         key:constant value:string or boolean or number
     */
    public function convertArray()
    {
        $result = [];

        $result[self::ID] = $this->getId();

        return $result;
    }

    /**
     * オブジェクトシーケンスIDを取得
     *
     * @return    string        sequence id
     */
    public function getId()
    {
        return $this->_id;
    }

    /**
     * オブジェクトシーケンスIDを設定
     *
     * @param     string $value sequence id
     *
     * @throws    GrnInvalidArgumentException    It is not number.
     */
    public function setId($value)
    {
        $this->isInputNumber($value);

        $this->_id = $value;
    }

    /**
     * check whether bean is equal.
     *
     * @param   BeanAbstract $bean
     *
     * @return  boolean
     * @throws  GrnInvalidArgumentException      bean is differnt class
     */
    public function equalRecord(BeanAbstract $bean)
    {
        if ( ! ($bean instanceof static)) {
            $e = new GrnInvalidArgumentException();
            throw $e;
        }

        return ($this->getId() === $bean->getId()) ? true : false;
    }
}

