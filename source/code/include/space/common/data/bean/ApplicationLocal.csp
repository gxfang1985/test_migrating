<?php

namespace grn\space\common\data\bean;

use grn\space\common\data\bean\LanguageStatus;
use grn\space\common\utility\ValidateUtility;

/**
 * Multilingual data for a Application
 *
 **/
class ApplicationLocal extends LanguageStatus
{


    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const APPLICATION_ID = "col_application";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const APPLICATION_NAME = "col_application_name";


    /**
     * Application ID
     */
    private $_applicationId;


    /**
     * Application name
     */
    private $_applicationName;


    /**
     * コンストラクタ
     * オブジェクト配列を引数で受け取った場合は、受け取った配列でオブジェクトを初期化する
     * 引数がnullの場合は各データクラスのデフォルト値で初期化する
     *
     * @param     array $dataArray initial data
     * @param     bool  $isInputCheck
     */
    public function __construct(
        array $dataArray = null,
        $isInputCheck = self::CHECK_INPUT
    ) {
        parent::__construct($dataArray, $isInputCheck);

        if (is_null($dataArray)) {
            $this->setApplicationId('');
            $this->setApplicationName('');
        } else {
            $this->setApplicationId((array_key_exists(self::APPLICATION_ID,
                $dataArray)) ? $dataArray[self::APPLICATION_ID] : '');
            $this->setApplicationName((array_key_exists(self::APPLICATION_NAME,
                $dataArray)) ? $dataArray[self::APPLICATION_NAME] : '');
        }
    }

    /**
     * オプジェクトデータを配列に変換する
     * 配列のキーはconst定数を使用
     *
     * @return    array         key:constant value:string or boolean or number
     */
    public function convertArray()
    {
        $result = parent::convertArray();

        $result[self::APPLICATION_ID] = $this->getApplicationId();
        $result[self::APPLICATION_NAME] = $this->getApplicationName();

        return $result;
    }

    /**
     * カテゴリIDを取得
     *
     * @return    string        category id
     */
    public function getApplicationId()
    {
        return $this->_applicationId;
    }

    /**
     * カテゴリIDを設定
     *
     * @param     string $value category id
     */
    public function setApplicationId($value)
    {
        $this->isInputNumber($value);
        $this->_applicationId = $value;
    }


    /**
     * カテゴリ多言語名を取得
     *
     * @return    string        language code
     */
    public function getApplicationName()
    {
        return $this->_applicationName;
    }

    /**
     * カテゴリ多言語名を設定
     *
     * @param     string $value language code
     */
    public function setApplicationName($value)
    {
        $this->_applicationName = $value;
    }


    /**
     * 検査の実行(オーバーライド)
     * Performing Validation is override
     *
     * @param     int $validType VALID_TYPE_CREATE, VALID_TYPE_MODIFY, VALID_TYPE_SELECT
     *
     * @return    boolean       TRUE : valid   FALSE: Invalid
     */
    protected function checkValidate($validType)
    {
        if (parent::checkValidate($validType) === false) {
            return false;
        }

        switch ($validType) {
            case self::VALID_TYPE_CREATE:
            case self::VALID_TYPE_MODIFY:
                if (ValidateUtility::isNull($this->getApplicationName())) {
                    return false;
                }
                break;
        }

        return true;
    }
}

