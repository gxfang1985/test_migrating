<?php

namespace grn\space\common\data\bean;

use grn\grn\MemberLogic;
use grn\grn\GrnException;
use grn\space\common\data\bean\BeanAbstract;
use grn\space\common\utility\ValidateUtility;

/**
 * SpaceMemberクラス
 * ひとつのSpaceMemberを表すデータクラス
 */
class SpaceMember extends BeanAbstract
{
    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const DISPLAY_NAME = "displayName";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const USER_NAME = "col_display_name";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const NICKNAME = "col_nickname";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const DISPLAY_NAME_LANGUAGE = "col_display_name_language";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const IS_DELETED = "col_deleted";

    const SLASH_ID = "col_slash";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const MEMBER_ID = "member_id";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const MEMBER_TYPE = "member_type";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const PRIMARY_GROUP_ID = "primaryGroupId";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const PRIMARY_GROUP_NAME = "primaryGroupName";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const FOREIGN_KEY = "col_foreign_key";

    /**
     * @var string
     */
    private $_uniqueId;

    /**
     * 画面に表示する名称
     */
    private $_displayName;

    /**
     * ユーザー名
     */
    private $_userName;

    /**
     * 英語名
     */
    private $_nickname;

    /**
     * ユーザー名に入力した文字の言語
     */
    private $_displayNameLanguage;

    /**
     * 削除フラグ
     */
    private $_isDeleted;

    /** Space Member ID **/
    private $_member_id;

    /** Space Member Type **/
    private $_member_type;

    /**
     * 優先組織ID
     */
    private $_primaryGroupId;

    /**
     * 優先組織名
     */
    private $_primaryGroupName;

    /** Slash ID **/
    private $_slash;


    private $_foreign_key;

    /**
     * Is invalid user
     */
    private $_isInvalidUser;

    /**
     * Is not using app user
     */
    private $_isNotUsingApp;

    /**
     * Is login user
     */
    private $_isLoginUser;

    /**
     * コンストラクタ
     * オブジェクト配列を引数で受け取った場合は、受け取った配列でオブジェクトを初期化する
     * 引数がnullの場合は各データクラスのデフォルト値で初期化する
     *
     * @param     array $dataArray initial data
     * @param bool      $isCheckInput
     */
    public function __construct(
        array $dataArray = null,
        $isCheckInput = self::CHECK_INPUT
    ) {
        parent::__construct($dataArray, $isCheckInput);

        if (is_null($dataArray)) {
            $this->setDisplayName('');
            $this->setUserName('');
            $this->setNickname('');
            $this->setDisplayNameLanguage('');
            $this->setDeleted(false);
            $this->setMemberID('');
            $this->setMemberType(MemberLogic::TYPE_USER);
            $this->setPrimaryGroupId('');
            $this->setPrimaryGroupName('');
            $this->setSlashID('');
            $this->setForeignKey('');
            $this->setIsInvalidUser(false);
            $this->setIsNotUsingApp(false);
            $this->setIsLoginUser(false);
        } else {
            $this->setDisplayName((array_key_exists(self::DISPLAY_NAME,
                $dataArray)) ? $dataArray[self::DISPLAY_NAME] : '');
            $this->setUserName((array_key_exists(self::USER_NAME, $dataArray))
                ? $dataArray[self::USER_NAME] : '');
            $this->setNickname((array_key_exists(self::NICKNAME, $dataArray))
                ? $dataArray[self::NICKNAME] : '');
            $this->setDisplayNameLanguage((array_key_exists(self::DISPLAY_NAME_LANGUAGE,
                $dataArray)) ? $dataArray[self::DISPLAY_NAME_LANGUAGE] : '');
            $this->setDeleted((array_key_exists(self::IS_DELETED, $dataArray))
                ? (($dataArray[self::IS_DELETED] === null
                    || $dataArray[self::IS_DELETED] == '') ? false : true)
                : false);
            $this->setMemberID(cb_at($dataArray, self::MEMBER_ID, ''));
            $this->setMemberType(cb_at($dataArray, self::MEMBER_TYPE,
                MemberLogic::TYPE_USER));
            $this->setPrimaryGroupId((array_key_exists(self::PRIMARY_GROUP_ID,
                $dataArray)) ? $dataArray[self::PRIMARY_GROUP_ID] : '');
            $this->setPrimaryGroupName((array_key_exists(self::PRIMARY_GROUP_NAME,
                $dataArray)) ? $dataArray[self::PRIMARY_GROUP_NAME] : '');
            $this->setSlashID(array_key_exists(self::SLASH_ID, $dataArray)
                ? $dataArray[self::SLASH_ID] : '');
            $this->setForeignKey(array_key_exists(self::FOREIGN_KEY, $dataArray)
                ? $dataArray[self::FOREIGN_KEY] : '');
            $this->setIsInvalidUser(cb_at($dataArray,
                MemberLogic::IS_INVALID_USER, false));
            $this->setIsNotUsingApp(cb_at($dataArray,
                MemberLogic::IS_NOT_USING_APP, false));
            $this->setIsLoginUser(cb_at($dataArray, MemberLogic::IS_LOGIN_USER,
                false));
        }
    }

    /**
     * オプジェクトデータを配列に変換する
     * 配列のキーはconst定数を使用
     *
     * @return    array         key:constant value:string or boolean or number
     */
    public function convertArray()
    {
        $result = parent::convertArray();

        $result[self::DISPLAY_NAME] = $this->getDisplayName();
        $result[self::USER_NAME] = $this->getUserName();
        $result[self::NICKNAME] = $this->getNickname();
        $result[self::DISPLAY_NAME_LANGUAGE] = $this->getDisplayNameLanguage();
        $result[self::IS_DELETED] = $this->isDeleted();
        $result[self::MEMBER_ID] = $this->getMemberID();
        $result[self::MEMBER_TYPE] = $this->getMemberType();
        $result[self::PRIMARY_GROUP_ID] = $this->getPrimaryGroupId();
        $result[self::PRIMARY_GROUP_NAME] = $this->getPrimaryGroupName();
        $result[self::SLASH_ID] = $this->getSlashID();
        $result[self::FOREIGN_KEY] = $this->getForeignKey();

        return $result;
    }

    public function getDisplayMemberArray()
    {
        $result = [];
        $result[MemberLogic::MEMBER_ID] = $this->getMemberID();
        $result[MemberLogic::MEMBER_TYPE] = $this->getMemberType();
        $result[MemberLogic::FOREIGN_KEY] = $this->getForeignKey();
        $result[MemberLogic::DISPLAY_NAME] = $this->getDisplayName();
        $result[MemberLogic::IS_INVALID_USER] = $this->isInvalidUser();
        $result[MemberLogic::IS_NOT_USING_APP] = $this->isNotUsingApp();
        $result[MemberLogic::IS_LOGIN_USER] = $this->isLoginUser();

        return $result;
    }

    /**
     * @return string
     */
    public function getUniqueId()
    {
        return $this->_uniqueId;
    }

    /**
     * @param $value
     */
    public function setUniqueId($value)
    {
        $this->_uniqueId = $value;
    }

    /**
     * 表示ユーザー名を取得
     *
     * @return    string        display user name
     */
    public function getDisplayName()
    {
        return $this->_displayName;
    }

    /**
     * 表示ユーザー名を設定
     *
     * @param     string $value display user name
     */
    public function setDisplayName($value)
    {
        $this->_displayName = $value;
    }

    /**
     * ユーザー名を取得
     *
     * @return    string        user name
     */
    public function getUserName()
    {
        return $this->_userName;
    }

    /**
     * ユーザー名を設定
     *
     * @param     string $value user name
     */
    public function setUserName($value)
    {
        $this->_userName = $value;
    }

    /**
     * 英語ユーザー名を取得
     *
     * @return    string        nickname
     */
    public function getNickname()
    {
        return $this->_nickname;
    }

    /**
     * 英語ユーザー名を設定
     *
     * @param     string $value nickname
     */
    public function setNickname($value)
    {
        $this->_nickname = $value;
    }

    /**
     * 表示ユーザ名の言語を取得
     *
     * @return    string        displayNameLanguage
     */
    public function getDisplayNameLanguage()
    {
        return $this->_displayNameLanguage;
    }

    /**
     * 表示ユーザ名の言語を設定
     *
     * @param     string $value displayNameLanguage
     */
    public function setDisplayNameLanguage($value)
    {
        $this->_displayNameLanguage = $value;
    }

    /**
     * 削除フラグを取得
     *
     * @return    boolean       TRUE : Delete    FALSE : Exist
     */
    public function isDeleted()
    {
        return $this->_isDeleted;
    }

    /**
     * 削除フラグを設定
     *
     * @param     boolean       TRUE : Delete    FALSE : Exist
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not boolean.
     */
    public function setDeleted($value)
    {
        $this->isInputBoolean($value);

        $this->_isDeleted = $value;
    }

    /**
     * スペースメンバーを取得
     *
     * @param string $value (UserID | GroupID | RoleID)
     */
    public function setMemberID($value)
    {
        $this->_member_id = $value;
    }

    /**
     * @return string (UserID | GroupID | RoleID)
     */
    public function getMemberID()
    {
        return $this->_member_id;
    }

    /**
     * @param string $value (user | group | role)
     */
    public function setMemberType($value)
    {
        $this->_member_type = $value;
    }

    /**
     * @return string (user | group | role)
     */
    public function getMemberType()
    {
        return $this->_member_type;
    }

    /**
     * 優先組織IDを取得
     *
     * @return    string        primary group sequence id
     */
    public function getPrimaryGroupId()
    {
        return $this->_primaryGroupId;
    }

    /**
     * 優先組織IDを設定
     *
     * @param     string $value primary group sequence id
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not number.
     */
    public function setPrimaryGroupId($value)
    {
        $this->isInputNumber($value);

        $this->_primaryGroupId = $value;
    }

    /**
     * 優先組織名を取得
     *
     * @return    string        primary group name
     */
    public function getPrimaryGroupName()
    {
        return $this->_primaryGroupName;
    }

    /**
     * 優先組織名を設定
     *
     * @param     string $value primary group name
     */
    public function setPrimaryGroupName($value)
    {
        $this->_primaryGroupName = $value;
    }

    /**
     * @param $value
     */
    protected function setSlashID($value)
    {
        $this->isInputNumber($value);
        $this->_slash = $value;
    }

    /**
     * @return mixed
     */
    public function getSlashID()
    {
        return $this->_slash;
    }

    /**
     * 検査の実行(オーバーライド)
     * Performing Validation is override
     *
     * @param     int $validType VALID_TYPE_CREATE, VALID_TYPE_MODIFY, VALID_TYPE_SELECT
     *
     * @return    boolean       TRUE : valid   FALSE: Invalid
     */
    protected function checkValidate($validType)
    {
        if ($validType == BeanAbstract::VALID_TYPE_MODIFY) {
            if (is_null($this->getMemberID())
                || is_null($this->getMemberType())
            ) {
                return false;
            }
        }

        return true;
    }

    /**
     * 外部キー（ログインキー）を取得する
     */
    public function getForeignKey()
    {
        return $this->_foreign_key;
    }
    /**
     * 外部キー（ログインキー）をセットする
     */
    /**
     * @param $key
     */
    public function setForeignKey($key)
    {
        $this->_foreign_key = $key;
    }

    /**
     * @param bool $value
     */
    public function setIsInvalidUser($value)
    {
        $this->_isInvalidUser = $value;
    }

    /**
     * @return bool
     */
    public function isInvalidUser()
    {
        return $this->_isInvalidUser;
    }

    /**
     * @param bool $value
     */
    public function setIsNotUsingApp($value)
    {
        $this->_isNotUsingApp = $value;
    }

    /**
     * @return bool
     */
    public function isNotUsingApp()
    {
        return $this->_isNotUsingApp;
    }

    /**
     * @param bool $value
     */
    public function setIsLoginUser($value)
    {
        $this->_isLoginUser = $value;
    }

    /**
     * @return bool
     */
    public function isLoginUser()
    {
        return $this->_isLoginUser;
    }

    /**
     * check whether bean is equal.
     *
     * @return  boolean
     * @throws  GrnInvalidArgumentEception      bean is differnt class
     */
    public function equalRecord(BeanAbstract $bean)
    {
        if ( ! ($bean instanceof static)) {
            $e = new GrnInvalidArgumentException();
            throw $e;
        }

        if ($this->getMemberID() == $bean->getMemberID()
            && $this->getMemberType() == $bean->getMemberType()
        ) {
            return true;
        }

        return false;
    }

    /**
     * @return bool
     */
    public function isTypeEqualsUser()
    {
        return $this->isTypeEquals(MemberLogic::TYPE_USER);
    }

    /**
     * @return bool
     */
    public function isTypeEqualsOrganization()
    {
        return $this->isTypeEquals(MemberLogic::TYPE_ORGANIZATION);
    }

    /**
     * @return bool
     */
    public function isTypeEqualsRole()
    {
        return $this->isTypeEquals(MemberLogic::TYPE_STATIC_ROLE);
    }

    /**
     * @param $type
     *
     * @return bool
     */
    private function isTypeEquals($type)
    {
        return $this->getMemberType() === $type;
    }

    /**
     * @param $user_id
     *
     * @return bool
     */
    public function isEqualUser($user_id)
    {
        if ( ! $this->isTypeEqualsUser()) {
            return false;
        }

        return $user_id == $this->getMemberID();
    }

}
