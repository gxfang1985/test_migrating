<?php

namespace grn\space\common\data\bean;

require_once('space/common/data/bean/BeanAbstract.csp');
require_once('space/common/utility/ValidateUtility.csp');

/**
 * SpaceDatetimeクラス
 * ひとつの日時を表すデータクラス
 */
class SpaceDatetime extends BeanAbstract
{
    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const TIMESTAMP = "timestamp";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const DISPLAY_DATETIME = "displayDatetime";


    /**
     * タイムスタンプ
     */
    private $_timestamp;

    /**
     * 画面に表示する日時
     */
    private $_displayDatetime;


    /**
     * コンストラクタ
     * オブジェクト配列を引数で受け取った場合は、受け取った配列でオブジェクトを初期化する
     * 引数がnullの場合は各データクラスのデフォルト値で初期化する
     *
     * @param     array $dataArray initial data
     * @param     bool  $isInputCheck
     */
    public function __construct(
        array $dataArray = null,
        $isInputCheck = self::CHECK_INPUT
    ) {
        parent::__construct($dataArray, $isInputCheck);

        if (is_null($dataArray)) {
            $this->setTimestamp('');
            $this->setDisplayDatetime('');
        } else {
            $this->setTimestamp((array_key_exists(self::TIMESTAMP, $dataArray))
                ? $dataArray[self::TIMESTAMP] : '');
            $this->setDisplayDatetime((array_key_exists(self::DISPLAY_DATETIME,
                $dataArray)) ? $dataArray[self::DISPLAY_DATETIME] : '');
        }
    }


    /**
     * オプジェクトデータを配列に変換する
     * 配列のキーはconst定数を使用
     *
     * @return    array         key:constant value:string or boolean or number
     */
    public function convertArray()
    {
        $result = parent::convertArray();

        $result[self::TIMESTAMP] = $this->getTimestamp();
        $result[self::DISPLAY_DATETIME] = $this->getDisplayDatetime();

        return $result;
    }

    /**
     * タイムスタンプを取得
     *
     * @return    string        timestamp
     */
    public function getTimestamp()
    {
        return $this->_timestamp;
    }

    /**
     * タイムスタンプを設定
     *
     * @param     string $value timestamp
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not number.
     */
    public function setTimestamp($value)
    {
        $this->isInputNumber($value);

        $this->_timestamp = $value;
    }

    /**
     * 画面に表示する日時を取得
     *
     * @return    string        display datetime
     */
    public function getDisplayDatetime()
    {
        return $this->_displayDatetime;
    }

    /**
     * 画面に表示する日時を設定
     *
     * @param     string $value display datetime
     */
    public function setDisplayDatetime($value)
    {
        $this->_displayDatetime = $value;
    }


    /**
     * 検査の実行(オーバーライド)
     * Performing Validation is override
     *
     * @param     int $validType VALID_TYPE_CREATE, VALID_TYPE_MODIFY, VALID_TYPE_SELECT
     *
     * @return    boolean       TRUE : valid   FALSE: Invalid
     */
    protected function checkValidate($validType)
    {

    }

}

