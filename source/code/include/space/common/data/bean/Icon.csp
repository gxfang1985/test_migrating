<?php

namespace grn\space\common\data\bean;

require_once('space/common/data/bean/BeanAbstract.csp');

use grn\space\common\data\bean\BeanAbstract;

/**
 * アイコンクラス
 * ひとつのアイコンを表すデータクラス
 */
class Icon extends BeanAbstract
{

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const ICON_CODE = "col_code";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const ICON_NAME = "col_name";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const ICON_FILE_NAME = "col_file_name";


    /**
     * アイコンコードの値を保持する
     */
    private $_iconCode;

    /**
     * アイコン名の値を保持する
     */
    private $_iconName;

    /**
     * アイコンファイル名の値を保持する
     */
    private $_iconFileName;

    /**
     * Absolute path of this icon. User can access this path from browser.
     *
     * @var string
     */
    private $_displayIconPath;

    /**
     * コンストラクタ
     * オブジェクト配列を引数で受け取った場合は、受け取った配列でオブジェクトを初期化する
     * 引数がnullの場合は各データクラスのデフォルト値で初期化する
     *
     * @param     array $dataArray initial data
     * @param     bool  $isInputCheck
     */
    public function __construct(
        array $dataArray = null,
        $isInputCheck = self::CHECK_INPUT
    ) {
        parent::__construct($dataArray, $isInputCheck);

        if (is_null($dataArray)) {
            $this->setIconCode('');
            $this->setIconName('');
            $this->setIconFileName('');
        } else {
            $this->setIconCode((array_key_exists(self::ICON_CODE, $dataArray))
                ? $dataArray[self::ICON_CODE] : '');
            $this->setIconName((array_key_exists(self::ICON_NAME, $dataArray))
                ? $dataArray[self::ICON_NAME] : '');
            $this->setIconFileName((array_key_exists(self::ICON_FILE_NAME,
                $dataArray)) ? $dataArray[self::ICON_FILE_NAME] : '');
        }
    }

    /**
     * オプジェクトデータを配列に変換する
     * 配列のキーはconst定数を使用
     *
     * @return    array         key:constant value:string or boolean or number
     */
    public function convertArray()
    {
        $result = parent::convertArray();

        $result[self::ICON_CODE] = $this->getIconCode();
        $result[self::ICON_NAME] = $this->getIconName();
        $result[self::ICON_FILE_NAME] = $this->getIconFileName();

        return $result;
    }

    /**
     * アイコンコードを取得
     *
     * @return    string        icon code
     */
    public function getIconCode()
    {
        return $this->_iconCode;
    }

    /**
     * アイコンコードを設定
     *
     * @param     string $value icon code
     */
    public function setIconCode($value)
    {
        $this->_iconCode = $value;
    }

    /**
     * アイコン名を取得
     *
     * @return    string        icon name
     */
    public function getIconName()
    {
        return $this->_iconName;
    }

    /**
     * アイコン名を設定
     *
     * @param     string $value icon name
     */
    public function setIconName($value)
    {
        $this->_iconName = $value;
    }

    /**
     * アイコンファイル名を取得
     *
     * @return    string        icon file name
     */
    public function getIconFileName()
    {
        return $this->_iconFileName;
    }

    /**
     * アイコンファイル名を設定
     *
     * @param     string $value icon file name
     */
    public function setIconFileName($value)
    {
        $this->_iconFileName = $value;
    }

    /**
     * Set absolute path of this icon. User can access this path from browser.
     *
     * @param string $displayIconPath
     */
    public function setDisplayIconPath($displayIconPath)
    {
        $this->_displayIconPath = $displayIconPath;
    }

    /**
     * Get absolute path of this icon. User can access this path from browser.
     *
     * @return string
     */
    public function getDisplayIconPath()
    {
        return $this->_displayIconPath;
    }

    /**
     * 検査の実行(オーバーライド)
     * Performing Validation is override
     *
     * @param     int $validType VALID_TYPE_CREATE, VALID_TYPE_MODIFY, VALID_TYPE_SELECT
     *
     * @return    boolean       TRUE : valid   FALSE: Invalid
     */
    protected function checkValidate($validType)
    {

    }

}

