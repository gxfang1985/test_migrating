<?php

namespace grn\space\common\data\bean;

require_once('space/common/data/bean/BeanAbstract.csp');

use grn\space\common\data\bean\BeanAbstract;

/**
 * DatetimeFormatクラス
 * ひとつの日時フォーマットを表すデータクラス
 */
class DatetimeFormat extends BeanAbstract
{
    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const LOMG_DATE_FORMAT = "longDateFormat";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const SHORT_DATE_FORMAT = "shortDateFormat";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const TIME_FORMAT = "timeFormat";


    /**
     * 長い日付フォーマット
     */
    private $_longDateFormat;

    /**
     * 短い日付フォーマット
     */
    private $_shortDateFormat;

    /**
     * 時分フォーマット
     */
    private $_timeFormat;


    /**
     * コンストラクタ
     * オブジェクト配列を引数で受け取った場合は、受け取った配列でオブジェクトを初期化する
     * 引数がnullの場合は各データクラスのデフォルト値で初期化する
     *
     * @param     array $dataArray initial data
     * @param     bool  $isInputCheck
     */
    public function __construct(
        array $dataArray = null,
        $isInputCheck = self::CHECK_INPUT
    ) {
        parent::__construct($dataArray, $isInputCheck);

        if (is_null($dataArray)) {
            $this->setLongDateFormat('');
            $this->setShortDateFormat('');
            $this->setTimeFormat('');
        } else {
            $this->setLongDateFormat((array_key_exists(self::LOMG_DATE_FORMAT,
                $dataArray)) ? $dataArray[self::LOMG_DATE_FORMAT] : '');
            $this->setShortDateFormat((array_key_exists(self::SHORT_DATE_FORMAT,
                $dataArray)) ? $dataArray[self::SHORT_DATE_FORMAT] : '');
            $this->setTimeFormat((array_key_exists(self::TIME_FORMAT,
                $dataArray)) ? $dataArray[self::TIME_FORMAT] : '');
        }
    }


    /**
     * オプジェクトデータを配列に変換する
     * 配列のキーはconst定数を使用
     *
     * @return    array         key:constant value:string or boolean or number
     */
    public function convertArray()
    {
        $result = parent::convertArray();

        $result[self::LOMG_DATE_FORMAT] = $this->getLongDateFormat();
        $result[self::SHORT_DATE_FORMAT] = $this->getShortDateFormat();
        $result[self::TIME_FORMAT] = $this->getTimeFormat();

        return $result;
    }

    /**
     * 長い日付フォーマットを取得
     *
     * @return    string        long date format
     */
    public function getLongDateFormat()
    {
        return $this->_longDateFormat;
    }

    /**
     * 長い日付フォーマットを設定
     *
     * @param     string $value long date format
     */
    public function setLongDateFormat($value)
    {
        $this->_longDateFormat = $value;
    }

    /**
     * 短い日付フォーマットを取得
     *
     * @return    string        short date format
     */
    public function getShortDateFormat()
    {
        return $this->_shortDateFormat;
    }

    /**
     * 短い日付フォーマットを設定
     *
     * @param     string $value short date format
     */
    public function setShortDateFormat($value)
    {
        $this->_shortDateFormat = $value;
    }

    /**
     * 時分フォーマットを取得
     *
     * @return    string        time format
     */
    public function getTimeFormat()
    {
        return $this->_timeFormat;
    }

    /**
     * 時分フォーマットを設定
     *
     * @param     string $value time format
     */
    public function setTimeFormat($value)
    {
        $this->_timeFormat = $value;
    }


    /**
     * 検査の実行(オーバーライド)
     * Performing Validation is override
     *
     * @param     int $validType VALID_TYPE_CREATE, VALID_TYPE_MODIFY, VALID_TYPE_SELECT
     *
     * @return    boolean       TRUE : valid   FALSE: Invalid
     */
    protected function checkValidate($validType)
    {

    }

}

