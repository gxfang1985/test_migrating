<?php

namespace grn\space\common\data\bean;

use grn\space\common\data\bean\BeanAbstract;
use grn\space\common\utility\ValidateUtility;

/**
 * アクセスコントロールリストクラス
 * ひとつのアクセスコントロールリストを表すデータクラス
 **/
class AccessControlList extends BeanAbstract
{

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const AUTHORITY_ID = "col_authority";


    /**
     * 権限Idの値を保持する
     */
    private $_authorityId;


    /**
     * コンストラクタ
     * オブジェクト配列を引数で受け取った場合は、受け取った配列でオブジェクトを初期化する
     * 引数がnullの場合は各データクラスのデフォルト値で初期化する
     *
     * @param array|null $dataArray initial data
     * @param bool       $isInputCheck
     */
    public function __construct(
        array $dataArray = null,
        $isInputCheck = self::CHECK_INPUT
    ) {
        parent::__construct($dataArray, $isInputCheck);

        if (is_null($dataArray)) {
            $this->setAuthorityId('');
        } else {
            $this->setAuthorityId((array_key_exists(self::AUTHORITY_ID,
                $dataArray)) ? $dataArray[self::AUTHORITY_ID] : '');
        }
    }

    /**
     * オプジェクトデータを配列に変換する
     * 配列のキーはconst定数を使用
     *
     * @return    array         key:constant value:string or boolean or number
     */
    public function convertArray()
    {
        $result = parent::convertArray();

        $result[self::AUTHORITY_ID] = $this->getAuthorityId();

        return $result;
    }

    /**
     * 権限IDを取得
     *
     * @return    string        authority id
     */
    public function getAuthorityId()
    {
        return $this->_authorityId;
    }

    /**
     * 権限IDを設定
     *
     * @param     string $value authority id
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not number.
     */
    public function setAuthorityId($value)
    {
        $this->isInputNumber($value);
        $this->_authorityId = $value;
    }


    /**
     * 検査の実行(オーバーライド)
     * Performing Validation is override
     *
     * @param     int $validType VALID_TYPE_CREATE, VALID_TYPE_MODIFY, VALID_TYPE_SELECT
     *
     * @return    boolean       TRUE : valid   FALSE: Invalid
     */
    protected function checkValidate($validType)
    {
        if (parent::checkValidate($validType) === false) {
            return false;
        }

        switch ($validType) {
            case self::VALID_TYPE_CREATE:
            case self::VALID_TYPE_MODIFY:
                if (ValidateUtility::isNull($this->getAuthorityId())) {
                    return false;
                }
                break;
        }

        return true;
    }

}

