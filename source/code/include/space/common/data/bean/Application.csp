<?php

namespace grn\space\common\data\bean;

use grn\space\common\data\bean\InspectionAbstract;
use grn\space\common\utility\ValidateUtility;

/**
 * アプリケーションクラス
 * ひとつのアプリケーションを表すデータクラス
 */
class Application extends InspectionAbstract
{
    /**
     * Discussion application code
     */
    const APPLICATION_CODE_DISCUSSION = "jp.co.cybozu.garoon350.discussion";

    /**
     * Todo application code
     */
    const APPLICATION_CODE_TODO = "jp.co.cybozu.garoon350.todo";


    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const APPLICATION_CODE = "col_application_code";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const APPLICATION_NAME = "col_application_name";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const IS_AVAILABLE = "col_is_available";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const APPLICATION_TYPE = "col_application_type";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const EXTERNAL_APPLICATION_ID = "col_external_application_id";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const EXTERNAL_APPLICATION_URL = "col_external_application_url";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const IS_FORCED_USE = "col_is_force";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const IS_SYSTEM_USE = "col_is_system_use";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const IS_INTERNAL_APPLICATION = "isInternalApplication";


    // Application Type
    const APPLICATION_TYPE_INTERNAL = 0;
    const APPLICATION_TYPE_EXTERNAL_KINTONE = 1;

    // This constant is used as a parameter of ApplicationSearchCondition::setSearchApplicationType,
    // not stored in the database.
    const APPLICATION_TYPE_ANY = null;

    /**
     * アプリケーションコードの値を保持する
     */
    private $_applicationCode;

    /**
     * アプリケーション名称の値を保持する
     */
    private $_applicationName;

    /**
     * 利用可能フラグの値を保持する
     */
    private $_isAvailable;

    /**
     * アプリケーションタイプの値を保持する
     */
    private $_applicationType;    //Users can not be maintained.  Default TRUE.

    /**
     * 外部アプリケーションIDの値を保持する
     */
    private $_externalApplicationId;   //When APPLICATION_TYPE is TRUE, it has the value. 

    /**
     * 強制利用フラグの値を保持する
     */
    private $_isForcedUse;              //Users can not be maintained.  Default FALSE.

    /**
     * システム利用フラグの値を保持する
     */
    private $_isSystemUse;              //Users can not be maintained.  Default FALSE.

    /**
     * URL for the iframe of this application.
     *
     * This property is only used by external applications, such as Kintone.
     *
     * @var string
     */
    private $_viewURL;

    /**
     * URL for the original page of this application.
     *
     * This property is only used by external applications, such as Kintone.
     *
     * @var string
     */
    private $_originalViewURL;

    /**
     * URL for the maintenance page of this application.
     *
     * This property is only used by external applications, such as Kintone.
     *
     * @var string
     */
    private $_maintenanceViewURL;


    /**
     * コンストラクタ
     * オブジェクト配列を引数で受け取った場合は、受け取った配列でオブジェクトを初期化する
     * 引数がnullの場合は各データクラスのデフォルト値で初期化する
     *
     * @param     array $dataArray initial data
     * @param     bool  $isInputCheck
     */
    public function __construct(
        array $dataArray = null,
        $isInputCheck = self::CHECK_INPUT
    ) {
        parent::__construct($dataArray, self::INSPECTION_INIT, $isInputCheck);

        if (is_null($dataArray)) {
            $this->setApplicationCode('');
            $this->setApplicationName('');
            $this->setAvailable(true);
            $this->setApplicationType(Application::APPLICATION_TYPE_EXTERNAL_KINTONE);
            $this->setExternalApplicationId('');
            $this->setForcedUse(false);
            $this->setSystemUse(false);
        } else {
            $this->setApplicationCode((array_key_exists(self::APPLICATION_CODE,
                $dataArray)) ? $dataArray[self::APPLICATION_CODE] : '');
            $this->setApplicationName((array_key_exists(self::APPLICATION_NAME,
                $dataArray)) ? $dataArray[self::APPLICATION_NAME] : '');
            $this->setAvailable((array_key_exists(self::IS_AVAILABLE,
                $dataArray)) ? (($dataArray[self::IS_AVAILABLE] === null
                                 || $dataArray[self::IS_AVAILABLE] == 1) ? true
                : false) : true);
            $this->setApplicationType((array_key_exists(self::APPLICATION_TYPE,
                $dataArray)) ? $dataArray[self::APPLICATION_TYPE]
                : Application::APPLICATION_TYPE_EXTERNAL_KINTONE);
            $this->setExternalApplicationId((array_key_exists(self::EXTERNAL_APPLICATION_ID,
                $dataArray)) ? $dataArray[self::EXTERNAL_APPLICATION_ID] : '');
            $this->setForcedUse((array_key_exists(self::IS_FORCED_USE,
                $dataArray)) ? (($dataArray[self::IS_FORCED_USE] === null
                                 || $dataArray[self::IS_FORCED_USE] == 0)
                ? false : true) : false);
            $this->setSystemUse((array_key_exists(self::IS_SYSTEM_USE,
                $dataArray)) ? (($dataArray[self::IS_SYSTEM_USE] === null
                                 || $dataArray[self::IS_SYSTEM_USE] == 0)
                ? false : true) : false);
        }
    }

    /**
     * オプジェクトデータを配列に変換する
     * 配列のキーはconst定数を使用
     *
     * @return    array         key:constant value:string or boolean or number
     */
    public function convertArray()
    {
        $result = parent::convertArray();

        $result[self::APPLICATION_CODE] = $this->getApplicationCode();
        $result[self::APPLICATION_NAME] = $this->getApplicationName();
        $result[self::IS_AVAILABLE] = $this->isAvailable();
        $result[self::IS_INTERNAL_APPLICATION] = $this->isInternalApplication();
        $result[self::APPLICATION_TYPE] = $this->getApplicationType();
        $result[self::EXTERNAL_APPLICATION_ID]
            = $this->getExternalApplicationId();
        $result[self::IS_FORCED_USE] = $this->isForcedUse();
        $result[self::IS_SYSTEM_USE] = $this->isSystemUse();

        return $result;
    }

    /**
     * アプリケーションコードを取得
     *
     * @return    string        application code
     */
    public function getApplicationCode()
    {
        return $this->_applicationCode;
    }

    /**
     * アプリケーションコードを設定
     *
     * @param     string $value application code
     */
    public function setApplicationCode($value)
    {
        $this->_applicationCode = $value;
    }

    /**
     * アプリケーション名を取得
     *
     * @return    string        application name
     */
    public function getApplicationName()
    {
        return $this->_applicationName;
    }

    /**
     * アプリケーション名を設定
     *
     * @param     string $value application name
     */
    public function setApplicationName($value)
    {
        $this->_applicationName = $value;
    }

    /**
     * 利用可能フラグを取得
     *
     * @return    boolean       TRUE : It is available      FALSE : It is not available
     */
    public function isAvailable()
    {
        return $this->_isAvailable;
    }

    /**
     * 利用可能フラグを設定
     *
     * @param     boolean       TRUE : It is available      FALSE : It is not available
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not boolean.
     */
    public function setAvailable($value)
    {
        $this->isInputBoolean($value);

        $this->_isAvailable = $value;
    }

    /**
     * 内部アプリケーションか？
     *
     * @return    boolean       TRUE : This is an internal application    FALSE : This is an external application
     */
    public function isInternalApplication()
    {
        return ! $this->getApplicationType()
               === self::APPLICATION_TYPE_INTERNAL;
    }

    /**
     * アプリケーションタイプを取得
     *
     * @return    boolean       TRUE : This is an external application    FALSE : This is an internal application
     */
    public function getApplicationType()
    {
        return $this->_applicationType;
    }

    /**
     * アプリケーションタイプを設定
     *
     * @param     int $value The constant has been defined in oneself.
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException       It is not constant.
     * @throws    \grn\space\common\exception\GrnArgumentOutOfRangeException    It specified it excluding the constant.
     */
    public function setApplicationType($value)
    {
        $this->isInputNumber($value, ValidateUtility::DISABLE_EMPTY);
        ValidateUtility::isInTheRange($value, self::APPLICATION_TYPE_INTERNAL,
            self::APPLICATION_TYPE_EXTERNAL_KINTONE,
            ValidateUtility::DISABLE_EMPTY);

        $this->_applicationType = $value;
    }

    /**
     * 外部アプリケーションIDの取得
     *
     * @return    string        ID for external application with
     */
    public function getExternalApplicationId()
    {
        return $this->_externalApplicationId;
    }

    /**
     * 外部アプリケーションIDを設定
     *
     * @param     string $value ID for external application with
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not number.
     */
    public function setExternalApplicationId($value)
    {
        $this->isInputNumber($value);

        $this->_externalApplicationId = $value;
    }

    /**
     * 強制利用フラグを取得
     *
     * @return    boolean       TRUE : Not available to the USER selection      FALSE : Available to the USER can choose
     */
    public function isForcedUse()
    {
        return $this->_isForcedUse;
    }

    /**
     * 強制利用フラグを設定
     *
     * @param     boolean       TRUE : Not available to the USER selection      FALSE : Available to the USER can choose
     */
    protected function setForcedUse($value)
    {
        $this->_isForcedUse = $value;
    }

    /**
     * システム利用フラグを取得
     *
     * @return    boolean       TRUE : Applications that use the system     FALSE : Applications that use USER
     */
    public function isSystemUse()
    {
        return $this->_isSystemUse;
    }

    /**
     * システム利用フラグを設定(Users can not be maintained.)
     *
     * @param     boolean       TRUE : Applications that use the system     FALSE : Applications that use USER
     */
    protected function setSystemUse($value)
    {
        $this->_isSystemUse = $value;
    }

    /**
     * Set URL for the iframe of this application.
     *
     * This property is only used by external applications, such as Kintone.
     *
     * @param string $url
     */
    public function setViewURL($url)
    {
        $this->_viewURL = $url;
    }

    /**
     * Get URL for the iframe of this application.
     *
     * This property is only used by external applications, such as Kintone.
     *
     * @return string
     */
    public function getViewURL()
    {
        return $this->_viewURL;
    }

    /**
     * Set URL for the original page of this application.
     *
     * This property is only used by external applications, such as Kintone.
     *
     * @param string $originalViewURL
     */
    public function setOriginalViewURL($originalViewURL)
    {
        $this->_originalViewURL = $originalViewURL;
    }

    /**
     * Get URL for the original page of this application.
     *
     * This property is only used by external applications, such as Kintone.
     *
     * @return string
     */
    public function getOriginalViewURL()
    {
        return $this->_originalViewURL;
    }

    /**
     * Set URL for the maintenance page of this application.
     *
     * This property is only used by external applications, such as Kintone.
     *
     * @param string $maintenanceViewURL
     */
    public function setMaintenanceViewURL($maintenanceViewURL)
    {
        $this->_maintenanceViewURL = $maintenanceViewURL;
    }

    /**
     * Get URL for the maintenance page of this application.
     *
     * This property is only used by external applications, such as Kintone.
     *
     * @return string
     */
    public function getMaintenanceViewURL()
    {
        return $this->_maintenanceViewURL;
    }

    /**
     * 検査の実行(オーバーライド)
     * Performing Validation is override
     *
     * @param     int $validType VALID_TYPE_CREATE, VALID_TYPE_MODIFY, VALID_TYPE_SELECT
     *
     * @return    boolean       TRUE : valid   FALSE: Invalid
     */
    protected function checkValidate($validType)
    {
        if ( ! parent::checkValidate($validType)) {
            return false;
        }

        switch ($validType) {
            case self::VALID_TYPE_CREATE:
                if (strlen($this->getCreatorId()) == 0) {
                    return false;
                }
                if (strlen($this->getCreatorName()) == 0) {
                    return false;
                }
                break;

            case self::VALID_TYPE_MODIFY:
                if (strlen($this->getModifierId()) == 0) {
                    return false;
                }
                if (strlen($this->getModifierName()) == 0) {
                    return false;
                }
                break;

            default:
                return false;
        }

        return true;
    }
}

