<?php

namespace grn\space\common\data\bean;

use grn\space\common\data\bean\InspectionAbstract;

/**
 * PartyInspectionAbstractクラス
 * あるひとつのデータを登録者情報、更新者情報、構成要素の更新日時付きで表現する抽象クラス
 */
abstract class ComponentInspectionAbstract extends InspectionAbstract
{
    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const COMPONENT_MODIFY_TIME = "col_component_modify_timestamp";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const COMPONENT_MODIFY_DISPLAY_DATETIME = "componentModifyDisplayDatetime";


    /**
     * 構成要素の更新日時 SpaceDatetime
     */
    private $_componentModifyDatetime;


    /**
     * コンストラクタ
     * オブジェクト配列を引数で受け取った場合は、受け取った配列でオブジェクトを初期化する
     * 引数がnullの場合は各データクラスのデフォルト値で初期化する
     *
     * @param     array $dataArray initial data
     * @param     bool  $isInspectionInit
     * @param     bool  $isInputCheck
     */
    public function __construct(
        array $dataArray = null,
        $isInspectionInit = self::INSPECTION_INIT,
        $isInputCheck = self::CHECK_INPUT
    ) {
        parent::__construct($dataArray, $isInspectionInit, $isInputCheck);

        if (is_null($dataArray)) {
            $this->setComponentModifyDatetime(new \grn\space\common\data\bean\SpaceDatetime(null,
                $isInputCheck));
        } else {
            $this->setComponentModifyDatetime(new \grn\space\common\data\bean\SpaceDatetime(null,
                $isInputCheck));
            $this->setComponentModifyTimestamp((array_key_exists(self::COMPONENT_MODIFY_TIME,
                $dataArray)) ? $dataArray[self::COMPONENT_MODIFY_TIME] : '');
        }
    }


    /**
     * オプジェクトデータを配列に変換する
     * 配列のキーはconst定数を使用
     *
     * @return    array         key:constant value:string or boolean or number
     */
    public function convertArray()
    {
        $result = parent::convertArray();

        $result[self::COMPONENT_MODIFY_TIME]
            = $this->getComponentModifyTimestamp();
        $result[self::COMPONENT_MODIFY_DISPLAY_DATETIME]
            = $this->getComponentModifyDisplayDatetime();

        return $result;
    }


    /**
     * 構成要素の更新日時を取得
     *
     * @return    \grn\space\common\data\bean\SpaceDatetime
     */
    public function getComponentModifyDatetime()
    {
        return $this->_componentModifyDatetime;
    }

    /**
     * 構成要素の更新日時を設定
     *
     * @param     \grn\space\common\data\bean\SpaceDatetime $value
     */
    public function setComponentModifyDatetime(
        \grn\space\common\data\bean\SpaceDatetime $value
    ) {
        $this->_componentModifyDatetime = $value;
    }

    /**
     * 構成要素の更新タイムスタンプを取得
     *
     * @return    string        timestamp
     */
    public function getComponentModifyTimestamp()
    {
        return $this->getComponentModifyDatetime()->getTimestamp();
    }

    /**
     * 構成要素の更新タイムスタンプを設定
     *
     * @param     string $value timestamp
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not number.
     */
    public function setComponentModifyTimestamp($value)
    {
        $this->getComponentModifyDatetime()->setTimestamp($value);
    }

    /**
     * 構成要素の更新表示日時を取得
     *
     * @return string
     */
    public function getComponentModifyDisplayDatetime()
    {
        return $this->getComponentModifyDatetime()->getDisplayDatetime();
    }


    /**
     * Performing Validation is override
     *
     * @param     int $validType VALID_TYPE_CREATE, VALID_TYPE_MODIFY, VALID_TYPE_SELECT
     *
     * @return    boolean       TRUE : valid   FALSE: Invalid
     */
    protected function checkValidate($validType)
    {
        if (parent::checkValidate($validType) === false) {
            return false;
        }

        return true;
    }

}

