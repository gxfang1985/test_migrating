<?php

namespace grn\space\common\data\condition;

use grn\space\common\data\condition\BeanSearchConditionAbstract;
use grn\space\common\utility\ValidateUtility;

/**
 * アクセスコントロールリスト検索クラス
 * アクセスコントロールリストの検索条件を表すクラス
 */
class AccessControlListSearchCondition extends BeanSearchConditionAbstract
{
    /**
     * 検索するアクセスコントロールIDの配列
     */
    private $_searchAccessControlListIdArray;

    /**
     * 検索するユーザーID
     */
    private $_searchUserId;


    /**
     * コンストラクタ
     * 検索条件を初期化する
     *
     */
    public function __construct()
    {
        parent::__construct();

        $this->setSearchUserId('');
        $this->setSearchAccessControlListIdArray([]);
    }


    /**
     * 検索対象アクセスコントロールIDの配列を取得
     *
     * @return    array        acl sequence id array
     */
    public function getSearchAccessControlListIdArray()
    {
        return $this->_searchAccessControlListIdArray;
    }

    /**
     * 検索対象アクセスコントロールID配列を設定
     *
     * @param     array $value acl sequence id array
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not number.
     */
    public function setSearchAccessControlListIdArray(array $value)
    {
        $this->_searchAccessControlListIdArray = [];

        foreach ($value as $aclId) {
            $this->addSearchAccessControlListId($aclId);
        }
    }

    /**
     * 検索対象アクセスコントロールIDを追加
     *
     * @param     string $value acl sequence id
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not number.
     */
    public function addSearchAccessControlListId($value)
    {
        ValidateUtility::isNumber($value);

        $this->_searchAccessControlListIdArray[] = $value;
    }

    /**
     * 検索対象ユーザーIDを取得
     *
     * @return    string        user sequence id
     */
    public function getSearchUserId()
    {
        return $this->_searchUserId;
    }

    /**
     * 検索対象ユーザーIDを設定
     *
     * @param     string $value user sequence id
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException   It is not number.
     */
    public function setSearchUserId($value)
    {
        ValidateUtility::isNumber($value);

        $this->_searchUserId = $value;
    }


    /**
     * 検査の実行(オーバーライド)
     * Performing Validation is override
     *
     * @param     int $validType VALID_TYPE_CREATE, VALID_TYPE_MODIFY, VALID_TYPE_SELECT
     *
     * @return    boolean       TRUE : valid   FALSE: Invalid
     */
    protected function checkValidate($validType)
    {
        if (parent::checkValidate($validType) === false) {
            return false;
        }

        if ($validType === CategorySearchCondition::VALID_TYPE_SELECT) {
            if (count($this->getSearchAccessControlListIdArray()) === 0) {
                return false;
            }

            if (ValidateUtility::isNull($this->getSearchUserId())) {
                return false;
            }
        }

        return true;
    }

}

