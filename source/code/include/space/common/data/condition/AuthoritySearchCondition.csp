<?php

namespace grn\space\common\data\condition;

use grn\space\common\data\bean\Authority;
use grn\space\common\data\condition\BeanSearchConditionAbstract;
use grn\space\common\exception\GrnInvalidArgumentException;

/**
 * 権限検索クラス
 * 権限の検索条件を表すクラス
 */
class AuthoritySearchCondition extends BeanSearchConditionAbstract
{


    /**
     * 調べたい権限
     */
    private $_searchAuthrorityCode;           // Range of constant


    /**
     * コンストラクタ
     * 検索条件を初期化する
     *
     */
    public function __construct()
    {
        parent::__construct();

        $this->setSearchAuthorityCode(Authority::AUTHORITY_CODE_READ_DETAIL);
    }


    /**
     * 調べたい権限コードを取得
     *
     * @return    string        authority code
     */
    public function getSearchAuthorityCode()
    {
        return $this->_searchAuthrorityCode;
    }

    /**
     * 調べたい権限コードを設定
     *
     * @param     string $value The constant has been defined in oneself.
     *
     * @throws    GrnInvalidArgumentException      It is not constant.
     */
    public function setSearchAuthorityCode($value)
    {
        $this->checkAuthorityCode($value);

        $this->_searchAuthrorityCode = $value;
    }


    /**
     * 有効な権限コードかチェックする
     *
     * @param     string $authorityCode The constant has been defined in oneself.
     *
     * @throws    GrnInvalidArgumentException   It is not constant.
     */
    protected function checkAuthorityCode($authorityCode)
    {
        switch ($authorityCode) {
            case Authority::AUTHORITY_CODE_READ_SUMMARY :
            case Authority::AUTHORITY_CODE_READ_DETAIL:
            case Authority::AUTHORITY_CODE_WRITE :
            case Authority::AUTHORITY_CODE_SYSTEM_PRIVILEGE :
            case Authority::AUTHORITY_CODE_OPERATION_PRIVILEGE :
                return;
                break;
            default :
                throw new GrnInvalidArgumentException();
                break;
        }
    }

    /**
     * 検査の実行(オーバーライド)
     * Performing Validation is override
     *
     * @param     int $validType VALID_TYPE_CREATE, VALID_TYPE_MODIFY, VALID_TYPE_SELECT
     *
     * @return    boolean       TRUE : valid   FALSE: Invalid
     */
    protected function checkValidate($validType)
    {
        if (parent::checkValidate($validType) === false) {
            return false;
        }

        return true;
    }

}

