<?php

namespace grn\space\common\data\condition;

use grn\space\common\data\condition\InspectionSearchConditionAbstract;
use grn\space\common\utility\ValidateUtility;

/**
 * ファイル検索クラス
 * ファイルの検索条件を表すデータクラス
 */
class SpaceFileSearchCondition extends InspectionSearchConditionAbstract
{
    /**
     * スレッドのファイル
     */
    const SEARCH_SCOPE_TYPE_THREAD = 1;       //Scope value is thread Id

    /**
     * TODOのファイル
     */
    const SEARCH_SCOPE_TYPE_TODO = 2;       //Scope value is todo id

    /**
     * COMMENTのファイル
     */
    const SEARCH_SCOPE_TYPE_COMMENT = 3;       //Scope value is comment Id

    /**
     * スレッドに関連するすべてのファイル
     */
    const SEARCH_SCOPE_TYPE_THREAD_ALL = 4;       //Scope value is thread Id

    /**
     * files related to a Todo and comments on the todo
     *
     * @var integer
     */
    const SEARCH_SCOPE_TYPE_TODO_ALL = 5; //Scope value is todo ID


    /**
     * 検索範囲
     */
    private $_searchScopeType;      // Indispensability

    /**
     * 検索範囲の起点となるシーケンスID
     */
    private $_searchScopeValue;     // Indispensability

    /**
     * 作成者ID
     */
    private $_searchCreatorId;     // Optional


    /**
     * コンストラクタ
     * 検索条件を初期化する
     *
     */
    public function __construct()
    {
        parent::__construct();

        $this->setSearchScopeType(self::SEARCH_SCOPE_TYPE_THREAD);
        $this->setSearchScopeValue('');
        $this->setSearchCreatorId('');
    }


    /**
     * 検索スコープタイプの取得
     *
     * @return    int           The constant has been defined in oneself.
     */
    public function getSearchScopeType()
    {
        return $this->_searchScopeType;
    }

    /**
     * 検索スコープタイプの設定
     *
     * @param     int $value The constant has been defined in oneself.
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException       It is not constant.
     * @throws    \grn\space\common\exception\GrnArgumentOutOfRangeException    It specified it excluding the constant.
     */
    public function setSearchScopeType($value)
    {
        ValidateUtility::isNumber($value, ValidateUtility::DISABLE_EMPTY);
        ValidateUtility::isInTheRange($value, self::SEARCH_SCOPE_TYPE_THREAD,
            self::SEARCH_SCOPE_TYPE_TODO_ALL, ValidateUtility::DISABLE_EMPTY);

        $this->_searchScopeType = $value;
    }

    /**
     * 検索範囲を取得
     *
     * @return    string        search scope value
     */
    public function getSearchScopeValue()
    {
        return $this->_searchScopeValue;
    }

    /**
     * 検索範囲を設定
     *
     * @param     string $value search scope value
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException   It is not number.
     */
    public function setSearchScopeValue($value)
    {
        ValidateUtility::isNumber($value);
        $this->_searchScopeValue = $value;
    }

    /**
     * 作成者IDを取得
     *
     * @return    string        search creator id value
     */
    public function getSearchCreatorId()
    {
        return $this->_searchCreatorId;
    }

    /**
     * 作成者IDを設定
     *
     * @param     string $value search creator id value
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException   It is not number.
     */
    public function setSearchCreatorId($value)
    {
        ValidateUtility::isNumber($value);
        $this->_searchCreatorId = $value;
    }

    /**
     * 検査の実行(オーバーライド)
     * Performing Validation is override
     *
     * @param     int $validType VALID_TYPE_CREATE, VALID_TYPE_MODIFY, VALID_TYPE_SELECT
     *
     * @return    boolean       TRUE : valid   FALSE: Invalid
     */
    protected function checkValidate($validType)
    {
        if (parent::checkValidate($validType) === false) {
            return false;
        }

        if ($validType === CategorySearchCondition::VALID_TYPE_SELECT) {
            if (ValidateUtility::isNull($this->getSearchScopeValue())) {
                return false;
            }
        }

        return true;
    }


}

