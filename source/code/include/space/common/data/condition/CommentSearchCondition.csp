<?php

namespace grn\space\common\data\condition;

use grn\space\common\data\condition\InspectionSearchConditionAbstract;
use grn\space\common\utility\ValidateUtility;
use grn\space\common\exception\ErrorCode;
use grn\space\common\exception\GrnDataNotFoundException;

/**
 * コメント検索クラス
 * コメントの検索条件を表すデータクラス
 */
class CommentSearchCondition extends InspectionSearchConditionAbstract
{
    /**
     * スレッドのコメント
     */
    const SEARCH_SCOPE_TYPE_THREAD = 1;       //Scope value is thread Id

    /**
     * TODOのコメント
     */
    const SEARCH_SCOPE_TYPE_TODO = 2;       //Scope value is todo id

    /**
     * スレッドとスレッドに紐付くTODOのコメント
     */
    const SEARCH_SCOPE_TYPE_THREAD_AND_TODO = 3;       //Scope value is thread Id


    /**
     * 更新日時の昇順
     */
    const SORT_COMMENT_NO_ASC = 7;

    /**
     * 更新日時の降順
     */
    const SORT_COMMENT_NO_DESC = 8;


    /**
     * 検索範囲
     */
    private $_searchScopeType;      // Indispensability

    /**
     * 検索範囲の起点となるシーケンスID
     */
    private $_searchScopeValue;     // Indispensability

    /**
     * 検索するユーザーID
     */
    private $_searchUserId;

    /**
     * headCommentId is made the head of the retrieval result.
     * Usual Offset is disregarded.
     * 検索結果の先頭にするコメントID
     * 通常のOffsetを無視する
     */
    private $_headCommentId;

    /**
     * headCommentNo is made the head of the retrieval result.
     * Usual Offset is disregarded.
     * Making to the head makes headCommentId give priority.
     * 検索結果の先頭にするコメントNO
     * 通常のOffsetを無視する
     * どちらにも値がある場合はheadCommentIdを優先する
     */
    private $_headCommentNo;


    /**
     * コンストラクタ
     * 検索条件を初期化する
     *
     */
    public function __construct()
    {
        parent::__construct();

        //Default search condition is all comment.
        $this->setSearchScopeType(self::SEARCH_SCOPE_TYPE_THREAD);
        $this->setSearchScopeValue('');
        $this->setSearchUserId('');
        $this->setHeadCommentId('');
        $this->setHeadCommentNo('');
    }


    /**
     * 検索スコープタイプの取得
     *
     * @return    int           The constant has been defined in oneself.
     */
    public function getSearchScopeType()
    {
        return $this->_searchScopeType;
    }

    /**
     * 検索スコープタイプの設定
     *
     * @param     int $value The constant has been defined in oneself.
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException        It is not constant.
     * @throws    \grn\space\common\exception\GrnArgumentOutOfRangeException   It specified it excluding the constant.
     */
    public function setSearchScopeType($value)
    {
        ValidateUtility::isNumber($value, ValidateUtility::DISABLE_EMPTY);
        ValidateUtility::isInTheRange($value, self::SEARCH_SCOPE_TYPE_THREAD,
            self::SEARCH_SCOPE_TYPE_THREAD_AND_TODO,
            ValidateUtility::DISABLE_EMPTY);

        $this->_searchScopeType = $value;
    }

    /**
     * 検索範囲を取得
     *
     * @return    string        search scope value
     */
    public function getSearchScopeValue()
    {
        return $this->_searchScopeValue;
    }

    /**
     * 検索範囲を設定
     *
     * @param     string $value search scope value
     */
    public function setSearchScopeValue($value)
    {
        $this->_searchScopeValue = $value;
    }

    /**
     * 検索対象ユーザーIDを取得
     *
     * @return    string        user sequence id
     */
    public function getSearchUserId()
    {
        return $this->_searchUserId;
    }

    /**
     * 検索対象ユーザーIDを設定
     *
     * @param     string $value user sequence id
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException   It is not number.
     */
    public function setSearchUserId($value)
    {
        ValidateUtility::isNumber($value);

        $this->_searchUserId = $value;
    }

    /**
     * headCommentId is made the head of the retrieval result.
     * Usual Offset is disregarded.
     * 検索結果の先頭にするコメントID
     * 通常のOffsetを無視する
     *
     * @return    string        comment sequence id
     */
    public function getHeadCommentId()
    {
        return $this->_headCommentId;
    }

    /**
     * headCommentId is made the head of the retrieval result.
     * Usual Offset is disregarded.
     * 検索結果の先頭にするコメントID
     * 通常のOffsetを無視する
     *
     * @param     string $value comment sequence id
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException   It is not number.
     */
    public function setHeadCommentId($value)
    {
        ValidateUtility::isNumber($value);

        $this->_headCommentId = $value;
    }

    /**
     * headCommentNo is made the head of the retrieval result.
     * Usual Offset is disregarded.
     * Making to the head makes headCommentId give priority.
     * 検索結果の先頭にするコメントNO
     * 通常のOffsetを無視する
     * どちらにも値がある場合はheadCommentIdを優先する
     *
     * @return    string        comment no
     */
    public function getHeadCommentNo()
    {
        return $this->_headCommentNo;
    }

    /**
     * headCommentNo is made the head of the retrieval result.
     * Usual Offset is disregarded.
     * Making to the head makes headCommentId give priority.
     * 検索結果の先頭にするコメントNO
     * 通常のOffsetを無視する
     * どちらにも値がある場合はheadCommentIdを優先する
     *
     * @param     string $value     comment no
     * @param     string $errorCode error code
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException   It is not number.
     */
    public function setHeadCommentNo(
        $value,
        $errorCode = ErrorCode::GRN_UNEXPECTED_ERROR
    ) {
        if ( ! ValidateUtility::isNumber($value, ValidateUtility::ENABLE_EMPTY,
            ValidateUtility::EXCEPTION_NOT_THROW)
        ) {
            throw new GrnDataNotFoundException($errorCode);
        }

        $this->_headCommentNo = $value;
    }

    /**
     * ソート順の範囲チェック(オーバーライド)
     *
     * @param     string $value The constant has been defined in oneself.
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException      It is not constant.
     * @throws    \grn\space\common\exception\GrnArgumentOutOfRangeException   It specified it excluding the constant.
     */
    protected function checkOrderSortRange($value)
    {
        ValidateUtility::isNumber($value, ValidateUtility::DISABLE_EMPTY);
        ValidateUtility::isInTheRange($value, self::SORT_ID_ASC,
            self::SORT_COMMENT_NO_DESC, ValidateUtility::DISABLE_EMPTY);
    }


    /**
     * 検査の実行(オーバーライド)
     * Performing Validation is override
     *
     * @param     int $validType VALID_TYPE_CREATE, VALID_TYPE_MODIFY, VALID_TYPE_SELECT
     *
     * @return    boolean       TRUE : valid   FALSE: Invalid
     */
    protected function checkValidate($validType)
    {
        if (parent::checkValidate($validType) === false) {
            return false;
        }

        if ($validType === CategorySearchCondition::VALID_TYPE_SELECT) {
            if (ValidateUtility::isNull($this->getSearchScopeValue())) {
                return false;
            }

            if (ValidateUtility::isNull($this->getSearchUserId())) {
                return false;
            }
        }

        return true;
    }


}

