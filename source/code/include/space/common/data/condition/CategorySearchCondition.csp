<?php

namespace grn\space\common\data\condition;

use grn\space\common\data\condition\InspectionSearchConditionAbstract;
use grn\space\common\utility\ValidateUtility;

/**
 * カテゴリ検索クラス
 * カテゴリの検索条件を表すデータクラス
 */
class CategorySearchCondition extends InspectionSearchConditionAbstract
{
    /**
     * 検索範囲：対象カテゴリだけ
     */
    const SEARCH_SCOPE_CATEGORY_TARGET_ONLY = 1;

    /**
     * 検索範囲：祖先を含める
     */
    const SEARCH_SCOPE_CATEGORY_ANCESTOR = 2;

    /**
     * 検索範囲：子孫を含める
     */
    const SEARCH_SCOPE_CATEGORY_DESCENDANT = 3;


    /**
     * 表示順の昇順
     */
    const SORT_DISPLAY_ORDER_ASC = 7;

    /**
     * 表示順の降順
     */
    const SORT_DISPLAY_ORDER_DESC = 8;

    /**
     * 階層レベルの昇順
     */
    const SORT_HIERARCHY_LEVEL_ASC = 9;

    /**
     * 階層レベルの降順
     */
    const SORT_HIERARCHY_LEVEL_DESC = 10;

    /**
     * 範囲内すべてを検索する
     */
    const SEARCH_ITEM_NONE = 0;

    /**
     * 「カテゴリ名」で検索する
     */
    const SEARCH_ITEM_CATEGORY_NAME = 1;

    /**
     * 検索対象となるカテゴリID
     * category sequence id
     * Indispensability
     */
    private $_searchCategoryId;


    /**
     * 検索範囲
     * Indispensability
     */
    private $_searchScopeType;


    /**
     * コンストラクタ
     * 検索条件を初期化する
     *
     */
    public function __construct()
    {
        parent::__construct();

        //Default search condition is all thread.
        $this->setSearchCategoryId('');
        $this->setSearchScopeType(self::SEARCH_SCOPE_CATEGORY_TARGET_ONLY);
        $this->setSearchItemBit(self::SEARCH_ITEM_NONE);
    }

    /**
     * 検索対象カテゴリIDを取得
     *
     * @return    string        category sequence id
     */
    public function getSearchCategoryId()
    {
        return $this->_searchCategoryId;
    }

    /**
     * 検索対象カテゴリIDを設定
     *
     * @param     string $value category sequence id
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not number.
     */
    public function setSearchCategoryId($value)
    {
        ValidateUtility::isNumber($value);

        $this->_searchCategoryId = $value;
    }

    /**
     * 検索スコープタイプの取得
     *
     * @return    int           The constant has been defined in oneself.
     */
    public function getSearchScopeType()
    {
        return $this->_searchScopeType;
    }

    /**
     * 検索スコープタイプの設定
     *
     * @param     int $value The constant has been defined in oneself.
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException      It is not constant.
     * @throws    \grn\space\common\exception\GrnArgumentOutOfRangeException   It specified it excluding the constant.
     */
    public function setSearchScopeType($value)
    {
        ValidateUtility::isNumber($value, ValidateUtility::DISABLE_EMPTY);
        ValidateUtility::isInTheRange($value,
            self::SEARCH_SCOPE_CATEGORY_TARGET_ONLY,
            self::SEARCH_SCOPE_CATEGORY_DESCENDANT,
            ValidateUtility::DISABLE_EMPTY);

        $this->_searchScopeType = $value;
    }

    /**
     * 検索対象を取得
     *
     * @return    int        The constant has been defined in oneself.
     */
    public function getSearchItemBit()
    {
        return $this->_searchItemBit;
    }

    /**
     * 検索対象を設定
     *
     * @param     int $value The constant has been defined in oneself.
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException        It is not constant.
     * @throws    \grn\space\common\exception\GrnArgumentOutOfRangeException   It specified it excluding the constant.
     */
    public function setSearchItemBit($value)
    {
        ValidateUtility::isNumber($value, ValidateUtility::DISABLE_EMPTY);
        ValidateUtility::isInTheRange($value, self::SEARCH_ITEM_NONE,
            $this->getTotalSearchValue(), ValidateUtility::DISABLE_EMPTY);

        $this->_searchItemBit = $value;
    }

    /**
     * 対応可能な検索対象を値で取得
     *
     * @return    int        Total to be search values.
     */
    protected function getTotalSearchValue()
    {
        return self::SEARCH_ITEM_CATEGORY_NAME;
    }

    /**
     * ソート順の範囲チェック(オーバーライド)
     *
     * @param     string $value The constant has been defined in oneself.
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException      It is not constant.
     * @throws    \grn\space\common\exception\GrnArgumentOutOfRangeException   It specified it excluding the constant.
     */
    protected function checkOrderSortRange($value)
    {
        ValidateUtility::isNumber($value, ValidateUtility::DISABLE_EMPTY);
        ValidateUtility::isInTheRange($value, self::SORT_ID_ASC,
            self::SORT_HIERARCHY_LEVEL_DESC, ValidateUtility::DISABLE_EMPTY);
    }

    /**
     * 検査の実行(オーバーライド)
     * Performing Validation is override
     *
     * @param     int $validType VALID_TYPE_CREATE, VALID_TYPE_MODIFY, VALID_TYPE_SELECT
     *
     * @return    boolean       TRUE : valid   FALSE: Invalid
     */
    protected function checkValidate($validType)
    {
        if (parent::checkValidate($validType) === false) {
            return false;
        }

        if ($validType === CategorySearchCondition::VALID_TYPE_SELECT) {
            if (ValidateUtility::isNull($this->getSearchCategoryId())) {
                return false;
            }
        }

        return true;
    }

}

