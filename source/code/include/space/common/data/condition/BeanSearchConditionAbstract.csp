<?php

namespace grn\space\common\data\condition;


use grn\space\common\data\bean\LanguageStatus;
use grn\space\common\data\ValidatableInterface;
use grn\space\common\utility\ValidateUtility;
use grn\space\common\exception\GrnRequiredDataIsNotException;

/**
 * 検索クラス
 * 検索条件を表す抽象クラス
 */
abstract class BeanSearchConditionAbstract implements ValidatableInterface
{
    /**
     * シーケンスIDの昇順で並び替えする
     */
    const SORT_ID_ASC = 1;

    /**
     * シーケンスIDの降順で並び替えする
     */
    const SORT_ID_DESC = 2;


    /**
     * 検索する文字列の配列
     */
    private $_searchStringArray;        // Indispensability

    /**
     * 検索する文字列の大文字、小文字を区別するか？
     */
    private $_caseSensitivity;          // TRUE or FALSE

    /**
     * 検索結果の１件目から読み飛ばす件数
     */
    private $_offset;                   // 0～18446744073709551615

    /**
     * 取得する最大件数
     */
    private $_limit;                    // 0～18446744073709551615

    /**
     * ソート順配列
     *
     * @var int[]
     */
    private $_orderSortArray;           // Range of constant

    /**
     * 取得したい言語コード
     */
    private $_languageCode;


    /**
     * コンストラクタ
     * 検索条件を初期化する
     *
     */
    public function __construct()
    {
        //Default search condition is all.
        $this->setSearchStringArray([]);
        $this->setCaseSensitivity(false);
        $this->setLanguageCode(LanguageStatus::STANDARD_LANGUAGE_CODE);
        $this->setOffset('0');
        $this->setLimit('18446744073709551615');
        $this->setOrderSortArray([BeanSearchConditionAbstract::SORT_ID_ASC]);
    }

    /**
     * 検索文字列の配列を取得
     *
     * @return    array        search character string array
     */
    public function getSearchStringArray()
    {
        return $this->_searchStringArray;
    }

    /**
     * 検索文字列配列を設定
     *
     * @param     array $value search character string array
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not number.
     */
    public function setSearchStringArray(array $value)
    {
        $this->_searchStringArray = [];

        foreach ($value as $searchString) {
            $this->addSearchString($searchString);
        }
    }

    /**
     * 検索文字列を追加
     *
     * @param     string $value search character string
     */
    public function addSearchString($value)
    {
        $this->_searchStringArray[] = $value;
    }

    /**
     * 大文字小文字を区別するか？
     *
     * @return    bool        True:It distinguishes.  False:It doesn't distinguish.
     */
    public function isCaseSensitivity()
    {
        return $this->_caseSensitivity;
    }

    /**
     * 大文字小文字の区別を設定
     *
     * @param     bool $value True:It distinguishes.  False:It doesn't distinguish.
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not boolean.
     */
    public function setCaseSensitivity($value)
    {
        ValidateUtility::isBoolean($value);

        $this->_caseSensitivity = $value;
    }

    /**
     * 検索結果の１件目から読み飛ばす件数を取得
     *
     * @return    string        offset
     */
    public function getOffset()
    {
        return $this->_offset;
    }

    /**
     * 検索結果の１件目から読み飛ばす件数を設定
     *
     * @param     string $value offset
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException        It is not number.
     */
    public function setOffset($value)
    {
        ValidateUtility::isNumber($value, ValidateUtility::DISABLE_EMPTY);

        $this->_offset = $value;
    }

    /**
     * 取得する最大件数を取得
     *
     * @return    string        limit
     */
    public function getLimit()
    {
        return $this->_limit;
    }

    /**
     * 取得する最大件数を設定
     *
     * @param     string $value limit
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException        It is not number.
     */
    public function setLimit($value)
    {
        ValidateUtility::isNumber($value, ValidateUtility::DISABLE_EMPTY);

        $this->_limit = $value;
    }

    /**
     * ソート順配列を取得
     *
     * @return    int[]        timestamp
     */
    public function getOrderSortArray()
    {
        return $this->_orderSortArray;
    }

    /**
     * ソート順配列を設定
     *
     * @param     int[] $value The constant has been defined in oneself.
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException        It is not constant.
     * @throws    \grn\space\common\exception\GrnArgumentOutOfRangeException   It specified it excluding the constant.
     */
    public function setOrderSortArray(array $value)
    {
        $this->_orderSortArray = [];

        foreach ($value as $sortkey) {
            $this->addOrderSort($sortkey);
        }
    }

    /**
     * ソート順を追加
     *
     * @param     int $value The constant has been defined in oneself.
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException        It is not constant.
     * @throws    \grn\space\common\exception\GrnArgumentOutOfRangeException   It specified it excluding the constant.
     */
    public function addOrderSort($value)
    {
        $this->checkOrderSortRange($value);
        $this->_orderSortArray[] = $value;
    }

    /**
     * ソート順の範囲チェック
     *
     * @param     string $value The constant has been defined in oneself.
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException        It is not constant.
     * @throws    \grn\space\common\exception\GrnArgumentOutOfRangeException   It specified it excluding the constant.
     */
    protected function checkOrderSortRange($value)
    {
        ValidateUtility::isNumber($value, ValidateUtility::DISABLE_EMPTY);
        ValidateUtility::isInTheRange($value, self::SORT_ID_ASC,
            self::SORT_ID_DESC, ValidateUtility::DISABLE_EMPTY);
    }

    /**
     * 言語コードを取得
     *
     * @return    string        language code
     */
    public function getLanguageCode()
    {
        return $this->_languageCode;
    }

    /**
     * 言語コードを設定
     *
     * @param     string $value language code
     */
    public function setLanguageCode($value)
    {
        $this->_languageCode = $value;
    }

    /**
     * 検査する（オーバーライド）
     * Validity check is override
     *
     * @param     int     $validType VALID_TYPE_CREATE, VALID_TYPE_MODIFY, VALID_TYPE_SELECT
     * @param     boolean $isThrow   EXCEPTION_THROW:exception throw   EXCEPTION_NOT_THROW:exception not throw
     *
     * @throws    \grn\space\common\exception\GrnArgumentOutOfRangeException        validType is out of range.
     * @throws    GrnRequiredDataIsNotException         Do not have the required data.
     * @return    boolean       TRUE : $value is internal application   if isThrow = EXCEPTION_NOT_THROW then FALSE: external applicaton
     */
    public function isValidData($validType, $isThrow = self::EXCEPTION_THROW)
    {
        ValidateUtility::isInTheRange($validType, self::VALID_TYPE_SELECT,
            self::VALID_TYPE_MODIFY);


        if ($this->checkValidate($validType)) {
            return true;
        }

        if ($isThrow) {
            throw new GrnRequiredDataIsNotException();
        } else {
            return false;
        }
    }

    /**
     * 検査の実行
     * Performing Validation
     *
     * @param     int $validType VALID_TYPE_CREATE, VALID_TYPE_MODIFY, VALID_TYPE_SELECT
     *
     * @return    boolean       TRUE : valid   FALSE: Invalid
     */
    protected function checkValidate($validType)
    {
        return true;
    }
}

