<?php

namespace grn\space\common\data\condition;

use grn\space\common\data\condition\InspectionSearchConditionAbstract;
use grn\space\common\utility\ValidateUtility;
use grn\space\common\data\bean\Application;

/**
 * アプリケーション検索クラス
 * アプリケーションの検索条件を表すデータクラス
 */
class ApplicationSearchCondition extends InspectionSearchConditionAbstract
{
    /**
     * 検索条件に使用しない
     */
    const SEARCH_DISABLE = 1;

    /**
     * 対象の検索条件を真として検索する
     */
    const SEARCH_TRUE = 2;

    /**
     * 対象の検索条件を偽として検索する
     */
    const SEARCH_FALSE = 3;

    /**
     * 検索するスペースID
     */
    private $_searchSpaceId;             // space sequence id

    /**
     * 利用可能なスペースを検索
     */
    private $_searchAvailable;              // SEARCH_DISABLE or SEARCH_TRUE or SEARCH_FALSE

    /**
     * 検索対象アプリケーションタイプを検索
     */
    private $_searchApplicationType;

    /**
     * システム利用アプリケーションを検索
     */
    private $_searchSystemUse;              // SEARCH_DISABLE or SEARCH_TRUE or SEARCH_FALSE      Only SEARCH_FALSE : now. 

    /**
     * 外部アプリIDを元に検索
     *
     * @var int
     */
    private $_searchExternalApplicationID;


    /**
     * コンストラクタ
     * 検索条件を初期化する
     *
     */
    public function __construct()
    {
        parent::__construct();

        //Default search condition is all space.(System application except)
        $this->setSearchSpaceId(null);
        $this->setSearchAvailable(self::SEARCH_DISABLE);
        $this->setSearchApplicationType(Application::APPLICATION_TYPE_INTERNAL);
        $this->setSearchSystemUse(self::SEARCH_FALSE);
    }

    /**
     * 検索対象スペースIDを取得
     *
     * @return    string        space sequence id
     */
    public function getSearchSpaceId()
    {
        return $this->_searchSpaceId;
    }

    /**
     * 検索対象スペースIDを設定
     *
     * @param     string $value space sequence id
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not number.
     */
    public function setSearchSpaceId($value)
    {
        ValidateUtility::isNumber($value);

        $this->_searchSpaceId = $value;
    }

    /**
     * 検索対象利用可能フラグを取得
     *
     * @return    int        SEARCH_DISABLE: It doesn't include the search condition. SEARCH_TRUE:Find what is available.  SEARCH_FALSE:Find what is not available.
     */
    public function getSearchAvailable()
    {
        return $this->_searchAvailable;
    }

    /**
     * 検索対象利用可能フラグを設定
     *
     * @param     int $value SEARCH_DISABLE: It doesn't include the search condition. SEARCH_TRUE:Find what is available.  SEARCH_FALSE:Find what is not available.
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException        It is not number.
     * @throws    \grn\space\common\exception\GrnArgumentOutOfRangeException   It specified it excluding the constant.
     */
    public function setSearchAvailable($value)
    {
        ValidateUtility::isNumber($value, ValidateUtility::DISABLE_EMPTY);
        ValidateUtility::isInTheRange($value, self::SEARCH_DISABLE,
            self::SEARCH_FALSE, ValidateUtility::DISABLE_EMPTY);

        $this->_searchAvailable = $value;
    }

    /**
     * 検索対象アプリケーションタイプを取得
     *
     * @return    int        The constant has been defined in oneself.
     */
    public function getSearchApplicationType()
    {
        return $this->_searchApplicationType;
    }

    /**
     * 検索対象アプリケーションタイプを設定
     *
     * @param     int $value The constant has been defined in oneself.
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException       It is not number.
     * @throws    \grn\space\common\exception\GrnArgumentOutOfRangeException    It specified it excluding the constant.
     */
    public function setSearchApplicationType($value)
    {
        ValidateUtility::isNumber($value, ValidateUtility::ENABLE_EMPTY);
        ValidateUtility::isInTheRange($value,
            Application::APPLICATION_TYPE_INTERNAL,
            Application::APPLICATION_TYPE_EXTERNAL_KINTONE,
            ValidateUtility::ENABLE_EMPTY);

        $this->_searchApplicationType = $value;
    }

    /**
     * 検索対象システムアプリケーションフラグを取得
     *
     * @return    int        SEARCH_DISABLE: It doesn't include the search condition. SEARCH_TRUE:Search for system application.  SEARCH_FALSE:Search for user application.
     */
    public function getSearchSystemUse()
    {
        return $this->_searchSystemUse;
    }

    /**
     * Set external application id.
     *
     * @param int $appID external application id.
     *
     * @throws \grn\space\common\exception\GrnInvalidArgumentException It is not number.
     */
    public function setSearchExternalApplicationID($appID)
    {
        ValidateUtility::isNumber($appID, ValidateUtility::DISABLE_EMPTY);
        $this->_searchExternalApplicationID = $appID;
    }

    /**
     * Get external application id.
     */
    public function getSearchExternalApplicationID()
    {
        return $this->_searchExternalApplicationID;
    }

    /**
     * 検索対象システムアプリケーションフラグを設定
     *
     * @param     int $value SEARCH_DISABLE: It doesn't include the search condition. SEARCH_TRUE:Search for system application.  SEARCH_FALSE:Search for user application.
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException        It is not number.
     * @throws    \grn\space\common\exception\GrnArgumentOutOfRangeException   It specified it excluding the constant.
     */
    private function setSearchSystemUse($value)
    {
        ValidateUtility::isNumber($value, ValidateUtility::DISABLE_EMPTY);
        ValidateUtility::isInTheRange($value, self::SEARCH_DISABLE,
            self::SEARCH_FALSE, ValidateUtility::DISABLE_EMPTY);

        $this->_searchSystemUse = $value;
    }


    /**
     * 検査の実行(オーバーライド)
     * Performing Validation is override
     *
     * @param     int $validType VALID_TYPE_CREATE, VALID_TYPE_MODIFY, VALID_TYPE_SELECT
     *
     * @return    boolean       TRUE : valid   FALSE: Invalid
     */
    protected function checkValidate($validType)
    {

    }

}

