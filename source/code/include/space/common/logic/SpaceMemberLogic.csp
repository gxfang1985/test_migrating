<?php

namespace grn\space\common\logic;

use grn\grn\access\service\AppAccess;
use grn\grn\MemberLogic;
use grn\space\common\db\SpaceMemberFacade;
use grn\space\common\data\bean\LanguageStatus;
use grn\space\common\data\collection\SpaceMemberCollection;

/**
 * Space Member logic class
 **/
class SpaceMemberLogic
{
    private static $_instance = null;

    /** Used in logic to display users who left the space member. */
    const SPACE_MEMBERS = 'space_members';
    const NO_SPACE_MEMBERS = 'no_space_members';

    /**
     * コンストラクタ
     */
    public function __construct()
    {
    }

    /**
     * Get Instance(Singleton pattern)
     *
     * @return SpaceMemberLogic $_instance
     */
    public static function getInstance()
    {
        if (is_null(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Add information into each SpaceMember object
     *
     * @param SpaceMemberCollection $spaceMemberCollection
     * @param string                $languageCode
     */
    public function addUserInfo(
        SpaceMemberCollection $spaceMemberCollection,
        $languageCode = LanguageStatus::STANDARD_LANGUAGE_CODE
    ) {
        if (count($spaceMemberCollection) != 0) {
            $spaceMemberFacade = new SpaceMemberFacade();
            $spaceMemberFacade->addUserBasicInfo($spaceMemberCollection);
            $spaceMemberFacade->addUserGroupInfo($spaceMemberCollection,
                $languageCode);
        }
    }

    /**
     * @param array $target_ids
     * @param bool  $is_filter
     *
     * @return array
     */
    public function getPickoutMemberTypeIdFromParam(
        array $target_ids,
        $is_filter = true
    ) {

        $target_type_id_list = MemberLogic::getInstance()
                                          ->getPickoutMemberTypeIdFromParam($target_ids);
        $user_ids_candidates = [];
        foreach ($target_type_id_list as $type_id_array) {
            $member_id = $type_id_array[MemberLogic::MEMBER_ID];
            $member_type = $type_id_array[MemberLogic::MEMBER_TYPE];
            if ($member_type == MemberLogic::TYPE_USER) {
                $user_ids_candidates[] = $member_id;
            }
        }

        if ($is_filter) {
            $user_ids_filtered
                = $this->filterUserIdsInternalAccess($user_ids_candidates);
            $user_ids_diff = array_diff($user_ids_candidates,
                $user_ids_filtered);
            foreach ($user_ids_diff as $user_id) {
                unset($target_type_id_list[MemberLogic::PREFIX_USER
                                           . $user_id]);
            }
        }

        return $target_type_id_list;

    }

    /**
     * @param $user_ids
     *
     * @return array
     */
    public function filterUserIdsInternalAccess($user_ids)
    {
        return AppAccess::filterUserIdsInternalAccessByAppId($user_ids,
            'space');
    }

    /**
     * @param array $target_member_list
     * @param bool  $isMobile
     * @param bool  $is_include_ancestors
     * @param bool  $is_include_deleted_users
     *
     * @return array
     */
    public function getDisplayMemberList(
        array $target_member_list,
        $isMobile = false,
        $is_include_ancestors = false,
        $is_include_deleted_users = true
    ) {
        return MemberLogic::getInstance()
                          ->getDisplayMemberList($target_member_list, 'space',
                              $isMobile, $is_include_ancestors,
                              $is_include_deleted_users);
    }

    /**
     * @param array $target_member_list
     *
     * @return array
     */
    public function getDisplayMemberListOfNotDeletedUsers(
        array $target_member_list
    ) {
        return $this->getDisplayMemberList($target_member_list, false, false,
            false);
    }

    /**
     * @param array $target_member_list
     *
     * @return array
     */
    public function getDisplayMemberListIncludeDeletedUsers(
        array $target_member_list
    ) {
        return $this->getDisplayMemberList($target_member_list, false, false);
    }
}

