<?php

namespace grn\space\common\logic;

use grn\space\common\data\collection\CategoryCollection;

use grn\space\common\db\dao\SpaceMentionDAO;
use grn\space\data\bean\Todo;

use grn\space\data\collection\SpaceCollection;

use grn\space\common\data\bean\Comment;
use grn\space\common\data\bean\CommentSequenceNo;
use grn\space\common\data\collection\CommentCollection;
use grn\space\common\data\condition\CommentSearchCondition;
use grn\space\common\db\CommentFacade;
use grn\space\common\utility\ValidateUtility;

/**
 * Business Logic Layer
 * This layer achieves the demand from the application service layer by using the DB layer.
 *
 * Comment logic class
 * All demands for the COMMENT are undertaken from the application service layer.
 **/
class CommentLogic
{
    private static $_instance = null;

    /**
     * コンストラクタ
     */
    public function __construct()
    {
    }

    /**
     * Get Instance(Singleton pattern)
     *
     * @return CommentLogic $_instance
     */
    public static function getInstance()
    {
        if (is_null(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    //******************************************************************************************
    //***********************************        comment       *********************************
    //******************************************************************************************
    /**
     * Create comment
     *
     * @param \grn\space\common\data\bean\Comment $comment
     *
     * @return \grn\space\common\data\bean\Comment
     * @throws \grn\space\common\exception\GrnDataNotFoundException     When the specified parentComment is not found.
     * @throws \grn\space\common\exception\GrnDatabaseException    Any error in the database.
     */
    public function createComment(Comment $comment)
    {
        //Set current time
        $comment->setCreateTimestamp(time());

        if ( ! is_null($comment->getModifierId())) {
            $comment->setModifyTimestamp($comment->getCreateTimestamp());
        }

        //Set hierarchy level
        $commentDBFacade = new CommentFacade();
        if (ValidateUtility::isNotNull($comment->getParentCommentId())) {
            $parentComment
                = $commentDBFacade->getComment($comment->getParentCommentId());
            $comment->setHierarchyLevel($parentComment->getHierarchyLevel()
                                        + 1);
        }

        //create of comment
        $newComment = $commentDBFacade->insertComment($comment);

        //create mention
        $mentionDAO = new SpaceMentionDAO();
        $mentionDAO->insert($newComment->getId(), $comment->getMention());

        //create ancestor of comment
        $this->_createCommentHierarchies($newComment);

        //set parent comment no
        $commentCollection = new CommentCollection();
        $commentCollection->appendBean($newComment);
        $this->_setParentCommentNo($commentCollection);

        return $newComment;
    }

    /**
     *
     * Logical delete comment
     *
     * @param  \grn\space\common\data\bean\Comment $comment
     *
     * @throws \grn\space\common\exception\GrnDatabaseException         Any error in the database.
     * @return \grn\space\common\data\bean\Comment
     */
    public function logicalDeleteComment(Comment $comment)
    {
        //logical delete flag ON
        $comment->setLogicalDelete(true);
        $comment->setModifyTimestamp(time());

        //logical delete of comment
        $commentDBFacade = new CommentFacade();
        $comment = $commentDBFacade->logicalDeleteComment($comment);

        return $comment;
    }


    /**
     * Get the comment
     *
     * @param  string $commentId comment sequence id
     *
     * @throws \grn\space\common\exception\GrnDataNotFoundException     When the specified comment is not found.
     * @throws \grn\space\common\exception\GrnDatabaseException         Any error in the database.
     * @return \grn\space\common\data\bean\Comment
     */
    public function getComment($commentId)
    {
        $commentDBFacade = new CommentFacade();
        $resultComment = $commentDBFacade->getComment($commentId);

        //set mention
        $mentionDAO = new SpaceMentionDAO();
        $mentionCollections = $mentionDAO->getByCommentIdList([$commentId]);
        if (array_key_exists($commentId, $mentionCollections)) {
            $resultComment->setMention($mentionCollections[$commentId]);
        }

        //set parent comment no
        $commentCollection = new CommentCollection();
        $commentCollection->appendBean($resultComment);
        $this->_setParentCommentNo($commentCollection);

        return $resultComment;
    }

    /**
     * The existence confirmation of Comment.
     *
     * @param string $spaceId   space sequence id
     * @param string $threadId  thread sequence id
     * @param string $commentId comment sequence id
     *
     * @throws \grn\space\common\exception\GrnDatabaseException     comment is not found
     * @return bool                     Comment is exists : TRUE   Comment is not exists : FALSE
     */
    public function isExistsCommentBySpaceIdThreadIdCommentId(
        $spaceId,
        $threadId,
        $commentId
    ) {
        $commentDBFacade = new CommentFacade();

        return $commentDBFacade->isExistsCommentBySpaceIdThreadIdCommentId($spaceId,
            $threadId, $commentId);
    }

    /**
     * The existence confirmation of Comment.
     *
     * @param string $spaceId   space sequence id
     * @param string $threadId  thread sequence id
     * @param string $todoId    todo sequence id
     * @param string $commentId comment sequence id
     *
     * @throws \grn\space\common\exception\GrnDatabaseException     comment is not found
     * @return bool                     Comment is exists : TRUE   Comment is not exists : FALSE
     */
    public function isExistsCommentBySpaceIdThreadIdTodoIdCommentId(
        $spaceId,
        $threadId,
        $todoId,
        $commentId
    ) {
        $commentDBFacade = new CommentFacade();

        return $commentDBFacade->isExistsCommentBySpaceIdThreadIdTodoIdCommentId($spaceId,
            $threadId, $todoId, $commentId);
    }

    /**
     * In the condition of $commentSearchCondition, the row number of head comment is get.
     *
     * @param \grn\space\common\data\condition\CommentSearchCondition $commentSearchCondition
     *
     * @throws \grn\space\common\exception\GrnDataNotFoundException             head comment is not found
     * @throws \grn\space\common\exception\GrnDatabaseException                 Any error in the database.
     * @return number of row
     */
    public function getRowNumber(CommentSearchCondition $commentSearchCondition)
    {
        $commentDBFacade = new CommentFacade();

        return $commentDBFacade->getRowNumber($commentSearchCondition);
    }

    /**
     * The number of comments that are newer than the condition of specifying it by the argument is counted.
     *
     * @param string $commentNo comment number
     * @param string $threadId  thread sequence id
     *
     * @throws \grn\space\common\exception\GrnDatabaseException         Any error in the database.
     * @return number of newer comments
     */
    public function countNewerCommentsOfThreadAndTodo($commentNo, $threadId)
    {
        $commentDBFacade = new CommentFacade();

        return $commentDBFacade->countNewerCommentsOfThreadAndTodo($commentNo,
            $threadId);
    }

    /**
     * Search comment
     *
     * @param \grn\space\common\data\condition\CommentSearchCondition $commentSearchCondition
     *
     * @throws \grn\space\common\exception\GrnDatabaseException                 Any error in the database.
     * @return \grn\space\common\data\collection\CommentCollection
     */
    public function searchComment(CommentSearchCondition $commentSearchCondition
    ) {
        $commentDBFacade = new CommentFacade();
        $commentCollection
            = $commentDBFacade->selectCommentList($commentSearchCondition);

        $this->_setParentCommentNo($commentCollection);

        return $commentCollection;
    }

    /**
     * set parent comment No to commentCollection
     *
     * @param \grn\space\common\data\collection\CommentCollection $commentCollection
     *
     * @throws \grn\space\common\exception\GrnDatabaseException            Any error in the database.
     * @return \grn\space\common\data\collection\CommentCollection
     */
    private function _setParentCommentNo(CommentCollection $commentCollection)
    {
        //filter children collection
        $childrenCommentCollection = new CommentCollection();
        /** @var \grn\space\common\data\bean\Comment $comment */
        foreach ($commentCollection as $comment) {
            if (ValidateUtility::isNotNull($comment->getParentCommentId())) {
                $childrenCommentCollection->appendBean($comment);
            }
        }

        if (count($childrenCommentCollection) > 0) {
            $commentDBFacade = new CommentFacade();
            $parentCommentCollection
                = $commentDBFacade->selectParentCommentListIgnoringLogicalDelete($childrenCommentCollection);

            foreach ($commentCollection as $comment) {
                if (ValidateUtility::isNull($comment->getParentCommentId())) {
                    continue;
                }

                /** @var \grn\space\common\data\bean\Comment $parentComment */
                foreach ($parentCommentCollection as $parentComment) {
                    if ($comment->getParentCommentId()
                        == $parentComment->getId()
                    ) {
                        $comment->setParentCommentNo($parentComment->getCommentNo());
                        break;
                    }
                }
            }
        }
    }

    //***************************************************************************************************************
    //***********************************        comment sequence no        *****************************************
    //***************************************************************************************************************
    /**
     * Create comment sequence no
     *
     * @param \grn\space\common\data\bean\CommentSequenceNo $commentSequenceNo
     *
     * @throws \grn\space\common\exception\GrnDatabaseException             Any error in the database.
     * @return \grn\space\common\data\bean\CommentSequenceNo
     */
    public function createCommentSequenceNo(CommentSequenceNo $commentSequenceNo
    ) {
        $commentSequenceNoDBFacade = new CommentFacade();
        $commentSequenceNo
            = $commentSequenceNoDBFacade->insertCommentSequenceNo($commentSequenceNo);

        return $commentSequenceNo;
    }


    /**
     * Delete comment sequence no
     *
     * @param \grn\space\common\data\bean\CommentSequenceNo $commentSequenceNo
     *
     * @throws \grn\space\common\exception\GrnDataNotFoundException         When the specified commentSequenceNo is not found.
     * @throws \grn\space\common\exception\GrnDatabaseException             Any error in the database.
     * @return \grn\space\common\data\bean\CommentSequenceNo
     */
    public function deleteCommentSequenceNo(CommentSequenceNo $commentSequenceNo
    ) {
        $commentSequenceNoDBFacade = new CommentFacade();
        $commentSequenceNo
            = $commentSequenceNoDBFacade->deleteCommentSequenceNo($commentSequenceNo);

        return $commentSequenceNo;
    }

    /**
     * Delete CommentSequenceNo By CategoryIdArray
     *
     * @param \grn\space\common\data\collection\CategoryCollection $categoryCollection
     *
     * @return resource
     */
    public function deleteCommentSequenceNoByCategoryCollection(
        CategoryCollection $categoryCollection
    ) {
        $commentFacade = new CommentFacade();

        return $commentFacade->deleteCommentSequenceNoByCategoryCollection($categoryCollection);
    }

    /**
     * Get the increment comment sequence no
     *
     * @param  string $commentSequenceNoId commentSequenceNo sequence id
     *
     * @throws \grn\space\common\exception\GrnDataNotFoundException         When the specified commentSequenceNo is not found.
     * @throws \grn\space\common\exception\GrnDatabaseException             Any error in the database.
     * @return \grn\space\common\data\bean\CommentSequenceNo
     */
    public function incrementCommentSequenceNo($commentSequenceNoId)
    {
        $commentSequenceNo = $this->getCommentSequenceNo($commentSequenceNoId);

        $commentFacade = new CommentFacade();
        $resultCommentSequenceNo
            = $commentFacade->getNextCommentSequenceNo($commentSequenceNo);

        return $resultCommentSequenceNo;
    }

    /**
     * Get the comment sequence no
     *
     * @param  string $commentSequenceNoId commentSequenceNo sequence id
     *
     * @throws \grn\space\common\exception\GrnDataNotFoundException         When the specified commentSequenceNo is not found.
     * @throws \grn\space\common\exception\GrnDatabaseException             Any error in the database.
     * @return \grn\space\common\data\bean\CommentSequenceNo
     */
    public function getCommentSequenceNo($commentSequenceNoId)
    {
        $commentSequenceNoDBFacade = new CommentFacade();
        $commentSequenceNo
            = $commentSequenceNoDBFacade->selectCommentSequenceNo($commentSequenceNoId);

        return $commentSequenceNo;
    }


    //****************************************************************************************************
    //***********************************        comment hierarchy       *********************************
    //****************************************************************************************************
    /**
     * comment hierarchies is created.
     *
     * @param \grn\space\common\data\bean\Comment $comment
     *
     * @throws \grn\space\common\exception\GrnDatabaseException     Any error in the database.
     */
    private function _createCommentHierarchies(Comment $comment)
    {
        if (ValidateUtility::isNull($comment->getParentCommentId())) {
            return;
        }

        //select ancestor of parent comment
        $commentDBFacade = new CommentFacade();
        $ancestorCommentCollection
            = $commentDBFacade->selectAncestorCommentList($comment->getParentCommentId());

        //祖先に自分も含める
        $ancestorCommentCollection->appendBean($comment);

        //insert ancestor of comment
        $commentDBFacade->insertCommentHierarchies($comment->getId(),
            $ancestorCommentCollection);
    }

    //**********************************************************************************************
    //***********************************        comment file       ********************************
    //**********************************************************************************************
    /**
     * Create comment-file-relation
     *
     * @param string $commentId comment sequence id
     * @param string $fileId    file sequence id
     *
     * @throws \grn\space\common\exception\GrnDatabaseException     Any error in the database.
     */
    public function createCommentFileReletion($commentId, $fileId)
    {
        $commentDBFacade = new CommentFacade();
        $commentDBFacade->insertCommentFileReletion($commentId, $fileId);
    }


    //*****************************************************************************************************
    //***********************************        comment read status       *********************************
    //*****************************************************************************************************
    /**
     * Replace create commentReadStatus
     *
     * @param \grn\space\common\data\collection\CommentCollection $commentCollection
     * @param string                                              $userId user sequence id
     *
     * @throws \grn\space\common\exception\GrnDatabaseException         Any error in the database.
     */
    public function replaceCreateCommentReadStatus(
        CommentCollection $commentCollection,
        $userId
    ) {
        $commentDBFacade = new CommentFacade();
        $commentDBFacade->replaceInsertCommentReadStatus($commentCollection,
            $userId);
    }

    /**
     * Delete commentReadStatus
     *
     * @param string $commentId comment sequence id
     *
     * @throws \grn\space\common\exception\GrnDatabaseException     Any error in the database.
     */
    public function deleteCommentReadStatusByCommentId($commentId)
    {
        $commentDBFacade = new CommentFacade();
        $commentDBFacade->deleteCommentReadStatusByCommentId($commentId);
    }

    /**
     * Get commentReadStatusCollection
     *
     * @param \grn\space\common\data\collection\CommentCollection $commentCollection
     * @param string                                              $userId user sequence id
     *
     * @throws \grn\space\common\exception\GrnDatabaseException         Any error in the database.
     * @return \grn\space\common\data\collection\CommentReadStatusCollection
     */
    public function getCommentReadStatusCollection(
        CommentCollection $commentCollection,
        $userId
    ) {
        $commentDBFacade = new CommentFacade();

        return $commentDBFacade->selectCommentReadStatusCollection($commentCollection,
            $userId);
    }


    /**
     * Delete Comments by CategoryCollection
     *
     * @param \grn\space\common\data\collection\CategoryCollection $categoryCollection
     */
    public function deleteCommentByCategoryCollection(
        CategoryCollection $categoryCollection
    ) {
        if (count($categoryCollection)) {
            $commentFacade = new CommentFacade();
            $commentFacade->deleteThreadCommentByCategoryCollection($categoryCollection);
            $commentFacade->deleteTodoCommentByCategoryCollection($categoryCollection);
        }
    }

    /**
     * Delete Comment by todoId
     *
     * @param array $todoIdArray Todo ID array
     *
     * @return resource
     */
    public function deleteCommentByTodoId(array $todoIdArray)
    {
        if (count($todoIdArray)) {
            $commentFacade = new CommentFacade();

            return $commentFacade->deleteCommentByTodoId($todoIdArray);
        }
    }

    /**
     * Delete Thread Comments by threadIdArray
     *
     * @param array $threadIdArray Thread ID array
     *
     * @return resource
     */
    public function deleteThreadCommentByThreadId(array $threadIdArray)
    {
        if (count($threadIdArray)) {
            $commentFacade = new CommentFacade();

            return $commentFacade->deleteThreadCommentByThreadId($threadIdArray);
        }
    }

    /**
     * Delete Todo Comment by threadId
     *
     * @param array $threadIdArray Thread ID array
     *
     * @return resource
     */
    public function deleteTodoCommentByThreadId(array $threadIdArray)
    {
        if (count($threadIdArray)) {
            $commentFacade = new CommentFacade();

            return $commentFacade->deleteTodoCommentByThreadId($threadIdArray);
        }
    }

    /**
     * Mark all the comments which are related to the thread specified by $threadId read by the user specified by $userId
     *
     * @param string $userId
     * @param string $threadId
     *
     * @return bool
     */
    public function markAllCommentReadByUserIdAndThreadId($userId, $threadId)
    {
        $commentFacade = new CommentFacade();

        return $commentFacade->markAllCommentReadByUserIdAndThreadId($userId,
            $threadId);
    }
}
