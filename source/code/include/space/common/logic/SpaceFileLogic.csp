<?php

namespace grn\space\common\logic;

use grn\space\common\data\collection\CategoryCollection;

use grn\space\data\collection\SpaceCollection;

use grn\space\data\bean\Space;

require_once('fw/uum_core.csp');
require_once('space/common/logic/legacy/SpaceFileManager.csp');

use grn\space\common\data\bean\SpaceFile;
use grn\space\common\data\collection\CommentCollection;
use grn\space\common\data\condition\SpaceFileSearchCondition;
use grn\space\common\db\SpaceFileFacade;
use grn\space\common\utility\ValidateUtility;
use grn\space\data\collection\SynthesisThreadCommentCollection;
use grn\fts\Application as FtsApplication;
use grn\fts\space\IndexService;

/**
 * Business Logic Layer
 * This layer achieves the demand from the application service layer by using the DB layer.
 *
 * File logic class
 * All demands for the COMMENT are undertaken from the application service layer.
 *
 * This code uses the legacy of the past.
 **/
class SpaceFileLogic
{
    private static $_instance = null;

    /**
     * コンストラクタ
     */
    public function __construct()
    {
    }

    /**
     * Get Instance(Singleton pattern)
     *
     * @return SpaceFileLogic $_instance
     */
    public static function getInstance()
    {
        if (is_null(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * Create space file
     *
     * @param     mixed    $file          \GRN_File, or \GRN_ServerFile, or an element of $_FILES, or a path string of a file.
     * @param     \CB_User $operationUser \CB_User
     *
     * @return    \grn\space\common\data\bean\SpaceFile 失敗の場合はFALSEを返す
     */
    public function createSpaceFile($file, \CB_User $operationUser)
    {
        $fileManager = \GRN_Space_FileManager::getInstance();
        $resultFile = $fileManager->createSpaceFile($file, $operationUser);

        if ($resultFile == false) {
            return false;
        }

        $resultSpaceFile = new SpaceFile();
        $resultSpaceFile->setId($resultFile->getOID());
        $resultSpaceFile->setGrnSpaceFileObject($resultFile);

        return $resultSpaceFile;
    }

    /**
     * Modify space file
     *
     * @param     string $title        title
     * @param     string $description  description
     * @param     int    $version      version(There is a case of empty.)
     * @param     int    $targetFileId upload file sequence id
     *
     * @throws    \grn\space\common\exception\GrnDataNotFoundException      There is no space-file.
     * @throws    \grn\space\common\exception\GrnDatabaseException          Any error in the database.
     * @return    \grn\space\common\data\bean\SpaceFile
     */
    public function modifySpaceFile(
        $title,
        $description,
        $version,
        $targetFileId
    ) {
        $spaceFile = $this->getSpaceFile($targetFileId);
        $grnSpaceFile = $spaceFile->getGrnSpaceFileObject();

        $grnSpaceFile->setTitle($title);
        $grnSpaceFile->setDescription($description);

        if (ValidateUtility::isNotNull($version)) {
            if ($version != $grnSpaceFile->getMaxVersion()) {
                $grnSpaceFile->setMaxVersion($version);
            }
        }

        return $spaceFile;
    }

    /**
     * Upload space file
     *
     * @param     mixed    $uploadedFile  \GRN_File, or \GRN_ServerFile, or an element of $_FILES, or a path string of a file.
     * @param     \CB_User $operationUser \CB_User
     * @param     string   $comment       uploaded comment
     * @param     int      $targetFileId  upload file sequence id
     *
     * @throws    \grn\space\common\exception\GrnDataNotFoundException      There is no space-file.
     * @throws    \grn\space\common\exception\GrnDatabaseException          Any error in the database.
     * @return    \grn\space\common\data\bean\SpaceFile
     */
    public function uploadSpaceFile(
        $uploadedFile,
        \CB_User $operationUser,
        $comment,
        $targetFileId
    ) {
        $spaceFile = $this->getSpaceFile($targetFileId);
        $grnSpaceFile = $spaceFile->getGrnSpaceFileObject();

        $grnSpaceFile->update($operationUser, $uploadedFile, $comment);

        return $spaceFile;
    }

    /**
     * Restore space file
     *
     * @param     \CB_User $operationUser \CB_User
     * @param     int      $version       version
     * @param     string   $comment       uploaded comment
     * @param     int      $targetFileId  upload file sequence id
     *
     * @throws    \grn\space\common\exception\GrnDataNotFoundException      There is no space-file.
     * @throws    \grn\space\common\exception\GrnDatabaseException          Any error in the database.
     * @return    \grn\space\common\data\bean\SpaceFile
     */
    public function restoreSpaceFile(
        \CB_User $operationUser,
        $version,
        $comment,
        $targetFileId
    ) {
        $spaceFile = $this->getSpaceFile($targetFileId);
        $grnSpaceFile = $spaceFile->getGrnSpaceFileObject();

        $grnSpaceFile->restore($operationUser, $version, $comment);

        return $spaceFile;
    }

    /**
     * Delete space file
     *
     * @param  mixed $file \GRN_Space_File
     *
     * @return bool 成功の場合はTRUEを返す 失敗の場合はエラー
     */
    public function deleteSpaceFile(SpaceFile $file)
    {
        $fileManager = \GRN_Space_FileManager::getInstance();

        //Full Text Search
        if (FtsApplication::isAvailable()) {
            $searchService = new IndexService();
            $searchService->deleteIndexByFileId($file->getId());
        }

        return $fileManager->deleteSpaceFile($file->getGrnSpaceFileObject());
    }


    /**
     * Get the space file
     *
     * @param   int $fileId file sequence id
     *
     * @throws  \grn\space\common\exception\GrnDataNotFoundException     When the specified file is not found.
     * @throws  \grn\space\common\exception\GrnDatabaseException         Any error in the database.
     * @return  \grn\space\common\data\bean\SpaceFile
     */
    public function getSpaceFile($fileId)
    {
        $fileDBFacade = new SpaceFileFacade();
        $resultFile = $fileDBFacade->getSpaceFile($fileId);

        return $resultFile;
    }


    /**
     * get space file collection
     *
     * @param   \grn\space\common\data\condition\SpaceFileSearchCondition $searchCondition SpaceFileSearchCondition
     *
     * @throws  \grn\space\common\exception\GrnDatabaseException        Any error in the database.
     * @return  \grn\space\common\data\collection\SpaceFileCollection
     */
    public function getSpaceFileCollection(
        SpaceFileSearchCondition $searchCondition
    ) {
        $fileDBFacade = new SpaceFileFacade();
        $resultFileCollection
            = $fileDBFacade->selectSpaceFileList($searchCondition);

        return $resultFileCollection;
    }


    /**
     * Get the array with SpaceFileCollection of each commentId
     *
     * @param   \grn\space\common\data\collection\CommentCollection $commentCollection CommentCollection
     *
     * @throws  \grn\space\common\exception\GrnDatabaseException        Any error in the database.
     * @return  array {comment sequence id, SpaceFileCollection}
     */
    public function getSpaceFileCollectionsArray(
        CommentCollection $commentCollection
    ) {
        $fileDBFacade = new SpaceFileFacade();
        $resultFileCollectionArray
            = $fileDBFacade->selectSpaceFileListByCommentCollection($commentCollection);

        return $resultFileCollectionArray;
    }


    /**
     * Get the array with SpaceFileCollection of each threadId
     *
     * @param  \grn\space\data\collection\SynthesisThreadCommentCollection $synthesisThreadCommentCollection SynthesisThreadCommentCollection
     *
     * @throws \grn\space\common\exception\GrnDatabaseException        Any error in the database.
     * @return array {thread sequence id, SpaceFileCollection}
     */
    public function getSpaceFileCollectionsArrayBySynthesisThreadCommentCollection(
        SynthesisThreadCommentCollection $synthesisThreadCommentCollection
    ) {
        $fileDBFacade = new SpaceFileFacade();
        $resultFileCollectionArray
            = $fileDBFacade->selectSpaceFileCollectionsArrayBySynthesisThreadCommentCollection($synthesisThreadCommentCollection);

        return $resultFileCollectionArray;
    }


    /**
     * add the amount of file usage
     *
     * @param \grn\space\data\collection\SpaceCollection $spaceCollection
     *
     * @return string file size
     */
    public function addFileUsage(SpaceCollection $spaceCollection)
    {
        if (count($spaceCollection)) {
            $fileDBFacade = new SpaceFileFacade();
            $fileDBFacade->addFileUsage($spaceCollection);
        }
    }

    /**
     *
     * @param \grn\space\common\data\collection\CategoryCollection $categoryCollection
     */
    public function deleteFilesByCategoryCollection(
        CategoryCollection $categoryCollection
    ) {
        $fileFacade = new SpaceFileFacade();
        $spaceFileCollection
            = $fileFacade->selectSpaceFileListByCategoryCollection($categoryCollection);

        foreach ($spaceFileCollection as $spaceFile) {
            $this->deleteSpaceFile($spaceFile);
        }
    }

    /**
     * Calculate the file size consumed by this category.
     *
     * This function walks into its descendant categories with ignoring access rights and sum them up.
     *
     * @param string $categoryId
     *
     * @return string amount size
     */
    public function getFileUsageOfCategory($categoryId)
    {
        $fileFacade = new SpaceFileFacade();

        return $fileFacade->getFileUsageOfCategory($categoryId);
    }

    /**
     * @param int $startId
     * @param int $endId
     *
     * @return array
     */
    public function getAllSpaceFileForFtsFullIndexer($startId, $endId)
    {
        $fileFacade = new SpaceFileFacade();

        return $fileFacade->getAllSpaceFileForFtsFullIndexer($startId, $endId);
    }
}
