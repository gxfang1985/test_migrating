<?php

namespace grn\space\common\logic;

use grn\space\common\data\bean\AccessControlList;
use grn\space\common\data\collection\SpaceMemberCollection;
use grn\space\common\data\condition\AccessControlListSearchCondition;
use grn\space\common\db\AccessControlListFacade;


/**
 * Business Logic Layer
 * This layer achieves the demand from the application service layer by using the DB layer.
 *
 * AccessControlList logic class
 * All demands for the AccessControlList are undertaken from the application service layer.
 **/
class AccessControlListLogic
{
    private static $_instance = null;

    /**
     * コンストラクタ
     */
    public function __construct()
    {
    }

    /**
     * Get Instance(Singleton pattern)
     *
     * @return AccessControlListLogic $_instance
     */
    public static function getInstance()
    {
        if (is_null(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    //****************************************************************************************************************
    //***********************************        access control list        ******************************************
    //****************************************************************************************************************
    /**
     * Search access control list
     *
     * @param \grn\space\common\data\condition\AccessControlListSearchCondition $aclSearchCondition AccessControlListSearchCondition
     *
     * @throws \grn\space\common\exception\GrnDatabaseException             Any error in the database.
     * @return \grn\space\common\data\collection\AccessControlListCollection
     */
    public function searchAccessControlList(
        AccessControlListSearchCondition $aclSearchCondition
    ) {
        $aclDBFacade = new AccessControlListFacade();

        return $aclDBFacade->searchAccessControlList($aclSearchCondition);
    }

    /**
     * Create access control list
     *
     * @param  string $authorityCode authority code
     *
     * @throws \grn\space\common\exception\GrnDataNotFoundException     authority is not found
     * @throws \grn\space\common\exception\GrnDatabaseException         Any error in the database.
     * @return AccessControlList
     */
    public function createAclByAuthorityCode($authorityCode)
    {
        $aclFacade = new AccessControlListFacade();
        $authority = $aclFacade->getAuthorityByAuthorityCode($authorityCode);

        $accessControlList = new AccessControlList();
        $accessControlList->setAuthorityId($authority->getId());

        return $aclFacade->insertAccessControlList($accessControlList);
    }

    /**
     * Delete access control lists
     *
     * @param  string $spaceId space sequence id
     *
     * @throws \grn\space\common\exception\GrnDatabaseException         Any error in the database.
     */
    public function deleteAclsBySpaceId($spaceId)
    {
        $aclDBFacade = new AccessControlListFacade();
        $aclDBFacade->deleteAccessControleListsBySpaceId($spaceId);
    }

    //********************************************************************************************************************
    //******************        access control list relations(user, group, role, dynamic_role)       *********************
    //********************************************************************************************************************
    /**
     * Delete access control list relations
     *
     * @param  string $aclId access control list sequence id
     *
     * @throws \grn\space\common\exception\GrnDatabaseException         Any error in the database.
     */
    public function deleteAclRelations($aclId)
    {
        $aclDBFacade = new AccessControlListFacade();
        $aclDBFacade->deleteAccessControleListUserByAclId($aclId);
    }


    //********************************************************************************************************************
    //***********************************        access control list role       ******************************************
    //********************************************************************************************************************
    /**
     * Create access control list role
     *
     * @param  string $aclId  access control list sequence id
     * @param  string $roleId role id
     *
     * @throws \grn\space\common\exception\GrnDataNotFoundException     authority is not found
     * @throws \grn\space\common\exception\GrnDatabaseException         Any error in the database.
     */
    public function createAclRoleByRoleId($aclId, $roleId)
    {
        $aclDBFacade = new AccessControlListFacade();
        $aclDBFacade->insertAccessControleListRoleByRoleId($aclId, $roleId);
    }

    //********************************************************************************************************************
    //***********************************        access control list user       ******************************************
    //********************************************************************************************************************
    /**
     * Create access control list user
     *
     * @param  string                                                  $aclId                 access control list sequence id
     * @param  \grn\space\common\data\collection\SpaceMemberCollection $spaceMemberCollection SpaceMemberCollection
     *
     * @throws \grn\space\common\exception\GrnDatabaseException             Any error in the database.
     */
    public function createAclUsers(
        $aclId,
        SpaceMemberCollection $spaceMemberCollection
    ) {
        $aclDBFacade = new AccessControlListFacade();
        $aclDBFacade->insertAccessControleListUsers($aclId,
            $spaceMemberCollection);
    }

    /**
     * Delete access control list users
     *
     * @param  string                                                  $aclId                 access control list sequence id
     * @param  \grn\space\common\data\collection\SpaceMemberCollection $spaceMemberCollection SpaceMemberCollection
     *
     * @throws \grn\space\common\exception\GrnDatabaseException         Any error in the database.
     */
    public function deleteAclUsers(
        $aclId,
        SpaceMemberCollection $spaceMemberCollection
    ) {
        $aclDBFacade = new AccessControlListFacade();
        $aclDBFacade->deleteAccessControleListUsers($aclId,
            $spaceMemberCollection);
    }

    /**
     * Get user ids according to authority code.
     *
     * @param string $authorityCode
     * @param string $spaceId
     *
     * @return array $userId
     */
    public function getUserIdArrayAccordingToAuthorityCode(
        $authorityCode,
        $spaceId
    ) {
        $aclFacade = new AccessControlListFacade();
        $authority = $aclFacade->getAuthorityByAuthorityCode($authorityCode);
        $aclDBFacade = new AccessControlListFacade();

        return $aclDBFacade->getUserIdArrayAccordingToAuthorityId($authority->getId(),
            $spaceId);
    }

    /**
     * Get group ids according to authority code.
     *
     * @param string $authorityCode
     * @param string $spaceId
     *
     * @return array $userId
     */
    public function getGroupIdArrayAccordingToAuthorityCode(
        $authorityCode,
        $spaceId
    ) {
        $aclFacade = new AccessControlListFacade();
        $authority = $aclFacade->getAuthorityByAuthorityCode($authorityCode);
        $aclDBFacade = new AccessControlListFacade();

        return $aclDBFacade->getGroupIdArrayAccordingToAuthorityId($authority->getId(),
            $spaceId);
    }

    /**
     * Get role ids according to authority code.
     *
     * @param string $authorityCode
     * @param string $spaceId
     *
     * @return array $userId
     */
    public function getRoleIdArrayAccordingToAuthorityCode(
        $authorityCode,
        $spaceId
    ) {
        $aclFacade = new AccessControlListFacade();
        $authority = $aclFacade->getAuthorityByAuthorityCode($authorityCode);
        $aclDBFacade = new AccessControlListFacade();

        return $aclDBFacade->getRoleIdArrayAccordingToAuthorityId($authority->getId(),
            $spaceId);
    }
}
