<?php

namespace grn\space\common\utility;

use grn\space\common\data\bean\DatetimeFormat;
use grn\space\common\data\bean\InspectionAbstract;
use grn\space\data\bean\Space;
use grn\space\common\data\collection\ComponentInspectionCollectionAbstract;
use grn\space\common\data\collection\SpaceDatetimeCollection;
use grn\space\common\data\collection\InspectionCollectionAbstract;
use grn\space\common\exception\GrnInvalidArgumentException;

/**
 * Importance!! : Use ServiceClass or neither LogicClass nor DBClass from UtilityClass.
 *
 * 日時ユーティリティクラス
 * 日時情報を必要な形に加工するクラス
 **/
class SpaceDatetimeUtility
{
    /**
     * 日付表示タイプ：長い日付＋時間
     */
    const   DISPLAY_TYPE_LONGDATE_AND_TIME = 1;

    /**
     * 日付表示タイプ：現在時間によって動的に変える
     */
    const   DISPLAY_TYPE_DYNAMIC_IS_NOW_TIME = 2;

    const   DISPLAY_TYPE_LONG_DATE = 3;


    /**
     * コンストラクタ
     */
    private function __construct()
    {

    }

    /**
     * Construct datetime string and set it to the given InspectionAbstract-type object.
     *
     * @param InspectionAbstract $inspectionAbstract
     * @param DatetimeFormat     $datetimeFormat
     * @param integer            $displayType
     * @param string             $languageCode
     * @param string             $timezoneName
     *
     * @return InspectionAbstract
     */
    static public function constructDisplayDatetimeOfInspection(
        InspectionAbstract $inspectionAbstract,
        DatetimeFormat $datetimeFormat,
        $displayType,
        $languageCode,
        $timezoneName
    ) {
        $inspectionAbstract->getCreateDatetime()->setDisplayDatetime(
            self::getDisplayDatetime($inspectionAbstract->getCreateTimestamp(),
                $datetimeFormat, $displayType, $languageCode, $timezoneName)
        );
        $inspectionAbstract->getModifyDatetime()->setDisplayDatetime(
            self::getDisplayDatetime($inspectionAbstract->getModifyTimestamp(),
                $datetimeFormat, $displayType, $languageCode, $timezoneName)
        );

        return $inspectionAbstract;
    }

    /**
     * @param Space          $space
     * @param DatetimeFormat $datetimeFormat
     * @param int            $displayType
     * @param string         $languageCode
     * @param string         $timezoneName
     *
     * @return Space
     */
    static public function constructDisplayDatetimeOfSpace(
        Space $space,
        DatetimeFormat $datetimeFormat,
        int $displayType,
        string $languageCode,
        string $timezoneName
    ) {
        $space->getExpirationDateTime()->setDisplayDatetime(
            self::getDisplayDatetime($space->getExpirationDateTimestamp(),
                $datetimeFormat, $displayType, $languageCode, $timezoneName));

        return $space;
    }

    /**
     * Get string to display $timestamp
     *
     * @param string         $targetTimestamp Timestamp to display
     * @param DatetimeFormat $datetimeFormat
     * @param string         $displayType     self::DISPLAY_TYPE_LONGDATE_AND_TIME or DISPLAY_TYPE_DYNAMIC_IS_NOW_TIME
     * @param string         $languageCode
     * @param string         $timezoneName
     * @param string         $nowTimestamp
     *
     * @throws GrnInvalidArgumentException
     * @return string
     */

    static private function getDisplayDatetime(
        $targetTimestamp,
        DatetimeFormat $datetimeFormat,
        $displayType,
        $languageCode,
        $timezoneName,
        $nowTimestamp = null
    ) {
        require_once("fw/i18n.csp");

        if (is_null($nowTimestamp)) {
            $nowTimestamp = \time();
        }

        $targetCbTimestamp = new \CB_TimeStamp();
        $targetCbTimestamp->unix_ts = $targetTimestamp;

        $datetimeArray = \cb_date_datetime2array($targetCbTimestamp,
            $languageCode, $timezoneName);

        switch ($displayType) {
            case self::DISPLAY_TYPE_DYNAMIC_IS_NOW_TIME:
                $nowDatetime = \cb_timestamp_to_datetime($nowTimestamp,
                    $timezoneName);
                $targetDatetime = \cb_timestamp_to_datetime($targetTimestamp,
                    $timezoneName);
                if ($nowDatetime->year != $targetDatetime->year) {
                    return \cb_fillInTemplate($datetimeFormat->getLongDateFormat(),
                        $datetimeArray);
                } elseif ($nowDatetime->month != $targetDatetime->month
                          || $nowDatetime->day != $targetDatetime->day
                ) {
                    return \cb_fillInTemplate($datetimeFormat->getShortDateFormat(),
                        $datetimeArray);
                } else {
                    return \cb_fillInTemplate($datetimeFormat->getTimeFormat(),
                        $datetimeArray);
                }
                break;

            case self::DISPLAY_TYPE_LONG_DATE:
                return \cb_fillInTemplate($datetimeFormat->getLongDateFormat(),
                    $datetimeArray);
                break;

            case self::DISPLAY_TYPE_LONGDATE_AND_TIME:
                return \cb_fillInTemplate($datetimeFormat->getLongDateFormat(),
                        $datetimeArray)
                       . " "
                       . \cb_fillInTemplate($datetimeFormat->getTimeFormat(),
                        $datetimeArray);
        }

        throw new GrnInvalidArgumentException();
    }


    /**
     * ComponentInspectionCollectionAbstractオブジェクト内の表示日時を作成する
     *
     * @param     ComponentInspectionCollectionAbstract $componentInspectionCollection ComponentInspectionCollectionAbstract
     * @param     DatetimeFormat                        $datetimeFormatObj             DatetimeFormat
     * @param     boolean                               $displayType                   The constant has been defined in oneself.
     * @param     string                                $languageCode                  dispaly language code.
     * @param     string                                $timezoneName                  Timezone name
     * @param     string                                $nowTimestamp                  Timestamp at now
     *
     * @throws    GrnInvalidArgumentException        displayType is not constant. or languageCode is not language code.
     * @throws    \grn\space\common\exception\GrnArgumentOutOfRangeException   displayType specified it excluding the constant.
     */
    static public function constructionComponentInspectionDisplayDatetime(
        ComponentInspectionCollectionAbstract $componentInspectionCollection,
        DatetimeFormat $datetimeFormatObj,
        $displayType,
        $languageCode,
        $timezoneName,
        $nowTimestamp = null
    ) {
        $datetimeCollection = new SpaceDatetimeCollection();

        foreach ($componentInspectionCollection as $componentInspection) {
            $datetimeCollection->appendBean($componentInspection->getCreateDatetime());
            $datetimeCollection->appendBean($componentInspection->getModifyDatetime());
            $datetimeCollection->appendBean($componentInspection->getComponentModifyDatetime());
        }

        SpaceDatetimeUtility::constructionDisplayDatetime($datetimeCollection,
            $datetimeFormatObj, $displayType, $languageCode, $timezoneName,
            $nowTimestamp);
    }


    /**
     * InspectionCollectionAbstractオブジェクト内の表示日時を作成する
     *
     * @param     InspectionCollectionAbstract $inspectionCollection InspectionCollectionAbstract
     * @param     DatetimeFormat               $datetimeFormatObj    DatetimeFormat
     * @param     boolean                      $displayType          The constant has been defined in oneself.
     * @param     string                       $languageCode         dispaly language code.
     * @param     string                       $timezoneName         Timezone name
     * @param     string                       $nowTimestamp         Timestamp at now
     *
     * @throws    GrnInvalidArgumentException        displayType is not constant. or languageCode is not language code.
     * @throws    \grn\space\common\exception\GrnArgumentOutOfRangeException   displayType specified it excluding the constant.
     */
    static public function constructionInspectionDisplayDatetime(
        InspectionCollectionAbstract $inspectionCollection,
        DatetimeFormat $datetimeFormatObj,
        $displayType,
        $languageCode,
        $timezoneName,
        $nowTimestamp = null
    ) {
        $datetimeCollection = new SpaceDatetimeCollection();

        foreach ($inspectionCollection as $inspacetionObj) {
            $datetimeCollection->appendBean($inspacetionObj->getCreateDatetime());
            $datetimeCollection->appendBean($inspacetionObj->getModifyDatetime());
        }

        SpaceDatetimeUtility::constructionDisplayDatetime($datetimeCollection,
            $datetimeFormatObj, $displayType, $languageCode, $timezoneName,
            $nowTimestamp);
    }

    /**
     * SpaceDatetimeCollectionオブジェクト内の表示日時を作成する
     *
     * @param     SpaceDatetimeCollection $datetimeCollection SpaceDatetimeCollection
     * @param     DatetimeFormat          $datetimeFormatObj  DatetimeFormat
     * @param     boolean                 $displayType        The constant has been defined in oneself.
     * @param     string                  $languageCode       dispaly language code.
     * @param     string                  $timezoneName       Timezone name
     * @param     string                  $nowTimestamp       Timestamp at now
     *
     * @throws    GrnInvalidArgumentException        displayType is not constant. or languageCode is not language code.
     * @throws    \grn\space\common\exception\GrnArgumentOutOfRangeException   displayType specified it excluding the constant.
     */
    static public function constructionDisplayDatetime(
        SpaceDatetimeCollection $datetimeCollection,
        DatetimeFormat $datetimeFormatObj,
        $displayType,
        $languageCode,
        $timezoneName,
        $nowTimestamp = null
    ) {
        ValidateUtility::isNumber($displayType, ValidateUtility::DISABLE_EMPTY);
        ValidateUtility::isLanguageCode($languageCode,
            ValidateUtility::DISABLE_EMPTY);
        ValidateUtility::isInTheRange($displayType,
            self::DISPLAY_TYPE_LONGDATE_AND_TIME,
            self::DISPLAY_TYPE_DYNAMIC_IS_NOW_TIME,
            ValidateUtility::DISABLE_EMPTY);

        foreach ($datetimeCollection as $datetimeObject) {
            $datetimeObject->setDisplayDatetime(
                self::getDisplayDatetime(
                    $datetimeObject->getTimestamp(),
                    $datetimeFormatObj,
                    $displayType,
                    $languageCode,
                    $timezoneName,
                    $nowTimestamp
                ));
        }
    }
}

