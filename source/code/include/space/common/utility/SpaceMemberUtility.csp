<?php

namespace grn\space\common\utility;

use grn\grn\MemberLogic;
use grn\space\common\data\bean\LanguageStatus;

use grn\space\common\data\bean\SpaceMember;
use grn\space\common\logic\SpaceMemberLogic;
use grn\space\data\collection\SpaceUserCollection;

use grn\space\data\bean\SpaceUser;

use grn\space\common\data\bean\InspectionAbstract;
use grn\space\common\data\collection\SpaceMemberCollection;
use grn\space\common\data\collection\InspectionCollectionAbstract;
use grn\space\common\utility\ValidateUtility;
use grn\space\common\exception\GrnInvalidArgumentException;

/**
 * Importance!! : Use ServiceClass or neither LogicClass nor DBClass from UtilityClass.
 *
 * スペースメンバーユーティリティクラス
 * スペースメンバー情報を必要な形に加工するクラス
 **/
class SpaceMemberUtility
{
    const SYSTEM_USE_ENGLISH = true;
    const SYSTEM_DOESNT_USE_ENGLISH = false;

    const ENGLISH_DISPLAY_AFTER_NAME = true;
    const ENGLISH_DOESNT_DISPLAY_AFTER_NAME = false;

    const ORGANIZATION_DISPLAY_AFTER_NAME = true;
    const ORGANIZATION_DOESNT_DISPLAY_AFTER_NAME = false;

    /**
     * コンストラクタ
     *
     */
    private function __construct()
    {

    }

    /**
     * SpaceMemberCollectionオブジェクト内の表示ユーザー名を作成する
     *
     * @param     SpaceMemberCollection $spaceMemberCollection          SpaceMemberCollection
     * @param     string                $operationUserId
     * @param     boolean               $isSystemUseEnglish             TRUE: Enable "English spelling"     FALSE: Disable "English spelling"
     * @param     boolean               $isEnglishDisplayAfterName      TRUE:"English spelling" to display after Names          FALSE:It doesn't display it.
     * @param     boolean               $isOrganizationDisplayAfterName TRUE:"Priority organizations" to display after Names    FALSE:It doesn't display it.
     * @param     array                 $displayLanguageArray           Use local name of the user when his local name is written in the language which is in this array.
     * @param     string                $languageCode
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    isSystemUseEnglish or isEnglishDisplayAfterName or isOrganizationDisplayAfterName is not boolean.
     */
    static public function constructionUserDisplayName(
        SpaceMemberCollection $spaceMemberCollection,
        $operationUserId,
        $isSystemUseEnglish,
        $isEnglishDisplayAfterName,
        $isOrganizationDisplayAfterName,
        array $displayLanguageArray,
        $languageCode = LanguageStatus::STANDARD_LANGUAGE_CODE,
        $usePrefixId = false
    ) {
        ValidateUtility::isBoolean($isSystemUseEnglish);
        ValidateUtility::isBoolean($isEnglishDisplayAfterName);
        ValidateUtility::isBoolean($isOrganizationDisplayAfterName);

        global $G_container_base;
        $uum = $G_container_base->getInstance("uum");

        // data acquisition
        $users_primary_group_info_list = [];
        $group_info_list = [];
        $role_info_list = [];

        foreach ($spaceMemberCollection as $eachSpaceMember) {
            $member_id = $eachSpaceMember->getMemberID();
            $member_type = $eachSpaceMember->getMemberType();
            switch ($member_type) {
                case MemberLogic::TYPE_USER :
                    $users_primary_group_info_list[$member_id] = $member_id;
                    break;
                case MemberLogic::TYPE_ORGANIZATION :
                    $group_info_list[$member_id] = $member_id;
                    break;
                case MemberLogic::TYPE_STATIC_ROLE :
                    $role_info_list[$member_id] = $member_id;
                    break;
            }
        }

        if ($isOrganizationDisplayAfterName) {
            $users_primary_group_info_list
                = $uum->getManyUserPrimaryGroupInfoList($users_primary_group_info_list);
        }
        if (count($group_info_list) > 0) {
            $group_info_list = $uum->getGroupInfoList($group_info_list);
        }
        if (count($role_info_list) > 0) {
            $role_ids = implode("','", $role_info_list);
            $role_info_list = $uum->getStaticRoles(0, -1, "col_list_index, _id",
                "tab_cb_role._id IN('" . $role_ids . "')");
        }

        $display_member_info
            = self::getMemberDisplayInfo($spaceMemberCollection);

        /**
         * @type \grn\space\common\data\bean\SpaceMember $eachSpaceMember
         */
        foreach ($spaceMemberCollection as $eachSpaceMember) {
            $member_id = $eachSpaceMember->getMemberID();
            $member_type = $eachSpaceMember->getMemberType();

            switch ($member_type) {
                case MemberLogic::TYPE_USER :
                    if (ValidateUtility::isNull($member_id)
                        || $eachSpaceMember->isDeleted()
                    ) {
                        $eachSpaceMember->setDisplayName(
                            $eachSpaceMember->getUserName()
                            . cb_msg('grn.common', 'deleted_user', null,
                                ($languageCode
                                 == LanguageStatus::STANDARD_LANGUAGE_CODE)
                                    ? null : $languageCode)
                        );
                        continue 2;
                    }

                    $eachSpaceMember->setIsLoginUser($display_member_info[$member_id][MemberLogic::IS_LOGIN_USER]);
                    $eachSpaceMember->setIsInvalidUser($display_member_info[$member_id][MemberLogic::IS_INVALID_USER]);
                    $eachSpaceMember->setIsNotUsingApp($display_member_info[$member_id][MemberLogic::IS_NOT_USING_APP]);

                    $name = "";
                    if ($isSystemUseEnglish) //Use English spelling
                    {
                        if ($eachSpaceMember->getDisplayNameLanguage() == null
                            ||
                            ! in_array($eachSpaceMember->getDisplayNameLanguage(),
                                $displayLanguageArray)
                        ) {
                            if (strlen($eachSpaceMember->getNickName()) == 0) {
                                $name = $eachSpaceMember->getUserName();
                            } else {
                                $name = $eachSpaceMember->getNickName();
                            }
                        } else {
                            $name = $eachSpaceMember->getUserName();
                            if ($isEnglishDisplayAfterName) {
                                if (strlen($eachSpaceMember->getNickName())
                                    > 0
                                ) {
                                    $name .= " ("
                                             . $eachSpaceMember->getNickName()
                                             . ")";
                                }
                            }
                        }

                    } else {
                        $name = $eachSpaceMember->getUserName();
                    }

                    if ($isOrganizationDisplayAfterName) {
                        $primary_group = \cb_at($users_primary_group_info_list,
                            $eachSpaceMember->getMemberID());
                        if (is_array($primary_group)
                            && isset($primary_group['col_name'])
                        ) {
                            $name .= '; ' . $primary_group['col_name'];
                        }
                    }

                    $eachSpaceMember->setDisplayName($name);
                    break;
                case MemberLogic::TYPE_ORGANIZATION :
                    $group_info = \cb_at($group_info_list, $member_id);
                    if (is_array($group_info)
                        && isset($group_info['col_name'])
                    ) {
                        $display_name = $group_info['col_name'];
                        if ($usePrefixId) {
                            $member_id
                                = SpaceMemberUtility::createMemberUniqueId($member_id,
                                MemberLogic::TYPE_ORGANIZATION);
                        }
                        $eachSpaceMember->setMemberID($member_id);
                        $eachSpaceMember->setDisplayName($display_name);
                    } else {
                        throw new GrnInvalidArgumentException();
                    }
                    break;
                case MemberLogic::TYPE_STATIC_ROLE :
                    $static_role = \cb_at($role_info_list,
                        $eachSpaceMember->getMemberID());
                    if (is_object($static_role)
                        && $static_role->get('foreign_key')
                    ) {
                        $display_name = $static_role->get('foreign_key');
                        if ($usePrefixId) {
                            $member_id
                                = SpaceMemberUtility::createMemberUniqueId($member_id,
                                MemberLogic::TYPE_STATIC_ROLE);
                        }
                        $eachSpaceMember->setMemberID($member_id);
                        $eachSpaceMember->setDisplayName($display_name);
                    } else {
                        throw new GrnInvalidArgumentException();
                    }
                    break;
                default :
                    throw new GrnInvalidArgumentException();
            }

        }
    }

    /**
     * <pre>
     * Pick out only the Space Member ID.
     *
     * Space Member User ID :"(userID):(groupID)" or "(userID)"
     * Space Member Group ID :"(g)(groupID)"
     * Space Member Role ID :"(r)(groupID)"
     *
     * @param string $target_id
     *
     * @return array
     */
    static public function getPickoutMemberInfo($target_id)
    {
        $member_info = explode(":", $target_id);
        $member = $member_info[0];
        $type = '';
        $id = '';
        if (strpos($member, MemberLogic::PREFIX_ORGANIZATION) === 0) {
            $target = substr($member, 1, strlen($member));
            if (ValidateUtility::isNumber($target)) {
                $type = MemberLogic::TYPE_ORGANIZATION;
                $id = $target;
            }
        } elseif (strpos($member, MemberLogic::PREFIX_STATIC_ROLE) === 0) {
            $target = substr($member, 1, strlen($member));
            if (ValidateUtility::isNumber($target)) {
                $type = MemberLogic::TYPE_STATIC_ROLE;
                $id = $target;
            }
        } elseif (ValidateUtility::isNumber($member)) {
            $type = MemberLogic::TYPE_USER;
            $id = $member;
        }

        return ['type' => $type, 'id' => $id];
    }

    /**
     *
     * @return array login user group ids
     */
    static function getLoginUserGroupIds()
    {
        $login = \cb_get_login_user();

        $uum = \cb_lwc_uum();
        $user_groups_info = $uum->getUserGroupsInfo($login->getOID());

        $user_group_ids = [];
        foreach ($user_groups_info as $info) {
            $user_group_ids[$info['_id']] = $info['_id'];
        }

        return $user_group_ids;
    }

    /**
     *
     * @return array login user role ids
     */
    static function getLoginUserRoleIds()
    {
        $login = \cb_get_login_user();

        $uum = \cb_lwc_uum();
        $user_roles_info = $uum->getUserRolesInfo($login->getOID());

        $user_role_ids = [];
        foreach ($user_roles_info as $info) {
            $user_role_ids[$info['_id']] = $info['_id'];
        }

        return $user_role_ids;
    }

    /**
     * @param $id
     * @param $type
     *
     * @return string
     */
    public static function createMemberUniqueId($id, $type)
    {
        switch ($type) {
            case MemberLogic::TYPE_USER:
                return MemberLogic::PREFIX_USER . $id;
            case MemberLogic::TYPE_ORGANIZATION:
                return MemberLogic::PREFIX_ORGANIZATION . $id;
            case MemberLogic::TYPE_STATIC_ROLE:
                return MemberLogic::PREFIX_STATIC_ROLE . $id;
            default:
                return $id;
        }
    }

    /**
     * @param SpaceMemberCollection $space_member_collection
     *
     * @return array
     */
    private static function getMemberDisplayInfo(
        SpaceMemberCollection $space_member_collection
    ) {
        $target_member_list = [];

        /** @var SpaceMember $space_member */
        foreach ($space_member_collection as $space_member) {
            $member_id = $space_member->getMemberID();
            $member_type = $space_member->getMemberType();

            $member_id = SpaceMemberUtility::createMemberUniqueId($member_id,
                $member_type);

            $target_member_list[$member_id][MemberLogic::MEMBER_ID]
                = $member_id;
            $target_member_list[$member_id][MemberLogic::MEMBER_TYPE]
                = $member_type;
        }

        $space_member_logic = SpaceMemberLogic::getInstance();
        $display_member_info_list
            = $space_member_logic->getDisplayMemberList($target_member_list);

        $result = [];
        foreach ($display_member_info_list as $display_member_info) {
            if (isset($display_member_info[MemberLogic::IS_DELETED])
                && $display_member_info[MemberLogic::IS_DELETED]
            ) {
                continue;
            }

            $member_id = $display_member_info[MemberLogic::MEMBER_ID];
            $result[$member_id][MemberLogic::IS_LOGIN_USER]
                = cb_at($display_member_info,
                MemberLogic::IS_LOGIN_USER);
            $result[$member_id][MemberLogic::IS_INVALID_USER]
                = cb_at($display_member_info,
                MemberLogic::IS_INVALID_USER);
            $result[$member_id][MemberLogic::IS_NOT_USING_APP]
                = cb_at($display_member_info,
                MemberLogic::IS_NOT_USING_APP);
        }

        return $result;
    }

    /**
     * @param       $target_user_id
     * @param array $space_user_ids
     *
     * @return bool
     */
    public static function isMember($target_user_id, array $space_user_ids)
    {

        foreach (array_keys($space_user_ids) as $space_user_id) {
            if ($space_user_id == $target_user_id) {
                return true;
            }
        }

        return false;
    }

}

