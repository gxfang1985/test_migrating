<?php

namespace grn\space\common\utility;


use grn\space\common\utility\ValidateUtility;
use grn\space\common\data\collection\CategoryCollection;
use grn\space\common\data\bean\Category;
use grn\space\data\CategoryTreeSession;

/**
 * Importance!! : Use ServiceClass or neither LogicClass nor DBClass from UtilityClass.
 *
 * カテゴリユーティリティクラス
 * カテゴリ情報を必要な形に加工するクラス
 **/
class CategoryUtility
{
    const HIERARCHY_LEVEL_TOP_CATEGORY = 2;

    /**
     * コンストラクタ
     */
    private function __construct()
    {

    }


    /**
     * JSON that expresses the category tree is build.
     *
     * @param     \grn\space\common\data\collection\CategoryCollection $categoryCollection  CategoryCollection
     * @param     \grn\space\data\CategoryTreeSession                  $categoryTreeSession category open status array (categoryId => boolean)
     *
     * @return    string        JSON string
     */
    static public function buildJsonCategoryTreeInfo(
        CategoryCollection $categoryCollection,
        CategoryTreeSession $categoryTreeSession
    ) {
        $categoryRelation = self::buildCategoryRelation($categoryCollection);
        $topCategories
            = self::filterCategoryCollectionByHierarchyLevel($categoryCollection,
            self::HIERARCHY_LEVEL_TOP_CATEGORY);

        $result = [];
        foreach ($topCategories->getIterator() as $eachTopCategory) {
            $result[] = self::buildArrayCategoryTreeForJSON($eachTopCategory,
                $categoryTreeSession, $categoryRelation);
        }

        return json_encode($result);
    }

    /**
     * Return the array to be converted to JSON、
     *
     * @param Category            $category
     * @param CategoryTreeSession $categoryTreeSession
     * @param                     $categoryRelation
     *
     * @return array
     * @throws \grn\space\common\exception\GrnInvalidArgumentException
     */
    static private function buildArrayCategoryTreeForJSON(
        Category $category,
        CategoryTreeSession $categoryTreeSession,
        $categoryRelation
    ) {
        $childrenResultArray = [];
        if (array_key_exists($category->getId(), $categoryRelation)) {
            $childCategories = $categoryRelation[$category->getId()];
            foreach ($childCategories as $childCategory) {
                $childrenResultArray[]
                    = self::buildArrayCategoryTreeForJSON($childCategory,
                    $categoryTreeSession, $categoryRelation);
            }
        }

        return [
            "oid"      => htmlspecialchars($category->getId()),
            "name"     => htmlspecialchars($category->getCategoryName()),
            "expanded" => htmlspecialchars($categoryTreeSession->isCategoryOpen($category->getId())
                ? 1 : 0),
            "count"    => htmlspecialchars($category->countChildlen()),
            "children" => $childrenResultArray,
        ];
    }

    /**
     * Make an array to resolve the child categories of a specific category.
     *
     * You can get CategoryCollection of the child categories by $result[$category->getId()]
     *
     * @param CategoryCollection $categoryCollection
     *
     * @return array<CategoryCollection>
     */
    static private function buildCategoryRelation(
        CategoryCollection $categoryCollection
    ) {
        $result = [];
        foreach ($categoryCollection->getIterator() as $eachCategory) {
            if ( ! array_key_exists($eachCategory->getParentCategoryId(),
                $result)
            ) {
                $result[$eachCategory->getParentCategoryId()]
                    = new CategoryCollection();
            }
            $result[$eachCategory->getParentCategoryId()]->appendBean($eachCategory);
        }

        return $result;
    }

    /**
     * filter CategoryCollection by the hierarchy level of each Category
     *
     * @param CategoryCollection $categoryCollection
     * @param integer            $hierarchyLevel
     *
     * @return CategoryCollection
     */
    static private function filterCategoryCollectionByHierarchyLevel(
        CategoryCollection $categoryCollection,
        $hierarchyLevel
    ) {
        $result = new CategoryCollection();
        foreach ($categoryCollection->getIterator() as $eachCategory) {
            if ($eachCategory->getHierarchyLevel() == $hierarchyLevel) {
                $result->appendBean($eachCategory);
            }
        }

        return $result;
    }

    /**
     * @param Category $category
     *
     * @return array
     */
    public static function getView(Category $category)
    {
        $result = [];
        $arr = $category->convertArray();
        foreach ($arr as $key => $value) {
            if ($key == '_id') {
                $result['cid'] = $value;
            } else {
                $result[str_replace("col_", "", $key)] = $value;
            }
        }

        return $result;
    }
}

