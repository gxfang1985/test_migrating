<?php

namespace grn\space\common\utility;

use grn\space\common\data\bean\Application;
use grn\space\common\data\bean\LanguageStatus;
use grn\space\common\exception\GrnInvalidArgumentException;
use grn\space\common\exception\GrnArgumentOutOfRangeException;


/**
 * Importance!! : Use ServiceClass or neither LogicClass nor DBClass from UtilityClass.
 *
 * validateユーティリティクラス
 **/
class ValidateUtility
{
    /**
     * exception throw
     */
    const EXCEPTION_THROW = true;

    /**
     * exception not throw
     */
    const EXCEPTION_NOT_THROW = false;

    /**
     * empty is enable.
     */
    const ENABLE_EMPTY = true;

    /**
     * empty is disable.
     */
    const DISABLE_EMPTY = false;

    /**
     * コンストラクタ
     *
     */
    private function __construct()
    {

    }


    /**
     * 内部アプリケーションか検証する
     *
     * @param     string  $value         application code
     * @param     boolean $isEnableEmpty TRUE:enable empty   FALSE:disable empty
     * @param     boolean $isThrow       TRUE:exception throw   FALSE:exception not throw
     *
     * @return    boolean       TRUE : $value is internal application   if isThrow = EXCEPTION_NOT_THROW then FALSE: external applicaton
     * @throws    GrnInvalidArgumentException
     */
    static public function isInternalApplication(
        $value,
        $isEnableEmpty = ValidateUtility::ENABLE_EMPTY,
        $isThrow = ValidateUtility::EXCEPTION_THROW
    ) {
        switch ($value) {
            case Application::APPLICATION_CODE_DISCUSSION:
            case Application::APPLICATION_CODE_TODO:
                return true;
                break;

            default:
                if ($isEnableEmpty === ValidateUtility::ENABLE_EMPTY) {
                    if (ValidateUtility::isNull($value)) {
                        return true;
                    }
                }

                if ($isThrow) {
                    throw new GrnInvalidArgumentException();
                } else {
                    return false;
                }
                break;
        }
    }


    /**
     * 値が言語コードか検証する
     *
     * @param     string  $value
     * @param     boolean $isEnableEmpty TRUE:enable empty   FALSE:disable empty
     * @param     boolean $isThrow       TRUE:exception throw   FALSE:exception not throw
     *
     * @throws    GrnInvalidArgumentException    It is not number.
     * @return    boolean       TRUE : $value is language code   if isThrow = EXCEPTION_NOT_THROW then FALSE : $value is not language code
     */
    static public function isLanguageCode(
        $value,
        $isEnableEmpty = ValidateUtility::ENABLE_EMPTY,
        $isThrow = ValidateUtility::EXCEPTION_THROW
    ) {
        if ($value === LanguageStatus::STANDARD_LANGUAGE_CODE) {
            return true;
        }

        require_once('fw/i18n.csp');
        $i18n = \CB_I18N::getInstance();
        $availableLanguageArray = $i18n->getAvailableLanguages();

        if (in_array($value, $availableLanguageArray) === false) {
            if ($isEnableEmpty === ValidateUtility::ENABLE_EMPTY) {
                if (ValidateUtility::isNull($value)) {
                    return true;
                }
            }

            if ($isThrow) {
                throw new GrnInvalidArgumentException();
            } else {
                return false;
            }
        }

        return true;
    }


    /**
     * booleanか検証する
     *
     * @param     boolean $value
     * @param     boolean $isEnableEmpty TRUE:enable empty   FALSE:disable empty
     * @param     boolean $isThrow       TRUE:exception throw   FALSE:exception not throw
     *
     * @throws    GrnInvalidArgumentException    It is not boolean.
     * @return    boolean       TRUE : $value is boolean    if isThrow = EXCEPTION_NOT_THROW then FALSE : $value is not boolean
     */
    static public function isBoolean(
        $value,
        $isEnableEmpty = ValidateUtility::ENABLE_EMPTY,
        $isThrow = ValidateUtility::EXCEPTION_THROW
    ) {
        if (is_bool($value) === false) {
            if ($isEnableEmpty === ValidateUtility::ENABLE_EMPTY) {
                if (ValidateUtility::isNull($value)) {
                    return true;
                }
            }

            if ($isThrow) {
                throw new GrnInvalidArgumentException();
            } else {
                return false;
            }
        }

        return true;
    }


    /**
     * 値が0-9のみの組み合わせか検証する
     * 先頭に「-」がある場合も許容する
     *
     * @param     string  $value
     * @param     boolean $isEnableEmpty TRUE:enable empty   FALSE:disable empty
     * @param     boolean $isThrow       TRUE:exception throw   FALSE:exception not throw
     *
     * @throws    GrnInvalidArgumentException    It is not number.
     * @return    boolean       TRUE : $value is number   if isThrow = EXCEPTION_NOT_THROW then FALSE : $value is not number
     */
    static public function isNumber(
        $value,
        $isEnableEmpty = ValidateUtility::ENABLE_EMPTY,
        $isThrow = ValidateUtility::EXCEPTION_THROW
    ) {
        if ( ! is_null($value) && ! is_string($value) && ! is_int($value)) {
            if ($isThrow) {
                throw new GrnInvalidArgumentException();
            } else {
                return false;
            }
        }

        if ( ! is_int($value) && ! ctype_digit($value)
             && ! (strlen($value) > 1
                   && $value[0] == '-'
                   && ctype_digit(substr($value, 1)))
        ) {
            if ($isEnableEmpty === ValidateUtility::ENABLE_EMPTY) {
                if (ValidateUtility::isNull($value)) {
                    return true;
                }
            }

            if ($isThrow) {
                throw new GrnInvalidArgumentException();
            } else {
                return false;
            }
        }

        return true;
    }


    /**
     * 値が範囲内か検証する
     *
     * @param     int     $value
     * @param     int     $startRange
     * @param     int     $endRange
     * @param     boolean $isEnableEmpty TRUE:enable empty   FALSE:disable empty
     * @param     boolean $isThrow       TRUE:exception throw   FALSE:exception not throw
     *
     * @throws    GrnArgumentOutOfRangeException    Value is out of range.
     * @return    boolean       TRUE : $value in the range    if isThrow = EXCEPTION_NOT_THROW then FALSE : $value is out of range
     */
    static public function isInTheRange(
        $value,
        $startRange,
        $endRange,
        $isEnableEmpty = ValidateUtility::ENABLE_EMPTY,
        $isThrow = ValidateUtility::EXCEPTION_THROW
    ) {
        if ($startRange > $value || $value > $endRange) {
            if ($isEnableEmpty === ValidateUtility::ENABLE_EMPTY) {
                if (ValidateUtility::isNull($value)) {
                    return true;
                }
            }

            if ($isThrow) {
                throw new GrnArgumentOutOfRangeException();
            } else {
                return false;
            }
        }

        return true;
    }


    /**
     * 値が指定した配列の中にあるかどうか
     *
     * @param     string  $value
     * @param     array   $candidates
     * @param     boolean $isEnableEmpty TRUE:enable empty   FALSE:disable empty
     * @param     boolean $isThrow       TRUE:exception throw   FALSE:exception not throw
     *
     * @throws    GrnArgumentOutOfRangeException    Value is out of range.
     * @return    boolean       TRUE : $value in the range    if isThrow = EXCEPTION_NOT_THROW then FALSE : $value is out of range
     */
    static public function isIn(
        $value,
        $candidates = [],
        $isEnableEmpty = ValidateUtility::ENABLE_EMPTY,
        $isThrow = ValidateUtility::EXCEPTION_THROW
    ) {
        if ( ! in_array($value, $candidates)) {
            if ($isEnableEmpty === ValidateUtility::ENABLE_EMPTY) {
                if (ValidateUtility::isNull($value)) {
                    return true;
                }
            }

            if ($isThrow) {
                throw new GrnArgumentOutOfRangeException();
            } else {
                return false;
            }
        }

        return true;
    }

    /**
     * null、空文字か検証する
     *
     * @param     string $value
     *
     * @return    string       TRUE : $value is null or emtpy   FALSE : $value is not null
     */
    static public function isNull($value)
    {
        if (empty($value) && ! is_array($value) && ! is_object($value)
            && (strlen($value) === 0)
            && $value !== false
        ) {
            return true;
        }

        return false;
    }

    /**
     * 値があるか検証する
     *
     * @param     string $value
     *
     * @return    string       TRUE : $value is not null    FALSE : $value is null or emtpy
     */
    static public function isNotNull($value)
    {
        return ! ValidateUtility::isNull($value);
    }

    /**
     * Return true when the argument is string and its length is longer than $minLength
     *
     * @param string  $value ,
     * @param integer $minLength
     *
     * @return boolean
     */
    static public function isLongerThan($value, $minLength)
    {
        if (is_string($value) && strlen($value) > $minLength) {
            return true;
        }

        return false;
    }

    /**
     * Return true when the argument is string and its length is shorter than $maxLength
     *
     * @param string  $value ,
     * @param integer $maxLength
     *
     * @return boolean
     */
    static public function isShorterThan($value, $maxLength)
    {
        if (is_string($value) && strlen($value) < $maxLength) {
            return true;
        }

        return false;
    }

    /**
     * マルチバイト対応
     *
     * @param $value
     * @param $minLength
     *
     * @return bool
     */
    static public function isMultiLongerThan($value, $minLength)
    {
        if (mb_strlen($value, "UTF-8") > $minLength) {
            return true;
        }

        return false;
    }

    /**
     * マルチバイト対応
     *
     * @param $value
     * @param $maxLength
     *
     * @return bool
     */
    static public function isMultiShorterThan($value, $maxLength)
    {
        if (mb_strlen($value, "UTF-8") <= $maxLength) {
            return true;
        }

        return false;
    }

}

