<?php

namespace grn\space\common\exception;

/**
 * The base class for all Garoon Exception.
 **/
class GrnException extends \Exception
{
    /**
     * garoonエラーコードを保持する
     */
    private $_errorCode;

    /**
     * エラーの診断文を保持する
     */
    private $_diagnosis;

    /**
     * エラーの原因を保持する
     */
    private $_cause;

    /**
     * エラーの対策を保持する
     */
    private $_counter;

    /**
     * 開発者用エラー情報を保持する
     */
    private $_developerInfo;


    /**
     * コンストラクタ
     *
     * @param    string $errorCode error code
     */
    public function __construct($errorCode = ErrorCode::GRN_UNEXPECTED_ERROR)
    {
        parent::__construct();

        $this->setErrorCode($errorCode);
        $this->setDiagnosis(null);
        $this->setCause(null);
        $this->setCounter(null);
        $this->setDeveloperInfo(null);
    }

    /**
     * garoonのエラーコードを取得する
     *
     * @final
     * @return    string       error code.
     */
    final public function getErrorCode()
    {
        return $this->_errorCode;
    }

    /**
     * garoonのエラーコードを設定する
     *
     * @final
     *
     * @param     string $errorCode The constant has been defined in oneself.
     *
     * @throws    GrnArgumentOutOfRangeException
     */
    final public function setErrorCode($errorCode)
    {
        $this->_errorCode = $errorCode;
    }

    /**
     * エラー診断を取得する
     *
     * @final
     * @return    string       error diagnosis.
     */
    final public function getDiagnosis()
    {
        return $this->_diagnosis;
    }

    /**
     * エラー診断を設定する
     *
     * @final
     *
     * @param     $diagnosis        string of diagnostic.
     */
    final public function setDiagnosis($diagnosis)
    {
        $this->_diagnosis = $diagnosis;
    }

    /**
     * エラー原因を取得する
     *
     * @final
     * @return    string       error cause.
     */
    final public function getCause()
    {
        return $this->_cause;
    }

    /**
     * エラー原因を設定する
     *
     * @final
     *
     * @param     $cause        string of cause.
     */
    final public function setCause($cause)
    {
        $this->_cause = $cause;
    }

    /**
     * エラー対策を取得する
     *
     * @final
     * @return    string       error counter.
     */
    final public function getCounter()
    {
        return $this->_counter;
    }

    /**
     * エラー対策を設定する
     *
     * @final
     *
     * @param     $counter      string of counter.
     */
    final public function setCounter($counter)
    {
        $this->_counter = $counter;
    }

    /**
     * 開発者向け情報を取得する
     *
     * @final
     * @return    string       Developer Info string.
     */
    final public function getDeveloperInfo()
    {
        return $this->_developerInfo;
    }

    /**
     * 開発者向け情報を設定する
     *
     * @final
     *
     * @param     $developer      string of developer info.
     */
    final public function setDeveloperInfo($developer)
    {
        $this->_developerInfo = $developer;
    }
}
