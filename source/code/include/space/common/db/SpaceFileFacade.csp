<?php

namespace grn\space\common\db;

use grn\space\common\data\collection\CategoryCollection;

use grn\space\data\collection\SpaceCollection;

use grn\space\common\data\collection\CommentCollection;
use grn\space\common\data\condition\SpaceFileSearchCondition;
use grn\space\common\db\dao\SpaceFileDAO;
use grn\space\data\collection\SynthesisThreadCommentCollection;

/**
 * Database Front Layer
 * This layer mediates the business logic layer and the DB layer.
 * Also, keep a log if needed.
 *
 * SpaceFile Facade class
 * Accept requests from the business logic layer for all space-file information
 **/
class SpaceFileFacade
{
    //************************************************************************************************
    //***********************************        space file        ***********************************
    //************************************************************************************************
    /**
     * Get to the space file.
     *
     * @param string $fileId file sequence id
     *
     * @throws \grn\space\common\exception\GrnDataNotFoundException     When the specified file is not found.
     * @throws \grn\space\common\exception\GrnDatabaseException         Any error in the database.
     * @return \grn\space\common\data\bean\SpaceFile
     */
    public function getSpaceFile($fileId)
    {
        $fileDAO = new SpaceFileDAO();

        return $fileDAO->selectSpaceFile($fileId);
    }

    /**
     * Find space files.
     *
     * @param  \grn\space\common\data\condition\SpaceFileSearchCondition $searchCondition SpaceFileSearchCondition
     *
     * @throws \grn\space\common\exception\GrnDatabaseException     Any error in the database.
     * @return \grn\space\common\data\collection\SpaceFileCollection
     */
    public function selectSpaceFileList(
        SpaceFileSearchCondition $searchCondition
    ) {
        $fileDAO = new SpaceFileDAO();

        return $fileDAO->selectSpaceFileList($searchCondition);
    }

    /**
     * Find space files with SpaceFileCollection of each commentId
     *
     * @param  \grn\space\common\data\collection\CommentCollection $commentCollection CommentCollection
     *
     * @throws \grn\space\common\exception\GrnDatabaseException     Any error in the database.
     * @return array {comment sequence id, SpaceFileCollection}
     */
    public function selectSpaceFileListByCommentCollection(
        CommentCollection $commentCollection
    ) {
        $fileDAO = new SpaceFileDAO();

        return $fileDAO->selectSpaceFileListByCommentCollection($commentCollection);
    }

    /**
     * Find space files with SpaceFileCollection of each threadId
     *
     * @param  \grn\space\data\collection\SynthesisThreadCommentCollection $synthesisThreadCommentCollection SynthesisThreadCommentCollection
     *
     * @throws \grn\space\common\exception\GrnDatabaseException        Any error in the database.
     * @return array {thread sequence id, SpaceFileCollection}
     */
    public function selectSpaceFileCollectionsArrayBySynthesisThreadCommentCollection(
        SynthesisThreadCommentCollection $synthesisThreadCommentCollection
    ) {
        $fileDAO = new SpaceFileDAO();
        $resultFileCollectionArray
            = $fileDAO->selectSpaceFileCollectionsArrayBySynthesisThreadCommentCollection($synthesisThreadCommentCollection);

        return $resultFileCollectionArray;
    }

    /**
     * Calculate the amount of file usage
     *
     * @param \grn\space\data\collection\SpaceCollection $spaceCollection
     *
     * @return void
     */
    public function addFileUsage(SpaceCollection $spaceCollection)
    {
        $fileDAO = new SpaceFileDAO();
        $fileDAO->addFileUsage($spaceCollection);

        return;
    }

    /**
     * Find space files with CategoryCollection of each categoryId
     *
     * @param  \grn\space\common\data\collection\CategoryCollection $categoryCollection CategoryCollection
     *
     * @throws \grn\space\common\exception\GrnDatabaseException     Any error in the database.
     * @return \grn\space\common\data\collection\SpaceFileCollection
     */
    public function selectSpaceFileListByCategoryCollection(
        CategoryCollection $categoryCollection
    ) {
        $fileDao = new SpaceFileDAO();

        return $fileDao->selectSpaceFileListByCategoryCollection($categoryCollection);
    }

    /**
     * Calculate the file size consumed by this category.
     *
     * This function walks into its descendant categories with ignoring access rights and sum them up.
     *
     * @param string $categoryId
     *
     * @return string amount size
     */
    public function getFileUsageOfCategory($categoryId)
    {
        $fileDao = new SpaceFileDAO();

        return $fileDao->getFileUsageOfCategory($categoryId);
    }

    /**
     * @param int $startId
     * @param int $endId
     *
     * @return array
     */
    public function getAllSpaceFileForFtsFullIndexer($startId, $endId)
    {
        $fileDao = new SpaceFileDAO();

        return $fileDao->getAllSpaceFileForFtsFullIndexer($startId, $endId);
    }
}
