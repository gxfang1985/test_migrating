<?php

namespace grn\space\common\db;

use grn\space\common\data\collection\CategoryCollection;

use grn\space\data\collection\SpaceCollection;

use grn\space\common\data\bean\Comment;
use grn\space\common\data\bean\CommentSequenceNo;
use grn\space\common\data\collection\CommentCollection;
use grn\space\common\data\condition\CommentSearchCondition;
use grn\space\common\db\dao\CommentDAO;
use grn\space\common\db\dao\CommentHierarchyDAO;
use grn\space\common\db\dao\CommentSequenceNoDAO;
use grn\space\common\db\dao\CommentFileDAO;
use grn\space\common\db\dao\CommentReadStatusDAO;

/**
 * Database Front Layer
 * This layer mediates the business logic layer and the DB layer.
 * Also, keep a log if needed.
 *
 * Comment Facade class
 * Accept requests from the business logic layer for all Comment infomation
 */
class CommentFacade
{
    //***************************************************************************************************
    //***********************************        comment        *****************************************
    //***************************************************************************************************
    /**
     * comment is inserted.
     *
     * @param \grn\space\common\data\bean\Comment $comment
     *
     * @throws \grn\space\common\exception\GrnDatabaseException     Any error in the database.
     * @return \grn\space\common\data\bean\Comment
     */
    public function insertComment(Comment $comment)
    {
        $commentDAO = new CommentDAO();
        $newComment = $commentDAO->insertComment($comment);

        return $newComment;
    }

    /**
     * comment is logical deleted
     *
     * @param \grn\space\common\data\bean\Comment $comment
     *
     * @throws \grn\space\common\exception\GrnDatabaseException         Any error in the database.
     * @return \grn\space\common\data\bean\Comment
     */
    public function logicalDeleteComment(Comment $comment)
    {
        $commentDAO = new CommentDAO();
        $comment = $commentDAO->logicalDeleteComment($comment);

        return $comment;
    }

    /**
     * Get to the comment.
     *
     * @param string $commentId comment sequence id
     *
     * @return \grn\space\common\data\bean\Comment
     * @throws \grn\space\common\exception\GrnDataNotFoundException     When the specified comment is not found.
     * @throws \grn\space\common\exception\GrnDatabaseException         Any error in the database.
     */
    public function getComment($commentId)
    {
        $commentDAO = new CommentDAO();

        return $commentDAO->selectComment($commentId);
    }

    /**
     * The existence confirmation of Comment.
     *
     * @param string $spaceId   space sequence id
     * @param string $threadId  thread sequence id
     * @param string $commentId comment sequence id
     *
     * @throws \grn\space\common\exception\GrnDatabaseException     comment is not found
     * @return bool                     Comment is exists : TRUE   Comment is not exists : FALSE
     */
    public function isExistsCommentBySpaceIdThreadIdCommentId(
        $spaceId,
        $threadId,
        $commentId
    ) {
        $commentDAO = new CommentDAO();

        return $commentDAO->isExistsCommentBySpaceIdThreadIdCommentId($spaceId,
            $threadId, $commentId);
    }

    /**
     * The existence confirmation of Comment.
     *
     * @param string $spaceId   space sequence id
     * @param string $threadId  thread sequence id
     * @param string $todoId    todo sequence id
     * @param string $commentId comment sequence id
     *
     * @throws \grn\space\common\exception\GrnDatabaseException     comment is not found
     * @return bool                     Comment is exists : TRUE   Comment is not exists : FALSE
     */
    public function isExistsCommentBySpaceIdThreadIdTodoIdCommentId(
        $spaceId,
        $threadId,
        $todoId,
        $commentId
    ) {
        $commentDAO = new CommentDAO();

        return $commentDAO->isExistsCommentBySpaceIdThreadIdTodoIdCommentId($spaceId,
            $threadId, $todoId, $commentId);
    }

    /**
     * In the condition of $commentSearchCondition, the row number of head comment is get.
     *
     * @param  \grn\space\common\data\condition\CommentSearchCondition $commentSearchCondition
     *
     * @throws \grn\space\common\exception\GrnDataNotFoundException             head comment is not found
     * @throws \grn\space\common\exception\GrnDatabaseException                 Any error in the database.
     * @return integer row number
     */
    public function getRowNumber(CommentSearchCondition $commentSearchCondition)
    {
        $commentDAO = new CommentDAO();

        switch ($commentSearchCondition->getSearchScopeType()) {
            case CommentSearchCondition::SEARCH_SCOPE_TYPE_THREAD :
                return $commentDAO->getThreadCommentRowNumber($commentSearchCondition);
                break;
            case CommentSearchCondition::SEARCH_SCOPE_TYPE_TODO :
                return $commentDAO->getTodoCommentRowNumber($commentSearchCondition);
                break;
            case CommentSearchCondition::SEARCH_SCOPE_TYPE_THREAD_AND_TODO :
                return $commentDAO->getThreadAndTodoCommentRowNumber($commentSearchCondition);
                break;
        }
    }

    /**
     * The number of comments that are newer than the condition of specifying it by the argument is counted.
     *
     * @param string $commentNo comment number
     * @param string $threadId  thread sequence id
     *
     * @throws \grn\space\common\exception\GrnDatabaseException         Any error in the database.
     * @return number of newer comments
     */
    public function countNewerCommentsOfThreadAndTodo($commentNo, $threadId)
    {
        $commentDAO = new CommentDAO();

        return $commentDAO->countNewerCommentsOfThreadAndTodo($commentNo,
            $threadId);
    }

    /**
     * Find parent comments.
     *
     * @param \grn\space\common\data\collection\CommentCollection $childrenCommentCollection
     *
     * @throws \grn\space\common\exception\GrnDatabaseException                     Any error in the database.
     * @return \grn\space\common\data\collection\CommentCollection
     */
    public function selectParentCommentListIgnoringLogicalDelete(
        CommentCollection $childrenCommentCollection
    ) {
        $commentDAO = new CommentDAO();

        return $commentDAO->selectParentCommentListIgnoringLogicalDelete($childrenCommentCollection);
    }

    /**
     * Find ancestor comments.
     *
     * @param string $commentId comment sequence id
     *
     * @throws \grn\space\common\exception\GrnDatabaseException     Any error in the database.
     * @return \grn\space\common\data\collection\CommentCollection
     */
    public function selectAncestorCommentList($commentId)
    {
        $commentDAO = new CommentDAO();

        return $commentDAO->selectAncestorCommentList($commentId);
    }

    /**
     * Find thread comments.
     *
     * @param \grn\space\common\data\condition\CommentSearchCondition $commentSearchCondition
     *
     * @throws \grn\space\common\exception\GrnDatabaseException                 Any error in the database.
     * @return \grn\space\common\data\collection\CommentCollection
     */
    public function selectCommentList(
        CommentSearchCondition $commentSearchCondition
    ) {
        $commentDAO = new CommentDAO();

        switch ($commentSearchCondition->getSearchScopeType()) {
            case CommentSearchCondition::SEARCH_SCOPE_TYPE_THREAD :
                return $commentDAO->selectThreadCommentList($commentSearchCondition);
                break;
            case CommentSearchCondition::SEARCH_SCOPE_TYPE_TODO :
                return $commentDAO->selectTodoCommentList($commentSearchCondition);
                break;

            case CommentSearchCondition::SEARCH_SCOPE_TYPE_THREAD_AND_TODO :
                return $commentDAO->selectThreadAndTodoCommentList($commentSearchCondition);
                break;
        }
    }

    //***************************************************************************************************************
    //***********************************        comment sequence no        *****************************************
    //***************************************************************************************************************
    /**
     * commentSequenceNo is inserted.
     *
     * @param \grn\space\common\data\bean\CommentSequenceNo $commentSequenceNo
     *
     * @throws \grn\space\common\exception\GrnDatabaseException             Any error in the database.
     * @return \grn\space\common\data\bean\CommentSequenceNo
     */
    public function insertCommentSequenceNo(CommentSequenceNo $commentSequenceNo
    ) {
        $commentSequenceNoDAO = new CommentSequenceNoDAO();
        $newCommentSuquenceNo
            = $commentSequenceNoDAO->insertCommentSequenceNo($commentSequenceNo);

        return $newCommentSuquenceNo;
    }

    /**
     * commentSequenceNo is deleted
     *
     * @param \grn\space\common\data\bean\CommentSequenceNo $commentSequenceNo
     *
     * @throws \grn\space\common\exception\GrnDataNotFoundException         When the specified commentSequenceNo is not found.
     * @throws \grn\space\common\exception\GrnDatabaseException             Any error in the database.
     * @return \grn\space\common\data\bean\CommentSequenceNo
     */
    public function deleteCommentSequenceNo(CommentSequenceNo $commentSequenceNo
    ) {
        $commentSequenceNoDAO = new CommentSequenceNoDAO();
        $commentSequenceNo
            = $commentSequenceNoDAO->deleteCommentSequenceNo($commentSequenceNo);

        return $commentSequenceNo;
    }

    /**
     * get next comment sequence no
     *
     * @param \grn\space\common\data\bean\CommentSequenceNo $commentSequenceNo
     *
     * @throws \grn\space\common\exception\GrnDatabaseException             Any error in the database.
     * @return \grn\space\common\data\bean\CommentSequenceNo
     */
    public function getNextCommentSequenceNo(
        CommentSequenceNo $commentSequenceNo
    ) {
        $commentSequenceNoDAO = new CommentSequenceNoDAO();
        $commentSequenceNo
            = $commentSequenceNoDAO->getNextCommentSequenceNo($commentSequenceNo);

        return $commentSequenceNo;
    }

    /**
     * Select to the commentSequenceNo.
     *
     * @param string $commentSequenceNoId commentSequenceNo sequence id
     *
     * @throws \grn\space\common\exception\GrnDataNotFoundException         When the specified commentSequenceNo is not found.
     * @throws \grn\space\common\exception\GrnDatabaseException             Any error in the database.
     * @return \grn\space\common\data\bean\CommentSequenceNo
     */
    public function selectCommentSequenceNo($commentSequenceNoId)
    {
        $commentSequenceNoDAO = new CommentSequenceNoDAO();
        $commentSequenceNo
            = $commentSequenceNoDAO->selectCommentSequenceNo($commentSequenceNoId);

        return $commentSequenceNo;
    }

    //***************************************************************************************************************
    //***********************************        comment hierarchy        ******************************************
    //***************************************************************************************************************
    /**
     * comment hierarchies is inserted.
     *
     * @param string                                              $commentId comment sequence id
     * @param \grn\space\common\data\collection\CommentCollection $ancestorCommentCollection
     *
     * @throws \grn\space\common\exception\GrnDatabaseException  Any error in the database.
     */
    public function insertCommentHierarchies(
        $commentId,
        CommentCollection $ancestorCommentCollection
    ) {
        $commentHierarchyDAO = new CommentHierarchyDAO();
        $commentHierarchyDAO->insertCommentHierarchies($commentId,
            $ancestorCommentCollection);
    }


    //*******************************************************************************************************
    //***********************************        comment file        *****************************************
    //*******************************************************************************************************
    /**
     * comment-file-relation is inserted.
     *
     * @param string $commentId comment sequence id
     * @param string $fileId    file sequence id
     *
     * @throws \grn\space\common\exception\GrnDatabaseException     Any error in the database.
     */
    public function insertCommentFileReletion($commentId, $fileId)
    {
        $commentFileDAO = new CommentFileDAO();
        $commentFileDAO->insertCommentFileReletion($commentId, $fileId);
    }


    //*****************************************************************************************************
    //***********************************        comment read status       *********************************
    //*****************************************************************************************************
    /**
     * comment-read-status is replace inserted.
     *
     * @param \grn\space\common\data\collection\CommentCollection $commentCollection
     * @param string                                              $userId user sequence id
     *
     * @throws \grn\space\common\exception\GrnDatabaseException         Any error in the database.
     */
    public function replaceInsertCommentReadStatus(
        CommentCollection $commentCollection,
        $userId
    ) {
        $commentReadStatusDAO = new CommentReadStatusDAO();
        $commentReadStatusDAO->replaceInsertCommentReadStatus($commentCollection,
            $userId);
    }

    /**
     * comment-read-status is deleted
     *
     * @param string $commentId comment sequence id
     *
     * @throws \grn\space\common\exception\GrnDatabaseException     Any error in the database.
     */
    public function deleteCommentReadStatusByCommentId($commentId)
    {
        $commentReadStatusDAO = new CommentReadStatusDAO();
        $commentReadStatusDAO->deleteCommentReadStatusByCommentId($commentId);
    }

    /**
     * Find comment-read-status.
     *
     * @param \grn\space\common\data\collection\CommentCollection $commentCollection
     * @param string                                              $userId user sequence id
     *
     * @throws \grn\space\common\exception\GrnDatabaseException         Any error in the database.
     * @return \grn\space\common\data\collection\CommentCollection
     */
    public function selectCommentReadStatusCollection(
        CommentCollection $commentCollection,
        $userId
    ) {
        $commentReadStatusDAO = new CommentReadStatusDAO();

        return $commentReadStatusDAO->selectCommentReadStatusCollection($commentCollection,
            $userId);
    }

    /**
     * Mark all the comments which are related to the thread specified by $threadId read by the user specified by $userId
     *
     * @param string $userId
     * @param string $threadId
     *
     * @return bool
     */
    public function markAllCommentReadByUserIdAndThreadId($userId, $threadId)
    {
        $commentReadStatusDAO = new CommentReadStatusDAO();

        return $commentReadStatusDAO->markAllCommentReadByUserIdAndThreadId($userId,
            $threadId);
    }

    /**
     * Delete Comments by todoIdArray
     *
     * @param array $todoIdArray Todo ID array
     *
     * @return resource
     */
    public function deleteCommentByTodoId(array $todoIdArray)
    {
        $commentDao = new CommentDAO();

        return $commentDao->deleteCommentByTodoId($todoIdArray);
    }

    /**
     * Delete Thread Comments by threadIdArray
     *
     * @param array $threadIdArray Thread ID array
     *
     * @return resource
     */
    public function deleteThreadCommentByThreadId(array $threadIdArray)
    {
        $commentDao = new CommentDAO();

        return $commentDao->deleteThreadCommentByThreadId($threadIdArray);
    }

    /**
     * Delete Todo Comments by threadIdArray
     *
     * @param array $threadIdArray Thread ID array
     *
     * @return resource
     */
    public function deleteTodoCommentByThreadId(array $threadIdArray)
    {
        $commentDao = new CommentDAO();

        return $commentDao->deleteTodoCommentByThreadId($threadIdArray);
    }

    /**
     * Delete CommentSequenceNo by CategoryIdArray
     *
     * @param \grn\space\common\data\collection\CategoryCollection $categoryCollection
     *
     * @return resource
     */
    public function deleteCommentSequenceNoByCategoryCollection(
        CategoryCollection $categoryCollection
    ) {
        $commentSequenceNoDao = new CommentSequenceNoDAO();

        return $commentSequenceNoDao->deleteCommentSequenceNoByCategoryCollection($categoryCollection);
    }

    /**
     * Delete ThreadComment by CategoryCollection
     *
     * @param \grn\space\common\data\collection\CategoryCollection $categoryCollection
     *
     * @return resource
     */
    public function deleteThreadCommentByCategoryCollection(
        CategoryCollection $categoryCollection
    ) {
        $commentDao = new CommentDAO();

        return $commentDao->deleteThreadCommentByCategoryCollection($categoryCollection);
    }

    /**
     * Delete TodoComment by CategoryCollection
     *
     * @param \grn\space\common\data\collection\CategoryCollection $categoryCollection
     *
     * @return resource
     */
    public function deleteTodoCommentByCategoryCollection(
        CategoryCollection $categoryCollection
    ) {
        $commentDao = new CommentDAO();

        return $commentDao->deleteTodoCommentByCategoryCollection($categoryCollection);
    }
}
