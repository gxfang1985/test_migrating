<?php

namespace grn\space\common\db\dao;

use grn\space\common\data\bean\CommentReadStatus;
use grn\space\common\data\collection\CommentCollection;
use grn\space\common\data\collection\CommentReadStatusCollection;
use grn\space\common\db\dao\DataAccessControlAbstract;
use grn\space\common\exception\GrnDatabaseException;


/**
 * Database Back Layer
 * This layer mediates the database front layer and the DB.
 *
 * Comment-read-status Facade Data Access Object Class
 * Accept requests from the database front layer for all Comment-read-status
 */
class CommentReadStatusDAO extends DataAccessControlAbstract
{
    /**
     * Mark read by the user specified by $userId on all the comments which are related to the thread specified by $threadId
     *
     * @param string $userId
     * @param string $threadId
     *
     * @return bool
     */
    public function markAllCommentReadByUserIdAndThreadId($userId, $threadId)
    {
        $query = cb_queryf($this->getDatabaseConnection(),
            'INSERT IGNORE ' .
            'tab_grn_space_comment_read_status ' .
            'SELECT ' .
            '\'@S\' AS col_user, tab_grn_space_todo_comment.col_comment ' .
            'FROM ' .
            'tab_grn_space_todo_comment, ' .
            'tab_grn_space_todo_thread ' .
            'WHERE ' .
            'tab_grn_space_todo_comment.col_todo = tab_grn_space_todo_thread.col_todo '
            .
            'AND ' .
            'tab_grn_space_todo_thread.col_thread = \'@S\' ' .
            'UNION ' .
            'SELECT ' .
            '\'@S\', tab_grn_space_thread_comment.col_comment ' .
            'FROM ' .
            'tab_grn_space_thread_comment ' .
            'WHERE ' .
            'tab_grn_space_thread_comment.col_thread = \'@S\'',
            $userId, $threadId, $userId, $threadId);

        return $this->getDatabaseConnection()->query($query);
    }

    /**
     * Insert a record into tab_grn_space_comment_read_status.
     * When the record exists, it replaces it.
     *
     * The returned value is a little tricky.
     * count($commentCollection) == return value : Only insert.
     * count($commentCollection) < return value  : The replacement is generated.
     *
     * @param CommentCollection $commentCollection
     * @param string            $userId user sequence id
     *
     * @throws GrnDatabaseException         Any error in the database.
     * @return integer the number of affected rows.
     */
    public function replaceInsertCommentReadStatus($commentCollection, $userId)
    {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query
                = "REPLACE INTO tab_grn_space_comment_read_status (col_comment, col_user) ";
            $query .= " VALUES ";

            $tempIsNeedComma = false;
            foreach ($commentCollection as $comment) {
                if ($tempIsNeedComma) {
                    $query .= ", ";
                }

                /** @var \grn\space\common\data\bean\Comment $comment */
                $query .= "('" . $dbConn->escape($comment->getId()) . "','"
                          . $dbConn->escape($userId) . "')";

                $tempIsNeedComma = true;
            }
            $query .= ";";

            $dbConn->query($query);

            return $dbConn->affected_rows();

        } catch (GrnDatabaseException $exception) {
            //GrnDatabaseException might be caught here someday...
            throw $exception;
        }
    }

    /**
     * The delete of comment-read-status is executed to the data base.
     *
     * @param string $commentId comment sequence id
     *
     * @throws GrnDatabaseException     Any error in the database.
     */
    public function deleteCommentReadStatusByCommentId($commentId)
    {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query
                = "DELETE FROM tab_grn_space_comment_read_status WHERE col_comment = '{$dbConn->escape($commentId)}';";

            $dbConn->query($query);
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }
    }

    /**
     * The select of comment-read-status is executed to the database.
     *
     * @param CommentCollection $commentCollection
     * @param string            $userId user sequence id
     *
     * @throws GrnDatabaseException         Any error in the database.
     * @return CommentReadStatusCollection
     */
    public function selectCommentReadStatusCollection(
        CommentCollection $commentCollection,
        $userId
    ) {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "SELECT";
            $query .= " col_comment AS _id, ";
            $query .= " col_user ";
            $query .= " FROM ";
            $query .= " tab_grn_space_comment_read_status ";
            $query .= " WHERE ";
            $query .= " col_user = '" . $dbConn->escape($userId) . "'";
            $query .= " AND col_comment IN (";

            $tempIsNeedComma = false;
            foreach ($commentCollection as $comment) {
                if ($tempIsNeedComma) {
                    $query .= ", ";
                }

                /** @var \grn\space\common\data\bean\Comment $comment */
                $query .= "'" . $dbConn->escape($comment->getId()) . "'";

                $tempIsNeedComma = true;
            }
            $query .= ");";


            $result = $dbConn->query($query);


            $commentReadStatusCollection = new CommentReadStatusCollection();
            while ($row = $dbConn->fetch_assoc($result)) {
                $commentReadStatusCollection->appendBean(new CommentReadStatus($row,
                    CommentReadStatus::NOT_CHECK_INPUT));
            }
            $dbConn->free_result($result);


            //search total count
            $commentReadStatusCollection->setCountNoLimit(count($commentReadStatusCollection));
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        return $commentReadStatusCollection;
    }
}
