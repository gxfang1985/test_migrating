<?php

namespace grn\space\common\db\dao;

use grn\space\common\db\dao\DataAccessControlAbstract;
use grn\space\common\data\bean\Authority;
use grn\space\common\exception\ErrorCode;
use grn\space\common\exception\GrnDatabaseException;
use grn\space\common\exception\GrnDataNotFoundException;

/**
 * Database Back Layer
 * This layer mediates the database front layer and the DB.
 *
 * Authority Data Access Object Class
 * Accept requests from the database front layer for all Authority
 */
class AuthorityDAO extends DataAccessControlAbstract
{
    /**
     * The select of a authority is executed to the database.
     *
     * @param string $authorityCode authority code
     *
     * @throws GrnDataNotFoundException     authority is not found
     * @throws GrnDatabaseException         Any error in the database.
     * @return Authority
     */
    public function selectAuthorityByAuthorityCode($authorityCode)
    {
        static $cache = [];
        if (isset($cache[$authorityCode])) {
            return $cache[$authorityCode];
        }

        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "SELECT ";
            $query .= " _id, ";
            $query .= " col_authority_code, ";
            $query .= " col_authority_name  ";
            $query .= " FROM tab_grn_space_authority";
            $query .= " WHERE col_authority_code = '{$dbConn->escape($authorityCode)}'";
            $query .= ";";

            $result = $dbConn->query($query);

            $row = $dbConn->fetch_assoc($result);
            $dbConn->free_result($result);
            if ( ! $row) {
                throw new GrnDataNotFoundException(ErrorCode::GRN_AUTHORITY_NOT_FOUND);
            }

            $authority = new Authority($row, Authority::NOT_CHECK_INPUT);
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        $cache[$authorityCode] = $authority;

        return $authority;
    }
}
