<?php

namespace grn\space\common\db\dao;

use grn\grn\MemberLogic;
use grn\space\common\data\bean\SpaceMember;
use grn\space\common\data\collection\SpaceMemberCollection;
use grn\grn\access\service\AppAccess;


/**
 * Class SpaceMemberDAO
 */
class SpaceMemberDAO extends DataAccessControlAbstract
{
    /**
     * Add the following properties of each SpaceMember object.
     * - _displayName
     * - _userName
     * - dislayNameLanguage
     * - isDeleted
     * - isInvalid
     *
     * @param SpaceMemberCollection $space_member_collection
     *
     * @return SpaceMemberCollection
     */
    public function addUserBasicInfo(
        SpaceMemberCollection $space_member_collection
    ) {
        $db = $this->getDatabaseConnection();
        $users_id_needle_check = [];
        $escaped_user_id_array = [];
        foreach ($space_member_collection as $each_space_member) {
            /** @var $each_space_member SpaceMember */
            if ($each_space_member->getMemberType() == 'user'
                && strlen($each_space_member->getMemberID()) > 0
            ) {
                $escaped_user_id_array[] = "'"
                                           . $db->escape($each_space_member->getMemberID())
                                           . "'";
                $users_id_needle_check[] = $each_space_member->getMemberID();
            }
        }

        // Application users
        if ( ! $space_member_collection->isSetCheckBit(SpaceMemberCollection::MEMBER_CHECKED_ALLOW_USING)) {
            $user_ids
                = array_keys($space_member_collection->getSpaceUsersArray());
            $allow_user_ids = MemberLogic::getInstance()
                                         ->getAccessEvalUsersWithAllowAppId($user_ids,
                                             null, "space");

            /** @var $space_member SpaceMember */
            foreach ($space_member_collection as $space_member) {
                switch ($space_member->getMemberType()) {
                    case MemberLogic::TYPE_USER:
                        $allow = array_keys($allow_user_ids,
                            $space_member->getMemberID());
                        $space_member->setIsNotUsingApp(! $allow);
                }
            }
        }

        if (count($escaped_user_id_array) == 0) {
            return $space_member_collection;
        }

        $result = $db->query(
            "SELECT " .
            "user._id AS member_id, " .
            "'user' AS member_type, " .
            "user.col_display_name, " .
            "user.col_nickname, " .
            "language.col_language AS " . SpaceMember::DISPLAY_NAME_LANGUAGE
            . ", " .
            "user.col_deleted, " .
            "user.col_valid AS " . MemberLogic::IS_INVALID_USER . "," .
            "user.col_foreign_key " .
            "FROM " .
            "tab_cb_user AS user " .
            "LEFT JOIN " .
            "tab_cb_language_status AS language " .
            "ON language._id = user.col_display_name_language " .
            "WHERE " .
            "user._id IN ( " . implode(",", $escaped_user_id_array) . " )"
        );

        $user_info = [];
        while ($row = $db->fetch_assoc($result)) {
            $fetched_space_member = new SpaceMember($row,
                SpaceMember::NOT_CHECK_INPUT);
            $user_info[$fetched_space_member->getMemberID()]
                = $fetched_space_member;
        }

        $db->free_result($result);

        foreach ($space_member_collection as $each_space_member) {
            /** @var $each_space_member SpaceMember */
            $id = $each_space_member->getMemberID();
            if (array_key_exists($id, $user_info)) {
                $space_member = $user_info[$id];
                $each_space_member->setUserName($space_member->getUserName());
                $each_space_member->setNickName($space_member->getNickname());
                $each_space_member->setDisplayNameLanguage($space_member->getDisplayNameLanguage());
                $each_space_member->setDeleted($space_member->isDeleted());
                $each_space_member->setIsInvalidUser($space_member->isInvalidUser());
                $each_space_member->setForeignKey($space_member->getForeignKey());
            } else {
                $each_space_member->setDeleted(true);
            }
        }

        return $space_member_collection;
    }

    /**
     * Add primaryGroupId and primaryGroupName properties of each SpaceMember object.
     *
     * @param SpaceMemberCollection $spaceMemberCollection
     * @param string                $languageCode
     *
     * @return SpaceMemberCollection
     */
    public function addUserGroupInfo(
        SpaceMemberCollection $spaceMemberCollection,
        $languageCode = LanguageStatus::STANDARD_LANGUAGE_CODE
    ) {
        $db = $this->getDatabaseConnection();

        $escapedUserIdArray = [];
        /** @var $eachSpaceMember SpaceMember */
        foreach ($spaceMemberCollection as $eachSpaceMember) {
            if ($eachSpaceMember->isTypeEqualsUser()
                && $eachSpaceMember->getMemberID()
            ) {
                $escapedUserIdArray[] = "'"
                                        . $db->escape($eachSpaceMember->getMemberID())
                                        . "'";
            }
        }

        if (count($escapedUserIdArray) === 0) {
            return $spaceMemberCollection;
        }

        $escapedLanguageCode = $db->escape($languageCode);

        $result = $db->query(
            "SELECT " .
            "userinfo.col_user AS _id, " .
            "g._id AS group_id, " .
            "IFNULL(group_local.col_name, g.col_name) AS group_col_name " .
            "FROM " .
            "tab_grn_userinfo AS userinfo " .
            "LEFT JOIN " .
            "tab_cb_usergrouprelation AS user_group_relation " .
            "ON userinfo.col_primary_group = user_group_relation._id, " .
            "tab_cb_group AS g " .
            "LEFT JOIN " .
            "( " .
            "tab_cb_group_local AS group_local " .
            "INNER JOIN " .
            "tab_cb_language_status AS l " .
            "ON " .
            "group_local.language_id = l._id " .
            "AND " .
            "l.col_language = '{$escapedLanguageCode}'" .
            ") " .
            "ON g._id = group_local.parent_id " .
            "WHERE " .
            "user_group_relation.col_group = g._id " .
            "AND " .
            "userinfo.col_user IN ( " . implode(",", $escapedUserIdArray) . " )"
            .
            "UNION " .
            "SELECT " .
            "ugr.col_user AS _id, " .
            "g._id AS group_id, " .
            "IFNULL(cl.col_name, g.col_name) AS group_col_name " .
            "FROM " .
            "tab_cb_usergrouprelation ugr, " .
            "tab_cb_group g " .
            "LEFT JOIN " .
            "(" .
            "tab_cb_group_local cl " .
            "INNER JOIN " .
            "tab_cb_language_status l " .
            "ON " .
            "cl.language_id = l._id " .
            "AND " .
            "l.col_language = '{$escapedLanguageCode}' " .
            ")" .
            "ON g._id = cl.parent_id, " .
            "(" .
            "SELECT " .
            "ugr1st._id " .
            "FROM " .
            "tab_cb_usergrouprelation ugr1st, " .
            "(" .
            "SELECT " .
            "ugr2nd.col_user, " .
            "MIN(ugr2nd.col_group) as col_group " .
            "FROM " .
            "tab_cb_usergrouprelation ugr2nd, " .
            "(" .
            "SELECT " .
            "ugr3rd.col_user, " .
            "MIN(ugr3rd.col_group_list) as col_group_list " .
            "FROM " .
            "tab_cb_usergrouprelation ugr3rd, " .
            "tab_grn_userinfo AS ui " .
            "WHERE " .
            "ui.col_user = ugr3rd.col_user " .
            "AND " .
            "ui.col_primary_group IS NULL " .
            "AND " .
            "ugr3rd.col_user IN (" . implode(",", $escapedUserIdArray) . ") " .
            "GROUP BY " .
            "ugr3rd.col_user " .
            ") join3rd " .
            "WHERE " .
            "ugr2nd.col_user = join3rd.col_user " .
            "AND " .
            "ugr2nd.col_group_list = join3rd.col_group_list " .
            "GROUP BY " .
            "ugr2nd.col_user " .
            ") join2nd " .
            "WHERE " .
            "ugr1st.col_user = join2nd.col_user " .
            "AND " .
            "ugr1st.col_group = join2nd.col_group " .
            ") join1st " .
            "WHERE " .
            "g._id = ugr.col_group " .
            "AND " .
            "ugr._id = join1st._id " .
            "ORDER BY " .
            "_id"
        );

        $groupInfo = [];
        while ($row = $db->fetch_assoc($result)) {
            $groupInfo[$row["_id"]] = [
                $row["group_id"],
                $row["group_col_name"]
            ];
        }
        foreach ($spaceMemberCollection as $eachSpaceMember) {
            $id = $eachSpaceMember->getMemberID();
            if (array_key_exists($id, $groupInfo)
                && $eachSpaceMember->isTypeEqualsUser()
            ) {
                $eachSpaceMember->setPrimaryGroupId($groupInfo[$id][0]);
                $eachSpaceMember->setPrimaryGroupName($groupInfo[$id][1]);
            }
        }

        $db->free_result($result);

        return $spaceMemberCollection;
    }
}
