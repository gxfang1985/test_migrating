<?php

namespace grn\space\common\db\dao;

use grn\space\common\data\bean\CategoryLocal;
use grn\space\common\data\collection\CategoryLocalCollection;
use grn\space\common\db\dao\DataAccessControlAbstract;
use grn\space\common\exception\ErrorCode;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\common\exception\GrnInvalidArgumentException;
use grn\space\common\exception\GrnDatabaseException;

/**
 * Class CategoryLocalDAO
 */
class CategoryLocalDAO extends DataAccessControlAbstract
{
    /**
     * Insert a record into tab_grn_space_category_local.
     * When the record is duplicated, this method updates col_name value of the record.
     *
     * The retuend value is a little tricky.
     * 0 : There had been the same record already so that no record was changed.
     * 1 : There had been no record whose col_category and col_language were the same with $categoryLocal so that a new record was inserted.
     * 2 : There had been the record whose col_category and col_language were the same with $categoryLocal so that only col_category_name of the record was updated.
     *
     * @param CategoryLocal $categoryLocal
     *
     * @return integer the number of affected rows.
     * @throws GrnDatabaseException
     */
    public function insertOnDuplicateUpdate(CategoryLocal $categoryLocal)
    {
        try {
            $db = $this->getDatabaseConnection();

            $db->query(
                "INSERT INTO " .
                "tab_grn_space_category_local (col_category, col_category_name, col_language) "
                .
                "SELECT " .
                "'{$db->escape($categoryLocal->getCategoryId())}', " .
                "'{$db->escape($categoryLocal->getCategoryName())}', " .
                "language._id " .
                "FROM " .
                "tab_cb_language_status AS language " .
                "WHERE " .
                "language.col_language = '{$db->escape($categoryLocal->getLanguageCode())}' "
                .
                "ON DUPLICATE KEY " .
                "UPDATE " .
                "col_category_name = '{$db->escape($categoryLocal->getCategoryName())}';"
            );

            return $db->affected_rows();

        } catch (GrnDatabaseException $exception) {
            //GrnDatabaseException might be caught here someday...
            throw $exception;
        }
    }

    /**
     * Select CategoryLocal by Category ID
     *
     * @param string $categoryId
     *
     * @return CategoryLocalCollection
     * @throws GrnDatabaseException
     */
    public function searchByCategoryId($categoryId)
    {
        try {
            $db = $this->getDatabaseConnection();

            $result = $db->query(
                "SELECT " .
                "1 AS _id, "
                . // This is dummy data to set up CategoryLocal as a BeanAbstract. BeanAbstract requires "_id".
                "local.col_category, " .
                "local.col_category_name, " .
                "language.col_language " .
                "FROM " .
                "tab_grn_space_category_local AS local, " .
                "tab_cb_language_status AS language " .
                "WHERE " .
                "local.col_language = language._id " .
                "AND " .
                "local.col_category = '{$db->escape($categoryId)}';"
            );

            $categoryLocalCollection = new CategoryLocalCollection();
            while ($row = $db->fetch_assoc($result)) {
                $categoryLocalCollection->appendBean(new CategoryLocal($row,
                    CategoryLocal::NOT_CHECK_INPUT));
            }

            $db->free_result($result);

            return $categoryLocalCollection;
        } catch (GrnDatabaseException $exception) {
            //GrnDatabaseException might be caught here someday...
            throw $exception;
        }
    }

    /**
     * Select CategoryLocal by Category Code
     *
     * @param string $categoryCode
     *
     * @return CategoryLocalCollection
     * @throws GrnDatabaseException
     */
    public function searchByCategoryCode($categoryCode)
    {
        try {
            $db = $this->getDatabaseConnection();

            $result = $db->query(
                "SELECT " .
                "1 AS _id, "
                . // This is dummy data to set up CategoryLocal as a BeanAbstract. BeanAbstract requires "_id".
                "local.col_category, " .
                "local.col_category_name, " .
                "language.col_language " .
                "FROM " .
                "tab_grn_space_category_local AS local, " .
                "tab_cb_language_status AS language, " .
                "tab_grn_space_category AS category " .
                "WHERE " .
                "local.col_category = category._id " .
                "AND " .
                "local.col_language = language._id " .
                "AND " .
                "category.col_category_code = '{$db->escape($categoryCode)}';"
            );

            $categoryLocalCollection = new CategoryLocalCollection();
            while ($row = $db->fetch_assoc($result)) {
                $categoryLocalCollection->appendBean(new CategoryLocal($row,
                    CategoryLocal::NOT_CHECK_INPUT));
            }

            $db->free_result($result);

            return $categoryLocalCollection;
        } catch (GrnDatabaseException $e) {
            throw $e;
        }
    }

    /**
     * Delete CategoryLocal
     *
     * @param CategoryLocal $categoryLocal
     * @param string        $languageId
     *
     * @return CategoryLocal
     * @throws GrnDataNotFoundException
     * @throws GrnDatabaseException
     */
    public function delete(CategoryLocal $categoryLocal, $languageId)
    {
        try {
            $db = $this->getDatabaseConnection();

            $db->query(
                "DELETE FROM " .
                "tab_grn_space_category_local " .
                "WHERE " .
                "col_category = '{$db->escape($categoryLocal->getCategoryId())}' "
                .
                "AND " .
                "col_language = '{$db->escape($languageId)}';"
            );
            if ($db->affected_rows() == 0) {
                throw new GrnDataNotFoundException(ErrorCode::GRN_CATEGORY_LOCAL_NOT_FOUND);
            }
        } catch (GrnDatabaseException $e) {
            throw $e;
        }

        return $categoryLocal;
    }

    /**
     * Return array which will be used to covert languageCode to languageId
     *
     */
    public function getLanguageTableArray()
    {
        try {
            $db = $this->getDatabaseConnection();

            $result = $db->query(
                "SELECT " .
                "* " .
                "FROM " .
                "tab_cb_language_status " .
                "ORDER BY " .
                "_id ;"
            );
            $retval = [];
            while ($row = $db->fetch_assoc($result)) {
                $retval[$row["col_language"]] = $row["_id"];
            }
            $db->free_result($result);

            return $retval;
        } catch (GrnInvalidArgumentException $e) {
            throw $e;
        }
    }

    /**
     * Select all the CategoryLocal records of the categories which have in their ancestors the Category whose category code is $categoryCode.
     *
     * @param string $rootCategoryCode
     * @param array  $languageCodeArray <string>
     *
     * @return CategoryLocalCollection
     * @throws GrnDatabaseException
     */
    public function selectCategoryLocalCollectionForCSV(
        $rootCategoryCode,
        $languageCodeArray
    ) {
        try {
            $db = $this->getDatabaseConnection();

            $escapedLanguageCodeArray = [];
            foreach ($languageCodeArray as $eachLanguageCode) {
                $escapedLanguageCodeArray[] = "'"
                                              . $db->escape($eachLanguageCode)
                                              . "'";
            }

            $result = $db->query(
                "SELECT " .
                "1 AS _id, "
                . // This is dummy data to set up CategoryLocal as a BeanAbstract. BeanAbstract requires "_id".
                "local.col_category, " .
                "local.col_category_name, " .
                "language.col_language, " .
                "categoryDescendant.col_category_code AS categoryCode " .
                "FROM " .
                "tab_grn_space_category_local AS local, " .
                "tab_cb_language_status AS language, " .
                "tab_grn_space_category AS categoryAncestor, " .
                "tab_grn_space_category AS categoryDescendant, " .
                "tab_grn_space_category_hierarchy AS hierarchy " .
                "WHERE " .
                "local.col_language = language._id " .
                "AND " .
                "local.col_category = categoryDescendant._id " .
                "AND " .
                "categoryDescendant._id = hierarchy.col_category " .
                "AND " .
                "hierarchy.col_ancestor = categoryAncestor._id " .
                "AND " .
                "categoryAncestor.col_category_code = '{$db->escape($rootCategoryCode)}' "
                .
                "AND " .
                "language.col_language IN (" . implode(",",
                    $escapedLanguageCodeArray) . ") " .
                "ORDER BY " .
                "local.col_category ASC, " .
                "local.col_language ASC;"
            );

            $categoryLocalCollection = new CategoryLocalCollection();

            while ($row = $db->fetch_assoc($result)) {
                $categoryLocalCollection->appendBean(new CategoryLocal($row,
                    CategoryLocal::NOT_CHECK_INPUT));
            }
            $db->free_result($result);

            $categoryLocalCollection->setCountNoLimit(count($categoryLocalCollection));

            return $categoryLocalCollection;
        } catch (GrnDatabaseException $e) {
            throw $e;
        }
    }
}
