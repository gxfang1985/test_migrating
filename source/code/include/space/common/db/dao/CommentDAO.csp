<?php

namespace grn\space\common\db\dao;

use grn\space\common\db\dao\DataAccessControlAbstract;
use grn\space\common\data\bean\Comment;
use grn\space\common\data\collection\CategoryCollection;
use grn\space\common\data\collection\CommentCollection;
use grn\space\common\data\condition\CommentSearchCondition;
use grn\space\common\exception\ErrorCode;
use grn\space\common\exception\GrnDatabaseException;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\common\utility\ValidateUtility;
use grn\space\data\collection\ThreadCollection;

/**
 * Database Back Layer
 * This layer mediates the database front layer and the DB.
 *
 * Comment Data Access Object Class
 * Accept requests from the database front layer for all Comment
 **/
class CommentDAO extends DataAccessControlAbstract
{
    /**
     * The insert of comment is executed to the database.
     *
     * @param  \grn\space\common\data\bean\Comment $comment
     *
     * @throws GrnDatabaseException     Any error in the database.
     * @return \grn\space\common\data\bean\Comment
     */
    public function insertComment(Comment $comment)
    {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "INSERT INTO tab_grn_space_comment SET ";
            $query .= "  col_comment_no='"
                      . $dbConn->escape($comment->getCommentNo()) . "'";

            if ($comment->isRichText()) {
                require_once('grn/controller.csp');
                $contentHtml
                    = grn_wash_script_without_style_attribute($comment->getContent());
                $content = grn_strip_tags($contentHtml);
                $query .= ", col_content_html = '"
                          . $dbConn->escape($contentHtml) . "'";
                $query .= ", col_content = '" . $dbConn->escape($content)
                          . "'";
            } else {
                $query .= ", col_content_html = NULL";
                $query .= ", col_content = '"
                          . $dbConn->escape($comment->getContent()) . "'";
            }

            $query .= ", col_is_rich_text='" . (($comment->isRichText()) ? "1"
                    : "0") . "'";
            $query .= ", col_hierarchy_level='"
                      . $dbConn->escape($comment->getHierarchyLevel()) . "'";
            if (ValidateUtility::isNotNull($comment->getParentCommentId())) {
                $query .= ", col_parent='"
                          . $dbConn->escape($comment->getParentCommentId())
                          . "'";
            }
            $query .= ", col_is_logical_delete='"
                      . (($comment->isLogicalDelete()) ? "1" : "0") . "'";
            $query .= ", col_creator='"
                      . $dbConn->escape($comment->getCreatorId()) . "'";
            $query .= ", col_creator_name='"
                      . $dbConn->escape($comment->getCreatorName()) . "'";
            $query .= ", col_create_timestamp='"
                      . $dbConn->escape($comment->getCreateTimestamp()) . "'";
            if (ValidateUtility::isNotNull($comment->getModifierId())) {
                $query .= ", col_modifier='"
                          . $dbConn->escape($comment->getModifierId()) . "'";
            }
            $query .= ", col_modifier_name='"
                      . $dbConn->escape($comment->getModifierName()) . "'";
            if (ValidateUtility::isNotNull($comment->getModifyTimestamp())) {
                $query .= ", col_modify_timestamp='"
                          . $dbConn->escape($comment->getModifyTimestamp())
                          . "'";
            }

            $query .= ";";

            $dbConn->query($query);

            $comment->setId($dbConn->get_insert_id());
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        return $comment;
    }

    /**
     * The logical delete of comment is executed to the data base.
     *
     * @param  \grn\space\common\data\bean\Comment $comment
     *
     * @throws GrnDatabaseException         Any error in the database.
     * @return \grn\space\common\data\bean\Comment
     */
    public function logicalDeleteComment(Comment $comment)
    {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "UPDATE tab_grn_space_comment SET ";
            $query .= " col_is_logical_delete='" . ($comment->isLogicalDelete()
                    ? "1" : "0") . "', ";
            if (ValidateUtility::isNull($comment->getModifierId())) {
                $query .= " col_modifier = NULL, ";
            } else {
                $query .= " col_modifier='"
                          . $dbConn->escape($comment->getModifierId()) . "', ";
            }
            $query .= " col_modifier_name='"
                      . $dbConn->escape($comment->getModifierName()) . "', ";
            if (ValidateUtility::isNull($comment->getModifyTimestamp())) {
                $query .= " col_modify_timestamp = NULL ";
            } else {
                $query .= " col_modify_timestamp='"
                          . $dbConn->escape($comment->getModifyTimestamp())
                          . "' ";
            }
            $query .= " WHERE _id = '{$dbConn->escape($comment->getId())}'";
            $query .= ";";

            $dbConn->query($query);
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        return $comment;
    }

    /**
     * The select of a comment is executed to the database.
     *
     * @param string $commentId comment sequence id
     *
     * @throws GrnDataNotFoundException     comment is not found
     * @throws GrnDatabaseException         Any error in the database.
     * @return \grn\space\common\data\bean\Comment
     */
    public function selectComment($commentId)
    {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "SELECT";
            $query .= "  cmnt._id";
            $query .= ", cmnt.col_comment_no";
            $query .= ", CASE cmnt.col_is_rich_text WHEN '1' THEN cmnt.col_content_html ELSE cmnt.col_content END AS col_content";
            $query .= ", cmnt.col_is_rich_text";
            $query .= ", cmnt.col_hierarchy_level";
            $query .= ", cmnt.col_parent";
            $query .= ", cmnt.col_is_logical_delete";
            $query .= ", cmnt.col_creator";
            $query .= ", cmnt.col_creator_name";
            $query .= ", cmnt.col_create_timestamp";
            $query .= ", cmnt.col_modifier";
            $query .= ", cmnt.col_modifier_name";
            $query .= ", cmnt.col_modify_timestamp";
            $query .= ", CASE WHEN threadCmnt.col_thread IS NOT NULL THEN "
                      . Comment::PARENT_APPLICATION_TYPE_THREAD . " ELSE "
                      . Comment::PARENT_APPLICATION_TYPE_TODO . " END AS "
                      . Comment::PARENT_APPLICATION_TYPE;
            $query .= ", CASE WHEN threadCmnt.col_thread IS NOT NULL THEN threadCmnt.col_thread ELSE todoCmnt.col_todo END AS "
                      . Comment::PARENT_APPLICATION_ID;
            $query .= " FROM tab_grn_space_comment AS cmnt";
            $query .= " LEFT JOIN tab_grn_space_thread_comment AS threadCmnt ON cmnt._id = threadCmnt.col_comment";
            $query .= " LEFT JOIN tab_grn_space_todo_comment AS todoCmnt ON cmnt._id = todoCmnt.col_comment";
            $query .= " WHERE cmnt._id = '{$dbConn->escape($commentId)}'";
            $query .= " AND cmnt.col_is_logical_delete = 0";
            $query .= ";";

            $result = $dbConn->query($query);

            $row = $dbConn->fetch_assoc($result);
            $dbConn->free_result($result);
            if ( ! $row) {
                throw new GrnDataNotFoundException(ErrorCode::GRN_INVALID_COMMENT_ID);
            }

            $comment = new Comment($row, Comment::NOT_CHECK_INPUT);
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        return $comment;
    }

    /**
     * The existence confirmation of Comment.
     *
     * @param string $spaceId   space sequence id
     * @param string $threadId  thread sequence id
     * @param string $commentId comment sequence id
     *
     * @throws GrnDatabaseException     comment is not found
     * @return bool                     Comment is exists : TRUE   Comment is not exists : FALSE
     */
    public function isExistsCommentBySpaceIdThreadIdCommentId(
        $spaceId,
        $threadId,
        $commentId
    ) {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "SELECT";
            $query .= " cmnt._id";
            $query .= " FROM ";
            $query .= "  tab_grn_space_comment AS cmnt";
            $query .= ", tab_grn_space_thread_comment AS threadCmnt";
            $query .= ", tab_grn_space_thread AS thread";
            $query .= ", tab_grn_space_category_hierarchy AS ctgHirhy";
            $query .= ", tab_grn_space_space_application AS spaceAppl";
            $query .= " WHERE cmnt._id = threadCmnt.col_comment";
            $query .= " AND threadCmnt.col_thread = thread._id";
            $query .= " AND thread.col_category = ctgHirhy.col_category";
            $query .= " AND ctgHirhy.col_ancestor = spaceAppl.col_root_category";
            $query .= " AND spaceAppl.col_space = '" . $dbConn->escape($spaceId)
                      . "'";
            $query .= " AND thread._id = '" . $dbConn->escape($threadId) . "'";
            $query .= " AND cmnt._id = '" . $dbConn->escape($commentId) . "'";
            $query .= " AND cmnt.col_is_logical_delete = 0";
            $query .= ";";

            $result = $dbConn->query($query);

            $row = $dbConn->fetch_assoc($result);
            $dbConn->free_result($result);
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        return ($row) ? true : false;
    }

    /**
     * The existence confirmation of Comment.
     *
     * @param string $spaceId   space sequence id
     * @param string $threadId  thread sequence id
     * @param string $todoId    todo sequence id
     * @param string $commentId comment sequence id
     *
     * @throws GrnDatabaseException     comment is not found
     * @return bool                     Comment is exists : TRUE   Comment is not exists : FALSE
     */
    public function isExistsCommentBySpaceIdThreadIdTodoIdCommentId(
        $spaceId,
        $threadId,
        $todoId,
        $commentId
    ) {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "SELECT";
            $query .= " cmnt._id";
            $query .= " FROM ";
            $query .= "  tab_grn_space_comment AS cmnt";
            $query .= ", tab_grn_space_todo_comment AS todoCmnt";
            $query .= ", tab_grn_space_todo AS todo";
            $query .= ", tab_grn_space_todo_thread AS todoThrd";
            $query .= ", tab_grn_space_thread AS thread";
            $query .= ", tab_grn_space_category_hierarchy AS ctgHirhy";
            $query .= ", tab_grn_space_space_application AS spaceAppl";
            $query .= " WHERE cmnt._id = todoCmnt.col_comment";
            $query .= " AND todoCmnt.col_todo = todo._id";
            $query .= " AND todo._id = todoThrd.col_todo";
            $query .= " AND todoThrd.col_thread = thread._id";
            $query .= " AND thread.col_category = ctgHirhy.col_category";
            $query .= " AND ctgHirhy.col_ancestor = spaceAppl.col_root_category";
            $query .= " AND spaceAppl.col_space = '" . $dbConn->escape($spaceId)
                      . "'";
            $query .= " AND thread._id = '" . $dbConn->escape($threadId) . "'";
            $query .= " AND todo._id = '" . $dbConn->escape($todoId) . "'";
            $query .= " AND cmnt._id = '" . $dbConn->escape($commentId) . "'";
            $query .= " AND cmnt.col_is_logical_delete = 0";
            $query .= ";";

            $result = $dbConn->query($query);

            $row = $dbConn->fetch_assoc($result);
            $dbConn->free_result($result);
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        return ($row) ? true : false;
    }

    /**
     * The select of a parent comment is executed to the database.
     *
     * @param  \grn\space\common\data\collection\CommentCollection $childrenCommentCollection
     *
     * @throws GrnDatabaseException                     Any error in the database.
     * @return \grn\space\common\data\collection\CommentCollection
     */
    public function selectParentCommentListIgnoringLogicalDelete(
        CommentCollection $childrenCommentCollection
    ) {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "SELECT";
            $query .= " _id, ";
            $query .= " col_comment_no, ";
            $query .= " CASE col_is_rich_text WHEN '1' THEN col_content_html ELSE col_content END AS col_content, ";
            $query .= " col_is_rich_text, ";
            $query .= " col_hierarchy_level, ";
            $query .= " col_parent, ";
            $query .= " col_is_logical_delete, ";
            $query .= " col_creator, ";
            $query .= " col_creator_name, ";
            $query .= " col_create_timestamp, ";
            $query .= " col_modifier, ";
            $query .= " col_modifier_name, ";
            $query .= " col_modify_timestamp ";
            $query .= " FROM tab_grn_space_comment";

            //Search comment id
            $query .= " WHERE _id IN (";
            $tempIsNeedComma = false;
            foreach ($childrenCommentCollection as $comment) {
                if ($tempIsNeedComma) {
                    $query .= ", ";
                }

                /** @var \grn\space\common\data\bean\Comment $comment */
                $query .= "'" . $dbConn->escape($comment->getParentCommentId())
                          . "'";

                $tempIsNeedComma = true;
            }
            $query .= ")";

            $query .= ";";

            $result = $dbConn->query($query);


            $commentCollection = new CommentCollection();
            while ($row = $dbConn->fetch_assoc($result)) {
                $commentCollection->appendBean(new Comment($row,
                    Comment::NOT_CHECK_INPUT));
            }
            $dbConn->free_result($result);


            //search total count
            $commentCollection->setCountNoLimit(count($commentCollection));
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        return $commentCollection;
    }


    /**
     * The select of a comment is executed to the database.
     *
     * @param string $commentId comment sequence id
     *
     * @throws GrnDatabaseException         Any error in the database.
     * @return \grn\space\common\data\collection\CommentCollection
     */
    public function selectAncestorCommentList($commentId)
    {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "SELECT";
            $query .= " cmnt._id, ";
            $query .= " cmnt.col_comment_no, ";
            $query .= " CASE cmnt.col_is_rich_text WHEN '1' THEN cmnt.col_content_html ELSE cmnt.col_content END AS col_content, ";
            $query .= " cmnt.col_is_rich_text, ";
            $query .= " cmnt.col_hierarchy_level, ";
            $query .= " cmnt.col_parent, ";
            $query .= " cmnt.col_is_logical_delete, ";
            $query .= " cmnt.col_creator, ";
            $query .= " cmnt.col_creator_name, ";
            $query .= " cmnt.col_create_timestamp, ";
            $query .= " cmnt.col_modifier, ";
            $query .= " cmnt.col_modifier_name, ";
            $query .= " cmnt.col_modify_timestamp ";
            $query .= " FROM ";
            $query .= " tab_grn_space_comment AS cmnt, ";
            $query .= " tab_grn_space_comment_hierarchy AS hirhy ";
            $query .= " WHERE cmnt._id = hirhy.col_ancestor";
            $query .= " AND hirhy.col_comment = '" . $dbConn->escape($commentId)
                      . "'";
            $query .= " AND cmnt.col_is_logical_delete = 0";


            $result = $dbConn->query($query);


            $commentCollection = new CommentCollection();
            while ($row = $dbConn->fetch_assoc($result)) {
                $commentCollection->appendBean(new Comment($row,
                    Comment::NOT_CHECK_INPUT));
            }
            $dbConn->free_result($result);


            //search total count
            $commentCollection->setCountNoLimit(count($commentCollection));
        } catch (GrnDatabaseException $e) {
            throw $e;
        }

        return $commentCollection;
    }


    /**
     * The select of comments is executed to the database.
     *
     * @param  \grn\space\common\data\condition\CommentSearchCondition $commentSearchCondition
     *
     * @throws GrnDatabaseException                 FOUND_ROWSが取れなかった。 Any error in the database.
     * @return \grn\space\common\data\collection\CommentCollection
     */
    public function selectThreadCommentList(
        CommentSearchCondition $commentSearchCondition
    ) {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "SELECT SQL_CALC_FOUND_ROWS";
            $query .= " cmnt._id, ";
            $query .= " cmnt.col_comment_no, ";
            $query .= " CASE cmnt.col_is_rich_text WHEN '1' THEN cmnt.col_content_html ELSE cmnt.col_content END AS col_content, ";
            $query .= " cmnt.col_is_rich_text, ";
            $query .= " cmnt.col_hierarchy_level, ";
            $query .= " cmnt.col_parent, ";
            $query .= " cmnt.col_is_logical_delete, ";
            $query .= " cmnt.col_creator, ";
            $query .= " cmnt.col_creator_name, ";
            $query .= " cmnt.col_create_timestamp, ";
            $query .= " cmnt.col_modifier, ";
            $query .= " cmnt.col_modifier_name, ";
            $query .= " cmnt.col_modify_timestamp, ";
            $query .= Comment::PARENT_APPLICATION_TYPE_THREAD
                      . " AS parent_application_type, ";
            $query .= " thdCmnt.col_thread AS parent_application_id ";
            $query .= " FROM ";
            $query .= " tab_grn_space_comment AS cmnt, ";
            $query .= " tab_grn_space_thread_comment AS thdCmnt ";
            $query .= " WHERE cmnt._id = thdCmnt.col_comment";
            $query .= " AND thdCmnt.col_thread = '"
                      . $dbConn->escape($commentSearchCondition->getSearchScopeValue())
                      . "'";
            $query .= " AND cmnt.col_is_logical_delete = 0";


            //Order by
            $query .= " ORDER BY ";
            $tempIsNeedComma = false;
            foreach ($commentSearchCondition->getOrderSortArray() as $sortType) {
                if ($tempIsNeedComma) {
                    $query .= ", ";

                }

                switch ($sortType) {
                    case CommentSearchCondition::SORT_ID_ASC:
                        $query .= " cmnt._id ASC";
                        break;
                    case CommentSearchCondition::SORT_ID_DESC:
                        $query .= " cmnt._id DESC";
                        break;
                    case CommentSearchCondition::SORT_CREATE_TIME_ASC:
                        $query .= " cmnt.col_create_timestamp ASC";
                        break;
                    case CommentSearchCondition::SORT_CREATE_TIME_DESC:
                        $query .= " cmnt.col_create_timestamp DESC";
                        break;
                    case CommentSearchCondition::SORT_MODIFY_TIME_ASC:
                        $query .= " cmnt.col_modify_timestamp ASC";
                        break;
                    case CommentSearchCondition::SORT_MODIFY_TIME_DESC:
                        $query .= " cmnt.col_modify_timestamp DESC";
                        break;
                    case CommentSearchCondition::SORT_COMMENT_NO_ASC:
                        $query .= " cmnt.col_comment_no ASC";
                        break;
                    case CommentSearchCondition::SORT_COMMENT_NO_DESC:
                        $query .= " cmnt.col_comment_no DESC";
                        break;
                }

                $tempIsNeedComma = true;
            }

            $query = $dbConn->select_format($query,
                $commentSearchCondition->getOffset(),
                $commentSearchCondition->getLimit());
            $result = $dbConn->query($query);


            $commentCollection = new CommentCollection();
            while ($row = $dbConn->fetch_assoc($result)) {
                $commentCollection->appendBean(new Comment($row,
                    Comment::NOT_CHECK_INPUT));
            }
            $dbConn->free_result($result);


            //search total count
            $query = "SELECT FOUND_ROWS() AS count;";
            $result = $dbConn->query($query);
            $row = $dbConn->fetch_assoc($result);
            $dbConn->free_result($result);
            if ( ! $row) {
                throw new GrnDatabaseException();
            }
            $commentCollection->setCountNoLimit($row['count']);
        } catch (GrnDatabaseException $e) {
            throw $e;
        }

        return $commentCollection;
    }

    /**
     * The select of comments is executed to the database.
     *
     * @param  \grn\space\common\data\condition\CommentSearchCondition $commentSearchCondition
     *
     * @throws GrnDatabaseException                 FOUND_ROWSが取れなかった。 Any error in the database.
     * @return \grn\space\common\data\collection\CommentCollection
     */
    public function selectTodoCommentList(
        CommentSearchCondition $commentSearchCondition
    ) {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "SELECT SQL_CALC_FOUND_ROWS";
            $query .= " cmnt._id, ";
            $query .= " cmnt.col_comment_no, ";
            $query .= " CASE cmnt.col_is_rich_text WHEN '1' THEN cmnt.col_content_html ELSE cmnt.col_content END AS col_content, ";
            $query .= " cmnt.col_is_rich_text, ";
            $query .= " cmnt.col_hierarchy_level, ";
            $query .= " cmnt.col_parent, ";
            $query .= " cmnt.col_is_logical_delete, ";
            $query .= " cmnt.col_creator, ";
            $query .= " cmnt.col_creator_name, ";
            $query .= " cmnt.col_create_timestamp, ";
            $query .= " cmnt.col_modifier, ";
            $query .= " cmnt.col_modifier_name, ";
            $query .= " cmnt.col_modify_timestamp, ";
            $query .= Comment::PARENT_APPLICATION_TYPE_TODO
                      . " AS parent_application_type, ";
            $query .= " tdCmnt.col_todo AS parent_application_id ";
            $query .= " FROM ";
            $query .= " tab_grn_space_comment AS cmnt, ";
            $query .= " tab_grn_space_todo_comment AS tdCmnt ";
            $query .= " WHERE cmnt._id = tdCmnt.col_comment";
            $query .= " AND tdCmnt.col_todo = '"
                      . $dbConn->escape($commentSearchCondition->getSearchScopeValue())
                      . "'";
            $query .= " AND cmnt.col_is_logical_delete = 0";


            //Order by
            $query .= " ORDER BY ";
            $tempIsNeedComma = false;
            foreach ($commentSearchCondition->getOrderSortArray() as $sortType) {
                if ($tempIsNeedComma) {
                    $query .= ", ";

                }

                switch ($sortType) {
                    case CommentSearchCondition::SORT_ID_ASC:
                        $query .= " cmnt._id ASC";
                        break;
                    case CommentSearchCondition::SORT_ID_DESC:
                        $query .= " cmnt._id DESC";
                        break;
                    case CommentSearchCondition::SORT_CREATE_TIME_ASC:
                        $query .= " cmnt.col_create_timestamp ASC";
                        break;
                    case CommentSearchCondition::SORT_CREATE_TIME_DESC:
                        $query .= " cmnt.col_create_timestamp DESC";
                        break;
                    case CommentSearchCondition::SORT_MODIFY_TIME_ASC:
                        $query .= " cmnt.col_modify_timestamp ASC";
                        break;
                    case CommentSearchCondition::SORT_MODIFY_TIME_DESC:
                        $query .= " cmnt.col_modify_timestamp DESC";
                        break;
                    case CommentSearchCondition::SORT_COMMENT_NO_ASC:
                        $query .= " cmnt.col_comment_no ASC";
                        break;
                    case CommentSearchCondition::SORT_COMMENT_NO_DESC:
                        $query .= " cmnt.col_comment_no DESC";
                        break;
                }

                $tempIsNeedComma = true;
            }


            $query = $dbConn->select_format($query,
                $commentSearchCondition->getOffset(),
                $commentSearchCondition->getLimit());
            $result = $dbConn->query($query);


            $commentCollection = new CommentCollection();
            while ($row = $dbConn->fetch_assoc($result)) {
                $commentCollection->appendBean(new Comment($row,
                    Comment::NOT_CHECK_INPUT));
            }
            $dbConn->free_result($result);


            //search total count
            $query = "SELECT FOUND_ROWS() AS count;";
            $result = $dbConn->query($query);
            $row = $dbConn->fetch_assoc($result);
            $dbConn->free_result($result);
            if ( ! $row) {
                throw new GrnDatabaseException();
            }
            $commentCollection->setCountNoLimit($row['count']);
        } catch (GrnDatabaseException $e) {
            throw $e;
        }

        return $commentCollection;
    }


    /**
     * The select of comments is executed to the database.
     *
     * @param  \grn\space\common\data\condition\CommentSearchCondition $commentSearchCondition
     *
     * @throws GrnDatabaseException                 FOUND_ROWSが取れなかった。 Any error in the database.
     * @return \grn\space\common\data\collection\CommentCollection
     */
    public function selectThreadAndTodoCommentList(
        CommentSearchCondition $commentSearchCondition
    ) {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "SELECT SQL_CALC_FOUND_ROWS";
            $query .= " main._id, ";
            $query .= " main.col_comment_no, ";
            $query .= " main.col_content, ";
            $query .= " main.col_is_rich_text, ";
            $query .= " main.col_hierarchy_level, ";
            $query .= " main.col_parent, ";
            $query .= " main.col_is_logical_delete, ";
            $query .= " main.col_creator, ";
            $query .= " main.col_creator_name, ";
            $query .= " main.col_create_timestamp, ";
            $query .= " main.col_modifier, ";
            $query .= " main.col_modifier_name, ";
            $query .= " main.col_modify_timestamp, ";
            $query .= " main.parent_application_type, ";
            $query .= " main.parent_application_id ";
            $query .= " FROM (";
            $query .= "SELECT ";
            $query .= " cmnt._id, ";
            $query .= " cmnt.col_comment_no, ";
            $query .= " CASE cmnt.col_is_rich_text WHEN '1' THEN cmnt.col_content_html ELSE cmnt.col_content END AS col_content, ";
            $query .= " cmnt.col_is_rich_text, ";
            $query .= " cmnt.col_hierarchy_level, ";
            $query .= " cmnt.col_parent, ";
            $query .= " cmnt.col_is_logical_delete, ";
            $query .= " cmnt.col_creator, ";
            $query .= " cmnt.col_creator_name, ";
            $query .= " cmnt.col_create_timestamp, ";
            $query .= " cmnt.col_modifier, ";
            $query .= " cmnt.col_modifier_name, ";
            $query .= " cmnt.col_modify_timestamp, ";
            $query .= Comment::PARENT_APPLICATION_TYPE_THREAD
                      . " AS parent_application_type, ";
            $query .= " thdCmnt.col_thread AS parent_application_id ";
            $query .= " FROM ";
            $query .= " tab_grn_space_comment AS cmnt, ";
            $query .= " tab_grn_space_thread_comment AS thdCmnt ";
            $query .= " WHERE cmnt._id = thdCmnt.col_comment";
            $query .= " AND thdCmnt.col_thread = '"
                      . $dbConn->escape($commentSearchCondition->getSearchScopeValue())
                      . "'";
            $query .= " AND cmnt.col_is_logical_delete = 0";

            $query .= " UNION ";

            $query .= " SELECT";
            $query .= " cmnt._id, ";
            $query .= " cmnt.col_comment_no, ";
            $query .= " CASE cmnt.col_is_rich_text WHEN '1' THEN cmnt.col_content_html ELSE cmnt.col_content END AS col_content, ";
            $query .= " cmnt.col_is_rich_text, ";
            $query .= " cmnt.col_hierarchy_level, ";
            $query .= " cmnt.col_parent, ";
            $query .= " cmnt.col_is_logical_delete, ";
            $query .= " cmnt.col_creator, ";
            $query .= " cmnt.col_creator_name, ";
            $query .= " cmnt.col_create_timestamp, ";
            $query .= " cmnt.col_modifier, ";
            $query .= " cmnt.col_modifier_name, ";
            $query .= " cmnt.col_modify_timestamp, ";
            $query .= Comment::PARENT_APPLICATION_TYPE_TODO
                      . " AS parent_application_type, ";
            $query .= " tdCmnt.col_todo AS parent_application_id ";
            $query .= " FROM ";
            $query .= " tab_grn_space_comment AS cmnt, ";
            $query .= " tab_grn_space_todo_comment AS tdCmnt, ";
            $query .= " tab_grn_space_todo_thread AS tdthd ";
            $query .= " WHERE cmnt._id = tdCmnt.col_comment";
            $query .= " AND tdCmnt.col_todo = tdthd.col_todo";
            $query .= " AND tdthd.col_thread = '"
                      . $dbConn->escape($commentSearchCondition->getSearchScopeValue())
                      . "'";
            $query .= " AND cmnt.col_is_logical_delete = 0";
            $query .= ") AS main ";


            //Order by
            $query .= " ORDER BY ";
            $tempIsNeedComma = false;
            foreach ($commentSearchCondition->getOrderSortArray() as $sortType) {
                if ($tempIsNeedComma) {
                    $query .= ", ";

                }

                switch ($sortType) {
                    case CommentSearchCondition::SORT_ID_ASC:
                        $query .= " main._id ASC";
                        break;
                    case CommentSearchCondition::SORT_ID_DESC:
                        $query .= " main._id DESC";
                        break;
                    case CommentSearchCondition::SORT_CREATE_TIME_ASC:
                        $query .= " main.col_create_timestamp ASC";
                        break;
                    case CommentSearchCondition::SORT_CREATE_TIME_DESC:
                        $query .= " main.col_create_timestamp DESC";
                        break;
                    case CommentSearchCondition::SORT_MODIFY_TIME_ASC:
                        $query .= " main.col_modify_timestamp ASC";
                        break;
                    case CommentSearchCondition::SORT_MODIFY_TIME_DESC:
                        $query .= " main.col_modify_timestamp DESC";
                        break;
                    case CommentSearchCondition::SORT_COMMENT_NO_ASC:
                        $query .= " main.col_comment_no ASC";
                        break;
                    case CommentSearchCondition::SORT_COMMENT_NO_DESC:
                        $query .= " main.col_comment_no DESC";
                        break;
                }

                $tempIsNeedComma = true;
            }


            $query = $dbConn->select_format($query,
                $commentSearchCondition->getOffset(),
                $commentSearchCondition->getLimit());
            $result = $dbConn->query($query);


            $commentCollection = new CommentCollection();
            while ($row = $dbConn->fetch_assoc($result)) {
                $commentCollection->appendBean(new Comment($row,
                    Comment::NOT_CHECK_INPUT));
            }
            $dbConn->free_result($result);


            //search total count
            $query = "SELECT FOUND_ROWS() AS count;";
            $result = $dbConn->query($query);
            $row = $dbConn->fetch_assoc($result);
            $dbConn->free_result($result);
            if ( ! $row) {
                throw new GrnDatabaseException();
            }
            $commentCollection->setCountNoLimit($row['count']);
        } catch (GrnDatabaseException $e) {
            throw $e;
        }

        return $commentCollection;
    }


    /**
     * The number of comments that are newer than the condition of specifying it by the argument is counted.
     *
     * @param string $commentNo comment number
     * @param string $threadId  thread sequence id
     *
     * @throws GrnDatabaseException         Any error in the database.
     * @return \grn\space\common\data\collection\CommentCollection
     */
    public function countNewerCommentsOfThreadAndTodo($commentNo, $threadId)
    {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "SELECT count(*) AS countNewerComments";
            $query .= " FROM (";
            $query .= "SELECT ";
            $query .= " cmnt.col_comment_no ";
            $query .= " FROM ";
            $query .= " tab_grn_space_comment AS cmnt, ";
            $query .= " tab_grn_space_thread_comment AS thdCmnt ";
            $query .= " WHERE cmnt._id = thdCmnt.col_comment";
            $query .= " AND thdCmnt.col_thread = '" . $dbConn->escape($threadId)
                      . "'";
            $query .= " AND cmnt.col_is_logical_delete = 0";

            $query .= " UNION ";

            $query .= " SELECT";
            $query .= " cmnt.col_comment_no ";
            $query .= " FROM ";
            $query .= " tab_grn_space_comment AS cmnt, ";
            $query .= " tab_grn_space_todo_comment AS tdCmnt, ";
            $query .= " tab_grn_space_todo_thread AS tdthd ";
            $query .= " WHERE cmnt._id = tdCmnt.col_comment";
            $query .= " AND tdCmnt.col_todo = tdthd.col_todo";
            $query .= " AND tdthd.col_thread = '" . $dbConn->escape($threadId)
                      . "'";
            $query .= " AND cmnt.col_is_logical_delete = 0";
            $query .= ") AS main ";
            $query .= " WHERE main.col_comment_no > '"
                      . $dbConn->escape($commentNo) . "'";


            $result = $dbConn->query($query);


            $row = $dbConn->fetch_assoc($result);
            $dbConn->free_result($result);
            if ( ! $row) {
                throw new GrnDatabaseException();
            }

            $resultCountNewerComments = $row['countNewerComments'];
        } catch (GrnDatabaseException $e) {
            throw $e;
        }

        return $resultCountNewerComments;
    }


    /**
     * In the condition of $commentSearchCondition, the row number of $head comment is get.
     *
     * @param  \grn\space\common\data\condition\CommentSearchCondition $commentSearchCondition
     *
     * @throws GrnDataNotFoundException             head comment is not found
     * @throws GrnDatabaseException                 Any error in the database.
     * @return integer row number
     */
    public function getThreadCommentRowNumber(
        CommentSearchCondition $commentSearchCondition
    ) {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "SELECT main.rownum";
            $query .= " FROM (";
            $query .= " SELECT";
            $query .= " @row:=@row+1 AS rownum,";
            $query .= " sub._id,";
            $query .= " sub.col_comment_no,";
            $query .= " sub.col_content,";
            $query .= " sub.col_create_timestamp,";
            $query .= " sub.col_modify_timestamp";
            $query .= " FROM (";
            $query .= " SELECT";
            $query .= " cmnt._id,";
            $query .= " cmnt.col_comment_no,";
            $query .= " CASE cmnt.col_is_rich_text WHEN '1' THEN cmnt.col_content_html ELSE cmnt.col_content END AS col_content, ";
            $query .= " cmnt.col_create_timestamp,";
            $query .= " cmnt.col_modify_timestamp";
            $query .= " FROM";
            $query .= "  tab_grn_space_comment AS cmnt";
            $query .= ", tab_grn_space_thread_comment AS thdCmnt";
            $query .= " WHERE cmnt._id = thdCmnt.col_comment";
            $query .= " AND thdCmnt.col_thread = '"
                      . $dbConn->escape($commentSearchCondition->getSearchScopeValue())
                      . "'";
            $query .= " AND cmnt.col_is_logical_delete = 0";

            //Order by
            $query .= " ORDER BY";
            $tempIsNeedComma = false;
            foreach ($commentSearchCondition->getOrderSortArray() as $sortType) {
                if ($tempIsNeedComma) {
                    $query .= ", ";

                }

                switch ($sortType) {
                    case CommentSearchCondition::SORT_ID_ASC:
                        $query .= " cmnt._id ASC";
                        break;
                    case CommentSearchCondition::SORT_ID_DESC:
                        $query .= " cmnt._id DESC";
                        break;
                    case CommentSearchCondition::SORT_CREATE_TIME_ASC:
                        $query .= " cmnt.col_create_timestamp ASC";
                        break;
                    case CommentSearchCondition::SORT_CREATE_TIME_DESC:
                        $query .= " cmnt.col_create_timestamp DESC";
                        break;
                    case CommentSearchCondition::SORT_MODIFY_TIME_ASC:
                        $query .= " cmnt.col_modify_timestamp ASC";
                        break;
                    case CommentSearchCondition::SORT_MODIFY_TIME_DESC:
                        $query .= " cmnt.col_modify_timestamp DESC";
                        break;
                    case CommentSearchCondition::SORT_COMMENT_NO_ASC:
                        $query .= " cmnt.col_comment_no ASC";
                        break;
                    case CommentSearchCondition::SORT_COMMENT_NO_DESC:
                        $query .= " cmnt.col_comment_no DESC";
                        break;
                }

                $tempIsNeedComma = true;
            }

            $query .= ") AS sub";
            $query .= ", (select @row:=0) AS dummy";
            $query .= ") AS main";

            if (ValidateUtility::isNotNull($commentSearchCondition->getHeadCommentId())) {
                $query .= " WHERE main._id = '"
                          . $dbConn->escape($commentSearchCondition->getHeadCommentId())
                          . "'";
            } else {
                $query .= " WHERE main.col_comment_no = '"
                          . $dbConn->escape($commentSearchCondition->getHeadCommentNo())
                          . "'";
            }

            $result = $dbConn->query($query);


            $row = $dbConn->fetch_assoc($result);
            $dbConn->free_result($result);
            if ( ! $row) {
                throw new GrnDataNotFoundException(ErrorCode::GRN_THREAD_INVALID_COMMENT_ID);
            }

            $resultRownum = $row['rownum'];
        } catch (GrnDatabaseException $e) {
            throw $e;
        }

        return $resultRownum;
    }


    /**
     * In the condition of $commentSearchCondition, the row number of $head comment is get.
     *
     * @param  \grn\space\common\data\condition\CommentSearchCondition $commentSearchCondition
     *
     * @throws GrnDataNotFoundException             head comment is not found
     * @throws GrnDatabaseException                 Any error in the database.
     * @return integer row number
     */
    public function getTodoCommentRowNumber(
        CommentSearchCondition $commentSearchCondition
    ) {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "SELECT main.rownum";
            $query .= " FROM (";
            $query .= " SELECT";
            $query .= " @row:=@row+1 AS rownum,";
            $query .= " sub._id,";
            $query .= " sub.col_comment_no,";
            $query .= " sub.col_content,";
            $query .= " sub.col_create_timestamp,";
            $query .= " sub.col_modify_timestamp";
            $query .= " FROM (";
            $query .= " SELECT";
            $query .= " cmnt._id,";
            $query .= " cmnt.col_comment_no,";
            $query .= " CASE cmnt.col_is_rich_text WHEN '1' THEN cmnt.col_content_html ELSE cmnt.col_content END AS col_content, ";
            $query .= " cmnt.col_create_timestamp,";
            $query .= " cmnt.col_modify_timestamp";
            $query .= " FROM";
            $query .= "  tab_grn_space_comment AS cmnt";
            $query .= ", tab_grn_space_todo_comment AS tdCmnt";
            $query .= " WHERE cmnt._id = tdCmnt.col_comment";
            $query .= " AND tdCmnt.col_todo = '"
                      . $dbConn->escape($commentSearchCondition->getSearchScopeValue())
                      . "'";
            $query .= " AND cmnt.col_is_logical_delete = 0";

            //Order by
            $query .= " ORDER BY";
            $tempIsNeedComma = false;
            foreach ($commentSearchCondition->getOrderSortArray() as $sortType) {
                if ($tempIsNeedComma) {
                    $query .= ", ";

                }

                switch ($sortType) {
                    case CommentSearchCondition::SORT_ID_ASC:
                        $query .= " cmnt._id ASC";
                        break;
                    case CommentSearchCondition::SORT_ID_DESC:
                        $query .= " cmnt._id DESC";
                        break;
                    case CommentSearchCondition::SORT_CREATE_TIME_ASC:
                        $query .= " cmnt.col_create_timestamp ASC";
                        break;
                    case CommentSearchCondition::SORT_CREATE_TIME_DESC:
                        $query .= " cmnt.col_create_timestamp DESC";
                        break;
                    case CommentSearchCondition::SORT_MODIFY_TIME_ASC:
                        $query .= " cmnt.col_modify_timestamp ASC";
                        break;
                    case CommentSearchCondition::SORT_MODIFY_TIME_DESC:
                        $query .= " cmnt.col_modify_timestamp DESC";
                        break;
                    case CommentSearchCondition::SORT_COMMENT_NO_ASC:
                        $query .= " cmnt.col_comment_no ASC";
                        break;
                    case CommentSearchCondition::SORT_COMMENT_NO_DESC:
                        $query .= " cmnt.col_comment_no DESC";
                        break;
                }

                $tempIsNeedComma = true;
            }

            $query .= ") AS sub";
            $query .= ", (select @row:=0) AS dummy";
            $query .= ") AS main";

            if (ValidateUtility::isNotNull($commentSearchCondition->getHeadCommentId())) {
                $query .= " WHERE main._id = '"
                          . $dbConn->escape($commentSearchCondition->getHeadCommentId())
                          . "'";
            } else {
                $query .= " WHERE main.col_comment_no = '"
                          . $dbConn->escape($commentSearchCondition->getHeadCommentNo())
                          . "'";
            }

            $result = $dbConn->query($query);


            $row = $dbConn->fetch_assoc($result);
            $dbConn->free_result($result);
            if ( ! $row) {
                throw new GrnDataNotFoundException(ErrorCode::GRN_TODO_INVALID_COMMENT_ID);
            }

            $resultRownum = $row['rownum'];
        } catch (GrnDatabaseException $e) {
            throw $e;
        }

        return $resultRownum;
    }


    /**
     * In the condition of $commentSearchCondition, the row number of $head comment is get.
     *
     * @param  \grn\space\common\data\condition\CommentSearchCondition $commentSearchCondition
     *
     * @throws GrnDataNotFoundException             head comment is not found
     * @throws GrnDatabaseException                 Any error in the database.
     * @return integer row number
     */
    public function getThreadAndTodoCommentRowNumber(
        CommentSearchCondition $commentSearchCondition
    ) {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "SELECT main.rownum";
            $query .= " FROM (";
            $query .= " SELECT";
            $query .= " @row:=@row+1 AS rownum,";
            $query .= " sub._id,";
            $query .= " sub.col_comment_no,";
            $query .= " sub.col_content,";
            $query .= " sub.col_create_timestamp,";
            $query .= " sub.col_modify_timestamp";
            $query .= " FROM (";
            $query .= " ( SELECT";
            $query .= " cmnt._id,";
            $query .= " cmnt.col_comment_no,";
            $query .= " CASE cmnt.col_is_rich_text WHEN '1' THEN cmnt.col_content_html ELSE cmnt.col_content END AS col_content, ";
            $query .= " cmnt.col_create_timestamp,";
            $query .= " cmnt.col_modify_timestamp";
            $query .= " FROM";
            $query .= " tab_grn_space_comment AS cmnt,";
            $query .= " tab_grn_space_thread_comment AS thdCmnt";
            $query .= " WHERE cmnt._id = thdCmnt.col_comment";
            $query .= " AND thdCmnt.col_thread = '"
                      . $dbConn->escape($commentSearchCondition->getSearchScopeValue())
                      . "'";
            $query .= " AND cmnt.col_is_logical_delete = 0 )";

            $query .= " UNION";

            $query .= " ( SELECT";
            $query .= " cmnt._id,";
            $query .= " cmnt.col_comment_no,";
            $query .= " CASE cmnt.col_is_rich_text WHEN '1' THEN cmnt.col_content_html ELSE cmnt.col_content END AS col_content, ";
            $query .= " cmnt.col_create_timestamp,";
            $query .= " cmnt.col_modify_timestamp";
            $query .= " FROM";
            $query .= " tab_grn_space_comment AS cmnt,";
            $query .= " tab_grn_space_todo_comment AS tdCmnt,";
            $query .= " tab_grn_space_todo_thread AS tdthd";
            $query .= " WHERE cmnt._id = tdCmnt.col_comment";
            $query .= " AND tdCmnt.col_todo = tdthd.col_todo";
            $query .= " AND tdthd.col_thread = '"
                      . $dbConn->escape($commentSearchCondition->getSearchScopeValue())
                      . "'";
            $query .= " AND cmnt.col_is_logical_delete = 0 )";

            //Order by
            $query .= " ORDER BY";
            $tempIsNeedComma = false;
            foreach ($commentSearchCondition->getOrderSortArray() as $sortType) {
                if ($tempIsNeedComma) {
                    $query .= ", ";

                }

                switch ($sortType) {
                    case CommentSearchCondition::SORT_ID_ASC:
                        $query .= " _id ASC";
                        break;
                    case CommentSearchCondition::SORT_ID_DESC:
                        $query .= " _id DESC";
                        break;
                    case CommentSearchCondition::SORT_CREATE_TIME_ASC:
                        $query .= " col_create_timestamp ASC";
                        break;
                    case CommentSearchCondition::SORT_CREATE_TIME_DESC:
                        $query .= " col_create_timestamp DESC";
                        break;
                    case CommentSearchCondition::SORT_MODIFY_TIME_ASC:
                        $query .= " col_modify_timestamp ASC";
                        break;
                    case CommentSearchCondition::SORT_MODIFY_TIME_DESC:
                        $query .= " col_modify_timestamp DESC";
                        break;
                    case CommentSearchCondition::SORT_COMMENT_NO_ASC:
                        $query .= " col_comment_no ASC";
                        break;
                    case CommentSearchCondition::SORT_COMMENT_NO_DESC:
                        $query .= " col_comment_no DESC";
                        break;
                }

                $tempIsNeedComma = true;
            }
            $query .= ") AS sub";
            $query .= ", (select @row:=0) AS dummy";
            $query .= ") AS main";

            if (ValidateUtility::isNotNull($commentSearchCondition->getHeadCommentId())) {
                $query .= " WHERE main._id = '"
                          . $dbConn->escape($commentSearchCondition->getHeadCommentId())
                          . "'";
            } else {
                $query .= " WHERE main.col_comment_no = '"
                          . $dbConn->escape($commentSearchCondition->getHeadCommentNo())
                          . "'";
            }

            $result = $dbConn->query($query);


            $row = $dbConn->fetch_assoc($result);
            $dbConn->free_result($result);
            if ( ! $row) {
                throw new GrnDataNotFoundException(ErrorCode::GRN_INVALID_COMMENT_ID);
            }

            $resultRownum = $row['rownum'];
        } catch (GrnDatabaseException $e) {
            throw $e;
        }

        return $resultRownum;
    }


    /**
     * Delete Comment by todoId
     *
     * @param array $todoIdArray TODO ID array
     *
     * @return resource
     * @throws GrnDatabaseException
     */
    public function deleteCommentByTodoId(array $todoIdArray)
    {
        try {
            $db = $this->getDatabaseConnection();

            $escapedTodoIdArray = [];
            foreach ($todoIdArray as $eachTodoId) {
                $escapedTodoIdArray[] = "'" . $db->escape($eachTodoId) . "'";
            }
            $escapedTodoIdArray = implode(",", $escapedTodoIdArray);

            return $db->query(
                "DELETE FROM " .
                "tab_grn_space_comment " .
                "USING " .
                "tab_grn_space_comment, " .
                "tab_grn_space_todo_comment AS todo_comment " .
                "WHERE " .
                "todo_comment.col_comment = tab_grn_space_comment._id " .
                "AND " .
                "todo_comment.col_todo IN ({$escapedTodoIdArray});"
            );
        } catch (GrnDatabaseException $e) {
            throw $e;
        }
    }

    /**
     * Delete Thread Comment by threadId
     *
     * @param array $threadIdArray
     *
     * @return resource
     * @throws GrnDatabaseException
     */
    public function deleteThreadCommentByThreadId(array $threadIdArray)
    {
        try {
            $db = $this->getDatabaseConnection();

            $escapedThreadIdArray = [];
            foreach ($threadIdArray as $eachThreadId) {
                $escapedThreadIdArray[] = "'" . $db->escape($eachThreadId)
                                          . "'";
            }
            $escapedThreadIdArray = implode(",", $escapedThreadIdArray);

            return $db->query(
                "DELETE FROM " .
                "tab_grn_space_comment " .
                "USING " .
                "tab_grn_space_comment, " .
                "tab_grn_space_thread_comment " .
                "WHERE " .
                "tab_grn_space_comment._id = tab_grn_space_thread_comment.col_comment "
                .
                "AND " .
                "tab_grn_space_thread_comment.col_thread IN ({$escapedThreadIdArray});"
            );
        } catch (GrnDatabaseException $e) {
            throw $e;
        }
    }

    /**
     * Delete Thread Comment by CategoryCollection
     *
     * @param \grn\space\common\data\collection\CategoryCollection $categoryCollection
     *
     * @return resource
     * @throws GrnDatabaseException
     */
    public function deleteThreadCommentByCategoryCollection(
        CategoryCollection $categoryCollection
    ) {
        try {
            $db = $this->getDatabaseConnection();

            $escapedCategoryIdArray = [];
            foreach ($categoryCollection as $eachCategory) {
                /** @var \grn\space\common\data\bean\Category $eachCategory */
                $escapedCategoryIdArray[] = "'"
                                            . $db->escape($eachCategory->getId())
                                            . "'";
            }
            $escapedCategoryIdArray = implode(",", $escapedCategoryIdArray);

            return $db->query(
                "DELETE FROM " .
                "tab_grn_space_comment " .
                "USING " .
                "tab_grn_space_comment, " .
                "tab_grn_space_thread_comment, " .
                "tab_grn_space_thread " .
                "WHERE " .
                "tab_grn_space_comment._id = tab_grn_space_thread_comment.col_comment "
                .
                "AND " .
                "tab_grn_space_thread_comment.col_thread = tab_grn_space_thread._id "
                .
                "AND " .
                "tab_grn_space_thread.col_category IN ({$escapedCategoryIdArray});"
            );
        } catch (GrnDatabaseException $e) {
            throw $e;
        }
    }

    /**
     * Delete TodoComment by CategoryCollection
     *
     * @param \grn\space\common\data\collection\CategoryCollection $categoryCollection
     *
     * @return resource
     * @throws GrnDatabaseException
     */
    public function deleteTodoCommentByCategoryCollection(
        CategoryCollection $categoryCollection
    ) {
        try {
            $db = $this->getDatabaseConnection();

            $escapedCategoryIdArray = [];
            foreach ($categoryCollection as $eachCategory) {
                /** @var \grn\space\common\data\bean\Category $eachCategory */
                $escapedCategoryIdArray[] = "'"
                                            . $db->escape($eachCategory->getId())
                                            . "'";
            }
            $escapedCategoryIdArray = implode(",", $escapedCategoryIdArray);

            return $db->query(
                "DELETE FROM " .
                "tab_grn_space_comment " .
                "USING " .
                "tab_grn_space_comment, " .
                "tab_grn_space_todo_comment, " .
                "tab_grn_space_todo " .
                "WHERE " .
                "tab_grn_space_comment._id = tab_grn_space_todo_comment.col_comment "
                .
                "AND " .
                "tab_grn_space_todo_comment.col_todo = tab_grn_space_todo._id "
                .
                "AND " .
                "tab_grn_space_todo.col_category IN ({$escapedCategoryIdArray});"
            );
        } catch (GrnDatabaseException $e) {
            throw $e;
        }
    }

    /**
     * Delete Todo Comment by threadId
     *
     * @param array $threadIdArray
     *
     * @return resource
     * @throws GrnDatabaseException
     */
    public function deleteTodoCommentByThreadId(array $threadIdArray)
    {
        try {
            $db = $this->getDatabaseConnection();

            $escapedThreadIdArray = [];
            foreach ($threadIdArray as $eachThreadId) {
                $escapedThreadIdArray[] = "'" . $db->escape($eachThreadId)
                                          . "'";
            }
            $escapedThreadIdArray = implode(",", $escapedThreadIdArray);

            return $db->query(
                "DELETE FROM " .
                "tab_grn_space_comment " .
                "USING " .
                "tab_grn_space_comment, " .
                "tab_grn_space_todo_comment, " .
                "tab_grn_space_todo_thread " .
                "WHERE " .
                "tab_grn_space_comment._id = tab_grn_space_todo_comment.col_comment "
                .
                "AND " .
                "tab_grn_space_todo_comment.col_todo = tab_grn_space_todo_thread.col_todo "
                .
                "AND " .
                "tab_grn_space_todo_thread.col_thread IN ({$escapedThreadIdArray});"
            );
        } catch (GrnDatabaseException $e) {
            throw $e;
        }
    }
}
