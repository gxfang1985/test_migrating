<?php

namespace grn\space\common\db\dao;

use grn\space\common\db\dao\DataAccessControlAbstract;
use grn\space\common\exception\GrnDatabaseException;


/**
 * Database Back Layer
 * This layer mediates the database front layer and the DB.
 *
 * AccessControlListRole Data Access Object Class
 * Accept requests from the database front layer for all AccessControlListRole
 */
class AccessControlListRoleDAO extends DataAccessControlAbstract
{
    /**
     * The select of a access control list role is executed to the database.
     *
     * @param  string $aclId  access control sequence id
     * @param  string $roleId role id
     *
     * @throws GrnDatabaseException     Any error in the database.
     */
    public function insertAccessControleListRoleByRoleId($aclId, $roleId)
    {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query
                = "INSERT INTO tab_grn_space_acl_role (col_acl, col_role) VALUES ";
            $query .= "(";
            $query .= "'" . $dbConn->escape($aclId) . "', ";
            $query .= "'" . $dbConn->escape($roleId) . "' ";
            $query .= ")";
            $query .= ";";

            $dbConn->query($query);
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }
    }

    /**
     * The select of a access control list role is executed to the database.
     *
     * @param  string $aclId access control sequence id
     * @param  array  $member_ids
     *
     * @throws GrnDatabaseException             Any error in the database.
     */
    public function insertAccessControleListRoles($aclId, array $member_ids)
    {
        if (count($member_ids) === 0) {
            return;
        }

        try {
            $dbConn = $this->getDatabaseConnection();

            $query
                = "INSERT INTO tab_grn_space_acl_role (col_acl, col_role) VALUES ";

            $tempIsNeedComma = false;
            foreach ($member_ids as $member_id) {
                if ($tempIsNeedComma) {
                    $query .= ", ";
                }

                $query .= "(";
                $query .= "'" . $dbConn->escape($aclId) . "', ";
                $query .= "'" . $dbConn->escape($member_id) . "' ";
                $query .= ")";

                $tempIsNeedComma = true;
            }

            $query .= ";";

            $dbConn->query($query);
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }
    }

    /**
     * The delete of access control list roles is executed to the data base.
     *
     * @param  stirng $aclId access control list sequence id
     * @param  array  $member_ids
     *
     * @throws GrnDatabaseException         Any error in the database.
     */
    public function deleteAccessControleListRoles($aclId, array $member_ids)
    {
        if (count($member_ids) === 0) {
            return;
        }

        try {
            $dbConn = $this->getDatabaseConnection();

            $query
                = "DELETE FROM tab_grn_space_acl_role WHERE col_acl = '{$dbConn->escape($aclId)}'";
            $query .= " AND col_role IN (";

            $tempIsNeedComma = false;
            foreach ($member_ids as $member_id) {
                if ($tempIsNeedComma) {
                    $query .= ", ";
                }

                $query .= "'" . $dbConn->escape($member_id) . "' ";

                $tempIsNeedComma = true;
            }

            $query .= ");";

            $dbConn->query($query);
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }
    }

    /**
     * The delete of access control list roles is executed to the data base.
     *
     * @param  string $aclId access control list sequence id
     *
     * @throws GrnDatabaseException         Any error in the database.
     */
    public function deleteAccessControleListRoleByAclId($aclId)
    {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query
                = "DELETE FROM tab_grn_space_acl_role WHERE col_acl = '{$dbConn->escape($aclId)}';";

            $dbConn->query($query);
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }
    }

    /**
     * Get role ids according to authority id.
     *
     * @param string $authorityId
     * @param string $spaceId
     *
     * @return array
     * @throws GrnDatabaseException
     */
    public function getRoleIdArrayAccordingToAuthorityId($authorityId, $spaceId)
    {
        try {
            $dbConn = $this->getDatabaseConnection();
            $query = "SELECT role.col_role ";
            $query .= "FROM tab_grn_space_acl_role AS role ";
            $query .= "INNER JOIN ( ";
            $query .= "SELECT sacl.col_acl ";
            $query .= "FROM tab_grn_space_access_control_list AS clist ";
            $query .= "INNER JOIN tab_grn_space_space_acl AS sacl ";
            $query .= "ON clist.col_authority = '"
                      . $dbConn->escape($authorityId) . "' ";
            $query .= "AND  sacl.col_space = '" . $dbConn->escape($spaceId)
                      . "' ";
            $query .= "AND sacl.col_acl = clist._id ";
            $query .= " ) AS tbl ";
            $query .= "ON role.col_acl = tbl.col_acl";
            $result = $dbConn->query($query);
            $userId = [];
            while ($row = $dbConn->fetch_assoc($result)) {
                $userId[] = $row['col_role'];
            }

            return $userId;
        } catch (GrnDatabaseException $e) {
            throw $e;
        }
    }
}
