<?php

namespace grn\space\common\db\dao;

use grn\space\common\db\dao\DataAccessControlAbstract;
use grn\space\common\data\bean\Application;
use grn\space\common\data\bean\SpaceFile;
use grn\space\common\data\collection\CategoryCollection;
use grn\space\common\data\collection\CommentCollection;
use grn\space\common\data\collection\SpaceFileCollection;
use grn\space\common\data\condition\SpaceFileSearchCondition;
use grn\space\common\exception\ErrorCode;
use grn\space\common\exception\GrnDatabaseException;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\common\utility\ValidateUtility;
use grn\space\data\collection\SpaceCollection;
use grn\space\data\collection\SynthesisThreadCommentCollection;

/**
 * Database Back Layer
 * This layer mediates the database front layer and the DB.
 *
 * File Data Access Object Class
 * Accept requests from the database front layer for all File
 *
 * This code uses the legacy of the past.
 */
class SpaceFileDAO extends DataAccessControlAbstract
{
    /**
     * The select of a space-file is executed to the database.
     *
     * @param string $fileId file sequence id
     *
     * @throws GrnDataNotFoundException     file is not found
     * @throws GrnDatabaseException         Any error in the database.
     * @return SpaceFile
     */
    public function selectSpaceFile($fileId)
    {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "SELECT ";
            $query .= "  file._id";
            $query .= ", file.col_title";
            $query .= ", file.col_title_sort_key";
            $query .= ", file.col_description";
            $query .= ", file.col_mark";
            $query .= ", file.col_max_version";
            $query .= ", file.col_version";
            $query .= ", file.col_creator";
            $query .= ", file.col_creator_foreign_key";
            $query .= ", file.col_creator_name";
            $query .= ", file.col_ctime";
            $query .= ", file.col_modifier";
            $query .= ", file.col_modifier_foreign_key";
            $query .= ", file.col_modifier_name";
            $query .= ", file.col_mtime";
            $query .= ", file.col_ctime AS " . SpaceFile::CREATE_TIME;
            $query .= ", file.col_mtime AS " . SpaceFile::MODIFY_TIME;
            $query .= ", CASE";
            $query .= " WHEN threadFile.col_thread IS NOT NULL THEN ";
            $query .= SpaceFile::PARENT_APPLICATION_TYPE_THREAD;
            $query .= " WHEN todoFile.col_todo IS NOT NULL THEN ";
            $query .= SpaceFile::PARENT_APPLICATION_TYPE_TODO;
            $query .= " WHEN threadCommentFile.col_comment IS NOT NULL THEN ";
            $query .= SpaceFile::PARENT_APPLICATION_TYPE_THREAD_COMMENT;
            $query .= " ELSE ";
            $query .= SpaceFile::PARENT_APPLICATION_TYPE_TODO_COMMENT;
            $query .= " END AS " . SpaceFile::PARENT_APPLICATION_TYPE;
            $query .= ", CASE";
            $query .= " WHEN threadFile.col_thread IS NOT NULL THEN";
            $query .= " threadFile.col_thread";
            $query .= " WHEN todoFile.col_todo IS NOT NULL THEN";
            $query .= " todoFile.col_todo";
            $query .= " WHEN threadCommentFile.col_comment IS NOT NULL THEN";
            $query .= " threadCommentFile.col_comment";
            $query .= " ELSE";
            $query .= " todoCommentFile.col_comment";
            $query .= " END AS " . SpaceFile::PARENT_APPLICATION_ID;

            $query .= " FROM tab_grn_space_file AS file";
            $query .= " LEFT JOIN tab_grn_space_thread_file AS threadFile ON file._id = threadFile.col_file";
            $query .= " LEFT JOIN tab_grn_space_todo_file AS todoFile ON file._id = todoFile.col_file";
            $query .= " LEFT JOIN (";
            $query .= " SELECT commentFile.col_comment, commentFile.col_file";
            $query .= " FROM tab_grn_space_comment_file AS commentFile, tab_grn_space_thread_comment AS threadComment";
            $query .= " WHERE commentFile.col_comment = threadComment.col_comment";
            $query .= " AND commentFile.col_file = '{$dbConn->escape($fileId)}'";
            $query .= ") AS threadCommentFile ON file._id = threadCommentFile.col_file";
            $query .= " LEFT JOIN (";
            $query .= " SELECT commentFile.col_comment, commentFile.col_file";
            $query .= " FROM tab_grn_space_comment_file AS commentFile, tab_grn_space_todo_comment AS todoComment";
            $query .= " WHERE commentFile.col_comment = todoComment.col_comment";
            $query .= " AND commentFile.col_file = '{$dbConn->escape($fileId)}'";
            $query .= ") AS todoCommentFile ON file._id = todoCommentFile.col_file";

            $query .= " WHERE _id = '{$dbConn->escape($fileId)}'";
            $query .= " LOCK IN SHARE MODE;";

            $result = $dbConn->query($query);

            $row = $dbConn->fetch_assoc($result);
            $dbConn->free_result($result);
            if ( ! $row) {
                throw new GrnDataNotFoundException(ErrorCode::GRN_INVALID_FILE_ID);
            }

            require_once('grn/application.csp');
            require_once('space/GrnSpaceApplication.csp');
            require_once('space/common/data/bean/legacy/GrnSpaceFile.csp');
            $appLocator = \GRN_ApplicationLocator::instance();
            $tableManager
                = $appLocator->getTableManager(\GrnSpaceApplication::GRN_SPACE_APPLICATION_ID);
            $tableInfo = $tableManager->getTableInfo('GRN_Space_File');
            $grnSpaceFile = $tableInfo->getRow($row["_id"], $row);

            $spaceFile = new SpaceFile($row, SpaceFile::NOT_CHECK_INPUT);
            $spaceFile->setGrnSpaceFileObject($grnSpaceFile);
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        return $spaceFile;
    }


    /**
     * The select of space-files is executed to the database.
     *
     * @param  \grn\space\common\data\condition\SpaceFileSearchCondition $searchCondition SpaceFileSearchCondition
     *
     * @throws GrnDatabaseException         FOUND_ROWSが取れなかった。 Any error in the database.
     * @return \grn\space\common\data\collection\SpaceFileCollection
     */
    public function selectSpaceFileList(
        SpaceFileSearchCondition $searchCondition
    ) {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "SELECT SQL_CALC_FOUND_ROWS";
            $query .= "  file._id";
            $query .= ", file.col_title";
            $query .= ", file.col_title_sort_key";
            $query .= ", file.col_description";
            $query .= ", file.col_mark";
            $query .= ", file.col_max_version";
            $query .= ", file.col_version";
            $query .= ", file.col_creator";
            $query .= ", file.col_creator_foreign_key";
            $query .= ", file.col_creator_name";
            $query .= ", file.col_ctime";
            $query .= ", file.col_modifier";
            $query .= ", file.col_modifier_foreign_key";
            $query .= ", file.col_modifier_name";
            $query .= ", file.col_mtime";
            $query .= ", file.col_ctime AS " . SpaceFile::CREATE_TIME;
            $query .= ", file.col_mtime AS " . SpaceFile::MODIFY_TIME;
            $query .= ", t.parent_application_type";
            $query .= ", t.parent_application_id";
            $query .= " FROM";
            $query .= " tab_grn_space_file AS file";
            $query .= " RIGHT JOIN";
            $query .= " (";

            $key_id = $dbConn->escape($searchCondition->getSearchScopeValue());
            switch ($searchCondition->getSearchScopeType()) {
                case SpaceFileSearchCondition::SEARCH_SCOPE_TYPE_THREAD :
                    $query .= " SELECT "
                              . SpaceFile::PARENT_APPLICATION_TYPE_THREAD
                              . " AS " . SpaceFile::PARENT_APPLICATION_TYPE
                              . ",";
                    $query .= " thdFile.col_thread as parent_application_id,";
                    $query .= " thdFile.col_file";
                    $query .= " FROM tab_grn_space_thread_file AS thdFile";
                    $query .= " WHERE thdFile.col_thread = '" . $key_id . "'";
                    break;

                case SpaceFileSearchCondition::SEARCH_SCOPE_TYPE_TODO :
                    $query .= " SELECT "
                              . SpaceFile::PARENT_APPLICATION_TYPE_TODO . " AS "
                              . SpaceFile::PARENT_APPLICATION_TYPE . ",";
                    $query .= " tdThd._id as parent_application_id,";
                    $query .= " tdFile.col_file";
                    $query .= " FROM tab_grn_space_todo_file AS tdFile, tab_grn_space_todo AS tdThd";
                    $query .= " WHERE tdFile.col_todo = tdThd._id AND tdThd._id = '"
                              . $key_id . "'";
                    break;

                case SpaceFileSearchCondition::SEARCH_SCOPE_TYPE_COMMENT :
                    $query .= " SELECT "
                              . SpaceFile::PARENT_APPLICATION_TYPE_THREAD_COMMENT
                              . " AS " . SpaceFile::PARENT_APPLICATION_TYPE
                              . ",";
                    $query .= " thdCmnt._id as parent_application_id,";
                    $query .= " thdCmntFile.col_file";
                    $query .= " FROM tab_grn_space_comment_file AS thdCmntFile, tab_grn_space_comment AS thdCmnt";
                    $query .= " WHERE thdCmntFile.col_comment = thdCmnt._id AND thdCmnt._id = '"
                              . $key_id . "'";
                    break;

                case SpaceFileSearchCondition::SEARCH_SCOPE_TYPE_THREAD_ALL :
                    $query .= " SELECT "
                              . SpaceFile::PARENT_APPLICATION_TYPE_THREAD
                              . " AS " . SpaceFile::PARENT_APPLICATION_TYPE
                              . ",";
                    $query .= " thdFile.col_thread as parent_application_id,";
                    $query .= " thdFile.col_file";
                    $query .= " FROM tab_grn_space_thread_file AS thdFile";
                    $query .= " WHERE thdFile.col_thread = '" . $key_id . "'";

                    $query .= " UNION ";

                    $query .= " SELECT "
                              . SpaceFile::PARENT_APPLICATION_TYPE_TODO . " AS "
                              . SpaceFile::PARENT_APPLICATION_TYPE . ",";
                    $query .= " tdThd.col_todo as parent_application_id,";
                    $query .= " tdFile.col_file";
                    $query .= " FROM tab_grn_space_todo_file AS tdFile, tab_grn_space_todo_thread AS tdThd";
                    $query .= " WHERE tdFile.col_todo = tdThd.col_todo AND tdThd.col_thread = '"
                              . $key_id . "'";

                    $query .= " UNION ";

                    $query .= " SELECT "
                              . SpaceFile::PARENT_APPLICATION_TYPE_THREAD_COMMENT
                              . " as parent_application_type,";
                    $query .= " thdCmnt.col_comment as parent_application_id,";
                    $query .= " thdCmntFile.col_file";
                    $query .= " FROM tab_grn_space_comment_file AS thdCmntFile, tab_grn_space_thread_comment AS thdCmnt";
                    $query .= " WHERE thdCmntFile.col_comment = thdCmnt.col_comment AND thdCmnt.col_thread = '"
                              . $key_id . "'";

                    $query .= " UNION ";

                    $query .= " SELECT "
                              . SpaceFile::PARENT_APPLICATION_TYPE_TODO_COMMENT
                              . " AS " . SpaceFile::PARENT_APPLICATION_TYPE
                              . ",";
                    $query .= " tdCmntFile.col_comment as parent_application_id,";
                    $query .= " tdCmntFile.col_file";
                    $query .= " FROM tab_grn_space_comment_file AS tdCmntFile, tab_grn_space_todo_comment AS tdCmnt, tab_grn_space_todo_thread AS tdThd";
                    $query .= " WHERE tdCmntFile.col_comment = tdCmnt.col_comment AND tdCmnt.col_todo = tdThd.col_todo AND tdThd.col_thread = '"
                              . $key_id . "'";
                    break;
                case SpaceFileSearchCondition::SEARCH_SCOPE_TYPE_TODO_ALL:
                    $query .= " SELECT "
                              . SpaceFile::PARENT_APPLICATION_TYPE_TODO . " AS "
                              . SpaceFile::PARENT_APPLICATION_TYPE . ",";
                    $query .= " tdThd.col_todo as parent_application_id,";
                    $query .= " tdFile.col_file";
                    $query .= " FROM tab_grn_space_todo_file AS tdFile, tab_grn_space_todo_thread AS tdThd";
                    $query .= " WHERE tdFile.col_todo = tdThd.col_todo AND tdThd.col_todo = '"
                              . $key_id . "'";

                    $query .= " UNION ";

                    $query .= " SELECT "
                              . SpaceFile::PARENT_APPLICATION_TYPE_TODO_COMMENT
                              . " as parent_application_type,";
                    $query .= " tdCmntFile.col_comment as parent_application_id,";
                    $query .= " tdCmntFile.col_file";
                    $query .= " FROM tab_grn_space_comment_file AS tdCmntFile, tab_grn_space_todo_comment AS tdCmnt, tab_grn_space_todo_thread AS tdThd";
                    $query .= " WHERE tdCmntFile.col_comment = tdCmnt.col_comment AND tdCmnt.col_todo = tdThd.col_todo AND tdThd.col_todo = '"
                              . $key_id . "'";

                    break;
            }
            $query .= ") t ON t.col_file  = file._id";

            //Search creator
            if (ValidateUtility::isNotNull($searchCondition->getSearchCreatorId())) {
                $query .= " WHERE file.col_creator = '"
                          . $dbConn->escape($searchCondition->getSearchCreatorId())
                          . "'";
            }

            //Order by
            $query .= " ORDER BY ";
            $tempIsNeedComma = false;
            foreach ($searchCondition->getOrderSortArray() as $sortType) {
                if ($tempIsNeedComma) {
                    $query .= ", ";
                }

                switch ($sortType) {
                    case SpaceFileSearchCondition::SORT_ID_ASC:
                        $query .= " file._id ASC";
                        break;
                    case SpaceFileSearchCondition::SORT_ID_DESC:
                        $query .= " file._id DESC";
                        break;
                    case SpaceFileSearchCondition::SORT_CREATE_TIME_ASC:
                        $query .= " file.col_ctime ASC";
                        break;
                    case SpaceFileSearchCondition::SORT_CREATE_TIME_DESC:
                        $query .= " file.col_ctime DESC";
                        break;
                    case SpaceFileSearchCondition::SORT_MODIFY_TIME_ASC:
                        $query .= " file.col_mtime ASC";
                        break;
                    case SpaceFileSearchCondition::SORT_MODIFY_TIME_DESC:
                        $query .= " file.col_mtime DESC";
                        break;
                }

                $tempIsNeedComma = true;
            }

            $query = $dbConn->select_format($query,
                $searchCondition->getOffset(), $searchCondition->getLimit());
            $result = $dbConn->query($query);

            require_once('grn/application.csp');
            require_once('space/GrnSpaceApplication.csp');
            require_once('space/common/data/bean/legacy/GrnSpaceFile.csp');
            $appLocator = \GRN_ApplicationLocator::instance();
            $tableManager
                = $appLocator->getTableManager(\GrnSpaceApplication::GRN_SPACE_APPLICATION_ID);
            $tableInfo = $tableManager->getTableInfo('GRN_Space_File');

            $spaceFileCollection = new SpaceFileCollection();
            while ($row = $dbConn->fetch_assoc($result)) {
                $grnSpaceFile = $tableInfo->getRow($row["_id"], $row);
                $spaceFile = new SpaceFile($row, SpaceFile::NOT_CHECK_INPUT);
                $spaceFile->setGrnSpaceFileObject($grnSpaceFile);

                $spaceFileCollection->appendBean($spaceFile);
            }
            $dbConn->free_result($result);

            //search total count
            $query = "SELECT FOUND_ROWS() AS count;";
            $result = $dbConn->query($query);
            $row = $dbConn->fetch_assoc($result);
            $dbConn->free_result($result);
            if ( ! $row) {
                throw new GrnDatabaseException();
            }
            $spaceFileCollection->setCountNoLimit($row['count']);
        } catch (GrnDatabaseException $e) {
            throw $e;
        }

        return $spaceFileCollection;
    }

    /**
     * The select of a space-file is executed to the database.
     *
     * @param \grn\space\common\data\collection\CommentCollection $commentCollection CommentCollection
     *
     * @throws GrnDatabaseException         Any error in the database.
     * @return array {comment sequence id, SpaceFileCollection}
     */
    public function selectSpaceFileListByCommentCollection(
        CommentCollection $commentCollection
    ) {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "SELECT ";
            $query .= "  file._id";
            $query .= ", file.col_title";
            $query .= ", file.col_title_sort_key";
            $query .= ", file.col_description";
            $query .= ", file.col_mark";
            $query .= ", file.col_max_version";
            $query .= ", file.col_version";
            $query .= ", file.col_creator";
            $query .= ", file.col_creator_foreign_key";
            $query .= ", file.col_creator_name";
            $query .= ", file.col_ctime";
            $query .= ", file.col_modifier";
            $query .= ", file.col_modifier_foreign_key";
            $query .= ", file.col_modifier_name";
            $query .= ", file.col_mtime ";
            $query .= ", file.col_ctime AS " . SpaceFile::CREATE_TIME;
            $query .= ", file.col_mtime AS " . SpaceFile::MODIFY_TIME;
            $query .= ", CASE";
            $query .= " WHEN threadComment.col_comment IS NOT NULL THEN ";
            $query .= SpaceFile::PARENT_APPLICATION_TYPE_THREAD_COMMENT;
            $query .= " ELSE ";
            $query .= SpaceFile::PARENT_APPLICATION_TYPE_TODO_COMMENT;
            $query .= " END AS " . SpaceFile::PARENT_APPLICATION_TYPE;
            $query .= ", cmnt._id AS " . SpaceFile::PARENT_APPLICATION_ID;
            $query .= " FROM ";
            $query .= "  tab_grn_space_file AS file";
            $query .= ", tab_grn_space_comment_file AS cmntFile";
            $query .= ", tab_grn_space_comment AS cmnt";
            $query .= " LEFT JOIN tab_grn_space_thread_comment AS threadComment ON cmnt._id = threadComment.col_comment";
            $query .= " LEFT JOIN tab_grn_space_todo_comment AS todoComment ON cmnt._id = todoComment.col_comment";
            $query .= " WHERE file._id = cmntFile.col_file ";
            $query .= " AND cmntFile.col_comment = cmnt._id";

            //Search condition comment id
            $query .= " AND cmnt._id IN (";
            $tempIsNeedComma = false;
            foreach ($commentCollection as $comment) {
                if ($tempIsNeedComma) {
                    $query .= ", ";
                }

                /** @var \grn\space\common\data\bean\Comment $comment */
                $query .= "'" . $dbConn->escape($comment->getId()) . "'";

                $tempIsNeedComma = true;
            }
            $query .= ")";

            //Order by
            $query .= " ORDER BY " . SpaceFile::PARENT_APPLICATION_ID
                      . ", file._id";

            $result = $dbConn->query($query);

            require_once('grn/application.csp');
            require_once('space/GrnSpaceApplication.csp');
            require_once('space/common/data/bean/legacy/GrnSpaceFile.csp');
            $appLocator = \GRN_ApplicationLocator::instance();
            $tableManager
                = $appLocator->getTableManager(\GrnSpaceApplication::GRN_SPACE_APPLICATION_ID);
            $tableInfo = $tableManager->getTableInfo('GRN_Space_File');

            $beforeCommentId = 0;
            $resultFileCollectionArray = [];
            while ($row = $dbConn->fetch_assoc($result)) {
                //next comment flag on
                $tempIsNextComment = ($beforeCommentId
                                      == $row[SpaceFile::PARENT_APPLICATION_ID])
                    ? false : true;

                if ($tempIsNextComment) {
                    //new: next comment file collection
                    $spaceFileCollection = new SpaceFileCollection();
                    $resultFileCollectionArray[$row[SpaceFile::PARENT_APPLICATION_ID]]
                        = $spaceFileCollection;
                }

                $grnSpaceFile = $tableInfo->getRow($row["_id"], $row);
                $spaceFile = new SpaceFile($row, SpaceFile::NOT_CHECK_INPUT);
                $spaceFile->setGrnSpaceFileObject($grnSpaceFile);

                $spaceFileCollection->appendBean($spaceFile);

                $beforeCommentId = $row[SpaceFile::PARENT_APPLICATION_ID];
            }
            $dbConn->free_result($result);


            //total count
            foreach ($resultFileCollectionArray as $spaceFileCollection) {
                /** @var SpaceFileCollection $spaceFileCollection */
                $spaceFileCollection->setCountNoLimit(count($spaceFileCollection));
            }

        } catch (GrnDatabaseException $e) {
            throw $e;
        }

        return $resultFileCollectionArray;
    }

    /**
     * The select of a space-file is executed to the database.
     *
     * @param  \grn\space\data\collection\SynthesisThreadCommentCollection $synthesisThreadCommentCollection SynthesisThreadCommentCollection
     *
     * @throws GrnDatabaseException     Any error in the database.
     * @return array {thread sequence id, SpaceFileCollection}
     */
    public function selectSpaceFileCollectionsArrayBySynthesisThreadCommentCollection(
        SynthesisThreadCommentCollection $synthesisThreadCommentCollection
    ) {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "SELECT ";
            $query .= "  file._id";
            $query .= ", file.col_title";
            $query .= ", file.col_title_sort_key";
            $query .= ", file.col_description";
            $query .= ", file.col_mark";
            $query .= ", file.col_max_version";
            $query .= ", file.col_version";
            $query .= ", file.col_creator";
            $query .= ", file.col_creator_foreign_key";
            $query .= ", file.col_creator_name";
            $query .= ", file.col_ctime";
            $query .= ", file.col_modifier";
            $query .= ", file.col_modifier_foreign_key";
            $query .= ", file.col_modifier_name";
            $query .= ", file.col_mtime ";
            $query .= ", file.col_ctime AS " . SpaceFile::CREATE_TIME;
            $query .= ", file.col_mtime AS " . SpaceFile::MODIFY_TIME;
            $query .= ", " . SpaceFile::PARENT_APPLICATION_TYPE_THREAD . " AS "
                      . SpaceFile::PARENT_APPLICATION_TYPE;
            $query .= ", thrdFile.col_thread AS "
                      . SpaceFile::PARENT_APPLICATION_ID;
            $query .= " FROM ";
            $query .= "  tab_grn_space_file AS file";
            $query .= ", tab_grn_space_thread_file AS thrdFile";
            $query .= " WHERE file._id = thrdFile.col_file";

            //Search condition thread id
            $query .= " AND thrdFile.col_thread IN (";
            $tempIsNeedComma = false;
            foreach (
                $synthesisThreadCommentCollection as $synthesisThreadComment
            ) {
                if ($tempIsNeedComma) {
                    $query .= ", ";
                }

                /** @var \grn\space\data\bean\SynthesisThreadComment $synthesisThreadComment */
                $query .= "'"
                          . $dbConn->escape($synthesisThreadComment->getId())
                          . "'";

                $tempIsNeedComma = true;
            }
            $query .= ")";

            //Order by
            $query .= " ORDER BY " . SpaceFile::PARENT_APPLICATION_ID
                      . ", file._id";

            $result = $dbConn->query($query);

            require_once('grn/application.csp');
            require_once('space/GrnSpaceApplication.csp');
            require_once('space/common/data/bean/legacy/GrnSpaceFile.csp');
            $appLocator = \GRN_ApplicationLocator::instance();
            $tableManager
                = $appLocator->getTableManager(\GrnSpaceApplication::GRN_SPACE_APPLICATION_ID);
            $tableInfo = $tableManager->getTableInfo('GRN_Space_File');

            $beforeThreadId = 0;
            $resultFileCollectionArray = [];
            while ($row = $dbConn->fetch_assoc($result)) {
                //next thread flag on
                $tempIsNextThread = ($beforeThreadId
                                     == $row[SpaceFile::PARENT_APPLICATION_ID])
                    ? false : true;

                if ($tempIsNextThread) {
                    //new: next thread file collection
                    $spaceFileCollection = new SpaceFileCollection();
                    $resultFileCollectionArray[$row[SpaceFile::PARENT_APPLICATION_ID]]
                        = $spaceFileCollection;
                }

                $grnSpaceFile = $tableInfo->getRow($row["_id"], $row);
                $spaceFile = new SpaceFile($row, SpaceFile::NOT_CHECK_INPUT);
                $spaceFile->setGrnSpaceFileObject($grnSpaceFile);

                $spaceFileCollection->appendBean($spaceFile);

                $beforeThreadId = $row[SpaceFile::PARENT_APPLICATION_ID];
            }
            $dbConn->free_result($result);


            //total count
            foreach ($resultFileCollectionArray as $spaceFileCollection) {
                /** @var SpaceFileCollection $spaceFileCollection */
                $spaceFileCollection->setCountNoLimit(count($spaceFileCollection));
            }

        } catch (GrnDatabaseException $e) {
            throw $e;
        }

        return $resultFileCollectionArray;
    }

    /**
     * Calculate the file size consumed by this category.
     *
     * This function walks into its descendant categories with ignoring access rights and sum them up.
     *
     * @param string $categoryId
     *
     * @return string amount size
     */
    public function getFileUsageOfCategory($categoryId)
    {
        $db = $this->getDatabaseConnection();

        $query = "SELECT " .
                 "SUM(col_size) AS col_size " .
                 "FROM " .
                 "( " .
                 "( " .
                 "SELECT " .
                 "filebody._id, filebody.col_size " .
                 "FROM " .
                 "tab_grn_space_filebody AS filebody, " .
                 "tab_grn_space_file AS _file, " .
                 "tab_grn_space_thread_file AS thread_file," .
                 "tab_grn_space_thread AS thread, " .
                 "tab_grn_space_category AS category, " .
                 "tab_grn_space_category_hierarchy AS hierarchy, " .
                 "tab_grn_space_space_application AS space_application, " .
                 "tab_grn_space_application AS application, " .
                 "tab_grn_space_space AS space, " .
                 "tab_grn_space_category_hierarchy AS hierarchy2 " .
                 "WHERE " .
                 "filebody.col_file = _file._id " .
                 "AND _file._id = thread_file.col_file " .
                 "AND thread_file.col_thread = thread._id " .
                 "AND thread.col_category = category._id " .
                 "AND category._id = hierarchy.col_category " .
                 "AND hierarchy.col_ancestor = space_application.col_root_category "
                 .
                 "AND space_application.col_application = application._id " .
                 "AND application.col_application_code = '"
                 . Application::APPLICATION_CODE_DISCUSSION . "' " .
                 "AND space_application.col_space = space._id " .
                 "AND space.col_category = hierarchy2.col_category " .
                 "AND hierarchy2.col_ancestor = '{$db->escape($categoryId)}' " .
                 ")" .
                 "UNION DISTINCT " .
                 "( " .
                 "SELECT " .
                 "filebody._id, filebody.col_size " .
                 "FROM " .
                 "tab_grn_space_filebody AS filebody, " .
                 "tab_grn_space_file AS _file, " .
                 "tab_grn_space_comment_file AS comment_file, " .
                 "tab_grn_space_comment AS _comment, " .
                 "tab_grn_space_thread_comment AS thread_comment, " .
                 "tab_grn_space_thread AS thread, " .
                 "tab_grn_space_category AS category, " .
                 "tab_grn_space_category_hierarchy AS hierarchy, " .
                 "tab_grn_space_space_application AS space_application, " .
                 "tab_grn_space_application AS application, " .
                 "tab_grn_space_space AS space," .
                 "tab_grn_space_category_hierarchy AS hierarchy2 " .
                 "WHERE " .
                 "filebody.col_file = _file._id " .
                 "AND _file._id = comment_file.col_file " .
                 "AND comment_file.col_comment = _comment._id " .
                 "AND _comment._id = thread_comment.col_comment " .
                 "AND thread_comment.col_thread = thread._id " .
                 "AND thread.col_category = category._id " .
                 "AND category._id = hierarchy.col_category " .
                 "AND hierarchy.col_ancestor = space_application.col_root_category "
                 .
                 "AND space_application.col_application = application._id " .
                 "AND application.col_application_code = '"
                 . Application::APPLICATION_CODE_DISCUSSION . "' " .
                 "AND space_application.col_space = space._id " .
                 "AND space.col_category = hierarchy2.col_category " .
                 "AND hierarchy2.col_ancestor = '{$db->escape($categoryId)}' " .
                 ") " .
                 "UNION DISTINCT" .
                 "( " .
                 "SELECT " .
                 "filebody._id, filebody.col_size " .
                 "FROM " .
                 "tab_grn_space_filebody AS filebody, " .
                 "tab_grn_space_file AS _file, " .
                 "tab_grn_space_todo_file AS todo_file, " .
                 "tab_grn_space_todo AS todo, " .
                 "tab_grn_space_category AS category, " .
                 "tab_grn_space_category_hierarchy AS hierarchy, " .
                 "tab_grn_space_space_application AS space_application, " .
                 "tab_grn_space_application AS application, " .
                 "tab_grn_space_space AS space," .
                 "tab_grn_space_category_hierarchy AS hierarchy2 " .
                 "WHERE " .
                 "filebody.col_file = _file._id " .
                 "AND _file._id = todo_file.col_file " .
                 "AND todo_file.col_todo = todo._id " .
                 "AND todo.col_category = category._id " .
                 "AND category._id = hierarchy.col_category " .
                 "AND hierarchy.col_ancestor = space_application.col_root_category "
                 .
                 "AND space_application.col_application = application._id " .
                 "AND application.col_application_code = '"
                 . Application::APPLICATION_CODE_TODO . "' " .
                 "AND space_application.col_space = space._id " .
                 "AND space.col_category = hierarchy2.col_category " .
                 "AND hierarchy2.col_ancestor = '{$db->escape($categoryId)}' " .
                 ") " .
                 "UNION DISTINCT" .
                 "( " .
                 "SELECT " .
                 "filebody._id, filebody.col_size " .
                 "FROM " .
                 "tab_grn_space_filebody AS filebody, " .
                 "tab_grn_space_file AS _file, " .
                 "tab_grn_space_comment_file AS comment_file, " .
                 "tab_grn_space_comment AS _comment, " .
                 "tab_grn_space_todo_comment AS todo_comment, " .
                 "tab_grn_space_todo AS todo, " .
                 "tab_grn_space_category AS category, " .
                 "tab_grn_space_category_hierarchy AS hierarchy, " .
                 "tab_grn_space_space_application AS space_application, " .
                 "tab_grn_space_application AS application, " .
                 "tab_grn_space_space AS space," .
                 "tab_grn_space_category_hierarchy AS hierarchy2 " .
                 "WHERE " .
                 "filebody.col_file = _file._id " .
                 "AND _file._id = comment_file.col_file " .
                 "AND comment_file.col_comment = _comment._id " .
                 "AND _comment._id = todo_comment.col_comment " .
                 "AND todo_comment.col_todo = todo._id " .
                 "AND todo.col_category = category._id " .
                 "AND category._id = hierarchy.col_category " .
                 "AND hierarchy.col_ancestor = space_application.col_root_category "
                 .
                 "AND space_application.col_application = application._id " .
                 "AND application.col_application_code = '"
                 . Application::APPLICATION_CODE_TODO . "' " .
                 "AND space_application.col_space = space._id " .
                 "AND space.col_category = hierarchy2.col_category " .
                 "AND hierarchy2.col_ancestor = '{$db->escape($categoryId)}' " .
                 ")" .
                 ") AS filebody_table;";

        $result = $db->query($query);
        $row = $db->fetch_assoc($result);
        $db->free_result($result);

        return $row["col_size"];
    }

    /**
     * Calculate the amount of file usage
     *
     * @param \grn\space\data\collection\SpaceCollection $spaceCollection
     *
     * @return null
     * @todo Constants defined in publicConstructsInterface are used in the query. We should separate them but is it possible?
     */
    public function addFileUsage(SpaceCollection $spaceCollection)
    {
        $db = $this->getDatabaseConnection();

        $escapedSpaceIdArray = [];
        foreach ($spaceCollection as $eachSpace) {
            /** @var \grn\space\data\bean\Space $eachSpace */
            $escapedSpaceIdArray[] = "'" . $db->escape($eachSpace->getId())
                                     . "'";
        }
        $escapedSpaceIdArray = implode(",", $escapedSpaceIdArray);

        $query = "SELECT " .
                 "space_id, SUM(col_size) AS col_size " .
                 "FROM " .
                 "(" .
                 "(" .
                 "SELECT" .
                 "  space._id AS space_id" .
                 ", filebody._id" .
                 ", filebody.col_size" .
                 " FROM " .
                 "tab_grn_space_filebody AS filebody, " .
                 "tab_grn_space_file AS _file, " .
                 "tab_grn_space_thread_file AS thread_file, " .
                 "tab_grn_space_thread AS thread, " .
                 "tab_grn_space_category AS category, " .
                 "tab_grn_space_category_hierarchy AS hierarchy, " .
                 "tab_grn_space_space_application AS space_application, " .
                 "tab_grn_space_application AS application, " .
                 "tab_grn_space_space AS space " .
                 "WHERE " .
                 "filebody.col_file = _file._id " .
                 "AND _file._id = thread_file.col_file " .
                 "AND thread_file.col_thread = thread._id " .
                 "AND thread.col_category = category._id " .
                 "AND category._id = hierarchy.col_category " .
                 "AND hierarchy.col_ancestor = space_application.col_root_category "
                 .
                 "AND space_application.col_application = application._id " .
                 "AND application.col_application_code = '"
                 . Application::APPLICATION_CODE_DISCUSSION . "' " .
                 "AND space_application.col_space = space._id " .
                 "AND space._id IN ({$escapedSpaceIdArray}) " .
                 ")" .
                 "UNION " .
                 "( " .
                 "SELECT" .
                 "  space._id AS space_id" .
                 ", filebody._id" .
                 ", filebody.col_size" .
                 " FROM " .
                 "tab_grn_space_filebody AS filebody, " .
                 "tab_grn_space_file AS _file, " .
                 "tab_grn_space_comment_file AS comment_file, " .
                 "tab_grn_space_comment AS _comment, " .
                 "tab_grn_space_thread_comment AS thread_comment, " .
                 "tab_grn_space_thread AS thread, " .
                 "tab_grn_space_category AS category, " .
                 "tab_grn_space_category_hierarchy AS hierarchy, " .
                 "tab_grn_space_space_application AS space_application, " .
                 "tab_grn_space_application AS application, " .
                 "tab_grn_space_space AS space " .
                 "WHERE " .
                 "filebody.col_file = _file._id " .
                 "AND _file._id = comment_file.col_file " .
                 "AND comment_file.col_comment = _comment._id " .
                 "AND _comment._id = thread_comment.col_comment " .
                 "AND thread_comment.col_thread = thread._id " .
                 "AND thread.col_category = category._id " .
                 "AND category._id = hierarchy.col_category " .
                 "AND hierarchy.col_ancestor = space_application.col_root_category "
                 .
                 "AND space_application.col_application = application._id " .
                 "AND application.col_application_code = '"
                 . Application::APPLICATION_CODE_DISCUSSION . "' " .
                 "AND space_application.col_space = space._id " .
                 "AND space._id IN ({$escapedSpaceIdArray}) " .
                 ") " .
                 "UNION " .
                 "( " .
                 "SELECT" .
                 "  space._id AS space_id" .
                 ", filebody._id" .
                 ", filebody.col_size" .
                 " FROM " .
                 "tab_grn_space_filebody AS filebody, " .
                 "tab_grn_space_file AS _file, " .
                 "tab_grn_space_todo_file AS todo_file, " .
                 "tab_grn_space_todo AS todo, " .
                 "tab_grn_space_category AS category, " .
                 "tab_grn_space_category_hierarchy AS hierarchy, " .
                 "tab_grn_space_space_application AS space_application, " .
                 "tab_grn_space_application AS application, " .
                 "tab_grn_space_space AS space " .
                 "WHERE " .
                 "filebody.col_file = _file._id " .
                 "AND _file._id = todo_file.col_file " .
                 "AND todo_file.col_todo = todo._id " .
                 "AND todo.col_category = category._id " .
                 "AND category._id = hierarchy.col_category " .
                 "AND hierarchy.col_ancestor = space_application.col_root_category "
                 .
                 "AND space_application.col_application = application._id " .
                 "AND application.col_application_code = '"
                 . Application::APPLICATION_CODE_TODO . "' " .
                 "AND space_application.col_space = space._id " .
                 "AND space._id IN ({$escapedSpaceIdArray}) " .
                 ") " .
                 "UNION " .
                 "( " .
                 "SELECT" .
                 "  space._id AS space_id" .
                 ", filebody._id" .
                 ", filebody.col_size" .
                 " FROM " .
                 "tab_grn_space_filebody AS filebody, " .
                 "tab_grn_space_file AS _file, " .
                 "tab_grn_space_comment_file AS comment_file, " .
                 "tab_grn_space_comment AS _comment, " .
                 "tab_grn_space_todo_comment AS todo_comment, " .
                 "tab_grn_space_todo AS todo, " .
                 "tab_grn_space_category AS category, " .
                 "tab_grn_space_category_hierarchy AS hierarchy, " .
                 "tab_grn_space_space_application AS space_application, " .
                 "tab_grn_space_application AS application, " .
                 "tab_grn_space_space AS space " .
                 "WHERE " .
                 "filebody.col_file = _file._id " .
                 "AND _file._id = comment_file.col_file " .
                 "AND comment_file.col_comment = _comment._id " .
                 "AND _comment._id = todo_comment.col_comment " .
                 "AND todo_comment.col_todo = todo._id " .
                 "AND todo.col_category = category._id " .
                 "AND category._id = hierarchy.col_category " .
                 "AND hierarchy.col_ancestor = space_application.col_root_category "
                 .
                 "AND space_application.col_application = application._id " .
                 "AND application.col_application_code = '"
                 . Application::APPLICATION_CODE_TODO . "' " .
                 "AND space_application.col_space = space._id " .
                 "AND space._id IN ({$escapedSpaceIdArray}) " .
                 ") " .
                 ") AS tmp_space_filebody " .
                 "GROUP BY " .
                 "tmp_space_filebody.space_id ;";

        $result = $db->query($query);
        while ($row = $db->fetch_assoc($result)) {
            foreach ($spaceCollection as $eachSpace) {
                if ($row["space_id"] == $eachSpace->getId()) {
                    $eachSpace->setFileUsage($row["col_size"]);
                    continue 2;
                }
            }
        }
        $db->free_result($result);

        return;
    }

    /**
     * The select of a space-file is executed to the database.
     *
     * @param  \grn\space\common\data\collection\CategoryCollection $categoryCollection CategoryCollection
     *
     * @throws GrnDatabaseException     Any error in the database.
     * @return \grn\space\common\data\collection\SpaceFileCollection
     */
    public function selectSpaceFileListByCategoryCollection(
        CategoryCollection $categoryCollection
    ) {
        try {
            $db = $this->getDatabaseConnection();

            $escapedCategoryIdArray = [];
            foreach ($categoryCollection as $eachCategory) {
                /** @var \grn\space\common\data\bean\Category $eachCategory */
                $escapedCategoryIdArray[] = "'"
                                            . $db->escape($eachCategory->getId())
                                            . "'";
            }
            $escapedCategoryIdArray = implode(",", $escapedCategoryIdArray);

            $query = "(" .
                     "SELECT" .
                     "  _file._id" .
                     ", _file.col_title" .
                     ", _file.col_title_sort_key" .
                     ", _file.col_description" .
                     ", _file.col_mark" .
                     ", _file.col_max_version" .
                     ", _file.col_version" .
                     ", _file.col_creator" .
                     ", _file.col_creator_foreign_key" .
                     ", _file.col_creator_name" .
                     ", _file.col_ctime" .
                     ", _file.col_modifier" .
                     ", _file.col_modifier_foreign_key" .
                     ", _file.col_modifier_name" .
                     ", _file.col_mtime " .
                     ", _file.col_ctime AS " . SpaceFile::CREATE_TIME .
                     ", _file.col_mtime AS " . SpaceFile::MODIFY_TIME .
                     ", " . SpaceFile::PARENT_APPLICATION_TYPE_THREAD . " AS "
                     . SpaceFile::PARENT_APPLICATION_TYPE .
                     ", thread._id AS " . SpaceFile::PARENT_APPLICATION_ID .
                     " FROM " .
                     "tab_grn_space_file AS _file, " .
                     "tab_grn_space_thread_file AS thread_file, " .
                     "tab_grn_space_thread AS thread " .
                     "WHERE " .
                     "_file._id = thread_file.col_file " .
                     "AND thread_file.col_thread = thread._id " .
                     "AND thread.col_category IN ({$escapedCategoryIdArray}) " .
                     ")" .
                     "UNION DISTINCT " .
                     "( " .
                     "SELECT" .
                     "  _file._id" .
                     ", _file.col_title" .
                     ", _file.col_title_sort_key" .
                     ", _file.col_description" .
                     ", _file.col_mark" .
                     ", _file.col_max_version" .
                     ", _file.col_version" .
                     ", _file.col_creator" .
                     ", _file.col_creator_foreign_key" .
                     ", _file.col_creator_name" .
                     ", _file.col_ctime" .
                     ", _file.col_modifier" .
                     ", _file.col_modifier_foreign_key" .
                     ", _file.col_modifier_name" .
                     ", _file.col_mtime " .
                     ", _file.col_ctime AS " . SpaceFile::CREATE_TIME .
                     ", _file.col_mtime AS " . SpaceFile::MODIFY_TIME .
                     ", " . SpaceFile::PARENT_APPLICATION_TYPE_THREAD_COMMENT
                     . " AS " . SpaceFile::PARENT_APPLICATION_TYPE .
                     ", _comment._id AS " . SpaceFile::PARENT_APPLICATION_ID .
                     " FROM " .
                     "tab_grn_space_file AS _file, " .
                     "tab_grn_space_comment_file AS comment_file, " .
                     "tab_grn_space_comment AS _comment, " .
                     "tab_grn_space_thread_comment AS thread_comment, " .
                     "tab_grn_space_thread AS thread " .
                     "WHERE " .
                     "_file._id = comment_file.col_file " .
                     "AND comment_file.col_comment = _comment._id " .
                     "AND _comment._id = thread_comment.col_comment " .
                     "AND thread_comment.col_thread = thread._id " .
                     "AND thread.col_category  IN ({$escapedCategoryIdArray}) "
                     .
                     ") " .
                     "UNION DISTINCT " .
                     "( " .
                     "SELECT" .
                     "  _file._id" .
                     ", _file.col_title" .
                     ", _file.col_title_sort_key" .
                     ", _file.col_description" .
                     ", _file.col_mark" .
                     ", _file.col_max_version" .
                     ", _file.col_version" .
                     ", _file.col_creator" .
                     ", _file.col_creator_foreign_key" .
                     ", _file.col_creator_name" .
                     ", _file.col_ctime" .
                     ", _file.col_modifier" .
                     ", _file.col_modifier_foreign_key" .
                     ", _file.col_modifier_name" .
                     ", _file.col_mtime " .
                     ", _file.col_ctime AS " . SpaceFile::CREATE_TIME .
                     ", _file.col_mtime AS " . SpaceFile::MODIFY_TIME .
                     ", " . SpaceFile::PARENT_APPLICATION_TYPE_TODO . " AS "
                     . SpaceFile::PARENT_APPLICATION_TYPE .
                     ", todo._id AS " . SpaceFile::PARENT_APPLICATION_ID .
                     " FROM " .
                     "tab_grn_space_file AS _file, " .
                     "tab_grn_space_todo_file AS todo_file, " .
                     "tab_grn_space_todo AS todo " .
                     "WHERE " .
                     "_file._id = todo_file.col_file " .
                     "AND todo_file.col_todo = todo._id " .
                     "AND todo.col_category IN ({$escapedCategoryIdArray}) " .
                     ") " .
                     "UNION DISTINCT " .
                     "( " .
                     "SELECT" .
                     "  _file._id" .
                     ", _file.col_title" .
                     ", _file.col_title_sort_key" .
                     ", _file.col_description" .
                     ", _file.col_mark" .
                     ", _file.col_max_version" .
                     ", _file.col_version" .
                     ", _file.col_creator" .
                     ", _file.col_creator_foreign_key" .
                     ", _file.col_creator_name" .
                     ", _file.col_ctime" .
                     ", _file.col_modifier" .
                     ", _file.col_modifier_foreign_key" .
                     ", _file.col_modifier_name" .
                     ", _file.col_mtime " .
                     ", _file.col_ctime AS " . SpaceFile::CREATE_TIME .
                     ", _file.col_mtime AS " . SpaceFile::MODIFY_TIME .
                     ", " . SpaceFile::PARENT_APPLICATION_TYPE_TODO_COMMENT
                     . " AS " . SpaceFile::PARENT_APPLICATION_TYPE .
                     ", _comment._id AS " . SpaceFile::PARENT_APPLICATION_ID .
                     " FROM " .
                     "tab_grn_space_file AS _file, " .
                     "tab_grn_space_comment_file AS comment_file, " .
                     "tab_grn_space_comment AS _comment, " .
                     "tab_grn_space_todo_comment AS todo_comment, " .
                     "tab_grn_space_todo AS todo " .
                     "WHERE " .
                     "_file._id = comment_file.col_file " .
                     "AND comment_file.col_comment = _comment._id " .
                     "AND _comment._id = todo_comment.col_comment " .
                     "AND todo_comment.col_todo = todo._id " .
                     "AND todo.col_category IN ({$escapedCategoryIdArray}) " .
                     ") ";


            $result = $db->query($query);


            require_once('grn/application.csp');
            require_once('space/GrnSpaceApplication.csp');
            require_once('space/common/data/bean/legacy/GrnSpaceFile.csp');
            $appLocator = \GRN_ApplicationLocator::instance();
            $tableManager
                = $appLocator->getTableManager(\GrnSpaceApplication::GRN_SPACE_APPLICATION_ID);
            $tableInfo = $tableManager->getTableInfo('GRN_Space_File');

            $spaceFileCollection = new SpaceFileCollection();
            while ($row = $db->fetch_assoc($result)) {
                $grnSpaceFile = $tableInfo->getRow($row["_id"], $row);
                $spaceFile = new SpaceFile($row, SpaceFile::NOT_CHECK_INPUT);
                $spaceFile->setGrnSpaceFileObject($grnSpaceFile);

                $spaceFileCollection->appendBean($spaceFile);
            }
            $db->free_result($result);


            //search total count
            $spaceFileCollection->setCountNoLimit(count($spaceFileCollection));

            return $spaceFileCollection;
        } catch (GrnDatabaseException $e) {
            throw $e;
        }
    }

    /**
     * @param int $startId
     * @param int $endId
     *
     * @return array
     */
    public function getAllSpaceFileForFtsFullIndexer($startId, $endId)
    {
        $db = $this->getDatabaseConnection();
        $query = "SELECT " .
                 "f._id, " .
                 "f.col_modifier, " .
                 "f.col_mtime, " .
                 "b._id AS fileId, " .
                 "b.col_blob, " .
                 "b.col_name, " .
                 "CASE " .
                 "WHEN thfs.col_space IS NOT NULL THEN thfs.col_space " .
                 "WHEN tofs.col_space IS NOT NULL THEN tofs.col_space " .
                 "WHEN thcfs.col_space IS NOT NULL THEN thcfs.col_space " .
                 "ELSE tocfs.col_space " .
                 "END AS col_space, " .
                 "CASE " .
                 "WHEN thfs.col_space IS NOT NULL THEN thfs.col_thread " .
                 "WHEN tofs.col_space IS NOT NULL THEN tofs.col_space " .
                 "WHEN thcfs.col_space IS NOT NULL THEN thcfs.col_thread " .
                 "ELSE tocfs.col_thread " .
                 "END AS col_thread, " .
                 "CASE " .
                 "WHEN tofs.col_space IS NOT NULL THEN tofs.col_todo " .
                 "WHEN tocfs.col_space IS NOT NULL THEN tocfs.col_todo " .
                 "ELSE NULL " .
                 "END AS col_todo, " .
                 "CASE " .
                 "WHEN thcfs.col_space IS NOT NULL THEN thcfs.col_comment " .
                 "WHEN tocfs.col_space IS NOT NULL THEN tocfs.col_comment " .
                 "ELSE NULL " .
                 "END AS col_comment " .
                 "FROM " .
                 "tab_grn_space_file AS f " .
                 "LEFT JOIN " .
                 "(" .
                 "SELECT " .
                 "thf.col_thread, " .
                 "thf.col_file, " .
                 "a.col_space " .
                 "FROM " .
                 "tab_grn_space_thread_file AS thf, " .
                 "tab_grn_space_thread AS th, " .
                 "tab_grn_space_category_hierarchy AS h, " .
                 "tab_grn_space_category AS c, " .
                 "tab_grn_space_space_application AS a " .
                 "WHERE " .
                 "thf.col_thread=th._id AND " .
                 "th.col_category=h.col_category AND " .
                 "h.col_ancestor=c._id AND " .
                 "c.col_hierarchy_level=1 AND " .
                 "c._id=a.col_root_category" .
                 ") AS thfs ON f._id=thfs.col_file " .
                 "LEFT JOIN " .
                 "(" .
                 "SELECT " .
                 "tof.col_todo, " .
                 "tof.col_file, " .
                 "a.col_space, " .
                 "toth.col_thread " .
                 "FROM " .
                 "tab_grn_space_todo_file AS tof, " .
                 "tab_grn_space_todo_thread AS toth, " .
                 "tab_grn_space_thread AS th, " .
                 "tab_grn_space_category_hierarchy AS h, " .
                 "tab_grn_space_category AS c, " .
                 "tab_grn_space_space_application AS a " .
                 "WHERE " .
                 "tof.col_todo=toth.col_todo AND " .
                 "toth.col_thread=th._id AND " .
                 "th.col_category=h.col_category AND " .
                 "h.col_ancestor=c._id AND " .
                 "c.col_hierarchy_level=1 AND " .
                 "c._id=a.col_root_category" .
                 ") AS tofs ON f._id=tofs.col_file " .
                 "LEFT JOIN " .
                 "(" .
                 "SELECT " .
                 "cf.col_comment, " .
                 "cf.col_file, " .
                 "a.col_space, " .
                 "tc.col_thread " .
                 "FROM " .
                 "tab_grn_space_comment_file AS cf, " .
                 "tab_grn_space_thread_comment AS tc, " .
                 "tab_grn_space_thread AS th, " .
                 "tab_grn_space_category_hierarchy AS h, " .
                 "tab_grn_space_category AS c, " .
                 "tab_grn_space_space_application AS a " .
                 "WHERE " .
                 "cf.col_comment=tc.col_comment AND " .
                 "tc.col_thread=th._id AND " .
                 "th.col_category=h.col_category AND " .
                 "h.col_ancestor=c._id AND " .
                 "c.col_hierarchy_level=1 AND " .
                 "c._id=a.col_root_category" .
                 ") AS thcfs ON f._id=thcfs.col_file " .
                 "LEFT JOIN " .
                 "(" .
                 "SELECT " .
                 "cf.col_comment, " .
                 "cf.col_file, " .
                 "a.col_space, " .
                 "toth.col_thread, " .
                 "tc.col_todo " .
                 "FROM " .
                 "tab_grn_space_comment_file AS cf, " .
                 "tab_grn_space_todo_comment AS tc, " .
                 "tab_grn_space_todo_thread AS toth, " .
                 "tab_grn_space_thread AS th, " .
                 "tab_grn_space_category_hierarchy AS h, " .
                 "tab_grn_space_category AS c, " .
                 "tab_grn_space_space_application AS a " .
                 "WHERE " .
                 "cf.col_comment=tc.col_comment AND " .
                 "tc.col_todo=toth.col_todo AND " .
                 "toth.col_thread=th._id AND " .
                 "th.col_category=h.col_category AND " .
                 "h.col_ancestor=c._id AND " .
                 "c.col_hierarchy_level=1 AND " .
                 "c._id=a.col_root_category" .
                 ") AS tocfs ON f._id=tocfs.col_file, " .
                 "tab_grn_space_filebody as b " .
                 "WHERE " .
                 "f._id>={$db->escape($startId)} AND " .
                 "{$db->escape($endId)}>=f._id AND " .
                 "f._id=b.col_file AND " .
                 "f.col_version=b.col_version " .
                 "FOR UPDATE";

        $result = $db->query($query);
        $rows = [];
        while ($row = $db->fetch_assoc($result)) {
            $rows[] = $row;
        }
        $db->free_result($result);

        return $rows;
    }
}
