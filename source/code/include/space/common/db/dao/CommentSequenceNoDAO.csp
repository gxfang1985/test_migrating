<?php

namespace grn\space\common\db\dao;

use grn\space\common\db\dao\DataAccessControlAbstract;
use grn\space\common\data\bean\CommentSequenceNo;
use grn\space\common\data\collection\CategoryCollection;
use grn\space\common\exception\ErrorCode;
use grn\space\common\exception\GrnDatabaseException;
use grn\space\common\exception\GrnDataNotFoundException;

/**
 * Database Back Layer
 * This layer mediates the database front layer and the DB.
 *
 * Comment Sequence No Facade Data Access Object Class
 * Accept requests from the database front layer for all CommentSequenceNoInfomation
 */
class CommentSequenceNoDAO extends DataAccessControlAbstract
{
    /**
     * The insert of commentSequenceNo is executed to the data base.
     *
     * @param \grn\space\common\data\bean\CommentSequenceNo $commentSequenceNo
     *
     * @throws GrnDatabaseException             Any error in the database.
     * @return \grn\space\common\data\bean\CommentSequenceNo
     */
    public function insertCommentSequenceNo(CommentSequenceNo $commentSequenceNo
    ) {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "INSERT INTO tab_grn_space_comment_sequence_no SET ";
            $query .= " col_last_no='"
                      . $dbConn->escape($commentSequenceNo->getLastNo()) . "'";
            $query .= ";";

            $dbConn->query($query);

            $commentSequenceNo->setId($dbConn->get_insert_id());
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        return $commentSequenceNo;
    }


    /**
     * The delete of commentSequenceNo is executed to the data base.
     *
     * @param \grn\space\common\data\bean\CommentSequenceNo $commentSequenceNo
     *
     * @throws GrnDataNotFoundException         When the specified commentSequenceNo is not found.
     * @throws GrnDatabaseException             Any error in the database.
     * @return \grn\space\common\data\bean\CommentSequenceNo
     */
    public function deleteCommentSequenceNo(CommentSequenceNo $commentSequenceNo
    ) {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query
                = "DELETE FROM tab_grn_space_comment_sequence_no WHERE _id = '{$dbConn->escape($commentSequenceNo->getId())}';";

            $dbConn->query($query);

            $deleteCount = $dbConn->affected_rows();
            if ($deleteCount === 0) {
                throw new GrnDataNotFoundException(ErrorCode::GRN_INVALID_COMMENT_SEQUENCE_ID);
            }
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        return $commentSequenceNo;
    }

    /**
     * The select of a commentSequenceNo is executed to the database.
     *
     * @param string $commentSequenceNoId commentSequenceNo sequence id
     *
     * @throws GrnDataNotFoundException         When the specified commentSequenceNo is not found.
     * @throws GrnDatabaseException             Any error in the database.
     * @return \grn\space\common\data\bean\CommentSequenceNo
     */
    public function selectCommentSequenceNo($commentSequenceNoId)
    {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "SELECT ";
            $query .= " _id,";
            $query .= " col_last_no";
            $query .= " FROM";
            $query .= " tab_grn_space_comment_sequence_no";
            $query .= " WHERE _id = '{$dbConn->escape($commentSequenceNoId)}'";
            $query .= ";";

            $result = $dbConn->query($query);

            $row = $dbConn->fetch_assoc($result);
            $dbConn->free_result($result);
            if ( ! $row) {
                throw new GrnDataNotFoundException(ErrorCode::GRN_INVALID_COMMENT_SEQUENCE_ID);
            }
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        return new CommentSequenceNo($row, CommentSequenceNo::NOT_CHECK_INPUT);
    }

    /**
     * The increment of a commentSequenceNo is executed to the database.
     *
     * @param \grn\space\common\data\bean\CommentSequenceNo $commentSequenceNo
     *
     * @throws GrnDatabaseException             Any error in the database.
     * @return \grn\space\common\data\bean\CommentSequenceNo
     */
    public function getNextCommentSequenceNo(
        CommentSequenceNo $commentSequenceNo
    ) {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "UPDATE tab_grn_space_comment_sequence_no SET ";
            $query .= " col_last_no = LAST_INSERT_ID(col_last_no + 1)";
            $query .= " WHERE _id = '"
                      . $dbConn->escape($commentSequenceNo->getId()) . "'";
            $query .= ";";
            $dbConn->query($query);

            $commentSequenceNo->setLastNo($dbConn->get_insert_id());
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        return $commentSequenceNo;
    }

    /**
     * Delete CommentSequenceNo by CategoryCollection
     *
     * @param \grn\space\common\data\collection\CategoryCollection $categoryCollection
     *
     * @return resource
     * @throws GrnDatabaseException
     */
    public function deleteCommentSequenceNoByCategoryCollection(
        CategoryCollection $categoryCollection
    ) {
        try {
            $db = $this->getDatabaseConnection();

            $escapedCategoryIdArray = [];
            foreach ($categoryCollection as $eachCategory) {
                /** @var \grn\space\common\data\bean\Category $eachCategory */
                $escapedCategoryIdArray[] = "'"
                                            . $db->escape($eachCategory->getId())
                                            . "'";
            }
            $escapedCategoryIdArray = implode(",", $escapedCategoryIdArray);

            return $db->query(
                "DELETE FROM " .
                "tab_grn_space_comment_sequence_no " .
                "USING " .
                "tab_grn_space_comment_sequence_no, " .
                "tab_grn_space_thread " .
                "WHERE " .
                "tab_grn_space_comment_sequence_no._id = tab_grn_space_thread.col_comment_sequence_no "
                .
                "AND " .
                "tab_grn_space_thread.col_category IN ({$escapedCategoryIdArray});"
            );
        } catch (GrnDatabaseException $e) {
            throw $e;
        }
    }
}
