<?php

namespace grn\space\common\db\dao;

use grn\space\common\db\dao\DataAccessControlAbstract;
use grn\space\common\data\bean\Application;
use grn\space\common\data\bean\Category;
use grn\space\common\data\collection\CategoryCollection;
use grn\space\common\data\condition\CategorySearchCondition;
use grn\space\common\exception\ErrorCode;
use grn\space\common\exception\GrnDatabaseException;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\common\utility\ValidateUtility;


/**
 * Database Back Layer
 * This layer mediates the database front layer and the DB.
 *
 * Category Data Access Object Class
 * Accept requests from the database front layer for all Category
 */
class CategoryDAO extends DataAccessControlAbstract
{
    /**
     * The insert of category is executed to the database.
     *
     * @param \grn\space\common\data\bean\Category $category Category
     *
     * @throws GrnDatabaseException     Any error in the database.
     * @return \grn\space\common\data\bean\Category
     */
    public function insertCategory(Category $category)
    {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "INSERT INTO tab_grn_space_category SET ";
            $query .= "  col_category_code='"
                      . $dbConn->escape($category->getCategoryCode()) . "'";
            $query .= ", col_category_name='"
                      . $dbConn->escape($category->getCategoryName()) . "'";
            $query .= ", col_memo='" . $dbConn->escape($category->getMemo())
                      . "'";
            $query .= ", col_hierarchy_level='"
                      . $dbConn->escape($category->getHierarchyLevel()) . "'";
            if (ValidateUtility::isNotNull($category->getParentCategoryId())) {
                $query .= ", col_parent='"
                          . $dbConn->escape($category->getParentCategoryId())
                          . "'";
            }
            $query .= ", col_display_order='"
                      . $dbConn->escape($category->getDisplayOrder()) . "'";
            $query .= ", col_is_system_use='" . (($category->isSystemUse())
                    ? "1" : "0") . "'";
            $query .= ", col_creator='"
                      . $dbConn->escape($category->getCreatorId()) . "'";
            $query .= ", col_creator_name='"
                      . $dbConn->escape($category->getCreatorName()) . "'";
            $query .= ", col_create_timestamp='"
                      . $dbConn->escape($category->getCreateTimestamp()) . "'";
            if (ValidateUtility::isNotNull($category->getModifierId())) {
                $query .= ", col_modifier='"
                          . $dbConn->escape($category->getModifierId()) . "'";
            }
            $query .= ", col_modifier_name='"
                      . $dbConn->escape($category->getModifierName()) . "'";
            if (ValidateUtility::isNotNull($category->getModifyTimestamp())) {
                $query .= ", col_modify_timestamp='"
                          . $dbConn->escape($category->getModifyTimestamp())
                          . "'";
            }


            $query .= ";";

            $dbConn->query($query);

            $category->setId($dbConn->get_insert_id());
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        return $category;
    }

    /**
     * The update of category is executed to the database.
     *
     * @param \grn\space\common\data\bean\Category $category Category
     *
     * @throws GrnDatabaseException     Any error in the database.
     * @return \grn\space\common\data\bean\Category
     */
    public function updateCategory(Category $category)
    {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "UPDATE tab_grn_space_category SET ";
            $query .= " col_category_code='"
                      . $dbConn->escape($category->getCategoryCode()) . "', ";
            $query .= " col_category_name='"
                      . $dbConn->escape($category->getCategoryName()) . "', ";
            $query .= " col_memo='" . $dbConn->escape($category->getMemo())
                      . "', ";
            $query .= " col_hierarchy_level='"
                      . $dbConn->escape($category->getHierarchyLevel()) . "', ";
            if (ValidateUtility::isNull($category->getParentCategoryId())) {
                $query .= " col_parent = NULL, ";
            } else {
                $query .= " col_parent='"
                          . $dbConn->escape($category->getParentCategoryId())
                          . "', ";
            }
            $query .= " col_display_order='"
                      . $dbConn->escape($category->getDisplayOrder()) . "', ";
            $query .= " col_is_system_use='" . (($category->isSystemUse()) ? "1"
                    : "0") . "', ";
            if (ValidateUtility::isNull($category->getCreatorId())) {
                $query .= " col_creator = NULL, ";
            } else {
                $query .= " col_creator='"
                          . $dbConn->escape($category->getCreatorId()) . "', ";
            }
            $query .= " col_creator_name='"
                      . $dbConn->escape($category->getCreatorName()) . "', ";
            $query .= " col_create_timestamp='"
                      . $dbConn->escape($category->getCreateTimestamp())
                      . "', ";
            if (ValidateUtility::isNull($category->getModifierId())) {
                $query .= " col_modifier = NULL, ";
            } else {
                $query .= " col_modifier='"
                          . $dbConn->escape($category->getModifierId()) . "', ";
            }
            $query .= " col_modifier_name='"
                      . $dbConn->escape($category->getModifierName()) . "', ";
            if (ValidateUtility::isNull($category->getModifyTimestamp())) {
                $query .= " col_modify_timestamp = NULL ";
            } else {
                $query .= " col_modify_timestamp='"
                          . $dbConn->escape($category->getModifyTimestamp())
                          . "' ";
            }
            $query .= " WHERE _id = '{$dbConn->escape($category->getId())}'";
            $query .= ";";

            $dbConn->query($query);
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        return $category;
    }

    /**
     * The delete of category is executed to the data base.
     *
     * @param \grn\space\common\data\bean\Category $category Category
     *
     * @throws GrnDataNotFoundException     When the specified category is not found.
     * @throws GrnDatabaseException         Any error in the database.
     * @return \grn\space\common\data\bean\Category
     */
    public function deleteCategory(Category $category)
    {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query
                = "DELETE FROM tab_grn_space_category WHERE _id = '{$dbConn->escape($category->getId())}';";

            $dbConn->query($query);

            $deleteCount = $dbConn->affected_rows();
            if ($deleteCount === 0) {
                throw new GrnDataNotFoundException(ErrorCode::GRN_INVALID_CATEGORY_ID);
            }
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        return $category;
    }

    /**
     * Delete given categories.
     *
     * @param CategoryCollection $categoryCollection
     *
     * @throws GrnDatabaseException
     *
     * @return integer number of the deleted columns
     */
    public function deleteCategoryByCategoryCollection(
        CategoryCollection $categoryCollection
    ) {
        try {
            $db = $this->getDatabaseConnection();
            $escapedCategoryIdArray = [];
            foreach ($categoryCollection as $eachCategory) {
                /** @var \grn\space\common\data\bean\Category $eachCategory */
                $escapedCategoryIdArray[] = "'"
                                            . $db->escape($eachCategory->getId())
                                            . "'";
            }
            $escapedCategoryIdArray = implode(",", $escapedCategoryIdArray);

            $db->query(
                "DELETE FROM tab_grn_space_category WHERE _id IN ({$escapedCategoryIdArray});"
            );

            return $db->affected_rows();
        } catch (GrnDatabaseException $e) {
            throw $e;
        }
    }

    /**
     * The select of a category is executed to the database.
     *
     * @param string $categoryId   category sequence id
     * @param string $languageCode dispaly language code
     *
     * @throws GrnDataNotFoundException     category is not found
     * @throws GrnDatabaseException         Any error in the database.
     * @return \grn\space\common\data\bean\Category
     */
    public function selectCategory($categoryId, $languageCode)
    {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "SELECT ";
            $query .= " ctg._id, ";
            $query .= " ctg.col_category_code, ";
            $query .= "IFNULL(lcl.col_category_name, ctg.col_category_name) AS col_category_name, ";
            $query .= " ctg.col_memo, ";
            $query .= " ctg.col_hierarchy_level, ";
            $query .= " ctg.col_parent, ";
            $query .= " ctg.col_display_order, ";
            $query .= " ctg.col_is_system_use, ";
            $query .= " ctg.col_creator, ";
            $query .= " ctg.col_creator_name, ";
            $query .= " ctg.col_create_timestamp, ";
            $query .= " ctg.col_modifier, ";
            $query .= " ctg.col_modifier_name, ";
            $query .= " ctg.col_modify_timestamp ";
            $query .= " FROM tab_grn_space_category ctg LEFT JOIN (tab_grn_space_category_local lcl INNER JOIN tab_cb_language_status l ON lcl.col_language = l._id AND l.col_language = '"
                      . $dbConn->escape($languageCode)
                      . "') ON ctg._id = lcl.col_category";
            $query .= " WHERE ctg._id = '{$dbConn->escape($categoryId)}'";
            $query .= ";";

            $result = $dbConn->query($query);

            $row = $dbConn->fetch_assoc($result);
            $dbConn->free_result($result);
            if ( ! $row) {
                throw new GrnDataNotFoundException(ErrorCode::GRN_INVALID_CATEGORY_ID);
            }

            $category = new Category($row, Category::NOT_CHECK_INPUT);
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        return $category;
    }


    /**
     * The select of a category is executed to the database.
     *
     * @param string $categoryCode category code
     * @param string $languageCode dispaly language code
     *
     * @throws GrnDataNotFoundException     category is not found
     * @throws GrnDatabaseException         Any error in the database.
     * @return \grn\space\common\data\bean\Category
     */
    public function selectCategoryByCategoryCode($categoryCode, $languageCode)
    {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "SELECT ";
            $query .= " ctg._id, ";
            $query .= " ctg.col_category_code, ";
            $query .= "IFNULL(lcl.col_category_name, ctg.col_category_name) AS col_category_name, ";
            $query .= " ctg.col_memo, ";
            $query .= " ctg.col_hierarchy_level, ";
            $query .= " ctg.col_parent, ";
            $query .= " ctg.col_display_order, ";
            $query .= " ctg.col_is_system_use, ";
            $query .= " ctg.col_creator, ";
            $query .= " ctg.col_creator_name, ";
            $query .= " ctg.col_create_timestamp, ";
            $query .= " ctg.col_modifier, ";
            $query .= " ctg.col_modifier_name, ";
            $query .= " ctg.col_modify_timestamp ";
            $query .= " FROM tab_grn_space_category AS ctg LEFT JOIN (tab_grn_space_category_local AS lcl INNER JOIN tab_cb_language_status AS l ON lcl.col_language = l._id AND l.col_language = '"
                      . $dbConn->escape($languageCode)
                      . "') ON ctg._id = lcl.col_category";
            $query .= " WHERE ctg.col_category_code = '{$dbConn->escape($categoryCode)}'";
            $query .= ";";

            $result = $dbConn->query($query);

            $row = $dbConn->fetch_assoc($result);
            $dbConn->free_result($result);
            if ( ! $row) {
                throw new GrnDataNotFoundException(ErrorCode::GRN_INVALID_CATEGORY_ID);
            }

            $category = new Category($row, Category::NOT_CHECK_INPUT);
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        return $category;
    }

    /**
     * The select of a category is executed to the database.
     *
     * @param string $ancestorCategoryId   category sequence id
     * @param string $descendantCategoryId category sequence id
     * @param string $languageCode         dispaly language code
     *
     * @throws GrnDataNotFoundException     category is not found
     * @throws GrnDatabaseException         Any error in the database.
     * @return \grn\space\common\data\bean\Category
     */
    public function selectCategoryByAncestorCategoryIdDescendantCategoryId(
        $ancestorCategoryId,
        $descendantCategoryId,
        $languageCode
    ) {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "SELECT ";
            $query .= " ctg._id, ";
            $query .= " ctg.col_category_code, ";
            $query .= "IFNULL(lcl.col_category_name, ctg.col_category_name) AS col_category_name, ";
            $query .= " ctg.col_memo, ";
            $query .= " ctg.col_hierarchy_level, ";
            $query .= " ctg.col_parent, ";
            $query .= " ctg.col_display_order, ";
            $query .= " ctg.col_is_system_use, ";
            $query .= " ctg.col_creator, ";
            $query .= " ctg.col_creator_name, ";
            $query .= " ctg.col_create_timestamp, ";
            $query .= " ctg.col_modifier, ";
            $query .= " ctg.col_modifier_name, ";
            $query .= " ctg.col_modify_timestamp ";
            $query .= " FROM tab_grn_space_category AS ctg LEFT JOIN (tab_grn_space_category_local AS lcl INNER JOIN tab_cb_language_status AS l ON lcl.col_language = l._id AND l.col_language = '"
                      . $dbConn->escape($languageCode)
                      . "') ON ctg._id = lcl.col_category";
            $query .= ", tab_grn_space_category_hierarchy AS ctgHirhy";
            $query .= " WHERE ctg._id = ctgHirhy.col_category";
            $query .= " AND ctgHirhy.col_ancestor = '{$dbConn->escape($ancestorCategoryId)}'";
            $query .= " AND ctgHirhy.col_category = '{$dbConn->escape($descendantCategoryId)}'";
            $query .= ";";

            $result = $dbConn->query($query);

            $row = $dbConn->fetch_assoc($result);
            $dbConn->free_result($result);
            if ( ! $row) {
                throw new GrnDataNotFoundException(ErrorCode::GRN_INVALID_CATEGORY_ID);
            }

            $category = new Category($row, Category::NOT_CHECK_INPUT);
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        return $category;
    }

    /**
     * The select of a category is executed to the database.
     *
     * @param string $ancestorCategoryId category sequence id
     * @param string $categoryCode       category code
     * @param string $languageCode       dispaly language code
     *
     * @throws GrnDataNotFoundException     category is not found
     * @throws GrnDatabaseException         Any error in the database.
     * @return \grn\space\common\data\bean\Category
     */
    public function selectCategoryByAncestorCategoryIdCategoryCode(
        $ancestorCategoryId,
        $categoryCode,
        $languageCode
    ) {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "SELECT ";
            $query .= " ctg._id, ";
            $query .= " ctg.col_category_code, ";
            $query .= "IFNULL(lcl.col_category_name, ctg.col_category_name) AS col_category_name, ";
            $query .= " ctg.col_memo, ";
            $query .= " ctg.col_hierarchy_level, ";
            $query .= " ctg.col_parent, ";
            $query .= " ctg.col_display_order, ";
            $query .= " ctg.col_is_system_use, ";
            $query .= " ctg.col_creator, ";
            $query .= " ctg.col_creator_name, ";
            $query .= " ctg.col_create_timestamp, ";
            $query .= " ctg.col_modifier, ";
            $query .= " ctg.col_modifier_name, ";
            $query .= " ctg.col_modify_timestamp ";
            $query .= " FROM tab_grn_space_category AS ctg LEFT JOIN (tab_grn_space_category_local AS lcl INNER JOIN tab_cb_language_status AS l ON lcl.col_language = l._id AND l.col_language = '"
                      . $dbConn->escape($languageCode)
                      . "') ON ctg._id = lcl.col_category";
            $query .= ", tab_grn_space_category_hierarchy AS ctgHirhy";
            $query .= " WHERE ctg._id = ctgHirhy.col_category";
            $query .= " AND ctgHirhy.col_ancestor = '{$dbConn->escape($ancestorCategoryId)}'";
            $query .= " AND ctg.col_category_code = '{$dbConn->escape($categoryCode)}'";
            $query .= ";";

            $result = $dbConn->query($query);

            $row = $dbConn->fetch_assoc($result);
            $dbConn->free_result($result);
            if ( ! $row) {
                throw new GrnDataNotFoundException(ErrorCode::GRN_INVALID_CATEGORY_ID);
            }

            $category = new Category($row, Category::NOT_CHECK_INPUT);
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        return $category;
    }

    /**
     * Return a Category object searched by spaceId and applicationCode
     *
     * @param string $spaceId
     * @param string $applicationCode
     * @param string $languageCode
     *
     * @return \grn\space\common\data\bean\Category
     * @throws GrnDatabaseException
     * @throws GrnDataNotFoundException
     */
    public function selectCategoryBySpaceIdApplicationCode(
        $spaceId,
        $applicationCode,
        $languageCode
    ) {
        try {
            $db = $this->getDatabaseConnection();
            $query = "SELECT " .
                     " category._id, " .
                     " category.col_category_code, " .
                     "IFNULL(local.col_category_name, category.col_category_name) AS col_category_name, "
                     .
                     " category.col_memo, " .
                     " category.col_hierarchy_level, " .
                     " category.col_parent, " .
                     " category.col_display_order, " .
                     " category.col_is_system_use, " .
                     " category.col_creator, " .
                     " category.col_creator_name, " .
                     " category.col_create_timestamp, " .
                     " category.col_modifier, " .
                     " category.col_modifier_name, " .
                     " category.col_modify_timestamp " .
                     " FROM " .
                     "tab_grn_space_category AS category " .
                     "LEFT JOIN (" .
                     "tab_grn_space_category_local local " .
                     "INNER JOIN " .
                     "tab_cb_language_status l ON local.col_language = l._id AND l.col_language = '{$db->escape($languageCode)}'"
                     .
                     ") ON category._id = local.col_category, " .
                     "tab_grn_space_space_application AS s_application, " .
                     "tab_grn_space_application AS application " .
                     " WHERE " .
                     "category._id = s_application.col_root_category AND " .
                     "s_application.col_application = application._id AND " .
                     "s_application.col_space = '{$db->escape($spaceId)}' AND "
                     .
                     "application.col_application_code = '{$db->escape($applicationCode)}';";

            $result = $db->query($query);

            $row = $db->fetch_assoc($result);
            $db->free_result($result);
            if ( ! $row) {
                throw new GrnDataNotFoundException(ErrorCode::GRN_INVALID_CATEGORY_ID);
            }

            $category = new Category($row, Category::NOT_CHECK_INPUT);
        } catch (GrnDatabaseException $e) {
            throw $e;
        }

        return $category;
    }


    /**
     * Return a Category object searched by spaceId and threadCategoryId
     *
     * @param string $spaceId          space sequence id
     * @param string $threadCategoryId category sequence id
     * @param string $languageCode     dispaly language code
     *
     * @throws GrnDataNotFoundException     category is not found
     * @throws GrnDatabaseException         Any error in the database.
     * @return \grn\space\common\data\bean\Category
     */
    public function selectCategoryBySpaceIdThreadCategoryId(
        $spaceId,
        $threadCategoryId,
        $languageCode
    ) {
        try {
            $db = $this->getDatabaseConnection();

            $query = "SELECT";
            $query .= " ctg._id, ";
            $query .= " ctg.col_category_code, ";
            $query .= " ctg.col_category_name, ";
            $query .= " ctg.col_memo, ";
            $query .= " ctg.col_hierarchy_level, ";
            $query .= " ctg.col_parent, ";
            $query .= " ctg.col_display_order, ";
            $query .= " ctg.col_is_system_use, ";
            $query .= " ctg.col_creator, ";
            $query .= " ctg.col_creator_name, ";
            $query .= " ctg.col_create_timestamp, ";
            $query .= " ctg.col_modifier, ";
            $query .= " ctg.col_modifier_name, ";
            $query .= " ctg.col_modify_timestamp ";
            $query .= " FROM ";
            $query .= "  tab_grn_space_category AS ctg LEFT JOIN (tab_grn_space_category_local AS lcl INNER JOIN tab_cb_language_status AS l ON lcl.col_language = l._id AND l.col_language = '"
                      . $db->escape($languageCode)
                      . "') ON ctg._id = lcl.col_category";
            $query .= ", tab_grn_space_space_application AS spaceAppl";
            $query .= ", tab_grn_space_application AS appl";
            $query .= ", tab_grn_space_category_hierarchy AS hirhy";
            $query .= " WHERE";
            $query .= "     appl.col_application_code = '"
                      . Application::APPLICATION_CODE_DISCUSSION . "'";
            $query .= " AND spaceAppl.col_space = '{$db->escape($spaceId)}'";
            $query .= " AND spaceAppl.col_application = appl._id";
            $query .= " AND spaceAppl.col_root_category = hirhy.col_ancestor";
            $query .= " AND hirhy.col_category = ctg._id";
            $query .= " AND ctg._id = '{$db->escape($threadCategoryId)}'";
            $query .= ";";

            $result = $db->query($query);

            $row = $db->fetch_assoc($result);
            $db->free_result($result);
            if ( ! $row) {
                throw new GrnDataNotFoundException(ErrorCode::GRN_INVALID_CATEGORY_ID);
            }

            $category = new Category($row, Category::NOT_CHECK_INPUT);
        } catch (GrnDatabaseException $e) {
            throw $e;
        }

        return $category;
    }


    /**
     * Return a Category object searched by spaceId and threadId and todoCategoryId
     *
     * @param string $spaceId        space sequence id
     * @param string $threadId       thread sequence id
     * @param string $todoCategoryId category sequence id
     * @param string $languageCode   dispaly language code
     *
     * @throws GrnDataNotFoundException     category is not found
     * @throws GrnDatabaseException         Any error in the database.
     * @return \grn\space\common\data\bean\Category
     */
    public function selectCategoryBySpaceIdThreadIdTodoCategoryId(
        $spaceId,
        $threadId,
        $todoCategoryId,
        $languageCode
    ) {
        try {
            $db = $this->getDatabaseConnection();

            $query = "SELECT";
            $query .= " ctg._id, ";
            $query .= " ctg.col_category_code, ";
            $query .= " ctg.col_category_name, ";
            $query .= " ctg.col_memo, ";
            $query .= " ctg.col_hierarchy_level, ";
            $query .= " ctg.col_parent, ";
            $query .= " ctg.col_display_order, ";
            $query .= " ctg.col_is_system_use, ";
            $query .= " ctg.col_creator, ";
            $query .= " ctg.col_creator_name, ";
            $query .= " ctg.col_create_timestamp, ";
            $query .= " ctg.col_modifier, ";
            $query .= " ctg.col_modifier_name, ";
            $query .= " ctg.col_modify_timestamp ";
            $query .= " FROM ";
            $query .= "  tab_grn_space_category AS ctg LEFT JOIN (tab_grn_space_category_local AS lcl INNER JOIN tab_cb_language_status AS l ON lcl.col_language = l._id AND l.col_language = '"
                      . $db->escape($languageCode)
                      . "') ON ctg._id = lcl.col_category";
            $query .= ", (";
            $query .= " SELECT";
            $query .= " spaceThrdAppl.col_space";
            $query .= " FROM";
            $query .= "  tab_grn_space_space_application AS spaceThrdAppl";
            $query .= ", tab_grn_space_application AS thrdAppl";
            $query .= ", tab_grn_space_category_hierarchy AS thrdCtgHirhy";
            $query .= ", tab_grn_space_thread AS thrd";
            $query .= " WHERE";
            $query .= "     spaceThrdAppl.col_space = '{$db->escape($spaceId)}'";
            $query .= " AND thrdAppl.col_application_code = '"
                      . Application::APPLICATION_CODE_DISCUSSION . "'";
            $query .= " AND spaceThrdAppl.col_application = thrdAppl._id";
            $query .= " AND spaceThrdAppl.col_root_category = thrdCtgHirhy.col_ancestor";
            $query .= " AND thrdCtgHirhy.col_category = thrd.col_category";
            $query .= " AND thrd._id = '{$db->escape($threadId)}'";
            $query .= ") AS thrdSpace";
            $query .= ", (";
            $query .= " SELECT";
            $query .= " spaceTodoAppl.col_space";
            $query .= " FROM";
            $query .= "  tab_grn_space_space_application AS spaceTodoAppl";
            $query .= ", tab_grn_space_application AS tododAppl";
            $query .= ", tab_grn_space_category_hierarchy AS todoCtgHirhy";
            $query .= " WHERE";
            $query .= "     spaceTodoAppl.col_space = '{$db->escape($spaceId)}'";
            $query .= " AND tododAppl.col_application_code = '"
                      . Application::APPLICATION_CODE_TODO . "'";
            $query .= " AND spaceTodoAppl.col_application = tododAppl._id";
            $query .= " AND spaceTodoAppl.col_root_category = todoCtgHirhy.col_ancestor";
            $query .= " AND todoCtgHirhy.col_category = '{$db->escape($todoCategoryId)}'";
            $query .= ") AS todoSpace";
            $query .= " WHERE ";
            $query .= "     thrdSpace.col_space = '{$db->escape($spaceId)}'";
            $query .= " AND todoSpace.col_space = '{$db->escape($spaceId)}'";
            $query .= " AND ctg._id = '{$db->escape($todoCategoryId)}'";
            $query .= ";";

            $result = $db->query($query);

            $row = $db->fetch_assoc($result);
            $db->free_result($result);
            if ( ! $row) {
                throw new GrnDataNotFoundException(ErrorCode::GRN_INVALID_CATEGORY_ID);
            }

            $category = new Category($row, Category::NOT_CHECK_INPUT);
        } catch (GrnDatabaseException $e) {
            throw $e;
        }

        return $category;
    }


    /**
     * The select of categorys is executed to the database.
     *
     * @param \grn\space\common\data\condition\CategorySearchCondition $categorySearchCondition CategorySearchCondition
     *
     * @throws GrnDatabaseException                 FOUND_ROWSが取れなかった。 Any error in the database.
     * @return \grn\space\common\data\collection\CategoryCollection
     */
    public function selectCategoryList(
        CategorySearchCondition $categorySearchCondition
    ) {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "SELECT SQL_CALC_FOUND_ROWS";
            $query .= " main._id, ";
            $query .= " main.col_category_code, ";
            $query .= " main.col_category_name, ";
            $query .= " main.col_memo, ";
            $query .= " main.col_hierarchy_level, ";
            $query .= " main.col_parent, ";
            $query .= " main.col_display_order, ";
            $query .= " main.col_is_system_use, ";
            $query .= " main.col_creator, ";
            $query .= " main.col_creator_name, ";
            $query .= " main.col_create_timestamp, ";
            $query .= " main.col_modifier, ";
            $query .= " main.col_modifier_name, ";
            $query .= " main.col_modify_timestamp ";
            $query .= " FROM (";


            //## Subquery start
            //Search scope range
            if ($categorySearchCondition->getSearchScopeType()
                === CategorySearchCondition::SEARCH_SCOPE_CATEGORY_TARGET_ONLY
            ) {
                $query .= "SELECT";
                $query .= " ctg._id, ";
                $query .= " ctg.col_category_code, ";
                $query .= " IFNULL(lcl.col_category_name, ctg.col_category_name) AS col_category_name, ";
                $query .= " ctg.col_memo, ";
                $query .= " ctg.col_hierarchy_level, ";
                $query .= " ctg.col_parent, ";
                $query .= " ctg.col_display_order, ";
                $query .= " ctg.col_is_system_use, ";
                $query .= " ctg.col_creator, ";
                $query .= " ctg.col_creator_name, ";
                $query .= " ctg.col_create_timestamp, ";
                $query .= " ctg.col_modifier, ";
                $query .= " ctg.col_modifier_name, ";
                $query .= " ctg.col_modify_timestamp ";
                $query .= " FROM ";
                $query .= " tab_grn_space_category AS ctg ";
                $query .= " LEFT JOIN ( tab_grn_space_category_local AS lcl INNER JOIN tab_cb_language_status AS l ON lcl.col_language = l._id AND l.col_language = '"
                          . $dbConn->escape($categorySearchCondition->getLanguageCode())
                          . "') ON ctg._id = lcl.col_category ";

                //Search condition category id
                $query .= " WHERE ctg._id  = '"
                          . $dbConn->escape($categorySearchCondition->getSearchCategoryId())
                          . "'";
            } else {
                $query .= "SELECT";
                $query .= " ctg._id, ";
                $query .= " ctg.col_category_code, ";
                $query .= " IFNULL(lcl.col_category_name, ctg.col_category_name) AS col_category_name, ";
                $query .= " ctg.col_memo, ";
                $query .= " ctg.col_hierarchy_level, ";
                $query .= " ctg.col_parent, ";
                $query .= " ctg.col_display_order, ";
                $query .= " ctg.col_is_system_use, ";
                $query .= " ctg.col_creator, ";
                $query .= " ctg.col_creator_name, ";
                $query .= " ctg.col_create_timestamp, ";
                $query .= " ctg.col_modifier, ";
                $query .= " ctg.col_modifier_name, ";
                $query .= " ctg.col_modify_timestamp ";
                $query .= " FROM ";
                $query .= " tab_grn_space_category AS ctg ";
                $query .= " LEFT JOIN ( tab_grn_space_category_local AS lcl INNER JOIN tab_cb_language_status AS l ON lcl.col_language = l._id AND l.col_language = '"
                          . $dbConn->escape($categorySearchCondition->getLanguageCode())
                          . "') ON ctg._id = lcl.col_category, ";
                $query .= " tab_grn_space_category_hierarchy AS hirhy ";

                //Search condition category id
                switch ($categorySearchCondition->getSearchScopeType()) {
                    case CategorySearchCondition::SEARCH_SCOPE_CATEGORY_ANCESTOR:
                        $query .= " WHERE ctg._id = hirhy.col_ancestor";
                        $query .= " AND hirhy.col_category = '"
                                  . $dbConn->escape($categorySearchCondition->getSearchCategoryId())
                                  . "'";

                        break;
                    case CategorySearchCondition::SEARCH_SCOPE_CATEGORY_DESCENDANT:
                        $query .= " WHERE ctg._id = hirhy.col_category";
                        $query .= " AND hirhy.col_ancestor = '"
                                  . $dbConn->escape($categorySearchCondition->getSearchCategoryId())
                                  . "'";
                        break;
                }
            }

            //文字列による検索
            if ($categorySearchCondition->getSearchItemBit()
                == CategorySearchCondition::SEARCH_ITEM_NONE
            ) {
                // none;
            } else {
                foreach (
                    $categorySearchCondition->getSearchStringArray() as
                    $searchString
                ) {
                    $query .= " AND (";

                    $tempIsNeedOR = false;
                    if ($categorySearchCondition->getSearchItemBit()
                        & CategorySearchCondition::SEARCH_ITEM_CATEGORY_NAME
                    ) {
                        $query .= ($tempIsNeedOR) ? " OR " : "";
                        $tempIsNeedOR = true;

                        $query .= "(";
                        $query .= "(";
                        $query .= " ctg.col_category_name LIKE ";
                        $query .= ($categorySearchCondition->isCaseSensitivity())
                            ? "BINARY " : "";
                        $query .= "'%" . $dbConn->escapeLike($searchString)
                                  . "%'";
                        $query .= " AND lcl.col_category IS NULL ";
                        $query .= ")";
                        $query .= " OR ";
                        $query .= "(";
                        $query .= " lcl.col_category_name LIKE ";
                        $query .= ($categorySearchCondition->isCaseSensitivity())
                            ? "BINARY " : "";
                        $query .= "'%" . $dbConn->escapeLike($searchString)
                                  . "%'";
                        $query .= " AND lcl.col_category IS NOT NULL ";
                        $query .= ")";
                        $query .= ")";
                    }

                    $query .= ")";
                }
            }

            //#Subquery end
            $query .= ") AS main ";

            //Order by
            $query .= " ORDER BY ";
            $tempIsNeedComma = false;
            foreach ($categorySearchCondition->getOrderSortArray() as $sortType) {
                if ($tempIsNeedComma) {
                    $query .= ", ";

                }

                switch ($sortType) {
                    case CategorySearchCondition::SORT_ID_ASC:
                        $query .= " main._id ASC";
                        break;
                    case CategorySearchCondition::SORT_ID_DESC:
                        $query .= " main._id DESC";
                        break;
                    case CategorySearchCondition::SORT_CREATE_TIME_ASC:
                        $query .= " main.col_create_timestamp ASC";
                        break;
                    case CategorySearchCondition::SORT_CREATE_TIME_DESC:
                        $query .= " main.col_create_timestamp DESC";
                        break;
                    case CategorySearchCondition::SORT_MODIFY_TIME_ASC:
                        $query .= " main.col_modify_timestamp ASC";
                        break;
                    case CategorySearchCondition::SORT_MODIFY_TIME_DESC:
                        $query .= " main.col_modify_timestamp DESC";
                        break;
                    case CategorySearchCondition::SORT_DISPLAY_ORDER_ASC:
                        $query .= " main.col_display_order ASC";
                        break;
                    case CategorySearchCondition::SORT_DISPLAY_ORDER_DESC:
                        $query .= " main.col_display_order DESC";
                        break;
                    case CategorySearchCondition::SORT_HIERARCHY_LEVEL_ASC:
                        $query .= " main.col_hierarchy_level ASC";
                        break;
                    case CategorySearchCondition::SORT_HIERARCHY_LEVEL_DESC:
                        $query .= " main.col_hierarchy_level DESC";
                        break;
                }

                $tempIsNeedComma = true;
            }

            $query = $dbConn->select_format($query,
                $categorySearchCondition->getOffset(),
                $categorySearchCondition->getLimit());
            $result = $dbConn->query($query);


            $categoryCollection = new CategoryCollection();
            while ($row = $dbConn->fetch_assoc($result)) {
                $categoryCollection->appendBean(new Category($row,
                    Category::NOT_CHECK_INPUT));
            }
            $dbConn->free_result($result);


            //search total count
            $query = "SELECT FOUND_ROWS() AS count;";
            $result = $dbConn->query($query);
            $row = $dbConn->fetch_assoc($result);
            $dbConn->free_result($result);
            if ( ! $row) {
                throw new GrnDatabaseException();
            }
            $categoryCollection->setCountNoLimit($row['count']);
        } catch (GrnDatabaseException $e) {
            throw $e;
        }

        return $categoryCollection;
    }

    /**
     * The select count childen collection of category is executed to the database.
     *
     * @param \grn\space\common\data\collection\CategoryCollection $categoryCollection CategoryCollection
     *
     * @throws GrnDatabaseException             Any error in the database.
     * @return \grn\space\common\data\collection\CategoryCollection
     */
    public function selectCountChildlenOfCategoryCollection(
        CategoryCollection $categoryCollection
    ) {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "SELECT";
            $query .= " ctg._id, ";
            $query .= " count(chld._id) AS count_childlen";
            $query .= " FROM ";
            $query .= " tab_grn_space_category AS ctg, ";
            $query .= " tab_grn_space_category AS chld ";
            $query .= " WHERE ctg._id = chld.col_parent";

            //Search condition category id
            $query .= " AND ctg._id IN (";
            $tempIsNeedComma = false;
            foreach ($categoryCollection as $categoryObj) {
                if ($tempIsNeedComma) {
                    $query .= ", ";
                }

                /** @var \grn\space\common\data\bean\Category $categoryObj */
                $query .= "'" . $dbConn->escape($categoryObj->getId()) . "'";

                $tempIsNeedComma = true;
            }
            $query .= ") GROUP BY ctg._id;";

            $result = $dbConn->query($query);

            $categoryCollection = new CategoryCollection();
            while ($row = $dbConn->fetch_assoc($result)) {
                $categoryCollection->appendBean(new Category($row,
                    Category::NOT_CHECK_INPUT));
            }
            $dbConn->free_result($result);
        } catch (GrnDatabaseException $e) {
            throw $e;
        }

        return $categoryCollection;
    }

    /**
     * Select child categories of the category whose ID is $parentCategoryId
     *
     * @param string $parentCategoryId
     * @param string $languageCode
     *
     * @throws GrnDatabaseException
     * @return CategoryCollection
     */
    public function selectChildCategoryList($parentCategoryId, $languageCode)
    {
        try {
            $db = $this->getDatabaseConnection();
            $result = $db->query(
                "SELECT " .
                "category._id, " .
                "category.col_category_code, " .
                "IFNULL(local.col_category_name, category.col_category_name) AS col_category_name, "
                .
                "category.col_memo, " .
                "category.col_hierarchy_level, " .
                "category.col_parent, " .
                "category.col_display_order, " .
                "category.col_is_system_use, " .
                "category.col_creator, " .
                "category.col_creator_name, " .
                "category.col_create_timestamp, " .
                "category.col_modifier, " .
                "category.col_modifier_name, " .
                "category.col_modify_timestamp " .
                "FROM " .
                "tab_grn_space_category AS category " .
                "LEFT JOIN " .
                "(" .
                "tab_grn_space_category_local AS local " .
                "INNER JOIN " .
                "tab_cb_language_status AS l " .
                "ON " .
                "local.col_language = l._id " .
                "AND " .
                "l.col_language = '{$db->escape($languageCode)}' " .
                ") " .
                "ON category._id = local.col_category " .
                "WHERE " .
                "category.col_parent = '{$db->escape($parentCategoryId)}' " .
                "ORDER BY " .
                "category.col_display_order ASC;"
            );

            $categoryCollection = new CategoryCollection();
            while ($row = $db->fetch_assoc($result)) {
                $categoryCollection->appendBean(new Category($row,
                    Category::NOT_CHECK_INPUT));
            }
            $db->free_result($result);

            $categoryCollection->setCountNoLimit(count($categoryCollection));

            return $categoryCollection;
        } catch (GrnDatabaseException $e) {
            throw $e;
        }
    }

    /**
     * Select Category By its Category code and Category ID of its ancestor.
     *
     * @param string $targetCategoryCode
     * @param string $ancestorCategoryId
     * @param string $languageCode
     *
     * @throws GrnDataNotFoundException
     * @return \grn\space\common\data\bean\Category
     */
    public function selectCategoryByCategoryCodeAncestorId(
        $targetCategoryCode,
        $ancestorCategoryId,
        $languageCode
    ) {
        $db = $this->getDatabaseConnection();

        $result = $db->query(
            "SELECT " .
            "category._id, " .
            "category.col_category_code, " .
            "IFNULL(local.col_category_name, category.col_category_name) AS col_category_name, "
            .
            "category.col_memo, " .
            "category.col_hierarchy_level, " .
            "category.col_parent, " .
            "category.col_display_order, " .
            "category.col_is_system_use, " .
            "category.col_creator, " .
            "category.col_creator_name, " .
            "category.col_create_timestamp, " .
            "category.col_modifier, " .
            "category.col_modifier_name, " .
            "category.col_modify_timestamp " .
            "FROM " .
            "tab_grn_space_category AS category " .
            "LEFT JOIN " .
            "(" .
            "tab_grn_space_category_local AS local " .
            "INNER JOIN " .
            "tab_cb_language_status AS l " .
            "ON " .
            "local.col_language = l._id " .
            "AND " .
            "l.col_language = '{$db->escape($languageCode)}' " .
            ") " .
            "ON category._id = local.col_category, " .
            "tab_grn_space_category_hierarchy AS hierarchy " .
            "WHERE " .
            "hierarchy.col_ancestor = '{$db->escape($ancestorCategoryId)}' " .
            "AND " .
            "category.col_category_code = '{$db->escape($targetCategoryCode)}'"
            .
            "ORDER BY _id;");

        $row = $db->fetch_assoc($result);
        if ( ! $row) {
            throw new GrnDataNotFoundException(ErrorCode::GRN_INVALID_CATEGORY_ID);
        }

        $db->free_result($result);

        return new Category($row, Category::NOT_CHECK_INPUT);
    }

    /**
     * @param  string[] $parentCategoryIds
     *
     * @return string[]
     */
    public function selectChildCategoryIds($parentCategoryIds)
    {
        $db = $this->getDatabaseConnection();
        $result = $db->query(cb_queryf($db,
            "SELECT _id FROM tab_grn_space_category WHERE col_parent IN (@A);",
            $parentCategoryIds));
        $childIds = [];
        while ($row = $db->fetch_assoc($result)) {
            $childIds[] = $row['_id'];
        }
        $db->free_result($result);

        return $childIds;
    }
}
