<?php

namespace grn\space\common\db\dao;

use grn\space\common\db\dao\DataAccessControlAbstract;
use grn\space\common\data\bean\AccessControlList;
use grn\space\common\data\collection\AccessControlListCollection;
use grn\space\common\data\condition\AccessControlListSearchCondition;
use grn\space\common\exception\GrnDatabaseException;


/**
 * Database Back Layer
 * This layer mediates the database front layer and the DB.
 *
 * AccessControlList Data Access Object Class
 * Accept requests from the database front layer for all AccessControlList
 **/
class AccessControlListDAO extends DataAccessControlAbstract
{
    /**
     * The insert of access control list is executed to the database.
     *
     * @param AccessControlList $accessControlList
     *
     * @throws GrnDatabaseException         Any error in the database.
     * @return AccessControlList
     */
    public function insertAccessControlList(AccessControlList $accessControlList
    ) {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "INSERT INTO tab_grn_space_access_control_list SET ";
            $query .= " col_authority = '"
                      . $dbConn->escape($accessControlList->getAuthorityId())
                      . "'";
            $query .= ";";

            $dbConn->query($query);

            $accessControlList->setId($dbConn->get_insert_id());
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        return $accessControlList;
    }

    /**
     * The delete of access control lists is executed to the database.
     *
     * @param  string $spaceId space sequence id
     *
     * @throws GrnDatabaseException         Any error in the database.
     */
    public function deleteAccessControleListsBySpaceId($spaceId)
    {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query
                = "DELETE FROM tab_grn_space_access_control_list WHERE _id IN (";
            $query .= "SELECT col_acl FROM tab_grn_space_space_acl WHERE col_space = '{$dbConn->escape($spaceId)}'";
            $query .= ");";
            $dbConn->query($query);
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }
    }

    /**
     * The select of access control lists is executed to the database.
     *
     * @param  $aclSearchCondition     AccessControlListSearchCondition
     *
     * @throws GrnDatabaseException             FOUND_ROWSが取れなかった。 Any error in the database.
     * @return AccessControlListCollection
     */
    public function searchAccessControlList(
        AccessControlListSearchCondition $aclSearchCondition
    ) {
        static $cache = [];

        // get cache
        $cacheKey = serialize($aclSearchCondition);
        if (isset($cache[$cacheKey])) {
            return $cache[$cacheKey];
        }

        try {
            $dbConn = $this->getDatabaseConnection();


            $query = "SELECT SQL_CALC_FOUND_ROWS";
            $query .= " main._id, ";
            $query .= " main.col_authority";
            $query .= " FROM (";
            //search role
            $query .= "SELECT acl._id, ";
            $query .= " acl.col_authority";
            $query .= " FROM ";
            $query .= " tab_grn_space_access_control_list AS acl, ";
            $query .= " tab_grn_space_acl_role AS aclRole, ";
            $query .= " tab_cb_role AS role, ";
            $query .= " tab_cb_userrolerelation AS roleUserRl, ";
            $query .= " tab_cb_user AS roleUser ";
            $query .= " WHERE roleUser._id = '"
                      . $dbConn->escape($aclSearchCondition->getSearchUserId())
                      . "'";
            $query .= " AND acl._id = aclRole.col_acl";
            $query .= " AND aclRole.col_role = role._id";
            $query .= " AND role._id = roleUserRl.col_role";
            $query .= " AND roleUserRl.col_user = roleUser._id";
            $query .= " AND roleUser.col_deleted IS NULL";

            //Search access control list id
            $query .= " AND acl._id IN (";
            $tempIsNeedComma = false;
            foreach (
                $aclSearchCondition->getSearchAccessControlListIdArray() as
                $aclId
            ) {
                if ($tempIsNeedComma) {
                    $query .= ", ";
                }

                $query .= "'" . $dbConn->escape($aclId) . "'";

                $tempIsNeedComma = true;
            }
            $query .= ")";

            $query .= " UNION ";

            //search group
            $query .= "SELECT acl._id, ";
            $query .= " acl.col_authority";
            $query .= " FROM ";
            $query .= " tab_grn_space_access_control_list AS acl, ";
            $query .= " tab_grn_space_acl_group AS aclGroup, ";
            $query .= " tab_cb_group AS gp, ";
            $query .= " tab_cb_usergrouprelation AS groupUserRl, ";
            $query .= " tab_cb_user AS groupUser ";
            $query .= " WHERE groupUser._id = '"
                      . $dbConn->escape($aclSearchCondition->getSearchUserId())
                      . "'";
            $query .= " AND acl._id = aclGroup.col_acl";
            $query .= " AND aclGroup.col_group = gp._id";
            $query .= " AND gp._id = groupUserRl.col_group";
            $query .= " AND groupUserRl.col_user = groupUser._id";
            $query .= " AND groupUser.col_deleted IS NULL";

            //Search access control list id
            $query .= " AND acl._id IN (";
            $tempIsNeedComma = false;
            foreach (
                $aclSearchCondition->getSearchAccessControlListIdArray() as
                $aclId
            ) {
                if ($tempIsNeedComma) {
                    $query .= ", ";
                }

                $query .= "'" . $dbConn->escape($aclId) . "'";

                $tempIsNeedComma = true;
            }
            $query .= ")";

            $query .= " UNION ";

            //search user
            $query .= "SELECT acl._id, ";
            $query .= " acl.col_authority";
            $query .= " FROM ";
            $query .= " tab_grn_space_access_control_list AS acl, ";
            $query .= " tab_grn_space_acl_user AS aclUser, ";
            $query .= " tab_cb_user AS user ";
            $query .= " WHERE user._id = '"
                      . $dbConn->escape($aclSearchCondition->getSearchUserId())
                      . "'";
            $query .= " AND acl._id = aclUser.col_acl";
            $query .= " AND aclUser.col_user = user._id";
            $query .= " AND user.col_deleted IS NULL";

            //Search access control list id
            $query .= " AND acl._id IN (";
            $tempIsNeedComma = false;
            foreach (
                $aclSearchCondition->getSearchAccessControlListIdArray() as
                $aclId
            ) {
                if ($tempIsNeedComma) {
                    $query .= ", ";
                }

                $query .= "'" . $dbConn->escape($aclId) . "'";

                $tempIsNeedComma = true;
            }
            $query .= ")";

            $query .= " UNION ";

            //search dynamic role
            $query .= "SELECT acl._id, ";
            $query .= " acl.col_authority";
            $query .= " FROM ";
            $query .= " tab_grn_space_access_control_list AS acl, ";
            $query .= " tab_grn_space_acl_dynamic_role AS aclDynamicRole, ";
            $query .= " tab_grn_space_dynamic_role AS dynamicRole ";
            $query .= " WHERE dynamicRole.col_dynamic_role_code = 'Everyone'";
            $query .= " AND acl._id = aclDynamicRole.col_acl";
            $query .= " AND aclDynamicRole.col_dynamic_role = dynamicRole._id";

            //Search access control list id
            $query .= " AND acl._id IN (";
            $tempIsNeedComma = false;
            foreach (
                $aclSearchCondition->getSearchAccessControlListIdArray() as
                $aclId
            ) {
                if ($tempIsNeedComma) {
                    $query .= ", ";
                }

                $query .= "'" . $dbConn->escape($aclId) . "'";

                $tempIsNeedComma = true;
            }
            $query .= ")";
            $query .= ") AS main";

            //Order by
            $query .= " ORDER BY ";
            $tempIsNeedComma = false;
            foreach ($aclSearchCondition->getOrderSortArray() as $sortType) {
                if ($tempIsNeedComma) {
                    $query .= ", ";

                }

                switch ($sortType) {
                    case AccessControlListSearchCondition::SORT_ID_ASC:
                        $query .= " main._id ASC";
                        break;
                    case AccessControlListSearchCondition::SORT_ID_DESC:
                        $query .= " main._id DESC";
                        break;
                }

                $tempIsNeedComma = true;
            }


            $result = $dbConn->query($query);


            $aclCollection = new AccessControlListCollection();
            while ($row = $dbConn->fetch_assoc($result)) {
                $aclCollection->appendBean(new AccessControlList($row,
                    AccessControlList::NOT_CHECK_INPUT));
            }
            $dbConn->free_result($result);


            //search total count
            $query = "SELECT FOUND_ROWS() AS count;";
            $result = $dbConn->query($query);
            $row = $dbConn->fetch_assoc($result);
            $dbConn->free_result($result);
            if ( ! $row) {
                throw new GrnDatabaseException();
            }
            $aclCollection->setCountNoLimit($row['count']);
        } catch (GrnDatabaseException $e) {
            throw $e;
        }

        // set cache
        $cache[$cacheKey] = $aclCollection;

        return $aclCollection;
    }
}
