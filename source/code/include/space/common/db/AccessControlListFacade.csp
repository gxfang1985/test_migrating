<?php

namespace grn\space\common\db;

use grn\grn\MemberLogic;
use grn\space\common\data\bean\AccessControlList;
use grn\space\common\db\dao\AccessControlListDAO;
use grn\space\common\db\dao\AccessControlListGroupDAO;
use grn\space\common\db\dao\AccessControlListRoleDAO;
use grn\space\common\db\dao\AccessControlListUserDAO;
use grn\space\common\db\dao\AuthorityDAO;
use grn\space\common\data\collection\SpaceMemberCollection;
use grn\space\common\data\condition\AccessControlListSearchCondition;

/**
 * Database Front Layer
 * This layer mediates the business logic layer and the DB layer.
 * Also, keep a log if needed.
 *
 * AccessControlList Facade class
 * Accept requests from the business logic layer for all CategoryInfomation
 */
class AccessControlListFacade
{
    //******************************************************************************************************
    //***********************************        authority        ******************************************
    //******************************************************************************************************
    /**
     * Get to the authority.
     *
     * @param string $authorityCode authority code
     *
     * @throws \grn\space\common\exception\GrnDataNotFoundException     When the specified authority is not found.
     * @throws \grn\space\common\exception\GrnDatabaseException         Any error in the database.
     *
     * @return \grn\space\common\data\bean\Authority
     */
    public function getAuthorityByAuthorityCode($authorityCode)
    {
        $authorityDAO = new AuthorityDAO();

        return $authorityDAO->selectAuthorityByAuthorityCode($authorityCode);
    }



    //****************************************************************************************************************
    //***********************************        access control list        ******************************************
    //****************************************************************************************************************
    /**
     * Search category access control list
     *
     * @param AccessControlListSearchCondition $aclSearchCondition
     *
     * @throws \grn\space\common\exception\GrnDatabaseException         Any error in the database.
     * @return \grn\space\common\data\collection\AccessControlListCollection
     */
    public function searchAccessControlList(
        AccessControlListSearchCondition $aclSearchCondition
    ) {
        $aclDAO = new AccessControlListDAO();

        return $aclDAO->searchAccessControlList($aclSearchCondition);
    }

    /**
     * access control list is inserted.
     *
     * @param  AccessControlList $accessControlList
     *
     * @throws \grn\space\common\exception\GrnDatabaseException         Any error in the database.
     * @return AccessControlList
     */
    public function insertAccessControlList(AccessControlList $accessControlList
    ) {
        $aclDAO = new AccessControlListDAO();

        return $aclDAO->insertAccessControlList($accessControlList);
    }

    /**
     * access control lists is deleted.
     *
     * @param  string $spaceId space sequence id
     *
     * @throws \grn\space\common\exception\GrnDatabaseException         Any error in the database.
     */
    public function deleteAccessControleListsBySpaceId($spaceId)
    {
        $aclDAO = new AccessControlListDAO();
        $aclDAO->deleteAccessControleListsBySpaceId($spaceId);
    }

    //*******************************************************************************************************************
    //***********************************        access control list role       ******************************************
    //*******************************************************************************************************************
    /**
     * access control list role is inserted.
     *
     * @param  string $aclId  access control sequence id
     * @param  string $roleId role id
     *
     * @throws \grn\space\common\exception\GrnDatabaseException     Any error in the database.
     */
    public function insertAccessControleListRoleByRoleId($aclId, $roleId)
    {
        $aclRoleDAO = new AccessControlListRoleDAO();
        $aclRoleDAO->insertAccessControleListRoleByRoleId($aclId, $roleId);
    }

    /**
     * access control list role is deleted
     *
     * @param  string $aclId access control list sequence id
     *
     * @throws \grn\space\common\exception\GrnDatabaseException         Any error in the database.
     */
    public function deleteAccessControleListRoleByAclId($aclId)
    {
        $aclRoleDAO = new AccessControlListRoleDAO();
        $aclRoleDAO->deleteAccessControleListRoleByAclId($aclId);
    }

    //*******************************************************************************************************************
    //***********************************        access control list user       *****************************************
    //*******************************************************************************************************************
    /**
     * access control list user is inserted.
     *
     * @param  string                $aclId access control sequence id
     * @param  SpaceMemberCollection $spaceMemberCollection
     *
     * @throws \grn\space\common\exception\GrnDatabaseException             Any error in the database.
     */
    public function insertAccessControleListUsers(
        $aclId,
        SpaceMemberCollection $spaceMemberCollection
    ) {
        $member_ids_for_user = [];
        $member_ids_for_group = [];
        $member_ids_for_role = [];
        foreach ($spaceMemberCollection as $spaceMember) {
            $member_id = $spaceMember->getMemberID();
            $member_type = $spaceMember->getMemberType();
            switch ($member_type) {
                case MemberLogic::TYPE_USER :
                    $member_ids_for_user[] = $member_id;
                    break;
                case MemberLogic::TYPE_ORGANIZATION :
                    $member_ids_for_group[] = $member_id;
                    break;
                case MemberLogic::TYPE_STATIC_ROLE :
                    $member_ids_for_role[] = $member_id;
                    break;
            }
        }

        if (count($member_ids_for_user) > 0) {
            $aclUserDAO = new AccessControlListUserDAO();
            $aclUserDAO->insertAccessControleListUsers($aclId,
                $member_ids_for_user);
        }
        if (count($member_ids_for_group) > 0) {
            $aclGroupDAO = new AccessControlListGroupDAO();
            $aclGroupDAO->insertAccessControleListGroups($aclId,
                $member_ids_for_group);
        }
        if (count($member_ids_for_role) > 0) {
            $aclRoleDAO = new AccessControlListRoleDAO();
            $aclRoleDAO->insertAccessControleListRoles($aclId,
                $member_ids_for_role);
        }
    }

    /**
     * access control list users is deleted
     *
     * @param  string                $aclId access control list sequence id
     * @param  SpaceMemberCollection $spaceMemberCollection
     *
     * @throws \grn\space\common\exception\GrnDatabaseException         Any error in the database.
     */
    public function deleteAccessControleListUsers(
        $aclId,
        SpaceMemberCollection $spaceMemberCollection
    ) {
        $member_ids_for_user = [];
        $member_ids_for_group = [];
        $member_ids_for_role = [];
        foreach ($spaceMemberCollection as $spaceMember) {
            $member_id = $spaceMember->getMemberID();
            $member_type = $spaceMember->getMemberType();
            switch ($member_type) {
                case MemberLogic::TYPE_USER :
                    $member_ids_for_user[] = $member_id;
                    break;
                case MemberLogic::TYPE_ORGANIZATION :
                    $member_ids_for_group[] = $member_id;
                    break;
                case MemberLogic::TYPE_STATIC_ROLE :
                    $member_ids_for_role[] = $member_id;
                    break;
            }
        }

        if (count($member_ids_for_user) > 0) {
            $aclUserDAO = new AccessControlListUserDAO();
            $aclUserDAO->deleteAccessControleListUsers($aclId,
                $member_ids_for_user);
        }
        if (count($member_ids_for_group) > 0) {
            $aclGroupDAO = new AccessControlListGroupDAO();
            $aclGroupDAO->deleteAccessControleListGroups($aclId,
                $member_ids_for_group);
        }
        if (count($member_ids_for_role) > 0) {
            $aclRoleDAO = new AccessControlListRoleDAO();
            $aclRoleDAO->deleteAccessControleListRoles($aclId,
                $member_ids_for_role);
        }
    }

    /**
     * access control list users is deleted
     *
     * @param  string $aclId access control list sequence id
     *
     * @throws \grn\space\common\exception\GrnDatabaseException         Any error in the database.
     */
    public function deleteAccessControleListUserByAclId($aclId)
    {
        $aclUserDAO = new AccessControlListUserDAO();
        $aclUserDAO->deleteAccessControleListUserByAclId($aclId);

        $aclGroupDAO = new AccessControlListGroupDAO();
        $aclGroupDAO->deleteAccessControleListGroupByAclId($aclId);

        $aclRoleDAO = new AccessControlListRoleDAO();
        $aclRoleDAO->deleteAccessControleListRoleByAclId($aclId);
    }

    /**
     * Get user ids according to authority id.
     *
     * @param string $authorityId
     * @param string $spaceId
     *
     * @return array
     */
    public function getUserIdArrayAccordingToAuthorityId($authorityId, $spaceId)
    {
        $aclUserDAO = new AccessControlListUserDAO();

        return $aclUserDAO->getUserIdArrayAccordingToAuthorityId($authorityId,
            $spaceId);
    }

    /**
     * Get group ids according to authority id.
     *
     * @param string $authorityId
     * @param string $spaceId
     *
     * @return array
     */
    public function getGroupIdArrayAccordingToAuthorityId(
        $authorityId,
        $spaceId
    ) {
        $aclGroupDAO = new AccessControlListGroupDAO();

        return $aclGroupDAO->getGroupIdArrayAccordingToAuthorityId($authorityId,
            $spaceId);
    }

    /**
     * Get role ids according to authority id.
     *
     * @param string $authorityId
     * @param string $spaceId
     *
     * @return array
     */
    public function getRoleIdArrayAccordingToAuthorityId($authorityId, $spaceId)
    {
        $aclRoleDAO = new AccessControlListRoleDAO();

        return $aclRoleDAO->getRoleIdArrayAccordingToAuthorityId($authorityId,
            $spaceId);
    }
}
