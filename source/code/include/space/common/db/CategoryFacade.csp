<?php

namespace grn\space\common\db;

use grn\space\common\data\collection\CategoryCollection;
use grn\space\common\data\condition\CategorySearchCondition;
use grn\space\common\data\bean\CategoryLocal;
use grn\space\common\data\bean\Category;
use grn\space\common\db\dao\CategoryLocalDAO;
use grn\space\common\db\dao\CategoryDAO;
use grn\space\common\db\dao\CategoryHierarchyDAO;

/**
 * Database Front Layer
 * This layer mediates the business logic layer and the DB layer.
 * Also, keep a log if needed.
 *
 * Category Facade class
 * Accept requests from the business logic layer for all CategoryInfomation
 */
class CategoryFacade
{
    //*****************************************************************************************************
    //***********************************        category        ******************************************
    //*****************************************************************************************************
    /**
     * category is inserted.
     *
     * @throws \grn\space\common\exception\GrnDatabaseException  Any error in the database.
     *
     * @param \grn\space\common\data\bean\Category $category
     *
     * @return Category
     */
    public function insertCategory(Category $category)
    {
        $categoryDAO = new CategoryDAO();
        $newCategory = $categoryDAO->insertCategory($category);

        return $newCategory;
    }

    /**
     * category is update.
     *
     * @param \grn\space\common\data\bean\Category $category Category
     *
     * @throws \grn\space\common\exception\GrnDatabaseException  Any error in the database.
     * @return Category
     */
    public function updateCategory(Category $category)
    {
        $categoryDAO = new CategoryDAO();
        $newCategory = $categoryDAO->updateCategory($category);

        return $newCategory;
    }

    /**
     * category is deleted
     *
     * @param \grn\space\common\data\bean\Category $category Category
     *
     * @throws \grn\space\common\exception\GrnDataNotFoundException     When the specified category is not found.
     * @throws \grn\space\common\exception\GrnDatabaseException         Any error in the database.
     * @return Category
     */
    public function deleteCategory(Category $category)
    {
        $categoryDAO = new CategoryDAO();
        $category = $categoryDAO->deleteCategory($category);

        return $category;
    }

    /**
     *
     *
     * @param \grn\space\common\data\collection\CategoryCollection $categoryCollection
     *
     * @return integer
     */
    public function deleteCategoryByCategoryCollection(
        CategoryCollection $categoryCollection
    ) {
        $categoryDAO = new CategoryDAO();

        return $categoryDAO->deleteCategoryByCategoryCollection($categoryCollection);
    }

    /**
     * Get to the category.
     *
     * @param string $categoryId   category sequence id
     * @param string $languageCode dispaly language code.
     *
     * @return \grn\space\common\data\bean\Category
     * @throws \grn\space\common\exception\GrnDataNotFoundException     When the specified category is not found.
     * @throws \grn\space\common\exception\GrnDatabaseException         Any error in the database.
     */
    public function getCategory($categoryId, $languageCode)
    {
        $categoryDAO = new CategoryDAO();

        return $categoryDAO->selectCategory($categoryId, $languageCode);
    }

    /**
     * Get to the category.
     *
     * @param string $categoryCode category code
     * @param string $languageCode dispaly language code.
     *
     * @return \grn\space\common\data\bean\Category
     * @throws \grn\space\common\exception\GrnDataNotFoundException     When the specified category is not found.
     * @throws \grn\space\common\exception\GrnDatabaseException         Any error in the database.
     */
    public function getCategoryByCategoryCode($categoryCode, $languageCode)
    {
        $categoryDAO = new CategoryDAO();

        return $categoryDAO->selectCategoryByCategoryCode($categoryCode,
            $languageCode);
    }

    /**
     * Get to the category.
     *
     * @param string $ancestorCategoryId   category sequence id
     * @param string $descendantCategoryId category sequence id
     * @param string $languageCode         dispaly language code.
     *
     * @return \grn\space\common\data\bean\Category
     * @throws \grn\space\common\exception\GrnDataNotFoundException     When the specified category is not found.
     * @throws \grn\space\common\exception\GrnDatabaseException         Any error in the database.
     */
    public function getCategoryByAncestorCategoryIdDescendantCategoryId(
        $ancestorCategoryId,
        $descendantCategoryId,
        $languageCode
    ) {
        $categoryDAO = new CategoryDAO();

        return $categoryDAO->selectCategoryByAncestorCategoryIdDescendantCategoryId($ancestorCategoryId,
            $descendantCategoryId, $languageCode);
    }

    /**
     * Get to the category.
     *
     * @param string $ancestorCategoryId category sequence id
     * @param string $categoryCode       category code
     * @param string $languageCode       dispaly language code.
     *
     * @return \grn\space\common\data\bean\Category
     * @throws \grn\space\common\exception\GrnDataNotFoundException     When the specified category is not found.
     * @throws \grn\space\common\exception\GrnDatabaseException         Any error in the database.
     */
    public function getCategoryByAncestorCategoryIdCategoryCode(
        $ancestorCategoryId,
        $categoryCode,
        $languageCode
    ) {
        $categoryDAO = new CategoryDAO();

        return $categoryDAO->selectCategoryByAncestorCategoryIdCategoryCode($ancestorCategoryId,
            $categoryCode, $languageCode);
    }

    /**
     * Return a Category object searched by spaceId and applicationCode
     *
     * @param string $spaceId
     * @param string $applicationCode
     * @param string $languageCode
     *
     * @return Category
     * @throws \grn\space\common\exception\GrnDatabaseException
     * @throws \grn\space\common\exception\GrnDataNotFoundException
     */
    public function getCategoryBySpaceIdApplicationCode(
        $spaceId,
        $applicationCode,
        $languageCode
    ) {
        $categoryDAO = new CategoryDAO();

        return $categoryDAO->selectCategoryBySpaceIdApplicationCode($spaceId,
            $applicationCode, $languageCode);
    }

    /**
     * Return a Category object searched by spaceId and threadCategoryId
     *
     * @param string $spaceId          space sequence id
     * @param string $threadCategoryId category sequence id
     * @param string $languageCode     dispaly language code
     *
     * @throws \grn\space\common\exception\GrnDataNotFoundException     category is not found
     * @throws \grn\space\common\exception\GrnDatabaseException         Any error in the database.
     * @return Category
     */
    public function getCategoryBySpaceIdThreadCategoryId(
        $spaceId,
        $threadCategoryId,
        $languageCode
    ) {
        $categoryDAO = new CategoryDAO();

        return $categoryDAO->selectCategoryBySpaceIdThreadCategoryId($spaceId,
            $threadCategoryId, $languageCode);
    }

    /**
     * Return a Category object searched by spaceId and threadId and todoCategoryId
     *
     * @param string $spaceId        space sequence id
     * @param string $threadId       thread sequence id
     * @param string $todoCategoryId category sequence id
     * @param string $languageCode   dispaly language code
     *
     * @throws \grn\space\common\exception\GrnDataNotFoundException     category is not found
     * @throws \grn\space\common\exception\GrnDatabaseException         Any error in the database.
     * @return Category
     */
    public function getCategoryBySpaceIdThreadIdTodoCategoryId(
        $spaceId,
        $threadId,
        $todoCategoryId,
        $languageCode
    ) {
        $categoryDAO = new CategoryDAO();

        return $categoryDAO->selectCategoryBySpaceIdThreadIdTodoCategoryId($spaceId,
            $threadId, $todoCategoryId, $languageCode);
    }

    /**
     * Find categorys.
     *
     * @param \grn\space\common\data\condition\CategorySearchCondition $categorySearchCondition CategorySearchCondition
     *
     * @throws \grn\space\common\exception\GrnDatabaseException                 Any error in the database.
     * @return CategoryCollection
     */
    public function selectCategoryList(
        CategorySearchCondition $categorySearchCondition
    ) {
        $categoryDAO = new CategoryDAO();

        return $categoryDAO->selectCategoryList($categorySearchCondition);
    }

    /**
     * The select count childen collection of category is executed to the database.
     *
     * @param \grn\space\common\data\collection\CategoryCollection $categoryCollection CategoryCollection
     *
     * @throws \grn\space\common\exception\GrnDatabaseException             Any error in the database.
     * @return CategoryCollection
     */
    public function selectCountChildlenOfCategoryCollection(
        CategoryCollection $categoryCollection
    ) {
        $categoryDAO = new CategoryDAO();

        return $categoryDAO->selectCountChildlenOfCategoryCollection($categoryCollection);
    }


    //***************************************************************************************************************
    //***********************************        category hierarchy        ******************************************
    //***************************************************************************************************************
    /**
     * category hierarchies is inserted.
     *
     * @param string                                               $categoryId                 category sequence id
     * @param \grn\space\common\data\collection\CategoryCollection $ancestorCategoryCollection CategorySearchCondition
     *
     * @throws \grn\space\common\exception\GrnDatabaseException  Any error in the database.
     */
    public function insertCategoryHierarchies(
        $categoryId,
        CategoryCollection $ancestorCategoryCollection
    ) {
        $categoryHierarchyDAO = new CategoryHierarchyDAO();
        $categoryHierarchyDAO->insertCategoryHierarchies($categoryId,
            $ancestorCategoryCollection);
    }

    /**
     * category hierarchies is deleted.
     *
     * @param \grn\space\common\data\bean\Category $category Category
     *
     * @throws \grn\space\common\exception\GrnDatabaseException     Any error in the database.
     */
    public function deleteCategoryHierarchies(Category $category)
    {
        $categoryHierarchyDAO = new CategoryHierarchyDAO();
        $categoryHierarchyDAO->deleteCategoryHierarchies($category);
    }

    /**
     * Insert a record into tab_grn_space_category_local.
     * When the record is duplicated, this method updates col_name value of the record.
     *
     * The retuend value is a little tricky.
     * 0 : There had been the same record already so that no record was changed.
     * 1 : There had been no record whose col_category and col_language were the same with $categoryLocal so that a new record was inserted.
     * 2 : There had been the record whose col_category and col_language were the same with $categoryLocal so that only col_category_name of the record was updated.
     *
     * @param \grn\space\common\data\bean\CategoryLocal $categoryLocal
     *
     * @return integer the number of affected rows.
     * @throws \grn\space\common\exception\GrnInvalidArgumentException
     */
    public function insertOnDuplicateUpdateCategoryLocal(
        CategoryLocal $categoryLocal
    ) {
        $categoryLocalDao = new CategoryLocalDAO();

        return $categoryLocalDao->insertOnDuplicateUpdate($categoryLocal);
    }

    /**
     * Select CategoryLocal by Category ID
     *
     * @param string $categoryId
     *
     * @return \grn\space\common\data\collection\CategoryLocalCollection
     */
    public function searchCategoryLocalByCategoryId($categoryId)
    {
        $categoryLocalDao = new CategoryLocalDAO();

        return $categoryLocalDao->searchByCategoryId($categoryId);
    }

    /**
     * Select CategoryLocal by Category Code
     *
     * @param string $categoryCode
     *
     * @return \grn\space\common\data\collection\CategoryLocalCollection
     */
    public function searchCategoryLocalByCategoryCode($categoryCode)
    {
        $categoryLocalDao = new CategoryLocalDAO();

        return $categoryLocalDao->searchByCategoryCode($categoryCode);
    }

    /**
     * Return array which will be used to covert languageCode to languageId
     *
     * @return array
     */
    public function getLanguageTableArray()
    {
        $categoryLocalDao = new CategoryLocalDAO();

        return $categoryLocalDao->getLanguageTableArray();
    }

    /**
     * Delete CategoryLocal
     *
     * @param \grn\space\common\data\bean\CategoryLocal $categoryLocal
     * @param string                                    $languageId
     *
     * @return \grn\space\common\data\bean\CategoryLocal
     */
    public function deleteCategoryLocal(
        CategoryLocal $categoryLocal,
        $languageId
    ) {
        $categoryLocalDao = new CategoryLocalDAO();

        return $categoryLocalDao->delete($categoryLocal, $languageId);
    }

    /**
     * Select child categories of the category whose ID is $parentCategoryId
     *
     * @param string $parentCategoryId
     * @param string $languageCode
     *
     * @return CategoryCollection
     */
    public function selectChildCategoryList($parentCategoryId, $languageCode)
    {
        $categoryDao = new CategoryDAO();

        return $categoryDao->selectChildCategoryList($parentCategoryId,
            $languageCode);
    }

    /**
     * Select all the CategoryLocal records of the categories which are descendant of the Category whose category code is $categoryCode.
     *
     * @param string $rootCategoryCode
     * @param array<string> $languageCodeArray
     *
     * @return \grn\space\common\data\collection\CategoryLocalCollection
     */
    public function selectCategoryLocalCollectionForCSV(
        $rootCategoryCode,
        $languageCodeArray
    ) {
        $categoryLocalDao = new CategoryLocalDAO();

        return $categoryLocalDao->selectCategoryLocalCollectionForCSV($rootCategoryCode,
            $languageCodeArray);
    }

    /**
     * Select Category By its Category code and Category ID of its ancestor.
     *
     * @param        $categoryCode
     * @param string $ancestorCategoryId
     * @param        $langugeCode
     *
     * @throws \grn\space\common\exception\GrnDataNotFoundException
     * @return Category
     */
    public function selectCategoryByCategoryCodeAncestorId(
        $categoryCode,
        $ancestorCategoryId,
        $langugeCode
    ) {
        $categoryDao = new CategoryDAO();

        return $categoryDao->selectCategoryByCategoryCodeAncestorId($categoryCode,
            $ancestorCategoryId, $langugeCode);
    }

    /**
     * @param  string[] $parentCategoryIds
     *
     * @return string[]
     */
    public function selectCategoryIdsRecursively($parentCategoryIds)
    {
        $categoryDao = new CategoryDAO();
        $childCategoryIds
            = $categoryDao->selectChildCategoryIds($parentCategoryIds);
        if (count($childCategoryIds) > 0) {
            $childCategoryIds = array_merge($childCategoryIds,
                $this->selectCategoryIdsRecursively($childCategoryIds));
        }

        return $childCategoryIds;
    }
}
