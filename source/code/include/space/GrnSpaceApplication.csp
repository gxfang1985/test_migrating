<?php

use grn\favour\FavourApplicationBaseInterface;
use grn\favour\data\bean\FavourNotify;
use grn\space\data\condition\SpaceSearchCondition;
use grn\space\screen\GenericScreenBase;
use grn\space\service\SpaceService;
use grn\space\service\DiscussionService;
use grn\space\service\TodoService;
use grn\space\common\utility\IconUtility;
use grn\space\common\data\bean\Authority;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\common\exception\ErrorCode;
use grn\space\common\exception\GrnInvalidPermissionException;
use grn\space\common\exception\ErrorCode as SpaceErrorCode;
use grn\space\common\exception\GrnIllegalOperationException;
use grn\space\logic\SpaceLogic;
use grn\space\logic\TodoLogic;
use grn\space\common\data\bean;
use grn\space\common\data\bean\LanguageStatus;

require_once('grn/application.csp');

/**
 * Class GrnSpaceApplication
 */
class GrnSpaceApplication extends GRN_ApplicationBase
{
    /**
     * Constant that shows SPACE-Application
     * SPACE
     */
    const GRN_SPACE_APPLICATION_ID = "space";

    /**
     * module_id
     */
    const GRN_SPACE_MODULE_ID = "grn.space";

    /**
     * sub_module_id
     */
    const GRN_SPACE_SUB_MODULE_ID = "";
    const GRN_DISCUSSION_SUB_MODULE_ID = "grn.discussion";
    const GRN_TODO_SUB_MODULE_ID = "grn.todo";

    /**
     * favour type (ディスカッションの本文, ディスカッションのコメント, 共有ToDoの本文, 共有ToDoのコメント)
     */
    const FAVOUR_DISCUSSION_BODY = 'discussion_body';
    const FAVOUR_DISCUSSION_COMMENT = 'discussion_comment';
    const FAVOUR_TODO_BODY = 'todo_body';
    const FAVOUR_TODO_COMMENT = 'todo_comment';

    /*
     * portlet
     */
    const PORTLET_TODO_UNDERTAKE = 'grn.space.todo.undertake';
    const PORTLET_TODO_RELY = 'grn.space.todo.rely';

    /**
     * GrnSpaceApplication constructor.
     */
    public function __construct()
    {
        parent::__construct(self::GRN_SPACE_APPLICATION_ID);
    }

    /**
     * @param $user
     * @param $app_id
     * @param $unique_id
     * @param $org_data
     * @param $status
     * @param $action_id
     * @param $sub_module_id
     *
     * @return array
     */
    public function getNotificationPageInfo(
        $user,
        $app_id,
        $unique_id,
        $org_data,
        $status,
        $action_id,
        $sub_module_id
    ) {
        $page_info = [];
        $page_info['image_direct'] = true;

        global $G_config_common;
        $app_path = $G_config_common->get('Global', 'app_path');

        if ($sub_module_id == self::GRN_SPACE_SUB_MODULE_ID) {
            require_once('fw/i18n/locale.csp');
            $page_info['subject_page'] = 'space/top';
            $page_info['url_params'] = ['spid' => $unique_id];
            $page_info['subject_icon'] = $app_path
                                         . '/grn/image/cybozu/space20.png';
        } elseif ($sub_module_id == self::GRN_DISCUSSION_SUB_MODULE_ID) {
            $page_info['subject_page'] = 'space/application/discussion/index';
            if (isset($org_data['files'])) {
                if ($action_id == GRN_NOTIFICATION_ACTION_UPDATE_ID) {
                    if (array_key_exists('comment', $org_data)) {
                        $page_info['subject_icon'] = $app_path
                                                     . '/grn/image/cybozu/spaceDiscussion_clip30x20_u.png';
                    } else {
                        $page_info['subject_icon'] = $app_path
                                                     . '/grn/image/cybozu/spaceDiscussion_clip30x20_update.png';
                    }
                } else {
                    $page_info['subject_icon'] = $app_path
                                                 . '/grn/image/cybozu/spaceDiscussion_clip30x20_new.png';
                }
            } else {
                if ($action_id == GRN_NOTIFICATION_ACTION_UPDATE_ID) {
                    if (array_key_exists('comment', $org_data)) {
                        $page_info['subject_icon'] = $app_path
                                                     . '/grn/image/cybozu/spaceDiscussion20_u.png';
                    } else {
                        $page_info['subject_icon'] = $app_path
                                                     . '/grn/image/cybozu/spaceDiscussion20_update.png';
                    }
                } else {
                    $page_info['subject_icon'] = $app_path
                                                 . '/grn/image/cybozu/spaceDiscussion20_new.png';
                }
            }

            $page_info['url_params'] = [
                'spid' => $org_data['spaceId'],
                'tid'  => $unique_id
            ];
            $page_info['subject_fragment'] = 'tid=' . $unique_id;

            if (($status == GRN_NOTIFICATION_DATA_STATUS_UPDATE
                 || $status == GRN_NOTIFICATION_DATA_STATUS_READ)
                && array_key_exists('comment', $org_data)
            ) {
                $page_info['subject_fragment'] .= '&cmid='
                                                  . $org_data['comment'];
            }
        } elseif ($sub_module_id == self::GRN_TODO_SUB_MODULE_ID) {
            $page_info['subject_page'] = 'space/application/todo/view';
            $page_info['url_params'] = [
                'spid' => $org_data['spaceId'],
                'tdid' => $unique_id
            ];
            if ($status == GRN_NOTIFICATION_DATA_STATUS_UPDATE
                && array_key_exists('comment', $org_data)
            ) {
                $page_info['url_params']['cmid'] = $org_data['comment'];
            }

            if ($action_id == GRN_NOTIFICATION_ACTION_DELETE_ID) {
                $page_info['subject_icon'] = $app_path
                                             . '/grn/image/cybozu/spaceTodo20_delete.png';
            } elseif (array_key_exists('file', $org_data)) {
                if ($action_id == GRN_NOTIFICATION_ACTION_UPDATE_ID) {
                    if (array_key_exists('comment', $org_data)) {
                        $page_info['subject_icon'] = $app_path
                                                     . '/grn/image/cybozu/spaceTodo_clip30x20_u.png';
                    } elseif (array_key_exists('complete', $org_data)) {
                        $page_info['subject_icon'] = $app_path
                                                     . '/grn/image/cybozu/spaceTodo_clip30x20_complete.png';
                    } else {
                        $page_info['subject_icon'] = $app_path
                                                     . '/grn/image/cybozu/spaceTodo_clip30x20_update.png';
                    }
                } else {
                    $page_info['subject_icon'] = $app_path
                                                 . '/grn/image/cybozu/spaceTodo_clip30x20_new.png';
                }
            } else {
                if ($action_id == GRN_NOTIFICATION_ACTION_UPDATE_ID) {
                    if (array_key_exists('comment', $org_data)) {
                        $page_info['subject_icon'] = $app_path
                                                     . '/grn/image/cybozu/spaceTodo20_u.png';
                    } elseif (array_key_exists('complete', $org_data)) {
                        $page_info['subject_icon'] = $app_path
                                                     . '/grn/image/cybozu/spaceTodo20_complete.png';
                    } else {
                        $page_info['subject_icon'] = $app_path
                                                     . '/grn/image/cybozu/spaceTodo20_update.png';
                    }
                } else {
                    $page_info['subject_icon'] = $app_path
                                                 . '/grn/image/cybozu/spaceTodo20_new.png';
                }
            }
        } else {
            ; //exeption
        }

        return $page_info;
    }

    /**
     * @param       $user
     * @param array $params
     *
     * @return GRN_Star_Data
     * @throws GrnDataNotFoundException
     * @throws GrnIllegalOperationException
     * @throws GrnInvalidPermissionException
     */
    public function getStarData($user, $params = [])
    {
        assert('is_array($params) && count($params) > 0');
        $sub_module = array_key_exists('submdl', $params) ? $params['submdl']
            : null;

        if (self::GRN_DISCUSSION_SUB_MODULE_ID == $sub_module) {
            $spid = array_key_exists('spid', $params) ? $params['spid']
                : null;
            $tid = array_key_exists('tid', $params) ? $params['tid']
                : null;
            $star_data = $this->_getThreadStarData($user, $spid, $tid);

            return $star_data;
        }

        throw new GrnIllegalOperationException(SpaceErrorCode::GRN_APPLICATION_NOT_FOUND);
    }

    /**
     * @param CB_User $user
     */
    public function updateStarData($user)
    {
        assert('$user instanceof CB_User');
        require_once('star/logic.csp');
        $star_logic = GRN_Star_StarLogic::getInstance();
        $star_list = $star_logic->getList($user, self::GRN_SPACE_MODULE_ID, 0,
            -1);

        if (is_array($star_list)) {
            foreach ($star_list as $starId => $starData) {
                if (isset($starData['org_data'])) {
                    $sub_module = array_key_exists('sub_module',
                        $starData['org_data'])
                        ? $starData['org_data']['sub_module'] : null;

                    if (self::GRN_DISCUSSION_SUB_MODULE_ID == $sub_module) {
                        $spid = null;
                        $tid = array_key_exists('tid', $starData['org_data'])
                            ? $starData['org_data']['tid'] : null;
                        if ($tid) {
                            $tid = mb_substr($tid, 4);
                            $spaceLogic = new SpaceLogic();
                            $space = $spaceLogic->getSpaceByThreadId($tid,
                                LanguageStatus::STANDARD_LANGUAGE_CODE, true);
                            if ($space) {
                                $spid = $space->getId();
                            }
                        }
                        $userId = $user->getOID();
                        $service = DiscussionService::getInstance();
                        if ( ! $service->hasThreadAccessControl(Authority::AUTHORITY_CODE_READ_DETAIL,
                            $spid, $tid, $userId)
                        ) {
                            $star_logic->removeByIds($user, [$starId]);
                            continue;
                        }
                        try {
                            $thread = $service->getThread($tid, $userId);
                        } catch (GrnDataNotFoundException $e) {
                            $star_logic->removeByIds($user, [$starId]);
                            continue;
                        }
                        $thread_tile = $thread->getTitle();
                        $org_data = [
                            'spid'       => $spid,
                            'tid'        => "tid=$tid",
                            'sub_module' => self::GRN_DISCUSSION_SUB_MODULE_ID
                        ];
                        $star_data = new GRN_Star_Data();
                        $star_data->setModuleId(self::GRN_SPACE_MODULE_ID);
                        $star_data->setUniqueId($tid);
                        $star_data->setOrgData($org_data);
                        $star_data->setSubjectData($thread_tile);
                        $star_logic->modify($user, $star_data);
                    }
                } else {
                    $star_logic->removeByIds($user, [$starId]);
                }

            }
        }
    }

    /**
     * @param CB_User $user
     * @param         $spid
     * @param         $tid
     *
     * @return GRN_Star_Data
     * @throws GrnDataNotFoundException
     * @throws GrnInvalidPermissionException
     */
    public function _getThreadStarData($user, $spid, $tid)
    {
        assert('$user instanceof CB_User');

        $service = DiscussionService::getInstance();
        $userId = $user->getOID();

        if ($isAuthority
            = $service->hasThreadAccessControl(Authority::AUTHORITY_CODE_READ_DETAIL,
            $spid, $tid, $userId)
        ) {
            $this->verifySpaceIsNotExpired($spid,
                self::GRN_DISCUSSION_SUB_MODULE_ID);
            try {
                $thread = $service->getThread($tid, $userId);
            } catch (GrnDataNotFoundException $e) {
                $e->setErrorCode(ErrorCode::GRN_INVALID_THREAD_ID);
                throw $e;
            }
        } else {
            throw new GrnInvalidPermissionException(ErrorCode::GRN_THREAD_NO_ACCESS_PERMISSION);
        }
        $thread_tile = $thread->getTitle();
        $org_data = [
            'spid'       => $spid,
            'tid'        => "tid=$tid",
            'sub_module' => self::GRN_DISCUSSION_SUB_MODULE_ID
        ];

        require_once('star/logic.csp');
        $star_data = new GRN_Star_Data();
        $star_data->setModuleId(self::GRN_SPACE_MODULE_ID);
        $star_data->setUniqueId($tid);
        $star_data->setOrgData($org_data);
        $star_data->setSubjectData($thread_tile);

        return $star_data;
    }

    /**
     * @return array
     */
    public function getSystemConfigArray()
    {
        $ret = ['space_config' => []];

        $ret['space_config'][] = [
            'page' => 'space/system/common_set',
            'icon' => 'general32'
        ];
        $ret['space_config'][] = [
            'page' => 'space/system/category_list',
            'icon' => 'category32'
        ];
        $ret['space_config'][] = [
            'page' => 'space/system/import_index',
            'icon' => 'import32'
        ];
        $ret['space_config'][] = [
            'page' => 'space/system/export_index',
            'icon' => 'export32'
        ];

        return $ret;
    }

    /**
     * @param $type
     * @param $value
     * @param $org_data
     * @param $sub_module_id
     *
     * @return array
     */
    public function getFavourNotifyPageInfo(
        $type,
        $value,
        $org_data,
        $sub_module_id
    ) {
        $page_info = [];

        global $G_config_common;
        $app_path = $G_config_common->get('Global', 'app_path');

        if ($sub_module_id == self::GRN_DISCUSSION_SUB_MODULE_ID) {
            $page_info['subject_page'] = 'space/application/discussion/index';
            if ($type == self::FAVOUR_DISCUSSION_BODY) {
                $page_info['url_params'] = [
                    GenericScreenBase::ARG_SPACE_ID  => $org_data[GenericScreenBase::ARG_SPACE_ID],
                    GenericScreenBase::ARG_THREAD_ID => $value
                ];
                $page_info['subject_fragment'] = 'tid=' . $value;
            } elseif ($type == self::FAVOUR_DISCUSSION_COMMENT) {
                $page_info['url_params'] = [
                    GenericScreenBase::ARG_SPACE_ID   => $org_data[GenericScreenBase::ARG_SPACE_ID],
                    GenericScreenBase::ARG_THREAD_ID  => $org_data[GenericScreenBase::ARG_THREAD_ID],
                    GenericScreenBase::ARG_COMMENT_ID => $value
                ];
                $page_info['subject_fragment'] = 'tid='
                                                 . $org_data[GenericScreenBase::ARG_THREAD_ID]
                                                 . '&cmid=' . $value;
            }
            $page_info['subject_icon'] = 'icon_space_discussion_grn';
            $page_info['subject_icon_label'] = cb_msg(self::GRN_SPACE_MODULE_ID,
                'discussion');
        } elseif ($sub_module_id == self::GRN_TODO_SUB_MODULE_ID) {
            $page_info['subject_page'] = 'space/application/todo/view';
            if ($type == self::FAVOUR_TODO_BODY) {
                $page_info['url_params'] = [
                    GenericScreenBase::ARG_SPACE_ID => $org_data[GenericScreenBase::ARG_SPACE_ID],
                    GenericScreenBase::ARG_TODO_ID  => $value
                ];
            } elseif ($type == self::FAVOUR_TODO_COMMENT) {
                $page_info['url_params'] = [
                    GenericScreenBase::ARG_SPACE_ID   => $org_data[GenericScreenBase::ARG_SPACE_ID],
                    GenericScreenBase::ARG_TODO_ID    => $org_data[GenericScreenBase::ARG_TODO_ID],
                    GenericScreenBase::ARG_COMMENT_ID => $value
                ];
            }
            $page_info['subject_icon'] = 'icon_space_todo_grn';
            $page_info['subject_icon_label'] = cb_msg(self::GRN_SPACE_MODULE_ID,
                'todo');
        } else {
            ; //exeption
        }

        return $page_info;
    }

    /**
     * @return array
     */
    public function getFavourType()
    {
        return [
            self::FAVOUR_DISCUSSION_BODY,
            self::FAVOUR_DISCUSSION_COMMENT,
            self::FAVOUR_TODO_BODY,
            self::FAVOUR_TODO_COMMENT
        ];
    }

    /**
     * @return array
     */
    public function getSubModuleId()
    {
        return [
            self::GRN_SPACE_SUB_MODULE_ID,
            self::GRN_DISCUSSION_SUB_MODULE_ID,
            self::GRN_TODO_SUB_MODULE_ID
        ];
    }

    /**
     * @param string $login_id
     * @param string $type
     * @param string $value
     * @param array  $params
     * @param string $sub_module
     *
     * @return null
     * @throws GrnDataNotFoundException
     * @throws GrnInvalidPermissionException
     */
    public function checkLoginUserAuthorityForFavour(
        $login_id,
        $type,
        $value,
        array $params = [],
        $sub_module = ''
    ) {
        $spid = array_key_exists(GenericScreenBase::ARG_SPACE_ID, $params)
            ? $params[GenericScreenBase::ARG_SPACE_ID] : null;
        $tid = array_key_exists(GenericScreenBase::ARG_THREAD_ID, $params)
            ? $params[GenericScreenBase::ARG_THREAD_ID] : null;
        $tdid = array_key_exists(GenericScreenBase::ARG_TODO_ID, $params)
            ? $params[GenericScreenBase::ARG_TODO_ID] : null;

        switch ($sub_module) {
            case self::GRN_DISCUSSION_SUB_MODULE_ID :
                $service = DiscussionService::getInstance();
                if (self::FAVOUR_DISCUSSION_BODY == $type) {
                    try {
                        $service->getThread($value, $login_id);
                    } catch (GrnDataNotFoundException $e) {
                        $e->setErrorCode(SpaceErrorCode::GRN_INVALID_THREAD_ID);
                        throw $e;
                    }
                    if ( ! $service->hasThreadAccessControl(Authority::AUTHORITY_CODE_READ_DETAIL,
                        $spid, $value, $login_id)
                    ) {
                        throw new GrnInvalidPermissionException(ErrorCode::GRN_THREAD_NO_ACCESS_PERMISSION);
                    }
                } elseif (self::FAVOUR_DISCUSSION_COMMENT == $type) {
                    try {
                        $service->getComment($value, $login_id);
                    } catch (GrnDataNotFoundException $e) {
                        $e->setErrorCode(SpaceErrorCode::GRN_THREAD_INVALID_COMMENT_ID);
                        throw $e;
                    }
                    if ( ! $service->hasThreadCommentAccessControl(Authority::AUTHORITY_CODE_READ_DETAIL,
                        $spid, $tid, $value, $login_id)
                    ) {
                        throw new GrnInvalidPermissionException(ErrorCode::GRN_THREAD_NO_ACCESS_PERMISSION);
                    }
                } else {
                    throw new GrnInvalidPermissionException(ErrorCode::GRN_UNEXPECTED_ERROR);
                }

                return;
            case self::GRN_TODO_SUB_MODULE_ID :
                $service = TodoService::getInstance();
                if (self::FAVOUR_TODO_BODY == $type) {
                    try {
                        $service->getTodo($value, $login_id);
                    } catch (GrnDataNotFoundException $e) {
                        $e->setErrorCode(SpaceErrorCode::GRN_INVALID_TODO_ID);
                        throw $e;
                    }
                    if ( ! $service->hasTodoAccessControl(Authority::AUTHORITY_CODE_READ_DETAIL,
                        $spid, $tid, $value, $login_id)
                    ) {
                        throw new GrnInvalidPermissionException(ErrorCode::GRN_TODO_NO_ACCESS_PERMISSION);
                    }
                } elseif (self::FAVOUR_TODO_COMMENT == $type) {
                    try {
                        $service->getComment($value, $login_id);
                    } catch (GrnDataNotFoundException $e) {
                        $e->setErrorCode(SpaceErrorCode::GRN_TODO_INVALID_COMMENT_ID);
                        throw $e;
                    }
                    if ( ! $service->hasTodoCommentAccessControl(Authority::AUTHORITY_CODE_READ_DETAIL,
                        $spid, $tid, $tdid, $value, $login_id)
                    ) {
                        throw new GrnInvalidPermissionException(ErrorCode::GRN_TODO_NO_ACCESS_PERMISSION);
                    }
                } else {
                    throw new GrnInvalidPermissionException(ErrorCode::GRN_UNEXPECTED_ERROR);
                }

                return;
            default :
                throw new GrnInvalidPermissionException(ErrorCode::GRN_UNEXPECTED_ERROR);
        }
    }

    /**
     * Check the authority and get notification data for favour.
     *
     * @param string $loginId
     * @param string $type
     * @param string $value
     * @param array  $params
     * @param string $sub_module
     *
     * @return \grn\favour\data\bean\FavourNotify
     */
    public function getNotifyDataForFavour(
        $loginId,
        $type,
        $value,
        array $params = [],
        $sub_module = ''
    ) {
        $spid = array_key_exists(GenericScreenBase::ARG_SPACE_ID, $params)
            ? $params[GenericScreenBase::ARG_SPACE_ID] : null;
        $tid = array_key_exists(GenericScreenBase::ARG_THREAD_ID, $params)
            ? $params[GenericScreenBase::ARG_THREAD_ID] : null;
        $tdid = array_key_exists(GenericScreenBase::ARG_TODO_ID, $params)
            ? $params[GenericScreenBase::ARG_TODO_ID] : null;

        $this->verifySpaceIsNotExpired($spid, $sub_module);

        $data = new FavourNotify();

        switch ($sub_module) {
            case self::GRN_DISCUSSION_SUB_MODULE_ID :
                $service = DiscussionService::getInstance();
                if (self::FAVOUR_DISCUSSION_BODY == $type) {
                    $thread = $service->getThread($value, $loginId);
                    $data->setAbstract($thread->getTitle());
                    $data->setUser($thread->getCreatorId());
                    $data->setOrgData([GenericScreenBase::ARG_SPACE_ID => $spid]);
                } elseif (self::FAVOUR_DISCUSSION_COMMENT == $type) {
                    $comment = $service->getComment($value, $loginId);
                    require_once('grn/controller.csp');
                    $data->setAbstract(($comment->isRichText())
                        ? grn_strip_tags($comment->getContent())
                        : $comment->getContent());
                    $data->setUser($comment->getCreatorId());
                    $data->setOrgData([
                        GenericScreenBase::ARG_SPACE_ID  => $spid,
                        GenericScreenBase::ARG_THREAD_ID => $tid
                    ]);
                }
                break;
            case self::GRN_TODO_SUB_MODULE_ID :
                $service = TodoService::getInstance();
                if (self::FAVOUR_TODO_BODY == $type) {
                    $todo = $service->getTodo($value, $loginId);
                    $data->setAbstract($todo->getTitle());
                    $creator_id = $todo->getCreatorId();
                    $data->setUser($creator_id);
                    $data->setOrgData([GenericScreenBase::ARG_SPACE_ID => $spid]);
                } elseif (self::FAVOUR_TODO_COMMENT == $type) {
                    $comment = $service->getComment($value, $loginId);
                    require_once('grn/controller.csp');
                    $data->setAbstract(($comment->isRichText())
                        ? grn_strip_tags($comment->getContent())
                        : $comment->getContent());
                    $creator_id = $comment->getCreatorId();
                    $data->setUser($creator_id);
                    $data->setOrgData([
                        GenericScreenBase::ARG_SPACE_ID => $spid,
                        GenericScreenBase::ARG_TODO_ID  => $tdid
                    ]);
                }

                if ($this->isPrivateSpace($spid)
                    && $this->isOutOfSpaceMember($creator_id, $spid, $loginId)
                ) {
                    // No send notification
                    return new FavourNotify();
                }
            default :
        }

        return $data;
    }

    /**
     * @param $space_id
     *
     * @return bool
     */
    private function isPrivateSpace($space_id)
    {
        $space_logic = SpaceLogic::getInstance();
        $space = $space_logic->getSpace($space_id,
            LanguageStatus::STANDARD_LANGUAGE_CODE);

        return ! $space->isPublic();
    }

    /**
     * @param $creator_id
     * @param $space_id
     * @param $login_user_id
     *
     * @return bool
     */
    private function isOutOfSpaceMember($creator_id, $space_id, $login_user_id)
    {
        $todo_logic = TodoLogic::getInstance();
        $filtered_ids = $todo_logic->filteringOutOfSpaceMember([$creator_id],
            $space_id, $login_user_id);

        return empty($filtered_ids);
    }

    /**
     * @param string $loginId
     * @param string $type
     * @param string $value
     * @param array  $params
     * @param string $sub_module
     *
     * @return bool
     */
    public function checkNotifyUserAuthorityForFavour(
        $loginId,
        $type,
        $value,
        array $params = [],
        $sub_module = ''
    ) {
        $spid = array_key_exists(GenericScreenBase::ARG_SPACE_ID, $params)
            ? $params[GenericScreenBase::ARG_SPACE_ID] : null;
        $tid = array_key_exists(GenericScreenBase::ARG_THREAD_ID, $params)
            ? $params[GenericScreenBase::ARG_THREAD_ID] : null;
        $tdid = array_key_exists(GenericScreenBase::ARG_TODO_ID, $params)
            ? $params[GenericScreenBase::ARG_TODO_ID] : null;
        switch ($sub_module) {
            case self::GRN_DISCUSSION_SUB_MODULE_ID :
                $service = DiscussionService::getInstance();
                if (self::FAVOUR_DISCUSSION_BODY == $type) {
                    $thread = $service->getThread($value, $loginId);

                    return $service->hasThreadAccessControl(Authority::AUTHORITY_CODE_READ_DETAIL,
                        $spid, $value, $thread->getCreatorId());
                } elseif (self::FAVOUR_DISCUSSION_COMMENT == $type) {
                    $comment = $service->getComment($value, $loginId);

                    return $service->hasThreadCommentAccessControl(Authority::AUTHORITY_CODE_READ_DETAIL,
                        $spid, $tid, $value, $comment->getCreatorId());
                } else {
                    return false;
                }
            case self::GRN_TODO_SUB_MODULE_ID :
                $service = TodoService::getInstance();
                if (self::FAVOUR_TODO_BODY == $type) {
                    $todo = $service->getTodo($value, $loginId);

                    return $service->hasTodoAccessControl(Authority::AUTHORITY_CODE_READ_DETAIL,
                        $spid, $tid, $value, $todo->getCreatorId());
                } elseif (self::FAVOUR_TODO_COMMENT == $type) {
                    $comment = $service->getComment($value, $loginId);

                    return $service->hasTodoCommentAccessControl(Authority::AUTHORITY_CODE_READ_DETAIL,
                        $spid, $tid, $tdid, $value, $comment->getCreatorId());
                } else {
                    return false;
                }
            default :
                return false;
        }
    }

    /**
     * ポートレット
     */
    public function &getPortletList()
    {
        require_once('fw/i18n.csp');
        $portletList = [];
        $portlet_todo_take = [
            'name'          => cb_msg(self::GRN_SPACE_MODULE_ID,
                'todo_undertake'),
            //名前
            'type'          => self::PORTLET_TODO_UNDERTAKE,
            //種別
            'version'       => '1.0',
            //バージョン
            'view_template' => 'space/portlet/view_todo_undertake.csp'
            //表示用テンプレート名
        ];
        $portletList[] = $portlet_todo_take;

        $portlet_todo_rely = [
            'name'          => cb_msg(self::GRN_SPACE_MODULE_ID, 'todo_rely'),
            //名前
            'type'          => self::PORTLET_TODO_RELY,
            //種別
            'version'       => '1.0',
            //バージョン
            'view_template' => 'space/portlet/view_todo_rely.csp'
            //表示用テンプレート名
        ];
        $portletList[] = $portlet_todo_rely;

        return $portletList;
    }

    /**
     * @param int|null $space_id
     * @param string   $sub_module
     *
     * @throws GrnDataNotFoundException
     */
    public function verifySpaceIsNotExpired($space_id, $sub_module)
    {
        if ($space_id === null) {
            return;
        }

        $spaceLogic = new SpaceLogic();
        $space = $spaceLogic->getSpace($space_id,
            LanguageStatus::STANDARD_LANGUAGE_CODE);
        if ( ! $space->isExpired()) {
            return;
        }

        $error_code = ErrorCode::GRN_SPACE_EXPIRED;
        if ($sub_module === self::GRN_DISCUSSION_SUB_MODULE_ID) {
            $error_code = ErrorCode::GRN_THREAD_BELONG_TO_EXPIRED_SPACE;
        } elseif ($sub_module === self::GRN_TODO_SUB_MODULE_ID) {
            $error_code = ErrorCode::GRN_TODO_BELONG_TO_EXPIRED_SPACE;
        }

        throw new GrnDataNotFoundException($error_code);
    }
}
