<?php

namespace grn\space\screen;

use grn\space\service\SpaceService;
use grn\space\data\condition\ThreadSearchCondition;
use grn\space\service\DiscussionService;
use grn\space\common\data\bean\Authority;
use grn\space\common\data\bean\Application;
use grn\space\common\exception\ErrorCode;
use grn\space\common\exception\GrnInvalidPermissionException;

/**
 * Class ThreadMoveList
 *
 */
class ThreadMoveList extends SpaceBase
{
    const ARG_NAVI_TAG = 'sp';

    private $_navi_info;

    /**
     * @param $navi_info
     */
    public function setNaviInfo($navi_info)
    {
        $this->_navi_info = $navi_info;
    }

    /**
     * @return mixed
     */
    public function getNaviInfo()
    {
        return $this->_navi_info;
    }

    /**
     * @see grn\space\screen.GenericScreenBase::fetch()
     */
    public function fetch()
    {
        require_once("grn/smarty.csp");
        $smarty = new \GRN_Smarty();

        $controllerUtil = new \GRN_ControllerUtil();
        $offset = $controllerUtil->getNaviStartPosition();
        $limit = $this->getUserConfig()->getListMax();

        $input = $this->getInput();
        $spaceId = $this->getSpaceId();
        $folderId = cb_at($input, self::ARG_SPACE_FOLDER_ID);
        $folderId = $folderId == -1 ? null : $folderId;
        $loginId = $this->getLoginUserId();
        $currentLanguage = $this->getLanguageCode();
        $spaceService = SpaceService::getInstance();
        $discussionService = DiscussionService::getInstance();

        //Get discussion's root category of the space specified with space Id.
        $rootCategory = $discussionService->getApplicationRootCategory(
            $spaceId, Application::APPLICATION_CODE_DISCUSSION, $currentLanguage
        );
        //Check whether target user has the authority to access the space.
        if ( ! $discussionService->hasThreadCategoryAccessControl(
            Authority::AUTHORITY_CODE_READ_DETAIL, $spaceId,
            $rootCategory->getId(), $loginId
        )
        ) {
            throw new GrnInvalidPermissionException(ErrorCode::GRN_NO_READ_PERMISSION);
        }

        // check folder belongs space or not
        $spaceService->verifySpaceFolder(
            $spaceId, $folderId, $this->getLoginUserId(),
            $this->getLanguageCode()
        );

        $searchCondition = new ThreadSearchCondition();

        //Get collection of the threads in the scace's discussion, according to space Id.
        $searchCondition->setSearchCategoryId($rootCategory->getId());
        $searchCondition->setSearchFolderId($folderId);
        $searchCondition->setIsSystemUse(false);
        $searchCondition->setOrderSortArray(
            [
                ThreadSearchCondition::SORT_COMPONENT_MODIFY_TIME_DESC,
                ThreadSearchCondition::SORT_TITLE_ASC
            ]
        );
        $searchCondition->setLimit($limit + 1);

        do {
            if ($offset < 0) {
                $offset = 0;
                break;
            }
            $searchCondition->setOffset($offset);

            $threadCollection
                = $discussionService->selectThreadListByConditionWithAccessControl(
                Authority::AUTHORITY_CODE_READ_DETAIL, $searchCondition,
                $loginId
            );
            if ($threadCollection->count() == 0) {
                $offset -= $limit;
            }
        } while ($threadCollection->count() == 0);

        $smarty->assign('threads', $threadCollection);

        // Make page navi
        $isExistsNextPage = ($threadCollection->count() > $limit);
        if ($isExistsNextPage) {
            $threadCollection->remove($this->getUserConfig()->getListMax());
        }

        $pageNavi = $controllerUtil->makeSimpleNaviInformation(
            $offset, $limit, $threadCollection->count(), $isExistsNextPage,
            [self::ARG_SPACE_CATEGORY_ID => $this->getSpaceCategoryId()]
        );
        $this->setNaviInfo($pageNavi);

        $smarty->assign('spaceId', $spaceId);

        return $smarty->fetch("space/thread_move_list_item.tpl");
    }

    /**
     * @param $input
     *
     * @throws \grn\space\common\exception\GrnInvalidArgumentException
     */
    protected function setInput($input)
    {
        parent::setInput($input);
        $this->checkArgFromInput([self::ARG_SPACE_ID], $input);
        $this->verifySpaceIsNotExpired();
    }
}
