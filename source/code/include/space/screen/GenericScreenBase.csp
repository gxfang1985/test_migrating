<?php

namespace grn\space\screen;

use grn\grn\Validate;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\common\data\condition\CategorySearchCondition;
use grn\space\service\SpaceService;
use grn\space\common\data\bean\DatetimeFormat;
use grn\space\common\data\bean\SpaceMember;
use grn\space\common\exception\ErrorCode;
use grn\space\common\exception\GrnException;
use grn\space\common\exception\GrnInvalidArgumentException;
use grn\space\common\utility\ValidateUtility;
use grn\space\data\bean\Todo;
use grn\fts\Application as FtsApplication;
use grn\space\service\DiscussionService;
use grn\space\common\data\bean\SpaceFile;
use grn\space\service\TodoService;
use grn\space\common\exception\GrnInvalidPermissionException;
use grn\space\common\data\bean\Comment;
use grn\space\common\data\bean\Authority;
use grn\grn\GrnGenericScreenBase;
use grn\space\logic\SpaceLogic;
use grn\space\common\data\bean;
use grn\space\common\data\bean\LanguageStatus;
use grn\space\screen\mobile\MobileGenericScreenBase;

/**
 * Class GenericScreenBase
 *
 */
class GenericScreenBase extends GrnGenericScreenBase
{
    const ARG_SPACE_ID = 'spid';
    const ARG_SPACE_CATEGORY_ID = 'cid';
    const ARG_THREAD_ID = 'tid';
    const ARG_TODO_ID = 'tdid';
    const ARG_FILE_ID = 'fid';
    const ARG_FROM = 'from';
    const ARG_NAVI_TAG = 'sp';
    const ARG_COMMENT_NUMBER = 'cmno';
    const ARG_COMMENT_ID = 'cmid';
    const ARG_MEMBER = 'member';
    const ARG_SPACE_FOLDER_ID = 'did';
    const ARG_SPACE_EXPIRATION_DATE = 'expiration_date_';
    const ARG_EXPIRATION_DATE_TYPE = 'default_expiration_date';

    const URL_ROOT = "space/root";
    const URL_LIST = "space/list";
    const URL_INDEX = "space/index";
    const URL_TOP = "space/top";

    const STATUS_LATE = 'late';
    const STATUS_TODAY = 'today';
    const STATUS_IN_TERM = 'inTerm';
    const STATUS_NO_TERM = 'noTerm';

    const FROM_DISCUSSION_INDEX = 1;
    const FROM_TODO_INDEX = 2;
    const FROM_TODO_DETAIL = 3;
    const FROM_DISCUSSION_DETAIL = 4;

    const MEMBER_CHECKED = 1;
    const MEMBER_NOT_CHECKED = 0;

    const DISCUSSION_SESSION_KEY = 'grn.space.discussion';
    const TODO_SESSION_KEY = "grn.space.todo";
    const FOLDER_EXPANDED_SESSION_KEY = 'grn.space.discussion.opened';
    const MOBILE_FOLDER_EXPANDED_SESSION_KEY = 'grn.space.mobile.discussion.opened';

    const GRN_SPACE_MODULE_ID = 'grn.space';
    const GRN_DISCUSSION_SUB_MODULE_ID = 'grn.discussion';
    const GRN_TODO_SUB_MODULE_ID = 'grn.todo';

    const SEARCH_ALL = "ALL";
    const SEARCH_MY = "MY";
    const FOLDER_ID_LIST_EXPANDED = 'folderIdListOpened';
    const SEND_NOTIFY = "notifyFlag";

    CONST SPECIFIED_EXPIRATION_DATE = '0';
    const URL_EXPIRED_SCREEN = "space/expired";
    const URL_EXPIRED_MOBILE_SCREEN = "space/mobile/expired";

    private $_spaceId;
    private $_spaceCategoryId;
    private $_threadId;
    private $_todoId;
    private $_fileId;
    private $_commentId;
    private $_windowTitle;
    private $_from;
    private $_checked;
    private $requireSpaceIsNotExpired = true;

    /**
     * @return mixed
     */
    public function getSpaceId()
    {
        return $this->_spaceId;
    }

    /**
     * @param $value
     */
    protected function setSpaceId($value)
    {
        $this->_spaceId = $value;
    }

    /**
     * @return mixed
     */
    public function getSpaceCategoryId()
    {
        return $this->_spaceCategoryId;
    }

    /**
     * @param $value
     */
    protected function setSpaceCategoryId($value)
    {
        $this->_spaceCategoryId = $value;
    }

    /**
     * @return mixed
     */
    public function getThreadId()
    {
        return $this->_threadId;
    }

    /**
     * @param $value
     */
    protected function setThreadId($value)
    {
        $this->_threadId = $value;
    }

    /**
     * @return mixed
     */
    public function getTodoId()
    {
        return $this->_todoId;
    }

    /**
     * @param $value
     */
    protected function setTodoId($value)
    {
        $this->_todoId = $value;
    }

    /**
     * @return mixed
     */
    public function getFileId()
    {
        return $this->_fileId;
    }

    /**
     * @param $value
     */
    protected function setFileId($value)
    {
        $this->_fileId = $value;
    }

    /**
     * @return mixed
     */
    public function getCommentId()
    {
        return $this->_commentId;
    }

    /**
     * @param $value
     */
    protected function setCommentId($value)
    {
        $this->_commentId = $value;
    }

    /**
     * @return mixed
     */
    public function getWindowTitle()
    {
        return $this->_windowTitle;
    }

    /**
     * @param $title
     */
    protected function setWindowTitle($title)
    {
        $this->_windowTitle = $title;
    }

    /**
     * @return mixed
     */
    public function getFrom()
    {
        return $this->_from;
    }

    /**
     * @param $value
     */
    protected function setFrom($value)
    {
        $this->_from = $value;
    }

    /**
     * @return mixed
     */
    public function getChecked()
    {
        return $this->_checked;
    }

    /**
     * @param $value
     */
    public function setChecked($value)
    {
        $this->_checked = $value;
    }

    /**
     * @return bool
     */
    public function getRequireSpaceIsNotExpired()
    {
        return $this->requireSpaceIsNotExpired;
    }

    /**
     * @param bool $value
     */
    public function setRequireSpaceIsNotExpired($value)
    {
        $this->requireSpaceIsNotExpired = $value;
    }

    /**
     * @return \GRN_UIConfig
     */
    protected function getUserConfig()
    {
        $login = $this->getLoginUser();

        require_once('grn/ui.csp');
        $manager = \GRN_UIConfigManager::getInstance();

        return $manager->getUserConfig($login);
    }

    /**
     *
     * @return boolean
     */
    protected function isSystemUseEnglish()
    {
        require_once("fw/i18n/system_config.csp");

        return \CB_I18N_SystemConfig::isNickname() == true;
    }

    /**
     *
     * @return boolean
     */
    protected function isEnglishDisplayAfterName()
    {
        return $this->getUserConfig()->getUserNameFormat() == true;
    }

    /**
     *
     * @return boolean
     */
    protected function isOrganizationDisplayAfterName()
    {
        return $this->getUserConfig()->getShowPriorityGroup() == true;
    }

    /**
     *
     * @return string
     */
    protected function getLanguageCode()
    {
        require_once("fw/i18n.csp");
        $i18n = \CB_I18N::getInstance();

        return $i18n->getCurrentLanguage();
    }

    /**
     *
     * @return string
     */
    protected function getTimezoneName()
    {
        require_once("fw/i18n.csp");
        $i18n = \CB_I18N::getInstance();

        return $i18n->getCurrentTimezone();
    }

    /**
     * Get DatetimeFormat object
     *
     * @return DatetimeFormat
     */
    protected function getDatetimeFormat()
    {
        require_once("fw/i18n/locale.csp");
        $datetimeFormat = new DatetimeFormat();
        $datetimeFormat->setLongDateFormat(\CB_LocaleManager::getCurrentLongDateFormat($this->getLoginUserId()));
        $datetimeFormat->setShortDateFormat(\CB_LocaleManager::getCurrentShortDateFormat($this->getLoginUserId()));
        $datetimeFormat->setTimeFormat(\CB_LocaleManager::getCurrentTimeFormat($this->getLoginUserId()));

        return $datetimeFormat;
    }

    /**
     * @return SpaceMember
     */
    protected function makeLoginUserSpaceMember()
    {
        $login = $this->getLoginUser();

        $spaceMember = new SpaceMember();
        $spaceMember->setMemberID($login->getOID());
        $spaceMember->setUserName($login->get('display_name'));

        return $spaceMember;
    }

    /**
     * Check argument of $G_INPUT
     *
     * @param  array $paraArr ( spid, cid, tid, tdid, fid )
     * @param  array $input
     *
     * @throws GrnInvalidArgumentException
     */
    protected function checkArgFromInput(array $paraArr, array $input)
    {
        foreach ($paraArr as $para) {
            switch ($para) {
                case self::ARG_SPACE_ID:
                    $space = null;
                    if (ValidateUtility::isNumber(@$input[self::ARG_THREAD_ID],
                        ValidateUtility::DISABLE_EMPTY,
                        ValidateUtility::EXCEPTION_NOT_THROW)
                    ) {
                        $spaceLogic = new SpaceLogic();
                        $space
                            = $spaceLogic->getSpaceByThreadId($input[self::ARG_THREAD_ID],
                            LanguageStatus::STANDARD_LANGUAGE_CODE, true);
                        if ($space) {
                            $this->setSpaceId($space->getId());
                        }
                    } elseif (ValidateUtility::isNumber(@$input[self::ARG_TODO_ID],
                        ValidateUtility::DISABLE_EMPTY,
                        ValidateUtility::EXCEPTION_NOT_THROW)
                    ) {
                        $spaceLogic = new SpaceLogic();
                        $space
                            = $spaceLogic->getSpaceByTodoId($input[self::ARG_TODO_ID],
                            LanguageStatus::STANDARD_LANGUAGE_CODE, true);
                        if ($space) {
                            $this->setSpaceId($space->getId());
                        }
                    }

                    if ($space) {
                        break;
                    }

                    if (ValidateUtility::isNumber(@$input[self::ARG_SPACE_ID],
                        ValidateUtility::DISABLE_EMPTY,
                        ValidateUtility::EXCEPTION_NOT_THROW)
                    ) {
                        $this->setSpaceId($input[self::ARG_SPACE_ID]);
                    } else {
                        throw new GrnInvalidArgumentException(ErrorCode::GRN_SPACE_ID_IS_NOT_FOUND);
                    }
                    break;
                case self::ARG_SPACE_CATEGORY_ID:
                    if (ValidateUtility::isNumber(@$input[self::ARG_SPACE_CATEGORY_ID],
                        ValidateUtility::DISABLE_EMPTY,
                        ValidateUtility::EXCEPTION_NOT_THROW)
                    ) {
                        $this->setSpaceCategoryId($input[self::ARG_SPACE_CATEGORY_ID]);
                    } else {
                        throw new GrnInvalidArgumentException(ErrorCode::GRN_INVALID_CATEGORY_ID);
                    }
                    break;
                case self::ARG_THREAD_ID:
                    if (ValidateUtility::isNumber(@$input[self::ARG_THREAD_ID],
                        ValidateUtility::DISABLE_EMPTY,
                        ValidateUtility::EXCEPTION_NOT_THROW)
                    ) {
                        $this->setThreadId($input[self::ARG_THREAD_ID]);
                    } else {
                        throw new GrnInvalidArgumentException(ErrorCode::GRN_INVALID_THREAD_ID);
                    }
                    break;
                case self::ARG_TODO_ID:
                    if (ValidateUtility::isNumber(@$input[self::ARG_TODO_ID],
                        ValidateUtility::DISABLE_EMPTY,
                        ValidateUtility::EXCEPTION_NOT_THROW)
                    ) {
                        $this->setTodoId($input[self::ARG_TODO_ID]);
                    } else {
                        throw new GrnInvalidArgumentException(ErrorCode::GRN_INVALID_TODO_ID);
                    }
                    break;
                case self::ARG_FILE_ID:
                    if (ValidateUtility::isNumber(@$input[self::ARG_FILE_ID],
                        ValidateUtility::DISABLE_EMPTY,
                        ValidateUtility::EXCEPTION_NOT_THROW)
                    ) {
                        $this->setFileId($input[self::ARG_FILE_ID]);
                    } else {
                        throw new GrnInvalidArgumentException(ErrorCode::GRN_INVALID_FILE_ID);
                    }
                    break;
                case self::ARG_COMMENT_ID:
                    if (ValidateUtility::isNumber(@$input[self::ARG_COMMENT_ID],
                        ValidateUtility::DISABLE_EMPTY,
                        ValidateUtility::EXCEPTION_NOT_THROW)
                    ) {
                        $this->setCommentId($input[self::ARG_COMMENT_ID]);
                    } else {
                        throw new GrnInvalidArgumentException(ErrorCode::GRN_INVALID_COMMENT_ID);
                    }
                    break;
                case self::ARG_FROM:
                    if (ValidateUtility::isIn(@$input[self::ARG_FROM],
                        [
                            self::FROM_DISCUSSION_DETAIL,
                            self::FROM_DISCUSSION_INDEX,
                            self::FROM_TODO_DETAIL,
                            self::FROM_TODO_INDEX
                        ],
                        ValidateUtility::DISABLE_EMPTY,
                        ValidateUtility::EXCEPTION_NOT_THROW)
                    ) {
                        $this->setFrom($input[self::ARG_FROM]);
                    } else {
                        $this->setFrom(null);
                    }
                    break;
                case self::ARG_MEMBER:
                    if (ValidateUtility::isIn(@$input[self::ARG_MEMBER],
                        [self::MEMBER_CHECKED, self::MEMBER_NOT_CHECKED],
                        ValidateUtility::DISABLE_EMPTY,
                        ValidateUtility::EXCEPTION_NOT_THROW)
                    ) {
                        $this->setChecked($input[self::ARG_MEMBER]);
                    } else {
                        $this->setChecked(self::MEMBER_CHECKED);
                    }
                    break;

                case self::ARG_SPACE_EXPIRATION_DATE:

                    $expirationType = cb_at($input,
                        self::ARG_EXPIRATION_DATE_TYPE);
                    if ($expirationType === self::SPECIFIED_EXPIRATION_DATE) {
                        $hour = cb_at($input,
                            self::ARG_SPACE_EXPIRATION_DATE . 'hour');
                        $minute = cb_at($input,
                            self::ARG_SPACE_EXPIRATION_DATE . 'minute');
                        $isTimeInvalid = ($hour === '' && $minute !== '')
                                         || ($hour !== '' && $minute === '');
                        if ($isTimeInvalid) {
                            throw  new GrnInvalidArgumentException(ErrorCode::GRN_INVALID_EXPIRATION_DATE_TIME);
                        }

                        if ($hour == '') {
                            $hour = 23;
                        }

                        if ($minute == '') {
                            $minute = 59;
                        }
                        $limitedDatetime = new \CB_DateTime();

                        $limitedDatetime->year = cb_at($input,
                            self::ARG_SPACE_EXPIRATION_DATE . 'year');
                        $limitedDatetime->month = cb_at($input,
                            self::ARG_SPACE_EXPIRATION_DATE . 'month');
                        $limitedDatetime->day = cb_at($input,
                            self::ARG_SPACE_EXPIRATION_DATE . 'day');
                        $limitedDatetime->hour = $hour;
                        $limitedDatetime->minute = $minute;
                        $limitedDatetime->second = 0;

                        $spaceLogic = new SpaceLogic();

                        $isValidDatetime
                            = $spaceLogic->isValidExpirationDate($limitedDatetime);

                        if ( ! $isValidDatetime) {
                            throw  new GrnInvalidArgumentException(ErrorCode::GRN_INVALID_EXPIRATION_DATE_TIME);
                        }
                    }
                    break;
            }
        }

        return;
    }

    /**
     * Create site position array for the Category
     *
     * @param string $categoryId
     *
     * @return array
     */
    protected function createCategorySitePosition($categoryId)
    {
        $spaceService = SpaceService::getInstance();

        $categorySearchCondition = new CategorySearchCondition();
        $categorySearchCondition->setSearchCategoryId($categoryId);
        $categorySearchCondition->setSearchScopeType(CategorySearchCondition::SEARCH_SCOPE_CATEGORY_ANCESTOR);
        $categorySearchCondition->setOrderSortArray([CategorySearchCondition::SORT_HIERARCHY_LEVEL_ASC]);
        $categorySearchCondition->setLanguageCode($this->getLanguageCode());

        $categoryCollection
            = $spaceService->searchSpaceCategoryBySearchCondition($categorySearchCondition,
            $this->getLoginUserId(), $this->getLanguageCode());

        $result = [
            [
                "name" => grn_get_page_display_name(self::URL_ROOT),
                "page" => self::URL_ROOT,
            ],
        ];

        for ($i = 1; $i < count($categoryCollection); $i++) // The first element is ROOT and it should not be shown.
        {
            /** @var \grn\space\common\data\bean\Category $eachCategory */
            $eachCategory = $categoryCollection->getBean($i);
            $result[] = [
                "name" => $eachCategory->getCategoryName(),
                "page" => self::URL_LIST,
                "cid"  => $eachCategory->getId(),
            ];
        }

        return $result;
    }

    /**
     * Transfer timestamp to date.
     *
     * @param \grn\space\data\bean\Todo $todo
     * @param int                       $timestamp
     *
     * @return \CB_DateEx
     */
    protected function transferTimestampToDateEx(Todo $todo, $timestamp)
    {
        $timezone = $todo->getTimezone();

        require_once('fw/date.csp');
        if ($timestamp) {
            $datetime = new \CB_DateTimeEx(cb_timestamp_to_datetime($timestamp,
                $timezone));

            return $datetime->getDate();
        }

        return null;
    }

    /**
     * Get todo status, deadline compares with today.
     *
     * @param \grn\space\data\bean\Todo $todo Object $todo
     *
     * @return String $status ( late, inTerm, today, noTerm )
     */
    protected function getTodoStatus(Todo $todo)
    {
        $today_date = $this->transferTimestampToDateEx($todo, time());
        $deadline_date = $this->transferTimestampToDateEx($todo,
            $todo->getDeadlineTimestamp());
        if ($deadline_date) {
            if ($today_date->compare($deadline_date) > 0) {
                return self::STATUS_LATE;
            } elseif ($today_date->compare($deadline_date) < 0) {
                return self::STATUS_IN_TERM;
            } else {
                return self::STATUS_TODAY;
            }
        } else {
            return self::STATUS_NO_TERM;
        }
    }

    /**
     *
     * @return bool
     */
    public function isFtsAvailable()
    {
        return FtsApplication::isViewable();
    }

    /**
     * Check the operation user has right to read the file.
     *
     * @param \grn\space\common\data\bean\SpaceFile $spaceFile
     * @param                                       $spaceId
     * @param                                       $threadId
     * @param                                       $operationUserId
     *
     * @return bool
     */
    protected function isSpaceFileReadable(
        SpaceFile $spaceFile,
        $spaceId,
        $threadId,
        $operationUserId
    ) {
        $discussionService = DiscussionService::getInstance();
        $todoService = TodoService::getInstance();

        switch ($spaceFile->getParentApplicationType()) {
            case SpaceFile::PARENT_APPLICATION_TYPE_THREAD:
                return $discussionService->hasThreadAccessControl(
                    Authority::AUTHORITY_CODE_READ_DETAIL, $spaceId,
                    $spaceFile->getParentApplicationId(),
                    $operationUserId);

            case SpaceFile::PARENT_APPLICATION_TYPE_THREAD_COMMENT:
                return $discussionService->hasThreadCommentAccessControl(
                    Authority::AUTHORITY_CODE_READ_DETAIL, $spaceId, $threadId,
                    $spaceFile->getParentApplicationId(), $operationUserId);

            case SpaceFile::PARENT_APPLICATION_TYPE_TODO:
                return $todoService->hasTodoAccessControl(
                    Authority::AUTHORITY_CODE_READ_DETAIL, $spaceId, $threadId,
                    $spaceFile->getParentApplicationId(), $operationUserId);

            case SpaceFile::PARENT_APPLICATION_TYPE_TODO_COMMENT:
                $commentId = $spaceFile->getParentApplicationId();
                $todoId = $this->getTodoIdByCommentId($commentId,
                    $operationUserId);

                return $todoService->hasTodoCommentAccessControl(
                    Authority::AUTHORITY_CODE_READ_DETAIL, $spaceId, $threadId,
                    $todoId, $commentId, $operationUserId);
        }

        return false;
    }

    /**
     * Check the operation user has right to write the file.
     *
     * @param \grn\space\common\data\bean\SpaceFile $spaceFile
     * @param                                       $spaceId
     * @param                                       $threadId
     * @param                                       $operationUserId
     *
     * @return bool
     */
    protected function isSpaceFileWritable(
        SpaceFile $spaceFile,
        $spaceId,
        $threadId,
        $operationUserId
    ) {
        $discussionService = DiscussionService::getInstance();
        $todoService = TodoService::getInstance();

        switch ($spaceFile->getParentApplicationType()) {
            case SpaceFile::PARENT_APPLICATION_TYPE_THREAD:
                return $discussionService->hasThreadAccessControl(
                    Authority::AUTHORITY_CODE_WRITE, $spaceId,
                    $spaceFile->getParentApplicationId(),
                    $operationUserId);

            case SpaceFile::PARENT_APPLICATION_TYPE_TODO:
                return $todoService->hasTodoAccessControl(
                    Authority::AUTHORITY_CODE_WRITE, $spaceId, $threadId,
                    $spaceFile->getParentApplicationId(), $operationUserId);

            case SpaceFile::PARENT_APPLICATION_TYPE_THREAD_COMMENT:
                if ( ! $discussionService->hasThreadCommentAccessControl(
                    Authority::AUTHORITY_CODE_READ_DETAIL, $spaceId, $threadId,
                    $spaceFile->getParentApplicationId(), $operationUserId)
                ) {
                    return false;
                }

                $comment
                    = $discussionService->getComment($spaceFile->getParentApplicationId(),
                    $operationUserId);
                if ($comment->getCreatorId() == $operationUserId) {
                    return true;
                }

                return false;

            case SpaceFile::PARENT_APPLICATION_TYPE_TODO_COMMENT:
                $commentId = $spaceFile->getParentApplicationId();
                $todoId = $this->getTodoIdByCommentId($commentId,
                    $operationUserId);
                if ( ! $todoService->hasTodoCommentAccessControl(
                    Authority::AUTHORITY_CODE_READ_DETAIL, $spaceId, $threadId,
                    $todoId, $commentId, $operationUserId)
                ) {
                    return false;
                }

                $comment = $todoService->getComment($commentId,
                    $operationUserId);
                if ($comment->getCreatorId() == $operationUserId) {
                    return true;
                }

                return false;
        }

        return false;
    }

    /**
     * Get the specified file object if the operation user has right to read/write the file.
     * When he doesn't have proper right, GrnDataNotFoundException is thrown.
     *
     * @param $spaceId
     * @param $threadId
     * @param $fileId
     * @param $operationUserId
     * @param $authority
     *
     * @return \grn\space\common\data\bean\SpaceFile
     * @throws \grn\space\common\exception\GrnDataNotFoundException
     */
    public function getSpaceFile(
        $spaceId,
        $threadId,
        $fileId,
        $operationUserId,
        $authority
    ) {
        ValidateUtility::isIn($authority, [
            Authority::AUTHORITY_CODE_READ_DETAIL,
            Authority::AUTHORITY_CODE_SYSTEM_PRIVILEGE,
            Authority::AUTHORITY_CODE_WRITE
        ]);

        try {
            $service = DiscussionService::getInstance();
            $spaceFile = $service->getSpaceFile($fileId, $operationUserId);

            if (in_array($authority, [
                    Authority::AUTHORITY_CODE_READ_DETAIL,
                    Authority::AUTHORITY_CODE_SYSTEM_PRIVILEGE,
                ])
                && $this->isSpaceFileReadable($spaceFile, $spaceId, $threadId,
                    $operationUserId)
            ) {
                return $spaceFile;
            } elseif ($authority == Authority::AUTHORITY_CODE_WRITE
                      && $this->isSpaceFileWritable($spaceFile, $spaceId,
                    $threadId, $operationUserId)
                      || $this->isSpaceAdmin(SpaceService::getInstance(),
                    $operationUserId)
            ) {
                return $spaceFile;
            } else {
                throw new GrnDataNotFoundException();
            }
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_INVALID_FILE_ID);
            throw $e;
        }
    }

    /**
     * @param $commentId
     * @param $operationUserId
     *
     * @return string
     * @throws GrnDataNotFoundException
     * @throws \Exception
     */
    protected function getTodoIdByCommentId($commentId, $operationUserId)
    {
        try {
            $todoService = TodoService::getInstance();
            $todoComment = $todoService->getComment($commentId,
                $operationUserId);
            if ($todoComment->getParentApplicationType()
                != Comment::PARENT_APPLICATION_TYPE_TODO
            ) {
                throw new GrnDataNotFoundException(ErrorCode::GRN_TODO_INVALID_COMMENT_ID);
            }

            return $todoComment->getParentApplicationId();
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_TODO_INVALID_COMMENT_ID);
            throw $e;
        }
    }

    /**
     * Check the specified user is space admin or space operator.
     *
     * @param SpaceService $spaceService
     * @param string       $spaceId
     * @param string       $operationUserId
     *
     * @return bool
     */
    protected function isSpaceAdminOrOperator(
        SpaceService $spaceService,
        $spaceId,
        $operationUserId
    ) {
        return $this->isSpaceOperator($spaceService, $spaceId, $operationUserId)
               || $this->isSpaceAdmin($spaceService, $operationUserId);
    }

    /**
     * Check the specified user is space operator or not.
     *
     * @param SpaceService $spaceService
     * @param string       $spaceId
     * @param string       $userId
     *
     * @return bool
     */
    protected function isSpaceOperator(
        SpaceService $spaceService,
        $spaceId,
        $userId
    ) {
        if ($this->canCommonUserHasPrivilege($spaceService, $spaceId,
            $userId)
        ) {
            return true;
        }

        return $spaceService->hasSpaceAccessControl(Authority::AUTHORITY_CODE_OPERATION_PRIVILEGE,
            $spaceId, $userId);
    }

    /**
     * Check the specified user is space administrator or not.
     *
     * @param SpaceService $spaceService
     * @param string       $userId
     *
     * @return bool
     */
    protected function isSpaceAdmin(SpaceService $spaceService, $userId)
    {
        return $spaceService->_isSpaceAdministrator($userId);
    }

    /**
     * Check common usrs have privilege(when the amount of valid space operators is 0) or not.
     *
     * @param SpaceService $spaceService
     * @param string       $spaceId
     * @param string       $operationUserId
     *
     * @return boolean
     */
    protected function canCommonUserHasPrivilege(
        SpaceService $spaceService,
        $spaceId,
        $operationUserId
    ) {
        if ( ! $spaceService->isSpaceMember($operationUserId, $spaceId,
            $operationUserId)
        ) {
            return false;
        }
        $spaceUserCollection = $spaceService->getSpaceUserCollection($spaceId,
            $operationUserId);
        $operatorCollection
            = $spaceService->getSpaceUserCollectionAccordingToAuthorityCode($spaceUserCollection,
            Authority::AUTHORITY_CODE_OPERATION_PRIVILEGE, $spaceId);
        if ($operatorCollection->count() == 0) {
            return true;
        }
        $invalidCount = 0;
        /** @var \grn\space\data\bean\SpaceUser $operator */
        foreach ($operatorCollection as $operator) {
            if ($operator->isInvalidUser()) {
                ++$invalidCount;
            }
        }

        return $invalidCount == $operatorCollection->count();
    }

    /**
     * @return bool
     */
    private function isAvailableToVerifySpaceIsNotExpired()
    {
        $input = $this->getInput();
        if (isset($input[self::ARG_THREAD_ID])
            || isset($input[self::ARG_TODO_ID])
            || isset($input[self::ARG_SPACE_ID])
        ) {
            return true;
        }

        return false;
    }

    /**
     * @param array $input
     * @param bool  $redirect_to_expired_screen
     */
    private function makeNotificationAsRead(
        $input,
        $redirect_to_expired_screen = false
    ) {
        $user = $this->getLoginUser();
        $unique_id = null;
        $sub_module_id = null;
        if (cb_at($input, self::ARG_FILE_ID)) {
            $unique_id = null;
            $sub_module_id = null;
        } elseif (cb_at($input, self::ARG_TODO_ID)) {
            $unique_id = $input[self::ARG_TODO_ID];
            $sub_module_id = \GrnSpaceApplication::GRN_TODO_SUB_MODULE_ID;
        } elseif (cb_at($input, self::ARG_THREAD_ID)) {
            $unique_id = $input[self::ARG_THREAD_ID];
            $sub_module_id = \GrnSpaceApplication::GRN_DISCUSSION_SUB_MODULE_ID;
        } elseif (cb_at($input, self::ARG_SPACE_ID)) {
            $unique_id = $input[self::ARG_SPACE_ID];
            $sub_module_id = \GrnSpaceApplication::GRN_SPACE_SUB_MODULE_ID;
        }

        if ($unique_id !== null && $sub_module_id !== null) {
            require_once('grn/notification.csp');
            $notification_service = \GRN_Notification_Service::getInstance();
            $notify_data
                = $notification_service->getNotifyDataProperties($user,
                \GrnSpaceApplication::GRN_SPACE_MODULE_ID, $unique_id,
                $sub_module_id);
            if ( ! is_null($notify_data)
                 && ($notify_data->isStatusUnread()
                     || $notify_data->isStatusUpdated())
            ) {
                $timestamp = new \CB_Timestamp();
                $timestamp->unix_ts = time();
                $b_no_add_history = false;
                $notification_service->confirmNotifyData($user,
                    \GrnSpaceApplication::GRN_SPACE_MODULE_ID, $unique_id,
                    $timestamp, $b_no_add_history,
                    $sub_module_id);
            }
        }

        if ($redirect_to_expired_screen === false) {
            return;
        }

        if ($this instanceof MobileGenericScreenBase) {
            cb_redirect(self::URL_EXPIRED_MOBILE_SCREEN);
        }
        cb_redirect(self::URL_EXPIRED_SCREEN);
    }

    /**
     * @param array $input
     *
     * @throws GrnDataNotFoundException
     */
    private function throwErrorMessage($input)
    {
        $error_code = ErrorCode::GRN_SPACE_EXPIRED;
        if (cb_at($input, self::ARG_FILE_ID)) {
            $error_code = ErrorCode::GRN_FILE_BELONG_TO_EXPIRED_SPACE;
        } elseif (cb_at($input, self::ARG_TODO_ID)) {
            $error_code = ErrorCode::GRN_TODO_BELONG_TO_EXPIRED_SPACE;
        } elseif (cb_at($input, self::ARG_THREAD_ID)) {
            $error_code = ErrorCode::GRN_THREAD_BELONG_TO_EXPIRED_SPACE;
        }

        throw new GrnDataNotFoundException($error_code);
    }

    /**
     * @throws GrnDataNotFoundException
     * @internal param array $input
     * @internal param int $space_id
     *
     */
    public function verifySpaceIsNotExpired()
    {
        if ( ! $this->getRequireSpaceIsNotExpired()
             || ! $this->isAvailableToVerifySpaceIsNotExpired()
        ) {
            return;
        }

        $input = $this->getInput();
        $space_id = $this->getSpaceId();
        if ( ! $space_id) {
            $this->checkArgFromInput([self::ARG_SPACE_ID], $input);
            $space_id = $this->getSpaceId();
        }

        try {
            $space_service = SpaceService::getInstance();
            $space = $space_service->getSpace($space_id,
                $this->getLoginUserId());
        } catch (GrnDataNotFoundException $e) {
            return;
        }

        if ( ! $space->isExpired()) {
            return;
        }

        if (array_key_exists('nid', $input) || array_key_exists('nhid', $input)
            || array_key_exists('fnid', $input)
        ) {
            $this->makeNotificationAsRead($input, true);
        }

        $this->throwErrorMessage($input);
    }
}
