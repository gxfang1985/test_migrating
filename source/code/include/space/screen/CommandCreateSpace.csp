<?php

namespace grn\space\screen;

use grn\space\service\SpaceService;
use grn\space\data\bean\Space;

/**
 * Class CommandCreateSpace
 *
 */
class CommandCreateSpace extends SpaceBase
{
    public function __construct($input)
    {
        parent::__construct($input);

        $this->setRequireSpaceIsNotExpired(false);
    }

    /**
     * @param $notUsed
     *
     * @return Space
     * @throws \grn\space\common\exception\GrnInvalidArgumentException
     */
    public function post($notUsed)
    {
        $input = $this->getInput();
        $this->checkArgFromInput([
            self::ARG_SPACE_CATEGORY_ID,
            self::ARG_SPACE_EXPIRATION_DATE,
        ], $input);
        $this->setSpaceLocalCollectionFromInput($input);
        $this->setIconIdFromInput($input);
        $this->setIsPublicFromInput($input);
        $this->setSpaceUserCollectionFromInput($input);
        $this->setSpaceOperatorCollectionFromInput($input);
        $this->setCommonNameFromInput($input);
        $this->setAllowJoinLeave($input);
        $this->setIsUnlimitedExpirationDate($input);

        if ( ! $this->isUnlimitedExpirationDate()) {
            $this->setExpirationDateTimestamp($input);
        }
        //@todo
        // Check the login user has right to create a new Space in this category, if need.
        // According to the current specification, any user can create a space in any category.

        $spaceService = SpaceService::getInstance();
        $newSpace = new Space();

        $newSpace->setCategoryId($this->getSpaceCategoryId());
        $newSpace->setSpaceName($this->getCommonName());
        $newSpace->isBuiltinIcon(true);
        $newSpace->setBuiltinIconId($this->getIconId());
        $newSpace->setCreator($this->makeLoginUserSpaceMember());
        $newSpace->setCreateTimestamp(time());
        $newSpace->setPublic($this->isPublic());
        $newSpace->setAllowJoinLeave($this->isAllowJoinLeave());

        $newSpace->setIsUnlimitedExpirationDate($this->isUnlimitedExpirationDate());
        if ( ! $newSpace->getIsUnlimitedExpirationDate()) {
            $newSpace->setExpirationDateTimestamp($this->getExpirationDateTimestamp());
            $newSpace->setIsExpirationDateSpecifiedTime($this->getExpirationDateSpecifiedTime());
        }

        return $spaceService->createSpace($newSpace,
            $this->getSpaceLocalCollection(),
            $this->getSpaceUserCollectionFromInput(),
            $this->getSpaceOperatorCollectionFromInput(),
            $this->getLoginUserId(), $this->getLanguageCode());
    }
}
