<?php

namespace grn\space\screen;

use grn\space\service\SpaceService;
use grn\space\service\DiscussionService;
use grn\space\service\TodoService;
use grn\space\common\utility\SpaceFileUtility;
use grn\space\common\data\bean\Authority;
use grn\space\common\data\bean\SpaceFile;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\common\exception\GrnInvalidPermissionException;
use grn\space\common\exception\ErrorCode;

/**
 * Class FileDelete
 *
 */
class FileDelete extends GenericScreenBase
{
    public function fetch()
    {

    }

    /**
     * @param $input
     *
     * @throws GrnDataNotFoundException
     * @throws GrnInvalidPermissionException
     * @throws \Exception
     * @throws \grn\space\common\exception\GrnInvalidArgumentException
     */
    public function post($input)
    {
        $input = $this->getInput();
        $this->checkArgFromInput([
            self::ARG_SPACE_ID,
            self::ARG_THREAD_ID,
            self::ARG_FILE_ID
        ], $input);

        // an exception will be thrown when the login user cannot access the file.
        $spaceFile = $this->getSpaceFile(
            $this->getSpaceId(), $this->getThreadId(), $this->getFileId(),
            $this->getLoginUserId(),
            Authority::AUTHORITY_CODE_WRITE);
        if ( ! ($spaceFile->getCreatorId() == $this->getLoginUserId()
                || $this->isSpaceAdmin(SpaceService::getInstance(),
                $this->getLoginUserId()))
        ) {
            throw new GrnInvalidPermissionException(ErrorCode::GRN_FILE_NO_DELETE_PERMISSION);
        }

        try {
            switch ($spaceFile->getParentApplicationType()) {
                case SpaceFile::PARENT_APPLICATION_TYPE_THREAD:
                    $discussionService = DiscussionService::getInstance();
                    $discussionService->deleteThreadFile($this->getThreadId(),
                        $this->getFileId(),
                        $this->getLoginUser());
                    break;

                case SpaceFile::PARENT_APPLICATION_TYPE_TODO:
                    $todoService = TodoService::getInstance();
                    $todoService->deleteTodoFile($spaceFile->getParentApplicationId(),
                        $this->getFileId(),
                        $this->getLoginUser());
                    break;

                case SpaceFile::PARENT_APPLICATION_TYPE_THREAD_COMMENT:
                    $discussionService = DiscussionService::getInstance();
                    $discussionService->deleteThreadCommentFile($spaceFile->getParentApplicationId(),
                        $this->getFileId(), $this->getLoginUser());
                    break;

                case SpaceFile::PARENT_APPLICATION_TYPE_TODO_COMMENT:
                    $todoService = TodoService::getInstance();
                    $todoService->deleteTodoCommentFile($spaceFile->getParentApplicationId(),
                        $this->getFileId(),
                        $this->getLoginUser());
                    break;
            }
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_FILE_NO_DELETE_PERMISSION);
            throw $e;
        }

        $session = $this->getSession(self::DISCUSSION_SESSION_KEY);
        $session->set(self::ARG_THREAD_ID, $this->getThreadId());
    }
}
