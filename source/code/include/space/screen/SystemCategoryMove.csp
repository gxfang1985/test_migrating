<?php

namespace grn\space\screen;

use grn\space\common\data\bean\Category;
use grn\space\service\SpaceService;
use grn\space\service\SpaceCategorySearch;
use grn\space\common\data\condition\CategorySearchCondition;

/**
 * Class SystemCategoryMove
 *
 */
class SystemCategoryMove
{
    /**
     * @var \grn\space\service\SpaceService
     */
    private $service;

    /**
     * @var String
     */
    private $locale;

    private $operationUserId;

    /**
     * @param                                        $operationUserId
     * @param                                        $locale
     * @param \grn\space\service\SpaceCategorySearch $aService
     */
    public function __construct(
        $operationUserId,
        $locale,
        SpaceCategorySearch $aService
    ) {
        $this->setLocale($locale);
        $this->service = $aService;
        $this->setUserId($operationUserId);
    }

    /**
     * @param $locale
     */
    private function setLocale($locale)
    {
        $this->locale
            = is_null($locale)
            ? \grn\space\common\data\bean\LanguageStatus::STANDARD_LANGUAGE_CODE
            : $locale;
    }

    /**
     * @param $operationUserId
     *
     * @return \grn\space\screen\SystemCategoryMove
     */
    static public function createInstance($operationUserId)
    {
        return new self($operationUserId,
            \CB_I18N::getInstance()->getCurrentLanguage(),
            SpaceService::getInstance());
    }

    /**
     * @param $id
     */
    private function setUserId($id)
    {
        assert(is_numeric($id));
        $this->operationUserId = $id;
    }

    /**
     * @return mixed
     */
    private function getUserId()
    {
        return $this->operationUserId;
    }

    /**
     * @param $categoryId
     *
     * @return \grn\space\common\data\bean\Category
     */
    public function getSpaceCategoryUsingLoginUserLanguage($categoryId)
    {
        return $this->service->getSpaceCategory($categoryId,
            $this->getUserId(),
            $this->locale);
    }

    /**
     * @param \grn\space\common\data\condition\CategorySearchCondition $condition
     *
     * @return \grn\space\common\data\collection\CategoryCollection
     */
    public function searchSpaceCategoryBySearchConditionUsingLoginUserLanguage(
        CategorySearchCondition $condition
    ) {
        return $this->service->searchSpaceCategoryBySearchCondition($condition,
            $this->getUserId(),
            $this->locale);
    }

    /**
     * @param \grn\space\common\data\bean\Category $category
     *
     * @return string
     */
    public function getPath(Category $category)
    {
        $condition = new CategorySearchCondition();
        $condition->setSearchCategoryId($category->getId());
        $condition->setSearchScopeType(CategorySearchCondition::SEARCH_SCOPE_CATEGORY_ANCESTOR);

        $categories
            = $this->searchSpaceCategoryBySearchConditionUsingLoginUserLanguage($condition);
        $path = '';
        /** @var \grn\space\common\data\bean\Category $ancestor */
        foreach ($categories as $ancestor) {
            if (strlen($path) > 0) {
                $path .= " > ";
            }

            $path .= $ancestor->getCategoryName();
        }

        return $path;
    }

    /**
     * $target が $category から見て移動可能なカテゴリかどうかを返す
     *
     * @param Category $category
     * @param Category $target
     *
     * @return bool
     */
    public function isSelectable(Category $category, Category $target)
    {
        $condition = new CategorySearchCondition();
        $condition->setSearchCategoryId($category->getId());
        $condition->setSearchScopeType(CategorySearchCondition::SEARCH_SCOPE_CATEGORY_DESCENDANT);

        $categories
            = $this->searchSpaceCategoryBySearchConditionUsingLoginUserLanguage($condition);
        /** @var \grn\space\common\data\bean\Category $child */
        foreach ($categories as $child) {
            if (strcmp($child->getId(), $target->getId()) == 0) {
                return false;
            }
        }

        return true;
    }

    /**
     * @param $categoryId
     *
     * @return \grn\space\common\data\collection\CategoryCollection
     */
    public function getChildCategoryListUsingLoginUserLanguage($categoryId)
    {
        return $this->service->getChildCategoryList($categoryId, $this->locale);
    }
}
