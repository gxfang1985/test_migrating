<?php

namespace grn\space\screen;

use grn\space\screen\GenericScreenBase;
use grn\space\screen\ControllerUtil;
use grn\space\service\SpaceService;
use grn\space\service\DiscussionService;
use grn\space\service\TodoService;
use grn\space\common\utility\SpaceFileUtility;
use grn\space\common\utility\SpaceDatetimeUtility;
use grn\space\common\data\bean\SpaceFile;
use grn\space\common\data\bean\Authority;
use grn\space\common\exception\ErrorCode;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\common\exception\GrnInvalidPermissionException;
use grn\space\common\exception\GrnInvalidArgumentException;

/**
 * Class FileDetail
 *
 */
class FileDetail extends GenericScreenBase
{
    /**
     * @return mixed|string|void
     * @throws GrnDataNotFoundException
     * @throws GrnInvalidArgumentException
     * @throws GrnInvalidPermissionException
     * @throws \Exception
     */
    public function fetch()
    {
        $input = $this->getInput();
        $this->checkArgFromInput([
            self::ARG_SPACE_ID,
            self::ARG_THREAD_ID,
            self::ARG_FILE_ID,
            self::ARG_FROM
        ], $input);
        $spaceId = $this->getSpaceId();
        $threadId = $this->getThreadId();
        $fileId = $this->getFileId();
        $loginId = $this->getLoginUserId();
        $config = $this->getUserConfig();

        $linkparams = [
            'spid' => $spaceId,
            'tid'  => $threadId,
            'fid'  => $fileId,
            'from' => $this->getFrom()
        ];

        $spaceFile = $this->getSpaceFile($spaceId, $threadId, $fileId, $loginId,
            Authority::AUTHORITY_CODE_READ_DETAIL);
        $fileType = $spaceFile->getParentApplicationType();
        require_once('grn/smarty.csp');
        $smarty = new \GRN_Smarty();
        if ((SpaceFile::PARENT_APPLICATION_TYPE_THREAD_COMMENT == $fileType)
            || (SpaceFile::PARENT_APPLICATION_TYPE_TODO_COMMENT == $fileType)
        ) {
            $service = null;
            $spaceFileView = null;
            if (SpaceFile::PARENT_APPLICATION_TYPE_THREAD_COMMENT
                == $fileType
            ) {
                $service = DiscussionService::getInstance();
                if ($service->hasThreadCommentAccessControl(Authority::AUTHORITY_CODE_READ_DETAIL,
                    $spaceId, $threadId, $spaceFile->getParentApplicationId(),
                    $loginId)
                ) {
                    $spaceFileView
                        = SpaceFileUtility::getSpaceFileView($spaceFile);
                } else {
                    throw new GrnInvalidPermissionException(ErrorCode::GRN_THREAD_NO_ACCESS_PERMISSION);
                }
            } elseif (SpaceFile::PARENT_APPLICATION_TYPE_TODO_COMMENT
                      == $fileType
            ) {
                $service = TodoService::getInstance();
                $todoId
                    = $this->getTodoIdByCommentId($spaceFile->getParentApplicationId(),
                    $loginId);
                if ($service->hasTodoCommentAccessControl(Authority::AUTHORITY_CODE_READ_DETAIL,
                    $spaceId, $threadId, $todoId,
                    $spaceFile->getParentApplicationId(), $loginId)
                ) {
                    $spaceFileView
                        = SpaceFileUtility::getSpaceFileView($spaceFile);
                } else {
                    throw new GrnInvalidPermissionException(ErrorCode::GRN_TODO_NO_ACCESS_PERMISSION);
                }
            }

            $service->addInspectionUserInfo($spaceFile,
                $loginId,
                $this->isSystemUseEnglish(),
                $this->isEnglishDisplayAfterName(),
                $this->isOrganizationDisplayAfterName(),
                $this->getLanguageCode()
            );
            SpaceDatetimeUtility::constructDisplayDatetimeOfInspection($spaceFile,
                $this->getDatetimeFormat(),
                SpaceDatetimeUtility::DISPLAY_TYPE_LONGDATE_AND_TIME,
                $this->getLanguageCode(),
                $this->getTimezoneName()
            );
            $smarty->assign('comment', true);
            $smarty->assign('loginId', $loginId);
            $smarty->assign('file', $spaceFileView);
            $smarty->assign('spaceFile', $spaceFile);
        } elseif ((SpaceFile::PARENT_APPLICATION_TYPE_THREAD == $fileType)
                  || (SpaceFile::PARENT_APPLICATION_TYPE_TODO == $fileType)
        ) {
            $discnOperAuth = null;
            $todoOperAuth = null;
            if (SpaceFile::PARENT_APPLICATION_TYPE_THREAD == $fileType) {
                $smarty->assign('thread', true);
                $discussionService = DiscussionService::getInstance();
                $discnOperAuth
                    = $discussionService->hasThreadAccessControl(Authority::AUTHORITY_CODE_WRITE,
                    $spaceId, $threadId, $loginId);
                $smarty->assign('discnOperAuth', $discnOperAuth);
                unset($discussionService);
            } elseif (SpaceFile::PARENT_APPLICATION_TYPE_TODO == $fileType) {
                $smarty->assign('todo', true);
                $todoService = TodoService::getInstance();
                $todoOperAuth
                    = $todoService->hasTodoAccessControl(Authority::AUTHORITY_CODE_WRITE,
                    $spaceId,
                    $threadId,
                    $spaceFile->getParentApplicationId(),
                    $loginId);
                $smarty->assign('todoOperAuth', $todoOperAuth);
                unset($todoService);
            }
            $utility = new ControllerUtil();
            $logOffset = $utility->getListOffset();
            if (is_null($logLimit = $config->getListMax())) {
                $logLimit = 20;
            }

            $logSortKey = null;
            if (array_key_exists('sort', $input)) {
                $logSortKey = $input['sort'];
            } else {
                $logSortKey = 'td';
            }
            $fileDetail = null;
            if (SpaceFile::PARENT_APPLICATION_TYPE_THREAD == $fileType) {
                $discussionService = DiscussionService::getInstance();
                if ($discussionService->hasThreadAccessControl(Authority::AUTHORITY_CODE_READ_DETAIL,
                    $spaceId, $threadId, $loginId)
                ) {
                    $fileDetail
                        = SpaceFileUtility::getSpaceFileDetailView($spaceFile,
                        $logOffset, $logLimit, $logSortKey);
                } else {
                    throw new GrnInvalidPermissionException(ErrorCode::GRN_THREAD_NO_ACCESS_PERMISSION);
                }
            } elseif (SpaceFile::PARENT_APPLICATION_TYPE_TODO == $fileType) {
                $todoService = TodoService::getInstance();
                if ($todoService->hasTodoAccessControl(Authority::AUTHORITY_CODE_READ_DETAIL,
                    $spaceId, $threadId, $spaceFile->getParentApplicationId(),
                    $loginId)
                ) {
                    $fileDetail
                        = SpaceFileUtility::getSpaceFileDetailView($spaceFile,
                        $logOffset, $logLimit, $logSortKey);
                } else {
                    throw new GrnInvalidPermissionException(ErrorCode::GRN_TODO_NO_ACCESS_PERMISSION);
                }
            }

            $naviparams = [];
            if ($spaceId) {
                $naviparams['spid'] = $spaceId;
            }
            if ($threadId) {
                $naviparams['tid'] = $threadId;
            }
            if ($fileId) {
                $naviparams['fid'] = $fileId;
            }
            if ($logSortKey) {
                $naviparams['sort'] = $logSortKey;
            } else {
                $naviparams['sort'] = 'td';
            }
            $fileDetail['navi']['navi']['params'] = $naviparams;

            if (SpaceFile::PARENT_APPLICATION_TYPE_THREAD == $fileType) {
                $fileDetail['auth']['write'] = $discnOperAuth;
            } elseif (SpaceFile::PARENT_APPLICATION_TYPE_TODO == $fileType) {
                $fileDetail['auth']['write'] = $todoOperAuth;
            }
            $configValues = [
                'subject_width'  => $config->getSubjectWidth(),
                'truncate_width' => $config->getTruncateWidth(),
                'name_width'     => $config->getNameWidth(),
                'inline'         => $config->getInlineSetting()
            ];
            $smarty->assign('file', $fileDetail);
            $smarty->assign('sort', $logSortKey);
            $smarty->assign('config', $configValues);
            $smarty->assign('spid', $spaceId);
            $smarty->assign('tid', $threadId);
        } else {
            throw new GrnInvalidArgumentException(ErrorCode::GRN_INVALID_FILE_ID);
        }
        //delete_info
        $fileView = SpaceFileUtility::getSpaceFileLinkView($spaceFile);
        $todoId = null;
        if (SpaceFile::PARENT_APPLICATION_TYPE_TODO == $fileType) {
            $todoId = $spaceFile->getParentApplicationId();
        } elseif (SpaceFile::PARENT_APPLICATION_TYPE_TODO_COMMENT
                  == $fileType
        ) {
            $todoId
                = $this->getTodoIdByCommentId($spaceFile->getParentApplicationId(),
                $loginId);
        }
        $smarty->assign('from', $this->getFrom());

        $delete_info = [
            'title'      => grn_get_page_display_name('space/file/file_delete'),
            'page'       => 'space/file_delete.tpl',
            'no_confirm' => false,
            'data'       => [
                'title'     => $fileView['name'],
                'space_id'  => $spaceId,
                'thread_id' => $threadId,
                'todo_id'   => $todoId,
                'file_id'   => $fileId,
                'file_type' => $fileType,
                'from'      => $this->getFrom(),
            ],
            'handler'    => 'lnk_delete',
        ];
        $smarty->assign('delete_info', $delete_info);
        //delete_info
        $smarty->assign('linkparams', $linkparams);
        $smarty->assign('title', $this->getTitle());
        $smarty->assign('loginId', $loginId);
        $smarty->assign('hasPrivilege',
            $this->isSpaceAdmin(SpaceService::getInstance(), $loginId));

        return $smarty->fetch('space/file_detail.tpl');
    }

    /**
     * @return array
     * @throws GrnDataNotFoundException
     * @throws GrnInvalidArgumentException
     * @throws \Exception
     */
    public function getSitePosition()
    {
        $input = $this->getInput();
        $this->checkArgFromInput([
            self::ARG_SPACE_ID,
            self::ARG_THREAD_ID,
            self::ARG_FILE_ID,
            self::ARG_FROM
        ], $input);
        $spaceFile = $this->getSpaceFile($this->getSpaceId(),
            $this->getThreadId(), $this->getFileId(), $this->getLoginUserId(),
            Authority::AUTHORITY_CODE_READ_DETAIL);

        if ((SpaceFile::PARENT_APPLICATION_TYPE_THREAD
             == $spaceFile->getParentApplicationType())
            || (SpaceFile::PARENT_APPLICATION_TYPE_THREAD_COMMENT
                == $spaceFile->getParentApplicationType())
        ) {
            return [
                [
                    'page'     => 'space/application/discussion/index',
                    'name'     => grn_get_page_display_name('space/discussion/index'),
                    'spid'     => $this->getSpaceId(),
                    "fragment" => "tid=" . $this->getThreadId(),
                ],
                [
                    'page' => '',
                    'name' => $this->getTitle(),
                ],
            ];
        } elseif (SpaceFile::PARENT_APPLICATION_TYPE_TODO
                  == $spaceFile->getParentApplicationType()
        ) {
            return [
                [
                    'page' => 'space/application/todo/index',
                    'name' => grn_get_page_display_name('space/todo/index'),
                    'spid' => $this->getSpaceId(),
                ],
                [
                    'page' => 'space/application/todo/view',
                    'name' => grn_get_page_display_name('space/todo/todo_detail'),
                    'spid' => $this->getSpaceId(),
                    'tdid' => $spaceFile->getParentApplicationId(),
                    'from' => $this->getFrom(),
                ],
                [
                    'page' => '',
                    'name' => $this->getTitle(),
                ],
            ];
        } elseif (SpaceFile::PARENT_APPLICATION_TYPE_TODO_COMMENT
                  == $spaceFile->getParentApplicationType()
        ) {
            return [
                [
                    'page' => 'space/application/todo/index',
                    'name' => grn_get_page_display_name('space/todo/index'),
                    'spid' => $this->getSpaceId(),
                ],
                [
                    'page' => 'space/application/todo/view',
                    'name' => grn_get_page_display_name('space/todo/todo_detail'),
                    'spid' => $this->getSpaceId(),
                    'tdid' => $this->getTodoIdByCommentId($spaceFile->getParentApplicationId(),
                        $this->getLoginUserId()),
                    'from' => $this->getFrom(),
                ],
                [
                    'page' => '',
                    'name' => $this->getTitle(),
                ],
            ];
        }
    }

    /**
     * @return string
     */
    public function getTitle()
    {
        return grn_get_page_display_name('space/file/file_detail');
    }
}
