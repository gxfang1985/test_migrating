<?php

namespace grn\space\screen;

use grn\space\common\exception\GrnIllegalOperationException;
use grn\space\common\exception\ErrorCode;
use grn\space\service\SpaceService;
use grn\space\common\data\bean\Category;

/**
 * Class SystemDeleteCategory
 *
 */
class SystemDeleteCategory extends GenericScreenBase
{
    const ARG_CATEGORY_ID = "cid";
    const URL_LIST = "space/system/category_list";
    const URL_CATEGORY_VIEW = "space/system/category_view";
    const URL_INDEX = "system/index";
    const SESSION_KEY = "grn.space.create.category_tree";
    const ROOT_CATEGORY_ID = 0;
    const PATH_TEMPLATE_FILE = "space/system/category_delete.tpl";

    private $category;

    /**
     *
     * @param Category $category
     */
    private function setCategory(Category $category)
    {
        $this->category = $category;
    }

    /**
     *
     * @return Category
     */
    private function getCategory()
    {
        return $this->category;
    }

    /**
     * @return mixed|string|void
     * @throws GrnIllegalOperationException
     * @throws \grn\space\common\exception\GrnInvalidArgumentException
     */
    public function fetch()
    {
        $input = $this->getInput();

        $this->checkArgFromInput([self::ARG_SPACE_CATEGORY_ID], $input);

        $spaceService = SpaceService::getInstance();
        $categoryObj
            = $spaceService->getSpaceCategory($this->getSpaceCategoryId(),
            $this->getLoginUserId(), $this->getLanguageCode());
        $this->setCategory($categoryObj);

        //Root category should not be deleted.
        $rootCategory
            = $spaceService->getSpaceRootCategory($this->getLoginUserId());
        if ($categoryObj->getId() == $rootCategory->getId()) {
            throw new GrnIllegalOperationException(ErrorCode::GRN_NO_DELETE_CATEGORY);
        }

        require_once("grn/smarty.csp");
        $smarty = new \GRN_Smarty();
        $smarty->assign("site_position", $this->getSitePosition());
        $smarty->assign("page_title", $this->getTitle());
        $smarty->assign("cid", $categoryObj->getId());
        $smarty->assign("category_name", $categoryObj->getCategoryName());

        return $smarty->fetch(self::PATH_TEMPLATE_FILE);
    }

    /**
     * @return array
     */
    public function getSitePosition()
    {
        return [
            [
                "page"                      => self::URL_LIST,
                "name"                      => grn_get_page_display_name(self::URL_LIST),
                self::ARG_SPACE_CATEGORY_ID => $this->getCategory()->getId(),
            ],
            [
                "page"                      => self::URL_CATEGORY_VIEW,
                "name"                      => grn_get_page_display_name(self::URL_CATEGORY_VIEW),
                self::ARG_SPACE_CATEGORY_ID => $this->getCategory()->getId(),
            ],

            [
                "name" => cb_msg('grn.space.system', 'category_delete')
            ]
        ];
    }

    /**
     * @return string
     */
    public function getTitle()
    {
        return cb_msg('grn.space.system', 'category_delete');
    }

    /**
     * @return mixed
     */
    public function getInput()
    {
        return $this->input;
    }

    /**
     * @param $input
     */
    public function setInput($input)
    {
        $this->input = $input;
    }
}
