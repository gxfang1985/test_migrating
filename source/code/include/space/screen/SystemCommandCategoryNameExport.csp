<?php

namespace grn\space\screen;

use grn\space\service\SpaceService;
use grn\space\common\exception\GrnRequiredDataIsNotException;
use grn\space\common\exception\ErrorCode;
use grn\space\common\exception\GrnInvalidArgumentException;

/**
 * Class SystemCommandCategoryNameExport
 *
 */
class SystemCommandCategoryNameExport extends GenericScreenBase
{
    /**
     * @param $input
     *
     * @return string
     * @throws GrnRequiredDataIsNotException
     */
    public function post($input)
    {
        //open temporary file
        $tempFileName = tempnam(cb_tmpdir(), "space_");
        require_once('fw/csv.csp');
        $csvWriter = new \CB_CSVWriter($this->getCharset(), $tempFileName);

        //write item name
        if ($this->isNeedItemName()) {
            require_once("fw/i18n.csp");

            $csvWriter->writeLine([
                cb_msg('grn.space.system', 'category_csv_code'),
                cb_msg('grn.space.system', 'category_csv_language_code'),
                cb_msg('grn.space.system', 'category_csv_name'),
            ]);
        }

        //Get data
        $spaceService = SpaceService::getInstance();
        $categoryLocalCollection
            = $spaceService->getSpaceCategoryLocalCollectionForCSV($this->getLoginUserId(),
            $this->getCSVLanguageCodeArray());

        // Write data
        /** @var \grn\space\common\data\bean\CategoryLocal $eachCategoryLocal */
        foreach ($categoryLocalCollection as $eachCategoryLocal) {
            $csvWriter->writeLine([
                $eachCategoryLocal->getCategoryCode(),
                $eachCategoryLocal->getLanguageCode(),
                $eachCategoryLocal->getCategoryname(),
            ]);
        }
        // close temporary file
        $csvWriter->close();

        cb_prepare_download('category_name.csv', 'application/csv', false);
        $fp = fopen($tempFileName, 'rb');

        $retData = "";
        if (($fileSize = filesize($tempFileName)) > 0) {
            $retData = fread($fp, $fileSize);
        }
        fclose($fp);

        unlink($tempFileName);

        return $retData;

    }

    /**
     * 書き出す文字Codeを取得する
     *
     * @return string
     */
    private function getCharset()
    {
        $input = $this->getInput();

        $charset = @$input['charset'];
        if ( ! $charset) {
            global $G_config_common;
            $charset = $G_config_common->get('I18N',
                'default_external_encoding');
        }

        return $charset;
    }

    /**
     * 先頭に項目名を書き出すか
     *
     * @return boolean
     */
    private function isNeedItemName()
    {
        $input = $this->getInput();

        return @$input["item_name"] == true;
    }

    /**
     * 書き出す言語の配列
     *
     * @return array<string>
     * @throws GrnRequiredDataIsNotException 言語が何も選択されていなかった時
     */
    private function getCSVLanguageCodeArray()
    {
        $input = $this->getInput();

        $i18n = \CB_I18N::getInstance();
        $availableLanguageArray = $i18n->getAvailableLanguages();

        $resultArray = [];

        if (array_key_exists("all", $input)) {
            $resultArray = $availableLanguageArray;
        } else {
            foreach ($availableLanguageArray as $eachLanguage) {
                if (array_key_exists($eachLanguage, $input)) {
                    $resultArray[] = $eachLanguage;
                }
            }
        }
        if (count($resultArray) <= 0) {
            throw new GrnRequiredDataIsNotException(ErrorCode::GRN_LANGUAGE_NOT_SELECTED);
        }

        return $resultArray;
    }
}
