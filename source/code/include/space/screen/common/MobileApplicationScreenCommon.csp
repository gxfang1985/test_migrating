<?php

namespace grn\space\screen\common;

use grn\grn\mobile\MobileScreenCommon;
use grn\space\common\data\bean\Authority;
use grn\space\common\exception\ErrorCode;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\common\exception\GrnInvalidArgumentException;
use grn\space\common\utility\ValidateUtility;
use grn\space\logic\SpaceLogic;
use grn\space\screen\mobile\MobileGenericScreenBase;
use grn\space\service\SpaceService;

/**
 * Class MobileApplicationScreenCommon
 *
 */
class MobileApplicationScreenCommon extends MobileScreenCommon
{
    private $space;

    /**
     * @param \grn\space\screen\GenericScreenBase $main_screen Main screen object
     */
    public function __construct($main_screen)
    {
        parent::__construct($main_screen);

        $main_screen->verifySpaceIsNotExpired();
    }

    /**
     * Override GrnScreenCommon::extendFetch
     *
     * @param \GRN_Smarty $smarty
     *
     * @throws GrnDataNotFoundException
     * @throws GrnInvalidArgumentException
     */
    protected function extendFetch($smarty)
    {
        parent::extendFetch($smarty);

        $input = $this->getMainScreen()->getInput();

        $parameter = [MobileGenericScreenBase::ARG_SPACE_ID];

        $login_user = cb_get_login_user();
        $login_id = $login_user->getOID();
        $space_service = SpaceService::getInstance();

        try {
            require_once("fw/i18n.csp");
            $i18n = \CB_I18N::getInstance();
            $language_code = $i18n->getCurrentLanguage();

            $space = null;
            if (cb_at($input, MobileGenericScreenBase::ARG_THREAD_ID)) {
                $spaceLogic = SpaceLogic::getInstance();
                $space
                    = $spaceLogic->getSpaceByThreadId($input[MobileGenericScreenBase::ARG_THREAD_ID],
                    $language_code, true);
                if ($space) {
                    $this->setSpace($space);
                }
            } elseif (cb_at($input, MobileGenericScreenBase::ARG_TODO_ID)) {
                $spaceLogic = SpaceLogic::getInstance();
                $space
                    = $spaceLogic->getSpaceByTodoId($input[MobileGenericScreenBase::ARG_TODO_ID],
                    $language_code, true);
                if ($space) {
                    $this->setSpace($space);
                }
            }
            if (is_null($space)) {
                if (ValidateUtility::isNumber(@$input[MobileGenericScreenBase::ARG_SPACE_ID],
                    ValidateUtility::DISABLE_EMPTY,
                    ValidateUtility::EXCEPTION_NOT_THROW)
                ) {
                    $space_id = $input[MobileGenericScreenBase::ARG_SPACE_ID];
                } else {
                    throw new GrnInvalidArgumentException(ErrorCode::GRN_SPACE_ID_IS_NOT_FOUND);
                }
                $space = $space_service->getSpace($space_id, $login_id,
                    $language_code);
                $this->setSpace($space);
            }
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_INVALID_SPACE_ID);
            throw $e;
        }

        $space_id = $space->getId();

        if ( ! $space_service->hasSpaceAccessControl(Authority::AUTHORITY_CODE_READ_DETAIL,
            $space_id, $login_id)
        ) {
            throw new GrnDataNotFoundException(ErrorCode::GRN_INVALID_SPACE_ID);
        }

        if ($space_service->isNotConfirmedSpaceNotification($login_id,
            $space_id)
        ) {
            $space_service->confirmSpaceNotification($login_id, $space);
        }
    }

    /**
     * @return \grn\space\data\bean\Space
     */
    public function getSpace()
    {
        return $this->space;
    }

    /**
     * @param $space
     */
    private function setSpace($space)
    {
        $this->space = $space;
    }

    /**
     * If the result from main screen is NULL, it will return the space name.
     *
     * @return string
     */
    public function getTitle()
    {
        $title = $this->getMainScreen()->getTitle();
        if (ValidateUtility::isNull($title)) {
            $title = $this->getSpace()->getSpaceName();
        } else {
            $title = $this->getSpace()->getSpaceName() . ' - ' . $title;
        }

        return $title;
    }
}
