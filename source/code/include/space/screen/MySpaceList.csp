<?php

namespace grn\space\screen;

use grn\space\utility\SpaceUtility;

use grn\space\common\utility\IconUtility;

use grn\space\common\data\bean\Authority;
use grn\space\common\utility\SpaceDatetimeUtility;
use grn\space\screen\GenericScreenBase;
use grn\space\data\collection\SpaceCollection;
use grn\space\common\data\bean\DatetimeFormat;
use grn\space\data\condition\SpaceSearchCondition;
use grn\space\service\SpaceService;
use grn\space\common\exception\GrnException;
use grn\space\common\utility\SpaceMemberUtility;

/**
 * Class MySpaceList
 *
 */
class MySpaceList extends GenericScreenBase
{
    const ARG_EXPIRATION_TYPE = "expiration_type";
    const ARG_OFFSET = "sp";
    const PATH_TEMPLATE_FILE = "space/my_space_list.tpl";
    const PAGE_NAME = "space/index";

    private $offset;
    private $spaceCollection;

    /**
     * @return mixed|string|void
     */
    public function fetch()
    {
        require_once("grn/smarty.csp");
        $smarty = new \GRN_Smarty();

        $input = $this->getInput();
        $this->setOffsetFromInput($input);

        $spaceService = SpaceService::getInstance();

        $spaceSearchCondition = new SpaceSearchCondition();
        $spaceSearchCondition->setSearchParticipantUserId($this->getLoginUserId());
        $spaceSearchCondition->setSearchParticipantGroupIds(SpaceMemberUtility::getLoginUserGroupIds());
        $spaceSearchCondition->setSearchParticipantRoleIds(SpaceMemberUtility::getLoginUserRoleIds());
        $spaceSearchCondition->setOrderSortArray([
            SpaceSearchCondition::SORT_COMPONENT_MODIFY_TIME_DESC,
            SpaceSearchCondition::SORT_ID_DESC
        ]);
        $spaceSearchCondition->setOffset($this->getOffset());
        $spaceSearchCondition->setLimit($this->getUserConfig()->getListMax()
                                        + 1);
        $spaceSearchCondition->setLanguageCode($this->getLanguageCode());
        $spaceSearchCondition->setCalcFoundRows(false);

        $expiration_type = $input[self::ARG_EXPIRATION_TYPE] ?? true;
        $expiration_type = (bool)$expiration_type;
        if ($expiration_type) {
            $spaceSearchCondition->setSearchSpaceExpirationDate(SpaceSearchCondition::SEARCH_SPACE_NOT_EXPIRED);
            $space_detail_url = 'space/top';
        } else {
            $spaceSearchCondition->setSearchSpaceExpirationDate(SpaceSearchCondition::SEARCH_SPACE_EXPIRED);
            $space_detail_url = 'space/config_view';
        }

        $smarty->assign('expiration_type', $expiration_type);
        $smarty->assign('space_detail_url', $space_detail_url);

        $spaceCollection
            = $spaceService->searchSpaceBySearchConditionWithAccessControl(
            Authority::AUTHORITY_CODE_READ_SUMMARY, $spaceSearchCondition,
            $this->getLoginUserId(), SpaceService::CATEGORY_NAME_IS_NECESSARY);
        $isExistsNextPage = ($spaceCollection->count() > $this->getUserConfig()
                                                              ->getListMax());
        if ($isExistsNextPage) {
            $spaceCollection->remove($this->getUserConfig()->getListMax());
        }

        SpaceDatetimeUtility::constructionComponentInspectionDisplayDatetime(
            $spaceCollection, $this->getDatetimeFormat(),
            SpaceDatetimeUtility::DISPLAY_TYPE_DYNAMIC_IS_NOW_TIME,
            $this->getLanguageCode(), $this->getTimezoneName());
        IconUtility::constructionSpaceCollectionIconPath($spaceCollection);
        SpaceUtility::truncateSpaceUsingUserConfig($spaceCollection,
            $this->getLoginUser());

        $this->setSpaceCollection($spaceCollection);

        // Make page navi
        $controllerUtil = new \GRN_ControllerUtil();
        $offset = $this->getOffset();
        $limit = $this->getUserConfig()->getListMax();
        $pageNavi = $controllerUtil->makeSimpleNaviInformation($offset,
            $limit, $spaceCollection->count(), $isExistsNextPage,
            [self::ARG_EXPIRATION_TYPE => $expiration_type]);
        $smarty->assign("navi", $pageNavi);

        $smarty->assign("this", $this);

        return $smarty->fetch(self::PATH_TEMPLATE_FILE);
    }

    /**
     * @return array
     */
    public function getSitePosition()
    {
        return [
            [
                "name" => grn_get_page_display_name(self::PAGE_NAME),
            ]
        ];
    }

    /**
     * @return string
     */
    public function getTitle()
    {
        return grn_get_page_display_name(self::PAGE_NAME);
    }

    /**
     * @return mixed
     */
    private function getOffset()
    {
        return $this->offset;
    }

    /**
     * @param $input
     */
    private function setOffsetFromInput($input)
    {
        if (array_key_exists(self::ARG_OFFSET, $input)
            && is_numeric($input[self::ARG_OFFSET])
        ) {
            $this->offset = (int)$input[self::ARG_OFFSET];
        } else {
            $this->offset = 0;
        }
    }

    /**
     * Get Space list as an array
     *
     * @return array<Space>
     */
    public function getSpaceListArray()
    {
        $result = [];
        $spaceCollection = $this->getSpaceCollection();

        for ($i = 0; $i < $spaceCollection->count(); $i++) {
            $result[] = $spaceCollection->getBean($i);
        }

        return $result;
    }

    /**
     *
     * @return SpaceCollection
     */
    private function getSpaceCollection()
    {
        return $this->spaceCollection;
    }

    /**
     * Set my Space collection
     *
     * @param SpaceCollection $spaceCollection
     */
    private function setSpaceCollection(SpaceCollection $spaceCollection)
    {
        $this->spaceCollection = $spaceCollection;
    }

    /**
     *
     * @return string
     */
    public function getSearchRange()
    {
        return parent::SEARCH_MY;
    }
}
