<?php

namespace grn\space\screen;

use grn\space\screen\GenericScreenBase;
use grn\space\service\DiscussionService;
use grn\space\service\TodoService;
use grn\space\common\utility\ValidateUtility;
use grn\space\common\data\bean\Authority;
use grn\space\common\data\bean\SpaceFile;
use grn\space\common\exception\ErrorCode;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\common\exception\GrnInvalidPermissionException;
use grn\space\common\exception\GrnInvalidArgumentException;
use grn\space\common\exception\GrnIllegalOperationException;

/**
 * Class FileRestore
 *
 */
class FileRestore extends GenericScreenBase
{
    /**
     * @return mixed|string|void
     * @throws GrnDataNotFoundException
     * @throws GrnIllegalOperationException
     * @throws GrnInvalidArgumentException
     * @throws GrnInvalidPermissionException
     * @throws \Exception
     */
    public function fetch()
    {
        $input = $this->getInput();
        $this->checkArgFromInput([
            self::ARG_SPACE_ID,
            self::ARG_THREAD_ID,
            self::ARG_FILE_ID,
            self::ARG_FROM
        ], $input);
        $spaceId = $this->getSpaceId();
        $threadId = $this->getThreadId();
        $fileId = $this->getFileId();
        $loginId = $this->getLoginUserId();
        $linkparams = [
            'spid' => $spaceId,
            'tid'  => $threadId,
            'fid'  => $fileId
        ];
        if ( ! ValidateUtility::isNumber($input['ver'],
            ValidateUtility::DISABLE_EMPTY,
            ValidateUtility::EXCEPTION_NOT_THROW)
        ) {
            throw new GrnInvalidArgumentException(ErrorCode::GRN_INVALID_FILE_LOG_ID);
        }

        $tmpSpaceFile = $this->getSpaceFile($this->getSpaceId(),
            $this->getThreadId(), $this->getFileId(), $this->getLoginUserId(),
            Authority::AUTHORITY_CODE_WRITE);
        $spaceFile = null;
        if (SpaceFile::PARENT_APPLICATION_TYPE_THREAD
            == $tmpSpaceFile->getParentApplicationType()
        ) {
            $discussionService = DiscussionService::getInstance();
            if ($discussionService->hasThreadAccessControl(Authority::AUTHORITY_CODE_WRITE,
                $spaceId, $threadId, $loginId)
            ) {
                $spaceFile = $tmpSpaceFile;
            } else {
                throw new GrnInvalidPermissionException(ErrorCode::GRN_FILE_NO_MODIFY_PERMISSION);
            }
            unset($tmpSpaceFile);
        } elseif (SpaceFile::PARENT_APPLICATION_TYPE_TODO
                  == $tmpSpaceFile->getParentApplicationType()
        ) {
            $todoService = TodoService::getInstance();
            $todoId = $tmpSpaceFile->getParentApplicationId();
            if ($todoService->hasTodoAccessControl(Authority::AUTHORITY_CODE_WRITE,
                $spaceId, $threadId, $todoId, $loginId)
            ) {
                $spaceFile = $tmpSpaceFile;
            } else {
                throw new GrnInvalidPermissionException(ErrorCode::GRN_FILE_NO_MODIFY_PERMISSION);
            }
            unset($tmpSpaceFile);
        } else {
            throw new GrnIllegalOperationException(ErrorCode::GRN_INVALID_FILE_TYPE);
        }
        $fileType = $spaceFile->getParentApplicationType();
        require_once('grn/controller.csp');
        $controller = new \GRN_ControllerUtil();
        $rstFile
            = $controller->getFileRestoreView($spaceFile->getGrnSpaceFileObject(),
            $input['ver']);
        if ( ! $rstFile) {
            throw new GrnInvalidArgumentException(ErrorCode::GRN_INVALID_FILE_LOG_ID);
        }
        require_once('grn/smarty.csp');
        $smarty = new \GRN_Smarty();
        $smarty->assign('space_id', $spaceId);
        $smarty->assign('thread_id', $threadId);
        $smarty->assign('file_id', $fileId);
        $smarty->assign('linkparams', $linkparams);
        $smarty->assign('from', $this->getFrom());
        $smarty->assign('file_type', $fileType);
        $smarty->assign('restore', $rstFile);

        return $smarty->fetch('space/file_restore.tpl');
    }

    /**
     * @param $input
     *
     * @throws GrnDataNotFoundException
     * @throws GrnIllegalOperationException
     * @throws GrnInvalidArgumentException
     * @throws GrnInvalidPermissionException
     * @throws \Exception
     */
    public function post($input)
    {
        $this->setInput($input);
        $this->checkArgFromInput([
            self::ARG_SPACE_ID,
            self::ARG_THREAD_ID,
            self::ARG_FILE_ID
        ], $input);
        $spaceId = $this->getSpaceId();
        $threadId = $this->getThreadId();
        $fileId = $this->getFileId();
        $loginId = $this->getLoginUserId();
        if ( ! ValidateUtility::isNumber($input['ver'],
            ValidateUtility::DISABLE_EMPTY,
            ValidateUtility::EXCEPTION_NOT_THROW)
        ) {
            throw new GrnInvalidArgumentException(ErrorCode::GRN_INVALID_FILE_LOG_ID);
        }
        $comment = @ $input['comment'];

        $spaceFile = $this->getSpaceFile($this->getSpaceId(),
            $this->getThreadId(), $this->getFileId(), $this->getLoginUserId(),
            Authority::AUTHORITY_CODE_WRITE);
        $fileType = $spaceFile->getParentApplicationType();

        if (SpaceFile::PARENT_APPLICATION_TYPE_THREAD == $fileType) {
            $discussionService = DiscussionService::getInstance();
            if ($discussionService->hasThreadAccessControl(Authority::AUTHORITY_CODE_WRITE,
                $spaceId, $threadId, $loginId)
            ) {
                try {
                    $discussionService->restoreSpaceFile($this->getLoginUser(),
                        $input['ver'], $comment, $fileId, $spaceId, $threadId,
                        null);
                } catch (GrnDataNotFoundException $e) {
                    $e->setErrorCode(ErrorCode::GRN_INVALID_FILE_ID);
                    throw $e;
                }

            } else {
                throw new GrnInvalidPermissionException(ErrorCode::GRN_FILE_NO_MODIFY_PERMISSION);
            }
        } elseif (SpaceFile::PARENT_APPLICATION_TYPE_TODO == $fileType) {
            $todoService = TodoService::getInstance();
            $todoId = $spaceFile->getParentApplicationId();
            if ($todoService->hasTodoAccessControl(Authority::AUTHORITY_CODE_WRITE,
                $spaceId, $threadId, $todoId, $loginId)
            ) {
                try {
                    $todoService->restoreSpaceFile($this->getLoginUser(),
                        $input['ver'], $comment, $fileId, $spaceId, $threadId,
                        $todoId);
                } catch (GrnDataNotFoundException $e) {
                    $e->setErrorCode(ErrorCode::GRN_INVALID_FILE_ID);
                    throw $e;
                }
            } else {
                throw new GrnInvalidPermissionException(ErrorCode::GRN_FILE_NO_MODIFY_PERMISSION);
            }
        } else {
            throw new GrnIllegalOperationException(ErrorCode::GRN_INVALID_FILE_TYPE);
        }
    }

    /**
     * @return array
     * @throws GrnDataNotFoundException
     * @throws GrnIllegalOperationException
     * @throws GrnInvalidArgumentException
     * @throws GrnInvalidPermissionException
     * @throws \Exception
     */
    public function getSitePosition()
    {
        $input = $this->getInput();
        $this->checkArgFromInput([
            self::ARG_SPACE_ID,
            self::ARG_THREAD_ID,
            self::ARG_FILE_ID,
            self::ARG_FROM
        ], $input);
        $spaceId = $this->getSpaceId();
        $threadId = $this->getThreadId();
        $fileId = $this->getFileId();
        $loginId = $this->getLoginUserId();

        $tmpSpaceFile = $this->getSpaceFile($this->getSpaceId(),
            $this->getThreadId(), $this->getFileId(), $this->getLoginUserId(),
            Authority::AUTHORITY_CODE_WRITE);
        $spaceFile = null;
        if (SpaceFile::PARENT_APPLICATION_TYPE_THREAD
            == $tmpSpaceFile->getParentApplicationType()
        ) {
            $discussionService = DiscussionService::getInstance();
            if ($discussionService->hasThreadAccessControl(Authority::AUTHORITY_CODE_WRITE,
                $spaceId, $threadId, $loginId)
            ) {
                $spaceFile = $tmpSpaceFile;
            } else {
                throw new GrnInvalidPermissionException(ErrorCode::GRN_FILE_NO_MODIFY_PERMISSION);
            }
            unset($tmpSpaceFile);
        } elseif (SpaceFile::PARENT_APPLICATION_TYPE_TODO
                  == $tmpSpaceFile->getParentApplicationType()
        ) {
            $todoService = TodoService::getInstance();
            $todoId = $tmpSpaceFile->getParentApplicationId();
            if ($todoService->hasTodoAccessControl(Authority::AUTHORITY_CODE_WRITE,
                $spaceId, $threadId, $todoId, $loginId)
            ) {
                $spaceFile = $tmpSpaceFile;
            } else {
                throw new GrnInvalidPermissionException(ErrorCode::GRN_FILE_NO_MODIFY_PERMISSION);
            }
            unset($tmpSpaceFile);
        } else {
            throw new GrnIllegalOperationException(ErrorCode::GRN_INVALID_FILE_TYPE);
        }

        $fileType = $spaceFile->getParentApplicationType();
        if (SpaceFile::PARENT_APPLICATION_TYPE_THREAD == $fileType) {
            return [
                [
                    'page'     => 'space/application/discussion/index',
                    'name'     => grn_get_page_display_name('space/discussion/index'),
                    'spid'     => $spaceId,
                    "fragment" => "tid=" . $threadId,
                ],
                [
                    'page' => 'space/application/discussion/file_view',
                    'name' => grn_get_page_display_name('space/file/file_detail'),
                    'fid'  => $fileId,
                    'tid'  => $threadId,
                    'spid' => $spaceId,
                ],
                [
                    'page' => '',
                    'name' => $this->getTitle(),
                ],
            ];
        } elseif (SpaceFile::PARENT_APPLICATION_TYPE_TODO == $fileType) {
            return [
                [
                    'page' => 'space/application/todo/index',
                    'name' => grn_get_page_display_name('space/todo/index'),
                    'spid' => $spaceId,
                ],
                [
                    'page' => 'space/application/todo/view',
                    'name' => grn_get_page_display_name('space/todo/todo_detail'),
                    'spid' => $spaceId,
                    'tdid' => $spaceFile->getParentApplicationId(),
                    'from' => $this->getFrom(),
                ],
                [
                    'page' => 'space/application/todo/file_view',
                    'name' => grn_get_page_display_name('space/file/file_detail'),
                    'fid'  => $fileId,
                    'spid' => $spaceId,
                    'tid'  => $threadId,
                    'from' => $this->getFrom(),
                ],
                [
                    'page' => '',
                    'name' => $this->getTitle(),
                ],
            ];
        }
    }

    /**
     * @return string
     */
    public function getTitle()
    {
        return grn_get_page_display_name('space/file/file_restore');
    }
}
