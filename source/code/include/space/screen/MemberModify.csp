<?php

namespace grn\space\screen;

use grn\space\data\bean\SpaceUser;
use grn\space\data\collection\SpaceUserCollection;
use grn\space\common\data\bean\Authority;
use grn\space\data\bean\Space;
use grn\space\common\utility\IconUtility;
use grn\space\common\exception\ErrorCode;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\service\SpaceService;
use grn\space\screen\GenericScreenBase;

/**
 * Class MemberModify
 *
 */
class MemberModify extends SpaceBase
{
    const URL_MEMBER_MODIFY = "space/member_modify";

    /**
     * @return mixed|string|void
     * @throws GrnDataNotFoundException
     */
    public function fetch()
    {
        $spaceService = SpaceService::getInstance();
        if ( ! $this->isSpaceAdminOrOperator($spaceService,
            $this->getSpace()->getId(), $this->getLoginUserId())
        ) {
            throw new GrnDataNotFoundException(ErrorCode::GRN_INVALID_SPACE_ID);
        }
        $spaceUserCollection
            = $spaceService->getSpaceUserCollection($this->getSpace()->getId(),
            $this->getLoginUserId());
        $spaceService->addUserInfo(
            $spaceUserCollection,
            $this->getLoginUserId(),
            $this->isSystemUseEnglish(),
            $this->isEnglishDisplayAfterName(),
            $this->isOrganizationDisplayAfterName(),
            $this->getLanguageCode());
        $this->setSelectedUserArray($this->getDisplayInfoByUserCollection($spaceUserCollection));

        $spaceManagerCollection = new SpaceUserCollection();
        $operatorCollection
            = $spaceService->getSpaceUserCollectionAccordingToAuthorityCode($spaceUserCollection,
            Authority::AUTHORITY_CODE_OPERATION_PRIVILEGE, $this->getSpaceId());
        $this->setOpenStatus($operatorCollection->count() > 0);
        $this->setSelectedOperatorArray($this->getDisplayInfoByUserCollection($operatorCollection));

        require_once("grn/smarty.csp");
        $t = new \GRN_Smarty();
        $t->assign('this', $this);
        $t->assign('open_status', $this->getOpenStatus());
        $t->assign("form_name", cb_get_pagename());
        $t->assign("page_title",
            grn_get_page_display_name(self::URL_MEMBER_MODIFY));

        $t->assign('plugin', [
            'name'   => 'common',
            'params' => [
                'action'       => null,
                'session_name' => cb_get_pagename(),
                'app_id'       => 'space'
            ]
        ]);

        return $t->fetch('space/member_modify.tpl');
    }

    /**
     * @param $input
     *
     * @throws GrnDataNotFoundException
     * @throws \Exception
     * @throws \grn\space\common\exception\GrnInvalidArgumentException
     */
    public function post($input)
    {
        $input = $this->getInput();
        $this->checkArgFromInput([self::ARG_SPACE_ID], $input);
        $this->setSpaceUserCollectionFromInput($input);
        $this->setSpaceOperatorCollectionFromInput($input);
        $spaceService = SpaceService::getInstance();
        try {
            if ( ! $this->isSpaceAdminOrOperator($spaceService,
                $this->getSpace()->getId(), $this->getLoginUserId())
            ) {
                throw new GrnDataNotFoundException(ErrorCode::GRN_INVALID_SPACE_ID);
            }
            $space = $spaceService->getSpace($this->getSpaceId(),
                $this->getLoginUserId());
            $spaceService->modifySpaceUser($space,
                $this->getSpaceUserCollectionFromInput(),
                $this->getSpaceOperatorCollectionFromInput(),
                $this->getLoginUserId(), $this->getLanguageCode());
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_INVALID_SPACE_ID);
            throw $e;
        }
    }

    /**
     * @param $input
     *
     * @throws GrnDataNotFoundException
     * @throws \Exception
     * @throws \grn\space\common\exception\GrnInvalidArgumentException
     */
    protected function setInput($input)
    {
        parent::setInput($input);
        $this->checkArgFromInput([self::ARG_SPACE_ID], $input);
        $this->setFrom(array_key_exists(self::ARG_FROM, $input)
                       && $input[self::ARG_FROM] == self::ARG_FROM_PARAM ?
            $this->_from = $input[self::ARG_FROM] : '');
        $spaceService = SpaceService::getInstance();
        try {
            $space = $spaceService->getSpace($this->getSpaceId(),
                $this->getLoginUserId(), $this->getLanguageCode());
            global $G_config_common;
            IconUtility::constructionSpaceIconPath($space,
                $G_config_common->get('Global', 'app_path'));
            $this->setSpace($space);
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_INVALID_SPACE_ID);
            throw $e;
        }
    }

    /**
     * @return array
     */
    public function getSitePosition()
    {
        $sitePosition = $this->createCategorySitePosition($this->getSpace()
                                                               ->getCategoryId());
        $sitePosition[] = [
            "name"     => $this->getSpace()->getSpaceName(),
            "page"     => self::URL_TOP,
            "spid"     => $this->getSpaceId(),
            "icon"     => [
                "image"  => $this->getSpace()->getDisplayIconPath(),
                "direct" => true,
                "class"  => "breadcrumb-icon",
            ],
            "isHidden" => ! $this->getSpace()->isPublic(),
        ];
        if ( ! $this->getFrom()) {
            $sitePosition[] = [
                "name" => grn_get_page_display_name(self::URL_CONFIG_VIEW),
                "page" => self::URL_CONFIG_VIEW,
                "spid" => $this->getSpaceId(),
            ];
        }
        $sitePosition[] = [
            "name" => grn_get_page_display_name(self::URL_MEMBER_MODIFY),
        ];

        return $sitePosition;
    }

    /**
     * @return string
     */
    public function getTitle()
    {
        return grn_get_page_display_name(self::URL_MEMBER_MODIFY);
    }
}
