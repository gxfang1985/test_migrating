<?php

namespace grn\space\screen\application\discussion;

use grn\space\service\SpaceService;
use grn\space\data\bean\Thread;
use grn\space\screen\GenericScreenBase;
use grn\space\service\DiscussionService;
use grn\space\common\data\bean\Authority;
use grn\space\common\data\bean\Application;
use grn\space\data\condition\ThreadSearchCondition;
use grn\space\common\exception\GrnInvalidPermissionException;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\common\exception\ErrorCode;

/**
 * Class DiscussionBase
 */
class DiscussionBase extends GenericScreenBase
{
    const ARG_KEY = 'key';
    const SUBSCRIBE_ACTION = 1;
    const UNSUBSCRIBE_ACTION = 0;
    const SUBSCRIBE_STATUS = 'subscribe';
    const UNSUBSCRIBE_STATUS = 'unsubscribe';

    /**
     * @throws GrnDataNotFoundException         space_id is not found
     * @throws GrnInvalidPermissionException    don't have permission to read the space
     * @return Thread ID
     */
    public function getSystemThreadId()
    {
        $input = $this->getInput();
        $login_id = $this->getLoginUserId();
        $this->checkArgFromInput([self::ARG_SPACE_ID], $input);
        $space_id = $this->getSpaceId();

        $discussion_service = DiscussionService::getInstance();
        $thread_root_category
            = $discussion_service->getApplicationRootCategory($space_id,
            Application::APPLICATION_CODE_DISCUSSION, $this->getLanguageCode());
        $is_authority
            = $discussion_service->hasThreadCategoryAccessControl(Authority::AUTHORITY_CODE_READ_DETAIL,
            $space_id, $thread_root_category->getId(), $login_id);

        if ($is_authority) {
            $search_condition = new ThreadSearchCondition();
            $search_condition->setSearchCategoryId($thread_root_category->getId());
            $search_condition->setOrderSortArray([ThreadSearchCondition::SORT_TITLE_ASC]);
            $thread_collection
                = $discussion_service->searchThreadBySearchConditionWithAccessControl(Authority::AUTHORITY_CODE_READ_DETAIL,
                $search_condition, $login_id);
        } else {
            throw new GrnInvalidPermissionException(ErrorCode::GRN_THREAD_NO_ACCESS_PERMISSION);
        }

        foreach ($thread_collection as $thread) {
            /** @var \grn\space\data\bean\Thread $thread */
            if ($thread->isSystemUse()) {
                return $thread->getId();
            }
        }

        return $thread_collection->getBean(0)->getId();
    }

    /**
     * Check the discussion can be deleted or not.
     *
     * @param Thread       $discussion
     * @param SpaceService $spaceService
     * @param bool         $discussionWriteAuthority
     * @param string       $spaceId
     * @param string       $operationUserId
     *
     * @return bool
     */
    public function discussionDeletable(
        Thread $discussion,
        SpaceService $spaceService,
        $discussionWriteAuthority,
        $spaceId,
        $operationUserId
    ) {
        return ! $discussion->isSystemUse()
               && (($operationUserId == $discussion->getCreatorId()
                    && $discussionWriteAuthority)
                   || $this->isSpaceAdminOrOperator($spaceService, $spaceId,
                    $operationUserId));
    }
}
