<?php

namespace grn\space\screen\application\discussion;

use grn\space\data\bean\Folder;
use grn\space\data\bean\Space;
use grn\space\data\condition\FolderSearchCondition;
use grn\space\service\SpaceService;
use grn\space\screen\application\discussion\DiscussionBase;
use grn\space\service\DiscussionService;
use grn\space\common\data\bean\Authority;
use grn\space\common\data\bean\Application;
use grn\space\common\exception\GrnInvalidArgumentException;
use grn\space\common\exception\GrnInvalidPermissionException;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\common\exception\GrnRequiredDataIsNotException;
use grn\space\common\exception\GrnArgumentOutOfRangeException;
use grn\space\common\exception\ErrorCode;
use grn\space\data\bean\Thread;

/**
 * Class DiscussionAdd
 */
class DiscussionAdd extends DiscussionBase
{
    /**
     * Return raw HTML which will be used without being escaped.
     *
     * @return    string
     * @throws    GrnInvalidArgumentException
     * @throws    GrnInvalidPermissionException
     * @throws    GrnArgumentOutOfRangeException
     * @throws    GrnDataNotFoundException
     */
    public function fetch()
    {
        $input = $this->getInput();

        require_once('grn/smarty.csp');
        $t = new \GRN_Smarty();

        $parameter = [self::ARG_SPACE_ID, self::ARG_THREAD_ID];
        $this->checkArgFromInput($parameter, $input);
        $space_id = $this->getSpaceId();

        //confirm setting
        $config_values['area_width'] = $this->getUserConfig()->getAreaWidth();
        $config_values['area_height'] = $this->getUserConfig()->getAreaHeight();
        $t->assign('config', $config_values);

        try {
            //check authority
            $discussionService = DiscussionService::getInstance();
            $rootThreadCategoryObj
                = $discussionService->getApplicationRootCategory($space_id,
                Application::APPLICATION_CODE_DISCUSSION,
                $this->getLanguageCode());
            $has_privilege
                = $this->isSpaceAdminOrOperator(SpaceService::getInstance(),
                $space_id, $this->getLoginUserId());

            if ( ! $discussionService->hasThreadCategoryAccessControl(Authority::AUTHORITY_CODE_WRITE,
                    $space_id, $rootThreadCategoryObj->getId(),
                    $this->getLoginUserId())
                 && ! $has_privilege
            ) {
                throw new GrnInvalidPermissionException(ErrorCode::GRN_THREAD_NO_CREATE_PERMISSION);
            }
            $t->assign('page_title', $this->getTitle());
            $t->assign('space_id', $space_id);

            //GTM-2201: Folder
            $spaceService = new SpaceService();
            $folder_condition = new FolderSearchCondition();
            $folder_condition->setSpaceId($space_id);
            $folderCollection
                = $spaceService->getFolderListByCondition($folder_condition);
            $is_display_folder = false;

            if ($folderCollection->count() > 0) {
                $is_display_folder = true;
            }

            $t->assign('is_display_folder', $is_display_folder);
            $t->assign('folder_list', $folderCollection);

        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_INVALID_SPACE_ID);
            throw $e;
        }

        //generate upload ticket
        include('grn/_upload_prepend.csp');

        return $t->fetch('space/application/discussion/thread_add.tpl');
    }

    /**
     * Return a part of the site position of the page in Discussion application.
     *
     * @return array
     */
    public function getSitePosition()
    {
        $input = $this->getInput();

        return [
            [
                'page'     => 'space/application/discussion/index',
                'name'     => grn_get_page_display_name('space/discussion/index'),
                'spid'     => $input['spid'],
                "fragment" => "tid=" . @ $input['tid'],
            ],
            [
                'page' => '',
                'name' => $this->getTitle(),
            ]
        ];
    }

    /**
     * Return the title of the page
     *
     * @return string
     */
    public function getTitle()
    {
        return grn_get_page_display_name('space/discussion/thread_add');
    }

    /**
     * Create Thread
     *
     * @throws    GrnArgumentOutOfRangeException
     * @throws    GrnInvalidArgumentException
     * @throws    GrnInvalidPermissionException
     * @throws    GrnRequiredDataIsNotException
     *
     * @param     $input
     *
     * @return    \grn\space\data\bean\Thread
     */
    public function post($input)
    {
        $this->setInput($input);

        $parameter = [self::ARG_SPACE_ID];
        $this->checkArgFromInput($parameter, $input);
        $space_id = $this->getSpaceId();

        if ( ! array_key_exists('title', $input)
             || strlen(cb_trim($input['title'])) == 0
        ) {
            throw new GrnRequiredDataIsNotException(ErrorCode::GRN_THREAD_TITLE_IS_NOT_FOUND);
        }

        $loginId = $this->getLoginUserId();

        //check authority
        $discussionService = DiscussionService::getInstance();
        $rootThreadCategoryObj
            = $discussionService->getApplicationRootCategory($space_id,
            Application::APPLICATION_CODE_DISCUSSION, $this->getLanguageCode());
        $has_privilege
            = $this->isSpaceAdminOrOperator(SpaceService::getInstance(),
            $space_id, $loginId);

        if ( ! $discussionService->hasThreadCategoryAccessControl(Authority::AUTHORITY_CODE_WRITE,
                $space_id, $rootThreadCategoryObj->getId(), $loginId)
             && ! $has_privilege
        ) {
            throw new GrnInvalidPermissionException(ErrorCode::GRN_THREAD_NO_CREATE_PERMISSION);
        } else {
            $threadObj = new Thread();

            $threadObj->setCreator($this->makeLoginUserSpaceMember());

            $threadObj->setCategoryId($rootThreadCategoryObj->getId());

            $threadObj->setTitle(preg_replace('/\s\s+/', ' ',
                cb_trim($input['title'])));

            if (array_key_exists('thread_editor', $input)
                && $input['thread_editor']
            ) {
                $threadObj->setContent($input['thread_data']);
                $threadObj->setRichText(true);
            } else {
                $threadObj->setContent($input['thread_data']);
                $threadObj->setRichText(false);
            }

            $folder_id = cb_at($input, self::ARG_SPACE_FOLDER_ID,
                SpaceService::UNCATEGORIED);
            if ($folder_id != SpaceService::UNCATEGORIED) {
                $spaceService = new SpaceService();
                $folder = $spaceService->getFolder($folder_id);

                if ($folder->getId() == ''
                    || $folder->getSpaceId() != $space_id
                ) {
                    throw new GrnRequiredDataIsNotException(ErrorCode::GRN_FOLDER_INVALID_ID);
                }
            }
            $threadObj->setFolderId($folder_id);

            require_once('grn/upload.csp');
            $uploadFileArray
                = \GRN_UploadFile::getUploadedFiles(@$input['upload_ticket'],
                @$input['upload_fileids'], true);

            $newThreadObj = $discussionService->createThread($threadObj,
                $this->getLoginUser(), $uploadFileArray);

            $session = $this->getSession(self::DISCUSSION_SESSION_KEY);
            $session->set(self::ARG_THREAD_ID, $newThreadObj->getId());

            return $newThreadObj;
        }
    }
}
