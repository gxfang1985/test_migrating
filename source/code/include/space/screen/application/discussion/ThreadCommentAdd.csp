<?php

namespace grn\space\screen\application\discussion;

use grn\grn\MemberLogic;
use grn\grn\mention\MentionController;
use grn\space\logic\SpaceLogic;
use grn\space\screen\application\discussion\DiscussionBase;
use grn\space\common\data\bean\Authority;
use grn\space\common\exception\GrnInvalidArgumentException;
use grn\space\common\exception\GrnRequiredDataIsNotException;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\service\DiscussionService;
use grn\space\service\TodoService;
use grn\space\common\data\bean\Comment;
use grn\space\common\exception\ErrorCode;

/**
 * Class ThreadCommentAdd
 */
class ThreadCommentAdd extends DiscussionBase
{
    /**
     * @param $input
     *
     * @throws GrnDataNotFoundException
     * @throws GrnInvalidArgumentException
     * @throws GrnRequiredDataIsNotException
     * @throws \grn\space\common\exception\GrnInvalidArgumentException
     */
    public function post($input)
    {
        $this->setInput($input);
        $input = $this->getInput();
        $parameter = [self::ARG_SPACE_ID, self::ARG_THREAD_ID];
        $this->checkArgFromInput($parameter, $input);
        $this->verifySpaceIsNotExpired();
        $threadId = $this->getThreadId();
        $loginId = $this->getLoginUserId();

        // Attachments
        require_once('grn/upload.csp');
        $uploadFileArray
            = \GRN_UploadFile::getUploadedFiles(@$input['upload_ticket'],
            @$input['upload_fileids'], true);

        $discussionService = DiscussionService::getInstance();
        $properties['data'] = $input['thread_comment_add'];
        if (array_key_exists('thread_comment_add_editor', $input)
            && $input['thread_comment_add_editor']
        ) {
            require_once('grn/controller.csp');
            if (is_null(grn_strip_tags($properties['data']))
                || strlen(cb_trim(grn_strip_tags($properties['data']))) < 1
            ) {
                if ( ! $uploadFileArray || count($uploadFileArray) == 0) {
                    throw new GrnRequiredDataIsNotException(ErrorCode::GRN_THREAD_EMPTY_COMMENT);
                }
            }
            $properties['text_mode'] = true;
        } else {
            if (is_null($properties['data'])
                || strlen(cb_trim($properties['data'])) < 1
            ) {
                if ( ! $uploadFileArray || count($uploadFileArray) == 0) {
                    throw new GrnRequiredDataIsNotException(ErrorCode::GRN_THREAD_EMPTY_COMMENT);
                }
            }
            if (array_key_exists('reply_comment_id', $input)) {
                if ($input['reply_comment_id'] < 1) {
                    throw new GrnInvalidArgumentException(ErrorCode::GRN_THREAD_INVALID_COMMENT_ID);
                }
            }
            $properties['text_mode'] = false;
        }

        $commentObj = new Comment();
        $commentObj->setCreator($this->makeLoginUserSpaceMember());

        if ( ! (array_key_exists('reply_comment_istodo', $input)
                && $input['reply_comment_istodo'])
        ) {
            $mention
                = MentionController::getMentionObjectsFromRequestArgs($input);
            $commentObj->setMention($mention);
            $mention_member_ids = $mention->getObjectIdsGroupByType();
            $mention_user_ids
                = $mention_member_ids[MemberLogic::TYPE_USER];
            $space_logic = SpaceLogic::getInstance();
            $no_permission_mentioned_user_ids = $space_logic
                ->filterUsersNotHavingPermission($this->getSpaceId(),
                    $mention_user_ids);
            if ($no_permission_mentioned_user_ids) {
                cb_throw_error('GRN_SPACE_00028',
                    null,
                    ['users' => MemberLogic::getCommaSeparatedUserNames($no_permission_mentioned_user_ids)]
                );
            }
        }

        $commentObj->setContent($properties['data']);
        $commentObj->setRichText($properties['text_mode']);
        if (array_key_exists('reply_comment_id', $input)) {
            $commentObj->setParentCommentId($input['reply_comment_id']);
        }

        $threadObj = $discussionService->getThread($threadId, $loginId);
        $session = $this->getSession(self::DISCUSSION_SESSION_KEY);
        $session->set(self::ARG_THREAD_ID, $threadId);

        if (array_key_exists('reply_comment_istodo', $input)
            && $input['reply_comment_istodo']
        ) {
            if ( ! array_key_exists('reply_comment_todo_id', $input)) {
                throw new GrnInvalidArgumentException(ErrorCode::GRN_INVALID_TODO_ID);
            }
            $commentObj->setParentApplicationType(Comment::PARENT_APPLICATION_TYPE_TODO);
            $commentObj->setParentApplicationId($input['reply_comment_todo_id']);

            $todoService = TodoService::getInstance();
            try {
                $newCommentObj = $todoService->createTodoComment($commentObj,
                    $input['reply_comment_todo_id'], $this->getLoginUser(),
                    $uploadFileArray);
            } catch (GrnDataNotFoundException $e) {
                $e->setErrorCode(ErrorCode::GRN_TODO_INVALID_COMMENT_ID);
                throw $e;
            }
        } else {
            try {
                $newCommentObj
                    = $discussionService->createThreadComment($commentObj,
                    $threadObj->getId(), $this->getLoginUser(),
                    $uploadFileArray);
            } catch (GrnDataNotFoundException $e) {
                $e->setErrorCode(ErrorCode::GRN_THREAD_INVALID_COMMENT_ID);
                throw $e;
            }
        }
    }
}
