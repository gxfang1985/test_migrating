<?php

namespace grn\space\screen\application\discussion;

use grn\space\service\SpaceService;
use grn\space\service\DiscussionService;
use grn\space\service\TodoService;
use grn\space\screen\application\discussion\DiscussionBase;
use grn\space\common\data\bean\Authority;
use grn\space\common\exception\GrnInvalidArgumentException;
use grn\space\common\exception\GrnInvalidPermissionException;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\common\exception\ErrorCode;

/**
 * Class ThreadCommentDelete
 */
class ThreadCommentDelete extends DiscussionBase
{
    const PARENT_APPLICATION_TYPE_THREAD = 1;
    const PARENT_APPLICATION_TYPE_TODO = 2;

    public function fetch()
    {

    }

    /**
     * @param $input
     *
     * @throws GrnDataNotFoundException
     * @throws GrnInvalidArgumentException
     * @throws GrnInvalidPermissionException
     */
    public function post($input)
    {
        if (strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST') == 0) {
            $this->setInput($input);
            $input = $this->getInput();
            $parameter = [self::ARG_SPACE_ID, self::ARG_THREAD_ID];
            $this->checkArgFromInput($parameter, $input);
            if ( ! array_key_exists('cmid', $input) || $input['cmid'] < 1) {
                throw new GrnInvalidArgumentException(ErrorCode::GRN_THREAD_INVALID_COMMENT_ID);
            }

            $space_id = $this->getSpaceId();
            $comment_id = $input['cmid'];
            $thread_id = $this->getThreadId();
            $loginId = $this->getLoginUserId();

            $spaceService = SpaceService::getInstance();
            $discussionService = DiscussionService::getInstance();
            $todoService = TodoService::getInstance();
            try {
                $spaceService->getSpace($space_id, $loginId,
                    $this->getLanguageCode());
            } catch (GrnDataNotFoundException $e) {
                $e->setErrorCode(ErrorCode::GRN_INVALID_SPACE_ID);
                throw $e;
            }
            try {
                $discussionService->getThread($thread_id, $loginId);
            } catch (GrnDataNotFoundException $e) {
                $e->setErrorCode(ErrorCode::GRN_INVALID_THREAD_ID);
                throw $e;
            }
            try {
                $comment = $discussionService->getComment($comment_id,
                    $loginId);
            } catch (GrnDataNotFoundException $e) {
                $e->setErrorCode(ErrorCode::GRN_THREAD_INVALID_COMMENT_ID);
                throw $e;
            }
            $commentType = $comment->getParentApplicationType();
            $creatorId = $comment->getCreatorId();
            $hasPrivilege = $this->isSpaceAdmin($spaceService, $loginId);
            if ($commentType == self::PARENT_APPLICATION_TYPE_THREAD) {
                $isAuthority
                    = $discussionService->hasThreadCommentAccessControl(Authority::AUTHORITY_CODE_WRITE,
                    $space_id, $thread_id, $comment_id, $loginId);
                if (($isAuthority && $creatorId == $loginId) || $hasPrivilege) {
                    try {
                        $discussionService->deleteThreadComment($comment_id,
                            $thread_id, $this->makeLoginUserSpaceMember());
                    } catch (GrnDataNotFoundException $e) {
                        $e->setErrorCode(ErrorCode::GRN_THREAD_INVALID_COMMENT_ID);
                        throw $e;
                    }
                } else {
                    throw new GrnInvalidPermissionException(ErrorCode::GRN_THREAD_NO_DELETE_COMMENT_PERMISSION);
                }
            } elseif ($commentType == self::PARENT_APPLICATION_TYPE_TODO) {
                $todo_id = $comment->getParentApplicationId();
                $isAuthority
                    = $todoService->hasTodoCommentAccessControl(Authority::AUTHORITY_CODE_WRITE,
                    $space_id, $thread_id, $todo_id, $comment_id, $loginId);
                if (($isAuthority && $creatorId == $loginId) || $hasPrivilege) {
                    try {
                        $todoService->deleteTodoComment($comment_id, $todo_id,
                            $this->makeLoginUserSpaceMember());
                    } catch (GrnDataNotFoundException $e) {
                        $e->setErrorCode(ErrorCode::GRN_TODO_INVALID_COMMENT_ID);
                        throw $e;
                    }
                } else {
                    throw new GrnInvalidPermissionException(ErrorCode::GRN_TODO_NO_DELETE_COMMENT_PERMISSION);
                }
            }
            $session = $this->getSession(self::DISCUSSION_SESSION_KEY);
            $session->set(self::ARG_THREAD_ID, $thread_id);
        }
    }
}
