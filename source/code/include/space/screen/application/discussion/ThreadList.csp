<?php

namespace grn\space\screen\application\discussion;

use grn\space\data\bean\Folder;
use grn\space\data\collection\FolderCollection;
use grn\space\data\collection\ThreadCollection;
use grn\space\data\condition\FolderSearchCondition;
use grn\space\logic\FolderLogic;
use grn\space\service\SpaceService;
use grn\space\data\condition\ThreadSearchCondition;
use grn\space\service\DiscussionService;
use grn\space\common\data\bean\Authority;
use grn\space\common\data\bean\Application;
use grn\space\common\exception\GrnInvalidArgumentException;
use grn\space\common\exception\GrnInvalidPermissionException;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\common\exception\GrnArgumentOutOfRangeException;
use grn\space\common\exception\GrnRequiredDataIsNotException;
use grn\space\common\exception\ErrorCode;
use grn\fts\Application as FtsApplication;

/**
 * Class ThreadList
 */
class ThreadList extends DiscussionBase
{
    const ARG_SF = 'sf';

    /**
     * @return mixed|string|void
     * @throws GrnArgumentOutOfRangeException
     * @throws GrnDataNotFoundException
     * @throws GrnInvalidArgumentException
     * @throws GrnInvalidPermissionException
     * @throws GrnRequiredDataIsNotException
     */
    public function fetch()
    {
        $input = $this->getInput();
        $parameter = [self::ARG_SPACE_ID];
        $this->checkArgFromInput($parameter, $input);
        require_once('grn/smarty.csp');
        $t = new \GRN_Smarty();

        //generate upload ticket
        include('grn/_upload_prepend.csp');
        $spaceId = $this->getSpaceId();
        $loginId = $this->getLoginUserId();
        $currentLanguage = $this->getLanguageCode();

        $discussionService = DiscussionService::getInstance();

        try {
            //Get discussion's root category of the space specified with space Id.
            $rootCategory
                = $discussionService->getApplicationRootCategory($spaceId,
                Application::APPLICATION_CODE_DISCUSSION, $currentLanguage);
            //Check whether target user has the authority to access the space. 
            if ( ! $discussionService->hasThreadCategoryAccessControl(Authority::AUTHORITY_CODE_READ_DETAIL,
                $spaceId, $rootCategory->getId(), $loginId)
            ) {
                throw new GrnInvalidPermissionException(ErrorCode::GRN_NO_READ_PERMISSION);
            }
            //Check whether target user has the authority to modify the space.If he/she has, then he/she can create a new thread into the space's discussion. 
            $canWriteToSpace
                = $discussionService->hasThreadCategoryAccessControl(Authority::AUTHORITY_CODE_WRITE,
                $spaceId, $rootCategory->getId(), $loginId);
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_INVALID_SPACE_ID);
            throw $e;
        } catch (GrnArgumentOutOfRangeException $e) {
            throw $e;
        } catch (GrnInvalidArgumentException $e) {
            throw $e;
        }

        $searchCondition = new ThreadSearchCondition();

        try {
            //Get collection of the threads in the space's discussion, according to space Id.
            $searchCondition->setSearchCategoryId($rootCategory->getId());
            $searchCondition->setSearchScopeType(ThreadSearchCondition::SEARCH_SCOPE_CATEGORY_TARGET_ONLY);
            $searchCondition->setOrderSortArray([
                ThreadSearchCondition::SORT_COMPONENT_MODIFY_TIME_DESC,
                ThreadSearchCondition::SORT_TITLE_ASC,
            ]);
            $threadCollection
                = $discussionService->searchThreadBySearchConditionWithAccessControl(Authority::AUTHORITY_CODE_READ_DETAIL,
                $searchCondition, $loginId);
        } catch (GrnRequiredDataIsNotException $e) {
            throw $e;
        } catch (GrnInvalidArgumentException $e) {
            throw $e;
        }

        $sf = $this->getArrayValue(self::ARG_SF, $input);
        if ($sf) {
            $session = $this->getSession(self::DISCUSSION_SESSION_KEY);
            $t->assign('tid', $session->get(self::ARG_THREAD_ID));
            $t->assign('sp', $session->get(self::ARG_NAVI_TAG));
            $t->assign('sf', true);
        }

        $folderCondition = new FolderSearchCondition();
        $folderCondition->setSpaceId($spaceId);

        $spaceService = new SpaceService();
        $folderCollection
            = $spaceService->getFolderListByCondition($folderCondition);

        if ($folderCollection->count() > 0) {
            $isUsedFolder = true;
        } else {
            $isUsedFolder = false;
        }

        if ($isUsedFolder === true) {
            $isDisplayUncategorized = false;
            $unCategoryFolder = new Folder();
            $unCategoryFolder->setId(SpaceService::UNCATEGORIED);
            $folderCollection->appendBean($unCategoryFolder);

            $session = $this->getSession(self::FOLDER_EXPANDED_SESSION_KEY);
            $folderIdListExpanded
                = $session->get(self::FOLDER_ID_LIST_EXPANDED);

            if ( ! isset($folderIdListExpanded)) {
                $folderIdListExpanded = [];
            }

            foreach ($folderCollection as $folder) {
                /** @var \grn\space\data\bean\Folder $folder */
                $isExpanded = array_key_exists($folder->getId(),
                    $folderIdListExpanded);

                if ($isExpanded === true) {
                    $folder->setIsExpanded(true);
                }

                if ($folder->isExpanded() && $folder->isUnread()) {
                    continue;
                }

                foreach ($threadCollection as $thread) {
                    /** @var \grn\space\data\bean\Thread $thread */
                    if ($thread->isSystemUse()) {
                        continue;
                    }

                    if ($thread->getFolderId() == $folder->getId()) {
                        if ($isDisplayUncategorized === false
                            && $folder->getId() === SpaceService::UNCATEGORIED
                        ) {
                            $isDisplayUncategorized = true;
                        }

//                        if( $isExpanded === TRUE )
//                        {
//                            $folder->setIsExpanded( TRUE );
//                        }

                        if ($thread->isUnreadUnder()) {
                            $folder->setIsUnread(true);
                        }

                        $folder->ThreadCollection()->appendBean($thread);
                    }
                }
            }

            $indexUncategorized = $folderCollection->count() - 1;
            $t->assign('uncategorizedFolder',
                $folderCollection->getBean($indexUncategorized));

            $folderCollection->remove($indexUncategorized);

            $t->assign('folderCollection', $folderCollection);
            $t->assign('isDisplayUncategorized', $isDisplayUncategorized);
        }

        $t->assign('threads', $threadCollection);
        $t->assign('spaceId', $spaceId);
        $t->assign('isSpaceMember', $canWriteToSpace);
        $t->assign('isUsedFolder', $isUsedFolder);


        $t->assign('fts', FtsApplication::isViewable());
        $t->assign('has_privilege',
            $this->isSpaceAdminOrOperator(SpaceService::getInstance(), $spaceId,
                $loginId));

        return $t->fetch("space/application/discussion/thread_list.tpl");
    }
}
