<?php

namespace grn\space\screen\application\discussion;

use grn\grn\dialog\screen\AbstractAjaxMemberDialogScreen;
use grn\grn\MemberLogic;
use grn\space\common\data\bean\SpaceMember;
use grn\space\data\collection\SpaceUserCollection;
use grn\space\data\condition\SpaceUserSearchCondition;
use grn\space\logic\SpaceLogic;
use grn\space\logic\ThreadLogic;
use grn\space\service\DiscussionService;
use grn\space\service\SpaceService;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\common\exception\ErrorCode;
use grn\space\common\data\bean\LanguageStatus;

/**
 * Class AjaxGroupMemberDialogScreen
 *
 * @package grn\grn\dialog\screen
 */
class AjaxNotificationUserListDialog extends AbstractAjaxMemberDialogScreen
{
    /**
     * Specific input keys.
     */
    const INPUT_KEY_S_SPACE_ID = 'spid';
    const INPUT_KEY_S_THREAD_ID = 'tid';
    private $specific_input
        = [
            self::INPUT_KEY_S_SPACE_ID  => '',
            self::INPUT_KEY_S_THREAD_ID => '',
        ];

    /**
     * General input keys.
     */
    /** anchor_id format : follower_list_link_{$space_id}_{$thread_id} */
    const INPUT_KEY_G_ANCHOR_ID = 'anchor_id';
    const INPUT_KEY_G_PRIMARY_KEY = 'primary_key';
    const INPUT_KEY_G_DIALOG_NAME = 'dialog_name';
    const INPUT_KEY_G_WANT_PAGE = 'want_page';
    const INPUT_KEY_G_SEARCH_WORD = 'search_word';
    const INPUT_KEY_G_APP_ID = 'app_id';
    private $general_input
        = [
            self::INPUT_KEY_G_ANCHOR_ID   => '',
            self::INPUT_KEY_G_PRIMARY_KEY => '',
            self::INPUT_KEY_G_DIALOG_NAME => '',
            self::INPUT_KEY_G_WANT_PAGE   => 1,
            self::INPUT_KEY_G_SEARCH_WORD => '',
            self::INPUT_KEY_G_APP_ID      => ''
        ];

    private $use_back_button = false;

    /**
     * AjaxGroupMemberDialogScreen constructor.
     *
     * @param $input
     */
    function __construct($input)
    {
        $this->setInput($input);

        parent::__construct($input);
    }

    /**
     * Set Input.
     *
     * @param $input array
     */
    private function setInput($input)
    {
        $this->setGeneralInput($input);
        $this->setSpecificInput();
    }

    /**
     * @return int
     */
    protected function getWantPage()
    {
        return $this->general_input[self::INPUT_KEY_G_WANT_PAGE];
    }

    /**
     * @return string
     */
    protected function getSearchWord()
    {
        return $this->general_input[self::INPUT_KEY_G_SEARCH_WORD];
    }

    /**
     * @return string
     */
    protected function getPrimaryKey()
    {
        return $this->general_input[self::INPUT_KEY_G_PRIMARY_KEY];
    }

    /**
     * @return mixed
     */
    protected function getAccessPlugin()
    {
        return false;
    }

    /**
     * @return string
     */
    protected function getAppId()
    {
        return $this->general_input[self::INPUT_KEY_G_APP_ID];
    }

    /**
     * @return boolean
     */
    protected function useSearchItem()
    {
        return true;
    }

    /**
     * @return mixed
     */
    protected function getDialogName()
    {
        return $this->general_input[self::INPUT_KEY_G_DIALOG_NAME];
    }

    /**
     * @return boolean
     */
    protected function isSearch()
    {
        if (strlen($this->getSearchWord()) > 0) {
            return true;
        }

        return false;
    }

    /**
     * @return bool
     */
    public function useBackButton()
    {
        return $this->use_back_button;
    }

    /**
     * @return bool
     */
    protected function useSwitchTab()
    {
        if ($this->isSubDialog()) {
            return false;
        } else {
            return true;
        }
    }

    /**
     * @return array()
     */
    protected function getSwitchTabCaption()
    {
        return [
            cb_msg('grn.space.discussion',
                'notification_dialog.tab.space_member'),
            cb_msg('grn.space.discussion',
                'notification_dialog.tab.non_space_member')
        ];
    }

    /**
     * @param boolean $include_search
     */
    protected function _setDisplayMembersId($include_search = false)
    {
        if ($this->isMainDialog()) {
            $this->assignMainDialog($include_search);
        } elseif ($this->isSubDialog()) {
            $this->assignSubDialog($include_search);
        }

    }

    /**
     * @return string
     */
    protected function getNoExistsMessage()
    {
        return cb_msg('grn.space',
            'grn.space.notification_list_dialog.no_member');
    }

    /**
     * @param $input
     */
    private function setGeneralInput($input)
    {
        $anchor_id = cb_at($input, self::INPUT_KEY_G_ANCHOR_ID);
        if (isset($anchor_id)) {
            $this->general_input[self::INPUT_KEY_G_ANCHOR_ID] = $anchor_id;
            $this->general_input[self::INPUT_KEY_G_PRIMARY_KEY] = $anchor_id;
        }

        $want_page = cb_at($input, self::INPUT_KEY_G_WANT_PAGE);
        if (isset($want_page)) {
            $this->general_input[self::INPUT_KEY_G_WANT_PAGE] = $want_page;
        }

        $name = cb_at($input, self::INPUT_KEY_G_DIALOG_NAME);
        if (isset($name)) {
            $this->general_input[self::INPUT_KEY_G_DIALOG_NAME] = $name;
        }

        $search_word = cb_at($input, self::INPUT_KEY_G_SEARCH_WORD);
        if (isset($search_word)) {
            $this->general_input[self::INPUT_KEY_G_SEARCH_WORD] = $search_word;
        }

        $app_id = cb_at($input, self::INPUT_KEY_G_APP_ID);
        if (isset($app_id)) {
            $this->general_input[self::INPUT_KEY_G_APP_ID] = $app_id;
        }

    }

    private function setSpecificInput()
    {
        $anchor_id = $this->general_input[self::INPUT_KEY_G_ANCHOR_ID];
        $input_keys = str_replace('follower_list_link_', '', $anchor_id);
        $input_keys = explode('_', $input_keys);
        $space_id = $input_keys[0];
        $thread_id = $input_keys[1];
        $space = null;

        if (isset($space_id)) {
            $login_user_id = cb_get_login_user_id();
            $space_service
                = SpaceService::getInstance();
            $space
                = $space_service->getSpace($space_id,
                $login_user_id);
            $this->specific_input[self::INPUT_KEY_S_SPACE_ID] = $space_id;
        }
        if (isset($thread_id)) {
            if ( ! $space) {
                $space_logic = new SpaceLogic();
                $space = $space_logic->getSpaceByThreadId($thread_id,
                    LanguageStatus::STANDARD_LANGUAGE_CODE, true);
            }
            $this->specific_input[self::INPUT_KEY_S_THREAD_ID] = $thread_id;
        }

        if ($space && $space->isExpired()) {
            throw new GrnDataNotFoundException(ErrorCode::GRN_SPACE_EXPIRED);
        }
    }

    /**
     * @param boolean $include_search
     */
    private function assignMainDialog($include_search)
    {
        if ($this->getSwitchTabID() == self::SWITCH_TAB_ID_2) {
            $this->setNonSpaceMember($include_search);
        } else {
            $this->setSpaceMember($include_search);
        }
    }

    /**
     * @param boolean $include_search
     */
    private function assignSubDialog($include_search)
    {
        $this->use_back_button = true;
        $search_key = explode('_', $this->getSubPrimaryKey());
        $prefix = $search_key[0];
        $search_id = $search_key[1];

        switch ($prefix) {
            case self::LINE_PREFIX_GROUP:
                $this->searchGroupUsers($search_id, $include_search);
                break;
            case self::LINE_PREFIX_STATIC_ROLE:
                $this->searchRoleUsers($search_id, $include_search);
                break;
        }
    }

    /**
     * @param $include_search
     */
    private function setSpaceMember($include_search)
    {
        /** @var SpaceUserCollection $notification_members */
        $notification_members = $this->getNotificationUsers();

        $is_search = false;
        $search_hit_user_ids = [];
        if ($this->isSearch() && $include_search) {
            $search_hit_user_ids = $this->searchIncludeUsers("");
            $is_search = true;
        } else {
            // Order by group,role,user

            $groups = $notification_members->getSpaceGroupArray();
            /** @var SpaceMember $group */
            foreach ($groups as $group) {
                $this->addGroup($group->getMemberID());
            }

            $roles = $notification_members->getSpaceRoleArray();
            /** @var SpaceMember $role */
            foreach ($roles as $role) {
                $this->addStaticRole($role->getMemberID());
            }

        }

        $users = $notification_members->getSpaceUsersArray();
        /** @var SpaceMember $user */
        foreach ($users as $user) {
            $user_id = $user->getMemberID();
            if ($is_search) {
                if (in_array($user_id, $search_hit_user_ids)) {
                    $this->addUser($user_id);
                }
            } else {
                $this->addUser($user_id);
            }
        }
    }

    /**
     * @param $include_search
     */
    private function setNonSpaceMember($include_search)
    {

        $discussion_service = DiscussionService::getInstance();
        $notification_users
            = $discussion_service->getDiscussionNotificationUserId($this->specific_input[self::INPUT_KEY_S_THREAD_ID]);

        $is_search = false;
        $search_hit_user_ids = [];
        if ($this->isSearch() && $include_search) {
            $search_hit_user_ids = $this->searchIncludeUsers("");
            $is_search = true;
        }

        $space_member_ids = $this->getSpaceMemberIDs();

        foreach ($notification_users as $user_id) {
            $is_space_member = isset($space_member_ids[$user_id]);
            if ($is_space_member) {
                continue;
            }

            if ($is_search) {
                if (in_array($user_id, $search_hit_user_ids)) {
                    $this->addUser($user_id);
                }
            } else {
                $this->addUser($user_id);
            }
        }

    }

    /**
     * @return array
     */
    private function getSpaceMemberIDs()
    {
        $space_id = $this->specific_input[self::INPUT_KEY_S_SPACE_ID];
        $login_user_id = cb_get_login_user_id();

        return SpaceService::getInstance()
                           ->getSpaceUserIdsArrayOfUserOnly($space_id,
                               $login_user_id);
    }

    /**
     * @return SpaceUserCollection
     */
    private function getNotificationUsers()
    {
        $input = [];
        $input[self::INPUT_KEY_S_SPACE_ID]
            = $this->specific_input[self::INPUT_KEY_S_SPACE_ID];
        $input[self::INPUT_KEY_S_THREAD_ID]
            = $this->specific_input[self::INPUT_KEY_S_THREAD_ID];
        $input['member'] = '1';

        $thread_detail_component = new ThreadDetail($input);

        return $thread_detail_component->getNotificationUser();
    }

    /**
     * @return string
     */
    protected function createDialogTitle()
    {
        if ($this->isSubDialog()) {
            return $this->createSubDialogTitle();
        }

        return cb_msg('grn.space.discussion', 'notification_dialog.title');

    }

    /**
     * @return string
     */
    private function createSubDialogTitle()
    {
        $search_key = explode('_', $this->getSubPrimaryKey());
        $prefix = $search_key[0];
        $search_id = $search_key[1];

        switch ($prefix) {
            case self::LINE_PREFIX_GROUP:
                $this->searchGroupUsers($search_id, false);
                $name = $this->uum->getGroup($search_id)->get('name');
                break;
            case self::LINE_PREFIX_STATIC_ROLE:
                $this->searchRoleUsers($search_id, false);
                $name = $this->uum->getStaticRole($search_id)
                                  ->get('foreign_key');
                break;
            default:
                cb_throw_error();
        }

        return cb_msg('grn.space.discussion',
            'notification_dialog.sub_screen.title',
            ['name' => $name, 'user_count' => $this->getUserCount()]);
    }

    /**
     * @return int
     */
    protected function getUserCount(): int
    {
        $member_logic = MemberLogic::getInstance();
        $accessible_user_ids
            = $member_logic->getAccessEvalUsersWithAllowAppId($this->getDisplayUserIds(),
            null, $this->getAppId());

        return count($accessible_user_ids);
    }

    /**
     * @param $search_id
     *
     * @return array
     */
    protected function getGroupUsersInfo($search_id)
    {
        $users = parent::getGroupUsersInfo($search_id);

        return $this->selectVisibleUserIds($users);
    }

    /**
     * @param $search_id
     *
     * @return array
     */
    protected function getRoleUsersInfo($search_id)
    {
        $users = parent::getRoleUsersInfo($search_id);

        return $this->selectVisibleUserIds($users);
    }

    /**
     * @param array $users
     *
     * @return array
     */
    protected function selectVisibleUserIds(array $users)
    {
        $space_id = $this->specific_input[self::INPUT_KEY_S_SPACE_ID];
        $thread_id = $this->specific_input[self::INPUT_KEY_S_THREAD_ID];
        $login_user_id = cb_get_login_user_id();

        $thread_logic = ThreadLogic::getInstance();
        $non_notification_user_ids
            = $thread_logic->getNonNotificationList($thread_id);

        $space_user_search_condition = new SpaceUserSearchCondition();
        $space_user_search_condition->setSearchSpaceId($space_id);
        $space_user_search_condition->setIsSearchUsersOnly(true);
        $space_logic = SpaceLogic::getInstance();
        $space_users_array
            = $space_logic->searchSpaceUsers($space_user_search_condition,
            $login_user_id)->toArrayMembers();

        $result = [];
        foreach ($users as $user_id => $user) {
            if (isset($non_notification_user_ids[$user_id])) {
                continue;
            }

            if (isset($space_users_array[$user_id])) {
                $result[$user_id] = $user;
            }
        }

        return $result;
    }

}
