<?php

namespace grn\space\screen\application\discussion;

use grn\space\data\bean\Folder;
use grn\space\data\condition\FolderSearchCondition;
use grn\space\service\SpaceService;
use grn\space\service\DiscussionService;
use grn\space\common\data\bean\Authority;
use grn\space\common\exception\GrnInvalidArgumentException;
use grn\space\common\exception\GrnInvalidPermissionException;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\common\exception\GrnRequiredDataIsNotException;
use grn\space\common\exception\ErrorCode;
use grn\space\common\utility\SpaceFileUtility;

/**
 * Class DiscussionModify
 */
class DiscussionModify extends DiscussionBase
{
    /**
     * Return raw HTML which will be used without being escaped.
     *
     * @return string
     * @throws    GrnInvalidArgumentException
     * @throws    GrnInvalidPermissionException
     * @throws    GrnDataNotFoundException
     */
    public function fetch()
    {
        $input = $this->getInput();

        $parameter = [self::ARG_SPACE_ID, self::ARG_THREAD_ID];
        $this->checkArgFromInput($parameter, $input);
        $edit = $input["id"];

        $spaceId = $this->getSpaceId();
        $threadId = $this->getThreadId();
        $loginId = $this->getLoginUserId();

        require_once("grn/smarty.csp");
        $t = new \GRN_Smarty();

        $t->assign('page_title', $this->getTitle());
        $t->assign('space_id', $spaceId);

        // Get user config
        $config_values = [];
        $user_config = $this->getUserConfig();
        $config_values['area_width'] = $user_config->getAreaWidth();
        $config_values['area_height'] = $user_config->getAreaHeight();
        $t->assign('config', $config_values);

        $discussionService = DiscussionService::getInstance();

        try {
            //Check thread read authority
            $isAuthority
                = $discussionService->hasThreadAccessControl(Authority::AUTHORITY_CODE_WRITE,
                $spaceId, $threadId, $loginId);
            $hasPrivilege
                = $this->isSpaceAdminOrOperator(SpaceService::getInstance(),
                $spaceId, $loginId);

            if ($isAuthority || $hasPrivilege) {
                //Get Thread
                $thread = $discussionService->getThread($threadId, $loginId);
            } else {
                throw new GrnInvalidPermissionException(ErrorCode::GRN_THREAD_NO_MODIFY_PERMISSION);
            }
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_INVALID_THREAD_ID);
            throw $e;
        }

        $t->assign('thread_id', $thread->getId());
        $t->assign('title', $thread->getTitle());
        $t->assign('data', $thread->getContent());

        if ($thread->isRichText()) {
            $t->assign('editor', 1);
            $t->assign('html', $thread->getContent());
        }


        if ( ! $thread->isSystemUse()) {
            $spaceService = new SpaceService();
            $folder_condition = new FolderSearchCondition();
            $folder_condition->setSpaceId($spaceId);
            $folder_list
                = $spaceService->getFolderListByCondition($folder_condition);
            $is_display_folder = false;

            if (count($folder_list) > 0) {
                $is_display_folder = true;
            }

            $t->assign('is_display_folder', $is_display_folder);
            $t->assign('folder_list', $folder_list);
            $t->assign('folder_id', $thread->getFolderId());
        }
        //Get attachment file
        include('grn/_upload_prepend.csp');

        $spaceFileCollection = $thread->getSpaceFileCollection();
        $attachedFiles = [];
        if ($edit === 'thread_edit_link') {
            foreach ($spaceFileCollection as $file) {
                /** @var \grn\space\common\data\bean\SpaceFile $file */
                $grnSpaceFile = $file->getGrnSpaceFileObject();
                if ($grnSpaceFile->getCurrentBody()->exists()) {
                    $attachedFiles[$file->getId()]
                        = SpaceFileUtility::getSpaceFileLinkView($file, false);
                }
            }
        } else {
            foreach ($spaceFileCollection as $file) {
                $attachedFiles[$file->getId()]
                    = SpaceFileUtility::getSpaceFileLinkView($file, $for_view);
            }
        }
        $t->assign('attach_files', $attachedFiles);
        $t->assign('fragment', 'tid=' . $threadId);

        return $t->fetch("space/application/discussion/thread_edit.tpl");
    }

    /**
     *
     * Return a part of the site position of the page in Discussion application.
     *
     * @return array
     */
    public function getSitePosition()
    {
        $input = $this->getInput();

        return [
            [
                "page"     => "space/application/discussion/index",
                "name"     => grn_get_page_display_name("space/discussion/index"),
                "spid"     => @ $input['spid'],
                "fragment" => "tid=" . @ $input['tid'],
            ],
            [
                "page" => "",
                "name" => grn_get_page_display_name("space/discussion/thread_edit"),
            ]
        ];
    }

    /**
     *
     * Return the title of the page
     *
     * @return string
     */
    public function getTitle()
    {
        return grn_get_page_display_name("space/discussion/thread_edit");
    }

    /**
     * Modify Thread
     *
     * @param     $input
     *
     * @throws    GrnInvalidArgumentException
     * @throws    GrnInvalidPermissionException
     * @throws    GrnDataNotFoundException
     * @throws    GrnRequiredDataIsNotException
     */
    public function post($input)
    {
        $this->setInput($input);
        $input = $this->getInput();

        $parameter = [self::ARG_SPACE_ID, self::ARG_THREAD_ID];
        $this->checkArgFromInput($parameter, $input);

        if ( ! array_key_exists('title', $input)
             || strlen(cb_trim($input['title'])) == 0
        ) {
            throw new GrnRequiredDataIsNotException(ErrorCode::GRN_THREAD_TITLE_IS_NOT_FOUND);
        }

        $sendNotification = cb_at($input, self::SEND_NOTIFY) == 1 ? true
            : false;

        $spaceId = $this->getSpaceId();
        $threadId = $this->getThreadId();
        $loginId = $this->getLoginUserId();

        $discussionService = DiscussionService::getInstance();

        try {
            //Check thread modify authority
            $isAuthority
                = $discussionService->hasThreadAccessControl(Authority::AUTHORITY_CODE_WRITE,
                $spaceId, $threadId, $loginId);
            $hasPrivilege
                = $this->isSpaceAdminOrOperator(SpaceService::getInstance(),
                $spaceId, $loginId);

            if ($isAuthority || $hasPrivilege) {
                //Get Thread
                $thread = $discussionService->getThread($threadId, $loginId);

                // --- Set data begin ---
                $thread->setModifier($this->makeLoginUserSpaceMember());
                $thread->setTitle(preg_replace('/\s\s+/', ' ',
                    cb_trim($input['title'])));

                if (array_key_exists('thread_editor', $input)
                    && $input['thread_editor']
                ) {
                    require_once('grn/controller.csp');
                    $thread->setContent($input['thread_data']);
                    $thread->setRichText(true);
                } else {
                    $thread->setContent($input['thread_data']);
                    $thread->setRichText(false);
                }

                if ( ! $thread->isSystemUse()) {
                    $folder_id = cb_at($input, self::ARG_SPACE_FOLDER_ID, -1);
                    if ($folder_id != SpaceService::UNCATEGORIED) {
                        $spaceService = new SpaceService();
                        $folder = $spaceService->getFolder($folder_id);

                        if ($folder->getId() == ''
                            || $folder->getSpaceId() != $spaceId
                        ) {
                            throw new GrnRequiredDataIsNotException(ErrorCode::GRN_FOLDER_INVALID_ID);
                        }
                    }
                    $thread->setFolderId($folder_id);
                }
                // --- Set data end ---

                // --- Modify attachment file start---
                require_once('grn/controller.csp');

                // Get current thread files
                $spaceFileArray = $thread->getGrnSpaceFileArray();
                // Get user selected files
                $files = [];
                if (array_key_exists('fids', $input)
                    && is_array($input['fids'])
                ) {
                    foreach ($input['fids'] as $fid) {
                        if (array_key_exists($fid, $spaceFileArray)
                            && $spaceFileArray[$fid]->getCurrentBody()->exists()
                        ) {
                            $files[$fid] = $spaceFileArray[$fid];
                        }
                    }
                }

                // Get upload files
                require_once('grn/upload.csp');
                $uploadFileArray
                    = \GRN_UploadFile::getUploadedFiles(@$input['upload_ticket'],
                    @$input['upload_fileids'], true);
                foreach ($uploadFileArray as $fid => $file) {
                    if ( ! array_key_exists($fid, $files)) {
                        $files[$fid] = $file;
                    }
                }
                // --- Modify attachment file end---

                $modified_thread = $discussionService->modifyThread($thread,
                    $this->getLoginUser(), $files, $sendNotification);
                $session
                    = $this->getSession(self::DISCUSSION_SESSION_KEY);
                $session->set(self::ARG_THREAD_ID, $modified_thread->getId());
            } else {
                throw new GrnInvalidPermissionException(ErrorCode::GRN_THREAD_NO_MODIFY_PERMISSION);
            }
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_INVALID_THREAD_ID);
            throw $e;
        }
    }

}
