<?php

namespace grn\space\screen\application\discussion;

use grn\space\service\SpaceService;
use grn\space\common\data\bean\Authority;
use grn\space\common\exception\ErrorCode;
use grn\space\common\exception\GrnInvalidPermissionException;
use grn\space\screen\application\discussion\DiscussionBase;
use grn\space\service\DiscussionService;

/**
 * Class DiscussionSubscribe
 */
class DiscussionSubscribe extends DiscussionBase
{
    private $_is_subscribe;

    /**
     * @param $input
     *
     * @throws GrnInvalidPermissionException
     * @throws \grn\space\common\exception\GrnInvalidArgumentException
     */
    public function post($input)
    {
        $this->setInput($input);
        $this->checkArgFromInput([self::ARG_SPACE_ID, self::ARG_THREAD_ID],
            $input);
        $this->verifySpaceIsNotExpired();
        $login_id = $this->getLoginUserId();
        $space_id = $this->getSpaceId();
        $discussion_id = $this->getThreadId();
        $key = $this->getArrayValue(self::ARG_KEY, $input);

        $discussion_service = DiscussionService::getInstance();
        $discussion = $discussion_service->getThread($discussion_id,
            $login_id);
        if ($discussion_service->hasThreadAccessControl(Authority::AUTHORITY_CODE_READ_DETAIL,
            $space_id, $discussion_id, $login_id)
        ) {
            $space_service = SpaceService::getInstance();
            $is_member = $space_service->isSpaceMember($login_id, $space_id,
                $login_id);
            if ($is_member) {
                if ($discussion_service->isNotificationUser($discussion_id,
                    $login_id, $space_id, $login_id)
                ) {
                    $this->setSubscribeStatus(self::SUBSCRIBE_STATUS);
                    if ($key == self::UNSUBSCRIBE_ACTION) {
                        $discussion_service->removeNotificationUser($discussion_id,
                            $login_id);
                        $this->setSubscribeStatus(self::UNSUBSCRIBE_STATUS);
                    }
                } else {
                    $this->setSubscribeStatus(self::UNSUBSCRIBE_STATUS);
                    if ($key == self::SUBSCRIBE_ACTION) {
                        $discussion_service->addNotificationUser($discussion_id,
                            $login_id);
                        $this->setSubscribeStatus(self::SUBSCRIBE_STATUS);
                    }
                }
            } else {
                if ($discussion_service->isDiscussionNotificationUser($discussion_id,
                    $login_id)
                ) {
                    $this->setSubscribeStatus(self::SUBSCRIBE_STATUS);
                    if ($key == self::UNSUBSCRIBE_ACTION) {
                        $discussion_service->deleteDiscussionNotificationUser($discussion_id,
                            $login_id);
                        $this->setSubscribeStatus(self::UNSUBSCRIBE_STATUS);
                    }
                } else {
                    $this->setSubscribeStatus(self::UNSUBSCRIBE_STATUS);
                    if ($key == self::SUBSCRIBE_ACTION) {
                        $discussion_service->addDiscussionNotificationUser($discussion_id,
                            $login_id);
                        $this->setSubscribeStatus(self::SUBSCRIBE_STATUS);
                    }
                }
            }
        } else {
            if ($key == self::UNSUBSCRIBE_ACTION) {
                throw new GrnInvalidPermissionException(ErrorCode::GRN_THREAD_NO_UNSUBSCRIBE_PERMISSION);
            }
            throw new GrnInvalidPermissionException(ErrorCode::GRN_THREAD_NO_SUBSCRIBE_PERMISSION);
        }
    }

    /**
     * @return mixed
     */
    public function getSubscribeStatus()
    {
        return $this->_is_subscribe;
    }

    /**
     * @param $status
     */
    private function setSubscribeStatus($status)
    {
        $this->_is_subscribe = $status;
    }
}
