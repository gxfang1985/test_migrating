<?php

namespace grn\space\screen\application\discussion;

use grn\space\service\SpaceService;
use grn\space\service\DiscussionService;
use grn\space\common\data\bean\Authority;
use grn\space\common\exception\GrnInvalidArgumentException;
use grn\space\common\exception\GrnIllegalOperationException;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\common\exception\GrnInvalidPermissionException;
use grn\space\common\exception\ErrorCode;

/**
 * Class ThreadDelete
 */
class ThreadDelete extends DiscussionBase
{
    /**
     * @param $input
     *
     * @throws GrnDataNotFoundException
     * @throws GrnIllegalOperationException
     * @throws GrnInvalidArgumentException
     * @throws GrnInvalidPermissionException
     */
    public function post($input)
    {
        $this->setInput($input);
        $input = $this->getInput();
        $parameter = [self::ARG_SPACE_ID, self::ARG_THREAD_ID];
        $this->checkArgFromInput($parameter, $input);
        $spaceId = $this->getSpaceId();
        $threadId = $this->getThreadId();
        $loginId = $this->getLoginUserId();

        $service = DiscussionService::getInstance();
        $hasWriteAuth
            = $service->hasThreadAccessControl(Authority::AUTHORITY_CODE_WRITE,
            $spaceId, $threadId, $loginId);
        $isAuthority
            = $this->discussionDeletable($service->getThread($threadId,
            $loginId),
            SpaceService::getInstance(),
            $hasWriteAuth,
            $spaceId,
            $loginId);

        if ($isAuthority) {
            try {
                $service->deleteThread($threadId, $loginId);
            } catch (GrnDataNotFoundException $e) {
                $e->setErrorCode(ErrorCode::GRN_INVALID_THREAD_ID);
                throw $e;
            }
        } else {
            throw new GrnInvalidPermissionException(ErrorCode::GRN_THREAD_NO_DELETE_PERMISSION);
        }
    }
}
