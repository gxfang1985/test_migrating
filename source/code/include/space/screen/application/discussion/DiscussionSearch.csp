<?php

namespace grn\space\screen\application\discussion;

use grn\space\service\DiscussionService;
use grn\space\common\data\bean\Authority;
use grn\space\common\data\bean\Application;
use grn\space\common\exception\GrnInvalidArgumentException;
use grn\space\common\exception\GrnInvalidPermissionException;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\common\exception\GrnArgumentOutOfRangeException;
use grn\space\common\exception\GrnRequiredDataIsNotException;
use grn\space\data\condition\SynthesisThreadCommentSearchCondition;
use grn\space\utility\ThreadUtility;
use grn\space\common\utility\SpaceDatetimeUtility;

/**
 * Class DiscussionSearch
 */
class DiscussionSearch extends DiscussionBase
{
    /**
     * @return mixed|string|void
     * @throws GrnArgumentOutOfRangeException
     * @throws GrnDataNotFoundException
     * @throws GrnInvalidArgumentException
     * @throws GrnInvalidPermissionException
     * @throws GrnRequiredDataIsNotException
     */
    public function fetch()
    {
        $input = $this->getInput();

        $parameter = [self::ARG_SPACE_ID, self::ARG_THREAD_ID];
        $this->checkArgFromInput($parameter, $input);

        require_once('grn/smarty.csp');
        $t = new \GRN_Smarty();

        $spaceId = $this->getSpaceId();
        $thread_id = $this->getThreadId();
        $text = $input['text'];
        $loginId = $this->getLoginUserId();
        $currentLanguage = $this->getLanguageCode();
        $limit = $this->getUserConfig()->getListMax();
        $offset = 0;

        if (array_key_exists('sp', $input)) {
            $offset = $input['sp'];
        }

        $discussionService = DiscussionService::getInstance();

        try {
            //Get discussion's root category of the space specified with space Id.
            $rootCategory
                = $discussionService->getApplicationRootCategory($spaceId,
                Application::APPLICATION_CODE_DISCUSSION, $currentLanguage);
            //Check whether target user has the authority to access the space. 
            if ( ! $discussionService->hasThreadCategoryAccessControl(Authority::AUTHORITY_CODE_READ_DETAIL,
                $spaceId, $rootCategory->getId(), $loginId)
            ) {
                throw new GrnInvalidPermissionException(ErrorCode::GRN_NO_READ_PERMISSION);
            }
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_INVALID_SPACE_ID);
            throw $e;
        } catch (GrnArgumentOutOfRangeException $e) {
            throw $e;
        } catch (GrnInvalidArgumentException $e) {
            throw $e;
        }

        $search_count = 0;
        $result = null;
        $key_word_list = cb_parse_search_text($text);
        if (count($key_word_list)) {
            $searchCondition = new SynthesisThreadCommentSearchCondition();

            try {
                $searchCondition->setSearchCategoryId($rootCategory->getId());
                $searchCondition->setSearchScopeType(SynthesisThreadCommentSearchCondition::SEARCH_SCOPE_CATEGORY_DESCENDANT);
                $searchCondition->setSearchPeriod(SynthesisThreadCommentSearchCondition::PERIOD_NONE);
                $searchCondition->setOffset($offset);
                $searchCondition->setLimit($limit);
                $searchCondition->setSearchStringArray($key_word_list);
                $searchCondition->setCaseSensitivity(false);
                $searchCondition->setOrderSortArray([
                        SynthesisThreadCommentSearchCondition::SORT_COMPONENT_MODIFY_TIME_DESC
                        ,
                        SynthesisThreadCommentSearchCondition::SORT_ID_DESC
                        ,
                        SynthesisThreadCommentSearchCondition::SORT_COMMENT_CREATE_TIME_DESC
                    ]
                );

                $synthesisThreadCommentCollection
                    = $discussionService->searchSynthesisThreadCommentBySearchConditionWithAccessControl(
                    Authority::AUTHORITY_CODE_READ_DETAIL, $searchCondition,
                    $loginId);
            } catch (GrnRequiredDataIsNotException $e) {
                throw $e;
            } catch (GrnInvalidArgumentException $e) {
                throw $e;
            }

            ThreadUtility::constructionThreadCommentTruncateUsingUserConfig($synthesisThreadCommentCollection,
                $this->getLoginUser());
            $discussionService->addInspectionCollectionUserInfo($synthesisThreadCommentCollection,
                $loginId, true, false, false, $currentLanguage);
            SpaceDatetimeUtility::constructionComponentInspectionDisplayDatetime($synthesisThreadCommentCollection,
                $this->getDatetimeFormat(),
                SpaceDatetimeUtility::DISPLAY_TYPE_DYNAMIC_IS_NOW_TIME,
                $currentLanguage,
                $this->getTimezoneName());

            $result = [];
            foreach ($synthesisThreadCommentCollection as $threadOrCommentRow) {
                /** @var \grn\space\data\bean\SynthesisThreadComment $threadOrCommentRow */
                $row_for_view = [
                    'tid'           => $threadOrCommentRow->getId(),
                    'comment_num'   => $threadOrCommentRow->getCommentNo(),
                    'title'         => $threadOrCommentRow->getTitle(),
                    'unread'        => $threadOrCommentRow->isUnread(),
                    'dtype'         => $threadOrCommentRow->getObjectType(),
                    'data'          => $threadOrCommentRow->getContent(),
                    'creator_uid'   => $threadOrCommentRow->getCreatorId(),
                    'creator'       => $threadOrCommentRow->getCreator(),
                    'mtime'         => $threadOrCommentRow->getModifyDisplayDatetime(),
                    'ctime'         => $threadOrCommentRow->getCreateDisplayDatetime(),
                    'file_attached' => $threadOrCommentRow->getGrnSpaceFileArray(),

                ];

                $result[] = $row_for_view;
            }
            $search_count
                = $synthesisThreadCommentCollection->getCountNoLimit();
        }

        // Make page navi
        $controllerUtil = new \GRN_ControllerUtil();
        $navi_params = [
            'spid' => $spaceId,
            'tid'  => $thread_id,
            'text' => $text
        ];
        $navi_for_view = $controllerUtil->makeNaviInformation($offset,
            $limit,
            $search_count,
            $navi_params);
        $t->assign('text', $text);
        $t->assign('result', $result);
        $t->assign('spaceId', $spaceId);
        $t->assign('thread_id', $thread_id);
        $t->assign('navi', $navi_for_view);

        return $t->fetch("space/application/discussion/search.tpl");
    }

    /**
     *
     * Return the title of the page
     *
     * @return string
     */
    public function getTitle()
    {
        return grn_get_page_display_name('space/discussion/search');
    }

    /**
     *
     * Return a part of the site position of the page in Discussion application.
     *
     * @return array
     */
    public function getSitePosition()
    {
        $input = $this->getInput();

        return [
            [
                'page'     => 'space/application/discussion/index',
                'name'     => grn_get_page_display_name('space/discussion/index'),
                'spid'     => $input['spid'],
                "fragment" => "tid=" . @ $input['tid'],
            ],
            [
                'page' => '',
                'name' => $this->getTitle(),
            ]
        ];
    }
}
