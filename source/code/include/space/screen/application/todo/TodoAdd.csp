<?php

namespace grn\space\screen\application\todo;

use grn\grn\MemberLogic;
use grn\space\data\bean\SpaceUser;
use grn\space\service\DiscussionService;
use grn\space\service\TodoService;
use grn\space\service\SpaceService;
use grn\space\data\collection\TodoUserCollection;
use grn\space\data\bean\Todo;
use grn\space\data\bean\TodoUser;
use grn\space\common\data\bean\Application;
use grn\space\common\data\bean\Authority;
use grn\space\common\exception\GrnInvalidArgumentException;
use grn\space\common\exception\GrnInvalidPermissionException;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\common\exception\GrnRequiredDataIsNotException;
use grn\space\common\exception\ErrorCode;

/**
 * Class TodoAdd
 */
class TodoAdd extends TodoBase
{
    /**
     * Return raw HTML which will be used without being escaped.
     */
    public function fetch()
    {

    }

    /**
     *
     * Return a part of the site position of the page in Discussion application.
     *
     * @return array
     */
    public function getSitePosition()
    {
        return [
            [
                "page" => "",
                "name" => ""
            ]
        ];
    }

    /**
     *
     * Return the title of the page
     *
     * @return string
     */
    public function getTitle()
    {
    }

    /**
     *
     * Add Todo
     *
     * @throws    GrnInvalidArgumentException
     * @throws    GrnInvalidPermissionException
     * @throws    GrnDataNotFoundException
     * @throws    GrnRequiredDataIsNotException
     *
     * @param     array $input
     *
     * @return    mixed Return {@link \grn\space\data\bean\Todo}
     */
    public function post($input)
    {
        $this->setInput($input);
        $checkArr = [
            self::ARG_SPACE_ID,
            self::ARG_THREAD_ID
        ];

        $this->checkArgFromInput($checkArr, $input);
        if ( ! array_key_exists('title', $input)
             || strlen(cb_trim($input['title'])) == 0
        ) {
            throw new GrnRequiredDataIsNotException(ErrorCode::GRN_TODO_TITLE_IS_NOT_FOUND);
        }

        $spaceId = $this->getSpaceId();
        $threadId = $this->getThreadId();
        $loginId = $this->getLoginUserId();

        try {
            $spaceService = SpaceService::getInstance();
            $space = $spaceService->getSpace($spaceId, $loginId);
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_INVALID_SPACE_ID);
            throw $e;
        }

        try {
            $discussionService = DiscussionService::getInstance();
            $discussionService->getThread($threadId, $loginId);
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_INVALID_THREAD_ID);
            throw $e;
        }

        //check authority
        $todoService = TodoService::getInstance();

        $rootCategory = $todoService->getApplicationRootCategory($spaceId,
            Application::APPLICATION_CODE_TODO, $this->getLanguageCode());
        $isWriteAuthority
            = $todoService->hasTodoCategoryAccessControl(Authority::AUTHORITY_CODE_WRITE,
            $spaceId, $threadId, $rootCategory->getId(), $loginId);
        $hasPrivilege
            = $this->isSpaceAdminOrOperator(SpaceService::getInstance(),
            $spaceId, $loginId);

        if ( ! $isWriteAuthority && ! $hasPrivilege) {
            throw new GrnInvalidPermissionException(ErrorCode::GRN_TODO_NO_CREATE_PERMISSION);
        } else {
            $todoObj = new Todo();
            $todoObj->setCreator($this->makeLoginUserSpaceMember());
            $todoObj->setCategoryId($rootCategory->getId());
            $todoObj->setTitle(preg_replace('/\s\s+/', ' ',
                cb_trim($input['title'])));
            //todo
            $todoObj->setContent(@ $input['memo']);
            $todoObj->setRichText(false);
            // Set start date and deadline date
            $startTimestamp = null;
            $deadlineTimestamp = null;
            require_once('fw/date.csp');
            require_once('fw/basic_date.csp');
            $timezone = $this->getTimezoneName();

            if (@ $input['start_year'] && @ $input['start_month']
                && @ $input['start_day']
            ) {
                $expiration = new \CB_DateTime();
                $expiration->year = $input['start_year'];
                $expiration->month = $input['start_month'];
                $expiration->day = $input['start_day'];
                $startTimestamp = \cb_datetime_to_timestamp($expiration,
                    $timezone);
            }
            if ( ! @ $input['nolimit']) {
                $expiration = new \CB_DateTime();
                $expiration->year = $input['end_year'];
                $expiration->month = $input['end_month'];
                $expiration->day = $input['end_day'];
                $deadlineTimestamp = \cb_datetime_to_timestamp($expiration,
                    $timezone);
            }
            if ($startTimestamp && $deadlineTimestamp
                && ($startTimestamp - $deadlineTimestamp > 0)
            ) {
                throw new GrnInvalidArgumentException(ErrorCode::GRN_TODO_INVALID_DATETIME);
            }

            if ( ! $space->getIsUnlimitedExpirationDate()
                 && $deadlineTimestamp > $space->getExpirationDateTimestamp()
            ) {
                throw  new GrnInvalidArgumentException(ErrorCode::GRN_TODO_INVALID_EXPIRATION_DATE);
            }

            $todoObj->setStartTimestamp($startTimestamp);
            $todoObj->setDeadlineTimestamp($deadlineTimestamp);
            $todoObj->setTimezone($timezone);

            $userCollection = new TodoUserCollection();
            $spaceUserIds = $this->getSpaceUserIds($spaceId);
            if (@ $input['todo_sUID'] && is_array(@ $input['todo_sUID'])) {
                $todoUserIds = $input['todo_sUID'];
                foreach ($todoUserIds as $todoUserId) {
                    if ( ! in_array($todoUserId, $spaceUserIds)) {
                        throw new GrnInvalidArgumentException(ErrorCode::GRN_INVALID_TODO_MEMBER);
                    }
                    $userObj = new TodoUser();
                    $userObj->setMemberID($todoUserId);
                    $userObj->setMemberType(MemberLogic::TYPE_USER);
                    $userCollection->appendBean($userObj);
                }

                $this->checkUsingApp($todoUserIds);
            }

            //attachment file
            require_once('grn/upload.csp');
            $uploadFileArray
                = \GRN_UploadFile::getUploadedFiles(@$input['upload_ticket'],
                @$input['upload_fileids'], true);

            // create todo
            $newTodoObj = $todoService->createTodo($todoObj, $userCollection,
                $this->getLoginUser(), $uploadFileArray, $threadId);

            $session = $this->getSession(self::DISCUSSION_SESSION_KEY);
            $session->set(self::ARG_THREAD_ID, $threadId);

            return $newTodoObj;
        }
    }

    /**
     * @param array $todo_user_ids
     *
     * @throws GrnInvalidArgumentException
     */
    private function checkUsingApp(array $todo_user_ids)
    {
        $space_service = SpaceService::getInstance();
        $space_user_collection
            = $space_service->getSpaceUserCollectionOfUserOnly($this->getSpaceId(),
            $this->getLoginUserId());
        $space_service->addUserInfo($space_user_collection,
            $this->getLoginUserId(),
            $this->isSystemUseEnglish(),
            $this->isEnglishDisplayAfterName(),
            $this->isOrganizationDisplayAfterName(),
            $this->getLanguageCode());
        $space_users = $space_user_collection->getSpaceUsersArray();

        foreach ($todo_user_ids as $todo_user_id) {
            /** @var SpaceUser $space_user */
            $space_user = $space_users[$todo_user_id];
            if ($space_user->isNotUsingApp()) {
                throw new GrnInvalidArgumentException(ErrorCode::GRN_INVALID_TODO_MEMBER);
            }
        }
    }
}
