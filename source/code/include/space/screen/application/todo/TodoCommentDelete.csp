<?php

namespace grn\space\screen\application\todo;

use grn\space\service\SpaceService;
use grn\space\service\TodoService;
use grn\space\screen\application\todo\TodoBase;
use grn\space\common\data\bean\Authority;
use grn\space\common\exception\GrnInvalidArgumentException;
use grn\space\common\exception\GrnInvalidPermissionException;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\common\exception\ErrorCode;

/**
 * Class TodoCommentDelete
 */
class TodoCommentDelete extends TodoBase
{
    /**
     * @param array $input
     *
     * @return null
     * @throws GrnDataNotFoundException
     * @throws GrnInvalidArgumentException
     * @throws GrnInvalidPermissionException
     */
    public function post($input)
    {
        if (strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST') == 0) {
            $this->setInput($input);
            $parameter = [
                self::ARG_SPACE_ID,
                self::ARG_TODO_ID
            ];
            $this->checkArgFromInput($parameter, $input);
            if ( ! array_key_exists('cmid', $input) || $input['cmid'] < 1) {
                throw new GrnInvalidArgumentException(ErrorCode::GRN_TODO_INVALID_COMMENT_ID);
            }

            $todoService = TodoService::getInstance();
            try {
                $thread = $this->getThreadByTodoId($this->getSpaceId(),
                    $this->getTodoId());
                $isAuthority
                    = $todoService->hasTodoCommentAccessControl(Authority::AUTHORITY_CODE_WRITE,
                    $this->getSpaceId(), $thread->getId(), $this->getTodoId(),
                    $input['cmid'], $this->getLoginUserId());
                $hasPrivilege = $this->isSpaceAdmin(SpaceService::getInstance(),
                    $this->getLoginUserId());
                if ($isAuthority || $hasPrivilege) {
                    $todoService->deleteTodoComment($input['cmid'],
                        $this->getTodoId(), $this->makeLoginUserSpaceMember());
                } else {
                    throw new GrnInvalidPermissionException(ErrorCode::GRN_TODO_NO_DELETE_COMMENT_PERMISSION);
                }
            } catch (GrnDataNotFoundException $e) {
                $e->setErrorCode(ErrorCode::GRN_INVALID_TODO_ID);
                throw $e;
            }
        }
    }
}
