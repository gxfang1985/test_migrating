<?php

namespace grn\space\screen\application\todo;

use grn\space\common\data\bean\SpaceFile;
use grn\space\common\data\bean\SpaceMember;
use grn\space\service\TodoService;
use grn\space\service\SpaceService;
use grn\space\common\data\bean\Authority;
use grn\space\common\exception\GrnInvalidArgumentException;
use grn\space\common\exception\GrnInvalidPermissionException;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\common\exception\GrnRequiredDataIsNotException;
use grn\space\common\exception\ErrorCode;
use grn\space\data\bean\TodoUser;
use grn\space\data\collection\TodoUserCollection;
use grn\space\common\utility\SpaceFileUtility;

/**
 * Class TodoModify
 */
class TodoModify extends TodoBase
{
    /**
     *
     * Return raw HTML which will be used without being escaped.
     *
     * @return    string
     * @throws    GrnInvalidArgumentException
     * @throws    GrnInvalidPermissionException
     * @throws    GrnDataNotFoundException
     */
    public function fetch()
    {
        $input = $this->getInput();

        $checkArr = [
            self::ARG_SPACE_ID,
            self::ARG_TODO_ID,
            self::ARG_FROM
        ];

        $this->checkArgFromInput($checkArr, $input);

        $spaceId = $input['spid'];
        $todoId = $input['tdid'];
        $loginId = $this->getLoginUserId();

        require_once("grn/smarty.csp");
        $t = new \GRN_Smarty();

        $t->assign('page_title', $this->getTitle());
        $t->assign('space_id', $spaceId);
        $t->assign('from', $this->getFrom());

        $todoService = TodoService::getInstance();

        try {
            // Check todo modify authority
            $threadObj = $this->getThreadByTodoId($spaceId, $todoId);
            $threadId = $threadObj->getId();
            $isAuthority
                = $todoService->hasTodoAccessControl(Authority::AUTHORITY_CODE_WRITE,
                $spaceId, $threadId, $todoId, $loginId);
            $hasPrivilege
                = $this->isSpaceAdminOrOperator(SpaceService::getInstance(),
                $spaceId, $loginId);

            if ($isAuthority || $hasPrivilege) {
                // Get todo information
                $refTodoObj = $todoService->getTodo($todoId, $loginId);
                // Get todo user
                $todoUserCollection = $refTodoObj->getTodoUserCollection();
            } else {
                throw new GrnInvalidPermissionException(ErrorCode::GRN_TODO_NO_MODIFY_PERMISSION);
            }
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_INVALID_TODO_ID);
            throw $e;
        }

        $t->assign('todo_id', $refTodoObj->getId());
        $t->assign('title', $refTodoObj->getTitle());
        $t->assign('memo', $refTodoObj->getContent());
        $t->assign('thread_id', $threadId);

        // Get start date and deadline date
        require_once('fw/date.csp');
        $timezone = $refTodoObj->getTimezone();
        if ($start_date = $refTodoObj->getStartTimestamp()) {
            $start_date = \cb_timestamp_to_datetime($start_date, $timezone);
            $start_date = new \CB_DateTimeEx($start_date);
            $start_date = $start_date->getDate();
            $t->assign('start_date', $start_date);
        }
        if ($deadline_date = $refTodoObj->getDeadlineTimestamp()) {
            $deadline_date = \cb_timestamp_to_datetime($deadline_date,
                $timezone);
            $deadline_date = new \CB_DateTimeEx($deadline_date);
            $deadline_date = $deadline_date->getDate();
            $t->assign('end_date', $deadline_date);
        }

        // Get Space member & todo user list
        $spaceService = SpaceService::getInstance();
        try {
            // Space memeber list
            $selectedUserArray = [];
            $resultSpaceUserCollection
                = $spaceService->getSpaceUserCollectionOfUserOnly($spaceId,
                $loginId);

            $spaceService->addUserInfo($resultSpaceUserCollection,
                $loginId,
                $this->isSystemUseEnglish(),
                $this->isEnglishDisplayAfterName(),
                $this->isOrganizationDisplayAfterName(),
                $this->getLanguageCode());
            /** @var $spaceMember SpaceMember */
            foreach ($resultSpaceUserCollection as $spaceMember) {
                if ($spaceMember->getId() != ""
                    && ( ! $spaceMember->isNotUsingApp())
                ) {
                    $selectedUserArray[$spaceMember->getMemberID()]
                        = $spaceMember->getDisplayMemberArray();
                }
            }
            $spaceService->addUserInfo($todoUserCollection,
                $loginId,
                $this->isSystemUseEnglish(),
                $this->isEnglishDisplayAfterName(),
                $this->isOrganizationDisplayAfterName(),
                $this->getLanguageCode());

            $todoUserCollection
                = $todoService->filterByCurrentSpaceMemberOnly($todoUserCollection,
                $spaceId);

            $todoUserArray = [];
            // Todo user list
            foreach ($todoUserCollection as $todoUser) {
                /** @var TodoUser $todoUser */
                if ($todoUser->getId() != "") {
                    $todoUserArray[$todoUser->getMemberID()]
                        = $todoUser->getDisplayMemberArray();
                }
            }
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_INVALID_SPACE_ID);
            throw $e;
        }

        $t->assign('users_info', $selectedUserArray);
        $t->assign('selected_users_info', $todoUserArray);

        //Get attachment file
        include('grn/_upload_prepend.csp');

        $spaceFileCollection = $refTodoObj->getSpaceFileCollection();
        $attachedFiles = [];
        foreach ($spaceFileCollection as $file) {
            /** @var SpaceFile $file */
            $attachedFiles[$file->getId()]
                = SpaceFileUtility::getSpaceFileLinkView($file);
        }
        $t->assign('attach_files', $attachedFiles);
        $t->assign('cancel_page', 'space/application/todo/view');

        $thread = parent::getThreadByTodoId($spaceId, $todoId);
        parent::assignTodoDialog($t, $spaceId, $thread->getId());

        return $t->fetch("space/application/todo/todo_edit.tpl");
    }

    /**
     *
     * Return a part of the site position of the page in Todo application.
     *
     * @return array
     */
    public function getSitePosition()
    {
        $input = $this->getInput();
        $this->checkArgFromInput([self::ARG_FROM], $input);

        return [
            [
                "page" => "space/application/todo/index",
                "name" => grn_get_page_display_name("space/todo/index"),
                "spid" => @ $input['spid'],
            ],
            [
                "page" => "space/application/todo/view",
                "name" => grn_get_page_display_name("space/todo/todo_detail"),
                "spid" => @ $input['spid'],
                "tdid" => @ $input['tdid'],
                "from" => $this->getFrom(),
            ],
            [
                "page" => "",
                "name" => grn_get_page_display_name("space/todo/todo_edit"),
            ]
        ];
    }

    /**
     *
     * Return the title of the page
     *
     * @return string
     */
    public function getTitle()
    {
        return grn_get_page_display_name("space/todo/todo_edit");
    }

    /**
     * Modify Todo
     *
     * @throws    GrnInvalidArgumentException
     * @throws    GrnInvalidPermissionException
     * @throws    GrnDataNotFoundException
     * @throws    GrnRequiredDataIsNotException
     *
     * @param     array $input
     *
     * @return    void
     */
    public function post($input)
    {
        $this->setInput($input);

        $checkArr = [
            self::ARG_SPACE_ID,
            self::ARG_TODO_ID
        ];

        $this->checkArgFromInput($checkArr, $input);
        if ( ! array_key_exists('title', $input)
             || strlen(cb_trim($input['title'])) == 0
        ) {
            throw new GrnRequiredDataIsNotException(ErrorCode::GRN_TODO_TITLE_IS_NOT_FOUND);
        }

        $spaceId = $input['spid'];
        $todoId = $input['tdid'];
        $loginId = $this->getLoginUserId();

        $spaceService = SpaceService::getInstance();
        try {
            $space = $spaceService->getSpace($spaceId, $loginId,
                $this->getLanguageCode());
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_INVALID_SPACE_ID);
            throw $e;
        }

        $todoService = TodoService::getInstance();
        try {
            // Check todo modify authority
            $threadObj = $this->getThreadByTodoId($spaceId, $todoId);
            $threadId = $threadObj->getId();
            $isAuthority
                = $todoService->hasTodoAccessControl(Authority::AUTHORITY_CODE_WRITE,
                $spaceId, $threadId, $todoId, $loginId);
            $hasPrivilege
                = $this->isSpaceAdminOrOperator(SpaceService::getInstance(),
                $spaceId, $loginId);

            if ($isAuthority || $hasPrivilege) {
                // Get Todo
                $refTodoObj = $todoService->getTodo($todoId, $loginId);

                // Modify todo information
                $refTodoObj->setModifier($this->makeLoginUserSpaceMember());
                $refTodoObj->setTitle(preg_replace('/\s\s+/', ' ',
                    cb_trim($input['title'])));
                $refTodoObj->setContent(@ $input['memo']);
                $refTodoObj->setRichText(false);

                // Modify start date and deadline date
                $startTimestamp = null;
                $deadlineTimestamp = null;

                require_once('fw/date.csp');
                require_once('fw/basic_date.csp');
                $timezone = $refTodoObj->getTimezone();
                if (@ $input['start_year'] && @ $input['start_month']
                    && @ $input['start_day']
                ) {
                    $expiration = new \CB_DateTime();
                    $expiration->year = $input['start_year'];
                    $expiration->month = $input['start_month'];
                    $expiration->day = $input['start_day'];
                    $startTimestamp = \cb_datetime_to_timestamp($expiration,
                        $timezone);
                }
                if ( ! @ $input['nolimit']) {
                    $expiration = new \CB_DateTime();
                    $expiration->year = $input['end_year'];
                    $expiration->month = $input['end_month'];
                    $expiration->day = $input['end_day'];
                    $deadlineTimestamp = \cb_datetime_to_timestamp($expiration,
                        $timezone);
                }
                if ($startTimestamp && $deadlineTimestamp
                    && ($startTimestamp - $deadlineTimestamp > 0)
                ) {
                    throw new GrnInvalidArgumentException(ErrorCode::GRN_TODO_INVALID_DATETIME);
                }

                $is_valid_expiration_date = $deadlineTimestamp
                                            && ($deadlineTimestamp
                                                > $space->getExpirationDateTimestamp());
                if ( ! $space->getIsUnlimitedExpirationDate()
                     && $is_valid_expiration_date
                ) {
                    throw new GrnInvalidArgumentException(ErrorCode::GRN_TODO_INVALID_EXPIRATION_DATE);
                }
                $refTodoObj->setStartTimestamp($startTimestamp);
                $refTodoObj->setDeadlineTimestamp($deadlineTimestamp);

                // Modify todo user
                $userCollection = new TodoUserCollection();
                $spaceUserIds = $this->getSpaceUserIds($spaceId);
                if (@ $input['todo_sUID'] && is_array(@ $input['todo_sUID'])) {
                    $is_initialize = false;
                    $status_initialize = cb_at($input, 'status_initialize');
                    if ($status_initialize
                        && $status_initialize
                           == TodoUser::ASSIGNEES_STATUS_INITIALIZE_ON
                    ) {
                        $is_initialize = true;
                    }

                    $todoUserIds = $input['todo_sUID'];
                    foreach ($todoUserIds as $todoUserId) {
                        if ( ! in_array($todoUserId, $spaceUserIds)) {
                            throw new GrnInvalidArgumentException(ErrorCode::GRN_INVALID_TODO_MEMBER);
                        }
                        $userObj = new TodoUser();
                        $userObj->setId($todoUserId);
                        $userObj->setMemberID($todoUserId);
                        $userObj->setTodoId($todoId);
                        $userObj->setInitialize($is_initialize);
                        $userCollection->appendBean($userObj);
                    }
                }

                // --- Modify attachment file start---
                require_once('grn/controller.csp');

                // Get current thread files
                $grnSpaceFileArray = $refTodoObj->getGrnSpaceFileArray();
                // Get user selected files
                $files = [];
                if (array_key_exists('fids', $input)
                    && is_array($input['fids'])
                ) {
                    foreach ($input['fids'] as $fid) {
                        if (array_key_exists($fid, $grnSpaceFileArray)) {
                            $files[$fid] = $grnSpaceFileArray[$fid];
                        }
                    }
                }

                // Get upload files
                require_once('grn/upload.csp');
                $uploadFileArray
                    = \GRN_UploadFile::getUploadedFiles(@$input['upload_ticket'],
                    @$input['upload_fileids'], true);
                foreach ($uploadFileArray as $fid => $file) {
                    if ( ! array_key_exists($fid, $files)) {
                        $files[$fid] = $file;
                    }
                }
                // --- Modify attachment file end---

                // modify todo
                $todoService->modifyTodo($refTodoObj, $userCollection,
                    $this->getLoginUser(), $files);
            } else {
                throw new GrnInvalidPermissionException(ErrorCode::GRN_TODO_NO_MODIFY_PERMISSION);
            }
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_INVALID_TODO_ID);
            throw $e;
        }
    }
}
