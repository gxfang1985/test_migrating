<?php

namespace grn\space\screen\application\todo;

use grn\space\service\SpaceService;
use grn\space\service\DiscussionService;
use grn\space\service\TodoService;
use grn\space\common\data\bean\Authority;
use grn\space\common\data\bean\Application;
use grn\space\common\exception\GrnInvalidArgumentException;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\common\exception\GrnInvalidPermissionException;
use grn\space\common\exception\ErrorCode;

/**
 * Class TodoDelete
 */
class TodoDelete extends TodoBase
{
    public function fetch()
    {

    }

    /**
     * @param array $input
     *
     * @return null
     * @throws GrnDataNotFoundException
     * @throws GrnInvalidArgumentException
     * @throws GrnInvalidPermissionException
     * @throws \grn\space\common\exception\GrnArgumentOutOfRangeException
     */
    public function post($input)
    {
        $input = $this->getInput();
        $checkArr = [
            self::ARG_SPACE_ID,
            self::ARG_TODO_ID
        ];

        $this->checkArgFromInput($checkArr, $input);
        $spid = $input['spid'];
        $tdid = $input['tdid'];
        $loginId = $this->getLoginUserId();

        try {
            $spaceService = SpaceService::getInstance();
            $space = $spaceService->getSpace($spid, $loginId,
                $this->getLanguageCode());
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_INVALID_SPACE_ID);
            throw $e;
        }

        $service = DiscussionService::getInstance();
        try {
            $rootThreadCategoryObj = $service->getApplicationRootCategory($spid,
                Application::APPLICATION_CODE_DISCUSSION,
                $this->getLanguageCode());
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_INVALID_CATEGORY_ID);
            throw $e;
        }

        if ($service->hasThreadCategoryAccessControl(Authority::AUTHORITY_CODE_READ_DETAIL,
            $spid, $rootThreadCategoryObj->getId(), $loginId)
        ) {
            try {
                $thread = $service->getThreadByTodoId($tdid, $loginId);
            } catch (GrnDataNotFoundException $e) {
                $e->setErrorCode(ErrorCode::GRN_INVALID_TODO_ID);
                throw $e;
            }
            $todoService = TodoService::getInstance();
            $isAuthority
                = $todoService->hasTodoAccessControl(Authority::AUTHORITY_CODE_WRITE,
                $spid, $thread->getId(), $tdid, $loginId);
            $hasPrivilege = $this->isSpaceAdminOrOperator($spaceService, $spid,
                $loginId);
            if ($isAuthority || $hasPrivilege) {
                try {
                    $todoService->deleteTodo($tdid, $loginId);
                    $session = $this->getSession(self::DISCUSSION_SESSION_KEY);
                    $session->set(self::ARG_THREAD_ID, $thread->getId());
                } catch (GrnDataNotFoundException $e) {
                    $e->setErrorCode(ErrorCode::GRN_INVALID_TODO_ID);
                    throw $e;
                }
            } else {
                throw new GrnInvalidPermissionException(ErrorCode::GRN_TODO_NO_DELETE_PERMISSION);
            }

        } else {
            throw new GrnInvalidPermissionException(ErrorCode::GRN_THREAD_NO_ACCESS_PERMISSION);
        }
    }
}
