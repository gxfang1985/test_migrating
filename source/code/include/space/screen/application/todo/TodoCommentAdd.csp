<?php

namespace grn\space\screen\application\todo;

use grn\space\screen\application\todo\TodoBase;
use grn\space\common\data\bean\Authority;
use grn\space\common\exception\GrnInvalidArgumentException;
use grn\space\common\exception\GrnInvalidPermissionException;
use grn\space\common\exception\GrnRequiredDataIsNotException;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\service\TodoService;
use grn\space\common\data\bean\Comment;
use grn\space\common\exception\ErrorCode;

/**
 * Class TodoCommentAdd
 */
class TodoCommentAdd extends TodoBase
{
    /**
     * @param array $input
     *
     * @return null
     * @throws GrnDataNotFoundException
     * @throws GrnInvalidArgumentException
     * @throws GrnInvalidPermissionException
     * @throws GrnRequiredDataIsNotException
     */
    public function post($input)
    {
        $this->setInput($input);
        $checkArr = [
            self::ARG_SPACE_ID,
            self::ARG_TODO_ID
        ];

        $this->checkArgFromInput($checkArr, $input);

        $todoService = TodoService::getInstance();
        try {
            // Check todo modify authority
            $threadObj = $this->getThreadByTodoId($this->getSpaceId(),
                $this->getTodoId());
            $isAuthority = $todoService->hasTodoAccessControl(
                Authority::AUTHORITY_CODE_READ_DETAIL, $this->getSpaceId(),
                $threadObj->getId(), $this->getTodoId(),
                $this->getLoginUserId());

            if ($isAuthority) {
                // Get todo information
                $refTodoObj = $todoService->getTodo($this->getTodoId(),
                    $this->getLoginUserId());
            } else {
                throw new GrnInvalidPermissionException(ErrorCode::GRN_TODO_NO_WRITE_COMMENT_PERMISSION);
            }

            //todo comment
            $commentObj = new Comment();
            $commentObj->setCreator($this->makeLoginUserSpaceMember());
            if (array_key_exists('todo_comment_add', $input)
                && ( ! is_null($input['todo_comment_add'])
                     && strlen($input['todo_comment_add']) > 0)
            ) {
                if (array_key_exists('todo_comment_add_editor', $input)
                    && $input['todo_comment_add_editor']
                ) {
                    require_once('grn/controller.csp');
                    $commentObj->setContent($input['todo_comment_add']);
                    $commentObj->setRichText(true);
                } else {
                    $commentObj->setContent($input['todo_comment_add']);
                    $commentObj->setRichText(false);
                }
            }

            $commentObj->setParentApplicationType(Comment::PARENT_APPLICATION_TYPE_TODO);
            $commentObj->setParentApplicationId($refTodoObj->getId());

            // Todo comment reply 
            if (array_key_exists('reply_comment_id', $input)) {
                if ($input['reply_comment_id'] < 1) {
                    throw new GrnInvalidArgumentException(ErrorCode::GRN_TODO_INVALID_COMMENT_ID);
                } else {
                    $commentObj->setParentCommentId($input['reply_comment_id']);
                }
            }

            require_once('grn/upload.csp');
            $uploadFileArray
                = \GRN_UploadFile::getUploadedFiles(@$input['upload_ticket'],
                @$input['upload_fileids'], true);

            // File check 
            if (is_null($input['todo_comment_add'])
                || strlen(cb_trim($input['todo_comment_add'])) < 1
            ) {
                if ( ! $uploadFileArray || count($uploadFileArray) == 0) {
                    throw new GrnRequiredDataIsNotException(ErrorCode::GRN_TODO_EMPTY_COMMENT);
                }
            }

            $todoService->createTodoComment($commentObj, $refTodoObj->getId(),
                $this->getLoginUser(), $uploadFileArray);
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_TODO_INVALID_COMMENT_ID);
            throw $e;
        }
    }
}
