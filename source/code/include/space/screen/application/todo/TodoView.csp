<?php

namespace grn\space\screen\application\todo;

use grn\space\common\data\collection\SpaceMemberCollection;
use grn\space\common\logic\SpaceMemberLogic;
use grn\space\service\SpaceService;
use grn\favour\service\FavourService;
use grn\space\service\TodoService;
use grn\space\common\data\bean\Authority;
use grn\space\common\exception\GrnInvalidPermissionException;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\common\exception\ErrorCode;
use grn\space\common\utility\SpaceDatetimeUtility;
use grn\space\common\utility\SpaceFileUtility;
use grn\space\data\bean\Thread;
use grn\space\data\bean\TodoUser;

/**
 * Class TodoView
 */
class TodoView extends TodoBase
{
    /**
     * Member of the Todo(complete)
     *
     * @var $_todoCompleteUserArray
     */
    private $_todoCompleteUserArray = [];

    /**
     * Member of the Todo(uncomplete)
     *
     * @var $_todoUncompleteUserArray
     */
    private $_todoUncompleteUserArray = [];

    /**
     * Check whether login user has completed the todo
     *
     * @var $_loginUserComplete
     */
    private $_loginUserComplete;

    /**
     * Check whether login user is todo user
     *
     * @var $_isTodoUser
     */
    private $_isTodoUser;

    /**
     * Get attach files of todo.
     *
     * @var $_attachedFiles
     */
    private $_attachedFiles;

    /**
     * (non-PHPdoc)
     * @see grn\space\application\todo.TodoBase::setInput()
     *
     * @param $input
     *
     * @return \grn\space\screen\application\todo\TodoView
     */
    public function __construct($input)
    {
        parent::__construct($input);

        $checkArr = [
            self::ARG_SPACE_ID,
            self::ARG_TODO_ID,
            self::ARG_FROM
        ];

        $this->checkArgFromInput($checkArr, $input);
        $this->setLoginUserComplete(self::LOGIN_USER_UNCOMPLETE);
        $this->setIsTodoUser(self::NOT_TODO_USER);
    }

    /**
     * @param TodoUser $todoUser
     */
    private function setTodoCompleteUserArray(TodoUser $todoUser)
    {
        $this->_todoCompleteUserArray[] = $todoUser;
    }

    /**
     * @return array
     */
    private function getTodoCompleteUserArray()
    {
        return $this->_todoCompleteUserArray;
    }

    /**
     * @param TodoUser $todoUser
     */
    private function setTodoUncompleteUserArray(TodoUser $todoUser)
    {
        $this->_todoUncompleteUserArray[] = $todoUser;
    }

    /**
     * @return array
     */
    private function getTodoUncompleteUserArray()
    {
        return $this->_todoUncompleteUserArray;
    }

    /**
     * @param $flag
     */
    private function setIsTodoUser($flag)
    {
        $this->_isTodoUser = $flag;
    }

    private function isTodoUser()
    {
        return $this->_isTodoUser;
    }

    /**
     * @param $flag
     */
    private function setLoginUserComplete($flag)
    {
        $this->_loginUserComplete = $flag;
    }

    private function getLoginUserComplete()
    {
        return $this->_loginUserComplete;
    }

    /**
     * @param $attachedFiles
     */
    private function setTodoAttachedFiles($attachedFiles)
    {
        $this->_attachedFiles = $attachedFiles;
    }

    private function getTodoAttachedFiles()
    {
        return $this->_attachedFiles;
    }

    /**
     * @param array[] $todo_users
     *
     * @return array
     */
    private function getTodoMemberCollectionArrayOfJudgedIfMember($todo_users)
    {
        $space_id = $this->getSpaceId();
        $operation_user_id = $this->getLoginUserId();

        return TodoService::getInstance()
                          ->getTodoMemberCollectionArrayOfJudgedIfMember($todo_users,
                              $space_id, $operation_user_id);
    }

    /**
     *
     * Return raw HTML which will be used without being escaped.
     *
     * @return    string
     * @throws    GrnInvalidPermissionException
     * @throws    GrnDataNotFoundException
     */
    public function fetch()
    {
        $input = $this->getInput();
        $userId = $this->getLoginUserId();

        require_once("grn/smarty.csp");
        $t = new \GRN_Smarty();

        //generate upload ticket
        include('grn/_upload_prepend.csp');
        $t->assign('reply_upload_ticket', \GRN_UploadTicket::create($userId));

        $thread = $this->getThreadByTodoId($this->getSpaceId(),
            $this->getTodoId());
        $this->setThreadId($thread->getId());
        $todo = $this->getTodo($thread);

        $todoService = TodoService::getInstance();
        if ($todoService->isNotConfirmedTodoNotification($userId,
            $todo->getId())
        ) {
            $todoService->confirmTodoNotification($userId, $todo);
        }
        $t->assign('page_title', $this->getTitle());
        $t->assign('inline', $this->getUserConfig()->getInlineSetting());
        $t->assign('todo', $todo);
        $t->assign('space_id', $this->getSpaceId());
        $t->assign('thread', $thread);
        $t->assign('start_date', $this->transferTimestampToDateEx($todo,
            $todo->getStartTimestamp()));
        $t->assign('end_date', $this->transferTimestampToDateEx($todo,
            $todo->getDeadlineTimestamp()));
        $t->assign('current_timezone', $this->getTimezoneName());
        $t->assign('todo_uncomplete_user_array',
            $this->getTodoMemberCollectionArrayOfJudgedIfMember($this->getTodoUncompleteUserArray()));
        $t->assign('todo_complete_user_array',
            $this->getTodoMemberCollectionArrayOfJudgedIfMember($this->getTodoCompleteUserArray()));
        $t->assign('attachedFiles', $this->getTodoAttachedFiles());
        $t->assign('isOperator', $this->isOperator($userId));
        $t->assign('isTodoUser', $this->isTodoUser());
        $t->assign('isExcludedToDoUser', $this->isExcludedToDoUser($userId));
        $t->assign('hasPrivilege',
            $this->isSpaceAdminOrOperator(SpaceService::getInstance(),
                $this->getSpaceId(), $userId));
        $t->assign('loginUserComplete', $this->getLoginUserComplete());
        $t->assign('from', $this->getFrom());
        $t->assign('sp', @ $input[self::ARG_NAVI_TAG]);
        $t->assign('cmno', @ $input[self::ARG_COMMENT_NUMBER]);
        $t->assign('cmid', @ $input[self::ARG_COMMENT_ID]);
        $t->assign('can_edit', $this->canEdit());

        // for favour
        $favour_service = new FavourService();
        $is_favour_active = $favour_service->isFavourAppActive();
        if ($is_favour_active) {
            $params = [
                self::ARG_SPACE_ID  => $this->getSpaceId(),
                self::ARG_THREAD_ID => $thread->getId()
            ];
            require_once('space/GrnSpaceApplication.csp');
            $favour_info
                = $favour_service->constructFavourInfo(\GrnSpaceApplication::GRN_SPACE_MODULE_ID,
                \GrnSpaceApplication::FAVOUR_TODO_BODY,
                $todo->getId(),
                $userId,
                $params,
                \GrnSpaceApplication::GRN_TODO_SUB_MODULE_ID);
            $t->assign('favour_info', $favour_info);
        }
        $t->assign('is_favour_active', $is_favour_active);

        $delete_info = [
            'title'      => grn_get_page_display_name('space/todo/todo_delete'),
            'page'       => 'space/application/todo/todo_delete.tpl',
            'no_confirm' => false,
            'data'       => [
                'space_id'   => $this->getSpaceId(),
                'tid'        => $thread->getId(),
                'todo_id'    => $todo->getId(),
                'from'       => $this->getFrom(),
                'title'      => $todo->getTitle(),
                'start_date' => $todo->getStartTimestamp(),
                'end_date'   => $todo->getDeadlineTimestamp(),
                'memo'       => $todo->getContent(),
            ],
            'handler'    => 'lnk_delete',
        ];
        $t->assign('delete_info', $delete_info);

        return $t->fetch("space/application/todo/todo_detail.tpl");
    }

    /**
     * Modify Thread
     *
     * @throws    GrnInvalidPermissionException
     * @throws    GrnDataNotFoundException
     *
     * @param     array $input
     *
     * @return    mixed
     */
    public function post($input)
    {
        $userId = $this->getLoginUserId();
        $thread = $this->getThreadByTodoId($this->getSpaceId(),
            $this->getTodoId());
        $this->setThreadId($thread->getId());
        $todo = $this->getTodo($thread);

        // Change todo user status
        $todoService = TodoService::getInstance();
        try {
            if ($this->isTodoUser() == self::IS_TODO_USER) {
                // Uncomplete a todo
                if ($this->getLoginUserComplete()
                    == self::LOGIN_USER_COMPLETE
                ) {
                    $todoService->incompletedTodo($todo->getId(), $userId,
                        $this->makeLoginUserSpaceMember());
                } // Complete a todo
                else {
                    $todoService->completedTodo($todo->getId(), $userId,
                        $this->makeLoginUserSpaceMember());
                }
            } else {
                throw new GrnInvalidPermissionException(ErrorCode::GRN_TODO_NO_STATUS_MODIFY_PERMISSION);
            }
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_INVALID_TODO_ID);
            throw $e;
        }
    }

    /**
     *
     * Return a part of the site position of the page in Discussion application.
     *
     * @return array
     */
    public function getSitePosition()
    {
        $input = $this->getInput();

        return [
            [
                "page" => "space/application/todo/index",
                "name" => grn_get_page_display_name("space/todo/index"),
                "spid" => @ $input['spid'],
            ],
            [
                "page" => "",
                "name" => grn_get_page_display_name("space/todo/todo_detail"),
            ]
        ];
    }

    /**
     *
     * Return the title of the page
     *
     * @return string
     */
    public function getTitle()
    {
        return grn_get_page_display_name("space/todo/todo_detail");
    }

    /**
     * @param \grn\space\data\bean\Thread $thread
     *
     * @return \grn\space\data\bean\Todo
     * @throws GrnDataNotFoundException
     * @throws GrnInvalidPermissionException
     */
    private function getTodo(Thread $thread)
    {
        $todoService = TodoService::getInstance();
        $userId = $this->getLoginUserId();
        $languageId = $this->getLanguageCode();
        $isSystemUseEnglish = $this->isSystemUseEnglish();
        $isEngDisplayAfterName = $this->isEnglishDisplayAfterName();
        $isOrgDisplayAfterName = $this->isOrganizationDisplayAfterName();

        try {
            // Check todo read authority
            $isAuthority
                = $todoService->hasTodoAccessControl(Authority::AUTHORITY_CODE_READ_DETAIL,
                $this->getSpaceId(), $thread->getId(), $this->getTodoId(),
                $userId);

            if ($isAuthority) {
                // Get todo
                $refTodoObj = $todoService->getTodo($this->getTodoId(),
                    $userId);

                // Construction display user name and update time
                $todoService->addInspectionUserInfo(
                    $refTodoObj,
                    $userId,
                    $isSystemUseEnglish,
                    $isEngDisplayAfterName,
                    $isOrgDisplayAfterName,
                    $languageId);
                SpaceDatetimeUtility::constructDisplayDatetimeOfInspection(
                    $refTodoObj,
                    $this->getDatetimeFormat(),
                    SpaceDatetimeUtility::DISPLAY_TYPE_LONGDATE_AND_TIME,
                    $languageId,
                    $this->getTimezoneName());

                // Construction display todo user name
                $todoUserCollection = $refTodoObj->getTodoUserCollection();
                $todoService->addUserInfo(
                    $todoUserCollection,
                    $userId,
                    $isSystemUseEnglish,
                    $isEngDisplayAfterName,
                    $isOrgDisplayAfterName,
                    $languageId);

                foreach ($todoUserCollection as $todoUser) {
                    /** @var \grn\space\data\bean\TodoUser $todoUser */
                    if ($todoUser->getMemberID() == $userId) {
                        $this->setIsTodoUser(self::IS_TODO_USER);
                    }
                    if ($todoUser->isComplete()) {
                        if ($todoUser->getMemberID() == $userId) {
                            $this->setLoginUserComplete(self::LOGIN_USER_COMPLETE);
                        }
                        $this->setTodoCompleteUserArray($todoUser);
                    } else {
                        $this->setTodoUncompleteUserArray($todoUser);
                    }
                }

                // Get attachment file
                $spaceFileCollection = $refTodoObj->getSpaceFileCollection();
                $attachedFiles = [];
                foreach ($spaceFileCollection as $file) {
                    /** @var \grn\space\common\data\bean\SpaceFile $file */
                    $attachedFiles[$file->getId()]
                        = SpaceFileUtility::getSpaceFileLinkView($file);
                }
                $this->setTodoAttachedFiles($attachedFiles);
            } else {
                throw new GrnInvalidPermissionException(ErrorCode::GRN_TODO_NO_ACCESS_PERMISSION);
            }
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_INVALID_TODO_ID);
            throw $e;
        }

        return $refTodoObj;
    }

    /**
     * Operation access check
     *
     * @param     $userId
     *
     * @return    boolean       TRUE:It has the operation access     FALSE:It doesn't have the operation access.
     */
    private function isOperator($userId)
    {
        $todoService = TodoService::getInstance();
        // Operation access check
        $is_operator
            = $todoService->hasTodoAccessControl(Authority::AUTHORITY_CODE_WRITE,
            $this->getSpaceId(), $this->getThreadId(), $this->getTodoId(),
            $userId);

        if ( ! $is_operator) {
            return $this->includeTodoOperator($userId);
        }

        return $is_operator;
    }

    /**
     * @param $user_id
     *
     * @return bool
     */
    private function includeTodoOperator($user_id)
    {
        $uncomplete_users = $this->getTodoUncompleteUserArray();
        /** @var TodoUser $uncomplete_user */
        foreach ($uncomplete_users as $uncomplete_user) {
            if ($user_id === $uncomplete_user->getMemberID()) {
                return true;
            }
        }

        $complete_users = $this->getTodoCompleteUserArray();
        /** @var TodoUser $complete_user */
        foreach ($complete_users as $complete_user) {
            if ($user_id === $complete_user->getMemberID()) {
                return true;
            }
        }

        return false;
    }


    /**
     * @param int $user_id
     *
     * @return bool
     */
    private function isExcludedToDoUser($user_id)
    {
        $space_users = $this->getSpaceUserIds($this->getSpaceId());
        $is_space_user = in_array($user_id, $space_users);

        $is_excluded_todo_user = ($is_space_user == false
                                  && $this->isTodoUser()) ?: false;

        return $is_excluded_todo_user;
    }

    /**
     * @return bool
     */
    private function canEdit()
    {
        $todo_service = TodoService::getInstance();

        $isAuthority
            = $todo_service->hasTodoAccessControl(Authority::AUTHORITY_CODE_WRITE,
            $this->getSpaceId(),
            $this->getThreadId(), $this->getTodoId(), $this->getLoginUserId());
        $hasPrivilege
            = $this->isSpaceAdminOrOperator(SpaceService::getInstance(),
            $this->getSpaceId(), $this->getLoginUserId());

        return $isAuthority || $hasPrivilege;
    }
}
