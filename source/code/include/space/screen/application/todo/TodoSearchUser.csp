<?php

namespace grn\space\screen\application\todo;

use grn\grn\JSONResponse;
use grn\grn\MemberLogic;
use grn\space\data\condition\TodoSearchCondition;
use grn\space\service\SpaceService;
use grn\space\service\TodoService;
use grn\space\data\condition\SpaceUserSearchCondition;
use grn\space\common\data\bean\Application;
use grn\space\common\data\bean\Authority;
use grn\space\common\exception\GrnInvalidPermissionException;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\common\exception\ErrorCode;

require_once("grn/controller.csp");
require_once("grn/ui.csp");

/**
 * Class TodoSearchUser
 */
class TodoSearchUser extends TodoBase
{
    const MAX_SEARCH_LIMIT = 20;

    /**
     * @throws GrnDataNotFoundException
     * @throws GrnInvalidPermissionException
     */
    public function IncrementalSearch()
    {
        $input = $this->getInput();

        $check_arr = [self::ARG_SPACE_ID];
        $this->checkArgFromInput($check_arr, $input);

        $space_id = $this->getSpaceId();
        $login_user = $this->getLoginUser();
        $thread_id = $this->getThreadId();
        $searchable_user_ids = $this->getSearchableUserIds($space_id,
            $thread_id);

        try {
            // Check todo write authority
            $spaceService = SpaceService::getInstance();
            $todo_service = TodoService::getInstance();

            $read_auth
                = $spaceService->hasSpaceAccessControl(Authority::AUTHORITY_CODE_READ_DETAIL,
                $space_id, $login_user->getOID());
            if ( ! $read_auth) {
                throw new GrnInvalidPermissionException(ErrorCode::GRN_TODO_NO_CREATE_PERMISSION);
            }

            $members_info = [];
            $search_key = $this->getArrayValue('keyword', $input);
            $search_keys = (is_null($search_key)) ? []
                : cb_parse_search_text($search_key);
            $result_space_user_collection
                = $spaceService->getSpaceUserCollectionOfUserOnly($space_id,
                $login_user->getOID());
            $out_of_space_member_ids
                = $todo_service->getNoSpaceMemberIds($space_id,
                $login_user->getOID());
            if (count($search_keys) !== 0) {
                $search_user_ids = [];
                foreach ($result_space_user_collection as $eachSpaceUser) {
                    $search_user_ids[] = $eachSpaceUser->getMemberID();
                }
                foreach ($out_of_space_member_ids as $out_of_space_member_id) {
                    $search_user_ids[] = $out_of_space_member_id;
                }
                if (count($search_user_ids) > 0) {
                    $searchCondition = new SpaceUserSearchCondition();
                    $searchCondition->setSearchSpaceId($space_id);
                    $searchCondition->setSearchItemBit(SpaceUserSearchCondition::SEARCH_ITEM_USER_NAME);
                    $searchCondition->setSearchStringArray($search_keys);
                    $searchCondition->setSearchUserCandidate($search_user_ids);
                    $searchCondition->setOffset(0);
                    $searchCondition->setLimit(self::MAX_SEARCH_LIMIT);
                    $searchCondition->setOrderSortArray([SpaceUserSearchCondition::SORT_FIELD_USER_CANDIDATE]);
                    $result_space_user_collection
                        = $spaceService->searchSpaceUserBySearchCondition($searchCondition,
                        $login_user->getOID());
                } else {
                    $result_space_user_collection = new SpaceUserCollection();
                }
            }

            $spaceService->addUserInfo($result_space_user_collection,
                $login_user->getOID(),
                $this->isSystemUseEnglish(),
                $this->isEnglishDisplayAfterName(),
                $this->isOrganizationDisplayAfterName(),
                $this->getLanguageCode());

            $display_icon = \GRN_ControllerUtil::getUserIconFormat($login_user);

            /** @var $space_member \grn\space\common\data\bean\SpaceMember */
            foreach ($result_space_user_collection as $space_member) {
                $member_id = $space_member->getMemberID();
                if ( ! array_key_exists($member_id, $searchable_user_ids)) {
                    continue;
                }
                $display_array = [];
                $display_array["_id"] = $member_id;
                $display_array["col_foreign_key"]
                    = $space_member->getForeignKey();
                $display_array["col_display_name"]
                    = $space_member->getDisplayName();
                $display_array["col_nickname"]
                    = $space_member->getNickname();
                $display_array[MemberLogic::IS_LOGIN_USER]
                    = $space_member->isLoginUser();
                $display_array[MemberLogic::IS_INVALID_USER]
                    = $space_member->isInvalidUser() ? true
                    : null;
                $display_array[MemberLogic::IS_NOT_USING_APP]
                    = $space_member->isNotUsingApp();
                if ($display_icon) {
                    $display_array["icon_path"]
                        = \GRN_ControllerUtil::getUserIconPath(\GRN_ControllerUtil::getUserProfilePhotoSmallSize(),
                        $member_id);
                }
                $display_array["url"]
                    = \GRN_ControllerUtil::getPopupUserProfileURL($display_array);

                $members_info[] = $display_array;
            }
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_INVALID_SPACE_ID);
            throw $e;
        }

        $json = JSONResponse::create();
        $json->response(["user" => $members_info]);
    }

    /**
     * Return raw HTML which will be used without being escaped.
     *
     * @return string
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException
     * @throws    GrnInvalidPermissionException
     * @throws    GrnDataNotFoundException
     */
    public function fetch()
    {
        $input = $this->getInput();

        $checkArr = [
            self::ARG_SPACE_ID,
            self::ARG_THREAD_ID
        ];
        $this->checkArgFromInput($checkArr, $input);

        $spaceId = $this->getSpaceId();
        $threadId = $this->getThreadId();
        $loginId = $this->getLoginUserId();

        try {
            // Check todo write authority
            $todoService = TodoService::getInstance();

            $rootCategory = $todoService->getApplicationRootCategory($spaceId,
                Application::APPLICATION_CODE_TODO, $this->getLanguageCode());
            $isWriteAuthority
                = $todoService->hasTodoCategoryAccessControl(Authority::AUTHORITY_CODE_WRITE,
                $spaceId, $threadId, $rootCategory->getId(), $loginId);

            if ( ! $isWriteAuthority) {
                throw new GrnInvalidPermissionException(ErrorCode::GRN_TODO_NO_CREATE_PERMISSION);
            }
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_INVALID_SPACE_ID);
            throw $e;
        }

        $spaceService = SpaceService::getInstance();
        try {
            $members_info = [];
            $search_key = $this->getArrayValue('keyword', $input);
            $search_keys = (is_null($search_key)) ? []
                : cb_parse_search_text($search_key);
            $resultSpaceUserCollection
                = $spaceService->getSpaceUserCollectionOfUserOnly($spaceId,
                $loginId);
            if (count($search_keys) !== 0) {
                $search_user_ids = [];
                foreach ($resultSpaceUserCollection as $eachSpaceUser) {
                    $search_user_ids[] = $eachSpaceUser->getMemberID();
                }
                if (count($search_user_ids) > 0) {
                    $searchCondition = new SpaceUserSearchCondition();
                    $searchCondition->setSearchSpaceId($spaceId);
                    $searchCondition->setSearchItemBit(SpaceUserSearchCondition::SEARCH_ITEM_USER_NAME);
                    $searchCondition->setSearchStringArray($search_keys);
                    $searchCondition->setSearchUserCandidate($search_user_ids);
                    $searchCondition->setOrderSortArray([SpaceUserSearchCondition::SORT_DISPLAY_ORDER_ASC]);
                    $resultSpaceUserCollection
                        = $spaceService->searchSpaceUserBySearchCondition($searchCondition,
                        $loginId);
                } else {
                    $resultSpaceUserCollection = new SpaceUserCollection();
                }
            }

            $spaceService->addSimpleUserInfo($resultSpaceUserCollection);
            /** @var $spaceMember \grn\space\common\data\bean\SpaceMember */
            foreach ($resultSpaceUserCollection as $spaceMember) {
                if ($spaceMember->isNotUsingApp()) {
                    continue;
                }
                $members_info[] = $spaceMember->getDisplayMemberArray();
            }
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_INVALID_SPACE_ID);
            throw $e;
        }

        $json = JSONResponse::create();
        $json->response(['members_info' => $members_info]);
    }

    /**
     * @param $space_id
     * @param $thread_id
     *
     * @return array
     */
    private function getSearchableUserIds($space_id, $thread_id)
    {
        $todo_service = TodoService::getInstance();
        $todo_root_category_id
            = $todo_service->getTodoRootCategoryId($space_id);

        $todo_search_condition = new TodoSearchCondition();
        $todo_search_condition->setSearchThreadId($thread_id);
        $todo_search_condition->setSearchCategoryId($todo_root_category_id);

        $todo_index = new TodoIndex([]);
        $todo_index->setSpaceId($space_id);
        $space_user_collection = $todo_index->getTodoUserCollection($space_id,
            ['is_search' => true]);
        $incomplete_todo_array
            = $todo_index->countIncompleteTodo($todo_search_condition)[TodoIndex::COUNT_USER_INCOMPLETE_TODO];

        $searchable_user_ids
            = $todo_index->getCandidateUserIds($space_user_collection,
            $incomplete_todo_array);

        return $searchable_user_ids;
    }

}
