<?php

namespace grn\space\screen\application\todo;

use grn\space\common\data\bean\SpaceMember;
use grn\space\service\SpaceService;
use grn\favour\service\FavourService;
use grn\space\service\TodoService;
use grn\space\service\DiscussionService;
use grn\space\common\data\bean\Authority;
use grn\space\common\data\condition\CommentSearchCondition;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\common\exception\GrnInvalidPermissionException;
use grn\space\common\exception\ErrorCode;
use grn\space\common\utility\SpaceDatetimeUtility;
use grn\space\common\utility\SpaceFileUtility;
use grn\space\data\bean\Todo;
use grn\space\data\bean\Thread;

/**
 * Class TodoComment
 */
class TodoComment extends TodoBase
{
    /**
     * Last todo comment number
     *
     * @var $_lastCommentNo
     */
    private $_lastCommentNo;
    /**
     * Search condition of todo comment
     *
     * @var $_search_condition
     */
    private $_search_condition;

    /**
     * @see TodoBase::setInput()
     *
     * @param $input
     */
    public function __construct($input)
    {
        parent::__construct($input);

        $checkArr = [
            self::ARG_SPACE_ID,
            self::ARG_TODO_ID,
            self::ARG_FROM
        ];

        $this->checkArgFromInput($checkArr, $input);
    }

    /**
     * @param $lastCommentNo
     */
    private function setLastCommentNo($lastCommentNo)
    {
        $this->_lastCommentNo = $lastCommentNo;
    }

    /**
     * @return mixed
     */
    public function getLastCommentNo()
    {
        return $this->_lastCommentNo;
    }

    /**
     * @param $searchCondition
     */
    private function setSearchCondition($searchCondition)
    {
        $this->_search_condition = $searchCondition;
    }

    /**
     * @return \grn\space\common\data\condition\CommentSearchCondition
     */
    private function getSearchCondition()
    {
        return $this->_search_condition;
    }

    /**
     * @return string
     */
    public function fetch()
    {
        $userId = $this->getLoginUserId();
        $limit = $this->getUserConfig()->getFollowMax();

        $thread = $this->getThreadByTodoId($this->getSpaceId(),
            $this->getTodoId());
        $todo = $this->getTodo($thread);

        // Notification
        $todoService = TodoService::getInstance();
        if ($todoService->isNotConfirmedTodoNotification($userId,
            $todo->getId())
        ) {
            $todoService->confirmTodoNotification($userId, $todo);
        }
        // Get todo comments
        $todoCommentsInfo = $this->getTodoCommentDisplayInfo($todo->getId(),
            $limit, $userId);

        // Make page navi
        require_once('grn/controller.csp');
        $controllerUtil = new \GRN_ControllerUtil();
        $navi_for_view
            = $controllerUtil->makeNaviInformation($this->getSearchCondition()
                                                        ->getOffset(),
            $limit,
            $todoCommentsInfo['count']);
        $navi_for_view['navi']['page'] = 'space/application/todo/view';
        $navi_for_view['navi']['params'] = [
            'spid' => $this->getSpaceId(),
            'tdid' => $todo->getId(),
            'from' => $this->getFrom(),
        ];
        unset($todoCommentsInfo['count']);

        // for favour
        $favour_service = new FavourService();
        $is_favour_active = $favour_service->isFavourAppActive();
        if ($is_favour_active) {
            $params = [
                self::ARG_SPACE_ID  => $this->getSpaceId(),
                self::ARG_THREAD_ID => $thread->getId(),
                self::ARG_TODO_ID   => $todo->getId()
            ];
            require_once('space/GrnSpaceApplication.csp');
            $favours_list = $favour_service->getFavourersCount($userId,
                \GrnSpaceApplication::GRN_SPACE_MODULE_ID,
                \GrnSpaceApplication::FAVOUR_TODO_COMMENT,
                array_keys($todoCommentsInfo),
                \GrnSpaceApplication::GRN_TODO_SUB_MODULE_ID
            );
            foreach ($todoCommentsInfo as $key => $value) {
                if (isset($favours_list[$key])) {
                    $favour_info = $favours_list[$key];
                } else {
                    $favour_info = ['type_value' => $key];
                }
                $favour_info['module_id']
                    = \GrnSpaceApplication::GRN_SPACE_MODULE_ID;
                $favour_info['sub_module_id']
                    = \GrnSpaceApplication::GRN_TODO_SUB_MODULE_ID;
                $favour_info['type']
                    = \GrnSpaceApplication::FAVOUR_TODO_COMMENT;
                $favour_info['params'] = $params;
                $todoCommentsInfo[$key]['favour_info'] = $favour_info;
            }
        }

        $delete_info = [
            'title'      => grn_get_page_display_name('space/todo/comment_delete'),
            'page'       => 'space/application/todo/todo_comment_delete.tpl',
            'no_confirm' => 'FALSE',
            'data'       => ['comment' => $todoCommentsInfo],
            'handler'    => 'lnk_delete',
        ];
        $discussion_service = DiscussionService::getInstance();
        $this->setLastCommentNo($discussion_service->getLastCommentNo($thread->getId(),
            $userId));

        require_once('grn/smarty.csp');
        $smarty = new \GRN_Smarty();
        $smarty->assign('space_id', $this->getSpaceId());
        $smarty->assign('thread_id', $thread->getId());
        $smarty->assign('navi', $navi_for_view['navi']);
        $smarty->assign('from', $this->getFrom());
        $smarty->assign('inline', $this->getUserConfig()->getInlineSetting());
        $smarty->assign('delete_info', $delete_info);
        $smarty->assign('todo_comments', $todoCommentsInfo);
        $smarty->assign('loginId', $userId);
        $smarty->assign('is_favour_active', $is_favour_active);

        // user image icon
        $imageIcon
            = \GRN_ControllerUtil::getUserIconFormat($this->getLoginUser());
        $smarty->assign('imageIcon', $imageIcon);
        if ($imageIcon) {
            $commentUserIds = [];
            foreach ($todoCommentsInfo as $comment) {
                /** @var SpaceMember $creator */
                $creator = $comment['creator'];
                $commentUserIds[] = $creator->getMemberID();
            }
            $users_info
                = \GRN_ControllerUtil::getUserInfoToShowUserName($commentUserIds,
                $this->getLoginUser());
            $users_info = \GRN_ControllerUtil::addPhotoUrlForUsersInfo($users_info,
                \GRN_ControllerUtil::getUserProfilePhotoSmallSize());
            $smarty->assign('iconSize', \GRN_ControllerUtil::ICON_SIZE_SMALL);
            $smarty->assign('users_info', $users_info);
        }

        $this->setWindowTitle($todo->getTitle());

        return $smarty->fetch('space/application/todo/todo_comment.tpl');
    }

    /**
     * Get todo with access check
     *
     * @param Thread $thread
     *
     * @return Todo
     * @throws GrnDataNotFoundException
     * @throws GrnInvalidPermissionException
     */
    private function getTodo(Thread $thread)
    {
        $todoService = TodoService::getInstance();
        try {
            // Check todo get authority
            $isAuthority
                = $todoService->hasTodoAccessControl(Authority::AUTHORITY_CODE_READ_DETAIL,
                $this->getSpaceId(), $thread->getId(), $this->getTodoId(),
                $this->getLoginUserId());

            if ($isAuthority) {
                // Get todo information
                $refTodoObj = $todoService->getTodo($this->getTodoId(),
                    $this->getLoginUserId());
            } else {
                throw new GrnInvalidPermissionException(ErrorCode::GRN_TODO_NO_ACCESS_PERMISSION);
            }
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_INVALID_TODO_ID);
            throw $e;
        }

        return $refTodoObj;
    }

    /**
     * Set todo comments search condition.
     *
     * @param     string $todoId          todo sequence id
     * @param     string $limit           comment limit number
     * @param     string $operationUserId user sequence id
     */
    private function setTodoCommentSearchCondition(
        $todoId,
        $limit,
        $operationUserId
    ) {
        $input = $this->getInput();
        $offset = 0;

        $comment_number = $this->getArrayValue(self::ARG_COMMENT_NUMBER,
            $input);
        $comment_id = $this->getArrayValue(self::ARG_COMMENT_ID, $input);

        if (array_key_exists(self::ARG_NAVI_TAG, $input)) {
            $offset = $input[self::ARG_NAVI_TAG] ? $input[self::ARG_NAVI_TAG]
                : 0;
        }
        $searchCondition = new CommentSearchCondition();
        $searchCondition->setSearchScopeType(CommentSearchCondition::SEARCH_SCOPE_TYPE_TODO);
        $searchCondition->setSearchScopeValue($todoId);
        $searchCondition->setSearchUserId($operationUserId);
        $searchCondition->setOrderSortArray([CommentSearchCondition::SORT_COMMENT_NO_DESC]);
        $searchCondition->setOffset($offset);
        $searchCondition->setLimit($limit);
        if ($comment_number) {
            $searchCondition->setHeadCommentNo($comment_number,
                ErrorCode::GRN_TODO_INVALID_COMMENT_ID);
        } elseif ($comment_id) {
            $searchCondition->setHeadCommentId($comment_id);
        }

        $this->setSearchCondition($searchCondition);
    }

    /**
     * Get todo comments collection.
     *
     * @param     string $operationUserId user sequence id
     *
     * @return array|\grn\space\common\data\collection\CommentCollection
     * @throws GrnDataNotFoundException
     */
    private function getTodoCommentCollection($operationUserId)
    {
        try {
            $todoService = TodoService::getInstance();
            $commentCollection
                = $todoService->searchCommentBySearchConditionWithAccessControl(
                Authority::AUTHORITY_CODE_READ_DETAIL,
                $this->getSearchCondition(), $operationUserId,
                TodoService::MARK_FETCHED_COMMENTS_READ);
            //construction display user name
            $todoService->addInspectionCollectionUserInfo($commentCollection,
                $operationUserId,
                $this->isSystemUseEnglish(),
                $this->isEnglishDisplayAfterName(),
                $this->isOrganizationDisplayAfterName(),
                $this->getLanguageCode());
            SpaceDatetimeUtility::constructionInspectionDisplayDatetime($commentCollection,
                $this->getDatetimeFormat(),
                SpaceDatetimeUtility::DISPLAY_TYPE_LONGDATE_AND_TIME,
                $this->getLanguageCode(),
                $this->getTimezoneName());
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_TODO_INVALID_COMMENT_ID);
            throw $e;
        }
        if ($commentCollection->count() == 0) {
            return [];
        }

        return $commentCollection;
    }

    /**
     * Set and get todo comments display information.
     *
     * @param     string $todoId          todo sequence id
     * @param     string $limit           comment limit number
     * @param     string $operationUserId user sequence id
     *
     * @return    array         $todoCommentsInfo   todo comments display information.
     */
    private function getTodoCommentDisplayInfo(
        $todoId,
        $limit,
        $operationUserId
    ) {
        $this->setTodoCommentSearchCondition($todoId, $limit, $operationUserId);
        $todoComments = $this->getTodoCommentCollection($operationUserId);

        $todoCommentsInfo = [];
        $spaceService = SpaceService::getInstance();
        $hasPrivilege = $this->isSpaceAdmin($spaceService,
            $this->getLoginUserId());
        foreach ($todoComments as $comment) {
            /** @var \grn\space\common\data\bean\Comment $comment */
            $full_url = cb_get_full_url('space/application/todo/view',
                ['spid' => $this->getSpaceId(), 'tdid' => $todoId]);
            $full_url .= '&cmno=' . $comment->getCommentNo();

            $spaceFileCollection = $comment->getSpaceFileCollection();
            $attachedFiles = [];
            foreach ($spaceFileCollection as $file) {
                /** @var \grn\space\common\data\bean\SpaceFile $file */
                $attachedFiles[$file->getId()]
                    = SpaceFileUtility::getSpaceFileLinkView($file);
            }
            $content = $comment->getContent();
            $is_rich_text = $comment->isRichText() ? true : false;
            if ($is_rich_text) {
                $base_url = cb_pageurl('space/application/todo/view', [
                    'spid' => $this->getSpaceId(),
                    'tdid' => $todoId,
                    'from' => $this->getFrom(),
                    'cmno' => ''
                ]);
                $content = makeAutoLinkForHtmlEditor($content,
                    htmlspecialchars('>>'), $base_url, 'space_todo');
            }
            $todoCommentsInfo[$comment->getId()] = [
                'id'           => $comment->getId(),
                'comment_no'   => $comment->getCommentNo(),
                'todo_id'      => $comment->getParentApplicationId(),
                'data'         => $content,
                'attach_files' => $attachedFiles,
                'parent_no'    => $comment->getParentCommentNo(),
                'unread'       => ($comment->isUnread() ? true : false),
                'ctime'        => $comment->getCreateDisplayDatetime(),
                'creator'      => $comment->getCreator(),
                'creator_id'   => $comment->getCreatorId(),
                'creator_name' => $comment->getCreator()->getDisplayName(),
                'deletable'    => (($comment->getCreatorId()
                                    == $operationUserId)
                                   || $hasPrivilege),
                'is_rich_text' => ($comment->isRichText() ? true : false),
                'full_url'     => $full_url
            ];
        }
        if (count($todoCommentsInfo) > 0) {
            $todoCommentsInfo['count'] = $todoComments->getCountNoLimit();
        } else {
            $todoCommentsInfo['count'] = 0;
        }

        return $todoCommentsInfo;
    }
}
