<?php

namespace grn\space\screen\application\external;

use grn\space\common\exception\GrnException;
use grn\space\service\SpaceService;
use grn\space\common\exception\ErrorCode;
use grn\space\common\exception\GrnDataNotFoundException;

/**
 * Class ExternalBase
 */
class ExternalBase
{
    const ARG_SPACE_ID = "spid";
    const ARG_APPLICATION_ID = "appid";

    const URL_EXTERNAL_INDEX = "space/application/external";

    private $input;

    /**
     * ExternalBase constructor.
     *
     * @param $input
     */
    public function __construct($input)
    {
        $this->setInput($input);
    }

    public function fetch()
    {
        throw new GrnException();
    }

    /**
     * @param $input
     *
     * @throws GrnException
     */
    public function post($input)
    {
        throw new GrnException();
    }

    public function getTitle()
    {
        throw new GrnException();
    }

    public function getSitePosition()
    {
        throw new GrnException();
    }

    public function getInput()
    {
        return $this->input;
    }

    /**
     * @param $input
     */
    protected function setInput($input)
    {
        $this->input = $input;
    }

    /**
     *
     * @return string UserId
     */
    protected function getLoginUserId()
    {
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $login = $uum->getLoginUser();

        return $login->getOID();
    }

    /**
     *
     * @return \GRN_UIConfig
     */
    protected function getUserConfig()
    {
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $login = $uum->getLoginUser();

        require_once('grn/ui.csp');
        $manager = \GRN_UIConfigManager::getInstance();

        return $manager->getUserConfig($login);
    }

    /**
     * @throws GrnDataNotFoundException
     */
    public function verifySpaceIsNotExpired()
    {
        $input = $this->getInput();
        if ( ! isset($input[self::ARG_SPACE_ID])) {
            return;
        }

        $space_id = $input[self::ARG_SPACE_ID];
        $space_service = SpaceService::getInstance();
        $space = $space_service->getSpace($space_id,
            $this->getLoginUserId());
        if ($space->isExpired()) {
            throw new GrnDataNotFoundException(ErrorCode::GRN_SPACE_EXPIRED);
        }
    }
}
