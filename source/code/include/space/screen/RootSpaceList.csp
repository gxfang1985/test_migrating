<?php

namespace grn\space\screen;

use grn\space\utility\SpaceUtility;

use grn\space\common\data\bean\Authority;
use grn\space\common\utility\IconUtility;
use grn\space\data\condition\SpaceSearchCondition;
use grn\space\service\SpaceService;
use grn\space\data\collection\SpaceCollection;
use grn\space\screen\GenericScreenBase;
use grn\space\common\data\condition\CategorySearchCondition;
use grn\space\data\CategoryTreeSession;
use grn\space\common\utility\CategoryUtility;

/**
 * Class RootSpaceList
 *
 */
class RootSpaceList extends GenericScreenBase
{
    const PATH_TEMPLATE_FILE = "space/root_space_list.tpl";

    const URL_SPACE_ROOT = "space/root";

    const SESSION_KEY = "grn.space.category_tree";

    const NUMBER_SPACE_OFFSET = 0;
    const NUMBER_SPACE_LIMIT = 20;

    const ROOT_CATEGORY_ID = 0;

    private $updatedSpaceCollection;
    private $newSpaceCollection;

    /**
     * @return mixed|string|void
     */
    public function fetch()
    {
        require_once("grn/smarty.csp");
        $smarty = new \GRN_Smarty();

        $spaceService = SpaceService::getInstance();

        $updatedSpaceSearchCondition
            = $this->makeSortedSpaceSearchCondition(SpaceSearchCondition::SORT_COMPONENT_MODIFY_TIME_DESC);
        $updatedSpaceCollection
            = $spaceService->searchSpaceBySearchConditionWithAccessControl(
            Authority::AUTHORITY_CODE_READ_SUMMARY,
            $updatedSpaceSearchCondition, $this->getLoginUserId()
        );
        IconUtility::constructionSpaceCollectionIconPath($updatedSpaceCollection);
        SpaceUtility::truncateSpaceUsingUserConfig($updatedSpaceCollection,
            $this->getLoginUser());
        $this->setUpdatedSpaceCollection($updatedSpaceCollection);

        $newSpaceSearchCondition
            = $this->makeSortedSpaceSearchCondition(SpaceSearchCondition::SORT_CREATE_TIME_DESC);
        $newSpaceCollection
            = $spaceService->searchSpaceBySearchConditionWithAccessControl(
            Authority::AUTHORITY_CODE_READ_SUMMARY,
            $newSpaceSearchCondition, $this->getLoginUserId()
        );
        SpaceUtility::truncateSpaceUsingUserConfig($newSpaceCollection,
            $this->getLoginUser());
        IconUtility::constructionSpaceCollectionIconPath($newSpaceCollection);
        $this->setNewSpaceCollection($newSpaceCollection);

        // Make tree info
        $spaceRootCategory
            = $spaceService->getSpaceRootCategory($this->getLoginUserId(),
            $this->getLanguageCode());

        $categorySearchCondition = new CategorySearchCondition();
        $categorySearchCondition->setSearchCategoryId($spaceRootCategory->getId());
        $categorySearchCondition->setSearchScopeType(CategorySearchCondition::SEARCH_SCOPE_CATEGORY_DESCENDANT);
        $categorySearchCondition->setOrderSortArray([CategorySearchCondition::SORT_DISPLAY_ORDER_ASC]);
        $categoryCollection
            = $spaceService->searchSpaceCategoryBySearchCondition($categorySearchCondition,
            $this->getLoginUserId(), $this->getLanguageCode());

        $categoryTreeSession = $this->loadCategoryTreeSession();
        $categoryTreeSession->update($categoryCollection,
            self::ROOT_CATEGORY_ID);
        $this->saveCategoryTreeSession($categoryTreeSession);

        $treeJson
            = CategoryUtility::buildJsonCategoryTreeInfo($categoryCollection,
            $categoryTreeSession);


        $smarty->assign("category_tree",
            $this->getCategoryTreeArray($treeJson));
        $smarty->assign("this", $this);

        return $smarty->fetch(self::PATH_TEMPLATE_FILE);
    }

    /**
     * @param $treeJson
     *
     * @return array
     */
    public function getCategoryTreeArray($treeJson)
    {
        return [
            "tree_name"        => "category_tree",
            "async_url"        => "space/command_category_tree",
            "link_url"         => "space/list",
            "link_url_params"  => [],
            "page_name"        => self::SESSION_KEY,
            "selected_oid"     => null,
            "oid_key"          => "cid",
            "json_template"    => "space/encoded_json.tpl",
            "root_caption"     => null,
            "root_subscribed"  => false,
            "no_root"          => false,
            "on_select"        => null,
            "tree_view_ele_id" => "tree-view",
            "view_part_ele_id" => "view_part",
            "set_tree_height"  => true,
            "root"             => $treeJson
        ];
    }

    /**
     * (non-PHPdoc)
     * @see grn\space\screen.GenericScreenBase::getSitePosition()
     */
    public function getSitePosition()
    {
        return [
            [
                "name" => grn_get_page_display_name(self::URL_SPACE_ROOT)
            ]
        ];
    }

    /**
     * (non-PHPdoc)
     * @see grn\space\screen.GenericScreenBase::getTitle()
     */
    public function getTitle()
    {
        return grn_get_page_display_name(self::URL_SPACE_ROOT);
    }

    /**
     * make SpaceSearchCondition condition
     *
     * @param int $sortOrderValue The constant defined by SpaceSearchCondition
     *
     * @return SpaceSearchCondition
     */
    private function makeSortedSpaceSearchCondition($sortOrderValue)
    {
        $updatedSpaceSearchCondition = new SpaceSearchCondition();
        $updatedSpaceSearchCondition->setOffset(self::NUMBER_SPACE_OFFSET);
        $updatedSpaceSearchCondition->setLimit(self::NUMBER_SPACE_LIMIT);
        $updatedSpaceSearchCondition->setOrderSortArray([$sortOrderValue]);
        $updatedSpaceSearchCondition->setLanguageCode($this->getLanguageCode());
        $updatedSpaceSearchCondition->setSearchSpaceExpirationDate(SpaceSearchCondition::SEARCH_SPACE_NOT_EXPIRED);

        return $updatedSpaceSearchCondition;
    }

    /**
     * Get array of the spaces recently updated
     *
     * @return array
     */
    public function getUpdatedSpaceCollectionArray()
    {
        return iterator_to_array($this->getUpdatedSpaceCollection()
                                      ->getIterator());
    }

    /**
     * Get Collection of the spaces recently updated
     *
     * @return SpaceCollection
     */
    private function getUpdatedSpaceCollection()
    {
        return $this->updatedSpaceCollection;
    }

    /**
     * Set Collection of the spaces recently updated
     *
     * @param SpaceCollection $spaceCollection
     */
    private function setUpdatedSpaceCollection(SpaceCollection $spaceCollection)
    {
        $this->updatedSpaceCollection = $spaceCollection;
    }

    /**
     * Get array of the spaces recently created
     *
     * @return array
     */
    public function getNewSpaceCollectionArray()
    {
        return iterator_to_array($this->getNewSpaceCollection()->getIterator());
    }

    /**
     * Get Collection of the spaces recently created
     *
     * @return SpaceCollection
     */
    private function getNewSpaceCollection()
    {
        return $this->newSpaceCollection;
    }

    /**
     * Set Collection of the spaces recently created.
     *
     * @param SpaceCollection $spaceCollection
     */
    private function setNewSpaceCollection(SpaceCollection $spaceCollection)
    {
        $this->newSpaceCollection = $spaceCollection;
    }

    /**
     * Load CategoryTreeSession from the session.
     *
     * @return CategoryTreeSession
     */
    private function loadCategoryTreeSession()
    {
        require_once('fw/session_manager.csp');
        $sm = \CB_SessionManager::getInstance();
        $session = $sm->getSession(self::SESSION_KEY);

        return CategoryTreeSession::loadFromSession($session);
    }

    /**
     * Save CategoryTreeSession into the session.
     *
     * @param CategoryTreeSession $categoryTreeSession
     */
    private function saveCategoryTreeSession(
        CategoryTreeSession $categoryTreeSession
    ) {
        require_once('fw/session_manager.csp');
        $sm = \CB_SessionManager::getInstance();
        $session = $sm->getSession(self::SESSION_KEY);
        $categoryTreeSession->saveToSession($session);
    }

    /**
     * Clear the tree data stored in the session.
     *
     * @param CategoryTreeSession $categoryTreeSession
     */
    private function clearCategoryTreeSession(
        CategoryTreeSession $categoryTreeSession
    ) {
        require_once('fw/session_manager.csp');
        $sm = \CB_SessionManager::getInstance();
        $session = $sm->getSession(self::SESSION_KEY);
        $categoryTreeSession->clearSession($session);
    }

    /**
     *
     * @return string
     */
    public function getSearchRange()
    {
        return parent::SEARCH_ALL;
    }
}
