<?php

namespace grn\space\screen;

use grn\space\utility\SpaceMemoUtility;
use grn\space\common\exception\GrnRequiredDataIsNotException;
use grn\space\data\bean\SpaceMemo;
use grn\space\common\data\bean\Authority;
use grn\space\common\data\bean\DatetimeFormat;
use grn\space\common\exception\GrnInvalidArgumentException;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\common\exception\GrnDatabaseException;
use grn\space\common\utility\SpaceDatetimeUtility;
use grn\space\common\exception\GrnInvalidPermissionException;
use grn\space\service\SpaceService;
use grn\space\common\exception\GrnException;
use grn\space\common\exception\ErrorCode;

/**
 * Class CommandMemoModify
 *
 */
class CommandMemoModify extends SpaceBase
{
    const JSON_KEY_SPACE_ID = "spaceId";
    const JSON_KEY_STATUS = "status";
    const JSON_KEY_DATA = "data";
    const JSON_KEY_DATA_DISPLAY = "dataDisplay";
    const JSON_KEY_MODIFIER_NAME = "modifierName";
    const JSON_KEY_MTIME_DISPLAY = "mtimeDisplay";
    const JSON_KEY_USER_ICON = "userIcon";
    const JSON_KEY_USER_LINK = "userLink";
    const JSON_VALUE_STATUS_SHOW = "show";

    const LOGIN_USER_ICON = "/grn/image/cybozu/loginuser20.gif";

    /**
     * @param $inputNotUsed
     *
     * @return string
     * @throws GrnDataNotFoundException
     * @throws GrnInvalidArgumentException
     * @throws GrnInvalidPermissionException
     * @throws GrnRequiredDataIsNotException
     * @throws \Exception
     */
    public function post($inputNotUsed)
    {
        $input = $this->getInput();

        // Setup
        $this->checkArgFromInput([self::ARG_SPACE_ID], $input);
        $this->setEditorFromInput($input);
        $this->setMemoDataFromInput($input);

        $spaceService = SpaceService::getInstance();

        //Access check.
        if ( ! $this->isSpaceAdminOrOperator($spaceService, $this->getSpaceId(),
            $this->getLoginUserId())
        ) {
            throw new GrnInvalidPermissionException(ErrorCode::GRN_NO_WRITE_PERMISSION);
        }

        // Try to get SpaceMemo
        try {
            $spaceMemo = $spaceService->getSpaceMemo($this->getSpaceid(),
                $this->getLoginUserId());
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_INVALID_SPACE_ID);
            throw $e;
        }

        // Update SpaceMemo
        $spaceMemo->setRichText($this->getEditorFromInput());

        //If the memo was edited by the rich editor then it is washed before stored into DB but not escaped to show.
        //Otherwise it is not changed before stored into DB and escaped to show.
        if ($spaceMemo->isRichText()) {
            require_once('grn/controller.csp');
            $spaceMemo->setMemo(grn_wash_script_without_style_attribute($this->getMemoDataFromInput()));
        } else {
            $spaceMemo->setMemo($this->getMemoDataFromInput());
        }
        $spaceMemo->setModifier($this->makeLoginUserSpaceMember());
        $spaceMemo->setModifyTimestamp(time());

        // Send new SpaceMemo to DB
        try {
            $spaceMemo = $spaceService->modifySpaceMemo($spaceMemo,
                $this->getLoginUserId());
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_SPACE_ID_IS_NOT_FOUND);
            throw $e;
        }

        // Make JSON response.

        // Load settings
        require_once("fw/i18n.csp");
        $i18n = \CB_I18N::getInstance();
        $languageCode = $i18n->getCurrentLanguage();
        $timezoneName = $i18n->getCurrentTimezone();

        $datetimeFormat = $this->getDatetimeFormat();

        $spaceService->addInspectionUserInfo(
            $spaceMemo,
            $this->getLoginUserId(),
            $this->isSystemUseEnglish(),
            $this->isEnglishDisplayAfterName(),
            $this->isOrganizationDisplayAfterName(),
            $this->getLanguageCode());
        SpaceDatetimeUtility::constructDisplayDatetimeOfInspection(
            $spaceMemo,
            $datetimeFormat,
            SpaceDatetimeUtility::DISPLAY_TYPE_LONGDATE_AND_TIME,
            $this->getLanguageCode(),
            $this->getTimezoneName());
        SpaceMemoUtility::constructDisplayMemo($spaceMemo);

        return json_encode([
            self::JSON_KEY_SPACE_ID      => $this->getSpaceId(),
            self::JSON_KEY_STATUS        => self::JSON_VALUE_STATUS_SHOW,
            self::JSON_KEY_DATA          => $spaceMemo->getMemo(),
            self::JSON_KEY_DATA_DISPLAY  => $spaceMemo->getDisplayMemo(),
            self::JSON_KEY_MODIFIER_NAME => $spaceMemo->getModifierDisplayName(),
            self::JSON_KEY_MTIME_DISPLAY => $spaceMemo->getModifyDisplayDatetime(),
            self::JSON_KEY_USER_ICON     => $this->getAppPath()
                                            . self::LOGIN_USER_ICON,
            self::JSON_KEY_USER_LINK     => $this->getUserLink($spaceMemo->getModifierId()),
        ]);
    }

    /**
     * Get Link for the user
     *
     * @param string $userId
     *
     * @todo JavaScript code is hardcoded.
     * @return string
     */
    private function getUserLink($userId)
    {
        return \GRN_ControllerUtil::getPopupUserProfileURLById($userId);
    }

    /**
     * @return mixed
     */
    private function getAppPath()
    {
        global $G_config_common;

        return $G_config_common->get('Global', 'app_path');
    }
}
