<?php

namespace grn\space\screen;

use grn\space\common\exception\ErrorCode;

use grn\space\common\exception\GrnRequiredDataIsNotException;

/**
 * Class CSVImport1ScreenBase
 *
 */
class CSVImport1ScreenBase extends GenericScreenBase
{
    const SESSION_KEY = "space/system/category_import1";

    const PATH_INFO = "space/system/category_import1";

    const IMPORT_FILES_KEY = "import_files";

    const NEXT_PATH_INFO = "space/system/category_import2";

    private $smarty;

    /**
     * CSVImport1ScreenBase constructor.
     *
     * @param $input
     */
    public function __construct($input)
    {
        parent::__construct($input);

        require_once("grn/smarty.csp");
        $this->setSmarty(new \GRN_Smarty());
    }

    /**
     * (non-PHPdoc)
     * @see grn\space\screen.GenericScreenBase::fetch()
     */
    public function fetch()
    {
        $smarty = $this->getSmarty();
        $smarty->setPageInfo(static::PATH_INFO);

        require_once('SmartyValidate.class.php');
        \SmartyValidate::connect($smarty);
        \SmartyValidate::register_form(static::PATH_INFO, true);

        $smarty->assign("form_name", static::PATH_INFO);
        $smarty->assign("page_title", $this->getTitle());
        $smarty->assign(
            "site_position",
            $this->getSitePosition()
        );

        $smarty->assign('charset', $this->getCharset());
        $smarty->assign('skip', $this->isSkip());

        return $smarty->fetch(static::PATH_INFO . ".tpl");
    }

    /**
     * @param $input
     *
     * @return array|bool
     * @throws GrnRequiredDataIsNotException
     */
    public function post($input)
    {
        $smarty = $this->getSmarty();

        //Setup SmartyValidate 
        require_once('SmartyValidate.class.php');
        \SmartyValidate::connect($smarty);
        \SmartyValidate::register_form(static::PATH_INFO);
        $formSmarty = $this->getInput();
        if (\SmartyValidate::is_valid($formSmarty, static::PATH_INFO)) {
            $session = $this->getSession(static::SESSION_KEY);

            //Clear all the file stored in this session
            $file_infos = $session->getFiles(static::IMPORT_FILES_KEY);
            if (is_array($file_infos)) {
                foreach (array_keys($file_infos) as $id) {
                    $session->unsetFile(static::IMPORT_FILES_KEY, $id);
                }
            }

            //Get new CSV file.
            global $_FILES;
            $file = $_FILES['file'];

            if ($file['error']) {
                throw new GrnRequiredDataIsNotException(ErrorCode::GRN_CSV_FILE_NOT_FOUND);
            }

            //Store the file into this session.
            $file_id = $session->addFile(static::IMPORT_FILES_KEY, $file);

            // the validation session is finished
            \SmartyValidate::unregister_form(static::PATH_INFO);

            return [
                static::NEXT_PATH_INFO,
                [
                    'charset' => $this->getCharset(),
                    'skip'    => $this->isSkip(),
                    'file_id' => $file_id
                ]
            ];
        }

        return false;
    }

    /**
     * CSVの文字コードを取得する
     *
     * @return string
     */
    private function getCharset()
    {
        $input = $this->getInput();
        $charset = @$input["charset"];
        if ( ! $charset) {
            global $G_config_common;
            $charset = $G_config_common->get('I18N',
                'default_external_encoding');
        }

        return $charset;
    }

    /**
     * 先頭行を skip するかどうか
     *
     * @return boolean
     */
    private function isSkip()
    {
        $input = $this->getInput();

        return @$input["skip"] == true;
    }

    /**
     *
     * @return \GRN_Smarty
     */
    protected function getSmarty()
    {
        return $this->smarty;
    }

    /**
     *
     * @param \GRN_Smarty $smarty
     */
    protected function setSmarty(\GRN_Smarty $smarty)
    {
        $this->smarty = $smarty;
    }
}
