<?php

namespace grn\space\screen;

use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\service\SpaceService;
use grn\space\common\exception\ErrorCode;

class CommandConfigExpirationDate extends SpaceBase
{
    public function __construct($input)
    {
        parent::__construct($input);

        $this->setRequireSpaceIsNotExpired(false);
    }

    /**
     * @param $input
     *
     * @return \grn\space\data\bean\Space
     * @throws GrnDataNotFoundException
     * @throws \Exception
     * @throws \grn\space\common\exception\GrnInvalidArgumentException
     */
    public function post($input)
    {
        $input = $this->getInput();
        $this->checkArgFromInput([
            self::ARG_SPACE_ID,
            self::ARG_SPACE_EXPIRATION_DATE
        ], $input);
        $this->setIsUnlimitedExpirationDate($input);
        if ( ! $this->isUnlimitedExpirationDate()) {
            $this->setExpirationDateTimestamp($input);
        }

        $space_service = SpaceService::getInstance();

        try {
            if ( ! $this->isSpaceAdminOrOperator($space_service,
                $this->getSpaceId(), $this->getLoginUserId())
            ) {
                throw new GrnDataNotFoundException(ErrorCode::GRN_INVALID_SPACE_ID);
            }

            $space = $space_service->getSpace($this->getSpaceId(),
                $this->getLoginUserId());
            $space->setModifier($this->makeLoginUserSpaceMember());
            $space->setModifyTimestamp(time());
            $space->setIsUnlimitedExpirationDate($this->isUnlimitedExpirationDate());
            if ( ! $space->getIsUnlimitedExpirationDate()) {
                $space->setExpirationDateTimestamp($this->getExpirationDateTimestamp());
                $space->setIsExpirationDateSpecifiedTime($this->getExpirationDateSpecifiedTime());
            }

            return $space_service->modifyExpirationDate($space,
                $this->getLoginUserId(), $this->getLanguageCode());

        } catch (GrnDataNotFoundException $exception) {
            $exception->setErrorCode(ErrorCode::GRN_INVALID_SPACE_ID);
            throw $exception;
        }
    }
}
