<?php

namespace grn\space\screen;

use grn\space\service\SpaceService;

use grn\space\screen\GenericScreenBase;
use grn\space\screen;

/**
 * Class SystemCommandCategoryExport
 *
 */
class SystemCommandCategoryExport extends GenericScreenBase
{
    /**
     * @param $input
     *
     * @return string
     */
    public function post($input)
    {
        require_once("grn/smarty.csp");
        $smarty = new \GRN_Smarty();

        $tempFileName = tempnam(cb_tmpdir(), "space_");

        require_once("fw/csv.csp");
        $csvWriter = new \CB_CSVWriter($this->getCharset(), $tempFileName);

        //Write item names.
        if ($this->isNeedItemName()) {
            require_once("fw/i18n.csp");

            $header = [];
            $header[] = cb_msg('grn.space.system', 'category_csv_parent_code');
            $header[] = cb_msg('grn.space.system', 'category_csv_code');
            $header[] = cb_msg('grn.space.system', 'category_csv_name');
            $header[] = cb_msg('grn.space.system', 'category_csv_memo');

            $csvWriter->writeLine($header);
        }

        //Search categories.
        $spaceService = SpaceService::getInstance();
        $categoryCollection
            = $spaceService->getSpaceCategoryCollectionForCSV($this->getLoginUserId());

        //Make hash to get its CategoryCode from its Coategory ID 
        $categoryId2CategoryCode = [];
        /** @var \grn\space\common\data\bean\Category $eachCategory */
        foreach ($categoryCollection as $eachCategory) {
            $categoryId2CategoryCode[$eachCategory->getId()]
                = $eachCategory->getCategoryCode();
        }

        //Export to temporary file.
        foreach ($categoryCollection as $eachCategory) {
            $parentCategoryCode = "";
            if (array_key_exists($eachCategory->getParentCategoryId(),
                $categoryId2CategoryCode)
            ) {
                $parentCategoryCode
                    = $categoryId2CategoryCode[$eachCategory->getParentCategoryId()];
            }

            $csvWriter->writeLine([
                $parentCategoryCode,
                $eachCategory->getCategoryCode(),
                $eachCategory->getCategoryName(),
                $eachCategory->getMemo()
            ]);
        }
        //Close temporary file.
        $csvWriter->close();

        //make the temporary file downloaded.
        cb_prepare_download('category.csv', "application/csv", false);
        $fp = fopen($tempFileName, "rb");
        $data = "";
        if (($fileSize = filesize($tempFileName)) > 0) {
            $data = fread($fp, $fileSize);
        }
        fclose($fp);

        unlink($tempFileName);

        return $data;
    }

    /**
     * CSVの文字コードを取得する
     *
     * @return string
     */
    private function getCharset()
    {
        $input = $this->getInput();
        $charset = @$input["charset"];
        if ( ! $charset) {
            global $G_config_common;
            $charset = $G_config_common->get('I18N',
                'default_external_encoding');
        }

        return $charset;
    }

    /**
     * 先頭に項目名を表示するか
     *
     * @return boolean
     */
    private function isNeedItemName()
    {
        $input = $this->getInput();

        return @$input["item_name"];
    }
}
