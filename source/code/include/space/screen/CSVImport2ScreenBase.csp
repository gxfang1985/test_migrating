<?php

namespace grn\space\screen;

use grn\space\common\exception\GrnDataNotFoundException;

use grn\space\common\data\bean\Category;
use grn\space\service\SpaceService;
use grn\space\common\exception\ErrorCode;
use grn\space\common\exception\GrnRequiredDataIsNotException;
use grn\space\screen\GenericScreenBase;

/**
 * Class CSVImport2ScreenBase
 *
 */
abstract class CSVImport2ScreenBase extends GenericScreenBase
{
    const PATH_INFO = "space/system/category_import2";
    const SESSION_KEY = "space/system/category_import1";
    const IMPORT_FILES_KEY = "import_files";

    const SAMPLE_LINE_NUM = 5;
    const GRN_SPACE_CATEGORY_CSV_LINE_LENGTH = 4;

    private $smarty;

    /**
     * @param $input
     */
    public function __construct($input)
    {
        parent::__construct($input);

        require_once("grn/smarty.csp");
        $this->setSmarty(new \GRN_Smarty());
    }

    /**
     * (non-PHPdoc)
     * @see grn\space\screen.GenericScreenBase::fetch()
     */
    public function fetch()
    {
        $fileId = $this->getCsvFileId();

        $session = $this->getSession(static::SESSION_KEY);

        $files = $session->getFiles(static::IMPORT_FILES_KEY);

        if ( ! is_array($files) || ! array_key_exists($fileId, $files)
             || ! $files[$fileId]->exists()
        ) {
            throw new GrnRequiredDataIsNotException(ErrorCode::GRN_CSV_FILE_NOT_FOUND);
        }

        require_once('fw/csv.csp');
        $csv = new \CB_CSVReader($this->getCharset(),
            $files[$fileId]->getPath());

        // サンプル行の読み込み
        $lines = [];
        for ($readLines = 0; $readLines < static::SAMPLE_LINE_NUM; $readLines++) {
            if (($line = $csv->readLine()) == false) {
                break;
            }

            if ($readLines == 0 && $this->isSkip()) {
                continue;
            }

            $lines[] = $line;
        }

        $smarty = $this->getSmarty();

        $smarty->assign(
            "site_position",
            $this->getSitePosition()
        );
        $smarty->assign('page_title', $this->getTitle());
        $smarty->assign('charset', $this->getCharset());
        $smarty->assign('skip', $this->isSkip());
        $smarty->assign('file_id', $this->getCsvFileId());
        $smarty->assign('csv_datas', $lines);

        return $smarty->fetch(static::PATH_INFO . ".tpl");

    }

    /**
     * @param $input
     *
     * @return array
     * @throws GrnRequiredDataIsNotException
     */
    public function post($input)
    {
        $fileId = $this->getCsvFileId();
        $session = $this->getSession(static::SESSION_KEY);

        $files = $session->getFiles(static::IMPORT_FILES_KEY);

        if ( ! is_array($files) || ! array_key_exists($fileId, $files)
             || ! $files[$fileId]->exists()
        ) {
            throw new GrnRequiredDataIsNotException(ErrorCode::GRN_CSV_FILE_NOT_FOUND);
        }

        require_once('fw/csv.csp');
        $csv = new \CB_CSVReader($this->getCharset(),
            $files[$fileId]->getPath());

        // 先頭行をスキップ
        if ($this->isSkip()) {
            $csv->readLine();
        }

        while (($line = $csv->readLine()) !== false) {
            if ( ! is_array($line)
                 || (count($line) < static::GRN_SPACE_CATEGORY_CSV_LINE_LENGTH)
            ) {
                require_once('grn/error_code.csp');
                cb_throw_error(E_GRN_INVALID_CSV_COLUMNS);
            }
            $this->processEachLine($line);
        }
        $csv->close();

        foreach (array_keys($files) as $id) {
            $session->unsetFile(static::IMPORT_FILES_KEY, $id);
        }

        return ['system/application_list', ['app_id' => 'space']];
    }

    /**
     * (non-PHPdoc)
     * @see grn\space\screen.GenericScreenBase::getTitle()
     */
    public function getTitle()
    {
        return grn_get_current_page_display_name();
    }

    /**
     * Process to execute for each line of CSV
     *
     * @param array $line
     */
    abstract protected function processEachLine($line);

    /**
     * CSVの文字コードを取得する
     *
     * @return string
     */
    private function getCharset()
    {
        $input = $this->getInput();
        $charset = @$input["charset"];
        if ( ! $charset) {
            global $G_config_common;
            $charset = $G_config_common->get('I18N',
                'default_external_encoding');
        }

        return $charset;
    }

    /**
     * 先頭行を skip するかどうか
     *
     * @return boolean
     */
    private function isSkip()
    {
        $input = $this->getInput();

        return @$input["skip"] == true;
    }

    /**
     * CSVファイルのIDを取得する
     *
     * @throws GrnRequiredDataIsNotException
     */
    private function getCsvFileId()
    {
        $input = $this->getInput();
        if ( ! @$input['file_id']) {
            throw new GrnRequiredDataIsNotException(ErrorCode::GRN_CSV_FILE_NOT_FOUND);
        }

        return $input['file_id'];
    }

    /**
     *
     * @return \GRN_Smarty
     */
    protected function getSmarty()
    {
        return $this->smarty;
    }

    /**
     *
     * @param \GRN_Smarty $smarty
     */
    protected function setSmarty(\GRN_Smarty $smarty)
    {
        $this->smarty = $smarty;
    }
}
