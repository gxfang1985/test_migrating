<?php

namespace grn\space\screen;

use grn\grn\Validate;
use grn\space\service\SpaceService;
use grn\space\common\data\bean\Category;
use grn\space\common\utility\CategoryUtility;
use grn\space\common\utility\SpaceDatetimeUtility;
use grn\space\common\data\condition\CategorySearchCondition;
use grn\space\common\data\collection\CategoryCollection;
use grn\space\data\bean\Space;
use grn\space\data\CategoryTreeSession;
use grn\space\data\collection\SpaceCollection;
use grn\space\data\condition\SpaceSearchCondition;
use grn\space\data\condition\SpaceWithFileSearchCondition;

/**
 * Class SystemCategoryList
 *
 */
class SystemCategoryList extends GenericScreenBase
{
    const ARG_CATEGORY_ID = "cid";
    const ARG_FILTER_ID = "filter_id";
    const SESSION_KEY = "grn.space.create.category_tree";
    const PATH_TEMPLATE_FILE = "space/system/category_list.tpl";

    private $spaceCollection;
    private $categoryId;

    /**
     * @return mixed|string|void
     */
    public function fetch()
    {
        $input = $this->getInput();
        $login_id = $this->getLoginUserId();
        $login = $this->getLoginUser();
        $isSystemUseEnglish = $this->isSystemUseEnglish();
        $isEnglishDisplayAfterName = $this->isEnglishDisplayAfterName();
        $isOrganizationDisplayAfterName
            = $this->isOrganizationDisplayAfterName();
        $datetimeFormatObj = $this->getDatetimeFormat();
        $displayType
            = SpaceDatetimeUtility::DISPLAY_TYPE_LONGDATE_AND_TIME;
        $languageCode = $this->getLanguageCode();
        $timezoneName = $this->getTimezoneName();

        require_once("fw/i18n.csp");
        $i18n = \CB_I18N::getInstance();
        $languageCode = $i18n->getCurrentLanguage();
        $spaceService = SpaceService::getInstance();
        $rootCategory = $spaceService->getSpaceRootCategory($login_id,
            $languageCode);

        $space = new Space();
        $cid = array_key_exists("cid", $input) ? $input["cid"]
            : $rootCategory->getId();
        $filter_id = cb_at($input, self::ARG_FILTER_ID, "0");

        $sortParam = null;
        if (array_key_exists("sort", $input)) {
            $sortParam = $input["sort"];
        }

        $categoryObj = $spaceService->getSpaceCategory($cid, $login_id,
            $languageCode);
        $_categoryName = $categoryObj->getCategoryName();
        $this->categoryId = $cid;

        // Make tree info
        $spaceRootCategory
            = $spaceService->getSpaceRootCategory($this->getLoginUserId(),
            $languageCode);

        $categorySearchCondition = new CategorySearchCondition();
        $categorySearchCondition->setSearchCategoryId($spaceRootCategory->getId());
        $categorySearchCondition->setSearchScopeType(CategorySearchCondition::SEARCH_SCOPE_CATEGORY_DESCENDANT);
        $categorySearchCondition->setOrderSortArray([CategorySearchCondition::SORT_DISPLAY_ORDER_ASC]);
        $categoryCollection
            = $spaceService->searchSpaceCategoryBySearchCondition($categorySearchCondition,
            $this->getLoginUserId(), $languageCode);

        $categoryTreeSession = $this->loadCategoryTreeSession();
        $categoryTreeSession->update($categoryCollection,
            $this->getCategoryId());
        $this->saveCategoryTreeSession($categoryTreeSession);
        $treeJson
            = CategoryUtility::buildJsonCategoryTreeInfo($categoryCollection,
            $categoryTreeSession);

        require_once('grn/controller.csp');
        $controller = new \GRN_ControllerUtil();
        $offset = $controller->getNaviStartPosition();

        $user_config = $this->getUserConfig();
        $limit = $user_config->getListMax();


        $childCategoryList = $spaceService->getChildCategoryList($cid,
            $languageCode);
        $category_childcount = (count($childCategoryList) > 1);
        $category_Usage = $spaceService->getFileUsageOfCategory($cid);

        if ($sortParam == "fsd" || $sortParam == "fsu") {
            $spaceWithFileSearchCondition = new SpaceWithFileSearchCondition();
            $spaceWithFileSearchCondition->setSearchCategoryId($cid);
            $spaceWithFileSearchCondition->setOrderSortArray([$this->getListOrderColumn($sortParam)]);
            $spaceWithFileSearchCondition->setLimit($limit);
            $spaceWithFileSearchCondition->setOffset($offset);
            $spaceWithFileSearchCondition->setLanguageCode($languageCode);
            $filter_types = [
                SpaceSearchCondition::SEARCH_SPACE_NOT_EXPIRED,
                SpaceSearchCondition::SEARCH_SPACE_EXPIRED
            ];
            if (Validate::isNumber($filter_id)
                && in_array($filter_id, $filter_types)
            ) {
                $spaceWithFileSearchCondition->setSearchSpaceExpirationDate($filter_id);
            }
            $spaceCollection
                = $spaceService->getSpaceListWithFileUsage($spaceWithFileSearchCondition,
                $login_id);
        } else {
            $category = new Category();
            $spaceSearchCondition = new SpaceSearchCondition();
            $spaceSearchCondition->setSearchCategoryId($cid);
            $spaceSearchCondition->setLimit($limit);
            $spaceSearchCondition->setOffset($offset);
            $spaceSearchCondition->setOrderSortArray([$this->getListOrderColumn($sortParam)]);
            $spaceSearchCondition->setLanguageCode($languageCode);
            $filter_types = [
                SpaceSearchCondition::SEARCH_SPACE_NOT_EXPIRED,
                SpaceSearchCondition::SEARCH_SPACE_EXPIRED
            ];
            if (Validate::isNumber($filter_id)
                && in_array($filter_id, $filter_types)
            ) {
                $spaceSearchCondition->setSearchSpaceExpirationDate($filter_id);
            }
            $spaceCollection
                = $spaceService->searchSpaceBySearchCondition($spaceSearchCondition,
                $login_id, SpaceService::CATEGORY_NAME_IS_NECESSARY,
                $languageCode);
            $spaceService->addFileUsage($spaceCollection);
        }

        SpaceDatetimeUtility::constructionComponentInspectionDisplayDatetime($spaceCollection,
            $datetimeFormatObj, $displayType, $languageCode, $timezoneName,
            null);

        $spaceService->addInspectionCollectionUserInfo($spaceCollection,
            $login_id, $isSystemUseEnglish, $isEnglishDisplayAfterName,
            $isOrganizationDisplayAfterName, $languageCode);
        $navi_for_view = $controller->makeNaviInformation($offset, $limit,
            $spaceCollection->getCountNoLimit(),
            ['cid' => $cid, 'filter_id' => $filter_id]);

        require_once("grn/smarty.csp");
        $smarty = new \GRN_Smarty();
        $smarty->assign("category_name", $_categoryName);
        $smarty->assign("this", $this);
        $smarty->assign("site_position", $this->getSitePosition());
        $smarty->assign("page_title", $this->getTitle());
        $smarty->assign("category_tree",
            $this->getCategoryTreeArray($treeJson));
        $smarty->assign("space_collection", $spaceCollection);
        $smarty->assign("navi", $navi_for_view);
        $smarty->assign("category_Usage", $category_Usage);
        $smarty->assign("cid", $cid);
        $smarty->assign("category_childcount", $category_childcount);
        $smarty->assign("sort", $sortParam);
        $smarty->assign("filter_id", $filter_id);

        return $smarty->fetch(self::PATH_TEMPLATE_FILE);
    }

    /**
     * @param $treeJson
     *
     * @return array
     */
    public function getCategoryTreeArray($treeJson)
    {
        return [
            "tree_name"        => "category_tree",
            "async_url"        => "space/system/command_category_tree",
            "link_url"         => "space/system/category_list",
            "link_url_params"  => [],
            "page_name"        => self::SESSION_KEY,
            "selected_oid"     => $this->getCategoryId(),
            "oid_key"          => "cid",
            "json_template"    => "space/encoded_json.tpl",
            "root_caption"     => null,
            "root_subscribed"  => false,
            "no_root"          => false,
            "on_select"        => null,
            "tree_view_ele_id" => "tree-view",
            "view_part_ele_id" => "view_part",
            "set_tree_height"  => true,
            "root"             => $treeJson
        ];
    }

    /**
     * 一覧ソートのカラム情報を取得する
     *
     * @param null $arg
     *
     * @return int
     */
    public function getListOrderColumn($arg = null)
    {
        switch ($arg) {
            case "fsu":
                return SpaceWithFileSearchCondition::SORT_FILE_SIZE_ASC;   // サイズ昇順
            case "fsd":
                return SpaceWithFileSearchCondition::SORT_FILE_SIZE_DESC;    // サイズ降順
            case "mtu":
                return SpaceSearchCondition::SORT_COMPONENT_MODIFY_TIME_ASC;           // 更新時刻昇順
            case "mtd":
            default:
                return SpaceSearchCondition::SORT_COMPONENT_MODIFY_TIME_DESC;            // 更新時刻降順
        }
    }

    var $_order_param = null;

    /**
     * @return string
     */
    function isCurrentPage()
    {
        return self::PATH_TEMPLATE_FILE;
    }

    /**
     * @return CategoryTreeSession
     */
    private function loadCategoryTreeSession()
    {
        require_once('fw/session_manager.csp');
        $sm = \CB_SessionManager::getInstance();
        $session = $sm->getSession(self::SESSION_KEY);

        return CategoryTreeSession::loadFromSession($session);
    }

    /**
     * @return mixed
     */
    public function getCategoryId()
    {
        return $this->categoryId;
    }

    /**
     * @param CategoryTreeSession $categoryTreeSession
     */
    private function saveCategoryTreeSession(
        CategoryTreeSession $categoryTreeSession
    ) {
        require_once('fw/session_manager.csp');
        $sm = \CB_SessionManager::getInstance();
        $session = $sm->getSession(self::SESSION_KEY);
        $categoryTreeSession->saveToSession($session);
    }

    /**
     * @return array
     */
    public function getSitePosition()
    {
        return [
            [
                "name" => cb_msg('grn.space.system', 'category_list')
            ]
        ];
    }

    /**
     * @return string
     */
    public function getTitle()
    {
        return cb_msg('grn.space.system', 'category_list');
    }

    /**
     * @param $arg
     *
     * @return array
     * @throws \grn\space\common\exception\GrnInvalidArgumentException
     */
    public function post($arg)
    {
        $input = $this->getInput();
        $this->checkArgFromInput([self::ARG_CATEGORY_ID], $input);
        $categoryId = $input[self::ARG_CATEGORY_ID];
        $filter_id = cb_at($arg, "filter", "0");

        $session = $this->getSession("space/system/category_list");
        $session->set('spid', @$input['spid']);

        if (@$input['cmd'] == 'delete') {
            return [
                "space/system/delete_multi",
                ["cid" => $categoryId, "filter_id" => $filter_id]
            ];
        } else {
            return [
                "space/system/move_multi",
                ["cid" => $categoryId, "filter_id" => $filter_id]
            ];
        }
    }

}
