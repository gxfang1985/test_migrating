<?php

namespace grn\space\screen;

use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\common\data\bean\Authority;
use grn\space\data\collection\SpaceLocalCollection;
use grn\space\common\utility\CategoryUtility;
use grn\space\data\CategoryTreeSession;
use grn\space\common\utility\IconUtility;
use grn\space\common\exception\ErrorCode;
use grn\space\common\exception\GrnInvalidArgumentException;
use grn\space\common\utility\ValidateUtility;
use grn\space\data\bean\Space;
use grn\space\logic\SpaceLogic;
use grn\space\service\SpaceService;
use grn\space\common\data\collection\IconCollection;
use grn\space\common\data\condition\IconSearchCondition;
use grn\space\common\data\bean\SpaceMember;
use grn\space\common\data\collection\SpaceMemberCollection;
use grn\space\common\data\condition\CategorySearchCondition;
use grn\space\common\data\collection\CategoryCollection;

/**
 * Class ConfigModify
 *
 */
class ConfigModify extends SpaceBase
{

    /**
     * URL
     *
     * @var string
     */
    const URL_CONFIG_MODIFY = "space/config_modify";
    const URL_CONFIG_LIST = "space/list";
    const SESSION_KEY = "grn.space.config_modify.category_tree";
    CONST MINUTE_INTERVAL = 5;

    /**
     * @return mixed|string|void
     * @throws GrnDataNotFoundException
     */
    public function fetch()
    {
        require_once("grn/smarty.csp");
        $smarty = new \GRN_Smarty();

        $spaceService = SpaceService::getInstance();

        //Check access rights.
        if ( ! $this->isSpaceAdminOrOperator($spaceService,
            $this->getSpace()->getId(), $this->getLoginUserId())
        ) {
            throw new GrnDataNotFoundException(ErrorCode::GRN_INVALID_SPACE_ID);
        }

        // Make selected users list for useradd UI.
        // create SpaceMemberCollection with name
        $spaceUserCollection
            = $spaceService->getSpaceUserCollection($this->getSpace()->getId(),
            $this->getLoginUserId());

        $spaceService->addUserInfo(
            $spaceUserCollection,
            $this->getLoginUserId(),
            $this->isSystemUseEnglish(),
            $this->isEnglishDisplayAfterName(),
            $this->isOrganizationDisplayAfterName(),
            $this->getLanguageCode());
        $operatorCollection
            = $spaceService->getSpaceUserCollectionAccordingToAuthorityCode($spaceUserCollection,
            Authority::AUTHORITY_CODE_OPERATION_PRIVILEGE,
            $this->getSpace()->getId());
        $this->setOpenStatus($operatorCollection->count() > 0);

        // Convert $spaceMemberCollection to array and give it to smarty for user_add.tpl
        $this->setSelectedUserArray($this->getDisplayInfoByUserCollection($spaceUserCollection));
        // Convert $operatorCollection to array and give it to smarty for _operator_add.tpl
        $this->setSelectedOperatorArray($this->getDisplayInfoByUserCollection($operatorCollection));

        // Set IconCollection
        $iconSearchCondition = new IconSearchCondition();
        $iconCollection
            = $spaceService->searchIconBySearchCondition($iconSearchCondition,
            $this->getLoginUserId());

        IconUtility::constructIconCollectionIconPath($iconCollection);
        $this->setIconCollection($iconCollection);

        //Setup localized name of the space
        $spaceLocalCollection
            = $spaceService->getSpaceLocalCollection($this->getSpace()
                                                          ->getId());
        $availableLocalSpaceCollection
            = $spaceLocalCollection->getAvailableLocalLanguage();
        $this->setMultilingualSpaceNameArray(
            $this->makeMultilingualSpaceNameArray($this->getSpace(),
                $availableLocalSpaceCollection)
        );

        $this->setCategoryDataJson($spaceService, self::SESSION_KEY);

        $smarty->assign("category_data_master", $this->getCategoryDataJson());
        $smarty->assign("this", $this);
        $smarty->assign("open_status", $this->getOpenStatus());
        $smarty->assign("form_name", cb_get_pagename());
        $smarty->assign("this_getMultilingualSpaceNameArray",
            $this->getMultilingualSpaceNameArray());
        $smarty->assign("this_getSpace", $this->getSpace());

        $smarty->assign('plugin', [
            'name'   => 'common',
            'params' => [
                'action'       => null,
                'session_name' => cb_get_pagename(),
                'app_id'       => 'space'
            ]
        ]);

        $spaceLogic = new SpaceLogic();

        $is_allowed_unlimited
            = $spaceLogic->isAllowedToUseUnlimitedExpirationDate();
        $is_used_unlimited = $this->getSpace()->getIsUnlimitedExpirationDate();

        if ( ! $is_used_unlimited) {
            $expiration_time_stamp = new \CB_TimeStamp();
            $expiration_time_stamp->unix_ts = $this->getSpace()
                                                   ->getExpirationDateTimestamp();
            $time_stamp_ex
                = new \CB_TimeStampEx($expiration_time_stamp);
            $expiration_date_date = $time_stamp_ex->getDate();
            if ($this->getSpace()->getIsExpirationDateSpecifiedTime()) {
                $expiration_date_time = $time_stamp_ex->getTime();
            }
        } else {
            $expiration_date_date = $spaceLogic->getDefaultDateExpirationDate()
                                               ->getDate();
        }

        $smarty->assign("is_allowed_unlimited", $is_allowed_unlimited);
        $smarty->assign("is_used_unlimited", $is_used_unlimited);
        $smarty->assign("is_used_limited", ! $is_used_unlimited);
        $smarty->assign("default_date_expiration", $expiration_date_date);
        $smarty->assign("default_time_expiration", $expiration_date_time);
        $smarty->assign("minute_interval", self::MINUTE_INTERVAL);

        return $smarty->fetch("space/config_modify.tpl");
    }


    /**
     * @return array
     */
    public function getSitePosition()
    {
        $sitePosition = $this->createCategorySitePosition($this->getSpace()
                                                               ->getCategoryId());
        $sitePosition[] = [
            "name"     => $this->getSpace()->getSpaceName(),
            "page"     => self::URL_TOP,
            "spid"     => $this->getSpace()->getId(),
            "icon"     => [
                "image"  => $this->getSpace()->getDisplayIconPath(),
                "direct" => true,
                "class"  => "breadcrumb-icon",
            ],
            "isHidden" => ! $this->getSpace()->isPublic(),
        ];
        $sitePosition[] = [
            "name" => grn_get_page_display_name(self::URL_CONFIG_VIEW),
            "page" => self::URL_CONFIG_VIEW,
            "spid" => $this->getSpace()->getId(),
        ];
        $sitePosition[] = [
            "name" => grn_get_page_display_name(self::URL_CONFIG_MODIFY),
        ];

        return $sitePosition;
    }

    /**
     * @return string
     */
    public function getTitle()
    {
        return grn_get_page_display_name(self::URL_CONFIG_MODIFY);
    }

    /**
     * @param $input
     *
     * @throws GrnDataNotFoundException
     * @throws GrnInvalidArgumentException
     * @throws \Exception
     */
    protected function setInput($input)
    {
        parent::setInput($input);
        $this->checkArgFromInput([
            self::ARG_SPACE_ID
        ], $input);


        //Set up Space because it is used in $this->getSitePosition which is called before $this->fetch is called.
        $spaceService = SpaceService::getInstance();
        try {
            //Get Space with its standard name.
            $space = $spaceService->getSpace($this->getSpaceId(),
                $this->getLoginUserId());
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_INVALID_SPACE_ID);
            throw $e;
        }
        global $G_config_common;
        IconUtility::constructionSpaceIconPath($space,
            $G_config_common->get('Global', 'app_path'));
        $this->setSpace($space);
    }
}
