<?php

namespace grn\space\screen;

use grn\space\common\exception\GrnInvalidArgumentException;
use grn\space\common\exception\ErrorCode;
use grn\space\data\CategoryTreeSession;
use grn\space\common\utility\ValidateUtility;

/**
 * Class CommandCategoryTree
 *
 */
class CommandCategoryTree extends GenericScreenBase
{
    const ARG_ACTION = "action";
    const ARG_SESSION_KEY = "page";
    const ARG_CATEGORY_ID = "oid";

    const ACTION_COLLAPSE = "collapse";
    const ACTION_EXPAND = "expand";
    const ACTION_GET_CHILD = "get_child";

    private $action;
    private $sessionKey;
    private $categoryId;

    public function __construct($input)
    {
        parent::__construct($input);

        $this->setRequireSpaceIsNotExpired(false);
    }

    /**
     * @param $notUsed
     *
     * @return string
     * @throws GrnInvalidArgumentException
     */
    public function post($notUsed)
    {
        $input = $this->getInput();
        $this->setActionFromInput($input);
        $this->setCategoryIdFromInput($input);
        $this->setSessionKeyFromInput($input);

        switch ($this->getAction()) {
            case self::ACTION_COLLAPSE:
                return $this->postCollapse();
            case self::ACTION_EXPAND:
                return $this->postExpand();
            case self::ACTION_GET_CHILD:
                return $this->postGetChild();
        }
    }

    /**
     * Called when Action is Coppalse
     *
     * @return string JSON
     */
    private function postCollapse()
    {
        $categoryTreeSession = $this->loadCategoryTreeSession();
        $categoryTreeSession->collapseCategory($this->getCategoryId());
        $this->saveCategoryTreeSession($categoryTreeSession);

        return json_encode([]);
    }

    /**
     * Called when Action is Expand
     *
     * @return string JSON
     */
    private function postExpand()
    {
        $categoryTreeSession = $this->loadCategoryTreeSession();
        $categoryTreeSession->expandCategory($this->getCategoryId());
        $this->saveCategoryTreeSession($categoryTreeSession);

        return json_encode([]);
    }

    /**
     * Called when Action is GetChild
     *
     * @return string JSON
     * @todo
     */
    private function postGetChild()
    {
        //Not implemented yet.

        //All the category data were cached in the browser when the user opened the page containing the category tree for the first time
        //so that "get_child" is never assigned to Action parameter. 
    }

    /**
     * @return mixed
     */
    private function getAction()
    {
        return $this->action;
    }

    /**
     * Set action parameter
     *
     * @todo decide the error code when this parameter is invalid.
     *
     * @param array $input
     *
     * @throws GrnInvalidArgumentException
     */
    private function setActionFromInput(array $input)
    {
        if ( ! array_key_exists(self::ARG_ACTION, $input)
             ||
             ! in_array($input[self::ARG_ACTION], [
                 self::ACTION_COLLAPSE,
                 self::ACTION_EXPAND,
                 self::ACTION_GET_CHILD
             ])
        ) {
            throw new GrnInvalidArgumentException();
        }
        $this->action = $input[self::ARG_ACTION];
    }

    /**
     * @return mixed
     */
    private function getSessionKey()
    {
        return $this->sessionKey;
    }

    /**
     * Set session key parameter
     *
     * @todo decide the error code when this parameter is invalid.
     *
     * @param array $input
     *
     * @throws GrnInvalidArgumentException
     */
    private function setSessionKeyFromInput(array $input)
    {
        if ( ! array_key_exists(self::ARG_SESSION_KEY, $input)) {
            throw new GrnInvalidArgumentException(ErrorCode::GRN_CATEGORY_TREE_PAGE_NOT_FOUND);
        }
        $this->sessionKey = $input[self::ARG_SESSION_KEY];
    }

    /**
     * @return mixed
     */
    private function getCategoryId()
    {
        return $this->categoryId;
    }

    /**
     * Set category ID parameter
     *
     * @todo decide the error code when this parameter is invalid.
     *
     * @param array $input
     *
     * @throws GrnInvalidArgumentException
     */
    private function setCategoryIdFromInput(array $input)
    {
        if (ValidateUtility::isNumber(
            $this->getArrayValue(self::ARG_CATEGORY_ID, $input),
            ValidateUtility::DISABLE_EMPTY,
            ValidateUtility::EXCEPTION_NOT_THROW)
        ) {
            $this->categoryId = $input[self::ARG_CATEGORY_ID];

            return;
        }
        throw new GrnInvalidArgumentException(ErrorCode::GRN_INVALID_CATEGORY_ID);
    }

    /**
     * Load CategoryTreeSession from the session.
     *
     * @return CategoryTreeSession
     */
    private function loadCategoryTreeSession()
    {
        require_once('fw/session_manager.csp');
        $sm = \CB_SessionManager::getInstance();
        $session = $sm->getSession($this->getSessionKey());

        return CategoryTreeSession::loadFromSession($session);
    }

    /**
     * Save CategoryTreeSession into the session.
     *
     * @param CategoryTreeSession $categoryTreeSession
     */
    private function saveCategoryTreeSession(
        CategoryTreeSession $categoryTreeSession
    ) {
        require_once('fw/session_manager.csp');
        $sm = \CB_SessionManager::getInstance();
        $session = $sm->getSession($this->getSessionKey());

        $categoryTreeSession->saveToSession($session);
    }
}
