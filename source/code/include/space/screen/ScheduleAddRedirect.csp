<?php

namespace grn\space\screen;

use grn\space\common\exception\GrnDataNotFoundException;

use grn\space\common\exception\GrnInvalidArgumentException;

use grn\space\common\data\bean\Authority;

use grn\space\common\exception\ErrorCode;
use grn\space\logic\SpaceLogic;
use grn\space\service\SpaceService;


class ScheduleAddRedirect extends GenericScreenBase
{
    const SESSION_NAME = 'G_INPUT_Session';

    /**
     * @param null $input
     *
     * @throws GrnDataNotFoundException
     * @throws GrnInvalidArgumentException
     */
    public function post($input)
    {
        $input = $this->getInput();
        $this->checkArgFromInput([self::ARG_SPACE_ID], $input);

        $user_ids = $this->getSpaceUserIDs();

        $this->saveUserIDIntoSession($user_ids);

        return;
    }

    /**
     * @return string
     */
    public function getSessionKeyFromReferer()
    {
        $referer = $this->getReferer();

        return $referer . ' _redirect';
    }

    /**
     * @return string
     */
    public function getReferer()
    {
        $referer = $_SERVER['HTTP_REFERER'] ?? '';
        if (is_string($referer)) {
            return $referer;
        }

        return '';
    }

    /**
     * @return array
     * @throws GrnDataNotFoundException
     */
    public function getSpaceUserIDs()
    {
        $space_service = SpaceService::getInstance();

        if ( ! $space_service->hasSpaceAccessControl(Authority::AUTHORITY_CODE_READ_DETAIL,
            $this->getSpaceId(), $this->getLoginUserId())
        ) {
            throw new GrnDataNotFoundException(ErrorCode::GRN_INVALID_SPACE_ID);
        }
        try {
            return $space_service->getSpaceUserIdsArrayOfUserOnly($this->getSpaceId(),
                $this->getLoginUserId());
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_INVALID_SPACE_ID);
            throw $e;
        }
    }

    /**
     * @param $user_ids
     */
    public function saveUserIDIntoSession($user_ids)
    {
        require_once('fw/session_manager.csp');
        $sm = \CB_SessionManager::getInstance();
        $session_key = $this->getSessionKeyFromReferer();
        $session = $sm->getSession($session_key);
        $session->set(self::SESSION_NAME,
            $this->makeGInputForSession($user_ids));
    }

    /**
     * @param array
     *
     * @return array
     */
    public function makeGInputForSession($user_ids)
    {
        return [
            "sUID" => $user_ids,
            "tab"  => "normal"
        ];
    }
}
