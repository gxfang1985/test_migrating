<?php

namespace grn\space\screen;

use grn\space\service\SpaceService;
use grn\space\common\data\bean\Category;
use grn\space\common\data\collection\CategoryLocalCollection;
use grn\space\common\logic\CategoryLogic;

/**
 * Class SystemModifyCategory
 *
 */
class SystemModifyCategory extends GenericScreenBase
{
    const URL_LIST = "space/system/category_list";
    const URL_CATEGORY_VIEW = "space/system/category_view";
    const SESSION_KEY = "grn.space.create.category_tree";
    const PATH_TEMPLATE_FILE = "space/system/category_modify.tpl";

    private $multilingualSpaceCategoryNameArray;
    private $_smarty;

    /**
     * Category
     *
     * @var Category
     */
    private $category;

    /**
     * @return Category
     */
    private function getCategory()
    {
        return $this->category;
    }

    /**
     * @param Category $category
     */
    private function setCategory(Category $category)
    {
        $this->category = $category;
    }

    /**
     * @return mixed
     */
    public function fetch()
    {
        $input = $this->getInput();
        $login = $this->getLoginUserId();

        require_once("fw/i18n.csp");
        $i18n = \CB_I18N::getInstance();
        $languageCode = $i18n->getCurrentLanguage();

        $spaceService = SpaceService::getInstance();
        $rootCategory = $spaceService->getSpaceRootCategory($login,
            $languageCode);

        $cid = array_key_exists("cid", $input) ? $input['cid']
            : $rootCategory->getId();

        $categoryObj = $spaceService->getSpaceCategory($cid, $login);
        $this->setCategory($categoryObj);

        $category = new Category();
        $categoryLogic = CategoryLogic::getInstance();
        $categoryLocalCollection
            = $categoryLogic->getCategoryLocalCollection($cid);
        $availableLocalCategoryCollection
            = $categoryLocalCollection->getAvailableLocalLanguage();
        $this->setMultilingualSpaceCategoryNameArray(
            $this->makeMultilingualSpaceCategoryNameArray($category,
                $availableLocalCategoryCollection)
        );

        require_once("grn/smarty.csp");
        $smarty = $this->getSmarty();

        if ( ! is_null($categoryObj->getParentCategoryId())) {
            $_parentCategoryId = $categoryObj->getParentCategoryId();
            $parent_Category
                = $spaceService->getSpaceCategory($_parentCategoryId,
                $login, $languageCode);
            $smarty->assign("parent_category", $parent_Category);
        }

        $smarty->assign("this_getMultilingualSpaceCategoryNameArray",
            $this->getMultilingualSpaceCategoryNameArray());
        $smarty->assign("site_position", $this->getSitePosition());
        $smarty->assign("page_title", $this->getTitle());
        $smarty->assign("cid", $categoryObj->getId());
        $smarty->assign("cancel_page", self::URL_CATEGORY_VIEW);
        $smarty->assign("foreign_key", $categoryObj->getCategoryCode());

        return $smarty->fetch(self::PATH_TEMPLATE_FILE);
    }

    /**
     * @param array $multilingualSpaceCategoryNameArray
     */
    private function setMultilingualSpaceCategoryNameArray(
        array $multilingualSpaceCategoryNameArray
    ) {
        $this->multilingualSpaceCategoryNameArray
            = $multilingualSpaceCategoryNameArray;
    }

    /**
     * @return mixed
     */
    public function getMultilingualSpaceCategoryNameArray()
    {
        return $this->multilingualSpaceCategoryNameArray;
    }

    /**
     * @param Category                $category
     * @param CategoryLocalCollection $categoryLocalCollection
     *
     * @return array
     */
    private function makeMultilingualSpaceCategoryNameArray(
        Category $category,
        CategoryLocalCollection $categoryLocalCollection
    ) {
        $result = [
            "element_name" => "name",
            "form_name"    => "space/system/category_modify",
            "values"       => [],
        ];

        $result["values"]["def"] = $this->getCategory()->getCategoryName();
        /** @var \grn\space\common\data\bean\CategoryLocal $eachCategoryLocal */
        foreach ($categoryLocalCollection as $eachCategoryLocal) {
            $result["values"][$eachCategoryLocal->getLanguageCode()]
                = $eachCategoryLocal->getCategoryName();
        }

        return $result;
    }

    /**
     * @return array
     */
    public function getSitePosition()
    {
        return [
            [
                "page"                      => self::URL_LIST,
                "name"                      => grn_get_page_display_name(self::URL_LIST),
                self::ARG_SPACE_CATEGORY_ID => $this->getCategory()->getId(),
            ],
            [
                "page"                      => self::URL_CATEGORY_VIEW,
                "name"                      => grn_get_page_display_name(self::URL_CATEGORY_VIEW),
                self::ARG_SPACE_CATEGORY_ID => $this->getCategory()->getId(),
            ],
            [
                "name" => grn_get_current_page_display_name(),
            ]
        ];
    }

    /**
     * @return string
     */
    public function getTitle()
    {
        return cb_msg('grn.space.system', 'category_modify');
    }

    /**
     * @return mixed
     */
    public function getInput()
    {
        return $this->input;
    }

    /**
     * @param $input
     */
    public function setInput($input)
    {
        $this->input = $input;
    }

    /**
     * @param $smarty
     */
    public function setSmarty($smarty)
    {
        $this->_smarty = $smarty;
    }

    /**
     * @return mixed
     */
    public function getSmarty()
    {
        return $this->_smarty;
    }

}
