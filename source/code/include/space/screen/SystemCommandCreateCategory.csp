<?php

namespace grn\space\screen;

use grn\space\service\SpaceService;
use grn\space\data\bean\SpaceLocal;
use grn\space\common\data\bean\Category;
use grn\space\common\data\bean\CategoryLocal;
use grn\space\common\utility\ValidateUtility;
use grn\space\common\data\collection\CategoryLocalCollection;
use grn\space\common\exception\ErrorCode;
use grn\space\common\exception\GrnInvalidArgumentException;

/**
 * Class SystemCommandCreateCategory
 *
 */
class SystemCommandCreateCategory extends GenericScreenBase
{
    const ARG_NAME_BASE = "name";
    const MAX_LENGTH_NAME = 100;
    const MIN_LENGTH_NAME = 0;

    private $categoryLocalCollection;

    /**
     * @param $notUsed
     *
     * @return array
     * @throws GrnInvalidArgumentException
     * @throws \Exception
     */
    public function post($notUsed)
    {
        $input = $this->getInput();
        $login = $this->getLoginUserId();

        require_once("fw/i18n.csp");
        $i18n = \CB_I18N::getInstance();

        $spaceService = SpaceService::getInstance();
        $category = new Category();

        $this->setSpaceLocalCollectionFromInput($input);

        $category = new Category();
        $category->setCategoryName($input['name-def']);
        $category->setParentCategoryId($input['cid']);
        $category->setCreator($this->makeLoginUserSpaceMember());
        $category->setCreateTimestamp(time());
        $category->setCategoryCode($input['foreign_key']);

        try {
            $spaceService->createSpaceCategory($category,
                $this->categoryLocalCollection, $login);
        } catch (GrnInvalidArgumentException $e) {
            $e->setErrorCode(ErrorCode::GRN_INVALID_CATEGORY_CODE);
            throw $e;
        }

        return [
            'page'   => 'space/system/category_list',
            'params' => [
                'cid'      => $category->getId(),
                'language' => $i18n->getCurrentLanguage(),
                'login'    => $login
            ]
        ];
    }

    /**
     * @return mixed
     */
    public function getSpaceLocalCollection()
    {
        return $this->spaceLocalCollection;
    }

    /**
     * @return mixed
     */
    public function getCategoryId()
    {
        return $this->categoryId;
    }

    /**
     * @param array $input
     */
    public function setSpaceLocalCollectionFromInput(array $input)
    {
        //get language values
        require_once('fw/i18n.csp');
        $inputLocalNameArray = \getMultiLanguageText(self::ARG_NAME_BASE,
            $input);

        require_once("fw/i18n/locale.csp");
        $languageCodes = \CB_LanguageManager::getAvailableLanguages();

        $this->categoryLocalCollection = new CategoryLocalCollection();
        foreach ($languageCodes as $eachLanguageCode) {
            if (array_key_exists($eachLanguageCode, $inputLocalNameArray)
                && ValidateUtility::isShorterThan($inputLocalNameArray[$eachLanguageCode],
                    self::MAX_LENGTH_NAME)
                && ValidateUtility::isLongerThan($inputLocalNameArray[$eachLanguageCode],
                    self::MIN_LENGTH_NAME)
                && strlen(cb_trim($inputLocalNameArray[$eachLanguageCode])) > 0
            ) {
                $tmpCategoryLocal = new CategoryLocal();
                $tmpCategoryLocal->setCategoryName(cb_trim($inputLocalNameArray[$eachLanguageCode]));
                $tmpCategoryLocal->setLanguageCode($eachLanguageCode);
                $this->categoryLocalCollection->appendBean($tmpCategoryLocal);
            }
        }
    }
}
