<?php

namespace grn\space\screen;

use grn\grn\MemberLogic;
use grn\space\common\exception\GrnDataNotFoundException;

use grn\space\common\exception\GrnInvalidArgumentException;
use grn\space\common\exception\GrnInvalidPermissionException;

use grn\space\common\data\bean\Authority;

use grn\space\common\exception\ErrorCode;
use grn\space\data\collection\SpaceUserCollection;
use grn\space\service\SpaceService;

/**
 * Class ScheduleRedirect
 *
 */
class ScheduleRedirect extends GenericScreenBase
{

    const SESSION_MULTIPLE_USER_SELECT = 'grn.common_multiple_user_select';
    const SCHEDULE_APPLICAION_ID = "schedule";

    /**
     * @param $input
     *
     * @return bool
     * @throws GrnDataNotFoundException
     * @throws GrnInvalidArgumentException
     */
    public function post($input)
    {
        $input = $this->getInput();
        $this->checkArgFromInput([self::ARG_SPACE_ID], $input);

        $spaceService = SpaceService::getInstance();

        if ( ! $spaceService->hasSpaceAccessControl(Authority::AUTHORITY_CODE_READ_DETAIL,
            $this->getSpaceId(), $this->getLoginUserId())
        ) {
            throw new GrnDataNotFoundException(ErrorCode::GRN_INVALID_SPACE_ID);
        }

        try {
            $spaceUserCollection
                = $spaceService->getSpaceUserCollection($this->getSpaceId(),
                $this->getLoginUserId());
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_INVALID_SPACE_ID);
            throw $e;
        }

        require_once('fw/session_manager.csp');
        $sm = \CB_SessionManager::getInstance();
        $session = $sm->getSession(self::SESSION_MULTIPLE_USER_SELECT);
        $session->set(self::SCHEDULE_APPLICAION_ID,
            $this->makeUserArrayForSession($spaceUserCollection));

        return true;
    }


    /**
     * Make an array to save into session.
     *
     * This array is going to be loaded from session and used when the user is got redirect to /space/group_day.
     *
     * @param SpaceUserCollection $spaceUserCollection
     *
     * @return array
     * @throws GrnInvalidArgumentException
     */
    private function makeUserArrayForSession(
        SpaceUserCollection $spaceUserCollection
    ) {
        $unique_user_ids = [];
        /** @var \grn\space\data\bean\SpaceUser $eachSpaceUser */
        foreach ($spaceUserCollection as $eachSpaceUser) {
            switch ($eachSpaceUser->getMemberType()) {
                case MemberLogic::TYPE_USER:
                    $user_id = $eachSpaceUser->getMemberID();
                    $unique_user_ids[$user_id] = $user_id;
                    break;
                case MemberLogic::TYPE_ORGANIZATION:
                    $user_ids = SpaceService::getInstance()
                                            ->getUserIdsByGroupId($eachSpaceUser->getMemberID());
                    foreach ($user_ids as $user_id) {
                        $unique_user_ids[$user_id] = $user_id;
                    }
                    break;
                case MemberLogic::TYPE_STATIC_ROLE:
                    $user_ids = SpaceService::getInstance()
                                            ->getUserIdsByRoleId($eachSpaceUser->getMemberID());
                    foreach ($user_ids as $user_id) {
                        $unique_user_ids[$user_id] = $user_id;
                    }
                    break;
                default:
                    throw new GrnInvalidArgumentException();
            }
        }

        $result = [];
        foreach ($unique_user_ids as $user_id) {
            $result[] = [
                "value" => $user_id,
                "type"  => "user"
            ];
        }

        return $result;
    }
}
