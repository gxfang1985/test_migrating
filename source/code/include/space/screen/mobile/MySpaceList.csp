<?php

namespace grn\space\screen\mobile;

use grn\space\common\data\bean\Authority;
use grn\space\common\utility\IconUtility;
use grn\space\common\utility\SpaceMemberUtility;
use grn\space\common\utility\ValidateUtility;
use grn\space\data\condition\SpaceSearchCondition;
use grn\space\service\SpaceService;

/**
 * Class MySpaceList
 */
class MySpaceList extends MobileGenericScreenBase
{
    /**
     * MySpaceList constructor.
     *
     * @param $input
     */
    public function __construct($input)
    {
        parent::__construct($input);
        $this->setMobileFooterBar();
    }

    /**
     * @return mixed|string|void
     */
    public function fetch()
    {
        $space_collection = $this->_getSpaceCollection();
        require_once("grn/smarty.csp");
        $smarty = new \GRN_Smarty();
        $smarty->assign('space_collection', $space_collection);
        $smarty->assign('offset', $this->getNewOffset());

        $current_page = $this->getTitle();
        $this->assignBreadcrumbCurrentPage($smarty, $current_page);

        return $smarty->fetch('space/mobile/index.tpl');
    }

    /**
     * @return mixed|string|void
     */
    public function fetchForAjax()
    {
        $space_collection = $this->_getSpaceCollection();
        require_once("grn/smarty.csp");
        $smarty = new \GRN_Smarty();
        $smarty->assign('space_collection', $space_collection);

        return $smarty->fetch('space/mobile/my_space_list.tpl');
    }

    /**
     * @return \grn\space\data\collection\SpaceCollection
     * @throws \grn\space\common\exception\GrnInvalidArgumentException
     */
    private function _getSpaceCollection()
    {
        $input = $this->getInput();
        $offset = $this->getArrayValue(self::ARG_NAVI_TAG, $input);
        if ( ! ValidateUtility::isNumber($offset,
            ValidateUtility::DISABLE_EMPTY,
            ValidateUtility::EXCEPTION_NOT_THROW)
        ) {
            $offset = 0;
        }

        $space_search_condition = new SpaceSearchCondition();
        $space_search_condition->setSearchParticipantUserId($this->getLoginUserId());
        $space_search_condition->setSearchParticipantGroupIds(SpaceMemberUtility::getLoginUserGroupIds());
        $space_search_condition->setSearchParticipantRoleIds(SpaceMemberUtility::getLoginUserRoleIds());
        $space_search_condition->setOrderSortArray([
            SpaceSearchCondition::SORT_COMPONENT_MODIFY_TIME_DESC,
            SpaceSearchCondition::SORT_ID_DESC
        ]);
        $space_search_condition->setLanguageCode($this->getLanguageCode());
        $space_search_condition->setLimit(self::MORE_VIEW_COUNT + $offset);
        $space_search_condition->setSearchSpaceExpirationDate(SpaceSearchCondition::SEARCH_SPACE_NOT_EXPIRED);

        $space_service = SpaceService::getInstance();
        $space_collection
            = $space_service->searchSpaceBySearchConditionWithAccessControl(Authority::AUTHORITY_CODE_READ_SUMMARY,
            $space_search_condition,
            $this->getLoginUserId(),
            SpaceService::CATEGORY_NAME_IS_NECESSARY);
        IconUtility::constructionSpaceCollectionIconPath($space_collection);

        $this->setNewOffset($offset, self::MORE_VIEW_COUNT,
            $space_collection->getCountNoLimit());

        return $space_collection;
    }

    /**
     * @return string
     */
    public function getTitle()
    {
        return grn_get_page_display_name('space/index');
    }
}
