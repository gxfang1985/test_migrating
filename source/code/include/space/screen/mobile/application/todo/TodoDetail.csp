<?php

namespace grn\space\screen\mobile\application\todo;

use grn\favour\service\FavourService;
use grn\space\common\data\bean\Authority;
use grn\space\common\data\condition\CommentSearchCondition;
use grn\space\common\exception\ErrorCode;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\common\exception\GrnInvalidPermissionException;
use grn\space\common\utility\SpaceDatetimeUtility;
use grn\space\common\utility\SpaceFileUtility;
use grn\space\common\utility\ValidateUtility;
use grn\space\data\bean\Thread;
use grn\space\data\bean\TodoUser;
use grn\space\screen\mobile\MobileGenericScreenBase;
use grn\space\service\SpaceService;
use grn\space\service\TodoService;

/**
 * Class TodoDetail
 */
class TodoDetail extends MobileGenericScreenBase
{
    const IS_TODO_USER = true;
    const NOT_TODO_USER = false;
    const LOGIN_USER_COMPLETE = true;
    const LOGIN_USER_UNCOMPLETE = false;
    const FROM_DETAIL_PAGE = 'detail';
    /**
     * Member of the Todo(complete)
     *
     * @var $_todoCompleteUserArray
     */
    private $_todoCompleteUserArray = [];

    /**
     * Member of the Todo(uncomplete)
     *
     * @var $_todoUncompleteUserArray
     */
    private $_todoUncompleteUserArray = [];

    /**
     * Check whether login user has completed the todo
     *
     * @var $_loginUserComplete
     */
    private $_loginUserComplete;

    /**
     * Check whether login user is todo user
     *
     * @var $_isTodoUser
     */
    private $_isTodoUser;

    /**
     * Get attach files of todo.
     *
     * @var $_attachedFiles
     */
    private $_attachedFiles;

    private $_search_condition;

    private $_thread;

    /**
     * @param $input
     */
    public function __construct($input)
    {
        parent::__construct($input);

        $checkArr = [self::ARG_SPACE_ID, self::ARG_TODO_ID];
        $this->checkArgFromInput($checkArr, $input);
        $this->verifySpaceIsNotExpired();
        $this->setLoginUserComplete(self::LOGIN_USER_UNCOMPLETE);
        $this->setIsTodoUser(self::NOT_TODO_USER);

        $this->_thread = $this->getThreadByTodoId($this->getSpaceId(),
            $this->getTodoId());
        $this->setThreadId($this->_thread->getId());

        $this->setMobileOperateMenu([
            [
                'page'   => 'space/mobile/member_list',
                'name'   => cb_msg('grn.space.mobile', 'member'),
                'params' => [
                    self::ARG_SPACE_ID => $this->getSpaceId(),
                    self::ARG_TODO_ID  => $this->getTodoId(),
                    self::ARG_FROM     => self::FROM_TODO_DETAIL
                ]
            ]
        ]);

        $userId = $this->getLoginUserId();
        $isOperator = $this->isOperator($userId);
        if ($isOperator) {
            $this->setMobileFooterBar([
                'edit'    => [
                    'page'   => 'space/mobile/application/todo/modify',
                    'params' => [
                        self::ARG_SPACE_ID => $this->getSpaceId(),
                        self::ARG_TODO_ID  => $this->getTodoId()
                    ]
                ],
                'comment' => []
            ]);

        } else {
            $this->setMobileFooterBar();
        }
    }

    /**
     * @param TodoUser $todoUser
     */
    private function setTodoCompleteUserArray(TodoUser $todoUser)
    {
        $this->_todoCompleteUserArray[] = $todoUser;
    }

    /**
     * @return array
     */
    private function getTodoCompleteUserArray()
    {
        return $this->_todoCompleteUserArray;
    }

    /**
     * @param TodoUser $todoUser
     */
    private function setTodoUncompleteUserArray(TodoUser $todoUser)
    {
        $this->_todoUncompleteUserArray[] = $todoUser;
    }

    /**
     * @return array
     */
    private function getTodoUncompleteUserArray()
    {
        return $this->_todoUncompleteUserArray;
    }

    /**
     * @param $flag
     */
    private function setIsTodoUser($flag)
    {
        $this->_isTodoUser = $flag;
    }

    /**
     * @return bool
     */
    private function isTodoUser()
    {
        return $this->_isTodoUser;
    }

    /**
     * @param $flag
     */
    private function setLoginUserComplete($flag)
    {
        $this->_loginUserComplete = $flag;
    }

    /**
     * @return bool
     */
    private function getLoginUserComplete()
    {
        return $this->_loginUserComplete;
    }

    /**
     * @param $attachedFiles
     */
    private function setTodoAttachedFiles($attachedFiles)
    {
        $this->_attachedFiles = $attachedFiles;
    }

    /**
     * @return array
     */
    private function getTodoAttachedFiles()
    {
        return $this->_attachedFiles;
    }

    /**
     * @return string
     */
    public function fetch()
    {
        $userId = $this->getLoginUserId();
        $space_id = $this->getSpaceId();

        $space_service = SpaceService::getInstance();
        $space = $space_service->getSpace($space_id, $userId,
            $this->getLanguageCode());

        require_once("grn/smarty.csp");
        $t = new \GRN_Smarty();

        $thread = $this->_thread;
        $todo = $this->getTodo($thread);

        $todoService = TodoService::getInstance();
        if ($todoService->isNotConfirmedTodoNotification($userId,
            $todo->getId())
        ) {
            $todoService->confirmTodoNotification($userId, $todo);
        }

        // Get todo comments
        $todoCommentsInfo = $this->getTodoCommentDisplayInfo($todo->getId(),
            self::MORE_VIEW_COUNT, $userId);
        $offset = 0;
        $this->setNewOffset($offset, self::MORE_VIEW_COUNT,
            $todoCommentsInfo['count']);
        unset($todoCommentsInfo['count']);

        $t->assign('todo', $todo);
        $t->assign('todo_comments', $todoCommentsInfo);
        $t->assign('offset', $this->getNewOffset());
        $t->assign('space_id', $space_id);
        $t->assign('space', $space);
        $t->assign('thread', $thread);
        $t->assign('creator', $todo->getCreator());
        $t->assign('start_date', $this->transferTimestampToDateEx($todo,
            $todo->getStartTimestamp()));
        $t->assign('end_date', $this->transferTimestampToDateEx($todo,
            $todo->getDeadlineTimestamp()));
        $t->assign('todo_uncomplete_user_array',
            $this->createUncompletedUsersArray());
        $t->assign('todo_complete_user_array',
            $this->createCompletedUsersArray());
        $t->assign('is_there_uncompleted_user',
            $this->isThereUncompletedUser());
        $t->assign('is_there_completed_user', $this->isThereCompletedUser());
        $t->assign('attachedFiles', $this->getTodoAttachedFiles());
        $t->assign('isTodoUser', $this->isTodoUser());
        $t->assign('isOperator', $this->isOperator($userId));
        $t->assign('loginUserComplete', $this->getLoginUserComplete());
        $t->assign('more_view_args', [
            self::ARG_SPACE_ID => $this->getSpaceId(),
            self::ARG_TODO_ID  => $this->getTodoId()
        ]);

        // for favour
        $favour_service = new FavourService();
        $is_favour_active = $favour_service->isFavourAppActive();
        if ($is_favour_active) {
            $params = [
                self::ARG_SPACE_ID  => $this->getSpaceId(),
                self::ARG_THREAD_ID => $thread->getId()
            ];
            require_once('space/GrnSpaceApplication.csp');
            $favour_info
                = $favour_service->constructFavourInfo(\GrnSpaceApplication::GRN_SPACE_MODULE_ID,
                \GrnSpaceApplication::FAVOUR_TODO_BODY,
                $todo->getId(),
                $userId,
                $params,
                \GrnSpaceApplication::GRN_TODO_SUB_MODULE_ID);
            $t->assign('favour_info', $favour_info);
        }
        $t->assign('is_favour_active', $is_favour_active);

        //assign breadcrumb.
        $current_page = cb_msg('grn.mobile', 'detail_title');
        $upper_page = cb_msg('grn.space.todo', 'index');
        $this->assignBreadcrumbCurrentPage($t, $current_page);
        $input = $this->getInput();
        if (array_key_exists('nid', $input)
            || array_key_exists('nhid', $input)
        ) {
            $this->assignBreadcrumbUpperPage($t, '', '', [], true);
        } else {
            $this->assignBreadcrumbUpperPage($t, $upper_page,
                self::URL_TODO_LIST,
                $params = [self::ARG_SPACE_ID => $this->getSpaceId()]);
        }

        //generate upload ticket
        include('grn/_upload_prepend.csp');

        return $t->fetch("space/mobile/application/todo/todo_detail.tpl");
    }

    /**
     * @return array
     */
    public function createUncompletedUsersArray()
    {
        return $this->getTodoMemberCollectionArrayOfJudgedIfMember($this->getTodoUncompleteUserArray());
    }

    /**
     * @return array
     */
    public function createCompletedUsersArray()
    {
        return $this->getTodoMemberCollectionArrayOfJudgedIfMember($this->getTodoCompleteUserArray());
    }

    /**
     * @return bool
     */
    public function isThereUncompletedUser(): bool
    {
        return (count($this->getTodoUncompleteUserArray()) > 0);
    }

    /**
     * @return bool
     */
    public function isThereCompletedUser(): bool
    {
        return (count($this->getTodoCompleteUserArray()) > 0);
    }

    /**
     * @param array[] $todo_users
     *
     * @return array
     */
    private function getTodoMemberCollectionArrayOfJudgedIfMember(
        array $todo_users
    ) {
        $space_id = $this->getSpaceId();
        $operation_user_id = $this->getLoginUserId();

        return TodoService::getInstance()
                          ->getTodoMemberCollectionArrayOfJudgedIfMember($todo_users,
                              $space_id, $operation_user_id);
    }

    /**
     * @return string
     */
    public function fetchForAjax()
    {
        $input = $this->getInput();

        $userId = $this->getLoginUserId();
        $offset = $this->getArrayValue(self::ARG_NAVI_TAG, $input);
        if ( ! ValidateUtility::isNumber($offset,
            ValidateUtility::DISABLE_EMPTY,
            ValidateUtility::EXCEPTION_NOT_THROW)
        ) {
            $offset = 0;
        }
        $thread = $this->_thread;
        $todo = $this->getTodoSimple($thread);

        // Notification
        $todoService = TodoService::getInstance();
        if ($todoService->isNotConfirmedTodoNotification($userId,
            $todo->getId())
        ) {
            $todoService->confirmTodoNotification($userId, $todo);
        }
        // Get todo comments
        $todoCommentsInfo = $this->getTodoCommentDisplayInfo($todo->getId(),
            $offset + self::MORE_VIEW_COUNT, $userId);

        $this->setNewOffset($offset, self::MORE_VIEW_COUNT,
            $todoCommentsInfo['count']);
        unset($todoCommentsInfo['count']);

        require_once('grn/smarty.csp');
        $smarty = new \GRN_Smarty();
        $smarty->assign('space_id', $this->getSpaceId());
        $smarty->assign('thread', $thread);
        $smarty->assign('todo', $todo);
        $smarty->assign('todo_comments', $todoCommentsInfo);

        $favour_service = new FavourService();
        $is_favour_active = $favour_service->isFavourAppActive();
        $smarty->assign('is_favour_active', $is_favour_active);

        return $smarty->fetch('space/mobile/application/todo/comment_list.tpl');
    }

    /**
     * Complete or uncomplete todo
     *
     * @param $input
     *
     * @throws    GrnInvalidPermissionException
     * @throws    GrnDataNotFoundException
     */
    public function post($input)
    {
        $input = $this->getInput();
        $userId = $this->getLoginUserId();
        $thread = $this->_thread;
        $todo = $this->getTodo($thread);
        $from = @ $input[self::ARG_FROM];

        // Change todo user status
        $todoService = TodoService::getInstance();
        try {
            if ($this->isTodoUser() == self::IS_TODO_USER) {
                // Uncomplete a todo
                if ($this->getLoginUserComplete()
                    == self::LOGIN_USER_COMPLETE
                ) {
                    $todoService->incompletedTodo($todo->getId(), $userId,
                        $this->makeLoginUserSpaceMember());
                } // Complete a todo
                else {
                    $todoService->completedTodo($todo->getId(), $userId,
                        $this->makeLoginUserSpaceMember());
                }
                if ($from == self::FROM_DETAIL_PAGE) {
                    $refTodoObj = $todoService->getTodo($this->getTodoId(),
                        $userId);
                    $todoUserCollection
                        = $refTodoObj->getTodoUserCollection();
                    $isSystemUseEnglish = $this->isSystemUseEnglish();
                    $isEngDisplayAfterName = $this->isEnglishDisplayAfterName();
                    $isOrgDisplayAfterName
                        = $this->isOrganizationDisplayAfterName();
                    $languageId = $this->getLanguageCode();
                    $todoService->addUserInfo($todoUserCollection, $userId,
                        $isSystemUseEnglish, $isEngDisplayAfterName,
                        $isOrgDisplayAfterName, $languageId);
                    $this->_todoCompleteUserArray = [];
                    $this->_todoUncompleteUserArray = [];
                    foreach ($todoUserCollection as $todoUser) {
                        /** @var \grn\space\data\bean\TodoUser $todoUser */
                        if ($todoUser->isComplete()) {
                            $this->setTodoCompleteUserArray($todoUser);
                        } else {
                            $this->setTodoUncompleteUserArray($todoUser);
                        }
                    }
                }
            } else {
                throw new GrnInvalidPermissionException(ErrorCode::GRN_TODO_NO_STATUS_MODIFY_PERMISSION);
            }
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_INVALID_TODO_ID);
            throw $e;
        }
    }

    /**
     * @return string
     */
    public function fetchTodoUsers()
    {
        require_once('grn/smarty.csp');
        $smarty = new \GRN_Smarty();
        $smarty->assign('todo_uncomplete_user_array',
            $this->createUncompletedUsersArray());
        $smarty->assign('todo_complete_user_array',
            $this->createCompletedUsersArray());
        $smarty->assign('is_there_uncompleted_user',
            $this->isThereUncompletedUser());
        $smarty->assign('is_there_completed_user',
            $this->isThereCompletedUser());

        return $smarty->fetch('space/mobile/application/todo/todo_users.tpl');
    }

    /**
     * Get todo with access check
     *
     * @param \grn\space\data\bean\Thread $thread
     *
     * @return \grn\space\data\bean\Todo
     * @throws GrnDataNotFoundException
     * @throws GrnInvalidPermissionException
     */
    private function getTodoSimple(Thread $thread)
    {
        $todoService = TodoService::getInstance();
        try {
            // Check todo get authority
            $isAuthority
                = $todoService->hasTodoAccessControl(Authority::AUTHORITY_CODE_READ_DETAIL,
                $this->getSpaceId(), $thread->getId(), $this->getTodoId(),
                $this->getLoginUserId());

            if ($isAuthority) {
                // Get todo information
                $refTodoObj = $todoService->getTodo($this->getTodoId(),
                    $this->getLoginUserId());
            } else {
                throw new GrnInvalidPermissionException(ErrorCode::GRN_TODO_NO_ACCESS_PERMISSION);
            }
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_INVALID_TODO_ID);
            throw $e;
        }

        return $refTodoObj;
    }

    /**
     * @param $searchCondition
     */
    private function setSearchCondition($searchCondition)
    {
        $this->_search_condition = $searchCondition;
    }

    /**
     * @return CommentSearchCondition
     */
    private function getSearchCondition()
    {
        return $this->_search_condition;
    }

    /**
     * @param \grn\space\data\bean\Thread $thread
     *
     * @return \grn\space\data\bean\Todo
     * @throws GrnDataNotFoundException
     * @throws GrnInvalidPermissionException
     */
    private function getTodo(Thread $thread)
    {
        $todoService = TodoService::getInstance();
        $userId = $this->getLoginUserId();
        $languageId = $this->getLanguageCode();
        $isSystemUseEnglish = $this->isSystemUseEnglish();
        $isEngDisplayAfterName = $this->isEnglishDisplayAfterName();
        $isOrgDisplayAfterName = $this->isOrganizationDisplayAfterName();

        try {
            // Check todo read authority
            $isAuthority
                = $todoService->hasTodoAccessControl(Authority::AUTHORITY_CODE_READ_DETAIL,
                $this->getSpaceId(), $thread->getId(), $this->getTodoId(),
                $userId);

            if ($isAuthority) {
                // Get todo
                $refTodoObj = $todoService->getTodo($this->getTodoId(),
                    $userId);

                // Construction display user name and update time
                $todoService->addInspectionUserInfo($refTodoObj, $userId,
                    $isSystemUseEnglish, $isEngDisplayAfterName,
                    $isOrgDisplayAfterName, $languageId);
                SpaceDatetimeUtility::constructDisplayDatetimeOfInspection($refTodoObj,
                    $this->getDatetimeFormat(),
                    SpaceDatetimeUtility::DISPLAY_TYPE_LONGDATE_AND_TIME,
                    $languageId, $this->getTimezoneName());

                // Construction display todo user name
                $todoUserCollection = $refTodoObj->getTodoUserCollection();
                $todoService->addUserInfo($todoUserCollection, $userId,
                    $isSystemUseEnglish, $isEngDisplayAfterName,
                    $isOrgDisplayAfterName, $languageId);

                foreach ($todoUserCollection as $todoUser) {
                    /** @var \grn\space\data\bean\TodoUser $todoUser */
                    if ($todoUser->getMemberID() == $userId) {
                        $this->setIsTodoUser(self::IS_TODO_USER);
                    }
                    if ($todoUser->isComplete()) {
                        if ($todoUser->getMemberID() == $userId) {
                            $this->setLoginUserComplete(self::LOGIN_USER_COMPLETE);
                        }
                        $this->setTodoCompleteUserArray($todoUser);
                    } else {
                        $this->setTodoUncompleteUserArray($todoUser);
                    }
                }

                // Get attachment file
                $spaceFileCollection = $refTodoObj->getSpaceFileCollection();
                $attachedFiles = [];
                foreach ($spaceFileCollection as $file) {
                    /** @var \grn\space\common\data\bean\SpaceFile $file */
                    $attachedFiles[$file->getId()]
                        = SpaceFileUtility::getSpaceFileLinkView($file);
                }
                $this->setTodoAttachedFiles($attachedFiles);
            } else {
                throw new GrnInvalidPermissionException(ErrorCode::GRN_TODO_NO_ACCESS_PERMISSION);
            }
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_INVALID_TODO_ID);
            throw $e;
        }

        return $refTodoObj;
    }

    /**
     * Set todo comments search condition.
     *
     * @param     string $todoId          todo sequence id
     * @param     string $limit           comment limit number
     * @param     string $operationUserId user sequence id
     */
    private function setTodoCommentSearchCondition(
        $todoId,
        $limit,
        $operationUserId
    ) {
        $input = $this->getInput();
        $offset = 0;

        $comment_number = $this->getArrayValue(self::ARG_COMMENT_NUMBER,
            $input);
        $comment_id = $this->getArrayValue(self::ARG_COMMENT_ID, $input);

        $searchCondition = new CommentSearchCondition();
        $searchCondition->setSearchScopeType(CommentSearchCondition::SEARCH_SCOPE_TYPE_TODO);
        $searchCondition->setSearchScopeValue($todoId);
        $searchCondition->setSearchUserId($operationUserId);
        $searchCondition->setOrderSortArray([CommentSearchCondition::SORT_COMMENT_NO_DESC]);
        $searchCondition->setOffset($offset);
        $searchCondition->setLimit($limit);
        if ($comment_number) {
            $searchCondition->setHeadCommentNo($comment_number,
                ErrorCode::GRN_TODO_INVALID_COMMENT_ID);
        } elseif ($comment_id) {
            $searchCondition->setHeadCommentId($comment_id);
        }

        $this->setSearchCondition($searchCondition);
    }

    /**
     * Get todo comments collection.
     *
     * @param string $operationUserId user sequence id
     *
     * @return array|\grn\space\common\data\collection\CommentCollection
     * @throws GrnDataNotFoundException
     */
    private function getTodoCommentCollection($operationUserId)
    {
        try {
            $todoService = TodoService::getInstance();
            $commentCollection
                = $todoService->searchCommentBySearchConditionWithAccessControl(Authority::AUTHORITY_CODE_READ_DETAIL,
                $this->getSearchCondition(), $operationUserId,
                TodoService::MARK_FETCHED_COMMENTS_READ);
            //construction display user name
            $todoService->addInspectionCollectionUserInfo($commentCollection,
                $operationUserId,
                $this->isSystemUseEnglish(),
                $this->isEnglishDisplayAfterName(),
                $this->isOrganizationDisplayAfterName(),
                $this->getLanguageCode());
            SpaceDatetimeUtility::constructionInspectionDisplayDatetime($commentCollection,
                $this->getDatetimeFormat(),
                SpaceDatetimeUtility::DISPLAY_TYPE_LONGDATE_AND_TIME,
                $this->getLanguageCode(),
                $this->getTimezoneName());
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_TODO_INVALID_COMMENT_ID);
            throw $e;
        }
        if ($commentCollection->count() == 0) {
            return [];
        }

        return $commentCollection;
    }

    /**
     * Set and get todo comments display information.
     *
     * @param     string $todoId          todo sequence id
     * @param     string $limit           comment limit number
     * @param     string $operationUserId user sequence id
     *
     * @return    array         $todoCommentsInfo   todo comments display information.
     */
    private function getTodoCommentDisplayInfo(
        $todoId,
        $limit,
        $operationUserId
    ) {
        $this->setTodoCommentSearchCondition($todoId, $limit, $operationUserId);
        $todoComments = $this->getTodoCommentCollection($operationUserId);
        $login_id = $this->getLoginUserId();
        $thread = $this->getThreadByTodoId($this->getSpaceId(),
            $this->getTodoId());

        $todoCommentsInfo = [];

        $favour_service = new FavourService();
        $is_favour_active = $favour_service->isFavourAppActive();

        foreach ($todoComments as $comment) {
            if ($comment->getCreatorId() == $login_id) {
                $cmt_deletable = true;
            } else {
                $cmt_deletable = false;
            }
            /** @var \grn\space\common\data\bean\Comment $comment */
            $spaceFileCollection = $comment->getSpaceFileCollection();
            $attachedFiles = [];
            foreach ($spaceFileCollection as $file) {
                /** @var \grn\space\common\data\bean\SpaceFile $file */
                $attachedFiles[$file->getId()]
                    = SpaceFileUtility::getSpaceFileLinkView($file);
            }
            $creator = $comment->getCreator();

            $favour_info = [];
            if ($is_favour_active) {
                $params = [
                    self::ARG_SPACE_ID  => $this->getSpaceId(),
                    self::ARG_THREAD_ID => $thread->getId(),
                    self::ARG_TODO_ID   => $todoId
                ];
                $favour_info
                    = $favour_service->constructFavourInfo(\GrnSpaceApplication::GRN_SPACE_MODULE_ID,
                    \GrnSpaceApplication::FAVOUR_TODO_COMMENT,
                    $comment->getId(),
                    $login_id,
                    $params,
                    \GrnSpaceApplication::GRN_TODO_SUB_MODULE_ID);
            }

            $todoCommentsInfo[$comment->getId()] = [
                'id'           => $comment->getId(),
                'comment_no'   => $comment->getCommentNo(),
                'todo_id'      => $comment->getParentApplicationId(),
                'data'         => $comment->getContent(),
                'attach_files' => $attachedFiles,
                'parent_no'    => $comment->getParentCommentNo(),
                'unread'       => ($comment->isUnread() ? true : false),
                'ctime'        => $comment->getCreateDisplayDatetime(),
                'creator'      => $creator,
                'creator_type' => $this->getUserType($creator),
                'deletable'    => $cmt_deletable,
                'is_rich_text' => ($comment->isRichText() ? true : false),
                'favour_info'  => $favour_info,
            ];
        }
        if (count($todoCommentsInfo) > 0) {
            $todoCommentsInfo['count'] = $todoComments->getCountNoLimit();
        } else {
            $todoCommentsInfo['count'] = 0;
        }

        return $todoCommentsInfo;
    }

    /**
     * Operation access check
     *
     * @param     $userId
     *
     * @return    boolean       TRUE:It has the operation access     FALSE:It doesn't have the operation access.
     */
    private function isOperator($userId)
    {
        $todoService = TodoService::getInstance();

        // Operation access check
        return $todoService->hasTodoAccessControl(Authority::AUTHORITY_CODE_WRITE,
            $this->getSpaceId(), $this->getThreadId(), $this->getTodoId(),
            $userId);
    }
}
