<?php

namespace grn\space\screen\mobile\application\todo;

use grn\space\screen\mobile\MobileGenericScreenBase;
use grn\space\common\data\bean\Authority;
use grn\space\common\exception\GrnInvalidPermissionException;
use grn\space\common\exception\GrnRequiredDataIsNotException;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\service\TodoService;
use grn\space\common\data\bean\Comment;
use grn\space\common\exception\ErrorCode;

/**
 * Class TodoCommentAdd
 */
class TodoCommentAdd extends MobileGenericScreenBase
{
    /**
     * Return raw HTML which will be used without being escaped.
     *
     * @return string
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException
     * @throws    GrnInvalidPermissionException
     * @throws    GrnDataNotFoundException
     */
    public function fetch()
    {
        $input = $this->getInput();

        require_once('grn/smarty.csp');
        $t = new \GRN_Smarty();

        $parameter = [self::ARG_SPACE_ID, self::ARG_TODO_ID];
        $this->checkArgFromInput($parameter, $input);
        $spaceId = $this->getSpaceId();
        $todoId = $this->getTodoId();
        $loginId = $this->getLoginUserId();
        $parentCmid = $this->getArrayValue(self::ARG_COMMENT_ID, $input);

        $todoService = TodoService::getInstance();
        if ($parentCmid) {
            $comment = $this->getTodoComment($spaceId, $todoId, $parentCmid,
                $loginId);
            $this->assignBreadcrumbUpperPage($t,
                cb_msg('grn.mobile', 'comment_detail_title'),
                'space/mobile/application/todo/comment_detail',
                [
                    self::ARG_SPACE_ID   => $spaceId,
                    self::ARG_TODO_ID    => $todoId,
                    self::ARG_COMMENT_ID => $parentCmid
                ]);
            $this->assignBreadcrumbCurrentPage($t,
                cb_msg('grn.mobile', 'comment_reply'));
        } else {
            $this->assignBreadcrumbUpperPage($t,
                cb_msg('grn.mobile', 'detail_title'), self::URL_TODO_DETAIL,
                [self::ARG_SPACE_ID => $spaceId, self::ARG_TODO_ID => $todoId]);
            $this->assignBreadcrumbCurrentPage($t,
                cb_msg('grn.mobile', 'comment_add'));
        }

        try {
            $threadObj = $this->getThreadByTodoId($spaceId, $todoId);
            $isAuthority
                = $todoService->hasTodoAccessControl(Authority::AUTHORITY_CODE_READ_DETAIL,
                $spaceId, $threadObj->getId(), $todoId, $loginId);

            if ( ! $isAuthority) {
                throw new GrnInvalidPermissionException(ErrorCode::GRN_TODO_NO_ACCESS_PERMISSION);
            }
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_INVALID_TODO_ID);
            throw $e;
        }

        $t->assign('page_title', $this->getTitle());
        $t->assign('space_id', $spaceId);
        $t->assign('todo_id', $todoId);
        $t->assign('parent_cmid', $parentCmid);

        //generate upload ticket
        include('grn/_upload_prepend.csp');

        return $t->fetch('space/mobile/application/todo/comment_add.tpl');
    }

    /**
     * @param $input
     *
     * @throws GrnDataNotFoundException
     * @throws GrnInvalidPermissionException
     * @throws GrnRequiredDataIsNotException
     * @throws \grn\space\common\exception\GrnInvalidArgumentException
     */
    public function post($input)
    {
        $this->setInput($input);
        $checkArr = [self::ARG_SPACE_ID, self::ARG_TODO_ID];

        $this->checkArgFromInput($checkArr, $input);

        $todoService = TodoService::getInstance();
        try {
            // Check authority
            $threadObj = $this->getThreadByTodoId($this->getSpaceId(),
                $this->getTodoId());
            $isAuthority
                = $todoService->hasTodoAccessControl(Authority::AUTHORITY_CODE_READ_DETAIL,
                $this->getSpaceId(), $threadObj->getId(), $this->getTodoId(),
                $this->getLoginUserId());

            if ($isAuthority) {
                $refTodoObj = $todoService->getTodo($this->getTodoId(),
                    $this->getLoginUserId());
            } else {
                throw new GrnInvalidPermissionException(ErrorCode::GRN_TODO_NO_WRITE_COMMENT_PERMISSION);
            }

            //attachment file
            if (@ $input['attached_file']) {
                require_once('grn/upload.csp');
                $uploadFileArray
                    = \GRN_UploadFile::getUploadedFiles(@$input['upload_ticket'],
                    @$input['file_input'], true);
            } else {
                $uploadFileArray = [];
            }
            // File check
            if (is_null($input['comment_data'])
                || strlen(cb_trim($input['comment_data'])) < 1
            ) {
                if ( ! $uploadFileArray || count($uploadFileArray) == 0) {
                    throw new GrnRequiredDataIsNotException(ErrorCode::GRN_TODO_EMPTY_COMMENT);
                }
            }

            //todo comment
            $commentObj = new Comment();
            $commentObj->setCreator($this->makeLoginUserSpaceMember());
            $commentObj->setContent(@ $input['comment_data']);
            $commentObj->setRichText(false);

            $commentObj->setParentApplicationType(Comment::PARENT_APPLICATION_TYPE_TODO);
            $commentObj->setParentApplicationId($refTodoObj->getId());

            // Todo comment reply
            if (array_key_exists('reply_comment_id', $input)
                && $input['reply_comment_id'] > 0
            ) {
                $commentObj->setParentCommentId($input['reply_comment_id']);
            }

            $newCommentObj = $todoService->createTodoComment($commentObj,
                $refTodoObj->getId(), $this->getLoginUser(), $uploadFileArray);
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_TODO_INVALID_COMMENT_ID);
            throw $e;
        }
    }
}
