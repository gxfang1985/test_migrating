<?php

namespace grn\space\screen\mobile\application\todo;

use grn\space\screen\mobile\MobileGenericScreenBase;
use grn\space\service\SpaceService;
use grn\space\data\condition\ThreadSearchCondition;
use grn\space\common\data\bean\Application;
use grn\space\common\data\bean\Authority;
use grn\space\service\DiscussionService;
use grn\space\common\utility\ValidateUtility;
use grn\space\data\bean\Folder;
use grn\space\data\condition\FolderSearchCondition;

/**
 * Class TodoFilter
 */
class TodoFilter extends MobileGenericScreenBase
{
    public function fetch()
    {
        $input = $this->getInput();
        $languageCode = $this->getLanguageCode();
        $loginId = $this->getLoginUserId();
        $isSystemUseEnglish = $this->isSystemUseEnglish();
        $isEnglishDisplayAfterName = $this->isEnglishDisplayAfterName();
        $isOrganizationDisplayAfterName
            = $this->isOrganizationDisplayAfterName();
        $parameter = [self::ARG_SPACE_ID];
        $this->checkArgFromInput($parameter, $input);
        $spaceId = $this->getSpaceId();
        $discussionId = $this->getArrayValue(self::ARG_THREAD_ID, $input);
        if ( ! ValidateUtility::isNumber($discussionId,
            ValidateUtility::ENABLE_EMPTY, ValidateUtility::EXCEPTION_NOT_THROW)
        ) {
            $discussionId = null;
        }

        $discussionService = DiscussionService::getInstance();
        $discussionRootCategory
            = $discussionService->getApplicationRootCategory($spaceId,
            Application::APPLICATION_CODE_DISCUSSION, $languageCode);
        $discussionSearchCondition = new ThreadSearchCondition();
        $discussionSearchCondition->setSearchCategoryId($discussionRootCategory->getId());
        $discussionSearchCondition->setSearchStringArray([ThreadSearchCondition::SORT_CREATE_TIME_ASC]);
        $discussionCollection
            = $discussionService->searchThreadBySearchConditionWithAccessControl(Authority::AUTHORITY_CODE_READ_DETAIL,
            $discussionSearchCondition, $loginId);

        $spaceService = SpaceService::getInstance();
        $spaceUserCollection
            = $spaceService->getSpaceUserCollectionOfUserOnly($spaceId,
            $loginId);

        //GTM-2201
        $folder_condition = new FolderSearchCondition();
        $folder_condition->setSpaceId($spaceId);
        $folder_collection
            = $spaceService->getFolderListByCondition($folder_condition);

        $has_folder_view = false;
        if (count($folder_collection) > 0) {
            $has_folder_view = true;
        }

        $thread_collection_for_view = [];
        if ($has_folder_view) {
            $thread_collection_for_view = $this->_createThreadCollectionForView(
                $discussionCollection, $folder_collection
            );
        }

        $countLoop = $spaceUserCollection->count();
        for ($i = $countLoop - 1; $i >= 0; $i--) {
            /** @var \grn\space\data\bean\SpaceUser $spaceUser */
            $spaceUser = $spaceUserCollection->getBean($i);
            if ($spaceUser->isNotUsingApp()) {
                $spaceUserCollection->remove($i);
            }
        }
        $spaceService->addUserInfo($spaceUserCollection, $loginId,
            $isSystemUseEnglish, $isEnglishDisplayAfterName,
            $isOrganizationDisplayAfterName, $languageCode);

        require_once('grn/smarty.csp');
        $t = new \GRN_Smarty();
        $t->assign('space_id', $spaceId);
        $t->assign('discussion_id', $discussionId);
        $t->assign('discussion_collection', $discussionCollection);
        $t->assign('space_user_collection', $spaceUserCollection);

        //GTM-2201
        $t->assign('thread_collection_for_view', $thread_collection_for_view);
        $t->assign('has_folder_view', $has_folder_view);

        //assign breadcrumb.
        $current_page = cb_msg('grn.mobile', 'filter');
        $upper_page = cb_msg('grn.space.todo', 'index');
        $this->assignBreadcrumbCurrentPage($t, $current_page);
        $this->assignBreadcrumbUpperPage($t, $upper_page, self::URL_TODO_LIST,
            $params = [self::ARG_SPACE_ID => $this->getSpaceId()]);

        return $t->display("space/mobile/application/todo/todo_filter.tpl");
    }

    /**
     * @return string
     */
    public function getTitle()
    {
        return grn_get_page_display_name('space/todo/todo_filter');
    }

    /**
     * @param $thread_collection
     * @param $folder_collection
     *
     * @return array
     */
    private function _createThreadCollectionForView(
        $thread_collection,
        $folder_collection
    ) {
        $thread_collection_for_view = [];
        foreach ($folder_collection as $folder) {
            /** @var \grn\space\data\bean\Folder $folder */
            $folder_id = $folder->getId();
            $thread_collection_for_view[] = [
                "value"       => "category" . $folder_id,
                "title"       => $folder->getFolderName(),
                "is_category" => true
            ];
            foreach ($thread_collection as $thread) {
                /** @var \grn\space\data\bean\Thread $thread */
                if ($folder_id === $thread->getFolderId()) {
                    $thread_collection_for_view[] = [
                        "value" => $thread->getId(),
                        "title" => $thread->getTitle()
                    ];
                }
            }
            if (array_key_exists("is_category",
                end($thread_collection_for_view))
            ) {
                array_pop($thread_collection_for_view);
            }
        }

        $no_folder = false;
        foreach ($thread_collection as $thread) {
            if (SpaceService::UNCATEGORIED == $thread->getFolderId()) {
                $no_folder = true;
                break;
            }
        }

        if ($no_folder) {
            $thread_collection_for_view[] = [
                "value"       => "category",
                "title"       => cb_msg('grn.space.todo', 'no_folder'),
                "is_category" => true
            ];
            foreach ($thread_collection as $thread) {
                if (SpaceService::UNCATEGORIED == $thread->getFolderId()) {
                    $thread_collection_for_view[] = [
                        "value" => $thread->getId(),
                        "title" => $thread->getTitle()
                    ];
                }
            }
            if (array_key_exists("is_category",
                end($thread_collection_for_view))
            ) {
                array_pop($thread_collection_for_view);
            }
        }

        return $thread_collection_for_view;
    }
}
