<?php

namespace grn\space\screen\mobile\application\todo;

use grn\grn\MemberLogic;
use grn\space\common\data\bean\SpaceFile;
use grn\space\data\bean\Todo;
use grn\space\screen\mobile\MobileGenericScreenBase;
use grn\space\service\TodoService;
use grn\space\service\SpaceService;
use grn\space\data\collection\TodoUserCollection;
use grn\space\data\bean\TodoUser;
use grn\space\common\data\bean\Authority;
use grn\space\common\exception\GrnInvalidArgumentException;
use grn\space\common\exception\GrnInvalidPermissionException;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\common\exception\GrnRequiredDataIsNotException;
use grn\space\common\exception\ErrorCode;
use grn\space\common\utility\SpaceFileUtility;
use grn\space\utility\TodoUtility;

/**
 * Class TodoModify
 */
class TodoModify extends MobileGenericScreenBase
{
    /**
     * Return raw HTML which will be used without being escaped.
     *
     * @return mixed|string
     * @throws GrnDataNotFoundException
     * @throws GrnInvalidArgumentException
     * @throws GrnInvalidPermissionException
     */
    public function fetch()
    {
        $input = $this->getInput();

        require_once('grn/smarty.csp');
        $t = new \GRN_Smarty();

        $parameter = [self::ARG_SPACE_ID, self::ARG_TODO_ID];
        $this->checkArgFromInput($parameter, $input);
        $spaceId = $this->getSpaceId();
        $todoId = $this->getTodoId();
        $loginId = $this->getLoginUserId();

        $todoService = TodoService::getInstance();

        try {
            // Check todo modify authority
            $threadObj = $this->getThreadByTodoId($spaceId, $todoId);
            $threadId = $threadObj->getId();
            $isAuthority
                = $todoService->hasTodoAccessControl(Authority::AUTHORITY_CODE_WRITE,
                $spaceId, $threadId, $todoId, $loginId);

            if ($isAuthority) {
                // Get todo information
                $todoObj = $todoService->getTodo($todoId, $loginId);
                // Get todo user
                $todoUserCollection = $todoObj->getTodoUserCollection();
                $todoUserCollection
                    = $todoService->filterByCurrentSpaceMemberOnly($todoUserCollection,
                    $spaceId);
            } else {
                throw new GrnInvalidPermissionException(ErrorCode::GRN_TODO_NO_MODIFY_PERMISSION);
            }
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_INVALID_TODO_ID);
            throw $e;
        }
        $t->assign('space_id', $spaceId);
        $t->assign('todo_id', $todoObj->getId());
        $t->assign('title', $todoObj->getTitle());
        $t->assign('memo', $todoObj->getContent());

        // Get start date and deadline date
        require_once('fw/date.csp');
        $timezone = $todoObj->getTimezone();
        if ($start_date = $todoObj->getStartTimestamp()) {
            $start_date = \cb_timestamp_to_datetime($start_date, $timezone);
            $start_date = new \CB_DateTimeEx($start_date);
            $start_date = $start_date->getDate();
            $start_date = $start_date->year . '/' . $start_date->month . '/'
                          . $start_date->day;
            $t->assign('start_date', $start_date);
        }
        if ($deadline_date = $todoObj->getDeadlineTimestamp()) {
            $deadline_date = \cb_timestamp_to_datetime($deadline_date,
                $timezone);
            $deadline_date = new \CB_DateTimeEx($deadline_date);
            $deadline_date = $deadline_date->getDate();
            $deadline_date = $deadline_date->year . '/' . $deadline_date->month
                             . '/' . $deadline_date->day;
            $t->assign('end_date', $deadline_date);
        }

        // Get Space member & todo user list
        $spaceService = SpaceService::getInstance();
        try {
            // Space member list
            $spaceUserArray = [];
            $todoUserArray = [];
            $userNames = '';
            $spaceUserCollection
                = $spaceService->getSpaceUserCollectionOfUserOnly($spaceId,
                $loginId);

            $spaceService->addUserInfo($spaceUserCollection,
                $loginId,
                $this->isSystemUseEnglish(),
                $this->isEnglishDisplayAfterName(),
                $this->isOrganizationDisplayAfterName(),
                $this->getLanguageCode());

            $countLoop = $spaceUserCollection->count();
            for ($i = $countLoop - 1; $i >= 0; $i--) {
                /** @var \grn\space\data\bean\SpaceUser $spaceUser */
                $spaceUser = $spaceUserCollection->getBean($i);
                if ($spaceUser->isNotUsingApp()) {
                    $spaceUserCollection->remove($i);
                }
            }

            foreach ($spaceUserCollection as $spaceMember) {
                /** @var \grn\space\data\bean\SpaceUser $spaceMember */
                if ($spaceMember->getMemberID() != ""
                    && ( ! $spaceMember->isNotUsingApp())
                ) {
                    $spaceUserArray[$spaceMember->getMemberID()]
                        = $spaceMember->getDisplayName();
                }
            }
            $spaceUserIds = array_keys($spaceUserArray);
            $spaceService->addUserInfo($todoUserCollection,
                $loginId,
                $this->isSystemUseEnglish(),
                $this->isEnglishDisplayAfterName(),
                $this->isOrganizationDisplayAfterName(),
                $this->getLanguageCode());
            // Todo user list
            foreach ($todoUserCollection as $todoUser) {
                /** @var \grn\space\data\bean\TodoUser $todoUser */
                $id = $todoUser->getMemberID();
                $name = $todoUser->getDisplayName();
                $todoUserArray[$id] = $name;
                $userIds = isset($userIds) ? $userIds . ', ' . $id
                    : $id;
                $userNames = $userNames ? $userNames . ', ' . $name
                    : $name;
                if (in_array($id, $spaceUserIds)) {
                    unset($spaceUserArray[$id]);
                }
            }
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_INVALID_SPACE_ID);
            throw $e;
        }

        $t->assign('space_users', $spaceUserArray);
        $t->assign('todo_users', $todoUserArray);
        $t->assign('user_ids', isset($userIds) ? $userIds : '');
        $t->assign('user_names', $userNames);

        //Get attachment file
        include('grn/_upload_prepend.csp');

        $spaceFileCollection = $todoObj->getSpaceFileCollection();
        $attachedFiles = [];
        foreach ($spaceFileCollection as $file) {
            /** @var SpaceFile $file */
            $attachedFiles[$file->getId()]
                = SpaceFileUtility::getSpaceFileLinkView($file);
        }
        global $G_state_set;
        $t->assign('attach_files', $attachedFiles);
        $t->assign('is_ios', cb_is_ios());
        $t->assign('product_term', cb_get_product_term(CB_TYPE_TEXT));
        $t->assign('copyright', cb_get_copyright(CB_TYPE_TEXT));
        $t->assign('is_cybozu_browser', $G_state_set->get('is_cybozu_browser'));

        //For modify todo breadcrumb
        $this->assignBreadcrumbUpperPage($t,
            cb_msg('grn.mobile', 'detail_title'), self::URL_TODO_DETAIL,
            [self::ARG_SPACE_ID => $spaceId, self::ARG_TODO_ID => $todoId]);
        $this->assignBreadcrumbCurrentPage($t, $this->getTitle());

        //For select member breadcrumb
        $current_page = cb_msg('grn.space.mobile', 'select_assignee');
        $upper_page = $this->getTitle();
        $t->assign('breadcrumb_upper_page_member', [
            'name'   => $upper_page,
            'page'   => "space/mobile/application/todo/modify",
            'params' => [
                self::ARG_SPACE_ID => $spaceId,
                self::ARG_TODO_ID  => $todoId
            ]
        ]);

        $app_id = $this->getMobileApplicationId();
        $t->assign('breadcrumb_current_page_member',
            ['app_id' => $app_id, 'name' => $current_page, 'icon' => null]);

        return $t->fetch('space/mobile/application/todo/todo_edit.tpl');
    }

    /**
     * Add Todo
     *
     * @param     $input
     *
     * @throws    GrnInvalidArgumentException
     * @throws    GrnInvalidPermissionException
     * @throws    GrnDataNotFoundException
     * @throws    GrnRequiredDataIsNotException
     * @return    Todo
     */
    public function post($input)
    {
        $this->setInput($input);
        $checkArr = [self::ARG_SPACE_ID, self::ARG_TODO_ID];

        $this->checkArgFromInput($checkArr, $input);
        if ( ! array_key_exists('title', $input)
             || strlen($input['title']) == 0
        ) {
            throw new GrnRequiredDataIsNotException(ErrorCode::GRN_TODO_TITLE_IS_NOT_FOUND);
        }

        $spaceId = $this->getSpaceId();
        $todoId = $this->getTodoId();
        $loginId = $this->getLoginUserId();

        $spaceService = SpaceService::getInstance();
        try {
            $space = $spaceService->getSpace($spaceId, $loginId,
                $this->getLanguageCode());
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_INVALID_SPACE_ID);
            throw $e;
        }

        $todoService = TodoService::getInstance();
        try {
            //check authority
            $threadObj = $this->getThreadByTodoId($spaceId, $todoId);
            $threadId = $threadObj->getId();
            $isWriteAuthority
                = $todoService->hasTodoAccessControl(Authority::AUTHORITY_CODE_WRITE,
                $spaceId, $threadId, $todoId, $loginId);

            if ( ! $isWriteAuthority) {
                throw new GrnInvalidPermissionException(ErrorCode::GRN_TODO_NO_MODIFY_PERMISSION);
            }
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_INVALID_TODO_ID);
            throw $e;
        }

        // Get Todo
        $todoObj = $todoService->getTodo($todoId, $loginId);

        // Modify todo information
        $todoObj->setModifier($this->makeLoginUserSpaceMember());
        $todoObj->setTitle(preg_replace('/\s\s+/', ' ', trim($input['title'])));
        $todoObj->setContent(@ $input['memo']);
        $todoObj->setRichText(false);

        // Set start date and deadline date
        $startTimestamp = null;
        $deadlineTimestamp = null;

        require_once('fw/date.csp');
        require_once('fw/basic_date.csp');
        $timezone = $this->getTimezoneName();

        if (@ $input['start']) {
            // YYYY/MM/DD
            $sdate = explode('/', @ $input['start']);
            if (is_array($sdate) && $sdate[0]) {
                ;
            }
            $expiration = new \CB_DateTime();
            $expiration->year = $sdate[0];
            $expiration->month = $sdate[1];
            $expiration->day = $sdate[2];
            $startTimestamp = \cb_datetime_to_timestamp($expiration,
                $timezone);
        }
        if ( ! @ $input['nolimit']) {
            $edate = explode('/', @ $input['end']);
            $expiration = new \CB_DateTime();
            $expiration->year = $edate[0];
            $expiration->month = $edate[1];
            $expiration->day = $edate[2];
            $deadlineTimestamp = \cb_datetime_to_timestamp($expiration,
                $timezone);

            if ( ! $space->getIsUnlimitedExpirationDate()) {
                $is_valid_due_date
                    = TodoUtility::isValidWithExpirationDate($expiration,
                    $space);
                if ( ! $is_valid_due_date) {
                    throw new GrnInvalidArgumentException(ErrorCode::GRN_TODO_INVALID_EXPIRATION_DATE);
                }
            }
        }
        if ($startTimestamp && $deadlineTimestamp
            && ($startTimestamp - $deadlineTimestamp > 0)
        ) {
            throw new GrnInvalidArgumentException(ErrorCode::GRN_TODO_INVALID_DATETIME);
        }

        $todoObj->setStartTimestamp($startTimestamp);
        $todoObj->setDeadlineTimestamp($deadlineTimestamp);
        $todoObj->setTimezone($timezone);

        $userCollection = new TodoUserCollection();
        $spaceUserIds = $this->getSpaceUserIds($spaceId);
        if (@ $input['todoMember'] && is_array(@ $input['todoMember'])) {
            $is_initialize = false;
            $status_initialize = cb_at($input, 'status_initialize');
            if ($status_initialize
                && $status_initialize
                   == TodoUser::ASSIGNEES_STATUS_INITIALIZE_ON
            ) {
                $is_initialize = true;
            }

            $todoUserIds = $input['todoMember'];
            foreach ($todoUserIds as $todoUserId) {
                if ( ! in_array($todoUserId, $spaceUserIds)) {
                    throw new GrnInvalidArgumentException(ErrorCode::GRN_INVALID_TODO_MEMBER);
                }
                $userObj = new TodoUser();
                $userObj->setId($todoUserId);
                $userObj->setMemberID($todoUserId);
                $userObj->setMemberType(MemberLogic::TYPE_USER);
                $userObj->setInitialize($is_initialize);
                $userCollection->appendBean($userObj);
            }
        }

        // --- Modify attachment file start---
        require_once('grn/controller.csp');

        // Get current thread files
        $grnSpaceFileArray = $todoObj->getGrnSpaceFileArray();
        // Get user selected files
        $files = [];
        if (array_key_exists('fids', $input) && is_array($input['fids'])) {
            foreach ($input['fids'] as $fid) {
                if (array_key_exists($fid, $grnSpaceFileArray)) {
                    $files[$fid] = $grnSpaceFileArray[$fid];
                }
            }
        }

        // Get upload files
        if (@ $input['attached_file']) {
            require_once('grn/upload.csp');
            $uploadFileArray
                = \GRN_UploadFile::getUploadedFiles(@$input['upload_ticket'],
                @$input['file_input'], true);
        } else {
            $uploadFileArray = [];
        }
        foreach ($uploadFileArray as $fid => $file) {
            if ( ! array_key_exists($fid, $files)) {
                $files[$fid] = $file;
            }
        }
        // --- Modify attachment file end---

        // modify todo
        $newTodoObj = $todoService->modifyTodo($todoObj, $userCollection,
            $this->getLoginUser(), $files);

        return $newTodoObj;
    }

    /**
     * @return string
     */
    public function getTitle()
    {
        return grn_get_page_display_name('space/todo/todo_edit');
    }

    /**
     * @return bool
     */
    public function getRemoveFooter()
    {
        return true;
    }
}
