<?php

namespace grn\space\screen\mobile\application\todo;

use grn\grn\MemberLogic;
use grn\space\screen\mobile\MobileGenericScreenBase;
use grn\space\service\DiscussionService;
use grn\space\service\TodoService;
use grn\space\service\SpaceService;
use grn\space\data\collection\TodoUserCollection;
use grn\space\data\bean\Todo;
use grn\space\data\bean\TodoUser;
use grn\space\common\data\bean\Application;
use grn\space\common\data\bean\Authority;
use grn\space\common\exception\GrnInvalidArgumentException;
use grn\space\common\exception\GrnInvalidPermissionException;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\common\exception\GrnRequiredDataIsNotException;
use grn\space\common\exception\ErrorCode;
use grn\space\utility\TodoUtility;

/**
 * Class TodoAdd
 */
class TodoAdd extends MobileGenericScreenBase
{
    /**
     * Return raw HTML which will be used without being escaped.
     *
     * @return string
     * @throws    GrnInvalidArgumentException
     * @throws    GrnInvalidPermissionException
     * @throws    GrnDataNotFoundException
     */
    public function fetch()
    {
        $input = $this->getInput();

        require_once('grn/smarty.csp');
        $t = new \GRN_Smarty();

        $parameter = [self::ARG_SPACE_ID, self::ARG_THREAD_ID];
        $this->checkArgFromInput($parameter, $input);
        $spaceId = $this->getSpaceId();
        $threadId = $this->getThreadId();
        $loginId = $this->getLoginUserId();

        try {
            //check authority
            $todoService = TodoService::getInstance();
            $rootCategory = $todoService->getApplicationRootCategory($spaceId,
                Application::APPLICATION_CODE_TODO, $this->getLanguageCode());

            if ( ! $todoService->hasTodoCategoryAccessControl(Authority::AUTHORITY_CODE_WRITE,
                $spaceId, $threadId, $rootCategory->getId(), $loginId)
            ) {
                throw new GrnInvalidPermissionException(ErrorCode::GRN_TODO_NO_CREATE_PERMISSION);
            }
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_INVALID_SPACE_ID);
            throw $e;
        }

        // Get space member
        $spaceService = SpaceService::getInstance();
        $spaceUserCollection
            = $spaceService->getSpaceUserCollectionOfUserOnly($spaceId,
            $this->getLoginUserId());

        $spaceService->addUserInfo(
            $spaceUserCollection,
            $this->getLoginUserId(),
            $this->isSystemUseEnglish(),
            $this->isEnglishDisplayAfterName(),
            $this->isOrganizationDisplayAfterName(),
            $this->getLanguageCode());

        $countLoop = $spaceUserCollection->count();
        for ($i = $countLoop - 1; $i >= 0; $i--) {
            /** @var \grn\space\data\bean\SpaceUser $spaceUser */
            $spaceUser = $spaceUserCollection->getBean($i);
            if ($spaceUser->isNotUsingApp()) {
                $spaceUserCollection->remove($i);
            }
        }

        foreach ($spaceUserCollection as $spaceMember) {
            /** @var \grn\space\data\bean\SpaceUser $spaceMember */
            $selectedUserArray[$spaceMember->getMemberID()]
                = $spaceMember->getDisplayName();
        }

        $from = cb_at($input, self::ARG_FROM);

        global $G_state_set;
        $t->assign('space_id', $spaceId);
        $t->assign('thread_id', $threadId);
        $t->assign('is_ios', cb_is_ios());
        $t->assign('from', $from);
        $t->assign('space_users', $selectedUserArray);
        $t->assign('product_term', cb_get_product_term(CB_TYPE_TEXT));
        $t->assign('copyright', cb_get_copyright(CB_TYPE_TEXT));
        $t->assign('is_cybozu_browser', $G_state_set->get('is_cybozu_browser'));

        //For add todo breadcrumb
        if ($from == self::FROM_DISCUSSION_DETAIL) {
            $this->assignBreadcrumbUpperPage($t,
                cb_msg('grn.mobile', 'detail_title'),
                self::URL_DISCUSSION_DETAIL, [
                    self::ARG_SPACE_ID  => $spaceId,
                    self::ARG_THREAD_ID => $threadId
                ]);
        } else {
            $this->assignBreadcrumbUpperPage($t,
                cb_msg('grn.space.todo', 'index'), self::URL_TODO_LIST, [
                    self::ARG_SPACE_ID  => $spaceId,
                    self::ARG_THREAD_ID => $threadId
                ]);
        }
        $this->assignBreadcrumbCurrentPage($t, $this->getTitle());

        //For select member breadcrumb
        $current_page = cb_msg('grn.space.mobile', 'select_assignee');
        $upper_page = $this->getTitle();
        $t->assign('breadcrumb_upper_page_member', [
            'name'   => $upper_page,
            'page'   => "space/mobile/application/todo/add",
            'params' => [
                self::ARG_SPACE_ID  => $spaceId,
                self::ARG_THREAD_ID => $threadId
            ]
        ]);

        $app_id = $this->getMobileApplicationId();
        $t->assign('breadcrumb_current_page_member',
            ['app_id' => $app_id, 'name' => $current_page, 'icon' => null]);

        //generate upload ticket
        include('grn/_upload_prepend.csp');

        return $t->fetch('space/mobile/application/todo/todo_add.tpl');
    }

    /**
     * Add Todo
     *
     * @param $input
     *
     * @return Todo
     * @throws    GrnInvalidArgumentException
     * @throws    GrnInvalidPermissionException
     * @throws    GrnDataNotFoundException
     * @throws    GrnRequiredDataIsNotException
     */
    public function post($input)
    {
        $this->setInput($input);
        $checkArr = [self::ARG_SPACE_ID, self::ARG_THREAD_ID];

        $this->checkArgFromInput($checkArr, $input);
        if ( ! array_key_exists('title', $input)
             || strlen($input['title']) == 0
        ) {
            throw new GrnRequiredDataIsNotException(ErrorCode::GRN_TODO_TITLE_IS_NOT_FOUND);
        }

        $spaceId = $this->getSpaceId();
        $threadId = $this->getThreadId();
        $loginId = $this->getLoginUserId();

        try {
            $spaceService = SpaceService::getInstance();
            $space = $spaceService->getSpace($spaceId, $loginId);
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_INVALID_SPACE_ID);
            throw $e;
        }

        try {
            $discussionService = DiscussionService::getInstance();
            $discussionService->getThread($threadId, $loginId);
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_INVALID_THREAD_ID);
            throw $e;
        }

        $todoService = TodoService::getInstance();

        try {
            //check authority
            $rootCategory = $todoService->getApplicationRootCategory($spaceId,
                Application::APPLICATION_CODE_TODO, $this->getLanguageCode());
            $isWriteAuthority
                = $todoService->hasTodoCategoryAccessControl(Authority::AUTHORITY_CODE_WRITE,
                $spaceId, $threadId, $rootCategory->getId(), $loginId);

            if ( ! $isWriteAuthority) {
                throw new GrnInvalidPermissionException(ErrorCode::GRN_TODO_NO_CREATE_PERMISSION);
            }
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_INVALID_SPACE_ID);
            throw $e;
        }
        $todoObj = new Todo();
        $todoObj->setCreator($this->makeLoginUserSpaceMember());
        $todoObj->setCategoryId($rootCategory->getId());
        $todoObj->setTitle(preg_replace('/\s\s+/', ' ', trim($input['title'])));

        //todo
        $todoObj->setContent(@ $input['memo']);
        $todoObj->setRichText(false);

        // Set start date and deadline date
        $startTimestamp = null;
        $deadlineTimestamp = null;

        require_once('fw/date.csp');
        require_once('fw/basic_date.csp');
        $timezone = $this->getTimezoneName();

        if (@ $input['start']) {
            // YYYY/MM/DD
            $sdate = explode('/', @ $input['start']);
            if (is_array($sdate) && $sdate[0]) {
                ;
            }
            $expiration = new \CB_DateTime();
            $expiration->year = $sdate[0];
            $expiration->month = $sdate[1];
            $expiration->day = $sdate[2];
            $startTimestamp = \cb_datetime_to_timestamp($expiration,
                $timezone);
        }
        if ( ! @ $input['nolimit']) {
            $edate = explode('/', @ $input['end']);
            $expiration = new \CB_DateTime();
            $expiration->year = $edate[0];
            $expiration->month = $edate[1];
            $expiration->day = $edate[2];
            $deadlineTimestamp = \cb_datetime_to_timestamp($expiration,
                $timezone);

            if ( ! $space->getIsUnlimitedExpirationDate()) {
                $is_valid_due_date
                    = TodoUtility::isValidWithExpirationDate($expiration,
                    $space);
                if ( ! $is_valid_due_date) {
                    throw new GrnInvalidArgumentException(ErrorCode::GRN_TODO_INVALID_EXPIRATION_DATE);
                }
            }
        }
        if ($startTimestamp && $deadlineTimestamp
            && ($startTimestamp - $deadlineTimestamp > 0)
        ) {
            throw new GrnInvalidArgumentException(ErrorCode::GRN_TODO_INVALID_DATETIME);
        }

        $todoObj->setStartTimestamp($startTimestamp);
        $todoObj->setDeadlineTimestamp($deadlineTimestamp);
        $todoObj->setTimezone($timezone);

        $userCollection = new TodoUserCollection();
        $spaceUserIds = $this->getSpaceUserIds($spaceId);
        if (@ $input['todoMember'] && is_array(@ $input['todoMember'])) {
            $todoUserIds = $input['todoMember'];
            foreach ($todoUserIds as $todoUserId) {
                if ( ! in_array($todoUserId, $spaceUserIds)) {
                    throw new GrnInvalidArgumentException(ErrorCode::GRN_INVALID_TODO_MEMBER);
                }
                $userObj = new TodoUser();
                $userObj->setMemberID($todoUserId);
                $userObj->setMemberType(MemberLogic::TYPE_USER);
                $userCollection->appendBean($userObj);
            }
        }

        //attachment file
        if (@ $input['attached_file']) {
            require_once('grn/upload.csp');
            $uploadFileArray
                = \GRN_UploadFile::getUploadedFiles(@$input['upload_ticket'],
                @$input['file_input'], true);
        } else {
            $uploadFileArray = [];
        }

        // create todo
        $newTodoObj = $todoService->createTodo($todoObj, $userCollection,
            $this->getLoginUser(), $uploadFileArray, $threadId);

        return $newTodoObj;
    }

    /**
     * @return string
     */
    public function getTitle()
    {
        return grn_get_page_display_name('space/todo/todo_add');
    }

    /**
     * @return bool
     */
    public function getRemoveFooter()
    {
        return true;
    }
}
