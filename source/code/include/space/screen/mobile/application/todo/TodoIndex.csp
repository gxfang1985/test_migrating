<?php

namespace grn\space\screen\mobile\application\todo;

use grn\grn\MemberLogic;
use grn\space\service\SpaceService;
use grn\space\service\DiscussionService;
use grn\space\service\TodoService;
use grn\space\data\bean\TodoUser;
use grn\space\data\collection\TodoUserCollection;
use grn\space\data\condition\TodoSearchCondition;
use grn\space\common\data\bean\Application;
use grn\space\common\data\bean\Authority;
use grn\space\common\exception\ErrorCode;
use grn\space\common\exception\GrnInvalidPermissionException;
use grn\space\common\exception\GrnInvalidArgumentException;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\common\utility\ValidateUtility;
use grn\space\common\utility\IconUtility;
use grn\space\screen\mobile\MobileGenericScreenBase;

/**
 * Class TodoIndex
 */
class TodoIndex extends MobileGenericScreenBase
{
    const ARG_TODO_STATUS = 's';
    const ARG_USER_ID = 'uid';

    private $_is_from_ajax;
    private $_todo_write_auth;

    /**
     * @param $input
     *
     * @throws GrnInvalidArgumentException
     */
    public function __construct($input)
    {
        parent::__construct($input);
        $parameter = [self::ARG_SPACE_ID];
        $this->checkArgFromInput($parameter, $input);
        $this->verifySpaceIsNotExpired();
        $space_id = $this->getSpaceId();
        $thread_id = $this->getArrayValue(self::ARG_THREAD_ID, $input);
        if ( ! ValidateUtility::isNumber($thread_id,
            ValidateUtility::ENABLE_EMPTY, ValidateUtility::EXCEPTION_NOT_THROW)
        ) {
            throw new GrnInvalidArgumentException(ErrorCode::GRN_INVALID_THREAD_ID);
        } else {
            $this->setThreadId($thread_id);

        }
        $language_code = $this->getLanguageCode();
        $login_id = $this->getLoginUserId();

        $todo_service = TodoService::getInstance();
        $this->_todo_root_category
            = $todo_service->getApplicationRootCategory($space_id,
            Application::APPLICATION_CODE_TODO, $language_code);
        if (ValidateUtility::isNull($thread_id)) {
            $this->_todo_write_auth = false;
        } else {
            $this->_todo_write_auth
                = $todo_service->hasTodoCategoryAccessControl(Authority::AUTHORITY_CODE_WRITE,
                $space_id, $thread_id, $this->_todo_root_category->getId(),
                $login_id);
        }

        $this->setMobileOperateMenu([
            [
                'page'   => 'space/mobile/member_list',
                'name'   => cb_msg('grn.space.mobile', 'member'),
                'params' => [
                    self::ARG_SPACE_ID => $space_id,
                    self::ARG_FROM     => self::FROM_TODO_INDEX
                ]
            ]
        ]);
        if ($this->_todo_write_auth) {
            $this->setMobileFooterBar([
                'add_spacetodo' => [
                    'page'   => 'space/mobile/application/todo/add',
                    'params' => [
                        self::ARG_SPACE_ID  => $space_id,
                        self::ARG_THREAD_ID => $thread_id,
                        self::ARG_FROM      => self::FROM_TODO_INDEX
                    ]
                ]
            ]);
        } else {
            $this->setMobileFooterBar();
        }
    }

    /**
     * Return raw HTML which will be used without being escaped.
     *
     * @return mixed|string|void
     * @throws GrnDataNotFoundException
     * @throws GrnInvalidArgumentException
     * @throws GrnInvalidPermissionException
     * @throws \grn\space\common\exception\GrnArgumentOutOfRangeException
     */
    public function fetch()
    {
        $input = $this->getInput();

        $space_id = $this->getSpaceId();
        $thread_id = $this->getThreadId();
        $is_system_use_english = $this->isSystemUseEnglish();
        $is_english_display_after_name
            = $this->isEnglishDisplayAfterName();
        $is_organization_display_after_name
            = $this->isOrganizationDisplayAfterName();
        $language_code = $this->getLanguageCode();
        $login_id = $this->getLoginUserId();

        $user_id = $this->getArrayValue(self::ARG_USER_ID, $input);
        $todo_status = $this->getArrayValue(self::ARG_TODO_STATUS, $input);
        $offset = $this->getArrayValue(self::ARG_NAVI_TAG, $input);

        if ( ! ValidateUtility::isIn($todo_status, [
            TodoSearchCondition::STATUS_COMPLETE,
            TodoSearchCondition::STATUS_INCOMPLETE,
            TodoSearchCondition::STATUS_INCOMPLETE_PARTICIPANT_USER
        ], ValidateUtility::DISABLE_EMPTY, ValidateUtility::EXCEPTION_NOT_THROW)
        ) {
            $todo_status = TodoSearchCondition::STATUS_INCOMPLETE;
        }
        if (ValidateUtility::isNumber($user_id, ValidateUtility::DISABLE_EMPTY,
            ValidateUtility::EXCEPTION_NOT_THROW)
        ) {
            if ($user_id
                == TodoSearchCondition::SEARCH_PARTICIPANT_USER_NOUSER
            ) {
                $todo_status = TodoSearchCondition::STATUS_INCOMPLETE;
            } else {
                $todo_status
                    = TodoSearchCondition::STATUS_INCOMPLETE_PARTICIPANT_USER;
            }
        } else {
            $user_id = null;
        }
        if ( ! ValidateUtility::isNumber($offset,
            ValidateUtility::DISABLE_EMPTY,
            ValidateUtility::EXCEPTION_NOT_THROW)
        ) {
            $offset = 0;
        }

        $todo_service = TodoService::getInstance();
        $todo_root_category_id = $this->_todo_root_category->getId();

        // check todo category authority
        if (ValidateUtility::isNotNull($thread_id)) {
            $read_auth
                = $todo_service->hasTodoCategoryAccessControl(Authority::AUTHORITY_CODE_READ_DETAIL,
                $space_id, $thread_id, $todo_root_category_id, $login_id);
            if ( ! $read_auth) {
                throw new GrnInvalidPermissionException(ErrorCode::GRN_THREAD_NO_ACCESS_PERMISSION);
            }

            // get selected discussion
            $discussion_service = DiscussionService::getInstance();
            $selected_discussion = $discussion_service->getThread($thread_id,
                $login_id);
        }

        $todo_search_condition = new TodoSearchCondition();
        $todo_search_condition->setSearchCategoryId($todo_root_category_id);
        $todo_search_condition->setSearchThreadId($thread_id);
        $todo_search_condition->setSearchParticipantUserId($user_id);
        $todo_search_condition->setSearchStatus($todo_status);
        $todo_search_condition->setLimit(self::MORE_VIEW_COUNT + $offset);
        if ($todo_status == TodoSearchCondition::STATUS_COMPLETE) {
            $todo_search_condition->setOrderSortArray([
                TodoSearchCondition::SORT_DEADLINE_TIMESTAMP_DESC,
                TodoSearchCondition::SORT_CREATE_TIME_DESC
            ]);
        } else {
            $todo_search_condition->setOrderSortArray([
                TodoSearchCondition::SORT_DEADLINE_TIMESTAMP_ASC,
                TodoSearchCondition::SORT_CREATE_TIME_DESC
            ]);
        }
        $todo_collection
            = $todo_service->searchTodoBySearchConditionWithAccessControl(Authority::AUTHORITY_CODE_READ_DETAIL,
            $todo_search_condition, $login_id, false, true, true);
        $todo_service->addTodoCollectionUserInfo($todo_collection);
        $todos = [];

        foreach ($todo_collection as $todo) {
            /** @var \grn\space\data\bean\Todo $todo */
            if ($todo_status == TodoSearchCondition::STATUS_COMPLETE) {
                $todo_user_collection = $todo->getTodoUserCollection();
                $user_number = $todo_user_collection->count() - 1;
                $todo_user_for_view = $user_number >= 0
                    ? $todo_user_collection->getBean(0) : null;
            } else {
                if ($user_id != null && $user_id != 0) {
                    $user = new TodoUser();
                    $user->setMemberID($user_id);
                    $user->setMemberType(MemberLogic::TYPE_USER);
                    $todo_user_collection = new TodoUserCollection();
                    $todo_user_collection->appendBean($user);
                    $todo_service->addUserInfo($todo_user_collection, $login_id,
                        $is_system_use_english, $is_english_display_after_name,
                        $is_organization_display_after_name, $language_code);
                    $todo_user_for_view = $todo_user_collection->getBean(0);
                    $user_number = 0;
                } else {
                    $todo_users = [];
                    $todo_user_collection = $todo->getTodoUserCollection();
                    foreach ($todo_user_collection as $todo_user) {
                        /** @var \grn\space\data\bean\TodoUser $todo_user */
                        if ( ! $todo_user->isComplete()) {
                            $todo_users[] = $todo_user;
                        }
                    }
                    $user_number = count($todo_users) - 1;
                    $todo_user_for_view = $user_number >= 0 ? $todo_users[0]
                        : null;
                    unset($todo_users);
                }
            }
            //judge whether the todo is assigned to login user, and whether login user has completed it.
            $isMember_login = false;
            $isComplete_login = false;
            foreach ($todo_user_collection as $todo_user) {
                if ($todo_user->getMemberID() == $login_id) {
                    $isMember_login = true;
                    if ($todo_user->isComplete()) {
                        $isComplete_login = true;
                    }
                }
            }
            $deadline = $this->transferTimestampToDateEx($todo,
                $todo->getDeadlineTimestamp());
            $todos[] = [
                'id'               => $todo->getId(),
                'deadline'         => $deadline,
                'title'            => $todo->getTitle(),
                'user'             => $todo_user_for_view,
                'user_number'      => $user_number,
                'status'           => $this->getTodoStatus($todo),
                'isMember_login'   => $isMember_login,
                'isComplete_login' => $isComplete_login
            ];
        }

        // get new offset for view more
        $this->setNewOffset($offset, self::MORE_VIEW_COUNT,
            $todo_collection->getCountNoLimit());

        require_once('grn/smarty.csp');
        $t = new \GRN_Smarty();
        $t->assign('space_id', $space_id);
        $t->assign('thread_id', $thread_id);
        if (ValidateUtility::isNotNull($thread_id)) {
            $t->assign('selected_discussion', $selected_discussion);
        }
        $t->assign('todo_status', $todo_status);
        $t->assign('todo_write_auth', $this->_todo_write_auth);
        $t->assign('todos', $todos);

        //assign breadcrumb.
        try {
            $spaceService = SpaceService::getInstance();
            $space = $spaceService->getSpace($space_id, $login_id,
                $this->getLanguageCode());
            IconUtility::constructionSpaceIconPath($space);
            $space_name = $space->getSpaceName();
            $space_icon = $space->getDisplayIconPath();
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_INVALID_SPACE_ID);
            throw $e;
        }
        $upper_page = grn_get_page_display_name('space/index');
        $this->assignBreadcrumbCurrentPage($t, $space_name, $space_icon);
        $this->assignBreadcrumbUpperPage($t, $upper_page,
            self::URL_MY_SPACE_LIST);

        if ($this->_is_from_ajax) {
            return $t->fetch("space/mobile/application/todo/todo_list.tpl");
        } else {
            $t->assign('space', $space);
            $t->assign('offset', $this->getNewOffset());
            $t->assign('more_view_args', [
                self::ARG_SPACE_ID    => $space_id,
                self::ARG_THREAD_ID   => $thread_id,
                self::ARG_USER_ID     => $user_id,
                self::ARG_TODO_STATUS => $todo_status
            ]);

            return $t->fetch("space/mobile/application/todo/index.tpl");
        }
    }

    /**
     * @return bool
     */
    public function getIsFromAjax()
    {
        return $this->_is_from_ajax;
    }

    /**
     * @param $is_from_ajax
     */
    public function setIsFromAjax($is_from_ajax)
    {
        $this->_is_from_ajax = $is_from_ajax;
    }

    /**
     * @return string
     */
    public function getTitle()
    {
        return grn_get_page_display_name('space/todo/todo_list');
    }
}
