<?php

namespace grn\space\screen\mobile\application\discussion;

use grn\space\screen\mobile\MobileGenericScreenBase;
use grn\space\service\DiscussionService;
use grn\space\service\SpaceService;
use grn\space\common\data\bean\Authority;
use grn\space\common\data\bean\Application;
use grn\space\data\condition\FolderSearchCondition;
use grn\space\data\bean\Thread;
use grn\space\common\exception\ErrorCode;
use grn\space\common\exception\GrnInvalidArgumentException;
use grn\space\common\exception\GrnInvalidPermissionException;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\common\exception\GrnRequiredDataIsNotException;
use grn\space\common\exception\GrnArgumentOutOfRangeException;

/**
 * Class DiscussionAdd
 */
class DiscussionAdd extends MobileGenericScreenBase
{
    /**
     * Return raw HTML which will be used without being escaped.
     *
     * @return string
     * @throws    GrnInvalidArgumentException
     * @throws    GrnInvalidPermissionException
     * @throws    GrnArgumentOutOfRangeException
     * @throws    GrnDataNotFoundException
     */
    public function fetch()
    {
        $input = $this->getInput();

        require_once('grn/smarty.csp');
        $t = new \GRN_Smarty();

        $parameter = [self::ARG_SPACE_ID];
        $this->checkArgFromInput($parameter, $input);
        $space_id = $this->getSpaceId();

        try {
            //check authority
            $spaceService = DiscussionService::getInstance();
            $rootThreadCategoryObj
                = $spaceService->getApplicationRootCategory($space_id,
                Application::APPLICATION_CODE_DISCUSSION,
                $this->getLanguageCode());

            if ( ! $spaceService->hasThreadCategoryAccessControl(Authority::AUTHORITY_CODE_WRITE,
                $space_id, $rootThreadCategoryObj->getId(),
                $this->getLoginUserId())
            ) {
                throw new GrnInvalidPermissionException(ErrorCode::GRN_THREAD_NO_CREATE_PERMISSION);
            }
            $t->assign('space_id', $space_id);

            $spaceService = new SpaceService();

            $folder_condition = new FolderSearchCondition();
            $folder_condition->setSpaceId($space_id);

            $folderCollection
                = $spaceService->getFolderListByCondition($folder_condition);

            $is_display_folder = false;

            $folder_list = [];

            if ($folderCollection->count() > 0) {
                $is_display_folder = true;

                foreach ($folderCollection as $folder) {
                    /** @var \grn\space\data\bean\Folder $folder */
                    $folder_list[] = [
                        'value' => $folder->getId(),
                        'title' => $folder->getFolderName()
                    ];
                }
            }

            $t->assign('is_display_folder', $is_display_folder);
            $t->assign('folder_list', $folder_list);
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_INVALID_SPACE_ID);
            throw $e;
        }

        //generate upload ticket
        include('grn/_upload_prepend.csp');

        $this->assignBreadcrumbUpperPage($t,
            cb_msg('grn.space.discussion', 'index'), self::URL_DISCUSSION_LIST,
            [self::ARG_SPACE_ID => $space_id]);
        $this->assignBreadcrumbCurrentPage($t, $this->getTitle());

        return $t->fetch('space/mobile/application/discussion/discussion_add.tpl');
    }

    /**
     * Create Thread
     *
     * @param  $input
     *
     * @throws    GrnInvalidArgumentException
     * @throws    GrnRequiredDataIsNotException
     * @throws    GrnArgumentOutOfRangeException
     * @throws    GrnInvalidPermissionException
     * @return Thread
     */
    public function post($input)
    {
        $this->setInput($input);

        $parameter = [self::ARG_SPACE_ID];
        $this->checkArgFromInput($parameter, $input);
        $space_id = $this->getSpaceId();

        if ( ! array_key_exists('title', $input)
             || strlen($input['title']) == 0
        ) {
            throw new GrnRequiredDataIsNotException(ErrorCode::GRN_THREAD_TITLE_IS_NOT_FOUND);
        }

        $loginId = $this->getLoginUserId();

        //check authority
        $threadService = DiscussionService::getInstance();

        $rootThreadCategoryObj = $threadService->getApplicationRootCategory(
            $space_id, Application::APPLICATION_CODE_DISCUSSION,
            $this->getLanguageCode()
        );

        if ( ! $threadService->hasThreadCategoryAccessControl(
            Authority::AUTHORITY_CODE_WRITE, $space_id,
            $rootThreadCategoryObj->getId(), $loginId
        )
        ) {
            throw new GrnInvalidPermissionException(ErrorCode::GRN_THREAD_NO_CREATE_PERMISSION);
        } else {
            $threadObj = new Thread();

            $threadObj->setCreator($this->makeLoginUserSpaceMember());

            $threadObj->setCategoryId($rootThreadCategoryObj->getId());

            $threadObj->setTitle(preg_replace('/\s\s+/', ' ',
                trim($input['title'])));

            $threadObj->setContent($input['thread_data']);

            $threadObj->setRichText(false);

            $folder_id = cb_at($input, self::ARG_SPACE_FOLDER_ID, '');

            if ($folder_id != '') {
                $spaceService = new SpaceService();

                $folder = $spaceService->getFolder($folder_id);

                if ($folder->getId() === ""
                    || $folder->getSpaceId() != $space_id
                ) {
                    throw new GrnRequiredDataIsNotException(ErrorCode::GRN_FOLDER_INVALID_ID);
                }
                $threadObj->setFolderId($folder_id);
            } else {
                $threadObj->setFolderId(SpaceService::UNCATEGORIED);
            }

            //attachment file
            if (@ $input['attached_file']) {
                require_once('grn/upload.csp');
                $uploadFileArray
                    = \GRN_UploadFile::getUploadedFiles(@$input['upload_ticket'],
                    @$input['file_input'], true);
            } else {
                $uploadFileArray = [];
            }

            $newThreadObj = $threadService->createThread($threadObj,
                $this->getLoginUser(), $uploadFileArray);

            return $newThreadObj;
        }
    }

    /**
     * @return string
     */
    public function getTitle()
    {
        return grn_get_page_display_name('space/discussion/thread_add');
    }
}
