<?php

namespace grn\space\screen\mobile\application\discussion;

use grn\grn\MemberLogic;
use grn\grn\mention\MentionController;
use grn\space\logic\SpaceLogic;
use grn\space\screen\mobile\MobileGenericScreenBase;
use grn\space\common\data\bean\Authority;
use grn\space\service\DiscussionService;
use grn\space\service\TodoService;
use grn\space\common\data\bean\Comment;
use grn\space\common\exception\ErrorCode;
use grn\space\common\exception\GrnInvalidArgumentException;
use grn\space\common\exception\GrnRequiredDataIsNotException;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\common\exception\GrnInvalidPermissionException;

/**
 * Class DiscussionCommentAdd
 */
class DiscussionCommentAdd extends MobileGenericScreenBase
{
    /**
     * Return raw HTML which will be used without being escaped.
     *
     * @return string
     * @throws    GrnInvalidArgumentException
     * @throws    GrnInvalidPermissionException
     * @throws    GrnDataNotFoundException
     */
    public function fetch()
    {
        $input = $this->getInput();

        require_once('grn/smarty.csp');
        $t = new \GRN_Smarty();

        $parameter = [self::ARG_SPACE_ID, self::ARG_THREAD_ID];
        $this->checkArgFromInput($parameter, $input);
        $spaceId = $this->getSpaceId();
        $threadId = $this->getThreadId();
        $loginId = $this->getLoginUserId();
        $parentCmid = $this->getArrayValue(self::ARG_COMMENT_ID, $input);

        $discussionService = DiscussionService::getInstance();
        if ($parentCmid) {
            $comment = $this->getDiscussionComment($spaceId, $threadId,
                $parentCmid, $loginId);
            $is_todo_cmnt = false;
            if ($comment->getParentApplicationType()
                == Comment::PARENT_APPLICATION_TYPE_TODO
            ) {
                $is_todo_cmnt = true;
                $todo = $comment->getParentApplicationObject();
                $todoId = $todo->getID();

            }
            $this->assignBreadcrumbUpperPage($t,
                cb_msg('grn.mobile', 'comment_detail_title'),
                'space/mobile/application/discussion/comment_detail',
                [
                    self::ARG_SPACE_ID   => $spaceId,
                    self::ARG_THREAD_ID  => $threadId,
                    self::ARG_COMMENT_ID => $parentCmid
                ]);
            $this->assignBreadcrumbCurrentPage($t,
                cb_msg('grn.mobile', 'comment_reply'));
        } else {
            $this->assignBreadcrumbUpperPage($t,
                cb_msg('grn.mobile', 'detail_title'),
                self::URL_DISCUSSION_DETAIL, [
                    self::ARG_SPACE_ID  => $spaceId,
                    self::ARG_THREAD_ID => $threadId
                ]);
            $this->assignBreadcrumbCurrentPage($t,
                cb_msg('grn.mobile', 'comment_add'));
        }

        try {
            $isAuthority
                = $discussionService->hasThreadAccessControl(Authority::AUTHORITY_CODE_READ_DETAIL,
                $spaceId, $threadId, $loginId);

            if ( ! $isAuthority) {
                throw new GrnInvalidPermissionException(ErrorCode::GRN_THREAD_NO_ACCESS_PERMISSION);
            }
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_INVALID_THREAD_ID);
            throw $e;
        }

        $t->assign('page_title', $this->getTitle());
        $t->assign('space_id', $spaceId);
        $t->assign('thread_id', $this->getThreadId());
        $t->assign('parent_cmid', $parentCmid);
        $t->assign('reply_comment_istodo',
            (isset($is_todo_cmnt) ? $is_todo_cmnt : false));
        $t->assign('reply_comment_todo_id', (isset($todoId) ? $todoId : ''));

        require_once('fw/plugin.csp');
        $mention_access_plugin_encoded = \CB_PluginLoader::encodeParam(
            [
                'name'   => 'space',
                'params' => [
                    'app_id'   => 'space',
                    'space_id' => $spaceId,
                    'target'   => [MemberLogic::TYPE_USER]
                ]
            ]);
        $t->assign('mention_access_plugin_encoded',
            $mention_access_plugin_encoded);

        //generate upload ticket
        include('grn/_upload_prepend.csp');

        return $t->fetch('space/mobile/application/discussion/comment_add.tpl');
    }

    /**
     * @param $input
     *
     * @throws GrnDataNotFoundException
     * @throws GrnInvalidArgumentException
     * @throws GrnInvalidPermissionException
     * @throws GrnRequiredDataIsNotException
     * @throws \grn\space\common\exception\GrnInvalidArgumentException
     */
    public function post($input)
    {
        $this->setInput($input);
        $input = $this->getInput();

        $parameter = [self::ARG_SPACE_ID, self::ARG_THREAD_ID];
        $this->checkArgFromInput($parameter, $input);
        $spaceId = $this->getSpaceId();
        $threadId = $this->getThreadId();
        $loginId = $this->getLoginUserId();

        $discussionService = DiscussionService::getInstance();

        // Check authority
        try {
            $isAuthority
                = $discussionService->hasThreadAccessControl(Authority::AUTHORITY_CODE_READ_DETAIL,
                $spaceId, $threadId, $loginId);

            if ( ! $isAuthority) {
                throw new GrnInvalidPermissionException(ErrorCode::GRN_THREAD_NO_ACCESS_PERMISSION);
            }
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_INVALID_THREAD_ID);
            throw $e;
        }

        // Attachments
        if (@ $input['attached_file']) {
            require_once('grn/upload.csp');
            $uploadFileArray
                = \GRN_UploadFile::getUploadedFiles(@$input['upload_ticket'],
                @$input['file_input'], true);
        } else {
            $uploadFileArray = [];
        }
        // File check
        if (is_null($input['comment_data'])
            || strlen(cb_trim($input['comment_data'])) < 1
        ) {
            if ( ! $uploadFileArray || count($uploadFileArray) == 0) {
                throw new GrnRequiredDataIsNotException(ErrorCode::GRN_THREAD_EMPTY_COMMENT);
            }
        }

        $commentObj = new Comment();
        $commentObj->setCreator($this->makeLoginUserSpaceMember());
        $mention = MentionController::getMentionObjectsFromRequestArgs($input);
        $commentObj->setMention($mention);
        $mention_member_ids = $mention->getObjectIdsGroupByType();
        $mention_user_ids
            = $mention_member_ids[MemberLogic::TYPE_USER];
        $space_logic = SpaceLogic::getInstance();
        $no_permission_mentioned_user_ids = $space_logic
            ->filterUsersNotHavingPermission($this->getSpaceId(),
                $mention_user_ids);
        if ($no_permission_mentioned_user_ids) {
            cb_throw_error('GRN_SPACE_00028',
                null,
                ['users' => MemberLogic::getCommaSeparatedUserNames($no_permission_mentioned_user_ids)]
            );
        }
        $commentObj->setContent(@ $input['comment_data']);
        $commentObj->setRichText(false);
        if (array_key_exists('reply_comment_id', $input)
            && $input['reply_comment_id'] > 0
        ) {
            $commentObj->setParentCommentId($input['reply_comment_id']);
        }

        $threadObj = $discussionService->getThread($threadId, $loginId);

        if (array_key_exists('reply_comment_istodo', $input)
            && $input['reply_comment_istodo']
        ) {
            if ( ! array_key_exists('reply_comment_todo_id', $input)) {
                throw new GrnInvalidArgumentException(ErrorCode::GRN_INVALID_TODO_ID);
            }
            $commentObj->setParentApplicationType(Comment::PARENT_APPLICATION_TYPE_TODO);
            $commentObj->setParentApplicationId($input['reply_comment_todo_id']);

            $todoService = TodoService::getInstance();
            try {
                $newCommentObj = $todoService->createTodoComment($commentObj,
                    $input['reply_comment_todo_id'], $this->getLoginUser(),
                    $uploadFileArray);
            } catch (GrnDataNotFoundException $e) {
                $e->setErrorCode(ErrorCode::GRN_TODO_INVALID_COMMENT_ID);
                throw $e;
            }
        } else {
            try {
                $newCommentObj
                    = $discussionService->createThreadComment($commentObj,
                    $threadObj->getId(), $this->getLoginUser(),
                    $uploadFileArray);
            } catch (GrnDataNotFoundException $e) {
                $e->setErrorCode(ErrorCode::GRN_THREAD_INVALID_COMMENT_ID);
                throw $e;
            }
        }
    }
}
