<?php

namespace grn\space\screen\mobile\application\discussion;

use grn\space\screen\mobile\MobileGenericScreenBase;
use grn\space\common\data\bean\Authority;
use grn\space\common\utility\SpaceFileUtility;
use grn\space\common\exception\ErrorCode;
use grn\space\common\exception\GrnInvalidPermissionException;
use grn\space\service\DiscussionService;
use grn\favour\service\FavourService;

/**
 * Class DiscussionBody
 */
class DiscussionBody extends MobileGenericScreenBase
{
    /**
     * DiscussionBody constructor.
     *
     * @param $input
     */
    public function __construct($input)
    {
        parent::__construct($input);
        $this->setMobileFooterBar();
    }

    /**
     * @return mixed|string|void
     * @throws GrnInvalidPermissionException
     * @throws \grn\favour\exception\FavourException
     * @throws \grn\space\common\exception\GrnInvalidArgumentException
     */
    public function fetch()
    {
        $input = $this->getInput();
        $loginId = $this->getLoginUserId();
        $parameter = [self::ARG_SPACE_ID, self::ARG_THREAD_ID];
        $this->checkArgFromInput($parameter, $input);
        $spaceId = $this->getSpaceId();
        $discussionId = $this->getThreadId();
        $discussionService = DiscussionService::getInstance();
        $readAuth
            = $discussionService->hasThreadAccessControl(Authority::AUTHORITY_CODE_READ_DETAIL,
            $spaceId, $discussionId, $loginId);
        if ($readAuth) {
            $discussionObj = $discussionService->getThread($discussionId,
                $loginId);
            $discussionService->registerReadThread($discussionId, $loginId);
            if ($discussionService->isNotConfirmedDiscussionNotification($loginId,
                $discussionId)
            ) {
                $discussionService->confirmDiscussionNotification($loginId,
                    $discussionObj);
            }
        } else {
            throw new GrnInvalidPermissionException(ErrorCode::GRN_THREAD_NO_ACCESS_PERMISSION);
        }
        $spaceFileCollection = $discussionObj->getSpaceFileCollection();
        $attachFiles = [];
        foreach ($spaceFileCollection as $file) {
            /** @var \grn\space\common\data\bean\SpaceFile $file */
            $attachFiles[$file->getId()]
                = SpaceFileUtility::getSpaceFileLinkView($file);
        }
        require_once('grn/smarty.csp');
        $smarty = new \GRN_Smarty();
        require_once('star/logic.csp');
        $starLogic = \GRN_Star_StarLogic::getInstance();
        $useStar = $starLogic->isActive();
        $smarty->assign('use_star', $useStar);
        if ($useStar) {
            $smarty->assign('star_infos',
                $starLogic->getStatusByIDs($this->getLoginUser(),
                    self::GRN_SPACE_MODULE_ID, [$discussionObj->getId()]));
            $smarty->assign('module', self::GRN_SPACE_MODULE_ID);
            $smarty->assign('sub_module', self::GRN_DISCUSSION_SUB_MODULE_ID);
        }
        $smarty->assign('space_id', $spaceId);
        $smarty->assign('discussion_obj', $discussionObj);
        $smarty->assign('attach_files', $attachFiles);

        // for favour
        $favour_service = new FavourService();
        $is_favour_active = $favour_service->isFavourAppActive();
        if ($is_favour_active) {
            $params = [self::ARG_SPACE_ID => $spaceId];
            require_once('space/GrnSpaceApplication.csp');
            $favour_info
                = $favour_service->constructFavourInfo(\GrnSpaceApplication::GRN_SPACE_MODULE_ID,
                \GrnSpaceApplication::FAVOUR_DISCUSSION_BODY,
                $discussionId,
                $loginId,
                $params,
                \GrnSpaceApplication::GRN_DISCUSSION_SUB_MODULE_ID);
            $smarty->assign('favour_info', $favour_info);
        }
        $smarty->assign('is_favour_active', $is_favour_active);

        //assign breadcrumb.
        $current_page = cb_msg('grn.mobile', 'body');
        $upper_page = cb_msg('grn.mobile', 'detail_title');
        $this->assignBreadcrumbCurrentPage($smarty, $current_page);
        $this->assignBreadcrumbUpperPage($smarty, $upper_page,
            self::URL_DISCUSSION_DETAIL, $params = [
                self::ARG_SPACE_ID  => $spaceId,
                self::ARG_THREAD_ID => $discussionId
            ]);

        return $smarty->fetch("space/mobile/application/discussion/discussion_body.tpl");
    }
}
