<?php

namespace grn\space\screen\mobile\application\discussion;

use grn\grn\mention\MentionController;
use grn\space\screen\mobile\MobileGenericScreenBase;
use grn\space\service\DiscussionService;
use grn\space\common\utility\SpaceFileUtility;
use grn\space\common\utility\SpaceDatetimeUtility;
use grn\space\common\data\bean\Comment;
use grn\favour\service\FavourService;
use grn\grn\MemberLogic;

/**
 * Class DiscussionCommentDetail
 */
class DiscussionCommentDetail extends MobileGenericScreenBase
{
    const ARG_IS_REPLY_ALL = 'is_reply_all';

    private $_comment;
    private $_isReplyAll = false;

    /**
     * @param $input
     */
    public function __construct($input)
    {
        parent::__construct($input);
        $input = $this->getInput();

        $parameter = [
            self::ARG_SPACE_ID,
            self::ARG_THREAD_ID,
            self::ARG_COMMENT_ID
        ];
        $this->checkArgFromInput($parameter, $input);

        $spaceId = $this->getSpaceId();
        $threadId = $this->getThreadId();
        $commentId = $this->getCommentId();
        $loginId = $this->getLoginUserId();
        $this->_comment = $this->getDiscussionComment($spaceId, $threadId,
            $commentId, $loginId);

        $is_reply_all = $input[self::ARG_IS_REPLY_ALL] ?? false;
        $this->setIsReplyAll(boolval($is_reply_all));
    }

    /**
     * @return string
     */
    public function fetch()
    {
        $loginId = $this->getLoginUserId();
        $spaceId = $this->getSpaceId();
        $threadId = $this->getThreadId();
        $commentId = $this->getCommentId();

        $is_todo_cmnt = false;
        $comment = $this->_comment;
        if ($comment->getParentApplicationType()
            == Comment::PARENT_APPLICATION_TYPE_TODO
        ) {
            $is_todo_cmnt = true;
            $todo = $comment->getParentApplicationObject();
            $todoId = $todo->getID();
            $todoTitle = $todo->getTitle();
            $todoDeadline = $this->transferTimestampToDateEx($todo,
                $todo->getDeadlineTimestamp());
        }

        // Construction display user name and update time
        $discussionService = DiscussionService::getInstance();
        $discussionService->addInspectionUserInfo(
            $comment,
            $loginId,
            $this->isSystemUseEnglish(),
            $this->isEnglishDisplayAfterName(),
            $this->isOrganizationDisplayAfterName(),
            $this->getLanguageCode());
        SpaceDatetimeUtility::constructDisplayDatetimeOfInspection(
            $comment,
            $this->getDatetimeFormat(),
            SpaceDatetimeUtility::DISPLAY_TYPE_LONGDATE_AND_TIME,
            $this->getLanguageCode(),
            $this->getTimezoneName());

        // Get comment file
        $spaceFileCollection = $comment->getSpaceFileCollection();
        $attachedFiles = [];
        foreach ($spaceFileCollection as $file) {
            /** @var \grn\space\common\data\bean\SpaceFile $file */
            $attachedFiles[$file->getId()]
                = SpaceFileUtility::getSpaceFileLinkView($file);
        }

        $creator_id = false;
        if ($this->getUserInfo($comment->getCreatorId())) {
            $creator_id = $comment->getCreatorId();
        }
        require_once("grn/controller.csp");
        $commentInfo = [
            'id'            => $commentId,
            'comment_no'    => $comment->getCommentNo(),
            'space_id'      => $spaceId,
            'thread_id'     => $threadId,
            'data'          => $comment->getContent(),
            'attach_files'  => $attachedFiles,
            'parent_id'     => $comment->getParentCommentId(),
            'parent_no'     => $comment->getParentCommentNo(),
            'unread'        => ($comment->isUnread() ? true : false),
            'ctime'         => $comment->getCreateDisplayDatetime(),
            'creator'       => $comment->getCreatorDisplayName(),
            'creator_type'  => $this->getUserType($comment->getCreator()),
            'creator_id'    => $creator_id,
            'creator_url'   => \GRN_ControllerUtil::getUserProfileURL($comment->getCreatorId()),
            'deletable'     => ($comment->getCreatorId() == $loginId ? true
                : false),
            'is_rich_text'  => ($comment->isRichText() ? true : false),
            'is_todo_cmnt'  => $is_todo_cmnt,
            'todo_id'       => $todoId,
            'todo_title'    => $todoTitle,
            'todo_deadline' => $todoDeadline,
            'is_reply_all'  => $this->isReplyAll(),
        ];

        $mention = $comment->getMention();
        $mention_count = $mention->count();
        if ($mention_count > 0) {
            $offset_member
                = MobileGenericScreenBase::DEFAULT_OFFSET_DISPLAY_MEMBER;
            $max_member
                = MobileGenericScreenBase::MAX_NUM_DISPLAY_MEMBER;
            $mention_list
                = MentionController::createMemberListsForView([$mention],
                $offset_member, $max_member);
            $commentInfo['mention'] = $mention_list[0] ?? [];
            $commentInfo['mention_count'] = $mention_count;
        }

        require_once('grn/smarty.csp');
        $t = new \GRN_Smarty();
        $t->assign('comment', $commentInfo);

        // for favour
        $favour_service = new FavourService();
        $is_favour_active = $favour_service->isFavourAppActive();
        if ($is_favour_active) {
            require_once('space/GrnSpaceApplication.csp');
            if ($is_todo_cmnt) {
                $params = [
                    self::ARG_SPACE_ID  => $spaceId,
                    self::ARG_THREAD_ID => $threadId,
                    self::ARG_TODO_ID   => $comment->getParentApplicationId()
                ];
                $favour_info
                    = $favour_service->constructFavourInfo(\GrnSpaceApplication::GRN_SPACE_MODULE_ID,
                    \GrnSpaceApplication::FAVOUR_TODO_COMMENT,
                    $commentId,
                    $loginId,
                    $params,
                    \GrnSpaceApplication::GRN_TODO_SUB_MODULE_ID);
            } else {
                $params = [
                    self::ARG_SPACE_ID  => $spaceId,
                    self::ARG_THREAD_ID => $threadId
                ];
                $favour_info
                    = $favour_service->constructFavourInfo(\GrnSpaceApplication::GRN_SPACE_MODULE_ID,
                    \GrnSpaceApplication::FAVOUR_DISCUSSION_COMMENT,
                    $commentId,
                    $loginId,
                    $params,
                    \GrnSpaceApplication::GRN_DISCUSSION_SUB_MODULE_ID);
            }
            $t->assign('favour_info', $favour_info);
        }
        $t->assign('is_favour_active', $is_favour_active);

        require_once('fw/plugin.csp');
        $mention_access_plugin_encoded = \CB_PluginLoader::encodeParam(
            [
                'name'   => 'space',
                'params' => [
                    'app_id'   => 'space',
                    'space_id' => $spaceId,
                    'target'   => [MemberLogic::TYPE_USER]
                ]
            ]);
        $t->assign('mention_access_plugin_encoded',
            $mention_access_plugin_encoded);

        //assign breadcrumb.
        $current_page = cb_msg('grn.mobile', 'comment_reply_title');
        $upper_page = cb_msg('grn.mobile', 'detail_title');
        $this->assignBreadcrumbCurrentPage($t, $current_page);
        $this->assignBreadcrumbUpperPage($t, $upper_page,
            self::URL_DISCUSSION_DETAIL, $params = [
                self::ARG_SPACE_ID  => $spaceId,
                self::ARG_THREAD_ID => $threadId
            ]);

        //generate upload ticket
        include('grn/_upload_prepend.csp');

        return $t->fetch('space/mobile/application/discussion/comment_detail.tpl');
    }

    /**
     * @return string
     */
    public function getTitle()
    {
        return grn_get_page_display_name('space/comment_detail');
    }

    /**
     * @return bool
     */
    public function isReplyAll(): bool
    {
        return $this->_isReplyAll;
    }

    /**
     * @param bool $is_reply_all
     */
    protected function setIsReplyAll(bool $is_reply_all = false)
    {
        $this->_isReplyAll = $is_reply_all;
    }
}
