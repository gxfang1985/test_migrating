<?php

namespace grn\space\screen\mobile\application\discussion;

use grn\space\common\exception\GrnInvalidPermissionException;
use grn\space\common\data\bean\Authority;
use grn\space\common\data\bean\Comment;
use grn\space\common\exception\ErrorCode;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\service\TodoService;
use grn\space\service\DiscussionService;
use grn\space\screen\mobile\MobileGenericScreenBase;
use grn\space\service\SpaceService;

/**
 * Class DiscussionCommentDelete
 */
class DiscussionCommentDelete extends MobileGenericScreenBase
{
    /**
     * @return string
     */
    public function fetch()
    {
        $input = $this->getInput();
        $parameter = [
            self::ARG_SPACE_ID,
            self::ARG_THREAD_ID,
            self::ARG_COMMENT_ID
        ];
        $this->checkArgFromInput($parameter, $input);
        $spaceId = $this->getSpaceId();
        $discussionId = $this->getThreadId();
        $commentId = $this->getCommentId();
        $loginId = $this->getLoginUserId();
        $comment = $this->getDiscussionComment($spaceId, $discussionId,
            $commentId, $loginId, true);

        require_once('grn/smarty.csp');
        $t = new \GRN_Smarty();

        $this->assignBreadcrumbUpperPage($t,
            cb_msg('grn.mobile', 'detail_title'),
            self::URL_DISCUSSION_DETAIL,
            [
                self::ARG_SPACE_ID  => $spaceId,
                self::ARG_THREAD_ID => $discussionId
            ]);
        $this->assignBreadcrumbCurrentPage($t,
            cb_msg('grn.mobile', 'comment_delete'));

        $t->assign('space_id', $spaceId);
        $t->assign('discussion_id', $discussionId);
        $t->assign('comment_id', $commentId);

        return $t->fetch('space/mobile/application/discussion/comment_delete.tpl');
    }

    /**
     * @param $input
     *
     * @throws GrnDataNotFoundException
     * @throws GrnInvalidPermissionException
     * @throws \grn\space\common\exception\GrnInvalidArgumentException
     */
    public function post($input)
    {
        $this->setInput($input);
        $parameter = [
            self::ARG_SPACE_ID,
            self::ARG_THREAD_ID,
            self::ARG_COMMENT_ID
        ];
        $this->checkArgFromInput($parameter, $input);
        $loginId = $this->getLoginUserId();
        $spaceId = $this->getSpaceId();
        $discussionId = $this->getThreadId();
        $cmtId = $this->getCommentId();

        $space_service = SpaceService::getInstance();

        try {
            require_once("fw/i18n.csp");
            $i18n = \CB_I18N::getInstance();
            $language_code = $i18n->getCurrentLanguage();
            $space = $space_service->getSpace($spaceId, $loginId,
                $language_code);
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_INVALID_SPACE_ID);
            throw $e;
        }

        $comment = $this->getDiscussionComment($spaceId, $discussionId, $cmtId,
            $loginId, true);

        $commentType = $comment->getParentApplicationType();
        $discussionService = DiscussionService::getInstance();
        if ($commentType == Comment::PARENT_APPLICATION_TYPE_THREAD) {
            $isAuthority
                = $discussionService->hasThreadCommentAccessControl(Authority::AUTHORITY_CODE_WRITE,
                $spaceId, $discussionId, $cmtId, $loginId);
            if ($isAuthority) {
                try {
                    $discussionService->deleteThreadComment($cmtId,
                        $discussionId, $this->makeLoginUserSpaceMember());
                } catch (GrnDataNotFoundException $e) {
                    $e->setErrorCode(ErrorCode::GRN_THREAD_INVALID_COMMENT_ID);
                    throw $e;
                }
            } else {
                throw new GrnInvalidPermissionException(ErrorCode::GRN_THREAD_NO_DELETE_COMMENT_PERMISSION);
            }
        } elseif ($commentType == Comment::PARENT_APPLICATION_TYPE_TODO) {
            $todoService = TodoService::getInstance();
            $todoId = $comment->getParentApplicationId();
            $isAuthority
                = $todoService->hasTodoCommentAccessControl(Authority::AUTHORITY_CODE_WRITE,
                $spaceId, $discussionId, $todoId, $cmtId, $loginId);
            if ($isAuthority) {
                try {
                    $todoService->deleteTodoComment($cmtId, $todoId,
                        $this->makeLoginUserSpaceMember());
                } catch (GrnDataNotFoundException $e) {
                    $e->setErrorCode(ErrorCode::GRN_TODO_INVALID_COMMENT_ID);
                    throw $e;
                }
            } else {
                throw new GrnInvalidPermissionException(ErrorCode::GRN_TODO_NO_DELETE_COMMENT_PERMISSION);
            }
        }
    }
}
