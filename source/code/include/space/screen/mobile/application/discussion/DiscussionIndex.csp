<?php

namespace grn\space\screen\mobile\application\discussion;

use grn\space\service\SpaceService;
use grn\space\screen\mobile\MobileGenericScreenBase;
use grn\space\common\data\bean\Authority;
use grn\space\common\data\bean\Application;
use grn\space\common\exception\GrnInvalidArgumentException;
use grn\space\common\exception\GrnInvalidPermissionException;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\common\exception\GrnArgumentOutOfRangeException;
use grn\space\common\exception\GrnRequiredDataIsNotException;
use grn\space\common\exception\ErrorCode;
use grn\space\common\utility\IconUtility;
use grn\space\common\utility\ValidateUtility;
use grn\space\service\DiscussionService;
use grn\space\data\condition\ThreadSearchCondition;

use grn\space\data\collection\FolderCollection;
use grn\space\data\condition\FolderSearchCondition;
use grn\space\logic\FolderLogic;

/**
 * Class DiscussionIndex
 */
class DiscussionIndex extends MobileGenericScreenBase
{
    private $_is_from_ajax;
    private $_can_write_to_space;
    private $_root_category;

    /**
     * @param $input
     *
     * @throws GrnDataNotFoundException
     * @throws GrnArgumentOutOfRangeException
     * @throws GrnInvalidArgumentException
     */
    public function __construct($input)
    {
        parent::__construct($input);

        $parameter = [self::ARG_SPACE_ID];
        $this->checkArgFromInput($parameter, $input);
        $this->verifySpaceIsNotExpired();

        $spaceId = $this->getSpaceId();
        $loginId = $this->getLoginUserId();
        $currentLanguage = $this->getLanguageCode();
        $discussionService = DiscussionService::getInstance();
        try {
            //Get discussion's root category of the space specified with space Id.
            $this->_root_category
                = $discussionService->getApplicationRootCategory($spaceId,
                Application::APPLICATION_CODE_DISCUSSION, $currentLanguage);

            //Check whether target user has the authority to modify the space.If he/she has, then he/she can create a new thread into the space's discussion.
            $this->_can_write_to_space
                = $discussionService->hasThreadCategoryAccessControl(Authority::AUTHORITY_CODE_WRITE,
                $spaceId, $this->_root_category->getId(), $loginId);
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_INVALID_SPACE_ID);
            throw $e;
        } catch (GrnArgumentOutOfRangeException $e) {
            throw $e;
        } catch (GrnInvalidArgumentException $e) {
            throw $e;
        }

        $this->setMobileOperateMenu([
            [
                'page'   => 'space/mobile/member_list',
                'name'   => cb_msg('grn.space.mobile', 'member'),
                'params' => [
                    self::ARG_SPACE_ID => $spaceId,
                    self::ARG_FROM     => self::FROM_DISCUSSION_INDEX
                ]
            ]
        ]);
        if ($this->_can_write_to_space) {
            $this->setMobileFooterBar([
                'add' => [
                    'page'   => 'space/mobile/application/discussion/add',
                    'params' => [self::ARG_SPACE_ID => $spaceId]
                ]
            ]);

        } else {
            $this->setMobileFooterBar();
        }
    }

    /**
     * Return raw HTML which will be used without being escaped.
     *
     * @return mixed|string|void
     * @throws GrnDataNotFoundException
     * @throws GrnInvalidArgumentException
     * @throws GrnInvalidPermissionException
     * @throws GrnRequiredDataIsNotException
     */
    public function fetch()
    {
        $input = $this->getInput();

        require_once('grn/smarty.csp');
        $t = new \GRN_Smarty();

        $spaceId = $this->getSpaceId();
        $loginId = $this->getLoginUserId();

        $limit = self::MORE_VIEW_COUNT;

        $offset = $this->getArrayValue(self::ARG_NAVI_TAG, $input);
        if ( ! ValidateUtility::isNumber($offset,
            ValidateUtility::DISABLE_EMPTY,
            ValidateUtility::EXCEPTION_NOT_THROW)
        ) {
            $offset = 0;
        }

        $discussionService = DiscussionService::getInstance();
        try {
            //Check whether target user has the authority to access the space.
            if ( ! $discussionService->hasThreadCategoryAccessControl(Authority::AUTHORITY_CODE_READ_DETAIL,
                $spaceId, $this->_root_category->getId(), $loginId)
            ) {
                throw new GrnInvalidPermissionException(ErrorCode::GRN_NO_READ_PERMISSION);
            }
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_INVALID_SPACE_ID);
            throw $e;
        } catch (GrnInvalidArgumentException $e) {
            throw $e;
        }

        //GTM-2201
        $folderCondition = new FolderSearchCondition();
        $folderCondition->setSpaceId($spaceId);
        $spaceService = new SpaceService();
        $folderCollection
            = $spaceService->getFolderListByCondition($folderCondition);
        $hasFolderView = false;
        if (count($folderCollection) > 0) {
            $hasFolderView = true;
        }
        $t->assign('has_folder_view', $hasFolderView);

        $searchCondition = new ThreadSearchCondition();

        try {
            //Get collection of the threads in the scace's discussion, according to space Id.
            $searchCondition->setSearchCategoryId($this->_root_category->getId());
            $searchCondition->setSearchScopeType(ThreadSearchCondition::SEARCH_SCOPE_CATEGORY_TARGET_ONLY);
            $searchCondition->setOrderSortArray([
                ThreadSearchCondition::SORT_COMPONENT_MODIFY_TIME_DESC,
                ThreadSearchCondition::SORT_TITLE_ASC,
            ]);

            //GTM-2201
            if ( ! $hasFolderView) {
                $searchCondition->setLimit($limit + $offset);
            }

            $threadCollection
                = $discussionService->searchThreadBySearchConditionWithAccessControl(Authority::AUTHORITY_CODE_READ_DETAIL,
                $searchCondition, $loginId);
        } catch (GrnRequiredDataIsNotException $e) {
            throw $e;
        } catch (GrnInvalidArgumentException $e) {
            throw $e;
        }

        //GTM-2201
        $threadCollectionForView = [];
        if ($hasFolderView) {
            $session
                = $this->getSession(self::MOBILE_FOLDER_EXPANDED_SESSION_KEY);
            $expandedFolderList = $session->get(self::FOLDER_ID_LIST_EXPANDED);
            if ( ! isset($expandedFolderList)) {
                $expandedFolderList = [];
            }

            $threadCollectionForView = $this->_createThreadCollectionForView(
                $threadCollection, $folderCollection, $expandedFolderList
            );

            $uncategorizedThreadCollectionForView
                = $this->_createUncategorizedThreadCollectionForView($threadCollection);

            // get new offset for view more list
            $this->setNewOffset($offset, $limit,
                count($uncategorizedThreadCollectionForView));

            if ($this->_is_from_ajax) {
                $uncategorizedThreadCollectionForView
                    = array_splice($uncategorizedThreadCollectionForView, 0,
                    $limit + $offset);
            } else {
                $uncategorizedThreadCollectionForView
                    = array_slice($uncategorizedThreadCollectionForView, 0,
                    $limit);
            }

            $t->assign('thread_collection_for_view', $threadCollectionForView);
            $t->assign('discussions', $uncategorizedThreadCollectionForView);
        } else {
            $discussions = [];
            foreach ($threadCollection as $thread) {
                /** @var \grn\space\data\bean\Thread $thread */
                $bodyIsNewest = false;
                if ($thread->isUnreadUnder()) {
                    if ($thread->isUnread()) {
                        if ($thread->getComponentModifyDatetime()
                            == $thread->getModifyDatetime()
                        ) {
                            $bodyIsNewest = true;
                        }
                    }
                }
                $discussions[$thread->getId()] = [
                    'id'           => $thread->getId(),
                    'title'        => $thread->getTitle(),
                    'unread'       => $thread->isUnreadUnder(),
                    'to_show_body' => $bodyIsNewest
                ];
            }

            $t->assign('discussions', $discussions);

            // get new offset for view more list
            $this->setNewOffset($offset, $limit,
                $threadCollection->getCountNoLimit());
        }

        $t->assign('space_id', $spaceId);
        $t->assign('isSpaceMember', $this->_can_write_to_space);

        //assign breadcrumb.
        try {
            $spaceService = SpaceService::getInstance();
            $space = $spaceService->getSpace($spaceId, $loginId,
                $this->getLanguageCode());
            IconUtility::constructionSpaceIconPath($space);
            $space_name = $space->getSpaceName();
            $space_icon = $space->getDisplayIconPath();
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_INVALID_SPACE_ID);
            throw $e;
        }
        $upper_page = grn_get_page_display_name('space/index');
        $this->assignBreadcrumbCurrentPage($t, $space_name, $space_icon);
        if (array_key_exists('nid', $input)
            || array_key_exists('nhid', $input)
        ) {
            $this->assignBreadcrumbUpperPage($t, '', '', [], true);
        } else {
            $this->assignBreadcrumbUpperPage($t, $upper_page,
                self::URL_MY_SPACE_LIST);
        }

        if ($this->_is_from_ajax) {
            return $t->fetch("space/mobile/application/discussion/discussion_list.tpl");
        } else {
            $t->assign('offset', $this->getNewOffset());
            $t->assign('more_view_args', [self::ARG_SPACE_ID => $spaceId]);
            $t->assign('space', $space);

            return $t->fetch("space/mobile/application/discussion/index.tpl");
        }
    }

    /**
     * @return bool
     */
    public function getIsFromAjax()
    {
        return $this->_is_from_ajax;
    }

    /**
     * @param $is_from_ajax
     */
    public function setIsFromAjax($is_from_ajax)
    {
        $this->_is_from_ajax = $is_from_ajax;
    }

    /**
     * @return string
     */
    public function getTitle()
    {
        return grn_get_page_display_name('space/discussion/discussion_list');
    }

    /**
     * @param $threadCollection
     * @param $folderCollection
     * @param $expandedFolderList
     *
     * @return array
     */
    private function _createThreadCollectionForView(
        $threadCollection,
        $folderCollection,
        $expandedFolderList
    ) {
        $threadCollectionForView = [];
        foreach ($folderCollection as $folder) {
            /** @var \grn\space\data\bean\Folder $folder */
            $folderId = $folder->getId();
            $threadCollectionForView[$folderId] = [];
            $threadCollectionForView[$folderId]["id"] = $folderId;
            $threadCollectionForView[$folderId]["name"]
                = $folder->getFolderName();

            $threadCollectionForView[$folderId]["threads"] = [];
            foreach ($threadCollection as $thread) {
                /** @var \grn\space\data\bean\Thread $thread */
                if ($thread->getFolderId() == $folderId) {
                    $bodyIsNewest = false;
                    if ($thread->isUnreadUnder()) {
                        if ($thread->isUnread()) {
                            if ($thread->getComponentModifyDatetime()
                                == $thread->getModifyDatetime()
                            ) {
                                $bodyIsNewest = true;
                            }
                        }
                    }

                    $threadCollectionForView[$folderId]["threads"][$thread->getId()]
                        = [
                        "id"           => $thread->getId(),
                        "title"        => $thread->getTitle(),
                        "unread"       => $thread->isUnreadUnder(),
                        "to_show_body" => $bodyIsNewest
                    ];
                }
            }

            $threadCollectionForView[$folderId]["unread"] = false;
            foreach ($threadCollectionForView[$folderId]["threads"] as $thread) {
                if ($thread["unread"]) {
                    $threadCollectionForView[$folderId]["unread"] = true;
                    break;
                }
            }

            if (array_key_exists($folderId, $expandedFolderList)) {
                $threadCollectionForView[$folderId]["expanded"] = true;
            }
        }

        return $threadCollectionForView;
    }

    /**
     * @param $threadCollection
     *
     * @return array
     */
    private function _createUncategorizedThreadCollectionForView(
        $threadCollection
    ) {
        $uncategorizedThreadCollectionForView = [];
        foreach ($threadCollection as $thread) {
            /** @var \grn\space\data\bean\Thread $thread */
            if (SpaceService::UNCATEGORIED == $thread->getFolderId()) {
                $bodyIsNewest = false;
                if ($thread->isUnreadUnder()) {
                    if ($thread->isUnread()) {
                        if ($thread->getComponentModifyDatetime()
                            == $thread->getModifyDatetime()
                        ) {
                            $bodyIsNewest = true;
                        }
                    }
                }

                $uncategorizedThreadCollectionForView[$thread->getId()] = [
                    "id"           => $thread->getId(),
                    "title"        => $thread->getTitle(),
                    "unread"       => $thread->isUnreadUnder(),
                    "to_show_body" => $bodyIsNewest
                ];
            }
        }

        return $uncategorizedThreadCollectionForView;
    }
}
