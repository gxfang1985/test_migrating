<?php

namespace grn\space\screen\mobile;

use grn\space\common\exception\GrnRequiredDataIsNotException;
use grn\space\data\condition\SpaceUserSearchCondition;
use grn\space\common\utility\ValidateUtility;
use grn\space\common\exception\ErrorCode;
use grn\space\common\exception\GrnInvalidPermissionException;
use grn\space\common\data\bean\Authority;
use grn\space\service\SpaceService;
use grn\space\utility\MobileDisplayUserListSpace;

/**
 * Class SpaceMemberList
 */
class SpaceMemberList extends MobileGenericScreenBase
{
    private $_is_from_ajax;

    /**
     * SpaceMemberList constructor.
     *
     * @param $input
     */
    public function __construct($input)
    {
        parent::__construct($input);

        global $G_state_set;
        if ( ! $G_state_set->get('is_cybozu_browser')) {
            $this->setMobileFooterBar();
        }
    }

    /**
     * @return mixed|string
     * @throws GrnInvalidPermissionException
     * @throws GrnRequiredDataIsNotException
     * @throws \grn\space\common\exception\GrnInvalidArgumentException
     */
    public function fetch()
    {
        $input = $this->getInput();
        $limit = self::MORE_VIEW_COUNT;
        $loginId = $this->getLoginUserId();
        $this->checkArgFromInput([self::ARG_SPACE_ID], $input);
        $this->verifySpaceIsNotExpired();
        $spaceId = $this->getSpaceId();
        $spaceService = SpaceService::getInstance();
        $readAuth
            = $spaceService->hasSpaceAccessControl(Authority::AUTHORITY_CODE_READ_SUMMARY,
            $spaceId, $loginId);
        if ( ! $readAuth) {
            throw new GrnInvalidPermissionException(ErrorCode::GRN_NO_READ_PERMISSION);
        }
        $offset = $this->getArrayValue(self::ARG_NAVI_TAG, $input);
        if ( ! ValidateUtility::isNumber($offset,
            ValidateUtility::DISABLE_EMPTY,
            ValidateUtility::EXCEPTION_NOT_THROW)
        ) {
            $offset = 0;
        }
        $searchCondition = new SpaceUserSearchCondition();
        $searchCondition->setSearchSpaceId($spaceId);
        $searchCondition->setOrderSortArray([SpaceUserSearchCondition::SORT_DISPLAY_ORDER_ASC]);
        $searchCondition->setLimit($limit + $offset);
        try {
            $spaceUserCollection
                = $spaceService->searchSpaceUserBySearchCondition($searchCondition,
                $loginId);
        } catch (GrnRequiredDataIsNotException $e) {
            $e->setErrorCode(ErrorCode::GRN_INVALID_SPACE_ID);
            throw $e;
        }

        $this->setNewOffset($offset, $limit,
            $spaceUserCollection->getCountNolimit());

        $displayInfo
            = MobileDisplayUserListSpace::constructUserListForSpace($spaceUserCollection);
        require_once('grn/smarty.csp');
        $t = new \GRN_Smarty();
        $t->assign('count', $spaceUserCollection->getCountNolimit());
        $t->assign('this_getSpaceUserCollection', $spaceUserCollection);
        $t->assign(MobileDisplayUserListSpace::USER_INFO_LIST, $displayInfo);
        $this->setReferer($t);

        if ($this->_is_from_ajax) {
            return $t->fetch('grn/mobile_member_list.tpl');
        } else {
            global $G_state_set;
            if ( ! $G_state_set->get('is_cybozu_browser')) {
                $this->checkArgFromInput([self::ARG_FROM], $input);
                $upper_page_url = null;
                $upper_page_params = null;
                switch ($this->getFrom()) {
                    case self::FROM_DISCUSSION_INDEX:
                        $upper_page_name = cb_msg('grn.space.discussion',
                            'index');
                        $upper_page_url
                            = 'space/mobile/application/discussion/index';
                        $upper_page_params = ['spid' => $this->getSpaceId()];
                        break;
                    case self::FROM_DISCUSSION_DETAIL:
                        $upper_page_name = cb_msg('grn.space.discussion',
                            'index');
                        $upper_page_url
                            = 'space/mobile/application/discussion/detail';
                        $this->checkArgFromInput([self::ARG_THREAD_ID], $input);
                        $upper_page_params = [
                            'spid' => $this->getSpaceId(),
                            'tid'  => $this->getThreadId()
                        ];
                        break;
                    case self::FROM_TODO_DETAIL:
                        $upper_page_name = cb_msg('grn.space.todo', 'index');
                        $upper_page_url
                            = 'space/mobile/application/todo/detail';
                        $this->checkArgFromInput([self::ARG_TODO_ID], $input);
                        $upper_page_params = [
                            'spid' => $this->getSpaceId(),
                            'tdid' => $this->getTodoId()
                        ];
                        break;
                    case self::FROM_TODO_INDEX:
                        $upper_page_name = cb_msg('grn.space.todo', 'index');
                        $upper_page_url
                            = 'space/mobile/application/todo/index';
                        $upper_page_params = ['spid' => $this->getSpaceId()];
                        break;
                    default:
                        $upper_page_name = cb_msg('grn.space.discussion',
                            'index');
                        $upper_page_url
                            = 'space/mobile/application/discussion/index';
                        $upper_page_params = ['spid' => $this->getSpaceId()];
                        break;
                }
                $this->assignBreadcrumbCurrentPage($t,
                    cb_msg('grn.space.mobile', 'member'));
                $this->assignBreadcrumbUpperPage($t, $upper_page_name,
                    $upper_page_url, $upper_page_params);
            }

            $t->assign('offset', $this->getNewOffset());
            $t->assign('more_view_args', [self::ARG_SPACE_ID => $spaceId]);

            return $t->fetch('space/mobile/space_member_index.tpl');
        }
    }

    /**
     * @param bool $is_from_ajax
     */
    public function setIsFromAjax($is_from_ajax)
    {
        $this->_is_from_ajax = $is_from_ajax;
    }

    /**
     * @return bool
     */
    public function getIsFromAjax()
    {
        return $this->_is_from_ajax;
    }

    /**
     * @return string
     */
    public function getTitle()
    {
        return grn_get_page_display_name('space/member_view');
    }

    /**
     * @param \GRN_Smarty $t
     */
    private function setReferer(&$t)
    {
        $member_referer_key = parent::createUniquRefererKey();

        $params = [
            self::ARG_SPACE_ID  => $this->getSpaceId(),
            self::ARG_THREAD_ID => $this->getThreadId(),
            self::ARG_FROM      => $this->getFrom()
        ];

        $member_referer = [];
        $member_referer["page_name"] = cb_msg('grn.space.mobile', 'member');
        $member_referer["page_path"] = "space/mobile/member_list";
        $member_referer["page_params"] = $params;
        $member_referer['app_id'] = "space";
        $member_referer["access_plugin"] = [
            "name"         => "common",
            "params"       => ["app_id" => "space"],
            "session_name" => cb_get_pagename()
        ];

        require_once('fw/session_manager.csp');
        $session_manager = \CB_SessionManager::getInstance();
        $session
            = $session_manager->getSession("mobile.member_referer");

        $session->set($member_referer_key, $member_referer);
        $t->assign('member_referer_key', $member_referer_key);
    }
}
