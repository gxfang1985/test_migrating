<?php

namespace grn\space\screen\mobile;

use grn\space\common\data\bean\SpaceMember;
use grn\space\screen\GenericScreenBase;
use grn\space\service\SpaceService;
use grn\space\service\DiscussionService;
use grn\space\service\TodoService;
use grn\space\common\data\bean\Authority;
use grn\space\common\data\bean\Application;
use grn\space\common\exception\GrnInvalidPermissionException;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\common\exception\ErrorCode;

require_once('space/GrnSpaceApplication.csp');

/**
 * Class MobileGenericScreenBase
 */
class MobileGenericScreenBase extends GenericScreenBase
{
    const URL_DISCUSSION_DETAIL = "space/mobile/application/discussion/detail";
    const URL_TODO_DETAIL = "space/mobile/application/todo/detail";
    const URL_DISCUSSION_LIST = "space/mobile/application/discussion/index";
    const URL_TODO_LIST = "space/mobile/application/todo/index";
    const URL_MY_SPACE_LIST = "space/mobile/index";
    const UN_CATEGORY = '';

    /**
     * MobileGenericScreenBase constructor.
     *
     * @param $input
     */
    public function __construct($input)
    {
        parent::__construct($input);

        $this->initMobileView();
        $this->setMobileApplicationId(\GrnSpaceApplication::GRN_SPACE_APPLICATION_ID);
    }

    /**
     * @return mixed
     */
    public function getTitle()
    {
        return null;
    }

    /**
     * Get array for space user id.
     *
     * @param  string $spaceId
     *
     * @return array         spaceUserIds
     * @throws GrnDataNotFoundException
     * @throws GrnInvalidPermissionException
     */
    protected function getSpaceUserIds($spaceId)
    {
        try {
            //check authority
            $spaceService = SpaceService::getInstance();
            if ( ! $spaceService->hasSpaceAccessControl(Authority::AUTHORITY_CODE_READ_DETAIL,
                $spaceId, $this->getLoginUserId())
            ) {
                throw new GrnInvalidPermissionException(ErrorCode::GRN_INVALID_SPACE_ID);
            } else {
                $spaceUserCollection
                    = $spaceService->getSpaceUserCollectionOfUserOnly($spaceId,
                    $this->getLoginUserId());
                $spaceUserIds = [];
                foreach ($spaceUserCollection as $spaceUser) {
                    /** @var \grn\space\data\bean\SpaceUser $spaceUser */
                    $spaceUserIds[] = $spaceUser->getMemberID();
                }

                return $spaceUserIds;
            }
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_INVALID_SPACE_ID);
            throw $e;
        }
    }

    /**
     * Get thread by todo id.
     *
     * @param  string $spaceId
     * @param  string $todoId
     *
     * @return \grn\space\data\bean\Thread
     * @throws GrnDataNotFoundException
     * @throws GrnInvalidPermissionException
     * @throws \grn\space\common\exception\GrnArgumentOutOfRangeException
     */
    protected function getThreadByTodoId($spaceId, $todoId)
    {
        try {
            //check authority
            $discussionService = DiscussionService::getInstance();
            $rootThreadCategoryObj
                = $discussionService->getApplicationRootCategory($spaceId,
                Application::APPLICATION_CODE_DISCUSSION,
                $this->getLanguageCode());

            if ($discussionService->hasThreadCategoryAccessControl(Authority::AUTHORITY_CODE_READ_DETAIL,
                $spaceId, $rootThreadCategoryObj->getId(),
                $this->getLoginUserId())
            ) {
                return $discussionService->getThreadByTodoId($todoId,
                    $this->getLoginUserId());

            } else {
                throw new GrnInvalidPermissionException(ErrorCode::GRN_THREAD_NO_ACCESS_PERMISSION);
            }
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_INVALID_TODO_ID);
            throw $e;
        }
    }

    /**
     * Get discussion & todo comment by comment id.
     *
     * @param  string  $spaceId
     * @param  string  $threadId
     * @param  string  $commentId
     * @param  string  $loginId
     * @param  boolean $deleteAction
     *
     * @return \grn\space\common\data\bean\Comment|null        $comment
     * @throws GrnDataNotFoundException
     * @throws GrnInvalidPermissionException
     */
    protected function getDiscussionComment(
        $spaceId,
        $threadId,
        $commentId,
        $loginId,
        $deleteAction = false
    ) {
        $discussionService = DiscussionService::getInstance();

        try {
            $discussionService->getThread($threadId, $loginId);
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_INVALID_THREAD_ID);
            throw $e;
        }

        $comment = null;
        try {
            $comment = $discussionService->getComment($commentId, $loginId);
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_THREAD_INVALID_COMMENT_ID);
            throw $e;
        }

        $isAuthority
            = $discussionService->hasThreadCommentAccessControl(Authority::AUTHORITY_CODE_READ_DETAIL,
            $spaceId, $threadId, $commentId, $loginId);

        if ($isAuthority) {
            return $comment;
        } else {
            if ($deleteAction) {
                throw new GrnInvalidPermissionException(ErrorCode::GRN_THREAD_NO_DELETE_COMMENT_PERMISSION);
            } else {
                throw new GrnInvalidPermissionException(ErrorCode::GRN_THREAD_NO_ACCESS_PERMISSION);
            }
        }

    }

    /**
     * Get todo comment by comment id.
     *
     * @param  string  $spaceId
     * @param  string  $todoId
     * @param  string  $commentId
     * @param  string  $loginId
     * @param  boolean $deleteAction
     *
     * @return \grn\space\common\data\bean\Comment|null    $comment
     * @throws GrnDataNotFoundException
     * @throws GrnInvalidPermissionException
     */
    protected function getTodoComment(
        $spaceId,
        $todoId,
        $commentId,
        $loginId,
        $deleteAction = false
    ) {
        $todoService = TodoService::getInstance();
        try {
            $threadObj = $this->getThreadByTodoId($spaceId, $todoId);
            $this->setThreadId($threadObj->getId());
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_INVALID_TODO_ID);
            throw $e;
        }

        $comment = null;
        try {
            $comment = $todoService->getComment($commentId, $loginId);
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_TODO_INVALID_COMMENT_ID);
            throw $e;
        }

        $isAuthority
            = $todoService->hasTodoCommentAccessControl(Authority::AUTHORITY_CODE_READ_DETAIL,
            $spaceId, $this->getThreadId(), $todoId, $commentId, $loginId);
        if ($isAuthority) {
            return $comment;
        } else {
            if ($deleteAction) {
                throw new GrnInvalidPermissionException(ErrorCode::GRN_TODO_NO_DELETE_COMMENT_PERMISSION);
            } else {
                throw new GrnInvalidPermissionException(ErrorCode::GRN_TODO_NO_ACCESS_PERMISSION);
            }
        }

    }

    /**
     * @param SpaceMember $user
     *
     * @return string
     */
    protected function getUserType(SpaceMember $user)
    {
        if ($user->isInvalidUser()) {
            return 'invalid_user';
        } elseif ($user->isNotUsingApp()) {
            return 'invalidApp_user';
        } elseif ($user->getMemberID() == $this->getLoginUserId()) {
            return 'login_user';
        } else {
            return 'unlogin_user';
        }
    }

    /**
     * @param $input
     */
    static public function redirectMobilePage($input)
    {
        if (array_key_exists(self::ARG_THREAD_ID, $input)) {
            cb_redirect(self::URL_DISCUSSION_DETAIL, $input);
        } elseif (array_key_exists(self::ARG_TODO_ID, $input)) {
            cb_redirect(self::URL_TODO_DETAIL, $input);
        } elseif (array_key_exists(self::ARG_SPACE_ID, $input)) {
            cb_redirect(self::URL_DISCUSSION_LIST, $input);
        } else {
            cb_redirect(self::URL_MY_SPACE_LIST);
        }
    }

    /**
     * @return string
     */
    protected function createUniquRefererKey()
    {
        return md5(uniqid(rand(), true));
    }
}
