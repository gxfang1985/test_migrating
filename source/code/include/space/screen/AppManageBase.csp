<?php

namespace grn\space\screen;

use grn\space\common\utility\IconUtility;

use grn\space\common\exception\GrnKintoneException;

use grn\space\common\exception\GrnInvalidArgumentException;
use grn\space\common\exception\GrnInvalidPermissionException;
use grn\space\common\exception\ErrorCode;
use grn\space\service\SpaceService;
use grn\space\service\KintoneService;

/**
 * Class AppManageBase
 *
 */
abstract class AppManageBase extends GenericScreenBase
{
    const ARG_SPACE_ID = "spid";

    private $space;

    /**
     * @param $input
     *
     * @throws GrnInvalidArgumentException
     * @throws GrnInvalidPermissionException
     * @throws GrnKintoneException
     */
    public function __construct($input)
    {
        parent::__construct($input);

        $spaceID = $this->getArrayValue(self::ARG_SPACE_ID, $this->getInput());
        $loginID = $this->getLoginUserId();

        if ( ! $spaceID) {
            throw new GrnInvalidArgumentException(ErrorCode::GRN_SPACE_ID_IS_NOT_FOUND);
        }

        $spaceService = SpaceService::getInstance();
        if ( ! $spaceService->isSpaceMember($loginID, $spaceID, $loginID)) {
            throw new GrnInvalidPermissionException(ErrorCode::GRN_NO_WRITE_PERMISSION);
        }

        require_once('kintone/Logic.csp');
        \GRN_Kintone_Logic::checkRedirect('space/index');

        $kintoneService = KintoneService::getInstance();
        if ( ! $kintoneService->isAvailable()) {
            throw new GrnKintoneException(ErrorCode::GRN_DISABLE_KINTONE_RELATION);
        }

        $space = $spaceService->getSpace($spaceID, $loginID,
            $this->getLanguageCode());
        IconUtility::constructionSpaceIconPath($space);
        $this->setSpace($space);

        $this->verifySpaceIsNotExpired();
    }

    /**
     * @param $space
     */
    protected function setSpace($space)
    {
        $this->space = $space;
    }

    /**
     * @return mixed
     */
    protected function getSpace()
    {
        return $this->space;
    }

    /**
     * @return array
     */
    public function getSitePosition()
    {
        $space = $this->getSpace();

        $sitePosition
            = $this->createCategorySitePosition($space->getCategoryId());
        $sitePosition[] = [
            "name"     => $space->getSpaceName(),
            "page"     => "space/top",
            "spid"     => $space->getId(),
            "icon"     => [
                "image"  => $space->getDisplayIconPath(),
                "direct" => true,
                "class"  => "breadcrumb-icon",
            ],
            "isHidden" => ! $space->isPublic(),
        ];
        $sitePosition[] = [
            "name" => grn_get_page_display_name('space/appmanage_view'),
            "page" => "space/appmanage_view",
            "spid" => $space->getId(),
        ];

        return $sitePosition;
    }

    /**
     * @return string
     */
    public function getTitle()
    {
        return grn_get_page_display_name(cb_get_pagename());
    }
}
