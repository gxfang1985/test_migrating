<?php

namespace grn\space\screen;

use grn\space\service\DiscussionService;
use grn\space\common\data\bean\Authority;
use grn\space\common\exception\GrnInvalidArgumentException;
use grn\space\common\exception\GrnInvalidPermissionException;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\common\exception\GrnRequiredDataIsNotException;
use grn\space\common\exception\ErrorCode;
use grn\space\common\utility\SpaceFileUtility;
use grn\space\common\data\bean\SpaceFile;

/**
 * Class FileModify
 *
 */
class FileModify extends GenericScreenBase
{
    /**
     * Application Type
     *
     * @var $appType
     */
    private $appType;

    /**
     * Application Id
     *
     * @var $appId
     */
    private $appId;

    /**
     * File Info
     *
     * @var $fileInfo
     */
    private $fileInfo;

    /**
     * File Version
     *
     * @var $fileVersion
     */
    private $fileVersion;

    /**
     * @param $input
     *
     * @throws GrnDataNotFoundException
     * @throws GrnInvalidArgumentException
     * @throws \Exception
     */
    public function __construct($input)
    {
        parent::__construct($input);

        $checkArr = [
            self::ARG_SPACE_ID,
            self::ARG_FILE_ID,
            self::ARG_THREAD_ID,
            self::ARG_FROM
        ];

        $this->checkArgFromInput($checkArr, $input);

        $this->appType = SpaceFile::PARENT_APPLICATION_TYPE_THREAD;

        try {
            //Get File
            $fileObj = $this->getSpaceFile($this->getSpaceId(),
                $this->getThreadId(), $this->getFileId(),
                $this->getLoginUserId(), Authority::AUTHORITY_CODE_WRITE);
            $this->fileInfo = SpaceFileUtility::getSpaceFileView($fileObj);
            $this->fileVersion
                = SpaceFileUtility::getFileMaxVersionMenu($fileObj);
            $this->appType = $fileObj->getParentApplicationType();
            $this->appId = $fileObj->getParentApplicationId($fileObj);
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_INVALID_FILE_ID);
            throw $e;
        }
    }

    /**
     *
     * Return raw HTML which will be used without being escaped.
     *
     * @return string
     */
    public function fetch()
    {
        $input = $this->getInput();

        require_once("grn/smarty.csp");
        $t = new \GRN_Smarty();

        $t->assign('page_title', $this->getTitle());
        $t->assign('space_id', $this->getSpaceId());
        $t->assign('thread_id', $this->getThreadId());
        $t->assign('file_id', $this->getFileId());
        $t->assign('appType', $this->appType);
        $t->assign('version', $this->fileVersion);
        $t->assign('from', $this->getFrom());

        $t->assign('file', $this->fileInfo);

        return $t->fetch("space/file_modify.tpl");
    }

    /**
     *
     * Return a part of the site position of the page in Todo application.
     *
     * @return array
     */
    public function getSitePosition()
    {
        $input = $this->getInput();

        if ($this->appType == SpaceFile::PARENT_APPLICATION_TYPE_THREAD) {
            $sitePosition = [
                [
                    "page"     => "space/application/discussion/index",
                    "name"     => grn_get_page_display_name("space/discussion/index"),
                    "spid"     => $this->getSpaceId(),
                    "fragment" => "tid=" . $this->getThreadId(),
                ],
                [
                    "page" => "space/application/discussion/file_view",
                    "name" => grn_get_page_display_name("space/file/file_detail"),
                    "fid"  => $this->getFileId(),
                    "spid" => $this->getSpaceId(),
                    "tid"  => $this->getThreadId(),
                ]
            ];
        } else {
            $sitePosition = [
                [
                    "page" => "space/application/todo/index",
                    "name" => grn_get_page_display_name("space/todo/index"),
                    "spid" => $this->getSpaceId(),
                ],
                [
                    "page" => "space/application/todo/view",
                    "name" => grn_get_page_display_name("space/todo/todo_detail"),
                    "spid" => $this->getSpaceId(),
                    "tdid" => $this->appId,
                    "from" => $this->getFrom(),
                ],
                [
                    "page" => "space/application/todo/file_view",
                    "name" => grn_get_page_display_name("space/file/file_detail"),
                    "fid"  => $this->getFileId(),
                    "spid" => $this->getSpaceId(),
                    "tid"  => $this->getThreadId(),
                    "from" => $this->getFrom(),
                ]
            ];
        }

        $sitePosition = array_merge($sitePosition, [
                [
                    "page" => "",
                    "name" => grn_get_page_display_name("space/file/file_modify"),
                ]
            ]
        );

        return $sitePosition;
    }

    /**
     *
     * Return the title of the page
     *
     * @return string
     */
    public function getTitle()
    {
        return grn_get_page_display_name("space/file/file_modify");
    }

    /**
     * Upload File Info
     *
     * @param $input
     *
     * @return int
     */
    public function post($input)
    {
        $discussionService = DiscussionService::getInstance();
        //update File Info
        $discussionService->modifySpaceFile(@$input['title'], @$input['memo'],
            @$input['version'], $this->getFileId());

        return $this->appType;
    }
}
