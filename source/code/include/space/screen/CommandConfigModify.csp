<?php

namespace grn\space\screen;

use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\service\SpaceService;
use grn\space\common\exception\ErrorCode;

/**
 * Class CommandConfigModify
 *
 */
class CommandConfigModify extends SpaceBase
{
    /**
     * @param $input
     *
     * @return \grn\space\data\bean\Space
     * @throws GrnDataNotFoundException
     * @throws \Exception
     * @throws \grn\space\common\exception\GrnInvalidArgumentException
     */
    public function post($input)
    {
        $input = $this->getInput();
        $this->checkArgFromInput([
            self::ARG_SPACE_ID,
            self::ARG_SPACE_CATEGORY_ID,
            self::ARG_SPACE_EXPIRATION_DATE
        ],
            $input);
        $this->setSpaceLocalCollectionFromInput($input);
        $this->setIconIdFromInput($input);
        $this->setIsPublicFromInput($input);
        $this->setSpaceUserCollectionFromInput($input);
        $this->setSpaceOperatorCollectionFromInput($input);
        $this->setCommonNameFromInput($input);
        $this->setAllowJoinLeave($input);
        $this->setIsUnlimitedExpirationDate($input);
        if ( ! $this->isUnlimitedExpirationDate()) {
            $this->setExpirationDateTimestamp($input);
        }

        //@todo
        // Check whether the login user has right to create a new Space in this category.

        $spaceService = SpaceService::getInstance();

        try {
            //Check access rights.
            if ( ! $this->isSpaceAdminOrOperator($spaceService,
                $this->getSpaceId(), $this->getLoginUserId())
            ) {
                throw new GrnDataNotFoundException(ErrorCode::GRN_INVALID_SPACE_ID);
            }

            // Get the specified Space 
            $space = $spaceService->getSpace($this->getSpaceId(),
                $this->getLoginUserId(), $this->getLanguageCode());

            // Change Space with post data
            $space->setSpaceName($this->getCommonName());
            $space->setBuiltinIconId($this->getIconId());
            $space->setPublic($this->isPublic());
            $space->setModifier($this->makeLoginUserSpaceMember());
            $space->setModifyTimestamp(time());
            $space->setCategoryId($this->getSpaceCategoryId());
            $space->setAllowJoinLeave($this->isAllowJoinLeave());
            $space->setIsUnlimitedExpirationDate($this->isUnlimitedExpirationDate());

            if ( ! $space->getIsUnlimitedExpirationDate()) {
                $space->setExpirationDateTimestamp($this->getExpirationDateTimestamp());
                $space->setIsExpirationDateSpecifiedTime($this->getExpirationDateSpecifiedTime());
            }

            // Change Space
            return $spaceService->modifySpace($space,
                $this->getSpaceLocalCollection(),
                $this->getSpaceUserCollectionFromInput(),
                $this->getSpaceOperatorCollectionFromInput(),
                $this->getLoginUserId(), $this->getLanguageCode());

        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_INVALID_SPACE_ID);
            throw $e;
        }

    }
}
