<?php

namespace grn\space\screen;

use grn\space\common\exception\GrnInvalidArgumentException;
use grn\space\common\data\bean\Authority;
use grn\space\common\logic\SpaceMemberLogic;
use grn\space\common\utility\SpaceDatetimeUtility;
use grn\space\data\collection\SpaceCollection;
use grn\space\common\data\bean\Category;
use grn\space\common\exception\ErrorCode;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\common\utility\ValidateUtility;
use grn\space\common\utility\IconUtility;
use grn\space\data\bean\Space;
use grn\space\data\collection\SpaceUserCollection;
use grn\space\service\SpaceService;

/**
 * Class ConfigView
 *
 */
class ConfigView extends SpaceBase
{
    public function __construct($input)
    {
        parent::__construct($input);

        $this->setRequireSpaceIsNotExpired(false);
    }

    /**
     * Category which the Space belongs to
     *
     * @var Category
     */
    private $category;

    /**
     * True when the login user has operation privilege to this space.
     *
     * @var boolean
     */
    private $isOperationPrivilege;

    /**
     * (non-PHPdoc)
     * @see grn\space\screen.GenericScreenBase::fetch()
     */
    public function fetch()
    {
        require_once("grn/smarty.csp");
        $smarty = new \GRN_Smarty();

        try {
            $spaceService = SpaceService::getInstance();

            //アクセス権チェック
            $space = $this->getSpace();
            if ( ! $spaceService->hasSpaceAccessControl(Authority::AUTHORITY_CODE_READ_DETAIL,
                $this->getSpace()->getId(), $this->getLoginUserId())
            ) {
                throw new GrnDataNotFoundException(ErrorCode::GRN_INVALID_SPACE_ID);
            }

            $this->setOpeartionPrivilege(
                $this->isSpaceAdminOrOperator($spaceService,
                    $this->getSpace()->getId(), $this->getLoginUserId())
            );

            $spaceService->addInspectionUserInfo(
                $this->getSpace(),
                $this->getLoginUserId(),
                $this->isSystemUseEnglish(),
                $this->isEnglishDisplayAfterName(),
                $this->isOrganizationDisplayAfterName(),
                $this->getLanguageCode());
            SpaceDatetimeUtility::constructDisplayDatetimeOfInspection(
                $this->getSpace(),
                $this->getDatetimeFormat(),
                SpaceDatetimeUtility::DISPLAY_TYPE_LONGDATE_AND_TIME,
                $this->getLanguageCode(),
                $this->getTimezoneName());

            $spaceUserCollection
                = $spaceService->getSpaceUserCollection($this->getSpace()
                                                             ->getId(),
                $this->getLoginUserId());
            $spaceService->addUserInfo(
                $spaceUserCollection,
                $this->getLoginUserId(),
                $this->isSystemUseEnglish(),
                $this->isEnglishDisplayAfterName(),
                $this->isOrganizationDisplayAfterName(),
                $this->getLanguageCode());
            $this->setSpaceUserCollection($spaceUserCollection);
            $spaceOperatorCollection
                = $spaceService->getSpaceUserCollectionAccordingToAuthorityCode($spaceUserCollection,
                Authority::AUTHORITY_CODE_OPERATION_PRIVILEGE,
                $this->getSpace()->getId());
            $this->setSpaceOperatorCollection($spaceOperatorCollection);

            $category = $spaceService->getSpaceCategory($this->getSpace()
                                                             ->getCategoryId(),
                $this->getLoginUserId(), $this->getLanguageCode());
            $this->setCategory($category);

            $smarty->assign("this", $this);
            $smarty->assign("this_getSpace", $this->getSpace());
            $smarty->assign("this_getCategory", $this->getCategory());
            $smarty->assign("maxNumMember", self::MAX_NUM_DISPLAY_MEMBER);

            $canReuse = $this->checkSpaceReuseAuth($spaceService,
                $this->getSpace());
            $smarty->assign("canReuse", $canReuse);

            $smarty->assign("count_space_members", $this->countSpaceMembers());
            $smarty->assign("count_space_admins", $this->countSpaceAdmins());

            return $smarty->fetch("space/config_view.tpl");
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_INVALID_SPACE_ID);
            throw $e;
        }
    }

    /**
     * (non-PHPdoc)
     * @see grn\space\screen.GenericScreenBase::getTitle()
     */
    public function getTitle()
    {
        return grn_get_page_display_name("space/config_view");
    }

    /**
     * (non-PHPdoc)
     * @see grn\space\screen.GenericScreenBase::getSitePosition()
     */
    public function getSitePosition()
    {
        if ($this->getSpace()->isExpired()) {
            $sitePosition = [
                [
                    "name"            => cb_msg('grn.space',
                        'expired_space_site_position'),
                    "page"            => self::URL_INDEX,
                    "expiration_type" => 0
                ]
            ];
        } else {
            $sitePosition = $this->createCategorySitePosition($this->getSpace()
                                                                   ->getCategoryId());
            $sitePosition[] = [
                "name"     => $this->getSpace()->getSpaceName(),
                "page"     => "space/top",
                "spid"     => $this->getSpace()->getId(),
                "icon"     => [
                    "image"  => $this->getSpace()->getDisplayIconPath(),
                    "direct" => true,
                    "class"  => "breadcrumb-icon",
                ],
                "isHidden" => ! $this->getSpace()->isPublic(),
            ];
        }
        $sitePosition[] = [
            "name" => grn_get_page_display_name(self::URL_CONFIG_VIEW),
        ];

        return $sitePosition;
    }

    /**
     * @param $input
     *
     * @throws GrnDataNotFoundException
     * @throws GrnInvalidArgumentException
     * @throws \Exception
     */
    protected function setInput($input)
    {
        parent::setInput($input);
        $this->checkArgFromInput([self::ARG_SPACE_ID], $input);

        //Set up Space because it is used in $this->getSitePosition which is called before $this->fetch is called.
        $spaceService = SpaceService::getInstance();
        try {
            $space = $spaceService->getSpace($this->getSpaceId(),
                $this->getLoginUserId(), $this->getLanguageCode());
            $spaceCollection = new SpaceCollection();
            $spaceCollection->appendBean($space);
            $spaceService->addFileUsage($spaceCollection);
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_INVALID_SPACE_ID);
            throw $e;
        }
        global $G_config_common;
        IconUtility::constructionSpaceIconPath($space,
            $G_config_common->get('Global', 'app_path'));
        $this->setSpace($space);
    }

    /**
     * Set up spaceId property with $G_INPUT
     *
     * @param array $input
     *
     * @throws GrnInvalidArgumentException
     */
    private function setSpaceIdFromInput(array $input)
    {
        if (ValidateUtility::isNumber(@$input[self::ARG_SPACE_ID],
            ValidateUtility::DISABLE_EMPTY,
            ValidateUtility::EXCEPTION_NOT_THROW)
        ) {
            $this->spaceId = $input[self::ARG_SPACE_ID];

            return;
        }
        throw new GrnInvalidArgumentException(ErrorCode::GRN_SPACE_ID_IS_NOT_FOUND);
    }

    /**
     * @param Category $category
     */
    private function setCategory(Category $category)
    {
        $this->category = $category;
    }

    /**
     *
     * @return Category
     */
    public function getCategory()
    {
        return $this->category;
    }

    /**
     * @return int
     */
    public function getFileUsageMB()
    {
        return intval($this->getSpace()->getFileUsage() / 1024 / 1024);
    }

    /**
     * @param $operationPrivilege
     */
    private function setOpeartionPrivilege($operationPrivilege)
    {
        $this->isOperationPrivilege = $operationPrivilege;
    }

    /**
     * @return bool
     */
    public function isOperationPrivilege()
    {
        return $this->isOperationPrivilege;
    }

    /**
     * @return int
     */
    public function countSpaceMembers()
    {
        return count($this->getSpaceUserCollection()->getUserIds());
    }

    /**
     * @return int
     */
    public function countSpaceAdmins()
    {
        return count($this->getSpaceOperatorCollection()->getUserIds());
    }
}
