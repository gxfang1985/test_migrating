<?php

namespace grn\space\screen;

use grn\space\utility\SpaceUtility;

use grn\space\common\data\bean\Authority;
use grn\space\common\data\bean\DatetimeFormat;
use grn\space\common\data\condition\CategorySearchCondition;
use grn\space\common\utility\ValidateUtility;
use grn\space\common\utility\SpaceDatetimeUtility;
use grn\space\common\utility\IconUtility;
use grn\space\common\utility\CategoryUtility;
use grn\space\data\condition\SpaceSearchCondition;
use grn\space\data\collection\SpaceCollection;
use grn\space\service\SpaceService;
use grn\space\data\CategoryTreeSession;

/**
 * Class NewSpaceList
 *
 */
class NewSpaceList extends GenericScreenBase
{
    const URL_ROOT = "space/root";
    const URL_NEW_LIST = "space/new_list";
    const URL_UPDATED_LIST = "space/updated_list";

    const PATH_TEMPLATE_FILE = "space/new_space_list.tpl";

    const ARG_OFFSET = "sp";

    const SESSION_KEY = "grn.space.category_tree";

    /**
     * Datetime information to display
     */
    const DATE_COLUMN_CREATE_TIMESTMAP = "0";
    const DATE_COLUMN_COMPONENT_MODIFY_TIMESTAMP = "1";

    private $dateColumn;

    private $sitePosition;
    private $title;
    private $offset;
    private $spaceCollection;
    private $spaceOrder;

    /**
     * @return mixed|string|void
     */
    public function fetch()
    {
        $input = $this->getInput();
        $this->setOffsetFromInput($input);

        require_once("grn/smarty.csp");
        $smarty = new \GRN_Smarty();

        $spaceService = SpaceService::getInstance();

        $spaceSearchCondition = new SpaceSearchCondition();
        $spaceSearchCondition->setOrderSortArray([$this->getSpaceOrder()]);
        $spaceSearchCondition->setOffset($this->getOffset());
        $spaceSearchCondition->setLimit($this->getUserConfig()->getListMax()
                                        + 1);
        $spaceSearchCondition->setLanguageCode($this->getLanguageCode());
        $spaceSearchCondition->setCalcFoundRows(false);
        $spaceSearchCondition->setSearchSpaceExpirationDate(SpaceSearchCondition::SEARCH_SPACE_NOT_EXPIRED);

        $spaceCollection
            = $spaceService->searchSpaceBySearchConditionWithAccessControl(
            Authority::AUTHORITY_CODE_READ_SUMMARY,
            $spaceSearchCondition, $this->getLoginUserId(),
            SpaceService::CATEGORY_NAME_IS_NECESSARY
        );
        $isExistsNextPage = ($spaceCollection->count() > $this->getUserConfig()
                                                              ->getListMax());
        if ($isExistsNextPage) {
            $spaceCollection->remove($this->getUserConfig()->getListMax());
        }


        SpaceDatetimeUtility::constructionComponentInspectionDisplayDatetime(
            $spaceCollection, $this->getDatetimeFormat(),
            SpaceDatetimeUtility::DISPLAY_TYPE_DYNAMIC_IS_NOW_TIME,
            $this->getLanguageCode(), $this->getTimezoneName()
        );

        IconUtility::constructionSpaceCollectionIconPath($spaceCollection);

        SpaceUtility::truncateSpaceUsingUserConfig($spaceCollection,
            $this->getLoginUser());

        $this->setSpaceCollection($spaceCollection);

        // Make page navi
        $controllerUtil = new \GRN_ControllerUtil();
        $offset = $this->getOffset();
        $limit = $this->getUserConfig()->getListMax();
        $pageNavi = $controllerUtil->makeSimpleNaviInformation($offset,
            $limit, $spaceCollection->count(), $isExistsNextPage);
        $smarty->assign("navi", $pageNavi);

        // Make tree info
        $spaceRootCategory
            = $spaceService->getSpaceRootCategory($this->getLoginUserId(),
            $this->getLanguageCode());

        $categorySearchCondition = new CategorySearchCondition();
        $categorySearchCondition->setSearchCategoryId($spaceRootCategory->getId());
        $categorySearchCondition->setSearchScopeType(CategorySearchCondition::SEARCH_SCOPE_CATEGORY_DESCENDANT);
        $categorySearchCondition->setOrderSortArray([CategorySearchCondition::SORT_DISPLAY_ORDER_ASC]);
        $categoryCollection
            = $spaceService->searchSpaceCategoryBySearchCondition(
            $categorySearchCondition, $this->getLoginUserId(),
            $this->getLanguageCode()
        );

        // clear the tree data stored in session.
        $categoryTreeSession = $this->loadCategoryTreeSession();
        $this->clearCategoryTreeSession($categoryTreeSession);

        // create new tree data.
        $categoryTreeSession = new CategoryTreeSession();
        $categoryTreeSession->update($categoryCollection, null);
        $this->saveCategoryTreeSession($categoryTreeSession);
        $treeJson
            = CategoryUtility::buildJsonCategoryTreeInfo($categoryCollection,
            $categoryTreeSession);
        $smarty->assign("category_tree",
            $this->getCategoryTreeArray($treeJson));

        $smarty->assign("this", $this);

        return $smarty->fetch(self::PATH_TEMPLATE_FILE);
    }

    /**
     * Get Offset
     *
     * @return string
     */
    private function getOffset()
    {
        return $this->offset;
    }

    /**
     * Set Offset by $G_INPUT
     *
     * @param array
     */
    private function setOffsetFromInput($input)
    {
        if (ValidateUtility::isNumber(
            $this->getArrayValue(self::ARG_OFFSET, $input),
            ValidateUtility::DISABLE_EMPTY,
            ValidateUtility::EXCEPTION_NOT_THROW)
        ) {
            $this->offset = (int)$input[self::ARG_OFFSET];
        } else {
            $this->offset = 0;
        }
    }

    /**
     * @return mixed
     */
    public function getSitePosition()
    {
        return $this->sitePosition;
    }

    /**
     * @param array $sitePosition
     */
    public function setSitePosition(array $sitePosition)
    {
        $this->sitePosition = $sitePosition;
    }

    /**
     * @return mixed
     */
    public function getTitle()
    {
        return $this->title;
    }

    /**
     * @param $title
     */
    public function setTitle($title)
    {
        $this->title = $title;
    }

    /**
     * Get Space list as an array
     *
     * @return array<Space>
     */
    public function getSpaceListArray()
    {
        $result = [];
        $spaceCollection = $this->getSpaceCollection();

        for ($i = 0; $i < $spaceCollection->count(); $i++) {
            $result[] = $spaceCollection->getBean($i);
        }

        return $result;
    }

    /**
     *
     * @return SpaceCollection
     */
    private function getSpaceCollection()
    {
        return $this->spaceCollection;
    }

    /**
     * Set my Space collection
     *
     * @param SpaceCollection $spaceCollection
     */
    private function setSpaceCollection(SpaceCollection $spaceCollection)
    {
        $this->spaceCollection = $spaceCollection;
    }

    /**
     * Make an array for tree view.
     *
     * This array is used with page/master/grn/org_tree_26.tpl
     *
     * @param string $treeJson the result of CategoryUtility::buildJsonCategoryTreeInfo
     *
     * @return array
     */
    public function getCategoryTreeArray($treeJson)
    {
        return [
            "tree_name"        => "category_tree",
            "async_url"        => "space/command_category_tree",
            "link_url"         => "space/list",
            "link_url_params"  => [],
            "page_name"        => self::SESSION_KEY,
            "selected_oid"     => null,
            "oid_key"          => "cid",
            "json_template"    => "space/encoded_json.tpl",
            "root_caption"     => null,
            "root_subscribed"  => false,
            "no_root"          => false,
            "on_select"        => null,
            "tree_view_ele_id" => "tree-view",
            "view_part_ele_id" => "view_part",
            "set_tree_height"  => true,
            "root"             => $treeJson
        ];
    }

    /**
     * Load CategoryTreeSession from the session.
     *
     * @return CategoryTreeSession
     */
    private function loadCategoryTreeSession()
    {
        require_once('fw/session_manager.csp');
        $sm = \CB_SessionManager::getInstance();
        $session = $sm->getSession(self::SESSION_KEY);

        return CategoryTreeSession::loadFromSession($session);
    }

    /**
     * Save CategoryTreeSession into the session.
     *
     * @param CategoryTreeSession $categoryTreeSession
     */
    private function saveCategoryTreeSession(
        CategoryTreeSession $categoryTreeSession
    ) {
        require_once('fw/session_manager.csp');
        $sm = \CB_SessionManager::getInstance();
        $session = $sm->getSession(self::SESSION_KEY);
        $categoryTreeSession->saveToSession($session);
    }

    /**
     * Clear the tree data stored in the session.
     *
     * @param CategoryTreeSession $categoryTreeSession
     */
    private function clearCategoryTreeSession(
        CategoryTreeSession $categoryTreeSession
    ) {
        require_once('fw/session_manager.csp');
        $sm = \CB_SessionManager::getInstance();
        $session = $sm->getSession(self::SESSION_KEY);
        $categoryTreeSession->clearSession($session);
    }

    /**
     * @return mixed
     */
    public function getSpaceOrder()
    {
        return $this->spaceOrder;
    }

    /**
     * @param $spaceOrder
     */
    public function setSpaceOrder($spaceOrder)
    {
        $this->spaceOrder = $spaceOrder;
    }

    /**
     * @param $dateColumn
     *
     * @throws \grn\space\common\exception\GrnArgumentOutOfRangeException
     */
    public function setDateColumn($dateColumn)
    {
        ValidateUtility::isInTheRange($dateColumn,
            self::DATE_COLUMN_CREATE_TIMESTMAP,
            self::DATE_COLUMN_COMPONENT_MODIFY_TIMESTAMP);
        $this->dateColumn = $dateColumn;
    }

    /**
     * @return mixed
     */
    public function getDateColumn()
    {
        return $this->dateColumn;
    }

    /**
     *
     * @return string
     */
    public function getSearchRange()
    {
        return parent::SEARCH_ALL;
    }
}
