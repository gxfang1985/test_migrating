<?php

namespace grn\space\screen;

use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\common\utility\IconUtility;
use grn\space\common\exception\ErrorCode;
use grn\space\common\exception\GrnInvalidArgumentException;
use grn\space\logic\SpaceLogic;
use grn\space\service\SpaceService;

class ConfigExpirationDate extends SpaceBase
{
    const URL_CONFIG_EXPIRATION_DATE = "space/config_expiration_date";
    const URL_CONFIG_LIST = "space/list";
    CONST MINUTE_INTERVAL = 5;

    public function __construct($input)
    {
        parent::__construct($input);

        $this->setRequireSpaceIsNotExpired(false);
    }

    /**
     * @return mixed|string|void
     * @throws GrnDataNotFoundException
     */
    public function fetch()
    {
        require_once("grn/smarty.csp");
        $smarty = new \GRN_Smarty();

        $space_service = SpaceService::getInstance();
        if ( ! $this->isSpaceAdminOrOperator($space_service,
            $this->getSpace()->getId(), $this->getLoginUserId())
        ) {
            throw new GrnDataNotFoundException(ErrorCode::GRN_INVALID_SPACE_ID);
        }

        $smarty->assign("this", $this);
        $smarty->assign("form_name", cb_get_pagename());

        $space_logic = new SpaceLogic();

        $is_allowed_unlimited
            = $space_logic->isAllowedToUseUnlimitedExpirationDate();
        $is_used_unlimited = $this->getSpace()
                                  ->getIsUnlimitedExpirationDate();
        $expiration_date_time = null;

        if ( ! $is_used_unlimited) {
            $expiration_time_stamp = new \CB_TimeStamp();
            $expiration_time_stamp->unix_ts = $this->getSpace()
                                                   ->getExpirationDateTimestamp();
            $time_stamp_ex
                = new \CB_TimeStampEx($expiration_time_stamp);
            $expiration_date_date = $time_stamp_ex->getDate();
            if ($this->getSpace()->getIsExpirationDateSpecifiedTime()) {
                $expiration_date_time = $time_stamp_ex->getTime();
            }
        } else {
            $expiration_date_date = $space_logic->getDefaultDateExpirationDate()
                                                ->getDate();
        }

        $smarty->assign("is_allowed_unlimited", $is_allowed_unlimited);
        $smarty->assign("is_used_unlimited", $is_used_unlimited);
        $smarty->assign("is_used_limited", ! $is_used_unlimited);
        $smarty->assign("default_date_expiration", $expiration_date_date);
        $smarty->assign("default_time_expiration", $expiration_date_time);
        $smarty->assign("minute_interval", self::MINUTE_INTERVAL);
        $smarty->assign("page_title",
            grn_get_page_display_name(self::URL_CONFIG_EXPIRATION_DATE));

        return $smarty->fetch("space/config_expiration_date.tpl");
    }


    /**
     * @return array
     */
    public function getSitePosition()
    {
        if ($this->getSpace()->isExpired()) {
            $site_position = [
                [
                    "name"            => cb_msg('grn.space',
                        'expired_space_site_position'),
                    "page"            => self::URL_INDEX,
                    "expiration_type" => 0
                ]
            ];
        } else {
            $site_position = $this->createCategorySitePosition($this->getSpace()
                                                                    ->getCategoryId());
            $site_position[] = [
                "name"     => $this->getSpace()->getSpaceName(),
                "page"     => self::URL_TOP,
                "spid"     => $this->getSpace()->getId(),
                "icon"     => [
                    "image"  => $this->getSpace()->getDisplayIconPath(),
                    "direct" => true,
                    "class"  => "breadcrumb-icon",
                ],
                "isHidden" => ! $this->getSpace()->isPublic(),
            ];
        }
        $site_position[] = [
            "name" => grn_get_page_display_name(self::URL_CONFIG_VIEW),
            "page" => self::URL_CONFIG_VIEW,
            "spid" => $this->getSpace()->getId(),
        ];
        $site_position[] = [
            "name" => grn_get_page_display_name(self::URL_CONFIG_EXPIRATION_DATE),
        ];

        return $site_position;
    }

    /**
     * @return string
     */
    public function getTitle()
    {
        return grn_get_page_display_name(self::URL_CONFIG_EXPIRATION_DATE);
    }

    /**
     * @param $input
     *
     * @throws GrnDataNotFoundException
     * @throws GrnInvalidArgumentException
     * @throws \Exception
     */
    protected function setInput($input)
    {
        parent::setInput($input);
        $this->checkArgFromInput([
            self::ARG_SPACE_ID
        ], $input);


        //Set up Space because it is used in $this->getSitePosition which is called before $this->fetch is called.
        $space_service = SpaceService::getInstance();
        try {
            //Get Space with its standard name.
            $space = $space_service->getSpace($this->getSpaceId(),
                $this->getLoginUserId());
        } catch (GrnDataNotFoundException $e) {
            $e->setErrorCode(ErrorCode::GRN_INVALID_SPACE_ID);
            throw $e;
        }
        global $G_config_common;
        IconUtility::constructionSpaceIconPath($space,
            $G_config_common->get('Global', 'app_path'));
        $this->setSpace($space);
    }
}
