<?php

namespace grn\space\screen;

use grn\space\common\exception\ErrorCode;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\common\utility\IconUtility;
use grn\space\data\bean\Space;
use grn\space\service\SpaceService;

/**
 * Class DeleteSpace
 *
 */
class DeleteSpace extends GenericScreenBase
{
    const URL_DELETE = 'space/delete';

    const PATH_TEMPLATE_FILE = 'space/delete.tpl';

    /**
     * Space Object
     *
     * @var Space
     */
    private $space;

    /**
     * @return mixed|string|void
     * @throws GrnDataNotFoundException
     */
    public function fetch()
    {
        $spaceService = SpaceService::getInstance();

        //Check access rights.
        if ( ! $this->isSpaceAdminOrOperator($spaceService, $this->getSpaceId(),
            $this->getLoginUserId())
        ) {
            throw new GrnDataNotFoundException(ErrorCode::GRN_INVALID_SPACE_ID);
        }

        require_once('grn/smarty.csp');
        $smarty = new \GRN_Smarty();

        $smarty->assign('space_name', $this->getSpace()->getSpaceName());

        return $smarty->fetch(self::PATH_TEMPLATE_FILE);
    }

    /**
     * @return string
     */
    public function getTitle()
    {
        return grn_get_page_display_name(self::URL_DELETE);
    }

    /**
     * @param array $input
     *
     * @throws GrnDataNotFoundException
     */
    protected function setInput($input)
    {
        parent::setInput($input);
        $this->checkArgFromInput([self::ARG_SPACE_ID], $input);

        try {
            $spaceService = SpaceService::getInstance();
            $space = $spaceService->getSpace($this->getSpaceId(),
                $this->getLoginUserId(), $this->getLanguageCode());
            global $G_config_common;
            IconUtility::constructionSpaceIconPath($space,
                $G_config_common->get('Global', 'app_path'));
            $this->setSpace($space);
        } catch (GrnDataNotFoundException $exception) {
            $exception->setErrorCode(ErrorCode::GRN_INVALID_SPACE_ID);
            throw $exception;
        }
    }

    /**
     * Set Space
     *
     * @param  Space $space
     */
    private function setSpace(Space $space)
    {
        $this->space = $space;
    }

    /**
     * Get Space
     *
     * @return Space
     */
    public function getSpace()
    {
        return $this->space;
    }
}
