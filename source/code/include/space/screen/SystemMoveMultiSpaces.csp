<?php

namespace grn\space\screen;

use grn\space\common\data\bean\Authority;
use grn\space\common\data\condition\CategorySearchCondition;
use grn\space\common\exception\ErrorCode;
use grn\space\common\exception\GrnInvalidArgumentException;
use grn\space\common\utility\ValidateUtility;
use grn\space\service\SpaceService;

/**
 * Class SystemMoveMultiSpaces
 *
 */
class SystemMoveMultiSpaces extends GenericScreenBase
{
    const URL_SYSTEM_CATEGORY_LIST = "space/system/category_list";
    const SPACE_CATEGORY_PATH_DELIMITER = " > ";
    const ARG_SET_SPACE_CATEGORY_ID = "s_cid";
    const ARG_SEARCH = "search";
    const ARG_SEARCH_TEXT = "text";

    /**
     * Category ID of the Space
     *
     * @var string
     */
    private $_setCategoryId;

    /**
     * @return mixed|string|void
     * @throws GrnInvalidArgumentException
     */
    public function fetch()
    {
        $input = $this->getInput();
        $this->checkArgFromInput([self::ARG_SPACE_CATEGORY_ID], $input);
        $this->_setSetCategoryIdFromInput($input);

        $spaceService = SpaceService::getInstance();

        // 検索したとき
        $searchCategoryCollection = null;
        if (array_key_exists(self::ARG_SEARCH, $input)) {
            if (ValidateUtility::isNotNull($input[self::ARG_SEARCH_TEXT])) {
                //検索
                $searchTextArray
                    = cb_parse_search_text($input[self::ARG_SEARCH_TEXT]);
                $rootCategory
                    = $spaceService->getSpaceRootCategory($this->getLoginUserId(),
                    $this->getLanguageCode());

                $searchCondition = new CategorySearchCondition();
                $searchCondition->setSearchCategoryId($rootCategory->getId());
                $searchCondition->setSearchScopeType(CategorySearchCondition::SEARCH_SCOPE_CATEGORY_DESCENDANT);
                $searchCondition->setSearchStringArray($searchTextArray);
                $searchCondition->setSearchItemBit(CategorySearchCondition::SEARCH_ITEM_CATEGORY_NAME);
                $searchCondition->setOrderSortArray([CategorySearchCondition::SORT_DISPLAY_ORDER_ASC]);
                $searchCategoryCollection
                    = $spaceService->searchSpaceCategoryBySearchCondition($searchCondition,
                    $this->getLoginUserId(), $this->getLanguageCode());

                //検索結果のカテゴリ毎に、カテゴリ名をカテゴリパスに置換
                /** @var \grn\space\common\data\bean\Category $category */
                foreach ($searchCategoryCollection as $category) {
                    $categoryPath
                        = $this->_generateCategoryPathString($category->getId());
                    $category->setCategoryName($categoryPath);
                }
            }
        }

        // 移動前のカテゴリのパスを文字列展開
        $fromCategoryPath
            = $this->_generateCategoryPathString($this->getSpaceCategoryId());

        // 移動後のカテゴリを取得
        $toCategory
            = $spaceService->getSpaceCategory($this->_getSetCategoryId(),
            $this->getLoginUserId(), $this->getLanguageCode());

        // 移動後のカテゴリのルートカテゴリまでのコレクションを取得（自分も含まれる）
        $searchCondition = new CategorySearchCondition();
        $searchCondition->setSearchCategoryId($this->_getSetCategoryId());
        $searchCondition->setSearchScopeType(CategorySearchCondition::SEARCH_SCOPE_CATEGORY_ANCESTOR);
        $searchCondition->setOrderSortArray([CategorySearchCondition::SORT_HIERARCHY_LEVEL_ASC]);
        $toAncestorCategoryCollection
            = $spaceService->searchSpaceCategoryBySearchCondition($searchCondition,
            $this->getLoginUserId(), $this->getLanguageCode());

        // 移動後のカテゴリの子カテゴリを取得
        $toChildCategoryCollection
            = $spaceService->getChildCategoryList($this->_getSetCategoryId(),
            $this->getLanguageCode());

        $session = $this->getSession("space/system/category_list");
        $movingSpaceList = $session->get("spid");

        require_once("grn/smarty.csp");
        $smarty = new \GRN_Smarty();
        $smarty->assign(self::ARG_SPACE_CATEGORY_ID,
            $this->getSpaceCategoryId());
        $smarty->assign("filter_id", cb_at($input, "filter_id"));
        $smarty->assign("movingSpaceList", $movingSpaceList);
        $smarty->assign("fromCategoryPath", $fromCategoryPath);
        $smarty->assign("toCategory", $toCategory);
        $smarty->assign("toAncestorCategoryCollection",
            $toAncestorCategoryCollection);
        $smarty->assign("toChildCategoryCollection",
            $toChildCategoryCollection);
        $smarty->assign("page_title", $this->getTitle());
        $smarty->assign("site_position", $this->getSitePosition());
        if (ValidateUtility::isNotNull($searchCategoryCollection)) {
            $smarty->assign("searchCategoryCollection",
                $searchCategoryCollection);
        }

        return $smarty->fetch("space/system/move_multi.tpl");
    }

    /**
     * @param $notUsed
     *
     * @return array
     * @throws GrnInvalidArgumentException
     */
    public function post($notUsed)
    {
        $input = $this->getInput();
        $this->checkArgFromInput([self::ARG_SPACE_CATEGORY_ID], $input);
        $this->_setSetCategoryIdFromInput($input);

        $session = $this->getSession("space/system/category_list");
        $movingSpaceList = $session->get("spid");

        if (is_array($movingSpaceList)) {
            $spaceService = SpaceService::getInstance();

            foreach ($movingSpaceList as $spaceId) {
                if ($spaceService->hasSpaceAccessControl(Authority::AUTHORITY_CODE_SYSTEM_PRIVILEGE,
                    $spaceId, $this->getLoginUserId())
                ) {
                    $spaceService->moveSpace($spaceId,
                        $this->_getSetCategoryId(),
                        $this->makeLoginUserSpaceMember());
                }
            }
        }

        return [
            self::URL_SYSTEM_CATEGORY_LIST,
            [
                self::ARG_SPACE_CATEGORY_ID => $this->getSpaceCategoryId(),
            ],
        ];
    }

    /**
     * @return string
     */
    public function getTitle()
    {
        return grn_get_current_page_display_name();
    }

    /**
     * @return array
     */
    public function getSitePosition()
    {
        return [
            [
                "page"                      => self::URL_SYSTEM_CATEGORY_LIST,
                "name"                      => cb_msg('grn.space.system',
                    'category_list'),
                self::ARG_SPACE_CATEGORY_ID => $this->getSpaceCategoryId(),
                "filter_id"                 => cb_at($this->getInput(),
                    'filter_id'),
            ],
            [
                "name" => $this->getTitle()
            ]
        ];
    }

    /**
     * カテゴリパスを生成する
     *
     * @param   string $categoryId Category ID
     *
     * @return  string  ルートからのカテゴリパス
     */
    private function _generateCategoryPathString($categoryId)
    {
        //祖先を検索（自分も含まれる）
        $searchCondition = new CategorySearchCondition();
        $searchCondition->setSearchCategoryId($categoryId);
        $searchCondition->setSearchScopeType(CategorySearchCondition::SEARCH_SCOPE_CATEGORY_ANCESTOR);
        $searchCondition->setOrderSortArray([CategorySearchCondition::SORT_HIERARCHY_LEVEL_ASC]);
        $spaceService = SpaceService::getInstance();
        $categoryCollection
            = $spaceService->searchSpaceCategoryBySearchCondition($searchCondition,
            $this->getLoginUserId(), $this->getLanguageCode());

        $resultPathStr = "";
        /** @var \grn\space\common\data\bean\Category $category */
        foreach ($categoryCollection as $category) {
            if (ValidateUtility::isNotNull($resultPathStr)) {
                $resultPathStr .= self::SPACE_CATEGORY_PATH_DELIMITER;
            }

            $resultPathStr .= $category->getCategoryName();
        }

        return $resultPathStr;
    }

    /**
     * @return string
     */
    private function _getSetCategoryId()
    {
        return $this->_setCategoryId;
    }

    /**
     * Set up Category ID with $G_INPUT
     *
     * @param array $input
     *
     * @throws GrnInvalidArgumentException
     */
    private function _setSetCategoryIdFromInput($input)
    {
        if (array_key_exists(self::ARG_SET_SPACE_CATEGORY_ID, $input)) {
            if ( ! ValidateUtility::isNumber($input[self::ARG_SET_SPACE_CATEGORY_ID],
                ValidateUtility::DISABLE_EMPTY,
                ValidateUtility::EXCEPTION_NOT_THROW)
            ) {
                throw new GrnInvalidArgumentException(ErrorCode::GRN_INVALID_CATEGORY_ID);
            }

            $this->_setCategoryId = $input[self::ARG_SET_SPACE_CATEGORY_ID];
        } else {
            $this->_setCategoryId = $this->getSpaceCategoryId();
        }
    }
}
