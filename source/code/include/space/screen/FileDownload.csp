<?php

namespace grn\space\screen;

use grn\grn\ThumbnailUtil;
use grn\space\screen\GenericScreenBase;
use grn\space\service\TodoService;
use grn\space\service\DiscussionService;
use grn\space\common\utility\ValidateUtility;
use grn\space\common\data\bean\Authority;
use grn\space\common\data\bean\SpaceFile;
use grn\space\common\exception\ErrorCode;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\common\exception\GrnInvalidArgumentException;
use grn\space\common\exception\GrnInvalidPermissionException;

/**
 * Class FileDownload
 *
 */
class FileDownload extends GenericScreenBase
{
    /**
     * @param $input
     *
     * @throws GrnDataNotFoundException
     * @throws GrnInvalidArgumentException
     * @throws \Exception
     */
    public function post($input)
    {
        $this->setInput($input);
        $this->checkArgFromInput([
            self::ARG_SPACE_ID,
            self::ARG_THREAD_ID,
            self::ARG_FILE_ID
        ], $input);
        $this->verifySpaceIsNotExpired();
        $spaceId = $this->getSpaceId();
        $threadId = $this->getThreadId();
        $fileId = $this->getFileId();
        $fileVerId = @$input['ver'];
        $loginId = $this->getLoginUserId();
        if ($fileVerId) {
            if ( ! ValidateUtility::isNumber($fileVerId,
                ValidateUtility::DISABLE_EMPTY,
                ValidateUtility::EXCEPTION_NOT_THROW)
            ) {
                throw new GrnInvalidArgumentException(ErrorCode::GRN_INVALID_FILE_LOG_ID);
            }
        }

        $spaceFile = $this->getSpaceFile($spaceId, $threadId, $fileId, $loginId,
            Authority::AUTHORITY_CODE_READ_DETAIL);
        $fileObj = $spaceFile->getGrnSpaceFileObject();
        if ($fileVerId) {
            if ( ! $body = $fileObj->getBody($fileVerId)) {
                throw new GrnInvalidArgumentException(ErrorCode::GRN_INVALID_FILE_LOG_ID);
            }
        } else {
            if ( ! $body = $fileObj->getCurrentBody()) {
                throw new GrnDataNotFoundException(ErrorCode::GRN_INVALID_FILE_ID);
            }
        }

        $thumbnail = $this->getArrayValue('thumbnail', $input);
        $image_data = $body->getContents();
        $imageInfo = @getimagesizefromstring($image_data);
        if (is_array($imageInfo) && isset($imageInfo['mime'])) {
            cb_prepare_download($body->get('name'), $imageInfo['mime'], true,
                true);
        }
        if ($thumbnail == 1) {
            $util = new ThumbnailUtil();
            $util->setAspectRatio(ThumbnailUtil::ASPECT_RATIO_FIX);
            $result = $util->makeThumbnailByImageData($image_data, 450, 450);
            if ($result === false) {
                $body->download(true);
            }
        } else {
            $body->download(true);
        }

        cb_safe_exit();
    }
}
