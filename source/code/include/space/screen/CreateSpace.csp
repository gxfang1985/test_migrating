<?php

namespace grn\space\screen;

use grn\grn\MemberLogic;
use grn\space\common\exception\ErrorCode;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\common\utility\IconUtility;
use grn\space\common\data\bean\SpaceMember;
use grn\space\common\data\collection\SpaceMemberCollection;
use grn\space\common\utility\ValidateUtility;
use grn\space\common\data\condition\IconSearchCondition;
use grn\space\common\data\collection\IconCollection;
use grn\space\common\data\collection\CategoryCollection;
use grn\space\common\data\condition\CategorySearchCondition;
use grn\space\logic\SpaceLogic;
use grn\space\service\SpaceService;
use grn\space\data\CategoryTreeSession;
use grn\space\common\utility\CategoryUtility;
use grn\space\logic\SpaceSystemLogic;
use grn\space\common\utility\SpaceMemberUtility;

/**
 * Class CreateSpace
 *
 */
class CreateSpace extends GenericScreenBase
{
    const ARG_CATEGORY_ID = "cid";
    const ARG_MEMBER_ID = "sUID";

    const URL_LIST = "space/list";
    const URL_INDEX = "space/index";
    const URL_CREATE = "space/create";

    const SESSION_KEY = "grn.space.create.category_tree";

    const ROOT_CATEGORY_ID = 0;

    const PATH_TEMPLATE_FILE = "space/create_space.tpl";
    CONST MINUTE_INTERVAL = 5;

    private $categoryId;
    private $memberIdArray;
    private $iconCollection;

    /**
     * (non-PHPdoc)
     * @see grn\space\screen.GenericScreenBase::fetch()
     */
    public function fetch()
    {
        require_once("grn/smarty.csp");
        $smarty = new \GRN_Smarty();

        $spaceService = SpaceService::getInstance();

        if ( ! is_null($this->getCategoryId())) {
            try {
                $space = $spaceService->getSpaceCategory($this->getCategoryId(),
                    $this->getLoginUserId());
            } catch (GrnDataNotFoundException $e) {
                $e->setErrorCode(ErrorCode::GRN_INVALID_CATEGORY_ID);
                throw $e;
            }
        }

        //@todo confirm that the login user has right to access the selected Category.
        // When he doesn't, throw new GrnInvalidPermissionException(ErrorCode::GRN_INVALID_SPACE_ID); 

        // Make tree info
        $spaceRootCategory
            = $spaceService->getSpaceRootCategory($this->getLoginUserId(),
            $this->getLanguageCode());

        $categorySearchCondition = new CategorySearchCondition();
        $categorySearchCondition->setSearchCategoryId($spaceRootCategory->getId());
        $categorySearchCondition->setSearchScopeType(CategorySearchCondition::SEARCH_SCOPE_CATEGORY_DESCENDANT);
        $categorySearchCondition->setOrderSortArray([CategorySearchCondition::SORT_DISPLAY_ORDER_ASC]);
        $categoryCollection
            = $spaceService->searchSpaceCategoryBySearchCondition($categorySearchCondition,
            $this->getLoginUserId(), $this->getLanguageCode());

        $categoryTreeSession = $this->loadCategoryTreeSession();
        $categoryTreeSession->update($categoryCollection,
            $this->getCategoryId());

        $treeJson
            = CategoryUtility::buildJsonCategoryTreeInfo($categoryCollection,
            $categoryTreeSession);

        // Rewrite the category tree data stored in session.
        $this->saveCategoryTreeSession($categoryTreeSession);

        // Set IconCollection
        $iconSearchCondition = new IconSearchCondition();
        $iconCollection
            = $spaceService->searchIconBySearchCondition($iconSearchCondition,
            $this->getLoginUserId());
        IconUtility::constructIconCollectionIconPath($iconCollection);
        $this->setIconCollection($iconCollection);

        $tmpIconIndex = time() % $this->getIconCollection()->count();
        $selectedIconId = $this->getIconCollection()->getBean($tmpIconIndex)
                               ->getId();
        $smarty->assign("selectedIconNumber", $selectedIconId);

        // Make selected users list for useradd UI.
        // create SpaceMemberCollection with name
        $spaceMemberCollection = new SpaceMemberCollection();
        foreach ($this->getMemberIdArray() as $member_info) {
            $spaceMember = new SpaceMember();
            $spaceMember->setMemberID($member_info[MemberLogic::MEMBER_ID]);
            $spaceMember->setMemberType($member_info[MemberLogic::MEMBER_TYPE]);
            $spaceMemberCollection->appendBean($spaceMember);
        }

        $spaceService->addUserInfo(
            $spaceMemberCollection,
            $this->getLoginUserId(),
            $this->isSystemUseEnglish(),
            $this->isEnglishDisplayAfterName(),
            $this->isOrganizationDisplayAfterName(),
            $this->getLanguageCode()
        );

        // Convert $spaceMemberCollection to array and give it to smarty for user_add.tpl
        $selectedUsersArray = [];
        /** @var \grn\space\common\data\bean\SpaceMember $spaceMember */
        foreach ($spaceMemberCollection as $spaceMember) {
            if ($spaceMember->isDeleted()) {
                continue;
            }
            $selectedUserArray[$spaceMember->getMemberID()]
                = $spaceMember->getDisplayMemberArray();
        }
        $smarty->assign("selected_users", $selectedUserArray);
        $smarty->assign("form_name", cb_get_pagename());
        $smarty->assign("category_tree",
            $this->getCategoryTreeArray($treeJson));
        $smarty->assign("category_data_master",
            $this->getCategoryDataJson($categoryCollection));
        $smarty->assign("this", $this);
        $smarty->assign("this_getMultilingualSpaceNameArray",
            $this->getMultilingualSpaceNameArray());
        $smarty->assign("page_title",
            grn_get_page_display_name(self::URL_CREATE));
        $smarty->assign("backPageInfo", $this->getBackPageInfo());

        $smarty->assign('plugin', [
            'name'   => 'common',
            'params' => [
                'action'       => null,
                'session_name' => cb_get_pagename(),
                'app_id'       => 'space'
            ]
        ]);

        $spaceSystemLogic = new SpaceSystemLogic();
        $privacyDefault = $spaceSystemLogic->getDefaultPrivacy();
        $smarty->assign("privacy_default", $privacyDefault);

        $spaceLogic = new SpaceLogic();
        $is_unlimited = $spaceLogic->isDefaultUnlimitedExpirationDate();
        $smarty->assign("is_used_unlimited", $is_unlimited);
        $smarty->assign("is_used_limited", ! $is_unlimited);
        $smarty->assign("is_allowed_unlimited",
            $spaceLogic->isAllowedToUseUnlimitedExpirationDate());
        $smarty->assign("default_date_expiration",
            $spaceLogic->getDefaultDateExpirationDate()->getDate());
        $smarty->assign("minute_interval", self::MINUTE_INTERVAL);

        return $smarty->fetch(self::PATH_TEMPLATE_FILE);
    }

    /**
     * Get an array to show category tree.
     * This value is going to be given to grn/org_tree26.js
     *
     * @param $treeJson
     *
     * @return array
     */
    private function getCategoryTreeArray($treeJson)
    {
        return [
            "tree_name"        => "category_tree",
            "async_url"        => "space/command_category_tree",
            "link_url"         => "space/list",
            "link_url_params"  => [],
            "page_name"        => self::SESSION_KEY,
            "selected_oid"     => $this->getCategoryId(),
            "oid_key"          => "cid",
            "json_template"    => "space/encoded_json.tpl",
            "root_caption"     => null,
            "root_subscribed"  => false,
            "no_root"          => false,
            "on_select"        => "grn.page.space.create.onClickCategoryTree",
            "tree_view_ele_id" => "tree-view",
            "view_part_ele_id" => "view_part",
            "set_tree_height"  => true,
            "root"             => $treeJson
        ];
    }

    /**
     *
     * Enter description here ...
     *
     * @param CategoryCollection $categoryCollection
     *
     * @return string
     */
    private function getCategoryDataJson(CategoryCollection $categoryCollection)
    {
        $result = [];
        foreach ($categoryCollection->getIterator() as $eachCategory) {
            $result[$eachCategory->getId()] = [
                "name" => $eachCategory->getCategoryName()
            ];
        }

        return json_encode($result);
    }

    /**
     * (non-PHPdoc)
     * @see grn\space\screen.GenericScreenBase::getSitePosition()
     */
    public function getSitePosition()
    {
        if (is_null($this->getCategoryId())) {
            return [
                [
                    "name" => grn_get_page_display_name(self::URL_INDEX),
                    "page" => self::URL_INDEX,
                ],
                [
                    "name" => grn_get_page_display_name(self::URL_CREATE),
                ],
            ];
        }
        $sitePosition
            = $this->createCategorySitePosition($this->getCategoryId());
        $sitePosition[] = [
            "name" => grn_get_page_display_name(self::URL_CREATE),
        ];

        return $sitePosition;
    }

    /**
     * @return array
     */
    public function getBackPageInfo()
    {
        if (is_null($this->getCategoryId())) {
            return [
                "page"      => self::URL_INDEX,
                "parameter" => []
            ];
        }

        return [
            "page"     => self::URL_LIST,
            "paramter" => [
                "cid" => $this->getCategoryId()
            ]
        ];
    }

    /**
     * (non-PHPdoc)
     * @see grn\space\screen.GenericScreenBase::getTitle()
     */
    public function getTitle()
    {
        return grn_get_page_display_name(self::URL_CREATE);
    }

    /**
     * @return mixed
     */
    public function getCategoryId()
    {
        return $this->categoryId;
    }

    /**
     * Setup categoryId
     *
     * @param array $input
     */
    private function setCategoryIdFromInput($input)
    {
        if (array_key_exists(self::ARG_CATEGORY_ID, $input)
            && ValidateUtility::isNumber(
                $input[self::ARG_CATEGORY_ID],
                ValidateUtility::DISABLE_EMPTY,
                ValidateUtility::EXCEPTION_NOT_THROW)
        ) {
            $this->categoryId = $input[self::ARG_CATEGORY_ID];
        } else {
            $spaceService = SpaceService::getInstance();
            try {
                $defaultCategory
                    = $spaceService->getSpaceDefaultCategory($this->getLoginUserId());
                $this->categoryId = $defaultCategory->getId();
            } catch (GrnDataNotFoundException $e) {
                $this->categoryId = null;
            }
        }
    }

    /**
     * Load CategoryTreeSession from the session.
     *
     * @return CategoryTreeSession
     */
    private function loadCategoryTreeSession()
    {
        require_once('fw/session_manager.csp');
        $sm = \CB_SessionManager::getInstance();
        $session = $sm->getSession(self::SESSION_KEY);

        return CategoryTreeSession::loadFromSession($session);
    }

    /**
     * Clear the tree data stored in the session.
     *
     * @param CategoryTreeSession $categoryTreeSession
     */
    private function clearCategoryTreeSession(
        CategoryTreeSession $categoryTreeSession
    ) {
        require_once('fw/session_manager.csp');
        $sm = \CB_SessionManager::getInstance();
        $session = $sm->getSession(self::SESSION_KEY);
        $categoryTreeSession->clearSession($session);
    }

    /**
     * Save the tree data stored in the session.
     *
     * @param CategoryTreeSession $categoryTreeSession
     */
    private function saveCategoryTreeSession(
        CategoryTreeSession $categoryTreeSession
    ) {
        require_once('fw/session_manager.csp');
        $sm = \CB_SessionManager::getInstance();
        $session = $sm->getSession(self::SESSION_KEY);
        $categoryTreeSession->saveToSession($session);
    }

    /**
     * @param IconCollection $iconCollection
     */
    private function setIconCollection(IconCollection $iconCollection)
    {
        $this->iconCollection = $iconCollection;
    }

    /**
     * @return mixed
     */
    private function getIconCollection()
    {
        return $this->iconCollection;
    }

    /**
     * @return mixed
     */
    public function getIconIterator()
    {
        return $this->getIconCollection()->getIterator();
    }

    /**
     * @return mixed
     */
    private function getMemberIdArray()
    {
        return $this->memberIdArray;
    }

    /**
     * @param $input
     */
    private function setMemberIdArrayFromInput($input)
    {
        $member_info_list = [];
        if (array_key_exists(self::ARG_MEMBER_ID, $input)
            && is_array($input[self::ARG_MEMBER_ID])
        ) {
            foreach ($input[self::ARG_MEMBER_ID] as $target_id) {
                $member_info_list[]
                    = SpaceMemberUtility::getPickoutMemberInfo($target_id);
            }
        } else {
            $member_info_list[]
                = SpaceMemberUtility::getPickoutMemberInfo($this->getLoginUserId());
        }
        $this->memberIdArray = $member_info_list;
    }

    /**
     * @param $input
     */
    protected function setInput($input)
    {
        parent::setInput($input);
        $this->setCategoryIdFromInput($input);
        $this->setMemberIdArrayFromInput($input);
    }

    /**
     * Create Array to give to grn_text_multilanguage
     *
     * @return array
     */
    public function getMultilingualSpaceNameArray()
    {
        return [
            "element_name" => "name",
            "form_name"    => "space/create",
            "values"       => [],
        ];
    }
}
