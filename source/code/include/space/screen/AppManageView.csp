<?php

namespace grn\space\screen;

use grn\space\common\exception\ErrorCode;
use grn\space\common\exception\GrnKintoneException;
use grn\space\service\KintoneService;
use grn\space\service\SpaceService;

/**
 * Class AppManageView
 *
 */
class AppManageView extends AppManageBase
{
    const PATH_TEMPLATE_FILE = "space/appmanage_view.tpl";

    /**
     * @return mixed|string|void
     * @throws GrnKintoneException
     */
    public function fetch()
    {
        $spaceID = $this->getArrayValue(self::ARG_SPACE_ID, $this->getInput());
        $loginID = $this->getLoginUserId();
        // Get Kintone Aplication ID List
        $kintoneService = KintoneService::getInstance();
        $appList = $kintoneService->listKintoneApplications($spaceID,
            $loginID);

        $appIDList = [];
        /** @var \grn\space\data\bean\SpaceApplication $app */
        foreach ($appList as $app) {
            $appIDList[] = $app->getExternalApplicationId();
        }

        // Get Application
        require_once('kintone/AppAPILogic.csp');
        $appAPILogic = new \GRN_Kintone_AppAPILogic();
        $apps = $appAPILogic->listApp($appIDList);
        if ( ! $apps['success']) {
            throw GrnKintoneException::valueOf(ErrorCode::GRN_KINTONE_GET_APP_INFO_FAILED,
                $apps);
        }

        //Set application id
        foreach ($apps['result']['appList'] as $idx => $app) {
            /** @var \grn\space\data\bean\SpaceApplication $app2 */
            foreach ($appList as $idx2 => $app2) {
                if ($app2->getExternalApplicationId() == $app['id']) {
                    $apps['result']['appList'][$idx]['applicationId']
                        = $app2->getId();
                    $apps['result']['appList'][$idx]['type']
                        = ($app2->isExternalApplicationOwner() ? 'on space'
                        : 'link');
                }
            }
        }

        // Kintone側のアプリが存在しない場合(Kintone側で消された場合), こちら側のデータも消す
        require_once('kintone/APILogic.csp');
        foreach ($appList as $app) {
            $result = $appAPILogic->get($app->getExternalApplicationId());
            if ( ! $result['success']
                 && @$result['code'] == \GRN_Kintone_APILogic::$APP_NOT_FOUND
            ) {
                $kintoneService->unlinkKintoneApplication($this->getSpace(),
                    $app);
            }
        }

        //同期が必要がどうか取得する
        $needSync = ! $kintoneService->isSameACL($spaceID, $loginID)
                    || ! $kintoneService->isSameName($spaceID, $loginID);

        // Get Kintone URL
        require_once('kintone/Logic.csp');
        $kintoneURL = \GRN_Kintone_Logic::getKintoneURL();

        require_once('grn/smarty.csp');
        $smarty = new \GRN_Smarty();

        $smarty->assign('apps', $apps['result']['appList']);
        $smarty->assign('spid', $spaceID);
        $smarty->assign('space', $this->getSpace());
        $smarty->assign('kintoneURL', $kintoneURL);
        $smarty->assign('needSync', $needSync);
        $smarty->assign('site_position', $this->getSitePosition());
        $smarty->assign('page_title', $this->getTitle());

        return $smarty->fetch(self::PATH_TEMPLATE_FILE);
    }

    /**
     * @return array
     */
    public function getSitePosition()
    {
        $position = parent::getSitePosition();
        unset($position[count($position) - 1]['page']);

        return $position;
    }
}
