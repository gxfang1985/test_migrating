<?php

namespace grn\space\screen;

use grn\space\service\SpaceService;
use grn\space\common\data\bean\Category;
use grn\space\data\collection\SpaceCollection;
use grn\space\common\utility\SpaceDatetimeUtility;
use grn\space\data\condition\SpaceSearchCondition;

/**
 * Class SystemCategoryView
 *
 */
class SystemCategoryView extends GenericScreenBase
{
    const PATH_TEMPLATE_FILE = "space/system/category_view.tpl";

    private $spaceCollection;
    private $categoryId;

    /**
     * @return mixed|string|void
     * @throws \grn\space\common\exception\GrnInvalidArgumentException
     */
    public function fetch()
    {
        $input = $this->getInput();
        $spaceService = SpaceService::getInstance();
        $this->checkArgFromInput([self::ARG_SPACE_CATEGORY_ID],
            $this->getInput());

        $rootCategory
            = $spaceService->getSpaceRootCategory($this->getLoginUserId());

        $categoryObj
            = $spaceService->getSpaceCategory($this->getSpaceCategoryId(),
            $this->getLoginUserId(), $this->getLanguageCode());

        $spaceService->addInspectionUserInfo($categoryObj,
            $this->getLoginUserId(),
            $this->isSystemUseEnglish(), $this->isEnglishDisplayAfterName(),
            $this->isOrganizationDisplayAfterName(), $this->getLanguageCode());

        $_memo = $categoryObj->getMemo();

        $childCategoryList
            = $spaceService->getChildCategoryList($this->getSpaceCategoryId(),
            $this->getLanguageCode());

        $spaceSearchCondition = new SpaceSearchCondition();
        $spaceSearchCondition->setSearchCategoryId($this->getSpaceCategoryId());
        $spaceCollection
            = $spaceService->searchSpaceBySearchCondition($spaceSearchCondition,
            $this->getLoginUserId(), SpaceService::CATEGORY_NAME_IS_NECESSARY,
            $this->getLanguageCode());

        /** @var \grn\space\common\data\bean\Category $categoryObj */
        $categoryObj
            = SpaceDatetimeUtility::constructDisplayDatetimeOfInspection($categoryObj,
            $this->getDatetimeFormat(),
            SpaceDatetimeUtility::DISPLAY_TYPE_LONGDATE_AND_TIME,
            $this->getLanguageCode(), $this->getTimezoneName());

        $category = [];
        $category["parent"] = $this->getSpaceCategoryId()
                              != $rootCategory->getId();
        $category["deletable"] = (count($childCategoryList) == 0
                                  && count($spaceCollection) == 0);

        require_once("grn/smarty.csp");
        $smarty = new \GRN_Smarty();
        $smarty->assign("category_name", $categoryObj->getCategoryName());
        $smarty->assign("site_position", $this->getSitePosition());
        $smarty->assign("page_title", $this->getTitle());
        $smarty->assign("category_id", $categoryObj->getId());
        $smarty->assign("category_code", $categoryObj->getCategoryCode());

        if ($this->getSpaceCategoryId() != $rootCategory->getId()) {
            $smarty->assign("parent_category",
                $spaceService->getSpaceCategory($categoryObj->getParentCategoryId(),
                    $this->getLoginUserId(), $this->getLanguageCode()));
        }

        $smarty->assign("category_child", $childCategoryList);
        $smarty->assign("memo", $_memo);
        $smarty->assign("create_user", $categoryObj->getCreatorId());
        $smarty->assign("modify_user", $categoryObj->getModifierId());
        $smarty->assign("modify_username",
            $categoryObj->getModifierDisplayName());
        $smarty->assign("create_time",
            $categoryObj->getCreateDisplayDatetime());
        $smarty->assign("modify_time",
            $categoryObj->getModifyDisplayDatetime());
        $smarty->assign("category", $category);

        return $smarty->fetch(self::PATH_TEMPLATE_FILE);
    }

    /**
     * @return mixed
     */
    public function getModifyDatetime()
    {
        return $this->_modifyDatetime;
    }

    /**
     * @return mixed
     */
    public function getCategoryId()
    {
        return $this->categoryId;
    }

    /**
     * @return array
     */
    public function getSitePosition()
    {
        return [
            [
                "name"                      => grn_get_page_display_name("space/system/category_list"),
                "page"                      => "space/system/category_list",
                self::ARG_SPACE_CATEGORY_ID => $this->getSpaceCategoryId(),
                "filter_id"                 => cb_at($this->getInput(),
                    'filter_id'),
            ],
            [
                "name" => grn_get_page_display_name("space/system/category_view"),
            ]
        ];
    }

    /**
     * @return string
     */
    public function getTitle()
    {
        return grn_get_current_page_display_name();
    }

    /**
     * @return mixed
     */
    public function getInput()
    {
        return $this->input;
    }

    /**
     * @param $input
     */
    public function setInput($input)
    {
        $this->input = $input;
    }
}
