<?php

namespace grn\space\screen;

use grn\space\common\data\bean\Authority;

use grn\space\service\SpaceService;

/**
 * Class SystemDeleteMultiSpaces
 *
 */
class SystemDeleteMultiSpaces extends GenericScreenBase
{
    const URL_SYSTEM_CATEGORY_LIST = "space/system/category_list";

    /**
     * @return mixed|string|void
     * @throws \grn\space\common\exception\GrnInvalidArgumentException
     */
    public function fetch()
    {
        $input = $this->getInput();
        $this->checkArgFromInput([self::ARG_SPACE_CATEGORY_ID], $input);
        $categoryId = $input[self::ARG_SPACE_CATEGORY_ID];

        $spaceService = SpaceService::getInstance();
        $category = $spaceService->getSpaceCategory($categoryId,
            $this->getLoginUserId(), $this->getLanguageCode());

        $session = $this->getSession("space/system/category_list");
        $deletingSpaceList = $session->get("spid");

        require_once('grn/smarty.csp');
        $smarty = new \GRN_Smarty();
        $smarty->assign("category", $category);
        $smarty->assign("deletingSpaceList", $deletingSpaceList);
        $smarty->assign("page_title", $this->getTitle());
        $smarty->assign("site_position", $this->getSitePosition());

        return $smarty->fetch("space/system/delete_multi.tpl");
    }

    /**
     * @param $notUsed
     *
     * @return array
     * @throws \grn\space\common\exception\GrnInvalidArgumentException
     */
    public function post($notUsed)
    {
        $input = $this->getInput();
        $this->checkArgFromInput([self::ARG_SPACE_CATEGORY_ID], $input);
        $this->setSpaceCategoryId($input[self::ARG_SPACE_CATEGORY_ID]);

        $session = $this->getSession("space/system/category_list");
        $deletingSpaceList = $session->get("spid");

        $spaceService = SpaceService::getInstance();

        if (is_array($deletingSpaceList)) {
            foreach ($deletingSpaceList as $spaceId) {
                if ($spaceService->hasSpaceAccessControl(Authority::AUTHORITY_CODE_SYSTEM_PRIVILEGE,
                    $spaceId, $this->getLoginUserId())
                ) {
                    $spaceService->deleteSpace($spaceId,
                        $this->getLoginUserId());
                }
            }
        }

        return [
            "space/system/category_list",
            [
                "cid" => $this->getSpaceCategoryId(),
            ],
        ];
    }

    /**
     * @return string
     */
    public function getTitle()
    {
        return grn_get_current_page_display_name();
    }

    /**
     * @return array
     */
    public function getSitePosition()
    {
        return [
            [
                "page"      => self::URL_SYSTEM_CATEGORY_LIST,
                "name"      => cb_msg('grn.space.system', 'category_list'),
                "cid"       => $this->getSpaceCategoryId(),
                "filter_id" => cb_at($this->getInput(), 'filter_id'),
            ],
            [
                "name" => $this->getTitle()
            ],
        ];
    }
}
