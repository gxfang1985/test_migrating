<?php

namespace grn\space\screen;

use grn\space\service\SpaceService;
use grn\space\data\bean\MemberOpenStatus;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\common\utility\ValidateUtility;
use grn\space\common\exception\ErrorCode;
use grn\space\common\exception\GrnInvalidArgumentException;

/**
 * Class CommandMemberStatus
 *
 */
class CommandMemberStatus extends GenericScreenBase
{
    /**
     * Parameter name of the memo status.
     *
     * @var string
     */
    const ARG_IS_OPEN = "status";


    /**
     * Status of the memo field
     *
     * @var boolean
     */
    private $isOpen;

    /**
     * @param $notUsed
     *
     * @return bool
     * @throws GrnDataNotFoundException
     * @throws \Exception
     */
    public function post($notUsed)
    {
        $spaceService = SpaceService::getInstance();

        try {
            //Cofirm that the specified space exists.
            $space = $spaceService->getSpace($this->getSpaceId(),
                $this->getLoginUserId());

            $memberOpenStatus = new MemberOpenStatus();
            $memberOpenStatus->setId($this->getSpaceId());
            $memberOpenStatus->setUserId($this->getLoginUserId());

            if ($this->isOpen()) {
                $spaceService->openMemberField($memberOpenStatus);
            } else {
                $spaceService->closeMemberField($memberOpenStatus);
            }
        } catch (GrnDataNotFoundException $exception) {
            $exception->setErrorCode(ErrorCode::GRN_INVALID_SPACE_ID);
            throw $exception;
        }

        return true;
    }

    /**
     * @param $input
     *
     * @throws GrnInvalidArgumentException
     */
    protected function setInput($input)
    {
        parent::setInput($input);
        $this->checkArgFromInput([self::ARG_SPACE_ID], $input);
        $this->verifySpaceIsNotExpired();
        $this->setIsOpenFromInput($input);
    }


    /**
     * Setup isOpen property with $G_INPUT
     *
     * @param array $input
     */
    private function setIsOpenFromInput(array $input)
    {
        $isOpen = (@$input[self::ARG_IS_OPEN]) ? true : false;
        $this->isOpen = $isOpen;
    }

    /**
     * Get status of the memo field
     *
     * @return boolean
     */
    private function isOpen()
    {
        return $this->isOpen;
    }
}
