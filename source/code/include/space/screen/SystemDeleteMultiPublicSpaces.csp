<?php

namespace grn\space\screen;

use grn\space\common\data\bean\Authority;
use grn\space\data\condition\SpaceSearchCondition;
use grn\space\service\SpaceService;

class SystemDeleteMultiPublicSpaces extends GenericScreenBase
{
    const URL_SYSTEM_CATEGORY_LIST = "space/system/category_list";

    /**
     * @return mixed|string|void
     * @throws \grn\space\common\exception\GrnInvalidArgumentException
     */
    public function fetch()
    {
        $input = $this->getInput();
        $this->checkArgFromInput([self::ARG_SPACE_CATEGORY_ID], $input);
        $category_id = $input[self::ARG_SPACE_CATEGORY_ID];

        $space_service = SpaceService::getInstance();
        $category = $space_service->getSpaceCategory($category_id,
            $this->getLoginUserId(), $this->getLanguageCode());

        $ts = new \CB_TimeStampEx(new \CB_TimeStamp());
        $ts->unix_ts = time();
        $term_date = $ts->getDate();
        $term_date->moveYears(-1);

        require_once("grn/smarty.csp");
        $smarty = new \GRN_Smarty();
        $smarty->assign("filter_id", cb_at($input, "filter_id"));
        $smarty->assign("category", $category);
        $smarty->assign("term_date", $term_date);
        $smarty->assign("page_title", $this->getTitle());
        $smarty->assign("site_position", $this->getSitePosition());

        return $smarty->fetch("space/system/delete_public_space.tpl");
    }

    /**
     * @return mixed|string|void
     * @throws \grn\space\common\exception\GrnInvalidArgumentException
     */
    public function fetchConfirm()
    {
        $input = $this->getInput();
        $this->checkArgFromInput([self::ARG_SPACE_CATEGORY_ID], $input);
        $category_id = $input[self::ARG_SPACE_CATEGORY_ID];

        $space_service = SpaceService::getInstance();
        $category = $space_service->getSpaceCategory($category_id,
            $this->getLoginUserId(), $this->getLanguageCode());

        $term_date_string = $input["term_date"] ?? null;
        $term_date = new \CB_Date();
        if ( ! $term_date->parse($term_date_string)
             || ! cb_date_validate_date($term_date)
        ) {
            cb_throw_error(E_COMMON_INVALID_DATE);
        }

        require_once("grn/smarty.csp");
        $smarty = new \GRN_Smarty();
        $smarty->assign("filter_id", cb_at($input, "filter_id"));
        $smarty->assign("category", $category);
        $smarty->assign("term_date", $term_date);
        $smarty->assign("term_date_string", $term_date_string);
        $smarty->assign("page_title", $this->getTitle());
        $smarty->assign("site_position", $this->getSitePosition());

        return $smarty->fetch("space/system/delete_public_space_confirmation.tpl");
    }

    /**
     * @param array $input
     *
     * @return array
     * @throws \grn\space\common\exception\GrnInvalidArgumentException
     */
    public function post($input)
    {
        $input = $this->getInput();
        $this->checkArgFromInput([self::ARG_SPACE_CATEGORY_ID], $input);
        $category_id = $input[self::ARG_SPACE_CATEGORY_ID];

        $space_service = SpaceService::getInstance();
        $space_service->getSpaceCategory($category_id, $this->getLoginUserId(),
            $this->getLanguageCode());

        $term_date_string = $input["term_date"] ?? null;
        $term_date = new \CB_Date();
        if ( ! $term_date->parse($term_date_string)
             || ! cb_date_validate_date($term_date)
        ) {
            cb_throw_error(E_COMMON_INVALID_DATE);
        }

        $term_date_time = strtotime($term_date->format());
        $space_search_condition = new SpaceSearchCondition();
        $space_search_condition->setSearchCategoryId($category_id);
        $space_search_condition->setSearchSpaceExpirationDate(SpaceSearchCondition::SEARCH_SPACE_NOT_EXPIRED);
        $space_search_condition->setSearchUnmodifiedSpace($term_date_time);
        $space_collection
            = $space_service->searchSpaceBySearchCondition($space_search_condition,
            $this->getLoginUserId());

        foreach ($space_collection as $space) {
            /** @var $space \grn\space\data\bean\Space */
            $space_id = $space->getId();
            if ($space_service->hasSpaceAccessControl(Authority::AUTHORITY_CODE_SYSTEM_PRIVILEGE,
                $space_id, $this->getLoginUserId())
            ) {
                $space_service->deleteSpace($space_id, $this->getLoginUserId());
            }
        }

        return [
            self::URL_SYSTEM_CATEGORY_LIST,
            [
                "cid"       => $this->getSpaceCategoryId(),
                "filter_id" => cb_at($input, "filter_id"),
            ],
        ];
    }

    /**
     * @return string
     */
    public function getTitle()
    {
        return grn_get_current_page_display_name();
    }

    /**
     * @return array
     */
    public function getSitePosition()
    {
        return [
            [
                "page"      => self::URL_SYSTEM_CATEGORY_LIST,
                "name"      => cb_msg("grn.space.system", "category_list"),
                "cid"       => $this->getSpaceCategoryId(),
                "filter_id" => cb_at($this->getInput(), "filter_id"),
            ],
            [
                "name" => $this->getTitle()
            ],
        ];
    }
}
