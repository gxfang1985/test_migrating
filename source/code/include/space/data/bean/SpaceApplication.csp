<?php

namespace grn\space\data\bean;

use grn\space\common\data\bean\Application;
use grn\space\common\utility\ValidateUtility;

/**
 * スペースアプリケーションクラス
 * ひとつのスペースアプリケーションを表すデータクラス
 **/
class SpaceApplication extends Application
{
    /**
     * Using a constant array key.
     */
    const SPACE_ID = "col_space";

    /**
     * Using a constant array key.
     */
    const ROOT_CATEGORY_ID = "col_root_category";

    /**
     * Using a constant array key.
     */
    const IS_EXTERNAL_APPLICATION_OWNER = "col_is_external_application_owner";


    /**
     * Choice of $_isExternalApplicationOwner
     *
     * @var integer
     */
    const EXTERNAL_APPLICATION_OWNER_NOT_OWNER = 0;

    /**
     * Choice of $_isExternalApplicationOwner
     *
     * @var integer
     */
    const EXTERNAL_APPLICATION_OWNER_OWNER = 1;

    /**
     * This is not stored in the DB but used only by SpaceApplicationSearchCondition
     *
     * @var null
     */
    const EXTERNAL_APPLICATION_OWNER_ANY = null;

    /**
     * スペースIDの値を保持する
     */
    private $_spaceId;

    /**
     * ルートカテゴリIDの値を保持する
     * It uses it only by an internal application.
     */
    private $_rootCategoryId;

    /**
     * 外部アプリケーション所有者フラグの値を保持する
     * It uses it only by an external application.
     */
    private $_isExternalApplicationOwner;


    /**
     * コンストラクタ
     * オブジェクト配列を引数で受け取った場合は、受け取った配列でオブジェクトを初期化する
     * 引数がnullの場合は各データクラスのデフォルト値で初期化する
     *
     * @param     array $dataArray initial data
     * @param     bool  $isInputCheck
     */
    public function __construct(
        array $dataArray = null,
        $isInputCheck = self::CHECK_INPUT
    ) {
        parent::__construct($dataArray, $isInputCheck);

        if (is_null($dataArray)) {
            $this->setSpaceId('');
            $this->setRootCategoryId('');
            $this->setExternalApplicationOwner(false);
        } else {
            $this->setSpaceId((array_key_exists(self::SPACE_ID, $dataArray))
                ? $dataArray[self::SPACE_ID] : '');
            $this->setRootCategoryId((array_key_exists(self::ROOT_CATEGORY_ID,
                $dataArray)) ? $dataArray[self::ROOT_CATEGORY_ID] : '');
            $this->setExternalApplicationOwner((array_key_exists(self::IS_EXTERNAL_APPLICATION_OWNER,
                $dataArray)) ? (($dataArray[self::IS_EXTERNAL_APPLICATION_OWNER]
                                 === null
                                 || $dataArray[self::IS_EXTERNAL_APPLICATION_OWNER]
                                    == 0) ? false : true) : false);
        }
    }

    /**
     * オプジェクトデータを配列に変換する
     * 配列のキーはconst定数を使用
     *
     * @return    array         key:constant value:string or boolean or number
     */
    public function convertArray()
    {
        $result = parent::convertArray();

        $result[self::SPACE_ID] = $this->getSpaceId();
        $result[self::ROOT_CATEGORY_ID]
            = $this->getRootCategoryId();
        $result[self::IS_EXTERNAL_APPLICATION_OWNER]
            = $this->isExternalApplicationOwner();

        return $result;
    }

    /**
     * スペースIDを取得
     *
     * @return    string        space sequence id
     */
    public function getSpaceId()
    {
        return $this->_spaceId;
    }

    /**
     * スペースIDを設定
     *
     * @param     string $value space sequence id
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not number.
     */
    public function setSpaceId($value)
    {
        $this->isInputNumber($value);

        $this->_spaceId = $value;
    }

    /**
     * ルートカテゴリIDを取得
     *
     * @return    string        category sequence id
     */
    public function getRootCategoryId()
    {
        return $this->_rootCategoryId;
    }

    /**
     * ルートカテゴリIDを設定
     *
     * @param     string $value category sequence id
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not number.
     */
    public function setRootCategoryId($value)
    {
        $this->isInputNumber($value);

        $this->_rootCategoryId = $value;
    }

    /**
     * 外部アプリケーション所有者フラグを取得
     *
     * @return    boolean       TRUE : Owner      FALSE : User
     */
    public function isExternalApplicationOwner()
    {
        return $this->_isExternalApplicationOwner;
    }

    /**
     * 外部アプリケーション所有者フラグを設定
     *
     * @param     boolean       TRUE : Owner      FALSE : User
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not boolean.
     */
    public function setExternalApplicationOwner($value)
    {
        $this->isInputBoolean($value);

        $this->_isExternalApplicationOwner = $value;
    }

    /**
     * Set Application object whose ID is $this->getApplicationId()
     *
     * @var Application
     */
    public function setApplicationMaster(Application $applicationMaster)
    {
        $this->setId($applicationMaster->getId());
        $this->setApplicationCode($applicationMaster->getApplicationCode());
        $this->setApplicationName($this->getApplicationName());
        $this->setApplicationType($this->getApplicationType());
        $this->setAvailable($this->isAvailable());
        $this->setExternalApplicationId($applicationMaster->getExternalApplicationId());
        $this->setSystemUse($this->isSystemUse());
        $this->setForcedUse($this->isForcedUse());
    }


    /**
     * 検査の実行(オーバーライド)
     * Performing Validation is override
     *
     * @param     int $validType VALID_TYPE_CREATE, VALID_TYPE_MODIFY, VALID_TYPE_SELECT
     *
     * @return    boolean       TRUE : valid   FALSE: Invalid
     */
    protected function checkValidate($validType)
    {
        return parent::checkValidate($validType);
    }

}

