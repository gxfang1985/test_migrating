<?php

namespace grn\space\data\bean\log;

use grn\space\common\data\LogInterface;
use grn\space\common\exception\GrnInvalidArgumentException;

/**
 * Class SyncAppManageLog
 */
class SyncAppManageLog implements LogInterface
{

    const ACTION_SYNC = 'sync';


    const OBJECT_APP_MANAGE = 'app_manage';


    const SPACE_ID = 'spid';


    const SPACE_NAME = 'space_name';


    const KINTONE_APP_ID_LIST = 'kintone_app_id';

    const SYNC_TYPE = 'sync_type';


    const SYNC_TYPE_APPLICATION_NAME = 'appname';


    const SYNC_TYPE_PERMISSION = 'permission';


    const NOT_SET = '';


    /**
     *
     * @var string
     */
    private $_action;


    /**
     *
     * @var string
     */
    private $_object;


    /**
     *
     * @var string
     */
    private $_spaceId;


    /**
     *
     * @var string
     */
    private $_spaceName;


    /**
     *
     * @var string
     */
    private $_kintoneAppIdList;


    /**
     *
     * @var string
     */
    private $_syncType;

    /**
     * SyncAppManageLog constructor.
     */
    public function __construct()
    {
        $this->setAction(self::ACTION_SYNC);
        $this->setObject(self::OBJECT_APP_MANAGE);
        $this->setSpaceId(self::NOT_SET);
        $this->setSpaceName(self::NOT_SET);
        $this->setKintoneAppIdList(self::NOT_SET);
        $this->setSyncType(self::SYNC_TYPE_APPLICATION_NAME);
    }


    /**
     * @param string $action
     */
    public function setAction($action)
    {
        $this->_action = $action;
    }


    /**
     * @return string
     */
    public function getAction()
    {
        return $this->_action;
    }


    /**
     * @param string $object
     */
    public function setObject($object)
    {
        $this->_object = $object;
    }


    /**
     * @return string
     */
    public function getObject()
    {
        return $this->_object;
    }

    /**
     * @param string $spaceId
     */
    public function setSpaceId($spaceId)
    {
        $this->_spaceId = $spaceId;
    }


    /**
     * @return string
     */
    public function getSpaceId()
    {
        return $this->_spaceId;
    }


    /**
     * @param string $spaceName
     */
    public function setSpaceName($spaceName)
    {
        $this->_spaceName = $spaceName;
    }


    /**
     * @return string
     */
    public function getSpaceName()
    {
        return $this->_spaceName;
    }


    /**
     * @param string $kAppIdList
     *
     * @return void
     */
    public function setKintoneAppIdList($kAppIdList)
    {
        $this->_kintoneAppIdList = $kAppIdList;
    }


    /**
     * @return string
     */
    public function getKintoneAppIdList()
    {
        return $this->_kintoneAppIdList;
    }


    /**
     * @param string $syncType
     *
     * @throws \grn\space\common\exception\GrnInvalidArgumentException
     * @return void
     */
    public function setSyncType($syncType)
    {

        if ( ! $this->validateSyncType($syncType)) {
            throw new GrnInvalidArgumentException();
        }

        $this->_syncType = $syncType;
    }


    /**
     * @return string
     */
    public function getSyncType()
    {
        return $this->_syncType;
    }


    /**
     * @param $arg
     *
     * @return bool
     */
    protected function validateSyncType($arg)
    {
        if (in_array($arg, [
            self::SYNC_TYPE_APPLICATION_NAME,
            self::SYNC_TYPE_PERMISSION,
        ])
        ) {
            return true;
        }

        return false;
    }


    /**
     * @return array
     */
    public function getParameters()
    {
        $retval = [];
        $retval[self::SPACE_ID] = $this->getSpaceId();
        $retval[self::SPACE_NAME] = $this->getSpaceName();
        $retval[self::SYNC_TYPE] = $this->getSyncType();

        $kAppIDList = $this->getKintoneAppIdList();
        foreach (array_keys($kAppIDList) as $index => $key) {
            $retval[self::KINTONE_APP_ID_LIST . "_" . ($index + 1)]
                = $kAppIDList[$key];
        }

        return $retval;
    }

}
