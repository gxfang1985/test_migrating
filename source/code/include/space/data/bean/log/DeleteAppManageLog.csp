<?php

namespace grn\space\data\bean\log;

use grn\space\common\data\LogInterface;
use grn\space\common\exception\GrnInvalidArgumentException;

/**
 * Class DeleteAppManageLog
 */
class DeleteAppManageLog implements LogInterface
{

    const ACTION_DELETE = 'delete';


    const OBJECT_APP_MANAGE = 'app_manage';


    const LOG_SPACE_ID = 'spid';


    const LOG_SPACE_NAME = 'space_name';


    const LOG_EXTERNAL_ID = 'kintone_id';


    const LOG_EXTERNAL_NAME = 'kintone_appname';


    const LOG_EXTERNAL_DELETE_TYPE = 'delete_type';


    const EXTERNAL_DELETE_TYPE_LINK = 'link';


    const EXTERNAL_DELETE_TYPE_OBJECT = 'object';


    const NOT_SET = '';


    /**
     *
     * @var string
     */
    private $_action;


    /**
     *
     * @var string
     */
    private $_object;


    /**
     *
     * @var string
     */
    private $_spaceId;


    /**
     *
     * @var string
     */
    private $_spaceName;


    /**
     *
     * @var string
     */
    private $_externalId;


    /**
     *
     * @var string
     */
    private $_externalAppName;


    /**
     *
     * @var string
     */
    private $_externalDeleteType;

    /**
     * DeleteAppManageLog constructor.
     */
    public function __construct()
    {
        $this->setAction(self::ACTION_DELETE);
        $this->setObject(self::OBJECT_APP_MANAGE);
        $this->setSpaceId(self::NOT_SET);
        $this->setSpaceName(self::NOT_SET);
        $this->setExternalId(self::NOT_SET);
        $this->setExternalAppName(self::NOT_SET);
        $this->setExternalDeleteType(self::EXTERNAL_DELETE_TYPE_LINK);
    }


    /**
     * @param string $action
     */
    public function setAction($action)
    {
        $this->_action = $action;
    }


    /**
     * @return string
     */
    public function getAction()
    {
        return $this->_action;
    }


    /**
     * @param string $object
     */
    public function setObject($object)
    {
        $this->_object = $object;
    }


    /**
     * @return string
     */
    public function getObject()
    {
        return $this->_object;
    }


    /**
     * @param string $spaceId
     */
    public function setSpaceId($spaceId)
    {
        $this->_spaceId = $spaceId;
    }


    /**
     * @return string
     */
    public function getSpaceId()
    {
        return $this->_spaceId;
    }


    /**
     * @param string $spaceName
     */
    public function setSpaceName($spaceName)
    {
        $this->_spaceName = $spaceName;
    }


    /**
     * @return string
     */
    public function getSpaceName()
    {
        return $this->_spaceName;
    }


    /**
     * @param string $externalId
     */
    public function setExternalId($externalId)
    {
        $this->_externalId = $externalId;
    }


    /**
     * @return string
     */
    public function getExternalId()
    {
        return $this->_externalId;
    }


    /**
     * @param string $externalAppName
     */
    public function setExternalAppName($externalAppName)
    {
        $this->_externalAppName = $externalAppName;
    }


    /**
     * @return string
     */
    public function getExternalAppName()
    {
        return $this->_externalAppName;
    }


    /**
     * @param string $externalDeleteType
     *
     * @throws \grn\space\common\exception\GrnInvalidArgumentException
     * @return void
     */
    public function setExternalDeleteType($externalDeleteType)
    {

        if ( ! $this->validateExternalDeleteType($externalDeleteType)) {
            throw new GrnInvalidArgumentException();
        }

        $this->_externalDeleteType = $externalDeleteType;
    }


    /**
     * @return string
     */
    public function getExternalDeleteType()
    {
        return $this->_externalDeleteType;
    }


    /**
     * @param $arg
     *
     * @return bool
     */
    protected function validateExternalDeleteType($arg)
    {
        if (in_array($arg, [
            self::EXTERNAL_DELETE_TYPE_LINK,
            self::EXTERNAL_DELETE_TYPE_OBJECT,
        ])
        ) {
            return true;
        }

        return false;
    }


    /**
     * @return array
     */
    public function getParameters()
    {
        $retval = [];
        $retval[self::LOG_SPACE_ID] = $this->getSpaceId();
        $retval[self::LOG_SPACE_NAME] = $this->getSpaceName();
        $retval[self::LOG_EXTERNAL_ID] = $this->getExternalId();
        $retval[self::LOG_EXTERNAL_NAME] = $this->getExternalAppName();
        $retval[self::LOG_EXTERNAL_DELETE_TYPE]
            = $this->getExternalDeleteType();

        return $retval;
    }

}
