<?php

namespace grn\space\data\bean\log;

use grn\space\common\data\LogInterface;
use grn\space\common\exception\GrnInvalidArgumentException;

/**
 * Class ConfigLog
 */
class ConfigLog implements LogInterface
{

    const ACTION_CONFIG = 'config';


    const OBJECT_COMMON = 'common';


    const LOG_KINTONE_URL = 'kintone_url';


    const LOG_KINTONE_STATUS = 'enable_kintone_connector';


    const KINTONE_CONNECT_DISABLE = 'FALSE';


    const KINTONE_CONNECT_ENABLE = 'TRUE';


    const NOT_SET = '';


    /**
     *
     * @var string
     */
    private $_action;


    /**
     *
     * @var string
     */
    private $_object;


    /**
     *
     * @var string
     */
    private $_kintoneStatus;


    /**
     *
     * @var string
     */
    private $_kintoneURL;

    /**
     * ConfigLog constructor.
     */
    public function __construct()
    {
        $this->setAction(self::ACTION_CONFIG);
        $this->setObject(self::OBJECT_COMMON);
        $this->setKintoneStatus(self::KINTONE_CONNECT_ENABLE);
        $this->setKintoneURL(self::NOT_SET);
    }


    /**
     * @param string $action
     */
    public function setAction($action)
    {
        $this->_action = $action;
    }


    /**
     * @return string
     */
    public function getAction()
    {
        return $this->_action;
    }


    /**
     * @param string $object
     */
    public function setObject($object)
    {
        $this->_object = $object;
    }


    /**
     * @return string
     */
    public function getObject()
    {
        return $this->_object;
    }


    /**
     * @param string $kintoneStatus
     *
     * @throws \grn\space\common\exception\GrnInvalidArgumentException
     * @return void
     */
    public function setKintoneStatus($kintoneStatus)
    {

        if ( ! $this->validateKintoneStatus($kintoneStatus)) {
            throw new GrnInvalidArgumentException();
        }

        $this->_kintoneStatus = $kintoneStatus;
    }


    /**
     * @return string
     */
    public function getKintoneStatus()
    {
        return $this->_kintoneStatus;
    }


    /**
     * @param string $kintoneURL
     */
    public function setKintoneURL($kintoneURL)
    {
        $this->_kintoneURL = $kintoneURL;
    }


    /**
     * @return string
     */
    public function getKintoneURL()
    {
        return $this->_kintoneURL;
    }


    /**
     * @param $arg
     *
     * @return bool
     */
    protected function validateKintoneStatus($arg)
    {
        if (in_array($arg, [
            self::KINTONE_CONNECT_DISABLE,
            self::KINTONE_CONNECT_ENABLE,
        ])
        ) {
            return true;
        }

        return false;
    }


    /**
     * @return array
     */
    public function getParameters()
    {
        $retval = [];
        $retval[self::LOG_KINTONE_STATUS] = $this->getKintoneStatus();
        $retval[self::LOG_KINTONE_URL] = $this->getKintoneURL();

        return $retval;
    }

}
