<?php

namespace grn\space\data\bean\log;

use grn\space\common\data\LogInterface;

/**
 * Class BrowseThreadLog
 */
class BrowseThreadLog implements LogInterface
{
    const ACTION_CREATE = 'browse';
    const OBJECT_THREAD = 'thread';
    const LOG_CATEGORY_ID = 'cid';
    const LOG_SPACE_ID = 'spid';
    const LOG_SPACE_NAME = 'space_name';
    const LOG_DIRECTORY_ID = 'did';
    const LOG_THREAD_ID = 'tid';
    const LOG_THREAD_NAME = 'thread_name';
    const NOT_SET = '';

    /**
     * @var
     */
    private $_action;

    /**
     * @var
     */
    private $_object;

    /**
     * @var
     */
    private $_categoryId;

    /**
     * @var
     */
    private $_spaceId;

    /**
     * @var
     */
    private $_spaceName;

    /**
     * @var
     */
    private $_directoryId;

    /**
     * @var
     */
    private $_threadId;

    /**
     * @var
     */
    private $_threadName;

    /**
     * BrowseThreadLog constructor.
     */
    public function __construct()
    {
        $this->setAction(self::ACTION_CREATE);
        $this->setObject(self::OBJECT_THREAD);
        $this->setCategoryId(self::NOT_SET);
        $this->setSpaceId(self::NOT_SET);
        $this->setSpaceName(self::NOT_SET);
        $this->setDirectoryId(self::NOT_SET);
        $this->setThreadId(self::NOT_SET);
        $this->setThreadName(self::NOT_SET);
    }

    /**
     * @param $action
     */
    public function setAction($action)
    {
        $this->_action = $action;
    }

    /**
     * @return string
     */
    public function getAction()
    {
        return $this->_action;
    }

    /**
     * @param $object
     */
    public function setObject($object)
    {
        $this->_object = $object;
    }

    /**
     * @return string
     */
    public function getObject()
    {
        return $this->_object;
    }

    /**
     * @param $categoryId
     */
    public function setCategoryId($categoryId)
    {
        $this->_categoryId = $categoryId;
    }

    /**
     * @return string
     */
    public function getCategoryId()
    {
        return $this->_categoryId;
    }

    /**
     * @param $spaceId
     */
    public function setSpaceId($spaceId)
    {
        $this->_spaceId = $spaceId;
    }

    /**
     * @return string
     */
    public function getSpaceId()
    {
        return $this->_spaceId;
    }

    /**
     * @param $spaceName
     */
    public function setSpaceName($spaceName)
    {
        $this->_spaceName = $spaceName;
    }

    /**
     * @return string
     */
    public function getSpaceName()
    {
        return $this->_spaceName;
    }

    /**
     * @param $directoryId
     */
    public function setDirectoryId($directoryId)
    {
        $this->_directoryId = $directoryId;
    }

    /**
     * @return string
     */
    public function getDirectoryId()
    {
        return $this->_directoryId;
    }

    /**
     * @param $threadId
     */
    public function setThreadId($threadId)
    {
        $this->_threadId = $threadId;
    }

    /**
     * @return string
     */
    public function getThreadId()
    {
        return $this->_threadId;
    }

    /**
     * @param $threadName
     */
    public function setThreadName($threadName)
    {
        $this->_threadName = $threadName;
    }

    /**
     * @return string
     */
    public function getThreadName()
    {
        return $this->_threadName;
    }

    /**
     * @return array
     */
    public function getParameters()
    {
        $retval = [];
        $retval[self::LOG_CATEGORY_ID] = $this->getCategoryId();
        $retval[self::LOG_SPACE_ID] = $this->getSpaceId();
        $retval[self::LOG_SPACE_NAME] = $this->getSpaceName();
        $retval[self::LOG_DIRECTORY_ID] = $this->getDirectoryId();
        $retval[self::LOG_THREAD_ID] = $this->getThreadId();
        $retval[self::LOG_THREAD_NAME] = $this->getThreadName();

        return $retval;
    }
}
