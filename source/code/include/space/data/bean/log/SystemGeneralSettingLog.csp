<?php

namespace grn\space\data\bean\log;

use grn\space\common\data\LogInterface;

/**
 * Class SystemGeneralSettingLog
 */
class SystemGeneralSettingLog implements LogInterface
{
    const ACTION_CONFIG = 'config';
    const OBJECT_COMMON = 'common';
    const PRIVACY_PRIVATE = 'private';
    const PRIVACY_PUBLIC = 'public';
    const USE_KINTONE_ENABILE = 'enable';
    const USE_KINTONE_DISABLE = 'disable';

    const LOG_PRIVACY_DEFAULT = 'privacy_default';
    const LOG_USE_KINTONE = 'enable_kintone_connector';
    const LOG_KINTONE_URL = 'kintone_url';
    CONST ALLOW_UNLIMITED_EXPIRATION_DATE = 'allow_unlimited';
    CONST DEFAULT_DAYS_EXPIRATION_DATE = 'default_expiration_date';

    /**
     * @var string
     */
    private $_action;
    /**
     * @var string
     */
    private $_object;
    /**
     * @var string
     */
    private $_privacy_default;
    /**
     * @var string
     */
    private $_default_expiration_date;

    /**
     * @var bool
     */
    private $_allow_unlimited_period;
    /**
     * @var string
     */
    private $_enable_kintone_connector;
    /**
     * @var string
     */
    private $_kintone_url;

    /**
     * SystemGeneralSettingLog constructor.
     */
    public function __construct()
    {
        $this->setAction(self::ACTION_CONFIG);
        $this->setObject(self::OBJECT_COMMON);
    }

    /**
     * @param string $object
     */
    public function setObject($object)
    {
        $this->_object = $object;
    }

    /**
     * @return string
     */
    public function getObject()
    {
        return $this->_object;
    }

    /**
     * @param string $action
     */
    public function setAction($action)
    {
        $this->_action = $action;
    }

    /**
     * @return string
     */
    public function getAction()
    {
        return $this->_action;
    }

    /**
     * @param bool $privacy
     */
    public function setPrivacyDefault($privacy)
    {

        $this->_privacy_default = $privacy ? self::PRIVACY_PUBLIC
            : self::PRIVACY_PRIVATE;
    }

    /**
     * @return string
     */
    public function getPrivacyDefault()
    {
        return $this->_privacy_default;
    }

    /**
     * @param bool $enable
     */
    public function setEnableKintoneConnector($enable)
    {
        $this->_enable_kintone_connector = $enable ? self::USE_KINTONE_ENABILE
            : self::USE_KINTONE_DISABLE;
    }

    /**
     * @return string
     */
    public function getEnableKintoneConnector()
    {
        return $this->_enable_kintone_connector;
    }

    /**
     * @param string $url
     */
    public function setKintoneUrl($url)
    {
        $this->_kintone_url = $url;
    }

    /**
     * @return string
     */
    public function getKintoneUrl()
    {
        return $this->_kintone_url;
    }

    /**
     * @param bool   $is_unlimited
     * @param string $default_public_limited
     */
    public function setDefaultExpirationDate(
        bool $is_unlimited,
        string $default_public_limited
    ) {
        $this->_default_expiration_date = $is_unlimited ? 'unlimited'
            : $default_public_limited;
    }

    /**
     * @return string
     */
    public function getDefaultExpirationdate()
    {
        return $this->_default_expiration_date;
    }

    /**
     * @param bool $allow_unlimited
     */
    public function setAllowUnlimitedPeriod(bool $allow_unlimited)
    {
        $this->_allow_unlimited_period = $allow_unlimited ? 'allow'
            : 'disallow';
    }

    /**
     * @return string
     */
    public function getAllowUnlimitedPeriod()
    {
        return $this->_allow_unlimited_period;
    }

    /**
     * @return array
     */
    public function getParameters()
    {
        $retval = [];
        $retval[self::LOG_PRIVACY_DEFAULT]
            = $this->getPrivacyDefault();
        $retval[self::ALLOW_UNLIMITED_EXPIRATION_DATE]
            = $this->getAllowUnlimitedPeriod();
        $retval[self::DEFAULT_DAYS_EXPIRATION_DATE]
            = $this->getDefaultExpirationdate();
        require_once('kintone/Logic.csp');
        if (\GRN_Kintone_Logic::isAvailable()) {
            $retval[self::LOG_USE_KINTONE] = $this->getEnableKintoneConnector();
            $retval[self::LOG_KINTONE_URL] = $this->getKintoneUrl();
        }

        return $retval;
    }
}
