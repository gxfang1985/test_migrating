<?php

namespace grn\space\data\bean\log;

use grn\space\common\data\LogInterface;
use grn\space\common\exception\GrnInvalidArgumentException;

/**
 * Class ImportCategoryLog
 */
class ImportCategoryLog implements LogInterface
{

    const ACTION_IMPORT = 'import';


    const OBJECT_CATEGORY = 'category';


    const LOG_CATEGORY_ID = 'cid';


    const LOG_CATEGORY_NAME = 'category_name';


    const LOG_FOREIGN_KEY = 'foreign_key';


    const LOG_OPERATION = 'operation';


    const OPERATION_CREATE = 'create';


    const OPERATION_UPDATE = 'update';


    const NOT_SET = '';


    /**
     *
     * @var string
     */
    private $_action;


    /**
     *
     * @var string
     */
    private $_object;


    /**
     *
     * @var string
     */
    private $_categoryId;


    /**
     *
     * @var string
     */
    private $_categoryName;


    /**
     *
     * @var string
     */
    private $_foreignKey;


    /**
     *
     * @var string
     */
    private $_operation;


    /**
     * ImportCategoryLog constructor.
     */
    public function __construct()
    {
        $this->setAction(self::ACTION_IMPORT);
        $this->setObject(self::OBJECT_CATEGORY);
        $this->setCategoryId(self::NOT_SET);
        $this->setCategoryName(self::NOT_SET);
        $this->setForeignKey(self::NOT_SET);
        $this->setOperation(self::OPERATION_CREATE);
    }


    /**
     * @param string $action
     */
    public function setAction($action)
    {
        $this->_action = $action;
    }


    /**
     * @return string
     */
    public function getAction()
    {
        return $this->_action;
    }


    /**
     * @param string $object
     */
    public function setObject($object)
    {
        $this->_object = $object;
    }


    /**
     * @return string
     */
    public function getObject()
    {
        return $this->_object;
    }


    /**
     * @param string $categoryId
     */
    public function setCategoryId($categoryId)
    {
        $this->_categoryId = $categoryId;
    }


    /**
     * @return string
     */
    public function getCategoryId()
    {
        return $this->_categoryId;
    }


    /**
     * @param string $categoryName
     */
    public function setCategoryName($categoryName)
    {
        $this->_categoryName = $categoryName;
    }


    /**
     * @return string
     */
    public function getCategoryName()
    {
        return $this->_categoryName;
    }


    /**
     * @param string $foreignKey
     */
    public function setForeignKey($foreignKey)
    {
        $this->_foreignKey = $foreignKey;
    }


    /**
     * @return string
     */
    public function getForeignKey()
    {
        return $this->_foreignKey;
    }


    /**
     * @param string $operation
     *
     * @throws \grn\space\common\exception\GrnInvalidArgumentException
     * @return void
     */
    public function setOperation($operation)
    {

        if ( ! $this->validateOperation($operation)) {
            throw new GrnInvalidArgumentException();
        }

        $this->_operation = $operation;
    }


    /**
     * @return string
     */
    public function getOperation()
    {
        return $this->_operation;
    }


    /**
     * @param $arg
     *
     * @return bool
     */
    protected function validateOperation($arg)
    {
        if (in_array($arg, [
            self::OPERATION_CREATE,
            self::OPERATION_UPDATE,
        ])
        ) {
            return true;
        }

        return false;
    }


    /**
     * @return array
     */
    public function getParameters()
    {
        $retval = [];
        $retval[self::LOG_CATEGORY_ID] = $this->getCategoryId();
        $retval[self::LOG_CATEGORY_NAME] = $this->getCategoryName();
        $retval[self::LOG_FOREIGN_KEY] = $this->getForeignKey();
        $retval[self::LOG_OPERATION] = $this->getOperation();

        return $retval;
    }

}
