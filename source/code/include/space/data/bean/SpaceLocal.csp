<?php

namespace grn\space\data\bean;

use grn\space\common\exception\GrnIllegalOperationException;

use grn\space\common\data\bean\LanguageStatus;

/**
 * This class maintains the localized names of a Space.
 */
class SpaceLocal extends LanguageStatus
{
    /**
     * Column name to store space ID
     *
     * @var string
     */
    const SPACE_ID = "col_space";

    /**
     * Column name to store localized space name
     *
     * @var string
     */
    const SPACE_NAME = "col_space_name";

    /**
     * Space ID
     *
     * @var string
     */
    private $_spaceId;

    /**
     * Localized space name
     *
     * @var string
     */
    private $_spaceName;

    /**
     * Constructor
     * Initialize this object by the given array when an array is given.
     * When null is given, this object is initialized with default values.
     *
     * @param     array $dataArray initial data
     * @param     bool  $isInputCheck
     */
    public function __construct(
        array $dataArray = null,
        $isInputCheck = self::CHECK_INPUT
    ) {
        parent::__construct($dataArray, $isInputCheck);

        if (is_null($dataArray)) {
            $this->setSpaceId('');
            $this->setSpaceName('');
        } else {
            $this->setSpaceId((array_key_exists(self::SPACE_ID, $dataArray))
                ? $dataArray[self::SPACE_ID] : '');
            $this->setSpaceName((array_key_exists(self::SPACE_NAME, $dataArray))
                ? $dataArray[self::SPACE_NAME] : '');
        }
    }


    /**
     * Set the space ID
     *
     * @param string $spaceId
     */
    public function setSpaceId($spaceId)
    {
        $this->_spaceId = $spaceId;
    }

    /**
     * Get the space ID
     *
     * @return string
     */
    public function getSpaceId()
    {
        return $this->_spaceId;
    }

    /**
     * Set the localized space name
     *
     * @param string $spaceName
     */
    public function setSpaceName($spaceName)
    {
        $this->_spaceName = $spaceName;
    }

    /**
     * Get the localized space name
     *
     * @return string
     */
    public function getSpaceName()
    {
        return $this->_spaceName;
    }

}
