<?php

namespace grn\space\data\bean;

use grn\space\common\data\bean\ComponentInspectionAbstract;
use grn\space\common\data\collection\SpaceFileCollection;
use grn\space\common\utility\ValidateUtility;

/**
 * * * * * * * * * * * *
 * Non-recommendation(非推奨)
 * A new program is not recommended to be made by using this class. （このクラスを使って新しいプログラムを作成することは勧めない）
 * * * * * * * * * * * *
 *
 * スレッドとコメントの混合した項目クラス
 * ひとつのスレッドとコメントの混合した項目を表すデータクラス
 *
 * @deprecated
 **/
class SynthesisThreadComment extends ComponentInspectionAbstract
{
    /**
     * Constant that shows that this object is thread.
     */
    const OBJECT_TYPE_THREAD = 1;

    /**
     * Constant that shows that this object is comment.
     */
    const OBJECT_TYPE_COMMENT = 2;


    /**
     * Using a constant array key.
     */
    const OBJECT_TYPE = "ocjectType";

    /**
     * Using a constant array key.
     */
    const COMMENT_ID = "comment_id";

    /**
     * Using a constant array key.
     */
    const COMMENT_NO = "col_comment_no";

    /**
     * Using a constant array key.
     */
    const TITLE = "col_title";

    /**
     * Using a constant array key.
     */
    const CONTENT = "col_content";

    /**
     * Using a constant array key.
     */
    const IS_RICH_TEXT = "col_is_rich_text";

    /**
     * Using a constant array key.
     */
    const IS_UNREAD = "isUnread";


    /**
     * It uses it to substitute the value.
     */
    const COMMENT_CONTENT = "comment_col_content";

    /**
     * It uses it to substitute the value.
     */
    const COMMENT_IS_RICH_TEXT = "comment_col_is_rich_text";

    /**
     * It uses it to substitute the value.
     */
    const COMMENT_IS_UNREAD = "comment_IsUnread";

    /**
     * It uses it to substitute the value.
     */
    const COMMENT_CREATOR_ID = "comment_col_creator";

    /**
     * Using a constant array key.
     */
    const COMMENT_CREATOR_NAME = "comment_col_creator_name";

    /**
     * It uses it to substitute the value.
     */
    const COMMENT_CREATE_TIME = "comment_col_create_timestamp";

    /**
     * It uses it to substitute the value.
     */
    const COMMENT_MODIFIER_ID = "comment_col_modifier";

    /**
     * Using a constant array key.
     */
    const COMMENT_MODIFIER_NAME = "comment_col_modifier_name";

    /**
     * It uses it to substitute the value.
     */
    const COMMENT_MODIFY_TIME = "comment_col_modify_timestamp";


    /**
     * コメントIdの値を保持する
     */
    private $_commentId;

    /**
     * コメントNoの値を保持する
     */
    private $_commentNo;

    /**
     * オブジェクトタイプ定数を保持する
     */
    private $_objectType;

    /**
     * タイトル名を保持する
     */
    private $_title;

    /**
     * 内容を保持する
     */
    private $_content;

    /**
     * 未読フラグ（対象ユーザー）を保持する
     */
    private $_isUnread;

    /**
     * スレッドが持つ添付ファイルの集合を保持する
     */
    private $_spaceFileCollection;

    /**
     * リッチテキストフラグ
     */
    private $_isRichText;

    /**
     * コンストラクタ
     * オブジェクト配列を引数で受け取った場合は、受け取った配列でオブジェクトを初期化する
     * 引数がnullの場合は各データクラスのデフォルト値で初期化する
     *
     * @param     array $dataArray initial data
     * @param     bool  $isInputCheck
     */
    public function __construct(
        array $dataArray = null,
        $isInputCheck = self::CHECK_INPUT
    ) {
        parent::__construct($dataArray, self::INSPECTION_INIT, $isInputCheck);

        if (is_null($dataArray)) {
            $this->setCommentId('');
            $this->setCommentNo('');
            $this->setObjectType(self::OBJECT_TYPE_THREAD);
            $this->setTitle('');
            $this->setContent('');
            $this->setRichText(false);
            $this->setUnread(true);
            $this->setSpaceFileCollection(new SpaceFileCollection());
        } else {
            $this->setCommentId((array_key_exists(self::COMMENT_ID, $dataArray))
                ? $dataArray[self::COMMENT_ID] : '');
            $this->setCommentNo((array_key_exists(self::COMMENT_NO, $dataArray))
                ? $dataArray[self::COMMENT_NO] : '');
            $this->setObjectType((array_key_exists(self::COMMENT_ID,
                $dataArray))
                ? ((ValidateUtility::isNull($dataArray[self::COMMENT_ID]))
                    ? self::OBJECT_TYPE_THREAD : self::OBJECT_TYPE_COMMENT)
                : self::OBJECT_TYPE_THREAD);
            $this->setTitle((array_key_exists(self::TITLE, $dataArray))
                ? $dataArray[self::TITLE] : '');
            $this->setContent((array_key_exists(self::CONTENT, $dataArray))
                ? $dataArray[self::CONTENT] : '');
            $this->setRichText((array_key_exists(self::IS_RICH_TEXT,
                $dataArray))
                ? ((ValidateUtility::isNull($dataArray[self::IS_RICH_TEXT])
                    || $dataArray[self::IS_RICH_TEXT] == 0) ? false : true)
                : false);
            $this->setUnread((array_key_exists(self::IS_UNREAD, $dataArray))
                ? ((ValidateUtility::isNull($dataArray[self::IS_UNREAD])
                    || $dataArray[self::IS_UNREAD] == 1) ? true : false)
                : true);
            $this->setSpaceFileCollection(new SpaceFileCollection());

            if (self::OBJECT_TYPE_COMMENT == $this->getObjectType()) {
                $this->setContent((array_key_exists(self::COMMENT_CONTENT,
                    $dataArray)) ? $dataArray[self::COMMENT_CONTENT] : '');
                $this->setRichText((array_key_exists(self::COMMENT_IS_RICH_TEXT,
                    $dataArray))
                    ? ((ValidateUtility::isNull($dataArray[self::COMMENT_IS_RICH_TEXT])
                        || $dataArray[self::COMMENT_IS_RICH_TEXT] == 0) ? false
                        : true) : false);
                $this->setUnread((array_key_exists(self::COMMENT_IS_UNREAD,
                    $dataArray))
                    ? ((ValidateUtility::isNull($dataArray[self::COMMENT_IS_UNREAD])
                        || $dataArray[self::COMMENT_IS_UNREAD] == 1) ? true
                        : false) : true);
                $this->setCreatorId((array_key_exists(self::COMMENT_CREATOR_ID,
                    $dataArray)) ? $dataArray[self::COMMENT_CREATOR_ID] : '');
                $this->setCreatorName((array_key_exists(self::COMMENT_CREATOR_NAME,
                    $dataArray)) ? $dataArray[self::COMMENT_CREATOR_NAME] : '');
                $this->setCreateTimestamp((array_key_exists(self::COMMENT_CREATE_TIME,
                    $dataArray)) ? $dataArray[self::COMMENT_CREATE_TIME] : '');
                $this->setModifierId((array_key_exists(self::COMMENT_MODIFIER_ID,
                    $dataArray)) ? $dataArray[self::COMMENT_MODIFIER_ID] : '');
                $this->setModifierName((array_key_exists(self::COMMENT_MODIFIER_NAME,
                    $dataArray)) ? $dataArray[self::COMMENT_MODIFIER_NAME]
                    : '');
                $this->setModifyTimestamp((array_key_exists(self::COMMENT_MODIFY_TIME,
                    $dataArray)) ? $dataArray[self::COMMENT_MODIFY_TIME] : '');
            }
        }
    }

    /**
     * オプジェクトデータを配列に変換する
     * 配列のキーはconst定数を使用
     *
     * @return    array         key:constant value:string or boolean or number
     */
    public function convertArray()
    {
        $result = parent::convertArray();

        $result[self::COMMENT_ID] = $this->getCommentId();
        $result[self::COMMENT_NO] = $this->getCommentNo();
        $result[self::OBJECT_TYPE] = $this->getObjectType();
        $result[self::TITLE] = $this->getTitle();
        $result[self::CONTENT] = $this->getContent();
        $result[self::IS_RICH_TEXT] = $this->isRichText();
        $result[self::IS_UNREAD] = $this->isUnread();

        return $result;
    }

    /**
     * コメントIDを取得
     *
     * @return    string        comment id
     */
    public function getCommentId()
    {
        return $this->_commentId;
    }

    /**
     * コメントIDを設定
     *
     * @param     string $value comment id
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not number.
     */
    public function setCommentId($value)
    {
        $this->isInputNumber($value);

        $this->_commentId = $value;
    }

    /**
     * コメントNOを取得
     *
     * @return    string        comment no
     */
    public function getCommentNo()
    {
        return $this->_commentNo;
    }

    /**
     * コメントNOを設定
     *
     * @param     string $value comment no
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not number.
     */
    public function setCommentNo($value)
    {
        $this->isInputNumber($value);

        $this->_commentNo = $value;
    }

    /**
     * オブジェクトタイプを取得
     *
     * @return    int           The constant has been defined in oneself.
     */
    public function getObjectType()
    {
        return $this->_objectType;
    }

    /**
     * オブジェクトタイプを設定
     *
     * @param     int $value The constant has been defined in oneself.
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException        It is not constant.
     * @throws    \grn\space\common\exception\GrnArgumentOutOfRangeException   It specified it excluding the constant.
     */
    public function setObjectType($value)
    {
        $this->isInputNumber($value, ValidateUtility::DISABLE_EMPTY);
        ValidateUtility::isInTheRange($value, self::OBJECT_TYPE_THREAD,
            self::OBJECT_TYPE_COMMENT, ValidateUtility::DISABLE_EMPTY);

        $this->_objectType = $value;
    }

    /**
     * スレッド名を取得
     *
     * @return    string        thread name
     */
    public function getTitle()
    {
        return $this->_title;
    }

    /**
     * スレッド名を設定
     *
     * @param     string $value thread name
     */
    public function setTitle($value)
    {
        $this->_title = $value;
    }

    /**
     * 内容を取得
     *
     * @return    string        content
     */
    public function getContent()
    {
        return $this->_content;
    }

    /**
     * 内容を設定
     *
     * @param     string $value content
     */
    public function setContent($value)
    {
        $this->_content = $value;
    }

    /**
     * リッチテキストフラグを取得
     *
     * @return    boolean       TRUE : rich text    FALSE : plain text
     */
    public function isRichText()
    {
        return $this->_isRichText;
    }

    /**
     * リッチテキストフラグを設定
     *
     * @param     boolean       TRUE : rich text    FALSE : plain text
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not boolean.
     */
    public function setRichText($value)
    {
        $this->isInputBoolean($value);

        $this->_isRichText = $value;
    }

    /**
     * 未読フラグを取得
     *
     * @return    boolean       TRUE : unread      FALSE : read
     */
    public function isUnread()
    {
        return $this->_isUnread;
    }

    /**
     * 未読フラグを設定
     *
     * @param     boolean       TRUE : unread      FALSE : read
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not boolean.
     */
    public function setUnread($value)
    {
        $this->isInputBoolean($value);

        $this->_isUnread = $value;
    }

    /**
     * スレッド添付ファイル(\GRN_Space_File)の配列を取得
     *
     * @return    array         {\GRN_Space_File->getOID(), \GRN_Space_File}
     */
    public function getGrnSpaceFileArray()
    {
        $resultArray = [];

        foreach ($this->getSpaceFileCollection() as $file) {
            /** @var \grn\space\common\data\bean\SpaceFile $file */
            $resultArray[$file->getId()] = $file->getGrnSpaceFileObject();
        }

        return $resultArray;
    }

    /**
     * スレッド添付ファイルコレクションオブジェクトを取得
     *
     * @return            SpaceFileCollection
     */
    public function getSpaceFileCollection()
    {
        return $this->_spaceFileCollection;
    }

    /**
     * スレッド添付ファイルコレクションオブジェクトを設定
     *
     * @param     SpaceFileCollection $value
     */
    public function setSpaceFileCollection(SpaceFileCollection $value)
    {
        $this->_spaceFileCollection = $value;
    }

    /**
     * Performing Validation is override
     *
     * @param     int $validType VALID_TYPE_CREATE, VALID_TYPE_MODIFY, VALID_TYPE_SELECT
     *
     * @return    boolean       TRUE : valid   FALSE: Invalid
     */
    protected function checkValidate($validType)
    {
        if (parent::checkValidate($validType) === false) {
            return false;
        }

        return true;
    }

}

