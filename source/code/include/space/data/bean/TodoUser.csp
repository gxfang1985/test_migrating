<?php

namespace grn\space\data\bean;

use grn\space\common\data\bean\SpaceMember;
use grn\space\common\exception\GrnInvalidArgumentException;
use grn\space\common\utility\ValidateUtility;

/**
 * TodoUserクラス
 * ひとつのTodoUserを表すデータクラス
 **/
class TodoUser extends SpaceMember
{
    /**
     * 表示順のデフォルト値
     */
    const DEFAULT_DISPALY_ORDER = 100;


    /**
     * Using a constant array key.
     */
    const TODO_ID = "col_todo";

    /**
     * Using a constant array key.
     */
    const DISPLAY_ORDER = "col_display_order";

    /**
     * Using a constant array key.
     */
    const IS_COMPLETE = "col_is_complete";

    /**
     * Using a constant flag initialize assignee's status.
     */
    const ASSIGNEES_STATUS_INITIALIZE_ON = 1;

    /**
     * TodoIDを保持する
     */
    private $_todoId;

    /**
     * 表示順
     */
    private $_displayOrder;

    /**
     * 完了フラグ
     */
    private $_isComplete;

    /**
     * The flag is about whether to initialize all of the To-Do assignees's completion status
     */
    private $_isInitialize;


    /**
     * @param array|null $dataArray
     * @param bool       $isInputCheck
     */
    public function __construct(
        array $dataArray = null,
        $isInputCheck = self::CHECK_INPUT
    ) {
        parent::__construct($dataArray, $isInputCheck);

        if (is_null($dataArray)) {
            $this->setTodoId('');
            $this->setDisplayOrder(self::DEFAULT_DISPALY_ORDER);
            $this->setComplete(false);
        } else {
            $this->setTodoId((array_key_exists(self::TODO_ID, $dataArray))
                ? $dataArray[self::TODO_ID] : '');
            $this->setDisplayOrder((array_key_exists(self::DISPLAY_ORDER,
                $dataArray)) ? $dataArray[self::DISPLAY_ORDER] : '');
            $this->setComplete((array_key_exists(self::IS_COMPLETE, $dataArray))
                ? (($dataArray[self::IS_COMPLETE] === null
                    || $dataArray[self::IS_COMPLETE] == 0) ? false : true)
                : false);
        }
    }


    /**
     * オプジェクトデータを配列に変換する
     * 配列のキーはconst定数を使用
     *
     * @return    array         key:constant value:string or boolean or number
     */
    public function convertArray()
    {
        $result = parent::convertArray();

        $result[self::TODO_ID] = $this->getTodoId();
        $result[self::DISPLAY_ORDER] = $this->getDisplayOrder();
        $result[self::IS_COMPLETE] = $this->isComplete();

        return $result;
    }


    /**
     * TodoIDを取得
     *
     * @return    string        todo id
     */
    public function getTodoId()
    {
        return $this->_todoId;
    }

    /**
     * TodoIDを設定
     *
     * @param     string $value todo id
     *
     * @throws    GrnInvalidArgumentException   It is not number.
     */
    public function setTodoId($value)
    {
        $this->isInputNumber($value);

        $this->_todoId = $value;
    }

    /**
     * 表示順を取得
     *
     * @return    string        display order
     */
    public function getDisplayOrder()
    {
        return $this->_displayOrder;
    }

    /**
     * 表示順を設定
     *
     * @param     string $value display order
     *
     * @throws    GrnInvalidArgumentException   It is not number.
     */
    public function setDisplayOrder($value)
    {
        $this->isInputNumber($value);

        $this->_displayOrder = $value;
    }

    /**
     * コンプリートフラグを取得
     *
     * @return    boolean       TRUE : complete    FALSE : incomplate
     */
    public function isComplete()
    {
        return $this->_isComplete;
    }

    /**
     * コンプリートフラグを設定
     *
     * @param     boolean       TRUE : complete    FALSE : incomplate
     *
     * @throws    GrnInvalidArgumentException    It is not boolean.
     */
    public function setComplete($value)
    {
        $this->isInputBoolean($value);

        $this->_isComplete = $value;
    }


    /**
     * Performing Validation is override
     *
     * @param     int $validType VALID_TYPE_CREATE, VALID_TYPE_MODIFY, VALID_TYPE_SELECT
     *
     * @return    boolean       TRUE : valid   FALSE: Invalid
     */
    protected function checkValidate($validType)
    {
        if (parent::checkValidate($validType) === false) {
            return false;
        }

        return true;
    }

    /**
     * Get whether to initialize all of the To-Do assignees's completion status
     *
     * @return    boolean       TRUE : initialize      FALSE : not initialize
     */
    public function isInitialize()
    {
        return $this->_isInitialize;
    }

    /**
     * Set whether to initialize all of the To-Do assignees's completion status
     *
     * @param     boolean       TRUE : initialize      FALSE : not initialize
     *
     * @throws    GrnInvalidArgumentException    It is not boolean.
     */
    public function setInitialize($value)
    {
        $this->isInputBoolean($value);
        $this->_isInitialize = $value;
    }
}
