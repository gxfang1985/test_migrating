<?php

namespace grn\space\data\bean;

use grn\space\common\data\bean\InspectionAbstract;
use grn\space\common\utility\ValidateUtility;

/**
 * スペースメモクラス
 * ひとつのスペースメモを表すデータクラス
 **/
class SpaceMemo extends InspectionAbstract
{
    /**
     * Using a constant array key.
     */
    const MEMO = "col_memo";

    /**
     * Using a constant array key.
     */
    const IS_RICH_TEXT = "col_is_rich_text";

    /**
     * Using a constant array key.
     */
    const IS_MEMO_OPEN = "isMemoOpen";


    /**
     * メモの値を保持する
     */
    private $_memo;

    /**
     * リッチテキストフラグの値を保持する
     */
    private $_isRichText;


    /**
     * メモオープンフラグ（対象ユーザー）の値を保持する
     * When acquiring it with the collection, it is always TRUE.
     */
    private $_isMemoOpen;


    /**
     * converted Memo content to display it
     *
     * This field is going to be set in SpaceMemoUtility
     *
     * @var string
     */
    private $_displayMemo;


    /**
     * コンストラクタ
     * オブジェクト配列を引数で受け取った場合は、受け取った配列でオブジェクトを初期化する
     * 引数がnullの場合は各データクラスのデフォルト値で初期化する
     *
     * @param     array $dataArray initial data
     * @param     bool  $isInputCheck
     */
    public function __construct(
        array $dataArray = null,
        $isInputCheck = self::CHECK_INPUT
    ) {
        parent::__construct($dataArray, self::INSPECTION_INIT, $isInputCheck);

        if (is_null($dataArray)) {
            $this->setMemo('');
            $this->setRichText(false);
            $this->setMemoOpen(true);
        } else {
            $this->setMemo((array_key_exists(self::MEMO, $dataArray))
                ? $dataArray[self::MEMO] : '');
            $this->setRichText((array_key_exists(self::IS_RICH_TEXT,
                $dataArray)) ? (($dataArray[self::IS_RICH_TEXT] === null
                                 || $dataArray[self::IS_RICH_TEXT] == 0) ? false
                : true) : false);
            $this->setMemoOpen((array_key_exists(self::IS_MEMO_OPEN,
                $dataArray)) ? (($dataArray[self::IS_MEMO_OPEN] === null
                                 || $dataArray[self::IS_MEMO_OPEN] == 1) ? true
                : false) : true);
        }
    }

    /**
     * オプジェクトデータを配列に変換する
     * 配列のキーはconst定数を使用
     *
     * @return    array         key:constant value:string or boolean or number
     */
    public function convertArray()
    {
        $result = parent::convertArray();

        $result[self::MEMO] = $this->getMemo();
        $result[self::IS_RICH_TEXT] = $this->isRichText();
        $result[self::IS_MEMO_OPEN] = $this->isMemoOpen();

        return $result;
    }

    /**
     * メモを取得
     *
     * @return    string        memo
     */
    public function getMemo()
    {
        return $this->_memo;
    }

    /**
     * メモを設定
     *
     * @param     string $value memo
     */
    public function setMemo($value)
    {
        $this->_memo = $value;
    }

    /**
     * リッチテキストフラグを取得
     *
     * @return    boolean       TRUE : rich text    FALSE : plain text
     */
    public function isRichText()
    {
        return $this->_isRichText;
    }

    /**
     * リッチテキストフラグを設定
     *
     * @param     boolean       TRUE : rich text    FALSE : plain text
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not boolean.
     */
    public function setRichText($value)
    {
        $this->isInputBoolean($value);

        $this->_isRichText = $value;
    }

    /**
     * メモ開閉フラグを取得
     *
     * @return    boolean       TRUE : memo open      FALSE : memo close
     */
    public function isMemoOpen()
    {
        return $this->_isMemoOpen;
    }

    /**
     * メモ開閉フラグを設定
     *
     * @param     boolean       TRUE : memo open    FALSE : memo close
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not boolean.
     */
    private function setMemoOpen($value)
    {
        $this->isInputBoolean($value);

        $this->_isMemoOpen = $value;
    }

    /**
     * Set converted Memo content
     *
     * @param string $value
     */
    public function setDisplayMemo($value)
    {
        $this->_displayMemo = $value;
    }

    /**
     * Get converted Memo content
     *
     * @return string
     */
    public function getDisplayMemo()
    {
        return $this->_displayMemo;
    }


    /**
     * Performing Validation is override
     *
     * @param     int $validType VALID_TYPE_CREATE, VALID_TYPE_MODIFY, VALID_TYPE_SELECT
     *
     * @return    boolean       TRUE : valid   FALSE: Invalid
     */
    protected function checkValidate($validType)
    {
        if (parent::checkValidate($validType) === false) {
            return false;
        }
        if (ValidateUtility::isNull($this->isRichText())) {
            return false;
        }

        return true;
    }

}

