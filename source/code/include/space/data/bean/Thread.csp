<?php

namespace grn\space\data\bean;

use grn\space\common\data\bean\ComponentInspectionAbstract;
use grn\space\common\data\collection\SpaceFileCollection;
use grn\space\common\utility\ValidateUtility;

/**
 * スレッドクラス
 * ひとつのスレッドを表すデータクラス
 **/
class Thread extends ComponentInspectionAbstract
{
    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const CATEGORY_ID = "col_category";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const TITLE = "col_title";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const CONTENT = "col_content";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const IS_RICH_TEXT = "col_is_rich_text";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const COMMENT_NO_ID = "col_comment_sequence_no";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const IS_SYSTEM_USE = "col_is_system_use";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const IS_UNREAD = "col_is_unread";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const IS_UNREAD_UNDER = "col_is_unread_under";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const IS_NOTIFICATION = "col_is_notification";

    const FOLDER_ID = "col_folder";

    /**
     * カテゴリIdの値を保持する
     */
    private $_categoryId;

    /**
     * タイトル名の値を保持する
     */
    private $_title;

    /**
     * 内容の値を保持する
     */
    private $_content;

    /**
     * コメントシーケンスNo管理Idを保持する
     */
    private $_commentSequenceNoId;

    /**
     * システム利用フラグを保持する
     */
    private $_isSystemUse;

    /**
     * 未読フラグ（対象ユーザー）を保持する
     */
    private $_isUnread;

    /**
     * スレッド配下(thread、thread-comment、todo-comment)の未読フラグ（対象ユーザー）を保持する
     * Only at searchThreadBySearchConditionWithAccessControl(). Another is TRUE.
     */
    private $_isUnreadUnder;

    /**
     * 通知対象フラグ（対象ユーザー）を保持する
     * //When acquiring it with the collection, it is always FALSE.
     */
    private $_isNotification;


    /**
     * スレッドが持つ添付ファイルの集合を保持する
     * //When acquiring it with the collection, the count is always 0.
     */
    private $_spaceFileCollection;

    private $_folderId;

    private $_isRichText;

    /**
     * コンストラクタ
     * オブジェクト配列を引数で受け取った場合は、受け取った配列でオブジェクトを初期化する
     * 引数がnullの場合は各データクラスのデフォルト値で初期化する
     *
     * @param     array $dataArray initial data
     * @param     bool  $isInputCheck
     */
    public function __construct(
        array $dataArray = null,
        $isInputCheck = self::CHECK_INPUT
    ) {
        parent::__construct($dataArray, self::INSPECTION_INIT, $isInputCheck);

        if (is_null($dataArray)) {
            $this->setCategoryId('');
            $this->setTitle('');
            $this->setContent('');
            $this->setRichText(false);
            $this->setCommentSequenceNoId('');
            $this->setSystemUse(false);
            $this->setUnread(true);
            $this->setUnreadUnder(true);
            $this->setNotification(false);
            $this->setSpaceFileCollection(new SpaceFileCollection());
            $this->setFolderId(-1);
        } else {
            $this->setCategoryId((array_key_exists(self::CATEGORY_ID,
                $dataArray)) ? $dataArray[self::CATEGORY_ID] : '');
            $this->setTitle((array_key_exists(self::TITLE, $dataArray))
                ? $dataArray[self::TITLE] : '');
            $this->setContent((array_key_exists(self::CONTENT, $dataArray))
                ? $dataArray[self::CONTENT] : '');
            $this->setRichText((array_key_exists(self::IS_RICH_TEXT,
                $dataArray)) ? (($dataArray[self::IS_RICH_TEXT] === null
                                 || $dataArray[self::IS_RICH_TEXT] == 0) ? false
                : true) : false);
            $this->setCommentSequenceNoId((array_key_exists(self::COMMENT_NO_ID,
                $dataArray)) ? $dataArray[self::COMMENT_NO_ID] : '');
            $this->setSystemUse((array_key_exists(self::IS_SYSTEM_USE,
                $dataArray)) ? (($dataArray[self::IS_SYSTEM_USE] === null
                                 || $dataArray[self::IS_SYSTEM_USE] == 0)
                ? false : true) : false);
            $this->setUnread((array_key_exists(self::IS_UNREAD, $dataArray))
                ? (($dataArray[self::IS_UNREAD] === null
                    || $dataArray[self::IS_UNREAD] == 1) ? true : false)
                : true);
            $this->setUnreadUnder((array_key_exists(self::IS_UNREAD_UNDER,
                $dataArray)) ? (($dataArray[self::IS_UNREAD_UNDER] === null
                                 || $dataArray[self::IS_UNREAD_UNDER] == 1)
                ? true : false) : true);
            $this->setNotification((array_key_exists(self::IS_NOTIFICATION,
                $dataArray)) ? false : true);
            $this->setSpaceFileCollection(new SpaceFileCollection());
            $this->setFolderId(cb_at($dataArray, self::FOLDER_ID, -1));
        }
    }

    /**
     * オプジェクトデータを配列に変換する
     * 配列のキーはconst定数を使用
     *
     * @return    array         key:constant value:string or boolean or number
     */
    public function convertArray()
    {
        $result = parent::convertArray();

        $result[self::CATEGORY_ID] = $this->getCategoryId();
        $result[self::TITLE] = $this->getTitle();
        $result[self::CONTENT] = $this->getContent();
        $result[self::IS_RICH_TEXT] = $this->isRichText();
        $result[self::COMMENT_NO_ID] = $this->getCommentSequenceNoId();
        $result[self::IS_SYSTEM_USE] = $this->isSystemUse();
        $result[self::IS_UNREAD] = $this->isUnread();
        $result[self::IS_UNREAD_UNDER] = $this->isUnreadUnder();
        $result[self::IS_NOTIFICATION] = $this->isNotification();
        $result[self::FOLDER_ID] = $this->getFolderId();

        return $result;
    }

    /**
     * カテゴリIDを取得
     *
     * @return    string        category id
     */
    public function getCategoryId()
    {
        return $this->_categoryId;
    }

    /**
     * カテゴリIDを設定
     *
     * @param     string $value category id
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not number.
     */
    public function setCategoryId($value)
    {
        $this->isInputNumber($value);
        $this->_categoryId = $value;
    }

    /**
     * スレッド名を取得
     *
     * @return    string        thread name
     */
    public function getTitle()
    {
        return $this->_title;
    }

    /**
     * スレッド名を設定
     *
     * @param     string $value thread name
     */
    public function setTitle($value)
    {
        $this->_title = $value;
    }

    /**
     * 内容を取得
     *
     * @return    string        content
     */
    public function getContent()
    {
        return $this->_content;
    }

    /**
     * 内容を設定
     *
     * @param     string $value content
     */
    public function setContent($value)
    {
        $this->_content = $value;
    }

    /**
     * リッチテキストフラグを取得
     *
     * @return    boolean       TRUE : rich text    FALSE : plain text
     */
    public function isRichText()
    {
        return $this->_isRichText;
    }

    /**
     * リッチテキストフラグを設定
     *
     * @param     boolean $value TRUE : rich text    FALSE : plain text
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not boolean.
     */
    public function setRichText($value)
    {
        $this->isInputBoolean($value);

        $this->_isRichText = $value;
    }

    /**
     * コメントシーケンスNoIdを取得
     *
     * @return    string        comment sequence no id
     */
    public function getCommentSequenceNoId()
    {
        return $this->_commentSequenceNoId;
    }

    /**
     * コメントシーケンスNoIdを設定
     *
     * @param     string $value comment sequence no id
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not number.
     */
    public function setCommentSequenceNoId($value)
    {
        $this->isInputNumber($value);

        $this->_commentSequenceNoId = $value;
    }

    /**
     * システムフラグを取得
     *
     * @return    boolean       TRUE : system thread    FALSE : user thread
     */
    public function isSystemUse()
    {
        return $this->_isSystemUse;
    }

    /**
     * システムフラグを設定
     *
     * @param     boolean $value TRUE : system thread    FALSE : user thread
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException        It is not boolean.
     */
    public function setSystemUse($value)
    {
        $this->isInputBoolean($value);

        $this->_isSystemUse = $value;
    }

    /**
     * 未読フラグを取得
     *
     * @return    boolean       TRUE : unread      FALSE : read
     */
    public function isUnread()
    {
        return $this->_isUnread;
    }

    /**
     * 未読フラグを設定
     *
     * @param     boolean $value TRUE : unread      FALSE : read
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException        It is not boolean.
     */
    public function setUnread($value)
    {
        $this->isInputBoolean($value);

        $this->_isUnread = $value;
    }

    /**
     * スレッド配下(thread、thread-comment、todo-comment)の未読フラグを取得
     *
     * @return    boolean       TRUE : unread   FALSE : read
     */
    public function isUnreadUnder()
    {
        return $this->_isUnreadUnder;
    }

    /**
     * スレッド配下(thread、thread-comment、todo-comment)の未読フラグを設定
     *
     * @param     boolean $value TRUE : unread   FALSE : read
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException   It is not boolean.
     */
    public function setUnreadUnder($value)
    {
        $this->isInputBoolean($value);

        $this->_isUnreadUnder = $value;
    }

    /**
     * 通知フラグを取得
     *
     * @return    boolean       TRUE : notification      FALSE : non notification
     */
    public function isNotification()
    {
        return $this->_isNotification;
    }

    /**
     * 通知フラグを設定
     *
     * @param     boolean $value TRUE : notification   FALSE : non notification
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException        It is not boolean.
     */
    public function setNotification($value)
    {
        $this->isInputBoolean($value);

        $this->_isNotification = $value;
    }

    /**
     * 添付ファイル(\GRN_Space_File)の配列を取得
     *
     * @return    array         {\GRN_Space_File->getOID(), \GRN_Space_File}
     */
    public function getGrnSpaceFileArray()
    {
        $resultArray = [];

        foreach ($this->getSpaceFileCollection() as $file) {
            /** @var \grn\space\common\data\bean\SpaceFile $file */
            $resultArray[$file->getId()] = $file->getGrnSpaceFileObject();
        }

        return $resultArray;
    }

    /**
     * 添付ファイルコレクションオブジェクトを取得
     *
     * @return    \grn\space\common\data\collection\SpaceFileCollection
     */
    public function getSpaceFileCollection()
    {
        return $this->_spaceFileCollection;
    }

    /**
     * 添付ファイルコレクションオブジェクトを設定
     *
     * @param     \grn\space\common\data\collection\SpaceFileCollection $value
     *
     */
    public function setSpaceFileCollection(SpaceFileCollection $value)
    {
        $this->_spaceFileCollection = $value;
    }

    /**
     * @return mixed
     */
    public function getFolderId()
    {
        return $this->_folderId;
    }

    /**
     * @param $value
     */
    public function setFolderId($value)
    {
        $this->isInputNumber($value);
        $this->_folderId = $value;
    }


    /**
     * Performing Validation is override
     *
     * @param     int $validType VALID_TYPE_CREATE, VALID_TYPE_MODIFY, VALID_TYPE_SELECT
     *
     * @return    boolean       TRUE : valid   FALSE: Invalid
     */
    protected function checkValidate($validType)
    {
        if (parent::checkValidate($validType) === false) {
            return false;
        }
        if (ValidateUtility::isNull($this->getCategoryId())) {
            return false;
        }
        if (ValidateUtility::isNull($this->getTitle())) {
            return false;
        }

        return true;
    }

}

