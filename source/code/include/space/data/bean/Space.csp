<?php

namespace grn\space\data\bean;

use grn\space\common\data\bean\ComponentInspectionAbstract;
use grn\space\common\data\bean\SpaceDatetime;

/**
 * スペースクラス
 * ひとつのスペースを表すデータクラス
 **/
class Space extends ComponentInspectionAbstract
{
    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const CATEGORY_ID = "col_category";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const CATEGORY_NAME = "categoryName";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const SPACE_CODE = "col_space_code";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const SPACE_NAME = "col_space_name";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const IS_BUILTIN_ICON = "col_is_builtin_icon";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const BUILTIN_ICON_ID = "col_builtin_icon";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const BUILTIN_ICON_FILE_NAME = "icon_file_name";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const DISPLAY_ICON_PATH = "displayIconPath";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const ORIGINAL_ICON_FILE_ID = "col_original_icon_file";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const COUNT_MENBERS = "countMembers";

    /**
     * Using a constant array key.
     */
    const COUNT_USERS = "countUsers";

    /**
     * Using a constant array key.
     */
    const COUNT_GROUPS = "countGroups";

    /**
     * Using a constant array key.
     */
    const COUNT_ROLES = "countRoles";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const IS_PUBLIC = "col_is_public";

    /**
     *Using a constant array key. 配列のキーに使う定数
     */
    const ALLOW_JOIN_LEAVE = "col_join_leave";

    const END_IS_DATE_TIME = 'col_end_is_datetime';

    const EXPIRATION_DATE_END_TIME = 'col_end_timestamp';

    const EXPIRATION_DATE_DISPLAY_END_TIME = 'expirationDateDisplayEndTime';
    /**
     *
     * Using a constant array key.
     *
     * @var string
     */
    const FILE_USAGE = "fileUsage";

    /**
     * @var string
     */
    const JOIN_LEAVE_SETTING_ON = "1";

    /**
     * @var string
     */
    const JOIN_LEAVE_SETTING_OFF = "0";

    /**
     * カテゴリーIDの値を保持する
     */
    private $_categoryId;

    /**
     * カテゴリー名称の値を保持する
     * It has the value when specifying it. (指定した場合は値を持つ)
     */
    private $_categoryName;

    /**
     * スペースコードの値を保持する
     */
    private $_spaceCode;

    /**
     * スペース名の値を保持する
     */
    private $_spaceName;

    /**
     * 組み込みアイコン使用フラグ
     */
    private $_isBuiltinIcon;

    /**
     * 組み込みアイコン使用時のアイコンID
     * When IS_BUILTIN_ICON is TRUE, it has the value.
     */
    private $_builtinIconId;

    /**
     * 組み込みアイコン使用時のアイコン名
     * When IS_BUILTIN_ICON is TRUE, it has the value.
     */
    private $_builtinIconFileName;

    /**
     * オリジナルアイコン使用時の保存先ファイルID
     * When IS_BUILTIN_ICON is FALSE, it has the value.
     */
    private $_originalIconFileId;

    /**
     * 表示時のアイコンPath
     * Path when A is display
     */
    private $_displayIconPath;

    /**
     * スペース参加者数
     */
    private $_countMembers;

    /**
     * Number of space member(user)
     */
    private $_countUsers;

    /**
     * Number of space member(group)
     */
    private $_countGroups;

    /**
     * Number of space member(role)
     */
    private $_countRoles;

    /**
     * スペース公開フラグ
     */
    private $_isPublic;

    /**
     * The amount of disk size consumed by this space.
     *
     * @var string
     */
    private $_fileUsage;

    /**
     * Whether allow user join or leave space by himself
     *
     * @var boolean
     */
    private $allowJoinLeave;

    private $isUnlimitedExpirationDate;
    private $isExpirationDateSpecifiedTime;

    private $expirationDate;

    /**
     * コンストラクタ
     * オブジェクト配列を引数で受け取った場合は、受け取った配列でオブジェクトを初期化する
     * 引数がnullの場合は各データクラスのデフォルト値で初期化する
     *
     * @param     array $dataArray initial data
     * @param bool      $isCheckInput
     */
    public function __construct(
        array $dataArray = null,
        $isCheckInput = self::CHECK_INPUT
    ) {
        parent::__construct($dataArray, self::INSPECTION_INIT, $isCheckInput);

        if (is_null($dataArray)) {
            $this->setCategoryId('');
            $this->setCategoryName('');
            $this->setSpaceCode('');
            $this->setSpaceName('');
            $this->setBuiltinIcon(true);
            $this->setBuiltinIconId('');
            $this->setBuiltinIconFileName('');
            $this->setOriginalIconFileId('');
            $this->setCountMembers('0');
            $this->setCountUsers('0');
            $this->setCountGroups('0');
            $this->setCountRoles('0');
            $this->setPublic(true);
            $this->setFileUsage('0');
            $this->setAllowJoinLeave(false);
            $this->setIsUnlimitedExpirationDate(true);
            $this->setIsExpirationDateSpecifiedTime(false);
            $this->setExpirationDateTime(new SpaceDatetime(null, false));
        } else {
            $this->setCategoryId((array_key_exists(self::CATEGORY_ID,
                $dataArray)) ? $dataArray[self::CATEGORY_ID] : '');
            $this->setCategoryName((array_key_exists(self::CATEGORY_NAME,
                $dataArray)) ? $dataArray[self::CATEGORY_NAME] : '');
            $this->setSpaceCode((array_key_exists(self::SPACE_CODE, $dataArray))
                ? $dataArray[self::SPACE_CODE] : '');
            $this->setSpaceName((array_key_exists(self::SPACE_NAME, $dataArray))
                ? $dataArray[self::SPACE_NAME] : '');
            $this->setBuiltinIcon((array_key_exists(self::IS_BUILTIN_ICON,
                $dataArray)) ? (($dataArray[self::IS_BUILTIN_ICON] === null
                                 || $dataArray[self::IS_BUILTIN_ICON] == 1)
                ? true : false) : true);
            $this->setBuiltinIconId((array_key_exists(self::BUILTIN_ICON_ID,
                $dataArray)) ? $dataArray[self::BUILTIN_ICON_ID] : '');
            $this->setBuiltinIconFileName((array_key_exists(self::BUILTIN_ICON_FILE_NAME,
                $dataArray)) ? $dataArray[self::BUILTIN_ICON_FILE_NAME] : '');
            $this->setOriginalIconFileId((array_key_exists(self::ORIGINAL_ICON_FILE_ID,
                $dataArray)) ? $dataArray[self::ORIGINAL_ICON_FILE_ID] : '');
            $this->setCountMembers((array_key_exists(self::COUNT_MENBERS,
                $dataArray)) ? $dataArray[self::COUNT_MENBERS] : '0');
            $this->setCountUsers(cb_at($dataArray, self::COUNT_USERS, '0'));
            $this->setCountGroups(cb_at($dataArray, self::COUNT_GROUPS, '0'));
            $this->setCountRoles(cb_at($dataArray, self::COUNT_ROLES, '0'));
            $this->setPublic((array_key_exists(self::IS_PUBLIC, $dataArray))
                ? (($dataArray[self::IS_PUBLIC] === null
                    || $dataArray[self::IS_PUBLIC] == 1) ? true : false)
                : true);
            $this->setFileUsage((array_key_exists(self::FILE_USAGE, $dataArray))
                ? $dataArray[self::FILE_USAGE] : '0');
            $this->setAllowJoinLeave((($dataArray[self::ALLOW_JOIN_LEAVE] ??
                                       self::JOIN_LEAVE_SETTING_OFF)
                                      === self::JOIN_LEAVE_SETTING_OFF) ? false
                : true);

            if (isset($dataArray[self::END_IS_DATE_TIME])) {
                $this->setIsExpirationDateSpecifiedTime($dataArray[self::END_IS_DATE_TIME]);
                $this->setIsUnlimitedExpirationDate(false);
            } else {
                $this->setIsExpirationDateSpecifiedTime(false);
                $this->setIsUnlimitedExpirationDate(true);
            }

            $this->setExpirationDateTime(new SpaceDatetime(null, false));
            $this->setExpirationDateTimestamp($dataArray[self::EXPIRATION_DATE_END_TIME]
                                              ?? 0);

        }
    }

    /**
     * オプジェクトデータを配列に変換する
     * 配列のキーはconst定数を使用
     *
     * @return    array         key:constant value:string or boolean or number
     */
    public function convertArray()
    {
        $result = parent::convertArray();

        $result[self::CATEGORY_ID] = $this->getCategoryId();
        $result[self::CATEGORY_NAME]
            = $this->getCategoryName();
        $result[self::SPACE_CODE] = $this->getSpaceCode();
        $result[self::SPACE_NAME] = $this->getSpaceName();
        $result[self::IS_BUILTIN_ICON]
            = $this->isBuiltinIcon();
        $result[self::BUILTIN_ICON_ID]
            = $this->getBuiltinIconId();
        $result[self::BUILTIN_ICON_FILE_NAME]
            = $this->getBuiltinIconFileName();
        $result[self::ORIGINAL_ICON_FILE_ID]
            = $this->getOriginalIconFileId();
        $result[self::DISPLAY_ICON_PATH]
            = $this->getDisplayIconPath();
        $result[self::COUNT_MENBERS] = $this->countMembers();
        $result[self::COUNT_USERS] = $this->countUsers();
        $result[self::COUNT_GROUPS] = $this->countGroups();
        $result[self::COUNT_ROLES] = $this->countRoles();
        $result[self::IS_PUBLIC] = $this->isPublic();
        $result[self::ALLOW_JOIN_LEAVE]
            = $this->isAllowJoinLeave();
        $result[self::END_IS_DATE_TIME]
            = $this->getIsUnlimitedExpirationDate();
        $result[self::EXPIRATION_DATE_END_TIME]
            = $this->getExpirationDateTimestamp();
        $result[self::EXPIRATION_DATE_DISPLAY_END_TIME]
            = $this->getDisplayExpirationDateTime();

        return $result;
    }

    /**
     * カテゴリIDを取得
     *
     * @return    string        category id
     */
    public function getCategoryId()
    {
        return $this->_categoryId;
    }

    /**
     * カテゴリIDを設定
     *
     * @param     string $value category id
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not number.
     */
    public function setCategoryId($value)
    {
        $this->isInputNumber($value);

        $this->_categoryId = $value;
    }

    /**
     * カテゴリ名を設定
     *
     * @param     string $value category name
     */
    public function setCategoryName($value)
    {
        $this->_categoryName = $value;
    }

    /**
     * カテゴリ名を取得
     *
     * @return    string        category name
     */
    public function getCategoryName()
    {
        return $this->_categoryName;
    }

    /**
     * スペースコードを取得
     *
     * @return    string        space code
     */
    public function getSpaceCode()
    {
        return $this->_spaceCode;
    }

    /**
     * スペースコードを設定
     *
     * @param     string $value space code
     */
    public function setSpaceCode($value)
    {
        $this->_spaceCode = $value;
    }

    /**
     * スペース名を取得
     *
     * @return    string        space name
     */
    public function getSpaceName()
    {
        return $this->_spaceName;
    }

    /**
     * スペース名を設定
     *
     * @param     string $value space name
     */
    public function setSpaceName($value)
    {
        $this->_spaceName = $value;
    }

    /**
     * 組み込みアイコンフラグを取得
     *
     * @return    boolean       TRUE : use builtin icon      FALSE : use original icon
     */
    public function isBuiltinIcon()
    {

        return $this->_isBuiltinIcon;
    }

    /**
     * 組み込みアイコンフラグを設定
     *
     * @param     boolean       TRUE : use builtin icon      FALSE : use original icon
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not boolean.
     */
    public function setBuiltinIcon($value)
    {
        $this->isInputBoolean($value);

        $this->_isBuiltinIcon = $value;
    }

    /**
     * 組み込みアイコンIDを取得
     *
     * @return    string        icon id
     */
    public function getBuiltinIconId()
    {
        return $this->_builtinIconId;
    }

    /**
     * 組み込みアイコンIDを設定
     *
     * @param     string $value icon id
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not number.
     */
    public function setBuiltinIconId($value)
    {
        $this->isInputNumber($value);

        $this->_builtinIconId = $value;
    }

    /**
     * 組み込みアイコンファイル名を取得
     *
     * @return    string        icon file name
     */
    public function getBuiltinIconFileName()
    {
        return $this->_builtinIconFileName;
    }

    /**
     * 組み込みアイコンファイル名を設定
     *
     * @param     string $value icon file name
     */
    public function setBuiltinIconFileName($value)
    {
        $this->_builtinIconFileName = $value;
    }

    /**
     * オリジナルアイコンファイルIDを取得
     *
     * @return    string        file sequence id
     */
    public function getOriginalIconFileId()
    {
        return $this->_originalIconFileId;
    }

    /**
     * オリジナルアイコンファイルIDを設定
     *
     * @param     string $value file sequence id
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not number.
     */
    public function setOriginalIconFileId($value)
    {
        $this->isInputNumber($value);

        $this->_originalIconFileId = $value;
    }

    /**
     * 表示時のアイコンPathの取得
     * Get of path when A is display
     *
     * @return    string        icon path string
     */
    public function getDisplayIconPath()
    {
        return $this->_displayIconPath;
    }

    /**
     * 表示時のアイコンPathの設定
     * Set of path when A is display
     *
     * @param     string $value icon path string
     */
    public function setDisplayIconPath($value)
    {
        $this->_displayIconPath = $value;
    }

    /**
     * メンバー数の取得
     *
     * @return    int        Number of members
     */
    public function countMembers()
    {
        return $this->_countMembers;
    }

    /**
     * メンバー数を設定
     *
     * @param     int       Number of members
     *
     * @throws    GrnInvalidArgumentException    It is not number.
     */
    public function setCountMembers($value)
    {
        $this->isInputNumber($value);

        $this->_countMembers = $value;
    }

    /**
     * @return    int        Number of user members
     */
    public function countUsers()
    {
        return $this->_countUsers;
    }

    /**
     * @param     int       Number of user members
     *
     * @throws    GrnInvalidArgumentException    It is not number.
     */
    public function setCountUsers($value)
    {
        $this->isInputNumber($value);

        $this->_countUsers = $value;
    }

    /**
     * @return    int        Number of group members
     */
    public function countGroups()
    {
        return $this->_countGroups;
    }

    /**
     * @param     int       Number of group members
     *
     * @throws    GrnInvalidArgumentException    It is not number.
     */
    public function setCountGroups($value)
    {
        $this->isInputNumber($value);

        $this->_countGroups = $value;
    }

    /**
     * @return    int        Number of role members
     */
    public function countRoles()
    {
        return $this->_countRoles;
    }

    /**
     * @param     int       Number of role members
     *
     * @throws    GrnInvalidArgumentException    It is not number.
     */
    public function setCountRoles($value)
    {
        $this->isInputNumber($value);

        $this->_countRoles = $value;
    }

    /**
     * 公開フラグを取得
     *
     * @return    boolean       TRUE : public      FALSE : private
     */
    public function isPublic()
    {
        return $this->_isPublic;
    }

    /**
     * 公開フラグを設定
     *
     * @param     boolean       TRUE : public      FALSE : private
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not boolean.
     */
    public function setPublic($value)
    {
        $this->isInputBoolean($value);

        $this->_isPublic = $value;
    }

    /**
     * Set the amount of disk size consumed by this space
     *
     * @param string $fileUsage
     */
    public function setFileUsage($fileUsage)
    {
        $this->_fileUsage = $fileUsage;
    }

    /**
     * Get the amount of disk size consumed by this space
     *
     * @return string
     */
    public function getFileUsage()
    {
        return $this->_fileUsage;
    }


    /**
     * 検査の実行(オーバーライド)
     * Performing Validation is override
     *
     * @param     int $validType VALID_TYPE_CREATE, VALID_TYPE_MODIFY, VALID_TYPE_SELECT
     *
     * @return    boolean       TRUE : valid   FALSE: Invalid
     */
    protected function checkValidate($validType)
    {
        if ( ! parent::checkValidate($validType)) {
            return false;
        }

        switch ($validType) {
            case self::VALID_TYPE_CREATE:
                if (strlen($this->getCreatorId()) == 0) {
                    return false;
                }
                if (strlen($this->getCreatorName()) == 0) {
                    return false;
                }
                break;

            case self::VALID_TYPE_MODIFY:
                if (strlen($this->getModifierId()) === 0
                    && strlen($this->getModifierName()) === 0
                ) {
                    return false;
                }
                break;

            default:
                return false;
        }

        return true;
    }

    /**
     * Get whether allow user join or leave space by himself
     *
     * @return bool
     */
    public function isAllowJoinLeave()
    {
        return $this->allowJoinLeave;
    }

    /**
     * Set setting whether allow user join or leave space by himself
     *
     * @param     boolean $value
     */
    public function setAllowJoinLeave($value)
    {
        $this->allowJoinLeave = $value;
    }

    /**
     * @return bool
     */
    public function getIsUnlimitedExpirationDate()
    {
        return $this->isUnlimitedExpirationDate;
    }

    /**
     * @param bool $value
     */
    public function setIsUnlimitedExpirationDate(bool $value)
    {
        $this->isUnlimitedExpirationDate = $value;
    }

    /**
     * @return bool
     */
    public function getIsExpirationDateSpecifiedTime()
    {
        return $this->isExpirationDateSpecifiedTime;
    }

    /**
     * @param bool $value
     */
    public function setIsExpirationDateSpecifiedTime(bool $value)
    {
        $this->isExpirationDateSpecifiedTime = $value;
    }

    /**
     * @param SpaceDatetime $value
     */
    public function setExpirationDateTime(SpaceDatetime $value)
    {
        $this->expirationDate = $value;
    }

    /**
     * @return SpaceDatetime
     */
    public function getExpirationDateTime()
    {
        return $this->expirationDate;
    }

    /**
     * @param int $value
     */
    public function setExpirationDateTimestamp(int $value)
    {
        $this->getExpirationDateTime()->setTimestamp($value);
    }

    /**
     * @return string timestamp
     */
    public function getExpirationDateTimestamp()
    {
        return $this->getExpirationDateTime()->getTimestamp();
    }

    /**
     * @return string
     */
    public function getDisplayExpirationDateTime()
    {
        return $this->getExpirationDateTime()->getDisplayDatetime();
    }

    /**
     * @return boolean
     */
    public function isExpired()
    {
        if ($this->getIsUnlimitedExpirationDate()) {
            return false;
        }

        return time() > $this->getExpirationDateTimestamp();
    }
}

