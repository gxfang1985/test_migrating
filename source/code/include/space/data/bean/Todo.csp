<?php

namespace grn\space\data\bean;

use grn\space\common\data\bean\InspectionAbstract;
use grn\space\common\data\collection\SpaceFileCollection;
use grn\space\common\utility\ValidateUtility;
use grn\space\data\bean\Thread;
use grn\space\data\bean\TodoUser;
use grn\space\data\collection\TodoUserCollection;

/**
 * Todoクラス
 * ひとつのTodoを表すデータクラス
 **/
class Todo extends InspectionAbstract
{
    /**
     * Using a constant array key.
     */
    const CATEGORY_ID = "col_category";

    /**
     * Using a constant array key.
     */
    const TITLE = "col_title";

    /**
     * Using a constant array key.
     */
    const START_TIMESTAMP = "col_start_timestamp";

    /**
     * Using a constant array key.
     */
    const DEADLINE_TIMESTAMP = "col_deadline_timestamp";

    /**
     * Using a constant array key.
     */
    const TIMEZONE = "col_timezone";

    /**
     * Using a constant array key.
     */
    const CONTENT = "col_content";

    /**
     * Using a constant array key.
     */
    const IS_RICH_TEXT = "col_is_rich_text";

    /**
     * Using a constant array key.
     */
    const IS_COMPLETE = "col_is_complete";


    /**
     * Using a constant array key.
     */
    const IS_UNREAD = "isUnread";

    /**
     * Using a constant array key.
     */
    const IS_NOTIFICATION = "isNotification";

    /**
     * Optional
     * Using a constant array key.
     */
    const THREAD_ID = "col_thread";

    /**
     * Optional
     * Using a constant array key.
     */
    const SPACE_ID = "col_space";

    /**
     * Optional
     * Using a constant array key.
     */
    const SPACE_NAME = "col_space_name";


    /**
     * カテゴリIDを保持する
     */
    private $_categoryId;

    /**
     * タイトル名の値を保持する
     */
    private $_title;

    /**
     * 内容を保持する
     */
    private $_content;

    /**
     * リッチテキストフラグを保持する
     */
    private $_isRichText;

    /**
     * 開始日時タイムスタンプを保持する
     */
    private $_startTimestamp;

    /**
     * 締切日時タイムスタンプを保持する
     */
    private $_deadlineTimestamp;

    /**
     * タイムゾーンを保持する
     */
    private $_timezone;

    /**
     * 未読フラグ（対象ユーザー）を保持する
     * When acquiring it with the collection, it is always TRUE.
     */
    private $_isUnread;

    /**
     * 通知設定（対象ユーザー）を保持する
     * When acquiring it with the collection, it is always FALSE.
     */
    private $_isNotification;

    /**
     * Todo担当者を保持する
     */
    private $_todoMemberCollection;

    /**
     * Todoが持つ添付ファイルの集合を保持する
     * //When acquiring it with the collection, the count is always 0.
     */
    private $_spaceFileCollection;

    /**
     * Optional
     * 親スレッドを保持する
     * When acquiring it with the collection, has the value in the object.
     */
    private $_parentThread;

    /**
     * Optional
     * 親スペースIDを保持する
     * When acquiring it with the my todo collection, has the value in the object.
     */
    private $_parentSpaceId;

    /**
     * Optional
     * 親スペース名を保持する
     * When acquiring it with the my todo collection, has the value in the object.
     */
    private $_parentSpaceName;

    private $_isComplete;

    /**
     * コンストラクタ
     * オブジェクト配列を引数で受け取った場合は、受け取った配列でオブジェクトを初期化する
     * 引数がnullの場合は各データクラスのデフォルト値で初期化する
     *
     * @param     array $dataArray initial data
     * @param     bool  $isInputCheck
     */
    public function __construct(
        array $dataArray = null,
        $isInputCheck = self::CHECK_INPUT
    ) {
        parent::__construct($dataArray, self::INSPECTION_INIT, $isInputCheck);

        if (is_null($dataArray)) {
            $this->setCategoryId('');
            $this->setStartTimestamp('');
            $this->setDeadlineTimestamp('');
            $this->setTimezone('');
            $this->setTitle('');
            $this->setContent('');
            $this->setRichText(false);
            $this->setComplete(false);
            $this->setUnread(true);
            $this->setNotification(false);
            $this->setTodoUserCollection(new TodoUserCollection());
            $this->setSpaceFileCollection(new SpaceFileCollection());
            $this->setParentThread(new Thread(null, $isInputCheck));
            $this->setParentSpaceId('');
            $this->setParentSpaceName('');
        } else {
            $this->setCategoryId((array_key_exists(self::CATEGORY_ID,
                $dataArray)) ? $dataArray[self::CATEGORY_ID] : '');
            $this->setStartTimestamp((array_key_exists(self::START_TIMESTAMP,
                $dataArray)) ? $dataArray[self::START_TIMESTAMP] : '');
            $this->setDeadlineTimestamp((array_key_exists(self::DEADLINE_TIMESTAMP,
                $dataArray)) ? $dataArray[self::DEADLINE_TIMESTAMP] : '');
            $this->setTimezone((array_key_exists(self::TIMEZONE, $dataArray))
                ? $dataArray[self::TIMEZONE] : '');
            $this->setTitle((array_key_exists(self::TITLE, $dataArray))
                ? $dataArray[self::TITLE] : '');
            $this->setContent((array_key_exists(self::CONTENT, $dataArray))
                ? $dataArray[self::CONTENT] : '');
            $this->setRichText((array_key_exists(self::IS_RICH_TEXT,
                $dataArray)) ? (($dataArray[self::IS_RICH_TEXT] === null
                                 || $dataArray[self::IS_RICH_TEXT] == 0) ? false
                : true) : false);
            $this->setComplete((array_key_exists(self::IS_COMPLETE, $dataArray))
                ? (($dataArray[self::IS_COMPLETE] === null
                    || $dataArray[self::IS_COMPLETE] == 0) ? false : true)
                : false);
            $this->setUnread((array_key_exists(self::IS_UNREAD, $dataArray))
                ? (($dataArray[self::IS_UNREAD] === null
                    || $dataArray[self::IS_UNREAD] == 1) ? true : false)
                : true);
            $this->setNotification((array_key_exists(self::IS_NOTIFICATION,
                $dataArray)) ? false : true);
            $this->setTodoUserCollection(new TodoUserCollection());
            $this->setSpaceFileCollection(new SpaceFileCollection());
            $thread = new Thread(null, $isInputCheck);
            $thread->setId((array_key_exists(self::THREAD_ID, $dataArray))
                ? $dataArray[self::THREAD_ID] : '');
            $this->setParentThread($thread);
            $this->setParentSpaceId((array_key_exists(self::SPACE_ID,
                $dataArray)) ? $dataArray[self::SPACE_ID] : '');
            $this->setParentSpaceName((array_key_exists(self::SPACE_NAME,
                $dataArray)) ? $dataArray[self::SPACE_NAME] : '');
        }
    }

    /**
     * オプジェクトデータを配列に変換する
     * 配列のキーはconst定数を使用
     *
     * @return    array         key:constant value:string or boolean or number
     */
    public function convertArray()
    {
        $result = parent::convertArray();

        $result[self::CATEGORY_ID] = $this->getCategoryId();
        $result[self::START_TIMESTAMP] = $this->getStartTimestamp();
        $result[self::DEADLINE_TIMESTAMP] = $this->getDeadlineTimestamp();
        $result[self::TIMEZONE] = $this->getTimezone();
        $result[self::TITLE] = $this->getTitle();
        $result[self::CONTENT] = $this->getContent();
        $result[self::IS_RICH_TEXT] = $this->isRichText();
        $result[self::IS_COMPLETE] = $this->isComplete();
        $result[self::IS_UNREAD] = $this->isUnread();
        $result[self::IS_NOTIFICATION] = $this->isNotification();

        return $result;
    }

    /**
     * カテゴリIDを取得
     *
     * @return    string        category id
     */
    public function getCategoryId()
    {
        return $this->_categoryId;
    }

    /**
     * カテゴリIDを設定
     *
     * @param     string $value category id
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not number.
     */
    public function setCategoryId($value)
    {
        $this->isInputNumber($value);

        $this->_categoryId = $value;
    }

    /**
     * todo名を取得
     *
     * @return    string        todo name
     */
    public function getTitle()
    {
        return $this->_title;
    }

    /**
     * todo名を設定
     *
     * @param     string $value todo name
     */
    public function setTitle($value)
    {
        $this->_title = $value;
    }

    /**
     * 内容を取得
     *
     * @return    string        content
     */
    public function getContent()
    {
        return $this->_content;
    }

    /**
     * 内容を設定
     *
     * @param     string $value content
     */
    public function setContent($value)
    {
        $this->_content = $value;
    }

    /**
     * リッチテキストフラグを取得
     *
     * @return    boolean       TRUE : rich text    FALSE : plain text
     */
    public function isRichText()
    {
        return $this->_isRichText;
    }

    /**
     * リッチテキストフラグを設定
     *
     * @param     boolean       TRUE : rich text    FALSE : plain text
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not boolean.
     */
    public function setRichText($value)
    {
        $this->isInputBoolean($value);

        $this->_isRichText = $value;
    }

    /**
     * コンプリートフラグを取得
     *
     * @return    boolean       TRUE : complete    FALSE : incomplete
     */
    public function isComplete()
    {
        return $this->_isComplete;
    }

    /**
     * コンプリートフラグを設定
     *
     * @param     boolean       TRUE : complete    FALSE : incomplete
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not boolean.
     */
    public function setComplete($value)
    {
        $this->isInputBoolean($value);

        $this->_isComplete = $value;
    }

    /**
     * 開始日時を取得
     *
     * @return    string        timestamp
     */
    public function getStartTimestamp()
    {
        return $this->_startTimestamp;
    }

    /**
     * 開始日時を設定
     *
     * @param     string $value timestamp
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not number.
     */
    public function setStartTimestamp($value)
    {
        $this->isInputNumber($value);

        $this->_startTimestamp = $value;
    }

    /**
     * 締切日時を取得
     *
     * @return    string        timestamp
     */
    public function getDeadlineTimestamp()
    {
        return $this->_deadlineTimestamp;
    }

    /**
     * 締切日時を設定
     *
     * @param     string $value timestamp
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not number.
     */
    public function setDeadlineTimestamp($value)
    {
        $this->isInputNumber($value);

        $this->_deadlineTimestamp = $value;
    }

    /**
     * タイムゾーンを取得
     *
     * @return    string        timestamp
     */
    public function getTimezone()
    {
        return $this->_timezone;
    }

    /**
     * タイムゾーンを設定
     *
     * @param     string $value timestamp
     */
    public function setTimezone($value)
    {
        $this->_timezone = $value;
    }


    /**
     * 未読フラグを取得
     *
     * @return    boolean       TRUE : unread      FALSE : read
     */
    public function isUnread()
    {
        return $this->_isUnread;
    }

    /**
     * 未読フラグを設定
     *
     * @param     boolean       TRUE : unread       FALSE : read
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not boolean.
     */
    public function setUnread($value)
    {
        $this->isInputBoolean($value);

        $this->_isUnread = $value;
    }

    /**
     * 通知フラグを取得
     *
     * @return    boolean       TRUE : notification      FALSE : non notification
     */
    public function isNotification()
    {
        return $this->_isNotification;
    }

    /**
     * 通知フラグを設定
     *
     * @param     boolean       TRUE : notification      FALSE : non notification
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not boolean.
     */
    public function setNotification($value)
    {
        $this->isInputBoolean($value);

        $this->_isNotification = $value;
    }


    /**
     * Todo担当者コレクションを取得
     *
     * @return            TodoUserCollection
     */
    public function getTodoUserCollection()
    {
        return $this->_todoMemberCollection;
    }

    /**
     * Todo担当者コレクションを設定
     *
     * @param             $value          TodoUserCollection
     */
    public function setTodoUserCollection($value)
    {
        $this->_todoMemberCollection = $value;
    }

    /**
     * Todo担当者を設定
     *
     * @param             $value          TodoUser
     */
    public function addTodoUser($value)
    {
        $this->getTodoUserCollection()->appendBean($value);
    }

    /**
     * 添付ファイル(\GRN_Space_File)の配列を取得
     *
     * @return    array         {\GRN_Space_File->getOID(), \GRN_Space_File}
     */
    public function getGrnSpaceFileArray()
    {
        $resultArray = [];

        foreach ($this->getSpaceFileCollection() as $file) {
            /** @var \grn\space\common\data\bean\SpaceFile $file */
            $resultArray[$file->getId()] = $file->getGrnSpaceFileObject();
        }

        return $resultArray;
    }

    /**
     * 添付ファイルコレクションオブジェクトを取得
     *
     * @return            SpaceFileCollection
     */
    public function getSpaceFileCollection()
    {
        return $this->_spaceFileCollection;
    }

    /**
     * 添付ファイルコレクションオブジェクトを設定
     *
     * @param             $value          SpaceFileCollection
     */
    public function setSpaceFileCollection($value)
    {
        $this->_spaceFileCollection = $value;
    }

    /**
     * Optional
     * 親スレッドを取得
     * When acquiring it with the collection, has the value in the object.
     *
     * @return            thread
     */
    public function getParentThread()
    {
        return $this->_parentThread;
    }

    /**
     * Optional
     * 親スレッドを設定
     *
     * @param Thread $value
     */
    public function setParentThread(Thread $value)
    {
        $this->_parentThread = $value;
    }

    /**
     * Optional
     * 親スレッドIDを取得
     * When acquiring it with the collection, has the value in the object.
     *
     * @return    string        thread sequence id
     */
    public function getParentThreadId()
    {
        return $this->getParentThread()->getId();
    }

    /**
     * Optional
     * 親スレッドタイトルを取得
     * When acquiring it with the collection, has the value in the object.
     *
     * @return    string        thread title
     */
    public function getParentThreadTitle()
    {
        return $this->getParentThread()->getTitle();
    }

    /**
     * Optional
     * 親スペースIDを取得
     * When acquiring it with the my todo collection, has the value in the object.
     *
     * @param     string $value space id
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException   It is not number.
     */
    public function setParentSpaceId($value)
    {
        $this->isInputNumber($value);

        $this->_parentSpaceId = $value;
    }

    /**
     * Optional
     * 親スペースIDを取得
     * When acquiring it with the my todo collection, has the value in the object.
     *
     * @return    string        thread sequence id
     */
    public function getParentSpaceId()
    {
        return $this->_parentSpaceId;
    }

    /**
     * Optional
     * 親スペース名を取得
     * When acquiring it with the my todo collection, has the value in the object.
     *
     * @param     string $value space name
     */
    public function setParentSpaceName($value)
    {
        $this->_parentSpaceName = $value;
    }

    /**
     * Optional
     * 親スペース名を取得
     * When acquiring it with the my todo collection, has the value in the object.
     *
     * @return    string    space name
     */
    public function getParentSpaceName()
    {
        return $this->_parentSpaceName;
    }


    /**
     * 検査の実行(オーバーライド)
     * Performing Validation is override
     *
     * @param     int $validType VALID_TYPE_CREATE, VALID_TYPE_MODIFY, VALID_TYPE_SELECT
     *
     * @return    boolean       TRUE : valid   FALSE: Invalid
     */
    protected function checkValidate($validType)
    {
        if (parent::checkValidate($validType) === false) {
            return false;
        }
        if (ValidateUtility::isNull($this->getCategoryId())) {
            return false;
        }
        if (ValidateUtility::isNull($this->getTitle())) {
            return false;
        }
        if (ValidateUtility::isNull($this->getTimezone())) {
            return false;
        }

        return true;
    }
}

