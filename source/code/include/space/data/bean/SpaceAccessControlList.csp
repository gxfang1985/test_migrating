<?php

namespace grn\space\data\bean;

use grn\space\common\data\bean\AccessControlList;
use grn\space\common\utility\ValidateUtility;

/**
 * スペースアクセスコントロールリストクラス
 * ひとつのスペースアクセスコントロールリストを表すデータクラス
 **/
class SpaceAccessControlList extends AccessControlList
{
    /**
     * 許可の対象がレコードに存在する
     */
    const GRANT = true;

    /**
     * 制限の対象がレコードに存在する
     */
    const REVOKE = false;


    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const SPACE_ID = "col_space";

    /**
     * Using a constant array key. 配列のキーに使う定数
     */
    const IS_GRANT = "col_is_grant";


    /**
     * スペースIdの値を保持する
     */
    private $_spaceId;

    /**
     * グラントフラグの値を保持する
     */
    private $_isGrant;


    /**
     * コンストラクタ
     * オブジェクト配列を引数で受け取った場合は、受け取った配列でオブジェクトを初期化する
     * 引数がnullの場合は各データクラスのデフォルト値で初期化する
     *
     * @param     array $dataArray initial data
     * @param     bool  $isInputCheck
     */
    public function __construct(
        array $dataArray = null,
        $isInputCheck = self::CHECK_INPUT
    ) {
        parent::__construct($dataArray, $isInputCheck);

        if (is_null($dataArray)) {
            $this->setSpaceId('');
            $this->setGrant(self::REVOKE);
        } else {
            $this->setSpaceId((array_key_exists(self::SPACE_ID, $dataArray))
                ? $dataArray[self::SPACE_ID] : '');
            $this->setGrant((array_key_exists(self::IS_GRANT, $dataArray))
                ? (($dataArray[self::IS_GRANT] === null
                    || $dataArray[self::IS_GRANT] == 0) ? self::REVOKE
                    : self::GRANT) : self::REVOKE);
        }
    }

    /**
     * オプジェクトデータを配列に変換する
     * 配列のキーはconst定数を使用
     *
     * @return    array         key:constant value:string or boolean or number
     */
    public function convertArray()
    {
        $result = parent::convertArray();

        $result[self::SPACE_ID] = $this->getSpaceId();
        $result[self::IS_GRANT] = $this->isGrant();

        return $result;
    }

    /**
     * スペースIDを取得
     *
     * @return    string        space id
     */
    public function getSpaceId()
    {
        return $this->_spaceId;
    }

    /**
     * スペースIDを設定
     *
     * @param     string $value space id
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException   It is not number.
     */
    public function setSpaceId($value)
    {
        $this->isInputNumber($value);
        $this->_spaceId = $value;
    }

    /**
     * アクセスコントロールリストIDを取得
     *
     * @return    string        acl id
     */
    public function getAclId()
    {
        return $this->getId();
    }

    /**
     * アクセスコントロールリストIDを設定
     *
     * @param     string $value acl id
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException   It is not number.
     */
    public function setAclId($value)
    {
        $this->setId($value);
    }

    /**
     * グラントフラグを取得
     *
     * @return    boolean       TRUE : grant    FALSE : revoke
     */
    public function isGrant()
    {
        return $this->_isGrant;
    }

    /**
     * グラントフラグを設定
     *
     * @param     boolean       TRUE : grant    FALSE : revoke
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException   It is not boolean.
     */
    public function setGrant($value)
    {
        $this->isInputBoolean($value);
        $this->_isGrant = $value;
    }


    /**
     * 検査の実行(オーバーライド)
     * Performing Validation is override
     *
     * @param     int $validType VALID_TYPE_CREATE, VALID_TYPE_MODIFY, VALID_TYPE_SELECT
     *
     * @return    boolean       TRUE : valid   FALSE: Invalid
     */
    protected function checkValidate($validType)
    {
        if (parent::checkValidate($validType) === false) {
            return false;
        }

        switch ($validType) {
            case self::VALID_TYPE_CREATE:
            case self::VALID_TYPE_MODIFY:
                if (ValidateUtility::isNull($this->getSpaceId())) {
                    return false;
                }
                break;
        }

        return true;
    }

}

