<?php

namespace grn\space\data\condition;

use grn\space\common\data\condition\ComponentInspectionSearchConditionAbstract;
use grn\space\common\utility\ValidateUtility;

/**
 * * * * * * * * * * * *
 * Non-recommendation(非推奨)
 * A new program is not recommended to be made by using this class. （このクラスを使って新しいプログラムを作成することは勧めない）
 * * * * * * * * * * * *
 *
 * スレッドとコメントとユーザー検索クラス
 * スレッドとコメントとユーザーの検索条件を表すデータクラス
 *
 * @deprecated
 **/
class SynthesisThreadCommentSearchCondition
    extends ComponentInspectionSearchConditionAbstract
{
    /**
     * 検索期間：全て
     */
    const PERIOD_NONE = 0;

    /**
     * 検索期間：過去１か月
     */
    const PERIOD_PAST_ONE_MONTHS = 1;

    /**
     * 検索期間：過去３か月
     */
    const PERIOD_PAST_THREE_MONTHS = 2;

    /**
     * 検索期間：過去６か月
     */
    const PERIOD_PAST_SIX_MONTHS = 3;

    /**
     * 検索期間：過去１年
     */
    const PERIOD_PAST_ONE_YEAR = 4;


    /**
     * 検索範囲：対象カテゴリだけ
     */
    const SEARCH_SCOPE_CATEGORY_TARGET_ONLY = 1;

    /**
     * 検索範囲：祖先を含める
     */
    const SEARCH_SCOPE_CATEGORY_ANCESTOR = 2;

    /**
     * 検索範囲：子孫を含める
     */
    const SEARCH_SCOPE_CATEGORY_DESCENDANT = 3;

    /**
     * 指定カテゴリ範囲内すべてを検索する
     */
    const SEARCH_ITEM_NONE = 0;

    /**
     * スレッド項目「タイトル名」で検索する
     */
    const SEARCH_ITEM_TITLE = 1;

    /**
     * スレッド項目「内容」で検索する
     */
    const SEARCH_ITEM_CONTENT = 2;

    /**
     * スレッド項目「作成者名」で検索する
     */
    const SEARCH_ITEM_THREAD_CREATOR_NAME = 4;

    /**
     * コメント項目「内容」で検索する
     */
    const SEARCH_ITEM_COMMENT_CONTENT = 8;


    /**
     * タイトルの昇順で並び替えする
     */
    const SORT_TITLE_ASC = 9;

    /**
     * タイトルの降順で並び替えする
     */
    const SORT_TITLE_DESC = 10;

    /**
     * コメント作成日時の昇順
     */
    const SORT_COMMENT_CREATE_TIME_ASC = 11;

    /**
     * コメント作成日時の降順
     */
    const SORT_COMMENT_CREATE_TIME_DESC = 12;


    /**
     * category sequence id
     * Indispensability
     */
    private $_searchCategoryId;

    /**
     * Indispensability
     */
    private $_searchScopeType;

    /**
     * 検索項目を表すビット値を保持する
     */
    private $_searchItemBit;          // Range of constant

    /**
     * 検索期間
     */
    private $_searchPeriod;             // Range of constant


    /**
     * コンストラクタ
     * 検索条件を初期化する
     */
    public function __construct()
    {
        parent::__construct();

        $this->setSearchCategoryId('');
        $this->setSearchScopeType(self::SEARCH_SCOPE_CATEGORY_TARGET_ONLY);
        $this->setSearchItemBit(self::SEARCH_ITEM_TITLE
                                | self::SEARCH_ITEM_CONTENT
                                | self::SEARCH_ITEM_THREAD_CREATOR_NAME
                                | self::SEARCH_ITEM_COMMENT_CONTENT);
        $this->setSearchPeriod(self::PERIOD_NONE);
    }


    /**
     * 検索対象カテゴリIDを取得
     *
     * @return    string        category sequence id
     */
    public function getSearchCategoryId()
    {
        return $this->_searchCategoryId;
    }

    /**
     * 検索対象カテゴリIDを設定
     *
     * @param     string $value category sequence id
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not number.
     */
    public function setSearchCategoryId($value)
    {
        ValidateUtility::isNumber($value);

        $this->_searchCategoryId = $value;
    }

    /**
     * 検索スコープタイプの取得
     *
     * @return    int           The constant has been defined in oneself.
     */
    public function getSearchScopeType()
    {
        return $this->_searchScopeType;
    }

    /**
     * 検索スコープタイプの設定
     *
     * @param     int $value The constant has been defined in oneself.
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException      It is not constant.
     * @throws    \grn\space\common\exception\GrnArgumentOutOfRangeException   It specified it excluding the constant.
     */
    public function setSearchScopeType($value)
    {
        ValidateUtility::isNumber($value, ValidateUtility::DISABLE_EMPTY);
        ValidateUtility::isInTheRange($value,
            self::SEARCH_SCOPE_CATEGORY_TARGET_ONLY,
            self::SEARCH_SCOPE_CATEGORY_DESCENDANT,
            ValidateUtility::DISABLE_EMPTY);

        $this->_searchScopeType = $value;
    }

    /**
     * 検索対象を取得
     *
     * @return    int        The constant has been defined in oneself.
     */
    public function getSearchItemBit()
    {
        return $this->_searchItemBit;
    }

    /**
     * 検索対象を設定
     *
     * @param     int $value The constant has been defined in oneself.
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException        It is not constant.
     * @throws    \grn\space\common\exception\GrnArgumentOutOfRangeException   It specified it excluding the constant.
     */
    public function setSearchItemBit($value)
    {
        ValidateUtility::isNumber($value, ValidateUtility::DISABLE_EMPTY);
        ValidateUtility::isInTheRange($value, self::SEARCH_ITEM_NONE,
            $this->getTotalSearchValue(), ValidateUtility::DISABLE_EMPTY);

        $this->_searchItemBit = $value;
    }

    /**
     * 検索期間の取得
     *
     * @return    bool        True:It distinguishes.  False:It doesn't distinguish.
     */
    public function getSearchPeriod()
    {
        return $this->_searchPeriod;
    }

    /**
     * 検索期間の設定
     *
     * @param     bool $value True:It distinguishes.  False:It doesn't distinguish.
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException        It is not constant.
     * @throws    \grn\space\common\exception\GrnArgumentOutOfRangeException   It specified it excluding the constant.
     */
    public function setSearchPeriod($value)
    {
        ValidateUtility::isNumber($value, ValidateUtility::DISABLE_EMPTY);
        ValidateUtility::isInTheRange($value, self::PERIOD_NONE,
            self::PERIOD_PAST_ONE_YEAR, ValidateUtility::DISABLE_EMPTY);

        $this->_searchPeriod = $value;
    }


    /**
     * ソート順の範囲チェック
     *
     * @param     string $value The constant has been defined in oneself.
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException        It is not constant.
     * @throws    \grn\space\common\exception\GrnArgumentOutOfRangeException   It specified it excluding the constant.
     */
    protected function checkOrderSortRange($value)
    {
        ValidateUtility::isNumber($value, ValidateUtility::DISABLE_EMPTY);
        ValidateUtility::isInTheRange($value, self::SORT_ID_ASC,
            self::SORT_COMMENT_CREATE_TIME_DESC,
            ValidateUtility::DISABLE_EMPTY);
    }

    /**
     * 対応可能な検索対象を値で取得
     *
     * @return    int        Total to be search values.
     */
    protected function getTotalSearchValue()
    {
        return self::SEARCH_ITEM_TITLE + self::SEARCH_ITEM_CONTENT
               + self::SEARCH_ITEM_THREAD_CREATOR_NAME
               + self::SEARCH_ITEM_COMMENT_CONTENT;
    }

    /**
     * Performing Validation is override
     *
     * @param     int $validType VALID_TYPE_CREATE, VALID_TYPE_MODIFY, VALID_TYPE_SELECT
     *
     * @return    boolean       TRUE : valid   FALSE: Invalid
     */
    protected function checkValidate($validType)
    {
        if (parent::checkValidate($validType) === false) {
            return false;
        }

        if ($validType === self::VALID_TYPE_SELECT) {
            if (ValidateUtility::isNull($this->getSearchCategoryId())) {
                return false;
            }

            if ($this->getSearchItemBit()
                !== SynthesisThreadCommentSearchCondition::SEARCH_ITEM_NONE
            ) {
                if (count($this->getSearchStringArray()) == 0) {
                    return false;
                }
            }
        }

        return true;
    }

}

