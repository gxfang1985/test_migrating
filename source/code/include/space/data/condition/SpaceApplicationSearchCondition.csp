<?php

namespace grn\space\data\condition;

use grn\space\common\data\condition\ApplicationSearchCondition;
use grn\space\common\utility\ValidateUtility;
use grn\space\data\bean\SpaceApplication;


/**
 * スペースで利用しているアプリケーション検索クラス
 * スペースで利用しているアプリケーションの検索条件を表すデータクラス
 **/
class SpaceApplicationSearchCondition extends ApplicationSearchCondition
{

    /**
     * Search by col_external_application_owner column
     *
     * @var integer
     */
    private $_searchExternalApplicationOwner;

    private $_searchApplicationId;

    /**
     * コンストラクタ
     * 検索条件を初期化する
     */
    public function __construct()
    {
        parent::__construct();
        $this->setSearchExternalApplicationOwner(SpaceApplication::EXTERNAL_APPLICATION_OWNER_ANY);
    }


    /**
     * Performing Validation is override
     *
     * @param     int $validType VALID_TYPE_CREATE, VALID_TYPE_MODIFY, VALID_TYPE_SELECT
     *
     * @return    boolean       TRUE : valid   FALSE: Invalid
     */
    protected function checkValidate($validType)
    {
        parent::checkValidate($validType);
    }

    /**
     * Set condition to be used to col_external_application_owner
     *
     * @param integer $owner
     */
    public function setSearchExternalApplicationOwner($owner)
    {
        ValidateUtility::isNumber($owner, ValidateUtility::ENABLE_EMPTY,
            ValidateUtility::EXCEPTION_THROW);
        ValidateUtility::isInTheRange(
            $owner,
            SpaceApplication::EXTERNAL_APPLICATION_OWNER_NOT_OWNER,
            Spaceapplication::EXTERNAL_APPLICATION_OWNER_OWNER,
            ValidateUtility::ENABLE_EMPTY,
            ValidateUtility::EXCEPTION_THROW);

        $this->_searchExternalApplicationOwner = $owner;
    }

    /**
     * Set condition to be used to col_external_application_owner
     *
     * @return int
     */
    public function getSearchExternalApplicationOwner()
    {
        return $this->_searchExternalApplicationOwner;
    }

    /**
     * @param $applicationId
     *
     * @throws \grn\space\common\exception\GrnInvalidArgumentException
     */
    public function setSearchApplicationId($applicationId)
    {
        ValidateUtility::isNumber($applicationId, ValidateUtility::ENABLE_EMPTY,
            ValidateUtility::EXCEPTION_THROW);

        $this->_searchApplicationId = $applicationId;
    }

    /**
     * @return mixed
     */
    public function getSearchApplicationId()
    {
        return $this->_searchApplicationId;
    }
}

