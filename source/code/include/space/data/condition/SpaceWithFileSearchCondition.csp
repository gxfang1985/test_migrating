<?php

namespace grn\space\data\condition;

use grn\space\common\utility\ValidateUtility;

use grn\space\common\data\condition\BeanSearchConditionAbstract;

/**
 * Class SpaceWithFileSearchCondition
 */
class SpaceWithFileSearchCondition extends BeanSearchConditionAbstract
{
    /**
     * Flag to order spaces by thier file size
     * This constant is only for SpaceService::getSpaceListWithFileUsage.
     *
     * @var integer
     */
    const SORT_FILE_SIZE_ASC = "3";

    /**
     * Flag to order spaces by thier file size
     * This constant is only for SpaceService::getSpaceListWithFileUsage.
     *
     * @var integer
     */
    const SORT_FILE_SIZE_DESC = "4";
    const SEARCH_SPACE_NOT_EXPIRED = 1;
    const SEARCH_SPACE_EXPIRED = 2;

    /**
     *
     * @var string
     */
    private $_searchCategoryId;

    private $searchSpaceExpirationDate;

    /**
     *
     * @param string $categoryId
     */
    public function setSearchCategoryId($categoryId)
    {
        ValidateUtility::isNumber($categoryId);

        $this->_searchCategoryId = $categoryId;
    }

    /**
     * Set target category
     *
     * @return string
     */
    public function getSearchCategoryId()
    {
        return $this->_searchCategoryId;
    }

    /**
     * ソート順の範囲チェック
     *
     * @param     string $value The constant has been defined in oneself.
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException        It is not constant.
     * @throws    \grn\space\common\exception\GrnArgumentOutOfRangeException   It specified it excluding the constant.
     */
    protected function checkOrderSortRange($value)
    {
        ValidateUtility::isNumber($value, ValidateUtility::DISABLE_EMPTY);
        ValidateUtility::isInTheRange($value, self::SORT_ID_ASC,
            self::SORT_FILE_SIZE_DESC, ValidateUtility::DISABLE_EMPTY);
    }

    /**
     * 検査の実行
     * Performing Validation
     *
     * @param     int $validType VALID_TYPE_CREATE, VALID_TYPE_MODIFY, VALID_TYPE_SELECT
     *
     * @return    boolean       TRUE : valid   FALSE: Invalid
     */
    protected function checkValidate($validType)
    {
        if (parent::checkValidate($validType) === false) {
            return false;
        }

        if ($validType === self::VALID_TYPE_SELECT) {
            if (ValidateUtility::isNull($this->getSearchCategoryId())) {
                return false;
            }
        }

        return true;
    }

    /**
     * @param int $expiration_type
     */
    public function setSearchSpaceExpirationDate(int $expiration_type)
    {
        ValidateUtility::isIn($expiration_type,
            [self::SEARCH_SPACE_NOT_EXPIRED, self::SEARCH_SPACE_EXPIRED],
            ValidateUtility::DISABLE_EMPTY);

        $this->searchSpaceExpirationDate = $expiration_type;
    }

    /**
     * @return int
     */
    public function getSearchSpaceExpirationDate()
    {
        return $this->searchSpaceExpirationDate;
    }
}
