<?php

namespace grn\space\data\condition;

use grn\space\common\data\condition\ComponentInspectionSearchConditionAbstract;
use grn\space\common\utility\ValidateUtility;

/**
 * スレッド検索クラス
 * スレッドの検索条件を表すデータクラス
 **/
class ThreadSearchCondition extends ComponentInspectionSearchConditionAbstract
{
    /**
     * 検索範囲：対象カテゴリだけ
     */
    const SEARCH_SCOPE_CATEGORY_TARGET_ONLY = 1;

    /**
     * 検索範囲：祖先を含める
     */
    const SEARCH_SCOPE_CATEGORY_ANCESTOR = 2;

    /**
     * 検索範囲：子孫を含める
     */
    const SEARCH_SCOPE_CATEGORY_DESCENDANT = 3;


    /**
     * タイトルの昇順で並び替えする
     */
    const SORT_TITLE_ASC = 9;

    /**
     * タイトルの降順で並び替えする
     */
    const SORT_TITLE_DESC = 10;


    /**
     * 検索対象となるカテゴリID
     * category sequence id
     * Indispensability
     */
    private $_searchCategoryId;

    /**
     * 検索範囲
     * Indispensability
     */
    private $_searchScopeType;

    /**
     * folder id
     */
    private $_searchFolderId;

    /**
     * Include default thread or not
     */
    private $_isSystemUse = true;

    /**
     * コンストラクタ
     * 検索条件を初期化する
     */
    public function __construct()
    {
        parent::__construct();

        //Default search condition is all thread.
        $this->setSearchCategoryId('');
        $this->setSearchScopeType(self::SEARCH_SCOPE_CATEGORY_TARGET_ONLY);
    }


    /**
     * 検索対象カテゴリIDを取得
     *
     * @return    string        category sequence id
     */
    public function getSearchCategoryId()
    {
        return $this->_searchCategoryId;
    }

    /**
     * 検索対象カテゴリIDを設定
     *
     * @param     string $value category sequence id
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not number.
     */
    public function setSearchCategoryId($value)
    {
        ValidateUtility::isNumber($value);

        $this->_searchCategoryId = $value;
    }

    /**
     * 検索スコープタイプの取得
     *
     * @return    int           The constant has been defined in oneself.
     */
    public function getSearchScopeType()
    {
        return $this->_searchScopeType;
    }

    /**
     * 検索スコープタイプの設定
     *
     * @param     int $value The constant has been defined in oneself.
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException      It is not constant.
     * @throws    \grn\space\common\exception\GrnArgumentOutOfRangeException   It specified it excluding the constant.
     */
    public function setSearchScopeType($value)
    {
        ValidateUtility::isNumber($value, ValidateUtility::DISABLE_EMPTY);
        ValidateUtility::isInTheRange($value,
            self::SEARCH_SCOPE_CATEGORY_TARGET_ONLY,
            self::SEARCH_SCOPE_CATEGORY_DESCENDANT,
            ValidateUtility::DISABLE_EMPTY);

        $this->_searchScopeType = $value;
    }

    /**
     * ソート順の範囲チェック
     *
     * @param     string $value The constant has been defined in oneself.
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException        It is not constant.
     * @throws    \grn\space\common\exception\GrnArgumentOutOfRangeException   It specified it excluding the constant.
     */
    protected function checkOrderSortRange($value)
    {
        ValidateUtility::isNumber($value, ValidateUtility::DISABLE_EMPTY);
        ValidateUtility::isInTheRange($value, self::SORT_ID_ASC,
            self::SORT_TITLE_DESC, ValidateUtility::DISABLE_EMPTY);
    }

    /**
     * 検査の実行(オーバーライド)
     * Performing Validation is override
     *
     * @param     int $validType VALID_TYPE_CREATE, VALID_TYPE_MODIFY, VALID_TYPE_SELECT
     *
     * @return    boolean       TRUE : valid   FALSE: Invalid
     */
    protected function checkValidate($validType)
    {
        if (parent::checkValidate($validType) === false) {
            return false;
        }

        if ($validType === self::VALID_TYPE_SELECT) {
            if (ValidateUtility::isNull($this->getSearchCategoryId())) {
                return false;
            }
        }

        return true;
    }

    /**
     * @return mixed
     */
    public function getSearchFolderId()
    {
        return $this->_searchFolderId;
    }

    /**
     * @param mixed $searchFolderId
     */
    public function setSearchFolderId($searchFolderId)
    {
        $this->_searchFolderId = $searchFolderId;
    }

    /**
     * @return mixed
     */
    public function getIsSystemUse()
    {
        return $this->_isSystemUse;
    }

    /**
     * @param mixed $isSystemUse
     */
    public function setIsSystemUse($isSystemUse)
    {
        $this->_isSystemUse = $isSystemUse;
    }
}

