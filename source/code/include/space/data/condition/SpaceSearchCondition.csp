<?php

namespace grn\space\data\condition;

use grn\space\common\data\condition\ComponentInspectionSearchConditionAbstract;
use grn\space\common\utility\ValidateUtility;

/**
 * スペース検索クラス
 * スペースの検索条件を表すデータクラス
 **/
class SpaceSearchCondition extends ComponentInspectionSearchConditionAbstract
{
    /**
     * 範囲内すべてを検索する
     */
    const SEARCH_ITEM_NONE = 0;

    /**
     * スペース項目「スペース名」で検索する
     */
    const SEARCH_ITEM_SPACE_NAME = 1;


    /**
     * space sequence id array
     */
    private $_searchSpaceIdArray;

    /**
     * user sequence id
     */
    private $_searchParticipantUserId;

    /**
     * user sequence id
     */
    private $_searchParticipantGroupIds;

    /**
     * user sequence id
     */
    private $_searchParticipantRoleIds;

    /**
     * category sequence id
     * Indispensability
     */
    private $_searchCategoryId;

    /**
     * 検索項目を表すビット値を保持する
     */
    private $_searchItemBit;          // Range of constant

    /**
     * 全件数を取得するかどうか
     */
    private $_useCalcFoundRows;

    /**
     * exclude space id
     */
    private $_searchExcludeSpaceIdArray;

    const SEARCH_SPACE_NOT_EXPIRED = 1;
    const SEARCH_SPACE_EXPIRED = 2;
    private $searchSpaceExpirationDate;
    private $searchExpirationDateBeforeSpecifiedTime;
    private $searchUnmodifiedSpace;

    /**
     * コンストラクタ
     * 検索条件を初期化する
     */
    public function __construct()
    {
        parent::__construct();

        //Default search condition is all space.
        $this->setSearchCategoryId('');
        $this->setSearchSpaceIdArray([]);
        $this->setSearchParticipantUserId('');
        $this->setSearchParticipantGroupIds([]);
        $this->setSearchParticipantRoleIds([]);
        $this->setSearchItemBit(self::SEARCH_ITEM_NONE);
        $this->setCalcFoundRows(true);
        $this->setSearchExcludeSpaceIdArray([]);
    }

    /**
     * @param $val
     */
    public function setCalcFoundRows($val)
    {
        $this->_useCalcFoundRows = $val;
    }

    /**
     * @return mixed
     */
    public function isCalcFoundRows()
    {
        return $this->_useCalcFoundRows;
    }

    /**
     * 検索対象Space IDの配列を取得
     *
     * @return    array        space sequence id array
     */
    public function getSearchSpaceIdArray()
    {
        return $this->_searchSpaceIdArray;
    }

    /**
     * 検索対象Space ID配列を設定
     *
     * @param     array $value space sequence id array
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not number.
     */
    public function setSearchSpaceIdArray(array $value)
    {
        $this->_searchSpaceIdArray = [];

        foreach ($value as $spaceId) {
            $this->addSearchSpaceId($spaceId);
        }
    }

    /**
     * 検索対象Space IDを追加
     *
     * @param     string $value space sequence id
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not number.
     */
    public function addSearchSpaceId($value)
    {
        ValidateUtility::isNumber($value);

        $this->_searchSpaceIdArray[] = $value;
    }

    /**
     * 検索対象参加ユーザーIDを取得
     *
     * @return    string        user sequence id
     */
    public function getSearchParticipantUserId()
    {
        return $this->_searchParticipantUserId;
    }

    /**
     * 検索対象参加ユーザーIDを設定
     *
     * @param     string $value user sequence id
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not number.
     */
    public function setSearchParticipantUserId($value)
    {
        ValidateUtility::isNumber($value);

        $this->_searchParticipantUserId = $value;
    }

    /**
     * @return    array    group sequence ids
     */
    public function getSearchParticipantGroupIds()
    {
        return $this->_searchParticipantGroupIds;
    }

    /**
     * @param     array $value group sequence ids
     */
    public function setSearchParticipantGroupIds(array $value)
    {
        $this->_searchParticipantGroupIds = $value;
    }

    /**
     * @return    array    role sequence ids
     */
    public function getSearchParticipantRoleIds()
    {
        return $this->_searchParticipantRoleIds;
    }

    /**
     * @param     array $value role sequence ids
     */
    public function setSearchParticipantRoleIds(array $value)
    {
        $this->_searchParticipantRoleIds = $value;
    }

    /**
     * 検索対象カテゴリIDを取得
     *
     * @return    string        category sequence id
     */
    public function getSearchCategoryId()
    {
        return $this->_searchCategoryId;
    }

    /**
     * 検索対象カテゴリIDを設定
     *
     * @param     string $value category sequence id
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not number.
     */
    public function setSearchCategoryId($value)
    {
        ValidateUtility::isNumber($value);

        $this->_searchCategoryId = $value;
    }

    /**
     * 検索対象を取得
     *
     * @return    int        The constant has been defined in oneself.
     */
    public function getSearchItemBit()
    {
        return $this->_searchItemBit;
    }

    /**
     * 検索対象を設定
     *
     * @param     int $value The constant has been defined in oneself.
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException        It is not constant.
     * @throws    \grn\space\common\exception\GrnArgumentOutOfRangeException   It specified it excluding the constant.
     */
    public function setSearchItemBit($value)
    {
        ValidateUtility::isNumber($value, ValidateUtility::DISABLE_EMPTY);
        ValidateUtility::isInTheRange($value, self::SEARCH_ITEM_NONE,
            $this->getTotalSearchValue(), ValidateUtility::DISABLE_EMPTY);

        $this->_searchItemBit = $value;
    }

    /**
     * 対応可能な検索対象を値で取得
     *
     * @return    int        Total to be search values.
     */
    protected function getTotalSearchValue()
    {
        return self::SEARCH_ITEM_SPACE_NAME;
    }

    /**
     * Performing Validation is override
     *
     * @param     int $validType VALID_TYPE_CREATE, VALID_TYPE_MODIFY, VALID_TYPE_SELECT
     *
     * @return    boolean       TRUE : valid   FALSE: Invalid
     */
    protected function checkValidate($validType)
    {
        if (parent::checkValidate($validType) === false) {
            return false;
        }

        if ($validType === self::VALID_TYPE_SELECT) {
            if ($this->getSearchItemBit()
                !== SpaceSearchCondition::SEARCH_ITEM_NONE
            ) {
                if (count($this->getSearchStringArray()) == 0) {
                    return false;
                }
            }
        }

        return true;
    }

    /**
     * @return mixed
     */
    public function getSearchExcludeSpaceIdArray()
    {
        return $this->_searchExcludeSpaceIdArray;
    }

    /**
     * @param mixed $searchExcludeSpaceIdArray
     */
    public function setSearchExcludeSpaceIdArray($searchExcludeSpaceIdArray)
    {
        $this->_searchExcludeSpaceIdArray = [];

        foreach ($searchExcludeSpaceIdArray as $spaceId) {
            $this->addSearchExcludeSpaceId($spaceId);
        }
    }

    /**
     * @param $value
     *
     * @throws \grn\space\common\exception\GrnInvalidArgumentException
     */
    public function addSearchExcludeSpaceId($value)
    {
        ValidateUtility::isNumber($value);

        $this->_searchExcludeSpaceIdArray[] = $value;
    }

    /**
     * @param int $expiration_type
     */
    public function setSearchSpaceExpirationDate(int $expiration_type)
    {
        ValidateUtility::isIn($expiration_type,
            [self::SEARCH_SPACE_NOT_EXPIRED, self::SEARCH_SPACE_EXPIRED],
            ValidateUtility::DISABLE_EMPTY);

        $this->searchSpaceExpirationDate = $expiration_type;
    }

    /**
     * @return int
     */
    public function getSearchSpaceExpirationDate()
    {
        return $this->searchSpaceExpirationDate;
    }

    /**
     * @param int $time
     */
    public function setSearchExpirationDateBeforeSpecifiedTime(int $time)
    {
        ValidateUtility::isNumber($time);

        $this->searchExpirationDateBeforeSpecifiedTime = $time;
    }

    /**
     * @return int
     */
    public function getSearchExpirationDateBeforeSpecifiedTime()
    {
        return $this->searchExpirationDateBeforeSpecifiedTime;
    }

    /**
     * @param int $time
     */
    public function setSearchUnmodifiedSpace(int $time)
    {
        ValidateUtility::isNumber($time);

        $this->searchUnmodifiedSpace = $time;
    }

    /**
     * @return int
     */
    public function getSearchUnmodifiedSpace()
    {
        return $this->searchUnmodifiedSpace;
    }
}

