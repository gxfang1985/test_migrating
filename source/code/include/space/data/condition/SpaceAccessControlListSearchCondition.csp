<?php

namespace grn\space\data\condition;

use grn\space\common\data\condition\AuthoritySearchCondition;
use grn\space\common\utility\ValidateUtility;

/**
 * スペースアクセスコントロールリスト検索クラス
 * スペースアクセスコントロールリストの検索条件を表すクラス
 **/
class SpaceAccessControlListSearchCondition extends AuthoritySearchCondition
{
    /**
     * 検索対象となるスペースIDの配列
     * space sequence id array
     */
    private $_searchSpaceIdArray;

    /**
     * 検索するユーザーID
     */
    private $_searchUserId;


    /**
     * コンストラクタ
     * 検索条件を初期化する
     */
    public function __construct()
    {
        parent::__construct();

        $this->setSearchUserId('');
        $this->setSearchSpaceIdArray([]);
    }


    /**
     * 検索対象スペースIDの配列を取得
     *
     * @return    array        space sequence id array
     */
    public function getSearchSpaceIdArray()
    {
        return $this->_searchSpaceIdArray;
    }

    /**
     * 検索対象スペースID配列を設定
     *
     * @param     array $value space sequence id array
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not number.
     */
    public function setSearchSpaceIdArray(array $value)
    {
        $this->_searchSpaceIdArray = [];

        foreach ($value as $spaceId) {
            $this->addSearchSpaceId($spaceId);
        }
    }

    /**
     * 検索対象スペースIDを追加
     *
     * @param     string $value space sequence id
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not number.
     */
    public function addSearchSpaceId($value)
    {
        ValidateUtility::isNumber($value);

        $this->_searchSpaceIdArray[] = $value;
    }


    /**
     * 検索対象ユーザーIDを取得
     *
     * @return    string        user sequence id
     */
    public function getSearchUserId()
    {
        return $this->_searchUserId;
    }

    /**
     * 検索対象ユーザーIDを設定
     *
     * @param     string $value user sequence id
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException   It is not number.
     */
    public function setSearchUserId($value)
    {
        ValidateUtility::isNumber($value);

        $this->_searchUserId = $value;
    }

    /**
     * Performing Validation is override
     *
     * @param     int $validType VALID_TYPE_CREATE, VALID_TYPE_MODIFY, VALID_TYPE_SELECT
     *
     * @return    boolean       TRUE : valid   FALSE: Invalid
     */
    protected function checkValidate($validType)
    {
        if (parent::checkValidate($validType) === false) {
            return false;
        }

        if ($validType
            === SpaceAccessControlListSearchCondition::VALID_TYPE_SELECT
        ) {
            if (ValidateUtility::isNull($this->getSearchUserId())) {
                return false;
            }

            if (count($this->getSearchSpaceIdArray()) == 0) {
                return false;
            }
        }

        return true;
    }

}

