<?php

namespace grn\space\data\condition;

use grn\space\common\data\condition\BeanSearchConditionAbstract;
use grn\space\common\utility\ValidateUtility;

/**
 * Class SpaceUserSearchCondition
 */
class SpaceUserSearchCondition extends BeanSearchConditionAbstract
{
    /**
     * 検索の範囲内を全て取得
     */
    const SEARCH_ITEM_NONE = 0;

    /**
     * ユーザー項目「ユーザ名」で検索する
     */
    const SEARCH_ITEM_USER_NAME = 1;


    /**
     * スーペースユーザー表示順の昇順
     */
    const SORT_DISPLAY_ORDER_ASC = 3;

    /**
     * スーペースユーザー表示順の降順
     */
    const SORT_DISPLAY_ORDER_DESC = 4;


    const SORT_FIELD_USER_CANDIDATE = 5;

    /**
     * 検索するスペースID
     */
    private $_spaceId;

    /**
     * 検索する項目を表すビット値を保持する
     */
    private $_searchItemBit;          // Range of constant

    /**
     * Search user ids
     */
    private $_search_user_candidate = [];

    /**
     * @var bool
     */
    private $_is_search_users_only = false;

    /**
     * SpaceUserSearchCondition constructor.
     */
    public function __construct()
    {
        parent::__construct();

        $this->setSearchSpaceId('');
        $this->setSearchItemBit(self::SEARCH_ITEM_NONE);
        $this->setIsSearchUsersOnly(false);
    }

    /**
     * @param $value
     */
    public function setSearchSpaceId($value)
    {
        $this->_spaceId = $value;
    }

    /**
     * @return mixed
     */
    public function getSearchSpaceId()
    {
        return $this->_spaceId;
    }

    /**
     * 検索対象を取得
     *
     * @return    int        The constant has been defined in oneself.
     */
    public function getSearchItemBit()
    {
        return $this->_searchItemBit;
    }

    /**
     * 検索対象を設定
     *
     * @param     int $value The constant has been defined in oneself.
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException       It is not constant.
     * @throws    \grn\space\common\exception\GrnArgumentOutOfRangeException    It specified it excluding the constant.
     */
    public function setSearchItemBit($value)
    {
        ValidateUtility::isNumber($value);
        ValidateUtility::isInTheRange($value, self::SEARCH_ITEM_NONE,
            $this->getTotalSearchValue());

        $this->_searchItemBit = $value;
    }

    /**
     * Get search user ids
     */
    public function getSearchUserCandidate()
    {
        return $this->_search_user_candidate;
    }

    /**
     * @param     array $value Search user ids candidate
     */
    public function setSearchUserCandidate(array $value)
    {
        $this->_search_user_candidate = $value;
    }

    /**
     * @return bool
     */
    public function isSearchUsersOnly()
    {
        return $this->_is_search_users_only;
    }

    /**
     * @param bool $value
     */
    public function setIsSearchUsersOnly($value)
    {
        $this->_is_search_users_only = $value;
    }

    /**
     * ソート順の範囲チェック
     *
     * @param     string $value The constant has been defined in oneself.
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException        It is not constant.
     * @throws    \grn\space\common\exception\GrnArgumentOutOfRangeException   It specified it excluding the constant.
     */
    protected function checkOrderSortRange($value)
    {
        ValidateUtility::isNumber($value, ValidateUtility::DISABLE_EMPTY);
        ValidateUtility::isIn($value, [
            self::SORT_ID_ASC,
            self::SORT_ID_DESC,
            self::SORT_DISPLAY_ORDER_ASC,
            self::SORT_DISPLAY_ORDER_DESC,
            self::SORT_FIELD_USER_CANDIDATE
        ],
            ValidateUtility::DISABLE_EMPTY);
    }


    /**
     * 対応可能な検索対象を値で取得
     *
     * @return    int        Total to be search values.
     */
    protected function getTotalSearchValue()
    {
        return self::SEARCH_ITEM_USER_NAME;
    }


    /**
     * Performing Validation is override
     *
     * @param     int $validType VALID_TYPE_CREATE, VALID_TYPE_MODIFY, VALID_TYPE_SELECT
     *
     * @return    boolean       TRUE : valid   FALSE: Invalid
     */
    protected function checkValidate($validType)
    {
        if (parent::checkValidate($validType) === false) {
            return false;
        }

        if ($validType === self::VALID_TYPE_SELECT) {
            if (ValidateUtility::isNull($this->getSearchSpaceId())) {
                return false;
            }

            if ($this->getSearchItemBit() !== self::SEARCH_ITEM_NONE) {
                if (count($this->getSearchStringArray()) == 0) {
                    return false;
                }
            }
        }

        return true;
    }
}
