<?php

namespace grn\space\data\condition;

use grn\space\common\data\condition\InspectionSearchConditionAbstract;
use grn\space\common\utility\ValidateUtility;

/**
 * Todo検索クラス
 * Todoの検索条件を表すデータクラス
 **/
class TodoSearchCondition extends InspectionSearchConditionAbstract
{
    /**
     * 検索範囲：対象カテゴリだけ
     */
    const SEARCH_SCOPE_CATEGORY_TARGET_ONLY = 1;

    /**
     * 検索範囲：祖先を含める
     */
    const SEARCH_SCOPE_CATEGORY_ANCESTOR = 2;

    /**
     * 検索範囲：子孫を含める
     */
    const SEARCH_SCOPE_CATEGORY_DESCENDANT = 3;

    /**
     * 検索対象参加ユーザー：担当者なし
     */
    const SEARCH_PARTICIPANT_USER_NOUSER = 0;

    /**
     * 検索したいToDo状態：指定しない
     */
    const STATUS_NONE = 0;

    /**
     * 検索したいToDo状態：完了したTODO
     */
    const STATUS_COMPLETE = 1;

    /**
     * 検索したいToDo状態：未完了のTODO
     */
    const STATUS_INCOMPLETE = 2;

    /**
     * 検索したいToDo状態：検索対象ユーザーが完了したTODO
     *                     検索対象ユーザーが未指定の場合は無視します。
     */
    const STATUS_COMPLETE_PARTICIPANT_USER = 3;

    /**
     * 検索したいToDo状態：検索対象ユーザーが未完了のTODO
     *                     検索対象ユーザーが未指定の場合は無視します。
     */
    const STATUS_INCOMPLETE_PARTICIPANT_USER = 4;

    /**
     * 締切日時の昇順
     */
    const SORT_DEADLINE_TIMESTAMP_ASC = 7;

    /**
     * 締切日時の降順
     */
    const SORT_DEADLINE_TIMESTAMP_DESC = 8;


    /**
     * 検索対象となるカテゴリID
     * category sequence id
     * Indispensability
     */
    private $_searchCategoryId;

    /**
     * 検索範囲
     * Indispensability
     */
    private $_searchScopeType;

    /**
     * 検索起点となるスレッドID
     * thread sequence id
     */
    private $_searchTreadId;            // optional

    /**
     * 検索対象参加ユーザーID
     * user sequence id
     */
    private $_searchParticipantUserId;  // optional

    /**
     * 検索するToDo状態
     * user sequence id
     */
    private $_searchStatus;             // Range of constant


    /**
     * コンストラクタ
     * 検索条件を初期化する
     */
    public function __construct()
    {
        parent::__construct();

        //Default search condition is all thread.
        $this->setSearchCategoryId('');
        $this->setSearchScopeType(self::SEARCH_SCOPE_CATEGORY_TARGET_ONLY);
        $this->setSearchThreadId('');
        $this->setSearchParticipantUserId('');
        $this->setSearchStatus(self::STATUS_NONE);
    }


    /**
     * 検索対象カテゴリIDを取得
     *
     * @return    string        category sequence id
     */
    public function getSearchCategoryId()
    {
        return $this->_searchCategoryId;
    }

    /**
     * 検索対象カテゴリIDを設定
     *
     * @param     string $value category sequence id
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not number.
     */
    public function setSearchCategoryId($value)
    {
        ValidateUtility::isNumber($value);

        $this->_searchCategoryId = $value;
    }

    /**
     * 検索スコープタイプの取得
     *
     * @return    int           The constant has been defined in oneself.
     */
    public function getSearchScopeType()
    {
        return $this->_searchScopeType;
    }

    /**
     * 検索スコープタイプの設定
     *
     * @param     int $value The constant has been defined in oneself.
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException      It is not constant.
     * @throws    \grn\space\common\exception\GrnArgumentOutOfRangeException   It specified it excluding the constant.
     */
    public function setSearchScopeType($value)
    {
        ValidateUtility::isNumber($value, ValidateUtility::DISABLE_EMPTY);
        ValidateUtility::isInTheRange($value,
            self::SEARCH_SCOPE_CATEGORY_TARGET_ONLY,
            self::SEARCH_SCOPE_CATEGORY_DESCENDANT,
            ValidateUtility::DISABLE_EMPTY);

        $this->_searchScopeType = $value;
    }

    /**
     * 検索対象スレッドIDを取得
     *
     * @return    string        thread sequence id
     */
    public function getSearchThreadId()
    {
        return $this->_searchTreadId;
    }

    /**
     * 検索対象スレッドIDを設定
     *
     * @param     string $value thread sequence id
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not number.
     */
    public function setSearchThreadId($value)
    {
        ValidateUtility::isNumber($value);

        $this->_searchTreadId = $value;
    }

    /**
     * 検索対象参加ユーザーIDを取得
     *
     * @return    string        user sequence id
     */
    public function getSearchParticipantUserId()
    {
        return $this->_searchParticipantUserId;
    }

    /**
     * 検索対象参加ユーザーIDを設定
     *
     * @param     string $value user sequence id
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException    It is not number.
     */
    public function setSearchParticipantUserId($value)
    {
        ValidateUtility::isNumber($value);

        $this->_searchParticipantUserId = $value;
    }

    /**
     * 検索するToDo状態を取得
     *
     * @return    int        The constant has been defined in oneself.
     */
    public function getSearchStatus()
    {
        return $this->_searchStatus;
    }

    /**
     * 検索するToDo状態を設定
     *
     * @param     int $value The constant has been defined in oneself.
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException        It is not constant.
     * @throws    \grn\space\common\exception\GrnArgumentOutOfRangeException   It specified it excluding the constant.
     */
    public function setSearchStatus($value)
    {
        ValidateUtility::isNumber($value, ValidateUtility::DISABLE_EMPTY);
        ValidateUtility::isInTheRange($value, self::STATUS_NONE,
            self::STATUS_INCOMPLETE_PARTICIPANT_USER,
            ValidateUtility::DISABLE_EMPTY);

        $this->_searchStatus = $value;
    }


    /**
     * ソート順の範囲チェック
     *
     * @param     string $value The constant has been defined in oneself.
     *
     * @throws    \grn\space\common\exception\GrnInvalidArgumentException        It is not constant.
     * @throws    \grn\space\common\exception\GrnArgumentOutOfRangeException   It specified it excluding the constant.
     */
    protected function checkOrderSortRange($value)
    {
        ValidateUtility::isNumber($value, ValidateUtility::DISABLE_EMPTY);
        ValidateUtility::isInTheRange($value, self::SORT_ID_ASC,
            self::SORT_DEADLINE_TIMESTAMP_DESC, ValidateUtility::DISABLE_EMPTY);
    }

    /**
     * 検査の実行(オーバーライド)
     * Performing Validation is override
     *
     * @param     int $validType VALID_TYPE_CREATE, VALID_TYPE_MODIFY, VALID_TYPE_SELECT
     *
     * @return    boolean       TRUE : valid   FALSE: Invalid
     */
    protected function checkValidate($validType)
    {
        if (parent::checkValidate($validType) === false) {
            return false;
        }

        if ($validType === self::VALID_TYPE_SELECT) {
            if (ValidateUtility::isNull($this->getSearchCategoryId())) {
                return false;
            }
        }

        return true;
    }
}

