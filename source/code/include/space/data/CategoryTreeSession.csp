<?php

namespace grn\space\data;

use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\common\exception\GrnInvalidArgumentException;
use grn\space\common\data\collection\CategoryCollection;

/**
 * Class CategoryTreeSession
 *
 */
class CategoryTreeSession
{
    const CATEGORY_OPEN = true;
    const CATEGORY_CLOSE = false;

    const SESSION_SELECTED_NODE_ID = "selectedNodeId";
    const SESSION_NODE_STATUS = "nodeStatus";

    private $selectedNodeId;

    private $nodeStatus;

    /**
     * CategoryTreeSession constructor.
     */
    public function __construct()
    {
        $this->nodeStatus = [];
    }

    public function getSelectedNodeId()
    {
        return $this->selectedNodeId;
    }

    /**
     * @param $selectedNodeId
     */
    public function setSelectedNodeId($selectedNodeId)
    {
        $this->selectedNodeId = $selectedNodeId;
    }

    /**
     * @return array
     */
    public function getNodeStatus()
    {
        return $this->nodeStatus;
    }

    /**
     * @param $nodeStatus
     */
    public function setNodeStatus($nodeStatus)
    {
        $this->nodeStatus = $nodeStatus;
    }

    /**
     * @return array
     */
    public function getStoredCategoryIdArray()
    {
        return array_keys($this->nodeStatus);
    }

    /**
     * @param $categoryId
     *
     * @return mixed
     * @throws GrnInvalidArgumentException
     */
    public function isCategoryOpen($categoryId)
    {
        if ( ! array_key_exists($categoryId, $this->nodeStatus)) {
            throw new GrnInvalidArgumentException();
        }

        return $this->nodeStatus[$categoryId];
    }

    /**
     * @param $categoryId
     *
     * @return bool
     * @throws GrnInvalidArgumentException
     */
    public function expandCategory($categoryId)
    {
        if ( ! array_key_exists($categoryId, $this->nodeStatus)) {
            throw new GrnInvalidArgumentException();
        }

        return $this->nodeStatus[$categoryId] = self::CATEGORY_OPEN;
    }

    /**
     * @param $categoryId
     *
     * @return bool
     * @throws GrnInvalidArgumentException
     */
    public function collapseCategory($categoryId)
    {
        if ( ! array_key_exists($categoryId, $this->nodeStatus)) {
            throw new GrnInvalidArgumentException();
        }

        return $this->nodeStatus[$categoryId] = self::CATEGORY_CLOSE;
    }

    /**
     * Update itself
     *
     * @param CategoryCollection $categoryCollection
     * @param string             $categoryId
     */
    public function update(CategoryCollection $categoryCollection, $categoryId)
    {
        // Insert data into $sessionData if some Categories were created since the user had accessed last time.
        foreach ($categoryCollection->getIterator() as $eachCategory) {
            if ( ! array_key_exists($eachCategory->getId(),
                $this->nodeStatus)
            ) {
                $this->nodeStatus[$eachCategory->getId()]
                    = self::CATEGORY_CLOSE;
            }
        }

        // Open the categories from the parent category of the selected one to the root category.
        $selectedCategory = $this->findSpecificCategory($categoryCollection,
            $categoryId);
        if ( ! is_null($selectedCategory)) {
            for (
                $iterCategoryId = $selectedCategory->getParentCategoryId();
                ! empty($iterCategoryId);
                $iterCategoryId = $selectedCategory->getParentCategoryId()
            ) {
                $this->nodeStatus[$iterCategoryId] = self::CATEGORY_OPEN;
                $selectedCategory
                    = $this->findSpecificCategory($categoryCollection,
                    $iterCategoryId);
                assert('! is_null($selectedCategory)');
            }
        }
        // update the selected category data.
        $this->selectedNodeId = $categoryId;
    }

    /**
     * Return Category object whose ID is $categoryId
     *
     * @param CategoryCollection $categoryCollection
     * @param string             $categoryId
     *
     * @return \grn\space\common\data\bean\Category|null
     * @throws GrnDataNotFoundException
     */
    private function findSpecificCategory(
        CategoryCollection $categoryCollection,
        $categoryId
    ) {
        foreach ($categoryCollection->getIterator() as $category) {
            if ($category->getId() == $categoryId) {
                return $category;
            }
        }

        return null;
    }

    /**
     * @param $session
     *
     * @return CategoryTreeSession
     */
    static public function loadFromSession($session)
    {
        $result = new self();
        $selectedNodeId
            = $session->get(CategoryTreeSession::SESSION_SELECTED_NODE_ID);
        $nodeStatus
            = $session->get(CategoryTreeSession::SESSION_NODE_STATUS);

        if ( ! empty($nodeStatus)) {
            $result->setNodeStatus($nodeStatus);
        }

        $result->setSelectedNodeId($selectedNodeId);

        return $result;
    }

    /**
     * @param $session
     */
    public function saveToSession($session)
    {
        $session->set(CategoryTreeSession::SESSION_SELECTED_NODE_ID,
            $this->getSelectedNodeId());
        $session->set(CategoryTreeSession::SESSION_NODE_STATUS,
            $this->getNodeStatus());
    }

    /**
     * @param $session
     */
    public function clearSession($session)
    {
        $session->unset_by(CategoryTreeSession::SESSION_SELECTED_NODE_ID);
        $session->unset_by(CategoryTreeSession::SESSION_NODE_STATUS);
    }
}
