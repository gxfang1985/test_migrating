<?php

namespace grn\space\db;


use grn\space\data\bean\MemberOpenStatus;
use grn\space\data\condition\SpaceWithFileSearchCondition;
use grn\space\db\dao\SpaceLocalDAO;
use grn\space\data\bean\SpaceLocal;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\data\bean\SpaceMemoOpenStatus;
use grn\space\data\bean\SpaceMemo;
use grn\space\data\bean\SpaceUser;
use grn\space\data\bean\Space;
use grn\space\data\collection\SpaceCollection;
use grn\space\data\condition\SpaceSearchCondition;
use grn\space\data\condition\SpaceUserSearchCondition;
use grn\space\data\collection\SpaceUserCollection;
use grn\space\db\dao\SpaceMemoOpenStatusDAO;
use grn\space\db\dao\MemberOpenStatusDAO;
use grn\space\db\dao\SpaceMemoDAO;
use grn\space\db\dao\SpaceDAO;
use grn\space\db\dao\SpaceUserDAO;
use grn\space\db\dao\SpaceSequenceDAO;

/**
 * Class SpaceFacade
 */
class SpaceFacade
{
    /**
     * @param Space $space
     *
     * @return Space $space
     * @throws \grn\space\common\exception\GrnDatabaseException
     */
    public function insertSpace(Space $space)
    {
        $spaceDao = new SpaceDAO();

        return $spaceDao->insertSpace($space);
    }

    /**
     * next sequence id of space.
     *
     * @throws \grn\space\common\exception\GrnDatabaseException     Any error in the database.
     * @return int
     */
    public function getSpaceNextSequenceId()
    {
        $spaceSequenceDao = new SpaceSequenceDAO();

        return $spaceSequenceDao->getNextSequenceId();
    }

    /**
     * @param SpaceUserCollection $space_user_collection
     */
    public function insertSpaceUserCollection(
        SpaceUserCollection $space_user_collection
    ) {
        $spaceUserDao = new SpaceUserDAO();

        return $spaceUserDao->insertSpaceUserCollection($space_user_collection);
    }

    /**
     * Search for space user
     *
     * @param \grn\space\data\condition\SpaceUserSearchCondition $spaceUserSearchCondition
     * @param string                                             $operationUserId
     * @param array                                              $item_value
     *
     * @return SpaceUserCollection
     */
    public function searchSpaceUser(
        SpaceUserSearchCondition $spaceUserSearchCondition,
        $operationUserId,
        array $item_value
    ) {
        $spaceUserDao = new SpaceUserDAO();
        require_once("fw/i18n.csp");
        $i18n = \ CB_I18N::getInstance();
        $languageCode = $i18n->getCurrentLanguage();

        return $spaceUserDao->searchSpaceUser($spaceUserSearchCondition,
            $operationUserId, $item_value, $languageCode);
    }

    /**
     * Insert SpaceMemo
     *
     * @param \grn\space\data\bean\SpaceMemo $spaceMemo
     *
     * @return SpaceMemo
     */
    public function insertSpaceMemo(SpaceMemo $spaceMemo)
    {
        $spaceMemoDao = new SpaceMemoDAO();

        return $spaceMemoDao->insertSpaceMemo($spaceMemo);
    }

    /**
     * Get a specific Space
     *
     * @param string $spaceId
     * @param string $languageCode
     *
     * @return \grn\space\data\bean\Space
     * @throws GrnDataNotFoundException
     */
    public function getSpace($spaceId, $languageCode)
    {
        $spaceDao = new SpaceDAO();

        return $spaceDao->selectSpace($spaceId, $languageCode);
    }

    /**
     * Get a specific Space
     *
     * @param string $categoryId
     * @param string $languageCode
     *
     * @return \grn\space\data\bean\Space
     * @throws GrnDataNotFoundException
     */
    public function getSpaceByApplicationCategoryId($categoryId, $languageCode)
    {
        $spaceDao = new SpaceDAO();

        return $spaceDao->selectSpaceByApplicationCategoryId($categoryId,
            $languageCode);
    }

    /**
     * Get a specific Space
     *
     * @param string     $threadId
     * @param string     $languageCode
     * @param bool|FALSE $isNotThrow
     *
     * @return \grn\space\data\bean\Space
     * @throws GrnDataNotFoundException
     */
    public function getSpaceByThreadId(
        $threadId,
        $languageCode,
        $isNotThrow = false
    ) {
        $spaceDao = new SpaceDAO();

        return $spaceDao->selectSpaceByThreadId($threadId, $languageCode,
            $isNotThrow);
    }

    /**
     * Get a specific Space
     *
     * @param string     $todoId
     * @param string     $languageCode
     * @param bool|FALSE $isNotThrow
     *
     * @return \grn\space\data\bean\Space
     * @throws GrnDataNotFoundException
     */
    public function getSpaceByTodoId(
        $todoId,
        $languageCode,
        $isNotThrow = false
    ) {
        $spaceDao = new SpaceDAO();

        return $spaceDao->selectSpaceByTodoId($todoId, $languageCode,
            $isNotThrow);
    }

    /**
     * Get SpaceMemo
     *
     * @param string $spaceId
     *
     * @return SpaceMemo
     * @throws GrnDataNotFoundException
     */
    public function getSpaceMemo($spaceId)
    {
        $spaceMemoDao = new SpaceMemoDAO();

        return $spaceMemoDao->selectSpaceMemo($spaceId);
    }

    /**
     * Get SpaceMemo with its status whether it is open or closed.
     *
     * @param string $spaceId Space ID
     * @param string $userId  User ID
     *
     * @return SpaceMemo
     * @throws GrnDataNotFoundException::
     */
    public function getSpaceMemoWithStatus($spaceId, $userId)
    {
        $spaceMemoDao = new SpaceMemoDAO();

        return $spaceMemoDao->selectSpaceMemoWithStatus($spaceId, $userId);
    }

    /**
     * Update SpaceMemo
     *
     * @param \grn\space\data\bean\SpaceMemo $spaceMemo
     *
     * @return SpaceMemo
     */
    public function updateSpaceMemo(SpaceMemo $spaceMemo)
    {
        $spaceMemoDao = new SpaceMemoDAO();

        return $spaceMemoDao->updateSpameMemo($spaceMemo);
    }

    /**
     * Insert SpaceMemoOpenStatus when the record does not exist
     * otherwise, update col_is_memo_open column of the record.
     *
     * @param \grn\space\data\bean\SpaceMemoOpenStatus $spaceMemoOpenStatus
     *
     * @return SpaceMemoOpenStatus
     */
    public function toggleSpaceMemoOpenStatus(
        SpaceMemoOpenStatus $spaceMemoOpenStatus
    ) {
        $spaceMemoOpenStatusDao = new SpaceMemoOpenStatusDAO();

        return $spaceMemoOpenStatusDao->insertOnDuplicateKeyUpdate($spaceMemoOpenStatus);
    }

    /**
     * Delete all the record related to the space whose ID is $spaceId
     *
     * @param string $spaceId
     */
    public function deleteSpaceMemoOpenStatusBySpaceId($spaceId)
    {
        $spaceMemoOpenStatusDao = new SpaceMemoOpenStatusDAO();
        $spaceMemoOpenStatusDao->deleteBySpaceId($spaceId);
    }

    /**
     * Search for the spaces
     *
     * This method uses the following methods of $spaceSearchCondition
     * - getLanguageCode
     * - getOrderSortArray
     * - getSearchCategoryId
     *
     * @param \grn\space\data\condition\SpaceSearchCondition $spaceSearchCondition
     *
     * @return SpaceCollection
     */
    public function searchSpace(SpaceSearchCondition $spaceSearchCondition)
    {
        $spaceDao = new SpaceDAO();

        return $spaceDao->searchSpace($spaceSearchCondition);
    }

    /**
     * Select spaces
     *
     * @param string $spaceCode
     * @param string $languageCode
     *
     * @throws \grn\space\common\exception\GrnDatabaseException     Any error in the database.
     * @return SpaceCollection
     */
    public function selectSpaceListBySpaceCode($spaceCode, $languageCode)
    {
        $spaceDao = new SpaceDAO();

        return $spaceDao->selectSpaceListBySpaceCode($spaceCode, $languageCode);
    }

    /**
     * Set up countMembers property of each Space object of $spaceCollection
     *
     * @param \grn\space\data\collection\SpaceCollection $spaceCollection
     *
     * @return \grn\space\data\collection\SpaceCollection
     */
    public function appendSpaceUserCount(SpaceCollection $spaceCollection)
    {
        $spaceUserDao = new SpaceUserDAO();

        return $spaceUserDao->appendSpaceUserCount($spaceCollection);
    }

    /**
     * Insert a record into tab_grn_space_space_local.
     * When the record is duplicated, this method updates col_name value of the record.
     *
     * The returned value is a little tricky.
     * 0 : There had been the same record already so that no record was changed.
     * 1 : There had been no record whose col_category and col_language were the same with $categoryLocal so that a new record was inserted.
     * 2 : There had been the record whose col_category and col_language were the same with $categoryLocal so that only col_category_name of the record was updated.
     *
     * @param \grn\space\data\bean\SpaceLocal $spaceLocal
     *
     * @return integer the number of affected rows.
     * @throws \grn\space\common\exception\GrnInvalidArgumentException
     */
    public function insertOnDuplicateUpdateSpaceLocal(SpaceLocal $spaceLocal)
    {
        $spaceLocalDao = new SpaceLocalDAO();

        return $spaceLocalDao->insertOnDuplicateUpdate($spaceLocal);
    }

    /**
     * Select SpaceLocal by Space ID
     *
     * @param string $spaceId
     *
     * @return \grn\space\data\collection\SpaceLocalCollection
     */
    public function searchSpaceLocalBySpaceId($spaceId)
    {
        $spaceLocalDao = new SpaceLocalDAO();

        return $spaceLocalDao->searchBySpaceId($spaceId);
    }

    /**
     * Update Space
     *
     * @param \grn\space\data\bean\Space $space
     *
     * @return \grn\space\data\bean\Space
     */
    public function updateSpace($space)
    {
        $spaceDao = new SpaceDAO();

        return $spaceDao->updateSpace($space);
    }

    /**
     * Update space component modify timestamp
     *
     * @param \grn\space\data\bean\Space $space Space
     *
     * @throws \grn\space\common\exception\GrnDatabaseException  Any error in the database.
     */
    public function updateSpaceComponentModifyTimestamp(Space $space)
    {
        $spaceDao = new SpaceDAO();
        $spaceDao->updateSpaceComponentModifyTimestamp($space);
    }

    /**
     * Insert SpaceUser
     * When the record is duplicated, this method updates col_display_order.
     *
     * @param \grn\space\data\bean\SpaceUser $spaceUser
     *
     * @return SpaceUser
     */
    public function insertOnDuplicateUpdateSpaceUser(SpaceUser $spaceUser)
    {
        $spaceUserDao = new SpaceUserDAO();

        return $spaceUserDao->insertOnDuplicateUpdate($spaceUser);
    }

    /**
     * Delete SpaceUser
     *
     * @param \grn\space\data\bean\SpaceUser $spaceUser
     *
     * @return SpaceUser
     * @throws GrnDataNotFoundException
     */
    public function deleteSpaceUser(SpaceUser $spaceUser)
    {
        $spaceUserDao = new SpaceUserDAO();

        return $spaceUserDao->delete($spaceUser);
    }

    /**
     * Delete SpaceUser All
     *
     * @param string $spaceId
     *
     * @return boolean Always true
     * @throws \grn\space\common\exception\GrnDataNotFoundException
     */
    public function deleteSpaceUserAll($spaceId)
    {
        $spaceUserDao = new SpaceUserDAO();

        return $spaceUserDao->deleteBySpaceId($spaceId);
    }

    /**
     * Delete SpaceLocal
     *
     * @param \grn\space\data\bean\SpaceLocal $spaceLocal
     * @param string                          $languageId
     *
     * @return \grn\space\data\bean\SpaceLocal
     */
    public function deleteSpaceLocal(SpaceLocal $spaceLocal, $languageId)
    {
        $spaceLocalDao = new SpaceLocalDAO();

        return $spaceLocalDao->delete($spaceLocal, $languageId);
    }

    /**
     * Return array which will be used to covert languageCode to languageId
     *
     * @return array
     */
    public function getLanguageTableArray()
    {
        $spaceLocalDao = new SpaceLocalDAO();

        return $spaceLocalDao->getLanguageTableArray();
    }

    /**
     * Delete Space
     *
     * @param string $spaceId
     *
     * @return bool always true
     * @throws GrnDataNotFoundException
     */
    public function deleteSpace($spaceId)
    {
        $spaceDao = new SpaceDAO();

        return $spaceDao->deleteSpace($spaceId);
    }

    /**
     * Select all the categories used by all the application related to the Space
     *
     * @param string $spaceId
     *
     * @return \grn\space\common\data\collection\CategoryCollection
     */
    public function selectApplicationCategoryListBySpaceId($spaceId)
    {
        $spaceDao = new SpaceDAO();

        return $spaceDao->selectApplicationCategoryListBySpaceId($spaceId);
    }

    /**
     * Get space list with the disk space which is consumed by each space.
     *
     * @param \grn\space\data\condition\SpaceWithFileSearchCondition $condition
     *
     * @return SpaceCollection
     */
    public function selectSpaceListWithFileUsage(
        SpaceWithFileSearchCondition $condition
    ) {
        $spaceDao = new SpaceDAO();

        return $spaceDao->selectSpaceListWithFileUsage($condition);
    }

    /**
     *
     * @param \grn\space\data\bean\MemberOpenStatus $memberOpenStatus
     *
     * @return boolean
     */
    public function isExistMemberOpenStatus(MemberOpenStatus $memberOpenStatus)
    {
        $memberOpenStatusDao = new MemberOpenStatusDAO();

        return $memberOpenStatusDao->isExistMemberOpenStatus($memberOpenStatus);
    }

    /**
     *
     * @param \grn\space\data\bean\MemberOpenStatus $memberOpenStatus
     *
     * @return \grn\space\data\bean\MemberOpenStatus
     */
    public function insertMemberOpenStatus(MemberOpenStatus $memberOpenStatus)
    {
        $memberOpenStatusDao = new MemberOpenStatusDAO();

        return $memberOpenStatusDao->insertMemberOpenStatus($memberOpenStatus);
    }

    /**
     *
     * @param \grn\space\data\bean\MemberOpenStatus $memberOpenStatus
     */
    public function deleteMemberOpenStatus(MemberOpenStatus $memberOpenStatus)
    {
        $memberOpenStatusDao = new MemberOpenStatusDAO();
        $memberOpenStatusDao->deleteMemberOpenStatus($memberOpenStatus);
    }

    /**
     * @return \grn\space\data\collection\SpaceCollection
     */
    public function getAllSpaceForFtsFullIndexer()
    {
        $spaceMemoDao = new SpaceDAO();

        return $spaceMemoDao->getAllSpaceForFtsFullIndexer();
    }

    /**
     * @param int $startId
     * @param int $endId
     * @param int $maxLength
     *
     * @return array
     */
    public function getAllSpaceMemoForFtsFullIndexer(
        $startId,
        $endId,
        $maxLength
    ) {
        $spaceMemoDao = new SpaceMemoDAO();

        return $spaceMemoDao->getAllSpaceMemoForFtsFullIndexer($startId, $endId,
            $maxLength);
    }

    /**
     * @param  string[] $category_ids
     * @param  string   $user_id
     * @param  array    $user_group_ids
     * @param  array    $user_role_ids
     * @param  int      $expiration_type
     *
     * @return string[]
     */
    public function selectSpaceIdsByCategoryIds(
        $category_ids,
        $user_id,
        $user_group_ids = [],
        $user_role_ids = [],
        $expiration_type = null
    ) {
        $spaceDao = new SpaceDAO();

        return $spaceDao->selectSpaceIdsByCategoryIds($category_ids, $user_id,
            $user_group_ids, $user_role_ids,
            $expiration_type);
    }
}
