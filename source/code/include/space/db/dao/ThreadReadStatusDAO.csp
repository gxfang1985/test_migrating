<?php

namespace grn\space\db\dao;

use grn\space\data\bean\ThreadReadStatus;
use grn\space\data\bean\ThreadUnreadStatus;
use grn\space\data\collection\ThreadCollection;
use grn\space\data\collection\ThreadReadStatusCollection;
use grn\space\data\collection\ThreadUnreadStatusCollection;
use grn\space\common\db\dao\DataAccessControlAbstract;
use grn\space\common\exception\GrnDatabaseException;


/**
 * Database Back Layer
 * This layer mediates the database front layer and the DB.
 *
 * Thread-read-status Facade Data Access Object Class
 * Accept requests from the database front layer for all Thread-read-status
 **/
class ThreadReadStatusDAO extends DataAccessControlAbstract
{
    /**
     * Insert a record into tab_grn_space_thread_read_status.
     * When the record is duplicated, this method updates col_name value of the record.
     *
     * The retuend value is a little tricky.
     * 0 : There had been the same record already so that no record was changed.
     * 1 : There had been no record whose col_thread and col_user were the same with $threadId, $userId so that a new record was inserted.
     * 2 : There had been the record whose col_thread and col_user were the same with $threadId, $userId so that only col_thread_name of the record was updated.
     *
     * @param string $threadId thread sequence id
     * @param string $userId   user sequence id
     *
     * @throws GrnDatabaseException     Any error in the database.
     * @return integer the number of affected rows.
     */
    public function insertOnDuplicateUpdateThreadReadStatus($threadId, $userId)
    {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "INSERT INTO tab_grn_space_thread_read_status SET ";
            $query .= "  col_thread='" . $dbConn->escape($threadId) . "'";
            $query .= ", col_user='" . $dbConn->escape($userId) . "'";
            $query .= " ON DUPLICATE KEY UPDATE";
            $query .= "  col_thread='" . $dbConn->escape($threadId) . "'";
            $query .= ";";

            $dbConn->query($query);

            return $dbConn->affected_rows();

        } catch (GrnDatabaseException $exception) {
            //GrnDatabaseException might be caught here someday...
            throw $exception;
        }
    }

    /**
     * The delete of thread-read-status is executed to the data base.
     *
     * @param string $threadId thread sequence id
     *
     * @throws GrnDatabaseException     Any error in the database.
     */
    public function deleteThreadReadStatusByThreadId($threadId)
    {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query
                = "DELETE FROM tab_grn_space_thread_read_status WHERE col_thread = '{$dbConn->escape($threadId)}';";

            $dbConn->query($query);
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }
    }

    /**
     * The select of thread-read-status is executed to the database.
     *
     * @param ThreadCollection $threadCollection ThreadCollection
     * @param string           $userId           user sequence id
     *
     * @throws GrnDatabaseException         Any error in the database.
     * @return ThreadReadStatusCollection
     */
    public function selectThreadReadStatusCollection(
        ThreadCollection $threadCollection,
        $userId
    ) {
        static $cache = [];
        $SEPARATOR = ";";
        $cache_key = implode($SEPARATOR, $threadCollection->toArray())
                     . $SEPARATOR . $userId;
        if (isset($cache[$cache_key])) {
            return $cache[$cache_key];
        }

        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "SELECT";
            $query .= " col_thread AS _id, ";
            $query .= " col_user ";
            $query .= " FROM ";
            $query .= " tab_grn_space_thread_read_status ";
            $query .= " WHERE ";
            $query .= " col_user = '" . $dbConn->escape($userId) . "'";
            $query .= " AND col_thread IN (";

            //Search todo ids
            $tempIsNeedComma = false;
            /** @var \grn\space\data\bean\Thread $thread */
            foreach ($threadCollection as $thread) {
                if ($tempIsNeedComma) {
                    $query .= ", ";
                }

                $query .= "'" . $dbConn->escape($thread->getId()) . "'";

                $tempIsNeedComma = true;
            }
            $query .= ");";


            $result = $dbConn->query($query);


            $threadReadStatusCollection = new ThreadReadStatusCollection();
            while ($row = $dbConn->fetch_assoc($result)) {
                $threadReadStatusCollection->appendBean(new ThreadReadStatus($row,
                    ThreadReadStatus::NOT_CHECK_INPUT));
            }
            $dbConn->free_result($result);


            //search total count
            $threadReadStatusCollection->setCountNoLimit(count($threadReadStatusCollection));
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        $cache[$cache_key] = $threadReadStatusCollection;

        return $threadReadStatusCollection;
    }

    /**
     * The select of thread-unread-status is executed to the database.
     *
     * @param ThreadCollection $threadCollection ThreadCollection
     * @param string           $userId           user sequence id
     *
     * @throws GrnDatabaseException         Any error in the database.
     * @return ThreadUnreadStatusCollection
     */
    public function selectThreadUnreadStatusCollectionUnderThreThreads(
        ThreadCollection $threadCollection,
        $userId
    ) {
        try {
            $dbConn = $this->getDatabaseConnection();

            //もう一つの選択クエリ。どちらのクエリも大差ないとは思うが、現行のクエリがレスポンス問題になった時に試してみる。
            //SELECT
            //    _id
            //FROM (
            //    SELECT
            //        threadComment.col_thread AS _id, threadComment.col_comment AS col_comment
            //    FROM
            //          tab_grn_space_comment AS comment
            //        , tab_grn_space_thread_comment AS threadComment
            //    WHERE
            //            comment._id = threadComment.col_comment
            //        AND comment.col_is_logical_delete = 0
            //        AND threadComment.col_thread IN ('2', '16', '1')
            //
            //    UNION
            //
            //    SELECT
            //        todoThread.col_thread AS _id, todoComment.col_comment AS col_comment
            //    FROM
            //          tab_grn_space_comment AS comment
            //        , tab_grn_space_todo_thread AS todoThread
            //        , tab_grn_space_todo_comment AS todoComment
            //    WHERE
            //            todoThread.col_todo = todoComment.col_todo
            //        AND comment._id = todoComment.col_comment
            //        AND comment.col_is_logical_delete = 0
            //        AND todoThread.col_thread IN ('2', '16', '1')
            //     )
            //    AS thread_comment
            //    LEFT JOIN tab_grn_space_comment_read_status AS cmntReadSts ON thread_comment.col_comment = cmntReadSts.col_comment AND cmntReadSts.col_user = 6
            //WHERE
            //    cmntReadSts.col_COMMENT IS NULL;

            $query = "SELECT ";
            $query .= "threadComment.col_thread AS _id ";
            $query .= ", threadCommentReadStatus.col_user ";
            $query .= "FROM ";
            $query .= "tab_grn_space_comment AS comment LEFT JOIN tab_grn_space_thread_comment AS threadComment ON comment._id = threadComment.col_comment ";
            $query .= "LEFT JOIN tab_grn_space_comment_read_status AS threadCommentReadStatus ON threadComment.col_comment = threadCommentReadStatus.col_comment AND threadCommentReadStatus.col_user = '"
                      . $dbConn->escape($userId) . "' ";
            $query .= "WHERE ";
            $query .= "comment.col_is_logical_delete = 0 ";
            $query .= "AND threadCommentReadStatus.col_user IS NULL ";
            $query .= "AND threadComment.col_thread IN (";

            //Search thread ids
            $tempIsNeedComma = false;
            /** @var \grn\space\data\bean\Thread $thread */
            foreach ($threadCollection as $thread) {
                if ($tempIsNeedComma) {
                    $query .= ", ";
                }

                $query .= "'" . $dbConn->escape($thread->getId()) . "'";

                $tempIsNeedComma = true;
            }
            $query .= ")";

            $query .= " UNION ";

            $query .= "SELECT ";
            $query .= "todoThread.col_thread AS _id ";
            $query .= ", todoCommentReadStatus.col_user ";
            $query .= "FROM ";
            $query .= "tab_grn_space_comment AS comment ";
            $query .= ", tab_grn_space_todo_thread AS todoThread LEFT JOIN ";
            $query .= "tab_grn_space_todo_comment AS todoComment ON todoThread.col_todo = todoComment.col_todo ";
            $query .= "LEFT JOIN tab_grn_space_comment_read_status AS todoCommentReadStatus ON todoComment.col_comment = todoCommentReadStatus.col_comment AND todoCommentReadStatus.col_user = '"
                      . $dbConn->escape($userId) . "' ";
            $query .= "WHERE ";
            $query .= "comment._id = todoComment.col_comment ";
            $query .= "AND comment.col_is_logical_delete = 0 ";
            $query .= "AND todoCommentReadStatus.col_user IS NULL ";
            $query .= "AND todoThread.col_thread IN (";

            //Search thread ids
            $tempIsNeedComma = false;
            foreach ($threadCollection as $thread) {
                if ($tempIsNeedComma) {
                    $query .= ", ";
                }

                $query .= "'" . $dbConn->escape($thread->getId()) . "'";

                $tempIsNeedComma = true;
            }
            $query .= ")";
            $query .= ";";

            $result = $dbConn->query($query);


            $threadUnreadStatusCollection = new ThreadUnreadStatusCollection();
            while ($row = $dbConn->fetch_assoc($result)) {
                $threadUnreadStatusCollection->appendBean(new ThreadUnreadStatus($row,
                    ThreadUnreadStatus::NOT_CHECK_INPUT));
            }
            $dbConn->free_result($result);


            //search total count
            $threadUnreadStatusCollection->setCountNoLimit(count($threadUnreadStatusCollection));
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        return $threadUnreadStatusCollection;
    }
}
