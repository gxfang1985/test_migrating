<?php

namespace grn\space\db\dao;

use grn\space\common\db\dao\DataAccessControlAbstract;

use grn\space\common\exception\GrnDatabaseException;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\common\exception\ErrorCode;
use grn\space\common\data\collection\ApplicationCollection;
use grn\space\common\data\bean\Application;
use grn\space\common\data\condition\ApplicationSearchCondition;
use grn\space\common\utility\ValidateUtility;

/**
 * Class ApplicationDAO
 */
class ApplicationDAO extends DataAccessControlAbstract
{
    /**
     * Insert Application
     *
     * @throws GrnDatabaseException
     *
     * @param \grn\space\common\data\bean\Application $application
     *
     * @return \grn\space\common\data\bean\Application
     */
    public function insert(Application $application)
    {
        //set create/modify time
        $time = time();
        $application->setCreateTimestamp($time);
        $application->setModifyTimestamp($time);

        try {
            $db = $this->getDatabaseConnection();

            $query = "INSERT INTO tab_grn_space_application SET "
                     . " col_application_code='"
                     . $db->escape($application->getApplicationCode()) . "', "
                     . " col_application_name='"
                     . $db->escape($application->getApplicationName()) . "', "
                     . " col_is_available='" . ($application->isAvailable()
                    ? "1" : "0") . "', "
                     . " col_application_type = '"
                     . $db->escape($application->getApplicationType()) . "', "
                     . " col_external_application_id='"
                     . $db->escape($application->getExternalApplicationId())
                     . "', "
                     . " col_is_forced_use='" . ($application->isForcedUse()
                    ? "1" : "0") . "', "
                     . " col_is_system_use='" . ($application->isSystemUse()
                    ? "1" : "0") . "', "
                     . " col_creator='"
                     . $db->escape($application->getCreatorId()) . "', "
                     . " col_creator_name ='"
                     . $db->escape($application->getCreatorName()) . "', "
                     . " col_create_timestamp='"
                     . $db->escape($application->getCreateTimestamp()) . "', "
                     . " col_modifier='"
                     . $db->escape($application->getModifierId()) . "', "
                     . " col_modifier_name ='"
                     . $db->escape($application->getModifierName()) . "', "
                     . " col_modify_timestamp='"
                     . $db->escape($application->getModifyTimestamp()) . "'";

            $db->query($query);

            $application->setId($db->get_insert_id());
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        return $application;
    }

    /**
     * Delete Application
     *
     * @throws GrnDataNotFoundException
     * @throws GrnDatabaseException
     *
     * @param  string $applicationId
     *
     * @return bool
     */
    public function delete($applicationId)
    {
        try {
            $db = $this->getDatabaseConnection();
            $query
                = "DELETE FROM tab_grn_space_application WHERE _id = '{$db->escape($applicationId)}'";
            $db->query($query);
            $deleteCount = $db->affected_rows();
            if ($deleteCount === 0) {
                throw new GrnDataNotFoundException(ErrorCode::GRN_APPLICATION_NOT_FOUND);
            }
        } catch (GrnDatabaseException $e) {
            throw $e;
        }

        return true;
    }

    /**
     * Select Application
     *
     * @param string $applicationId
     * @param string $languageCode
     *
     * @return \grn\space\common\data\bean\Application
     * @throws GrnDataNotFoundException
     * @throws GrnDatabaseException
     */
    public function select($applicationId, $languageCode)
    {
        try {
            $db = $this->getDatabaseConnection();

            $result = $db->query(
                "SELECT " .
                "application._id, " .
                "application.col_application_code, " .
                "IFNULL(local.col_application_name, application.col_application_name) AS col_application_name, "
                .
                "application.col_is_available, " .
                "application.col_application_type, " .
                "application.col_external_application_id, " .
                "application.col_is_forced_use, " .
                "application.col_is_system_use, " .
                "application.col_creator, " .
                "application.col_creator_name, " .
                "application.col_create_timestamp, " .
                "application.col_modifier, " .
                "application.col_modifier_name, " .
                "application.col_modify_timestamp " .
                "FROM " .
                "tab_grn_space_application AS application " .
                "LEFT JOIN " .
                "(" .
                "tab_grn_space_application_local AS local " .
                "INNER JOIN " .
                "tab_cb_language_status AS l " .
                "ON " .
                "local.col_language = l._id AND l.col_language = '{$db->escape($languageCode)}' "
                .
                ")" .
                "ON application._id = local.col_application " .
                " WHERE application._id = '{$db->escape($applicationId)}'");
            $row = $db->fetch_assoc($result);
            $db->free_result($result);

            if ( ! $row) {
                throw new GrnDataNotFoundException(ErrorCode::GRN_APPLICATION_NOT_FOUND);
            }
        } catch (GrnDatabaseException $e) {
            throw $e;
        }

        return new Application($row, Application::NOT_CHECK_INPUT);
    }

    /**
     * Search Application
     *
     * @param \grn\space\common\data\condition\ApplicationSearchCondition $condition
     * @param string                                                      $languageCode
     *
     * @return \grn\space\common\data\collection\ApplicationCollection
     * @throws GrnDatabaseException
     */
    public function search(ApplicationSearchCondition $condition, $languageCode)
    {
        try {
            $db = $this->getDatabaseConnection();

            $query = "SELECT " .
                     "app._id, " .
                     "app.col_application_code, " .
                     "IFNULL(local.col_application_name, app.col_application_name) AS col_application_name, "
                     .
                     "app.col_is_available, " .
                     "app.col_application_type, " .
                     "app.col_external_application_id, " .
                     "app.col_is_forced_use, " .
                     "app.col_is_system_use, " .
                     "app.col_creator, " .
                     "app.col_creator_name, " .
                     "app.col_create_timestamp, " .
                     "app.col_modifier, " .
                     "app.col_modifier_name, " .
                     "app.col_modify_timestamp " .
                     "FROM " .
                     "tab_grn_space_application AS app " .
                     "LEFT JOIN " .
                     "(" .
                     "tab_grn_space_application_local AS local " .
                     "INNER JOIN " .
                     "tab_cb_language_status AS l " .
                     "ON " .
                     "local.col_language = l._id AND l.col_language = '{$db->escape($languageCode)}' "
                     .
                     ")" .
                     "ON app._id = local.col_application ";
            $where = "";

            // Space ID
            if ( ! is_null($condition->getSearchSpaceId())) {
                $spaceId = $condition->getSearchSpaceId();
                $where .= " app._id IN ( SELECT col_application FROM tab_grn_space_space_application WHERE col_space = '{$db->escape($spaceId)}' )";
            }

            // Application Type
            if ( ! is_null($condition->getSearchApplicationType())) {
                if (strlen($where) > 0) {
                    $where .= " AND ";
                }

                $applicationType = $condition->getSearchApplicationType();
                $where .= " app.col_application_type = '{$db->escape($applicationType)}'";
            }

            // Availability
            if ( ! is_null($condition->getSearchAvailable())) {
                if (strlen($where) > 0) {
                    $where .= " AND ";
                }

                $availability = $condition->getSearchAvailable();
                $where .= " app.col_is_available = '{$db->escape($availability)}'";
            }

            // System Use
            if ( ! is_null($condition->getSearchSystemUse())) {
                if (strlen($where) > 0) {
                    $where .= " AND ";
                }

                $systemUse = $condition->getSearchSystemUse();

                if ($systemUse == ApplicationSearchCondition::SEARCH_TRUE) {
                    $where .= " app.col_is_system_use = '1'";
                } elseif ($systemUse
                          == ApplicationSearchCondition::SEARCH_FALSE
                ) {
                    $where .= " app.col_is_system_use = '0'";
                }

            }

            //External application id
            if ( ! is_null($condition->getSearchExternalApplicationID())) {
                if (strlen($where) > 0) {
                    $where .= " AND ";
                }

                $appID = $condition->getSearchExternalApplicationID();
                $where .= " app.col_external_application_id = '{$db->escape($appID)}'";

            }

            if (strlen($where) > 0) {
                $query .= " WHERE " . $where;
            }

            $result = $db->query($query);
            $applicationCollection = new ApplicationCollection();
            while ($row = $db->fetch_assoc($result)) {
                $applicationCollection->appendBean(new Application($row,
                    Application::NOT_CHECK_INPUT));
            }
            $db->free_result($result);

        } catch (GrnDatabaseException $e) {
            throw $e;
        }

        return $applicationCollection;
    }

    /**
     * Update Application
     *
     * @param \grn\space\common\data\bean\Application $application
     *
     * @return \grn\space\common\data\bean\Application
     * @throws GrnDatabaseException
     */
    public function update(Application $application)
    {
        try {
            $db = $this->getDatabaseConnection();
            $query = "UPDATE tab_grn_space_application SET "
                     . " col_application_code = '{$db->escape($application->getApplicationCode())}', "
                     . " col_application_name = '{$db->escape($application->getApplicationName())}', "
                     . " col_is_available = '" . ($application->isAvailable()
                    ? "1" : "0") . "', "
                     . " col_application_type = '{$db->escape($application->getApplicationType())}', "
                     . " col_external_application_id = '{$db->escape($application->getExternalApplicationId())}', "
                     . " col_is_forced_use = '" . ($application->isForcedUse()
                    ? "1" : "0") . "', "
                     . " col_is_system_use = '" . ($application->isSystemUse()
                    ? "1" : "0") . "', ";
            if (ValidateUtility::isNull($application->getCreatorId())) {
                $query .= " col_creator = NULL, ";
            } else {
                $query .= " col_creator = '{$db->escape($application->getCreatorId())}', ";
            }
            $query .= " col_creator_name = '{$db->escape($application->getCreatorName())}', "
                      . " col_create_timestamp = '{$db->escape($application->getCreateTimestamp())}', ";
            if (ValidateUtility::isNull($application->getModifierId())) {
                $query .= " col_modifier = NULL, ";
            } else {
                $query .= " col_modifier = '{$db->escape($application->getModifierId())}', ";
            }
            $query .= " col_modifier_name = '{$db->escape($application->getModifierName())}', "
                      . " col_modify_timestamp = '{$db->escape($application->getModifyTimestamp())}' "
                      . "WHERE _id = '{$db->escape($application->getId())}'";

            $db->query($query);

            return $application;
        } catch (GrnDatabaseException $e) {
            throw $e;
        }
    }

    /**
     * Select single Application by Application Code
     *
     * This method returns only one Application object even when there are many record whose application code is $applicationCode
     *
     * @param string $applicationCode
     * @param string $languageCode
     *
     * @return \grn\space\common\data\bean\Application
     * @throws GrnDataNotFoundException
     * @throws GrnDatabaseException
     */
    public function selectByApplicationCode($applicationCode, $languageCode)
    {
        try {
            $db = $this->getDatabaseConnection();
            $result = $db->query(
                "SELECT " .
                "app._id, " .
                "app.col_application_code, " .
                "IFNULL(local.col_application_name, app.col_application_name) AS col_application_name, "
                .
                "app.col_is_available, " .
                "app.col_application_type, " .
                "app.col_external_application_id, " .
                "app.col_is_forced_use, " .
                "app.col_is_system_use, " .
                "app.col_creator, " .
                "app.col_creator_name, " .
                "app.col_create_timestamp, " .
                "app.col_modifier, " .
                "app.col_modifier_name, " .
                "app.col_modify_timestamp " .
                "FROM " .
                "tab_grn_space_application AS app " .
                "LEFT JOIN " .
                "(" .
                "tab_grn_space_application_local AS local " .
                "INNER JOIN " .
                "tab_cb_language_status AS l " .
                "ON " .
                "local.col_language = l._id AND l.col_language = '{$db->escape($languageCode)}' "
                .
                ")" .
                "ON app._id = local.col_application " .
                "WHERE " .
                "app.col_application_code ='{$db->escape($applicationCode)}' " .
                "ORDER BY " .
                "_id ASC;"
            );
            $row = $db->fetch_assoc($result);
            $db->free_result($result);

            if ( ! $row) {
                throw new GrnDataNotFoundException(ErrorCode::GRN_APPLICATION_NOT_FOUND);
            }

            return new Application($row, Application::NOT_CHECK_INPUT);

        } catch (GrnDatabaseException $e) {
            throw $e;
        }
    }
}
