<?php

namespace grn\space\db\dao;

use grn\space\data\bean\DiscussionNotification;
use grn\space\data\collection\SpaceUserCollection;
use grn\space\data\collection\ThreadCollection;
use grn\space\common\exception\GrnDatabaseException;
use grn\space\common\db\dao\DataAccessControlAbstract;

/**
 * Class DiscussionNotificationDAO
 */
class DiscussionNotificationDAO extends DataAccessControlAbstract
{
    /**
     * @param $discussionId
     * @param $userId
     *
     * @return DiscussionNotification
     * @throws GrnDatabaseException
     */
    public function selectDiscussionNotification($discussionId, $userId)
    {
        try {
            $dbConn = $this->getDatabaseConnection();
            $query = "SELECT";
            $query .= " col_discussion AS _id, ";
            $query .= " col_user ";
            $query .= " FROM ";
            $query .= " tab_grn_space_discussion_notification_user ";
            $query .= " WHERE ";
            $query .= " col_discussion = '" . $dbConn->escape($discussionId)
                      . "'";
            $query .= " AND ";
            $query .= " col_user = '" . $dbConn->escape($userId) . "'";
            $query .= ";";
            $result = $dbConn->query($query);
            $row = $dbConn->fetch_assoc($result);
            $dbConn->free_result($result);
            if ( ! $row) {
                return new DiscussionNotification();
            } else {
                return new DiscussionNotification($row,
                    DiscussionNotification::NOT_CHECK_INPUT);
            }
        } catch (GrnDatabaseException $e) {
            throw $e;
        }
    }

    /**
     * @param $discussionId
     * @param $userId
     *
     * @return bool|int
     * @throws GrnDatabaseException
     */
    public function insertOnDuplicateUpdateDiscussionNotification(
        $discussionId,
        $userId
    ) {
        try {
            $dbConn = $this->getDatabaseConnection();
            $query
                = "INSERT INTO tab_grn_space_discussion_notification_user SET";
            $query .= " col_discussion='" . $dbConn->escape($discussionId)
                      . "'";
            $query .= ", col_user='" . $dbConn->escape($userId) . "'";
            $query .= " ON DUPLICATE KEY UPDATE";
            $query .= " col_discussion='" . $dbConn->escape($discussionId)
                      . "'";
            $query .= " ;";
            $dbConn->query($query);

            return $dbConn->affected_rows();
        } catch (GrnDatabaseException $e) {
            throw $e;
        }
    }

    /**
     * @param $discussionId
     * @param $userId
     *
     * @throws GrnDatabaseException
     */
    public function deleteDiscussionNotification($discussionId, $userId)
    {
        try {
            $dbConn = $this->getDatabaseConnection();
            $query
                = "DELETE FROM tab_grn_space_discussion_notification_user WHERE col_discussion = '{$dbConn->escape($discussionId)}' AND col_user = '{$dbConn->escape($userId)}';";
            $dbConn->query($query);
        } catch (GrnDatabaseException $e) {
            throw $e;
        }
    }

    /**
     * @param $discussionId
     *
     * @return array
     * @throws GrnDatabaseException
     */
    public function getDiscussionNotificationUserId($discussionId)
    {
        try {
            $dbConn = $this->getDatabaseConnection();
            $query = "SELECT n.col_user "
                     . "FROM tab_grn_space_discussion_notification_user AS n "
                     . "LEFT JOIN tab_cb_user AS u ON n.col_user = u._id "
                     . "WHERE n.col_discussion = '{$dbConn->escape($discussionId)}' AND u.col_deleted IS NULL";
            $result = $dbConn->query($query);
            $idArr = [];
            while ($row = $dbConn->fetch_assoc($result)) {
                $idArr[] = $row['col_user'];
            }
            $dbConn->free_result($result);

            return $idArr;
        } catch (GrnDatabaseException $e) {
            throw $e;
        }
    }

    /**
     * @param ThreadCollection    $discussionCollection
     * @param SpaceUserCollection $spaceUserCollection
     *
     * @throws GrnDatabaseException
     */
    public function deleteMultiDiscussionNotification(
        ThreadCollection $discussionCollection,
        SpaceUserCollection $spaceUserCollection
    ) {
        try {
            $dbConn = $this->getDatabaseConnection();
            $query
                = "DELETE FROM tab_grn_space_discussion_notification_user WHERE col_user IN (";
            $tempIsNeedComma = false;
            foreach ($spaceUserCollection as $spaceUser) {
                if ($tempIsNeedComma) {
                    $query .= ", ";
                }
                /** @var \grn\space\data\bean\SpaceUser $spaceUser */
                $query .= "'{$dbConn->escape($spaceUser->getMemberID())}'";
                $tempIsNeedComma = true;
            }
            $query .= ") AND col_discussion IN (";
            $tempIsNeedComma = false;
            foreach ($discussionCollection as $discussion) {
                if ($tempIsNeedComma) {
                    $query .= ", ";
                }
                /** @var \grn\space\data\bean\Thread $discussion */
                $query .= "'{$dbConn->escape($discussion->getId())}'";
                $tempIsNeedComma = true;
            }
            $query .= ");";
            $dbConn->query($query);
        } catch (GrnDatabaseException $e) {
            throw $e;
        }
    }

    /**
     * @param array $discussionId
     *
     * @throws GrnDatabaseException
     */
    public function deleteDiscussionNotificationByDiscussionId(
        array $discussionId
    ) {
        try {
            $dbConn = $this->getDatabaseConnection();
            $query = "DELETE ";
            $query .= "FROM tab_grn_space_discussion_notification_user ";
            $query .= "WHERE col_discussion IN ( ";
            foreach ($discussionId as $k => $v) {
                $discussionId[$k] = "'{$dbConn->escape($v)}'";
            }
            $query .= implode(",", $discussionId);
            $query .= ");";
            $dbConn->query($query);
        } catch (GrnDatabaseException $e) {
            throw $e;
        }
    }
}
