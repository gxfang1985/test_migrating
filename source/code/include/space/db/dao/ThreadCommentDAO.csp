<?php

namespace grn\space\db\dao;

use grn\space\common\db\dao\DataAccessControlAbstract;
use grn\space\common\exception\GrnDatabaseException;
use grn\space\common\data\bean\Comment;
use grn\space\common\data\collection\CommentCollection;

/**
 * Database Back Layer
 * This layer mediates the database front layer and the DB.
 *
 * ThreadComment Data Access Object Class
 * Accept requests from the database front layer for all ThreadComment
 **/
class ThreadCommentDAO extends DataAccessControlAbstract
{
    /**
     * The insert of thread-comment-relation is executed to the database.
     *
     * @param string $threadId  thread sequence id
     * @param string $commentId comment sequence id
     *
     * @throws GrnDatabaseException     Any error in the database.
     */
    public function insertThreadCommentReletion($threadId, $commentId)
    {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query
                = "INSERT INTO tab_grn_space_thread_comment (col_thread, col_comment) VALUES ";
            $query .= "('" . $dbConn->escape($threadId) . "','"
                      . $dbConn->escape($commentId) . "')";
            $query .= ";";

            $dbConn->query($query);
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }
    }

    /**
     * @param int $startId
     * @param int $endId
     * @param int $maxLength
     *
     * @return array
     */
    public function getAllThreadCommentForFtsFullIndexer(
        $startId,
        $endId,
        $maxLength
    ) {
        $db = $this->getDatabaseConnection();
        $result = $db->query(
            "SELECT " .
            "comment._id, " .
            "comment.col_modifier, " .
            "CASE WHEN CHAR_LENGTH(comment.col_content) > {$db->escape($maxLength)} "
            .
            "THEN 1 ELSE 0 END AS truncated, " .
            "LEFT(comment.col_content, {$db->escape($maxLength)}) AS col_content, "
            .
            "comment.col_modify_timestamp, " .
            "a.col_space, " .
            "tc.col_thread " .
            "FROM " .
            "tab_grn_space_comment AS comment, " .
            "tab_grn_space_thread_comment AS tc, " .
            "tab_grn_space_thread AS t, " .
            "tab_grn_space_category_hierarchy AS h, " .
            "tab_grn_space_category AS c, " .
            "tab_grn_space_space_application AS a " .
            "WHERE " .
            "comment._id>={$db->escape($startId)} AND " .
            "{$db->escape($endId)} >= comment._id AND " .
            "comment._id=tc.col_comment AND " .
            "tc.col_thread=t._id AND " .
            "t.col_category=h.col_category AND " .
            "h.col_ancestor=c._id AND " .
            "c.col_hierarchy_level=1 AND " .
            "c._id=a.col_root_category " .
            "FOR UPDATE"
        );
        $rows = [];
        while ($row = $db->fetch_assoc($result)) {
            $rows[] = $row;
        }
        $db->free_result($result);

        return $rows;
    }

    /**
     * Get all discussion comment ids by discussion id.
     *
     * @param  array $discussionIds
     *
     * @throws GrnDatabaseException    Any error in the database.
     * @return array discussion comment id(s)
     */
    public function getDiscussionCommentIdByDiscussionId(array $discussionIds)
    {
        try {
            if (count($discussionIds) <= 0) {
                return [];
            }
            $db = $this->getDatabaseConnection();
            $query
                = "SELECT col_comment FROM tab_grn_space_thread_comment WHERE ";
            foreach ($discussionIds as $k => $discussionId) {
                $discussionIds[$k] = "'" . $db->escape($discussionId) . "'";
            }
            $query .= " col_thread IN (" . implode(",", $discussionIds)
                      . ");";
            $result = $db->query($query);
            $commentId = [];
            while ($cmt = $db->fetch_assoc($result)) {
                $commentId[] = $cmt['col_comment'];
            }

            return $commentId;
        } catch (GrnDatabaseException $e) {
            throw $e;
        }
    }
}
