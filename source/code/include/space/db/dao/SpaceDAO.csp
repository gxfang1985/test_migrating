<?php

namespace grn\space\db\dao;

use grn\space\data\condition\SpaceWithFileSearchCondition;

use grn\space\common\data\bean\Application;

use grn\space\common\data\bean\Category;

use grn\space\common\data\collection\CategoryCollection;
use grn\space\common\db\dao\DataAccessControlAbstract;
use grn\space\common\exception\GrnDatabaseException;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\common\exception\ErrorCode;
use grn\space\common\utility\ValidateUtility;
use grn\space\data\bean\Space;
use grn\space\data\collection\SpaceCollection;
use grn\space\data\condition\SpaceSearchCondition;

/**
 * Class SpaceDAO
 */
class SpaceDAO extends DataAccessControlAbstract
{
    /**
     * Insert the Space
     *
     * @param \grn\space\data\bean\Space $space
     *
     * @return Space
     * @throws GrnDatabaseException
     */
    public function insertSpace(Space $space)
    {
        try {
            $db = $this->getDatabaseConnection();


            $query = "INSERT tab_grn_space_space SET "
                     . "_id = '" . $db->escape($space->getId()) . "', "
                     . "col_space_code = '"
                     . $db->escape($space->getSpaceCode()) . "', "
                     . "col_space_name = '"
                     . $db->escape($space->getSpaceName()) . "', "
                     . "col_is_builtin_icon = '" . ($space->isBuiltinIcon()
                    ? "1" : "0") . "', "
                     . "col_builtin_icon = '"
                     . $db->escape($space->getBuiltinIconId()) . "', "
                     . "col_original_icon_file = '"
                     . $db->escape($space->getOriginalIconFileId()) . "', "
                     . "col_category = '" . $db->escape($space->getCategoryId())
                     . "', "
                     . "col_is_public = '" . ($space->isPublic() ? "1" : "0")
                     . "', "
                     . "col_creator = '" . $db->escape($space->getCreatorId())
                     . "', "
                     . "col_creator_name = '"
                     . $db->escape($space->getCreatorName()) . "', "
                     . "col_create_timestamp = '"
                     . $db->escape($space->getCreateTimestamp()) . "', "
                     . "col_join_leave = '" . ($space->isAllowJoinLeave()
                    ? Space::JOIN_LEAVE_SETTING_ON
                    : Space::JOIN_LEAVE_SETTING_OFF) . "', ";
            if (ValidateUtility::isNotNull($space->getModifierId())) {
                $query .= "col_modifier = '"
                          . $db->escape($space->getModifierId()) . "', ";
            }
            $query .= "col_modifier_name = '"
                      . $db->escape($space->getModifierName()) . "', ";
            if (ValidateUtility::isNotNull($space->getModifyTimestamp())) {
                $query .= "col_modify_timestamp = '"
                          . $db->escape($space->getModifyTimestamp()) . "', ";
            }
            if (ValidateUtility::isNotNull($space->getComponentModifyTimestamp())) {
                $query .= "col_component_modify_timestamp = '"
                          . $db->escape($space->getComponentModifyTimestamp())
                          . "'";
            }

            if ( ! $space->getIsUnlimitedExpirationDate()) {
                $query .= ", col_end_is_datetime = '"
                          . $db->escape($space->getIsExpirationDateSpecifiedTime())
                          . "'";

                if (ValidateUtility::isNotNull($space->getExpirationDateTimestamp())) {
                    $query .= ", col_end_timestamp = '"
                              . $db->escape($space->getExpirationDateTimestamp())
                              . "'";
                }
            }
            $query .= ";";

            $db->query($query);
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        return $space;
    }

    /**
     * Modify the Space
     *
     * @param \grn\space\data\bean\Space $space
     *
     * @return \grn\space\data\bean\Space
     * @throws GrnDatabaseException
     */
    public function updateSpace(Space $space)
    {
        try {
            $db = $this->getDatabaseConnection();

            $query = "UPDATE tab_grn_space_space SET "
                     . "col_space_code = '"
                     . $db->escape($space->getSpaceCode()) . "', "
                     . "col_space_name = '"
                     . $db->escape($space->getSpaceName()) . "', "
                     . "col_is_builtin_icon = '" . ($space->isBuiltinIcon()
                    ? "1" : "0") . "', "
                     . "col_builtin_icon = '"
                     . $db->escape($space->getBuiltinIconId()) . "', "
                     . "col_original_icon_file = '"
                     . $db->escape($space->getOriginalIconFileId()) . "', "
                     . "col_category = '" . $db->escape($space->getCategoryId())
                     . "', "
                     . "col_is_public = '" . ($space->isPublic() ? "1" : "0")
                     . "', "
                     . "col_join_leave = '" . ($space->isAllowJoinLeave()
                    ? Space::JOIN_LEAVE_SETTING_ON
                    : Space::JOIN_LEAVE_SETTING_OFF) . "', ";
            if (ValidateUtility::isNull($space->getCreatorId())) {
                $query .= "col_creator = NULL, ";
            } else {
                $query .= "col_creator='" . $db->escape($space->getCreatorId())
                          . "', ";
            }
            $query .= "col_creator_name = '"
                      . $db->escape($space->getCreatorName()) . "', "
                      . "col_create_timestamp = '"
                      . $db->escape($space->getCreateTimestamp()) . "', ";
            if (ValidateUtility::isNull($space->getModifierId())) {
                $query .= "col_modifier = NULL, ";
            } else {
                $query .= "col_modifier = '"
                          . $db->escape($space->getModifierId()) . "', ";
            }
            $query .= "col_modifier_name = '"
                      . $db->escape($space->getModifierName()) . "', ";
            if (ValidateUtility::isNull($space->getModifyTimestamp())) {
                $query .= "col_modify_timestamp = NULL, ";
            } else {
                $query .= "col_modify_timestamp = '"
                          . $db->escape($space->getModifyTimestamp()) . "', ";
            }
            if (ValidateUtility::isNull($space->getComponentModifyTimestamp())) {
                $query .= "col_component_modify_timestamp = NULL ";
            } else {
                $query .= "col_component_modify_timestamp = '"
                          . $db->escape($space->getComponentModifyTimestamp())
                          . "'";
            }

            if ($space->getIsUnlimitedExpirationDate()) {
                $query .= ", col_end_is_datetime = NULL";

                $query .= ", col_end_timestamp = NULL";

            } else {
                $query .= ", col_end_is_datetime = '"
                          . $db->escape($space->getIsExpirationDateSpecifiedTime())
                          . "'";

                if (ValidateUtility::isNotNull($space->getExpirationDateTimestamp())) {
                    $query .= ", col_end_timestamp = '"
                              . $db->escape($space->getExpirationDateTimestamp())
                              . "'";
                }
            }

            $query .= " WHERE _id = '" . $db->escape($space->getId()) . "';";

            $db->query($query);
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        return $space;
    }


    /**
     * Update Space component modify timestamp
     *
     * @param  \grn\space\data\bean\Space $space Space
     *
     * @throws GrnDatabaseException  Any error in the database.
     */
    public function updateSpaceComponentModifyTimestamp(Space $space)
    {
        try {
            $db = $this->getDatabaseConnection();

            $db->query(
                "UPDATE tab_grn_space_space SET "
                . "col_component_modify_timestamp = '"
                . $db->escape($space->getComponentModifyTimestamp()) . "' "
                . "WHERE _id = '" . $db->escape($space->getId()) . "';"
            );
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }
    }


    /**
     * Select space with the path of its icon
     *
     * @param string $spaceId
     * @param string $languageCode
     *
     * @return \grn\space\data\bean\Space
     * @throws GrnDataNotFoundException
     * @throws GrnDatabaseException
     */
    public function selectSpace($spaceId, $languageCode)
    {
        try {
            $db = $this->getDatabaseConnection();
            $result = $db->query(
                "SELECT " .
                "space._id, " .
                "space.col_space_code, " .
                "IFNULL(local.col_space_name, space.col_space_name) AS col_space_name, "
                .
                "space.col_is_builtin_icon, " .
                "space.col_builtin_icon, " .
                "space.col_category, " .
                "space.col_is_public, " .
                "space.col_creator, " .
                "space.col_creator_name, " .
                "space.col_create_timestamp, " .
                "space.col_modifier, " .
                "space.col_modifier_name, " .
                "space.col_modify_timestamp, " .
                "space.col_component_modify_timestamp, " .
                "icon.col_file_name AS icon_file_name, " .
                "space.col_join_leave, " .
                "space.col_end_is_datetime, " .
                "space.col_end_timestamp " .
                "FROM " .
                "tab_grn_space_space AS space " .
                "LEFT JOIN " .
                "tab_grn_space_icon AS icon " .
                "ON space.col_builtin_icon = icon._id " .
                "LEFT JOIN " .
                "(" .
                "tab_grn_space_space_local AS local " .
                "INNER JOIN " .
                "tab_cb_language_status AS l " .
                "ON " .
                "local.col_language = l._id AND l.col_language = '{$db->escape($languageCode)}' "
                .
                ")" .
                "ON space._id = local.col_space " .
                "WHERE " .
                "space._id='{$db->escape($spaceId)}';"
            );

            $row = $db->fetch_assoc($result);
            $db->free_result($result);

            if ( ! $row) {
                throw new GrnDataNotFoundException(ErrorCode::GRN_INVALID_SPACE_ID);
            }
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        return new Space($row, Space::NOT_CHECK_INPUT);
    }

    /**
     * Select space with the path of its icon
     *
     * @param string $categoryId
     * @param string $languageCode
     *
     * @throws GrnDataNotFoundException
     * @throws GrnDatabaseException
     * @return Space
     */
    public function selectSpaceByApplicationCategoryId(
        $categoryId,
        $languageCode
    ) {
        static $cache = [];
        $cacheKey = $categoryId . "-" . $languageCode;
        if (isset($cache[$cacheKey])) {
            return $cache[$cacheKey];
        }

        try {
            $db = $this->getDatabaseConnection();
            $query = "SELECT " .
                     "space._id, " .
                     "space.col_space_code, " .
                     "IFNULL(local.col_space_name, space.col_space_name) AS col_space_name, "
                     .
                     "space.col_is_builtin_icon, " .
                     "space.col_builtin_icon, " .
                     "space.col_category, " .
                     "space.col_is_public, " .
                     "space.col_creator, " .
                     "space.col_creator_name, " .
                     "space.col_create_timestamp, " .
                     "space.col_modifier, " .
                     "space.col_modifier_name, " .
                     "space.col_modify_timestamp, " .
                     "space.col_component_modify_timestamp, " .
                     "space.col_join_leave, " .
                     "space.col_end_is_datetime, " .
                     "space.col_end_timestamp, " .
                     "icon.col_file_name AS icon_file_name " .
                     "FROM " .
                     "tab_grn_space_space AS space " .
                     "LEFT JOIN " .
                     "tab_grn_space_icon AS icon " .
                     "ON space.col_builtin_icon = icon._id " .
                     "LEFT JOIN " .
                     "(" .
                     "tab_grn_space_space_local AS local " .
                     "INNER JOIN " .
                     "tab_cb_language_status AS l " .
                     "ON " .
                     "local.col_language = l._id AND l.col_language = '{$db->escape($languageCode)}' "
                     .
                     ")" .
                     " ON space._id = local.col_space " .
                     "LEFT JOIN tab_grn_space_space_application AS spaceApl ON space._id = spaceApl.col_space "
                     .
                     "LEFT JOIN tab_grn_space_category AS ctg ON spaceApl.col_root_category = ctg._id "
                     .
                     "LEFT JOIN tab_grn_space_category_hierarchy AS ctghrcy ON ctg._id = ctghrcy.col_ancestor "
                     .
                     "WHERE " .
                     "ctg.col_hierarchy_level = 1 " .
                     "AND ctghrcy.col_category = '{$db->escape($categoryId)}';";
            $result = $db->query($query);

            $row = $db->fetch_assoc($result);
            $db->free_result($result);

            if ( ! $row) {
                throw new GrnDataNotFoundException(ErrorCode::GRN_INVALID_SPACE_ID);
            }
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }
        $space = new Space($row, Space::NOT_CHECK_INPUT);

        // set cache
        $cache[$cacheKey] = $space;

        return $space;
    }

    /**
     * Select space with the path of its icon
     *
     * @param string     $threadId
     * @param string     $languageCode
     * @param bool|FALSE $isNotThrow
     *
     * @throws GrnDataNotFoundException
     * @throws GrnDatabaseException
     * @return Space|null
     */
    public function selectSpaceByThreadId(
        $threadId,
        $languageCode,
        $isNotThrow = false
    ) {
        try {
            $db = $this->getDatabaseConnection();
            $result = $db->query(
                "SELECT " .
                "space._id, " .
                "space.col_space_code, " .
                "IFNULL(local.col_space_name, space.col_space_name) AS col_space_name, "
                .
                "space.col_is_builtin_icon, " .
                "space.col_builtin_icon, " .
                "space.col_category, " .
                "space.col_is_public, " .
                "space.col_creator, " .
                "space.col_creator_name, " .
                "space.col_create_timestamp, " .
                "space.col_modifier, " .
                "space.col_modifier_name, " .
                "space.col_modify_timestamp, " .
                "space.col_component_modify_timestamp, " .
                "space.col_join_leave, " .
                "space.col_end_is_datetime, " .
                "space.col_end_timestamp, " .
                "icon.col_file_name AS icon_file_name " .
                "FROM " .
                "tab_grn_space_space AS space " .
                "LEFT JOIN " .
                "tab_grn_space_icon AS icon " .
                "ON space.col_builtin_icon = icon._id " .
                "LEFT JOIN " .
                "(" .
                "tab_grn_space_space_local AS local " .
                "INNER JOIN " .
                "tab_cb_language_status AS l " .
                "ON " .
                "local.col_language = l._id AND l.col_language = '{$db->escape($languageCode)}' "
                .
                ")" .
                "ON space._id = local.col_space " .
                ", tab_grn_space_space_application AS spaceApl " .
                ", tab_grn_space_category AS ctg " .
                ", tab_grn_space_category_hierarchy AS ctghrcy " .
                ", tab_grn_space_thread AS thrd " .
                "WHERE " .
                "    space._id = spaceApl.col_space " .
                "AND spaceApl.col_root_category = ctg._id " .
                "AND ctg._id = ctghrcy.col_ancestor " .
                "AND ctg.col_hierarchy_level = 1 " .
                "AND ctghrcy.col_category = thrd.col_category " .
                "AND thrd._id = '{$db->escape($threadId)}';"
            );

            $row = $db->fetch_assoc($result);
            $db->free_result($result);

            if ( ! $row) {
                if ($isNotThrow) {
                    return null;
                }
                throw new GrnDataNotFoundException(ErrorCode::GRN_INVALID_SPACE_ID);
            }
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        return new Space($row, Space::NOT_CHECK_INPUT);
    }

    /**
     * Select space with the path of its icon
     *
     * @param string     $todoId
     * @param string     $languageCode
     * @param bool|FALSE $isNotThrow
     *
     * @throws GrnDataNotFoundException
     * @throws GrnDatabaseException
     * @return Space|null
     */
    public function selectSpaceByTodoId(
        $todoId,
        $languageCode,
        $isNotThrow = false
    ) {
        try {
            $db = $this->getDatabaseConnection();
            $result = $db->query(
                "SELECT " .
                "space._id, " .
                "space.col_space_code, " .
                "IFNULL(local.col_space_name, space.col_space_name) AS col_space_name, "
                .
                "space.col_is_builtin_icon, " .
                "space.col_builtin_icon, " .
                "space.col_category, " .
                "space.col_is_public, " .
                "space.col_creator, " .
                "space.col_creator_name, " .
                "space.col_create_timestamp, " .
                "space.col_modifier, " .
                "space.col_modifier_name, " .
                "space.col_modify_timestamp, " .
                "space.col_component_modify_timestamp, " .
                "space.col_join_leave, " .
                "space.col_end_is_datetime, " .
                "space.col_end_timestamp, " .
                "icon.col_file_name AS icon_file_name " .
                "FROM " .
                "tab_grn_space_space AS space " .
                "LEFT JOIN " .
                "tab_grn_space_icon AS icon " .
                "ON space.col_builtin_icon = icon._id " .
                "LEFT JOIN " .
                "(" .
                "tab_grn_space_space_local AS local " .
                "INNER JOIN " .
                "tab_cb_language_status AS l " .
                "ON " .
                "local.col_language = l._id AND l.col_language = '{$db->escape($languageCode)}' "
                .
                ")" .
                "ON space._id = local.col_space " .
                ", tab_grn_space_space_application AS spaceApl " .
                ", tab_grn_space_category AS ctg " .
                ", tab_grn_space_category_hierarchy AS ctghrcy " .
                ", tab_grn_space_thread AS thrd " .
                ", tab_grn_space_todo_thread AS tdThrd " .
                "WHERE " .
                "    space._id = spaceApl.col_space " .
                "AND spaceApl.col_root_category = ctg._id " .
                "AND ctg._id = ctghrcy.col_ancestor " .
                "AND ctg.col_hierarchy_level = 1 " .
                "AND ctghrcy.col_category = thrd.col_category " .
                "AND thrd._id = tdThrd.col_thread " .
                "AND tdThrd.col_todo = '{$db->escape($todoId)}';"
            );

            $row = $db->fetch_assoc($result);
            $db->free_result($result);

            if ( ! $row) {
                if ($isNotThrow) {
                    return null;
                }
                throw new GrnDataNotFoundException(ErrorCode::GRN_INVALID_SPACE_ID);
            }
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        return new Space($row, Space::NOT_CHECK_INPUT);
    }

    /**
     * Delete the Space
     *
     * @param string $spaceId
     *
     * @return boolean Always true
     * @throws GrnDatabaseException
     * @throws GrnDataNotFoundException
     */
    public function deleteSpace($spaceId)
    {
        try {
            $db = $this->getDatabaseConnection();
            $db->query(
                "DELETE FROM " .
                "tab_grn_space_space " .
                "WHERE " .
                "_id = '{$db->escape($spaceId)}';"
            );

            if ($db->affected_rows() == 0) {
                throw new GrnDataNotFoundException(ErrorCode::GRN_INVALID_SPACE_ID);
            }

            return true;
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }
    }

    /**
     * Select spaces
     *
     * @param string $spaceCode
     * @param string $languageCode
     *
     * @throws GrnDatabaseException     Any error in the database.
     * @return SpaceCollection
     */
    public function selectSpaceListBySpaceCode($spaceCode, $languageCode)
    {
        try {
            $db = $this->getDatabaseConnection();
            $query = "SELECT " .
                     "space._id, " .
                     "space.col_space_code, " .
                     "IFNULL(local.col_space_name, space.col_space_name) AS col_space_name, "
                     .
                     "space.col_is_builtin_icon, " .
                     "space.col_builtin_icon, " .
                     "space.col_category, " .
                     "space.col_is_public, " .
                     "space.col_creator, " .
                     "space.col_creator_name, " .
                     "space.col_create_timestamp, " .
                     "space.col_modifier, " .
                     "space.col_modifier_name, " .
                     "space.col_modify_timestamp, " .
                     "space.col_component_modify_timestamp, " .
                     "space.col_join_leave, " .
                     "space.col_end_is_datetime, " .
                     "space.col_end_timestamp, " .
                     "icon.col_file_name AS icon_file_name " .
                     "FROM " .
                     "tab_grn_space_space AS space " .
                     "LEFT JOIN " .
                     "tab_grn_space_icon AS icon " .
                     "ON space.col_builtin_icon = icon._id " .
                     "LEFT JOIN " .
                     "(" .
                     "tab_grn_space_space_local AS local " .
                     "INNER JOIN " .
                     "tab_cb_language_status AS l " .
                     "ON " .
                     "local.col_language = l._id AND l.col_language = '{$db->escape($languageCode)}' "
                     .
                     ")" .
                     "ON space._id = local.col_space " .
                     "WHERE " .
                     "space.col_space_code='{$db->escape($spaceCode)}';";


            $result = $db->query($query);


            $spaceCollection = new SpaceCollection();
            while ($row = $db->fetch_assoc($result)) {
                $spaceCollection->appendBean(new Space($row,
                    Space::NOT_CHECK_INPUT));
            }
            $db->free_result($result);

            $spaceCollection->setCountNoLimit(count($spaceCollection));
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        return $spaceCollection;
    }

    /**
     * Search for the spaces
     *
     * This method uses the following methods of $spaceSearchCondition
     * - getLanguageCode
     * - getOrderSortArray
     * - getSearchCategoryId
     *
     * @param \grn\space\data\condition\SpaceSearchCondition $spaceSearchCondition
     *
     * @return SpaceCollection
     */
    public function searchSpace(SpaceSearchCondition $spaceSearchCondition)
    {
        $db = $this->getDatabaseConnection();

        $query = 'SELECT ';
        if ($spaceSearchCondition->isCalcFoundRows()) {
            $query .= "SQL_CALC_FOUND_ROWS ";
        }

        $query .= "main._id, " .
                  "main.col_space_code, " .
                  "main.col_space_name, " .
                  "main.col_is_builtin_icon, " .
                  "main.col_builtin_icon, " .
                  "main.col_category, " .
                  "main.col_is_public, " .
                  "main.col_creator, " .
                  "main.col_creator_name, " .
                  "main.col_create_timestamp, " .
                  "main.col_modifier, " .
                  "main.col_modifier_name, " .
                  "main.col_modify_timestamp, " .
                  "main.col_component_modify_timestamp, " .
                  "main.icon_file_name, " .
                  "main.categoryName, " .
                  "main.col_join_leave, " .
                  "main.col_end_is_datetime, " .
                  "main.col_end_timestamp " .
                  "FROM (" .
                  "SELECT DISTINCT " .
                  "space._id, " .
                  "space.col_space_code, " .
                  "IFNULL(space_local.col_space_name, space.col_space_name) AS col_space_name, "
                  .
                  "space.col_is_builtin_icon, " .
                  "space.col_builtin_icon, " .
                  "space.col_category, " .
                  "space.col_is_public, " .
                  "space.col_creator, " .
                  "space.col_creator_name, " .
                  "space.col_create_timestamp, " .
                  "space.col_modifier, " .
                  "space.col_modifier_name, " .
                  "space.col_modify_timestamp, " .
                  "space.col_component_modify_timestamp, " .
                  "space.col_join_leave, " .
                  "space.col_end_is_datetime, " .
                  "space.col_end_timestamp, " .
                  "icon.col_file_name AS icon_file_name, " .
                  "IFNULL(category_local.col_category_name, category.col_category_name) AS categoryName "
                  .
                  "FROM " .
                  "tab_grn_space_space AS space " .
                  "LEFT JOIN " .
                  "tab_grn_space_icon AS icon " .
                  "ON space.col_builtin_icon = icon._id " .
                  "LEFT JOIN " .
                  "(" .
                  "tab_grn_space_space_local AS space_local " .
                  "INNER JOIN " .
                  "tab_cb_language_status AS space_l " .
                  "ON " .
                  "space_local.col_language = space_l._id AND space_l.col_language = '{$db->escape($spaceSearchCondition->getLanguageCode())}' "
                  .
                  ") " .
                  "ON space._id = space_local.col_space, " .
                  "tab_grn_space_category AS category " .
                  "LEFT JOIN " .
                  "(" .
                  "tab_grn_space_category_local AS category_local " .
                  "INNER JOIN " .
                  "tab_cb_language_status AS category_l " .
                  "ON " .
                  "category_local.col_language = category_l._id AND category_l.col_language = '{$db->escape($spaceSearchCondition->getLanguageCode())}' "
                  .
                  ") " .
                  "ON category._id = category_local.col_category ";

        if (strlen($spaceSearchCondition->getSearchParticipantUserId()) > 0) {
            $query .= ", " .
                      "tab_grn_space_space_user AS space_user ";
        }

        $query .= "WHERE " .
                  "space.col_category = category._id ";

        if (strlen($spaceSearchCondition->getSearchParticipantUserId()) > 0
            && count($spaceSearchCondition->getSearchParticipantGroupIds()) > 0
            && count($spaceSearchCondition->getSearchParticipantRoleIds()) > 0
        ) {
            $query .= "AND " .
                      "space._id = space_user.col_space " .
                      "AND (" .
                      "space_user.col_user = '{$db->escape($spaceSearchCondition->getSearchParticipantUserId())}' "
                      .
                      "OR space_user.col_group IN( " . implode(",",
                    $spaceSearchCondition->getSearchParticipantGroupIds())
                      . ") " .
                      "OR space_user.col_role IN( " . implode(",",
                    $spaceSearchCondition->getSearchParticipantRoleIds())
                      . ") ) ";
        } elseif (strlen($spaceSearchCondition->getSearchParticipantUserId())
                  > 0
                  && count($spaceSearchCondition->getSearchParticipantGroupIds())
                     > 0
        ) {
            $query .= "AND " .
                      "space._id = space_user.col_space " .
                      "AND (" .
                      "space_user.col_user = '{$db->escape($spaceSearchCondition->getSearchParticipantUserId())}' "
                      .
                      "OR space_user.col_group IN( " . implode(",",
                    $spaceSearchCondition->getSearchParticipantGroupIds())
                      . ") ) ";
        } elseif (strlen($spaceSearchCondition->getSearchParticipantUserId())
                  > 0
                  && count($spaceSearchCondition->getSearchParticipantRoleIds())
                     > 0
        ) {
            $query .= "AND " .
                      "space._id = space_user.col_space " .
                      "AND (" .
                      "space_user.col_user = '{$db->escape($spaceSearchCondition->getSearchParticipantUserId())}' "
                      .
                      "OR space_user.col_role IN( " . implode(",",
                    $spaceSearchCondition->getSearchParticipantRoleIds())
                      . ") ) ";
        } elseif (strlen($spaceSearchCondition->getSearchParticipantUserId())
                  > 0
        ) {
            $query .= "AND " .
                      "space._id = space_user.col_space " .
                      "AND " .
                      "space_user.col_user = '{$db->escape($spaceSearchCondition->getSearchParticipantUserId())}' ";
        }

        if (ValidateUtility::isNotNull($spaceSearchCondition->getSearchCategoryId())) {
            $query .= "AND space.col_category = '{$db->escape($spaceSearchCondition->getSearchCategoryId())}' ";
        }

        if (count($spaceSearchCondition->getSearchSpaceIdArray()) > 0) {
            $query .= "AND " .
                      "space._id IN ( ";
            $isNeedComma = false;
            foreach (
                $spaceSearchCondition->getSearchSpaceIdArray() as $eachSpaceId
            ) {
                if ($isNeedComma) {
                    $query .= ", ";
                }
                $query .= "'" . $db->escape($eachSpaceId) . "'";
                $isNeedComma = true;
            }
            $query .= ") ";
        }

        if (count($spaceSearchCondition->getSearchExcludeSpaceIdArray()) > 0) {
            $subQuery = cb_queryf(
                $db, "AND space._id NOT IN (@A) ",
                $spaceSearchCondition->getSearchExcludeSpaceIdArray()
            );
            $query .= $subQuery;
        }

        $now = time();
        switch ($spaceSearchCondition->getSearchSpaceExpirationDate()) {
            case SpaceSearchCondition::SEARCH_SPACE_NOT_EXPIRED:
                $query .= cb_queryf($db,
                    "AND (space.col_end_timestamp IS NULL OR space.col_end_timestamp >= '@S') ",
                    $now);
                break;

            case SpaceSearchCondition::SEARCH_SPACE_EXPIRED:
                $query .= cb_queryf($db,
                    "AND (space.col_end_timestamp IS NOT NULL AND space.col_end_timestamp < '@S') ",
                    $now);
                break;
        }

        $specified_expiration_date
            = $spaceSearchCondition->getSearchExpirationDateBeforeSpecifiedTime();
        if ($specified_expiration_date) {
            $query .= cb_queryf($db,
                "AND (space.col_end_timestamp IS NOT NULL AND space.col_end_timestamp < '@S') ",
                $specified_expiration_date);
        }

        $specified_unmodified_date
            = $spaceSearchCondition->getSearchUnmodifiedSpace();
        if ($specified_unmodified_date) {
            $query .= cb_queryf($db,
                "AND (space.col_component_modify_timestamp IS NOT NULL AND space.col_component_modify_timestamp < '@S') ",
                $specified_unmodified_date);
        }

        $query .= ") AS main";

        //Search items
        //選択した検索項目全体を一つの情報として考えて、検索ワードのいずれも持つレコードを抽出する。
        if ($spaceSearchCondition->getSearchItemBit()
            === SpaceSearchCondition::SEARCH_ITEM_NONE
        ) {
            //none search time
        } else {
            $query .= " WHERE ";

            $tempIsNeedAND = false;
            foreach (
                $spaceSearchCondition->getSearchStringArray() as $searchString
            ) {
                $query .= ($tempIsNeedAND) ? " AND (" : "(";
                $tempIsNeedAND = true;

                $tempIsNeedOR = false;
                if ($spaceSearchCondition->getSearchItemBit()
                    & SpaceSearchCondition::SEARCH_ITEM_SPACE_NAME
                ) {
                    $query .= ($tempIsNeedOR) ? " OR " : "";

                    $query .= "(";
                    $query .= " main.col_space_name LIKE ";
                    $query .= ($spaceSearchCondition->isCaseSensitivity())
                        ? "BINARY " : "";
                    $query .= "'%" . $db->escapeLike($searchString) . "%'";
                    $query .= ")";
                }

                $query .= ")";
            }
        }


        $query .= " ORDER BY ";

        $isNeedComma = false;
        foreach (
            $spaceSearchCondition->getOrderSortArray() as $eachOrderByColumn
        ) {
            if ($isNeedComma) {
                $query .= ",";
            }

            switch ($eachOrderByColumn) {
                case SpaceSearchCondition::SORT_ID_ASC:
                    $query .= " main._id ASC ";
                    break;
                case SpaceSearchCondition::SORT_ID_DESC:
                    $query .= " main._id DESC ";
                    break;
                case SpaceSearchCondition::SORT_CREATE_TIME_ASC:
                    $query .= " main.col_create_timestamp ASC ";
                    break;
                case SpaceSearchCondition::SORT_CREATE_TIME_DESC:
                    $query .= " main.col_create_timestamp DESC ";
                    break;
                case SpaceSearchCondition::SORT_MODIFY_TIME_ASC:
                    $query .= " main.col_modify_timestamp ASC ";
                    break;
                case SpaceSearchCondition::SORT_MODIFY_TIME_DESC:
                    $query .= " main.col_modify_timestamp DESC ";
                    break;
                case SpaceSearchCondition::SORT_COMPONENT_MODIFY_TIME_ASC:
                    $query .= " main.col_component_modify_timestamp ASC ";
                    break;
                case SpaceSearchCondition::SORT_COMPONENT_MODIFY_TIME_DESC:
                    $query .= " main.col_component_modify_timestamp DESC ";
                    break;
            }

            $isNeedComma = true;
        }

        $query = $db->select_format($query, $spaceSearchCondition->getOffset(),
            $spaceSearchCondition->getLimit());

        $spaceCollection = new SpaceCollection();
        $result = $db->query($query);
        while ($row = $db->fetch_assoc($result)) {
            $spaceCollection->appendBean(new Space($row,
                Space::NOT_CHECK_INPUT));
        }
        $db->free_result($result);

        if ($spaceSearchCondition->isCalcFoundRows()) {
            $result = $db->query("SELECT FOUND_ROWS();");
            $row = $db->fetch_assoc($result);
            $spaceCollection->setCountNoLimit($row["FOUND_ROWS()"]);
            $db->free_result($result);
        }

        return $spaceCollection;
    }

    /**
     * Select all the categories used by all the application related to the Space
     *
     * @param string $spaceId
     *
     * @return \grn\space\common\data\collection\CategoryCollection
     */
    public function selectApplicationCategoryListBySpaceId($spaceId)
    {
        try {
            $db = $this->getDatabaseConnection();
            $result = $db->query(
                "SELECT " .
                "category.* " .
                "FROM " .
                "tab_grn_space_space AS space, " .
                "tab_grn_space_space_application AS space_application, " .
                "tab_grn_space_category_hierarchy AS hierarchy, " .
                "tab_grn_space_category AS category " .
                "WHERE " .
                "category._id = hierarchy.col_category " .
                "AND " .
                "hierarchy.col_ancestor = space_application.col_root_category "
                .
                "AND " .
                "space_application.col_space = space._id " .
                "AND " .
                "space._id = '{$db->escape($spaceId)}' ;"
            );

            $categoryCollection = new CategoryCollection();
            while ($row = $db->fetch_assoc($result)) {
                $categoryCollection->appendBean(new Category($row,
                    Category::NOT_CHECK_INPUT));
            }
            $db->free_result($result);

            return $categoryCollection;
        } catch (GrnDatabaseException $e) {

        }
    }

    /**
     * Get space list with the disk space which is consumed by each space.
     *
     * @param \grn\space\data\condition\SpaceWithFileSearchCondition $condition
     *
     * @return SpaceCollection
     */
    public function selectSpaceListWithFileUsage(
        SpaceWithFileSearchCondition $condition
    ) {
        try {
            $db = $this->getDatabaseConnection();
            $query = "SELECT SQL_CALC_FOUND_ROWS " .
                     "space._id, " .
                     "space.col_space_code, " .
                     "IFNULL(space_local.col_space_name, space.col_space_name) AS col_space_name, "
                     .
                     "space.col_is_builtin_icon, " .
                     "space.col_builtin_icon, " .
                     "space.col_category, " .
                     "space.col_is_public, " .
                     "space.col_creator, " .
                     "space.col_creator_name, " .
                     "space.col_create_timestamp, " .
                     "space.col_modifier, " .
                     "space.col_modifier_name, " .
                     "space.col_modify_timestamp, " .
                     "space.col_component_modify_timestamp, " .
                     "space.col_end_is_datetime, " .
                     "space.col_end_timestamp, " .
                     "icon.col_file_name AS icon_file_name, " .
                     "IFNULL(file_table.col_size, 0) AS fileUsage " .
                     "FROM " .
                     "tab_grn_space_space AS space " .
                     "LEFT JOIN " .
                     "tab_grn_space_icon AS icon " .
                     "ON space.col_builtin_icon = icon._id " .
                     "LEFT JOIN " .
                     "(" .
                     "tab_grn_space_space_local AS space_local " .
                     "INNER JOIN " .
                     "tab_cb_language_status AS space_l " .
                     "ON " .
                     "space_local.col_language = space_l._id AND space_l.col_language = '{$db->escape($condition->getLanguageCode())}' "
                     .
                     ") " .
                     "ON space._id = space_local.col_space " .
                     "LEFT JOIN " .
                     "(" .
                     "SELECT " .
                     "space_id, SUM(col_size) AS col_size " .
                     "FROM " .
                     "(" .
                     "(" .
                     "SELECT " .
                     "  space._id AS space_id" .
                     ", filebody._id" .
                     ", filebody.col_size" .
                     " FROM " .
                     "tab_grn_space_filebody AS filebody, " .
                     "tab_grn_space_file AS _file, " .
                     "tab_grn_space_thread_file AS thread_file, " .
                     "tab_grn_space_thread AS thread, " .
                     "tab_grn_space_category AS category, " .
                     "tab_grn_space_category_hierarchy AS hierarchy, " .
                     "tab_grn_space_space_application AS space_application, " .
                     "tab_grn_space_application AS application, " .
                     "tab_grn_space_space AS space " .
                     "WHERE " .
                     "filebody.col_file = _file._id " .
                     "AND _file._id = thread_file.col_file " .
                     "AND thread_file.col_thread = thread._id " .
                     "AND thread.col_category = category._id " .
                     "AND category._id = hierarchy.col_category " .
                     "AND hierarchy.col_ancestor = space_application.col_root_category "
                     .
                     "AND space_application.col_application = application._id "
                     .
                     "AND application.col_application_code = '"
                     . Application::APPLICATION_CODE_DISCUSSION . "' " .
                     "AND space_application.col_space = space._id " .
                     "AND space.col_category = '{$db->escape($condition->getSearchCategoryId())}' "
                     .
                     ")" .
                     "UNION " .
                     "( " .
                     "SELECT " .
                     "  space._id AS space_id" .
                     ", filebody._id" .
                     ", filebody.col_size" .
                     " FROM " .
                     "tab_grn_space_filebody AS filebody, " .
                     "tab_grn_space_file AS _file, " .
                     "tab_grn_space_comment_file AS comment_file, " .
                     "tab_grn_space_comment AS _comment, " .
                     "tab_grn_space_thread_comment AS thread_comment, " .
                     "tab_grn_space_thread AS thread, " .
                     "tab_grn_space_category AS category, " .
                     "tab_grn_space_category_hierarchy AS hierarchy, " .
                     "tab_grn_space_space_application AS space_application, " .
                     "tab_grn_space_application AS application, " .
                     "tab_grn_space_space AS space " .
                     "WHERE " .
                     "filebody.col_file = _file._id " .
                     "AND _file._id = comment_file.col_file " .
                     "AND comment_file.col_comment = _comment._id " .
                     "AND _comment._id = thread_comment.col_comment " .
                     "AND thread_comment.col_thread = thread._id " .
                     "AND thread.col_category = category._id " .
                     "AND category._id = hierarchy.col_category " .
                     "AND hierarchy.col_ancestor = space_application.col_root_category "
                     .
                     "AND space_application.col_application = application._id "
                     .
                     "AND application.col_application_code = '"
                     . Application::APPLICATION_CODE_DISCUSSION . "' " .
                     "AND space_application.col_space = space._id " .
                     "AND space.col_category = '{$db->escape($condition->getSearchCategoryId())}' "
                     .
                     ") " .
                     "UNION " .
                     "( " .
                     "SELECT " .
                     "  space._id AS space_id" .
                     ", filebody._id" .
                     ", filebody.col_size" .
                     " FROM " .
                     "tab_grn_space_filebody AS filebody, " .
                     "tab_grn_space_file AS _file, " .
                     "tab_grn_space_todo_file AS todo_file, " .
                     "tab_grn_space_todo AS todo, " .
                     "tab_grn_space_category AS category, " .
                     "tab_grn_space_category_hierarchy AS hierarchy, " .
                     "tab_grn_space_space_application AS space_application, " .
                     "tab_grn_space_application AS application, " .
                     "tab_grn_space_space AS space " .
                     "WHERE " .
                     "filebody.col_file = _file._id " .
                     "AND _file._id = todo_file.col_file " .
                     "AND todo_file.col_todo = todo._id " .
                     "AND todo.col_category = category._id " .
                     "AND category._id = hierarchy.col_category " .
                     "AND hierarchy.col_ancestor = space_application.col_root_category "
                     .
                     "AND space_application.col_application = application._id "
                     .
                     "AND application.col_application_code = '"
                     . Application::APPLICATION_CODE_TODO . "' " .
                     "AND space_application.col_space = space._id " .
                     "AND space.col_category = '{$db->escape($condition->getSearchCategoryId())}' "
                     .
                     ") " .
                     "UNION " .
                     "( " .
                     "SELECT " .
                     "  space._id AS space_id" .
                     ", filebody._id" .
                     ", filebody.col_size" .
                     " FROM " .
                     "tab_grn_space_filebody AS filebody, " .
                     "tab_grn_space_file AS _file, " .
                     "tab_grn_space_comment_file AS comment_file, " .
                     "tab_grn_space_comment AS _comment, " .
                     "tab_grn_space_todo_comment AS todo_comment, " .
                     "tab_grn_space_todo AS todo, " .
                     "tab_grn_space_category AS category, " .
                     "tab_grn_space_category_hierarchy AS hierarchy, " .
                     "tab_grn_space_space_application AS space_application, " .
                     "tab_grn_space_application AS application, " .
                     "tab_grn_space_space AS space " .
                     "WHERE " .
                     "filebody.col_file = _file._id " .
                     "AND _file._id = comment_file.col_file " .
                     "AND comment_file.col_comment = _comment._id " .
                     "AND _comment._id = todo_comment.col_comment " .
                     "AND todo_comment.col_todo = todo._id " .
                     "AND todo.col_category = category._id " .
                     "AND category._id = hierarchy.col_category " .
                     "AND hierarchy.col_ancestor = space_application.col_root_category "
                     .
                     "AND space_application.col_application = application._id "
                     .
                     "AND application.col_application_code = '"
                     . Application::APPLICATION_CODE_TODO . "' " .
                     "AND space_application.col_space = space._id " .
                     "AND space.col_category = '{$db->escape($condition->getSearchCategoryId())}' "
                     .
                     ") " .
                     ") AS tmp_space_filebody " .
                     "GROUP BY " .
                     "tmp_space_filebody.space_id " .
                     ") AS file_table " .
                     "ON space._id = file_table.space_id ";

            $query .= " WHERE space.col_category = '{$db->escape($condition->getSearchCategoryId())}' ";
            $now = time();
            switch ($condition->getSearchSpaceExpirationDate()) {
                case SpaceSearchCondition::SEARCH_SPACE_NOT_EXPIRED:
                    $query .= cb_queryf($db,
                        " AND (space.col_end_timestamp IS NULL OR space.col_end_timestamp >= '@S') ",
                        $now);
                    break;

                case SpaceSearchCondition::SEARCH_SPACE_EXPIRED:
                    $query .= cb_queryf($db,
                        " AND (space.col_end_timestamp IS NOT NULL AND space.col_end_timestamp < '@S') ",
                        $now);
                    break;
            }

            if (count($condition->getOrderSortArray())) {
                $query .= " ORDER BY ";

                $isNeedComma = false;
                foreach ($condition->getOrderSortArray() as $orderById) {
                    if ($isNeedComma) {
                        $query .= ",";
                    }
                    switch ($orderById) {
                        case SpaceWithFileSearchCondition::SORT_ID_ASC:
                            $query .= "_id ASC ";
                            break;
                        case SpaceWithFileSearchCondition::SORT_ID_DESC:
                            $query .= "_id DESC ";
                            break;
                        case SpaceWithFileSearchCondition::SORT_FILE_SIZE_ASC:
                            $query .= "fileUsage ASC ";
                            break;
                        case SpaceWithFileSearchCondition::SORT_FILE_SIZE_DESC:
                            $query .= "fileUsage DESC ";
                            break;
                    }
                }
            }

            $query = $db->select_format($query,
                $condition->getOffset(), $condition->getLimit());
            $spaceCollection = new SpaceCollection();
            $result = $db->query($query);
            while ($row = $db->fetch_assoc($result)) {
                $spaceCollection->appendBean(new Space($row,
                    Space::NOT_CHECK_INPUT));
            }
            $db->free_result($result);

            $result = $db->query("SELECT FOUND_ROWS();");
            $row = $db->fetch_assoc($result);
            $spaceCollection->setCountNoLimit($row["FOUND_ROWS()"]);
            $db->free_result($result);

            return $spaceCollection;
        } catch (GrnDatabaseException $e) {

        }

        return;
    }

    /**
     * @return \grn\space\data\collection\SpaceCollection
     */
    public function getAllSpaceForFtsFullIndexer()
    {
        $spaceCollection = new SpaceCollection();
        try {
            $db = $this->getDatabaseConnection();
            $result = $db->query(
                "SELECT " .
                "_id, " .
                "col_space_code, " .
                "col_space_name, " .
                "col_modifier, " .
                "col_component_modify_timestamp " .
                "FROM " .
                "tab_grn_space_space;"
            );
            while ($row = $db->fetch_assoc($result)) {
                $spaceCollection->appendBean(new Space($row));
            }
            $db->free_result($result);
        } catch (GrnDatabaseException $e) {

        }

        return $spaceCollection;
    }

    /**
     * @param  string[] $categoryIds
     * @param  string   $userId
     * @param  string[] $user_group_ids
     * @param  string[] $user_role_ids
     * @param  int|null $expiration_type accepts three values
     *                                   NULL: Don't filter
     *                                   1: SpaceSearchCondition::SEARCH_SPACE_NOT_EXPIRED - Space is not expired
     *                                   2: SpaceSearchCondition::SEARCH_SPACE_EXPIRED - Space is expired
     *
     * @return string[]
     */
    public function selectSpaceIdsByCategoryIds(
        $categoryIds,
        $userId,
        $user_group_ids = [],
        $user_role_ids = [],
        $expiration_type = null
    ) {
        $db = $this->getDatabaseConnection();

        $query = "SELECT space._id FROM tab_grn_space_space AS space";
        $query .= " LEFT JOIN tab_grn_space_space_user AS space_user ON space._id = space_user.col_space";
        $query .= " WHERE";
        $query .= " space.col_category IN ( " . implode(',', $categoryIds)
                  . " )";
        $query .= " AND ( space.col_is_public = 1 OR space_user.col_user = '{$db->escape($userId)}'";
        if (count($user_group_ids) > 0) {
            $query .= " OR space_user.col_group IN( " . implode(',',
                    $user_group_ids) . " )";
        }
        if (count($user_role_ids) > 0) {
            $query .= " OR space_user.col_role IN( " . implode(',',
                    $user_role_ids) . " )";
        }
        $query .= " )";

        switch ($expiration_type) {
            case SpaceSearchCondition::SEARCH_SPACE_NOT_EXPIRED:
                $query .= cb_queryf($db,
                    " AND (space.col_end_timestamp IS NULL OR space.col_end_timestamp >= '@S') ",
                    time());
                break;

            case SpaceSearchCondition::SEARCH_SPACE_EXPIRED:
                $query .= cb_queryf($db,
                    " AND (space.col_end_timestamp IS NOT NULL AND space.col_end_timestamp < '@S') ",
                    time());
                break;
        }

        $query .= " GROUP BY space._id ;";

        $result = $db->query($query);
        $spaceIds = [];
        while ($row = $db->fetch_assoc($result)) {
            $spaceIds[] = $row['_id'];
        }
        $db->free_result($result);

        return $spaceIds;
    }
}
