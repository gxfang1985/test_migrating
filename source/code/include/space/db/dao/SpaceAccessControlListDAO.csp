<?php

namespace grn\space\db\dao;

use grn\space\common\db\dao\DataAccessControlAbstract;
use grn\space\common\exception\ErrorCode;
use grn\space\common\exception\GrnDatabaseException;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\data\bean\SpaceAccessControlList;
use grn\space\data\collection\SpaceAccessControlListCollection;
use grn\space\data\condition\SpaceAccessControlListSearchCondition;


/**
 * Database Back Layer
 * This layer mediates the database front layer and the DB.
 *
 * SpaceAccessControlList Data Access Object Class
 * Accept requests from the database front layer for all SpaceAccessControlList
 **/
class SpaceAccessControlListDAO extends DataAccessControlAbstract
{
    /**
     * The select of a space access control list is executed to the database.
     *
     * @param  SpaceAccessControlListCollection $spaceAclCollection
     *
     * @throws GrnDatabaseException             Any error in the database.
     */
    public function insertSpaceAccessControleLists($spaceAclCollection)
    {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query
                = "INSERT INTO tab_grn_space_space_acl (col_space, col_acl, col_is_grant) VALUES ";

            $tempIsNeedComma = false;
            /** @var \grn\space\data\bean\SpaceAccessControlList $spaceAcl */
            foreach ($spaceAclCollection as $spaceAcl) {
                if ($tempIsNeedComma) {
                    $query .= ", ";
                }

                $query .= "(";
                $query .= "'" . $dbConn->escape($spaceAcl->getSpaceId())
                          . "', ";
                $query .= "'" . $dbConn->escape($spaceAcl->getAclId()) . "', ";
                $query .= "'" . (($spaceAcl->isGrant()) ? "1" : "0") . "'  ";
                $query .= ")";

                $tempIsNeedComma = true;
            }

            $query .= ";";

            $dbConn->query($query);
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }
    }

    /**
     * The update of space access control list is executed to the database.
     *
     * @param  SpaceAccessControlList $spaceAcl SpaceAccessControlList
     *
     * @throws GrnDatabaseException     Any error in the database.
     */
    public function updateSpaceAccessControleList(
        SpaceAccessControlList $spaceAcl
    ) {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "UPDATE tab_grn_space_space_acl SET ";
            $query .= " col_is_grant='" . (($spaceAcl->isGrant()) ? "1" : "0")
                      . "'  ";
            $query .= " WHERE col_space =  '{$dbConn->escape($spaceAcl->getSpaceId())}'";
            $query .= " AND   col_acl =  '{$dbConn->escape($spaceAcl->getAclId())}'";
            $query .= ";";

            $dbConn->query($query);
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }
    }

    /**
     * The select of a space access control list is executed to the database.
     *
     * @param     string $authorityCode The constant has been defined in Authority class
     * @param     string $spaceId       space sequence id
     *
     * @throws    GrnDataNotFoundException          specified space access control list is not found.
     * @throws    GrnDatabaseException              Any error in the database.
     * @return    SpaceAccessControlList
     */
    public function selectSpaceAccessControleList($authorityCode, $spaceId)
    {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "SELECT ";
            $query .= " spaceAcl.col_acl AS _id, ";
            $query .= " spaceAcl.col_space, ";
            $query .= "spaceAcl.col_is_grant ";
            $query .= " FROM tab_grn_space_space_acl AS spaceAcl";
            $query .= " ,    tab_grn_space_access_control_list AS acl";
            $query .= " ,    tab_grn_space_authority AS auth";
            $query .= " WHERE spaceAcl.col_acl = acl._id";
            $query .= " AND   acl.col_authority = auth._id";
            $query .= " AND   auth.col_authority_code = '{$dbConn->escape($authorityCode)}'";
            $query .= " AND   spaceAcl.col_space = '{$dbConn->escape($spaceId)}'";
            $query .= ";";

            $result = $dbConn->query($query);

            $row = $dbConn->fetch_assoc($result);
            $dbConn->free_result($result);
            if ( ! $row) {
                throw new GrnDataNotFoundException(ErrorCode::GRN_ACCESS_CONTROL_LIST_NOT_FOUND);
            }

            $spaceAcl = new SpaceAccessControlList($row,
                SpaceAccessControlList::NOT_CHECK_INPUT);
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        return $spaceAcl;
    }


    /**
     * The select of spaces is executed to the database.
     *
     * @param SpaceAccessControlListSearchCondition $spaceAclSearchCondition SpaceAccessControlListSearchCondition
     *
     * @throws GrnDatabaseException                 FOUND_ROWSが取れなかった。 Any error in the database.
     * @return SpaceAccessControlListCollection
     */
    public function searchSpaceAccessControlList(
        SpaceAccessControlListSearchCondition $spaceAclSearchCondition
    ) {
        static $cache = [];
        $cacheKey = serialize($spaceAclSearchCondition);

        // get cache
        if (isset($cache[$cacheKey])) {
            return $cache[$cacheKey];
        }

        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "SELECT";
            $query .= " spaceAcl.col_acl AS _id, ";
            $query .= " spaceAcl.col_space, ";
            $query .= " spaceAcl.col_is_grant";
            $query .= " FROM ";
            $query .= " tab_grn_space_space_acl AS spaceAcl, ";
            $query .= " tab_grn_space_access_control_list AS acl, ";
            $query .= " tab_grn_space_authority AS auth ";
            $query .= " WHERE spaceAcl.col_acl = acl._id";
            $query .= " AND acl.col_authority = auth._id";

            //Search condition space
            $query .= " AND spaceAcl.col_space IN (";
            $tempIsNeedComma = false;
            foreach (
                $spaceAclSearchCondition->getSearchSpaceIdArray() as $spaceId
            ) {
                if ($tempIsNeedComma) {
                    $query .= ", ";
                }

                $query .= "'" . $dbConn->escape($spaceId) . "'";

                $tempIsNeedComma = true;
            }
            $query .= ")";


            //Search condition authority code
            $query .= " AND auth.col_authority_code = '"
                      . $dbConn->escape($spaceAclSearchCondition->getSearchAuthorityCode())
                      . "'";


            //Order by
            $query .= " ORDER BY ";
            $tempIsNeedComma = false;
            foreach ($spaceAclSearchCondition->getOrderSortArray() as $sortType) {
                if ($tempIsNeedComma) {
                    $query .= ", ";

                }

                switch ($sortType) {
                    case SpaceAccessControlListSearchCondition::SORT_ID_ASC:
                        $query .= " _id ASC";
                        break;
                    case SpaceAccessControlListSearchCondition::SORT_ID_DESC:
                        $query .= " _id DESC";
                        break;
                }

                $tempIsNeedComma = true;
            }


            $result = $dbConn->query($query);


            $spaceAclCollection = new SpaceAccessControlListCollection();
            while ($row = $dbConn->fetch_assoc($result)) {
                $spaceAclCollection->appendBean(new SpaceAccessControlList($row,
                    SpaceAccessControlList::NOT_CHECK_INPUT));
            }
            $dbConn->free_result($result);

            //search total count
            $spaceAclCollection->setCountNoLimit(count($spaceAclCollection));
        } catch (GrnDatabaseException $e) {
            throw $e;
        }

        // set cache
        $cache[$cacheKey] = $spaceAclCollection;

        return $spaceAclCollection;
    }


    /**
     * Get the array of spaceId with spaceACL
     *
     * @param string $authorityCode   The constant has been defined in Authority class
     * @param string $operationUserId user sequence id
     *
     * @throws GrnDatabaseException             Any error in the database.
     * @return array
     */
    public function getSpaceIdArrayWithSpaceAccessControl(
        $authorityCode,
        $operationUserId
    ) {
        try {
            $dbConn = $this->getDatabaseConnection();
            $query
                = "SELECT _id FROM tab_cb_user WHERE col_deleted is NULL AND _id = '"
                  . $dbConn->escape($operationUserId) . "'";
            $result = $dbConn->query($query);
            if ( ! $dbConn->fetch_assoc($result)) {
                $dbConn->free_result($result);

                return [];
            }
            $dbConn->free_result($result);

            $query = "SELECT spaceAcl.col_space ";
            $query .= "FROM ";
            $query .= "tab_grn_space_authority AS auth ";
            $query .= "INNER JOIN tab_grn_space_access_control_list AS acl ON auth._id = acl.col_authority ";
            $query .= "INNER JOIN tab_grn_space_space_acl AS spaceAcl ON acl._id = spaceAcl.col_acl ";
            $query .= "LEFT JOIN (";
            $query .= "SELECT acl._id ";
            $query .= "FROM ";
            $query .= "tab_grn_space_authority AS auth ";
            $query .= "INNER JOIN tab_grn_space_access_control_list AS acl ON auth._id = acl.col_authority ";
            $query .= "INNER JOIN tab_grn_space_acl_role AS aclRole ON acl._id = aclRole.col_acl ";
            $query .= "INNER JOIN tab_cb_userrolerelation AS roleUserRl ON aclRole.col_role = roleUserRl.col_role ";
            $query .= "WHERE roleUserRl.col_user = '"
                      . $dbConn->escape($operationUserId) . "' ";
            $query .= "AND auth.col_authority_code = '"
                      . $dbConn->escape($authorityCode) . "' ";

            $query .= " UNION ";

            $query .= "SELECT acl._id ";
            $query .= "FROM ";
            $query .= "tab_grn_space_authority AS auth ";
            $query .= "INNER JOIN tab_grn_space_access_control_list AS acl ON auth._id = acl.col_authority ";
            $query .= "INNER JOIN tab_grn_space_acl_group AS aclGroup ON acl._id = aclGroup.col_acl ";
            $query .= "INNER JOIN tab_cb_usergrouprelation AS groupUserRl ON aclGroup.col_group = groupUserRl.col_group ";
            $query .= "WHERE groupUserRl.col_user = '"
                      . $dbConn->escape($operationUserId) . "' ";
            $query .= "AND auth.col_authority_code = '"
                      . $dbConn->escape($authorityCode) . "' ";

            $query .= " UNION ";

            $query .= "SELECT acl._id ";
            $query .= "FROM ";
            $query .= "tab_grn_space_authority AS auth ";
            $query .= "INNER JOIN tab_grn_space_access_control_list AS acl ON auth._id = acl.col_authority ";
            $query .= "INNER JOIN tab_grn_space_acl_user AS aclUser ON acl._id = aclUser.col_acl ";
            $query .= "WHERE aclUser.col_user = '"
                      . $dbConn->escape($operationUserId) . "' ";
            $query .= "AND auth.col_authority_code = '"
                      . $dbConn->escape($authorityCode) . "' ";

            $query .= " UNION ";

            $query .= "SELECT acl._id ";
            $query .= "FROM ";
            $query .= "tab_grn_space_authority AS auth ";
            $query .= "INNER JOIN tab_grn_space_access_control_list AS acl ON auth._id = acl.col_authority ";
            $query .= "INNER JOIN tab_grn_space_acl_dynamic_role AS aclDynamicRole ON acl._id = aclDynamicRole.col_acl ";
            $query .= "INNER JOIN tab_grn_space_dynamic_role AS dynamicRole ON aclDynamicRole.col_dynamic_role = dynamicRole._id ";
            $query .= "WHERE dynamicRole.col_dynamic_role_code = 'Everyone' ";
            $query .= "AND auth.col_authority_code = '"
                      . $dbConn->escape($authorityCode) . "' ";
            $query .= ") AS myAcl ";
            $query .= "ON spaceAcl.col_acl = myAcl._id ";
            $query .= "WHERE ";
            $query .= "auth.col_authority_code = '"
                      . $dbConn->escape($authorityCode) . "' ";
            $query .= "AND ((spaceAcl.col_is_grant='0' AND myAcl._id IS NULL) OR (spaceAcl.col_is_grant='1' AND myAcl._id IS NOT NULL)) ";

            $result = $dbConn->query($query);

            $resutArray = [];
            while ($row = $dbConn->fetch_assoc($result)) {
                $resutArray[] = $row['col_space'];
            }
            $dbConn->free_result($result);
        } catch (GrnDatabaseException $e) {
            throw $e;
        }

        return $resutArray;
    }
}
