<?php

namespace grn\space\db\dao;

use grn\space\data\bean\Folder;
use grn\space\data\collection\FolderCollection;
use grn\space\common\db\dao\DataAccessControlAbstract;
use grn\space\data\condition\FolderSearchCondition;

/**
 * Class FolderDAO
 */
class FolderDAO extends DataAccessControlAbstract
{
    const TABLE_SPACE = 'tab_grn_space_space';
    const TABLE_FOLDER = 'tab_grn_space_space_folder';
    const TABLE_THREAD = 'tab_grn_space_thread';

    private $_db;

    /**
     * コンストラクタ
     */
    function __construct()
    {
        $this->_db = $this->getDatabaseConnection();
    }

    /**
     * @param FolderSearchCondition $folderCondition
     *
     * @return string
     */
    private function _objectToConditionQuery(
        FolderSearchCondition $folderCondition
    ) {
        $arrConditions = [];
        $inDb = $this->getDatabaseConnection();

        if ($folderCondition->getFolderId() > 0) {
            $arrConditions[] = cb_queryf($inDb, "fol._id = '@S'",
                $folderCondition->getFolderId());
        }

        if ($folderCondition->getSpaceId() > 0) {
            $arrConditions[] = cb_queryf(
                $inDb, "fol.col_space = '@S'", $folderCondition->getSpaceId()
            );
        }

        $strCondition = " " . join(" AND ", $arrConditions);

        return $strCondition;
    }

    /**
     * @param Folder $folder
     *
     * @return int insert id
     */
    public function insert(Folder $folder)
    {
        $inDb = $this->getDatabaseConnection();
        $query = cb_queryf(
            $inDb,
            "INSERT INTO @S(col_folder_code, col_folder_name, col_memo, col_space, col_display_order)",
            self::TABLE_FOLDER
        );

        $query .= cb_queryf(
            $inDb, " VALUES ('@S', '@S', '@S', '@S', '@S');",
            $folder->getFolderCode(),
            $folder->getFolderName(),
            $folder->getMemo(),
            $folder->getspaceId(),
            $folder->getDisplayOrder()
        );

        $this->executeQuery($inDb, $query);

        return $inDb->get_insert_id();
    }

    /**
     * @param Folder $folder
     *
     * @return bool|int
     */
    public function update(Folder $folder)
    {
        $dbConn = $this->getDatabaseConnection();

        $query = cb_queryf($dbConn, "UPDATE @S SET", self::TABLE_FOLDER);

        $query .= cb_queryf($dbConn, " col_folder_name='@S',",
            $folder->getFolderName());
        $query .= cb_queryf($dbConn, " col_memo='@S',", $folder->getMemo());
        $query .= cb_queryf($dbConn, " col_space='@S',", $folder->getSpaceId());
        $query .= cb_queryf($dbConn, " col_display_order='@S'",
            $folder->getDisplayOrder());

        $query .= cb_queryf($dbConn, " WHERE _id ='@S';", $folder->getId());

        $this->executeQuery($dbConn, $query);

        return $dbConn->affected_rows();
    }

    /**
     * @param $folderIdList
     *
     * @return bool|int
     */
    public function deleteFolderList($folderIdList)
    {
        $dbConn = $this->getDatabaseConnection();
        $query = cb_queryf($dbConn, "DELETE FROM @S WHERE _id IN (@A);",
            self::TABLE_FOLDER, $folderIdList);
        $this->executeQuery($dbConn, $query);
        $deleteCount = $dbConn->affected_rows();

        return $deleteCount;
    }

    /**
     * @param $folderId
     *
     * @return Folder
     */
    public function getFolder($folderId)
    {
        $dbConn = $this->getDatabaseConnection();

        $query = "SELECT";
        $query .= " _id,";
        $query .= " col_folder_code,";
        $query .= " col_folder_name,";
        $query .= " col_memo,";
        $query .= " col_space,";
        $query .= " col_display_order";
        $query .= " FROM " . self::TABLE_FOLDER;
        $query .= cb_queryf($dbConn, " WHERE _id='@S';", $folderId);

        $result = $this->executeQuery($dbConn, $query);

        $row = $dbConn->fetch_assoc($result);
        $dbConn->free_result($result);

        if ($row == false) {
            return new Folder();
        }

        return new Folder($row);
    }

    /**
     * @param FolderSearchCondition $folderCondition
     *
     * @return FolderCollection
     */
    public function getListByCondition(FolderSearchCondition $folderCondition)
    {
        $dbConn = $this->getDatabaseConnection();

        $query = "SELECT";
        $query .= " fol._id,";
        $query .= " fol.col_folder_code,";
        $query .= " fol.col_folder_name,";
        $query .= " fol.col_memo,";
        $query .= " fol.col_space,";
        $query .= " fol.col_display_order,";
        $query .= " COUNT(th._id) AS number_thread";

        $query .= " FROM " . self::TABLE_FOLDER . " AS fol LEFT JOIN "
                  . self::TABLE_THREAD . " AS th";
        $query .= " ON fol._id = th.col_folder";

        $strCondition = $this->_objectToConditionQuery($folderCondition);
        $strCondition = cb_trim($strCondition);

        if (strlen($strCondition) > 0) {
            $query .= " WHERE " . $strCondition;
        }
        $query .= " GROUP BY fol._id";
        $query .= " ORDER BY col_display_order ASC, _id DESC;";
        $result = $this->executeQuery($dbConn, $query);


        $folderCollection = new FolderCollection();
        while ($rawData = $dbConn->fetch_assoc($result)) {
            $folderCollection->appendBean(new Folder($rawData));
        }

        $dbConn->free_result($result);

        return $folderCollection;

    }

    /**
     * @param \CB_DatabaseConnection $inDb
     * @param                        $query
     *
     * @return mixed
     */
    private function executeQuery($inDb, $query)
    {
        $result = $inDb->query($query);

        if ($result === false) {
            $inDb->throwError(['query' => 'query failed: ' . $query]);
        }

        return $result;
    }
}
