<?php

namespace grn\space\db\dao;

use grn\space\common\db\dao\DataAccessControlAbstract;
use grn\space\common\exception\ErrorCode;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\common\exception\GrnInvalidArgumentException;
use grn\space\common\exception\GrnDatabaseException;
use grn\space\data\bean\SpaceLocal;
use grn\space\data\collection\SpaceLocalCollection;

/**
 * Class SpaceLocalDAO
 */
class SpaceLocalDAO extends DataAccessControlAbstract
{
    /**
     * Insert a record into tab_grn_space_space_local.
     * When the record is duplicated, this method updates col_name value of the record.
     *
     * The retuend value is a little tricky.
     * 0 : There had been the same record already so that no record was changed.
     * 1 : There had been no record whose col_category and col_language were the same with $categoryLocal so that a new record was inserted.
     * 2 : There had been the record whose col_category and col_language were the same with $categoryLocal so that only col_category_name of the record was updated.
     *
     * @param \grn\space\data\bean\SpaceLocal $spaceLocal
     *
     * @return integer the number of affected rows.
     * @throws GrnDatabaseException
     */
    public function insertOnDuplicateUpdate(SpaceLocal $spaceLocal)
    {
        try {
            $db = $this->getDatabaseConnection();

            $db->query(
                "INSERT INTO " .
                "tab_grn_space_space_local (col_space, col_space_name, col_language) "
                .
                "SELECT " .
                "'{$db->escape($spaceLocal->getSpaceId())}', " .
                "'{$db->escape($spaceLocal->getSpaceName())}', " .
                "language._id " .
                "FROM " .
                "tab_cb_language_status AS language " .
                "WHERE " .
                "language.col_language = '{$db->escape($spaceLocal->getLanguageCode())}' "
                .
                "ON DUPLICATE KEY " .
                "UPDATE " .
                "col_space_name = '{$db->escape($spaceLocal->getSpaceName())}';"
            );

            return $db->affected_rows();
        } catch (GrnDatabaseException $exception) {
            //GrnDatabaseException might be caught here someday...
            throw $exception;
        }
    }

    /**
     * Select SpaceLocal by Space ID
     *
     * @param string $spaceId
     *
     * @return SpaceLocalCollection
     * @throws GrnDatabaseException
     */
    public function searchBySpaceId($spaceId)
    {
        try {
            $db = $this->getDatabaseConnection();

            $result = $db->query(
                "SELECT " .
                "1 AS _id, "
                . // This is dummy data to set SpaceLocal up as a BeanAbstract. BeanAbstract requires "_id".
                "local.col_space, " .
                "local.col_space_name, " .
                "language.col_language " .
                "FROM " .
                "tab_grn_space_space_local AS local, " .
                "tab_cb_language_status AS language " .
                "WHERE " .
                "local.col_language = language._id " .
                "AND " .
                "local.col_space = '{$db->escape($spaceId)}';"
            );

            $spaceLocalCollection = new SpaceLocalCollection();
            while ($row = $db->fetch_assoc($result)) {
                $spaceLocalCollection->appendBean(new SpaceLocal($row,
                    SpaceLocal::NOT_CHECK_INPUT));
            }

            $db->free_result($result);

            return $spaceLocalCollection;
        } catch (GrnDatabaseException $exception) {
            //GrnDatabaseException might be caught here someday...
            throw $exception;
        }
    }

    /**
     * Delete SpaceLocal
     *
     * @param \grn\space\data\bean\SpaceLocal $spaceLocal
     * @param string                          $languageId
     *
     * @return SpaceLocal
     * @throws GrnDataNotFoundException
     * @throws GrnDatabaseException
     */
    public function delete(SpaceLocal $spaceLocal, $languageId)
    {
        try {
            $db = $this->getDatabaseConnection();

            $db->query(
                "DELETE FROM " .
                "tab_grn_space_space_local " .
                "WHERE " .
                "col_space = '{$db->escape($spaceLocal->getSpaceId())}' " .
                "AND " .
                "col_language = '{$db->escape($languageId)}';"
            );
            if ($db->affected_rows() == 0) {
                throw new GrnDataNotFoundException(ErrorCode::GRN_SPACE_LOCAL_NOT_FOUND);
            }
        } catch (GrnDatabaseException $e) {
            throw $e;
        }

        return $spaceLocal;
    }

    /**
     * Return array which will be used to covert languageCode to languageId
     *
     * @return array
     * @throws GrnInvalidArgumentException
     */
    public function getLanguageTableArray()
    {
        try {
            $db = $this->getDatabaseConnection();

            $result = $db->query(
                "SELECT " .
                "* " .
                "FROM " .
                "tab_cb_language_status " .
                "ORDER BY " .
                "_id ;"
            );
            $retval = [];
            while ($row = $db->fetch_assoc($result)) {
                $retval[$row["col_language"]] = $row["_id"];
            }
            $db->free_result($result);

            return $retval;
        } catch (GrnInvalidArgumentException $e) {
            throw $e;
        }
    }
}
