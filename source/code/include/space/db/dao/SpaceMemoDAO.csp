<?php

namespace grn\space\db\dao;

use grn\space\common\db\dao\DataAccessControlAbstract;
use grn\space\common\exception\GrnDatabaseException;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\common\exception\ErrorCode;
use grn\space\common\utility\ValidateUtility;
use grn\space\data\bean\SpaceMemo;

/**
 * Class SpaceMemoDAO
 */
class SpaceMemoDAO extends DataAccessControlAbstract
{
    /**
     * Insert SpaceMemo
     *
     * @param \grn\space\data\bean\SpaceMemo $spaceMemo
     *
     * @throws GrnDatabaseException
     * @return \grn\space\data\bean\SpaceMemo
     */
    public function insertSpaceMemo(SpaceMemo $spaceMemo)
    {
        $db = $this->getDatabaseConnection();

        try {
            $query = "INSERT tab_grn_space_space_memo SET "
                     . "col_space = '" . $db->escape($spaceMemo->getId())
                     . "', ";

            if ($spaceMemo->isRichText()) {
                require_once('grn/controller.csp');
                $memoHtml
                    = grn_wash_script_without_style_attribute($spaceMemo->getMemo());
                $memo = grn_strip_tags($memoHtml);
                $query .= "col_memo_html = '" . $db->escape($memoHtml) . "', ";
                $query .= "col_memo = '" . $db->escape($memo) . "', ";
            } else {
                $query .= "col_memo_html = NULL, ";
                $query .= "col_memo = '" . $db->escape($spaceMemo->getMemo())
                          . "', ";
            }

            $query .= "col_is_rich_text = '" . ($spaceMemo->isRichText() ? "1"
                    : "0") . "', "
                      . "col_creator = '"
                      . $db->escape($spaceMemo->getCreatorId()) . "', "
                      . "col_creator_name = '"
                      . $db->escape($spaceMemo->getCreatorName()) . "', "
                      . "col_create_timestamp ='"
                      . $db->escape($spaceMemo->getCreateTimestamp()) . "', "
                      . "col_modifier = '"
                      . $db->escape($spaceMemo->getModifierId()) . "', "
                      . "col_modifier_name = '"
                      . $db->escape($spaceMemo->getModifierName()) . "', "
                      . "col_modify_timestamp = '"
                      . $db->escape($spaceMemo->getModifyTimestamp()) . "';";

            $db->query($query);

            $spaceMemo->setId($db->get_insert_id());
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        return $spaceMemo;
    }

    /**
     * Update SpaceMemo
     *
     * @param \grn\space\data\bean\SpaceMemo $spaceMemo
     *
     * @throws GrnDatabaseException
     * @return \grn\space\data\bean\SpaceMemo
     */
    public function updateSpameMemo(SpaceMemo $spaceMemo)
    {
        $db = $this->getDatabaseConnection();

        try {
            $query = "UPDATE " .
                     "tab_grn_space_space_memo " .
                     "SET ";

            if ($spaceMemo->isRichText()) {
                require_once('grn/controller.csp');
                $memoHtml
                    = grn_wash_script_without_style_attribute($spaceMemo->getMemo());
                $memo = grn_strip_tags($memoHtml);
                $query .= "col_memo_html = '" . $db->escape($memoHtml) . "', ";
                $query .= "col_memo = '" . $db->escape($memo) . "', ";
            } else {
                $query .= "col_memo_html = NULL, ";
                $query .= "col_memo = '" . $db->escape($spaceMemo->getMemo())
                          . "', ";
            }

            $query .= "col_is_rich_text = '" . ($spaceMemo->isRichText() ? "1"
                    : "0") . "', ";

            if (ValidateUtility::isNull($spaceMemo->getCreatorId())) {
                $query .= "col_creator = NULL, ";
            } else {
                $query .= "col_creator='"
                          . $db->escape($spaceMemo->getCreatorId()) . "', ";
            }

            $query .= "col_creator_name = '"
                      . $db->escape($spaceMemo->getCreatorName()) . "', " .
                      "col_create_timestamp ='"
                      . $db->escape($spaceMemo->getCreateTimestamp()) . "', ";

            if (ValidateUtility::isNull($spaceMemo->getModifierId())) {
                $query .= "col_modifier = NULL, ";
            } else {
                $query .= "col_modifier='"
                          . $db->escape($spaceMemo->getModifierId()) . "', ";
            }

            $query .= "col_modifier_name = '"
                      . $db->escape($spaceMemo->getModifierName()) . "', " .
                      "col_modify_timestamp = '"
                      . $db->escape($spaceMemo->getModifyTimestamp()) . "' " .
                      "WHERE " .
                      "col_space = '" . $db->escape($spaceMemo->getId()) . "';";

            $db->query($query);

        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        return $spaceMemo;
    }

    /**
     * Select SpaceMemo
     *
     * @param string $spaceId
     *
     * @throws GrnDatabaseException
     * @throws \grn\space\common\exception\GrnDataNotFoundException
     * @return \grn\space\data\bean\SpaceMemo
     */
    public function selectSpaceMemo($spaceId)
    {
        $db = $this->getDatabaseConnection();

        try {
            $result = $db->query(
                "SELECT " .
                "col_space AS _id, " .
                "CASE col_is_rich_text WHEN '1' THEN col_memo_html ELSE col_memo END AS col_memo, "
                .
                "col_is_rich_text, " .
                "col_creator, " .
                "col_creator_name, " .
                "col_create_timestamp, " .
                "col_modifier, " .
                "col_modifier_name, " .
                "col_modify_timestamp " .
                "FROM " .
                "tab_grn_space_space_memo " .
                "WHERE " .
                "col_space='{$db->escape($spaceId)}';"
            );
            $row = $db->fetch_assoc($result);
            $db->free_result($result);

            if ( ! $row) {
                throw new GrnDataNotFoundException(ErrorCode::GRN_INVALID_SPACE_ID);
            }
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        return new SpaceMemo($row, SpaceMemo::NOT_CHECK_INPUT);
    }

    /**
     * Select SpaceMemo with its status whether it is open or closed.
     *
     * When there is no related record in tab_grn_space_space_memo_open_status,
     * The memo field is regarded as open(true)
     *
     * @param string $spaceId Space ID
     * @param string $userId  User ID
     *
     * @throws GrnDatabaseException
     * @throws \grn\space\common\exception\GrnDataNotFoundException
     * @return \grn\space\data\bean\SpaceMemo
     */
    public function selectSpaceMemoWithStatus($spaceId, $userId)
    {
        $db = $this->getDatabaseConnection();

        try {
            $result = $db->query(
                "SELECT " .
                "memo.col_space AS _id, " .
                "CASE memo.col_is_rich_text WHEN '1' THEN memo.col_memo_html ELSE memo.col_memo END AS col_memo, "
                .
                "memo.col_is_rich_text, " .
                "memo.col_creator, " .
                "memo.col_creator_name, " .
                "memo.col_create_timestamp, " .
                "memo.col_modifier, " .
                "memo.col_modifier_name, " .
                "memo.col_modify_timestamp, " .
                "IFNULL(status.col_is_memo_open, " .
                "IF(CHAR_LENGTH(col_memo) = 0, FALSE, TRUE)) AS isMemoOpen " .
                "FROM " .
                "tab_grn_space_space_memo AS memo " .
                "LEFT JOIN " .
                "tab_grn_space_space_memo_open_status AS status " .
                "ON " .
                "status.col_space = memo.col_space " .
                "AND " .
                "status.col_user = '{$db->escape($userId)}' " .
                "WHERE " .
                "memo.col_space = '{$db->escape($spaceId)}';"
            );
            $row = $db->fetch_assoc($result);
            $db->free_result($result);

            if ( ! $row) {
                throw new GrnDataNotFoundException(ErrorCode::GRN_INVALID_SPACE_ID);
            }
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        return new SpaceMemo($row, SpaceMemo::NOT_CHECK_INPUT);
    }

    /**
     * Delete SpaceMemo
     *
     * @param \grn\space\data\bean\SpaceMemo $spaceMemo
     *
     * @throws GrnDatabaseException
     * @throws \grn\space\common\exception\GrnDataNotFoundException
     * @return \grn\space\data\bean\SpaceMemo
     */
    public function deleteSpaceMemo(SpaceMemo $spaceMemo)
    {
        try {
            $db = $this->getDatabaseConnection();
            $db->query("DELETE FROM tab_grn_space_space_memo WHERE col_space = '{$db->escape($spaceMemo->getId())}';");

            if ($db->affected_rows() == 0) {
                throw new GrnDataNotFoundException(ErrorCode::GRN_INVALID_SPACE_ID);
            }
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        return $spaceMemo;
    }

    /**
     * @param int $startId
     * @param int $endId
     * @param int $maxLength
     *
     * @return array
     */
    public function getAllSpaceMemoForFtsFullIndexer(
        $startId,
        $endId,
        $maxLength
    ) {
        $db = $this->getDatabaseConnection();
        $result = $db->query(
            "SELECT " .
            "s._id, " .
            "s.col_component_modify_timestamp, " .
            "s.col_modifier, " .
            "CASE WHEN CHAR_LENGTH(m.col_memo) > {$db->escape($maxLength)} " .
            "THEN 1 ELSE 0 END AS truncated, " .
            "LEFT(m.col_memo, {$db->escape($maxLength)}) AS col_memo " .
            "FROM " .
            "tab_grn_space_space_memo AS m," .
            "tab_grn_space_space AS s " .
            "WHERE " .
            "s._id>={$db->escape($startId)} AND " .
            "{$db->escape($endId)}>=s._id AND " .
            "m.col_space=s._id " .
            "FOR UPDATE"
        );
        $rows = [];
        while ($row = $db->fetch_assoc($result)) {
            $rows[] = $row;
        }
        $db->free_result($result);

        return $rows;
    }
}
