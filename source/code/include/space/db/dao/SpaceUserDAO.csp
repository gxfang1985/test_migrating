<?php

namespace grn\space\db\dao;

use grn\grn\MemberLogic;
use grn\space\common\db\dao\DataAccessControlAbstract;
use grn\space\common\data\collection\BeanCollectionAbstract;
use grn\space\common\exception\ErrorCode;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\common\exception\GrnDatabaseException;
use grn\space\common\exception\GrnInvalidArgumentException;
use grn\space\data\bean\SpaceUser;
use grn\space\data\collection\SpaceCollection;
use grn\space\data\collection\SpaceUserCollection;
use grn\space\data\condition\SpaceUserSearchCondition;
use grn\grn\access\service\AppAccess;
use grn\space\common\utility\SpaceMemberUtility;
use grn\space\common\logic\SpaceMemberLogic;

/**
 * Class SpaceUserDAO
 */
class SpaceUserDAO extends DataAccessControlAbstract
{
    /**
     * @param SpaceUserCollection $space_user_collection
     */
    public function insertSpaceUserCollection(
        SpaceUserCollection $space_user_collection
    ) {
        $db = $this->getDatabaseConnection();

        $values_statement = [];
        /** @var SpaceUser $space_user */
        foreach ($space_user_collection as $space_user) {
            $escaped_space_id = "'" . $db->escape($space_user->getSpaceId())
                                . "'";

            $escaped_member_id = "'" . $db->escape($space_user->getMemberID())
                                 . "'";
            $escaped_user_id = null;
            $escaped_group_id = null;
            $escaped_role_id = null;
            switch ($space_user->getMemberType()) {
                case MemberLogic::TYPE_USER :
                    $escaped_user_id = $escaped_member_id;
                    break;
                case MemberLogic::TYPE_ORGANIZATION :
                    $escaped_group_id = $escaped_member_id;
                    break;
                case MemberLogic::TYPE_STATIC_ROLE :
                    $escaped_role_id = $escaped_member_id;
                    break;
                default :
                    cb_throw_error();
            }

            $escaped_display_order = "'"
                                     . $db->escape($space_user->getDisplayOrder())
                                     . "'";

            $values = "(";
            $values .= $escaped_space_id;
            $values .= ",";
            $values .= $escaped_user_id ?? "null";
            $values .= ",";
            $values .= $escaped_group_id ?? "null";
            $values .= ",";
            $values .= $escaped_role_id ?? "null";
            $values .= ",";
            $values .= $escaped_display_order;
            $values .= ")";

            $values_statement[] = $values;

        }

        $query
            = sprintf("INSERT INTO tab_grn_space_space_user(col_space, col_user, col_group, col_role, col_display_order) VALUES %s;",
            implode($values_statement, ","));
        $db->query($query);
    }

    /**
     * @param $spaceId
     * @param $userId
     *
     * @return SpaceUser
     * @throws GrnDataNotFoundException
     */
    public function selectSpaceUser($spaceId, $userId)
    {
        $db = $this->getDatabaseConnection();
        $result = $db->query(
            "SELECT " .
            "space_user.col_user AS _id, " .
            "space_user.col_space, " .
            "space_user.col_display_order, " .
            "user.col_valid AS " . MemberLogic::IS_INVALID_USER . " " .
            "FROM " .
            "tab_grn_space_space_user AS space_user, " .
            "tab_cb_user AS user " .
            "WHERE " .
            "space_user.col_user = user._id " .
            "AND " .
            "space_user.col_space = '{$db->escape($spaceId)}' " .
            "AND " .
            "space_user.col_user = '{$db->escape($userId)}';"
        );
        $row = $db->fetch_assoc($result);
        $db->free_result($result);

        if ( ! $row) {
            throw new GrnDataNotFoundException(ErrorCode::GRN_INVALID_MEMBER);
        }

        return new SpaceUser($row, SpaceUser::NOT_CHECK_INPUT);
    }

    /**
     *
     * @param SpaceUserSearchCondition $spaceUserSearchCondition
     * @param string                   $operationUserId
     * @param array                    $item_value
     * @param string                   $languageCode
     *
     * @return SpaceUserCollection
     */
    public function searchSpaceUser(
        SpaceUserSearchCondition $spaceUserSearchCondition,
        $operationUserId,
        array $item_value,
        $languageCode
    ) {
        $db = $this->getDatabaseConnection();

        //Search items
        //選択した検索項目全体を一つの情報として考えて、検索ワードのいずれも持つレコードを抽出する。
        if ($spaceUserSearchCondition->getSearchItemBit()
            === SpaceUserSearchCondition::SEARCH_ITEM_NONE
        ) {
            $query = cb_queryf($db,
                "SELECT SQL_CALC_FOUND_ROWS " .
                " space_user.col_space," .
                " space_user._id," .
                " CASE" .
                " WHEN space_user.col_user IS NOT NULL THEN u._id " .
                "   WHEN space_user.col_group IS NOT NULL THEN g._id " .
                "   ELSE r._id " .
                " END member_id," .
                " CASE" .
                "   WHEN space_user.col_user IS NOT NULL THEN '"
                . MemberLogic::TYPE_USER . "'" .
                "   WHEN space_user.col_group IS NOT NULL THEN '"
                . MemberLogic::TYPE_ORGANIZATION . "'" .
                "   ELSE '" . MemberLogic::TYPE_STATIC_ROLE . "'" .
                " END member_type," .
                " CASE" .
                "   WHEN space_user.col_user IS NOT NULL THEN u.col_display_name"
                .
                "   WHEN space_user.col_group IS NOT NULL THEN IFNULL(gl.col_name, g.col_name)"
                .
                "   ELSE r.col_foreign_key" .
                " END displayName," .
                " space_user.col_display_order, " .
                " CASE" .
                "   WHEN space_user.col_user IS NOT NULL THEN u.col_valid" .
                "   ELSE ''" .
                " END " . MemberLogic::IS_INVALID_USER . ", " .
                " CASE" .
                "   WHEN space_user.col_user IS NOT NULL THEN u.col_slash" .
                "   WHEN space_user.col_group IS NOT NULL THEN g.col_slash" .
                "   ELSE r.col_slash" .
                " END col_slash " .
                " FROM tab_grn_space_space_user AS space_user" .
                " LEFT JOIN tab_cb_user AS u ON space_user.col_user = u._id AND u.col_deleted IS NULL"
                .
                " LEFT JOIN tab_cb_user_name_language AS l ON u.col_display_name_language = l.col_language AND l._id='@S'"
                .
                " LEFT JOIN (tab_cb_group g LEFT JOIN (tab_cb_group_local gl INNER JOIN tab_cb_language_status ls ON gl.language_id = ls._id AND ls.col_language = '@S') ON g._id = gl.parent_id) ON space_user.col_group = g._id"
                .
                " LEFT JOIN tab_cb_role AS r ON space_user.col_role = r._id" .
                " WHERE space_user.col_space='@S' AND" .
                " CASE WHEN space_user.col_user IS NOT NULL THEN u._id WHEN space_user.col_group IS NOT NULL THEN g._id ELSE r._id END IS NOT NULL",
                $operationUserId, $languageCode,
                $spaceUserSearchCondition->getSearchSpaceId());

            $query .= " ORDER BY ";

            $isNeedComma = false;
            foreach (
                $spaceUserSearchCondition->getOrderSortArray() as
                $eachSortColumn
            ) {
                if ($isNeedComma) {
                    $query .= ",";
                }
                switch ($eachSortColumn) {
                    case SpaceUserSearchCondition::SORT_ID_ASC:
                        $query .= "space_user.col_space ASC ";
                        break;
                    case SpaceUserSearchCondition::SORT_ID_DESC:
                        $query .= "space_user.col_space DESC";
                        break;
                    case SpaceUserSearchCondition::SORT_DISPLAY_ORDER_ASC:
                        $query .= "space_user.col_display_order ASC ";
                        break;
                    case SpaceUserSearchCondition::SORT_DISPLAY_ORDER_DESC:
                        $query .= "space_user.col_display_order DESC ";
                        break;
                }
                $isNeedComma = true;
            }
        } else {
            $search_user_candidate
                = $spaceUserSearchCondition->getSearchUserCandidate();
            if (count($search_user_candidate) === 0) {
                return new SpaceUserCollection();
            }
            $query = cb_queryf($db,
                "SELECT SQL_CALC_FOUND_ROWS " .
                " '@S' AS col_space," .
                " u._id," .
                " u._id AS member_id," .
                " 'user' AS member_type," .
                " u.col_display_name AS displayName," .
                " u.col_position AS col_display_order," .
                " u.col_valid," .
                " u.col_slash" .
                " FROM tab_cb_user AS u" .
                " LEFT JOIN tab_cb_user_name_language AS l ON u.col_display_name_language = l.col_language AND l._id='@S'"
                .
                " LEFT JOIN tab_grn_userinfo AS ui ON ui.col_user = u._id" .
                " WHERE u._id IN( @A ) AND u.col_deleted IS NULL",
                $spaceUserSearchCondition->getSearchSpaceId(), $operationUserId,
                $search_user_candidate);

            $query .= " AND (";

            $tempIsNeedOR = false;
            foreach (
                $spaceUserSearchCondition->getSearchStringArray() as $keyword
            ) {
                $query .= ($tempIsNeedOR) ? " OR " : "";
                $tempIsNeedOR = true;

                if ($spaceUserSearchCondition->getSearchItemBit()
                    & SpaceUserSearchCondition::SEARCH_ITEM_USER_NAME
                ) {
                    $query .= "(";
                    $query .= cb_queryf($db, "u.col_nickname LIKE '%@L%' ",
                        $keyword);
                    $query .= ") ";
                    $query .= " OR ";
                    $query .= "(";
                    $query .= cb_queryf($db, "u.col_display_name LIKE '%@L%' ",
                        $keyword);
                    $query .= ") ";
                    if ($item_value['foreign_key']['show']) {
                        $query .= " OR " . cb_queryf($db,
                                "u.col_foreign_key LIKE '%@L%' ", $keyword);
                    }
                    if ($item_value['sort_key']['use']
                        && $item_value['sort_key']['show']
                    ) {
                        $query .= " OR " . cb_queryf($db,
                                "u.col_normalized_sort_key LIKE '%@L%' ",
                                $keyword);
                    }
                    if ($item_value['email_address']['use']
                        && $item_value['email_address']['show']
                    ) {
                        $query .= " OR " . cb_queryf($db,
                                "u.col_email_address LIKE '%@L%' ", $keyword);
                    }
                    if ($item_value['post']['use']
                        && $item_value['post']['show']
                    ) {
                        $query .= " OR " . cb_queryf($db,
                                "ui.col_post LIKE '%@L%' ", $keyword);
                    }
                    $query .= cb_queryf($db,
                        " OR (" .
                        "SELECT " .
                        "GROUP_CONCAT( item_relation.col_string SEPARATOR ' ') "
                        .
                        "FROM " .
                        "tab_grn_itemuserrelation AS item_relation, " .
                        "tab_grn_useritem AS useritem " .
                        "WHERE " .
                        "    item_relation.col_item = useritem._id " .
                        "AND item_relation.col_user = u._id " .
                        "AND useritem.col_use = 1 " .
                        "AND useritem.col_type <> 'password' " .
                        "AND useritem.col_show = 1 " .
                        ") LIKE '%@L%'",
                        $keyword
                    );
                }

            }

            $query .= ")";

            $order_sort_array = $spaceUserSearchCondition->getOrderSortArray();
            if (0 < count($order_sort_array)
                && $order_sort_array[0]
                   == SpaceUserSearchCondition::SORT_FIELD_USER_CANDIDATE
            ) {
                $query .= cb_queryf($db, " ORDER BY FIELD(u._id,@A) ",
                    $search_user_candidate);
            } else {
                $query .= " ORDER BY u.col_position, u._id";
            }
        }

        $query = $db->select_format($query,
            $spaceUserSearchCondition->getOffset(),
            $spaceUserSearchCondition->getLimit());
        $result = $db->query($query);

        $spaceUserCollection = new SpaceUserCollection();
        while ($row = $db->fetch_assoc($result)) {
            $spaceUser = new SpaceUser($row, SpaceUser::NOT_CHECK_INPUT);
            $spaceUser->setUniqueId(SpaceMemberUtility::createMemberUniqueId($row["member_id"],
                $row["member_type"]));
            $spaceUserCollection->appendBean($spaceUser);
        }
        $db->free_result($result);

        //Set up CountNolimit
        $result = $db->query("SELECT FOUND_ROWS();");
        $row = $db->fetch_assoc($result);
        $spaceUserCollection->setCountNoLimit($row["FOUND_ROWS()"]);
        $db->free_result($result);

        return $spaceUserCollection;
    }

    /**
     * Set up the number of the members belonging to the each space of $spaceCollection
     * After calculating the number then, this method update $spaceCollection
     *
     * @param SpaceCollection $space_collection
     *
     * @return SpaceCollection
     */
    public function appendSpaceUserCount(SpaceCollection $space_collection)
    {
        $all_user_id_array = [];

        $space_user_id_array = $this->getSpaceUserIds($space_collection,
            MemberLogic::TYPE_USER);
        foreach ($space_user_id_array as $space_id => $user_ids) {
            foreach ($user_ids as $user_id) {
                $all_user_id_array[$space_id][$user_id] = $user_id;
            }
        }

        $space_user_id_array_from_group
            = $this->getSpaceUserIds($space_collection,
            MemberLogic::TYPE_ORGANIZATION);
        foreach ($space_user_id_array_from_group as $space_id => $user_ids) {
            foreach ($user_ids as $user_id) {
                $all_user_id_array[$space_id][$user_id] = $user_id;
            }
        }

        $space_user_id_array_from_role
            = $this->getSpaceUserIds($space_collection,
            MemberLogic::TYPE_STATIC_ROLE);
        foreach ($space_user_id_array_from_role as $space_id => $user_ids) {
            foreach ($user_ids as $user_id) {
                $all_user_id_array[$space_id][$user_id] = $user_id;
            }
        }

        for ($i = 0; $i < $space_collection->count(); $i++) {
            /** @var \grn\space\data\bean\Space $space */
            $space = $space_collection->getBean($i);
            $space_id = $space->getId();

            if ( ! isset($all_user_id_array[$space_id])) {
                $space->setCountMembers(0);
                continue;
            }

            $space->setCountMembers(count($all_user_id_array[$space_id]));
        }

        return $space_collection;
    }

    /**
     * @param SpaceCollection $space_collection
     * @param                 $member_type
     *
     * @return array
     */
    protected function getSpaceUserIds(
        SpaceCollection $space_collection,
        $member_type
    ) {

        $db = $this->getDatabaseConnection();

        $query = '';
        switch ($member_type) {
            case MemberLogic::TYPE_USER:
                $query
                    = <<<SQL
                      SELECT
                          space_user.col_space,
                          space_user.col_user
                      FROM
                          tab_grn_space_space_user AS space_user
                          INNER JOIN
                              tab_cb_user AS user
                          ON  space_user.col_user = user._id
                          AND user.col_deleted IS NULL
                      WHERE
                          space_user.col_user IS NOT NULL
                      AND space_user.col_space IN(@A)
SQL;
                break;
            case MemberLogic::TYPE_ORGANIZATION:
                $query
                    = <<<SQL
                      SELECT
                        space_user.col_space,
                        usergrouprelation.col_user
                      FROM
                        tab_grn_space_space_user AS space_user
                        INNER JOIN
                            tab_cb_usergrouprelation AS usergrouprelation
                        ON  usergrouprelation.col_group = space_user.col_group
                        INNER JOIN
                            tab_cb_user AS user
                        ON  usergrouprelation.col_user = user._id
                      WHERE
                          user.col_deleted IS NULL
                      AND space_user.col_space IN(@A)
                      AND space_user.col_group IS NOT NULL
SQL;
                break;
            case MemberLogic::TYPE_STATIC_ROLE:
                $query
                    = <<<SQL
                    SELECT
                      space_user.col_space,
                      userrolelation.col_user
                    FROM
                      tab_grn_space_space_user AS space_user
                    INNER JOIN
                        tab_cb_userrolerelation AS userrolelation
                    ON  userrolelation.col_role = space_user.col_role
                    INNER JOIN
                        tab_cb_user AS user
                    ON  userrolelation.col_user = user._id
                    WHERE
                        user.col_deleted IS NULL
                    AND space_user.col_space IN(@A)
                    AND space_user.col_role IS NOT NULL
SQL;
                break;
            default:
                cb_throw_error();
        }

        $query = cb_queryf($db, $query, $space_collection->toArray());
        $db_result = $db->query($query);

        $result = [];
        $allow_user_ids = [];
        while ($row = $db->fetch_assoc($db_result)) {
            $space_id = $row["col_space"];
            $user_id = $row["col_user"];

            $allow_user_ids[$user_id] = $user_id;
            $result[$space_id][$user_id] = $user_id;
        }
        $db->free_result($db_result);

        if ($member_type == MemberLogic::TYPE_ORGANIZATION
            || $member_type == MemberLogic::TYPE_STATIC_ROLE
        ) {
            $allow_user_ids = SpaceMemberLogic::getInstance()
                                              ->getPickoutMemberTypeIdFromParam($allow_user_ids);
            foreach ($result as $space_id => $user_ids) {
                foreach ($user_ids as $user_id) {
                    if ( ! array_key_exists($user_id, $allow_user_ids)) {
                        unset($result[$space_id][$user_id]);
                    }
                }
            }
        }

        return $result;

    }


    /**
     * Insert SpaceUser
     * When the record is duplicated, this method updates col_display_order.
     *
     * @param SpaceUser $spaceUser
     *
     * @return SpaceUser
     * @throws GrnDatabaseException
     * @throws GrnInvalidArgumentException
     */
    public function insertOnDuplicateUpdate(SpaceUser $spaceUser)
    {
        try {
            $db = $this->getDatabaseConnection();

            $query = "INSERT INTO tab_grn_space_space_user SET";
            $query .= cb_queryf($db, " col_space = '@S'",
                $spaceUser->getSpaceId());
            switch ($spaceUser->getMemberType()) {
                case MemberLogic::TYPE_USER :
                    $query .= cb_queryf($db,
                        ", col_user = '@S', col_group = null, col_role = null",
                        $spaceUser->getMemberID());
                    break;
                case MemberLogic::TYPE_ORGANIZATION :
                    $query .= cb_queryf($db,
                        ", col_user = null, col_group = '@S', col_role = null",
                        $spaceUser->getMemberID());
                    break;
                case MemberLogic::TYPE_STATIC_ROLE :
                    $query .= cb_queryf($db,
                        ", col_user = null, col_group = null, col_role = '@S'",
                        $spaceUser->getMemberID());
                    break;
                default :
                    throw new GrnInvalidArgumentException();
            }
            $query .= cb_queryf($db, ", col_display_order = '@S'",
                $spaceUser->getDisplayOrder());
            $query .= " ON DUPLICATE KEY UPDATE col_display_order = VALUES(col_display_order);";
            $db->query($query);

            return $spaceUser;
        } catch (GrnDatabaseException $e) {
            throw $e;
        }
    }

    /**
     * Delete SpaceUser
     *
     * @param SpaceUser $spaceUser
     *
     * @return SpaceUser
     * @throws GrnDataNotFoundException
     * @throws GrnDatabaseException
     * @throws GrnInvalidArgumentException
     */
    public function delete(SpaceUser $spaceUser)
    {
        try {
            $db = $this->getDatabaseConnection();

            $query = "DELETE FROM tab_grn_space_space_user WHERE";
            $query .= cb_queryf($db, " col_space = '@S'",
                $spaceUser->getSpaceId());
            switch ($spaceUser->getMemberType()) {
                case MemberLogic::TYPE_USER :
                    $query .= cb_queryf($db,
                        " AND col_user = '@S' AND col_user IS NOT NULL",
                        $spaceUser->getMemberID());
                    break;
                case MemberLogic::TYPE_ORGANIZATION :
                    $query .= cb_queryf($db,
                        " AND col_group = '@S' AND col_group IS NOT NULL",
                        $spaceUser->getMemberID());
                    break;
                case MemberLogic::TYPE_STATIC_ROLE :
                    $query .= cb_queryf($db,
                        " AND col_role = '@S' AND col_role IS NOT NULL",
                        $spaceUser->getMemberID());
                    break;
                default :
                    throw new GrnInvalidArgumentException();
            }

            $db->query($query);

            if ($db->affected_rows() == 0) {
                throw new GrnDataNotFoundException(ErrorCode::GRN_INVALID_MEMBER);
            }

            return $spaceUser;
        } catch (GrnDatabaseException $e) {
            throw $e;
        }

    }

    /**
     * Delete SpaceUser except logic deleted user
     *
     * @param string $spaceId
     *
     * @return bool Always true
     * @throws GrnDatabaseException
     */
    public function deleteBySpaceId($spaceId)
    {
        try {
            $db = $this->getDatabaseConnection();
            $query
                = <<<SQL
                      DELETE space_user 
                      FROM   tab_grn_space_space_user AS space_user 
                            LEFT JOIN tab_cb_user AS u  ON space_user.col_user = u._id 
                      WHERE col_space =  @X  
                           AND ( (col_user IS NOT NULL AND u.col_deleted IS NULL ) OR col_user IS NULL)
SQL;
            $query = $db->format($query, [$spaceId]);

            $db->query($query);

            return true;
        } catch (GrnDatabaseException $e) {
            throw $e;
        }

    }
}
