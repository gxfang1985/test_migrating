<?php

namespace grn\space\db\dao;

use grn\space\common\data\bean\Application;
use grn\space\common\data\collection\CommentCollection;
use grn\space\common\db\dao\DataAccessControlAbstract;
use grn\space\common\exception\ErrorCode;
use grn\space\common\exception\GrnDatabaseException;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\common\utility\ValidateUtility;
use grn\space\data\bean\Todo;
use grn\space\data\collection\TodoCollection;
use grn\space\data\condition\TodoSearchCondition;

/**
 * Database Back Layer
 * This layer mediates the database front layer and the DB.
 *
 * Todo Facade Data Access Object Class
 * Accept requests from the database front layer for all Todo
 **/
class TodoDAO extends DataAccessControlAbstract
{
    /**
     * The insert of todo is executed to the database.
     *
     * @param \grn\space\data\bean\Todo $todo
     *
     * @throws GrnDatabaseException   Any error in the database.
     * @return \grn\space\data\bean\Todo
     */
    public function insertTodo(Todo $todo)
    {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "INSERT INTO tab_grn_space_todo SET ";
            $query .= "  _id='" . $dbConn->escape($todo->getId()) . "'";
            $query .= ", col_category='"
                      . $dbConn->escape($todo->getCategoryId()) . "'";
            if (ValidateUtility::isNotNull($todo->getStartTimestamp())) {
                $query .= ", col_start_timestamp='"
                          . $dbConn->escape($todo->getStartTimestamp()) . "'";
            }
            if (ValidateUtility::isNotNull($todo->getDeadlineTimestamp())) {
                $query .= ", col_deadline_timestamp='"
                          . $dbConn->escape($todo->getDeadlineTimestamp())
                          . "'";
            }
            $query .= ", col_timezone='" . $dbConn->escape($todo->getTimezone())
                      . "'";
            $query .= ", col_title='" . $dbConn->escape($todo->getTitle())
                      . "'";
            if ($todo->isRichText()) {
                require_once('grn/controller.csp');
                $contentHtml
                    = grn_wash_script_without_style_attribute($todo->getContent());
                $content = grn_strip_tags($contentHtml);
                $query .= ", col_content_html = '"
                          . $dbConn->escape($contentHtml) . "'";
                $query .= ", col_content = '" . $dbConn->escape($content)
                          . "'";
            } else {
                $query .= ", col_content_html = NULL";
                $query .= ", col_content = '"
                          . $dbConn->escape($todo->getContent()) . "'";
            }
            $query .= ", col_is_rich_text='" . (($todo->isRichText()) ? "1"
                    : "0") . "'";
            $query .= ", col_is_complete='" . (($todo->isComplete()) ? "1"
                    : "0") . "'";
            $query .= ", col_creator='" . $dbConn->escape($todo->getCreatorId())
                      . "'";
            $query .= ", col_creator_name='"
                      . $dbConn->escape($todo->getCreatorName()) . "'";
            $query .= ", col_create_timestamp='"
                      . $dbConn->escape($todo->getCreateTimestamp()) . "'";
            if (ValidateUtility::isNotNull($todo->getModifierId())) {
                $query .= ", col_modifier='"
                          . $dbConn->escape($todo->getModifierId()) . "'";
            }
            $query .= ", col_modifier_name='"
                      . $dbConn->escape($todo->getModifierName()) . "'";
            if (ValidateUtility::isNotNull($todo->getModifyTimestamp())) {
                $query .= ", col_modify_timestamp='"
                          . $dbConn->escape($todo->getModifyTimestamp()) . "'";
            }
            $query .= ";";

            $dbConn->query($query);
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        return $todo;
    }

    /**
     * The update of todo is executed to the database.
     *
     * @param \grn\space\data\bean\Todo $todo
     *
     * @throws GrnDatabaseException     Any error in the database.
     * @return \grn\space\data\bean\Todo
     */
    public function updateTodo(Todo $todo)
    {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "UPDATE tab_grn_space_todo SET ";
            $query .= "  col_category='"
                      . $dbConn->escape($todo->getCategoryId()) . "'";
            if (ValidateUtility::isNull($todo->getStartTimestamp())) {
                $query .= ", col_start_timestamp = NULL";
            } else {
                $query .= ", col_start_timestamp='"
                          . $dbConn->escape($todo->getStartTimestamp()) . "'";
            }
            if (ValidateUtility::isNull($todo->getDeadlineTimestamp())) {
                $query .= ", col_deadline_timestamp = NULL";
            } else {
                $query .= ", col_deadline_timestamp='"
                          . $dbConn->escape($todo->getDeadlineTimestamp())
                          . "'";
            }
            $query .= ", col_timezone='" . $dbConn->escape($todo->getTimezone())
                      . "'";
            $query .= ", col_title='" . $dbConn->escape($todo->getTitle())
                      . "'";
            if ($todo->isRichText()) {
                require_once('grn/controller.csp');
                $contentHtml
                    = grn_wash_script_without_style_attribute($todo->getContent());
                $content = grn_strip_tags($contentHtml);
                $query .= ", col_content_html = '"
                          . $dbConn->escape($contentHtml) . "'";
                $query .= ", col_content = '" . $dbConn->escape($content)
                          . "'";
            } else {
                $query .= ", col_content_html = NULL";
                $query .= ", col_content = '"
                          . $dbConn->escape($todo->getContent()) . "'";
            }
            $query .= ", col_is_rich_text='" . (($todo->isRichText()) ? "1"
                    : "0") . "'";
            $query .= ", col_is_complete='" . (($todo->isComplete()) ? "1"
                    : "0") . "'";
            if (ValidateUtility::isNull($todo->getCreatorId())) {
                $query .= ", col_creator = NULL";
            } else {
                $query .= ", col_creator='"
                          . $dbConn->escape($todo->getCreatorId()) . "'";
            }

            $query .= ", col_creator_name='"
                      . $dbConn->escape($todo->getCreatorName()) . "'";
            $query .= ", col_create_timestamp='"
                      . $dbConn->escape($todo->getCreateTimestamp()) . "'";
            if (ValidateUtility::isNull($todo->getModifierId())) {
                $query .= ", col_modifier = NULL";
            } else {
                $query .= ", col_modifier='"
                          . $dbConn->escape($todo->getModifierId()) . "'";
            }
            $query .= ", col_modifier_name='"
                      . $dbConn->escape($todo->getModifierName()) . "'";
            if (ValidateUtility::isNull($todo->getModifyTimestamp())) {
                $query .= ", col_modify_timestamp = NULL ";
            } else {
                $query .= ", col_modify_timestamp='"
                          . $dbConn->escape($todo->getModifyTimestamp()) . "' ";
            }
            $query .= " WHERE _id = '{$dbConn->escape($todo->getId())}'";
            $query .= ";";

            $dbConn->query($query);
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        return $todo;
    }

    /**
     * The update of is_complete of todo to the database.
     *
     * @param string $todoId todo sequence id
     *
     * @throws GrnDatabaseException     Any error in the database.
     */
    public function updateCompleteTodo($todoId)
    {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "UPDATE tab_grn_space_todo SET";
            $query .= " col_is_complete = COALESCE((SELECT MIN(col_is_complete) FROM tab_grn_space_todo_user WHERE col_todo='{$dbConn->escape($todoId)}'), col_is_complete)";
            $query .= " WHERE _id = '{$dbConn->escape($todoId)}'";
            $query .= ";";

            $dbConn->query($query);
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }
    }

    /**
     * The update of is_complete of todo to the database.
     *
     * @param string $categoryId category sequence id
     *
     * @throws GrnDatabaseException     Any error in the database.
     */
    public function updateCompleteTodosByCategoryId($categoryId)
    {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "UPDATE tab_grn_space_todo";
            $query .= ", (";
            $query .= " SELECT";
            $query .= "  todoUser.col_todo";
            $query .= ", MIN(todoUser.col_is_complete) AS is_complete";
            $query .= " FROM";
            $query .= " tab_grn_space_todo_user AS todoUser";
            $query .= " , tab_grn_space_todo AS todo";
            $query .= " , tab_grn_space_category_hierarchy AS hirhy";
            $query .= " WHERE";
            $query .= " todoUser.col_todo = todo._id";
            $query .= " AND todo.col_category = hirhy.col_category";
            $query .= " AND hirhy.col_ancestor = '{$dbConn->escape($categoryId)}'";
            $query .= " GROUP BY todoUser.col_todo";
            $query .= ") AS todo_user";
            $query .= " SET";
            $query .= " tab_grn_space_todo.col_is_complete = todo_user.is_complete";
            $query .= " WHERE";
            $query .= " tab_grn_space_todo._id = todo_user.col_todo";
            $query .= ";";

            $dbConn->query($query);
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }
    }

    /**
     * The delete of todo is executed to the data base.
     *
     * @param \grn\space\data\bean\Todo $todo
     *
     * @throws GrnDataNotFoundException     When the specified todo is not found.
     * @throws GrnDatabaseException         Any error in the database.
     * @return \grn\space\data\bean\Todo
     */
    public function deleteTodo(Todo $todo)
    {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query
                = "DELETE FROM tab_grn_space_todo WHERE _id = '{$dbConn->escape($todo->getId())}';";

            $dbConn->query($query);

            $deleteCount = $dbConn->affected_rows();
            if ($deleteCount === 0) {
                throw new GrnDataNotFoundException(ErrorCode::GRN_INVALID_TODO_ID);
            }
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        return $todo;
    }

    /**
     * Delete Todos by Thread ID array
     *
     * @param array $threadIdArray
     *
     * @return resource
     * @throws GrnDatabaseException
     */
    public function deleteTodoByThreadId(array $threadIdArray)
    {
        try {
            $db = $this->getDatabaseConnection();

            $escapedThreadIdArray = [];
            foreach ($threadIdArray as $eachThreadId) {
                $escapedThreadIdArray[] = "'" . $db->escape($eachThreadId)
                                          . "'";
            }
            $escapedThreadIdArray = implode(",", $escapedThreadIdArray);

            return $db->query(
                "DELETE FROM " .
                "tab_grn_space_todo " .
                "USING " .
                "tab_grn_space_todo, " .
                "tab_grn_space_todo_thread " .
                "WHERE " .
                "tab_grn_space_todo._id = tab_grn_space_todo_thread.col_todo " .
                "AND " .
                "tab_grn_space_todo_thread.col_thread IN ({$escapedThreadIdArray});"
            );
        } catch (GrnDatabaseException $e) {
            throw $e;
        }
    }

    /**
     * The select of a todo is executed to the database.
     *
     * @param string $todoId todo sequence id
     *
     * @throws GrnDataNotFoundException     todo is not found
     * @throws GrnDatabaseException         Any error in the database.
     * @return \grn\space\data\bean\Todo
     */
    public function selectTodo($todoId)
    {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "SELECT ";
            $query .= " _id, ";
            $query .= " col_category, ";
            $query .= " col_start_timestamp, ";
            $query .= " col_deadline_timestamp, ";
            $query .= " col_timezone, ";
            $query .= " col_title, ";
            $query .= " CASE col_is_rich_text WHEN '1' THEN col_content_html ELSE col_content END AS col_content, ";
            $query .= " col_is_rich_text, ";
            $query .= " col_is_complete, ";
            $query .= " col_creator, ";
            $query .= " col_creator_name, ";
            $query .= " col_create_timestamp, ";
            $query .= " col_modifier, ";
            $query .= " col_modifier_name, ";
            $query .= " col_modify_timestamp ";
            $query .= " FROM ";
            $query .= " tab_grn_space_todo ";
            $query .= " WHERE _id = '{$dbConn->escape($todoId)}'";
            $query .= ";";

            $result = $dbConn->query($query);

            $row = $dbConn->fetch_assoc($result);
            $dbConn->free_result($result);
            if ( ! $row) {
                throw new GrnDataNotFoundException(ErrorCode::GRN_INVALID_TODO_ID);
            }
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        return new Todo($row, Todo::NOT_CHECK_INPUT);
    }


    /**
     * The select of a todo is executed to the database.
     *
     * @param     string $spaceId  space sequence id
     * @param     string $threadId thread sequence id
     * @param     string $todoId   todo sequence id
     *
     * @throws GrnDataNotFoundException     todo is not found
     * @throws GrnDatabaseException         Any error in the database.
     * @return \grn\space\data\bean\Todo
     */
    public function selectTodoBySpaceIdThreadIdTodoId(
        $spaceId,
        $threadId,
        $todoId
    ) {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "SELECT";
            $query .= " td._id, ";
            $query .= " td.col_category, ";
            $query .= " td.col_start_timestamp, ";
            $query .= " td.col_deadline_timestamp, ";
            $query .= " td.col_timezone, ";
            $query .= " td.col_title, ";
            $query .= " CASE td.col_is_rich_text WHEN '1' THEN td.col_content_html ELSE td.col_content END AS col_content, ";
            $query .= " td.col_is_rich_text, ";
            $query .= " td.col_is_complete, ";
            $query .= " td.col_creator, ";
            $query .= " td.col_creator_name, ";
            $query .= " td.col_create_timestamp, ";
            $query .= " td.col_modifier, ";
            $query .= " td.col_modifier_name, ";
            $query .= " td.col_modify_timestamp ";
            $query .= " FROM ";
            $query .= " tab_grn_space_todo AS td, ";
            $query .= " tab_grn_space_todo_thread AS tdThrd, ";
            $query .= " tab_grn_space_thread AS thrd, ";
            $query .= " tab_grn_space_category_hierarchy AS hirhy, ";
            $query .= " tab_grn_space_category AS ctg, ";
            $query .= " tab_grn_space_space_application AS spcApl, ";
            $query .= " tab_grn_space_application AS apl, ";
            $query .= " tab_grn_space_space AS spc ";
            $query .= " WHERE td._id = '" . $dbConn->escape($todoId) . "'";
            $query .= " AND td._id = tdThrd.col_todo";
            $query .= " AND tdThrd.col_thread = thrd._id";
            $query .= " AND thrd._id = '" . $dbConn->escape($threadId) . "'";
            $query .= " AND thrd.col_category = hirhy.col_category";
            $query .= " AND hirhy.col_ancestor = ctg._id";
            $query .= " AND ctg.col_hierarchy_level = '1'";
            $query .= " AND ctg._id = spcApl.col_root_category";
            $query .= " AND spcApl.col_application = apl._id";
            $query .= " AND spcApl.col_space = spc._id";
            $query .= " AND apl.col_application_code = '"
                      . Application::APPLICATION_CODE_DISCUSSION . "'";
            $query .= " AND spc._id = '" . $dbConn->escape($spaceId) . "'";
            $query .= ";";

            $result = $dbConn->query($query);

            $row = $dbConn->fetch_assoc($result);
            $dbConn->free_result($result);
            if ( ! $row) {
                throw new GrnDataNotFoundException(ErrorCode::GRN_INVALID_TODO_ID);
            }
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        return new Todo($row, Todo::NOT_CHECK_INPUT);
    }

    /**
     * The select of todos is executed to the database.
     *
     * @param \grn\space\data\condition\TodoSearchCondition $todoSearchCondition
     *
     * @throws GrnDatabaseException                 Any error in the database.
     * @return \grn\space\data\collection\TodoCollection
     */
    public function selectTodoList(TodoSearchCondition $todoSearchCondition)
    {
        try {
            $dbConn = $this->getDatabaseConnection();
            $query = "SELECT SQL_CALC_FOUND_ROWS ";
            $query .= " td._id,";
            $query .= " td.col_category,";
            $query .= " td.col_start_timestamp,";
            $query .= " td.col_deadline_timestamp,";
            $query .= " td.col_timezone,";
            $query .= " td.col_title,";
            $query .= " CASE td.col_is_rich_text WHEN '1' THEN td.col_content_html ELSE td.col_content END AS col_content,";
            $query .= " td.col_is_rich_text,";
            $query .= " td.col_is_complete,";
            $query .= " td.col_creator,";
            $query .= " td.col_creator_name,";
            $query .= " td.col_create_timestamp,";
            $query .= " td.col_modifier,";
            $query .= " td.col_modifier_name,";
            $query .= " td.col_modify_timestamp,";
            $query .= " tdthrd.col_thread";
            $query .= " FROM";
            $query .= " tab_grn_space_todo AS td";
            $groupClause = "";
            //Search participant user id
            if (ValidateUtility::isNotNull($todoSearchCondition->getSearchParticipantUserId())) {
                if (TodoSearchCondition::SEARCH_PARTICIPANT_USER_NOUSER
                    == $todoSearchCondition->getSearchParticipantUserId()
                ) {
                    $query
                        .= " LEFT JOIN tab_grn_space_todo_user AS subTodoUser ON td._id = subTodoUser.col_todo 
                                LEFT JOIN tab_cb_user AS subUser ON subTodoUser.col_user = subUser._id AND subUser.col_deleted IS NULL";
                } else {
                    $query .= " LEFT JOIN tab_grn_space_todo_user AS tduser ON td._id = tduser.col_todo";
                    $query .= " LEFT JOIN tab_cb_user AS user ON tduser.col_user = user._id";
                }
            }
            $query .= " LEFT JOIN tab_grn_space_todo_thread AS tdthrd ON td._id = tdthrd.col_todo";
            //Search scope range
            if ($todoSearchCondition->getSearchScopeType()
                !== TodoSearchCondition::SEARCH_SCOPE_CATEGORY_TARGET_ONLY
            ) {
                $query .= " LEFT JOIN tab_grn_space_category_hierarchy AS hirhy ON td.col_category = hirhy.col_ancestor";
            }
            $query .= " WHERE";
            $strTmp = "";
            //Search scope range
            if ($todoSearchCondition->getSearchScopeType()
                === TodoSearchCondition::SEARCH_SCOPE_CATEGORY_TARGET_ONLY
            ) {
                //Search condition category id
                $query .= " td.col_category = '"
                          . $dbConn->escape($todoSearchCondition->getSearchCategoryId())
                          . "'";
            } else {
                //Search condition category id
                switch ($todoSearchCondition->getSearchScopeType()) {
                    case TodoSearchCondition::SEARCH_SCOPE_CATEGORY_ANCESTOR:
                        $strTmp .= " hirhy.col_category = ";
                        break;
                    case TodoSearchCondition::SEARCH_SCOPE_CATEGORY_DESCENDANT:
                        $strTmp .= " AND hirhy.col_ancestor = ";
                        break;
                }
                if (substr(trim($query), -5) !== "WHERE") {
                    $query .= " AND";
                }
                $query .= $strTmp;
                $query .= "'"
                          . $dbConn->escape($todoSearchCondition->getSearchCategoryId())
                          . "'";
            }
            //Search thread id
            if (ValidateUtility::isNotNull($todoSearchCondition->getSearchThreadId())) {
                $query .= " AND tdthrd.col_thread = '"
                          . $dbConn->escape($todoSearchCondition->getSearchThreadId())
                          . "'";
            }
            //Search participant user id
            if (ValidateUtility::isNotNull($todoSearchCondition->getSearchParticipantUserId())) {
                if (TodoSearchCondition::SEARCH_PARTICIPANT_USER_NOUSER
                    == $todoSearchCondition->getSearchParticipantUserId()
                ) {
                    $query .= " AND subTodoUser.col_todo IS NULL";
                } else {
                    $query .= " AND user.col_deleted IS NULL";
                    $query .= " AND user._id = '"
                              . $dbConn->escape($todoSearchCondition->getSearchParticipantUserId())
                              . "'";

                    //Search status
                    if ($todoSearchCondition->getSearchStatus()
                        !== TodoSearchCondition::STATUS_NONE
                    ) {
                        switch ($todoSearchCondition->getSearchStatus()) {
                            case TodoSearchCondition::STATUS_COMPLETE:
                            case TodoSearchCondition::STATUS_COMPLETE_PARTICIPANT_USER:
                                $query .= " AND tduser.col_is_complete = '1'";
                                break;
                            case TodoSearchCondition::STATUS_INCOMPLETE:
                            case TodoSearchCondition::STATUS_INCOMPLETE_PARTICIPANT_USER:
                                $query .= " AND tduser.col_is_complete = '0'";
                                break;
                        }
                    }
                }
            }
            //Search status
            if ($todoSearchCondition->getSearchStatus()
                !== TodoSearchCondition::STATUS_NONE
            ) {
                switch ($todoSearchCondition->getSearchStatus()) {
                    case TodoSearchCondition::STATUS_COMPLETE:
                        $query .= " AND td.col_is_complete = '1'";
                        break;
                    case TodoSearchCondition::STATUS_INCOMPLETE:
                        $query .= " AND td.col_is_complete = '0'";
                        break;
                }
            }

            //Order by
            $query .= " ORDER BY ";
            $tempIsNeedComma = false;
            foreach ($todoSearchCondition->getOrderSortArray() as $sortType) {
                if ($tempIsNeedComma) {
                    $query .= ", ";

                }

                switch ($sortType) {
                    case TodoSearchCondition::SORT_ID_ASC:
                        $query .= " td._id ASC";
                        break;
                    case TodoSearchCondition::SORT_ID_DESC:
                        $query .= " td._id DESC";
                        break;
                    case TodoSearchCondition::SORT_CREATE_TIME_ASC:
                        $query .= " td.col_create_timestamp ASC";
                        break;
                    case TodoSearchCondition::SORT_CREATE_TIME_DESC:
                        $query .= " td.col_create_timestamp DESC";
                        break;
                    case TodoSearchCondition::SORT_MODIFY_TIME_ASC:
                        $query .= " td.col_modify_timestamp ASC";
                        break;
                    case TodoSearchCondition::SORT_MODIFY_TIME_DESC:
                        $query .= " td.col_modify_timestamp DESC";
                        break;
                    case TodoSearchCondition::SORT_DEADLINE_TIMESTAMP_ASC:
                        $query .= " td.col_deadline_timestamp IS NULL ASC, td.col_deadline_timestamp ASC";
                        break;
                    case TodoSearchCondition::SORT_DEADLINE_TIMESTAMP_DESC:
                        $query .= " td.col_deadline_timestamp DESC";
                        break;
                }

                $tempIsNeedComma = true;
            }

            $query = $dbConn->select_format($query,
                $todoSearchCondition->getOffset(),
                $todoSearchCondition->getLimit());
            $result = $dbConn->query($query);


            $todoCollection = new TodoCollection();
            while ($row = $dbConn->fetch_assoc($result)) {
                $todoCollection->appendBean(new Todo($row,
                    Todo::NOT_CHECK_INPUT));
            }
            $dbConn->free_result($result);


            //search total count
            $query = "SELECT FOUND_ROWS() AS count;";
            $result = $dbConn->query($query);
            $row = $dbConn->fetch_assoc($result);
            $dbConn->free_result($result);
            if ( ! $row) {
                throw new GrnDatabaseException();
            }
            $todoCollection->setCountNoLimit($row['count']);
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        return $todoCollection;
    }

    /**
     * The select of todos is executed to the database.
     * In the query result, the todos without deadline are always bottom.
     *
     * @param \grn\space\data\condition\TodoSearchCondition      TodoSearchCondition
     *
     * @throws GrnDatabaseException                 Any error in the database.
     * @return \grn\space\data\collection\TodoCollection
     */
    public function selectTodoListForMoblie(
        TodoSearchCondition $todoSearchCondition
    ) {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "SELECT SQL_CALC_FOUND_ROWS";
            $query .= " td._id, ";
            $query .= " td.col_category, ";
            $query .= " td.col_start_timestamp, ";
            $query .= " td.col_deadline_timestamp, ";
            $query .= " td.col_timezone, ";
            $query .= " td.col_title, ";
            $query .= " CASE td.col_is_rich_text WHEN '1' THEN td.col_content_html ELSE td.col_content END AS col_content, ";
            $query .= " td.col_is_rich_text, ";
            $query .= " td.col_is_complete, ";
            $query .= " td.col_creator, ";
            $query .= " td.col_creator_name, ";
            $query .= " td.col_create_timestamp, ";
            $query .= " td.col_modifier, ";
            $query .= " td.col_modifier_name, ";
            $query .= " td.col_modify_timestamp, ";
            $query .= " tdthrd.col_thread ";
            $query .= " FROM ";

            $query .= " ( ";
            $query .= " SELECT * ";
            $query .= " FROM ";
            $query .= " ( ";
            $query .= " SELECT _id, ";
            $query .= " col_category, ";
            $query .= " col_start_timestamp, ";
            $query .= " col_deadline_timestamp, ";
            $query .= " col_timezone, ";
            $query .= " col_title, ";
            $query .= " col_content, ";
            $query .= " col_content_html, ";
            $query .= " col_is_rich_text, ";
            $query .= " col_is_complete, ";
            $query .= " col_creator, ";
            $query .= " col_creator_name, ";
            $query .= " col_create_timestamp, ";
            $query .= " col_modifier, ";
            $query .= " col_modifier_name, ";
            $query .= " col_modify_timestamp ";
            $query .= " FROM tab_grn_space_todo WHERE col_deadline_timestamp IS NOT NULL ";

            $sqlOrder = " ORDER BY ";
            $tempIsNeedComma = false;
            foreach ($todoSearchCondition->getOrderSortArray() as $sortType) {
                if ($tempIsNeedComma) {
                    $sqlOrder .= ", ";
                }
                switch ($sortType) {
                    case TodoSearchCondition::SORT_ID_ASC:
                        $sqlOrder .= " _id ASC";
                        break;
                    case TodoSearchCondition::SORT_ID_DESC:
                        $sqlOrder .= " _id DESC";
                        break;
                    case TodoSearchCondition::SORT_CREATE_TIME_ASC:
                        $sqlOrder .= " col_create_timestamp ASC";
                        break;
                    case TodoSearchCondition::SORT_CREATE_TIME_DESC:
                        $sqlOrder .= " col_create_timestamp DESC";
                        break;
                    case TodoSearchCondition::SORT_MODIFY_TIME_ASC:
                        $sqlOrder .= " col_modify_timestamp ASC";
                        break;
                    case TodoSearchCondition::SORT_MODIFY_TIME_DESC:
                        $sqlOrder .= " col_modify_timestamp DESC";
                        break;
                    case TodoSearchCondition::SORT_DEADLINE_TIMESTAMP_ASC:
                        $sqlOrder .= " col_deadline_timestamp IS NULL ASC, col_deadline_timestamp ASC";
                        break;
                    case TodoSearchCondition::SORT_DEADLINE_TIMESTAMP_DESC:
                        $sqlOrder .= " col_deadline_timestamp DESC";
                        break;
                }
                $tempIsNeedComma = true;
            }
            $query .= " ) ";
            $query .= " AS td1";
            $query .= " UNION ";
            $query .= " SELECT * ";
            $query .= " FROM ";
            $query .= " ( ";
            $query .= " SELECT _id, ";
            $query .= " col_category, ";
            $query .= " col_start_timestamp, ";
            $query .= " col_deadline_timestamp, ";
            $query .= " col_timezone, ";
            $query .= " col_title, ";
            $query .= " col_content, ";
            $query .= " col_content_html, ";
            $query .= " col_is_rich_text, ";
            $query .= " col_is_complete, ";
            $query .= " col_creator, ";
            $query .= " col_creator_name, ";
            $query .= " col_create_timestamp, ";
            $query .= " col_modifier, ";
            $query .= " col_modifier_name, ";
            $query .= " col_modify_timestamp ";
            $query .= " FROM tab_grn_space_todo WHERE col_deadline_timestamp IS NULL ";
            $query .= " ) ";
            $query .= " AS td2";
            $query .= " ) AS td";

            //Search participant user id
            if (ValidateUtility::isNotNull($todoSearchCondition->getSearchParticipantUserId())) {
                if (TodoSearchCondition::SEARCH_PARTICIPANT_USER_NOUSER
                    == $todoSearchCondition->getSearchParticipantUserId()
                ) {
                    $query .= " LEFT JOIN";
                    $query .= " (";
                    $query .= " SELECT subTodoUser.col_todo";
                    $query .= " FROM tab_grn_space_todo_user AS subTodoUser";
                    $query .= ", tab_cb_user AS subUser";
                    $query .= " WHERE subTodoUser.col_user = subUser._id";
                    $query .= " AND subUser.col_deleted IS NULL";
                    $query .= " GROUP BY subTodoUser.col_todo";
                    $query .= ") AS userExistsTodo";
                    $query .= " ON td._id = userExistsTodo.col_todo";
                } else {
                    $query .= ", tab_grn_space_todo_user AS tduser ";
                    $query .= ", tab_cb_user AS user ";
                }
            }

            $query .= ", tab_grn_space_todo_thread AS tdthrd ";

            //Search scope range
            if ($todoSearchCondition->getSearchScopeType()
                !== TodoSearchCondition::SEARCH_SCOPE_CATEGORY_TARGET_ONLY
            ) {
                $query .= ", tab_grn_space_category_hierarchy AS hirhy";
            }

            $query .= " WHERE td._id = tdthrd.col_todo";

            //Search scope range
            if ($todoSearchCondition->getSearchScopeType()
                === TodoSearchCondition::SEARCH_SCOPE_CATEGORY_TARGET_ONLY
            ) {
                //Search condition category id
                $query .= " AND td.col_category = '"
                          . $dbConn->escape($todoSearchCondition->getSearchCategoryId())
                          . "'";
            } else {
                //Search condition category id
                switch ($todoSearchCondition->getSearchScopeType()) {
                    case TodoSearchCondition::SEARCH_SCOPE_CATEGORY_ANCESTOR:
                        $query .= " AND td.col_category = hirhy.col_ancestor";
                        $query .= " AND hirhy.col_category = '"
                                  . $dbConn->escape($todoSearchCondition->getSearchCategoryId())
                                  . "'";
                        break;
                    case TodoSearchCondition::SEARCH_SCOPE_CATEGORY_DESCENDANT:
                        $query .= " AND td.col_category = hirhy.col_category";
                        $query .= " AND hirhy.col_ancestor = '"
                                  . $dbConn->escape($todoSearchCondition->getSearchCategoryId())
                                  . "'";
                        break;
                }
            }

            //Search thread id
            if (ValidateUtility::isNotNull($todoSearchCondition->getSearchThreadId())) {
                $query .= " AND tdthrd.col_thread = '"
                          . $dbConn->escape($todoSearchCondition->getSearchThreadId())
                          . "'";
            }

            //Search participant user id
            if (ValidateUtility::isNotNull($todoSearchCondition->getSearchParticipantUserId())) {
                if (TodoSearchCondition::SEARCH_PARTICIPANT_USER_NOUSER
                    == $todoSearchCondition->getSearchParticipantUserId()
                ) {
                    $query .= " AND userExistsTodo.col_todo IS NULL";
                } else {
                    $query .= " AND td._id = tduser.col_todo ";
                    $query .= " AND tduser.col_user = user._id ";
                    $query .= " AND user.col_deleted IS NULL";
                    $query .= " AND user._id = '"
                              . $dbConn->escape($todoSearchCondition->getSearchParticipantUserId())
                              . "'";

                    //Search status
                    if ($todoSearchCondition->getSearchStatus()
                        !== TodoSearchCondition::STATUS_NONE
                    ) {
                        switch ($todoSearchCondition->getSearchStatus()) {
                            case TodoSearchCondition::STATUS_COMPLETE:
                            case TodoSearchCondition::STATUS_COMPLETE_PARTICIPANT_USER:
                                $query .= " AND tduser.col_is_complete = '1'";
                                break;
                            case TodoSearchCondition::STATUS_INCOMPLETE:
                            case TodoSearchCondition::STATUS_INCOMPLETE_PARTICIPANT_USER:
                                $query .= " AND tduser.col_is_complete = '0'";
                                break;
                        }
                    }
                }
            }

            //Search status
            if ($todoSearchCondition->getSearchStatus()
                !== TodoSearchCondition::STATUS_NONE
            ) {
                switch ($todoSearchCondition->getSearchStatus()) {
                    case TodoSearchCondition::STATUS_COMPLETE:
                        $query .= " AND td.col_is_complete = '1'";
                        break;
                    case TodoSearchCondition::STATUS_INCOMPLETE:
                        $query .= " AND td.col_is_complete = '0'";
                        break;
                }
            }

            $query .= $sqlOrder;
            $query = $dbConn->select_format($query,
                $todoSearchCondition->getOffset(),
                $todoSearchCondition->getLimit());
            $result = $dbConn->query($query);

            $todoCollection = new TodoCollection();
            while ($row = $dbConn->fetch_assoc($result)) {
                $todoCollection->appendBean(new Todo($row,
                    Todo::NOT_CHECK_INPUT));
            }
            $dbConn->free_result($result);

            //search total count
            $query = "SELECT FOUND_ROWS() AS count;";
            $result = $dbConn->query($query);
            $row = $dbConn->fetch_assoc($result);
            $dbConn->free_result($result);
            if ( ! $row) {
                throw new GrnDatabaseException();
            }
            $todoCollection->setCountNoLimit($row['count']);
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        return $todoCollection;
    }

    /**
     * The select of todos is executed to the database.
     *
     * @param \grn\space\common\data\collection\CommentCollection $commentCollection
     *
     * @throws GrnDatabaseException             Any error in the database.
     * @return \grn\space\data\collection\TodoCollection
     */
    public function selectTodoListByCommentCollection(
        CommentCollection $commentCollection
    ) {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "SELECT SQL_CALC_FOUND_ROWS";
            $query .= " _id, ";
            $query .= " col_category, ";
            $query .= " col_start_timestamp, ";
            $query .= " col_deadline_timestamp, ";
            $query .= " col_timezone, ";
            $query .= " col_title, ";
            $query .= " CASE col_is_rich_text WHEN '1' THEN col_content_html ELSE col_content END AS col_content, ";
            $query .= " col_is_rich_text, ";
            $query .= " col_is_complete, ";
            $query .= " col_creator, ";
            $query .= " col_creator_name, ";
            $query .= " col_create_timestamp, ";
            $query .= " col_modifier, ";
            $query .= " col_modifier_name, ";
            $query .= " col_modify_timestamp ";
            $query .= " FROM ";
            $query .= " tab_grn_space_todo ";
            $query .= " WHERE ";
            $query .= " _id IN (";

            //Search todo ids
            $tempIsNeedComma = false;
            foreach ($commentCollection as $comment) {
                /** @var \grn\space\common\data\bean\Comment $comment */
                if ($tempIsNeedComma) {
                    $query .= ", ";
                }

                $query .= "'"
                          . $dbConn->escape($comment->getParentApplicationId())
                          . "'";

                $tempIsNeedComma = true;
            }
            $query .= ");";


            $result = $dbConn->query($query);


            $todoCollection = new TodoCollection();
            while ($row = $dbConn->fetch_assoc($result)) {
                $todoCollection->appendBean(new Todo($row,
                    Todo::NOT_CHECK_INPUT));
            }
            $dbConn->free_result($result);


            //search total count
            $query = "SELECT FOUND_ROWS() AS count;";
            $result = $dbConn->query($query);
            $row = $dbConn->fetch_assoc($result);
            $dbConn->free_result($result);
            if ( ! $row) {
                throw new GrnDatabaseException();
            }
            $todoCollection->setCountNoLimit($row['count']);
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        return $todoCollection;
    }

    /**
     * The select of incomplete todos is executed to the database.
     *
     * @param  array  $spaceIdArray    spaceId array
     * @param  string $operationUserId user sequence id
     * @param  string $languageCode    dispaly language code.
     *
     * @throws GrnDatabaseException         Any error in the database.
     * @return \grn\space\data\collection\TodoCollection
     */
    public function selectIncompleteTodoListBySpaceIdsUserId(
        array $spaceIdArray,
        $operationUserId,
        $languageCode
    ) {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "SELECT";
            $query .= " td._id, ";
            $query .= " td.col_category, ";
            $query .= " td.col_start_timestamp, ";
            $query .= " td.col_deadline_timestamp, ";
            $query .= " td.col_timezone, ";
            $query .= " td.col_title, ";
            $query .= " CASE td.col_is_rich_text WHEN '1' THEN td.col_content_html ELSE td.col_content END AS col_content, ";
            $query .= " td.col_is_rich_text, ";
            $query .= " td.col_is_complete, ";
            $query .= " td.col_creator, ";
            $query .= " td.col_creator_name, ";
            $query .= " td.col_create_timestamp, ";
            $query .= " td.col_modifier, ";
            $query .= " td.col_modifier_name, ";
            $query .= " td.col_modify_timestamp, ";
            $query .= " space._id AS col_space, ";
            $query .= " IFNULL(local.col_space_name, space.col_space_name) AS col_space_name";
            $query .= " FROM";
            $query .= "  tab_grn_space_todo AS td";
            $query .= ", tab_grn_space_todo_user AS tdUser";
            $query .= ", tab_cb_user AS user ";
            $query .= ", tab_grn_space_category AS ctg ";
            $query .= ", tab_grn_space_category_hierarchy AS ctgHierarchy ";
            $query .= ", tab_grn_space_space_application AS spaceAppl ";
            $query .= ", tab_grn_space_space AS space LEFT JOIN (tab_grn_space_space_local AS local INNER JOIN tab_cb_language_status AS l ON local.col_language = l._id AND l.col_language = '"
                      . $dbConn->escape($languageCode)
                      . "') ON space._id = local.col_space";
            $query .= ", tab_grn_space_application AS appl ";
            $query .= " WHERE";
            $query .= "     td.col_category = ctg._id";
            $query .= " AND td._id = tdUser.col_todo";
            $query .= " AND tdUser.col_user = user._id";
            $query .= " AND ctg._id = ctgHierarchy.col_category";
            $query .= " AND ctgHierarchy.col_ancestor = spaceAppl.col_root_category";
            $query .= " AND spaceAppl.col_application = appl._id";
            $query .= " AND spaceAppl.col_space = space._id";
            $query .= " AND appl.col_application_code = '"
                      . Application::APPLICATION_CODE_TODO . "'";
            $query .= " AND user.col_deleted IS NULL";
            $query .= " AND user._id = '" . $dbConn->escape($operationUserId)
                      . "'";
            $query .= " AND tdUser.col_is_complete = '0'";
            $query .= " AND space._id IN (";

            //Search todo ids
            $tempIsNeedComma = false;
            foreach ($spaceIdArray as $spaceId) {
                if ($tempIsNeedComma) {
                    $query .= ", ";
                }

                $query .= "'" . $dbConn->escape($spaceId) . "'";

                $tempIsNeedComma = true;
            }
            $query .= ")";

            //Order by
            $query .= " ORDER BY ";
            $query .= "  td.col_deadline_timestamp ASC";
            $query .= ", td.col_create_timestamp DESC";


            $result = $dbConn->query($query);


            $todoCollection = new TodoCollection();
            while ($row = $dbConn->fetch_assoc($result)) {
                $todoCollection->appendBean(new Todo($row,
                    Todo::NOT_CHECK_INPUT));
            }
            $dbConn->free_result($result);


            //search total count
            $todoCollection->setCountNoLimit(count($todoCollection));
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        return $todoCollection;
    }

    /**
     * The select of assigned incomplete todos is executed to the database.
     *
     * @param  string $operationUserId user sequence id
     * @param  string $languageCode    dispaly language code.
     *
     * @throws GrnDatabaseException         Any error in the database.
     * @return \grn\space\data\collection\TodoCollection
     */
    public function selectAssignedIncompleteTodoListByUserId(
        $operationUserId,
        $languageCode
    ) {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "SELECT";
            $query .= " td._id, ";
            $query .= " td.col_category, ";
            $query .= " td.col_start_timestamp, ";
            $query .= " td.col_deadline_timestamp, ";
            $query .= " td.col_timezone, ";
            $query .= " td.col_title, ";
            $query .= " CASE td.col_is_rich_text WHEN '1' THEN td.col_content_html ELSE td.col_content END AS col_content, ";
            $query .= " td.col_is_rich_text, ";
            $query .= " td.col_is_complete, ";
            $query .= " td.col_creator, ";
            $query .= " td.col_creator_name, ";
            $query .= " td.col_create_timestamp, ";
            $query .= " td.col_modifier, ";
            $query .= " td.col_modifier_name, ";
            $query .= " td.col_modify_timestamp, ";
            $query .= " space._id AS col_space, ";
            $query .= " IFNULL(local.col_space_name, space.col_space_name) AS col_space_name";
            $query .= " FROM";
            $query .= "  tab_grn_space_todo AS td ";
            $query .= ", tab_cb_user AS user ";
            $query .= ", tab_grn_space_category AS ctg ";
            $query .= ", tab_grn_space_category_hierarchy AS ctgHierarchy ";
            $query .= ", tab_grn_space_space_application AS spaceAppl ";
            $query .= ", tab_grn_space_space AS space LEFT JOIN (tab_grn_space_space_local AS local INNER JOIN tab_cb_language_status AS l ON local.col_language = l._id AND l.col_language = '"
                      . $dbConn->escape($languageCode)
                      . "') ON space._id = local.col_space";
            $query .= ", tab_grn_space_application AS appl ";
            $query .= " WHERE";
            $query .= "     td.col_category = ctg._id";
            $query .= " AND ctg._id = ctgHierarchy.col_category";
            $query .= " AND ctgHierarchy.col_ancestor = spaceAppl.col_root_category";
            $query .= " AND spaceAppl.col_application = appl._id";
            $query .= " AND spaceAppl.col_space = space._id";
            $query .= " AND appl.col_application_code = '"
                      . Application::APPLICATION_CODE_TODO . "'";
            $query .= " AND td.col_creator = user._id";
            $query .= " AND user.col_deleted IS NULL";
            $query .= " AND user._id = '" . $dbConn->escape($operationUserId)
                      . "'";
            $query .= " AND td.col_is_complete = '0'";

            //Order by
            $query .= " ORDER BY ";
            $query .= "  td.col_deadline_timestamp ASC";
            $query .= ", td.col_create_timestamp DESC";

            $result = $dbConn->query($query);

            $todoCollection = new TodoCollection();
            while ($row = $dbConn->fetch_assoc($result)) {
                $todoCollection->appendBean(new Todo($row,
                    Todo::NOT_CHECK_INPUT));
            }
            $dbConn->free_result($result);

            //search total count
            $todoCollection->setCountNoLimit(count($todoCollection));
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        return $todoCollection;
    }

    /**
     * Select Todo By Comment ID
     *
     * @param string $commendId
     *
     * @return \grn\space\data\bean\Todo
     * @throws GrnDataNotFoundException
     * @throws GrnDatabaseException
     */
    public function selectTodoByCommentId($commendId)
    {
        try {
            $db = $this->getDatabaseConnection();

            $result = $db->query(
                "SELECT " .
                "todo.* " .
                "FROM " .
                "tab_grn_space_todo AS todo, " .
                "tab_grn_space_todo_comment AS todo_comment " .
                "WHERE " .
                "todo._id = todo_comment.col_todo " .
                "AND " .
                "todo_comment.col_comment = '{$db->escape($commendId)}';"
            );
            $row = $db->fetch_assoc($result);
            $db->free_result($result);

            if ( ! $row) {
                throw new GrnDataNotFoundException(ErrorCode::GRN_INVALID_TODO_ID);
            }

            return new Todo($row, Todo::NOT_CHECK_INPUT);
        } catch (GrnDatabaseException $e) {
            throw $e;
        }
    }

    /**
     * @param int $startId
     * @param int $endId
     * @param int $maxLength
     *
     * @return array
     */
    public function getAllTodoForFtsFullIndexer($startId, $endId, $maxLength)
    {
        $db = $this->getDatabaseConnection();
        $result = $db->query(
            "SELECT " .
            "todo._id, " .
            "todo.col_title, " .
            "CASE WHEN CHAR_LENGTH(todo.col_content) > {$db->escape($maxLength)} "
            .
            "THEN 1 ELSE 0 END AS truncated, " .
            "LEFT(todo.col_content, {$db->escape($maxLength)}) AS col_content, "
            .
            "todo.col_modify_timestamp, " .
            "todo.col_modifier, " .
            "todothread.col_thread, " .
            "a.col_space " .
            "FROM " .
            "tab_grn_space_todo as todo, " .
            "tab_grn_space_todo_thread as todothread, " .
            "tab_grn_space_thread as thread, " .
            "tab_grn_space_category_hierarchy as h, " .
            "tab_grn_space_category as c, " .
            "tab_grn_space_space_application as a " .
            "WHERE " .
            "todo._id>={$db->escape($startId)} AND " .
            "{$db->escape($endId)}>=todo._id AND " .
            "todo._id=todothread.col_todo AND " .
            "todothread.col_thread=thread._id AND " .
            "thread.col_category=h.col_category AND " .
            "h.col_ancestor=c._id AND " .
            "c.col_hierarchy_level=1 AND " .
            "c._id=a.col_root_category " .
            "FOR UPDATE"
        );
        $rows = [];
        while ($row = $db->fetch_assoc($result)) {
            $rows[] = $row;
        }
        $db->free_result($result);

        return $rows;
    }

    /**
     * Select ExpiredTodo By UserId
     *
     * @param int $user_id
     * @param int $start_timestamp
     * @param int $end_timestamp
     *
     * @return array  expired todos (id, title)
     * @throws \CB_DatabaseConnection::throwError
     */
    public function selectUncompleteTodoByUserIdByTimestamp(
        $user_id,
        $start_timestamp,
        $end_timestamp
    ) {
        $db = $this->getDatabaseConnection();
        $result = $db->query(
            $this->createCommandSelectExpiredTodoByUserId($user_id,
                $start_timestamp, $end_timestamp));

        ($result === false) && $db->throwError();

        $todos = [];

        while (($todo = $db->fetch_assoc($result))) {
            array_push($todos, $todo);
        }
        $db->free_result($result);

        return $todos;
    }

    /**
     * @param int $user_id
     * @param int $start_timestamp
     * @param int $end_timestamp
     *
     * @return string  Query of selectExpiredTodoByUserId
     */
    public function createCommandSelectExpiredTodoByUserId(
        $user_id,
        $start_timestamp,
        $end_timestamp
    ) {
        $query = 'SELECT ';
        $data_columns = [
            'todo._id'                    => 'todo_id,',
            'todo.col_title'              => 'title,',
            'todo.col_deadline_timestamp' => 'deadline,',
            'todo.col_timezone'           => 'timezone,',
            'application.col_space'       => 'space_id'
        ];

        $get_data_statement = '';

        foreach ($data_columns as $column => $alias) {
            $get_data_statement .= $column . ' ' . $alias . ' ';
        }

        $query .= $get_data_statement . 'FROM tab_grn_space_todo AS todo';

        $join_table_list = [
            [
                'table'  => 'tab_grn_space_todo_user',
                'alias'  => 'user',
                'filter' => 'todo._id = user.col_todo'
            ],

            [
                'table'  => 'tab_grn_space_todo_thread',
                'alias'  => 'todo_thread',
                'filter' => 'todo._id = todo_thread.col_todo'
            ],

            [
                'table'  => 'tab_grn_space_thread',
                'alias'  => 'space_thread',
                'filter' => 'todo_thread.col_thread = space_thread._id'
            ],

            [
                'table'  => 'tab_grn_space_category',
                'alias'  => 'category',
                'filter' => 'space_thread.col_category = category._id'
            ],

            [
                'table'  => 'tab_grn_space_category_hierarchy',
                'alias'  => 'hierarchy',
                'filter' => 'category._id = hierarchy.col_ancestor'
            ],

            [
                'table'  => 'tab_grn_space_space_application',
                'alias'  => 'application',
                'filter' => 'hierarchy.col_ancestor = application.col_root_category'
            ]
        ];

        $table_join_statement = '';
        foreach ($join_table_list as $join) {
            $table_join_statement .= ' INNER JOIN ' . $join['table'] . ' AS '
                                     . $join['alias'] . ' ON ' . $join['filter']
                                     . ' ';
        }

        $condition_set = [
            'WHERE user.col_user = '               => $user_id,
            'AND   user.col_is_complete = '        => 0,
            'AND   todo.col_deadline_timestamp >=' => $start_timestamp,
            'AND   todo.col_deadline_timestamp < ' => $end_timestamp,
            'ORDER BY deadline, todo._id'          => 'ASC'
        ];

        $condition_statement = '';
        foreach ($condition_set as $condition => $value) {
            $condition_statement .= $condition . ' '
                                    . $this->getDatabaseConnection()
                                           ->escape($value) . ' ';
        }

        return $query . $table_join_statement . $condition_statement;
    }

    /**
     * Get all todo ids by discussion id.
     *
     * @param  array $discussionIds
     *
     * @throws GrnDatabaseException    Any error in the database.
     * @return array  todo id(s)
     */
    public function getTodoIdByDiscussionId(array $discussionIds)
    {
        try {
            if (count($discussionIds) <= 0) {
                return [];
            }
            $db = $this->getDatabaseConnection();
            $query = "SELECT col_todo FROM tab_grn_space_todo_thread WHERE ";
            foreach ($discussionIds as $k => $discussionId) {
                $discussionIds[$k] = "'" . $db->escape($discussionId) . "'";
            }
            $query .= "col_thread IN (" . implode(",", $discussionIds) . ");";
            $result = $db->query($query);
            $todoId = [];
            while ($todo = $db->fetch_assoc($result)) {
                $todoId[] = $todo['col_todo'];
            }

            return $todoId;
        } catch (GrnDatabaseException $e) {
            throw $e;
        }
    }

    /**
     * @param $todo_id_list
     * @param $target_category_id
     *
     * @return bool|\mysqli_result
     */
    public function moveTodoList($todo_id_list, $target_category_id)
    {
        $dbConn = $this->getDatabaseConnection();

        $query = "UPDATE tab_grn_space_todo SET" .
                 " col_category = '@S'" .
                 " WHERE" .
                 " _id IN (@A);";
        $query = cb_queryf($dbConn, $query, $target_category_id, $todo_id_list);

        $result = $dbConn->query($query);

        return $result;
    }
}
