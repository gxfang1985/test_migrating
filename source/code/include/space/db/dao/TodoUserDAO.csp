<?php

namespace grn\space\db\dao;

use grn\space\common\data\bean\Application;
use grn\space\common\data\bean\SpaceMember;
use grn\space\common\data\collection\SpaceMemberCollection;
use grn\space\common\db\dao\DataAccessControlAbstract;
use grn\space\common\exception\ErrorCode;
use grn\space\common\exception\GrnDatabaseException;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\data\bean\Todo;
use grn\space\data\bean\TodoUser;
use grn\space\data\collection\TodoCollection;
use grn\space\data\collection\TodoUserCollection;

/**
 * Database Back Layer
 * This layer mediates the database front layer and the DB.
 *
 * TodoUser Facade Data Access Object Class
 * Accept requests from the database front layer for all TodoUser
 **/
class TodoUserDAO extends DataAccessControlAbstract
{
    const IS_COMPLETED = 1;

    /**
     * The insert of todo users is executed to the database.
     *
     * @param TodoUserCollection $todoUserCollection
     *
     * @throws GrnDatabaseException   Any error in the database.
     */
    public function insertTodoUsers(TodoUserCollection $todoUserCollection)
    {
        try {
            $dbConn = $this->getDatabaseConnection();
            $idTodo = null;
            $userAssigns = [];
            /** @var TodoUser $todoUser */
            foreach ($todoUserCollection as $todoUser) {
                $idTodo = $todoUser->getTodoId();
                $idUser
                    = $dbConn->escape($todoUser->getMemberID());
                $userAssigns[$idUser] = $todoUser;
            }

            if ($idTodo) {
                //Get user display name for insert new
                if (count($userAssigns) > 0) {
                    // get all display name of new assigns list from tab_cb_user
                    $inUserIds = implode("','", array_keys($userAssigns));
                    $query
                        = "SELECT _id, col_display_name FROM tab_cb_user WHERE _id IN ('"
                          . $inUserIds . "')"
                          . " AND col_deleted IS NULL";
                    $result = $dbConn->query($query);
                    $insert_query
                        = "INSERT INTO tab_grn_space_todo_user (col_user, col_todo, col_display_order, col_is_complete, col_display_name) VALUES ";
                    $tempIsNeedComma = false;
                    while ($row = $dbConn->fetch_assoc($result)) {
                        $idUser = $row['_id'];
                        if (array_key_exists($idUser, $userAssigns)) {
                            if ($tempIsNeedComma) {
                                $insert_query .= ", ";
                            }

                            $todoUser = $userAssigns[$idUser];
                            $userDisplayName = $row['col_display_name'];
                            $insert_query .= "(";
                            $insert_query .= "'" . $idUser . "', ";
                            $insert_query .= "'"
                                             . $dbConn->escape($todoUser->getTodoId())
                                             . "', ";
                            $insert_query .= "'"
                                             . $dbConn->escape($todoUser->getDisplayOrder())
                                             . "', ";
                            $insert_query .= "'" . (($todoUser->isComplete())
                                    ? "1" : "0") . "',";
                            $insert_query .= "'"
                                             . $dbConn->escape($userDisplayName)
                                             . "'";
                            $insert_query .= ")";

                            $tempIsNeedComma = true;
                        }
                    }

                    $dbConn->free_result($result);
                    $insert_query .= ";";
                    if ($tempIsNeedComma) {
                        $dbConn->query($insert_query);
                    }
                }
            }
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }
    }

    /**
     * Insert a record into todo users.
     * When the record is duplicated, this method updates displayOrder value of the record.
     *
     * The retuend value is a little tricky.
     * 0 : There had been the same record already so that no record was changed.
     * 1 : There had been no record whose col_user and col_todo and col_todo and col_display_order and col_is_complete were the same with $todoUser so that a new record was inserted.
     * 2 : There had been the record whose col_display_order were the same with $todoUser so that only col_thread_name of the record was updated.
     *
     * @param TodoUserCollection $todoUserCollection
     *
     * @throws GrnDatabaseException     Any error in the database.
     */
    public function insertOnDuplicateUpdateTodoUsers($todoUserCollection)
    {
        try {
            $dbConn = $this->getDatabaseConnection();
            $idTodo = null;
            /** @var TodoUser $todoUser */
            foreach ($todoUserCollection as $todoUser) {
                $idTodo = $todoUser->getTodoId();
                break;
            }
            $userAssigns = [];
            if ($idTodo) {
                // get all user list in share todo
                $query
                    = "SELECT col_is_complete, col_user FROM tab_grn_space_todo_user WHERE col_todo = '"
                      . $dbConn->escape($idTodo) . "'";
                $result = $dbConn->query($query);
                while ($row = $dbConn->fetch_assoc($result)) {
                    $userAssigns[$row['col_user']] = $row['col_is_complete'];
                }
            }

            $usersListForInsertCollection = new TodoUserCollection();
            foreach ($todoUserCollection as $todoUser) {
                $idUser = $dbConn->escape($todoUser->getMemberID());
                $is_initialize = $todoUser->isInitialize();

                if (array_key_exists($idUser, $userAssigns)) {
                    $is_initialize = $todoUser->isInitialize();

                    // update user assigns infor
                    $is_complete = false;
                    if ( ! $is_initialize) {
                        $is_complete = $userAssigns[$idUser]
                                       == self::IS_COMPLETED;
                    }
                    $todoUser->setComplete($is_complete);

                    $this->updateTodoUser($todoUser);
                } else {
                    // get list user need to insert new
                    $usersListForInsertCollection->appendBean($todoUser);
                }
            }
            //Get user display name for insert new
            if (count($usersListForInsertCollection) > 0) {
                // insert new user to assigns list
                $this->insertTodoUsers($usersListForInsertCollection);
            }
        } catch (GrnDatabaseException $exception) {
            //GrnDatabaseException might be caught here someday...
            throw $exception;
        }
    }

    /**
     * The update of todo user is executed to the database.
     *
     * @param TodoUser $todoUser
     *
     * @throws GrnDatabaseException     Any error in the database.
     * @return TodoUser
     */
    public function updateTodoUser(TodoUser $todoUser)
    {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "UPDATE tab_grn_space_todo_user SET ";
            $query .= "  col_display_order='"
                      . $dbConn->escape($todoUser->getDisplayOrder()) . "'";
            $query .= ", col_is_complete='" . (($todoUser->isComplete()) ? "1"
                    : "0") . "'";
            $query .= " WHERE col_user = '{$dbConn->escape($todoUser->getMemberID())}'";
            $query .= " AND   col_todo = '{$dbConn->escape($todoUser->getTodoId())}'";
            $query .= ";";

            $dbConn->query($query);
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        return $todoUser;
    }

    /**
     * The delete of todo user is executed to the data base.
     *
     * @param TodoUser $todoUser
     *
     * @throws GrnDataNotFoundException     When the specified todo is not found.
     * @throws GrnDatabaseException         Any error in the database.
     * @return TodoUser
     */
    public function deleteTodoUser(TodoUser $todoUser)
    {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "DELETE FROM tab_grn_space_todo_user";
            $query .= " WHERE col_user = '{$dbConn->escape($todoUser->getMemberID())}'";
            $query .= " AND   col_todo = '{$dbConn->escape($todoUser->getTodoId())}'";
            $query .= ";";

            $dbConn->query($query);

            $deleteCount = $dbConn->affected_rows();
            if ($deleteCount === 0) {
                throw new GrnDataNotFoundException(ErrorCode::GRN_INVALID_TODO_MEMBER);
            }
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        return $todoUser;
    }

    /**
     * The delete of todo users is executed to the data base.
     *
     * @param string $todoId todo sequence id
     *
     * @throws GrnDataNotFoundException     When the specified todo is not found.
     * @throws GrnDatabaseException         Any error in the database.
     * @return TodoUser
     */
    public function deleteTodoUsersByTodoId($todoId)
    {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "DELETE FROM tab_grn_space_todo_user";
            $query .= " WHERE col_todo = '{$dbConn->escape($todoId)}'";
            $query .= ";";

            $dbConn->query($query);

            $deleteCount = $dbConn->affected_rows();
            if ($deleteCount === 0) {
                throw new GrnDataNotFoundException(ErrorCode::GRN_INVALID_TODO_MEMBER);
            }
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }
    }

    /**
     * The delete of todo users is executed to the data base.
     *
     * @param string             $todoId todo sequence id
     * @param TodoUserCollection $todoUserCollection
     *
     * @throws GrnDataNotFoundException     When the specified todo user is not found.
     * @throws GrnDatabaseException         Any error in the database.
     * @return TodoUser
     */
    public function deleteTodoUsersByTodoIdTodoUserCollection(
        $todoId,
        $todoUserCollection
    ) {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "DELETE FROM tab_grn_space_todo_user";
            $query .= " WHERE col_todo = '{$dbConn->escape($todoId)}'";
            $query .= " AND (col_user IS NULL ";
            $idUsers = "";
            //user ids
            $tempIsNeedComma = false;
            /** @var TodoUser $todoUser */
            foreach ($todoUserCollection as $todoUser) {
                if ($todoUser->getMemberID() != "") {
                    if ($tempIsNeedComma) {
                        $idUsers .= ", ";
                    }
                    $idUsers .= "'"
                                . $dbConn->escape($todoUser->getMemberID())
                                . "'";
                    $tempIsNeedComma = true;
                }
            }
            if ($idUsers != "") {
                $query .= "OR col_user IN (";
                $query .= $idUsers;
                $query .= "))";
            } else {
                $query .= ");";
            }
            $dbConn->query($query);

            $deleteCount = $dbConn->affected_rows();
            if ($deleteCount === 0) {
                throw new GrnDataNotFoundException(ErrorCode::GRN_INVALID_TODO_MEMBER);
            }
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }
    }

    /**
     * The delete of todo users is executed to the data base.
     *
     * @param string $spaceId space sequence id
     * @param array  $removedSpaceUserIds
     *
     * @throws GrnDatabaseException     Any error in the database.
     */
    public function deleteTodoUsersBySpaceIdSpaceMemberCollection(
        $spaceId,
        array $removedSpaceUserIds
    ) {
        if (count($removedSpaceUserIds) === 0) {
            return;
        }

        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "DELETE FROM todoUser";
            $query .= " USING";
            $query .= " tab_grn_space_todo_user AS todoUser, ";
            $query .= " tab_grn_space_todo AS todo, ";
            $query .= " tab_grn_space_category_hierarchy AS hirhy, ";
            $query .= " tab_grn_space_category AS ctg, ";
            $query .= " tab_grn_space_space_application AS spcApl, ";
            $query .= " tab_grn_space_application AS apl, ";
            $query .= " tab_grn_space_space AS spc ";
            $query .= " WHERE";
            $query .= "     todo._id = todoUser.col_todo";
            $query .= " AND todo.col_category = hirhy.col_category";
            $query .= " AND hirhy.col_ancestor = ctg._id";
            $query .= " AND ctg.col_hierarchy_level = '1'";
            $query .= " AND ctg._id = spcApl.col_root_category";
            $query .= " AND spcApl.col_application = apl._id";
            $query .= " AND spcApl.col_space = spc._id";
            $query .= " AND apl.col_application_code = '"
                      . Application::APPLICATION_CODE_TODO . "'";
            $query .= " AND spc._id = '" . $dbConn->escape($spaceId) . "'";
            $query .= " AND todoUser.col_user IN (";

            //user ids
            $tempIsNeedComma = false;
            /** @var \grn\space\common\data\bean\SpaceMember $spaceMember */
            foreach ($removedSpaceUserIds as $uid) {
                if ($tempIsNeedComma) {
                    $query .= ", ";
                }

                $query .= "'" . $dbConn->escape($uid) . "'";

                $tempIsNeedComma = true;
            }
            $query .= ");";

            $dbConn->query($query);
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }
    }

    /**
     * The select of a todo is executed to the database.
     *
     * @param string $userId user sequence id
     * @param string $todoId todo sequence id
     *
     * @throws GrnDataNotFoundException     todo user is not found
     * @throws GrnDatabaseException         Any error in the database.
     * @return TodoUser
     */
    public function selectTodoUser($userId, $todoId)
    {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "SELECT ";
            $query .= "col_user AS _id, ";
            $query .= "col_user AS member_id, ";
            $query .= "'user' AS member_type, ";
            $query .= "col_todo, ";
            $query .= "col_display_order, ";
            $query .= "col_is_complete, ";
            $query .= "col_display_name ";
            $query .= "FROM ";
            $query .= "tab_grn_space_todo_user ";
            $query .= "WHERE col_user = '{$dbConn->escape($userId)}' ";
            $query .= "AND   col_todo = '{$dbConn->escape($todoId)}' ";
            $query .= ";";

            $result = $dbConn->query($query);

            $row = $dbConn->fetch_assoc($result);
            $dbConn->free_result($result);
            if ( ! $row) {
                throw new GrnDataNotFoundException(ErrorCode::GRN_INVALID_TODO_MEMBER);
            }
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        return new TodoUser($row, TodoUser::NOT_CHECK_INPUT);
    }


    /**
     * The select of todo users is executed to the database.
     *
     * @param string $todoId todo sequence id
     *
     * @throws GrnDatabaseException     Any error in the database.
     * @return TodoUserCollection
     */
    public function selectTodoUserListByTodoId($todoId)
    {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "SELECT ";
            $query .= "col_user AS _id, ";
            $query .= "col_user AS member_id, ";
            $query .= "'user' AS member_type, ";
            $query .= "col_todo, ";
            $query .= "col_display_order, ";
            $query .= "col_is_complete, ";
            $query .= "col_display_name ";
            $query .= "FROM ";
            $query .= "tab_grn_space_todo_user ";
            $query .= "WHERE col_todo = '{$dbConn->escape($todoId)}' ";
            $query .= "ORDER BY col_display_order, _id ";
            $query .= ";";

            $result = $dbConn->query($query);


            $todoCollection = new TodoUserCollection();
            while ($row = $dbConn->fetch_assoc($result)) {
                $todoCollection->appendBean(new TodoUser($row,
                    TodoUser::NOT_CHECK_INPUT));
            }
            $dbConn->free_result($result);


            //search total count
            $query = "SELECT FOUND_ROWS() AS count;";
            $result = $dbConn->query($query);
            $row = $dbConn->fetch_assoc($result);
            $dbConn->free_result($result);
            if ( ! $row) {
                throw new GrnDatabaseException();
            }
            $todoCollection->setCountNoLimit($row['count']);
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        return $todoCollection;
    }

    /**
     * @param TodoCollection $todoCollection
     *
     * @return array
     */
    public function selectTodoUserIDsFromTodoCollection(
        TodoCollection $todoCollection
    ): array {
        $todo_ids = $todoCollection->toArray();
        $db = $this->getDatabaseConnection();

        $query_format = "SELECT DISTINCT ";
        $query_format .= "col_user AS member_id ";
        $query_format .= "FROM ";
        $query_format .= "tab_grn_space_todo_user ";
        $query_format .= "WHERE col_todo IN( @A )";
        $query_format .= ";";

        $query = $db->format($query_format, [$todo_ids]);
        $result = $db->query($query);

        $user_ids = [];
        while ($row = $db->fetch_assoc($result)) {
            $user_ids[] = $row["member_id"];
        }
        $db->free_result($result);

        return $user_ids;
    }

    /**
     * The select of a todo-user is executed to the database.
     *
     * @param TodoCollection $todoCollection
     *
     * @throws GrnDatabaseException         Any error in the database.
     * @return array {todo sequence id, TodoUserCollection}
     */
    public function selectTodoUserListByTodoCollection(
        TodoCollection $todoCollection
    ) {
        if ($todoCollection->count() === 0) {
            return [];
        }

        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "SELECT ";
            $query .= "col_user AS _id, ";
            $query .= "col_user AS member_id, ";
            $query .= "'user' AS member_type, ";
            $query .= "col_todo, ";
            $query .= "col_display_order, ";
            $query .= "col_is_complete, ";
            $query .= "col_display_name ";
            $query .= "FROM ";
            $query .= "tab_grn_space_todo_user ";
            $query .= "WHERE col_todo IN (";

            //Search todo id
            $tempIsNeedComma = false;
            /** @var Todo $todo */
            foreach ($todoCollection as $todo) {
                if ($tempIsNeedComma) {
                    $query .= ", ";
                }

                $query .= "'" . $dbConn->escape($todo->getId()) . "'";

                $tempIsNeedComma = true;
            }
            $query .= ")";

            //Order by
            $query .= " ORDER BY col_todo, col_display_order, _id";
            $query .= ";";

            $result = $dbConn->query($query);


            $beforeTodoId = 0;
            $resultTodoUserCollectionArray = [];
            while ($row = $dbConn->fetch_assoc($result)) {
                //next todo flag on
                $tempIsNextTodo = ($beforeTodoId == $row[TodoUser::TODO_ID])
                    ? false : true;

                if ($tempIsNextTodo) {
                    //new: next todo file collection
                    $todoUserCollection = new TodoUserCollection();
                    $resultTodoUserCollectionArray[$row[TodoUser::TODO_ID]]
                        = $todoUserCollection;
                }

                $todoUserCollection->appendBean(new TodoUser($row,
                    TodoUser::NOT_CHECK_INPUT));

                $beforeTodoId = $row[TodoUser::TODO_ID];
            }
            $dbConn->free_result($result);


            //total count
            foreach ($resultTodoUserCollectionArray as $todoUserCollection) {
                $todoUserCollection->setCountNoLimit(count($todoUserCollection));
            }

        } catch (GrnDatabaseException $e) {
            throw $e;
        }

        return $resultTodoUserCollectionArray;
    }
}
