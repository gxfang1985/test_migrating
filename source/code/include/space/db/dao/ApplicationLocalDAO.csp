<?php

namespace grn\space\db\dao;

use grn\space\common\data\bean\ApplicationLocal;
use grn\space\common\data\collection\ApplicationLocalCollection;
use grn\space\common\db\dao\DataAccessControlAbstract;
use grn\space\common\exception\ErrorCode;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\common\exception\GrnInvalidArgumentException;
use grn\space\common\exception\GrnDatabaseException;

/**
 * Class ApplicationLocalDAO
 */
class ApplicationLocalDAO extends DataAccessControlAbstract
{
    /**
     * Insert a record into tab_grn_space_application_local.
     * When the record is duplicated, this method updates col_name value of the record.
     *
     * The retuend value is a little tricky.
     * 0 : There had been the same record already so that no record was changed.
     * 1 : There had been no record whose col_application and col_language were the same with $applicationLocal so that a new record was inserted.
     * 2 : There had been the record whose col_application and col_language were the same with $applicationLocal so that only col_application_name of the record was updated.
     *
     * @param \grn\space\common\data\bean\ApplicationLocal $applicationLocal
     *
     * @return integer the number of affected rows.
     * @throws GrnDatabaseException
     */
    public function insertOnDuplicateUpdate(ApplicationLocal $applicationLocal)
    {
        try {
            $db = $this->getDatabaseConnection();

            $db->query(
                "INSERT INTO " .
                "tab_grn_space_application_local (col_application, col_application_name, col_language) "
                .
                "SELECT " .
                "'{$db->escape($applicationLocal->getApplicationId())}', " .
                "'{$db->escape($applicationLocal->getApplicationName())}', " .
                "language._id " .
                "FROM " .
                "tab_cb_language_status AS language " .
                "WHERE " .
                "language.col_language = '{$db->escape($applicationLocal->getLanguageCode())}' "
                .
                "ON DUPLICATE KEY " .
                "UPDATE " .
                "col_application_name = '{$db->escape($applicationLocal->getApplicationName())}';"
            );

            return $db->affected_rows();

        } catch (GrnDatabaseException $exception) {
            //GrnDatabaseException might be caught here someday...
            throw $exception;
        }
    }

    /**
     * Select ApplicationLocal by application ID
     *
     * @param string $applicationId
     *
     * @return \grn\space\common\data\collection\ApplicationLocalCollection
     * @throws GrnDatabaseException
     */
    public function searchByApplicationId($applicationId)
    {
        try {
            $db = $this->getDatabaseConnection();

            $result = $db->query(
                "SELECT " .
                "1 AS _id, "
                . // This is dummy data to set up ApplicationLocal as a BeanAbstract. BeanAbstract requires "_id".
                "local.col_application, " .
                "local.col_application_name, " .
                "language.col_language " .
                "FROM " .
                "tab_grn_space_application_local AS local, " .
                "tab_cb_language_status AS language " .
                "WHERE " .
                "local.col_language = language._id " .
                "AND " .
                "local.col_application = '{$db->escape($applicationId)}';"
            );

            $applicationLocalCollection = new ApplicationLocalCollection();
            while ($row = $db->fetch_assoc($result)) {
                $applicationLocalCollection->appendBean(new ApplicationLocal($row,
                    ApplicationLocal::NOT_CHECK_INPUT));
            }

            $db->free_result($result);

            return $applicationLocalCollection;
        } catch (GrnDatabaseException $exception) {
            //GrnDatabaseException might be caught here someday...
            throw $exception;
        }
    }

    /**
     * Delete CatgoryLocal
     *
     * @param \grn\space\common\data\bean\ApplicationLocal $applicationLocal
     * @param string                                       $languageId
     *
     * @return \grn\space\common\data\bean\ApplicationLocal
     * @throws GrnDataNotFoundException
     * @throws GrnDatabaseException
     */
    public function delete(ApplicationLocal $applicationLocal, $languageId)
    {
        try {
            $db = $this->getDatabaseConnection();

            $db->query(
                "DELETE FROM " .
                "tab_grn_space_application_local " .
                "WHERE " .
                "col_application = '{$db->escape($applicationLocal->getApplicationId())}' "
                .
                "AND " .
                "col_language = '{$db->escape($languageId)}';"
            );
            if ($db->affected_rows() == 0) {
                throw new GrnDataNotFoundException(ErrorCode::GRN_APPLICATION_LOCAL_NOT_FOUND);
            }
        } catch (GrnDatabaseException $e) {
            throw $e;
        }

        return $applicationLocal;
    }
}
