<?php

namespace grn\space\db\dao;

use grn\space\common\data\bean\Category;
use grn\space\data\bean\Thread;
use grn\space\data\bean\SynthesisThreadComment;
use grn\space\data\collection\ThreadCollection;
use grn\space\data\collection\TodoCollection;
use grn\space\data\collection\SynthesisThreadCommentCollection;
use grn\space\data\condition\SynthesisThreadCommentSearchCondition;
use grn\space\data\condition\ThreadSearchCondition;
use grn\space\common\data\bean\Application;
use grn\space\common\db\dao\DataAccessControlAbstract;
use grn\space\common\exception\GrnDatabaseException;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\common\exception\ErrorCode;
use grn\space\common\utility\ValidateUtility;


/**
 * Database Back Layer
 * This layer mediates the database front layer and the DB.
 *
 * Thread Facade Data Access Object Class
 * Accept requests from the database front layer for all Thread
 **/
class ThreadDAO extends DataAccessControlAbstract
{
    /**
     * The insert of thread is executed to the database.
     *
     * @param  \grn\space\data\bean\Thread $thread
     *
     * @throws GrnDatabaseException     Any error in the database.
     * @return \grn\space\data\bean\Thread
     */
    public function insertThread(Thread $thread)
    {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "INSERT INTO tab_grn_space_thread SET ";
            $query .= "  _id='" . $dbConn->escape($thread->getId()) . "'";
            $query .= ", col_category='"
                      . $dbConn->escape($thread->getCategoryId()) . "'";

            if ($thread->getFolderId() > 0) {
                $query .= cb_queryf($dbConn, " , col_folder = '@S'",
                    $thread->getFolderId());
            }

            $query .= " , col_title='" . $dbConn->escape($thread->getTitle())
                      . "'";
            if ($thread->isRichText()) {
                require_once('grn/controller.csp');
                $contentHtml
                    = grn_wash_script_without_style_attribute($thread->getContent());
                $content = grn_strip_tags($contentHtml);
                $query .= ", col_content_html = '"
                          . $dbConn->escape($contentHtml) . "'";
                $query .= ", col_content = '" . $dbConn->escape($content)
                          . "'";
            } else {
                $query .= ", col_content_html = NULL";
                $query .= ", col_content = '"
                          . $dbConn->escape($thread->getContent()) . "'";
            }
            $query .= ", col_is_rich_text='" . (($thread->isRichText()) ? "1"
                    : "0") . "'";
            $query .= ", col_comment_sequence_no='"
                      . $dbConn->escape($thread->getCommentSequenceNoId())
                      . "'";
            $query .= ", col_is_system_use='" . (($thread->isSystemUse()) ? "1"
                    : "0") . "'";
            $query .= ", col_creator='"
                      . $dbConn->escape($thread->getCreatorId()) . "'";
            $query .= ", col_creator_name='"
                      . $dbConn->escape($thread->getCreatorName()) . "'";
            $query .= ", col_create_timestamp='"
                      . $dbConn->escape($thread->getCreateTimestamp()) . "'";
            if (ValidateUtility::isNotNull($thread->getModifierId())) {
                $query .= ", col_modifier='"
                          . $dbConn->escape($thread->getModifierId()) . "'";
            }
            $query .= ", col_modifier_name='"
                      . $dbConn->escape($thread->getModifierName()) . "'";
            if (ValidateUtility::isNotNull($thread->getModifyTimestamp())) {
                $query .= ", col_modify_timestamp='"
                          . $dbConn->escape($thread->getModifyTimestamp())
                          . "'";
            }
            if (ValidateUtility::isNotNull($thread->getComponentModifyTimestamp())) {
                $query .= ", col_component_modify_timestamp='"
                          . $dbConn->escape(
                        $thread->getComponentModifyTimestamp()
                    ) . "'";
            }
            $query .= ";";

            $dbConn->query($query);
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        return $thread;
    }

    /**
     * The update of thread is executed to the database.
     *
     * @param  \grn\space\data\bean\Thread $thread
     *
     * @throws GrnDatabaseException     Any error in the database.
     * @return \grn\space\data\bean\Thread
     */
    public function updateThread(Thread $thread)
    {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "UPDATE tab_grn_space_thread SET ";
            $query .= "  col_category='"
                      . $dbConn->escape($thread->getCategoryId()) . "'";
            $query .= ", col_title='" . $dbConn->escape($thread->getTitle())
                      . "'";

            if ($thread->getFolderId() > 0) {
                $query .= cb_queryf($dbConn, " , col_folder = '@S'",
                    $thread->getFolderId());
            } else {
                $query .= " , col_folder = NULL ";
            }

            if ($thread->isRichText()) {
                require_once('grn/controller.csp');
                $contentHtml
                    = grn_wash_script_without_style_attribute($thread->getContent());
                $content = grn_strip_tags($contentHtml);
                $query .= ", col_content_html = '"
                          . $dbConn->escape($contentHtml) . "'";
                $query .= ", col_content = '" . $dbConn->escape($content)
                          . "'";
            } else {
                $query .= ", col_content_html = NULL";
                $query .= ", col_content = '"
                          . $dbConn->escape($thread->getContent()) . "'";
            }
            $query .= ", col_is_rich_text='" . (($thread->isRichText()) ? "1"
                    : "0") . "'";
            $query .= ", col_comment_sequence_no='"
                      . $dbConn->escape($thread->getCommentSequenceNoId())
                      . "'";
            $query .= ", col_is_system_use='" . (($thread->isSystemUse()) ? "1"
                    : "0") . "'";
            if (ValidateUtility::isNull($thread->getCreatorId())) {
                $query .= ", col_creator = NULL ";
            } else {
                $query .= ", col_creator='"
                          . $dbConn->escape($thread->getCreatorId()) . "'";
            }
            $query .= ", col_creator_name='"
                      . $dbConn->escape($thread->getCreatorName()) . "'";
            $query .= ", col_create_timestamp='"
                      . $dbConn->escape($thread->getCreateTimestamp()) . "'";
            if (ValidateUtility::isNull($thread->getModifierId())) {
                $query .= ", col_modifier = NULL ";
            } else {
                $query .= ", col_modifier='"
                          . $dbConn->escape($thread->getModifierId()) . "'";
            }
            $query .= ", col_modifier_name='"
                      . $dbConn->escape($thread->getModifierName()) . "'";
            if (ValidateUtility::isNull($thread->getModifyTimestamp())) {
                $query .= ", col_modify_timestamp = NULL ";
            } else {
                $query .= ", col_modify_timestamp='"
                          . $dbConn->escape($thread->getModifyTimestamp())
                          . "' ";
            }
            if (ValidateUtility::isNull($thread->getComponentModifyTimestamp())) {
                $query .= ", col_component_modify_timestamp = NULL ";
            } else {
                $query .= ", col_component_modify_timestamp='"
                          . $dbConn->escape(
                        $thread->getComponentModifyTimestamp()
                    ) . "' ";
            }
            $query .= " WHERE _id = '{$dbConn->escape($thread->getId())}'";
            $query .= ";";

            $dbConn->query($query);
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        return $thread;
    }


    /**
     * Update Thread component modify timestamp
     *
     * @param  \grn\space\data\bean\Thread $thread
     *
     * @throws GrnDatabaseException     Any error in the database.
     */
    public function updateThreadComponentModifyTimestamp(Thread $thread)
    {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query
                = "UPDATE tab_grn_space_thread SET col_component_modify_timestamp = '"
                  . $dbConn->escape(
                    $thread->getComponentModifyTimestamp()
                ) . "' ";
            $query .= "WHERE _id = '" . $dbConn->escape($thread->getId())
                      . "';";

            $dbConn->query($query);
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }
    }


    /**
     * The delete of thread is executed to the data base.
     *
     * @param \grn\space\data\bean\Thread $thread
     *
     * @throws GrnDataNotFoundException     When the specified thread is not found.
     * @throws GrnDatabaseException         Any error in the database.
     * @return \grn\space\data\bean\Thread
     */
    public function deleteThread(Thread $thread)
    {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query
                = "DELETE FROM tab_grn_space_thread WHERE _id = '{$dbConn->escape($thread->getId())}';";

            $dbConn->query($query);

            $deleteCount = $dbConn->affected_rows();
            if ($deleteCount === 0) {
                throw new GrnDataNotFoundException(ErrorCode::GRN_INVALID_THREAD_ID);
            }
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        return $thread;
    }

    /**
     * The select of a thread is executed to the database.
     *
     * @param string  $threadId          thread sequence id
     * @param boolean $need_html_content TRUE: need html contnet, FALSE: don't need html content. This parameter is valid only when thread is a RichText.
     *
     * @throws GrnDataNotFoundException     thread is not found
     * @throws GrnDatabaseException         Any error in the database.
     * @return \grn\space\data\bean\Thread
     */
    public function selectThread($threadId, $need_html_content = true)
    {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "SELECT ";
            $query .= " _id, ";
            $query .= " col_category, ";
            $query .= " col_title, ";
            if ($need_html_content) {
                $query .= " CASE col_is_rich_text WHEN '1' THEN col_content_html ELSE col_content END AS col_content, ";
            } else {
                $query .= " col_content, ";
            }
            $query .= " col_is_rich_text, ";
            $query .= " col_comment_sequence_no, ";
            $query .= " col_is_system_use, ";
            $query .= " col_creator, ";
            $query .= " col_creator_name, ";
            $query .= " col_create_timestamp, ";
            $query .= " col_modifier, ";
            $query .= " col_modifier_name, ";
            $query .= " col_modify_timestamp, ";
            $query .= " col_component_modify_timestamp,";
            $query .= " col_folder";
            $query .= " FROM ";
            $query .= " tab_grn_space_thread ";
            $query .= " WHERE _id = '{$dbConn->escape($threadId)}'";
            $query .= ";";

            $result = $dbConn->query($query);

            $row = $dbConn->fetch_assoc($result);
            $dbConn->free_result($result);
            if ( ! $row) {
                throw new GrnDataNotFoundException(ErrorCode::GRN_INVALID_THREAD_ID);
            }
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        return new Thread($row, Thread::NOT_CHECK_INPUT);
    }

    /**
     * The select of a thread is executed to the database.
     *
     * @param string $todoId todo sequence id
     *
     * @throws GrnDataNotFoundException     thread is not found
     * @throws GrnDatabaseException         Any error in the database.
     * @return \grn\space\data\bean\Thread
     */
    public function selectThreadByTodoId($todoId)
    {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "SELECT ";
            $query .= " thrd._id, ";
            $query .= " thrd.col_category, ";
            $query .= " thrd.col_title, ";
            $query .= " CASE thrd.col_is_rich_text WHEN '1' THEN thrd.col_content_html ELSE thrd.col_content END AS col_content, ";
            $query .= " thrd.col_is_rich_text, ";
            $query .= " thrd.col_comment_sequence_no, ";
            $query .= " thrd.col_is_system_use, ";
            $query .= " thrd.col_creator, ";
            $query .= " thrd.col_creator_name, ";
            $query .= " thrd.col_create_timestamp, ";
            $query .= " thrd.col_modifier, ";
            $query .= " thrd.col_modifier_name, ";
            $query .= " thrd.col_modify_timestamp, ";
            $query .= " thrd.col_component_modify_timestamp ";
            $query .= " FROM ";
            $query .= " tab_grn_space_thread AS thrd, ";
            $query .= " tab_grn_space_todo_thread AS tdthrd ";
            $query .= " WHERE thrd._id = tdthrd.col_thread";
            $query .= " AND tdthrd.col_todo = '{$dbConn->escape($todoId)}'";
            $query .= ";";

            $result = $dbConn->query($query);

            $row = $dbConn->fetch_assoc($result);
            $dbConn->free_result($result);
            if ( ! $row) {
                throw new GrnDataNotFoundException(ErrorCode::GRN_INVALID_THREAD_ID);
            }
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        return new Thread($row, Thread::NOT_CHECK_INPUT);
    }

    /**
     * Select a thread By comment ID
     *
     * @param string $commentId Comment sequence id
     *
     * @throws GrnDataNotFoundException     thread is not found
     * @throws GrnDatabaseException         Any error in the database.
     * @return \grn\space\data\bean\Thread
     */
    public function selectThreadByCommentId($commentId)
    {
        try {
            $db = $this->getDatabaseConnection();

            $result = $db->query(
                "SELECT " .
                "thread.* " .
                "FROM " .
                "tab_grn_space_thread AS thread, " .
                "tab_grn_space_thread_comment AS thread_comment " .
                "WHERE " .
                "thread._id = thread_comment.col_thread " .
                "AND " .
                "thread_comment.col_comment = '{$db->escape($commentId)}';"
            );
            $row = $db->fetch_assoc($result);

            if ( ! $row) {
                throw new GrnDataNotFoundException(ErrorCode::GRN_INVALID_THREAD_ID);
            }

            return new Thread($row, Thread::NOT_CHECK_INPUT);
        } catch (GrnDatabaseException $e) {
            throw $e;
        }
    }

    /**
     * The select of a thread is executed to the database.
     *
     * @param string $spaceId  space sequence id
     * @param string $threadId thread sequence id
     *
     * @throws GrnDataNotFoundException     thread is not found
     * @throws GrnDatabaseException         Any error in the database.
     * @return \grn\space\data\bean\Thread
     */
    public function selectThreadBySpaceIdThreadId($spaceId, $threadId)
    {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "SELECT";
            $query .= " thrd._id, ";
            $query .= " thrd.col_category, ";
            $query .= " thrd.col_title, ";
            $query .= " CASE thrd.col_is_rich_text WHEN '1' THEN thrd.col_content_html ELSE thrd.col_content END AS col_content, ";
            $query .= " thrd.col_is_rich_text, ";
            $query .= " thrd.col_comment_sequence_no, ";
            $query .= " thrd.col_is_system_use, ";
            $query .= " thrd.col_creator, ";
            $query .= " thrd.col_creator_name, ";
            $query .= " thrd.col_create_timestamp, ";
            $query .= " thrd.col_modifier, ";
            $query .= " thrd.col_modifier_name, ";
            $query .= " thrd.col_modify_timestamp, ";
            $query .= " thrd.col_component_modify_timestamp ";
            $query .= " FROM ";
            $query .= " tab_grn_space_thread AS thrd, ";
            $query .= " tab_grn_space_category_hierarchy AS hirhy, ";
            $query .= " tab_grn_space_category AS ctg, ";
            $query .= " tab_grn_space_space_application AS spcApl, ";
            $query .= " tab_grn_space_application AS apl, ";
            $query .= " tab_grn_space_space AS spc ";
            $query .= " WHERE thrd._id = '" . $dbConn->escape($threadId) . "'";
            $query .= " AND thrd.col_category = hirhy.col_category";
            $query .= " AND hirhy.col_ancestor = ctg._id";
            $query .= " AND ctg.col_hierarchy_level = '1'";
            $query .= " AND ctg._id = spcApl.col_root_category";
            $query .= " AND spcApl.col_application = apl._id";
            $query .= " AND spcApl.col_space = spc._id";
            $query .= " AND apl.col_application_code = '"
                      . Application::APPLICATION_CODE_DISCUSSION . "'";
            $query .= " AND spc._id = '" . $dbConn->escape($spaceId) . "'";
            $query .= ";";

            $result = $dbConn->query($query);

            $row = $dbConn->fetch_assoc($result);
            $dbConn->free_result($result);
            if ( ! $row) {
                throw new GrnDataNotFoundException(ErrorCode::GRN_INVALID_THREAD_ID);
            }
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        return new Thread($row, Thread::NOT_CHECK_INPUT);
    }

    /**
     * The select of a threads is executed to the database.
     *
     * @param \grn\space\data\collection\TodoCollection $todoCollection
     *
     * @throws GrnDatabaseException         Any error in the database.
     * @return \grn\space\data\collection\ThreadCollection
     */
    public function selectThreadListByTodoCollection(
        TodoCollection $todoCollection
    ) {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "SELECT ";
            $query .= " thrd._id, ";
            $query .= " thrd.col_category, ";
            $query .= " thrd.col_title, ";
            $query .= " CASE thrd.col_is_rich_text WHEN '1' THEN thrd.col_content_html ELSE thrd.col_content END AS col_content, ";
            $query .= " thrd.col_is_rich_text, ";
            $query .= " thrd.col_comment_sequence_no, ";
            $query .= " thrd.col_is_system_use, ";
            $query .= " thrd.col_creator, ";
            $query .= " thrd.col_creator_name, ";
            $query .= " thrd.col_create_timestamp, ";
            $query .= " thrd.col_modifier, ";
            $query .= " thrd.col_modifier_name, ";
            $query .= " thrd.col_modify_timestamp, ";
            $query .= " thrd.col_component_modify_timestamp ";
            $query .= " FROM ";
            $query .= " tab_grn_space_thread AS thrd, ";
            $query .= " tab_grn_space_todo_thread AS todoThrd ";
            $query .= " WHERE thrd._id = todoThrd.col_thread";
            $query .= " AND todoThrd.col_todo IN (";

            //Search todo ids
            $tempIsNeedComma = false;
            foreach ($todoCollection as $todo) {
                if ($tempIsNeedComma) {
                    $query .= ", ";
                }

                $query .= "'" . $dbConn->escape($todo->getId()) . "'";

                $tempIsNeedComma = true;
            }
            $query .= ");";


            $result = $dbConn->query($query);


            //子からの検索のため、同じレコードが返る可能性がある。
            //distinctキーワードを指定するとコストがかかるようなので、配列キーを使って重複レコードを弾いている
            $addedThreadId = [];
            $threadCollection = new ThreadCollection();
            while ($row = $dbConn->fetch_assoc($result)) {
                if (array_key_exists($row['_id'], $addedThreadId) === false) {
                    $threadCollection->appendBean(new Thread($row,
                        Thread::NOT_CHECK_INPUT));
                }
                $addedThreadId[$row['_id']] = '';
            }
            $dbConn->free_result($result);


            //search total count
            $threadCollection->setCountNoLimit(count($threadCollection));
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        return $threadCollection;
    }

    /**
     * The select of threads is executed to the database.
     *
     * @param \grn\space\data\condition\ThreadSearchCondition $threadSearchCondition
     *
     * @throws GrnDatabaseException                 Any error in the database.
     * @return \grn\space\data\collection\ThreadCollection
     */
    public function selectThreadList(
        ThreadSearchCondition $threadSearchCondition
    ) {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "SELECT SQL_CALC_FOUND_ROWS";
            $query .= " thrd._id,";
            $query .= " thrd.col_category,";
            $query .= " thrd.col_title,";
            $query .= " CASE thrd.col_is_rich_text WHEN '1' THEN thrd.col_content_html ELSE thrd.col_content END AS col_content,";
            $query .= " thrd.col_is_rich_text,";
            $query .= " thrd.col_comment_sequence_no,";
            $query .= " thrd.col_is_system_use,";
            $query .= " thrd.col_creator,";
            $query .= " thrd.col_creator_name,";
            $query .= " thrd.col_create_timestamp,";
            $query .= " thrd.col_modifier,";
            $query .= " thrd.col_modifier_name,";
            $query .= " thrd.col_modify_timestamp,";
            $query .= " thrd.col_component_modify_timestamp,";
            $query .= " thrd.col_folder";
            $query .= " FROM";
            $query .= " tab_grn_space_thread AS thrd";

            //Search scope range
            if ($threadSearchCondition->getSearchScopeType()
                === ThreadSearchCondition::SEARCH_SCOPE_CATEGORY_TARGET_ONLY
            ) {
                //Search condition category id
                $query .= ", tab_grn_space_category AS ctg ";
                $query .= " WHERE thrd.col_category = ctg._id";
                $query .= " AND ctg._id = '"
                          . $dbConn->escape($threadSearchCondition->getSearchCategoryId())
                          . "'";
            } else {
                $query .= ", tab_grn_space_category AS ctg ";
                $query .= ", tab_grn_space_category_hierarchy AS hirhy ";

                //Search condition category id
                switch ($threadSearchCondition->getSearchScopeType()) {
                    case ThreadSearchCondition::SEARCH_SCOPE_CATEGORY_ANCESTOR:
                        $query .= " WHERE thrd.col_category = ctg._id";
                        $query .= " AND ctg._id = hirhy.col_ancestor";
                        $query .= " AND hirhy.col_category = '"
                                  . $dbConn->escape(
                                $threadSearchCondition->getSearchCategoryId()
                            ) . "'";
                        break;

                    case ThreadSearchCondition::SEARCH_SCOPE_CATEGORY_DESCENDANT:
                        $query .= " WHERE thrd.col_category = ctg._id";
                        $query .= " AND ctg._id = hirhy.col_category";
                        $query .= " AND hirhy.col_ancestor = '"
                                  . $dbConn->escape(
                                $threadSearchCondition->getSearchCategoryId()
                            ) . "'";
                        break;
                }
            }

            if ($threadSearchCondition->getSearchFolderId() > -1) {
                $query .= cb_queryf(
                    $dbConn, " AND thrd.col_folder = '@S'",
                    $threadSearchCondition->getSearchFolderId()
                );
            }

            //Order by
            $query .= " ORDER BY ";
            $tempIsNeedComma = false;
            foreach ($threadSearchCondition->getOrderSortArray() as $sortType) {
                if ($tempIsNeedComma) {
                    $query .= ", ";
                }

                switch ($sortType) {
                    case ThreadSearchCondition::SORT_ID_ASC:
                        $query .= " thrd._id ASC";
                        break;
                    case ThreadSearchCondition::SORT_ID_DESC:
                        $query .= " thrd._id DESC";
                        break;
                    case ThreadSearchCondition::SORT_CREATE_TIME_ASC:
                        $query .= " thrd.col_create_timestamp ASC";
                        break;
                    case ThreadSearchCondition::SORT_CREATE_TIME_DESC:
                        $query .= " thrd.col_create_timestamp DESC";
                        break;
                    case ThreadSearchCondition::SORT_MODIFY_TIME_ASC:
                        $query .= " thrd.col_modify_timestamp ASC";
                        break;
                    case ThreadSearchCondition::SORT_MODIFY_TIME_DESC:
                        $query .= " thrd.col_modify_timestamp DESC";
                        break;
                    case ThreadSearchCondition::SORT_COMPONENT_MODIFY_TIME_ASC:
                        $query .= " thrd.col_component_modify_timestamp ASC ";
                        break;
                    case ThreadSearchCondition::SORT_COMPONENT_MODIFY_TIME_DESC:
                        $query .= " thrd.col_component_modify_timestamp DESC ";
                        break;
                    case ThreadSearchCondition::SORT_TITLE_ASC:
                        $query .= " thrd.col_title ASC";
                        break;
                    case ThreadSearchCondition::SORT_TITLE_DESC:
                        $query .= " thrd.col_title DESC";
                        break;
                }

                $tempIsNeedComma = true;
            }

            $query = $dbConn->select_format(
                $query, $threadSearchCondition->getOffset(),
                $threadSearchCondition->getLimit()
            );
            $result = $dbConn->query($query);


            $threadCollection = new ThreadCollection();
            while ($row = $dbConn->fetch_assoc($result)) {
                $threadCollection->appendBean(new Thread($row,
                    Thread::NOT_CHECK_INPUT));
            }
            $dbConn->free_result($result);


            //search total count
            $query = "SELECT FOUND_ROWS() AS count;";
            $result = $dbConn->query($query);
            $row = $dbConn->fetch_assoc($result);
            $dbConn->free_result($result);
            if ( ! $row) {
                throw new GrnDatabaseException();
            }
            $threadCollection->setCountNoLimit($row['count']);
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        return $threadCollection;
    }



    //************************************************************************************************************
    //***********************************        thread and thread comment       *********************************
    //************************************************************************************************************
    /**
     * Select for the thread, and thread comment.
     *
     * @param \grn\space\data\condition\SynthesisThreadCommentSearchCondition $searchCondition
     *
     * @throws GrnDatabaseException         Any error in the database.
     * @return \grn\space\data\collection\SynthesisThreadCommentCollection
     */
    public function selectSynthesisThreadCommentList(
        SynthesisThreadCommentSearchCondition $searchCondition
    ) {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "SELECT SQL_CALC_FOUND_ROWS";
            $query .= " thrd._id, ";
            $query .= " thrd.col_title, ";
            $query .= " CASE thrd.col_is_rich_text WHEN '1' THEN thrd.col_content_html ELSE thrd.col_content END AS col_content, ";
            $query .= " thrd.col_is_rich_text, ";
            $query .= " thrd.col_creator, ";
            $query .= " thrd.col_creator_name, ";
            $query .= " thrd.col_create_timestamp, ";
            $query .= " thrd.col_modifier, ";
            $query .= " thrd.col_modifier_name, ";
            $query .= " thrd.col_modify_timestamp, ";
            $query .= " thrd.col_component_modify_timestamp, ";
            $query .= " cmnt._id AS " . SynthesisThreadComment::COMMENT_ID
                      . ", ";
            $query .= " cmnt.col_comment_no AS "
                      . SynthesisThreadComment::COMMENT_NO . ", ";
            $query .= " CASE cmnt.col_is_rich_text WHEN '1' THEN cmnt.col_content_html ELSE cmnt.col_content END AS "
                      . SynthesisThreadComment::COMMENT_CONTENT . ", ";
            $query .= " cmnt.col_is_rich_text AS "
                      . SynthesisThreadComment::COMMENT_IS_RICH_TEXT . ", ";
            $query .= " cmnt.col_creator AS "
                      . SynthesisThreadComment::COMMENT_CREATOR_ID . ", ";
            $query .= " cmnt.col_creator_name AS "
                      . SynthesisThreadComment::COMMENT_CREATOR_NAME . ", ";
            $query .= " cmnt.col_create_timestamp AS "
                      . SynthesisThreadComment::COMMENT_CREATE_TIME . ", ";
            $query .= " cmnt.col_modifier AS "
                      . SynthesisThreadComment::COMMENT_MODIFIER_ID . ", ";
            $query .= " cmnt.col_modifier_name AS "
                      . SynthesisThreadComment::COMMENT_MODIFIER_NAME . ", ";
            $query .= " cmnt.col_modify_timestamp AS "
                      . SynthesisThreadComment::COMMENT_MODIFY_TIME . " ";
            $query .= " FROM ";
            $query .= " tab_grn_space_thread AS thrd";
            $query .= " LEFT JOIN tab_cb_user AS user ON thrd.col_creator = user._id AND user.col_deleted IS NULL";
            $query .= " LEFT JOIN (";
            $query .= " SELECT";
            $query .= " thrdCmnt.col_thread";
            $query .= " , tmpCmnt._id";
            $query .= " , tmpCmnt.col_comment_no";
            $query .= " , tmpCmnt.col_content";
            $query .= " , tmpCmnt.col_content_html";
            $query .= " , tmpCmnt.col_is_rich_text";
            $query .= " , tmpCmnt.col_creator";
            $query .= " , tmpCmnt.col_creator_name";
            $query .= " , tmpCmnt.col_create_timestamp";
            $query .= " , tmpCmnt.col_modifier";
            $query .= " , tmpCmnt.col_modifier_name";
            $query .= " , tmpCmnt.col_modify_timestamp";
            $query .= " FROM";
            $query .= "   tab_grn_space_thread_comment AS thrdCmnt";
            $query .= " , tab_grn_space_comment AS tmpCmnt";
            $query .= " WHERE";
            $query .= " thrdCmnt.col_comment = tmpCmnt._id";
            $query .= " AND tmpCmnt.col_is_logical_delete = '0'";

            //検索項目での検索するための下準備。この段階ではスレッドとコメントをJOINしていないので、
            //検索ワードのいずれかを持つコメントを抽出しておく。
            if ($searchCondition->getSearchItemBit()
                & SynthesisThreadCommentSearchCondition::SEARCH_ITEM_COMMENT_CONTENT
            ) {
                $query .= " AND (";
                $tempIsNeedOR = false;
                foreach (
                    $searchCondition->getSearchStringArray() as $searchString
                ) {
                    $query .= ($tempIsNeedOR) ? " OR " : "";
                    $query .= " tmpCmnt.col_content LIKE ";
                    $query .= ($searchCondition->isCaseSensitivity())
                        ? "BINARY " : "";
                    $query .= "'%" . $dbConn->escapeLike($searchString) . "%'";

                    $tempIsNeedOR = true;
                }
                $query .= ")";
            }

            $query .= " ) AS cmnt";
            $query .= " ON thrd._id = cmnt.col_thread";


            //Search scope range
            if ($searchCondition->getSearchScopeType()
                === SynthesisThreadCommentSearchCondition::SEARCH_SCOPE_CATEGORY_TARGET_ONLY
            ) {
                //Search condition category id
                $query .= ", tab_grn_space_category AS ctg ";
                $query .= " WHERE thrd.col_category = ctg._id";
                $query .= " AND ctg._id = '"
                          . $dbConn->escape($searchCondition->getSearchCategoryId())
                          . "'";
            } else {
                $query .= ", tab_grn_space_category AS ctg ";
                $query .= ", tab_grn_space_category_hierarchy AS hirhy ";

                //Search condition category id
                switch ($searchCondition->getSearchScopeType()) {
                    case SynthesisThreadCommentSearchCondition::SEARCH_SCOPE_CATEGORY_ANCESTOR:
                        $query .= " WHERE thrd.col_category = ctg._id";
                        $query .= " AND ctg._id = hirhy.col_ancestor";
                        $query .= " AND hirhy.col_category = '"
                                  . $dbConn->escape(
                                $searchCondition->getSearchCategoryId()
                            ) . "'";
                        break;

                    case SynthesisThreadCommentSearchCondition::SEARCH_SCOPE_CATEGORY_DESCENDANT:
                        $query .= " WHERE thrd.col_category = ctg._id";
                        $query .= " AND ctg._id = hirhy.col_category";
                        $query .= " AND hirhy.col_ancestor = '"
                                  . $dbConn->escape(
                                $searchCondition->getSearchCategoryId()
                            ) . "'";
                        break;
                }
            }


            //Search period
            if ($searchCondition->getSearchPeriod()
                !== SynthesisThreadCommentSearchCondition::PERIOD_NONE
            ) {
                $now = time();

                switch ($searchCondition->getSearchPeriod()) {
                    case SynthesisThreadCommentSearchCondition::PERIOD_PAST_ONE_MONTHS:
                        $searchPeriodPastTime = ($now - 60 * 60 * 24 * 30);
                        break;
                    case SynthesisThreadCommentSearchCondition::PERIOD_PAST_THREE_MONTHS:
                        $searchPeriodPastTime = ($now - 60 * 60 * 24 * 30 * 3);
                        break;
                    case SynthesisThreadCommentSearchCondition::PERIOD_PAST_SIX_MONTHS:
                        $searchPeriodPastTime = ($now - 60 * 60 * 24 * 30 * 6);
                        break;
                    case SynthesisThreadCommentSearchCondition::PERIOD_PAST_ONE_YEAR:
                        $searchPeriodPastTime = ($now - 60 * 60 * 24 * 30 * 12);
                        break;
                }

                $query .= " AND thrd.col_modify_timestamp >= "
                          . $searchPeriodPastTime;
            }


            //Search items
            //検索項目での検索処理。この段階ではスレッドとコメントをJOINしているないので、
            //選択した検索項目全体を一つの情報として考えて、検索ワードのいずれも持つレコードを抽出する。
            if ($searchCondition->getSearchItemBit()
                === SynthesisThreadCommentSearchCondition::SEARCH_ITEM_NONE
            ) {
                //none search time
            } else {
                foreach (
                    $searchCondition->getSearchStringArray() as $searchString
                ) {
                    $query .= " AND (";

                    $tempIsNeedOR = false;
                    if ($searchCondition->getSearchItemBit()
                        & SynthesisThreadCommentSearchCondition::SEARCH_ITEM_TITLE
                    ) {
                        $query .= ($tempIsNeedOR) ? " OR " : "";
                        $tempIsNeedOR = true;

                        $query .= "(";
                        $query .= " thrd.col_title LIKE ";
                        $query .= ($searchCondition->isCaseSensitivity())
                            ? "BINARY " : "";
                        $query .= "'%" . $dbConn->escapeLike($searchString)
                                  . "%'";
                        $query .= ")";
                    }

                    if ($searchCondition->getSearchItemBit()
                        & SynthesisThreadCommentSearchCondition::SEARCH_ITEM_CONTENT
                    ) {
                        $query .= ($tempIsNeedOR) ? " OR " : "";
                        $tempIsNeedOR = true;

                        $query .= "(";
                        $query .= " thrd.col_content LIKE ";
                        $query .= ($searchCondition->isCaseSensitivity())
                            ? "BINARY " : "";
                        $query .= "'%" . $dbConn->escapeLike($searchString)
                                  . "%'";
                        $query .= ")";
                    }

                    if ($searchCondition->getSearchItemBit()
                        & SynthesisThreadCommentSearchCondition::SEARCH_ITEM_THREAD_CREATOR_NAME
                    ) {
                        $query .= ($tempIsNeedOR) ? " OR " : "";
                        $tempIsNeedOR = true;

                        $query .= "(";
                        $query .= " CASE WHEN user._id IS NULL THEN thrd.col_creator_name ELSE user.col_display_name END LIKE ";
                        $query .= ($searchCondition->isCaseSensitivity())
                            ? "BINARY " : "";
                        $query .= "'%" . $dbConn->escapeLike($searchString)
                                  . "%'";
                        $query .= " OR ";
                        $query .= " user.col_nickname LIKE ";
                        $query .= ($searchCondition->isCaseSensitivity())
                            ? "BINARY " : "";
                        $query .= "'%" . $dbConn->escapeLike($searchString)
                                  . "%'";
                        $query .= ")";
                    }

                    if ($searchCondition->getSearchItemBit()
                        & SynthesisThreadCommentSearchCondition::SEARCH_ITEM_COMMENT_CONTENT
                    ) {
                        $query .= ($tempIsNeedOR) ? " OR " : "";
                        $tempIsNeedOR = true;

                        $query .= "(";
                        $query .= " cmnt.col_content LIKE ";
                        $query .= ($searchCondition->isCaseSensitivity())
                            ? "BINARY " : "";
                        $query .= "'%" . $dbConn->escapeLike($searchString)
                                  . "%'";
                        $query .= ")";
                    }

                    $query .= ")";
                }
            }


            //Order by
            $query .= " ORDER BY ";
            $tempIsNeedComma = false;
            foreach ($searchCondition->getOrderSortArray() as $sortType) {
                if ($tempIsNeedComma) {
                    $query .= ",";
                }

                switch ($sortType) {
                    case SynthesisThreadCommentSearchCondition::SORT_ID_ASC:
                        $query .= " thrd._id ASC";
                        break;
                    case SynthesisThreadCommentSearchCondition::SORT_ID_DESC:
                        $query .= " thrd._id DESC";
                        break;
                    case SynthesisThreadCommentSearchCondition::SORT_CREATE_TIME_ASC:
                        $query .= " thrd.col_create_timestamp ASC";
                        break;
                    case SynthesisThreadCommentSearchCondition::SORT_CREATE_TIME_DESC:
                        $query .= " thrd.col_create_timestamp DESC";
                        break;
                    case SynthesisThreadCommentSearchCondition::SORT_MODIFY_TIME_ASC:
                        $query .= " thrd.col_modify_timestamp ASC";
                        break;
                    case SynthesisThreadCommentSearchCondition::SORT_MODIFY_TIME_DESC:
                        $query .= " thrd.col_modify_timestamp DESC";
                        break;
                    case SynthesisThreadCommentSearchCondition::SORT_COMPONENT_MODIFY_TIME_ASC:
                        $query .= " thrd.col_component_modify_timestamp ASC";
                        break;
                    case SynthesisThreadCommentSearchCondition::SORT_COMPONENT_MODIFY_TIME_DESC:
                        $query .= " thrd.col_component_modify_timestamp DESC";
                        break;
                    case SynthesisThreadCommentSearchCondition::SORT_TITLE_ASC:
                        $query .= " thrd.col_title ASC";
                        break;
                    case SynthesisThreadCommentSearchCondition::SORT_TITLE_DESC:
                        $query .= " thrd.col_title DESC";
                        break;
                    case SynthesisThreadCommentSearchCondition::SORT_COMMENT_CREATE_TIME_ASC:
                        $query .= " cmnt.col_create_timestamp ASC";
                        break;
                    case SynthesisThreadCommentSearchCondition::SORT_COMMENT_CREATE_TIME_DESC:
                        $query .= " cmnt.col_create_timestamp DESC";
                        break;
                }

                $tempIsNeedComma = true;
            }


            $query = $dbConn->select_format($query,
                $searchCondition->getOffset(), $searchCondition->getLimit());
            $result = $dbConn->query($query);


            $resultCollection = new SynthesisThreadCommentCollection();
            while ($row = $dbConn->fetch_assoc($result)) {
                $resultCollection->appendBean(
                    new SynthesisThreadComment($row,
                        SynthesisThreadComment::NOT_CHECK_INPUT)
                );
            }
            $dbConn->free_result($result);


            //search total count
            $query = "SELECT FOUND_ROWS() AS count;";
            $result = $dbConn->query($query);
            $row = $dbConn->fetch_assoc($result);
            $dbConn->free_result($result);
            if ( ! $row) {
                throw new GrnDatabaseException();
            }
            $resultCollection->setCountNoLimit($row['count']);
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        return $resultCollection;
    }

    /**
     * @param int $startId
     * @param int $endId
     * @param int $maxLength
     *
     * @return array
     */
    public function getAllThreadForFtsFullIndexer($startId, $endId, $maxLength)
    {
        $db = $this->getDatabaseConnection();
        $query = "SELECT " .
                 "t._id, " .
                 "a.col_space, " .
                 "t.col_title, " .
                 "CASE WHEN CHAR_LENGTH(t.col_content) > {$db->escape($maxLength)} "
                 .
                 "THEN 1 ELSE 0 END AS truncated, " .
                 "LEFT(t.col_content, {$db->escape($maxLength)}) AS col_content, "
                 .
                 "t.col_modifier, " .
                 "t.col_component_modify_timestamp " .
                 "FROM " .
                 "tab_grn_space_thread AS t," .
                 "tab_grn_space_category_hierarchy AS h, " .
                 "tab_grn_space_category AS c, " .
                 "tab_grn_space_space_application AS a " .
                 "WHERE " .
                 "t._id >= {$db->escape($startId)} AND " .
                 "{$db->escape($endId)} >= t._id AND " .
                 "t.col_category=h.col_category AND " .
                 "h.col_ancestor=c._id AND " .
                 "c.col_hierarchy_level=1 AND " .
                 "c._id=a.col_root_category " .
                 "FOR UPDATE";

        $result = $db->query($query);
        $rows = [];
        while ($row = $db->fetch_assoc($result)) {
            $rows[] = $row;
        }
        $db->free_result($result);

        return $rows;
    }

    /**
     * Get all discussion ids by space id.
     *
     * @param  int $spaceId
     *
     * @throws GrnDatabaseException    Any error in the database.
     * @return array discussion id(s)
     */
    public function getAllDiscussionIdBySpaceId($spaceId)
    {
        try {
            $db = $this->getDatabaseConnection();
            $query = "SELECT " .
                     "thread._id " .
                     "FROM tab_grn_space_thread AS thread " .
                     "WHERE " .
                     "thread.col_category " .
                     "IN " .
                     "(SELECT " .
                     "hierarchy.col_category " .
                     "FROM " .
                     "tab_grn_space_space_application AS space_application, "
                     .
                     "tab_grn_space_category_hierarchy AS hierarchy " .
                     "WHERE " .
                     "hierarchy.col_ancestor = space_application.col_root_category "
                     .
                     "AND ";
            $query .= "space_application.col_space = '"
                      . $db->escape($spaceId) . "');";
            $result = $db->query($query);
            $discussionId = [];
            while ($discussion = $db->fetch_assoc($result)) {
                $discussionId[] = $discussion['_id'];
            }

            return $discussionId;
        } catch (GrnDatabaseException $e) {
            throw $e;
        }
    }

    /**
     * @param $folderId_list
     *
     * @return array
     */
    public function getThreadListByFolderIdList($folderId_list)
    {
        $db = $this->getDatabaseConnection();
        $query = "SELECT SQL_CALC_FOUND_ROWS"
                 . " thrd._id,"
                 . " thrd.col_category,"
                 . " thrd.col_title,"
                 . " CASE thrd.col_is_rich_text WHEN '1' THEN thrd.col_content_html ELSE thrd.col_content END AS col_content,"
                 . " thrd.col_is_rich_text,"
                 . " thrd.col_comment_sequence_no,"
                 . " thrd.col_is_system_use,"
                 . " thrd.col_creator,"
                 . " thrd.col_creator_name,"
                 . " thrd.col_create_timestamp,"
                 . " thrd.col_modifier,"
                 . " thrd.col_modifier_name,"
                 . " thrd.col_modify_timestamp,"
                 . " thrd.col_component_modify_timestamp,"
                 . " thrd.col_folder"
                 . " FROM"
                 . " tab_grn_space_thread AS thrd" .
                 " INNER JOIN tab_grn_space_space_folder AS fol" .
                 " ON thrd.col_folder = fol._id" .
                 " WHERE";
        $query .= cb_queryf($db, " thrd.col_folder IN (@A);",
            $folderId_list);
        $threadList = [];
        $result = $db->query($query);

        while ($row = $db->fetch_assoc($result)) {
            $threadList[] = new Thread($row, Thread::NOT_CHECK_INPUT);
        }
        $db->free_result($result);

        return $threadList;
    }

    /**
     * @param $threadCollection
     * @param $target_category_id
     * @param $target_folder_id
     *
     * @return bool|\mysqli_result
     */
    public function moveThreadList(
        $threadCollection,
        $target_category_id,
        $target_folder_id
    ) {
        $login = cb_get_login_user();
        $updateTime = time();

        $dbConn = $this->getDatabaseConnection();

        $query = "UPDATE tab_grn_space_thread SET"
                 . " col_category='@S'";

        if ( ! is_null($target_folder_id)) {
            $query .= ", col_folder='@S'";
        } else {
            $query .= ", col_folder=NULL";
        }

        $query .= ", col_modifier='@S'"
                  . ", col_modifier_name='@S'"
                  . ", col_modify_timestamp='@S'"
                  . ", col_component_modify_timestamp='@S'"
                  . " WHERE"
                  . " _id IN (@A);";

        $thread_id_list = [];
        foreach ($threadCollection as $thread) {
            /** @var \grn\space\data\bean\Thread $thread */
            $thread_id_list[] = $thread->getId();

            // set update time for each discussion
            $thread->setModifyTimestamp($updateTime);
            $thread->setComponentModifyTimestamp($thread->getModifyTimestamp());
        }

        if ( ! is_null($target_folder_id)) {
            $query = cb_queryf(
                $dbConn, $query, $target_category_id, $target_folder_id,
                $login->getOID(),
                $login->get("display_name"),
                $updateTime, $updateTime, $thread_id_list
            );
        } else {
            $query = cb_queryf(
                $dbConn, $query, $target_category_id, $login->getOID(),
                $login->get("display_name"),
                $updateTime, $updateTime, $thread_id_list
            );
        }


        $result = $dbConn->query($query);

        return $result;
    }

    /**
     * @param Category $rootCategory
     * @param          $folder_id
     * @param array    $thread_id_list
     *
     * @return ThreadCollection
     */
    public function selectThreadListByFolderIdThreadIdList(
        Category $rootCategory,
        $folder_id,
        array $thread_id_list
    ) {
        $dbConn = $this->getDatabaseConnection();
        $query = "SELECT SQL_CALC_FOUND_ROWS"
                 . " thrd._id,"
                 . " thrd.col_category,"
                 . " thrd.col_title,"
                 . " CASE thrd.col_is_rich_text WHEN '1' THEN thrd.col_content_html ELSE thrd.col_content END AS col_content,"
                 . " thrd.col_is_rich_text,"
                 . " thrd.col_comment_sequence_no,"
                 . " thrd.col_is_system_use,"
                 . " thrd.col_creator,"
                 . " thrd.col_creator_name,"
                 . " thrd.col_create_timestamp,"
                 . " thrd.col_modifier,"
                 . " thrd.col_modifier_name,"
                 . " thrd.col_modify_timestamp,"
                 . " thrd.col_component_modify_timestamp,"
                 . " thrd.col_folder"
                 . " FROM tab_grn_space_thread AS thrd";

        if ( ! is_null($folder_id)) {
            $query .= " INNER JOIN tab_grn_space_space_folder AS fol"
                      . " ON thrd.col_folder = fol._id"
                      . " WHERE "
                      . " thrd.col_category = @S"
                      . " AND thrd.col_folder = @S"
                      . " AND thrd._id in (@A);";
            $query = cb_queryf($dbConn, $query, $rootCategory->getId(),
                $folder_id, $thread_id_list);
        } else {
            $query .= " WHERE "
                      . " thrd.col_category = @S"
                      . " AND thrd.col_folder IS NULL"
                      . " AND thrd._id in (@A);";
            $query = cb_queryf($dbConn, $query, $rootCategory->getId(),
                $thread_id_list);
        }


        $result = $dbConn->query($query);

        $threadCollection = new ThreadCollection();
        while ($row = $dbConn->fetch_assoc($result)) {
            $threadCollection->appendBean(new Thread($row,
                Thread::NOT_CHECK_INPUT));
        }
        $dbConn->free_result($result);

        return $threadCollection;
    }

    /**
     * @param ThreadSearchCondition $threadSearchCondition
     *
     * @return ThreadCollection
     * @throws GrnDatabaseException
     */
    public function selectThreadListByCondition(
        ThreadSearchCondition $threadSearchCondition
    ) {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "SELECT SQL_CALC_FOUND_ROWS";
            $query .= " thrd._id,";
            $query .= " thrd.col_category,";
            $query .= " thrd.col_title,";
            $query .= " CASE thrd.col_is_rich_text WHEN '1' THEN thrd.col_content_html ELSE thrd.col_content END AS col_content,";
            $query .= " thrd.col_is_rich_text,";
            $query .= " thrd.col_comment_sequence_no,";
            $query .= " thrd.col_is_system_use,";
            $query .= " thrd.col_creator,";
            $query .= " thrd.col_creator_name,";
            $query .= " thrd.col_create_timestamp,";
            $query .= " thrd.col_modifier,";
            $query .= " thrd.col_modifier_name,";
            $query .= " thrd.col_modify_timestamp,";
            $query .= " thrd.col_component_modify_timestamp,";
            $query .= " thrd.col_folder";
            $query .= " FROM";
            $query .= " tab_grn_space_thread AS thrd";
            $query .= ", tab_grn_space_category AS ctg ";

            $folderId = $threadSearchCondition->getSearchFolderId();
            if ( ! is_null($folderId)) {
                $query .= ", tab_grn_space_space_folder AS fol ";
                $query .= " WHERE thrd.col_category = ctg._id";
                $query .= " AND thrd.col_folder = fol._id";
                $query .= " AND fol._id = '"
                          . $dbConn->escape($threadSearchCondition->getSearchFolderId())
                          . "'";
                $query .= " AND ctg._id = '"
                          . $dbConn->escape($threadSearchCondition->getSearchCategoryId())
                          . "'";
            } else {
                $query .= " WHERE thrd.col_category = ctg._id";
                $query .= " AND ctg._id = '"
                          . $dbConn->escape($threadSearchCondition->getSearchCategoryId())
                          . "'";
                $query .= " AND thrd.col_folder IS NULL";
            }

            if ($threadSearchCondition->getIsSystemUse() === false) {
                $query .= " AND thrd.col_is_system_use = 0";
            }

            //Order by
            $query .= " ORDER BY ";
            $tempIsNeedComma = false;
            foreach ($threadSearchCondition->getOrderSortArray() as $sortType) {
                if ($tempIsNeedComma) {
                    $query .= ", ";
                }

                switch ($sortType) {
                    case ThreadSearchCondition::SORT_ID_ASC:
                        $query .= " thrd._id ASC";
                        break;
                    case ThreadSearchCondition::SORT_ID_DESC:
                        $query .= " thrd._id DESC";
                        break;
                    case ThreadSearchCondition::SORT_CREATE_TIME_ASC:
                        $query .= " thrd.col_create_timestamp ASC";
                        break;
                    case ThreadSearchCondition::SORT_CREATE_TIME_DESC:
                        $query .= " thrd.col_create_timestamp DESC";
                        break;
                    case ThreadSearchCondition::SORT_MODIFY_TIME_ASC:
                        $query .= " thrd.col_modify_timestamp ASC";
                        break;
                    case ThreadSearchCondition::SORT_MODIFY_TIME_DESC:
                        $query .= " thrd.col_modify_timestamp DESC";
                        break;
                    case ThreadSearchCondition::SORT_COMPONENT_MODIFY_TIME_ASC:
                        $query .= " thrd.col_component_modify_timestamp ASC ";
                        break;
                    case ThreadSearchCondition::SORT_COMPONENT_MODIFY_TIME_DESC:
                        $query .= " thrd.col_component_modify_timestamp DESC ";
                        break;
                    case ThreadSearchCondition::SORT_TITLE_ASC:
                        $query .= " thrd.col_title ASC";
                        break;
                    case ThreadSearchCondition::SORT_TITLE_DESC:
                        $query .= " thrd.col_title DESC";
                        break;
                }

                $tempIsNeedComma = true;
            }

            $query = $dbConn->select_format(
                $query, $threadSearchCondition->getOffset(),
                $threadSearchCondition->getLimit()
            );
            $result = $dbConn->query($query);


            $threadCollection = new ThreadCollection();
            while ($row = $dbConn->fetch_assoc($result)) {
                $threadCollection->appendBean(new Thread($row,
                    Thread::NOT_CHECK_INPUT));
            }
            $dbConn->free_result($result);

            //search total count
            $query = "SELECT FOUND_ROWS() AS count;";
            $result = $dbConn->query($query);
            $row = $dbConn->fetch_assoc($result);
            $dbConn->free_result($result);
            if ( ! $row) {
                throw new GrnDatabaseException();
            }
            $threadCollection->setCountNoLimit($row['count']);
        } catch (GrnDatabaseException $e) {
            //将来的にはGrnDatabaseExceptionをキャッチしたい。
            //In the future you want to catch the GrnDatabaseException.
            throw $e;
        }

        return $threadCollection;
    }
}
